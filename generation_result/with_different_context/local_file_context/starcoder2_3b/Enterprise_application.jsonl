{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    ids = request.httprequest.args.getlist('ids')\n    if not ids:\n        return request.not_found()\n    if not request.env.user.has_group('account.group_account_manager'):\n        for id in ids:\n            if not request.env['ir.attachment'].sudo().browse(int(id)).exists():\n                return request.not_found()\n            if not request.env['ir.attachment'].sudo().browse(int(id)).check_access_rights('read'):\n                return request.not_found()\n            if not request.env['ir.attachment'].sudo().browse(int(id)).check_access_rule('read'):\n                return request.not_found()\n    content = b''\n    for id in ids:\n        content += request.env['ir.attachment'].sudo().browse(int(id)).datas\n    return request.make_response(content, _get_zip_headers(content, 'account_documents.zip'))\n\n", "CodeBleu_score": 32.08544821325137}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = request.httprequest.args.getlist('attachment_ids[]')\n    attachment_ids = [int(attachment_id) for attachment_id in attachment_ids]\n    attachments = request.env['ir.attachment'].browse(attachment_ids)\n    if not attachments:\n        return request.not_found()\n    if not request.env.user.has_group('account.group_account_manager'):\n        attachments = attachments.filtered(lambda a: a.create_uid == request.env.uid)\n    attachments = attachments.filtered(lambda a: a.res_model in request.env.user.company_ids.mapped('document_types'))\n    if not attachments:\n        return request.not_found()\n    content = b''.join([attachment.datas for attachment in attachments])\n    filename = 'odoo_documents.zip'\n    return request.make_response(content, headers=_get_zip_headers(content, filename))\n\n", "CodeBleu_score": 42.80585304764617}, {"code": "def export_zip_documents(self, **args)\n\t\n    ids = request.httprequest.args.getlist('ids')\n    ids = [int(id) for id in ids]\n    if not ids:\n        return request.not_found()\n    attachments = request.env['ir.attachment'].sudo().browse(ids)\n    if not attachments:\n        return request.not_found()\n    for attachment in attachments:\n        if not request.env.user.has_group('account.group_account_manager') and not attachment.is_public:\n            return request.not_found()\n    zip_content = b''\n    for attachment in attachments:\n        zip_content += attachment.datas\n    return request.make_response(zip_content, _get_zip_headers(zip_content, 'account_document_export.zip'))\n\n", "CodeBleu_score": 35.197664944190656}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(PortalAccount, self)._prepare_home_portal_values(counters)\n    if request.env.user.has_group('account.group_account_user'):\n        values['invoice_count'] = request.env['account.move'].sudo().search_count(\n            expression.AND([\n                ['&', ('state', 'in', ('draft', 'proforma', 'open')), ('type', '=', 'out_invoice')],\n                ['|', ('company_id', '=', False), ('company_id', '=', request.env.user.company_id.id)],\n                ['|', ('partner_id', '=', False), ('partner_id', '=', request.env.user.partner_id.id)],\n            ]))\n        values['bill_count'] = request.env['account.move'].sudo().search_count(\n            expression.AND([\n                ['&', ('state', 'in', ('draft', 'proforma', 'open')), ('type', '=', 'out_refund')],\n                ['|', ('company_id', '=', False), ('company_id', '=', request.env.user.company_id.id)],\n                ['|', ('partner_id', '=', False), ('partner_id', '=', request.env.user.partner_id.id)],\n            ]))\n    return values\n\n", "CodeBleu_score": 36.3310873538374}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(PortalAccount, self)._prepare_home_portal_values(counters)\n    if self.env.user.has_group('account.group_account_user'):\n        # Invoices\n        values['invoice_count'] = self.env['account.move'].sudo().search_count([('partner_id', '=', self.env.user.partner_id.id), ('state', 'in', ['draft', 'proforma', 'open'])])\n        # Bills\n        values['bill_count'] = self.env['account.move'].sudo().search_count([('partner_id', '=', self.env.user.partner_id.id), ('state', 'in', ['draft', 'proforma', 'open'])])\n    return values\n\n\n\n", "CodeBleu_score": 36.21901357855205}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(PortalAccount, self)._prepare_home_portal_values(counters)\n    if request.env.user.has_group('account.group_account_user'):\n        values.update({\n            'invoice_count': len(request.env['account.move'].sudo().search([('partner_id', 'child_of', request.env.user.partner_id.ids), ('state', 'in', ['open', 'paid', 'draft'])])),\n            'bill_count': len(request.env['account.move'].sudo().search([('partner_id', 'child_of', request.env.user.partner_id.ids), ('state', 'in', ['open', 'paid', 'draft'])])),\n        })\n    return values\n\n", "CodeBleu_score": 26.150452738674034}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t  values = {}\n    domain = self._get_invoices_domain()\n    if date_begin:\n        domain += [('invoice_date', '>=', date_begin)]\n    if date_end:\n        domain += [('invoice_date', '<=', date_end)]\n    if filterby and filterby!= 'all':\n        domain += [('move_type', 'in', filterby.split('_'))]\n    if sortby:\n        order = self._get_account_searchbar_sortings()[sortby]['order']\n    else:\n        order = 'invoice_date desc'\n    invoices = request.env['account.move'].search(domain, order=order, limit=self._items_per_page, offset=self._get_invoices_offset(page))\n    if not invoices:\n        return request.redirect('/my/invoices')\n    invoices_count = request.env['account.move'].search_count(domain)\n    pager = portal_pager(url=\"/my/invoices\", url_args={'date_begin': date_begin, 'date_end': date_end,'sortby': sortby, 'filterby': filterby}, total=invoices_count, page=page, step=self._items_per_page)\n    values.update(pager)\n    values.update({'invoices': invoices})\n    return request.render(\"website_portal.my_invoices\", values)\n\n", "CodeBleu_score": 38.02366064604751}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t  values = self._prepare_portal_layout_values()\n    invoices = request.env['account.move'].sudo().search([('partner_id', '=', request.env.user.partner_id.id), ('state', 'not in', ('cancel', 'draft'))])\n    values['invoices'] = invoices\n    values['page_name'] = 'invoice'\n    values['date_begin'] = date_begin\n    values['date_end'] = date_end\n    values['sortby'] = sortby\n    values['filterby'] = filterby\n    return request.render(\"account.portal_my_invoices\", values)\n", "CodeBleu_score": 29.934988944046548}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t  values = {}\n    domain = self._get_invoices_domain()\n    searchbar_sortings = self._get_account_searchbar_sortings()\n    searchbar_filters = self._get_account_searchbar_filters()\n    # Searchbar\n    searchbar_sortby = self._get_account_searchbar_sortby(searchbar_sortings, sortby)\n    searchbar_filterby = self._get_account_searchbar_filterby(searchbar_filters, filterby)\n    # Pagination\n    domain += self._get_account_searchbar_domain(searchbar_filterby, searchbar_sortby)\n    invoice_count = request.env['account.move'].search_count(domain)\n    pager = portal_pager(url=\"/my/invoices\", url_args={'date_begin': date_begin, 'date_end': date_end,'sortby': sortby, 'filterby': filterby}, total=invoice_count, page=page, step=self._items_per_page)\n    # Invoices\n    invoices = request.env['account.move'].search(domain, order=searchbar_sortby['order'], limit=self._items_per_page, offset=pager['offset'])\n    # Prepare the values for rendering by calling the _prepare_portal_layout_values() method of the parent class.\n    values.update(self._prepare_portal_layout_values())\n    values.update(pager=pager)\n    values.update(searchbar=True)\n    values.update(searchbar_sortings=searchbar_sortings)\n    values.update(searchbar_filters=searchbar_filters)\n    values.update(searchbar_sortby=searchbar_sortby)\n    values.update(searchbar_filterby=searchbar_filterby)\n    values.update(invoices=invoices)\n    return request.render(\"portal.portal_my_invoices\", values)\n\n", "CodeBleu_score": 36.194813049396735}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\tvoice = request.env['account.move'].sudo().browse(invoice_id)\n    if not invoice or not invoice.check_access_rights('read', raise_exception=False):\n        raise AccessError(_('Access denied.'))\n    if invoice.state not in ('posted','sent'):\n        raise MissingError(_('Invoice must be in posted or sent state to be accessed.'))\n    if report_type == 'pdf' and invoice.state == 'posted':\n        docs = invoice.mapped('legal_document_ids')\n        if len(docs) > 1:\n            # create a zip file with all attachments\n            headers = _get_zip_headers(docs)\n            response = request.make_response(b'', headers)\n            with open(request.env['ir.config_parameter'].sudo().get_param('account.report.file.path') + 'account_reports.zip', 'wb') as f:\n                for doc in docs:\n                    f.write(doc.datas)\n            f.close()\n            response.stream.write(open(request.env['ir.config_parameter'].sudo().get_param('account.report.file.path') + 'account_reports.zip', 'rb').read())\n            response.stream.seek(0)\n            return response\n        else:\n            # return a single attachment\n            response = request.make_response(b'', headers)\n            response.stream.write(docs.datas)\n            response.stream.seek(0)\n            return response\n    else:\n        values = self._invoice_get_page_view_values(invoice, access_token, **kw)\n        return request.render('account.portal_my_invoice_detail', values)\n", "CodeBleu_score": 40.02800381488695}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\tvoice = request.env['account.move'].sudo().browse(invoice_id)\n    if not invoice.check_access_rights('read'):\n        raise AccessError(_('Access denied.'))\n    if not invoice.check_access_rule('read'):\n        raise MissingError(_('Invoice access denied.'))\n    if not invoice.invoice_date:\n        raise MissingError(_('Invoice date is missing.'))\n    if not invoice.invoice_date_due:\n        raise MissingError(_('Invoice due date is missing.'))\n    if not invoice.partner_id:\n        raise MissingError(_('Invoice partner is missing.'))\n    if not invoice.currency_id:\n        raise MissingError(_('Invoice currency is missing.'))\n    if not invoice.company_id:\n        raise MissingError(_('Invoice company is missing.'))\n    if not invoice.state == 'posted':\n        raise MissingError(_('Invoice is not in a posted state.'))\n    if report_type == 'pdf':\n        if not invoice.invoice_payment_term_id:\n            raise MissingError(_('Invoice payment term is missing.'))\n        if not invoice.invoice_payment_term_id.line_ids:\n            raise MissingError(_('Invoice payment term line is missing.'))\n        if not invoice.invoice_payment_term_id.line_ids[0].fixed_date:\n            raise MissingError(_('Invoice payment term line fixed date is missing.'))\n        if not invoice.invoice_payment_term_id.line_ids[0].payment_type == 'fixed':\n            raise MissingError(_('Invoice payment term line payment type is not fixed.'))\n        if not invoice.invoice_payment_term_id.line_ids[0].amount:\n            raise MissingError(_('Invoice payment term line amount is missing.'))\n        if not invoice.invoice_payment_term_id.line_ids[0].amount_percentage:\n            raise MissingError(_('Invoice payment term line amount percentage is missing.'))\n        if not invoice.invoice_payment_term_id.line_ids[0].amount_percentage == 100.0:\n            raise MissingError(_('Invoice payment term line amount percentage is not 100.'))\n        if not invoice.invoice_payment_term_id.line_ids[0].type == 'percent':\n            raise MissingError(_('Invoice payment term line type is not percent.'))", "CodeBleu_score": 19.33205864727038}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\tvoice = request.env['account.move'].sudo().browse(invoice_id).with_user(request.env.user)\n    if not invoice.check_access_rights('read', raise_exception=False):\n        raise AccessError(_('Access denied.'))\n    if not invoice.check_access_rule('read'):\n        raise MissingError(_('Invoice not found.'))\n    if not invoice.invoice_date:\n        raise MissingError(_('Invoice not found.'))\n    if not invoice.invoice_date_due:\n        raise MissingError(_('Invoice not found.'))\n    if not invoice.state in ('posted', 'open'):\n        raise MissingError(_('Invoice not found.'))\n    if not invoice.company_id.allow_portal_to_send_email:\n        raise MissingError(_('Invoice not found.'))\n    if not invoice.company_id.allow_portal_to_send_email and not invoice.company_id.allow_portal_to_send_sms:\n        raise MissingError(_('Invoice not found.'))\n    if not invoice.company_id.allow_portal_to_send_email and not invoice.company_id.allow_portal_to_send_fax:\n        raise MissingError(_('Invoice not found.'))\n    if not invoice.company_id.allow_portal_to_send_email and not invoice.company_id.allow_portal_to_send_letter:\n        raise MissingError(_('Invoice not found.'))\n    if not invoice.company_id.allow_portal_to_send_email and not invoice.company_id.allow_portal_to_send_email:\n        raise MissingError(_('Invoice not found.'))\n    if not invoice.company_id.allow_portal_to_send_email and not invoice.company_id.allow_portal_to_send_email:\n        raise MissingError(_('Invoice not found.'))\n    if not invoice.company_id.allow_portal_to_send_email and not invoice.company_id.allow_portal_to_send_email:\n        raise MissingError(_('Invoice not found.'))\n    if not invoice.company_id.allow_portal_to_send_email and not invoice.company_id.allow_portal_to_send_email:\n        raise MissingError(_('Invoice not found.'))\n    if not invoice.", "CodeBleu_score": 18.888520105273575}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t   self.env['product.template'].search([('company_id', '=', company.id)]).write({'sale_taxes_id': company.account_sale_tax_id.id, 'purchase_taxes_id': company.account_purchase_tax_id.id})\n", "CodeBleu_score": 10.671605390640588}, {"code": "def _get_demo_data_products(self, company=False)\n\t   # This is a generator because data created here might be referenced by xml_id to data\n    # created later but defined in this same function.\n    for product in self.env['product.template'].search([('company_id', '=', company.id)]):\n        if product.taxes_id:\n            product.taxes_id.update_onchange_tax_ids(product.taxes_id)\n        if product.supplier_taxes_id:\n            product.supplier_taxes_id.update_onchange_tax_ids(product.supplier_taxes_id)\n\n", "CodeBleu_score": 15.416124262187235}, {"code": "def _get_demo_data_products(self, company=False)\n\t   product_ids = self.env['product.template'].\\\n        search([('company_id', 'in', self._context.get('company_ids', [company.id]))])\n    if company.account_sale_tax_id:\n        product_ids.write({'taxes_id': [(6, 0, [company.account_sale_tax_id.id])]})\n    if company.account_purchase_tax_id:\n        product_ids.write({'taxes_id': [(6, 0, [company.account_purchase_tax_id.id])]})\n    return product_ids\n\n", "CodeBleu_score": 19.647052096695734}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    model_data = self.env['ir.model.data'].get_object('account', xml_id, company=company)\n    if model_data:\n        return model_data.res_id\n    accounts = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.name', '=', account_type)])\n    if accounts:\n        return accounts[0].id\n    return False\n", "CodeBleu_score": 35.41446035153831}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    data_obj = self.env['ir.model.data']\n    account_obj = self.env['account.account']\n    domain = [('company_id', '=', company.id), ('code', '=', xml_id)]\n    account = data_obj.get_object('account', xml_id)\n    if not account:\n        account = account_obj.search(domain, limit=1)\n    return account\n\n    @api.model\n    def _get_demo_data_account(self, company=False):\n        return {\n            'demo_account_1': {\n                'name': '',\n                'code': '1000',\n                'user_type_id': self._get_demo_account(\n                    'account_receivable',\n                   'receivable',\n                    self.env.company,\n                ).user_type_id.id,\n            },\n            'demo_account_2': {\n                'name': '', \n                'code': '2000',\n                'user_type_id': self._get_demo_account(\n                    'account_payable',\n                    'payable',\n                    self.env.company,\n                ).user_type_id.id,\n            },\n            'demo_account_3': {\n                'name': '',\n                'code': '3000',\n                'user_type_id': self._get_demo_account(\n                    'account_receivable',\n                   'receivable',\n                    self.env.company,\n                ).user_type_id.id,\n            },\n            'demo_account_4': {\n                'name': '', \n                'code': '4000',\n                'user_type_id': self._get_demo_account(\n                    'account_payable',\n                    'payable',\n                    self.env.company,\n                ).user_type_id.id,\n            },\n            'demo_account_5': {\n                'name': '',\n                'code': '5000',\n                'user_type_id': self._get", "CodeBleu_score": 34.97571373213984}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account_id = None\n    try:\n        account_id = self.env['ir.model.data'].get_object_reference('account', xml_id)[1]\n    except ValueError:\n        account_id = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.name', '=', account_type)], limit=1).id\n    return account_id\n", "CodeBleu_score": 34.67757682751929}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t    for account in self:\n        if account.account_type == 'earning' and account.company_id.earning_account_id:\n            raise ValidationError(_(\"You cannot have more than one account of type 'Current Year Earnings' for a company.\"))\n", "CodeBleu_score": 20.855100577848997}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t    for account in self:\n        if account.account_type == 'earning':\n            company_id = account.company_id.id\n            accounts = self.env['account.account'].search([('company_id', '=', company_id), ('account_type', '=', 'earning')])\n            if len(accounts) > 1:\n                raise ValidationError(_('There is more than one account with the \"Current Year Earnings\" type for the current company.'))\n\n", "CodeBleu_score": 40.43062613205825}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t    for account in self:\n        if account.account_type == 'earning' and account.company_id:\n            if self.search_count([('account_type', '=', 'earning'), ('company_id', '=', account.company_id.id)]) > 1:\n                raise ValidationError(_('You cannot have more than one account of type \"Current Year Earnings\" for each company.'))\n\n", "CodeBleu_score": 28.40729391513407}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        if 'default_code' in self._context:\n            name = self._context['default_code']\n        elif 'default_name' in self._context:\n            name = self._context['default_name']\n        else:\n            return super()._name_search(name, domain, operator, limit, order)\n    if 'default_name' in self._context and 'default_code' in self._context:\n        return super()._name_search(name, domain, operator, limit, order)\n    if 'default_code' in self._context:\n        name = self._context['default_code']\n    if 'default_name' in self._context:\n        name = self._context['default_name']\n    if 'default_partner_id' in self._context:\n        partner_id = self._context['default_partner_id']\n        if not isinstance(partner_id, (int, str)):\n            partner_id = partner_id.id\n        if partner_id:\n            most_frequent_account = self._get_most_frequent_account_for_partner(self._context['company_id'], partner_id, self._context.get('default_type'))\n            if most_frequent_account:\n                return super()._name_search(most_frequent_account.code, domain, operator, limit, order)\n    return super()._name_search(name, domain, operator, limit, order)\n", "CodeBleu_score": 34.06615865918116}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self._context.get('search_default_code'):\n        account_id = self._get_most_frequent_account_for_partner(self._context.get('company_id'), self._context.get('partner_id'), self._context.get('search_default_move_type'))\n        if account_id:\n            name = self.browse(account_id).code\n    if not name:\n        return super()._name_search(name, domain, operator, limit, order)\n    if operator in ('=', '!=') and not name.isnumeric():\n        operator = 'ilike'\n    domain = domain or []\n    if operator in ('=', '!='):\n        domain = expression.AND([domain, [('code', operator, name)]])\n    elif operator == 'ilike':\n        domain = expression.AND([domain, [('code', 'ilike', name)]])\n    elif operator == 'not ilike':\n        domain = expression.AND([domain, [('code', 'not ilike', name)]])\n    if operator == 'in':\n        domain = expression.AND([domain, [('code', 'in', name.split(','))]])\n    if operator == 'not in':\n        domain = expression.AND([domain, [('code', 'not in', name.split(','))]])\n    if operator == 'like':\n        domain = expression.AND([domain, [('code', 'like', name)]])\n    if operator == 'not like':\n        domain = expression.AND([domain, [('code', 'not like', name)]])\n    if operator == 'not in':\n        domain = expression.AND([domain, [('code', 'not in', name.split(','))]])\n    if operator == 'not ilike':\n        domain = expression.AND([domain, [('code', 'not ilike', name)]])\n    if operator == 'not like':\n        domain = expression.AND([domain, [('code', 'not like', name)]])\n    if operator == 'not ilike':\n        domain = expression.AND([domain, [('code', 'not ilike', name)]])\n    if operator == 'not in':\n        domain = expression.AND([domain, [('code', 'not in', name.split(','))]])\n    if operator == 'not like':\n        domain = expression.AND([domain, [('code', 'not like', name)]])\n    if operator == 'not", "CodeBleu_score": 43.882616482157864}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        return self.browse()\n    if self._context.get('default_code') or self._context.get('default_name'):\n        return self.search([('code', operator, name)] + (domain or []), limit=limit, order=order)\n    if self._context.get('default_partner_id'):\n        partner_id = self._context.get('default_partner_id')\n        company_id = self._context.get('default_company_id')\n        if move_type := self._context.get('default_move_type'):\n            return self.search(self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type), limit=limit, order=order)\n    return self.search([('code', operator, name)] + (domain or []), limit=limit, order=order)\n", "CodeBleu_score": 36.163766380906374}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    for field in self._fields:\n        if field not in excluded:\n            if field == 'name':\n                new_name = new.name\n                if new_name and new_name.endswith(' (copy)'):\n                    new_name = new_name[:-7]\n                new.name = new_name +'(copy)'\n            else:\n                new.write({field: getattr(self, field)})\n    return new\n\n\n\n", "CodeBleu_score": 28.48614941327722}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    new.write({\n        field: getattr(self, field)\n        for field in self._fields if field not in excluded\n    })\n    if new._name =='res.partner':\n        new.name = new._format_name(new.name)\n", "CodeBleu_score": 19.454923011735804}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    for field in self._fields.keys():\n        if field not in excluded:\n            if field == 'name':\n                new[field] = self[field]\n            else:\n                new[field] = self[field] or False\n    new._cache.clear()\n    new._cache_depends.clear()\n    if new._name == 'account.account':\n        new.name = new.name.replace(self.name, new.name)\n\n", "CodeBleu_score": 36.87500755136628}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    invoice_types = self.env['account.move'].get_sale_types(include_receipts=True)\n    query = self.env['account.move.line']._search([\n        ('parent_state', '=', 'posted'),\n        ('move_id.move_type', 'in', invoice_types),\n    ])\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(account_id) for account_id in self.ids],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n    query_string, query_param = query.select(\n        r\"\"\"\n            DISTINCT move_id, (regexp_matches(jsonb_object_keys(account_move_line.analytic_distribution), '\\d+', 'g'))[1]::int as account_id\n        \"\"\"\n    )\n    query_string = f\"\"\"\n        SELECT account_id, count(move_id) FROM\n        ({query_string}) distribution\n        GROUP BY account_id\n    \"\"\"\n    self._cr.execute(query_string, query_param)\n    data = {res['account_id']: res['count'] for res in self._cr.dictfetchall()}\n    action = self.env.ref('account.action_move_out_invoice_type').read()[0]\n    action['context'] = {\n       'search_default_invoice_count': data.get(self.id, 0),\n        'default_account_id': self.id,\n        'default_analytic_account_id': self.analytic_account_id.id,\n    }\n    return action\n\n", "CodeBleu_score": 39.10577401949817}, {"code": "def action_view_invoice(self)\n\t\n    action = self.env.ref('account.action_move_customer_invoice_tree1').read()[0]\n    action['context'] = {'search_default_partner_id': self.partner_id.id}\n    action['domain'] = [('move_id.move_type', 'in', self.env['account.move'].get_sale_types(include_receipts=True)), ('move_id.partner_id', '=', self.partner_id.id), ('move_id.state', '=', 'posted'), ('move_id.analytic_account_id', 'in', self.env['account.analytic.account']._search([('id', 'in', self.ids)]))]\n    return action\n\n", "CodeBleu_score": 30.03749073706057}, {"code": "def action_view_invoice(self)\n\t\n    action = self.env.ref('account.action_move_out_invoice_type').read()[0]\n    action['context'] = {'default_move_type': 'out_invoice', 'default_partner_id': self.partner_id.id, 'default_analytic_account_id': self.analytic_account_id.id}\n    action['domain'] = [('id', 'in', self.env['account.move.line']._search([('parent_state', '=', 'posted'), ('move_id.move_type', 'in', self.env['account.move'].get_sale_types(include_receipts=True))]).ids)]\n    return action\n\n", "CodeBleu_score": 31.84008935522326}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    query = self.env['account.move.line']._search([('move_id.move_type', 'in', self.env['account.move'].get_purchase_types())])\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(self.id)],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n    query_string, query_param = query.select('DISTINCT account_move_line.move_id')\n    self._cr.execute(query_string, query_param)\n    move_ids = [line.get('move_id') for line in self._cr.dictfetchall()]\n    result = {\n        \"type\": \"ir.actions.act_window\",\n        \"res_model\": \"account.move\",\n        \"domain\": [('id', 'in', move_ids)],\n        \"context\": {\"create\": False, 'default_move_type': 'in_invoice'},\n        \"name\": _(\"Vendor Bills\"),\n        'view_mode': 'tree,form',\n    }\n    return result\n\n", "CodeBleu_score": 81.3073871986824}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    query = self.env['account.move.line']._search([('move_id.move_type', 'in', self.env['account.move'].get_purchase_types())])\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(self.id)],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n    query_string, query_param = query.select('DISTINCT account_move_line.move_id')\n    self._cr.execute(query_string, query_param)\n    move_ids = [line.get('move_id') for line in self._cr.dictfetchall()]\n    result = {\n        \"type\": \"ir.actions.act_window\",\n        \"res_model\": \"account.move\",\n        \"domain\": [('id', 'in', move_ids)],\n        \"context\": {\"create\": False, 'default_move_type': 'in_invoice'},\n        \"name\": _(\"Vendor Bills\"),\n        'view_mode': 'tree,form',\n    }\n    return result\n\n", "CodeBleu_score": 81.3073871986824}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    query = self.env['account.move.line']._search([('move_id.move_type', 'in', self.env['account.move'].get_purchase_types())])\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(self.id)],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n    query_string, query_param = query.select('DISTINCT account_move_line.move_id')\n    self._cr.execute(query_string, query_param)\n    move_ids = [line.get('move_id') for line in self._cr.dictfetchall()]\n    result = {\n        \"type\": \"ir.actions.act_window\",\n        \"res_model\": \"account.move\",\n        \"domain\": [('id', 'in', move_ids)],\n        \"context\": {\"create\": False, 'default_move_type': 'in_invoice'},\n        \"name\": _(\"Vendor Bills\"),\n        'view_mode': 'tree,form',\n    }\n    return result", "CodeBleu_score": 81.3073871986824}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        values.pop('attachment_ids')\n    with self._check_attachments(self, values):\n        return super().write(values)\n\n", "CodeBleu_score": 34.99106694976055}, {"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        del values['attachment_ids']\n    with self._check_attachments(self, values):\n        return super().write(values)\n", "CodeBleu_score": 30.139673610809925}, {"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        del values['attachment_ids']\n    with self._check_attachments(self, values):\n        return super().write(values)\n\n\n", "CodeBleu_score": 30.139673610809925}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    if self.env.context.get('skip_bank_account_creation'):\n        return self.env['account.account'].search([])\n    else:\n        bank_account = self.env['account.account'].search([('code', '=', self.bank_account_number), ('partner_id', '=', self.partner_id.id)], limit=1)\n        if bank_account:\n            return bank_account\n        return self.env['account.account'].create({\n            'name': _('Bank account for %s') % self.partner_id.name,\n            'code': self.bank_account_number,\n            'user_type_id': self.env.ref('account.data_account_type_current_assets').id,\n            'company_id': self.company_id.id,\n            'partner_id': self.partner_id.id,\n        })\n\n", "CodeBleu_score": 42.95431071482409}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if self.env.user.company_id.skip_bank_account_creation:\n        return self.env['account.account'].search([('id', '=', False)])\n    else:\n        bank_account = self.env['account.account'].search([\n            ('code', '=', self.env.user.company_id.bank_account_number),\n            ('partner_id', '=', self.partner_id.id),\n            ('company_id', '=', self.env.user.company_id.id),\n        ])\n        if not bank_account:\n            bank_account = self.env['account.account'].create({\n                'name': self.env.user.company_id.bank_account_name,\n                'code': self.env.user.company_id.bank_account_number,\n                'user_type_id': self.env.ref('account.data_account_type_current_assets').id,\n                'company_id': self.env.user.company_id.id,\n                'partner_id': self.partner_id.id,\n            })\n        return bank_account\n\n", "CodeBleu_score": 50.886877240431126}, {"code": "def _find_or_create_bank_account(self)\n\t\n    company_id = self.env.company.id\n    if self.env['ir.config_parameter'].sudo().get_param('account.bank_statement_skip_bank_account_creation'):\n        return self.env['account.account'].search([('company_id', '=', company_id), ('user_type_id', '=', self.env.ref('account.data_account_type_current_assets').id)], limit=1)\n    return self.env['account.account'].search([('company_id', '=', company_id), ('user_type_id', '=', self.env.ref('account.data_account_type_current_assets').id), ('code', '=', self.journal_id.bank_account_id.code)], limit=1)\n\n", "CodeBleu_score": 29.817666311109065}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    if currency == balance.currency_id:\n        return {\n            'transaction_amount': amount_currency,\n            'transaction_currency': currency,\n            'journal_amount': balance.amount_currency,\n            'journal_currency': currency,\n            'company_amount': balance.balance,\n            'company_currency': currency,\n        }\n    if currency == balance.company_currency_id:\n        return {\n            'transaction_amount': amount_currency,\n            'transaction_currency': currency,\n            'journal_amount': balance.amount_currency,\n            'journal_currency': currency,\n            'company_amount': balance.balance,\n            'company_currency': currency,\n        }\n    if currency == balance.balance.currency_id:\n        return {\n            'transaction_amount': amount_currency,\n            'transaction_currency': currency,\n            'journal_amount': balance.amount_currency,\n            'journal_currency': currency,\n            'company_amount': balance.balance,\n            'company_currency': currency,\n        }\n    if currency == balance.balance.company_currency_id:\n        return {\n            'transaction_amount': amount_currency,\n            'transaction_currency': currency,\n            'journal_amount': balance.amount_currency,\n            'journal_currency': currency,\n            'company_amount': balance.balance,\n            'company_currency': currency,\n        }\n    if currency == balance.amount_currency:\n        return {\n            'transaction_amount': amount_currency,\n            'transaction_currency': currency,\n            'journal_amount': balance.amount_currency,\n            'journal_currency': currency,\n            'company_amount': balance.balance,\n            'company_currency': currency,\n        }\n    if currency == balance.company_currency_id:\n        return {\n            'transaction_amount': amount_currency,\n            'transaction_currency': currency,\n            'journal_amount': balance.amount_currency,\n            'journal_currency': currency,\n            'company_amount': balance.balance,\n            'company_currency': currency,\n        }\n    if currency == balance.balance.amount_currency:\n        return {\n            'transaction_amount': amount_currency,\n            'transaction_currency': currency,\n            'journal_amount': balance.amount_currency,\n            'journal_currency': currency,\n            'company_amount': balance.balance,\n            'company_currency':", "CodeBleu_score": 16.428281966268717}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    # Retrieve relevant accounting amounts and currencies\n    transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n    # Compute transaction amount, journal amount, and company amount using various exchange rates\n    if transaction_currency == currency:\n        transaction_amount = balance\n        journal_amount = amount_currency\n    elif transaction_currency == company_currency:\n        transaction_amount = balance * currency.rate\n        journal_amount = amount_currency * currency.rate\n    elif journal_currency == currency:\n        transaction_amount = balance / currency.rate\n        journal_amount = amount_currency / currency.rate\n    elif journal_currency == company_currency:\n        transaction_amount = balance / currency.rate * company_currency.rate\n        journal_amount = amount_currency / currency.rate * company_currency.rate\n    # Adjust transaction amount and balance based on the currency type\n    if transaction_currency.is_zero():\n        transaction_amount = 0.0\n        balance = 0.0\n    elif transaction_currency.is_zero():\n        journal_amount = 0.0\n        amount_currency = 0.0\n    # Return the computed amounts in a dictionary\n    return {\n        \"transaction_amount\": transaction_amount,\n        \"transaction_currency\": transaction_currency,\n        \"journal_amount\": journal_amount,\n        \"journal_currency\": journal_currency,\n        \"company_amount\": company_amount,\n        \"company_currency\": company_currency,\n    }\n\n", "CodeBleu_score": 31.16624905597631}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    if not amount_currency:\n        return {'amount_currency': 0.0, 'currency_id': currency}\n    if currency == amount_currency:\n        return {'amount_currency': amount_currency, 'currency_id': currency}\n    if currency == self.company_currency_id:\n        return {'amount_currency': balance, 'currency_id': currency}\n    if amount_currency == self.company_currency_id:\n        return {'amount_currency': -balance, 'currency_id': currency}\n    if currency == self.foreign_currency_id:\n        return {'amount_currency': balance * amount_currency, 'currency_id': currency}\n    if amount_currency == self.foreign_currency_id:\n        return {'amount_currency': -balance * amount_currency, 'currency_id': currency}\n    # If the currency is different from the transaction currency, we need to compute the exchange rate between the two currencies.\n    # If the currency is different from the company currency, we need to compute the exchange rate between the two currencies.\n    # If the currency is different from the transaction currency and the company currency, we need to compute the exchange rate between the two currencies.\n    # If the currency is different from the company currency and the transaction currency, we need to compute the exchange rate between the two currencies.\n    # If the currency is different from the transaction currency and the company currency, we need to compute the exchange rate between the two currencies.\n    # If the currency is different from the company currency and the transaction currency, we need to compute the exchange rate between the two currencies.\n    # If the currency is different from the transaction currency and the company currency, we need to compute the exchange rate between the two currencies.\n    # If the currency is different from the company currency and the transaction currency, we need to compute the exchange rate between the two currencies.\n    # If the currency is different from the transaction currency and the company currency, we need to compute the exchange rate between the two currencies.\n    # If the currency is different from the company currency and the transaction currency, we need to compute the exchange rate between the two currencies.\n    # If the currency is different from the transaction currency and the company currency, we need to compute the exchange rate between the two currencies.\n    # If the currency is different from the company currency and the transaction currency,", "CodeBleu_score": 16.69855419627357}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        pay_method_line_ids_commands = [Command.clear()]\n        if journal.type in ('bank', 'cash'):\n            default_methods = journal._default_outbound_payment_methods()\n            pay_method_line_ids_commands += [Command.create({\n                'name': pay_method.name,\n                'payment_method_id': pay_method.id,\n            }) for pay_method in default_methods]\n        journal.outbound_payment_method_line_ids = pay_method_line_ids_commands\n\n", "CodeBleu_score": 80.98736726093428}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        pay_method_line_ids_commands = [Command.clear()]\n        if journal.type in ('bank', 'cash'):\n            default_methods = journal._default_outbound_payment_methods()\n            pay_method_line_ids_commands += [Command.create({\n                'name': pay_method.name,\n                'payment_method_id': pay_method.id,\n            }) for pay_method in default_methods]\n        journal.outbound_payment_method_line_ids = pay_method_line_ids_commands\n\n", "CodeBleu_score": 80.98736726093428}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        pay_method_line_ids_commands = [Command.clear()]\n        if journal.type in ('bank', 'cash'):\n            default_methods = journal._default_outbound_payment_methods()\n            pay_method_line_ids_commands += [Command.create({\n                'name': pay_method.name,\n                'payment_method_id': pay_method.id,\n            }) for pay_method in default_methods]\n        journal.outbound_payment_method_line_ids = pay_method_line_ids_commands\n", "CodeBleu_score": 80.98736726093428}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t\n    for move in self:\n        if not move.invoice_date and not move.date:\n            move.date = fields.Date.today()\n        elif move.invoice_date and not move.date:\n            if not move.is_sale_document(include_receipts=True):\n                move.date = move.invoice_date\n            else:\n                move.date = move._get_accounting_date()\n        elif move.invoice_date and move.date:\n            if move.invoice_date!= move.date:\n                move.date = move.invoice_date\n                move.schedule_date_change()\n\n    def _compute_move_type(self):\n        \"\"\"This function computes the move type for each move. It sets the move type to 'out_invoice' for invoice moves, 'out_refund' for refund moves, 'in_refund' for refunds on invoices, 'in_invoice' for invoice moves on refunds, 'out_receipt' for receipt moves, 'in_receipt' for receipt moves on refunds and 'in_receipt' for receipt moves on invoices.\"\"\"\n        for move in self:\n            if move.is_sale_document(include_receipts=True):\n                move.move_type = 'out_invoice'\n            elif move.is_purchase_document(include_receipts=True):\n                move.move_type = 'in_invoice'\n            elif move.is_receipt_document(include_receipts=True):\n                move.move_type = 'out_receipt'\n            elif move.is_payment_document(include_receipts=True):\n                move.move_type = 'in_receipt'\n            elif move.is_refund_document(include_receipts=True):\n                if move.is_sale_document(include_receipts=True):\n                    move.move_type = 'out_refund'\n                elif move.is_purchase_document(include_receipts=True):\n                    move.move_type = 'in_refund'\n\n    def _compute_payment_reference(self):\n        \"\"\"This function computes the payment reference for each move. It sets the payment reference to the invoice reference if the move is an invoice move, to the receipt reference if the move is a receipt move and to the refund reference if the move is a refund move.\"\"\"\n        for move in self:\n            if move.is_sale_document(", "CodeBleu_score": 32.33328005334032}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if move.invoice_date and not move.date:\n            if not move.is_sale_document():\n                move.date = move.invoice_date\n            else:\n                move.date = move.invoice_date + relativedelta(days=move.company_id.tax_report_impact)\n        if move.date and move.date!= fields.Date.today():\n            move._recompute_fields()\n", "CodeBleu_score": 28.341635973675128}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if not move.invoice_date:\n            move.date = fields.Date.today()\n        else:\n            if not move.is_sale_document(include_receipts=True):\n                move.date = move._get_accounting_date()\n            if move.date!= fields.Date.today():\n                move.date = fields.Date.today()\n                move._schedule_recompute()\n\n", "CodeBleu_score": 32.13632146536198}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.move_type in ('in_invoice', 'in_refund'):\n            if move.partner_id.property_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n        elif move.move_type in ('out_invoice', 'out_refund'):\n            if move.partner_id.property_supplier_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 53.067813444545706}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_invoice(include_receipts=True):\n            if move.partner_id.property_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n            else:\n                move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 52.26791861933404}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_invoice():\n            if move.partner_id and move.partner_id.payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.payment_term_id\n            else:\n                move.invoice_payment_term_id = False\n        elif move.is_receipt():\n            if move.partner_id and move.partner_id.supplier_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.supplier_payment_term_id\n            else:\n                move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 44.72837118639884}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        tax.tax_group_id = tax.company_id.tax_group_id\n        if tax.tax_group_id.country_id and tax.tax_group_id.country_id!= tax.country_id:\n            tax.tax_group_id = False\n\n def _compute_is_used(self):\n    \"\"\"This function computes the 'is_used' field for each tax. It checks if the tax is used on any invoice, refund invoice or invoice line.\"\"\"\n    for tax in self:\n        tax.is_used = tax.invoice_repartition_line_ids or tax.refund_repartition_line_ids or tax.repartition_line_ids\n\n def _compute_invoice_repartition_line_ids(self):\n    \"\"\"This function computes the 'invoice_repartition_line_ids' field for each tax. It searches for tax repartition lines on invoices.\"\"\"\n    for tax in self:\n        tax.invoice_repartition_line_ids = self.env['account.tax.repartition.line'].search([('tax_id', '=', tax.id), ('document_type', '=', 'invoice')])\n\n def _compute_refund_repartition_line_ids(self):\n    \"\"\"This function computes the'refund_repartition_line_ids' field for each tax. It searches for tax repartition lines on refund invoices.\"\"\"\n    for tax in self:\n        tax.refund_repartition_line_ids = self.env['account.tax.repartition.line'].search([('tax_id', '=', tax.id), ('document_type', '=','refund')])\n\n def _compute_repartition_lines_str(self):\n    \"\"\"This function computes the'repartition_lines_str' field for each tax. It computes the string representation of the repartition lines.\"\"\"\n    for tax in self:\n        lines = []\n        for line in tax.invoice_repartition_line_ids:\n            lines.append(line.repartition_type +'' + line.repartition_account_id.name)\n        for line in tax.refund_repartition_line_ids:\n            lines.append(line.repartition_type +'' + line.repartition_account_id.name)\n        tax.repartition_lines_str = '", "CodeBleu_score": 29.575142962763636}, {"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        tax.tax_group_id = tax.company_id.tax_group_id\n        if tax.tax_group_id.country_id and tax.tax_group_id.country_id!= tax.country_id:\n            tax.tax_group_id = False\n        if tax.tax_group_id and tax.tax_group_id.company_id and tax.tax_group_id.company_id!= tax.company_id:\n            tax.tax_group_id = False\n        if not tax.tax_group_id:\n            tax.tax_group_id = self.env['account.tax.group'].search([('company_id', '=', tax.company_id.id), ('country_id', '=', tax.country_id.id)], limit=1)\n\n def _compute_is_used(self):\n    \"\"\"This function computes the field is_used for each tax. It is used to display the tax in the list view of the account taxes.\"\"\"\n    for tax in self:\n        tax.is_used = tax.children_tax_ids or tax.amount!= 0 or tax.amount!= 0.0\n\n def _compute_repartition_lines_str(self):\n    \"\"\"This function computes the field repartition_lines_str for each tax. It is used to display the tax in the list view of the account taxes.\"\"\"\n    for tax in self:\n        tax.repartition_lines_str = self.env.user.company_id.tax_repartition_type_id.get_repartition_lines_str(tax.repartition_line_ids)\n\n def _compute_invoice_repartition_line_ids(self):\n    \"\"\"This function computes the field invoice_repartition_line_ids for each tax. It is used to display the tax in the list view of the account taxes.\"\"\"\n    for tax in self:\n        tax.invoice_repartition_line_ids = self.env['account.tax.repartition.line'].search([('tax_id', '=', tax.id), ('document_type', '=', 'invoice')])\n\n def _compute_refund_repartition_line_ids(self):\n    \"\"\"This function computes the field refund_repartition_line_ids for each tax. It is used to display the tax in the list view of", "CodeBleu_score": 31.262639605066223}, {"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        tax_group = self.env['account.tax.group'].search([\n            ('company_id', '=', tax.company_id.id),\n            ('country_id', '=', tax.country_id.id),\n        ], limit=1)\n        if not tax_group:\n            tax_group = self.env['account.tax.group'].search([\n                ('company_id', '=', tax.company_id.id),\n                ('country_id', '=', False),\n            ], limit=1)\n        tax.tax_group_id = tax_group\n", "CodeBleu_score": 29.361611785831386}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t    self.session.get(url + '/web/login', params={'db': db, 'login': login, 'password': })\n    data = {'login': login, 'password':, 'db': db, 'file': (module_file, open(module_file, 'rb'))}\n    if force:\n        data['force'] = 1\n    response = self.session.post(url + '/base_import_module/login_upload', data=data)\n    if response.status_code == 200:\n        return response.text\n    else:\n        raise Exception(response.text)\n\n", "CodeBleu_score": 29.993554552549973}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t    self.session.get(url + '/web/login', auth=(login, password))\n    data = {'db': db, 'login': login, 'password':, 'file': (module_file, open(module_file, 'rb'))}\n    if force:\n        data['force'] = True\n    r = self.session.post(url + '/base_import_module/login_upload', files=data)\n    return r.text\n\n", "CodeBleu_score": 33.0984468165508}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t    self.session.get(url + '/web/login', params={'db': db, 'login': login, 'password': })\n    data = {'file': open(module_file, 'rb'), 'login': login, 'password':, 'db': db, 'force': force}\n    response = self.session.post(url + '/base_import_module/login_upload', data=data)\n    return response.text\n\n", "CodeBleu_score": 24.59294172386923}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t  config = odoo.tools.config\n    dbname = config['db_name']\n    overwrite = config['overwrite_translations']\n    if config['language']:\n        msg = \"language %s\" % (config['language'],)\n    else:\n        msg = \"new language\"\n    _logger.info('writing translation file for %s to %s', msg, config['translate_out'])\n    fileformat = os.path.splitext(config['translate_out'])[-1][1:].lower()\n    #.pot is the same fileformat as.po\n    if fileformat == \"pot\":\n        fileformat = \"po\"\n    with open(config['translate_out'], \"wb\") as buf:\n        registry = odoo.modules.registry.Registry.new(dbname)\n        with registry.cursor() as cr:\n            odoo.tools.trans_import(config['language'], config['translate_modules'] or ['all'], buf, fileformat, cr, overwrite)\n    _logger.info('translation file written successfully')\n", "CodeBleu_score": 55.804194182448086}, {"code": "def import_translation()\n\t  config = odoo.tools.config\n    dbname = config['db_name']\n    overwrite = config['overwrite_translations']\n    _logger.info('importing translation file from %s', config['translate_in'])\n    fileformat = os.path.splitext(config['translate_in'])[-1][1:].lower()\n    #.pot is the same fileformat as.po\n    if fileformat == 'pot':\n        fileformat = 'po'\n    with open(config['translate_in'], 'rb') as buf:\n        registry = odoo.modules.registry.Registry.new(dbname)\n        with registry.cursor() as cr:\n            odoo.tools.trans_import(config['language'], buf, fileformat, cr, overwrite)\n    _logger.info('translation file imported successfully')\n\n", "CodeBleu_score": 46.001067596566564}, {"code": "def import_translation()\n\t  config = odoo.tools.config\n    dbname = config['db_name']\n    overwrite = config['overwrite_translations']\n\n    _logger.info('importing translation file from %s to %s', config['translate_in'], dbname)\n\n    fileformat = os.path.splitext(config['translate_in'])[-1][1:].lower()\n    #.pot is the same fileformat as.po\n    if fileformat == \"pot\":\n        fileformat = \"po\"\n\n    with open(config['translate_in'], \"rb\") as buf:\n        registry = odoo.modules.registry.Registry.new(dbname)\n        with registry.cursor() as cr:\n            odoo.tools.trans_import(buf, fileformat, cr, overwrite)\n\n    _logger.info('translation file imported successfully')\n\n", "CodeBleu_score": 45.96747726508762}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\tmax_depth, father = 0, None\n    for d in info['depends']:\n        n = self.graph.get(d) or Node(d, self.graph, None)  # lazy creation, do not use default value for get()\n        if n.depth >= max_depth:\n            father = n\n            max_depth = n.depth\n    if father:\n        return father.add_child(name, info)\n    else:\n        return Node(name, self.graph, info)\n\n", "CodeBleu_score": 32.08701529861535}, {"code": "def add_child(self, name, info)\n\tmax_depth, father = 0, None\n    for d in info['depends']:\n        n = self.graph.get(d) or Node(d, self.graph, None)  # lazy creation, do not use default value for get()\n        if n.depth >= max_depth:\n            father = n\n            max_depth = n.depth\n    if father:\n        return father.add_child(name, info)\n    else:\n        return Node(name, self.graph, info)\n", "CodeBleu_score": 32.08701529861535}, {"code": "def add_child(self, name, info)\n\tnode = self.graph.add_node(name, info)\n    node.depth = self.depth + 1\n    if hasattr(self, 'init'):\n        node.init = self.init\n    if hasattr(self, 'demo'):\n        node.demo = self.demo\n    if hasattr(self, 'update'):\n        node.update = self.update\n    if hasattr(self, 'unaccent'):\n        node.unaccent = self.unaccent\n    if hasattr(self, 'unaccent_dict'):\n        node.unaccent_dict = self.unaccent_dict\n    if hasattr(self, 'unaccent_map'):\n        node.unaccent_map = self.unaccent_map\n    if hasattr(self, 'unaccent_map_dict'):\n        node.unaccent_map_dict = self.unaccent_map_dict\n    if hasattr(self, 'unaccent_map_dict_dict'):\n        node.unaccent_map_dict_dict = self.unaccent_map_dict_dict\n    if hasattr(self, 'unaccent_map_dict_dict_dict'):\n        node.unaccent_map_dict_dict_dict = self.unaccent_map_dict_dict_dict\n    if hasattr(self, 'unaccent_map_dict_dict_dict_dict'):\n        node.unaccent_map_dict_dict_dict_dict = self.unaccent_map_dict_dict_dict_dict\n    if hasattr(self, 'unaccent_map_dict_dict_dict_dict_dict'):\n        node.unaccent_map_dict_dict_dict_dict_dict = self.unaccent_map_dict_dict_dict_dict_dict\n    if hasattr(self, 'unaccent_map_dict_dict_dict_dict_dict_dict'):\n        node.unaccent_map_dict_dict_dict_dict_dict_dict = self.unaccent_map_dict_dict_dict_dict_dict_dict\n    if hasattr(self, 'unaccent_map_dict_dict_dict_dict_dict_dict_dict'):\n        node.unaccent_map_dict_dict_dict_dict_dict_dict_dict = self.unaccent_map_dict_dict_dict_dict_dict_dict_dict\n    if hasattr(self, 'unaccent_map_dict", "CodeBleu_score": 25.235273522944034}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n    result = []\n    for date in dates:\n        result.append([date, 0])\n    for gl_entry in gl_entries:\n        for i, date in enumerate(dates):\n            if gl_entry.posting_date == date:\n                result[i][1] += gl_entry.debit - gl_entry.credit\n    if account.root_type in (\"Asset\", \"Liability\", \"Equity\"):\n        for i, date in enumerate(dates):\n            result[i][1] = sum([r[1] for r in result[:i + 1]])\n    else:\n        for i, date in enumerate(dates):\n            result[i][1] = -result[i][1]\n    return result\n\n", "CodeBleu_score": 34.41182998299112}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = []\n    for date in dates:\n        result.append([date, 0])\n\n    for entry in gl_entries:\n        if entry.account == account:\n            date = getdate(entry.posting_date)\n            for i, date_obj in enumerate(dates):\n                if date_obj.date() == date:\n                    result[i][1] = entry.debit - entry.credit\n\n    root_type = frappe.get_value(\"Account\", account, \"root_type\")\n    if root_type not in (\"Asset\", \"Expense\"):\n        for i, date_obj in enumerate(dates):\n            result[i][1] *= -1\n\n    if root_type in (\"Asset\", \"Liability\", \"Equity\"):\n        for i, date_obj in enumerate(dates):\n            result[i][1] = sum(result[i][1] for i, date_obj in enumerate(dates) if date_obj.date() <= date)\n\n    return result\n\n", "CodeBleu_score": 38.36669833696128}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = []\n    for date in dates:\n        result.append([date, 0])\n\n    for entry in gl_entries:\n        if entry.account == account:\n            for date in dates:\n                if date >= entry.posting_date and date <= get_period_ending(entry.posting_date, entry.time_grain):\n                    result[dates.index(date)][1] += entry.debit - entry.credit\n\n    if account.root_type in (\"Asset\", \"Liability\", \"Equity\"):\n        for i in range(len(result)):\n            result[i][1] = result[i][1] / 1000000000\n\n    return result\n\n", "CodeBleu_score": 32.84122018315686}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type in (\\\"Receivable\\\", \\\"Payable\\\") and self.get_doc_before_save().account_type not in (\\\"Receivable\\\", \\\"Payable\\\"):\n        if frappe.db.exists(\\\"GL Entry\\\", {\\\"account\\\": self.name}):\n            frappe.throw(\n                _(\n                    \\\"Account {0}: This account type change is not allowed as there are existing general ledger entries for the account. Please delete the entries before changing the account type.\\\"\"\n                ).format(self.name)\n            )\n", "CodeBleu_score": 18.087338870910983}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type in [\n        \"Receivable\",\n        \"Payable\",\n    ]:\n        if self.parent_account:\n            parent_account_type = frappe.db.get_value(\n                \"Account\", self.parent_account, \"account_type\"\n            )\n            if (\n                parent_account_type in [\"Receivable\", \"Payable\"]\n                and self.account_type!= parent_account_type\n            ):\n                if frappe.db.exists(\n                    \"GL Entry\",\n                    {\n                        \"account\": self.name,\n                        \"company\": self.company,\n                        \"is_cancelled\": 0,\n                        \"is_opening\": 0,\n                    },\n                ):\n                    frappe.throw(\n                        _(\n                            \"Account {0}: Account type change from {1} to {2} is not allowed. Existing general ledger entries for this account will be affected.\"\n                        ).format(self.name, parent_account_type, self.account_type),\n                        title=_(\"Account Type Change Not Allowed\"),\n                    )\n\n", "CodeBleu_score": 31.2916641681511}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type in [\\\"Receivable\\\", \\\"Payable\\\"] and self.get_doc_before_save().account_type not in [\\\"Receivable\\\", \\\"Payable\\\"]:\n        entries = frappe.db.sql(\n            \\\"select name from `tabGeneral Ledger Entry` where account = %s\\\",\n            (self.name),\n            as_dict=1\n        )\n        if entries:\n            frappe.throw(\n                \\\"{0}: Account {1} has existing general ledger entries. Please check the \\\"\n                \\\"\\\"Accounts\\\"\\\" report for more details.\\\".format(\n                    self.name, self.account_name\n                )\n            )\n        else:\n            frappe.throw(\n                \\\"{0}: Account {1} has existing general ledger entries. Please check the \\\"\n                \\\"\\\"Accounts\\\"\\\" report for more details.\\\".format(\n                    self.name, self.account_name\n                )\n            )\n    elif self.account_type not in [\\\"Receivable\\\", \\\"Payable\\\"] and self.get_doc_before_save().account_type in [\\\"Receivable\\\", \\\"Payable\\\"]:\n        entries = frappe.db.sql(\n            \\\"select name from `tabGeneral Ledger Entry` where account = %s\\\",\n            (self.name),\n            as_dict=1\n        )\n        if entries:\n            frappe.throw(\n                \\\"{0}: Account {1} has existing general ledger entries. Please check the \\\"\n                \\\"\\\"Accounts\\\"\\\" report for more details.\\\".format(\n                    self.name, self.account_name\n                )\n            )\n        else:\n            frappe.throw(\n                \\\"{0}: Account {1} has existing general ledger entries. Please check the \\\"\n                \\\"\\\"Accounts\\\"\\\" report for more details.\\\".format(\n                    self.name, self.account_name\n                )\n            )\n    elif self.account_type in [\\\"Receivable\\\", \\\"Payable\\\"] and self.get_doc_before_save().account_type in [\\\"Receivable\\\", \\\"Payable\\\"]:\n        entries = frappe.db.sql(\n           ", "CodeBleu_score": 27.364319189978904}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n    if self.currency and self.currency!= self.company_currency:\n        # check for existing general ledger entries with a different currency\n        if frappe.db.exists(\\\"GL Entry\\\", {\\\"account\\\": self.name, \\\"is_cancelled\\\": 0}):\n            frappe.throw(\n                _(\"Account {0} has general ledger entries with a different currency. Please change the currency to match the existing entries\").format(\n                    self.name\n                )\n            )\n        self.currency = self.company_currency\n        self.flags.ignore_account_currency_check = 1\n\n", "CodeBleu_score": 25.06138194105556}, {"code": "def validate_account_currency(self)\n\t\n    if self.currency and self.currency!= self.company_currency:\n        if self.check_gle_exists():\n            raise frappe.ValidationError(_(\n                \"Account with existing transaction cannot be converted to currency {0}\".format(self.currency)))\n        elif self.account_type == \"Receivable\":\n            if self.check_if_child_exists():\n                raise frappe.ValidationError(_(\n                    \"Account with child nodes cannot be set as Receivable\"))\n        elif self.account_type == \"Payable\":\n            if self.check_if_child_exists():\n                raise frappe.ValidationError(_(\n                    \"Account with child nodes cannot be set as Payable\"))\n\n    if not self.currency:\n        self.currency = self.company_currency\n\n", "CodeBleu_score": 20.666667471134}, {"code": "def validate_account_currency(self)\n\t\n    if not self.currency:\n        self.currency = self.company_default_currency\n    elif self.currency!= self.company_default_currency:\n        if self.check_gle_exists():\n            frappe.throw(_(\"Account with existing transaction cannot be converted to {0}\").format(self.currency))\n    elif self.check_gle_exists():\n        frappe.throw(_(\"Account with existing transaction cannot be converted to {0}\").format(self.currency))\n\n", "CodeBleu_score": 24.693608193375432}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    # begin: auto-generated types\n    # This code is auto-generated. Do not modify anything in this block.\n\n    from typing import TYPE_CHECKING\n\n    if TYPE_CHECKING:\n        from frappe.types import DF\n\n        account: DF.Link | None\n        account_currency: DF.Link | None\n        closing_date: DF.Date | None\n        company: DF.Link | None\n        cost_center: DF.Link | None\n        credit: DF.Currency\n        credit_in_account_currency: DF.Currency\n        debit: DF.Currency\n        debit_in_account_currency: DF.Currency\n        finance_book: DF.Link | None\n        is_period_closing_voucher_entry: DF.Check\n        period_closing_voucher: DF.Link | None\n        project: DF.Link | None\n    # end: auto-generated types\n\n    # begin: auto-generated docstring\n    # This code is auto-generated. Do not modify anything in this block.\n    \"\"\"\n    This function aggregates general ledger entries based on specified accounting dimensions. It initializes a dictionary to merge entries, iterating through each entry to generate a unique key and corresponding values. For each key, it updates the debit, credit, and their respective amounts in account currency. The function returns the dictionary containing the aggregated entries.\n    Args:\n        entries (list): A list of general ledger entries.\n        accounting_dimensions (dict): A dictionary containing accounting dimensions.\n    Returns:\n        dict: A dictionary containing the aggregated entries.\n    \"\"\"\n    # end: auto-generated docstring\n\n    # begin: auto-generated docstring\n    # This code is auto-generated. Do not modify anything in this block.\n    \"\"\"\n    This function aggregates general ledger entries based on specified accounting dimensions. It initializes a dictionary to merge entries, iterating through each entry to generate a unique key and corresponding values. For each key, it updates the debit, credit, and their respective amounts in account currency. The function returns the dictionary containing the aggregated entries.\n    Args:\n        entries (list): A list of general ledger entries.\n        accounting_dimensions (dict): A dictionary containing accounting dimensions.\n    Returns:\n        dict: A dictionary containing the aggregated entries.\n    \"\"\"\n    # end: auto-generated docstring\n\n    # begin: auto-generated docstring\n    # This code is auto-generated. Do not modify anything in this block.\n    \"\"\"\n    This function aggregates general ledger entries based on specified accounting", "CodeBleu_score": 10.718121556399861}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key = generate_key(entry, accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"account\": entry[\"account\"],\n                \"account_currency\": entry[\"account_currency\"],\n                \"debit\": 0,\n                \"credit\": 0,\n                \"debit_in_account_currency\": 0,\n                \"credit_in_account_currency\": 0,\n                \"dimensions\": {},\n            }\n        merged_entries[key][\"debit\"] += entry[\"debit\"]\n        merged_entries[key][\"credit\"] += entry[\"credit\"]\n        merged_entries[key][\"debit_in_account_currency\"] += entry[\"debit_in_account_currency\"]\n        merged_entries[key][\"credit_in_account_currency\"] += entry[\"credit_in_account_currency\"]\n        merged_entries[key][\"dimensions\"].update(entry[\"dimensions\"])\n    return merged_entries\n\n", "CodeBleu_score": 42.55848507404717}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key = generate_key(entry, accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"account\": entry.account,\n                \"account_currency\": entry.account_currency,\n                \"debit\": 0,\n                \"credit\": 0,\n                \"debit_in_account_currency\": 0,\n                \"credit_in_account_currency\": 0,\n                \"dimensions\": {},\n            }\n        merged_entries[key][\"debit\"] += cint(entry.debit)\n        merged_entries[key][\"credit\"] += cint(entry.credit)\n        merged_entries[key][\"debit_in_account_currency\"] += cint(entry.debit_in_account_currency)\n        merged_entries[key][\"credit_in_account_currency\"] += cint(entry.credit_in_account_currency)\n        merged_entries[key][\"dimensions\"] = merge_dimensions(\n            merged_entries[key][\"dimensions\"], entry[\"dimensions\"]\n        )\n    return merged_entries\n\n", "CodeBleu_score": 41.9890673613782}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.is_supplier_payment:\n        if self.supplier:\n            supplier = frappe.get_doc(\\\"Supplier\\\", self.supplier)\n            if supplier.is_on_hold and supplier.hold_type == self.doctype:\n                if supplier.release_date:\n                    if getdate(supplier.release_date) > today():\n                        frappe.throw(_(\n                            \\\"Supplier {0} is on hold and cannot be used for {1}. Please release the hold before proceeding.\\\"\n                        ).format(supplier.supplier_name, self.doctype))\n                else:\n                    frappe.throw(_(\n                        \\\"Supplier {0} is on hold and cannot be used for {1}. Please release the hold before proceeding.\\\"\n                    ).format(supplier.supplier_name, self.doctype))\n    elif self.is_buying_invoice:\n        if self.supplier:\n            supplier = frappe.get_doc(\\\"Supplier\\\", self.supplier)\n            if supplier.is_on_hold and supplier.hold_type == self.doctype:\n                if supplier.release_date:\n                    if getdate(supplier.release_date) > today():\n                        frappe.throw(_(\n                            \\\"Supplier {0} is on hold and cannot be used for {1}. Please release the hold before proceeding.\\\"\n                        ).format(supplier.supplier_name, self.doctype))\n                else:\n                    frappe.throw(_(\n                        \\\"Supplier {0} is on hold and cannot be used for {1}. Please release the hold before proceeding.\\\"\n                    ).format(supplier.supplier_name, self.doctype))\n\n", "CodeBleu_score": 24.657144596817794}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.is_supplier_payment:\n        supplier = frappe.get_doc(\n            \"Supplier\", self.supplier\n        )\n        if supplier.is_on_hold:\n            if supplier.hold_type == self.doctype:\n                if supplier.release_date and getdate(supplier.release_date) < getdate(nowdate()):\n                    raise frappe.ValidationError(\n                        _(\"Supplier {0} is on hold and cannot be used for {1}\").format(\n                            supplier.supplier_name, self.doctype\n                        )\n                    )\n                else:\n                    frappe.db.set_value(\n                        \"Supplier\", self.supplier, \"is_on_hold\", 0\n                    )\n\n", "CodeBleu_score": 27.270127127431465}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.is_supplier_payment:\n        supplier = frappe.get_doc(\\\"Supplier\\\", self.supplier)\n        if supplier.is_blocked:\n            if supplier.block_type == self.doctype and supplier.release_date and getdate(supplier.release_date) < getdate(nowdate()):\n                frappe.throw(\n                    _(\n                        \\\"Supplier {0} is on hold and cannot be used for {1}. Please contact the supplier to release the hold.\\\"\n                    ).format(supplier.name, self.doctype)\n                )\n    elif self.is_buying_invoice:\n        supplier = frappe.get_doc(\\\"Supplier\\\", self.supplier)\n        if supplier.is_blocked:\n            if supplier.block_type == self.doctype and supplier.release_date and getdate(supplier.release_date) < getdate(nowdate()):\n                frappe.throw(\n                    _(\n                        \\\"Supplier {0} is on hold and cannot be used for {1}. Please contact the supplier to release the hold.\\\"\n                    ).format(supplier.name, self.doctype)\n                )\n\n", "CodeBleu_score": 28.78665540956317}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    # identify relevant repost doctypes\n    repost_doctypes = frappe.get_meta(self.doctype).get_repost_doctypes()\n    if not repost_doctypes:\n        return\n\n    # query for rows where the voucher type and number match the current document\n    q = frappe.qb.DocType(\"Repost Voucher\")\n    rows = q.select(q.name, q.parent).where(\n        (q.voucher_type == self.doctype) & (q.voucher_no == self.name)\n    ).run(as_dict=True)\n\n    # organize rows into a map by parent document type and parent\n    references_map = frappe._dict()\n    for x in rows:\n        references_map.setdefault(x.parent, []).append(x.name)\n\n    # retrieve each parent document, remove the relevant rows from either \"repost_vouchers\" or \"vouchers\" fields depending on the doctype, set flags to ignore validation and links, and save the changes\n    for doc, rows in references_map.items():\n        repost_doc = frappe.get_doc(repost_doctypes[doc], doc)\n        for row in rows:\n            repost_doc.remove(repost_doc.get(\"repost_vouchers\", { \"name\": row })[0])\n            repost_doc.remove(repost_doc.get(\"vouchers\", { \"name\": row })[0])\n        repost_doc.flags.ignore_validate_update_after_submit = True\n        repost_doc.flags.ignore_links = True\n        repost_doc.save(ignore_permissions=True)\n\n", "CodeBleu_score": 50.35250963564426}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = [\"Purchase Invoice\", \"Sales Invoice\", \"Purchase Receipt\", \"Sales Order\", \"Purchase Order\", \"Purchase Quotation\", \"Sales Quotation\", \"Material Request\", \"Stock Entry\", \"Stock Reconciliation\", \"Stock Ledger Entry\", \"Stock Transfer\", \"Stock Transfer Item\", \"Stock Receipt\", \"Stock Journal Entry\", \"Stock Journal Entry Item\", \"Stock Adjustment\", \"Stock Adjustment Item\", \"Stock Transfer Item\", \"Stock Transfer\", \"Stock Entry\", \"Stock Reconciliation\", \"Stock Ledger Entry\", \"Stock Transfer\", \"Stock Transfer Item\", \"Stock Receipt\", \"Stock Journal Entry\", \"Stock Journal Entry Item\", \"Stock Adjustment\", \"Stock Adjustment Item\", \"Stock Transfer Item\", \"Stock Transfer\", \"Stock Entry\", \"Stock Reconciliation\", \"Stock Ledger Entry\", \"Stock Transfer\", \"Stock Transfer Item\", \"Stock Receipt\", \"Stock Journal Entry\", \"Stock Journal Entry Item\", \"Stock Adjustment\", \"Stock Adjustment Item\", \"Stock Transfer Item\", \"Stock Transfer\", \"Stock Entry\", \"Stock Reconciliation\", \"Stock Ledger Entry\", \"Stock Transfer\", \"Stock Transfer Item\", \"Stock Receipt\", \"Stock Journal Entry\", \"Stock Journal Entry Item\", \"Stock Adjustment\", \"Stock Adjustment Item\", \"Stock Transfer Item\", \"Stock Transfer\", \"Stock Entry\", \"Stock Reconciliation\", \"Stock Ledger Entry\", \"Stock Transfer\", \"Stock Transfer Item\", \"Stock Receipt\", \"Stock Journal Entry\", \"Stock Journal Entry Item\", \"Stock Adjustment\", \"Stock Adjustment Item\", \"Stock Transfer Item\", \"Stock Transfer\", \"Stock Entry\", \"Stock Reconciliation\", \"Stock Ledger Entry\", \"Stock Transfer\", \"Stock Transfer Item\", \"Stock Receipt\", \"Stock Journal Entry\", \"Stock Journal Entry Item\", \"Stock Adjustment\", \"Stock Adjustment Item\", \"Stock Transfer Item\", \"Stock Transfer\", \"Stock Entry\", \"Stock Reconciliation\", \"Stock Ledger Entry\", \"Stock Transfer\", \"Stock Transfer Item\", \"Stock Receipt\", \"Stock Journal Entry\", \"Stock Journal Entry Item\", \"Stock Adjustment\", \"Stock Adjustment Item\", \"Stock Transfer Item\", \"Stock Transfer\", \"Stock Entry\", \"Stock Reconciliation\", \"Stock Ledger Entry\", \"Stock Transfer\", \"Stock Transfer Item\", \"Stock Receipt\", \"Stock Journal Entry\", \"Stock Journal Entry Item\",", "CodeBleu_score": 3.6196513116593305}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = [\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Sales Order\",\n        \"Purchase Order\",\n        \"Material Request\",\n    ]\n    repost_doctypes = [x for x in repost_doctypes if x!= self.doctype]\n    if not repost_doctypes:\n        return\n    repost_doctypes = [\n        frappe.qb.DocType(x) for x in repost_doctypes\n    ]  # convert to query builder objects\n    rows = (\n        frappe.qb.from_(repost_doctypes)\n       .select(repost_doctypes.name, repost_doctypes.voucher_type, repost_doctypes.voucher_no)\n       .where(\n            (repost_doctypes.voucher_type == self.doctype)\n            & (repost_doctypes.voucher_no == self.name)\n        )\n       .run(as_dict=True)\n    )\n    if not rows:\n        return\n    references_map = frappe._dict()\n    for x in rows:\n        references_map.setdefault(x.name, []).append(x.voucher_type)\n    for doc, voucher_types in references_map.items():\n        doc = frappe.get_doc(doc)\n        for voucher_type in voucher_types:\n            if voucher_type == \"Purchase Receipt\":\n                for row in doc.get(\"repost_vouchers\", []):\n                    doc.remove(row)\n            elif voucher_type == \"Purchase Invoice\":\n                for row in doc.get(\"vouchers\", []):\n                    doc.remove(row)\n            doc.flags.ignore_validate_update_after_submit = True\n            doc.flags.ignore_links = True\n            doc.save(ignore_permissions=True)\n\n", "CodeBleu_score": 34.36980164449738}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    if not self.access_token:\n        frappe.throw(_(\"Plaid: Access token is missing\"))\n\n    # Authenticate the client\n    self.auth()\n\n    # Construct the query parameters\n    params = {\n        \"access_token\": self.access_token,\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n    }\n    if account_id:\n        params[\"account_id\"] = account_id\n\n    # Fetch transactions from the client\n    transactions = []\n    while True:\n        try:\n            response = self.client.Transactions.get(**params)\n        except ItemError as e:\n            if e.code == \"ITEM_LOGIN_REQUIRED\":\n                pass\n        except APIError as e:\n            if e.code == \"PLANNED_MAINTENANCE\":\n                pass\n        except requests.Timeout:\n            pass\n        except Exception as e:\n            frappe.log_error(\"Plaid: Authentication error\")\n            frappe.throw(str(e), title=_(\"Authentication Failed\"))\n        else:\n            transactions.extend(response[\"transactions\"])\n            if len(transactions) == response[\"total_transactions\"]:\n                break\n            params[\"offset\"] = len(transactions)\n\n    # Return the transactions\n    return transactions\n\n", "CodeBleu_score": 40.89424629752462}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    if not self.access_token:\n        frappe.throw(_(f\\\"Plaid: Access token not found\\\"))\n    transactions = []\n    try:\n        self.client.Auth.get(self.access_token)\n    except ItemError as e:\n        if e.code == \\\"ITEM_LOGIN_REQUIRED\\\":\n            pass\n    except APIError as e:\n        if e.code == \\\"PLANNED_MAINTENANCE\\\":\n            pass\n    except requests.Timeout:\n        pass\n    except Exception as e:\n        frappe.log_error(\\\"Plaid: Authentication error\\\")\n        frappe.throw(_(str(e)), title=_(\\\"Authentication Failed\\\"))\n    query_params = {\n        \\\"start_date\\\": start_date,\n        \\\"end_date\\\": end_date,\n        \\\"count\\\": 250,\n        \\\"offset\\\": 0,\n    }\n    if account_id:\n        query_params.update({\\\"account_ids\\\": [account_id]})\n    while True:\n        try:\n            response = self.client.Transactions.get(self.access_token, **query_params)\n        except ItemError as e:\n            if e.code == \\\"ITEM_LOGIN_REQUIRED\\\":\n                pass\n        except APIError as e:\n            if e.code == \\\"PLANNED_MAINTENANCE\\\":\n                pass\n        except requests.Timeout:\n            pass\n        except Exception as e:\n            frappe.log_error(\\\"Plaid: Authentication error\\\")\n            frappe.throw(_(str(e)), title=_(\\\"Authentication Failed\\\"))\n        else:\n            transactions.extend(response[\\\"transactions\\\"])\n            if len(transactions) == response[\\\"total_transactions\\\"]:\n                break\n            query_params.update({\\\"offset\\\": query_params[\\\"offset\\\"] + query_params[\\\"count\\\"]})\n    return transactions\n\n", "CodeBleu_score": 34.00169974305672}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    # auth\n    self.auth()\n    # get transactions\n    transactions = []\n    total_transactions = 0\n    while True:\n        # get transactions\n        try:\n            response = self.client.Transactions.get(\n                self.access_token,\n                account_id=account_id,\n                start_date=start_date,\n                end_date=end_date,\n            )\n        except ItemError as e:\n            if e.code == \"ITEM_LOGIN_REQUIRED\":\n                pass\n        except APIError as e:\n            if e.code == \"PLANNED_MAINTENANCE\":\n                pass\n        except requests.Timeout:\n            pass\n        except Exception as e:\n            frappe.log_error(\"Plaid: Authentication error\")\n            frappe.throw(_(str(e)), title=_(\"Authentication Failed\"))\n        else:\n            # append transactions\n            transactions.extend(response[\"transactions\"])\n            total_transactions = response[\"total_transactions\"]\n            # break if all transactions are retrieved\n            if len(transactions) >= total_transactions:\n                break\n        # break if timeout\n        if len(transactions) >= 1000:\n            break\n        # sleep for 1 second\n        time.sleep(1)\n    return transactions\n\n", "CodeBleu_score": 34.29008903693182}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    plaid = PlaidConnector()\n    try:\n        institution_data = plaid.get_institution_data(token, response)\n    except ItemError as e:\n        frappe.log_error(str(e), \"Plaid Error\")\n        return e.message\n    institution_id = institution_data[\"institution_id\"]\n    institution_name = institution_data[\"institution_name\"]\n    if frappe.db.exists(\"Plaid Institution\", {\"institution_id\": institution_id}):\n        plaid_institution = frappe.get_doc(\"Plaid Institution\", {\"institution_id\": institution_id})\n        plaid_institution.access_token = plaid.get_access_token(token, response)\n        plaid_institution.save()\n    else:\n        plaid_institution = frappe.get_doc(\n            {\n                \"doctype\": \"Plaid Institution\",\n                \"institution_id\": institution_id,\n                \"institution_name\": institution_name,\n                \"access_token\": plaid.get_access_token(token, response),\n            }\n        )\n        plaid_institution.insert()\n    return plaid_institution\n\n", "CodeBleu_score": 37.301382610255125}, {"code": "def add_institution(token, response)\n\t\n    plaid = PlaidConnector()\n    try:\n        bank = plaid.get_institution(token, response)\n        if bank:\n            bank_record = frappe.get_doc(\\\"Plaid Bank\\\", bank.get(\\\"institution_id\\\"))\n            if not bank_record:\n                bank_record = frappe.get_doc({\n                    \\\"doctype\\\": \\\"Plaid Bank\\\",\n                    \\\"name\\\": bank.get(\\\"institution_id\\\"),\n                    \\\"institution_id\\\": bank.get(\\\"institution_id\\\"),\n                    \\\"institution_name\\\": bank.get(\\\"institution_name\\\"),\n                    \\\"institution_type\\\": bank.get(\\\"institution_type\\\"),\n                    \\\"primary_color\\\": bank.get(\\\"primary_color\\\"),\n                    \\\"secondary_color\\\": bank.get(\\\"secondary_color\\\"),\n                    \\\"icon\\\": bank.get(\\\"icon\\\"),\n                    \\\"logo\\\": bank.get(\\\"logo\\\"),\n                    \\\"support\\\": bank.get(\\\"support\\\"),\n                    \\\"support_url\\\": bank.get(\\\"support_url\\\"),\n                    \\\"support_email\\\": bank.get(\\\"support_email\\\"),\n                    \\\"access_token\\\": plaid.get_access_token(token, response),\n                })\n                bank_record.save()\n                frappe.db.commit()\n            else:\n                bank_record.access_token = plaid.get_access_token(token, response)\n                bank_record.save()\n                frappe.db.commit()\n    except Exception as e:\n        frappe.log_error(str(e), \\\"Plaid Integration\\\")\n\n", "CodeBleu_score": 28.608734085451133}, {"code": "def add_institution(token, response)\n\t\n    plaid = PlaidConnector()\n    institution_id = response.get(\\\"institution_id\\\")\n    institution_name = response.get(\\\"institution_name\\\")\n    institution_country = response.get(\\\"country\\\")\n    institution_logo = response.get(\\\"logo_url\\\")\n    institution_type = response.get(\\\"type\\\")\n    institution_products = response.get(\\\"products\\\")\n    institution_url = response.get(\\\"url\\\")\n    institution_mfa = response.get(\\\"mfa\\\")\n    institution_support = response.get(\\\"support\\\")\n    institution_phone = response.get(\\\"phone\\\")\n    institution_address = response.get(\\\"address\\\")\n    institution_products = response.get(\\\"products\\\")\n    institution_extra_products = response.get(\\\"extra_products\\\")\n    institution_favicon = response.get(\\\"favicon_url\\\")\n    institution_primary_color = response.get(\\\"primary_color\\\")\n    institution_secondary_color = response.get(\\\"secondary_color\\\")\n    institution_support_email = response.get(\\\"support_email\\\")\n    institution_support_phone = response.get(\\\"support_phone\\\")\n    institution_support_url = response.get(\\\"support_url\\\")\n    institution_support_twitter = response.get(\\\"support_twitter\\\")\n    institution_support_facebook = response.get(\\\"support_facebook\\\")\n    institution_support_linkedin = response.get(\\\"support_linkedin\\\")\n    institution_support_instagram = response.get(\\\"support_instagram\\\")\n    institution_support_youtube = response.get(\\\"support_youtube\\\")\n    institution_support_website = response.get(\\\"support_website\\\")\n    institution_support_slack = response.get(\\\"support_slack\\\")\n    institution_support_discord = response.get(\\\"support_discord\\\")\n    institution_support_telegram = response.get(\\\"support_telegram\\\")\n    institution_support_discord_invite = response.get(\\\"support_discord_invite\\\")\n    institution_support_twitter_invite = response.get(\\\"support_twitter_invite\\\")\n    institution_support_facebook_invite = response.get(\\\"support_facebook_invite\\\")\n    institution_support_linkedin_invite = response.get(\\\"support_linkedin_invite\\\")\n    institution_support_instagram_invite = response.get(\\\"support_instagram_invite\\\")\n    institution_support_youtube_invite = response.get(\\\"support_youtube_invite\\\")\n    institution_support_website_invite = response.", "CodeBleu_score": 5.686493649157856}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        plaid = PlaidConnector()\n        transactions = plaid.get_transactions(\n            bank_account.integration_id,\n            bank_account.mask,\n            bank.plaid_access_token,\n            bank_account.account_type,\n            bank_account.account_subtype,\n        )\n        if transactions:\n            start_date = transactions[\"start_date\"]\n            end_date = transactions[\"end_date\"]\n            if not bank_account.last_integration_date or bank_account.last_integration_date < start_date:\n                bank_account.last_integration_date = start_date\n                bank_account.save()\n            for transaction in transactions[\"transactions\"]:\n                if transaction[\"date\"] > end_date:\n                    break\n                if transaction[\"date\"] < start_date:\n                    continue\n                if transaction[\"amount\"] == 0:\n                    continue\n                if transaction[\"name\"] == \"\":\n                    transaction[\"name\"] = \"Transaction\"\n                if not transaction[\"name\"]:\n                    transaction[\"name\"] = \"Transaction\"\n                if not transaction[\"name\"]:\n                    transaction[\"name\"] = \"Transaction\"\n                if not transaction[\"name\"]:\n                    transaction[\"name\"] = \"Transaction\"\n                if not transaction[\"name\"]:\n                    transaction[\"name\"] = \"Transaction\"\n                if not transaction[\"name\"]:\n                    transaction[\"name\"] = \"Transaction\"\n                if not transaction[\"name\"]:\n                    transaction[\"name\"] = \"Transaction\"\n                if not transaction[\"name\"]:\n                    transaction[\"name\"] = \"Transaction\"\n                if not transaction[\"name\"]:\n                    transaction[\"name\"] = \"Transaction\"\n                if not transaction[\"name\"]:\n                    transaction[\"name\"] = \"Transaction\"\n                if not transaction[\"name\"]:\n                    transaction[\"name\"] = \"Transaction\"\n                if not transaction[\"name\"]:\n                    transaction[\"name\"] = \"Transaction\"\n                if not transaction[\"name\"]:\n                    transaction[\"name\"] = \"Transaction\"\n                if not transaction[\"name\"]:\n                    transaction[\"name\"] = \"Transaction\"\n                if not transaction[\"name\"]:\n                    transaction[\"name\"] = \"Transaction\"\n                if not transaction[\"name\"]:\n                    transaction[\"name\"] = \"Transaction\"\n                if not transaction[\"name\"]:\n                    transaction[\"name\"] = \"Transaction\"\n                if not transaction[\"name\"]:\n                    transaction[\"name\"] = \"Transaction\"\n                if not transaction[\"name\"]:\n                    transaction[\"name\"] = \"Transaction\"\n                if not transaction[\"name\"]:\n                    transaction[\"name\"] = \"Transaction\"\n                if not", "CodeBleu_score": 19.90004750992531}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    if bank_account.integration_id:\n        try:\n            plaid = PlaidConnector()\n            transactions = plaid.get_transactions(\n                bank_account.integration_id,\n                bank_account.last_integration_date or \"2000-01-01\",\n            )\n            for transaction in transactions:\n                try:\n                    new_transaction = frappe.get_doc(\n                        {\n                            \"doctype\": \"Bank Transaction\",\n                            \"bank\": bank_account.bank,\n                            \"bank_account\": bank_account.account,\n                            \"date\": transaction.date,\n                            \"amount\": transaction.amount,\n                            \"description\": transaction.name,\n                            \"plaid_transaction_id\": transaction.transaction_id,\n                            \"plaid_account_id\": transaction.account_id,\n                            \"plaid_account_name\": transaction.account_name,\n                        }\n                    )\n                    new_transaction.insert()\n                except Exception:\n                    frappe.log_error(\"Plaid Link Error\")\n            bank_account.last_integration_date = transactions[-1].date\n            bank_account.save()\n            frappe.msgprint(\n                _(\"Bank transactions synced for {0}\").format(bank_account.account_name)\n            )\n        except ItemError as e:\n            frappe.log_error(\"Plaid Link Error\")\n            frappe.msgprint(e)\n    else:\n        frappe.msgprint(\n            _(\"Please link {0} to Plaid to sync transactions\").format(bank_account.account_name)\n        )\n\n", "CodeBleu_score": 28.958882669586316}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        plaid = PlaidConnector()\n        transactions = plaid.get_transactions(\n            bank.plaid_access_token,\n            bank_account.mask,\n            bank_account.integration_id,\n            bank_account.last_integration_date,\n        )\n        if not transactions:\n            return\n        last_integration_date = transactions[0][\"date\"]\n        bank_account.last_integration_date = last_integration_date\n        bank_account.save()\n        bank_account.sync_transactions(transactions)\n        return len(transactions)\n    except ItemError as e:\n        frappe.log_error(e, \"Plaid Link Error\")\n        frappe.throw(_(\"There was an error syncing transactions with Plaid.\"))\n\n", "CodeBleu_score": 26.127943467197902}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    # Construct a query URI for the specified entity\n    query_uri = f\\\"/v3/company/{self.company_id}/query?query=select * from {entity}\\\"\n    # Determine the total number of entries for the entity\n    total_entries = self._get_total_entries(query_uri)\n\n\t# Process the entries in batches of 1000\n    for batch_start in range(0, total_entries, 1000):\n\t\t# Construct a query URI for the specified entity\n        query_uri = f\\\"/v3/company/{self.company_id}/query?query=select * from {entity}\\\"\n        # Append the batch start index to the query URI\n        query_uri += f\\\"&start={batch_start}\\\"\n        # Append the batch size to the query URI\n        query_uri += f\\\"&max_results=1000\\\"\n\t\t# Fetch the entries for the batch\n        entries = self._get_entries(query_uri)\n\t\t# Preprocess and save the entries\n        self._preprocess_and_save_entries(entity, entries)\n\n\tdef _get_total_entries(self, query_uri):\n\t\t# Fetch the total number of entries for the entity\n        response = self._get_response(query_uri)\n\t\t# Parse the response\n        response_json = response.json()\n\t\t# Get the total number of entries\n        total_entries = response_json.get(\\\"total_count\\\")\n\t\t# Return the total number of entries\n        return total_entries\n\n\tdef _get_entries(self, query_uri):\n\t\t# Fetch the entries for the entity\n        response = self._get_response(query_uri)\n\t\t# Parse the response\n        response_json = response.json()\n\t\t# Get the entries\n        entries = response_json.get(\\\"query_result\\\")\n\t\t# Return the entries\n        return entries\n\n\tdef _preprocess_and_save_entries(self, entity, entries):\n\t\t# Preprocess and save the entries for the specified entity\n        for entry in entries:\n\t\t\ttry:\n\t\t\t\tself._preprocess_and_save_entry(entity, entry)\n\t\t\texcept Exception as e:\n\t\t\t\tself._log_", "CodeBleu_score": 21.09851714876361}, {"code": "def _migrate_entries(self, entity)\n\t\n    # Construct a query URI for the specified entity\n    query_uri = f\\\"/v3/company/{self.company_id}/query?query=select * from {entity}\\\"\n    # Determine the total number of entries\n    total_entries = self._get_total_entries(query_uri)\n    # Calculate the total number of batches\n    total_batches = total_entries // 1000 + 1\n    # Preprocess and save entries in batches\n    for batch_number in range(1, total_batches + 1):\n        # Construct the URI for the current batch\n        batch_uri = f\\\"{query_uri}&startAt={1000 * (batch_number - 1)}&maxResults=1000\\\"\n        # Fetch the entries for the current batch\n        entries = self._get_entries(batch_uri)\n        # Preprocess and save the entries\n        self._preprocess_and_save_entries(entries, entity)\n\n    frappe.db.commit()\n\n", "CodeBleu_score": 17.67019512526914}, {"code": "def _migrate_entries(self, entity)\n\t\n    if not self.company:\n        return\n    if entity not in [\n        \"Account\",\n        \"TaxRate\",\n        \"TaxCode\",\n    ]:\n        return\n    if self.company not in self.quickbooks_companies:\n        return\n    if not self.oauth.token or not self.oauth.token[\\\"access_token\\\"]:\n        return\n    if not self.oauth.token[\\\"access_token\\\"]:\n        return\n    if not self.oauth.token[\\\"access_token\\\"]:\n        return\n    if not self.oauth.token[\\\"access_token\\\"]:\n        return\n    if not self.oauth.token[\\\"access_token\\\"]:\n        return\n    if not self.oauth.token[\\\"access_token\\\"]:\n        return\n    if not self.oauth.token[\\\"access_token\\\"]:\n        return\n    if not self.oauth.token[\\\"access_token\\\"]:\n        return\n    if not self.oauth.token[\\\"access_token\\\"]:\n        return\n    if not self.oauth.token[\\\"access_token\\\"]:\n        return\n    if not self.oauth.token[\\\"access_token\\\"]:\n        return\n    if not self.oauth.token[\\\"access_token\\\"]:\n        return\n    if not self.oauth.token[\\\"access_token\\\"]:\n        return\n    if not self.oauth.token[\\\"access_token\\\"]:\n        return\n    if not self.oauth.token[\\\"access_token\\\"]:\n        return\n    if not self.oauth.token[\\\"access_token\\\"]:\n        return\n    if not self.oauth.token[\\\"access_token\\\"]:\n        return\n    if not self.oauth.token[\\\"access_token\\\"]:\n        return\n    if not self.oauth.token[\\\"access_token\\\"]:\n        return\n    if not self.oauth.token[\\\"access_token\\\"]:\n        return\n    if not self.oauth.token[\\\"access_token\\\"]:\n        return\n    if not self.oauth.token[\\\"access_token\\\"]:\n        return\n    if not self.oauth.token[\\\"access_token\\\"]:\n        return\n    if not self.oauth.token[\\\"access_token\\\"]:\n        return\n    if not self.oauth.token[\\\"access_token\\\"]:\n        return\n    if not self.oauth.token[\\\"access_token\\\"]:\n        return\n    if not self.oauth.token[\\\"access_token\\\"]", "CodeBleu_score": 10.167107631770815}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    if invoice[\\\"Type\\\"] == \\\"SalesInvoice\\\":\n        self._save_sales_invoice(invoice)\n    elif invoice[\\\"Type\\\"] == \\\"SalesOrder\\\":\n        self._save_sales_order(invoice)\n    elif invoice[\\\"Type\\\"] == \\\"Estimate\\\":\n        self._save_estimate(invoice)\n    elif invoice[\\\"Type\\\"] == \\\"CreditMemo\\\":\n        self._save_credit_memo(invoice)\n    elif invoice[\\\"Type\\\"] == \\\"JournalEntry\\\":\n        self._save_journal_entry(invoice)\n\n", "CodeBleu_score": 16.201673174890562}, {"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        if not frappe.db.exists(\n            {\"doctype\": \"Sales Invoice\", \"quickbooks_id\": invoice[\"Id\"], \"company\": self.company}\n        ):\n            if invoice[\"TxnType\"] == \"SalesInvoice\":\n                self._save_sales_invoice(invoice)\n            elif invoice[\"TxnType\"] == \"SalesReceipt\":\n                self._save_sales_receipt(invoice)\n            elif invoice[\"TxnType\"] == \"Estimate\":\n                self._save_estimate(invoice)\n            elif invoice[\"TxnType\"] == \"Invoice\":\n                self._save_invoice(invoice)\n            elif invoice[\"TxnType\"] == \"CreditMemo\":\n                self._save_credit_memo(invoice)\n            elif invoice[\"TxnType\"] == \"JournalEntry\":\n                self._save_journal_entry(invoice)\n            elif invoice[\"TxnType\"] == \"Deposit\":\n                self._save_deposit(invoice)\n            elif invoice[\"TxnType\"] == \"Return\":\n                self._save_return(invoice)\n            elif invoice[\"TxnType\"] == \"Bill\":\n                self._save_bill(invoice)\n            elif invoice[\"TxnType\"] == \"VendorCredit\":\n                self._save_vendor_credit(invoice)\n            elif invoice[\"TxnType\"] == \"VendorBill\":\n                self._save_vendor_bill(invoice)\n            elif invoice[\"TxnType\"] == \"VendorPayment\":\n                self._save_vendor_payment(invoice)\n            elif invoice[\"TxnType\"] == \"VendorCreditMemo\":\n                self._save_vendor_credit_memo(invoice)\n            elif invoice[\"TxnType\"] == \"VendorReturn\":\n                self._save_vendor_return(invoice)\n            elif invoice[\"TxnType\"] == \"VendorBillPayment\":\n                self._save_vendor_bill_payment(invoice)\n            elif invoice[\"TxnType\"] == \"VendorPaymentCheck\":\n                self._save_vendor_payment_check(invoice)\n            elif invoice[\"TxnType\"] == \"VendorCreditMemoPayment\":\n                self._save_vendor_credit_memo_payment(invoice)\n            elif invoice[\"TxnType\"] == \"VendorReturnPayment\":\n                self._save_vendor_return_payment(invoice)\n            elif invoice[\"TxnType\"] == \"VendorBillPaymentCheck\":\n                self._save_vendor_bill_payment_check(invoice)\n            elif invoice[\"TxnType\"] == \"VendorPaymentCredit\":\n                self._save_vendor_payment_credit(invoice)", "CodeBleu_score": 15.58669249109509}, {"code": "def _save_invoice(self, invoice)\n\t\n    if invoice[\\\"DocType\\\"] == \\\"SalesInvoice\\\":\n        self._save_sales_invoice(invoice)\n    elif invoice[\\\"DocType\\\"] == \\\"SalesReceipt\\\":\n        self._save_sales_receipt(invoice)\n    elif invoice[\\\"DocType\\\"] == \\\"Estimate\\\":\n        self._save_estimate(invoice)\n    elif invoice[\\\"DocType\\\"] == \\\"JournalEntry\\\":\n        self._save_journal_entry(invoice)\n    elif invoice[\\\"DocType\\\"] == \\\"PurchaseInvoice\\\":\n        self._save_purchase_invoice(invoice)\n    elif invoice[\\\"DocType\\\"] == \\\"PurchaseReceipt\\\":\n        self._save_purchase_receipt(invoice)\n    elif invoice[\\\"DocType\\\"] == \\\"Payment Entry\\\":\n        self._save_payment_entry(invoice)\n    elif invoice[\\\"DocType\\\"] == \\\"Credit Note\\\":\n        self._save_credit_note(invoice)\n    elif invoice[\\\"DocType\\\"] == \\\"Debit Note\\\":\n        self._save_debit_note(invoice)\n    elif invoice[\\\"DocType\\\"] == \\\"Cash Sale\\\":\n        self._save_cash_sale(invoice)\n    elif invoice[\\\"DocType\\\"] == \\\"Cash Receipt\\\":\n        self._save_cash_receipt(invoice)\n    elif invoice[\\\"DocType\\\"] == \\\"Journal Entry\\\":\n        self._save_journal_entry(invoice)\n    elif invoice[\\\"DocType\\\"] == \\\"Vendor Bill\\\":\n        self._save_vendor_bill(invoice)\n    elif invoice[\\\"DocType\\\"] == \\\"Vendor Credit Note\\\":\n        self._save_vendor_credit_note(invoice)\n    elif invoice[\\\"DocType\\\"] == \\\"Vendor Payment\\\":\n        self._save_vendor_payment(invoice)\n    elif invoice[\\\"DocType\\\"] == \\\"Purchase Order\\\":\n        self._save_purchase_order(invoice)\n    elif invoice[\\\"DocType\\\"] == \\\"Purchase Receipt\\\":\n        self._save_purchase_receipt(invoice)\n    elif invoice[\\\"DocType\\\"] == \\\"Purchase Order\\\":\n        self._save_purchase_order(invoice)\n    elif invoice[\\\"DocType\\\"] == \\\"Purchase Order\\\":\n        self._save_purchase_order(invoice)\n    elif invoice[\\\"DocType\\\"] == \\\"Purchase Order\\\":\n        self._save_purchase_order(invoice)\n    elif invoice[\\\"DocType\\\"] == \\\"Purchase Order\\\":\n        self._save_purchase_order(invoice)\n    elif invoice[\\\"DocType\\\"] == \\\"Purchase Order\\\":\n        self._save_purchase_order(invoice)\n    elif invoice[\\\"", "CodeBleu_score": 13.657236264479472}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    schedule_date = start_date\n    if no_of_visit:\n        interval = (end_date - start_date).days / no_of_visit\n        for i in range(no_of_visit):\n            schedule_date = add_days(schedule_date, interval)\n            schedule_list.append(schedule_date)\n    else:\n        schedule_list.append(start_date)\n    return schedule_list\n\n", "CodeBleu_score": 30.9398818410244}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    if no_of_visit == 0:\n        return []\n    if start_date == end_date:\n        return [start_date]\n    if no_of_visit == 1:\n        return [start_date]\n    if start_date > end_date:\n        return []\n    if no_of_visit == 1:\n        return [start_date]\n    if start_date == end_date:\n        return [start_date]\n    if no_of_visit == 1:\n        return [start_date]\n    if start_date > end_date:\n        return []\n    if no_of_visit == 1:\n        return [start_date]\n    if start_date == end_date:\n        return [start_date]\n    if no_of_visit == 1:\n        return [start_date]\n    if start_date > end_date:\n        return []\n    if no_of_visit == 1:\n        return [start_date]\n    if start_date == end_date:\n        return [start_date]\n    if no_of_visit == 1:\n        return [start_date]\n    if start_date > end_date:\n        return []\n    if no_of_visit == 1:\n        return [start_date]\n    if start_date == end_date:\n        return [start_date]\n    if no_of_visit == 1:\n        return [start_date]\n    if start_date > end_date:\n        return []\n    if no_of_visit == 1:\n        return [start_date]\n    if start_date == end_date:\n        return [start_date]\n    if no_of_visit == 1:\n        return [start_date]\n    if start_date > end_date:\n        return []\n    if no_of_visit == 1:\n        return [start_date]\n    if start_date == end_date:\n        return [start_date]\n    if no_of_visit == 1:\n        return [start_date]\n    if start_date > end_date:\n        return []\n    if no_of_visit == 1:\n        return [start_date]\n    if start_date == end_date:\n        return [start_date]\n    if no_of_visit == 1:\n        return [start_date]\n   ", "CodeBleu_score": 8.48719845939954}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    if start_date and end_date:\n        if no_of_visit and sales_person:\n            if no_of_visit > 0:\n                diff = date_diff(end_date, start_date)\n                interval = diff / (no_of_visit - 1)\n                for i in range(no_of_visit):\n                    if i == 0:\n                        schedule_list.append(start_date)\n                    else:\n                        schedule_list.append(add_days(schedule_list[i - 1], interval))\n    return schedule_list\n\n", "CodeBleu_score": 31.117420457407697}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\tge($data, [\n    'title' => $this->title,\n    'path' => $this->path,\n    'handle' => $this->handle,\n    'url' => $this->getUrl(),\n   'modal' => $this->getModal(),\n    'actions' => $this->getActions(),\n    'icons' => $this->getIcons(),\n   'messages' => $this->getMessages(),\n   'selected' => $this->getSelectedRecords($this->request, $this->relationships),\n   'request' => $this->request,\n]);\n\nreturn response()->json($data);\n}", "CodeBleu_score": 23.069645865781727}, {"code": "<?\n   public function response($view, $data = []){\n\t", "CodeBleu_score": 5.908764367816092}, {"code": "<?\n   public function response($view, $data = []){\n\t", "CodeBleu_score": 5.908764367816092}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\tSelectedRecords($request, 'user');\n\nforeach ($contacts as $contact) {\ntry {\n$this->dispatch(new DeleteContact($contact));\n} catch (\\Exception $e) {\nflash($e->getMessage())->error()->important();\n}\n}\n}", "CodeBleu_score": 63.11666875911758}, {"code": "<?\npublic function deleteContacts($request){\n\tSelectedRecords($request, 'user');\n\nforeach ($contacts as $contact) {\ntry {\n$this->dispatch(new DeleteContact($contact));\n} catch (\\Exception $e) {\nflash($e->getMessage())->error()->important();\n}\n}\n}", "CodeBleu_score": 63.11666875911758}, {"code": "<?\npublic function deleteContacts($request){\n\tSelectedRecords($request, 'user');\n\nforeach ($contacts as $contact) {\ntry {\n$this->dispatch(new DeleteContact($contact));\n} catch (\\Exception $e) {\nflash($e->getMessage())->error()->important();\n}\n}\n}", "CodeBleu_score": 63.11666875911758}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t>getSelectedRecords($request);\n\nforeach ($transactions as $transaction) {\ntry {\n$this->dispatch(new DeleteTransaction($transaction));\n} catch (\\Exception $e) {\nflash($e->getMessage())->error()->important();\n}\n}\n}", "CodeBleu_score": 61.448442472283645}, {"code": "<?\npublic function deleteTransactions($request){\n\t>getSelectedRecords($request);\n\n\n\nforeach ($transactions as $transaction) {\ntry {\n$this->dispatch(new DeleteTransaction($transaction));\n} catch (\\Exception $e) {\nflash($e->getMessage())->error()->important();\n}\n}\n}", "CodeBleu_score": 61.448442472283645}, {"code": "<?\npublic function deleteTransactions($request){\n\t>getSelectedRecords($request);\n\nforeach ($transactions as $transaction) {\ntry {\n$this->dispatch(new DeleteTransaction($transaction));\n} catch (Exception $e) {\nflash($e->getMessage())->error()->important();\n}\n}\n}", "CodeBleu_score": 54.378498793152275}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\trequest = $this->getRequest();\nif (!$request instanceof FormRequest) {\nreturn;\n}\n\n$rules = $this->prepareRules($request->rules());\n$validator->setRules($rules);\n\nforeach ($this->rows as $row) {\n$request->setData($row);\ntry {\n$validator->validate();\n} catch (ValidationException $e) {\n$validator->errors()->add('rows', $e->errors());\nthrow $e;\n}\n}\n}", "CodeBleu_score": 26.662973061774736}, {"code": "<?\npublic function withValidator($validator){\n\tf (!$this->request_class ||!is_a($this->request_class, FormRequest::class)) {\nreturn;\n}\n\n$request = new $this->request_class($this->request_class::getFormRequest());\n$rules = $request->rules();\n$rules = $this->prepareRules($rules);\n\n$validator->after(function ($validator) use ($rules) {\nforeach ($this->chunk as $row) {\n$validator->validate($row, $rules);\n}\n});\n}", "CodeBleu_score": 28.281588145875848}, {"code": "<?\npublic function withValidator($validator){\n\trequest = $this->getRequest();\nif ($request instanceof FormRequest) {\n$validator->after(function ($validator) use ($request) {\n$rules = $this->prepareRules($this->rules());\n$validator->validateWithRequest($request, $rules);\n});\n}\n}", "CodeBleu_score": 18.541589494716142}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif (! $this instanceof ShouldUpdate) {\nreturn;\n}\n\n$request = $this->getRequestInstance($arguments[0]);\nif ($request instanceof Request) {\n$this->request = $request;\n}\n\nif ($this instanceof HasOwner) {\n$this->setOwner();\n}\n\nif ($this instanceof HasSource) {\n$this->setSource();\n}\n}", "CodeBleu_score": 56.85114173022866}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\nif (! $this instanceof ShouldUpdate) {\nreturn;\n}\n\n$request = $this->getRequestInstance($arguments[0]);\nif ($request instanceof Request) {\n$this->request = $request;\n}\n\nif ($this instanceof HasOwner) {\n$this->setOwner();\n}\n\nif ($this instanceof HasSource) {\n$this->setSource();\n}\n}", "CodeBleu_score": 56.84895750980713}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif (! $this instanceof ShouldUpdate) {\nreturn;\n}\n\n$request = $this->getRequestInstance($arguments[0]);\nif ($request instanceof Request) {\n$this->request = $request;\n}\n\nif ($this instanceof HasOwner) {\n$this->setOwner();\n}\n\nif ($this instanceof HasSource) {\n$this->setSource();\n}\n}", "CodeBleu_score": 56.85114173022866}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t $sort = $this->sort($sort);\n $query->orderBy($sort['column'], $sort['direction']);\n $query->search($this->searchString());\n $query->with(['company', 'owner']);\n\n if ($this->request->expectsJson()) {\n return $query->get();\n }\n\n return $query->paginate(\n $this->request->input('limit', config('akaunting.pagination.limit', 15))\n );\n }", "CodeBleu_score": 36.48606905229993}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t $request = request();\n $search = $request->input('search');\n $sort = $request->input('sort', $sort);\n $limit = $request->input('limit', config('app.pagination_limit'));\n $paginate = $request->expectsJson() &&! $request->is('api/*');\n $query->search($search);\n $query->orderBy($sort, 'asc');\n if ($paginate) {\n return $query->paginate($limit);\n }\n return $query->get();\n }", "CodeBleu_score": 56.22644478019975}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t $request = request();\n $search = $request->get('search');\n $limit = $request->get('limit', config('akaunting.pagination.limit'));\n\n $query->when($search, function ($query, $search) {\n $query->search($search);\n })\n ->when($sort, function ($query, $sort) {\n $query->sort($sort);\n })\n ->when($request->expectsJson(), function ($query) {\n return $query->get();\n }, function ($query) use ($limit) {\n return $query->paginate($limit);\n });\n }", "CodeBleu_score": 50.751108771316865}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t", "CodeBleu_score": 7.647058823529412}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t$open_amount = 0;\n$overdue_amount = 0;\n$status = $model->status;\n\nif ($status == 'paid') {\nreturn [\n'open_amount' => 0,\n'overdue_amount' => 0,\n];\n}\n\n$transactions = $model->transactions()->get();\n\nif ($status == 'partial') {\nforeach ($transactions as $transaction) {\n$open_amount += $transaction->amount;\n}\n}\n\n$due_date = $model->due_date;\n\nif ($status == 'partial') {\n$overdue_amount = $open_amount;\n} else {\n$overdue_amount = $model->total - $open_amount;\n}\n\nif ($due_date && Date::isOverdue($due_date)) {\n$overdue_amount += $model->total;\n}\n\nreturn [\n'open_amount' => $open_amount,\n'overdue_amount' => $overdue_amount,\n];\n}", "CodeBleu_score": 38.17654049414891}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t$open_amount = 0;\n$overdue_amount = 0;\n\nif ($model->status === 'paid') {\nreturn [\n'open_amount' => 0,\n'overdue_amount' => 0,\n];\n}\n\nif ($model->status === 'partial') {\n$transactions = $model->transactions()->where('status', 'paid')->get();\n\n$total = $transactions->sum('amount');\n\n$open_amount = $model->amount - $total;\n}\n\nif ($model->status === 'open') {\n$open_amount = $model->amount;\n}\n\n$due_date = $model->due_date;\n\nif ($due_date) {\n$due_date = Date::parse($due_date);\n\nif ($due_date->isPast()) {\n$overdue_amount = $model->amount;\n}\n}\n\nreturn [\n'open_amount' => $open_amount,\n'overdue_amount' => $overdue_amount,\n];\n}", "CodeBleu_score": 39.06870467935744}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page?: (Paginator::resolveCurrentPage($pageName)?: 1);\n$perPage = $perPage?: $this->model->getPerPage();\n$results = $this->model->newQuery()->forPage($page, $perPage)->get($columns);\nreturn new LengthAwarePaginator($results, $this->model->newQuery()->getCountForPagination(), $perPage, $page, [\n'path' => Paginator::resolveCurrentPath(),\n'pageName' => $pageName,\n]);\n}", "CodeBleu_score": 62.73251602477572}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page?: (Paginator::resolveCurrentPage()?: 1);\n$perPage = $perPage?: $this->model->getPerPage();\n$results = $this->forPage($page, $perPage)->get($columns);\n$total = $this->toBase()->getCountForPagination();\n$paginator = new LengthAwarePaginator($results, $total, $perPage, $page, [\n'path' => Paginator::resolveCurrentPath(),\n'pageName' => $pageName,\n]);\n$paginator->setCollection($results);\nreturn $paginator;\n}", "CodeBleu_score": 66.77918685944353}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\n/**\n * The paginate method accepts an optional argument for the number of records per page. If the argument is not specified, the default value of 15 is used.\n */\n$perPage = $perPage?: $this->model->getPerPage();\n\n/**\n * The paginate method accepts an optional argument for the columns to be retrieved from the database. If the argument is not specified, the default value of ['*'] is used.\n */\n$columns = $columns?: $this->model->getColumns();\n\n/**\n * The paginate method accepts an optional argument for the name of the page query string variable. If the argument is not specified, the default value of 'page' is used.\n */\n$pageName = $pageName?: $this->model->getPageName();\n\n/**\n * The paginate method accepts an optional argument for the current page number. If the argument is not specified, the default value of 1 is used.\n */\n$page = $page?: $this->model->getPage();\n\n/**\n * The paginate method returns a paginator instance with the results, total count, per-page limit, and current page, including the path and page name.\n */\nreturn $this->model->newQuery()\n->forPage($page, $perPage)\n->forPageAfterId($this->model->getPerPage(), $page)\n->get($columns)\n->setPath($this->model->getPerPage(), $page)\n->setPageName($pageName)\n->withPath($this->model->getPerPage(), $page)\n->withPageName($pageName)\n->setPerPage($perPage)\n->setPage($page)\n->setTotal($this->model->count())\n->setLastPage(ceil($this->model->count() / $perPage));\n\n}", "CodeBleu_score": 43.57145132338264}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\tiliations = Reconciliation::whereIn('id', $request->input('records'))->get();\n\nDB::transaction(function () use ($reconciliations) {\nforeach ($reconciliations as $reconciliation) {\n$reconciliation->status = Reconciliation::STATUS_RECONCILED;\n$reconciliation->save();\n\n$transactions = Transaction::whereBetween('date', [$reconciliation->date_start, $reconciliation->date_end])->where('account_id', $reconciliation->account_id)->get();\nforeach ($transactions as $transaction) {\n$transaction->status = Transaction::STATUS_RECONCILED;\n$transaction->save();\n}\n}\n});\n\nreturn redirect()->route($this->path['type'].'.index')->with('success', 'bulk_actions.success.reconciliations');\n}", "CodeBleu_score": 36.40506938613257}, {"code": "<?\npublic function reconcile($request){\n\tiliations = Reconciliation::whereIn('id', $request->get('bulk_action_ids'))->get();\n\nDB::transaction(function () use ($reconciliations) {\n    foreach ($reconciliations as $reconciliation) {\n        $reconciliation->status = Reconciliation::STATUS_RECONCILED;\n        $reconciliation->save();\n\n        $transactions = Transaction::where('account_id', $reconciliation->account_id)\n            ->where('date', '>=', $reconciliation->start_date)\n            ->where('date', '<=', $reconciliation->end_date)\n            ->where('status', Transaction::STATUS_UNRECONCILED)\n            ->get();\n\n        foreach ($transactions as $transaction) {\n            $transaction->status = Transaction::STATUS_RECONCILED;\n            $transaction->save();\n        }\n    }\n});\n\nreturn redirect()->route($this->path['type']. '.index')->with('success', 'bulk_actions.success.reconcile');\n}", "CodeBleu_score": 35.845068538663334}, {"code": "<?\npublic function reconcile($request){\n\trieve the reconciliations from the request\n$reconciliations = Reconciliation::whereIn('id', $request->get('ids'))->get();\n\n// Process each reconciliation within a database transaction\nDB::transaction(function () use ($reconciliations) {\nforeach ($reconciliations as $reconciliation) {\n\n// Mark the reconciliation as reconciled\n$reconciliation->status = Reconciliation::RECONCILED;\n$reconciliation->save();\n\n// Mark all related transactions as reconciled\n$transactions = Transaction::where('reconciliation_id', $reconciliation->id)->get();\nforeach ($transactions as $transaction) {\n$transaction->status = Transaction::RECONCILED;\n$transaction->save();\n}\n}\n});\n\n// Return a success response\nreturn response()->json(['success' => true]);\n}", "CodeBleu_score": 38.56906170331603}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t$this->invitation = UserInvitation::where('user_id', $this->user->id)->delete();\n$token = Str::random(64);\n$this->invitation = UserInvitation::create([\n'user_id' => $this->user->id, 'token' => $token,\n]);\ntry {\n$this->user->notify(new Notification($this->invitation));\n} catch (TransportException $e) {\nthrow new Exception('Failed to send invitation email.');\n}\nreturn $this->invitation; }", "CodeBleu_score": 37.670051248800696}, {"code": "<?\npublic function handle(): UserInvitation{\n\t$invitation = $this->user->invitations()->delete();\n$token = Str::random(64);\n$invitation = UserInvitation::create([\n'token' => $token, 'user_id' => $this->user->id,\n]);\ntry {\n$this->user->notify(new Notification($token));\n} catch (TransportException $e) {\nthrow new Exception($e->getMessage()); } return$invitation;\n}", "CodeBleu_score": 27.29284505452213}, {"code": "<?\npublic function handle(): UserInvitation{\n\t$this->invitation = $this->user->invitations()->delete();\n\n$this->invitation = UserInvitation::create([\n'token' => Str::random(32),\n'user_id' => $this->user->id, ]); try { $this->user->notify(new Notification($this->invitation)); } catch (TransportException $e) { throw new Exception('Failed to send invitation email.'); } return $this->invitation;\n}", "CodeBleu_score": 28.801891466521596}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\tf ($this->model->isReconciled()) {\nthrow new \\Exception('Transaction has been reconciled.', 403);\n}\n\nif ($this->model->isTransfer()) {\nthrow new \\Illuminate\\Auth\\Access\\AuthorizationException('Unauthorized.', 403);\n}\n}", "CodeBleu_score": 28.16271565438394}, {"code": "<?\npublic function authorize(): void{\n\tf ($this->model->isReconciled()) {\nthrow new UnauthorizedException('This transaction has been reconciled and cannot be edited.');\n}\n\nif ($this->model->isTransfer()) {\nthrow new UnauthorizedException('This is a transfer transaction and cannot be edited.');\n}\n}", "CodeBleu_score": 26.8689577626239}, {"code": "<?\npublic function authorize(): void{\n\tf ($this->model->reconciled) {\nthrow new \\Exception('Transaction has been reconciled.', 400);\n}\n\nif ($this->model->type == Transaction::TRANSFER_TYPE) {\nthrow new \\Exception('Unauthorized.', 401);\n}\n}", "CodeBleu_score": 26.558906586989718}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\tString[] allowTables = {\n\"sys_user\",\n\"sys_role\",\n\"sys_menu\",\n\"sys_role_menu\",\n\"sys_tenant\",\n\"sys_tenant_user\"\n};\nfor (String allowTable : allowTables) {\nif (tableName.equals(allowTable)) {\nreturn true;\n}\n}\nreturn false;\n}", "CodeBleu_score": 16.12139766741551}, {"code": "public boolean doTableFilter(String tableName){\n\tif (tableName.contains(\\\"tenant_\\\")) {\nreturn false;\n}\nreturn true;\n}", "CodeBleu_score": 2.0685145329057146}, {"code": "public boolean doTableFilter(String tableName){\n\t// If the tenant ID is not zero, it allows access to certain predefined tables, otherwise, it denies access.\nif (tenantId!= 0L) {\nswitch (tableName) {\ncase \"sys_user\":\ncase \"sys_role\":\ncase \"sys_menu\":\ncase \"sys_permission\":\ncase \"sys_tenant\":\ncase \"sys_tenant_role\":\ncase \"sys_tenant_menu\":\ncase \"sys_tenant_permission\":\ncase \"sys_tenant_user\":\nreturn true;\ndefault:\nreturn false;\n}\n} else {\nreturn false;\n}\n}", "CodeBleu_score": 11.867436556668116}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\nmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\nreturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.87618266366563}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\nmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\nreturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.87618266366563}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.548338294358}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\tString result = null;\n\ttry {\n\t\tList<Account> accountList = accountService.findAll();\n\t\tif (accountList.size() > 0) {\n\t\t\tJSONArray jsonArray = new JSONArray();\n\t\t\tfor (Account account : accountList) {\n\t\t\t\tJSONObject jsonObject = new JSONObject();\n\t\t\t\tjsonObject.put(\\\"id\\\", account.getId());\n\t\t\t\tjsonObject.put(\\\"name\\\", account.getName());\n\t\t\t\tjsonArray.add(jsonObject);\n\t\t\t}\n\t\t\tresult = jsonArray.toJSONString();\n\t\t} else {\n\t\t\tresult = \\\"\u6ca1\u6709\u6570\u636e\\\";\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(\\\"\u67e5\u627e\u7ed3\u7b97\u8d26\u6237\u4fe1\u606f-\u4e0b\u62c9\u6846\u5931\u8d25\\\", e);\n\t\tresult = \\\"\u67e5\u627e\u7ed3\u7b97\u8d26\u6237\u4fe1\u606f-\u4e0b\u62c9\u6846\u5931\u8d25\\\";\n\t}\n\treturn result;\n}", "CodeBleu_score": 48.340329916589134}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\tList<Account> accountList = accountService.findAll();\n\tJSONArray jsonArray = new JSONArray();\n\tfor (Account account : accountList) {\n\t\tJSONObject jsonObject = new JSONObject();\n\t\tjsonObject.put(\\\"id\\\", account.getId());\n\t\tjsonObject.put(\\\"name\\\", account.getName());\n\t\tjsonArray.add(jsonObject);\n\t}\n\treturn jsonArray.toJSONString();\n}", "CodeBleu_score": 31.120102046186254}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\tList<Account> accounts = accountService.findAll();\n\tJSONArray jsonArray = new JSONArray();\n\tfor (Account account : accounts) {\n\t\tJSONObject jsonObject = new JSONObject();\n\t\tjsonObject.put(\"id\", account.getId());\n\t\tjsonObject.put(\"name\", account.getName());\n\t\tjsonArray.add(jsonObject);\n\t}\n\treturn jsonArray.toJSONString();\n}", "CodeBleu_score": 33.57624223901218}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tResponseInfo res = new BaseResponseInfo();\n Map<String, Object> map = new HashMap<String, Object>();\n try {\n List<AccountVo4List> dataList = accountService.listWithBalance(name, serialNo, (currentPage-1)*pageSize, pageSize);\n int total = accountService.listWithBalanceCount(name, serialNo);\n map.put(\"total\", total);\n //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n JSONArray dataArray = new JSONArray();\n if (null!= dataList) {\n for (AccountVo4List accountVo4List : dataList) {\n JSONObject item = new JSONObject();\n item.put(\"id\", accountVo4List.getId());\n item.put(\"name\", accountVo4List.getName());\n item.put(\"serialNo\", accountVo4List.getSerialNo());\n item.put(\"balance\", accountVo4List.getBalance());\n dataArray.add(item);\n }\n }\n map.put(\"rows\", dataArray);\n res.code = 200;\n res.data = map;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 61.95966266810803}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tResponseInfo res = new BaseResponseInfo();\n Map<String, Object> map = new HashMap<>();\n try {\n Boolean forceFlag = systemConfigService.getForceApprovalFlag();\n List<AccountVo4List> dataList = accountService.listWithBalance(name, serialNo, forceFlag, (currentPage - 1) * pageSize, pageSize);\n int total = accountService.listWithBalanceCount(name, serialNo, forceFlag);\n map.put(\"total\", total);\n //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n JSONArray dataArray = new JSONArray();\n if (null!= dataList) {\n for (AccountVo4List accountVo4List : dataList) {\n JSONObject item = new JSONObject();\n item.put(\"id\", accountVo4List.getId());\n item.put(\"name\", accountVo4List.getName());\n item.put(\"serialNo\", accountVo4List.getSerialNo());\n item.put(\"balance\", accountVo4List.getBalance());\n item.put(\"isDefault\", accountVo4List.getIsDefault());\n item.put(\"type\", accountVo4List.getType());\n item.put(\"typeCode\", accountVo4List.getTypeCode());\n dataArray.add(item);\n }\n }\n map.put(\"rows\", dataArray);\n res.code = 200;\n res.data = map;\n } catch (Exception e) {\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 58.73941660363258}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tResponseInfo res = new BaseResponseInfo();\n Map<String, Object> map = new HashMap<String, Object>();\n try {\n List<AccountVo4List> dataList = accountService.listWithBalance(name, serialNo, (currentPage-1)*pageSize, pageSize);\n int total = accountService.listWithBalanceCount(name, serialNo);\n map.put(\"total\", total);\n //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n JSONArray dataArray = new JSONArray();\n if (null!= dataList) {\n for (AccountVo4List accountVo4List : dataList) {\n JSONObject item = new JSONObject();\n item.put(\"id\", accountVo4List.getId());\n item.put(\"name\", accountVo4List.getName());\n item.put(\"serialNo\", accountVo4List.getSerialNo());\n item.put(\"balance\", accountVo4List.getBalance());\n item.put(\"isDefault\", accountVo4List.getIsDefault());\n dataArray.add(item);\n }\n }\n map.put(\"rows\", dataArray);\n res.code = 200;\n res.data = map;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 61.20943211556327}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nMap<String, Object> map = new HashMap<>();\nList<AccountVo4Statistics> list = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\nmap.put(\"rows\", list);\nres.code = 200;\nres.data = map;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 78.11389274843073}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nMap<String, Object> map = new HashMap<>();\nList<AccountStatisticsVo> list = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\nmap.put(\"rows\", list);\nres.code = 200;\nres.data = map;\n} catch(Exception e) {\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 76.02672703209964}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nMap<String, Object> map = new HashMap<>();\nList<AccountStatisticsVo> list = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\nmap.put(\"rows\", list);\nres.code = 200;\nres.data = map;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 78.1641856307735}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo responseInfo = new BaseResponseInfo();\n try {\n List<AccountHead> accountHeads = accountHeadService.getDetailByNumber(billNo);\n responseInfo.setBody(accountHeads.get(0));\n responseInfo.setCode(BusinessConstants.SUCCESS_CODE);\n responseInfo.setMsg(BusinessConstants.SUCCESS_MSG);\n } catch (Exception e) {\n logger.error(\"Error while retrieving details for bill number: \" + billNo, e);\n responseInfo.setCode(BusinessConstants.ERROR_CODE);\n responseInfo.setMsg(BusinessConstants.ERROR_MSG);\n }\n return responseInfo;\n }", "CodeBleu_score": 35.31748295766823}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo response = new BaseResponseInfo();\n try {\n AccountHeadVo4Body body = accountHeadService.getDetailByNumber(billNo);\n response.setBody(body);\n response.setCode(BusinessConstants.SUCCESS_CODE);\n response.setMessage(BusinessConstants.SUCCESS_MESSAGE);\n } catch (Exception e) {\n logger.error(\"Exception occurred in getDetailByNumber method of AccountHeadController\", e);\n response.setCode(BusinessConstants.FAILURE_CODE);\n response.setMessage(BusinessConstants.FAILURE_MESSAGE);\n }\n return response;\n }", "CodeBleu_score": 33.30149261474926}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo responseInfo = new BaseResponseInfo();\n try {\n AccountHeadVo4ListEx accountHeadVo4ListEx = accountHeadService.getDetailByNumber(billNo);\n responseInfo.setCode(BusinessConstants.RESPONSE_OK);\n responseInfo.setMessage(BusinessConstants.RESPONSE_OK_MSG);\n responseInfo.setData(accountHeadVo4ListEx);\n } catch (Exception e) {\n logger.error(e.getMessage());\n responseInfo.setCode(BusinessConstants.RESPONSE_ERROR);\n responseInfo.setMessage(BusinessConstants.RESPONSE_ERROR_MSG);\n }\n return responseInfo;\n }", "CodeBleu_score": 35.259882350718826}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tList<Depot> depotList = depotService.findDepotByCurrentUser();\n\t\tres.code = 200;\n\t\tres.data = depotList;\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 83.66665434524734}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tList<Depot> depotList = depotService.findDepotByCurrentUser();\n\t\tres.code = 200;\n\t\tres.data = depotList;\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 83.66665434524734}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tList<Depot> depotList = depotService.findDepotByCurrentUser();\n\t\tres.code = 200;\n\t\tres.data = depotList;\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 83.66665434524734}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t", "CodeBleu_score": 6.761272144258849}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t", "CodeBleu_score": 6.761272144258849}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t/    String tenantId = request.getHeader(\\\"tenantId\\\");\n//    JSONArray dataArray = new JSONArray();\n//    try {\n//        List<UserBusiness> userBusinessList = userBusinessService.getBasicData(type, keyId);\n//        if(userBusinessList!= null && userBusinessList.size() > 0) {\n//            String value = userBusinessList.get(0).getValue();\n//            if(StringUtil.isNotEmpty(value)) {\n//                String[] ids = value.replace(\\\"[\\\", \\\"\\\").replace(\\\"]\\\", \\\"\\\").split(\\\",\\\");\n//                List<Function> functionList = functionService.getRoleFunction(ids);\n//                if(functionList!= null && functionList.size() > 0) {\n//                    for(Function function : functionList) {\n//                        if(function.getName().equals(\\\"\u7cfb\u7edf\u7ba1\u7406\\\")) {\n//                            continue;\n//                        }\n//                        JSONObject item = new JSONObject();\n//                        item.put(\\\"id\\\", function.getId());\n//                        item.put(\\\"text\\\", function.getName());\n//                        item.put(\\\"icon\\\", function.getIcon());\n//                        item.put(\\\"url\\\", function.getUrl());\n//                        item.put(\\\"component\\\", function.getComponent());\n//                        dataArray.add(item);\n//                    }\n//                }\n//            }\n//        }\n//    } catch (DataAccessException e) {\n//        logger.error(\\\">>>>>>>>>>>>>>>>>>>\u67e5\u627e\u5f02\u5e38\\\", e);\n    }\n    return dataArray;\n}", "CodeBleu_score": 9.169799668784133}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\nBaseResponseInfo response = new BaseResponseInfo();\n\ntry {\nPlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\nresponse.setCode(200);\nresponse.setData(platformConfig);\n} catch(Exception e) {\nlogger.error(e.getMessage(), e);\nresponse.setCode(500);\nresponse.setMessage(e.getMessage());\n}\n\nreturn response;\n}", "CodeBleu_score": 50.096203170384015}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\tBaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n\ttry {\n\t\tPlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n\t\tbaseResponseInfo.setCode(ErpInfo.OK.code);\n\t\tbaseResponseInfo.setMessage(ErpInfo.OK.name);\n\t\tbaseResponseInfo.setData(platformConfig);\n\t} catch(Exception e){\n\t\tlogger.error(e.getMessage(), e);\n\t\tbaseResponseInfo.setCode(ErpInfo.ERROR.code);\n\t\tbaseResponseInfo.setMessage(ErpInfo.ERROR.name);\n\t}\n\treturn baseResponseInfo;\n}", "CodeBleu_score": 52.69067259432541}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\n//    @GetMapping(value = \"/getInfoByKey\")\n//    @ApiOperation(value = \"\u6839\u636eplatformKey\u67e5\u8be2\u4fe1\u606f\")\n//    public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n//                                         HttpServletRequest request)throws Exception  {\n        BaseResponseInfo responseInfo = new BaseResponseInfo();\n        try {\n            PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n            responseInfo.setCode(ErpInfo.OK.code);\n            responseInfo.setMsg(ErpInfo.OK.name);\n            responseInfo.setData(platformConfig);\n        } catch(Exception e) {\n            logger.error(e.getMessage(), e);\n            responseInfo.setCode(ErpInfo.ERROR.code);\n            responseInfo.setMsg(ErpInfo.ERROR.name);\n            responseInfo.setData(e.getMessage());\n        }\n        return responseInfo;\n    }\n\n}", "CodeBleu_score": 53.571993580246726}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n\tList<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList();\n\tif (systemConfigList!= null && systemConfigList.size() > 0) {\n\t\tbaseResponseInfo.setCode(200);\n\t\tbaseResponseInfo.setData(systemConfigList.get(0));\n\t} else {\n\t\tbaseResponseInfo.setCode(500);\n\t\tbaseResponseInfo.setMsg(\"\u83b7\u53d6\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\");\n\t}\n\treturn baseResponseInfo;\n}", "CodeBleu_score": 30.645190984896264}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n\tList<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList();\n\tif (systemConfigList!= null && systemConfigList.size() > 0) {\n\t\tbaseResponseInfo.setCode(200);\n\t\tbaseResponseInfo.setData(systemConfigList.get(0));\n\t} else {\n\t\tbaseResponseInfo.setCode(500);\n\t\tbaseResponseInfo.setMessage(\"\u83b7\u53d6\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\");\n\t}\n\treturn baseResponseInfo;\n}", "CodeBleu_score": 30.893299832597815}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tresponse.setCode(200);\n\t\tresponse.setData(systemConfigService.getSystemConfigList());\n\t} catch (Exception e) {\n\t\tlogger.error(\"\u83b7\u53d6\u5f53\u524d\u79df\u6237\u7684\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\", e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(\"\u83b7\u53d6\u5f53\u524d\u79df\u6237\u7684\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\");\n\t}\n\treturn response;\n}", "CodeBleu_score": 28.579941571700573}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t", "CodeBleu_score": 1.8642714310173143}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tMultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n\t\tString businessPath = request.getParameter(\"businessPath\");\n\t\tMultipartFile file = multipartRequest.getFile(\"file\");\n\t\tif (file == null) {\n\t\t\tres.code = 400;\n\t\t\tres.data = \"\u8bf7\u9009\u62e9\u6587\u4ef6\";\n\t\t\treturn res;\n\t\t}\n\t\tif (file.getSize() > maxFileSize) {\n\t\t\tres.code = 400;\n\t\t\tres.data = \"\u6587\u4ef6\u5927\u5c0f\u4e0d\u80fd\u8d85\u8fc7\" + maxFileSize + \"\u5b57\u8282\";\n\t\t\treturn res;\n\t\t}\n\t\tif (StringUtil.isEmpty(businessPath)) {\n\t\t\tres.code = 400;\n\t\t\tres.data = \"\u8bf7\u9009\u62e9\u4e1a\u52a1\u8def\u5f84\";\n\t\t\treturn res;\n\t\t}\n\t\tString fileName = file.getOriginalFilename();\n\t\tString suffix = fileName.substring(fileName.lastIndexOf(\".\"));\n\t\tif (fileUploadType == 1) {\n\t\t\t// \u4fdd\u5b58\u5230\u672c\u5730\n\t\t\tString filePath = this.filePath + businessPath + File.separator;\n\t\t\tFile dest = new File(filePath);\n\t\t\tif (!dest.exists()) {\n\t\t\t\tdest.mkdirs();\n\t\t\t}\n\t\t\tString newFileName = UUID.randomUUID().toString() + suffix;\n\t\t\tFile f = new File(filePath + newFileName);\n\t\t\tfile.transferTo(f);\n\t\t\tres.code = 200;\n\t\t\tres.data = newFileName;\n\t\t} else {\n\t\t\t// \u4fdd\u5b58\u5230\u963f\u91cc\u4e91\n\t\t\tString newFileName = UUID.randomUUID().toString() + suffix;\n\t\t\tString url = aliOssService.uploadFile(file, businessPath, newFileName);\n\t\t\tres.code = 200;\n\t\t\tres.data = url;\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u4e0a\u4f20\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 49.86621725688343}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t", "CodeBleu_score": 1.8642714310173143}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n List<String> title = jsonObject.getJSONArray(\\\"title\\\").toJavaList(String.class);\n List<String> head = jsonObject.getJSONArray(\\\"head\\\").toJavaList(String.class);\n List<String> tip = jsonObject.getJSONArray(\\\"tip\\\").toJavaList(String.class);\n List<List<String>> data = jsonObject.getJSONArray(\\\"data\\\").toJavaList(List.class);\n String fileName = jsonObject.getString(\\\"fileName\\\");\n String sheetName = jsonObject.getString(\\\"sheetName\\\");\n if (fileName == null || fileName.isEmpty()) {\n fileName = \\\"excel\\\";\n }\n if (sheetName == null || sheetName.isEmpty()) {\n sheetName = \\\"sheet\\\";\n }\n ExportExcelUtil.exportExcel(title, head, tip, data, fileName, sheetName, response);\n } catch (Exception e) {\n logger.error(\\\"\u5bfc\u51faexcel\u5931\u8d25\\\" + e.getMessage());\n }\n }", "CodeBleu_score": 36.30367689371703}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n // Extract the title, head, tip, and data from the JSON object\n String title = jsonObject.getString(\\\"title\\\");\n List<String> head = jsonObject.getJSONArray(\\\"head\\\");\n List<String> tip = jsonObject.getJSONArray(\\\"tip\\\");\n List<List<String>> data = jsonObject.getJSONArray(\\\"data\\\");\n\n // Create a new ExcelExportService object and call the export method\n ExcelExportService excelExportService = new ExcelExportService();\n excelExportService.export(title, head, tip, data, response);\n } catch (Exception e) {\n logger.error(\\\"Error exporting Excel file: \\\" + e.getMessage());\n }\n }", "CodeBleu_score": 41.0523228676292}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n String title = jsonObject.getString(\\\"title\\\");\n String head = jsonObject.getString(\\\"head\\\");\n String tip = jsonObject.getString(\\\"tip\\\");\n List<Map<String, Object>> data = jsonObject.getJSONArray(\\\"data\\\");\n String fileName = \\\"excel\\\";\n String[] headArray = head.split(\\\",\\\");\n String[] tipArray = tip.split(\\\",\\\");\n ExportExcelUtil.exportExcel(title, headArray, tipArray, data, fileName, response);\n } catch (Exception e) {\n logger.error(\\\"\u5bfc\u51faexcel\u5931\u8d25\\\" + e.getMessage());\n }\n }", "CodeBleu_score": 38.60389192416169}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\nAccount account = new Account();\n\nString name = obj.getString(\\\"name\\\");\nString serialNo = obj.getString(\\\"serialNo\\\");\nString remark = obj.getString(\\\"remark\\\");\n\nif (StringUtil.isEmpty(name)) {\nJshException.readFail(logger, \\\"\u540d\u79f0\u4e0d\u80fd\u4e3a\u7a7a\\\");\n}\nif (StringUtil.isEmpty(serialNo)) {\nJshException.readFail(logger, \\\"\u7f16\u7801\u4e0d\u80fd\u4e3a\u7a7a\\\");\n}\n\nif (StringUtil.isEmpty(remark)) {\nremark = \\\"\\\";\n}\n\naccount.setName(name);\naccount.setSerialNo(serialNo);\naccount.setRemark(remark);\naccount.setCreateUser(userService.getCurrentUser().getId());\naccount.setCreateDate(new Date());\naccount.setUpdateUser(userService.getCurrentUser().getId());\naccount.setUpdateDate(new Date());\n\naccount.setSort(accountMapperEx.getSort());\n\naccount.setEnabled(true);\naccount.setDeleteFlag(BusinessConstants.DELETE_FLAG_NORMAL);\n\nint result = 0;\ntry {\nresult = accountMapper.insertSelective(account);\nlogService.insertLog(request, \\\"\u65b0\u589e\u8d26\u6237\\\", \\\"\u65b0\u589e\u8d26\u6237\u6210\u529f\\\");\n} catch (Exception e) {\nlogService.insertLog(request, \\\"\u65b0\u589e\u8d26\u6237\\\", \\\"\u65b0\u589e\u8d26\u6237\u5931\u8d25\\\");\nJshException.writeFail(logger, e);\n}\nreturn result;\n}", "CodeBleu_score": 29.140842988200454}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\tString accountName = obj.getString(\\\"accountName\\\");\nString serialNo = obj.getString(\\\"serialNo\\\");\nString remark = obj.getString(\\\"remark\\\");\nString initialAmountStr = obj.getString(\\\"initialAmount\\\");\nBigDecimal initialAmount = new BigDecimal(\\\"0\\\");\nif (StringUtil.isNotEmpty(initialAmountStr)) {\ninitialAmount = new BigDecimal(initialAmountStr);\n}\nString defaultFlag = obj.getString(\\\"defaultFlag\\\");\nBoolean defaultFlagBool = false;\nif (StringUtil.isNotEmpty(defaultFlag)) {\ndefaultFlagBool = Boolean.parseBoolean(defaultFlag);\n}\nint result = 0;\ntry {\nAccount account = new Account();\naccount.setName(accountName);\naccount.setSerialNo(serialNo);\naccount.setRemark(remark);\naccount.setInitialAmount(initialAmount);\naccount.setCreateBy(userService.getCurrentUser().getId());\naccount.setCreateDate(new Date());\naccount.setUpdateBy(userService.getCurrentUser().getId());\naccount.setUpdateDate(new Date());\naccount.setEnabled(true);\naccount.setDeleteFlag(BusinessConstants.DELETE_FLAG_NORMAL);\nif (defaultFlagBool) {\naccount.setDefaultFlag(true);\n} else {\naccount.setDefaultFlag(false);\n}\nresult = accountMapper.insertSelective(account);\nif (result == 1) {\nlogService.insertLog(LogConstants.LOG_TYPE_ADD, LogConstants.LOG_TARGET_ACCOUNT, \\\"\u65b0\u589e\u8d26\u6237\\\", \\\"\u65b0\u589e\u8d26\u6237\\\", \\\"\u65b0\u589e\u8d26\u6237\\\", request);\n}\n} catch (Exception e) {\nJshException.writeFail(logger, e);\n}\nreturn result;\n}", "CodeBleu_score": 42.377637590232936}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\tint result = 0;\ntry{\nAccount account = new Account();\naccount.setName(obj.getString(\\\"name\\\"));\naccount.setSerialNo(obj.getString(\\\"serialNo\\\"));\naccount.setRemark(obj.getString(\\\"remark\\\"));\naccount.setCreateBy(userService.getUserByRequest(request).getId());\naccount.setCreateDate(new Date());\naccount.setUpdateBy(userService.getUserByRequest(request).getId());\naccount.setUpdateDate(new Date());\naccount.setEnabled(true);\naccount.setDeleteFlag(BusinessConstants.DELETE_FLAG_NORMAL);\naccount.setSort(0);\nif (obj.has(\\\"initialAmount\\\")) {\n\naccount.setInitialAmount(new BigDecimal(obj.getString(\\\"initialAmount\\\")));\n\n}\n\nif (obj.has(\\\"isDefault\\\")) {\n\nif (obj.getBoolean(\\\"isDefault\\\")) {\n\naccount.setIsDefault(true);\n\n}\n\n}\n\nresult = accountMapper.insertSelective(account);\n\nlogService.log(request, \\\"\u65b0\u589e\\\" + account.getName() + \\\"\u79d1\u76ee\u6210\u529f\\\");\n\n}catch(Exception e){\nJshException.writeFail(logger, e);\n\nthrow new BusinessRunTimeException(ExceptionConstants.ACCOUNT_INSERT_FAIL);\n\n}\nreturn result;\n\n}", "CodeBleu_score": 37.803787511560486}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\ttry {\nreturn accountMapperEx.selectByConditionAccountCount(name, serialNo, null);\n} catch (Exception e) {\nJshException.readFail(logger, e);\n}\nreturn null;\n}", "CodeBleu_score": 40.408609300738085}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn accountMapperEx.selectByConditionAccountCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tJshException.readFail(logger, e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 31.003127655212246}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\ttry {\nreturn accountMapperEx.selectByConditionAccountCount(name, serialNo, null);\n} catch (Exception e) {\nJshException.readFail(logger, e);\n}\nreturn null;\n}", "CodeBleu_score": 40.408609300738085}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result =0;\n\ttry{\n\t\tresult=depotItemMapper.deleteByPrimaryKey(id);\n\t}catch(Exception e){\n\t\tJshException.readFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 86.98350961767149}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteByPrimaryKey(id);\n\t} catch (Exception e) {\n\t\tJshException.readFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 70.83916425515784}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result =0;\n\ttry{\n\t\tresult=depotItemMapper.deleteByPrimaryKey(id);\n\t}catch(Exception e){\n\t\tJshException.readFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 86.98350961767149}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\tString url = protocol + \"://\" + host + \":\" + port + \"/projects/\" + projectName + \"/nodes/\" + nodeType + \"/\" + nodeKey;\n\tCloseableHttpClient client = HttpClients.createDefault();\n\tHttpGet request = new HttpGet(url);\n\tCloseableHttpResponse response = null;\n\ttry {\n\t\tresponse = client.execute(request);\n\t\tHttpEntity entity = response.getEntity();\n\t\tif (entity!= null) {\n\t\t\tString responseString = EntityUtils.toString(entity);\n\t\t\tif (responseString.contains(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttry {\n\t\t\tif (response!= null) {\n\t\t\t\tresponse.close();\n\t\t\t}\n\t\t\tclient.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 45.54717839824243}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\tString url = protocol + \"://\" + host + \":\" + port + \"/projects/\" + projectName + \"/nodes/\" + nodeType + \"/\" + nodeKey;\n\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tHttpGet httpGet = new HttpGet(url);\n\tCloseableHttpResponse response = null;\n\ttry {\n\t\tresponse = httpClient.execute(httpGet);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString responseString = EntityUtils.toString(entity);\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\tMap<String, String> map = mapper.readValue(responseString, Map.class);\n\t\tif (map.containsKey(\"key\")) {\n\t\t\treturn true;\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttry {\n\t\t\tif (response!= null) {\n\t\t\t\tresponse.close();\n\t\t\t}\n\t\t\thttpClient.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 52.06934259239989}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\ttry {\n\t\tString url = protocol + \"://\" + host + \":\" + port + \"/api/projects/\" + projectName + \"/nodes/\" + nodeType + \"/\" + nodeKey;\n\t\tCloseableHttpClient client = HttpClients.createDefault();\n\t\tHttpGet request = new HttpGet(url);\n\t\tCloseableHttpResponse response = client.execute(request);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString responseString = EntityUtils.toString(entity, Charset.forName(\\\"UTF-8\\\"));\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\tJsonNode root = mapper.readTree(responseString);\n\t\tif (root.has(\\\"key\\\")) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttry {\n\t\t\tif (client!= null) {\n\t\t\t\tclient.close();\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 49.73675110347627}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tseableHttpClient httpClient = HttpClients.createDefault();\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\tHttpHost host = new HttpHost(getHost(), getPort(), getProtocol());\n\t\tHttpGet getRequest = new HttpGet(\n\t\t\t\t\"/addEdge/projectName/\" +withProjectName(projectName) + \"edgeType/\" + edgeType + \"fromType/\" + fromType + \"toType/\" + toType + \"from/\" + from + \"to/\" + to);\n\t\thttpResponse = httpClient.execute(host, getRequest);\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tif (entity!= null) {\n\t\t\tObjectMapper om = new ObjectMapper();\n\t\t\tString result = EntityUtils.toString(entity);\n\t\t\tMap map = om.readValue(result, Map.class);\n\t\t\tif (map.get(\"key\")!= null) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n}", "CodeBleu_score": 80.88315165932971}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tseableHttpClient httpClient = HttpClients.createDefault();\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\tHttpHost host = new HttpHost(getHost(), getPort(), getProtocol());\n\t\tHttpGet getRequest = new HttpGet(\n\t\t\t\t\"/addEdge/\" +withProjectName(projectName) + edgeType + \"/\" + fromType + \"/\" + from + \"/\" + toType + \"/\" + to);\n\t\thttpResponse = httpClient.execute(host, getRequest);\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tif (entity!= null) {\n\t\t\tObjectMapper om = new ObjectMapper();\n\t\t\tString result = EntityUtils.toString(entity);\n\t\t\tMap map = om.readValue(result, Map.class);\n\t\t\tif (map.get(\"key\")!= null) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n}", "CodeBleu_score": 94.57065322632266}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tseableHttpClient httpClient = HttpClients.createDefault();\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\tHttpHost host = new HttpHost(getHost(), getPort(), getProtocol());\n\t\tHttpGet getRequest = new HttpGet(\n\t\t\t\t\"/addEdge/\" +withProjectName(projectName) + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to);\n\t\thttpResponse = httpClient.execute(host, getRequest);\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tif (entity!= null) {\n\t\t\tObjectMapper om = new ObjectMapper();\n\t\t\tString result = EntityUtils.toString(entity);\n\t\t\tMap map = om.readValue(result, Map.class);\n\t\t\tif (map.get(\"key\")!= null) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n}", "CodeBleu_score": 94.57065322632266}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t\tif (event == null) {\n\t\tthrow new IllegalArgumentException(\"Event is null\");\n\t}\n\tif (event.getMessage() == null) {\n\t\tthrow new IllegalArgumentException(\"Event message is null\");\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(testLocations.get(new Random().nextInt(testLocations.size())));\n\t}\n\tevent.setTime(new Date());\n\ttry {\n\t\tString json = objectMapper.writeValueAsString(event);\n\t\tProducerRecord<String, String> record = new ProducerRecord<>(\"test\", json);\n\t\tproducer.send(record);\n\t\tproducer.flush();\n\t} catch (JsonProcessingException e) {\n\t\tthrow new RuntimeException(e);\n\t}\n}", "CodeBleu_score": 42.9121470561756}, {"code": "public void sendEvent(Event event){\n\t\tif (event == null) {\n\t\treturn;\n\t}\n\tif (event.getMessage() == null) {\n\t\treturn;\n\t}\n\tLocation location = event.getLocation();\n\tif (location == null) {\n\t\tlocation = testLocations.get(new Random().nextInt(testLocations.size()));\n\t}\n\tevent.setTime(new Date());\n\tString json = null;\n\ttry {\n\t\tjson = objectMapper.writeValueAsString(event);\n\t} catch (JsonProcessingException e) {\n\t\te.printStackTrace();\n\t}\n\tString topic = event.getTarget();\n\tif (topic == null) {\n\t\ttopic = \"test\";\n\t}\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, json);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 61.83351869357655}, {"code": "public void sendEvent(Event event){\n\t\nif (event == null || event.getMessage() == null) {\n\nreturn;\n\n}\n\nif (event.getLocation() == null) {\n\nevent.setLocation(getTestLocation());\n\n}\n\nevent.setEventTime(new Date());\n\nString jsonString = null;\n\ntry {\n\njsonString = objectMapper.writeValueAsString(event);\n\n} catch (JsonProcessingException e) {\n\ne.printStackTrace();\n\n}\n\nString topic = \"test\";\n\nif (event.getTarget()!= null) {\n\ntopic = event.getTarget();\n\n}\n\nProducerRecord<String, String> producerRecord = new ProducerRecord<>(topic, jsonString);\n\nproducer.send(producerRecord);\n\nproducer.flush();\n\n}", "CodeBleu_score": 50.28492651372133}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t\tOSSClient ossClient = new OSSClient(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n\ttry {\n\t\tossClient.putObject(config.getOssBucket(), objName, new ByteArrayInputStream(content));\n\t\treturn String.format(\"https://%s.%s/%s\", config.getOssBucket(), config.getEndpoint(), objName);\n\t} finally {\n\t\tossClient.shutdown();\n\t}\n}", "CodeBleu_score": 32.21789378408626}, {"code": "public String upload(String objName, byte[] content){\n\tString endpoint = config.getEndpoint();\nString accessKeyId = config.getAccessKeyId();\nString accessKeySecret = config.getAccessKeySecret();\nString bucketName = config.getOssBucket();\nString objectName = objName;\n\nOSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\nossClient.putObject(bucketName, objectName, new ByteArrayInputStream(content));\nossClient.shutdown();\n\nreturn \"https://\" + bucketName + \".\" + endpoint + \"/\" + objectName;\n}", "CodeBleu_score": 43.132389115643804}, {"code": "public String upload(String objName, byte[] content){\n\t// Create a OSSClient instance.\nOSSClient ossClient = new OSSClient(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n\n// Create a PutObjectRequest instance.\nPutObjectRequest putObjectRequest = new PutObjectRequest(config.getOssBucket(), objName, new ByteArrayInputStream(content));\n\n// Upload the object and check for success.\nPutObjectResult putObjectResult = ossClient.putObject(putObjectRequest);\nif (putObjectResult.getStatusCode() == 200) {\nSystem.out.println(\"Upload success.\");\n}\n\n// Shut down the OSSClient.\nossClient.shutdown();\n\n// Return the URL of the uploaded object.\nreturn putObjectResult.getETag();\n}", "CodeBleu_score": 35.62264846849196}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tpToLocationWorker worker = getIpToLocationWorker();\nif (worker == null) {\nreturn new LocationInfo();\n}\n\nif (worker.state == STATE_UNAVAILABLE) {\nreturn new LocationInfo();\n}\n\nif (worker.state == STATE_LOADING) {\nreturn new LocationInfo();\n}\n\nif (worker.state == STATE_MASTER) {\nreturn worker.getLocationInfoByIP(ipAddress);\n}\n\nreturn new LocationInfo();\n}", "CodeBleu_score": 38.54740334297561}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tpToLocationWorker worker = getIpToLocationWorker();\nif (worker == null) {\nreturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\");\n}\n\nif (worker.state == STATE_UNAVAILABLE) {\nreturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\");\n}\n\nif (worker.state == STATE_LOADING) {\nreturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\");\n}\n\nreturn worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 36.856710460982534}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t/        if (ipAddress == null) {\n//            return new LocationInfo();\n//        }\n//        if (ipAddress.length() == 0) {\n//            return new LocationInfo();\n//        }\n//        IpToLocationWorker worker = getIpToLocationWorker();\n//        if (worker == null) {\n//            return new LocationInfo();\n//        }\n//        if (worker.state == STATE_UNAVAILABLE) {\n//            return new LocationInfo();\n//        }\n//        if (worker.state == STATE_LOADING) {\n//            return new LocationInfo();\n//        }\n//        if (worker.state == STATE_MASTER) {\n//            return worker.getLocationInfoByIP(ipAddress);\n//        }\n//        return new LocationInfo();\n//    }", "CodeBleu_score": 6.181417830082079}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (lowLevelRestClient!= null && highLevelRestClient!= null) {\n\t\treturn;\n\t}\n\tsynchronized (this) {\n\t\tif (lowLevelRestClient!= null && highLevelRestClient!= null) {\n\t\t\treturn;\n\t\t}\n\t\tif (clusterHostList == null || clusterHostList.length() == 0) {\n\t\t\tthrow new Exception(\"Cluster host list is not set.\");\n\t\t}\n\t\tString[] hosts = clusterHostList.split(\",\");\n\t\tList<HttpHost> httpHosts = new ArrayList<HttpHost>();\n\t\tfor (String host : hosts) {\n\t\t\tString[] hostPort = host.split(\":\");\n\t\t\tif (hostPort.length!= 2) {\n\t\t\t\tthrow new Exception(\"Invalid cluster host list format. The cluster host list should be in the format of host1:port1,host2:port2,...\");\n\t\t\t}\n\t\t\tHttpHost httpHost = new HttpHost(hostPort[0], Integer.parseInt(hostPort[1]), \"http\");\n\t\t\thttpHosts.add(httpHost);\n\t\t}\n\t\tlowLevelRestClient = RestClient.builder(httpHosts.toArray(new HttpHost[httpHosts.size()])).build();\n\t\thighLevelRestClient = new RestHighLevelClient(lowLevelRestClient);\n\t}\n}", "CodeBleu_score": 50.74395803669932}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (this.lowLevelRestClient == null || this.highLevelRestClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (this.lowLevelRestClient == null || this.highLevelRestClient == null) {\n\t\t\t\tString[] clusterHosts = this.clusterHostList.split(\",\");\n\t\t\t\tList<HttpHost> httpHosts = new ArrayList<HttpHost>();\n\t\t\t\tfor (String clusterHost : clusterHosts) {\n\t\t\t\t\tString[] clusterHostAndPort = clusterHost.split(\":\");\n\t\t\t\t\tif (clusterHostAndPort.length == 2) {\n\t\t\t\t\t\thttpHosts.add(new HttpHost(clusterHostAndPort[0], Integer.parseInt(clusterHostAndPort[1]), \"http\"));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Exception(\"Invalid cluster host: \" + clusterHost);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.lowLevelRestClient = RestClient.builder(httpHosts.toArray(new HttpHost[httpHosts.size()])).build();\n\t\t\t\tthis.highLevelRestClient = new RestHighLevelClient(this.lowLevelRestClient);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 31.599971814994944}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (lowLevelRestClient == null || highLevelRestClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (lowLevelRestClient == null || highLevelRestClient == null) {\n\t\t\t\tif (clusterHostList == null) {\n\t\t\t\t\tthrow new Exception(\"No cluster host list provided\");\n\t\t\t\t}\n\t\t\t\tString[] hosts = clusterHostList.split(\",\");\n\t\t\t\tList<HttpHost> httpHosts = new ArrayList<HttpHost>();\n\t\t\t\tfor (String host : hosts) {\n\t\t\t\t\tString[] hostAndPort = host.split(\":\");\n\t\t\t\t\tif (hostAndPort.length!= 2) {\n\t\t\t\t\t\tthrow new Exception(\"Invalid cluster host list provided: \" + clusterHostList);\n\t\t\t\t\t}\n\t\t\t\t\tint port = Integer.parseInt(hostAndPort[1]);\n\t\t\t\t\tif (port < 1 || port > 65535) {\n\t\t\t\t\t\tthrow new Exception(\"Invalid cluster host port provided: \" + hostAndPort[1]);\n\t\t\t\t\t}\n\t\t\t\t\thttpHosts.add(new HttpHost(hostAndPort[0], port));\n\t\t\t\t}\n\t\t\t\tlowLevelRestClient = RestClient.builder(httpHosts.toArray(new HttpHost[0])).build();\n\t\t\t\thighLevelRestClient = new RestHighLevelClient(lowLevelRestClient);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 47.02850474307252}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tt<HttpHost> hosts = new ArrayList<HttpHost>();\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tString[] hostParts = host.split(\":\");\n\t\tif (hostParts.length == 1) {\n\t\t\thosts.add(new HttpHost(hostParts[0], clusterPort, \"http\"));\n\t\t} else if (hostParts.length == 2) {\n\t\t\thosts.add(new HttpHost(hostParts[0], Integer.parseInt(hostParts[1]), \"http\"));\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(\"Invalid host: \" + host);\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 42.150936842031086}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tt<HttpHost> hosts = new ArrayList<>();\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tint port = clusterPort;\n\t\tif (host.contains(\":\")) {\n\t\t\tString[] hostAndPort = host.split(\":\");\n\t\t\thost = hostAndPort[0];\n\t\t\tport = Integer.parseInt(hostAndPort[1]);\n\t\t}\n\t\thosts.add(new HttpHost(host, port));\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 41.698270575157096}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tt<HttpHost> hosts = new ArrayList<HttpHost>();\n\tString[] hostArray = clusterHostList.split(\",\");\n\tfor (String host : hostArray) {\n\t\tif (host.contains(\":\")) {\n\t\t\tString[] hostAndPort = host.split(\":\");\n\t\t\thosts.add(new HttpHost(hostAndPort[0], Integer.parseInt(hostAndPort[1]), \"http\"));\n\t\t} else {\n\t\t\thosts.add(new HttpHost(host, clusterPort, \"http\"));\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 44.9617898577927}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\tap<String, Object> task = null;\n\ttry {\n\t\ttask = taskQueue.poll(30, TimeUnit.SECONDS);\n\t} catch (InterruptedException e) {\n\t\te.printStackTrace();\n\t}\n\tif (task!= null) {\n\t\tString taskType = (String) task.get(PARAM_TASK_TYPE);\n\t\tif (TASK_PLAIN_TEXT_MESSAGE.equals(taskType)) {\n\t\t\tString toNumber = (String) task.get(PARAM_RECIEVER_NUMBER);\n\t\t\tString fromWho = (String) task.get(PARAM_FROM_WHO);\n\t\t\tString template = (String) task.get(PARAM_MESSAGE_TEMPLATE);\n\t\t\tMap<String, String> parameters = (Map<String, String>) task.get(PARAM_MESSAGE_DATA);\n\n\t\t\tif (StringUtils.isBlank(toNumber)) {\n\t\t\t\tlogger.error(\\\"toNumber is empty\\\");\n\t\t\t} else if (StringUtils.isBlank(fromWho)) {\n\t\t\t\tlogger.error(\\\"fromWho is empty\\\");\n\t\t\t} else if (StringUtils.isBlank(template)) {\n\t\t\t\tlogger.error(\\\"template is empty\\\");\n\t\t\t} else if (parameters == null || parameters.isEmpty()) {\n\t\t\t\tlogger.error(\\\"parameters is empty\\\");\n\t\t\t} else {\n\t\t\t\tsendMessage(toNumber, fromWho, template, parameters);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 43.48253352820659}, {"code": "protected void pollingWork() throws InterruptedException{\n\tap<String, Object> task = null;\n\ttry {\n\t\ttask = taskQueue.poll(30, TimeUnit.SECONDS);\n\t\tif (task == null) {\n\t\t\treturn;\n\t\t}\n\t\tString taskType = (String) task.get(PARAM_TASK_TYPE);\n\t\tif (TASK_PLAIN_TEXT_MESSAGE.equals(taskType)) {\n\t\t\tString toNumber = (String) task.get(PARAM_RECIEVER_NUMBER);\n\t\t\tString fromWho = (String) task.get(PARAM_FROM_WHO);\n\t\t\tString template = (String) task.get(PARAM_MESSAGE_TEMPLATE);\n\t\t\tMap<String, String> parameters = (Map<String, String>) task.get(PARAM_MESSAGE_DATA);\n\t\t\tif (StringUtils.isBlank(toNumber) || StringUtils.isBlank(template)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (StringUtils.isBlank(fromWho)) {\n\t\t\t\tfromWho = \\\"\\\";\n\t\t\t}\n\t\t\tif (parameters == null) {\n\t\t\t\tparameters = new HashMap<String, String>();\n\t\t\t}\n\t\t\tsendMessage(toNumber, fromWho, template, parameters);\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "CodeBleu_score": 46.52247647071766}, {"code": "protected void pollingWork() throws InterruptedException{\n\tap<String, Object> task = taskQueue.poll(30, TimeUnit.SECONDS);\n\tif (task == null) {\n\t\treturn;\n\t}\n\tString taskType = (String) task.get(PARAM_TASK_TYPE);\n\tif (TASK_PLAIN_TEXT_MESSAGE.equals(taskType)) {\n\t\tString toNumber = (String) task.get(PARAM_RECIEVER_NUMBER);\n\t\tString fromWho = (String) task.get(PARAM_FROM_WHO);\n\t\tString template = (String) task.get(PARAM_MESSAGE_TEMPLATE);\n\t\tMap<String, String> parameters = (Map<String, String>) task.get(PARAM_MESSAGE_DATA);\n\n\t\ttry {\n\t\t\tsendPlainTextMessage(toNumber, fromWho, template, parameters);\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"Error sending message to \" + toNumber + \" from \" + fromWho + \": \" + e.getMessage(), e);\n\t\t}\n\t}\n}", "CodeBleu_score": 61.852330661270784}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tHttpGet httpget = new HttpGet(uri);\n\tCloseableHttpResponse response = null;\n\ttry {\n\t\tresponse = getHttpClient().execute(httpget);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString content = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n\t\tSystem.out.println(\\\"HTTP GET request to \\\" + uri + \\\" returned content: \\\" + content);\n\t\treturn content;\n\t} finally {\n\t\tif (response!= null) {\n\t\t\tresponse.close();\n\t\t}\n\t}\n}", "CodeBleu_score": 62.59766204408449}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tHttpGet httpget = new HttpGet(uri);\n\tCloseableHttpResponse response = getHttpClient().execute(httpget);\n\ttry {\n\t\tHttpEntity entity = response.getEntity();\n\t\tString content = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n\t\tSystem.out.println(\\\"Response content: \\\" + content);\n\t\treturn content;\n\t} finally {\n\t\tresponse.close();\n\t}\n}", "CodeBleu_score": 63.15885214270938}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpResponse response = null;\ntry {\nHttpGet httpget = new HttpGet(uri);\nresponse = getHttpClient().execute(httpget);\nHttpEntity entity = response.getEntity();\nString content = EntityUtils.toString(entity, StandardCharsets.UTF_8);\nSystem.out.println(\\\"response content:\\\" + content);\nreturn content;\n} catch (Exception e) {\ne.printStackTrace();\n} finally {\ntry {\nif (response!= null) {\nresponse.close();\n}\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\nreturn null;\n}", "CodeBleu_score": 61.18784627953716}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tMap<String, Object> map = new HashMap<String, Object>();\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument doc = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n\tNodeList childNodes = doc.getChildNodes();\n\tfor (int i = 0; i < childNodes.getLength(); i++) {\n\t\tNode childNode = childNodes.item(i);\n\t\tif (childNode.getNodeType() == Node.ELEMENT_NODE) {\n\t\t\tString key = childNode.getNodeName();\n\t\t\tif (StringUtils.isNotBlank(key)) {\n\t\t\t\tif (doTrim) {\n\t\t\t\t\tkey = key.trim();\n\t\t\t\t}\n\t\t\t\tif (map.containsKey(key)) {\n\t\t\t\t\tObject value = map.get(key);\n\t\t\t\t\tif (value instanceof List) {\n\t\t\t\t\t\tList<Object> list = (List<Object>) value;\n\t\t\t\t\t\tlist.add(decodeChildNode(childNode, doTrim));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tList<Object> list = new LinkedList<Object>();\n\t\t\t\t\t\tlist.add(value);\n\t\t\t\t\t\tlist.add(decodeChildNode(childNode, doTrim));\n\t\t\t\t\t\tmap.put(key, list);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tmap.put(key, decodeChildNode(childNode, doTrim));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn map;\n}", "CodeBleu_score": 49.83468764982661}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument doc = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n\tdoc.getDocumentElement().normalize();\n\tNodeList nodeList = doc.getDocumentElement().getChildNodes();\n\tMap<String, Object> map = new HashMap<>();\n\tfor (int i = 0; i < nodeList.getLength(); i++) {\n\t\tNode node = nodeList.item(i);\n\t\tif (node.getNodeType() == Node.ELEMENT_NODE) {\n\t\t\tString key = node.getNodeName();\n\t\t\tif (doTrim) {\n\t\t\t\tkey = key.trim();\n\t\t\t}\n\t\t\tif (node.hasChildNodes()) {\n\t\t\t\tString value = decodeToString(node, doTrim);\n\t\t\t\tif (value!= null) {\n\t\t\t\t\tmap.put(key, value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmap.put(key, decodeToList(node, doTrim));\n\t\t\t}\n\t\t}\n\t}\n\treturn map;\n}", "CodeBleu_score": 56.20901371006415}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tMap<String, Object> map = new HashMap<>();\n\tDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder db = dbf.newDocumentBuilder();\n\tDocument doc = db.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n\tNodeList nodes = doc.getDocumentElement().getChildNodes();\n\tfor (int i = 0; i < nodes.getLength(); i++) {\n\t\tNode node = nodes.item(i);\n\t\tString key = node.getNodeName();\n\t\tif (TEXT.equals(key)) {\n\t\t\tmap.put(key, node.getTextContent());\n\t\t} else {\n\t\t\tmap.put(key, decodeNodeToMap(node, doTrim));\n\t\t}\n\t}\n\treturn map;\n}", "CodeBleu_score": 47.922944467431094}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tif (isEligibleForAutoProcess(orderRecord)) {\n\t\tlogAutoProcess(orderRecord, \\\"Auto-processing order #\\\" + orderRecord.getDocumentNo());\n\t\tcompleteShipAndInvoiceEnqueuer.enqueue(orderRecord.get_TrxName(), orderRecord.get_ID());\n\t} else {\n\t\tlogAutoProcess(orderRecord, \\\"Auto-processing order #\\\" + orderRecord.getDocumentNo() + \\\" skipped. The order is not eligible for auto-processing.\\\");\n\t\tcreateMissingShipmentSchedules(orderRecord);\n\t}\n}", "CodeBleu_score": 17.465229757029654}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tif (orderRecord.isSOTrx()) {\n\t\tif (isAutoProcessEligible(orderRecord)) {\n\t\t\tlogAutoProcess(orderRecord);\n\t\t\tcompleteShipAndInvoiceEnqueuer.enqueue(orderRecord.get_TrxName(), orderRecord.get_ID());\n\t\t} else {\n\t\t\tlogAutoProcess(orderRecord);\n\t\t\tscheduleCreateMissingShipmentSchedules(orderRecord);\n\t\t}\n\t}\n}", "CodeBleu_score": 18.427980631840867}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tif (orderRecord.isSOTrx()) {\n\t\tif (isAutoProcessEligible(orderRecord)) {\n\t\t\tlogger.info(\\\"{} is auto-processing eligible\\\", orderRecord);\n\t\t\tasyncBatchObserver.enqueue(new AsyncBatchId(orderRecord.get_TrxName(), CreateMissingShipmentSchedulesWorkpackageProcessor.class));\n\t\t} else {\n\t\t\tlogger.info(\\\"{} is not auto-processing eligible, creating missing shipment schedules\\\", orderRecord);\n\t\t\tcompleteShipAndInvoiceEnqueuer.enqueue(orderRecord);\n\t\t}\n\t}\n}", "CodeBleu_score": 27.176766865592448}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\tser = User::where('email', $request->email)->first();\nif (! $user ||! $user->hasValidPassword($request->password)) {\nevent(new Failed($request));\nthrow ValidationException::withMessages([\n'email' => ['The provided credentials are incorrect.'],\n]);\n}\nreturn $user;\n}", "CodeBleu_score": 37.03646305548367}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t", "CodeBleu_score": 7.08955223880597}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\tuser = User::where('email', $request->email)->first();\n\n\tif (! $user ||! $user->hasVerifiedEmail()) {\n\t\treturn null;\n\t}\n\n\tif (! $user->validatePassword($request->password)) {\n\t\tevent(new Failed($user, 'password'));\n\n\t\tthrow ValidationException::withMessages([\n\t\t\t'email' => ['The provided credentials are incorrect.'],\n\t\t]);\n\t}\n\n\treturn $user;\n}", "CodeBleu_score": 33.283666028213226}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\tow ValidationException::withMessages([\n'email' => [trans('auth.failed')],\n]);\n}", "CodeBleu_score": 40.13566033799584}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\tis->limiter->hit($request);\n\nthrow ValidationException::withMessages([\n'email' => [__('auth.failed')],\n]);\n}", "CodeBleu_score": 69.628229370933}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\tis->limiter->hit($request);\nthrow ValidationException::withMessages([\n'email' => [trans('auth.failed')],\n]);\n}", "CodeBleu_score": 79.14699993324403}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t$user = User::find($request->session()->get('auth.id'));\n\nif ($user) {\n$assertion = Webauthn::prepareAssertion($user);\n\nreturn Inertia::render('TwoFactorChallenge', [\n'twoFactorEnabled' => $user->two_factor_enabled,'rememberMe' => $request->session()->get('auth.remember'),\n'publicKey' => $assertion->publicKey, 'challenge' => $assertion->challenge, ]);\n}\n\nreturn Inertia::render('TwoFactorChallenge', [\n'twoFactorEnabled' => false,\n'rememberMe' => $request->session()->get('auth.remember'), ]); }", "CodeBleu_score": 43.226709655909886}, {"code": "<?\npublic function toResponse($request){\n\t$user = User::find($request->session()->get('user_id'));\nif ($user) {\n$assertion = Webauthn::prepareAssertion($user);\n$data = [\n'enabled' => $user->two_factor_enabled,'remember' => $request->session()->has('remember'),\n'publicKey' => $assertion->publicKey, 'challenge' => $assertion->challenge, 'rp' => [\n'name' => config('app.name'),\n'id' => config('app.url'),\n],\n];\nreturn Inertia::render('TwoFactorChallenge', $data);\n}\nreturn Inertia::render('TwoFactorChallenge');\n}", "CodeBleu_score": 47.10370230260459}, {"code": "<?\npublic function toResponse($request){\n\t$user = User::find($request->session()->get('auth.id'));\nif (is_null($user)) {\nreturn Inertia::render('TwoFactorChallenge', [\n'twoFactorEnabled' => false,\n'remember' => $request->session()->get('auth.remember'), ]); }$assertion = Webauthn::getAssertion($user); return Inertia::render('TwoFactorChallenge', [ 'twoFactorEnabled' => true,'remember' =>$request->session()->get('auth.remember'),\n'publicKey' => $assertion->publicKey, ]); }", "CodeBleu_score": 42.42257099352897}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\tuser = User::where('email', $socialite->getEmail())->first();\n\nif (is_null($user)) {\n$user = $this->createUser($request, $socialite, $driver);\n} else {\n$user->socialite_tokens()->updateOrCreate([\n'driver' => $driver,\n'user_id' => $user->id,\n], [\n'user_id' => $user->id,\n'access_token' => $socialite->token,\n'refresh_token' => $socialite->refreshToken,\n'expires_at' => $socialite->expiresIn? now()->addSeconds($socialite->expiresIn) : null,\n]);\n}\n\nreturn $user;\n}", "CodeBleu_score": 39.57251820065305}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\tuser = User::where('email', $socialite->getEmail())->first();\n\nif (! $user) {\n$user = User::create([\n'name' => $socialite->getName(),\n'email' => $socialite->getEmail(),\n'email_verified_at' => now(),\n'password' => (Str::random(8)),\n]);\n}\n\n$user->socialiteTokens()->updateOrCreate([\n'driver' => $driver,\n'user_id' => $user->id,\n], [\n'socialite_id' => $socialite->getId(),\n]);\n\nreturn $user;\n}", "CodeBleu_score": 35.49123032976358}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\tuser = User::where('email', $socialite->getEmail())->first();\n\nif (is_null($user)) {\n$user = User::create([\n'name' => $socialite->getName(), 'email' => $socialite->getEmail(), 'email_verified_at' => now(), 'password' => (Str::(8)), ]); }$token = UserToken::where('driver', $driver)->where('user_id', $user->id)->where('socialite_id', $socialite->getId())->first();\n\nif (is_null($token)) {\n$token = UserToken::create([ 'driver' => $driver, 'user_id' => $user->id,'socialite_id' => $socialite->getId(), ]); }$user->tokens()->syncWithoutDetaching($token->id); return $user; }", "CodeBleu_score": 43.98593062876676}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $this->guard->user();\nif (!$user instanceof Authenticatable) {\nreturn false;\n}\n\n$challenge = $this->filterCredentials($request);\n$response = $request->input('response');\n\n$result = WebauthnFacade::validateAssertion(\n$user,\n$challenge,\n$response,\n);\n\nif ($result instanceof Failed) {\n$this->triggerFailedAuthenticationEvent($user, $result);\nthrow new AuthenticationException('The provided WebAuthn assertion is invalid.');\n}\n\nreturn true;\n}", "CodeBleu_score": 52.87144282745388}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $this->guard->user();\nif ($user === null) {\nreturn false;\n}\n$challenge = $request->challenge;\nif ($challenge === null) {\nreturn false;\n}\n$validated = WebauthnFacade::validateAssertion($challenge, $user);\nif (!$validated) {\n$this->throwFailedAuthenticationException($request);\nreturn false;\n}\nreturn true;\n}", "CodeBleu_score": 61.003795411594844}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $this->guard->user();\nif (!$user instanceof Authenticatable) {\nreturn false;\n}\n\n$credentials = $this->filterCredentials($request);\n\ntry {\n$response = WebauthnFacade::validateAssertion($credentials, $user);\n} catch (ValidationException $e) {\n$this->throwFailedAuthenticationException($request);\nreturn false;\n}\n\nreturn true;\n}", "CodeBleu_score": 54.9833548467325}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\tmail = $this->option('email')) {\n$this->error('Email is required');\nreturn null;\n}\ntry {\nreturn User::where('email', $email)->firstOrFail();\n} catch (ModelNotFoundException $e) {\n$this->error('User not found');\nreturn null;\n}\n}", "CodeBleu_score": 43.217824903136915}, {"code": "<?\nprivate function user(): ?User{\n\teturn User::where('email', $this->option('email'))->first();\n}", "CodeBleu_score": 13.910928288141722}, {"code": "<?\nprivate function user(): ?User{\n\teturn User::where('email', $this->option('email'))->first();\n}", "CodeBleu_score": 13.910928288141722}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\tonfig('scout.driver') ==='meilisearch' && $this->option('flush')) {\n$this->artisan('\u2610 Flushing Meilisearch indexes','scout:flush', ['--verbose' => true]); } }", "CodeBleu_score": 20.376137192329217}, {"code": "<?\nprotected function scoutFlush(): void{\n\tonfig('scout.driver') ==='meilisearch' && $this->option('flush')) {\n$this->artisan('\u2610 Flushing indexes on Meilisearch','scout:flush', ['--verbose' => true]); } }", "CodeBleu_score": 20.544157017588567}, {"code": "<?\nprotected function scoutFlush(): void{\n\tonfig('scout.driver') ==='meilisearch' && $this->option('flush')) {\n$this->info('\u2610 Flushing indexes on Meilisearch');\n$settings = config('scout.meilisearch.settings');\nforeach ($settings as $index => $setting) {\n$table = $setting['primaryKey'];\n$this->artisan('\u2610 Flushing index on Meilisearch','scout:flush', ['--model' => $table, '--verbose' => true]);\n}\n$this->info('\u2705 Indexes flushed on Meilisearch');\n}\n}", "CodeBleu_score": 50.136775866205795}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t = null;\n\ntry {\n$vcard = Reader::read($resource->vcard);\n} catch (ParseException $e) {\n$vcard = new VCard();\n}\n\n$vcard->add('UID', $vcard->UID?? uniqid());\n\nforeach (ExportVCardResource::getExporters() as $exporter) {\n$exporter->export($vcard, $resource);\n}\n\nreturn $vcard;\n}", "CodeBleu_score": 25.914675565140488}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t = null;\n\ntry {\n$vcard = Reader::read($resource->vcard);\n} catch (ParseException $e) {\n$vcard = new VCard();\n}\n\n$vcard->add('UID', $vcard->UID?? $this->generateUid($resource));\n\nforeach ($this->exporters as $exporter) {\n$exporter->export($vcard, $resource);\n}\n\nreturn $vcard;\n}", "CodeBleu_score": 26.88221324872022}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t = new VCard();\n\nif ($resource->exists) {\n$vcard = Reader::read($resource->vcard);\n\nif (!isset($vcard->UID)) {\n$vcard->UID = $this->generateUID();\n}\n\n} else {\n$vcard->add('N', [$resource->name, $resource->surname]);\n$vcard->add('FN', $resource->name.''. $resource->surname);\n$vcard->add('EMAIL', $resource->email);\n$vcard->add('TEL', $resource->phone);\n$vcard->add('TITLE', $resource->title);\n$vcard->add('ORG', $resource->company);\n$vcard->add('URL', $resource->website);\n$vcard->add('NOTE', $resource->note);\n$vcard->add('REV', $resource->updated_at->format(DATE_ATOM));\n$vcard->add('UID', $this->generateUID());\n}\n\nforeach (self::getExporters() as $exporter) {\n$exporter->export($resource, $vcard);\n}\n\nreturn $vcard;\n}", "CodeBleu_score": 35.0298135786347}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$vault = $this->user->vaults()\n->wherePivot('permission', '<=', Vault::PERMISSION_EDIT)\n->findOrFail($addressBookId);\n\n$object = $this->getObject($addressBookId, $cardUri);\n\nif ($object === null) {\nreturn false;\n}\n\nif ($object instanceof Contact) {\n$job = new DestroyContact([\n'account_id' => $this->user->account_id, 'author_id' => $this->user->id,\n'vault_id' => $vault->id,\n'uuid' => $object->uuid,\n]);\n\nBus::batch([$job])\n->allowFailures()\n->onQueue('high')\n->dispatch();\n}\n\nif ($object instanceof Group) {\n$job = new DestroyGroup([\n'account_id' => $this->user->account_id, 'author_id' => $this->user->id,\n'vault_id' => $vault->id,\n'uuid' => $object->uuid,\n]);\n\nBus::batch([$job])\n->allowFailures()\n->onQueue('high')\n->dispatch();\n}\n\nreturn true;\n}", "CodeBleu_score": 58.02712662864704}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$vault = $this->user->vaults()->wherePivot('permission', '<=', Vault::PERMISSION_EDIT)->findOrFail($addressBookId);\n\n$job = new DeleteVCard([\n'account_id' => $this->user->account_id, 'author_id' => $this->user->id,\n'vault_id' => $vault->id,\n'uri' => $cardUri,\n]);\n\nBus::batch([$job])->allowFailures()->onQueue('high')->dispatch();\n\nreturn false;\n}", "CodeBleu_score": 37.61025045258333}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$vault = $this->user->vaults()\n->wherePivot('permission', '<=', Vault::PERMISSION_EDIT)\n->findOrFail($addressBookId);\n\n$job = new DestroyVCard([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $vault->id,\n'uri' => $cardUri,\n]);\n\nBus::batch([$job])\n->allowFailures()\n->onQueue('high')\n->dispatch();\n\nreturn false;\n}", "CodeBleu_score": 37.77750163251981}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\tif (! $request->hasFile('file')) {\nreturn;\n}\n\n$activity = $this->activityRepository->create([\n'user_id' => Auth::id(),\n'lead_id' => $data['lead_id'],\n'activity_type' => $data['activity_type'],\n'activity_subtype' => $data['activity_subtype'],\n'activity_status' => $data['activity_status'],\n'activity_description' => $data['activity_description'],\n'activity_date' => $data['activity_date'],\n'activity_time' => $data['activity_time'],\n'activity_duration' => $data['activity_duration'],\n'activity_location' => $data['activity_location'],\n'activity_notes' => $data['activity_notes'],\n'activity_file' => $request->file('file')->store('activity'),\n'activity_file_name' => $request->file('file')->getClientOriginalName(),\n'activity_file_size' => $request->file('file')->getSize(),\n'activity_file_type' => $request->file('file')->getMimeType(),\n]);\n\nreturn $activity;\n}", "CodeBleu_score": 43.73240488796411}, {"code": "<?\npublic function upload(array $data){\n\t\nif (! $file = request()->file('file')) {\nreturn;\n}\n\n$activity = $this->activityRepository->create([\n'user_id' => auth()->id(),\n'type' => 'file',\n'action' => 'created',\n'data' => $data,\n]);\n\n$file->storeAs('public/files', $activity->id. '.'. $file->getClientOriginalExtension());\n\nreturn $this->create([\n'name' => $file->getClientOriginalName(),\n'storage_path' => $activity->id. '.'. $file->getClientOriginalExtension(),\n'activity_id' => $activity->id,\n]);\n}", "CodeBleu_score": 49.56545288893342}, {"code": "<?\npublic function upload(array $data){\n\t\nif (empty($data['file'])) {\nreturn;\n}\n\n$activity = $this->activityRepository->create([\n'user_id' => auth()->id(),\n'lead_id' => $data['lead_id'],\n'activity_type' => 'lead.file.uploaded',\n'activity_data' => [\n'file_name' => $data['file']->getClientOriginalName(),\n'storage_path' => $data['file']->store('leads', 'public'),\n],\n]);\n\nreturn $activity->fresh(); }", "CodeBleu_score": 46.76296068049034}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t$request = app('request');\n$route = $request->route();\n$routeName = $route->getName();\n$routeNameArray = explode('.', $routeName);\n$routeNameArrayLength = count($routeNameArray);\n$routeName = $routeNameArray[$routeNameArrayLength - 1];\nif ($exception instanceof ModelNotFoundException) {\nif ($request->expectsJson()) {\nreturn response()->json(['message' => $this->jsonErrorMessages[404]], 404);\n}\n\nreturn redirect()->route('admin.dashboard.index');\n} elseif ($exception instanceof PDOException) {\nif ($request->expectsJson()) {\nreturn response()->json(['message' => $this->jsonErrorMessages[500]], 500);\n}\n\nreturn redirect()->route('admin.dashboard.index');\n} elseif ($exception instanceof HttpException) {\nif ($request->expectsJson()) {\nreturn response()->json(['message' => $this->jsonErrorMessages[404]], 404);\n}\n\nreturn redirect()->route('admin.dashboard.index');\n}\n\nreturn parent::render($request, $exception);\n}", "CodeBleu_score": 44.60468177886502}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\tif ($exception instanceof ModelNotFoundException) {\nreturn response()->json([\n'message' => $this->jsonErrorMessages['404']\n], 404);\n}\n\nif ($exception instanceof PDOException) {\nreturn response()->json([\n'message' => $this->jsonErrorMessages['500']\n], 500);\n}\n\nif ($exception instanceof ParseError) {\nreturn response()->json([\n'message' => $this->jsonErrorMessages['500']\n], 500);\n}\n\nif ($exception instanceof HttpException) {\nreturn response()->json([\n'message' => $this->jsonErrorMessages['500']\n], $exception->getStatusCode());\n}\n\nif ($exception instanceof AuthenticationException) {\nreturn redirect()->guest(route('customer.session.index'));\n}\n\nreturn parent::render($request, $exception);\n}", "CodeBleu_score": 37.14302711028725}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\tif ($exception instanceof ModelNotFoundException) {\n$response = [\n'message' => $this->jsonErrorMessages['404']\n];\n$statusCode = 404;\n} elseif ($exception instanceof PDOException) {\n$response = [\n'message' => $this->jsonErrorMessages['500']\n];\n$statusCode = 500;\n} elseif ($exception instanceof ParseError) {\n$response = [\n'message' => $this->jsonErrorMessages['500']\n];\n$statusCode = 500;\n} elseif ($exception instanceof HttpException) {\n$statusCode = $exception->getStatusCode();\n} else {\n$statusCode = 500;\n}\n\nif ($request->expectsJson()) {\nreturn response()->json($response, $statusCode);\n}\n\nif ($request->route()->getPrefix() == 'admin') {\nreturn redirect()->route('admin.session.index');\n}\n\nreturn redirect()->route('customer.session.index');\n}", "CodeBleu_score": 45.0225632144936}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\t (request()->expectsJson()) {\nreturn response()->json(['message' => $this->jsonErrorMessages[$statusCode]], $statusCode);\n}\n\nreturn view(\"{$path}::errors.{$statusCode}\");\n}", "CodeBleu_score": 40.94732815532722}, {"code": "<?\nprivate function response($path, $statusCode){\n\t (request()->expectsJson()) {\nreturn response()->json(['message' => $this->jsonErrorMessages[$statusCode]], $statusCode);\n}\n\nreturn view(\"{$path}::errors.{$statusCode}\");\n}", "CodeBleu_score": 40.94732815532722}, {"code": "<?\nprivate function response($path, $statusCode){\n\t (request()->expectsJson()) {\nreturn response()->json(['message' => $this->jsonErrorMessages[$statusCode]], $statusCode);\n}\n\nreturn view('errors.'. $path. '.'. $statusCode);\n}", "CodeBleu_score": 48.303597838740764}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t('activity.mass-update.before');\n\n$updatedActivities = 0;\n\nif (request()->has('ids')) {\n$activities = $this->activityRepository->findMany(request()->get('ids'));\n\nforeach ($activities as $activity) {\n$this->activityRepository->update([\n'is_done' => request('is_done')\n], $activity->id);\n\n$updatedActivities++;\n}\n}\n\nEvent::dispatch('activity.mass-update.after');\n\nreturn response()->json([\n'updated' => $updatedActivities,\n]);\n}", "CodeBleu_score": 40.33482226656819}, {"code": "<?\npublic function massUpdate(){\n\t$this->activityRepository->findWhereIn('id', request('ids'));\n\n$updatedActivities = 0;\n\nforeach ($activities as $activity) {\n\nEvent::dispatch('activity.update.before', $activity->id);\n\n$activity->update(['is_done' => request('is_done')]);\n\nEvent::dispatch('activity.update.after', $activity);\n\n$updatedActivities++;\n}\n\nif ($updatedActivities) {\n\nreturn response()->json([\n\n'message' => trans('admin::app.activities.mass-update-success'),\n\n]);\n} else {\n\nreturn response()->json([\n\n'message' => trans('admin::app.activities.mass-update-error'),\n\n]);\n}\n}", "CodeBleu_score": 45.24366310593385}, {"code": "<?\npublic function massUpdate(){\n\te(request(), [\n    'ids' =>'required',\n]);\n\n$count = 0;\n\nforeach (request('ids') as $id) {\n\nEvent::dispatch('activity.update.before', $id);\n\n$activity = $this->activityRepository->update(array_merge(request()->all(), [\n    'is_done' => request('is_done'),\n]), $id);\n\nEvent::dispatch('activity.update.after', $activity);\n\n$count++;\n}\n\nreturn response()->json([\n'success' => $count > 0,\n'message' => trans('admin::app.activities.update-success', ['type' => trans('admin::app.activities.'. $activity->type)])\n]);\n}", "CodeBleu_score": 54.280252317519015}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t$count = 0;\n\n$data = request()->all();\n\nforeach (request('rows') as $activityId) {\nEvent::dispatch('activity.delete.before', $activityId);\n\n$this->activityRepository->delete($activityId);\n\nEvent::dispatch('activity.delete.after', $activityId);\n\n$count++;\n}\n\nif (! $count) {\nreturn response()->json([\n'message' => trans('admin::app.activities.mass-destroy-failed'),\n], 400);\n}\n\nreturn response()->json([\n'message' => trans('admin::app.activities.mass-destroy-success'),\n]);\n}", "CodeBleu_score": 51.06510150272179}, {"code": "<?\n public function massDestroy(){\n\t $count = 0;\n\n $data = request()->all();\n\n foreach (request('rows') as $activityId) {\n Event::dispatch('activity.delete.before', $activityId);\n\n $this->activityRepository->delete($activityId);\n\n Event::dispatch('activity.delete.after', $activityId);\n\n $count++;\n }\n\n if (! $count) {\n return response()->json([\n'message' => trans('admin::app.activities.mass-destroy-failed'),\n ], 400);\n }\n\n return response()->json([\n'message' => trans('admin::app.activities.mass-destroy-success'),\n ]);\n }", "CodeBleu_score": 51.155962375039344}, {"code": "<?\n public function massDestroy(){\n\t $count = 0;\n\n $data = request()->all();\n\n foreach (request('rows') as $activityId) {\n Event::dispatch('activity.delete.before', $activityId);\n\n $activity = $this->activityRepository->delete($activityId);\n\n Event::dispatch('activity.delete.after', $activityId);\n\n $count++;\n }\n\n if (! $count) {\n return response()->json([\n'message' => trans('admin::app.activities.mass-destroy-failed'),\n ], 400);\n }\n\n return response()->json([\n'message' => trans('admin::app.activities.mass-destroy-success'),\n ]);\n }", "CodeBleu_score": 47.954745234889074}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\trds = $this->dashboardHelper->getCards();\n $cardIds = request()->get('card_ids');\n\n foreach ($cards as $key => $card) {\n if (in_array($card['id'], $cardIds)) {\n $cards[$key]['selected'] = true;\n } else {\n $cards[$key]['selected'] = false;\n }\n }\n\n return response()->json($cards);\n }", "CodeBleu_score": 36.33932126906289}, {"code": "<?\n public function updateCards(){\n\tds = $this->dashboardHelper->getCards();\n\nforeach ($cards as $key => $card) {\n $cards[$key]['selected'] = false;\n\n if (request()->has($card['name'])) {\n $cards[$key]['selected'] = true;\n }\n}\n\nreturn response()->json($cards);\n}", "CodeBleu_score": 28.800330101061327}, {"code": "<?\n public function updateCards(){\n\tds = $this->dashboardHelper->getCards();\n\nforeach ($cards as $key => $card) {\n$cards[$key]['selected'] = false;\n\nif (in_array($card['id'], request('selected_cards'))) {\n$cards[$key]['selected'] = true;\n}\n}\n\nreturn response()->json($cards);\n}", "CodeBleu_score": 28.587471398299826}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t$request = request();\n\n$data = $request->all();\n\nif (isset($data['code'])) {\n$data['code'] = trim($data['code']);\n}\n\nEvent::dispatch('core.config.before-save', $data);\n\n$this->configurationRepository->create($data);\n\nEvent::dispatch('core.config.after-save', $data);\n\n$request->session()->flash('success', trans('admin::app.configuration.flash-messages.success.create'));\n\nreturn redirect()->back();\n}", "CodeBleu_score": 34.86064963751565}, {"code": "<?\npublic function store(){\n\t$request = request();\n\nEvent::dispatch('admin.configuration.before.save', $request);\n\n$this->configurationRepository->create($request->all());\n\nEvent::dispatch('admin.configuration.after.save', $request);\n\n$request->session()->flash('success', trans('admin::app.configuration.flash.success'));\n\nreturn redirect()->back();\n}", "CodeBleu_score": 38.19126843167184}, {"code": "<?\npublic function store(){\n\t\n$request = request();\n\n$code = app(Code::class);\n\n$data = $request->all();\n\n$slug = $request->route('slug');\n\n$key = $request->route('key');\n\n$data['key'] = $key;\n\n$data['slug'] = $slug;\n\n$data['value'] = $code->get($request->value);\n\n$this->configurationRepository->create($data);\n\nEvent::dispatch('core.config.saved', $data);\n\nflash()->success(__('admin::app.configuration.flash.success'));\n\nreturn redirect()->back();\n\n}", "CodeBleu_score": 30.690584098731712}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t$path = request()->path;\n$fileName = request()->name;\n\n$configuration = $this->configurationRepository->findByField('key', $fileName);\n\nreturn Storage::download($path, $configuration->value);\n}", "CodeBleu_score": 44.25712508623138}, {"code": "<?\npublic function download(){\n\t\n$path = request()->get('path');\n\n$filename = request()->get('filename');\n\n$file = $this->configurationRepository->findWhereFirst(['key' => $path])->value;\n\n$path = Storage::disk('local')->path($file);\n\nreturn response()->download($path, $filename);\n\n}", "CodeBleu_score": 43.82122528659059}, {"code": "<?\npublic function download(){\n\t", "CodeBleu_score": 1.2195121951219512}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tt<AdminModelSort> adminModelSortList = new ArrayList<>();\nfor (String model : list) {\nAdminModelSort adminModelSort = new AdminModelSort();\nadminModelSort.setModel(model);\nadminModelSort.setType(1);\nadminModelSort.setUserId(UserUtil.getUserId());\nadminModelSortList.add(adminModelSort);\n}\nadminModelSortService.lambdaUpdate().eq(AdminModelSort::getUserId, UserUtil.getUserId()).remove();\nadminModelSortService.saveBatch(adminModelSortList);\nreturn Result.ok();\n}", "CodeBleu_score": 44.807005245764785}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tt<AdminModelSort> adminModelSortList = new ArrayList<>();\nfor (String model : list) {\nAdminModelSort adminModelSort = new AdminModelSort();\nadminModelSort.setModel(model);\nadminModelSort.setType(1);\nadminModelSort.setUserId(UserUtil.getUserId());\nadminModelSortList.add(adminModelSort);\n}\nadminModelSortService.lambdaUpdate().in(AdminModelSort::getModel, list).eq(AdminModelSort::getUserId, UserUtil.getUserId()).remove();\nadminModelSortService.saveBatch(adminModelSortList);\nreturn Result.ok();\n}", "CodeBleu_score": 46.20108346349632}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tt<AdminModelSort> adminModelSortList = new ArrayList<>();\nfor (String model : list) {\nAdminModelSort adminModelSort = new AdminModelSort();\nadminModelSort.setModel(model);\nadminModelSort.setType(1);\nadminModelSort.setUserId(UserUtil.getUserId());\nadminModelSortList.add(adminModelSort);\n}\nadminModelSortService.removeByUserIdAndType(UserUtil.getUserId(), 1);\nadminModelSortService.saveBatch(adminModelSortList);\nreturn Result.ok();\n}", "CodeBleu_score": 42.59029166908118}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t Get the current admin configuration\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getId());\n\tif (adminConfig.getCompanyId().equals(AdminConst.CRM_COMPANY_ID)) {\n\t\treturn R.error(AdminCodeEnum.MODULE_SETTING_CRM_ERROR);\n\t}\n\t// Update the status of the admin configuration\n\tadminConfig.setModuleStatus(moduleSetting.getModuleStatus());\n\tadminConfigService.updateById(adminConfig);\n\t// Save the updated setting\n\tadminConfigService.saveOrUpdate(adminConfig);\n\treturn R.ok();\n}", "CodeBleu_score": 59.346415123730736}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t (moduleSetting.getId() == null) {\nreturn R.error(AdminCodeEnum.MODULE_SETTING_ID_IS_NULL);\n}\n\nAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getId());\nif (adminConfig == null) {\nreturn R.error(AdminCodeEnum.MODULE_SETTING_NOT_EXIST);\n}\n\nif (AdminModuleEnum.CRM.getValue().equals(adminConfig.getModule())) {\nreturn R.error(AdminCodeEnum.MODULE_SETTING_CRM_IS_NOT_ALLOWED);\n}\n\nadminConfig.setIsHidden(moduleSetting.getIsHidden());\nadminConfig.setIsShow(moduleSetting.getIsShow());\nadminConfig.setSort(moduleSetting.getSort());\nadminConfig.setUpdateTime(new Date());\nadminConfigService.updateById(adminConfig);\n\nreturn R.ok();\n}", "CodeBleu_score": 59.93862802745718}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tminConfig adminConfig = adminConfigService.getById(moduleSetting.getId());\n\tif (AdminModuleEnum.CRM.getCode().equals(moduleSetting.getModule())) {\n\t\treturn R.error(AdminCodeEnum.MODULE_IS_CRM);\n\t}\n\tBeanUtil.copyProperties(moduleSetting, adminConfig);\n\tadminConfigService.updateById(adminConfig);\n\treturn R.ok();\n}", "CodeBleu_score": 58.50224903663275}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\tAdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(customKey);\nif (userConfig == null) {\nuserConfig = new AdminUserConfig();\nuserConfig.setKey(customKey).setValue(json.toJSONString()).setUserId(UserUtil.getUserId());\nadminUserConfigService.save(userConfig);\n} else {\nuserConfig.setValue(json.toJSONString());\nadminUserConfigService.updateById(userConfig);\n}\nreturn Result.ok();\n}", "CodeBleu_score": 66.18214518175517}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(customKey);\n if (userConfig == null) {\n userConfig = new AdminUserConfig();\n userConfig.setCustomKey(customKey);\n userConfig.setValue(json.toJSONString());\n adminUserConfigService.save(userConfig);\n } else {\n userConfig.setValue(json.toJSONString());\n adminUserConfigService.updateById(userConfig);\n }\n return Result.ok();\n }", "CodeBleu_score": 68.69273459227057}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(customKey);\n if (userConfig == null) {\n userConfig = new AdminUserConfig();\n userConfig.setCustomKey(customKey);\n userConfig.setValue(json.toJSONString());\n adminUserConfigService.save(userConfig);\n return R.ok();\n }\n userConfig.setValue(json.toJSONString());\n adminUserConfigService.updateById(userConfig);\n return R.ok();\n }", "CodeBleu_score": 67.18796702469847}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\tAdminUser adminUser = adminUserService.getById(userId);\nif (adminUser == null) {\nthrow new NoLoginException();\n}\nString deptName = deptService.getNameByDeptId(adminUser.getDeptId());\nadminUser.setDeptName(deptName);\nadminUser.setParentName(UserCacheUtil.getUserName(adminUser.getParentId()));\nadminUser.setPassword();\nadminUser.setSalt(null);\nreturn R.ok(adminUser);\n}", "CodeBleu_score": 48.30587399106708}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\tAdminUser adminUser = adminUserService.getById(userId);\nif (adminUser == null) {\nreturn R.error(AdminCodeEnum.ADMIN_USER_NOT_EXIST);\n}\nAdminUserVO adminUserVO = BeanUtil.copyProperties(adminUser, AdminUserVO.class);\nString deptName = deptService.getNameByDeptId(adminUser.getDeptId());\nadminUserVO.setDeptName(deptName);\nadminUserVO.setParentName(UserCacheUtil.getUserName(adminUser.getParentId()));\nadminUserVO.setPassword();\nadminUserVO.setSalt(null);\nreturn R.ok(adminUserVO);\n}", "CodeBleu_score": 52.57521733830919}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\tAdminUser adminUser = adminUserService.getById(userId);\nif (adminUser == null) {\nthrow new NoLoginException();\n}\nAdminUserVO adminUserVO = BeanUtil.copyProperties(adminUser, AdminUserVO.class);\nString deptName = deptService.getNameByDeptId(adminUser.getDeptId());\nadminUserVO.setDeptName(deptName);\nadminUserVO.setParentName(UserCacheUtil.getUserName(adminUser.getParentId()));\nadminUserVO.setPassword(null);\nadminUserVO.setSalt(null);\nreturn R.ok(adminUserVO);\n}", "CodeBleu_score": 52.28150557118625}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t String name = \"readNotice\";\n AdminUser user = adminUserService.getById(UserUtil.getUserId());\n if (user == null) {\n throw new NoLoginException();\n }\n AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(name);\n if (userConfig!= null) {\n userConfig.setStatus(1);\n adminUserConfigService.updateById(userConfig);\n } else {\n AdminUserConfig adminUserConfig = new AdminUserConfig();\n adminUserConfig.setUserId(user.getUserId());\n adminUserConfig.setName(name);\n adminUserConfig.setStatus(1);\n adminUserConfigService.save(adminUserConfig);\n }\n return R.ok();\n }", "CodeBleu_score": 44.37885073435781}, {"code": " public Result readNotice() {\n\t String name = \"readNotice\";\n AdminUser user = adminUserService.getById(UserUtil.getUserId());\n if (user == null) {\n throw new NoLoginException();\n }\n AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(name);\n if (userConfig!= null) {\n userConfig.setStatus(1);\n adminUserConfigService.updateById(userConfig);\n } else {\n AdminUserConfig userConfig1 = new AdminUserConfig();\n userConfig1.setUserId(user.getUserId());\n userConfig1.setName(name);\n userConfig1.setStatus(1);\n adminUserConfigService.save(userConfig1);\n }\n return R.ok();\n }", "CodeBleu_score": 39.84520707945008}, {"code": " public Result readNotice() {\n\t String name = \"readNotice\";\n AdminUser user = adminUserService.getById(UserUtil.getUserId());\n if (user == null) {\n throw new NoLoginException();\n }\n AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(name);\n if (userConfig!= null) {\n userConfig.setStatus(1);\n adminUserConfigService.updateById(userConfig);\n } else {\n AdminUserConfig adminUserConfig = new AdminUserConfig();\n adminUserConfig.setUserId(user.getUserId());\n adminUserConfig.setName(name);\n adminUserConfig.setStatus(1);\n adminUserConfigService.save(adminUserConfig);\n }\n return R.ok();\n }", "CodeBleu_score": 44.37885073435781}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\tAdminConfig adminConfig = queryConfigByName(AdminModuleEnum.COMPANY_INFO.getName());\nif (adminConfig == null) {\nadminConfig = new AdminConfig();\nadminConfig.setName(AdminModuleEnum.COMPANY_INFO.getName());\nadminConfig.setValue(JSON.toJSONString(adminCompanyBO));\nsave(adminConfig);\n} else {\nadminConfig.setValue(JSON.toJSONString(adminCompanyBO));\nupdateById(adminConfig);\n}\n}", "CodeBleu_score": 43.839219518576655}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t", "CodeBleu_score": 1.6537543811019455}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\nString companyInfo = \"companyInfo\";\nAdminConfig adminConfig = queryConfigListByName(companyInfo).get(0);\nif (adminConfig == null) {\nadminConfig = new AdminConfig();\nadminConfig.setName(companyInfo);\nadminConfig.setRemark(\"\u516c\u53f8\u4fe1\u606f\");\nadminConfig.setValue(JSON.toJSONString(adminCompanyBO));\nadminConfig.setModule(AdminModuleEnum.BASE.getCode());\nsave(adminConfig);\nreturn;\n}\nadminConfig.setValue(JSON.toJSONString(adminCompanyBO));\nupdateById(adminConfig);\n}", "CodeBleu_score": 57.597914520715456}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\tString companyKey = \"companyInfo\";\nAdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\" limit 1\").one();\nif (adminConfig == null) {\nadminConfig = new AdminConfig();\nadminConfig.setName(companyKey);\nadminConfig.setStatus(1);\nadminConfig.setDescription(\"\u4f01\u4e1aLOGO\u914d\u7f6e\");\n}\nreturn JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n}", "CodeBleu_score": 63.89312029038267}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\tString companyKey = \"companyInfo\";\nAdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\" limit 1\").one();\nif (adminConfig == null) {\nadminConfig = new AdminConfig();\nadminConfig.setName(companyKey);\nadminConfig.setStatus(1);\nadminConfig.setDescription(\"\u4f01\u4e1aLOGO\u914d\u7f6e\");\n}\nAdminCompanyBO adminCompanyBO = JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\nif (adminCompanyBO == null) {\nadminCompanyBO = new AdminCompanyBO();\n}\nreturn adminCompanyBO;\n}", "CodeBleu_score": 75.52428713260144}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\tString companyKey = \"companyInfo\";\nAdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\" limit 1\").one();\nif (adminConfig == null) {\nadminConfig = new AdminConfig();\nadminConfig.setName(companyKey);\nadminConfig.setStatus(1);\nadminConfig.setDescription(\"\u4f01\u4e1aLOGO\u914d\u7f6e\");\n}\nreturn JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n}", "CodeBleu_score": 63.89312029038267}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\tString logConfigName = \"logWelcomeSpeech\";\n List<AdminConfig> adminConfigList = stringList.stream().map(string -> {\n AdminConfig adminConfig = new AdminConfig();\n adminConfig.setName(logConfigName);\n adminConfig.setStatus(1);\n adminConfig.setDescription(\"\u65e5\u5fd7\u6b22\u8fce\u8bed\u914d\u7f6e\");\n adminConfig.setValue(string);\n return adminConfig;\n }).collect(Collectors.toList());\n //Remove existing configurations with the specified log configuration name\n lambdaUpdate().eq(AdminConfig::getName, logConfigName).remove();\n //Save the new list of configurations in batch\n saveBatch(adminConfigList);\n }", "CodeBleu_score": 40.57698981309077}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\tString logConfigName = \"logWelcomeSpeech\";\n List<AdminConfig> adminConfigList = stringList.stream().map(string -> {\n AdminConfig adminConfig = new AdminConfig();\n adminConfig.setName(logConfigName);\n adminConfig.setStatus(1);\n adminConfig.setDescription(\"\u65e5\u5fd7\u6b22\u8fce\u8bed\u914d\u7f6e\");\n adminConfig.setValue(string);\n return adminConfig;\n }).collect(Collectors.toList());\n removeLogWelcomeSpeech();\n saveBatch(adminConfigList);\n }", "CodeBleu_score": 40.124480072546035}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\ttring logConfigName = \"logWelcomeSpeech\";\nQueryWrapper<AdminConfig> queryWrapper = new QueryWrapper<>();\nqueryWrapper.eq(\\\"name\\\", logConfigName);\nremove(queryWrapper);\nList<AdminConfig> configList = new ArrayList<>();\nstringList.forEach(string -> {\nAdminConfig adminConfig = new AdminConfig();\nadminConfig.setName(logConfigName);\nadminConfig.setValue(string);\nadminConfig.setStatus(1);\nadminConfig.setDescription(\\\"\u6b22\u8fce\u8bed\u914d\u7f6e\\\");\nconfigList.add(adminConfig);\n});\nsaveBatch(configList);\n}", "CodeBleu_score": 56.67865263473239}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t//    String password = ();\n//    String salt = adminInitDataBO.getSalt();\n//    String username = adminInitDataBO.getUsername();\n//    String storedPassword = getPassword(username, salt);\n//    if (storedPassword == null) {\n//        throw new BusinessException(ResultCode.INVALID_PASSWORD);\n//    }\n//    if (!passwordEncoder.matches(password, storedPassword)) {\n//        throw new BusinessException(ResultCode.INVALID_PASSWORD);\n//    }\n//    String accessToken = UUID.randomUUID().toString();\n//    redisTemplate.opsForValue().set(accessToken, adminInitDataBO.getUserId(), 10, TimeUnit.MINUTES);\n//    return accessToken;\n//}", "CodeBleu_score": 1.4766140476740475}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString password = ();\n\tString username = adminInitDataBO.getUsername();\n\tString salt = adminInitDataBO.getSalt();\n\tString currentUserId = adminInitDataBO.getCurrentUserId();\n\tString currentUserName = adminInitDataBO.getCurrentUserName();\n\n\t// Retrieve the user details from the database\n\tAdminUser adminUser = adminUserService.getById(currentUserId);\n\tif (adminUser == null) {\n\t\tthrow new RuntimeException(\"Invalid user ID\");\n\t}\n\n\t// Check if the provided password matches the stored password\n\tString storedPassword = adminUser.getPassword();\n\tString storedSalt = adminUser.getSalt();\n\tString storedUsername = adminUser.getUsername();\n\tif (!Objects.equals(storedUsername, username) ||!Objects.equals(storedSalt, salt)) {\n\t\tthrow new RuntimeException(\"Invalid username or salt\");\n\t}\n\tString storedPasswordHash = PasswordUtil.hashPassword(password, storedSalt);\n\tif (!Objects.equals(storedPasswordHash, storedPassword)) {\n\t\tthrow new RuntimeException(\"Invalid password\");\n\t}\n\n\t// Generate a temporary access code\n\tString accessCode = UUID.randomUUID().toString();\n\tString accessCodeKey = \"accessCode:\" + currentUserId;\n\tredisService.set(accessCodeKey, accessCode, 600);\n\n\t// Return the access code\n\treturn accessCode;\n}", "CodeBleu_score": 36.14204122014341}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t//    String username = adminInitDataBO.getUsername();\n//    String password = ();\n//    AdminUser adminUser = adminUserService.queryUserByUsername(username);\n//    if (adminUser == null) {\n//        throw new BusinessException(AdminErrorCode.USER_NOT_EXIST);\n//    }\n//    String salt = adminUser.getSalt();\n//    String encryptedPassword = EncryptUtil.encrypt(password, salt);\n//    if (!encryptedPassword.equals(adminUser.getPassword())) {\n//        throw new BusinessException(AdminErrorCode.PASSWORD_ERROR);\n//    }\n//    String accessToken = UUID.randomUUID().toString().replaceAll(\\\"-\\\", \\\"\\\");\n//    String accessTokenKey = AdminConst.ACCESS_TOKEN_PREFIX + accessToken;\n//    String accessTokenValue = JSON.toJSONString(adminUser);\n//    redisTemplate.opsForValue().set(accessTokenKey, accessTokenValue, 10, TimeUnit.MINUTES);\n//    return accessToken;\n}", "CodeBleu_score": 1.5532064197863735}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\tString cacheName = AdminCacheKey.UNAUTHORIZED_URL_CACHE_KEY + UserUtil.getUserId();\nList<String> unauthorizedUrlList = BaseUtil.getRedis().get(cacheName);\nif (CollUtil.isNotEmpty(unauthorizedUrlList)) {\nif (unauthorizedUrlList.contains(INIT_AUTH_URL)) {\nreturn true;\n}\n}\nreturn false;\n}", "CodeBleu_score": 37.202362786811484}, {"code": "private boolean verifyInitAuth(){\n\tString initAuthUrl = INIT_AUTH_URL;\nLong userId = UserUtil.getUserId();\nString cacheName = AdminCacheKey.INIT_AUTH_CACHE_KEY + userId;\nString initAuthUrlStr = BaseUtil.getRedis().get(cacheName);\nif (StrUtil.isEmpty(initAuthUrlStr)) {\n// \u8d85\u65f6\u672a\u64cd\u4f5c\nthrow new CrmException(AdminCodeEnum.ADMIN_PASSWORD_EXPIRE_ERROR);\n}\nif (!initAuthUrlStr.equals(initAuthUrl)) {\nthrow new CrmException(AdminCodeEnum.ADMIN_PASSWORD_INVALID_ERROR);\n}\nreturn true;\n}", "CodeBleu_score": 46.11155304210629}, {"code": "private boolean verifyInitAuth(){\n\tString key = \\\"auth_url\\\";\nString value = BaseUtil.getRedis().get(key);\nif (StrUtil.isNotEmpty(value)) {\nString[] strs = value.split(\\\",\\\");\nList<String> list = Arrays.asList(strs);\nString requestUrl = StrUtil.removePrefix(request.getRequestURI(), \\\"/\\\");\nreturn!list.contains(requestUrl);\n}\nreturn false;\n}", "CodeBleu_score": 13.244321532573133}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\tList<AdminRoleMenu> list = new ArrayList<>();\nfor (Integer menuId : menuIdList) {\nAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\nadminRoleMenu.setRoleId(roleId);\nadminRoleMenu.setMenuId(menuId);\nlist.add(adminRoleMenu);\n}\nsaveBatch(list);\n}", "CodeBleu_score": 59.10904923569122}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\tList<AdminRoleMenu> list = new ArrayList<>();\nfor (Integer menuId : menuIdList) {\nAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\nadminRoleMenu.setRoleId(roleId);\nadminRoleMenu.setMenuId(menuId);\nlist.add(adminRoleMenu);\n}\nif (list.size() > 0) {\nthis.saveBatch(list);\n}\n}", "CodeBleu_score": 59.98995559364558}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\tList<AdminRoleMenu> roleMenuList = new ArrayList<>();\nif (menuIdList!= null && menuIdList.size() > 0) {\nfor (Integer menuId : menuIdList) {\nAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\nadminRoleMenu.setRoleId(roleId);\nadminRoleMenu.setMenuId(menuId);\nroleMenuList.add(adminRoleMenu);\n}\nsaveBatch(roleMenuList);\n}\n}", "CodeBleu_score": 62.19509760516365}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\tadminThreadPoolExecutor.execute(() -> {\ntry {\nString indexAliases = getIndexAliases(SYS_LOG_TYPE);\nString index = restHighLevelClient.indices().exists(new GetIndexRequest(indexAliases), RequestOptions.DEFAULT).get().isExists()? indexAliases : createIndex(indexAliases, SYS_LOG_INDEX_SOURCE);\nMap<String, Object> source = BeanUtil.beanToMap(sysLog);\nsource.put(\\\"createTime\\\", DateUtil.format(sysLog.getCreateTime(), \\\"yyyy-MM-dd HH:mm:ss\\\"));\nsource.remove(\\\"id\\\");\nIndexRequest indexRequest = new IndexRequest(index, \\\"doc\\\", String.valueOf(sysLog.getId())).source(source);\nIndexResponse indexResponse = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\nlog.info(\\\"saveSysLog indexResponse: {}\\\", indexResponse.toString());\n} catch (IOException e) {\nlog.error(\\\"saveSysLog error: {}\\\", e.getMessage());\n}\n});\n}", "CodeBleu_score": 49.85049177244289}, {"code": "public void saveSysLog(SysLog sysLog) {\n\tadminThreadPoolExecutor.execute(() -> {\ntry {\nMap<String, Object> logMap = BeanUtil.beanToMap(sysLog);\nlogMap.remove(\\\"id\\\");\nlogMap.put(\\\"createTime\\\", DateUtil.format(sysLog.getCreateTime(), \\\"yyyy-MM-dd HH:mm:ss\\\"));\n\nIndexRequest indexRequest = new IndexRequest(getIndexAliases(SYS_LOG_TYPE), \\\"_doc\\\")\n.source(logMap, XContentType.JSON);\nIndexResponse indexResponse = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\nlog.info(\\\"sysLog indexResponse: \\\" + indexResponse.toString());\n} catch (Exception e) {\nlog.error(\\\"saveSysLog error: \\\" + e.getMessage());\n}\n});\n}", "CodeBleu_score": 32.88720305555651}, {"code": "public void saveSysLog(SysLog sysLog) {\n\tadminThreadPoolExecutor.execute(() -> {\ntry {\nIndexRequest indexRequest = new IndexRequest(getIndexAliases(SYS_LOG_TYPE), \\\"doc\\\");\nMap<String, Object> source = BeanUtil.beanToMap(sysLog);\nsource.remove(\\\"id\\\");\nsource.put(\\\"createTime\\\", DateUtil.format(sysLog.getCreateTime(), \\\"yyyy-MM-dd HH:mm:ss\\\"));\nindexRequest.source(source);\nIndexResponse indexResponse = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n} catch (IOException e) {\nlog.error(\\\"saveSysLog error: \\\" + e.getMessage());\n}\n});\n}", "CodeBleu_score": 28.88763380716788}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t", "CodeBleu_score": 2.165507622947592}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t", "CodeBleu_score": 2.165507622947592}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t", "CodeBleu_score": 2.165507622947592}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\t\tconst file = fs.createWriteStream(dest);\n\tconst response = await axios.get(url, {\n\t\tresponseType: \\\"stream\\\",\n\t});\n\tresponse.data.pipe(file);\n\treturn new Promise((resolve, reject) => {\n\t\tfile.on(\\\"finish\\\", resolve);\n\t\tfile.on(\\\"error\\\", (err) => {\n\t\t\tfs.unlink(dest, () => {\n\t\t\t\treject(err);\n\t\t\t});\n\t\t});\n\t});\n}", "CodeBleu_score": 45.92784531452747}, {"code": "async function downloadFile(url, dest){\n\t\ttry {\n\t\tconst response = await axios.get(url, { responseType: \\\"stream\\\" });\n\t\tconst file = fs.createWriteStream(dest);\n\t\tresponse.data.pipe(file);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tfile.on(\\\"finish\\\", () => {\n\t\t\t\tfile.close(resolve);\n\t\t\t});\n\t\t\tfile.on(\\\"error\\\", (err) => {\n\t\t\t\tfs.unlink(dest, () => {});\n\t\t\t\treject(err);\n\t\t\t});\n\t\t});\n\t} catch (err) {\n\t\tthrow err;\n\t}\n}", "CodeBleu_score": 45.75769832856874}, {"code": "async function downloadFile(url, dest){\n\t\tconst file = fs.createWriteStream(dest);\n\tconst response = await axios.get(url, { responseType: \\\"stream\\\" });\n\tresponse.data.pipe(file);\n\treturn new Promise((resolve, reject) => {\n\t\tfile.on(\\\"finish\\\", () => {\n\t\t\tfile.close(resolve);\n\t\t});\n\t\tfile.on(\\\"error\\\", (err) => {\n\t\t\tfs.unlink(dest, () => {\n\t\t\t\treject(err);\n\t\t\t});\n\t\t});\n\t});\n}", "CodeBleu_score": 49.061320537339135}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\tjust(module.getDependentModules())\n.doOnNext(circularDependencyCheckSet::addAll)\n.flatMapMany(moduleSet -> findByIdIn(Lists.newArrayList(moduleSet)))\n.onErrorContinue((e, i) -> log.warn(\"get dependent modules on error continue, {}\", e.getMessage()))\n.expandDeep(module -> getDependentModules(module, circularDependencyCheckSet))\n.collectList();\n }", "CodeBleu_score": 64.44881013761646}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\tjust(module.getId())\n.filter(id ->!circularDependencyCheckSet.contains(id))\n.flatMapMany(id -> findById(id))\n.doOnNext(circularDependencyCheckSet::add)\n.onErrorContinue((e, i) -> log.warn(\"get dependent modules on error continue, {}\", e.getMessage()))\n.expandDeep(app -> getDependentModules(app, circularDependencyCheckSet))\n.collectList();\n }", "CodeBleu_score": 66.77010624668695}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\tjust(module.getDependentModules())\n.doOnNext(circularDependencyCheckSet::addAll)\n.flatMapMany(moduleSet -> findByIdIn(Lists.newArrayList(moduleSet)))\n.onErrorContinue((e, i) -> log.warn(\"get dependent modules on error continue, {}\", e.getMessage()))\n.expandDeep(module -> getDependentModules(module, circularDependencyCheckSet))\n.collectList();\n }", "CodeBleu_score": 64.44881013761646}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t (Map.Entry<?,?> entry : map.entrySet()) {\nif (entry.getValue() instanceof Map<?,?>) {\ndoGetDependentModules((Map<?,?>) entry.getValue(), dependentModuleIds);\n} else if (entry.getValue() instanceof List<?>) {\nfor (Object value : (List<?>) entry.getValue()) {\nif (value instanceof Map<?,?>) {\ndoGetDependentModules((Map<?,?>) value, dependentModuleIds);\n}\n}\n} else if (entry.getValue() instanceof String) {\nString value = (String) entry.getValue();\nif (StringUtils.isNotBlank(value) && value.contains(\\\"module\\\")) {\ndependentModuleIds.add(value.split(\\\" \\\")[1]);\n}\n}\n}\n}", "CodeBleu_score": 25.924744575543656}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t (Map.Entry<?,?> entry : map.entrySet()) {\nif (entry.getValue() instanceof Map<?,?>) {\ndoGetDependentModules((Map<String, Object>) entry.getValue(), dependentModuleIds);\n} else if (entry.getValue() instanceof List<?>) {\nfor (Object listItem : (List<?>) entry.getValue()) {\nif (listItem instanceof Map<?,?>) {\ndoGetDependentModules((Map<String, Object>) listItem, dependentModuleIds);\n}\n}\n}\n}\nif (StringUtils.isNotBlank((CharSequence) entry.getKey()) && StringUtils.equals((CharSequence) entry.getKey(), \"type\") && StringUtils.equals((CharSequence) entry.getValue(), \"module\")) {\ndependentModuleIds.add(entry.getValue().toString());\n}\n}", "CodeBleu_score": 26.375732838672945}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t (Map.Entry<?,?> entry : map.entrySet()) {\nif (entry.getValue() instanceof Map<?,?>) {\ndoGetDependentModules((Map<?,?>) entry.getValue(), dependentModuleIds);\n} else if (entry.getValue() instanceof List<?>) {\nList<?> list = (List<?>) entry.getValue();\nfor (Object value : list) {\nif (value instanceof Map<?,?>) {\ndoGetDependentModules((Map<?,?>) value, dependentModuleIds);\n}\n}\n} else if (entry.getValue() instanceof String) {\nString value = (String) entry.getValue();\nif (StringUtils.isNotBlank(value)) {\ndependentModuleIds.add(value);\n}\n}\n}\n}", "CodeBleu_score": 26.942633237631608}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\tl Image image = ImageIO.read(dataBuffer.asInputStream());\n final BufferedImage thumbnail = createThumbnail(image, thumbNailPhotoDimension.get());\n final ByteArrayOutputStream os = new ByteArrayOutputStream();\n ImageIO.write(thumbnail, \\\"JPEG\\\", os);\n final byte[] imageData = os.toByteArray();\n final MediaType contentType = createThumbnail? MediaType.IMAGE_JPEG : srcContentType;\n return new Asset(imageData, contentType);\n }", "CodeBleu_score": 34.48991702378135}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\the reason we restrict file types here is to avoid having to deal with dangerous image types such as SVG, which can have arbitrary HTML/JS inside of them.\n\nfinal MediaType contentType = filePart.headers().getContentType();\nif (contentType == null ||!ALLOWED_CONTENT_TYPES.contains(contentType)) {\nreturn Mono.error(new BizException(BizError.INVALID_PARAMETER, \"INCORRECT_IMAGE_TYPE\"));\n}\n\nfinal Flux<DataBuffer> contentCache = filePart.content().cache();\n\nreturn contentCache.count()\n.defaultIfEmpty(0L)\n.flatMap(count -> {\n// Default implementation for the BufferFactory used breaks down the FilePart into chunks of 4KB.\n// So we multiply the count of chunks with 4 to get an estimate on the file size in KB.\nif (4 * count > maxFileSizeKB) {\nreturn Mono.error(new BizException(BizError.PAYLOAD_TOO_LARGE, \"PAYLOAD_TOO_LARGE\", maxFileSizeKB));\n}\nreturn DataBufferUtils.join(contentCache);\n})\n.flatMap(dataBuffer -> {\ntry {\nreturn repository.save(createAsset(dataBuffer, contentType, isThumbnail));\n} catch (IOException e) {\nlog.error(\"failed to upload image\", e);\nreturn Mono.error(new BizException(BizError.INVALID_PARAMETER, \"IMAGE_PARSE_ERROR\"));\n}\n});\n}", "CodeBleu_score": 35.44338789658287}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\tead the image data from the DataBuffer.\n\nbyte[] imageData = new byte[dataBuffer.readableByteCount()];\ndataBuffer.read(imageData);\n\n// Release the DataBuffer.\n\ndataBuffer.release();\n\n// Create a new BufferedImage object from the image data.\n\nBufferedImage srcImage = ImageIO.read(new ByteArrayInputStream(imageData));\n\n// If creating a thumbnail, resize the image to the configured thumbnail dimension.\n\nif (createThumbnail) {\n\nint thumbNailPhotoDimension = this.thumbNailPhotoDimension.get();\n\nint thumbNailPhotoWidth = thumbNailPhotoDimension;\nint thumbNailPhotoHeight = thumbNailPhotoDimension;\n\nif (srcImage.getWidth() > srcImage.getHeight()) {\n\nthumbNailPhotoWidth = thumbNailPhotoDimension;\nthumbNailPhotoHeight = thumbNailPhotoDimension * srcImage.getHeight() / srcImage.getWidth();\n\n} else {\n\nthumbNailPhotoWidth = thumbNailPhotoDimension * srcImage.getWidth() / srcImage.getHeight();\nthumbNailPhotoHeight = thumbNailPhotoDimension;\n\n}\n\nBufferedImage thumbNailPhoto = new BufferedImage(thumbNailPhotoWidth, thumbNailPhotoHeight, BufferedImage.TYPE_INT_RGB);\n\n// Draw the image to the thumbnail image.\n\nthumbNailPhoto.getGraphics().drawImage(srcImage, 0, 0, thumbNailPhotoWidth, thumbNailPhotoHeight, null);\n\n// Set the content type to JPEG.\n\ncontentType = MediaType.IMAGE_JPEG;\n\n// Set the image data to the thumbnail image data.\n\nByteArrayOutputStream thumbNailPhotoOutputStream = new ByteArrayOutputStream();\nImageIO.write(thumbNailPhoto, \\\"jpeg\\\", thumbNailPhotoOutputStream);\nimageData = thumbNailPhotoOutputStream.toByteArray();\n\n}\n\n// Create an Asset object with the image data and content type.\n\nreturn new Asset(imageData, contentType);\n\n}", "CodeBleu_score": 46.3952693020161}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\tn getById(assetId)\n.flatMap(asset -> {\nHttpHeaders headers = new HttpHeaders();\nif (asset.getContentType()!= null) {\nheaders.setContentType(asset.getContentType());\n}\nServerHttpResponse response = exchange.getResponse();\nresponse.setStatusCode(HttpStatus.OK);\nresponse.getHeaders().putAll(headers);\nDataBufferFactory bufferFactory = new DefaultDataBufferFactory();\nDataBuffer dataBuffer = bufferFactory.wrap(asset.getData());\nreturn response.writeWith(Flux.just(dataBuffer));\n});\n}", "CodeBleu_score": 48.53557143786258}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\tn this.assetService.getById(assetId)\n.flatMap(asset -> {\nHttpHeaders headers = new HttpHeaders();\nheaders.setContentType(asset.getContentType());\n\nDataBufferFactory bufferFactory = exchange.getResponse().bufferFactory();\n\nreturn this.assetService.getById(assetId)\n.map(asset -> {\nDataBuffer dataBuffer = bufferFactory.wrap(asset.getData());\nreturn new DefaultDataBufferFactory().wrap(dataBuffer.asByteBuffer());\n});\n});\n}", "CodeBleu_score": 38.9948548328107}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\tn getAssetById(assetId)\n.doOnNext(asset -> exchange.getResponse().setStatusCode(HttpStatus.OK))\n.doOnNext(asset -> exchange.getResponse().getHeaders().setContentType(asset.getContentType()))\n.flatMap(asset -> {\nDataBuffer buffer = new DefaultDataBufferFactory().wrap(asset.getData());\nreturn exchange.getResponse().writeWith(Flux.just(buffer));\n});\n}", "CodeBleu_score": 40.483896762091256}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\tonConfig.getWorkspaceMode() == WorkspaceMode.SAAS? Flux.empty() : organizationService.getEnterpriseOrganizations()\n.flatMapIterable(organization -> organization.getAuthConfigs()\n.stream()\n.map(abstractAuthConfig -> new FindAuthConfig(abstractAuthConfig, organization))\n.collect(Collectors.toList()));\n}", "CodeBleu_score": 40.43605838959571}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\tonConfig.getWorkspaceMode() == WorkspaceMode.SAAS? Flux.empty() : organizationService.getByDomain().flatMapIterable(organization -> organization.getAuthConfigs().stream().map(abstractAuthConfig -> new FindAuthConfig(abstractAuthConfig, organization)).collect(Collectors.toList()));\n}", "CodeBleu_score": 31.528067612764282}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\tonConfig.getWorkspaceMode() == WorkspaceMode.SAAS? Flux.empty() : Flux.fromIterable(organizationService.getEnterpriseOrganizations())\n.flatMapIterable(organization -> organization.getAuthConfigs())\n.map(abstractAuthConfig -> new FindAuthConfig(abstractAuthConfig, organization))\n.collectList()\n.map(list -> Flux.fromIterable(list));\n}", "CodeBleu_score": 31.66184716027286}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t", "CodeBleu_score": 7.4417428058422415}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\n//    MongockApplicationRunner mongockApplicationRunner = new MongockApplicationRunner(\n//            new SpringDataMongoV3Driver(mongoTemplate),\n//            \"com.openblocks.infra.changelogs.v1\",\n//            springContext\n//    );\n//\n//    return mongockApplicationRunner;\n\n}", "CodeBleu_score": 7.71717139513388}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t", "CodeBleu_score": 7.4417428058422415}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t", "CodeBleu_score": 9.728506787330318}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\tt the read preference to \"secondaryPreferred\"\nReadPreference readPreference = ReadPreference.secondaryPreferred();\n\n// Create a ReactiveMongoTemplate instance using the provided MongoDB factory and mapping converter\nReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\n// Set the read preference on the ReactiveMongoTemplate\nreactiveMongoTemplate.setReadPreference(readPreference);\n\n// Return the configured ReactiveMongoTemplate\nreturn reactiveMongoTemplate;\n}", "CodeBleu_score": 56.10326649385819}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t", "CodeBleu_score": 9.728506787330318}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\tn libraryQueryRecordService.getLatestRecordByLibraryQueryId(libraryQueryId)\n.map(LibraryQueryRecord::getDsl)\n.switchIfEmpty(getById(libraryQueryId)\n.map(LibraryQuery::getDsl));\n}", "CodeBleu_score": 55.88980555700132}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\tn libraryQueryRecordService.getLatestRecordByLibraryQueryId(libraryQueryId)\n.map(LibraryQueryRecord::getDsl)\n.switchIfEmpty(getById(libraryQueryId)\n.map(LibraryQuery::getDsl));\n}", "CodeBleu_score": 55.88980555700132}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\tn libraryQueryRecordService.getLatestRecordByLibraryQueryId(libraryQueryId)\n.map(LibraryQueryRecord::getDsl)\n.switchIfEmpty(getById(libraryQueryId)\n.map(LibraryQuery::getDsl));\n}", "CodeBleu_score": 55.88980555700132}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t", "CodeBleu_score": 8.95524286354501}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t-        if (datasource == null) {\n-            throw new BizException(QUERY_EXECUTION_ERROR, \"Datasource is null\");\n-        }\n-\n-        if (datasource.getDatasourceType() == null) {\n-            throw new BizException(QUERY_EXECUTION_ERROR, \"Datasource type is null\");\n-        }\n-\n-        if (datasource.getDatasourceType() == Datasource.DatasourceType.LOCAL) {\n-            return executeQueryLocally(datasource, queryConfig, requestParams, timeoutStr, queryVisitorContext);\n-        }\n-\n-        return executeQueryOnRemoteDatasource(datasource, queryConfig, requestParams, timeoutStr, queryVisitorContext);\n+        return executeQuery(datasource, queryConfig, requestParams, timeoutStr, queryVisitorContext);\n     }", "CodeBleu_score": 31.854646393190112}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t-        return Mono.defer(() -> {\n-            try {\n-                DatasourceConnectionHolder datasourceConnectionHolder = datasourceConnectionPool.getConnection(datasource);\n-                DatasourceMetaInfo datasourceMetaInfo = datasourceMetaInfoService.getDatasourceMetaInfo(datasource);\n-                if (datasourceMetaInfo.getDatasourceType().equals(DatasourceMetaInfo.DatasourceType.NODEJS)) {\n-                    return datasourcePluginClient.executeQuery(datasourceConnectionHolder, queryConfig, requestParams, timeoutStr, queryVisitorContext);\n-                } else {\n-                    return Mono.just(datasourcePluginClient.executeQuery(datasourceConnectionHolder, queryConfig, requestParams, timeoutStr, queryVisitorContext));\n-                }\n-            } catch (TimeoutException e) {\n-                throw ofException(QUERY_EXECUTION_TIMEOUT, e);\n-            } catch (PluginException e) {\n-                throw ofException(QUERY_EXECUTION_ERROR, e);\n-            } catch (Exception e) {\n-                throw ofException(QUERY_EXECUTION_ERROR, e);\n-            }\n-        });\n-    }", "CodeBleu_score": 43.770858862751844}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\tGet the query executor based on the datasource type\nQueryExecutor queryExecutor = queryExecutorFactory.getExecutor(datasource.getType());\n\n// Build the query execution context\nQueryExecutionContext queryExecutionContext = queryExecutionContextBuilder.build(datasource, queryConfig, requestParams, queryVisitorContext);\n\n// Acquire a connection from the datasource connection pool\nDatasourceConnectionHolder datasourceConnectionHolder = datasourceConnectionPool.acquireConnection(datasource);\n\n// Execute the query using the connection\ntry {\nreturn Mono.defer(() -> Mono.from(queryExecutor.execute(datasourceConnectionHolder.getConnection(), queryExecutionContext)));\n} catch (Exception e) {\nlog.error(\"Error executing query locally\", e);\nreturn Mono.just(QueryExecutionResult.error(ofException(QUERY_EXECUTION_ERROR, \\\"QUERY_EXECUTION_ERROR\\\", e.getMessage())));\n} finally {\n// Release the connection back to the datasource connection pool\ndatasourceConnectionPool.releaseConnection(datasourceConnectionHolder);\n}\n}", "CodeBleu_score": 45.632962782346866}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\turn Mono.defer(() -> {\n\nDatasourceConnectionHolder connectionHolder = datasourceConnectionPool.acquireConnection(datasource.getId());\n\nDatasourceConnectionHolder.DatasourceConnection datasourceConnection = connectionHolder.getConnection();\n\nQueryExecutionContext queryExecutionContext = new QueryExecutionContext(datasource.getId(), queryConfig, requestParams, datasourceConnection, queryVisitorContext);\n\ntry {\n\nreturn datasourcePluginClient.execute(datasource.getType(), datasource.getPluginId(), queryExecutionContext);\n\n} catch (Exception e) {\n\nlog.error(\\\"Failed to execute query locally\\\", e);\n\nthrow new PluginException(QUERY_EXECUTION_ERROR, \\\"Failed to execute query locally\\\", e.getMessage());\n\n} finally {\n\ndatasourceConnectionPool.releaseConnection(datasource.getId(), datasourceConnection);\n\n}\n\n});\n\n}", "CodeBleu_score": 47.522559579439175}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\tRetrieve the appropriate query executor based on the datasource type\nQueryExecutor queryExecutor = getQueryExecutor(datasource.getType());\n\n// Build the query execution context\nQueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, requestParams);\n\n// Acquire a connection from the datasource connection pool\nDatasourceConnectionHolder datasourceConnectionHolder = datasourceConnectionPool.acquireConnection(datasource.getId());\n\n// Execute the query using the connection and handle any errors that occur during execution\ntry {\nList<Map<String, Object>> result = queryExecutor.execute(datasourceConnectionHolder.getConnection(), queryExecutionContext);\nreturn Mono.just(QueryExecutionResult.success(result));\n} catch (Exception e) {\nlog.error(\"Error executing query locally\", e);\nreturn Mono.just(QueryExecutionResult.error(e));\n} finally {\n// Release the connection back to the datasource connection pool\ndatasourceConnectionPool.releaseConnection(datasource.getId(), datasourceConnectionHolder);\n}\n}", "CodeBleu_score": 47.67134272004755}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t", "CodeBleu_score": 2.046868589917741}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\nif (StringUtils.isBlank(timeoutStr)) {\nreturn DEFAULT_QUERY_TIMEOUT_MILLIS;\n}\n\nPair<Integer, String> pair = extractNumericAndUnit(timeoutStr);\n\nif (pair == null) {\nthrow new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout string: \" + timeoutStr);\n}\n\nint value = pair.getLeft();\nString unit = pair.getRight();\n\nif (value <= 0) {\nthrow new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout string: \" + timeoutStr);\n}\n\nif (unit.equals(\"s\")) {\nvalue = value * 1000;\n} else if (unit.equals(\"m\")) {\nvalue = value * 60 * 1000;\n} else if (unit.equals(\"h\")) {\nvalue = value * 60 * 60 * 1000;\n} else {\nthrow new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout string: \" + timeoutStr);\n}\n\nif (value > MAX_QUERY_TIMEOUT_SECONDS * 1000) {\nthrow new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"Query timeout exceeds the maximum allowed value: \" + timeoutStr);\n}\n\nreturn value;\n}", "CodeBleu_score": 40.50441646006312}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\n//        if (StringUtils.isBlank(timeoutStr)) {\n//            return DEFAULT_QUERY_TIMEOUT_MILLIS;\n//        }\n//\n//        String[] timeoutParts = timeoutStr.split(\" \");\n//        if (timeoutParts.length!= 2) {\n//            throw new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout format. Expected format: <value> <unit>.\");\n//        }\n//\n//        String valueStr = timeoutParts[0];\n//        String unitStr = timeoutParts[1];\n//\n//        if (!NumberUtils.isDigits(valueStr)) {\n//            throw new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout format. Expected format: <value> <unit>.\");\n//        }\n//\n//        int value = Integer.parseInt(valueStr);\n//        if (value < 0) {\n//            throw new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout format. Expected format: <value> <unit>.\");\n//        }\n//\n//        if (!unitStr.equalsIgnoreCase(\"s\")) {\n//            throw new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout format. Expected format: <value> <unit>.\");\n//        }\n//\n//        int timeoutMs = value * 1000;\n//        if (timeoutMs > MAX_QUERY_TIMEOUT_SECONDS * 1000) {\n//            throw new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"Query timeout exceeds the maximum allowed value of \" + MAX_QUERY_TIMEOUT_SECONDS + \" seconds.\");\n//        }\n//\n//        return timeoutMs;\n//    }", "CodeBleu_score": 2.046868589917741}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\ttionService.findLiveQueries(application.getApplicationId())\n       .flatMapMany(query -> {\n            Set<String> datasourceIds = query.getLiveQueries().stream()\n                   .map(ApplicationQuery::getDatasourceId)\n                   .collect(Collectors.toSet());\n            return datasourceService.getByDatasourceIds(datasourceIds)\n                   .collectList()\n                   .flatMap(datasources -> {\n                        if (datasources.isEmpty()) {\n                            return Mono.error(ofError(TEMPLATE_NOT_CORRECT, \"TEMPLATE_NOT_CORRECT\"));\n                        }\n                        return datasources.stream()\n                               .map(datasource -> {\n                                    Datasource copiedDatasource = datasource.copy(currentOrganizationId, visitorId);\n                                    return datasourceService.create(copiedDatasource, visitorId)\n                                           .map(copiedDatasource::getDatasourceId)\n                                           .map(copiedDatasourceId -> Pair.of(datasource.getDatasourceId(), copiedDatasourceId));\n                                })\n                               .collect(Collectors.toList())\n                               .stream()\n                               .collect(Collectors.toList())\n                               .stream()\n                               .collect(Collectors.toList());\n                    });\n        });\n}", "CodeBleu_score": 47.14432330854116}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\tationService.getLiveQueries(application.getApplicationId())\n       .flatMapMany(query -> datasourceService.getByDatasourceIds(query.getDatasourceIds()))\n       .collectList()\n       .flatMap(datasources -> {\n            if (datasources.isEmpty()) {\n                return Mono.error(TEMPLATE_NOT_CORRECT);\n            }\n            List<Pair<String, String>> datasourceIdMap = datasources.stream()\n                   .map(datasource -> Pair.of(datasource.getDatasourceId(), datasource.getDatasourceId()))\n                   .collect(Collectors.toList());\n            return datasourceService.copyDatasources(datasourceIdMap, currentOrganizationId, visitorId);\n        });\n}", "CodeBleu_score": 47.86996537150582}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\ttionService.getLiveQueries(application.getApplicationId())\n       .switchIfEmpty(deferredError(TEMPLATE_NOT_CORRECT, \"TEMPLATE_NOT_CORRECT\"))\n       .flatMapIterable(queries -> queries)\n       .flatMap(query -> datasourceService.copyDatasourceFromTemplate(query.getDatasourceId(), currentOrganizationId, visitorId))\n       .collectList()\n       .map(datasourceIdPairs -> {\n            if (datasourceIdPairs.isEmpty()) {\n                return deferredError(TEMPLATE_NOT_CORRECT, \"TEMPLATE_NOT_CORRECT\");\n            }\n            return datasourceIdPairs;\n        });\n}", "CodeBleu_score": 35.29446861437258}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\trvice.getById(datasourceId)\n\n       .switchIfEmpty(deferredError(TEMPLATE_NOT_EXIST, \\\"TEMPLATE_NOT_EXIST\\\"));\n\n}", "CodeBleu_score": 8.183360748307015}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\trvice.getById(datasourceId)\n.switchIfEmpty(deferredError(TEMPLATE_NOT_EXIST, \\\"TEMPLATE_NOT_EXIST\\\"))\n.zipWith(Mono.just(organizationId))\n.zipWith(Mono.just(visitorId))\n.flatMap(tuple -> {\nDatasource datasource = tuple.getT1();\nString organizationId = tuple.getT2();\nString visitorId = tuple.getT3();\nif (datasource.getCreationSource() == DatasourceCreationSource.SYSTEM_STATIC) {\nreturn ofError(TEMPLATE_NOT_CORRECT, \\\"TEMPLATE_NOT_CORRECT\\\");\n} else if (datasource.getCreationSource() == DatasourceCreationSource.LEGACY_QUICK_REST_API) {\nreturn ofError(TEMPLATE_NOT_CORRECT, \\\"TEMPLATE_NOT_CORRECT\\\");\n} else if (datasource.getCreationSource() == DatasourceCreationSource.LEGACY_OPENBLOCKS_API) {\nreturn ofError(TEMPLATE_NOT_CORRECT, \\\"TEMPLATE_NOT_CORRECT\\\");\n} else {\nDatasource newDatasource = Datasource.builder()\n.organizationId(organizationId)\n.name(datasource.getName())\n.description(datasource.getDescription())\n.creationSource(DatasourceCreationSource.MANUAL)\n.build();\nreturn datasourceService.create(newDatasource, visitorId);\n}\n});\n}", "CodeBleu_score": 16.019355849562345}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\trvice.getById(datasourceId)\n.switchIfEmpty(deferredError(TEMPLATE_NOT_CORRECT, \\\"TEMPLATE_NOT_CORRECT\\\"));\n}", "CodeBleu_score": 8.148956408431065}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t", "CodeBleu_score": 6.277227342940204}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t", "CodeBleu_score": 6.277227342940204}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t        if (user.getAvatar()!= null) {\n//            assetService.delete(user.getAvatar().getId());\n//        }\n//\n//        String extension = filePart.filename().split(\\\".\\\")[1];\n//        String fileName = filePart.filename().split(\\\".\\\")[0];\n//        String uuid = UUID.randomUUID().toString();\n//        String assetId = uuid + \\\".\\\" + extension;\n        String contentType = filePart.contentType();\n//\n//        Asset asset = new Asset();\n//        asset.setContentType(contentType);\n//        asset.setFileName(fileName);\n//        asset.setFileSize(filePart.contentLength());\n//        asset.setExtension(extension);\n//        asset.setUuid(uuid);\n//        asset.setWorkspaceMode(WorkspaceMode.PRIVATE);\n\n//        asset.setCreatedBy(user.getId());\n//        asset.setCreatedAt(Instant.now());\n//        asset.setModifiedBy(user.getId());\n//        asset.setModifiedAt(Instant.now());\n//\n//        return assetService.create(asset)\n//               .flatMap(a -> filePart.content()\n//                       .flatMap(data -> assetService.upload(a.getId(), data))\n//                       .then(Mono.just(a.getId()))\n//                )\n//               .flatMap(id -> repository.findById(user.getId())\n//                       .flatMap(u -> {\n//                            UserDetail userDetail = u.getUserDetail();\n//                            userDetail.setAvatar(new Asset(id));\n//                            return repository.save(u);\n//                        })\n//                );\n//    }", "CodeBleu_score": 12.524522903424195}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tuthUser == null) {\nreturn Mono.error(new BizException(BizError.INVALID_PARAMETER, \"INVALID_PARAMETER\", FieldName.AUTH_USER));\n}\n\nString source = authUser.getSource();\nString sourceId = authUser.getUid();\nString name = authUser.getName();\nString email = authUser.getEmail();\nString password = authUser.getPassword();\nString avatar = authUser.getAvatar();\nString locale = authUser.getLocale();\n\nif (StringUtils.isEmpty(source)) {\nreturn Mono.error(new BizException(BizError.INVALID_PARAMETER, \"INVALID_PARAMETER\", FieldName.AUTH_USER));\n}\n\nif (StringUtils.isEmpty(sourceId)) {\nreturn Mono.error(new BizException(BizError.INVALID_PARAMETER, \"INVALID_PARAMETER\", FieldName.AUTH_USER));\n}\n\nif (StringUtils.isEmpty(name)) {\nname = StringUtils.defaultIfEmpty(email, sourceId);\n}\n\nif (StringUtils.isEmpty(locale)) {\nlocale = LocaleUtils.getDefaultLocale().toString();\n}\n\nUser user = new User();\nuser.setSource(source);\nuser.setSourceId(sourceId);\nuser.setName(name);\nuser.setEmail(email);\nuser.setAvatar(avatar);\nuser.setLocale(locale);\n\nif (StringUtils.isNotEmpty(password)) {\nuser.setPassword(encryptionService.encrypt(password));\n}\n\nuser.setState(UserState.NEW);\nuser.setEnabled(false);\n\nMono<User> newUserMono = create(user);\n\nreturn newUserMono\n.flatMap(newUser -> {\nList<Connection> connections = authUser.getConnections();\nif (CollectionUtils.isNotEmpty(connections)) {\nreturn groupMemberService.addConnections(newUser.getId(), connections);\n}\nreturn Mono.empty();\n});\n}", "CodeBleu_score": 33.79266484515194}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t", "CodeBleu_score": 2.545724253375511}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tg source = authUser.getSource();\nString id = authUser.getUid();\nString name = authUser.getName();\nString email = authUser.getEmail();\nString avatar = authUser.getAvatar();\nString password = authUser.getPassword();\nString sourceUuid = authUser.getSourceUuid();\nboolean isNew = authUser.isNew();\n\nString state = UserState.NEW.name();\nboolean enabled = isNew;\n\nUser user = new User();\nuser.setId(id);\nuser.setName(name);\nuser.setState(state);\nuser.setEnabled(enabled);\nuser.setAvatar(avatar);\n\nif (StringUtils.isNotEmpty(source) && StringUtils.isNotEmpty(sourceUuid)) {\nConnection connection = new Connection();\nconnection.setSource(source);\nconnection.setRawId(sourceUuid);\nuser.getConnections().add(connection);\n}\n\nif (StringUtils.isNotEmpty(email)) {\nuser.setEmail(email);\n}\n\nif (StringUtils.isNotEmpty(password)) {\nuser.setPassword(encryptionService.encrypt(password));\n}\n\nreturn repository.save(user)\n.flatMap(savedUser -> {\nif (isNew) {\nreturn groupMemberService.addUserToDefaultGroup(savedUser.getId());\n}\nreturn Mono.just(savedUser);\n});\n}", "CodeBleu_score": 37.57958883774899}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t Mono.just(email)\n.map(email -> {\nConnection connection = new Connection();\nconnection.setSource(AuthSourceConstants.EMAIL);\nconnection.setRawId(email);\nuser.getConnections().add(connection);\nreturn user;\n})\n.flatMap(user -> {\nreturn repository.save(user)\n.onErrorResume(e -> {\nif (e instanceof DuplicateKeyException) {\nreturn Mono.error(new BizException(BizError.EMAIL_ALREADY_EXISTS, \"EMAIL_ALREADY_EXISTS\", email));\n}\nreturn Mono.error(e);\n});\n})\n.map(user -> true);\n}", "CodeBleu_score": 43.2671022181626}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t repository.findByConnections_SourceAndConnections_RawId(AuthSourceConstants.EMAIL, email)\n.flatMap(foundUser -> {\nif (foundUser!= null) {\nreturn Mono.error(new BizException(BizError.EMAIL_ALREADY_EXISTS, \"EMAIL_ALREADY_EXISTS\", email));\n}\nreturn Mono.just(user);\n})\n.flatMap(foundUser -> {\nif (foundUser == null) {\nreturn Mono.error(new BizException(BizError.NO_RESOURCE_FOUND, \"NO_USER_FOUND\", email));\n}\nreturn Mono.just(foundUser);\n})\n.flatMap(foundUser -> {\nSet<Connection> connections = foundUser.getConnections();\nif (connections == null) {\nconnections = newHashSet();\n}\nConnection connection = new Connection();\nconnection.setSource(AuthSourceConstants.EMAIL);\nconnection.setRawId(email);\nconnections.add(connection);\nfoundUser.setConnections(connections);\nreturn repository.save(foundUser);\n})\n.map(savedUser -> true)\n.onErrorResume(error -> {\nif (error instanceof DuplicateKeyException) {\nreturn Mono.error(new BizException(BizError.EMAIL_ALREADY_EXISTS, \"EMAIL_ALREADY_EXISTS\", email));\n}\nreturn Mono.error(error);\n});\n}", "CodeBleu_score": 42.289993798541154}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t Mono.just(user)\n.flatMap(existingUser -> {\nConnection connection = new Connection();\nconnection.setSource(AuthSourceConstants.EMAIL);\nconnection.setRawId(email);\nconnection.setSourceId(email);\nSet<Connection> connections = newHashSet();\nconnections.add(connection);\nexistingUser.setConnections(connections);\nreturn create(existingUser);\n})\n.onErrorResume(DuplicateKeyException.class, ex -> Mono.just(false))\n.onErrorResume(ex -> ofException(ex));\n}", "CodeBleu_score": 28.74503831311543}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n.flatMap(user -> {\nif (!authenticationService.isPasswordValid(oldPassword, user.getPassword())) {\nreturn ofError(BizError.INVALID_PASSWORD, \\\"INVALID_PASSWORD\\\", oldPassword);\n}\nuser.setPassword(encryptionService.encryptPassword(newPassword));\nreturn repository.save(user)\n.then(Mono.just(true));\n});\n}", "CodeBleu_score": 16.420406118385163}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n.flatMap(user -> {\nif (!authenticationService.validatePassword(user, oldPassword)) {\nreturn Mono.error(new BizException(BizError.INVALID_PASSWORD, \\\"INVALID_PASSWORD\\\", \\\"\\\"));\n}\nuser.setPassword(encryptionService.encryptPassword(newPassword));\nreturn repository.save(user)\n.then(Mono.just(true));\n});\n}", "CodeBleu_score": 15.547817071415029}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n.flatMap(user -> {\nif (StringUtils.isEmpty(oldPassword) || StringUtils.isEmpty(newPassword)) {\nreturn Mono.error(new BizException(BizError.INVALID_PARAMETER, \"INVALID_PARAMETER\", FieldName.PASSWORD));\n}\nif (!encryptionService.validatePassword(oldPassword, user.getPassword())) {\nreturn Mono.error(new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\", FieldName.PASSWORD));\n}\nuser.setPassword(encryptionService.encryptPassword(newPassword));\nreturn repository.save(user)\n.then(Mono.just(true));\n});\n}", "CodeBleu_score": 34.32578296393663}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\treturn orgMemberService.getOrgMemberGroups(orgMember.getOrgId(), orgMember.getId())\n.flatMap(groups -> {\nif (withoutDynamicGroups) {\nreturn Mono.just(groups.stream()\n.filter(group ->!group.isDynamic())\n.map(group -> Map.of(\n\"id\", group.getId(),\n\"name\", group.getName(locale)))\n.collect(toList()));\n}\nreturn Mono.just(groups.stream()\n.map(group -> Map.of(\n\"id\", group.getId(),\n\"name\", group.getName(locale)))\n.collect(toList()));\n});\n}", "CodeBleu_score": 29.757794850434877}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\treturn orgMemberService.getOrgMemberGroups(orgMember.getOrgId(), orgMember.getId())\n.zipWith(orgMemberService.getOrgMemberGroups(orgMember.getOrgId(), orgMember.getId()),\n(groups, dynamicGroups) -> {\nList<Map<String, String>> result = new ArrayList<>();\nif (withoutDynamicGroups) {\ngroups.forEach(group -> {\nif (!group.isAllUsers()) {\nresult.add(Map.of(\\\"id\\\", group.getId(), \\\"name\\\", group.getName(locale)));\n}\n});\n} else {\ngroups.forEach(group -> {\nif (!group.isAllUsers()) {\nresult.add(Map.of(\\\"id\\\", group.getId(), \\\"name\\\", group.getName(locale)));\n}\n});\ndynamicGroups.forEach(group -> {\nresult.add(Map.of(\\\"id\\\", group.getId(), \\\"name\\\", group.getName(locale)));\n});\n}\nreturn result;\n})\n.thenReturn(Collections.emptyList());\n}", "CodeBleu_score": 27.303955684210933}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\treturn orgMemberService.getOrgMemberGroups(orgMember.getOrgId(), orgMember.getMemberId())\n       .flatMapMany(groups -> {\n            if (withoutDynamicGroups) {\n                return groups.stream().filter(group ->!group.isDynamic()).map(group -> {\n                    Map<String, String> map = new HashMap<>();\n                    map.put(\\\"id\\\", group.getId());\n                    map.put(\\\"name\\\", group.getName(locale));\n                    return map;\n                }).collect(Collectors.toList());\n            } else {\n                return groups.stream().map(group -> {\n                    Map<String, String> map = new HashMap<>();\n                    map.put(\\\"id\\\", group.getId());\n                    map.put(\\\"name\\\", group.getName(locale));\n                    return map;\n                }).collect(Collectors.toList());\n            }\n        }).filter(map ->!map.get(\\\"id\\\").equals(\\\"all_users\\\"))\n       .collectList();\n}", "CodeBleu_score": 31.52815994227607}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\tturn findByUserId(userId)\n.flatMap(userStatus -> {\n userStatus.setHasShowNewUserGuidance(true);\n return mongoUpsertHelper.upsert(repository, userStatus);\n })\n.map(userStatus -> true);\n}", "CodeBleu_score": 26.564461842942855}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\tturn findByUserId(userId)\n\n.flatMap(userStatus -> {\n userStatus.setHasShowNewUserGuidance(true);\n\n return Mono.just(userStatus);\n\n })\n\n.flatMap(userStatus -> mongoUpsertHelper.upsert(userStatus));\n\n }", "CodeBleu_score": 29.672327333616018}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\turn findByUserId(userId)\n               .flatMap(userStatus -> {\n                    userStatus.setHasShowNewUserGuidance(true);\n                    return mongoUpsertHelper.upsert(userStatus)\n                           .map(success -> true);\n                });\n    }", "CodeBleu_score": 26.246846465938113}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\\\"predicatePartition is nil\\\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\\\"predicateValue is nil\\\")\n\t}\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\twg := rungroup.New()\n\tfor k, p := range c.partitions {\n\t\tif!predicatePartition(k, p) {\n\t\t\tcontinue\n\t\t}\n\t\twg.Go(func() error {\n\t\t\tp.ClearMatching(predicateValue)\n\t\t\treturn nil\n\t\t})\n\t}\n\twg.Wait()\n}", "CodeBleu_score": 41.307281576508316}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\\\"predicatePartition is nil\\\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\\\"predicateValue is nil\\\")\n\t}\n\n\trg := rungroup.New()\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\trg.Add()\n\t\t\tgo func(k string, p PartitionManager) {\n\t\t\t\tdefer rg.Done()\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t}(k, p)\n\t\t}\n\t}\n\trg.Wait()\n}", "CodeBleu_score": 40.89908004548127}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\\\"nil predicatePartition\\\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\\\"nil predicateValue\\\")\n\t}\n\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\n\tvar wg rungroup.Group\n\tfor k, p := range c.partitions {\n\t\tif!predicatePartition(k, p) {\n\t\t\tcontinue\n\t\t}\n\t\twg.Go(func() error {\n\t\t\treturn p.ClearMatching(predicateValue)\n\t\t})\n\t}\n\twg.Wait()\n}", "CodeBleu_score": 38.79773487925491}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(fmt.Sprintf(\"calculateMaxSizePerPartition: numPartitions(%d) and totalWeightQuantity(%d) must be greater than zero\", numPartitions, totalWeightQuantity))\n\t}\n\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\tmaxSizePerPartition := int(math.Floor(float64(maxItemsTotal) / averageWeightPerPartition))\n\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 50.896779335250955}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif maxItemsTotal <= 0 {\n\t\tpanic(\"maxItemsTotal must be greater than zero\")\n\t}\n\tif totalWeightQuantity <= 0 {\n\t\tpanic(\"totalWeightQuantity must be greater than zero\")\n\t}\n\tif numPartitions <= 0 {\n\t\tpanic(\"numPartitions must be greater than zero\")\n\t}\n\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\tmaxSizePerPartition := int(math.Ceil(float64(maxItemsTotal) / averageWeightPerPartition))\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 57.2280343908693}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif maxItemsTotal <= 0 || totalWeightQuantity <= 0 || numPartitions <= 0 {\n\t\treturn 0\n\t}\n\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\tmaxSizePerPartition := int(math.Floor(float64(maxItemsTotal) / float64(averageWeightPerPartition)))\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 42.01217175072705}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\tMap<String, Object> databaseInfo = new HashMap<>();\nConnectionMetadata metadata = connectionFactory.getMetadata();\nif (Objects.nonNull(metadata)) {\ndatabaseInfo.put(\\\"product\\\", metadata.getProduct());\ndatabaseInfo.put(\\\"version\\\", metadata.getVersion());\n}\nreturn databaseInfo;\n}", "CodeBleu_score": 36.25541575301706}, {"code": "public Map<String, Object> contributorMap(){\n\tConnectionMetadata metadata = connectionFactory.getMetadata();\nif (Objects.isNull(metadata)) {\nreturn new HashMap<>();\n}\nMap<String, Object> map = new HashMap<>();\nmap.put(\\\"product\\\", metadata.getProduct());\nmap.put(\\\"version\\\", metadata.getVersion());\nreturn map;\n}", "CodeBleu_score": 38.671783673526114}, {"code": "public Map<String, Object> contributorMap(){\n\tMap<String, Object> databaseInfo = new HashMap<>();\n\nMono<ConnectionMetadata> connectionMetadata = connectionFactory.getMetadata();\nif (connectionMetadata.block()!= null) {\ndatabaseInfo.put(CONNECTION_METADATA_PRODUCT_NAME, connectionMetadata.block().getProductName());\ndatabaseInfo.put(CONNECTION_METADATA_PRODUCT_VERSION, connectionMetadata.block().getProductVersion());\n}\n\nreturn databaseInfo;\n}", "CodeBleu_score": 33.89407670298525}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tser = SystemSetting.get(configMap, User.GROUP, User.class);\nif (user == null) {\ninfo.setAllowRegistration(false);\ninfo.setMustVerifyEmailOnRegistration(null);\n} else {\ninfo.setAllowRegistration(user.getEnable()!= null && user.getEnable());\ninfo.setMustVerifyEmailOnRegistration(user.getMustVerifyEmailOnRegistration()!= null && user.getMustVerifyEmailOnRegistration());\n}\n}", "CodeBleu_score": 61.738864068235245}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tser = SystemSetting.get(configMap, User.GROUP, User.class);\nif (user == null) {\ninfo.setAllowRegistration(false);\ninfo.setMustVerifyEmailOnRegistration(false);\n} else {\ninfo.setAllowRegistration(user.getEnable()!= null && user.getEnable());\ninfo.setMustVerifyEmailOnRegistration(user.getMustVerifyEmailOnRegistration()!= null && user.getMustVerifyEmailOnRegistration());\n}\n}", "CodeBleu_score": 66.20949770264419}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tser = SystemSetting.get(configMap, User.GROUP, User.class);\nif (user == null) {\ninfo.setAllowRegistration(false);\ninfo.setMustVerifyEmailOnRegistration(false);\n} else {\ninfo.setAllowRegistration(user.getEnable()!= null && user.getEnable());\ninfo.setMustVerifyEmailOnRegistration(user.getMustVerifyEmailOnRegistration()!= null && user.getMustVerifyEmailOnRegistration());\n}\n}", "CodeBleu_score": 66.20949770264419}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\tlog.info(\\\"Restarting application...\\\");\n\nThread thread = new Thread(new Runnable() {\n@Override\npublic void run() {\ntry {\nlog.info(\\\"Starting new application...\\\");\n\n// create a new application context\ncontext = application.run(args);\n\n// wait for the application to start\ncontext.getEnvironment().getProperty(\\\"spring.application.name\\\");\n\n// get the new application context's class loader\nClassLoader classLoader = context.getClassLoader();\n\n// set the new application context's class loader as the current thread's context class loader\nThread.currentThread().setContextClassLoader(classLoader);\n\n// set the new application context's class loader as the current thread's context class loader\nThread.currentThread().setContextClassLoader(classLoader);\n\nlog.info(\\\"Application restarted.\\\");\n} catch (Exception e) {\nlog.error(\\\"Error restarting application: \\\" + e.getMessage(), e);\n}\n}\n});\n\n// set the thread as non-daemon\nthread.setDaemon(false);\n\n// assign the application class loader as the thread's context class loader\nthread.setContextClassLoader(application.getClassLoader());\n\n// start the thread\nthread.start();\n\n// return a message indicating the restart has begun\nreturn \\\"Application restart initiated.\\\";\n}", "CodeBleu_score": 29.7392225044094}, {"code": "public Object restart(){\n\t\nif (context!= null) {\ncontext.close();\n}\n\nlog.info(\\\"Restarting application...\\\");\n\nThreadGroup threadGroup = new ThreadGroup(\\\"Restart Thread Group\\\");\nThread thread = new Thread(threadGroup, \\\"Restart Thread\\\", () -> {\ntry {\n\nlog.info(\\\"Restarting application...\\\");\n\nif (context!= null) {\ncontext.close();\n}\n\ncontext = SpringApplication.run(Application.class, args);\n\nlog.info(\\\"Application restarted\\\");\n\n} catch (Exception e) {\nlog.error(\\\"Error restarting application\\\", e);\n}\n});\n\nthread.setDaemon(false);\nthread.setContextClassLoader(Thread.currentThread().getContextClassLoader());\nthread.start();\n\nreturn \\\"Application restart initiated\\\";\n}", "CodeBleu_score": 26.80311274417344}, {"code": "public Object restart(){\n\t\nThread thread = new Thread(() -> {\n\ntry {\n\nlog.info(\\\"Restarting application...\\\");\n\nThread.currentThread().setContextClassLoader(application.getClassLoader());\n\napplication.run(args);\n\n} catch (Exception e) {\n\nlog.error(\\\"Error restarting application\\\", e);\n\n}\n\n});\n\nthread.setDaemon(false);\n\nthread.start();\n\nreturn \\\"Application restart initiated\\\";\n\n}", "CodeBleu_score": 37.033496838171544}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configHttpMessageCodecs(configurer);\n }", "CodeBleu_score": 8.002881139159781}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configurer.defaultCodecs().jackson2JsonEncoder(objectMapper).jackson2JsonDecoder(objectMapper);\n }", "CodeBleu_score": 29.2900232460031}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t config.configureHttpMessageCodecs(configurer);\n }", "CodeBleu_score": 8.618479551047239}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t", "CodeBleu_score": 1.7307821270007306}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t", "CodeBleu_score": 1.7307821270007306}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn route(method(HttpMethod.GET), \"/console/**\")\n.and(path(\"/console/assets/**\").negate())\n.and(accept(MediaType.TEXT_HTML))\n.and(WebSocketRequestPredicate.not())\n.and(checkDirectoryTraversal(resourceProperties.getStaticLocations()))\n.and(BodyInserters.fromValue(\"\"))\n.and(staticIndex());\n}", "CodeBleu_score": 28.217394243322303}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t consolePredicate = method(HttpMethod.GET)\n   .and(path(\"/uc/**\").and(path(\"/uc/assets/**\").negate()))\n   .and(accept(MediaType.TEXT_HTML))\n   .and(new WebSocketRequestPredicate().negate());\nreturn route(consolePredicate,\n    request -> this.serveIndex(haloProp.getConsole().getLocation() + \"index.html\"));\n}", "CodeBleu_score": 86.75244168130651}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t ucPredicate = method(HttpMethod.GET)\n.and(path(\"/uc/**\").and(path(\"/uc/assets/**\").negate()))\n.and(accept(MediaType.TEXT_HTML))\n.and(new WebSocketRequestPredicate().negate());\nreturn route(ucPredicate, request -> this.serveIndex(haloProp.getUc().getLocation() + \"index.html\"));\n}", "CodeBleu_score": 82.55923697956887}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\tr ucPredicate = method(HttpMethod.GET)\n\t\t.and(path(\"/uc/**\").and(path(\"/uc/assets/**\").negate()))\n\t\t.and(accept(MediaType.TEXT_HTML))\n\t\t.and(new WebSocketRequestPredicate().negate());\n\treturn route(ucPredicate, request -> this.serveIndex(haloProp.getUc().getLocation() + \"index.html\"));\n}", "CodeBleu_score": 85.91322295052221}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\tepository = new InMemoryReactiveIndexedSessionRepository(new ConcurrentHashMap<>(), sessionProperties.getMaxInactiveInterval());\n\nreturn sessionRepository;\n\n}", "CodeBleu_score": 25.772396777223953}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\troperties = sessionProperties();\nvar serverProperties = serverProperties();\nvar sessionRepository = new InMemoryReactiveIndexedSessionRepository(new ConcurrentHashMap<>());\nsessionRepository.setDefaultSessionTimeout(Duration.ofSeconds(sessionProperties.getTimeout()));\nsessionRepository.setDefaultMaxInactiveInterval(Duration.ofSeconds(serverProperties.getTimeout().getSeconds()));\nreturn sessionRepository;\n}", "CodeBleu_score": 46.10681000306271}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\tMemoryReactiveIndexedSessionRepository<>(new ConcurrentHashMap<>(), sessionProperties.getTimeout());\n}", "CodeBleu_score": 11.459806925445843}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\te the DefaultUserDetailService instance\nvar userDetailsService = new DefaultUserDetailService(userService, roleService);\n\n// Configure the DefaultUserDetailService instance to enable or disable two-factor authentication based on the security settings in HaloProperties\nuserDetailsService.setEnableTwoFactorAuthentication(haloProperties.getSecurity().isTwoFactorAuthenticationEnabled());\n\n// Return the configured DefaultUserDetailService instance\nreturn userDetailsService;\n}", "CodeBleu_score": 49.440266193755505}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tDefaultUserDetailService instance using the provided user and role services\nDefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService);\n\n// Enable or disable two-factor authentication based on the security settings in HaloProperties\nif (haloProperties.getSecurity().isTwoFactorAuthenticationEnabled()) {\nuserDetailsService.setTwoFactorAuthenticationEnabled(true);\n} else {\nuserDetailsService.setTwoFactorAuthenticationEnabled(false);\n}\n\n// Return the configured DefaultUserDetailService instance\nreturn userDetailsService;\n}", "CodeBleu_score": 44.50997542416679}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\te DefaultUserDetailService with the provided user and role services\nvar userDetailsService = new DefaultUserDetailService(userService, roleService);\n\n// Enable or disable two-factor authentication based on the security settings in HaloProperties\nif (haloProperties.getSecurity().isTwoFactorEnabled()) {\nuserDetailsService.setTwoFactorAuthenticationEnabled(true);\n}\n\nreturn userDetailsService;\n}", "CodeBleu_score": 44.862066543719905}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\t\treturn new Comment.CommentOwner(kind, email!= null? email : \"\", displayName, avatar, website);\n}", "CodeBleu_score": 5.889627637174956}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t\nreturn new Comment.CommentOwner() {\n\n/**\n * @return the kind\n */\n@Override\npublic String getKind() {\nreturn \"email\";\n}\n\n/**\n * @return the email\n */\n@Override\npublic String getEmail() {\nreturn StringUtils.defaultIfEmpty(this.email, \"\");\n}\n\n/**\n * @return the avatar\n */\n@Override\npublic String getAvatar() {\nreturn this.avatar;\n}\n\n/**\n * @return the displayName\n */\n@Override\npublic String getDisplayName() {\nreturn this.displayName;\n}\n\n/**\n * @return the website\n */\n@Override\npublic String getWebsite() {\nreturn this.website;\n}\n\n/**\n * @return the annotations\n */\n@Override\npublic Map<String, Object> getAnnotations() {\nMap<String, Object> annotations = new LinkedHashMap<>();\nannotations.put(\"avatar\", this.avatar);\nannotations.put(\"website\", this.website);\nreturn annotations;\n}\n};\n}", "CodeBleu_score": 30.53980470206318}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t\tComment.CommentOwner commentOwner = new Comment.CommentOwner();\n\tcommentOwner.setKind(\"email\");\n\tcommentOwner.setEmail(StringUtils.isEmpty(email)? \"\" : email);\n\tcommentOwner.setDisplayName(displayName);\n\tcommentOwner.setAvatar(avatar);\n\tcommentOwner.setWebsite(website);\n\treturn commentOwner;\n}", "CodeBleu_score": 35.4608633500351}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t", "CodeBleu_score": 3.7030608954755904}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tequals(commentOwner.getKind(), Comment.CommentOwner.Kind.EMAIL)) {\n\t\treturn isPostOwnerByEmail(post, commentOwner);\n\t}\n\treturn StringUtils.equals(commentOwner.getName(), post.getSpec().getOwner().getName());\n}", "CodeBleu_score": 24.182902825058996}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tec().getOwner().getKind().equals(commentOwner.getKind()) && (post.getSpec().getOwner().getKind().equals(User.Kind.EMAIL)? post.getSpec().getOwner().getName().equals(commentOwner.getName()) : post.getSpec().getOwner().getName().equals(commentOwner.getName()));\n}", "CodeBleu_score": 27.831560293612007}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\ttOptions options = new ListOptions();\noptions.setFieldSelector(fieldSelector);\n\nif (StringUtils.isNotBlank(getOwnerKind())) {\noptions.setConditions(and(\nequal(\\\"ownerKind\\\", getOwnerKind()),\ncontains(\\\"ownerName\\\", getOwnerName())\n));\n}\n\nif (StringUtils.isNotBlank(getKeyword())) {\noptions.setConditions(and(\noptions.getConditions(),\ncontains(\\\"metadata.name\\\", getKeyword())\n));\n}\n\nreturn options;\n}", "CodeBleu_score": 18.66225088185103}, {"code": "public ListOptions toListOptions(){\n\ttOptions listOptions = new ListOptions();\nFieldSelector fieldSelector = labelAndFieldSelectorToListOptions(this.exchange);\nlistOptions.setFieldSelector(fieldSelector);\nif (StringUtils.isNotBlank(getKeyword())) {\nlistOptions.setQuery(and(\nequal(\\\"status.status\\\", Comment.Status.PUBLISHED),\ncontains(\\\"metadata.name\\\", getKeyword())\n));\n}\nif (StringUtils.isNotBlank(getOwnerKind())) {\nlistOptions.setQuery(and(\nlistOptions.getQuery(),\nequal(\\\"owner.kind\\\", getOwnerKind())\n));\n}\nif (StringUtils.isNotBlank(getOwnerName())) {\nlistOptions.setQuery(and(\nlistOptions.getQuery(),\nequal(\\\"owner.name\\\", getOwnerName())\n));\n}\nreturn listOptions;\n}", "CodeBleu_score": 28.10468439280216}, {"code": "public ListOptions toListOptions(){\n\ttOptions listOptions = new ListOptions();\n\nFieldSelector fieldSelector = labelAndFieldSelectorToListOptions(getLabel(), getField());\n\nif (StringUtils.isNotBlank(getKeyword())) {\nfieldSelector = fieldSelector.and(contains(Comment.class, \\\"content\\\", getKeyword()));\n}\n\nif (StringUtils.isNotBlank(getOwnerKind())) {\nfieldSelector = fieldSelector.and(equal(Comment.class, \\\"owner.kind\\\", getOwnerKind()));\n}\n\nif (StringUtils.isNotBlank(getOwnerName())) {\nfieldSelector = fieldSelector.and(equal(Comment.class, \\\"owner.name\\\", getOwnerName()));\n}\n\nlistOptions.setFieldSelector(fieldSelector);\nreturn listOptions;\n}", "CodeBleu_score": 25.612608945861876}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\treturn Mono.defer(() -> {\nif (StringUtils.isEmpty(commentName)) {\nreturn Mono.error(new IllegalArgumentException(\\\"The comment name must not be null or empty.\\\"));\n}\nreturn client.fetch(Counter.class, commentName)\n\n.map(counter -> {\nvar stats = new CommentStats();\nstats.setDownvoteCount(counter.getSpec().getDownvoteCount());\nstats.setUpvoteCount(counter.getSpec().getUpvoteCount());\nreturn stats;\n});\n})\n.switchIfEmpty(Mono.empty());\n}", "CodeBleu_score": 49.47557032022471}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\tif (commentName == null) {\nreturn Mono.empty();\n}\nreturn counterService.fetch(commentName).map(counter -> {\nCommentStats stats = new CommentStats();\nstats.setUpvoteCount(counter.getUpvoteCount());\nreturn stats;\n});\n}", "CodeBleu_score": 19.91756677226452}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\tAssert.notNull(commentName, \\\"The comment name must not be null.\\\");\nreturn counterService.getCounter(commentName)\n.map(counter -> new CommentStats(counter.getUpvote()))\n.defaultIfEmpty(new CommentStats(0));\n}", "CodeBleu_score": 17.452288210324017}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\tif (identity == null ||!StringUtils.hasText(identity.getName())) {\nreturn;\n}\n\nvar subscriber = new Subscriber(identity);\nvar interest = new Interest(\nNotificationReasonConst.SOMEONE_REPLIED_TO_YOU,\nnew Condition(ConditionType.EQUALS, \"owner\", identity.getName())\n);\n\ntry {\nnotificationCenter.subscribe(subscriber, interest);\n} catch (Exception e) {\n// TODO: Handle exception\n}\n}", "CodeBleu_score": 46.82336769455515}, {"code": "void subscribeReply(UserIdentity identity){\n\tvar subscriber = new Subscriber(identity);\nvar reason = new InterestReason(InterestReasonType.SOMEONE_REPLIED_TO_YOU,\nnew InterestCondition(InterestConditionType.MATCHES_NAME,\nsubscriber.getName()));\nvar subscription = new Subscription(subscriber, reason);\nnotificationCenter.subscribe(subscription);\n}", "CodeBleu_score": 38.50578204574522}, {"code": "void subscribeReply(UserIdentity identity){\n\tvar subscriber = new Subscriber(identity);\nvar interest = new Interest(\nNotificationReasonConst.REPLY,\nCondition.of(Condition.Type.EQUALS, \"owner\", identity.getName()));\n\ntry {\nnotificationCenter.subscribe(subscriber, interest);\n} catch (Exception e) {\n// Handle exception\n}\n}", "CodeBleu_score": 37.483261891651196}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\t client.update(comment, comment.getSpec().getApproved()? null : (commentSpec) -> commentSpec.setApproved(true).setApprovedAt(Instant.now()))\n.retryWhen(Retry.backoff(5, Duration.ofSeconds(1))\n.filter(throwable -> throwable instanceof OptimisticLockingFailureException)\n.doOnNext(throwable -> {\nif (throwable instanceof OptimisticLockingFailureException) {\nvar comment = ((OptimisticLockingFailureException) throwable).getFailedVersion();\nvar commentSpec = comment.getSpec();\nif (commentSpec.getApproved()) {\ncommentSpec.setApproved(false);\ncommentSpec.setApprovedAt(null);\n}\n}\n}));\n}", "CodeBleu_score": 34.93566233763372}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t client.update(comment.getName(), comment, comment.getSpec())\n.retryWhen(Retry.backoff(5, Duration.ofSeconds(1))\n.filter(e -> e instanceof OptimisticLockingFailureException))\n.flatMap(updatedComment -> {\ncomment.setApproved(true);\ncomment.setApprovedAt(Instant.now());\nreturn Mono.just(comment);\n});\n}", "CodeBleu_score": 25.95394898840318}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t client.update(comment, comment.getSpec().getApproved(), comment.getSpec().getApprovedAt())\n.retryWhen(Retry.backoff(5, Duration.ofSeconds(1))\n.filter(e -> e instanceof OptimisticLockingFailureException))\n.flatMap(updatedComment -> client.update(updatedComment, updatedComment.getSpec().getApproved(), updatedComment.getSpec().getApprovedAt()));\n}", "CodeBleu_score": 28.077571546787293}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n$action->setComponent($this);\n}\n\nif ($action instanceof HasRecord) {\n$action->setRecord($this->record);\n}\n\nreturn $action;\n}", "CodeBleu_score": 45.35843925857998}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n$action->setComponent($this);\n}\n\nif ($action instanceof HasRecord) {\n$action->setRecord($this->getRecord());\n}\n\nreturn $action;\n}", "CodeBleu_score": 52.97342063676034}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n$action->setComponent($this);\n}\n\nif ($action instanceof HasRecord) {\n$action->setRecord($this->record);\n}\n\nreturn $action;\n}", "CodeBleu_score": 45.35843925857998}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->evaluate($this->successRedirectUrl);\n\nif (filled($url)) {\n$this->redirect($url);\n}\n\nreturn $this; }", "CodeBleu_score": 89.45820739757035}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->evaluate($this->successRedirectUrl);\n\nif (filled($url)) {\n$this->redirect($url);\n}\n\nreturn $this; }", "CodeBleu_score": 89.45820739757035}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->evaluate($this->successRedirectUrl);\n\nif (filled($url)) {\n$this->redirect($url);\n}\n\nreturn $this; }", "CodeBleu_score": 89.45820739757035}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t! $record) {\nreturn;\n}\n\n$tagModel = $this->getTagModel();\n\n$tags = $tagModel::query()\n->whereIn('name', $state)\n->get();\n\n$record->syncTags($tags);\n}", "CodeBleu_score": 19.679062360108112}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t! $record ||! method_exists($record,'syncTagsWithType')) {\nreturn;\n}\n\n$tagModelClass = Tag::class;\n$tags = collect($state)->map(fn ($name) => $tagModelClass::firstOrCreate(['name' => $name]));\n\n$record->syncTags($tags);\n}", "CodeBleu_score": 23.467851664725597}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t! $record ||! method_exists($record, 'tagsWithType')) {\nreturn;\n}\n\n$type = $this->getType();\n\nif (! $type) {\nreturn;\n}\n\n$tagModelClass = $type->getTagModelClass();\n\n$tags = collect($state)->map(function (string $tagName) use ($tagModelClass) {\nreturn $tagModelClass::firstOrCreate(['name' => $tagName]);\n})->pluck('id')->all();\n\n$record->syncTags($tags);\n}", "CodeBleu_score": 35.87546412073386}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := paths.DissectRepositoryPath(repoPath)\n\tif err!= nil {\n\t\treturn fmt.Errorf(\"failed to dissect repository path: %w\", err)\n\t}\n\n\tscope := authz.NewScope(spacePath, repoName, pipelineIdentifier)\n\tresource := authz.NewResource(spacePath, repoName, pipelineIdentifier)\n\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 55.731066407016804}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tif repoPath == \"\" {\n\t\treturn fmt.Errorf(\\\"repo path cannot be empty\\\")\n\t}\n\tif pipelineIdentifier == \"\" {\n\t\treturn fmt.Errorf(\\\"pipeline identifier cannot be empty\\\")\n\t}\n\tif permission == enum.Permission_NONE {\n\t\treturn fmt.Errorf(\\\"permission cannot be NONE\\\")\n\t}\n\tscope, resource, err := paths.SplitRepoPath(repoPath)\n\tif err!= nil {\n\t\treturn fmt.Errorf(\\\"failed to dissect repo path: %w\\\", err)\n\t}\n\tscope.Identifier = pipelineIdentifier\n\tresource.Identifier = pipelineIdentifier\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 46.55495654175602}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repoName, err := paths.DissectRepositoryPath(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline.\n\tscope := authz.NewScope(spacePath, repoName, pipelineIdentifier)\n\tresource := authz.NewResource(scope, permission)\n\n\t// Perform the authorization check.\n\treturn authorizer.Check(ctx, session, resource)\n}", "CodeBleu_score": 39.03633141539727}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tif space == nil {\n\t\treturn fmt.Errorf(\\\"space cannot be nil\\\")\n\t}\n\n\t// Get the parent space and name\n\tparentSpace, name := paths.GetSpace(space.Path)\n\t// Create a scope and resource based on the parent space and name\n\tscope := authz.NewScope(parentSpace.Name, parentSpace.ID)\n\tresource := authz.NewResource(name, space.ID)\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 43.72237071404482}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparentSpace := space.Parent\n\tparentSpaceName := space.ParentName\n\n\tscope := authz.Scope{\n\t\tParent:  parentSpace,\n\t\tName:    parentSpaceName,\n\t\tType:    enum.Space,\n\t\tResource: authz.Resource{\n\t\t\tName:    space.Name,\n\t\t\tType:    enum.Space,\n\t\t\tPath:    paths.GetSpacePath(parentSpace, parentSpaceName, space.Name),\n\t\t\tID:      space.ID,\n\t\t\tVersion: space.Version,\n\t\t},\n\t}\n\n\tresource := authz.Resource{\n\t\tName:    space.Name,\n\t\tType:    enum.Space,\n\t\tPath:    paths.GetSpacePath(parentSpace, parentSpaceName, space.Name),\n\t\tID:      space.ID,\n\t\tVersion: space.Version,\n\t}\n\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 47.321255838420264}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tif space == nil {\n\t\treturn fmt.Errorf(\\\"space is nil\\\")\n\t}\n\n\tparentSpace, parentSpaceName, err := paths.GetParentSpace(space.Path)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\tscope, resource, err := authz.CreateScopeAndResource(parentSpace, parentSpaceName)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\treturn authz.Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 55.229903056332134}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\ten(source) == 0 {\n\t\treturn json.Marshal(data)\n\t}\n\n\tvar decoded any\n\tif err := json.Unmarshal(source, &decoded); err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Remove any trailing newline from the result.\n\tresult, err := json.Marshal(decoded)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\tresult = bytes.TrimRight(result, \"\n\")\n\n\treturn result, nil\n}", "CodeBleu_score": 36.718297061590555}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\ten(source) == 0 {\n\t\treturn json.Marshal(data)\n\t}\n\n\tvar decoded any\n\tif err := json.Unmarshal(source, &decoded); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tsanitized, err := json.Marshal(decoded)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif err := json.Unmarshal(sanitized, &data); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tsanitized = bytes.TrimRight(sanitized, \"\n\")\n\treturn sanitized, nil\n}", "CodeBleu_score": 39.82166622931756}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\ten(source) == 0 {\n\t\t// If the source is empty, marshal the data and return the result.\n\t\tresult, err := json.Marshal(data)\n\t\tif err!= nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn result, nil\n\t}\n\n\t// If the source is not empty, decode it as JSON and disallow unknown fields.\n\tvar decodedData any\n\tif err := json.Unmarshal(source, &decodedData); err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Encode the decoded data to ensure it conforms to the required format.\n\tresult, err := json.Marshal(decodedData)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Remove any trailing newline from the result before returning the sanitized JSON.\n\tresult = bytes.TrimRight(result, \"\n\")\n\treturn result, nil\n}", "CodeBleu_score": 38.735700181108484}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.repoStore.Get(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif err := c.authorizer.CheckPermission(ctx, session, repo, reqPermission); err!= nil {\n\t\treturn nil, usererror.New(err)\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 37.93472325921742}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.repoStore.GetByReference(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, usererror.New(err)\n\t}\n\tif err := c.authorizer.CheckPermission(ctx, repo, session, reqPermission); err!= nil {\n\t\treturn nil, usererror.New(err)\n\t}\n\treturn repo, nil\n}", "CodeBleu_score": 40.57861002123211}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.repoStore.Get(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif err := c.authorizer.Check(ctx, session, repo, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 36.50039229664206}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tvar checkSanitizers = map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{}\n\tcheckSanitizers[enum.CheckPayloadKindEmpty] = func(in *ReportInput, s *auth.Session) error {\n\t\tif in.Raw == \"\" {\n\t\t\treturn nil\n\t\t}\n\t\treturn usererror.New(\"raw payload is not allowed for empty checks\")\n\t}\n\tcheckSanitizers[enum.CheckPayloadKindRaw] = func(in *ReportInput, s *auth.Session) error {\n\t\tif in.Raw == \"\" {\n\t\t\treturn usererror.New(\"raw payload is not allowed for empty checks\")\n\t\t}\n\t\treturn nil\n\t}\n\tcheckSanitizers[enum.CheckPayloadKindMarkdown] = func(in *ReportInput, s *auth.Session) error {\n\t\tif in.Raw == \"\" {\n\t\t\treturn usererror.New(\"raw payload is not allowed for empty checks\")\n\t\t}\n\t\treturn nil\n\t}\n\tcheckSanitizers[enum.CheckPayloadKindPipeline] = func(in *ReportInput, s *auth.Session) error {\n\t\tif in.Raw == \"\" {\n\t\t\treturn usererror.New(\"raw payload is not allowed for empty checks\")\n\t\t}\n\t\treturn nil\n\t}\n\treturn checkSanitizers\n}", "CodeBleu_score": 33.40417464507863}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tcheckSanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tcheckSanitizers[enum.CheckPayloadKind_Empty] = SanitizeEmptyCheck\n\tcheckSanitizers[enum.CheckPayloadKind_Raw] = SanitizeRawCheck\n\tcheckSanitizers[enum.CheckPayloadKind_Markdown] = SanitizeMarkdownCheck\n\tcheckSanitizers[enum.CheckPayloadKind_Pipeline] = SanitizePipelineCheck\n\treturn checkSanitizers\n}", "CodeBleu_score": 43.39100833955692}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tcheckSanitizers := map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{}\n\tcheckSanitizers[enum.CheckPayloadKindEmpty] = func(in *ReportInput, s *auth.Session) error {\n\t\treturn nil\n\t}\n\tcheckSanitizers[enum.CheckPayloadKindRaw] = func(in *ReportInput, s *auth.Session) error {\n\t\tif in.Check.Raw == nil {\n\t\t\treturn usererror.NewInvalidCheckPayloadError(in.Check.Raw)\n\t\t}\n\t\tin.Check.Raw = SanitizeRaw(in.Check.Raw)\n\t\treturn nil\n\t}\n\tcheckSanitizers[enum.CheckPayloadKindMarkdown] = func(in *ReportInput, s *auth.Session) error {\n\t\tif in.Check.Markdown == nil {\n\t\t\treturn usererror.NewInvalidCheckPayloadError(in.Check.Markdown)\n\t\t}\n\t\tin.Check.Markdown = SanitizeRaw(in.Check.Markdown)\n\t\treturn nil\n\t}\n\tcheckSanitizers[enum.CheckPayloadKindPipeline] = func(in *ReportInput, s *auth.Session) error {\n\t\tif in.Check.Pipeline == nil {\n\t\t\treturn usererror.NewInvalidCheckPayloadError(in.Check.Pipeline)\n\t\t}\n\t\tin.Check.Pipeline = SanitizePipeline(in.Check.Pipeline)\n\t\treturn nil\n\t}\n\treturn checkSanitizers\n}", "CodeBleu_score": 34.16953796240784}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif not self.state.is_attached_to_screen then\n\t\tself:attach_to_changes()\n\t\tself.state.is_attached_to_screen = true\n\tend\n\n\tself.state.on_render = on_render\n\n\treturn self", "CodeBleu_score": 54.046417235457454}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tlocal renderer = self.renderer\n\tif renderer == nil then\n\t\treturn self\n\tend\n\n\tif not self.state.is_attached_to_screen then\n\t\tself:attach_to_changes({\n\t\t\ton_lines = function(bufnr, first_line, last_line, new_first_line)\n\t\t\t\tif bufnr == self.bufnr then\n\t\t\t\t\tself.state.on_render()\n\t\t\t\tend\n\t\t\tend,\n\t\t})\n\t\tself.state.is_attached_to_screen = true\n\tend\n\n\tself.state.on_render = on_render\n\n\treturn self", "CodeBleu_score": 47.56050995707115}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tself.state.on_render = on_render\n\tif not self.state.is_attached_to_screen then\n\t\tself:attach_to_changes()\n\t\tself.state.is_attached_to_screen = true\n\tend\n\n\treturn self", "CodeBleu_score": 60.420294666499586}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t\t-- If the buffer is valid and a callback is provided, execute the callback function.\n\tif self.filename and callback then\n\t\t-- Create a file watcher for the buffer's filename.\n\t\tlocal watcher = self.watcher\n\n\t\t-- Start watching the file.\n\t\twatcher:watch(self.filename, callback)\n\tend", "CodeBleu_score": 27.974007800378654}, {"code": "function Buffer:watch(callback)\n\t\tlocal filename = self.filename\n\tif not filename or filename == '' then\n\t\treturn\n\tend\n\n\tif not fs.exists(filename) then\n\t\treturn\n\tend\n\n\tself.watcher:watch(filename, function(event, filename)\n\t\tif event =='modified' then\n\t\t\tcallback(filename)\n\t\tend\n\tend)\n\n\treturn self", "CodeBleu_score": 34.58944078360834}, {"code": "function Buffer:watch(callback)\n\t\tif self.watcher:is_watching() then\n\t\treturn\n\tend\n\n\tif not self:is_in_disk() then\n\t\treturn\n\tend\n\n\tlocal filename = self.filename\n\tif not filename or filename == '' then\n\t\treturn\n\tend\n\n\tlocal function on_change()\n\t\tif self.watcher:is_watching() then\n\t\t\treturn\n\t\tend\n\n\t\tif not self:is_in_disk() then\n\t\t\treturn\n\t\tend\n\n\t\tif callback then\n\t\t\tcallback()\n\t\tend\n\tend\n\n\tself.watcher:watch(filename, on_change)", "CodeBleu_score": 42.13923230394801}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t\tif self.hex then \n\t\treturn self.hex \n\tend\n\n\tlocal spec = self.spec\n\tlocal attr = spec.attr\n\tlocal highlight = vim.api.nvim_get_hl_by_ID(attr)\n\tlocal color = highlight.foreground or highlight.background\n\tif color then\n\t\tlocal r, g, b = color:match('^#(....)(....)(....)$')\n\t\tlocal hex = string.format('%02x%02x%02x', r, g, b)\n\t\tself.hex = hex\n\t\treturn hex\n\telse\n\t\treturn nil\n\tend", "CodeBleu_score": 52.139349990079275}, {"code": "function Color:to_hex()\n\t\tif self.hex then \n\t\treturn self.hex \n\tend\n\tlocal spec = self.spec\n\tlocal attr = spec.attr\n\tlocal color = spec.color\n\tlocal highlight = vim.api.nvim_get_hl_by_id(color)\n\tlocal hex = highlight and highlight[attr]\n\tif hex then \n\t\thex = string.format('%06x', hex)\n\tend\n\tself.hex = hex\n\treturn hex", "CodeBleu_score": 54.119684482494776}, {"code": "function Color:to_hex()\n\t\tif self.hex then\n\t\treturn self.hex\n\tend\n\n\tlocal spec = self.spec\n\tlocal attr = spec.attr\n\tlocal hl_group = attr == 'fg' and 'vgit_hl_fg' or 'vgit_hl_bg'\n\tlocal hl_id = vim.api.nvim_get_hl_by_name(hl_group, true)\n\n\tlocal hex = vim.api.nvim_get_hl_by_id(hl_id, true).foreground\n\tif not hex then\n\t\thex = vim.api.nvim_get_hl_by_id(hl_id, true).background\n\tend\n\n\tif hex then\n\t\tself.hex = hex\n\t\treturn hex\n\tend\n\n\tlocal rgb = self:to_rgb()\n\tself.hex = Rgb.to_hex(rgb)\n\treturn self.hex", "CodeBleu_score": 50.92062016351022}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = vim.api.nvim_buf_get_lines(buffer.bufnr, 0, -1, false)\n\tfor _, line in ipairs(lines) do\n\t\tlocal matches = vim.regex_match(line, pattern, 0, {})\n\t\tfor _, match in ipairs(matches) do\n\t\t\tself:add_highlight(buffer, hl, match[1], match[2], match[3])\n\t\tend\n\tend\n\n\treturn self", "CodeBleu_score": 37.57595997405879}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = vim.api.nvim_buf_get_lines(buffer.bufnr, 0, -1, false)\n\tfor _, line in ipairs(lines) do\n\t\tlocal matches = line:gmatch(pattern)\n\t\tfor match in matches do\n\t\t\tlocal col_start = line:find(match)\n\t\t\tlocal col_end = col_start + #match\n\t\t\tself:add_highlight(buffer, hl, #lines, col_start, col_end)\n\t\tend\n\tend\n\n\treturn self", "CodeBleu_score": 44.4138472729353}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = vim.api.nvim_buf_get_lines(buffer.bufnr, 0, -1, false)\n\tfor _, line in ipairs(lines) do\n\t\tfor match in line:gmatch(pattern) do\n\t\t\tself:add_highlight(buffer, hl, line:match('^.*", "CodeBleu_score": 25.721492958450966}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = string.format('%s:%s:%s:%s:%s', buffer.bufnr, row, col, pos, priority)\n\tvim.api.nvim_buf_set_extmark(buffer.bufnr, self.ns_id, row, col, {\n\t\tvirt_text = {\n\t\t\t{ text, hl },\n\t\t},\n\t\tvirt_text_pos = pos,\n\t\tpriority = priority,\n\t})\n\treturn id", "CodeBleu_score": 60.84573380824728}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = string.format('tanvirtin/vgit.nvim/hunk/virtual_text/%s', buffer.bufnr)\n\n\tvim.api.nvim_buf_set_extmark(buffer.bufnr, self.ns_id, row, col, {\n\t\tid = id,\n\t\ttext = text,\n\t\thl_group = hl,\n\t\tposition = pos,\n\t\tpriority = priority\n\t})\n\n\treturn id", "CodeBleu_score": 51.999727041104535}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = string.format(\"tanvirtin/vgit.nvim/hunk/virtual_text/%s/%s/%s/%s/%s\", buffer.bufnr, row, col, pos, priority)\n\tvim.api.nvim_buf_set_virtual_text(buffer.bufnr, self.ns_id, id, { { text, hl } })\n\n\treturn id", "CodeBleu_score": 47.96997170083182}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = ''\n\tlocal remaining = output\n\twhile remaining ~= '' do\n\t\tlocal char = remaining:sub(1, 1)\n\t\tremaining = remaining:sub(2)\n\t\tif char == '", "CodeBleu_score": 17.358629696291644}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = ''\n\tfor c in output:gmatch('.') do\n\t\tif c == '", "CodeBleu_score": 7.1496541114432555}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal result = \"\"\n\tlocal line = \"\"\n\tfor c in output:gmatch(\".\") do\n\t\tresult = result.. c\n\t\tif c == \"", "CodeBleu_score": 11.643337909923556}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t\tif not self.watcher then\n\t\tself.watcher = luv.fs_event_create()\n\tend\n\tluv.fs_event_start(self.watcher, path, luv.FS_EVENT_CREATE, handler)\n\treturn self", "CodeBleu_score": 39.982399089507666}, {"code": "function Watcher:watch_file(path, handler)\n\t\tlocal watcher = self.watcher\n\tif not watcher then\n\t\twatcher = self.watcher = luv.fs_event_create()\n\t\tif not watcher then\n\t\t\treturn nil\n\t\tend\n\t\tlocal status = luv.fs_event_start(watcher, path, luv.FS_EVENT_CREATE, self.interval, function(err, event)\n\t\t\tif err then\n\t\t\t\treturn\n\t\t\tend\n\t\t\tif event.name == path then\n\t\t\t\thandler()\n\t\t\tend\n\t\tend)\n\t\tif not status then\n\t\t\treturn nil\n\t\tend\n\tend\n\treturn watcher", "CodeBleu_score": 41.53155592804635}, {"code": "function Watcher:watch_file(path, handler)\n\t\tif not path then\n\t\treturn nil\n\tend\n\n\tif self.watcher then\n\t\treturn self.watcher\n\tend\n\n\tlocal watcher = luv.fs_event_create()\n\tlocal err = luv.fs_event_start(watcher, path, luv.FS_EVENT_CREATE, luv.FS_EVENT_DELETE, luv.FS_EVENT_RENAME, luv.FS_EVENT_WRITE, luv.FS_EVENT_MOVE, luv.FS_EVENT_ISDIR, luv.FS_EVENT_CLOSE_WRITE, luv.FS_EVENT_CLOSE_NOWRITE, luv.FS_EVENT_OPEN, luv.FS_EVENT_ACCESS, luv.FS_EVENT_ALL, luv.FS_EVENT_RECURSIVE, luv.FS_EVENT_ONESHOT, function(watcher, event, path)\n\t\thandler(event, path)\n\tend)\n\n\tif err ~= 0 then\n\t\treturn nil\n\tend\n\n\tself.watcher = watcher\n\n\treturn watcher", "CodeBleu_score": 47.72096299956947}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t\t-- Retrieve the buffer lines\n\tlocal lines = self:get_lines()\n\t-- Calculate the hunks\n\tlocal hunks, error = self.git_object:live_hunks(lines)\n\tif error then\n\t\treturn error\n\tend\n\t-- Set up signs\n\tself:set_var('vgit_hunks', hunks)\n\tself:set_var('vgit_signs', self:generate_signs(hunks))\n\t-- Update the buffer signs\n\tself:update_signs()\n\t-- Return the hunks\n\treturn hunks", "CodeBleu_score": 25.076614654542595}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal buffer_lines = self:get_lines()\n\tlocal hunks = self.git_object:live_hunks(buffer_lines)\n\tif hunks == nil then\n\t\treturn hunks\n\tend\n\tself:process_hunks(hunks)\n\tself:set_var('vgit_hunks', hunks)\n\treturn hunks", "CodeBleu_score": 18.759101992712726}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal lines = self:get_lines()\n\tlocal hunks = self.git_object:hunks_from_lines(lines)\n\tif hunks == nil then\n\t\treturn hunks\n\tend\n\n\tself:set_var('vgit_hunks', hunks)\n\tself:set_var('vgit_hunks_lines', lines)\n\tself:set_var('vgit_hunks_lines_count', #lines)\n\tself:set_var('vgit_hunks_count', #hunks)\n\tself:set_var('vgit_hunks_count_added', #hunks.added)\n\tself:set_var('vgit_hunks_count_removed', #hunks.removed)\n\tself:set_var('vgit_hunks_count_modified', #hunks.modified)\n\tself:set_var('vgit_hunks_count_unchanged', #hunks.unchanged)\n\n\tself:set_var('vgit_hunks_count_added_signs', #hunks.added_signs)\n\tself:set_var('vgit_hunks_count_removed_signs', #hunks.removed_signs)\n\tself:set_var('vgit_hunks_count_modified_signs', #hunks.modified_signs)\n\tself:set_var('vgit_hunks_count_unchanged_signs', #hunks.unchanged_signs)\n\n\tlocal signs = self:get_var('vgit_signs') or {}\n\tself:set_var('vgit_signs', signs)\n\tlocal hunk_signs = self:get_var('vgit_hunk_signs') or {}\n\tself:set_var('vgit_hunk_signs', hunk_signs)\n\n\tlocal signs_to_update = {}\n\tlocal hunk_signs_to_update = {}\n\tfor _, hunk in ipairs(hunks.added) do\n\t\tsigns_to_update[#signs_to_update + 1]", "CodeBleu_score": 33.592478702942074}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal temp_file_name = self.git:tracked_full_filename(self.filename.native).. '.vgit_temp'\n\tlocal temp_file = io.open(temp_file_name, 'w')\n\tif temp_file == nil then\n\t\treturn nil, 'Could not open temporary file '.. temp_file_name\n\tend\n\ttemp_file:write(patch)\n\ttemp_file:close()\n\tlocal result = self.git:stage_hunk(temp_file_name, self.filename.native)\n\tos.remove(temp_file_name)\n\treturn result", "CodeBleu_score": 43.81491876194914}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal temp_file_path = os.tmpname()\n\tlocal temp_file = io.open(temp_file_path, 'w')\n\ttemp_file:write(patch)\n\ttemp_file:close()\n\tlocal result = self.git:stage_hunk_from_patch(temp_file_path)\n\tos.remove(temp_file_path)\n\treturn result", "CodeBleu_score": 53.346884991322966}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal tempfile = self.git:tempfile()\n\ttempfile:write(patch:content())\n\ttempfile:close()\n\n\tlocal result = self.git:stage_hunk(tempfile:name())\n\ttempfile:unlink()\n\treturn result", "CodeBleu_score": 33.15676417769116}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tOAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), config.getAccessTokenEndpoint());\nrequest.addHeader(OAuthConstants.AUTHORIZATION, OAuthConstants.HEADER_BEARER + \\\" \\\" + config.getAccessToken());\nrequest.addBodyParameter(OAuthConstants.CLIENT_ID, config.getApiKey());\nrequest.addBodyParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret());\nrequest.addBodyParameter(GRANT_TYPE_KEY, GRANT_TYPE_CLIENT_CREDENTIALS);\nrequest.addBodyParameter(OAuthConstants.GRANT_TYPE, GRANT_TYPE_CLIENT_CREDENTIALS);\nResponse response = request.send();\nreturn api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 57.6717983526866}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tOAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());\nrequest.addHeader(api.getAuthorizationHeader(config, requestToken, verifier));\nrequest.addBodyParameter(GRANT_TYPE_KEY, GRANT_TYPE_CLIENT_CREDENTIALS);\nrequest.addBodyParameter(api.getAccessTokenBodyAccessTokenKey(), requestToken.getToken());\nrequest.addBodyParameter(api.getAccessTokenBodyAccessTokenSecretKey(), requestToken.getSecret());\nResponse response = request.send();\nreturn api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 74.97355402158341}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tOAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());\nrequest.addHeader(api.getAuthorizationHeader(requestToken, verifier));\nrequest.addBodyParameter(api.getAccessTokenBodyAccessToken(), requestToken.getToken());\nrequest.addBodyParameter(api.getAccessTokenBodyVerifier(), verifier.getValue());\nrequest.addBodyParameter(api.getAccessTokenBodyGrantType(), GRANT_TYPE_CLIENT_CREDENTIALS);\nResponse response = request.send();\nreturn api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 74.73333779583685}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\n// Configure the authentication cache\nfinal AuthCache authCache = new BasicAuthCache();\nauthCache.put(host, new BasicScheme());\n\n// Configure the credentials provider\nfinal CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\ncredentialsProvider.setCredentials(AuthScope.ANY, httpCredentials);\n\n// Assign the credentials provider to the context\ncontext.setCredentialsProvider(credentialsProvider);\n\n// Assign the authentication cache to the context\ncontext.setAuthCache(authCache);\n\nLOGGER.log(Level.FINE, \"Configured authentication for {0}\", host.getHostName());\n}", "CodeBleu_score": 55.26103202745498}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\nif (LOGGER.isLoggable(Level.FINE)) {\nLOGGER.fine(String.format(\"Configuring context for host %s\", host.getHostName()));\n}\n\n// create a credentials provider\nCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\ncredentialsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), httpCredentials);\n\n// create an authentication cache\nAuthCache authCache = new BasicAuthCache();\nauthCache.put(host, new BasicScheme());\n\n// set the credentials provider and auth cache to the context\ncontext.setCredentialsProvider(credentialsProvider);\ncontext.setAuthCache(authCache);\n}", "CodeBleu_score": 62.28501719852064}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\n// Configure the credentials provider\nCredentialsProvider provider = new BasicCredentialsProvider();\nprovider.setCredentials(AuthScope.ANY, httpCredentials);\n\n// Configure the authentication cache\nAuthCache authCache = new BasicAuthCache();\nauthCache.put(host, new BasicScheme());\n\n// Assign the credentials provider and authentication cache to the context\ncontext.setCredentialsProvider(provider);\ncontext.setAuthCache(authCache);\n\nLOGGER.log(Level.FINE, \"Configured authentication for {0}\", host);\n}", "CodeBleu_score": 69.94081570857695}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tif (source == null) {\nthrow new IllegalArgumentException(\\\"Source cannot be null.\\\");\n}\nif (size == null) {\nthrow new IllegalArgumentException(\\\"Size cannot be null.\\\");\n}\nif (size.isEmpty()) {\nthrow new IllegalArgumentException(\\\"Size cannot be empty.\\\");\n}\nJenkins jenkins = Jenkins.getInstance();\nif (jenkins == null) {\nthrow new IllegalStateException(\\\"Jenkins instance cannot be null.\\\");\n}\nAvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\nif (cache == null) {\nthrow new IllegalStateException(\\\"Avatar cache cannot be null.\\\");\n}\nString key = source.getUrl() + size;\ncache.seed(key);\ntry {\nreturn jenkins.getRootUrl() + \\\"/\\\" + ActionURI + \\\"/\\\" + URLEncoder.encode(key, StandardCharsets.UTF_8.name());\n} catch (UnsupportedEncodingException e) {\nthrow new IllegalStateException(\\\"UTF-8 encoding is unsupported.\\\");\n}\n}", "CodeBleu_score": 43.735598148584074}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\ttry {\nJenkins jenkins = Jenkins.getInstanceOrNull();\nif (jenkins == null) {\nthrow new IllegalStateException(\\\"Jenkins instance is null.\\\");\n}\nAvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\nif (cache == null) {\nthrow new IllegalStateException(\\\"Avatar cache is null.\\\");\n}\nString key = getCacheKey(source, size);\ncache.seed(key);\nString url = jenkins.getRootUrl() + \\\"/\\\" + ActionURI + \\\"/\\\" + URLEncoder.encode(key, \\\"UTF-8\\\");\nreturn url;\n} catch (UnsupportedEncodingException e) {\nthrow new IllegalStateException(\\\"UTF-8 encoding is not supported.\\\");\n}\n}", "CodeBleu_score": 44.1953707232003}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tif (source == null) {\nthrow new IllegalArgumentException(\\\"Source cannot be null\\\");\n}\nif (size == null) {\nthrow new IllegalArgumentException(\\\"Size cannot be null\\\");\n}\n\nAvatarCache cache = Jenkins.get().getExtensionList(AvatarCache.class).get(AvatarCache.class);\nif (cache == null) {\nthrow new IllegalStateException(\\\"Avatar cache is not available\\\");\n}\n\nString key = source.getCacheKey();\nif (key == null) {\nthrow new IllegalStateException(\\\"Source does not provide a cache key\\\");\n}\n\nsynchronized (cache) {\nif (cache.iterator == null) {\ncache.iterator = cache.cache.entrySet().iterator();\n}\n}\n\nString url;\nsynchronized (cache.serviceLock) {\nurl = cache.service.submit(new BuildUrlTask(key, size)).get();\n}\n\nreturn url;\n}", "CodeBleu_score": 43.2544070796045}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\nthis.image = image;\nthis.lastModified = lastModified;\nif (this.lastModified < 0) {\nthis.lastModified = System.currentTimeMillis();\n}\nif (image!= null && (image.getWidth() > 128 || image.getHeight() > 128)) {\nthis.image = scaleImage(image, 128);\n}\n}", "CodeBleu_score": 52.88096702357077}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\nthis.image = image;\nthis.lastModified = lastModified < 0? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 35.43325215371056}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tif (image == null) {\nthrow new IllegalArgumentException(\\\"image cannot be null\\\");\n}\nthis.source = source;\nif (lastModified < 0) {\nlastModified = System.currentTimeMillis();\n}\nthis.lastModified = lastModified;\nthis.image = image;\n}", "CodeBleu_score": 39.080267389748826}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\tif (future == null) {\nreturn false;\n}\ntry {\nCacheEntry entry = future.get();\nif (entry.image!= null) {\nthis.image = entry.image;\nthis.lastModified = entry.lastModified;\n}\nthis.future = null;\nreturn false;\n} catch (InterruptedException e) {\n// ignore\n} catch (ExecutionException e) {\n// ignore\n}\nreturn true;\n}", "CodeBleu_score": 41.56159309299186}, {"code": "private synchronized boolean pending(){\n\tif (future == null) {\nreturn false;\n}\ntry {\nCacheEntry entry = future.get();\nif (entry!= null) {\nimage = entry.image;\nlastModified = entry.lastModified;\nfuture = null;\n}\nreturn true;\n} catch (InterruptedException | ExecutionException e) {\n// ignore\n}\nreturn true;\n}", "CodeBleu_score": 44.48051294625052}, {"code": "private synchronized boolean pending(){\n\tif (future == null) {\nreturn false;\n}\ntry {\nCacheEntry entry = future.get();\nif (entry.image!= null) {\nimage = entry.image;\nlastModified = entry.lastModified;\n} else {\nimage = null;\nlastModified = System.currentTimeMillis();\n}\nfuture = null;\nreturn false;\n} catch (InterruptedException e) {\nreturn true;\n} catch (ExecutionException e) {\nreturn true;\n}\n}", "CodeBleu_score": 48.969537263704474}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\n//        rsp.setContentType(\"image/png\");\n//        rsp.addHeader(\"Cache-Control\", cacheControl);\n//        rsp.addDateHeader(\"Last-Modified\", lastModified);\n//        rsp.addDateHeader(\"Expires\", lastModified + 60 * 60 * 24 * 365);\n//        rsp.setStatus(HttpServletResponse.SC_OK);\n//        if (flushImage) {\n//            image.flush();\n//        }\n//        rsp.getOutputStream().write(image.getRGB(0, 0, image.getWidth(), image.getHeight(), null, 0, image.getWidth()));\n//        rsp.getOutputStream().close();\n//    }", "CodeBleu_score": 9.478070530273596}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\n//            rsp.setContentType(\\\"image/png\\\");\n//            rsp.addHeader(\\\"Cache-Control\\\", cacheControl);\n//            rsp.addDateHeader(\\\"Last-Modified\\\", lastModified);\n//            if (flushImage) {\n//                ImageIO.write(image, \\\"png\\\", rsp.getOutputStream());\n//            } else {\n//                ImageIO.write(image, \\\"png\\\", new OutputStreamWriter(rsp.getOutputStream()));\n//            }\n//        }", "CodeBleu_score": 9.478070530273598}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\n// set the content type\nrsp.setContentType(\\\"image/png\\\");\n\n// set the cache control\nrsp.addHeader(\\\"Cache-control\\\", cacheControl);\n\n// set the last modified header\nrsp.addDateHeader(\\\"Last-Modified\\\", lastModified);\n\n// write the image to the response stream\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nImageIO.write(image, \\\"png\\\", baos);\nbyte[] imageBytes = baos.toByteArray();\nrsp.setContentLength(imageBytes.length);\nif (flushImage) {\nimage.flush();\n}\nrsp.getOutputStream().write(imageBytes);\nrsp.getOutputStream().flush();\n\n}", "CodeBleu_score": 34.18211085219464}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tthis.owner = owner;\nthis.projectKey = projectKey;\nthis.repositoryName = repositoryName;\nthis.enableCache = enableCache;\nthis.authenticator = authenticator;\n\nif (enableCache) {\ncachedTeam.setExpireAfterWrite(teamCacheDuration, TimeUnit.MINUTES);\ncachedRepositories.setExpireAfterWrite(repositoriesCacheDuration, TimeUnit.MINUTES);\n}\n\nif (authenticator!= null) {\nauthenticator.configureHttpClient(this);\n}\n\n// Use the system properties to configure the proxy\nString proxyHost = System.getProperty(\\\"http.proxyHost\\\");\nint proxyPort = Integer.parseInt(System.getProperty(\\\"http.proxyPort\\\"));\nString proxyUser = System.getProperty(\\\"http.proxyUser\\\");\nString proxyPassword = System.getProperty(\\\"http.proxyPassword\\\");\n\nif (proxyHost!= null && proxyPort > 0) {\nProxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxyHost, proxyPort));\n\n// Configure the HTTP client with the proxy\nHttpClientBuilder builder = HttpClientBuilder.create();\n\nif (proxyUser!= null && proxyPassword!= null) {\nAuthScope authScope = new AuthScope(proxyHost, proxyPort);\nCredentialsProvider credsProvider = new BasicCredentialsProvider();\ncredsProvider.setCredentials(authScope, new UsernamePasswordCredentials(proxyUser, proxyPassword));\n\nAuthCache authCache = new BasicAuthCache();\nauthCache.put(API_HOST, new BasicScheme());\n\nbuilder.setDefaultCredentialsProvider(credsProvider);\nbuilder.setDefaultAuthCache(authCache);\n}\n\nbuilder.setProxy(proxy);\nbuilder.setRetryHandler(new StandardHttpRequestRetryHandler(3, true));\n\nclient = builder.build();\ncontext = HttpClientContext.create();\n} else {\nclient = HttpClientBuilder.create().setRetryHandler(new StandardHttpRequestRetryHandler(3, true)).build();\ncontext = HttpClientContext.create();\n}\n}", "CodeBleu_score": 44.420461895182875}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tthis.enableCache = enableCache;\nthis.authenticator = authenticator;\nthis.owner = owner;\nthis.projectKey = projectKey;\nthis.repositoryName = repositoryName;\nif (enableCache) {\ncachedTeam.setExpiration(teamCacheDuration, MINUTES);\ncachedRepositories.setExpiration(repositoriesCacheDuration, MINUTES);\n}\n\ntry {\nHttpClientBuilder builder = HttpClientBuilder.create();\nif (authenticator!= null) {\n// Configure the HTTP client with authentication\nbuilder.setDefaultCredentialsProvider(authenticator.getCredentialsProvider());\n\n// Configure the HTTP client with proxy\nif (authenticator.getProxyConfiguration()!= null) {\nProxyConfiguration proxyConfiguration = authenticator.getProxyConfiguration();\nInetSocketAddress proxyAddress = proxyConfiguration.getProxy();\nProxy proxy = new Proxy(Proxy.Type.HTTP, proxyAddress);\nbuilder.setProxy(proxy);\n}\n}\n\n// Configure the HTTP client with connection manager and retry handler\nbuilder.setConnectionManager(connectionManager);\nbuilder.setRetryHandler(new StandardHttpRequestRetryHandler(3, true));\nclient = builder.build();\n\n// Configure the HTTP client context\ncontext = HttpClientContext.create();\n\n// Configure the HTTP client context with authentication\nif (authenticator!= null) {\nAuthCache authCache = new BasicAuthCache();\nauthCache.put(API_HOST, new BasicScheme());\ncontext.setAuthCache(authCache);\n}\n\n} catch (Exception e) {\nthrow new IllegalStateException(e);\n}\n}", "CodeBleu_score": 53.10661304520783}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tthis.enableCache = enableCache;\nthis.authenticator = authenticator;\nthis.owner = owner;\nthis.projectKey = projectKey;\nthis.repositoryName = repositoryName;\n\nif (enableCache) {\ncachedTeam.setExpiration(teamCacheDuration, HOURS);\ncachedRepositories.setExpiration(repositoriesCacheDuration, HOURS);\n}\n\nHttpClientBuilder builder = HttpClientBuilder.create();\n\nif (authenticator!= null) {\nbuilder.setDefaultCredentialsProvider(authenticator.getCredentialsProvider());\ncontext = HttpClientContext.create();\n}\n\nif (authenticator!= null) {\nif (authenticator instanceof BitbucketUsernamePasswordAuthenticator) {\nBitbucketUsernamePasswordAuthenticator authenticator = (BitbucketUsernamePasswordAuthenticator) this.authenticator;\n\n// Set proxy parameters if they are provided\nif (authenticator.getProxyConfiguration()!= null) {\nProxyConfiguration proxyConfiguration = authenticator.getProxyConfiguration();\nInetSocketAddress proxy = proxyConfiguration.getProxy();\nString proxyHost = proxy.getHostName();\nint proxyPort = proxy.getPort();\n\nif (proxyHost!= null && proxyPort > 0) {\nbuilder.setProxy(new HttpHost(proxyHost, proxyPort));\n}\n}\n}\n}\n\nbuilder.setRetryHandler(new StandardHttpRequestRetryHandler(3, true));\nbuilder.setConnectionManager(connectionManager);\n\nclient = builder.build();\n}", "CodeBleu_score": 52.03147219572304}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\tif (pullRequest.getSource().getBranch()!= null) {\npullRequest.getSource().setCommit(new CommitClosure(pullRequest.getSource().getCommit().getHash()));\n}\nif (pullRequest.getDestination().getBranch()!= null) {\npullRequest.getDestination().setCommit(new CommitClosure(pullRequest.getDestination().getCommit().getHash()));\n}\n}", "CodeBleu_score": 30.718515675897102}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\tif (pullRequest.getSource().getRepository()!= null && pullRequest.getSource().getCommit()!= null) {\npullRequest.getSource().setCommit(new CommitClosure(pullRequest.getSource().getCommit()));\n}\nif (pullRequest.getDestination().getBranch()!= null && pullRequest.getDestination().getCommit()!= null) {\npullRequest.getDestination().setCommit(new CommitClosure(pullRequest.getDestination().getCommit()));\n}\n}", "CodeBleu_score": 27.017078654961914}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\nif (pullRequest.getSource().getCommit()!= null) {\npullRequest.getSource().setCommit(new CommitClosure(pullRequest.getSource().getCommit().getHash()));\n}\n\nif (pullRequest.getDestination().getCommit()!= null) {\npullRequest.getDestination().setCommit(new CommitClosure(pullRequest.getDestination().getCommit().getHash()));\n}\n}", "CodeBleu_score": 28.954509088049672}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration jlc = JenkinsLocationConfiguration.get();\nif (jlc == null || jlc.getUrl() == null) {\nthrow new IllegalStateException(\"Jenkins location configuration is not set\");\n}\n\nDisplayURLProvider displayURLProvider = DisplayURLProvider.all().get(build.getParent());\nif (displayURLProvider == null) {\nthrow new IllegalStateException(\"Display URL Provider is not set\");\n}\n\nreturn displayURLProvider.getBuildURL(build);\n}", "CodeBleu_score": 53.72856119210696}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tspan class=\"nc\" id=\"L73\">        JenkinsLocationConfiguration jlc = JenkinsLocationConfiguration.get();</span>\n<span class=\"nc bnc\" id=\"L74\" title=\"All 2 branches missed.\">        if (jlc == null || jlc.getUrl() == null) {</span>\n<span class=\"nc\" id=\"L75\">            throw new IllegalStateException(&quot;Jenkins location configuration or URL is null.&quot;);</span>\n        }\n<span class=\"nc\" id=\"L77\">        DisplayURLProvider displayURLProvider = DisplayURLProvider.all().get(build.getParent());</span>\n<span class=\"nc bnc\" id=\"L78\" title=\"All 2 branches missed.\">        if (displayURLProvider == null) {</span>\n<span class=\"nc\" id=\"L79\">            throw new IllegalStateException(&quot;Display URL provider is null.&quot;);</span>\n        }\n<span class=\"nc\" id=\"L81\">        return displayURLProvider.getBuildURL(build);</span>\n    }", "CodeBleu_score": 33.6932110616103}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\try {\nJenkinsLocationConfiguration loc = JenkinsLocationConfiguration.get();\nif (loc == null) {\nthrow new IllegalStateException(\\\"Jenkins location configuration is null\\\");\n}\nDisplayURLProvider provider = loc.getUrlProvider();\nif (provider == null) {\nthrow new IllegalStateException(\\\"Display URL provider is null\\\");\n}\nreturn provider.getRootURL(build);\n} catch (Exception e) {\nthrow new IllegalStateException(\\\"Error getting root URL for build\\\", e);\n}\n}", "CodeBleu_score": 44.89301014912922}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\tf (url == null) {\nthrow new IllegalStateException(\\\"Jenkins URL is null\\\");\n}\nif (url.startsWith(\\\"localhost\\\") || url.startsWith(\\\"unconfigured-jenkins-location\\\")) {\nthrow new IllegalStateException(\\\"Jenkins URL is localhost or unconfigured-jenkins-location\\\");\n}\ntry {\nnew URL(url);\n} catch (MalformedURLException e) {\nthrow new IllegalStateException(\\\"Jenkins URL is malformed\\\");\n}\nif (bitbucket instanceof BitbucketCloudApiClient) {\ntry {\nnew URL(url);\n} catch (MalformedURLException e) {\nthrow new IllegalStateException(\\\"Jenkins URL is malformed\\\");\n}\n}\nreturn url;\n}", "CodeBleu_score": 40.46200172699568}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\tf (url == null) {\nthrow new IllegalStateException(\\\"Could not determine Jenkins URL.\\\");\n}\n\ntry {\nURL u = new URL(url);\nString host = u.getHost();\n\nif (host == null || host.isEmpty()) {\nthrow new IllegalStateException(\\\"Could not determine Jenkins URL.\\\");\n}\n\nif (host.equals(\\\"localhost\\\") || host.equals(\\\"unconfigured-jenkins-location\\\")) {\nthrow new IllegalStateException(\\\"Jenkins URL is not valid.\\\");\n}\n\nif (host.equals(\\\"bitbucket.org\\\") && bitbucket instanceof BitbucketCloudApiClient) {\nthrow new IllegalStateException(\\\"Bitbucket Cloud API does not support localhost or unconfigured-jenkins-location as the host.\\\");\n}\n\n} catch (MalformedURLException e) {\nthrow new IllegalStateException(\\\"Could not determine Jenkins URL.\\\");\n}\n\nreturn url;\n}", "CodeBleu_score": 42.54343322399154}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\tf (StringUtils.isBlank(url)) {\nthrow new IllegalArgumentException(\\\"URL must be provided.\\\");\n}\n\nif (url.contains(\\\"localhost\\\") || url.contains(\\\"unconfigured-jenkins-location\\\")) {\nthrow new IllegalStateException(\\\"URL must not contain localhost or unconfigured-jenkins-location.\\\");\n}\n\ntry {\nnew URL(url);\n} catch (MalformedURLException e) {\nthrow new IllegalStateException(\\\"URL must be valid.\\\");\n}\n\nif (bitbucket instanceof BitbucketCloudApiClient) {\ntry {\nnew URL(url);\n} catch (MalformedURLException e) {\nthrow new IllegalStateException(\\\"URL must be fully qualified for Bitbucket Cloud API.\\\");\n}\n}\n\nreturn url;\n}", "CodeBleu_score": 33.41691828324691}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\nSCMRevision revision = build.getPreviousRevision();\nif (revision == null) {\nreturn;\n}\n\nString revisionHash = revision.getSha1String();\nif (revisionHash == null) {\nreturn;\n}\n\nBitbucketApi bitbucket = source.getBitbucketApi();\nif (bitbucket == null) {\nreturn;\n}\n\nString key = source.getKey();\n\nboolean shareBuildKey = source.shareBuildKey();\nString buildKey = shareBuildKey? key : build.getDisplayName();\n\ntry {\ncreateStatus(build, listener, bitbucket, buildKey, revisionHash);\n} catch (Exception e) {\nlistener.getLogger().println(\\\"[Bitbucket] Failed to send build status notification: \\\" + e.getMessage());\n}\n}", "CodeBleu_score": 28.0844334863771}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t", "CodeBleu_score": 3.5406350036655807}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t", "CodeBleu_score": 3.5406350036655807}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t\nif (shareBuildKeyBetweenBranchAndPR) {\nreturn build.getParent().getFullName() + \"-\" + branch;\n}\n\nreturn build.getParent().getFullDisplayName();\n}", "CodeBleu_score": 26.666272747875365}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t\nif (shareBuildKeyBetweenBranchAndPR) {\n// combine the folder name and branch to create the key\nreturn build.getParent().getFullName() + '/' + branch;\n} else {\n// use the job's full name as the key\nreturn build.getParent().getFullName();\n}\n}", "CodeBleu_score": 26.150369259576813}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t\nif (shareBuildKeyBetweenBranchAndPR) {\nreturn build.getParent().getFullName() + \"/\" + branch;\n}\n\nreturn build.getParent().getFullName();\n}", "CodeBleu_score": 27.024446457881734}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\t\n// set the server URL to the default if it's null\nif (this.serverUrl == null) {\nthis.serverUrl = BitbucketCloudEndpoint.SERVER_URL;\n}\n\n// if the traits are null, reconstruct the legacy traits\nif (this.traits == null) {\nthis.traits = new ArrayList<>();\nthis.traits.add(new BranchDiscoveryTrait(true, true));\nthis.traits.add(new OriginPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD)));\nthis.traits.add(new ForkPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD),\nnew ForkPullRequestDiscoveryTrait.TrustEveryone()));\nthis.traits.add(new PublicRepoPullRequestFilterTrait());\n}\n\nreturn this;\n}", "CodeBleu_score": 20.44186218478209}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t\nBitbucketSCMNavigator result = new BitbucketSCMNavigator(repoOwner);\n\nresult.serverUrl = serverUrl;\nresult.credentialsId = credentialsId;\nresult.projectKey = projectKey;\nresult.traits = traits;\n\nif (serverUrl == null) {\nresult.serverUrl = BitbucketCloudEndpoint.SERVER_URL;\nLOGGER.log(Level.WARNING, \"BitbucketSCMNavigator was deserialized without a server URL, using default {0}\", BitbucketCloudEndpoint.SERVER_URL);\n}\n\nif (traits == null) {\nresult.traits = new ArrayList<>();\nresult.traits.add(new BranchDiscoveryTrait(true, true));\nresult.traits.add(new OriginPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD)));\nresult.traits.add(new ForkPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD), new ForkPullRequestDiscoveryTrait.TrustEveryone()));\nresult.traits.add(new PublicRepoPullRequestFilterTrait());\n}\n\nreturn result;\n}", "CodeBleu_score": 31.685026283672556}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t\n// if the server URL is null, set it to the default\nif (this.serverUrl == null) {\nthis.serverUrl = BitbucketCloudEndpoint.SERVER_URL;\n}\n\n// if the traits are null, reconstruct the legacy traits\nif (this.traits == null) {\nthis.traits = new ArrayList<>();\nthis.traits.add(new BranchDiscoveryTrait(true, true));\nthis.traits.add(new OriginPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD)));\nthis.traits.add(new ForkPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD),\nnew ForkPullRequestDiscoveryTrait.TrustEveryone()));\nthis.traits.add(new PublicRepoPullRequestFilterTrait());\n}\n\nreturn this;\n}", "CodeBleu_score": 20.44186218478209}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\tif (isMatch) {\nif (request.isPropose(name)) {\ncount++;\n}\n\nif (listener!= null) {\nlistener.getLogger().println(\\\"Proposing \\\" + name + \\\" as a match for \\\" + request.getDescriptor().getDisplayName());\n}\n} else {\nif (listener!= null) {\nlistener.getLogger().println(\\\"Ignoring \\\" + name + \\\" as a match for \\\" + request.getDescriptor().getDisplayName());\n}\n}\n}", "CodeBleu_score": 31.9002165831202}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\tif (isMatch) {\nif (listener!= null) {\nlistener.getLogger().println(\\\"Proposing repository \\\" + name);\n}\ncount++;\n} else {\nif (listener!= null) {\nlistener.getLogger().println(\\\"Ignoring repository \\\" + name);\n}\n}\n}", "CodeBleu_score": 32.16440122882322}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\tif (isMatch) {\nrequest.getProposedRepositories().add(name);\ncount++;\n} else {\nlistener.getLogger().println(Messages.BitbucketSCMNavigator_IgnoredRepository(name));\n}\n}", "CodeBleu_score": 31.78167341457032}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tfinal List<RefSpec> refSpecs = branchWithHashes.stream()\n.filter(branchWithHash ->!git.revparse().contains(branchWithHash.getHash()))\n.map(branchWithHash -> new RefSpec(String.format(\"refs/heads/%s:refs/remotes/%s/%s\", branchWithHash.getBranch(), remoteName, branchWithHash.getBranch())))\n.collect(Collectors.toList());\n\nif (refSpecs.isEmpty()) {\nreturn rev;\n}\n\ntry {\ngit.fetch().setRemote(remoteName).setRefSpecs(refSpecs).setURI(new URIish(cloneLink)).setCredentialsId(scm.getCredentialsId()).call();\n} catch (GitException | URISyntaxException e) {\nlistener.getLogger().println(\"Failed to fetch missing commits from remote repository. \" + e.getMessage());\n}\n\nreturn rev;\n}", "CodeBleu_score": 45.68971362605871}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tif (marked == null) {\nreturn rev;\n}\n\nList<RefSpec> refSpecs = branchWithHashes.stream()\n.filter(branchWithHash ->!rev.getSha1().equals(branchWithHash.hash))\n.map(branchWithHash -> new RefSpec(branchWithHash.branch + \":\" + branchWithHash.branch))\n.collect(Collectors.toList());\n\nif (refSpecs.isEmpty()) {\nreturn rev;\n}\n\ntry {\ngit.fetch(new FetchCommand(cloneLink, remoteName, refSpecs));\n} catch (GitException e) {\nthrow new RuntimeException(e);\n}\n\nreturn rev;\n}", "CodeBleu_score": 44.25863118831981}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t//        if (marked.getSha1String() == null) {\n//            return rev;\n//        }\n//\n//        List<BranchWithHash> branchWithHashes = scm.getExtensions().stream()\n//               .filter(e -> e instanceof FallbackToOtherRepositoryGitSCMExtension)\n//               .map(e -> (FallbackToOtherRepositoryGitSCMExtension) e)\n//               .findFirst()\n//               .get()\n//               .branchWithHashes;\n//\n//        List<RefSpec> refSpecs = branchWithHashes.stream()\n//               .filter(branchWithHash ->!git.revparse().contains(branchWithHash.branch, marked.getSha1String()))\n//               .map(branchWithHash -> new RefSpec(branchWithHash.branch, branchWithHash.hash))\n//               .collect(Collectors.toList());\n//\n//        if (refSpecs.isEmpty()) {\n//            return rev;\n//        }\n//\n//        try {\n//            git.fetch()\n//                   .remote(remoteName)\n//                   .refSpecs(refSpecs)\n//                   .execute(new FetchCommand(git, listener, build.getRootDir().toURI().toURL()));\n//        } catch (GitException | URISyntaxException e) {\n//            throw new RuntimeException(e);\n//        }\n//\n//        return rev;\n//    }", "CodeBleu_score": 7.465730872593649}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t(links == null) {\nreturn null;\n}\nMap<String, BitbucketHref> result = new HashMap<>();\nfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\nif (entry.getValue()!= null &&!entry.getValue().isEmpty()) {\nresult.put(entry.getKey(), entry.getValue().get(0));\n}\n}\nreturn result;\n}", "CodeBleu_score": 73.93514561417545}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t(links == null) {\nreturn null;\n}\nMap<String, BitbucketHref> result = new HashMap<>();\nfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\nBitbucketHref href = entry.getValue().get(0);\nif (href!= null) {\nresult.put(entry.getKey(), href);\n}\n}\nreturn result;\n}", "CodeBleu_score": 61.84346172462121}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t(links == null) {\nreturn null;\n}\nMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\nfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\nif (entry.getValue()!= null && entry.getValue().size() > 0) {\nresult.put(entry.getKey(), entry.getValue().get(0));\n}\n}\nreturn result;\n}", "CodeBleu_score": 69.97426945321581}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tconst resources = await this.getSelectedResources(resourceStates);\n\tif (resources.length === 0) {\n\t\treturn;\n\t}\n\tconst filePaths = this.getFilePaths(resources);\n\tconst repositories = await this.getRepositories(resources);\n\tawait this.addFiles(repositories, filePaths);\n}", "CodeBleu_score": 33.17347912256933}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\t// Get the selected resources.\n\tconst selectedResourceStates = await this.getSelectedResourceStates(...resourceStates);\n\tif (selectedResourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\t// Map the selected resources to their URIs.\n\tconst selectedResourceUris = selectedResourceStates.map(resourceState => resourceState.resource.uri);\n\n\t// Process the resources by repository.\n\tfor (const repository of this.sourceControl.repositories) {\n\t\ttry {\n\t\t\t// Convert the resources to file paths.\n\t\t\tconst filePaths = selectedResourceUris.map(uri => uri.fsPath);\n\n\t\t\t// Add the files to the repository.\n\t\t\tawait repository.inputBox.show();\n\t\t\tawait repository.inputBox.value = repository.root.fsPath;\n\t\t\tawait repository.inputBox.done();\n\t\t\tawait repository.inputBox.hide();\n\t\t\tawait repository.inputBox.dispose();\n\t\t\tawait repository.inputBox = null;\n\t\t\tawait repository.add(...filePaths);\n\t\t} catch (error) {\n\t\t\t// Log the error.\n\t\t\tconsole.error(error);\n\n\t\t\t// Show an error message.\n\t\t\tawait window.showErrorMessage(`Error adding files to ${repository.root.fsPath}: ${error.message}`);\n\t\t}\n\t}\n}", "CodeBleu_score": 45.120936110422875}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tconst resources = this.getSelectedResources(resourceStates);\n\tif (!resources.length) {\n\t\treturn;\n\t}\n\n\tconst uris = resources.map(resource => resource.resource.uri);\n\tconst filePaths = await Promise.all(uris.map(uri => this.getFilePath(uri)));\n\n\tfor (const repository of this.repositories) {\n\t\tconst repositoryUri = repository.root.uri;\n\t\tconst repositoryFilePaths = filePaths.filter(filePath => filePath.startsWith(repositoryUri.fsPath));\n\t\tif (!repositoryFilePaths.length) {\n\t\t\tcontinue;\n\t\t}\n\n\t\ttry {\n\t\t\tawait repository.add(repositoryFilePaths);\n\t\t} catch (error) {\n\t\t\tthis.logError(error);\n\t\t\tthis.showErrorMessage(error);\n\t\t}\n\t}\n}", "CodeBleu_score": 44.222609486604995}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\tconst resourceStates = await this.getScmResourceStates(resourceUri);\n\nif (resourceStates.length === 0 ||!(resourceUri instanceof Uri)) {\nresourceStates.push(await this.getScmResourceState(resourceUri));\n}\n\nreturn resourceStates.filter(resourceState => resourceState instanceof Resource);\n}", "CodeBleu_score": 32.28141009118553}, {"code": "protected async getResourceStates{\n\tet resourceStates = sourceControl.resourceStates;\n\nif (resourceStates.length === 0) {\nconst resource = await sourceControl.getResource();\n\nif (resource) {\nresourceStates = [resource.toResource()];\n}\n}\n\nconst resources = resourceStates.filter(\nresourceState => resourceState instanceof Resource\n);\n\nreturn resources;\n}", "CodeBleu_score": 40.34556816655839}, {"code": "protected async getResourceStates{\n\tonst resourceStates = await this.resourceStates;\n\nif (resourceStates.length === 0 ||!(resourceStates[0] instanceof Uri)) {\nconst resource = await this.scmResource;\n\nif (resource) {\nresourceStates = [resource];\n}\n}\n\nreturn resourceStates.filter(resource => resource instanceof Resource);\n}", "CodeBleu_score": 37.001121169124495}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t\n * This async function retrieves a source control management (SCM) resource for a given URI. If no URI is provided, it uses the URI of the active text editor. If the URI is in the \"svn\" scheme, it converts it to a file URI. For file URIs, it gets the source control manager and retrieves the repository for the URI, returning the corresponding resource. If no valid URI or repository is found, it returns undefined.\n */\n    if (!uri) {\n      const editor = window.activeTextEditor;\n\n      if (!editor) {\n        return;\n      }\n\n      uri = editor.document.uri;\n    }\n\n    if (uri.scheme === \\\"svn\\\") {\n      uri = Uri.file(uri.fsPath);\n    }\n\n    const sourceControlManager = (await commands.executeCommand(\n      \\\"svn.getSourceControlManager\\\",\n      \\\"\\\"\n    )) as SourceControlManager;\n\n    const repository = sourceControlManager.getRepository(uri);\n\n    if (!repository) {\n      console.warn(\\\"Could not find Svn repository for \\\", uri);\n      return;\n    }\n\n    return repository.getResource(uri);\n  }", "CodeBleu_score": 49.44175849929323}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t\n * This async function retrieves a source control management (SCM) resource for a given URI. If no URI is provided, it uses the URI of the active text editor. If the URI is in the \"svn\" scheme, it converts it to a file URI. For file URIs, it gets the source control manager and retrieves the repository for the URI, returning the corresponding resource. If no valid URI or repository is found, it returns undefined.\n */\n    const resource = uri || window.activeTextEditor.document.uri;\n\n    if (!resource ||!resource.scheme.startsWith(\"svn\")) {\n      return;\n    }\n\n    const fileUri = Uri.file(resource.fsPath);\n\n    const sourceControlManager = (await commands.executeCommand(\n      \"svn.getSourceControlManager\",\n      \"\"\n    )) as SourceControlManager;\n\n    const repository = sourceControlManager.getRepository(fileUri);\n\n    if (!repository) {\n      return;\n    }\n\n    return new Resource(repository, fileUri);\n  }", "CodeBleu_score": 52.25965687511347}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t", "CodeBleu_score": 1.5395211194129954}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\tif (element.item === Status.MODIFIED) {\n const oldPath = element.oldPath.fsPath.replace(element.repo.fsPath, \\\"\\\");\n const newPath = element.newPath.fsPath.replace(element.repo.fsPath, \\\"\\\");\n const oldRevision = element.oldRevision;\n const newRevision = element.newRevision;\n\n const remote = await this.model.getRemote(element.repo);\n if (remote) {\n const oldUrl = remote.getUrl(oldPath, oldRevision);\n const newUrl = remote.getUrl(newPath, newRevision);\n openDiff(oldUrl, newUrl);\n }\n } else if (element.item === Status.ADDED) {\n const newPath = element.newPath.fsPath.replace(element.repo.fsPath, \\\"\\\");\n const newRevision = element.newRevision;\n\n const remote = await this.model.getRemote(element.repo);\n if (remote) {\n const newUrl = remote.getUrl(newPath, newRevision);\n openFileRemote(newUrl);\n }\n }\n }", "CodeBleu_score": 42.85953887954046}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\tlet remote: IRemoteRepository | undefined;\n if (element.item === Status.MODIFIED) {\n remote = element.repo.getRemoteRepository(element.newPath, element.newRevision);\n } else if (element.item === Status.ADDED) {\n remote = element.repo.getRemoteRepository(element.newPath, element.newRevision);\n }\n if (remote) {\n await openDiff(remote, element.oldPath, element.oldRevision, element.newPath, element.newRevision);\n }\n }", "CodeBleu_score": 42.73854115163604}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\tconst remoteRepo = await this.model.getRepositoryForPath(element.newPath);\n if (element.item === Status.ADDED) {\n await openFileRemote(remoteRepo, element.newPath, element.newRevision);\n } else if (element.item === Status.MODIFIED) {\n await openDiff(remoteRepo, element.oldPath, element.oldRevision, element.newPath, element.newRevision);\n }\n }", "CodeBleu_score": 59.23282679431806}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!item.data) {\n\t\treturn;\n\t}\n\tif (item.kind === LogTreeItemKind.Commit) {\n\t\tconst commit = item.data as ISvnLogEntry;\n\t\tconst message = what === \\\"commitMessage\\\"? commit.message : commit.revision.toString();\n\t\tawait window.clipboard.writeText(message);\n\t}\n}", "CodeBleu_score": 42.75875484259105}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\t// Check if clipboard is supported\n\tif (!window.clipboardData) {\n\t\twindow.showErrorMessage(`The clipboard is not supported by this system.`);\n\t\treturn;\n\t}\n\n\t// Get the commit message or revision\n\tlet message: string;\n\tswitch (what) {\n\t\tcase \\\"message\\\":\n\t\t\tmessage = item.data.message;\n\t\t\tbreak;\n\t\tcase \\\"revision\\\":\n\t\t\tmessage = item.data.revision;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\twindow.showErrorMessage(`Unknown parameter: ${what}`);\n\t\t\treturn;\n\t}\n\n\t// Copy the message to the clipboard\n\twindow.clipboardData.setData(\\\"Text\\\", message);\n\twindow.showInformationMessage(`Commit ${message} copied to clipboard.`);\n}", "CodeBleu_score": 26.801953473357067}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!await clipboard.writeText(what)) {\n\t\twindow.showErrorMessage(`Failed to copy ${what} to clipboard`);\n\t}\n}", "CodeBleu_score": 11.438922135446182}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tf (classLoader == null) {\nclassLoader = Jenkins.get().getPluginManager().uberClassLoader;\n}\n\nfor (GiteaConnectionFactory factory : ServiceLoader.load(GiteaConnectionFactory.class, classLoader)) {\ntry {\nreturn factory.open(this);\n} catch (IOException e) {\n// Ignore and try the next factory\n}\n}\nthrow new IOException(\"No suitable GiteaConnectionFactory found\");\n}", "CodeBleu_score": 28.149933180549663}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tf (classLoader == null) {\nclassLoader = Jenkins.get().pluginManager.uberClassLoader();\n}\n\nGiteaConnectionFactory factory = null;\nfor (GiteaConnectionFactory f : ServiceLoader.load(GiteaConnectionFactory.class, classLoader)) {\nif (f.canOpen(serverUrl, authentication)) {\nfactory = f;\nbreak;\n}\n}\n\nif (factory == null) {\nthrow new IOException(\"No GiteaConnectionFactory found for \" + serverUrl + \" with authentication \" + authentication);\n}\n\nreturn factory.open(serverUrl, authentication);\n}", "CodeBleu_score": 36.182935710623866}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t", "CodeBleu_score": 1.4654881322104412}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t (Jenkins.get()!= null) {\nclassLoader = Jenkins.get().getPluginManager().uberClassLoader;\n}\nreturn this;\n}", "CodeBleu_score": 32.81512712980958}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\tassLoader classLoader = Jenkins.get().getPluginManager().uberClassLoader();\nif (classLoader == null) {\nclassLoader = getClass().getClassLoader();\n}\nreturn classLoader(classLoader);\n}", "CodeBleu_score": 45.08092230610399}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t (Jenkins.get()!= null) {\nclassLoader = Jenkins.get().getPluginManager().uberClassLoader;\n}\nreturn this;\n}", "CodeBleu_score": 32.81512712980958}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tif (displayName == null) {\ndisplayName = deriveDisplayName(serverUrl);\n}\nthis.displayName = displayName;\nthis.serverUrl = normalizeServerUrl(serverUrl);\nthis.manageHooks = manageHooks;\nthis.credentialsId = credentialsId;\nthis.aliasUrl = aliasUrl == null? null : normalizeServerUrl(aliasUrl);\n}", "CodeBleu_score": 34.34670897331307}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tthis.displayName = StringUtils.trimToNull(displayName);\nthis.serverUrl = normalizeUrl(serverUrl);\nthis.manageHooks = manageHooks;\nthis.credentialsId = credentialsId;\nthis.aliasUrl = normalizeUrl(aliasUrl);\n}", "CodeBleu_score": 32.4225484716479}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tthis.displayName = displayName;\nthis.serverUrl = normalizeServerUrl(serverUrl);\nthis.manageHooks = manageHooks;\nthis.credentialsId = credentialsId;\nthis.aliasUrl = normalizeAliasUrl(aliasUrl);\n}", "CodeBleu_score": 27.653726707252908}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\tGiteaConnection c = Gitea.server(GiteaServers.normalizeServerUrl(serverUrl)).open();\nJenkins.get().checkPermission(Jenkins.ADMINISTER);\n\nreturn new StandardListBoxModel()\n.includeEmptyValue()\n.includeMatchingAs(\nACL.SYSTEM,\nURIRequirementBuilder.fromUri(c.serverUrl()).build(),\nCredentialsMatchers.instanceOf(StandardUsernamePasswordCredentials.class),\nc.credentials()\n);\n}", "CodeBleu_score": 46.96967376697791}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tJenkins.get().checkPermission(Jenkins.ADMINISTER);\n\tString normalizedServerUrl = GiteaServers.normalizeServerUrl(serverUrl);\n\tURIRequirementBuilder builder = URIRequirementBuilder.fromUri(normalizedServerUrl);\n\treturn new StandardListBoxModel()\n\t\t\t.includeEmptyValue()\n\t\t\t.includeMatchingAs(\n\t\t\t\t\tACL.SYSTEM,\n\t\t\t\t\tJenkins.get(),\n\t\t\t\t\tStandardCredentials.class,\n\t\t\t\t\tbuilder.build(),\n\t\t\t\t\tAuthenticationTokens.matcher(GiteaAuth.class)\n\t\t\t);\n}", "CodeBleu_score": 52.494288316109305}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n try {\n URI serverUri = new URI(serverUrl);\n ListBoxModel model = new ListBoxModel();\n for (StandardCredentials c : CredentialsProvider.lookupCredentials(StandardCredentials.class, Jenkins.get(), ACL.SYSTEM, URIRequirementBuilder.fromUri(serverUri).build())) {\n if (c instanceof GiteaAuth) {\n GiteaAuth auth = (GiteaAuth) c;\n if (auth.getGiteaServer().equals(serverUri)) {\n model.add(auth.getGiteaServer().getDisplayName(), auth.getGiteaServer().getCredentialsId());\n }\n }\n }\n return model;\n } catch (URISyntaxException e) {\n return new ListBoxModel();\n }\n}", "CodeBleu_score": 47.07215401285109}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\nreturn null;\n}\ntry {\nURI uri = new URI(serverUrl);\nString normalizedUrl = uri.getScheme() + \\\"://\\\" + uri.getHost();\nint port = uri.getPort();\nif (uri.getScheme().equals(\\\"http\\\")) {\nif (port == -1) {\nport = 80;\n}\n} else if (uri.getScheme().equals(\\\"https\\\")) {\nif (port == -1) {\nport = 443;\n}\n}\nif (port!= -1) {\nnormalizedUrl += \\\":\\\" + port;\n}\nif (uri.getPath().endsWith(\\\"/\\\")) {\nnormalizedUrl = normalizedUrl.substring(0, normalizedUrl.length() - 1);\n}\nreturn normalizedUrl;\n} catch (URISyntaxException e) {\nreturn null;\n}\n}", "CodeBleu_score": 21.764141809427667}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\nreturn null;\n}\ntry {\nURI uri = new URI(serverUrl);\nString scheme = uri.getScheme();\nif (scheme == null) {\nreturn null;\n}\nString host = uri.getHost();\nif (host == null) {\nreturn null;\n}\nint port = uri.getPort();\nif (port == -1) {\nif (scheme.equals(\"http\")) {\nport = 80;\n} else if (scheme.equals(\"https\")) {\nport = 443;\n} else {\nreturn null;\n}\n}\nreturn String.format(Locale.US, \"%s://%s:%d\", scheme, host, port);\n} catch (URISyntaxException e) {\nreturn null;\n}\n}", "CodeBleu_score": 29.986866277137857}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\nreturn null;\n}\ntry {\n// Convert the URL to lowercase\nserverUrl = serverUrl.toLowerCase(Locale.ENGLISH);\n\n// Remove default ports (80 for HTTP and 443 for HTTPS)\nif (serverUrl.endsWith(\":80\")) {\nserverUrl = serverUrl.substring(0, serverUrl.length() - 3);\n} else if (serverUrl.endsWith(\":443\")) {\nserverUrl = serverUrl.substring(0, serverUrl.length() - 4);\n}\n\n// Ensure the URL is properly formatted\nURI uri = new URI(serverUrl);\n\n// Remove any trailing slash from the URL\nif (uri.getPath().endsWith(\"/\")) {\nuri = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath().substring(0, uri.getPath().length() - 1), uri.getQuery(), uri.getFragment());\n}\n\nreturn uri.toString();\n} catch (URISyntaxException e) {\nreturn null;\n}\n}", "CodeBleu_score": 36.2277495140834}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\tBoxModel items = new ListBoxModel();\nfor (GiteaServer server : getServers()) {\nif (server.getDisplayName()!= null &&!server.getDisplayName().isEmpty()) {\nitems.add(server.getDisplayName(), server.getServerUrl());\n} else {\nitems.add(server.getServerUrl());\n}\n}\nreturn items;\n}", "CodeBleu_score": 36.41609903809335}, {"code": "public ListBoxModel getServerItems(){\n\ttBoxModel items = new ListBoxModel();\n\nfor (GiteaServer server : getServers()) {\nString displayName = server.getDisplayName();\nif (displayName!= null && displayName.trim().length() > 0) {\nitems.add(displayName, server.getServerUrl());\n} else {\nitems.add(server.getServerUrl());\n}\n}\nreturn items;\n}", "CodeBleu_score": 47.15731332514726}, {"code": "public ListBoxModel getServerItems(){\n\tBoxModel items = new ListBoxModel();\nfor (GiteaServer server : getServers()) {\nString displayName = server.getDisplayName();\nif (StringUtils.isBlank(displayName)) {\nitems.add(server.getServerUrl());\n} else {\nitems.add(server.getDisplayName(), server.getServerUrl());\n}\n}\nreturn items;\n}", "CodeBleu_score": 48.573766200193106}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tif (servers == null) {\nthis.servers = Collections.emptyList();\n} else {\nList<GiteaServer> newServers = new ArrayList<GiteaServer>();\nfor (GiteaServer server : servers) {\nif (server == null) {\ncontinue;\n}\nString serverUrl = server.getServerUrl();\nif (StringUtils.isBlank(serverUrl)) {\ncontinue;\n}\nserverUrl = normalizeServerUrl(serverUrl);\nif (StringUtils.isBlank(serverUrl)) {\ncontinue;\n}\nGiteaServer existing = findServer(serverUrl);\nif (existing!= null) {\nif (existing.equals(server)) {\ncontinue;\n}\n// remove the duplicate\ncontinue;\n}\nnewServers.add(server);\n}\nthis.servers = Collections.unmodifiableList(newServers);\n}\nsave();\n}", "CodeBleu_score": 39.895173041424506}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t", "CodeBleu_score": 2.7391285144891953}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tList<GiteaServer> newServers = new ArrayList<GiteaServer>();\n\nfor (GiteaServer server : servers) {\nif (server!= null) {\nif (StringUtils.isNotBlank(server.getServerUrl())) {\nif (server.getDisplayName() == null) {\nserver.setDisplayName(server.getServerUrl());\n}\nnewServers.add(server);\n}\n}\n}\n\nif (newServers.size()!= servers.size()) {\n// remove duplicates\nSet<GiteaServer> uniqueServers = new HashSet<GiteaServer>(newServers);\nnewServers.clear();\nnewServers.addAll(uniqueServers);\n}\n\nthis.servers = newServers;\nsave();\n}", "CodeBleu_score": 31.019902218801743}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t\tList<GiteaServer> endpoints = new ArrayList<>(getServers());\n\tboolean found = false;\n\tfor (int i = 0; i < endpoints.size(); i++) {\n\t\tGiteaServer ep = endpoints.get(i);\n\t\tif (ep.getServerUrl().equals(serverUrl)) {\n\t\t\tendpoints.remove(i);\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (found) {\n\t\tsetServers(endpoints);\n\t}\n\treturn found;\n}", "CodeBleu_score": 45.10131730045538}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t\tJenkins.get().checkPermission(Jenkins.ADMINISTER);\n\tif (StringUtils.isBlank(serverUrl)) {\n\t\treturn false;\n\t}\n\tList<GiteaServer> endpoints = new ArrayList<>(getServers());\n\tfor (ListIterator<GiteaServer> iterator = endpoints.listIterator(); iterator.hasNext(); ) {\n\t\tGiteaServer endpoint = iterator.next();\n\t\tString url = endpoint.getServerUrl();\n\t\tif (StringUtils.equalsIgnoreCase(url, serverUrl)) {\n\t\t\titerator.remove();\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 49.32804768035573}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t\tList<GiteaServer> endpoints = new ArrayList<>(getServers());\n\tboolean found = false;\n\tfor (int i = 0; i < endpoints.size(); i++) {\n\t\tGiteaServer ep = endpoints.get(i);\n\t\tif (StringUtils.equalsIgnoreCase(ep.getServerUrl(), serverUrl)) {\n\t\t\tendpoints.remove(i);\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (found) {\n\t\tsetServers(endpoints);\n\t}\n\treturn found;\n}", "CodeBleu_score": 46.104927644082025}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t", "CodeBleu_score": 7.69689858913977}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tist<Element> annotatedElements = roundEnv.getElementsAnnotatedWith(annotation);\n\nfor (Element annotatedElement : annotatedElements) {\n\nString type = annotatedElement.getKind().toString();\n\nif (annotatedElement instanceof VariableElement) {\nVariableElement variableElement = (VariableElement) annotatedElement;\n\nif (variableElement.getKind() == ElementKind.FIELD) {\ntype = variableElement.getEnclosingElement().toString();\n}\n}\n\nString name = annotatedElement.getSimpleName().toString();\n\nif (annotatedElement instanceof ExecutableElement) {\nExecutableElement executableElement = (ExecutableElement) annotatedElement;\n\nif (executableElement.getKind() == ElementKind.CONSTRUCTOR) {\ntype = executableElement.getEnclosingElement().toString();\n}\n}\n\ndescriptorElements.add(new ConfigElement(type, name));\n}\n}", "CodeBleu_score": 41.41316722109964}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tterator<Element> iterator = roundEnv.getElementsAnnotatedWith(annotation).iterator();\nwhile (iterator.hasNext()) {\nElement element = iterator.next();\n\nif (element.getKind() == ElementKind.FIELD) {\nVariableElement variableElement = (VariableElement) element;\n\nif (variableElement.getModifiers().contains(Modifier.STATIC)) {\ncontinue;\n}\n\nString name = variableElement.getSimpleName().toString();\nString type = variableElement.asType().toString();\n\ndescriptorElements.add(new ConfigElement(name, type));\n}\n}\n}", "CodeBleu_score": 39.6611350247611}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tor (TypeElement annotation : annotations) {\nif (annotationClass.isInstance(annotation)) {\nreturn annotation;\n}\n}\n\nreturn null;\n}", "CodeBleu_score": 26.136684601444255}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tor (TypeElement annotation : annotations) {\nif (annotation.getQualifiedName().toString().replace('$', '.').equals(annotationClass.getName())) {\nreturn annotation;\n}\n}\n\nreturn null;\n}", "CodeBleu_score": 37.025128778269}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tor (TypeElement annotation : annotations) {\nif (annotation.getQualifiedName().toString().replace('$', '.').equals(annotationClass.getName())) {\nreturn annotation;\n}\n}\n\nreturn null;\n}", "CodeBleu_score": 37.025128778269}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\\\"employee\\\": employee}\n\n    if approver_id:\n        filters.update({\\\"leave_approver\\\": approver_id})\n\n    if for_approval:\n        filters.update({\\\"status\\\": [\\\"Pending Approval\\\", \\\"Open\\\"]})\n    else:\n        filters.update({\\\"status\\\": [\\\"Open\\\", \\\"Approved\\\", \\\"Rejected\\\", \\\"Cancelled\\\"]})\n\n    return filters\n\n", "CodeBleu_score": 22.806436279007347}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\\\"employee\\\": employee}\n    if approver_id:\n        filters.update({\\\"leave_approver\\\": approver_id})\n    if for_approval:\n        filters.update({\\\"status\\\": [\\\"Open\\\", \\\"Pending\\\"]})\n        filters.update({\\\"name\\\": [\\\"!=\", employee]})\n    else:\n        filters.update({\\\"status\\\": \\\"Open\\\"})\n        filters.update({\\\"name\\\": [\\\"!=\", employee]})\n        filters.update({\\\"status\\\": \\\"Cancelled\\\"})\n    return filters\n\n", "CodeBleu_score": 26.4572761013341}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"status\": [\"!=\", \"Cancelled\"],\n    }\n    if approver_id:\n        filters[\"leave_approver\"] = approver_id\n    if for_approval:\n        filters[\"status\"] = [\"in\", [\"Pending Approval\", \"Approved\", \"Rejected\"]]\n    else:\n        filters[\"status\"] = [\"in\", [\"Open\", \"Pending Approval\", \"Approved\"]]\n    return filters\n\n", "CodeBleu_score": 24.662674706622248}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n    leave_balance_map = {}\n    for leave_type, leave_detail in leave_details.items():\n        allocated_leave_days = leave_detail.get(\"allocated_leave_days\")\n        balance_leave_days = leave_detail.get(\"balance_leave_days\")\n        leave_balance_map[leave_type] = frappe._dict(\n            allocated_leave_days=allocated_leave_days,\n            balance_leave_days=balance_leave_days,\n        )\n    return leave_balance_map\n\n", "CodeBleu_score": 43.22814004835933}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_details[leave_type][\"allocated\"],\n            \"balance\": leave_details[leave_type][\"balance\"],\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 39.36181642749784}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n    leave_balance_map = frappe._dict()\n    for leave_detail in leave_details:\n        leave_type = leave_detail.leave_type\n        leave_balance_map[leave_type] = frappe._dict()\n        leave_balance_map[leave_type].allocated_leave_days = leave_detail.allocated_leave_days\n        leave_balance_map[leave_type].leave_balance = leave_detail.leave_balance\n    return leave_balance_map\n\n", "CodeBleu_score": 37.82999208697743}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    from hrms.hr.doctype.holiday_list.holiday_list import get_holiday_list_for_employee\n\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n\n    holidays = frappe.get_list(\n        \"Holiday\",\n        filters={\n            \"holiday_list\": holiday_list,\n            \"exclude_weekly_off\": 1,\n        },\n        order_by=\"date\",\n        fields=[\"name\", \"date\", \"description\"],\n    )\n\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n\n    return holidays\n\n", "CodeBleu_score": 39.55757841969068}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    from hrms.hr.doctype.holiday_list.holiday_list import get_holiday_list_for_employee\n\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n\n    holidays = frappe.db.sql(\n        \"\"\"\n        SELECT\n            holiday_date,\n            holiday_name,\n            description\n        FROM\n            `tabHoliday`\n        WHERE\n            holiday_list = %s\n            AND holiday_date >= %s\n            AND holiday_date <= %s\n            AND is_weekend = 0\n        ORDER BY\n            holiday_date ASC\n    \"\"\",\n        (holiday_list, getdate(), getdate()),\n    )\n\n    holidays = [\n        {\n            \"date\": holiday_date,\n            \"name\": holiday_name,\n            \"description\": strip_html(description),\n        }\n        for holiday_date, holiday_name, description in holidays\n    ]\n\n    return holidays\n\n", "CodeBleu_score": 32.29912123541765}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.get_all(\n        \"Holiday List\",\n        filters={\n            \"employee\": employee,\n            \"is_weekend\": 0,\n        },\n        fields=[\"name\", \"holiday_date\", \"description\"],\n        order_by=\"holiday_date\",\n    )\n    holidays = []\n    for holiday in holiday_list:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n        holidays.append(holiday)\n    return holidays\n\n", "CodeBleu_score": 25.632137020831948}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n    holiday_reminders = frappe.get_all(\"Holiday Reminder\", filters={\"send_reminder_in_advance\": 1, \"frequency\": \"Weekly\"})\n    for holiday_reminder in holiday_reminders:\n        send_holiday_reminder_in_advance(holiday_reminder)\n\n", "CodeBleu_score": 15.701505662215942}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    holiday_reminder_settings = frappe.get_single(\"Holiday Reminder Settings\")\n    if holiday_reminder_settings.enable_reminders and holiday_reminder_settings.frequency == \"Weekly\":\n        for employee in frappe.get_all(\"Employee\"):\n            if holiday_reminder_settings.send_reminders_to_employee_email:\n                send_reminder(employee.name, \"weekly\")\n            elif holiday_reminder_settings.send_reminders_to_employee_email_and_manager:\n                send_reminder(employee.name, \"weekly\")\n                send_reminder(employee.manager, \"weekly\")\n            elif holiday_reminder_settings.send_reminders_to_manager_email:\n                send_reminder(employee.manager, \"weekly\")\n\n", "CodeBleu_score": 19.95276295419807}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    settings = frappe.get_single(\"HR Settings\")\n    if not settings.enable_holiday_reminders_in_advance or settings.holiday_reminder_frequency!= \"Weekly\":\n        return\n\n    today_date = today()\n    today_date = getdate(today_date)\n    today_date = add_days(today_date, 1)\n    if today_date.weekday() == 6:\n        today_date = add_days(today_date, 1)\n    today_date = add_days(today_date, 1)\n    today_date = add_days(today_date, 1)\n    today_date = add_days(today_date, 1)\n\n    if today_date.weekday() == 6:\n        today_date = add_days(today_date, 1)\n    today_date = add_days(today_date, 1)\n    today_date = add_days(today_date, 1)\n\n    if today_date.weekday() == 6:\n        today_date = add_days(today_date, 1)\n    today_date = add_days(today_date, 1)\n    today_date = add_days(today_date, 1)\n\n    if today_date.weekday() == 6:\n        today_date = add_days(today_date, 1)\n    today_date = add_days(today_date, 1)\n    today_date = add_days(today_date, 1)\n\n    if today_date.weekday() == 6:\n        today_date = add_days(today_date, 1)\n    today_date = add_days(today_date, 1)\n    today_date = add_days(today_date, 1)\n\n    if today_date.weekday() == 6:\n        today_date = add_days(today_date, 1)\n    today_date = add_days(today_date, 1)\n    today_date = add_days(today_date, 1)\n\n    if today_date.weekday() == 6:\n        today_date = add_days(today_date, 1)\n    today_date = add_days(today_date, 1)\n    today_date = add_days(today_date, ", "CodeBleu_score": 24.924067020218637}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t  total_weightage, total = 0, 0\n    for entry in self.self_ratings:\n        total += flt(entry.score) * flt(entry.per_weightage) / 100\n        total_weightage += flt(entry.per_weightage)\n\n    if total_weightage and flt(total_weightage, 2)!= 100.0:\n        frappe.throw(\n            _(\n                \"Total weightage for all Self Ratings must add up to 100. Currently, it is {0}%\"\n            ).format(total_weightage),\n            title=_(\"Incorrect Weightage Allocation\"),\n        )\n\n    self.self_appraisal_score = flt(total, self.precision(\"self_appraisal_score\"))\n\n", "CodeBleu_score": 35.25203400672766}, {"code": "def calculate_self_appraisal_score(self)\n\t  self.self_appraisal_score = 0\n    for entry in self.self_ratings:\n        self.self_appraisal_score += flt(entry.rating) * flt(entry.per_weightage) / 100\n\n    self.self_appraisal_score = flt(self.self_appraisal_score, self.precision(\"self_appraisal_score\"))\n\n", "CodeBleu_score": 36.92099843229683}, {"code": "def calculate_self_appraisal_score(self)\n\t  total_weightage, total = 0, 0\n\n    for entry in self.self_ratings:\n        total_weightage += flt(entry.per_weightage)\n        total += flt(entry.per_weightage) * flt(entry.rating) * 5\n\n    if total_weightage and flt(total_weightage, 2)!= 100.0:\n        frappe.throw(\n            _(\n                \"Total weightage for all Self Ratings must add up to 100. Currently, it is {0}%\"\n            ).format(total_weightage),\n            title=_(\"Incorrect Weightage Allocation\"),\n        )\n\n    self.self_appraisal_score = flt(total, self.precision(\"self_appraisal_score\"))\n\n", "CodeBleu_score": 33.79713102267712}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n    if self.is_new():\n        return\n\n    if not self.appraisal_cycle:\n        return\n\n    appraisal_cycle = frappe.get_doc(\\\"Appraisal Cycle\\\", self.appraisal_cycle)\n    if appraisal_cycle.final_score_calculation_method == \\\"Formula\\\":\n        formula = appraisal_cycle.final_score_calculation_formula\n        if not formula:\n            return\n\n        formula = formula.replace(\\\"self_score\\\", \\\"self_appraisal_score\\\")\n        formula = formula.replace(\\\"avg_feedback_score\\\", \\\"avg_feedback_score\\\")\n        formula = formula.replace(\\\"total_score\\\", \\\"total_score\\\")\n\n        try:\n            final_score = eval(formula)\n        except Exception as e:\n            frappe.throw(_(f\\\"Invalid formula: {e}\\\"), title=\\\"Invalid Formula\\\")\n    else:\n        final_score = (\n            self.total_score\n            + self.avg_feedback_score\n            + self.self_score\n        ) / 3\n\n    self.final_score = flt(final_score, self.precision(\\\"final_score\\\"))\n\n", "CodeBleu_score": 34.060575505743664}, {"code": "def calculate_final_score(self)\n\t\n    final_score = 0\n    appraisal_cycle = frappe.get_doc(\\\"Appraisal Cycle\\\", self.appraisal_cycle)\n    if appraisal_cycle.final_score_calculation_method == \\\"Formula\\\":\n        try:\n            formula = appraisal_cycle.final_score_formula\n            formula = formula.replace(\\\"total_score\\\", self.total_score)\n            formula = formula.replace(\\\"self_score\\\", self.self_score)\n            formula = formula.replace(\\\"avg_feedback_score\\\", self.avg_feedback_score)\n            final_score = eval(formula)\n        except Exception as e:\n            frappe.throw(\n                \\\"Error in final score calculation formula: {0}\\\".format(e),\n                title=\\\"Error in final score calculation formula\\\",\n            )\n    else:\n        final_score = (\n            flt(self.total_score) + flt(self.self_score) + flt(self.avg_feedback_score)\n        ) / 3\n    self.final_score = flt(final_score, self.precision(\\\"final_score\\\"))\n\n", "CodeBleu_score": 42.28404630813008}, {"code": "def calculate_final_score(self)\n\t\n    final_score = 0\n    appraisal_cycle = frappe.get_doc(\\\"Appraisal Cycle\\\", self.appraisal_cycle)\n    if appraisal_cycle.final_score_calculation == \\\"Formula\\\":\n        # Sanitize the formula\n        formula = appraisal_cycle.final_score_formula\n        formula = formula.replace(\\\"self_score\\\", \\\"self.self_score\\\")\n        formula = formula.replace(\\\"total_score\\\", \\\"self.total_score\\\")\n        formula = formula.replace(\\\"avg_feedback_score\\\", \\\"self.avg_feedback_score\\\")\n        formula = formula.replace(\\\"final_score\\\", \\\"self.final_score\\\")\n        formula = formula.replace(\\\"total_weightage\\\", \\\"self.total_weightage\\\")\n        formula = formula.replace(\\\"goal_score_percentage\\\", \\\"self.goal_score_percentage\\\")\n        formula = formula.replace(\\\"self_score_percentage\\\", \\\"self.self_score_percentage\\\")\n        formula = formula.replace(\\\"avg_feedback_score_percentage\\\", \\\"self.avg_feedback_score_percentage\\\")\n        formula = formula.replace(\\\"final_score_percentage\\\", \\\"self.final_score_percentage\\\")\n        formula = formula.replace(\\\"total_score_percentage\\\", \\\"self.total_score_percentage\\\")\n        formula = formula.replace(\\\"total_weightage_percentage\\\", \\\"self.total_weightage_percentage\\\")\n        formula = formula.replace(\\\"goal_score_percentage_percentage\\\", \\\"self.goal_score_percentage_percentage\\\")\n        formula = formula.replace(\\\"self_score_percentage_percentage\\\", \\\"self.self_score_percentage_percentage\\\")\n        formula = formula.replace(\\\"avg_feedback_score_percentage_percentage\\\", \\\"self.avg_feedback_score_percentage_percentage\\\")\n        formula = formula.replace(\\\"final_score_percentage_percentage\\\", \\\"self.final_score_percentage_percentage\\\")\n        formula = formula.replace(\\\"total_score_percentage_percentage\\\", \\\"self.total_score_percentage_percentage\\\")\n        formula = formula.replace(\\\"total_weightage_percentage_percentage\\\", \\\"self.total_weightage_percentage_percentage\\\")\n        formula = formula.replace(\\\"goal_score_percentage_percentage_percentage\\\", \\\"self.goal_score_percentage_percentage_percentage\\\")\n        formula = formula.replace(\\\"self_score", "CodeBleu_score": 26.568251122689464}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n    employee = frappe.get_doc(\\\"Employee\\\", self.employee)\n    if self.attendance_date < employee.date_of_joining:\n        frappe.throw(\n            \\\"Attendance date cannot be earlier than the date of joining of the employee.\\\"\n        )\n    if self.attendance_date > nowdate() and self.status!= \\\"On Leave\\\":\n        frappe.throw(\n            \\\"Attendance date cannot be later than the current date unless the status is \\\"On Leave\\\".\\\"\n        )\n    if self.status == \\\"On Leave\\\":\n        leave_application = frappe.get_doc(\n            \\\"Leave Application\\\",\n            {\n                \\\"employee\\\": self.employee,\n                \\\"from_date\\\": self.attendance_date,\n                \\\"to_date\\\": self.attendance_date,\n            },\n        )\n        if leave_application.docstatus == 0:\n            frappe.throw(\n                \\\"Attendance date cannot be later than the current date unless the status is \\\"On Leave\\\".\\\"\n            )\n\n\n\n", "CodeBleu_score": 30.5034352034664}, {"code": "def validate_attendance_date(self)\n\t\n    if not self.attendance_date:\n        frappe.throw(_(\"Please select attendance date\"))\n    elif self.attendance_date < getdate(self.employee.date_of_joining):\n        frappe.throw(_(\"Attendance date cannot be earlier than employee's date of joining\"))\n    elif self.attendance_date > nowdate():\n        if self.status not in [\\\"On Leave\\\"]:\n            frappe.throw(_(\"Attendance date cannot be in future\"))\n        else:\n            if not self.employee.leave_applications:\n                frappe.throw(_(\"No leave application found for employee\"))\n            else:\n                for leave in self.employee.leave_applications:\n                    if self.attendance_date >= getdate(leave.from_date) and self.attendance_date <= getdate(leave.to_date):\n                        frappe.throw(_(\"Attendance date cannot be in leave application\"))\n\n", "CodeBleu_score": 33.56018988668008}, {"code": "def validate_attendance_date(self)\n\t\n    employee = frappe.get_doc(\\\"Employee\\\", self.employee)\n    if self.attendance_date < employee.date_of_joining:\n        frappe.throw(\n            \\\"Attendance date cannot be earlier than the employee's date of joining.\\\",\n            title=_(\\\"Invalid Attendance Date\\\"),\n        )\n    elif self.attendance_date > nowdate() and self.status not in [\\\"On Leave\\\"]:\n        frappe.throw(\n            \\\"Attendance date cannot be later than today's date.\\\",\n            title=_(\\\"Invalid Attendance Date\\\"),\n        )\n    elif self.status == \\\"On Leave\\\":\n        if not frappe.db.exists(\n            \\\"Leave Application\\\",\n            \\\"{\n                \\\"employee\\\": self.employee,\n                \\\"from_date\\\": \\\"<={0}\\\",\n                \\\"to_date\\\": \\\">={0}\\\",\n            }\\\",\n            {\n                \\\"status\\\": [\\\"in\\\", [\\\"Open\\\", \\\"Approved\\\"]],\n            }\n        ):\n            frappe.throw(\n                \\\"Attendance date cannot be marked as \\\"On Leave\\\" if there is no leave application.\\\",\n                title=_(\\\"Invalid Attendance Date\\\"),\n            )\n\n\n\n", "CodeBleu_score": 24.922821119205715}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t    if self.status == \\\"Work From Home\\\" and self.employee_status == \\\"On Leave\\\":\n        frappe.throw(\n            _(\\\"Attendance record for {0} on {1} can not be marked as Work From Home and On Leave at the same time.\\\").format(\n                frappe.bold(self.employee),\n                frappe.bold(format_date(self.attendance_date)),\n            )\n        )\n\n\n    if frappe.db.exists(\n        \\\"Attendance\\\",\n        \\\"{\\\",\n            \\\"employee\\\": \\\"{0}\\\",\n            \\\"attendance_date\\\": \\\"{1}\\\",\n            \\\"status\\\": \\\"{2}\\\",\n            \\\"employee_status\\\": \\\"{3}\\\",\n            \\\"leave_application\\\": \\\"{4}\\\",\n        }\\\",\n        ignore_permissions=True,\n    ):\n        frappe.throw(\n            _(\\\"Attendance record for {0} on {1} already exists. Click {2} to view existing attendance record.\\\").format(\n                frappe.bold(self.employee),\n                frappe.bold(format_date(self.attendance_date)),\n                frappe.bold(\n                    get_link_to_form(\\\"Attendance\\\", self.name, \\\"View\\\")\n                ),\n            )\n        )\n\n\n\n", "CodeBleu_score": 37.30246701702023}, {"code": "def validate_duplicate_record(self)\n\t    if self.employee:\n        duplicate_attendance = frappe.db.exists(\n            \"Attendance\",\n            {\n                \"employee\": self.employee,\n                \"attendance_date\": self.attendance_date,\n                \"docstatus\": 1,\n            },\n        )\n        if duplicate_attendance:\n            frappe.throw(\n                _(\n                    \"Attendance record for employee {0} on date {1} already exists. {2}\"\n                ).format(\n                    frappe.bold(self.employee),\n                    frappe.bold(format_date(self.attendance_date)),\n                    get_link_to_form(\n                        \"Attendance\", duplicate_attendance, \"Duplicate Attendance\"\n                    ),\n                )\n            )\n\n", "CodeBleu_score": 38.300317830318996}, {"code": "def validate_duplicate_record(self)\n\t    duplicate_attendance = frappe.db.exists(\n        \"Attendance\",\n        {\n            \"employee\": self.employee,\n            \"attendance_date\": self.attendance_date,\n            \"docstatus\": 1,\n        },\n    )\n    if duplicate_attendance:\n        msg = _(\n            \"Attendance record for {0} on {1} already exists. {2}\"\n        ).format(\n            frappe.bold(self.employee),\n            frappe.bold(format_date(self.attendance_date)),\n            frappe.bold(\n                get_link_to_form(\n                    \"Attendance\", duplicate_attendance.name, \"View Attendance\"\n                )\n            ),\n        )\n        frappe.throw(msg)\n\n", "CodeBleu_score": 40.12819608740299}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n    incoming_email_account = frappe.db.get_value(\n        \"Email Account\", dict(enable_incoming=1, default_incoming=1), \"email_id\"\n    )\n\n    self.db_set(\"email_sent_to\", \"", "CodeBleu_score": 9.440579847391838}, {"code": "def send_summary(self)\n\t\n    incoming_email_account = frappe.db.get_value(\n        \"Email Account\", dict(enable_incoming=1, default_incoming=1), \"email_id\"\n    )\n\n    self.db_set(\"email_sent_to\", \"", "CodeBleu_score": 9.440579847391838}, {"code": "def send_summary(self)\n\t\n    dws_group = frappe.get_doc(\\\"Daily Work Summary Group\\\", self.dws_group)\n    dws_group.get_message()\n    dws_group.get_users()\n    dws_group.send_mails(dws_group, dws_group.users)\n    dws_group.db_set(\\\"status\\\", \\\"Sent\\\")\n\n", "CodeBleu_score": 10.895048424784633}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    if self.interview_round:\n        existing_interviews = frappe.get_all(\n            \\\"Interview\\\",\n            filters={\n                \\\"job_applicant\\\": self.job_applicant,\n                \\\"interview_round\\\": self.interview_round,\n            },\n            fields=[\\\"name\\\"],\n        )\n        if existing_interviews:\n            existing_interview_names = [interview.name for interview in existing_interviews]\n            existing_interview_links = [\n                get_link_to_form(\\\"Interview\\\", existing_interview_name)\n                for existing_interview_name in existing_interview_names\n            ]\n            existing_interview_links_html = \\\"<br/>\\\".join(existing_interview_links)\n            existing_interview_links_html = f\\\"<p>{existing_interview_links_html}</p>\\\"\n            existing_interview_links_html = f\\\"<p>{_('There are already interviews for this applicant in the following interview rounds:')}{existing_interview_links_html}</p>\\\"\n            existing_interview_links_html = f\\\"<p>{_('Please check the interview round details for the following interviews:')}{existing_interview_links_html}</p>\\\"\n            frappe.throw(\n                DuplicateInterviewRoundError(\n                    _(\\\"Job applicant is already interviewed in the following interview rounds: {existing_interview_links_html}\\\"),\n                    title=_(\\\"Not Allowed\\\"),\n                )\n            )\n        )\n\n", "CodeBleu_score": 34.345372653177705}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.interview_round:\n        existing_interviews = frappe.get_all(\n            \\\"Interview\\\",\n            filters={\n                \\\"interview_round\\\": self.interview_round,\n                \\\"job_applicant\\\": self.job_applicant,\n            },\n            fields=[\\\"name\\\"],\n        )\n        if len(existing_interviews) > 0:\n            existing_interview = existing_interviews[0]\n            existing_interview_link = get_link_to_form(\n                \\\"Interview\\\",\n                existing_interview.name,\n            )\n            existing_interview_link = f\\\"<a href='{existing_interview_link}'>{existing_interview_link}</a>\\\"\n            existing_interview_link = f\\\"{existing_interview_link} <br> <br>\\\".join([\n                \\\"<b>{0}</b> <br>\\\".format(self.job_applicant),\n                \\\"<b>{0}</b> <br>\\\".format(self.interview_round),\n            ])\n            raise DuplicateInterviewRoundError(\n                _(\\\"Job applicant is already scheduled for this interview round. Please check the existing interview record {0}.\\\").format(\n                    existing_interview_link\n                ),\n            )\n\n", "CodeBleu_score": 35.56240008574778}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.interview_round:\n        duplicate_interview = frappe.db.get_list(\n            \\\"Interview\\\",\n            filters={\n                \\\"job_applicant\\\": self.job_applicant,\n                \\\"interview_round\\\": self.interview_round,\n                \\\"name\\\": [\\\"!=\", self.name],\n            },\n            fields=[\\\"name\\\"],\n        )\n        if duplicate_interview:\n            duplicate_interview = duplicate_interview[0]\n            duplicate_interview_link = get_link_to_form(\n                \\\"Interview\\\",\n                duplicate_interview.name,\n            )\n            duplicate_interview_link = f\\\"<a href='{duplicate_interview_link}'>{duplicate_interview_link}</a>\\\"\n            duplicate_interview_applicant_link = get_link_to_form(\n                \\\"Job Applicant\\\",\n                self.job_applicant,\n            )\n            duplicate_interview_applicant_link = f\\\"<a href='{duplicate_interview_applicant_link}'>{duplicate_interview_applicant_link}</a>\\\"\n            frappe.throw(\n                _(\\\"Job applicant {duplicate_interview_applicant_link} is already interviewed for this interview round {duplicate_interview_link}.\\\"),\n                title=_(\\\"Duplicate Interview\\\"),\n            )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 37.070237914942226}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n    ratings = []\n    for skill_assessment in self.skill_assessments:\n        if skill_assessment.rating:\n            ratings.append(flt(skill_assessment.rating))\n    self.average_rating = flt(sum(ratings) / len(ratings)) if ratings else 0\n\n", "CodeBleu_score": 34.12142835313702}, {"code": "def calculate_average_rating(self)\n\t\n    self.average_rating = flt(\n        frappe.db.sql(\n            \"\"\"\n            SELECT\n                SUM(IF(rating, rating, 0)) / COUNT(*)\n            FROM\n                `tabInterview Feedback Skill Assessment`\n            WHERE\n                parent = %s\n            \"\"\",\n            self.name,\n            as_dict=True,\n        )[0][0]\n    )\n\n", "CodeBleu_score": 7.769932024041582}, {"code": "def calculate_average_rating(self)\n\t\n    self.average_rating = 0\n    for skill_assessment in self.skill_assessments:\n        if skill_assessment.rating:\n            self.average_rating += flt(skill_assessment.rating)\n    if self.skill_assessments:\n        self.average_rating = flt(self.average_rating / len(self.skill_assessments))\n\n", "CodeBleu_score": 35.33439808390915}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = frappe.get_doc(\"Interview\", doc.get(\"name\"))\n    interview.interview_round = doc.get(\"interview_round\")\n    interview.designation = doc.get(\"designation\")\n    interview.interviewers = doc.get(\"interviewers\")\n    interview.save()\n    return interview.as_dict()", "CodeBleu_score": 46.47549230806066}, {"code": "def create_interview(doc):\n\t\n    if type(doc) == str:\n        doc = json.loads(doc)\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.get(\"interview_round\")\n    interview.designation = doc.get(\"designation\")\n    interview.interviewers = doc.get(\"interviewers\")\n    interview.insert()\n    return interview.name\n\n", "CodeBleu_score": 44.636944942118205}, {"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = frappe.get_doc(\"Interview\", doc.get(\"name\"))\n    interview.interview_round = doc.get(\"interview_round\")\n    interview.designation = doc.get(\"designation\")\n    interview.interviewers = doc.get(\"interviewers\")\n    interview.save()\n    return interview.as_dict()\n\n", "CodeBleu_score": 46.47549230806066}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t    job_offers = frappe.db.sql(\n        \\\"SELECT name FROM `tabJob Offer` WHERE docstatus = 1 AND designation = %s AND company = %s AND offer_date BETWEEN %s AND %s\\\",\n        (self.designation, self.company, from_date, to_date),\n        as_list=1\n    )\n    return job_offers\n\n", "CodeBleu_score": 34.27121386677145}, {"code": "def get_job_offer(self, from_date, to_date)\n\t    job_offers = frappe.db.sql(\n        \\\"SELECT name FROM `tabJob Offer` WHERE docstatus = 1 AND \n        (designation = %s OR parent = %s) AND \n        (company = %s OR parent = %s) AND \n        (offer_date BETWEEN %s AND %s)\n        ORDER BY offer_date DESC\\\",\n        (self.designation, self.designation, self.company, self.company, from_date, to_date)\n    )\n    return [job_offer[0] for job_offer in job_offers]\n\n", "CodeBleu_score": 43.333774106448516}, {"code": "def get_job_offer(self, from_date, to_date)\n\t    job_offers = frappe.db.sql(\n        \\\"SELECT name FROM `tabJob Offer` WHERE docstatus = 1 AND designation = %s AND company = %s AND offer_date BETWEEN %s AND %s\\\",\n        (self.designation, self.company, from_date, to_date)\n    )\n    return [job_offer[0] for job_offer in job_offers]\n\n", "CodeBleu_score": 33.85951786008739}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t    if not company:\n        company = frappe.db.get_value(\"Job Offer\", {\"docstatus\": 1}, \"company\")\n    if not department:\n        department = frappe.db.get_value(\"Job Offer\", {\"docstatus\": 1}, \"department\")\n\n    total_job_offers = frappe.db.sql(\n        \"\"\"SELECT count(*) FROM `tabJob Offer` WHERE docstatus=1\"\"\", as_dict=True\n    )\n    total_job_offers = total_job_offers[0].count if total_job_offers else 0\n\n    accepted_job_offers = frappe.db.sql(\n        \"\"\"SELECT count(*) FROM `tabJob Offer` WHERE docstatus=1 AND status='Accepted'\"\"\",\n        as_dict=True,\n    )\n    accepted_job_offers = accepted_job_offers[0].count if accepted_job_offers else 0\n\n    return frappe.get_attr(\"frappe.utils.data.formatters.formatters.PercentFormatter\").format(\n        accepted_job_offers / total_job_offers * 100\n    )\n\n", "CodeBleu_score": 30.811474494879366}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t    \"\"\"\n    filters = {}\n    if company:\n        filters[\"company\"] = company\n    if department:\n        filters[\"department\"] = department\n    total_job_offers = frappe.db.count(\"Job Offer\", filters=filters)\n    accepted_job_offers = frappe.db.count(\"Job Offer\", filters=dict(status=\"Accepted\", **filters))\n    if total_job_offers:\n        return flt(accepted_job_offers / total_job_offers * 100)\n    else:\n        return 0\n\n", "CodeBleu_score": 3.0172413793103448}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t    if not company:\n        company = frappe.db.get_value(\"Job Offer\", filters={\"docstatus\": 1}, fieldname=\"company\")\n    if not department:\n        department = frappe.db.get_value(\"Job Offer\", filters={\"docstatus\": 1}, fieldname=\"department\")\n    total_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1})\n    accepted_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1, \"status\": \"Accepted\"})\n    if total_offers:\n        return flt(accepted_offers / total_offers * 100)\n    else:\n        return 0\n\n", "CodeBleu_score": 38.41233417707293}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\tif (!result.isSuccess()) {\n\t\treturn ResponseEntity.badRequest().body(result);\n\t}\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 67.36275516193486}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess()) {\n\t\treturn ResponseEntity.badRequest().body(result);\n\t}\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 67.36275516193486}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess()) {\n\t\treturn ResponseEntity.badRequest().body(result);\n\t}\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 67.36275516193486}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal Optional<CompanyStaff> companyStaff = this.companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\tif (!companyStaff.isPresent()) {\n\t\treturn new ErrorResult(Messages.recordNotFound);\n\t}\n\tfinal Result result = BusinessRules.run(this.arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword()));\n\tif (!result.isSuccess()) {\n\t\treturn result;\n\t}\n\tcompanyStaff.get().setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.get().setLastName(companyStaffForUpdateDto.getLastName());\n\tcompanyStaff.get().setPassword(companyStaffForUpdateDto.getPassword());\n\tthis.companyStaffDao.save(companyStaff.get());\n\treturn new SuccessResult(Messages.recordUpdated);\n}", "CodeBleu_score": 55.46009256688266}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal Optional<CompanyStaff> companyStaffOptional = companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\tif (!companyStaffOptional.isPresent()) {\n\t\treturn new ErrorResult(Messages.notFound);\n\t}\n\tfinal CompanyStaff companyStaff = companyStaffOptional.get();\n\tfinal Result result = BusinessRules.run(arePasswordMatch(companyStaff.getPassword(), companyStaffForUpdateDto.getPassword()),\n\t\t\tnew ErrorResult(Messages.passwordsNotMatch));\n\tif (!result.isSuccess()) {\n\t\treturn result;\n\t}\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\tcompanyStaffDao.save(companyStaff);\n\treturn new SuccessResult(Messages.updated);\n}", "CodeBleu_score": 56.35845819632252}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal Optional<CompanyStaff> companyStaff = this.companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\tif (!companyStaff.isPresent()) {\n\t\treturn new ErrorResult(Messages.companyStaffNotFound);\n\t}\n\tfinal Result result = BusinessRules.run(this.arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword()));\n\tif (!result.isSuccess()) {\n\t\treturn result;\n\t}\n\tcompanyStaff.get().setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.get().setLastName(companyStaffForUpdateDto.getLastName());\n\tcompanyStaff.get().setPassword(companyStaffForUpdateDto.getPassword());\n\tthis.companyStaffDao.save(companyStaff.get());\n\treturn new SuccessResult(Messages.companyStaffUpdated);\n}", "CodeBleu_score": 55.171267849695994}]}
