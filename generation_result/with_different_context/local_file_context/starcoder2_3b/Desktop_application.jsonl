{"instance_id": "a6e254b7b855", "generation_result": [{"code": "translateTemplate(template, keystrokesByCommand){\n\t// Iterate through each item, initializing metadata if missing, and processing commands.\nfor (let item of this.flattenMenuTemplate(template)) {\n  // Initialize metadata if missing.\n  if (!item.metadata) item.metadata = {};\n\n  // Process commands.\n  if (item.command) {\n    // Retrieve associated keystrokes.\n    const keystrokes = keystrokesByCommand[item.command];\n\n    // Assign the first keystroke to the item's label if it includes a space, or to its accelerator otherwise.\n    if (keystrokes && keystrokes[0]) {\n      if (item.label.indexOf(' ') >= 0) item.label = keystrokes[0];\n      else item.accelerator = keystrokes[0];\n    }\n\n    // Set the click event to send the command via the global atomApplication, and the item is marked as window-specific if the command does not start with \"application:\".\n    item.click = () => {\n      const window = this.focusedWindow();\n      if (window) atomApplication.sendCommand(item.command);\n    };\n    item.metadata.windowSpecific =!item.command.startsWith('application:');\n  }\n\n  // If the item has a submenu, the function recursively processes it.\n  if (item.submenu) this.translateTemplate(item.submenu, keystrokesByCommand);\n}\n\n// Finally, the modified template is returned.\nreturn template;\n}", "CodeBleu_score": 52.469465676336945}, {"code": "translateTemplate(template, keystrokesByCommand){\n\t\tlet items = this.flattenMenuTemplate(template);\n\tfor (let item of items) {\n\t\tif (!item.metadata) item.metadata = {};\n\t\tif (!item.metadata.windowSpecific) item.metadata.windowSpecific = true;\n\t\tif (!item.metadata.command) item.metadata.command = item.command;\n\t\tif (item.command && item.command.startsWith('application:'))\n\t\t\titem.metadata.windowSpecific = false;\n\t\tif (item.submenu) this.translateTemplate(item.submenu, keystrokesByCommand);\n\t\tif (item.command) {\n\t\t\tconst keystrokes = keystrokesByCommand[item.command];\n\t\t\tif (keystrokes && keystrokes.length > 0) {\n\t\t\t\tif (keystrokes[0].includes(' '))\n\t\t\t\t\titem.label = keystrokes[0];\n\t\t\t\telse item.accelerator = keystrokes[0];\n\t\t\t}\n\t\t}\n\t}\n\treturn template;\n}", "CodeBleu_score": 47.49824101711703}, {"code": "translateTemplate(template, keystrokesByCommand){\n\t\tlet items = this.flattenMenuTemplate(template);\n\tfor (let item of items) {\n\t\tif (!item.metadata) item.metadata = {};\n\t\tif (!item.accelerator && item.command) {\n\t\t\tconst keystrokes = keystrokesByCommand[item.command];\n\t\t\tif (keystrokes && keystrokes.length) {\n\t\t\t\titem.accelerator = keystrokes[0];\n\t\t\t\tif (item.label.includes(' ')) item.label = item.accelerator;\n\t\t\t}\n\t\t}\n\t\tif (item.click) {\n\t\t\titem.click = this.createClickHandler(item.command);\n\t\t\titem.metadata.windowSpecific =!/^application:/.test(item.command);\n\t\t}\n\t\tif (item.submenu) this.translateTemplate(item.submenu, keystrokesByCommand);\n\t}\n\treturn template;\n}", "CodeBleu_score": 43.13892823625763}]}
{"instance_id": "c4ff073b485f", "generation_result": [{"code": "flattenMenuItems(menu){\n\t// flattenMenuItems(menu) takes a menu object and recursively flattens its items into a single array.\nIt initializes an empty array to store the items and iterates over the menu's items, adding each item to the array.\nIf an item has a submenu, the function calls itself recursively to flatten the submenu items and concatenate them to the main array.\nFinally, the function returns the flattened array of menu items.\n//\n// menu - A complete menu configuration object for atom-shell's menu API.\n//\n// Returns an Array of native menu items.\nlet items = [];\n\nfor (let i = 0; i < menu.items.length; i++) {\nlet item = menu.items[i];\n\nif (item.submenu) {\nitems = items.concat(this.flattenMenuItems(item.submenu));\n} else {\nitems.push(item);\n}\n}\n\nreturn items;\n}", "CodeBleu_score": 45.956948471869964}, {"code": "flattenMenuItems(menu){\n\t\tconst flattenedItems = [];\n\tconst flatten = (items) => {\n\t\tfor (const item of items) {\n\t\t\tif (item.submenu) {\n\t\t\t\tflatten(item.submenu.items);\n\t\t\t} else {\n\t\t\t\tflattenedItems.push(item);\n\t\t\t}\n\t\t}\n\t};\n\tflatten(menu.items);\n\treturn flattenedItems;\n}", "CodeBleu_score": 38.43077223102574}, {"code": "flattenMenuItems(menu){\n\t\tlet items = [];\n\tmenu.items.forEach((item) => {\n\t\tif (item.submenu) {\n\t\t\titems = items.concat(this.flattenMenuItems(item.submenu));\n\t\t} else {\n\t\t\titems.push(item);\n\t\t}\n\t});\n\treturn items;\n}", "CodeBleu_score": 39.477242800500804}]}
{"instance_id": "dba487230999", "generation_result": [{"code": "const encryptOptions = (options, secret) =>{\n\tt iv = crypto.randomBytes(16);\n\tconst cipher = crypto.createCipheriv('aes-256-gcm', secret, iv);\n\tconst encrypted = cipher.update(JSON.stringify(options), 'utf8', 'hex');\n\tconst authTag = cipher.final('hex');\n\n\treturn `${authTag}${encrypted}`;\n}", "CodeBleu_score": 39.71063606795006}, {"code": "const encryptOptions = (options, secret) =>{\n\tt iv = crypto.randomBytes(16);\n\tconst cipher = crypto.createCipheriv('aes-256-gcm', secret, iv);\n\tconst encrypted = cipher.update(JSON.stringify(options), 'utf8', 'hex');\n\tconst authTag = cipher.final('hex');\n\treturn JSON.stringify({ iv: iv.toString('hex'), authTag, encrypted });\n}", "CodeBleu_score": 44.12819950896643}, {"code": "const encryptOptions = (options, secret) =>{\n\t iv = crypto.randomBytes(16);\nconst cipher = crypto.createCipheriv('aes-256-gcm', secret, iv);\nconst encrypted = Buffer.concat([cipher.update(JSON.stringify(options)), cipher.final()]);\nconst authTag = cipher.getAuthTag();\n\nreturn JSON.stringify({\nauthTag: authTag.toString('hex'),\nencrypted: encrypted.toString('hex'),\niv: iv.toString('hex')\n});\n}", "CodeBleu_score": 49.28656606774232}]}
{"instance_id": "7efe3d7cee0f", "generation_result": [{"code": "createClickHandlers(template){\n\t\tfor (const item of template) {\n\t\tif (item.command) {\n\t\t\titem.commandDetail = item.command;\n\t\t\titem.contextCommand = true;\n\t\t\titem.click = () => {\n\t\t\t\tatomApplication.sendCommand(item.commandDetail);\n\t\t\t};\n\t\t} else if (item.submenu) {\n\t\t\tthis.createClickHandlers(item.submenu);\n\t\t}\n\t}\n}", "CodeBleu_score": 56.17953068278283}, {"code": "createClickHandlers(template){\n\t\tfor (const item of template) {\n\t\tif (item.command) {\n\t\t\tif (!item.commandDetail) {\n\t\t\t\titem.commandDetail = {};\n\t\t\t}\n\t\t\titem.commandDetail.contextCommand = true;\n\t\t\titem.click = (event, focusedWindow) => {\n\t\t\t\tatomApplication.sendCommand(item.command, focusedWindow);\n\t\t\t};\n\t\t}\n\t\tif (item.submenu) {\n\t\t\tthis.createClickHandlers(item.submenu);\n\t\t}\n\t}\n}", "CodeBleu_score": 58.53386260135169}, {"code": "createClickHandlers(template){\n\t\t// TODO: This is a bit of a hack to get around the fact that we don't have access to the\n\t// window in the renderer process, so we need to make sure that the window is available\n\t// before we try to use it.\n\tif (this.atomWindow.browserWindow === undefined) {\n\t\treturn;\n\t}\n\n\ttemplate.forEach((item) => {\n\t\tif (item.command) {\n\t\t\titem.contextCommand = true;\n\t\t\titem.commandDetail = this.atomWindow.browserWindow.webContents.send.bind(this.atomWindow.browserWindow.webContents, item.command);\n\t\t}\n\n\t\tif (item.submenu) {\n\t\t\tthis.createClickHandlers(item.submenu);\n\t\t}\n\t});\n}", "CodeBleu_score": 45.02414572156893}]}
{"instance_id": "851df56cc3b9", "generation_result": [{"code": "async didSavePath(window, path){\n\tconst recoveryFile = this.recoveryFilesByFilePath.get(path);\nif (!recoveryFile) return;\ntry {\nawait recoveryFile.release();\n} catch (err) {\nconsole.log(\n`Couldn't release ${recoveryFile.recoveryPath}. Code: ${err.code}. Message: ${err.message}`\n);\n}\nthis.recoveryFilesByWindow.get(window).delete(recoveryFile);\nthis.windowsByRecoveryFile.get(recoveryFile).delete(window);\nthis.recoveryFilesByFilePath.delete(path);\n}", "CodeBleu_score": 78.20233105674518}, {"code": "async didSavePath(window, path){\n\tconst stats = await tryStatFile(path);\nif (!stats) return;\n\nconst recoveryPath = Path.join(\nthis.recoveryDirectory,\nRecoveryFile.fileNameForPath(path)\n);\nconst recoveryFile =\nthis.recoveryFilesByFilePath.get(path) ||\nnew RecoveryFile(path, stats.mode, recoveryPath);\n\ntry {\nawait recoveryFile.release();\n} catch (err) {\nconsole.log(\n`Couldn't release ${recoveryFile.recoveryPath}. Code: ${\nerr.code\n}. Message: ${err.message}`\n);\nreturn;\n}\n\nif (!this.recoveryFilesByWindow.has(window)) {\nthis.recoveryFilesByWindow.set(window, new Set());\n}\nif (!this.windowsByRecoveryFile.has(recoveryFile)) {\nthis.windowsByRecoveryFile.set(recoveryFile, new Set());\n}\n\nthis.recoveryFilesByWindow.get(window).delete(recoveryFile);\nthis.windowsByRecoveryFile.get(recoveryFile).delete(window);\nthis.recoveryFilesByFilePath.delete(path);\n}", "CodeBleu_score": 61.84251299001775}, {"code": "async didSavePath(window, path){\n\tconst recoveryFile = this.recoveryFilesByFilePath.get(path);\nif (!recoveryFile) return;\ntry {\nawait recoveryFile.release();\n} catch (err) {\nconsole.log(\n`Couldn't release ${recoveryFile.recoveryPath}. Code: ${err.code}. Message: ${err.message}`\n);\nreturn;\n}\nthis.recoveryFilesByWindow.get(window).delete(recoveryFile);\nthis.windowsByRecoveryFile.get(recoveryFile).delete(window);\nthis.recoveryFilesByFilePath.delete(path);\n}", "CodeBleu_score": 76.48326663854213}]}
{"instance_id": "37d777933a87", "generation_result": [{"code": "async didCrashWindow(window){\n\tonst recoveryFiles = this.recoveryFilesByWindow.get(window);\nif (recoveryFiles == null) return;\n\nconst promises = [];\nfor (const recoveryFile of recoveryFiles) {\ntry {\nawait recoveryFile.recover();\n} catch (err) {\nconsole.log(\n`Couldn't recover ${recoveryFile.path}. Code: ${err.code}. Message: ${err.message}`\n);\n\nconst details = await recoveryFile.details();\ndialog.showMessageBox(\nwindow,\n{\ntype: 'error',\ntitle: 'Error Recovering File',\nmessage: `The file ${recoveryFile.path} could not be recovered. Please see the details below for more information.`,\ndetail: `\nPath: ${recoveryFile.path}\nMode: ${recoveryFile.mode}\nRecovery Path: ${recoveryFile.recoveryPath}\n${details}\n`,\n},\n() => {}\n);\n}\n\nthis.recoveryFilesByWindow.get(window).delete(recoveryFile);\nthis.windowsByRecoveryFile.get(recoveryFile).delete(window);\nthis.recoveryFilesByFilePath.delete(recoveryFile.path);\n}\n}", "CodeBleu_score": 39.574751130020935}, {"code": "async didCrashWindow(window){\n\tonst recoveryFiles = this.recoveryFilesByWindow.get(window);\nif (recoveryFiles == null) return;\n\nfor (const recoveryFile of recoveryFiles) {\ntry {\nawait recoveryFile.recover();\n} catch (err) {\nconsole.log(\n`Couldn't recover ${recoveryFile.path}. Code: ${err.code}. Message: ${err.message}`\n);\n\nconst details = {\npath: recoveryFile.path,\nmode: recoveryFile.mode,\nrecoveryPath: recoveryFile.recoveryPath,\n};\n\nconst message = `Couldn't recover ${recoveryFile.path}.\nCode: ${err.code}.\nMessage: ${err.message}`;\nconst options = {\ntype: 'error',\nbuttons: ['OK'],\nmessage,\ndetail: JSON.stringify(details),\n};\ndialog.showMessageBox(options);\n}\n\nthis.recoveryFilesByWindow.get(window).delete(recoveryFile);\nthis.windowsByRecoveryFile.get(recoveryFile).delete(window);\n}\n}", "CodeBleu_score": 44.61561414710257}, {"code": "async didCrashWindow(window){\n\tonst recoveryFiles = this.recoveryFilesByWindow.get(window);\nif (recoveryFiles == null) return;\n\nfor (const recoveryFile of recoveryFiles) {\ntry {\nawait recoveryFile.recover();\n} catch (err) {\nconsole.log(\n`Couldn't recover ${recoveryFile.recoveryPath}. Code: ${err.code}. Message: ${err.message}`\n);\n\nconst details = `The file ${recoveryFile.path} is corrupted and cannot be recovered.`;\nconst recoveryPath = recoveryFile.recoveryPath;\nconst message = `The file ${recoveryPath} has been created in ${this.recoveryDirectory}.`;\nconst options = {\ntype: 'error',\nbuttons: ['Open recovery directory', 'Cancel'],\ndefaultId: 0,\ntitle: 'File Recovery',\nmessage: message,\ndetail: details,\n};\n\nconst result = await dialog.showMessageBox(options);\n\nif (result.response === 0) {\nawait openPathInFinder(this.recoveryDirectory);\n}\n}\n\nthis.recoveryFilesByWindow.get(window).delete(recoveryFile);\nthis.windowsByRecoveryFile.get(recoveryFile).delete(window);\nthis.recoveryFilesByFilePath.delete(recoveryFile.path);\n}\n}", "CodeBleu_score": 47.29284847328039}]}
{"instance_id": "935916bc7ea0", "generation_result": [{"code": "async function copyFile(source, destination, mode){\n\tn new Promise((resolve, reject) => {\n\t\tfs.mkdirp(Path.dirname(destination), error => {\n\t\t\tif (error) return reject(error);\n\t\t\tconst readStream = fs.createReadStream(source);\n\t\t\tconst writeStream = fs.createWriteStream(destination, { mode });\n\t\t\treadStream.on('error', reject);\n\t\t\twriteStream.on('error', reject);\n\t\t\twriteStream.on('finish', resolve);\n\t\t\treadStream.pipe(writeStream);\n\t\t});\n\t});\n}", "CodeBleu_score": 58.154245284044016}, {"code": "async function copyFile(source, destination, mode){\n\t mkdirp(Path.dirname(destination));\n\treturn new Promise((resolve, reject) => {\n\t\tconst readStream = fs.createReadStream(source);\n\t\tconst writeStream = fs.createWriteStream(destination, { mode });\n\t\treadStream.on('error', reject);\n\t\twriteStream.on('error', reject);\n\t\twriteStream.on('finish', resolve);\n\t\treadStream.pipe(writeStream);\n\t});\n}", "CodeBleu_score": 48.84137279375517}, {"code": "async function copyFile(source, destination, mode){\n\tn new Promise((resolve, reject) => {\n\t\tmkdirp(Path.dirname(destination), error => {\n\t\t\tif (error) return reject(error);\n\t\t\tfs.copy(source, destination, { mode }, error =>\n\t\t\t\terror? reject(error) : resolve()\n\t\t\t);\n\t\t});\n\t});\n}", "CodeBleu_score": 31.496105344016833}]}
{"instance_id": "5410353afedd", "generation_result": [{"code": "function handleStartupEventWithSquirrel(){\n\ts.platform!== 'win32') {\n\t\treturn false;\n\t}\n\n\ttry {\n\t\tconst SquirrelUpdate = require('squirrel-update');\n\t\tconst command = process.argv[1];\n\t\treturn SquirrelUpdate.handleStartupEvent(command);\n\t} catch (e) {\n\t\tconsole.error(e);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 68.54531395732502}, {"code": "function handleStartupEventWithSquirrel(){\n\ts.platform!== 'win32') {\n\t\treturn false;\n\t}\n\n\ttry {\n\t\tconst SquirrelUpdate = require('squirrel-update');\n\t\tconst command = process.argv[1];\n\n\t\tif (command === '--squirrel-install') {\n\t\t\tSquirrelUpdate.handleStartupEvent(command);\n\t\t} else if (command === '--squirrel-updated') {\n\t\t\tSquirrelUpdate.handleStartupEvent(command);\n\t\t} else if (command === '--squirrel-uninstall') {\n\t\t\tSquirrelUpdate.handleStartupEvent(command);\n\t\t} else if (command === '--squirrel-obsolete') {\n\t\t\tSquirrelUpdate.handleStartupEvent(command);\n\t\t}\n\n\t\treturn true;\n\t} catch (error) {\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 59.15092739345012}, {"code": "function handleStartupEventWithSquirrel(){\n\ts.platform!== 'win32') {\n\t\treturn false;\n\t}\n\n\tconst SquirrelUpdate = require('electron-squirrel-startup');\n\tconst command = process.argv[1];\n\n\tif (SquirrelUpdate.handleStartupEvent(command)) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 71.14761880120149}]}
{"instance_id": "5fb2d4f077cb", "generation_result": [{"code": "function normalizeDriveLetterName(filePath){\n\t.platform === 'win32' && filePath) {\n\t\tconst driveLetter = filePath.slice(0, 2).toLowerCase();\n\t\tif (driveLetter === 'c:\\\\' || driveLetter === 'd:\\\\') {\n\t\t\treturn filePath.replace(driveLetter, driveLetter.toUpperCase());\n\t\t}\n\t}\n\n\treturn filePath;\n}", "CodeBleu_score": 45.66766290719337}, {"code": "function normalizeDriveLetterName(filePath){\n\t.platform === 'win32' && filePath) {\n\t\treturn filePath.replace(/^[a-z]:/, '$&'.toUpperCase());\n\t}\n\treturn filePath;\n}", "CodeBleu_score": 50.05405583957436}, {"code": "function normalizeDriveLetterName(filePath){\n\t.platform === 'win32') {\n\t\tconst driveLetter = filePath.charAt(0);\n\t\tif (driveLetter.toLowerCase()!== driveLetter) {\n\t\t\treturn filePath.replace(driveLetter, driveLetter.toUpperCase());\n\t\t}\n\t}\n\n\treturn filePath;\n}", "CodeBleu_score": 35.84983582754905}]}
{"instance_id": "e61a087ae10f", "generation_result": [{"code": "register(callback){\n\tw Registry({\n  hive: 'HKCU',\n  key: `${this.key}\\\\${this.parts[0].key}`\n}).set(this.parts[0].name, this.parts[0].value, err => {\n  if (err) {\n    return callback(err);\n  }\n  if (this.parts.length === 1) {\n    return callback();\n  }\n  this.parts.shift();\n  this.register(callback);\n});\n}", "CodeBleu_score": 24.15436807601015}, {"code": "register(callback){\n\tnst registry = new Registry({\n  hive: 'HKCU',\n  key: this.key\n});\n\nconst parts = this.parts;\nconst len = parts.length;\nlet i = 0;\n\nconst next = () => {\n  if (i === len) {\n    callback();\n    return;\n  }\n\n  const part = parts[i++];\n  registry.set(part.name, part.value, part.type, next);\n};\n\nnext();\n}", "CodeBleu_score": 39.738782045638146}, {"code": "register(callback){\n\t", "CodeBleu_score": 0.9438691534805712}]}
{"instance_id": "35b1a1ac391a", "generation_result": [{"code": "showSaveDialog(options, callback){\n\tif (typeof options ==='string') {\noptions = {\ndefaultPath: options\n};\n}\nif (typeof callback === 'function') {\n// Async version: pass options directly to Electron but set sane defaults\noptions = Object.assign({\ntitle: 'Save File',\nbuttonLabel: 'Save',\ndefaultPath: ''\n}, options);\nremote.dialog.showSaveDialog(remote.getCurrentWindow(), options).then(result => {\ncallback(result.canceled? undefined : result.filePath);\n});\n} else {\n// Legacy sync version: options can only have `title`, `defaultPath` (optional), and `buttonLabel` (optional)\nconst {\ntitle = 'Save File',\ndefaultPath = '',\nbuttonLabel = 'Save'\n} = options;\nconst result = remote.dialog.showSaveDialogSync(remote.getCurrentWindow(), {\ntitle,\ndefaultPath,\nbuttonLabel\n});\nreturn result.canceled? undefined : result.filePath;\n}\n}", "CodeBleu_score": 57.43845951862219}, {"code": "showSaveDialog(options, callback){\n\tif (typeof options ==='string') {\noptions = {\ndefaultPath: options\n};\n}\n\nif (typeof callback === 'function') {\n// Async version: pass options directly to Electron but set sane defaults\noptions = Object.assign(\n{\ntitle: 'Save File',\nbuttonLabel: 'Save',\ndefaultPath: '',\nfilters: [\n{\nname: 'All Files',\nextensions: ['*']\n}\n]\n},\noptions\n);\n\nremote.dialog.showSaveDialog(remote.getCurrentWindow(), options).then(result => {\ncallback(result.filePath);\n});\n} else {\n// Legacy sync version: options can only have `title`, `message`, `defaultPath`, `buttonLabel`, `filters` (optional)\nlet { title, message, defaultPath, buttonLabel, filters } = options;\n\nif (!buttonLabel) buttonLabel = 'Save';\nif (!filters) filters = [{ name: 'All Files', extensions: ['*'] }];\n\nconst chosen = remote.dialog.showSaveDialogSync(remote.getCurrentWindow(), {\ntitle,\nmessage,\ndefaultPath,\nbuttonLabel,\nfilters\n});\n\nreturn chosen;\n}\n}", "CodeBleu_score": 56.27091943792263}, {"code": "showSaveDialog(options, callback){\n\tif (typeof options ==='string') {\noptions = { defaultPath: options };\n}\n\nif (typeof callback === 'function') {\n// Async version: pass options directly to Electron but set sane defaults\noptions = Object.assign(\n{\ntitle: 'Save',\ndefaultPath: '',\nbuttonLabel: 'Save',\nfilters: []\n},\noptions\n);\n\nremote.dialog\n.showSaveDialog(remote.getCurrentWindow(), options)\n.then(result => {\ncallback(result.filePath, result.canceled);\n});\n} else {\n// Legacy sync version: options can only have `title`, `defaultPath`, `buttonLabel`, and `filters`\nlet {\ntitle = 'Save',\ndefaultPath = '',\nbuttonLabel = 'Save',\nfilters = []\n} = options;\n\nconst chosen = remote.dialog.showSaveDialogSync(\nremote.getCurrentWindow(),\n{\ntitle,\ndefaultPath,\nbuttonLabel,\nfilters\n}\n);\n\nif (typeof chosen ==='string') {\nreturn chosen;\n} else {\nreturn false;\n}\n}\n}", "CodeBleu_score": 57.083666249997236}]}
{"instance_id": "a7e394aca19e", "generation_result": [{"code": "async restoreWindowDimensions(){\n\tconst { windowDimensions } = this.getLoadSettings();\nif (windowDimensions && this.isValidDimensions(windowDimensions)) {\nreturn windowDimensions;\n}\nconst defaultWindowDimensions = this.getDefaultWindowDimensions();\nawait this.setWindowDimensions(defaultWindowDimensions);\nreturn defaultWindowDimensions;\n}", "CodeBleu_score": 27.33405787264609}, {"code": "async restoreWindowDimensions(){\n\tconst dimensions = this.getDefaultWindowDimensions();\nif (this.isValidDimensions(dimensions)) {\nthis.setWindowDimensions(dimensions);\nreturn dimensions;\n} else {\nthis.storeWindowDimensions();\nreturn this.getDefaultWindowDimensions();\n}\n}", "CodeBleu_score": 28.37836997077264}, {"code": "async restoreWindowDimensions(){\n\tconst { windowDimensions } = this.getLoadSettings();\nif (windowDimensions) return windowDimensions;\n\nconst dimensions = this.getDefaultWindowDimensions();\nthis.setWindowDimensions(dimensions);\nreturn dimensions;\n}", "CodeBleu_score": 27.051511393390598}]}
{"instance_id": "c39fbfaa6502", "generation_result": [{"code": "installShellCommandsInteractively(){\n\tconst {dialog} = require('electron').remote;\n\nconst {installShellCommands} = require('./install-shell-commands');\n\ninstallShellCommands(this.applicationDelegate, this.appVersion, (err) => {\nif (err) {\ndialog.showErrorBox('Error installing commands', err.message);\n} else {\ndialog.showMessageBox({\ntype: 'info',\ntitle: 'Commands installed',\nmessage: 'The Atom and APM commands have been installed successfully.',\nbuttons: ['OK']\n});\n}\n});\n}", "CodeBleu_score": 20.40778572276701}, {"code": "installShellCommandsInteractively(){\n\tconst {dialog} = require('electron').remote;\nconst {exec} = require('child_process');\nconst {join} = require('path');\n\nconst installCommand = (command, commandName) => {\n  return new Promise((resolve, reject) => {\n    const commandPath = join(this.getInstallDirectory(), command);\n    const args = ['--install', '--target', this.appVersion, '--path', commandPath];\n    const commandPathEnv = Object.assign({}, process.env);\n    commandPathEnv.ATOM_SHELL_INTERNAL_RUN_AS_NODE = '1';\n    exec(command, args, commandPathEnv, (error, stdout, stderr) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve();\n      }\n    });\n  });\n};\n\nconst installAtomCommand = () => {\n  return installCommand('atom', 'Atom');\n};\n\nconst installApmCommand = () => {\n  return installCommand('apm', 'APM');\n};\n\nconst showInstallSuccessDialog = () => {\n  dialog.showMessageBox({\n    type: 'info',\n    title: 'Shell Commands Installed',\n    message: 'Shell commands have been installed for Atom.'\n  });\n};\n\nconst showInstallFailureDialog = (error) => {\n  dialog.showErrorBox('Shell Commands Installation Failed', error);\n};\n\nreturn installAtomCommand()\n .then(installApmCommand)\n .then(showInstallSuccessDialog)\n .catch(showInstallFailureDialog);\n}", "CodeBleu_score": 29.84720942851378}, {"code": "installShellCommandsInteractively(){\n\t", "CodeBleu_score": 0.844498191678412}]}
{"instance_id": "09d527496128", "generation_result": [{"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\tif (process.platform!== 'darwin') {\n\t\treturn callback(new Error('Unsupported platform'));\n\t}\n\n\tlet destinationPath = path.join(this.getInstallDirectory(), commandName);\n\tlet symlinkPath = path.join(this.getInstallDirectory(), commandName + '.symlink');\n\n\tfs.readLink(symlinkPath, (error, linkString) => {\n\t\tif (error) {\n\t\t\tif (error.code === 'ENOENT') {\n\t\t\t\treturn this.createSymlink(commandPath, symlinkPath, callback);\n\t\t\t}\n\n\t\t\treturn callback(error);\n\t\t}\n\n\t\tif (linkString === commandPath) {\n\t\t\treturn callback(null, commandName);\n\t\t}\n\n\t\tif (askForPrivilege) {\n\t\t\tthis.elevatePrivileges(() => {\n\t\t\t\tthis.createSymlink(commandPath, symlinkPath, callback);\n\t\t\t});\n\t\t} else {\n\t\t\tcallback(new Error('Permission denied'));\n\t\t}\n\t});\n}", "CodeBleu_score": 45.08267852652823}, {"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\tif (process.platform!== 'darwin') {\n\t\tcallback(new Error('Only macOS is supported'));\n\t\treturn;\n\t}\n\n\tconst destinationPath = path.join(this.getInstallDirectory(), commandName);\n\n\tfs.readSymlink(destinationPath, (error, symlinkPath) => {\n\t\tif (error && error.code === 'ENOENT') {\n\t\t\tthis.createSymlink(commandPath, destinationPath, askForPrivilege, callback);\n\t\t} else if (error) {\n\t\t\tcallback(error);\n\t\t} else if (symlinkPath === commandPath) {\n\t\t\tcallback(null, commandName);\n\t\t} else {\n\t\t\tthis.createSymlink(commandPath, destinationPath, askForPrivilege, callback);\n\t\t}\n\t});\n}", "CodeBleu_score": 49.00128593437898}, {"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\tonst destinationPath = path.join(this.getInstallDirectory(), commandName);\nconst isPlatform = process.platform === 'darwin';\n\nif (!isPlatform) {\ncallback(new Error('Unsupported platform'));\nreturn;\n}\n\nfs.readLink(destinationPath, (error, linkTarget) => {\nif (error) {\nif (error.code === 'ENOENT') {\nthis.createCommandSymlink(commandPath, destinationPath, callback);\n} else {\ncallback(error);\n}\n} else if (linkTarget === commandPath) {\ncallback();\n} else {\nif (askForPrivilege) {\nthis.elevatePrivileges(() => {\nthis.createCommandSymlink(commandPath, destinationPath, callback);\n});\n} else {\ncallback(new Error('Command already exists'));\n}\n}\n});\n}", "CodeBleu_score": 38.95444873549872}]}
{"instance_id": "4807d5d43396", "generation_result": [{"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\tlet goalColumn = null;\n\nif (this.hasSelection()) {\nif (moveToEndOfSelection) {\ngoalColumn = this.getBufferPosition().column;\n}\n} else {\ngoalColumn = this.getBufferPosition().column;\n}\n\nconst newRow = this.getBufferPosition().row - rowCount;\nconst newColumn = goalColumn;\n\nthis.setBufferPosition([newRow, newColumn]);\n\nif (this.editor.getSoftTabs()) {\nthis.editor.setSoftWrappedIndentationForBufferRow(newRow, newColumn);\n}\n}", "CodeBleu_score": 33.59033130128057}, {"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\tif (moveToEndOfSelection === void 0) { moveToEndOfSelection = false; }\n\nconst { goalRow, goalColumn } = this.getCursorGoal(rowCount, moveToEndOfSelection);\n\nthis.setScreenPosition([goalRow, goalColumn]);\nthis.updateSoftWrapIndent();\n\nthis.goalColumn = this.getScreenColumn();\n}", "CodeBleu_score": 27.275551593682202}, {"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\tconst { goalRow, goalColumn } = this.getCursorMovementPosition(rowCount);\nconst { row, column } = this.getBufferPosition();\nconst newBufferPosition = new Point(goalRow, goalColumn);\nconst newScreenPosition = this.editor.screenPositionForBufferPosition(newBufferPosition);\n\nif (moveToEndOfSelection) {\nconst selection = this.editor.getLastSelection();\nif (selection.isEmpty()) {\nthis.setBufferPosition(newBufferPosition);\n} else {\nconst { start, end } = selection.getBufferRange();\nif (start.isEqual(newBufferPosition)) {\nthis.setBufferPosition(new BufferPosition(end.row, end.column));\n} else {\nthis.setBufferPosition(newBufferPosition);\n}\n}\n} else {\nthis.setBufferPosition(newBufferPosition);\n}\n\nthis.setScreenPosition(newScreenPosition);\nthis.goalColumn = column;\n}", "CodeBleu_score": 32.63792814396243}]}
{"instance_id": "a18da78a3351", "generation_result": [{"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\tt decorationsByMarker = {};\n\nthis.decorationCountsByLayer.forEach((count, markerLayer) => {\n  const markers = markerLayer.findMarkers({\n    intersectsScreenRowRange: [startScreenRow, endScreenRow - 1]\n  });\n  const layerDecorations = this.layerDecorationsByMarkerLayer.get(markerLayer);\n  const hasMarkerDecorations =\n    this.markerDecorationCountsByLayer.get(markerLayer) > 0;\n\n  for (let i = 0; i < markers.length; i++) {\n    const marker = markers[i];\n    if (!marker.isValid()) continue;\n\n    let decorationsForMarker = decorationsByMarker[marker.id];\n    if (decorationsForMarker == null) {\n      decorationsForMarker = [];\n      decorationsByMarker[marker.id] = decorationsForMarker;\n    }\n\n    if (layerDecorations) {\n      layerDecorations.forEach(layerDecoration => {\n        const properties =\n          layerDecoration.getPropertiesForMarker(marker) ||\n          layerDecoration.getProperties();\n        decorationsForMarker.push(properties);\n      });\n    }\n\n    if (hasMarkerDecorations) {\n      const decorationsForMarker = this.decorationsByMarker.get(marker);\n      if (decorationsForMarker) {\n        decorationsForMarker.forEach(decoration => {\n          decorationsForMarker.push(decoration.getProperties());\n        });\n      }\n    }\n  }\n});\n\nreturn decorationsByMarker;\n}", "CodeBleu_score": 39.3902302183391}, {"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\tt decorationsByMarker = {};\n\nthis.decorationCountsByLayer.forEach((count, markerLayer) => {\n  const markers = markerLayer.findMarkers({\n    intersectsScreenRowRange: [startScreenRow, endScreenRow - 1],\n  });\n  const layerDecorations = this.layerDecorationsByMarkerLayer.get(markerLayer);\n  const hasMarkerDecorations = this.markerDecorationCountsByLayer.get(markerLayer) > 0;\n\n  for (let i = 0; i < markers.length; i++) {\n    const marker = markers[i];\n    if (!marker.isValid()) continue;\n\n    let decorationsForMarker = decorationsByMarker[marker.id];\n    if (decorationsForMarker == null) {\n      decorationsForMarker = [];\n      decorationsByMarker[marker.id] = decorationsForMarker;\n    }\n\n    if (layerDecorations) {\n      layerDecorations.forEach(layerDecoration => {\n        const properties =\n          layerDecoration.getPropertiesForMarker(marker) ||\n          layerDecoration.getProperties();\n        decorationsForMarker.push(properties);\n      });\n    }\n\n    if (hasMarkerDecorations) {\n      const decorationsForMarker = this.decorationsByMarker.get(marker);\n      if (decorationsForMarker) {\n        decorationsForMarker.forEach(decoration => {\n          decorationsForMarker.push(decoration.getProperties());\n        });\n      }\n    }\n  }\n});\n\nreturn decorationsByMarker;\n}", "CodeBleu_score": 40.781558410007015}, {"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\tt decorationsByMarker = {};\n\nthis.decorationCountsByLayer.forEach((count, markerLayer) => {\n  const markers = markerLayer.findMarkers({\n    intersectsScreenRowRange: [startScreenRow, endScreenRow - 1],\n  });\n  const layerDecorations = this.layerDecorationsByMarkerLayer.get(markerLayer);\n  const hasMarkerDecorations = this.markerDecorationCountsByLayer.get(markerLayer) > 0;\n\n  for (let i = 0; i < markers.length; i++) {\n    const marker = markers[i];\n    if (!marker.isValid()) continue;\n\n    let decorationPropertiesForMarker = decorationsByMarker[marker.id];\n    if (decorationPropertiesForMarker == null) {\n      decorationPropertiesForMarker = [];\n      decorationsByMarker[marker.id] = decorationPropertiesForMarker;\n    }\n\n    if (layerDecorations) {\n      layerDecorations.forEach(layerDecoration => {\n        const properties =\n          layerDecoration.getPropertiesForMarker(marker) ||\n          layerDecoration.getProperties();\n        decorationPropertiesForMarker.push(properties);\n      });\n    }\n\n    if (hasMarkerDecorations) {\n      const decorationsForMarker = this.decorationsByMarker.get(marker);\n      if (decorationsForMarker) {\n        decorationsForMarker.forEach(decoration => {\n          decorationPropertiesForMarker.push(decoration.getProperties());\n        });\n      }\n    }\n  }\n});\n\nreturn decorationsByMarker;\n}", "CodeBleu_score": 40.47941295453449}]}
{"instance_id": "950f6b74f379", "generation_result": [{"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\tif (markerLayer.isDestroyed()) {\nconst error = new Error('Cannot decorate a destroyed marker layer');\nerror.metadata = { markerLayerIsDestroyed: markerLayer.isDestroyed() };\nif (markerLayer.destroyStackTrace!= null) {\nerror.metadata.destroyStackTrace = markerLayer.destroyStackTrace;\n}\nthrow error;\n}\nconst decoration = new LayerDecoration(markerLayer, this, decorationParams);\nlet decorationsForMarkerLayer = this.decorationsByMarkerLayer.get(markerLayer);\nif (!decorationsForMarkerLayer) {\ndecorationsForMarkerLayer = new Set();\nthis.decorationsByMarkerLayer.set(markerLayer, decorationsForMarkerLayer);\n}\ndecorationsForMarkerLayer.add(decoration);\nthis.observeDecoratedLayer(markerLayer, true);\nthis.editor.didAddDecoration(decoration);\nthis.emitDidUpdateDecorations();\nthis.emitter.emit('did-add-decoration', decoration);\nreturn decoration;\n}", "CodeBleu_score": 61.58111469255771}, {"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\tif (markerLayer.isDestroyed()) {\nconst error = new Error('Cannot decorate a destroyed marker layer');\nerror.metadata = {\nmarkerLayerIsDestroyed: markerLayer.isDestroyed()\n};\nif (markerLayer.destroyStackTrace!= null) {\nerror.metadata.destroyStackTrace = markerLayer.destroyStackTrace;\n}\nthrow error;\n}\nmarkerLayer = this.displayLayer\n.getMarkerLayer(markerLayer.id);\nconst layerDecoration = new LayerDecoration(markerLayer, this, decorationParams);\nthis.layerDecorationsByMarkerLayer.set(markerLayer, layerDecoration);\nthis.observeDecoratedLayer(markerLayer, true);\nthis.editor.didAddDecoration(layerDecoration);\nthis.emitDidUpdateDecorations();\nthis.emitter.emit('did-add-decoration', layerDecoration);\nreturn layerDecoration;\n}", "CodeBleu_score": 61.717987266553585}, {"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\tif (markerLayer.isDestroyed()) {\nconst error = new Error('Cannot decorate a destroyed marker layer');\nerror.metadata = { markerLayerIsDestroyed: markerLayer.isDestroyed() };\nif (markerLayer.destroyStackTrace!= null) {\nerror.metadata.destroyStackTrace = markerLayer.destroyStackTrace;\n}\nthrow error;\n}\nmarkerLayer = this.displayLayer.getMarkerLayer(markerLayer.id);\nconst decoration = new LayerDecoration(markerLayer, this, decorationParams);\nlet decorationsForMarkerLayer = this.layerDecorationsByMarkerLayer.get(markerLayer);\nif (!decorationsForMarkerLayer) {\ndecorationsForMarkerLayer = new Set();\nthis.layerDecorationsByMarkerLayer.set(markerLayer, decorationsForMarkerLayer);\n}\ndecorationsForMarkerLayer.add(decoration);\nthis.observeDecoratedLayer(markerLayer, true);\nthis.editor.didAddDecoration(decoration);\nthis.emitDidUpdateDecorations();\nthis.emitter.emit('did-add-decoration', decoration);\nreturn decoration;\n}", "CodeBleu_score": 66.17030153696697}]}
{"instance_id": "ab015a5cc75d", "generation_result": [{"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\tconst decorationCount = this.decorationCountsByLayer.get(layer) || 0;\nthis.decorationCountsByLayer.set(layer, decorationCount + 1);\nconst disposable = layer.onDidDestroy(() => {\nthis.unobserveDecoratedLayer(layer, isMarkerDecoration);\n});\nif (isMarkerDecoration) {\nconst markerDecorationCount = this.markerDecorationCountsByLayer.get(layer) || 0;\nthis.markerDecorationCountsByLayer.set(layer, markerDecorationCount + 1);\n}\nthis.decoratedLayers.add(layer);\n}", "CodeBleu_score": 45.51384031918305}, {"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\tconst layerId = layer.id;\nconst decorationCount = this.decorationCountsByLayer.get(layer) || 0;\nthis.decorationCountsByLayer.set(layer, decorationCount + 1);\nif (decorationCount === 0) {\nconst disposable = layer.onDidChange(() => {\nthis.decorationCountsByLayer.set(layer, this.decorationCountsByLayer.get(layer) - 1);\nif (this.decorationCountsByLayer.get(layer) === 0) {\ndisposable.dispose();\nthis.unobserveDecoratedLayer(layer, isMarkerDecoration);\n}\n});\nif (isMarkerDecoration) {\nconst markerDecorationCount = this.markerDecorationCountsByLayer.get(layer) || 0;\nthis.markerDecorationCountsByLayer.set(layer, markerDecorationCount + 1);\n}\n}\n}", "CodeBleu_score": 44.72635160247306}, {"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\tif (layer.isDestroyed()) {\nreturn;\n}\n\nconst decorationCount = this.decorationCountsByLayer.get(layer) || 0;\nthis.decorationCountsByLayer.set(layer, decorationCount + 1);\n\nconst markerDecorationCount = this.markerDecorationCountsByLayer.get(layer) || 0;\nthis.markerDecorationCountsByLayer.set(layer, markerDecorationCount + (isMarkerDecoration? 1 : 0));\n\nif (this.decorationCountsByLayer.get(layer) === 1) {\nthis.editor.onDidDestroyMarkerLayer(layer, () => {\nthis.decorationCountsByLayer.delete(layer);\nthis.markerDecorationCountsByLayer.delete(layer);\nthis.unobserveDecoratedLayer(layer, true);\nthis.emitDidUpdateDecorations();\n});\n}\n}", "CodeBleu_score": 40.310952254110454}]}
{"instance_id": "9d7f091a1b67", "generation_result": [{"code": "finishLoading(){\n\t", "CodeBleu_score": 2.8993430574334047}, {"code": "finishLoading(){\n\t", "CodeBleu_score": 2.8993430574334047}, {"code": "finishLoading(){\n\t", "CodeBleu_score": 2.8993430574334047}]}
{"instance_id": "a06630788868", "generation_result": [{"code": "dblclickHandler(){\n\t\tconst action = this.applicationDelegate.getUserDefault('titleBarDoubleClickAction');\n\tif (action === 'Minimize') {\n\t\tthis.workspace.minimize();\n\t} else if (action === 'Maximize') {\n\t\tthis.workspace.toggleMaximize();\n\t}\n}", "CodeBleu_score": 23.739276641153563}, {"code": "dblclickHandler(){\n\t", "CodeBleu_score": 3.4649816559029003}, {"code": "dblclickHandler(){\n\t", "CodeBleu_score": 3.4649816559029003}]}
{"instance_id": "fd29bc5fd921", "generation_result": [{"code": "_openSettingsWindow (category){\n\tconst settings = new SettingWindow(this._accessor)\nsettings.createWindow(category)\nthis._windowManager.add(settings)\nif (this._windowManager.windowCount === 1) {\nthis._accessor.menu.setActiveWindow(settings.id)\n}\n}", "CodeBleu_score": 20.53634865253784}, {"code": "_openSettingsWindow (category){\n\tconst { _windowManager } = this\nconst settings = _windowManager.getSettingsWindow()\nif (settings) {\nsettings.bringToFront()\nsettings.focus()\nsettings.changeTab(category)\n} else {\nthis._createSettingWindow(category)\n}\n}", "CodeBleu_score": 25.915473749853383}, {"code": "_openSettingsWindow (category){\n\tconst settings = new SettingsWindow(this._accessor)\nsettings.createWindow(category)\nthis._windowManager.add(settings)\nif (this._windowManager.windowCount === 1) {\nthis._accessor.menu.setActiveWindow(settings.id)\n}\n}", "CodeBleu_score": 20.478456940560466}]}
{"instance_id": "b9c797e2b719", "generation_result": [{"code": "findBestWindowToOpenIn (fileList){\n\twindows }", "CodeBleu_score": 1.1433778008235231}, {"code": "findBestWindowToOpenIn (fileList){\n\twindows, _activeWindowId }", "CodeBleu_score": 1.5994059975875454}, {"code": "findBestWindowToOpenIn (fileList){\n\tetActiveEditorId, getWindowsByType }", "CodeBleu_score": 1.5994059975889041}]}
{"instance_id": "bcd3eb76bbac", "generation_result": [{"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\tet encoding = 'utf8';\n\tlet isBom = false;\n\n\tfor (const bomEncoding in BOM_ENCODINGS) {\n\t\tconst bom = BOM_ENCODINGS[bomEncoding];\n\t\tif (checkSequence(buffer, bom)) {\n\t\t\tencoding = bomEncoding;\n\t\t\tisBom = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (autoGuessEncoding) {\n\t\tencoding = guessEncodingFromBuffer(buffer, encoding);\n\t}\n\n\treturn {\n\t\tencoding,\n\t\tisBom\n\t};\n}", "CodeBleu_score": 32.33856781571143}, {"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\tet encoding = 'utf8'\n\tlet isBom = false\n\tfor (const bomEncoding in BOM_ENCODINGS) {\n\t\tif (checkSequence(buffer, BOM_ENCODINGS[bomEncoding])) {\n\t\t\tencoding = bomEncoding\n\t\t\tisBom = true\n\t\t\tbreak\n\t\t}\n\t}\n\tif (autoGuessEncoding) {\n\t\tencoding = guessEncodingFromCed(buffer, encoding)\n\t\tencoding = encoding.toLowerCase()\n\t}\n\treturn { encoding, isBom }\n}", "CodeBleu_score": 35.63981832262899}, {"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\tet encoding = 'utf8'\n\tlet isBom = false\n\tfor (const bomEncoding in BOM_ENCODINGS) {\n\t\tif (checkSequence(buffer, BOM_ENCODINGS[bomEncoding])) {\n\t\t\tencoding = bomEncoding\n\t\t\tisBom = true\n\t\t\tbreak\n\t\t}\n\t}\n\tif (autoGuessEncoding) {\n\t\tencoding = ced(buffer, encoding)\n\t\tif (encoding in CED_ICONV_ENCODINGS) {\n\t\t\tencoding = CED_ICONV_ENCODINGS[encoding]\n\t\t} else {\n\t\t\tencoding = encoding.toLowerCase()\n\t\t}\n\t}\n\treturn { encoding, isBom }\n}", "CodeBleu_score": 45.348569199637296}]}
{"instance_id": "a2525337ad24", "generation_result": [{"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\t const { lineEnding, encoding, bom } = options\n const { isDir, path } = normalizeMarkdownPath(pathname)\n if (isDir) {\n throw new Error(`[ERROR] Cannot write to directory: \\\"${pathname}\\\".`)\n }\n const ext = path.split('.').pop()\n const newPathname = ext ==='md'? path : `${path}.md`\n const buffer = Buffer.from(content, encoding)\n if (lineEnding) {\n buffer = convertLineEndings(buffer, lineEnding)\n }\n writeFile(newPathname, buffer, { bom })\n}", "CodeBleu_score": 38.7334294475815}, {"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\tconst { encoding, lineEnding, bom } = options\nconst { isDir } = normalizeMarkdownPath(pathname)\nif (isDir) {\nconsole.error(`[ERROR] Cannot write to a directory: \"${pathname}\".`)\nreturn\n}\n// Extract line ending and encoding from options\nconst lineEndingChar = getLineEnding(lineEnding)\nconst encodingChar = guessEncoding(encoding)\n// Convert line endings if needed\nconst convertedContent = convertLineEndings(content, lineEnding)\n// Encode content into buffer\nconst buffer = iconv.encode(convertedContent, encodingChar)\n// Write buffer to file\nwriteFile(pathname, buffer, { encoding: 'binary', bom })\n}", "CodeBleu_score": 36.656110672443596}, {"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\t// Extract line ending and encoding options from the options object.\nconst { lineEnding = 'lf', encoding = 'utf8', bom = false } = options\n\n// Default file extension to '.md' if not provided.\nif (!path.extname(pathname)) {\npathname += '.md'\n}\n\n// Convert line endings if needed.\nconst convertedContent = convertLineEndings(content, lineEnding)\n\n// Encode the content into a buffer using the specified encoding and BOM setting.\nconst buffer = iconv.encode(convertedContent, encoding, { bom })\n\n// Write the buffer to the file at the given pathname.\nreturn writeFile(pathname, buffer)\n}", "CodeBleu_score": 33.33220147609032}]}
{"instance_id": "1c01cc82b2d4", "generation_result": [{"code": "export const registerKeyboardListeners = () =>{\n\t\tipcMain.on('get-keyboard-info', async (event, arg) => {\n\t\tevent.returnValue = await getKeyboardInfo()\n\t})\n\tipcMain.on('dump-keyboard-info', async (event, arg) => {\n\t\tconst keyboardInfo = await getKeyboardInfo()\n\t\tconst tempDir = os.tmpdir()\n\t\tconst keyboardInfoFilePath = path.join(tempDir, 'keyboard-info.json')\n\t\ttry {\n\t\t\tawait fsPromises.writeFile(keyboardInfoFilePath, JSON.stringify(keyboardInfo))\n\t\t\tshell.openPath(keyboardInfoFilePath)\n\t\t} catch (err) {\n\t\t\tlog.error(err)\n\t\t}\n\t})\n}", "CodeBleu_score": 35.69937626713098}, {"code": "export const registerKeyboardListeners = () =>{\n\t\tipcMain.on('getKeyboardInfo', (event) => {\n\t\tevent.returnValue = getKeyboardInfo()\n\t})\n\n\tipcMain.on('dumpKeyboardInfo', async (event, filePath) => {\n\t\ttry {\n\t\t\tconst keyboardInfo = getKeyboardInfo()\n\t\t\tconst json = JSON.stringify(keyboardInfo, null, 2)\n\t\t\tawait fsPromises.writeFile(filePath, json)\n\t\t\tshell.openPath(filePath)\n\t\t} catch (error) {\n\t\t\tlog.error(error)\n\t\t}\n\t})\n}", "CodeBleu_score": 30.615090883955055}, {"code": "export const registerKeyboardListeners = () =>{\n\t\tipcMain.on('getKeyboardInfo', (event) => {\n\t\tevent.returnValue = getKeyboardInfo()\n\t})\n\tipcMain.on('dumpKeyboardInfo', (event, filePath) => {\n\t\tfsPromises.writeFile(filePath, JSON.stringify(getKeyboardInfo(), null, 2)).catch((error) => {\n\t\t\tlog.error('Error dumping keyboard info to file:', error)\n\t\t})\n\t\tshell.openPath(path.dirname(filePath))\n\t})\n}", "CodeBleu_score": 36.8891118267928}]}
{"instance_id": "fa0bb388c99d", "generation_result": [{"code": "_prepareKeyMapper (){\n\tst { appEnvironment } = this\nconst { isDevMode } = appEnvironment\nconst { keyboardLayoutMonitor } = getKeyboardInfo()\n\nconst { keyboardLayout, keyboardKeymap } = keyboardLayoutMonitor.get()\n\n// Set keyboard layout and keymap using electronLocalshortcut\nelectronLocalshortcut.setKeyboardLayout(keyboardLayout)\nelectronLocalshortcut.setKeyboardMapping(keyboardKeymap)\n\n// Log keyboard layout changes in debug mode\nkeyboardLayoutMonitor.on('change', (newLayout) => {\nif (isDevMode) {\nlog.debug(`[DEBUG] Keyboard layout changed to ${newLayout}`)\n}\n\nelectronLocalshortcut.setKeyboardLayout(newLayout)\n})\n\n// Log keyboard keymap changes in debug mode\nkeyboardLayoutMonitor.on('keymap-change', (newKeymap) => {\nif (isDevMode) {\nlog.debug(`[DEBUG] Keyboard keymap changed to ${newKeymap}`)\n}\n\nelectronLocalshortcut.setKeyboardMapping(newKeymap)\n})\n}", "CodeBleu_score": 23.92923998234054}, {"code": "_prepareKeyMapper (){\n\tst { appEnvironment } = this\nconst { isDevMode } = appEnvironment\nconst { keyboardLayoutMonitor } = getKeyboardInfo()\n\n/**\n * @param {KeyboardLayout} keyboardLayout The keyboard layout.\n * @param {KeyboardLayout} keyboardLayout The keyboard layout.\n */\nconst updateKeyMapper = (keyboardLayout) => {\nif (isDevMode) {\nlog.debug(`[DEBUG] keyboardLayout changed to ${keyboardLayout.name}`)\n}\nkeyboardLayoutMonitor.stop()\nkeyboardLayoutMonitor.start()\n}\n\nkeyboardLayoutMonitor.on('change', updateKeyMapper)\nupdateKeyMapper(keyboardLayoutMonitor.keyboardLayout)\n}", "CodeBleu_score": 23.226838925582914}, {"code": "_prepareKeyMapper (){\n\tst { isOsx } = this.appEnvironment.config\nconst { isDevMode } = this.appEnvironment\nconst { keyboardInfo } = this.appEnvironment\nconst { keyboardLayout, keymap } = this.appEnvironment\nconst { keyboardLayoutMonitor } = this.appEnvironment\n\n// Update the keyboard layout and keymap using electronLocalshortcut.\nif (keyboardInfo) {\nelectronLocalshortcut.setKeyboardLayout(keyboardInfo.layout)\nelectronLocalshortcut.setKeyboardMapping(keymap)\n}\n\n// Log the keyboard layout and keymap when the keyboard layout changes.\nkeyboardLayoutMonitor.on('change', (layout, keymap) => {\nif (isDevMode) {\nlog.debug(`[DEBUG] Keyboard layout changed to \\\"${layout}\\\" and keymap to \\\"${keymap}\\\".`)\n}\nelectronLocalshortcut.setKeyboardLayout(layout)\nelectronLocalshortcut.setKeyboardMapping(keymap)\n})\n}", "CodeBleu_score": 30.088189878046457}]}
{"instance_id": "0438f43329c9", "generation_result": [{"code": "fixSystemConfig (){\n\t", "CodeBleu_score": 0.6435209714972053}, {"code": "fixSystemConfig (){\n\t", "CodeBleu_score": 0.6435209714972053}, {"code": "fixSystemConfig (){\n\tig = this.systemConfig\nconst userConfig = this.userConfig\n\nconst { enableProxy, server, bypass } = userConfig.get('proxy')\nconst proxyScopes = userConfig.get('proxy.scope')\n\nif (enableProxy && server && bypass) {\nsystemConfig.set('all-proxy', `http://${server}:${bypass}`)\n} else {\nsystemConfig.delete('all-proxy')\n}\n\nif (proxyScopes.includes(PROXY_SCOPES.GLOBAL)) {\nsystemConfig.delete('no-proxy')\n} else {\nsystemConfig.set('no-proxy', proxyScopes.join(','))\n}\n\nsystemConfig.delete('bt-tracker')\nsystemConfig.delete('bt-exclude-tracker')\n\nconst trackerString = reduceTrackerString(userConfig.get('tracker-source'))\nsystemConfig.set('bt-tracker', trackerString)\n\nconst { btExcludeTracker, btForceEncryption } = userConfig.get('protocols')\nif (btExcludeTracker || btForceEncryption) {\nsystemConfig.set('bt-exclude-tracker', btExcludeTracker)\nsystemConfig.set('bt-force-encryption', btForceEncryption)\n} else {\nsystemConfig.delete('bt-exclude-tracker')\nsystemConfig.delete('bt-force-encryption')\n}\n}", "CodeBleu_score": 25.107605488234864}]}
{"instance_id": "6d6fef58cde3", "generation_result": [{"code": "closeClient (){\n\tf (client) {\ntry {\nclient.destroy()\nclient = null\n} catch (err) {\nlogger.warn(`[Motrix] UPnPManager closeClient() failed, error: `, err.message)\n}\n}\n}", "CodeBleu_score": 24.039495047077683}, {"code": "closeClient (){\n\tf (client) {\ntry {\nclient.destroy()\nclient = null\n} catch (err) {\nlogger.warn(`[Motrix] UPnPManager closeClient() failed, error: `, err.message)\n}\n}\n}", "CodeBleu_score": 24.039495047077683}, {"code": "closeClient (){\n\tf (client) {\ntry {\nclient.destroy()\nclient = null\n} catch (err) {\nlogger.warn(`[Motrix] UPnPManager closeClient() failed, error: `, err)\n}\n}\n}", "CodeBleu_score": 49.61922461137621}]}
{"instance_id": "b32ad6f9757b", "generation_result": [{"code": "getTouchBarByPage (page){\n\tst { options } = this\nconst { touchBarTemplate } = options\n\nif (touchBarTemplate) {\ntry {\nconst template = require(touchBarTemplate)\nconst touchBar = this.build(template)\nthis.bars[page] = touchBar\nreturn touchBar\n} catch (error) {\nlogger.error(error)\n}\n}\n\nreturn null\n}", "CodeBleu_score": 36.89886960451497}, {"code": "getTouchBarByPage (page){\n\t(!this.bars[page]) {\ntry {\nthis.bars[page] = new TouchBar(this.build(this.template))\n} catch (error) {\nlogger.error(`Failed to build TouchBar for page \"${page}\":`, error)\n}\n}\nreturn this.bars[page]\n}", "CodeBleu_score": 22.055455804826334}, {"code": "getTouchBarByPage (page){\n\t touchBar = this.bars[page]\nif (touchBar) {\nreturn touchBar\n}\ntry {\ntouchBar = new TouchBar(this.build(this.template))\nthis.bars[page] = touchBar\n} catch (error) {\nlogger.error(error)\n}\nreturn touchBar\n}", "CodeBleu_score": 24.209218376527176}]}
{"instance_id": "f860bf9bf687", "generation_result": [{"code": "handleWindowClose (pageOptions, page, window){\n\t bindCloseToHide }", "CodeBleu_score": 4.494364605683994}, {"code": "handleWindowClose (pageOptions, page, window){\n\ton('close', (event) => {\nif (pageOptions.bindCloseToHide &&!this.willQuit) {\nevent.preventDefault()\nif (window.isFullScreen()) {\nwindow.setFullScreen(false)\n}\nwindow.hide()\n} else {\nthis.emit('window-closed', { page, bounds: window.getBounds() })\n}\n})\n}", "CodeBleu_score": 46.733409778061585}, {"code": "handleWindowClose (pageOptions, page, window){\n\ton('close', (event) => {\nconst { bindCloseToHide, openDevTools } = pageOptions\nif (bindCloseToHide &&!this.willQuit) {\nevent.preventDefault()\nwindow.hide()\nif (window.isFullScreen()) {\nwindow.setFullScreen(false)\n}\n} else if (openDevTools) {\nwindow.webContents.openDevTools()\n}\nthis.emit('window-closed', { page, bounds: window.getBounds() })\n})\n}", "CodeBleu_score": 41.9825082705532}]}
{"instance_id": "ae062f5e98e3", "generation_result": [{"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\t", "CodeBleu_score": 2.5174730172744924}, {"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\trn new Promise((resolve, reject) => {\nconst appName = app.getName()\nconst appPath = app.getAppPath()\nconst appPathInApplicationsFolder = resolve(app.getPath('applications'), appName)\nconst appPathInApplicationsFolderExists = existsSync(appPathInApplicationsFolder)\nconst appPathInApplicationsFolderIsDir = lstatSync(appPathInApplicationsFolder).isDirectory()\nconst appPathInApplicationsFolderIsFile = lstatSync(appPathInApplicationsFolder).isFile()\n\nif (appPathInApplicationsFolderExists && appPathInApplicationsFolderIsFile) {\nreject('The application is already in the Applications folder.')\n} else if (appPathInApplicationsFolderExists && appPathInApplicationsFolderIsDir) {\nreject('The application is already in the Applications folder.')\n} else {\naccess(appPath, constants.F_OK, (error) => {\nif (error) {\nreject(error)\n} else {\nshell.moveItemToTrash(appPath)\nshell.moveItemToTrash(appPathInApplicationsFolder)\n\nshell.moveItemToTrash(appPath, appPathInApplicationsFolder, (error) => {\nif (error) {\nreject(error)\n} else {\nresolve()\n}\n})\n}\n})\n}\n})\n}", "CodeBleu_score": 37.98822535266786}, {"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\turn new Promise((resolve, reject) => {\n const moveAppToApplicationsFolder = async () => {\n try {\n const appPath = app.getAppPath()\n const appName = app.getName()\n const appPathInApplicationsFolder = resolve(app.getPath('home'), 'Applications', appName)\n const appPathInApplicationsFolderExists = await exists(appPathInApplicationsFolder)\n const appPathInApplicationsFolderIsDirectory = await lstat(appPathInApplicationsFolder).then((stats) => stats.isDirectory())\n if (appPathInApplicationsFolderExists && appPathInApplicationsFolderIsDirectory) {\n return resolve()\n }\n await access(appPath, constants.W_OK)\n await move(appPath, appPathInApplicationsFolder)\n return resolve()\n } catch (error) {\n logger.error(`Failed to move application to Applications folder: ${errorMsg}`)\n return reject(error)\n }\n }\n moveAppToApplicationsFolder()\n })\n}", "CodeBleu_score": 36.26271841841162}]}
{"instance_id": "294de13d4a02", "generation_result": [{"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\t", "CodeBleu_score": 4.689580994804317}, {"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\t if (isWindows || isDarwin) {\n    const icon = options.icon;\n    const iconPath = path.join(appPath, 'icon.png');\n    if (icon) {\n      const iconPath = path.join(appPath, 'icon.png');\n      if (icon.startsWith('file://')) {\n        const iconPath = path.join(appPath, 'icon.png');\n        await fs.copy(icon.replace('file://', ''), iconPath);\n      } else if (icon.startsWith('data:')) {\n        const iconPath = path.join(appPath, 'icon.png');\n        await fs.writeFile(iconPath, icon.replace('data:', ''), 'base64');\n      } else {\n        await convertIconIfNecessary(icon, iconPath);\n      }\n    }\n//  }\n}", "CodeBleu_score": 32.26359249968521}, {"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\t", "CodeBleu_score": 4.689580994804317}]}
{"instance_id": "af06dceb6a2f", "generation_result": [{"code": "export function normalizeAppName(appName: string, url: string): string{\n\tconst urlHash = crypto\n\t\t.createHash('md5')\n\t\t.update(url)\n\t\t.digest('hex');\n\n\tconst hashSubstring = urlHash.substring(0, 6);\n\n\tconst normalizedAppName = appName\n\t\t.toLowerCase()\n\t\t.replace(/[^a-z0-9-]/g, '')\n\t\t.replace(/ /g, '-')\n\t\t.replace(/_/g, '-')\n\t\t.replace(/-+/g, '-')\n\t\t.replace(/^-+|-+$/g, '')\n\t\t.concat(`-nativefier-${hashSubstring}`);\n\n\treturn normalizedAppName;\n}", "CodeBleu_score": 51.415437930064755}, {"code": "export function normalizeAppName(appName: string, url: string): string{\n\tconst normalizedAppName = appName\n\t\t.replace(/[^a-zA-Z0-9\\-_]/g, '')\n\t\t.replace(/ /g, '-')\n\t\t.replace(/_/g, '-')\n\t\t.replace(/^-+|-+$/g, '')\n\t\t.toLowerCase();\n\n\tconst hash = crypto.createHash('md5').update(url).digest('hex');\n\tconst hashSubstr = hash.substr(0, 6);\n\n\treturn `${normalizedAppName}-nativefier-${hashSubstr}`;\n}", "CodeBleu_score": 52.92556997668936}, {"code": "export function normalizeAppName(appName: string, url: string): string{\n\tonst hash = crypto.createHash('md5').update(url).digest('hex');\nconst hashSubstring = hash.substring(0, 6);\nconst normalizedAppName = appName\n.toLowerCase()\n.replace(/[^a-zA-Z0-9\\-_ ]/g, '')\n.replace(/ /g, '-')\n.replace(/_/g, '-')\n+ '-nativefier-' + hashSubstring;\nreturn normalizedAppName;\n}", "CodeBleu_score": 51.37207847980798}]}
{"instance_id": "3728778a6e34", "generation_result": [{"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\t", "CodeBleu_score": 6.555677126020833}, {"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\t", "CodeBleu_score": 6.555677126020833}, {"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\t\n}", "CodeBleu_score": 6.584793506668511}]}
{"instance_id": "281c20f209ba", "generation_result": [{"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\treturn new Promise((resolve, reject) => {\n\nlog.info(`Downloading ${fileUrl}`);\n\nconst ext = path.extname(fileUrl).toLowerCase();\n\naxios\n.get(fileUrl, {\nresponseType: 'arraybuffer',\n})\n.then((response) => {\nlog.info(`Downloaded ${fileUrl}`);\nresolve({\ndata: Buffer.from(response.data),\next,\n});\n})\n.catch((error) => {\nlog.error(`Failed to download ${fileUrl}`, error);\nreject(error);\n});\n});\n}", "CodeBleu_score": 56.23464881585929}, {"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\teturn new Promise((resolve, reject) => {\nconst ext = path.extname(fileUrl);\nconst fileName = path.basename(fileUrl);\n\nconst options = {\nurl: fileUrl,\nresponseType: 'arraybuffer',\n};\n\nlog.info(`Downloading ${fileUrl}...`);\n\naxios\n.get(fileUrl, options)\n.then((response) => {\nlog.info(`Downloaded ${fileName} (${response.data.byteLength} bytes)`);\nresolve({ data: response.data, ext });\n})\n.catch((err) => {\nlog.error(`Error downloading ${fileName}: ${err.message}`);\nreject(err);\n});\n});\n}", "CodeBleu_score": 46.96635190667676}, {"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\treturn new Promise((resolve, reject) => {\n\nlog.info(`Downloading ${fileUrl}`);\n\naxios\n.get(fileUrl, {\nresponseType: 'arraybuffer',\n})\n.then((response) => {\n\nconst ext = path.extname(fileUrl);\n\nresolve({\ndata: response.data,\next,\n});\n})\n.catch((error) => {\n\nlog.error(error);\nreject(error);\n});\n});\n}", "CodeBleu_score": 59.34036269649914}]}
{"instance_id": "e71c0b9dab4a", "generation_result": [{"code": "export function camelCased(str: string): string{\n\twords = str.split('-').filter(Boolean);\nreturn words.map((word, index) => {\nif (index === 0) {\nreturn word;\n}\nreturn word.charAt(0).toUpperCase() + word.slice(1);\n}).join('');\n}", "CodeBleu_score": 52.32597562811466}, {"code": "export function camelCased(str: string): string{\n\t str\n.split('-')\n.filter(Boolean)\n.map((word, index) => {\nif (index === 0) {\nreturn word;\n}\nreturn word[0].toUpperCase() + word.slice(1);\n})\n.join('');\n}", "CodeBleu_score": 54.04001006558197}, {"code": "export function camelCased(str: string): string{\n\t str.split('-').filter((word) => word).map((word, index) =>\n(index === 0? word : word[0].toUpperCase() + word.substring(1)),\n).join('');\n}", "CodeBleu_score": 36.9735126270224}]}
{"instance_id": "c93f0f7bfa03", "generation_result": [{"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\t\n}", "CodeBleu_score": 13.4938861775731}, {"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\t\tlet sanitizedFilename = sanitize(filenameToSanitize);\n\n\tif (platform === 'linux') {\n\t\tsanitizedFilename = sanitizedFilename.replace(/ /g, '_');\n\t}\n\n\tif (sanitizedFilename.length === 0) {\n\t\tlog.warn(\n\t\t\t`The sanitized filename is empty. Assigning default application name: ${DEFAULT_APP_NAME}`,\n\t\t);\n\t\tsanitizedFilename = DEFAULT_APP_NAME;\n\t}\n\n\tlog.debug(`Sanitized filename: ${sanitizedFilename}`);\n\n\treturn sanitizedFilename;\n}", "CodeBleu_score": 50.675738064839074}, {"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\t\nlog.info(`Sanitizing filename ${filenameToSanitize} on platform ${platform}`);\n\nconst sanitizedFilename = sanitize(filenameToSanitize);\n\nif (platform === 'linux' && sanitizedFilename.length === 0) {\n  log.warn('The sanitized filename is empty. Assigning default application name.');\n  return DEFAULT_APP_NAME;\n}\n\nreturn sanitizedFilename;\n\n}", "CodeBleu_score": 45.40427566500975}]}
{"instance_id": "ac4bf3ef1fa8", "generation_result": [{"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\typeof savedCache.duration === \\\"string\\\"\n? parseInt(savedCache.duration, 10)\n: savedCache.duration\n\nconst time = savedCache.time\n\nconst currentTime = new Date().getTime()\n\nreturn time + duration < currentTime\n}", "CodeBleu_score": 31.295757191365748}, {"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\tche.duration === \\\"string\\\") {\nsavedCache.duration = parseInt(savedCache.duration)\n}\nreturn (\n+new Date(savedCache.time) + savedCache.duration < +new Date()\n)\n}", "CodeBleu_score": 21.805317312466336}, {"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\t = new Date().getTime();\nconst cacheTime = Number(savedCache.time);\nconst cacheDuration = Number(savedCache.duration);\n\nif (cacheTime + cacheDuration < currentDate) {\n    return true;\n}\n\nreturn false;\n\n}", "CodeBleu_score": 29.98883931452984}]}
{"instance_id": "6b8f5c8fc4ec", "generation_result": [{"code": "static getTimestamp(timestampOptionArgument: any): number{\n\ttypeof timestampOptionArgument === \\\"number\\\") {\n    if (timestampOptionArgument < 0) {\n        throw new TypeORMError(\n            `Timestamp must be a positive number, received: \\\"${timestampOptionArgument}\\\"`,\n        )\n    }\n\n    return timestampOptionArgument\n}\n\nif (timestampOptionArgument === undefined) {\n    return Date.now()\n}\n\nthrow new TypeORMError(\n    `Timestamp must be a positive number, received: \\\"${timestampOptionArgument}\\\"`,\n)\n}", "CodeBleu_score": 51.102857575644336}, {"code": "static getTimestamp(timestampOptionArgument: any): number{\n\ttypeof timestampOptionArgument === \\\"number\\\") {\n    if (timestampOptionArgument < 0) {\n        throw new TypeORMError(\n            `Invalid migration timestamp \\\"${timestampOptionArgument}\\\". Timestamp must be a positive number.`,\n        )\n    }\n    return timestampOptionArgument\n}\nif (timestampOptionArgument) {\n    throw new TypeORMError(\n        `Invalid migration timestamp \\\"${timestampOptionArgument}\\\". Timestamp must be a positive number.`,\n    )\n}\nreturn new Date().getTime()\n}", "CodeBleu_score": 48.606590510811046}, {"code": "static getTimestamp(timestampOptionArgument: any): number{\n\ttypeof timestampOptionArgument === \\\"number\\\" && timestampOptionArgument > 0) {\nreturn timestampOptionArgument\n}\nif (timestampOptionArgument === undefined) {\nreturn new Date().getTime()\n}\nthrow new TypeORMError(\n`Invalid timestamp argument: ${timestampOptionArgument}`,\n)\n}", "CodeBleu_score": 36.836147056267514}]}
{"instance_id": "747bea9d7ad9", "generation_result": [{"code": " async dropDatabase(): Promise<void>{\n\t if (!this.isInitialized)\n throw new CannotExecuteNotConnectedError(this.name)\n\n const queryRunner = this.createQueryRunner()\n await queryRunner.startTransaction()\n try {\n await this.driver.dropDatabase(queryRunner)\n await queryRunner.commitTransaction()\n } catch (error) {\n await queryRunner.rollbackTransaction()\n throw error\n } finally {\n await queryRunner.release()\n }\n }", "CodeBleu_score": 25.711323914673805}, {"code": " async dropDatabase(): Promise<void>{\n\t if (!this.isInitialized)\n throw new CannotExecuteNotConnectedError(this.name)\n\nconst queryRunner = this.createQueryRunner()\ntry {\nawait queryRunner.startTransaction()\n\nconst connection = this\nconst entityMetadatas = connection.entityMetadatas\n\nconst databaseNames = entityMetadatas\n.map((metadata) => metadata.database)\n.filter((name) =>!!name)\n.filter((name, index, self) => self.indexOf(name) === index)\n\nif (databaseNames.length > 1) {\nfor (const databaseName of databaseNames) {\nawait queryRunner.clearDatabase(databaseName)\n}\n} else {\nawait queryRunner.clearDatabase()\n}\n\nawait queryRunner.commitTransaction()\n} catch (error) {\nawait queryRunner.rollbackTransaction()\nthrow error\n} finally {\nawait queryRunner.release()\n}\n}", "CodeBleu_score": 43.46546150694206}, {"code": " async dropDatabase(): Promise<void>{\n\tif (!this.isInitialized)\nthrow new CannotExecuteNotConnectedError(this.name)\n\nconst queryRunner = this.driver.createQueryRunner()\n\nawait queryRunner.startTransaction()\n\ntry {\nconst databaseNames = await this.driver.getDatabaseNames()\n\nif (databaseNames.length > 1) {\nawait Promise.all(\ndatabaseNames.map(async (databaseName) => {\nawait queryRunner.query(`DROP DATABASE IF EXISTS ${databaseName}`)\n}),\n)\n} else {\nawait queryRunner.query(`DROP DATABASE IF EXISTS ${databaseName}`)\n}\n\nawait queryRunner.commitTransaction()\n} catch (error) {\nawait queryRunner.rollbackTransaction()\n\nthrow error\n} finally {\nawait queryRunner.release()\n}\n}", "CodeBleu_score": 31.21955104094819}]}
{"instance_id": "7dce3d050d72", "generation_result": [{"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\t", "CodeBleu_score": 5.7114024388924465}, {"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\t", "CodeBleu_score": 5.7114024388924465}, {"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\t", "CodeBleu_score": 5.7114024388924465}]}
{"instance_id": "4413268e1791", "generation_result": [{"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\t", "CodeBleu_score": 12.635054021608644}, {"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\t// todo: throw exception if entity manager is released\nconst metadata = this.connection.getMetadata(entityClass);\nconst transformedEntity = this.plainObjectToEntityTransformer.transform(\n    entityLike,\n    metadata,\n    true,\n);\nif (!transformedEntity) return undefined;\nconst entity = await this.manager.findOne(entityClass, transformedEntity);\nif (!entity) return undefined;\nthis.plainObjectToEntityTransformer.transform(entity, entityLike, metadata);\nreturn entity;\n}", "CodeBleu_score": 48.418337003326556}, {"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\t// todo: throw exception if entity manager is released\nconst metadata = this.connection.getMetadata(entityClass)\nconst mergeIntoEntity = metadata.create(this.queryRunner)\nthis.plainObjectToEntityTransformer.transform(mergeIntoEntity, entityLike, metadata, true)\nreturn mergeIntoEntity\n}", "CodeBleu_score": 39.71902984980314}]}
{"instance_id": "c635d2b9bbdf", "generation_result": [{"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\t", "CodeBleu_score": 1.6355372613114445}, {"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\t\n}", "CodeBleu_score": 1.686070011039274}, {"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\t", "CodeBleu_score": 1.6355372613114445}]}
{"instance_id": "636802ba89ba", "generation_result": [{"code": "findAttributesWithPrefix(type, name){\n\tname = name.trim().toLowerCase();\n\nif (name.startsWith('#') || name.startsWith('~')) {\nname = name.substr(1);\n}\n\nconst key = `${type}-${name}`;\n\nconst result = [];\n\nfor (const attribute of Object.values(this.attributeIndex)) {\nif (attribute.key.startsWith(key)) {\nresult.push(attribute);\n}\n}\n\nreturn result;\n}", "CodeBleu_score": 49.694908884048296}, {"code": "findAttributesWithPrefix(type, name){\n\tname = name.trim().toLowerCase();\n\nif (name.startsWith('#') || name.startsWith('~')) {\nname = name.substr(1);\n}\n\nconst key = `${type}-${name}`;\nconst result = [];\n\nfor (const [k, v] of Object.entries(this.attributeIndex)) {\nif (k.startsWith(key)) {\nresult.push(...v);\n}\n}\n\nreturn result;\n}", "CodeBleu_score": 50.73107108346202}, {"code": "findAttributesWithPrefix(type, name){\n\tname = name.trim().toLowerCase();\n\nif (name.startsWith('#') || name.startsWith('~')) {\nname = name.substr(1);\n}\n\nconst key = `${type}-${name}`;\nconst result = [];\n\nfor (const [indexKey, attributes] of Object.entries(this.attributeIndex)) {\nif (indexKey.startsWith(key)) {\nresult.push(...attributes);\n}\n}\n\nreturn result;\n}", "CodeBleu_score": 50.436856148660205}]}
{"instance_id": "5fafa24f5463", "generation_result": [{"code": "function branchUpdated(branchRow){\n\tt branch = becca.branches[branchRow.branchId];\n\nif (!branch) {\nreturn;\n}\n\nconst childNote = becca.notes[branch.noteId];\n\nif (childNote) {\nchildNote.flatTextCache = null;\nchildNote.sortParents();\nchildNote.invalidateSubTree();\n}\n\nconst parentNote = becca.notes[branch.parentNoteId];\n\nif (parentNote) {\nparentNote.children = parentNote.children.sort((a, b) => a.notePosition - b.notePosition);\n}\n}", "CodeBleu_score": 70.1062840883287}, {"code": "function branchUpdated(branchRow){\n\tt childNote = becca.notes[branchRow.noteId];\n\nif (childNote) {\nchildNote.flatTextCache = null;\nchildNote.sortParents();\nchildNote.invalidateSubTree();\n}\n\nconst parentNote = becca.notes[branchRow.parentNoteId];\n\nif (parentNote) {\nparentNote.sortChildren();\n}\n}", "CodeBleu_score": 73.29064082364458}, {"code": "function branchUpdated(branchRow){\n\tt childNote = becca.notes[branchRow.noteId];\n\nif (childNote) {\nchildNote.flatTextCache = null;\nchildNote.sortParents();\nchildNote.invalidateSubTree();\n}\n\nconst parentNote = becca.notes[branchRow.parentNoteId];\n\nif (parentNote) {\nparentNote.children = parentNote.children.sort((a, b) => a.notePosition - b.notePosition);\n}\n}", "CodeBleu_score": 72.00614580338893}]}
{"instance_id": "80b2322b7b29", "generation_result": [{"code": "function trimMime(mime){\n\t!mime) {\nreturn null;\n}\nif (mime === 'text/html') {\nreturn mime;\n}\nif (!mimeCache[mime]) {\nconst parts = mime.split('/');\nconst commonPrefix = parts.slice(0, 2).join('/');\nconst prefix = parts.slice(0, 1).join('/');\nconst suffix = parts.slice(2).join('/');\nmimeCache[mime] = `${prefix}${suffix.replace(/-x/g, '')}`;\n}\nreturn mimeCache[mime];\n}", "CodeBleu_score": 38.993414998918276}, {"code": "function trimMime(mime){\n\tmime === null || mime === 'text/html') {\nreturn null;\n}\n\nif (mime in mimeCache) {\nreturn mimeCache[mime];\n}\n\nlet simplified = mime;\n\nif (simplified.startsWith('text/')) {\nsimplified = simplified.substring(5);\n} else if (simplified.startsWith('application/')) {\nsimplified = simplified.substring(11);\n}\n\nif (simplified.startsWith('x-')) {\nsimplified = simplified.substring(2);\n}\n\nmimeCache[mime] = simplified;\n\nreturn simplified;\n}", "CodeBleu_score": 38.94861544710565}, {"code": "function trimMime(mime){\n\t!mime || mime === 'text/html') {\nreturn null;\n}\n\nif (mimeCache[mime]) {\nreturn mimeCache[mime];\n}\n\nconst parts = mime.split('/');\n\n// remove common prefixes\nif (parts[0] === 'text') {\nparts.shift();\n} else if (parts[0] === 'application') {\nparts.shift();\n}\n\n// remove any leading '-'\nparts[0] = parts[0].replace(/^-/, '');\n\nmimeCache[mime] = parts.join('/');\n\nreturn mimeCache[mime];\n}", "CodeBleu_score": 43.070582312367314}]}
{"instance_id": "5d211ed69fed", "generation_result": [{"code": "function buildDateLimits(baseNote){\n\tt creationDate = baseNote.getAttribute('creation');\nconst creationDateTs = Date.parse(creationDate);\n\nconst minDate = new Date(creationDateTs - 30 * 24 * 60 * 60 * 1000);\nconst minExcludedDate = new Date(creationDateTs - 1 * 24 * 60 * 60 * 1000);\nconst maxExcludedDate = new Date(creationDateTs + 1 * 24 * 60 * 60 * 1000);\nconst maxDate = new Date(creationDateTs + 30 * 24 * 60 * 60 * 1000);\n\nreturn {\nminDate: minDate.toISOString(),\nminExcludedDate: minExcludedDate.toISOString(),\nmaxExcludedDate: maxExcludedDate.toISOString(),\nmaxDate: maxDate.toISOString(),\n};\n}", "CodeBleu_score": 28.76809196021575}, {"code": "function buildDateLimits(baseNote){\n\tt creationDate = baseNote.creationDate;\nconst creationTimestamp = Date.parse(creationDate);\n\nconst minDate = new Date(creationTimestamp - 86400000);\nconst minExcludedDate = new Date(creationTimestamp - 172800000);\nconst maxExcludedDate = new Date(creationTimestamp + 86400000);\nconst maxDate = new Date(creationTimestamp + 172800000);\n\nreturn {\nminDate: minDate.toISOString(),\nminExcludedDate: minExcludedDate.toISOString(),\nmaxExcludedDate: maxExcludedDate.toISOString(),\nmaxDate: maxDate.toISOString(),\n};\n}", "CodeBleu_score": 25.00607849090756}, {"code": "function buildDateLimits(baseNote){\n\the function buildDateLimits(baseNote) calculates date limits based on the creation date of a note.\n// It parses the creation date from the baseNote and converts it to a timestamp.\n// The function then returns an object with four properties: minDate, minExcludedDate, maxExcludedDate, and maxDate, each representing a specific time range around the creation date.\n// These date limits are formatted as UTC date-time strings.\n\nconst creationDate = baseNote.getCreationDate();\nconst creationDateTimestamp = dateUtils.parseDate(creationDate).getTime();\nconst minDate = new Date(creationDateTimestamp - 1000 * 60 * 60 * 24 * 30);\nconst minExcludedDate = new Date(creationDateTimestamp - 1000 * 60 * 60 * 24 * 30 * 2);\nconst maxExcludedDate = new Date(creationDateTimestamp + 1000 * 60 * 60 * 24 * 30 * 2);\nconst maxDate = new Date(creationDateTimestamp + 1000 * 60 * 60 * 24 * 30);\n\nreturn {\nminDate: minDate.toISOString(),\nminExcludedDate: minExcludedDate.toISOString(),\nmaxExcludedDate: maxExcludedDate.toISOString(),\nmaxDate: maxDate.toISOString(),\n};\n}", "CodeBleu_score": 29.470406172144425}]}
{"instance_id": "5ef14ada992c", "generation_result": [{"code": "_setContent(content, opts = {}){\n\t!content) {\nthrow new Error(`Content cannot be null or undefined`);\n}\n\nif (typeof content!=='string' &&!(content instanceof Buffer)) {\ncontent = content.toString();\n}\n\nconst isNewContent =!this.contentHash;\nconst isNewBlob =!this.blobId;\n\nconst isProtected = this.constructor.isProtected;\nconst hasProtectedSession = protectedSessionService.hasProtectedSession();\n\nlet contentHash = null;\nlet blobId = null;\nlet isNewBlobId = false;\n\nif (isProtected && hasProtectedSession) {\ncontentHash = utils.hash(content);\n\nif (opts.forceSave || isNewContent) {\nblobId = utils.newEntityId();\n\nconst blob = {\nid: blobId,\ncontentHash,\ncontent,\nutcDateCreated: dateUtils.utcDateNow(),\nutcDateModified: dateUtils.utcDateNow()\n};\n\nblobService.saveBlob(blob, {\nforceSave: true\n});\n}\n} else {\ncontentHash = content;\n}\n\nif (opts.forceSave || isNewContent || isNewBlob) {\nconst entity = {\ncontentHash,\nutcDateModified: dateUtils.utcDateNow()\n};\n\nif (isNewBlob) {\nentity.blobId = blobId;\n}\n\nthis.save(entity);\n}\n\nif (opts.forceFrontendReload || isNewBlobId) {\nthis.reloadFrontend();\n}\n}", "CodeBleu_score": 35.821500984399165}, {"code": "_setContent(content, opts = {}){\n\t", "CodeBleu_score": 0.8467755637509736}, {"code": "_setContent(content, opts = {}){\n\t!content) {\nthrow new Error(`Content cannot be null or undefined`);\n}\n\nif (typeof content ==='string') {\ncontent = Buffer.from(content);\n}\n\nif (!Buffer.isBuffer(content)) {\nthrow new Error(`Content must be a string or buffer`);\n}\n\nconst entityName = this.constructor.entityName;\nconst primaryKeyName = this.constructor.primaryKeyName;\nconst entityId = this[primaryKeyName];\n\nconst forceSave = opts.forceSave!== undefined? opts.forceSave : false;\nconst forceFrontendReload = opts.forceFrontendReload!== undefined? opts.forceFrontendReload : false;\n\nconst isNewEntity =!entityId;\n\nconst isProtected = this.constructor.isProtected;\nconst isProtectedAndSessionAvailable = isProtected && protectedSessionService.isSessionAvailable();\n\nlet blobId = this.blobId;\nlet encryptedContent = content;\nlet hash = null;\n\nif (isProtectedAndSessionAvailable) {\nconst encryptedContent = protectedSessionService.encryptContent(content);\n\nhash = utils.hash(encryptedContent);\n} else {\nhash = utils.hash(content);\n}\n\nconst isContentChanged = blobId && hash!== blobService.getHash(blobId);\n\nif (isContentChanged || forceSave) {\nconst blobId = blobService.put(content, {\nisProtected: isProtected,\nhash: hash,\nisDeleted: false\n});\n\nthis.blobId = blobId;\n\nif (isNewEntity) {\nthis.utcDateCreated = dateUtils.getUtcDate();\n}\n\nthis.utcDateModified = dateUtils.getUtcDate();\n\nif (forceSave) {\nthis.save();\n}\n}\n\nif (isContentChanged || forceFrontendReload) {\nbecca.reloadEntity(entityName, entityId);\n}\n\nreturn this;\n}", "CodeBleu_score": 39.631577500651275}]}
{"instance_id": "6f76c3417cdb", "generation_result": [{"code": "async createNoteIntoInboxCommand(){\n\tif (utils.isElectron()) {\nconst inboxNote = await dateNoteService.getNoteByDate(new Date());\nif (inboxNote) {\nconst newNote = await server.createChildNote(inboxNote.id, {\ncontent: 'New note',\ntype: 'note',\nprotection: 'private',\n});\nif (newNote) {\nawait bundleService.openNote(newNote.id, {\nhoist: true,\n});\n}\n}\n}\n}", "CodeBleu_score": 37.638849539941496}, {"code": "async createNoteIntoInboxCommand(){\n\t\tconst inboxNote = await dateNoteService.getNoteByDate(0, 0);\n\tconst newNote = await server.createNote(inboxNote.id, {\n\t\tcontent: '',\n\t\ttype: 'note',\n\t\tprotection: 'protected'\n\t});\n\tawait server.openNote(newNote.id, true);\n\tappContext.events.trigger('focus', 'title');\n}", "CodeBleu_score": 34.328235448744934}, {"code": "async createNoteIntoInboxCommand(){\n\t// retrieve the inbox note\nconst inboxNote = await dateNoteService.getNoteByDate(0, 0, 0, 0);\n// post the request to create a new note\nconst newNote = await server.post(\n`/api/v1/notes/${inboxNote.id}/children`,\n{\ncontent: 'New note',\ntype: 'note',\nprotectionStatus: 'public',\n},\n);\n// open the new note in a new tab\nbundleService.openNote(newNote.id);\n// focus and select the title of the new note\nappContext.selectTitle(newNote.id);\n}", "CodeBleu_score": 35.67746678630588}]}
{"instance_id": "2b91c618a874", "generation_result": [{"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\t const note = await server.get(`notes/${noteId}`);\n const {hoistedNoteId} = note;\n\n if (hoistedNoteId) {\n await server.post(`notes/${hoistedNoteId}/unhoist`);\n } else {\n await server.post(`notes/${noteId}/hoist`);\n }\n\n await ws.waitForMaxKnownEntityChangeId();\n }", "CodeBleu_score": 36.2066060448728}, {"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\t const note = await server.get(`notes/${noteId}`);\n const activeNoteId = appContext.tabManager.getActiveContextNoteId();\n\n if (note.hoistedNoteId) {\n await server.delete(`notes/${noteId}/hoist`);\n await ws.waitForMaxKnownEntityChangeId();\n } else if (note.type!=='search') {\n await server.post(`notes/${noteId}/hoist`, {\n hoistToNoteId: activeNoteId\n });\n await ws.waitForMaxKnownEntityChangeId();\n }\n }", "CodeBleu_score": 46.24240664179193}, {"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\t const note = await server.get(`notes/${noteId}`);\n const {note: activeNote} = appContext.tabManager.getActiveContext();\n\n if (note.hoistedNoteId === activeNote.noteId) {\n await server.post(`notes/${noteId}/hoisted`, {hoistedNoteId: null});\n } else {\n await server.post(`notes/${noteId}/hoisted`, {hoistedNoteId: activeNote.noteId});\n }\n\n await ws.waitForMaxKnownEntityChangeId();\n }", "CodeBleu_score": 45.19140165553711}]}
{"instance_id": "8df5414bda15", "generation_result": [{"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\t hash = this.generateHash(notePath, hoistedNoteId, viewScope);\n\nif (utils.isElectron()) {\nutils.dynamicRequire('@electron/remote').getCurrentWindow().webContents.send('open-in-window', hash);\n}\nelse {\nconst url = this.generateUrl(hash);\n\nwindow.open(url, 'trilium-window', 'width=1200,height=800,left=100,top=100');\n}\n}", "CodeBleu_score": 29.936531669449252}, {"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\t hash = await this.generateHash({notePath, hoistedNoteId, viewScope});\n\nif (utils.isElectron()) {\nconst ipcRenderer = utils.dynamicRequire('electron').ipcRenderer;\n\nipcRenderer.send('open-in-window', hash);\n}\nelse {\nconst url = `http://localhost:${glob.serverPort}/window/${hash}`;\n\nconst dimensions = this.getDimensionsForViewScope(viewScope);\n\nutils.openInBrowser(url, dimensions);\n}\n}", "CodeBleu_score": 42.87043171706633}, {"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\tt hash = utils.getUniqueHash(notePath, hoistedNoteId, viewScope);\n\n\tif (utils.isElectron()) {\n\t\t// the hash is used as the window id in electron\n\t\tutils.dynamicRequire('@electron/remote').ipcRenderer.send('open-in-window', hash);\n\t}\n\telse {\n\t\tconst url = `index.html?hash=${hash}`;\n\n\t\tif (viewScope === 'fullscreen') {\n\t\t\twindow.open(url, '_blank', 'width=1280,height=720');\n\t\t}\n\t\telse {\n\t\t\twindow.open(url, '_blank', 'width=800,height=600');\n\t\t}\n\t}\n}", "CodeBleu_score": 33.61858145807391}]}
{"instance_id": "bd6dc0a79a5b", "generation_result": [{"code": "async runActiveNoteCommand(){\n\t activeNoteContext = appContext.tabManager.getActiveContext();\n\nif (activeNoteContext.note.type === 'code') {\nconst {note} = activeNoteContext;\n\nif (note.mimeType === 'application/javascript') {\nconst bundle = await bundleService.getBundle(note.noteId);\n\nconst {success, error} = await bundleService.executeBundle(bundle);\n\nif (success) {\ntoastService.showToast('Note execution successful','success');\n}\nelse {\ntoastService.showToast(error, 'error');\n}\n}\nelse if (note.mimeType === 'application/json') {\nconst {success, error, data} = await server.post(`notes/${note.noteId}/execute`);\n\nif (success) {\ntoastService.showToast('Note execution successful','success');\n\nappContext.triggerEvent('note-execute-result', {noteId: note.noteId, data});\n}\nelse {\ntoastService.showToast(error, 'error');\n}\n}\nelse if (note.mimeType === 'text/x-sql') {\nconst {success, error, data} = await server.post(`notes/${note.noteId}/execute`);\n\nif (success) {\ntoastService.showToast('Note execution successful','success');\n\nappContext.triggerEvent('note-execute-result', {noteId: note.noteId, data});\n}\nelse {\ntoastService.showToast(error, 'error');\n}\n}\nelse {\ntoastService.showToast('Note execution not supported', 'error');\n}\n}\nelse {\ntoastService.showToast('Note execution not supported', 'error');\n}\n}", "CodeBleu_score": 32.222048266230935}, {"code": "async runActiveNoteCommand(){\n\t activeNoteContext = appContext.tabManager.getActiveContext();\nconst {note} = activeNoteContext;\n\nif (note.type!== 'code') {\nreturn;\n}\n\nconst {mimeType} = note;\n\nif (mimeType === 'application/x-trilium-bundle') {\n// frontend bundle\nconst bundle = await bundleService.getBundle(note.noteId);\n\nif (bundle.error) {\ntoastService.showError(bundle.error);\n}\nelse {\nawait bundleService.executeBundle(bundle);\n}\n}\nelse if (mimeType === 'application/x-trilium-script') {\n// backend script\nconst {error} = await server.post(`notes/${note.noteId}/execute`, {\ncontent: note.content,\n});\n\nif (error) {\ntoastService.showError(error);\n}\n}\nelse if (mimeType === 'application/x-trilium-sql') {\n// SQLite schema\nconst {error, results} = await froca.runQuery(note.content);\n\nif (error) {\ntoastService.showError(error);\n}\nelse {\nappContext.triggerEvent('showSqlResults', {results});\n}\n}\nelse {\n// frontend code\nconst {error} = await froca.executeCode(note.content);\n\nif (error) {\ntoastService.showError(error);\n}\n}\n\ntoastService.showSuccess(`Executed note: ${note.title}`);\n}", "CodeBleu_score": 40.00655988875868}, {"code": "async runActiveNoteCommand(){\n\t", "CodeBleu_score": 0.8131870016062366}]}
{"instance_id": "233cf4163968", "generation_result": [{"code": "async isReadOnly(){\n\tconst {readOnlyMode, autoReadOnlyDisabled} = await this.getReadOnlyMode();\n\nif (readOnlyMode) {\nreturn true;\n}\n\nif (!this.note) {\nreturn true;\n}\n\nif (this.note.isText() || this.note.isCode()) {\nreturn this.note.isLabelTruthy('readOnly') || this.viewScope.viewMode ==='source';\n}\n\nconst blob = await this.note.getBlob();\n\nif (blob.size > 1000000) {\nreturn true;\n}\n\nif (this.note.isLabelTruthy('autoReadOnlyDisabled')) {\nreturn false;\n}\n\nreturn true;\n}", "CodeBleu_score": 44.98376446597725}, {"code": "async isReadOnly(){\n\t", "CodeBleu_score": 0.9993254824567835}, {"code": "async isReadOnly(){\n\t\n// The async function isReadOnly() determines if a note is read-only.\n// It first checks if read-only mode is temporarily disabled.\n// Then, it verifies if the note exists and is of type 'text' or 'code'.\n// It returns true if the note has a'readOnly' label or if the view mode is'source'.\n// For other cases, it retrieves the note's blob and compares its content length against a size limit based on the note type.\n// If the content length exceeds the limit and the 'autoReadOnlyDisabled' label is not set, it returns true; otherwise, it returns false.\n\nif (this.note.isLabelTruthy(\"autoReadOnlyDisabled\")) {\nreturn true;\n}\n\nif (!this.note) {\nreturn false;\n}\n\nif (this.note.type!== \"text\" && this.note.type!== \"code\") {\nreturn false;\n}\n\nif (this.viewScope.viewMode === \"source\") {\nreturn false;\n}\n\nconst blob = await this.note.getBlob();\n\nif (blob.length > 100000) {\nreturn true;\n}\n\nreturn false;\n}", "CodeBleu_score": 43.80144283243247}]}
{"instance_id": "bca77fc5e32c", "generation_result": [{"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\t\n//        if (utils.isMobile()) {\n//            const activeNoteContext = this.getActiveContext();\n//            if (activeNoteContext) {\n//                const hoistedNoteId = activeNoteContext.hoistedNoteId;\n//                const ntxId = activeNoteContext.ntxId;\n//                const notePath = activeNoteContext.notePath;\n//                const viewScope = activeNoteContext.viewScope;\n//\n//                return this.openContextWithNote(notePath, {\n//                    activate: true,\n//                    ntxId,\n//                    mainNtxId,\n//                    hoistedNoteId,\n//                    viewScope\n//                });\n//            }\n//        }\n//\n//        const noteContext = await this.openContextWithNote(null, {\n//            activate: true,\n//            ntxId,\n//            mainNtxId,\n//            hoistedNoteId,\n//            viewScope: {}\n//        });\n//\n//        return noteContext;\n//    }", "CodeBleu_score": 3.3675088390567347}, {"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\t", "CodeBleu_score": 3.3675088390567347}, {"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\tconst noteContext = await this.getActiveContext();\n\nif (noteContext && noteContext.isMainContext()) {\n// if there's already a main context, just activate it\nawait this.activateNoteContext(noteContext.ntxId);\n\nreturn noteContext;\n}\n\nif (noteContext && noteContext.hoistedNoteId === hoistedNoteId) {\n// if there's an existing context with the same hoisted note id, just activate it\nawait this.activateNoteContext(noteContext.ntxId);\n\nreturn noteContext;\n}\n\n// create a new context\nconst newNoteContext = await this.createNoteContext(ntxId, hoistedNoteId, mainNtxId);\n\n// trigger event\nthis.triggerEvent('newNoteContextCreated', newNoteContext);\n\nreturn newNoteContext;\n}", "CodeBleu_score": 46.301108086222456}]}
{"instance_id": "fa8b5627c077", "generation_result": [{"code": "sortChildren(){\n\tnst childPositions = {};\nfor (const childId in this.childToBranch) {\nconst branchId = this.childToBranch[childId];\nif (!(branchId in childPositions)) {\nchildPositions[branchId] = [];\n}\nchildPositions[branchId].push(childId);\n}\n\nthis.children.sort((a, b) => {\nconst aPos = childPositions[this.parentToBranch[a]].indexOf(a);\nconst bPos = childPositions[this.parentToBranch[b]].indexOf(b);\nreturn aPos - bPos;\n});\n}", "CodeBleu_score": 43.56319966608263}, {"code": "sortChildren(){\n\tnst branchPositions = {};\nfor (const childId in this.childToBranch) {\nconst branchId = this.childToBranch[childId];\nif (!(branchId in branchPositions)) {\nbranchPositions[branchId] = [];\n}\nbranchPositions[branchId].push(childId);\n}\n\nthis.children.sort((a, b) => {\nconst branchIdA = this.childToBranch[a];\nconst branchIdB = this.childToBranch[b];\nconst posA = branchPositions[branchIdA].indexOf(a);\nconst posB = branchPositions[branchIdB].indexOf(b);\nreturn posA - posB;\n});\n}", "CodeBleu_score": 41.255232868974986}, {"code": "sortChildren(){\n\tnst branchToPosition = {};\nfor (const childNoteId in this.childToBranch) {\nconst branchId = this.childToBranch[childNoteId];\nconst position = this.froca.getNotePosition(childNoteId, branchId);\nif (!(branchId in branchToPosition)) {\nbranchToPosition[branchId] = [];\n}\nbranchToPosition[branchId].push(position);\n}\nthis.children.sort((a, b) => {\nconst aPosition = branchToPosition[this.childToBranch[a]];\nconst bPosition = branchToPosition[this.childToBranch[b]];\nif (aPosition === undefined || bPosition === undefined) {\nreturn 0;\n}\nreturn aPosition - bPosition;\n});\n}", "CodeBleu_score": 41.36820551904595}]}
{"instance_id": "51a1ff6e218f", "generation_result": [{"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\tbranchIdsToMove = filterRootNote(branchIdsToMove);\n\tbranchIdsToMove = filterSearchBranches(branchIdsToMove);\n\n\tconst newParentBranch = froca.getBranch(newParentBranchId);\n\n\tconst forbiddenNoteIds = [\n\t\t'root',\n\t\thoistedNoteService.getHoistedNoteId(),\n\t\t'_lbRoot',\n\t\t'_lbAvailableLaunchers',\n\t\t'_lbVisibleLaunchers'\n\t];\n\n\tif (forbiddenNoteIds.includes(newParentBranch.noteId)) {\n\t\ttoastService.showError('Cannot move notes here.');\n\t\treturn;\n\t}\n\n\tfor (const branchIdToMove of branchIdsToMove) {\n\t\tconst resp = await server.put(`branches/${branchIdToMove}/move-to/${newParentBranchId}`);\n\n\t\tif (!resp.success) {\n\t\t\ttoastService.showError(resp.message);\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 64.96325917322996}, {"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\tranchIdsToMove = filterRootNote(branchIdsToMove);\nbranchIdsToMove = filterSearchBranches(branchIdsToMove);\n\nconst newParentBranch = froca.getBranch(newParentBranchId);\n\nif (['root', '_lbRoot', '_lbAvailableLaunchers', '_lbVisibleLaunchers'].includes(newParentBranch.noteId)) {\ntoastService.showError('Cannot move notes here.');\nreturn;\n}\n\nfor (const branchIdToMove of branchIdsToMove) {\nconst resp = await server.put(`branches/${branchIdToMove}/move-to-parent/${newParentBranchId}`);\n\nif (!resp.success) {\ntoastService.showError(resp.message);\nreturn;\n}\n}\n}", "CodeBleu_score": 60.794695962280045}, {"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\tbranchIdsToMove = filterRootNote(branchIdsToMove);\n\tbranchIdsToMove = filterSearchBranches(branchIdsToMove);\n\n\tconst newParentBranch = froca.getBranch(newParentBranchId);\n\n\tif (['root', '_lbRoot', '_lbAvailableLaunchers', '_lbVisibleLaunchers'].includes(newParentBranch.noteId)) {\n\t\ttoastService.showError('Cannot move notes here.');\n\t\treturn;\n\t}\n\n\tfor (const branchIdToMove of branchIdsToMove) {\n\t\tconst resp = await server.put(`branches/${branchIdToMove}/move-to/${newParentBranchId}`);\n\n\t\tif (!resp.success) {\n\t\t\ttoastService.showError(resp.message);\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 60.9945681934406}]}
{"instance_id": "2ffcc8140af6", "generation_result": [{"code": "async function activateParentNotePath(){\n\t", "CodeBleu_score": 0.9207713246822267}, {"code": "async function activateParentNotePath(){\n\tnst activeNotePath = froca.getActiveNotePath();\n\n\tif (activeNotePath.length === 0) {\n\t\treturn;\n\t}\n\n\tconst parentNotePath = activeNotePath.slice(0, -1);\n\n\tif (parentNotePath.length === 0) {\n\t\treturn;\n\t}\n\n\tconst parentNote = froca.getNote(parentNotePath[parentNotePath.length - 1]);\n\n\tif (!parentNote) {\n\t\treturn;\n\t}\n\n\tconst parentNoteId = parentNote.noteId;\n\n\tif (parentNoteId === '_lbRoot') {\n\t\treturn;\n\t}\n\n\tconst parentNotePathString = parentNotePath.join('/');\n\n\tif (!froca.setActiveNotePath(parentNotePathString)) {\n\t\treturn;\n\t}\n\n\tif (parentNote.type ==='search') {\n\t\treturn;\n\t}\n\n\tconst parentNoteType = parentNote.type;\n\n\tif (parentNoteType === 'branch') {\n\t\treturn;\n\t}\n\n\tif (parentNoteType === 'note') {\n\t\treturn;\n\t}\n\n\tif (parentNoteType === 'folder') {\n\t\treturn;\n\t}\n\n\tif (parentNoteType === 'file') {\n\t\treturn;\n\t}\n}", "CodeBleu_score": 35.98148066801712}, {"code": "async function activateParentNotePath(){\n\tst activeNotePath = froca.getActiveNotePath();\nconst parentNotePath = activeNotePath.slice(0, -1);\nconst parentNote = froca.getBranch(parentNotePath);\n\nif (parentNote) {\nfroca.setActiveNote(parentNote.noteId);\n}\n}", "CodeBleu_score": 36.34811826594994}]}
{"instance_id": "04b13e7ad9f6", "generation_result": [{"code": "async function copy(branchIds){\n\t\tclipboardBranchIds = branchIds;\n\tclipboardMode = 'copy';\n\n\tconst clipboard = await getClipboard();\n\tconst links = await Promise.all(branchIds.map(branchId => linkService.createLink(branchId)));\n\tconst html = links.map(link => link.html).join('\\\n');\n\n\tawait clipboard.writeText(html);\n\n\ttoastService.show(`Copied ${branchIds.length} branches to clipboard`);\n}", "CodeBleu_score": 43.072705202911735}, {"code": "async function copy(branchIds){\n\tif (isClipboardEmpty()) {\nreturn;\n}\n\nif (clipboardMode === 'cut') {\nthrow new Error('Clipboard is in cut mode, cannot copy');\n}\n\nclipboardMode = 'copy';\nclipboardBranchIds = branchIds;\n\nconst clipboard = await getClipboard();\n\nconst clipboardBranches = clipboardBranchIds.map(branchId => froca.getBranch(branchId));\nconst clipboardLinks = clipboardBranches.map(clipboardBranch => {\nconst clipboardNote = await clipboardBranch.getNote();\n\nreturn linkService.createLink(clipboardNote.noteId);\n});\n\nclipboard.writeText(clipboardLinks.map(clipboardLink => clipboardLink.html).join('\n'));\n\ntoastService.showMessage(`Copied ${clipboardBranchIds.length} branches to clipboard`);\n}", "CodeBleu_score": 40.28153001597201}, {"code": "async function copy(branchIds){\n\t\tclipboardBranchIds = branchIds;\n\tclipboardMode = 'copy';\n\n\tif (typeof navigator!== 'undefined' && navigator.clipboard) {\n\t\tconst links = await Promise.all(branchIds.map(branchId => linkService.createLink(branchId)));\n\t\tawait navigator.clipboard.writeText(links.join('\n'));\n\t}\n\telse {\n\t\tconst links = await Promise.all(branchIds.map(branchId => linkService.createLink(branchId)));\n\t\tawait utils.copyToClipboard(links.join('\n'));\n\t}\n\n\ttoastService.showInfo(`Copied ${branchIds.length} branch${branchIds.length === 1? '' : 'es'} to clipboard`);\n}", "CodeBleu_score": 40.539631266959184}]}
{"instance_id": "b3a6cce6e5ce", "generation_result": [{"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\t", "CodeBleu_score": 1.3635146430654226}, {"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\tn  let new_data: IHostsBasicData = {\n    id: 'root',\n    name: 'root',\n    mode: FolderModeType.FOLDER,\n    children: []\n  }\n\n  if (data.children) {\n    new_data.children = flatten(data.children)\n  }\n\n  new_data.children.map((item) => {\n    if (item.mode === FolderModeType.FOLDER) {\n      if (!item.children) {\n        item.children = []\n      }\n    }\n    if (item.mode === FolderModeType.GROUP) {\n      if (!item.include) {\n        item.include = []\n      }\n    }\n    if (item.mode === FolderModeType.FOLDER || item.mode === FolderModeType.GROUP) {\n      item.content = ''\n    }\n  })\n\n  return new_data\n}", "CodeBleu_score": 44.316391385856534}, {"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\tconst new_data: IHostsBasicData = {\n\t\t...data,\n\t\tlist: flatten(data.list)\n\t}\n\n\tnew_data.list.map((item) => {\n\t\tif (item.type === 'folder' || item.type === 'group') {\n\t\t\tif (!Array.isArray(item.children)) {\n\t\t\t\titem.children = []\n\t\t\t}\n\t\t\tif (!Array.isArray(item.include)) {\n\t\t\t\titem.include = []\n\t\t\t}\n\t\t\titem.content = ''\n\t\t}\n\t})\n\n\treturn new_data\n}", "CodeBleu_score": 54.65666638015719}]}
{"instance_id": "a494fe11a98c", "generation_result": [{"code": "const addHistory = async (content: string) =>{\n\tonst limit = swhdb.get('history_limit')\n\tif (!limit || limit <= 0) return\n\tconst list = await getHistoryList()\n\tif (list.length >= limit) {\n\t\tconst oldest = list[0]\n\t\tawait deleteHistory(oldest.id)\n\t}\n\tconst id = uuid4()\n\tawait swhdb.add('history', {\n\t\tid,\n\t\tcontent,\n\t\ttimestamp: Date.now(),\n\t})\n}", "CodeBleu_score": 25.463486926284983}, {"code": "const addHistory = async (content: string) =>{\n\tonst historyLimit = swhdb.get('historyLimit')\n\tif (historyLimit > 0) {\n\t\tconst historyList = await getHistoryList()\n\t\tconst historyListLength = historyList.length\n\t\tif (historyListLength >= historyLimit) {\n\t\t\tconst oldestId = historyList[0].id\n\t\t\tawait deleteHistory(oldestId)\n\t\t}\n\t}\n\tconst id = uuid4()\n\tawait swhdb.add('history', {\n\t\tid,\n\t\tcontent,\n\t\tcreatedAt: new Date().toISOString(),\n\t})\n\treturn id\n}", "CodeBleu_score": 27.441939654716613}, {"code": "const addHistory = async (content: string) =>{\n\t", "CodeBleu_score": 1.2902747022576035}]}
{"instance_id": "bd1413e33a8a", "generation_result": [{"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\t\ttry {\n\t\tconst filePath = path.join(getDataFolder(), 'hosts.json')\n\t\tconst data = fs.readFileSync(filePath, 'utf8')\n\t\treturn JSON.parse(data)\n\t} catch (err) {\n\t\tconsole.error('Failed to read old data file:', err)\n\t\treturn {\n\t\t\tversion: VersionType.V3,\n\t\t\thosts: [],\n\t\t}\n\t}\n}", "CodeBleu_score": 31.90081087852088}, {"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\t\tconst dataPath = getDataFolder()\n\tconst fileName = 'hosts_v3.json'\n\tconst filePath = path.join(dataPath, fileName)\n\tconst defaultData: IHostsBasicData = {\n\t\tversion: version.version,\n\t\thosts: [],\n\t\tcomments: [],\n\t\tversionType: VersionType.V3,\n\t}\n\n\ttry {\n\t\tconst rawData = fs.readFileSync(filePath, 'utf8')\n\t\tconst data = JSON.parse(rawData) as IHostsBasicData\n\t\treturn cleanHostsList(data)\n\t} catch (error) {\n\t\tconsole.error(`Error reading file ${filePath}:`, error)\n\t\treturn defaultData\n\t}\n}", "CodeBleu_score": 47.793064508487824}, {"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\t\ttry {\n\t\tconst data = await fs.promises.readFile(path.join(getDataFolder(), 'hosts.json'), 'utf8')\n\t\treturn JSON.parse(data)\n\t} catch (err) {\n\t\tconsole.log(err)\n\t\treturn {\n\t\t\tversion: VersionType.V3,\n\t\t\thosts: [],\n\t\t}\n\t}\n}", "CodeBleu_score": 30.174690148057177}]}
{"instance_id": "1a746af7c945", "generation_result": [{"code": "async function getSwhDb(): Promise<PotDb>{\n\tif (!global.swhdb) {\nlet db_dir: string = path.join(getDataFolder(),'swh_db')\nswhdb = new PotDb(db_dir)\nconsole.log(`swh db: ${swhdb.dir}`)\nglobal.swhdb = swhdb\n} else {\nswhdb = global.swhdb\n}\n\nreturn swhdb\n}", "CodeBleu_score": 62.44922116080316}, {"code": "async function getSwhDb(): Promise<PotDb>{\n\tf (!global.swhdb) {\nlet db_dir: string = path.join(app.getPath('userData'),'swh_swh')\nswhdb = new PotDb(db_dir)\nconsole.log(`swh db: ${swhdb.dir}`)\nglobal.swhdb = swhdb\n} else {\nswhdb = global.swhdb\n}\nreturn swhdb\n}", "CodeBleu_score": 58.51051151906559}, {"code": "async function getSwhDb(): Promise<PotDb>{\n\tf (!global.swhdb) {\nlet db_dir: string = path.join(app.getPath('userData'),'swh_sync')\nswhdb = new PotDb(db_dir)\nconsole.log(`swh db: ${swhdb.dir}`)\nglobal.swhdb = swhdb\n} else {\nswhdb = global.swhdb\n}\nreturn swhdb\n}", "CodeBleu_score": 58.541243602642545}]}
{"instance_id": "375d71e6f391", "generation_result": [{"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\t\tif (hosts.last_refresh_time) {\n\t\tconst time_elapsed = Date.now() - hosts.last_refresh_time\n\t\treturn time_elapsed > hosts.refresh_interval\n\t}\n\treturn true\n}", "CodeBleu_score": 16.3490353706509}, {"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\t", "CodeBleu_score": 2.5797689162128568}, {"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\t\tconst { last_refresh_timestamp, refresh_interval, url } = hosts\n\tconst now = Date.now()\n\n\tif (refresh_interval < 0) {\n\t\treturn false\n\t}\n\n\tif (last_refresh_timestamp === 0) {\n\t\treturn true\n\t}\n\n\tconst time_elapsed = now - last_refresh_timestamp\n\tconst time_to_refresh = refresh_interval * 1000\n\n\treturn time_elapsed >= time_to_refresh\n}", "CodeBleu_score": 31.802511937005512}]}
{"instance_id": "e9824782738b", "generation_result": [{"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\tnst callbackId = `x-get-callback-${x_get_idx++}`\nee.on(callbackId, (data: any) => {\nconst { error, result } = data\nif (error) {\nee.emit('error', error)\nreject(error)\n} else {\nee.emit('result', result)\nresolve(result)\n}\n})\nipcRenderer.send(action, { callbackId, params })\nreturn new Promise((resolve, reject) => {\nee.once('error', reject)\nee.once('result', resolve)\n})\n}", "CodeBleu_score": 44.48897502093976}, {"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\tonst callbackId = `callback-${x_get_idx++}`\n\nipcRenderer.send(action, callbackId,...params)\n\nreturn new Promise((resolve, reject) => {\n\nee.on(callbackId, (err, data) => {\n\nif (err) {\nreject(err)\n} else {\nresolve(data)\n}\n\n})\n\n})\n\n}", "CodeBleu_score": 44.577065389943364}, {"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\teturn new Promise((resolve, reject) => {\n\t\tconst id = `x_get_idx_${x_get_idx++}`\n\t\tee.on(id, (err, data) => {\n\t\t\tif (err) {\n\t\t\t\treject(err)\n\t\t\t} else {\n\t\t\t\tresolve(data)\n\t\t\t}\n\t\t})\n\t\tipcRenderer.send(action, id,...params)\n\t})\n}", "CodeBleu_score": 42.43236050614664}]}
{"instance_id": "027bc2903865", "generation_result": [{"code": "const loadContent = async (is_new = false) =>{\n\tf (ref_cm.current) {\nref_cm.current.setValue(content)\nref_cm.current.refresh()\nreturn\n}\nawait wait(100)\nloadContent(is_new)\n}", "CodeBleu_score": 23.04292097427511}, {"code": "const loadContent = async (is_new = false) =>{\n\tf (!ref_cm.current) {\n  await wait(100)\n  return loadContent(is_new)\n}\n\n\nconst content = is_new? '' : await agent.hosts.getHostsContent(hosts_id)\n\nref_cm.current.setValue(content)\n\nref_cm.current.clearHistory()\n\n}", "CodeBleu_score": 34.76106564609721}, {"code": "const loadContent = async (is_new = false) =>{\n\ttconst { is_new: is_new_hosts } = await agent.hosts.get()\n\n\n\\tif (!ref_cm.current) {\n\\t\\tawait wait(100)\n\\t\\treturn loadContent(is_new)\n\\t}\n\n\n\\tconst { hosts_id } = hosts_data\n\n\n\\tif (is_new_hosts) {\n\\t\\tref_cm.current.setValue('')\n\\t\\treturn\n\\t}\n\n\n\\tif (!hosts_id) {\n\\t\\tref_cm.current.setValue('')\n\\t\\treturn\n\\t}\n\n\n\\tconst { content } = await agent.hosts.get(hosts_id)\n\n\n\\tif (is_new) {\n\\t\\tref_cm.current.setValue('')\n\\t\\tref_cm.current.markClean()\n\\t}\n\n\n\\tref_cm.current.setValue(content)\n\n\n\\tif (is_new) {\n\\t\\tref_cm.current.markClean()\n\\t}\n\n\n\\tref_cm.current.refresh()\n\\tref_cm.current.focus()\n\n\n\\tif (is_new) {\n\\t\\tref_cm.current.setCursor(0, 0)\n\\t}\n\n\n\\tref_cm.current.refresh()\n\n\n\\tif (is_new) {\n\\t\\tref_cm.current.focus()\n\\t}\n\n\n}", "CodeBleu_score": 27.70865353678902}]}
{"instance_id": "199f8fb90016", "generation_result": [{"code": "const onGutterClick = (n: number) =>{\n\t_editor = ref_cm.current\nif (is_read_only ||!cm_editor) return\nlet line = cm_editor.getLine(n)\nif (line.trim().length === 0) return\ncm_editor.toggleComment()\n\n// \u5149\u6807\u79fb\u5230\u4e0b\u4e00\u884c\nlet cursor = cm_editor.getCursor()\ncursor.line += 1\ncm_editor.setCursor(cursor)\n}", "CodeBleu_score": 29.972480300947364}, {"code": "const onGutterClick = (n: number) =>{\n\t_read_only ||!ref_cm.current) return\n\n// \u83b7\u53d6\u5f53\u524d\u884c\nlet line = ref_cm.current.getLine(n)\n\n// \u5ffd\u7565\u7a7a\u767d\u884c\u548c\u6ce8\u91ca\u884c\nif (line.trim() === '' || line.startsWith('//')) return\n\n// \u6ce8\u91ca/\u53d6\u6d88\u6ce8\u91ca\u5f53\u524d\u884c\nif (line.startsWith('//')) {\nline = line.replace('//', '')\n} else {\nline = '//'+ line\n}\n\n// \u66ff\u6362\u5f53\u524d\u884c\nref_cm.current.replaceRange(line, { line: n, ch: 0 })\n\n// \u5149\u6807\u79fb\u5230\u4e0b\u4e00\u884c\nlet cursor = ref_cm.current.getCursor()\ncursor.line += 1\nref_cm.current.setCursor(cursor)\n}", "CodeBleu_score": 37.275992701033836}, {"code": "const onGutterClick = (n: number) =>{\n\t_editor = ref_cm.current\nif (is_read_only ||!cm_editor) return\n\n// Get the line number and line text\nlet line_number = cm_editor.getLineNumber(n)\nlet line_text = cm_editor.getLine(line_number)\n\n// Ignore empty lines\nif (line_text.trim() === '') return\n\n// Toggle comment on line\nif (line_text.startsWith('#')) {\nline_text = line_text.slice(1)\n} else {\nline_text = `# ${line_text}`\n}\n\n// Replace original line with modified line\ncm_editor.replaceRange(line_text, { line: line_number, ch: 0 })\n}", "CodeBleu_score": 38.812957998973665}]}
{"instance_id": "000e8aa4c16c", "generation_result": [{"code": "bool CommandLineParser::parse(const QStringList& args){\n\t", "CodeBleu_score": 1.6015576757374008}, {"code": "bool CommandLineParser::parse(const QStringList& args){\n\t", "CodeBleu_score": 1.6015576757374008}, {"code": "bool CommandLineParser::parse(const QStringList& args){\n\t);\n\tm_foundOptions.clear();\n\t// check version\n\tQStringList::const_iterator actualIt = args.cbegin();\n\tbool version = false;\n\tif (processIfOptionIsVersion(args, actualIt, version)) {\n\t\tif (args.isEmpty()) {\n\t\t\tprintVersion();\n\t\t\treturn true;\n\t\t} else {\n\t\t\terr << QStringLiteral(\n\t\t\t  \"the option '--version' is not a valid option for the argument '%1'.\")\n\t\t\t\t .arg(qApp->applicationName());\n\t\t\treturn false;\n\t\t}\n\t}\n\t// check help\n\tif (processIfOptionIsHelp(args, actualIt, version)) {\n\t\tprintHelp();\n\t\treturn true;\n\t}\n\t// check args\n\twhile (actualIt!= args.cend()) {\n\t\tQString arg = *actualIt;\n\t\tif (arg.startsWith(QLatin1String(\"-\"))) {\n\t\t\t// process options\n\t\t\tbool ok = processOptions(args, actualIt, version);\n\t\t\tif (!ok) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\t// process args\n\t\t\tbool ok = processArgs(args, actualIt, version);\n\t\t\tif (!ok) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t// check version\n\tif (!version) {\n\t\terr << QStringLiteral(\"the option '--version' is not a valid option for the argument '%1'.\")\n\t\t\t\t.arg(qApp->applicationName());\n\t\treturn false;\n\t}\n\t// check args\n\tif (!args.isEmpty()) {\n\t\terr << QStringLiteral(\"the option '--version' is not a valid option for the argument '%1'.\")\n\t\t\t\t.arg(qApp->applicationName());\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 43.79475715866276}]}
{"instance_id": "2f02436b366f", "generation_result": [{"code": "void ButtonListView::updateComponents(){\n\t\t// Retrieve the list of button types from the configuration\n\tQList<CaptureTool::Type> configuredButtonTypes = ConfigHandler().getButtons();\n\n\t// Iterate over the list of button types from CaptureToolButton\n\tauto listTypes = CaptureToolButton::getIterableButtonTypes();\n\tfor (const CaptureTool::Type t : listTypes) {\n\t\t// Check if the current button type is in the configuration list\n\t\tbool isChecked = configuredButtonTypes.contains(t);\n\n\t\t// Update the check state of the corresponding list item\n\t\tauto* item = findItem(t);\n\t\tif (item!= nullptr) {\n\t\t\titem->setCheckState(isChecked? Qt::Checked : Qt::Unchecked);\n\t\t}\n\t}\n}", "CodeBleu_score": 47.03761166762099}, {"code": "void ButtonListView::updateComponents(){\n\t\tauto config = ConfigHandler().getButtons();\n\tauto listTypes = CaptureToolButton::getIterableButtonTypes();\n\tfor (const auto& item : this->findItems(\"*\", Qt::MatchWildcard)) {\n\t\tauto bType = m_buttonTypeByName[item->text()];\n\t\tauto it = std::find(config.begin(), config.end(), bType);\n\t\tif (it!= config.end()) {\n\t\t\titem->setCheckState(Qt::Checked);\n\t\t} else {\n\t\t\titem->setCheckState(Qt::Unchecked);\n\t\t}\n\t}\n}", "CodeBleu_score": 48.37816814314847}, {"code": "void ButtonListView::updateComponents(){\n\t\n// retrieve the list of button types from the configuration\n\n// retrieve the iterable list of button types from CaptureToolButton\n\n// for each item in the list, check if the corresponding button type is in the configuration list\n\n// if it is, set the item's check state to checked; otherwise, set it to unchecked\n\n}", "CodeBleu_score": 2.4774915733961462}]}
{"instance_id": "578e98634572", "generation_result": [{"code": "void ColorPickerEditor::addPreset(){\n\tQColor color = m_color;\n\tif (color.isValid()) {\n\t\tfor (auto it = m_colorList.begin(); it!= m_colorList.end(); ++it) {\n\t\t\tif (it->color() == color) {\n\t\t\t\tQMessageBox::warning(this, tr(\"Warning\"), tr(\"Color already in list!\"));\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (m_colorList.size() >= 17) {\n\t\t\tQMessageBox::warning(this, tr(\"Warning\"), tr(\"Maximum number of presets reached!\"));\n\t\t\treturn;\n\t\t}\n\n\t\tm_colorList.append(color);\n\t\tm_config.setUserColors(m_colorList);\n\t\tm_colorEdit->setText(color.name(QColor::HexRgb));\n\t}\n}", "CodeBleu_score": 54.04893134656579}, {"code": "void ColorPickerEditor::addPreset(){\n\t/ check if color is already in list\nfor (const auto& color : m_colorList) {\nif (color.color() == m_color) {\nQMessageBox::warning(this, tr(\"Color already exists\"),\ntr(\"The color you have selected is already in the list. Please select a different color.\"));\nreturn;\n}\n}\n\n// check if list has reached maximum allowed presets\nif (m_colorList.size() >= 17) {\nQMessageBox::warning(this, tr(\"Maximum preset limit reached\"),\ntr(\"The maximum number of presets has been reached. Please delete a preset before adding a new one.\"));\nreturn;\n}\n\n// add color to list and update user color configuration\nm_colorList.push_back(QColor(m_color));\nm_config.setUserColors(m_colorList);\n}", "CodeBleu_score": 54.969445933887016}, {"code": "void ColorPickerEditor::addPreset(){\n\tQColor color = QColor(m_colorInput->text());\n\tif (color.isValid()) {\n\t\tif (m_colorList.contains(color)) {\n\t\t\tQMessageBox::warning(this, tr(\"Color Picker\"),\n\t\t\t                     tr(\"Color already exists in the list\"));\n\t\t\treturn;\n\t\t}\n\t\tif (m_colorList.size() >= 17) {\n\t\t\tQMessageBox::warning(this, tr(\"Color Picker\"),\n\t\t\t                     tr(\"Maximum number of presets reached\"));\n\t\t\treturn;\n\t\t}\n\t\tm_colorList.append(color);\n\t\tm_config.setUserColors(m_colorList);\n\t\tm_config.save();\n\t\tm_colorEdit->setText(color.name(QColor::HexRgb));\n\t}\n}", "CodeBleu_score": 54.396010561962086}]}
{"instance_id": "3f8c1770cd2e", "generation_result": [{"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\t\t// Set the size policy to expand\n\tsetSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);\n\n\t// Create the horizontal and vertical layouts\n\tQHBoxLayout* mainLayout = new QHBoxLayout();\n\tQVBoxLayout* verticalLayout = new QVBoxLayout();\n\n\t// Configure the spacing using font metrics\n\tQFontMetrics metrics(QApplication::font());\n\tint spacing = metrics.height() / 4;\n\tverticalLayout->setSpacing(spacing);\n\tverticalLayout->setAlignment(Qt::AlignCenter);\n\n\t// Create the color wheel\n\tcolorWheel = new ColorWheel();\n\tcolorWheel->setFixedSize(200, 200);\n\n\t// Create the buttons\n\tQPushButton* buttonOK = new QPushButton(\"OK\");\n\tQPushButton* buttonCancel = new QPushButton(\"Cancel\");\n\n\t// Add spacing to the vertical layout\n\tQSpacerItem* verticalSpacer = new QSpacerItem(20, 20, QSizePolicy::Minimum, QSizePolicy::Expanding);\n\tverticalLayout->addItem(verticalSpacer);\n\n\t// Add the color wheel, buttons, and spacing to the vertical layout\n\tverticalLayout->addWidget(colorWheel);\n\tverticalLayout->addWidget(buttonOK);\n\tverticalLayout->addWidget(buttonCancel);\n\tverticalLayout->addItem(verticalSpacer);\n\n\t// Align the vertical layout to the center\n\tverticalLayout->setAlignment(Qt::AlignCenter);\n\n\t// Integrate the vertical layout into the horizontal layout\n\tmainLayout->addLayout(verticalLayout);\n\n\t// Set the main layout for the widget\n\tsetLayout(mainLayout);\n\n\t// Update the components\n\tupdateComponents();\n\n\t// Connect the signals and slots\n\tconnect(buttonOK, &QPushButton::clicked, this, &UIcolorEditor::okButtonClicked);\n\tconnect(buttonCancel, &QPushButton::clicked, this, &UIcolorEditor::cancelButtonClicked);\n\tconnect(colorWheel, &ColorWheel::colorChanged, this, &UIcolorEditor::colorChanged);\n}", "CodeBleu_score": 45.049142098846}, {"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\t\t// Set size policy to expand\n\tsetSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);\n\n\t// Create horizontal and vertical layouts\n\tQHBoxLayout* horizontalLayout = new QHBoxLayout(this);\n\tQVBoxLayout* verticalLayout = new QVBoxLayout();\n\n\t// Set spacing using font metrics\n\tQFontMetrics metrics(font());\n\tint spacing = metrics.height() / 2;\n\tverticalLayout->setSpacing(spacing);\n\thorizontalLayout->setSpacing(spacing);\n\n\t// Align vertical layout to the center\n\tverticalLayout->setAlignment(Qt::AlignCenter);\n\n\t// Create buttons\n\tQPushButton* button = new QPushButton(\"OK\");\n\tbutton->setFixedSize(QSize(metrics.height() * 3, metrics.height() * 3));\n\tbutton->setFont(font());\n\tbutton->setFocusPolicy(Qt::NoFocus);\n\tbutton->setStyleSheet(\"QPushButton { border: 1px solid #000000; }\");\n\tQPushButton* button2 = new QPushButton(\"Cancel\");\n\tbutton2->setFixedSize(QSize(metrics.height() * 3, metrics.height() * 3));\n\tbutton2->setFont(font());\n\tbutton2->setFocusPolicy(Qt::NoFocus);\n\tbutton2->setStyleSheet(\"QPushButton { border: 1px solid #000000; }\");\n\n\t// Create color wheel\n\tcolorWheel = new ColorWheel(this);\n\tcolorWheel->setFixedSize(QSize(metrics.height() * 3, metrics.height() * 3));\n\tcolorWheel->setFont(font());\n\tcolorWheel->setFocusPolicy(Qt::NoFocus);\n\tcolorWheel->setStyleSheet(\"QColorWheel { border: 1px solid #000000; }\");\n\n\t// Add spacing to the vertical layout\n\tverticalLayout->addSpacerItem(new QSpacerItem(1, 1, QSizePolicy::Expanding, QSizePolicy::Expanding));\n\n\t// Integrate components into the horizontal layout\n\thorizontalLayout->addLayout(verticalLayout);\n\thorizontalLayout->addWidget(colorWheel);\n\thorizontalLayout->addLayout(verticalLayout);\n\n\t// Set main layout for the widget\n\tsetLayout(horizontalLayout);\n\n\t// Update components\n\tupdateComponents();\n}", "CodeBleu_score": 49.56859344348929}, {"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\t", "CodeBleu_score": 8.500866798722518}]}
{"instance_id": "ad86ef280917", "generation_result": [{"code": "void Flameshot::full(const CaptureRequest& req){\n\t(!resolveAnyConfigErrors()) {\n\t\treturn;\n\t}\n\n\tQPixmap p = ScreenGrabber().grabScreen(nullptr, true);\n\tif (req.tasks() & CaptureRequest::PIN) {\n\t\t// change geometry for pin task\n\t\treq.addPinTask(p.rect());\n\t}\n\texportCapture(p, QRect(), req);\n}", "CodeBleu_score": 27.227824819304146}, {"code": "void Flameshot::full(const CaptureRequest& req){\n\t(!resolveAnyConfigErrors()) {\n\t\treturn;\n\t}\n\n\tbool ok = true;\n\tQPixmap p(ScreenGrabber().grabScreen(ok));\n\tif (ok) {\n\t\tQRect region = req.initialSelection();\n\t\tif (!region.isNull()) {\n\t\t\tQRect screenGeom = ScreenGrabber().screenGeometry(QGuiAppCurrentScreen().currentScreen());\n\t\t\tscreenGeom.moveTopLeft({ 0, 0 });\n\t\t\tregion = region.intersected(screenGeom);\n\t\t\tp = p.copy(region);\n\t\t}\n\t\tif (req.tasks() & CaptureRequest::PIN) {\n\t\t\t// change geometry for pin task\n\t\t\treq.addPinTask(region);\n\t\t}\n\t\texportCapture(p, ScreenGrabber().screenGeometry(QGuiAppCurrentScreen().currentScreen()), req);\n\t} else {\n\t\temit captureFailed();\n\t}\n}", "CodeBleu_score": 71.76765056728824}, {"code": "void Flameshot::full(const CaptureRequest& req){\n\t!resolveAnyConfigErrors()) {\nreturn;\n}\n\nbool ok = true;\nQPixmap p(ScreenGrabber().grabScreen(ok));\nif (ok) {\nQRect geometry = ScreenGrabber().screenGeometry();\nQRect region = req.initialSelection();\nif (region.isNull()) {\nregion = ScreenGrabber().screenGeometry();\n} else {\nQRect screenGeom = ScreenGrabber().screenGeometry();\nscreenGeom.moveTopLeft({ 0, 0 });\nregion = region.intersected(screenGeom);\np = p.copy(region);\n}\nif (req.tasks() & CaptureRequest::PIN) {\n// change geometry for pin task\nreq.addPinTask(region);\n}\nexportCapture(p, geometry, req);\n} else {\nemit captureFailed();\n}\n}", "CodeBleu_score": 70.92368072310737}]}
{"instance_id": "42abe47d0da0", "generation_result": [{"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\te()) {\ninstance()->attachScreenshotToClipboard(capture);\nreturn;\n}\n\nQByteArray data;\nQDataStream stream(&data, QIODevice::WriteOnly);\nstream << capture;\nQDBusMessage m = createMethodCall(QStringLiteral(\"attachScreenshotToClipboard\"));\nm << data;\ncall(m);\n}", "CodeBleu_score": 74.57324421087775}, {"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\te()) {\ninstance()->attachScreenshotToClipboard(capture);\nreturn;\n}\n\nQByteArray data;\nQDataStream stream(&data, QIODevice::WriteOnly);\nstream << capture;\nQDBusMessage m = createMethodCall(QStringLiteral(\"attachScreenshotToClipboard\"));\nm << data;\ncall(m);\n}", "CodeBleu_score": 74.57324421087775}, {"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\te()) {\ninstance()->attachScreenshotToClipboard(capture);\nreturn;\n}\n\nQByteArray data;\nQDataStream stream(&data, QIODevice::WriteOnly);\nstream << capture;\nQDBusMessage m = createMethodCall(QStringLiteral(\"attachScreenshotToClipboard\"));\nm << data;\ncall(m);\n}", "CodeBleu_score": 74.57324421087775}]}
{"instance_id": "4276c0025e1f", "generation_result": [{"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\t#if!defined(DISABLE_UPDATE_CHECKER)\n    showUpdateNotificationIfAvailable(nullptr);\n#endif\n\n#if defined(Q_OS_WIN)\n    if (notification.isEmpty()) {\n        // Windows doesn't support notifications for text\n        return;\n    }\n#endif\n\n    if (notification.isEmpty()) {\n        // If no notification is provided, just log it\n        qDebug() << \"FlameshotDaemon::attachTextToClipboard() - \" << text;\n    } else {\n        // If a notification is provided, log it before modifying the clipboard\n        qDebug() << \"FlameshotDaemon::attachTextToClipboard() - \" << notification;\n        qDebug() << \"FlameshotDaemon::attachTextToClipboard() - \" << text;\n    }\n\n    m_hostingClipboard = true;\n    QClipboard* clipboard = QApplication::clipboard();\n    clipboard->blockSignals(true);\n    // This variable is necessary because the signal doesn't get blocked on\n    // windows for some reason\n    m_clipboardSignalBlocked = true;\n    saveToClipboard(text);\n    clipboard->blockSignals(false);\n}", "CodeBleu_score": 64.60075351542605}, {"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\t#if!defined(DISABLE_NOTIFICATIONS)\n    if (!notification.isEmpty()) {\n        sendTrayNotification(notification, QStringLiteral(\"Flameshot\"), 1000);\n    }\n#endif\n    m_hostingClipboard = true;\n    QClipboard* clipboard = QApplication::clipboard();\n    clipboard->blockSignals(true);\n    // This variable is necessary because the signal doesn't get blocked on\n    // windows for some reason\n    m_clipboardSignalBlocked = true;\n    saveToClipboard(text);\n    clipboard->blockSignals(false);\n}", "CodeBleu_score": 75.0911713033739}, {"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\t#if!defined(DISABLE_UPDATE_CHECKER)\n    showUpdateNotificationIfAvailable(nullptr);\n#endif\n\n    if (!notification.isEmpty()) {\n        sendTrayNotification(notification, tr(\"Flameshot\"), 1000);\n    }\n\n    m_hostingClipboard = true;\n    QClipboard* clipboard = QApplication::clipboard();\n    clipboard->blockSignals(true);\n    // This variable is necessary because the signal doesn't get blocked on\n    // windows for some reason\n    m_clipboardSignalBlocked = true;\n    saveToClipboard(text);\n    clipboard->blockSignals(false);\n}", "CodeBleu_score": 74.72891595801563}]}
{"instance_id": "ef69a941bff6", "generation_result": [{"code": "void AcceptTool::pressed(CaptureContext& context){\n\t\t// If there is a pin task, adjust the selection geometry based on the widget offset\n\tif (context.request()->pinTask()) {\n\t\tQRect selection = context.request()->pinTask()->selection();\n\t\tQRect widgetRect = context.widget()->geometry();\n\t\tselection.translate(-widgetRect.x(), -widgetRect.y());\n\t\tcontext.request()->pinTask()->setSelection(selection);\n\t}\n\n\t// Emit the request to close the GUI\n\temit requestClose();\n}", "CodeBleu_score": 38.88566026098912}, {"code": "void AcceptTool::pressed(CaptureContext& context){\n\t\n#if defined(Q_OS_MACOS)\n    // On macOS, we need to adjust the selection geometry to account for the\n    // widget's offset.\n    auto captureWidget = qobject_cast<CaptureWidget*>(context.widget());\n    if (captureWidget) {\n        auto selection = context.selection();\n        selection.setRect(captureWidget->mapToGlobal(selection.rect().topLeft()), selection.rect().size());\n        context.setSelection(selection);\n    }\n#endif\n\n    context.requestClose();\n    context.requestCapture(CaptureRequest::RequestType::ACCEPT);\n\n#if defined(Q_OS_MACOS)\n    // On macOS, we need to adjust the selection geometry to account for the\n    // widget's offset.\n    if (captureWidget) {\n        auto selection = context.selection();\n        selection.setRect(captureWidget->mapFromGlobal(selection.rect().topLeft()), selection.rect().size());\n        context.setSelection(selection);\n    }\n#endif\n}", "CodeBleu_score": 41.74736523914261}, {"code": "void AcceptTool::pressed(CaptureContext& context){\n\t\t// If the capture request includes a PIN task, adjust the selection geometry based on the widget offset and add the PIN task to the request.\n\tif (context.captureRequest().pinTask()) {\n\t\tQRect selection = context.selection();\n\t\tselection.adjust(context.widgetOffset().x(), context.widgetOffset().y(), 0, 0);\n\t\tcontext.captureRequest().pinTask()->setGeometry(selection);\n\t}\n\n\t// Emit a request to indicate the capture is done.\n\temit captureDone(context.captureRequest());\n\n\t// Emit a request to close the GUI.\n\temit close();\n}", "CodeBleu_score": 35.40813985408954}]}
{"instance_id": "954477282486", "generation_result": [{"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\tist<QFileInfo> files = dir.entryInfoList(QStringList(QLatin1String(\\\"*.desktop\\\")) + QDir::AllDirs, QDir::Name);\n\tint initialSize = m_applications.size();\n\tfor (const QFileInfo& file : files) {\n\t\tif (file.isDir()) {\n\t\t\tcontinue;\n\t\t}\n\t\tbool ok;\n\t\tDesktopAppData appData = parseDesktopFile(file.absoluteFilePath(), ok);\n\t\tif (ok) {\n\t\t\tm_applications.append(appData);\n\t\t}\n\t}\n\treturn m_applications.size() - initialSize;\n}", "CodeBleu_score": 52.09047076649824}, {"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\tt newEntries = 0;\n\tQStringList desktopFiles = dir.entryList(QStringList(QStringLiteral(\"*.desktop\")), QDir::Files);\n\tfor (const QString& fileName : desktopFiles) {\n\t\tif (fileName.startsWith(QLatin1String(\".\"))) {\n\t\t\tcontinue;\n\t\t}\n\t\tbool ok;\n\t\tDesktopAppData appData = parseDesktopFile(dir.absoluteFilePath(fileName), ok);\n\t\tif (ok) {\n\t\t\tm_applications.append(appData);\n\t\t\tnewEntries++;\n\t\t}\n\t}\n\treturn newEntries;\n}", "CodeBleu_score": 50.240949635663924}, {"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\tt added = 0;\n\tQStringList files = dir.entryList(QStringList() << \"*.desktop\", QDir::Files);\n\tfor (const QString& file : files) {\n\t\tif (file.startsWith(QLatin1String(\".\"))) {\n\t\t\tcontinue;\n\t\t}\n\t\tbool ok;\n\t\tDesktopAppData data = parseDesktopFile(dir.absoluteFilePath(file), ok);\n\t\tif (ok) {\n\t\t\tm_apps.append(data);\n\t\t\tadded++;\n\t\t}\n\t}\n\treturn added;\n}", "CodeBleu_score": 55.18032084979101}]}
{"instance_id": "e17fc5c9d6d0", "generation_result": [{"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\ttring, QVector<DesktopAppData>> result;\nfor (const DesktopAppData& app : qAsConst(m_appList)) {\nfor (const QString& category : categories) {\nif (app.categories.contains(category)) {\nresult[category].append(app);\n}\n}\n}\nreturn result;\n}", "CodeBleu_score": 82.07336741783055}, {"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\ttring, QVector<DesktopAppData>> res;\nfor (const DesktopAppData& app : qAsConst(m_appList)) {\nfor (const QString& category : categories) {\nif (app.categories.contains(category)) {\nres[category].append(app);\n}\n}\n}\nreturn res;\n}", "CodeBleu_score": 87.93134852154903}, {"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\ttring, QVector<DesktopAppData>> res;\nfor (const DesktopAppData& app : qAsConst(m_appList)) {\nfor (const QString& category : categories) {\nif (app.categories.contains(category)) {\nres[category].append(app);\n}\n}\n}\nreturn res;\n}", "CodeBleu_score": 87.93134852154903}]}
{"instance_id": "1e9cb2fcafe5", "generation_result": [{"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\t\tQString filePath = path;\n\tif (filePath.isEmpty()) {\n\t\treturn false;\n\t}\n\n\tQString ext = QFileInfo(filePath).suffix().toLower();\n\tif (ext.isEmpty()) {\n\t\treturn false;\n\t}\n\n\tif (ext == \"png\") {\n\t\treturn capture.save(filePath);\n\t} else if (ext == \"jpg\" || ext == \"jpeg\") {\n\t\tQImageWriter writer(filePath);\n\t\tif (!writer.canWrite()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tQImage image = capture.toImage();\n\t\tif (!image.isNull()) {\n\t\t\twriter.setQuality(100);\n\t\t\treturn writer.write(image);\n\t\t}\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 23.41044105372034}, {"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\t\tQString filePath = path;\n\tQString fileExtension = filePath.mid(filePath.lastIndexOf('.') + 1);\n\tif (fileExtension.isEmpty()) {\n\t\treturn false;\n\t}\n\tbool success = false;\n\tif (fileExtension == \"png\") {\n\t\tsuccess = capture.save(filePath, \"PNG\", 100);\n\t} else if (fileExtension == \"jpg\" || fileExtension == \"jpeg\") {\n\t\tsuccess = capture.save(filePath, \"JPEG\", 100);\n\t} else if (fileExtension == \"bmp\") {\n\t\tsuccess = capture.save(filePath, \"BMP\", 100);\n\t} else if (fileExtension == \"gif\") {\n\t\tsuccess = capture.save(filePath, \"GIF\", 100);\n\t} else if (fileExtension == \"svg\") {\n\t\tsuccess = capture.save(filePath, \"SVG\", 100);\n\t} else if (fileExtension == \"tga\") {\n\t\tsuccess = capture.save(filePath, \"TGA\", 100);\n\t} else if (fileExtension == \"tiff\") {\n\t\tsuccess = capture.save(filePath, \"TIFF\", 100);\n\t} else if (fileExtension == \"xpm\") {\n\t\tsuccess = capture.save(filePath, \"XPM\", 100);\n\t} else {\n\t\treturn false;\n\t}\n\tif (success) {\n\t\tFlameshot::logger()->info(messagePrefix + \" saved to: \" + filePath);\n\t} else {\n\t\tFlameshot::logger()->error(messagePrefix + \" failed to save to: \" + filePath);\n\t}\n\treturn success;\n}", "CodeBleu_score": 33.41439863986197}, {"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\t\tbool success = false;\n\tQString savePath = path;\n\tif (savePath.isEmpty()) {\n\t\tsavePath = QStringLiteral(\"screenshot.png\");\n\t}\n\tQString saveMessage = messagePrefix + QStringLiteral(\" saving to \") + savePath;\n\tif (savePath.endsWith(QStringLiteral(\"png\"), Qt::CaseInsensitive)) {\n\t\tsuccess = capture.save(savePath, \"PNG\");\n\t} else if (savePath.endsWith(QStringLiteral(\"jpg\"), Qt::CaseInsensitive)) {\n\t\tsuccess = capture.save(savePath, \"JPEG\", 95);\n\t} else if (savePath.endsWith(QStringLiteral(\"bmp\"), Qt::CaseInsensitive)) {\n\t\tsuccess = capture.save(savePath, \"BMP\");\n\t} else if (savePath.endsWith(QStringLiteral(\"gif\"), Qt::CaseInsensitive)) {\n\t\tsuccess = capture.save(savePath, \"GIF\");\n\t} else if (savePath.endsWith(QStringLiteral(\"svg\"), Qt::CaseInsensitive)) {\n\t\tsuccess = capture.save(savePath, \"SVG\");\n\t} else if (savePath.endsWith(QStringLiteral(\"tif\"), Qt::CaseInsensitive)) {\n\t\tsuccess = capture.save(savePath, \"TIFF\");\n\t} else {\n\t\tsuccess = capture.save(savePath, \"PNG\");\n\t}\n\tif (success) {\n\t\tFlameshot::getInstance()->getLogger()->info(saveMessage + QStringLiteral(\" (success)\"));\n\t} else {\n\t\tFlameshot::getInstance()->getLogger()->error(saveMessage + QStringLiteral(\" (error)\"));\n\t}\n\treturn success;\n}", "CodeBleu_score": 37.60367772134904}]}
{"instance_id": "ba67f6b4e974", "generation_result": [{"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\t\tthis->active.clear();\n\tfor (const auto &modpack_id : load_order) {\n\t\tauto it = this->available.find(modpack_id);\n\t\tif (it == this->available.end()) {\n\t\t\tLOG_WARN(\"Modpack with ID '{}' not found\", modpack_id);\n\t\t\tcontinue;\n\t\t}\n\t\tauto modpack = it->second;\n\t\tthis->active.emplace(modpack_id, modpack);\n\t\tLOG_INFO(\"Activated modpack '{}'\", modpack.id);\n\t}\n}", "CodeBleu_score": 60.72271748697084}, {"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\t\tfor (auto &modpack_id : load_order) {\n\t\tauto it = this->available.find(modpack_id);\n\t\tif (it!= this->available.end()) {\n\t\t\tauto &info = it->second;\n\t\t\tthis->active.emplace(info.id, info);\n\t\t\tthis->logger->info(\"Activated modpack {}.\", info.id);\n\t\t}\n\t}\n}", "CodeBleu_score": 48.151238644787554}, {"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\t\tactive.clear();\n\tfor (const auto &modpack_id : load_order) {\n\t\tauto it = available.find(modpack_id);\n\t\tif (it!= available.end()) {\n\t\t\tactive.emplace(it->second);\n\t\t}\n\t}\n}", "CodeBleu_score": 42.95786541338177}]}
{"instance_id": "da92dbc3907b", "generation_result": [{"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\t\tstd::unordered_set<std::string> requested_modpacks;\n\tfor (const auto &modpack_id : load_order) {\n\t\trequested_modpacks.emplace(modpack_id);\n\t}\n\n\tfor (const auto &modpack_id : requested_modpacks) {\n\t\tif (!this->available.contains(modpack_id)) {\n\t\t\tthrow std::runtime_error(\"Modpack not found: \" + modpack_id);\n\t\t}\n\t}\n\n\tstd::unordered_set<std::string> active_modpacks;\n\tfor (const auto &modpack_id : load_order) {\n\t\tconst auto &modpack = this->available.at(modpack_id);\n\t\tfor (const auto &dependency : modpack.dependencies) {\n\t\t\tif (!active_modpacks.contains(dependency)) {\n\t\t\t\tthrow std::runtime_error(\"Modpack dependency not found: \" + dependency);\n\t\t\t}\n\t\t}\n\n\t\tif (active_modpacks.contains(modpack_id)) {\n\t\t\tthrow std::runtime_error(\"Modpack dependency conflict: \" + modpack_id);\n\t\t}\n\n\t\tactive_modpacks.emplace(modpack_id);\n\t}\n\n\tthis->load_order = load_order;\n}", "CodeBleu_score": 55.293587093114205}, {"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\t", "CodeBleu_score": 5.103679706177208}, {"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\t\tstd::unordered_set<std::string> requested_modpacks(load_order.begin(), load_order.end());\n\tstd::unordered_set<std::string> available_modpacks(this->available.begin(), this->available.end());\n\tstd::unordered_set<std::string> active_modpacks(this->active.begin(), this->active.end());\n\n\t// Check if requested modpacks are available\n\tfor (const auto &modpack_id : requested_modpacks) {\n\t\tif (!available_modpacks.contains(modpack_id)) {\n\t\t\tthrow std::runtime_error(MSG(error) << \\\"Requested modpack \\\" << modpack_id << \\\" is not available.\\\");\n\t\t}\n\t}\n\n\t// Check if requested modpacks have unsatisfied dependencies\n\tfor (const auto &modpack_id : requested_modpacks) {\n\t\tconst auto &modpack = this->available.at(modpack_id);\n\t\tfor (const auto &dependency : modpack.dependencies) {\n\t\t\tif (!active_modpacks.contains(dependency) &&!available_modpacks.contains(dependency)) {\n\t\t\t\tthrow std::runtime_error(MSG(error) << \\\"Requested modpack \\\" << modpack_id << \\\" depends on \\\" << dependency << \\\" which is not available.\\\");\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check if requested modpacks conflict with other modpacks\n\tfor (const auto &modpack_id : requested_modpacks) {\n\t\tconst auto &modpack = this->available.at(modpack_id);\n\t\tfor (const auto &conflict : modpack.conflicts) {\n\t\t\tif (active_modpacks.contains(conflict)) {\n\t\t\t\tthrow std::runtime_error(MSG(error) << \\\"Requested modpack \\\" << modpack_id << \\\" conflicts with \\\" << conflict << \\\".\\\");\n\t\t\t}\n\t\t}\n\t}\n\n\t// Update load order\n\tthis->load_order = load_order;\n}", "CodeBleu_score": 54.500980761846996}]}
{"instance_id": "103e298ff430", "generation_result": [{"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\tif (not this->available) {\n\t\tlog::log(MSG(err) << \"AudioManager is not available!\");\n\t\treturn;\n\t}\n\n\t// create unique key for each sound file\n\tstd::unordered_map<std::string, std::shared_ptr<Resource>> resources;\n\tfor (const auto &sound_file : sound_files) {\n\t\tif (this->resources.count(sound_file.id)!= 0) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tstd::string key = std::to_string(sound_file.id) + \"_\" + std::to_string(sound_file.category);\n\t\tauto resource = std::make_shared<Resource>(key, sound_file.path, sound_file.category);\n\t\tthis->resources.insert({key, resource});\n\t}\n}", "CodeBleu_score": 59.77372375699854}, {"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\tif (not this->available) {\n\t\tlog::log(MSG(err) << \"Audio resources are not available!\");\n\t\treturn;\n\t}\n\n\t// iterate through sound files\n\tfor (const auto &sound_file : sound_files) {\n\t\t// skip loading if the sound is already loaded\n\t\tif (this->resources.find(sound_file.id)!= this->resources.end()) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// create resource\n\t\tauto resource = std::make_unique<SoundImpl>(sound_file.category, sound_file.id);\n\t\t// load resource\n\t\tresource->load(sound_file.path);\n\n\t\t// insert resource into resources map\n\t\tthis->resources.insert({sound_file.id, std::move(resource)});\n\t}\n}", "CodeBleu_score": 59.482973185270836}, {"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\tif (not this->available) {\n\t\treturn;\n\t}\n\n\tstd::unordered_map<std::string, std::shared_ptr<SoundImpl>> resources;\n\tfor (const auto &sound_file : sound_files) {\n\t\tif (this->resources.count(sound_file.id) > 0) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tstd::string key = this->make_key(sound_file.category, sound_file.id);\n\t\tauto resource = std::make_shared<SoundImpl>(this->job_manager, sound_file);\n\t\tresources.insert({key, resource});\n\t}\n\n\tthis->resources.insert(std::make_move_iterator(resources.begin()), std::make_move_iterator(resources.end()));\n}", "CodeBleu_score": 62.39267824014466}]}
{"instance_id": "700caeffaaac", "generation_result": [{"code": "Sound AudioManager::get_sound(category_t category, int id){\n\tf (not this->available) {\n\t\tthrow Error(err) << \"Audio manager is not available!\";\n\t}\n\n\tauto key = std::make_tuple(category, id);\n\n\tif (this->resources.find(key) == std::end(this->resources)) {\n\t\tthrow Error(err) << \"Sound resource does not exist: \" << category << \", \" << id;\n\t}\n\n\tauto resource = this->resources.at(key);\n\n\treturn Sound(this, std::make_shared<SoundImpl>(resource));\n}", "CodeBleu_score": 54.54281324567781}, {"code": "Sound AudioManager::get_sound(category_t category, int id){\n\tf (not this->available) {\n\t\tthrow std::runtime_error(\"AudioManager not available\");\n\t}\n\n\tauto key = std::make_tuple(category, id);\n\tauto it = this->resources.find(key);\n\tif (it == std::end(this->resources)) {\n\t\tthrow std::runtime_error(\"Sound resource not found\");\n\t}\n\n\tauto resource = it->second;\n\tauto sound = resource->get_sound(this);\n\treturn sound;\n}", "CodeBleu_score": 43.20169496787339}, {"code": "Sound AudioManager::get_sound(category_t category, int id){\n\tf (not this->available) {\n\t\tthrow std::runtime_error(\"Audio manager is not available.\");\n\t}\n\n\tauto key = std::make_tuple(category, id);\n\tif (this->resources.find(key) == std::end(this->resources)) {\n\t\tthrow std::runtime_error(\"Sound resource does not exist.\");\n\t}\n\n\tauto resource = this->resources.at(key);\n\tauto sound_impl = std::make_shared<SoundImpl>(this, resource);\n\treturn Sound(this, sound_impl);\n}", "CodeBleu_score": 44.377524816008254}]}
{"instance_id": "2a0c1f0acd9f", "generation_result": [{"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\tuto category = sound->get_category();\n\tauto &playing_list = this->playing_sounds[category];\n\tplaying_list.push_back(sound);\n}", "CodeBleu_score": 75.85371719972942}, {"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\tuto category = sound->get_category();\n\tauto &playing_list = playing_sounds[category];\n\tplaying_list.push_back(sound);\n}", "CodeBleu_score": 73.75638338645963}, {"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\tuto &playing_list = playing_sounds[sound->get_category()];\n\tplaying_list.push_back(sound);\n}", "CodeBleu_score": 47.400278658286624}]}
{"instance_id": "2c5f1f9b99b3", "generation_result": [{"code": "void Clock::update_time(){\n\t\tstd::unique_lock lock{this->mutex};\n\n\tauto elapsed = simclock_t::now() - this->last_check;\n\n\tif (elapsed.count() < 0) {\n\t\tlog::error(\"Clock::update_time(): elapsed time is negative\");\n\t\treturn;\n\t}\n\n\tif (elapsed.count() > this->max_tick_time) {\n\t\telapsed = std::chrono::duration_cast<simclock_t>(std::chrono::milliseconds(this->max_tick_time));\n\t}\n\n\tif (this->state == ClockState::RUNNING) {\n\t\tthis->sim_time += static_cast<int>(elapsed.count() * this->speed);\n\t\tthis->sim_real_time += static_cast<int>(elapsed.count());\n\t}\n\n\tthis->last_check = simclock_t::now();\n\n\tif (this->state == ClockState::RUNNING) {\n\t\tstd::this_thread::sleep_for(std::chrono::milliseconds(1));\n\t}\n}", "CodeBleu_score": 53.60615288774769}, {"code": "void Clock::update_time(){\n\t\tstd::unique_lock lock{this->mutex};\n\tauto elapsed_time = simclock_t::now() - this->last_check;\n\tif (elapsed_time.count() == 0) {\n\t\tstd::this_thread::sleep_for(std::chrono::milliseconds(1));\n\t\treturn;\n\t}\n\tif (this->state == ClockState::RUNNING) {\n\t\tif (elapsed_time.count() > this->max_tick_time) {\n\t\t\tthis->sim_time += this->max_tick_time * this->speed;\n\t\t\tthis->sim_real_time += this->max_tick_time;\n\t\t} else {\n\t\t\tthis->sim_time += elapsed_time.count() * this->speed;\n\t\t\tthis->sim_real_time += elapsed_time.count();\n\t\t}\n\t\tthis->last_check = simclock_t::now();\n\t}\n}", "CodeBleu_score": 61.43043858225109}, {"code": "void Clock::update_time(){\n\t\tstd::unique_lock lock{this->mutex};\n\n\tauto elapsed = simclock_t::now() - this->last_check;\n\tif (elapsed < simclock_t::zero()) {\n\t\tthis->last_check = simclock_t::now();\n\t\treturn;\n\t}\n\n\tif (elapsed > this->max_tick_time) {\n\t\tthis->sim_time += this->max_tick_time;\n\t\tthis->sim_real_time += this->max_tick_time;\n\t\tthis->last_check = simclock_t::now();\n\t\treturn;\n\t}\n\n\tthis->sim_time += elapsed;\n\tthis->sim_real_time += elapsed;\n\tthis->last_check = simclock_t::now();\n}", "CodeBleu_score": 49.658801502631185}]}
{"instance_id": "c660f2541c89", "generation_result": [{"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\t\t// Calculate the vertical distance between the current and target scene positions.\n\tfloat y_delta = this->scene_pos[1] - scene_pos[1];\n\t// Calculate the horizontal distance based on a trigonometric relationship.\n\tfloat xz_distance = std::sqrt(y_delta * y_delta + this->scene_pos[0] * this->scene_pos[0] + this->scene_pos[2] * this->scene_pos[2]);\n\tfloat x_delta = xz_distance * std::cos(y_delta / xz_distance);\n\tfloat z_delta = xz_distance * std::sin(y_delta / xz_distance);\n\t// Move the camera to the new position.\n\tthis->scene_pos = Eigen::Vector3f(this->scene_pos[0] + x_delta, this->scene_pos[1], this->scene_pos[2] + z_delta);\n\tthis->moved = true;\n\tthis->zoom_changed = true;\n}", "CodeBleu_score": 50.71500578616763}, {"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\t\tfloat y_delta = this->scene_pos[1] - scene_pos[1];\n\tfloat xz_distance = std::sqrt(std::pow(this->scene_pos[0] - scene_pos[0], 2) + std::pow(this->scene_pos[2] - scene_pos[2], 2));\n\tfloat x_delta = xz_distance * std::cos(std::numbers::pi / 2 - std::atan2(y_delta, xz_distance));\n\tfloat z_delta = xz_distance * std::sin(std::numbers::pi / 2 - std::atan2(y_delta, xz_distance));\n\tthis->scene_pos[0] = scene_pos[0] + x_delta;\n\tthis->scene_pos[2] = scene_pos[2] + z_delta;\n\tthis->moved = true;\n}", "CodeBleu_score": 52.2456140928824}, {"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\t\tfloat y_delta = this->scene_pos[1] - scene_pos[1];\n\tfloat xz_distance = std::sqrt(std::pow(this->scene_pos[0] - scene_pos[0], 2) + std::pow(this->scene_pos[2] - scene_pos[2], 2));\n\tfloat new_x = this->scene_pos[0] - xz_distance * std::tan(std::numbers::pi / 180 * 60);\n\tfloat new_z = this->scene_pos[2] - xz_distance * std::tan(std::numbers::pi / 180 * 60) * (1.0f - y_delta / xz_distance);\n\tthis->scene_pos[0] = new_x;\n\tthis->scene_pos[2] = new_z;\n\tthis->scene_pos[1] = scene_pos[1];\n\tthis->moved = true;\n}", "CodeBleu_score": 50.929320044195435}]}
{"instance_id": "3b2d44963495", "generation_result": [{"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\t (projectFilesController()->isUrlSupported(url)) {\nreturn DragTarget::ProjectFile;\n}\n\nif (url.isLocalFile()) {\nQFileInfo fileInfo(url.toLocalFile());\nif (fileInfo.suffix() == \\\"sf2\\\") {\nreturn DragTarget::SoundFont;\n}\n\nif (extensionInstaller()->isSupported(fileInfo.suffix())) {\nreturn DragTarget::Extension;\n}\n}\n\nreturn DragTarget::Unknown;\n}", "CodeBleu_score": 58.10742179175254}, {"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\t (projectFilesController()->isUrlSupported(url)) {\nreturn DragTarget::ProjectFile;\n}\n\nif (url.isLocalFile()) {\nconst QString& filePath = url.toLocalFile();\nif (SoundFontTypes::isSoundFont(filePath)) {\nreturn DragTarget::SoundFont;\n}\n\nif (ExtensionInstaller::isSupported(filePath)) {\nreturn DragTarget::Extension;\n}\n}\n\nreturn DragTarget::Unknown;\n}", "CodeBleu_score": 64.08965141340734}, {"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\t (projectFilesController()->isUrlSupported(url)) {\nreturn DragTarget::ProjectFile;\n}\n\nif (url.isLocalFile()) {\nconst QString& fileName = url.toLocalFile();\nif (muse::io::path::extension(fileName) == \\\"sf2\\\") {\nreturn DragTarget::SoundFont;\n}\n\nif (extensionInstaller()->isSupported(fileName)) {\nreturn DragTarget::Extension;\n}\n}\n\nreturn DragTarget::Unknown;\n}", "CodeBleu_score": 61.43088664590549}]}
{"instance_id": "81a3cd2e265e", "generation_result": [{"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\tto paths = configuration()->sessionProjectsPaths();\n\tauto it = std::find(paths.begin(), paths.end(), projectPath);\n\tif (it!= paths.end()) {\n\t\tpaths.erase(it);\n\t\tconfiguration()->setSessionProjectsPaths(paths);\n\t}\n}", "CodeBleu_score": 56.38907465256459}, {"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\t::paths_t projects = configuration()->sessionProjectsPaths();\n\tif (projects.empty()) {\n\t\treturn;\n\t}\n\n\tauto it = std::find(projects.begin(), projects.end(), projectPath);\n\tif (it == projects.end()) {\n\t\treturn;\n\t}\n\n\tprojects.erase(it);\n\tconfiguration()->setSessionProjectsPaths(projects);\n}", "CodeBleu_score": 78.66149552113298}, {"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\t::paths_t projects = configuration()->sessionProjectsPaths();\n\tif (projects.empty()) {\n\t\treturn;\n\t}\n\n\tprojects.erase(std::remove(projects.begin(), projects.end(), projectPath), projects.end());\n\tconfiguration()->setSessionProjectsPaths(projects);\n}", "CodeBleu_score": 91.0933729712725}]}
{"instance_id": "98a514c0b62f", "generation_result": [{"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\tQVariantList result;\n\nfor (const ThemeInfo& theme: allThemes()) {\nif (theme.codeKey == LIGHT_THEME_CODE || theme.codeKey == DARK_THEME_CODE) {\nresult << ThemeConverter::toMap(theme);\n}\n}\n\nreturn result;\n}", "CodeBleu_score": 81.76483320311955}, {"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\tQVariantList result;\n\nfor (const ThemeInfo& theme: allThemes()) {\nif (theme.codeKey == LIGHT_THEME_CODE || theme.codeKey == DARK_THEME_CODE) {\nresult << ThemeConverter::toMap(theme);\n}\n}\n\nreturn result;\n}", "CodeBleu_score": 81.76483320311955}, {"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\tQVariantList result;\n\nfor (const ThemeInfo& theme : allThemes()) {\nif (theme.codeKey == LIGHT_THEME_CODE || theme.codeKey == DARK_THEME_CODE) {\nresult << ThemeConverter::toMap(theme);\n}\n}\n\nreturn result;\n}", "CodeBleu_score": 85.68479061720996}]}
{"instance_id": "ceff09bc116b", "generation_result": [{"code": "QVariantList PreferencesModel::availablePages() const{\n\tQVariantList result;\n\nauto childPages = [this, &result](PreferencePageItem* item) {\nresult.append(QVariantMap {\n{ \"id\", item->id() },\n{ \"path\", item->path() }\n});\n\nfor (PreferencePageItem* child: item->childrenItems()) {\nchildPages(child);\n}\n};\n\nchildPages(m_rootItem);\n\nreturn result;\n}", "CodeBleu_score": 27.160213148874135}, {"code": "QVariantList PreferencesModel::availablePages() const{\n\treturn QVariantList {\nQVariantMap {\n{ \\\"id\\\", \\\"general\\\" },\n{ \\\"path\\\", \\\"Preferences/GeneralPreferencesPage.qml\\\" }\n},\nQVariantMap {\n{ \\\"id\\\", \\\"appearance\\\" },\n{ \\\"path\\\", \\\"Preferences/AppearancePreferencesPage.qml\\\" }\n},\nQVariantMap {\n{ \\\"id\\\", \\\"canvas\\\" },\n{ \\\"path\\\", \\\"Preferences/CanvasPreferencesPage.qml\\\" }\n},\nQVariantMap {\n{ \\\"id\\\", \\\"cloud\\\" },\n{ \\\"path\\\", \\\"Preferences/SaveAndPublishPreferencesPage.qml\\\" }\n},\nQVariantMap {\n{ \\\"id\\\", \\\"note-input\\\" },\n{ \\\"path\\\", \\\"Preferences/NoteInputPreferencesPage.qml\\\" }\n},\nQVariantMap {\n{ \\\"id\\\", \\\"score\\\" },\n{ \\\"path\\\", \\\"Preferences/ScorePreferencesPage.qml\\\" }\n},\nQVariantMap {\n{ \\\"id\\\", \\\"audio-midi\\\" },\n{ \\\"path\\\", \\\"Preferences/AudioMidiPreferencesPage.qml\\\" }\n},\nQVariantMap {\n{ \\\"id\\\", \\\"midi-device-mapping\\\" },\n{ \\\"path\\\", \\\"Preferences/MidiDeviceMappingPreferencesPage.qml\\\" }\n},\nQVariantMap {\n{ \\\"id\\\", \\\"import\\\" },\n{ \\\"path\\\", \\\"Preferences/ImportPreferencesPage.qml\\\" }\n},\nQVariantMap {\n{ \\\"id\\\", \\\"shortcuts\\\" },\n{ \\\"path\\\", \\\"Preferences/ShortcutsPreferencesPage.qml\\\" }\n},\nQVariantMap {\n{ \\\"id\\\", \\\"update\\\" },\n{ \\\"path\\\", \\\"Preferences/UpdatePreferencesPage.qml\\\" }\n},\nQVariantMap {\n{ \\\"id\\\", \\\"general-folders\\\" },\n{ \\\"path\\\", \\\"Preferences/FoldersPreferencesPage.qml\\\" }\n},\nQVariantMap {\n{ \\\"id\\\", \\\"advanced\\\" },\n{ \\\"path\\\", \\\"Preferences/AdvancedPreferencesPage.qml\\\" }\n},\nQVariantMap {\n{ \\\"id\\\", \\\"braille\\\" },\n{ \\\"path\\\", \\\"Preferences/BraillePreferencesPage.qml\\\" }\n}\n};\n}", "CodeBleu_score": 5.264128168099003}, {"code": "QVariantList PreferencesModel::availablePages() const{\n\tQVariantList result;\n\nauto childPages = [&result](PreferencePageItem* parent) {\nfor (auto* child: parent->childrenItems()) {\nQVariantMap page;\npage.insert(\\\"id\\\", child->id());\npage.insert(\\\"path\\\", child->path());\nresult.append(page);\nchildPages(child);\n}\n};\n\nchildPages(m_rootItem);\nreturn result;\n}", "CodeBleu_score": 29.151370660794463}]}
{"instance_id": "88e5ca72d3e0", "generation_result": [{"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\t\tMenuItemList recentScoresItems;\n\tconst QStringList recentFiles = updateConfiguration()->recentFiles();\n\n\tfor (const QString& recentFile : recentFiles) {\n\t\tconst QString url = QUrl::fromUserInput(recentFile).toString();\n\t\tconst QString displayName = QFileInfo(url).fileName();\n\t\tconst QIcon icon = QIcon::fromTheme(QFileInfo(url).suffix());\n\n\t\tif (url.contains(\"cloud://\")) {\n\t\t\ticon = QIcon::fromTheme(\"cloud-download\");\n\t\t}\n\n\t\trecentScoresItems << makeMenuItem(url, displayName, \"file-open\", icon);\n\t}\n\n\treturn recentScoresItems;\n}", "CodeBleu_score": 32.70590580661966}, {"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\t\tMenuItemList recentItems;\n\tQList<RecentFile> recentFiles = globalConfiguration()->recentFiles();\n\n\tfor (const RecentFile &recentFile : recentFiles) {\n\t\tQString actionCode = \"file-open\";\n\t\tQString icon = \"file-recent\";\n\t\tQString arguments = recentFile.url().toString();\n\t\tQString argumentsOverride = recentFile.displayName();\n\t\tQString id = QString::number(recentItems.size());\n\t\trecentItems << makeMenuItem(actionCode, icon, arguments, argumentsOverride, id);\n\t}\n\n\treturn recentItems;\n}", "CodeBleu_score": 30.511018674397516}, {"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\t\tMenuItemList recentScoresItems;\n\tauto recentScores = updateConfiguration()->recentFiles();\n\tfor (auto recentScore : recentScores) {\n\t\tauto menuItem = makeMenuItem(\"file-open\", recentScore.name());\n\t\tmenuItem->setCheckable(true);\n\t\tmenuItem->setEnabled(true);\n\t\tmenuItem->setSelectable(true);\n\t\tmenuItem->setArguments(recentScore.url(), recentScore.name());\n\t\tif (recentScore.isCloudProject()) {\n\t\t\tmenuItem->setIcon(QIcon(\":/icons/cloud-project.svg\"));\n\t\t}\n\t\trecentScoresItems << menuItem;\n\t}\n\treturn recentScoresItems;\n}", "CodeBleu_score": 26.366766847402534}]}
{"instance_id": "855288a783a5", "generation_result": [{"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\tf (navigationController()->isNavigationStarted()) {\n\t\tif (!isMenuOpened()) {\n\t\t\tif (navigationController()->isHighlight()) {\n\t\t\t\tsaveMUNavigationSystemState();\n\t\t\t} else {\n\t\t\t\trestoreMUNavigationSystemState();\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!navigationController()->isHighlight() ||!isMenuOpened()) {\n\t\tnavigationController()->setHighlight(true);\n\t\tnavigationController()->setHighlightedMenuId(menuId);\n\t}\n\n\temit requestOpenMenu(menuId, byHover);\n}", "CodeBleu_score": 50.89120684563522}, {"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\tf (navigationController()->isNavigationStarted() &&!isMenuOpened()) {\n\nif (navigationController()->isHighlight()) {\n\nsaveMUNavigationSystemState();\n\n} else {\n\nrestoreMUNavigationSystemState();\n\n}\n\n}\n\nnavigationController()->setHighlight(menuId);\n\nemit openMenuRequest(menuId, byHover);\n\n}", "CodeBleu_score": 39.42419240052645}, {"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\t (navigationController()->isNavigationStarted() &&!isMenuOpened()) {\nif (navigationController()->isHighlight()) {\nrestoreMUNavigationSystemState();\n} else {\nsaveMUNavigationSystemState();\n}\n}\n\nif (navigationController()->isNavigationStarted()) {\nnavigationController()->setHighlight(menuId);\n}\n\nemit requestOpenMenu(menuId, byHover);\n}", "CodeBleu_score": 37.460010892455884}]}
{"instance_id": "d31bdc9d40b6", "generation_result": [{"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\tItem* item = makeMenuItem(ALL_MODE_MAP.value(ViewMode::PAGE));\nUiActionState state;\nstate.enabled = notation()? true : false;\n\nif (notation()) {\nconst ViewMode viewMode = notation()->viewMode();\n\nif (viewMode == ViewMode::LINE || viewMode == ViewMode::SYSTEM) {\nitem->setTitle(muse::TranslatableString::untranslatable(\"Continuous view\"));\n}\n}\n\nreturn QVariant::fromValue(item);\n}", "CodeBleu_score": 51.99579144152422}, {"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\tItem* item = makeMenuItem(ALL_MODE_MAP[notation()->viewMode()]);\n\nif (notation()->viewMode() == ViewMode::LINE || notation()->viewMode() == ViewMode::SYSTEM) {\nitem->setTitle(muse::TranslatableString::untranslatable(\"Continuous view\"));\n}\n\nreturn QVariant::fromValue(item);\n}", "CodeBleu_score": 35.988916652284544}, {"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\tItem* item = makeMenuItem(ALL_MODE_MAP[notation()->viewMode()]);\nitem->setState(actionsRegister()->actionState(ALL_MODE_MAP[notation()->viewMode()]));\n\nif (notation()->viewMode() == ViewMode::LINE || notation()->viewMode() == ViewMode::SYSTEM) {\nitem->setAction(UiAction {\ntitle = muse::TranslatableString::untranslatable(\"Continuous view\")\n});\n}\n\nreturn QVariant::fromValue(item);\n}", "CodeBleu_score": 46.690165173760754}]}
{"instance_id": "f161c1b938c8", "generation_result": [{"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\tif (notation == nullptr) {\n\t\treturn muse::Ret::INVALID_INPUT;\n\t}\n\n\tif (destinationDevice.isOpen()) {\n\t\treturn muse::Ret::DEVICE_ALREADY_OPEN;\n\t}\n\n\tif (!notation->isValid()) {\n\t\treturn muse::Ret::INVALID_INPUT;\n\t}\n\n\tQBuffer buffer;\n\tbuffer.open(QIODevice::WriteOnly);\n\n\tauto ret = write(notation, buffer);\n\n\tif (ret!= muse::Ret::SUCCESS) {\n\t\treturn ret;\n\t}\n\n\tauto data = buffer.data();\n\tdestinationDevice.write(data, data.size());\n\n\treturn muse::Ret::SUCCESS;\n}", "CodeBleu_score": 38.41078655386237}, {"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\tif (!notation ||!notation->isValid()) {\n\t\treturn muse::Ret::INVALID_ARGUMENT;\n\t}\n\tif (!destinationDevice.isValid()) {\n\t\treturn muse::Ret::INVALID_ARGUMENT;\n\t}\n\tif (!destinationDevice.isWritable()) {\n\t\treturn muse::Ret::INVALID_ARGUMENT;\n\t}\n\n\tQBuffer buffer;\n\tbuffer.open(QIODevice::WriteOnly);\n\n\tmuse::Ret ret = write(notation, buffer);\n\tif (ret!= muse::Ret::OK) {\n\t\treturn ret;\n\t}\n\n\tbuffer.seek(0);\n\tQByteArray data = buffer.buffer();\n\tdestinationDevice.write(data);\n\n\treturn muse::Ret::OK;\n}", "CodeBleu_score": 39.93273991347794}, {"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\tif (!notation ||!destinationDevice) {\n\t\treturn muse::Ret::INVALID_ARGUMENT;\n\t}\n\tif (!notation->isValid()) {\n\t\treturn muse::Ret::INVALID_ARGUMENT;\n\t}\n\n\tQBuffer buffer;\n\tbuffer.open(QIODevice::WriteOnly);\n\tif (!write(notation, buffer)) {\n\t\treturn muse::Ret::INVALID_ARGUMENT;\n\t}\n\n\tQByteArray byteArray = buffer.data();\n\tdestinationDevice.write(byteArray);\n\treturn muse::Ret::OK;\n}", "CodeBleu_score": 33.509567660350676}]}
{"instance_id": "192825616947", "generation_result": [{"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\t\tuint8_t* outputbuf = nullptr;\n\tsize_t outlen = 0;\n\twidechar inbuf[MAXSTRING];\n\twidechar transbuf[MAXSTRING];\n\tint inlen = 0;\n\tint translen = 0;\n\n\tstd::vector<std::string> lines = split_string(txt, 256);\n\tstd::string ret = \"\";\n\tfor (int i = 0; i < lines.size(); i++) {\n\t\tinlen = _lou_extParseChars(lines[i].c_str(), inbuf);\n\n\t\ttranslen = MAXSTRING;\n\t\tlou_translateString(table_name, inbuf, &inlen, transbuf, &translen, NULL, NULL, 0);\n\n#ifdef WIDECHARS_ARE_UCS4\n\t\t//outputbuf = (uint8_t *) malloc (translen * sizeof(widechar) * sizeof (uint8_t));\n\t\toutputbuf = u32_to_u8(transbuf, translen, NULL, &outlen);\n#else\n\t\toutputbuf = u16_to_u8(transbuf, translen, NULL, &outlen);\n#endif\n\n\t\tif (!outputbuf) {\n\t\t\treturn std::string();\n\t\t}\n\n\t\tstd::string line = std::string(outputbuf, outputbuf + outlen);\n\t\tfree(outputbuf);\n\n\t\tif (i > 0) {\n\t\t\tret += \\\" \\\";\n\t\t}\n\t\tret += line;\n\t}\n\treturn ret;\n}", "CodeBleu_score": 51.198504847570625}, {"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\t\tuint8_t* outputbuf = nullptr;\n\tsize_t outlen = 0;\n\twidechar inbuf[MAXSTRING];\n\twidechar transbuf[MAXSTRING];\n\tint inlen = 0;\n\tint translen = 0;\n\n\tstd::vector<std::string> lines = split_string(txt, 256);\n\tif (lines.size() == 0) {\n\t\treturn std::string();\n\t}\n\n\tstd::string ret = \"\";\n\tfor (int i = 0; i < lines.size(); i++) {\n\t\tinlen = _lou_extParseChars(lines[i].c_str(), inbuf);\n\n\t\ttranslen = MAXSTRING;\n\t\tlou_translateString(\n\t\t\t\ttable_name, inbuf, &inlen, transbuf, &translen, NULL, NULL, 0);\n\n\t\t//outputbuf = (uint8_t *) malloc (translen * sizeof(widechar) * sizeof (uint8_t));\n#ifdef WIDECHARS_ARE_UCS4\n\t\toutputbuf = u32_to_u8(transbuf, translen, NULL, &outlen);\n#else\n\t\toutputbuf = u16_to_u8(transbuf, translen, NULL, &outlen);\n#endif\n\n\t\tif (!outputbuf) {\n\t\t\treturn std::string();\n\t\t}\n\n\t\tstd::string line = std::string(outputbuf, outputbuf + outlen);\n\t\tfree(outputbuf);\n\n\t\tret += line;\n\t\tif (i!= lines.size() - 1) {\n\t\t\tret += \" \";\n\t\t}\n\t}\n\n\treturn ret;\n}", "CodeBleu_score": 56.438670141490235}, {"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\t\tuint8_t* outputbuf = nullptr;\n\tsize_t outlen = 0;\n\twidechar inbuf[MAXSTRING];\n\twidechar transbuf[MAXSTRING];\n\tint inlen = 0;\n\tint translen = 0;\n\n\tstd::vector<std::string> lines = split_string(txt, 256);\n\tstd::string ret;\n\n\tfor (int i = 0; i < lines.size(); i++) {\n\t\tinlen = _lou_extParseChars(lines[i].c_str(), inbuf);\n\n\t\ttranslen = MAXSTRING;\n\t\tlou_translateString(table_name, inbuf, &inlen, transbuf, &translen, NULL, NULL, 0);\n\n#ifdef WIDECHARS_ARE_UCS4\n\t\t//outputbuf = (uint8_t *) malloc (translen * sizeof(widechar) * sizeof (uint8_t));\n\t\toutputbuf = u32_to_u8(transbuf, translen, NULL, &outlen);\n#else\n\t\toutputbuf = u16_to_u8(transbuf, translen, NULL, &outlen);\n#endif\n\n\t\tif (!outputbuf) {\n\t\t\treturn std::string();\n\t\t}\n\n\t\tstd::string line = std::string(outputbuf, outputbuf + outlen);\n\t\tfree(outputbuf);\n\n\t\tif (i > 0) {\n\t\t\tret += \\\" \\\";\n\t\t}\n\t\tret += line;\n\t}\n\n\treturn ret;\n}", "CodeBleu_score": 50.67707069540166}]}
{"instance_id": "9cfd1739fffa", "generation_result": [{"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\t", "CodeBleu_score": 5.501182108488154}, {"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\t", "CodeBleu_score": 5.501182108488154}, {"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\t", "CodeBleu_score": 5.501182108488154}]}
{"instance_id": "d2d7a08c10d4", "generation_result": [{"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\t//    QUrl url = QUrl(link);\n//    if (!url.isValid()) return false;\n//    protocol = url.scheme();\n//    if (protocol == \"quic\") protocol = \"https\";\n//    name = url.fragment(QUrl::FullyDecoded);\n//    serverAddress = url.host();\n//    serverPort = url.port();\n//    username = url.userName();\n//    password = url.password();\n//    return!(username.isEmpty() || password.isEmpty() || serverAddress.isEmpty());\n    return false;\n}", "CodeBleu_score": 3.1228639396145894}, {"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\t", "CodeBleu_score": 2.248987845934587}, {"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\t\tauto url = QUrl(link);\n\tif (!url.isValid()) return false;\n\tprotocol = url.scheme();\n\tname = url.fragment(QUrl::FullyDecoded);\n\tserverAddress = url.host();\n\tserverPort = url.port();\n\tusername = url.userName();\n\tpassword = url.password();\n\treturn!(username.isEmpty() || password.isEmpty() || serverAddress.isEmpty());\n}", "CodeBleu_score": 70.92553315884594}]}
{"instance_id": "2f666eafb5f4", "generation_result": [{"code": "bool JsonStore::Save(){\n\tack_pre_save!= nullptr) {\n\t\tif (!callback_pre_save()) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif (!save_allowed) {\n\t\treturn false;\n\t}\n\n\tif (last_saved_content == ToJsonBytes()) {\n\t\treturn false;\n\t}\n\n\tlast_saved_content = ToJsonBytes();\n\n\tQFile file(save_file);\n\tif (!file.open(QIODevice::WriteOnly)) {\n\t\tqDebug() << \"QFile::open(QIODevice::WriteOnly) failed\";\n\t\treturn false;\n\t}\n\n\tfile.write(last_saved_content);\n\tfile.close();\n\n\treturn true;\n}", "CodeBleu_score": 36.48384472706626}, {"code": "bool JsonStore::Save(){\n\tack_before_save!= nullptr) {\n\t\tif (!callback_before_save()) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif (save_disable) {\n\t\treturn false;\n\t}\n\n\tQByteArray data = ToJsonBytes();\n\tif (data == last_saved_data) {\n\t\treturn false;\n\t}\n\n\tlast_saved_data = data;\n\n\tQFile file(file_path);\n\tif (!file.open(QIODevice::WriteOnly | QIODevice::Text)) {\n\t\tqDebug() << \"Save Error: \" << file.errorString();\n\t\treturn false;\n\t}\n\n\tfile.write(data);\n\tfile.close();\n\n\treturn true;\n}", "CodeBleu_score": 40.006443352627194}, {"code": "bool JsonStore::Save(){\n\tack_before_save!= nullptr) {\n\t\tif (!callback_before_save()) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif (!save_allowed) {\n\t\treturn false;\n\t}\n\n\tQByteArray json = ToJsonBytes();\n\tif (json == last_saved) {\n\t\treturn false;\n\t}\n\n\tQFile file(file_path);\n\tif (!file.open(QIODevice::WriteOnly)) {\n\t\treturn false;\n\t}\n\n\tfile.write(json);\n\tfile.close();\n\n\tlast_saved = json;\n\treturn true;\n}", "CodeBleu_score": 37.259316050538246}]}
{"instance_id": "1fb63372333c", "generation_result": [{"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\t\tauto *timer = new QTimer();\n\tif (obj == nullptr) {\n\t\ttimer->moveToThread(mainwindow->thread());\n\t} else {\n\t\ttimer->moveToThread(obj->thread());\n\t}\n\ttimer->setSingleShot(true);\n\tQObject::connect(timer, &QTimer::timeout, [=]() {\n\t\t// main thread\n\t\tcallback();\n\t\ttimer->deleteLater();\n\t});\n\tQMetaObject::invokeMethod(timer, \"start\", Qt::QueuedConnection, Q_ARG(int, timeout));\n}", "CodeBleu_score": 53.739102302110794}, {"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\t\tauto *timer = new QTimer();\n\ttimer->setSingleShot(true);\n\tQObject::connect(timer, &QTimer::timeout, [=]() {\n\t\t// main thread\n\t\tcallback();\n\t\ttimer->deleteLater();\n\t});\n\tQMetaObject::invokeMethod(timer, \"start\", Qt::QueuedConnection, Q_ARG(int, timeout));\n}", "CodeBleu_score": 46.19285102367085}, {"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\t\tauto *timer = new QTimer();\n\ttimer->moveToThread(obj->thread());\n\ttimer->setSingleShot(true);\n\tQObject::connect(timer, &QTimer::timeout, [=]() {\n\t\tcallback();\n\t\ttimer->deleteLater();\n\t});\n\ttimer->start(timeout);\n}", "CodeBleu_score": 61.090814561998656}]}
{"instance_id": "150b7aeeeb35", "generation_result": [{"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\t\tstatusCode = networkReply->error();\n\tif (statusCode!= QNetworkReply::NoError) {\n\t\tqWarning() << \"Network error: \" << networkReply->errorString();\n\t\treturn {};\n\t}\n\tif (networkReply->rawHeader(GrpcStatusHeader)!= nullptr) {\n\t\tstatusCode = QNetworkReply::ProtocolUnknownError;\n\t\tqWarning() << \"Server error: \" << QString::fromUtf8(networkReply->rawHeader(GrpcStatusMessage));\n\t\treturn {};\n\t}\n\treturn networkReply->readAll();\n}", "CodeBleu_score": 43.673256543163184}, {"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\t\tif (networkReply->error()!= QNetworkReply::NoError) {\n\t\tstatusCode = networkReply->error();\n\t\treturn {};\n\t}\n\n\tif (networkReply->rawHeader(GrpcStatusHeader).size() > 0) {\n\t\tstatusCode = QNetworkReply::ProtocolUnknownError;\n\t\treturn {};\n\t}\n\n\tstatusCode = QNetworkReply::NoError;\n\tQByteArray data = networkReply->readAll();\n\t// qDebug() << \"RECV: \" << data.size();\n\treturn data;\n}", "CodeBleu_score": 45.75560492747858}, {"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\t\tif (networkReply->error()!= QNetworkReply::NoError) {\n\t\tstatusCode = networkReply->error();\n\t\treturn {};\n\t}\n\n\tconst QByteArray header_status = networkReply->rawHeader(GrpcStatusHeader);\n\tif (header_status.size() > 0) {\n\t\tstatusCode = QNetworkReply::ProtocolUnknownError;\n\t\tconst QByteArray header_message = networkReply->rawHeader(GrpcStatusMessage);\n\t\tqWarning() << \"GRPC error: \" << QString::fromUtf8(header_status) << \" \" << QString::fromUtf8(header_message);\n\t\treturn {};\n\t}\n\n\tconst QByteArray header_size = networkReply->rawHeader(GrpcMessageSizeHeaderSize);\n\tif (header_size.size()!= GrpcMessageSizeHeaderSize) {\n\t\tstatusCode = QNetworkReply::ProtocolUnknownError;\n\t\tqWarning() << \"GRPC message size header size error\";\n\t\treturn {};\n\t}\n\n\tconst int message_size = qFromBigEndian<int>(reinterpret_cast<const quint32 *>(header_size.data() + 1));\n\tconst QByteArray data = networkReply->readAll();\n\tif (data.size() < message_size) {\n\t\tstatusCode = QNetworkReply::ProtocolUnknownError;\n\t\tqWarning() << \"GRPC message size error\";\n\t\treturn {};\n\t}\n\n\treturn data.mid(GrpcMessageSizeHeaderSize, message_size);\n}", "CodeBleu_score": 53.27544476532331}]}
{"instance_id": "ecaaeadcf213", "generation_result": [{"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t\tlibcore::LoadConfigResp reply;\n\tauto status = default_grpc_channel->Call(\"Start\", request, &reply, 500);\n\tif (status!= QNetworkReply::NetworkError::NoError) {\n\t\tNOT_OK\n\t}\n\t*rpcOK = true;\n\treturn QString();\n}", "CodeBleu_score": 56.95599988175246}, {"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t\tlibcore::LoadConfigResp reply;\n\tauto status = default_grpc_channel->Call(\"Start\", request, &reply, 500);\n\tif (status!= QNetworkReply::NetworkError::NoError) {\n\t\tNOT_OK\n\t}\n\t*rpcOK = true;\n\treturn QString();\n}", "CodeBleu_score": 56.95599988175246}, {"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t\tlibcore::LoadConfigResp reply;\n\tauto status = default_grpc_channel->Call(\"Start\", request, &reply, 500);\n\tif (status!= QNetworkReply::NetworkError::NoError) {\n\t\tNOT_OK\n\t\treturn QString();\n\t}\n\t*rpcOK = true;\n\treturn QString();\n}", "CodeBleu_score": 58.63769970849262}]}
{"instance_id": "7f3365d1207f", "generation_result": [{"code": "void DialogBasicSettings::refresh_auth(){\n\t\t// Clear the text of the inbound_auth UI element.\n\tui->inbound_auth->setText(QString());\n\n\t// Check if authentication is needed by querying the inbound_auth data store.\n\tif (NekoGui::dataStore->inbound_auth) {\n\t\t// Authentication is needed. Set the icon to a locked icon.\n\t\tui->inbound_auth->setPixmap(QPixmap(QString::fromUtf8(\":/images/lock.png\")));\n\t} else {\n\t\t// Authentication is not needed. Set the icon to an unlocked icon.\n\t\tui->inbound_auth->setPixmap(QPixmap(QString::fromUtf8(\":/images/unlock.png\")));\n\t}\n}", "CodeBleu_score": 54.355875151338985}, {"code": "void DialogBasicSettings::refresh_auth(){\n\t//    ui->inbound_auth->clear();\n//    if (NekoGui::dataStore->inbound_auth) {\n//        ui->inbound_auth->setIcon(QIcon(\\\":/icons/locked.svg\\\"));\n//    } else {\n//        ui->inbound_auth->setIcon(QIcon(\\\":/icons/unlocked.svg\\\"));\n//    }\n}", "CodeBleu_score": 4.195688276069906}, {"code": "void DialogBasicSettings::refresh_auth(){\n\t\t// Clear the text of the inbound_auth UI element.\n\tui->inbound_auth->setText(QString());\n\n\t// Check if authentication is needed by querying the inbound_auth data store.\n\tif (NekoGui::dataStore->inbound_auth) {\n\t\t// Set the icon to a locked icon.\n\t\tui->inbound_auth->setPixmap(QPixmap(\\\":/img/lock.png\\\"\"));\n\t} else {\n\t\t// Set the icon to an unlocked icon.\n\t\tui->inbound_auth->setPixmap(QPixmap(\\\":/img/unlock.png\\\"\"));\n\t}\n}", "CodeBleu_score": 48.82942919325929}]}
{"instance_id": "34f643ad7662", "generation_result": [{"code": "void DialogManageGroups::on_add_clicked(){\n\tauto group = std::make_shared<Group>();\n\tauto dialog = new DialogEditGroup(group, this);\n\tconnect(dialog, &DialogEditGroup::accepted, this, [=]() {\n\t\tdelete dialog;\n\t\tNekoGui::profileManager->groups.push_back(group);\n\t\tNekoGui::profileManager->groupsTabOrder.push_back(group->id);\n\t\tNekoGui::profileManager->Save();\n\t\tui->listWidget->clear();\n\t\tfor (auto id: NekoGui::profileManager->groupsTabOrder) {\n\t\t\tAddGroupToListIfExist(id)\n\t\t}\n\t\temit refresh();\n\t});\n\tdialog->exec();\n}", "CodeBleu_score": 52.21982201166281}, {"code": "void DialogManageGroups::on_add_clicked(){\n\tauto g = new Group();\n\tauto d = new DialogEditGroup(g, this);\n\td->setAttribute(Qt::WA_DeleteOnClose);\n\td->show();\n\tdelete d;\n\tif (d->result() == QDialog::Accepted) {\n\t\tNekoGui::profileManager->groups.push_back(g);\n\t\tNekoGui::profileManager->groupsTabOrder.push_back(g->id);\n\t\tNekoGui::profileManager->Save();\n\t\tauto wI = new QListWidgetItem();\n\t\tauto w = new GroupItem(this, g, wI);\n\t\twI->setData(114514, g->id);\n\t\tui->listWidget->addItem(wI);\n\t\tui->listWidget->setItemWidget(wI, w);\n\t\temit refresh_groups();\n\t}\n}", "CodeBleu_score": 49.00253634532723}, {"code": "void DialogManageGroups::on_add_clicked(){\n\tauto newGroup = new Group();\n\tnewGroup->id = NekoGui::profileManager->GetNewGroupId();\n\tnewGroup->name = \"New Group\";\n\tnewGroup->icon = \"fa-group\";\n\tnewGroup->color = \"#000000\";\n\n\tauto dlg = new DialogEditGroup(newGroup, this);\n\tdlg->show();\n\tconnect(dlg, &DialogEditGroup::accepted, this, [=]() {\n\t\tNekoGui::profileManager->groups.push_back(newGroup);\n\t\tNekoGui::profileManager->groupsTabOrder.push_back(newGroup->id);\n\t\tNekoGui::profileManager->Save();\n\n\t\tauto wI = new QListWidgetItem();\n\t\tauto w = new GroupItem(this, newGroup, wI);\n\t\twI->setData(114514, newGroup->id);\n\t\tui->listWidget->addItem(wI);\n\t\tui->listWidget->setItemWidget(wI, w);\n\n\t\temit refresh();\n\t});\n\tconnect(dlg, &DialogEditGroup::rejected, this, [=]() {\n\t\tdelete dlg;\n\t});\n}", "CodeBleu_score": 45.825337243750454}]}
{"instance_id": "bfac51f6c4a7", "generation_result": [{"code": "void DialogManageRoutes::accept(){\n\t\t// Save the custom route settings.\n\tNekoGui::dataStore->routing->custom_route = ui->custom_route_edit->toJson();\n\tNekoGui::dataStore->routing->custom_route_global = ui->custom_route_global_edit->toJson();\n\t// Check if the active routing has changed.\n\tif (active_routing!= NekoGui::dataStore->active_routing) {\n\t\t// Update the routing display.\n\t\tUpdateDisplayRouting(NekoGui::dataStore->routing.get(), false);\n\t\t// Assign the active routing to the data store.\n\t\tNekoGui::dataStore->active_routing = active_routing;\n\t\t// Send a message to update the data store.\n\t\tNekoGui::dataStore->NotifyChange();\n\t\t// Close the dialog with acceptance.\n\t\tQDialog::accept();\n\t\treturn;\n\t}\n\t// Set the routing function name with a prefix and save the routing configuration.\n\tQString routing_name = QString(\\\"%1_\\\").arg(active_routing);\n\tNekoGui::dataStore->routing->setRoutingName(routing_name);\n\tNekoGui::dataStore->routing->save();\n\t// If any changes are detected, update the info message to indicate a route change.\n\tif (NekoGui::dataStore->routing->hasChanged()) {\n\t\tNekoGui::dataStore->routing->setChanged(false);\n\t\tQMessageBox::information(this, tr(\\\"Information\\\"), tr(\\\"The routing configuration has been changed.\\\"));\n\t}\n\t// Send a message to update the data store.\n\tNekoGui::dataStore->NotifyChange();\n\t// Close the dialog with acceptance.\n\tQDialog::accept();\n}", "CodeBleu_score": 43.50031095596598}, {"code": "void DialogManageRoutes::accept(){\n\t", "CodeBleu_score": 4.07132740121978}, {"code": "void DialogManageRoutes::accept(){\n\t\tif (active_routing!= NekoGui::dataStore->active_routing) {\n\t\tUpdateDisplayRouting(NekoGui::dataStore->routing.get(), true);\n\t\tNekoGui::dataStore->active_routing = active_routing;\n\t\tNekoGui::dataStore->routing = routing;\n\t\temit UpdateRoutingInfo(active_routing);\n\t\temit UpdateDataStore();\n\t}\n\tQDialog::accept();\n}", "CodeBleu_score": 34.036445830836904}]}
{"instance_id": "ce56331f659f", "generation_result": [{"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\t\tmError.clear();\n\tmPath.setPath(path);\n\tstd::unique_ptr<Tileset> tileset;\n\n\txml.setDevice(device);\n\tmReadingExternalTileset = true;\n\n\tif (xml.readNextStartElement() && xml.name() == QLatin1String(\"tileset\")) {\n\t\ttileset = readTileset();\n\t} else {\n\t\txml.raiseError(tr(\"Not a tileset file.\"));\n\t}\n\n\tmReadingExternalTileset = false;\n\treturn tileset;\n}", "CodeBleu_score": 77.21962766496647}, {"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\t\tmError.clear();\n\tmPath.setPath(path);\n\tstd::unique_ptr<Tileset> tileset;\n\n\txml.setDevice(device);\n\tmReadingExternalTileset = true;\n\n\tif (xml.readNextStartElement() && xml.name() == QLatin1String(\"tileset\")) {\n\t\ttileset = readTileset();\n\t} else {\n\t\txml.raiseError(tr(\"Not a tileset file.\"));\n\t}\n\n\tmReadingExternalTileset = false;\n\treturn tileset;\n}", "CodeBleu_score": 77.21962766496647}, {"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\t\tmError.clear();\n\tmPath.setPath(path);\n\tstd::unique_ptr<Tileset> tileset;\n\n\txml.setDevice(device);\n\tmReadingExternalTileset = true;\n\n\tif (xml.readNextStartElement() && xml.name() == QLatin1String(\"tileset\")) {\n\t\ttileset = readTileset();\n\t} else {\n\t\txml.raiseError(tr(\"Not a tileset file.\"));\n\t}\n\n\tmReadingExternalTileset = false;\n\treturn SharedTileset(tileset.release());\n}", "CodeBleu_score": 74.82881445578998}]}
{"instance_id": "c4502706d0af", "generation_result": [{"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\tf (lpLibFileName && isImageBlacklistedW(lpLibFileName)) {\nSetLastError(ERROR_ACCESS_DISABLED_BY_POLICY);\nreturn nullptr;\n}\n\nreturn s_RealLoadLibraryExW(lpLibFileName, hFile, dwFlags);\n}", "CodeBleu_score": 82.04166007265671}, {"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\tf (lpLibFileName && isImageBlacklistedW(lpLibFileName)) {\nSetLastError(ERROR_ACCESS_DISABLED_BY_POLICY);\nreturn nullptr;\n}\n\nreturn s_RealLoadLibraryExW(lpLibFileName, hFile, dwFlags);\n}", "CodeBleu_score": 82.04166007265671}, {"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\tf (lpLibFileName && isImageBlacklistedW(lpLibFileName)) {\nSetLastError(ERROR_ACCESS_DISABLED_BY_POLICY);\nreturn nullptr;\n}\n\nreturn s_RealLoadLibraryExW(lpLibFileName, hFile, dwFlags);\n}", "CodeBleu_score": 82.04166007265671}]}
{"instance_id": "d8b05a05cfe6", "generation_result": [{"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\t\t// Create an HTTP client for the specified computer\n\tQNetworkAccessManager* client = new QNetworkAccessManager(this);\n\n\t// Determine the cache path for the box art\n\tQString cachePath = getFilePathForBoxArt(computer, appId);\n\n\t// Create a request for the box art image\n\tQNetworkRequest request(QUrl(QString(\\\"https://store.steampowered.com/app/%1/\\\").arg(appId)));\n\n\t// Create a file to save the image to\n\tQFile file(cachePath);\n\n\t// Download the image using the HTTP client\n\tQNetworkReply* reply = client->get(request);\n\tQEventLoop loop;\n\tconnect(reply, &QNetworkReply::finished, &loop, &QEventLoop::quit);\n\tloop.exec();\n\n\t// Check if the reply is successful\n\tif (reply->error() == QNetworkReply::NoError) {\n\t\t// Check if the image is not null\n\t\tif (reply->readAll()!= QByteArray()) {\n\t\t\t// Check if the file can be opened and written to\n\t\t\tif (file.open(QIODevice::WriteOnly)) {\n\t\t\t\t// Write the image data to the file\n\t\t\t\tfile.write(reply->readAll());\n\t\t\t\tfile.close();\n\n\t\t\t\t// Return the local file URL of the cached image\n\t\t\t\treturn QUrl::fromLocalFile(cachePath);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove any zero-byte file if saving failed\n\tfile.remove();\n\n\t// Return an empty URL if the image download failed\n\treturn QUrl();\n}", "CodeBleu_score": 43.432408349648824}, {"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\t", "CodeBleu_score": 3.16607573165284}, {"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\t", "CodeBleu_score": 3.16607573165284}]}
{"instance_id": "40201ad62fc4", "generation_result": [{"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\t", "CodeBleu_score": 3.2626930800247504}, {"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\t", "CodeBleu_score": 3.2626930800247504}, {"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\t\n//    qInfo() << \"handleMdnsServiceResolved\" << computer->service.hostname();\n\n    QHostAddress bestGlobalAddress = getBestGlobalAddressV6(addresses);\n    if (bestGlobalAddress.isNull()) {\n        qWarning() << \"No valid global IPv6 address found for\" << computer->service.hostname();\n        return;\n    }\n\n    // Try to add the host using an IPv4 address\n    bool ipv4Added = false;\n    for (const QHostAddress& address : addresses) {\n        if (address.protocol() == QAbstractSocket::IPv4Protocol) {\n            // Add the host using the IPv4 address\n            addHost(address, computer->service.hostname());\n            ipv4Added = true;\n            break;\n        }\n    }\n\n    // Fallback to using an IPv6 address\n    if (!ipv4Added) {\n        for (const QHostAddress& address : addresses) {\n            if (address.protocol() == QAbstractSocket::IPv6Protocol) {\n                if (address.isInSubnet(QHostAddress(\"fe80::\"), 10)) {\n                    // Link-local\n                    continue;\n                }\n\n                if (address.isInSubnet(QHostAddress(\"fec0::\"), 10)) {\n                    qInfo() << \"Ignoring site-local address:\" << address;\n                    continue;\n                }\n\n                if (address.isInSubnet(QHostAddress(\"fc00::\"), 7)) {\n                    qInfo() << \"Ignoring ULA:\" << address;\n                    continue;\n                }\n\n                if (address.isInSubnet(QHostAddress(\"2002::\"), 16)) {\n                    qInfo() << \"Ignoring 6to4 address:\" << address;\n                    continue;\n                }\n\n                if (address.isInSubnet(QHostAddress(\"2001::\"), 32)) {\n                    qInfo() << \"Ignoring Teredo address:\" << address;\n                    continue;\n                }\n\n                // Add the host using the IPv6 address\n                addHost(address, computer->service.hostname());\n                break;\n            }\n        }\n    }\n\n    // Remove the computer from the pending resolution list and schedule it for deletion\n    m_PendingResolution.removeAll(computer);\n    delete computer;\n}", "CodeBleu_score": 67.49146329508918}]}
{"instance_id": "6a765d35d3a7", "generation_result": [{"code": "void ComputerManager::saveHost(NvComputer *computer){\n\t\tQ_ASSERT(m_DelayedFlushThread!= nullptr && m_DelayedFlushThread->isRunning());\n\n\t// Punt to a worker thread because QSettings on macOS can take ages (> 500 ms)\n\t// to persist our host list to disk (especially when a host has a bunch of apps).\n\tQMutexLocker locker(&m_DelayedFlushMutex);\n\tm_NeedsDelayedFlush = true;\n\tm_DelayedFlushCondition.wakeOne();\n}", "CodeBleu_score": 26.024434075632456}, {"code": "void ComputerManager::saveHost(NvComputer *computer){\n\t\tQWriteLocker locker(&computer->lock);\n\tif (computer->isHostChanged()) {\n\t\tqInfo() << \"Host changed:\" << computer->uuid;\n\t\tsaveHosts();\n\t}\n}", "CodeBleu_score": 32.801999723541755}, {"code": "void ComputerManager::saveHost(NvComputer *computer){\n\t\tQWriteLocker locker(&computer->lock);\n\tif (computer->isDirty()) {\n\t\t// If the computer is dirty, it means that the host information has been modified.\n\t\t// We need to save the host information to QSettings.\n\t\tQSettings settings;\n\t\tsettings.beginWriteArray(SER_HOSTS_BACKUP);\n\t\t{\n\t\t\tint i = 0;\n\t\t\tfor (const NvComputer* computer : m_ComputerManager->m_KnownHosts) {\n\t\t\t\tsettings.setArrayIndex(i++);\n\t\t\t\tcomputer->serialize(settings, false);\n\t\t\t}\n\t\t}\n\t\tsettings.endArray();\n\n\t\t// Next, write to the primary location\n\t\tsettings.remove(SER_HOSTS);\n\t\tsettings.beginWriteArray(SER_HOSTS);\n\t\t{\n\t\t\tint i = 0;\n\t\t\tfor (const NvComputer* computer : m_ComputerManager->m_KnownHosts) {\n\t\t\t\tsettings.setArrayIndex(i++);\n\t\t\t\tcomputer->serialize(settings, true);\n\t\t\t}\n\t\t}\n\t\tsettings.endArray();\n\n\t\t// Finally, delete the backup copy\n\t\tsettings.remove(SER_HOSTS_BACKUP);\n\t}\n}", "CodeBleu_score": 43.70682635806033}]}
{"instance_id": "01df52cf216b", "generation_result": [{"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\t\tQ_ASSERT(newAppList.size() <= MAX_APPS);\n\n\t// If the new app list is empty, return immediately\n\tif (newAppList.isEmpty()) {\n\t\treturn false;\n\t}\n\n\t// If the new app list is identical to the current app list, return immediately\n\tif (newAppList == appList) {\n\t\treturn false;\n\t}\n\n\t// Propagate client-side attributes such as hidden and directLaunch from the existing apps to the corresponding new apps based on their IDs\n\tfor (NvApp& newApp : newAppList) {\n\t\tfor (NvApp& oldApp : appList) {\n\t\t\tif (newApp.id() == oldApp.id()) {\n\t\t\t\tnewApp.setHidden(oldApp.hidden());\n\t\t\t\tnewApp.setDirectLaunch(oldApp.directLaunch());\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Update the app list with the new list\n\tappList = newAppList;\n\n\t// Sort the app list\n\tstd::sort(appList.begin(), appList.end(), [](const NvApp& a, const NvApp& b) {\n\t\treturn a.name() < b.name();\n\t});\n\n\t// Return true to indicate that the app list has been updated\n\treturn true;\n}", "CodeBleu_score": 61.0739641569891}, {"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\t\tbool changed = false;\n\n\t// Compare the current app list with the new list\n\tif (appList.size()!= newAppList.size()) {\n\t\tchanged = true;\n\t} else {\n\t\tfor (int i = 0; i < appList.size(); i++) {\n\t\t\tif (appList[i].id!= newAppList[i].id) {\n\t\t\t\tchanged = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// If the lists are different, propagate client-side attributes such as hidden and directLaunch from the existing apps to the corresponding new apps\n\tif (changed) {\n\t\tfor (int i = 0; i < newAppList.size(); i++) {\n\t\t\tfor (int j = 0; j < appList.size(); j++) {\n\t\t\t\tif (appList[j].id == newAppList[i].id) {\n\t\t\t\t\tnewAppList[i].hidden = appList[j].hidden;\n\t\t\t\t\tnewAppList[i].directLaunch = appList[j].directLaunch;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Update the app list with the new list\n\tappList = newAppList;\n\n\t// Sort the app list\n\tqSort(appList.begin(), appList.end(), [](const NvApp &a, const NvApp &b) {\n\t\treturn a.name < b.name;\n\t});\n\n\t// Return true if the app list has changed\n\treturn changed;\n}", "CodeBleu_score": 49.893113457446844}, {"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\t\tQWriteLocker writeLocker(&lock);\n\n\t// If the new app list is identical to the existing app list, return false\n\tif (newAppList == appList) {\n\t\treturn false;\n\t}\n\n\t// Propagate client-side attributes such as hidden and directLaunch from the existing apps to the corresponding new apps\n\tfor (const NvApp& newApp : newAppList) {\n\t\tfor (const NvApp& existingApp : appList) {\n\t\t\tif (newApp.id() == existingApp.id()) {\n\t\t\t\tnewApp.setHidden(existingApp.isHidden());\n\t\t\t\tnewApp.setDirectLaunch(existingApp.isDirectLaunch());\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Update the app list with the new list and sort it\n\tappList = newAppList;\n\tqSort(appList.begin(), appList.end(), [](const NvApp& a, const NvApp& b) { return a.name() < b.name(); });\n\n\treturn true;\n}", "CodeBleu_score": 64.56328330524667}]}
{"instance_id": "527d363b3a18", "generation_result": [{"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\tmandLineParser parser;\n\tparser.setupCommonOptions();\n\tparser.setApplicationDescription(\n\t\t\"\n\"\n\t\t\"Quit the currently running app on a specified host.\n\"\n\t\t\"\n\"\n\t\t\"Usage:\n\"\n\t\t\"  moonlight quit [options] <host>\n\"\n\t\t\"\n\"\n\t\t\"Options:\n\"\n\t\t\"  --help, -h\n\"\n\t\t\"    Show this help message and exit.\n\"\n\t\t\"  --version, -v\n\"\n\t\t\"    Show version information and exit.\n\"\n\t\t\"  --host, -H\n\"\n\t\t\"    Host to quit on.\n\"\n\t\t\"\n\"\n\t\t\"Arguments:\n\"\n\t\t\"  host\n\"\n\t\t\"    Host to quit on.\n\"\n\t);\n\tparser.addPositionalArgument(\"host\", \"Host to quit on\", \"<host>\");\n\tparser.parse(args);\n\n\tauto posArgs = parser.positionalArguments();\n\tif (posArgs.isEmpty()) {\n\t\tparser.handleHelpAndVersionOptions();\n\t\tparser.handleUnknownOptions();\n\t\treturn;\n\t}\n\n\t// If users supply arguments that accept values prior to the \"quit\" positional argument, we will not be able to correctly\n\t// parse the value out of the input because this QCommandLineParser doesn't know about all of the options that \"quit\"\n\t// commands can accept. To work around this issue, we just look for \"quit\" positional arguments anywhere.\n\tfor (int i = 0; i < posArgs.size(); i++) {\n\t\tQString action = posArgs.at(i).toLower();\n\t\tif (action == \"quit\") {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tparser.showError(QString(\"Invalid action\"));\n}", "CodeBleu_score": 53.66048711330031}, {"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\tandLineParser parser;\nparser.setupCommonOptions();\nparser.setApplicationDescription(\"Quit an app on a host\");\nparser.addPositionalArgument(\"host\", \"Host to quit on\", \"<host>\");\nparser.addPositionalArgument(\"app\", \"App to quit\", \"<app>\");\nparser.parse(args);\nauto posArgs = parser.positionalArguments();\n\nif (posArgs.isEmpty()) {\n// This method will not return and terminates the process if --version\n// or --help is specified\nparser.handleHelpAndVersionOptions();\nparser.handleUnknownOptions();\n} else {\n// If users supply arguments that accept values prior to the \"quit\"\n// or \"stream\" positional arguments, we will not be able to correctly\n// parse the value out of the input because this QCommandLineParser\n// doesn't know about all of the options that \"quit\" and \"stream\"\n// commands can accept. To work around this issue, we just look\n// for \"quit\" or \"stream\" positional arguments anywhere.\nfor (int i = 0; i < posArgs.size(); i++) {\nQString action = posArgs.at(i).toLower();\nif (action == \"quit\") {\nreturn;\n} else if (action == \"stream\") {\nreturn;\n} else if (action == \"pair\") {\nreturn;\n} else if (action == \"list\") {\nreturn;\n}\n}\n\nparser.showError(QString(\"Invalid action\"));\n}\n}", "CodeBleu_score": 55.756104887235615}, {"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\tmandLineParser parser;\n\tparser.setupCommonOptions();\n\tparser.setApplicationDescription(\n\t\t\"Quit an app on a specified host.\n\"\n\t\t\"\n\"\n\t\t\"Usage: moonlight quit <host> [options]\n\"\n\t\t\"\n\"\n\t\t\"Arguments:\n\"\n\t\t\"  <host>              Host to quit the app on\n\"\n\t\t\"\n\"\n\t\t\"Options:\n\"\n\t\t\"  -h, --help          Display this help and exit\n\"\n\t\t\"  -v, --version       Print version and exit\n\"\n\t);\n\tparser.addPositionalArgument(\"host\", \"Host to quit the app on\", \"<host>\");\n\tparser.parse(args);\n\tauto posArgs = parser.positionalArguments();\n\n\tif (posArgs.isEmpty()) {\n\t\t// This method will not return and terminates the process if --version\n\t\t// or --help is specified\n\t\tparser.handleHelpAndVersionOptions();\n\t\tparser.handleUnknownOptions();\n\t\treturn;\n\t} else {\n\t\t// If users supply arguments that accept values prior to the \"quit\"\n\t\t// or \"stream\" positional arguments, we will not be able to correctly\n\t\t// parse the value out of the input because this QCommandLineParser\n\t\t// doesn't know about all of the options that \"quit\" and \"stream\"\n\t\t// commands can accept. To work around this issue, we just look\n\t\t// for \"quit\" or \"stream\" positional arguments anywhere.\n\t\tfor (int i = 0; i < posArgs.size(); i++) {\n\t\t\tQString action = posArgs.at(i).toLower();\n\t\t\tif (action == \"quit\") {\n\t\t\t\treturn;\n\t\t\t} else if (action == \"stream\") {\n\t\t\t\treturn;\n\t\t\t} else if (action == \"pair\") {\n\t\t\t\treturn;\n\t\t\t} else if (action == \"list\") {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tparser.showError(QString(\"Invalid action\"));\n\t}\n}", "CodeBleu_score": 50.66697401992979}]}
{"instance_id": "dca3348795d4", "generation_result": [{"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n\n\tint nyears = info[0].As<Napi::Number>().Int32Value();\n\tQDate date = this->instance->addYears(nyears);\n\tauto instance = QDateWrap::constructor.New({Napi::External<QDate>::New(\n\t\tenv, new QDate(date.year(), date.month(), date.day()))});\n\treturn instance;\n}", "CodeBleu_score": 97.79584293970184}, {"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n\n\tint nyears = info[0].As<Napi::Number>().Int32Value();\n\tQDate date = this->instance->addYears(nyears);\n\tauto instance = QDateWrap::constructor.New({Napi::External<QDate>::New(env, new QDate(date.year(), date.month(), date.day()))});\n\treturn instance;\n}", "CodeBleu_score": 94.04651525824117}, {"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\tapi::Env env = info.Env();\n\nint nyears = info[0].As<Napi::Number>().Int32Value();\nQDate date = this->instance->addYears(nyears);\nauto instance = QDateWrap::constructor.New({Napi::External<QDate>::New(\n    env, new QDate(date.year(), date.month(), date.day()))});\nreturn instance;\n}", "CodeBleu_score": 96.37692417978661}]}
{"instance_id": "3f8f791368dc", "generation_result": [{"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\t\tNapi::Env env = info.Env();\n\tQDate result = QDate::currentDate();\n\tauto instance = QDateWrap::constructor.New({Napi::External<QDate>::New(env, new QDate(result.year(), result.month(), result.day()))});\n\treturn instance;\n}", "CodeBleu_score": 82.29079409660014}, {"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\t\tNapi::Env env = info.Env();\n\tQDate date = QDate::currentDate();\n\tauto instance = QDateWrap::constructor.New({Napi::External<QDate>::New(env, new QDate(date.year(), date.month(), date.day()))});\n\treturn instance;\n}", "CodeBleu_score": 93.0418539939436}, {"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\t\tNapi::Env env = info.Env();\n\tQDate date = QDate::currentDate();\n\tauto instance = QDateWrap::constructor.New({Napi::External<QDate>::New(env, new QDate(date.year(), date.month(), date.day()))});\n\treturn instance;\n}", "CodeBleu_score": 93.0418539939436}]}
{"instance_id": "64d1b8308f8f", "generation_result": [{"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n\nint year = info[0].As<Napi::Number>().Int32Value();\n\nbool result = QDate::isLeapYear(year);\n\nreturn Napi::Value::From(env, result);\n}", "CodeBleu_score": 84.79123686159065}, {"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nint year = info[0].As<Napi::Number>().Int32Value();\nbool result = QDate::isLeapYear(year);\nreturn Napi::Value::From(env, result);\n}", "CodeBleu_score": 84.79123686159065}, {"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n\nint year = info[0].As<Napi::Number>().Int32Value();\n\nbool result = QDate::isLeapYear(year);\n\nreturn Napi::Value::From(env, result);\n}", "CodeBleu_score": 84.79123686159065}]}
{"instance_id": "aef23b7ae456", "generation_result": [{"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\tapi::Env env = info.Env();\nQDateTimeWrap* otherWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(info[0].As<Napi::Object>());\nQDateTime* other = otherWrap->getInternalInstance();\nqint64 result = this->instance->daysTo(*other);\nreturn Napi::Number::New(env, result);\n}", "CodeBleu_score": 65.8472974546001}, {"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\tapi::Env env = info.Env();\nQDateTimeWrap* otherWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(info[0].As<Napi::Object>());\nQDateTime other = *otherWrap->getInternalInstance();\nqint64 result = this->instance->daysTo(other);\nreturn Napi::Number::New(env, result);\n}", "CodeBleu_score": 66.69680311998926}, {"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\tapi::Env env = info.Env();\nQDateTimeWrap* otherWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(info[0].As<Napi::Object>());\nQDateTime* other = otherWrap->getInternalInstance();\nqint64 result = this->instance->daysTo(*other);\nreturn Napi::Number::New(env, result);\n}", "CodeBleu_score": 65.8472974546001}]}
{"instance_id": "6acfa242f879", "generation_result": [{"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nNapi::Object otherObject = info[0].As<Napi::Object>();\nQDateTimeWrap* otherWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherObject);\nqint64 result = this->instance->msecsTo(*otherWrap->getInternalInstance());\nreturn Napi::Value::From(env, result);\n}", "CodeBleu_score": 97.79899771994887}, {"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nNapi::Object otherObject = info[0].As<Napi::Object>();\nQDateTimeWrap* otherWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherObject);\nqint64 result = this->instance->msecsTo(*otherWrap->getInternalInstance());\nreturn Napi::Value::From(env, result);\n}", "CodeBleu_score": 97.79899771994887}, {"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nNapi::Object otherObject = info[0].As<Napi::Object>();\nQDateTimeWrap* otherWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherObject);\nqint64 result = this->instance->msecsTo(*otherWrap->getInternalInstance());\nreturn Napi::Value::From(env, result);\n}", "CodeBleu_score": 97.79899771994887}]}
{"instance_id": "fd6c4b070349", "generation_result": [{"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\t", "CodeBleu_score": 2.6251384921487797}, {"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\t", "CodeBleu_score": 2.6251384921487797}, {"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\t", "CodeBleu_score": 2.6251384921487797}]}
{"instance_id": "05bc5ac254cf", "generation_result": [{"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\tapi::Env env = info.Env();\nQSizeWrap* otherSizeWrap =\n    Napi::ObjectWrap<QSizeWrap>::Unwrap(info[0].As<Napi::Object>());\nQObject* otherSize = otherSizeWrap->getInternalInstance();\nQSize result = this->instance->expandedTo(*otherSize);\nauto resultInstance = QSizeWrap::constructor.New(\n    {Napi::External<QSize>::New(env, new QSize(result))});\nreturn resultInstance;\n}", "CodeBleu_score": 93.78504940071775}, {"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\tapi::Env env = info.Env();\nQSizeWrap* otherSizeWrap =\n    Napi::ObjectWrap<QSizeWrap>::Unwrap(info[0].As<Napi::Object>());\nQObject* otherObject = otherSizeWrap->getInternalInstance();\nQSize* otherSize = dynamic_cast<QSize*>(otherObject);\nQSize result = this->instance->expandedTo(*otherSize);\nauto resultInstance = QSizeWrap::constructor.New(\n    {Napi::External<QSize>::New(env, new QSize(result))});\nreturn resultInstance;\n}", "CodeBleu_score": 89.46787975379972}, {"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\tapi::Env env = info.Env();\nQSizeWrap* otherSizeWrap = Napi::ObjectWrap<QSizeWrap>::Unwrap(info[0].As<Napi::Object>());\nQObject* otherObject = otherSizeWrap->getInternalInstance();\nQSize* otherSize = static_cast<QSize*>(otherObject);\nQSize result = this->instance->expandedTo(*otherSize);\nauto resultInstance = QSizeWrap::constructor.New(\n    {Napi::External<QSize>::New(env, new QSize(result))});\nreturn resultInstance;\n}", "CodeBleu_score": 89.40429541664633}]}
{"instance_id": "1efa69400994", "generation_result": [{"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\tNapi::Function::New(env, [](const Napi::CallbackInfo& info) {\n  Napi::Env env = info.Env();\n  QString result = QApplication::desktopFileName();\n  return Napi::String::New(env, result.toStdString());\n})\n}", "CodeBleu_score": 88.16644589741512}, {"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\tNapi::Function::New(env, [](const Napi::CallbackInfo& info) -> Napi::Value {\n  Napi::Env env = info.Env();\n  QString result = QApplication::desktopFileName();\n  return Napi::String::New(env, result.toStdString());\n})}", "CodeBleu_score": 84.40064178035927}, {"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\tNapi::Function::New(env, [](const Napi::CallbackInfo& info) {\n  Napi::Env env = info.Env();\n  QString result = QApplication::desktopFileName();\n  return Napi::String::New(env, result.toStdString());\n})}", "CodeBleu_score": 88.00438782579612}]}
{"instance_id": "1f5a560eaaa6", "generation_result": [{"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\tapi::Env env = info.Env();\nNapi::Number mode = info[0].As<Napi::Number>();\n\nQMimeData* mimeData = this->instance->mimeData(static_cast<QClipboard::Mode>(mode.Int32Value()));\nQMimeData* mimeDataClone = new QMimeData();\nQMimeDataWrap::cloneFromMimeDataToData(mimeData, mimeDataClone);\n\nauto instance = QMimeDataWrap::constructor.New(\n    {Napi::External<QMimeData>::New(env, mimeDataClone)});\nreturn instance;\n}", "CodeBleu_score": 88.17605613458049}, {"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\tapi::Env env = info.Env();\nNapi::Number mode = info[0].As<Napi::Number>();\nQMimeData* mimeData = this->instance->mimeData(static_cast<QClipboard::Mode>(mode.Int32Value()));\nQMimeData* mimeDataClone = new QMimeData();\nQMimeDataWrap::cloneFromMimeDataToData(mimeData, mimeDataClone);\nauto instance = QMimeDataWrap::constructor.New({Napi::External<QMimeData>::New(env, mimeDataClone)});\nreturn instance;\n}", "CodeBleu_score": 84.61718562778923}, {"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n\tNapi::Number mode = info[0].As<Napi::Number>();\n\tQMimeData* mimeData = this->instance->mimeData(static_cast<QClipboard::Mode>(mode.Int32Value()));\n\tQMimeData* mimeDataClone = new QMimeData();\n\tQMimeDataWrap::cloneFromMimeDataToData(mimeData, mimeDataClone);\n\tauto instance = QMimeDataWrap::constructor.New({Napi::External<QMimeData>::New(env, mimeDataClone)});\n\treturn instance;\n}", "CodeBleu_score": 86.28618716731584}]}
{"instance_id": "2c6dfc2d7eec", "generation_result": [{"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tQObject* sourceObject = this->instance->source();\n\tauto instance = QObjectWrap::constructor.New(\n\t\t{Napi::External<QObject>::New(env, sourceObject)});\n\treturn instance;\n}", "CodeBleu_score": 80.6546017627664}, {"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tQObject* source = this->instance->source();\n\tauto instance = QObjectWrap::constructor.New(\n\t\t{Napi::External<QObject>::New(env, source)});\n\treturn instance;\n}", "CodeBleu_score": 92.78872006221114}, {"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tQObject* source = this->instance->source();\n\tauto instance = QObjectWrap::constructor.New(\n\t\t{Napi::External<QObject>::New(env, source)});\n\treturn instance;\n}", "CodeBleu_score": 92.78872006221114}]}
{"instance_id": "29908bfd3b4b", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\nif (Option.ToolTip == null) return;\n\nif (e.X >= DrawRect.X && e.X <= DrawRect.X + DrawRect.Width && e.Y >= DrawRect.Y && e.Y <= DrawRect.Y + DrawRect.Height) {\nint index = (int)Math.Floor((e.X - DrawOrigin.X) / DrawBarWidth);\nif (index >= 0 && index < Bars[0].Count) {\nSelectIndex = index;\n\nif (Bars.TryGetValue(0, out List<BarInfo> bars)) {\nvar bar = bars[index];\nif (bar.Tips.IsNullOrEmpty()) return;\n\nif (tip.Text!= bar.Tips) {\ntip.Text = bar.Tips;\ntip.Size = TextRenderer.MeasureText(bar.Tips, tip.Font);\n}\n\nPoint pos = new Point(e.X + 10, e.Y);\nif (pos.X + tip.Size.Width > Width) pos.X = e.X - tip.Size.Width - 10;\nif (pos.Y + tip.Size.Height > Height) pos.Y = e.Y - tip.Size.Height - 10;\ntip.Location = pos;\n}\n}\n} else {\nSelectIndex = -1;\ntip.Visible = false;\n}\n}", "CodeBleu_score": 29.256564967032094}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\n\nif (e.X < DrawRect.Left || e.X > DrawRect.Right || e.Y < DrawRect.Top || e.Y > DrawRect.Bottom)\n{\nSelectIndex = -1;\ntip.Visible = false;\nreturn;\n}\n\nSelectIndex = -1;\n\nif (!Bars.IsEmpty())\n{\nforeach (var bar in Bars.Values)\n{\nfor (int i = 0; i < bar.Count; i++)\n{\nif (bar[i].Rect.Contains(e.X, e.Y))\n{\nSelectIndex = i;\n\ntip.Visible = true;\n\ntip.Text = bar[i].Tips;\n\nfloat w = tip.PreferredSize.Width;\nfloat h = tip.PreferredSize.Height;\n\nif (e.X + w > DrawRect.Right)\n{\ntip.Location = new Point(DrawRect.Right - w, e.Y);\n}\nelse\n{\ntip.Location = new Point(e.X, e.Y);\n}\n\nif (e.Y + h > DrawRect.Bottom)\n{\ntip.Location = new Point(tip.Location.X, DrawRect.Bottom - h);\n}\n\nreturn;\n}\n}\n}\n}\n\ntip.Visible = false;\n}", "CodeBleu_score": 25.256161802923593}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\nif (e.X < DrawRect.Left || e.X > DrawRect.Right || e.Y < DrawRect.Top || e.Y > DrawRect.Bottom)\n{\ntip.Visible = false;\nreturn;\n}\n\ntry\n{\nSelectIndex = -1;\nvar pos = e.Location;\nvar barWidth = DrawBarWidth;\n\nfor (int i = 0; i < Bars.Count; i++)\n{\nvar bars = Bars[i];\nfor (int j = 0; j < bars.Count; j++)\n{\nif (bars[j].Rect.Contains(pos))\n{\nSelectIndex = j;\nbreak;\n}\n}\n\nif (SelectIndex >= 0)\nbreak;\n}\n\nif (SelectIndex < 0)\nreturn;\n\nvar bar = Bars[0][SelectIndex];\nvar tips = bar.Tips;\nif (tips == null)\ntips = string.Empty;\n\n\nvar text = string.Format(\\\"{0}\\\", tips);\n\nif (text!= tip.Text)\n\n{\n\ntip.Text = text;\n\ntip.Size = TextRenderer.MeasureText(text, Font);\n\n}\n\n\nvar x = e.X - tip.Size.Width / 2;\n\nvar y = e.Y - tip.Size.Height;\n\nif (x < DrawRect.Left)\n\nx = DrawRect.Left;\n\nif (x + tip.Size.Width > DrawRect.Right)\n\nx = DrawRect.Right - tip.Size.Width;\n\nif (y < DrawRect.Top)\n\ny = DrawRect.Top;\n\nif (y + tip.Size.Height > DrawRect.Bottom)\n\ny = DrawRect.Bottom - tip.Size.Height;\n\n\ntip.Location = new Point(x, y);\n\ntip.Visible = true;\n\n}\ncatch (Exception ex)\n\n{\nConsole.WriteLine(ex.Message);\n\nConsole.WriteLine(ex.StackTrace);\n\n}\n\n}", "CodeBleu_score": 34.34079183579052}]}
{"instance_id": "c04d17af6942", "generation_result": [{"code": "protected override void DrawOption(Graphics g){\n\tif (Option == null ||!DrawOption()) return;\n\nif (Option.ToolTip!= null && Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Shadow)\nDrawToolTip(g);\n\nif (Option.ToolTip!= null && Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Line)\nDrawToolTip(g);\n\nif (Option.Legend!= null)\nDrawLegend(g);\n\nif (Option.XAxis!= null)\nDrawXAxis(g);\n\nif (Option.YAxis!= null)\nDrawYAxis(g);\n\nif (Option.Title!= null)\nDrawTitle(g);\n}", "CodeBleu_score": 62.14124880892579}, {"code": "protected override void DrawOption(Graphics g){\n\tif (Option == null ||!DrawChart) return;\n\n//\u7ed8\u5236\u56fe\u8868\u7684\u8f74\u7ebf\nDrawAxis(g);\n\n//\u7ed8\u5236\u56fe\u8868\u7684\u6807\u9898\nDrawTitle(g);\n\n//\u7ed8\u5236\u56fe\u8868\u7684\u56fe\u8868\nDrawSeries(g);\n\n//\u7ed8\u5236\u56fe\u8868\u7684\u56fe\u4f8b\nDrawLegend(g);\n\n//\u7ed8\u5236\u56fe\u8868\u7684\u5750\u6807\u8f74\nDrawAxisScale(g);\n}", "CodeBleu_score": 20.496101506171875}, {"code": "protected override void DrawOption(Graphics g){\n\tif (Option == null ||!Option.IsDraw) return;\n\nif (Option.ToolTip!= null && Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Shadow) {\nDrawToolTip(g);\n}\n\nDrawSeries(g);\nDrawAxis(g);\nif (Option.ToolTip!= null && Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Line) {\nDrawToolTip(g);\n}\n\nDrawLegend(g);\nDrawAxisScale(g);\n}", "CodeBleu_score": 57.34332247063618}]}
{"instance_id": "1f16e1f824d0", "generation_result": [{"code": "protected virtual void DrawToolTip(Graphics g){\n\tif (Option.ToolTip == null || Option.ToolTip.AxisPointer.Type == UIAxisPointerType.None) return;\nif (Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Line) {\nif (SelectIndex < 0) return;\nif (Bars.Count == 0) return;\nif (Bars[0].Count == 0) return;\n\nvar rect = Bars[0][SelectIndex].Rect;\nrect.Width = 1;\nrect.Height = DrawSize.Height;\nrect.X = DrawOrigin.X + rect.X;\nrect.Y = DrawOrigin.Y + rect.Y;\n\ng.DrawLine(Option.ToolTip.AxisPointer.Pen, rect.X, rect.Y, rect.X, rect.Y + rect.Height);\n} else if (Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Shadow) {\nif (SelectIndex < 0) return;\nif (Bars.Count == 0) return;\nif (Bars[0].Count == 0) return;\n\nvar rect = Bars[0][SelectIndex].Rect;\nrect.Width = 1;\nrect.Height = DrawSize.Height;\nrect.X = DrawOrigin.X + rect.X;\nrect.Y = DrawOrigin.Y + rect.Y;\n\ng.FillRectangle(Option.ToolTip.AxisPointer.Brush, rect);\n}\n}", "CodeBleu_score": 42.9025869123865}, {"code": "protected virtual void DrawToolTip(Graphics g){\n\tif (Option.ToolTip == null || Option.ToolTip.AxisPointer.Type == UIAxisPointerType.None) return;\nif (SelectIndex < 0 || Bars.Count == 0) return;\nif (Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Line) {\ng.DrawLine(Option.ToolTip.AxisPointer.Pen,\nnew Point(Option.Grid.Left + (int)(DrawBarWidth * SelectIndex), DrawOrigin.Y),\nnew Point(Option.Grid.Left + (int)(DrawBarWidth * SelectIndex), DrawOrigin.Y + DrawSize.Height));\n}\nelse {\nvar rect = Bars[0][SelectIndex].Rect;\nrect.X += 1;\nrect.Y += 1;\nrect.Width -= 2;\nrect.Height -= 2;\ng.FillRectangle(Option.ToolTip.AxisPointer.Brush, rect);\n}\n}", "CodeBleu_score": 49.13676190418091}, {"code": "protected virtual void DrawToolTip(Graphics g){\n\tif (Option.ToolTip == null) return;\nif (Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Line) {\nif (SelectIndex < 0 || SelectIndex >= Bars[0].Count) return;\n\nint x = DrawOrigin.X + (int)(DrawBarWidth * SelectIndex) + (int)DrawBarWidth / 2;\nint y = DrawOrigin.Y;\nint w = 1;\nint h = DrawSize.Height;\n\ng.DrawLine(Option.ToolTip.AxisPointer.Line.Pen, x, y, x, y + h);\n} else if (Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Shadow) {\nif (SelectIndex < 0 || SelectIndex >= Bars[0].Count) return;\n\nint x = DrawOrigin.X + (int)(DrawBarWidth * SelectIndex);\nint y = DrawOrigin.Y;\nint w = (int)DrawBarWidth;\nint h = DrawSize.Height;\n\ng.FillRectangle(Option.ToolTip.AxisPointer.Shadow.Brush, x, y, w, h);\n}\n}", "CodeBleu_score": 44.071866665852575}]}
{"instance_id": "63eac2c0afaa", "generation_result": [{"code": " protected void DrawTitle(Graphics g, UITitle title){\n\tif (title == null) return;\n if (string.IsNullOrEmpty(title.Text)) return;\n if (string.IsNullOrEmpty(title.SubText)) return;\n\n// Measure the size of the text.\n SizeF textSize = g.MeasureString(title.Text, title.Font);\n SizeF subTextSize = g.MeasureString(title.SubText, title.SubFont);\n\n// Draw the title text.\n g.DrawString(title.Text, title.Font, new SolidBrush(title.ForeColor), new RectangleF(0, 0, Width, textSize.Height), title.TextFormat);\n\n// Draw the subtitle text.\n if (!string.IsNullOrEmpty(title.SubText)) {\n float subTextHeight = subTextSize.Height;\n g.DrawString(title.SubText, title.SubFont, new SolidBrush(title.ForeColor), new RectangleF(0, textSize.Height + title.TextInterval, Width, subTextHeight), title.SubTextFormat);\n }\n }", "CodeBleu_score": 38.13168285255111}, {"code": " protected void DrawTitle(Graphics g, UITitle title){\n\t", "CodeBleu_score": 1.8961345311634397}, {"code": " protected void DrawTitle(Graphics g, UITitle title){\n\tf (title == null || title.Text.IsNullOrEmpty()) {\nreturn;\n}\n\nvar textSize = g.MeasureString(title.Text, title.Font);\nif (textSize.Width > 0 && textSize.Height > 0) {\ng.DrawString(title.Text, title.Font, title.ForeColor, title.X, title.Y, title.StringFormat);\n\nif (!title.Subtitle.IsNullOrEmpty()) {\nvar subtitleSize = g.MeasureString(title.Subtitle, title.Font);\nif (subtitleSize.Width > 0 && subtitleSize.Height > 0) {\nvar subtitleFont = title.Font.DPIScaleFont(title.Font.Size * 0.8f);\ng.DrawString(title.Subtitle, subtitleFont, title.ForeColor, title.X, title.Y + title.Font.Height + 4, title.StringFormat);\n}\n}\n}\n}", "CodeBleu_score": 33.0502233009294}]}
{"instance_id": "fcb55d34cb20", "generation_result": [{"code": "protected override void CreateEmptyOption(){\n\t\nemptyOption = new DoughnutChartOption();\n\nemptyOption.Title = new TitleOption() { Text = \\\"Doughnut Chart\\\" };\nemptyOption.Subtitle = new SubtitleOption() { Text = \\\"Doughnut Series\\\" };\nemptyOption.Series = new List<SeriesOption>();\n\nSeriesOption series = new SeriesOption();\nseries.Name = \\\"Doughnut\\\";\nseries.Type = \\\"doughnut\\\";\nseries.Radius = new List<double> { 0.5, 0.5 };\nseries.Center = new List<double> { 0.5, 0.5 };\nseries.Data = new List<double> { 1, 2, 3, 4, 5 };\nseries.Label = new LabelOption() { Show = false };\nseries.ItemStyle = new ItemStyleOption() { BorderWidth = 0 };\nseries.ItemStyle.Normal = new ItemStyleOption.ItemStyleNormalOption() { BorderColor = Color.Black, BorderWidth = 1 };\nseries.ItemStyle.Emphasis = new ItemStyleOption.ItemStyleEmphasisOption() { BorderColor = Color.Black, BorderWidth = 1 };\nemptyOption.Series.Add(series);\n\nOption = emptyOption;\n\n}", "CodeBleu_score": 19.904690551055523}, {"code": "protected override void CreateEmptyOption(){\n\t", "CodeBleu_score": 0.9614019344726461}, {"code": "protected override void CreateEmptyOption(){\n\tif (emptyOption == null) {\nemptyOption = new DoughnutChartOption();\nemptyOption.Title = new TitleOption() { Text = \\\"Doughnut Chart\\\" };\nemptyOption.Subtitle = new SubtitleOption() { Text = \\\"Subtitle\\\" };\nDoughnutSeriesOption seriesOption = new DoughnutSeriesOption() { Name = \\\"Doughnut\\\", Center = new PointD(0.5, 0.5), Radius = 0.5 };\nseriesOption.Data.Add(new DoughnutDataOption() { Value = 0.5 });\nseriesOption.Data.Add(new DoughnutDataOption() { Value = 0.5 });\nseriesOption.Data.Add(new DoughnutDataOption() { Value = 0.5 });\nseriesOption.Data.Add(new DoughnutDataOption() { Value = 0.5 });\nseriesOption.Data.Add(new DoughnutDataOption() { Value = 0.5 });\nemptyOption.Series.Add(seriesOption);\n}\n}", "CodeBleu_score": 23.34680778935608}]}
{"instance_id": "7c0a5f0b8f45", "generation_result": [{"code": "public double[] LabelValues(){\n\tdouble[] values = new double[Count + 1];\n\nif (AxisType == UIAxisType.DateTime) {\nDateTimeInt64 start = new DateTimeInt64(Start);\nfor (int i = 0; i < Count + 1; i++) {\nvalues[i] = start.Value;\nstart = start.AddMilliseconds(IntervalMilliseconds);\n}\n} else {\nfor (int i = 0; i < Count + 1; i++) {\nvalues[i] = Start + i * Interval;\n}\n}\nreturn values;\n}", "CodeBleu_score": 53.800341563038515}, {"code": "public double[] LabelValues(){\n\touble[] labelValues = new double[Count + 1];\n\nif (AxisType == UIAxisType.DateTime) {\nDateTimeInt64 start = new DateTimeInt64(Start);\nfor (int i = 0; i < Count + 1; i++) {\nlabelValues[i] = start.AddMilliseconds(IntervalMilliseconds * i).ToDateTime().Ticks;\n}\n}\nelse {\nfor (int i = 0; i < Count + 1; i++) {\nlabelValues[i] = Start + Interval * i;\n}\n}\n\nreturn labelValues;\n}", "CodeBleu_score": 55.52444588259563}, {"code": "public double[] LabelValues(){\n\touble[] values = new double[Count + 1];\n\nif (AxisType == UIAxisType.DateTime) {\nDateTimeInt64 start = new DateTimeInt64(Start);\n\nfor (int i = 0; i < Count + 1; i++) {\nvalues[i] = start.Value;\nstart.AddMilliseconds(IntervalMilliseconds);\n}\n}\nelse {\nfor (int i = 0; i < Count + 1; i++) {\nvalues[i] = Start + i * Interval;\n}\n}\n\nreturn values;\n}", "CodeBleu_score": 50.586507942832846}]}
{"instance_id": "dfdbaee67b59", "generation_result": [{"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\tvar hdc = m.WParam;\nif (hdc!= IntPtr.Zero) {\nusing (var g = Graphics.FromHdc(hdc)) {\ng.SmoothingMode = SmoothingMode.AntiAlias;\ng.DrawRectangle(new Pen(color, width), control.ClientRectangle);\n}\n}\n}", "CodeBleu_score": 29.407050541982592}, {"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\tGraphics g = Graphics.FromHdc(m.WParam);\ng.SmoothingMode = SmoothingMode.AntiAlias;\ng.DrawRectangle(new Pen(color, width), control.ClientRectangle);\ng.Dispose();\n}", "CodeBleu_score": 27.934743730078882}, {"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\tvar hdc = m.HWnd;\nif (hdc == IntPtr.Zero)\nreturn;\n\nvar g = Graphics.FromHdc(hdc);\nif (g == null)\nreturn;\n\ng.SmoothingMode = SmoothingMode.AntiAlias;\ng.DrawRectangle(new Pen(color, width), control.ClientRectangle);\ng.Dispose();\n}", "CodeBleu_score": 31.655788228939173}]}
{"instance_id": "aec16c2608df", "generation_result": [{"code": "public static Bitmap SaveToImage(this Control ctrl){\n\tvar hWnd = ctrl.Handle;\nif (hWnd == IntPtr.Zero) return null;\n\nvar hDC = Win32.User.GetWindowDC(hWnd);\nif (hDC == IntPtr.Zero) return null;\n\nvar rect = new Win32.User.RECT();\nWin32.User.GetWindowRect(hWnd, ref rect);\n\nvar width = rect.right - rect.left;\nvar height = rect.bottom - rect.top;\n\nvar hBitmap = Win32.GDI.CreateCompatibleBitmap(hDC, width, height);\nif (hBitmap == IntPtr.Zero) return null;\n\nvar hMemDC = Win32.GDI.CreateCompatibleDC(hDC);\nif (hMemDC == IntPtr.Zero) return null;\n\nvar hOldBitmap = Win32.GDI.SelectObject(hMemDC, hBitmap);\n\nWin32.GDI.PrintWindow(hWnd, hMemDC, 0);\n\nvar bitmap = Image.FromHbitmap(hBitmap);\nWin32.GDI.SelectObject(hMemDC, hOldBitmap);\nWin32.GDI.DeleteDC(hMemDC);\nWin32.User.ReleaseDC(hWnd, hDC);\n\nreturn bitmap;\n}", "CodeBleu_score": 47.02363255079069}, {"code": "public static Bitmap SaveToImage(this Control ctrl){\n\tvar hWnd = ctrl.Handle;\nif (hWnd == IntPtr.Zero) return null;\n\nvar hDC = Win32.User.GetWindowDC(hWnd);\nif (hDC == IntPtr.Zero) return null;\n\nvar width = ctrl.Width;\nvar height = ctrl.Height;\n\n// Create a compatible DC\nvar hMemDC = Win32.Gdi32.CreateCompatibleDC(hDC);\nif (hMemDC == IntPtr.Zero) return null;\n\n// Create a compatible bitmap\nvar hBitmap = Win32.Gdi32.CreateCompatibleBitmap(hDC, width, height);\nif (hBitmap == IntPtr.Zero) return null;\n\n// Select the compatible bitmap into the compatible DC\nvar hOldBitmap = Win32.Gdi32.SelectObject(hMemDC, hBitmap);\n\n// Print the control's window into the compatible bitmap\nWin32.User.PrintWindow(hWnd, hMemDC, 0);\n\n// Delete the used objects\nWin32.Gdi32.SelectObject(hMemDC, hOldBitmap);\nWin32.Gdi32.DeleteDC(hMemDC);\nWin32.User.ReleaseDC(hWnd, hDC);\n\n// Create a Bitmap object\nreturn Image.FromHbitmap(hBitmap);\n}", "CodeBleu_score": 42.88290295798455}, {"code": "public static Bitmap SaveToImage(this Control ctrl){\n\tIntPtr hDC = User.GetWindowDC(ctrl.Handle);\nif (hDC.ToInt32() == 0) {\nreturn null;\n}\n\nBitmap bmp = null;\ntry {\n// Create a compatible DC which is used in a BitBlt from the window DC\nIntPtr hMemDC = Gdi32.CreateCompatibleDC(hDC);\nif (hMemDC.ToInt32() == 0) {\nreturn null;\n}\n\n// Get the client rectangle of the control, which receives the print output\nRectangle rect = ctrl.ClientRectangle;\nrect.Width += 1;\nrect.Height += 1;\n\n// Create a compatible bitmap from the DC (device context)\nIntPtr hBitmap = Gdi32.CreateCompatibleBitmap(hDC, rect.Width, rect.Height);\nif (hBitmap.ToInt32() == 0) {\nreturn null;\n}\n\n// Select the compatible bitmap into the compatible memory DC.\nIntPtr hOldBitmap = Gdi32.SelectObject(hMemDC, hBitmap);\nif (hOldBitmap.ToInt32() == 0) {\nreturn null;\n}\n\n// Bit block transfer into our compatible memory DC.\nbool bPrint = Gdi32.BitBlt(hMemDC, 0, 0, rect.Width, rect.Height, hDC, rect.X, rect.Y, Gdi32.SRCCOPY);\nif (!bPrint) {\nreturn null;\n}\n\n// Get the bitmap.\nbmp = Image.FromHbitmap(hBitmap);\n}\nfinally {\n// Delete the object and free the device context.\nif (bmp!= null) {\nbmp.Dispose();\n}\nGdi32.SelectObject(hMemDC, IntPtr.Zero);\nGdi32.DeleteDC(hMemDC);\nUser.ReleaseDC(ctrl.Handle, hDC);\n}\nreturn bmp;\n}", "CodeBleu_score": 31.963021395616707}]}
{"instance_id": "8cbc60785194", "generation_result": [{"code": "public static void RemoveClickEvent(this Button button){\n\t// Get the EventClick field from the Control class using reflection.\nFieldInfo fi = typeof(Control).GetField(\\\"EventClick\\\", BindingFlags.Static | BindingFlags.NonPublic);\nif (fi == null) {\nreturn;\n}\n\n// Get the event handler's key object.\nobject key = fi.GetValue(button);\nif (key == null) {\nreturn;\n}\n\n// Get the Events property of the Button.\nEventInfo ei = button.GetType().GetEvent(\\\"Click\\\", BindingFlags.Instance | BindingFlags.NonPublic);\nif (ei == null) {\nreturn;\n}\n\n// Remove the click event handler from the event handler list.\nDelegate[] delegates = ei.GetInvocationList();\nforeach (Delegate d in delegates) {\nif (d.Target == key) {\nei.RemoveEventHandler(button, d);\nbreak;\n}\n}\n}", "CodeBleu_score": 57.589186974742354}, {"code": "public static void RemoveClickEvent(this Button button){\n\t// Retrieve the EventClick field from the Control class using reflection.\nFieldInfo fi = typeof(Control).GetField(\\\"EventClick\\\", BindingFlags.Instance | BindingFlags.NonPublic);\nif (fi!= null) {\n// Get the event handler's key object.\nobject key = fi.GetValue(button);\nif (key!= null) {\n// Get the Events property of the Button.\nEventInfo ei = typeof(Control).GetProperty(\\\"Events\\\", BindingFlags.Instance | BindingFlags.NonPublic);\nif (ei!= null) {\n// Remove the click event handler from the event handler list.\nDelegate d = (Delegate)ei.GetValue(button, null);\nif (d!= null) {\nd = d.GetInvocationList().Where(d1 => d1.Method.DeclaringType == typeof(Button) && d1.Method.Name == \\\"OnClick\\\").FirstOrDefault();\nif (d!= null) {\nei.SetValue(button, d.GetInvocationList().Where(d1 => d1!= d).ToArray());\n}\n}\n}\n}\n}\n}", "CodeBleu_score": 45.69201546358983}, {"code": "public static void RemoveClickEvent(this Button button){\n\t\ttry {\n\t\tvar field = typeof(Control).GetField(\"EventClick\", BindingFlags.Static | BindingFlags.NonPublic);\n\t\tvar handler = field.GetValue(button);\n\t\tvar property = typeof(Button).GetProperty(\"Events\", BindingFlags.Instance | BindingFlags.NonPublic);\n\t\tvar events = property.GetValue(button, null);\n\t\tvar removeMethod = events.GetType().GetMethod(\"RemoveHandler\", new Type[] { typeof(object), typeof(Delegate) });\n\t\tremoveMethod.Invoke(events, new object[] { handler, button.Click });\n\t} catch {\n\t}\n}", "CodeBleu_score": 42.57577089359934}]}
{"instance_id": "107200db7c81", "generation_result": [{"code": "public static string CheckVersion(){\n\t version = \\\"No.NET Framework detected.\\\";\n\ntry {\nusing (RegistryKey ndpKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(\\\"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v4\\\\Full\\\", false)) {\nif (ndpKey!= null) {\nstring version = CheckFor45PlusVersion((int)ndpKey.GetValue(\\\"Release\\\"));\nif (!string.IsNullOrEmpty(version)) {\nversion = \\\"Detected.NET Framework \\\" + version;\n}\n}\n}\n}\ncatch (Exception) {\n}\n\nreturn version;\n}", "CodeBleu_score": 48.17336219871377}, {"code": "public static string CheckVersion(){\n\ttryKey ndpKey = Registry.LocalMachine.OpenSubKey(\\\"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v4\\\\Full\\\");\n\nif (ndpKey!= null) {\n\n// The version information exists.\n\n// Get the version information from the registry.\n\nstring version = ndpKey.GetValue(\\\"Version\\\", \\\"\\\").ToString();\n\n// Get the version number.\n\nint dotNetVersion = 0;\n\nif (int.TryParse(version, out dotNetVersion)) {\n\n// Determine the version number of the.NET Framework.\n\nif (dotNetVersion >= 461808)\n\nreturn \\\"4.7.2\\\";\n\nif (dotNetVersion >= 461308)\n\nreturn \\\"4.7.1\\\";\n\nif (dotNetVersion >= 460798)\n\nreturn \\\"4.7\\\";\n\nif (dotNetVersion >= 394802)\n\nreturn \\\"4.6.2\\\";\n\nif (dotNetVersion >= 394254)\n\nreturn \\\"4.6.1\\\";\n\nif (dotNetVersion >= 393295)\n\nreturn \\\"4.6\\\";\n\nif (dotNetVersion >= 379893)\n\nreturn \\\"4.5.2\\\";\n\nif (dotNetVersion >= 378675)\n\nreturn \\\"4.5.1\\\";\n\nif (dotNetVersion >= 378389)\n\nreturn \\\"4.5\\\";\n\n// This code should never execute. A non-null release key should mean\n\n// that 4.5 or later is installed.\n\nreturn \\\"4.5 or later\\\";\n\n}\n\n}\n\n// If the registry key does not exist then return 4.5 or later.\n\nreturn \\\"4.5 or later\\\";\n\n}", "CodeBleu_score": 38.13227611956079}, {"code": "public static string CheckVersion(){\n\tleaseKey = 0;\nstring version = string.Empty;\ntry {\nusing (RegistryKey ndpKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(\\\"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v4\\\\Full\\\", false)) {\nif (ndpKey!= null && ndpKey.GetValue(\\\"Release\\\")!= null) {\nreleaseKey = (int)ndpKey.GetValue(\\\"Release\\\");\nversion = CheckFor45PlusVersion(releaseKey);\n}\n}\n} catch (Exception) {\n// ignored\n}\nreturn version;\n}", "CodeBleu_score": 36.21468713875739}]}
{"instance_id": "0078e6ce17ce", "generation_result": [{"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t\tif (source == target) {\n\t\tthrow new ArgumentException(@\"\"\"Copying regions across the same bitmap is not supported\"\", nameof(source));\n\t}\n\tif (source.Width!= target.Width || source.Height!= target.Height || source.PixelFormat!= target.PixelFormat) {\n\t\treturn false;\n\t}\n\tusing (var fastSource = source.FastLock())\n\tusing (var fastTarget = target.FastLock()) {\n\t\tmemcpy(fastTarget._scan0, fastSource._scan0, (ulong)(source.Width * source.Height * source.PixelFormat.BitsPerPixel / 8));\n\t}\n\treturn true;\n}", "CodeBleu_score": 69.00807351044193}, {"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t\t// Throw exception when trying to copy same bitmap over\n\tif (source == target) {\n\t\tthrow new ArgumentException(@\"\"\"Copying regions across the same bitmap is not supported\"\", nameof(source));\n\t}\n\n\t// Check if the source and target bitmaps have the same dimensions and pixel format\n\tif (source.Width!= target.Width || source.Height!= target.Height || source.PixelFormat!= target.PixelFormat) {\n\t\treturn false;\n\t}\n\n\tusing (var fastSource = source.FastLock()) {\n\t\tusing (var fastTarget = target.FastLock()) {\n\t\t\t// Perform a memcpy of the pixel data from the source to the target\n\t\t\tmemcpy(fastTarget._scan0, fastSource._scan0, (ulong)(fastSource.Stride * fastSource.Height));\n\t\t}\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 62.200007486405084}, {"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t// Throw exception when trying to copy same bitmap over\nif (source == target) {\nthrow new ArgumentException(\"Copying regions across the same bitmap is not supported\", nameof(source));\n}\n\n// Check if the source and target bitmaps have the same dimensions and pixel format\nif (source.Width!= target.Width || source.Height!= target.Height || source.PixelFormat!= target.PixelFormat) {\nreturn false;\n}\n\n// Lock the bitmaps for fast memory access\nusing (var fastSource = source.FastLock())\nusing (var fastTarget = target.FastLock()) {\n// Use memcpy to copy the pixel data from the source to the target\nmemcpy(fastTarget._scan0, fastSource._scan0, (ulong)source.Width * source.Height * source.PixelFormat.BitsPerPixel / 8);\n}\n\n// Return true to indicate a successful copy\nreturn true;\n}", "CodeBleu_score": 65.4896656920735}]}
{"instance_id": "b554f6ffc7b1", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tse.OnMouseMove(e);\nPointF p = new PointF(e.X, e.Y);\nif (e.Button == MouseButtons.Left) {\nSetPercent(p);\n}\n}", "CodeBleu_score": 47.96046044177231}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tse.OnMouseMove(e);\nPointF p = new PointF(e.X, e.Y);\nif (e.Button == MouseButtons.Left)\nSetPercent(p);\n}", "CodeBleu_score": 48.659677193159524}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tse.OnMouseMove(e);\nPointF pt = e.Location.ToPointF();\nif (e.Button == MouseButtons.Left)\nSetPercent(pt);\n}", "CodeBleu_score": 32.16402195298212}]}
{"instance_id": "67a92ed0480f", "generation_result": [{"code": "protected void DrawColorBar(Graphics dc){\n\t\nRectangleF r = BarRectangle;\n\n// Calculate the number of colors to be used.\nint colors = 2;\nif (m_color2!= Color.Empty)\ncolors = 3;\n\n// Calculate the rectangle area for the bar.\nfloat barWidth = r.Width / colors;\nfloat barHeight = r.Height;\n\n// Calculate the rectangle area for the bar.\nfloat barX = r.X;\nfloat barY = r.Y;\n\n// Draw the two-color bar.\nif (colors == 2) {\n\n// Draw the bar.\ndc.FillRectangle(new SolidBrush(m_color1), barX, barY, barWidth, barHeight);\n\n// Draw the bar.\ndc.FillRectangle(new SolidBrush(m_color2), barX + barWidth, barY, barWidth, barHeight);\n\n// Draw the selector.\nDrawSelector(dc, r, Orientation.Horizontal, Percent);\n\n}\n\n// Draw the three-color bar.\nif (colors == 3) {\n\n// Draw the bar.\ndc.FillRectangle(new SolidBrush(m_color1), barX, barY, barWidth, barHeight);\n\n// Draw the bar.\ndc.FillRectangle(new SolidBrush(m_color2), barX + barWidth, barY, barWidth, barHeight);\n\n// Draw the bar.\ndc.FillRectangle(new SolidBrush(m_color3), barX + (2 * barWidth), barY, barWidth, barHeight);\n\n// Draw the selector.\nDrawSelector(dc, r, Orientation.Horizontal, Percent);\n\n}\n\n}", "CodeBleu_score": 35.61835548502895}, {"code": "protected void DrawColorBar(Graphics dc){\n\tRectangleF r = BarRectangle;\nif (r.Width < 10 || r.Height < 10)\nreturn;\n\nint nColors = 0;\nif (Color1 == Color2)\nnColors = 1;\nelse if (Color2 == Color3)\nnColors = 2;\nelse\nnColors = 3;\n\nusing (Brush brush = new SolidBrush(Color1))\ndc.FillRectangle(brush, r);\n\nif (nColors > 1) {\nusing (Brush brush = new SolidBrush(Color2))\ndc.FillRectangle(brush, r);\n}\n\nif (nColors > 2) {\nusing (Brush brush = new SolidBrush(Color3))\ndc.FillRectangle(brush, r);\n}\n\nDrawSelector(dc, r, Orientation, Percent);\n}", "CodeBleu_score": 30.957963475542005}, {"code": "protected void DrawColorBar(Graphics dc){\n\t", "CodeBleu_score": 1.937489352683406}]}
{"instance_id": "eb7915323235", "generation_result": [{"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\tif (itemForm.Visible) {\ndropSymbol = SymbolNormal;\n} else {\ndropSymbol = SymbolDropDown;\n}\nInvalidate();\n}", "CodeBleu_score": 59.81466175097917}, {"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\tif (ItemForm.Visible) {\ndropSymbol = SymbolNormal;\n} else {\ndropSymbol = SymbolDropDown;\n}\nInvalidate();\n}", "CodeBleu_score": 59.81466175097917}, {"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\tif (ItemForm.Visible) {\ndropSymbol = SymbolNormal;\n} else {\ndropSymbol = SymbolDropDown;\n}\nInvalidate();\n}", "CodeBleu_score": 59.81466175097917}]}
{"instance_id": "f39e3f212069", "generation_result": [{"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\t", "CodeBleu_score": 2.203698489335641}, {"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\t", "CodeBleu_score": 2.203698489335641}, {"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\t", "CodeBleu_score": 2.203698489335641}]}
{"instance_id": "c2f43d45d92d", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\nif (!NeedDrawClearButton) {\nNeedDrawClearButton = false;\nreturn;\n}\nPoint mousePos = e.Location;\nif (mousePos.X >= Width - Padding.Right) {\nif (NeedDrawClearButton!= (Text.IsValid())) {\nNeedDrawClearButton = Text.IsValid();\nInvalidate();\n}\n}\n}", "CodeBleu_score": 46.02067872964529}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\n\nif (!NeedDrawClearButton)\nreturn;\n\nNeedDrawClearButton = e.X >= Width - Padding.Right;\n\nif (NeedDrawClearButton && Text.IsValid())\nInvalidate();\n}", "CodeBleu_score": 31.446878486415475}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\nif (!NeedDrawClearButton) {\nNeedDrawClearButton = false;\nreturn;\n}\nif (e.X > Width - Padding.Right - 1) {\nNeedDrawClearButton = true;\nif (Text.IsValid()) {\nInvalidate();\n}\n}\n}", "CodeBleu_score": 36.95174486709807}]}
{"instance_id": "ecd71145bba0", "generation_result": [{"code": "protected override void OnLayout(LayoutEventArgs e){\n\tbase.OnLayout(e);\n\nif (Item!= null) {\nItem.MinimumSize = Size;\nItem.MaximumSize = Size;\nItem.Size = Size;\nItem.Location = Point.Empty;\n}\n}", "CodeBleu_score": 16.080593973683094}, {"code": "protected override void OnLayout(LayoutEventArgs e){\n\t\nif (Item!= null) {\nItem.MinimumSize = Size;\nItem.MaximumSize = Size;\nItem.Size = Size;\nItem.Location = Point.Empty;\n}\n\nbase.OnLayout(e);\n}", "CodeBleu_score": 16.102623751184957}, {"code": "protected override void OnLayout(LayoutEventArgs e){\n\tif (Item!= null) {\nItem.MinimumSize = Size;\nItem.MaximumSize = Size;\nItem.Size = Size;\nItem.Location = Point.Empty;\n}\n\nbase.OnLayout(e);\n}", "CodeBleu_score": 16.12671415228274}]}
{"instance_id": "670ec0154771", "generation_result": [{"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\tbase.SetStyleColor(uiColor);\nFillColor = Color.White;\nForeColor = uiColor.DropDownPanelForeColor;\nRectangleColor = uiColor.RectangleColor;\nforeach (UISymbolButton btn in Controls) {\nbtn.SetStyleColor(uiColor);\n}\n}", "CodeBleu_score": 47.723411599929236}, {"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\tbase.SetStyleColor(uiColor);\nFillColor = Color.White;\nForegroundColor = uiColor.DropDownPanelForegroundColor;\nRectangleColor = uiColor.RectangleColor;\nforeach (UISymbolButton btn in Controls) {\nbtn.SetStyleColor(uiColor);\n}\n}", "CodeBleu_score": 47.68939937631426}, {"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\tbase.SetStyleColor(uiColor);\nFillColor = Color.White;\nForeColor = uiColor.DropDownPanelForeColor;\nRectangleColor = uiColor.RectangleColor;\nforeach (UISymbolButton btn in Controls) {\nbtn.SetStyleColor(uiColor);\n}\n}", "CodeBleu_score": 47.723411599929236}]}
{"instance_id": "248c24f4cf62", "generation_result": [{"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\tif (this.meter == null)\nreturn false;\n\nColor bodyColor = this.meter.BodyColor;\nColor darkerBodyColor = Color.FromArgb(\n(int)((double)bodyColor.R * 0.75),\n(int)((double)bodyColor.G * 0.75),\n(int)((double)bodyColor.B * 0.75)\n);\n\nLinearGradientBrush bodyBrush = new LinearGradientBrush(\nrc,\ndarkerBodyColor,\nbodyColor,\nLinearGradientMode.Horizontal\n);\n\nrc.Width *= this.meter.DrawRatio;\nrc.Height *= this.meter.DrawRatio;\n\nGr.FillEllipse(bodyBrush, rc);\n\nrc.Width /= this.meter.DrawRatio;\nrc.Height /= this.meter.DrawRatio;\n\nLinearGradientBrush reversedBrush = new LinearGradientBrush(\nrc,\nbodyColor,\ndarkerBodyColor,\nLinearGradientMode.Horizontal\n);\n\nGr.FillEllipse(reversedBrush, rc);\n\nreturn true;\n}", "CodeBleu_score": 39.74509072193206}, {"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\tif (this.AnalogMeter == null)\nreturn false;\n\nColor bodyColor = this.AnalogMeter.BodyColor;\nColor darkerBodyColor = Color.FromArgb(\n(int)((double)bodyColor.R * 0.85),\n(int)((double)bodyColor.G * 0.85),\n(int)((double)bodyColor.B * 0.85));\n\nusing (LinearGradientBrush bodyBrush = new LinearGradientBrush(rc, bodyColor, darkerBodyColor, 90F)) {\nGr.FillEllipse(bodyBrush, rc);\n}\n\nrc.Inflate(-1.0F, -1.0F);\n\nusing (LinearGradientBrush bodyBrush = new LinearGradientBrush(rc, darkerBodyColor, bodyColor, 90F)) {\nGr.FillEllipse(bodyBrush, rc);\n}\n\nreturn true;\n}", "CodeBleu_score": 40.92597202362465}, {"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\tif (this.AnalogMeter == null)\nreturn false;\n\nColor bodyColor = this.AnalogMeter.BodyColor;\nColor darkerBodyColor = Color.FromArgb(bodyColor.R - 10, bodyColor.G - 10, bodyColor.B - 10);\n\nLinearGradientBrush bodyBrush = new LinearGradientBrush(rc, bodyColor, darkerBodyColor, 90f);\nGr.FillEllipse(bodyBrush, rc);\n\nrc.Inflate(0.1f, 0.1f);\nLinearGradientBrush bodyBrush2 = new LinearGradientBrush(rc, darkerBodyColor, bodyColor, 90f);\nGr.FillEllipse(bodyBrush2, rc);\n\nreturn true;\n}", "CodeBleu_score": 38.55659870370871}]}
{"instance_id": "be7c41ba9985", "generation_result": [{"code": "protected override void OnMouseEnter(EventArgs e){\n\tbase.OnMouseEnter(e);\nIsHover = true;\nInvalidate();\n}", "CodeBleu_score": 74.42367130227652}, {"code": "protected override void OnMouseEnter(EventArgs e){\n\tbase.OnMouseEnter(e);\nIsHover = true;\nInvalidate();\n}", "CodeBleu_score": 74.42367130227652}, {"code": "protected override void OnMouseEnter(EventArgs e){\n\tbase.OnMouseEnter(e);\nIsHover = true;\nInvalidate();\n}", "CodeBleu_score": 74.42367130227652}]}
{"instance_id": "1d476b416b5a", "generation_result": [{"code": "public static void Load(){\n\t (_stateLock) {\nvar addresses = GetAddresses();\nvar overrides = GetOverrides();\n\nif (addresses!= null) {\nHTTPAddress = addresses[0];\nHTTPSAddress = addresses[1];\n}\n\nif (overrides!= null) {\nOverrides.AddRange(overrides);\n}\n\nIsProxyEnabled = (GetProxyKind() & ProxyKind.PROXY_TYPE_PROXY)!= 0;\nIsIgnoringLocalTraffic = (GetProxyKind() & ProxyKind.PROXY_TYPE_DIRECT) == 0;\n}\n}", "CodeBleu_score": 26.278492356713667}, {"code": "public static void Load(){\n\t (_stateLock) {\nstring addresses = GetAddresses();\nstring overrides = GetOverrides();\n\nif (!string.IsNullOrWhiteSpace(addresses)) {\nIsProxyEnabled = true;\n}\n\nif (!string.IsNullOrWhiteSpace(overrides)) {\nIsIgnoringLocalTraffic = true;\n}\n}\n}", "CodeBleu_score": 14.554744878335454}, {"code": "public static void Load(){\n\t (_stateLock) {\nstring addresses = GetAddresses();\nstring overrides = GetOverrides();\n\nIsProxyEnabled =!string.IsNullOrWhiteSpace(addresses);\n\nif (IsProxyEnabled) {\n_proxyKey.SetValue(\"ProxyEnable\", 1);\n} else {\n_proxyKey.SetValue(\"ProxyEnable\", 0);\n}\n}\n}", "CodeBleu_score": 19.86132294514239}]}
{"instance_id": "298075fa5494", "generation_result": [{"code": "private static void LoadOverrides(){\n\t proxyOverride = _proxyKey.GetValue(\"ProxyOverride\")?.ToString();\n\tif (string.IsNullOrWhiteSpace(proxyOverride)) {\n\t\treturn;\n\t}\n\tvar overrides = proxyOverride.Split(';');\n\tforeach (var override in overrides) {\n\t\tif (override.StartsWith(\"localhost\", StringComparison.OrdinalIgnoreCase)) {\n\t\t\tIsIgnoringLocalTraffic = true;\n\t\t}\n\t\telse if (!Overrides.Contains(override)) {\n\t\t\tOverrides.Add(override);\n\t\t}\n\t}\n}", "CodeBleu_score": 58.05895276694143}, {"code": "private static void LoadOverrides(){\n\t", "CodeBleu_score": 1.3814577611629388}, {"code": "private static void LoadOverrides(){\n\t", "CodeBleu_score": 1.3814577611629388}]}
{"instance_id": "c6c7ed2cfa51", "generation_result": [{"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\t", "CodeBleu_score": 1.1717521256739678}, {"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\t", "CodeBleu_score": 1.1717521256739678}, {"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\t", "CodeBleu_score": 1.1717521256739678}]}
{"instance_id": "6ed63f3b7a68", "generation_result": [{"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\teturn SendResponseAsync(response, content, HttpStatusCode.OK, \\\"OK\\\");\n}", "CodeBleu_score": 11.842194000545113}, {"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\teturn SendResponseAsync(response, content, \"OK\", \"OK\");\n}", "CodeBleu_score": 13.873468629713475}, {"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\teturn SendResponseAsync(response, content, HttpStatusCode.OK, \"OK\");\n}", "CodeBleu_score": 11.790650699079427}]}
{"instance_id": "32d978074585", "generation_result": [{"code": "private bool SecureTunnel(string host){\n\t\nvar cert = _certifier.GetCertificate(host);\nif (cert == null) return false;\n\n// Create a SslStream object with the client's network stream and the server's certificate\n// as the remote certificate collection.\n_secureStream = new SslStream(GetStream(), false,\n(sender, certificate, chain, errors) => {\n// If the certificate is a valid, signed certificate, return true.\nreturn true;\n}, null);\n\n// Authenticate as a server with the server's certificate.\n_secureStream.AuthenticateAsServer(cert, false, SslProtocols.Tls12, true);\nreturn true;\n}", "CodeBleu_score": 45.17629180193471}, {"code": "private bool SecureTunnel(string host){\n\t\nX509Certificate2 certificate = _certifier.GetCertificate(host);\nif (certificate == null) return false;\n\nvar parameters = new SslStreamSecurityParameters();\nparameters.Certificate = certificate;\nparameters.ServerCertificateValidationCallback = (sender, certificate, chain, errors) => true;\nparameters.EnabledSslProtocols = SslProtocols.Tls12;\n\n_secureStream = new SslStream(GetStream(), false, parameters.ServerCertificateValidationCallback, parameters.EnabledSslProtocols);\n_secureStream.AuthenticateAsServer(parameters.Certificate, false, parameters.EnabledSslProtocols, false);\nreturn true;\n}", "CodeBleu_score": 41.146881622848404}, {"code": "private bool SecureTunnel(string host){\n\t\n// Generate a certificate for the host using the Certifier instance.\nX509Certificate2 certificate = _certifier.GenerateCertificate(host);\n\n// Create a TCP client to connect to the host.\nTcpClient client = new TcpClient(host, 443);\n\n// Create a SslStream for secure communication with the host.\n_secureStream = new SslStream(client.GetStream(), false, new RemoteCertificateValidationCallback(ValidateServerCertificate), null);\n\n// Authenticate the SslStream as a server using the generated certificate.\n_secureStream.AuthenticateAsServer(certificate, false, SslProtocols.Tls12, false);\n\n// Enable the SslStream for asynchronous read and write operations.\n_secureStream.ReadTimeout = 1000;\n_secureStream.WriteTimeout = 1000;\n\n// Return true if the process succeeds.\nreturn true;\n}", "CodeBleu_score": 49.03521340587699}]}
{"instance_id": "67d773149e9b", "generation_result": [{"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\tif (response.ContentLength == 0) {\nresponse.Dispose();\nreturn null;\n}\n\nStream input = response.GetResponseStream();\nvar bufferSize = response.ContentLength < 4096? 4096 : response.ContentLength;\nreturn new StreamContent(input, bufferSize);\n}", "CodeBleu_score": 44.61289086924719}, {"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\t\tif (response.ContentLength == 0) {\n\t\tresponse.Dispose();\n\t\treturn null;\n\t}\n\n\tStream input = response.GetResponseStream();\n\tint bufferSize = (int)response.ContentLength;\n\tif (bufferSize == 0) {\n\t\tbufferSize = 4096;\n\t}\n\n\treturn new StreamContent(input, bufferSize);\n}", "CodeBleu_score": 47.32273581392998}, {"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\tif (response is HttpWebResponse httpResponse) {\nif (httpResponse.ContentLength == 0) {\nhttpResponse.Dispose();\nreturn null;\n}\n}\n\nvar stream = response.GetResponseStream();\n\nif (stream == null) {\nreturn null;\n}\n\nint bufferSize = (int)response.ContentLength;\nif (bufferSize == 0) {\nbufferSize = 4096;\n}\n\nreturn new StreamContent(stream, bufferSize);\n}", "CodeBleu_score": 40.031200114506056}]}
{"instance_id": "45d3c11325cf", "generation_result": [{"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\ttry {\n// \u83b7\u53d6\u6587\u672c\nvar path = ActivityConfigJsonPath.Text.Trim();\n\n// \u8def\u5f84\u4e3a\u7a7a\uff0c\u5219\u6253\u5f00\u6587\u4ef6\u5bf9\u8bdd\u6846\u9009\u62e9\u6587\u4ef6\nif (string.IsNullOrEmpty(path)) {\nvar dialog = new OpenFileDialog {\nFilter = \"JSON\u6587\u4ef6|*.json\",\nTitle = \"\u9009\u62e9ActivityConfig.json\u6587\u4ef6\",\nMultiselect = false,\nCheckFileExists = true\n};\n\nif (dialog.ShowDialog()!= DialogResult.OK) return;\n\npath = dialog.FileName;\n}\n\n// \u66f4\u65b0\u8def\u5f84\nActivityConfigJsonPath.Text = path;\n\n// \u52a0\u8f7d\u914d\u7f6e\nLoadActivityConfig(path);\n\n// \u663e\u793a\u6210\u529f\u6d88\u606f\nMessageBox.Show(\"ActivityConfig.json\u6587\u4ef6\u52a0\u8f7d\u6210\u529f\uff01\", \"\u6210\u529f\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n}\ncatch (Exception ex) {\nMessageBox.Show(ex.ToString(), \"\u9519\u8bef\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n}\n}", "CodeBleu_score": 55.45178034361281}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\ttry {\n// \u52a0\u8f7d\u6587\u4ef6\u8def\u5f84\nvar path = ActivityConfigJsonPath.Text.Trim();\nif (string.IsNullOrEmpty(path)) {\n// \u6253\u5f00\u6587\u4ef6\u5bf9\u8bdd\u6846\nvar dialog = new OpenFileDialog {\nFilter = \"JSON files (*.json)|*.json|All files (*.*)|*.*\",\nCheckFileExists = true,\nCheckPathExists = true\n};\nif (dialog.ShowDialog()!= DialogResult.OK) return;\npath = dialog.FileName;\n}\n\n// \u66f4\u65b0\u6587\u4ef6\u8def\u5f84\nActivityConfigJsonPath.Text = path;\nLoadActivityConfig(path);\nMessageBox.Show(Resources.Success, Resources.Success, MessageBoxButtons.OK, MessageBoxIcon.Information);\n}\ncatch (Exception ex) {\nMessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n}\n}", "CodeBleu_score": 61.33250613133947}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\tvar path = ActivityConfigJsonPath.Text.Trim();\nif (string.IsNullOrEmpty(path)) {\nvar dialog = new OpenFileDialog();\ndialog.Filter = \"JSON Files|*.json\";\ndialog.Title = \"Select Activity Configuration File\";\ndialog.Multiselect = false;\ndialog.CheckFileExists = true;\ndialog.CheckPathExists = true;\ndialog.InitialDirectory = Path.GetDirectoryName(Application.ExecutablePath);\nif (dialog.ShowDialog() == DialogResult.OK) {\npath = dialog.FileName;\nActivityConfigJsonPath.Text = path;\n}\n}\n\nif (string.IsNullOrEmpty(path))\nreturn;\n\ntry {\nLoadActivityConfig(path);\nMessageBox.Show(\"Activity configuration loaded successfully.\", Resources.Success, MessageBoxButtons.OK, MessageBoxIcon.Information);\n}\ncatch (Exception ex) {\nMessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n}\n}", "CodeBleu_score": 47.56707483053816}]}
{"instance_id": "f97d2ba1a807", "generation_result": [{"code": "private void LoadActivityConfig(string path){\n\t// \u53cd\u5e8f\u5217\u5316\nvar json = File.ReadAllText(path);\nActivityConfigItems = JsonConvert.DeserializeObject<List<ActivityConfigItem>>(json);\n\n// \u66f4\u65b0 ListActivityConfigItems \u63a7\u4ef6\nListActivityConfigItems.BeginUpdate();\nListActivityConfigItems.Items.Clear();\nListActivityConfigItems.Items.AddRange(ActivityConfigItems.ToArray());\nListActivityConfigItems.EndUpdate();\n}", "CodeBleu_score": 48.97192926770395}, {"code": "private void LoadActivityConfig(string path){\n\ttry {\nvar content = File.ReadAllText(path);\nvar items = JsonConvert.DeserializeObject<List<ActivityConfigItem>>(content);\nActivityConfigItems = items;\nListActivityConfigItems.BeginUpdate();\nListActivityConfigItems.Items.Clear();\nListActivityConfigItems.Items.AddRange(items.ToArray());\nListActivityConfigItems.EndUpdate();\n} catch (Exception ex) {\nMessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n}\n}", "CodeBleu_score": 37.90354996350189}, {"code": "private void LoadActivityConfig(string path){\n\ttry {\n// \u53cd\u5e8f\u5217\u5316\nActivityConfigItems = JsonConvert.DeserializeObject<List<ActivityConfigItem>>(File.ReadAllText(path));\n\n// \u5237\u65b0\u5217\u8868\nListActivityConfigItems.BeginUpdate();\nListActivityConfigItems.Items.Clear();\nListActivityConfigItems.Items.AddRange(ActivityConfigItems.ToArray());\nListActivityConfigItems.EndUpdate();\n}\ncatch (Exception ex) {\nMessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n}\n}", "CodeBleu_score": 52.51359734620682}]}
{"instance_id": "8531cab08f38", "generation_result": [{"code": "private void BtnSave_Click(object sender, EventArgs e){\n\try {\nvar path = ActivityConfigJsonPath.Text.Trim();\nif (path == string.Empty) {\nvar dialog = new SaveFileDialog {\nFileName = \"ActivityConfig.json\",\nFilter = \"ActivityConfig.Json (*.json)|*.json|All files (*.*)|*.*\",\n};\nvar result = dialog.ShowDialog();\nif (result == DialogResult.OK)\npath = ActivityConfigJsonPath.Text = dialog.FileName;\nelse\nreturn;\n}\n\n// Serialize and write to file\nFile.WriteAllText(path, JsonConvert.SerializeObject(ActivityConfigItems));\nMessageBox.Show(\"OK\", Resources.Tips, MessageBoxButtons.OK);\n}\ncatch (Exception ex) {\nMessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n}\n}", "CodeBleu_score": 69.8874614164512}, {"code": "private void BtnSave_Click(object sender, EventArgs e){\n\try {\nvar path = ActivityConfigJsonPath.Text.Trim();\nif (path == string.Empty) {\nvar dialog = new SaveFileDialog {\nFileName = \"ActivityConfig.json\",\nFilter = \"ActivityConfig.Json (*.json)|*.json|All files (*.*)|*.*\",\n};\nvar result = dialog.ShowDialog();\nif (result == DialogResult.OK)\npath = ActivityConfigJsonPath.Text = dialog.FileName;\nelse\nreturn;\n}\n\n// \u5e8f\u5217\u5316\nFile.WriteAllText(path, JsonConvert.SerializeObject(ActivityConfigItems, Formatting.Indented));\nMessageBox.Show(\"OK\", Resources.Tips, MessageBoxButtons.OK);\n}\ncatch (Exception ex) {\nMessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n}\n}", "CodeBleu_score": 74.61524644326595}, {"code": "private void BtnSave_Click(object sender, EventArgs e){\n\try {\nvar path = ActivityConfigJsonPath.Text.Trim();\nif (path == string.Empty) {\nvar dialog = new SaveFileDialog {\nFileName = \"ActivityConfig.json\",\nFilter = \"ActivityConfig.Json (*.json)|*.json|All files (*.*)|*.*\",\n};\nvar result = dialog.ShowDialog();\nif (result == DialogResult.OK)\npath = ActivityConfigJsonPath.Text = dialog.FileName;\nelse\nreturn;\n}\n\n// Serialize\nFile.WriteAllText(path, JsonConvert.SerializeObject(ActivityConfigItems));\nMessageBox.Show(\"OK\", Resources.Tips, MessageBoxButtons.OK);\n}\ncatch (Exception ex) {\nMessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n}\n}", "CodeBleu_score": 69.8874614164512}]}
{"instance_id": "424111434149", "generation_result": [{"code": "private void LoadAllActivity(){\n\tistActivityConfigItems.BeginUpdate();\nListActivityConfigItems.Items.Clear();\n\n// \u904d\u5386\u6bcf\u4e2a\u6d3b\u52a8\u7ec4\nforeach (var activityGroup in GameData.Activity) {\n// \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6d3b\u52a8\u7ec4\nvar group = new ListViewGroup(activityGroup.Key);\n\n// \u904d\u5386\u6bcf\u4e2a\u6d3b\u52a8\nforeach (var activity in activityGroup.Value) {\n// \u6dfb\u52a0\u6d3b\u52a8\ngroup.Items.Add(Convert(activity));\n}\n\n// \u6dfb\u52a0\u6d3b\u52a8\u7ec4\nListActivityConfigItems.Groups.Add(group);\n}\n\nListActivityConfigItems.EndUpdate();\n}", "CodeBleu_score": 42.19474771180089}, {"code": "private void LoadAllActivity(){\n\tistActivityConfigItems.BeginUpdate();\nListActivityConfigItems.Items.Clear();\n\n// \u904d\u5386\u6d3b\u52a8\u7ec4\nforeach (var group in GameData.Activity) {\n// \u521b\u5efa\u6d3b\u52a8\u7ec4\nvar groupItem = new ListViewGroup(group.Key, group.Value);\nListActivityConfigItems.Groups.Add(groupItem);\n\n// \u6dfb\u52a0\u6d3b\u52a8ID\u548c\u540d\u79f0\nforeach (var activityId in group.Value) {\nvar item = new ListViewItem(new[] {\nactivityId.ToString(),\nGameData.Activity[activityId],\n}, groupItem);\n}\n}\nListActivityConfigItems.EndUpdate();\n}", "CodeBleu_score": 36.36826926701225}, {"code": "private void LoadAllActivity(){\n\t/ \u7981\u6b62\u66f4\u65b0\nListActivityConfigItems.BeginUpdate();\n// \u6e05\u7a7a\nListActivityConfigItems.Items.Clear();\n// \u904d\u5386\nforeach (var activityGroup in GameData.Activity.GroupBy(x => x.Value.ActivityGroup)) {\n// \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6d3b\u52a8\u7ec4\nvar group = new ListViewGroup(activityGroup.Key, HorizontalAlignment.Left);\n// \u6dfb\u52a0\u6d3b\u52a8\nforeach (var activity in activityGroup) {\n// \u6dfb\u52a0\u6d3b\u52a8\nListActivityConfigItems.Items.Add(new ListViewItem(new[] {\nactivity.Key.ToString(),\nactivity.Value.ActivityName,\n\"-\",\n\"-\",\n}));\n}\n// \u6dfb\u52a0\u6d3b\u52a8\u7ec4\nListActivityConfigItems.Groups.Add(group);\n}\n// \u542f\u7528\u66f4\u65b0\nListActivityConfigItems.EndUpdate();\n}", "CodeBleu_score": 41.681044900519716}]}
{"instance_id": "51c5d7f71cb3", "generation_result": [{"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\try {\nif (ListAllActivity.SelectedItems.Count == 0)\nreturn;\n\nvar item = ListAllActivity.SelectedItems[0];\nNUDActivityId.Text = item.SubItems[0].Text;\n}\ncatch (Exception ex) {\nMessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n}\n}", "CodeBleu_score": 70.8147056182294}, {"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\try {\nif (ListAllActivity.SelectedItems.Count == 0)\nreturn;\n\nNUDActivityId.Value = Convert.ToInt32(ListAllActivity.SelectedItems[0].Text);\n} catch (Exception ex) {\nMessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n}\n}", "CodeBleu_score": 72.77176729264123}, {"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\tf (ListAllActivity.SelectedItems.Count == 0)\nreturn;\n\nvar selectedItem = ListAllActivity.SelectedItems[0];\nNUDActivityId.Value = int.Parse(selectedItem.Text);\n}", "CodeBleu_score": 37.12633889911792}]}
{"instance_id": "8bed5c7884dc", "generation_result": [{"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\ttry {\n// \u83b7\u53d6\u6587\u4ef6\u8def\u5f84\nvar path = TxtDropJsonPath.Text;\nif (string.IsNullOrEmpty(path)) {\n// \u6253\u5f00\u6587\u4ef6\u9009\u62e9\u5bf9\u8bdd\u6846\nvar dialog = new OpenFileDialog {\nFilter = \"JSON (*.json)|*.json|\u6240\u6709\u6587\u4ef6 (*.*)|*.*\",\nTitle = \"\u9009\u62e9\u4e00\u4e2a JSON \u6587\u4ef6\",\nMultiselect = false\n};\nif (dialog.ShowDialog() == DialogResult.OK) {\npath = dialog.FileName;\n}\n}\nif (!string.IsNullOrEmpty(path) && File.Exists(path)) {\n// \u52a0\u8f7d JSON \u6587\u4ef6\nLoadBanners(path);\n// \u663e\u793a\u6210\u529f\u6d88\u606f\nMessageBox.Show(\"\u52a0\u8f7d\u6210\u529f\", Resources.Success, MessageBoxButtons.OK, MessageBoxIcon.Information);\n}\n}\ncatch (Exception ex) {\nMessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n}\n}", "CodeBleu_score": 49.94238967488159}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\ttry {\n// \u52a0\u8f7d\u6587\u4ef6\u8def\u5f84\nvar path = TxtDropJsonPath.Text;\nif (string.IsNullOrEmpty(path)) {\n// \u6253\u5f00\u6587\u4ef6\u5bf9\u8bdd\u6846\nvar dialog = new OpenFileDialog();\ndialog.Filter = \"JSON\u6587\u4ef6|*.json\";\ndialog.Title = \"\u9009\u62e9\u8981\u52a0\u8f7d\u7684JSON\u6587\u4ef6\";\ndialog.InitialDirectory = Path.GetDirectoryName(path);\nif (dialog.ShowDialog()!= DialogResult.OK)\nreturn;\npath = dialog.FileName;\n}\n// \u66f4\u65b0\u6587\u4ef6\u8def\u5f84\nTxtDropJsonPath.Text = path;\n// \u52a0\u8f7d\u6389\u843d\u6c60\nLoadBanners(path);\n// \u663e\u793a\u6210\u529f\u6d88\u606f\nMessageBox.Show(\"\u6210\u529f\u52a0\u8f7dJSON\u6587\u4ef6\", \"\u6210\u529f\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n}\ncatch (Exception ex) {\n// \u663e\u793a\u9519\u8bef\u6d88\u606f\nMessageBox.Show(ex.ToString(), \"\u9519\u8bef\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n}\n}", "CodeBleu_score": 48.05212600603645}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\ttry {\n// Retrieve the file path from the text box.\nvar path = TxtDropJsonPath.Text;\n\n// Check if the path is empty.\nif (string.IsNullOrEmpty(path)) {\n// Open a file dialog to select a JSON file.\nvar dialog = new OpenFileDialog {\nFilter = \"JSON files (*.json)|*.json\",\nCheckFileExists = true,\nCheckPathExists = true,\nTitle = \"Select a JSON file\",\nMultiselect = false\n};\n\nif (dialog.ShowDialog()!= DialogResult.OK)\nreturn;\n\n// Update the text box with the selected file path.\npath = dialog.FileName;\nTxtDropJsonPath.Text = path;\n}\n\n// Attempt to deserialize and load the banners from the specified file path.\nLoadBanners(path);\n\n// Show a success message.\nMessageBox.Show(\"Successfully loaded banners from the specified file.\", \"Success\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n}\ncatch (Exception ex) {\n// Display an error message with the exception details.\nMessageBox.Show(ex.ToString(), \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n}\n}", "CodeBleu_score": 52.779723749023745}]}
{"instance_id": "0e39a56d211b", "generation_result": [{"code": "private void ShowDropList(List<DropData> dropList){\n\t\n// \u5f00\u59cb\u66f4\u65b0\u5217\u8868\nListDrop.BeginUpdate();\n\n// \u6e05\u7a7a\u5217\u8868\nListDrop.Items.Clear();\n\n// \u68c0\u67e5\u5217\u8868\u662f\u5426\u5305\u542b\u5143\u7d20\nif (dropList.Count > 0) {\n\n// \u6dfb\u52a0\u5217\u8868\u5143\u7d20\nforeach (var dropData in dropList)\nListDrop.Items.Add(dropData.ToString());\n\n// \u8bbe\u7f6e\u7b2c\u4e00\u9879\u4e3a\u9009\u4e2d\u9879\nListDrop.SelectedIndex = 0;\n}\n\n// \u7ed3\u675f\u66f4\u65b0\u5217\u8868\nListDrop.EndUpdate();\n\n}", "CodeBleu_score": 56.456565213085085}, {"code": "private void ShowDropList(List<DropData> dropList){\n\t", "CodeBleu_score": 2.817738648739861}, {"code": "private void ShowDropList(List<DropData> dropList){\n\t\n// \u5f00\u59cb\u66f4\u65b0\u5217\u8868\nListDrop.BeginUpdate();\n\n// \u6e05\u7a7a\u5217\u8868\nListDrop.Items.Clear();\n\n// \u68c0\u67e5\u5217\u8868\u662f\u5426\u5305\u542b\u5143\u7d20\nif (dropList.Count > 0) {\n\n// \u6dfb\u52a0\u5217\u8868\u9879\nforeach (var drop in dropList)\nListDrop.Items.Add(drop.ToString());\n\n// \u8bbe\u7f6e\u5217\u8868\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e3a\u9009\u4e2d\u9879\nListDrop.SelectedIndex = 0;\n}\n\n// \u7ed3\u675f\u66f4\u65b0\u5217\u8868\nListDrop.EndUpdate();\n}", "CodeBleu_score": 55.77181575946116}]}
{"instance_id": "60fd5605c44e", "generation_result": [{"code": "private void RemoveDrop(DropData data){\n\tListDropData.BeginUpdate();\nListDropData.Items.Clear();\nif (SelectedDropList.Count > 0) {\nListDropData.Items.AddRange(SelectedDropList.Select(it => it.ToString()).ToArray());\nListDropData.SelectedIndex = 0;\n}\nListDropData.EndUpdate();\n}", "CodeBleu_score": 19.987683044425232}, {"code": "private void RemoveDrop(DropData data){\n\tif (SelectedDropList.Contains(data))\nSelectedDropList.Remove(data);\n\nShowDropList(SelectedDropList);\n}", "CodeBleu_score": 12.809958087888687}, {"code": "private void RemoveDrop(DropData data){\n\tif (ListDropData.SelectedIndex == -1) return;\n\nvar dropList = SelectedDropList;\nvar index = dropList.IndexOf(data);\nif (index == -1) return;\n\ndropList.RemoveAt(index);\n\nShowDropList(dropList);\n}", "CodeBleu_score": 16.22855565452993}]}
{"instance_id": "475581af77bf", "generation_result": [{"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\togger.I(TAG, \"FormMain_FormClosed enter\");\n\n// \u904d\u5386\u6bcf\u4e00\u4e2a\u9875\u9762\u4fdd\u5b58\nforeach (var page in Pages.Values) {\nLogger.I(TAG, $\"{page.Name} OnClosed enter\");\npage.OnClosed();\nLogger.I(TAG, $\"{page.Name} OnClosed completed\");\n}\n\n// \u4fdd\u5b58\u8bbe\u7f6e\nSettings.Default.MainFormLocation = Location;\nSettings.Default.MainFormSize = Size;\nSettings.Default.NavContainerSplitterDistance = NavContainer.SplitterDistance;\nSettings.Default.WindowOpacity = (int)(Opacity * 100);\nSettings.Default.AutoCopy = ChkAutoCopy.Checked;\nSettings.Default.Save();\nLogger.I(TAG, \"FormMain_FormClosed completed\");\n}", "CodeBleu_score": 72.27880027229065}, {"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\togger.I(TAG, \"FormMain_FormClosed enter\");\n\n// \u904d\u5386\u6bcf\u4e00\u4e2a\u9875\u9762\uff0c\u5173\u95ed\u9875\u9762\nforeach (var page in Pages.Values) {\nLogger.I(TAG, $\"{page.Name} OnClosed enter\");\npage.OnClosed();\nLogger.I(TAG, $\"{page.Name} OnClosed completed\");\n}\n\n// \u4fdd\u5b58\u8bbe\u7f6e\nSaveSettings();\n\nLogger.I(TAG, \"FormMain_FormClosed completed\");\n}", "CodeBleu_score": 81.42548479574316}, {"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\togger.I(TAG, \"FormMain_FormClosed enter\");\nforeach (var page in Pages.Values) {\nLogger.I(TAG, $\"{page.Name} OnClosed enter\");\npage.OnClosed();\nLogger.I(TAG, $\"{page.Name} OnClosed completed\");\n}\n\n// \u4fdd\u5b58\u7a97\u53e3\u4f4d\u7f6e\nvar location = Location;\nSettings.Default.MainFormLocation = location;\nLogger.I(TAG, $\"Save window location: {location}\");\n\n// \u4fdd\u5b58\u7a97\u53e3\u5927\u5c0f\nSettings.Default.MainFormSize = Size;\nLogger.I(TAG, $\"Save window size: {Size}\");\n\n// \u4fdd\u5b58\u5bfc\u822a\u5bb9\u5668\u95f4\u9694\u4f4d\u7f6e\nSettings.Default.NavContainerSplitterDistance = NavContainer.SplitterDistance;\nLogger.I(TAG, $\"Save NavContainer SplitterDistance: {NavContainer.SplitterDistance}\");\n\n// \u4fdd\u5b58\u7a97\u53e3\u4e0d\u900f\u660e\u5ea6\nSettings.Default.WindowOpacity = (int)(Opacity * 100);\nLogger.I(TAG, $\"Save window opacity: {Settings.Default.WindowOpacity}\");\n\n// \u4fdd\u5b58\u81ea\u52a8\u590d\u5236\u9009\u9879\u72b6\u6001\nSettings.Default.AutoCopy = ChkAutoCopy.Checked;\nLogger.I(TAG, $\"Save AutoCopy: {Settings.Default.AutoCopy}\");\n\n// \u4fdd\u5b58\u8bbe\u7f6e\nSettings.Default.Save();\nLogger.I(TAG, \"FormMain_FormClosed completed\");\n}", "CodeBleu_score": 69.77734467646202}]}
{"instance_id": "afd99ce2de2b", "generation_result": [{"code": " private void SaveSettings(){\n\tLogger.I(TAG, \"SaveSettings enter\");\n try {\n // \u4fdd\u5b58\u5bfc\u822a\u5bb9\u5668\u7684\u5206\u5272\u8ddd\u79bb\n Settings.Default.NavContainerSplitterDistance = NavContainer.SplitterDistance;\n\n // \u4fdd\u5b58\u7a97\u53e3\u7684\u4f4d\u7f6e\u548c\u5927\u5c0f\n if (WindowState == FormWindowState.Normal) {\n Settings.Default.MainFormLocation = Location;\n Settings.Default.MainFormSize = Size;\n }\n\n // \u4fdd\u5b58\u7a97\u53e3\u7684\u4e0d\u900f\u660e\u5ea6\n Settings.Default.WindowOpacity = (int)Math.Round(Opacity * 100);\n\n // \u4fdd\u5b58\u81ea\u52a8\u590d\u5236\u9009\u9879\u72b6\u6001\n Settings.Default.AutoCopy = ChkAutoCopy.Checked;\n\n // \u4fdd\u5b58\u8bbe\u7f6e\n Settings.Default.Save();\n } catch (Exception ex) {\n Logger.E(TAG, \"Saving settings error\", ex);\n MessageBox.Show(Resources.SettingSaveError + ex.Message, Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n }\n Logger.I(TAG, \"SaveSettings completed\");\n }", "CodeBleu_score": 56.00722404915174}, {"code": " private void SaveSettings(){\n\togger.I(TAG, \"SaveSettings enter\");\n\n// \u4fdd\u5b58\u5f53\u524d\u8bbe\u7f6e\ntry {\nif (Settings.Default.MainFormSize!= Size) {\nSettings.Default.MainFormSize = Size;\nLogger.I(TAG, \"Save window size: \" + Size);\n}\n\nif (Settings.Default.MainFormLocation!= Location) {\nSettings.Default.MainFormLocation = Location;\nLogger.I(TAG, \"Save window location: \" + Location);\n}\n\nif (Settings.Default.NavContainerSplitterDistance!= NavContainer.SplitterDistance) {\nSettings.Default.NavContainerSplitterDistance = NavContainer.SplitterDistance;\nLogger.I(TAG, \"Save NavContainer SplitterDistance: \" + NavContainer.SplitterDistance);\n}\n\nif (Settings.Default.WindowOpacity!= Opacity * 100) {\nSettings.Default.WindowOpacity = Opacity * 100;\nLogger.I(TAG, \"Save window opacity: \" + Opacity);\n}\n\nif (Settings.Default.AutoCopy!= ChkAutoCopy.Checked) {\nSettings.Default.AutoCopy = ChkAutoCopy.Checked;\nLogger.I(TAG, \"Save AutoCopy: \" + ChkAutoCopy.Checked);\n}\n\n// \u4fdd\u5b58\u8bbe\u7f6e\nSettings.Default.Save();\n}\ncatch (Exception ex) {\nLogger.E(TAG, \"Saving settings error\", ex);\nMessageBox.Show(Resources.SettingSaveError + ex.Message, Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n}\nLogger.I(TAG, \"SaveSettings completed\");\n}", "CodeBleu_score": 49.255806619477326}, {"code": " private void SaveSettings(){\n\togger.I(TAG, \"SaveSettings enter\");\ntry {\n// \u4fdd\u5b58\u5bfc\u822a\u5bb9\u5668\u7684\u5206\u9694\u6761\u4f4d\u7f6e\nSettings.Default.NavContainerSplitterDistance = NavContainer.SplitterDistance;\nLogger.I(TAG, $\"Save NavContainer SplitterDistance: {Settings.Default.NavContainerSplitterDistance}\");\n// \u4fdd\u5b58\u7a97\u4f53\u4f4d\u7f6e\nif (WindowState == FormWindowState.Normal) {\nSettings.Default.MainFormLocation = Location;\nLogger.I(TAG, $\"Save window location: {Location}\");\n}\n// \u4fdd\u5b58\u7a97\u4f53\u5927\u5c0f\nif (WindowState == FormWindowState.Normal) {\nSettings.Default.MainFormSize = Size;\nLogger.I(TAG, $\"Save window size: {Size}\");\n}\n// \u4fdd\u5b58\u7a97\u53e3\u7684\u4e0d\u900f\u660e\u5ea6\nSettings.Default.WindowOpacity = (int)(Opacity * 100);\nLogger.I(TAG, $\"Save window opacity: {Settings.Default.WindowOpacity}\");\n// \u6062\u590d\u81ea\u52a8\u590d\u5236\u9009\u9879\u72b6\u6001\nSettings.Default.AutoCopy = ChkAutoCopy.Checked;\nLogger.I(TAG, $\"Save AutoCopy: {Settings.Default.AutoCopy}\");\n// \u4fdd\u5b58\u5f53\u524d\u9875\u9762\u7684\u72b6\u6001\nforeach (var page in Pages.Values) {\nLogger.I(TAG, $\"{page.Name} SaveState enter\");\npage.SaveState();\nLogger.I(TAG, $\"{page.Name} SaveState completed\");\n}\n// \u4fdd\u5b58\u8bbe\u7f6e\nSettings.Default.Save();\n}\ncatch (Exception ex) {\nLogger.E(TAG, \"Save settings error\", ex);\nMessageBox.Show(Resources.SettingSaveError + ex.Message, Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n}\nLogger.I(TAG, \"SaveSettings completed\");\n}", "CodeBleu_score": 52.71389786934577}]}
{"instance_id": "597cf3c3cb9f", "generation_result": [{"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\tif (PageTabOrders!= null) {\nreturn PageTabOrders;\n}\n\nvar pageOrders = new List<Tuple<string, bool>>();\n\nif (Settings.Default.PageTabOrders == null) {\nforeach (var page in Pages.Values) {\npageOrders.Add(new Tuple<string, bool>(page.Name, true));\n}\n} else {\nforeach (var pageOrder in Settings.Default.PageTabOrders) {\nvar page = Pages[pageOrder.Item1];\nif (page!= null) {\npageOrders.Add(new Tuple<string, bool>(page.Name, pageOrder.Item2));\n}\n}\n}\n\nPageTabOrders = pageOrders;\nreturn pageOrders;\n}", "CodeBleu_score": 22.95601330749143}, {"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\tLogger.I(TAG, \"LoadPageTabOrders enter\");\nif (PageTabOrders!= null) return PageTabOrders;\n\nPageTabOrders = new List<Tuple<string, bool>>();\n\n// \u8bfb\u53d6\u9875\u9762\u9009\u9879\u5361\u987a\u5e8f\nvar order = Settings.Default.PageTabOrders;\nif (string.IsNullOrWhiteSpace(order))\n{\n// \u5982\u679c\u6ca1\u6709\u9875\u9762\u9009\u9879\u5361\u987a\u5e8f\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u9ed8\u8ba4\u7684\u9875\u9762\u9009\u9879\u5361\u987a\u5e8f\nforeach (var page in Pages.Values)\nPageTabOrders.Add(new Tuple<string, bool>(page.Name, true));\n}\nelse\n{\n// \u89e3\u6790\u9875\u9762\u9009\u9879\u5361\u987a\u5e8f\nvar orders = order.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);\nforeach (var order in orders)\n{\nvar items = order.Split(new[] { ':' }, StringSplitOptions.RemoveEmptyEntries);\nif (items.Length!= 2) continue;\n\nvar name = items[0];\nvar visible = items[1].Equals(\"1\", StringComparison.OrdinalIgnoreCase);\nPageTabOrders.Add(new Tuple<string, bool>(name, visible));\n}\n}\n\nLogger.I(TAG, \"LoadPageTabOrders completed\");\nreturn PageTabOrders;\n}", "CodeBleu_score": 39.09630321788815}, {"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\tLogger.I(TAG, \"LoadPageTabOrders enter\");\nif (PageTabOrders!= null)\nreturn PageTabOrders;\nPageTabOrders = new List<Tuple<string, bool>>(32);\ntry {\nvar orders = Settings.Default.PageTabOrders;\nif (orders == null) {\n// \u9ed8\u8ba4\u663e\u793a\u6240\u6709\u9875\u9762\nforeach (var page in Pages.Values)\nPageTabOrders.Add(new Tuple<string, bool>(page.Name, true));\n}\nelse {\nforeach (var order in orders.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries)) {\nvar parts = order.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);\nif (parts.Length == 2)\nPageTabOrders.Add(new Tuple<string, bool>(parts[0], parts[1] == \"1\"));\nelse\nLogger.W(TAG, $\"Invalid page tab order: {order}\"); } } } catch (Exception ex) { Logger.E(TAG, \"Load page tab orders failed.\", ex); } Logger.I(TAG, \"LoadPageTabOrders completed\"); return PageTabOrders; }", "CodeBleu_score": 36.05112939550389}]}
{"instance_id": "952af4cba521", "generation_result": [{"code": "public override void Save(FrameInfo info){\n\t\n//Log the length of the frame data and the current file stream length.\nLogWriter.Log(info.DataLength, \\\"The frame data length is \\\");\nLogWriter.Log(info.Data.Length, \\\"The file stream length is \\\");\n\n//Writes the frame data to the compression stream and flushes the stream.\nCompressionStream.Write(info.Data, 0, info.Data.Length);\nCompressionStream.Flush();\n\n//Sets the frame data to null.\ninfo.Data = null;\n\n//Adds the frame information to the project's frames collection.\nProject.Frames.Add(info);\n}", "CodeBleu_score": 49.77986821031819}, {"code": "public override void Save(FrameInfo info){\n\ttry {\nif (info.Data == null)\nreturn;\n\n//Log the length of the frame data and the current file stream length.\nLogWriter.Log(info.Data.Length, \\\"Frame length\\\");\nLogWriter.Log(info.Data.Length + FileStream.Position, \\\"File stream length\\\");\n\n//Write the frame data to the compression stream and flushes the stream.\nCompressionStream.Write(info.Data, 0, info.Data.Length);\nCompressionStream.Flush();\n\n//Set the frame data to null.\ninfo.Data = null;\n\n//Add the frame information to the project's frames collection.\nProject.Frames.Add(info);\n}\ncatch (Exception ex) {\nLogWriter.Log(ex, \\\"It was not possible to save the frame.\\\");\n\nMajorCrashHappened = true;\n\nif (IsAcceptingFrames)\nApplication.Current.Dispatcher.Invoke(() => OnError.Invoke(ex));\n}\n}", "CodeBleu_score": 44.63820854920906}, {"code": "public override void Save(FrameInfo info){\n\t\ntry {\n\n//Sets the frame details.\ninfo.Path = $\"{Project.FullPath}{FrameCount}.png\"; info.Delay = FrameRate.GetMilliseconds(); info.DataLength = info.Data.Length; info.Data = null; //Adds the frame info to the project's frames collection. Project.Frames.Add(info); //Writes the frame data to the compression stream and flushes the stream. CompressionStream.Write(info.Data, 0, info.DataLength); CompressionStream.Flush(); //Logs the frame data length and the current file stream length. LogWriter.Log(info.DataLength, \\\"Frame data length\\\"); LogWriter.Log(CompressionStream.Length, \\\"Current file stream length\\\"); } catch (Exception ex) { LogWriter.Log(ex, \\\"It was not possible to save the frame data to the compression stream.\\\"); } }", "CodeBleu_score": 25.26495783090153}]}
{"instance_id": "f9417f7056c0", "generation_result": [{"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\t", "CodeBleu_score": 8.160576900365587}, {"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\ttry {\n//Create the surface interface to map the texture for CPU access.\nvar surface = texture.QueryInterface<Surface>();\nvar map = surface.Map(0, MapFlags.WriteDiscard);\n\n//Get the cursor shape data and draw it to the texture.\nswitch (info.Type) {\ncase 0:\nDrawCursorShapeMonochrome(map, info, buffer, leftCut, topCut, cursorWidth, cursorHeight);\nbreak;\ncase 1:\nDrawCursorShapeMaskedColor(map, info, buffer, leftCut, topCut, cursorWidth, cursorHeight);\nbreak;\ncase 2:\nDrawCursorShapeColor(map, info, buffer, leftCut, topCut, cursorWidth, cursorHeight);\nbreak;\ndefault:\nbreak;\n}\n\n//Unmap the surface to release the CPU access.\nsurface.Unmap();\n}\ncatch (SharpDXException se) when (se.ResultCode.Code == SharpDX.DXGI.ResultCode.WaitTimeout.Result.Code) { }\ncatch (SharpDXException se) when (se.ResultCode.Code == SharpDX.DXGI.ResultCode.DeviceRemoved.Result.Code || se.ResultCode.Code == SharpDX.DXGI.ResultCode.DeviceReset.Result.Code) {\n//When the device gets lost or reset, the resources should be instantiated again.\nDisposeInternal();\nInitialize();\n}\ncatch (Exception ex) {\nLogWriter.Log(ex, \"It was not possible to finish rendering the cursor shape with DirectX.\");\n\nMajorCrashHappened = true;\nOnError.Invoke(ex);\n}\n}", "CodeBleu_score": 54.07092627973151}, {"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\ttry {\nvar surface = texture.QueryInterface<Surface>();\nvar mapped = surface.Map(0, MapFlags.Read | MapFlags.Write, MapMode.Read);\n\nif (info.Type == 0)\nMonochromeCursor(mapped, info, buffer, leftCut, topCut, cursorWidth, cursorHeight);\nelse if (info.Type == 1)\nColorCursor(mapped, info, buffer, leftCut, topCut, cursorWidth, cursorHeight);\nelse if (info.Type == 2)\nMaskedColorCursor(mapped, info, buffer, leftCut, topCut, cursorWidth, cursorHeight);\n\nsurface.Unmap(0);\n}\ncatch (SharpDXException se) when (se.ResultCode.Code == SharpDX.DXGI.ResultCode.WaitTimeout.Result.Code) {\n}\ncatch (SharpDXException se) when (se.ResultCode.Code == SharpDX.DXGI.ResultCode.DeviceRemoved.Result.Code || se.ResultCode.Code == SharpDX.DXGI.ResultCode.DeviceReset.Result.Code) {\n//When the device gets lost or reset, the resources should be instantiated again.\nDisposeInternal();\nInitialize();\n}\ncatch (Exception ex) {\nLogWriter.Log(ex, \"It was not possible to finish capturing the frame with DirectX.\");\n\nMajorCrashHappened = true;\nOnError.Invoke(ex);\n}\n}", "CodeBleu_score": 49.710545306141896}]}
{"instance_id": "3eb27d345e3c", "generation_result": [{"code": "public static IUploader CreateCloud(UploadDestinations service){\n\t\tswitch (service) {\n\t\tcase UploadDestinations.Imgur:\n\t\t\treturn new Imgur();\n\t\tcase UploadDestinations.Yandex:\n\t\t\treturn new YandexDisk();\n\t\tdefault:\n\t\t\tthrow new NotImplementedException();\n\t}\n}", "CodeBleu_score": 77.66140185208756}, {"code": "public static IUploader CreateCloud(UploadDestinations service){\n\t\nreturn new CloudFactory.CreateCloud(service);\n\n}", "CodeBleu_score": 4.984097265475793}, {"code": "public static IUploader CreateCloud(UploadDestinations service){\n\t\nswitch (service) {\n\ncase UploadDestinations.Imgur:\nreturn new ImgurUploader();\n\ncase UploadDestinations.Yandex:\nreturn new YandexDiskUploader();\n\ndefault:\nthrow new NotImplementedException();\n}\n\n}", "CodeBleu_score": 72.17433914424835}]}
{"instance_id": "8e8c5ad2d18c", "generation_result": [{"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\t", "CodeBleu_score": 13.85603704391254}, {"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\t", "CodeBleu_score": 13.85603704391254}, {"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\t", "CodeBleu_score": 13.85603704391254}]}
{"instance_id": "0c0b742bf9e6", "generation_result": [{"code": "internal virtual void StartCapture(){\n\tegion Variables\n\n/// <summary>\n/// The token in use to control the execution of the capture.\n\n/// </summary>\nprivate CancellationTokenSource _captureToken;\n\n/// <summary>\n/// Indicates when the user is mouse-clicking.\n\n/// </summary>\ninternal MouseButtons RecordClicked = MouseButtons.None;\n\n/// <summary>\n/// Deals with all screen capture methods.\n\n/// </summary>\ninternal ICapture Capture;\n\n/// <summary>\n/// Lists of pressed keys.\n\n/// </summary>\ninternal readonly List<IKeyGesture> KeyList = new();\n\n/// <summary>\n/// Timer responsible for the forced clean up of the objects in memory.\n\n/// </summary>\ninternal readonly System.Timers.Timer GarbageTimer = new System.Timers.Timer();\n\n#endregion\n\n//Starts the frame rate with either a fixed or variable delay and sets HasImpreciseCapture to false.\nif (UserSettings.All.CaptureFrequency!= CaptureFrequencies.PerSecond)\n{\nif (UserSettings.All.FixedFrameRate)\n{\nCapture.StartCapture(UserSettings.All.LatestFps, GetFixedDelay());\n}\nelse\n{\nCapture.StartCapture(UserSettings.All.LatestFps, GetTriggerDelay());\n}\n}\nelse\n{\nCapture.StartCapture(UserSettings.All.LatestFps, 1000 / UserSettings.All.LatestFps);\n}\n\n//If forced garbage collection is enabled in the user settings, it starts the garbage collection timer.\nif (UserSettings.All.ForceGarbageCollection)\n{\nGarbageTimer.Start();\n}\n\n//Locks the user settings, creates a cancellation token for the capture process, and runs the capture loop in a new task using the specified capture interval.\nlock (UserSettings.All)\n{\n_captureToken = new CancellationTokenSource();\n\nTask.Run(() => Capture.CaptureLoop(_captureToken.Token, GetCaptureInterval()));\n}\n}", "CodeBleu_score": 53.476226887705316}, {"code": "internal virtual void StartCapture(){\n\tIf the user settings are changed while the capture is running, the capture loop will be stopped and the garbage collection will be forced.\nif (UserSettings.All.CaptureFrequency!= _captureFrequency || UserSettings.All.CaptureDelay!= _captureDelay || UserSettings.All.FixedFrameRate!= _fixedFrameRate || UserSettings.All.TriggerDelay!= _triggerDelay) {\nStopCapture();\n}\n\nif (UserSettings.All.ForceGarbageCollection) {\nGarbageTimer.Start();\n}\n\nUserSettings.All.CaptureFrequency = _captureFrequency;\nUserSettings.All.CaptureDelay = _captureDelay;\nUserSettings.All.FixedFrameRate = _fixedFrameRate;\nUserSettings.All.TriggerDelay = _triggerDelay;\n\n_captureToken = new CancellationTokenSource();\n\n_captureLoopTask = Task.Run(() => CaptureLoop(_captureToken.Token), _captureToken.Token);\n\n}", "CodeBleu_score": 37.578489415278035}, {"code": "internal virtual void StartCapture(){\n\t", "CodeBleu_score": 2.1549930480169595}]}
{"instance_id": "8f8be335465f", "generation_result": [{"code": "private void CaptureWithCursor(int interval){\n\tstopwatch = new Stopwatch();\n\nwhile (!_captureToken.IsCancellationRequested) {\nstopwatch.Restart();\n\nvar cursor = Capture.GetCursor();\nvar frame = new Frame(cursor, _keyList, stopwatch.ElapsedMilliseconds);\n_keyList.Clear();\n\n//Capture the frame.\nCapture.CaptureFrame(frame);\n\n//Update the frame count.\nFrameRate.UpdateFrameCount();\n\n//Wait until the interval is reached.\nwhile (stopwatch.ElapsedMilliseconds < interval)\nThread.Sleep(1);\n\nstopwatch.Stop();\n}\n}", "CodeBleu_score": 42.97396986991937}, {"code": "private void CaptureWithCursor(int interval){\n\tstopwatch = new Stopwatch();\n\ntry {\nwhile (!_captureToken.IsCancellationRequested) {\nstopwatch.Restart();\n\n//Creates the frame with cursor data.\nvar frame = Capture.GetFrameWithCursor(KeyList);\n\n//Clears the key list.\nKeyList.Clear();\n\n//Captures the frame.\nCapture.CaptureFrame(frame);\n\n//Updates the frame count.\nFrameRate.UpdateFrameCount();\n\n//Waits for the interval to pass.\nwhile (stopwatch.ElapsedMilliseconds < interval)\nThread.Sleep(1);\n\nstopwatch.Stop();\n}\n}\ncatch (OperationCanceledException) { }\n}", "CodeBleu_score": 40.679753911491346}, {"code": "private void CaptureWithCursor(int interval){\n\t stopwatch = new Stopwatch();\n\nwhile (!_captureToken.IsCancellationRequested) {\nstopwatch.Restart();\n\nvar frame = Capture.GetFrame(Cursor.Position, KeyList);\n\nKeyList.Clear();\n\nCapture.CaptureFrame(frame);\n\nFrameRate.Update();\n\nif (stopwatch.ElapsedMilliseconds < interval) {\nThread.Sleep(1);\n}\n\nstopwatch.Stop();\n}\n\n}", "CodeBleu_score": 39.30662548617882}]}
{"instance_id": "8ad9c7b2a317", "generation_result": [{"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\t (UsingBorderImplementation) {\n// Revert to the Border implementation\nreturn base.ArrangeOverride(arrangeSize);\n}\n\nvar child = Child;\nif (child == null) return new Size();\n\n// Use the public Padding property if it's set\nvar padding = Padding;\nif (padding.Equals(new Thickness()))\npadding = DefaultPadding;\n\nvar childWidth = arrangeSize.Width;\nvar childHeight = arrangeSize.Height;\n\n// If there is an actual constraint, then reserve space for the chrome\nif (!double.IsInfinity(childWidth)) {\nchildWidth = Math.Max(0.0, childWidth - padding.Left - padding.Right);\n}\n\nif (!double.IsInfinity(childHeight)) {\nchildHeight = Math.Max(0.0, childHeight - padding.Top - padding.Bottom);\n}\n\nchild.Measure(new Size(childWidth, childHeight));\nvar desiredSize = child.DesiredSize;\n\n// Add on the reserved space for the chrome\nreturn new Size(desiredSize.Width + padding.Left + padding.Right, desiredSize.Height + padding.Top + padding.Bottom);\n}", "CodeBleu_score": 56.27614166095694}, {"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\t (UsingBorderImplementation) {\n// Revert to the Border implementation\nreturn base.ArrangeOverride(arrangeSize);\n}\n\nvar child = Child;\nif (child == null)\nreturn arrangeSize;\n\n// Use the public Padding property if it's set\nvar padding = Padding;\nif (padding.Equals(new Thickness()))\npadding = DefaultPadding;\n\nvar childWidth = arrangeSize.Width;\nvar childHeight = arrangeSize.Height;\n\n// If there is an actual constraint, then reserve space for the chrome\nif (!double.IsInfinity(childWidth)) {\nchildWidth = Math.Max(0.0, childWidth - padding.Left - padding.Right);\n}\n\nif (!double.IsInfinity(childHeight)) {\nchildHeight = Math.Max(0.0, childHeight - padding.Top - padding.Bottom);\n}\n\nchild.Measure(new Size(childWidth, childHeight));\nvar desiredSize = child.DesiredSize;\n\n// Add on the reserved space for the chrome\nreturn new Size(desiredSize.Width + padding.Left + padding.Right, desiredSize.Height + padding.Top + padding.Bottom);\n}", "CodeBleu_score": 57.30640841248208}, {"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\t (UsingBorderImplementation) {\n// Revert to the Border implementation\nreturn base.ArrangeOverride(arrangeSize);\n}\n\nvar child = Child;\nif (child == null) return new Size();\n\n// Use the public Padding property if it's set\nvar padding = Padding;\nif (padding.Equals(new Thickness()))\npadding = DefaultPadding;\n\nvar childWidth = arrangeSize.Width;\nvar childHeight = arrangeSize.Height;\n\n// If there is an actual constraint, then reserve space for the chrome\nif (!double.IsInfinity(childWidth)) {\nchildWidth = Math.Max(0.0, childWidth - padding.Left - padding.Right);\n}\n\nif (!double.IsInfinity(childHeight)) {\nchildHeight = Math.Max(0.0, childHeight - padding.Top - padding.Bottom);\n}\n\nchild.Arrange(new Rect(padding.Left, padding.Top, childWidth, childHeight));\nreturn arrangeSize;\n}", "CodeBleu_score": 59.461555905615334}]}
{"instance_id": "719b23bc4229", "generation_result": [{"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\tbase.OnLostFocus(e);\nif (!UpdateOnInput) {\nif (string.IsNullOrEmpty(Text) ||!IsTextAllowed(Text)) {\nValue = DefaultValueIfEmpty;\nreturn;\n}\n}\n_ignore = true;\nValue = Math.Round(Convert.ToDecimal(Text, CultureInfo.CurrentCulture) / Scale, Decimals);\n_ignore = false;\nif (UpdateOnInput) {\nText = Value == EmptyIfValue? \"\" : string.Format(CultureInfo.CurrentCulture, _format, Value);\n}\n}", "CodeBleu_score": 59.72399651900702}, {"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\tbase.OnLostFocus(e);\n\nif (!UpdateOnInput) {\nif (string.IsNullOrEmpty(Text) ||!IsTextAllowed(Text)) {\nValue = DefaultValueIfEmpty;\nreturn;\n}\n}\n\n_ignore = true;\n\nValue = Math.Round(Convert.ToDecimal(Text, CultureInfo.CurrentCulture) / Scale, Decimals);\n\n_ignore = false;\n\nif (UpdateOnInput) {\nText = Value == EmptyIfValue? \\\"\\\" : string.Format(CultureInfo.CurrentCulture, _format, Value);\n}\n}", "CodeBleu_score": 54.37539091013802}, {"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\tbase.OnLostFocus(e);\n\nif (!UpdateOnInput) {\nif (string.IsNullOrEmpty(Text) ||!IsTextAllowed(Text)) {\nValue = DefaultValueIfEmpty;\nreturn;\n}\n}\n\n_ignore = true;\n\nValue = Math.Round(Convert.ToDecimal(Text, CultureInfo.CurrentCulture) / Scale, Decimals);\n\n_ignore = false;\n\nif (UpdateOnInput) {\nText = Value == EmptyIfValue? \"\" : string.Format(CultureInfo.CurrentCulture, _format, Value * Scale);\n}\n}", "CodeBleu_score": 55.32771099234761}]}
{"instance_id": "4bdfdcf8e5ea", "generation_result": [{"code": "protected override void OnKeyDown(KeyEventArgs e){\n\tif (e.Key == Key.Enter || e.Key == Key.Return) {\ne.Handled = true;\nFocusManager.SetFocusedElement(this, null);\n}\n\nbase.OnKeyDown(e);\n}", "CodeBleu_score": 59.62582554534321}, {"code": "protected override void OnKeyDown(KeyEventArgs e){\n\tif (e.Key == Key.Enter || e.Key == Key.Return) {\ne.Handled = true;\nFocusManager.SetFocusedElement(this, FocusManager.GetFocusScope(this));\n}\n\nbase.OnKeyDown(e);\n}", "CodeBleu_score": 60.65750523262303}, {"code": "protected override void OnKeyDown(KeyEventArgs e){\n\tif (e.Key == Key.Enter || e.Key == Key.Return) {\ne.Handled = true;\n\nif (Keyboard.FocusedElement is UIElement element)\nelement.MoveFocus(new TraversalRequest(FocusNavigationDirection.Next));\n}\n\nbase.OnKeyDown(e);\n}", "CodeBleu_score": 69.91975162056502}]}
{"instance_id": "e9d822d22392", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tif (e.LeftButton == MouseButtonState.Pressed) {\nif (IsDrawing) {\nif (DrawingMode == DrawingModes.Select) {\nif ((Keyboard.Modifiers & ModifierKeys.Control) == 0) {\nRemoveAdorners();\n_selectedShapes.Clear();\n}\n\n//When the user clicks exactly on top of a shape, it will be selected.\nvar hitTest = _mainCanvas.Children.OfType<Shape>().Where(w => w.Tag == null).FirstOrDefault(f => f.RenderedGeometry.FillContains(e.GetPosition(f)));\n\nif (hitTest!= null) {\nSelectShape(hitTest);\n} else {\n//Update the selection rectangle.\nSelection.X = Math.Min(Selection.X, _startPoint.X);\nSelection.Y = Math.Min(Selection.Y, _startPoint.Y);\nSelection.Width = Math.Max(Selection.Width, _startPoint.X - Selection.X);\nSelection.Height = Math.Max(Selection.Height, _startPoint.Y - Selection.Y);\n}\n} else {\n//Calculate the render region and shape orientation.\nCalculateOrientation(e.GetPosition(this), e.GetPosition(this));\n\n//Render the shape.\nRenderShape();\n}\n}\n} else {\nif (DrawingMode == DrawingModes.Select) {\n//Update the selection rectangle.\nSelection.X = Math.Min(Selection.X, _startPoint.X);\nSelection.Y = Math.Min(Selection.Y, _startPoint.Y);\nSelection.Width = Math.Max(Selection.Width, _startPoint.X - Selection.X);\nSelection.Height = Math.Max(Selection.Height, _startPoint.Y - Selection.Y);\n}\n}\n}", "CodeBleu_score": 39.4390245772022}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tif (e.LeftButton == MouseButtonState.Pressed) {\nif (IsDrawing) {\nif (DrawingMode == DrawingModes.Select) {\nif ((Keyboard.Modifiers & ModifierKeys.Control) == 0) {\n_selectedShapes.Clear();\n}\n\n//When the user clicks exactly on top of a shape, it will be selected.\nvar hitTest = _mainCanvas.Children.OfType<Shape>().Where(w => w.Tag == null).FirstOrDefault(f => f.RenderedGeometry.FillContains(e.GetPosition(f)));\n\nif (hitTest!= null) {\nSelectShape(hitTest);\n}\nelse {\n//Starts drawing selection retangle.\nSelection = new Rect(_startPoint, new Size(0, 0));\n}\n}\nelse {\n//If the user is drawing a shape, it will be rendered on the canvas.\nif (_currentShape!= null) {\nCalculateOrientation(_startPoint, e.GetPosition(this));\nRenderShape();\n}\n}\n}\n}\nelse {\nif (DrawingMode == DrawingModes.Select) {\n//If the user is selecting shapes, it will be updated based on the mouse coordinates.\nSelection = new Rect(_startPoint, e.GetPosition(this) - _startPoint);\n}\n}\n}", "CodeBleu_score": 26.443346583717776}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tif (e.LeftButton == MouseButtonState.Pressed) {\nif (IsMouseCaptured) {\nswitch (DrawingMode) {\ncase DrawingModes.Select:\n{\nif ((Keyboard.Modifiers & ModifierKeys.Control) == 0) {\nRemoveAllAdorners();\n_selectedShapes.Clear();\n}\n\n//When the user clicks exactly on top of a shape, it will be selected.\nvar hitTest = _mainCanvas.Children.OfType<Shape>().Where(w => w.Tag == null).FirstOrDefault(f => f.RenderedGeometry.FillContains(e.GetPosition(f)));\n\nif (hitTest!= null) {\nSelectShape(hitTest);\n}\nelse {\n//Starts drawing selection retangle.\nSelection = new Rect(_startPoint, new Size(0, 0));\n}\n\nbreak;\n}\ncase DrawingModes.Shape:\n{\nRemoveAdorners();\n\nRenderRegion = new Rect(_startPoint, new Size(0, 0));\nIsDrawing = true;\n\nCalculateOrientation(_startPoint, e.GetPosition(this));\nRenderShape();\n}\nbreak;\n}\n}\n}\n\ne.Handled = true;\nbase.OnMouseMove(e);\n}", "CodeBleu_score": 26.99815274171088}]}
{"instance_id": "b853f670928a", "generation_result": [{"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\tif (!(sender is Thumb)) return;\n\ne.Handled = true;\n\n//Change the size by the amount the user drags the cursor.\nvar width = Math.Max(_adornedElement.DesiredSize.Width + e.HorizontalChange, 10);\nvar height = Math.Max(_adornedElement.DesiredSize.Height + e.VerticalChange, 10);\nvar left = Canvas.GetLeft(_adornedElement);\nvar top = Canvas.GetTop(_adornedElement);\n\nif (left + width > _parent.ActualWidth)\nwidth = _parent.ActualWidth - left;\n\nif (top + height > _parent.ActualHeight)\nheight = _parent.ActualHeight - top;\n\nRaiseManipulatedEvent(width - _adornedElement.Width, height - _adornedElement.Height, 0, 0);\n\n_adornedElement.Height = height;\n_adornedElement.Width = width;\n\nAfterManipulation();\n}", "CodeBleu_score": 77.72698308354315}, {"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\tif (!(sender is Thumb)) return;\n\ne.Handled = true;\n\n//Change the size by the amount the user drags the cursor.\nvar width = Math.Max(_adornedElement.DesiredSize.Width + e.HorizontalChange, 10);\nvar height = Math.Max(_adornedElement.DesiredSize.Height + e.VerticalChange, 10);\nvar left = Canvas.GetLeft(_adornedElement);\nvar top = Canvas.GetTop(_adornedElement);\n\nif (left + width > _parent.ActualWidth)\nwidth = _parent.ActualWidth - left;\n\nif (top + height > _parent.ActualHeight)\nheight = _parent.ActualHeight - top;\n\nRaiseManipulatedEvent(width - _adornedElement.Width, height - _adornedElement.Height, 0, 0);\n\n_adornedElement.Height = height;\n_adornedElement.Width = width;\n\nAfterManipulation();\n}", "CodeBleu_score": 77.72698308354315}, {"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\tif (!(sender is Thumb)) return;\n\ne.Handled = true;\n\n//Change the size by the amount the user drags the cursor.\nvar width = Math.Max(_adornedElement.DesiredSize.Width + e.HorizontalChange, 10);\nvar height = Math.Max(_adornedElement.DesiredSize.Height + e.VerticalChange, 10);\nvar left = Canvas.GetLeft(_adornedElement);\nvar top = Canvas.GetTop(_adornedElement);\n\nif (left + width > _parent.ActualWidth)\nwidth = _parent.ActualWidth - left;\n\nif (top + height > _parent.ActualHeight)\nheight = _parent.ActualHeight - top;\n\nRaiseManipulatedEvent(width - _adornedElement.Width, height - _adornedElement.Height, 0, 0);\n\n_adornedElement.Height = height;\n_adornedElement.Width = width;\n\nAfterManipulation();\n}", "CodeBleu_score": 77.72698308354315}]}
{"instance_id": "4f79040b5f53", "generation_result": [{"code": "public ComboBoxesViewModel(){\n\t", "CodeBleu_score": 0.9488908299902385}, {"code": "public ComboBoxesViewModel(){\n\t", "CodeBleu_score": 0.9488908299902385}, {"code": "public ComboBoxesViewModel(){\n\t", "CodeBleu_score": 0.9488908299902385}]}
{"instance_id": "ca40ae89e1a2", "generation_result": [{"code": "private async Task RunDialog() {\n\t\n// Create the dialog\nvar dialog = new SampleDialog { DataContext = new SampleDialogViewModel() };\n\n// Show the dialog\nvar result = await DialogHost.Show(dialog, \"RootDialog\",\n\n// When the dialog is closed, log the result\n(sender, eventArgs) => {\n\n// The dialog's result is the CommandParameter of the CloseDialogAction\nDebug.WriteLine($\"Dialog closed with result: {eventArgs.Parameter}\"); }); }", "CodeBleu_score": 30.444611321479513}, {"code": "private async Task RunDialog() {\n\t", "CodeBleu_score": 1.9179669118849947}, {"code": "private async Task RunDialog() {\n\tvar dialog = new SampleDialog();\ndialog.DataContext = new SampleDialogViewModel();\n\nawait DialogHost.Show(dialog, \"RootDialog\", (sender, args) => {\nif (args.Parameter is string text) {\nConsole.WriteLine($\"Dialog closed with text: {text}\"); } }); }", "CodeBleu_score": 20.547408913608443}]}
{"instance_id": "d82f32ed6e43", "generation_result": [{"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\tvar paletteHelper = new PaletteHelper();\nvar theme = paletteHelper.GetTheme();\nmodificationAction(theme);\npaletteHelper.SetTheme(theme);\n}", "CodeBleu_score": 62.437808012830054}, {"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\tvar paletteHelper = new PaletteHelper();\nvar theme = paletteHelper.GetTheme();\nif (modificationAction!= null) {\nmodificationAction(theme);\n}\npaletteHelper.SetTheme(theme);\n}", "CodeBleu_score": 61.92638838431683}, {"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\tvar paletteHelper = new PaletteHelper();\nvar theme = paletteHelper.GetTheme();\nif (theme!= null)\nmodificationAction(theme);\npaletteHelper.SetTheme(theme);\n}", "CodeBleu_score": 63.18862399649354}]}
{"instance_id": "8cf8182d763e", "generation_result": [{"code": "private object? CreateContent(){\n\tr content = Activator.CreateInstance(_contentType, _dataContext);\nif (_dataContext!= null && content is FrameworkElement element)\nelement.DataContext = _dataContext;\nreturn content;\n}", "CodeBleu_score": 66.54391224455182}, {"code": "private object? CreateContent(){\n\tr content = Activator.CreateInstance(_contentType, _dataContext);\nif (content is FrameworkElement frameworkElement) {\nframeworkElement.DataContext = _dataContext;\n}\nreturn content;\n}", "CodeBleu_score": 45.83737761342358}, {"code": "private object? CreateContent(){\n\t (_contentType == null) return null;\nvar content = Activator.CreateInstance(_contentType, _dataContext);\nif (content is FrameworkElement frameworkElement)\nframeworkElement.DataContext = _dataContext;\nreturn content;\n}", "CodeBleu_score": 42.20538084296397}]}
{"instance_id": "96cb26c3eacc", "generation_result": [{"code": "private void AcceptSample4Dialog(object? _){\n\tle4Content = new SampleProgressDialog();\n\n//lets run a fake operation for 3 seconds then close this baby.\nTask.Delay(TimeSpan.FromSeconds(3))\n.ContinueWith((t, _) => IsSample4DialogOpen = false, null,\nTaskScheduler.FromCurrentSynchronizationContext());\n}", "CodeBleu_score": 89.65123815114838}, {"code": "private void AcceptSample4Dialog(object? _){\n\tle4Content = new SampleProgressDialog();\nTask.Delay(TimeSpan.FromSeconds(3))\n.ContinueWith((t, _) => IsSample4DialogOpen = false, null,\nTaskScheduler.FromCurrentSynchronizationContext());\n}", "CodeBleu_score": 89.65123815114838}, {"code": "private void AcceptSample4Dialog(object? _){\n\tle4Content = new SampleProgressDialog();\n\nTask.Delay(TimeSpan.FromSeconds(3))\n.ContinueWith((t, _) => IsSample4DialogOpen = false, null,\nTaskScheduler.FromCurrentSynchronizationContext());\n}", "CodeBleu_score": 89.65123815114838}]}
{"instance_id": "7afa49e4a449", "generation_result": [{"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\tforeach (var trigger in _deviceTriggers) {\nif (trigger.Device.Id == device.Id &&\ntrigger.Option == option) {\nTriggered?.Invoke(trigger);\n}\n}\n}", "CodeBleu_score": 65.97620983910554}, {"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\tforeach (var trigger in _deviceTriggers) {\nif (trigger.Device.Id == device.Id &&\ntrigger.Option == option) {\nTriggered?.Invoke(trigger);\n}\n}\n}", "CodeBleu_score": 65.97620983910554}, {"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\tforeach (var trigger in _deviceTriggers) {\nif (trigger.Device.Id == device.Id &&\ntrigger.Option == option) {\nTriggered?.Invoke(trigger);\n}\n}\n}", "CodeBleu_score": 65.97620983910554}]}
{"instance_id": "50c38fc69dac", "generation_result": [{"code": "private void LoadAndRegister(){\n\ttriggerManager.Clear();\n\nvar actions = Settings.Get(c_actionsSettingKey, new EarTrumpetAction[] { });\n\nforeach (var action in actions) {\nforeach (var trigger in action.Triggers) {\n_triggerManager.Register(trigger);\n}\n}\n}", "CodeBleu_score": 42.791780651546034}, {"code": "private void LoadAndRegister(){\n\t_triggerManager.Clear();\n\n_actions = Settings.Get(c_actionsSettingKey, new EarTrumpetAction[] { });\n\nforeach (var action in _actions)\n{\nforeach (var trigger in action.Triggers)\n{\n_triggerManager.RegisterTrigger(trigger);\n}\n}\n}", "CodeBleu_score": 70.87162386696113}, {"code": "private void LoadAndRegister(){\n\ttriggerManager.Clear();\n_actions = Settings.Get(c_actionsSettingKey, new EarTrumpetAction[] { });\nforeach (var action in _actions) {\n_triggerManager.Register(action.Triggers);\n}\n}", "CodeBleu_score": 58.49663601378076}]}
{"instance_id": "ab8051e72909", "generation_result": [{"code": "private void OnTriggered(BaseTrigger trigger){\n\toreach (var action in Actions) {\nif (action.Triggers.Contains(trigger)) {\nif (action.Conditions.All(c => c.IsMet(LocalVariables))) {\nTriggerAction(action);\n}\n}\n}\n}", "CodeBleu_score": 58.446781296380244}, {"code": "private void OnTriggered(BaseTrigger trigger){\n\tar action = Actions.FirstOrDefault(a => a.Triggers.Any(t => t.Equals(trigger)));\nif (action!= null) {\nTriggerAction(action);\n}\n}", "CodeBleu_score": 33.39659493364388}, {"code": "private void OnTriggered(BaseTrigger trigger){\n\t", "CodeBleu_score": 2.0059368891280465}]}
{"instance_id": "2f85d28001cf", "generation_result": [{"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\tlet scope_graph = &mut self.scope_graph.borrow_mut();\nlet mut poll_vars = scope_graph.global_scope().data.iter().filter_map(|(var_name, var_val)| {\nif let VarValue::Script(script_var) = var_val {\nif script_var.is_poll() {\nSome(script_var)\n} else {\nNone\n}\n} else {\nNone\n}\n}).collect::<Vec<_>>();\n\nfor script_var in &mut poll_vars {\nlet var_name = &script_var.name;\nlet expr = &script_var.run_while_expr;\nlet result = scope_graph.evaluate_expression(expr, &scope_graph.global_scope());\nif let Ok(result) = result {\nif result.as_bool().unwrap_or(false) {\nself.script_var_handler.add_variable(script_var);\n} else {\nself.script_var_handler.remove_variable(script_var);\n}\n} else {\nerror_handling_ctx::print_error(result);\n}\n}\n}", "CodeBleu_score": 25.955104780288423}, {"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\tlet mut script_vars = self.scope_graph.borrow_mut().get_script_vars_mentioning(name).collect::<Vec<_>>();\nscript_vars.sort_by_key(|var| var.name.clone());\n\nlet mut new_script_vars = Vec::new();\nfor var in script_vars {\nlet mut new_var = var.clone();\nlet mut new_value = var.value.clone();\nlet mut new_run_while_expression = var.run_while_expression.clone();\n\nif let Some(run_while_expression) = &mut new_run_while_expression {\nmatch self.scope_graph.borrow_mut().evaluate_expression(&new_value, &run_while_expression) {\nOk(value) => {\nnew_value = value;\nnew_var.value = value;\n},\nErr(err) => {\nerror_handling_ctx::print_error(err);\n},\n}\n}\n\nif new_var.value!= new_value {\nnew_var.value = new_value;\nnew_script_vars.push(new_var);\n}\n}\n\nself.script_var_handler.add_vars(new_script_vars);\n}", "CodeBleu_score": 40.793099241395595}, {"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\t", "CodeBleu_score": 3.866313172019029}]}
{"instance_id": "56f67ae91214", "generation_result": [{"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\tlet window = self.open_windows.remove(instance_id).ok_or_else(|| anyhow!(\\\"Window not found\\\"))?;\nlet scope_graph = self.scope_graph.borrow();\nlet scope_graph.remove_window_scope(window.id);\nself.script_var_handler.stop_for_window(window.id);\n\nlet unused_global_vars = scope_graph.currently_unused_globals();\nfor var in unused_global_vars {\nself.script_var_handler.stop_for_variable(var);\n}\n\nlet mut args = self.window_args.lock().unwrap();\nargs.remove(instance_id);\nOk(())\n}", "CodeBleu_score": 37.16407182433416}, {"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\t", "CodeBleu_score": 14.586088025188115}, {"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\tlet window = self.open_windows.remove(instance_id).ok_or_else(|| anyhow!(\\\"Window not found\\\"))?;\nlet scope_graph = &mut *self.scope_graph.borrow_mut();\nlet scope_index = scope_graph.get_scope_index(instance_id).ok_or_else(|| anyhow!(\\\"Scope not found\\\"))?;\nlet scope = scope_graph.get_scope_mut(scope_index).ok_or_else(|| anyhow!(\\\"Scope not found\\\"))?;\nscope.abort_close_timer();\nscope.close_window(window);\nlet used_globals_names = scope_graph.currently_used_globals();\nscope_graph.remove_unused_globals(&used_globals_names);\nself.script_var_handler.stop_for_variable(instance_id.into());\nself.eww_config.remove_window(instance_id);\nOk(())\n}", "CodeBleu_score": 52.87154075136192}]}
{"instance_id": "a496c83ce944", "generation_result": [{"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\tlog::info!(\\\"Reloading eww configuration\\\");\n\n// stop all script-vars\nlet old_script_var_handler = std::mem::replace(&mut self.script_var_handler, ScriptVarHandler::new());\n\n// wait for old script-var handler to terminate\nlet old_script_var_handler_terminated = old_script_var_handler.join();\n\n// log new config\nlog::info!(\\\"New configuration:\\\");\nlog::info!(\\\"    {} windows\\\", config.windows.len());\nlog::info!(\\\"    {} widgets\\\", config.widget_definitions.len());\nlog::info!(\\\"    {} script-vars\\\", config.script_vars.len());\n\n// clear scope graph\nself.scope_graph.borrow_mut().clear();\n\n// get all open and failed window IDs\nlet open_window_ids: Vec<String> = self.open_windows.keys().map(|k| k.to_string()).collect();\nlet failed_window_ids: Vec<String> = self.failed_windows.keys().map(|k| k.to_string()).collect();\n\n// get initial args for all open windows\nlet initial_args: HashMap<String, WindowArguments> = open_window_ids\n.iter()\n.map(|instance_id| {\nlet args = self.instance_id_to_args.get(instance_id).cloned().unwrap();\n(instance_id.clone(), args)\n})\n.collect();\n\n// reopen all windows\nfor (instance_id, args) in initial_args {\nself.open_window(&args)?;\n}\n\n// reopen all failed windows\nfor instance_id in failed_window_ids {\nself.open_window(&self.instance_id_to_args[&instance_id])?;\n}\n\n// replace old script-var handler with new one\nself.script_var_handler = old_script_var_handler;\n\n// return result of old script-var handler\nold_script_var_handler_terminated\n}", "CodeBleu_score": 54.793543142787996}, {"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\t", "CodeBleu_score": 10.07331619203318}, {"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\tlog::info!(\\\"Reloading configuration\\\");\n\n// stop all script variables\nself.script_var_handler.stop_all();\n\n// replace script var handler with new one\nlet old_script_var_handler = self.script_var_handler.replace(ScriptVarHandler::new());\n\n// wait for old script var handler to terminate\nlet old_script_var_handler_thread = old_script_var_handler.thread.take().unwrap();\nlet old_script_var_handler_thread = old_script_var_handler_thread.join().unwrap();\n\nlog::info!(\\\"Reloaded configuration\\\");\nlog::info!(\\\"Old script var handler thread terminated\\\");\n\nself.eww_config = config;\n\n// clear scope graph\nself.scope_graph.borrow_mut().clear();\n\n// get all open windows\nlet open_windows = self.open_windows.keys().cloned().collect();\n\n// get all failed windows\nlet failed_windows = self.failed_windows.keys().cloned().collect();\n\n// close all failed windows\nfor instance_id in failed_windows {\nself.close_window(instance_id)?;\n}\n\n// close all open windows\nfor instance_id in open_windows {\nself.close_window(instance_id)?;\n}\n\n// get all open windows' arguments\nlet open_windows_args = self.instance_id_to_args.clone();\n\n// open all windows again\nfor (instance_id, window_args) in open_windows_args {\nself.open_window(window_args)?;\n}\n\nOk(())\n}", "CodeBleu_score": 54.796157273503034}]}
{"instance_id": "939eb758c6a2", "generation_result": [{"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\t", "CodeBleu_score": 8.294229199741606}, {"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\t", "CodeBleu_score": 8.294229199741606}, {"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\t", "CodeBleu_score": 8.294229199741606}]}
{"instance_id": "4a881d16b9af", "generation_result": [{"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\tlet display = gdk::Display::get_default();\nlet monitors = display.get_monitors();\nlet monitors_len = monitors.len();\n\nlet mut monitor_id = 0;\n\nmatch identifier {\nSome(identifier) => {\nfor i in 0..monitors_len {\nlet monitor = monitors[i];\nif monitor.get_identifier() == identifier {\nmonitor_id = i;\nbreak;\n}\n}\nif monitor_id == 0 {\nlet mut monitor_list = String::new();\nfor i in 0..monitors_len {\nlet monitor = monitors[i];\nmonitor_list.push_str(&format!(\\\"{}\n\\\", monitor.get_identifier()));\n}\nreturn Err(anyhow!(\\\"Monitor not found: {}\\\", identifier));\n}\n},\nNone => {\nfor i in 0..monitors_len {\nif monitors[i].is_primary() {\nmonitor_id = i;\nbreak;\n}\n}\nif monitor_id == 0 {\nreturn Err(anyhow!(\\\"No primary monitor found\\\"));\n}\n},\n}\n\nlet monitor = monitors[monitor_id];\nlet monitor_geometry = monitor.get_geometry();\n\nOk(Monitor {\nidentifier: monitor.get_identifier(),\ngeometry: monitor_geometry,\n})\n}", "CodeBleu_score": 20.16099360915914}, {"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\t", "CodeBleu_score": 1.6300433087373216}, {"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\tlet display = gdk::Display::get_default().ok_or_else(|| anyhow!(\\\"Could not find a default display\\\"))?;\nlet monitors = display.get_monitors();\n\nlet monitor = match identifier {\n    Some(identifier) => {\n        let monitor_id = identifier.to_string();\n        monitors\n           .iter()\n           .find(|monitor| monitor.get_name().map(|name| name.to_string()) == Some(monitor_id))\n           .ok_or_else(|| anyhow!(\\\"Could not find monitor {}\\\", monitor_id))?\n    },\n    None => monitors.get(0).ok_or_else(|| anyhow!(\\\"Could not find a primary monitor\\\"))?\n};\n\nlet geometry = monitor.get_geometry();\nlet name = monitor.get_name().ok_or_else(|| anyhow!(\\\"Could not find a monitor name\\\"))?;\nlet scale_factor = monitor.get_scale_factor();\n\nOk(Monitor {\n    name: name.to_string(),\n    geometry: geometry,\n    scale_factor: scale_factor,\n})\n}", "CodeBleu_score": 24.543089903141276}]}
{"instance_id": "0d4bd8476c3b", "generation_result": [{"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\t", "CodeBleu_score": 11.441865677098976}, {"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\tlet screen_width = screen_rect.width();\nlet screen_height = screen_rect.height();\n\nlet x_offset = match geometry.anchor_point.x {\nAnchorPoint::Left => 0,\nAnchorPoint::Center => screen_width / 2,\nAnchorPoint::Right => screen_width,\n};\n\nlet y_offset = match geometry.anchor_point.y {\nAnchorPoint::Top => 0,\nAnchorPoint::Center => screen_height / 2,\nAnchorPoint::Bottom => screen_height,\n};\n\nlet x = match geometry.anchor_point.horizontal_alignment {\nHorizontalAlignment::Left => screen_rect.x(),\nHorizontalAlignment::Center => screen_rect.x() + x_offset,\nHorizontalAlignment::Right => screen_rect.x() + screen_width - x_offset,\n};\n\nlet y = match geometry.anchor_point.vertical_alignment {\nVerticalAlignment::Top => screen_rect.y(),\nVerticalAlignment::Center => screen_rect.y() + y_offset,\nVerticalAlignment::Bottom => screen_rect.y() + screen_height - y_offset,\n};\n\ngdk::Rectangle::new(x, y, geometry.size.width, geometry.size.height)\n}", "CodeBleu_score": 47.78111777600578}, {"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\tlet (x, y) = match geometry.anchor {\nAnchor::TopLeft => (0, 0),\nAnchor::TopRight => (screen_rect.width() - geometry.size.width, 0),\nAnchor::BottomLeft => (0, screen_rect.height() - geometry.size.height),\nAnchor::BottomRight => (screen_rect.width() - geometry.size.width, screen_rect.height() - geometry.size.height),\nAnchor::Center => {\nlet x = (screen_rect.width() - geometry.size.width) / 2;\nlet y = (screen_rect.height() - geometry.size.height) / 2;\n(x, y)\n}\n};\n\nlet x = x + screen_rect.x();\nlet y = y + screen_rect.y();\nlet width = geometry.size.width;\nlet height = geometry.size.height;\n\ngdk::Rectangle::new(x, y, width, height)\n}", "CodeBleu_score": 59.455818083697395}]}
{"instance_id": "588081b260d0", "generation_result": [{"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\t", "CodeBleu_score": 12.877215628915417}, {"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\t", "CodeBleu_score": 12.877215628915417}, {"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\t", "CodeBleu_score": 12.877215628915417}]}
{"instance_id": "bbe996b92d6e", "generation_result": [{"code": "pub fn print_error(err: anyhow::Error){\n\t", "CodeBleu_score": 2.6318301474326278}, {"code": "pub fn print_error(err: anyhow::Error){\n\t", "CodeBleu_score": 2.6318301474326278}, {"code": "pub fn print_error(err: anyhow::Error){\n\t", "CodeBleu_score": 2.6318301474326278}]}
{"instance_id": "d5e9c17aaa4d", "generation_result": [{"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\t", "CodeBleu_score": 12.666546576762801}, {"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\t\n    let listener = tokio::net::UnixListener::bind(socket_path)?;\n\n    log::info!(\\\"Listening for connections on {}\\\", socket_path.as_ref());\n\n    loop {\n        let (stream, peer_addr) = listener.accept().await.context(\\\"Failed to accept connection\\\")?;\n\n        log::info!(\\\"Accepted connection from {}\\\", peer_addr);\n\n        let evt_send = evt_send.clone();\n\n        tokio::spawn(async move {\n            handle_connection(stream, evt_send).await;\n        });\n\n    }\n}", "CodeBleu_score": 42.06951682609515}, {"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\t\n    let listener = tokio::net::UnixListener::bind(socket_path)?;\n\n    log::info!(\\\"Server initialized at {}\\\", socket_path.as_ref());\n\n    loop {\n        let (stream, addr) = listener.accept().await.context(\\\"Failed to accept connection\\\")?;\n\n        log::info!(\\\"Connection from {}\\\", addr);\n\n        let evt_send = evt_send.clone();\n\n        tokio::spawn(async move {\n            if let Err(err) = handle_connection(stream, evt_send).await {\n                log::error!(\\\"Error handling connection: {}\\\", err);\n            }\n        });\n\n    }\n}", "CodeBleu_score": 49.334567142771036}]}
{"instance_id": "4af744d13f02", "generation_result": [{"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\t", "CodeBleu_score": 11.710432998417224}, {"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\t\nlet mut read = stream.try_clone()?;\nlet mut write = stream.try_clone()?;\n\nlog::info!(\\\"Received IPC connection from client\\\");\n\nlet mut buf = [0u8; 1024];\nlet action = read.read(&mut buf).await?;\nlog::info!(\\\"Received IPC command: {:?}\\\", String::from_utf8_lossy(&buf));\n\nlet cmd = app::DaemonCommand::from_bytes(&buf)?;\nlet result = evt_send.send(cmd).await;\nmatch result {\nOk(_) => {},\nErr(e) => {\nlog::error!(\\\"Failed to send IPC command to daemon: {:?}\\\", e);\nreturn Err(anyhow::anyhow!(\\\"Failed to send IPC command to daemon: {:?}\\\").context(e));\n},\n}\n\nlet mut response = [0u8; 1024];\nlet timeout = Duration::from_millis(100);\nlet result = read.read_timeout(&mut response, timeout).await;\nmatch result {\nOk(n) => {\nif n == 0 {\nlog::info!(\\\"IPC connection closed by client\\\");\n} else {\nlog::info!(\\\"Received IPC response: {:?}\\\", String::from_utf8_lossy(&response[..n]));\n}\n},\nErr(e) => {\nlog::error!(\\\"Failed to read IPC response: {:?}\\\", e);\nreturn Err(anyhow::anyhow!(\\\"Failed to read IPC response: {:?}\\\").context(e));\n},\n}\n\nwrite.shutdown().await?;\n\nOk(())\n}", "CodeBleu_score": 48.36349725769206}, {"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\t\n    let mut read = stream.try_clone()?;\n    let mut write = stream.try_clone()?;\n    let mut buf = [0; 1024];\n    let mut read_buf = [0; 1024];\n    loop {\n        let action = read.read(&mut buf).await?\n           .try_into()\n           .context(\\\"failed to read action\\\")?\n           .to_string();\n        log::info!(\\\"Received action: {:?}\\\", action);\n        let daemon_command = app::DaemonCommand::from_string(action);\n        let result = evt_send.send(daemon_command).await;\n        if let Err(e) = result {\n            return Err(e.into());\n        }\n        if let Ok(response) = read.read(&mut read_buf).await {\n            let response = String::from_utf8_lossy(&read_buf[..response]);\n            log::info!(\\\"Received response: {:?}\\\", response);\n            write.write_all(response.as_bytes()).await?\n               .try_into()\n               .context(\\\"failed to write response\\\")?\n               .to_string();\n        }\n        write.shutdown().await?\n           .try_into()\n           .context(\\\"failed to shutdown write stream\\\")?\n           .to_string();\n        break;\n    }\n    Ok(())\n}", "CodeBleu_score": 50.06941091337791}]}
{"instance_id": "8475be269e09", "generation_result": [{"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\t", "CodeBleu_score": 5.912362980437175}, {"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\tlet mut size_buf = [0u8; 4];\nstream_read.read_exact(&mut size_buf).await?;\nlet size = u32::from_be_bytes(size_buf);\nlet mut buf = Vec::with_capacity(size as usize);\nstream_read.read_to_end(&mut buf).await?;\nlet action: opts::ActionWithServer = bincode::deserialize(&buf)?;\nOk(action)\n}", "CodeBleu_score": 32.71702838468222}, {"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\tlet mut size_buffer = [0u8; 4];\nstream_read.read_exact(&mut size_buffer).await?;\nlet size = u32::from_be_bytes(size_buffer);\nlet mut message_buffer = vec![0u8; size as usize];\nstream_read.read_exact(&mut message_buffer).await?;\nlet message: opts::ActionWithServer = bincode::deserialize(&message_buffer)?;\nOk(message)\n}", "CodeBleu_score": 32.814381976995996}]}
{"instance_id": "5f7bde448666", "generation_result": [{"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\t", "CodeBleu_score": 15.223857157819614}, {"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\t", "CodeBleu_score": 15.223857157819614}, {"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\t", "CodeBleu_score": 15.223857157819614}]}
{"instance_id": "d5149dd17f39", "generation_result": [{"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\tmatch format {\n\"svg\" => Ok(DocExportFormat::Svg),\n\"xopp\" => Ok(DocExportFormat::Xopp),\n\"pdf\" => Ok(DocExportFormat::Pdf),\n_ => Err(anyhow::anyhow!(\\\"Unsupported file extension \\\\\\\"\" + format + \"\\\\\\\".\\\"))\n}\n}", "CodeBleu_score": 62.69747056621999}, {"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\tmatch format {\n    \"svg\" => Ok(DocExportFormat::Svg),\n    \"xopp\" => Ok(DocExportFormat::Xopp),\n    \"pdf\" => Ok(DocExportFormat::Pdf),\n    _ => Err(anyhow::anyhow!(\n        \\\"Unsupported format: \\\\\"{}\\\\\". Supported formats are: \\\\\"svg\\\\\", \\\\\"xopp\\\\\", \\\\\"pdf\\\\\".\\\"\n    )),\n}\n}", "CodeBleu_score": 71.25004890066894}, {"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\tmatch format {\n\\\"svg\\\" => Ok(DocExportFormat::Svg),\n\\\"xopp\\\" => Ok(DocExportFormat::Xopp),\n\\\"pdf\\\" => Ok(DocExportFormat::Pdf),\n_ => Err(anyhow::anyhow!(\\\"Unsupported file extension: \\\\\\\"\"{format}\\\\\\\"\\\")),\n}\n}", "CodeBleu_score": 52.89668674061798}]}
{"instance_id": "47c741fa1cf0", "generation_result": [{"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\tt path_str = path.to_str().unwrap();\nlet ext = path_str.rsplit('.').next().unwrap();\nif ext!= expected_ext {\nreturn Err(anyhow::anyhow!(\n\\\"Expected file with extension \\\\\\\".{}\\\\\\\" but found \\\\\\\".{}\\\\\\\"\\\",\n\nexpected_ext,\next\n));\n}\nOk(())\n}", "CodeBleu_score": 25.49899242134422}, {"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\t!path.is_file() {\nreturn Err(anyhow::anyhow!(\n\"Expected file, found directory \\\\\"{}\\\\\"\",\npath.display()\n));\n}\nlet ext = path.extension().map(|s| s.to_string_lossy());\nif ext!= Some(expected_ext.to_string()) {\nreturn Err(anyhow::anyhow!(\n\"Expected file with extension \\\\\"{}\\\\\"\",\nexpected_ext\n));\n}\nOk(())\n}", "CodeBleu_score": 37.046597183401815}, {"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\tf!path.is_file() {\n\t\treturn Err(anyhow::anyhow!(\n\t\t\t\"Expected file, found directory \\\\\"{}\\\\\"\",\n\t\t\tpath.display()\n\t\t));\n\t}\n\tlet file_ext = path.extension().unwrap_or_default().to_str().unwrap_or_default();\n\tif file_ext!= expected_ext {\n\t\treturn Err(anyhow::anyhow!(\n\t\t\t\"Expected file with extension \\\\\"{}\\\\\"\",\n\t\t\texpected_ext\n\t\t));\n\t}\n\tOk(())\n}", "CodeBleu_score": 41.01729489944805}]}
{"instance_id": "cde4fa8386cb", "generation_result": [{"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\t\tALabel::init(id, config);\n\tthread = std::thread(&CpuUsage::run, this);\n}", "CodeBleu_score": 40.221678674698424}, {"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\t\tALabel::init(config);\n\tthis->id = id;\n\tthis->format = config[\"format\"].asString();\n\tthis->interval = config[\"interval\"].asFloat();\n\n\tthis->thread = std::thread(&CpuUsage::update, this);\n}", "CodeBleu_score": 43.94895665718367}, {"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\t\tALabel::init(config);\n\tthis->id = id;\n\tthis->config = config;\n\tthis->thread = [this]() {\n\t\twhile (true) {\n\t\t\temit();\n\t\t\tstd::this_thread::sleep_for(std::chrono::milliseconds(interval));\n\t\t}\n\t};\n\tthis->thread.detach();\n}", "CodeBleu_score": 35.64835832368668}]}
{"instance_id": "da58b589c5e8", "generation_result": [{"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\tmp(interface, zdwl_ipc_manager_v2_interface.name) == 0) {\n\t\tstatus_manager_ = zdwl_ipc_manager_v2_bind(registry, name, version);\n\t} else if (strcmp(interface, wl_seat_interface.name) == 0) {\n\t\tseat_ = wl_seat_bind(registry, name, 1);\n\t}\n}", "CodeBleu_score": 25.54903937071078}, {"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\tBUG\n    spdlog::debug(\"handle_global: name: {}, interface: {}, version: {}\", name, interface, version);\n#endif\n    if (strcmp(interface, zdwl_ipc_manager_v2_interface.name) == 0) {\n        if (version >= ZDWL_IPC_MANAGER_V2_VERSION) {\n            status_manager_ = static_cast<zdwl_ipc_manager_v2 *>(wl_registry_bind(registry, name, &zdwl_ipc_manager_v2_interface, ZDWL_IPC_MANAGER_V2_VERSION));\n            spdlog::debug(\"handle_global: status_manager_ bound\");\n        }\n    } else if (strcmp(interface, wl_seat_interface.name) == 0) {\n        if (version >= 1) {\n            seat_ = static_cast<wl_seat *>(wl_registry_bind(registry, name, &wl_seat_interface, 1));\n            spdlog::debug(\"handle_global: seat bound\");\n        }\n    }\n}", "CodeBleu_score": 52.239169874774426}, {"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\ted(USE_DWL)\n  if (strcmp(interface, zdwl_ipc_manager_v2_interface.name) == 0) {\n    zdwl_ipc_manager_v2_manager = static_cast<zdwl_ipc_manager_v2 *>(wl_registry_bind(registry, name, &zdwl_ipc_manager_v2_interface, 1));\n    zdwl_ipc_manager_v2_manager->output_status(zdwl_ipc_manager_v2_manager, &output_status_listener_impl);\n    zdwl_ipc_manager_v2_manager->output_focus(zdwl_ipc_manager_v2_manager, &output_focus_listener_impl);\n  } else if (strcmp(interface, wl_seat_interface.name) == 0) {\n    if (version >= 1) {\n      seat = static_cast<wl_seat *>(wl_registry_bind(registry, name, &wl_seat_interface, 1));\n    }\n  }\n#endif\n}", "CodeBleu_score": 51.310738025604806}]}
{"instance_id": "22230d419d69", "generation_result": [{"code": "void IPC::parseIPC(const std::string& ev){\n\tstd::string request = ev.substr(0, ev.find_first_of('>'));\n\tstd::unique_lock<std::mutex> lock(callbacksMutex);\n\tfor (auto& callback : callbacks) {\n\t\tif (callback.request == request) {\n\t\t\tcallback.handler->onEvent(ev);\n\t\t}\n\t}\n}", "CodeBleu_score": 61.37783355382924}, {"code": "void IPC::parseIPC(const std::string& ev){\n\tstd::string requestType = ev.substr(0, ev.find_first_of('>'));\n\tstd::lock_guard<std::mutex> lock(callbackMutex);\n\tfor (auto& callback : callbacks) {\n\t\tif (requestType == callback.first) {\n\t\t\tcallback.second->onEvent(ev);\n\t\t}\n\t}\n}", "CodeBleu_score": 53.34051047221463}, {"code": "void IPC::parseIPC(const std::string& ev){\n\tspdlog::debug(\\\"IPC::parseIPC({})\\\", ev);\n\tstd::string event = ev.substr(0, ev.find_first_of('>'));\n\tstd::lock_guard<std::mutex> lock(callbackMutex_);\n\tfor (auto& callback : callbacks_) {\n\t\tif (callback->onEvent(event)) {\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 54.038505540655905}]}
{"instance_id": "5d195fbd6417", "generation_result": [{"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\tf (ev_handler == nullptr) {\nreturn;\n}\n\nstd::unique_lock lock(callbackMutex_);\nfor (auto it = callbacks_.begin(); it!= callbacks_.end(); ++it) {\nif (it->second == ev_handler) {\ncallbacks_.erase(it);\nbreak;\n}\n}\n}", "CodeBleu_score": 59.61248175295574}, {"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\tif (ev_handler == nullptr) {\n\t\treturn;\n\t}\n\n\tstd::unique_lock lock(callbackMutex_);\n\tfor (auto it = callbacks_.begin(); it!= callbacks_.end();) {\n\t\tif (it->second == ev_handler) {\n\t\t\tit = callbacks_.erase(it);\n\t\t} else {\n\t\t\t++it;\n\t\t}\n\t}\n}", "CodeBleu_score": 68.65245818320041}, {"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\tf (ev_handler == nullptr) {\nreturn;\n}\nstd::unique_lock lock(callbackMutex_);\nfor (auto& [eventname, handler] : callbacks_) {\nif (handler == ev_handler) {\ncallbacks_.erase(eventname);\n}\n}\n}", "CodeBleu_score": 50.46230477264806}]}
{"instance_id": "2bb5ef8b3cf3", "generation_result": [{"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\t\tif (config.isMember(\"always-on\") && config[\"always-on\"].isBool()) {\n\t\talways_on_ = config[\"always-on\"].asBool();\n\t}\n\tif (config.isMember(\"default-submap\") && config[\"default-submap\"].isString()) {\n\t\tdefault_submap_ = config[\"default-submap\"].asString();\n\t}\n}", "CodeBleu_score": 40.25130044251029}, {"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\t\talways_on_ = config[\"always-on\"].isBool()? config[\"always-on\"].asBool() : false;\n\tdefault_submap_ = config[\"default-submap\"].isString()? config[\"default-submap\"].asString() : \"default\";\n}", "CodeBleu_score": 34.535861814637485}, {"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\t\talways_on_ = config.get(\"always-on\", false).asBool();\n\tdefault_submap_ = config.get(\"default-submap\", \"default\").asString();\n\tsubmap_ = default_submap_;\n\tlabel_.get_style_context()->add_class(submap_);\n}", "CodeBleu_score": 46.64255014222588}]}
{"instance_id": "c60aa24ddc6f", "generation_result": [{"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\t (std::holds_alternative<Repr>(m_window)) {\nreturn std::get<Repr>(m_window);\n}\nif (std::holds_alternative<ClassAndTitle>(m_window)) {\nauto [window_class, window_title] = std::get<ClassAndTitle>(m_window);\nreturn workspace_manager.rewriteWindowTitle(window_class, window_title);\n}\n// Unreachable\nspdlog::error(\"WorkspaceWindow::repr: Unreachable\");\nthrow std::runtime_error(\"WorkspaceWindow::repr: Unreachable\");\n}", "CodeBleu_score": 86.18129490651313}, {"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\t (std::holds_alternative<Repr>(m_window)) {\nreturn std::get<Repr>(m_window);\n}\nif (std::holds_alternative<ClassAndTitle>(m_window)) {\nauto [window_class, window_title] = std::get<ClassAndTitle>(m_window);\nreturn workspace_manager.rewriteWindow(m_workspaceName, window_class, window_title);\n}\n// Unreachable\nspdlog::error(\"WorkspaceWindow::repr: Unreachable\");\nthrow std::runtime_error(\"WorkspaceWindow::repr: Unreachable\");\n}", "CodeBleu_score": 83.95173857267703}, {"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\t (std::holds_alternative<Repr>(m_window)) {\nreturn std::get<Repr>(m_window);\n}\nif (std::holds_alternative<ClassAndTitle>(m_window)) {\nauto [window_class, window_title] = std::get<ClassAndTitle>(m_window);\nreturn workspace_manager.rewriteWindow(window_class, window_title);\n}\n// Unreachable\nspdlog::error(\"WorkspaceWindow::repr: Unreachable\");\nthrow std::runtime_error(\"WorkspaceWindow::repr: Unreachable\");\n}", "CodeBleu_score": 86.09391367814008}]}
{"instance_id": "b9160180960d", "generation_result": [{"code": "void Workspaces::createWorkspacesToCreate(){\n\tauto &workspace : m_workspaces_to_create) {\n\t\tcreateWorkspace(workspace.first, workspace.second);\n\t}\n\tm_workspaces_to_create.clear();\n\n\tupdateWindowCount();\n\tsortWorkspaces();\n}", "CodeBleu_score": 41.44122721083268}, {"code": "void Workspaces::createWorkspacesToCreate(){\n\tauto const &workspace : m_workspacesToCreate) {\ncreateWorkspace(workspace.workspaceData, workspace.clientsData);\n}\n\nm_workspacesToCreate.clear();\n\nif (m_workspaces.size() > 0) {\nupdateWindowCount();\nsortWorkspaces();\n}\n\n}", "CodeBleu_score": 51.26301489825409}, {"code": "void Workspaces::createWorkspacesToCreate(){\n\tworkspacesToCreate = gIPC->getSocket1JsonReply(\\\"workspaces-to-create\\\");\n\tfor (auto const &workspace : workspacesToCreate) {\n\t\tJson::Value workspaceData = createMonitorWorkspaceData(workspace[\\\"name\\\"].asString(), workspace[\\\"monitor\\\"].asString());\n\t\tJson::Value clientsData = workspace[\\\"clients\\\"];\n\t\tcreateWorkspace(workspaceData, clientsData);\n\t}\n\tupdateWindowCount();\n\tsortWorkspaces();\n}", "CodeBleu_score": 46.498142094238084}]}
{"instance_id": "07260cd3fead", "generation_result": [{"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\t", "CodeBleu_score": 6.643949350881974}, {"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\t", "CodeBleu_score": 6.643949350881974}, {"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\t", "CodeBleu_score": 6.643949350881974}]}
{"instance_id": "94a47eddc505", "generation_result": [{"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\tauto* mpris = static_cast<Mpris*>(data);\nif (!mpris) return;\n\nspdlog::debug(\"mpris: player-pause callback\");\n// update widget\nmpris->dp.emit();\n}", "CodeBleu_score": 97.08263166866323}, {"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\t auto* mpris = static_cast<Mpris*>(data);\n if (!mpris) return;\n\n spdlog::debug(\"mpris: player-pause callback\");\n // update widget\n mpris->dp.emit();\n}", "CodeBleu_score": 98.25401253560288}, {"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\t auto* mpris = static_cast<Mpris*>(data);\n if (!mpris) return;\n\n spdlog::debug(\"mpris: player-pause callback\");\n // update widget\n mpris->dp.emit();\n}", "CodeBleu_score": 98.25401253560288}]}
{"instance_id": "716955fc6ff5", "generation_result": [{"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\tif (!res.success) {\nthrow std::runtime_error(res.error);\n}\n\nswaybar_config conf = parseConfig(res.payload);\nonConfigUpdate(conf);\n}", "CodeBleu_score": 22.554789096573874}, {"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\tif (!res.success) {\nthrow std::runtime_error(res.error);\n}\n\nswaybar_config conf = parseConfig(res.payload);\nonConfigUpdate(conf);\n}", "CodeBleu_score": 22.554789096573874}, {"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\tif (!res.success) {\nthrow std::runtime_error(res.error);\n}\n\nswaybar_config conf = parseConfig(res.payload);\nonConfigUpdate(conf);\n}", "CodeBleu_score": 22.554789096573874}]}
{"instance_id": "e8aa483d1693", "generation_result": [{"code": "auto CFFI::doAction(const std::string& name) -> void{\n\tcffi_instance_!= nullptr);\n\tif (!name.empty()) {\n\t\thooks_.doAction(cffi_instance_, name.c_str());\n\t}\n}", "CodeBleu_score": 82.28288811410643}, {"code": "auto CFFI::doAction(const std::string& name) -> void{\n\tffi_instance_!= nullptr);\nif (!name.empty()) {\nhooks_.doAction(cffi_instance_, name.c_str());\n}\n}", "CodeBleu_score": 74.79259391764548}, {"code": "auto CFFI::doAction(const std::string& name) -> void{\n\tcffi_instance_!= nullptr);\n\tif (name.empty()) {\n\t\treturn;\n\t}\n\thooks_.doAction(cffi_instance_, name.c_str());\n}", "CodeBleu_score": 64.45414024935111}]}
