{"instance_id": "47ee1dae200b", "generation_result": [{"code": "public static void PreloadDll(string dllName){\n\t#if WINDOWS\n        string dllPath = Path.Combine(Directory.GetCurrentDirectory(), \"dlls\", dllName);\n        if (File.Exists(dllPath))\n        {\n            LoadLibrary(dllPath);\n        }\n        else\n        {\n            throw new FileNotFoundException(\"Unable to find \" + dllName);\n        }\n#else\n        string dllPath = Path.Combine(Directory.GetCurrentDirectory(), \"dlls\", dllName);\n        if (File.Exists(dllPath))\n        {\n            dlopen(dllPath, RTLD_NOW);\n        }\n        else\n        {\n            throw new FileNotFoundException(\"Unable to find \" + dllName);\n        }\n#endif\n}", "CodeBleu_score": 37.77608867922337}, {"code": "public static void PreloadDll(string dllName){\n\t\n#if !UNITY_EDITOR && (UNITY_STANDALONE_WIN || UNITY_EDITOR_WIN)\n    string dllDir = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);\n    string dllPath = Path.Combine(dllDir, dllName);\n    if (!File.Exists(dllPath))\n    {\n        throw new FileNotFoundException(\"Unable to find DLL: \" + dllPath);\n    }\n    LoadLibrary(dllPath);\n#else\n    string dllDir = Environment.GetEnvironmentVariable(\"LD_LIBRARY_PATH\");\n    if (string.IsNullOrEmpty(dllDir))\n    {\n        throw new FileNotFoundException(\"Unable to find DLL: \" + dllName);\n    }\n    string[] dllPaths = dllDir.Split(':');\n    foreach (string dllPath in dllPaths)\n    {\n        string fullPath = Path.Combine(dllPath, dllName);\n        if (File.Exists(fullPath))\n        {\n            LoadLibrary(fullPath);\n            return;\n        }\n    }\n    throw new FileNotFoundException(\"Unable to find DLL: \" + dllName);\n#endif\n}", "CodeBleu_score": 36.55181606002992}, {"code": "public static void PreloadDll(string dllName){\n\t\tif (dllName == null) {\n\t\tthrow new ArgumentNullException(nameof(dllName));\n\t}\n\tif (dllName.Length == 0) {\n\t\tthrow new ArgumentException(\"Value cannot be empty.\", nameof(dllName));\n\t}\n\n\t//string dllPath = Path.Combine(dllDirectory, dllName);\n\tstring dllPath = dllName;\n\tif (File.Exists(dllPath)) {\n\t\treturn;\n\t}\n\n\tif (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n\t\tLoadLibrary(dllPath);\n\t} else {\n\t\tdlopen(dllPath, RTLD_NOW);\n\t}\n}", "CodeBleu_score": 34.88938651051386}]}
{"instance_id": "2073a8291d05", "generation_result": [{"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t\tif (!assetsFileListHash.Contains(reader.FileName)) {\n\t\tLogger.Info($\"Loading {originalPath}\");\n\t\ttry {\n\t\t\tvar assetsFile = new SerializedFile(reader, this);\n\t\t\tif (unityVersion != null) {\n\t\t\t\tassetsFile.unityVersion = unityVersion;\n\t\t\t}\n\t\t\tCheckStrippedVersion(assetsFile);\n\t\t\tassetsFileList.Add(assetsFile);\n\t\t\tassetsFileListHash.Add(assetsFile.fileName);\n\n\t\t\tforeach (var sharedFile in assetsFile.m_Externals) {\n\t\t\t\tvar sharedFileName = sharedFile.fileName;\n\n\t\t\t\tif (!importFilesHash.Contains(sharedFileName)) {\n\t\t\t\t\tvar sharedFilePath = Path.Combine(Path.GetDirectoryName(reader.FullPath), sharedFileName);\n\t\t\t\t\tif (!noexistFiles.Contains(sharedFilePath)) {\n\t\t\t\t\t\tif (!File.Exists(sharedFilePath)) {\n\t\t\t\t\t\t\tvar findFiles = Directory.GetFiles(Path.GetDirectoryName(reader.FullPath), sharedFileName, SearchOption.AllDirectories);\n\t\t\t\t\t\t\tif (findFiles.Length > 0) {\n\t\t\t\t\t\t\t\tsharedFilePath = findFiles[0];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (File.Exists(sharedFilePath)) {\n\t\t\t\t\t\t\timportFiles.Add(sharedFilePath);\n\t\t\t\t\t\t\timportFilesHash.Add(sharedFileName);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnoexistFiles.Add(sharedFilePath);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tLogger.Error($\"Error while reading assets file {originalPath}\", e);\n\t\t\treader.Dispose();\n\t\t}\n\t} else {\n\t\tLogger.Info($\"Skipping {originalPath}\");\n\t\treader.Dispose();\n\t}\n}", "CodeBleu_score": 53.03872938352742}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t\tif (!assetsFileListHash.Contains(reader.FileName)) {\n\t\tLogger.Info($\"Loading {reader.FullPath}\");\n\t\ttry {\n\t\t\tvar assetsFile = new SerializedFile(reader, this);\n\t\t\tif (unityVersion != null) {\n\t\t\t\tassetsFile.unityVersion = unityVersion;\n\t\t\t}\n\t\t\tCheckStrippedVersion(assetsFile);\n\t\t\tassetsFileList.Add(assetsFile);\n\t\t\tassetsFileListHash.Add(assetsFile.fileName);\n\n\t\t\tforeach (var sharedFile in assetsFile.m_Externals) {\n\t\t\t\tvar sharedFileName = sharedFile.fileName;\n\n\t\t\t\tif (!importFilesHash.Contains(sharedFileName)) {\n\t\t\t\t\tvar sharedFilePath = Path.Combine(Path.GetDirectoryName(reader.FullPath), sharedFileName);\n\t\t\t\t\tif (!noexistFiles.Contains(sharedFilePath)) {\n\t\t\t\t\t\tif (!File.Exists(sharedFilePath)) {\n\t\t\t\t\t\t\tvar findFiles = Directory.GetFiles(Path.GetDirectoryName(reader.FullPath), sharedFileName, SearchOption.AllDirectories);\n\t\t\t\t\t\t\tif (findFiles.Length > 0) {\n\t\t\t\t\t\t\t\tsharedFilePath = findFiles[0];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (File.Exists(sharedFilePath)) {\n\t\t\t\t\t\t\timportFiles.Add(sharedFilePath);\n\t\t\t\t\t\t\timportFilesHash.Add(sharedFileName);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnoexistFiles.Add(sharedFilePath);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tLogger.Error($\"Error while reading assets file {reader.FullPath}\", e);\n\t\t\treader.Dispose();\n\t\t}\n\t} else {\n\t\tLogger.Info($\"Skipping {reader.FullPath}\");\n\t\treader.Dispose();\n\t}\n}", "CodeBleu_score": 50.87113625819823}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\tif (!assetsFileListHash.Contains(reader.FileName)) {\nLogger.Info($\\\"Loading {reader.FullPath}\\\");\ntry {\nvar assetsFile = new SerializedFile(reader, this, originalPath, unityVersion);\nCheckStrippedVersion(assetsFile);\nassetsFileList.Add(assetsFile);\nassetsFileListHash.Add(assetsFile.fileName);\n\nforeach (var sharedFile in assetsFile.m_Externals) {\nvar sharedFileName = sharedFile.fileName;\n\nif (!importFilesHash.Contains(sharedFileName)) {\nvar sharedFilePath = Path.Combine(Path.GetDirectoryName(reader.FullPath), sharedFileName);\nif (!noexistFiles.Contains(sharedFilePath)) {\nif (!File.Exists(sharedFilePath)) {\nvar findFiles = Directory.GetFiles(Path.GetDirectoryName(reader.FullPath), sharedFileName, SearchOption.AllDirectories);\nif (findFiles.Length > 0) {\nsharedFilePath = findFiles[0];\n}\n}\nif (File.Exists(sharedFilePath)) {\nimportFiles.Add(sharedFilePath);\nimportFilesHash.Add(sharedFileName);\n} else {\nnoexistFiles.Add(sharedFilePath);\n}\n}\n}\n}\n}\ncatch (Exception e) {\nLogger.Error($\\\"Error while reading assets file {reader.FullPath}\\\", e);\nreader.Dispose();\n}\n} else {\nLogger.Info($\\\"Skipping {reader.FullPath}\\\");\nreader.Dispose();\n}\n}", "CodeBleu_score": 53.53801375566823}]}
{"instance_id": "5dacc6a26301", "generation_result": [{"code": "public ImportedFrame FindFrameByPath(string path){\n\t", "CodeBleu_score": 2.034882990523014}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\t", "CodeBleu_score": 2.034882990523014}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\t", "CodeBleu_score": 2.034882990523014}]}
{"instance_id": "c20b04c4ad37", "generation_result": [{"code": "public static FileReader DecompressGZip(FileReader reader){\n\t\tMemoryStream memoryStream = new MemoryStream();\n\tGZipStream gzipStream = new GZipStream(reader.stream, CompressionMode.Decompress);\n\tgzipStream.CopyTo(memoryStream);\n\tgzipStream.Close();\n\treader.stream.Close();\n\tmemoryStream.Position = 0;\n\treturn new FileReader(memoryStream);\n}", "CodeBleu_score": 42.958639658025895}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\t\tvar compressedData = reader.ReadBytes();\n\tvar decompressedData = new MemoryStream();\n\tusing (var compressedStream = new MemoryStream(compressedData))\n\tusing (var decompressedStream = new GZipStream(compressedStream, CompressionMode.Decompress)) {\n\t\tdecompressedStream.CopyTo(decompressedData);\n\t}\n\treturn new FileReader(decompressedData.ToArray());\n}", "CodeBleu_score": 31.755652802513158}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\tvar ms = new MemoryStream();\nusing (var gzip = new GZipStream(reader.stream, CompressionMode.Decompress)) {\ngzip.CopyTo(ms);\n}\nms.Position = 0;\nreturn new FileReader(ms);\n}", "CodeBleu_score": 58.041746267372176}]}
{"instance_id": "11ce5c7b009d", "generation_result": [{"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\tfor (int i = 0; i < commandStrings.Length; i++) {\n\t\tstring commandString = commandStrings[i];\n\t\tif (ParseString(commandString, switchForms))\n\t\t\tcontinue;\n\t\tNonSwitchStrings.Add(commandString);\n\t}\n}", "CodeBleu_score": 36.927298819751606}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t", "CodeBleu_score": 7.310515368361058}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t", "CodeBleu_score": 7.310515368361058}]}
{"instance_id": "b8da2d0a3f76", "generation_result": [{"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\treader = new ResourceReader(m_Texture2D.m_Texture);\n\tm_Width = m_Texture2D.m_Width;\n\tm_Height = m_Texture2D.m_Height;\n\tm_TextureFormat = m_Texture2D.m_TextureFormat;\n\tversion = m_Texture2D.version;\n\tplatform = m_Texture2D.platform;\n\toutPutSize = m_Texture2D.outPutSize;\n}", "CodeBleu_score": 64.66876251717336}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\treader = new ResourceReader(m_Texture2D.m_Texture);\n\tm_Width = m_Texture2D.m_Width;\n\tm_Height = m_Texture2D.m_Height;\n\tm_TextureFormat = m_Texture2D.m_TextureFormat;\n\tversion = m_Texture2D.version;\n\tplatform = m_Texture2D.platform;\n\toutPutSize = m_Texture2D.m_StreamData.size;\n}", "CodeBleu_score": 64.48383673454424}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\treader = new ResourceReader(m_Texture2D.m_Texture);\n\tm_Width = m_Texture2D.m_Width;\n\tm_Height = m_Texture2D.m_Height;\n\tm_TextureFormat = m_Texture2D.m_TextureFormat;\n\tversion = m_Texture2D.version;\n\tplatform = m_Texture2D.platform;\n\toutPutSize = m_Texture2D.outPutSize;\n}", "CodeBleu_score": 64.66876251717336}]}
{"instance_id": "4d1412b550a3", "generation_result": [{"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear();\n\ts_Names.Clear();\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tSerializedProperty element = sp.GetArrayElementAtIndex(i);\n\t\tif (element.propertyType == SerializedPropertyType.String) {\n\t\t\tstring name = element.stringValue;\n\t\t\tif (!string.IsNullOrEmpty(name)) {\n\t\t\t\tresult.Add(name);\n\t\t\t\ts_Names.Add(name);\n\t\t\t}\n\t\t}\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\";\n\t}\n\ts_Sb.Length = 0;\n\tfor (int i = 0; i < result.Count; i++) {\n\t\tif (i > 0) {\n\t\t\ts_Sb.Append(\", \");\n\t\t}\n\t\ts_Sb.Append(result[i]);\n\t}\n\treturn s_Sb.ToString();\n}", "CodeBleu_score": 46.478382837667375}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear();\n\ts_Names.Clear();\n\n\tif (sp == null) {\n\t\treturn s_ContentNothing.text;\n\t}\n\n\tfor (int i = 0; i < sp.arraySize; ++i) {\n\t\tSerializedProperty element = sp.GetArrayElementAtIndex(i);\n\t\tstring name = element.FindPropertyRelative(\"m_Name\").stringValue;\n\t\tif (!string.IsNullOrEmpty(name)) {\n\t\t\tresult.Add(name);\n\t\t\ts_Names.Add(name);\n\t\t}\n\t}\n\n\tif (result.Count == 0) {\n\t\treturn s_ContentNothing.text;\n\t}\n\n\ts_Sb.Length = 0;\n\tfor (int i = 0; i < result.Count; ++i) {\n\t\ts_Sb.Append(result[i]);\n\t\tif (i < result.Count - 1) {\n\t\t\ts_Sb.Append(\", \");\n\t\t}\n\t}\n\n\treturn s_Sb.ToString();\n}", "CodeBleu_score": 47.50853430652259}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear();\n\ts_Names.Clear();\n\tfor (int i = 0; i < sp.arraySize; ++i) {\n\t\tSerializedProperty p = sp.GetArrayElementAtIndex(i);\n\t\tif (p.objectReferenceValue != null) {\n\t\t\tstring name = p.objectReferenceValue.name;\n\t\t\tif (!s_Names.Contains(name)) {\n\t\t\t\ts_Names.Add(name);\n\t\t\t\tresult.Add(name);\n\t\t\t}\n\t\t}\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\";\n\t}\n\ts_Sb.Length = 0;\n\tfor (int i = 0; i < result.Count; ++i) {\n\t\tif (i > 0) {\n\t\t\ts_Sb.Append(\", \");\n\t\t}\n\t\ts_Sb.Append(result[i]);\n\t}\n\treturn s_Sb.ToString();\n}", "CodeBleu_score": 45.09411417771363}]}
{"instance_id": "5014bde74f8b", "generation_result": [{"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t\tif (add && s_ActiveNames.Contains(prop.name)) return;\n\tif (!add && !s_ActiveNames.Contains(prop.name)) return;\n\n\tmenu.AddItem(new GUIContent(prop.name), add, x =>\n\t{\n\t\tvar current = (SerializedProperty)x;\n\t\tif (add)\n\t\t{\n\t\t\tcurrent.arraySize++;\n\t\t\tvar element = current.GetArrayElementAtIndex(current.arraySize - 1);\n\t\t\telement.FindPropertyRelative(\"m_Name\").stringValue = prop.name;\n\t\t\telement.FindPropertyRelative(\"m_Type\").intValue = (int)prop.type;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor (var i = 0; i < current.arraySize; i++)\n\t\t\t{\n\t\t\t\tvar element = current.GetArrayElementAtIndex(i);\n\t\t\t\tif (element.FindPropertyRelative(\"m_Name\").stringValue == prop.name)\n\t\t\t\t{\n\t\t\t\t\tcurrent.DeleteArrayElementAtIndex(i);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcurrent.serializedObject.ApplyModifiedProperties();\n\t}, sp);\n}", "CodeBleu_score": 49.23579680814699}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t\tif (add && s_ActiveNames.Contains(prop.name)) return;\n\tmenu.AddItem(new GUIContent(prop.name), add, x => {\n\t\tvar current = (SerializedProperty)x;\n\t\tif (add) {\n\t\t\tvar p = current.arraySize++;\n\t\t\tcurrent.GetArrayElementAtIndex(p).FindPropertyRelative(\"m_Name\").stringValue = prop.name;\n\t\t\tcurrent.GetArrayElementAtIndex(p).FindPropertyRelative(\"m_Type\").intValue = (int)prop.type;\n\t\t} else {\n\t\t\tfor (var i = 0; i < current.arraySize; i++) {\n\t\t\t\tvar p = current.GetArrayElementAtIndex(i);\n\t\t\t\tif (p.FindPropertyRelative(\"m_Name\").stringValue == prop.name) {\n\t\t\t\t\tcurrent.DeleteArrayElementAtIndex(i);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcurrent.serializedObject.ApplyModifiedProperties();\n\t}, sp);\n}", "CodeBleu_score": 48.29017672467072}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t\tif (add && s_ActiveNames.Contains(prop.name)) return;\n\tvar current = sp.hasMultipleDifferentValues ? null : sp;\n\tmenu.AddItem(new GUIContent(prop.name), add, x =>\n\t{\n\t\tvar current = (SerializedProperty)x;\n\t\tif (add)\n\t\t{\n\t\t\tif (current.hasMultipleDifferentValues)\n\t\t\t{\n\t\t\t\tvar spNew = new SerializedProperty();\n\t\t\t\tcurrent.Next(true);\n\t\t\t\tcurrent.Next(false);\n\t\t\t\tcurrent.Copy(spNew);\n\t\t\t\tcurrent.Next(false);\n\t\t\t\tcurrent.arraySize++;\n\t\t\t\tcurrent.Paste(spNew);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcurrent.arraySize++;\n\t\t\t}\n\n\t\t\tvar spName = current.GetArrayElementAtIndex(current.arraySize - 1).FindPropertyRelative(\"m_Name\");\n\t\t\tspName.stringValue = prop.name;\n\t\t\tspName = current.GetArrayElementAtIndex(current.arraySize - 1).FindPropertyRelative(\"m_Type\");\n\t\t\tspName.intValue = (int)prop.type;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor (var i = 0; i < current.arraySize; i++)\n\t\t\t{\n\t\t\t\tvar spName = current.GetArrayElementAtIndex(i).FindPropertyRelative(\"m_Name\");\n\t\t\t\tif (spName == null) continue;\n\t\t\t\tif (spName.stringValue == prop.name)\n\t\t\t\t{\n\t\t\t\t\tcurrent.DeleteArrayElementAtIndex(i);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcurrent.serializedObject.ApplyModifiedProperties();\n\t}, current);\n}", "CodeBleu_score": 46.17776675695928}]}
{"instance_id": "20e390481814", "generation_result": [{"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t\tvar spX = sp.FindPropertyRelative(\"x\");\n\tvar spY = sp.FindPropertyRelative(\"y\");\n\tvar spZ = sp.FindPropertyRelative(\"z\");\n\n\tvar isVector3 = spX.hasMultipleDifferentValues || spY.hasMultipleDifferentValues || spZ.hasMultipleDifferentValues;\n\tfor (int i = 0; i < 3; ++i) {\n\t\tif (i != 0 && isVector3) break;\n\t\tisVector3 |= !Mathf.Approximately(spX.floatValue, spY.floatValue);\n\t\tisVector3 |= !Mathf.Approximately(spX.floatValue, spZ.floatValue);\n\t\tisVector3 |= !Mathf.Approximately(spY.floatValue, spZ.floatValue);\n\t}\n\n\tEditorGUI.BeginChangeCheck();\n\tshowXyz = GUILayout.Toggle(showXyz, s_ContentVector3, EditorStyles.miniButton, GUILayout.Width(60));\n\tif (EditorGUI.EndChangeCheck() && !showXyz) {\n\t\tspY.floatValue = spX.floatValue;\n\t\tspZ.floatValue = spX.floatValue;\n\t}\n\n\tEditorGUI.BeginDisabledGroup(!showXyz);\n\tEditorGUI.indentLevel++;\n\tEditorGUILayout.PropertyField(spX);\n\tEditorGUILayout.PropertyField(spY);\n\tEditorGUILayout.PropertyField(spZ);\n\tEditorGUI.indentLevel--;\n\tEditorGUI.EndDisabledGroup();\n\n\treturn showXyz;\n}", "CodeBleu_score": 53.93561530152715}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t\tbool isVector3 = sp.vector3Value.x != sp.vector3Value.y || sp.vector3Value.x != sp.vector3Value.z || sp.vector3Value.y != sp.vector3Value.z || sp.hasMultipleDifferentValues;\n\tif (showXyz) {\n\t\tEditorGUILayout.PropertyField(sp);\n\t} else {\n\t\tEditorGUI.BeginChangeCheck();\n\t\tEditorGUILayout.BeginHorizontal();\n\t\tEditorGUILayout.PropertyField(sp, GUIContent.none);\n\t\tif (EditorGUI.EndChangeCheck()) {\n\t\t\tsp.vector3Value = new Vector3(sp.floatValue, sp.floatValue, sp.floatValue);\n\t\t}\n\t\tEditorGUILayout.EndHorizontal();\n\t}\n\tEditorGUI.BeginDisabledGroup(isVector3);\n\tEditorGUI.indentLevel++;\n\tbool showVector3 = GUILayout.Toggle(isVector3, s_ContentVector3, EditorStyles.miniButton, GUILayout.Width(60));\n\tif (showVector3) {\n\t\tEditorGUILayout.PropertyField(sp);\n\t}\n\tEditorGUI.indentLevel--;\n\tEditorGUI.EndDisabledGroup();\n\treturn showVector3;\n}", "CodeBleu_score": 34.888419003827515}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t\tvar xyz = new Vector3(sp.vector3Value.x, sp.vector3Value.y, sp.vector3Value.z);\n\tvar isVector = xyz.x != xyz.y || xyz.y != xyz.z || xyz.x != xyz.z || sp.hasMultipleDifferentValues;\n\tvar showVector = showXyz || isVector;\n\tvar showFloat = !showVector;\n\n\tEditorGUI.BeginChangeCheck();\n\tusing (new EditorGUI.DisabledGroupScope(!showVector)) {\n\t\tEditorGUILayout.PropertyField(sp, showVector ? s_ContentVector3 : s_ContentFloat);\n\t}\n\tif (EditorGUI.EndChangeCheck() && showVector) {\n\t\tsp.vector3Value = new Vector3(xyz.x, xyz.x, xyz.x);\n\t}\n\n\tEditorGUI.BeginDisabledGroup(!showVector);\n\tEditorGUI.indentLevel++;\n\tusing (new EditorGUI.DisabledGroupScope(!showFloat)) {\n\t\tEditorGUILayout.PropertyField(sp.FindPropertyRelative(\"x\"), s_ContentX);\n\t}\n\tusing (new EditorGUI.DisabledGroupScope(showFloat)) {\n\t\tEditorGUILayout.PropertyField(sp.FindPropertyRelative(\"y\"), s_ContentY);\n\t\tEditorGUILayout.PropertyField(sp.FindPropertyRelative(\"z\"), s_ContentZ);\n\t}\n\tEditorGUI.indentLevel--;\n\tEditorGUI.EndDisabledGroup();\n\n\tEditorGUI.BeginChangeCheck();\n\tshowVector = GUILayout.Toggle(showVector, s_ContentVector3, EditorStyles.miniButton, GUILayout.Width(60));\n\tif (EditorGUI.EndChangeCheck() && !showVector) {\n\t\tsp.vector3Value = new Vector3(sp.floatValue, sp.floatValue, sp.floatValue);\n\t}\n\n\treturn showVector;\n}", "CodeBleu_score": 42.7857815200369}]}
{"instance_id": "c3587cbcda7e", "generation_result": [{"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\tMatEntry entry = null;\n\tfor (int i = 0; i < s_Entries.Count; i++) {\n\t\tMatEntry e = s_Entries[i];\n\t\tif (e.baseMat == baseMat && e.texture == texture && e.id == id && e.props == props) {\n\t\t\tentry = e;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (entry == null) {\n\t\tentry = new MatEntry();\n\t\tentry.baseMat = baseMat;\n\t\tentry.texture = texture;\n\t\tentry.id = id;\n\t\tentry.props = props;\n\t\ts_Entries.Add(entry);\n\t}\n\n\tentry.count++;\n\treturn entry.mat;\n}", "CodeBleu_score": 33.312708533813115}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\tMatEntry entry = s_Entries.Find(e => e.baseMat == baseMat && e.texture == texture && e.id == id && e.props == props);\n\tif (entry != null) {\n\t\tentry.count++;\n\t\treturn entry.customMat;\n\t}\n\n\tentry = new MatEntry();\n\tentry.baseMat = baseMat;\n\tentry.texture = texture;\n\tentry.id = id;\n\tentry.props = props;\n\tentry.customMat = new Material(baseMat);\n\tentry.customMat.name = baseMat.name + \"_\" + texture.name + \"_\" + id + \"_\" + props;\n\tentry.customMat.SetTexture(\"_MainTex\", texture);\n\tentry.customMat.SetInt(\"_Id\", id);\n\tentry.customMat.SetInt(\"_Props\", props);\n\ts_Entries.Add(entry);\n\treturn entry.customMat;\n}", "CodeBleu_score": 28.820053250045852}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\tfor (int i = 0; i < s_Entries.Count; i++) {\n\t\tMatEntry entry = s_Entries[i];\n\t\tif (entry.baseMat == baseMat && entry.texture == texture && entry.id == id && entry.props == props) {\n\t\t\tentry.count++;\n\t\t\treturn entry.customMat;\n\t\t}\n\t}\n\tMatEntry newEntry = new MatEntry();\n\tnewEntry.baseMat = baseMat;\n\tnewEntry.texture = texture;\n\tnewEntry.id = id;\n\tnewEntry.props = props;\n\tnewEntry.customMat = new Material(baseMat);\n\tnewEntry.customMat.name = baseMat.name + \" (Instance)\";\n\tnewEntry.customMat.mainTexture = texture;\n\tnewEntry.customMat.hideFlags = HideFlags.DontSave;\n\tnewEntry.count = 1;\n\ts_Entries.Add(newEntry);\n\treturn newEntry.customMat;\n}", "CodeBleu_score": 37.17383391363398}]}
{"instance_id": "a35149bc8b8b", "generation_result": [{"code": "public static void Remove(Material customMat){\n\t\tif (customMat == null) return;\n\tfor (var i = 0; i < s_Entries.Count; i++) {\n\t\tvar e = s_Entries[i];\n\t\tif (e.customMat != customMat) continue;\n\t\t--e.count;\n\t\t//Debug.LogFormat(\">>>> ModifiedMaterial.Remove -> count = count:{0}, mat:{1}\", s_Entries.Count, customMat);\n\t\tif (e.count <= 0) {\n\t\t\tObject.DestroyImmediate(e.customMat);\n\t\t\ts_Entries.RemoveAt(i);\n\t\t}\n\t\treturn;\n\t}\n}", "CodeBleu_score": 46.858165134803464}, {"code": "public static void Remove(Material customMat){\n\t\tif (customMat == null) return;\n\n\tfor (var i = 0; i < s_Entries.Count; i++) {\n\t\tvar e = s_Entries[i];\n\t\tif (e.customMat != customMat) continue;\n\t\t--e.count;\n\t\t//Debug.LogFormat(\\\">>>> ModifiedMaterial.Remove -> count = count:{0}, mat:{1}, tex:{2}, id:{3}\\\", s_Entries.Count, e.baseMat, e.texture, e.id);\n\n\t\tif (e.count <= 0) {\n\t\t\tObject.DestroyImmediate(e.customMat);\n\t\t\ts_Entries.RemoveAt(i);\n\t\t}\n\t\treturn;\n\t}\n}", "CodeBleu_score": 46.858165134803464}, {"code": "public static void Remove(Material customMat){\n\t\tfor (var i = 0; i < s_Entries.Count; i++) {\n\t\tvar e = s_Entries[i];\n\t\tif (e.customMat != customMat) continue;\n\t\t--e.count;\n\t\tif (e.count > 0) return;\n\t\t//Debug.LogFormat(\\\">>>> ModifiedMaterial.Remove -> count = count:{0}, mat:{1}, tex:{2}, id:{3}\\\", s_Entries.Count, e.baseMat, e.texture, e.id);\n\n\t\tObject.DestroyImmediate(e.customMat);\n\t\ts_Entries.RemoveAt(i);\n\t\treturn;\n\t}\n}", "CodeBleu_score": 43.441703400354314}]}
{"instance_id": "892bbee52ab9", "generation_result": [{"code": "private void RefreshParticles(GameObject root){\n\t", "CodeBleu_score": 0.8950667016864431}, {"code": "private void RefreshParticles(GameObject root){\n\t\tvar systems = new List<ParticleSystem>();\n\tvar count = root.GetComponentsInChildren<ParticleSystem>(true, systems);\n\tvar list = new List<ParticleSystem>(count);\n\tvar i = 0;\n\n\tfor (i = 0; i < count; i++) {\n\t\tvar p = systems[i];\n\t\tif (p.gameObject == gameObject || p.gameObject.transform.IsChildOf(transform)) {\n\t\t\tlist.Add(p);\n\t\t}\n\t}\n\n\tRefreshParticles(list);\n}", "CodeBleu_score": 29.013508496704443}, {"code": "private void RefreshParticles(GameObject root){\n\t", "CodeBleu_score": 0.8950667016864431}]}
{"instance_id": "d6b082e37770", "generation_result": [{"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t\tcontainerBuilder.RegisterAssemblyTypes(currentAssembly)\n\t\t.AssignableTo<IColorSwapManager>()\n\t\t.As<IColorSwapManager>()\n\t\t.AsImplementedInterfaces()\n\t\t.AsSelf()\n\t\t.SingleInstance();\n}", "CodeBleu_score": 52.572354202227764}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\tcontainerBuilder.RegisterAssemblyTypes(currentAssembly)\n.AssignableTo<IColorSwapManager>()\n.As<IColorSwapManager>()\n.AsSelf()\n.SingleInstance();\n}", "CodeBleu_score": 53.39865455635804}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t\tcontainerBuilder.RegisterAssemblyTypes(currentAssembly)\n\t\t\t\t\t.AssignableTo<IColorSwapManager>()\n\t\t\t\t\t.As<IColorSwapManager>()\n\t\t\t\t\t.AsSelf()\n\t\t\t\t\t.SingleInstance();\n}", "CodeBleu_score": 53.63422963190854}]}
{"instance_id": "2359d72977a4", "generation_result": [{"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t IpAddress = ipAddress;\n ServerPort = port;\n Log.Info(\\\"MultiplayerSessionManager.ConnectAsync() called.\\\");\n await initSerializerTask;\n await CurrentState.ConnectAsync();\n }", "CodeBleu_score": 57.44007812853822}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t IpAddress = ipAddress;\n ServerPort = port;\n await initSerializerTask;\n Log.Info(\\\"Attempting to connect to {0}:{1}\\\", IpAddress, ServerPort);\n await CurrentState.ConnectAsync();\n }", "CodeBleu_score": 59.49457084183559}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t IpAddress = ipAddress;\n ServerPort = port;\n await initSerializerTask;\n await CurrentState.ConnectAsync();\n }", "CodeBleu_score": 60.464410574035966}]}
{"instance_id": "151a27d718b1", "generation_result": [{"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t\tif (sessionConnectionState == null) {\n\t\tthrow new ArgumentNullException(nameof(sessionConnectionState));\n\t}\n\n\tif (sessionConnectionState.CurrentStage == MultiplayerSessionConnectionStage.DISCONNECTED) {\n\t\tthrow new InvalidOperationException(\"Cannot transition to DISCONNECTED state\");\n\t}\n\n\tif (sessionConnectionState.CurrentStage == MultiplayerSessionConnectionStage.AWAITING_RESERVATION_RESPONSE) {\n\t\tif (CurrentState.CurrentStage != MultiplayerSessionConnectionStage.AWAITING_RESERVATION_RESPONSE) {\n\t\t\tLog.Info(\"Awaiting reservation response\u2026\");\n\t\t}\n\t}\n\telse if (sessionConnectionState.CurrentStage == MultiplayerSessionConnectionStage.AWAITING_SESSION_RESERVATION) {\n\t\tif (CurrentState.CurrentStage != MultiplayerSessionConnectionStage.AWAITING_SESSION_RESERVATION) {\n\t\t\tLog.Info(\"Awaiting session reservation\u2026\");\n\t\t}\n\t}\n\telse if (sessionConnectionState.CurrentStage == MultiplayerSessionConnectionStage.SESSION_RESERVED) {\n\t\tif (CurrentState.CurrentStage != MultiplayerSessionConnectionStage.SESSION_RESERVED) {\n\t\t\tLog.Info(\"Session reserved. Player name: \" + SessionPolicy.PlayerName);\n\t\t\tLog.InGame(Language.main.Get(\"Nitrox_Reserved\").Replace(\"{playerName}\", SessionPolicy.PlayerName));\n\t\t}\n\t}\n\telse if (sessionConnectionState.CurrentStage == MultiplayerSessionConnectionStage.SESSION_JOINED) {\n\t\tif (CurrentState.CurrentStage != MultiplayerSessionConnectionStage.SESSION_JOINED) {\n\t\t\tLog.Info(\"Joined session\");\n\t\t\tLog.InGame(Language.main.Get(\"Nitrox_Joined\"));\n\t\t}\n\t}\n\telse if (sessionConnectionState.CurrentStage == MultiplayerSessionConnectionStage.DISCONNECTING) {\n\t\tif (CurrentState.CurrentStage != MultiplayerSessionConnectionStage.DISCONNECTING) {\n\t\t\tLog.Info(\"Disconnecting\u2026\");\n\t\t}\n\t}\n\telse {\n\t\tthrow new InvalidOperationException(\"Unknown connection state\");\n\t}\n\n\tCurrentState = sessionConnectionState;\n\tConnectionStateChanged?.Invoke(this, new MultiplayerSessionConnectionStateChangedEventArgs(sessionConnectionState));\n}", "CodeBleu_score": 34.10446932815013}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t", "CodeBleu_score": 1.3969615207900739}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\tif (sessionConnectionState == null) {\nthrow new ArgumentNullException(nameof(sessionConnectionState), \\\"Multiplayer session connection state cannot be null.\\\");\n}\n\nif (CurrentState == sessionConnectionState) {\nreturn;\n}\n\nLog.Info(\\\"Multiplayer session connection state changed from {0} to {1}.\\\", CurrentState.CurrentStage, sessionConnectionState.CurrentStage);\n\nif (sessionConnectionState.CurrentStage == MultiplayerSessionConnectionStage.SESSION_RESERVED) {\nLog.InGame(Language.main.Get(\\\"Nitrox_InGame\\\").Replace(\\\"{playerName}\\\", PlayerSettings.PlayerName));\n}\n\nCurrentState = sessionConnectionState;\n\nif (ConnectionStateChanged != null) {\nConnectionStateChanged(this, new MultiplayerSessionConnectionStateChangedEventArgs(CurrentState));\n}\n}", "CodeBleu_score": 40.55043407848522}]}
{"instance_id": "7f7717307d6a", "generation_result": [{"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t\tawait Task.Run(() => client.Start());\n\tclient.Connect(ipAddress, serverPort, string.Empty);\n\tconnectedEvent.WaitOne(2000);\n\tconnectedEvent.Reset();\n}", "CodeBleu_score": 46.32914178396631}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t\tawait Task.Run(() => client.Start());\n\tclient.Connect(ipAddress, serverPort, \"NitroxClient\");\n\tconnectedEvent.WaitOne(2000);\n\tconnectedEvent.Reset();\n}", "CodeBleu_score": 50.512809912836865}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t\tawait Task.Run(() => {\n\t\tclient.Start();\n\t\tclient.Connect(ipAddress, serverPort);\n\t\tconnectedEvent.WaitOne(2000);\n\t\tconnectedEvent.Reset();\n\t});\n}", "CodeBleu_score": 52.554179566112644}]}
{"instance_id": "eeb95434f1eb", "generation_result": [{"code": "public void StartFireSuppression(NitroxId id){\n\tGameObject cyclops = NitroxEntity.RequireObjectFrom(id);\nCyclopsFireSuppressionManager fireSuppressionManager = cyclops.GetComponent<CyclopsFireSuppressionManager>();\nif (fireSuppressionManager == null) {\nDebug.LogErrorFormat(\\\"Unable to find CyclopsFireSuppressionManager on Cyclops {0}.\\\", id);\nreturn;\n}\nusing (PacketSuppressor<EntityMetadataUpdate>.Suppress()) {\nfireSuppressionManager.Invoke(nameof(CyclopsFireSuppressionManager.StartFireSuppression), 1.0f);\nfireSuppressionManager.fireSuppressionButton.UpdateText();\nfireSuppressionManager.subRoot.voiceNotificationManager.PlayVoiceNotification(fireSuppressionManager.subRoot.fireSuppressionNotification, false, true);\nCyclopsFireSuppressionButton fireSuppressionButton = cyclops.GetComponentInChildren<CyclopsFireSuppressionButton>();\nfireSuppressionButton.StartCooldown();\n}\n}", "CodeBleu_score": 61.51328228070274}, {"code": "public void StartFireSuppression(NitroxId id){\n\t\tGameObject cyclops = NitroxEntity.RequireObjectFrom(id);\n\tCyclopsFireSuppressionManager fireSuppressionManager = cyclops.GetComponent<CyclopsFireSuppressionManager>();\n\tCyclopsFireSuppressionButton fireSuppressionButton = cyclops.GetComponentInChildren<CyclopsFireSuppressionButton>();\n\tusing (PacketSuppressor<EntityMetadataUpdate>.Suppress()) {\n\t\tfireSuppressionManager.Invoke(nameof(CyclopsFireSuppressionManager.StartFireSuppression), 0f);\n\t\tfireSuppressionButton.StartCooldown();\n\t}\n}", "CodeBleu_score": 41.63514275254677}, {"code": "public void StartFireSuppression(NitroxId id){\n\t\tGameObject cyclops = NitroxEntity.RequireObjectFrom(id);\n\tCyclopsFireSuppressionManager fireSuppressionManager = cyclops.RequireComponent<CyclopsFireSuppressionManager>();\n\tusing (PacketSuppressor<EntityMetadataUpdate>.Suppress()) {\n\t\tfireSuppressionManager.Invoke(nameof(CyclopsFireSuppressionManager.StartFireSuppression), 0.1f);\n\t\tfireSuppressionManager.fireSuppressionButton.UpdateText();\n\t\tCyclopsFireSuppressionButton fireSuppressionButton = cyclops.RequireComponentInChildren<CyclopsFireSuppressionButton>();\n\t\tfireSuppressionButton.StartCooldown();\n\t}\n}", "CodeBleu_score": 53.36858376891145}]}
{"instance_id": "a23a043559c6", "generation_result": [{"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t\tif (subRoot.GetNitroxId() == NitroxId.Player) {\n\t\tCyclopsDamagePointRepaired packet = new CyclopsDamagePointRepaired(subRoot.GetNitroxId(), damagePoint.GetDamagePointId(), repairAmount);\n\t\tpacketSender.Send(packet);\n\t\tBroadcastDamageState(subRoot, Optional.Empty);\n\t}\n}", "CodeBleu_score": 28.114860895850924}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t\tif (subRoot.NID != NID)\n\t\treturn;\n\tCyclopsDamagePointRepaired packet = new CyclopsDamagePointRepaired(subRoot.NID, damagePoint.NID, repairAmount);\n\tpacketSender.Send(packet);\n\tBroadcastDamageState(subRoot, Optional.Of(damagePoint));\n}", "CodeBleu_score": 30.10102409552873}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t\tif (subRoot.id != CyclopsId) {\n\t\treturn;\n\t}\n\n\tCyclopsDamagePointRepaired packet = new CyclopsDamagePointRepaired(CyclopsId, damagePoint.id, repairAmount);\n\tpacketSender.Send(packet);\n\n\tBroadcastDamageState(subRoot, Optional.Empty);\n}", "CodeBleu_score": 30.267619639769492}]}
{"instance_id": "dfb3586de856", "generation_result": [{"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t\tif (!subRoot.TryGetIdOrWarn(out NitroxId subId)) {\n\t\treturn;\n\t}\n\n\tif (subRoot.health <= 0) {\n\t\treturn;\n\t}\n\n\tCyclopsDamageInfoData? damageInfoData = null;\n\tif (info.HasValue) {\n\t\tdamageInfoData = new CyclopsDamageInfoData(info.Value.damage, info.Value.damageType, info.Value.attackerId);\n\t}\n\n\tCyclopsDamage packet = new(subId, subRoot.health, subRoot.armor, subRoot.shield, subRoot.shieldHealth, subRoot.oxygen, subRoot.oxygenHealth, damageInfoData, subRoot.fireCount, subRoot.fireCountMax);\n\tpacketSender.Send(packet);\n}", "CodeBleu_score": 40.696279918967385}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t", "CodeBleu_score": 4.640678550233302}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\tif (!subRoot.TryGetIdOrWarn(out NitroxId subId)) {\nreturn;\n}\n\nif (subRoot.healthManager.CurrentHealth < 10) {\nreturn;\n}\n\nCyclopsDamageInfoData? damageInfo = null;\nif (info.HasValue) {\ndamageInfo = new CyclopsDamageInfoData(info.Value.DamageType, info.Value.Damage, info.Value.ForceDirection);\n}\n\nList<CyclopsDamagePointData> damagePoints = new List<CyclopsDamagePointData>();\nfor (int i = 0; i < subRoot.damageManager.damagePoints.Length; i++) {\nif (subRoot.damageManager.damagePoints[i].active) {\ndamagePoints.Add(new CyclopsDamagePointData(subRoot.damageManager.damagePoints[i].health, subRoot.damageManager.damagePoints[i].damageType, subRoot.damageManager.damagePoints[i].damage));\n}\n}\n\nList<CyclopsFireData> fires = new List<CyclopsFireData>();\nfor (int i = 0; i < subRoot.fireManager.fires.Length; i++) {\nif (subRoot.fireManager.fires[i].active) {\nfires.Add(new CyclopsFireData(subRoot.fireManager.fires[i].health, subRoot.fireManager.fires[i].damageType, subRoot.fireManager.fires[i].damage));\n}\n}\n\nCyclopsDamage packet = new CyclopsDamage(subId, damageInfo, damagePoints, fires);\npacketSender.Send(packet);\n}", "CodeBleu_score": 50.18191278389047}]}
{"instance_id": "03223c10109f", "generation_result": [{"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t\tforeach (Entity entity in dirtyEntities) {\n\t\tif (entity.Id == null) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (entity.ParentId != null) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tGameObject entityGameObject = GameObject.Find(entity.Id.ToString());\n\t\tif (entityGameObject != null) {\n\t\t\tGameObject.Destroy(entityGameObject);\n\t\t}\n\t}\n}", "CodeBleu_score": 53.83875100439259}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t\tif (dirtyEntities.Count == 0) {\n\t\treturn;\n\t}\n\n\tList<Entity> entitiesToRemove = new();\n\tforeach (Entity entity in dirtyEntities) {\n\t\tif (entity.ParentId != null) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (entity.Id.Type == EntityType.World) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tGameObject entityGameObject = GameObject.Find(entity.Id.ToString());\n\t\tif (entityGameObject != null) {\n\t\t\tentitiesToRemove.Add(entity);\n\t\t}\n\t}\n\n\tif (entitiesToRemove.Count > 0) {\n\t\tDestroyEntities(entitiesToRemove);\n\t}\n}", "CodeBleu_score": 44.950788028277245}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t\tforeach (Entity entity in dirtyEntities) {\n\t\tif (entity.ParentId != null) {\n\t\t\tcontinue;\n\t\t}\n\t\tGameObject gameObject = entity.GameObject;\n\t\tif (gameObject != null) {\n\t\t\tDestroy(gameObject);\n\t\t}\n\t}\n}", "CodeBleu_score": 44.687252922570835}]}
{"instance_id": "990abe8e473e", "generation_result": [{"code": "private void AddPendingParentEntity(Entity entity){\n\tif (!pendingParentEntitiesByParentId.TryGetValue(entity.ParentId, out List<Entity> pendingEntities)) {\npendingEntities = new List<Entity>();\npendingParentEntitiesByParentId[entity.ParentId] = pendingEntities;\n}\npendingEntities.Add(entity);\n}", "CodeBleu_score": 81.58477890891686}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t\tif (!pendingParentEntitiesByParentId.TryGetValue(entity.ParentId, out List<Entity> pendingEntities)) {\n\t\tpendingEntities = new List<Entity>();\n\t\tpendingParentEntitiesByParentId[entity.ParentId] = pendingEntities;\n\t}\n\tpendingEntities.Add(entity);\n}", "CodeBleu_score": 81.64991121458493}, {"code": "private void AddPendingParentEntity(Entity entity){\n\tif (!pendingParentEntitiesByParentId.TryGetValue(entity.ParentId, out List<Entity> pendingEntities)) {\npendingEntities = new List<Entity>();\npendingParentEntitiesByParentId.Add(entity.ParentId, pendingEntities);\n}\npendingEntities.Add(entity);\n}", "CodeBleu_score": 69.32986773316856}]}
{"instance_id": "a885fbb1f085", "generation_result": [{"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t\tif (cooldown <= clawArm.pickupCooldown) {\n\t\tclawArm.BroadcastArmAction(ArmActions.START_USE_TOOL);\n\t}\n\telse if (cooldown <= clawArm.punchCooldown) {\n\t\tclawArm.BroadcastArmAction(ArmActions.ALT_HIT);\n\t}\n\telse {\n\t\tDebug.LogError(clawArm.name + \\\" has a cooldown that is not a multiple of the pickup or punch cooldowns.\\\");\n\t}\n}", "CodeBleu_score": 24.59332283611798}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t\tif (cooldown < clawArm.pickupTime) {\n\t\tclawArm.action = ExosuitClawArm.Action.START_USE_TOOL;\n\t} else if (cooldown < clawArm.pickupTime + clawArm.punchTime) {\n\t\tclawArm.action = ExosuitClawArm.Action.ALT_HIT;\n\t} else {\n\t\tDebug.LogError(\\\"ExosuitClawArm.BroadcastClawUse: Cooldown time does not match pickup or punch time\\\");\n\t}\n\tBroadcastArmAction(clawArm);\n}", "CodeBleu_score": 37.60589568911071}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t\tif (cooldown <= clawArm.pickupTime) {\n\t\tclawArm.action = ExosuitClawArm.ActionType.START_USE_TOOL;\n\t} else if (cooldown <= clawArm.punchTime) {\n\t\tclawArm.action = ExosuitClawArm.ActionType.ALT_HIT;\n\t} else {\n\t\tDebug.LogError(\\\"ExosuitModuleEvent.BroadcastClawUse: Cooldown time \\\" + cooldown + \\\" does not match either pickup or punch time.\\\");\n\t}\n\n\tBroadcastArmAction(clawArm);\n}", "CodeBleu_score": 35.332980006747604}]}
{"instance_id": "e390441c8dc2", "generation_result": [{"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t\tif (gameObject.TryGetComponent(out RemotePlayerIdentifier remotePlayerIdentifier)) {\n\t\treturn;\n\t}\n\n\tif (!gameObject.TryGetComponent(out InventoryItem inventoryItem)) {\n\t\tLog.Error($\"Could not find InventoryItem component on GameObject {gameObject.name}\");\n\t\treturn;\n\t}\n\n\tif (!parent.TryGetComponent(out InventoryContainer inventoryContainer)) {\n\t\tLog.Error($\"Could not find InventoryContainer component on GameObject {parent.name}\");\n\t\treturn;\n\t}\n\n\tif (!inventoryContainer.TryGetOwnerId(out NitroxId ownerId)) {\n\t\t// Error logging is done in the function\n\t\treturn;\n\t}\n\n\tif (!entityMetadataManager.TryGetMetadata(techType, out EntityMetadata entityMetadata)) {\n\t\tLog.Error($\"Could not find metadata for techType {techType}\");\n\t\treturn;\n\t}\n\n\tif (packetSender.Send(new EntitySpawnedByClient(\n\t\tnew InstalledBatteryEntity(\n\t\t\townerId,\n\t\t\tentityMetadata.Id,\n\t\t\tinventoryItem.Id\n\t\t)\n\t))) {\n\t\tLog.Debug($\"Sent: Added battery ({entityMetadata.Id}) to container {parent.name}\");\n\t}\n}", "CodeBleu_score": 47.88516860248135}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t\t// We don't want to broadcast that event if it's from another player's inventory\n\tif (parent.GetComponentInParent<RemotePlayerIdentifier>(true)) {\n\t\treturn;\n\t}\n\n\tif (!gameObject.TryGetIdOrWarn(out NitroxId id)) {\n\t\treturn;\n\t}\n\n\tif (!InventoryContainerHelper.TryGetOwnerId(parent, out NitroxId ownerId)) {\n\t\t// Error logging is done in the function\n\t\treturn;\n\t}\n\n\tif (packetSender.Send(new EntitySpawnedByClient(id, ownerId, techType))) {\n\t\tLog.Debug($\"Sent: Added battery ({id}) of type {techType} to container {parent.gameObject.GetFullHierarchyPath()}\");\n\t}\n}", "CodeBleu_score": 56.8861721962794}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t\t// We don't want to broadcast that event if it's from another player's inventory\n\tif (parent.GetComponentInParent<RemotePlayerIdentifier>(true)) {\n\t\treturn;\n\t}\n\n\tif (!gameObject.TryGetIdOrWarn(out NitroxId batteryId)) {\n\t\treturn;\n\t}\n\n\tif (!InventoryContainerHelper.TryGetOwnerId(parent, out NitroxId ownerId)) {\n\t\t// Error logging is done in the function\n\t\treturn;\n\t}\n\n\tif (packetSender.Send(new EntitySpawnedByClient(batteryId, ownerId, techType, entityMetadataManager))) {\n\t\tLog.Debug($\"Sent: Added battery ({batteryId}) of type {techType} to container {parent.gameObject.GetFullHierarchyPath()}\");\n\t}\n}", "CodeBleu_score": 54.97893452998321}]}
{"instance_id": "a87b772a8e5a", "generation_result": [{"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t\tif (gameObject == null) {\n\t\treturn;\n\t}\n\n\tPickingUpObject = gameObject;\n\tif (PickingUpObject.GetComponent<RemoteControl>() != null) {\n\t\tPickingUpObject.GetComponent<RemoteControl>().Remove();\n\t}\n\n\tNitroxId id = gameObject.GetComponent<NitroxId>();\n\tif (id == null) {\n\t\tid = gameObject.AddComponent<NitroxId>();\n\t}\n\n\tif (id.Id == Guid.Empty) {\n\t\tid.Generate();\n\t}\n\n\tentities.StopBroadcasting();\n\tInventoryItem item = gameObject.ConvertToInventoryItem(techType);\n\titem.Spawned = true;\n\tDebug.Log(gameObject.name + \" has been picked up.\");\n\tPickupItem pickupItem = new PickupItem(item);\n\tpacketSender.Send(pickupItem);\n\tPickingUpObject = null;\n}", "CodeBleu_score": 47.17058982513973}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t\tif (gameObject == null) {\n\t\tDebug.LogWarning(\"PickedUp called with null game object\");\n\t\treturn;\n\t}\n\n\tif (gameObject.GetComponent<RemoteControl>() != null) {\n\t\tgameObject.GetComponent<RemoteControl>().Remove();\n\t}\n\n\tif (gameObject.GetComponent<NitroxId>() == null) {\n\t\tgameObject.AddComponent<NitroxId>();\n\t}\n\n\tPickingUpObject = gameObject;\n\tentityMetadataManager.StopBroadcasting();\n\tgameObject.transform.SetParent(null);\n\tgameObject.GetComponent<NitroxId>().SetAsSpawned();\n\tDebug.Log(\"Picked up \" + gameObject.name);\n\tGameObject.Find(\"GameLogic\").GetComponent<GameLogic>().LogPickup(gameObject.name, techType);\n\tpacketSender.Send(new PickupItem(gameObject.GetComponent<NitroxId>().Id, gameObject.transform.position.ToDto(), gameObject.transform.rotation.ToDto()));\n\tPickingUpObject = null;\n}", "CodeBleu_score": 40.852781591349306}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t\tif (PickingUpObject != null) {\n\t\tthrow new InvalidOperationException(\"You can't pick up two objects at the same time.\");\n\t}\n\n\tPickingUpObject = gameObject;\n\tPickingUpObject.GetComponent<RemoteControl>().Remove();\n\n\tNitroxId nitroxId = gameObject.GetComponent<NitroxId>();\n\tif (nitroxId == null) {\n\t\tnitroxId = gameObject.AddComponent<NitroxId>();\n\t}\n\n\tnitroxId.Set(techType);\n\tgameObject.GetComponent<EntityPositionBroadcasting>().Stop();\n\tInventoryItem inventoryItem = gameObject.ConvertToInventoryItem();\n\tinventoryItem.Spawned = true;\n\tLog.Debug(\"Picked up {0}.\", gameObject.name);\n\tPickupItem pickupItem = new PickupItem(inventoryItem);\n\tpacketSender.Send(pickupItem);\n\tPickingUpObject = null;\n}", "CodeBleu_score": 46.440150201375516}]}
{"instance_id": "b6d1e68114e1", "generation_result": [{"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t\tNitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\n\tOptional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n\tstring classId = gameObject.GetComponent<PrefabIdentifier>().ClassId;\n\n\tList<Entity> childrenEntities = GetPrefabChildren(gameObject, id, entityMetadataManager).ToList();\n\tInventoryItemEntity inventoryItemEntity = new(gameObject.transform.ToWorldDto(), 0, classId, false, id, gameObject.GetComponent<TechTag>().type.ToDto(), metadata.OrNull(), null, childrenEntities);\n\n\tif (gameObject.TryGetComponent(out Battery battery)) {\n\t\tinventoryItemEntity.battery = new(battery.capacity, battery.charge);\n\t}\n\n\treturn inventoryItemEntity;\n}", "CodeBleu_score": 51.82158055266013}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t\tNitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\n\tOptional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n\tstring classId = gameObject.GetComponent<PrefabIdentifier>().ClassId;\n\tTechType techType = gameObject.GetComponent<TechTag>()?.type ?? TechType.None;\n\n\tList<Entity> childrenEntities = GetPrefabChildren(gameObject, id, entityMetadataManager).ToList();\n\n\t// If the object is dropped in the water, it'll be parented to a CellRoot so we let it as WorldEntity (see Items.Dropped)\n\t// PlaceTool's object is located under GlobalRoot or under a CellRoot (we differentiate both by giving a different type)\n\t// Because objects under CellRoots must only spawn when visible while objects under GlobalRoot must be spawned at all times\n\tswitch (gameObject.AliveOrNull()) {\n\t\tcase not null when IsGlobalRootObject(gameObject):\n\t\t\treturn new GlobalRootEntity(gameObject.transform.ToWorldDto(), 0, classId, true, id, techType.ToDto(), metadata.OrNull(), null, childrenEntities);\n\t\tcase not null when Player.main.AliveOrNull()?.GetCurrentSub().AliveOrNull()?.TryGetNitroxId(out NitroxId parentId) == true:\n\t\t\treturn new GlobalRootEntity(gameObject.transform.ToLocalDto(), 0, classId, true, id, techType.ToDto(), metadata.OrNull(), parentId, childrenEntities);\n\t\tdefault:\n\t\t\t// If the object is not under a SubRoot nor in GlobalRoot, it'll be under a CellRoot but we still want to remember its state\n\t\t\treturn new PlacedWorldEntity(gameObject.transform.ToWorldDto(), 0, classId, true, id, techType.ToDto(), metadata.OrNull(), null, childrenEntities);\n\t}\n}", "CodeBleu_score": 56.82716055932614}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t\tNitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\n\tOptional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n\tstring classId = gameObject.GetComponent<PrefabIdentifier>().ClassId;\n\tTechType techType = gameObject.GetComponent<TechTag>()?.type ?? TechType.None;\n\n\tList<Entity> childrenEntities = GetPrefabChildren(gameObject, id, entityMetadataManager).ToList();\n\tInventoryItemEntity inventoryItemEntity;\n\n\t// If the object is dropped in the water, it'll be parented to a CellRoot so we let it as WorldEntity (see Items.Dropped)\n\t// PlaceTool's object is located under GlobalRoot or under a CellRoot (we differentiate both by giving a different type)\n\t// Because objects under CellRoots must only spawn when visible while objects under GlobalRoot must be spawned at all times\n\tswitch (gameObject.AliveOrNull()) {\n\t\tcase not null when IsGlobalRootObject(gameObject):\n\t\t\tinventoryItemEntity = new GlobalRootEntity(gameObject.transform.ToWorldDto(), 0, classId, true, id, techType.ToDto(), metadata.OrNull(), null, childrenEntities);\n\t\t\tbreak;\n\t\tcase not null when Player.main.AliveOrNull()?.GetCurrentSub().AliveOrNull()?.TryGetNitroxId(out NitroxId parentId) == true:\n\t\t\tinventoryItemEntity = new GlobalRootEntity(gameObject.transform.ToLocalDto(), 0, classId, true, id, techType.ToDto(), metadata.OrNull(), parentId, childrenEntities);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t// If the object is not under a SubRoot nor in GlobalRoot, it'll be under a CellRoot but we still want to remember its state\n\t\t\tinventoryItemEntity = new PlacedWorldEntity(gameObject.transform.ToWorldDto(), 0, classId, true, id, techType.ToDto(), metadata.OrNull(), null, childrenEntities);\n\t\t\tbreak;\n\t}\n\n\treturn inventoryItemEntity;\n}", "CodeBleu_score": 57.252275294945456}]}
{"instance_id": "e416d51a7af7", "generation_result": [{"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\tthis.multiplayerSession = multiplayerSession;\nthis.packetSender = packetSender;\nthis.throttledPacketSender = throttledPacketSender;\nthis.body = new Lazy<GameObject>(GetBody);\nthis.playerModel = new Lazy<GameObject>(GetPlayerModel);\nthis.bodyPrototype = new Lazy<GameObject>(GetBodyPrototype);\nthis.Permissions = new Perms();\n}", "CodeBleu_score": 48.94831726856916}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t\tthis.multiplayerSession = multiplayerSession;\n\tthis.packetSender = packetSender;\n\tthis.throttledPacketSender = throttledPacketSender;\n\tthis.body = new Lazy<GameObject>(() => multiplayerSession.PlayerSettings.Body);\n\tthis.playerModel = new Lazy<GameObject>(() => multiplayerSession.PlayerSettings.PlayerModel);\n\tthis.bodyPrototype = new Lazy<GameObject>(() => multiplayerSession.PlayerSettings.BodyPrototype);\n\tthis.Permissions = new Perms();\n}", "CodeBleu_score": 57.73723649595739}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\tthis.multiplayerSession = multiplayerSession;\nthis.packetSender = packetSender;\nthis.throttledPacketSender = throttledPacketSender;\nthis.body = new Lazy<GameObject>(GetBody);\nthis.playerModel = new Lazy<GameObject>(GetPlayerModel);\nthis.bodyPrototype = new Lazy<GameObject>(GetBodyPrototype);\n\nPermissions = new Perms();\n}", "CodeBleu_score": 49.10635355322185}]}
{"instance_id": "def56af985df", "generation_result": [{"code": "private GameObject CreateBodyPrototype{\n\tget {\nvar head = Player.main.RequireGameObject(\\\"head\\\");\nvar headRenderer = head.GetComponent<Renderer>();\nif (!headRenderer.enabled) {\nheadRenderer.enabled = true;\n}\nvar body = Object.Instantiate(Player.main.body.gameObject, Vector3.zero, Quaternion.identity);\nvar headShadow = head.RequireComponent<ShadowCastingMode>();\nheadShadow.enabled = true;\nheadShadow.shadowCastingMode = ShadowCastingMode.On;\nbody.name = \\\"RemotePlayerPrototype\\\";\nbody.SetActive(false);\nforeach (Transform child in body.transform) {\nif (child.name == \\\"body_items\\\") {\nforeach (Transform item in child) {\nObject.Destroy(item.gameObject);\n}\n}\n}\nreturn body;\n}\n}", "CodeBleu_score": 32.834322732982}, {"code": "private GameObject CreateBodyPrototype{\n\tget {\nvar head = Player.main.head.RequireGameObject(\\\"head\\\");\nvar headRenderer = head.RequireComponent<Renderer>();\nheadRenderer.shadowCastingMode = ShadowCastingMode.On;\nheadRenderer.receiveShadows = true;\n\nvar body = Object.Instantiate(Player.main.body.RequireGameObject(\\\"body\\\"), Vector3.zero, Quaternion.identity);\nbody.transform.parent = null;\nbody.transform.localPosition = Vector3.zero;\nbody.transform.localRotation = Quaternion.identity;\nbody.transform.localScale = Vector3.one;\nbody.name = \\\"RemotePlayerPrototype\\\";\n\nforeach (var item in body.GetComponentsInChildren<Item>()) {\nObject.Destroy(item.gameObject);\n}\n\nreturn body;\n}\n}", "CodeBleu_score": 30.903313665458064}, {"code": "private GameObject CreateBodyPrototype{\n\tget {\nif (!PlayerId.HasValue) {\nreturn null;\n}\n\nvar body = Body;\nvar head = body.transform.Find(\\\"head\\\");\nhead.GetComponent<Renderer>().shadowCastingMode = ShadowCastingMode.On;\nvar bodyClone = Object.Instantiate(body);\nbodyClone.name = \\\"RemotePlayerPrototype\\\";\nbodyClone.SetActive(false);\nforeach (var item in bodyClone.GetComponentsInChildren<Item>()) {\nObject.Destroy(item.gameObject);\n}\nreturn bodyClone;\n}\n}", "CodeBleu_score": 33.38954285740395}]}
{"instance_id": "e9bd7f669aed", "generation_result": [{"code": "void ICacheable.Save(BinaryWriter bw){\n\t\tbw.Write(TypeName);\n\tbw.Write(Location);\n\tMetadata.Save(bw);\n\tforeach (var process in Processes) {\n\t\tprocess.Save(bw);\n\t}\n\n\tforeach (var dependency in Dependencies) {\n\t\tdependency.Save(bw);\n\t}\n\n\tforeach (var incompatibility in Incompatibilities) {\n\t\tincompatibility.Save(bw);\n\t}\n\n\tbw.Write(TargettedBepInExVersion.ToString());\n}", "CodeBleu_score": 29.597807382731112}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\t\tbw.Write(TypeName);\n\tbw.Write(Location);\n\tbw.Write(Metadata);\n\tbw.Write(Processes);\n\tbw.Write(Dependencies);\n\tbw.Write(Incompatibilities);\n\tbw.Write(TargettedBepInExVersion);\n}", "CodeBleu_score": 15.85009167032335}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\tbw.Write(TypeName);\nbw.Write(Location);\nbw.Write(Metadata);\nbw.Write(Processes);\nbw.Write(Dependencies);\nbw.Write(Incompatibilities);\nbw.Write(TargettedBepInExVersion);\n}", "CodeBleu_score": 15.728506459970548}]}
{"instance_id": "a7e51620987d", "generation_result": [{"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t\tvar pluginType = pluginAssembly.GetTypes().FirstOrDefault(t => typeof(BaseUnityPlugin).IsAssignableFrom(t));\n\n\tif (pluginType == null) {\n\t\tLogger.Log(LogLevel.Error, $\"Unable to find a plugin type in {pluginInfo.Name} assembly!\");\n\t\treturn null;\n\t}\n\n\tvar plugin = (BasePlugin)Activator.CreateInstance(pluginType);\n\n\tplugin.Info = pluginInfo;\n\tplugin.Chainloader = this;\n\n\tPluginLoad?.Invoke(pluginInfo, pluginAssembly, plugin);\n\n\tplugin.Load();\n\n\treturn plugin;\n}", "CodeBleu_score": 47.57425352036804}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t\tType pluginType = pluginAssembly.GetTypes().FirstOrDefault(t => typeof(BaseUnityPlugin).IsAssignableFrom(t));\n\n\tif (pluginType == null) {\n\t\tLogger.Log(LogLevel.Error, $\"Plugin \\\"{pluginInfo.Name}\\\" does not contain a plugin class that inherits from BaseUnityPlugin\");\n\t\treturn null;\n\t}\n\n\tBasePlugin pluginInstance = (BasePlugin)Activator.CreateInstance(pluginType);\n\tpluginInstance.Info = pluginInfo;\n\tpluginInstance.PluginPath = pluginInfo.Path;\n\tpluginInstance.Chainloader = this;\n\n\tPluginLoad?.Invoke(pluginInfo, pluginAssembly, pluginInstance);\n\n\tpluginInstance.Load();\n\n\treturn pluginInstance;\n}", "CodeBleu_score": 54.991760728389316}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t\tif (pluginInfo == null) throw new ArgumentNullException(nameof(pluginInfo));\n\tif (pluginAssembly == null) throw new ArgumentNullException(nameof(pluginAssembly));\n\n\tType pluginType = pluginAssembly.GetType(pluginInfo.Type, false, true);\n\tif (pluginType == null) {\n\t\tthrow new InvalidOperationException(\n\t\t\t$\"Could not find plugin type {pluginInfo.Type} in plugin assembly {pluginAssembly.FullName}.\");\n\t}\n\n\tBasePlugin plugin = (BasePlugin) Activator.CreateInstance(pluginType);\n\tplugin.Info = pluginInfo;\n\tplugin.Chainloader = this;\n\n\tPluginLoad?.Invoke(pluginInfo, pluginAssembly, plugin);\n\n\tplugin.Load();\n\n\treturn plugin;\n}", "CodeBleu_score": 48.046765423671644}]}
{"instance_id": "0925dc086c01", "generation_result": [{"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t\tif (TrampolineMethod != null) return TrampolineMethod;\n\tPrepare();\n\treturn GenerateTrampoline(signature);\n}", "CodeBleu_score": 29.203404167950513}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t\tif (TrampolineMethod != null) return TrampolineMethod;\n\tPrepare();\n\tif (signature == null) {\n\t\tTrampolineMethod = typeof(NativeDetourAttribute).GetMethod(nameof(NativeDetourAttribute.GenerateTrampoline),\n\t\t\tBindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static);\n\t} else {\n\t\tTrampolineMethod = typeof(NativeDetourAttribute).GetMethod(nameof(NativeDetourAttribute.GenerateTrampoline),\n\t\t\tBindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static, null, new Type[] { typeof(MethodBase) }, null);\n\t}\n\treturn TrampolineMethod;\n}", "CodeBleu_score": 43.14065685457613}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t\tif (TrampolineMethod != null) return TrampolineMethod;\n\n\tPrepare();\n\tif (signature == null) TrampolineMethod = TrampolineGenerator.GenerateTrampoline(TrampolinePtr);\n\telse TrampolineMethod = TrampolineGenerator.GenerateTrampoline(TrampolinePtr, signature);\n\n\treturn TrampolineMethod;\n}", "CodeBleu_score": 50.533139925964555}]}
{"instance_id": "cfab5c23610e", "generation_result": [{"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\tstring resourceName = LocalizationFilePrefix + code + \\\".json\\\";\n\n\tusing Stream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(resourceName);\n\tif (stream is null) throw new NullReferenceException();\n\n\tusing StreamReader reader = new(stream);\n\tstring json = reader.ReadToEnd();\n\treturn JsonSerializer.Deserialize<Dictionary<string, string>>(json);\n}", "CodeBleu_score": 22.598235632203593}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\tvar assembly = Assembly.GetExecutingAssembly();\n\tvar stream = assembly.GetManifestResourceStream(LocalizationFilePrefix + code + \\\".json\\\");\n\tif (stream == null) {\n\t\tthrow new NullReferenceException(\\\"Language file not found.\\\");\n\t}\n\ttry {\n\t\treturn JsonSerializer.Deserialize<Dictionary<string, string>>(stream);\n\t} catch (JsonException e) {\n\t\tthrow new JsonException(\\\"Failed to deserialize language file.\\\", e);\n\t}\n}", "CodeBleu_score": 47.327522534414896}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\tstring resourceName = LocalizationFilePrefix + code + \\\".json\\\";\n\tusing Stream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(resourceName);\n\tif (stream == null) {\n\t\tthrow new NullReferenceException();\n\t}\n\treturn JsonSerializer.Deserialize<Dictionary<string, string>>(stream);\n}", "CodeBleu_score": 21.14563566415028}]}
{"instance_id": "9978bd31d199", "generation_result": [{"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t\tint expressionCount = 0;\n\n\tfor (int i = 0; i < nodes.Count; i++) {\n\t\tif (nodes[i] is ParserRuleContext context) {\n\t\t\tVisit(context);\n\t\t\texpressionCount++;\n\t\t}\n\t}\n\n\treturn expressionCount;\n}", "CodeBleu_score": 29.770352667425794}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\tint expressionCount = 0;\nforeach (IParseTree node in nodes) {\nif (node is ParserRuleContext) {\nVisit(node);\nexpressionCount++;\n}\n}\nreturn expressionCount;\n}", "CodeBleu_score": 39.82633646499577}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\tint expressionCount = 0;\nfor (int i = 0; i < nodes.Count; i++) {\nvar node = nodes[i];\nif (node is ParserRuleContext) {\nVisit(node);\nexpressionCount++;\n}\n}\nreturn expressionCount;\n}", "CodeBleu_score": 34.29821682512213}]}
{"instance_id": "8f9bf9ee575a", "generation_result": [{"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t\t// First, visit all of the nodes, which are either terminal text\n\t// nodes or expressions. if they're expressions, we evaluate them,\n\t// and inject a positional reference into the final string.\n\tint expressionCount = this.GenerateCodeForExpressionsInFormattedText(context.text());\n\n\t// Next, visit the header, and get the line ID.\n\tint lineID = this.VisitHeader(context.header());\n\n\t// Emit the RunLine opcode, with the line ID and expression count.\n\tthis.compiler.Emitter.Emit(OpCode.RunLine, lineID, expressionCount);\n\n\treturn 0;\n}", "CodeBleu_score": 28.396238847515438}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\tvar lineID = \"\";\nvar expressionCount = 0;\n\nvar text = context.text();\nif (text != null) {\nvar lineText = text.GetText();\n\nvar expressionCount = GenerateCodeForExpressionsInFormattedText(text.children);\n\n// get the line ID, if there is one\nvar hasID = context.ID() != null;\nif (hasID) {\nlineID = context.ID().GetText();\n}\n\n// emit the RunLine opcode\nvar runLineInstruction = new Yarn.Instruction.RunLine();\nrunLineInstruction.LineID = lineID;\nrunLineInstruction.Parameters = new List<string>(expressionCount + 1);\nrunLineInstruction.Parameters.Add(lineText);\n\nfor (int i = 0; i < expressionCount; i++) {\nrunLineInstruction.Parameters.Add(string.Format(CultureInfo.InvariantCulture, \"exp{0}\", i));\n}\n\nthis.compiler.AddInstruction(runLineInstruction);\n}\n\nreturn 0;\n}", "CodeBleu_score": 36.891274362915574}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\tint expressionCount = this.GenerateCodeForExpressionsInFormattedText(context.text.children);\n\nstring lineID = null;\n\n// If there's a line_statement_starting_tag, we need to get the line ID from\n// it.\nif (context.line_statement_starting_tag() != null) {\nlineID = context.line_statement_starting_tag().line_id().GetText();\n}\n\nif (lineID == null) {\nthrow new InvalidOperationException($\"Line statement without a line ID tag.\");\n}\n\n// Emit a RunLine opcode with the line ID and expression count.\nthis.compiler.Emitter.Emit(Opcode.RunLine);\nthis.compiler.Emitter.Emit(lineID);\nthis.compiler.Emitter.Emit(expressionCount);\n\nreturn 0;\n}", "CodeBleu_score": 47.85038325165814}]}
{"instance_id": "b70d033fed9c", "generation_result": [{"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t", "CodeBleu_score": 1.9737119786745916}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t\tvar results = Enumerable.Empty<Diagnostic>();\n\n\t// Get all the commands used in the file\n\tvar commands = yarnFile.GetCommands();\n\n\t// For each command used in the file, check if it's defined in the project's known commands\n\tforeach (var command in commands) {\n\t\tif (!string.IsNullOrEmpty(command.Name) && !KnownCommands.CommandExists(command.Name)) {\n\t\t\t// If the command isn't defined, generate a diagnostic\n\t\t\tvar diagnostic = new Diagnostic {\n\t\t\t\tSeverity = DiagnosticSeverity.Warning,\n\t\t\t\tMessage = $\"Command '{command.Name}' is not defined in the project's known commands.\",\n\t\t\t\tCode = \"YAR0001\",\n\t\t\t\tRange = command.Range,\n\t\t\t\tData = new JObject {\n\t\t\t\t\t{ \"commandName\", command.Name }\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tresults = results.Append(diagnostic);\n\t\t}\n\t}\n\n\treturn results;\n}", "CodeBleu_score": 24.874747160189656}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t\tvar results = Enumerable.Empty<Diagnostic>();\n\n\tforeach (var command in yarnFile.Commands) {\n\t\tif (command.Name.Text == \"stop\") {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// If the command is not in the list of known commands, create a diagnostic\n\t\tif (!KnownCommands.AllCommands.Any(kc => kc.Name == command.Name.Text)) {\n\t\t\tvar diagnostic = new Diagnostic {\n\t\t\t\tMessage = $\"Command '{command.Name.Text}' is not defined.\",\n\t\t\t\tSeverity = DiagnosticSeverity.Warning,\n\t\t\t\tCode = \"YAR0001\",\n\t\t\t\tSource = \"Yarn\",\n\t\t\t\tRange = command.Name.Range,\n\t\t\t\tData = JToken.FromObject(new {\n\t\t\t\t\tCommand = command.Name.Text,\n\t\t\t\t}),\n\t\t\t};\n\n\t\t\tresults = results.Append(diagnostic);\n\t\t}\n\t}\n\n\treturn results;\n}", "CodeBleu_score": 25.323783628435493}]}
{"instance_id": "9a072876f358", "generation_result": [{"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t\tvar options = new CodeActionRegistrationOptions();\n\toptions.DocumentSelector = DocumentSelectorFactory.Create();\n\toptions.CodeActionKinds = new Container<CodeActionKind>(CodeActionKind.QuickFix);\n\toptions.ResolveProvider = false;\n\treturn options;\n}", "CodeBleu_score": 49.58037482354772}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t\treturn new CodeActionRegistrationOptions() {\n\t\tDocumentSelector = DocumentSelectorFactory.Create(),\n\t\tResolveProvider = false,\n\t\tCodeActionKinds = new Container<CodeActionKind>(CodeActionKind.QuickFix)\n\t};\n}", "CodeBleu_score": 67.80232249464194}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t\tvar codeActionOptions = new CodeActionOptions {\n\t\tCodeActionKinds = new Container<CodeActionKind>(CodeActionKind.QuickFix)\n\t};\n\n\tvar resolveProvider = false;\n\tif (capability != null && capability.ResolveProvider != null) {\n\t\tresolveProvider = capability.ResolveProvider.Value;\n\t}\n\n\treturn new CodeActionRegistrationOptions {\n\t\tDocumentSelector = DocumentSelectorFactory.Create(),\n\t\tCodeActionOptions = codeActionOptions,\n\t\tResolveProvider = resolveProvider\n\t};\n}", "CodeBleu_score": 52.36104372922343}]}
{"instance_id": "7b61df32aee3", "generation_result": [{"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t\tif (variables.TryGetValue(variableName, out object value)) {\n\t\tif (value is T variable) {\n\t\t\tresult = variable;\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthrow new ArgumentException($\"Variable {variableName} is not of type {typeof(T).Name}\");\n\t\t}\n\t} else {\n\t\tresult = default(T);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 47.33266185597629}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t\tif (!variables.TryGetValue(variableName, out object value)) {\n\t\tresult = default(T);\n\t\treturn false;\n\t}\n\n\tif (value is T) {\n\t\tresult = (T)value;\n\t\treturn true;\n\t} else {\n\t\tthrow new ArgumentException($\"Variable {variableName} is not of type {typeof(T).Name}\");\n\t}\n}", "CodeBleu_score": 44.693218467852034}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t\tif (variables.TryGetValue(variableName, out object value)) {\n\t\tif (value is T typedValue) {\n\t\t\tresult = typedValue;\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthrow new ArgumentException($\"Variable {variableName} is not of type {typeof(T).FullName}\");\n\t\t}\n\t} else {\n\t\tresult = default(T);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 47.9672268704652}]}
{"instance_id": "7201488347ef", "generation_result": [{"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t", "CodeBleu_score": 2.543243612731241}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t", "CodeBleu_score": 2.543243612731241}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t", "CodeBleu_score": 2.543243612731241}]}
{"instance_id": "59b7b5a9c34a", "generation_result": [{"code": "public int FindUniqueID(string UniqueID){\n\t\tif (string.IsNullOrEmpty(UniqueID)) {\n\t\treturn -1;\n\t}\n\n\tfor (int i = 0; i < m_LoopListBankDataList.Count; ++i) {\n\t\tif (m_LoopListBankDataList[i].UniqueID == UniqueID) {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\treturn -1;\n}", "CodeBleu_score": 87.70511946502874}, {"code": "public int FindUniqueID(string UniqueID){\n\t\tif(string.IsNullOrEmpty(UniqueID)) {\n\t\treturn -1;\n\t}\n\n\tfor(int i = 0; i < m_LoopListBankDataList.Count; ++i) {\n\t\tif(m_LoopListBankDataList[i].UniqueID == UniqueID) {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\treturn -1;\n}", "CodeBleu_score": 77.0605053571406}, {"code": "public int FindUniqueID(string UniqueID){\n\t\tif(string.IsNullOrEmpty(UniqueID)) {\n\t\treturn -1;\n\t}\n\n\tfor(int i = 0; i < m_LoopListBankDataList.Count; ++i) {\n\t\tif(m_LoopListBankDataList[i].UniqueID == UniqueID) {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\treturn -1;\n}", "CodeBleu_score": 77.0605053571406}]}
{"instance_id": "2b85606238aa", "generation_result": [{"code": "public void AddContent(object newContent){\n\t\tLoopListBankData TempCustomData = null;\n\tTempCustomData = new LoopListBankData();\n\tTempCustomData.Content = newContent;\n\tTempCustomData.UniqueID = System.Guid.NewGuid().ToString();\n\tm_LoopListBankDataList.Add(TempCustomData);\n}", "CodeBleu_score": 75.57772656562517}, {"code": "public void AddContent(object newContent){\n\t\tLoopListBankData TempCustomData = new LoopListBankData();\n\tTempCustomData.Content = newContent;\n\tTempCustomData.UniqueID = System.Guid.NewGuid().ToString();\n\tm_LoopListBankDataList.Add(TempCustomData);\n}", "CodeBleu_score": 86.63570189947525}, {"code": "public void AddContent(object newContent){\n\tLoopListBankData TempCustomData = new LoopListBankData();\nTempCustomData.Content = newContent;\nTempCustomData.UniqueID = System.Guid.NewGuid().ToString();\nm_LoopListBankDataList.Add(TempCustomData);\n}", "CodeBleu_score": 86.60913298611337}]}
{"instance_id": "34e593106991", "generation_result": [{"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t\tm_IndexID = idx;\n\tm_Content = content;\n\tif (m_IsUpdateGameObjectName) {\n\t\tstring name = m_PrefabName + \\\"_\\\" + idx.ToString();\n\t\tif (!string.IsNullOrEmpty(ClickUniqueID)) {\n\t\t\tname = name + \\\"_\\\" + ClickUniqueID;\n\t\t}\n\t\tgameObject.name = name;\n\t}\n}", "CodeBleu_score": 56.362788813528276}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t\tm_IndexID = idx;\n\tm_Content = content;\n\tif (m_IsUpdateGameObjectName) {\n\t\tstring newName = string.Format(\"{0} {1}\", m_PrefabName, idx);\n\t\tif (m_UniqueID != \"\") {\n\t\t\tnewName = string.Format(\"{0} {1}\", m_UniqueID, idx);\n\t\t}\n\t\tgameObject.name = newName;\n\t}\n}", "CodeBleu_score": 61.16174559983738}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t\tm_IndexID = idx;\n\tm_Content = content;\n\tif (m_IsUpdateGameObjectName) {\n\t\tstring name = m_PrefabName + \\\"_\\\" + idx.ToString();\n\t\tif (string.IsNullOrEmpty(ClickUniqueID) == false) {\n\t\t\tname = name + \\\"_\\\" + ClickUniqueID;\n\t\t}\n\t\tgameObject.name = name;\n\t}\n}", "CodeBleu_score": 55.999722555041664}]}
{"instance_id": "6b6a6cc329cc", "generation_result": [{"code": "private void OnButtonAddDataClickk(){\n\t\tint count = 0;\n\tint.TryParse(m_InputFieldAddData.text, out count);\n\tcount = count < 1 ? 1 : count;\n\n\tfor (int i = 0; i < count; i++) {\n\t\tm_ListBank.Add(Random.Range(0, 10));\n\t}\n\n\tm_ListBank.UpdateTotalCount();\n\tm_ListBank.RefreshCells();\n}", "CodeBleu_score": 34.501710718828264}, {"code": "private void OnButtonAddDataClickk(){\n\t\tint addCount = 0;\n\tif (!int.TryParse(m_InputFieldSrollToCell_AddCount.text, out addCount) || addCount < 1) {\n\t\taddCount = 1;\n\t}\n\n\tfor (int i = 0; i < addCount; i++) {\n\t\tm_ListBank.m_DataList.Add(Random.Range(0, 10));\n\t}\n\n\tm_ListBank.m_ScrollRect.content.sizeDelta = new Vector2(m_ListBank.m_ScrollRect.content.sizeDelta.x, m_ListBank.m_ScrollRect.content.sizeDelta.y + (addCount * m_ListBank.m_CellPrefab.rect.height));\n\tm_ListBank.RefreshCells();\n}", "CodeBleu_score": 47.37479016273074}, {"code": "private void OnButtonAddDataClickk(){\n\t\tint addCount = 1;\n\tif (m_InputFieldSrollToCell_AddCount.text.Length > 0) {\n\t\taddCount = int.Parse(m_InputFieldSrollToCell_AddCount.text);\n\t}\n\tif (addCount < 1) {\n\t\taddCount = 1;\n\t}\n\n\tfor (int i = 0; i < addCount; i++) {\n\t\tm_ListBank.m_DataList.Add(Random.Range(0, 10));\n\t}\n\n\tm_InitOnStart.UpdateTotalCount();\n\tm_InitOnStart.RefreshAllCells();\n}", "CodeBleu_score": 42.555373345654836}]}
{"instance_id": "209961c9eb8e", "generation_result": [{"code": "protected override void ClearTempPool(){\n\t\tif (m_Content.childCount != itemTypeStart + itemTypeEnd + deletedItemTypeStart + deletedItemTypeEnd) {\n\t\tDebug.LogError(\"Content pool size mismatch. Expected: \" + (itemTypeStart + itemTypeEnd + deletedItemTypeStart + deletedItemTypeEnd) + \", Actual: \" + m_Content.childCount);\n\t\treturn;\n\t}\n\n\tif (deletedItemTypeStart > 0) {\n\t\tfor (int i = 0; i < deletedItemTypeStart; i++) {\n\t\t\tprefabSource.ReturnObject(m_Content.GetChild(i).gameObject);\n\t\t}\n\t\tdeletedItemTypeStart = 0;\n\t}\n\n\tif (deletedItemTypeEnd > 0) {\n\t\tfor (int i = m_Content.childCount - deletedItemTypeEnd; i < m_Content.childCount; i++) {\n\t\t\tprefabSource.ReturnObject(m_Content.GetChild(i).gameObject);\n\t\t}\n\t\tdeletedItemTypeEnd = 0;\n\t}\n}", "CodeBleu_score": 52.16368156997901}, {"code": "protected override void ClearTempPool(){\n\t\tint childCount = m_Content.childCount;\n\tif (childCount != itemTypeStart + itemTypeEnd + deletedItemTypeStart + deletedItemTypeEnd) {\n\t\tDebug.LogError(\"The content has \" + childCount + \" children but there are \" + (itemTypeStart + itemTypeEnd + deletedItemTypeStart + deletedItemTypeEnd) + \" items in the pool. Did you forget to call ReturnToTempPool?\");\n\t}\n\tif (deletedItemTypeStart > 0) {\n\t\tfor (int i = 0; i < deletedItemTypeStart; i++) {\n\t\t\tTransform child = m_Content.GetChild(i);\n\t\t\tprefabSource.ReturnObject(child.gameObject);\n\t\t}\n\t\tdeletedItemTypeStart = 0;\n\t}\n\tif (deletedItemTypeEnd > 0) {\n\t\tfor (int i = childCount - deletedItemTypeEnd; i < childCount; i++) {\n\t\t\tTransform child = m_Content.GetChild(i);\n\t\t\tprefabSource.ReturnObject(child.gameObject);\n\t\t}\n\t\tdeletedItemTypeEnd = 0;\n\t}\n}", "CodeBleu_score": 46.260009556387686}, {"code": "protected override void ClearTempPool(){\n\t\tif (m_Content.childCount != itemTypeStart + itemTypeEnd + deletedItemTypeStart + deletedItemTypeEnd) {\n\t\tDebug.LogError(\"Content pool size mismatch. Expected \" + (itemTypeStart + itemTypeEnd) + \" but found \" + m_Content.childCount + \".\");\n\t\treturn;\n\t}\n\tif (deletedItemTypeStart > 0) {\n\t\tfor (int i = 0; i < deletedItemTypeStart; i++) {\n\t\t\tRectTransform nextItem = m_Content.GetChild(0) as RectTransform;\n\t\t\tnextItem.SetSiblingIndex(itemTypeStart - deletedItemTypeStart + i);\n\t\t\tprefabSource.ReturnObject(nextItem.gameObject);\n\t\t}\n\t\tdeletedItemTypeStart = 0;\n\t}\n\tif (deletedItemTypeEnd > 0) {\n\t\tfor (int i = 0; i < deletedItemTypeEnd; i++) {\n\t\t\tRectTransform nextItem = m_Content.GetChild(m_Content.childCount - 1) as RectTransform;\n\t\t\tnextItem.SetSiblingIndex(itemTypeStart + itemTypeEnd - deletedItemTypeEnd + i);\n\t\t\tprefabSource.ReturnObject(nextItem.gameObject);\n\t\t}\n\t\tdeletedItemTypeEnd = 0;\n\t}\n}", "CodeBleu_score": 45.85891244637538}]}
{"instance_id": "c6bb290de2b3", "generation_result": [{"code": "public void AnticipateScale(Vector3 newScale){\n\tif (NetworkManager.ShutdownInProgress || !NetworkManager.IsListening) {\nreturn;\n}\ntransform.localScale = newScale;\nm_AnticipatedTransform.Scale = newScale;\nif (CanCommitToTransform) {\nm_AuthoritativeTransform.Scale = newScale;\n}\n\nm_PreviousAnticipatedTransform = m_AnticipatedTransform;\n\nm_LastAnticipaionCounter = NetworkManager.AnticipationSystem.AnticipationCounter;\nm_LastAnticipationTime = NetworkManager.LocalTime.Time;\n\nm_SmoothDuration = 0;\nm_CurrentSmoothTime = 0;\n}", "CodeBleu_score": 76.86006671428503}, {"code": "public void AnticipateScale(Vector3 newScale){\n\t\tif (NetworkManager.ShutdownInProgress || !NetworkManager.IsListening) {\n\t\treturn;\n\t}\n\ttransform.localScale = newScale;\n\tm_AnticipatedTransform.Scale = newScale;\n\tif (CanCommitToTransform) {\n\t\tm_AuthoritativeTransform.Scale = newScale;\n\t}\n\n\tm_PreviousAnticipatedTransform = m_AnticipatedTransform;\n\n\tm_LastAnticipaionCounter = NetworkManager.AnticipationSystem.AnticipationCounter;\n\tm_LastAnticipationTime = NetworkManager.LocalTime.Time;\n\n\tm_SmoothDuration = 0;\n\tm_CurrentSmoothTime = 0;\n}", "CodeBleu_score": 76.93867675397685}, {"code": "public void AnticipateScale(Vector3 newScale){\n\tif (NetworkManager.ShutdownInProgress || !NetworkManager.IsListening) {\nreturn;\n}\ntransform.localScale = newScale;\nm_AnticipatedTransform.Scale = newScale;\nif (CanCommitToTransform) {\nm_AuthoritativeTransform.Scale = newScale;\n}\n\nm_PreviousAnticipatedTransform = m_AnticipatedTransform;\n\nm_LastAnticipaionCounter = NetworkManager.AnticipationSystem.AnticipationCounter;\nm_LastAnticipationTime = NetworkManager.LocalTime.Time;\n\nm_SmoothDuration = 0;\nm_CurrentSmoothTime = 0;\n}", "CodeBleu_score": 76.86006671428503}]}
{"instance_id": "d67d3c80dd00", "generation_result": [{"code": "private void FlushMessages(){\n\t", "CodeBleu_score": 0.843141799522195}, {"code": "private void FlushMessages(){\n\t", "CodeBleu_score": 0.843141799522195}, {"code": "private void FlushMessages(){\n\t#if UNITY_EDITOR\n            if (m_NetworkAnimator.IsServer)\n            {\n                m_NetworkAnimator.SendAnimationParameters(m_NetworkAnimator.m_CachedServerAnimationParameterValues);\n                m_NetworkAnimator.SendAnimationTriggers(m_NetworkAnimator.m_CachedServerAnimationTriggerValues);\n            }\n#endif\n            if (m_NetworkAnimator.IsClient)\n            {\n                m_NetworkAnimator.SendAnimationParameters(m_NetworkAnimator.m_CachedClientAnimationParameterValues);\n                m_NetworkAnimator.SendAnimationTriggers(m_NetworkAnimator.m_CachedClientAnimationTriggerValues);\n            }\n\n#if UNITY_EDITOR\n            if (m_NetworkAnimator.IsServer)\n            {\n                m_NetworkAnimator.m_CachedServerAnimationParameterValues.Clear();\n                m_NetworkAnimator.m_CachedServerAnimationTriggerValues.Clear();\n            }\n#endif\n            if (m_NetworkAnimator.IsClient)\n            {\n                m_NetworkAnimator.m_CachedClientAnimationParameterValues.Clear();\n                m_NetworkAnimator.m_CachedClientAnimationTriggerValues.Clear();\n            }\n        }", "CodeBleu_score": 44.724896913911664}]}
{"instance_id": "0632b2f27d22", "generation_result": [{"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t\tif (updateStage == NetworkUpdateStage.PreUpdate) {\n\t\tif (m_IsServer || m_NetworkAnimator.IsOwner) {\n\t\t\tFlushMessages();\n\t\t}\n\t} else if (updateStage == NetworkUpdateStage.PostUpdate) {\n\t\tif (m_IsServer || m_NetworkAnimator.IsOwner) {\n\t\t\tProcessAnimationUpdates();\n\t\t\tProcessParameterUpdates();\n\t\t\tProcessTriggerUpdates();\n\t\t}\n\t}\n}", "CodeBleu_score": 12.407840210306828}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t#if ENABLE_UNITY_COLLECTIONS_CHECKS\n            if (m_NetworkAnimator == null)\n            {\n                throw new NullReferenceException($\"NetworkAnimator was null on {nameof(NetworkAnimatorStateChangeHandler)}.{nameof(NetworkUpdate)}\");\n            }\n#endif\n            if (updateStage == NetworkUpdateStage.PreUpdate)\n            {\n                if (m_NetworkAnimator.IsLocalPlayer)\n                {\n                    FlushMessages();\n                }\n                else if (m_NetworkAnimator.IsServer)\n                {\n                    FlushMessages();\n                }\n            }\n            else if (updateStage == NetworkUpdateStage.PostUpdate)\n            {\n                if (m_NetworkAnimator.IsServer)\n                {\n                    // If the animator is server authoritative, then we need to check for changes\n                    // and send updates to clients\n                    if (m_NetworkAnimator.ServerAuthoritative)\n                    {\n                        // Check for changes\n                        ProcessAnimatorChanges();\n\n                        // Send updates to clients\n                        SendAnimationUpdates();\n                        SendParameterUpdates();\n                        SendTriggerUpdates();\n                    }\n                }\n            }\n        }", "CodeBleu_score": 37.008528614904655}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t\tif (m_NetworkAnimator.IsLocalPlayer) {\n\t\tFlushMessages();\n\t}\n\n\tif (updateStage == NetworkUpdateStage.PreUpdate) {\n\t\tif (m_NetworkAnimator.IsServer) {\n\t\t\tFlushMessages();\n\t\t}\n\t}\n\n\tif (updateStage == NetworkUpdateStage.PreUpdate) {\n\t\tif (m_NetworkAnimator.IsOwner) {\n\t\t\tFlushMessages();\n\t\t}\n\t}\n\n\tif (updateStage == NetworkUpdateStage.PostUpdate) {\n\t\tif (m_NetworkAnimator.IsServer) {\n\t\t\tif (m_IsServer) {\n\t\t\t\tFlushMessages();\n\t\t\t}\n\t\t}\n\t}\n\n\tif (updateStage == NetworkUpdateStage.PostLateUpdate) {\n\t\tif (m_NetworkAnimator.IsServer) {\n\t\t\tif (m_IsServer) {\n\t\t\t\tFlushMessages();\n\t\t\t}\n\t\t}\n\t}\n\n\tif (updateStage == NetworkUpdateStage.PreUpdate) {\n\t\tif (m_NetworkAnimator.IsServer) {\n\t\t\tif (m_IsServer) {\n\t\t\t\tProcessParameterUpdates();\n\t\t\t}\n\t\t}\n\t}\n\n\tif (updateStage == NetworkUpdateStage.PostUpdate) {\n\t\tif (m_NetworkAnimator.IsServer) {\n\t\t\tif (m_IsServer) {\n\t\t\t\tProcessAnimatorChanges();\n\t\t\t}\n\t\t}\n\t}\n\n\tif (updateStage == NetworkUpdateStage.PostLateUpdate) {\n\t\tif (m_NetworkAnimator.IsServer) {\n\t\t\tif (m_IsServer) {\n\t\t\t\tProcessAnimatorChanges();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 35.87452752568095}]}
{"instance_id": "d78874b65b32", "generation_result": [{"code": "private void UpdateOwnershipAuthority(){\n\t\tif (m_NetworkTransform.IsServerAuthoritative()) {\n\t\tm_IsAuthority = true;\n\t} else if (base.hasAuthority) {\n\t\tm_IsAuthority = true;\n\t} else {\n\t\tm_IsAuthority = false;\n\t}\n\n\tif (m_IsAuthority) {\n\t\tm_Rigidbody.interpolation = m_OriginalInterpolation;\n\t\tm_Rigidbody.isKinematic = false;\n\t} else {\n\t\tm_Rigidbody.interpolation = RigidbodyInterpolation.None;\n\t\tm_Rigidbody.isKinematic = true;\n\t}\n}", "CodeBleu_score": 32.47094841027038}, {"code": "private void UpdateOwnershipAuthority(){\n\t\tm_IsAuthority = m_IsServerAuthoritative || IsOwner;\n\n\tif (m_IsAuthority)\n\t{\n\t\t// If we are the server or owner, set the Rigidbody to be kinematic and use the NetworkTransform's interpolation strategy\n\t\tm_Rigidbody.isKinematic = true;\n\t\tm_Rigidbody.interpolation = m_OriginalInterpolation;\n\t}\n\telse\n\t{\n\t\t// If we are not the server or owner, set the Rigidbody to be dynamic and interpolation to none\n\t\tm_Rigidbody.isKinematic = false;\n\t\tm_Rigidbody.interpolation = RigidbodyInterpolation.None;\n\t}\n}", "CodeBleu_score": 32.85134234220223}, {"code": "private void UpdateOwnershipAuthority(){\n\t\tif (m_IsServerAuthoritative) {\n\t\t// If we are server authoritative, then we just set our own authority state to whatever the NetworkTransform says.\n\t\tm_IsAuthority = m_NetworkTransform.IsServerAuthoritative();\n\t} else {\n\t\t// If we are owner authoritative, then we need to set our own authority state to whatever the NetworkTransform says,\n\t\t// but only if we have ownership.\n\t\tm_IsAuthority = m_NetworkTransform.IsServerAuthoritative() && NetworkManager.Instance.IsServer && NetworkManager.Instance.LocalClientId == NetworkManager.Instance.ServerClientId && NetworkManager.Instance.LocalClientId == NetworkManager.Instance.LocalClientId;\n\t}\n\n\t// Update the Rigidbody's kinematic and interpolation properties\n\tm_Rigidbody.isKinematic = !m_IsAuthority;\n\tm_Rigidbody.interpolation = m_IsAuthority ? m_OriginalInterpolation : (m_NetworkTransform.Interpolate ? RigidbodyInterpolation.None : m_OriginalInterpolation);\n}", "CodeBleu_score": 48.5800608478121}]}
{"instance_id": "304fe1278db9", "generation_result": [{"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t", "CodeBleu_score": 2.8253030377269566}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t", "CodeBleu_score": 2.8253030377269566}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t", "CodeBleu_score": 2.8253030377269566}]}
{"instance_id": "452b860a7dde", "generation_result": [{"code": "static void GenerateCLRBindingByAnalysis(){\n\t\\tvar clrBinding = new ILRuntimeCLRBinding();\n\\tclrBinding.GenerateCLRBinding(new List<Type>() { typeof(CLRBinding) });\n\\tAssetDatabase.Refresh();\n}", "CodeBleu_score": 10.347312846059737}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t\n#if DEBUG\n    var start = DateTime.Now;\n    UnityEngine.Debug.Log($\"GenerateCLRBindingByAnalysis: Started at {start}\");\n#endif\n\n    var path = EditorUtility.OpenFilePanel(\"Generate CLR Binding\", \"\", \"dll\");\n    if (string.IsNullOrEmpty(path))\n    {\n        UnityEngine.Debug.Log(\"GenerateCLRBindingByAnalysis: Open file panel cancelled\");\n        return;\n    }\n\n    // Create a new appdomain\n    var appdomain = new ILRuntime.Runtime.Enviorment.AppDomain();\n\n    // Load an assembly into the appdomain\n    var assembly = appdomain.LoadAssembly(path);\n\n    // Initialize the CLR binding, please do this after LoadAssembly\n    // Note: If you want to load an assembly without initialize the CLR binding, please use the following code to create the domain instead:\n    // var appdomain = new ILRuntime.Runtime.Enviorment.AppDomain();\n    // var assembly = appdomain.LoadAssembly(path, null, new ILRuntime.Mono.Cecil.Pdb.PdbReaderProvider());\n    ILRuntime.Runtime.CLRBinding.BindingCodeGenerator.GenerateBindingCode(appdomain, assembly, \"Assets/JEngine/Helper/Binding/BindingCode/BindingCode.cs\");\n\n    // Force to generate new scripts\n    AssetDatabase.Refresh();\n\n#if DEBUG\n    var end = DateTime.Now;\n    UnityEngine.Debug.Log($\"GenerateCLRBindingByAnalysis: Ended at {end}, total time elapsed {end - start}\");\n#endif\n}", "CodeBleu_score": 20.076207079088785}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t\n#if DEBUG\n    UnityEngine.Debug.Log(\"CLR Binding Generator By Analysis\");\n#endif\n    // Create a new AppDomain\n    AppDomain myDomain = AppDomain.CreateDomain(\"MyDomain\");\n\n    // Load an assembly into the domain\n    Assembly assembly = Assembly.LoadFrom(Application.dataPath + \"/../Library/ScriptAssemblies/Game.dll\");\n\n    // Initialize the ILRuntime environment\n    ILRuntime.Runtime.Enviorment.AppDomain app = new ILRuntime.Runtime.Enviorment.AppDomain(myDomain);\n\n    // Binding all\n    ILRuntime.Runtime.Enviorment.CrossAppDomainDelegate.Initialize(app);\n\n#if DEBUG\n    UnityEngine.Debug.Log(\"Binding all...\");\n#endif\n    // Generate the CLR binding code\n    BindingCodeGenerator.GenerateBindingCode(app, assembly, \"Assets/Script/Binding/BindingCode/BindingCode.cs\");\n\n#if DEBUG\n    UnityEngine.Debug.Log(\"Binding all complete!!!\");\n#endif\n    // Destroy the domain\n    AppDomain.Unload(myDomain);\n\n    AssetDatabase.Refresh();\n}", "CodeBleu_score": 20.573556792486276}]}
{"instance_id": "b8990031b636", "generation_result": [{"code": "public override void OnInspectorGUI(){\n\t", "CodeBleu_score": 0.925914944286159}, {"code": "public override void OnInspectorGUI(){\n\t\tserializedObject.Update();\n\n\tDrawDefaultInspector();\n\n\tEditorGUILayout.Space();\n\tEditorGUILayout.LabelField(\\\"Config Helper\\\", EditorStyles.boldLabel);\n\n\tEditorGUILayout.HelpBox(\\\"You can get the config helper directly.\\\", MessageType.Info);\n\n\tEditorGUILayout.BeginVertical(\\\"box\\\");\n\tEditorGUILayout.LabelField(\\\"Config Helper Count\\\", m_ConfigHelperInfo.Count.ToString());\n\tEditorGUILayout.LabelField(\\\"Cached Bytes Size\\\", m_CachedBytesSize.intValue.ToString());\n\tEditorGUILayout.EndVertical();\n\n\tserializedObject.ApplyModifiedProperties();\n\tEditorApplication.RepaintProjectWindow();\n}", "CodeBleu_score": 38.15919209628112}, {"code": "public override void OnInspectorGUI(){\n\t#if UNITY_5_6_OR_NEWER\n    serializedObject.UpdateIfRequiredOrScript();\n#else\n    serializedObject.UpdateIfDirtyOrScript();\n#endif\n\n    m_ConfigHelperInfo.Update(serializedObject);\n\n    DrawDefaultInspector();\n\n    EditorGUI.BeginDisabledGroup(EditorApplication.isPlaying || EditorApplication.isPaused);\n    {\n        DrawProperty(m_EnableLoadConfigUpdateEvent);\n        DrawProperty(m_EnableLoadConfigDependencyAssetEvent);\n        DrawProperty(m_CachedBytesSize);\n\n        m_ConfigHelperInfo.Draw();\n    }\n    EditorGUI.EndDisabledGroup();\n\n    serializedObject.ApplyModifiedProperties();\n\n    if (EditorApplication.isPlaying && PrefabUtility.GetPrefabType(target) == PrefabType.Prefab) {\n        ConfigComponent config = (ConfigComponent)target;\n        EditorGUI.BeginDisabledGroup(true);\n        {\n            GUILayout.Label(string.Format(\"Config count: {0}\", config.ConfigCount.ToString()));\n            GUILayout.Label(string.Format(\"Cached bytes size: {0}\", EditorUtility.FormatBytes(config.CachedBytesSize)));\n        }\n        EditorGUI.EndDisabledGroup();\n    }\n\n    EditorApplication.RepaintProjectWindow();\n}", "CodeBleu_score": 56.258079076722936}]}
{"instance_id": "6453adc2daa8", "generation_result": [{"code": "public static void DefaultScenes(){\n\t\tHashSet<string> defaultSceneNames = new HashSet<string>(s_DefaultSceneNames);\n\tList<EditorBuildSettingsScene> defaultScenes = new List<EditorBuildSettingsScene>();\n\tforeach (string sceneName in defaultSceneNames) {\n\t\tEditorBuildSettingsScene editorBuildSettingsScene = new EditorBuildSettingsScene(sceneName, true);\n\t\tdefaultScenes.Add(editorBuildSettingsScene);\n\t}\n\tEditorBuildSettings.scenes = defaultScenes.ToArray();\n\tDebug.Log(Utility.Text.Format(\\\"Build settings scenes set to default: {0}.\\\", defaultScenes.Count));\n}", "CodeBleu_score": 48.91643986148666}, {"code": "public static void DefaultScenes(){\n\t\tHashSet<string> defaultSceneNames = new HashSet<string>(s_DefaultSceneNames);\n\tList<EditorBuildSettingsScene> editorBuildSettingsScenes = new List<EditorBuildSettingsScene>();\n\tforeach (EditorBuildSettingsScene editorBuildSettingsScene in EditorBuildSettings.scenes) {\n\t\tif (defaultSceneNames.Contains(editorBuildSettingsScene.path)) {\n\t\t\teditorBuildSettingsScenes.Add(editorBuildSettingsScene);\n\t\t\tdefaultSceneNames.Remove(editorBuildSettingsScene.path);\n\t\t}\n\t}\n\tforeach (string sceneName in defaultSceneNames) {\n\t\teditorBuildSettingsScenes.Add(new EditorBuildSettingsScene(sceneName, true));\n\t}\n\tEditorBuildSettings.scenes = editorBuildSettingsScenes.ToArray();\n\tDebug.Log(Utility.Text.Format(\\\"Build settings scenes have been set to the default. ({0} scenes)\\\", editorBuildSettingsScenes.Count));\n}", "CodeBleu_score": 56.752449797480445}, {"code": "public static void DefaultScenes(){\n\t\tHashSet<string> defaultSceneNames = new HashSet<string>(s_DefaultSceneNames);\n\tList<EditorBuildSettingsScene> editorBuildSettingsScenes = new List<EditorBuildSettingsScene>();\n\tforeach (EditorBuildSettingsScene editorBuildSettingsScene in EditorBuildSettings.scenes) {\n\t\tif (defaultSceneNames.Contains(editorBuildSettingsScene.path)) {\n\t\t\teditorBuildSettingsScenes.Add(editorBuildSettingsScene);\n\t\t\tdefaultSceneNames.Remove(editorBuildSettingsScene.path);\n\t\t}\n\t}\n\tforeach (string defaultSceneName in defaultSceneNames) {\n\t\teditorBuildSettingsScenes.Add(new EditorBuildSettingsScene(defaultSceneName, true));\n\t}\n\tEditorBuildSettings.scenes = editorBuildSettingsScenes.ToArray();\n\tDebug.Log(Utility.Text.Format(\\\"Scenes in Build Settings set to default.\\\"));\n}", "CodeBleu_score": 54.96800479240533}]}
{"instance_id": "e199f1a42526", "generation_result": [{"code": "public void Draw(){\n\t\tEditorGUILayout.BeginHorizontal();\n\tEditorGUILayout.PrefixLabel(m_Name);\n\tm_HelperTypeNameIndex = EditorGUILayout.Popup(m_HelperTypeNameIndex, m_HelperTypeNames);\n\tEditorGUILayout.EndHorizontal();\n\n\tif (m_HelperTypeNameIndex < 0 || m_HelperTypeNameIndex >= m_HelperTypeNames.Length) {\n\t\tEditorGUILayout.PropertyField(m_CustomHelper);\n\n\t\tif (string.IsNullOrEmpty(m_CustomHelper.stringValue)) {\n\t\t\tEditorGUILayout.HelpBox(Utility.Text.Format(\\\"You must select a helper type or set a custom helper for the {0} helper.\\\", m_Name), MessageType.Error);\n\t\t}\n\t}\n}", "CodeBleu_score": 33.26943997118443}, {"code": "public void Draw(){\n\t\tif (m_HelperTypeName == null || m_CustomHelper == null) {\n\t\treturn;\n\t}\n\n\tEditorGUILayout.BeginHorizontal();\n\t{\n\t\tEditorGUILayout.LabelField(m_Name);\n\n\t\tif (m_HelperTypeNames == null) {\n\t\t\tm_HelperTypeNames = GetHelperTypeNames();\n\t\t}\n\n\t\tm_HelperTypeNameIndex = EditorGUILayout.Popup(m_HelperTypeNameIndex, m_HelperTypeNames);\n\n\t\tif (m_HelperTypeNameIndex == m_HelperTypeNames.Length - 1) {\n\t\t\tEditorGUILayout.PropertyField(m_CustomHelper);\n\n\t\t\tif (m_CustomHelper.objectReferenceValue == null) {\n\t\t\t\tEditorGUILayout.HelpBox(Utility.Text.Format(\\\"You must set a custom {0} helper.\\\", m_Name), MessageType.Error);\n\t\t\t}\n\t\t}\n\t}\n\tEditorGUILayout.EndHorizontal();\n}", "CodeBleu_score": 41.79454595342476}, {"code": "public void Draw(){\n\t\tEditorGUILayout.BeginHorizontal();\n\tEditorGUILayout.PrefixLabel(m_Name);\n\tm_HelperTypeNameIndex = EditorGUI.Popup(EditorGUILayout.GetControlRect(), m_HelperTypeNameIndex, m_HelperTypeNames);\n\tif (m_HelperTypeNameIndex < 0 || m_HelperTypeNameIndex >= m_HelperTypeNames.Length) {\n\t\tm_HelperTypeNameIndex = 0;\n\t}\n\tEditorGUILayout.EndHorizontal();\n\tif (m_HelperTypeNameIndex == m_HelperTypeNames.Length - 1) {\n\t\tEditorGUI.BeginChangeCheck();\n\t\tEditorGUILayout.PropertyField(m_CustomHelper);\n\t\tif (EditorGUI.EndChangeCheck()) {\n\t\t\tm_HelperTypeName.stringValue = CustomOptionName;\n\t\t}\n\t}\n\telse {\n\t\tm_HelperTypeName.stringValue = m_HelperTypeNames[m_HelperTypeNameIndex];\n\t}\n\tif (string.IsNullOrEmpty(m_HelperTypeName.stringValue)) {\n\t\tEditorGUILayout.HelpBox(Utility.Text.Format(\\\"You must select a {0} helper type.\\\", m_Name), MessageType.Error);\n\t}\n}", "CodeBleu_score": 41.510218780032034}]}
{"instance_id": "957e0aaa6f72", "generation_result": [{"code": "public static void DisableAllLogs(){\n\t\tstring[] scriptingDefineSymbols = PlayerSettings.GetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup).Split(new char[] { ';' });\n\tfor (int i = scriptingDefineSymbols.Length - 1; i >= 0; i--) {\n\t\tif (scriptingDefineSymbols[i] == EnableLogScriptingDefineSymbol || scriptingDefineSymbols[i] == EnableDebugAndAboveLogScriptingDefineSymbol || scriptingDefineSymbols[i] == EnableInfoAndAboveLogScriptingDefineSymbol || scriptingDefineSymbols[i] == EnableWarningAndAboveLogScriptingDefineSymbol || scriptingDefineSymbols[i] == EnableErrorAndAboveLogScriptingDefineSymbol || scriptingDefineSymbols[i] == EnableFatalAndAboveLogScriptingDefineSymbol || scriptingDefineSymbols[i] == EnableDebugLogScriptingDefineSymbol || scriptingDefineSymbols[i] == EnableInfoLogScriptingDefineSymbol || scriptingDefineSymbols[i] == EnableWarningLogScriptingDefineSymbol || scriptingDefineSymbols[i] == EnableErrorLogScriptingDefineSymbol || scriptingDefineSymbols[i] == EnableFatalLogScriptingDefineSymbol) {\n\t\t\tscriptingDefineSymbols = RemoveAt(scriptingDefineSymbols, i);\n\t\t}\n\t}\n\tPlayerSettings.SetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup, string.Join(new char[] { ';' }, scriptingDefineSymbols));\n}", "CodeBleu_score": 26.416752826190727}, {"code": "public static void DisableAllLogs(){\n\t\tRemoveScriptingDefineSymbol(EnableLogScriptingDefineSymbol);\n\tforeach (string scriptingDefineSymbol in AboveLogScriptingDefineSymbols) {\n\t\tRemoveScriptingDefineSymbol(scriptingDefineSymbol);\n\t}\n\tforeach (string scriptingDefineSymbol in SpecifyLogScriptingDefineSymbols) {\n\t\tRemoveScriptingDefineSymbol(scriptingDefineSymbol);\n\t}\n}", "CodeBleu_score": 49.645070541325566}, {"code": "public static void DisableAllLogs(){\n\t\tRemoveScriptingDefineSymbol(EnableLogScriptingDefineSymbol);\n\tforeach (string scriptingDefineSymbol in AboveLogScriptingDefineSymbols) {\n\t\tRemoveScriptingDefineSymbol(scriptingDefineSymbol);\n\t}\n\tforeach (string scriptingDefineSymbol in SpecifyLogScriptingDefineSymbols) {\n\t\tRemoveScriptingDefineSymbol(scriptingDefineSymbol);\n\t}\n}", "CodeBleu_score": 49.645070541325566}]}
{"instance_id": "8a544c3d9513", "generation_result": [{"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\tGameFrameworkComponent component = s_GameFrameworkComponents.First;\n\twhile (component != null) {\n\t\tif (type.IsInstanceOfType(component)) {\n\t\t\treturn component;\n\t\t}\n\n\t\tcomponent = component.Next;\n\t}\n\n\treturn null;\n}", "CodeBleu_score": 47.641697525127405}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\tGameFrameworkComponent component = s_GameFrameworkComponents.First;\n\twhile (component != null) {\n\t\tif (type.IsInstanceOfType(component.Value)) {\n\t\t\treturn component.Value;\n\t\t}\n\t\tcomponent = component.Next;\n\t}\n\treturn null;\n}", "CodeBleu_score": 45.979075339625645}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\tGameFrameworkComponent component = s_GameFrameworkComponents.First;\n\twhile (component != null) {\n\t\tif (component.GetType() == type) {\n\t\t\treturn component;\n\t\t}\n\t\tcomponent = component.Next;\n\t}\n\treturn null;\n}", "CodeBleu_score": 51.33290405651019}]}
{"instance_id": "ec304512c0e4", "generation_result": [{"code": "public static void Shutdown(ShutdownType shutdownType){\n\t\tif (shutdownType == ShutdownType.None) {\n\t\tLog.Info(\"Shutdown aborted, shutdown type is None.\");\n\t\treturn;\n\t}\n\n\tLog.Info(\"Shutdown game framework, shutdown type is '{0}'.\", shutdownType.ToString());\n\n\tBaseComponent baseComponent = GameEntry.GetComponent<BaseComponent>();\n\tif (baseComponent != null) {\n\t\tbaseComponent.Shutdown();\n\t}\n\n\tGameEntry.Clear();\n\n\tif (shutdownType == ShutdownType.RestartGame) {\n\t\tSceneManager.LoadScene(GameEntry.GameFrameworkSceneId);\n\t} else if (shutdownType == ShutdownType.QuitGame) {\n\t\tApplication.Quit();\n\t}\n}", "CodeBleu_score": 42.012213615555105}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t\tif (shutdownType == ShutdownType.None) {\n\t\treturn;\n\t}\n\n\tLog.Info(\"Shutdown Game Framework...\");\n\n\tBaseComponent baseComponent = GetComponent<BaseComponent>();\n\tif (baseComponent != null) {\n\t\tbaseComponent.Shutdown();\n\t}\n\n\ts_GameFrameworkComponents.Clear();\n\n\tif (shutdownType == ShutdownType.Restart) {\n\t\tLog.Info(\"Restart Game Scene...\");\n\n\t\tSceneManager.LoadScene(GameFrameworkSceneId);\n\t} else if (shutdownType == ShutdownType.Quit) {\n\t\tLog.Info(\"Quit Application...\");\n\n\t\tApplication.Quit();\n\t}\n}", "CodeBleu_score": 53.49790883598593}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t\tif (shutdownType == ShutdownType.None) {\n\t\tLog.Info(\"ShutdownType.None.\");\n\t\treturn;\n\t}\n\n\tLog.Info(\"ShutdownType.{0}.\", shutdownType.ToString());\n\n\tBaseComponent baseComponent = GetComponent<BaseComponent>();\n\tif (baseComponent != null) {\n\t\tbaseComponent.Shutdown();\n\t}\n\n\tClearGameFrameworkComponents();\n\n\tif (shutdownType == ShutdownType.RestartGame) {\n\t\tSceneManager.LoadScene(GameFrameworkSceneId);\n\t}\n\telse if (shutdownType == ShutdownType.QuitGame) {\n\t\tApplication.Quit();\n\t}\n}", "CodeBleu_score": 46.788174816731456}]}
{"instance_id": "5c78a1d4f59d", "generation_result": [{"code": "protected override void Awake(){\n\tbase.Awake();\n\nm_ConfigManager = GameFrameworkEntry.GetModule<IConfigManager>();\nif (m_ConfigManager == null) {\nLog.Fatal(\"Config manager is invalid.\");\nreturn;\n}\n\nm_EventComponent = GameFrameworkEntry.GetModule<EventComponent>();\nif (m_EventComponent == null) {\nLog.Fatal(\"Event component is invalid.\");\nreturn;\n}\n\nm_ConfigManager.ReadDataSuccess += OnReadDataSuccess;\nm_ConfigManager.ReadDataFailure += OnReadDataFailure;\nif (m_EnableLoadConfigUpdateEvent) {\nm_ConfigManager.LoadConfigUpdate += OnLoadConfigUpdate;\n}\nif (m_EnableLoadConfigDependencyAssetEvent) {\nm_ConfigManager.LoadConfigDependencyAsset += OnLoadConfigDependencyAsset;\n}\n}", "CodeBleu_score": 72.38029705527786}, {"code": "protected override void Awake(){\n\t\tbase.Awake();\n\n\tm_ConfigManager = GameFrameworkEntry.GetModule<IConfigManager>();\n\tif (m_ConfigManager == null) {\n\t\tLog.Fatal(\"Config manager is invalid.\");\n\t\treturn;\n\t}\n\n\tm_EventComponent = GameFrameworkEntry.GetModule<EventComponent>();\n\tif (m_EventComponent == null) {\n\t\tLog.Fatal(\"Event component is invalid.\");\n\t\treturn;\n\t}\n\n\tm_ConfigManager.ReadDataSuccess += OnReadDataSuccess;\n\tm_ConfigManager.ReadDataFailure += OnReadDataFailure;\n\n\tif (m_EnableLoadConfigUpdateEvent) {\n\t\tm_ConfigManager.LoadConfigUpdate += OnLoadConfigUpdate;\n\t}\n\n\tif (m_EnableLoadConfigDependencyAssetEvent) {\n\t\tm_ConfigManager.LoadConfigDependencyAsset += OnLoadConfigDependencyAsset;\n\t}\n\n\tif (m_CustomConfigHelper != null) {\n\t\tm_ConfigManager.SetConfigHelper(m_CustomConfigHelper);\n\t}\n\telse {\n\t\tType configHelperType = Type.GetType(m_ConfigHelperTypeName);\n\t\tif (configHelperType == null) {\n\t\t\tLog.Error(\"Can not find config helper type '{0}'.\", m_ConfigHelperTypeName);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!typeof(ConfigHelperBase).IsAssignableFrom(configHelperType)) {\n\t\t\tLog.Error(\"Config helper type '{0}' is invalid.\", m_ConfigHelperTypeName);\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tConstructorInfo constructor = configHelperType.GetConstructor(new Type[] { typeof(int) });\n\t\t\tif (constructor == null) {\n\t\t\t\tLog.Error(\"Can not find config helper constructor with int parameter.\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tm_ConfigManager.SetConfigHelper((ConfigHelperBase)constructor.Invoke(new object[] { m_CachedBytesSize }));\n\t\t}\n\t\tcatch (Exception exception) {\n\t\t\tLog.Error(\"Can not instantiate config helper type '{0}'.\nException message: {1}.\", m_ConfigHelperTypeName, exception.Message);\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 63.348867608418935}, {"code": "protected override void Awake(){\n\t\tbase.Awake();\n\n\tm_ConfigManager = GameEntry.GetModule<IConfigManager>();\n\tif (m_ConfigManager == null) {\n\t\tLog.Fatal(\"Config manager is invalid.\");\n\t\treturn;\n\t}\n\n\tm_EventComponent = GameEntry.GetComponent<EventComponent>();\n\tif (m_EventComponent == null) {\n\t\tLog.Fatal(\"Event component is invalid.\");\n\t\treturn;\n\t}\n\n\tif (m_EnableLoadConfigUpdateEvent) {\n\t\tm_EventComponent.Subscribe(LoadConfigSuccessEventArgs.EventId, OnLoadConfigSuccess);\n\t\tm_EventComponent.Subscribe(LoadConfigFailureEventArgs.EventId, OnLoadConfigFailure);\n\t}\n\n\tif (m_EnableLoadConfigDependencyAssetEvent) {\n\t\tm_EventComponent.Subscribe(LoadConfigDependencyAssetEventArgs.EventId, OnLoadConfigDependencyAsset);\n\t}\n}", "CodeBleu_score": 51.224868365148936}]}
{"instance_id": "fbb36ff9d552", "generation_result": [{"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t", "CodeBleu_score": 18.54045787546793}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t", "CodeBleu_score": 18.54045787546793}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t\tTextAsset textAsset = configAsset as TextAsset;\n\tif (textAsset == null) {\n\t\treturn false;\n\t}\n\n\tstring extension = Path.GetExtension(textAsset.name);\n\tif (extension == BytesAssetExtension) {\n\t\tbyte[] bytes = textAsset.bytes;\n\t\tif (bytes == null || bytes.Length <= 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn configManager.ParseBytes(configAssetName, bytes, userData);\n\t}\n\n\tstring text = textAsset.text;\n\tif (string.IsNullOrEmpty(text)) {\n\t\treturn false;\n\t}\n\n\tstring[] rows = text.Split(new char[] { '\n' }, StringSplitOptions.RemoveEmptyEntries);\n\tif (rows == null || rows.Length <= 0) {\n\t\treturn false;\n\t}\n\n\tint count = rows.Length;\n\tfor (int i = 0; i < count; i++) {\n\t\tstring[] columns = rows[i].Split(ColumnSplitSeparator, StringSplitOptions.RemoveEmptyEntries);\n\t\tif (columns == null || columns.Length != ColumnCount) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tstring configId = columns[0].Trim();\n\t\tstring configType = columns[1].Trim();\n\t\tstring configData = columns[2].Trim();\n\t\tstring configParseData = columns[3].Trim();\n\t\tif (string.IsNullOrEmpty(configId)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (string.IsNullOrEmpty(configType)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (string.IsNullOrEmpty(configData)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (string.IsNullOrEmpty(configParseData)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!configManager.Parse(configId, configType, configData, configParseData, userData)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 47.69517031779981}]}
{"instance_id": "84d744c480ca", "generation_result": [{"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t\ttry {\n\t\tusing (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length, false)) {\n\t\t\tusing (BinaryReader binaryReader = new BinaryReader(memoryStream)) {\n\t\t\t\tint position = 0;\n\t\t\t\tbyte[] buffer = binaryReader.ReadBytes(4);\n\t\t\t\twhile (position < length) {\n\t\t\t\t\tint num2 = BitConverter.ToInt32(buffer, 0);\n\t\t\t\t\tposition += 4;\n\t\t\t\t\tif (num2 <= 0) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tbyte[] buffer2 = binaryReader.ReadBytes(num2);\n\t\t\t\t\t\tposition += num2;\n\t\t\t\t\t\tstring configName = Encoding.UTF8.GetString(buffer2);\n\t\t\t\t\t\tbuffer = binaryReader.ReadBytes(4);\n\t\t\t\t\t\tposition += 4;\n\t\t\t\t\t\tint num3 = BitConverter.ToInt32(buffer, 0);\n\t\t\t\t\t\tposition += 4;\n\t\t\t\t\t\tif (num3 <= 0) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tbyte[] buffer3 = binaryReader.ReadBytes(num3);\n\t\t\t\t\t\t\tposition += num3;\n\t\t\t\t\t\t\tstring configValue = Encoding.UTF8.GetString(buffer3);\n\t\t\t\t\t\t\tif (!configManager.AddConfig(configName, configValue)) {\n\t\t\t\t\t\t\t\tLog.Warning(\"Can not add config with config name '{0}' which may be invalid or duplicate.\", configName);\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\tcatch (Exception exception) {\n\t\tLog.Warning(\"Can not parse config string with exception '{0}'.\", exception);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 63.05011325764451}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t\ttry {\n\t\tint position = startIndex;\n\t\tusing (MemoryStream memoryStream = new MemoryStream(configBytes, position, length, false)) {\n\t\t\tusing (BinaryReader binaryReader = new BinaryReader(memoryStream)) {\n\t\t\t\tstring configLineString;\n\t\t\t\twhile ((configLineString = binaryReader.ReadLine()) != null) {\n\t\t\t\t\tif (configLineString[0] == '#') {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tstring[] splitedLine = configLineString.Split(ColumnSplitSeparator, StringSplitOptions.None);\n\t\t\t\t\tif (splitedLine.Length != ColumnCount) {\n\t\t\t\t\t\tLog.Warning(\"Can not parse config line string '{0}' which column count is invalid.\", configLineString);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tstring configName = splitedLine[1];\n\t\t\t\t\tstring configValue = splitedLine[3];\n\t\t\t\t\tif (!configManager.AddConfig(configName, configValue)) {\n\t\t\t\t\t\tLog.Warning(\"Can not add config with config name '{0}' which may be invalid or duplicate.\", configName);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tcatch (Exception exception) {\n\t\tLog.Warning(\"Can not parse config string with exception '{0}'.\", exception);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 69.31490954249306}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t\ttry {\n\t\tusing (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length, false)) {\n\t\t\tusing (BinaryReader binaryReader = new BinaryReader(memoryStream)) {\n\t\t\t\tint position = 0;\n\t\t\t\twhile (position < length) {\n\t\t\t\t\tbyte configNameLength = binaryReader.ReadByte();\n\t\t\t\t\tposition += 1;\n\t\t\t\t\tif (configNameLength <= 0) {\n\t\t\t\t\t\tLog.Warning(\"Can not parse config line which config name length is invalid.\");\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tbyte[] configNameBytes = binaryReader.ReadBytes(configNameLength);\n\t\t\t\t\tposition += configNameLength;\n\t\t\t\t\tstring configName = Encoding.UTF8.GetString(configNameBytes);\n\t\t\t\t\tbyte configValueLength = binaryReader.ReadByte();\n\t\t\t\t\tposition += 1;\n\t\t\t\t\tif (configValueLength <= 0) {\n\t\t\t\t\t\tLog.Warning(\"Can not parse config line which config value length is invalid.\");\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tbyte[] configValueBytes = binaryReader.ReadBytes(configValueLength);\n\t\t\t\t\tposition += configValueLength;\n\t\t\t\t\tstring configValue = Encoding.UTF8.GetString(configValueBytes);\n\t\t\t\t\tif (!configManager.AddConfig(configName, configValue)) {\n\t\t\t\t\t\tLog.Warning(\"Can not add config with config name '{0}' which may be invalid or duplicate.\", configName);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\tcatch (Exception exception) {\n\t\tLog.Warning(\"Can not parse config with exception '{0}'.\", exception);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 68.79546289718773}]}
{"instance_id": "298bb6fa19a4", "generation_result": [{"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t\tif (m_ResourceComponent == null) {\n\t\tm_ResourceComponent = GameEntry.GetComponent<ResourceComponent>();\n\t}\n\n\tif (m_ResourceComponent != null) {\n\t\tm_ResourceComponent.UnloadAsset(configAsset);\n\t}\n}", "CodeBleu_score": 62.94154702318654}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t\tResourceComponent resourceComponent = m_ResourceComponent;\n\tif (resourceComponent == null) {\n\t\tresourceComponent = GameEntry.GetComponent<ResourceComponent>();\n\t\tif (resourceComponent == null) {\n\t\t\tLog.Error(\"Can not release config asset '{0}' with no resource component.\", configAsset.name);\n\t\t\treturn;\n\t\t}\n\n\t\tm_ResourceComponent = resourceComponent;\n\t}\n\n\tresourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 48.819513183737094}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t\tif (m_ResourceComponent == null) {\n\t\tm_ResourceComponent = GameEntry.GetComponent<ResourceComponent>();\n\t}\n\n\tm_ResourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 49.973540851547504}]}
{"instance_id": "fa2003d95e36", "generation_result": [{"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t ActiveSceneChangedEventArgs activeSceneChangedEventArgs = ReferencePool.Acquire<ActiveSceneChangedEventArgs>();\n activeSceneChangedEventArgs.LastActiveScene = lastActiveScene;\n activeSceneChangedEventArgs.ActiveScene = activeScene;\n return activeSceneChangedEventArgs;\n }", "CodeBleu_score": 81.92971101685804}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t ActiveSceneChangedEventArgs activeSceneChangedEventArgs = ReferencePool.Acquire<ActiveSceneChangedEventArgs>();\n activeSceneChangedEventArgs.LastActiveScene = lastActiveScene;\n activeSceneChangedEventArgs.ActiveScene = activeScene;\n return activeSceneChangedEventArgs;\n}", "CodeBleu_score": 81.9501138789637}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t ActiveSceneChangedEventArgs activeSceneChangedEventArgs = ReferencePool.Acquire<ActiveSceneChangedEventArgs>();\n activeSceneChangedEventArgs.LastActiveScene = lastActiveScene;\n activeSceneChangedEventArgs.ActiveScene = activeScene;\n return activeSceneChangedEventArgs;\n}", "CodeBleu_score": 81.9501138789637}]}
{"instance_id": "aba13f34251c", "generation_result": [{"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t\tif (string.IsNullOrEmpty(sceneAssetName)) {\n\t\tLog.Error(\"Scene asset name is invalid.\");\n\t\treturn;\n\t}\n\n\tif (!sceneAssetName.StartsWith(\"Assets/\", StringComparison.Ordinal) || !sceneAssetName.EndsWith(\".unity\", StringComparison.Ordinal)) {\n\t\tLog.Error(\"Scene asset name '{0}' is invalid.\", sceneAssetName);\n\t\treturn;\n\t}\n\n\tm_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 94.15897435907485}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t\tif (string.IsNullOrEmpty(sceneAssetName)) {\n\t\tLog.Error(\"Scene asset name is invalid.\");\n\t\treturn;\n\t}\n\n\tif (!sceneAssetName.StartsWith(\"Assets/\", StringComparison.Ordinal) || !sceneAssetName.EndsWith(\".unity\", StringComparison.Ordinal)) {\n\t\tLog.Error(\"Scene asset name '{0}' is invalid.\", sceneAssetName);\n\t\treturn;\n\t}\n\n\tm_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 94.15897435907485}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t\tif (string.IsNullOrEmpty(sceneAssetName)) {\n\t\tLog.Error(\"Scene asset name is invalid.\");\n\t\treturn;\n\t}\n\n\tif (!sceneAssetName.StartsWith(\"Assets/\", StringComparison.Ordinal) || !sceneAssetName.EndsWith(\".unity\", StringComparison.Ordinal)) {\n\t\tLog.Error(\"Scene asset name '{0}' is invalid.\", sceneAssetName);\n\t\treturn;\n\t}\n\n\tm_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 94.15897435907485}]}
{"instance_id": "3fe99fba3ce8", "generation_result": [{"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\t// Register all of the modular feature types that we care about.\n\tIModularFeatures::Get().RegisterModularFeature(IBinariesDiffPatchFeature::GetFeatureName(), &BinariesDiffPatchFeature);\n\tIModularFeatures::Get().OnModularFeatureRegistered().AddStatic(&OnBinariesModularFeatureRegistered);\n\tIModularFeatures::Get().OnModularFeatureUnregistered().AddStatic(&OnBinariesModularFeatureUnRegistered);\n}", "CodeBleu_score": 32.76345096207866}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\t// This code will execute after your module is loaded into memory; the exact timing is specified in the .uplugin file per-module\n\tFCoreDelegates::OnModularFeatureRegistered.AddStatic(&OnBinariesModularFeatureRegistered);\n\tFCoreDelegates::OnModularFeatureUnregistered.AddStatic(&OnBinariesModularFeatureUnRegistered);\n\t//FCoreDelegates::OnModularFeatureRegistered.AddLambda([](const FName& Type, IModularFeature* ModularFeature) {\n\t//\tif (!Type.ToString().Equals(BINARIES_DIFF_PATCH_FEATURE_NAME, ESearchCase::IgnoreCase))\n\t//\t\treturn;\n\t//\tIBinariesDiffPatchFeature* Feature = static_cast<IBinariesDiffPatchFeature*>(ModularFeature);\n\t//\tTHotPatcherTemplateHelper::AppendEnumeraters<EBinariesPatchFeature>(TArray<FString>{Feature->GetFeatureName()});\n\t//});\n\t//FCoreDelegates::OnModularFeatureUnregistered.AddLambda([](const FName& Type, IModularFeature* ModularFeature) {\n\t//});\n}", "CodeBleu_score": 7.708952364698569}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\tFBinariesPatchFeatureModule::Get().OnBinariesModularFeatureRegisteredDelegateHandle = FCoreDelegates::OnModularFeatureRegistered.AddRaw(OnBinariesModularFeatureRegistered);\n\tFBinariesPatchFeatureModule::Get().OnBinariesModularFeatureUnRegisteredDelegateHandle = FCoreDelegates::OnModularFeatureUnregistered.AddRaw(OnBinariesModularFeatureUnRegistered);\n\tIModularFeatures::Get().OnModularFeatureRegistered().AddRaw(OnBinariesModularFeatureRegistered);\n\tIModularFeatures::Get().OnModularFeatureUnregistered().AddRaw(OnBinariesModularFeatureUnRegistered);\n\tTHotPatcherTemplateHelper::AppendEnumeraters<EBinariesPatchFeature>(TArray<FString>{});\n}", "CodeBleu_score": 49.36450907399933}]}
{"instance_id": "c702cc0f74b5", "generation_result": [{"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> Result;\n\tTMap<FString, FString> CommandlineParams;\n\tTArray<FString> Tokens, Values;\n\tFString(Commandline).ParseIntoArray(Tokens, TEXT(\" \"), true);\n\tfor (const auto& TokenItem : Tokens) {\n\t\tif (TokenItem.IsEmpty()) {\n\t\t\tcontinue;\n\t\t}\n\t\tFString(TokenItem).ParseIntoArray(Values, TEXT(\"=\"), true);\n\t\tif (Values.Num() != 2) {\n\t\t\tcontinue;\n\t\t}\n\t\tCommandlineParams.Add(Values[0], Values[1]);\n\t}\n\tif (CommandlineParams.Contains(Token)) {\n\t\tconst auto& TokenValue = CommandlineParams[Token];\n\t\tTArray<FString> SplitValues;\n\t\tFString(TokenValue).ParseIntoArray(SplitValues, TEXT(\",\"), true);\n\t\tfor (const auto& Value : SplitValues) {\n\t\t\tif (Value.IsEmpty()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tResult.Add(Value);\n\t\t}\n\t}\n\treturn Result;\n}", "CodeBleu_score": 49.38831439033514}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> Result;\n\tFParse::Value(*Commandline, *Token, Result, true);\n\treturn Result;\n}", "CodeBleu_score": 27.040326912101374}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> Result;\n\tTMap<FString, FString> Params;\n\tFParse::Value(*Commandline, *Token, Params);\n\tif (Params.Contains(Token)) {\n\t\tFString Value = Params[Token];\n\t\tTArray<FString> Values;\n\t\tif (Value.ParseIntoArray(Values, TEXT(\",\"), true)) {\n\t\t\tfor (const auto& Value : Values) {\n\t\t\t\tResult.Add(Value);\n\t\t\t}\n\t\t}\n\t}\n\treturn Result;\n}", "CodeBleu_score": 54.811206967534645}]}
{"instance_id": "6a6382275b1d", "generation_result": [{"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\tFString CmdletName;\n\tif (FApp::IsGame() && FApp::IsBenchmarking())\n\t{\n\t\t// If we are benchmarking, we are running the cook commandlet.\n\t\tCmdletName = TEXT(\"CookCommandlet\");\n\t}\n\telse if (FApp::IsGame() && !FApp::IsBenchmarking())\n\t{\n\t\t// If we are running a game, we are running a cook commandlet if the commandlet name is \"cook\".\n\t\tif (FParse::Value(FCommandLine::Get(), TEXT(\"COMMANDLET=\"), CmdletName) && CmdletName.Equals(TEXT(\"cook\"), ESearchCase::IgnoreCase))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\telse if (!FApp::IsGame() && FApp::IsBenchmarking())\n\t{\n\t\t// If we are running a benchmark, we are running the cook commandlet if the commandlet name is \"cook\".\n\t\tif (FParse::Value(FCommandLine::Get(), TEXT(\"COMMANDLET=\"), CmdletName) && CmdletName.Equals(TEXT(\"cook\"), ESearchCase::IgnoreCase))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\telse if (!FApp::IsGame() && !FApp::IsBenchmarking())\n\t{\n\t\t// If we are running a commandlet, we are running a cook commandlet if the commandlet name is \"cook\".\n\t\tif (FParse::Value(FCommandLine::Get(), TEXT(\"COMMANDLET=\"), CmdletName) && CmdletName.Equals(TEXT(\"cook\"), ESearchCase::IgnoreCase))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 43.446497573420395}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\t// check if a commandlet is running\n\tFString CommandletName;\n\tif (!FApp::IsGame() && FApp::HasCommandlineArg(TEXT(\"Commandlet\"))) {\n\t\tFParse::Value(FCommandLine::Get(), TEXT(\"Commandlet=\"), CommandletName);\n\t}\n\tif (!CommandletName.IsEmpty()) {\n\t\t// check if the commandlet is a cook commandlet\n\t\treturn CommandletName.Equals(TEXT(\"BuildCookRun\"), ESearchCase::IgnoreCase);\n\t}\n\treturn false;\n}", "CodeBleu_score": 38.10878378152389}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\tFString CmdletName;\n\tif (!FParse::Value(FCommandLine::Get(), TEXT(\"COMMANDLET=\"), CmdletName)) {\n\t\treturn false;\n\t}\n\treturn CmdletName.Equals(TEXT(\"BuildCookRun\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 27.507864131519273}]}
{"instance_id": "6888ed47b6be", "generation_result": [{"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t", "CodeBleu_score": 3.891263254644365}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t", "CodeBleu_score": 3.891263254644365}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t", "CodeBleu_score": 3.891263254644365}]}
{"instance_id": "c467af995f29", "generation_result": [{"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\treturn TargetPlatform && (\n\t\tTargetPlatform->PlatformName().StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) ||\n\t\tTargetPlatform->PlatformName().StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) ||\n\t\tTargetPlatform->PlatformName().StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase)\n\t\t);\n}", "CodeBleu_score": 34.15902853466978}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\treturn TargetPlatform->PlatformName().StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase)\n\t\t|| TargetPlatform->PlatformName().StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase)\n\t\t|| TargetPlatform->PlatformName().StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 33.414630375601895}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\treturn TargetPlatform && FParse::Value(*TargetPlatform->PlatformName().ToString(), TEXT(\"IOS\"), ESearchCase::IgnoreCase) || FParse::Value(*TargetPlatform->PlatformName().ToString(), TEXT(\"Mac\"), ESearchCase::IgnoreCase) || FParse::Value(*TargetPlatform->PlatformName().ToString(), TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 37.59106103488639}]}
{"instance_id": "3df342b1c6f8", "generation_result": [{"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t", "CodeBleu_score": 2.897072745291081}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t", "CodeBleu_score": 2.897072745291081}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t", "CodeBleu_score": 2.897072745291081}]}
{"instance_id": "fac8b2878c3c", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\tfor (FPackageWriterRecords::FWriteBulkData& BulkData : Record.BulkData)\n\t{\n\t\tif (BulkData.Type == EBulkDataType::AppendToExports)\n\t\t{\n\t\t\tContext.ExportsBuffers[BulkData.PackageInfo.MultiOutputIndex].Add(FExportBuffer{ BulkData.Data, MoveTemp(BulkData.Regions) });\n\t\t}\n\t\telse\n\t\t{\n\t\t\tContext.OutputFiles.Add(FOutputFile{\n\t\t\t\tBulkData.PackageInfo.PackageName,\n\t\t\t\tBulkData.Data,\n\t\t\t\tMoveTemp(BulkData.Regions),\n\t\t\t\tBulkData.PackageInfo.bHasExports,\n\t\t\t\tBulkData.PackageInfo.bHasAnyHashableDependencies,\n\t\t\t\tBulkData.PackageInfo.bHasAnyAssetRegistryDependency\n\t\t\t});\n\t\t}\n\t}\n}", "CodeBleu_score": 44.568669557219465}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\tContext.BulkData.AddDefaulted(Record.BulkData.Num());\n\tfor (FPackageWriterRecords::FWriteBulkData& BulkData : Record.BulkData)\n\t{\n\t\tif (BulkData.Type == EBulkDataType::ExportPatch)\n\t\t{\n\t\t\tContext.ExportsBuffers[BulkData.Info.MultiOutputIndex].Add(FExportBuffer{ BulkData.Buffer, MoveTemp(BulkData.Regions) });\n\t\t}\n\t\telse\n\t\t{\n\t\t\tContext.BulkData[BulkData.Info.MultiOutputIndex].Add(FBulkDataBuffer{ BulkData.Buffer, MoveTemp(BulkData.Regions), BulkData.Type, BulkData.Info.bInSharedBulkData });\n\t\t}\n\t}\n}", "CodeBleu_score": 45.85003347124321}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\tfor (FPackageWriterRecords::FWriteBulkData& BulkData : Record.BulkData)\n\t{\n\t\tif (BulkData.Type == EBulkDataStorageType::AppendToExports)\n\t\t{\n\t\t\tContext.ExportsBuffers[BulkData.Info.MultiOutputIndex].Add(FExportBuffer{ BulkData.Buffer, MoveTemp(BulkData.Regions) });\n\t\t}\n\t\telse\n\t\t{\n\t\t\tContext.OutputFiles.Add(FOutputFile{ BulkData.Info.Filename, BulkData.Buffer, MoveTemp(BulkData.Regions), EPackageSaveFileFlags::COMPRESS_ZLIB });\n\t\t}\n\t}\n}", "CodeBleu_score": 43.13310505807836}]}
{"instance_id": "bf46051105c9", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tif (Record.bCompletedExportsArchiveForDiff) {\n\t\t// Already Added in CompleteExportsArchiveForDiff\n\t\treturn;\n\t}\n\tfor (FExportBuffer& ExportBuffer : Context.ExportsBuffers) {\n\t\tif (ExportBuffer.Regions.Num() == 0) {\n\t\t\tExportBuffer.Buffer.Add(FExportBundle::GetPackageFileTag());\n\t\t}\n\t}\n}", "CodeBleu_score": 39.17353517655825}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tif (Record.bCompletedExportsArchiveForDiff) {\n\t\t// Already Added in CompleteExportsArchiveForDiff\n\t\treturn;\n\t}\n\n\t// Create a footer buffer with the package file tag\n\tTArray<uint8> FooterBuffer;\n\tFFileHelper::SerializeArray(FooterBuffer, &PackageFileTag, sizeof(PackageFileTag));\n\n\t// Add the footer buffer to each package's export buffers in the context\n\tfor (FPackageWriterRecords::FWritePackage& Package : Record.Packages) {\n\t\tContext.ExportsBuffers[Package.Info.MultiOutputIndex].Add(FExportBuffer{ FooterBuffer, MoveTemp(Package.Regions) });\n\t}\n}", "CodeBleu_score": 68.48555572966706}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tif (Record.bCompletedExportsArchiveForDiff) {\n\t\t// Already Added in CompleteExportsArchiveForDiff\n\t\treturn;\n\t}\n\n\tTArray<FExportBuffer>& ExportsBuffers = Context.ExportsBuffers[0];\n\tfor (FExportBuffer& Buffer : ExportsBuffers) {\n\t\tif (Buffer.Buffer.Num() > 0) {\n\t\t\t// Already has a footer\n\t\t\tcontinue;\n\t\t}\n\n\t\tFString Tag = FPackageFileTag::TagToString(FPackageFileTag::PACKAGE_FILE_TAG_ExportBundle);\n\t\tBuffer.Buffer.Add(Tag);\n\t}\n}", "CodeBleu_score": 52.47064438235848}]}
{"instance_id": "c0966eddf1ee", "generation_result": [{"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n\t//Cast the character's movement component to UGDCharacterMovementComponent.\n\tUGDCharacterMovementComponent* CharacterMovement = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\n\tif (CharacterMovement) {\n\t\t//Save the character's sprinting and aiming down sights (ADS) requests into the move.\n\t\tSavedRequestToStartSprinting = CharacterMovement->RequestToStartSprinting;\n\t\tSavedRequestToStartADS = CharacterMovement->RequestToStartADS;\n\t}\n}", "CodeBleu_score": 98.53943584024914}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n\tAGDCharacterBase* Owner = Cast<AGDCharacterBase>(Character);\n\tif (!Owner) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"%s() No Owner\"), *FString(__FUNCTION__));\n\t\treturn;\n\t}\n\n\tif (!Owner->IsAlive()) {\n\t\treturn;\n\t}\n\n\tif (Owner->GetAbilitySystemComponent()->HasMatchingGameplayTag(FGameplayTag::RequestGameplayTag(FName(\"State.Debuff.Stun\")))) {\n\t\treturn;\n\t}\n\n\tif (RequestToStartSprinting) {\n\t\tSavedRequestToStartSprinting = true;\n\t}\n\n\tif (RequestToStartADS) {\n\t\tSavedRequestToStartADS = true;\n\t}\n}", "CodeBleu_score": 59.96238961549635}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n\tAGDCharacterBase* Owner = Cast<AGDCharacterBase>(Character);\n\tif (!Owner) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"%s() No Owner\"), *FString(__FUNCTION__));\n\t\treturn;\n\t}\n\n\tif (!Owner->IsAlive()) {\n\t\treturn;\n\t}\n\n\tif (Owner->GetAbilitySystemComponent()->HasMatchingGameplayTag(FGameplayTag::RequestGameplayTag(FName(\"State.Debuff.Stun\")))) {\n\t\treturn;\n\t}\n\n\tif (SavedRequestToStartSprinting) {\n\t\tOwner->GetCharacterMovement()->SprintSpeedMultiplier = 1.4f;\n\t}\n\n\tif (SavedRequestToStartADS) {\n\t\tOwner->GetCharacterMovement()->ADSSpeedMultiplier = 0.5f;\n\t}\n}", "CodeBleu_score": 57.66285154254083}]}
{"instance_id": "f73106356e9d", "generation_result": [{"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\tif (AbilitySystemComponent == nullptr) {\n\t\tABILITY_LOG(Error, TEXT(\"UAsyncTaskAttributeChanged::ListenForAttributeChange: Invalid AbilitySystemComponent!\"));\n\t\treturn nullptr;\n\t}\n\tif (!AbilitySystemComponent->HasAttribute(Attribute)) {\n\t\tABILITY_LOG(Error, TEXT(\"UAsyncTaskAttributeChanged::ListenForAttributeChange: AbilitySystemComponent does not have the specified attribute!\"));\n\t\treturn nullptr;\n\t}\n\tUAsyncTaskAttributeChanged* Task = NewObject<UAsyncTaskAttributeChanged>();\n\tTask->Attribute = Attribute;\n\tTask->AbilitySystemComponent = AbilitySystemComponent;\n\tTask->OnAttributeChangedDelegate.AddDynamic(Task, &UAsyncTaskAttributeChanged::OnAttributeChanged);\n\treturn Task;\n}", "CodeBleu_score": 52.70656781097707}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\tif (!AbilitySystemComponent) {\n\t\tABILITY_LOG(Error, TEXT(\"UAsyncTaskAttributeChanged::ListenForAttributeChange: Invalid AbilitySystemComponent\"));\n\t\treturn nullptr;\n\t}\n\n\tif (!AbilitySystemComponent->HasAttributeSet(Attribute)) {\n\t\tABILITY_LOG(Error, TEXT(\"UAsyncTaskAttributeChanged::ListenForAttributeChange: AbilitySystemComponent does not have attribute set: %s\"), *Attribute.GetDisplayNameText().ToString());\n\t\treturn nullptr;\n\t}\n\n\tUAsyncTaskAttributeChanged* Task = NewObject<UAsyncTaskAttributeChanged>();\n\tTask->Attribute = Attribute;\n\tTask->AbilitySystemComponent = AbilitySystemComponent;\n\tTask->OnAttributeChangedDelegate.AddDynamic(Task, &UAsyncTaskAttributeChanged::OnAttributeChanged);\n\n\treturn Task;\n}", "CodeBleu_score": 53.41287261113211}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\tif (AbilitySystemComponent == nullptr) {\n\t\tABILITY_LOG(Error, TEXT(\"UAsyncTaskAttributeChanged::ListenForAttributeChange called with null AbilitySystemComponent!\"));\n\t\treturn nullptr;\n\t}\n\n\tif (!AbilitySystemComponent->HasAttribute(Attribute)) {\n\t\tABILITY_LOG(Error, TEXT(\"UAsyncTaskAttributeChanged::ListenForAttributeChange called with invalid Attribute!\"));\n\t\treturn nullptr;\n\t}\n\n\tUAsyncTaskAttributeChanged* AttributeChangedAsyncTask = NewObject<UAsyncTaskAttributeChanged>();\n\tAttributeChangedAsyncTask->AbilitySystemComponent = AbilitySystemComponent;\n\tAttributeChangedAsyncTask->Attribute = Attribute;\n\n\tAttributeChangedAsyncTask->OnAttributeChangeDelegate.AddUObject(AttributeChangedAsyncTask, &UAsyncTaskAttributeChanged::OnAttributeChange);\n\tAttributeChangedAsyncTask->OnAttributeChangeDelegateHandle = AbilitySystemComponent->GetGameplayAttributeValueChangeDelegate(Attribute).AddUObject(AttributeChangedAsyncTask, &UAsyncTaskAttributeChanged::OnAttributeChange);\n\n\treturn AttributeChangedAsyncTask;\n}", "CodeBleu_score": 49.95324399141297}]}
{"instance_id": "a581424c2b31", "generation_result": [{"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (IsValid(ASC)) {\n\t\tASC->OnActiveGameplayEffectAddedDelegateToSelf.RemoveAll(this);\n\t\tfor (FGameplayTag CooldownTag : CooldownTags) {\n\t\t\tASC->UnregisterGameplayTagEvent(CooldownTag, EGameplayTagEventType::NewOrRemoved, this);\n\t\t}\n\t}\n\tMarkAsReadyForDestroy();\n}", "CodeBleu_score": 50.95285508937258}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (IsValid(ASC)) {\n\t\tASC->OnActiveGameplayEffectAddedDelegateToSelf.RemoveAll(this);\n\n\t\tTArray<FGameplayTag> CooldownTagArray;\n\t\tCooldownTags.GetGameplayTagArray(CooldownTagArray);\n\n\t\tfor (FGameplayTag CooldownTag : CooldownTagArray) {\n\t\t\tASC->UnregisterGameplayTagEvent(CooldownTag, EGameplayTagEventType::NewOrRemoved, this);\n\t\t}\n\t}\n\n\tMarkAsReadyForDestroy();\n\tIsReadyForCompletion();\n}", "CodeBleu_score": 80.41359028874615}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (IsValid(ASC)) {\n\t\tASC->OnActiveGameplayEffectAddedDelegateToSelf.RemoveAll(this);\n\n\t\tTArray<FGameplayTag> CooldownTagArray;\n\t\tCooldownTags.GetGameplayTagArray(CooldownTagArray);\n\n\t\tfor (FGameplayTag CooldownTag : CooldownTagArray) {\n\t\t\tASC->UnregisterGameplayTagEvent(CooldownTag, EGameplayTagEventType::NewOrRemoved, this);\n\t\t}\n\t}\n\n\tMarkAsReadyForDestroy();\n}", "CodeBleu_score": 80.05927920432234}]}
{"instance_id": "5029df3a2033", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, EffectRemoved.Spec.StackCount, EffectRemoved.Spec.StackCount - 1);\n\t}\n}", "CodeBleu_score": 85.59138999612176}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, EffectRemoved.Spec.StackCount, EffectRemoved.Spec.StackCount - 1);\n\t}\n}", "CodeBleu_score": 85.59138999612176}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag))\n\t{\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, EffectRemoved.Spec.StackCount, EffectRemoved.Spec.StackCount - EffectRemoved.Spec.GetStackCount());\n\t}\n}", "CodeBleu_score": 82.98243964261619}]}
{"instance_id": "cb1d2823d203", "generation_result": [{"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tif (AbilitySystemComponent == nullptr) {\n\t\tABILITY_LOG(Error, TEXT(\"ListenForGameplayEffectStackChange called with null AbilitySystemComponent!\"));\n\t\treturn nullptr;\n\t}\n\tif (!InEffectGameplayTag.IsValid()) {\n\t\tABILITY_LOG(Error, TEXT(\"ListenForGameplayEffectStackChange called with invalid gameplay tag!\"));\n\t\treturn nullptr;\n\t}\n\n\tUAsyncTaskEffectStackChanged * MyAsyncTask = NewObject<UAsyncTaskEffectStackChanged>();\n\tMyAsyncTask->EffectGameplayTag = InEffectGameplayTag;\n\tMyAsyncTask->AbilitySystemComponent = AbilitySystemComponent;\n\tMyAsyncTask->OnEffectAdded.AddDynamic(MyAsyncTask, &UAsyncTaskEffectStackChanged::OnGameplayEffectAdded);\n\tMyAsyncTask->OnEffectRemoved.AddDynamic(MyAsyncTask, &UAsyncTaskEffectStackChanged::OnGameplayEffectRemoved);\n\n\tMyAsyncTask->Register();\n\treturn MyAsyncTask;\n}", "CodeBleu_score": 52.217841065974326}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tUAsyncTaskEffectStackChanged * ListenForGameplayEffectStackChange = NewObject<UAsyncTaskEffectStackChanged>();\n\tListenForGameplayEffectStackChange->SetFlags(RF_Transient);\n\tListenForGameplayEffectStackChange->AbilitySystemComponent = AbilitySystemComponent;\n\tListenForGameplayEffectStackChange->EffectGameplayTag = InEffectGameplayTag;\n\tif (ListenForGameplayEffectStackChange->AbilitySystemComponent != nullptr && ListenForGameplayEffectStackChange->EffectGameplayTag.IsValid()) {\n\t\tListenForGameplayEffectStackChange->OnGameplayEffectStackChangeDelegate.AddUObject(ListenForGameplayEffectStackChange, &UAsyncTaskEffectStackChanged::OnGameplayEffectStackChange);\n\t\tListenForGameplayEffectStackChange->OnGameplayEffectRemovedDelegate.AddUObject(ListenForGameplayEffectStackChange, &UAsyncTaskEffectStackChanged::OnGameplayEffectRemoved);\n\t\tListenForGameplayEffectStackChange->OnGameplayEffectAddedDelegate.AddUObject(ListenForGameplayEffectStackChange, &UAsyncTaskEffectStackChanged::OnGameplayEffectAdded);\n\t\tListenForGameplayEffectStackChange->AbilitySystemComponent->RegisterGameplayTagEvent(ListenForGameplayEffectStackChange->EffectGameplayTag, EGameplayTagEventType::NewOrRemoved, ListenForGameplayEffectStackChange->OnGameplayEffectStackChangeDelegate);\n\t\tListenForGameplayEffectStackChange->AbilitySystemComponent->RegisterGameplayTagEvent(ListenForGameplayEffectStackChange->EffectGameplayTag, EGameplayTagEventType::New, ListenForGameplayEffectStackChange->OnGameplayEffectAddedDelegate);\n\t\tListenForGameplayEffectStackChange->AbilitySystemComponent->RegisterGameplayTagEvent(ListenForGameplayEffectStackChange->EffectGameplayTag, EGameplayTagEventType::Removed, ListenForGameplayEffectStackChange->OnGameplayEffectRemovedDelegate);\n\t\treturn ListenForGameplayEffectStackChange;\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 56.435351913119135}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tUAsyncTaskEffectStackChanged * ListenForGameplayEffectStackChange = NewObject<UAsyncTaskEffectStackChanged>();\n\tListenForGameplayEffectStackChange->Initialize(AbilitySystemComponent, InEffectGameplayTag);\n\treturn ListenForGameplayEffectStackChange;\n}", "CodeBleu_score": 26.859145343279366}]}
{"instance_id": "6659c2592e93", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, EffectRemoved.Spec.StackCount, EffectRemoved.Spec.StackCount - EffectRemoved.GetStackCount());\n\t}\n}", "CodeBleu_score": 83.21656961275603}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, EffectRemoved.Spec.StackCount, EffectRemoved.Spec.StackCount - 1);\n\t}\n}", "CodeBleu_score": 85.59138999612176}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, EffectRemoved.Spec.StackCount, EffectRemoved.Spec.StackCount - EffectRemoved.GetStackCount());\n\t}\n}", "CodeBleu_score": 83.21656961275603}]}
{"instance_id": "a8f7dcc3f1fa", "generation_result": [{"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\n\tif (AbilitySystemComponent != nullptr && AbilitySystemComponent->IsAbilitySystemComponentActive() == false) {\n\t\tif (ActivateAbilityOnGranted) {\n\t\t\tAbilitySystemComponent->SetByCaller(GetActivationPredictionKey(), true);\n\t\t\tAbilitySystemComponent->TryActivateAbility(Spec.Handle, this);\n\t\t}\n\t}\n}", "CodeBleu_score": 58.30845180365405}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\tif (AbilitySystemComponent.IsValid() && AbilitySystemComponent.Get() && AbilitySystemComponent->IsOwnerActorAuthoritative()) {\n\t\tif (bActivateAbilityOnGranted) {\n\t\t\tif (AbilitySystemComponent->CanActivateAbility(Spec.Handle, this)) {\n\t\t\t\tAbilitySystemComponent->ActivateAbility(Spec.Handle, this);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 55.20744218773278}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\tif (ActorInfo != nullptr) {\n\t\t// If we're set to activate on granted, activate the ability on the local player's ability system component\n\t\tif (bActivateAbilityOnGranted) {\n\t\t\tUAbilitySystemComponent * ASC = ActorInfo->AvatarActor->FindComponentByClass<UAbilitySystemComponent>();\n\t\t\tif (ASC != nullptr) {\n\t\t\t\tASC->InitAbilityActorInfo(ActorInfo);\n\t\t\t\tASC->InitFromSpec(Spec);\n\t\t\t\tif (ASC->CanActivateAbility(Spec.Handle, this)) {\n\t\t\t\t\tASC->ActivateAbility(Spec.Handle, this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 57.07330999332092}]}
{"instance_id": "72a7ce4b848c", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tif (Ability && Ability->GetCurrentMontage() == MontageToPlay) {\n\t\tif (Montage == MontageToPlay) {\n\t\t\tAbilitySystemComponent->ClearAnimatingAbility(Ability);\n\n\t\t\t// Reset AnimRootMotionTranslationScale\n\t\t\tACharacter* Character = Cast<ACharacter>(GetAvatarActor());\n\t\t\tif (Character && (Character->GetLocalRole() == ROLE_Authority ||\n\t\t\t\t(Character->GetLocalRole() == ROLE_AutonomousProxy && Ability->GetNetExecutionPolicy() == EGameplayAbilityNetExecutionPolicy::LocalPredicted))) {\n\t\t\t\tCharacter->SetAnimRootMotionTranslationScale(1.f);\n\t\t\t}\n\n\t\t}\n\t}\n\n\tif (bInterrupted) {\n\t\tif (ShouldBroadcastAbilityTaskDelegates()) {\n\t\t\tOnInterrupted.Broadcast(FGameplayTag(), FGameplayEventData());\n\t\t}\n\t}\n\telse {\n\t\tif (ShouldBroadcastAbilityTaskDelegates()) {\n\t\t\tOnBlendOut.Broadcast(FGameplayTag(), FGameplayEventData());\n\t\t}\n\t}\n\n\tif (StopPlayingMontage()) {\n\t\t// Let the BP handle the interrupt as well\n\t\tif (ShouldBroadcastAbilityTaskDelegates()) {\n\t\t\tOnCancelled.Broadcast(FGameplayTag(), FGameplayEventData());\n\t\t}\n\t}\n}", "CodeBleu_score": 55.56155460551621}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tif (Ability && Ability->GetCurrentMontage() == MontageToPlay) {\n\t\tif (Montage == MontageToPlay) {\n\t\t\tAbilitySystemComponent->ClearAnimatingAbility(Ability);\n\n\t\t\t// Reset AnimRootMotionTranslationScale\n\t\t\tACharacter* Character = Cast<ACharacter>(GetAvatarActor());\n\t\t\tif (Character && (Character->GetLocalRole() == ROLE_Authority ||\n\t\t\t\t(Character->GetLocalRole() == ROLE_AutonomousProxy && Ability->GetNetExecutionPolicy() == EGameplayAbilityNetExecutionPolicy::LocalPredicted))) {\n\t\t\t\tCharacter->SetAnimRootMotionTranslationScale(1.f);\n\t\t\t}\n\n\t\t}\n\t}\n\n\tif (bInterrupted) {\n\t\tif (ShouldBroadcastAbilityTaskDelegates()) {\n\t\t\tOnInterrupted.Broadcast(FGameplayTag(), FGameplayEventData());\n\t\t}\n\t}\n\telse {\n\t\tif (ShouldBroadcastAbilityTaskDelegates()) {\n\t\t\tOnBlendOut.Broadcast(FGameplayTag(), FGameplayEventData());\n\t\t}\n\t}\n\n\tif (StopPlayingMontage()) {\n\t\t// Let the BP handle the interrupt as well\n\t\tif (ShouldBroadcastAbilityTaskDelegates()) {\n\t\t\tOnCancelled.Broadcast(FGameplayTag(), FGameplayEventData());\n\t\t}\n\t}\n}", "CodeBleu_score": 55.56155460551621}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tif (Ability && Ability->GetCurrentMontage() == MontageToPlay) {\n\t\tif (Montage == MontageToPlay) {\n\t\t\tAbilitySystemComponent->ClearAnimatingAbility(Ability);\n\n\t\t\t// Reset AnimRootMotionTranslationScale\n\t\t\tACharacter* Character = Cast<ACharacter>(GetAvatarActor());\n\t\t\tif (Character && (Character->GetLocalRole() == ROLE_Authority ||\n\t\t\t\t(Character->GetLocalRole() == ROLE_AutonomousProxy && Ability->GetNetExecutionPolicy() == EGameplayAbilityNetExecutionPolicy::LocalPredicted))) {\n\t\t\t\tCharacter->SetAnimRootMotionTranslationScale(1.f);\n\t\t\t}\n\n\t\t}\n\t}\n\n\tif (bInterrupted) {\n\t\tif (ShouldBroadcastAbilityTaskDelegates()) {\n\t\t\tOnInterrupted.Broadcast(FGameplayTag(), FGameplayEventData());\n\t\t}\n\t}\n\telse {\n\t\tif (ShouldBroadcastAbilityTaskDelegates()) {\n\t\t\tOnBlendOut.Broadcast(FGameplayTag(), FGameplayEventData());\n\t\t}\n\t}\n\n\tif (StopPlayingMontage()) {\n\t\t// Let the BP handle the interrupt as well\n\t\tif (ShouldBroadcastAbilityTaskDelegates()) {\n\t\t\tOnCancelled.Broadcast(FGameplayTag(), FGameplayEventData());\n\t\t}\n\t}\n}", "CodeBleu_score": 55.56155460551621}]}
{"instance_id": "cc1cdd579bd4", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tSuper::OnDestroy(AbilityEnded);\n\n\tif (Ability) {\n\t\tCancelledHandle.Remove();\n\n\t\tif (AbilityEnded && bStopWhenAbilityEnds) {\n\t\t\tStopPlayingMontage();\n\t\t}\n\n\t\tif (AbilitySystemComponent.IsValid()) {\n\t\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(EventHandle);\n\t\t}\n\t}\n}", "CodeBleu_score": 65.8106099007813}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tSuper::OnDestroy(AbilityEnded);\n\n\tif (AbilityEnded && bStopWhenAbilityEnds) {\n\t\tStopPlayingMontage();\n\t}\n\n\tif (AbilitySystemComponent.IsValid()) {\n\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(EventHandle);\n\t}\n}", "CodeBleu_score": 59.88470666462658}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tSuper::OnDestroy(AbilityEnded);\n\n\tif (Ability) {\n\t\tif (CancelledHandle.IsValid()) {\n\t\t\tAbility->OnGameplayAbilityCancelled.Remove(CancelledHandle);\n\t\t\tCancelledHandle.Reset();\n\t\t}\n\n\t\tif (EventHandle.IsValid()) {\n\t\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(EventHandle);\n\t\t\tEventHandle.Reset();\n\t\t}\n\n\t\tif (AbilityEnded) {\n\t\t\tStopPlayingMontage();\n\t\t}\n\t}\n}", "CodeBleu_score": 62.828142505910634}]}
{"instance_id": "5932070df16f", "generation_result": [{"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tif (Ability == nullptr) {\n\t\treturn false;\n\t}\n\n\tif (AbilitySystemComponent.IsValid()) {\n\t\tconst FGameplayAbilityActorInfo* ActorInfo = Ability->GetCurrentActorInfo();\n\t\tUAnimInstance* AnimInstance = ActorInfo->GetAnimInstance();\n\t\tif (AnimInstance != nullptr) {\n\t\t\t// Unbind delegates\n\t\t\tAnimInstance->Montage_SetBlendingOutDelegate(FAnimMontageInstance::FMontageBlendingOutDelegate(), nullptr);\n\t\t\tAnimInstance->Montage_SetEndDelegate(FAnimMontageInstance::FMontageEndedDelegate(), nullptr);\n\n\t\t\t// Stop montage\n\t\t\tif (AbilitySystemComponent->GetCurrentMontage() == MontageToPlay) {\n\t\t\t\tAbilitySystemComponent->ClearAnimatingAbility(Ability);\n\t\t\t\tAbilitySystemComponent->StopMontage(MontageToPlay);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 62.649859565954024}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tif (AbilitySystemComponent.IsValid()) {\n\t\tconst FGameplayAbilityActorInfo* ActorInfo = Ability->GetCurrentActorInfo();\n\t\tUAnimInstance* AnimInstance = ActorInfo->GetAnimInstance();\n\t\tif (AnimInstance != nullptr) {\n\t\t\t// Clear delegates\n\t\t\tAnimInstance->Montage_SetBlendingOutDelegate(FSimpleMulticastDelegate(), nullptr);\n\t\t\tAnimInstance->Montage_SetEndDelegate(FAnimNotifyMulticastDelegate(), nullptr);\n\n\t\t\t// Stop the montage\n\t\t\tif (AbilitySystemComponent->GetCurrentMontage() == MontageToPlay) {\n\t\t\t\tAbilitySystemComponent->ClearAnimatingAbility(Ability);\n\t\t\t\treturn AbilitySystemComponent->StopMontage(MontageToPlay);\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 54.061682160070845}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tif (Ability == nullptr) {\n\t\treturn false;\n\t}\n\n\tif (AbilitySystemComponent.IsValid()) {\n\t\tconst FGameplayAbilityActorInfo* ActorInfo = Ability->GetCurrentActorInfo();\n\t\tUAnimInstance* AnimInstance = ActorInfo->GetAnimInstance();\n\t\tif (AnimInstance != nullptr) {\n\t\t\t// Clear delegates\n\t\t\tAnimInstance->Montage_SetBlendingOutDelegate(FAnimInstanceProxyDelegate::CreateUObject(this, &UGDAT_PlayMontageAndWaitForEvent::OnMontageBlendingOut), nullptr);\n\t\t\tAnimInstance->Montage_SetEndDelegate(FAnimInstanceProxyDelegate::CreateUObject(this, &UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded), nullptr);\n\n\t\t\t// Stop the montage\n\t\t\treturn (AbilitySystemComponent->GetCurrentMontage() == MontageToPlay) && (AbilitySystemComponent->StopMontage(MontageToPlay) > 0.f);\n\t\t}\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 61.0017340531261}]}
{"instance_id": "7049be7f0c75", "generation_result": [{"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\t// Retrieve the target actor from the blackboard.\n\tAActor* TargetActor = Cast<AActor>(OwnerComp.GetBlackboardComponent()->GetValueAsObject(TargetActorKey.GetSelectedKeyName()));\n\n\t// If the target actor is valid, calculate the distance to it.\n\tif (TargetActor) {\n\t\tFVector AIToTarget = TargetActor->GetActorLocation() - OwnerComp.GetAIOwner()->GetActorLocation();\n\t\tfloat DistanceToTarget = AIToTarget.Size();\n\n\t\t// Check if the target is within range.\n\t\tif (DistanceToTarget <= MaxAttackRange) {\n\t\t\t// Check line of sight to the target.\n\t\t\tbool bTargetVisible = OwnerComp.GetAIOwner()->IsLineOfSightClear(TargetActor);\n\n\t\t\t// Store the result in the blackboard.\n\t\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(ResultKey.GetSelectedKeyName(), bTargetVisible);\n\t\t}\n\t}\n}", "CodeBleu_score": 45.70885846531119}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\tAActor* Target = Cast<AActor>(OwnerComp.GetBlackboardComponent()->GetValueAsObject(TargetActorKey.GetSelectedKeyName()));\n\tif (Target) {\n\t\tAController* AIController = OwnerComp.GetAIOwner();\n\t\tif (AIController) {\n\t\t\tfloat Distance = (AIController->GetPawn()->GetActorLocation() - Target->GetActorLocation()).Size();\n\t\t\tOwnerComp.GetBlackboardComponent()->SetValueAsFloat(AttackRangeKey.GetSelectedKeyName(), Distance);\n\t\t\tif (Distance < MaxAttackRange) {\n\t\t\t\tif (Distance > 0.f) {\n\t\t\t\t\tFVector TargetLocation = Target->GetActorLocation();\n\t\t\t\t\tFVector AILocation = AIController->GetPawn()->GetActorLocation();\n\t\t\t\t\tFVector Direction = (TargetLocation - AILocation).GetSafeNormal();\n\t\t\t\t\tFHitResult HitResult;\n\t\t\t\t\tFCollisionQueryParams CollisionParams;\n\t\t\t\t\tCollisionParams.AddIgnoredActor(AIController->GetPawn());\n\t\t\t\t\tif (GetWorld()->LineTraceSingleByChannel(HitResult, AILocation, TargetLocation, ECC_Visibility, CollisionParams)) {\n\t\t\t\t\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(VisibleTargetKey.GetSelectedKeyName(), false);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(VisibleTargetKey.GetSelectedKeyName(), true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 50.24568507261786}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\t// Retrieve the AI pawn from the blackboard.\n\tAPawn* AI = Cast<APawn>(OwnerComp.GetBlackboardComponent()->GetValueAsObject(AIControllerKey.GetSelectedKeyName()));\n\tif (!AI) {\n\t\treturn;\n\t}\n\n\t// Retrieve the target actor from the blackboard.\n\tAActor* TargetActor = Cast<AActor>(OwnerComp.GetBlackboardComponent()->GetValueAsObject(TargetActorKey.GetSelectedKeyName()));\n\tif (!TargetActor) {\n\t\treturn;\n\t}\n\n\t// Calculate the distance between the AI and the target actor.\n\tFVector AIToTarget = TargetActor->GetActorLocation() - AI->GetActorLocation();\n\tfloat DistanceToTarget = AIToTarget.Size();\n\n\t// Check if the target is within range.\n\tif (DistanceToTarget <= MaxAttackRange) {\n\t\t// Check for line of sight between the AI and the target actor.\n\t\tFHitResult HitResult;\n\t\tFCollisionQueryParams CollisionQueryParams;\n\t\tCollisionQueryParams.AddIgnoredActor(AI);\n\t\tif (GetWorld()->LineTraceSingleByChannel(HitResult, AI->GetActorLocation(), TargetActor->GetActorLocation(), ECollisionChannel::ECC_Visibility, CollisionQueryParams)) {\n\t\t\t// The target is not visible.\n\t\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(TargetVisibleKey.GetSelectedKeyName(), false);\n\t\t}\n\t\telse {\n\t\t\t// The target is visible.\n\t\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(TargetVisibleKey.GetSelectedKeyName(), true);\n\t\t}\n\t}\n\telse {\n\t\t// The target is not within range.\n\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(TargetVisibleKey.GetSelectedKeyName(), false);\n\t}\n}", "CodeBleu_score": 48.67538698532383}]}
{"instance_id": "031bd0ec3e3c", "generation_result": [{"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tSuper::ExecuteTask(OwnerComp, NodeMemory);\n\n\t// Get the AI's pawn.\n\tAPawn* MyPawn = Cast<APawn>(OwnerComp.GetAIOwner()->GetPawn());\n\n\t// If the pawn is valid, get the pawn's attribute component.\n\tif (MyPawn != nullptr) {\n\t\tUAttributeComponent* MyAttributeComponent = Cast<UAttributeComponent>(MyPawn->GetComponentByClass(UAttributeComponent::StaticClass()));\n\n\t\t// If the attribute component is valid, restore the pawn's health to maximum.\n\t\tif (MyAttributeComponent != nullptr) {\n\t\t\tMyAttributeComponent->SetHealth(MyAttributeComponent->GetMaxHealth());\n\n\t\t\t// Return success.\n\t\t\treturn EBTNodeResult::Succeeded;\n\t\t}\n\t}\n\n\t// Return failure.\n\treturn EBTNodeResult::Failed;\n}", "CodeBleu_score": 48.43248848856189}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tSuper::ExecuteTask(OwnerComp, NodeMemory);\n\n\tAActor* OwnerActor = OwnerComp.GetAIOwner()->GetPawn();\n\tif (OwnerActor) {\n\t\tUSAttributeComponent* AttributeComponent = OwnerActor->FindComponentByClass<USAttributeComponent>();\n\t\tif (AttributeComponent) {\n\t\t\tAttributeComponent->Heal(AttributeComponent->GetMaxHealth());\n\t\t}\n\t}\n\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 53.37782188787455}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tSuper::ExecuteTask(OwnerComp, NodeMemory);\n\n\tAActor* OwnerActor = OwnerComp.GetAIOwner()->GetPawn();\n\tif (OwnerActor) {\n\t\tUSAttributeComponent* AttributeComponent = OwnerActor->FindComponentByClass<USAttributeComponent>();\n\t\tif (AttributeComponent) {\n\t\t\tAttributeComponent->SetHealth(AttributeComponent->GetMaxHealth());\n\t\t\treturn EBTNodeResult::Succeeded;\n\t\t}\n\t}\n\n\treturn EBTNodeResult::Failed;\n}", "CodeBleu_score": 49.881100745566485}]}
{"instance_id": "6cd6e778e91b", "generation_result": [{"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\tUWorld* World = GetWorld();\n\tif (World) {\n\t\tUSTickablesSubsystem* TickablesSubsystem = World->GetSubsystem<USTickablesSubsystem>();\n\t\tif (TickablesSubsystem) {\n\t\t\tTickablesSubsystem->RegisterPrimaryTickableComponent(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 54.493417665404586}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\t// Register this component as a tickable component with the USTickablesSubsystem.\n\t// This will call TickComponent every frame.\n\tGetWorld()->GetSubsystem<USTickablesSubsystem>()->RegisterComponent(this);\n}", "CodeBleu_score": 40.30073290366272}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\tif (GetWorld() && GetWorld()->IsGameWorld()) {\n\t\tGetWorld()->GetSubsystem<USTickablesSubsystem>()->RegisterPrimaryTick(this, ETickingGroup::TG_PostUpdate);\n\t}\n}", "CodeBleu_score": 53.958979441484736}]}
{"instance_id": "e90ff27c7f16", "generation_result": [{"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\n\t// EndPlay on the component will be called before the tick has been unregistered via the owning Actor\n\tUSTickablesSubsystem* Tickables = GetWorld()->GetSubsystem<USTickablesSubsystem>();\n\tTickables->DeregisterComponent(&PrimaryComponentTick);\n}", "CodeBleu_score": 90.87129679325732}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\n\t// EndPlay on the component will be called before the tick has been unregistered via the owning Actor\n\tUSTickablesSubsystem* Tickables = GetWorld()->GetSubsystem<USTickablesSubsystem>();\n\tTickables->DeregisterComponent(&PrimaryComponentTick);\n}", "CodeBleu_score": 90.87129679325732}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\n\t// EndPlay on the component will be called before the tick has been unregistered via the owning Actor\n\tUSTickablesSubsystem* Tickables = GetWorld()->GetSubsystem<USTickablesSubsystem>();\n\tTickables->DeregisterComponent(&PrimaryComponentTick);\n}", "CodeBleu_score": 90.87129679325732}]}
{"instance_id": "be3e542c07ea", "generation_result": [{"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\tif (bManageSignificance) {\n\t\tif (Owner == nullptr) {\n\t\t\tUE_LOG(LogTemp, Error, TEXT(\\\"%s does not have an owner\\\"), *GetOwner()->GetName());\n\t\t\treturn;\n\t\t}\n\t\tif (!bHasImplementedInterface) {\n\t\t\tif (Owner->GetClass()->ImplementsInterface(USignificanceInterface::StaticClass())) {\n\t\t\t\tbHasImplementedInterface = true;\n\t\t\t\tif (bWaitOneFrame) {\n\t\t\t\t\tRegisterWithSignificanceManager();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tGetWorld()->GetTimerManager().SetTimer(RegisterWithSignificanceManagerHandle, this, &USSignificanceComponent::RegisterWithSignificanceManager, 0.f, false);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tUE_LOG(LogTemp, Error, TEXT(\\\"%s does not implement the significance interface\\\"), *GetOwner()->GetName());\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (bManageOwnerParticleSignificance) {\n\t\t\tfor (UParticleSystemComponent* ParticleSystemComponent : Owner->GetComponentsByClass(UParticleSystemComponent::StaticClass())) {\n\t\t\t\tif (ParticleSystemComponent->bAutoActivate) {\n\t\t\t\t\tParticleSystemComponent->SetSignificance(CurrentSignificance);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 53.94640813092884}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tif (bManageSignificance) {\n\t\tif (bHasImplementedInterface) {\n\t\t\t// If we've already implemented the interface, we can skip this step\n\t\t\treturn;\n\t\t}\n\t\telse {\n\t\t\t// If we haven't implemented the interface yet, we can try to get it\n\t\t\tif (USignificanceInterface* SignificanceInterface = Cast<USignificanceInterface>(GetOwner())) {\n\t\t\t\tbHasImplementedInterface = true;\n\t\t\t\tSignificanceInterface->OnSignificanceChanged.AddDynamic(this, &USSignificanceComponent::OnSignificanceChanged);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tUE_LOG(LogTemp, Warning, TEXT(\"Owner %s does not implement the Significance Interface!\"), *GetOwner()->GetName());\n\t\t\t}\n\t\t}\n\t}\n\n\tif (bManageOwnerParticleSignificance) {\n\t\tfor (UParticleSystemComponent* ParticleSystemComponent : GetOwner()->GetComponentsByClass(UParticleSystemComponent::StaticClass())) {\n\t\t\tif (ParticleSystemComponent->IsSignificanceManaged()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tParticleSystemComponent->SetSignificanceManaged(true);\n\t\t\tParticleSystemComponent->OnSignificanceChanged.AddDynamic(this, &USSignificanceComponent::OnSignificanceChanged);\n\t\t}\n\t}\n\n\tif (bWaitOneFrame) {\n\t\t// If we're waiting for the next tick, we can register now\n\t\tRegisterWithSignificanceManager();\n\t}\n\telse {\n\t\t// Otherwise, we'll schedule a tick to register later\n\t\tGetWorld()->GetTimerManager().SetTimer(RegisterWithSignificanceManagerTimer, this, &USSignificanceComponent::RegisterWithSignificanceManager, 0.01f, false);\n\t}\n}", "CodeBleu_score": 56.677921765547225}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tif (bManageSignificance) {\n\t\tif (bWaitOneFrame) {\n\t\t\tFSignificanceManager::Get().RegisterObject(this);\n\t\t}\n\t\telse {\n\t\t\tFSignificanceManager::Get().RegisterObjectNextTick(this);\n\t\t}\n\n\t\tif (GetOwner()->Implements<USignificanceInterface>()) {\n\t\t\tbHasImplementedInterface = true;\n\t\t}\n\t}\n\n\tif (bManageOwnerParticleSignificance) {\n\t\tfor (UParticleSystemComponent* ParticleComponent : GetOwner()->GetComponentsByClass(UParticleSystemComponent::StaticClass())) {\n\t\t\tParticleComponent->OnSystemFinishedPlaying().AddDynamic(this, &USSignificanceComponent::OnParticleSystemFinishedPlaying);\n\t\t}\n\t}\n}", "CodeBleu_score": 55.71125642125936}]}
{"instance_id": "77824b6415d0", "generation_result": [{"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\tASignificanceManager* Manager = GetWorld()->GetGameInstance()->GetSubsystem<ASignificanceManager>();\n\tif (Manager) {\n\t\t// Define lambda functions\n\t\tauto CalculateSignificance = [this](const AActor* OtherActor) -> ESignificanceValue {\n\t\t\treturn this->CalculateSignificance(OtherActor);\n\t\t};\n\n\t\tauto HandlePostSignificanceUpdate = [this](const AActor* OtherActor, ESignificanceValue OldSignificance, ESignificanceValue NewSignificance) {\n\t\t\tthis->HandlePostSignificanceUpdate(OtherActor, OldSignificance, NewSignificance);\n\t\t};\n\n\t\t// Register\n\t\tManager->RegisterComponent(GetOwner(), GetOwner()->GetClass()->GetName(), CalculateSignificance, HandlePostSignificanceUpdate);\n\t}\n}", "CodeBleu_score": 41.26301626516396}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\tif (!bManageSignificance)\n\t{\n\t\treturn;\n\t}\n\n\t// Retrieve the significance manager\n\tASignificanceManager* Manager = GetWorld()->GetFirstPlayerController()->GetSignificanceManager();\n\tif (!Manager)\n\t{\n\t\treturn;\n\t}\n\n\t// Define lambda functions for calculating significance and handling post-significance updates\n\tauto CalculateSignificanceLambda = [this]() -> ESignificanceValue\n\t{\n\t\treturn CalculateSignificance();\n\t};\n\n\tauto HandlePostSignificanceUpdateLambda = [this]()\n\t{\n\t\tHandlePostSignificanceUpdate();\n\t};\n\n\t// Register the component with the manager using the owner's class name as the tag and specifying the lambda functions for significance calculation and updates\n\tManager->RegisterComponent(GetOwner()->GetClass()->GetName(), CalculateSignificanceLambda, HandlePostSignificanceUpdateLambda);\n}", "CodeBleu_score": 25.098720668742125}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\t// Retrieve the significance manager\n\tASignificanceManager* Manager = nullptr;\n\tUGameplayStatics::GetAllActorsOfClass(GetWorld(), ASignificanceManager::StaticClass(), Manager);\n\n\tif (Manager) {\n\t\t// Define the lambda functions\n\t\tauto CalculateSignificance = [this]() {\n\t\t\tif (bHasImplementedInterface) {\n\t\t\t\treturn GetOwner()->GetInterface<USSignificanceInterface>()->GetSignificance();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn CurrentSignificance;\n\t\t\t}\n\t\t};\n\n\t\tauto OnSignificanceChanged = [this](ESignificanceValue NewSignificance) {\n\t\t\tif (bHasImplementedInterface) {\n\t\t\t\tGetOwner()->GetInterface<USSignificanceInterface>()->OnSignificanceChanged(NewSignificance);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tCurrentSignificance = NewSignificance;\n\t\t\t}\n\t\t};\n\n\t\t// Register the component\n\t\tManager->RegisterComponent(GetOwner(), GetName(), CalculateSignificance, OnSignificanceChanged, Thresholds);\n\t}\n}", "CodeBleu_score": 36.017260791486585}]}
{"instance_id": "dca342410d64", "generation_result": [{"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t", "CodeBleu_score": 4.697831227672043}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t", "CodeBleu_score": 4.697831227672043}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t", "CodeBleu_score": 4.697831227672043}]}
{"instance_id": "5c285130f782", "generation_result": [{"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tSCOPED_NAMED_EVENT(PrimeActorPool, FColor::Red);\n\tUE_LOG(LogActorPooling, Log, TEXT(\"Priming actor pool for class %s with %d actors.\"), *ActorClass->GetName(), Amount);\n\tfor (int32 i = 0; i < Amount; ++i) {\n\t\tAActor* Actor = GetWorld()->SpawnActor<AActor>(ActorClass);\n\t\tReleaseToPool_Internal(Actor);\n\t}\n}", "CodeBleu_score": 54.8195653408918}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tSCOPED_NAMED_EVENT(ActorPooling, FColor::Red);\n\tUE_LOG(LogActorPooling, Log, TEXT(\"Starting actor pooling for %s with %d instances.\"), *ActorClass->GetName(), Amount);\n\tfor (int32 i = 0; i < Amount; ++i) {\n\t\tAActor* Actor = GetWorld()->SpawnActor<AActor>(ActorClass);\n\t\tReleaseToPool_Internal(Actor);\n\t}\n}", "CodeBleu_score": 49.25525659180579}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tSCOPED_NAMED_EVENT(PrimeActorPool, FColor::Red);\n\tFActorSpawnParameters SpawnParams;\n\tSpawnParams.SpawnCollisionHandlingOverride = ESpawnActorCollisionHandlingMethod::AlwaysSpawn;\n\tSpawnParams.ObjectFlags |= RF_Transient;\n\n\tfor (int32 i = 0; i < Amount; ++i) {\n\t\tAActor* Actor = GetWorld()->SpawnActor<AActor>(ActorClass, FTransform::Identity, SpawnParams);\n\t\tReleaseToPool_Internal(Actor);\n\t}\n}", "CodeBleu_score": 65.36739532562767}]}
{"instance_id": "43c013653d6d", "generation_result": [{"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\t// Create a loading screen widget\n\tFLoadingScreenAttributes LoadingScreenAttributes;\n\tLoadingScreenAttributes.WidgetLoadingScreen = ULoadingScreenWidget::CreateLoadingScreenWidget();\n\tLoadingScreenAttributes.MinimumLoadingScreenDisplayTime = 2.0f;\n\n\t// Create a new movie player\n\tFMoviePlayer* MoviePlayer = new FMoviePlayer(LoadingScreenAttributes);\n\tMoviePlayer->OnMovieScenePlaybackCompleted().BindUObject(this, &USLoadingScreenSubsystem::EndLoadingScreen);\n\n\t// Set the movie player to the loading screen widget\n\tULoadingScreenWidget::SetMoviePlayer(MoviePlayer);\n}", "CodeBleu_score": 52.76865954815242}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\t// Create loading screen attributes\n\tFLoadingScreenAttributes LoadingScreenAttributes;\n\tLoadingScreenAttributes.MinimumLoadingScreenDisplayTime = 2.0f;\n\tLoadingScreenAttributes.bShowLoadingScreen = true;\n\tLoadingScreenAttributes.bMoviesAreSkippable = true;\n\n\t// Create loading screen widget\n\tTSharedPtr<SWidget> LoadingScreenWidget = SNew(SLoadingScreen)\n\t\t.UseAlternateStyle(true)\n\t\t.MinimumLoadingScreenDisplayTime(LoadingScreenAttributes.MinimumLoadingScreenDisplayTime)\n\t\t.DisplayMoviesInLoadingScreen(true)\n\t\t.MoviesAreSkippable(LoadingScreenAttributes.bMoviesAreSkippable);\n\n\t// Create movie player\n\tFMoviePlayer* MoviePlayer = new FMoviePlayer();\n\tMoviePlayer->OnMovieScenePlaybackComplete().AddUObject(this, &USLoadingScreenSubsystem::EndLoadingScreen);\n\tMoviePlayer->OnMovieScenePlayerSetup().AddUObject(this, &USLoadingScreenSubsystem::OnMovieScenePlayerSetup);\n\n\t// Setup movie player\n\tMoviePlayer->SetupLoadingScreen(LoadingScreenAttributes, LoadingScreenWidget);\n\n\t// Show loading screen\n\tMoviePlayer->PlayMovie();\n}", "CodeBleu_score": 45.02710337535938}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\t// Create a new loading screen widget\n\tFLoadingScreenAttributes LoadingScreenAttributes;\n\tLoadingScreenAttributes.MoviePaths.Add(TEXT(\"/Game/LoadingScreen/UI/LoadingScreen.LoadingScreen_C\"));\n\tLoadingScreenAttributes.MinimumLoadingScreenDisplayTime = 2.0f;\n\tLoadingScreenAttributes.bMoviesAreLooping = true;\n\tLoadingScreenAttributes.bWaitForManualStop = true;\n\n\t// Create the loading screen widget\n\tULoadingScreenWidget* LoadingScreenWidget = CreateLoadingScreen(LoadingScreenAttributes);\n\n\t// Show the loading screen\n\tFSlateApplication::Get().PushLoadingScreen(LoadingScreenWidget);\n}", "CodeBleu_score": 49.35912230719296}]}
{"instance_id": "a6979eb925a5", "generation_result": [{"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tif (IsRunning()) {\n\t\treturn;\n\t}\n\n\tUSActionComponent* Comp = GetOwningComponent();\n\n\tif (Comp->ActiveGameplayTags.HasAny(BlockedTags)) {\n\t\treturn;\n\t}\n\n\tif (Role == ROLE_Authority) {\n\t\tStartTime = FDateTime::Now();\n\t}\n\n\tComp->ActiveGameplayTags.AppendTags(GrantedTags);\n\n\tif (Role == ROLE_Authority) {\n\t\tComp->OnActionStarted.Broadcast(this, Instigator);\n\t}\n}", "CodeBleu_score": 47.10130416507366}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tif (IsRunning()) {\n\t\treturn;\n\t}\n\n\tUSActionComponent* Comp = GetOwningComponent();\n\n\tif (Comp->ActiveGameplayTags.HasAny(BlockedTags)) {\n\t\treturn;\n\t}\n\n\tif (Instigator) {\n\t\tUE_LOG(LogActionRoguelike, Verbose, TEXT(\"Action '%s' started by '%s'\"), *GetFName().ToString(), *Instigator->GetFName().ToString());\n\t}\n\telse {\n\t\tUE_LOG(LogActionRoguelike, Verbose, TEXT(\"Action '%s' started\"), *GetFName().ToString());\n\t}\n\n\tComp->ActiveGameplayTags.AppendTags(GrantedTags);\n\n\tif (Comp->GetOwnerRole() == ROLE_Authority) {\n\t\tStartTime = GetWorld()->GetTimeSeconds();\n\t}\n\n\tComp->OnActionStarted.Broadcast(Instigator);\n}", "CodeBleu_score": 51.2348208175335}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tif (IsRunning()) {\n\t\treturn;\n\t}\n\n\tUSActionComponent* Comp = GetOwningComponent();\n\n\tif (Comp->ActiveGameplayTags.HasAny(BlockedTags)) {\n\t\treturn;\n\t}\n\n\tif (Comp->OwnerRole == ENetRole::ROLE_Authority) {\n\t\tStartTime = Comp->GetWorld()->GetTimeSeconds();\n\t}\n\n\tComp->ActiveGameplayTags.AppendTags(GrantedTags);\n\n\tif (Instigator) {\n\t\tInstigator->OnActionStarted(this);\n\t}\n\n\tOnActionStarted.Broadcast(Instigator);\n}", "CodeBleu_score": 42.04369492682579}]}
{"instance_id": "bdec7bf3e2d7", "generation_result": [{"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tif (GetWorld()) {\n\t\tAGameStateBase* GameState = GetWorld()->GetGameState();\n\t\tif (GameState) {\n\t\t\treturn Duration - (GetWorld()->GetTimeSeconds() - GameState->GetStartTime());\n\t\t}\n\t}\n\n\treturn Duration;\n}", "CodeBleu_score": 54.272305954640984}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tif (UWorld* World = GetWorld()) {\n\t\tAGameStateBase* GameState = World->GetGameState();\n\t\tif (GameState) {\n\t\t\treturn Duration - (World->GetTimeSeconds() - GameState->StartTime);\n\t\t}\n\t}\n\n\treturn Duration;\n}", "CodeBleu_score": 54.15261274800773}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tUWorld* World = GetWorld();\n\tif (World && World->GetNetMode() == NM_DedicatedServer) {\n\t\treturn Duration - (World->GetTimeSeconds() - StartTime);\n\t}\n\telse {\n\t\treturn Duration;\n\t}\n}", "CodeBleu_score": 40.13686390250275}]}
{"instance_id": "db3a7508643b", "generation_result": [{"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (InFocus == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"No actor to interact with\"));\n\t\treturn;\n\t}\n\n\tAPawn* MyPawn = Cast<APawn>(GetOwner());\n\tif (MyPawn != nullptr) {\n\t\tInFocus->Interact(MyPawn);\n\t}\n}", "CodeBleu_score": 63.57139951933804}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (InFocus == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USInteractionComponent::ServerInteract_Implementation - InFocus is nullptr\"));\n\t\treturn;\n\t}\n\n\tAPawn* MyPawn = Cast<APawn>(GetOwner());\n\tif (MyPawn) {\n\t\tInFocus->Interact(MyPawn);\n\t}\n}", "CodeBleu_score": 63.62630613209343}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (InFocus == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"Focus Actor is null!\"));\n\t}\n\telse {\n\t\tAPawn* MyPawn = Cast<APawn>(GetOwner());\n\t\tif (MyPawn) {\n\t\t\tInFocus->Interact(MyPawn);\n\t\t}\n\t\telse {\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(\"Unable to retrieve owning pawn!\"));\n\t\t}\n\t}\n}", "CodeBleu_score": 58.7980419724499}]}
{"instance_id": "e6a5224079e6", "generation_result": [{"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tif (DamageCauser == nullptr) {\n\t\treturn false;\n\t}\n\n\tif (TargetActor == nullptr) {\n\t\treturn false;\n\t}\n\n\tUAttributeComponent* TargetAttributeComponent = TargetActor->FindComponentByClass<UAttributeComponent>();\n\n\tif (TargetAttributeComponent == nullptr) {\n\t\treturn false;\n\t}\n\n\tTargetAttributeComponent->Health -= DamageAmount;\n\n\treturn true;\n}", "CodeBleu_score": 49.65509716781967}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tif (DamageCauser == nullptr) {\n\t\treturn false;\n\t}\n\n\tif (TargetActor == nullptr) {\n\t\treturn false;\n\t}\n\n\tUSAttributeComponent* AttributeComponent = TargetActor->FindComponentByClass<USAttributeComponent>();\n\tif (AttributeComponent == nullptr) {\n\t\treturn false;\n\t}\n\n\tAttributeComponent->ModifyHealth(-DamageAmount);\n\treturn true;\n}", "CodeBleu_score": 51.760349552550664}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tif (DamageCauser == nullptr || TargetActor == nullptr) {\n\t\treturn false;\n\t}\n\n\t// Get the target actor's attribute component.\n\tUAttributeComponent* AttributeComponent = TargetActor->FindComponentByClass<UAttributeComponent>();\n\tif (AttributeComponent == nullptr) {\n\t\treturn false;\n\t}\n\n\t// Apply a negative health change equal to the damage amount caused by the damage causer.\n\tAttributeComponent->ModifyHealth(-DamageAmount);\n\n\treturn true;\n}", "CodeBleu_score": 52.36489320066791}]}
{"instance_id": "084a7501fc08", "generation_result": [{"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\t// If the new time is higher than the current personal record, update the record and broadcast the change.\n\tif (NewTime > PersonalRecord) {\n\t\tPersonalRecord = NewTime;\n\t\tOnPersonalRecordChanged.Broadcast(this, PersonalRecord);\n\t\treturn true;\n\t}\n\t// Otherwise, return false.\n\treturn false;\n}", "CodeBleu_score": 52.93099739141209}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\t// If the new time is higher, update the record and return true\n\tif (NewTime > PersonalRecord) {\n\t\tPersonalRecord = NewTime;\n\t\tOnPersonalRecordChanged.Broadcast(this, PersonalRecord);\n\t\treturn true;\n\t}\n\t// Otherwise, return false\n\treturn false;\n}", "CodeBleu_score": 52.93099739141209}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\tif (NewTime > PersonalRecord) {\n\t\tPersonalRecord = NewTime;\n\t\tOnPersonalRecordChanged.Broadcast(this, NewTime);\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 48.71305214319949}]}
{"instance_id": "8e0ccc856566", "generation_result": [{"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (InstigatorPawn == nullptr) {\n\t\treturn;\n\t}\n\n\t// Retrieve the pawn's attribute component.\n\tUAttributeComponent* AttributeComponent = Cast<UAttributeComponent>(InstigatorPawn->FindComponentByClass(UAttributeComponent::StaticClass()));\n\tif (AttributeComponent == nullptr) {\n\t\treturn;\n\t}\n\n\t// Check if the pawn is at full health.\n\tif (AttributeComponent->GetCurrentValue(AttributeComponent->HealthAttributeName) == AttributeComponent->GetMaxValue(AttributeComponent->HealthAttributeName)) {\n\t\treturn;\n\t}\n\n\t// Retrieve the player state.\n\tAPlayerState* PlayerState = Cast<APlayerState>(GetWorld()->GetAuthGameMode()->GetPlayerState(0));\n\tif (PlayerState == nullptr) {\n\t\treturn;\n\t}\n\n\t// Check if the player can afford the power-up.\n\tif (PlayerState->RemoveCredits(CreditCost) == false) {\n\t\treturn;\n\t}\n\n\t// Apply the health change and trigger the cooldown.\n\tAttributeComponent->ApplyChange(AttributeComponent->HealthAttributeName, HealthChange);\n\tGetWorld()->GetAuthGameMode()->TriggerPowerupCooldown(GetPowerupType());\n}", "CodeBleu_score": 39.34926928752315}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (InstigatorPawn == nullptr) {\n\t\treturn;\n\t}\n\n\tUAttributeComponent* AttributeComponent = Cast<UAttributeComponent>(InstigatorPawn->FindComponentByClass(UAttributeComponent::StaticClass()));\n\tif (AttributeComponent == nullptr) {\n\t\treturn;\n\t}\n\n\tif (AttributeComponent->GetHealth() == AttributeComponent->GetMaxHealth()) {\n\t\treturn;\n\t}\n\n\tAPlayerState* PlayerState = Cast<APlayerState>(InstigatorPawn->GetPlayerState());\n\tif (PlayerState == nullptr) {\n\t\treturn;\n\t}\n\n\tif (PlayerState->RemoveCredits(CreditCost)) {\n\t\tAttributeComponent->ApplyHealthChange(100);\n\t\tOnPowerupUsed.Broadcast();\n\t}\n}", "CodeBleu_score": 45.439515402788956}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (InstigatorPawn) {\n\t\tUAttributeComponent* AttributeComponent = Cast<UAttributeComponent>(InstigatorPawn->FindComponentByClass(UAttributeComponent::StaticClass()));\n\t\tif (AttributeComponent) {\n\t\t\tif (AttributeComponent->GetHealth() < AttributeComponent->GetMaxHealth()) {\n\t\t\t\tif (AttributeComponent->GetCredits() >= CreditCost) {\n\t\t\t\t\tAttributeComponent->ApplyHealthChange(1);\n\t\t\t\t\tAttributeComponent->RemoveCredits(CreditCost);\n\t\t\t\t\tOnPowerupUsed.Broadcast();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 40.85501088243979}]}
{"instance_id": "39a680859a89", "generation_result": [{"code": "void ASProjectileBase::Explode_Implementation(){\n\t\t// Spawn a camera shake\n\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ExplosionCameraShake, GetActorLocation(), FRotator::ZeroRotator, true);\n\n\t// Spawn an explosion VFX at the projectile's location\n\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ExplosionVFX, GetActorLocation(), FRotator::ZeroRotator, true);\n\n\t// Spawn an explosion sound\n\tUGameplayStatics::SpawnSoundAtLocation(GetWorld(), ExplosionSound, GetActorLocation());\n\n\t// Release the projectile back to the actor pool\n\tUSActorPoolingSubsystem::ReleaseToPool(this);\n}", "CodeBleu_score": 45.81033417833537}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t\t// Spawn the explosion VFX\n\tUGameplayStatics::SpawnEmitterAtLocation(this, ExplosionVFX, GetActorLocation(), FRotator::ZeroRotator, true);\n\n\t// Spawn the camera shake\n\tUGameplayStatics::SpawnCameraShake(this, ExplosionCameraShake);\n\n\t// Spawn the impact sound\n\tUGameplayStatics::PlaySoundAtLocation(this, ExplosionSound, GetActorLocation());\n\n\t// Release the projectile\n\tUSActorPoolingSubsystem::ReleaseToPool(this);\n}", "CodeBleu_score": 35.572603036426585}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t\t// Spawn a visual effect where the projectile is\n\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ExplosionEffect, GetActorLocation(), FRotator::ZeroRotator, FVector(1.0f), true);\n\n\t// Play the sound effect\n\tUGameplayStatics::PlaySoundAtLocation(GetWorld(), ExplosionSound, GetActorLocation());\n\n\t// Trigger a camera shake\n\tUGameplayStatics::SpawnCameraShake(GetWorld(), ExplosionShake, GetActorLocation());\n\n\t// Release the projectile back to the actor pool\n\tUSActorPoolingSubsystem::ReleaseToPool(this);\n}", "CodeBleu_score": 50.60147986358715}]}
{"instance_id": "a95c41c6d7b5", "generation_result": [{"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"PlayerState is null!\"));\n\t\treturn nullptr;\n\t}\n\n\tif (GIsEditor && GIsPlayInEditorWorld) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"PIE mode!\"));\n\t\treturn GetFirstPlayerSaveData();\n\t}\n\n\tFString PlayerID = PlayerState->GetUniqueId().ToString();\n\treturn GetPlayerSaveData(PlayerID);\n}", "CodeBleu_score": 45.659007773189934}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"PlayerState is null!\"));\n\t\treturn nullptr;\n\t}\n\n\tif (GIsEditor) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"GetPlayerData is being called in PIE mode!\"));\n\t\tfor (FPlayerSaveData& PlayerData : PlayerSaveData) {\n\t\t\tif (PlayerData.PlayerState == nullptr) {\n\t\t\t\treturn &PlayerData;\n\t\t\t}\n\t\t}\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"No saved player data found!\"));\n\t\treturn nullptr;\n\t}\n\n\tfor (FPlayerSaveData& PlayerData : PlayerSaveData) {\n\t\tif (PlayerData.PlayerState == PlayerState) {\n\t\t\treturn &PlayerData;\n\t\t}\n\t}\n\tUE_LOG(LogTemp, Warning, TEXT(\"No saved player data found for PlayerState %s!\"), *PlayerState->GetPlayerName());\n\treturn nullptr;\n}", "CodeBleu_score": 50.33633000440814}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"PlayerState is null!\"));\n\t\treturn nullptr;\n\t}\n\tif (GIsEditor && GIsPlayInEditorWorld) {\n\t\tif (SaveGameInstance->SavedPlayers.Num() > 0) {\n\t\t\treturn &SaveGameInstance->SavedPlayers[0];\n\t\t} else {\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(\"No saved players found!\"));\n\t\t\treturn nullptr;\n\t\t}\n\t} else {\n\t\tfor (FPlayerSaveData& PlayerSaveData : SaveGameInstance->SavedPlayers) {\n\t\t\tif (PlayerSaveData.PlayerID == PlayerState->UniqueId.ToString()) {\n\t\t\t\treturn &PlayerSaveData;\n\t\t\t}\n\t\t}\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"No saved player found for player state with ID %s!\"), *(PlayerState->UniqueId.ToString()));\n\t\treturn nullptr;\n\t}\n}", "CodeBleu_score": 50.532536051521944}]}
{"instance_id": "58a03c087c47", "generation_result": [{"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\tSuper::HandleStartingNewPlayer(NewPlayer);\n\n\t// Get the player's player state.\n\tAPlayerState* PlayerState = NewPlayer->PlayerState;\n\n\t// Make sure the player state is valid.\n\tif (PlayerState) {\n\t\t// Load the player's state from the current save game.\n\t\tLoadPlayerState(PlayerState);\n\n\t\t// Bind to the player's player state.\n\t\tPlayerState->OnRep_PlayerController()\n\t\t\t.AddUObject(this, &USSaveGameSubsystem::OnPlayerStateChanged);\n\t}\n}", "CodeBleu_score": 44.75644041508235}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\tSuper::HandleStartingNewPlayer(NewPlayer);\n\n\t// Get the player's state\n\tAPlayerState* PlayerState = NewPlayer->PlayerState;\n\tif (!PlayerState) {\n\t\treturn;\n\t}\n\n\t// Make sure the player's state is valid\n\tif (!PlayerState->IsPlayerStateValid()) {\n\t\treturn;\n\t}\n\n\t// Load the player's state from the current save game\n\tLoadPlayerStateFromCurrentSaveGame(PlayerState);\n}", "CodeBleu_score": 45.4224407001833}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\tSuper::HandleStartingNewPlayer(NewPlayer);\n\n\tAPlayerState* NewPlayerState = NewPlayer->PlayerState;\n\tif (!NewPlayerState) {\n\t\treturn;\n\t}\n\n\t// If we have a valid save game, load it.\n\tconst USSaveGame* SaveGame = GetSaveGame();\n\tif (SaveGame) {\n\t\tLoadGame(SaveGame);\n\t}\n}", "CodeBleu_score": 45.88216094516615}]}
{"instance_id": "c5bd4c059b71", "generation_result": [{"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\t// Clear current save game\n\tCurrentSaveGame->ClearAllPlayerData();\n\n\t// Retrieve the game state\n\tUGameplayStatics::GetAllActorsOfClass(GetWorld(), AGameStateBase::StaticClass(), GameStateActors);\n\n\t// Save player data for each player in the game state\n\tfor (AActor* Actor : GameStateActors) {\n\t\tif (APlayerState* PS = Cast<APlayerState>(Actor)) {\n\t\t\t// Check if this player is in the game\n\t\t\tif (APawn* MyPawn = PS->GetPawn()) {\n\t\t\t\t// Save player data\n\t\t\t\tCurrentSaveGame->SavePlayerData(PS);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Iterate through all actors in the world, saving those that implement a specific interface\n\tfor (TActorIterator<AActionRoguelike> ActionIterator(GetWorld()); ActionIterator; ++ActionIterator) {\n\t\tAActionRoguelike* Action = *ActionIterator;\n\t\tif (Action) {\n\t\t\t// Save actor data\n\t\t\tFActorSaveData* FoundData = CurrentSaveGame->GetActorData(Action);\n\t\t\tif (FoundData) {\n\t\t\t\tFoundData->Location = Action->GetActorLocation();\n\t\t\t\tFoundData->Rotation = Action->GetActorRotation();\n\t\t\t\tFoundData->bResumeAtTransform = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Write the save game to a slot\n\tUSaveGame* SaveGame = Cast<USaveGame>(UGameplayStatics::CreateSaveGameObject(CurrentSaveGame));\n\tif (SaveGame) {\n\t\tSaveGame->SaveGameToSlot(CurrentSlotName, 0);\n\t}\n\n\t// Broadcast an event to signal the save is complete\n\tOnSaveGameComplete.Broadcast();\n}", "CodeBleu_score": 44.072694783487066}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\t// Clear out existing data\n\tCurrentSaveGame->ClearAllPlayerData();\n\tCurrentSaveGame->ClearAllActorData();\n\n\t// Get the game state\n\tUWorld* World = GetWorld();\n\tif (!World) {\n\t\treturn;\n\t}\n\n\tUGameplayStatics::GetAllActorsOfClass(World, APlayerState::StaticClass(), PlayerStates);\n\n\tfor (APlayerState* PS : PlayerStates) {\n\t\t// Only save player state for local players\n\t\tif (PS->GetPawn() && PS->GetPawn()->GetIsReplicated()) {\n\t\t\t// Save player data\n\t\t\tCurrentSaveGame->SetPlayerData(PS, PS->SavePlayerState());\n\t\t}\n\t}\n\n\t// Iterate through all actors in the world\n\tfor (TActorIterator<AActor> It(World); It; ++It) {\n\t\tAActor* Actor = *It;\n\t\tif (Actor == nullptr) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Only save actors that implement the interface\n\t\tif (Actor->GetClass()->ImplementsInterface(UActionRoguelike::StaticClass())) {\n\t\t\t// Save actor data\n\t\t\tCurrentSaveGame->SetActorData(Actor, Actor->SaveActorState());\n\t\t}\n\t}\n\n\t// Write the save game to a slot\n\tUSaveGame* SaveGame = USaveGame::CreateSaveGame(CurrentSlotName, CurrentSaveGame);\n\tif (SaveGame) {\n\t\tSaveGame->SaveGameToSlot();\n\t}\n\n\t// Broadcast an event to signal the save is complete\n\tOnSaveComplete.Broadcast();\n}", "CodeBleu_score": 44.994642348244575}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\t// Clear existing save data\n\tCurrentSaveGame->ClearAllPlayerData();\n\tCurrentSaveGame->ClearAllActorData();\n\n\t// Get the game state\n\tUWorld* World = GetWorld();\n\tif (World) {\n\t\tAGameStateBase* GS = Cast<AGameStateBase>(UGameplayStatics::GetGameState(World));\n\t\tif (GS) {\n\t\t\t// Save game state for each player\n\t\t\tfor (FConstPlayerControllerIterator Iterator = World->GetPlayerControllerIterator(); Iterator; ++Iterator) {\n\t\t\t\tAPlayerController* PC = Iterator->Get();\n\t\t\t\tif (PC) {\n\t\t\t\t\tASPlayerState* PS = PC->PlayerState;\n\t\t\t\t\tif (PS) {\n\t\t\t\t\t\tCurrentSaveGame->AddPlayerData(PS);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Save game state for each actor\n\t\t\tfor (TActorIterator<AActor> It(World); It; ++It) {\n\t\t\t\tAActor* Actor = *It;\n\t\t\t\tif (Actor) {\n\t\t\t\t\t// Only save actors that implement IActionRoguelike\n\t\t\t\t\tIActionRoguelike* RoguelikeInterface = Cast<IActionRoguelike>(Actor);\n\t\t\t\t\tif (RoguelikeInterface) {\n\t\t\t\t\t\t// Save actor data\n\t\t\t\t\t\tCurrentSaveGame->AddActorData(Actor);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Write save game to slot\n\t\t\tUGameplayStatics::SaveGameToSlot(CurrentSaveGame, CurrentSlotName, 0);\n\n\t\t\t// Broadcast event that save is complete\n\t\t\tOnSaveComplete.Broadcast();\n\t\t}\n\t}\n}", "CodeBleu_score": 48.3204010544154}]}
{"instance_id": "0d7043a0bff0", "generation_result": [{"code": "void FrameworkConfig::draw_themes(){\n\t\tif (ImGui::BeginCombo(\\\"Theme\\\", m_theme->value().c_str())) {\n\t\tfor (auto& [key, value] : m_themes) {\n\t\t\tif (ImGui::MenuItem(key.c_str(), nullptr, m_theme->value() == key)) {\n\t\t\t\tm_theme->set_value(key);\n\t\t\t}\n\t\t}\n\n\t\tImGui::EndCombo();\n\t}\n\n\tif (ImGui::SliderFloat(\\\"Font Size\\\", &m_font_size, 8.0f, 40.0f)) {\n\t\tm_font_size_changed = true;\n\t}\n}", "CodeBleu_score": 39.95392890343996}, {"code": "void FrameworkConfig::draw_themes(){\n\t\t// Theme selection dropdown\n\tif (ImGui::BeginCombo(\\\"Theme##theme_selection\\\", m_selected_theme->value().data())) {\n\t\tfor (auto const& [key, theme] : m_themes) {\n\t\t\tbool is_selected = (m_selected_theme->value() == key);\n\t\t\tif (ImGui::Selectable(theme.name.data(), is_selected)) {\n\t\t\t\tm_selected_theme->value() = key;\n\t\t\t\tm_selected_theme->on_change();\n\t\t\t}\n\t\t\tif (is_selected)\n\t\t\t\tImGui::SetItemDefaultFocus();\n\t\t}\n\t\tImGui::EndCombo();\n\t}\n\n\t// Font size slider\n\tImGui::Text(\\\"Font Size##font_size\\\");\n\tif (ImGui::SliderFloat(\\\"##font_size_slider\\\", &m_font_size, 8.0f, 40.0f)) {\n\t\tm_font_size_changed = true;\n\t}\n\n\t// Draw the font size warning\n\tif (m_font_size_changed) {\n\t\tImGui::TextColored(ImVec4(1.0f, 0.0f, 0.0f, 1.0f), \\\"Font size changed. Restart the game to see the changes.\\\");\n\t}\n}", "CodeBleu_score": 37.73530040519913}, {"code": "void FrameworkConfig::draw_themes(){\n\t", "CodeBleu_score": 2.9382092570235954}]}
{"instance_id": "e7f81d1dee95", "generation_result": [{"code": "void FrameworkConfig::draw_main() {\n\t\tImGui::Checkbox(\"Menu Key\", &menu_key_enabled);\n\tImGui::Checkbox(\"Show Cursor\", &show_cursor_enabled);\n\tImGui::Checkbox(\"Remember Menu State\", &remember_menu_state_enabled);\n\tImGui::Checkbox(\"L3 + R3 Toggle\", &l3_r3_toggle_enabled);\n\tImGui::Checkbox(\"Always Show Cursor\", &always_show_cursor_enabled);\n\tImGui::Text(\"Log Level\");\n\tImGui::SameLine();\n\tImGui::Combo(\"##log_level\", &log_level, \"Trace\\0Debug\\0Info\\0Warn\\0Error\\0Critical\\0Off\\0\");\n\tif (log_level >= 0 && log_level <= 5) {\n\t\tspdlog::set_level(static_cast<spdlog::level::level_enum>(log_level));\n\t}\n}", "CodeBleu_score": 48.96831340989139}, {"code": "void FrameworkConfig::draw_main() {\n\t", "CodeBleu_score": 2.3096479186355663}, {"code": "void FrameworkConfig::draw_main() {\n\t\tImGui::TextUnformatted(\"Main\");\n\tImGui::Separator();\n\tImGui::Checkbox(\"Menu Key\", &menu_key);\n\tImGui::Checkbox(\"Show Cursor Key\", &show_cursor_key);\n\tImGui::Checkbox(\"Remember Menu State\", &remember_menu_state);\n\tImGui::Checkbox(\"L3 + R3 Toggle\", &l3_r3_toggle);\n\tImGui::Checkbox(\"Always Show Cursor\", &always_show_cursor);\n\tImGui::Checkbox(\"Show Log Level\", &show_log_level);\n\tif (show_log_level) {\n\t\tImGui::TextUnformatted(\"Log Level\");\n\t\tImGui::Separator();\n\t\tImGui::RadioButton(\"Trace\", &log_level, 0);\n\t\tImGui::RadioButton(\"Debug\", &log_level, 1);\n\t\tImGui::RadioButton(\"Info\", &log_level, 2);\n\t\tImGui::RadioButton(\"Warn\", &log_level, 3);\n\t\tImGui::RadioButton(\"Error\", &log_level, 4);\n\t\tImGui::RadioButton(\"Critical\", &log_level, 5);\n\t\tif (log_level != spdlog::level::level_enum::off && log_level != spdlog::level::level_enum::trace) {\n\t\t\tspdlog::set_level(spdlog::level::level_enum(log_level));\n\t\t}\n\t}\n}", "CodeBleu_score": 33.453092984709734}]}
{"instance_id": "83fa7f401579", "generation_result": [{"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t", "CodeBleu_score": 4.471675108827625}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t", "CodeBleu_score": 4.471675108827625}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t", "CodeBleu_score": 4.471675108827625}]}
{"instance_id": "7349d775edf6", "generation_result": [{"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tif (AStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor)) {\n\t\tif (UStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent()) {\n\t\t\tStreetMapComponent->SetStreetMap(Cast<UStreetMap>(Asset));\n\t\t}\n\t}\n}", "CodeBleu_score": 65.0167788390818}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\tAStreetMapActor* StreetMapActor = CastChecked<AStreetMapActor>(NewActor);\n\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\tStreetMapComponent->SetStreetMap(Cast<UStreetMap>(Asset));\n}", "CodeBleu_score": 67.63815909644414}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\tAStreetMapActor* StreetMapActor = CastChecked<AStreetMapActor>(NewActor);\n\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\tif (StreetMapComponent) {\n\t\tStreetMapComponent->SetStreetMap(Cast<UStreetMap>(Asset));\n\t}\n}", "CodeBleu_score": 70.47958713334538}]}
{"instance_id": "f160ac6d0353", "generation_result": [{"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tif (SelectedStreetMapComponent != nullptr) {\n\t\tSelectedStreetMapComponent->BuildMesh();\n\t\tRefresh();\n\t}\n\n\treturn FReply::Handled();\n}", "CodeBleu_score": 82.11013648314027}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tif (SelectedStreetMapComponent != nullptr) {\n\t\tSelectedStreetMapComponent->BuildMesh();\n\t\tSelectedStreetMapComponent->UpdateCollision();\n\t\tRefresh();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 72.36383312553485}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tif (SelectedStreetMapComponent != nullptr) {\n\t\tSelectedStreetMapComponent->BuildMesh();\n\t\tRefresh();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 82.11013648314027}]}
{"instance_id": "b23f1f2b29fa", "generation_result": [{"code": "void FStreetMapImportingModule::StartupModule(){\n\t\tStreetMapAssetTypeActions = MakeShareable( new FStreetMapAssetTypeActions );\n\tFModuleManager::Get().RegisterAssetTypeActions( StreetMapAssetTypeActions.ToSharedRef() );\n\n\t// Initialize the StreetMap style\n\tFStreetMapStyle::Initialize();\n\n\t// Register a custom class layout for the StreetMapComponent\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked< FPropertyEditorModule >( \"PropertyEditor\" );\n\tPropertyModule.RegisterCustomClassLayout( \"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic( &FStreetMapComponentDetails::MakeInstance ) );\n\n\t// Notify the property editor module that the customization has changed\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 59.85495654691506}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t\tStreetMapAssetTypeActions = MakeShareable( new FStreetMapAssetTypeActions() );\n\tFModuleManager::LoadModuleChecked( \"AssetTools\" ).RegisterAssetTypeActions( StreetMapAssetTypeActions );\n\tFStreetMapStyle::Initialize();\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked< FPropertyEditorModule >( \"PropertyEditor\" );\n\tPropertyModule.RegisterCustomClassLayout( \"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic( &FStreetMapComponentDetails::MakeInstance ) );\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 72.48581272363077}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t\tStreetMapAssetTypeActions = MakeShareable(new FStreetMapAssetTypeActions(FStreetMapStyle::Get()));\n\tFEditorStyle::Get().ReloadTextures();\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout( \"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance) );\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 48.61633899632777}]}
{"instance_id": "1da549fe84e3", "generation_result": [{"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\tif (StreetMap) {\n\t\tFStreetMapSceneProxy* StreetMapSceneProxy = new FStreetMapSceneProxy(this);\n\t\tStreetMapSceneProxy->Init(StreetMap);\n\t\treturn StreetMapSceneProxy;\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 42.978335371294804}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\tif (StreetMap) {\n\t\t// Create the scene proxy.\n\t\tFStreetMapSceneProxy* SceneProxy = new FStreetMapSceneProxy(this);\n\n\t\t// Initialize the scene proxy.\n\t\tSceneProxy->Init(StreetMap->GetVertices(), StreetMap->GetIndices());\n\n\t\treturn SceneProxy;\n\t}\n\n\treturn nullptr;\n}", "CodeBleu_score": 46.41083510958235}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\tif (StreetMap == nullptr) {\n\t\treturn nullptr;\n\t}\n\n\tFStreetMapSceneProxy* SceneProxy = new FStreetMapSceneProxy(this);\n\n\t// We only need to call InitResources() if we're in the editor.  It's a no-op in shipping builds.\n#if WITH_EDITOR\n\tSceneProxy->InitResources();\n#endif //WITH_EDITOR\n\n\treturn SceneProxy;\n}", "CodeBleu_score": 44.33339398394083}]}
{"instance_id": "d0ee3b2e023e", "generation_result": [{"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\tTArray<FName> InputIDArray;\n\tInputIDArray.Add(FName(\"Ability01\"));\n\tAbilities->BindAbilityInputs(ServerHandle, InputIDArray);\n}", "CodeBleu_score": 64.81458368824902}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\tTArray<FAFInputID> InputIDs;\n\tInputIDs.Add(AFInputID::Fire01);\n\tAbilities->NativeBindAbility(TestAbility01Handle, InputIDs);\n}", "CodeBleu_score": 57.284080701155304}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t", "CodeBleu_score": 6.2285882815553455}]}
{"instance_id": "e62f1b2cd4bd", "generation_result": [{"code": "void AARCharacter::MoveForward(float Value){\n\t\t// find out which way is forward\n\tconst FRotator Rotation = GetControlRotation();\n\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t// get forward vector\n\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\tAddMovementInput(Direction, Value);\n}", "CodeBleu_score": 64.49302816233381}, {"code": "void AARCharacter::MoveForward(float Value){\n\t\tif ((Controller != nullptr) && (Value != 0.0f)) {\n\t\t// find out which way is forward\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// get forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 95.11437147958813}, {"code": "void AARCharacter::MoveForward(float Value){\n\t\t// find out which way is forward\n\tconst FRotator Rotation = GetControlRotation();\n\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t// get forward vector\n\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\tAddMovementInput(Direction, Value);\n}", "CodeBleu_score": 64.49302816233381}]}
{"instance_id": "a77cdc67ee00", "generation_result": [{"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (!GetEquipedMainWeapon()->GetChildActor())\n\t\treturn GetMesh()->GetSocketLocation(Socket);\n\n\treturn GetEquipedMainWeapon()->GetMesh()->GetSocketLocation(Socket);\n}", "CodeBleu_score": 45.04652648160209}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (GetEquipedMainWeapon()) {\n\t\tif (GetMainWeaponMesh()) {\n\t\t\treturn GetMainWeaponMesh()->GetSocketLocation(Socket);\n\t\t}\n\t\telse {\n\t\t\treturn GetMesh()->GetSocketLocation(Socket);\n\t\t}\n\t}\n\telse {\n\t\treturn GetMesh()->GetSocketLocation(Socket);\n\t}\n}", "CodeBleu_score": 42.462054726522055}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (!GetEquipedMainWeapon()) {\n\t\treturn GetMesh()->GetSocketLocation(Socket);\n\t}\n\n\treturn GetEquipedMainWeapon()->GetMesh()->GetSocketLocation(Socket);\n}", "CodeBleu_score": 44.751637076272736}]}
{"instance_id": "f021203f736a", "generation_result": [{"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tif (Role == ROLE_Authority) {\n\t\tSpawnedEnemies.Remove(InEnemy);\n\t\tif (SpawnedEnemies.Num() < MinRespawn) {\n\t\t\tSetupSpawner();\n\t\t}\n\t}\n}", "CodeBleu_score": 69.11443699771995}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tif (Role == ROLE_Authority) {\n\t\tSpawnedEnemies.Remove(InEnemy);\n\n\t\tif (SpawnedEnemies.Num() < MinRespawn) {\n\t\t\tFTimerDelegate Delegate = FTimerDelegate::CreateUObject(this, &AAREnemySpawner::HandleSpawn);\n\n\t\t\tFTimerManager& Timer = GetWorld()->GetTimerManager();\n\t\t\tTimer.SetTimer(SpawnerHandle, Delegate, TimeBetweenSpawns, true);\n\t\t}\n\t}\n}", "CodeBleu_score": 52.02105973163753}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tif (Role == ROLE_Authority) {\n\t\tSpawnedEnemies.Remove(InEnemy);\n\n\t\tif (SpawnedEnemies.Num() < MinRespawn) {\n\t\t\tFTimerDelegate Delegate = FTimerDelegate::CreateUObject(this, &AAREnemySpawner::HandleSpawn);\n\n\t\t\tFTimerManager& Timer = GetWorld()->GetTimerManager();\n\t\t\tTimer.SetTimer(SpawnerHandle, Delegate, TimeBetweenSpawns, true);\n\t\t}\n\t}\n}", "CodeBleu_score": 52.02105973163753}]}
{"instance_id": "dbab72cb539f", "generation_result": [{"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\tFString Result = Super::ApproveLogin(Options);\n\tTArray<FString> Params;\n\tFString(Options).ParseIntoArray(Params, TEXT(\" \"), true);\n\tfor (int32 i = 0; i < Params.Num(); i++) {\n\t\tFString Key;\n\t\tFString Value;\n\t\tif (Params[i].Split(TEXT(\"=\"), &Key, &Value)) {\n\t\t\tif (Key == TEXT(\"PlayerId\")) {\n\t\t\t\tPlayerId = Value;\n\t\t\t}\n\t\t}\n\t}\n\treturn Result;\n}", "CodeBleu_score": 56.553805283762735}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\t// Call the base class implementation first\n\tFString Approval = Super::ApproveLogin(Options);\n\t// Parse the options string into an array of parameters\n\tTArray<FString> Params;\n\tParseOption(Options, Params);\n\t// Search for the PlayerId parameter\n\tfor (auto& Param : Params) {\n\t\tFString Key;\n\t\tFString Value;\n\t\tif (Param.Split(TEXT(\"=\"), &Key, &Value)) {\n\t\t\tif (Key == TEXT(\"PlayerId\")) {\n\t\t\t\t// Extract the player ID value\n\t\t\t\tPlayerId = Value;\n\t\t\t}\n\t\t}\n\t}\n\treturn Approval;\n}", "CodeBleu_score": 56.23236378311537}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\tFString Result = Super::ApproveLogin(Options);\n\tTArray<FString> Params;\n\tif (FParse::Value(Options, TEXT(\"?PlayerId=\"), Params)) {\n\t\t// We found the PlayerId parameter, so extract the player ID value\n\t\tFString PlayerId = Params[0];\n\t\t// ...\n\t}\n\treturn Result;\n}", "CodeBleu_score": 39.514654477514924}]}
{"instance_id": "85ea02df92a5", "generation_result": [{"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tFString Username = UsernameInput->GetText().ToString();\n\tFString DisplayName = DisplayNameInput->GetText().ToString();\n\tFString Password = PasswordInput->GetText().ToString();\n\n\tif (Username.IsEmpty() || DisplayName.IsEmpty() || Password.IsEmpty()) {\n\t\tFMessageDialog::Open(EAppMsgType::Ok, FText::FromString(\"Please enter a username, display name, and password to register!\"));\n\t}\n\telse {\n\t\tRegisterButton->Hide();\n\t\tGetGameInstance()->RegisterNewPlayer(Username, DisplayName, Password);\n\t}\n}", "CodeBleu_score": 40.868861839919745}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tFString Username = UsernameInput->GetText().ToString();\n\tFString DisplayName = DisplayNameInput->GetText().ToString();\n\tFString Password = PasswordInput->GetText().ToString();\n\n\tif (Username.IsEmpty() || DisplayName.IsEmpty() || Password.IsEmpty()) {\n\t\tFMessageDialog::Open(EAppMsgType::Ok, FText::FromString(\"Please fill out all fields!\"));\n\t\treturn;\n\t}\n\n\tGetOwner()->GetGameInstance()->RegisterNewPlayer(Username, DisplayName, Password);\n\n\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n}", "CodeBleu_score": 42.21154856285347}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tFString Username = UsernameInput->GetText().ToString();\n\tFString DisplayName = DisplayNameInput->GetText().ToString();\n\tFString Password = PasswordInput->GetText().ToString();\n\n\tif (Username.IsEmpty() || DisplayName.IsEmpty() || Password.IsEmpty()) {\n\t\tFMessageDialog::Open(EAppMsgType::Ok, FText::FromString(\"Please fill in all fields!\"));\n\t}\n\telse {\n\t\tRegisterButton->SetVisibility(ESlateVisibility::Collapsed);\n\t\tGetOwner()->GetGameInstance()->RegisterNewPlayer(Username, DisplayName, Password);\n\t}\n}", "CodeBleu_score": 42.65873292286805}]}
{"instance_id": "b33bb5886dd9", "generation_result": [{"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\tif (InMod.TargetActor) {\n\t\tAActor* Target = InMod.TargetActor;\n\t\tFVector ActorLocation = InMod.TargetActor->GetActorLocation();\n\t\tFVector2D ScreeLoc;\n\n\t\tUGameplayStatics::ProjectWorldToScreen(ARPC, ActorLocation, ScreeLoc, false);\n\n\t\tfloat Distance = FVector::Dist(ActorLocation, ARCharacter->GetActorLocation());\n\t\tDistance = DistanceScaleEnemyBar / Distance;\n\t\tDistance = FMath::Clamp<float>(Distance, 0.7, 1);\n\n\t\tfloat ScreenSize = ComputeBoundsScreenSize(Target);\n\t\tFVector Extent = Target->GetComponentsBoundingBox().GetExtent();\n\n\t\tfloat OffsetY = (Extent.Z * 7) * ScreenSize;\n\t\tScreeLoc.Y = ScreeLoc.Y - OffsetY;\n\n\t\tFloatingCombatText->SetPositionInViewport(ScreeLoc, true);\n\n\t\tFVector2D NewScale(Distance, Distance);\n\t\tFloatingCombatText->SetRenderScale(NewScale);\n\n\t\tif (IAFAbilityInterface* TargetInt = Cast<IAFAbilityInterface>(Target)) {\n\t\t\tUARCharacterAttributes* Attributes = TargetInt->GetAttributesTyped<UARCharacterAttributes>();\n\t\t\tif (Attributes) {\n\t\t\t\tfloat Percent = Attributes->Health.GetCurrentValue() / Attributes->Health.GetFinalValue();\n\t\t\t\tFloatingCombatText->UpdateHealth(Percent);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 47.077917659841006}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\tif (EnemyHitResult.GetActor())\n\t{\n\t\tAActor* Target = EnemyHitResult.GetActor();\n\t\tFVector ActorLocation = EnemyHitResult.GetActor()->GetActorLocation();\n\t\tFVector2D ScreeLoc;\n\n\t\tUGameplayStatics::ProjectWorldToScreen(ARPC, ActorLocation, ScreeLoc, false);\n\n\t\tfloat Distance = FVector::Dist(ActorLocation, ARCharacter->GetActorLocation());\n\t\tDistance = DistanceScaleEnemyBar / Distance;\n\t\tDistance = FMath::Clamp<float>(Distance, 0.7, 1);\n\n\t\tfloat ScreenSize = ComputeBoundsScreenSize(Target);\n\t\tFVector Extent = Target->GetComponentsBoundingBox().GetExtent();\n\n\t\tfloat OffsetY = (Extent.Z * 7) * ScreenSize;\n\t\tScreeLoc.Y = ScreeLoc.Y - OffsetY;\n\n\t\tFloatingCombatText->SetText(FText::AsNumber(InMod.NewValue));\n\t\tFloatingCombatText->SetPositionInViewport(ScreeLoc, true);\n\n\t\tFVector2D NewScale(Distance, Distance);\n\t\tFloatingCombatText->SetRenderScale(NewScale);\n\t}\n}", "CodeBleu_score": 44.765714904520365}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\tif (EnemyHitResult.GetActor()) {\n\t\tAActor* Target = EnemyHitResult.GetActor();\n\t\tFVector ActorLocation = EnemyHitResult.GetActor()->GetActorLocation();\n\t\tFVector2D ScreeLoc;\n\n\t\tUGameplayStatics::ProjectWorldToScreen(ARPC, ActorLocation, ScreeLoc, false);\n\n\t\tfloat Distance = FVector::Dist(ActorLocation, ARCharacter->GetActorLocation());\n\t\tDistance = DistanceScaleEnemyBar / Distance;\n\t\tDistance = FMath::Clamp<float>(Distance, 0.7, 1);\n\n\t\tfloat ScreenSize = ComputeBoundsScreenSize(Target);\n\t\tFVector Extent = Target->GetComponentsBoundingBox().GetExtent();\n\n\t\tfloat OffsetY = (Extent.Z * 7) * ScreenSize;\n\t\tScreeLoc.Y = ScreeLoc.Y - OffsetY;\n\n\t\tFloatingCombatText->SetPositionInViewport(ScreeLoc, true);\n\n\t\tFVector2D NewScale(Distance, Distance);\n\t\tFloatingCombatText->SetRenderScale(NewScale);\n\t\tif (IAFAbilityInterface* TargetInt = Cast<IAFAbilityInterface>(Target)) {\n\t\t\tUARCharacterAttributes* Attributes = TargetInt->GetAttributesTyped<UARCharacterAttributes>();\n\t\t\tif (Attributes) {\n\t\t\t\tfloat Percent = Attributes->Health.GetCurrentValue() / Attributes->Health.GetFinalValue();\n\t\t\t\tFloatingCombatText->UpdateHealth(Percent);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 48.36403542839934}]}
{"instance_id": "177d36e7e076", "generation_result": [{"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (AbilityInstance == nullptr) {\n\t\treturn;\n\t}\n\n\tARWeaponInventoryComponent* WeaponInventory = GetOwnerWeaponInventoryComponent();\n\tif (WeaponInventory == nullptr) {\n\t\treturn;\n\t}\n\n\tARCharacter* Character = WeaponInventory->GetCharacter();\n\tif (Character == nullptr) {\n\t\treturn;\n\t}\n\n\tif (!Character->HasAuthority()) {\n\t\treturn;\n\t}\n\n\tif (WeaponInventory->HasMagazineUpgrade(InMagazineUpgrade)) {\n\t\treturn;\n\t}\n\n\tTArray<TSubclassOf<class UObject>> Objects;\n\tInMagazineUpgrade->GetDefaultObject(Objects);\n\n\tUObject* NewObject = Objects[0].GetDefaultObject();\n\tif (NewObject == nullptr) {\n\t\treturn;\n\t}\n\n\tNewObject->Rename(nullptr, Character, REN_DontCreateRedirectors | REN_DoNotDirty);\n\tNewObject->SetFlags(RF_Transient);\n\n\tInMagazineUpgrade->Upgrade(NewObject);\n\n\tWeaponInventory->AddMagazineUpgrade(NewObject);\n\n\tif (AbilityInstance) {\n\t\tAbilityInstance->OnMagazineUpgradeAdded(NewObject);\n\t}\n}", "CodeBleu_score": 45.86670240861114}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (AbilityInstance) {\n\t\tARWeaponInventoryComponent* WeaponComponent = GetWeaponInventoryComponent();\n\t\tif (WeaponComponent) {\n\t\t\tARCharacter* Character = Cast<ARCharacter>(WeaponComponent->GetOwner());\n\t\t\tif (Character && Character->GetLocalRole() == ROLE_Authority) {\n\t\t\t\tTArray<FItemUpgrade> Upgrades;\n\t\t\t\tInMagazineUpgrade->GetUpgrades(Upgrades);\n\t\t\t\tfor (FItemUpgrade& Upgrade : Upgrades) {\n\t\t\t\t\tif (Upgrade.UpgradeType == EItemUpgradeType::Magazine) {\n\t\t\t\t\t\tWeaponComponent->SetMagazineUpgradeValue(Upgrade.Value);\n\t\t\t\t\t\tif (AbilityInstance) {\n\t\t\t\t\t\t\tAbilityInstance->OnMagazineUpdateAdded(Upgrade.Value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 48.16243712243922}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (AbilityInstance) {\n\t\tARWeaponInventoryComponent* WeaponComponent = GetOwnerWeaponComponent();\n\t\tif (WeaponComponent) {\n\t\t\tAARCharacter* Character = Cast<AARCharacter>(WeaponComponent->GetOwner());\n\t\t\tif (Character) {\n\t\t\t\tFARMagazineUpgradeItem* NewMagazineUpgrade = InMagazineUpgrade->Duplicate();\n\t\t\t\tNewMagazineUpgrade->ItemID = WeaponComponent->GetMagazineUpgradeItemID();\n\t\t\t\tWeaponComponent->SetMagazineUpgradeItemID(NewMagazineUpgrade->ItemID);\n\t\t\t\tWeaponComponent->SetMagazineUpgradeItem(NewMagazineUpgrade);\n\t\t\t\tif (Character->HasAuthority()) {\n\t\t\t\t\tNewMagazineUpgrade->UpdateValue();\n\t\t\t\t\tAbilityInstance->ApplyMagazineUpgrade(NewMagazineUpgrade);\n\t\t\t\t}\n\t\t\t\tOnMagazineUpdateAdded(NewMagazineUpgrade);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 45.00804569501089}]}
{"instance_id": "404276da398b", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tif (AARCharacter* Character = Cast<AARCharacter>(POwner)) {\n\t\tUAFAbilityComponent* AbilityComp = Character->GetAbilityComp();\n\t\tif (!AbilityComp)\n\t\t\treturn;\n\t\tFAFOnAbilityReady Del = FAFOnAbilityReady::CreateUObject(this, &UARWeaponInventoryComponent::OnAbilityAdded);\n\t\tAbilityComp->AddOnAbilityReadyDelegate(ServerWeaponAbilities[LocalIndex], Del);\n\t\tUARItemWeapon* ItemWeapon = Cast<UARItemWeapon>(GroupToComponent[LocalIndex]->GetChildActor());\n\t\tItemWeapon->SetAbilityToItem(InAbilityTag.LoadSynchronous());\n\t}\n}", "CodeBleu_score": 56.43270091376703}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tif (AARCharacter* Character = Cast<AARCharacter>(POwner)) {\n\t\tUAFAbilityComponent* AbilityComp = Character->GetAbilityComp();\n\t\tif (!AbilityComp)\n\t\t\treturn;\n\t\tFAFOnAbilityReady Del = FAFOnAbilityReady::CreateUObject(this, &UARWeaponInventoryComponent::OnAbilityAdded);\n\t\tAbilityComp->AddOnAbilityReadyDelegate(InAbilityTag, Del);\n\n\t\tClientWeaponAbilities[LocalIndex] = InAbilityTag;\n\t\t//handle case of Client/Server ability handle.\n\t\tAbilityComp->NativeAddAbility(InAbilityTag, InAbilityTag);\n\t}\n}", "CodeBleu_score": 57.22615033781301}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tif (AARCharacter* Character = Cast<AARCharacter>(POwner)) {\n\t\tUAFAbilityComponent* AbilityComp = Character->GetAbilityComp();\n\t\tif (!AbilityComp)\n\t\t\treturn;\n\t\tFAFOnAbilityReady Del = FAFOnAbilityReady::CreateUObject(this, &UARWeaponInventoryComponent::OnAbilityAdded);\n\t\tAbilityComp->AddOnAbilityReadyDelegate(ServerWeaponAbilities[LocalIndex], Del);\n\n\t\tUChildActorComponent* WeaponComp = GroupToComponent[LocalIndex];\n\t\tif (WeaponComp) {\n\t\t\tWeaponComp->SetChildActorClass(InAbilityTag.LoadSynchronous());\n\t\t\tWeaponComp->SetRelativeLocation(FVector(0, 0, 0));\n\t\t\tWeaponComp->SetRelativeRotation(FRotator(0, 0, 0));\n\t\t}\n\t}\n}", "CodeBleu_score": 54.000197969773325}]}
{"instance_id": "2e97aab98981", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tif (AARCharacter* Character = Cast<AARCharacter>(POwner)) {\n\t\tFARWeaponRPC WeaponData;\n\t\tWeaponData.Weapon = Character->GetHolsteredRightWeapon();\n\t\tWeaponData.Position = Character->GetHolsteredRightWeapon()->GetRelativeLocation();\n\t\tWeaponData.Rotation = Character->GetHolsteredRightWeapon()->GetRelativeRotation();\n\n\t\tCharacter->ServerSetHolsteredRightWeapon(WeaponData);\n\t\tCharacter->SetHolsteredRightWeapon(nullptr);\n\n\t\tWeaponData.Weapon = Character->GetHolsteredLeftWeapon();\n\t\tWeaponData.Position = Character->GetHolsteredLeftWeapon()->GetRelativeLocation();\n\t\tWeaponData.Rotation = Character->GetHolsteredLeftWeapon()->GetRelativeRotation();\n\n\t\tCharacter->ServerSetHolsteredLeftWeapon(WeaponData);\n\t\tCharacter->SetHolsteredLeftWeapon(nullptr);\n\n\t\tWeaponData.Weapon = Character->GetHolsteredBackDownWeapon();\n\t\tWeaponData.Position = Character->GetHolsteredBackDownWeapon()->GetRelativeLocation();\n\t\tWeaponData.Rotation = Character->GetHolsteredBackDownWeapon()->GetRelativeRotation();\n\n\t\tCharacter->ServerSetHolsteredBackDownWeapon(WeaponData);\n\t\tCharacter->SetHolsteredBackDownWeapon(nullptr);\n\n\t\tWeaponData.Weapon = Character->GetHolsteredSideLeftWeapon();\n\t\tWeaponData.Position = Character->GetHolsteredSideLeftWeapon()->GetRelativeLocation();\n\t\tWeaponData.Rotation = Character->GetHolsteredSideLeftWeapon()->GetRelativeRotation();\n\n\t\tCharacter->ServerSetHolsteredSideLeftWeapon(WeaponData);\n\t\tCharacter->SetHolsteredSideLeftWeapon(nullptr);\n\n\t\tCharacter->ServerUnequipWeapon(LocalIndex);\n\t}\n}", "CodeBleu_score": 34.585950232089004}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tif (AARCharacter* Character = Cast<AARCharacter>(POwner)) {\n\t\tFARWeaponRPC WeaponRPC;\n\t\tWeaponRPC.Weapon = NULL;\n\t\tWeaponRPC.Position = FVector::ZeroVector;\n\t\tWeaponRPC.Rotation = FRotator::ZeroRotator;\n\t\tWeaponRPC.bHolstered = true;\n\n\t\tif (LocalIndex == CurrentWeaponIndex) {\n\t\t\tWeaponRPC.Weapon = Character->GetHolsteredWeapon(CurrentWeaponIndex);\n\t\t\tWeaponRPC.Position = Character->GetHolsteredWeaponPosition(CurrentWeaponIndex);\n\t\t\tWeaponRPC.Rotation = Character->GetHolsteredWeaponRotation(CurrentWeaponIndex);\n\t\t\tWeaponRPC.bHolstered = false;\n\t\t}\n\n\t\tif (LocalIndex == 0) {\n\t\t\tCharacter->SetHolsteredRightWeapon(WeaponRPC.Weapon);\n\t\t\tCharacter->SetHolsteredWeaponPosition(WeaponRPC.Position, 0);\n\t\t\tCharacter->SetHolsteredWeaponRotation(WeaponRPC.Rotation, 0);\n\t\t}\n\t\telse if (LocalIndex == 1) {\n\t\t\tCharacter->SetHolsteredLeftWeapon(WeaponRPC.Weapon);\n\t\t\tCharacter->SetHolsteredWeaponPosition(WeaponRPC.Position, 1);\n\t\t\tCharacter->SetHolsteredWeaponRotation(WeaponRPC.Rotation, 1);\n\t\t}\n\t\telse if (LocalIndex == 2) {\n\t\t\tCharacter->SetHolsteredBackDownWeapon(WeaponRPC.Weapon);\n\t\t\tCharacter->SetHolsteredWeaponPosition(WeaponRPC.Position, 2);\n\t\t\tCharacter->SetHolsteredWeaponRotation(WeaponRPC.Rotation, 2);\n\t\t}\n\t\telse if (LocalIndex == 3) {\n\t\t\tCharacter->SetHolsteredSideLeftWeapon(WeaponRPC.Weapon);\n\t\t\tCharacter->SetHolsteredWeaponPosition(WeaponRPC.Position, 3);\n\t\t\tCharacter->SetHolsteredWeaponRotation(WeaponRPC.Rotation, 3);\n\t\t}\n\n\t\tif (LocalIndex == CurrentWeaponIndex) {\n\t\t\tCharacter->UnequipWeapon(CurrentWeaponIndex);\n\t\t}\n\n\t\tGroupToComponent[LocalIndex] = NULL;\n\t}\n}", "CodeBleu_score": 50.46557135634902}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t", "CodeBleu_score": 3.123243374748474}]}
{"instance_id": "13cc35e5ecac", "generation_result": [{"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\t// This function may be called during shutdown to clean up your module.  For modules that support dynamic reloading,\n\t// we call this function before unloading the module.\n\tif (!IsRunningDedicatedServer() && FSlateApplication::IsInitialized()) {\n\t\tif (IsMoviePlayerEnabled()) {\n\t\t\tGetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 44.64723971823005}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\t// This function may be called during shutdown to clean up your module.  For modules that support dynamic reloading,\n\t// we call this function before unloading the module.\n\tif (!IsRunningDedicatedServer() && FSlateApplication::IsInitialized()) {\n\t\tif (IsMoviePlayerEnabled()) {\n\t\t\tGetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 44.64723971823005}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\t// This function may be called during shutdown to clean up your module.  For modules that support dynamic reloading,\n\t// we call this function before unloading the module.\n\tif (!IsRunningDedicatedServer() && FSlateApplication::IsInitialized()) {\n\t\tif (IsMoviePlayerEnabled()) {\n\t\t\tGetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 44.64723971823005}]}
{"instance_id": "2ee3ac60a8f3", "generation_result": [{"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tif (!IsMoviePlayerEnabled()) {\n\t\treturn;\n\t}\n\n\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"Async Loading Screen: Preparing loading screen...\"));\n\n\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\tif (!Settings->bShowLoadingScreen) {\n\t\treturn;\n\t}\n\n\tbIsStartupLoadingScreen = false;\n\tSetupLoadingScreen(Settings->DefaultLoadingScreen);\n}", "CodeBleu_score": 52.90213623738336}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\t// Log the start of the loading screen setup\n\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"Preparing loading screen...\"));\n\n\t// Check if the loading screen is enabled\n\tif (!GetDefault<ULoadingScreenSettings>()->bEnabled) {\n\t\treturn;\n\t}\n\n\t// Set the startup flag to false\n\tbIsStartupLoadingScreen = false;\n\n\t// Retrieve the default loading screen settings\n\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\t// Setup the loading screen using the default settings\n\tSetupLoadingScreen(Settings->DefaultLoadingScreen);\n}", "CodeBleu_score": 58.06176530147372}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"Preparing loading screen\"));\n\tif (IsLoadingScreenEnabled()) {\n\t\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\t\tbIsStartupLoadingScreen = false;\n\t\tSetupLoadingScreen(Settings->DefaultLoadingScreen);\n\t}\n}", "CodeBleu_score": 55.98590563689275}]}
{"instance_id": "c095588f550c", "generation_result": [{"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\t// Remove existing background images\n\tDefaultBackgroundImages.Empty();\n\tStartupBackgroundImages.Empty();\n\n\t// Retrieve the loading screen settings\n\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\t// Load and add images for the startup loading screen\n\tif (Settings->bShowStartupBackgroundImage) {\n\t\tUTexture2D* BackgroundImage = LoadObject<UTexture2D>(NULL, *Settings->StartupBackgroundImagePath);\n\t\tif (BackgroundImage) {\n\t\t\tStartupBackgroundImages.Add(BackgroundImage);\n\t\t}\n\t}\n\n\t// Load and add images for the default loading screen\n\tif (Settings->bShowDefaultBackgroundImage) {\n\t\tUTexture2D* BackgroundImage = LoadObject<UTexture2D>(NULL, *Settings->DefaultBackgroundImagePath);\n\t\tif (BackgroundImage) {\n\t\t\tDefaultBackgroundImages.Add(BackgroundImage);\n\t\t}\n\t}\n}", "CodeBleu_score": 52.26119112469474}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"LoadBackgroundImages\"));\n\t// Clear existing images\n\tStartupBackgroundImages.Empty();\n\tDefaultBackgroundImages.Empty();\n\n\t// Retrieve the loading screen settings\n\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\t// Startup loading screen\n\tfor (const FString& ImagePath : Settings->StartupLoadingScreen.BackgroundImages) {\n\t\tUTexture2D* Texture = LoadTexture(ImagePath);\n\t\tif (Texture) {\n\t\t\tStartupBackgroundImages.Add(Texture);\n\t\t}\n\t}\n\n\t// Default loading screen\n\tfor (const FString& ImagePath : Settings->DefaultLoadingScreen.BackgroundImages) {\n\t\tUTexture2D* Texture = LoadTexture(ImagePath);\n\t\tif (Texture) {\n\t\t\tDefaultBackgroundImages.Add(Texture);\n\t\t}\n\t}\n}", "CodeBleu_score": 51.31108538786038}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\t// Remove all existing background images\n\tStartupBackgroundImages.Empty();\n\tDefaultBackgroundImages.Empty();\n\n\t// Startup background images\n\tif (Settings->bPreloadStartupBackgroundImages) {\n\t\tfor (const FSoftObjectPath& ImagePath : Settings->StartupBackgroundImages) {\n\t\t\tUTexture2D* Texture = Cast<UTexture2D>(ImagePath.TryLoad());\n\t\t\tif (Texture) {\n\t\t\t\tStartupBackgroundImages.Add(Texture);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Default background images\n\tif (Settings->bPreloadDefaultBackgroundImages) {\n\t\tfor (const FSoftObjectPath& ImagePath : Settings->DefaultBackgroundImages) {\n\t\t\tUTexture2D* Texture = Cast<UTexture2D>(ImagePath.TryLoad());\n\t\t\tif (Texture) {\n\t\t\t\tDefaultBackgroundImages.Add(Texture);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 56.67381656848258}]}
{"instance_id": "4ffd56e2a326", "generation_result": [{"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\t// Check if the movie player is finished loading\n\tif (GetMoviePlayer()->IsLoadingFinished())\n\t{\n\t\t// Get the current alpha value\n\t\tfloat CurrentAlpha = CompleteTextColor.A;\n\n\t\t// Reverse the animation direction if the current alpha value is at either extreme\n\t\tif (CurrentAlpha <= 0.f || CurrentAlpha >= 1.f)\n\t\t\tCurrentAlpha *= -1.f;\n\n\t\t// Adjust the current alpha value based on the elapsed time and animation speed\n\t\tCurrentAlpha += InDeltaTime * CompleteTextAnimationSpeed;\n\n\t\t// Clamp the alpha value to the minimum and maximum range\n\t\tif (CurrentAlpha < 0.f)\n\t\t\tCurrentAlpha = 0.f;\n\t\telse if (CurrentAlpha > 1.f)\n\t\t\tCurrentAlpha = 1.f;\n\n\t\t// Update the text's color and opacity\n\t\tCompleteTextColor.A = CurrentAlpha;\n\t\tGetLoadingCompleteText().SetColorAndOpacity(CompleteTextColor);\n\n\t\t// Continue the animation if the alpha value has not reached its minimum or maximum range\n\t\tif (CurrentAlpha > 0.f && CurrentAlpha < 1.f)\n\t\t\treturn EActiveTimerReturnType::Continue;\n\t}\n\n\t// Stop the animation if the movie player is finished loading\n\treturn EActiveTimerReturnType::Stop;\n}", "CodeBleu_score": 33.04890214425254}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\t// Calculate the new alpha value based on the current time and the animation speed\n\tfloat NewAlpha = FMath::FInterpTo(LoadingCompleteTextAlpha, 0.f, InDeltaTime, CompleteTextAnimationSpeed);\n\n\t// Reverse the animation direction when the alpha value reaches either extreme\n\tif (NewAlpha <= 0.f || NewAlpha >= 1.f) {\n\t\tLoadingCompleteTextAlpha = 1.f - LoadingCompleteTextAlpha;\n\t}\n\n\t// Update the text color with the new alpha value\n\tCompleteTextColor.A = LoadingCompleteTextAlpha;\n\n\t// Continue the animation if the alpha value is not at either extreme\n\tif (NewAlpha != 0.f && NewAlpha != 1.f) {\n\t\treturn EActiveTimerReturnType::Continue;\n\t}\n\telse {\n\t\treturn EActiveTimerReturnType::Stop;\n\t}\n}", "CodeBleu_score": 26.553149212533295}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\t// Reverse the animation direction when the alpha value reaches either extreme\n\tif (CompleteTextAlpha < 0.f || CompleteTextAlpha > 1.f) {\n\t\tLoadingCompleteTextAnimationDirection *= -1.f;\n\t}\n\n\t// Increment the alpha value by the animation speed\n\tCompleteTextAlpha += LoadingCompleteTextAnimationDirection * LoadingCompleteTextAnimationSpeed * InDeltaTime;\n\n\t// Update the text color and return the animation status\n\tCompleteTextColor.A = FMath::Clamp<uint8>(CompleteTextAlpha, 0, 255);\n\treturn LoadingCompleteTextAnimationDirection > 0.f ? EActiveTimerReturnType::Continue : EActiveTimerReturnType::Stop;\n}", "CodeBleu_score": 25.889228456993013}]}
{"instance_id": "7420af124c78", "generation_result": [{"code": "bool FRaceAwaiter::await_ready(){\n\t\tcheckf(Data, TEXT(\"Attempting to await moved-from race awaiter\"));\n\tData->Lock.lock();\n\tcheckf(!Data->Promise, TEXT(\"Attempting to reuse race awaiter\"));\n\n\t// Unlock if ready and resume immediately by returning true,\n\t// otherwise carry the lock to await_suspend/Suspend\n\tbool bReady = Data->Index != -1;\n\tif (bReady)\n\t\tData->Lock.unlock();\n\treturn bReady;\n}", "CodeBleu_score": 40.70319741814033}, {"code": "bool FRaceAwaiter::await_ready(){\n\t\tcheckf(Data, TEXT(\"Attempting to await moved-from race awaiter\"));\n\tData->Lock.lock();\n\tcheckf(!Data->Promise, TEXT(\"Attempting to reuse race awaiter\"));\n\n\t// Unlock if ready and resume immediately by returning true,\n\t// otherwise carry the lock to await_suspend/Suspend\n\tbool bReady = Data->Index != -1;\n\tif (bReady)\n\t\tData->Lock.unlock();\n\treturn bReady;\n}", "CodeBleu_score": 40.70319741814033}, {"code": "bool FRaceAwaiter::await_ready(){\n\t\tcheckf(Data, TEXT(\"Attempting to await moved-from race awaiter\"));\n\tData->Lock.lock();\n\tcheckf(!Data->Promise, TEXT(\"Attempting to reuse race awaiter\"));\n\n\t// Unlock if ready and resume immediately by returning true,\n\t// otherwise carry the lock to await_suspend/Suspend\n\tbool bReady = Data->Index != -1;\n\tif (bReady)\n\t\tData->Lock.unlock();\n\treturn bReady;\n}", "CodeBleu_score": 40.70319741814033}]}
{"instance_id": "fab9fe81573a", "generation_result": [{"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tFFindPathSharedPtr StatePtr = FFindPathSharedPtr(State);\n\tif (!StatePtr.IsValid()) {\n\t\treturn false;\n\t}\n\n\tUNavigationSystemV1* NavSys = StatePtr->NS1.Get();\n\tif (!NavSys) {\n\t\treturn false;\n\t}\n\n\tif (bCleanup) {\n\t\tif (StatePtr->QueryID != 0) {\n\t\t\tNavSys->AbortPathfinding(StatePtr->QueryID);\n\t\t\tStatePtr->QueryID = 0;\n\t\t}\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 35.0845174115619}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tFFindPathSharedPtr* StatePtr = reinterpret_cast<FFindPathSharedPtr*>(State);\n\tFFindPathState* StateRef = StatePtr->Get();\n\tif (!StateRef) {\n\t\treturn false;\n\t}\n\tif (bCleanup) {\n\t\tif (StateRef->QueryID != INVALID_NAVIGATION_QUERY_ID) {\n\t\t\tStateRef->NS1.Get()->AbortNavMeshQuery(StateRef->QueryID);\n\t\t\tStateRef->QueryID = INVALID_NAVIGATION_QUERY_ID;\n\t\t}\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 37.53297684208805}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tFFindPathSharedPtr StatePtr = FFindPathSharedPtr::StaticCast(State);\n\tif (!StatePtr.IsValid()) {\n\t\treturn true;\n\t}\n\tFFindPathState& StateRef = *StatePtr;\n\tif (bCleanup) {\n\t\tif (StateRef.QueryID != 0) {\n\t\t\tUNavigationSystemV1* NavSys = StateRef.NS1.Get();\n\t\t\tif (NavSys != nullptr) {\n\t\t\t\tNavSys->AbortPathfinding(StateRef.QueryID);\n\t\t\t}\n\t\t\tStateRef.QueryID = 0;\n\t\t}\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 35.184562211502154}]}
{"instance_id": "0656af2cb3eb", "generation_result": [{"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (is_inside_tree() && !is_inside_world() && !Engine::get_singleton()->is_editor_hint() && !Engine::get_singleton()->is_test_script()) {\n\t\t\t\tif (current && !is_part_of_edited_scene()) {\n\t\t\t\t\tmake_current();\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (is_inside_tree() && !is_inside_world() && !Engine::get_singleton()->is_editor_hint() && !Engine::get_singleton()->is_test_script()) {\n\t\t\t\tif (current && !is_part_of_edited_scene()) {\n\t\t\t\t\tclear_current();\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 56.00163330639071}, {"code": "void AudioListener2D::_notification(int p_what){\n\t", "CodeBleu_score": 2.2102799370297075}, {"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (is_inside_tree() && !is_inside_world() && !get_tree()->is_editor_hint() && !Engine::get_singleton()->is_editor_hint()) {\n\t\t\t\tif (!is_current()) {\n\t\t\t\t\tmake_current();\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (is_inside_tree() && !is_inside_world() && !get_tree()->is_editor_hint() && !Engine::get_singleton()->is_editor_hint()) {\n\t\t\t\tif (is_current()) {\n\t\t\t\t\tclear_current();\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 58.50449309689934}]}
{"instance_id": "9aadd2c91e67", "generation_result": [{"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\tif (active.is_set() && !use_threads) {\n\t\tint todo = p_frames;\n\n\t\twhile (todo > 0) {\n\t\t\tint tomix = buffer_frames;\n\t\t\tif (tomix > todo)\n\t\t\t\ttomix = todo;\n\n\t\t\tlock();\n\t\t\tstart_counting_ticks();\n\n\t\t\taudio_server_process(tomix, samples_in);\n\n\t\t\tstop_counting_ticks();\n\t\t\tunlock();\n\n\t\t\tfor (int i = 0; i < tomix * channels; i++) {\n\t\t\t\tp_buffer[i] = samples_in[i];\n\t\t\t}\n\n\t\t\tp_buffer += tomix * channels;\n\t\t\ttodo -= tomix;\n\t\t}\n\t}\n}", "CodeBleu_score": 52.75256980770621}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\tif (active.is_set() && !use_threads) {\n\t\tint todo = p_frames;\n\n\t\twhile (todo > 0) {\n\t\t\tint tomix = MIN(todo, buffer_frames);\n\n\t\t\tlock();\n\t\t\tstart_counting_ticks();\n\n\t\t\taudio_server_process(tomix, samples_in);\n\n\t\t\tstop_counting_ticks();\n\t\t\tunlock();\n\n\t\t\tfor (int i = 0; i < tomix * channels; i++) {\n\t\t\t\tp_buffer[i] = samples_in[i];\n\t\t\t}\n\n\t\t\tp_buffer += tomix * channels;\n\t\t\ttodo -= tomix;\n\t\t}\n\t}\n}", "CodeBleu_score": 53.26114777588472}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\tif (active.is_set() && !use_threads) {\n\t\t// Mix in chunks.\n\t\tint frames_left = p_frames;\n\t\tint frames_mixed = 0;\n\n\t\twhile (frames_left > 0) {\n\t\t\t// Lock.\n\t\t\tmutex.lock();\n\n\t\t\t// Process audio.\n\t\t\tint frames_to_mix = MIN(frames_left, buffer_frames);\n\t\t\taudio_server_process(frames_to_mix, samples_in);\n\n\t\t\t// Unlock.\n\t\t\tmutex.unlock();\n\n\t\t\t// Copy audio into buffer.\n\t\t\tfor (int i = 0; i < channels; i++) {\n\t\t\t\tfor (int j = 0; j < frames_to_mix; j++) {\n\t\t\t\t\tp_buffer[(i * p_frames) + frames_mixed + j] = samples_in[(i * buffer_frames) + j];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tframes_mixed += frames_to_mix;\n\t\t\tframes_left -= frames_to_mix;\n\t\t}\n\t}\n}", "CodeBleu_score": 43.60783125974535}]}
{"instance_id": "56df08c77b69", "generation_result": [{"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tif (gravity_override_mode == GRAVITY_MODE_DISABLED) {\n\t\tr_gravity = Vector2();\n\t\treturn;\n\t}\n\n\tif (gravity_override_mode == GRAVITY_MODE_FORCE) {\n\t\tr_gravity = gravity_vector;\n\t\treturn;\n\t}\n\n\tif (gravity_override_mode == GRAVITY_MODE_G_FORCE) {\n\t\tr_gravity = gravity_vector * gravity;\n\t\treturn;\n\t}\n\n\tif (gravity_override_mode == GRAVITY_MODE_GRAVITY_VECTOR) {\n\t\tr_gravity = gravity_vector;\n\t\treturn;\n\t}\n\n\tif (gravity_is_point) {\n\t\tVector2 gvec = gravity_vector;\n\t\tgvec.normalize();\n\t\tgvec *= gravity_point_unit_distance;\n\t\tr_gravity = gvec - p_position;\n\t\tr_gravity.normalize();\n\t\tr_gravity *= gravity;\n\t} else {\n\t\tr_gravity = gravity_vector;\n\t\tr_gravity *= gravity;\n\t}\n}", "CodeBleu_score": 45.54103459260318}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tif (gravity_override_mode == GRAVITY_OVERRIDE_MODE_DISABLED) {\n\t\tr_gravity = Vector2();\n\t\treturn;\n\t}\n\n\tif (gravity_override_mode == GRAVITY_OVERRIDE_MODE_FORCE) {\n\t\tr_gravity = gravity_vector;\n\t\treturn;\n\t}\n\n\tif (gravity_override_mode == GRAVITY_OVERRIDE_MODE_GRAVITY_VECTOR) {\n\t\tr_gravity = gravity_vector;\n\t\treturn;\n\t}\n\n\tif (gravity_override_mode == GRAVITY_OVERRIDE_MODE_GRAVITY_POINT) {\n\t\tif (gravity_is_point) {\n\t\t\tr_gravity = gravity_vector * gravity_point_unit_distance / p_position.distance_squared_to(gravity_vector);\n\t\t} else {\n\t\t\tr_gravity = gravity_vector;\n\t\t}\n\n\t\treturn;\n\t}\n}", "CodeBleu_score": 39.73780234431041}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tif (gravity_override_mode == PhysicsServer2D::AREA_PARAM_GRAVITY_OVERRIDE_DISABLED) {\n\t\tr_gravity = Vector2();\n\t\treturn;\n\t}\n\n\tif (gravity_override_mode == PhysicsServer2D::AREA_PARAM_GRAVITY_OVERRIDE_CUSTOM) {\n\t\tr_gravity = gravity_vector;\n\t\treturn;\n\t}\n\n\tif (gravity_override_mode == PhysicsServer2D::AREA_PARAM_GRAVITY_OVERRIDE_REDIRECTED) {\n\t\tif (gravity_is_point) {\n\t\t\tVector2 to_point = p_position - gravity;\n\t\t\tif (to_point.length_squared() == 0) {\n\t\t\t\tr_gravity = Vector2();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tto_point.normalize();\n\t\t\tr_gravity = -gravity_vector * (gravity_point_unit_distance / to_point.length());\n\t\t} else {\n\t\t\tr_gravity = -gravity_vector;\n\t\t}\n\n\t\treturn;\n\t}\n\n\tr_gravity = -gravity_vector;\n}", "CodeBleu_score": 43.25442676059973}]}
{"instance_id": "f8c60f8d0caa", "generation_result": [{"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tfor (List<GodotArea2D *>::Element *E = area_list.front(); E; E = E->next()) {\n\t\tE->get()->wakeup_connected_bodies();\n\t}\n}", "CodeBleu_score": 13.287528568434098}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tfor (int i = 0; i < get_space()->get_constraint_count(); i++) {\n\t\tGodotPhysics2DConstraint *c = get_space()->get_constraint(i);\n\t\tif (c->get_body_a() == this) {\n\t\t\tif (c->get_body_b() != NULL) {\n\t\t\t\tc->get_body_b()->set_active(true);\n\t\t\t}\n\t\t} else if (c->get_body_b() == this) {\n\t\t\tc->get_body_a()->set_active(true);\n\t\t}\n\t}\n}", "CodeBleu_score": 31.626892018051816}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tfor (int i = 0; i < get_space()->get_constraints_count(); i++) {\n\t\tGodotPhysics2DServer::Constraint *c = get_space()->get_constraint(i);\n\n\t\tif (c->get_body_a() == this) {\n\t\t\tGodotBody2D *body = c->get_body_b();\n\t\t\tif (body) {\n\t\t\t\tbody->set_active(true);\n\t\t\t}\n\t\t}\n\n\t\tif (c->get_body_b() == this) {\n\t\t\tGodotBody2D *body = c->get_body_a();\n\t\t\tif (body) {\n\t\t\t\tbody->set_active(true);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 38.46615803911841}]}
{"instance_id": "0c6f6c00da9a", "generation_result": [{"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (get_space() && !monitor_query_list.in_list()) {\n\t\tget_space()->area_add_to_monitor_query_list(&monitor_query_list);\n\t}\n}", "CodeBleu_score": 71.5379315820379}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (get_space() && !monitor_query_list.in_list()) {\n\t\tget_space()->area_add_to_monitor_query_list(&monitor_query_list);\n\t}\n}", "CodeBleu_score": 71.5379315820379}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (!get_space()) {\n\t\treturn;\n\t}\n\tif (!moved_list.in_list()) {\n\t\tget_space()->area_add_to_moved_list(&moved_list);\n\t}\n}", "CodeBleu_score": 59.65751302329524}]}
{"instance_id": "efc39df0e3a3", "generation_result": [{"code": "void GodotBody3D::_update_transform_dependent(){\n\t\tif (get_space()) {\n\t\tTransform transform = get_transform();\n\t\tBasis inverse_inertia_tensor = get_inverse_inertia_tensor();\n\n\t\tVector3 center_of_mass_offset = transform.xform(get_center_of_mass_offset());\n\t\tVector3 local_center_of_mass = transform.xform(center_of_mass_offset);\n\n\t\tVector3 principal_inertia_axes = get_principal_inertia_axes();\n\t\tBasis local_inertia_tensor = Basis(principal_inertia_axes.x, principal_inertia_axes.y, principal_inertia_axes.z, Vector3(0, 0, 0));\n\t\tlocal_inertia_tensor.scale(get_mass() / local_inertia_tensor.get_determinant());\n\n\t\tset_transform(transform);\n\t\tset_center_of_mass_offset(center_of_mass_offset);\n\t\tset_local_center_of_mass(local_center_of_mass);\n\t\tset_inverse_inertia_tensor(inverse_inertia_tensor);\n\t\tset_principal_inertia_axes(principal_inertia_axes);\n\t\tset_local_inertia_tensor(local_inertia_tensor);\n\t}\n}", "CodeBleu_score": 41.6469026016139}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t\tif (mode == MODE_RIGID) {\n\t\t// Center of mass\n\t\tTransform transform = get_transform();\n\t\tTransform inverse_transform = transform.affine_inverse();\n\n\t\tVector3 com = transform.xform(mass_properties.center_of_mass);\n\t\tVector3 local_com = inverse_transform.xform(com);\n\n\t\tmass_properties.center_of_mass = local_com;\n\n\t\t// Inertia tensor\n\t\tBasis inverse_inertia_tensor = mass_properties.inertia_tensor.inverse();\n\t\tBasis principal_inertia_axes = inverse_inertia_tensor.get_orthogonal_axes();\n\n\t\tBasis inverse_inertia_tensor_world = inverse_transform.basis.transposed() * inverse_inertia_tensor * inverse_transform.basis;\n\n\t\tmass_properties.inertia_tensor = inverse_inertia_tensor_world.get_orthogonal_axes().transposed() * inverse_inertia_tensor_world;\n\t\tmass_properties.inertia_tensor.scale(mass_properties.mass);\n\n\t\t// Principal inertia axes\n\t\tmass_properties.principal_inertia_axes = principal_inertia_axes;\n\t}\n}", "CodeBleu_score": 40.17331227715374}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t\tTransform transform = get_transform();\n\tBasis inverse_inertia_tensor = get_inv_inertia_tensor();\n\tVector3 center_of_mass = transform.xform(get_mass_center());\n\tVector3 principal_inertia_axes[3] = {\n\t\ttransform.basis.get_axis(0),\n\t\ttransform.basis.get_axis(1),\n\t\ttransform.basis.get_axis(2)\n\t};\n\n\tset_inv_inertia_tensor(inverse_inertia_tensor.scaled(get_mass() / transform.basis.get_scale().length_squared()));\n\tset_principal_inertia_axes(principal_inertia_axes);\n\tset_center_of_mass(center_of_mass);\n}", "CodeBleu_score": 35.88722385844837}]}
{"instance_id": "aebafb4094a1", "generation_result": [{"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tif (AudioDriver::singleton)\n\t\tAudioDriver::singleton->process(p_frames, p_buffer, p_update_mix_time);\n}", "CodeBleu_score": 41.321168834459634}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tif (AudioDriver::singleton) {\n\t\tAudioDriver::singleton->process(p_frames, p_buffer, p_update_mix_time);\n\t}\n}", "CodeBleu_score": 42.22929489094571}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tif (p_update_mix_time)\n\t\tmix_time += p_frames / double(get_mix_rate());\n\n\tif (AudioServer::get_singleton()) {\n\t\tAudioServer::get_singleton()->audio_server_process(p_frames, p_buffer);\n\t}\n}", "CodeBleu_score": 62.91358727252202}]}
{"instance_id": "160bb23e8010", "generation_result": [{"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\tERR_FAIL_COND(p_feed.is_null());\n\n\t// find our feed\n\tint index = get_feed_index(p_feed->get_id());\n\n\tif (index == -1) {\n\t\treturn;\n\t} else {\n\t\t// remove our feed\n\t\tfeeds.remove(index);\n\n\t\tprint_verbose(\"CameraServer: Unregistered camera \" + p_feed->get_name() + \" with ID \" + itos(p_feed->get_id()) + \" and position \" + itos(p_feed->get_position()) + \" at index \" + itos(index));\n\n\t\t// let whomever is interested know\n\t\temit_signal(SNAME(\"camera_feed_removed\"), p_feed->get_id());\n\t};\n}", "CodeBleu_score": 55.40919810605699}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\tERR_FAIL_COND(p_feed.is_null());\n\n\t// remove our feed\n\tint index = get_feed_index(p_feed->get_id());\n\n\tif (index != -1) {\n\t\tfeeds.remove(index);\n\t\tprint_verbose(\"CameraServer: Unregistered camera \" + p_feed->get_name() + \" with ID \" + itos(p_feed->get_id()) + \" and position \" + itos(p_feed->get_position()) + \" at index \" + itos(index));\n\n\t\t// let whomever is interested know\n\t\temit_signal(SNAME(\"camera_feed_removed\"), p_feed->get_id());\n\t};\n}", "CodeBleu_score": 55.13709572144666}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\tERR_FAIL_COND(p_feed.is_null());\n\n\t// remove our feed\n\tint index = get_feed_index(p_feed->get_id());\n\n\tERR_FAIL_COND(index == -1);\n\n\tRef<CameraFeed> feed = feeds.write[index];\n\tfeeds.remove(index);\n\n\tprint_verbose(\"CameraServer: Unregistered camera \" + feed->get_name() + \" with ID \" + itos(feed->get_id()) + \" and position \" + itos(feed->get_position()) + \" at index \" + itos(index));\n\n\t// let whomever is interested know\n\temit_signal(SNAME(\"camera_feed_removed\"), feed->get_id());\n}", "CodeBleu_score": 53.107592546979795}]}
{"instance_id": "bef3cf110c45", "generation_result": [{"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t\tCCASSERT(action != nullptr, \"Argument must be non-nil\");\n\tauto ease = new (std::nothrow) EaseRateAction();\n\tif (ease && ease->initWithAction(action, rate)) {\n\t\tease->autorelease();\n\t\treturn ease;\n\t}\n\tCC_SAFE_DELETE(ease);\n\treturn nullptr;\n}", "CodeBleu_score": 66.79324386643366}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t\tCCASSERT(action != nullptr, \"Argument must be non-nil\");\n\n\tauto ease = new (std::nothrow) EaseRateAction();\n\tif (ease && ease->initWithAction(action, rate)) {\n\t\tease->autorelease();\n\t\treturn ease;\n\t}\n\tCC_SAFE_DELETE(ease);\n\treturn nullptr;\n}", "CodeBleu_score": 66.79324386643366}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t\tCCASSERT(action != nullptr, \"Argument must be non-nil\");\n\tauto ease = new (std::nothrow) EaseRateAction();\n\tif (ease && ease->initWithAction(action, rate)) {\n\t\tease->autorelease();\n\t\treturn ease;\n\t}\n\tCC_SAFE_DELETE(ease);\n\treturn nullptr;\n}", "CodeBleu_score": 66.79324386643366}]}
{"instance_id": "97fc6f86ad54", "generation_result": [{"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t\tif (node->getName() == childName)\n\t\treturn node;\n\n\tfor (const auto &child : node->getChildren()) {\n\t\tauto foundNode = findChildByNameRecursively(child, childName);\n\t\tif (foundNode)\n\t\t\treturn foundNode;\n\t}\n\n\treturn nullptr;\n}", "CodeBleu_score": 50.919764868125384}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t\tif (node->getName() == childName)\n\t\treturn node;\n\n\tfor (auto child : node->getChildren()) {\n\t\tauto foundNode = findChildByNameRecursively(child, childName);\n\t\tif (foundNode)\n\t\t\treturn foundNode;\n\t}\n\n\treturn nullptr;\n}", "CodeBleu_score": 50.27486434105941}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t\tif (!node)\n\t\treturn nullptr;\n\n\tif (node->getName() == childName)\n\t\treturn node;\n\n\tfor (const auto &child : node->getChildren()) {\n\t\tauto foundNode = findChildByNameRecursively(child, childName);\n\t\tif (foundNode)\n\t\t\treturn foundNode;\n\t}\n\n\treturn nullptr;\n}", "CodeBleu_score": 52.01406206653081}]}
{"instance_id": "5fcbe1fedcd2", "generation_result": [{"code": "void Animate3D::removeFromMap(){\n\t\tif (_target)\n\t{\n\t\tif (_state == Animate3D::Animate3DState::FadeIn)\n\t\t{\n\t\t\ts_fadeInAnimates.erase(_target);\n\t\t}\n\t\telse if (_state == Animate3D::Animate3DState::FadeOut)\n\t\t{\n\t\t\ts_fadeOutAnimates.erase(_target);\n\t\t}\n\t\ts_runningAnimates.erase(_target);\n\t}\n}", "CodeBleu_score": 25.861678543794813}, {"code": "void Animate3D::removeFromMap(){\n\tif (_target) {\nif (_state == Animate3DState::FadeIn) {\ns_fadeInAnimates.erase(_target);\n}\nelse if (_state == Animate3DState::FadeOut) {\ns_fadeOutAnimates.erase(_target);\n}\ns_runningAnimates.erase(_target);\n}\n}", "CodeBleu_score": 24.419392409020624}, {"code": "void Animate3D::removeFromMap(){\n\t\tif (_target)\n\t{\n\t\tauto iter = s_fadeInAnimates.find(_target);\n\t\tif (iter != s_fadeInAnimates.end())\n\t\t{\n\t\t\tif (iter->second == this)\n\t\t\t{\n\t\t\t\ts_fadeInAnimates.erase(iter);\n\t\t\t}\n\t\t}\n\t\titer = s_fadeOutAnimates.find(_target);\n\t\tif (iter != s_fadeOutAnimates.end())\n\t\t{\n\t\t\tif (iter->second == this)\n\t\t\t{\n\t\t\t\ts_fadeOutAnimates.erase(iter);\n\t\t\t}\n\t\t}\n\t\titer = s_runningAnimates.find(_target);\n\t\tif (iter != s_runningAnimates.end())\n\t\t{\n\t\t\tif (iter->second == this)\n\t\t\t{\n\t\t\t\ts_runningAnimates.erase(iter);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 66.26057541281853}]}
{"instance_id": "db8d394f7bc4", "generation_result": [{"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t\tAnimation3D* ret = Animation3D::create(fileName);\n\tif (ret) {\n\t\tret->setAnimation3DData(animationName);\n\t}\n\treturn ret;\n}", "CodeBleu_score": 20.175168812557093}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t\tAnimation3D *animation = Animation3DCache::getInstance()->getAnimation(fileName, animationName);\n\tif (animation)\n\t{\n\t\tanimation->retain();\n\t\treturn animation;\n\t}\n\n\tanimation = new (std::nothrow) Animation3D();\n\tif (animation && animation->init(fileName, animationName))\n\t{\n\t\tAnimation3DCache::getInstance()->addAnimation(animation);\n\t\tanimation->release();\n\t\treturn animation;\n\t}\n\n\tCC_SAFE_DELETE(animation);\n\treturn nullptr;\n}", "CodeBleu_score": 47.87364297426733}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t\tAnimation3D* ret = nullptr;\n\tauto key = fileName + animationName;\n\n\tauto it = _cache.find(key);\n\tif (it != _cache.end()) {\n\t\tret = it->second;\n\t}\n\telse {\n\t\tret = new (std::nothrow) Animation3D();\n\t\tif (ret && !ret->init(fileName, animationName)) {\n\t\t\tCC_SAFE_DELETE(ret);\n\t\t\tret = nullptr;\n\t\t}\n\t\telse {\n\t\t\t_cache[key] = ret;\n\t\t}\n\t}\n\n\treturn ret;\n}", "CodeBleu_score": 45.4566077799598}]}
{"instance_id": "cdf28d98d3ff", "generation_result": [{"code": "void Animation3DCache::removeUnusedAnimation(){\n\t\tfor (auto itor = _animations.begin(); itor != _animations.end();) {\n\t\tAnimation3D* animation = itor->second;\n\t\tif (animation->getReferenceCount() == 1) {\n\t\t\tCC_SAFE_RELEASE(animation);\n\t\t\titor = _animations.erase(itor);\n\t\t}\n\t\telse\n\t\t\t++itor;\n\t}\n}", "CodeBleu_score": 68.39959398897616}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t\tfor (auto itor : _animations) {\n\t\tAnimation3D* animation = itor.second;\n\t\tif (animation->getReferenceCount() == 1) {\n\t\t\tCC_SAFE_RELEASE(animation);\n\t\t\t_animations.erase(itor);\n\t\t}\n\t}\n}", "CodeBleu_score": 36.936238224801436}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t\tfor (auto itor : _animations) {\n\t\tAnimation3D* animation = itor.second;\n\t\tif (animation->getReferenceCount() == 1) {\n\t\t\tCC_SAFE_RELEASE(animation);\n\t\t\t_animations.erase(itor);\n\t\t}\n\t}\n}", "CodeBleu_score": 36.936238224801436}]}
{"instance_id": "de7926871eb8", "generation_result": [{"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\tBillBoard *ret = new (std::nothrow) BillBoard();\nif (ret && ret->initWithTexture(texture, mode))\n{\nret->autorelease();\n}\nelse\n{\nCC_SAFE_DELETE(ret);\n}\nreturn ret;\n}", "CodeBleu_score": 54.41899084775409}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\tBillBoard *ret = new (std::nothrow) BillBoard();\nif (ret && ret->initWithTexture(texture,mode))\n{\nret->autorelease();\n}\nelse\n{\nCC_SAFE_DELETE(ret);\n}\nreturn ret;\n}", "CodeBleu_score": 54.30280216081146}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\tBillBoard *pRet = new (std::nothrow) BillBoard();\nif (pRet && pRet->initWithTexture(texture, mode)) {\npRet->autorelease();\n} else {\nCC_SAFE_DELETE(pRet);\n}\nreturn pRet;\n}", "CodeBleu_score": 54.33342033741027}]}
{"instance_id": "eef1c2206d68", "generation_result": [{"code": "bool Bundle3D::load(const std::string& path){\n\t", "CodeBleu_score": 3.064062203725752}, {"code": "bool Bundle3D::load(const std::string& path){\n\t\tCC_ASSERT(!path.empty());\n\n\tif (path == _path)\n\t\treturn true;\n\n\tclear();\n\n\t_path = path;\n\n\tstd::string extension = FileUtils::getInstance()->getFileExtension(_path);\n\tif (extension == \".c3t\")\n\t{\n\t\t_isBinary = false;\n\t\treturn loadJson();\n\t}\n\telse if (extension == \".c3b\")\n\t{\n\t\t_isBinary = true;\n\t\treturn loadBinary();\n\t}\n\telse\n\t{\n\t\tCCLOGWARN(\"Bundle3D::load: Invalid bundle format: %s\", _path.c_str());\n\t\tclear();\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 48.85925255856288}, {"code": "bool Bundle3D::load(const std::string& path){\n\t", "CodeBleu_score": 3.064062203725752}]}
{"instance_id": "37b6acea681e", "generation_result": [{"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t\tif (!skindata)\n\t\treturn false;\n\n\tskindata->resetData();\n\n\tif (_isBinary)\n\t\treturn loadSkinDataBinary(skindata);\n\telse\n\t\treturn loadSkinDataJson(skindata);\n}", "CodeBleu_score": 63.26728136717021}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t\tskindata->resetData();\n\tbool ret = false;\n\tif (_isBinary) {\n\t\tret = loadSkinDataBinary(skindata);\n\t}\n\telse {\n\t\tret = loadSkinDataJson(skindata);\n\t}\n\treturn ret;\n}", "CodeBleu_score": 65.55106518081836}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t\tskindata->resetData();\n\n\tif (_isBinary)\n\t\treturn loadSkinDataBinary(id, skindata);\n\telse\n\t\treturn loadSkinDataJson(id, skindata);\n}", "CodeBleu_score": 58.85801155296715}]}
{"instance_id": "97449825e4ef", "generation_result": [{"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\tAudioDecoder* decoder = (AudioDecoder*)datasource;\n\tsize_t bytesRead = 0;\n\n\tif (decoder->m_file == NULL) {\n\t\treturn 0;\n\t}\n\n\tif (decoder->m_remainingDataSize == 0) {\n\t\treturn 0;\n\t}\n\n\tsize_t bytesToRead = decoder->m_remainingDataSize;\n\tif (bytesToRead > size * nmemb) {\n\t\tbytesToRead = size * nmemb;\n\t}\n\n\tbytesRead = fread(ptr, 1, bytesToRead, decoder->m_file);\n\tdecoder->m_currentFilePosition += bytesRead;\n\tdecoder->m_remainingDataSize -= bytesRead;\n\n\treturn bytesRead;\n}", "CodeBleu_score": 45.2524942241024}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\tAudioDecoder* decoder = (AudioDecoder*)datasource;\n\tsize_t bytesToRead = size * nmemb;\n\tif (bytesToRead > decoder->remainingDataSize) {\n\t\tbytesToRead = decoder->remainingDataSize;\n\t}\n\tif (bytesToRead > 0) {\n\t\tmemcpy(ptr, decoder->data, bytesToRead);\n\t\tdecoder->data += bytesToRead;\n\t\tdecoder->remainingDataSize -= bytesToRead;\n\t}\n\treturn bytesToRead;\n}", "CodeBleu_score": 49.613161219688315}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\tAudioDecoder* decoder = (AudioDecoder*)datasource;\n\tif (decoder->_file == NULL) {\n\t\treturn 0;\n\t}\n\n\tsize_t bytesToRead = size * nmemb;\n\tif (bytesToRead > decoder->_fileRemaining) {\n\t\tbytesToRead = decoder->_fileRemaining;\n\t}\n\n\tsize_t bytesRead = fread(ptr, 1, bytesToRead, decoder->_file);\n\tdecoder->_fileRemaining -= bytesRead;\n\n\treturn bytesRead;\n}", "CodeBleu_score": 45.63680394368173}]}
{"instance_id": "0f4db164ba5d", "generation_result": [{"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t\n}", "CodeBleu_score": 7.8349078318894465}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t\n}", "CodeBleu_score": 7.8349078318894465}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t\n}", "CodeBleu_score": 7.8349078318894465}]}
{"instance_id": "0f88663615c6", "generation_result": [{"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\tstd::lock_guard<std::mutex> guard(sDownloaderMutex);\nauto it = sDownloaderMap.find(id);\nif (it == sDownloaderMap.end()) {\nreturn nullptr;\n}\nreturn it->second;\n}", "CodeBleu_score": 68.4510993071872}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t\tstd::lock_guard<std::mutex> guard(sDownloaderMutex);\n\tauto it = sDownloaderMap.find(id);\n\tif (it != sDownloaderMap.end()) {\n\t\treturn it->second;\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 66.85919897882056}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\tstd::lock_guard<std::mutex> guard(sDownloaderMutex);\nauto it = sDownloaderMap.find(id);\nif (it != sDownloaderMap.end()) {\nreturn it->second;\n}\nreturn nullptr;\n}", "CodeBleu_score": 66.67277894549393}]}
{"instance_id": "a5aafaaa944c", "generation_result": [{"code": "function M.playMusic(filename, isLoop)\n\t\tlocal loopValue = false\n\tif nil ~= isLoop then\n\t\tloopValue = isLoop\n\tend\n\tcc.SimpleAudioEngine:getInstance():playMusic(filename, loopValue)", "CodeBleu_score": 90.10072137492988}, {"code": "function M.playMusic(filename, isLoop)\n\t\tlocal loopValue = false\n\tif nil ~= isLoop then\n\t\tloopValue = isLoop\n\tend\n\tcc.SimpleAudioEngine:getInstance():playMusic(filename, loopValue)", "CodeBleu_score": 90.10072137492988}, {"code": "function M.playMusic(filename, isLoop)\n\t\tlocal loopValue = false\n\tif nil ~= isLoop then\n\t\tloopValue = isLoop\n\tend\n\tcc.SimpleAudioEngine:getInstance():playMusic(filename, loopValue)", "CodeBleu_score": 90.10072137492988}]}
{"instance_id": "16f2ad4bb4e8", "generation_result": [{"code": "function ccs.TriggerObj:detect()\n\t\tif not self._enable or nil == self._cons then\n\t\treturn true\n\tend\n\n\tlocal ret = true\n\tfor i = 1, table.getn(self._cons) do\n\t\tlocal con = self._cons[i]\n\t\tif nil ~= con then\n\t\t\tret = ret and con:detect()\n\t\tend\n\tend\n\treturn ret", "CodeBleu_score": 54.76832272988912}, {"code": "function ccs.TriggerObj:detect()\n\t\tif not self._enable then\n\t\treturn true\n\tend\n\n\tlocal con = self._cons\n\tfor i = 1, table.getn(con) do\n\t\tlocal conObj = con[i]\n\t\tif not conObj:detect() then\n\t\t\treturn false\n\t\tend\n\tend\n\n\treturn true", "CodeBleu_score": 30.877946126255857}, {"code": "function ccs.TriggerObj:detect()\n\t\tif not self._enable or nil == self._cons then\n\t\treturn true\n\tend\n\n\tfor i = 1, table.getn(self._cons) do\n\t\tlocal con = self._cons[i]\n\t\tif nil ~= con and not con:detect() then\n\t\t\treturn false\n\t\tend\n\tend\n\n\treturn true", "CodeBleu_score": 42.244276500720126}]}
{"instance_id": "e73b10418cb6", "generation_result": [{"code": "function ccs.TriggerObj:removeAll()\n\t\tlocal i = 1\n\tlocal obj = nil\n\twhile i <= table.getn(self._cons) do\n\t\tobj = self._cons[i]\n\t\tif nil ~= obj and obj.removeAll then\n\t\t\tobj:removeAll()\n\t\tend\n\t\ti = i + 1\n\tend\n\ti = 1\n\twhile i <= table.getn(self._acts) do\n\t\tobj = self._acts[i]\n\t\tif nil ~= obj and obj.removeAll then\n\t\t\tobj:removeAll()\n\t\tend\n\t\ti = i + 1\n\tend\n\tself._cons = {}\n\tself._acts = {}", "CodeBleu_score": 74.79420326858634}, {"code": "function ccs.TriggerObj:removeAll()\n\t\tif self._enable then\n\t\tfor i = 1, table.getn(self._cons) do\n\t\t\tlocal obj = self._cons[i]\n\t\t\tif nil ~= obj and obj.removeAll then\n\t\t\t\tobj:removeAll()\n\t\t\tend\n\t\tend\n\t\tfor i = 1, table.getn(self._acts) do\n\t\t\tlocal obj = self._acts[i]\n\t\t\tif nil ~= obj and obj.removeAll then\n\t\t\t\tobj:removeAll()\n\t\t\tend\n\t\tend\n\t\tself._cons = {}\n\t\tself._acts = {}\n\tend", "CodeBleu_score": 72.35014051090408}, {"code": "function ccs.TriggerObj:removeAll()\n\t\tlocal obj = nil\n\tfor i = 1, table.getn(self._cons) do\n\t\tobj = self._cons[i]\n\t\tif nil ~= obj and nil ~= obj.removeAll then\n\t\t\tobj:removeAll()\n\t\tend\n\tend\n\n\tfor i = 1, table.getn(self._acts) do\n\t\tobj = self._acts[i]\n\t\tif nil ~= obj and nil ~= obj.removeAll then\n\t\t\tobj:removeAll()\n\t\tend\n\tend\n\n\tself._cons = {}\n\tself._acts = {}", "CodeBleu_score": 79.03613132695997}]}
{"instance_id": "d5a1333d794d", "generation_result": [{"code": "function BasicCollider:hurtEffect(target)\n\t\tlocal hurtEffect = cc.BillBoard:create()\n\thurtEffect:setPosition3D(cc.p(target._myPos.x, target._myPos.y, target._myPos.z))\n\thurtEffect:setScale(0.3)\n\thurtEffect:setCameraMask(EnumCameraMask.HURT)\n\thurtEffect:setLocalZOrder(10)\n\thurtEffect:runAction(cc.Sequence:create(cc.ScaleTo:create(0.1, 0.3), cc.ScaleTo:create(0.1, 0.1), cc.CallFunc:create(function() hurtEffect:removeFromParent() end)))\n\thurtEffect:addChild(self.hurtAnimation:clone())\n\ttarget:addChild(hurtEffect)", "CodeBleu_score": 57.11181107018395}, {"code": "function BasicCollider:hurtEffect(target)\n\t\tlocal hurtEffect = cc.BillBoard:create(\"HurtEffect.png\")\n\thurtEffect:setScale(0.3)\n\thurtEffect:setCameraMask(EnumCameraMask.HURT_EFFECT)\n\thurtEffect:runAction(cc.ScaleTo:create(0.5,1.2))\n\thurtEffect:runAction(cc.ScaleTo:create(0.5,1))\n\thurtEffect:runAction(cc.Sequence:create(cc.DelayTime:create(0.5),cc.RemoveSelf:create()))\n\thurtEffect:setPosition3D(target:getPosition3D())\n\ttarget:addChild(hurtEffect)", "CodeBleu_score": 56.08522420007387}, {"code": "function BasicCollider:hurtEffect(target)\n\t\tlocal hurtEffect = cc.BillBoard:create(\"res/hurt_effect.png\")\n\thurtEffect:setScale(1.5)\n\thurtEffect:setPosition(self._myPos)\n\thurtEffect:setCameraMask(EnumCameraMask.HurtEffect)\n\thurtEffect:setLocalZOrder(999)\n\thurtEffect:runAction(cc.RepeatForever:create(cc.Animate:create(self.hurtAnimation)))\n\ttarget:addChild(hurtEffect)", "CodeBleu_score": 49.90055278519862}]}
{"instance_id": "f478d7e70ea6", "generation_result": [{"code": "function MageNormalAttack:onTimeOut()\n\t\tself.part1:stopSystem()\n\tself.part2:stopSystem()\n\tlocal seq = cc.Sequence:create(cc.DelayTime:create(0.5), cc.RemoveSelf:create())\n\tself:runAction(seq)\n\tlocal smoke = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\"iceTrail\"))\n\tlocal magicf = cc.SpriteFrameCache:getInstance():getSpriteFrame(\"puff.png\")\n\tsmoke:setTextureWithRect(magicf:getTexture(), magicf:getRect())\n\tsmoke:setScale(2)\n\tsmoke:setPosition3D(cc.V3(0,0,50))\n\tsmoke:setRotation3D({x=90, y=0, z=0})\n\tsmoke:setGlobalZOrder(0)\n\tsmoke:setPositionZ(50)\n\tself:addChild(smoke)\n\tlocal pixi = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\"pixi\"))\n\tlocal pixif = cc.SpriteFrameCache:getInstance():getSpriteFrame(\"particle.png\")\n\tpixi:setTextureWithRect(pixif:getTexture(), pixif:getRect())\n\tpixi:setScale(2)\n\tpixi:setPosition3D(cc.V3(0,0,50))\n\tpixi:setRotation3D({x=90, y=0, z=0})\n\tpixi:setGlobalZOrder(0)\n\tpixi:setPositionZ(50)\n\tself:addChild(pixi)\n\tself.part1 = smoke\n\tself.part2 = pixi\n\tself.sp:setTexture(\"FX/FX.png\", RECTS.fireBall)\n\tself.sp:setScale(2)\n\tself.sp:runAction(cc.FadeOut:create(0.5))", "CodeBleu_score": 56.63766843402331}, {"code": "function MageNormalAttack:onTimeOut()\n\t\tself.part1:stopSystem()\n\tself.part2:stopSystem()\n\tlocal seq = cc.Sequence:create(cc.DelayTime:create(0.5), cc.RemoveSelf:create())\n\tself:runAction(seq)\n\tlocal part = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\"fire\"))\n\tlocal magicf = cc.SpriteFrameCache:getInstance():getSpriteFrame(\"puff.png\")\n\tpart:setTextureWithRect(magicf:getTexture(), magicf:getRect())\n\tpart:setScale(2)\n\tself:addChild(part)\n\tpart:setPosition(cc.p(0,0))\n\tpart:setLifeVar(1)\n\tpart:setAngleVar(360)\n\tpart:setStartSizeVar(10)\n\tpart:setEndSizeVar(0)\n\tpart:setEmissionRate(200)\n\tpart:setGravity(cc.p(0,0))\n\tpart:setSpeed(20)\n\tpart:setTangentialAccel(0)\n\tpart:setRadialAccel(0)\n\tpart:setScale(2)\n\tpart:setOpacity(255)\n\tpart:setBlendAdditive(false)\n\tpart:setDuration(-1)\n\tpart:setGlobalZOrder(0)\n\tpart:setPositionZ(50)\n\tpart:setCameraMask(UserCameraFlagMask)\n\tpart:stopSystem()\n\tlocal seq = cc.Sequence:create(cc.DelayTime:create(0.5), cc.RemoveSelf:create())\n\tpart:runAction(seq)\n\tself.sp:stopAllActions()\n\tself.sp:runAction(cc.FadeOut:create(0.5))\n\tself.sp:setScale(2)", "CodeBleu_score": 57.44099831641234}, {"code": "function MageNormalAttack:onTimeOut()\n\t\tself.part1:stopSystem()\n\tself.part2:stopSystem()\n\tlocal seq = cc.Sequence:create(cc.DelayTime:create(0.5), cc.RemoveSelf:create())\n\tself:runAction(seq)\n\tlocal pixi = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\\\"pixi\\\"))\n\tlocal pixif = cc.SpriteFrameCache:getInstance():getSpriteFrame(\\\"particle.png\\\")\n\tpixi:setTextureWithRect(pixif:getTexture(), pixif:getRect())\n\tpixi:setScale(2)\n\tself:addChild(pixi)\n\tpixi:setRotation3D({x=90, y=0, z=0})\n\tpixi:setGlobalZOrder(0)\n\tpixi:setPositionZ(50)\n\tpixi:setPosition(self._myPos)\n\tpixi:setLife(0.2)\n\tpixi:setStartSize(10)\n\tpixi:setEndSize(0)\n\tpixi:setEmissionRate(100)\n\tpixi:setSpeed(100)\n\tpixi:setTangentialAccel(100)\n\tpixi:setGravity(cc.V2(0, -20))\n\tpixi:setAngle(90)\n\tpixi:setStartColor({r=0, g=0, b=0, a=0})\n\tpixi:setEndColor({r=0, g=0, b=0, a=0})\n\tpixi:setBlendAdditive(true)\n\tpixi:setOpacity(128)\n\tpixi:stopSystem()\n\tself.part2 = pixi\n\tself.part2:setCameraMask(UserCameraFlagMask)", "CodeBleu_score": 51.457780131262474}]}
{"instance_id": "d735c4ea6358", "generation_result": [{"code": "function BattlefieldUI:heroDead(hero)\n\t\tif hero == \"Knight\" then \n\t\tself.KnightPng:setShaderProgram(self.greyShader)\n\t\tself.KnightPng:setSpriteFrame(self.KnightPng:getSpriteFrameByName(\"UI-1136-640_35_clone.png\"))\n\t\tself.KnightAngryFullSignal:setVisible(false)\n\t\tself.KnightAngryClone:setVisible(false)\n\t\tself.KnightAngry:setPercentage(0)\n\telseif hero == \"Mage\" then \n\t\tself.MagePng:setShaderProgram(self.greyShader)\n\t\tself.MagePng:setSpriteFrame(self.MagePng:getSpriteFrameByName(\"UI-1136-640_36_clone.png\"))\n\t\tself.MageAngryFullSignal:setVisible(false)\n\t\tself.MageAngryClone:setVisible(false)\n\t\tself.MageAngry:setPercentage(0)\n\telseif hero == \"Archer\" then \n\t\tself.ArcherPng:setShaderProgram(self.greyShader)\n\t\tself.ArcherPng:setSpriteFrame(self.ArcherPng:getSpriteFrameByName(\"UI-1136-640_37_clone.png\"))\n\t\tself.ArcherAngryFullSignal:setVisible(false)\n\t\tself.ArcherAngryClone:setVisible(false)\n\t\tself.ArcherAngry:setPercentage(0)\n\tend ", "CodeBleu_score": 47.66401517486373}, {"code": "function BattlefieldUI:heroDead(hero)\n\t\tif hero.name == \"Knight\" then\n\t\thero._knight:setTexture(self.knightDead)\n\t\thero._knight:setSpriteFrame(self.knightDeadFrame)\n\t\thero._knight:setColor(grey)\n\t\thero._knightAngerFullSignal:setVisible(false)\n\t\thero._knightAngerClone:setVisible(false)\n\telseif hero.name == \"Archer\" then\n\t\thero._archer:setTexture(self.archerDead)\n\t\thero._archer:setSpriteFrame(self.archerDeadFrame)\n\t\thero._archer:setColor(grey)\n\t\thero._archerAngerFullSignal:setVisible(false)\n\t\thero._archerAngerClone:setVisible(false)\n\telseif hero.name == \"Mage\" then\n\t\thero._mage:setTexture(self.mageDead)\n\t\thero._mage:setSpriteFrame(self.mageDeadFrame)\n\t\thero._mage:setColor(grey)\n\t\thero._mageAngerFullSignal:setVisible(false)\n\t\thero._mageAngerClone:setVisible(false)\n\tend", "CodeBleu_score": 49.19504855875687}, {"code": "function BattlefieldUI:heroDead(hero)\n\t\tif hero._name == \"Knight\" then\n\t\thero._knightPng:setShaderProgram(self.greyShader)\n\t\thero._knightPng:setSpriteFrame(\"UI-1136-640_04_clone.png\")\n\t\thero._knightPng:setScale(0.7)\n\t\thero._knightPng:setOpacity(150)\n\t\thero._knightPng:runAction(cc.FadeIn:create(0.5))\n\t\thero._knightPng:setTexture(cc.Texture2D:create(\"UI-1136-640_04_clone.png\"))\n\t\thero._knightPng:setTextureRect(cc.rect(0,0,1136,640))\n\t\thero._knightPng:setBlendFunc(gl.GL_SRC_ALPHA,gl.GL_ONE_MINUS_SRC_ALPHA)\n\t\thero._knightPng:setVisible(true)\n\t\thero._knightFrame:setVisible(false)\n\t\thero._knightAngry:setVisible(false)\n\t\thero._knightAngryClone:setVisible(false)\n\t\thero._knightAngryFullSignal:setVisible(false)\n\telseif hero._name == \"Archer\" then\n\t\thero._archerPng:setShaderProgram(self.greyShader)\n\t\thero._archerPng:setSpriteFrame(\"UI-1136-640_05_clone.png\")\n\t\thero._archerPng:setScale(0.7)\n\t\thero._archerPng:setOpacity(150)\n\t\thero._archerPng:runAction(cc.FadeIn:create(0.5))\n\t\thero._archerPng:setTexture(cc.Texture2D:create(\"UI-1136-640_05_clone.png\"))\n\t\thero._archerPng:setTextureRect(cc.rect(0,0,1136,640))\n\t\thero._archerPng:setBlendFunc(gl.GL_SRC_ALPHA,gl.GL_ONE_MINUS_SRC_ALPHA)\n\t\thero._archerPng:setVisible(true", "CodeBleu_score": 41.66312186515173}]}
{"instance_id": "009f167d3ab2", "generation_result": [{"code": "local function moveCamera(dt)\n\t\tif specialCamera.valid then\n\t\tlocal cameraPosition = specialCamera.position\n\t\tlocal targetPosition = specialCamera.targetPosition\n\t\tlocal targetRotation = specialCamera.targetRotation\n\t\tlocal cameraRotation = specialCamera.cameraRotation\n\t\tlocal cameraTarget = specialCamera.cameraTarget\n\t\tlocal cameraSpeed = specialCamera.cameraSpeed\n\t\tlocal cameraRotationSpeed = specialCamera.cameraRotationSpeed\n\t\tlocal cameraTargetSpeed = specialCamera.cameraTargetSpeed\n\t\tlocal cameraOffset = specialCamera.cameraOffset\n\t\tlocal cameraZoom = specialCamera.cameraZoom\n\t\tlocal cameraZoomSpeed = specialCamera.cameraZoomSpeed\n\t\tlocal cameraZoomMin = specialCamera.cameraZoomMin\n\t\tlocal cameraZoomMax = specialCamera.cameraZoomMax\n\t\tlocal cameraZoomTarget = specialCamera.cameraZoomTarget\n\t\tlocal cameraZoomTargetSpeed = specialCamera.cameraZoomTargetSpeed\n\t\tlocal cameraZoomMinTarget = specialCamera.cameraZoomMinTarget\n\t\tlocal cameraZoomMaxTarget = specialCamera.cameraZoomMaxTarget\n\t\tlocal cameraZoomMinTargetSpeed = specialCamera.cameraZoomMinTargetSpeed\n\t\tlocal cameraZoomMaxTargetSpeed = specialCamera.cameraZoomMaxTargetSpeed\n\t\tlocal cameraZoomMinTargetMin = specialCamera.cameraZoomMinTargetMin\n\t\tlocal cameraZoomMaxTargetMax = specialCamera.cameraZoomMaxTargetMax\n\t\tlocal cameraZoomMinTargetMaxSpeed = specialCamera.cameraZoomMinTargetMaxSpeed\n\t\tlocal cameraZoomMaxTargetMinSpeed = specialCamera.cameraZoomMaxTargetMinSpeed\n\t\tlocal cameraZoomMinTargetMin = specialCamera.cameraZoomMinTargetMin\n\t\tlocal cameraZoomMaxTargetMax = specialCamera.cameraZoomMaxTargetMax\n\t\tlocal cameraZoomMinTargetMaxSpeed = specialCamera.cameraZoomMinTargetMaxSpeed\n\t\tlocal cameraZoomMaxTargetMinSpeed = specialCamera.cameraZoomMaxTargetMinSpeed\n\t\tlocal cameraZoomMinTargetMin = specialCamera.cameraZoomMinTargetMin\n\t\tlocal cameraZoomMaxTargetMax = specialCamera.cameraZoomMaxTargetMax\n\t\tlocal cameraZoomMinTargetMaxSpeed = specialCamera.cameraZoomMinTargetMaxSpeed\n\t\tlocal cameraZoomMaxTargetMinSpeed = specialCamera.cameraZoomMaxTargetMinSpeed\n\t\tlocal cameraZoomMinTargetMin = specialCamera.cameraZoomMinTargetMin\n\t\tlocal cameraZoomMaxTargetMax = specialCamera.cameraZoomMaxTargetMax\n\t\tlocal cameraZoomMinTargetMaxSpeed = special", "CodeBleu_score": 23.013249783095134}, {"code": "local function moveCamera(dt)\n\t\tif specialCamera.valid then\n\t\tlocal target = specialCamera.position\n\t\tlocal current = cc.Camera:getInstance():getEyePosition()\n\t\tlocal diff = target - current\n\t\tlocal distance = diff.getDistance(cc.p(0,0))\n\t\tif distance > 0 then\n\t\t\tlocal newPos = current + diff * dt * 20\n\t\t\tcc.Camera:getInstance():lookAt(target)\n\t\t\tcc.Camera:getInstance():setEyePosition(newPos)\n\t\telse\n\t\t\tspecialCamera.valid = false\n\t\tend\n\telse\n\t\tlocal focus = nil\n\t\tfor _,hero in pairs(gameMaster:getHeroes()) do\n\t\t\tif hero.valid and hero.visible then\n\t\t\t\tif focus == nil then\n\t\t\t\t\tfocus = hero:getFocusPoint()\n\t\t\t\telse\n\t\t\t\t\tfocus = focus + hero:getFocusPoint()\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif focus ~= nil then\n\t\t\tfocus = focus / #gameMaster:getHeroes()\n\t\t\tlocal current = cc.Camera:getInstance():getEyePosition()\n\t\t\tlocal diff = focus - current\n\t\t\tlocal distance = diff.getDistance(cc.p(0,0))\n\t\t\tif distance > 0 then\n\t\t\t\tlocal newPos = current + diff * dt * 20\n\t\t\t\tcc.Camera:getInstance():lookAt(focus)\n\t\t\t\tcc.Camera:getInstance():setEyePosition(newPos)\n\t\t\tend\n\t\tend\n\tend", "CodeBleu_score": 39.538133427115426}, {"code": "local function moveCamera(dt)\n\t\tlocal heroes = Hero.getAllHeroes()\n\tlocal heroCount = #heroes\n\tlocal hero = nil\n\tlocal heroFocusPoint = nil\n\tlocal heroFocusPointMin = nil\n\tlocal heroFocusPointMax = nil\n\tlocal heroFocusPointCenter = nil\n\tlocal heroFocusPointRadius = 0\n\tlocal cameraTarget = nil\n\tlocal cameraTargetMin = nil\n\tlocal cameraTargetMax = nil\n\tlocal cameraTargetCenter = nil\n\tlocal cameraTargetRadius = 0\n\tlocal cameraFocusPoint = nil\n\tlocal cameraFocusPointMin = nil\n\tlocal cameraFocusPointMax = nil\n\tlocal cameraFocusPointCenter = nil\n\tlocal cameraFocusPointRadius = 0\n\tlocal cameraFocusPointMinRadius = 0\n\tlocal cameraFocusPointMaxRadius = 0\n\tlocal cameraFocusPointCenterRadius = 0\n\tlocal cameraFocusPointMinCenter = nil\n\tlocal cameraFocusPointMaxCenter = nil\n\tlocal cameraFocusPointCenterCenter = nil\n\tlocal cameraFocusPointMinCenterRadius = 0\n\tlocal cameraFocusPointMaxCenterRadius = 0\n\tlocal cameraFocusPointCenterCenterRadius = 0\n\tlocal cameraFocusPointMinCenterRadius = 0\n\tlocal cameraFocusPointMaxCenterRadius = 0\n\tlocal cameraFocusPointCenterCenterRadius = 0\n\tlocal cameraFocusPointMinCenterCenter = nil\n\tlocal cameraFocusPointMaxCenterCenter = nil\n\tlocal cameraFocusPointCenterCenterCenter = nil\n\tlocal cameraFocusPointMinCenterCenterRadius = 0\n\tlocal cameraFocusPointMaxCenterCenterRadius = 0\n\tlocal cameraFocusPointCenterCenterCenterRadius = 0\n\tlocal cameraFocusPointMinCenterCenterRadius = 0\n\tlocal cameraFocusPointMaxCenterCenterRadius = 0\n\tlocal cameraFocusPointCenterCenterCenterRadius = 0\n\tlocal cameraFocusPointMinCenterCenterCenter = nil\n\tlocal cameraFocusPointMaxCenterCenterCenter = nil\n\tlocal cameraFocusPointCenterCenterCenterCenter = nil\n\tlocal cameraFocusPointMinCenterCenterCenterRadius = 0\n\tlocal cameraFocusPointMaxCenterCenterCenterRadius = 0\n\tlocal cameraFocusPointCenterCenterCenterCenterRadius = 0\n\tlocal cameraFocusPointMinCenterCenterCenterRadius = 0\n\tlocal cameraFocusPointMaxCenterCenterCenterRadius = 0\n\tlocal camera", "CodeBleu_score": 16.697904894558395}]}
{"instance_id": "f7f5e7fe1dc2", "generation_result": [{"code": "local function updateParticlePos()\n\t\tfor i, v in pairs(HeroManager) do\n\t\tlocal effectNode = v:getEffectNode()\n\t\tif effectNode ~= nil then\n\t\t\teffectNode:setPosition(v:getPosition())\n\t\tend\n\tend", "CodeBleu_score": 26.06049997866638}, {"code": "local function updateParticlePos()\n\t\tfor i,hero in ipairs(HeroManager.getHeroes()) do\n\t\tif hero.effectNode ~= nil then\n\t\t\tlocal pos = getPosTable(hero)\n\t\t\thero.effectNode:setPosition(pos)\n\t\tend\n\tend", "CodeBleu_score": 35.41291081977654}, {"code": "local function updateParticlePos()\n\t\tfor i = 1, HeroManager.getHeroCount() do\n\t\tlocal hero = HeroManager.getHero(i)\n\t\tlocal effectNode = hero.effectNode\n\t\tif effectNode then\n\t\t\tlocal position = hero.getPosition()\n\t\t\teffectNode:setPosition(position)\n\t\tend\n\tend", "CodeBleu_score": 39.26953746583231}]}
{"instance_id": "77829ef7341e", "generation_result": [{"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\tlocal hero = self.layer:getChildByTag(sortorder[2])\n\tlocal type = hero:getRaceType()\n\tif type == 1 then\n\t\taudio.playMusic(\"music/knight.mp3\",true)\n\telseif type == 2 then\n\t\taudio.playMusic(\"music/archer.mp3\",true)\n\telseif type == 3 then\n\t\taudio.playMusic(\"music/mage.mp3\",true)\n\tend", "CodeBleu_score": 49.03197432733409}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\tlocal hero = self.layer:getChildByTag(sortorder[2])\n\tlocal type = hero:getRaceType()\n\tif type == 0 then\n\t\taudio.playMusic(\"audio/music/knight.mp3\",true)\n\telseif type == 1 then\n\t\taudio.playMusic(\"audio/music/archer.mp3\",true)\n\telseif type == 2 then\n\t\taudio.playMusic(\"audio/music/mage.mp3\",true)\n\tend", "CodeBleu_score": 49.37937999836309}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\tlocal hero = self.layer:getChildByTag(sortorder[2])\n\tlocal type = hero:getRaceType()\n\tif type == 0 then\n\t\taudio.playMusic(\"music/knight.mp3\",true)\n\telseif type == 1 then\n\t\taudio.playMusic(\"music/archer.mp3\",true)\n\telseif type == 2 then\n\t\taudio.playMusic(\"music/mage.mp3\",true)\n\tend", "CodeBleu_score": 49.03197432733409}]}
{"instance_id": "2b35fdb15a13", "generation_result": [{"code": "function GameMaster:AddHeros()\n\t\tlocal hero = Knight.new()\n\thero._goRight = true\n\thero._position = cc.p(size.width/2, size.height/2)\n\thero._sprite:setPosition(hero._position)\n\thero._sprite:setFlippedX(false)\n\thero._sprite:setFlippedY(false)\n\thero._sprite:setScale(1.0)\n\thero._sprite:setZOrder(gloableZOrder)\n\thero._state = \"idle\"\n\thero._stateTime = 0\n\thero._stateTimeMax = 0\n\thero._stateTimeMax = hero:getStateTimeMax()\n\thero._stateTimeMax = hero:getStateTimeMax()\n\thero._stateTimeMax = hero:getStateTimeMax()\n\thero._stateTimeMax = hero:getStateTimeMax()\n\thero._stateTimeMax = hero:getStateTimeMax()\n\thero._stateTimeMax = hero:getStateTimeMax()\n\thero._stateTimeMax = hero:getStateTimeMax()\n\thero._stateTimeMax = hero:getStateTimeMax()\n\thero._stateTimeMax = hero:getStateTimeMax()\n\thero._stateTimeMax = hero:getStateTimeMax()\n\thero._stateTimeMax = hero:getStateTimeMax()\n\thero._stateTimeMax = hero:getStateTimeMax()\n\thero._stateTimeMax = hero:getStateTimeMax()\n\thero._stateTimeMax = hero:getStateTimeMax()\n\thero._stateTimeMax = hero:getStateTimeMax()\n\thero._stateTimeMax = hero:getStateTimeMax()\n\thero._stateTimeMax = hero:getStateTimeMax()\n\thero._stateTimeMax = hero:getStateTimeMax()\n\thero._stateTimeMax = hero:getStateTimeMax()\n\thero._stateTimeMax = hero:getStateTimeMax()\n\thero._stateTimeMax = hero:getStateTimeMax()\n\thero._stateTimeMax = hero:getStateTimeMax()\n\thero._stateTimeMax = hero:getStateTimeMax()\n\thero._stateTimeMax = hero:getStateTimeMax()\n\thero._stateTimeMax = hero:getStateTimeMax()\n\thero._stateTimeMax = hero:getStateTimeMax()\n\thero._stateTimeMax = hero:getStateTimeMax()\n", "CodeBleu_score": 27.223495850527797}, {"code": "function GameMaster:AddHeros()\n\t\tlocal hero1 = Knight.create()\n\thero1:setPosition(cc.p(0,0))\n\thero1:setScale(0.5)\n\thero1:setAnchorPoint(cc.p(0,0))\n\thero1:setZOrder(gloableZOrder)\n\thero1:setIdleMode(true)\n\thero1:addHero(HeroManager)\n\thero1:setHeroType(1)\n\thero1:setHeroName(\"Knight\")\n\thero1:setHeroIndex(1)\n\thero1:setHeroLevel(1)\n\thero1:setHeroExp(0)\n\thero1:setHeroAttack(10)\n\thero1:setHeroDefense(10)\n\thero1:setHeroHp(100)\n\thero1:setHeroMp(100)\n\thero1:setHeroAttackRange(100)\n\thero1:setHeroSkill(10)\n\thero1:setHeroSkillRange(100)\n\thero1:setHeroSkillEffectRange(100)\n\thero1:setHeroSkillEffectType(1)\n\thero1:setHeroSkillEffectTime(100)\n\thero1:setHeroSkillEffectTurn(100)\n\thero1:setHeroSkillEffectTurnTime(100)\n\thero1:setHeroSkillEffectTurnNum(100)\n\thero1:setHeroSkillEffectTurnNumTime(100)\n\thero1:setHeroSkillEffectTurnNumAdd(100)\n\thero1:setHeroSkillEffectTurnNumAddTime(100)\n\thero1:setHeroSkillEffectTurnNumSub(100)\n\thero1:setHeroSkillEffectTurnNumSubTime(100)\n\thero1:setHeroSkillEffectTurnNumAddSub(100)\n\thero1:setHeroSkillEffectTurnNumAddSubTime(100)\n\thero1:setHeroSkillEffectTurnNumAddSubRate(100)\n\thero1:setHeroSkillEffectTurnNumAddSubRateTime(100)\n\thero1:setHeroSkillEffectTurnNumAddSubRateAdd(100)\n\t", "CodeBleu_score": 21.571790702640442}, {"code": "function GameMaster:AddHeros()\n\t\tlocal hero = Hero.create(Knight.create())\n\thero._goRight = true\n\thero._goLeft = false\n\thero._goUp = false\n\thero._goDown = false\n\thero:setPosition(cc.p(battleSiteX[1], 200))\n\thero:setScale(0.8)\n\thero:setLocalZOrder(gloableZOrder)\n\thero:setFacingDirection(0)\n\thero:setIdleMode(true)\n\thero:setHeroType(Knight.getHeroType())\n\thero:setHeroState(Knight.getHeroState())\n\thero:setHeroName(Knight.getHeroName())\n\thero:setHeroMode(Knight.getHeroMode())\n\thero:setHeroHP(Knight.getHeroHP())\n\thero:setHeroAttack(Knight.getHeroAttack())\n\thero:setHeroDefense(Knight.getHeroDefense())\n\thero:setHeroSpeed(Knight.getHeroSpeed())\n\thero:setHeroExp(Knight.getHeroExp())\n\thero:setHeroCoin(Knight.getHeroCoin())\n\thero:setHeroPower(Knight.getHeroPower())\n\thero:setHeroPowerMax(Knight.getHeroPowerMax())\n\thero:setHeroScore(Knight.getHeroScore())\n\thero:setHeroLevel(Knight.getHeroLevel())\n\thero:setHeroSkill(Knight.getHeroSkill())\n\thero:setHeroSkillMax(Knight.getHeroSkillMax())\n\thero:setHeroSkillLevel(Knight.getHeroSkillLevel())\n\thero:setHeroSkillExp(Knight.getHeroSkillExp())\n\thero:setHeroSkillPoint(Knight.getHeroSkillPoint())\n\thero:setHeroSkillPointMax(Knight.getHeroSkillPointMax())\n\thero:setHeroSkillPointExp(Knight.getHeroSkillPointExp())\n\thero:setHeroSkillPointLevel(Knight.getHeroSkillPointLevel())\n\thero:setHeroSkillPointMaxLevel(Knight.getHeroSkillPointMaxLevel())\n\thero:setHeroSkillPointMaxExp(Knight.getHeroSkillPointMaxExp())\n\thero:set", "CodeBleu_score": 23.08411443390287}]}
{"instance_id": "cdfbc82ff3cd", "generation_result": [{"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat:create()\n    boss:setPosition(battleSiteX[2], 10)\n    currentLayer:addChild(boss)\n    boss:setCameraMask(math.pow(2, 1))\n    boss:setAIEnabled(false)\n    boss:setFacing(180)\n    local move = MoveBy:create(1.5, Point(0,-1000))\n    move:setTag(MOVE_TAG.BOSS)\n    boss:runAction(move)\n    local move = MoveBy:create(1.5, Point(0,1000))\n    move:setTag(MOVE_TAG.BOSS)\n    boss:runAction(move)\n    List.pushlast(MonsterManager, boss)", "CodeBleu_score": 49.11212906684192}, {"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat:create()\n    boss:setPosition(battleSiteX[2], 10)\n    boss:setCameraMask(1)\n    currentLayer:addChild(boss)\n    boss:setAIEnabled(false)\n    boss:setFacing(180)\n    boss._myPos = Vec2(battleSiteX[2], 10)\n    boss:setVisible(true)\n    local move = MoveBy:create(2, Vec2(0, -1000))\n    move:setTag(100)\n    boss:runAction(move)\n    local move = MoveBy:create(2, Vec2(0, 1000))\n    move:setTag(100)\n    move:setTag(100)\n    boss:runAction(move)\n    local move = MoveBy:create(2, Vec2(0, -1000))\n    move:setTag(100)\n    boss:runAction(move)\n    local move = MoveBy:create(2, Vec2(0, 1000))\n    move:setTag(100)\n    boss:runAction(move)\n    local move = MoveBy:create(2, Vec2(0, -1000))\n    move:setTag(100)\n    boss:runAction(move)\n    local move = MoveBy:create(2, Vec2(0, 1000))\n    move:setTag(100)\n    boss:runAction(move)\n    local move = MoveBy:create(2, Vec2(0, -1000))\n    move:setTag(100)\n    boss:runAction(move)\n    local move = MoveBy:create(2, Vec2(0, 1000))\n    move:setTag(100)\n    boss:runAction(move)\n    local move = MoveBy:create(2, Vec2(0, -1000))\n    move:setTag(100)\n    boss:runAction(move)\n    local move = MoveBy:create(2, Vec2(0, 1000", "CodeBleu_score": 47.63105265141872}, {"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat:create()\n    boss:setPosition(0, 0)\n    boss:setCameraMask(math.pow(2, 3))\n    currentLayer:addChild(boss)\n    boss:setVisible(true)\n    boss:setAIEnabled(false)\n    boss._goRight = false\n    boss._myPos = Point(0, 0)\n    boss._mySpeed = 0\n    boss._myDirection = 0\n    boss._myFacing = 0\n    boss._myScale = 1\n    boss._myScaleX = 1\n    boss._myScaleY = 1\n    boss._myAlpha = 255\n    boss._myFrame = 1\n    boss._myFrameCount = 0\n    boss._myAnimationCount = 0\n    boss._myAnimationDuration = 0\n    boss._myAnimationName = \"\"\n    boss._myAnimationIndex = 0\n    boss._myAnimationLoop = true\n    boss._myAnimationDelay = 0\n    boss._myAnimationSpeed = 1\n    boss._myAnimationFlipX = false\n    boss._myAnimationFlipY = false\n    boss._myAnimationEndCallback = nil\n    boss._myAnimationEndCallbackContext = nil\n    boss._myAnimationEndCallbackArgs = {}\n    boss._myAnimationEndCallbackArgsCount = 0\n    boss._myAnimationEndCallbackArgs[1] = nil\n    boss._myAnimationEndCallbackArgs[2] = nil\n    boss._myAnimationEndCallbackArgs[3] = nil\n    boss._myAnimationEndCallbackArgs[4] = nil\n    boss._myAnimationEndCallbackArgs[5] = nil\n    boss._myAnimationEndCallbackArgs[6] = nil\n    boss._myAnimationEndCallbackArgs[7] = nil\n    boss._myAnimationEndCallbackArgs[8] = nil\n    boss._myAnimationEndCallbackArgs[9] = nil\n    boss._myAnimationEndCallbackArgs[10] = nil\n    boss._myAnimationEndCallbackArgs[11] = nil\n    boss._myAnimationEndCallbackArgs[12] = nil\n", "CodeBleu_score": 33.93066663400727}]}
{"instance_id": "fa7b402853bb", "generation_result": [{"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation = cc.Animation3D:create(file)\n\tlocal animate = cc.Animate3D:create(animation, begin, finish)\n\tanimate:setSpeed(speed)\n\treturn animate", "CodeBleu_score": 53.113735341379844}, {"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation = cc.Animation3D:create(file)\n\tlocal animate = cc.Animate3D:create(animation, begin, finish)\n\tanimate:setSpeed(speed)\n\treturn animate", "CodeBleu_score": 53.113735341379844}, {"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation = cc.Animation3D:create(file)\n\tlocal animate = cc.Animate3D:create(animation, begin, finish)\n\tanimate:setSpeed(speed)\n\treturn animate", "CodeBleu_score": 53.113735341379844}]}
{"instance_id": "0725f2413b6b", "generation_result": [{"code": "function removeAll(table)\n\t\tfor k,v in pairs(table) do \n\t\tif type(v) == \"table\" then \n\t\t\tremoveAll(v) \n\t\telse \n\t\t\ttable[k] = nil \n\t\tend \n\tend ", "CodeBleu_score": 43.55885312094085}, {"code": "function removeAll(table)\n\t\tfor i,v in pairs(table) do \n\t\tif type(v) == \"table\" then \n\t\t\tremoveAll(v) \n\t\telse \n\t\t\ttable[i] = nil \n\t\tend \n\tend ", "CodeBleu_score": 40.896223629174635}, {"code": "function removeAll(table)\n\t\tfor k,v in pairs(table) do \n\t\ttable[k] = nil \n\tend ", "CodeBleu_score": 37.5225396286282}]}
{"instance_id": "526d10bb37bb", "generation_result": [{"code": "function delayExecute(target, func, delay)\n\t\tlocal action = cc.DelayTime:create(delay)\n\tlocal call = cc.CallFunc:create(func)\n\tlocal seq = cc.Sequence:create(action, call, nil)\n\ttarget:runAction(seq)", "CodeBleu_score": 59.54034305042127}, {"code": "function delayExecute(target, func, delay)\n\t\tlocal action = cc.DelayTime:create(delay)\n\tlocal call = cc.CallFunc:create(func)\n\tlocal seq = cc.Sequence:create(action, call, nil)\n\ttarget:runAction(seq)", "CodeBleu_score": 59.54034305042127}, {"code": "function delayExecute(target, func, delay)\n\t\tlocal action = cc.DelayTime:create(delay)\n\tlocal call = cc.CallFunc:create(func)\n\tlocal seq = cc.Sequence:create(action, call, nil)\n\ttarget:runAction(seq)", "CodeBleu_score": 59.54034305042127}]}
{"instance_id": "3b277bd3d0d0", "generation_result": [{"code": "function LoadingScene:addLoadingText(layer)\n\t\tself._loading = {}\n\tlocal loadingText = {\n        \\\"Loading...\\\",\n        \\\"Loading.\\\",\n        \\\"Loading\\\",\n        \\\"Loading.\\\",\n        \\\"Loading\\\",\n    }\n    local font = \\\"Arial Bold\\\"\n    local fontSize = 30\n    local textSize = cc.size(self.size.width/2,0)\n    local textOrigin = cc.p(self.size.width/2,self.size.height/2)\n    local textX = textOrigin.x\n    local textY = textOrigin.y\n    local textZ = -200\n    local textH = fontSize\n    local textV = 0\n    local text = \\\"\\\"\n    for i=1,table.getn(loadingText) do\n        text = loadingText[i]\n        local label = cc.LabelTTF:create(text,font,fontSize)\n        label:setPosition(textX,textY)\n        label:setPositionZ(textZ)\n        label:setDimensions(textSize.width,textSize.height)\n        label:setAnchorPoint(cc.p(0,0))\n        label:setTextColor(cc.c3b(0,0,0))\n        label:enableOutline(cc.c4b(0,0,0,255),1)\n        layer:addChild(label)\n        self._loading[i] = label\n        textY = textY-textH\n    end", "CodeBleu_score": 12.926436252266107}, {"code": "function LoadingScene:addLoadingText(layer)\n\t\tlocal loadingText = {", "CodeBleu_score": 1.8374809974893702}, {"code": "function LoadingScene:addLoadingText(layer)\n\t\tlocal loadingText = {", "CodeBleu_score": 1.8374809974893702}]}
{"instance_id": "68250ae97644", "generation_result": [{"code": "function MainMenuScene.create()\n\t\tlocal scene = MainMenuScene.extend(cc.Scene:create())\n\tlocal layer = MainMenuLayer.create()\n\tscene:addChild(layer)\n\treturn scene", "CodeBleu_score": 61.23952669014814}, {"code": "function MainMenuScene.create()\n\t\tlocal scene = MainMenuScene.new()\n\tlocal layer = MainMenuLayer.create()\n\tscene:addChild(layer)\n\treturn scene", "CodeBleu_score": 68.97521830303333}, {"code": "function MainMenuScene.create()\n\t\tlocal scene = MainMenuScene.new()\n\tlocal layer = MainMenuLayer.create()\n\tscene:addChild(layer)\n\treturn scene", "CodeBleu_score": 68.97521830303333}]}
{"instance_id": "81470efbb6ff", "generation_result": [{"code": "local function collision(object)\n\n\t\nend\n", "CodeBleu_score": 0.6853149553599633}, {"code": "local function collision(object)\n\n\t\nend\n", "CodeBleu_score": 0.6853149553599633}, {"code": "local function collision(object)\n\n\t\nend\n", "CodeBleu_score": 0.6853149553599633}]}
{"instance_id": "f8915bebdc0e", "generation_result": [{"code": "function collisionDetect(dt)\n\t_G.activearea.left = -100", "CodeBleu_score": 5.777188455605333}, {"code": "function collisionDetect(dt)\n\t_G.activearea = {left = 0, bottom = 0, right = size.width, top = size.height}\n", "CodeBleu_score": 6.248406446891393}, {"code": "function collisionDetect(dt)\n\t_G.activearea = cc.rect(0, 0, size.width, size.height)\n    for val = HeroManager.last, HeroManager.first, -1 do\n        local sprite = HeroManager[val]\n        if sprite._isalive == false then\n            HeroManager:remove(val)\n        else\n            isOutOfBound(sprite)\n            collision(sprite)\n        end\n    end\n\n    for val = MonsterManager.last, MonsterManager.first, -1 do\n        local sprite = MonsterManager[val]\n        if sprite._isalive == false then\n            MonsterManager:remove(val)\n        else\n            isOutOfBound(sprite)\n            collision(sprite)\n        end\n    end", "CodeBleu_score": 68.66320054587085}]}
{"instance_id": "fc081bb122f5", "generation_result": [{"code": "function Actor:specialAttack()\n\t\tBasicCollider.create(self._myPos, self._curFacing, self._specialAttack)\n\tself:specialAttackSoundEffects()", "CodeBleu_score": 82.72368000825026}, {"code": "function Actor:specialAttack()\n\t\tBasicCollider.create(self._myPos, self._curFacing, self._specialAttack)\n\tself:specialAttackSoundEffects()", "CodeBleu_score": 82.72368000825026}, {"code": "function Actor:specialAttack()\n\t\tBasicCollider.create(self._myPos, self._curFacing, self._specialAttack)\n\tself:specialAttackSoundEffects()", "CodeBleu_score": 82.72368000825026}]}
{"instance_id": "bfc98809aacb", "generation_result": [{"code": "function Slime:angryFace(trueFalse)\n\t\tif trueFalse ~= self._angryFace then\n\t\tif trueFalse then\n\t\t\tself._sprite3d:setTexture(\\\"model/slime/baozi.jpg\\\")\n\t\telse\n\t\t\tself._sprite3d:setTexture(\\\"model/slime/baozi2.jpg\\\")\n\t\tend\n\t\tself._angryFace = trueFalse\n\tend", "CodeBleu_score": 54.355760894263106}, {"code": "function Slime:angryFace(trueFalse)\n\t\tif trueFalse ~= self._angryFace then\n\t\tself._angryFace = trueFalse\n\t\tif trueFalse then\n\t\t\tself._sprite3d:setTexture(\\\"model/slime/baozi.jpg\\\")\n\t\telse\n\t\t\tself._sprite3d:setTexture(\\\"model/slime/baozi.jpg\\\")\n\t\tend\n\tend", "CodeBleu_score": 61.980895010516136}, {"code": "function Slime:angryFace(trueFalse)\n\t\tif trueFalse ~= self._angryFace then\n\t\tif trueFalse then\n\t\t\tself._sprite3d:setTexture(\\\"model/slime/baozi_angry.jpg\\\")\n\t\telse\n\t\t\tself._sprite3d:setTexture(\\\"model/slime/baozi.jpg\\\")\n\t\tend\n\t\tself._angryFace = trueFalse\n\tend", "CodeBleu_score": 54.211593047529696}]}
{"instance_id": "546a0b8fb77b", "generation_result": [{"code": "override fun getCharPixmap(char: Char): Pixmap{\n\tval metrics = paint.fontMetricsInt\nval textWidth = ceil(paint.measureText(char.toString())).toInt()\nval textHeight = ceil(metrics.bottom - metrics.top).toInt()\nval bitmap = Bitmap.createBitmap(textWidth, textHeight, Bitmap.Config.ARGB_8888)\nval canvas = Canvas(bitmap)\ncanvas.drawText(char.toString(), 0f, metrics.bottom.toFloat(), paint)\nreturn Pixmap(bitmap)\n}", "CodeBleu_score": 29.38866188672817}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t//        Log.debug(\\\"getCharPixmap() - char: $char\\\")\n        val text = char.toString()\n        val textWidth = paint.measureText(text)\n        val textHeight = paint.fontMetrics.bottom - paint.fontMetrics.top\n        val bitmap = Bitmap.createBitmap(ceil(textWidth).toInt(), ceil(textHeight).toInt(), Bitmap.Config.ARGB_8888)\n        val canvas = Canvas(bitmap)\n        canvas.drawText(text, 0f, textHeight, paint)\n        return Pixmap(bitmap, 0, 0, bitmap.width, bitmap.height, false, Pixmap.Format.RGBA8888)\n    }", "CodeBleu_score": 30.572748780749613}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\tval metrics = paint.fontMetricsInt\nval textWidth = ceil(paint.measureText(char.toString())).toInt()\nval textHeight = ceil(metrics.descent - metrics.ascent).toInt()\nval bitmap = Bitmap.createBitmap(textWidth, textHeight, Bitmap.Config.ARGB_8888)\nval canvas = Canvas(bitmap)\ncanvas.drawText(char.toString(), 0f, metrics.ascent.toFloat(), paint)\nreturn Pixmap(bitmap)\n}", "CodeBleu_score": 29.54669305514238}]}
{"instance_id": "9c1ce2567ce1", "generation_result": [{"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n\"\"\"\n\nclass_end = \"\"\"\n    }", "CodeBleu_score": 14.202379487937344}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\nval uri = Uri.parse(suggestedLocation)\n\nval fileName = when (uri.scheme) {\nContentResolver.SCHEME_CONTENT -> {\nval cursor = contentResolver.query(uri, null, null, null, null)\ncursor?.use {\nif (cursor.moveToFirst()) {\nval nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)\ncursor.getString(nameIndex)\n} else {\nnull\n}\n}\n}\nContentResolver.SCHEME_FILE -> uri.path\nelse -> null\n}\n\nif (fileName == null) {\nonError(PlatformSaverLoader.InvalidUri())\nreturn\n}\n\nval request = Request(onSaved, onError)\nrequests[requestCode] = request\n\nval intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\naddCategory(Intent.CATEGORY_OPENABLE)\ntype = \"text/plain\"\nputExtra(Intent.EXTRA_TITLE, fileName)\n}\nactivity.startActivityForResult(intent, requestCode)\nrequestCode++\n}", "CodeBleu_score": 52.71101787696626}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n//        val uri = Uri.parse(suggestedLocation)\n//        val filename = getFileName(uri)\n//        val request = Request(onSaved, onError)\n//        requests[requestCode] = request\n//        val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n//            addCategory(Intent.CATEGORY_OPENABLE)\n//            type = \"text/plain\"\n//            putExtra(Intent.EXTRA_TITLE, filename)\n//        }\n//        activity.startActivityForResult(intent, requestCode)\n//        requestCode++\n//    }", "CodeBleu_score": 13.92206817903272}]}
{"instance_id": "ea556fe12030", "generation_result": [{"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n// When we loaded, we returned a \\\"content://\\\" URI as file location.\nval uri = Uri.parse(fileLocation)\n\n// Get the content of the file.\nvar stream: InputStream? = null\ntry {\n    stream = contentResolver.openInputStream(uri)\n    val data = stream!!.bufferedReader().use { it.readText() }\n    onLoaded(data, uri.toString())\n} catch (ex: Exception) {\n    onError(ex)\n} finally {\n    stream?.close()\n}\n}", "CodeBleu_score": 66.81931227399842}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n// When we loaded, we returned a \\\"content://\\\" URI as file location.\n        val onFileChosen = { uri: Uri ->\n            var stream: InputStream? = null\n            try {\n                stream = contentResolver.openInputStream(uri)\n                val data = stream!!.bufferedReader().use { it.readText() }\n                onLoaded(data, uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openLoadFileChooser(requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 90.07843847942507}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n// When we loaded, we returned a \\\"content://\\\" URI as file location.\n        val onFileChosen = { uri: Uri ->\n            var stream: InputStream? = null\n            try {\n                stream = contentResolver.openInputStream(uri)\n                stream!!.reader().use { it.readText() }\n                onLoaded(it, uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openLoadFileChooser(requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 88.48193463191984}]}
{"instance_id": "813990d9bb4d", "generation_result": [{"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n\t\taddCategory(Intent.CATEGORY_OPENABLE)\n\t\ttype = \\\"application/json\\\"\n\"\"\"\n\nif scheme == \"content\":\n\tcode += \"\"\"\n\t\tputExtra(Intent.EXTRA_TITLE, fileName)\n\t\tputExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\"\"\"\n\ncode += \"\"\"\n\t}\n\tactivity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 55.318560508023516}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n\t\taddCategory(Intent.CATEGORY_OPENABLE)\n\t\ttype = \"application/json\"\n\t\tputExtra(Intent.EXTRA_TITLE, fileName)\n\t\tif (uri.scheme == \"content\") {\n\t\t\tputExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n\t\t}\n\t}\n\tactivity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 70.3898838488957}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n\t\taddCategory(Intent.CATEGORY_OPENABLE)\n\t\ttype = \"application/json\"\n\t\tputExtra(Intent.EXTRA_TITLE, fileName)\n\t\tif (uri.scheme == \"content\") {\n\t\t\tputExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n\t\t}\n\t}\n\tactivity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 70.3898838488957}]}
{"instance_id": "a423b39ba6fe", "generation_result": [{"code": "fun createNotificationChannelInfo(appContext: Context){\n\t\n}", "CodeBleu_score": 1.1719733888811363}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\t\n}", "CodeBleu_score": 1.1719733888811363}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n\t\tval serviceChannel = NotificationChannel(\n\t\t\tNOTIFICATION_CHANNEL_ID_SERVICE,\n\t\t\tappContext.getString(R.string.notification_channel_service_name),\n\t\t\tNotificationManager.IMPORTANCE_DEFAULT\n\t\t)\n\t\tserviceChannel.description = appContext.getString(R.string.notification_channel_service_description)\n\t\tserviceChannel.enableLights(true)\n\t\tserviceChannel.lightColor = Color.BLUE\n\t\tserviceChannel.enableVibration(true)\n\t\tserviceChannel.vibrationPattern = longArrayOf(100, 200, 300, 400, 500, 400, 300, 200, 400)\n\n\t\tval infoChannel = NotificationChannel(\n\t\t\tNOTIFICATION_CHANNEL_ID_INFO,\n\t\t\tappContext.getString(R.string.notification_channel_info_name),\n\t\t\tNotificationManager.IMPORTANCE_DEFAULT\n\t\t)\n\t\tinfoChannel.description = appContext.getString(R.string.notification_channel_info_description)\n\t\tinfoChannel.enableLights(true)\n\t\tinfoChannel.lightColor = Color.BLUE\n\t\tinfoChannel.enableVibration(true)\n\t\tinfoChannel.vibrationPattern = longArrayOf(100, 200, 300, 400, 500, 400, 300, 200, 400)\n\n\t\tval notificationManager = appContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n\t\tnotificationManager.createNotificationChannel(serviceChannel)\n\t\tnotificationManager.createNotificationChannel(infoChannel)\n\t}\n}", "CodeBleu_score": 55.57774371534223}]}
{"instance_id": "4f3e7f77a567", "generation_result": [{"code": "fun packImages(workingPath: String){\n\t\n}", "CodeBleu_score": 1.537888354575527}, {"code": "fun packImages(workingPath: String){\n\t", "CodeBleu_score": 1.4349816505955142}, {"code": "fun packImages(workingPath: String){\n\t", "CodeBleu_score": 1.4349816505955142}]}
{"instance_id": "206dbb3c21eb", "generation_result": [{"code": "suspend fun reloadWorldscreen(){\n\t\n}", "CodeBleu_score": 3.54716950179408}, {"code": "suspend fun reloadWorldscreen(){\n\t", "CodeBleu_score": 3.349436022099892}, {"code": "suspend fun reloadWorldscreen(){\n\t\tval worldScreen = Current.worldScreen\n\tif (worldScreen != null) {\n\t\tworldScreen.dispose()\n\t\tCurrent.setAsRootScreen(LoadingScreen(Current.getScreen()))\n\t\tCurrent.loadGame(worldScreen.gameInfo, worldScreen.autoPlay, callFromLoadScreen = true)\n\t}\n}", "CodeBleu_score": 30.098869414389355}]}
{"instance_id": "2d8fdcb5ad6f", "generation_result": [{"code": "fun goToMainMenu(): MainMenuScreen{\n\t\tval mainMenu = MainMenuScreen()\n\tsetAsRootScreen(mainMenu)\n\treturn mainMenu\n}", "CodeBleu_score": 40.87886256839804}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\t\tval mainMenu = MainMenuScreen()\n\tsetAsRootScreen(mainMenu)\n\treturn mainMenu\n}", "CodeBleu_score": 40.87886256839804}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\t\tval mainMenu = MainMenuScreen()\n\tsetAsRootScreen(mainMenu)\n\treturn mainMenu\n}", "CodeBleu_score": 40.87886256839804}]}
{"instance_id": "df60142d384c", "generation_result": [{"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t val windowBounds = getWindow().bounds\n val monitorBounds = getMonitorBounds()\n val windowWidth = settings.width.roundToInt()\n val windowHeight = settings.height.roundToInt()\n val windowX = (monitorBounds.width - windowWidth) / 2\n val windowY = (monitorBounds.height - windowHeight) / 2\n val windowBounds = windowBounds.apply {\n width = windowWidth\n height = windowHeight\n x = windowX\n y = windowY\n }\n getWindow().bounds = windowBounds\n return windowBounds.width == monitorBounds.width && windowBounds.height == monitorBounds.height\n }", "CodeBleu_score": 34.876031189742186}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t val windowBounds = getWindowBounds(settings)\n val windowWidth = windowBounds.width\n val windowHeight = windowBounds.height\n val windowX = windowBounds.x\n val windowY = windowBounds.y\n val windowedMonitor = getWindowedMonitor(settings)\n val windowedMonitorBounds = windowedMonitor.displayMode.bounds\n val windowedMonitorWidth = windowedMonitorBounds.width\n val windowedMonitorHeight = windowedMonitorBounds.height\n val windowedMonitorX = windowedMonitorBounds.x\n val windowedMonitorY = windowedMonitorBounds.y\n val windowedMonitorIsPrimary = windowedMonitor.primary\n val isFillingDesktop = windowWidth == windowedMonitorWidth && windowHeight == windowedMonitorHeight\n if (isFillingDesktop) {\n Gdx.graphics.setFullscreenMode(windowedMonitor.displayMode)\n } else {\n Gdx.graphics.setWindowedMode(windowWidth, windowHeight)\n Gdx.graphics.setLocation(windowX, windowY)\n }\n return isFillingDesktop\n }", "CodeBleu_score": 38.31883998553756}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t val screenBounds = Toolkit.getDefaultToolkit().screenSize\n val windowBounds = getWindowBounds(settings)\n val windowWidth = windowBounds.width\n val windowHeight = windowBounds.height\n val windowX = windowBounds.x\n val windowY = windowBounds.y\n val isFillingDesktop = windowWidth == screenBounds.width && windowHeight == screenBounds.height\n if (isFillingDesktop) {\n Gdx.graphics.setFullscreenMode(Gdx.graphics.displayMode)\n } else {\n Gdx.graphics.setWindowedMode(windowWidth, windowHeight)\n Gdx.graphics.setLocation(windowX, windowY)\n }\n return isFillingDesktop\n }", "CodeBleu_score": 40.764939748139874}]}
{"instance_id": "a8b17234c4e5", "generation_result": [{"code": "private fun getLinuxDistro(): String{\n\t\tval osReleaseFile = FileHandle(\\\"/etc/os-release\\\")\n\tval osRelease = try {\n\t\tosReleaseFile.readString(Charset.defaultCharset())\n\t} catch (_: Throwable) {\n\t\treturn \\\"\\\"\n\t}\n\tval osReleaseMap = osRelease.split(\\\"\\\n\\\").map { it.removeSuffix(\\\"\\\\r\\\").split(\\\"=\\\", limit = 2) }.associate { it[0] to it[1].removeSurrounding(\\\"\\\\\\\"\\\").replace(\\\"\\\\\\\\\\\", \\\"\\\\\\\\\\\\\\\\\\\") }\n\treturn osReleaseMap[\\\"PRETTY_NAME\\\"] ?: osReleaseMap[\\\"NAME\\\"] + (osReleaseMap[\\\"VERSION\\\"]?.run { \\\" Version $this\\\" } ?: \\\"\\\")\n}", "CodeBleu_score": 33.76526329972665}, {"code": "private fun getLinuxDistro(): String{\n\tval osReleaseFile = FileHandle(\\\"/etc/os-release\\\")\nif (!osReleaseFile.exists()) return \\\"\\\"\n\nval osRelease = osReleaseFile.readString(Charset.defaultCharset())\n\nval osReleaseMap: Map<String, String> = osRelease.splitToSequence(\\\"\\\n\\\")\n.map { it.removeSuffix(\\\"\\\\r\\\").split(\\\"=\\\", limit = 2) }\n.filter { it.size == 2 }\n.associate { it[0].trim() to it[1].trim() }\n\nreturn osReleaseMap[\\\"PRETTY_NAME\\\"] ?: osReleaseMap[\\\"NAME\\\"] + \\\" \\\" + osReleaseMap[\\\"VERSION\\\"]\n\n}", "CodeBleu_score": 44.12383341944768}, {"code": "private fun getLinuxDistro(): String{\n\t\tval distroFile = FileHandle(\\\"/etc/os-release\\\")\n\tval distroMap = if (distroFile.exists()) {\n\t\tdistroFile.readString(Charset.defaultCharset(), false).split('\n').map { it.split('=') }.associate { it[0].trim() to it[1].trim() }\n\t} else {\n\t\tmapOf()\n\t}\n\treturn distroMap[\\\"PRETTY_NAME\\\"] ?: distroMap[\\\"NAME\\\"] ?: \\\"\\\"\n}", "CodeBleu_score": 31.97764658135706}]}
{"instance_id": "36a1d2e56540", "generation_result": [{"code": "private fun flashWindow(){\n\t", "CodeBleu_score": 0.9483643708488229}, {"code": "private fun flashWindow(){\n\t", "CodeBleu_score": 0.9483643708488229}, {"code": "private fun flashWindow(){\n\t", "CodeBleu_score": 0.9483643708488229}]}
{"instance_id": "8e3c7096415a", "generation_result": [{"code": "public void onFullBackup(FullBackupDataOutput data){\n\t", "CodeBleu_score": 1.3013707544357997}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t\tFile prefsFile = getSharedPreferencesFile(getPackageName());\n\tif (prefsFile != null && prefsFile.exists()) {\n\t\ttry {\n\t\t\tdata.writeEntityHeader(getPackageName(), prefsFile.lastModified());\n\t\t\tdata.writeEntityData(new FileInputStream(prefsFile), prefsFile.length());\n\t\t} catch (IOException e) {\n\t\t\t// Ignore\n\t\t}\n\t}\n\tFile rankingsFile = Rankings.getFile();\n\tif (rankingsFile != null && rankingsFile.exists()) {\n\t\ttry {\n\t\t\tdata.writeEntityHeader(getPackageName(), rankingsFile.lastModified());\n\t\t\tdata.writeEntityData(new FileInputStream(rankingsFile), rankingsFile.length());\n\t\t} catch (IOException e) {\n\t\t\t// Ignore\n\t\t}\n\t}\n\tFile badgesFile = Badges.getFile();\n\tif (badgesFile != null && badgesFile.exists()) {\n\t\ttry {\n\t\t\tdata.writeEntityHeader(getPackageName(), badgesFile.lastModified());\n\t\t\tdata.writeEntityData(new FileInputStream(badgesFile), badgesFile.length());\n\t\t} catch (IOException e) {\n\t\t\t// Ignore\n\t\t}\n\t}\n\tFile journalFile = Journal.getFile();\n\tif (journalFile != null && journalFile.exists()) {\n\t\ttry {\n\t\t\tdata.writeEntityHeader(getPackageName(), journalFile.lastModified());\n\t\t\tdata.writeEntityData(new FileInputStream(journalFile), journalFile.length());\n\t\t} catch (IOException e) {\n\t\t\t// Ignore\n\t\t}\n\t}\n}", "CodeBleu_score": 22.801800415194812}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t\t//get the shared preferences file\n\tFile prefs = getSharedPreferencesFile(\"shared_prefs\", \"xml\");\n\t//if it exists, back it up\n\tif (prefs.exists()) {\n\t\ttry {\n\t\t\tdata.writeEntityHeader(\"shared_prefs\", prefs.lastModified());\n\t\t\tdata.writeEntityData(ParcelFileDescriptor.open(prefs, ParcelFileDescriptor.MODE_READ_ONLY), prefs.length());\n\t\t} catch (Exception e) {\n\t\t\t//do nothing, just continue to the next file\n\t\t}\n\t}\n\n\t//get the rankings file\n\tFile rankings = Rankings.getFile();\n\t//if it exists, back it up\n\tif (rankings.exists()) {\n\t\ttry {\n\t\t\tdata.writeEntityHeader(\"rankings\", rankings.lastModified());\n\t\t\tdata.writeEntityData(ParcelFileDescriptor.open(rankings, ParcelFileDescriptor.MODE_READ_ONLY), rankings.length());\n\t\t} catch (Exception e) {\n\t\t\t//do nothing, just continue to the next file\n\t\t}\n\t}\n\n\t//get the badges file\n\tFile badges = Badges.getFile();\n\t//if it exists, back it up\n\tif (badges.exists()) {\n\t\ttry {\n\t\t\tdata.writeEntityHeader(\"badges\", badges.lastModified());\n\t\t\tdata.writeEntityData(ParcelFileDescriptor.open(badges, ParcelFileDescriptor.MODE_READ_ONLY), badges.length());\n\t\t} catch (Exception e) {\n\t\t\t//do nothing, just continue to the next file\n\t\t}\n\t}\n\n\t//get the journal file\n\tFile journal = Journal.getFile();\n\t//if it exists, back it up\n\tif (journal.exists()) {\n\t\ttry {\n\t\t\tdata.writeEntityHeader(\"journal\", journal.lastModified());\n\t\t\tdata.writeEntityData(ParcelFileDescriptor.open(journal, ParcelFileDescriptor.MODE_READ_ONLY), journal.length());\n\t\t} catch (Exception e) {\n\t\t\t//do nothing, just continue to the next file\n\t\t}\n\t}\n}", "CodeBleu_score": 20.605583178448462}]}
{"instance_id": "583999724a15", "generation_result": [{"code": "public boolean connectedToUnmeteredNetwork(){\n\t\tConnectivityManager connectivityManager = (ConnectivityManager) AndroidLauncher.instance.getSystemService(Context.CONNECTIVITY_SERVICE);\n\tNetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();\n\tif (activeNetworkInfo == null)\n\t\treturn false;\n\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)\n\t\treturn !activeNetworkInfo.isActiveNetworkMetered();\n\telse\n\t\treturn activeNetworkInfo.isConnected() && (activeNetworkInfo.getType() == ConnectivityManager.TYPE_WIFI\n\t\t\t\t|| activeNetworkInfo.getType() == ConnectivityManager.TYPE_WIMAX\n\t\t\t\t|| activeNetworkInfo.getType() == ConnectivityManager.TYPE_BLUETOOTH\n\t\t\t\t|| activeNetworkInfo.getType() == ConnectivityManager.TYPE_ETHERNET);\n}", "CodeBleu_score": 65.5607194565825}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t\tConnectivityManager cm = (ConnectivityManager) AndroidLauncher.instance.getSystemService(Context.CONNECTIVITY_SERVICE);\n\tNetworkInfo activeNetwork = cm.getActiveNetworkInfo();\n\treturn activeNetwork != null && activeNetwork.isConnected() && !activeNetwork.isRoaming();\n}", "CodeBleu_score": 44.64008326728097}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t\tConnectivityManager connectivityManager = (ConnectivityManager) AndroidLauncher.instance.getSystemService(Context.CONNECTIVITY_SERVICE);\n\tNetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();\n\treturn (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP || !connectivityManager.isActiveNetworkMetered())\n\t\t\t&& (activeNetworkInfo != null && activeNetworkInfo.isConnected()\n\t\t\t&& (activeNetworkInfo.getType() == ConnectivityManager.TYPE_WIFI\n\t\t\t|| activeNetworkInfo.getType() == ConnectivityManager.TYPE_WIMAX\n\t\t\t|| activeNetworkInfo.getType() == ConnectivityManager.TYPE_BLUETOOTH\n\t\t\t|| activeNetworkInfo.getType() == ConnectivityManager.TYPE_ETHERNET));\n}", "CodeBleu_score": 65.52898128171577}]}
{"instance_id": "f8bd6cd4826b", "generation_result": [{"code": "protected boolean affectHero( Hero hero ){\n\t", "CodeBleu_score": 3.251031176819552}, {"code": "protected boolean affectHero( Hero hero ){\n\t", "CodeBleu_score": 3.251031176819552}, {"code": "protected boolean affectHero( Hero hero ){\n\t\t//TODO: this should be a buff\n\tif (hero.isAlive()) {\n\t\tif (hero.isParalyzed()) {\n\t\t\thero.paralyze( 0 );\n\t\t}\n\t\tif (hero.isPoisoned()) {\n\t\t\thero.poison( 0 );\n\t\t}\n\t\tif (hero.isBurning()) {\n\t\t\thero.burn( 0 );\n\t\t}\n\t\tif (hero.isAsleep()) {\n\t\t\thero.sleep( 0 );\n\t\t}\n\t\tif (hero.isOnFire()) {\n\t\t\thero.set(Hero.STATUS_PARALYZED, true);\n\t\t}\n\t\tif (hero.hasTerror()) {\n\t\t\thero.terror( 0 );\n\t\t}\n\t\thero.satisfyHunger( 100 );\n\t\thero.heal( 100 );\n\t\thero.spendAndNext( 1f );\n\t\tCellEmitter.get( hero.pos ).burst( Speck.factory( Speck.HEALING ), 3 );\n\t\tSample.INSTANCE.play(Assets.Sounds.DRINK_WELL);\n\t\tBlobEmitter.get( hero.pos, 1 ).burst( ShaftParticle.FACTORY, 3 );\n\t\tBlobEmitter.get( hero.pos, 2 ).burst( ShadowParticle.UP, 10 );\n\t\tint healAmt = hero.HT + hero.str/5;\n\t\thero.heal( healAmt );\n\t\thero.sprite.emitter().start( Speck.factory( Speck.HEALING ), 0.07f, 3 );\n\t\thero.sprite.showStatus( CharSprite.POSITIVE, Messages.get(this, \"heal\") );\n\t\tGLog.i( Messages.get(this, \"heal_other\", healAmt) );\n\t\treturn true;\n\t} else {\n\t\tGLog.w( Messages.get(this, \"no_heal\") );\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 52.8846398018293}]}
{"instance_id": "3a94f2e84c83", "generation_result": [{"code": "protected Item affectItem( Item item, int pos ){\n\t\tif (item.isEmpty()) {\n\t\treturn null;\n\t}\n\n\tif (item instanceof Waterskin) {\n\t\tWaterskin w = (Waterskin)item;\n\t\tif (w.isFull()) {\n\t\t\treturn null;\n\t\t}\n\t\tw.fill();\n\t\tGLog.w(Messages.get(this, \"waterskin\"));\n\t\tSample.INSTANCE.play(Assets.Sounds.DRINK);\n\t\treturn null;\n\t}\n\n\tif (item instanceof Ankh) {\n\t\tAnkh a = (Ankh)item;\n\t\tif (a.isBlessed()) {\n\t\t\treturn null;\n\t\t}\n\t\ta.setBlessed(true);\n\t\tGLog.w(Messages.get(this, \"ankh\"));\n\t\tSample.INSTANCE.play(Assets.Sounds.DRINK);\n\t\treturn null;\n\t}\n\n\tif (item.cursed) {\n\t\tif (item.cursedKnown) {\n\t\t\tGLog.w(Messages.get(this, \"cursed\"));\n\t\t} else {\n\t\t\tGLog.w(Messages.get(this, \"cursed_unknown\"));\n\t\t}\n\t\tSample.INSTANCE.play(Assets.Sounds.DRINK);\n\t\titem.cursed = false;\n\t\titem.cursedKnown = true;\n\t\tif (item.cursedBy(ScrollOfRemoveCurse.class)) {\n\t\t\tGLog.w(Messages.get(this, \"cursed_by_scroll\"));\n\t\t}\n\t\treturn null;\n\t}\n\n\treturn item;\n}", "CodeBleu_score": 39.90408542370739}, {"code": "protected Item affectItem( Item item, int pos ){\n\t", "CodeBleu_score": 5.531172364104125}, {"code": "protected Item affectItem( Item item, int pos ){\n\t\tif (item == null) return null;\n\tif (item.cursed) {\n\t\tif (item.cursedKnown) {\n\t\t\tif (item.cursedBy(ScrollOfRemoveCurse.class)) {\n\t\t\t\titem.cursedKnown = false;\n\t\t\t\titem.cursed = false;\n\t\t\t\tCellEmitter.get( pos ).burst( Speck.factory( Speck.CURSE ), 3 );\n\t\t\t\treturn item;\n\t\t\t} else {\n\t\t\t\tCellEmitter.get( pos ).burst( Speck.factory( Speck.CURSE ), 3 );\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\tCellEmitter.get( pos ).burst( Speck.factory( Speck.CURSE ), 3 );\n\t\t\treturn null;\n\t\t}\n\t}\n\tif (item instanceof Ankh) {\n\t\tAnkh ankh = (Ankh)item;\n\t\tif (ankh.isBlessed()) {\n\t\t\tCellEmitter.get( pos ).burst( Speck.factory( Speck.HEALING ), 3 );\n\t\t\treturn item;\n\t\t} else {\n\t\t\tankh.setBlessed(true);\n\t\t\tCellEmitter.get( pos ).burst( Speck.factory( Speck.HEALING ), 3 );\n\t\t\treturn item;\n\t\t}\n\t}\n\tif (item instanceof Waterskin) {\n\t\tWaterskin waterskin = (Waterskin)item;\n\t\tif (waterskin.isFull()) {\n\t\t\tCellEmitter.get( pos ).burst( Speck.factory( Speck.HEALING ), 3 );\n\t\t\treturn null;\n\t\t} else {\n\t\t\twaterskin.fill();\n\t\t\tCellEmitter.get( pos ).burst( Speck.factory( Speck.HEALING ), 3 );\n\t\t\treturn item;\n\t\t}\n\t}\n\tCellEmitter.get( pos ).burst( Speck.factory( Speck.HEALING ), 3 );\n\treturn null;\n}", "CodeBleu_score": 40.05916956804539}]}
{"instance_id": "d322228d1a3e", "generation_result": [{"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t\tif (enemy.alignment == Char.Alignment.ENEMY) {\n\t\tAllyBuff buff = enemy.buff(buffCls);\n\t\tif (buff != null) {\n\t\t\tbuff.detach();\n\t\t}\n\t\tenemy.add(buffCls.getConstructor().newInstance());\n\t\tif (enemy.isAlive()) {\n\t\t\tif (hero.isAlive()) {\n\t\t\t\tif (enemy.alignment == Char.Alignment.ENEMY) {\n\t\t\t\t\tenemy.die(hero);\n\t\t\t\t\thero.onEnemyKill(enemy);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 26.625124638056775}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t\tif (enemy.alignment == Char.Alignment.ENEMY) {\n\t\tAllyBuff buff = enemy.buff(buffCls);\n\t\tif (buff != null) {\n\t\t\tbuff.detach();\n\t\t}\n\t\tenemy.add(buffCls.getConstructor().newInstance());\n\n\t\tif (enemy instanceof Mimic) {\n\t\t\thero.addExp(enemy.expGiven() * 0.5f);\n\t\t} else {\n\t\t\thero.addExp(enemy.expGiven());\n\t\t}\n\n\t\tStatistics.enemiesSlain++;\n\t\tBadges.validateAllyBadge(hero);\n\n\t\tif (hero.isAlive() && hero.subClass == HeroSubClass.MONK) {\n\t\t\thero.spendAndNext(Hero.ENERGY_PER_TURN);\n\t\t}\n\n\t\tif (enemy.alignment == Char.Alignment.ENEMY) {\n\t\t\tFloatingText.show(enemy.name() + \" is now an ally!\", enemy.sprite.center());\n\t\t}\n\t}\n}", "CodeBleu_score": 34.89709113836152}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t\tif (enemy.alignment == Char.Alignment.ENEMY) {\n\t\tif (enemy.alignment == Char.Alignment.ENEMY) {\n\t\t\t// Buff the enemy with the specified buff\n\t\t\tenemy.add(buffCls.getConstructor().newInstance());\n\n\t\t\t// Check for loot\n\t\t\tif (hero.isAlive()) {\n\t\t\t\t// Roll for loot\n\t\t\t\tif (Dungeon.level.drop(enemy, enemy.level)) {\n\t\t\t\t\t// If loot was dropped, update kill statistics\n\t\t\t\t\tStatistics.kill(enemy.getClass());\n\t\t\t\t\t// If the enemy was a Mimic, check for ascension challenges\n\t\t\t\t\tif (enemy instanceof Mimic) {\n\t\t\t\t\t\tMimic mimic = (Mimic) enemy;\n\t\t\t\t\t\tif (mimic.challenge != null) {\n\t\t\t\t\t\t\tmimic.challenge.fail(hero);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If the hero is a Monk subclass, buff the hero with additional energy\n\t\t\tif (hero.heroClass == HeroSubClass.MONK) {\n\t\t\t\thero.add(Hero.ENERGY_SHIELD);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 30.54854292827428}]}
{"instance_id": "9ee21c0149f3", "generation_result": [{"code": "public static void processEnemyKill(Char enemy){\n\t\tif (Dungeon.hero.buff(AscensionChallenge.class) != null) {\n\t\tif (enemy instanceof Ratmogrify.TransmogRat) {\n\t\t\tenemy = ((Ratmogrify.TransmogRat) enemy).getOriginal();\n\t\t}\n\n\t\tif (enemy.buff(AscensionBuffBlocker.class) != null) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (Class<? extends Mob> cls : modifiers.keySet()) {\n\t\t\tif (cls.isAssignableFrom(enemy.getClass())) {\n\t\t\t\tif (Dungeon.hero.buff(AscensionChallenge.class).stacks > 0) {\n\t\t\t\t\tDungeon.hero.buff(AscensionChallenge.class).stacks -= modifiers.get(cls);\n\t\t\t\t\tGLog.w(Messages.get(AscensionChallenge.class, \"weakness\", enemy.name()));\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 31.003745156856823}, {"code": "public static void processEnemyKill(Char enemy){\n\t\tif (Dungeon.hero.buff(AscensionChallenge.class) == null) {\n\t\treturn;\n\t}\n\tif (enemy instanceof Ratmogrify.TransmogRat) {\n\t\tenemy = ((Ratmogrify.TransmogRat) enemy).getOriginal();\n\t}\n\tif (enemy.buff(AscensionBuffBlocker.class) != null) {\n\t\treturn;\n\t}\n\tfor (Class<?extends Mob> cls : modifiers.keySet()) {\n\t\tif (cls.isAssignableFrom(enemy.getClass())) {\n\t\t\tDungeon.hero.buff(AscensionChallenge.class).decr(modifiers.get(cls));\n\t\t\tif (Dungeon.hero.buff(AscensionChallenge.class).stacks <= 0) {\n\t\t\t\tDungeon.hero.buff(AscensionChallenge.class).detach();\n\t\t\t}\n\t\t\tif (Dungeon.hero.buff(AscensionChallenge.class).stacks <= 3) {\n\t\t\t\tGLog.n(Messages.get(AscensionChallenge.class, \"weakening\"));\n\t\t\t}\n\t\t\tif (Dungeon.hero.lvl == Dungeon.hero.maxLvl()) {\n\t\t\t\tDungeon.hero.exp += 1;\n\t\t\t}\n\t\t\tDungeon.hero.sprite.parent.addToFront(new BuffIndicator(Dungeon.hero.buff(AscensionChallenge.class)));\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 36.93148127071123}, {"code": "public static void processEnemyKill(Char enemy){\n\t\tif (Dungeon.hero.buff(AscensionChallenge.class) != null) {\n\t\tif (enemy instanceof Ratmogrify.TransmogRat) {\n\t\t\tenemy = ((Ratmogrify.TransmogRat) enemy).getOriginal();\n\t\t}\n\n\t\tif (enemy.buff(AscensionBuffBlocker.class) != null) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (Class<? extends Mob> cls : modifiers.keySet()) {\n\t\t\tif (cls.isAssignableFrom(enemy.getClass())) {\n\t\t\t\tDungeon.hero.buff(AscensionChallenge.class).decr(modifiers.get(cls));\n\n\t\t\t\tif (Dungeon.hero.buff(AscensionChallenge.class).stacks <= 0.5f) {\n\t\t\t\t\tGLog.n(Messages.get(AscensionChallenge.class, \"weakening\"));\n\t\t\t\t}\n\n\t\t\t\tif (Dungeon.hero.lvl == Dungeon.hero.maxLvl()) {\n\t\t\t\t\tDungeon.hero.exp += Dungeon.hero.lvl * 2;\n\t\t\t\t\tDungeon.hero.checkLevelUp();\n\t\t\t\t}\n\n\t\t\t\tDungeon.hero.sprite.parent.add(new BuffIndicator(Dungeon.hero, Dungeon.hero.buff(AscensionChallenge.class)));\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 35.5471669191252}]}
{"instance_id": "4fc9c3c1fcce", "generation_result": [{"code": "public static int AscensionCorruptResist(Mob m){\n\t\tif (Dungeon.hero.buff(AscensionChallenge.class) == null) {\n\t\treturn m.EXP();\n\t}\n\tif (m instanceof Ratmogrify.TransmogMob) {\n\t\tm = ((Ratmogrify.TransmogMob) m).getOriginal();\n\t}\n\tif (m.buff(AscensionBuffBlocker.class) != null) {\n\t\treturn m.EXP();\n\t}\n\tif (m instanceof RipperDemon) {\n\t\treturn 10;\n\t}\n\tif (m instanceof Ghoul) {\n\t\treturn 7;\n\t}\n\tif (m.EXP() >= 13) {\n\t\treturn m.EXP();\n\t}\n\treturn 13;\n}", "CodeBleu_score": 51.387865623932036}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t\tif (Dungeon.hero.buff(AscensionChallenge.class) == null) {\n\t\treturn m.EXP();\n\t}\n\tif (m instanceof Ratmogrify.TransmogRat) {\n\t\tm = ((Ratmogrify.TransmogRat) m).getOriginal();\n\t\tif (m == null) return 0;\n\t}\n\tif (m.buff(AscensionBuffBlocker.class) != null) {\n\t\treturn m.EXP();\n\t}\n\tif (m instanceof Ghoul) {\n\t\treturn 7;\n\t}\n\tif (m instanceof RipperDemon) {\n\t\treturn 10;\n\t}\n\treturn Math.max(13, m.EXP());\n}", "CodeBleu_score": 51.06268163675487}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t\tif (Dungeon.hero.buff(AscensionChallenge.class) != null) {\n\t\treturn m.EXP();\n\t} else {\n\t\tif (m instanceof Ratmogrify.TransmogRat) {\n\t\t\tm = ((Ratmogrify.TransmogRat) m).getOriginal();\n\t\t}\n\t\tif (m.buff(AscensionBuffBlocker.class) != null) {\n\t\t\treturn m.EXP();\n\t\t}\n\t\tif (m instanceof RipperDemon) {\n\t\t\treturn 10;\n\t\t}\n\t\tif (m instanceof Ghoul) {\n\t\t\treturn 7;\n\t\t}\n\t\tif (m.EXP() > 13) {\n\t\t\treturn m.EXP();\n\t\t}\n\t\treturn 13;\n\t}\n}", "CodeBleu_score": 46.63514884177687}]}
{"instance_id": "bdc8df5952c7", "generation_result": [{"code": "public void hit( Char enemy ){\n\t\tif (Dungeon.hero.isAlive() && enemy != null && enemy.isAlive()) {\n\t\tif (Dungeon.hero.isCharmedBy(enemy)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (Dungeon.hero.hasTalent(Talent.CLEAVE) && Dungeon.hero.buff(Corruption.class) != null\n\t\t\t\t&& Dungeon.hero.buff(Corruption.class).curHealth() == Dungeon.hero.buff(Corruption.class).maxHealth()) {\n\t\t\tinitialComboTime += Dungeon.hero.pointsInTalent(Talent.CLEAVE) * 0.5f;\n\t\t}\n\n\t\tcomboTime = initialComboTime;\n\t\tcount++;\n\n\t\t//action indicator\n\t\tActionIndicator.update();\n\n\t\tvalidateMasteryCombo();\n\n\t\t//log\n\t\tGLog.i( Messages.get(this, \"combo_log\", count) );\n\n\t\t//refresh visuals\n\t\tDungeon.hero.spendAndNext(TICK);\n\n\t\tif (Dungeon.hero.hasTalent(Talent.COMBO_MASTER)) {\n\t\t\tDungeon.hero.sprite.emitter().burst( Speck.factory( Speck.COMBO ), 3 );\n\t\t}\n\t}\n}", "CodeBleu_score": 35.08299017114136}, {"code": "public void hit( Char enemy ){\n\t\tif (Dungeon.hero.isAlive() && enemy.isAlive() && enemy.alignment != Char.Alignment.ALLY && !enemy.hasTalent(Talent.CLEAVE)) {\n\t\tif (Dungeon.hero.hasTalent(Talent.CLEAVE)) {\n\t\t\tinitialComboTime = initialComboTime + 1.5f * Dungeon.hero.pointsInTalent(Talent.CLEAVE);\n\t\t}\n\t\tcount++;\n\t\tcomboTime = initialComboTime;\n\t\tif (Dungeon.hero.hasTalent(Talent.COMBO_MASTER)) {\n\t\t\tvalidateMasteryCombo();\n\t\t}\n\t\tGLog.w( Messages.get(this, \"combo\", count, enemy.name()));\n\t\tBuffIndicator.refreshHero();\n\t\tif (Dungeon.hero.hasTalent(Talent.COMBO_MASTER)) {\n\t\t\tvalidateMasteryCombo();\n\t\t}\n\t\tBuffIndicator.refreshHero();\n\t}\n}", "CodeBleu_score": 35.42374391680074}, {"code": "public void hit( Char enemy ){\n\t\t//increment combo count\n\tcount++;\n\n\t//get the highest combo move\n\tComboMove move = getHighestMove();\n\n\t//if the enemy is dead or has a full health corruption buff, extend the combo timer\n\tif (enemy.isAlive() && move != null && enemy.buff(Corruption.class) != null && enemy.buff(Corruption.class).value == Corruption.MAX_HP) {\n\t\tcomboTime += move.comboExtend();\n\t} else {\n\t\tcomboTime += move.comboTime();\n\t}\n\n\t//if the combo timer is greater than the initial combo time, set it to the initial combo time\n\tif (comboTime > initialComboTime) {\n\t\tcomboTime = initialComboTime;\n\t}\n\n\t//trigger action indicators\n\tif (Dungeon.hero.isAlive()) {\n\t\tActionIndicator.update();\n\t}\n\n\t//validate mastery combo\n\tvalidateMasteryCombo();\n\n\t//log the combo count\n\tGLog.i( Messages.get(this, \"combo\", count) );\n\n\t//refresh the hero's buff indicator visually\n\tif (Dungeon.hero.isAlive()) {\n\t\tDungeon.hero.sprite.updateBuffIndicator();\n\t}\n}", "CodeBleu_score": 41.505303348309084}]}
{"instance_id": "abf7c664b4dd", "generation_result": [{"code": "public int capacity(){\n\t\tint cap = BASE_CAPACITY;\n\tfor (Item item : inventory) {\n\t\tif (item instanceof Bag) {\n\t\t\tcap += ((Bag) item).capacity();\n\t\t}\n\t}\n\tif (belongings.weapon != null && belongings.weapon.twoHanded()) {\n\t\tcap -= belongings.weapon.twoHanded().capacity();\n\t}\n\treturn cap;\n}", "CodeBleu_score": 31.42230988096195}, {"code": "public int capacity(){\n\t\tint cap = baseCapacity;\n\tfor (Item item : inventory) {\n\t\tif (item instanceof Bag) {\n\t\t\tcap += ((Bag) item).capacity();\n\t\t}\n\t}\n\tif (backpack != null) {\n\t\tcap += backpack.capacity();\n\t}\n\tif (equipped != null && equipped.isEquipped(owner)) {\n\t\tcap -= equipped.capacity();\n\t}\n\treturn cap;\n}", "CodeBleu_score": 27.900353438243336}, {"code": "public int capacity(){\n\t\tint capacity = baseCapacity;\n\tfor (Item item : inventory) {\n\t\tif (item instanceof Bag) {\n\t\t\tcapacity += ((Bag) item).capacity();\n\t\t}\n\t}\n\tif (belongings.weapon2 != null) {\n\t\tcapacity -= belongings.weapon2.capacity();\n\t}\n\treturn capacity;\n}", "CodeBleu_score": 27.433135502487925}]}
{"instance_id": "b97e41e092d2", "generation_result": [{"code": "public void updateHT( boolean boostHP ){\n\t\tint htBonus = HTBoost;\n\tfor (Buff.a b : buffs) {\n\t\tif (b.affects( Buff.Type.RING_OF_MIGHT )) {\n\t\t\thtBonus += b.value;\n\t\t} else if (b.affects( Buff.Type.ELIXIR_OF_MIGHT )) {\n\t\t\thtBonus += b.value * 2;\n\t\t}\n\t}\n\tHT = (int)Math.ceil( (lvl + htBonus) * (1 + (lvl + htBonus) * 0.05f) );\n\tif (boostHP) {\n\t\tHP = Math.min( HT, HP + (int)Math.ceil(HT * 0.05f) );\n\t}\n\tHP = Math.min( HT, HP );\n}", "CodeBleu_score": 26.048390651111692}, {"code": "public void updateHT( boolean boostHP ){\n\t\tHT = (int)(HT_BASE + HTBoost + (HT_MULT * lvl));\n\tif (HT < 1) {\n\t\tHT = 1;\n\t}\n\tif (boostHP) {\n\t\tHP = HT;\n\t}\n\tif (HP > HT) {\n\t\tHP = HT;\n\t}\n}", "CodeBleu_score": 12.883292600852435}, {"code": "public void updateHT( boolean boostHP ){\n\t\tHT = (int)Math.ceil( 10f * Math.pow( lvl, 0.5f ) );\n\tHT += HTBoost;\n\tHT = (int)Math.ceil( HT * belongings.getBuff( ElixirOfMight.class ).bonusHTMultiplier );\n\tHT = (int)Math.ceil( HT * belongings.getBuff( RingOfMight.class ).bonusHTMultiplier );\n\tif (boostHP) {\n\t\tHP = Math.min( HT, HP + 1 );\n\t}\n\tHP = Math.min( HT, HP );\n}", "CodeBleu_score": 30.377293723680417}]}
{"instance_id": "b72bd91544e7", "generation_result": [{"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\tif (wep == null) return false;\n\n\tboolean hit = false;\n\tif (enemy.alignment == Align.ENEMY) {\n\t\thit = wep.hit( enemy, this );\n\t\tif (hit && (heroClass == HeroClass.GLADIATOR || heroClass == HeroClass.DUELIST)) {\n\t\t\tif (wep.shots == 1) {\n\t\t\t\tBuff.affect( this, Fury.class, Fury.duration(this) );\n\t\t\t} else if (wep.shots == 2) {\n\t\t\t\tBuff.affect( this, Rage.class, Rage.duration(this) );\n\t\t\t} else if (wep.shots == 3) {\n\t\t\t\tBuff.affect( this, Enraged.class, Enraged.duration(this) );\n\t\t\t}\n\t\t}\n\t} else if (enemy.alignment == Align.NEUTRAL && enemy.alignment != Align.FRIEND) {\n\t\thit = wep.hit( enemy, this );\n\t}\n\tif (hit) {\n\t\tif (wep.isThrown()) {\n\t\t\twep.setThrown( false );\n\t\t\twep.setOwner( null );\n\t\t}\n\t\tif (enemy.alignment == Align.ENEMY) {\n\t\t\tenemy.damage( wep.damageRoll(), wep.element );\n\t\t}\n\t}\n\treturn hit;\n}", "CodeBleu_score": 30.44056213510965}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t", "CodeBleu_score": 3.535682149288207}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t", "CodeBleu_score": 3.535682149288207}]}
{"instance_id": "f265b39b6677", "generation_result": [{"code": "public int attackSkill( Char target ){\n\t", "CodeBleu_score": 3.516528221576535}, {"code": "public int attackSkill( Char target ){\n\t", "CodeBleu_score": 3.516528221576535}, {"code": "public int attackSkill( Char target ){\n\t\treturn attackSkill(target, false);\n}", "CodeBleu_score": 3.6697274517717244}]}
{"instance_id": "9e50c198348d", "generation_result": [{"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t}", "CodeBleu_score": 34.76218478512051}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t\n}", "CodeBleu_score": 34.76218478512051}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t\tfor (i in 0 until repeats) {\n\t\toperation()\n\t\ttick()\n\t}\n\tif (printResults)\n\t\tprint()\n}", "CodeBleu_score": 47.5717720751314}]}
{"instance_id": "5f6e11998a1f", "generation_result": [{"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t}", "CodeBleu_score": 29.962864407193813}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t}", "CodeBleu_score": 29.962864407193813}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t}", "CodeBleu_score": 29.962864407193813}]}
{"instance_id": "cdda12e45fb9", "generation_result": [{"code": "onPointerOver (){\n\t\tthis.scene.city.map.selectedCell.x = this.x;\n\tthis.scene.city.map.selectedCell.y = this.y;\n\n\tthis.scene.city.map.highlight(this);\n\tthis.scene.city.map.adjustHeightmapTransparency(this);\n}", "CodeBleu_score": 16.926947154845013}, {"code": "onPointerOver (){\n\t\tthis.scene.city.map.selectedCell.x = this.x;\n\tthis.scene.city.map.selectedCell.y = this.y;\n\n\tthis.tint = 0x0000ff;\n\tthis.related.tint = 0x0000ff;\n\n\tif (this.scene.city.map.heightmap) {\n\t\tthis.scene.city.map.heightmap.setTransparency(this.heightmapTransparency);\n\t}\n}", "CodeBleu_score": 21.43319693660965}, {"code": "onPointerOver (){\n\t\tthis.scene.city.map.selectedCell.x = this.x;\n\tthis.scene.city.map.selectedCell.y = this.y;\n\n\tthis.scene.city.map.highlightCell(this.x, this.y);\n\tthis.scene.city.map.highlightRelatedCells(this.x, this.y);\n\n\tif (this.scene.city.map.heightmap) {\n\t\tthis.scene.city.map.heightmap.adjustTransparency(this.x, this.y);\n\t}\n}", "CodeBleu_score": 22.352154040214934}]}
{"instance_id": "850931ce3401", "generation_result": [{"code": "getTrafficDensity (){\n\t\tif (this.current < this.lightThreshold)\n\t\treturn null;\n\telse if (this.current < this.heavyThreshold)\n\t\treturn 'light';\n\telse\n\t\treturn 'heavy';\n}", "CodeBleu_score": 41.911761192988706}, {"code": "getTrafficDensity (){\n\t\tif (this.current < this.lightThreshold)\n\t\treturn null;\n\tif (this.current < this.heavyThreshold)\n\t\treturn 'light';\n\treturn 'heavy';\n}", "CodeBleu_score": 44.61166498014252}, {"code": "getTrafficDensity (){\n\t\tif (this.current > this.lightThreshold && this.current < this.heavyThreshold) {\n\t\treturn 'light';\n\t} else if (this.current >= this.heavyThreshold) {\n\t\treturn 'heavy';\n\t} else {\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 47.65886132551535}]}
{"instance_id": "5958478bf873", "generation_result": [{"code": "restart: function (){\n\t\n}", "CodeBleu_score": 0.4984274449288218}, {"code": "restart: function (){\n\t\n}", "CodeBleu_score": 0.4984274449288218}, {"code": "restart: function (){\n\t\tthis._frameIndex = this.isReversed ? this._frames.length - 1 : 0;\n\tthis.updateCurrentFrame(false, true);\n}", "CodeBleu_score": 11.465431299495709}]}
{"instance_id": "d2441e586d58", "generation_result": [{"code": "flash: function (color, duration, force, alpha){\n\t\n}", "CodeBleu_score": 8.102085899177318}, {"code": "flash: function (color, duration, force, alpha){\n\t\tif (color === undefined) { color = 0xffffff; }\n\tif (duration === undefined) { duration = 500; }\n\tif (force === undefined) { force = false; }\n\tif (alpha === undefined) { alpha = 1; }\n\n\tif (!force && this._flashColor > 0)\n\t{\n\t\t//  Can't reset an already running flash\n\t\treturn false;\n\t}\n\n\tthis._flashColor = color;\n\tthis._flashAlpha = alpha;\n\tthis._flashDuration = duration;\n\n\treturn true;\n}", "CodeBleu_score": 62.54038067989076}, {"code": "flash: function (color, duration, force, alpha){\n\t\tif (color === undefined) { color = 0xffffff; }\n\tif (duration === undefined) { duration = 500; }\n\tif (force === undefined) { force = false; }\n\tif (alpha === undefined) { alpha = 1; }\n\n\tif (!force && this._flashColor > 0)\n\t{\n\t\t//  Can't reset an already running flash\n\t\treturn false;\n\t}\n\n\tthis._flashColor = color;\n\tthis._flashAlpha = alpha;\n\tthis._flashDuration = duration;\n\tthis._flashVisible = true;\n\n\treturn true;\n}", "CodeBleu_score": 63.34877229161421}]}
{"instance_id": "48b26381d975", "generation_result": [{"code": "createFluidLayer: function (children, addToWorld){\n\tif (addToWorld === undefined) { addToWorld = true; }\n\nthis.boundsFluid.width = this.width;\nthis.boundsFluid.height = this.height;\n\nvar layer = new Phaser.FlexLayer(this, this.positionFluid, this.boundsFluid, this.scaleFluid);\n\nif (addToWorld)\n{\n    this.game.world.add(layer);\n}\n\nthis.layers.push(layer);\n\nif (children)\n{\n    layer.addMultiple(children);\n}\n\nreturn layer;\n}", "CodeBleu_score": 83.26000717057642}, {"code": "createFluidLayer: function (children, addToWorld){\n\tif (addToWorld === undefined) { addToWorld = true; }\n\nthis.boundsFluid.width = this.width;\nthis.boundsFluid.height = this.height;\n\nvar layer = new Phaser.FlexLayer(this, this.positionFluid, this.boundsFluid, this.scaleFluid);\n\nif (addToWorld)\n{\n    this.game.world.add(layer);\n}\n\nthis.layers.push(layer);\n\nif (children)\n{\n    layer.addMultiple(children);\n}\n\nreturn layer;\n}", "CodeBleu_score": 83.26000717057642}, {"code": "createFluidLayer: function (children, addToWorld){\n\tif (addToWorld === undefined) { addToWorld = true; }\n\nthis.boundsFluid.width = this.width;\nthis.boundsFluid.height = this.height;\n\nvar layer = new Phaser.FlexLayer(this, this.positionFluid, this.boundsFluid, this.scaleFluid);\n\nif (addToWorld)\n{\n    this.game.world.add(layer);\n}\n\nthis.layers.push(layer);\n\nif (children)\n{\n    layer.addMultiple(children);\n}\n\nreturn layer;\n}", "CodeBleu_score": 83.26000717057642}]}
{"instance_id": "624c9e2eb19f", "generation_result": [{"code": "createFullLayer: function (children){\n\t", "CodeBleu_score": 2.6358321300141316}, {"code": "createFullLayer: function (children){\n\t\nif (addToWorld === undefined) { addToWorld = true; }\n\nvar layer = new Phaser.FlexLayer(this, this.positionFull, this.boundsFull, this.scaleFull);\n\nif (addToWorld)\n{\n    this.game.world.add(layer);\n}\n\nthis.layers.push(layer);\n\nif (children)\n{\n    layer.addMultiple(children);\n}\n\nreturn layer;\n}", "CodeBleu_score": 72.42675499703462}, {"code": "createFullLayer: function (children){\n\t", "CodeBleu_score": 2.6358321300141316}]}
{"instance_id": "1c7529bca3ce", "generation_result": [{"code": "crop: function (rect, copy){\n\t\n}", "CodeBleu_score": 0.45436346467247823}, {"code": "crop: function (rect, copy){\n\t\n}", "CodeBleu_score": 0.45436346467247823}, {"code": "crop: function (rect, copy){\n\t\n}", "CodeBleu_score": 0.45436346467247823}]}
{"instance_id": "d767b9ea9212", "generation_result": [{"code": "move: function (x, y, wrap){\n\t\n}", "CodeBleu_score": 5.93637882297307}, {"code": "move: function (x, y, wrap){\n\t\n}", "CodeBleu_score": 5.93637882297307}, {"code": "move: function (x, y, wrap){\n\t\n}", "CodeBleu_score": 5.93637882297307}]}
{"instance_id": "c7cf015114f3", "generation_result": [{"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\n}", "CodeBleu_score": 2.220777169396903}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\n}", "CodeBleu_score": 2.220777169396903}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\n}", "CodeBleu_score": 2.220777169396903}]}
{"instance_id": "e0294cb83ca3", "generation_result": [{"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\tif (typeof quantity === 'undefined') { quantity = 1; }\n\tif (typeof key === 'undefined') { key = null; }\n\tif (typeof frame === 'undefined') { frame = null; }\n\tif (typeof group === 'undefined') { group = null; }\n\tif (typeof bulletClass === 'undefined') { bulletClass = null; }\n\n\treturn new Phaser.Weapon(this.game, key, frame, group, bulletClass, quantity);\n}", "CodeBleu_score": 25.015430687629713}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n}", "CodeBleu_score": 5.476186467129299}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n}", "CodeBleu_score": 5.476186467129299}]}
{"instance_id": "2fca91787d6c", "generation_result": [{"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\n}", "CodeBleu_score": 2.789282050127807}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\n}", "CodeBleu_score": 2.789282050127807}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\n}", "CodeBleu_score": 2.789282050127807}]}
{"instance_id": "5d227ea7f97b", "generation_result": [{"code": "checkVideoProgress: function (){\n\t\nif (this.video.readyState === 4) {\n\nif (this._pendingChangeSource) {\n\nthis._pendingChangeSource = false;\n\nwindow.clearTimeout(this._retryID);\n\nif (this.video.networkState === 0) {\n\nthis.retry = this.retryLimit;\n\nthis.texture.valid = false;\n\nthis.video.play();\n\n} else {\n\nthis.retry--;\n\nif (this.retry > 0) {\n\nthis._retryID = window.setTimeout(this.checkVideoProgress.bind(this), this.retryInterval);\n\n} else {\n\nconsole.warn('Phaser.Video: Unable to start downloading video in ' + this.retryLimit + ' attempts.');\n\n}\n\n}\n\n} else {\n\nthis.texture.valid = true;\n\nthis.retry = this.retryLimit;\n\n}\n\n}\n\n}", "CodeBleu_score": 74.23618447489679}, {"code": "checkVideoProgress: function (){\n\t\nif (this.retry > 0)\n{\n    if (this.video.readyState === 4)\n    {\n        //  The video has downloaded enough data to be used\n        this._pendingChangeSource = false;\n\n        this.retry = 0;\n\n        this.texture.valid = true;\n\n        this.game.events.onVideoLoadComplete.dispatch(this.video, this);\n\n        if (this._autoplay)\n        {\n            this.paused = false;\n        }\n    }\n    else\n    {\n        //  The video isn't ready yet, so keep trying!\n        this.retry--;\n\n        this._retryID = window.setTimeout(this.checkVideoProgress.bind(this), this.retryInterval);\n    }\n}\nelse\n{\n    //  We've run out of retries, abort\n    this._pendingChangeSource = false;\n\n    this.game.events.onVideoLoadError.dispatch(this.video, this);\n}\n\n}", "CodeBleu_score": 45.94745225957457}, {"code": "checkVideoProgress: function (){\n\t\n//  Clear any pending change requests\nthis._pendingChangeSource = false;\n\nif (this.video.readyState === this.video.HAVE_ENOUGH_DATA)\n{\n    this.retry = 0;\n\n    //  The video is ready, so stop any pending retries\n    if (this._retryID !== null)\n    {\n        window.clearTimeout(this._retryID);\n        this._retryID = null;\n    }\n\n    //  Update the texture\n    this.texture.baseTexture.source = this.video;\n\n    //  The video is ready to play, so reset the paused state\n    if (this._autoplay)\n    {\n        this.paused = false;\n    }\n\n    this.hasStarted = true;\n\n    this.onStart.dispatch(this);\n\n    //  Reset the touch lock if it exists\n    if (this.touchLocked)\n    {\n        this.touchLocked = false;\n    }\n}\nelse\n{\n    //  The video isn't ready, so try again in 100ms\n    this.retry--;\n\n    if (this.retry > 0)\n    {\n        this._retryID = window.setTimeout(this.checkVideoProgress.bind(this), this.retryInterval);\n    }\n    else\n    {\n        //  The video failed to download, so dispatch the error event\n        this.hasStarted = true;\n\n        this.onError.dispatch(this, 'download');\n    }\n}\n\n}", "CodeBleu_score": 66.0005653465789}]}
{"instance_id": "e48c3c53f00a", "generation_result": [{"code": "start: function (event, value){\n\t\n/**\n * @property {boolean} isDown - The \\\"down\\\" state of the button.\n */\n    this.isDown = true;\n\n/**\n * @property {boolean} isUp - The \\\"up\\\" state of the button.\n */\n    this.isUp = false;\n\n/**\n * @property {number} timeDown - The timestamp when the button was last pressed down.\n */\n    this.timeDown = this.game.time.time;\n\n/**\n * @property {number} timeUp - The timestamp when the button was last released.\n */\n    this.timeUp = 0;\n\n/**\n * Gamepad only.\n * If a button is held down this holds down the number of times the button has 'repeated'.\n * @property {number} repeats\n */\n    this.repeats = 0;\n\n/**\n * True if the alt key was held down when this button was last pressed or released.\n * Not supported on Gamepads.\n * @property {boolean} altKey\n */\n    this.altKey = false;\n\n/**\n * True if the shift key was held down when this button was last pressed or released.\n * Not supported on Gamepads.\n * @property {boolean} shiftKey\n */\n    this.shiftKey = false;\n\n/**\n * True if the control key was held down when this button was last pressed or released.\n * Not supported on Gamepads.\n * @property {boolean} ctrlKey\n */\n    this.ctrlKey = false;\n\n/**\n * @property {number} value - Button value. Mainly useful for checking analog buttons (like shoulder triggers) on Gamepads.\n */\n    this.value = value || 1;\n\n/**\n * @property {object} event - The DOM event that caused the change in button state.\n */\n    this.event = event;\n\nif (event && event.altKey)\n{\n    this.altKey = true;\n}\n\nif (event && event.shiftKey)\n{\n    this.shiftKey = true;\n}\n\nif (event && event.ctrlKey)\n{\n    this.ctrlKey = true;\n}\n\nthis.onDown.dispatch(this, this.value);\n\n}", "CodeBleu_score": 55.94224285959872}, {"code": "start: function (event, value){\n\t\nif (this.isDown === false)\n{\n    this.isDown = true;\n    this.isUp = false;\n    this.timeDown = this.game.time.time;\n    this.timeUp = 0;\n\n    this.altKey = false;\n    this.shiftKey = false;\n    this.ctrlKey = false;\n\n    if (event)\n    {\n        this.altKey = event.altKey;\n        this.shiftKey = event.shiftKey;\n        this.ctrlKey = event.ctrlKey;\n    }\n\n    this.value = value;\n\n    this.onDown.dispatch(this, value);\n}\n\nif (this.parent.capture)\n{\n    this.parent.capture = false;\n}\n\n}", "CodeBleu_score": 68.71624552210656}, {"code": "start: function (event, value){\n\t\nif (this.isDown === false)\n{\n    this.isDown = true;\n    this.isUp = false;\n    this.timeDown = this.game.time.time;\n    this.timeUp = 0;\n\n    this.altKey = event.altKey;\n    this.shiftKey = event.shiftKey;\n    this.ctrlKey = event.ctrlKey;\n\n    this.value = value;\n\n    this.onDown.dispatch(this, value);\n}\n\nif (this.isDown && this.game.input.gamepad)\n{\n    this.repeats++;\n}\n\n}", "CodeBleu_score": 66.25198618671448}]}
{"instance_id": "a2cb3bdacb1e", "generation_result": [{"code": "onMouseDown: function (event){\n\t\n/**\n * The browser mouse DOM event. Will be null if no mouse event has ever been received.\n * Access this property only inside a Mouse event handler and do not keep references to it.\n * @property {MouseEvent|null} event\n */\nthis.event = event;\n\nif (this.mouseDownCallback)\n{\n    if (this.mouseDownCallback.call(this.callbackContext, event) === false)\n    {\n        event.preventDefault();\n    }\n}\n\nif (this.capture)\n{\n    event.preventDefault();\n}\n\nif (this.input.enabled)\n{\n    this.input.mouse.start(event);\n}\n\n}", "CodeBleu_score": 67.96835281490321}, {"code": "onMouseDown: function (event){\n\t\nif (this.enabled && this.game.input.enabled)\n{\n    this.event = event;\n\n    if (this.capture)\n    {\n        event.preventDefault();\n    }\n\n    this.game.input.mousePointer.start(event);\n}\n\nif (this.mouseDownCallback)\n{\n    return this.mouseDownCallback.call(this.callbackContext, event);\n}\n\n}", "CodeBleu_score": 57.70791884589694}, {"code": "onMouseDown: function (event){\n\t\nif (this.enabled && this.game.input.enabled)\n{\n    this.event = event;\n\n    if (this.capture)\n    {\n        event.preventDefault();\n    }\n\n    if (this.mouseDownCallback)\n    {\n        this.mouseDownCallback.call(this.callbackContext, event);\n    }\n\n    this.input.mouse.pointer.start(event);\n}\n\n}", "CodeBleu_score": 63.170778183818896}]}
{"instance_id": "88538a5b66e8", "generation_result": [{"code": "onMouseUpGlobal: function (event){\n\t", "CodeBleu_score": 13.408675420784958}, {"code": "onMouseUpGlobal: function (event){\n\t\nif (this.capture)\n{\n    event.preventDefault();\n}\n\nif (this.mouseUpCallback)\n{\n    this.mouseUpCallback.call(this.callbackContext, event);\n}\n\nif (!this.input.enabled || !this.enabled)\n{\n    return;\n}\n\nevent.identifier = 0;\n\nthis.input.mousePointer.stop(event);\n}", "CodeBleu_score": 76.71859101939856}, {"code": "onMouseUpGlobal: function (event){\n\t\nif (this.capture)\n{\nevent.preventDefault();\n}\n\nif (this.mouseUpCallback)\n{\nthis.mouseUpCallback.call(this.callbackContext, event);\n}\n\nif (!this.input.enabled || !this.enabled)\n{\nreturn;\n}\n\nevent.identifier = 0;\n\nthis.input.mousePointer.stop(event);\n}", "CodeBleu_score": 75.34313690574557}]}
{"instance_id": "bf8b43ab3487", "generation_result": [{"code": "onTouchEnter: function (event){\n\t\nif (this.touchEnterCallback) {\nthis.touchEnterCallback.call(this.callbackContext, event);\n}\n\nif (!this.game.input.enabled || !this.enabled) {\nreturn;\n}\n\nif (this.preventDefault) {\nevent.preventDefault();\n}\n\n//  Touch enter - touches that just went down (never up before)\nfor (var i = 0; i < event.changedTouches.length; i++) {\nthis.game.input.startPointer(event.changedTouches[i]);\n}\n}", "CodeBleu_score": 75.60401889196758}, {"code": "onTouchEnter: function (event){\n\t\nif (this.touchEnterCallback) {\nthis.touchEnterCallback.call(this.callbackContext, event);\n}\n\nif (!this.game.input.enabled || !this.enabled) {\nreturn;\n}\n\nif (this.preventDefault) {\nevent.preventDefault();\n}\n\n//  Touch enter - touches that just went down (never up before)\n//  http://www.w3.org/TR/touch-events/#dfn-touchenter\nfor (var i = 0; i < event.changedTouches.length; i++) {\nthis.game.input.startPointer(event.changedTouches[i]);\n}\n}", "CodeBleu_score": 75.60401889196758}, {"code": "onTouchEnter: function (event){\n\t\nif (this.touchEnterCallback) {\nthis.touchEnterCallback.call(this.callbackContext, event);\n}\n\nif (!this.game.input.enabled || !this.enabled) {\nreturn;\n}\n\nif (this.preventDefault) {\nevent.preventDefault();\n}\n\n//  Touch enter - touches that just went down (never up)\n//  http://www.w3.org/TR/touch-events/#dfn-touchenter\nfor (var i = 0; i < event.changedTouches.length; i++) {\nthis.game.input.startPointer(event.changedTouches[i]);\n}\n}", "CodeBleu_score": 75.60401889196758}]}
