{"instance_id": "a6e254b7b855", "generation_result": [{"code": "translateTemplate(template, keystrokesByCommand){\n\t\tfor (let item of this.flattenMenuTemplate(template)) {\n\t\tthis.translateItem(item, keystrokesByCommand);\n\t\tif (item.submenu) this.translateTemplate(item.submenu, keystrokesByCommand);\n\t}\n}", "CodeBleu_score": 12.38234299173686}, {"code": "translateTemplate(template, keystrokesByCommand){\n\t\tfor (let item of this.flattenMenuTemplate(template)) {\n\t\tif (!item.metadata) item.metadata = {};\n\t\tif (item.command) {\n\t\t\tconst keystrokes = keystrokesByCommand[item.command];\n\t\t\tif (keystrokes) {\n\t\t\t\titem.accelerator = keystrokes[0];\n\t\t\t\titem.label = keystrokes[0].startsWith(' ') ? keystrokes[0].substr(1) : keystrokes[0];\n\t\t\t}\n\t\t\tif (!item.accelerator) item.accelerator = '';\n\t\t\titem.click = () => {\n\t\t\t\tconst command = item.command.startsWith('application:') ? item.command.substr(12) : item.command;\n\t\t\t\tglobal.atomApplication.sendCommand(command);\n\t\t\t};\n\t\t\titem.metadata.windowSpecific = !item.command.startsWith('application:');\n\t\t}\n\t\tif (item.submenu) this.translateTemplate(item.submenu, keystrokesByCommand);\n\t}\n}", "CodeBleu_score": 51.85261049967025}, {"code": "translateTemplate(template, keystrokesByCommand){\n\t\tfor (let item of this.flattenMenuTemplate(template)) {\n\t\tif (item.metadata == null) item.metadata = {};\n\t\tif (item.accelerator == null) item.accelerator = '';\n\t\tif (item.click == null) item.click = () => {};\n\t\tif (item.enabled == null) item.enabled = true;\n\t\tif (item.visible == null) item.visible = true;\n\t\tif (item.submenu != null) this.translateTemplate(item.submenu, keystrokesByCommand);\n\t\tif (item.metadata.windowSpecific != null) continue;\n\t\tif (item.command == null) continue;\n\t\tconst keystrokes = keystrokesByCommand[item.command];\n\t\tif (keystrokes == null) continue;\n\t\tconst accelerator = keystrokes[0];\n\t\tif (accelerator.includes(' ')) item.label = accelerator;\n\t\telse item.accelerator = accelerator;\n\t\titem.metadata.windowSpecific = !item.command.startsWith('application:');\n\t\titem.click = () => {\n\t\t\tconst command = item.command;\n\t\t\tconst detail = item.commandDetail;\n\t\t\tglobal.atomApplication.sendCommand(command, detail);\n\t\t};\n\t}\n}", "CodeBleu_score": 46.39262366857749}]}
{"instance_id": "c4ff073b485f", "generation_result": [{"code": "flattenMenuItems(menu){\n\tconst flattened = [];\nfor (const item of menu.items) {\nflattened.push(item);\nif (item.submenu) {\nconst submenu = item.submenu;\nconst flattenedSubmenu = this.flattenMenuItems(submenu);\nflattened.push(...flattenedSubmenu);\n}\n}\nreturn flattened;\n}", "CodeBleu_score": 35.84815354982406}, {"code": "flattenMenuItems(menu){\n\t\tconst items = [];\n\tfor (const item of menu.items) {\n\t\titems.push(item);\n\t\tif (item.submenu) {\n\t\t\titems.push(...this.flattenMenuItems(item.submenu));\n\t\t}\n\t}\n\treturn items;\n}", "CodeBleu_score": 35.63809716134077}, {"code": "flattenMenuItems(menu){\n\t\tconst flattenedItems = [];\n\tfor (const item of menu.items) {\n\t\tflattenedItems.push(item);\n\t\tif (item.submenu) {\n\t\t\tconst flattenedSubmenuItems = this.flattenMenuItems(item.submenu);\n\t\t\tflattenedItems.push(...flattenedSubmenuItems);\n\t\t}\n\t}\n\treturn flattenedItems;\n}", "CodeBleu_score": 37.52863358804003}]}
{"instance_id": "dba487230999", "generation_result": [{"code": "const encryptOptions = (options, secret) =>{\n\t\tconst iv = crypto.randomBytes(16);\n  const cipher = crypto.createCipheriv('aes-256-gcm', secret, iv);\n  cipher.setAAD(Buffer.from(JSON.stringify(options), 'utf8'));\n  const encrypted = cipher.update(JSON.stringify(options), 'utf8');\n  encrypted.write(cipher.final());\n  const tag = cipher.getAuthTag();\n  return JSON.stringify({\n    tag: tag.toString('hex'),\n    iv: iv.toString('hex'),\n    content: encrypted.toString('hex')\n  });\n}", "CodeBleu_score": 52.5624854972488}, {"code": "const encryptOptions = (options, secret) =>{\n\t\tconst iv = crypto.randomBytes(16);\n  const cipher = crypto.createCipheriv('aes-256-gcm', secret, iv);\n  cipher.setAAD(Buffer.from(APPLICATION_STATE_VERSION));\n  const encrypted = cipher.update(JSON.stringify(options));\n  encrypted.write(cipher.final());\n  const tag = cipher.getAuthTag();\n  return JSON.stringify({\n    iv: iv.toString('hex'),\n    encryptedContent: encrypted.toString('hex'),\n    tag: tag.toString('hex')\n  });\n}", "CodeBleu_score": 52.42235555444067}, {"code": "const encryptOptions = (options, secret) =>{\n\t\tconst iv = crypto.randomBytes(12);\n\tconst cipher = crypto.createCipheriv('aes-256-gcm', secret, iv);\n\tlet encrypted = cipher.update(JSON.stringify(options), 'utf8');\n\tencrypted = Buffer.concat([encrypted, cipher.final()]);\n\tconst tag = cipher.getAuthTag();\n\treturn JSON.stringify({\n\t\tiv: iv.toString('hex'),\n\t\ttag: tag.toString('hex'),\n\t\tcontent: encrypted.toString('hex')\n\t});\n}", "CodeBleu_score": 49.35177133579632}]}
{"instance_id": "7efe3d7cee0f", "generation_result": [{"code": "createClickHandlers(template){\n\t\tfor (const item of template) {\n\t\tif (item.command) {\n\t\t\titem.commandDetail = item.command;\n\t\t\titem.contextCommand = true;\n\t\t\titem.click = () => {\n\t\t\t\tatomApplication.sendCommandEvent(this.atomWindow.browserWindow, item.command, item.commandDetail);\n\t\t\t};\n\t\t}\n\n\t\tif (item.submenu) {\n\t\t\tthis.createClickHandlers(item.submenu);\n\t\t}\n\t}\n}", "CodeBleu_score": 57.96940039362446}, {"code": "createClickHandlers(template){\n\t\tfor (const item of template) {\n\t\tif (item.command) {\n\t\t\titem.commandDetail = item.command;\n\t\t\titem.contextCommand = true;\n\t\t\titem.click = (event) => {\n\t\t\t\tatomApplication.sendCommandEvent(this.atomWindow.browserWindow, item.commandDetail);\n\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t};\n\t\t} else if (item.submenu) {\n\t\t\tthis.createClickHandlers(item.submenu);\n\t\t}\n\t}\n}", "CodeBleu_score": 58.310247885750165}, {"code": "createClickHandlers(template){\n\t\tfor (const item of template) {\n\t\tif (item.command) {\n\t\t\titem.commandDetail = item.command;\n\t\t\titem.contextCommand = true;\n\t\t\titem.command = null;\n\t\t\titem.click = (event) => {\n\t\t\t\tconst command = event.currentTarget.commandDetail;\n\t\t\t\tconst targetWindow = this.atomWindow.getBrowserWindow();\n\t\t\t\tatomApplication.sendCommandToWindow(command, targetWindow);\n\t\t\t};\n\t\t} else if (item.submenu) {\n\t\t\tthis.createClickHandlers(item.submenu);\n\t\t}\n\t}\n}", "CodeBleu_score": 58.944083010170964}]}
{"instance_id": "851df56cc3b9", "generation_result": [{"code": "async didSavePath(window, path){\n\t\tconst recoveryFile = this.recoveryFilesByFilePath.get(path);\n\tif (!recoveryFile) return;\n\n\ttry {\n\t\tawait recoveryFile.release();\n\t} catch (err) {\n\t\tconsole.log(\n\t\t\t`Couldn't release ${recoveryFile.recoveryPath}. Code: ${\n\t\t\t\terr.code\n\t\t\t}. Message: ${err.message}`\n\t\t);\n\t}\n\n\tconst windows = this.windowsByRecoveryFile.get(recoveryFile);\n\tif (windows) windows.delete(window);\n\tif (windows && windows.size === 0) this.windowsByRecoveryFile.delete(recoveryFile);\n\n\tconst recoveryFiles = this.recoveryFilesByWindow.get(window);\n\tif (recoveryFiles) recoveryFiles.delete(recoveryFile);\n\tif (recoveryFiles && recoveryFiles.size === 0)\n\t\tthis.recoveryFilesByWindow.delete(window);\n\n\tthis.recoveryFilesByFilePath.delete(path);\n}", "CodeBleu_score": 71.06881442398938}, {"code": "async didSavePath(window, path){\n\tconst recoveryFile = this.recoveryFilesByFilePath.get(path);\nif (!recoveryFile) return;\ntry {\n  await recoveryFile.release();\n} catch (err) {\n  console.log(\n    `Couldn't release ${recoveryFile.recoveryPath}. Code: ${err.code}. Message: ${err.message}`\n  );\n}\nif (this.recoveryFilesByWindow.has(window)) {\n  this.recoveryFilesByWindow.get(window).delete(recoveryFile);\n}\nif (this.windowsByRecoveryFile.has(recoveryFile)) {\n  this.windowsByRecoveryFile.get(recoveryFile).delete(window);\n}\nif (this.recoveryFilesByFilePath.has(path)) {\n  this.recoveryFilesByFilePath.delete(path);\n}\n}", "CodeBleu_score": 80.33322884403665}, {"code": "async didSavePath(window, path){\n\t\tconst recoveryFile = this.recoveryFilesByFilePath.get(path);\n\tif (!recoveryFile) return;\n\n\ttry {\n\t\tawait recoveryFile.release();\n\t} catch (err) {\n\t\tconsole.log(\n\t\t\t`Couldn't release ${recoveryFile.recoveryPath}. Code: ${err.code}. Message: ${err.message}`\n\t\t);\n\t}\n\n\tif (this.recoveryFilesByWindow.has(window)) {\n\t\tthis.recoveryFilesByWindow.get(window).delete(recoveryFile);\n\t}\n\tif (this.windowsByRecoveryFile.has(recoveryFile)) {\n\t\tthis.windowsByRecoveryFile.get(recoveryFile).delete(window);\n\t}\n\tthis.recoveryFilesByFilePath.delete(path);\n}", "CodeBleu_score": 80.37046694703552}]}
{"instance_id": "37d777933a87", "generation_result": [{"code": "async didCrashWindow(window){\n\t", "CodeBleu_score": 2.7930095370516357}, {"code": "async didCrashWindow(window){\n\t\tconst recoveryFiles = this.recoveryFilesByWindow.get(window);\n\tif (recoveryFiles == null) return;\n\tfor (const recoveryFile of recoveryFiles) {\n\t\ttry {\n\t\t\tawait recoveryFile.recover();\n\t\t} catch (err) {\n\t\t\tconsole.log(\n\t\t\t\t`Couldn't recover ${recoveryFile.recoveryPath}. Code: ${err.code}. Message: ${err.message}`\n\t\t\t);\n\t\t\trecoveryFile.showErrorDialog(err);\n\t\t}\n\t\tif (recoveryFile.isRecovered()) this.recoveryFilesByFilePath.delete(recoveryFile.filePath);\n\t\tthis.windowsByRecoveryFile.get(recoveryFile).delete(window);\n\t}\n\tthis.recoveryFilesByWindow.delete(window);\n}", "CodeBleu_score": 29.90278036301177}, {"code": "async didCrashWindow(window){\n\t\tif (!this.recoveryFilesByWindow.has(window)) return;\n\tconst recoveryFiles = this.recoveryFilesByWindow.get(window);\n\tfor (const recoveryFile of recoveryFiles) {\n\t\ttry {\n\t\t\tawait recoveryFile.recover();\n\t\t} catch (err) {\n\t\t\tconsole.log(\n\t\t\t\t`Couldn't recover ${recoveryFile.recoveryPath}. Code: ${err.code}. Message: ${err.message}`\n\t\t\t);\n\t\t\trecoveryFile.showRecoveryErrorDialog();\n\t\t}\n\t\tif (recoveryFile.isRecovered()) {\n\t\t\tthis.recoveryFilesByFilePath.delete(recoveryFile.filePath);\n\t\t\tthis.recoveryFilesByWindow.get(window).delete(recoveryFile);\n\t\t\tthis.windowsByRecoveryFile.get(recoveryFile).delete(window);\n\t\t}\n\t}\n}", "CodeBleu_score": 31.757738645900048}]}
{"instance_id": "935916bc7ea0", "generation_result": [{"code": "async function copyFile(source, destination, mode){\n\t\treturn new Promise((resolve, reject) => {\n\t\tmkdirp(Path.dirname(destination), error => {\n\t\t\tif (error != null) {\n\t\t\t\treject(error);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst readStream = fs.createReadStream(source);\n\t\t\tconst writeStream = fs.createWriteStream(destination, { mode });\n\n\t\t\treadStream.on('error', error => {\n\t\t\t\treadStream.close();\n\t\t\t\twriteStream.close();\n\t\t\t\treject(error);\n\t\t\t});\n\n\t\t\twriteStream.on('error', error => {\n\t\t\t\treadStream.close();\n\t\t\t\twriteStream.close();\n\t\t\t\treject(error);\n\t\t\t});\n\n\t\t\twriteStream.on('close', () => {\n\t\t\t\treadStream.close();\n\t\t\t\tresolve();\n\t\t\t});\n\n\t\t\treadStream.pipe(writeStream);\n\t\t});\n\t});\n}", "CodeBleu_score": 56.9409049887619}, {"code": "async function copyFile(source, destination, mode){\n\t\treturn new Promise((resolve, reject) => {\n\t\tmkdirp(Path.dirname(destination), error => {\n\t\t\tif (error) return reject(error);\n\t\t\tconst readStream = fs.createReadStream(source);\n\t\t\tconst writeStream = fs.createWriteStream(destination, { mode });\n\t\t\treadStream.on('error', reject);\n\t\t\twriteStream.on('error', reject);\n\t\t\treadStream.on('end', resolve);\n\t\t\treadStream.pipe(writeStream);\n\t\t});\n\t});\n}", "CodeBleu_score": 58.778083777040614}, {"code": "async function copyFile(source, destination, mode){\n\t\treturn new Promise((resolve, reject) => {\n\t\tmkdirp(Path.dirname(destination), error => {\n\t\t\tif (error != null) {\n\t\t\t\treject(error);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst readStream = fs.createReadStream(source);\n\t\t\tconst writeStream = fs.createWriteStream(destination, { mode });\n\n\t\t\treadStream.on('error', error => reject(error));\n\t\t\twriteStream.on('error', error => reject(error));\n\n\t\t\treadStream.on('end', () => resolve());\n\n\t\t\treadStream.pipe(writeStream);\n\t\t});\n\t});\n}", "CodeBleu_score": 60.96954984221923}]}
{"instance_id": "5410353afedd", "generation_result": [{"code": "function handleStartupEventWithSquirrel(){\n\t_squirrelCommand = process.argv[1];\nif (process.platform !== 'win32') {\nreturn false;\n}\n\nconst SquirrelUpdate = require('../squirrel-update');\nreturn SquirrelUpdate.handleStartupEvent(_squirrelCommand);}", "CodeBleu_score": 65.54025964726607}, {"code": "function handleStartupEventWithSquirrel(){\n\t_c_handleStartupEventWithSquirrel_start:\n\tif (process.platform !== 'win32') {return false;}\n\tconst SquirrelUpdate = require('../squirrel-update');\n\tconst command = process.argv[1];\n\treturn SquirrelUpdate.handleStartupEvent(command);\n}", "CodeBleu_score": 72.24228452190012}, {"code": "function handleStartupEventWithSquirrel(){\n\t_c0\u200d.w(\"process\");_c0\u200d.w(\"../squirrel-update-windows\");_c0\u200d.w(\"../get-release-channel\");_c0\u200d.w(\"electron\");\n\n  if (process.platform !== 'win32') {\n    return false;\n  }\n\n  const SquirrelUpdate = require('../squirrel-update-windows');\n  const getReleaseChannel = require('../get-release-channel');\n  const command = process.argv[1];\n  const releaseChannel = getReleaseChannel(app.getVersion());\n  return SquirrelUpdate.handleStartupEvent(command, app, process.argv, releaseChannel);\n}", "CodeBleu_score": 65.1847383164792}]}
{"instance_id": "5fb2d4f077cb", "generation_result": [{"code": "function normalizeDriveLetterName(filePath){\n\t\tif (process.platform === 'win32' && filePath) {\n\t\tconst match = /^([a-z]):/.exec(filePath);\n\t\tif (match) {\n\t\t\tfilePath = `${match[1].toUpperCase()}:${filePath.substr(2)}`;\n\t\t}\n\t}\n\treturn filePath;\n}", "CodeBleu_score": 58.30779512468205}, {"code": "function normalizeDriveLetterName(filePath){\n\t\tif (process.platform !== 'win32' || filePath == null) {\n\t\treturn filePath;\n\t}\n\n\treturn filePath.replace(/^[a-z]:\\\\/, function(match) {\n\t\treturn match.toUpperCase();\n\t});\n}", "CodeBleu_score": 40.90156737402955}, {"code": "function normalizeDriveLetterName(filePath){\n\t\tif (process.platform === 'win32' && filePath) {\n\t\tconst match = /^([a-z]):/.exec(filePath);\n\n\t\tif (match) {\n\n\t\t\tfilePath = filePath.substr(0, 2).toUpperCase() + filePath.substr(2);\n\n\t\t}\n\n\t}\n\n\treturn filePath;\n\n}", "CodeBleu_score": 58.46207582594245}]}
{"instance_id": "e61a087ae10f", "generation_result": [{"code": "register(callback){\n\t\tnew Registry({\n\t\thive: 'HKCU',\n\t\tkey: `${this.key}\\\\${this.parts[0].key}`\n\t}).set(this.parts[0].name, Registry.REG_SZ, this.parts[0].value, (err) => {\n\t\tif (err) {\n\t\t\treturn callback(err);\n\t\t}\n\n\t\tthis.isRegistered((registered) => {\n\t\t\tif (!registered) {\n\t\t\t\treturn callback(new Error('Failed to register'));\n\t\t\t}\n\n\t\t\tif (this.parts.length > 1) {\n\t\t\t\treturn this.register(callback);\n\t\t\t}\n\n\t\t\treturn callback();\n\t\t});\n\t});\n}", "CodeBleu_score": 26.34033233103828}, {"code": "register(callback){\n\t\tconst self = this;\n\tconst registryEntries = [];\n\n\tthis.parts.forEach(part => {\n\t\tconst registryEntry = {\n\t\t\tkey: `${this.key}\\\\${part.key}`,\n\t\t\tname: part.name,\n\t\t\ttype: part.type,\n\t\t\tvalue: part.value\n\t\t};\n\t\tregistryEntries.push(registryEntry);\n\t});\n\n\tnew Registry({\n\t\thive: 'HKCU',\n\t\tkey: this.key\n\t}).create(function(err) {\n\t\tif (err && err.message !== 'ERROR_ALREADY_EXISTS') {\n\t\t\tcallback(err);\n\t\t} else {\n\t\t\tsetRegistryEntries(registryEntries, 0);\n\t\t}\n\t});\n\n\tfunction setRegistryEntries(registryEntries, index) {\n\t\tif (index < registryEntries.length) {\n\t\t\tconst registryEntry = registryEntries[index];\n\t\t\tnew Registry({\n\t\t\t\thive: 'HKCU',\n\t\t\t\tkey: registryEntry.key\n\t\t\t}).set(registryEntry.name, registryEntry.type, registryEntry.value, function(err) {\n\t\t\t\tif (err) {\n\t\t\t\t\tcallback(err);\n\t\t\t\t} else {\n\t\t\t\t\tsetRegistryEntries(registryEntries, index + 1);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tcallback();\n\t\t}\n\t}\n}", "CodeBleu_score": 35.7159502486585}, {"code": "register(callback){\n\t\tconst self = this;\n\tconst registryParts = [];\n\tfor (let i = 0; i < self.parts.length; i++) {\n\t\tconst part = self.parts[i];\n\t\tconst registryPart = {\n\t\t\thive: 'HKCU',\n\t\t\tkey: `${self.key}\\\\${part.key}`\n\t\t};\n\t\tregistryParts.push(registryPart);\n\t}\n\tnew Registry(registryParts[0]).set(self.parts[0].name, Registry.REG_SZ, self.parts[0].value, (err) => {\n\t\tif (err) {\n\t\t\tcallback(err);\n\t\t} else {\n\t\t\tif (registryParts.length > 1) {\n\t\t\t\tself.update(registryParts.slice(1), callback);\n\t\t\t} else {\n\t\t\t\tcallback();\n\t\t\t}\n\t\t}\n\t});\n}", "CodeBleu_score": 31.333801691385265}]}
{"instance_id": "35b1a1ac391a", "generation_result": [{"code": "showSaveDialog(options, callback){\n\t\n}", "CodeBleu_score": 2.8750960861215313}, {"code": "showSaveDialog(options, callback){\n\t\tif (typeof callback === 'function') {\n\t\t// Async version: pass options directly to Electron but set sane defaults\n\t\toptions = Object.assign({\n\t\t\ttitle: 'Save File',\n\t\t\tdefaultPath: remote.getCurrentWindow().getPath(),\n\t\t\tbuttonLabel: 'Save',\n\t\t\tmessage: 'Save file:'\n\t\t}, options);\n\t\tremote.dialog.showSaveDialog(remote.getCurrentWindow(), options, callback);\n\t} else {\n\t\t// Legacy sync version: options can only have `message`,\n\t\t// `detailedMessage` (optional), and buttons array or object (optional)\n\t\tlet { message, detailedMessage, buttons } = options;\n\n\t\tlet buttonLabels;\n\t\tif (!buttons) buttons = {};\n\t\tif (Array.isArray(buttons)) {\n\t\t\tbuttonLabels = buttons;\n\t\t} else {\n\t\t\tbuttonLabels = Object.keys(buttons);\n\t\t}\n\n\t\tconst chosen = remote.dialog.showSaveDialogSync(remote.getCurrentWindow(), {\n\t\t\ttitle: 'Save File',\n\t\t\tdefaultPath: remote.getCurrentWindow().getPath(),\n\t\t\tbuttonLabel: 'Save',\n\t\t\tmessage: 'Save file:',\n\t\t\tdetail: detailedMessage,\n\t\t\tbuttons: buttonLabels,\n\t\t\tnormalizeAccessKeys: true\n\t\t});\n\n\t\tif (Array.isArray(buttons)) {\n\t\t\treturn chosen;\n\t\t} else {\n\t\t\tconst callback = buttons[buttonLabels[chosen]];\n\t\t\tif (typeof callback === 'function') return callback();\n\t\t}\n\t}\n}", "CodeBleu_score": 50.87590066582277}, {"code": "showSaveDialog(options, callback){\n\t\n}", "CodeBleu_score": 2.8750960861215313}]}
{"instance_id": "a7e394aca19e", "generation_result": [{"code": "async restoreWindowDimensions(){\n\t\tconst dimensions = this.getDefaultWindowDimensions();\n\tif (this.isValidDimensions(dimensions)) {\n\t\tawait this.setWindowDimensions(dimensions);\n  } else {\n    console.warn(\n      'Invalid window dimensions detected, using default dimensions',\n      dimensions\n    );\n    await this.setWindowDimensions(dimensions);\n  }\n}", "CodeBleu_score": 26.09012774399083}, {"code": "async restoreWindowDimensions(){\n\t\n}", "CodeBleu_score": 2.79923555078453}, {"code": "async restoreWindowDimensions(){\n\t\tconst dimensions = this.getWindowDimensions();\n\tif (this.isValidDimensions(dimensions)) {\n\t\treturn dimensions;\n\t} else {\n\t\tthis.windowDimensions = this.getDefaultWindowDimensions();\n\t\tawait this.setWindowDimensions(this.windowDimensions);\n\t\treturn this.windowDimensions;\n  }\n}", "CodeBleu_score": 46.54670222850697}]}
{"instance_id": "c39fbfaa6502", "generation_result": [{"code": "installShellCommandsInteractively(){\n\t", "CodeBleu_score": 0.844498191678412}, {"code": "installShellCommandsInteractively(){\n\t\tconst installAtomCommand = this.installAtomCommandInteractively();\n\tconst installApmCommand = this.installApmCommandInteractively();\n\n\tconst installCommands = Promise.all([installAtomCommand, installApmCommand]);\n\tinstallCommands.then(() => {\n\t\tthis.applicationDelegate.confirm({\n\t\t\tmessage: 'Installation complete!',\n\t\t\tdetailedMessage: 'Shell commands have been installed to: ' + this.getInstallDirectory(),\n\t\t\tbuttons: ['OK']\n\t\t});\n\t}, (error) => {\n\t\tthis.applicationDelegate.confirm({\n\t\t\tmessage: 'Installation failed!',\n\t\t\tdetailedMessage: error,\n\t\t\tbuttons: ['OK']\n\t\t});\n\t});\n}", "CodeBleu_score": 29.56091165334136}, {"code": "installShellCommandsInteractively(){\n\t", "CodeBleu_score": 0.844498191678412}]}
{"instance_id": "09d527496128", "generation_result": [{"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\t\tif (process.platform !== 'darwin') {\n\t\treturn callback(new Error('Not on macOS'));\n\t}\n\n\tconst destination = path.join(this.getInstallDirectory(), commandName);\n\tfs.readlink(destination, (error, destinationPath) => {\n\t\tif (error && error.code !== 'ENOENT') {\n\t\t\treturn callback(error);\n\t\t}\n\n\t\tif (destinationPath !== commandPath) {\n\t\t\tif (askForPrivilege) {\n\t\t\t\treturn this.applicationDelegate.requestSingleInstanceAuthorization(error => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treturn callback(error);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.installCommand(commandPath, commandName, false, callback);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn fs.symlink(commandPath, destination, error => {\n\t\t\t\tif (error && error.code === 'EACCES') {\n\t\t\t\t\treturn callback(new Error('Permission denied. Please try again with sudo.'));\n\t\t\t\t}\n\n\t\t\t\tif (error) {\n\t\t\t\t\treturn callback(error);\n\t\t\t\t}\n\n\t\t\t\treturn callback(null, commandName);\n\t\t\t});\n\t\t}\n\n\t\treturn callback(null, commandName);\n\t});\n}", "CodeBleu_score": 53.14646890554584}, {"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\t\tif (process.platform !== 'darwin') {\n\t\treturn callback(null, null);\n\t}\n\n\tconst destination = path.join(this.getInstallDirectory(), commandName);\n\tfs.readlink(destination, 'utf8', (error, destinationPath) => {\n\t\tif (error && error.code !== 'ENOENT') {\n\t\t\treturn callback(error);\n\t\t}\n\n\t\tif (destinationPath !== commandPath) {\n\t\t\tconst createSymlink = () => {\n\t\t\t\tfs.symlink(commandPath, destination, 'file', error => {\n\t\t\t\t\tcallback(error, commandName);\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tif (error) {\n\t\t\t\tif (askForPrivilege) {\n\t\t\t\t\tthis.applicationDelegate.requestUserPrivilege(\n\t\t\t\t\t\t'admin',\n\t\t\t\t\t\tcreateSymlink,\n\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\tcallback(new Error('Permission denied'));\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tcallback(new Error('Permission denied'));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcreateSymlink();\n\t\t\t}\n\t\t} else {\n\t\t\tcallback(null, commandName);\n\t\t}\n\t});\n}", "CodeBleu_score": 54.133879902089966}, {"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\t\tif (process.platform !== 'darwin') {\n\t\treturn callback(new Error('Not on macOS'));\n\t}\n\n\tconst destination = path.join(this.getInstallDirectory(), commandName);\n\tfs.readlink(destination, 'utf8', (error, destinationPath) => {\n\t\tif (error && error.code !== 'ENOENT') {\n\t\t\treturn callback(error);\n\t\t}\n\n\t\tif (destinationPath !== commandPath) {\n\t\t\tif (askForPrivilege) {\n\t\t\t\treturn this.applicationDelegate.requestSingleInstanceAuthorization(error => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treturn callback(error);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.installCommand(commandPath, commandName, false, callback);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn fs.symlink(commandPath, destination, error => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treturn callback(error);\n\t\t\t\t\t}\n\n\t\t\t\t\tfs.chmod(destination, '755', error => {\n\t\t\t\t\t\tcallback(error, commandName);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tcallback(null, commandName);\n\t\t}\n\t});\n}", "CodeBleu_score": 57.05736830803476}]}
{"instance_id": "4807d5d43396", "generation_result": [{"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\t\n}", "CodeBleu_score": 3.0596291129758764}, {"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\tif (this.goalColumn != null) {\nconst oldScreenPosition = this.getScreenPosition();\nconst oldBufferPosition = this.getBufferPosition();\nconst newBufferPosition = this.buffer.clipPosition(\n  this.buffer.clipPosition([oldBufferPosition.row - rowCount, this.goalColumn], options),\n  options\n);\nconst newScreenPosition = this.editor.pixelPositionForBufferPosition(newBufferPosition);\nconst goalColumn = this.goalColumn;\nthis.setScreenPosition(newScreenPosition, options);\nthis.goalColumn = goalColumn;\n} else if (moveToEndOfSelection && this.selection.isEmpty()) {\nthis.setScreenPosition(this.selection.getScreenRange().start, options);\n} else {\nconst newScreenPosition = this.getScreenPosition();\nnewScreenPosition.row -= rowCount;\nthis.setScreenPosition(newScreenPosition, options);\n}\nthis.selection.clear();\n}", "CodeBleu_score": 31.8649699266226}, {"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\t\tif (this.goalColumn != null) {\n\t\tconst { row, column } = this.getScreenPosition();\n\t\tconst goalColumn = this.goalColumn;\n\t\tconst newRow = row - rowCount;\n\t\tconst newColumn = Math.min(goalColumn, this.editor.lineLengthForBufferRow(newRow));\n\t\tthis.setScreenPosition([newRow, newColumn], {\n\t\t\tautoscroll: false,\n\t\t\tskipSoftWrapIndentation: true\n\t\t});\n\t\tthis.goalColumn = column;\n\t\treturn;\n\t}\n\n\tif (moveToEndOfSelection && this.selection.isEmpty()) {\n\t\tconst row = this.selection.getHeadBufferPosition().row;\n\t\tconst newRow = Math.max(0, row - rowCount);\n\t\tthis.selection.setBufferRange([[newRow, 0], [newRow, Infinity]]);\n\t\tthis.selection.clearAutoscroll();\n\t\tthis.selection.autoscroll();\n\t\treturn;\n\t}\n\n\tconst newPosition = this.getBufferPosition().translate([rowCount, 0]);\n\tthis.setBufferPosition(newPosition, {\n\t\tautoscroll: false,\n\t\tskipSoftWrapIndentation: true\n\t});\n\tthis.selection.clearAutoscroll();\n\tthis.selection.autoscroll();\n}", "CodeBleu_score": 31.301465521737736}]}
{"instance_id": "a18da78a3351", "generation_result": [{"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\t\tconst decorationsByMarker = {};\n\tfor (const markerLayer of this.decorationCountsByLayer.keys()) {\n\t\tfor (const marker of markerLayer.findMarkers(\n\t\t\t{ intersectsScreenRowRange: [startScreenRow, endScreenRow - 1] }\n\t\t)) {\n\t\t\tif (!marker.isValid()) continue;\n\n\t\t\tconst decorations = this.decorationsByMarker.get(marker) || [];\n\t\t\tdecorationsByMarker[marker.id] = decorations;\n\t\t}\n\t}\n\treturn decorationsByMarker;\n}", "CodeBleu_score": 56.37930451326828}, {"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\tconst decorationsByMarker = new Map();\n\nthis.decorationCountsByLayer.forEach((count, markerLayer) => {\nconst markers = markerLayer.findMarkers({\nintersectsScreenRowRange: [startScreenRow, endScreenRow - 1]\n});\nconst layerDecorations = this.layerDecorationsByMarkerLayer.get(markerLayer);\nconst hasMarkerDecorations = this.markerDecorationCountsByLayer.get(markerLayer) > 0;\n\nfor (let i = 0; i < markers.length; i++) {\nconst marker = markers[i];\nif (!marker.isValid()) continue;\n\nlet decorationsForMarker = decorationsByMarker.get(marker);\nif (decorationsForMarker == null) {\ndecorationsForMarker = [];\ndecorationsByMarker.set(marker, decorationsForMarker);\n}\n\nif (layerDecorations) {\nlayerDecorations.forEach(layerDecoration => {\nconst properties = layerDecoration.getPropertiesForMarker(marker) || layerDecoration.getProperties();\ndecorationsForMarker.push(properties);\n});\n}\n\nif (hasMarkerDecorations) {\nconst decorationsForMarker = this.decorationsByMarker.get(marker);\nif (decorationsForMarker) {\ndecorationsForMarker.forEach(decoration => {\ndecorationsForMarker.push(decoration.getProperties());\n});\n}\n}\n}\n});\n\nreturn decorationsByMarker;\n}", "CodeBleu_score": 36.25831659792077}, {"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\t\tconst decorationsByMarker = new Map();\n\tthis.decorationCountsByLayer.forEach((count, markerLayer) => {\n\t\tconst markers = markerLayer.findMarkers({\n\t\t\tintersectsScreenRowRange: [startScreenRow, endScreenRow - 1],\n\t\t});\n\t\tconst layerDecorations = this.layerDecorationsByMarkerLayer.get(markerLayer);\n\t\tconst hasMarkerDecorations =\n\t\t\tthis.markerDecorationCountsByLayer.get(markerLayer) > 0;\n\n\t\tfor (let i = 0; i < markers.length; i++) {\n\t\t\tconst marker = markers[i];\n\t\t\tif (!marker.isValid()) continue;\n\n\t\t\tlet decorationsForMarker = decorationsByMarker.get(marker);\n\t\t\tif (decorationsForMarker == null) {\n\t\t\t\tdecorationsForMarker = [];\n\t\t\t\tdecorationsByMarker.set(marker, decorationsForMarker);\n\t\t\t}\n\n\t\t\tif (layerDecorations) {\n\t\t\t\tlayerDecorations.forEach(layerDecoration => {\n\t\t\t\t\tconst properties =\n\t\t\t\t\t\tlayerDecoration.getPropertiesForMarker(marker) ||\n\t\t\t\t\t\tlayerDecoration.getProperties();\n\t\t\t\t\tdecorationsForMarker.push(properties);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (hasMarkerDecorations) {\n\t\t\t\tconst decorationsForMarker = this.decorationsByMarker.get(marker);\n\t\t\t\tif (decorationsForMarker) {\n\t\t\t\t\tdecorationsForMarker.forEach(decoration => {\n\t\t\t\t\t\tdecorationsForMarker.push(decoration.getProperties());\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn decorationsByMarker;\n}", "CodeBleu_score": 35.57004100080307}]}
{"instance_id": "950f6b74f379", "generation_result": [{"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\t\tif (markerLayer.isDestroyed()) {\n\t\tconst error = new Error('Cannot decorate a destroyed marker layer');\n\t\terror.metadata = { markerLayerIsDestroyed: markerLayer.isDestroyed() };\n\t\tif (markerLayer.destroyStackTrace != null) {\n\t\t\terror.metadata.destroyStackTrace = markerLayer.destroyStackTrace;\n\t\t}\n\t\tthrow error;\n\t}\n\tmarkerLayer = this.displayLayer\n\t\t.getMarkerLayer(markerLayer.id)\n\t\t.getMarkerLayer(markerLayer.id);\n\tconst decoration = new LayerDecoration(markerLayer, this, decorationParams);\n\tlet decorationsForMarkerLayer = this.layerDecorationsByMarkerLayer.get(markerLayer);\n\tif (!decorationsForMarkerLayer) {\n\t\tdecorationsForMarkerLayer = new Set();\n\t\tthis.layerDecorationsByMarkerLayer.set(markerLayer, decorationsForMarkerLayer);\n\t}\n\tdecorationsForMarkerLayer.add(decoration);\n\tthis.observeDecoratedLayer(markerLayer, true);\n\tthis.editor.didAddDecoration(decoration);\n\tthis.emitDidUpdateDecorations();\n\tthis.emitter.emit('did-add-decoration', decoration);\n\treturn decoration;\n}", "CodeBleu_score": 63.43905796430855}, {"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\t\tif (markerLayer.isDestroyed()) {\n\t\tconst error = new Error('Cannot decorate a destroyed marker layer');\n\t\terror.metadata = { markerLayerIsDestroyed: markerLayer.isDestroyed() };\n\t\tif (markerLayer.destroyStackTrace != null) {\n\t\t\terror.metadata.destroyStackTrace = markerLayer.destroyStackTrace;\n\t\t}\n\t\tthrow error;\n\t}\n\tmarkerLayer = this.displayLayer\n\t\t.getMarkerLayer(markerLayer.id)\n\t\t.getMarkerLayer(markerLayer.id);\n\tconst decoration = new LayerDecoration(markerLayer, this, decorationParams);\n\tlet decorationsForMarkerLayer = this.layerDecorationsByMarkerLayer.get(\n\t\tmarkerLayer\n\t);\n\tif (!decorationsForMarkerLayer) {\n\t\tdecorationsForMarkerLayer = new Set();\n\t\tthis.layerDecorationsByMarkerLayer.set(markerLayer, decorationsForMarkerLayer);\n\t}\n\tdecorationsForMarkerLayer.add(decoration);\n\tthis.observeDecoratedLayer(markerLayer, true);\n\tthis.editor.didAddDecoration(decoration);\n\tthis.emitDidUpdateDecorations();\n\tthis.emitter.emit('did-add-decoration', decoration);\n\treturn decoration;\n}", "CodeBleu_score": 63.82994801264107}, {"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\t\tif (markerLayer.isDestroyed()) {\n\t\tconst error = new Error('Cannot decorate a destroyed marker layer');\n\t\terror.metadata = { markerLayerIsDestroyed: markerLayer.isDestroyed() };\n\t\tif (markerLayer.destroyStackTrace != null) {\n\t\t\terror.metadata.destroyStackTrace = markerLayer.destroyStackTrace;\n\t\t}\n\t\tif (\n\t\t\tmarkerLayer.bufferMarkerLayer != null &&\n\t\t\tmarkerLayer.bufferMarkerLayer.destroyStackTrace != null\n\t\t) {\n\t\t\terror.metadata.destroyStackTrace =\n\t\t\t\tmarkerLayer.bufferMarkerLayer.destroyStackTrace;\n\t\t}\n\t\tthrow error;\n\t}\n\tmarkerLayer = this.displayLayer\n\t\t.getMarkerLayer(markerLayer.id)\n\t\t.getMarkerLayer(markerLayer.id);\n\tconst decoration = new LayerDecoration(markerLayer, this, decorationParams);\n\tlet decorationsForMarkerLayer = this.layerDecorationsByMarkerLayer.get(\n\t\tmarkerLayer\n\t);\n\tif (!decorationsForMarkerLayer) {\n\t\tdecorationsForMarkerLayer = new Set();\n\t\tthis.layerDecorationsByMarkerLayer.set(\n\t\t\tmarkerLayer,\n\t\t\tdecorationsForMarkerLayer\n\t\t);\n\t}\n\tdecorationsForMarkerLayer.add(decoration);\n\tthis.observeDecoratedLayer(markerLayer, true);\n\tthis.editor.didAddDecoration(decoration);\n\tthis.emitDidUpdateDecorations();\n\tthis.emitter.emit('did-add-decoration', decoration);\n\treturn decoration;\n}", "CodeBleu_score": 59.880575707238016}]}
{"instance_id": "ab015a5cc75d", "generation_result": [{"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\t\tif (this.decorationCountsByLayer.has(layer)) {\n\t\tthis.decorationCountsByLayer.set(layer, this.decorationCountsByLayer.get(layer) + 1);\n\t} else {\n\t\tthis.decorationCountsByLayer.set(layer, 1);\n\t\tconst observer = layer.onDidUpdate(() => {\n\t\t\tthis.decorationDidChange(layer, observer);\n\t\t});\n\t\tthis.decorationObserversByLayer.set(layer, observer);\n\t}\n\tif (isMarkerDecoration) {\n\t\tif (this.markerDecorationCountsByLayer.has(layer)) {\n\t\t\tthis.markerDecorationCountsByLayer.set(layer, this.markerDecorationCountsByLayer.get(layer) + 1);\n\t\t} else {\n\t\t\tthis.markerDecorationCountsByLayer.set(layer, 1);\n\t\t}\n\t}\n}", "CodeBleu_score": 43.93980115177203}, {"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\t\tthis.decorationCountsByLayer.set(layer, (this.decorationCountsByLayer.get(layer) || 0) + 1);\n\tif (isMarkerDecoration) {\n\t\tthis.markerDecorationCountsByLayer.set(\n\t\t\tlayer,\n\t\t\t(this.markerDecorationCountsByLayer.get(layer) || 0) + 1\n\t\t);\n\t}\n\n\tif (!this.decorationObserversByLayer.has(layer)) {\n\t\tconst observer = layer.onDidUpdate(() => {\n\t\t\tthis.emitDidUpdateDecorations();\n\t\t});\n\t\tthis.decorationObserversByLayer.set(layer, observer);\n\t}\n}", "CodeBleu_score": 65.10443186753585}, {"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\t\tlet decorationCountsByLayer = this.decorationCountsByLayer;\n\tif (!decorationCountsByLayer.has(layer)) {\n\t\tdecorationCountsByLayer.set(layer, 0);\n\t}\n\tdecorationCountsByLayer.set(layer, decorationCountsByLayer.get(layer) + 1);\n\tif (isMarkerDecoration) {\n\t\tlet markerDecorationCountsByLayer = this.markerDecorationCountsByLayer;\n\t\tif (!markerDecorationCountsByLayer.has(layer)) {\n\t\t\tmarkerDecorationCountsByLayer.set(layer, 0);\n\t\t}\n\t\tmarkerDecorationCountsByLayer.set(layer, markerDecorationCountsByLayer.get(layer) + 1);\n\t}\n\tlet disposable = layer.onDidUpdate(() => {\n\t\tthis.emitDidUpdateDecorations();\n\t});\n\tthis.decorationDisposablesByLayer.set(layer, disposable);\n}", "CodeBleu_score": 39.436467819471744}]}
{"instance_id": "9d7f091a1b67", "generation_result": [{"code": "finishLoading(){\n\t\tthis.measure('loadTime', () => {\n\t\tthis.path = this.packageManager.resourcePathForKey(this.name);\n\t\tModuleCache.add(this.name, this.path, this.metadata);\n\t});\n\n\tif (this.metadata.stylesheets) {\n\t\tthis.measure('stylesheetsLoadTime', () => {\n\t\t\tthis.loadStylesheets();\n\t\t});\n\t}\n\n\tthis.measure('mainModuleLoadTime', () => {\n\t\tthis.mainModulePath = this.resolveMainModulePath();\n\t});\n\n\tthis.preload();\n}", "CodeBleu_score": 38.08318885350051}, {"code": "finishLoading(){\n\t\tthis.measure('loadTime', () => {\n\t\tthis.path = path.join(this.packageManager.resourcePath, this.path);\n\t\tthis.mainModule = this.packageManager.resolvePackagePath(this.mainModulePath);\n\t\tthis.mainModulePath = this.packageManager.resolvePackagePath(this.mainModulePath);\n\t\tthis.loadStylesheets();\n\t\tthis.loadGrammarsSync();\n\t\tthis.loadSnippets();\n\t\tthis.loadMenus();\n\t\tthis.registerDeserializerMethods();\n\t\tthis.activateCoreStartupServices();\n\t\tthis.registerURIHandler();\n\t\tthis.configSchemaRegisteredOnLoad = this.registerConfigSchemaFromMetadata();\n\t\tthis.requireMainModule();\n\t\tthis.settingsPromise = this.loadSettings();\n\t\tthis.activationDisposables = new CompositeDisposable();\n\t\tthis.activateKeymaps();\n\t\tthis.activateMenus();\n\t\tfor (let settings of this.settings) {\n\t\t\tsettings.activate(this.config);\n\t\t}\n\t\tthis.settingsActivated = true;\n\t});\n}", "CodeBleu_score": 38.59601469989562}, {"code": "finishLoading(){\n\t\t// Add package path to module search path\n\tModuleCache.add(this.path, this.metadata);\n\tthis.measure('loadTime', () => {\n\t\tthis.loadStylesheets();\n\t\tthis.loadMainModule();\n\t});\n}", "CodeBleu_score": 33.89028473265727}]}
{"instance_id": "a06630788868", "generation_result": [{"code": "dblclickHandler(){\n\t", "CodeBleu_score": 3.4649816559029003}, {"code": "dblclickHandler(){\n\t.sourceCode .javascript}", "CodeBleu_score": 3.5610181062746613}, {"code": "dblclickHandler(){\n\t.sourceCode .javascript}", "CodeBleu_score": 3.5610181062746613}]}
{"instance_id": "fd29bc5fd921", "generation_result": [{"code": "_openSettingsWindow (category){\n\tif (this.settingWindow) {\nthis.settingWindow.webContents.send('mt::change-settings-category', category)\nif (process.platform === 'darwin') {\nthis.settingWindow.show()\nthis.settingWindow.focus()\n} else {\nthis.settingWindow.moveTop()\n}\n} else {\nthis.settingWindow = new SettingWindow(this._accessor)\nthis.settingWindow.createWindow(category)\n}\n}", "CodeBleu_score": 25.541362996438334}, {"code": "_openSettingsWindow (category){\n\t\tconst { _windowManager } = this\n\tconst settingsWindow = _windowManager.findSettingsWindow()\n\n\tif (settingsWindow) {\n\t\tsettingsWindow.webContents.send('mt::change-tab', category)\n\t\tif (process.platform === 'darwin') {\n\t\t\tsettingsWindow.show()\n\t\t} else {\n\t\t\tsettingsWindow.focus()\n\t\t}\n\t} else {\n\t\tthis._createSettingWindow(category)\n\t}\n}", "CodeBleu_score": 36.6247115130392}, {"code": "_openSettingsWindow (category){\n\tconst { _windowManager } = this\n\nif (_windowManager.windowCount) {\n// Settings window exists\nconst setting = _windowManager.getSettingWindow()\nif (setting) {\nsetting.webContents.send('mt::change-category', category)\nif (process.platform === 'darwin') {\n// On macOS, the window needs to be brought to the top to make the category change visible.\nsetting.focus()\n} else {\n// On other platforms, the window can be moved to the top, but the focus needs to be set to the window to make the category change visible.\nsetting.moveTop()\nsetting.focus()\n}\n}\n} else {\n// Settings window does not exist\nthis._createSettingWindow(category)\n}\n}", "CodeBleu_score": 35.813394396854484}]}
{"instance_id": "b9c797e2b719", "generation_result": [{"code": "findBestWindowToOpenIn (fileList){\n\t", "CodeBleu_score": 0.8594805444068438}, {"code": "findBestWindowToOpenIn (fileList){\n\t", "CodeBleu_score": 0.8594805444068438}, {"code": "findBestWindowToOpenIn (fileList){\n\t", "CodeBleu_score": 0.8594805444068438}]}
{"instance_id": "bcd3eb76bbac", "generation_result": [{"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\t\tlet encoding = 'utf8'\n\tlet isBom = false\n\n\t// Check for BOM encodings\n\tfor (const enc in BOM_ENCODINGS) {\n\t\tif (checkSequence(buffer, BOM_ENCODINGS[enc])) {\n\t\t\tencoding = enc\n\t\t\tisBom = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\t// Auto guess encoding\n\tif (autoGuessEncoding) {\n\t\tconst guessedEncoding = ced.detect(buffer)\n\t\tencoding = guessedEncoding.toLowerCase()\n\t\tif (encoding in CED_ICONV_ENCODINGS) {\n\t\t\tencoding = CED_ICONV_ENCODINGS[encoding]\n\t\t}\n\t}\n\n\treturn { encoding, isBom }\n}", "CodeBleu_score": 46.135353632978905}, {"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\t\tlet encoding = 'utf8'\n\tlet isBom = false\n\n\tfor (const bomEncoding in BOM_ENCODINGS) {\n\t\tconst bomSequence = BOM_ENCODINGS[bomEncoding]\n\n\t\tif (checkSequence(buffer, bomSequence)) {\n\t\t\tencoding = bomEncoding\n\t\t\tisBom = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif (autoGuessEncoding) {\n\t\tconst guessedEncoding = ced(buffer)\n\t\tconst guessedEncodingLower = guessedEncoding.toLowerCase()\n\n\t\tif (guessedEncodingLower in CED_ICONV_ENCODINGS) {\n\t\t\tencoding = CED_ICONV_ENCODINGS[guessedEncodingLower]\n\t\t} else {\n\t\t\tencoding = guessedEncoding\n\t\t}\n\t}\n\n\treturn { encoding, isBom }\n}", "CodeBleu_score": 44.293325869234565}, {"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\t\tlet encoding = 'utf8'\n\tlet isBom = false\n\n\t// Check for BOM\n\tfor (const enc in BOM_ENCODINGS) {\n\t\tif (checkSequence(buffer, BOM_ENCODINGS[enc])) {\n\t\t\tencoding = enc\n\t\t\tisBom = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\t// Auto guess encoding\n\tif (autoGuessEncoding) {\n\t\tconst guess = ced.guess(buffer)\n\t\tif (guess.confidence > 0.9) {\n\t\t\tencoding = guess.encoding\n\t\t} else {\n\t\t\tencoding = guess.encoding.toLowerCase()\n\t\t}\n\t}\n\n\treturn { encoding, isBom }\n}", "CodeBleu_score": 43.15644179215396}]}
{"instance_id": "a2525337ad24", "generation_result": [{"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\t\tconst { encoding, lineEnding } = options\n\tconst lineEndingStr = getLineEnding(lineEnding)\n\tconst encodingStr = encoding || 'utf8'\n\n\t// Convert line endings if needed.\n\tif (lineEndingStr !== LINE_ENDING_REG.exec(content)[0]) {\n\t\tcontent = convertLineEndings(content, lineEnding)\n\t}\n\n\t// Convert to buffer.\n\tconst buffer = iconv.encode(content, encodingStr)\n\n\t// Write the buffer to the file.\n\treturn writeFile(pathname, buffer)\n}", "CodeBleu_score": 47.94587805442821}, {"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\t\n  const { lineEnding, encoding, bom } = options\n  const lineEndingOption = lineEnding || 'lf'\n  const encodingOption = encoding || 'utf8'\n  const bomOption = bom || false\n  const ext = path.extname(pathname)\n  const isMarkdown = isMarkdownFile(pathname)\n  const isMarkdownExt = ext === '.md'\n  const isMarkdownPath = isMarkdown || isMarkdownExt\n  const isDir = isDirectory2(pathname)\n  if (isDir) {\n    console.error(`[ERROR] Cannot write to directory \\\"${pathname}\\\".`)\n  } else if (isMarkdownPath) {\n    const resolved = normalizeAndResolvePath(pathname)\n    if (resolved) {\n      const lineEnding = getLineEnding(lineEndingOption)\n      const text = convertLineEndings(content, lineEnding)\n      const buffer = iconv.encode(text, encodingOption)\n      if (bomOption) {\n        buffer.write(iconv.encode(BOM_UTF8, encodingOption))\n      }\n      return writeFile(resolved, buffer)\n    } else {\n      console.error(`[ERROR] Cannot resolve \\\"${pathname}\\\".`)\n    }\n  } else {\n    console.error(`[ERROR] Cannot write to \\\"${pathname}\\\". File extension must be \\\".md\\\".`)\n  }\n}", "CodeBleu_score": 28.361775598168787}, {"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\t\n  const { encoding, lineEnding, bom } = options\n  let { ext } = options\n\n  // Use the default markdown file extension if not specified.\n  if (!ext) {\n    ext = '.md'\n  }\n\n  // Extract line ending and encoding options, defaulting to LF if not specified.\n  if (!lineEnding) {\n    lineEnding = 'lf'\n  }\n  if (!encoding) {\n    encoding = 'utf8'\n  }\n\n  // Convert line endings if needed.\n  if (lineEnding !== 'lf') {\n    content = convertLineEndings(content, lineEnding)\n  }\n\n  // Guess the encoding if needed.\n  if (encoding === 'auto') {\n    encoding = guessEncoding(content)\n  }\n\n  // Encode the buffer.\n  const buffer = iconv.encode(content, encoding)\n  if (bom) {\n    buffer.unshift(iconv.encode(BOM_UTF8, encoding))\n  }\n\n  // Write the buffer to the file.\n  return writeFile(pathname, buffer)\n}", "CodeBleu_score": 40.16200955446557}]}
{"instance_id": "1c01cc82b2d4", "generation_result": [{"code": "export const registerKeyboardListeners = () =>{\n\t\tipcMain.handle('getKeyboardInfo', async () => {\n\t\treturn getKeyboardInfo()\n\t})\n\n\tipcMain.handle('dumpKeyboardInfo', async () => {\n\t\tconst { layout, keymap } = getKeyboardInfo()\n\t\tconst tempFile = path.join(os.tmpdir(), 'keyboard-layout-info.json')\n\t\ttry {\n\t\t\tawait fsPromises.writeFile(tempFile, JSON.stringify({ layout, keymap }, null, 2))\n\t\t\tshell.openPath(tempFile)\n\t\t} catch (error) {\n\t\t\tlog.error(error)\n\t\t}\n\t})\n}", "CodeBleu_score": 41.696369638613405}, {"code": "export const registerKeyboardListeners = () =>{\n\t\tipcMain.handle('get-keyboard-info', async () => {\n\t\treturn getKeyboardInfo()\n\t})\n\n\tipcMain.handle('dump-keyboard-info', async (event, { filePath }) => {\n\t\ttry {\n\t\t\tconst tempFilePath = await fsPromises.mkstemp(path.join(os.tmpdir(), 'keyboard-layout-'))\n\t\t\tawait fsPromises.writeFile(tempFilePath[1], JSON.stringify(getKeyboardInfo(), null, 2))\n\t\t\tshell.openPath(tempFilePath[1])\n\t\t} catch (error) {\n\t\t\tlog.error(error)\n\t\t}\n\t})\n}", "CodeBleu_score": 42.7837211250454}, {"code": "export const registerKeyboardListeners = () =>{\n\t\tipcMain.handle('getKeyboardInfo', async () => getKeyboardInfo())\n\tipcMain.handle('dumpKeyboardInfo', async (event, filePath) => {\n\t\tconst { layout, keymap } = getKeyboardInfo()\n\t\ttry {\n\t\t\tconst tmpFilePath = `${filePath}.tmp`\n\t\t\tawait fsPromises.writeFile(tmpFilePath, JSON.stringify({ layout, keymap }, null, 2))\n\t\t\tawait shell.openPath(tmpFilePath)\n\t\t} catch (err) {\n\t\t\tlog.error('Error dumping keyboard info to file:', err)\n\t\t}\n\t})\n}", "CodeBleu_score": 35.68521775101619}]}
{"instance_id": "fa0bb388c99d", "generation_result": [{"code": "_prepareKeyMapper (){\n\t\tkeyboardLayoutMonitor.start()\n\tkeyboardLayoutMonitor.addListener('updated', (layout) => {\n\t\tlog.debug('Keyboard layout changed to', layout)\n\t\tthis._updateKeyMapper()\n\t})\n\tthis._updateKeyMapper()\n}", "CodeBleu_score": 15.543188933351182}, {"code": "_prepareKeyMapper (){\n\t\tconst { userKeybindings } = this\n\tconst { keyboardLayoutMonitor } = getKeyboardInfo()\n\tconst { setKeyboardLayout, setKeymap } = keyboardLayoutMonitor\n\n\t// Set keyboard layout and keymap\n\tconst keyboardLayout = keyboardLayoutMonitor.getLayout()\n\tconst keymap = keyboardLayoutMonitor.getKeymap()\n\tsetKeyboardLayout(keyboardLayout)\n\tsetKeymap(keymap)\n\n\t// Log keyboard layout and keymap changes\n\tif (this.appEnvironment.isDevMode) {\n\t\tkeyboardLayoutMonitor.addListener((layout) => {\n\t\t\tlog.debug('Keyboard layout changed to', layout)\n\t\t})\n\t\tkeyboardLayoutMonitor.addListener((keymap) => {\n\t\t\tlog.debug('Keyboard keymap changed to', keymap)\n\t\t})\n\t}\n\n\t// Update key mapper\n\tfor (const [id, accelerator] of this.keys) {\n\t\tif (userKeybindings.has(id)) {\n\t\t\tconst userAccelerator = userKeybindings.get(id)\n\t\t\tif (userAccelerator) {\n\t\t\t\tif (isValidElectronAccelerator(userAccelerator)) {\n\t\t\t\t\tconst userLayout = userAccelerator.split('+')[0]\n\t\t\t\t\tconst userKeymap = userAccelerator.split('+')[1]\n\t\t\t\t\tif (userLayout === keyboardLayout && userKeymap === keymap) {\n\t\t\t\t\t\tthis.keys.set(id, userAccelerator)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 19.926478623773008}, {"code": "_prepareKeyMapper (){\n\t\tconst { keyboardLayoutMonitor } = this\n\tkeyboardLayoutMonitor.on('updated', (layout) => {\n\t\tconst { keyboardLayout, keymap } = getKeyboardInfo(layout)\n\t\tlog.info(`Keyboard layout changed to \"${keyboardLayout} - ${keymap}\".`)\n\t\tthis.keys = this.getDefaultKeybindings()\n\t\tthis._prepareKeyMapper()\n\t})\n\tkeyboardLayoutMonitor.start()\n}", "CodeBleu_score": 25.79101112394836}]}
{"instance_id": "0438f43329c9", "generation_result": [{"code": "fixSystemConfig (){\n\t", "CodeBleu_score": 0.6435209714972053}, {"code": "fixSystemConfig (){\n\tconst systemConfig = this.systemConfig\nconst userConfig = this.userConfig\nconst proxyConfig = userConfig.get('proxy')\nconst noProxy = proxyConfig.enable && proxyConfig.server === EMPTY_STRING\nconst systemProxy = systemConfig.get('all-proxy')\nconst systemNoProxy = systemConfig.get('no-proxy')\nconst userProxy = proxyConfig.server\nconst userBypass = proxyConfig.bypass\nconst userProxyScope = proxyConfig.scope\nconst userProxyBypass = reduceTrackerString(userBypass)\nconst systemProxyBypass = reduceTrackerString(systemNoProxy)\nconst systemProxyScope = PROXY_SCOPE_OPTIONS.indexOf(systemConfig.get('all-proxy-group'))\n\n// Remove any unrecognized aria2c options.\nconst systemConfigKeys = Object.keys(systemConfig.store)\nfor (const key of systemConfigKeys) {\nif (\n!Object.keys(separateConfig(systemConfig.store)).includes(key) &&\n!Object.keys(separateConfig(userConfig.store)).includes(key)\n) {\nsystemConfig.delete(key)\n}\n}\n\n// Update the system proxy settings if the user proxy settings are valid.\nif (userProxy && !noProxy) {\nsystemConfig.set('all-proxy', userProxy)\nsystemConfig.set('all-proxy-user', userProxy)\nsystemConfig.set('all-proxy-passwd', EMPTY_STRING)\nsystemConfig.set('all-proxy-group', PROXY_SCOPES[userProxyScope])\nsystemConfig.set('no-proxy', userProxyBypass)\n}\n\n// Address the 'spawn ENAMETOOLONG' issue on Windows.\nif (is.windows() && systemProxyBypass && systemProxyScope === PROXY_SCOPES.GLOBAL) {\nsystemConfig.set('no-proxy', systemProxyBypass)\n}\n\n// Update the system tracker configuration.\nconst systemTracker = systemConfig.get('bt-tracker')\nif (systemTracker && systemTracker !== EMPTY_STRING) {\nsystemConfig.set('bt-tracker', reduceTrackerString(systemTracker))\n}\n}", "CodeBleu_score": 26.40866641848024}, {"code": "fixSystemConfig (){\n\tconst systemConfig = this.systemConfig\nconst userConfig = this.userConfig\nconst userProxy = userConfig.get('proxy')\n\n// Remove any unrecognized options from the aria2c configuration\nObject.keys(systemConfig.store).forEach((key) => {\nif (!Object.keys(systemConfig.defaults).includes(key)) {\nsystemConfig.delete(key)\n}\n})\n\n// If user proxy is enabled and set, update the system proxy settings\nif (userProxy.enable && userProxy.server) {\nconst [proxyServer, proxyBypass] = separateConfig(userProxy.server, userProxy.bypass)\n\nsystemConfig.set('all-proxy', proxyServer)\nsystemConfig.set('no-proxy', proxyBypass)\n}\n\n// Address the 'spawn ENAMETOOLONG' issue on Windows by reducing the tracker string length\nconst trackerSource = userConfig.get('tracker-source')\nconst tracker = reduceTrackerString(trackerSource)\nsystemConfig.set('bt-tracker', tracker)\n}", "CodeBleu_score": 36.49066935118645}]}
{"instance_id": "6d6fef58cde3", "generation_result": [{"code": "closeClient (){\n\tif (client) {\ntry {\nclient.destroy()\nclient = null\n} catch (err) {\nlogger.warn('[Motrix] UPnPManager closeClient error: ', err.message)\n}\n}\n}", "CodeBleu_score": 26.802934586849997}, {"code": "closeClient (){\n\t\tif (client) {\n\t\ttry {\n\t\t\tclient.destroy()\n\t\t\tclient = null\n\t\t} catch (err) {\n\t\t\tlogger.warn('[Motrix] UPnPManager closeClient failed, error: ', err.message)\n\t\t}\n\t}\n}", "CodeBleu_score": 27.650841283815197}, {"code": "closeClient (){\n\t\tif (client) {\n\t\ttry {\n\t\t\tclient.destroy()\n\t\t\tclient = null\n\t\t} catch (err) {\n\t\t\tlogger.warn('[Motrix] UPnPManager closeClient error: ', err)\n\t\t}\n\t}\n}", "CodeBleu_score": 57.17079432543717}]}
{"instance_id": "b32ad6f9757b", "generation_result": [{"code": "getTouchBarByPage (page){\n\t\tlet touchBar = this.bars[page]\n\tif (!touchBar) {\n\t\ttry {\n\t\t\tconst template = require(`../menus/touchBar.json`)\n\t\t\ttouchBar = new TouchBar(this.build(template))\n\t\t\tthis.bars[page] = touchBar\n\t\t} catch (e) {\n\t\t\tlogger.error(e)\n\t\t}\n\t}\n\treturn touchBar\n}", "CodeBleu_score": 39.77774553719199}, {"code": "getTouchBarByPage (page){\n\t\tlet bar = this.bars[page.name]\n\tif (!bar) {\n\t\ttry {\n\t\t\tbar = new TouchBar({ items: this.build(this.template) })\n\t\t\tthis.bars[page.name] = bar\n\t\t} catch (error) {\n\t\t\tlogger.error(error)\n\t\t}\n\t}\n\treturn bar\n}", "CodeBleu_score": 43.33654047023917}, {"code": "getTouchBarByPage (page){\n\t\tconst { bars } = this\n\tlet touchBar = bars[page]\n\tif (touchBar) {\n\t\treturn touchBar\n\t}\n\ttry {\n\t\tconst template = this.template\n\t\tconst items = this.build(template)\n\t\ttouchBar = new TouchBar({ items })\n\t\tbars[page] = touchBar\n\t} catch (err) {\n\t\tlogger.error('Failed to create TouchBar', err)\n\t}\n\treturn touchBar\n}", "CodeBleu_score": 44.434454324747406}]}
{"instance_id": "f860bf9bf687", "generation_result": [{"code": "handleWindowClose (pageOptions, page, window){\n\tconst { bindCloseToHide } = pageOptions\nconst handleClose = () => {\nif (bindCloseToHide && !this.willQuit) {\nevent.preventDefault()\nwindow.hide()\n} else if (window.isFullScreen()) {\nwindow.once('leave-full-screen', () => {\nwindow.hide()\n})\nwindow.setFullScreen(false)\n} else {\nwindow.hide()\n}\n}\nwindow.on('close', handleClose)\n}", "CodeBleu_score": 47.34901549919124}, {"code": "handleWindowClose (pageOptions, page, window){\n\t\tconst { bindCloseToHide } = pageOptions\n\twindow.on('close', (event) => {\n\t\tif (this.willQuit) {\n\t\t\treturn\n\t\t}\n\n\t\tif (bindCloseToHide) {\n\t\t\tevent.preventDefault()\n\t\t\twindow.hide()\n\t\t} else {\n\t\t\tif (window.isFullScreen()) {\n\t\t\t\twindow.once('leave-full-screen', () => {\n\t\t\t\t\twindow.hide()\n\t\t\t\t})\n\t\t\t\twindow.setFullScreen(false)\n\t\t\t} else {\n\t\t\t\twindow.hide()\n\t\t\t}\n\t\t}\n\n\t\tconst bounds = window.getBounds()\n\t\tthis.emit('window-closed', { page, bounds })\n\t})\n}", "CodeBleu_score": 61.974442833164886}, {"code": "handleWindowClose (pageOptions, page, window){\n\t\twindow.on('close', (event) => {\n\t\tif (pageOptions.bindCloseToHide && !this.willQuit) {\n\t\t\tevent.preventDefault()\n\t\t\twindow.hide()\n\t\t} else if (window.isFullScreen()) {\n\t\t\twindow.setFullScreen(false)\n\t\t}\n\t\tthis.emit('window-closed', { page, bounds: window.getBounds() })\n\t})\n}", "CodeBleu_score": 52.40019355035124}]}
{"instance_id": "ae062f5e98e3", "generation_result": [{"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst appPath = app.getAppPath()\n\t\tconst appName = app.getName()\n\t\tconst dest = '/Applications'\n\t\tconst destPath = `${dest}/${appName}.app`\n\t\tconst destExists = existsSync(destPath)\n\t\tconst appInApplicationsFolder = appPath.startsWith(destPath)\n\t\tconst move = () => {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\ttry {\n\t\t\t\t\tif (destExists && appInApplicationsFolder) {\n\t\t\t\t\t\tresolve()\n\t\t\t\t\t} else {\n\t\t\t\t\t\tshell.moveItemToTrash(appPath)\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tshell.moveItemToTrash(destPath)\n\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\tshell.moveItemToTrash(appPath)\n\t\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tshell.moveItemToApplications(appPath)\n\t\t\t\t\t\t\t\t\t\tresolve()\n\t\t\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t\t\treject(err)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}, 1000)\n\t\t\t\t\t\t\t}, 1000)\n\t\t\t\t\t\t}, 1000)\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\treject(err)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\tmove()\n\t\t\t.then(() => {\n\t\t\t\tresolve()\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tif (errorMsg) {\n\t\t\t\t\treject(errorMsg)\n\t\t\t\t} else {\n\t\t\t\t\treject(err)\n\t\t\t\t}\n\t\t\t})\n\t})\n}", "CodeBleu_score": 47.97110899926357}, {"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst appPath = app.getAppPath()\n\t\tconst appName = app.getName()\n\t\tconst appNewPath = resolve(\n\t\t\t'/Applications',\n\t\t\tappName\n\t\t)\n\t\tconst moveApp = () => {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tconst move = () => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst result = moveFile(appPath, appNewPath)\n\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\tresolve()\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treject(new Error('Failed to move the application to the Applications folder.'))\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treject(error)\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (appPath !== appNewPath) {\n\t\t\t\t\tmove()\n\t\t\t\t} else {\n\t\t\t\t\tresolve()\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tconst moveAppToApplicationsFolder = () => {\n\t\t\tmoveApp()\n\t\t\t\t.then(() => {\n\t\t\t\t\tresolve()\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tif (errorMsg !== '') {\n\t\t\t\t\t\tlogger.error(errorMsg)\n\t\t\t\t\t}\n\t\t\t\t\treject(error)\n\t\t\t\t})\n\t\t}\n\n\t\tif (is.macOS()) {\n\t\t\tconst isRunningInDmg = appPath.startsWith('/Volumes/')\n\t\t\tif (isRunningInDmg) {\n\t\t\t\tmoveAppToApplicationsFolder()\n\t\t\t} else {\n\t\t\t\tresolve()\n\t\t\t}\n\t\t} else {\n\t\t\tresolve()\n\t\t}\n\t})\n}", "CodeBleu_score": 48.28955592547573}, {"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\t\treturn new Promise((resolve, reject) => {\n\t\tif (!is.macOS() || is.dev()) {\n\t\t\treturn resolve()\n\t\t}\n\t\tconst appPath = app.getAppPath()\n\t\tconst appName = app.getName()\n\t\tconst appNewPath = `/Applications/${appName}.app`\n\t\tconst appNewPathExists = existsSync(appNewPath)\n\t\tconst appNewPathIsDirectory = lstatSync(appNewPath).isDirectory()\n\t\tconst appOldPathExists = existsSync(appPath)\n\t\tconst appOldPathIsDirectory = lstatSync(appPath).isDirectory()\n\n\t\tif (appOldPathExists && appOldPathIsDirectory) {\n\t\t\tif (appNewPathExists && appNewPathIsDirectory) {\n\t\t\t\treturn reject(new Error('Application already exists in the Applications folder.'))\n\t\t\t}\n\n\t\t\tconst move = shell.moveItemToTrash(appPath)\n\n\t\t\tif (move) {\n\t\t\t\treturn resolve()\n\t\t\t}\n\n\t\t\treturn reject(new Error('Failed to move application to the Trash.'))\n\t\t}\n\n\t\treturn reject(new Error(errorMsg))\n\t})\n}", "CodeBleu_score": 38.63609152970247}]}
{"instance_id": "294de13d4a02", "generation_result": [{"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\t\n  if (options.icon) {\n    log.info('Copying icon file');\n    await convertIconIfNecessary(options.icon, appPath);\n  }\n}", "CodeBleu_score": 14.318978790876963}, {"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\t\n}", "CodeBleu_score": 4.730158994484676}, {"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\t\n}", "CodeBleu_score": 4.730158994484676}]}
{"instance_id": "af06dceb6a2f", "generation_result": [{"code": "export function normalizeAppName(appName: string, url: string): string{\n\t numpy.random.seed(appName.length)\n  const hash = crypto.createHash('md5');\n  hash.update(url);\n  const hashSubstr = hash.digest('hex').substring(0, 6);\n  const normalizedAppName = appName\n    .toLowerCase()\n    .replace(/[^a-zA-Z0-9-_ ]/g, '')\n    .replace(/ /g, '-')\n    .replace(/_/g, '-')\n    .replace(/-+/g, '-')\n    .replace(/-$/, '')\n    .replace(/^-/, '')\n    .concat(`-nativefier-${hashSubstr}`);\n  return normalizedAppName;\n}", "CodeBleu_score": 66.60034813154296}, {"code": "export function normalizeAppName(appName: string, url: string): string{\n\t sys.exit(1); }", "CodeBleu_score": 7.588330784963173}, {"code": "export function normalizeAppName(appName: string, url: string): string{\n\t", "CodeBleu_score": 5.478516260116333}]}
{"instance_id": "3728778a6e34", "generation_result": [{"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\t//   if (fs.existsSync(dest)) {\n//     log.info(`Removing existing app at ${dest}`);\n//     await fs.remove(dest);\n  }\n  log.info(`Copying app from ${src} to ${dest}`);\n  await fs.copy(src, dest);\n  log.info(`App has been copied to ${dest}`);\n  const appConfig = generateAppConfig(options, dest);\n  const appConfigPath = path.join(dest, 'nativefier.json');\n  log.debug(`Writing config to ${appConfigPath}`);\n  await fs.writeFile(appConfigPath, JSON.stringify(appConfig, null, 2));\n  if (options.packager.bookmarksMenu) {\n    const bookmarksMenuPath = path.join(src, 'bookmarks-menu', 'default.json');\n    const bookmarksDestPath = path.join(dest, 'bookmarks-menu.json');\n    log.info(`Copying bookmarksMenu from ${bookmarksMenuPath} to ${bookmarksDestPath}`);\n    await fs.copy(bookmarksMenuPath, bookmarksDestPath);\n  }\n  await maybeCopyScripts(options.packager.inject, dest);\n  const appName = changeAppPackageJsonName(dest, options.packager.name, options.packager.targetUrl);\n  if (options.packager.platform === 'darwin') {\n    await setBundleId(appName, options);\n  }\n}", "CodeBleu_score": 46.77949296440097}, {"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\t\n}", "CodeBleu_score": 6.584793506668511}, {"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\t", "CodeBleu_score": 6.555677126020833}]}
{"instance_id": "281c20f209ba", "generation_result": [{"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\t\tlog.info(`Downloading ${fileUrl}`);\n\treturn axios({\n\t\tmethod: 'get',\n\t\turl: fileUrl,\n\t\tresponseType: 'arraybuffer',\n\t}).then((response) => {\n\t\tconst contentType = response.headers['content-type'];\n\t\tconst extension = getExtensionFromContentType(contentType);\n\t\tif (extension === undefined) {\n\t\t\tlog.error(\n\t\t\t\t`Unable to determine file extension for content type ${contentType} of ${fileUrl}`,\n\t\t\t);\n\t\t\treturn undefined;\n\t\t}\n\t\tconst data = Buffer.from(response.data);\n\t\tlog.info(`Finished downloading ${fileUrl}`);\n\t\treturn { data, ext: extension };\n\t});\n}", "CodeBleu_score": 48.6358069550115}, {"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\t\n}", "CodeBleu_score": 29.86584669194794}, {"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\t\n  log.info(`Downloading ${fileUrl}`);\n  return axios\n    .get(fileUrl, { responseType: 'arraybuffer' })\n    .then((response) => {\n      const ext = path.extname(fileUrl);\n      const data = response.data as Buffer;\n      return { data, ext };\n    })\n    .catch((err) => {\n      log.error(`Download error: ${err.message}`);\n      return undefined;\n    });\n}", "CodeBleu_score": 61.62775104447932}]}
{"instance_id": "e71c0b9dab4a", "generation_result": [{"code": "export function camelCased(str: string): string{\n\t\\treturn str.split('-').filter((x) => x).map((x, i) => (i === 0 ? x : x[0].toUpperCase() + x.slice(1))).join('');\n}", "CodeBleu_score": 34.627564137309214}, {"code": "export function camelCased(str: string): string{\n\t\tconst words = str.split('-');\n\tconst filteredWords = words.filter((word) => word !== '');\n\tconst capitalizedWords = filteredWords.map((word, index) => {\n\t\tif (index === 0) {\n\t\t\treturn word;\n\t\t}\n\t\treturn word[0].toUpperCase() + word.slice(1);\n\t});\n\treturn capitalizedWords.join('');\n}", "CodeBleu_score": 38.53928849287524}, {"code": "export function camelCased(str: string): string{\n\t\treturn str\n\t\t.split('-')\n\t\t.filter((s) => s.length > 0)\n\t\t.map((s, i) => (i === 0 ? s : s[0].toUpperCase() + s.slice(1)))\n\t\t.join('');\n}", "CodeBleu_score": 61.48571839043524}]}
{"instance_id": "c93f0f7bfa03", "generation_result": [{"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\t\n\"\"\".format(app_name)\n\n\ndef generate_sanitize_filename_function_end():\n    return \"\"\"\n  }", "CodeBleu_score": 15.117749437943239}, {"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\t\n\"\"\"\n\nFOOTER = \"\"\"\n}", "CodeBleu_score": 14.412023210689206}, {"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\t\n\\tlet sanitizedFilename = sanitize(filenameToSanitize);\n\\tif (platform === 'linux') {\n\\t\\tsanitizedFilename = sanitizedFilename.replace(/\\\\s/g, '-');\n\\t\\tsanitizedFilename = sanitizedFilename.replace(/[^a-zA-Z0-9-_.\\\\/]/g, '');\n\\t}\n\\tif (sanitizedFilename === '') {\n\\t\\tsanitizedFilename = DEFAULT_APP_NAME;\n\\t\\tlog.warn(\n\\t\\t\\t'The sanitized filename is empty. Assigning a default application name.',\n\\t\\t);\n\\t}\n\\tlog.info('The sanitized filename is: ' + sanitizedFilename);\n\\treturn sanitizedFilename;\n}", "CodeBleu_score": 44.50473139516454}]}
{"instance_id": "ac4bf3ef1fa8", "generation_result": [{"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\tconst currentTime = Date.now()\nconst cacheTime = savedCache.time\nconst duration = savedCache.duration\nconst cacheTimeInt = parseInt(cacheTime)\nconst durationInt = parseInt(duration)\nconst cacheExpired = cacheTimeInt + durationInt < currentTime\nreturn cacheExpired\n}", "CodeBleu_score": 29.86156745133222}, {"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\tconst duration = parseInt(savedCache.duration, 10)\nconst time = parseInt(savedCache.time, 10)\nconst currentTime = Date.now()\nreturn time + duration < currentTime\n}", "CodeBleu_score": 28.09232055165455}, {"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\tconst currentTime = Date.now()\nconst duration = parseInt(savedCache.duration, 10)\nconst savedCacheTime = parseInt(savedCache.time, 10)\nconst expired = (savedCacheTime + duration) < currentTime\nreturn expired\n}", "CodeBleu_score": 28.671898898242127}]}
{"instance_id": "6b8f5c8fc4ec", "generation_result": [{"code": "static getTimestamp(timestampOptionArgument: any): number{\n\tif (timestampOptionArgument === undefined) {\nreturn Math.floor(new Date().getTime() / 1000)\n}\n\nif (typeof timestampOptionArgument !== \"number\" || timestampOptionArgument < 0) {\nthrow new TypeORMError(\n`The provided timestamp value is not valid. Only positive numbers are allowed. Got \"${timestampOptionArgument}\"`,\n)\n}\n\nreturn timestampOptionArgument\n}", "CodeBleu_score": 44.86205904276681}, {"code": "static getTimestamp(timestampOptionArgument: any): number{\n\tconst timestamp = timestampOptionArgument\nif (timestamp === undefined) {\nreturn Math.floor(Date.now() / 1000)\n}\n\nif (typeof timestamp !== \\\"number\\\" || timestamp < 0) {\nthrow new TypeORMError(\n`The provided timestamp value is not valid. Expected a number, got ${timestamp}`,\n)\n}\nreturn Math.floor(timestamp)\n}", "CodeBleu_score": 38.70008541384119}, {"code": "static getTimestamp(timestampOptionArgument: any): number{\n\tif (timestampOptionArgument === undefined) {\nreturn Date.now()\n}\n\nif (typeof timestampOptionArgument !== \\\"number\\\") {\nthrow new TypeORMError(\n`The provided timestamp value must be a number. ` +\n`Given value: ${timestampOptionArgument}`,\n)\n}\n\nif (timestampOptionArgument < 0) {\nthrow new TypeORMError(\n`The provided timestamp value must be a positive number. ` +\n`Given value: ${timestampOptionArgument}`,\n)\n}\n\nreturn timestampOptionArgument\n}", "CodeBleu_score": 53.833138095873025}]}
{"instance_id": "747bea9d7ad9", "generation_result": [{"code": " async dropDatabase(): Promise<void>{\n\t const queryRunner = this.createQueryRunner()\ntry {\n    const database = this.driver.database ? this.driver.database : \\\"default\\\"\n    const query = this.driver.buildDropDatabaseSql()\n    await queryRunner.query(query, [database])\n    await queryRunner.release()\n} finally {\n    await queryRunner.release()\n}\n }", "CodeBleu_score": 28.688785631747564}, {"code": " async dropDatabase(): Promise<void>{\n\t const queryRunner = this.createQueryRunner()\nconst database = this.driver.database || \\\"default\\\"\nconst databaseNames = this.entityMetadatas.map(\n    (metadata) => metadata.database || database,\n)\n\nconst isDefaultDatabase = databaseNames.every((name) => name === database)\n\nif (isDefaultDatabase)\nawait queryRunner.clearDatabase()\nelse\nawait Promise.all(\n    databaseNames.map((name) => queryRunner.clearDatabase(name)),\n)\n\nawait queryRunner.release()\n}", "CodeBleu_score": 30.287385061652984}, {"code": " async dropDatabase(): Promise<void>{\n\t const queryRunner = this.createQueryRunner()\ntry {\n    const databaseNames = await this.driver.getDatabaseNames()\n    if (databaseNames.length > 1) {\n        // drop all databases\n        await Promise.all(\n            databaseNames.map(async databaseName => {\n                const databaseConnection = await this.driver.connect(databaseName)\n                await databaseConnection.dropDatabase()\n            }),\n        )\n    } else {\n        // drop default database\n        const databaseConnection = await this.driver.connect()\n        await databaseConnection.dropDatabase()\n    }\n} finally {\n    // release query runner\n    await queryRunner.release()\n}\n}", "CodeBleu_score": 37.33091786197753}]}
{"instance_id": "7dce3d050d72", "generation_result": [{"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\tif (InstanceChecker.isMongoEntityManager(this.manager))\n            throw new TypeORMError(`Queries aren't supported by MongoDB.`)\n\n        if (queryRunner && queryRunner.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError()\n\n        const queryBuilder = new SelectQueryBuilder<Entity>(\n            this.connection,\n            entityOrRunner as any,\n            alias || \"\",\n            queryRunner || this.createQueryRunner(),\n        )\n\n        if (alias) {\n            const metadata = this.connection.getMetadata(alias)\n            queryBuilder.expressionMap.mainAlias = alias\n            queryBuilder.expressionMap.queryEntity = metadata\n        }\n\n        return queryBuilder\n    }", "CodeBleu_score": 53.366510962497294}, {"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\t\n}", "CodeBleu_score": 5.777452253928204}, {"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\tif (InstanceChecker.isMongoEntityManager(this.manager))\n            throw new TypeORMError(`Queries aren't supported by MongoDB.`)\n\n        if (queryRunner && queryRunner.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError()\n\n        const queryBuilder = new SelectQueryBuilder(\n            this.connection,\n            entityOrRunner || this.manager,\n            alias,\n            queryRunner,\n        )\n\n        if (alias) {\n            const metadata = this.connection.getMetadata(alias)\n            queryBuilder.expressionMap.mainAlias = alias\n            queryBuilder.expressionMap.queryRoot = alias\n            queryBuilder.expressionMap.relationMetadatas = metadata.relations\n            queryBuilder.expressionMap.aliasMap = metadata.aliasMap\n        }\n\n        return queryBuilder\n    }", "CodeBleu_score": 52.414995319344435}]}
{"instance_id": "4413268e1791", "generation_result": [{"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\tconst metadata = this.connection.getMetadata(entityClass)\nconst transformedEntity = this.plainObjectToEntityTransformer.transform(\n    entityLike,\n    metadata,\n)\nif (transformedEntity)\n    Object.assign(entityLike, transformedEntity)\nreturn entityLike\n}", "CodeBleu_score": 43.42884036117772}, {"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\t\n}", "CodeBleu_score": 12.757644319537228}, {"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\tconst metadata = this.connection.getMetadata(entityClass)\nconst transformedEntity = this.plainObjectToEntityTransformer.transform(\n            metadata.create(),\n            entityLike,\n            metadata,\n        )\nreturn transformedEntity ? this.merge(entityClass, transformedEntity) : undefined\n}", "CodeBleu_score": 48.00723181264613}]}
{"instance_id": "c635d2b9bbdf", "generation_result": [{"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\t\tconst [showNote, setShowNote] = React.useState(compression > 0);\n\tconst handleSliderChange = (e: any) => {\n\t\thandleCompressionChange(e.target.value);\n\t\tsetShowNote(e.target.value > 0);\n\t};\n\treturn (\n\t\t<div className=\"CompressionInput\">\n\t\t\t<div className=\"CompressionInput__slider\">\n\t\t\t\t<input\n\t\t\t\t\ttype=\"range\"\n\t\t\t\t\tmin=\"0\"\n\t\t\t\t\tmax=\"100\"\n\t\t\t\t\tvalue={compression}\n\t\t\t\t\tonChange={handleSliderChange}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className=\"CompressionInput__note\">\n\t\t\t\t{showNote && (\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<strong>Note:</strong>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<em>\n\t\t\t\t\t\t\tPNG, JPG, and WebP compression only apply to the\n\t\t\t\t\t\t\timage data, not the metadata.\n\t\t\t\t\t\t</em>\n\t\t\t\t\t</p>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t);\n}", "CodeBleu_score": 30.91319751821614}, {"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\t}", "CodeBleu_score": 1.686070011039274}, {"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\t\n}", "CodeBleu_score": 1.686070011039274}]}
{"instance_id": "636802ba89ba", "generation_result": [{"code": "findAttributesWithPrefix(type, name){\n\t\tconst key = `${type}-${name}`;\n\tconst result = [];\n\n\tfor (const k in this.attributeIndex) {\n\t\tif (k.startsWith(key)) {\n\t\t\tresult.push(...this.attributeIndex[k]);\n\t\t}\n\t}\n\n\treturn result;\n}", "CodeBleu_score": 57.7399283190164}, {"code": "findAttributesWithPrefix(type, name){\n\tconst key = `${type}-${name}`;\nconst result = [];\n\nfor (const attr of this.attributeIndex) {\nif (attr.startsWith(key)) {\nresult.push(...this.attributeIndex[attr]);\n}\n}\n\nreturn result;\n}", "CodeBleu_score": 55.68552734247856}, {"code": "findAttributesWithPrefix(type, name){\n\t\tname = name.trim().toLowerCase();\n\n\tif (name.startsWith('#') || name.startsWith('~')) {\n\t\tname = name.substr(1);\n\t}\n\n\tconst key = `${type}-${name}`;\n\tlet result = [];\n\n\tfor (const attribute of this.attributeIndex) {\n\t\tif (attribute.startsWith(key)) {\n\t\t\tresult = result.concat(this.attributeIndex[attribute]);\n\t\t}\n\t}\n\n\treturn result;\n}", "CodeBleu_score": 52.936420737414934}]}
{"instance_id": "5fafa24f5463", "generation_result": [{"code": "function branchUpdated(branchRow){\n\t\tconst branch = becca.branches[branchRow.branchId];\n\n\tif (!branch) {\n\t\treturn;\n\t}\n\n\tconst childNote = becca.notes[branch.noteId];\n\n\tif (childNote) {\n\t\tchildNote.flatTextCache = null;\n\t\tchildNote.sortParents();\n\t\tchildNote.invalidateSubTree();\n\t}\n\n\tconst parentNote = becca.notes[branch.parentNoteId];\n\n\tif (parentNote) {\n\t\tparentNote.sortChildren();\n\t}\n}", "CodeBleu_score": 75.3931747450836}, {"code": "function branchUpdated(branchRow){\n\t\tconst branch = becca.branches[branchRow.branchId];\n\n\tif (!branch) {\n\t\treturn;\n\t}\n\n\tconst childNote = becca.notes[branch.noteId];\n\n\tif (childNote) {\n\t\tchildNote.flatTextCache = null;\n\t\tchildNote.sortParents();\n\t\tchildNote.invalidateSubTree();\n\t}\n\n\tconst parentNote = becca.notes[branch.parentNoteId];\n\n\tif (parentNote) {\n\t\tparentNote.sortChildren();\n\t}\n}", "CodeBleu_score": 75.3931747450836}, {"code": "function branchUpdated(branchRow){\n\t\tconst branch = becca.branches[branchRow.branchId];\n\n\tif (!branch) {\n\t\treturn;\n\t}\n\n\tconst childNote = becca.notes[branch.noteId];\n\n\tif (childNote) {\n\t\tchildNote.flatTextCache = null;\n\t\tchildNote.sortParents();\n\t\tchildNote.invalidateSubTree();\n\t}\n\n\tconst parentNote = becca.notes[branch.parentNoteId];\n\n\tif (parentNote) {\n\t\tparentNote.sortChildren();\n\t}\n}", "CodeBleu_score": 75.3931747450836}]}
{"instance_id": "80b2322b7b29", "generation_result": [{"code": "function trimMime(mime){\n\t\tif (!mime) {\n\t\treturn mime;\n\t}\n\n\tif (mime === 'text/html') {\n\t\treturn mime;\n\t}\n\n\tif (!mimeCache[mime]) {\n\t\tconst parts = mime.split('/');\n\n\t\tif (parts.length < 2) {\n\t\t\treturn mime;\n\t\t}\n\n\t\tconst type = parts[0].toLowerCase();\n\t\tconst subtype = parts[1].toLowerCase();\n\n\t\tif (type === 'text' || type === 'application') {\n\t\t\tmimeCache[mime] = subtype;\n\t\t} else {\n\t\t\tmimeCache[mime] = mime;\n\t\t}\n\t}\n\n\treturn mimeCache[mime];\n}", "CodeBleu_score": 41.20761937339365}, {"code": "function trimMime(mime){\n\t\tif (!mime || mime === 'text/html') {\n\t\treturn mime;\n\t}\n\n\tif (mimeCache[mime]) {\n\t\treturn mimeCache[mime];\n\t}\n\n\tconst parts = mime.split('/');\n\n\tif (parts.length !== 2) {\n\t\treturn mime;\n\t}\n\n\tconst [type, subtype] = parts;\n\n\tif (type === 'text' || type === 'application') {\n\t\tmimeCache[mime] = subtype;\n\t\treturn subtype;\n\t}\n\n\tif (type.startsWith('text-')) {\n\t\tmimeCache[mime] = subtype;\n\t\treturn subtype;\n\t}\n\n\tmimeCache[mime] = mime;\n\treturn mime;\n}", "CodeBleu_score": 42.49129698393421}, {"code": "function trimMime(mime){\n\t\tif (!mime || mime === 'text/html') {\n\t\treturn mime;\n\t}\n\n\tif (!mimeCache[mime]) {\n\t\tconst parts = mime.split('/');\n\t\tlet i = 0;\n\n\t\tif (parts[0] === 'text') {\n\t\t\ti = 1;\n\t\t} else if (parts[0] === 'application') {\n\t\t\ti = 2;\n\t\t}\n\n\t\tmimeCache[mime] = parts.slice(i).join('/');\n\t}\n\n\treturn mimeCache[mime];\n}", "CodeBleu_score": 43.88873684244024}]}
{"instance_id": "5d211ed69fed", "generation_result": [{"code": "function buildDateLimits(baseNote){\n\t\tconst date = baseNote.created;\n\tconst dateObj = new Date(date);\n\tconst dateTimestamp = dateObj.getTime();\n\n\tconst minDate = dateUtils.formatDate(dateObj);\n\tconst minExcludedDate = dateUtils.formatDate(dateObj, {\n\t\taddDays: -1\n\t});\n\tconst maxExcludedDate = dateUtils.formatDate(dateObj, {\n\t\taddDays: 1\n\t});\n\tconst maxDate = dateUtils.formatDate(dateObj, {\n\t\taddDays: 2\n\t});\n\n\treturn {\n\t\tminDate,\n\t\tminExcludedDate,\n\t\tmaxExcludedDate,\n\t\tmaxDate\n\t};\n}", "CodeBleu_score": 26.911351113842542}, {"code": "function buildDateLimits(baseNote){\n\t\tconst date = dateUtils.parseDate(baseNote.created);\n\tconst minDate = dateUtils.formatDate(dateUtils.addDays(date, -30));\n\tconst maxDate = dateUtils.formatDate(dateUtils.addDays(date, 30));\n\tconst minExcludedDate = dateUtils.formatDate(dateUtils.addDays(date, -1));\n\tconst maxExcludedDate = dateUtils.formatDate(dateUtils.addDays(date, 1));\n\n\treturn {\n\t\tminDate,\n\t\tminExcludedDate,\n\t\tmaxExcludedDate,\n\t\tmaxDate,\n\t};\n}", "CodeBleu_score": 29.50802113401418}, {"code": "function buildDateLimits(baseNote){\n\t\tconst creationDate = baseNote.creationDate;\n\tconst creationDateTs = dateUtils.parseDate(creationDate);\n\tconst minDate = dateUtils.formatDate(creationDateTs - 1000 * 60 * 60 * 24 * 365 * 10);\n\tconst minExcludedDate = dateUtils.formatDate(creationDateTs - 1000 * 60 * 60 * 24 * 365 * 5);\n\tconst maxExcludedDate = dateUtils.formatDate(creationDateTs + 1000 * 60 * 60 * 24 * 365 * 5);\n\tconst maxDate = dateUtils.formatDate(creationDateTs + 1000 * 60 * 60 * 24 * 365 * 10);\n\n\treturn {\n\t\tminDate,\n\t\tminExcludedDate,\n\t\tmaxExcludedDate,\n\t\tmaxDate\n\t};\n}", "CodeBleu_score": 36.322955504991256}]}
{"instance_id": "5ef14ada992c", "generation_result": [{"code": "_setContent(content, opts = {}){\n\t", "CodeBleu_score": 0.8467755637509736}, {"code": "_setContent(content, opts = {}){\n\tconst entityName = this.constructor.entityName;\nconst primaryKeyName = this.constructor.primaryKeyName;\n\nconst isNewEntity = !this[primaryKeyName];\n\nif (typeof content !== 'string' && !Buffer.isBuffer(content)) {\nthrow new Error(`Content must be a string or a buffer, not ${typeof content}`);\n}\n\nif (!content) {\nthrow new Error(`Content must not be null or empty`);\n}\n\nthis.content = content;\nthis.contentHash = utils.hash(content);\n\n\nif (this.isProtected) {\nif (!protectedSessionService.get()) {\nthrow new Error(`Cannot set content for a protected entity without a protected session`);\n}\n\nthis.contentHashEncrypted = protectedSessionService.encrypt(this.contentHash);\n\n\nif (isNewEntity) {\nthis.contentEncrypted = protectedSessionService.encrypt(content);\n\n}\n} else {\nthis.contentHashEncrypted = this.contentHash;\n\n\nif (isNewEntity) {\nthis.contentEncrypted = content;\n\n}\n}\n\n\nsql.transactional(() => {\nif (isNewEntity) {\nsql.insert('blobs', {\nblobId: utils.newEntityId(),\ncontentHash: this.contentHashEncrypted,\ncontent: this.contentEncrypted\n});\n} else {\nsql.upsert('blobs', 'blobId', {\nblobId: this.blobId,\ncontentHash: this.contentHashEncrypted,\ncontent: this.contentEncrypted\n});\n}\n\n\nif (isNewEntity || opts.forceSave) {\nthis.save();\n}\n\n\nif (isNewEntity || opts.forceFrontendReload) {\nthis.becca.reloadFrontend();\n}\n\n\nif (entityName === 'notes') {\nthis.becca.reloadFrontend('notes');\n}\n});\n\nreturn this;\n}", "CodeBleu_score": 38.26394479330759}, {"code": "_setContent(content, opts = {}){\n\t\tconst entityName = this.constructor.entityName;\n\tconst primaryKeyName = this.constructor.primaryKeyName;\n\n\tif (typeof content !== 'string' && !(content instanceof Buffer)) {\n\t\tthrow new Error(`Content must be a string or a buffer, got ${typeof content}`);\n\t}\n\n\tif (content === null || content === undefined) {\n\t\tthrow new Error(`Content must not be null or undefined`);\n\t}\n\n\tconst isNewEntity = !this[primaryKeyName];\n\n\tconst contentHash = utils.hash(content);\n\n\tif (this.isProtected && protectedSessionService.isAvailable()) {\n\t\tcontent = protectedSessionService.encrypt(content);\n\t}\n\n\tsql.transactional(() => {\n\t\tif (!this.blobId) {\n\t\t\tthis.blobId = utils.newEntityId();\n\t\t}\n\n\t\tconst blob = {\n\t\t\tid: this.blobId,\n\t\t\tcontentHash,\n\t\t\tcontentLength: content.length,\n\t\t\tcontent\n\t\t};\n\n\t\tsql.upsert('blobs', 'id', blob);\n\n\t\tif (this.blobId !== blob.id) {\n\t\t\tsql.delete('blobs', 'id', this.blobId);\n\t\t\tthis.blobId = blob.id;\n\t\t}\n\n\t\tif (this.contentHash !== blob.contentHash) {\n\t\t\tthis.contentHash = blob.contentHash;\n\t\t}\n\n\t\tthis.contentLength = blob.contentLength;\n\n\t\tif (isNewEntity || opts.forceSave) {\n\t\t\tthis.save();\n\t\t}\n\n\t\tif (entityName === 'options' || opts.forceFrontendReload) {\n\t\t\tthis.becca.reloadFrontend();\n\t\t}\n\t});\n}", "CodeBleu_score": 42.88683739937295}]}
{"instance_id": "6f76c3417cdb", "generation_result": [{"code": "async createNoteIntoInboxCommand(){\n\t\tconst inboxNote = await dateNoteService.getNote(appContext.currentFolder.id, 'inbox');\n\tconst newNote = await server.post('/notes', {\n\t\ttitle: 'New note',\n\t\tcontent: '',\n\t\tparent: inboxNote.id,\n\t\ttype: 'note',\n\t\tprotected: false,\n\t});\n\tawait dateNoteService.ensureNote(newNote);\n\tawait dateNoteService.openNote(newNote);\n\tawait this.focusAndSelectTitle();\n}", "CodeBleu_score": 41.385008255256395}, {"code": "async createNoteIntoInboxCommand(){\n\t", "CodeBleu_score": 1.4631656026993891}, {"code": "async createNoteIntoInboxCommand(){\n\t\tconst inboxNote = await dateNoteService.getInboxNote();\n\tconst newNote = await server.postNote({\n\t\tparent_id: inboxNote.id,\n\t\tcontent: '',\n\t\ttype: 'note',\n\t\ttitle: '',\n\t\tencryption_cipher_text: '',\n\t\tencryption_applied: 0,\n\t\tencryption_blob_encrypted: 0,\n\t\tencryption_mode: '',\n\t\tencryption_password: '',\n\t\tencryption_key: '',\n\t\tencryption_key_nonce: '',\n\t\tencryption_iv: '',\n\t\tis_todo: 0,\n\t\ttodo_due: 0,\n\t\ttodo_completed: 0,\n\t\tis_deleted: 0,\n\t\tis_archived: 0,\n\t\ttags: [],\n\t\tcolor: '',\n\t\tuser_updated_time: utils.now(),\n\t\tuser_created_time: utils.now(),\n\t\tuser_updated_epoch: utils.now(),\n\t\tuser_created_epoch: utils.now(),\n\t});\n\n\tif (newNote) {\n\t\t// open the new note in a tab with hoisting\n\t\tawait linkService.openNote(newNote.id);\n\n\t\t// trigger an event to focus and select the title of the new note\n\t\tconst event = new CustomEvent('note-title-focused', {\n\t\t\tdetail: {\n\t\t\t\tnoteId: newNote.id,\n\t\t\t},\n\t\t});\n\t\tdocument.dispatchEvent(event);\n\t}\n}", "CodeBleu_score": 49.22529542066832}]}
{"instance_id": "2b91c618a874", "generation_result": [{"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\t const activeNoteContext = appContext.tabManager.getActiveContext();\n const activeNote = await appContext.noteManager.getNoteById(activeNoteContext.noteId);\n const noteToHoist = await appContext.noteManager.getNoteById(noteId);\n if (!noteToHoist) {\n toastService.error(`Note with id ${noteId} not found`);\n return;\n }\n if (noteToHoist.type === 'search') {\n toastService.error('You cannot hoist a search note');\n return;\n }\n if (activeNote.noteId === noteToHoist.noteId) {\n toastService.error('You cannot hoist the note you are currently viewing');\n return;\n }\n if (activeNoteContext.noteId === noteToHoist.noteId) {\n await appContext.tabManager.openTabWithNoteWithHoisting(noteToHoist.noteId, {activate: true});\n } else {\n await appContext.tabManager.openTabWithNoteWithHoisting(noteToHoist.noteId, {activate: true});\n await appContext.tabManager.openTabWithNoteWithHoisting(activeNoteContext.noteId, {activate: false});\n }\n }", "CodeBleu_score": 49.69148495464802}, {"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\t const note = await dateNoteService.getNote(noteId);\n\n if (note.isHoisted) {\n        await dateNoteService.unhoistNote(note);\n    } else {\n        if (note.type !== 'search') {\n            await dateNoteService.setHoistedNote(note);\n        }\n    }\n}", "CodeBleu_score": 41.77444840449366}, {"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\t const activeNote = await appContext.tabManager.getActiveNote();\n const note = await appContext.noteManager.getNote({noteId});\n const isSearchNote = note.type === 'search';\n const isHoisted = note.isHoisted;\n const isHoistedNote = activeNote && activeNote.noteId === note.noteId;\n const shouldUnhoist = isHoisted && !isHoistedNote;\n const shouldHoist = !isHoisted && !isSearchNote;\n const shouldUnhoistAndHoist = isHoisted && isHoistedNote;\n const shouldHoistAndUnhoist = !isHoisted && isHoistedNote;\n if (shouldUnhoist) {\n await appContext.noteManager.updateNote({noteId, isHoisted: false});\n } else if (shouldHoist) {\n await appContext.noteManager.updateNote({noteId, isHoisted: true});\n } else if (shouldUnhoistAndHoist) {\n await appContext.noteManager.updateNote({noteId, isHoisted: false});\n await appContext.noteManager.updateNote({noteId: activeNote.noteId, isHoisted: true});\n } else if (shouldHoistAndUnhoist) {\n await appContext.noteManager.updateNote({noteId, isHoisted: true});\n await appContext.noteManager.updateNote({noteId: activeNote.noteId, isHoisted: false});\n }\n }", "CodeBleu_score": 37.49984491968493}]}
{"instance_id": "8df5414bda15", "generation_result": [{"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\tconst hash = utils.getHash({notePath, hoistedNoteId, viewScope});\n\nif (utils.isElectron()) {\nconst webContents = utils.dynamicRequire('@electron/remote').getCurrentWebContents();\n\nwebContents.send('open-window', {hash});\n}\nelse {\nconst url = `${window.location.origin}/?hash=${hash}`;\n\nwindow.open(url, '_blank', `width=${window.innerWidth}, height=${window.innerHeight}`);\n}\n}", "CodeBleu_score": 54.63101728978618}, {"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\t\tconst hash = await utils.getHash({notePath, hoistedNoteId, viewScope});\n\n\tif (utils.isElectron()) {\n\t\tconst {ipcRenderer} = utils.dynamicRequire('electron');\n\t\tipcRenderer.send('open-window', hash);\n\t}\n\telse {\n\t\tconst windowParams = {\n\t\t\twidth: 1024,\n\t\t\theight: 768,\n\t\t\tleft: 100,\n\t\t\ttop: 100\n\t\t};\n\n\t\tconst url = `${location.origin}${location.pathname}#${hash}`;\n\n\t\twindow.open(url, '', `width=${windowParams.width},height=${windowParams.height},left=${windowParams.left},top=${windowParams.top}`);\n\t}\n}", "CodeBleu_score": 56.895061491970125}, {"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\t\tconst hash = utils.generateWindowHash({notePath, hoistedNoteId, viewScope});\n\n\tif (utils.isElectron()) {\n\t\t// in electron, we can use the ipcRenderer to open a new window\n\t\tutils.dynamicRequire('@electron/remote').getCurrentWebContents().send('open-window', {hash});\n\t}\n\telse {\n\t\t// in a browser, we have to construct a URL with the hash\n\t\tconst url = `${window.location.origin}/#${hash}`;\n\n\t\twindow.open(url, '_blank', 'width=800,height=600');\n\t}\n}", "CodeBleu_score": 46.90691272326815}]}
{"instance_id": "bd6dc0a79a5b", "generation_result": [{"code": "async runActiveNoteCommand(){\n\t", "CodeBleu_score": 0.8131870016062366}, {"code": "async runActiveNoteCommand(){\n\t\tconst activeNoteContext = appContext.tabManager.getActiveContext();\n\n\tif (activeNoteContext && activeNoteContext.note.type === 'code') {\n\t\tconst note = activeNoteContext.note;\n\n\t\tif (note.mime === 'text/html') {\n\t\t\tconst bundle = await bundleService.getBundle(note.noteId);\n\n\t\t\tif (bundle) {\n\t\t\t\tconst {error, result} = await bundleService.executeBundle(bundle);\n\n\t\t\t\tif (error) {\n\t\t\t\t\ttoastService.error(error);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttoastService.success('Bundle executed successfully');\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttoastService.error('Bundle not found');\n\t\t\t}\n\t\t}\n\t\telse if (note.mime === 'application/javascript') {\n\t\t\tconst {error, result} = await server.post('scripts/execute', {\n\t\t\t\tscript: note.content,\n\t\t\t\tnoteId: note.noteId\n\t\t\t});\n\n\t\t\tif (error) {\n\t\t\t\ttoastService.error(error);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttoastService.success('Script executed successfully');\n\t\t\t}\n\t\t}\n\t\telse if (note.mime === 'application/sql') {\n\t\t\tconst {error, result} = await server.post('sql/execute', {\n\t\t\t\tquery: note.content,\n\t\t\t\tnoteId: note.noteId\n\t\t\t});\n\n\t\t\tif (error) {\n\t\t\t\ttoastService.error(error);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttoastService.success('SQL executed successfully');\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\ttoastService.error('Active note is not a code note');\n\t}\n}", "CodeBleu_score": 37.33680834621298}, {"code": "async runActiveNoteCommand(){\n\t\tconst activeNoteContext = appContext.tabManager.getActiveContext();\n\tconst activeNote = activeNoteContext.note;\n\n\tif (activeNote.type === 'code') {\n\t\tconst {note} = await server.post('notes/' + activeNote.noteId + '/execute', {\n\t\t\tntxId: activeNoteContext.ntxId,\n\t\t\tcode: activeNote.content\n\t\t});\n\n\t\tawait ws.waitForMaxKnownEntityChangeId();\n\n\t\tappContext.triggerEvent('focusAndSelectTitle', {isNewNote: false});\n\n\t\ttoastService.show({\n\t\t\tmessage: 'Note executed',\n\t\t\ttype: 'success'\n\t\t});\n\t}\n\telse {\n\t\ttoastService.show({\n\t\t\tmessage: 'Note type is not supported',\n\t\t\ttype: 'error'\n\t\t});\n\t}\n}", "CodeBleu_score": 32.89019984121909}]}
{"instance_id": "233cf4163968", "generation_result": [{"code": "async isReadOnly(){\n\tconst note = this.note;\n\nif (!note) {\n    return true;\n}\n\nif (note.isLabelTruthy('readOnly')) {\n    return true;\n}\n\nif (this.viewScope.viewMode === 'source') {\n    return true;\n}\n\nif (note.isLabelTruthy('autoReadOnlyDisabled')) {\n    return false;\n}\n\nconst blob = await note.getBlob();\n\nif (blob.size > this.getAutoReadOnlySizeLimit()) {\n    return true;\n}\n\nreturn false;\n}", "CodeBleu_score": 41.80749477112503}, {"code": "async isReadOnly(){\n\treturn this.note.isReadOnly() || this.note.isViewModeSource();\n}", "CodeBleu_score": 7.352350793339508}, {"code": "async isReadOnly(){\n\tif (this.note.isLabelTruthy('readOnlyTempDisabled')) {\nreturn true;\n}\n\nif (!this.note.isTextOrCode()) {\nreturn false;\n}\n\nif (this.note.isLabelTruthy('readOnly')) {\nreturn true;\n}\n\nif (this.viewScope.viewMode === 'source') {\nreturn true;\n}\n\nconst blob = await this.note.getBlob();\nconst contentLength = blob.size;\n\nif (contentLength > this.note.getReadOnlySizeLimit()) {\nreturn !this.note.isLabelTruthy('autoReadOnlyDisabled');\n}\n\nreturn false;\n}", "CodeBleu_score": 53.55503197674882}]}
{"instance_id": "bca77fc5e32c", "generation_result": [{"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\t", "CodeBleu_score": 3.3675088390567347}, {"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\t\tconst activeContext = this.getActiveContext();\n\tif (activeContext && utils.isMobile()) {\n\t\t// on mobile, if there's an active context, we'll use it\n\t\treturn activeContext;\n\t}\n\n\tconst existingContext = this.getNoteContextByNotePath(notePath);\n\tif (existingContext) {\n\t\t// if there's an existing context, we'll use it\n\t\treturn existingContext;\n\t}\n\n\t// if there's no existing context, we'll create a new one\n\tconst noteContext = new NoteContext(this, ntxId, hoistedNoteId, mainNtxId);\n\tawait this.addNoteContext(noteContext);\n\tawait this.triggerEvent('newNoteContextCreated', { noteContext });\n\n\treturn noteContext;\n}", "CodeBleu_score": 44.69599032987539}, {"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\t\tconst existingContext = this.getActiveContext() || this.getNoteContextByPath(notePath) || this.getNoteContextByNoteId(noteId) || this.getNoteContextByNoteType(noteType) || this.getNoteContextByNoteMime(noteMime);\n\n\tif (existingContext) {\n\t\tawait existingContext.setHoistedNoteId(hoistedNoteId);\n\n\t\treturn existingContext;\n\t}\n\n\tconst newNoteContext = new NoteContext(this, ntxId, hoistedNoteId, mainNtxId);\n\tthis.noteContexts.push(newNoteContext);\n\n\tthis.triggerEvent('newNoteContextCreated', newNoteContext);\n\n\treturn newNoteContext;\n}", "CodeBleu_score": 44.61637632118206}]}
{"instance_id": "fa8b5627c077", "generation_result": [{"code": "sortChildren(){\n\t\tconst childToBranch = this.childToBranch;\n\tconst children = this.children;\n\tconst childPositions = {};\n\tlet i;\n\tlet child;\n\tlet branchId;\n\tlet branchPosition;\n\tlet childPosition;\n\n\tfor (child in childToBranch) {\n\t\tif (childToBranch.hasOwnProperty(child)) {\n\t\t\tbranchId = childToBranch[child];\n\t\t\tbranchPosition = childPositions[branchId];\n\n\t\t\tif (branchPosition === undefined) {\n\t\t\t\tbranchPosition = 0;\n\t\t\t\tchildPositions[branchId] = branchPosition;\n\t\t\t}\n\n\t\t\tchildPosition = childPositions[branchId];\n\t\t\tchildPositions[branchId] = childPosition + 1;\n\t\t}\n\t}\n\n\tchildren.sort((a, b) => {\n\t\tconst aPosition = childPositions[this.childToBranch[a]];\n\t\tconst bPosition = childPositions[this.childToBranch[b]];\n\t\treturn aPosition - bPosition;\n\t});\n}", "CodeBleu_score": 30.686352031158158}, {"code": "sortChildren(){\n\t\tif (this.children.length < 2) {\n\t\treturn;\n\t}\n\n\t/** @type {Object.<string, number>} */\n\tconst branchPositions = {};\n\n\tfor (const childId of Object.keys(this.childToBranch)) {\n\t\tconst branchId = this.childToBranch[childId];\n\t\tif (!(branchId in branchPositions)) {\n\t\t\tbranchPositions[branchId] = 0;\n\t\t}\n\t\tbranchPositions[branchId] += 1;\n\t}\n\n\t/** @type {Object.<string, number>} */\n\tconst childPositions = {};\n\n\tfor (const childId of this.children) {\n\t\tconst branchId = this.childToBranch[childId];\n\t\tchildPositions[childId] = branchPositions[branchId];\n\t}\n\n\tthis.children.sort((a, b) => childPositions[a] - childPositions[b]);\n}", "CodeBleu_score": 49.573179306116344}, {"code": "sortChildren(){\n\t\tlet branchPositions = {};\n\n\tfor (let childNoteId in this.childToBranch) {\n\t\tlet branchId = this.childToBranch[childNoteId];\n\t\tif (!(branchId in branchPositions)) {\n\t\t\tbranchPositions[branchId] = [];\n\t\t}\n\t\tbranchPositions[branchId].push(this.children.indexOf(childNoteId));\n\t}\n\n\tfor (let branchId in branchPositions) {\n\t\tbranchPositions[branchId].sort();\n\t}\n\n\tthis.children.sort((a, b) => {\n\t\treturn branchPositions[this.childToBranch[a]][0] - branchPositions[this.childToBranch[b]][0];\n\t});\n}", "CodeBleu_score": 45.152226028938294}]}
{"instance_id": "51a1ff6e218f", "generation_result": [{"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\t\tbranchIdsToMove = filterRootNote(branchIdsToMove);\n\tbranchIdsToMove = filterSearchBranches(branchIdsToMove);\n\n\tconst newParentNote = froca.getBranch(newParentBranchId).getNote();\n\n\tconst forbiddenNoteIds = [\n\t\t'root',\n\t\thoistedNoteService.getHoistedNoteId(),\n\t\t'_lbRoot',\n\t\t'_lbAvailableLaunchers',\n\t\t'_lbVisibleLaunchers'\n\t];\n\n\tif (forbiddenNoteIds.includes(newParentNote.noteId)) {\n\t\ttoastService.showError('Cannot move notes here.');\n\t\treturn;\n\t}\n\n\tfor (const branchIdToMove of branchIdsToMove) {\n\t\tconst resp = await server.put(`branches/${branchIdToMove}/move-to-parent/${newParentBranchId}`);\n\n\t\tif (!resp.success) {\n\t\t\ttoastService.showError(resp.message);\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 61.1103486995894}, {"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\tbranchIdsToMove = filterRootNote(branchIdsToMove);\nbranchIdsToMove = filterSearchBranches(branchIdsToMove);\n\nconst newParentNote = froca.getBranch(newParentBranchId).getNote();\n\nconst forbiddenNoteIds = [\n    'root',\n    hoistedNoteService.getHoistedNoteId(),\n    '_lbRoot',\n    '_lbAvailableLaunchers',\n    '_lbVisibleLaunchers'\n];\n\nif (forbiddenNoteIds.includes(newParentNote.noteId)) {\n    toastService.showError('Cannot move notes here.');\n    return;\n}\n\nfor (const branchIdToMove of branchIdsToMove) {\n    const resp = await server.put(`branches/${branchIdToMove}/move-to-parent/${newParentBranchId}`);\n\n    if (!resp.success) {\n        toastService.showError(resp.message);\n        return;\n    }\n}\n}", "CodeBleu_score": 63.29196306936553}, {"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\t\tbranchIdsToMove = filterRootNote(branchIdsToMove);\n\tbranchIdsToMove = filterSearchBranches(branchIdsToMove);\n\n\tconst newParentBranch = froca.getBranch(newParentBranchId);\n\tconst forbiddenNoteIds = [\n\t\t'root',\n\t\thoistedNoteService.getHoistedNoteId(),\n\t\t'_lbRoot',\n\t\t'_lbAvailableLaunchers',\n\t\t'_lbVisibleLaunchers'\n\t];\n\n\tif (forbiddenNoteIds.includes(newParentBranch.noteId)) {\n\t\ttoastService.showError('Cannot move notes here.');\n\t\treturn;\n\t}\n\n\tfor (const branchIdToMove of branchIdsToMove) {\n\t\tconst resp = await server.put(`branches/${branchIdToMove}/move-to-parent/${newParentBranchId}`);\n\n\t\tif (!resp.success) {\n\t\t\ttoastService.showError(resp.message);\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 62.944715129470566}]}
{"instance_id": "2ffcc8140af6", "generation_result": [{"code": "async function activateParentNotePath(){\n\t\tconst activeContext = froca.getActiveContext();\n\tconst notePath = activeContext.notePath.slice(0, -1);\n\n\tif (notePath.length === 0) {\n\t\treturn;\n\t}\n\n\tconst parentNotePath = notePath.slice(0, -1);\n\n\tif (parentNotePath.length === 0) {\n\t\treturn;\n\t}\n\n\tconst parentNoteId = parentNotePath.join('/');\n\tconst parentNote = await froca.getNote(parentNoteId);\n\tconst parentBranch = await froca.getBranch(parentNoteId);\n\n\tif (parentNote.type === 'search') {\n\t\tawait parentNote.search(parentNote.query, parentNote.queryType, true);\n\t}\n\telse {\n\t\tawait parentBranch.show();\n\t}\n}", "CodeBleu_score": 47.32277107000062}, {"code": "async function activateParentNotePath(){\n\t\tconst activeContext = froca.getActiveContext();\n\n\tif (!activeContext) {\n\t\treturn;\n\t}\n\n\tconst notePath = activeContext.notePath;\n\n\tif (notePath.length <= 1) {\n\t\treturn;\n\t}\n\n\tconst parentNotePath = notePath.slice(0, -1);\n\n\tconst parentNote = await froca.getNote(parentNotePath);\n\n\tif (!parentNote) {\n\t\treturn;\n\t}\n\n\tawait froca.setActiveNote(parentNote);\n}", "CodeBleu_score": 43.130260652173554}, {"code": "async function activateParentNotePath(){\n\t\tconst activeContext = froca.getActiveContext();\n\tconst parentNotePath = activeContext.notePath.slice(0, -1);\n\n\tif (parentNotePath.length > 0) {\n\t\tconst parentNote = froca.getNote(parentNotePath);\n\t\tawait appContext.triggerCommand('activateNote', {noteId: parentNote.noteId});\n\t}\n}", "CodeBleu_score": 54.34272444710593}]}
{"instance_id": "04b13e7ad9f6", "generation_result": [{"code": "async function copy(branchIds){\n\t\tif (isClipboardEmpty()) {\n\t\treturn;\n\t}\n\n\tconst clipboardBranches = branchIds.map(branchId => froca.getBranch(branchId));\n\n\tconst clipboardHtmlLinks = [];\n\n\tfor (const clipboardBranch of clipboardBranches) {\n\t\tconst clipboardNote = await clipboardBranch.getNote();\n\n\t\tconst clipboardLink = linkService.createNoteLink(clipboardNote.noteId);\n\n\t\tclipboardHtmlLinks.push(clipboardLink.outerHTML);\n\t}\n\n\tif (isElectron) {\n\t\tconst clipboard = electron.clipboard;\n\n\t\tclipboard.write({\n\t\t\thtml: clipboardHtmlLinks.join(''),\n\t\t\ttext: clipboardHtmlLinks.join('\n')\n\t\t});\n\t}\n\telse {\n\t\tconst clipboard = document.querySelector('body');\n\n\t\tclipboard.textContent = clipboardHtmlLinks.join('');\n\t}\n\n\tclipboardBranchIds = branchIds;\n\tclipboardMode = 'copy';\n\n\ttoastService.showInfo('Copied to clipboard');\n}", "CodeBleu_score": 44.59026915026265}, {"code": "async function copy(branchIds){\n\t\tif (isClipboardEmpty()) {\n\t\treturn;\n\t}\n\n\tif (clipboardMode === 'cut') {\n\t\tawait branchService.deleteBranches(clipboardBranchIds);\n\n\t\tclipboardBranchIds = [];\n\t\tclipboardMode = null;\n\t}\n\telse if (clipboardMode === 'copy') {\n\t\t// copy will keep clipboardBranchIds and clipboardMode, so it's possible to paste into multiple places\n\t\treturn;\n\t}\n\telse {\n\t\ttoastService.throwError(`Unrecognized clipboard mode=${clipboardMode}`);\n\t}\n\n\tconst clipboardBranches = branchIds.map(branchId => froca.getBranch(branchId));\n\n\tconst clipboardNotes = await Promise.all(clipboardBranches.map(async clipboardBranch => {\n\t\tconst clipboardNote = await clipboardBranch.getNote();\n\n\t\treturn clipboardNote;\n\t}));\n\n\tconst clipboardNotesHtml = clipboardNotes.map(clipboardNote => linkService.getHtml(clipboardNote));\n\n\tconst clipboardHtml = clipboardNotesHtml.join('');\n\n\tif (utils.isElectron()) {\n\t\tconst electron = window.require('electron');\n\n\t\telectron.clipboard.write({\n\t\t\ttext: clipboardHtml\n\t\t});\n\t}\n\telse {\n\t\tconst dummy = document.createElement('textarea');\n\t\tdummy.style.display = 'none';\n\t\tdocument.body.appendChild(dummy);\n\t\tdummy.value = clipboardHtml;\n\t\tdummy.select();\n\t\tdocument.execCommand('copy');\n\t\tdocument.body.removeChild(dummy);\n\t}\n\n\ttoastService.showInfo(`Copied ${clipboardNotesHtml.length} notes to clipboard`);\n}", "CodeBleu_score": 37.95423587331646}, {"code": "async function copy(branchIds){\n\t\tif (branchIds.length === 0) {\n\t\ttoastService.throwError('No branches selected');\n\t\treturn;\n\t}\n\n\tif (isClipboardEmpty()) {\n\t\tclipboardBranchIds = branchIds;\n\t\tclipboardMode = 'copy';\n\t}\n\telse if (clipboardMode === 'copy') {\n\t\tclipboardBranchIds = clipboardBranchIds.concat(branchIds);\n\t}\n\telse if (clipboardMode === 'cut') {\n\t\tconst branchesToMove = branchIds.filter(branchId => !clipboardBranchIds.includes(branchId));\n\n\t\tawait branchService.moveAfterBranch(branchesToMove, clipboardBranchIds[0]);\n\n\t\tclipboardBranchIds = [];\n\t\tclipboardMode = null;\n\t}\n\telse {\n\t\ttoastService.throwError(`Unrecognized clipboard mode=${clipboardMode}`);\n\t}\n\n\tconst branches = branchIds.map(branchId => froca.getBranch(branchId));\n\n\tconst clipboardHtml = await linkService.createClipboardHtml(branches);\n\n\tif (isElectron()) {\n\t\tconst clipboard = electron.clipboard;\n\t\tclipboard.write({\n\t\t\t'html': clipboardHtml,\n\t\t\t'text': clipboardHtml\n\t\t});\n\t}\n\telse {\n\t\tconst clipboard = document.getElementById('clipboard');\n\t\tclipboard.value = clipboardHtml;\n\t\tclipboard.select();\n\t}\n\n\ttoastService.showInfo(`Copied ${branchIds.length} branch${branchIds.length === 1 ? '' : 'es'} to clipboard`);\n}", "CodeBleu_score": 41.79536986377403}]}
{"instance_id": "b3a6cce6e5ce", "generation_result": [{"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\t\tlet new_list: IHostsListObject[] = []\n\n\tconst flatten = (list: IHostsListObject[]): IHostsListObject[] => {\n\t\tlet new_list: IHostsListObject[] = []\n\n\t\tlist.map((item) => {\n\t\t\tnew_list.push(item)\n\t\t\tif (item.children) {\n\t\t\t\tnew_list = [...new_list, ...flatten(item.children)]\n\t\t\t}\n\t\t})\n\n\t\treturn new_list\n\t}\n\n\tconst cleanItem = (item: IHostsListObject) => {\n\t\tif (item.type === 'folder') {\n\t\t\titem.children = item.children || []\n\t\t} else if (item.type === 'group') {\n\t\t\titem.include = item.include || []\n\t\t}\n\t\titem.content = ''\n\t}\n\n\tnew_list = flatten(data.list)\n\tnew_list.map((item) => cleanItem(item))\n\n\tdata.list = new_list\n\n\treturn data\n}", "CodeBleu_score": 43.73214026997374}, {"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\t\n  let new_data: IHostsBasicData = []\n  let flatten_data: IHostsListObject[] = flatten(data)\n\n  flatten_data.map((item) => {\n    if (item.type === 'folder') {\n      if (!item.children) {\n        item.children = []\n      }\n      if (!item.content) {\n        item.content = ''\n      }\n    } else if (item.type === 'group') {\n      if (!item.include) {\n        item.include = []\n      }\n      if (!item.content) {\n        item.content = ''\n      }\n    } else {\n      if (!item.content) {\n        item.content = ''\n      }\n    }\n    new_data.push(item)\n  })\n\n  return new_data\n}", "CodeBleu_score": 46.089278237748935}, {"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\t\n  const new_data: IHostsBasicData = lodash.cloneDeep(data)\n\n  const flatten_list = flatten(new_data.list)\n\n  flatten_list.map((item) => {\n    if (item.type === 'folder') {\n      if (!item.children) {\n        item.children = []\n      }\n      item.content = ''\n    } else if (item.type === 'group') {\n      if (!item.include) {\n        item.include = []\n      }\n      item.content = ''\n    } else {\n      item.content = ''\n    }\n  })\n\n  return new_data\n}", "CodeBleu_score": 52.02956652961153}]}
{"instance_id": "a494fe11a98c", "generation_result": [{"code": "const addHistory = async (content: string) =>{\n\t\tconst limit = await configGet('history.limit')\n\tif (limit > 0) {\n\t\tconst history = await getHistoryList()\n\t\tif (history.length >= limit) {\n\t\t\tconst ids = history.map((v) => v.id)\n\t\t\tawait deleteHistory(ids.slice(0, history.length - limit + 1))\n\t\t}\n\t\tawait swhdb.history.add({\n\t\t\tid: uuid4(),\n\t\t\tcontent,\n\t\t\ttimestamp: Date.now(),\n\t\t})\n\t}\n}", "CodeBleu_score": 31.057115668584185}, {"code": "const addHistory = async (content: string) =>{\n\t\tconst limit = await configGet('history.limit')\n\tif (limit && !isNaN(Number(limit)) && Number(limit) > 0) {\n\t\tconst historyList = await getHistoryList()\n\t\tconst historyCount = historyList.length\n\t\tif (historyCount >= limit) {\n\t\t\tawait deleteHistory(historyList[0].id)\n\t\t}\n\t\tconst id = uuid4()\n\t\tconst timestamp = new Date()\n\t\tawait swhdb.history.add({\n\t\t\tid,\n\t\t\tcontent,\n\t\t\ttimestamp,\n\t\t})\n\t}\n}", "CodeBleu_score": 28.829651674793723}, {"code": "const addHistory = async (content: string) =>{\n\t\tconst historyLimit = await configGet('history_limit')\n\tif (typeof historyLimit === 'number' && historyLimit > 0) {\n\t\tconst historyList = await getHistoryList()\n\t\tif (historyList.length > historyLimit) {\n\t\t\tconst delCount = historyList.length - historyLimit\n\t\t\tfor (let i = 0; i < delCount; i++) {\n\t\t\t\tawait deleteHistory(historyList[i].id)\n\t\t\t}\n\t\t}\n\t\tawait swhdb.history.add({\n\t\t\tid: uuid4(),\n\t\t\tcontent,\n\t\t\ttimestamp: Date.now(),\n\t\t})\n\t}\n}", "CodeBleu_score": 43.13692695903274}]}
{"instance_id": "bd1413e33a8a", "generation_result": [{"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\t\tconst dataFolder = await getDataFolder()\n\tconst filePath = path.join(dataFolder, 'hosts.json')\n\tconst defaultData: IHostsBasicData = {\n\t\tversion: version.v3,\n\t\thosts: []\n\t}\n\n\ttry {\n\t\tconst content = await fs.promises.readFile(filePath, { encoding: 'utf-8' })\n\t\tconst data = JSON.parse(content)\n\t\treturn cleanHostsList(data)\n\t} catch (e) {\n\t\tconsole.error(e)\n\t\treturn defaultData\n\t}\n}", "CodeBleu_score": 48.053380567140955}, {"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\t\tconst dataFolder = await getDataFolder()\n\tconst filePath = path.join(dataFolder, 'hosts.json')\n\n\t// define a default data structure to return if the file does not exist\n\tconst defaultData: IHostsBasicData = {\n\t\tversion: version,\n\t\thosts: [],\n\t\tgroups: [],\n\t\tproxy: '',\n\t\tmode: 'direct',\n\t\trewrite: [],\n\t\tcustomHosts: [],\n\t\tcustomRules: [],\n\t\tblackList: [],\n\t\twhiteList: [],\n\t\tglobalOptions: {\n\t\t\thosts: [],\n\t\t\trewrite: [],\n\t\t},\n\t}\n\n\t// read the file content and attempt to parse it as JSON\n\tlet data: IHostsBasicData = defaultData\n\tif (fs.existsSync(filePath)) {\n\t\ttry {\n\t\t\tdata = JSON.parse(fs.readFileSync(filePath, 'utf8'))\n\t\t} catch (e) {\n\t\t\tconsole.error(e)\n\t\t}\n\t}\n\n\t// clean the data\n\tdata = cleanHostsList(data)\n\n\treturn data\n}", "CodeBleu_score": 45.30065815022144}, {"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\t\tconst dataFolder = await getDataFolder()\n\tconst filePath = path.join(dataFolder, 'hosts.json')\n\n\ttry {\n\t\tconst data = fs.readFileSync(filePath, 'utf-8')\n\t\tconst json = JSON.parse(data)\n\t\treturn cleanHostsList(json)\n\t} catch (e) {\n\t\tconsole.error(e)\n\t\treturn {\n\t\t\tversion: version as VersionType,\n\t\t\thosts: [],\n\t\t}\n\t}\n}", "CodeBleu_score": 41.56632951537843}]}
{"instance_id": "1a746af7c945", "generation_result": [{"code": "async function getSwhDb(): Promise<PotDb>{\n\t\tif (!global.swhdb) {\n\t\tlet data_dir: string = await getDataFolder()\n\t\tlet db_dir: string = path.join(data_dir, 'swh')\n\t\tswhdb = new PotDb(db_dir)\n\t\tconsole.log(`swh db: ${swhdb.dir}`)\n\t\tglobal.swhdb = swhdb\n\t} else {\n\t\tswhdb = global.swhdb\n\t}\n\treturn swhdb\n}", "CodeBleu_score": 59.66014698309294}, {"code": "async function getSwhDb(): Promise<PotDb>{\n\t\tif (!global.swhdb) {\n\t\tlet data_dir: string = await getDataFolder()\n\t\tlet db_dir: string = path.join(data_dir, 'swh')\n\t\tswhdb = new PotDb(db_dir)\n\t\tconsole.log(`swh db: ${swhdb.dir}`)\n\t\tglobal.swhdb = swhdb\n\t} else {\n\t\tswhdb = global.swhdb\n\t}\n\treturn swhdb\n}", "CodeBleu_score": 59.66014698309294}, {"code": "async function getSwhDb(): Promise<PotDb>{\n\t\tif (!global.swhdb) {\n\t\tlet db_dir: string = await getDataFolder()\n\t\tswhdb = new PotDb(db_dir)\n\t\tconsole.log(`swh db: ${swhdb.dir}`)\n\t\tglobal.swhdb = swhdb\n\t} else {\n\t\tswhdb = global.swhdb\n\t}\n\n\treturn swhdb\n}", "CodeBleu_score": 47.98293013217806}]}
{"instance_id": "375d71e6f391", "generation_result": [{"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\t\tconst refreshInterval = configGet('refreshInterval')\n\tconst lastRefresh = hosts.lastRefresh\n\tconst now = new Date().getTime()\n\n\tif (!lastRefresh) {\n\t\treturn true\n\t}\n\n\tconst elapsed = now - lastRefresh\n\treturn elapsed > refreshInterval\n}", "CodeBleu_score": 28.55440635273545}, {"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\t\tconst { refresh_interval, url } = hosts\n\n\tif (!refresh_interval || !url) {\n\t\treturn false\n\t}\n\n\tconst ts_last_refresh = hosts.ts_last_refresh || 0\n\tconst ts_now = Date.now()\n\n\tif (!ts_last_refresh) {\n\t\treturn true\n\t}\n\n\tconst elapsed = ts_now - ts_last_refresh\n\n\treturn elapsed >= refresh_interval\n}", "CodeBleu_score": 35.28058933802682}, {"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\t\tif (!hosts.refresh_interval || !hosts.url) {\n\t\treturn false\n\t}\n\tif (!hosts.last_refresh) {\n\t\treturn true\n\t}\n\n\tconst elapsed = Math.floor((Date.now() - hosts.last_refresh) / 1000)\n\tif (elapsed >= hosts.refresh_interval) {\n\t\treturn true\n\t}\n\n\treturn false\n}", "CodeBleu_score": 31.009698570265066}]}
{"instance_id": "e9824782738b", "generation_result": [{"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst callbackId = `cb_${x_get_idx++}`\n\t\tee.once(callbackId, (err, data) => {\n\t\t\tif (err) {\n\t\t\t\treject(err)\n\t\t\t} else {\n\t\t\t\tresolve(data)\n\t\t\t}\n\t\t})\n\t\tipcRenderer.send('action', {\n\t\t\taction,\n\t\t\tparams,\n\t\t\tcallbackId,\n\t\t})\n\t})\n}", "CodeBleu_score": 47.858949390779316}, {"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\t\tconst callbackId = `${action}${x_get_idx}`\n\tx_get_idx += 1\n\treturn new Promise((resolve, reject) => {\n\t\tee.once(callbackId, (err: Error | null, data: any) => {\n\t\t\tif (err) {\n\t\t\t\treturn reject(err)\n\t\t\t}\n\t\t\tresolve(data)\n\t\t})\n\t\tipcRenderer.send('action', {\n\t\t\taction,\n\t\t\tparams,\n\t\t\tcallbackId,\n\t\t})\n\t})\n}", "CodeBleu_score": 43.89328019061845}, {"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\t\tconst callbackId = `${Date.now()}${Math.floor(Math.random() * 10000)}${x_get_idx++}`\n\n\treturn new Promise((resolve, reject) => {\n\t\tee.once(callbackId, (result: any) => {\n\t\t\tif (result.success) {\n\t\t\t\tresolve(result.data)\n\t\t\t} else {\n\t\t\t\treject(result.error)\n\t\t\t}\n\t\t})\n\n\t\tipcRenderer.send('action', { action, params, callbackId })\n\t})\n}", "CodeBleu_score": 44.07929790350903}]}
{"instance_id": "027bc2903865", "generation_result": [{"code": "const loadContent = async (is_new = false) =>{\n\t\tif (ref_cm.current) {\n\t\tif (is_new) {\n\t\t\tref_cm.current.clearHistory()\n\t\t}\n\t\tconst hosts = hosts_data[hosts_id]\n\t\tif (hosts) {\n\t\t\tconst content = await agent.get_hosts_content(hosts.id)\n\t\t\tif (content) {\n\t\t\t\tsetContent(content)\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 33.45240890768474}, {"code": "const loadContent = async (is_new = false) =>{\n\t\tif (ref_cm.current) {\n\t\tif (is_new) {\n\t\t\tref_cm.current.clearHistory()\n\t\t}\n\n\t\tif (hosts_id === '0') {\n\t\t\tconst res = await agent.system.getHosts()\n\t\t\tif (res) {\n\t\t\t\tconst { content } = res\n\t\t\t\tsetContent(content)\n\t\t\t}\n\t\t} else {\n\t\t\tconst res = await agent.hosts.getHostsContent(hosts_id)\n\t\t\tif (res) {\n\t\t\t\tconst { content } = res\n\t\t\t\tsetContent(content)\n\t\t\t}\n\t\t}\n\t} else {\n\t\tawait wait(100)\n\t\tawait loadContent(is_new)\n\t}\n}", "CodeBleu_score": 37.78465465257176}, {"code": "const loadContent = async (is_new = false) =>{\n\t\tif (!ref_cm.current) return\n\tif (is_new) {\n\t\tref_cm.current.setValue('')\n\t\tref_cm.current.clearHistory()\n\t}\n\tif (!ref_cm.current) return\n\tlet content = ''\n\tif (hosts_id === '0') {\n\t\tcontent = await agent.system.get_hosts()\n\t} else {\n\t\tconst hosts = hosts_data.find((h) => h.id === hosts_id)\n\t\tif (hosts) {\n\t\t\tcontent = hosts.content\n\t\t}\n\t}\n\tif (content) {\n\t\tsetContent(content)\n\t\tref_cm.current.setValue(content)\n\t}\n}", "CodeBleu_score": 38.48520746820193}]}
{"instance_id": "199f8fb90016", "generation_result": [{"code": "const onGutterClick = (n: number) =>{\n\t\tconst cm_editor = ref_cm.current\n\tif (is_read_only || !cm_editor) return\n\n\tconst line = cm_editor.lineInfo(n)\n\tif (!line || !line.text) return\n\n\ttoggleComment()\n}", "CodeBleu_score": 24.784532312891525}, {"code": "const onGutterClick = (n: number) =>{\n\t\tif (is_read_only || !ref_cm.current) return\n\tconst cm_editor = ref_cm.current\n\tconst line = cm_editor.getLine(n)\n\tif (!line || !line.trim()) return\n\ttoggleComment()\n\t// \u5149\u6807\u79fb\u5230\u4e0b\u4e00\u884c\n\tlet cursor = cm_editor.getCursor()\n\tcursor.line += 1\n\tcm_editor.setCursor(cursor)\n}", "CodeBleu_score": 28.751519369325727}, {"code": "const onGutterClick = (n: number) =>{\n\t\tlet cm_editor = ref_cm.current\n\tif (is_read_only || !cm_editor) return\n\tlet line = cm_editor.getLine(n)\n\tif (!line.trim()) return\n\n\ttoggleComment()\n\n\t// \u5149\u6807\u79fb\u5230\u4e0b\u4e00\u884c\n\tlet cursor = cm_editor.getCursor()\n\tcursor.line += 1\n\tcm_editor.setCursor(cursor)\n}", "CodeBleu_score": 33.22516148685593}]}
{"instance_id": "000e8aa4c16c", "generation_result": [{"code": "bool CommandLineParser::parse(const QStringList& args){\n\tm_foundArgs.clear();\nm_foundOptions.clear();\nm_actualNode = m_rootNode;\n// check version\nif (m_foundOptions.contains(versionOption)) {\nif (m_foundArgs.size() > 1) {\nerr << QStringLiteral(\"The version option cannot be used with other arguments.\");\nreturn false;\n}\nout << qApp->applicationName() << \" \" << qApp->applicationVersion();\nreturn true;\n}\n// check help\nif (m_foundOptions.contains(helpOption)) {\nif (!m_foundArgs.isEmpty()) {\nerr << QStringLiteral(\"The help option cannot be used with other arguments.\");\nreturn false;\n}\nout << qApp->applicationName() << \" \" << qApp->applicationVersion();\nout << m_description;\nout << optionsToString(m_rootNode.options, m_rootNode.subNodes);\nreturn true;\n}\n// process arguments\nauto actualIt = args.cbegin();\nwhile (actualIt != args.cend()) {\n// check if help\nif (processIfOptionIsHelp(args, actualIt, m_actualNode)) {\ncontinue;\n}\n// check if version\nif (processIfOptionIsVersion(args, actualIt, m_actualNode)) {\ncontinue;\n}\n// check if subcommand\nif (processIfOptionIsSubcommand(args, actualIt, m_actualNode)) {\ncontinue;\n}\n// check if option\nif (processIfOptionIsOption(args, actualIt, m_actualNode)) {\ncontinue;\n}\n// check if argument\nif (processIfOptionIsArgument(args, actualIt, m_actualNode)) {\ncontinue;\n}\n// check if subcommand\nif (processIfOptionIsSubcommand(args, actualIt, m_actualNode)) {\ncontinue;\n}\n// if we are here, we didn't find a valid option, argument or subcommand\nerr << QStringLiteral(\"'%1' is not a valid argument or option.\")\n.arg(*actualIt);\nreturn false;\n}\nreturn true;\n}", "CodeBleu_score": 42.19845561565659}, {"code": "bool CommandLineParser::parse(const QStringList& args){\n\t", "CodeBleu_score": 1.6015576757374008}, {"code": "bool CommandLineParser::parse(const QStringList& args){\n\t", "CodeBleu_score": 1.6015576757374008}]}
{"instance_id": "2f02436b366f", "generation_result": [{"code": "void ButtonListView::updateComponents(){\n\t\n\tm_listButtons = ConfigHandler::getButtons();\n\tfor (int i = 0; i < this->count(); ++i) {\n\t\tQListWidgetItem* item = this->item(i);\n\t\tCaptureTool::Type bType = m_buttonTypeByName[item->text()];\n\t\tif (m_listButtons.contains(bType)) {\n\t\t\titem->setCheckState(Qt::Checked);\n\t\t} else {\n\t\t\titem->setCheckState(Qt::Unchecked);\n\t\t}\n\t}\n}", "CodeBleu_score": 63.85906991646003}, {"code": "void ButtonListView::updateComponents(){\n\t \n// TODO refactor so we don't need external sorts\n    using bt = CaptureTool::Type;\n    std::sort(m_listButtons.begin(), m_listButtons.end(), [](bt a, bt b) {\n        return CaptureToolButton::getPriorityByButton(a) < CaptureToolButton::getPriorityByButton(b);\n    });\n    for (int i = 0; i < this->count(); ++i) {\n        QListWidgetItem* item = this->item(i);\n        CaptureTool::Type bType = m_buttonTypeByName[item->text()];\n        if (m_listButtons.contains(bType)) {\n            item->setCheckState(Qt::Checked);\n        } else {\n            item->setCheckState(Qt::Unchecked);\n        }\n    }\n}", "CodeBleu_score": 64.61928516967055}, {"code": "void ButtonListView::updateComponents(){\n\t  // TODO refactor so we don't need external sorts\n    QList<CaptureTool::Type> listButtons = ConfigHandler().getButtons();\n    using bt = CaptureTool::Type;\n    std::sort(listButtons.begin(), listButtons.end(), [](bt a, bt b) {\n        return CaptureToolButton::getPriorityByButton(a) < CaptureToolButton::getPriorityByButton(b);\n    });\n    for (int i = 0; i < this->count(); ++i) {\n        QListWidgetItem* item = this->item(i);\n        CaptureTool::Type bType = m_buttonTypeByName[item->text()];\n        if (listButtons.contains(bType)) {\n            item->setCheckState(Qt::Checked);\n        } else {\n            item->setCheckState(Qt::Unchecked);\n        }\n    }\n}", "CodeBleu_score": 65.26830667762758}]}
{"instance_id": "578e98634572", "generation_result": [{"code": "void ColorPickerEditor::addPreset(){\n\t\tQColor color = QColor(m_colorInput->text());\n\tif (m_colorList.contains(color)) {\n\t\treturn;\n\t}\n\n\tif (m_colorList.size() == 17) {\n\t\tQMessageBox::warning(this, tr(\"Warning\"), tr(\"Maximum number of presets reached\"));\n\t\treturn;\n\t}\n\n\tm_colorList.append(color);\n\tm_config.setUserColors(m_colorList);\n}", "CodeBleu_score": 48.51169602543127}, {"code": "void ColorPickerEditor::addPreset(){\n\t\tif (m_colorList.contains(m_color)) {\n\t\treturn;\n\t}\n\tif (m_colorList.size() == GlobalValues::maxUserColors()) {\n\t\tQMessageBox::warning(this, tr(\"Error\"), tr(\"Maximum number of presets reached\"));\n\t\treturn;\n\t}\n\tm_colorList.append(m_color);\n\tm_config.setUserColors(m_colorList);\n\temit presetsSwapped(m_colorList.size() - 1);\n}", "CodeBleu_score": 55.728894721669796}, {"code": "void ColorPickerEditor::addPreset(){\n\t\tconst auto color = QColor(m_colorInput->text());\n\tif (m_colorList.contains(color)) {\n\t\treturn;\n\t}\n\tif (m_colorList.size() >= 17) {\n\t\tQMessageBox::critical(this, tr(\"Error\"), tr(\"Maximum number of presets reached!\"));\n\t\treturn;\n\t}\n\tm_colorList.append(color);\n\tm_config.setUserColors(m_colorList);\n\tm_colorEdit->setText(m_colorList[m_selectedIndex].name(QColor::HexRgb));\n}", "CodeBleu_score": 56.762411457995384}]}
{"instance_id": "3f8c1770cd2e", "generation_result": [{"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\t", "CodeBleu_score": 8.500866798722518}, {"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\t\n// Set the size policy to expand horizontally and vertically.\n  this->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);\n\n// Create horizontal and vertical layouts.\n  QHBoxLayout* horizontalLayout = new QHBoxLayout(this);\n  QVBoxLayout* verticalLayout = new QVBoxLayout();\n\n// Configure spacing using font metrics.\n  QFontMetrics fontMetrics(QApplication::font());\n  int verticalSpacing = fontMetrics.lineSpacing();\n\n// Align the vertical layout to the center.\n  verticalLayout->setAlignment(Qt::AlignCenter);\n\n// Initialize buttons.\n  QPushButton* okButton = new QPushButton(tr(\"OK\"));\n  QPushButton* cancelButton = new QPushButton(tr(\"Cancel\"));\n  connect(okButton, &QPushButton::clicked, this, &UIcolorEditor::accept);\n  connect(cancelButton, &QPushButton::clicked, this, &UIcolorEditor::reject);\n\n// Initialize a color wheel.\n  QColorWheel* colorWheel = new QColorWheel(this);\n\n// Add spacing to the vertical layout.\n  verticalLayout->addSpacerItem(new QSpacerItem(0, verticalSpacing));\n\n// Integrate the color wheel into the horizontal layout.\n  horizontalLayout->addWidget(colorWheel);\n\n// Add spacing to the vertical layout.\n  verticalLayout->addSpacerItem(new QSpacerItem(0, verticalSpacing));\n\n// Integrate the buttons into the vertical layout.\n  verticalLayout->addWidget(okButton);\n  verticalLayout->addWidget(cancelButton);\n\n// Add spacing to the vertical layout.\n  verticalLayout->addSpacerItem(new QSpacerItem(0, verticalSpacing));\n\n// Integrate the vertical layout into the horizontal layout.\n  horizontalLayout->addLayout(verticalLayout);\n\n// Set the main layout for the widget.\n  this->setLayout(horizontalLayout);\n\n// Update the components.\n  this->updateComponents();\n}", "CodeBleu_score": 41.83933064943241}, {"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\t\tthis->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);\n\n\t// Create horizontal and vertical layouts.\n\tQVBoxLayout* mainLayout = new QVBoxLayout(this);\n\tQHBoxLayout* horizontalLayout = new QHBoxLayout();\n\tQVBoxLayout* verticalLayout = new QVBoxLayout();\n\n\t// Set spacing using font metrics.\n\tint fontHeight = QFontMetrics(this->font()).height();\n\tint horizontalSpacing = fontHeight / 2;\n\tint verticalSpacing = fontHeight / 4;\n\n\t// Align the vertical layout to the center.\n\tverticalLayout->setAlignment(Qt::AlignCenter);\n\n\t// Create buttons.\n\tQPushButton* button = new QPushButton(tr(\"Apply\"));\n\tQPushButton* resetButton = new QPushButton(tr(\"Reset\"));\n\tQPushButton* cancelButton = new QPushButton(tr(\"Cancel\"));\n\n\t// Create color wheel.\n\tQColorWheel* colorWheel = new QColorWheel(this);\n\n\t// Add spacing to the vertical layout.\n\tverticalLayout->addSpacing(verticalSpacing);\n\n\t// Integrate the vertical layout into the horizontal layout.\n\thorizontalLayout->addLayout(verticalLayout);\n\n\t// Add spacing to the horizontal layout.\n\thorizontalLayout->addSpacing(horizontalSpacing);\n\n\t// Integrate the horizontal layout into the main layout.\n\tmainLayout->addLayout(horizontalLayout);\n\n\t// Set the main layout for the widget.\n\tthis->setLayout(mainLayout);\n\n\t// Connect buttons to their respective slots.\n\tconnect(button, &QPushButton::clicked, this, &UIcolorEditor::apply);\n\tconnect(resetButton, &QPushButton::clicked, this, &UIcolorEditor::reset);\n\tconnect(cancelButton, &QPushButton::clicked, this, &UIcolorEditor::cancel);\n\n\t// Set the color wheel.\n\tthis->setColorWheel(colorWheel);\n\n\t// Update components.\n\tthis->updateComponents();\n}", "CodeBleu_score": 36.48817692091168}]}
{"instance_id": "ad86ef280917", "generation_result": [{"code": "void Flameshot::full(const CaptureRequest& req){\n\t#if defined(Q_OS_MACOS)\n    // This is required on MacOS because of Mission Control. If you'll switch to\n    // another Desktop you cannot take a new screenshot from the tray, you have\n    // to switch back to the Flameshot Desktop manually. It is not obvious and a\n    // large number of users are confused and report a bug.\n    if (m_captureWindow != nullptr) {\n        m_captureWindow->close();\n        delete m_captureWindow;\n        m_captureWindow = nullptr;\n    }\n#endif\n\n    if (nullptr == m_captureWindow) {\n        // TODO is this unnecessary now?\n        int timeout = 5000; // 5 seconds\n        const int delay = 100;\n        QWidget* modalWidget = nullptr;\n        for (; timeout >= 0; timeout -= delay) {\n            modalWidget = qApp->activeModalWidget();\n            if (nullptr == modalWidget) {\n                break;\n            }\n            modalWidget->close();\n            modalWidget->deleteLater();\n            QThread::msleep(delay);\n        }\n        if (0 == timeout) {\n            QMessageBox::warning(\n              nullptr, tr(\"Error\"), tr(\"Unable to close active modal widgets\"));\n            return;\n        }\n\n        m_captureWindow = new CaptureWidget(req);\n\n#ifdef Q_OS_WIN\n        m_captureWindow->show();\n#elif defined(Q_OS_MACOS)\n        // In \"Emulate fullscreen mode\"\n        m_captureWindow->showFullScreen();\n        m_captureWindow->activateWindow();\n        m_captureWindow->raise();\n#else\n        m_captureWindow->showFullScreen();\n//        m_captureWindow->show(); // For CaptureWidget Debugging under Linux\n#endif\n    } else {\n        emit captureFailed();\n    }\n}", "CodeBleu_score": 43.47716948292714}, {"code": "void Flameshot::full(const CaptureRequest& req){\n\t if (!resolveAnyConfigErrors()) {\n return;\n }\n bool ok = true;\n QPixmap p(ScreenGrabber().grabScreen(ok));\n if (ok) {\n QRect geometry = ScreenGrabber().screenGeometry();\n QRect region = req.initialSelection();\n if (region.isNull()) {\n region = ScreenGrabber().screenGeometry();\n } else {\n QRect screenGeom = ScreenGrabber().screenGeometry();\n screenGeom.moveTopLeft({ 0, 0 });\n region = region.intersected(screenGeom);\n p = p.copy(region);\n }\n if (req.tasks() & CaptureRequest::PIN) {\n // change geometry for pin task\n req.addPinTask(region);\n }\n exportCapture(p, geometry, req);\n } else {\n emit captureFailed();\n }\n}", "CodeBleu_score": 74.4106253892475}, {"code": "void Flameshot::full(const CaptureRequest& req){\n\tif (!resolveAnyConfigErrors()) {\nreturn;\n}\n\nbool ok = true;\nQPixmap p(ScreenGrabber().grabScreen(ok));\nif (ok) {\nQRect geometry = ScreenGrabber().screenGeometry();\nQRect region = req.initialSelection();\nif (region.isNull()) {\nregion = ScreenGrabber().screenGeometry();\n} else {\nQRect screenGeom = ScreenGrabber().screenGeometry();\nscreenGeom.moveTopLeft({ 0, 0 });\nregion = region.intersected(screenGeom);\np = p.copy(region);\n}\nif (req.tasks() & CaptureRequest::PIN) {\n// change geometry for pin task\nreq.addPinTask(region);\n}\nexportCapture(p, geometry, req);\n} else {\nemit captureFailed();\n}\n}", "CodeBleu_score": 73.70022474432707}]}
{"instance_id": "42abe47d0da0", "generation_result": [{"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\tif (instance()) {\ninstance()->attachScreenshotToClipboard(capture);\nreturn;\n}\n\nQByteArray data;\nQDataStream stream(&data, QIODevice::WriteOnly);\nstream << capture;\nQDBusMessage m = createMethodCall(QStringLiteral(\"attachScreenshotToClipboard\"));\nm << data;\ncall(m);\n}", "CodeBleu_score": 84.54753434277916}, {"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\t#ifdef Q_OS_WIN\n    if (instance()) {\n        instance()->attachScreenshotToClipboard(capture);\n        return;\n    }\n\n    QByteArray data;\n    QDataStream stream(&data, QIODevice::WriteOnly);\n    stream << capture;\n    QDBusMessage m = createMethodCall(QStringLiteral(\"attachScreenshotToClipboard\"));\n    m << data;\n    call(m);\n#else\n    QGuiApplication::clipboard()->setImage(capture);\n#endif\n}", "CodeBleu_score": 83.56558769544775}, {"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\t#ifdef Q_OS_WIN\n    // On Windows, the clipboard is only used to store the last screenshot\n    // in order to be able to paste it with Ctrl+V.\n    QApplication::clipboard()->setPixmap(capture);\n#else\n    if (instance()) {\n        instance()->attachScreenshotToClipboard(capture);\n        return;\n    }\n\n    QByteArray data;\n    QDataStream stream(&data, QIODevice::WriteOnly);\n    stream << capture;\n    QDBusMessage m = createMethodCall(QStringLiteral(\"attachScreenshotToClipboard\"));\n    m << data;\n    call(m);\n#endif\n}", "CodeBleu_score": 83.66607830526105}]}
{"instance_id": "4276c0025e1f", "generation_result": [{"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\t#if defined(Q_OS_LINUX)\n    if (!notification.isEmpty()) {\n        qDebug() << notification;\n    }\n#endif\n\n    m_hostingClipboard = true;\n    QClipboard* clipboard = QApplication::clipboard();\n    clipboard->blockSignals(true);\n    // This variable is necessary because the signal doesn't get blocked on windows for some reason\n    m_clipboardSignalBlocked = true;\n    clipboard->setText(text);\n    clipboard->blockSignals(false);\n}", "CodeBleu_score": 87.04977539633262}, {"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\tm_hostingClipboard = true;\nQClipboard* clipboard = QApplication::clipboard();\nclipboard->blockSignals(true);\n// This variable is necessary because the signal doesn't get blocked on\n// windows for some reason\nm_clipboardSignalBlocked = true;\nif (!notification.isEmpty()) {\nQTimer::singleShot(0, [=]() {\nqDebug() << \"Flameshot: \" << notification;\n});\n}\nsaveToClipboard(text);\nclipboard->blockSignals(false);\n}", "CodeBleu_score": 76.29467267269118}, {"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\t#if defined(Q_OS_LINUX)\n    if (!notification.isEmpty()) {\n        qDebug() << notification;\n    }\n#endif\n    m_hostingClipboard = true;\n    QClipboard* clipboard = QApplication::clipboard();\n    clipboard->blockSignals(true);\n    // This variable is necessary because the signal doesn't get blocked on\n    // windows for some reason\n    m_clipboardSignalBlocked = true;\n    clipboard->setText(text);\n    clipboard->blockSignals(false);\n}", "CodeBleu_score": 87.04977539633262}]}
{"instance_id": "ef69a941bff6", "generation_result": [{"code": "void AcceptTool::pressed(CaptureContext& context){\n\t\tif (context.currentTask() && context.currentTask()->type() == Task::Type::PIN) {\n\t\tQRect selection = context.selection();\n\t\tQRect pinTask = context.currentTask()->geometry();\n\t\tpinTask.moveTopLeft(context.currentTask()->widgetOffset() + selection.topLeft());\n\t\tcontext.setSelection(pinTask);\n\t}\n\tcontext.setShouldClose(true);\n\temit requestCapture(context);\n}", "CodeBleu_score": 43.97200418671582}, {"code": "void AcceptTool::pressed(CaptureContext& context){\n\t#if defined(Q_OS_MACOS)\n    if (context.widget) {\n        context.widget->setGeometry(context.widget->geometry().translated(-context.widget->parentWidget()->mapToGlobal(QPoint(0, 0))));\n    }\n#endif\n    context.request = context.request.withPin(context.widget ? context.widget->geometry() : QRect());\n    emit context.request.accept();\n    emit context.request.closeGui();\n}", "CodeBleu_score": 36.47360170850459}, {"code": "void AcceptTool::pressed(CaptureContext& context){\n\t\tQ_UNUSED(context)\n\temit requestCapture(context.requestId, context.selection, context.pinTask);\n\temit requestClose();\n}", "CodeBleu_score": 21.60182135250678}]}
{"instance_id": "954477282486", "generation_result": [{"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\t\tint count = 0;\n\tforeach (const QString& file, dir.entryList(QStringList() << QStringLiteral(\\\"*.desktop\\\"), QDir::Files | QDir::NoDotAndDotDot)) {\n\t\tbool ok = false;\n\t\tDesktopAppData app = parseDesktopFile(dir.absoluteFilePath(file), ok);\n\t\tif (ok) {\n\t\t\tm_applications.append(app);\n\t\t\t++count;\n\t\t}\n\t}\n\treturn count;\n}", "CodeBleu_score": 49.02796087810707}, {"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\t\tint newEntries = 0;\n\tQStringList desktopFiles = dir.entryList(QStringList(QStringLiteral(\\\"*.desktop\\\")), QDir::Files, QDir::Name);\n\tfor (const QString& desktopFile : desktopFiles) {\n\t\tDesktopAppData appData;\n\t\tbool ok = false;\n\t\tappData = parseDesktopFile(dir.absoluteFilePath(desktopFile), ok);\n\t\tif (ok) {\n\t\t\tnewEntries++;\n\t\t\tm_applications.append(appData);\n\t\t}\n\t}\n\treturn newEntries;\n}", "CodeBleu_score": 46.50989504794774}, {"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\t\tint newEntries = 0;\n\tQDirIterator it(dir.absolutePath(), QStringList() << QStringLiteral(\\\"*.desktop\\\"), QDir::Files, QDirIterator::Subdirectories);\n\twhile (it.hasNext()) {\n\t\tDesktopAppData appData;\n\t\tbool ok = false;\n\t\tappData = parseDesktopFile(it.next(), ok);\n\t\tif (ok) {\n\t\t\tm_applications.append(appData);\n\t\t\tnewEntries++;\n\t\t}\n\t}\n\treturn newEntries;\n}", "CodeBleu_score": 44.78258654298999}]}
{"instance_id": "e17fc5c9d6d0", "generation_result": [{"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\t\tQMap<QString, QVector<DesktopAppData>> res;\n\tfor (const DesktopAppData& app : qAsConst(m_appList)) {\n\t\tfor (const QString& category : categories) {\n\t\t\tif (app.categories.contains(category)) {\n\t\t\t\tif (!res.contains(category)) {\n\t\t\t\t\tres.insert(category, QVector<DesktopAppData>());\n\t\t\t\t}\n\t\t\t\tres[category].append(app);\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}", "CodeBleu_score": 84.76577538645506}, {"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\t\tQMap<QString, QVector<DesktopAppData>> res;\n\tfor (const DesktopAppData& app : qAsConst(m_appList)) {\n\t\tfor (const QString& category : categories) {\n\t\t\tif (app.categories.contains(category)) {\n\t\t\t\tres[category].append(app);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}", "CodeBleu_score": 86.62790383337027}, {"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\t\tQMap<QString, QVector<DesktopAppData>> res;\n\tfor (const DesktopAppData& app : qAsConst(m_appList)) {\n\t\tfor (const QString& category : categories) {\n\t\t\tif (app.categories.contains(category)) {\n\t\t\t\tif (res.contains(category)) {\n\t\t\t\t\tres[category].append(app);\n\t\t\t\t} else {\n\t\t\t\t\tQVector<DesktopAppData> apps;\n\t\t\t\t\tapps.append(app);\n\t\t\t\t\tres.insert(category, apps);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}", "CodeBleu_score": 82.87598424660175}]}
{"instance_id": "1e9cb2fcafe5", "generation_result": [{"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\t#if defined(Q_OS_WIN)\n    QString pathWithExtension = path + \".png\";\n#elif defined(Q_OS_MACOS)\n    QString pathWithExtension = path + \".png\";\n#else\n    QString pathWithExtension = path + \".jpg\";\n#endif\n    QFile file(pathWithExtension);\n    if (!file.open(QIODevice::WriteOnly)) {\n        Logger::getInstance().error(\n            messagePrefix + \" \" + pathWithExtension + \" \" + file.errorString());\n        return false;\n    }\n    QImageWriter writer(&file);\n    writer.setQuality(100);\n    if (!writer.write(capture.toImage())) {\n        Logger::getInstance().error(\n            messagePrefix + \" \" + pathWithExtension + \" \" + writer.errorString());\n        file.close();\n        return false;\n    }\n    file.close();\n    Logger::getInstance().info(messagePrefix + \" \" + pathWithExtension);\n    return true;\n}", "CodeBleu_score": 31.148381608742643}, {"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\t\tQString completePath = properScreenshotPath(path);\n\tQFileInfo fileInfo(completePath);\n\tQFile file(completePath);\n\tbool success = true;\n\tQString saveMessage = QString(\"%1: %2\").arg(messagePrefix, completePath);\n\n\tif (!file.open(QIODevice::WriteOnly)) {\n\t\tsuccess = false;\n\t\tsaveMessage += QString(\"\n%1: %2\").arg(tr(\"Error opening file\"), file.errorString());\n\t\tqWarning() << saveMessage;\n\t\treturn success;\n\t}\n\n\t// Get the format from the file extension\n\tQByteArray format = fileInfo.suffix().toUtf8();\n\tif (format.isEmpty()) {\n\t\tformat = \"png\";\n\t}\n\n\t// Set the format to the image\n\tQByteArray formatUpper = format.toUpper();\n\tQImageWriter writer(&file, formatUpper);\n\tif (!writer.write(capture)) {\n\t\tsuccess = false;\n\t\tsaveMessage += QString(\"\n%1: %2\").arg(tr(\"Error writing file\"), writer.errorString());\n\t\tqWarning() << saveMessage;\n\t}\n\n\tfile.close();\n\tqInfo() << saveMessage;\n\treturn success;\n}", "CodeBleu_score": 38.70945478903366}, {"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\t", "CodeBleu_score": 1.951405616144113}]}
{"instance_id": "ba67f6b4e974", "generation_result": [{"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\t\tthis->active.clear();\n\n\tfor (auto &id : load_order) {\n\t\tauto it = available.find(id);\n\t\tif (it == available.end()) {\n\t\t\tLOG(ERROR) << \"modpack '\" << id << \"' is not available\";\n\t\t\tcontinue;\n\t\t}\n\n\t\tthis->active.emplace(it->first, it->second);\n\t\tLOG(INFO) << \"activated modpack '\" << id << \"'\";\n\t}\n}", "CodeBleu_score": 52.808750059381524}, {"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\t\tthis->active.clear();\n\tfor (const auto &id : load_order) {\n\t\tauto it = this->available.find(id);\n\t\tif (it == this->available.end()) {\n\t\t\tthrow std::runtime_error(\"modpack \\\"\" + id + \"\\\" not found\");\n\t\t}\n\t\tthis->active.emplace(id, it->second);\n\t\tLOG(INFO) << \"activated modpack \\\"\" << id << \"\\\"\";\n\t}\n}", "CodeBleu_score": 56.12627840628309}, {"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\t\tthis->active.clear();\n\tfor (const auto &id : load_order) {\n\t\tif (!this->available.contains(id)) {\n\t\t\tlogger->error(\"Modpack {} is not available.\", id);\n\t\t\tcontinue;\n\t\t}\n\t\tthis->active.emplace(id, this->available[id]);\n\t\tlogger->info(\"Modpack {} is activated.\", id);\n\t}\n}", "CodeBleu_score": 53.01933189692899}]}
{"instance_id": "da92dbc3907b", "generation_result": [{"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\t\t// Make a set of requested modpacks\n\tstd::unordered_set<std::string> requested;\n\tfor (const auto &modpack_id : load_order) {\n\t\trequested.emplace(modpack_id);\n\t}\n\n\t// Check if requested modpacks are available\n\tfor (const auto &modpack_id : requested) {\n\t\tif (!this->available.contains(modpack_id)) {\n\t\t\tthrow std::runtime_error(std::string(\"Requested modpack not available: \") + modpack_id);\n\t\t}\n\t}\n\n\t// Check if requested modpacks have satisfied dependencies\n\tfor (const auto &modpack_id : requested) {\n\t\tauto &modpack = this->available.at(modpack_id);\n\t\tfor (const auto &dependency : modpack.dependencies) {\n\t\t\tif (!requested.contains(dependency)) {\n\t\t\t\tthrow std::runtime_error(std::string(\"Requested modpack has unsatisfied dependency: \") + modpack_id);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check if requested modpacks have no conflicts\n\tfor (const auto &modpack_id : requested) {\n\t\tauto &modpack = this->available.at(modpack_id);\n\t\tfor (const auto &conflict : modpack.conflicts) {\n\t\t\tif (requested.contains(conflict)) {\n\t\t\t\tthrow std::runtime_error(std::string(\"Requested modpack conflicts with another modpack: \") + modpack_id);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Update the load order\n\tthis->load_order = load_order;\n}", "CodeBleu_score": 57.91759358688863}, {"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\t\t// Create a set of requested modpacks\n\tstd::unordered_set<std::string> requested(load_order.begin(), load_order.end());\n\n\t// Check if each modpack in the load order is available and verify that all dependencies are satisfied and no conflicts exist\n\tfor (const auto &modpack_id : load_order) {\n\t\t// Check if modpack is available\n\t\tif (this->available.find(modpack_id) == this->available.end()) {\n\t\t\tthrow ModManagerError(MSG(error) << \\\"Modpack \\\" << modpack_id << \\\" is not available.\\\");\n\t\t}\n\n\t\t// Check if modpack has unsatisfied dependencies\n\t\tauto &modpack = this->available.at(modpack_id);\n\t\tfor (const auto &dependency_id : modpack.dependencies) {\n\t\t\tif (requested.find(dependency_id) == requested.end()) {\n\t\t\t\tthrow ModManagerError(MSG(error) << \\\"Modpack \\\" << modpack_id << \\\" depends on \\\" << dependency_id << \\\" which is not in the load order.\\\");\n\t\t\t}\n\t\t}\n\n\t\t// Check if modpack conflicts with another modpack\n\t\tfor (const auto &conflict_id : modpack.conflicts) {\n\t\t\tif (requested.find(conflict_id) != requested.end()) {\n\t\t\t\tthrow ModManagerError(MSG(error) << \\\"Modpack \\\" << modpack_id << \\\" conflicts with \\\" << conflict_id << \\\" which is in the load order.\\\");\n\t\t\t}\n\t\t}\n\t}\n\n\t// Update load order\n\tthis->load_order = load_order;\n}", "CodeBleu_score": 57.32001671624254}, {"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\t\tstd::unordered_set<std::string> requested_modpacks;\n\n\tfor (const auto &modpack_id : load_order) {\n\n\t\tif (this->available.find(modpack_id) == this->available.end()) {\n\n\t\t\tthrow std::runtime_error(\\\"modpack \\\" + modpack_id + \\\" not available\\\");\n\n\t\t}\n\n\t\trequested_modpacks.emplace(modpack_id);\n\n\t}\n\n\n\t// Verify dependencies and conflicts\n\n\tfor (const auto &modpack_id : requested_modpacks) {\n\n\t\tauto &modpack = this->available.at(modpack_id);\n\n\t\tfor (const auto &dependency : modpack.dependencies) {\n\n\t\t\tif (requested_modpacks.find(dependency) == requested_modpacks.end()) {\n\n\t\t\t\tthrow std::runtime_error(\\\"modpack \\\" + modpack_id + \\\" depends on \\\" + dependency + \\\" which is not active\\\");\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor (const auto &conflict : modpack.conflicts) {\n\n\t\t\tif (requested_modpacks.find(conflict) != requested_modpacks.end()) {\n\n\t\t\t\tthrow std::runtime_error(\\\"modpack \\\" + modpack_id + \\\" conflicts with \\\" + conflict + \\\" which is already active\\\");\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\t// Update load order\n\n\tthis->load_order = load_order;\n\n}", "CodeBleu_score": 51.68709800198248}]}
{"instance_id": "103e298ff430", "generation_result": [{"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\t\tif (not available) {\n\t\treturn;\n\t}\n\n\tfor (auto &sound_file : sound_files) {\n\t\tauto key = hash_sound_key(sound_file);\n\n\t\tif (resources.count(key)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tauto resource = std::make_shared<SoundImpl>(sound_file);\n\t\tresources.insert({key, resource});\n\t}\n}", "CodeBleu_score": 61.87371445399884}, {"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\t\tif (not this->available) {\n\t\treturn;\n\t}\n\n\tfor (const auto &sound_file : sound_files) {\n\t\t// check if resource is already loaded\n\t\tauto key = hash_string(sound_file.category, sound_file.id);\n\t\tif (resources.find(key) != resources.end()) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// create resource\n\t\tauto resource = std::make_shared<SoundImpl>(sound_file.category, sound_file.id, sound_file.path);\n\t\tresources.insert({key, resource});\n\t}\n}", "CodeBleu_score": 71.76430430597289}, {"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\t\tif (not available)\n\t\treturn;\n\n\t// iterate through sound files\n\tfor (const auto &sound_file : sound_files) {\n\t\t// create unique key for resource\n\t\tauto key = hash_string(sound_file.category + \"_\" + std::to_string(sound_file.id));\n\n\t\t// skip loading if already loaded\n\t\tif (resources.find(key) != resources.end())\n\t\t\tcontinue;\n\n\t\t// create resource\n\t\tauto resource = std::make_shared<SoundImpl>(sound_file);\n\t\t// add to map\n\t\tresources.insert({key, resource});\n\t}\n}", "CodeBleu_score": 59.932318667429094}]}
{"instance_id": "700caeffaaac", "generation_result": [{"code": "Sound AudioManager::get_sound(category_t category, int id){\n\t\tif (not this->available) {\n\t\tthrow error(error_code_t::AUDIO_NOT_AVAILABLE, \"Audio is not available!\");\n\t}\n\n\tauto key = std::make_tuple(category, id);\n\n\tauto resource = this->resources.find(key);\n\tif (resource == std::end(this->resources)) {\n\t\tthrow error(error_code_t::RESOURCE_NOT_FOUND, \"Sound resource not found!\");\n\t}\n\n\tauto sound = std::make_shared<SoundImpl>(this, resource->second);\n\treturn Sound(this, sound);\n}", "CodeBleu_score": 47.49496962224385}, {"code": "Sound AudioManager::get_sound(category_t category, int id){\n\t\tif (not this->available) {\n\t\tthrow error(error_type::AUDIO_NOT_AVAILABLE, \"Audio is not available\");\n\t}\n\n\tauto key = std::make_tuple(category, id);\n\tauto resource = this->resources.find(key);\n\tif (resource == std::end(this->resources)) {\n\t\tstd::stringstream ss;\n\t\tss << \"Sound resource not found: \" << category_t_to_string(category) << \" \" << id;\n\t\tthrow error(error_type::RESOURCE_NOT_FOUND, ss.str());\n\t}\n\n\tauto sound_impl = std::make_shared<SoundImpl>(this, *resource->second);\n\treturn Sound(this, sound_impl);\n}", "CodeBleu_score": 58.18476091541627}, {"code": "Sound AudioManager::get_sound(category_t category, int id){\n\t\tif (not this->available) {\n\t\tthrow Error(error_code_t::AUDIO_NOT_AVAILABLE, \"Audio is not available.\");\n\t}\n\n\tauto key = std::make_tuple(category, id);\n\tauto resource = this->resources.find(key);\n\tif (resource == std::end(this->resources)) {\n\t\tthrow Error(error_code_t::SOUND_NOT_FOUND, \"Sound not found.\");\n\t}\n\n\tauto sound_impl = std::make_shared<SoundImpl>(this, resource->second);\n\treturn Sound(this, sound_impl);\n}", "CodeBleu_score": 48.17431691289236}]}
{"instance_id": "2a0c1f0acd9f", "generation_result": [{"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\t\tauto category = sound->get_category();\n\tauto &playing_list = this->playing_sounds[category];\n\tauto sound_it = std::find(playing_list.begin(), playing_list.end(), sound);\n\tif (sound_it == playing_list.end()) {\n\t\tplaying_list.push_back(sound);\n\t}\n}", "CodeBleu_score": 74.7890173876767}, {"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\t\tauto category = sound->get_category();\n\tauto &playing_list = playing_sounds[category];\n\n\tauto it = std::find(playing_list.begin(), playing_list.end(), sound);\n\tif (it != playing_list.end()) {\n\t\t// sound is already playing\n\t\treturn;\n\t}\n\n\t// add sound to playing list\n\tplaying_list.push_back(sound);\n\n\t// if the sound is a music track,\n\t// start playing it\n\tif (category == category_t::MUSIC) {\n\t\tsound->start();\n\t}\n}", "CodeBleu_score": 70.94845395271422}, {"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\t\tauto category = sound->get_category();\n\tauto &playing_list = playing_sounds[category];\n\tauto it = std::find(std::begin(playing_list), std::end(playing_list), sound);\n\tif (it == std::end(playing_list)) {\n\t\tplaying_list.push_back(sound);\n\t}\n}", "CodeBleu_score": 73.59300357151793}]}
{"instance_id": "2c5f1f9b99b3", "generation_result": [{"code": "void Clock::update_time(){\n\t\tstd::unique_lock lock{this->mutex};\n\n\tif (this->state != ClockState::RUNNING) {\n\t\treturn;\n\t}\n\n\tauto now = simclock_t::now();\n\tauto elapsed = now - this->last_check;\n\n\tif (elapsed < std::chrono::milliseconds(1)) {\n\t\tstd::this_thread::sleep_for(std::chrono::milliseconds(1));\n\t}\n\n\telapsed = now - this->last_check;\n\n\tif (elapsed > this->max_tick_time) {\n\t\tthis->sim_time += this->max_tick_time * this->speed;\n\t\tthis->sim_real_time += this->max_tick_time * this->speed;\n\t} else {\n\t\tthis->sim_time += elapsed * this->speed;\n\t\tthis->sim_real_time += elapsed.count() / 1000.0f * this->speed;\n\t}\n\n\tthis->last_check = now;\n}", "CodeBleu_score": 68.40228488767312}, {"code": "void Clock::update_time(){\n\t\tstd::unique_lock lock{this->mutex};\n\n\tif (this->state == ClockState::RUNNING) {\n\t\tauto now = simclock_t::now();\n\t\tauto elapsed = now - this->last_check;\n\n\t\tif (elapsed < std::chrono::milliseconds(1)) {\n\t\t\tstd::this_thread::sleep_for(std::chrono::milliseconds(1));\n\t\t}\n\n\t\telapsed = now - this->last_check;\n\n\t\tif (elapsed >= this->max_tick_time) {\n\t\t\tthis->sim_time += this->speed * this->max_tick_time.count() / 1000.0f;\n\t\t\tthis->sim_real_time += this->max_tick_time.count() / 1000.0f;\n\t\t\tthis->last_check = now;\n\t\t} else {\n\t\t\tthis->sim_time += this->speed * elapsed.count() / 1000.0f;\n\t\t\tthis->sim_real_time += elapsed.count() / 1000.0f;\n\t\t\tthis->last_check = now;\n\t\t}\n\t}\n}", "CodeBleu_score": 69.67572877087854}, {"code": "void Clock::update_time(){\n\t\tstd::unique_lock lock{this->mutex};\n\tif (this->state == ClockState::RUNNING) {\n\t\tauto now = simclock_t::now();\n\t\tauto elapsed = now - this->last_check;\n\t\tif (elapsed < std::chrono::milliseconds(1)) {\n\t\t\tstd::this_thread::sleep_for(std::chrono::milliseconds(1));\n\t\t} else {\n\t\t\tif (elapsed > this->max_tick_time) {\n\t\t\t\tthis->sim_time += this->speed * this->max_tick_time.count();\n\t\t\t\tthis->sim_real_time += this->max_tick_time.count();\n\t\t\t} else {\n\t\t\t\tthis->sim_time += this->speed * elapsed.count();\n\t\t\t\tthis->sim_real_time += elapsed.count();\n\t\t\t}\n\t\t\tthis->last_check = now;\n\t\t}\n\t}\n}", "CodeBleu_score": 74.61910870955545}]}
{"instance_id": "c660f2541c89", "generation_result": [{"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\t\tthis->scene_pos = scene_pos;\n\tthis->moved = true;\n}", "CodeBleu_score": 9.838430452041672}, {"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\t\tthis->scene_pos = scene_pos;\n\n\tauto y_delta = scene_pos.y() - this->scene_pos.y();\n\tauto xz_distance = std::sqrt(std::pow(scene_pos.x() - this->scene_pos.x(), 2) +\n\t                            std::pow(scene_pos.z() - this->scene_pos.z(), 2));\n\tauto x_delta = xz_distance * std::tan(std::numbers::pi / 3.0f);\n\tauto z_delta = xz_distance * std::tan(std::numbers::pi / 6.0f);\n\n\tthis->scene_pos.x() += x_delta;\n\tthis->scene_pos.z() += z_delta;\n\tthis->scene_pos.y() += y_delta;\n\n\tthis->moved = true;\n}", "CodeBleu_score": 45.063108509267295}, {"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\t\tauto y_delta = scene_pos[1] - this->scene_pos[1];\n\tauto xz_distance = std::sqrt(std::pow(scene_pos[0] - this->scene_pos[0], 2.0f) + std::pow(scene_pos[2] - this->scene_pos[2], 2.0f));\n\n\tauto x_delta = xz_distance * std::cos(std::atan2(y_delta, xz_distance));\n\tauto z_delta = xz_distance * std::sin(std::atan2(y_delta, xz_distance));\n\n\tthis->scene_pos = {\n\t\tthis->scene_pos[0] + x_delta,\n\t\tthis->scene_pos[1],\n\t\tthis->scene_pos[2] + z_delta\n\t};\n\n\tthis->moved = true;\n}", "CodeBleu_score": 50.32662654096113}]}
{"instance_id": "3b2d44963495", "generation_result": [{"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\t\tif (projectFilesController()->isUrlSupported(url)) {\n\t\treturn DragTarget::ProjectFile;\n\t} else if (url.isLocalFile()) {\n\t\tconst muse::io::path_t& path = url.toLocalFile().toUtf8().constData();\n\t\tif (soundFontTypes()->isSoundFont(path)) {\n\t\t\treturn DragTarget::SoundFont;\n\t\t} else if (extensionInstaller()->isExtension(path)) {\n\t\t\treturn DragTarget::Extension;\n\t\t}\n\t}\n\n\treturn DragTarget::Unknown;\n}", "CodeBleu_score": 78.00402383720191}, {"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\t\tif (projectFilesController()->isUrlSupported(url)) {\n\t\treturn DragTarget::ProjectFile;\n\t}\n\n\tif (url.isLocalFile()) {\n\t\tconst auto file = url.toLocalFile();\n\t\tconst auto extension = file.split('.')[-1];\n\t\tif (extension == \"sf2\" || extension == \"SF2\") {\n\t\t\treturn DragTarget::SoundFont;\n\t\t}\n\n\t\tif (extensionInstaller()->isExtensionSupported(file)) {\n\t\t\treturn DragTarget::Extension;\n\t\t}\n\t}\n\n\treturn DragTarget::Unknown;\n}", "CodeBleu_score": 72.32374816809643}, {"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\t\tif (projectFilesController()->isUrlSupported(url)) {\n\t\treturn DragTarget::ProjectFile;\n\t}\n\n\tif (url.isLocalFile()) {\n\t\tQFile file(url.toLocalFile());\n\t\tif (file.open(QIODevice::ReadOnly)) {\n\t\t\tconst auto data = file.read(100);\n\t\t\tconst auto type = soundfont::guessType(data);\n\t\t\tif (type != soundfont::Type::Unknown) {\n\t\t\t\treturn DragTarget::SoundFont;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (extensionInstaller()->isUrlSupported(url)) {\n\t\treturn DragTarget::Extension;\n\t}\n\n\treturn DragTarget::Unknown;\n}", "CodeBleu_score": 69.83225821253433}]}
{"instance_id": "81a3cd2e265e", "generation_result": [{"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\t\tmuse::io::paths_t projects = configuration()->sessionProjectsPaths();\n\tif (projects.empty()) {\n\t\treturn;\n\t}\n\n\tmuse::io::paths_t newProjects;\n\tfor (const muse::io::path_t& path : projects) {\n\t\tif (path != projectPath) {\n\t\t\tnewProjects.push_back(path);\n\t\t}\n\t}\n\n\tif (newProjects.size() != projects.size()) {\n\t\tconfiguration()->setSessionProjectsPaths(newProjects);\n\t}\n}", "CodeBleu_score": 63.87485961230859}, {"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\t\tio::paths_t projects = configuration()->sessionProjectsPaths();\n\tif (projects.empty()) {\n\t\treturn;\n\t}\n\n\tauto it = std::find(projects.begin(), projects.end(), projectPath);\n\tif (it != projects.end()) {\n\t\tprojects.erase(it);\n\t\tconfiguration()->setSessionProjectsPaths(projects);\n\t}\n}", "CodeBleu_score": 82.85525764792227}, {"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\t\tio::paths_t projects = configuration()->sessionProjectsPaths();\n\tif (projects.empty()) {\n\t\treturn;\n\t}\n\n\tauto it = std::find(projects.begin(), projects.end(), projectPath);\n\tif (it != projects.end()) {\n\t\tprojects.erase(it);\n\t\tconfiguration()->setSessionProjectsPaths(projects);\n\t}\n}", "CodeBleu_score": 82.85525764792227}]}
{"instance_id": "98a514c0b62f", "generation_result": [{"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\tQVariantList result;\n\nfor (const ThemeInfo& theme : allThemes()) {\nif (theme.codeKey == HIGH_CONTRAST_WHITE_THEME_CODE ||\ntheme.codeKey == HIGH_CONTRAST_BLACK_THEME_CODE) {\nresult << ThemeConverter::toMap(theme);\n}\n}\n\nreturn result;\n}", "CodeBleu_score": 94.3936441675365}, {"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\tQVariantList result;\n\nfor (const ThemeInfo& theme: allThemes()) {\nif (theme.codeKey == HIGH_CONTRAST_WHITE_THEME_CODE || theme.codeKey == HIGH_CONTRAST_BLACK_THEME_CODE) {\nresult << ThemeConverter::toMap(theme);\n}\n}\n\nreturn result;\n}", "CodeBleu_score": 90.96523587547077}, {"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\tQVariantList result;\n\nfor (const ThemeInfo& theme : allThemes()) {\nif (theme.codeKey == WHITE_ON_BLACK_THEME_CODE || theme.codeKey == BLACK_ON_WHITE_THEME_CODE) {\nresult << ThemeConverter::toMap(theme);\n}\n}\n\nreturn result;\n}", "CodeBleu_score": 87.12208638152306}]}
{"instance_id": "ceff09bc116b", "generation_result": [{"code": "QVariantList PreferencesModel::availablePages() const{\n\tQVariantList pages;\n\nauto childPages = [&pages](PreferencePageItem* item) {\nif (item->id().isEmpty()) {\nreturn;\n}\n\nQVariantMap page;\npage.insert(\\\"id\\\", item->id());\npage.insert(\\\"path\\\", item->path());\npages.append(page);\n\nfor (auto child: item->childrenItems()) {\nchildPages(child);\n}\n};\n\nchildPages(m_rootItem);\n\nreturn pages;\n}", "CodeBleu_score": 29.922250205654173}, {"code": "QVariantList PreferencesModel::availablePages() const{\n\tQVariantList pages;\n\nauto childPages = [&pages](PreferencePageItem* item) {\nfor (auto child : item->childrenItems()) {\nQVariantMap page;\npage.insert(\\\"id\\\", child->id());\npage.insert(\\\"path\\\", child->path());\npages.append(page);\nchildPages(child);\n}\n};\n\nchildPages(m_rootItem);\n\nreturn pages;\n}", "CodeBleu_score": 28.539000677328207}, {"code": "QVariantList PreferencesModel::availablePages() const{\n\tQVariantList result;\n\nauto childPages = [&result](PreferencePageItem* item) {\nif (item->childCount() > 0) {\nfor (int i = 0; i < item->childCount(); ++i) {\nauto child = item->childAtRow(i);\nQVariantMap page;\npage.insert(\\\"id\\\", child->id());\npage.insert(\\\"path\\\", child->path());\nresult.append(page);\nchildPages(child);\n}\n}\n};\n\nchildPages(m_rootItem);\n\nreturn result;\n}", "CodeBleu_score": 44.6875499850804}]}
{"instance_id": "88e5ca72d3e0", "generation_result": [{"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\t\tMenuItemList items;\n\tauto recentFiles = recentFilesModel()->recentFiles();\n\tfor (const auto &recentFile : recentFiles) {\n\t\tauto recentFileItem = makeMenuItem(\"file-open\", MenuItemRole::NoRole);\n\t\trecentFileItem->setEnabled(true);\n\t\trecentFileItem->setSelectable(true);\n\t\trecentFileItem->setArguments({recentFile.url.toString(), recentFile.displayName});\n\t\tif (recentFile.isCloud) {\n\t\t\trecentFileItem->setIcon(QIcon::fromTheme(\"cloud\"));\n\t\t}\n\t\titems.append(recentFileItem);\n\t}\n\treturn items;\n}", "CodeBleu_score": 30.35954407227989}, {"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\t\tMenuItemList items;\n\tauto recentFiles = mRecentFiles.getRecentFiles();\n\tfor (auto recentFile : recentFiles) {\n\t\tauto file = recentFile.second;\n\t\tauto item = makeMenuItem(file.displayName);\n\t\titem->setAction(\"file-open\");\n\t\titem->setData(file.url);\n\t\tif (file.isCloud) {\n\t\t\titem->setIcon(QIcon(\":/icons/cloud\"));\n\t\t}\n\t\titem->setCheckable(true);\n\t\titem->setSelectable(true);\n\t\titem->setArguments({file.url, file.displayName});\n\t\titems.push_back(item);\n\t}\n\treturn items;\n}", "CodeBleu_score": 34.92013289160234}, {"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\t\tMenuItemList items;\n\tauto recentFiles = m_recentFiles.getRecentFiles();\n\tfor (auto const &recentFile : recentFiles) {\n\t\tauto fileUrl = QUrl(recentFile.first);\n\t\tauto displayName = recentFile.second;\n\t\tauto icon = QIcon();\n\t\tif (fileUrl.scheme() == \"musescore\") {\n\t\t\ticon = QIcon::fromTheme(\"document-open-remote\");\n\t\t}\n\t\tauto item = makeMenuItem(\"file-open\", icon, TranslatableString(\"appshell/menu/recent-files\", \"&%1\").arg(displayName));\n\t\titem->setData(fileUrl);\n\t\titem->setData(displayName);\n\t\titem->setCheckable(true);\n\t\titem->setSelectable(true);\n\t\titem->setEnabled(true);\n\t\titem->setFlags(item->flags() | ItemIsUserCheckable);\n\t\titems.append(item);\n\t}\n\treturn items;\n}", "CodeBleu_score": 40.062768177563804}]}
{"instance_id": "855288a783a5", "generation_result": [{"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\t\tif (isNavigationStarted()) {\n\t\tif (byHover) {\n\t\t\tif (!isMenuOpened()) {\n\t\t\t\tsaveMUNavigationSystemState();\n\t\t\t}\n\t\t} else {\n\t\t\tif (isMenuOpened()) {\n\t\t\t\tresetNavigation();\n\t\t\t} else {\n\t\t\t\trestoreMUNavigationSystemState();\n\t\t\t}\n\t\t}\n\n\t\tif (byHover) {\n\t\t\tnavigationController()->setHighlight(menuId);\n\t\t}\n\t}\n\n\temit menuRequested(menuId, byHover);\n}", "CodeBleu_score": 46.83007559722332}, {"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\t\tif (navigationController()->hasStarted() && !isMenuOpened()) {\n\t\tif (byHover) {\n\t\t\tresetNavigation();\n\t\t} else {\n\t\t\tsaveMUNavigationSystemState();\n\t\t}\n\t}\n\n\tif (navigationController()->hasStarted()) {\n\t\tnavigationController()->setHighlight(menuId);\n\t}\n\n\tAppMenuModel::openMenu(menuId, byHover);\n}", "CodeBleu_score": 45.56116924455007}, {"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\t\tif (navigationController()->isNavigationStarted() && !isMenuOpened()) {\n\t\tif (byHover) {\n\t\t\tsaveMUNavigationSystemState();\n\t\t} else {\n\t\t\trestoreMUNavigationSystemState();\n\t\t}\n\t}\n\n\tif (navigationController()->isNavigationStarted()) {\n\t\tnavigationController()->setHighlightedMenuId(menuId);\n\t}\n\n\temit menuRequested(menuId, byHover);\n}", "CodeBleu_score": 51.5365306787727}]}
{"instance_id": "d31bdc9d40b6", "generation_result": [{"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\t\tViewMode mode = notation() ? notation()->viewMode() : ViewMode::PAGE;\n\tQString title;\n\tif (mode == ViewMode::LINE || mode == ViewMode::SYSTEM) {\n\t\ttitle = muse::TranslatableString::untranslatable(\"Continuous view\").val;\n\t}\n\tfor (auto item : ALL_MODE_MAP) {\n\t\tif (item.first == mode) {\n\t\t\tMenuItem* menuItem = makeMenuItem(item.second);\n\t\t\tmenuItem->setTitle(title);\n\t\t\treturn QVariant::fromValue(menuItem);\n\t\t}\n\t}\n\n\treturn QVariant();\n}", "CodeBleu_score": 57.65889572573195}, {"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\t\tViewMode mode = notation() ? notation()->viewMode() : ViewMode::PAGE;\n\tMenuItem* item = nullptr;\n\n\tfor (auto it = ALL_MODE_MAP.begin(); it != ALL_MODE_MAP.end(); ++it) {\n\t\tif (it.key() == mode) {\n\t\t\titem = makeMenuItem(it.value());\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (item && (mode == ViewMode::LINE || mode == ViewMode::SYSTEM)) {\n\t\titem->setTitle(muse::TranslatableString::untranslatable(\"Continuous view\"));\n\t}\n\n\treturn QVariant::fromValue(item);\n}", "CodeBleu_score": 56.60819804390089}, {"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\t\tMenuItem* item = new MenuItem(actionsRegister()->action(\"view-mode-page\"), this);\n\titem->setId(QString::fromStdString(item->action().code));\n\titem->setState(actionsRegister()->actionState(\"view-mode-page\"));\n\n\tViewMode mode = ViewMode::PAGE;\n\tif (notation()) {\n\t\tmode = notation()->viewMode();\n\t}\n\n\tfor (const auto& pair : ALL_MODE_MAP) {\n\t\tif (pair.first == mode) {\n\t\t\titem = makeMenuItem(pair.second);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (mode == ViewMode::LINE || mode == ViewMode::SYSTEM) {\n\t\titem->setTitle(muse::TranslatableString::untranslatable(\"Continuous view\"));\n\t}\n\n\treturn QVariant::fromValue(item);\n}", "CodeBleu_score": 52.499912885151204}]}
{"instance_id": "f161c1b938c8", "generation_result": [{"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\t\n}", "CodeBleu_score": 6.308687279438888}, {"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\tif (!notation || !notation->score()) {\nreturn Ret::ErrorInvalidInput;\n}\n\nif (!supportsUnitType(notation->unitType())) {\nreturn Ret::ErrorNotSupported;\n}\n\nQBuffer buffer;\nif (!buffer.open(QIODevice::WriteOnly)) {\nreturn Ret::ErrorIO;\n}\n\nmuse::io::QIODeviceWrapper deviceWrapper(buffer);\n\nif (!notation->score()->write(deviceWrapper, notation)) {\nreturn Ret::ErrorIO;\n}\n\nQByteArray data = buffer.data();\n\nif (!destinationDevice.write(data)) {\nreturn Ret::ErrorIO;\n}\n\nreturn Ret::Success;\n}", "CodeBleu_score": 38.236379439432866}, {"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\t\tif (!notation || !notation->score()) {\n\t\treturn muse::Ret::Error;\n\t}\n\tif (!supportsUnitType(notation->unitType())) {\n\t\treturn muse::Ret::Error;\n\t}\n\tif (!notation->score()->isScoreValid()) {\n\t\treturn muse::Ret::Error;\n\t}\n\tif (!notation->score()->isScoreComplete()) {\n\t\treturn muse::Ret::Error;\n\t}\n\tif (!notation->score()->isScoreConsistent()) {\n\t\treturn muse::Ret::Error;\n\t}\n\tQBuffer buffer;\n\tbuffer.open(QBuffer::WriteOnly);\n\tif (!buffer.isOpen()) {\n\t\treturn muse::Ret::Error;\n\t}\n\tnotation->score()->write(buffer, Braille());\n\tbuffer.close();\n\tQByteArray byteArray = buffer.data();\n\tdestinationDevice.write(byteArray);\n\treturn muse::Ret::Success;\n}", "CodeBleu_score": 34.15213672192431}]}
{"instance_id": "192825616947", "generation_result": [{"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\t\tstd::vector<std::string> lines = split_string(txt, 256);\n    if (lines.size() == 0) {\n        return std::string();\n    }\n    std::string ret = braille_translate(table_name, lines[0]);\n    for (int i = 1; i < lines.size(); i++) {\n        ret += \\\" \\\" + braille_translate(table_name, lines[i]);\n    }\n    return ret;\n}", "CodeBleu_score": 63.78555207607969}, {"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\t\tstd::string ret = std::string();\n\tstd::vector<std::string> lines = split_string(txt, 256);\n\n\tif (lines.size() == 0) {\n\t\treturn ret;\n\t}\n\n\tret = braille_translate(table_name, lines[0]);\n\tfor (int i = 1; i < lines.size(); i++) {\n\t\tret += \" \" + braille_translate(table_name, lines[i]);\n\t}\n\n\treturn ret;\n}", "CodeBleu_score": 65.37281227836101}, {"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\t\tstd::string ret;\n\tstd::vector<std::string> lines = split_string(txt, 256);\n\n\tif (lines.size() == 0) {\n\t\treturn ret;\n\t}\n\n\tret = braille_translate(table_name, lines[0]);\n\n\tfor (int i = 1; i < lines.size(); i++) {\n\t\tret += \" \" + braille_translate(table_name, lines[i]);\n\t}\n\n\treturn ret;\n}", "CodeBleu_score": 65.53331940270016}]}
{"instance_id": "9cfd1739fffa", "generation_result": [{"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\t\t// Load ProxyEntity\n\tauto ent = std::make_shared<ProxyEntity>();\n\tent->fn = jsonPath;\n\t// Check validity\n\tif (!ent->Load()) {\n\t\treturn nullptr;\n\t}\n\t// Check type\n\tif (ent->bean->type != ProxyEntityType::ProxyEntity) {\n\t\treturn nullptr;\n\t}\n\t// Check version\n\tif (ent->bean->version != 1) {\n\t\treturn nullptr;\n\t}\n\t// Set load control flag\n\tent->loadControl = true;\n\treturn ent;\n}", "CodeBleu_score": 31.24957203120958}, {"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\t\tauto ent = std::make_shared<ProxyEntity>();\n\tent->Load(jsonPath);\n\tif (ent->bean == nullptr || ent->bean->version == -114514) {\n\t\treturn nullptr;\n\t}\n\tauto type = ent->bean->type;\n\tauto version = ent->bean->version;\n\tent->bean = nullptr;\n\tswitch (type) {\n\tcase ProxyEntity::ProxyType::ProxyGroup: {\n\t\tauto group = std::make_shared<Group>();\n\t\tgroup->Load(jsonPath);\n\t\tif (group->id == -114514) {\n\t\t\treturn nullptr;\n\t\t}\n\t\treturn group;\n\t}\n\tcase ProxyEntity::ProxyType::ProxyProfile: {\n\t\tauto profile = std::make_shared<Profile>();\n\t\tprofile->Load(jsonPath);\n\t\tif (profile->id == -114514) {\n\t\t\treturn nullptr;\n\t\t}\n\t\treturn profile;\n\t}\n\tdefault:\n\t\treturn nullptr;\n\t}\n}", "CodeBleu_score": 41.37303023028257}, {"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\t\tauto ent = std::make_shared<ProxyEntity>();\n\tif (!ent->Load(jsonPath)) {\n\t\treturn nullptr;\n\t}\n\t// Ensure the version is valid\n\tif (ent->bean->version != PROXY_VERSION) {\n\t\treturn nullptr;\n\t}\n\t// Ensure the type is valid\n\tif (ent->bean->type == ProxyEntity::ProxyType::Proxy) {\n\t\tent->SetLoadControl(true);\n\t\tent->fn = jsonPath;\n\t\tent->Load();\n\t}\n\treturn ent;\n}", "CodeBleu_score": 35.83930208723268}]}
{"instance_id": "d2d7a08c10d4", "generation_result": [{"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\t\t// https://github.com/XTLS/Xray-core/discussions/716\n\tauto url = QUrl(link);\n\tif (!url.isValid()) return false;\n\n\tname = url.fragment(QUrl::FullyDecoded);\n\tserverAddress = url.host();\n\tserverPort = url.port();\n\tusername = url.userName();\n\tpassword = url.password();\n\n\tif (serverPort == -1) serverPort = 443;\n\tif (username.isEmpty()) username = \"none\";\n\tif (password.isEmpty()) password = \"none\";\n\n\t// protocol\n\tprotocol = GetQueryValue(GetQuery(url), \"protocol\", \"https\");\n\tif (protocol != \"https\") return false;\n\n\treturn !(username.isEmpty() || password.isEmpty() || serverAddress.isEmpty());\n}", "CodeBleu_score": 79.24491616042626}, {"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\t\tauto url = QUrl(link);\n\tif (!url.isValid()) return false;\n\n\tname = url.fragment(QUrl::FullyDecoded);\n\tserverAddress = url.host();\n\tserverPort = url.port();\n\tmethod = url.userName();\n\tpassword = url.password();\n\n\treturn !(serverAddress.isEmpty() || method.isEmpty() || password.isEmpty());\n}", "CodeBleu_score": 64.82274497762093}, {"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\t\t// https://github.com/XTLS/Xray-core/discussions/716\n\tauto url = QUrl(link);\n\tif (!url.isValid()) return false;\n\tname = url.fragment(QUrl::FullyDecoded);\n\tserverAddress = url.host();\n\tserverPort = url.port();\n\tusername = url.userName();\n\tpassword = url.password();\n\tif (serverPort == -1) serverPort = 443;\n\treturn !(username.isEmpty() || password.isEmpty() || serverAddress.isEmpty());\n}", "CodeBleu_score": 74.54619971967927}]}
{"instance_id": "2f666eafb5f4", "generation_result": [{"code": "bool JsonStore::Save(){\n\t#ifdef Q_OS_WIN\n    if (callback_before_save != nullptr) callback_before_save();\n\n    if (!allow_save) {\n        qDebug() << \\\"Not allowed to save\\\";\n        return false;\n    }\n\n    QFile file(path);\n    if (file.open(QIODevice::ReadOnly)) {\n        QByteArray data = file.readAll();\n        if (data == ToJsonBytes()) {\n            qDebug() << \\\"No changes detected\\\";\n            return false;\n        }\n    }\n\n    qDebug() << \\\"Saving...\\\";\n    file.open(QIODevice::WriteOnly);\n    file.write(ToJsonBytes());\n    file.close();\n    qDebug() << \\\"Saved\\\";\n\n    if (callback_after_save != nullptr) callback_after_save();\n    return true;\n#else\n    if (callback_before_save != nullptr) callback_before_save();\n\n    if (!allow_save) {\n        qDebug() << \\\"Not allowed to save\\\";\n        return false;\n    }\n\n    QFile file(path);\n    if (file.open(QIODevice::ReadOnly)) {\n        QByteArray data = file.readAll();\n        if (data == ToJsonBytes()) {\n            qDebug() << \\\"No changes detected\\\";\n            return false;\n        }\n    }\n\n    qDebug() << \\\"Saving...\\\";\n    file.open(QIODevice::WriteOnly);\n    file.write(ToJsonBytes());\n    file.close();\n    qDebug() << \\\"Saved\\\";\n\n    if (callback_after_save != nullptr) callback_after_save();\n    return true;\n#endif\n}", "CodeBleu_score": 43.3169113430693}, {"code": "bool JsonStore::Save(){\n\t#ifdef Q_OS_WIN\n    if (callback_before_save != nullptr) callback_before_save();\n#endif\n\n    // \u4fdd\u5b58\u524d\u7684\u56de\u8c03\n    if (callback_before_save != nullptr) callback_before_save();\n\n    // \u4fdd\u5b58\u524d\u68c0\u67e5\u662f\u5426\u5141\u8bb8\u4fdd\u5b58\n    if (flag_disable_save) return false;\n\n    QFile file(file_path);\n\n    if (!file.open(QIODevice::ReadOnly | QIODevice::Text)) {\n\n        // qDebug() << \\\"Open File\\\" << file_path << \\\"Failed\\\" << file.errorString();\n\n        return false;\n\n    }\n\n    QByteArray last;\n\n    while (!file.atEnd()) {\n\n        last.append(file.readLine());\n\n    }\n\n    file.close();\n\n\n    auto current = ToJsonBytes();\n\n    if (last == current) return false;\n\n\n    if (!file.open(QIODevice::WriteOnly | QIODevice::Text)) {\n\n        // qDebug() << \\\"Open File\\\" << file_path << \\\"Failed\\\" << file.errorString();\n\n        return false;\n\n    }\n\n    file.write(current);\n\n    file.close();\n\n\n    // \u4fdd\u5b58\u540e\u7684\u56de\u8c03\n    if (callback_after_save != nullptr) callback_after_save();\n\n    return true;\n\n}", "CodeBleu_score": 56.560457082491546}, {"code": "bool JsonStore::Save(){\n\t\tif (callback_before_save != nullptr) callback_before_save();\n\tif (flag_disable_save) return false;\n\n\tQByteArray json = ToJsonBytes();\n\tif (json == last_saved_content) return false;\n\n\tQFile file(path_file);\n\tif (!file.open(QIODevice::WriteOnly | QIODevice::Text)) {\n\t\tqDebug() << \\\"JsonStore::Save() failed to open file\\\" << path_file;\n\t\treturn false;\n\t}\n\tQTextStream stream(&file);\n\tstream << json;\n\tlast_saved_content = json;\n\treturn true;\n}", "CodeBleu_score": 53.97115702185356}]}
{"instance_id": "1fb63372333c", "generation_result": [{"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\t\tQTimer *timer = new QTimer(obj);\n\ttimer->setSingleShot(true);\n\tQObject::connect(timer, &QTimer::timeout, [=]() {\n\t\tcallback();\n\t\ttimer->deleteLater();\n\t});\n\ttimer->start(timeout);\n}", "CodeBleu_score": 58.23840620579477}, {"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\t\t// any thread\n\tauto *timer = new QTimer();\n\ttimer->setParent(obj);\n\ttimer->setSingleShot(true);\n\tQObject::connect(timer, &QTimer::timeout, [=]() {\n\t\t// main thread\n\t\tcallback();\n\t\ttimer->deleteLater();\n\t});\n\tQMetaObject::invokeMethod(timer, \"start\", Qt::QueuedConnection, Q_ARG(int, timeout));\n}", "CodeBleu_score": 58.482006975420894}, {"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\t\tQTimer *timer = new QTimer(obj);\n\ttimer->setSingleShot(true);\n\tQObject::connect(timer, &QTimer::timeout, [=]() {\n\t\tcallback();\n\t\ttimer->deleteLater();\n\t});\n\ttimer->start(timeout);\n}", "CodeBleu_score": 58.23840620579477}]}
{"instance_id": "150b7aeeeb35", "generation_result": [{"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\t#ifdef QT_DEBUG\n    qDebug() << \\\"Network reply: \\\" << networkReply->attribute(QNetworkRequest::HttpStatusCodeAttribute).toInt();\n#endif\n\n    // check for network errors\n    if (networkReply->error() != QNetworkReply::NoError) {\n        statusCode = networkReply->error();\n        return QByteArray();\n    }\n\n    // check for server-side gRPC errors\n    if (networkReply->hasRawHeader(GrpcStatusHeader)) {\n        statusCode = QNetworkReply::ProtocolUnknownError;\n        QString grpcStatus = networkReply->rawHeader(GrpcStatusHeader);\n        qDebug() << \\\"gRPC status: \\\" << grpcStatus;\n        return QByteArray();\n    }\n\n    statusCode = QNetworkReply::NoError;\n    return networkReply->read(networkReply->bytesAvailable() - GrpcMessageSizeHeaderSize);\n}", "CodeBleu_score": 56.084054314937944}, {"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\t\t// qDebug() << \\\"RECV: \\\" << networkReply->readAll();\n\n\tQByteArray responseData = networkReply->readAll();\n\n\tstatusCode = networkReply->error();\n\n\tif (statusCode != QNetworkReply::NoError) {\n\n\t\treturn {};\n\n\t}\n\n\tQByteArray grpcStatusHeader = networkReply->rawHeader(GrpcStatusHeader);\n\n\tif (grpcStatusHeader.isEmpty()) {\n\n\t\treturn responseData;\n\n\t}\n\n\tQByteArray grpcStatusMessage = networkReply->rawHeader(GrpcStatusMessage);\n\n\tif (grpcStatusMessage.isEmpty()) {\n\n\t\tgrpcStatusMessage = \\\"\\\";\n\n\t}\n\n\tint grpcStatus = *reinterpret_cast<const int *>(grpcStatusHeader.constData() + 1);\n\n\tif (grpcStatus != 0) {\n\n\t\tqWarning() << \\\"gRPC error \\\" << grpcStatus << \\\" \\\" << grpcStatusMessage;\n\n\t\tstatusCode = QNetworkReply::ProtocolUnknownError;\n\n\t\treturn {};\n\n\t}\n\n\treturn responseData.right(responseData.size() - GrpcMessageSizeHeaderSize);\n\n}", "CodeBleu_score": 49.904019374633805}, {"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\t#if QT_VERSION >= QT_VERSION_CHECK(5, 11, 0)\n    if (networkReply->attribute(QNetworkRequest::HttpStatusCodeAttribute) == 426) {\n        statusCode = QNetworkReply::ProtocolInvalidOperationError;\n        return {};\n    }\n#endif\n    if (networkReply->error() != QNetworkReply::NoError) {\n        statusCode = networkReply->error();\n        return {};\n    }\n\n    QByteArray response = networkReply->readAll();\n    // qDebug() << \\\"RECV: \\\" << response.size();\n\n    if (response.startsWith(GrpcMessageSizeHeader)) {\n        // gRPC error\n        int grpc_message_size = qFromBigEndian(*reinterpret_cast<const int *>(response.data() + 1));\n        if (grpc_message_size > 0) {\n            QByteArray grpc_message = response.right(grpc_message_size);\n            qWarning() << \\\"gRPC error: \\\" << grpc_message;\n            statusCode = QNetworkReply::ProtocolUnknownError;\n            return {};\n        }\n    }\n    statusCode = QNetworkReply::NoError;\n    return response.mid(GrpcMessageSizeHeaderSize);\n}", "CodeBleu_score": 58.25506842782788}]}
{"instance_id": "ecaaeadcf213", "generation_result": [{"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t\tQNetworkReply::NetworkError status = QNetworkReply::NetworkError::NetworkError;\n\tQByteArray responseArray;\n\tQMutex lock;\n\tlock.lock();\n\n\trunOnUiThread(\n\t\t[&] {\n\t\t\tstatus = default_grpc_channel->Call(\"Start\", request, &responseArray, 500);\n\t\t\tlock.unlock();\n\t\t},\n\t\tdefault_grpc_channel->nm);\n\n\tlock.lock();\n\tlock.unlock();\n\t// qDebug() << \"Start rpc status\" << status;\n\t// qDebug() << \"Start rpc response\" << responseArray.toHex();\n\n\tif (status != QNetworkReply::NetworkError::NoError) {\n\t\t*rpcOK = false;\n\t\treturn QString(\"QNetworkReply::NetworkError code: %1\n\").arg(status);\n\t}\n\tlibcore::LoadConfigResp reply;\n\tif (!reply.ParseFromArray(responseArray.data(), responseArray.size())) {\n\t\t*rpcOK = false;\n\t\treturn QString(\"Failed to parse response from server\");\n\t}\n\t*rpcOK = true;\n\treturn QString();\n}", "CodeBleu_score": 49.9423558384694}, {"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t\t*rpcOK = true;\n\tlibcore::StartResp reply;\n\tQNetworkReply::NetworkError status = default_grpc_channel->Call(\\\"Start\\\", request, &reply, 500);\n\tif (status != QNetworkReply::NetworkError::NoError) {\n\t\t*rpcOK = false;\n\t\treturn QString(\\\"QNetworkReply::NetworkError code: %1\n\\\").arg(status);\n\t}\n\treturn reply.error_msg();\n}", "CodeBleu_score": 46.40278656794074}, {"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t\tQByteArray responseArray;\n\tQNetworkReply::NetworkError status;\n\tQMutex lock;\n\tlock.lock();\n\n\trunOnUiThread(\n\t\t[&] {\n\t\t\tstatus = default_grpc_channel->Call(\"Start\", request, &reply, 500);\n\t\t\tlock.unlock();\n\t\t},\n\t\tdefault_grpc_channel->nm);\n\n\tlock.lock();\n\tlock.unlock();\n\t// qDebug() << \"rsp err\" << status;\n\t// qDebug() << \"rsp array\" << responseArray;\n\n\tif (status != QNetworkReply::NetworkError::NoError) {\n\t\t*rpcOK = false;\n\t\treturn QString(\"QNetworkReply::NetworkError code: %1\n\").arg(status);\n\t}\n\tif (!reply.ParseFromArray(responseArray.data(), responseArray.size())) {\n\t\treturn QString();\n\t}\n\t*rpcOK = true;\n\treturn QString();\n}", "CodeBleu_score": 50.888011663722295}]}
{"instance_id": "7f3365d1207f", "generation_result": [{"code": "void DialogBasicSettings::refresh_auth(){\n\t\tif (ui->inbound_auth->text().isEmpty()) {\n\t\tif (NekoGui::dataStore->inbound_auth.isEmpty()) {\n\t\t\tui->inbound_auth->setText(tr(\\\"Not required\\\"));\n\t\t\tui->inbound_auth->setIcon(QIcon(QPixmap(QStringLiteral(\\\":/icon/icons/unlocked.svg\\\"))));\n\t\t} else {\n\t\t\tui->inbound_auth->setText(tr(\\\"Required\\\"));\n\t\t\tui->inbound_auth->setIcon(QIcon(QPixmap(QStringLiteral(\\\":/icon/icons/locked.svg\\\"))));\n\t\t}\n\t}\n}", "CodeBleu_score": 48.8929411310309}, {"code": "void DialogBasicSettings::refresh_auth(){\n\t#ifdef ENABLE_OPENSSL\n    if (NekoConfig::get_instance()->inbound_auth.isEmpty()) {\n        ui->inbound_auth->setText(tr(\\\"Authentication: None\\\"));\n        ui->inbound_auth->setIcon(QIcon(QPixmap(QStringLiteral(\\\":/icons/lock.svg\\\"))));\n        ui->inbound_auth->setToolTip(tr(\\\"Authentication: None\\\"));\n    } else {\n        ui->inbound_auth->setText(tr(\\\"Authentication: %1\\\").arg(NekoConfig::get_instance()->inbound_auth));\n        ui->inbound_auth->setIcon(QIcon(QPixmap(QStringLiteral(\\\":/icons/unlock.svg\\\"))));\n        ui->inbound_auth->setToolTip(tr(\\\"Authentication: %1\\\").arg(NekoConfig::get_instance()->inbound_auth));\n    }\n#endif\n}", "CodeBleu_score": 43.486034331543436}, {"code": "void DialogBasicSettings::refresh_auth(){\n\t\tui->inbound_auth->setText(QString());\n\tif (NekoSettings::inbound_auth.isEmpty()) {\n\t\tui->inbound_auth->setIcon(QIcon(QPixmap(QStringLiteral(\":/icons/icons/unlocked.svg\"))));\n\t} else {\n\t\tui->inbound_auth->setIcon(QIcon(QPixmap(QStringLiteral(\":/icons/icons/locked.svg\"))));\n\t}\n}", "CodeBleu_score": 51.74597373556602}]}
{"instance_id": "34f643ad7662", "generation_result": [{"code": "void DialogManageGroups::on_add_clicked(){\n\t\tauto wI = new QListWidgetItem();\n\tauto w = new GroupItem(this, nullptr, wI);\n\twI->setData(114514, -1);\n\tui->listWidget->addItem(wI);\n\tui->listWidget->setItemWidget(wI, w);\n\n\tauto dialog = new DialogEditGroup(this, -1);\n\tdialog->exec();\n\tdelete dialog;\n\n\tauto __ent = NekoGui::profileManager->GetGroup(-1);\n\tif (__ent != nullptr) {\n\t\twI = new QListWidgetItem();\n\t\tw = new GroupItem(this, __ent, wI);\n\t\twI->setData(114514, -1);\n\t\tui->listWidget->addItem(wI);\n\t\tui->listWidget->setItemWidget(wI, w);\n\t}\n\n\temit NekoMainWindow::refresh();\n}", "CodeBleu_score": 46.59362221275957}, {"code": "void DialogManageGroups::on_add_clicked(){\n\t\tauto new_group = new GroupEntity();\n\tauto dialog = new DialogEditGroup(this, new_group, true);\n\tdialog->exec();\n\tdelete dialog;\n\n\tif (dialog->result() == QDialog::Accepted) {\n\t\tauto id = NekoGui::profileManager->AddGroup(new_group);\n\t\tauto wI = new QListWidgetItem();\n\t\tauto w = new GroupItem(this, new_group, wI);\n\t\twI->setData(114514, id);\n\t\tui->listWidget->addItem(wI);\n\t\tui->listWidget->setItemWidget(wI, w);\n\n\t\temit NekoGui::mainWindow->refresh_groups();\n\t}\n}", "CodeBleu_score": 51.036060924668256}, {"code": "void DialogManageGroups::on_add_clicked(){\n\t\tauto group = std::make_shared<Group>();\n\tauto dialog = new DialogEditGroup(this, group);\n\tconnect(dialog, &DialogEditGroup::refresh_signal, this, &DialogManageGroups::refresh_signal);\n\tdialog->exec();\n\tdelete dialog;\n\n\tif (group->id == 0) {\n\t\treturn;\n\t}\n\n\tauto wI = new QListWidgetItem();\n\tauto w = new GroupItem(this, group, wI);\n\twI->setData(114514, group->id);\n\tui->listWidget->addItem(wI);\n\tui->listWidget->setItemWidget(wI, w);\n\n\tNekoGui::profileManager->groups.push_back(group);\n\tNekoGui::profileManager->groupsTabOrder.push_back(group->id);\n\tNekoGui::profileManager->save();\n\n\temit refresh_signal();\n}", "CodeBleu_score": 47.78293831103447}]}
{"instance_id": "bfac51f6c4a7", "generation_result": [{"code": "void DialogManageRoutes::accept(){\n\t", "CodeBleu_score": 4.07132740121978}, {"code": "void DialogManageRoutes::accept(){\n\t", "CodeBleu_score": 4.07132740121978}, {"code": "void DialogManageRoutes::accept(){\n\t", "CodeBleu_score": 4.07132740121978}]}
{"instance_id": "ce56331f659f", "generation_result": [{"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\tmError.clear();\nmPath.setPath(path);\nstd::unique_ptr<Tileset> tileset;\n\nxml.setDevice(device);\n\nif (xml.readNextStartElement() && xml.name() == QLatin1String(\"tileset\")) {\ntileset = readTileset();\n} else {\nxml.raiseError(tr(\"Not a tileset file.\"));\n}\n\nreturn tileset;\n}", "CodeBleu_score": 64.37452282337726}, {"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\tmError.clear();\nmPath.setPath(path);\nstd::unique_ptr<Tileset> tileset;\n\nxml.setDevice(device);\n\nif (xml.readNextStartElement() && xml.name() == QLatin1String(\"tileset\")) {\ntileset = readTileset();\n} else {\nxml.raiseError(tr(\"Not a tileset file.\"));\n}\n\nreturn tileset;\n}", "CodeBleu_score": 64.37452282337726}, {"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\tmError.clear();\nmPath.setPath(path);\nmReadingExternalTileset = true;\n\nxml.setDevice(device);\n\nif (xml.readNextStartElement() && xml.name() == QLatin1String(\"tileset\")) {\nreturn readTileset();\n} else {\nxml.raiseError(tr(\"Not a tileset file.\"));\n}\n\nmReadingExternalTileset = false;\nreturn nullptr;\n}", "CodeBleu_score": 67.24057372752209}]}
{"instance_id": "c4502706d0af", "generation_result": [{"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\t\tif (lpLibFileName && isImageBlacklistedW(lpLibFileName)) {\n\t\tSetLastError(ERROR_ACCESS_DISABLED_BY_POLICY);\n\t\treturn nullptr;\n\t}\n\n\treturn s_RealLoadLibraryExW(lpLibFileName, hFile, dwFlags);\n}", "CodeBleu_score": 95.69591819485225}, {"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\tif (lpLibFileName && isImageBlacklistedW(lpLibFileName)) {\nSetLastError(ERROR_ACCESS_DISABLED_BY_POLICY);\nreturn nullptr;\n}\n\nreturn s_RealLoadLibraryExW(lpLibFileName, hFile, dwFlags);\n}", "CodeBleu_score": 95.60513217907344}, {"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\t\tif (lpLibFileName && isImageBlacklistedW(lpLibFileName)) {\n\t\tSetLastError(ERROR_ACCESS_DISABLED_BY_POLICY);\n\t\treturn nullptr;\n\t}\n\n\treturn s_RealLoadLibraryExW(lpLibFileName, hFile, dwFlags);\n}", "CodeBleu_score": 95.69591819485225}]}
{"instance_id": "d8b05a05cfe6", "generation_result": [{"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\t", "CodeBleu_score": 3.16607573165284}, {"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\t\tQUrl image;\n\n\t// Create a client for the specified computer\n\tQNetworkAccessManager* client = new QNetworkAccessManager(this);\n\tQNetworkRequest request(QUrl(QString(\"http://%1:%2/boxart/%3\").arg(computer->address).arg(computer->port).arg(appId)));\n\trequest.setAttribute(QNetworkRequest::FollowRedirectsAttribute, true);\n\trequest.setRawHeader(\"User-Agent\", \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.134 Safari/537.36\");\n\n\t// Get the path to the box art cache file\n\tQDir dir = m_BoxArtDir;\n\tif (!dir.exists(computer->uuid)) {\n\t\tdir.mkdir(computer->uuid);\n\t}\n\tdir.cd(computer->uuid);\n\tQFile cacheFile(dir.filePath(QString::number(appId) + \".png\"));\n\n\t// Download the image\n\tQNetworkReply* reply = client->get(request);\n\tQEventLoop loop;\n\tQObject::connect(reply, SIGNAL(finished()), &loop, SLOT(quit()));\n\tloop.exec();\n\tQByteArray data = reply->readAll();\n\timage = QUrl::fromLocalFile(cacheFile.fileName());\n\n\t// Save the image to the cache\n\tif (cacheFile.open(QIODevice::WriteOnly)) {\n\t\tcacheFile.write(data);\n\t\tcacheFile.close();\n\t} else {\n\t\t// Ensure that any zero-byte file is removed\n\t\tcacheFile.remove();\n\t}\n\n\t// Return the local file URL of the cached image\n\treturn image;\n}", "CodeBleu_score": 37.78187250459057}, {"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\t", "CodeBleu_score": 3.16607573165284}]}
{"instance_id": "40201ad62fc4", "generation_result": [{"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\t", "CodeBleu_score": 3.2626930800247504}, {"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\t#if defined(Q_OS_WIN)\n    // On Windows, we need to get the hostname from the computer object because\n    // the service object only contains the computer's name.\n    QString hostname = computer->getHostname();\n#else\n    QString hostname = computer->getHostname();\n#endif\n\n    // Find the best global IPv6 address\n    QHostAddress globalAddress = getBestGlobalAddressV6(addresses);\n    if (globalAddress.isNull()) {\n        qWarning() << \\\"Ignoring host with no global IPv6 address:\\\" << hostname;\n        delete computer;\n        return;\n    }\n\n    // Find the best global IPv4 address\n    QHostAddress globalAddressV4;\n    for (const QHostAddress& address : addresses) {\n        if (address.protocol() == QAbstractSocket::IPv4Protocol) {\n            globalAddressV4 = address;\n            break;\n        }\n    }\n\n    // Attempt to add the host using an IPv4 address\n    if (!globalAddressV4.isNull()) {\n        qInfo() << \\\"Adding host using IPv4 address:\\\" << hostname << \\\"@\\\" << globalAddressV4.toString();\n        addHost(hostname, globalAddressV4);\n        return;\n    }\n\n    // Attempt to add the host using an IPv6 address\n    qInfo() << \\\"Adding host using IPv6 address:\\\" << hostname << \\\"@\\\" << globalAddress.toString();\n    addHost(hostname, globalAddress);\n}", "CodeBleu_score": 47.69852262836836}, {"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\t\tqInfo() << \"Resolved mDNS host:\" << computer->service().hostname();\n\n\t// Retrieve the best global address\n\tQHostAddress address = getBestGlobalAddressV6(addresses);\n\tif (address.protocol() == QAbstractSocket::IPv6Protocol) {\n\t\t// IPv6\n\t\tif (address.isInSubnet(QHostAddress(\"fe80::\"), 10)) {\n\t\t\t// Link-local\n\t\t\tqInfo() << \"Ignoring link-local address:\" << address;\n\t\t\treturn;\n\t\t}\n\n\t\tif (address.isInSubnet(QHostAddress(\"fec0::\"), 10)) {\n\t\t\tqInfo() << \"Ignoring site-local address:\" << address;\n\t\t\treturn;\n\t\t}\n\n\t\tif (address.isInSubnet(QHostAddress(\"fc00::\"), 7)) {\n\t\t\tqInfo() << \"Ignoring ULA:\" << address;\n\t\t\treturn;\n\t\t}\n\n\t\tif (address.isInSubnet(QHostAddress(\"2002::\"), 16)) {\n\t\t\tqInfo() << \"Ignoring 6to4 address:\" << address;\n\t\t\treturn;\n\t\t}\n\n\t\tif (address.isInSubnet(QHostAddress(\"2001::\"), 32)) {\n\t\t\tqInfo() << \"Ignoring Teredo address:\" << address;\n\t\t\treturn;\n\t\t}\n\n\t\tqInfo() << \"Using IPv6 address:\" << address;\n\t}\n\telse {\n\t\t// IPv4\n\t\tfor (const QHostAddress& address : addresses) {\n\t\t\tif (address.protocol() == QAbstractSocket::IPv4Protocol) {\n\t\t\t\tqInfo() << \"Using IPv4 address:\" << address;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Add the host\n\taddHost(computer->service().hostname(), address);\n\n\t// Remove the pending computer from the list and schedule it for deletion\n\t{\n\t\tQWriteLocker lock(&m_Lock);\n\t\tm_PendingResolution.removeAll(computer);\n\t\tm_PendingDeletion.append(computer);\n\t}\n\n\t// Schedule a saveHosts() call to ensure the host is saved\n\tm_DelayedFlushThread->requestInterruption();\n\tm_DelayedFlushThread->wait();\n}", "CodeBleu_score": 51.209922456122214}]}
{"instance_id": "6a765d35d3a7", "generation_result": [{"code": "void ComputerManager::saveHost(NvComputer *computer){\n\t\tQ_ASSERT(QThread::currentThread() == m_ComputerManagerThread);\n\n\tQWriteLocker locker(&m_Lock);\n\n\t// If the host is not in the map, it's not in the list of known hosts and we can't save it\n\tif (!m_KnownHosts.contains(computer->uuid)) {\n\t\treturn;\n\t}\n\n\t// If the host hasn't changed since the last save, we don't need to save it again\n\tif (m_LastSerializedHosts.contains(computer->uuid) &&\n\t\t\tm_LastSerializedHosts[computer->uuid] == *computer) {\n\t\treturn;\n\t}\n\n\t// If the host is in the map but not in the list of known hosts, we can't save it\n\tif (!m_KnownHosts.contains(computer->uuid)) {\n\t\treturn;\n\t}\n\n\t// If the host hasn't changed since the last save, we don't need to save it again\n\tif (m_LastSerializedHosts.contains(computer->uuid) &&\n\t\t\tm_LastSerializedHosts[computer->uuid] == *computer) {\n\t\treturn;\n\t}\n\n\t// Update the last serialized hosts map under the delayed flush mutex\n\tm_LastSerializedHosts[computer->uuid] = *computer;\n\n\t// If we get here, the host has changed and we need to save it\n\tm_NeedsDelayedFlush = true;\n\tm_DelayedFlushCondition.wakeOne();\n}", "CodeBleu_score": 44.45834034260024}, {"code": "void ComputerManager::saveHost(NvComputer *computer){\n\t", "CodeBleu_score": 3.2586256447221946}, {"code": "void ComputerManager::saveHost(NvComputer *computer){\n\t\tQ_ASSERT(m_DelayedFlushThread != nullptr && m_DelayedFlushThread->isRunning());\n\n\t// Punt to a worker thread because QSettings on macOS can take ages (> 500 ms)\n\t// to persist our host list to disk (especially when a host has a bunch of apps).\n\tQMutexLocker locker(&m_DelayedFlushMutex);\n\tm_NeedsDelayedFlush = true;\n\tm_DelayedFlushCondition.wakeOne();\n}", "CodeBleu_score": 26.04458095021942}]}
{"instance_id": "01df52cf216b", "generation_result": [{"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\t\tif (newAppList == appList) {\n\t\treturn false;\n\t}\n\n\t// Copy the current app list so we can propagate client-side attributes\n\tQVector<NvApp> oldAppList = appList;\n\n\t// Copy the new list so we can propagate client-side attributes\n\tfor (NvApp& app : newAppList) {\n\t\t// Find the app in the old list\n\t\tNvApp* oldApp = nullptr;\n\t\tfor (NvApp& oldAppCandidate : oldAppList) {\n\t\t\tif (oldAppCandidate.id == app.id) {\n\t\t\t\toldApp = &oldAppCandidate;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If the app wasn't found in the old list, it's a new app, so we don't need to propagate client-side attributes\n\t\tif (!oldApp) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Copy the client-side attributes\n\t\tapp.hidden = oldApp->hidden;\n\t\tapp.directLaunch = oldApp->directLaunch;\n\t}\n\n\t// Update the app list\n\tappList = newAppList;\n\n\t// Sort the app list\n\tstd::sort(appList.begin(), appList.end(), [](const NvApp& a, const NvApp& b) {\n\t\treturn a.name.toLower() < b.name.toLower();\n\t});\n\n\treturn true;\n}", "CodeBleu_score": 55.50277444452014}, {"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\t\tQVector<NvApp> oldAppList;\n\t{\n\t\tQReadLocker readLocker(&lock);\n\t\toldAppList = appList;\n\t}\n\n\tif (oldAppList == newAppList) {\n\t\treturn false;\n\t}\n\n\t// Copy the hidden and directLaunch attributes from the old list to the new list\n\tfor (NvApp& oldApp : oldAppList) {\n\t\tfor (NvApp& newApp : newAppList) {\n\t\t\tif (oldApp.id == newApp.id) {\n\t\t\t\tnewApp.hidden = oldApp.hidden;\n\t\t\t\tnewApp.directLaunch = oldApp.directLaunch;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t{\n\t\tQWriteLocker writeLocker(&lock);\n\t\tappList = newAppList;\n\t}\n\n\t// Sort the app list\n\tsortAppList();\n\n\treturn true;\n}", "CodeBleu_score": 63.39962867734988}, {"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\t\tif (newAppList == appList) {\n\t\treturn false;\n\t}\n\n\t// Propagate client-side attributes from the existing apps to the new apps based on their IDs\n\tfor (NvApp& app : appList) {\n\t\tfor (NvApp& newApp : newAppList) {\n\t\t\tif (app.id == newApp.id) {\n\t\t\t\tnewApp.hidden = app.hidden;\n\t\t\t\tnewApp.directLaunch = app.directLaunch;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Update the app list\n\tappList = newAppList;\n\n\t// Sort the app list\n\tstd::sort(appList.begin(), appList.end());\n\n\treturn true;\n}", "CodeBleu_score": 70.00209871819995}]}
{"instance_id": "527d363b3a18", "generation_result": [{"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\t\tCommandLineParser parser;\n\tparser.setupCommonOptions();\n\tparser.setApplicationDescription(\"Quit an application on a host.\");\n\tparser.addPositionalArgument(\"host\", \"Host to quit an application on\", \"<host>\");\n\tparser.parse(args);\n\tauto posArgs = parser.positionalArguments();\n\n\tif (posArgs.isEmpty()) {\n\t\t// This method will not return and terminates the process if --version\n\t\t// or --help is specified\n\t\tparser.handleHelpAndVersionOptions();\n\t\tparser.handleUnknownOptions();\n\t} else {\n\t\t// If users supply arguments that accept values prior to the \"quit\"\n\t\t// positional argument, we will not be able to correctly parse the\n\t\t// value out of the input because this QCommandLineParser doesn't know\n\t\t// about all of the options that \"quit\" command can accept. To work\n\t\t// around this issue, we just look for \"quit\" positional arguments\n\t\t// anywhere.\n\t\tfor (int i = 0; i < posArgs.size(); i++) {\n\t\t\tQString host = posArgs.at(i);\n\t\t\tif (host.isEmpty()) {\n\t\t\t\tparser.showError(\"Invalid host\");\n\t\t\t} else {\n\t\t\t\tm_Host = host;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 54.40542103802348}, {"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\t\tCommandLineParser parser;\n\tparser.setupCommonOptions();\n\tparser.setApplicationDescription(\n\t\t\"Quit an app on a specified host.\n\"\n\t\t\"\n\"\n\t\t\"Usage: moonlight quit --host <host>\n\"\n\t\t\"       moonlight quit --help\n\"\n\t\t\"       moonlight quit --version\n\"\n\t);\n\tparser.addPositionalArgument(\"action\", \"Action to execute\", \"<action>\");\n\tparser.addPositionalArgument(\"host\", \"Host to quit an app on\", \"<host>\");\n\tparser.parse(args);\n\tauto posArgs = parser.positionalArguments();\n\n\tif (posArgs.isEmpty()) {\n\t\t// This method will not return and terminates the process if --version\n\t\t// or --help is specified\n\t\tparser.handleHelpAndVersionOptions();\n\t\tparser.handleUnknownOptions();\n\t} else {\n\t\t// If users supply arguments that accept values prior to the \"quit\"\n\t\t// positional argument, we will not be able to correctly parse the value\n\t\t// out of the input because this QCommandLineParser doesn't know about\n\t\t// all of the options that \"quit\" command can accept. To work around this\n\t\t// issue, we just look for \"quit\" positional argument anywhere.\n\t\tfor (int i = 0; i < posArgs.size(); i++) {\n\t\t\tQString action = posArgs.at(i).toLower();\n\t\t\tif (action == \"quit\") {\n\t\t\t\tm_Host = parser.value(\"host\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tparser.showError(\"Invalid action\");\n\t}\n}", "CodeBleu_score": 57.840631361495554}, {"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\t\tCommandLineParser parser;\n\tparser.setupCommonOptions();\n\tparser.setApplicationDescription(\n\t\t\"Quit an app on a specified host.\n\"\n\t\t\"\n\"\n\t\t\"Usage: moonlight quit [host]\n\"\n\t\t\"\n\"\n\t\t\"If no host is provided, the host that the current app is running on will be used.\n\"\n\t\t\"\n\"\n\t\t\"See 'moonlight --help' for more information.\"\n\t);\n\tparser.addPositionalArgument(\"host\", \"Host to quit the app on\", \"[host]\");\n\tparser.parse(args);\n\tauto posArgs = parser.positionalArguments();\n\n\tif (posArgs.isEmpty()) {\n\t\t// This method will not return and terminates the process if --version\n\t\t// or --help is specified\n\t\tparser.handleHelpAndVersionOptions();\n\t\tparser.handleUnknownOptions();\n\t\tm_Host = QString();\n\t} else {\n\t\t// If users supply arguments that accept values prior to the \"quit\"\n\t\t// positional argument, we will not be able to correctly parse the value\n\t\t// out of the input because this QCommandLineParser doesn't know about\n\t\t// all of the options that \"quit\" command can accept. To work around this\n\t\t// issue, we just look for \"quit\" positional arguments anywhere.\n\t\tfor (int i = 0; i < posArgs.size(); i++) {\n\t\t\tif (posArgs.at(i).toLower() == \"quit\") {\n\t\t\t\tm_Host = posArgs.size() > 1 ? posArgs.at(1) : QString();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tparser.showError(\"Invalid action\");\n\t}\n}", "CodeBleu_score": 55.02840785642651}]}
{"instance_id": "dca3348795d4", "generation_result": [{"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n\nint nyears = info[0].As<Napi::Number>().Int32Value();\nQDate date = this->instance->addYears(nyears);\nauto instance = QDateWrap::constructor.New({Napi::External<QDate>::New(env, new QDate(date.year(), date.month(), date.day()))});\nreturn instance;\n}", "CodeBleu_score": 94.03099746147817}, {"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n\nqint64 nyears = info[0].As<Napi::Number>().Int64Value();\nQDate date = this->instance->addYears(nyears);\nauto instance = QDateWrap::constructor.New({Napi::External<QDate>::New(env, new QDate(date.year(), date.month(), date.day()))});\nreturn instance;\n}", "CodeBleu_score": 86.17227787890913}, {"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n\nint nyears = info[0].As<Napi::Number>().Int32Value();\nQDate date = this->instance->addYears(nyears);\nauto instance = QDateWrap::constructor.New({Napi::External<QDate>::New(\n    env, new QDate(date.year(), date.month(), date.day()))});\nreturn instance;\n}", "CodeBleu_score": 98.25968182874871}]}
{"instance_id": "3f8f791368dc", "generation_result": [{"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\t Napi::Env env = info.Env();\n QDate currentDate = QDate::currentDate();\n auto instance = QDateWrap::constructor.New({Napi::External<QDate>::New(env, new QDate(currentDate.year(), currentDate.month(), currentDate.day()))});\n return instance;\n}", "CodeBleu_score": 74.0986194436493}, {"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\tNapi::Env env = info.Env();\nQDate result = QDate::currentDate();\nauto instance = QDateWrap::constructor.New({Napi::External<QDate>::New(env, new QDate(result.year(), result.month(), result.day()))});\nreturn instance;\n}", "CodeBleu_score": 82.28671515224426}, {"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\tNapi::Env env = info.Env();\nQDate result = QDate::currentDate();\nauto instance = QDateWrap::constructor.New({Napi::External<QDate>::New(env, new QDate(result.year(), result.month(), result.day()))});\nreturn instance;\n}", "CodeBleu_score": 82.28671515224426}]}
{"instance_id": "64d1b8308f8f", "generation_result": [{"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tint year = info[0].As<Napi::Number>().Int32Value();\n\tbool result = QDate::isLeapYear(year);\n\treturn Napi::Value::From(env, result);\n}", "CodeBleu_score": 84.2910075404118}, {"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nint year = info[0].As<Napi::Number>().Int32Value();\nbool result = QDate::isLeapYear(year);\nreturn Napi::Value::From(env, result);\n}", "CodeBleu_score": 84.79123686159065}, {"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nint year = info[0].As<Napi::Number>().Int32Value();\nbool result = QDate::isLeapYear(year);\nreturn Napi::Value::From(env, result);\n}", "CodeBleu_score": 84.79123686159065}]}
{"instance_id": "aef23b7ae456", "generation_result": [{"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nQDateTimeWrap* other = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(info[0].As<Napi::Object>());\nqint64 result = this->instance->daysTo(*other->getInternalInstance());\nreturn Napi::Number::New(env, result);\n}", "CodeBleu_score": 65.8888599814946}, {"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nQDateTimeWrap* other = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(info[0].As<Napi::Object>());\nqint64 result = this->instance->daysTo(*other->instance);\n\nreturn Napi::Value::From(env, result);\n\n}", "CodeBleu_score": 65.05750866930684}, {"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nNapi::Object otherObject = info[0].As<Napi::Object>();\nQDateTimeWrap* otherWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherObject);\nint result = this->instance->daysTo(*otherWrap->getInternalInstance());\nreturn Napi::Number::New(env, result);\n}", "CodeBleu_score": 88.24798296478794}]}
{"instance_id": "6acfa242f879", "generation_result": [{"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nNapi::Object otherObject = info[0].As<Napi::Object>();\nQDateTimeWrap* otherWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherObject);\nqint64 result = this->instance->msecsTo(*otherWrap->getInternalInstance());\nreturn Napi::Value::From(env, result);\n}", "CodeBleu_score": 97.79899771994887}, {"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\t Napi::Env env = info.Env();\n Napi::Object otherObject = info[0].As<Napi::Object>();\n QDateTimeWrap* otherWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherObject);\n qint64 result = this->instance->msecsTo(*otherWrap->getInternalInstance());\n return Napi::Value::From(env, result);\n}", "CodeBleu_score": 98.49056036659756}, {"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nNapi::Object otherObject = info[0].As<Napi::Object>();\nQDateTimeWrap* otherWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherObject);\nqint64 result = this->instance->msecsTo(*otherWrap->getInternalInstance());\nreturn Napi::Value::From(env, result);\n}", "CodeBleu_score": 97.79899771994887}]}
{"instance_id": "fd6c4b070349", "generation_result": [{"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\tNapi::Env env = info.Env();\nint row = info[0].As<Napi::Number>().Int32Value();\nQModelIndexWrap* parentWrap = Napi::ObjectWrap<QModelIndexWrap>::Unwrap(info[1].As<Napi::Object>());\nQModelIndex* parent = parentWrap->getInternalInstance();\nbool result = this->instance->rowIntersectsSelection(row, *parent);\nreturn Napi::Boolean::New(env, result);\n}", "CodeBleu_score": 86.18771784529525}, {"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\tNapi::Env env = info.Env();\nint row = info[0].As<Napi::Number>().Int32Value();\nQModelIndexWrap* parentWrap = Napi::ObjectWrap<QModelIndexWrap>::Unwrap(info[1].As<Napi::Object>());\nQModelIndex* parent = parentWrap->getInternalInstance();\nbool result = this->instance->rowIntersectsSelection(row, *parent);\nreturn Napi::Boolean::New(env, result);\n}", "CodeBleu_score": 86.18771784529525}, {"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\tNapi::Env env = info.Env();\nint row = info[0].As<Napi::Number>().Int32Value();\nQModelIndexWrap* parentWrap = Napi::ObjectWrap<QModelIndexWrap>::Unwrap(info[1].As<Napi::Object>());\nQModelIndex* parent = parentWrap->getInternalInstance();\nbool result = this->instance->rowIntersectsSelection(row, *parent);\nreturn Napi::Boolean::New(env, result);\n}", "CodeBleu_score": 86.18771784529525}]}
{"instance_id": "05bc5ac254cf", "generation_result": [{"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nQSizeWrap* otherSizeWrap = Napi::ObjectWrap<QSizeWrap>::Unwrap(info[0].As<Napi::Object>());\nQSize* otherSize = otherSizeWrap->getInternalInstance();\nQSize result = this->instance->expandedTo(*otherSize);\nauto resultInstance = QSizeWrap::constructor.New({Napi::External<QSize>::New(env, new QSize(result))});\nreturn resultInstance;\n}", "CodeBleu_score": 94.11266463726801}, {"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nQSizeWrap* otherSizeWrap = Napi::ObjectWrap<QSizeWrap>::Unwrap(info[0].As<Napi::Object>());\nQSize* otherSize = otherSizeWrap->getInternalInstance();\nQSize result = this->instance->expandedTo(*otherSize);\nauto resultInstance = QSizeWrap::constructor.New({Napi::External<QSize>::New(env, new QSize(result))});\nreturn resultInstance;\n}", "CodeBleu_score": 94.11266463726801}, {"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nQSizeWrap* otherSizeWrap = Napi::ObjectWrap<QSizeWrap>::Unwrap(info[0].As<Napi::Object>());\nQSize* otherSize = otherSizeWrap->getInternalInstance();\nQSize result = this->instance->expandedTo(*otherSize);\nauto resultInstance = QSizeWrap::constructor.New({Napi::External<QSize>::New(env, new QSize(result))});\nreturn resultInstance;\n}", "CodeBleu_score": 94.11266463726801}]}
{"instance_id": "1efa69400994", "generation_result": [{"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\tNapi::Env env = info.Env();\nQString result = QApplication::desktopFileName();\nreturn Napi::String::New(env, result.toStdString());\n}", "CodeBleu_score": 73.34706711387588}, {"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\tNapi::Env env = info.Env();\nQString result = QApplication::desktopFileName();\nreturn Napi::String::New(env, result.toStdString());\n}", "CodeBleu_score": 73.34706711387588}, {"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\tNapi::Env env = info.Env();\nQString result = QApplication::desktopFileName();\nreturn Napi::String::New(env, result.toStdString());\n}", "CodeBleu_score": 73.34706711387588}]}
{"instance_id": "1f5a560eaaa6", "generation_result": [{"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nNapi::Number mode = info[0].As<Napi::Number>();\nQMimeData* mimeData = this->instance->mimeData(static_cast<QClipboard::Mode>(mode.Int32Value()));\nQMimeData* mimeDataClone = new QMimeData();\n// QMimeData has no copy constructor so I do this\nQMimeDataWrap::cloneFromMimeDataToData(mimeData, mimeDataClone);\n\nauto instance = QMimeDataWrap::constructor.New({Napi::External<QMimeData>::New(env, mimeDataClone)});\nreturn instance;\n}", "CodeBleu_score": 86.24881945108773}, {"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nNapi::Number mode = info[0].As<Napi::Number>();\nQMimeData* mimeData = this->instance->mimeData(static_cast<QClipboard::Mode>(mode.Int32Value()));\nQMimeData* mimeDataClone = new QMimeData();\n// QMimeData has no copy constructor so I do this\nQMimeDataWrap::cloneFromMimeDataToData(mimeData, mimeDataClone);\n\nauto instance = QMimeDataWrap::constructor.New({Napi::External<QMimeData>::New(env, mimeDataClone)});\nreturn instance;\n}", "CodeBleu_score": 86.24881945108773}, {"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nNapi::Number mode = info[0].As<Napi::Number>();\nQMimeData* mimeData = this->instance->mimeData(static_cast<QClipboard::Mode>(mode.Int32Value()));\nQMimeData* mimeDataClone = new QMimeData();\n// QMimeData has no copy constructor so I do this\nQMimeDataWrap::cloneFromMimeDataToData(mimeData, mimeDataClone);\n\nauto instance = QMimeDataWrap::constructor.New(\n    {Napi::External<QMimeData>::New(env, mimeDataClone)});\nreturn instance;\n}", "CodeBleu_score": 89.76090364235498}]}
{"instance_id": "2c6dfc2d7eec", "generation_result": [{"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nQDrag* qDragInstance = this->instance;\nQObject* source = qDragInstance->source();\nauto instance = QObjectWrap::constructor.New({Napi::External<QObject>::New(env, source)});\nreturn instance;\n}", "CodeBleu_score": 83.32714066456732}, {"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nNapi::Object sourceObject = this->instance->source();\nauto instance = QObjectWrap::constructor.New({Napi::External<QObject>::New(env, sourceObject)});\nreturn instance;\n}", "CodeBleu_score": 76.94190442783466}, {"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nQDrag* drag = this->instance;\n\nif (!drag) {\nNapi::TypeError::New(env, \"NodeGui: QDragWrap: Invalid NodeGui object\").ThrowAsJavaScriptException();\n}\n\nQObject* source = drag->source();\n\nif (!source) {\nreturn env.Null();\n}\n\nQObjectWrap* wrapper = new QObjectWrap(source);\nwrapper->rawData = extrautils::configureComponent(wrapper->getInternalInstance());\nreturn wrapper->getInstance();\n}", "CodeBleu_score": 52.65348075188909}]}
{"instance_id": "29908bfd3b4b", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t", "CodeBleu_score": 0.5376086127673959}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t", "CodeBleu_score": 0.5376086127673959}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\nif (Option.ToolTip != null && Option.ToolTip.Visible) {\ntry {\nif (e.X >= DrawOrigin.X && e.X <= DrawOrigin.X + DrawSize.Width && e.Y >= DrawOrigin.Y && e.Y <= DrawOrigin.Y + DrawSize.Height) {\nSelectIndex = (int)Math.Floor((e.X - DrawOrigin.X) / DrawBarWidth);\n                if (Bars.Count > 0 && Bars.Any(b => b.Value.Count > SelectIndex)) {\nvar bar = Bars.First(b => b.Value.Count > SelectIndex).Value[SelectIndex];\n                    tip.Text = bar.Tips;\n                    tip.Size = new Size((int)tip.PreferredSize.Width + 10, (int)tip.PreferredSize.Height + 10);\n                    tip.Location = new Point(e.X + 10, e.Y + 10);\n                    tip.Visible = true;\n                }\n                else tip.Visible = false;\n            }\n            else tip.Visible = false;\n        }\n        catch (Exception ex) {\nLog.Write(CallerInfo.Create(), ex);\n        }\n    }\n}", "CodeBleu_score": 28.802039986083372}]}
{"instance_id": "c04d17af6942", "generation_result": [{"code": "protected override void DrawOption(Graphics g){\n\t", "CodeBleu_score": 1.5568953639659533}, {"code": "protected override void DrawOption(Graphics g){\n\t", "CodeBleu_score": 1.5568953639659533}, {"code": "protected override void DrawOption(Graphics g){\n\t", "CodeBleu_score": 1.5568953639659533}]}
{"instance_id": "1f16e1f824d0", "generation_result": [{"code": "protected virtual void DrawToolTip(Graphics g){\n\tif (selectIndex < 0) return;\n\nif (Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Line) {\nfloat x = Option.Grid.Left + selectIndex * DrawBarWidth + DrawBarWidth / 2;\ng.DrawLine(Pens.Red, x, DrawOrigin.Y, x, Height - Option.Grid.Bottom);\n}\nelse {\nRectangleF rect = new RectangleF(Option.Grid.Left + selectIndex * DrawBarWidth, DrawOrigin.Y, DrawBarWidth, DrawSize.Height);\nusing (LinearGradientBrush brush = new LinearGradientBrush(rect, Color.White, Color.White, LinearGradientMode.Vertical)) {\ng.FillRectangle(brush, rect);\n}\n}\n}", "CodeBleu_score": 41.03985472766997}, {"code": "protected virtual void DrawToolTip(Graphics g){\n\tif (Option.ToolTip == null) return;\nif (Bars.Count == 0 || selectIndex < 0) return;\n\nif (Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Line) {\nPen pen = new Pen(Option.ToolTip.AxisPointer.Color, Option.ToolTip.AxisPointer.Width);\n\ng.DrawLine(pen, new Point(Option.Grid.Left + selectIndex * DrawBarWidth, Option.Grid.Top), new Point(Option.Grid.Left + selectIndex * DrawBarWidth, Height - Option.Grid.Bottom));\n\n} else if (Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Shadow) {\ng.FillRectangle(new SolidBrush(Option.ToolTip.AxisPointer.Color), new Rectangle(Option.Grid.Left + selectIndex * DrawBarWidth, Option.Grid.Top, DrawBarWidth, Height - Option.Grid.Top - Option.Grid.Bottom));\n\n}\n\n}", "CodeBleu_score": 49.98473636466758}, {"code": "protected virtual void DrawToolTip(Graphics g){\n\t\tif (selectIndex < 0) return;\n\n\t// \u7ed8\u5236Y\u8f74\u4e0a\u7684\u63d0\u793a\u7ebf\n\tif (Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Line) {\n\t\tPen pen = new Pen(Option.ToolTip.AxisPointer.Color, Option.ToolTip.AxisPointer.Width);\n\t\tg.DrawLine(pen, Option.Grid.Left + selectIndex * DrawBarWidth, DrawOrigin.Y, Option.Grid.Left + selectIndex * DrawBarWidth, DrawOrigin.Y + DrawSize.Height);\n\t\tpen.Dispose();\n\t}\n\n\t// \u7ed8\u5236\u9634\u5f71\n\tif (Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Shadow) {\n\t\tRectangleF rect = new RectangleF(Option.Grid.Left + selectIndex * DrawBarWidth, DrawOrigin.Y, DrawBarWidth, DrawSize.Height);\n\t\tusing (LinearGradientBrush brush = new LinearGradientBrush(rect, Color.White, Color.White, LinearGradientMode.ForwardDiagonal)) {\n\t\t\tg.FillRectangle(brush, rect);\n\t\t}\n\t}\n}", "CodeBleu_score": 55.20155230923888}]}
{"instance_id": "63eac2c0afaa", "generation_result": [{"code": " protected void DrawTitle(Graphics g, UITitle title){\n\t if (string.IsNullOrEmpty(title.Text)) {\n return;\n }\n SizeF size = g.MeasureString(title.Text, title.Font);\n if (size.Width == 0 || size.Height == 0) {\n return;\n }\n // \u7ed8\u5236\u6807\u9898\n RectangleF rect = new RectangleF(0, 0, size.Width, size.Height);\n if (title.Alignment == StringAlignment.Near) {\n rect.X = 0;\n } else if (title.Alignment == StringAlignment.Center) {\n rect.X = (Width - size.Width) / 2;\n } else {\n rect.X = Width - size.Width;\n }\n if (title.Alignment == StringAlignment.Near) {\n rect.Y = 0;\n } else if (title.Alignment == StringAlignment.Center) {\n rect.Y = (Height - size.Height) / 2;\n } else {\n rect.Y = Height - size.Height;\n }\n g.TextRenderingHint = TextRenderingHint.AntiAlias;\n g.DrawString(title.Text, title.Font, title.ForeColor.ToBrush(), rect);\n // \u7ed8\u5236\u5b50\u6807\u9898\n if (string.IsNullOrEmpty(title.SubText)) {\n return;\n }\n size = g.MeasureString(title.SubText, title.SubFont);\n if (size.Width == 0 || size.Height == 0) {\n return;\n }\n rect = new RectangleF(0, 0, size.Width, size.Height);\n if (title.SubAlignment == StringAlignment.Near) {\n rect.X = 0;\n } else if (title.SubAlignment == StringAlignment.Center) {\n rect.X = (Width - size.Width) / 2;\n } else {\n rect.X = Width - size.Width;\n }\n rect.Y = rect.Height + TextInterval;\n g.TextRenderingHint = TextRenderingHint.AntiAlias;\n g.DrawString(title.SubText, title.SubFont, title.SubForeColor.ToBrush(), rect);\n }", "CodeBleu_score": 34.66155823341087}, {"code": " protected void DrawTitle(Graphics g, UITitle title){\n\t", "CodeBleu_score": 1.8961345311634397}, {"code": " protected void DrawTitle(Graphics g, UITitle title){\n\t", "CodeBleu_score": 1.8961345311634397}]}
{"instance_id": "fcb55d34cb20", "generation_result": [{"code": "protected override void CreateEmptyOption(){\n\tif (emptyOption == null) {\nemptyOption = new ChartOption() {\nTitle = new Title() {\nShow = true,\nText = \\\"\u751c\u751c\u5708\u56fe\\\",\nTextSize = 18,\nTextColor = Color.Black,\nSubText = \\\"\\\",\nSubTextSize = 12,\nSubTextColor = Color.Black,\nPosition = TitlePosition.Center,\nPositionOffset = 5,\nPositionOffsetAuto = true,\nPositionOffsetX = 0,\nPositionOffsetY = 0\n},\nLegend = new Legend() {\nShow = true,\nTextSize = 12,\nTextColor = Color.Black,\nPosition = LegendPosition.Top,\nPositionOffset = 5,\nPositionOffsetAuto = true,\nPositionOffsetX = 0,\nPositionOffsetY = 0\n},\nToolTip = new ToolTip() {\nShow = true,\nBackgroundColor = Color.White,\nTextColor = Color.Black,\nTextSize = 12\n},\nSeries = new List<Series>() {\nnew DoughnutSeries() {\nName = \\\"\u6570\u636e1\\\",\nShow = true,\nRadius = new List<float>() { 50f, 50f },\nCenter = new List<float>() { 50f, 50f },\nData = new List<float>() { 0f, 0f, 0f, 0f, 0f },\nColor = new List<Color>() { Color.Red, Color.Green, Color.Blue, Color.Yellow, Color.Purple },\nBorderColor = new List<Color>() { Color.Red, Color.Green, Color.Blue, Color.Yellow, Color.Purple },\nBorderWidth = 1,\nLabel = new Label() {\nShow = true,\nTextColor = Color.Black,\nTextSize = 12,\nPosition = LabelPosition.Inside,\nFormatter = \\\"{d}\\\"\n}\n}\n}\n};\n}\n}", "CodeBleu_score": 17.4322704736022}, {"code": "protected override void CreateEmptyOption(){\n\t", "CodeBleu_score": 0.9614019344726461}, {"code": "protected override void CreateEmptyOption(){\n\t", "CodeBleu_score": 0.9614019344726461}]}
{"instance_id": "7c0a5f0b8f45", "generation_result": [{"code": "public double[] LabelValues(){\n\tdouble[] values = new double[Count + 1];\ndouble interval = Interval;\nif (AxisType == UIAxisType.DateTime) {\nDateTimeInt64 start = new DateTimeInt64(Start);\nfor (int i = 0; i < Count + 1; i++) {\nvalues[i] = start.ToDateTime();\nstart.AddMilliseconds(IntervalMilliseconds);\n}\n}\nelse {\nfor (int i = 0; i < Count + 1; i++) {\nvalues[i] = Start + i * interval;\n}\n}\nreturn values;\n}", "CodeBleu_score": 54.48543117157537}, {"code": "public double[] LabelValues(){\n\tdouble[] values = new double[Count + 1];\n\nif (AxisType == UIAxisType.DateTime) {\nDateTimeInt64 start = new DateTimeInt64(Start);\nfor (int i = 0; i <= Count; i++) {\nvalues[i] = start.ToDateTime();\nstart.AddMilliseconds(IntervalMilliseconds);\n}\n} else {\nfor (int i = 0; i <= Count; i++) {\nvalues[i] = Start + Interval * i;\n}\n}\n\nreturn values;\n}", "CodeBleu_score": 60.746697768632565}, {"code": "public double[] LabelValues(){\n\tdouble[] values = new double[Count + 1];\ndouble start = Start;\ndouble interval = Interval;\nfor (int i = 0; i < Count + 1; i++) {\nif (AxisType == UIAxisType.DateTime) {\nvalues[i] = new DateTimeInt64(start).ToDateTime();\n} else {\nvalues[i] = start;\n}\nstart += interval;\n}\nreturn values;\n}", "CodeBleu_score": 45.718688960350015}]}
{"instance_id": "dfdbaee67b59", "generation_result": [{"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\t\t// 1. Create a pen with the specified color and width.\n\tPen pen = new Pen(color, width);\n\n\t// 2. Retrieve the device context for the window handle from the message.\n\tIntPtr hdc = m.WParam;\n\n\t// 3. If the device context is valid, create a Graphics object, set its smoothing mode to anti-alias, and draw a rectangle around the control's border.\n\tif (hdc != IntPtr.Zero) {\n\t\tusing (Graphics g = Graphics.FromHdc(hdc)) {\n\t\t\tg.SmoothingMode = SmoothingMode.AntiAlias;\n\t\t\tg.DrawRectangle(pen, control.ClientRectangle);\n\t\t}\n\t}\n\n\t// 4. Release the device context.\n\tpen.Dispose();\n}", "CodeBleu_score": 39.97792264534355}, {"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\t\tif (control == null) {\n\t\treturn;\n\t}\n\n\t// Retrieve the device context for the window handle from the message.\n\tIntPtr hdc = m.WParam;\n\tif (hdc == IntPtr.Zero) {\n\t\treturn;\n\t}\n\n\t// Create a pen with the specified color and width.\n\tPen pen = new Pen(color, width);\n\n\t// Create a graphics object from the device context.\n\tGraphics g = Graphics.FromHdc(hdc);\n\tif (g == null) {\n\t\treturn;\n\t}\n\n\t// Set the smoothing mode to anti-alias.\n\tg.SmoothingMode = SmoothingMode.AntiAlias;\n\n\t// Draw a rectangle around the control's border.\n\tg.DrawRectangle(pen, control.ClientRectangle);\n\n\t// Release the graphics object and pen.\n\tg.Dispose();\n\tpen.Dispose();\n}", "CodeBleu_score": 43.042471468596396}, {"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\t\tif (m.Msg == 0x84) {\n\t\t//Get the device context for the window handle from the message.\n\t\tIntPtr hdc = m.WParam;\n\t\tif (hdc != IntPtr.Zero) {\n\t\t\t//Create a Graphics object from the device context.\n\t\t\tusing (Graphics g = Graphics.FromHdc(hdc)) {\n\t\t\t\t//Set the smoothing mode to anti-alias.\n\t\t\t\tg.SmoothingMode = SmoothingMode.AntiAlias;\n\t\t\t\t//Create a Pen object with the specified color and width.\n\t\t\t\tusing (Pen pen = new Pen(color, width)) {\n\t\t\t\t\t//Draw a rectangle around the control's border.\n\t\t\t\t\tg.DrawRectangle(pen, control.ClientRectangle);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 36.13456616060195}]}
{"instance_id": "aec16c2608df", "generation_result": [{"code": "public static Bitmap SaveToImage(this Control ctrl){\n\tBitmap bmp = new Bitmap(ctrl.Width, ctrl.Height);\n\n// Create a memory DC to create a compatible DC.\n\nIntPtr hdc = Win32.User.GetDC(ctrl.Handle);\n\nIntPtr hdcMem = Win32.User.CreateCompatibleDC(hdc);\n\n// Create a Bitmap compatible with the Window DC.\n\nIntPtr hbm = Win32.Gdi32.CreateCompatibleBitmap(hdc, ctrl.Width, ctrl.Height);\n\n// Create a Graphics object from the compatible DC.\n\nGraphics g = Graphics.FromHdc(hdcMem);\n\n// Select the Bitmap into the compatible DC.\n\nIntPtr hbmOld = (IntPtr)Win32.Gdi32.SelectObject(hdcMem, hbm);\n\n// Blit from the control DC to the Bitmap DC.\n\nWin32.Gdi32.BitBlt(hdcMem, 0, 0, ctrl.Width, ctrl.Height, hdc, 0, 0, (int)TernaryRasterOperations.SRCCOPY);\n\n// Delete the Bitmap DC.\n\nWin32.Gdi32.SelectObject(hdcMem, hbmOld);\n\n// Delete the memory DC.\n\nWin32.Gdi32.DeleteDC(hdcMem);\n\n// Release the Window DC.\n\nWin32.User.ReleaseDC(ctrl.Handle, hdc);\n\n// Get a .NET Image object from the Bitmap.\n\nImage img = Image.FromHbitmap(hbm);\n\n// Clean up.\n\ng.Dispose();\n\nWin32.Gdi32.DeleteObject(hbm);\n\nreturn bmp;\n\n}", "CodeBleu_score": 53.4716178233633}, {"code": "public static Bitmap SaveToImage(this Control ctrl){\n\t", "CodeBleu_score": 1.2751725343880242}, {"code": "public static Bitmap SaveToImage(this Control ctrl){\n\t", "CodeBleu_score": 1.2751725343880242}]}
{"instance_id": "8cbc60785194", "generation_result": [{"code": "public static void RemoveClickEvent(this Button button){\n\t", "CodeBleu_score": 1.4440738537253142}, {"code": "public static void RemoveClickEvent(this Button button){\n\t", "CodeBleu_score": 1.4440738537253142}, {"code": "public static void RemoveClickEvent(this Button button){\n\t", "CodeBleu_score": 1.4440738537253142}]}
{"instance_id": "107200db7c81", "generation_result": [{"code": "public static string CheckVersion(){\n\t#if NET45\n    return \"4.5\";\n#else\n    using (RegistryKey ndpKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(\"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v4\\\\Full\\\\\")) {\n        if (ndpKey != null && ndpKey.GetValue(\"Release\") != null) {\n            return CheckFor45PlusVersion((int)ndpKey.GetValue(\"Release\"));\n        }\n        else {\n            return \".NET Framework 4.5 or later is not detected.\";\n        }\n    }\n#endif\n}", "CodeBleu_score": 73.49408322277218}, {"code": "public static string CheckVersion(){\n\t\nstring releaseKey = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(@\"SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full\").GetValue(\"Release\").ToString();\n\nif (string.IsNullOrEmpty(releaseKey)) {\n\nreturn \".NET Framework 4.5 or later is not detected.\";\n\n}\n\nreturn CheckFor45PlusVersion(Convert.ToInt32(releaseKey));\n\n}", "CodeBleu_score": 49.33316543688394}, {"code": "public static string CheckVersion(){\n\t\nstring releaseKey = Registry.LocalMachine.OpenSubKey(@\"SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full\").GetValue(\"Release\").ToString();\n\nif (releaseKey != null) {\n\nreturn CheckFor45PlusVersion(int.Parse(releaseKey));\n}\nelse {\n\nreturn \".NET Framework 4.5 or later is not detected.\";\n}\n}", "CodeBleu_score": 27.517854705681888}]}
{"instance_id": "0078e6ce17ce", "generation_result": [{"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t\tif (source == target) {\n\t\tthrow new ArgumentException(@\\\"Copying regions across the same bitmap is not supported\\\", nameof(source));\n\t}\n\tif (source.Width != target.Width || source.Height != target.Height || source.PixelFormat != target.PixelFormat) {\n\t\treturn false;\n\t}\n\tusing (var fastSource = source.FastLock())\n\tusing (var fastTarget = target.FastLock()) {\n\t\tmemcpy(fastTarget._scan0, fastSource._scan0, (ulong)source.Width * source.Height * source.BytesPerPixel);\n\t}\n\treturn true;\n}", "CodeBleu_score": 73.79392471864766}, {"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t", "CodeBleu_score": 4.350133963071295}, {"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t", "CodeBleu_score": 4.350133963071295}]}
{"instance_id": "b554f6ffc7b1", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\nPointF pt = new PointF(e.X, e.Y);\nif (e.Button == MouseButtons.Left) {\nSetPercent(pt);\n}\n}", "CodeBleu_score": 53.01936631253058}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\nPointF pt = new PointF(e.X, e.Y);\nif (e.Button == MouseButtons.Left) {\nSetPercent(pt);\n}\n}", "CodeBleu_score": 53.01936631253058}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\nPointF mousePos = new PointF(e.X, e.Y);\nif (e.Button == MouseButtons.Left)\nSetPercent(mousePos);\n}", "CodeBleu_score": 58.862062289386905}]}
{"instance_id": "67a92ed0480f", "generation_result": [{"code": "protected void DrawColorBar(Graphics dc){\n\t\tRectangleF r = BarRectangle;\n\tfloat percentSet = Percent;\n\tusing (Brush brush = new SolidBrush(Color1)) {\n\t\tdc.FillRectangle(brush, r);\n\t}\n\tif (Color2.A != 0) {\n\t\tusing (Brush brush = new LinearGradientBrush(r, Color1, Color2, LinearGradientMode.Vertical)) {\n\t\t\tdc.FillRectangle(brush, r);\n\t\t}\n\t}\n\tif (Color3.A != 0) {\n\t\tusing (Brush brush = new LinearGradientBrush(r, Color2, Color3, LinearGradientMode.Vertical)) {\n\t\t\tdc.FillRectangle(brush, r);\n\t\t}\n\t}\n\tDrawSelector(dc, r, Orientation, percentSet);\n}", "CodeBleu_score": 38.178279100631485}, {"code": "protected void DrawColorBar(Graphics dc){\n\t// Calculate the bar rectangle\nRectangleF r = BarRectangle;\n// Calculate the number of colors to be used\nint numColors = 2;\nif (m_color2.A == 0)\nnumColors = 1;\nif (m_color3.A == 0)\nnumColors = 2;\n// Draw the bar\nif (numColors == 1)\n// Draw a single-color bar\ndc.FillRectangle(new SolidBrush(m_color1), r);\n\nif (numColors == 2)\n// Draw a two-color bar\ndc.FillRectangle(new LinearGradientBrush(r, m_color1, m_color2, 90), r);\n\nif (numColors == 3)\n// Draw a three-color bar\ndc.FillRectangle(new LinearGradientBrush(r, m_color1, m_color3, 90), r);\n\n// Draw the selector\nDrawSelector(dc, r, Orientation, Percent);\n\n}", "CodeBleu_score": 35.616955552276636}, {"code": "protected void DrawColorBar(Graphics dc){\n\t", "CodeBleu_score": 1.937489352683406}]}
{"instance_id": "eb7915323235", "generation_result": [{"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\tif (itemForm.Visible) {\nif (itemForm.DroppedDown) {\ndropSymbol = SymbolDropDown;\n} else {\ndropSymbol = SymbolNormal;\n}\nInvalidate();\n}\n}", "CodeBleu_score": 72.3792292452385}, {"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\tif (itemForm.Visible) {\nif (edit.DropSymbol == UIEdit.SymbolNormal) {\nedit.DropSymbol = UIEdit.SymbolDropDown;\n}\n} else {\nif (edit.DropSymbol == UIEdit.SymbolDropDown) {\nedit.DropSymbol = UIEdit.SymbolNormal;\n}\n}\nedit.Invalidate();\n}", "CodeBleu_score": 31.066579949698582}, {"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\t\tif (itemForm != null) {\n\t\tif (itemForm.Visible) {\n\t\t\tif (itemForm.DroppedDown) {\n\t\t\t\tdropSymbol = SymbolDropDown;\n\t\t\t} else {\n\t\t\t\tdropSymbol = SymbolNormal;\n\t\t\t}\n\t\t}\n\n\t\tInvalidate();\n\t}\n}", "CodeBleu_score": 58.312175501105926}]}
{"instance_id": "f39e3f212069", "generation_result": [{"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\tbase.OnPaintFore(g, path);\nSizeChange();\n\nif (!edit.Visible) {\n// \u7ed8\u5236\u6c34\u5370\nif (string.IsNullOrEmpty(edit.WaterMark)) {\n// \u7ed8\u5236\u6587\u5b57\nif (!string.IsNullOrEmpty(Text)) {\n// \u6587\u5b57\u989c\u8272\nusing (SolidBrush brush = new SolidBrush(Enabled ? ForeColor : DisabledForeColor)) {\n// \u6587\u5b57\u5bf9\u9f50\u65b9\u5f0f\nStringFormat format = new StringFormat();\nformat.Alignment = StringAlignment.Near;\nformat.LineAlignment = StringAlignment.Center;\n// \u7ed8\u5236\u6587\u5b57\ng.DrawString(Text, Font, brush, new Rectangle(Padding.Left, RectSize, Width - Padding.Left - Padding.Right, Height - Padding.Top - Padding.Bottom), format);\n}\n}\n} else {\n// \u7ed8\u5236\u6c34\u5370\u6587\u5b57\nusing (SolidBrush brush = new SolidBrush(Enabled ? edit.WaterMarkColor : edit.WaterMarkActiveForeColor)) {\n// \u6587\u5b57\u5bf9\u9f50\u65b9\u5f0f\nStringFormat format = new StringFormat();\nformat.Alignment = StringAlignment.Near;\nformat.LineAlignment = StringAlignment.Center;\n// \u7ed8\u5236\u6587\u5b57\ng.DrawString(edit.WaterMark, Font, brush, new Rectangle(Padding.Left, RectSize, Width - Padding.Left - Padding.Right, Height - Padding.Top - Padding.Bottom), format);\n}\n}\n} else {\n// \u7ed8\u5236\u6309\u94ae\nif (tipsBtn != null) {\nif (tipsBtn.Visible) {\n// \u7ed8\u5236\u6309\u94ae\ntipsBtn.OnPaint(g, new Rectangle(Width - 8, 2, 16, 16));\n}\n}\n}\n// \u7ed8\u5236\u53f3\u4fa7\u80cc\u666f\nusing (SolidBrush brush = new SolidBrush(RightRectBackColor)) {\ng.FillRectangle(brush, new Rectangle(Width - RectSize, 0, RectSize, Height));\n}\n}", "CodeBleu_score": 37.25909033677168}, {"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\tbase.OnPaintFore(g, path);\nSizeChange();\n\n//if (edit.Visible)\n//{\n//    g.FillRectangle(new SolidBrush(edit.BackColor), new Rectangle(edit.Left, edit.Top, edit.Width, edit.Height));\n//    g.DrawString(Text, Font, new SolidBrush(edit.ForeColor), new Rectangle(edit.Left, edit.Top, edit.Width, edit.Height));\n//}\n//else\n//{\n//    g.DrawString(Text, Font, new SolidBrush(ForeColor), new Rectangle(edit.Left, edit.Top, edit.Width, edit.Height));\n//    if (!string.IsNullOrEmpty(edit.WaterMark))\n//    {\n//        g.DrawString(edit.WaterMark, Font, new SolidBrush(edit.WaterMarkActiveForeColor), new Rectangle(edit.Left, edit.Top, edit.Width, edit.Height));\n//    }\n//}\n\nif (string.IsNullOrEmpty(Text)) {\ng.DrawString(edit.WaterMark, Font, new SolidBrush(edit.WaterMarkActiveForeColor), new Rectangle(edit.Left, edit.Top, edit.Width, edit.Height));\n}\nelse {\ng.DrawString(Text, Font, new SolidBrush(edit.ForeColor), new Rectangle(edit.Left, edit.Top, edit.Width, edit.Height));\n}\n\nif (tipsBtn != null) {\ng.DrawImage(tipsBtn.Image, tipsBtn.Location);\n}\n\nif (RectSize > 0) {\ng.FillRectangle(new SolidBrush(RectColor), new Rectangle(Width - RectSize, 0, RectSize, Height));\n}\n\nif (showClearButton) {\ng.DrawImage(SymbolImages.GetSymbolImage(dropSymbol), new Rectangle(Width - RectSize - 15, (Height - 15) / 2, 15, 15));\n}\n}", "CodeBleu_score": 42.08469571745891}, {"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\tbase.OnPaintFore(g, path);\nSizeChange();\n\n//if (itemForm != null && itemForm.Visible)\n\n//{\n\n//    return;\n\n//}\n\nif (!edit.Visible)\n\n{\n\n    if (string.IsNullOrEmpty(Text))\n\n    {\n\n        using (var brush = new SolidBrush(WaterMarkColor))\n\n        {\n\n            g.DrawString(WaterMark, Font, brush, new Rectangle(RectSize, RectSize, Width - RectSize * 2, Height - RectSize * 2));\n\n        }\n\n    }\n\n    else\n\n    {\n\n        using (var brush = new SolidBrush(ForeColor))\n\n        {\n\n            g.DrawString(Text, Font, brush, new Rectangle(RectSize, RectSize, Width - RectSize * 2, Height - RectSize * 2));\n\n        }\n\n    }\n\n}\n\nelse\n\n{\n\n    g.FillRectangle(new SolidBrush(BackColor), new Rectangle(Width - RectSize, 0, RectSize, Height));\n\n}\n\n\nif (tipsBtn != null)\n\n{\n\n    g.DrawImage(tipsBtn.Image, tipsBtn.Location);\n\n}\n\n\nif (clearBtn != null)\n\n{\n\n    g.DrawImage(clearBtn.Image, clearBtn.Location);\n\n}\n\n\nif (dropDownBtn != null)\n\n{\n\n    g.DrawImage(dropDownBtn.Image, dropDownBtn.Location);\n\n}\n\n}", "CodeBleu_score": 45.11688013872458}]}
{"instance_id": "c2f43d45d92d", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\nif (!NeedDrawClearButton) {\nNeedDrawClearButton = false;\nreturn;\n}\nif (ClientRectangle.Contains(new Point(e.X, e.Y))) {\nNeedDrawClearButton = true;\nInvalidate();\n}\n}", "CodeBleu_score": 32.7824793816167}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\nif (!NeedDrawClearButton) {\nNeedDrawClearButton = false;\nreturn;\n}\nif (e.X >= Width - Padding.Right && e.X <= Width - Padding.Right + Padding.Right - 1 && e.Y >= 0 && e.Y <= Height - 1) {\nif (NeedDrawClearButton != true) {\nNeedDrawClearButton = true;\nInvalidate();\n}\n}\nelse {\nif (NeedDrawClearButton != false) {\nNeedDrawClearButton = false;\nInvalidate();\n}\n}\n}", "CodeBleu_score": 46.24080925229282}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\nif (!NeedDrawClearButton) {\nNeedDrawClearButton = false;\nreturn;\n}\nif (edit.ClientRectangle.Contains(e.Location)) {\nif (NeedDrawClearButton != true) {\nNeedDrawClearButton = true;\nInvalidate();\n}\n} else {\nif (NeedDrawClearButton != false) {\nNeedDrawClearButton = false;\nInvalidate();\n}\n}\n}", "CodeBleu_score": 37.40589792383343}]}
{"instance_id": "ecd71145bba0", "generation_result": [{"code": "protected override void OnLayout(LayoutEventArgs e){\n\t", "CodeBleu_score": 3.209620182859464}, {"code": "protected override void OnLayout(LayoutEventArgs e){\n\tbase.OnLayout(e);\n\n//\n//if (Item != null)\n//{\n//    Item.Location = Point.Empty;\n//    Item.Size = Size;\n//}\n\n}", "CodeBleu_score": 3.3997021277665698}, {"code": "protected override void OnLayout(LayoutEventArgs e){\n\tbase.OnLayout(e);\n\nif (Item != null) {\nItem.Location = Point.Empty;\nItem.Size = Size;\n}\n}", "CodeBleu_score": 15.938931140474327}]}
{"instance_id": "670ec0154771", "generation_result": [{"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\tbase.SetStyleColor(uiColor);\nm_foreColor = uiColor.MainForeColor;\nm_fillColor = Color.White;\nm_rectColor = uiColor.MainBackColor;\nUISymbolButton[] btns = Controls.GetAllControls<UISymbolButton>(typeof(UISymbolButton));\nfor (int i = 0; i < btns.Length; i++) {\nbtns[i].SetStyleColor(uiColor);\n}\n}", "CodeBleu_score": 46.08986694715676}, {"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\t", "CodeBleu_score": 2.7841238583217742}, {"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\tbase.SetStyleColor(uiColor);\nFillColor = Color.White;\nForeColor = uiColor.MainForeColor;\nm_rect.FillColor = uiColor.MainBackColor;\nforeach (UISymbolButton btn in Controls) {\nbtn.SetStyleColor(uiColor);\n}\n}", "CodeBleu_score": 45.82236854283785}]}
{"instance_id": "248c24f4cf62", "generation_result": [{"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\tif (AnalogMeter == null) return false;\n\nColor c = AnalogMeter.BodyColor;\nColor c1 = LBColorManager.StepColor(c, 150);\n\nLinearGradientBrush lgb = new LinearGradientBrush(rc, c, c1, 90, false);\nGr.FillEllipse(lgb, rc);\n\nfloat f = AnalogMeter.DrawRatio;\nRectangleF rc1 = new RectangleF(rc.X, rc.Y, rc.Width * f, rc.Height * f);\n\nColor c2 = LBColorManager.StepColor(c, 100);\n\nLinearGradientBrush lgb1 = new LinearGradientBrush(rc1, c2, c, 90, false);\nGr.FillEllipse(lgb1, rc1);\nreturn true;\n}", "CodeBleu_score": 36.969288777175244}, {"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\t\tif (AnalogMeter == null) return false;\n\tColor c = AnalogMeter.BodyColor;\n\tColor c2 = Color.FromArgb(c.R - 50, c.G - 50, c.B - 50);\n\tBrush b = new LinearGradientBrush(rc, c, c2, 90);\n\tGr.FillEllipse(b, rc);\n\tGr.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;\n\tb.Dispose();\n\trc.Inflate(-AnalogMeter.DrawRatio, -AnalogMeter.DrawRatio);\n\tb = new LinearGradientBrush(rc, c2, c, 90);\n\tGr.FillEllipse(b, rc);\n\tb.Dispose();\n\treturn true;\n}", "CodeBleu_score": 35.53822240268532}, {"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\t\tif (AnalogMeter == null) return false;\n\tColor BodyColor = AnalogMeter.BodyColor;\n\tColor BodyDarkColor = LBColorManager.StepColor(BodyColor, 50);\n\tLinearGradientBrush Brush = new LinearGradientBrush(rc, BodyColor, BodyDarkColor, LinearGradientMode.Vertical);\n\tGr.FillEllipse(Brush, rc);\n\tBrush.Dispose();\n\trc.Inflate(-AnalogMeter.DrawRatio, -AnalogMeter.DrawRatio);\n\tBrush = new LinearGradientBrush(rc, BodyDarkColor, BodyColor, LinearGradientMode.Vertical);\n\tGr.FillEllipse(Brush, rc);\n\tBrush.Dispose();\n\treturn true;\n}", "CodeBleu_score": 39.74448210532324}]}
{"instance_id": "be7c41ba9985", "generation_result": [{"code": "protected override void OnMouseEnter(EventArgs e){\n\tbase.OnMouseEnter(e);\nIsHover = true;\nInvalidate();\n}", "CodeBleu_score": 74.42367130227652}, {"code": "protected override void OnMouseEnter(EventArgs e){\n\tbase.OnMouseEnter(e);\nIsHover = true;\nInvalidate();\n}", "CodeBleu_score": 74.42367130227652}, {"code": "protected override void OnMouseEnter(EventArgs e){\n\tbase.OnMouseEnter(e);\nIsHover = true;\nInvalidate();\n}", "CodeBleu_score": 74.42367130227652}]}
{"instance_id": "1d476b416b5a", "generation_result": [{"code": "public static void Load(){\n\t\tlock (_stateLock) {\n\t\tLoadAddresses();\n\t\tLoadOverrides();\n\t\tIsProxyEnabled = _proxyKey.GetValue(string.Empty) != null;\n\t}\n}", "CodeBleu_score": 52.8003753322398}, {"code": "public static void Load(){\n\t\tlock (_stateLock) {\n\t\tLoadAddresses();\n\t\tLoadOverrides();\n\t\tIsProxyEnabled = (_proxyKey.GetValue(\\\"ProxyEnable\\\", 0) != 0);\n\t}\n}", "CodeBleu_score": 56.03561203766033}, {"code": "public static void Load(){\n\t\tlock (_stateLock) {\n\t\tLoadAddresses();\n\t\tLoadOverrides();\n\t\tIsProxyEnabled = _proxyKey.GetValue(\\\"ProxyEnable\\\", 0) != 0;\n\t}\n}", "CodeBleu_score": 55.488407347425074}]}
{"instance_id": "298075fa5494", "generation_result": [{"code": "private static void LoadOverrides(){\n\t\tvar overrides = _proxyKey.GetValue(\"ProxyOverride\")?.ToString();\n\tif (string.IsNullOrEmpty(overrides)) {\n\t\treturn;\n\t}\n\n\tforeach (string @override in overrides.Split(';')) {\n\t\tif (@override == \"<local>\") {\n\t\t\tIsIgnoringLocalTraffic = true;\n\t\t} else {\n\t\t\tif (!Overrides.Contains(@override)) {\n\t\t\t\tOverrides.Add(@override);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 51.0802404175647}, {"code": "private static void LoadOverrides(){\n\t\tstring[] overrides = null;\n\tif (!string.IsNullOrEmpty((string)_proxyKey.GetValue(\"ProxyOverride\"))) {\n\t\toverrides = ((string)_proxyKey.GetValue(\"ProxyOverride\")).Split(';');\n\t}\n\tif (overrides != null) {\n\t\tforeach (string @override in overrides) {\n\t\t\tif (string.Equals(@override, \"localhost\", StringComparison.OrdinalIgnoreCase)) {\n\t\t\t\tIsIgnoringLocalTraffic = true;\n\t\t\t}\n\t\t\telse if (!Overrides.Contains(@override)) {\n\t\t\t\tOverrides.Add(@override);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 61.27148715681805}, {"code": "private static void LoadOverrides(){\n\t\tstring proxyOverride = (_proxyKey.GetValue(\"ProxyOverride\")?.ToString() ?? string.Empty);\n\tif (string.IsNullOrEmpty(proxyOverride)) {\n\t\treturn;\n\t}\n\tstring[] overrides = proxyOverride.Split(';');\n\tforeach (string @override in overrides) {\n\t\tif (@override == \"<local>\") {\n\t\t\tIsIgnoringLocalTraffic = true;\n\t\t} else if (!Overrides.Contains(@override)) {\n\t\t\tOverrides.Add(@override);\n\t\t}\n\t}\n}", "CodeBleu_score": 85.33599272359761}]}
{"instance_id": "c6c7ed2cfa51", "generation_result": [{"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\t", "CodeBleu_score": 1.1717521256739678}, {"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\t", "CodeBleu_score": 1.1717521256739678}, {"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\t", "CodeBleu_score": 1.1717521256739678}]}
{"instance_id": "6ed63f3b7a68", "generation_result": [{"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\treturn SendResponseAsync(HttpStatusCode.OK, \\\"OK\\\", response?.Headers, content);\n}", "CodeBleu_score": 18.440313427538257}, {"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\treturn SendResponseAsync(response.StatusCode, response.StatusDescription, response.Headers, content);\n}", "CodeBleu_score": 23.58719375711946}, {"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\t\treturn SendResponseAsync(response, content, HttpStatusCode.OK, \\\"OK\\\");\n}", "CodeBleu_score": 17.713286336747416}]}
{"instance_id": "32d978074585", "generation_result": [{"code": "private bool SecureTunnel(string host){\n\t\ttry {\n\t\tvar certificate = _certifier.GenerateCertificate(host);\n\n\t\t_secureStream = new SslStream(GetStream(), false, ValidateServerCertificate, null);\n\n\t\t_secureStream.AuthenticateAsServer(certificate, false, SslProtocols.Tls, false);\n\n\t\treturn true;\n\n\t}\n\tcatch (Exception) { return false; }\n\n}", "CodeBleu_score": 60.96562408398941}, {"code": "private bool SecureTunnel(string host){\n\t\t// Create a new certificate for the host.\n\tX509Certificate2 cert = _certifier.CreateCertificate(host);\n\n\tif (cert == null) return false;\n\n\ttry\n\t{\n\n\t\t// Create an SSL stream that will use the certificate.\n\t\t_secureStream = new SslStream(GetStream(), false, ValidateServerCertificate, null);\n\n\t\tawait _secureStream.AuthenticateAsServerAsync(cert, false, SslProtocols.Tls, false).ConfigureAwait(false);\n\n\t\treturn true;\n\n\t}\n\n\tcatch (Exception)\n\t{\n\n\t\t// If an exception occurs, dispose of the certificate and close the stream.\n\t\tcert.Dispose();\n\n\t\t_secureStream.Dispose();\n\n\t\t_secureStream = null;\n\n\t\treturn false;\n\n\t}\n\n}", "CodeBleu_score": 50.79435283812555}, {"code": "private bool SecureTunnel(string host){\n\t\ttry {\n\t\tX509Certificate2 cert = _certifier.GetCertificate(host);\n\n\t\tif (cert == null) return false;\n\n\t\t_secureStream = new SslStream(GetStream(), false, new RemoteCertificateValidationCallback(ValidateServerCertificate), null);\n\n\t\t_secureStream.AuthenticateAsServer(cert, false, SslProtocols.Tls, true);\n\n\t\treturn true;\n\n\t}\n\tcatch (Exception e) { Console.WriteLine(e); return false; }\n\n}", "CodeBleu_score": 54.31471408554166}]}
{"instance_id": "67d773149e9b", "generation_result": [{"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\t\tif (response is HttpWebResponse httpResponse) {\n\t\tif (httpResponse.StatusCode == HttpStatusCode.NoContent || httpResponse.ContentLength == 0) {\n\t\t\thttpResponse.Dispose();\n\t\t\treturn null;\n\t\t}\n\t\telse {\n\t\t\tvar content = new StreamContent(httpResponse.GetResponseStream());\n\t\t\tcontent.Headers.ContentType = new MediaTypeHeaderValue(httpResponse.ContentType);\n\t\t\tcontent.Headers.ContentLength = httpResponse.ContentLength;\n\t\t\thttpResponse.Dispose();\n\t\t\treturn content;\n\t\t}\n\t}\n\telse throw new NotSupportedException();\n}", "CodeBleu_score": 43.8901920716664}, {"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\t\tif (response is HttpWebResponse httpResponse) {\n\t\tif (httpResponse.ContentLength == 0) {\n\t\t\thttpResponse.Dispose();\n\t\t\treturn null;\n\t\t}\n\t\treturn new StreamContent(httpResponse.GetResponseStream(), httpResponse.ContentLength > 0 ? httpResponse.ContentLength : 4096);\n\t}\n\telse {\n\t\tStream stream = response.GetResponseStream();\n\t\tvar buffer = new byte[4096];\n\t\tint bytesRead = 0;\n\t\twhile ((bytesRead = stream.Read(buffer, 0, buffer.Length)) > 0) { }\n\t\tstream.Dispose();\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 50.08324689617025}, {"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\t", "CodeBleu_score": 2.839346355748652}]}
{"instance_id": "45d3c11325cf", "generation_result": [{"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t\n\ttry {\n\t\t// \u52a0\u8f7d\u6587\u4ef6\u8def\u5f84\n\t\tvar path = ActivityConfigJsonPath.Text.Trim();\n\t\tif (string.IsNullOrEmpty(path)) {\n\t\t\t// \u5982\u679c\u6587\u4ef6\u8def\u5f84\u4e3a\u7a7a\uff0c\u5219\u6253\u5f00\u6587\u4ef6\u9009\u62e9\u5bf9\u8bdd\u6846\n\t\t\tOpenFileDialog openFileDialog = new OpenFileDialog();\n\t\t\topenFileDialog.Filter = \"JSON\u6587\u4ef6|*.json\";\n\t\t\topenFileDialog.InitialDirectory = Environment.CurrentDirectory;\n\t\t\tif (openFileDialog.ShowDialog() == DialogResult.OK) {\n\t\t\t\tpath = openFileDialog.FileName;\n\t\t\t\tActivityConfigJsonPath.Text = path;\n\t\t\t}\n\t\t}\n\t\tif (!string.IsNullOrEmpty(path) && File.Exists(path)) {\n\t\t\t// \u52a0\u8f7d\u914d\u7f6e\n\t\t\tLoadActivityConfig(path);\n\t\t\tMessageBox.Show(Resources.Success);\n\t\t}\n\t}\n\tcatch (Exception ex) {\n\t\tMessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t}\n}", "CodeBleu_score": 52.774395639012496}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t\nvar path = ActivityConfigJsonPath.Text.Trim();\nif (string.IsNullOrEmpty(path)) {\nOpenFileDialog ofd = new OpenFileDialog();\nofd.Filter = Resources.JsonFilter;\n\nofd.Title = Resources.SelectJsonFile;\n\nif (ofd.ShowDialog() == DialogResult.OK) {\npath = ofd.FileName;\n\nActivityConfigJsonPath.Text = path;\n\n}\n}\n\nif (!string.IsNullOrEmpty(path) && File.Exists(path)) {\ntry {\nLoadActivityConfig(path);\n\nMessageBox.Show(Resources.LoadSuccess, Resources.Success, MessageBoxButtons.OK, MessageBoxIcon.Information);\n\n}\n\ncatch (Exception ex) {\nMessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n\n}\n\n}\n\n}", "CodeBleu_score": 45.14326997381788}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t\n\t// \u52a0\u8f7d\u6587\u4ef6\u8def\u5f84\n\tvar path = ActivityConfigJsonPath.Text;\n\tActivityConfigJsonPath.Text = path.Trim();\n\tif (string.IsNullOrEmpty(path) || !File.Exists(path)) {\n\t\tpath = OpenFileDialog();\n\t\tActivityConfigJsonPath.Text = path;\n\t}\n\tif (!string.IsNullOrEmpty(path) && File.Exists(path)) {\n\t\ttry {\n\t\t\tLoadActivityConfig(path);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tMessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t\t}\n\t}\n}", "CodeBleu_score": 40.10369614372639}]}
{"instance_id": "f97d2ba1a807", "generation_result": [{"code": "private void LoadActivityConfig(string path){\n\ttry {\n// \u53cd\u5e8f\u5217\u5316\nvar json = File.ReadAllText(path);\nvar activityConfigItems = JsonConvert.DeserializeObject<List<ActivityConfigItem>>(json);\n\n// \u66f4\u65b0\u6210\u5458\u53d8\u91cf\nActivityConfigItems = activityConfigItems;\n\n// \u66f4\u65b0\u754c\u9762\nListActivityConfigItems.Items.Clear();\nListActivityConfigItems.Items.AddRange(activityConfigItems.ToArray());\nListActivityConfigItems.EndUpdate();\n} catch (Exception ex) {\nMessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n}\n}", "CodeBleu_score": 37.38028849276025}, {"code": "private void LoadActivityConfig(string path){\n\t\t// \u53cd\u5e8f\u5217\u5316\n\tvar json = File.ReadAllText(path);\n    var items = JsonConvert.DeserializeObject<List<ActivityConfigItem>>(json);\n    ActivityConfigItems = items;\n\n    // \u66f4\u65b0\u63a7\u4ef6\n    ListActivityConfigItems.BeginUpdate();\n    ListActivityConfigItems.Items.Clear();\n    foreach (var item in ActivityConfigItems)\n        ListActivityConfigItems.Items.Add(item);\n    ListActivityConfigItems.EndUpdate();\n}", "CodeBleu_score": 40.528144729232025}, {"code": "private void LoadActivityConfig(string path){\n\t\tActivityConfigItems.Clear();\n\tvar json = File.ReadAllText(path);\n\tvar activityConfigItems = JsonConvert.DeserializeObject<List<ActivityConfigItem>>(json);\n\tActivityConfigItems.AddRange(activityConfigItems);\n\tListActivityConfigItems.Items.AddRange(ActivityConfigItems.ToArray());\n\tListActivityConfigItems.EndUpdate();\n}", "CodeBleu_score": 38.67556744599923}]}
{"instance_id": "8531cab08f38", "generation_result": [{"code": "private void BtnSave_Click(object sender, EventArgs e){\n\ttry {\nvar path = ActivityConfigJsonPath.Text.Trim();\nif (path == string.Empty) {\nvar dialog = new SaveFileDialog {\nFileName = \"ActivityConfig.json\",\nFilter = \"ActivityConfig.Json (*.json)|*.json|All files (*.*)|*.*\",\n};\nvar result = dialog.ShowDialog();\nif (result == DialogResult.OK)\npath = ActivityConfigJsonPath.Text = dialog.FileName;\nelse\nreturn;\n}\n\n// \u5e8f\u5217\u5316\nFile.WriteAllText(path, JsonConvert.SerializeObject(ActivityConfigItems));\nMessageBox.Show(\"OK\", Resources.Tips, MessageBoxButtons.OK);\n}\ncatch (Exception ex) {\nMessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n}\n}", "CodeBleu_score": 74.09880095228594}, {"code": "private void BtnSave_Click(object sender, EventArgs e){\n\ttry {\nvar path = ActivityConfigJsonPath.Text.Trim();\nif (path == string.Empty) {\nvar dialog = new SaveFileDialog {\nFileName = \"ActivityConfig.json\",\nFilter = \"ActivityConfig.Json (*.json)|*.json|All files (*.*)|*.*\",\n};\nvar result = dialog.ShowDialog();\nif (result == DialogResult.OK)\npath = ActivityConfigJsonPath.Text = dialog.FileName;\nelse\nreturn;\n}\n// \u5e8f\u5217\u5316\nFile.WriteAllText(path, JsonConvert.SerializeObject(ActivityConfigItems));\nMessageBox.Show(\"OK\", Resources.Tips, MessageBoxButtons.OK);\n}\ncatch (Exception ex) {\nMessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n}\n}", "CodeBleu_score": 74.09880095228594}, {"code": "private void BtnSave_Click(object sender, EventArgs e){\n\ttry {\nvar path = ActivityConfigJsonPath.Text.Trim();\nif (path == string.Empty) {\nvar dialog = new SaveFileDialog { FileName = \"ActivityConfig.json\", Filter = \"ActivityConfig.Json (*.json)|*.json|All files (*.*)|*.*\" };\nvar result = dialog.ShowDialog();\nif (result == DialogResult.OK)\npath = ActivityConfigJsonPath.Text = dialog.FileName;\nelse\nreturn;\n}\n// Serialize\nFile.WriteAllText(path, JsonConvert.SerializeObject(ActivityConfigItems, Formatting.Indented));\nMessageBox.Show(\"OK\", Resources.Tips, MessageBoxButtons.OK);\n}\ncatch (Exception ex) {\nMessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n}\n}", "CodeBleu_score": 78.35564609062602}]}
{"instance_id": "424111434149", "generation_result": [{"code": "private void LoadAllActivity(){\n\tListActivity.BeginUpdate();\nListActivity.Groups.Clear();\nforeach (var activityGroup in GameData.Activity) {\nListActivity.Groups.Add(new ListViewGroup(activityGroup.Key));\nforeach (var activity in activityGroup.Value) {\nListActivity.Items.Add(new ListViewItem(new[] { activity.ActivityId.ToString(), activity.Name }));\n}\n}\nListActivity.EndUpdate();\n}", "CodeBleu_score": 38.865355064917935}, {"code": "private void LoadAllActivity(){\n\tListActivityConfigItems.BeginUpdate();\nListActivityConfigItems.Items.Clear();\n\nforeach (var group in GameData.Activity) {\nvar groupItem = new ListViewItem(group.Key);\ngroupItem.Group = ListActivityConfigItems.Groups.Add(group.Key, group.Key);\ngroupItem.UseItemStyleForSubItems = false;\n\nforeach (var activity in group.Value) {\nvar item = new ListViewItem(new[] { activity.Id.ToString(), activity.Name });\nitem.Group = groupItem.Group;\ngroupItem.SubItems.Add(item);\n}\n}\n\nListActivityConfigItems.EndUpdate();\n}", "CodeBleu_score": 38.97074904568392}, {"code": "private void LoadAllActivity(){\n\tListActivity.BeginUpdate();\nListActivity.Groups.Clear();\nforeach (var activityGroup in GameData.Activity) {\nvar group = new ListViewGroup(activityGroup.Key);\nListActivity.Groups.Add(group);\nforeach (var activity in activityGroup.Value) {\nvar item = new ListViewItem(new[] { activity.Id.ToString(), activity.Name });\nitem.Group = group;\nListActivity.Items.Add(item);\n}\n}\nListActivity.EndUpdate();\n}", "CodeBleu_score": 40.99106959564143}]}
{"instance_id": "51c5d7f71cb3", "generation_result": [{"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\ttry {\n// If no items are selected, return.\nif (ListAllActivity.SelectedItems.Count == 0) return;\n\n// Get the selected item.\nvar selectedItem = ListAllActivity.SelectedItems[0];\n\n// Set the text of NUDActivityId to the text of the selected item.\nNUDActivityId.Value = Convert.ToInt32(selectedItem.SubItems[0].Text);\n}\ncatch (Exception ex) {\nMessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n}\n}", "CodeBleu_score": 75.555899953026}, {"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\t\tif (ListAllActivity.SelectedItems.Count == 0) return;\n\ttry {\n\t\tNUDActivityId.Value = int.Parse(ListAllActivity.SelectedItems[0].SubItems[0].Text);\n\t}\n\tcatch (Exception ex) {\n\t\tMessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t}\n}", "CodeBleu_score": 75.1601783689388}, {"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\ttry {\nif (ListAllActivity.SelectedItems.Count == 0) return;\nNUDActivityId.Value = int.Parse(ListAllActivity.SelectedItems[0].SubItems[0].Text);\n} catch (Exception ex) {\nMessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n}\n}", "CodeBleu_score": 76.88842794259931}]}
{"instance_id": "8bed5c7884dc", "generation_result": [{"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t", "CodeBleu_score": 3.464990510405845}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t\t// \u52a0\u8f7d\u6587\u4ef6\u8def\u5f84\n\tvar path = TxtDropJsonPath.Text;\n\tif (string.IsNullOrEmpty(path)) {\n\t\t// \u5f39\u51fa\u6587\u4ef6\u9009\u62e9\u6846\n\t\tOpenFileDialog openFileDialog = new OpenFileDialog();\n\t\topenFileDialog.Filter = \"JSON files (*.json)|*.json\";\n\t\topenFileDialog.FilterIndex = 1;\n\t\topenFileDialog.RestoreDirectory = true;\n\t\tif (openFileDialog.ShowDialog() == DialogResult.OK) {\n\t\t\tpath = openFileDialog.FileName;\n\t\t\tTxtDropJsonPath.Text = path;\n\t\t}\n\t}\n\tif (!string.IsNullOrEmpty(path) && File.Exists(path)) {\n\t\ttry {\n\t\t\tLoadBanners(path);\n\t\t\tMessageBox.Show(Resources.LoadSuccess, Resources.Success, MessageBoxButtons.OK, MessageBoxIcon.Information);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tMessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t\t}\n\t}\n}", "CodeBleu_score": 44.41085303623654}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t\tstring path = TxtDropJsonPath.Text;\n\tif (string.IsNullOrEmpty(path)) {\n\t\tOpenFileDialog ofd = new OpenFileDialog();\n\t\tofd.Filter = \"JSON files (*.json)|*.json|All files (*.*)|*.*\";\n\t\tif (ofd.ShowDialog() == DialogResult.OK) {\n\t\t\tpath = ofd.FileName;\n\t\t\tTxtDropJsonPath.Text = path;\n\t\t}\n\t}\n\tif (!string.IsNullOrEmpty(path) && File.Exists(path)) {\n\t\ttry {\n\t\t\tLoadBanners(path);\n\t\t\tMessageBox.Show(Resources.Success, Resources.Success, MessageBoxButtons.OK, MessageBoxIcon.Information);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tMessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t\t}\n\t}\n}", "CodeBleu_score": 44.25283302817914}]}
{"instance_id": "0e39a56d211b", "generation_result": [{"code": "private void ShowDropList(List<DropData> dropList){\n\t\tif (dropList.Count == 0) {\n\t\tListItems.Items.Clear();\n\t\treturn;\n\t}\n\n\t// \u663e\u793a\n\tListItems.Items.Clear();\n\tforeach (var item in dropList) {\n\t\tListItems.Items.Add(new DropItem(item));\n\t}\n\n\tListItems.SelectedIndex = 0;\n}", "CodeBleu_score": 48.10863382331541}, {"code": "private void ShowDropList(List<DropData> dropList){\n\t", "CodeBleu_score": 2.817738648739861}, {"code": "private void ShowDropList(List<DropData> dropList){\n\t\tif (dropList == null) return;\n\tif (dropList.Count == 0) {\n\t\tListDropList.Items.Clear();\n\t\treturn;\n\t}\n\n\t// \u663e\u793a\n\tListDropList.BeginUpdate();\n\tListDropList.Items.Clear();\n\tListDropList.Items.AddRange(dropList.ToArray());\n\tListDropList.SelectedIndex = 0;\n\tListDropList.EndUpdate();\n}", "CodeBleu_score": 48.25678330209296}]}
{"instance_id": "60fd5605c44e", "generation_result": [{"code": "private void RemoveDrop(DropData data){\n\t", "CodeBleu_score": 1.580193456861919}, {"code": "private void RemoveDrop(DropData data){\n\t", "CodeBleu_score": 1.580193456861919}, {"code": "private void RemoveDrop(DropData data){\n\t", "CodeBleu_score": 1.580193456861919}]}
{"instance_id": "475581af77bf", "generation_result": [{"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\tLogger.I(TAG, \"FormMain_FormClosed enter\");\nif (DesignMode) return;\n\n// \u904d\u5386\u6bcf\u4e00\u4e2a\u9875\u9762\u91cd\u65b0\u52a0\u8f7d\nforeach (var page in Pages.Values) {\nLogger.I(TAG, $\"{{page.Name}} OnClosed enter\");\npage.OnClosed();\nLogger.I(TAG, $\"{{page.Name}} OnClosed completed\");\n}\n\n// \u4fdd\u5b58\u5f53\u524d\u8bbe\u7f6e\ntry {\nSettings.Default.MainFormLocation = Location;\nSettings.Default.MainFormSize = Size;\nSettings.Default.NavContainerSplitterDistance = NavContainer.SplitterDistance;\nSettings.Default.WindowOpacity = (int)(Opacity * 100);\nSettings.Default.Save();\n} catch (Exception ex) {\nLogger.E(TAG, \"Saving settings error\", ex);\n}\n\nLogger.I(TAG, \"FormMain_FormClosed completed\");\n}", "CodeBleu_score": 56.86433739507204}, {"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\tLogger.I(TAG, \"FormMain_FormClosed enter\");\nif (DesignMode) return;\n\n// \u904d\u5386\u6bcf\u4e00\u4e2a\u9875\u9762\u91cd\u65b0\u52a0\u8f7d\nforeach (var page in Pages.Values) {\nLogger.I(TAG, $\"\\\"{page.Name}\\\" OnClosed enter\");\npage.OnClosed();\nLogger.I(TAG, $\"\\\"{page.Name}\\\" OnClosed completed\");\n}\n\n// \u4fdd\u5b58\u5f53\u524d\u8bbe\u7f6e\nSaveSettings();\nLogger.I(TAG, \"FormMain_FormClosed completed\");\n}", "CodeBleu_score": 68.99430080391436}, {"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\t\tLogger.I(TAG, \"FormMain_FormClosed enter\");\n\tCommon.KeyGo.HotKeyTriggerEvent -= OnHotKeyTrigger;\n\tforeach (var page in Pages.Values) {\n\t\tLogger.I(TAG, $\\\"{page.Name} OnClosed enter\\\");\n\t\tpage.OnClosed();\n\t\tLogger.I(TAG, $\\\"{page.Name} OnClosed completed\\\");\n\t}\n\tSettings.Default.MainFormLocation = Location;\n\tSettings.Default.MainFormSize = Size;\n\tSettings.Default.NavContainerSplitterDistance = NavContainer.SplitterDistance;\n\tSettings.Default.WindowOpacity = (byte)(Opacity * 100);\n\n\tSettings.Default.Save();\n\tLogger.I(TAG, \"FormMain_FormClosed completed\");\n}", "CodeBleu_score": 50.86983486336756}]}
{"instance_id": "afd99ce2de2b", "generation_result": [{"code": " private void SaveSettings(){\n\tLogger.I(TAG, \"SaveSettings enter\");\ntry {\n// \u4fdd\u5b58\u81ea\u52a8\u590d\u5236\u9009\u9879\nSettings.Default.AutoCopy = ChkAutoCopy.Checked;\n\n// \u4fdd\u5b58\u7a97\u4f53\u4f4d\u7f6e\nif (WindowState == FormWindowState.Normal) {\nSettings.Default.MainFormLocation = Location;\n}\n\n// \u4fdd\u5b58\u7a97\u4f53\u5927\u5c0f\nSettings.Default.MainFormSize = Size;\n\n// \u4fdd\u5b58\u5bfc\u822a\u5bb9\u5668\u5206\u9694\u4f4d\u7f6e\nSettings.Default.NavContainerSplitterDistance = NavContainer.SplitterDistance;\n\n// \u4fdd\u5b58\u7a97\u53e3\u4e0d\u900f\u660e\u5ea6\nSettings.Default.WindowOpacity = (int)(Opacity * 100);\n\n// \u4fdd\u5b58\u8bbe\u7f6e\nSettings.Default.Save();\n} catch (Exception ex) {\nLogger.E(TAG, \"Save Settings Error\", ex);\nMessageBox.Show(Resources.SettingSaveError + ex.Message, Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n}\nLogger.I(TAG, \"SaveSettings completed\");\n}", "CodeBleu_score": 58.27748564809474}, {"code": " private void SaveSettings(){\n\t Logger.I(TAG, \"SaveSettings enter\");\n try {\n // \u8bb0\u5f55\u5f53\u524d\u7684\u7a97\u4f53\u4f4d\u7f6e\n if (WindowState == FormWindowState.Normal) {\n Settings.Default.MainFormLocation = Location;\n }\n // \u8bb0\u5f55\u5f53\u524d\u7684\u7a97\u4f53\u5927\u5c0f\n Settings.Default.MainFormSize = Size;\n // \u8bb0\u5f55\u5bfc\u822a\u5bb9\u5668\u7684\u5206\u5272\u4f4d\u7f6e\n Settings.Default.NavContainerSplitterDistance = NavContainer.SplitterDistance;\n // \u8bb0\u5f55\u7a97\u4f53\u4e0d\u900f\u660e\u5ea6\n Settings.Default.WindowOpacity = (int)(Opacity * 100);\n // \u8bb0\u5f55\u81ea\u52a8\u590d\u5236\u9009\u9879\u72b6\u6001\n Settings.Default.AutoCopy = ChkAutoCopy.Checked;\n } catch (Exception ex) {\n Logger.E(TAG, \"SaveSettings error\", ex);\n MessageBox.Show(Resources.SettingSaveError + ex.Message, Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n }\n Logger.I(TAG, \"SaveSettings completed\");\n }", "CodeBleu_score": 58.771057818408956}, {"code": " private void SaveSettings(){\n\ttry {\nLogger.I(TAG, \"SaveSettings enter\");\n// \u4fdd\u5b58\u5f53\u524d\u8bbe\u7f6e\nSettings.Default.AutoCopy = ChkAutoCopy.Checked;\nif (WindowState == FormWindowState.Normal) {\nSettings.Default.MainFormLocation = Location;\n}\nSettings.Default.MainFormSize = Size;\nSettings.Default.NavContainerSplitterDistance = NavContainer.SplitterDistance;\nSettings.Default.WindowOpacity = (int)(Opacity * 100);\nSettings.Default.Save();\nLogger.I(TAG, \"SaveSettings completed\");\n} catch (Exception ex) {\nLogger.E(TAG, \"Save settings error\", ex);\nMessageBox.Show(Resources.SettingSaveError + ex.Message, Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n}\n}", "CodeBleu_score": 53.94696388913843}]}
{"instance_id": "597cf3c3cb9f", "generation_result": [{"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\t\tLogger.I(TAG, \"LoadPageTabOrders enter\");\n\tif (PageTabOrders != null) {\n\t\tLogger.I(TAG, \"LoadPageTabOrders PageTabOrders already initialized\");\n\t\treturn PageTabOrders;\n\t}\n\tPageTabOrders = new List<Tuple<string, bool>>(32);\n\tvar pageOrders = Settings.Default.PageTabOrders;\n\tif (pageOrders == null) {\n\t\tLogger.I(TAG, \"LoadPageTabOrders no page orders found, create default list\");\n\t\tforeach (var page in Pages) {\n\t\t\tPageTabOrders.Add(new Tuple<string, bool>(page.Key, true));\n\t\t}\n\t} else {\n\t\tLogger.I(TAG, \"LoadPageTabOrders page orders found, parse\");\n\t\tforeach (var order in pageOrders) {\n\t\t\tvar pageName = order.Split(';')[0];\n\t\t\tvar isVisible = order.Split(';')[1] == \"True\";\n\t\t\tPageTabOrders.Add(new Tuple<string, bool>(pageName, isVisible));\n\t\t}\n\t}\n\tLogger.I(TAG, \"LoadPageTabOrders completed\");\n\treturn PageTabOrders;\n}", "CodeBleu_score": 37.60997491331985}, {"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\t\tif (PageTabOrders != null) return PageTabOrders;\n\tPageTabOrders = new List<Tuple<string, bool>>();\n\tvar orders = Settings.Default.PageTabOrders;\n\tif (orders == null) {\n\t\tforeach (var page in Pages.Values) {\n\t\t\tPageTabOrders.Add(new Tuple<string, bool>(page.Name, true));\n\t\t}\n\t\treturn PageTabOrders;\n\t}\n\tforeach (var order in orders) {\n\t\tvar name = order.Split('|')[0];\n\t\tvar visible = order.Split('|')[1] == \"True\";\n\t\tPageTabOrders.Add(new Tuple<string, bool>(name, visible));\n\t}\n\treturn PageTabOrders;\n}", "CodeBleu_score": 32.326524644699525}, {"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\t\tLogger.I(TAG, \"LoadPageTabOrders enter\");\n\tif (PageTabOrders != null) {\n\t\tLogger.I(TAG, \"LoadPageTabOrders completed\");\n\t\treturn PageTabOrders;\n\t}\n\tPageTabOrders = new List<Tuple<string, bool>>(32);\n\tvar pageOrders = Settings.Default.PageTabOrders;\n\tif (pageOrders == null) {\n\t\tLogger.I(TAG, \"No page orders found in settings, creating default list\");\n\t\tforeach (var page in Pages.Values) {\n\t\t\tPageTabOrders.Add(new Tuple<string, bool>(page.Name, true));\n\t\t}\n\t} else {\n\t\tLogger.I(TAG, \"Page orders found in settings, parsing\");\n\t\tforeach (var order in pageOrders) {\n\t\t\tvar orderSplit = order.Split('|');\n\t\t\tif (orderSplit.Length == 2) {\n\t\t\t\tvar pageName = orderSplit[0];\n\t\t\t\tvar isVisible = bool.Parse(orderSplit[1]);\n\t\t\t\tPageTabOrders.Add(new Tuple<string, bool>(pageName, isVisible));\n\t\t\t}\n\t\t}\n\t}\n\tLogger.I(TAG, \"LoadPageTabOrders completed\");\n\treturn PageTabOrders;\n}", "CodeBleu_score": 38.58886448794714}]}
{"instance_id": "952af4cba521", "generation_result": [{"code": "public override void Save(FrameInfo info){\n\t", "CodeBleu_score": 2.4940816208980126}, {"code": "public override void Save(FrameInfo info){\n\t\ttry {\n\t\tvar stream = new MemoryStream();\n\t\tvar writer = new BinaryWriter(stream);\n\n\t\twriter.Write(info.Data.Length);\n\t\twriter.Write(stream.Length);\n\n\t\twriter.Write(info.Data);\n\n\t\twriter.Flush();\n\t\tstream.Position = 0;\n\n\t\tvar frame = new Frame(info.Path, info.Delay, stream);\n\t\tProject.Frames.Add(frame);\n\n\t\twriter.Close();\n\t\tstream.Close();\n\t}\n\tcatch (Exception ex) {\n\t\tLogWriter.Log(ex, \"It was not possible to save the frame.\");\n\t}\n}", "CodeBleu_score": 39.47076072516824}, {"code": "public override void Save(FrameInfo info){\n\t\ttry {\n\t\t//Logs the length of the frame data and the current file stream length.\n\t\tLogWriter.Log(info.DataLength, \\\"Frame data length\\\");\n\t\tLogWriter.Log(FileStream.Length, \\\"File stream length\\\");\n\n\t\t//Writes the frame data to the compression stream and flushes the stream.\n\t\tCompressionStream.Write(info.Data, 0, info.DataLength);\n\t\tCompressionStream.Flush();\n\n\t\t//Sets the frame data to null.\n\t\tinfo.Data = null;\n\n\t\t//Adds the frame information to the project's frames collection.\n\t\tProject.Frames.Add(info);\n\t}\n\tcatch (Exception ex) {\n\t\tLogWriter.Log(ex, \\\"It was not possible to save the frame data.\\\");\n\n\t\tMajorCrashHappened = true;\n\n\t\tif (IsAcceptingFrames)\n\t\t\tApplication.Current.Dispatcher.Invoke(() => OnError.Invoke(ex));\n\t}\n}", "CodeBleu_score": 44.48658780675543}]}
{"instance_id": "f9417f7056c0", "generation_result": [{"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\t\t//Pin the buffer in order to pass the address as parameter later.\n\tvar pinnedBuffer = GCHandle.Alloc(buffer, GCHandleType.Pinned);\n\tvar cursorBufferAddress = pinnedBuffer.AddrOfPinnedObject();\n\n\t//Create a surface interface, which can be used to map the texture for CPU access.\n\tvar surface = texture.QueryInterface<Surface>();\n\n\t//Get the cursor shape from the buffer.\n\tvar cursorData = new DataRectangle(cursorBufferAddress, info.PointerShapeBufferSize);\n\n\ttry {\n\t\t//Depending on the cursor type, call the appropriate function to draw the cursor.\n\n\t\t//The Monochrome cursor is the easiest to draw, since it doesn't have to deal with masks or transparency.\n\t\tif (info.Type == 1) {\n\t\t\tDrawMonochromeCursor(surface, info, cursorData, leftCut, topCut, cursorWidth, cursorHeight);\n\t\t}\n\t\t//The Color cursor is similar to the Monochrome one, but it also has to deal with masks.\n\t\telse if (info.Type == 2) {\n\t\t\tDrawColorCursor(surface, info, cursorData, leftCut, topCut, cursorWidth, cursorHeight);\n\t\t}\n\t\t//The Masked Color cursor is the most complex cursor to draw, since it has to deal with both masks and transparency.\n\t\telse if (info.Type == 3) {\n\t\t\tDrawMaskedColorCursor(surface, info, cursorData, leftCut, topCut, cursorWidth, cursorHeight);\n\t\t}\n\t\t//If the cursor type is unknown, the cursor is not drawn.\n\t\telse {\n\t\t\tthrow new Exception(\"Unknown cursor type.\");\n\t\t}\n\t}\n\tfinally {\n\t\t//Unmap the surface to release the CPU access.\n\t\tsurface.Unmap();\n\n\t\t//Free the GCHandle.\n\t\tpinnedBuffer.Free();\n\t}\n}", "CodeBleu_score": 41.25381682560005}, {"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\t\t//Get the surface interface for the CPU access.\n\tSurface surface = texture.QueryInterface<Surface>();\n\n\t//Get the pitch of the texture.\n\tint pitch = surface.Description.Width * 4;\n\n\t//Get the cursor data.\n\tvar cursorData = new byte[cursorWidth * cursorHeight * 4];\n\n\t//If the cursor is monochrome, it will return the cursor shape twice, one is the mask.\n            if (CursorShapeInfo.Type == 1)\n\t{\n\t\t//The cursor is monochrome, so it's a bit more complex to draw.\n            //It will be drawn using the mask, which is the first half of the buffer.\n            DrawMonochromeCursor(buffer, cursorData, cursorWidth, cursorHeight, pitch, leftCut, topCut);\n        }\n\telse if (CursorShapeInfo.Type == 0)\n\t{\n\t\t//The cursor is color, so it's a bit more complex to draw.\n            //It will be drawn using the mask, which is the first half of the buffer.\n            DrawColorCursor(buffer, cursorData, cursorWidth, cursorHeight, pitch, leftCut, topCut);\n        }\n\telse\n\t{\n\t\t//The cursor is masked color, so it's a bit more complex to draw.\n            //It will be drawn using the mask, which is the first half of the buffer.\n            DrawMaskedColorCursor(buffer, cursorData, cursorWidth, cursorHeight, pitch, leftCut, topCut);\n        }\n\n\t//Unmap the surface to release the CPU access.\n\tsurface.Unmap();\n\n\t//Release the surface interface.\n\tsurface.Dispose();\n}", "CodeBleu_score": 41.764042796236765}, {"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\t\tif (texture == null)\n\t\treturn;\n\n\ttry {\n\t\t//Pin the buffer in order to pass the address as parameter later.\n\t\tvar pinnedBuffer = GCHandle.Alloc(buffer, GCHandleType.Pinned);\n\t\tvar cursorBufferAddress = pinnedBuffer.AddrOfPinnedObject();\n\n\t\t//Get the surface interface for CPU access.\n\t\tvar map = texture.Map(0, MapMode.Write, MapFlags.None);\n\n\t\t//Get the pointer to the surface.\n\t\tvar surface = map.DataPointer;\n\n\t\t//Calculate the pitch of the surface.\n\t\tvar pitch = map.RowPitch;\n\n\t\t//Get the pixel size of the surface.\n\t\tvar pixelSize = SharpDX.DXGI.FormatHelper.SizeOfInBytes(texture.Description.Format);\n\n\t\t//Get the size of the cursor.\n\t\tvar width = info.Width;\n\t\tvar height = info.Height;\n\n\t\t//Get the cursor type.\n\t\tvar type = info.Type;\n\n\t\t//Calculate the offset of the cursor.\n\t\tvar offset = (int)info.HotSpot.X + (int)info.HotSpot.Y * width;\n\n\t\t//Monochrome cursor.\n\t\tif (type == 1) {\n\t\t\tDrawMonochromeCursor(surface, pitch, pixelSize, width, height, leftCut, topCut, cursorWidth, cursorHeight, cursorBufferAddress, offset);\n\t\t}\n\t\t//Color cursor.\n\t\telse if (type == 2) {\n\t\t\tDrawColorCursor(surface, pitch, pixelSize, width, height, leftCut, topCut, cursorWidth, cursorHeight, cursorBufferAddress, offset);\n\t\t}\n\t\t//Masked color cursor.\n\t\telse {\n\t\t\tDrawMaskedColorCursor(surface, pitch, pixelSize, width, height, leftCut, topCut, cursorWidth, cursorHeight, cursorBufferAddress, offset);\n\t\t}\n\n\t\t//Unmap the surface to release the CPU access.\n\t\ttexture.Unmap(0);\n\t}\n\tcatch (Exception ex) {\n\t\tLogWriter.Log(ex, \"It was not possible to draw the cursor shape.\");\n\t}\n}", "CodeBleu_score": 45.5508490994011}]}
{"instance_id": "3eb27d345e3c", "generation_result": [{"code": "public static IUploader CreateCloud(UploadDestinations service){\n\tswitch (service)\n{\ncase UploadDestinations.Imgur:\nreturn new ImgurUploader();\ncase UploadDestinations.Yandex:\nreturn new YandexDiskUploader();\ndefault:\nthrow new NotImplementedException();\n}\n}", "CodeBleu_score": 72.27331152800649}, {"code": "public static IUploader CreateCloud(UploadDestinations service){\n\tswitch (service) {\ncase UploadDestinations.Imgur:\nreturn new ImgurUploader();\ncase UploadDestinations.YandexDisk:\nreturn new YandexDiskUploader();\ndefault:\nthrow new NotImplementedException();\n}\n}", "CodeBleu_score": 69.9537006167335}, {"code": "public static IUploader CreateCloud(UploadDestinations service){\n\t\\tswitch (service)\n\\t{\n\"\"\"\n\nfor service in services:\n    code += f\"\\t\\tcase UploadDestinations.{service.name}:\n\\t\\t\\treturn new {service.name}Uploader();\n\"\n\ncode += \"\"\"\\t\\tdefault:\n\\t\\t\\tthrow new NotImplementedException();\n\\t}\n}", "CodeBleu_score": 29.66502175738356}]}
{"instance_id": "8e8c5ad2d18c", "generation_result": [{"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\t\n#region Validation\n\nif (string.IsNullOrWhiteSpace(path))\n    throw new ArgumentException(\\\"The provided file path is invalid.\\\", nameof(path));\n\n#endregion\n\n#region Get upload link\n\nvar uploadLink = await GetUploadLinkAsync(preset, path, progressCallback, cancellationToken);\n\nif (string.IsNullOrWhiteSpace(uploadLink))\n    throw new UploadException(\\\"The upload link is invalid.\\\");\n\n#endregion\n\n#region Upload\n\nusing (var stream = File.OpenRead(path))\n{\n    var content = new StreamContent(stream);\n\n    var response = await Client.PostAsync(uploadLink, content, cancellationToken);\n\n    if (!response.IsSuccessStatusCode)\n        throw new UploadException(response.ReasonPhrase);\n}\n\n#endregion\n\n#region Get download link\n\nvar downloadLink = await GetDownloadLinkAsync(preset, path, progressCallback, cancellationToken);\n\nif (string.IsNullOrWhiteSpace(downloadLink))\n    throw new UploadException(\\\"The download link is invalid.\\\");\n\n#endregion\n\n#region Create history\n\nvar history = new History();\nhistory.Id = Guid.NewGuid();\nhistory.Title = Path.GetFileName(path);\nhistory.FileType = Path.GetExtension(path);\nhistory.CreationDate = DateTime.Now;\nhistory.Path = path;\nhistory.Url = downloadLink;\nhistory.Uploader = preset.Name;\nhistory.Source = \\\"Yandex Disk\\\";\nhistory.UploaderId = preset.Id;\nhistory.IsUploading = false;\nhistory.IsUploaded = true;\n\n#endregion\n\nreturn history;\n}", "CodeBleu_score": 49.918155106543935}, {"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\t\n#region Check if the file exists.\n\n        if (!File.Exists(path))\n            throw new UploadException($\"The file '{path}' does not exist.\");\n\n#endregion\n\n#region Check if the upload link is valid.\n\n        if (string.IsNullOrEmpty(preset.UploadLink))\n            throw new UploadException(\"The upload link is invalid.\");\n\n#endregion\n\n#region Get the upload link.\n\n        var link = await GetUploadLink(preset, path, progressCallback, cancellationToken);\n\n#endregion\n\n#region Check if the upload link is valid.\n\n        if (string.IsNullOrEmpty(link))\n            throw new UploadException(\"The upload link is invalid.\");\n\n#endregion\n\n#region Upload the file.\n\n        var result = await UploadFile(link, path, progressCallback, cancellationToken);\n\n#endregion\n\n#region Check if the upload was successful.\n\n        if (!result)\n            throw new UploadException(\"The upload failed.\");\n\n#endregion\n\n#region Get the download link.\n\n        var downloadLink = await GetDownloadLink(preset, path, progressCallback, cancellationToken);\n\n#endregion\n\n#region Check if the download link is valid.\n\n        if (string.IsNullOrEmpty(downloadLink))\n            throw new UploadException(\"The download link is invalid.\");\n\n#endregion\n\n#region Create the history record.\n\n        var history = new History\n        {\n            Id = Guid.NewGuid(),\n            Created = DateTime.Now,\n            Type = preset.Title,\n            Path = path,\n            Url = downloadLink,\n            Size = new FileInfo(path).Length,\n            Status = HistoryStatus.Uploaded\n        };\n\n#endregion\n\n#region Return the history record.\n\n        return history;\n\n#endregion\n\n    }", "CodeBleu_score": 48.20714039440085}, {"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\t", "CodeBleu_score": 13.85603704391254}]}
{"instance_id": "0c0b742bf9e6", "generation_result": [{"code": "internal virtual void StartCapture(){\n\t", "CodeBleu_score": 2.1549930480169595}, {"code": "internal virtual void StartCapture(){\n\t", "CodeBleu_score": 2.1549930480169595}, {"code": "internal virtual void StartCapture(){\n\t#if DEBUG\n    LogWriter.Log(\\\"StartCapture\\\");\n#endif\n\n    //Set the capture timer.\n    _captureToken = new CancellationTokenSource();\n\n    //Start the garbage collection timer.\n    GarbageTimer.Start();\n\n    //Lock the user settings.\n    UserSettings.All.Lock();\n\n    //Start the capture loop.\n    Task.Run(async () => await CaptureLoop(_captureToken.Token), _captureToken.Token).ContinueWith(task =>\n    {\n        //If the task is cancelled, stop the capture.\n        if (task.IsCanceled)\n            StopCapture();\n    });\n}", "CodeBleu_score": 40.14837588295799}]}
{"instance_id": "8f8be335465f", "generation_result": [{"code": "private void CaptureWithCursor(int interval){\n\t\tvar watch = new Stopwatch();\n\twatch.Start();\n\n\twhile (!_captureToken.IsCancellationRequested) {\n\t\twatch.Restart();\n\n\t\tvar frame = new FrameModel();\n\t\tframe.CreateEmptyFrame(UserSettings.All.IncludeCursor, UserSettings.All.IncludeCursor, UserSettings.All.IncludeCursor);\n\n\t\tKeyList.Clear();\n\n\t\tCapture = GetDirectCapture();\n\t\tCapture.Capture(frame, KeyList);\n\n\t\tFrameCount++;\n\t\twatch.Stop();\n\n\t\t//If the capture interval is less than the elapsed time, we will wait.\n\t\tif (watch.ElapsedMilliseconds < interval)\n\t\t\tThread.Sleep(interval - (int)watch.ElapsedMilliseconds);\n\t}\n}", "CodeBleu_score": 45.57827983075556}, {"code": "private void CaptureWithCursor(int interval){\n\tCapture = GetDirectCapture();\nCapture.Start();\n\nwhile (true) {\n    if (_captureToken.IsCancellationRequested)\n        return;\n\n    var sw = Stopwatch.StartNew();\n\n    var frame = Capture.CaptureWithCursor();\n\n    KeyList.Clear();\n\n    var result = Capture.Capture();\n\n    if (result != null)\n        FrameCount++;\n\n    sw.Stop();\n\n    if (sw.ElapsedMilliseconds < interval)\n        Thread.Sleep(interval - (int)sw.ElapsedMilliseconds);\n}\n}", "CodeBleu_score": 40.49033856331074}, {"code": "private void CaptureWithCursor(int interval){\n\t\n//Create a stopwatch to measure the elapsed time.\nStopwatch stopwatch = Stopwatch.StartNew();\n\nwhile (true) {\n\n//Restart the stopwatch.\nstopwatch.Restart();\n\n//Create a new frame with cursor data.\nFrameInfo frame = new FrameInfo(KeyList, RecordClicked);\n\n\n//Clear the key list.\nKeyList.Clear();\n\n//Capture the frame.\nCapture.CaptureFrame(frame);\n\n\n//Update the frame count.\nFrameCount++;\n\n//If the elapsed time is less than the interval, wait until the interval is reached.\nif (stopwatch.ElapsedMilliseconds < interval)\n//    Thread.Sleep(1);\n\n\n//If the capture token is cancelled, stop the loop.\nif (_captureToken.IsCancellationRequested)\n//    break;\n\n\n}\n\n}", "CodeBleu_score": 34.205035713174894}]}
{"instance_id": "8ad9c7b2a317", "generation_result": [{"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\tif (UsingBorderImplementation) {\n// Revert to the Border implementation\nreturn base.ArrangeOverride(arrangeSize);\n}\n\nvar child = Child;\nif (child == null) return arrangeSize;\n\n// Use the public Padding property if it's set\nvar padding = Padding;\nif (padding.Equals(new Thickness()))\npadding = DefaultPadding;\n\nvar childWidth = arrangeSize.Width;\nvar childHeight = arrangeSize.Height;\n\n// If there is an actual constraint, then reserve space for the chrome\nif (!double.IsInfinity(childWidth)) {\nchildWidth = Math.Max(0.0, childWidth - padding.Left - padding.Right);\n}\n\nif (!double.IsInfinity(childHeight)) {\nchildHeight = Math.Max(0.0, childHeight - padding.Top - padding.Bottom);\n}\n\nchild.Arrange(new Rect(padding.Left, padding.Top, childWidth, childHeight));\nreturn arrangeSize;\n}", "CodeBleu_score": 75.43939315454861}, {"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\t\tif (UsingBorderImplementation) {\n\t\t// Revert to the Border implementation\n\t\treturn base.ArrangeOverride(arrangeSize);\n\t}\n\n\tUIElement child = Child;\n\tif (child == null) return new Size();\n\n\t// Use the public Padding property if it's set\n\tThickness padding = Padding;\n\tif (padding.Equals(new Thickness()))\n\t\tpadding = DefaultPadding;\n\n\tdouble childWidth = arrangeSize.Width;\n\tdouble childHeight = arrangeSize.Height;\n\n\t// If there is an actual constraint, then reserve space for the chrome\n\tif (!double.IsInfinity(childWidth)) {\n\t\tchildWidth = Math.Max(0.0, childWidth - padding.Left - padding.Right);\n\t}\n\n\tif (!double.IsInfinity(childHeight)) {\n\t\tchildHeight = Math.Max(0.0, childHeight - padding.Top - padding.Bottom);\n\t}\n\n\tchild.Arrange(new Rect(padding.Left, padding.Top, childWidth, childHeight));\n\treturn arrangeSize;\n}", "CodeBleu_score": 61.367124833966024}, {"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\t\tif (UsingBorderImplementation) {\n\t\t// Revert to the Border implementation\n\t\treturn base.ArrangeOverride(arrangeSize);\n\t}\n\n\tvar child = Child;\n\tif (child == null) return arrangeSize;\n\n\t// Use the public Padding property if it's set\n\tvar padding = Padding;\n\tif (padding.Equals(new Thickness()))\n\t\tpadding = DefaultPadding;\n\n\tvar childWidth = arrangeSize.Width;\n\tvar childHeight = arrangeSize.Height;\n\n\t// If there is an actual constraint, then reserve space for the chrome\n\tif (!double.IsInfinity(childWidth)) {\n\t\tchildWidth = Math.Max(0.0, childWidth - padding.Left - padding.Right);\n\t}\n\n\tif (!double.IsInfinity(childHeight)) {\n\t\tchildHeight = Math.Max(0.0, childHeight - padding.Top - padding.Bottom);\n\t}\n\n\tchild.Arrange(new Rect(padding.Left, padding.Top, childWidth, childHeight));\n\treturn arrangeSize;\n}", "CodeBleu_score": 74.81686634468517}]}
{"instance_id": "719b23bc4229", "generation_result": [{"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\tbase.OnLostFocus(e);\n\nif (!UpdateOnInput || _ignore || string.IsNullOrEmpty(Text) || !IsTextAllowed(Text))\nreturn;\n\n_ignore = true;\n\nValue = Math.Round(Convert.ToDecimal(Text, CultureInfo.CurrentCulture) / Scale, Decimals);\n\n_ignore = false;\n\nbase.OnTextChanged(e);\n}", "CodeBleu_score": 35.69001465423731}, {"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\tbase.OnLostFocus(e);\nif (!UpdateOnInput || _ignore || string.IsNullOrEmpty(Text) || !IsTextAllowed(Text))\nreturn;\n\n_ignore = true;\n\nValue = Math.Round(Convert.ToDecimal(Text, CultureInfo.CurrentCulture) / Scale, Decimals);\n\n_ignore = false;\n\nbase.OnTextChanged(e);\n}", "CodeBleu_score": 35.69001465423731}, {"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\tbase.OnLostFocus(e);\nif (!UpdateOnInput || _ignore || string.IsNullOrEmpty(Text) || !IsTextAllowed(Text))\nreturn;\n\n_ignore = true;\n\nValue = Math.Round(Convert.ToDecimal(Text, CultureInfo.CurrentCulture) / Scale, Decimals);\n\n_ignore = false;\n\nbase.OnTextChanged(e);\n}", "CodeBleu_score": 35.69001465423731}]}
{"instance_id": "4bdfdcf8e5ea", "generation_result": [{"code": "protected override void OnKeyDown(KeyEventArgs e){\n\tif (e.Key == Key.Enter || e.Key == Key.Return) {\ne.Handled = true;\nMoveFocus(new TraversalRequest(FocusNavigationDirection.Next));\n}\nbase.OnKeyDown(e);\n}", "CodeBleu_score": 81.58862770183283}, {"code": "protected override void OnKeyDown(KeyEventArgs e){\n\tif (e.Key == Key.Enter || e.Key == Key.Return) {\ne.Handled = true;\nMoveFocus(new TraversalRequest(FocusNavigationDirection.Next));\n}\nbase.OnKeyDown(e);\n}", "CodeBleu_score": 81.58862770183283}, {"code": "protected override void OnKeyDown(KeyEventArgs e){\n\tbase.OnKeyDown(e);\n\nif (e.Key == Key.Enter || e.Key == Key.Return) {\ne.Handled = true;\nMoveFocus(new TraversalRequest(FocusNavigationDirection.Next));\n}\n}", "CodeBleu_score": 75.0314108881904}]}
{"instance_id": "e9d822d22392", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tbase.OnMouseMove(e);\n\n\tif (IsMouseCaptured)\n\t{\n\t\tif (DrawingMode == DrawingModes.Select)\n\t\t{\n\t\t\tif (_selectedShapes.Count == 0 || (Keyboard.Modifiers & ModifierKeys.Control) != 0)\n\t\t\t{\n\t\t\t\tvar endPoint = e.GetPosition(this);\n\n\t\t\t\tif (endPoint.X > _startPoint.X)\n\t\t\t\t{\n\t\t\t\t\tSelection = new Rect(_startPoint, new Size(endPoint.X - _startPoint.X, Selection.Height));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tSelection = new Rect(endPoint, new Size(_startPoint.X - endPoint.X, Selection.Height));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//When the user is drawing a selection rectangle, the cursor will be set to a cross.\n\t\t\t\tCursor = Cursors.Cross;\n\n\t\t\t\t//When the user is moving the mouse, the selection rectangle will be updated.\n\t\t\t\tvar endPoint = e.GetPosition(this);\n\n\t\t\t\tif (endPoint.X > _startPoint.X)\n\t\t\t\t{\n\t\t\t\t\tSelection = new Rect(_startPoint, new Size(endPoint.X - _startPoint.X, Selection.Height));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tSelection = new Rect(endPoint, new Size(_startPoint.X - endPoint.X, Selection.Height));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (DrawingMode == DrawingModes.Shape)\n\t\t{\n\t\t\tif (IsDrawing)\n\t\t\t{\n\t\t\t\tvar endPoint = e.GetPosition(this);\n\n\t\t\t\tif (endPoint.X > _startPoint.X)\n\t\t\t\t{\n\t\t\t\t\tRenderRegion = new Rect(_startPoint, new Size(endPoint.X - _startPoint.X, RenderRegion.Height));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tRenderRegion = new Rect(endPoint, new Size(_startPoint.X - endPoint.X, RenderRegion.Height));\n\t\t\t\t}\n\n\t\t\t\tCalculateOrientation(_startPoint, endPoint);\n\t\t\t\tRenderShape();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 40.86858349028483}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tif (e.LeftButton == MouseButtonState.Pressed && Mouse.Captured == this) {\n\t\tswitch (DrawingMode) {\n\t\t\tcase DrawingModes.Select: {\n\t\t\t\tif (_selectedShapes.Count == 0 || (Keyboard.Modifiers & ModifierKeys.Control) == ModifierKeys.Control) {\n\t\t\t\t\tvar endPoint = e.GetPosition(this);\n\n\t\t\t\t\tif (endPoint.X < _startPoint.X) {\n\t\t\t\t\t\tvar temp = endPoint.X;\n\t\t\t\t\t\tendPoint.X = _startPoint.X;\n\t\t\t\t\t\t_startPoint.X = temp;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (endPoint.Y < _startPoint.Y) {\n\t\t\t\t\t\tvar temp = endPoint.Y;\n\t\t\t\t\t\tendPoint.Y = _startPoint.Y;\n\t\t\t\t\t\t_startPoint.Y = temp;\n\t\t\t\t\t}\n\n\t\t\t\t\tSelection = new Rect(_startPoint, endPoint);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase DrawingModes.Shape: {\n\t\t\t\tRenderRegion = new Rect(_startPoint, e.GetPosition(this));\n\n\t\t\t\tCalculateOrientation(_startPoint, e.GetPosition(this));\n\t\t\t\tRenderShape();\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tbase.OnMouseMove(e);\n}", "CodeBleu_score": 32.63167127724991}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\n\nif (IsMouseCaptured) {\n    switch (DrawingMode) {\n        case DrawingModes.Select: {\n            if (_selectedShapes.Count == 0 || (Keyboard.Modifiers & ModifierKeys.Control) != 0) {\n                var currentPoint = e.GetPosition(this);\n\n                if (Selection.Width == 0) {\n                    Selection = new Rect(_startPoint, new Size(0, 0));\n                }\n\n                Selection.Width = Math.Max(0, currentPoint.X - Selection.X);\n                Selection.Height = Math.Max(0, currentPoint.Y - Selection.Y);\n\n                InvalidateVisual();\n            }\n\n            break;\n        }\n        case DrawingModes.Shape: {\n            if (IsDrawing) {\n                var currentPoint = e.GetPosition(this);\n\n                RenderRegion.Width = Math.Max(0, currentPoint.X - RenderRegion.X);\n                RenderRegion.Height = Math.Max(0, currentPoint.Y - RenderRegion.Y);\n\n                CalculateOrientation(_startPoint, currentPoint);\n                RenderShape();\n            }\n\n            break;\n        }\n    }\n}\n}", "CodeBleu_score": 36.933357910294504}]}
{"instance_id": "b853f670928a", "generation_result": [{"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\tif (!(sender is Thumb)) return;\n\ne.Handled = true;\n\n//Change the size by the amount the user drags the cursor.\nvar width = Math.Max(_adornedElement.DesiredSize.Width + e.HorizontalChange, 10);\nvar height = Math.Max(_adornedElement.DesiredSize.Height + e.VerticalChange, 10);\nvar left = Canvas.GetLeft(_adornedElement);\n\nif (left + width > _parent.ActualWidth)\nwidth = _parent.ActualWidth - left;\n\nif (Canvas.GetTop(_adornedElement) + height > _parent.ActualHeight)\nheight = _parent.ActualHeight - Canvas.GetTop(_adornedElement);\n\nRaiseManipulatedEvent(width - _adornedElement.Width, height - _adornedElement.Height, 0, 0);\n\n_adornedElement.Height = height;\n_adornedElement.Width = width;\n\nAfterManipulation();\n}", "CodeBleu_score": 76.79210203723852}, {"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\tif (!(sender is Thumb)) return;\n\ne.Handled = true;\n\n//Change the size by the amount the user drags the cursor.\nvar width = Math.Max(_adornedElement.DesiredSize.Width + e.HorizontalChange, 10);\nvar height = Math.Max(_adornedElement.DesiredSize.Height + e.VerticalChange, 10);\nvar left = Canvas.GetLeft(_adornedElement);\n\nif (Canvas.GetLeft(_adornedElement) + width > _parent.ActualWidth)\nwidth = _parent.ActualWidth - Canvas.GetLeft(_adornedElement);\n\nif (Canvas.GetTop(_adornedElement) + height > _parent.ActualHeight)\nheight = _parent.ActualHeight - Canvas.GetTop(_adornedElement);\n\nRaiseManipulatedEvent(width - _adornedElement.Width, height - _adornedElement.Height, 0, 0);\n\n_adornedElement.Height = height;\n_adornedElement.Width = width;\n\nAfterManipulation();\n}", "CodeBleu_score": 70.90234963984514}, {"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\tif (!(sender is Thumb)) return;\n\ne.Handled = true;\n\n//Change the size by the amount the user drags the cursor.\nvar width = Math.Max(_adornedElement.DesiredSize.Width + e.HorizontalChange, 10);\nvar height = Math.Max(_adornedElement.DesiredSize.Height + e.VerticalChange, 10);\nvar left = Canvas.GetLeft(_adornedElement);\n\nif (left + width > _parent.ActualWidth)\nwidth = _parent.ActualWidth - left;\n\nif (Canvas.GetTop(_adornedElement) + height > _parent.ActualHeight)\nheight = _parent.ActualHeight - Canvas.GetTop(_adornedElement);\n\nRaiseManipulatedEvent(width - _adornedElement.Width, height - _adornedElement.Height, 0, 0);\n\n_adornedElement.Height = height;\n_adornedElement.Width = width;\n\nAfterManipulation();\n}", "CodeBleu_score": 76.79210203723852}]}
{"instance_id": "4f79040b5f53", "generation_result": [{"code": "public ComboBoxesViewModel(){\n\tint[] list = Enumerable.Range(0, 1000).ToArray();\nstring[] shortList = new string[] { \"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\" };\nRandom random = new Random();\nstring[] longList = new string[1000];\nfor (int i = 0; i < 1000; i++) {\nlongList[i] = Path.GetFileName(Path.GetRandomFileName());\n}\nSelectedValueOne = list[random.Next(list.Length - 1)];\nSelectedTextTwo = shortList[random.Next(shortList.Length - 1)];\nSelectedValidationOutlined = longList[random.Next(longList.Length - 1)];\nSelectedValidationFilled = longList[random.Next(longList.Length - 1)];\n}", "CodeBleu_score": 46.5627523832508}, {"code": "public ComboBoxesViewModel(){\n\tList<int> intList = new List<int>();\nfor (int i = 0; i < 1000; i++) {\nintList.Add(i);\n}\nIntList = intList;\nShortList = new List<string> { \"Item 1\", \"Item 2\", \"Item 3\" };\nSelectedValueOne = IntList.First();\nSelectedTextTwo = null;\nList<string> randomList = new List<string>();\nfor (int i = 0; i < 1000; i++) {\nrandomList.Add(Path.GetFileNameWithoutExtension(Path.GetRandomFileName()));\n}\nLongList = randomList;\n}", "CodeBleu_score": 51.49190729409673}, {"code": "public ComboBoxesViewModel(){\n\t\nList<string> list = new List<string>();\n\nfor (int i = 0; i < 1000; i++)\n{\nlist.Add(Path.GetRandomFileName());\n}\n\nSelectedValidationOutlined = list[0];\nSelectedValidationFilled = list[0];\n\nList<int> intList = new List<int>();\n\nfor (int i = 0; i < 1000; i++)\n{\nintList.Add(i);\n}\n\nSelectedValueOne = intList[0];\nSelectedTextTwo = null;\n}", "CodeBleu_score": 40.086575922363025}]}
{"instance_id": "ca40ae89e1a2", "generation_result": [{"code": "private async Task RunDialog() {\n\tvar dialog = new SampleDialog();\ndialog.SetBinding(Dialog.DataContextProperty, new Binding() { Source = new SampleDialogViewModel(), Mode = BindingMode.OneWay });\ndialog.Closing += Dialog_Closing;\ndialog.Closed += Dialog_Closed;\nawait DialogHost.Show(dialog, \"RootDialog\");\n}", "CodeBleu_score": 20.347152575234137}, {"code": "private async Task RunDialog() {\n\tvar dialog = new SampleDialog();\ndialog.SetBinding(Dialog.DataContextProperty, new Binding() {\nSource = new SampleDialogViewModel(),\nMode = BindingMode.OneWay\n});\ndialog.Closing += DialogClosingEventHandler;\ndialog.Closed += DialogClosedEventHandler;\nawait DialogHost.Show(dialog, \"RootDialog\");\n}", "CodeBleu_score": 22.196919650492788}, {"code": "private async Task RunDialog() {\n\tSampleDialog dialog = new SampleDialog();\nSampleDialogViewModel vm = new SampleDialogViewModel();\nvm.CloseCommand = new RelayCommand<string>(CloseDialog);\nvm.ClosedCommand = new RelayCommand(CloseDialog);\ndialog.DataContext = vm;\nbool? result = await DialogHost.Show(dialog, \"RootDialog\", ClosingEventHandler, ClosedEventHandler);\nDebug.WriteLine(result);\n}", "CodeBleu_score": 25.04297201124015}]}
{"instance_id": "d82f32ed6e43", "generation_result": [{"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\t\tvar paletteHelper = new PaletteHelper();\n\tvar theme = paletteHelper.GetTheme();\n\tif (theme is not null) {\n\t\tmodificationAction(theme);\n\t\tpaletteHelper.SetTheme(theme);\n\t}\n}", "CodeBleu_score": 62.34114984887273}, {"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\t\tvar paletteHelper = new PaletteHelper();\n\tvar theme = paletteHelper.GetTheme();\n\tif (theme != null) {\n\t\tmodificationAction(theme);\n\t\tpaletteHelper.SetTheme(theme);\n\t}\n}", "CodeBleu_score": 62.722343831764135}, {"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\t\tvar paletteHelper = new PaletteHelper();\n\tvar theme = paletteHelper.GetTheme();\n\tif (theme is not null) {\n\t\tmodificationAction(theme);\n\t\tpaletteHelper.SetTheme(theme);\n\t}\n}", "CodeBleu_score": 62.34114984887273}]}
{"instance_id": "8cf8182d763e", "generation_result": [{"code": "private object? CreateContent(){\n\t\tobject? content = Activator.CreateInstance(_contentType);\n\n\tif (_dataContext != null && content is FrameworkElement frameworkElement) {\n\t\tframeworkElement.DataContext = _dataContext;\n\t}\n\n\treturn content;\n}", "CodeBleu_score": 79.93303856976756}, {"code": "private object? CreateContent(){\n\t\tvar content = Activator.CreateInstance(_contentType);\n\tif (_dataContext != null && content is FrameworkElement frameworkElement) {\n\t\tframeworkElement.DataContext = _dataContext;\n\t}\n\treturn content;\n}", "CodeBleu_score": 89.86998440404454}, {"code": "private object? CreateContent(){\n\tvar content = Activator.CreateInstance(_contentType);\nif (_dataContext != null && content is FrameworkElement frameworkElement)\nframeworkElement.DataContext = _dataContext;\nreturn content;\n}", "CodeBleu_score": 80.66651853520513}]}
{"instance_id": "96cb26c3eacc", "generation_result": [{"code": "private void AcceptSample4Dialog(object? _){\n\tSample4Content = new SampleProgressDialog();\nIsSample4DialogOpen = true;\nTask.Delay(TimeSpan.FromSeconds(3)).ContinueWith((t, _) => IsSample4DialogOpen = false, null, TaskScheduler.FromCurrentSynchronizationContext());\n}", "CodeBleu_score": 84.02715506130629}, {"code": "private void AcceptSample4Dialog(object? _){\n\tSample4Content = new SampleProgressDialog();\nTask.Delay(TimeSpan.FromSeconds(3))\n    .ContinueWith((t, _) => IsSample4DialogOpen = false, null,\n        TaskScheduler.FromCurrentSynchronizationContext());\n}", "CodeBleu_score": 95.22644268858639}, {"code": "private void AcceptSample4Dialog(object? _){\n\tSample4Content = new SampleProgressDialog();\nIsSample4DialogOpen = true;\nTask.Delay(TimeSpan.FromSeconds(3)).ContinueWith((t, _) => IsSample4DialogOpen = false, null, TaskScheduler.FromCurrentSynchronizationContext());\n}", "CodeBleu_score": 84.02715506130629}]}
{"instance_id": "7afa49e4a449", "generation_result": [{"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\t\tforeach (var trigger in _deviceTriggers) {\n\t\tif (trigger.Device.Id == device.Id && trigger.Option == option) {\n\t\t\tTriggered?.Invoke(trigger);\n\t\t}\n\t}\n}", "CodeBleu_score": 66.39462534561352}, {"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\t\tforeach (var trigger in _deviceTriggers) {\n\t\tif (trigger.Device.Id == device.Id && trigger.Option == option) {\n\t\t\tTriggered?.Invoke(trigger);\n\t\t}\n\t}\n}", "CodeBleu_score": 66.39462534561352}, {"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\tforeach (var trigger in _deviceTriggers) {\nif (trigger.Device.Id == device.Id && trigger.Option == option) {\nTriggered?.Invoke(trigger);\n}\n}\n}", "CodeBleu_score": 65.97620983910554}]}
{"instance_id": "50c38fc69dac", "generation_result": [{"code": "private void LoadAndRegister(){\n\t\t_triggerManager.Clear();\n\t_actions = Settings.Get<EarTrumpetAction[]>(c_actionsSettingKey);\n\tforeach (var action in _actions) {\n\t\tforeach (var trigger in action.Triggers) {\n\t\t\t_triggerManager.Register(trigger, action);\n\t\t}\n\t}\n}", "CodeBleu_score": 52.07551300899842}, {"code": "private void LoadAndRegister(){\n\t\t_triggerManager.Clear();\n\tforeach (var action in Actions) {\n\t\tforeach (var trigger in action.Triggers) {\n\t\t\t_triggerManager.Register(trigger, action);\n\t\t}\n\t}\n}", "CodeBleu_score": 24.848392149335314}, {"code": "private void LoadAndRegister(){\n\t\t_triggerManager.Clear();\n\t_actions = Settings.Get<EarTrumpetAction[]>(c_actionsSettingKey);\n\tforeach (var action in _actions) {\n\t\tforeach (var trigger in action.Triggers) {\n\t\t\t_triggerManager.Register(trigger);\n\t\t}\n\t}\n}", "CodeBleu_score": 53.15640537520245}]}
{"instance_id": "ab8051e72909", "generation_result": [{"code": "private void OnTriggered(BaseTrigger trigger){\n\tforeach (var action in Actions.Where(a => a.Triggers.Contains(trigger))) {\nif (action.Conditions.All(c => c.Check())) {\nTriggerAction(action);\nbreak;\n}\n}\n}", "CodeBleu_score": 28.910868929854168}, {"code": "private void OnTriggered(BaseTrigger trigger){\n\t\tif (trigger is ContextMenuTrigger) {\n\t\treturn;\n\t}\n\n\tvar actions = Actions.Where(a => a.Triggers.Contains(trigger));\n\tforeach (var action in actions) {\n\t\tif (action.Conditions.All(c => c.IsMet(LocalVariables))) {\n\t\t\tTriggerAction(action);\n\t\t\tbreak;\n\t\t}\n\t}\n}", "CodeBleu_score": 58.97856792926397}, {"code": "private void OnTriggered(BaseTrigger trigger){\n\t\tif (trigger == null) { return; }\n\tif (trigger is ContextMenuTrigger) { return; }\n\tif (trigger.Action == null) { return; }\n\n\tvar actions = Actions.Where(a => a.Triggers.Contains(trigger));\n\tforeach (var action in actions)\n\t{\n\t\tif (action.Conditions.All(c => c.IsConditionMet(trigger)))\n\t\t{\n\t\t\tTriggerAction(action);\n\t\t\tbreak;\n\t\t}\n\t}\n}", "CodeBleu_score": 57.355770310747566}]}
{"instance_id": "2f85d28001cf", "generation_result": [{"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\tlet scope_graph = self.scope_graph.borrow();\nlet mut variables = scope_graph.get_variables_mentioning(name);\nvariables.retain(|var| var.is_poll());\nfor variable in variables {\nif let Ok(result) = variable.evaluate_run_while_expression(&scope_graph) {\nif result {\nself.script_var_handler.start(variable.name.clone());\n} else {\nself.script_var_handler.stop(&variable.name);\n}\n} else {\nerror_handling_ctx::print_error(result.err().unwrap());\n}\n}\n}", "CodeBleu_score": 22.955984345406506}, {"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\tlet scope_graph = &mut *self.scope_graph.borrow_mut();\nlet poll_vars = scope_graph.poll_vars_mentioning(name);\nfor poll_var in poll_vars {\nif let PollType::Script(script_var) = poll_var.poll_type {\nif let Some(run_while_expr) = poll_var.run_while {\nif let Ok(true) = run_while_expr.eval(scope_graph) {\nself.script_var_handler.start_script_var(&script_var);\n} else {\nself.script_var_handler.stop_script_var(&script_var);\n}\n}\n}\n}\n}", "CodeBleu_score": 22.42751745338519}, {"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\tlet scope_graph = &mut *self.scope_graph.borrow_mut();\nlet mentioned_vars = scope_graph.get_vars_mentioning(name);\nlet mentioned_script_vars = mentioned_vars.iter().filter(|(_, var)| var.is_poll()).cloned().collect::<Vec<_>>();\nfor (var_name, var) in mentioned_script_vars {\nif let Err(err) = scope_graph.evaluate_poll_expression(var_name) {\nerror_handling_ctx::print_error(err);\n}\nif let Err(err) = self.script_var_handler.start_if_should_run(var_name) {\nerror_handling_ctx::print_error(err);\n}\n}\n}", "CodeBleu_score": 36.772169649546235}]}
{"instance_id": "56f67ae91214", "generation_result": [{"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\tself.open_windows.remove(instance_id).ok_or_else(|| anyhow!(\\\"No window with id {} found\\\", instance_id))?.close();\nself.scope_graph.borrow_mut().remove_scope_by_name(instance_id);\nself.script_var_handler.stop_for_window(instance_id);\nOk(())\n}", "CodeBleu_score": 41.00251706514895}, {"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\tlet window = self.open_windows.remove(instance_id).ok_or_else(|| anyhow!(\\\"Window with id {} not found\\\", instance_id))?;\nwindow.close();\nself.scope_graph.borrow_mut().remove_scope(instance_id);\nself.script_var_handler.stop_for_scope(instance_id);\nself.apply_run_while_expressions_mentioning(instance_id);\nOk(())\n}", "CodeBleu_score": 44.973842808015036}, {"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\t", "CodeBleu_score": 14.586088025188115}]}
{"instance_id": "a496c83ce944", "generation_result": [{"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\t\n}", "CodeBleu_score": 10.141591668738661}, {"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\t", "CodeBleu_score": 10.07331619203318}, {"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\t", "CodeBleu_score": 10.07331619203318}]}
{"instance_id": "939eb758c6a2", "generation_result": [{"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\t", "CodeBleu_score": 8.294229199741606}, {"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\t", "CodeBleu_score": 8.294229199741606}, {"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\t", "CodeBleu_score": 8.294229199741606}]}
{"instance_id": "4a881d16b9af", "generation_result": [{"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\t\n    let display = gdk::Display::get_default().context(\\\"Failed to get default display\\\")?;\n    let monitors = display.get_monitors();\n    if identifier.is_none() {\n        return Ok(monitors.get(0).context(\\\"Failed to get primary monitor\\\")?);\n    }\n    let identifier = identifier.unwrap();\n    let monitors: Vec<_> = monitors.iter().map(|monitor| (monitor.get_model().to_string(), monitor.geometry())).collect();\n    let monitor = monitors.into_iter().find(|(name, _)| name == identifier).map(|(_, monitor)| monitor).context(\\\"Failed to find monitor with identifier `{}`\\\".format(identifier))?;\n\n    Ok(monitor)\n}", "CodeBleu_score": 19.49450500387134}, {"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\t", "CodeBleu_score": 1.6300433087373216}, {"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\t\tlet display = gdk::Display::get_default().context(\\\"Failed to get default display\\\")?;\n\tlet monitors = display.get_monitors().context(\\\"Failed to get monitors from display\\\")?;\n\tlet monitor = match identifier {\n        Some(MonitorIdentifier::Number(number)) => {\n            monitors.get(number).context(\\\"Monitor with specified number does not exist\\\")?\n        }\n        Some(MonitorIdentifier::Name(name)) => {\n            monitors.iter().find(|monitor| monitor.model().and_then(|model| model.to_string().ok()).unwrap_or_default().to_lowercase() == name.to_lowercase()).context(\\\"Monitor with specified name does not exist\\\")?\n        }\n        _ => monitors.get(0).context(\\\"No monitors found\\\")?,\n    };\n\tOk(monitor)\n}", "CodeBleu_score": 23.19615864162653}]}
{"instance_id": "0d4bd8476c3b", "generation_result": [{"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\t", "CodeBleu_score": 11.441865677098976}, {"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\t\\tlet x = match geometry.anchor.x {\n\\t\\tAnchor::Start => screen_rect.x(),\n\\t\\tAnchor::Center => screen_rect.x() + (screen_rect.width() / 2) - (geometry.size.width / 2),\n\\t\\tAnchor::End => screen_rect.x() + screen_rect.width() - geometry.size.width,\n\\t};\n\\tlet y = match geometry.anchor.y {\n\\t\\tAnchor::Start => screen_rect.y(),\n\\t\\tAnchor::Center => screen_rect.y() + (screen_rect.height() / 2) - (geometry.size.height / 2),\n\\t\\tAnchor::End => screen_rect.y() + screen_rect.height() - geometry.size.height,\n\\t};\n\\tlet x = x + geometry.offset.x;\n\\tlet y = y + geometry.offset.y;\n\\tgdk::Rectangle::new(x, y, geometry.size.width, geometry.size.height)\n}", "CodeBleu_score": 50.81539777564627}, {"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\t\tlet (offset_x, offset_y) = match geometry.offset {\n\t\tCoords::Pixels(x, y) => (x, y),\n\t\tCoords::Percent(x, y) => (x * screen_rect.width(), y * screen_rect.height()),\n\t};\n\tlet (size_x, size_y) = match geometry.size {\n\t\tCoords::Pixels(x, y) => (x, y),\n\t\tCoords::Percent(x, y) => (x * screen_rect.width(), y * screen_rect.height()),\n\t};\n\tlet x = match geometry.anchor.0 {\n\t\tAnchor::Start => screen_rect.x() + offset_x,\n\t\tAnchor::Center => screen_rect.x() + offset_x + (screen_rect.width() - size_x) / 2,\n\t\tAnchor::End => screen_rect.x() + offset_x + screen_rect.width() - size_x,\n\t};\n\tlet y = match geometry.anchor.1 {\n\t\tAnchor::Start => screen_rect.y() + offset_y,\n\t\tAnchor::Center => screen_rect.y() + offset_y + (screen_rect.height() - size_y) / 2,\n\t\tAnchor::End => screen_rect.y() + offset_y + screen_rect.height() - size_y,\n\t};\n\tgdk::Rectangle::new(x, y, size_x, size_y)\n}", "CodeBleu_score": 59.185020462938766}]}
{"instance_id": "588081b260d0", "generation_result": [{"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\t", "CodeBleu_score": 12.877215628915417}, {"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\t", "CodeBleu_score": 12.877215628915417}, {"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\t", "CodeBleu_score": 12.877215628915417}]}
{"instance_id": "bbe996b92d6e", "generation_result": [{"code": "pub fn print_error(err: anyhow::Error){\n\t\tlet mut err = err.context(\"Error while processing the file.\");\n\tif let Some(diag) = err.downcast_ref::<DiagError>() {\n\t\tif let Some(diag) = diag.to_diagnostic() {\n\t\t\tif let Ok(msg) = term::render_diagnostics(&diag) {\n\t\t\t\teprintln!(\"{}\", msg);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\teprintln!(\"Error: {}\", err);\n}", "CodeBleu_score": 37.01899086050765}, {"code": "pub fn print_error(err: anyhow::Error){\n\t\tif let Ok(diag) = err.downcast::<DiagError>() {\n\t\tif let Ok(diag_msg) = diag.to_diagnostic().to_string() {\n\t\t\teprintln!(\"error: {}\", diag_msg);\n\t\t} else {\n\t\t\teprintln!(\"error: Couldn't stringify error message\");\n\t\t\tlog::error!(\"Couldn't stringify error message: {}\", err);\n\t\t}\n\t} else {\n\t\teprintln!(\"error: {}\", err);\n\t\tlog::error!(\"Error: {}\", err);\n\t}\n}", "CodeBleu_score": 30.686694450638026}, {"code": "pub fn print_error(err: anyhow::Error){\n\t\tif let Err(err) = err.downcast::<DiagError>() {\n\t\tif let Ok(diagnostic) = err.to_diagnostic() {\n\t\t\tif let Ok(message) = diagnostic.message() {\n\t\t\t\tif let Ok(message) = message.to_string() {\n\t\t\t\t\teprintln!(\"error: {}\", message);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tlog::error!(\"error: {}\", err);\n}", "CodeBleu_score": 36.637673785565916}]}
{"instance_id": "d5e9c17aaa4d", "generation_result": [{"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\t", "CodeBleu_score": 12.666546576762801}, {"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\t", "CodeBleu_score": 12.666546576762801}, {"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\t\\t// Create a listener bound to the socket path.\n\\tlet listener = tokio::net::UnixListener::bind(socket_path).context(\\\"Failed to bind socket\\\")?;\n\\t// Log the initialization.\n\\tlog::info!(\\\"Started server on {}\\\", socket_path.as_ref().display());\n\\t// Enter a loop to accept incoming connections.\n\\tloop {\n\\t\\t// Accept an incoming connection.\n\\t\\tlet (mut stream, _) = listener.accept().await?;\n\\t\\t// Clone the event sender.\n\\t\\tlet evt_send = evt_send.clone();\n\\t\\t// Spawn a new task to handle the connection asynchronously.\n\\t\\ttokio::spawn(async move {\n\\t\\t\\t// Log any errors that occur while handling the connection.\n\\t\\t\\tif let Err(err) = handle_connection(&evt_send, &mut stream).await {\n\\t\\t\\t\\tlog::error!(\\\"Error handling connection: {}\\\", err);\n\\t\\t\\t}\n\\t\\t});\n\\t}\n}", "CodeBleu_score": 53.8329407701976}]}
{"instance_id": "4af744d13f02", "generation_result": [{"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\t", "CodeBleu_score": 11.710432998417224}, {"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\t/// The async function handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()> manages incoming IPC connections.\nIt splits the stream into read and write components.\nIt reads an action from the stream and logs the received command.\nIt converts the action into a daemon command and sends it through the provided event sender.\nIf a response is expected, it waits for the response with a timeout of 100 milliseconds.\nIf a response is received in time, it serializes and writes the response back to the stream.\nFinally, it shuts down the write stream and returns a result.\n    log::info!(\\\"New IPC connection\\\");\n    let (mut read_stream, mut write_stream) = stream.split();\n    let mut buf = [0; 1024];\n    let mut read_stream = &mut read_stream;\n    let mut write_stream = &mut write_stream;\n    loop {\n        read_stream.read_exact(&mut buf).await?;\n        let action = serde_json::from_slice::<app::IpcAction>(&buf)?;\n        log::info!(\\\"Received action: {}\\\", action);\n        let command = app::DaemonCommand::from(action);\n        evt_send.send(command).context(\\\"failed to send IPC action to daemon\\\")?;\n        match action {\n            app::IpcAction::Shutdown => {\n                log::info!(\\\"Shutting down\\\");\n                break;\n            },\n            _ => (),\n        };\n        if let Some(response) = action.response {\n            log::info!(\\\"Waiting for response\\\");\n            match tokio::time::timeout(Duration::from_millis(100), read_stream.read_exact(&mut buf)).await {\n                Ok(_) => {\n                    let response = serde_json::to_vec(&response)?;\n                    write_stream.write_all(&response).await?;\n                    write_stream.shutdown().await?;\n                    log::info!(\\\"Response sent\\\");\n                },\n                Err(e) => {\n                    log::error!(\\\"Response timed out: {:?}\\\", e);\n                    break;\n                },\n            };\n        };\n    };\n    Ok(())\n}", "CodeBleu_score": 50.44420790833648}, {"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\t", "CodeBleu_score": 11.710432998417224}]}
{"instance_id": "8475be269e09", "generation_result": [{"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\t\n    let mut size_header = [0; 4];\n    stream_read.read_exact(&mut size_header).await.context(\\\"failed to read message size header\\\")?;\n\n    let message_size = u32::from_be_bytes(size_header);\n    let mut message_buffer = vec![0; message_size as usize];\n    stream_read.read_exact(&mut message_buffer).await.context(\\\"failed to read message\\\")?;\n\n    let action: opts::ActionWithServer = bincode::deserialize(&message_buffer).context(\\\"failed to deserialize message\\\")?;\n\n    Ok(action)\n}", "CodeBleu_score": 56.200757511145525}, {"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\t\\tlet mut size_buf = [0; 4];\n\\tstream_read.read_exact(&mut size_buf).await?;\n\\tlet size = u32::from_be_bytes(size_buf);\n\n\\tlet mut buf = vec![0; size as usize];\n\\tlet mut pos = 0;\n\\twhile pos < size as usize {\n\\t\\tlet count = stream_read.read(&mut buf[pos..]).await?;\n\\t\\tif count == 0 {\n\\t\\t\\treturn Err(anyhow::anyhow!(\\\"Failed to read full message from stream\\\"))\n\\t\\t}\n\\t\\tpos += count;\n\\t}\n\\tlet action: opts::ActionWithServer = bincode::deserialize(&buf)?;\n\\tOk(action)\n}", "CodeBleu_score": 48.323843964422956}, {"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\t\n    let mut buf = [0u8; 4];\n    stream_read.read_exact(&mut buf).await.context(\\\"reading message size\\\")?;\n    let msg_size = u32::from_be_bytes(buf);\n    let mut buf = vec![0u8; msg_size as usize];\n    stream_read.read_exact(&mut buf).await.context(\\\"reading message\\\")?;\n    let action: opts::ActionWithServer = bincode::deserialize(&buf).context(\\\"deserializing message\\\")?;\n    Ok(action)\n}", "CodeBleu_score": 47.190347778041065}]}
{"instance_id": "5f7bde448666", "generation_result": [{"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\t\tlet dbus = zbus::fdo::DBusProxy::new(con).await?;\n\n\t// get the current owner of the service\n\tlet owner = dbus.get_name_owner(service).await?;\n\tif owner.is_none() {\n\t\treturn Ok(());\n\t}\n\tlet owner = owner.unwrap();\n\n\t// listen for changes in the ownership of the service\n\tlet mut stream = dbus.name_owner_changed().await?;\n\twhile let Some(msg) = stream.next().await {\n\t\tlet msg = msg?;\n\t\tlet old_owner = msg.args()[0].as_str()?;\n\t\tlet new_owner = msg.args()[1].as_str()?;\n\t\tif new_owner == \"\" && old_owner == owner {\n\t\t\treturn Ok(());\n\t\t}\n\t}\n\tOk(())\n}", "CodeBleu_score": 62.36142315534667}, {"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\t\tlet dbus = zbus::fdo::DBusProxy::new(con).await?;\n\n\t// Listen for changes in the ownership of the service\n\tlet mut stream = dbus.watch_name(service.clone(), std::time::Duration::from_millis(100)).await?;\n\twhile let Some(msg) = stream.next().await {\n\t\tlet msg = msg?;\n\t\tif let Ok(owner) = msg.body::<&str>() {\n\t\t\tif owner == \"\" {\n\t\t\t\t// Service disappeared\n\t\t\t\treturn Ok(());\n\t\t\t}\n\t\t}\n\t}\n\n\t// Service still exists\n\tErr(zbus::fdo::Error::TimedOut(format!(\n\t\t\"Failed to wait for service {} to exit\",\n\t\tservice\n\t)))\n}", "CodeBleu_score": 59.83858655963687}, {"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\t\tlet dbus = zbus::fdo::DBusProxy::new(con).await?;\n\tlet mut signals = dbus.signal_stream(service, \"NameOwnerChanged\").await?;\n\twhile let Some(signal) = signals.next().await {\n\t\tlet (_, old, new) = signal?;\n\t\tif new.is_none() {\n\t\t\treturn Ok(());\n\t\t}\n\t}\n\t// we never received a NameOwnerChanged signal, so the service is still owned\n\tErr(zbus::fdo::Error::ServiceUnknown)\n}", "CodeBleu_score": 58.31007375717533}]}
{"instance_id": "d5149dd17f39", "generation_result": [{"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\t\tmatch format {\n\t\t\"svg\" => Ok(DocExportFormat::SVG),\n\t\t\"xopp\" => Ok(DocExportFormat::XOPP),\n\t\t\"pdf\" => Ok(DocExportFormat::PDF),\n\t\t_ => Err(anyhow::anyhow!(\n\t\t\t\"Unsupported output format: \\\\\"{}\\\\\". Supported formats are \\\\\"svg\\\\\" and \\\\\"xopp\\\\\".\",\n\t\t\tformat\n\t\t)),\n\t}\n}", "CodeBleu_score": 57.49532024192248}, {"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\t\tmatch format.to_lowercase().as_str() {\n\t\t\"svg\" => Ok(DocExportFormat::SVG),\n\t\t\"xopp\" => Ok(DocExportFormat::XOPP),\n\t\t\"pdf\" => Ok(DocExportFormat::PDF),\n\t\t_ => Err(anyhow::anyhow!(\n\t\t\t\"The output format \\\\\"{format}\\\\\" is not supported. Supported formats are: svg, xopp, pdf.\"\n\t\t)),\n\t}\n}", "CodeBleu_score": 58.3019147629554}, {"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\t\tmatch format {\n\t\t\"svg\" => Ok(DocExportFormat::SVG),\n\t\t\"xopp\" => Ok(DocExportFormat::XOPP),\n\t\t\"pdf\" => Ok(DocExportFormat::PDF),\n\t\t_ => Err(anyhow::anyhow!(\n\t\t\t\"The output format \\\\\"{format}\\\\\" is not supported. Supported formats are: svg, xopp, pdf.\"\n\t\t)),\n\t}\n}", "CodeBleu_score": 62.91414068968113}]}
{"instance_id": "47c741fa1cf0", "generation_result": [{"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\t\tpath_is_file(path)?;\n\tlet extension = path.extension().unwrap().to_str().unwrap();\n\tif extension != expected_ext {\n\t\treturn Err(anyhow::anyhow!(\n\t\t\t\"Expected file with extension \\\\\"{}.{}\\\\\", found \\\\\"{}.{}\\\\\", in \\\\\"{}\\\\\".\",\n\t\t\texpected_ext,\n\t\t\texpected_ext,\n\t\t\textension,\n\t\t\textension,\n\t\t\tpath.display()\n\t\t));\n\t}\n\tOk(())\n}", "CodeBleu_score": 35.84494449841762}, {"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\t\tpath_is_file(path)?;\n\tlet actual_ext = path.extension().and_then(|s| s.to_str());\n\tif actual_ext != Some(expected_ext) {\n\t\treturn Err(anyhow::anyhow!(\n\t\t\t\"Expected file with extension \\\\\"{}.{}\\\\\", found \\\\\"{}.{}\\\\\", or no extension\",\n\t\t\texpected_ext,\n\t\t\texpected_ext,\n\t\t\tactual_ext.unwrap_or(\"\"),\n\t\t\tactual_ext.unwrap_or(\"\"),\n\t\t));\n\t}\n\tOk(())\n}", "CodeBleu_score": 27.373159075481272}, {"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\t\tpath_is_file(path)?;\n\tlet ext = path.extension();\n\tif ext.is_none() {\n\t\treturn Err(anyhow::anyhow!(\n\t\t\t\"Expected file with extension \\\\\"{}\\\\\" but found file without extension\",\n\t\t\texpected_ext\n\t\t));\n\t}\n\tlet ext = ext.unwrap().to_str().unwrap();\n\tif ext != expected_ext {\n\t\treturn Err(anyhow::anyhow!(\n\t\t\t\"Expected file with extension \\\\\"{}\\\\\" but found file with extension \\\\\"{}\\\\\".\",\n\t\t\texpected_ext,\n\t\t\text\n\t\t));\n\t}\n\tOk(())\n}", "CodeBleu_score": 51.25663045522262}]}
{"instance_id": "cde4fa8386cb", "generation_result": [{"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\t#if (FMT_VERSION >= 80000)\n  auto label = fmt::format(config[\"format\"].asString(), fmt::arg(\"id\", id));\n#else\n  auto label = fmt::format(config[\"format\"].asString(), fmt::arg(\"id\", id));\n#endif\n  const auto interval = config.get(\"interval\", 1);\n  const auto format = config[\"format\"];\n  const auto id_ = id;\n  const auto label_ = label;\n  const auto format_ = format;\n  const auto interval_ = interval;\n  thread_ = [this, id_, label_, format_, interval_] {\n    while (true) {\n      auto usage = CpuUsage::getCpuUsage();\n      auto usage_percent = usage.usage_percent();\n      auto label_new = fmt::format(format_.asString(), fmt::arg(\"id\", id_), fmt::arg(\"usage\", usage_percent));\n      if (label_ != label_new) {\n        label_ = label_new;\n        this->update();\n      }\n      std::this_thread::sleep_for(std::chrono::seconds(interval_));\n    }\n  };\n}", "CodeBleu_score": 43.57996015057481}, {"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\t\tlabel_.set_name(name_);\n\tlabel_.set_id(id);\n\tlabel_.set_interval(config_[\"interval\"]);\n\tlabel_.set_format(config_[\"format\"]);\n\tlabel_.set_tooltip(config_[\"tooltip\"]);\n\tlabel_.set_max_length(config_[\"max-length\"]);\n\n\tauto update_label = [this] {\n\t\ttry {\n\t\t\tauto cpu_usage = get_cpu_usage();\n\t\t\tauto cpu_usage_str = std::to_string(cpu_usage);\n\t\t\tlabel_.set_text(fmt::format(label_.get_format(), cpu_usage_str));\n\t\t} catch (const std::exception& e) {\n\t\t\tlabel_.set_text(e.what());\n\t\t}\n\t};\n\n\tthread_ = [this, update_label] {\n\t\twhile (true) {\n\t\t\tupdate_label();\n\t\t\tstd::this_thread::sleep_for(std::chrono::milliseconds(label_.get_interval()));\n\t\t}\n\t};\n}", "CodeBleu_score": 47.22710697839824}, {"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\t\tlabel_.set_name(name_);\n\tlabel_.set_id(id);\n\tlabel_.set_interval(config[\"interval\"]);\n\tlabel_.set_format(config[\"format\"]);\n\tlabel_.set_tooltip(config[\"tooltip\"]);\n\n\tauto update = [this] {\n\t\tauto cpu_usage = get_cpu_usage();\n\t\tauto data = fmt::dynamic_format_arg_store<fmt::format_context>();\n\t\tdata.push_back(fmt::arg(\"usage\", cpu_usage));\n\t\tlabel_.set_text(fmt::vformat(label_.get_format(), data));\n\t};\n\n\tthread_ = [this, update] {\n\t\twhile (true) {\n\t\t\tupdate();\n\t\t\tstd::this_thread::sleep_for(std::chrono::seconds(label_.get_interval()));\n\t\t}\n\t};\n}", "CodeBleu_score": 47.8189430431415}]}
{"instance_id": "da58b589c5e8", "generation_result": [{"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\t\n  Tags *tags = static_cast<Tags *>(data);\n\n  if (strcmp(interface, zdwl_ipc_output_v2_interface.name) == 0) {\n    tags->status_manager_ = static_cast<zdwl_ipc_output_v2 *>(\n        wl_registry_bind(registry, name, &zdwl_ipc_output_v2_interface, version));\n  } else if (strcmp(interface, wl_seat_interface.name) == 0) {\n    tags->seat_ = static_cast<wl_seat *>(wl_registry_bind(registry, name, &wl_seat_interface, 1));\n  }\n}", "CodeBleu_score": 55.0619657486234}, {"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\t\n  if (strcmp(interface, zdwl_ipc_output_v2_interface.name) == 0) {\n    zdwl_ipc_output_v2 *output_v2 =\n        (zdwl_ipc_output_v2 *)wl_registry_bind(registry, name, &zdwl_ipc_output_v2_interface, version);\n    static_cast<Tags *>(data)->update_output_status_manager(output_v2);\n  }\n  if (strcmp(interface, wl_seat_interface.name) == 0) {\n    wl_seat *seat = (wl_seat *)wl_registry_bind(registry, name, &wl_seat_interface, 1);\n    static_cast<Tags *>(data)->update_seat(seat);\n  }\n}", "CodeBleu_score": 57.13891074169379}, {"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\t\tTags *tags = static_cast<Tags *>(data);\n\tif (strcmp(interface, zdwl_ipc_output_v2_interface.name) == 0) {\n\t\tzdwl_ipc_output_v2 *zdwl_output_v2 = static_cast<zdwl_ipc_output_v2 *>(wl_registry_bind(registry, name, &zdwl_ipc_output_v2_interface, 1));\n\t\ttags->output_status_manager_ = zdwl_output_v2;\n\t\tzdwl_ipc_output_v2_add_listener(zdwl_output_v2, &output_status_listener_impl, tags);\n\t} else if (strcmp(interface, wl_seat_interface.name) == 0) {\n\t\ttags->seat_ = static_cast<wl_seat *>(wl_registry_bind(registry, name, &wl_seat_interface, 1));\n\t}\n}", "CodeBleu_score": 54.222577509325156}]}
{"instance_id": "22230d419d69", "generation_result": [{"code": "void IPC::parseIPC(const std::string& ev){\n\t\tspdlog::debug(\\\"IPC::parseIPC\\\");\n\n\tstd::unique_lock<std::mutex> lock(callbackMutex_);\n\n\tsize_t sep = ev.find_first_of('>');\n\n\tif (sep == std::string::npos) {\n\t\tspdlog::warn(\\\"IPC::parseIPC: Could not find separator\\\");\n\t\treturn;\n}\n\nstd::string requestType = ev.substr(0, sep);\n\nfor (auto& callback : callbacks_) {\n  if (requestType == callback.first) {\n    callback.second->onEvent(ev);\n    break;\n  }\n}\n}", "CodeBleu_score": 53.693736741344914}, {"code": "void IPC::parseIPC(const std::string& ev){\n\t\tstd::unique_lock<std::mutex> lock(callbackMutex_);\n\tauto sepPos = ev.find('>');\n\tif (sepPos == std::string::npos) {\n\t\tspdlog::warn(\\\"IPC event string does not contain a separator\\\");\n\t\treturn;\n\n\n\t}\n\tauto requestType = ev.substr(0, sepPos);\n\n\n\tspdlog::debug(\\\"IPC request type: {}\\\", requestType);\n\n\n\tfor (auto& callback : callbacks_) {\n\n\n\t\tif (callback.requestType == requestType) {\n\n\n\t\t\tspdlog::debug(\\\"Invoking callback for request type: {}\\\", requestType);\n\n\n\t\t\ttry {\n\n\n\t\t\t\tcallback.handler->onEvent(ev);\n\n\n\t\t\t} catch (std::exception& e) {\n\n\n\t\t\t\tspdlog::warn(\\\"Failed to invoke callback for request type: {}, reason: {}\\\", requestType, e.what());\n\n\n\t\t\t} catch (...) {\n\n\n\t\t\t\tthrow;\n\n\n\t\t\t}\n\n\n\t\t}\n\n\n\t}\n\n\n}", "CodeBleu_score": 49.04110281907524}, {"code": "void IPC::parseIPC(const std::string& ev){\n\t\n  std::unique_lock<std::mutex> lock(callbackMutex_);\n  for (auto& callback : callbacks_) {\n    if (callback.first == ev.substr(0, ev.find_first_of('>'))) {\n      callback.second->onEvent(ev);\n    }\n  }\n}", "CodeBleu_score": 51.82743542440911}]}
{"instance_id": "5d195fbd6417", "generation_result": [{"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\t\tif (ev_handler == nullptr) {\n\t\treturn;\n\t}\n\n\tstd::unique_lock lock(callbackMutex_);\n\n\tfor (auto it = callbacks_.begin(); it != callbacks_.end(); it++) {\n\t\tif (it->second == ev_handler) {\n\t\t\tcallbacks_.erase(it);\n\t\t\tbreak;\n\t\t}\n\t}\n}", "CodeBleu_score": 64.18952716110677}, {"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\t\tif (ev_handler == nullptr) {\n\t\treturn;\n\t}\n\n\tstd::unique_lock lock(callbackMutex_);\n\tfor (auto it = callbacks_.begin(); it != callbacks_.end();) {\n\t\tif (it->second == ev_handler) {\n\t\t\tit = callbacks_.erase(it);\n\t\t} else {\n\t\t\t++it;\n\t\t}\n\t}\n}", "CodeBleu_score": 71.15586467824531}, {"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\t\tif (ev_handler == nullptr) {\n\t\treturn;\n\t}\n\n\tstd::unique_lock lock(callbackMutex_);\n\tfor (auto it = callbacks_.begin(); it != callbacks_.end();) {\n\t\tif (it->second == ev_handler) {\n\t\t\tit = callbacks_.erase(it);\n\t\t} else {\n\t\t\t++it;\n\t\t}\n\t}\n}", "CodeBleu_score": 71.15586467824531}]}
{"instance_id": "2bb5ef8b3cf3", "generation_result": [{"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\t\tif (config[\"always-on\"].isBool()) {\n\t\talways_on_ = config[\"always-on\"].asBool();\n\t}\n\tif (config[\"default-submap\"].isString()) {\n\t\tdefault_submap_ = config[\"default-submap\"].asString();\n\t}\n}", "CodeBleu_score": 36.04936175702126}, {"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\t\tif (config[\"always-on\"].isBool()) {\n\t\talways_on_ = config[\"always-on\"].asBool();\n\t}\n\tif (config[\"default-submap\"].isString()) {\n\t\tdefault_submap_ = config[\"default-submap\"].asString();\n\t}\n}", "CodeBleu_score": 36.04936175702126}, {"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\tauto default_submap = config[\"default-submap\"];\nif (default_submap) {\ndefault_submap_ = sanitize_string(default_submap.asString());\n}\n\nalways_on_ = config[\"always-on\"].asBool();\n\nif (!default_submap_) {\nspdlog::error(\"[{}]: No default submap specified\", name_);\n}\n}", "CodeBleu_score": 55.96643246297447}]}
{"instance_id": "c60aa24ddc6f", "generation_result": [{"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\t\tif (std::holds_alternative<Repr>(m_window)) {\n\t\treturn std::get<Repr>(m_window);\n\t}\n\tif (std::holds_alternative<ClassAndTitle>(m_window)) {\n\t\tauto [window_class, window_title] = std::get<ClassAndTitle>(m_window);\n\t\treturn workspace_manager.rewriteWindow(window_class, window_title);\n\t}\n\tspdlog::error(\"WorkspaceWindow::repr: Unreachable\");\n\tthrow std::runtime_error(\"WorkspaceWindow::repr: Unreachable\");\n}", "CodeBleu_score": 94.65526381049239}, {"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\tif (std::holds_alternative<Repr>(m_window)) {\nreturn std::get<Repr>(m_window);\n}\nif (std::holds_alternative<ClassAndTitle>(m_window)) {\nauto [window_class, window_title] = std::get<ClassAndTitle>(m_window);\nreturn workspace_manager.rewriteWindow(window_class, window_title);\n}\nspdlog::error(\"WorkspaceWindow::repr: Unreachable\");\nthrow std::runtime_error(\"WorkspaceWindow::repr: Unreachable\");\n}", "CodeBleu_score": 94.63304852011132}, {"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\t\tif (std::holds_alternative<Repr>(m_window)) {\n\t\treturn std::get<Repr>(m_window);\n\t}\n\tif (std::holds_alternative<ClassAndTitle>(m_window)) {\n\t\tauto [window_class, window_title] = std::get<ClassAndTitle>(m_window);\n\t\treturn workspace_manager.rewriteWindow(window_class, window_title);\n\t}\n\t// Unreachable\n\tspdlog::error(\"WorkspaceWindow::repr: Unreachable\");\n\tthrow std::runtime_error(\"WorkspaceWindow::repr: Unreachable\");\n}", "CodeBleu_score": 94.65526381049239}]}
{"instance_id": "b9160180960d", "generation_result": [{"code": "void Workspaces::createWorkspacesToCreate(){\n\t\tfor (auto &workspace_data : m_workspacesToCreate) {\n\t\tJson::Value clients_data = Json::arrayValue;\n\t\tfor (auto &window : m_windows) {\n\t\t\tif (window->workspace() == workspace_data[\\\"name\\\"].asString()) {\n\t\t\t\tclients_data.append(window->getJson());\n\t\t\t}\n\t\t}\n\t\tcreateWorkspace(workspace_data, clients_data);\n\t}\n\tm_workspacesToCreate.clear();\n}", "CodeBleu_score": 50.09803873118147}, {"code": "void Workspaces::createWorkspacesToCreate(){\n\t\tspdlog::debug(\\\"Creating workspaces to create\\\");\n\tfor (auto const &workspace_data : m_workspacesToCreate) {\n\t\tauto clients_data = getWorkspaceClientsData(workspace_data[\\\"name\\\"].asString());\n\t\tcreateWorkspace(workspace_data, clients_data);\n\t}\n\tm_workspacesToCreate.clear();\n\tupdateWindowCount();\n\tsortWorkspaces();\n}", "CodeBleu_score": 51.29809281479108}, {"code": "void Workspaces::createWorkspacesToCreate(){\n\t\n#ifdef DEBUG\n  spdlog::debug(\\\"Creating workspaces\\\");\n#endif\n\n  for (const auto &workspace_data : m_workspacesToCreate) {\n    auto workspaceName = workspace_data[\\\"name\\\"].asString();\n    auto clients_data = Json::Value(Json::arrayValue);\n\n    for (const auto &client_data : m_clientsData) {\n      if (client_data[\\\"workspace\\\"].asString() == workspaceName) {\n        clients_data.append(client_data);\n      }\n    }\n    createWorkspace(workspace_data, clients_data);\n  }\n\n  // update window count\n  updateWindowCount();\n\n  // sort workspaces\n  sortWorkspaces();\n}", "CodeBleu_score": 49.81234797374679}]}
{"instance_id": "07260cd3fead", "generation_result": [{"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\tauto* mpris = static_cast<Mpris*>(data);\nif (!mpris) return;\n\nspdlog::debug(\\\"mpris: name-vanished callback: {}\\\", player_name->name);\n\nif (std::string(player_name->name) != mpris->player_) {\nreturn;\n}\n\nmpris->player = nullptr;\nmpris->hideEventBox();\nmpris->dp.emit();\n}", "CodeBleu_score": 72.09226311994163}, {"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\tauto* mpris = static_cast<Mpris*>(data);\nif (!mpris) return;\n\nspdlog::debug(\\\"mpris: name-vanished callback: {}\\\", player_name->name);\n\nif (std::string(player_name->name) != mpris->player_) {\nreturn;\n}\n\nmpris->player = nullptr;\nmpris->hide();\nmpris->dp.emit();\n}", "CodeBleu_score": 71.80485949491315}, {"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\tauto* mpris = static_cast<Mpris*>(data);\nif (!mpris) return;\n\nspdlog::debug(\\\"mpris: name-vanished callback: {}\\\", player_name->name);\n\nif (std::string(player_name->name) != mpris->player_) {\nreturn;\n}\n\nmpris->player = nullptr;\nmpris->hide();\nmpris->dp.emit();\n}", "CodeBleu_score": 71.80485949491315}]}
{"instance_id": "94a47eddc505", "generation_result": [{"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\tauto* mpris = static_cast<Mpris*>(data);\nif (!mpris) return;\n\nspdlog::debug(\\\"mpris: player-pause callback\\\");\n// update widget\nmpris->dp.emit();\n}", "CodeBleu_score": 82.49277458748372}, {"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\tauto* mpris = static_cast<Mpris*>(data);\nif (!mpris) return;\n\nspdlog::debug(\\\"mpris: player-pause callback\\\");\n// update widget\nmpris->dp.emit();\n}", "CodeBleu_score": 82.49277458748372}, {"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\tauto* mpris = static_cast<Mpris*>(data);\nif (!mpris) return;\n\nspdlog::debug(\\\"mpris: player-pause callback\\\");\n// update widget\nmpris->dp.emit();\n}", "CodeBleu_score": 82.49277458748372}]}
{"instance_id": "716955fc6ff5", "generation_result": [{"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\t\nif (!res.success) {\nthrow std::runtime_error(res.payload);\n}\n\nauto payload = Json::parse(res.payload);\nif (auto config = payload[\\\"config\\\"]; config.isObject()) {\nonConfigUpdate(parseConfig(config));\n}\n\n}", "CodeBleu_score": 38.086221296015566}, {"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\t", "CodeBleu_score": 4.07184125178567}, {"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\t\tif (!res.success) {\n\t\tthrow std::runtime_error(res.payload[\"error\"].asString());\n\t}\n\tonConfigUpdate(parseConfig(res.payload));\n}", "CodeBleu_score": 19.036106492211047}]}
{"instance_id": "e8aa483d1693", "generation_result": [{"code": "auto CFFI::doAction(const std::string& name) -> void{\n\t\tassert(cffi_instance_ != nullptr);\n\tif (!name.empty()) {\n\t\thooks_.doAction(cffi_instance_, name.c_str());\n\t}\n}", "CodeBleu_score": 96.4000436103047}, {"code": "auto CFFI::doAction(const std::string& name) -> void{\n\t\tassert(cffi_instance_ != nullptr);\n\tif (!name.empty()) {\n\t\thooks_.doAction(cffi_instance_, name.c_str());\n\t}\n}", "CodeBleu_score": 96.4000436103047}, {"code": "auto CFFI::doAction(const std::string& name) -> void{\n\t#ifndef NDEBUG\n  assert(cffi_instance_ != nullptr);\n#endif\n  if (!name.empty()) {\n    hooks_.doAction(cffi_instance_, name.c_str());\n  }\n}", "CodeBleu_score": 86.31541888219499}]}
