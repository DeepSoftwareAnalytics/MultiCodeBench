{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    # Get attachment IDs from HTTP request arguments\n    attachment_ids = [int(attachment_id) for attachment_id in args.get('attachment_ids', '').split(',')]\n    # Get attachment records\n    attachment_records = request.env['ir.attachment'].sudo().browse(attachment_ids)\n    # Verify read access rights and rules for the attachments\n    attachment_records.check_access_rights('read')\n    attachment_records.check_access_rule('read')\n    # Build zip file from the attachments' content\n    zip_file = request.env['ir.attachment']._build_zip_file(attachment_records)\n    # Prepare HTTP headers for the zip file\n    headers = _get_zip_headers(zip_file, 'documents.zip')\n    # Return the zip file as an HTTP response\n    return request.make_response(zip_file, headers)\n", "CodeBleu_score": 38.72579596737341}, {"code": "def export_zip_documents(self, **args)\n\t\n    context = dict(request.env.context)\n    context.update(args)\n    attachment_ids = context.get('attachment_ids')\n    if not attachment_ids:\n        return request.not_found()\n    attachments = request.env['ir.attachment'].sudo().browse(attachment_ids)\n    if not attachments.exists():\n        return request.not_found()\n    if not attachments.check_access_rights('read', raise_exception=False):\n        return request.forbidden()\n    if not attachments.check_access_rule('read', raise_exception=False):\n        return request.forbidden()\n    content = attachments.with_context(context)._export_as_zip()\n    headers = _get_zip_headers(content, 'documents.zip')\n    return request.make_response(content, headers=headers)\n", "CodeBleu_score": 36.14778537552957}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = args.get('attachment_ids')\n    if not attachment_ids:\n        return request.make_response('Please specify attachment IDs', 400)\n    attachment_ids = attachment_ids.split(',')\n    attachments = request.env['ir.attachment'].sudo().search([('id', 'in', attachment_ids)])\n    if not attachments:\n        return request.make_response('No such attachment IDs', 400)\n    for attachment in attachments:\n        if not attachment.exists():\n            return request.make_response('Attachment %s does not exist' % attachment.id, 400)\n        if not attachment.res_model or attachment.res_model != 'account.move':\n            return request.make_response('Attachment %s is not an account move' % attachment.id, 400)\n        if not attachment.res_id:\n            return request.make_response('Attachment %s does not belong to any record' % attachment.id, 400)\n        if not attachment.can_access_from_current_user():\n            return request.make_response('Access denied for attachment %s' % attachment.id, 403)\n        if not attachment.res_model_id.model == 'account.move':\n            return request.make_response('Attachment %s is not an account move' % attachment.id, 400)\n    content = attachments.read(['datas'])\n    filename = 'account_moves.zip'\n    return request.make_response(content, headers=_get_zip_headers(content, filename), filename=filename)\n", "CodeBleu_score": 35.008701005609076}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(PortalAccount, self)._prepare_home_portal_values(counters)\n    try:\n        self.env['account.move'].check_access_rights('read')\n        self.env['account.move'].check_access_rule('read')\n    except (AccessError, MissingError):\n        pass\n    else:\n        values['invoice_count'] = self.env['account.move'].search_count([('partner_id', '=', self.env.user.partner_id.id), ('state', 'in', ['draft', 'posted', 'cancel'])])\n        values['bill_count'] = self.env['account.move'].search_count([('partner_id', '=', self.env.user.partner_id.id), ('move_type', '=', 'out_invoice'), ('state', 'in', ['draft', 'posted', 'cancel'])])\n    return values\n", "CodeBleu_score": 41.500935444315765}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(PortalAccount, self)._prepare_home_portal_values(counters)\n    try:\n        values['invoice_count'] = request.env['account.move'].sudo().search_count([('partner_id', 'in', request.env.user.partner_id.child_ids.ids), ('state', 'in', ['open', 'paid'])])\n        values['bill_count'] = request.env['account.move'].sudo().search_count([('partner_id', 'in', request.env.user.partner_id.child_ids.ids), ('move_type', '=', 'out_refund')])\n    except AccessError:\n        values['invoice_count'] = 0\n        values['bill_count'] = 0\n    return values\n\n", "CodeBleu_score": 39.3483513548795}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(PortalAccount, self)._prepare_home_portal_values(counters)\n    try:\n        if request.env['account.move'].check_access_rights('read', raise_exception=True):\n            values['invoice_count'] = request.env['account.move'].sudo().search_count([('type', '=', 'out_invoice'), ('partner_id', '=', request.env.user.partner_id.id)])\n            values['bill_count'] = request.env['account.move'].sudo().search_count([('type', '=', 'out_refund'), ('partner_id', '=', request.env.user.partner_id.id)])\n    except AccessError:\n        pass\n    return values\n", "CodeBleu_score": 39.09646875804833}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_portal_layout_values()\n    domain = self._get_invoices_domain()\n    searchbar_sortings = self._get_account_searchbar_sortings()\n    searchbar_filters = self._get_account_searchbar_filters()\n    # default sort by value\n    if not sortby:\n        sortby = 'date'\n    # default filter by value\n    if not filterby:\n        filterby = 'all'\n    # archive groups - Default Group By 'Date'\n    archive_groups = self._get_archive_groups('account.move', domain)\n    if date_begin and date_end:\n        domain += [('invoice_date', '>', date_begin), ('invoice_date', '<=', date_end)]\n    # archive items - Default group by 'Due Date'\n    archive_items = self._get_archive_items(domain, sortby, filterby, searchbar_sortings, searchbar_filters)\n    # pager\n    pager = portal_pager(\n        url=\"/my/invoices\",\n        url_args={'date_begin': date_begin, 'date_end': date_end, 'sortby': sortby, 'filterby': filterby},\n        total=self.env['account.move'].search_count(domain),\n        page=page,\n        step=self._items_per_page\n    )\n    # content\n    invoices = self.env['account.move'].search(domain, order=archive_items['order'], limit=self._items_per_page, offset=pager['offset'])\n    values.update({\n        'date': date_begin,\n        'invoices': invoices,\n        'page_name': 'invoice',\n        'archive_groups': archive_groups,\n        'archive_items': archive_items,\n        'default_url': '/my/invoices',\n        'pager': pager,\n        'searchbar_sortings': searchbar_sortings,\n        'searchbar_filters': searchbar_filters,\n        'sortby': sortby,\n        'filterby': filterby,\n        'searchbar_inputs': {\n            'sortby': sortby,\n            'filterby': filterby,\n            'date_begin': date_begin,\n            'date_end': date_end,\n        }\n    })\n    return request.render(\"account.portal_my_invoices\", values)\n\n", "CodeBleu_score": 41.22184943564605}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_portal_layout_values()\n    AccountMove = request.env['account.move']\n    domain = self._get_invoices_domain()\n\n    searchbar_sortings = self._get_account_searchbar_sortings()\n    searchbar_filters = self._get_account_searchbar_filters()\n\n    # default sort by value\n    if not sortby:\n        sortby = 'date'\n    order = searchbar_sortings[sortby]['order']\n\n    # default filter by value\n    if not filterby:\n        filterby = 'all'\n    domain += searchbar_filters[filterby]['domain']\n\n    # archive groups - Default group by 'invoice'\n    archive_groups = self._get_archive_groups('account.move', domain)\n    if date_begin and date_end:\n        domain += [('invoice_date', '>', date_begin), ('invoice_date', '<=', date_end)]\n    # count for pager\n    invoice_count = AccountMove.search_count(domain)\n    # make pager\n    pager = portal_pager(\n        url=\"/my/invoices\",\n        url_args={'date_begin': date_begin, 'date_end': date_end, 'sortby': sortby, 'filterby': filterby},\n        total=invoice_count,\n        page=page,\n        step=self._items_per_page\n    )\n    # search the count to display, according to the pager data\n    invoices = AccountMove.search(domain, order=order, limit=self._items_per_page, offset=pager['offset'])\n    request.session['my_invoices_history'] = invoices.ids[:100]\n\n    values.update({\n        'date': date_begin,\n        'invoices': invoices,\n        'page_name': 'invoice',\n        'pager': pager,\n        'archive_groups': archive_groups,\n        'default_url': '/my/invoices',\n        'searchbar_sortings': searchbar_sortings,\n        'searchbar_filters': searchbar_filters,\n        'sortby': sortby,\n        'filterby': filterby,\n        'default_url': '/my/invoices',\n    })\n    return request.render(\"account.portal_my_invoices\", values)\n", "CodeBleu_score": 45.2264715789989}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = {\n        'date': date_begin,\n        'date_end': date_end,\n        'filterby': filterby,\n        'invoices': [],\n        'page_name': 'invoice',\n        'sortby': sortby,\n    }\n    domain = self._get_invoices_domain(filterby)\n    if date_begin and date_end:\n        domain += [('create_date', '>', date_begin), ('create_date', '<=', date_end)]\n    # default sort by order\n    if not sortby:\n        sortby = 'date'\n    sort_order = self._get_account_searchbar_sortings()[sortby]['order']\n    invoices = request.env['account.move'].search(domain, order=sort_order, limit=self._items_per_page, offset=self._items_per_page * (page - 1))\n    values.update({\n        'invoices': invoices,\n        'page_name': 'invoice',\n        'pager': portal_pager(\n            url=\"/my/invoices\",\n            url_args={'date_begin': date_begin, 'date_end': date_end, 'sortby': sortby, 'filterby': filterby},\n            total=len(invoices),\n            page=page,\n            step=self._items_per_page,\n        ),\n        'sortby': sortby,\n        'filterby': filterby,\n        'date': date_begin,\n        'date_end': date_end,\n    })\n    return request.render(\"account.portal_my_invoices\", values)\n\n", "CodeBleu_score": 41.07077647955638}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    if access_token and invoice_id:\n        try:\n            invoice = request.env['account.move'].sudo().browse([invoice_id]).exists()\n            if invoice and invoice.exists():\n                if not invoice.check_access_rights('read', raise_exception=False):\n                    raise AccessError(_(\"You cannot view this document.\"))\n                if report_type:\n                    if report_type == 'html':\n                        return self.portal_invoice_report(invoice, report_type)\n                    if report_type == 'text':\n                        return self.portal_invoice_report(invoice, report_type)\n                    if report_type == 'pdf':\n                        return self.portal_invoice_report(invoice, report_type)\n                    if report_type == 'xlsx':\n                        return self.portal_invoice_report(invoice, report_type)\n                if download:\n                    if invoice.state != 'posted':\n                        raise MissingError(_(\"You cannot download a document that has not been posted.\"))\n                    return self.portal_invoice_download(invoice)\n                return self.portal_invoice_page(invoice)\n        except AccessError:\n            return request.redirect(\"/my\")\n        except MissingError:\n            return request.redirect(\"/my\")\n    return request.redirect(\"/my\")\n", "CodeBleu_score": 35.2285337640908}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    # check if invoice exists and access is allowed\n    invoice = request.env['account.move'].sudo().browse(invoice_id).exists()\n    if not invoice or invoice.state == 'cancel':\n        raise MissingError\n\n    # check access\n    if not invoice.check_access_rights('read', raise_exception=False):\n        raise AccessError\n\n    # get report type\n    if report_type not in ('html', 'text', 'pdf'):\n        report_type = 'html'\n\n    # get access token\n    if not access_token:\n        access_token = request.params.get('access_token')\n\n    # get invoice\n    values = self._invoice_get_page_view_values(invoice, access_token, report_type=report_type, **kw)\n\n    # download\n    if download:\n        return self._invoice_get_attachment_response(invoice, access_token, report_type)\n\n    # render\n    return request.render(\"account.portal_my_invoice_page\", values)\n\n", "CodeBleu_score": 26.39098221394658}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n\n    AccountInvoice = request.env['account.move']\n    if access_token:\n        try:\n            invoice_sudo = AccountInvoice.sudo().search([('access_token', '=', access_token)], limit=1)\n        except MissingError:\n            return request.render(\"website.404\")\n    else:\n        try:\n            invoice_sudo = AccountInvoice.sudo().browse(invoice_id)\n        except MissingError:\n            return request.render(\"website.404\")\n\n    if not invoice_sudo.exists():\n        return request.render(\"website.404\")\n\n    if not invoice_sudo.check_access_rights('read', raise_exception=False):\n        return request.render(\"website.403\")\n\n    if report_type:\n        report_type = report_type.lower()\n        if report_type not in ('html', 'pdf', 'text'):\n            report_type = None\n\n    if report_type == 'html':\n        return self._portal_invoice_report(invoice_sudo, access_token=access_token, report_type=report_type, download=download, **kw)\n    elif report_type == 'pdf':\n        return self._portal_invoice_report(invoice_sudo, access_token=access_token, report_type=report_type, download=download, **kw)\n    elif report_type == 'text':\n        return self._portal_invoice_report(invoice_sudo, access_token=access_token, report_type=report_type, download=download, **kw)\n    else:\n        return self._invoice_get_page_view_values(invoice_sudo, access_token=access_token, **kw)\n\n", "CodeBleu_score": 40.80565999498414}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    # This is a generator because data created here might be referenced by xml_id to data\n    # created later but defined in this same function.\n    company = company or self.env.user.company_id\n    if company.country_id.code != 'US':\n        return\n    for product_template in self.env['product.template'].search([('sale_ok', '=', True)]):\n        if company.account_sale_tax_id:\n            product_template.taxes_id = [(6, 0, [company.account_sale_tax_id.id])]\n        if company.account_purchase_tax_id:\n            product_template.supplier_taxes_id = [(6, 0, [company.account_purchase_tax_id.id])]\n    return\n\n", "CodeBleu_score": 30.3483555393593}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    if not company:\n        company = self.env.user.company_id\n    domain = [('company_id', '=', company.id)]\n    if company.country_id.code == 'US':\n        domain += [('sale_taxes_id', '=', company.account_sale_tax_id.id)]\n    if company.country_id.code == 'US':\n        domain += [('purchase_taxes_id', '=', company.account_purchase_tax_id.id)]\n    product_templates = self.env['product.template'].search(domain)\n    for product_template in product_templates:\n        product_template.update_taxes()\n\n", "CodeBleu_score": 33.52108879697502}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    Product = self.env['product.template']\n    if company:\n        domain = [('company_id', '=', company.id)]\n    else:\n        domain = []\n    for product in Product.search(domain):\n        if company and company.account_sale_tax_id:\n            product.taxes_id = [(6, 0, [company.account_sale_tax_id.id])]\n        if company and company.account_purchase_tax_id:\n            product.supplier_taxes_id = [(6, 0, [company.account_purchase_tax_id.id])]\n    return True\n", "CodeBleu_score": 22.463664619493976}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    ir_model_data = self.env['ir.model.data']\n    try:\n        return ir_model_data.get_object_reference(company.id, xml_id)[1]\n    except ValueError:\n        pass\n    account = self.env['account.account'].search([\n        ('company_id', '=', company.id),\n        ('user_type_id.type', '=', account_type),\n    ], limit=1)\n    if account:\n        return account.id\n    return self.env['account.account'].search([\n        ('company_id', '=', company.id),\n        ('user_type_id.type', '=', account_type),\n    ], limit=1).id\n", "CodeBleu_score": 47.80524247187359}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env['account.account'].search([\n        ('company_id', '=', company.id),\n        ('code', '=', xml_id),\n    ])\n    if not account:\n        account = self.env['account.account'].search([\n            ('company_id', '=', company.id),\n            ('user_type_id.type', '=', account_type),\n        ])\n    if not account:\n        account = self.env['account.account'].search([\n            ('company_id', '=', company.id),\n            ('user_type_id', '=', False),\n        ])\n    return account[0]\n", "CodeBleu_score": 49.9630879241976}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    # First try to find the account using the company's ID and the xml_id in the 'ir.model.data' model.\n    account = self.env['account.account'].search(\n        [('company_id', '=', company.id), ('code', '=', xml_id)], limit=1\n    )\n    if not account:\n        # If not found, try to find an account matching the account_type within the company's domain.\n        account = self.env['account.account'].search(\n            [('company_id', '=', company.id), ('user_type_id.type', '=', account_type)], limit=1\n        )\n    if not account:\n        # If still not found, return the first account within the company's domain.\n        account = self.env['account.account'].search(\n            [('company_id', '=', company.id)], limit=1\n        )\n    return account\n", "CodeBleu_score": 48.05002771893474}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    for company in self.env['res.company'].search([]):\n        # Search for accounts of the Current Year Earnings type in the current company\n        accounts = self.env['account.account'].search([('company_id', '=', company.id), ('account_type', '=', 'current_year_earnings')])\n        # If more than one account is found, raise a ValidationError\n        if len(accounts) > 1:\n            raise ValidationError(_('You cannot have more than one Current Year Earnings account per company.'))\n\n", "CodeBleu_score": 37.609518162851586}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    if not self.env.company.anglo_saxon_accounting:\n        return\n    current_year_earning_type = self.env.ref('l10n_be.account_type_current_year_earning')\n    if current_year_earning_type not in self.mapped('account_type'):\n        return\n    grouped_accounts = self.filtered(lambda account: account.account_type == current_year_earning_type).read_group([('company_id', '=', self.env.company.id)], ['company_id'], ['company_id'])\n    for group in grouped_accounts:\n        if group['company_id_count'] > 1:\n            raise ValidationError(_('You cannot have more than one Current Year Earnings account per company.'))\n\n", "CodeBleu_score": 37.85240093766856}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    for company in self.env['res.company'].search([]):\n        # Retrieve all accounts of the type \"Current Year Earnings\" for the current company\n        accounts = self.search([('company_id', '=', company.id), ('account_type', '=', 'earnings'), ('user_type_id', '=', False)])\n        # If more than one such account exists, raise a ValidationError\n        if len(accounts) > 1:\n            raise ValidationError(_('You cannot have more than one Current Year Earnings account per company.'))\n\n", "CodeBleu_score": 37.09443389734447}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if name and operator == 'ilike' and not domain:\n        domain = []\n    if not domain:\n        if name:\n            domain = ['|', ('name', operator, name), ('code', operator, name)]\n        else:\n            domain = []\n    if self._context.get('partner_id') and not self._context.get('account_id'):\n        # Searching for a partner: order accounts by frequency\n        order = order or 'name'\n        partner_id = self._context['partner_id']\n        company_id = self._context.get('company_id') or self.env.company.id\n        accounts = self.with_context(company_id=company_id)._order_accounts_by_frequency_for_partner(company_id, partner_id, self._context.get('move_type'))\n        if not accounts:\n            return []\n        domain = expression.OR([domain, [('id', 'in', accounts)]])\n    return super(AccountAccount, self)._name_search(name, domain, operator, limit, order)\n", "CodeBleu_score": 45.46035286553122}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if name and operator in ('=', 'ilike', '=ilike', 'like', '=like') and not domain:\n        domain = []\n    if not domain:\n        if self._context.get('partner_id') and self._context.get('move_type'):\n            partner_id = self._context['partner_id']\n            move_type = self._context['move_type']\n            if move_type in ('in_invoice', 'in_refund', 'in_receipt', 'in_payment'):\n                domain = [('internal_group', '=', 'income')]\n            elif move_type in ('out_invoice', 'out_refund', 'out_receipt', 'out_payment'):\n                domain = [('internal_group', '=', 'expense')]\n            else:\n                domain = []\n            if partner_id:\n                domain = domain + [('partner_id', '=', partner_id)]\n            if limit:\n                return self._order_accounts_by_frequency_for_partner(self.env.company.id, partner_id, move_type)[:limit]\n            return self._order_accounts_by_frequency_for_partner(self.env.company.id, partner_id, move_type)\n        else:\n            domain = []\n    if name:\n        domain = expression.AND([domain, [(self._rec_name, operator, name)]])\n    return super(AccountAccount, self)._name_search(name, domain, operator=operator, limit=limit, order=order)\n\n", "CodeBleu_score": 42.60742800356619}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self._context.get('default_partner_id') and self._context.get('default_type') and self._context.get('default_company_id'):\n        domain = domain or []\n        domain += [\n            ('partner_id', '=', self._context.get('default_partner_id')),\n            ('internal_group', '=', self._context.get('default_type')),\n            ('company_id', '=', self._context.get('default_company_id')),\n        ]\n        order = 'name'\n    if name and operator in ('ilike', 'not ilike', 'like', 'not like', '=', '!=', '<', '<=', '>', '>=', '=like', '=ilike', 'like=', 'ilike='):\n        domain = domain or []\n        domain += [(operator, 'name', name)]\n    return super(AccountAccount, self)._name_search(name, domain=domain, operator=operator, limit=limit, order=order)\n", "CodeBleu_score": 46.721317761694834}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    if new._name == 'account.account':\n        if new.code and new.name and new.name != new.code:\n            new.name = new.code + ' ' + new.name\n    super(AccountAccount, self).copy_translations(new, excluded=excluded)\n\n", "CodeBleu_score": 25.41133264582076}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    # We need to exclude 'name' from the excluded fields because we want to update the name field in the cache\n    excluded = list(excluded) + ['name']\n    super(AccountAccount, self).copy_translations(new, excluded)\n    new.with_context(lang=self.env.context.get('lang')).name_get()[0][1]\n\n", "CodeBleu_score": 23.375311059031034}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    # The function is called on the new record, so we need to update the cache on the old record\n    if self.env.lang:\n        self.env['ir.translation'].with_context(overwrite=False).search([\n            ('type', '=', 'model'),\n            ('name', '=', 'account.account'),\n            ('res_id', '=', self.id),\n            ('lang', '=', self.env.lang),\n        ]).write({'res_id': new.id})\n    super(AccountAccount, self).copy_translations(new, excluded=excluded)\n\n", "CodeBleu_score": 26.271175191904874}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['context'] = {\n        'default_type': 'out_invoice',\n        'default_partner_id': self.partner_id.id,\n        'default_journal_id': self.journal_id.id,\n        'search_default_account_id': self.id,\n    }\n    action['domain'] = [\n        ('move_id.move_type', 'in', self.env['account.move'].get_sale_types(include_receipts=True)),\n        ('account_id', 'in', self.env['account.analytic.line']._query_account_ids_with_move_lines(self.id)),\n    ]\n    return action\n\n", "CodeBleu_score": 34.78427772737957}, {"code": "def action_view_invoice(self)\n\t\n    sale_types = self.env['account.move'].get_sale_types(include_receipts=True)\n\n    query = self.env['account.move.line']._search([\n        ('parent_state', '=', 'posted'),\n        ('move_id.move_type', 'in', sale_types),\n    ])\n    query.add_where(\n        SQL(\n            \"\\\"%s\\\" && %s\",\n            [str(self.id), self.env['account.move.line']._query_analytic_accounts()],\n        )\n    )\n\n    query_string, query_param = query.select(\n        r\"\"\"DISTINCT move_id, (regexp_matches(jsonb_object_keys(account_move_line.analytic_distribution), '\\d+', 'g'))[1]::int as account_id\"\"\"\n    )\n    query_string = f\"\"\"\n        SELECT account_id, count(move_id) FROM\n        ({query_string}) distribution\n        GROUP BY account_id\n    \"\"\"\n\n    self.env.cr.execute(query_string, query_param)\n    data = {res['account_id']: res['count'] for res in self.env.cr.dictfetchall()}\n    action = {\n        'name': _('Invoices'),\n        'view_mode': 'tree,form',\n        'view_id': False,\n        'res_model': 'account.move',\n        'domain': [('id', 'in', list(data.keys()))],\n        'context': {\n            'create': False,\n            'edit': False,\n            'delete': False,\n            'default_type': 'out_invoice',\n            'default_journal_id': self.env.ref('account.account_invoices').id,\n            'search_default_customer': True,\n            'search_default_state': 'posted',\n            'search_default_date_from': self.env.user.company_id.period_lock_date,\n            'search_default_date_to': fields.Date.today(),\n            'group_by': 'customer',\n        },\n        'type': 'ir.actions.act_window',\n    }\n    if data:\n        action['context']['search_default_account_id'] = max(data.keys(), key=lambda x: data[x])\n    return action\n\n", "CodeBleu_score": 36.64318211103611}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['context'] = {\n        'default_type': 'out_invoice',\n        'default_journal_id': self.env.ref('account.invoice_journal').id,\n        'search_default_account_id': self.id,\n        'default_partner_id': self.partner_id.id,\n    }\n    action['domain'] = [('id', 'in', self.env['account.move.line']._search([\n        ('account_id.id', '=', self.id),\n        ('move_id.move_type', 'in', self.env['account.move'].get_sale_types(include_receipts=True)),\n    ]).ids)]\n    return action\n\n", "CodeBleu_score": 38.40885477712839}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    query = self.env['account.move.line']._search([('move_id.move_type', 'in', self.env['account.move'].get_purchase_types())])\n    query.add_where(\n        SQL(\n            \"\\\"%s\\\" && %s\",\n            [str(self.id)],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n    query_string, query_param = query.select('DISTINCT account_move_line.move_id')\n    self._cr.execute(query_string, query_param)\n    move_ids = [line.get('move_id') for line in self._cr.dictfetchall()]\n    result = {\n        \"type\": \"ir.actions.act_window\",\n        \"res_model\": \"account.move\",\n        \"domain\": [('id', 'in', move_ids)],\n        \"context\": {\"create\": False, 'default_move_type': 'in_invoice'},\n        \"name\": _(\"Vendor Bills\"),\n        'view_mode': 'tree,form',\n    }\n    return result\n\n", "CodeBleu_score": 79.95982073508002}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    query = self.env['account.move.line']._search([('move_id.move_type', 'in', self.env['account.move'].get_purchase_types())])\n    query.add_where(\n        SQL(\n            \"\\\"%s\\\" && %s\",\n            [str(self.id)],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n    query_string, query_param = query.select('DISTINCT account_move_line.move_id')\n    self._cr.execute(query_string, query_param)\n    move_ids = [line.get('move_id') for line in self._cr.dictfetchall()]\n    result = {\n        \"type\": \"ir.actions.act_window\",\n        \"res_model\": \"account.move\",\n        \"domain\": [('id', 'in', move_ids)],\n        \"context\": {\"create\": False, 'default_move_type': 'in_invoice'},\n        \"name\": _(\"Vendor Bills\"),\n        'view_mode': 'tree,form',\n    }\n    return result\n\n", "CodeBleu_score": 79.95982073508002}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    query = self.env['account.move.line']._search([('move_id.move_type', 'in', self.env['account.move'].get_purchase_types())])\n    query.add_where(\n        SQL(\n            \"\\\"%s\\\" && %s\",\n            [str(self.id)],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n    query_string, query_param = query.select('DISTINCT account_move_line.move_id')\n    self._cr.execute(query_string, query_param)\n    move_ids = [line.get('move_id') for line in self._cr.dictfetchall()]\n    result = {\n        \"type\": \"ir.actions.act_window\",\n        \"res_model\": \"account.move\",\n        \"domain\": [('id', 'in', move_ids)],\n        \"context\": {\"create\": False, 'default_move_type': 'in_invoice'},\n        \"name\": _(\"Vendor Bills\"),\n        'view_mode': 'tree,form',\n    }\n    return result\n", "CodeBleu_score": 79.95982073508002}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        del values['attachment_ids']\n    with self._check_attachments(self, [values]):\n        return super(AccountBankStatement, self).write(values)\n\n", "CodeBleu_score": 32.871932965349785}, {"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        del values['attachment_ids']\n    with self._check_attachments(self, [values]):\n        return super(AccountBankStatement, self).write(values)\n", "CodeBleu_score": 32.871932965349785}, {"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        values.pop('attachment_ids')\n    with self._check_attachments(self, [values]):\n        return super().write(values)\n\n", "CodeBleu_score": 38.87332471632353}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    if self.env.context.get('skip_bank_account_creation'):\n        return self.env['res.partner.bank']\n    return super(AccountBankStatement, self)._find_or_create_bank_account()\n", "CodeBleu_score": 12.145268283778691}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if self.env.context.get('skip_bank_account_creation'):\n        return self.env['res.partner.bank']\n    return super(AccountBankStatement, self)._find_or_create_bank_account()\n", "CodeBleu_score": 12.145268283778691}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if self.env.context.get('skip_bank_account_creation'):\n        return self.env['res.partner.bank']\n    else:\n        return super(AccountBankStatement, self)._find_or_create_bank_account()\n\n", "CodeBleu_score": 12.496402032497173}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    # Get the company currency\n    company_currency = self.company_id.currency_id\n\n    # Get the transaction amount, journal amount, and company amount in the company currency\n    transaction_amount = amount_currency\n    journal_amount = balance\n    company_amount = balance\n\n    # Get the exchange rate between the company currency and the statement line currency\n    rate = currency.rate\n\n    # If the transaction currency is the same as the company currency, we can return the amounts as is\n    if currency == company_currency:\n        return {\n            'transaction_amount': transaction_amount,\n            'journal_amount': journal_amount,\n            'company_amount': company_amount,\n        }\n\n    # If the transaction currency is different from the company currency, we need to adjust the amounts accordingly\n    if currency.is_zero(transaction_amount):\n        transaction_amount = 0.0\n\n    # If the transaction currency is different from the company currency, we need to adjust the amounts accordingly\n    if currency.is_zero(balance):\n        journal_amount = 0.0\n        company_amount = 0.0\n    else:\n        journal_amount = balance * rate\n        company_amount = balance * rate\n\n    return {\n        'transaction_amount': transaction_amount,\n        'journal_amount': journal_amount,\n        'company_amount': company_amount,\n    }\n\n", "CodeBleu_score": 20.05700002193143}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    liquidity_line, suspense_line, other_lines = self._seek_for_lines()\n    if suspense_line and not other_lines:\n        # In case of to_check or partial reconciliation, we can't trust the suspense line.\n        transaction_amount = amount_currency\n        transaction_currency = currency\n    else:\n        # In case of a full reconciliation, we can trust the suspense line.\n        transaction_amount = -suspense_line.amount_currency\n        transaction_currency = suspense_line.currency_id\n    # Compute the journal amount and company amount.\n    journal_amount = sum(liquidity_line.mapped('amount_currency'))\n    journal_currency = liquidity_line.currency_id\n    company_amount = sum(liquidity_line.mapped('balance'))\n    company_currency = liquidity_line.company_currency_id\n    # Adjust the transaction amount and balance if necessary.\n    if transaction_currency != journal_currency:\n        # In case of a foreign currency, we need to adjust the transaction amount and balance.\n        transaction_amount = self._convert_amount(\n            amount=transaction_amount,\n            currency=transaction_currency,\n            to_currency=journal_currency,\n        )\n        balance = self._convert_amount(\n            amount=balance,\n            currency=currency,\n            to_currency=journal_currency,\n        )\n    return {\n        'transaction_amount': transaction_amount,\n        'balance': balance,\n        'journal_amount': journal_amount,\n        'journal_currency': journal_currency,\n        'company_amount': company_amount,\n        'company_currency': company_currency,\n    }\n\n", "CodeBleu_score": 31.53584889524258}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    context = dict(self.env.context)\n    if self.env.context.get('currency_id'):\n        context['currency_id'] = self.env.context['currency_id']\n    else:\n        context['currency_id'] = currency.id\n    context['date'] = self.date\n    context['company_id'] = self.company_id.id\n    context['account_id'] = self.account_id.id\n    context['journal_id'] = self.journal_id.id\n    context['foreign_currency_id'] = currency.id\n    context['foreign_currency_rate'] = self.amount_currency / amount_currency\n    context['force_company'] = self.company_id.id\n    context['check_move_validity'] = False\n    context['check_move_validity_state'] = 'draft'\n    context['check_move_validity_date'] = self.date\n    context['check_move_validity_amount'] = amount_currency\n    context['check_move_validity_currency'] = currency.id\n    context['check_move_validity_journal_id'] = self.journal_id.id\n    context['check_move_validity_period_id'] = self.period_id.id\n    context['check_move_validity_partner_id'] = self.partner_id.id\n    context['check_move_validity_company_id'] = self.company_id.id\n    liquidity_line, suspense_line, other_lines = self._seek_for_lines(context=context)\n    if suspense_line and not other_lines:\n        # In case of to_check or partial reconciliation, we can't trust the suspense line.\n        transaction_amount = amount_currency\n        transaction_balance = balance\n    else:\n        # In case of full reconciliation, we can trust the suspense line.\n        transaction_amount = -suspense_line.amount_currency\n        transaction_balance = -suspense_line.balance\n    return {\n        'transaction_amount': transaction_amount,\n        'transaction_balance': transaction_balance,\n        'journal_amount': sum(liquidity_line.mapped('amount_currency')),\n        'company_amount': sum(liquidity_line.mapped('balance')),\n    }\n\n\n", "CodeBleu_score": 23.65177212402318}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        pay_method_line_ids_commands = [Command.clear()]\n        if journal.type in ('bank', 'cash'):\n            default_methods = journal._default_outbound_payment_methods()\n            pay_method_line_ids_commands += [Command.create({\n                'name': pay_method.name,\n                'payment_method_id': pay_method.id,\n            }) for pay_method in default_methods]\n        journal.outbound_payment_method_line_ids = pay_method_line_ids_commands\n", "CodeBleu_score": 80.98736726093428}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        pay_method_line_ids_commands = [Command.clear()]\n        if journal.type in ('bank', 'cash'):\n            default_methods = journal._default_outbound_payment_methods()\n            pay_method_line_ids_commands += [Command.create({\n                'name': pay_method.name,\n                'payment_method_id': pay_method.id,\n            }) for pay_method in default_methods]\n        journal.outbound_payment_method_line_ids = pay_method_line_ids_commands\n", "CodeBleu_score": 80.98736726093428}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        pay_method_line_ids_commands = [Command.clear()]\n        if journal.type in ('bank', 'cash'):\n            default_methods = journal._default_outbound_payment_methods()\n            pay_method_line_ids_commands += [Command.create({\n                'name': pay_method.name,\n                'payment_method_id': pay_method.id,\n            }) for pay_method in default_methods]\n        journal.outbound_payment_method_line_ids = pay_method_line_ids_commands\n", "CodeBleu_score": 80.98736726093428}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t\n    for move in self.filtered(lambda m: m.date == False and m.invoice_date == False):\n        move.date = fields.Date.context_today(self)\n    for move in self.filtered(lambda m: m.date == False and m.invoice_date != False):\n        if not move.is_sale_document():\n            move.date = move.company_id.fiscalyear_last_day(move.invoice_date)\n        else:\n        if move.invoice_date != move.date:\n            move.date = move.invoice_date\n            move.with_context(recompute_tax_base_amount=True).recompute_tax_line_base_amount()\n\n    @api.depends('invoice_date', 'date', 'journal_id', 'invoice_user_id', 'company_id', 'move_type', 'state')\n    def _compute_display_name(self):\n        for move in self:\n            if move.is_sale_document():\n                name = move.name or '/'\n                if move.invoice_user_id:\n                    name = '%s (%s)' % (name, move.invoice_user_id.name)\n                name = '%s%s' % (name, ' - ' + move.ref or '')\n                if move.invoice_date:\n                    name = '%s%s' % (name, ' - ' + move.invoice_date.strftime(DEFAULT_SERVER_DATE_FORMAT))\n                if move.state == 'draft':\n                    name = '*%s*' % name\n            else:\n                name = '%s%s' % (move.name or '/', ' - ' + move.ref or '')\n                if move.date:\n                    name = '%s%s' % (name, ' - ' + move.date.strftime(DEFAULT_SERVER_DATE_FORMAT))\n                if move.state == 'draft':\n                    name = '*%s*' % name\n            move.display_name = name\n\n    @api.depends('journal_id', 'invoice_date', 'date', 'state', 'journal_id.sequence_id', 'journal_id.sequence_id.padding')\n   ", "CodeBleu_score": 34.396437401890644}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if not move.date and not move.invoice_date:\n            move.date = fields.Date.context_today(move)\n        elif move.invoice_date:\n            if not move.is_sale_document(include_receipts=True):\n                move.date = move.company_id.fiscalyear_lock_date or move.invoice_date\n            else:\n                move.date = move._get_accounting_date() or move.invoice_date\n            if move.date != move.invoice_date:\n                move.date = fields.Date.context_today(move)\n        move.date = fields.Date.to_date(move.date)\n\n    # If the move's date has changed, we need to recompute the related fields\n    for move in self.filtered(lambda m: m.date != m._origin.date):\n        move.with_context(recompute_tax_base_amount=True).recompute_tax_line()\n        move.with_context(recompute_tax_amount=True).recompute_tax_line()\n        move.with_context(recompute_writeoff_amount=True).recompute_writeoff_amount()\n        move.with_context(recompute_balance=True).recompute_balance()\n        move.with_context(recompute_invoice_user=True).recompute_invoice_user()\n        move.with_context(recompute_currency=True).recompute_currency()\n        move.with_context(recompute_payment_term_line=True).recompute_payment_term_line()\n\n    # If the move's date has changed, we need to recompute the related fields\n    for move in self.filtered(lambda m: m.date != m._origin.date):\n        move.with_context(recompute_tax_base_amount=True).recompute_tax_line()\n        move.with_context(recompute_tax_amount=True).recompute_tax_line()\n        move.with_context(recompute_writeoff_amount=True).recompute_writeoff_amount()\n        move.with_context(recompute_balance=True).recompute", "CodeBleu_score": 33.27879532592695}, {"code": "def _compute_date(self)\n\t\n    for move in self.filtered(lambda m: not m.date):\n        if move.invoice_date:\n            if move.is_sale_document(include_receipts=True):\n                move.date = move.company_id.fiscalyear_last_day(move.invoice_date)\n            else:\n                move.date = move.invoice_date\n        else:\n            move.date = fields.Date.context_today(self)\n\n    # If the move's date differs from the current date, schedule a recomputation of related fields\n    for move in self.filtered(lambda m: m.date != fields.Date.context_today(self)):\n        move.date = fields.Date.context_today(self)\n        move.recompute_dynamic_lines()\n\n", "CodeBleu_score": 39.082248063514456}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document(include_receipts=True):\n            partner_term = move.partner_id.property_supplier_payment_term_id\n            term_id = partner_term.id if partner_term else move.payment_term_id.id\n        elif move.is_purchase_document(include_receipts=True):\n            partner_term = move.partner_id.property_supplier_payment_term_id\n            term_id = partner_term.id if partner_term else move.payment_term_id.id\n        else:\n            term_id = False\n        move.invoice_payment_term_id = term_id\n\n", "CodeBleu_score": 43.28933536949817}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_invoice():\n            if move.move_type in ('out_invoice', 'out_refund'):\n                if move.partner_id.property_supplier_payment_term_id:\n                    move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id.id\n                else:\n                    move.invoice_payment_term_id = move.partner_id.property_payment_term_id.id\n            elif move.move_type in ('in_invoice', 'in_refund'):\n                if move.partner_id.property_customer_payment_term_id:\n                    move.invoice_payment_term_id = move.partner_id.property_customer_payment_term_id.id\n                else:\n                    move.invoice_payment_term_id = move.partner_id.property_payment_term_id.id\n            else:\n                move.invoice_payment_term_id = False\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 37.62696251657227}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document(include_receipts=True):\n            move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n        elif move.is_purchase_document(include_receipts=True):\n            move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 51.48230881586928}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    tax_group_data = self.env['account.tax.group'].read_group([('country_id', 'in', self.mapped('country_id').ids), ('company_id', 'in', self.mapped('company_id').ids)], ['country_id', 'company_id', 'id'], ['country_id', 'company_id'])\n    tax_group_data_dict = {\n        (data['country_id'][0], data['company_id'][0]): data['id']\n        for data in tax_group_data\n    }\n    for tax in self:\n        tax.tax_group_id = tax_group_data_dict.get((tax.country_id.id, tax.company_id.id), False)\n\n", "CodeBleu_score": 20.20003400441784}, {"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        if tax.tax_group_id:\n            continue\n        tax_group = self.env['account.tax.group'].search([('company_id', '=', tax.company_id.id), ('country_id', '=', tax.country_id.id)])\n        if not tax_group:\n            tax_group = self.env['account.tax.group'].search([('company_id', '=', tax.company_id.id), ('country_id', '=', False)])\n        tax.tax_group_id = tax_group.id or False\n\n    @api.depends('repartition_line_ids')\n    def _compute_invoice_repartition_line_ids(self):\n        for tax in self:\n            tax.invoice_repartition_line_ids = tax.repartition_line_ids.filtered(lambda x: x.document_type == 'invoice')\n\n    @api.depends('repartition_line_ids')\n    def _compute_refund_repartition_line_ids(self):\n        for tax in self:\n            tax.refund_repartition_line_ids = tax.repartition_line_ids.filtered(lambda x: x.document_type == 'refund')\n\n    @api.depends('repartition_line_ids')\n    def _compute_repartition_lines_str(self):\n        for tax in self:\n            tax.repartition_lines_str = ', '.join(tax.repartition_line_ids.mapped('name'))\n\n    @api.depends('repartition_line_ids')\n    def _compute_is_used(self):\n        for tax in self:\n            tax.is_used = bool(tax.repartition_line_ids)\n\n    @api.onchange('tax_exigibility')\n    def _onchange_tax_exigibility(self):\n        if self.tax_exigibility == 'on_invoice':\n            self.cash_basis_transition_account_id = False\n        elif self.tax_exigibility == 'on_payment':\n            self.cash_basis_transition_account_id = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_current_assets').id)], limit=1)\n\n    @api.onchange('type_tax_use')", "CodeBleu_score": 30.371950136903685}, {"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        if tax.tax_group_id:\n            continue\n        domain = [\n            ('company_id', '=', tax.company_id.id),\n            ('country_id', '=', tax.country_id.id),\n        ]\n        tax.tax_group_id = tax.env['account.tax.group'].search(domain, limit=1)\n        if not tax.tax_group_id:\n            domain = [\n                ('company_id', '=', tax.company_id.id),\n                ('country_id', '=', False),\n            ]\n            tax.tax_group_id = tax.env['account.tax.group'].search(domain, limit=1)\n\n    @api.depends('repartition_line_ids')\n    def _compute_is_used(self):\n        for tax in self:\n            tax.is_used = bool(tax.repartition_line_ids)\n\n    @api.depends('repartition_line_ids')\n    def _compute_repartition_lines_str(self):\n        for tax in self:\n            tax.repartition_lines_str = ', '.join(line.name for line in tax.repartition_line_ids)\n\n    @api.depends('repartition_line_ids')\n    def _compute_invoice_repartition_line_ids(self):\n        for tax in self:\n            tax.invoice_repartition_line_ids = tax.repartition_line_ids.filtered(lambda l: l.document_type == 'invoice')\n\n    @api.depends('repartition_line_ids')\n    def _compute_refund_repartition_line_ids(self):\n        for tax in self:\n            tax.refund_repartition_line_ids = tax.repartition_line_ids.filtered(lambda l: l.document_type == 'refund')\n\n    @api.onchange('type_tax_use')\n    def _onchange_type_tax_use(self):\n        if self.type_tax_use == 'sale':\n            self.description = _('Sales Tax')\n        elif self.", "CodeBleu_score": 30.864955552041323}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    self.session.get(url + '/web/database/selector')\n    self.session.post(url + '/web/session/authenticate', json={'db': db, 'login': login, 'password': password})\n    url = url + '/web/base_import_module/login_upload'\n    files = {'module_file': open(module_file, 'rb')}\n    data = {'name': os.path.basename(module_file), 'force': force}\n    response = self.session.post(url, files=files, data=data)\n    response.raise_for_status()\n    return response.text\n\n", "CodeBleu_score": 42.48025316757516}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    self.session.get(url + '/web/database/selector')\n    self.session.post(url + '/web/session/authenticate', data={'login': login, 'password': password})\n    with open(module_file, 'rb') as module_file_binary:\n        response = self.session.post(url + '/web/base_import_module/login_upload', data={'name': db, 'force': force}, files={'module_file': module_file_binary})\n    if response.status_code != 200:\n        raise Exception('Upload failed with status code {} and response text {}'.format(response.status_code, response.text))\n    return response.text\n\n", "CodeBleu_score": 40.82960937796377}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    self.session.get(url + '/web/database/selector', params={'login': login, 'password': password, 'redirect': '/web'})\n    data = {'csrf_token': self.session.cookies['csrf_token'], 'module_file': open(module_file, 'rb'), 'name': os.path.basename(module_file), 'force': '1' if force else '0'}\n    response = self.session.post(url + '/base_import_module/login_upload', params={'db': db}, files=data)\n    if response.status_code != 200:\n        raise Exception(\"Could not upload module: %s\" % response.text)\n    return response.text\n", "CodeBleu_score": 44.528388704307574}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n    _logger.info('loading translation file %s', odoo.tools.config['translate_in'])\n    registry = odoo.modules.registry.Registry.new(odoo.tools.config['db_name'])\n    with registry.cursor() as cr:\n        importer = odoo.tools.trans_load(\n            cr, odoo.tools.config['translate_in'],\n            overwrite=odoo.tools.config['overwrite_existing'])\n    _logger.info('translation file loaded successfully')\n", "CodeBleu_score": 26.635234106202006}, {"code": "def import_translation()\n\t\n    config = odoo.tools.config\n    dbname = config['db_name']\n    overwrite = config['overwrite_existing']\n    _logger.info('loading translation file from %s', config['translate_in'])\n    registry = odoo.modules.registry.Registry.new(dbname)\n    with registry.cursor() as cr:\n        importer = odoo.tools.trans_load(cr, config['translate_in'], overwrite=overwrite)\n    _logger.info('translation file loaded successfully')\n", "CodeBleu_score": 35.70119474379254}, {"code": "def import_translation()\n\t\n    _logger.info('loading translation file %s', odoo.tools.config['translate_in'])\n    with open(odoo.tools.config['translate_in'], 'rb') as buf:\n        registry = odoo.modules.registry.Registry.new(odoo.tools.config['db_name'])\n        with registry.cursor() as cr:\n            importer = odoo.tools.trans_load(buf, odoo.tools.config['overwrite_existing'], cr)\n    _logger.info('translation file loaded successfully')\n", "CodeBleu_score": 46.96604576804682}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    child = Node(name, self.graph, info)\n    child.depth = self.depth + 1\n    if child not in self.children:\n        self.children.append(child)\n        self.children.sort(key=lambda x: x.name)\n    return child\n\n", "CodeBleu_score": 38.521049496701984}, {"code": "def add_child(self, name, info)\n\t\n    child = Node(name, self.graph, info)\n    child.depth = self.depth + 1\n    if child not in self.children:\n        self.children.append(child)\n        self.children.sort(key=lambda x: x.name)\n    return child\n\n", "CodeBleu_score": 38.521049496701984}, {"code": "def add_child(self, name, info)\n\t\n    child = Node(name, self.graph, info)\n    child.depth = self.depth + 1\n    if child not in self.children:\n        self.children.append(child)\n        self.children.sort(key=lambda x: x.name)\n    return child\n", "CodeBleu_score": 38.521049496701984}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n    result = []\n    balance = 0\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n    for date in dates:\n        result.append((date, balance))\n        for entry in gl_entries:\n            if entry.posting_date <= date:\n                if entry.account == account:\n                    balance += entry.debit - entry.credit\n                elif entry.is_opening:\n                    balance = entry.debit - entry.credit\n        if root_type not in [\"Asset\", \"Expense\"]:\n            balance = -balance\n        if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n            balance += flt(frappe.db.sql(\"\"\"select sum(debit) - sum(credit) from `tabGL Entry` where account in (select name from tabAccount where root_type=%s and lft <= %s and rgt >= %s) and posting_date <= %s\"\"\", (root_type, frappe.db.get_value(\"Account\", account, \"lft\"), frappe.db.get_value(\"Account\", account, \"rgt\"), date))[0][0])\n    return result\n\n", "CodeBleu_score": 27.692589535323968}, {"code": "def build_result(account, dates, gl_entries)\n\t\n\n    result = []\n    balance = 0\n    for d in dates:\n        result.append([d, balance])\n\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n    for entry in gl_entries:\n        if entry.posting_date < dates[0][0]:\n            continue\n        if entry.posting_date > dates[-1][0]:\n            break\n\n        if root_type not in [\"Asset\", \"Expense\"]:\n            entry.debit, entry.credit = -entry.debit, -entry.credit\n\n        balance += entry.debit - entry.credit\n        result[entry.posting_date - dates[0][0]][1] = balance\n\n    return result\n\n", "CodeBleu_score": 30.95256519971454}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = []\n    balance = 0\n    for d in dates:\n        result.append([d, balance])\n\n    # initialize balance to zero\n    balance = 0\n\n    # determine root type\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n\n    for entry in gl_entries:\n        # accumulate balance for asset, liability, and equity accounts\n        if root_type in (\"Asset\", \"Liability\", \"Equity\"):\n            balance += entry.debit - entry.credit\n        else:\n            balance -= entry.debit + entry.credit\n\n        # find the index of the date in the result\n        index = find_index_of_date(entry.posting_date, dates)\n\n        # update the balance in the result\n        result[index][1] = balance\n\n    return result\n\n", "CodeBleu_score": 32.40876568546507}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n    from frappe.utils import nowdate\n\n    if self.doctype == \"Account\" and self.is_group:\n        if self.account_type in (\"Receivable\", \"Payable\"):\n            if self.account_type != self.get_doc_before_save().account_type:\n                gl_entries = frappe.db.sql(\n                    \"\"\"select name from `tabGL Entry` where account=%s and posting_date=%s\"\"\",\n                    (self.name, nowdate()),\n                    as_dict=1,\n                )\n                if gl_entries:\n                    frappe.msgprint(\n                        _(\n                            \"Changing the account type to a non-receivable/payable type will result in loss of existing ledger entries. Please contact your system manager for more details.\"\n                        ),\n                        title=\"Warning\",\n                        indicator=\"orange\",\n                    )\n                    frappe.get_doc(\n                        {\n                            \"doctype\": \"Comment\",\n                            \"comment_type\": \"Info\",\n                            \"reference_doctype\": self.doctype,\n                            \"reference_name\": self.name,\n                            \"comment_email\": frappe.session.user,\n                            \"comment_by\": frappe.session.user,\n                            \"content\": _(\n                                \"Changing the account type to a non-receivable/payable type will result in loss of existing ledger entries. Please contact your system manager for more details.\"\n                            ),\n                        }\n                    ).insert(ignore_permissions=True)\n", "CodeBleu_score": 33.60045502777714}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n\n    if not self.flags.ignore_mandatory:\n        if self.account_type in [\"Receivable\", \"Payable\"]:\n            if self.get_balance() > 0:\n                frappe.msgprint(\n                    _(\n                        \"Changing the account type of a receivable/payable account to a non-receivable/payable type will result in loss of existing ledger entries. Please check the account {0} in the General Ledger to verify the loss of ledger entries.\"\n                    ).format(self.name),\n                    title=\"Warning\",\n                )\n                frappe.get_doc(\n                    {\n                        \"doctype\": \"Comment\",\n                        \"comment_type\": \"Info\",\n                        \"comment_email\": frappe.session.user,\n                        \"reference_doctype\": self.doctype,\n                        \"reference_name\": self.name,\n                        \"content\": _(\n                            \"Changing the account type of a receivable/payable account to a non-receivable/payable type will result in loss of existing ledger entries. Please check the account {0} in the General Ledger to verify the loss of ledger entries.\"\n                        ).format(self.name),\n                    }\n                ).insert(ignore_permissions=True)\n\n", "CodeBleu_score": 23.96850831969024}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    from erpnext.accounts.doctype.account.chart_of_accounts.chart_of_accounts import (\n        get_balance_must_be,\n    )\n\n    if self.doctype != \"Account\":\n        return\n\n    if self.is_group:\n        return\n\n    if not self.get(\"__islocal\"):\n        db_value = self.get_doc_before_save()\n        if db_value:\n            if db_value.account_type in [\"Receivable\", \"Payable\"]:\n                if (\n                    self.account_type not in [\"Receivable\", \"Payable\"]\n                    and self.get_balance_on(self.report_type) != 0\n                ):\n                    frappe.msgprint(\n                        _(\n                            \"Changing the account type from {0} to {1} will affect the {2} report. Please contact your system manager if you need to do this.\"\n                        ).format(\n                            _(db_value.account_type),\n                            _(self.account_type),\n                            _(self.report_type),\n                        ),\n                        title=_(\"Warning\"),\n                        indicator=\"orange\",\n                    )\n                    frappe.get_doc(\n                        {\n                            \"doctype\": \"Comment\",\n                            \"comment_type\": \"Info\",\n                            \"comment_email\": frappe.session.user,\n                            \"reference_doctype\": self.doctype,\n                            \"reference_name\": self.name,\n                            \"content\": _(\n                                \"Changing the account type from {0} to {1} will affect the {2} report. Please contact your system manager if you need to do this.\"\n                            ).format(\n                                _(db_value.account_type),\n                                _(self.account_type),\n                                _(self.report_type),\n                            ),\n                        }\n                    ).insert(ignore_permissions=True)\n\n", "CodeBleu_score": 29.84682532561719}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n    if self.is_group:\n        return\n\n    if self.account_type in [\"Receivable\", \"Payable\"]:\n        if not self.account_currency:\n            self.account_currency = frappe.get_cached_value(\"Company\", self.company, \"default_currency\")\n\n    if self.account_currency:\n        if self.account_currency == self.company_currency:\n            self.set_as_base_currency()\n        else:\n            self.set_as_not_base_currency()\n\n        if self.account_type in [\"Receivable\", \"Payable\"]:\n            if self.account_currency != self.company_currency:\n                frappe.throw(\n                    _(\"Account Currency must be same as Company Currency for Receivable and Payable type accounts.\")\n                )\n\n    if self.get(\"__islocal\"):\n        return\n\n    gl_entries = frappe.db.sql(\n        \"\"\"\n            SELECT\n                posting_date,\n                account_currency\n            FROM `tabGL Entry`\n            WHERE account=%s AND company=%s\n            ORDER BY posting_date DESC, name DESC\n            LIMIT 1\n        \"\"\",\n        (self.name, self.company),\n        as_dict=True,\n    )\n\n    if gl_entries:\n        last_posting_date = gl_entries[0].posting_date\n        last_account_currency = gl_entries[0].account_currency\n\n        if self.account_currency != last_account_currency:\n            if last_posting_date > getdate(self.modified):\n                frappe.throw(\n                    _(\n                        \"Cannot change currency, because there are existing transactions with different currency.\"\n                        \"Please set the currency only if you are sure that there are no transactions against the account.\"\n                    )\n                )\n\n", "CodeBleu_score": 39.90191084788477}, {"code": "def validate_account_currency(self)\n\t\n    if self.account_type in [\"Receivable\", \"Payable\"]:\n        self.account_currency = None\n        return\n\n    if not self.account_currency:\n        self.account_currency = frappe.get_cached_value(\"Company\", self.company, \"default_currency\")\n\n    if self.account_currency != frappe.db.get_value(\"Account\", self.name, \"account_currency\"):\n        # check if there are any gl entries with a different currency\n        gl_entries = frappe.db.sql(\n            \"\"\"\n\t\t\tselect posting_date, account_currency\n\t\t\tfrom `tabGL Entry`\n\t\t\twhere account = %s and company = %s\n\t\t\tand account_currency != %s\n\t\t\tand docstatus < 2\n\t\t\torder by posting_date desc, name desc\n\t\t\tlimit 1\n\t\t\"\"\",\n            (self.name, self.company, self.account_currency),\n            as_dict=1,\n        )\n\n        if gl_entries:\n            # if yes, check if the last entry has been adjusted\n            if gl_entries[0][\"account_currency\"] != gl_entries[0][\"account_currency\"]:\n                # if yes, mark the account explicitly specified\n                self.account_currency = None\n            else:\n                # if no, raise an error\n                frappe.throw(\n                    _(\n                        \"Cannot change currency, because there are existing transactions with currency '{0}'.\".format(\n                            gl_entries[0][\"account_currency\"]\n                        )\n                    )\n                )\n\n", "CodeBleu_score": 38.233268278238455}, {"code": "def validate_account_currency(self)\n\t\n    if not self.get(\\\"__islocal\\\") and not self.flags.ignore_currency_validation:\n        # get the account's currency and the company's default currency\n        account_currency = frappe.db.get_value(\\\"Account\\\", self.name, \\\"account_currency\\\")\n        company_currency = frappe.db.get_value(\\\"Company\\\", self.company, \\\"default_currency\\\")\n\n        # if the account currency is not explicitly specified, set it to the company's default currency\n        if not account_currency:\n            self.account_currency = company_currency\n\n        # if the account currency differs from the company's default currency, check for existing GL entries\n        elif account_currency != company_currency:\n            # get the account's balance in company's currency\n            balance = frappe.db.sql(\n                \\\"select sum(debit_in_account_currency) - sum(credit_in_account_currency) from `tabGL Entry` where account = %s and company = %s\\\",\n                (self.name, self.company),\n            )[0][0]\n\n            # if the balance is zero, set the account currency to the company's default currency\n            if balance == 0:\n                self.account_currency = company_currency\n\n            # if the balance is non-zero, check if there are any GL entries with a different currency\n            else:\n                # get the account's balance in the ledger's currency\n                balance_in_ledger_currency = frappe.db.sql(\n                    \\\"select sum(debit) - sum(credit) from `tabGL Entry` where account = %s and company = %s\\\",\n                    (self.name, self.company),\n                )[0][0]\n\n                # if the balance in ledger's currency is zero, set the account currency to the ledger's currency\n                if balance_in_ledger_currency == 0:\n                    self.account_currency = account_currency\n\n                # if the balance in ledger's currency is non-zero, raise an error\n                else:\n                    throw(\n                        _(\n                        \\\"Account currency cannot be changed after making transactions with other currency. Please make sure that all transactions made with other currency are reconciled before changing the account currency\\\"\n                    )\n                )\n\n", "CodeBleu_score": 29.195927764049756}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key = generate_key(entry, accounting_dimensions)\n        if key in merged_entries:\n            merged_entries[key][\"debit\"] += entry[\"debit\"]\n            merged_entries[key][\"debit_in_account_currency\"] += entry[\n                \"debit_in_account_currency\"\n            ]\n            merged_entries[key][\"credit\"] += entry[\"credit\"]\n            merged_entries[key][\"credit_in_account_currency\"] += entry[\n                \"credit_in_account_currency\"\n            ]\n        else:\n            merged_entries[key] = entry\n    return merged_entries\n\n", "CodeBleu_score": 37.49900890630228}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n\n    for entry in entries:\n        dimensions = {}\n        for dimension in accounting_dimensions:\n            dimensions[dimension] = entry.get(dimension)\n\n        key = get_key(entry, accounting_dimensions)\n        if key in merged_entries:\n            merged_entries[key][\"debit\"] += entry[\"debit\"]\n            merged_entries[key][\"credit\"] += entry[\"credit\"]\n            merged_entries[key][\"debit_in_account_currency\"] += entry[\"debit_in_account_currency\"]\n            merged_entries[key][\"credit_in_account_currency\"] += entry[\"credit_in_account_currency\"]\n        else:\n            merged_entries[key] = {\n                \"account\": entry[\"account\"],\n                \"account_currency\": entry[\"account_currency\"],\n                \"debit\": entry[\"debit\"],\n                \"credit\": entry[\"credit\"],\n                \"debit_in_account_currency\": entry[\"debit_in_account_currency\"],\n                \"credit_in_account_currency\": entry[\"credit_in_account_currency\"],\n                \"cost_center\": entry[\"cost_center\"],\n                \"project\": entry[\"project\"],\n                \"finance_book\": entry[\"finance_book\"],\n                \"is_period_closing_voucher_entry\": entry[\"is_period_closing_voucher_entry\"],\n                \"dimensions\": dimensions,\n            }\n\n    return merged_entries\n\n", "CodeBleu_score": 33.53537397298159}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n\n    merged_entries = {}\n    for entry in entries:\n        dimensions = get_dimensions(entry, accounting_dimensions)\n        dimensions_key = get_dimensions_key(dimensions)\n        if dimensions_key not in merged_entries:\n            merged_entries[dimensions_key] = get_starting_values(entry)\n            merged_entries[dimensions_key].update(dimensions)\n        else:\n            merged_entries[dimensions_key][\"debit\"] += entry.debit\n            merged_entries[dimensions_key][\"credit\"] += entry.credit\n            merged_entries[dimensions_key][\"debit_in_account_currency\"] += entry.debit_in_account_currency\n            merged_entries[dimensions_key][\"credit_in_account_currency\"] += entry.credit_in_account_currency\n            merged_entries[dimensions_key][\"closing_balance\"] += entry.debit_in_account_currency - entry.credit_in_account_currency\n            merged_entries[dimensions_key][\"closing_balance_in_account_currency\"] += entry.debit_in_account_currency - entry.credit_in_account_currency\n\n    return merged_entries\n\n", "CodeBleu_score": 33.21549317961623}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype in [\n        \"Purchase Invoice\",\n        \"Purchase Order\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Purchase Order\",\n    ]:\n        supplier = self.supplier\n    elif self.doctype in [\n        \"Supplier Quotation\",\n        \"Supplier Quotation Item\",\n        \"Purchase Order Item\",\n        \"Purchase Receipt Item\",\n        \"Purchase Invoice Item\",\n    ]:\n        supplier = self.supplier\n    else:\n        return\n\n    if supplier:\n        supplier_status = frappe.db.get_value(\"Supplier\", supplier, \"on_hold\")\n        if supplier_status == 1:\n            hold_type = frappe.db.get_value(\"Supplier\", supplier, \"hold_type\")\n            if hold_type != self.doctype:\n                frappe.msgprint(\n                    _(\"Supplier is on hold, but the transaction type does not match the hold type. The transaction cannot proceed until the hold is lifted.\"),\n                    title=_(\"Supplier on Hold\"),\n                    indicator=\"orange\",\n                )\n                raise frappe.ValidationError\n\n", "CodeBleu_score": 28.45367109628343}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype == \"Supplier Quotation\":\n        supplier_name = self.supplier\n    else:\n        supplier_name = self.supplier_name\n    if not supplier_name:\n        return\n    supplier_is_blocked = frappe.db.get_value(\"Supplier\", supplier_name, \"on_hold\")\n    if supplier_is_blocked:\n        hold_type = frappe.db.get_value(\"Supplier\", supplier_name, \"hold_type\")\n        if hold_type == self.doctype:\n            release_date = frappe.db.get_value(\"Supplier\", supplier_name, \"release_date\")\n            if getdate(nowdate()) < getdate(release_date):\n                msg = _(\"Supplier {0} is on hold until {1}\").format(\n                    bold(supplier_name), getdate(release_date)\n                )\n                frappe.throw(msg, title=_(\"Supplier on Hold\"))\n        else:\n            frappe.throw(\n                _(\"Supplier {0} is on hold\").format(bold(supplier_name)),\n                title=_(\"Supplier on Hold\"),\n            )\n\n", "CodeBleu_score": 37.49397921232679}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype in [\"Purchase Invoice\", \"Purchase Order\", \"Purchase Receipt\"]:\n        supplier_type = \"Supplier\"\n        supplier = self.supplier\n        supplier_name = self.supplier_name\n    elif self.doctype in [\"Sales Invoice\", \"Sales Order\", \"Delivery Note\"]:\n        supplier_type = \"Customer\"\n        supplier = self.customer\n        supplier_name = self.customer_name\n    else:\n        return\n\n    if not supplier:\n        return\n\n    supplier_account = get_party_account(supplier_type, supplier, self.company)\n\n    if not supplier_account:\n        return\n\n    if frappe.db.get_value(\"Account\", supplier_account, \"on_hold\"):\n        if self.doctype in [\"Purchase Invoice\", \"Purchase Order\", \"Purchase Receipt\"]:\n            hold_type = frappe.db.get_value(\"Supplier\", supplier, \"hold_type\")\n        elif self.doctype in [\"Sales Invoice\", \"Sales Order\", \"Delivery Note\"]:\n            hold_type = frappe.db.get_value(\"Customer\", supplier, \"hold_type\")\n\n        if hold_type == self.doctype:\n            release_date = frappe.db.get_value(\"Supplier\", supplier, \"release_date\")\n            if getdate(nowdate()) > getdate(release_date):\n                frappe.db.set_value(\"Account\", supplier_account, \"on_hold\", 0)\n                frappe.db.set_value(\"Account\", supplier_account, \"hold_type\", \"\")\n                frappe.db.set_value(\"Account\", supplier_account, \"release_date\", \"\")\n\n", "CodeBleu_score": 35.08161990314811}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = [\n        \"GL Entry\",\n        \"Stock Ledger Entry\",\n        \"Stock Ledger Entry Deduction\",\n        \"Stock Ledger Entry Repost\",\n        \"Stock Ledger Entry Repost Deduction\",\n        \"GL Entry Repost\",\n        \"GL Entry Deduction\",\n        \"GL Entry Repost Deduction\",\n    ]\n    repost_docs = frappe.qb.from_(repost_doctypes).select(\"*\").where(\n        (repost_doctypes.voucher_type == self.doctype)\n        & (repost_doctypes.voucher_no == self.name)\n    )\n    if repost_docs:\n        repost_docs = repost_docs.run(as_dict=True)\n        references_map = frappe._dict()\n        for x in repost_docs:\n            references_map.setdefault(x.parent, []).append(x)\n        for doc, rows in references_map.items():\n            repost_doc = frappe.get_doc(x.parent, doc)\n            for row in rows:\n                if row.voucher_type == self.doctype and row.voucher_no == self.name:\n                    if repost_doc.meta.get_field(\"repost_vouchers\"):\n                        repost_doc.remove(repost_doc.get(\"repost_vouchers\", {\"name\": row.name})[0])\n                    else:\n                        repost_doc.remove(repost_doc.get(\"vouchers\", {\"name\": row.name})[0])\n            repost_doc.flags.ignore_validate_update_after_submit = True\n            repost_doc.flags.ignore_links = True\n            repost_doc.save(ignore_permissions=True)\n\n", "CodeBleu_score": 38.708511751630304}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = [\n        {\"dt\": \"GL Entry\", \"field\": \"voucher_no\"},\n        {\"dt\": \"Stock Ledger Entry\", \"field\": \"voucher_no\"},\n        {\"dt\": \"Stock Ledger Entry\", \"field\": \"voucher_detail_no\"},\n        {\"dt\": \"Purchase Invoice Item\", \"field\": \"against_voucher\"},\n        {\"dt\": \"Purchase Invoice Item\", \"field\": \"against_voucher_detail\"},\n        {\"dt\": \"Sales Invoice Item\", \"field\": \"against_voucher\"},\n        {\"dt\": \"Sales Invoice Item\", \"field\": \"against_voucher_detail\"},\n        {\"dt\": \"Journal Entry Account\", \"field\": \"voucher_no\"},\n        {\"dt\": \"Journal Entry Account\", \"field\": \"reference_name\"},\n        {\"dt\": \"Payment Entry Reference\", \"field\": \"reference_name\"},\n        {\"dt\": \"Payment Entry Reference\", \"field\": \"reference_name\"},\n        {\"dt\": \"Payment Entry Reference\", \"field\": \"reference_name\"},\n        {\"dt\": \"Payment Entry Reference\", \"field\": \"reference_name\"},\n        {\"dt\": \"Payment Entry Reference\", \"field\": \"reference_name\"},\n        {\"dt\": \"Payment Entry Reference\", \"field\": \"reference_name\"},\n        {\"dt\": \"Payment Entry Reference\", \"field\": \"reference_name\"},\n        {\"dt\": \"Payment Entry Reference\", \"field\": \"reference_name\"},\n        {\"dt\": \"Payment Entry Reference\", \"field\": \"reference_name\"},\n        {\"dt\": \"Payment Entry Reference\", \"field\": \"reference_name\"},\n        {\"dt\": \"Payment Entry Reference\", \"field\": \"reference_name\"},\n        {\"dt\": \"Payment Entry Reference\", \"field\": \"reference_name\"},\n        {\"dt\": \"Payment Entry Reference\", \"field\": \"reference_name\"},\n        {\"dt\": \"Payment Entry Reference\", \"field\": \"reference_name\"},\n        {\"dt\": \"Payment Entry Reference\", \"field\": \"reference_name\"},\n        {\"dt\": \"Payment Entry Reference\", \"field\": \"reference_name\"},\n        {\"dt\": \"Payment Entry Reference\", \"field\": \"reference_name\"},\n        {\"dt\": \"Payment Entry Reference\", \"field\": \"reference_name\"},\n        {\"dt\": \"Payment Entry Reference\", \"field\": \"reference_name\"},\n        {\"dt\": \"Payment Entry Reference\", \"field\": \"reference_name\"},", "CodeBleu_score": 5.227138830463522}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = [\"GL Entry\", \"Stock Ledger Entry\", \"Stock Reconciliation\", \"Stock Ledger Entry\", \"GL Entry\"]\n    rows = frappe.db.get_all(\n        repost_doctypes[0],\n        filters={\n            \"voucher_type\": self.doctype,\n            \"voucher_no\": self.name,\n        },\n        fields=[\"name\", \"parent\", \"parenttype\"],\n    )\n    if rows:\n        references_map = frappe._dict()\n        for x in rows:\n            references_map.setdefault(x.parenttype, []).append(x)\n        for parenttype, rows in references_map.items():\n            parent_doc = frappe.get_doc(parenttype, rows[0].parent)\n            for row in rows:\n                if parent_doc.doctype == \"GL Entry\":\n                    parent_doc.remove(parent_doc.get(\"repost_vouchers\", {\"name\": row.name})[0])\n                else:\n                    parent_doc.remove(parent_doc.get(\"vouchers\", {\"name\": row.name})[0])\n            parent_doc.flags.ignore_validate_update_after_submit = True\n            parent_doc.flags.ignore_links = True\n            parent_doc.save(ignore_permissions=True)\n\n", "CodeBleu_score": 37.935544365650934}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    if not self.access_token:\n        self.get_access_token()\n    self.auth()\n    transactions = []\n    cursor = None\n    # Plaid returns transactions in batches of 50. We'll keep fetching until we have all of them.\n    while True:\n        try:\n            response = self.client.Transactions.get(\n                self.access_token,\n                start_date=start_date,\n                end_date=end_date,\n                account_ids=[account_id] if account_id else None,\n                count=50,\n                offset=len(transactions),\n                options={\"pending\": True} if self.settings.include_pending_transactions else None,\n            )\n        except APIError as e:\n            if e.code == \"PRODUCT_NOT_READY\":\n                # The transactions product is not ready. This is likely because the user has not yet linked their bank account.\n                frappe.log_error(\"Plaid: Transactions product is not ready\")\n                frappe.msgprint(_(\"Please link your bank account to Plaid.\"))\n            else:\n                # Some other error occurred.\n                frappe.log_error(\"Plaid: Error fetching transactions\")\n                frappe.throw(str(e))\n        else:\n            transactions += response[\"transactions\"]\n            if len(transactions) < response[\"total_transactions\"]:\n                cursor = response[\"request_id\"]\n            else:\n                break\n\n    return transactions, cursor\n", "CodeBleu_score": 41.112928853869896}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    if not self.access_token:\n        raise Exception(\\\"Plaid access token is missing\\\")\n    transactions = []\n    offset = 0\n    limit = 500\n    while True:\n        try:\n            response = self.client.Transactions.get(\n                self.access_token,\n                start_date=start_date,\n                end_date=end_date,\n                account_ids=[account_id] if account_id else None,\n                offset=offset,\n                count=limit,\n            )\n        except InvalidRequestError:\n            frappe.log_error(\\\"Plaid: Invalid request error\\\")\n            frappe.msgprint(_(\\\"Please check your Plaid client ID and secret values\\\"))\n        except APIError as e:\n            if e.code == \\\"PLANNED_MAINTENANCE\\\":\n                frappe.log_error(\\\"Plaid: Plaid is undergoing maintenance. Please try again later\\\")\n                frappe.throw(_(str(e)), title=_(\\\"Plaid Maintenance\\\"))\n            elif e.code == \\\"RATE_LIMIT_EXCEEDED\\\":\n                frappe.log_error(\\\"Plaid: Rate limit exceeded. Please try again later\\\")\n                frappe.throw(_(str(e)), title=_(\\\"Rate Limit Exceeded\\\"))\n            else:\n                frappe.log_error(\\\"Plaid: Authentication error\\\")\n                frappe.throw(_(str(e)), title=_(\\\"Authentication Failed\\\"))\n        except requests.Timeout:\n            frappe.log_error(\\\"Plaid: Timeout error. Please try again later\\\")\n            frappe.throw(_(\\\"A timeout error occurred\\\"), title=_(\\\"Timeout Error\\\"))\n        except Exception as e:\n            frappe.log_error(\\\"Plaid: Unknown error occurred. Please contact the developer\\\")\n            frappe.throw(_(str(e)), title=_(\\\"Unknown Error\\\"))\n        else:\n            transactions += response[\"transactions\"]\n            if len(transactions) >= response[\"total_transactions\"]:\n                break\n            else:\n                offset += limit\n    return transactions\n", "CodeBleu_score": 33.95711292824106}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        self.auth()\n    except Exception as e:\n        frappe.log_error(str(e))\n        frappe.msgprint(\n            _(\"Plaid: Authentication error. Please check your Plaid client ID and secret values.\")\n        )\n        return\n\n    transactions = []\n    offset = 0\n    while True:\n        try:\n            response = self.client.Transactions.get(\n                self.access_token,\n                {\n                    \"start_date\": start_date,\n                    \"end_date\": end_date,\n                    \"account_ids\": [account_id] if account_id else None,\n                    \"count\": 500,\n                    \"offset\": offset,\n                },\n            )\n        except APIError as e:\n            if e.code == \"PRODUCT_NOT_READY\":\n                frappe.log_error(str(e))\n                frappe.msgprint(\n                    _(\n                        \"Plaid: Transactions are not ready. Please try again later or contact Plaid support.\"\n                    )\n                )\n                return\n            elif e.code == \"INVALID_ACCESS_TOKEN\":\n                frappe.log_error(str(e))\n                frappe.msgprint(\n                    _(\"Plaid: Invalid access token. Please try again or relink your bank account.\")\n                )\n                return\n            else:\n                frappe.log_error(str(e))\n                frappe.throw(str(e))\n        except Exception as e:\n            frappe.log_error(str(e))\n            frappe.throw(str(e))\n\n        transactions += response[\"transactions\"]\n        if len(transactions) < response[\"total_transactions\"]:\n            offset += 500\n        else:\n            break\n\n    return transactions\n", "CodeBleu_score": 34.727989333864016}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    try:\n        # parse response\n        institution_data = json.loads(response)\n\n        # get access token\n        plaid = PlaidConnector()\n        access_token = plaid.get_access_token(token)\n\n        # check if bank exists\n        bank_name = institution_data[\"name\"]\n        bank_id = institution_data[\"institution_id\"]\n        bank = frappe.db.get_value(\"Bank\", {\"bank_id\": bank_id})\n\n        # if bank does not exist, create and insert new bank record\n        if not bank:\n            new_bank = frappe.get_doc(\n                {\n                    \"doctype\": \"Bank\",\n                    \"bank_name\": bank_name,\n                    \"bank_id\": bank_id,\n                    \"access_token\": access_token,\n                }\n            )\n            new_bank.insert()\n        # if bank exists, update access token and save bank record\n        else:\n            frappe.db.set_value(\"Bank\", bank, \"access_token\", access_token)\n            frappe.db.commit()\n\n        # log success\n        frappe.logger().debug(\n            \"Successfully added new bank: \" + bank_name + \" with ID: \" + bank_id\n        )\n\n    except Exception as e:\n        # log error\n        frappe.logger().debug(\n            \"Failed to add new bank with ID: \" + bank_id + \" with error: \" + str(e)\n        )\n\n", "CodeBleu_score": 47.258499325789764}, {"code": "def add_institution(token, response)\n\t\n    try:\n        plaid = PlaidConnector()\n        plaid_access_token = plaid.get_access_token(token, response)\n        institution = plaid.get_institution(plaid_access_token)\n        bank = frappe.get_all(\n            \"Bank\",\n            filters={\"institution_name\": institution[\"institution\"][\"name\"]},\n            fields=[\"name\"],\n        )\n        if not bank:\n            bank = frappe.new_doc(\"Bank\")\n            bank.update(institution)\n            bank.save()\n        else:\n            bank = frappe.get_doc(\"Bank\", bank[0].name)\n            bank.update(institution)\n            bank.save()\n    except Exception as e:\n        frappe.log_error(frappe.get_traceback(), \"add_institution\")\n        frappe.msgprint(e)\n\n", "CodeBleu_score": 45.91280196945822}, {"code": "def add_institution(token, response)\n\t\n    try:\n        plaid = PlaidConnector()\n        plaid.get_access_token(token, response)\n        plaid.get_institution_info()\n\n        if not frappe.db.exists(\\\"Bank\\\", plaid.institution_id):\n            bank = frappe.new_doc(\\\"Bank\\\")\n            bank.bank_name = plaid.institution_name\n            bank.bank_code = plaid.institution_id\n            bank.is_plaid = 1\n            bank.save()\n\n        else:\n            bank = frappe.get_doc(\\\"Bank\\\", plaid.institution_id)\n            bank.plaid_access_token = plaid.access_token\n            bank.save()\n\n        frappe.db.commit()\n\n        return bank\n\n    except ItemError as e:\n        frappe.log_error(frappe.get_traceback(), _(\"Plaid Error\"))\n        frappe.throw(e)\n\n", "CodeBleu_score": 37.71580135945236}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        bank = json.loads(bank)\n        bank_account = json.loads(bank_account)\n        plaid = PlaidConnector()\n        plaid.set_access_token(bank.get(\"plaid_access_token\"))\n        transactions = plaid.get_transactions(\n            bank_account.get(\"integration_id\"),\n            start_date=bank_account.get(\"last_sync_on\"),\n            end_date=today(),\n        )\n        if transactions:\n            new_transactions = []\n            for transaction in transactions:\n                bank_transaction = frappe.db.exists(\n                    \"Bank Transaction\",\n                    {\n                        \"transaction_id\": transaction.get(\"transaction_id\"),\n                        \"bank_account\": bank_account.get(\"name\"),\n                    },\n                )\n                if not bank_transaction:\n                    new_transactions.append(\n                        {\n                            \"doctype\": \"Bank Transaction\",\n                            \"transaction_id\": transaction.get(\"transaction_id\"),\n                            \"transaction_date\": getdate(transaction.get(\"date\")),\n                            \"transaction_type\": transaction.get(\"type\"),\n                            \"amount\": transaction.get(\"amount\"),\n                            \"balance\": transaction.get(\"balance\"),\n                            \"name_on_account\": transaction.get(\"name\"),\n                            \"bank_account\": bank_account.get(\"name\"),\n                            \"reference_number\": transaction.get(\"transaction_id\"),\n                        }\n                    )\n\n            if new_transactions:\n                frappe.get_doc(\n                    {\n                        \"doctype\": \"Bank Transaction\",\n                        \"transactions\": new_transactions,\n                        \"integration_id\": bank_account.get(\"integration_id\"),\n                        \"bank_account\": bank_account.get(\"name\"),\n                    }\n                ).insert()\n\n            bank_account.update({\"last_sync_on\": transactions[-1].get(\"date\")})\n            frappe.get_doc(bank_account).save()\n            frappe.db.commit()\n            return len(new_transactions)\n\n    except Exception:\n        frappe.log_error(frappe.get_traceback())\n        frappe.throw(\n            _(\n                \"There was an error syncing transactions for Bank Account {0}. Please try again later.\"\n            ).format(bank_account.get(\"name\"))\n        )\n\n", "CodeBleu_score": 30.609302860039158}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        plaid = PlaidConnector()\n        last_sync_date = frappe.db.get_single_value(\"Plaid Settings\", \"last_sync_date\")\n        if not last_sync_date:\n            last_sync_date = today()\n        start_date = last_sync_date\n        end_date = add_months(last_sync_date, 1)\n        transactions = plaid.get_transactions(bank, bank_account, start_date, end_date)\n        if transactions:\n            for transaction in transactions:\n                try:\n                    bank_transaction = frappe.get_doc(\n                        {\n                            \"doctype\": \"Bank Transaction\",\n                            \"date\": transaction[\"date\"],\n                            \"amount\": transaction[\"amount\"],\n                            \"transaction_type\": transaction[\"transaction_type\"],\n                            \"description\": transaction[\"description\"],\n                            \"account\": bank_account,\n                            \"reference_no\": transaction[\"reference_no\"],\n                            \"reference_date\": transaction[\"reference_date\"],\n                            \"bank\": bank,\n                        }\n                    )\n                    bank_transaction.insert()\n                    add_tag(\n                        \"Bank Transaction\",\n                        bank_transaction.name,\n                        transaction[\"transaction_type\"],\n                        transaction[\"amount\"],\n                    )\n                    frappe.db.set_value(\n                        \"Plaid Settings\", \"Plaid Settings\", \"last_sync_date\", transaction[\"date\"]\n                    )\n                except frappe.exceptions.DuplicateEntryError:\n                    frappe.log_error(\n                        \"Bank Transaction already exists for reference_no {0} and date {1}\".format(\n                            transaction[\"reference_no\"], transaction[\"date\"]\n                        )\n                    )\n                except Exception:\n                    frappe.log_error(\"Plaid Link Error\")\n        else:\n            frappe.log_error(\"No transactions found for the specified dates\")\n    except Exception:\n        frappe.log_error(\"Plaid Link Error\")\n\n", "CodeBleu_score": 29.294528134701665}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        plaid = PlaidConnector()\n        bank = frappe.get_doc(\"Bank\", bank)\n        bank_account = frappe.get_doc(\"Bank Account\", bank_account)\n        transactions = plaid.get_transactions(\n            bank.plaid_access_token, bank_account.integration_id\n        )\n        if transactions:\n            last_integration_date = frappe.db.get_value(\n                \"Bank Account\", bank_account.name, \"last_integration_date\"\n            )\n            if last_integration_date:\n                start_date = last_integration_date\n            else:\n                start_date = frappe.utils.add_days(today(), -30)\n            end_date = frappe.utils.add_days(today(), 1)\n            if transactions.get(\"item\", []):\n                for transaction in transactions.get(\"item\"):\n                    if transaction.get(\"date\") and getdate(transaction.get(\"date\")) > getdate(\n                        start_date\n                    ):\n                        if getdate(transaction.get(\"date\")) < getdate(end_date):\n                            end_date = transaction.get(\"date\")\n            new_transactions = []\n            for transaction in transactions.get(\"item\"):\n                if getdate(transaction.get(\"date\")) > getdate(start_date):\n                    if getdate(transaction.get(\"date\")) < getdate(end_date):\n                        new_transactions.append(transaction)\n            if new_transactions:\n                for transaction in new_transactions:\n                    try:\n                        bank_transaction = frappe.get_doc(\n                            {\n                                \"doctype\": \"Bank Transaction\",\n                                \"bank\": bank.name,\n                                \"account\": bank_account.name,\n                                \"transaction_id\": transaction.get(\"transaction_id\"),\n                                \"transaction_date\": transaction.get(\"date\"),\n                                \"description\": transaction.get(\"name\"),\n                                \"amount\": transaction.get(\"amount\"),\n                                \"balance\": transaction.get(\"balance\"),\n                                \"type\": transaction.get(\"type\"),\n                                \"category\": transaction.get(\"category\"),\n                                \"iso_currency_code\": transaction.get(\"iso_currency_code\"),\n                                \"unofficial_currency_code\": transaction.get(\n                                    \"unofficial_currency_code\"\n                                ),\n                                \"settled\": sbool(transaction.get(\"settled\")),\n                                \"pending\": sbool(", "CodeBleu_score": 29.78381468268126}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    uri = f\\\"{self.api_endpoint}/{entity}?minorversion=65&startposition=1&maxresults=1000\\\"\n    headers = {\n\t\t\\\"Accept\\\": \\\"application/json\\\",\n\t\t\\\"Authorization\\\": f\\\"Bearer {self.access_token}\\\"\n\t}\n\ttry:\n\t\tresponse = requests.get(uri, headers=headers)\n\t\tresponse.raise_for_status()\n\t\tentries = response.json()\n\t\tfor entry in entries[\\\"QueryResponse\\\"][entity]:\n\t\t\tself._preprocess_entry(entry)\n\t\t\tself._save_entry(entry)\n\t\twhile entries[\\\"QueryResponse\\\"][entity]:\n\t\t\turi = entries[\\\"QueryResponse\\\"][entity][-1][\\\"NextPageUri\\\"]\n\t\t\tresponse = requests.get(uri, headers=headers)\n\t\t\tresponse.raise_for_status()\n\t\t\tentries = response.json()\n\t\t\tfor entry in entries[\\\"QueryResponse\\\"][entity]:\n\t\t\t\tself._preprocess_entry(entry)\n\t\t\t\tself._save_entry(entry)\n\texcept Exception as e:\n\t\tself._log_error(e, entity)\n\n\n\n", "CodeBleu_score": 30.923678379086112}, {"code": "def _migrate_entries(self, entity)\n\t\n    self._log_info(f\\\"Migrating {entity} entries from QuickBooks\\\")\n    query_uri = f\\\"{self.api_endpoint}/{entity}?minorversion=33&limit=1000&startposition={self.start_position}\\\"\n    try:\n        response = self.oauth.get(query_uri)\n        response_json = response.json()\n        self.total_count = response_json[\\\"totalCount\\\"]\n        self._migrate_entries_batch(response_json, entity)\n    except Exception as e:\n        self._log_error(e, query_uri)\n        return\n    self.start_position += 1000\n    if self.start_position < self.total_count:\n        self._migrate_entries(entity)\n    else:\n        self._log_info(f\\\"Migrated {self.total_count} {entity} entries from QuickBooks\\\")\n\t# end: auto-generated types\n\n\tdef __init__(self, *args, **kwargs):\n\t\tsuper().__init__(*args, **kwargs)\n\t\tself.oauth = OAuth2Session(client_id=self.client_id, redirect_uri=self.redirect_url, scope=self.scope)\n\t\tif not self.authorization_url and self.authorization_endpoint:\n\t\t\tself.authorization_url = self.oauth.authorization_url(self.authorization_endpoint)[0]\n\n\tdef on_update(self):\n\t\tif self.company:\n\t\t\t# We need a Cost Center corresponding to the selected erpnext Company\n\t\t\tself.default_cost_center = frappe.db.get_value(\\\"Company\\\", self.company, \\\"cost_center\\\")\n\t\t\tcompany_warehouses = frappe.get_all(\\\"Warehouse\\\", filters={\\\"company\\\": self.company, \\\"is_group\\\": 0})\n\t\t\tif company_warehouses:\n\t\t\t\tself.default_warehouse = company_warehouses[0].name\n\t\tif self.authorization_endpoint:\n\t\t\tself.authorization_url = self.oauth.authorization_url(self.authorization_endpoint)[0]\n\n\t@frappe.whitelist()\n\tdef migrate(self):\n\t\tfrappe.enqueue_doc(\\\"QuickBooks Migrator\\\", \\\"Quick", "CodeBleu_score": 29.994718892897797}, {"code": "def _migrate_entries(self, entity)\n\t\n    query_uri = f\\\"{self.api_endpoint}/{entity}?minorversion=4&startposition=1&maxresults=1000&include=totalCount\\\"\n    if entity == \\\"Account\\\":\n        query_uri += f\\\"&minorversion=4&startposition=1&maxresults=1000&include=totalCount\\\"\n    if entity == \\\"TaxRate\\\":\n        query_uri += f\\\"&minorversion=4&startposition=1&maxresults=1000&include=totalCount\\\"\n    if entity == \\\"TaxCode\\\":\n        query_uri += f\\\"&minorversion=4&startposition=1&maxresults=1000&include=totalCount\\\"\n    if entity == \\\"Preferences\\\":\n        query_uri += f\\\"&minorversion=4&startposition=1&maxresults=1000&include=totalCount\\\"\n    if entity == \\\"JournalEntry\\\":\n        query_uri += f\\\"&minorversion=4&startposition=1&maxresults=1000&include=totalCount\\\"\n    if entity == \\\"Purchase\\\":\n        query_uri += f\\\"&minorversion=4&startposition=1&maxresults=1000&include=totalCount\\\"\n    if entity == \\\"Deposit\\\":\n        query_uri += f\\\"&minorversion=4&startposition=1&maxresults=1000&include=totalCount\\\"\n    if entity == \\\"Invoice\\\":\n        query_uri += f\\\"&minorversion=4&startposition=1&maxresults=1000&include=totalCount\\\"\n    if entity == \\\"CreditMemo\\\":\n        query_uri += f\\\"&minorversion=4&startposition=1&maxresults=1000&include=totalCount\\\"\n    if entity == \\\"SalesReceipt\\\":\n        query_uri += f\\\"&minorversion=4&startposition=1&maxresults=1000&include=totalCount\\\"\n    if entity == \\\"RefundReceipt\\\":\n        query_uri += f\\\"&minorversion=4&startposition=1&maxresults=1000&include=totalCount\\\"\n    if entity == \\\"Bill\\\":\n        query_uri += f\\\"&minorversion=4&startposition=1&maxresults=1000&include=totalCount\\\"\n    if entity == \\\"VendorCredit\\\":\n        query_", "CodeBleu_score": 15.4941668287093}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        if not frappe.db.exists(\n            {\"doctype\": \"Sales Invoice\", \"quickbooks_id\": invoice[\"Id\"], \"company\": self.company}\n        ):\n            invoice_dict = {\n                \"doctype\": \"Sales Invoice\",\n                \"quickbooks_id\": invoice[\"Id\"],\n                \"company\": self.company,\n                \"posting_date\": invoice[\"TxnDate\"],\n                \"customer\": self._get_customer_name_by_id(invoice[\"CustomerRef\"][\"value\"]),\n                \"due_date\": invoice[\"DueDate\"],\n                \"debit_to\": self.accounts_payable_account,\n                \"currency\": invoice[\"CurrencyRef\"][\"value\"],\n                \"conversion_rate\": invoice[\"ExchangeRate\"],\n                \"set_posting_time\": 1,\n                \"is_pos\": 0,\n                \"taxes_and_charges\": self.taxes_and_charges,\n                \"taxes\": [],\n                \"items\": [],\n                \"quickbooks_sync_status\": \"Not Synced\",\n            }\n            if \"PrivateNote\" in invoice:\n                invoice_dict[\"quickbooks_private_note\"] = invoice[\"PrivateNote\"]\n            if \"TotalAmt\" in invoice:\n                invoice_dict[\"total\"] = invoice[\"TotalAmt\"]\n            if \"ApplyTaxAfterDiscount\" in invoice:\n                invoice_dict[\"apply_discount_on\"] = \"Grand Total\" if invoice[\"ApplyTaxAfterDiscount\"] else \"Net Total\"\n            if \"Line\" in invoice:\n                for line in invoice[\"Line\"]:\n                    if line[\"DetailType\"] == \"SalesItemLineDetail\":\n                        item_dict = {\n                            \"item_code\": self._get_item_name_by_id(line[\"SalesItemLineDetail\"][\"ItemRef\"][\"value\"]),\n                            \"qty\": line[\"SalesItemLineDetail\"][\"Qty\"],\n                            \"rate\": line[\"SalesItemLineDetail\"][\"UnitPrice\"],\n                            \"amount\": line[\"SalesItemLineDetail\"][\"LineAmount\"],\n                            \"conversion_factor\": 1,\n                            \"uom\": self._get_uom_name_by_id(line[\"SalesItemLineDetail\"][\"UnitOfMeasureRef\"][\"value\"]),\n                        }\n                        if \"ItemBasedExpenseLineDetail\" in line[\"SalesItemLineDetail\"]:\n                            item_based_expense_line_detail = line[\"SalesItemLineDetail\"][\"ItemBasedExpenseLineDetail\"]\n                            item_dict[\"expense_account\"] =", "CodeBleu_score": 26.399047705164904}, {"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        if invoice[\"DocNumber\"]:\n            qb_id = invoice[\"DocNumber\"]\n        else:\n            qb_id = self._generate_id(invoice)\n        if not frappe.db.exists(\n            {\"doctype\": \"Sales Invoice\", \"quickbooks_id\": qb_id, \"company\": self.company}\n        ):\n            if (\n                frappe.db.exists(\n                    {\n                        \"doctype\": \"Journal Entry\",\n                        \"quickbooks_id\": qb_id,\n                        \"company\": self.company,\n                    }\n                )\n                or self._get_linked_transactions(invoice, \"StatementCharge\")\n                or self._get_linked_transactions(invoice, \"ReimburseCharge\")\n            ):\n                self._save_journal_entry(invoice)\n            else:\n                self._save_sales_invoice(invoice)\n    except Exception as e:\n        self._log_error(e, invoice)\n\n", "CodeBleu_score": 36.936901512039}, {"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        if not frappe.db.exists(\n            {\"doctype\": \"Sales Invoice\", \"quickbooks_id\": invoice[\"Id\"], \"company\": self.company}\n        ):\n            if self.is_sync_charges_from_quickbooks:\n                self._save_invoice_as_journal_entry(invoice)\n            else:\n                self._save_invoice_as_sales_invoice(invoice)\n    except Exception as e:\n        self._log_error(e, invoice)\n\n", "CodeBleu_score": 28.24703158512909}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    from datetime import timedelta\n    from frappe.utils import add_days, getdate, add_months, add_years\n    from erpnext.stock.doctype.serial_no.serial_no import get_serial_nos\n    from erpnext.stock.doctype.batch.batch import get_batch_no\n\n    if not sales_person:\n        sales_person = self.owner\n\n    if self.periodicity == \"Yearly\":\n        delta = timedelta(days=365)\n    elif self.periodicity == \"Half Yearly\":\n        delta = timedelta(days=182)\n    elif self.periodicity == \"Quarterly\":\n        delta = timedelta(days=91)\n    elif self.periodicity == \"Monthly\":\n        delta = timedelta(days=30)\n    elif self.periodicity == \"Weekly\":\n        delta = timedelta(days=7)\n    elif self.periodicity == \"Random\":\n        delta = timedelta(days=365)\n\n    schedule_list = []\n    current_date = start_date\n    while current_date <= end_date:\n        schedule_list.append(current_date)\n        if self.periodicity == \"Random\":\n            current_date = add_days(current_date, random.randint(1, 365))\n        else:\n            current_date = add_days(current_date, delta.days)\n\n    if self.periodicity == \"Monthly\":\n        schedule_list = [\n            getdate(add_months(d, i)) for d in schedule_list for i in range(0, 12)\n        ]\n    elif self.periodicity == \"Quarterly\":\n        schedule_list = [\n            getdate(add_months(d, i * 3)) for d in schedule_list for i in range(0, 4)\n        ]\n    elif self.periodicity == \"Half Yearly\":\n        schedule_list = [\n            getdate(add_months(d, i * 6)) for d in schedule_list for i in range(0, 2)\n        ]\n    elif self.periodicity == \"Yearly\":\n        schedule_list = [getdate(add_years(d, i)) for d in schedule_list for i in range(0, 1)]\n\n    schedule_list = [d for d in schedule_list if d not in get_", "CodeBleu_score": 26.171689164585914}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    import datetime\n\n    schedule_list = []\n    if no_of_visit == 1:\n        schedule_list.append(start_date)\n    else:\n        if no_of_visit > 1:\n            days_in_period = {\n                \"Weekly\": 7,\n                \"Monthly\": 30,\n                \"Quarterly\": 91,\n                \"Half Yearly\": 182,\n                \"Yearly\": 365,\n            }\n            diff = date_diff(end_date, start_date) + 1\n            no_of_visits = cint(diff / days_in_period[self.periodicity])\n            if no_of_visits < no_of_visit:\n                no_of_visits = no_of_visit\n            interval = diff / no_of_visits\n            if interval > 7:\n                interval = 7\n            if interval < 1:\n                interval = 1\n            for i in range(no_of_visits):\n                schedule_list.append(add_days(start_date, i * interval))\n            if no_of_visit > len(schedule_list):\n                for i in range(no_of_visit - len(schedule_list)):\n                    schedule_list.append(add_days(end_date, i * interval))\n    schedule_list = [\n        frappe.utils.get_datetime(d) if isinstance(d, str) else d for d in schedule_list\n    ]\n    schedule_list = [\n        d if not d.date() in get_holiday_list_for_employee(sales_person) else None\n        for d in schedule_list\n    ]\n    schedule_list = [d for d in schedule_list if d]\n    return schedule_list\n\n", "CodeBleu_score": 35.40725710162806}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    if start_date and end_date and no_of_visit:\n        # Get the number of days between the start and end date\n        diff = date_diff(end_date, start_date) + 1\n        # Get the number of days between each visit\n        days_in_period = {\n            \"Weekly\": 7,\n            \"Monthly\": 30,\n            \"Quarterly\": 91,\n            \"Half Yearly\": 182,\n            \"Yearly\": 365,\n        }\n        period = days_in_period[self.periodicity]\n        # Get the number of visits\n        no_of_visits = cint(diff / period)\n        # Get the interval between visits\n        interval = cint(diff / no_of_visits)\n        # Get the first visit date\n        date = start_date\n        # Get the sales person's holiday list\n        holiday_list = get_holiday_list_for_employee(sales_person)\n        # Get the sales person's holidays\n        holidays = frappe.db.sql(\n            \"\"\"select holiday_date from `tabHoliday` where parent=%s\"\"\",\n            (holiday_list),\n            as_dict=True,\n        )\n        holidays = [cstr(i.holiday_date) for i in holidays]\n        # Add the first visit date to the schedule\n        schedule_list.append(date)\n        # Iterate to add the next visit dates to the schedule\n        for i in range(no_of_visit - 1):\n            # Get the next visit date\n            date = add_days(date, interval)\n            # Check if the next visit date is a holiday\n            while date in holidays:\n                # If the next visit date is a holiday, add the next visit date to the schedule\n                schedule_list.append(date)\n                # Get the next visit date\n                date = add_days(date, interval)\n            # Add the next visit date to the schedule\n            schedule_list.append(date)\n    return schedule_list\n\n", "CodeBleu_score": 34.20075333007071}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t\n/**\n * If the request is ajax, return a JSON response.\n */\n       if (request()->ajax()) {\n           return response()->json([\n               'status'    => 'success',\n               'message'   => trans($this->messages['general']),\n               'data'      => $data,\n           ]);\n       }\n\n/**\n * If the request is not ajax, return an HTML response.\n */\n       return response()->view($view, $data)->header('Content-Type', 'text/html');\n   }", "CodeBleu_score": 23.755801894930396}, {"code": "<?\n   public function response($view, $data = []){\n\t", "CodeBleu_score": 5.908764367816092}, {"code": "<?\n   public function response($view, $data = []){\n\t\n/**\n * If the request is for JSON, we will return a JSON response with the status, message, and data.\n */\n        if (request()->wantsJson()) {\n            return response()->json([\n                'status'  => 'success',\n                'message' => trans($this->messages['general']),\n                'data'    => $data,\n            ]);\n        }\n\n/**\n * If the request is for HTML, we will return a JSON response with the status, message, and data.\n */\n        return response()->json([\n            'status'  => 'success',\n            'message' => trans($this->messages['general']),\n            'data'    => $data,\n        ]);\n    }", "CodeBleu_score": 22.831861280769196}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request, 'user');\nforeach ($contacts as $contact) {\ntry {\n$this->dispatch(new DeleteContact($contact));\n} catch (\\Exception $e) {\nflash($e->getMessage())->error()->important();\n}\n}\n}", "CodeBleu_score": 90.95589027625941}, {"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request, 'user');\n\nforeach ($contacts as $contact) {\ntry {\n$this->dispatch(new DeleteContact($contact));\n} catch (\\Exception $e) {\nflash($e->getMessage())->error()->important();\n}\n}\n}", "CodeBleu_score": 90.95589027625941}, {"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request, 'user');\n\nforeach ($contacts as $contact) {\ntry {\n$this->dispatch(new DeleteContact($contact));\n} catch (\\Exception $e) {\nflash($e->getMessage())->error()->important();\n}\n}\n}", "CodeBleu_score": 90.95589027625941}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t$transactions = $this->getSelectedRecords($request, 'transactions');\n\nforeach ($transactions as $transaction) {\ntry {\n$this->dispatch(new DeleteTransaction($transaction));\n} catch (\\Exception $e) {\nflash($e->getMessage())->error()->important();\n}\n}\n}", "CodeBleu_score": 88.10842870618548}, {"code": "<?\npublic function deleteTransactions($request){\n\t$transactions = $this->getSelectedRecords($request, 'transactions');\n\nforeach ($transactions as $transaction) {\ntry {\n$this->dispatch(new DeleteTransaction($transaction));\n} catch (\\Exception $e) {\nflash($e->getMessage())->error()->important();\n}\n}\n}", "CodeBleu_score": 88.10842870618548}, {"code": "<?\npublic function deleteTransactions($request){\n\t$transactions = $this->getSelectedRecords($request, 'transactions');\n\nforeach ($transactions as $transaction) {\ntry {\n$this->dispatch(new DeleteTransaction($transaction));\n} catch (\\Exception $e) {\nflash($e->getMessage())->error()->important();\n}\n}\n}", "CodeBleu_score": 88.10842870618548}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\tif (is_null($this->request_class) || !is_subclass_of($this->request_class, FormRequest::class)) {\nreturn;\n}\n\nforeach ($this->getData() as $row) {\n$request = new $this->request_class($row);\n\n$rules = $this->prepareRules($this->rules());\n\n$validator->after(function ($validator) use ($request, $rules) {\n\nif (empty($rules)) {\nreturn;\n\n}\n\ntry {\n\n$validator->validate($request->all(), $rules);\n\n} catch (ValidationException $e) {\n\n$errors = $e->errors();\n\nforeach ($errors as $field => $messages) {\n\nforeach ($messages as $message) {\n\n$validator->errors()->add($field, $message);\n\n}\n\n}\n\n}\n\n});\n\n}\n\n}", "CodeBleu_score": 40.81740198612777}, {"code": "<?\npublic function withValidator($validator){\n\tif (! $this->request_class) {\nreturn;\n}\n\nif (! $this->request_class instanceof FormRequest) {\nreturn;\n}\n\nforeach ($this->rows as $row) {\n$request = new $this->request_class($row);\n$request->setUserResolver(function () {\nreturn $this->user;\n});\n$request->setContainer($this->container);\n$request->setRedirector($this->redirector);\n$request->setRouteResolver(function () {\nreturn $this->route;\n});\n$request->setValidator($validator);\n$request->setContainer($this->container);\n$request->initialize($this->getCustomizedRequestParameters($request));\n$request->setJson($this->json);\n$request->setFiles($this->files);\n\n$rules = $this->prepareRules($request->rules());\n\n$validator->after(function ($validator) use ($request) {\n$this->validateRow($validator, $request);\n});\n\n$request->validate($rules);\n}\n}", "CodeBleu_score": 36.595273704339995}, {"code": "<?\npublic function withValidator($validator){\n\t$request_class = $this->getRequestClass();\nif (!$request_class || !is_subclass_of($request_class, FormRequest::class)) {\nreturn;\n}\n\nforeach ($this->getRows() as $row) {\n$request = new $request_class($row, $this->user);\n$rules = $request->rules();\n$rules = $this->prepareRules($rules);\n$validator->after(function ($validator) use ($request, $rules) {\ntry {\nValidator::make($request->all(), $rules)->validate();\n} catch (ValidationException $e) {\n$validator->errors()->add('row', $e->errors());\n}\n});\n}\n}", "CodeBleu_score": 38.18298022054665}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif (! $this instanceof ShouldUpdate) {\nreturn;\n}\n\n$model = $this->getModelInstance($arguments[0]);\nif ($model instanceof Model) {\n$this->model = $model;\n}\n\n$request = $this->getRequestInstance($arguments[1]);\nif ($request instanceof Request) {\n$this->request = $request;\n}\n\nif ($this instanceof HasOwner) {\n$this->setOwner();\n}\n\nif ($this instanceof HasSource) {\n$this->setSource();\n}\n}", "CodeBleu_score": 62.93543738007957}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif (! $this instanceof ShouldUpdate) {\nreturn;\n}\n\n$model = $this->getModelInstance($arguments[0]);\nif ($model instanceof Model) {\n$this->model = $model;\n}\n\n$request = $this->getRequestInstance($arguments[1]);\nif ($request instanceof Request) {\n$this->request = $request;\n}\n}", "CodeBleu_score": 67.30052018817958}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif (! $this instanceof ShouldUpdate) {\nreturn;\n}\n\n$model = $arguments[0];\nif ($model instanceof Model) {\n$this->model = $model;\n}\n\n$request = $this->getRequestInstance($arguments[1]);\nif ($request instanceof Request) {\n$this->request = $request;\n}\n}", "CodeBleu_score": 69.98210754784743}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t return $this->scopeApplySearch($query)->scopeSort($sort)->scopePaginate($query);\n }", "CodeBleu_score": 11.75183634072915}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t $request = request();\n $sort = $request->input('sort', $sort);\n $sort_order = $request->input('sort_order', 'asc');\n $search = $request->input('search', '');\n\n $query = $this->applySearch($query, $search);\n $query = $this->applySorting($query, $sort, $sort_order);\n\n if (request('json_response') !== 'true' && !request('api')) {\n $limit = $request->input('limit', 20);\n return $query->paginate($limit);\n } else {\n return $query->get();\n }\n }", "CodeBleu_score": 46.59093545677003}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t return $query->search(request('s'))\n ->applySort($sort)\n ->paginate(request('limit', setting('general.list_limit', 25)));\n }", "CodeBleu_score": 16.39364930695711}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t$totals = [\n'open' => 0,\n'overdue' => 0,\n];\n\nif ($model->status != 'paid') {\n$payments = $model->transactions()\n->where('type', 'payment')\n->where('status', 'paid')\n->where('amount', '>', 0)\n->get();\n\n$totals['open'] = $payments->sum('amount');\n\n$totals['overdue'] = $model->balance;\n\nif ($model->is_overdue) {\n$totals['overdue'] += $payments->sum('amount');\n}\n}\n\nreturn $totals;\n}", "CodeBleu_score": 33.13543421904658}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t$model_name = get_class($model);\n\n$total = $model->total;\n$paid = $model->paid;\n$due = $model->due;\n\nif ($model->status == 'paid') {\nreturn [\n'open' => 0,\n'overdue' => 0,\n];\n}\n\n$transactions = $model->transactions()->where('payment', '>', 0)->get();\n$total_paid = 0;\n\nforeach ($transactions as $transaction) {\n$total_paid += $transaction->payment;\n}\n\n$open = $total - $total_paid;\n$overdue = 0;\n\nif ($model->status == 'partial' && $model->due > 0) {\n$overdue = $open - $model->due;\n}\n\nreturn [\n'open' => $open,\n'overdue' => $overdue,\n];\n}", "CodeBleu_score": 42.13356302424209}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t$open = $model->total;\n$overdue = 0;\n\nif ($model->status != 'paid') {\n$payments = $model->payments()->where('amount', '>', 0)->get();\n\nforeach ($payments as $payment) {\n$open = bcsub($open, $payment->amount, $payment->currency->precision);\n}\n\nif ($model->status == 'partial') {\n$overdue = bcsub($model->total, $open, $model->currency->precision);\n} elseif ($model->status == 'overdue') {\n$overdue = $open;\n}\n}\n\nreturn [\n'open' => $open,\n'overdue' => $overdue,\n];\n}", "CodeBleu_score": 39.72725006231514}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\n/**\n * Determine the proper page number.\n */\n$page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n/**\n * Get the total number of items for the paginator.\n */\n$total = $this->toBase()->getCountForPagination();\n\n/**\n * Get the proper per-page limit.\n */\nif (is_null($perPage)) {\n$perPage = $this->model->getPerPage();\n}\n\n/**\n * Paginate the query and return the paginator instance.\n */\n$items = ($total) ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n\nreturn new LengthAwarePaginator($items, $total, $perPage, $page, [\n'path' => Paginator::resolveCurrentPath(),\n'pageName' => $pageName,\n]);\n}", "CodeBleu_score": 71.87423565408935}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\n/**\n * If we have an exact page number, we can just return the results and the count from the query.\n */\nif ($page !== null) {\n\nreturn $this->forPage($page, $perPage === null ? 15 : $perPage)->get($columns);\n}\n\n$total = $this->toBase()->getCountForPagination();\n\n$items = $total ? $this->forPage($page = $page ?: Paginator::resolveCurrentPage($pageName), $perPage === null ? 15 : $perPage)->get($columns) : collect();\n\nreturn new LengthAwarePaginator($items->forPage($page, $perPage), $total, $perPage, $page, [\n'path' => Paginator::resolveCurrentPath(),\n'pageName' => $pageName,\n]);\n}", "CodeBleu_score": 61.47278542202492}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page ?: Paginator::resolveCurrentPage($pageName);\n$perPage = $perPage ?: $this->model->getPerPage();\n$total = $this->toBase()->getCountForPagination();\n$results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\nreturn new LengthAwarePaginator($results, $total, $perPage, $page, [\n'path' => Paginator::resolveCurrentPath(),\n'pageName' => $pageName,\n]);\n}", "CodeBleu_score": 80.06504434990597}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t$reconciliations = $this->getRecords($request);\n\nforeach ($reconciliations as $reconciliation) {\n$reconciliation->status = 'reconciled';\n$reconciliation->save();\n\n$transactions = Transaction::where('account_id', $reconciliation->account_id)\n->where('reconciled', 0)\n->where('date', '>=', $reconciliation->date)\n->where('date', '<=', $reconciliation->reconciled_date)\n->get();\n\nforeach ($transactions as $transaction) {\n$transaction->reconciled = 1;\n$transaction->save();\n}\n}\n}", "CodeBleu_score": 51.73997287496738}, {"code": "<?\npublic function reconcile($request){\n\t$reconciliations = Reconciliation::whereIn('id', $request->get('ids'))->get();\n\nforeach ($reconciliations as $reconciliation) {\n$reconciliation->status = 'reconciled';\n$reconciliation->save();\n\n$transactions = Transaction::where('reconciliation_id', $reconciliation->id)->where('reconciled', 0)->get();\n\nforeach ($transactions as $transaction) {\n$transaction->reconciled = 1;\n$transaction->save();\n}\n}\n}", "CodeBleu_score": 36.901099620467605}, {"code": "<?\npublic function reconcile($request){\n\t\n$reconciliations = Reconciliation::where('id', '=', $request->id)->get();\n\nforeach ($reconciliations as $reconciliation) {\n\n$reconciliation->status = 'reconciled';\n$reconciliation->save();\n\n$transactions = Transaction::where('account_id', '=', $reconciliation->account_id)\n->where('date', '>=', $reconciliation->date)\n->where('date', '<=', $reconciliation->reconciled_date)\n->where('reconciled', '=', 0)\n->get();\n\nforeach ($transactions as $transaction) {\n$transaction->reconciled = 1;\n$transaction->save();\n}\n}\n\nreturn response()->json([\n'success' => true,\n'message' => trans('bulk_actions.message.reconciled', ['name' => trans_choice('general.reconciliations', 2)]),\n], 200);\n}", "CodeBleu_score": 38.89493040687423}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t$this->invitation = $this->getInvitations()->first();\n\nif ($this->invitation) {\n$this->deleteInvitations();\n}\n\n$this->invitation = $this->createInvitation();\n\ntry {\n$this->sendInvitation();\n} catch (TransportException $e) {\nthrow new Exception($e->getMessage());\n}\n\nreturn $this->invitation;\n}", "CodeBleu_score": 19.253913963313273}, {"code": "<?\npublic function handle(): UserInvitation{\n\t$this->user->load('invitations');\n\n$this->deleteExistingInvitations();\n\n$this->invitation = $this->createInvitation();\n\ntry {\n$this->sendInvitationNotification();\n} catch (TransportException $e) {\nthrow new Exception('Invitation email could not be sent.');\n}\n\nreturn $this->invitation;\n}", "CodeBleu_score": 19.163150958749533}, {"code": "<?\npublic function handle(): UserInvitation{\n\t\n$this->user->load('invitations');\n\nforeach ($this->user->invitations as $invitation) {\n$invitation->delete();\n}\n\n$invitation = UserInvitation::create([\n'user_id' => $this->user->id,\n'token' => Str::random(64),\n]);\n\ntry {\n$this->send($invitation);\n} catch (TransportException $e) {\nthrow new Exception($e->getMessage());\n}\n\nreturn $invitation;\n}", "CodeBleu_score": 30.05636569349469}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\tif ($this->model->is_reconciled) {\nthrow new \\Exception(__('The transaction has been reconciled and cannot be updated.'));\n} elseif ($this->model->is_transfer) {\nthrow new \\Exception(__('The transaction is a transfer and cannot be updated.'));\n}\n}", "CodeBleu_score": 29.178970439099437}, {"code": "<?\npublic function authorize(): void{\n\tif ($this->model->is_reconciled) {\nthrow new AuthorizationException('You are not allowed to update a reconciled transaction.');\n}\n\nif ($this->model->is_transfer) {\nthrow new AuthorizationException('You are not allowed to update a transfer transaction.');\n}\n}", "CodeBleu_score": 25.889779124688406}, {"code": "<?\npublic function authorize(): void{\n\tif ($this->model->is_reconciled) {\nthrow new AuthorizationException('Transaction has been reconciled.');\n}\n\nif ($this->model->is_transfer) {\nthrow new AuthorizationException('Transfer transactions cannot be modified.');\n}\n}", "CodeBleu_score": 26.38216890633169}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t//        if (tableName.contains(\\\"_\\\")) {\n//            return false;\n        } else {\n            return true;\n        }\n    }", "CodeBleu_score": 3.77849890280194}, {"code": "public boolean doTableFilter(String tableName){\n\t//        if (tableName.startsWith(\\\"t_\\\")) {\n//            return true;\n//        } else {\n//            return false;\n//        }\n        return true;\n    }", "CodeBleu_score": 1.8407230524195266}, {"code": "public boolean doTableFilter(String tableName){\n\t", "CodeBleu_score": 1.5687583116229795}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\nmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\nreturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.87618266366563}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\nmapperScannerConfigurer.setBasePackage(\\\"com.jsh.erp.datasource.mappers\\\");\nreturn mapperScannerConfigurer;\n}", "CodeBleu_score": 61.729232563902784}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\nmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\nreturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.87618266366563}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\tList<Account> dataList = null;\n\ttry {\n\t\tdataList = accountService.findBySelect();\n\t} catch(Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\treturn returnJson(ErpInfo.buildErrorResponse(\"2\", e.getMessage()));\n\t}\n\treturn returnJson(ErpInfo.buildSuccessResponse(dataList));\n}", "CodeBleu_score": 26.87180349624341}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tlogger.info(\"Execute findBySelect\");\ntry {\nList<Account> dataList = accountService.findBySelect();\nList<Map<String, Object>> mapList = new ArrayList<>();\nfor (Account e : dataList) {\nMap<String, Object> map = new HashMap<>();\nmap.put(\"id\", e.getId());\nmap.put(\"value\", e.getName());\nmapList.add(map);\n}\nreturn returnJson(mapList, ErpInfo.OK.name, ErpInfo.OK.code);\n} catch(Exception e) {\nlogger.error(StringUtil.getException(e));\nreturn returnJson(ErpInfo.ERROR.name, ErpInfo.ERROR.code);\n}\n}", "CodeBleu_score": 40.58006705066891}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\tList<Account> dataList = null;\n\ttry {\n\t\tdataList = accountService.findBySelect();\n\t} catch(Exception e){\n\t\tlogger.error(StringUtil.getException(e));\n\t\treturn returnJson(ErpInfo.ERROR_DATA_NOT_EXIST_CODE, ErpInfo.ERROR_DATA_NOT_EXIST_MSG);\n\t}\n\treturn returnJson(ErpInfo.OK_CODE, ErpInfo.OK_MSG, dataList);\n}", "CodeBleu_score": 23.077912481509415}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t_\n\n\nreturnJson(map, ErpInfo.OK.name, ErpInfo.OK.code);\n}", "CodeBleu_score": 11.483983909038573}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t_\n Map<String, Object> objectMap = new HashMap<>();\n try {\n List<AccountVo4List> dataList = accountService.listWithBalance(name, serialNo, (currentPage - 1) * pageSize, pageSize);\n int total = accountService.listWithBalanceCount(name, serialNo);\n objectMap.put(\"total\", total);\n // Populate the response object with the list of accounts and the total count.\n objectMap.put(\"rows\", dataList);\n objectMap.put(\"code\", 200);\n objectMap.put(\"status\", \"OK\");\n } catch (Exception e) {\n logger.error(e.getMessage(), e);\n objectMap.put(\"code\", 500);\n objectMap.put(\"status\", \"ERROR\");\n objectMap.put(\"message\", \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\");\n }\n return new BaseResponseInfo(objectMap);\n }", "CodeBleu_score": 40.433647626762834}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t", "CodeBleu_score": 10.89778041758137}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tMap<String, Object> map = new HashMap<>();\n\t\tList<AccountVo4List> list = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n\t\tmap.put(\"rows\", list);\n\t\tres.code = 200;\n\t\tres.data = map;\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 74.38924497785887}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nMap<String, Object> map = new HashMap<>();\nAccountVo4Statistics accountVo4Statistics = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\nmap.put(\"accountVo4Statistics\", accountVo4Statistics);\nres.code = 200;\nres.data = map;\n} catch(Exception e) {\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 74.08297372637524}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\n    Map<String, Object> map = new HashMap<>();\n    AccountVo4Statistics accountVo4Statistics = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n    map.put(\"accountVo4Statistics\", accountVo4Statistics);\n    res.code = 200;\n    res.data = map;\n} catch(Exception e) {\n    logger.error(e.getMessage(), e);\n    res.code = 500;\n    res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 75.13857357968583}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n try {\n AccountHeadVo4ListEx ah = accountHeadService.getDetailByNumber(billNo);\n res.code = 200;\n res.data = ah;\n } catch (Exception e) {\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.msg = \"Fetch data failed\";\n }\n return res;\n }", "CodeBleu_score": 48.85523719415104}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n try {\n AccountHeadVo4ListEx ah = accountHeadService.findByAll(billNo, request);\n res.code = 200;\n res.data = ah;\n } catch (Exception e) {\n logger.error(\"\u5f02\u5e38\u7801[{}], \u5f02\u5e38\u63d0\u793a[{}], \u5f02\u5e38[{}]\",\n ExceptionConstants.DATA_READ_FAIL_CODE, ExceptionConstants.DATA_READ_FAIL_MSG, e);\n res.code = 500;\n res.msg = ExceptionConstants.DATA_READ_FAIL_MSG;\n }\n return res;\n }", "CodeBleu_score": 40.97816572137391}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t logger.info(\"\u83b7\u53d6\u5355\u636e\u4fe1\u606f\");\n BaseResponseInfo res = new BaseResponseInfo();\n try {\n AccountHeadVo4ListEx result = accountHeadService.getDetailByNumber(billNo);\n res.code = 200;\n res.data = result;\n res.msg = ErpInfo.OK.name;\n } catch(Exception e) {\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.msg = ErpInfo.ERROR.name;\n }\n return res;\n }", "CodeBleu_score": 48.725538545886195}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tlogger.info(\"findDepotByCurrentUser\");\n\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tList<Depot> dataList = depotService.findDepotByCurrentUser();\n\t\tres.code = 200;\n\t\tres.data = dataList;\n\t} catch(Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 63.747201839006195}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tList<DepotEx> depotList = depotService.findDepotByCurrentUser();\n\t\tres.code = 200;\n\t\tres.data = depotList;\n\t} catch(Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 81.04416724956403}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tlogger.info(\"\u83b7\u53d6\u5f53\u524d\u7528\u6237\u62e5\u6709\u6743\u9650\u7684\u4ed3\u5e93\u5217\u8868\");\n\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tList<DepotEx> depotList = depotService.findDepotByCurrentUser();\n\t\tres.code = 200;\n\t\tres.data = depotList;\n\t} catch(Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 63.65801025397878}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t\tJSONArray dataArray = new JSONArray();\n\ttry {\n\t\tList<Function> dataList = functionService.getRoleFunction(type, keyId);\n\t\tif (dataList.size() != 0) {\n\t\t\tJSONObject item = new JSONObject();\n\t\t\tif (type.equals(\\\"UserRole\\\")) {\n\t\t\t\titem.put(\\\"id\\\", 0);\n\t\t\t\titem.put(\\\"text\\\", \\\"\u529f\u80fd\u5217\u8868\\\");\n\t\t\t} else if (type.equals(\\\"RoleFunctions\\\")) {\n\t\t\t\titem.put(\\\"id\\\", 0);\n\t\t\t\titem.put(\\\"text\\\", \\\"\u529f\u80fd\u6743\u9650\\\");\n\t\t\t}\n\t\t\tJSONArray childrenArr = new JSONArray();\n\t\t\tfor (Function function : dataList) {\n\t\t\t\tJSONObject child = new JSONObject();\n\t\t\t\tchild.put(\\\"id\\\", function.getId());\n\t\t\t\tchild.put(\\\"text\\\", function.getName());\n\t\t\t\tchildrenArr.add(child);\n\t\t\t}\n\t\t\titem.put(\\\"children\\\", childrenArr);\n\t\t\tdataArray.add(item);\n\t\t}\n\t} catch (DataAccessException e) {\n\t\tlogger.error(\">>>>>>>>>>>>>>>>>>>\u67e5\u627e\u5f02\u5e38\", e);\n\t}\n\treturn dataArray;\n}", "CodeBleu_score": 27.778000577646445}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t\tJSONArray dataArray = new JSONArray();\n\ttry {\n\t\tList<Function> dataList = functionService.getRoleFunction(type, keyId);\n\t\tif (dataList.size() != 0) {\n\t\t\tfor (Function function : dataList) {\n\t\t\t\tJSONObject item = new JSONObject();\n\t\t\t\titem.put(\"id\", function.getId());\n\t\t\t\titem.put(\"name\", function.getName());\n\t\t\t\titem.put(\"icon\", function.getIcon());\n\t\t\t\titem.put(\"url\", function.getUrl());\n\t\t\t\titem.put(\"component\", function.getComponent());\n\t\t\t\tdataArray.add(item);\n\t\t\t}\n\t\t}\n\t\t//\u975e\u7ba1\u7406\u5458\uff0c\u8fc7\u6ee4\u6389\u7cfb\u7edf\u7ba1\u7406\u83dc\u5355\n\t\tif(!\"0\".equals(keyId)) {\n\t\t\tfor (int i = 0; i < dataArray.size(); i++) {\n\t\t\t\tJSONObject item = dataArray.getJSONObject(i);\n\t\t\t\tif(\"\u7cfb\u7edf\u7ba1\u7406\".equals(item.get(\"name\"))) {\n\t\t\t\t\tdataArray.remove(i);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (DataAccessException e) {\n\t\tlogger.error(\">>>>>>>>>>>>>>>>>>>\u67e5\u627e\u5f02\u5e38\", e);\n\t}\n\treturn dataArray;\n}", "CodeBleu_score": 35.59577090006485}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t\tJSONArray dataArray = new JSONArray();\n\ttry {\n\t\tList<Function> dataList = functionService.findRoleFunction(type, keyId);\n\t\tif (dataList.size() != 0) {\n\t\t\t// \u975eadmin\u7528\u6237\u8fc7\u6ee4\u6389\"\u7cfb\u7edf\u7ba1\u7406\"\n\t\t\tif (type.equals(\"UserRole\")) {\n\t\t\t\tLong tenantId = ErpInfo.tenantId;\n\t\t\t\tif (tenantId != 1) {\n\t\t\t\t\tfor (Function function : dataList) {\n\t\t\t\t\t\tif (function.getName().equals(\"\u7cfb\u7edf\u7ba1\u7406\")) {\n\t\t\t\t\t\t\tdataList.remove(function);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (Function function : dataList) {\n\t\t\t\tJSONObject item = new JSONObject();\n\t\t\t\titem.put(\"id\", function.getId());\n\t\t\t\titem.put(\"text\", function.getName());\n\t\t\t\tdataArray.add(item);\n\t\t\t}\n\t\t}\n\t} catch (DataAccessException e) {\n\t\tlogger.error(\">>>>>>>>>>>>>>>>>>>\u67e5\u627e\u5f02\u5e38\", e);\n\t}\n\treturn dataArray;\n}", "CodeBleu_score": 34.170101240329394}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tMap<String, Object> map = new HashMap<>();\ntry {\nPlatformConfig result = platformConfigService.getInfoByKey(platformKey);\nmap.put(\"result\", result);\nmap.put(\"responseCode\", 200);\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\nmap.put(\"responseCode\", 500);\nmap.put(\"message\", \"\u83b7\u53d6\u4fe1\u606f\u5931\u8d25\");\n}\nreturn new BaseResponseInfo(map);\n}", "CodeBleu_score": 35.919779958310514}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tMap<String, Object> objectMap = new HashMap<>();\ntry {\n    PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n    objectMap.put(\"platformConfig\", platformConfig);\n    return new BaseResponseInfo(200, \"successful\", objectMap);\n} catch(Exception e) {\n    logger.error(e.getMessage(), e);\n    return new BaseResponseInfo(500, e.getMessage(), objectMap);\n}\n}", "CodeBleu_score": 41.77804773724836}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\ttry {\n    BaseResponseInfo res = new BaseResponseInfo();\n    PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n    res.code = 200;\n    res.data = platformConfig;\n    return res;\n} catch (Exception e) {\n    logger.error(e.getMessage(), e);\n    e.printStackTrace();\n    throw new Exception(ErpInfo.ERROR.name, ErpInfo.ERROR.code, ErpInfo.ERROR.description);\n}\n}", "CodeBleu_score": 70.7021153779974}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tlogger.info(\\\"systemConfigResource getCurrentInfo method: {}.\\\", request.getRequestURI());\n\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tList<SystemConfig> dataList = systemConfigService.getSystemConfig();\n\t\tif (null != dataList && dataList.size() > 0) {\n\t\t\tres.code = 200;\n\t\t\tres.data = dataList.get(0);\n\t\t\tlogger.info(\\\"systemConfigResource getCurrentInfo data: {}.\\\", res.data);\n\t\t} else {\n\t\t\tlogger.error(\\\"systemConfigResource getCurrentInfo error: {}.\\\", res.msg);\n\t\t\tres.code = 500;\n\t\t\tres.msg = \\\"\u8bf7\u6c42\u5931\u8d25\\\";\n\t\t}\n\t} catch(Exception e){\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.msg = \\\"\u8bf7\u6c42\u5931\u8d25\\\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 46.165983762486086}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tlogger.info(\\\"systemConfigResource#getCurrentInfo: >>\\\");\n\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tList<SystemConfig> dataList = systemConfigService.getSystemConfig();\n\t\tif (null != dataList && dataList.size() > 0) {\n\t\t\tres.code = 200;\n\t\t\tres.data = dataList.get(0);\n\t\t\tres.msg = \\\"\\\";\n\t\t} else {\n\t\t\tres.code = 500;\n\t\t\tres.data = \\\"\\\";\n\t\t\tres.msg = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n\t\t}\n\t} catch(Exception e){\n\t\tres.code = 500;\n\t\tres.data = \\\"\\\";\n\t\tres.msg = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n\t\tlogger.error(\\\"systemConfigResource#getCurrentInfo: >>\\\", e);\n\t}\n\tlogger.info(\\\"systemConfigResource#getCurrentInfo: <<\\\");\n\treturn res;\n}", "CodeBleu_score": 43.194518674305286}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tlogger.info(\\\"systemConfig\\\", \\\"getCurrentInfo\\\");\n\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tList<SystemConfig> dataList = systemConfigService.getSystemConfig();\n\t\tif (null != dataList && dataList.size() > 0) {\n\t\t\tres.code = 200;\n\t\t\tres.data = dataList.get(0);\n\t\t\treturn res;\n\t\t} else {\n\t\t\tres.code = 500;\n\t\t\tres.msg = \\\"\u7cfb\u7edf\u53c2\u6570\u914d\u7f6e\u4fe1\u606f\u83b7\u53d6\u5931\u8d25\\\";\n\t\t\treturn res;\n\t\t}\n\t} catch(Exception e) {\n\t\tres.code = 500;\n\t\tres.msg = \\\"\u7cfb\u7edf\u53c2\u6570\u914d\u7f6e\u4fe1\u606f\u83b7\u53d6\u5931\u8d25\\\";\n\t\treturn res;\n\t}\n}", "CodeBleu_score": 22.194198608002758}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\ttry {\n\t\tMultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n\t\tMultipartFile file = multipartRequest.getFile(\"file\");\n\t\tString businessPath = (String) request.getSession().getAttribute(\"businessPath\");\n\t\tString fileName = file.getOriginalFilename();\n\t\tString fileType = FileUtils.getFileType(fileName);\n\t\tif (fileUploadType == 1L) {\n\t\t\t// \u672c\u5730\u4e0a\u4f20\n\t\t\tString path = filePath + businessPath + \"/\" + fileName;\n\t\t\tFile localFile = new File(path);\n\t\t\tif (!localFile.getParentFile().exists()) {\n\t\t\t\tlocalFile.getParentFile().mkdirs();\n\t\t\t}\n\t\t\tfile.transferTo(localFile);\n\t\t\tresponse.setCharacterEncoding(\"utf-8\");\n\t\t\tresponse.setContentType(\"application/json\");\n\t\t\tBaseResponseInfo res = new BaseResponseInfo();\n\t\t\tres.code = 200;\n\t\t\tres.data = businessPath + \"/\" + fileName;\n\t\t\treturn res;\n\t\t} else if (fileUploadType == 2L) {\n\t\t\t// \u963f\u91cc\u4e91OSS\u4e0a\u4f20\n\t\t\tString path = businessPath + \"/\" + fileName;\n\t\t\tOSSClient ossClient = AliOSSUtils.getOSSClient();\n\t\t\tossClient.putObject(AliOSSUtils.getBucketName(), path, file.getInputStream());\n\t\t\tossClient.shutdown();\n\t\t\tresponse.setCharacterEncoding(\"utf-8\");\n\t\t\tresponse.setContentType(\"application/json\");\n\t\t\tBaseResponseInfo res = new BaseResponseInfo();\n\t\t\tres.code = 200;\n\t\t\tres.data = AliOSSUtils.getEndpoint() + \"/\" + AliOSSUtils.getBucketName() + \"/\" + path;\n\t\t\treturn res;\n\t\t} else {\n\t\t\t// \u672a\u77e5\u4e0a\u4f20\u65b9\u5f0f\n\t\t\tthrow new Exception(\"\u672a\u77e5\u4e0a\u4f20\u65b9\u5f0f\");\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\t\tres.code = 500;\n\t\tres.data = \"\u4e0a\u4f20\u5931\u8d25\";\n\t\treturn res;\n\t}\n}", "CodeBleu_score": 45.14540673464893}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t", "CodeBleu_score": 1.8642714310173143}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tString businessPath = request.getParameter(\"businessPath\");\n\t\tMultipartFile file = ((MultipartHttpServletRequest) request).getFile(\"file\");\n\t\tString fileName = file.getOriginalFilename();\n\t\tif (StringUtil.isNotEmpty(businessPath) && StringUtil.isNotEmpty(fileName)) {\n\t\t\tString fileType = FileUtils.getFileType(fileName);\n\t\t\tif (fileUploadType == 1) {\n\t\t\t\t// \u672c\u5730\u4e0a\u4f20\n\t\t\t\tres = uploadLocal(businessPath, file, fileType);\n\t\t\t} else if (fileUploadType == 2) {\n\t\t\t\t// \u963f\u91cc\u4e91OSS\u4e0a\u4f20\n\t\t\t\tres = uploadOss(businessPath, file, fileType);\n\t\t\t}\n\t\t} else {\n\t\t\tres.code = 500;\n\t\t\tres.data = \"\u4e0a\u4f20\u5931\u8d25\";\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u4e0a\u4f20\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 50.966824266350045}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n String title = jsonObject.getString(\\\"title\\\");\n String head = jsonObject.getString(\\\"head\\\");\n String tip = jsonObject.getString(\\\"tip\\\");\n List<Map<String, Object>> dataList = (List<Map<String, Object>>) jsonObject.get(\\\"dataList\\\");\n if (dataList == null) {\n dataList = new ArrayList<>();\n }\n response.setContentType(\\\"application/vnd.ms-excel\\\");\n String fileName = URLEncoder.encode(title, \\\"UTF-8\\\");\n response.addHeader(\\\"Content-Disposition\\\", \\\"attachment;filename=\\\" + fileName + \\\".xlsx\\\");\n OutputStream outputStream = null;\n try {\n outputStream = response.getOutputStream();\n new ExcelExportService().exportExcel(title, head, tip, dataList, outputStream);\n outputStream.flush();\n } catch (Exception e) {\n logger.error(\\\"\u5bfc\u51faExcel\u5931\u8d25\uff01\\\", e);\n } finally {\n if (outputStream != null) {\n outputStream.close();\n }\n }\n } catch (Exception e) {\n logger.error(\\\"\u5bfc\u51faExcel\u5931\u8d25\uff01\\\", e);\n }\n }", "CodeBleu_score": 32.77476316583224}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n String title = jsonObject.getString(\\\"title\\\");\n String head = jsonObject.getString(\\\"head\\\");\n String tip = jsonObject.getString(\\\"tip\\\");\n List<List<String>> dataList = JSON.parseObject(jsonObject.getString(\\\"dataList\\\"), new TypeReference<List<List<String>>>() {});\n String fileName = jsonObject.getString(\\\"fileName\\\");\n String sheetName = jsonObject.getString(\\\"sheetName\\\");\n String fileType = jsonObject.getString(\\\"fileType\\\");\n if(StringUtil.isEmpty(fileType)) {\n fileType = \\\"xls\\\";\n }\n if(StringUtil.isEmpty(fileName)) {\n fileName = title;\n }\n if(StringUtil.isEmpty(sheetName)) {\n sheetName = title;\n }\n if(dataList == null || dataList.size() == 0) {\n return;\n }\n if(StringUtil.isEmpty(head)) {\n head = dataList.get(0).toString();\n }\n if(StringUtil.isEmpty(tip)) {\n tip = \\\"\\\";\n }\n response.setContentType(\\\"application/ms-excel\\\");\n response.setCharacterEncoding(\\\"utf-8\\\");\n String fileNameReal = fileName + \\\".\\\" + fileType;\n response.setHeader(\\\"Content-disposition\\\", \\\"attachment;filename=\\\" + URLEncoder.encode(fileNameReal, \\\"UTF-8\\\"));\n OutputStream out = response.getOutputStream();\n ExcelExportUtil.exportExcel(title, head, tip, dataList, fileName, sheetName, out, fileType);\n out.flush();\n out.close();\n } catch (Exception e) {\n logger.error(e.getMessage(), e);\n }\n }", "CodeBleu_score": 33.49644594688008}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n String title = jsonObject.getString(\\\"title\\\");\n String head = jsonObject.getString(\\\"head\\\");\n String tip = jsonObject.getString(\\\"tip\\\");\n String dataList = jsonObject.getString(\\\"dataList\\\");\n if (StringUtil.isEmpty(title) || StringUtil.isEmpty(head) || StringUtil.isEmpty(tip) || StringUtil.isEmpty(dataList)) {\n throw new IllegalArgumentException(\\\"title, head, tip, and dataList must be provided.\\\");\n }\n List<JSONObject> dataListJson = JSON.parseArray(dataList, JSONObject.class);\n if (dataListJson == null || dataListJson.size() == 0) {\n throw new IllegalArgumentException(\\\"dataList must be provided.\\\");\n }\n String exportFilePath = systemConfigService.exportExcelByParam(title, head, tip, dataListJson);\n if (StringUtil.isEmpty(exportFilePath)) {\n throw new IllegalArgumentException(\\\"Export failed.\\\");\n }\n // Set response parameters\n response.setContentType(\\\"application/vnd.ms-excel\\\");\n response.setHeader(\\\"Content-Disposition\\\", \\\"attachment;filename=\\\" + URLEncoder.encode(title + \\\".xls\\\", \\\"UTF-8\\\"));\n // Write the output to the response\n OutputStream outputStream = response.getOutputStream();\n BufferedInputStream bufferedInputStream = new BufferedInputStream(new FileInputStream(exportFilePath));\n byte[] buf = new byte[1024];\n int len;\n while ((len = bufferedInputStream.read(buf)) > 0) {\n outputStream.write(buf, 0, len);\n }\n outputStream.flush();\n outputStream.close();\n } catch (Exception e) {\n logger.error(e.getMessage(), e);\n }\n }", "CodeBleu_score": 34.50731201064898}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t", "CodeBleu_score": 3.3888212609146513}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tint result=0;\n\ttry{\n\t\tAccount account = JSON.toJavaObject(obj, Account.class);\n\t\taccount.setEnabled(true);\n\t\taccount.setDeleteFlag(false);\n\t\tif(account.getInitialAmount()==null){\n\t\t\taccount.setInitialAmount(BigDecimal.ZERO);\n\t\t}\n\t\tif(account.getIsDefault()==null){\n\t\t\t//\u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\u9ed8\u8ba4\u8d26\u6237\uff0c\u5219\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a\u7b2c\u4e00\u4e2a\u8d26\u6237\n\t\t\tAccountExample example = new AccountExample();\n\t\t\texample.createCriteria().andDeleteFlagNotEqualTo(BusinessConstants.DELETE_FLAG_DELETED);\n\t\t\tList<Account> list = accountMapper.selectByExample(example);\n\t\t\tif(list.size()>0){\n\t\t\t\taccount.setIsDefault(false);\n\t\t\t}else{\n\t\t\t\taccount.setIsDefault(true);\n\t\t\t}\n\t\t}\n\t\taccountMapper.insertSelective(account);\n\t\tresult=1;\n\t\t//\u63d2\u5165\u64cd\u4f5c\u65e5\u5fd7\n\t\tlogService.insertLog(new Log(JshException.TYPE_BUSINESS, JshException.BUSINESS_ADD_NAME, JshException.BUSINESS_ADD_CONTENT+account.getName(), request));\n\t}catch(Exception e){\n\t\tresult=-1;\n\t\tJshException.writeFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 52.28422449142067}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\ttry{\nAccount account = JSONObject.parseObject(obj.toJSONString(), Account.class);\n\nif (null == account.getInitialAmount()) {\n\naccount.setInitialAmount(BigDecimal.ZERO);\n\n}\n\naccount.setEnabled(true);\n\naccount.setSort(account.getId());\n\naccount.setCreateBy(request.getHeader(SystemConstants.REQUEST_HEADER_USERID));\n\naccount.setCreateTime(new Date());\n\naccount.setUpdateTime(new Date());\n\nint result=0;\n\ntry{\n\nresult = accountMapper.insertSelective(account);\n\n}catch(Exception e){\n\nJshException.writeFail(logger, e);\n\n}\n\nif(result > 0){\n\n//\u63d2\u5165\u64cd\u4f5c\u6210\u529f\uff0c\u63d2\u5165\u64cd\u4f5c\u65e5\u5fd7\n\nlogService.insertLog(new Log(\n\nLog.LOG_OPERATION_TYPE_ADD,\n\nLog.LOG_OPERATION_CONTENT_ACCOUNT,\n\nLog.LOG_OPERATION_RESULT_SUCCEED,\n\naccount.getId(),\n\nrequest.getHeader(SystemConstants.REQUEST_HEADER_USERID)\n\n));\n\n}\n\nreturn result;\n\n}catch(Exception e){\n\nJshException.writeFail(logger, e);\n\nreturn 0;\n\n}\n\n}", "CodeBleu_score": 56.088298971109765}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\tLong result = null;\ntry {\nresult = accountMapperEx.selectByConditionAccountCount(name, serialNo, null);\n} catch (Exception e) {\nJshException.readFail(logger, e);\n}\nreturn result;\n}", "CodeBleu_score": 72.368551038562}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\tLong result = null;\n\ttry {\n\t\tresult = accountMapperEx.selectByConditionAccountCount(name, serialNo, null);\n\t} catch (Exception e) {\n\t\tJshException.readFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 72.42849391142589}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\tLong result = null;\n\ttry {\n\t\tresult = accountMapperEx.selectByConditionAccountCount(name, serialNo, null);\n\t} catch (Exception e) {\n\t\tJshException.readFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 72.42849391142589}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\tDepotItem depotItem = getDepotItem(id);\ndepotItem.setDeleteFlag(BusinessConstants.DELETE_FLAG_DELETED);\nint result =0;\ntry{\nresult=depotItemMapper.updateByPrimaryKeySelective(depotItem);\n}catch(Exception e){\nJshException.readFail(logger, e);\n}\nreturn result;\n}", "CodeBleu_score": 61.414237100876164}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\tDepotItem depotItem = depotItemMapper.selectByPrimaryKey(id);\ndepotItem.setDeleteFlag(BusinessConstants.DELETE_FLAG_DELETED);\nint result = depotItemMapper.updateByPrimaryKey(depotItem);\nif(result > 0) {\n//\u5220\u9664\u5bf9\u5e94\u5173\u7cfb\ndepotItemMapperEx.deleteMaterialExtendByHeaderId(id);\n}\nreturn result;\n}", "CodeBleu_score": 40.9477041980132}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result=0;\n\ttry{\n\t\tresult=depotItemMapper.deleteByPrimaryKey(id);\n\t}catch(Exception e){\n\t\tJshException.readFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 74.2981930324967}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tString url = protocol + \\\"://\\\" + host + \\\":\\\" + port + \\\"/rest/v1/projects/\\\" + projectName + \\\"/nodes?nodeType=\\\" + nodeType + \\\"&nodeKey=\\\" + nodeKey;\n\tHttpGet httpGet = new HttpGet(url);\n\tCloseableHttpResponse response = null;\n\ttry {\n\t\tresponse = httpClient.execute(httpGet);\n\t\tHttpEntity entity = response.getEntity();\n\t\tif (entity != null) {\n\t\t\tString content = EntityUtils.toString(entity, Charset.forName(\\\"UTF-8\\\"));\n\t\t\tif (content.contains(\\\"nodeKey\\\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttry {\n\t\t\tif (response != null) {\n\t\t\t\tresponse.close();\n\t\t\t}\n\t\t\thttpClient.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 31.216741928454937}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\ttry (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n\t\tHttpGet httpGet = new HttpGet(String.format(\\\"%s://%s:%s/projects/%s/nodes/%s/%s\\\", protocol, host, port, projectName, nodeType, nodeKey));\n\t\tCloseableHttpResponse response = httpClient.execute(httpGet);\n\t\ttry {\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tif (entity != null) {\n\t\t\t\tEntityUtils.consume(entity);\n\t\t\t}\n\t\t\treturn response.containsHeader(\\\"X-SKYNET-KEY\\\");\n\t\t} finally {\n\t\t\tresponse.close();\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 32.541289743736414}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\tString url = protocol + \\\"://\\\" + host + \\\":\\\" + port + \\\"/rest/v1/projects/\\\" + projectName + \\\"/nodes/\\\" + nodeType + \\\"/\\\" + nodeKey;\n\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tHttpGet httpGet = new HttpGet(url);\n\tCloseableHttpResponse response = null;\n\ttry {\n\t\tresponse = httpClient.execute(httpGet);\n\t\tint statusCode = response.getStatusLine().getStatusCode();\n\t\tif (statusCode != 200) {\n\t\t\tSystem.err.println(\\\"Error adding node. Status code: \\\" + statusCode);\n\t\t\treturn false;\n\t\t}\n\t\tHttpEntity entity = response.getEntity();\n\t\tif (entity != null) {\n\t\t\tString responseString = EntityUtils.toString(entity, Charset.forName(\\\"UTF-8\\\"));\n\t\t\tEntityUtils.consume(entity);\n\t\t\tif (responseString.contains(\\\"key\\\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} catch (IOException e) {\n\t\tSystem.err.println(\\\"Error adding node. \\\" + e.getMessage());\n\t} finally {\n\t\ttry {\n\t\t\tif (response != null) {\n\t\t\t\tresponse.close();\n\t\t\t}\n\t\t\thttpClient.close();\n\t\t} catch (IOException e) {\n\t\t\tSystem.err.println(\\\"Error closing connection. \\\" + e.getMessage());\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 21.038800788150088}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\tHttpHost host = new HttpHost(getHost(), getPort(), getProtocol());\n\t\tHttpGet getRequest = new HttpGet(\"/addEdge/\"+withProjectName(projectName)+edgeType+\"/\"+fromType+\"/\"+toType+\"/\"+from+\"/\"+to);\n\t\thttpResponse = httpClient.execute(host, getRequest);\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tif (entity != null) {\n\t\t\tObjectMapper om = new ObjectMapper();\n\t\t\tString result = EntityUtils.toString(entity);\n\t\t\tMap map = om.readValue(result, Map.class);\n\t\t\tif (map.get(\"key\") != null) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n}", "CodeBleu_score": 82.89754822638061}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\tHttpHost host = new HttpHost(getHost(), getPort(), getProtocol());\n\t\tHttpGet getRequest = new HttpGet(\"/addEdge/\\\" + withProjectName(projectName) + edgeType + \\\"/\\\" + fromType + \\\"/\\\" + toType + \\\"/\\\" + from + \\\"/\\\" + to);\n\t\thttpResponse = httpClient.execute(host, getRequest);\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tif (entity != null) {\n\t\t\tObjectMapper om = new ObjectMapper();\n\t\t\tString result = EntityUtils.toString(entity);\n\t\t\tMap map = om.readValue(result, Map.class);\n\t\t\tif (map.get(\"key\") != null) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n}", "CodeBleu_score": 57.64379219576112}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\tHttpHost host = new HttpHost(getHost(), getPort(), getProtocol());\n\t\tHttpGet getRequest = new HttpGet(\"/addEdge/\" + withProjectName(projectName) + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to);\n\t\thttpResponse = httpClient.execute(host, getRequest);\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tif (entity != null) {\n\t\t\tObjectMapper om = new ObjectMapper();\n\t\t\tString result = EntityUtils.toString(entity);\n\t\t\tMap map = om.readValue(result, Map.class);\n\t\t\tif (map.get(\"key\") != null) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n}", "CodeBleu_score": 94.51099916814893}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t\tif (event == null) {\n\t\treturn;\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(testLocations.get(new Random().nextInt(testLocations.size())));\n\t}\n\tevent.setTime(new Date());\n\tString jsonString = null;\n\ttry {\n\t\tjsonString = objectMapper.writeValueAsString(event);\n\t} catch (JsonProcessingException e) {\n\t\te.printStackTrace();\n\t}\n\tif (producer == null) {\n\t\treturn;\n\t}\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(event.getTarget() != null ? event.getTarget() : \"test\", jsonString);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 52.11984137884764}, {"code": "public void sendEvent(Event event){\n\t\tif (event == null || event.getMessage() == null) {\n\t\treturn;\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(getRandomLocation());\n\t}\n\tevent.setEventTime(new Date());\n\ttry {\n\t\tString json = this.objectMapper.writeValueAsString(event);\n\t\tProducerRecord<String, String> record = new ProducerRecord<String, String>(getTarget(event), json);\n\t\tthis.producer.send(record);\n\t\tthis.producer.flush();\n\t} catch (JsonProcessingException e) {\n\t\te.printStackTrace();\n\t}\n}", "CodeBleu_score": 43.54199712646937}, {"code": "public void sendEvent(Event event){\n\t\tif (event == null) {\n\t\tthrow new IllegalArgumentException(\"Event is null\");\n\t}\n\tif (event.getMessage() == null) {\n\t\tthrow new IllegalArgumentException(\"Event message is null\");\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(getRandomLocation());\n\t}\n\tevent.setTime(new Date());\n\tString jsonString = null;\n\ttry {\n\t\tjsonString = objectMapper.writeValueAsString(event);\n\t} catch (JsonProcessingException e) {\n\t\te.printStackTrace();\n\t}\n\tif (producerProperties == null) {\n\t\tthrow new IllegalArgumentException(\"Producer properties is null\");\n\t}\n\tif (producer == null) {\n\t\tproducer = new KafkaProducer<String, String>(producerProperties);\n\t}\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(\n\t\t\tevent.getTarget() == null ? \"test\" : event.getTarget(), jsonString);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 50.830164891115835}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t\t// The endpoint of the China (Hangzhou) region is used in this example. Specify the actual endpoint based on your requirements.\n\tString endpoint = \"oss-\" + config.getRegion() + \".aliyuncs.com\";\n\t// Security risks may arise if you use the AccessKey pair of an Alibaba Cloud account to log on to OSS, because the account has permissions on all API operations. We recommend that you use your RAM user's credentials to call API operations or perform routine operations and maintenance. To create a RAM user, log on to the RAM console.\n\tString accessKeyId = config.getAccessKeyId();\n\tString accessKeySecret = config.getAccessKeySecret();\n\tString bucketName = config.getOssBucket();\n\t// The name of the bucket for storing the uploaded file\n\t// Specify the actual bucket name.\n\t// String bucketName = \"test-bucket-name\";\n\t// The name of the object for storing the uploaded file.\n\t// Specify the actual object name.\n\t// String objName = \"test-object-name\";\n\t// The file to be uploaded\n\t// File file = new File(\"C:\\\\test.txt\");\n\t// The content to be uploaded\n\t// byte[] content = new byte[(int) file.length()];\n\t// The OSS client\n\tOSSClient client = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\ttry {\n\t\t// Upload the file content to the object\n\t\tclient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\t\t// Obtain the object URL\n\t\tURL url = client.getObject(bucketName, objName).getURL();\n\t\t// Close the OSS client\n\t\tclient.shutdown();\n\t\t// Return the URL of the uploaded object\n\t\treturn url.toString();\n\t} catch (Exception ex) {\n\t\t// Print the error message\n\t\tex.printStackTrace();\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 36.50404910475726}, {"code": "public String upload(String objName, byte[] content){\n\t//        String endpoint = \"oss-cn-beijing.aliyuncs.com\";\n//        String accessKeyId = \"<KEY>\";\n//        String accessKeySecret = \"<KEY>\";\n//        String bucketName = \"ycinfotech\";\n//        String objectName = objName;\n//\n//        // \u521b\u5efaOSSClient\u5b9e\u4f8b\u3002\n//        OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);\n//\n//        // \u4e0a\u4f20\u6587\u4ef6\u5230\u6307\u5b9a\u7684\u5b58\u50a8\u7a7a\u95f4\uff08bucketName\uff09\u5e76\u4fdd\u5b58\u4e3a\u6307\u5b9a\u7684\u5bf9\u8c61\u540d\u79f0\uff08objectName\uff09\u3002\n//        ossClient.putObject(bucketName, objectName, new ByteArrayInputStream(content));\n//\n//        // \u5173\u95edOSSClient\u3002\n//        ossClient.shutdown();\n//\n//        // \u7ec4\u88c5\u8fd4\u56de\u7ed3\u679c\u3002\n//        String url = \"https://\" + bucketName + \".\" + endpoint + \"/\" + objectName;\n//        return url;\n//    }", "CodeBleu_score": 3.9768209924122306}, {"code": "public String upload(String objName, byte[] content){\n\t//        String accessKeyId = \"LTAI4F05iV417e34\";\n//        String accessKeySecret = \"<KEY>\";\n//        String endpoint = \"oss-cn-hangzhou.aliyuncs.com\";\n//        String bucketName = \"ycinfotech\";\n//        String objectName = objName;\n//        // \u521b\u5efaOSSClient\u5b9e\u4f8b\u3002\n//        OSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n//        // \u4e0a\u4f20\u6587\u4ef6\u5230\u6307\u5b9a\u7684\u5b58\u50a8\u7a7a\u95f4\uff08bucketName\uff09\u5e76\u4fdd\u5b58\u4e3a\u6307\u5b9a\u7684\u6587\u4ef6\u540d\u79f0\uff08objectName\uff09\u3002\n//        ossClient.putObject(bucketName, objectName, new ByteArrayInputStream(content));\n//        // \u5173\u95edOSSClient\u3002\n//        ossClient.shutdown();\n//        return \"https://\" + bucketName + \".\" + endpoint + \"/\" + objectName;\n//    }", "CodeBleu_score": 3.9768209924122306}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\tIpToLocationWorker worker = getIpToLocationWorker();\n\tif (worker == null) {\n\t\treturn new LocationInfo();\n\t}\n\treturn worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 25.744062822623643}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\tIpToLocationWorker worker = getIpToLocationWorker();\n\tif (worker == null) {\n\t\tLocationInfo result = new LocationInfo();\n\t\tresult.setIpAddress(ipAddress);\n\t\tresult.setMainInfo(\"unknown\");\n\t\tresult.setSubInfo(\"unknown\");\n\t\treturn result;\n\t}\n\treturn worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 49.10535166980132}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\tIpToLocationWorker worker = getIpToLocationWorker();\n\tif (worker == null) {\n\t\tLocationInfo  result = new LocationInfo();\n\t\tresult.setIpAddress(ipAddress);\n\t\tresult.setMainInfo(\"unknown\");\n\t\tresult.setSubInfo(\"unknown\");\n\t\treturn result;\n\t}\n\treturn worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 49.138805247773995}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tsynchronized (this) {\n\t\tif (lowLevelRestClient == null || highLevelRestClient == null) {\n\t\t\tif (clusterHostList == null || clusterHostList.isEmpty()) {\n\t\t\t\tthrow new Exception(\"clusterHostList is null or empty.\");\n\t\t\t}\n\t\t\tString[] clusterHostPortList = clusterHostList.split(\",\");\n\t\t\tList<HttpHost> httpHostList = new ArrayList<HttpHost>();\n\t\t\tfor (String clusterHostPort : clusterHostPortList) {\n\t\t\t\tString[] clusterHostPortPair = clusterHostPort.split(\":\");\n\t\t\t\tif (clusterHostPortPair.length != 2) {\n\t\t\t\t\tthrow new Exception(\"Invalid clusterHostPort: \" + clusterHostPort);\n\t\t\t\t}\n\t\t\t\thttpHostList.add(new HttpHost(clusterHostPortPair[0], Integer.parseInt(clusterHostPortPair[1]), \"http\"));\n\t\t\t}\n\t\t\tlowLevelRestClient = RestClient.builder(httpHostList.toArray(new HttpHost[0])).build();\n\t\t\thighLevelRestClient = new RestHighLevelClient(lowLevelRestClient);\n\t\t}\n\t}\n}", "CodeBleu_score": 45.760836683427186}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (lowLevelRestClient == null && highLevelRestClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (lowLevelRestClient == null && highLevelRestClient == null) {\n\t\t\t\tString[] clusterHostList = clusterHostList.split(\",\");\n\t\t\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\t\t\t\tfor (String clusterHost : clusterHostList) {\n\t\t\t\t\tString[] hostPort = clusterHost.split(\":\");\n\t\t\t\t\thosts.add(new HttpHost(hostPort[0], Integer.parseInt(hostPort[1]), \"http\"));\n\t\t\t\t}\n\t\t\t\tlowLevelRestClient = RestClient.builder(hosts.toArray(new HttpHost[hosts.size()])).build();\n\t\t\t\thighLevelRestClient = new RestHighLevelClient(lowLevelRestClient);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 50.0038910585137}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (lowLevelRestClient == null && highLevelRestClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (lowLevelRestClient == null && highLevelRestClient == null) {\n\t\t\t\tif (clusterHostList == null) {\n\t\t\t\t\tthrow new Exception(\"Cluster host list is not set.\");\n\t\t\t\t}\n\t\t\t\tString[] clusterHostPortList = clusterHostList.split(\",\");\n\t\t\t\tList<HttpHost> httpHostList = new ArrayList<HttpHost>();\n\t\t\t\tfor (String clusterHostPort : clusterHostPortList) {\n\t\t\t\t\tString[] hostPort = clusterHostPort.split(\":\");\n\t\t\t\t\tif (hostPort.length != 2) {\n\t\t\t\t\t\tthrow new Exception(\"Cluster host list is invalid.\");\n\t\t\t\t\t}\n\t\t\t\t\thttpHostList.add(new HttpHost(hostPort[0], Integer.parseInt(hostPort[1]), \"http\"));\n\t\t\t\t}\n\t\t\t\tlowLevelRestClient = RestClient.builder(httpHostList.toArray(new HttpHost[0])).build();\n\t\t\t\thighLevelRestClient = new RestHighLevelClient(lowLevelRestClient);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 49.970541687777455}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tfor (String host : clusterHostList.split(\",\")) {\n\t\tString[] hostParts = host.split(\":\");\n\t\tif (hostParts.length == 1) {\n\t\t\thosts.add(new HttpHost(hostParts[0], clusterPort, \"http\"));\n\t\t} else if (hostParts.length == 2) {\n\t\t\thosts.add(new HttpHost(hostParts[0], Integer.parseInt(hostParts[1]), \"http\"));\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(\"Invalid host: \" + host);\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 45.79928869683815}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tString[] hostsList = clusterHostList.split(\",\");\n\tfor (String host : hostsList) {\n\t\tif (host.trim().length() == 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tString[] hostParts = host.split(\":\");\n\t\tString hostName = hostParts[0].trim();\n\t\tint hostPort = clusterPort;\n\t\tif (hostParts.length == 2) {\n\t\t\thostPort = Integer.parseInt(hostParts[1].trim());\n\t\t}\n\t\tHttpHost httpHost = new HttpHost(hostName, hostPort, \"http\");\n\t\thosts.add(httpHost);\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 41.7462149074107}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<>();\n\tif (clusterHostList == null || clusterHostList.isEmpty()) {\n\t\tthrow new IllegalArgumentException(\"clusterHostList must not be null or empty\");\n\t}\n\tfor (String host : clusterHostList.split(\",\")) {\n\t\tString[] hostParts = host.split(\":\");\n\t\tString hostName = hostParts[0];\n\t\tint hostPort = hostParts.length > 1 ? Integer.parseInt(hostParts[1]) : clusterPort;\n\t\thosts.add(new HttpHost(hostName, hostPort, \"http\"));\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 37.83621451518796}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\t\tMap<String, Object> task = taskQueue.poll(30, TimeUnit.SECONDS);\n\tif (task == null){\n\t\treturn;\n\t}\n\tString taskType = (String)task.get(PARAM_TASK_TYPE);\n\tif (TASK_PLAIN_TEXT_MESSAGE.equals(taskType)){\n\t\tString toNumber = (String)task.get(PARAM_RECIEVER_NUMBER);\n\t\tString fromWho = (String)task.get(PARAM_FROM_WHO);\n\t\tString template = (String)task.get(PARAM_MESSAGE_TEMPLATE);\n\t\tMap<String, String> parameters = (Map<String, String>)task.get(PARAM_MESSAGE_DATA);\n\t\tif (StringUtils.isBlank(toNumber) || StringUtils.isBlank(fromWho) || StringUtils.isBlank(template)){\n\t\t\tlogger.error(\\\"Invalid task. to_number: \\\" + toNumber + \\\", from_who: \\\" + fromWho + \\\", template: \\\" + template);\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tsendPlainTextMessage(toNumber, fromWho, template, parameters);\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\\\"Failed to send message to \\\" + toNumber + \\\", from \\\" + fromWho + \\\", template \\\" + template + \\\", parameters \\\" + parameters);\n\t\t}\n\t}\n}", "CodeBleu_score": 48.00986644169601}, {"code": "protected void pollingWork() throws InterruptedException{\n\t", "CodeBleu_score": 0.9021038230038907}, {"code": "protected void pollingWork() throws InterruptedException{\n\t\tMap<String, Object> task = taskQueue.poll(30, TimeUnit.SECONDS);\n\tif (task == null){\n\t\treturn;\n\t}\n\tString taskType = (String) task.get(PARAM_TASK_TYPE);\n\tif (TASK_PLAIN_TEXT_MESSAGE.equals(taskType)){\n\t\tString toNumber = (String) task.get(PARAM_RECIEVER_NUMBER);\n\t\tString fromWho = (String) task.get(PARAM_FROM_WHO);\n\t\tString template = (String) task.get(PARAM_MESSAGE_TEMPLATE);\n\t\tMap<String, String> parameters = (Map<String, String>) task.get(PARAM_MESSAGE_DATA);\n\t\ttry {\n\t\t\tsendPlainTextMessage(toNumber, fromWho, template, parameters);\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\\\"Send plain text message failed. toNumber: \\\" + toNumber + \\\", fromWho: \\\" + fromWho + \\\", template: \\\" + template + \\\", parameters: \\\" + parameters, e);\n\t\t}\n\t}\n}", "CodeBleu_score": 57.35055609817532}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpclient = getHttpClient();\n\tHttpGet httpget = new HttpGet(uri);\n\tSystem.out.println(\\\"Executing request \\\" + httpget.getURI());\n\tCloseableHttpResponse response = httpclient.execute(httpget);\n\ttry {\n\t\tSystem.out.println(\\\"----------------------------------------\\\");\n\t\tSystem.out.println(\\\"response status: \\\" + response.getStatusLine());\n\t\tHttpEntity entity = response.getEntity();\n\t\tSystem.out.println(\\\"response content: \\\" + EntityUtils.toString(entity, StandardCharsets.UTF_8));\n\t\tSystem.out.println(\\\"----------------------------------------\\\");\n\t\tEntityUtils.consume(entity);\n\t} finally {\n\t\tresponse.close();\n\t}\n\treturn EntityUtils.toString(response.getEntity(), StandardCharsets.UTF_8);\n}", "CodeBleu_score": 36.45718061915701}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpclient = getHttpClient();\n\tHttpGet httpGet = new HttpGet(uri);\n\tCloseableHttpResponse response = null;\n\ttry {\n\t\tresponse = httpclient.execute(httpGet);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString content = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n\t\tSystem.out.println(content);\n\t\treturn content;\n\t} finally {\n\t\tif (response != null) {\n\t\t\tresponse.close();\n\t\t}\n\t}\n}", "CodeBleu_score": 66.22844882068742}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpclient = getHttpClient();\n\tHttpGet httpget = new HttpGet(uri);\n\tCloseableHttpResponse response = httpclient.execute(httpget);\n\ttry {\n\t\tHttpEntity entity = response.getEntity();\n\t\tif (entity != null) {\n\t\t\tString content = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n\t\t\tSystem.out.println(content);\n\t\t\treturn content;\n\t\t}\n\t} finally {\n\t\tresponse.close();\n\t}\n\treturn null;\n}", "CodeBleu_score": 73.58570428738703}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument doc = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n\treturn decodeElementToMap(doc.getDocumentElement(), doTrim);\n}", "CodeBleu_score": 44.27710944067061}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tDocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n\tdocumentBuilderFactory.setNamespaceAware(true);\n\tDocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n\tByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8));\n\tDocument document = documentBuilder.parse(byteArrayInputStream);\n\treturn decodeToMap(document.getChildNodes(), doTrim);\n}", "CodeBleu_score": 37.26912158801486}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tDocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\tByteArrayInputStream inputStream = new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8));\n\tDocument document = builder.parse(inputStream);\n\treturn decodeNodeToMap(document.getChildNodes(), doTrim);\n}", "CodeBleu_score": 32.88375991101141}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tfinal DeliveryRule deliveryRule = DeliveryRule.ofCode(orderRecord.getDeliveryRule());\n\tfinal boolean autoProcess = sysConfigBL.getBooleanValue(SYS_Config_AUTO_SHIP_AND_INVOICE, true);\n\n\tif (deliveryRule == DeliveryRule.COMPLETE_ORDER_AND_RELATIVES)\n\t{\n\t\tif (autoProcess)\n\t\t{\n\t\t\tLoggables.withLogger(logger, Level.INFO).addLog(\"Enqueueing order for automatic shipping and invoicing: {}\", orderRecord);\n\t\t\tcompleteShipAndInvoiceEnqueuer.enqueueOrder(OrderId.ofRepoId(orderRecord.getC_Order_ID()));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tLoggables.withLogger(logger, Level.INFO).addLog(\"Auto-processing of order is disabled; order will not be processed: {}\", orderRecord);\n\t\t}\n\t}\n\telse\n\t{\n\t\tfinal boolean isSOTrx = orderRecord.isSOTrx();\n\t\tfinal boolean isPostponed = sysConfigBL.getBooleanValue(CreateMissingShipmentSchedulesWorkpackageProcessor.SYS_Config_CreateMissingShipmentSchedules_Postpone, true);\n\n\t\tif (isSOTrx && !isPostponed)\n\t\t{\n\t\t\tLoggables.withLogger(logger, Level.INFO).addLog(\"Auto-processing of order is disabled; order will be processed after the current transaction is committed: {}\", orderRecord);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tLoggables.withLogger(logger, Level.INFO).addLog(\"Auto-processing of order is disabled; order will be processed after the current transaction is committed: {}\", orderRecord);\n\n\t\t\t// schedule the creation of missing shipment schedules\n\t\t\tfinal AsyncBatchId asyncBatchId = asyncBatchObserver.scheduleAsyncBatch(CreateMissingShipmentSchedulesWorkpackageProcessor.class);\n\t\t\tasyncBatchObserver.notifyAsyncBatchCreated(asyncBatchId);\n\t\t}\n\t}\n}", "CodeBleu_score": 50.899417307563276}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tfinal OrderId orderId = OrderId.ofRepoId(orderRecord.getC_Order_ID());\n\n\tfinal boolean autoProcess = sysConfigBL.getBooleanValue(SYS_Config_AUTO_SHIP_AND_INVOICE, true);\n\tif (!autoProcess)\n\t{\n\t\tLoggables.withLogger(logger, Level.INFO).addLog(\"Auto-processing of shipment schedules is disabled in the system configuration. Skipping auto-processing of order {}.\", orderId);\n\t\treturn;\n\t}\n\n\tif (orderRecord.isSOTrx())\n\t{\n\t\tif (orderRecord.getDeliveryRule() != DeliveryRule.AVAILABILITY)\n\t\t{\n\t\t\tLoggables.withLogger(logger, Level.INFO).addLog(\"Order {} has a delivery rule that is not set to 'Availability'. Skipping auto-processing of order {}.\", orderId, orderId);\n\t\t\treturn;\n\t\t}\n\n\t\tif (orderRecord.getPreparationDate() != null)\n\t\t{\n\t\t\tLoggables.withLogger(logger, Level.INFO).addLog(\"Order {} has a preparation date. Skipping auto-processing of order {}.\", orderId, orderId);\n\t\t\treturn;\n\t\t}\n\n\t\tif (orderRecord.getPreparationDate() != null)\n\t\t{\n\t\t\tLoggables.withLogger(logger, Level.INFO).addLog(\"Order {} has a preparation date. Skipping auto-processing of order {}.\", orderId, orderId);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tcompleteShipAndInvoiceEnqueuer.enqueueCompleteShipAndInvoice(orderId);\n}", "CodeBleu_score": 50.03359982941053}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tif (orderRecord.getDeliveryRule() != DeliveryRule.AVAILABILITY.getCode())\n\t{\n\t\treturn;\n\t}\n\n\tfinal OrderId orderId = OrderId.ofRepoId(orderRecord.getC_Order_ID());\n\n\tif (!completeShipAndInvoiceEnqueuer.isEligibleForAutoProcessing(orderId))\n\t{\n\t\treturn;\n\t}\n\n\tLoggables.withLogger(logger, Level.INFO).addLog(\"Enqueueing order {} for automatic processing\", orderRecord);\n\n\tfinal AsyncBatchId asyncBatchId = completeShipAndInvoiceEnqueuer.enqueueAsyncBatch(orderId);\n\tasyncBatchObserver.registerObserver(asyncBatchId, this::onAsyncBatchCompleted);\n}", "CodeBleu_score": 58.14667708794353}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = User::where('email', $request->email)->first();\n\nif (is_null($user)) {\nevent(new Failed($user, $request->only('email'), ['password']));\n\nthrow ValidationException::withMessages([\n'email' => [trans('auth.failed')],\n]);\n}\n\nif (! $this->guard->getProvider()->validateCredentials($user, ['password' => $request->password])) {\nevent(new Failed($user, $request->only('email'), ['password']));\n\nthrow ValidationException::withMessages([\n'email' => [trans('auth.failed')],\n]);\n}\n\nreturn $user;\n}", "CodeBleu_score": 47.8698699801238}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$this->ensureIsNotRateLimited($request);\n\n$user = User::where('email', $request->email)->first();\n\nif (is_null($user) || ! $this->guard->getProvider()->validateCredentials($user, ['password' => $request->password])) {\nevent(new Failed($user, $request->only('email'), ['password' => $request->password]));\n\nthrow ValidationException::withMessages([\n'email' => [trans('auth.failed')],\n]);\n}\n\nreturn $user;\n}", "CodeBleu_score": 56.04517759174226}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$this->ensureRequestsAreStateful();\n$this->limiter->increment($this->getLoginRateLimiterKey($request));\n$user = User::where('email', $request->email)->first();\n\nif (is_null($user)) {\nevent(new Failed($user, $request->only('email'), ['email' => 'The provided credentials are incorrect.']));\n\nthrow ValidationException::withMessages([\n'email' => [trans('auth.failed')],\n]);\n}\n\nif (! $this->guard->getProvider()->validateCredentials($user, $request->only('password'))) {\nevent(new Failed($user, $request->only('email'), ['email' => 'The provided credentials are incorrect.']));\n\nthrow ValidationException::withMessages([\n'email' => [trans('auth.failed')],\n]);\n}\n\nreturn $user;\n}", "CodeBleu_score": 41.700766403850196}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->limiter->increment($request);\n\n\nthrow ValidationException::withMessages([\n'email' => [trans('auth.failed')],\n]);\n}", "CodeBleu_score": 89.17727496393344}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\tthrow ValidationException::withMessages([\n'email' => [trans('auth.failed')],\n]);\n}", "CodeBleu_score": 47.02487810543033}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->limiter->increment($request);\n\n\nthrow ValidationException::withMessages([\n'email' => [trans('auth.failed')],\n]);\n}", "CodeBleu_score": 89.17727496393344}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t$user = $request->user();\nif (! $user) {\nreturn redirect(config('fortify.home'));\n}\n$webauthn = Webauthn::create($user);\n$publicKey = $webauthn->generateKey();\nreturn Inertia::render('TwoFactorChallenge', [\n'user' => [\n'id' => $user->id,\n'name' => $user->name,\n'email' => $user->email,\n'uses_two_factor_auth' => $user->two_factor_secret,\n'uses_recovery_codes' => $user->has_recovery_codes(),\n],\n'publicKey' => $publicKey,\n'remember' => $request->filled('remember'),\n]);\n}", "CodeBleu_score": 35.97264809768757}, {"code": "<?\npublic function toResponse($request){\n\t$user = $request->user();\nif (is_null($user)) {\nreturn redirect()->route('login');\n}\n$webauthn = Webauthn::create($user, 'https://example.com');\n$publicKey = $webauthn->getPublicKey();\nreturn Inertia::render('TwoFactorChallenge', [\n'user' => [\n'id' => $user->getAuthIdentifier(),\n'name' => $user->name,\n'email' => $user->email,\n],\n'webauthn' => [\n'id' => $publicKey->getId(),\n'name' => $publicKey->getName(),\n'icon' => $publicKey->getIcon(),\n'credentialId' => $publicKey->getCredentialId(),\n'publicKey' => $publicKey->getPublicKey(),\n'counter' => $publicKey->getCounter(),\n],\n'hasTwoFactorEnabled' => $user->two_factor_enabled,\n'usesRecoveryCodes' => $user->hasRecoveryCodes(),\n'remember' => $request->has('remember'),\n]);\n}", "CodeBleu_score": 33.280060135983454}, {"code": "<?\npublic function toResponse($request){\n\t$user = $request->user();\nif (! $user) {\nreturn redirect(config('fortify.home'));\n}\n$webauthn = Webauthn::create($user);\n$publicKey = $webauthn->generateKey();\nreturn Inertia::render('TwoFactorChallenge', [\n'user' => [\n'id' => $user->id,\n'name' => $user->name,\n'email' => $user->email,\n'uses_two_factor_auth' => $user->two_factor_secret,\n'remember_me' => $request->has('remember'),\n],\n'publicKey' => $publicKey,\n'qrCode' => $webauthn->getQrCodeUrl(config('app.name'), $user->email),\n]);\n}", "CodeBleu_score": 35.56091592260877}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$userToken = UserToken::where('provider', $driver)\n    ->where('provider_id', $socialite->getId())\n    ->first();\n\nif ($userToken) {\n$user = $userToken->user;\n\nif (! $userToken->verified) {\n$userToken->verified = true;\n$userToken->save();\n}\n\n$this->guard->login($user, $request->session()->pull('login.remember', false));\n\nreturn $user;\n}\n\nreturn $this->createNewUser($request, $driver, $socialite);\n}", "CodeBleu_score": 43.37652065859203}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$socialiteId = $socialite->getId();\n\nif (UserToken::where('driver', $driver)->where('socialite_id', $socialiteId)->exists()) {\n$userToken = UserToken::where('driver', $driver)->where('socialite_id', $socialiteId)->first();\n$user = $userToken->user;\n\nif (! $user->email) {\n$user->email = $socialite->getEmail();\n$user->save();\n}\n\nif (! $user->name) {\n$user->name = $socialite->getName();\n$user->save();\n}\n\n$this->guard->login($user, $request->session()->pull('login.remember', false));\n\nreturn $user;\n\n}\n\n\n$user = User::where('email', $socialite->getEmail())->first();\nif (! $user) {\n$user = User::create([\n'name' => $socialite->getName(),\n'email' => $socialite->getEmail(),\n'password' => <PASSWORD>(Str::random(24)),\n]);\n\nevent(new Registered($user));\n\n}\n\n\n$userToken = UserToken::create([\n'user_id' => $user->id,\n'driver' => $driver,\n'socialite_id' => $socialiteId,\n]);\n\n\n$this->guard->login($user, $request->session()->pull('login.remember', false));\n\nreturn $user;\n\n}", "CodeBleu_score": 41.06380739793749}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$socialiteId = $socialite->getId();\n\n// Check if there is an existing user token for the given driver and socialite user ID.\n$userToken = UserToken::query()\n->where('driver', $driver)\n->where('provider_id', $socialiteId)\n->first();\n\n// If found, retrieve the associated user and verify the user association.\nif ($userToken) {\n$user = $userToken->user;\n\nif (! $user->hasVerifiedEmail()) {\n$this->guard->logout();\n\nthrow ValidationException::withMessages([\n'email' => [__('auth.verify_email')],\n]);\n}\n\n$this->verifyUserAssociation($user, $socialiteId, $driver);\n}\n\n// If not, create a new user or associate the socialite token with an existing user.\nelse {\n$user = $this->createOrAssociateUser($request, $socialite);\n}\n\n\nreturn $user;\n}", "CodeBleu_score": 49.1183625205404}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $request->user();\n\nif (! $user) {\nreturn false;\n}\n\n$credentials = $this->filterCredentials($request);\n\nif (! Webauthn::validateAssertion($user, $credentials)) {\n$this->fireFailedEvent($user, $request);\n\nthrow ValidationException::withMessages([\nWebauthnFacade::INVALID_CREDENTIALS => 'The provided credentials could not be verified.',\n]);\n}\n\nreturn true;\n}", "CodeBleu_score": 55.5657417428913}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $request->user();\n\nif (! $user) {\nreturn false;\n}\n\n$credentials = $this->filterCredentials($request);\n\ntry {\nWebauthnFacade::validateAssertion($user, $credentials, $request->input('webauthn_response'));\n} catch (ValidationException $e) {\nevent(new Failed($user, $e->getMessage()));\n\nthrow new AuthenticationException($e->getMessage(), [], $e->getCode());\n}\n\nreturn true;\n}", "CodeBleu_score": 52.852879536473054}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t\n$user = $request->user();\n\nif (! $user) {\nreturn false;\n}\n\n$webauthn = WebauthnFacade::create($user);\n\n$assertion = Webauthn::assertionFromString($request->input('webauthn_assertion'));\n\ntry {\n$webauthn->validateAssertion($assertion, $this->filterCredentials($request));\n} catch (ValidationException $e) {\n$this->guard->logout();\n\nevent(new Failed($user, $e->getMessage()));\n\nthrow $e;\n}\n\n$this->limiter->clear($request);\n\nreturn true;\n}", "CodeBleu_score": 57.70572674225137}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\t$email = $this->option('email');\nif (empty($email)) {\n$this->error('No email address provided');\n\nreturn null;\n}\n\ntry {\nreturn User::where('email', $email)->firstOrFail();\n} catch (ModelNotFoundException $e) {\n$this->error('User not found');\n\nreturn null;\n}\n}", "CodeBleu_score": 65.71150866912427}, {"code": "<?\nprivate function user(): ?User{\n\tif (($email = $this->option('email')) === null) {\n$this->error('No email provided');\n\nreturn null;\n}\n\ntry {\nreturn User::where('email', '=', $email)->firstOrFail();\n} catch (ModelNotFoundException $e) {\n$this->error('Could not find user');\n\nreturn null;\n}\n}", "CodeBleu_score": 77.38495017911468}, {"code": "<?\nprivate function user(): ?User{\n\tif (($email = $this->option('email')) === null) {\n$this->error('No email address provided');\n\nreturn null;\n}\n\ntry {\nreturn User::where('email', $email)->firstOrFail();\n} catch (ModelNotFoundException $e) {\n$this->error('User not found');\n\nreturn null;\n}\n}", "CodeBleu_score": 77.26133988143074}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\t$this->line('');\n$this->line('\u2610 Flushing Scout indexes...');\nif (config('scout.driver') === 'meilisearch' && config('scout.meilisearch.host') !== '') {\n$this->line('');\nforeach (config('scout.meilisearch.indexes') as $index) {\n$this->artisan('\u2610 Flushing index', 'scout:flush', ['--index' => $index, '--verbose' => true]);\n}\n}\n$this->line('');\n$this->info('\u2714 Scout indexes flushed.');\n}", "CodeBleu_score": 34.88380658401461}, {"code": "<?\nprotected function scoutFlush(): void{\n\t$this->comment('\u2610 Flushing Scout indexes...');\n$this->call('scout:flush', ['--model' => config('scout.prefix')]);\n$this->comment('\u2714 Scout indexes flushed.');\n}", "CodeBleu_score": 18.538378864405765}, {"code": "<?\nprotected function scoutFlush(): void{\n\t$this->line('');\n$this->info('\u2610 Flushing Scout indexes');\n$this->line('');\nif (config('scout.driver') !== '' && $this->option('flush')) {\nforeach (config('scout.indexes') as $index) {\n$this->artisan('\u2610 Flushing index', 'scout:flush', ['--index' => $index, '--verbose' => true]);\n}\n}\n$this->line('');\n$this->info('\u2714 Scout indexes flushed');\n}", "CodeBleu_score": 37.42208572130132}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = $this->read($resource);\n$this->applyExporters($resource, $vcard);\n\nreturn $vcard;\n}", "CodeBleu_score": 13.143065220948252}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = $resource->vcard;\n\ntry {\n$vcard = Reader::read($vcard);\n} catch (ParseException $e) {\n$vcard = new VCard();\n}\n\n$vcard = $this->setUid($vcard, $resource);\n$vcard = $this->setBasicInformation($vcard, $resource);\n$vcard = $this->setAdditionalInformation($vcard, $resource);\n$vcard = $this->setRelations($vcard, $resource);\n$vcard = $this->setAddresses($vcard, $resource);\n$vcard = $this->setPhoneNumbers($vcard, $resource);\n$vcard = $this->setEmails($vcard, $resource);\n$vcard = $this->setCategories($vcard, $resource);\n$vcard = $this->setPhotos($vcard, $resource);\n\nreturn $vcard;\n}", "CodeBleu_score": 38.15984518723694}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = $this->read($resource);\n\nforeach (self::exporters() as $exporter) {\n$vcard = $exporter->export($vcard, $resource);\n}\n\nreturn $vcard;\n}", "CodeBleu_score": 16.944718668661228}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$card = $this->getObject($addressBookId, $cardUri);\n\nif ($card === null) {\nreturn false;\n}\n\nif ($card instanceof Contact) {\n$job = new DeleteContact([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $card->vault_id,\n'contact' => $card,\n]);\n} elseif ($card instanceof Group) {\n$job = new DeleteGroup([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $card->vault_id,\n'group' => $card,\n]);\n} else {\nreturn false;\n}\n\nBus::batch([$job])\n->allowFailures()\n->onQueue('high')\n->dispatch();\n\nreturn true;\n}", "CodeBleu_score": 64.34483783313138}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$vault = $this->user->vaults()\n->wherePivot('permission', '<=', Vault::PERMISSION_EDIT)\n->findOrFail($addressBookId);\n\nif (Contact::where('vault_id', $vault->id)->where('uri', $cardUri)->exists()) {\n$job = new DestroyVCard([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $vault->id,\n'uri' => $cardUri,\n]);\n\nBus::batch([$job])\n->allowFailures()\n->onQueue('high')\n->dispatch();\n} elseif (Group::where('vault_id', $vault->id)->where('uri', $cardUri)->exists()) {\n$job = new DestroyGroup([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $vault->id,\n'uri' => $cardUri,\n]);\n\nBus::batch([$job])\n->allowFailures()\n->onQueue('high')\n->dispatch();\n} else {\nreturn false;\n}\n\nreturn true;\n}", "CodeBleu_score": 49.833833772866186}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$object = $this->getObject($addressBookId, $cardUri);\n\nif ($object === null) {\nreturn false;\n}\n\nif ($object instanceof Contact) {\nBus::batch([new DestroyVCard([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $object->vault_id,\n'uri' => $object->uri,\n])])\n->allowFailures()\n->onQueue('high')\n->dispatch();\n} elseif ($object instanceof Group) {\nBus::batch([new DestroyVCard([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $object->vault_id,\n'uri' => $object->uri,\n])])\n->allowFailures()\n->onQueue('high')\n->dispatch();\n} else {\nreturn false;\n}\n\nreturn true;\n}", "CodeBleu_score": 67.31325950081512}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\tif (! $this->request->hasFile('file')) {\nreturn;\n}\n\n$leadActivity = $this->activityRepository->create([\n'name' => $data['name'],\n'activity_type' => $data['activity_type'],\n'user_id' => auth()->guard('user')->user()->id,\n'order_id' => $data['order_id'],\n'additional' => $data['additional']\n]);\n\n$file = $this->create([\n'lead_activity_id' => $leadActivity->id,\n'name' => $this->request->file('file')->getClientOriginalName(),\n'path' => $this->request->file('file')->store('uploads/leads/activities')\n]);\n\nreturn $file;\n}", "CodeBleu_score": 57.61493179730073}, {"code": "<?\npublic function upload(array $data){\n\tif (! $data['file']) {\nreturn;\n}\n\n$file = $data['file'];\n\n$leadActivity = $this->activityRepository->create([\n'name' => $data['name'],\n'activity_type' => $data['activity_type'],\n'user_id' => auth()->guard('user')->user()->id,\n'lead_id' => $data['lead_id'],\n]);\n\n$file = $this->model->create([\n'name' => $file->getClientOriginalName(),\n'path' => $file->store('public/uploads/leads/' . $data['lead_id']),\n'activity_id' => $leadActivity->id,\n]);\n\nreturn $file;\n}", "CodeBleu_score": 54.05856737388919}, {"code": "<?\npublic function upload(array $data){\n\t$file = $data['file'] ?? null;\n\nif (! $file) {\nreturn;\n}\n\n$data['type'] = $data['type'] ?? 'file';\n$data['user_id'] = $data['user_id'] ?? auth()->guard('customer')->user()->id;\n$data['name'] = $data['name'] ?? $file->getClientOriginalName();\n$data['path'] = $data['path'] ?? $file->store('uploads/files');\n$data['size'] = $data['size'] ?? $file->getSize();\n$data['extension'] = $data['extension'] ?? $file->extension();\n\n$leadActivity = $this->activityRepository->create($data);\n\nreturn $this->create([\n'lead_activity_id' => $leadActivity->id,\n'name' => $file->getClientOriginalName(),\n'path' => $data['path'],\n]);\n}", "CodeBleu_score": 48.84009710706666}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t", "CodeBleu_score": 5.526315789473684}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t$status = 500;\n$message = $this->jsonErrorMessages[$status];\n\nif ($exception instanceof HttpException) {\n$status = $exception->getStatusCode();\n$message = $exception->getMessage();\n}\n\nif ($exception instanceof ModelNotFoundException) {\n$status = 404;\n$message = $this->jsonErrorMessages[$status];\n}\n\nif ($exception instanceof PDOException) {\n$status = 500;\n$message = $this->jsonErrorMessages[$status];\n}\n\nif ($exception instanceof ParseError) {\n$status = 500;\n$message = $this->jsonErrorMessages[$status];\n}\n\nif (request()->is('admin*')) {\nreturn redirect()->route('admin.session.create');\n}\n\nreturn response()->view('shop::errors.default', compact('status', 'message'), $status);\n}", "CodeBleu_score": 44.849491071068535}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t$statusCode = $exception instanceof HttpException ? $exception->getStatusCode() : 500;\n$requestUri = request()->getUri();\n\nif (strpos($requestUri, '/admin') !== false) {\nif ($statusCode == 404) {\nreturn response()->view('admin::errors.404', [], $statusCode);\n} elseif ($statusCode == 403) {\nreturn response()->view('admin::errors.403', [], $statusCode);\n} elseif ($statusCode == 401) {\nreturn response()->view('admin::errors.401', [], $statusCode);\n}\n} else {\nif ($statusCode == 404) {\nreturn response()->view('shop::errors.404', [], $statusCode);\n} elseif ($statusCode == 403) {\nreturn response()->view('shop::errors.403', [], $statusCode);\n} elseif ($statusCode == 401) {\nreturn redirect()->route('customer.session.index');\n}\n}\n\nif ($exception instanceof ModelNotFoundException) {\nreturn response()->json(['message' => $this->jsonErrorMessages[404]], 404);\n} elseif ($exception instanceof PDOException) {\nreturn response()->json(['message' => $this->jsonErrorMessages[500]], 500);\n} elseif ($exception instanceof ParseError) {\nreturn response()->json(['message' => $this->jsonErrorMessages[500]], 500);\n}\n\nreturn parent::render($request, $exception);\n}", "CodeBleu_score": 41.93407539813313}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\t$message = $this->jsonErrorMessages[$statusCode];\n\nif (request()->expectsJson()) {\nreturn response()->json(['message' => $message], $statusCode);\n}\n\nreturn response()->view(\"admin::{$path}.error\", compact('message', 'statusCode'), $statusCode);\n}", "CodeBleu_score": 56.17392639454738}, {"code": "<?\nprivate function response($path, $statusCode){\n\t$message = $this->jsonErrorMessages[$statusCode] ?? trans('admin::app.common.error');\n\nif (request()->expectsJson()) {\nreturn response()->json(['message' => $message], $statusCode);\n}\n\nreturn view(\"{$path}.error\", compact('statusCode', 'message'));\n}", "CodeBleu_score": 48.43110250664891}, {"code": "<?\nprivate function response($path, $statusCode){\n\t$message = trans('admin::app.common.error');\n\nif (isset($this->jsonErrorMessages[$statusCode])) {\n$message = $this->jsonErrorMessages[$statusCode];\n}\n\nif (request()->expectsJson()) {\nreturn response()->json(['message' => $message], $statusCode);\n}\n\nreturn view(\"{$path}.error\", compact('statusCode', 'message'));\n}", "CodeBleu_score": 53.059451931937026}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t$activityIds = explode(',', request('activity_ids'));\n\n$updatedActivities = 0;\n\nforeach ($activityIds as $activityId) {\n$activity = $this->activityRepository->find($activityId);\n\nEvent::dispatch('activity.update.before', $activity);\n\n$activity = $this->activityRepository->update(request()->all(), $activity->id);\n\nEvent::dispatch('activity.update.after', $activity);\n\n$updatedActivities++;\n}\n\nif (request()->ajax()) {\nreturn response()->json([\n'message' => trans('admin::app.activities.mass-update-success', ['count' => $updatedActivities]),\n]);\n} else {\nsession()->flash('success', trans('admin::app.activities.mass-update-success', ['count' => $updatedActivities]));\n\nreturn redirect()->route('admin.activities.index');\n}\n}", "CodeBleu_score": 48.591408118636046}, {"code": "<?\npublic function massUpdate(){\n\t$activityIds = explode(',', request('ids'));\n$activitiesUpdated = 0;\n\nforeach ($activityIds as $activityId) {\n$activity = $this->activityRepository->find($activityId);\n\nif ($activity) {\nEvent::dispatch('activity.update.before', $activity);\n\n$activity = $this->activityRepository->update(array_merge(request()->all(), ['is_done' => 1]), $activity->id);\n\nEvent::dispatch('activity.update.after', $activity);\n\n$activitiesUpdated++;\n}\n}\n\nif (request()->ajax()) {\nreturn response()->json([\n'message' => trans('admin::app.activities.mass-update-success', ['count' => $activitiesUpdated]),\n]);\n} else {\nsession()->flash('success', trans('admin::app.activities.mass-update-success', ['count' => $activitiesUpdated]));\n\nreturn redirect()->route('admin.activities.index');\n}\n}", "CodeBleu_score": 48.215593466755955}, {"code": "<?\npublic function massUpdate(){\n\t$activityIds = request('indexes') ?: request('ids');\n\n$activities = $this->activityRepository->findWhereIn('id', $activityIds);\n\n\n$updatedActivities = 0;\n\nforeach ($activities as $activity) {\nif ($activity->is_done != request('is_done')) {\nEvent::dispatch('activity.update.before', $activity);\n\n$activity->update(['is_done' => request('is_done')]);\n\nEvent::dispatch('activity.update.after', $activity);\n\n$updatedActivities++;\n}\n}\n\nif (request()->ajax()) {\nreturn response()->json([\n'message' => trans('admin::app.activities.mass-update-success', ['type' => trans('admin::app.activities.' . $activity->type), 'count' => $updatedActivities]),\n]);\n} else {\nsession()->flash('success', trans('admin::app.activities.mass-update-success', ['type' => trans('admin::app.activities.' . $activity->type), 'count' => $updatedActivities]));\n\nreturn redirect()->route('admin.activities.index');\n}\n}", "CodeBleu_score": 45.95833427656596}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t\n$count = 0;\n\nforeach (request('rows') as $activityId) {\n\nEvent::dispatch('activity.delete.before', $activityId);\n\n$this->activityRepository->delete($activityId);\n\nEvent::dispatch('activity.delete.after', $activityId);\n\n$count++;\n}\n\nif (! $count) {\n\nreturn response()->json([\n'message' => trans('admin::app.activities.mass-destroy-failed'),\n], 400);\n}\n\nreturn response()->json([\n'message' => trans('admin::app.activities.mass-destroy-success'),\n]);\n}", "CodeBleu_score": 52.06528722816452}, {"code": "<?\n public function massDestroy(){\n\t $count = 0;\n\n $data = request()->all();\n\n foreach (request('rows') as $activityId) {\n Event::dispatch('activity.delete.before', $activityId);\n\n $this->activityRepository->delete($activityId);\n\n Event::dispatch('activity.delete.after', $activityId);\n\n $count++;\n }\n\n if (! $count) {\n return response()->json([\n 'message' => trans('admin::app.activities.mass-destroy-failed'),\n ], 400);\n }\n\n return response()->json([\n 'message' => trans('admin::app.activities.mass-destroy-success'),\n ]);\n }", "CodeBleu_score": 51.17653546713269}, {"code": "<?\n public function massDestroy(){\n\t$count = 0;\n\nforeach (request('rows') as $activityId) {\nEvent::dispatch('activity.delete.before', $activityId);\n\n$this->activityRepository->delete($activityId);\n\nEvent::dispatch('activity.delete.after', $activityId);\n\n$count++;\n}\n\nif (! $count) {\nreturn response()->json([\n'message' => trans('admin::app.activities.mass-destroy-failed'),\n], 400);\n}\n\nreturn response()->json([\n'message' => trans('admin::app.activities.mass-destroy-success'),\n]);\n}", "CodeBleu_score": 52.02515003336898}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t $cards = $this->dashboardHelper->getCards();\n $cardData = request()->get('cards');\n\n foreach ($cards as $card) {\n foreach ($cardData as $data) {\n if ($card['id'] == $data['id']) {\n $card['selected'] = $data['selected'];\n }\n }\n }\n\n return response()->json($cards);\n }", "CodeBleu_score": 40.1371078320132}, {"code": "<?\n public function updateCards(){\n\t $cards = $this->dashboardHelper->getCards();\n $cards = array_map(function ($card) {\n if ($card['view_url'] ?? false) {\n $card['view_url'] = route($card['view_url'], $card['url_params'] ?? []);\n }\n return $card;\n }, $cards);\n $requestCards = request('cards');\n $requestCards = json_decode($requestCards, true);\n $cards = collect($cards)->map(function ($card) use ($requestCards) {\n $card['selected'] = collect($requestCards)->contains(function ($requestCard) use ($card) {\n return $requestCard['card_id'] == $card['card_id'];\n });\n return $card;\n })->values()->all();\n return response()->json($cards);\n }", "CodeBleu_score": 41.32814628378556}, {"code": "<?\n public function updateCards(){\n\t $cards = $this->dashboardHelper->getCards();\n $requestData = request()->all();\n\n foreach ($cards as $card) {\n foreach ($requestData as $requestCard) {\n if ($card['name'] === $requestCard['name']) {\n $card['selected'] = $requestCard['selected'];\n }\n }\n }\n\n return response()->json($cards);\n }", "CodeBleu_score": 44.56978277516014}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t$config = $this->configurationRepository->create(request()->all());\n\nEvent::dispatch('admin.configuration.create.after', $config);\n\nsession()->flash('success', trans('admin::app.configuration.save-message'));\n\nreturn redirect()->back();\n}", "CodeBleu_score": 48.807717630659674}, {"code": "<?\npublic function store(){\n\t$data = request()->all();\n\nEvent::dispatch('admin.configuration.create.before');\n$this->configurationRepository->create($data);\nEvent::dispatch('admin.configuration.create.after');\n\nsession()->flash('success', trans('admin::app.configuration.save-message'));\n\nreturn redirect(url()->previous());\n}", "CodeBleu_score": 44.227699862978916}, {"code": "<?\npublic function store(){\n\t$config = app('core_config');\n$validator = app('validator');\n$code = app('code');\n$this->validate(request(), [\n'key' => 'required',\n'value' => 'required',\n]);\n\n$data = request()->all();\n\nif (request()->hasFile('value')) {\n$data['value'] = Storage::putFile('configuration', request()->file('value'));\n}\n\n$validator->validate($data['key'], $data['value']);\n\nif (request()->has('is_use_in_flat')) {\n$data['is_use_in_flat'] = 1;\n} else {\n$data['is_use_in_flat'] = 0;\n}\n\nif (request()->has('is_user_defined')) {\n$data['is_user_defined'] = 1;\n} else {\n$data['is_user_defined'] = 0;\n}\n\n$config->create($data);\n\nEvent::dispatch('admin.configuration.create.after', $data);\n\nsession()->flash('success', trans('admin::app.configuration.save-message'));\n\nreturn redirect(url()->previous());\n}", "CodeBleu_score": 28.60863691892859}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t$filePath = request()->get('path');\n\n$fileName = basename($filePath);\n\n$configuration = $this->configurationRepository->findOneByField('value', $filePath);\n\nif ($configuration) {\nreturn response()->download(Storage::path($filePath), $fileName);\n} else {\nabort(404);\n}\n}", "CodeBleu_score": 45.10290927067059}, {"code": "<?\npublic function download(){\n\t\n$filePath = request()->input('path');\n$fileName = basename($filePath);\n\n$config = $this->configurationRepository->findOneByField('value', $filePath);\n\nif ($config) {\n\n$file = Storage::get($filePath);\n\nreturn response()->make($file, 200, [\n\n'Content-Type' => $config->mime_type,\n'Content-Disposition' => 'attachment; filename=\"' . $fileName . '\"'\n]);\n}\n\nreturn response()->json(['message' => 'File not found.'], 404);\n}", "CodeBleu_score": 44.5408082778164}, {"code": "<?\npublic function download(){\n\t$filePath = $this->configurationRepository->findOneByField(\\Illuminate\\Support\\Facades\\Config::get('core.system.config.path'), request()->get('path'));\n\nif (! $filePath) {\nabort(404);\n}\n\n$fileName = pathinfo($filePath->value, PATHINFO_BASENAME);\n\nreturn Storage::download($filePath->value, $fileName);\n}", "CodeBleu_score": 44.81182276343021}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tadminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()).eq(AdminModelSort::getType, 1));\nList<AdminModelSort> modelSortList = new ArrayList<>();\nfor (String model : list) {\nAdminModelSort modelSort = new AdminModelSort();\nmodelSort.setModel(model);\nmodelSort.setType(1);\nmodelSort.setUserId(UserUtil.getUserId());\nmodelSortList.add(modelSort);\n}\nadminModelSortService.saveBatch(modelSortList);\nreturn Result.ok();\n}", "CodeBleu_score": 46.7681521893672}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tadminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()).eq(AdminModelSort::getType, 1));\nList<AdminModelSort> adminModelSorts = new ArrayList<>();\nfor (String model : list) {\nAdminModelSort adminModelSort = new AdminModelSort();\nadminModelSort.setModel(model);\nadminModelSort.setType(1);\nadminModelSort.setUserId(UserUtil.getUserId());\nadminModelSorts.add(adminModelSort);\n}\nadminModelSortService.saveBatch(adminModelSorts);\nreturn Result.ok();\n}", "CodeBleu_score": 47.87219538547511}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\t// First, create a list of AdminModelSort objects with specified attributes.\n\tList<AdminModelSort> adminModelSortList = new ArrayList<>();\n\tfor (String model : list) {\n\t\tAdminModelSort adminModelSort = new AdminModelSort();\n\t\tadminModelSort.setModel(model);\n\t\tadminModelSort.setType(1);\n\t\tadminModelSort.setUserId(UserUtil.getUserId());\n\t\tadminModelSortList.add(adminModelSort);\n\t}\n\t// Second, remove existing sort settings for the user.\n\tadminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()));\n\t// Third, save the new sort settings in batch.\n\tadminModelSortService.saveBatch(adminModelSortList);\n\treturn Result.ok();\n}", "CodeBleu_score": 46.402990724365544}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getId());\nif (adminConfig.getModule() == AdminModuleEnum.CRM.getModule()) {\nreturn Result.error(AdminCodeEnum.ERROR_CRM_MODULE_SETTING_UPDATE);\n}\nadminConfig.setStatus(moduleSetting.getStatus());\nadminConfigService.updateById(adminConfig);\nreturn Result.ok();\n}", "CodeBleu_score": 64.99680782208394}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getId());\nif (adminConfig == null) {\nreturn Result.error(AdminCodeEnum.ADMIN_MODULE_SETTING_NOT_EXIST);\n}\nif (AdminModuleEnum.CRM.getValue().equals(adminConfig.getModule())) {\nreturn Result.error(AdminCodeEnum.ADMIN_MODULE_SETTING_NOT_UPDATE);\n}\nadminConfig.setStatus(moduleSetting.getStatus());\nadminConfigService.updateById(adminConfig);\nreturn Result.ok();\n}", "CodeBleu_score": 65.5552343454986}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getId());\nif (adminConfig == null) {\nreturn R.error(AdminCodeEnum.CONFIG_NOT_EXIST.getCode(), AdminCodeEnum.CONFIG_NOT_EXIST.getMessage());\n}\nif (AdminConst.MODULE_CRM.equals(adminConfig.getModule())) {\nreturn R.error(AdminCodeEnum.CONFIG_CAN_NOT_UPDATE.getCode(), AdminCodeEnum.CONFIG_CAN_NOT_UPDATE.getMessage());\n}\nadminConfig.setStatus(moduleSetting.getStatus());\nadminConfigService.updateById(adminConfig);\nreturn R.ok();\n}", "CodeBleu_score": 56.548007568499116}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(customKey);\n if (userConfig == null) {\n return Result.ok(new JSONArray());\n }\n userConfig.setValue(json.toJSONString());\n adminUserConfigService.save(userConfig);\n return Result.ok();\n }", "CodeBleu_score": 45.32009259293648}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(customKey);\n if (userConfig == null) {\n adminUserConfigService.saveUserConfig(customKey, json.toJSONString());\n return Result.ok();\n }\n userConfig.setValue(json.toJSONString());\n adminUserConfigService.updateById(userConfig);\n return Result.ok();\n }", "CodeBleu_score": 51.29294173582763}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(customKey);\n if (userConfig == null) {\n return Result.ok(new JSONArray());\n }\n userConfig.setValue(json.toJSONString());\n adminUserConfigService.updateById(userConfig);\n return Result.ok();\n }", "CodeBleu_score": 45.8810015647582}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\tAdminUser adminUser = adminUserService.getById(userId);\nif (adminUser == null)  {\nreturn R.error(AdminCodeEnum.ADMIN_USER_NOT_EXIST);\n}\nString deptName = deptService.getNameByDeptId(adminUser.getDeptId());\nadminUser.setDeptName(deptName);\nadminUser.setParentName(UserCacheUtil.getUserName(adminUser.getParentId()));\nadminUser.setPassword(<PASSWORD>);\nadminUser.setSalt(null);\nreturn R.ok(adminUser);\n}", "CodeBleu_score": 48.23375190689252}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\tAdminUser adminUser = adminUserService.getById(userId);\nif (adminUser == null) {\nreturn R.error(AdminCodeEnum.USER_NOT_EXIST);\n}\nAdminUserVO adminUserVO = BeanUtil.copyProperties(adminUser, AdminUserVO.class);\nadminUserVO.setDeptName(deptService.getNameByDeptId(adminUser.getDeptId()));\nadminUserVO.setParentName(UserCacheUtil.getUserName(adminUser.getParentId()));\nadminUserVO.setSalt(null);\nadminUserVO.setPassword(null);\nreturn R.ok(adminUserVO);\n}", "CodeBleu_score": 48.0837176435292}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\tAdminUser adminUser = adminUserService.getById(userId);\nif (adminUser == null) {\nreturn R.error(AdminCodeEnum.USER_NOT_EXIST);\n}\nAdminUserVO adminUserVO = BeanUtil.copyProperties(adminUser, AdminUserVO.class);\nadminUserVO.setDeptName(deptService.getNameByDeptId(adminUser.getDeptId()));\nadminUserVO.setParentName(UserCacheUtil.getUserName(adminUser.getParentId()));\nadminUserVO.setSalt(null);\nadminUserVO.setPassword(null);\nreturn R.ok(adminUserVO);\n}", "CodeBleu_score": 48.0837176435292}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(\"readNotice\");\n if (userConfig != null && userConfig.getStatus() == 1) {\n return R.ok();\n }\n AdminUser adminUser = adminUserService.getById(UserUtil.getUserId());\n if (adminUser == null) {\n throw new NoLoginException();\n }\n adminUserConfigService.updateUserConfig(adminUser.getUserId(), \"readNotice\", 1);\n return R.ok();\n }", "CodeBleu_score": 22.72325191997679}, {"code": " public Result readNotice() {\n\t AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(\"readNotice\");\n if (userConfig == null) {\n userConfig = new AdminUserConfig();\n userConfig.setUserId(UserUtil.getUserId());\n userConfig.setName(\"readNotice\");\n userConfig.setStatus(1);\n adminUserConfigService.save(userConfig);\n return R.ok();\n }\n if (userConfig.getStatus() == 1) {\n return R.ok();\n }\n userConfig.setStatus(1);\n adminUserConfigService.updateById(userConfig);\n return R.ok();\n }", "CodeBleu_score": 31.707982219384846}, {"code": " public Result readNotice() {\n\t AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(name);\n if (userConfig == null) {\n userConfig = new AdminUserConfig();\n userConfig.setUserId(UserUtil.getUserId());\n userConfig.setName(name);\n userConfig.setStatus(1);\n adminUserConfigService.save(userConfig);\n } else {\n userConfig.setStatus(1);\n adminUserConfigService.updateById(userConfig);\n }\n return R.ok();\n }", "CodeBleu_score": 24.84557311989926}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\tAdminConfig adminConfig = queryConfigByName(AdminConst.ADMIN_CONFIG_COMPANY_INFO);\n\tif (adminConfig == null) {\n\t\tadminConfig = new AdminConfig();\n\t\tadminConfig.setName(AdminConst.ADMIN_CONFIG_COMPANY_INFO);\n\t\tadminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n\t\tadminConfig.setRemark(AdminConst.ADMIN_CONFIG_COMPANY_INFO_REMARK);\n\t\tadminConfig.setSort(0);\n\t\tadminConfig.setModule(AdminModuleEnum.SYSTEM.getModule());\n\t\tsave(adminConfig);\n\t} else {\n\t\tadminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n\t\tupdateById(adminConfig);\n\t}\n}", "CodeBleu_score": 40.21647601000529}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t//        List<AdminConfig> adminConfigList = queryConfigListByName(logConfigName);\n//        AdminConfig adminConfig = null;\n//        if (CollUtil.isEmpty(adminConfigList)) {\n//            adminConfig = new AdminConfig();\n//            adminConfig.setName(logConfigName);\n//            adminConfig.setValue(JSON.toJSONString(new LogWelcomeSpeechBO()));\n//            adminConfig.setModule(AdminModuleEnum.ADMIN_LOG.getModule());\n//            adminConfig.setRemark(\\\"\u65e5\u5fd7\u6b22\u8fce\u8bed\u8bbe\u7f6e\\\");\n//            adminConfig.setSort(0);\n//            adminConfig.setEnable(AdminConst.ADMIN_CONFIG_ENABLE);\n//            adminConfig.setCreator(UserUtil.getCurrentUser().getId());\n//            adminConfig.setCreateTime(new Date());\n//            adminConfig.setUpdater(UserUtil.getCurrentUser().getId());\n//            adminConfig.setUpdateTime(new Date());\n//            save(adminConfig);\n//        } else {\n//            adminConfig = adminConfigList.get(0);\n//        }\n//        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n//        updateById(adminConfig);\n}", "CodeBleu_score": 1.7832668431601406}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\tAdminConfig adminConfig = queryConfigListByName(AdminConst.ADMIN_CONFIG_COMPANY_INFO).get(0);\nif (adminConfig == null) {\nadminConfig = new AdminConfig();\nadminConfig.setName(AdminConst.ADMIN_CONFIG_COMPANY_INFO);\nadminConfig.setSort(10);\nadminConfig.setValue(\\\"{\\\\\\\"companyName\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"companyAddress\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"companyTel\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"companyFax\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"companyEmail\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"companyWebsite\\\\\\\":\\\\\\\"\\\\\\\"}\\\");\nsave(adminConfig);\n}\nadminConfig.setValue(JSON.toJSONString(adminCompanyBO));\nupdateById(adminConfig);\n}", "CodeBleu_score": 46.198489047374935}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\tString companyKey = \\\"companyInfo\\\";\nAdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\\\" limit 1\\\").one();\nif (adminConfig == null) {\nreturn new AdminCompanyBO();\n}\nAdminCompanyBO adminCompanyBO = JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\nreturn adminCompanyBO;\n}", "CodeBleu_score": 30.18476457440021}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tString companyKey = \\\"companyInfo\\\";\n\tAdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\\\" limit 1\\\").one();\n\tif (adminConfig != null) {\n\t\treturn JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n\t}\n\treturn new AdminCompanyBO();\n}", "CodeBleu_score": 27.659393475810784}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tString companyKey = \"companyInfo\";\n\tAdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\" limit 1\").one();\n\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n\tif (adminConfig != null) {\n\t\tadminCompanyBO = JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n\t}\n\treturn adminCompanyBO;\n}", "CodeBleu_score": 96.93830023823207}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t AdminConfig adminConfig = new AdminConfig();\n adminConfig.setName(logConfigName);\n adminConfig.setDescription(\\\"\u65e5\u5fd7\u6b22\u8fce\u8bed\\\");\n adminConfig.setValue(JSON.toJSONString(stringList));\n adminConfig.setStatus(1);\n remove(new QueryWrapper<AdminConfig>().eq(AdminConfig.NAME, logConfigName));\n saveBatch(CollUtil.newArrayList(adminConfig));\n }", "CodeBleu_score": 30.044021574108644}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t AdminConfig adminConfig = new AdminConfig();\n adminConfig.setName(logConfigName);\n adminConfig.setValue(JSON.toJSONString(stringList));\n adminConfig.setDescription(\\\"\u65e5\u5fd7\u6b22\u8fce\u8bed\u8bbe\u7f6e\\\");\n adminConfig.setStatus(1);\n remove(new QueryWrapper<AdminConfig>().eq(AdminConfig::getName, logConfigName));\n saveBatch(CollUtil.newArrayList(adminConfig));\n }", "CodeBleu_score": 29.740968093032016}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t // Get the existing configurations\n List<AdminConfig> existingConfigs = queryConfigListByName(logConfigName);\n // If there are any existing configurations, delete them\n if (CollUtil.isNotEmpty(existingConfigs)) {\n removeByIds(existingConfigs.stream().map(AdminConfig::getId).collect(Collectors.toList()));\n }\n // Create new AdminConfig objects for each string\n List<AdminConfig> newConfigs = stringList.stream().map(string -> {\n AdminConfig newConfig = new AdminConfig();\n newConfig.setName(logConfigName);\n newConfig.setDescription(string);\n return newConfig;\n }).collect(Collectors.toList());\n // Save the new configurations\n saveBatch(newConfigs);\n }", "CodeBleu_score": 36.63116397890735}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tAdminUser adminUser = adminUserService.queryByUsername(adminInitDataBO.getUsername());\n\tif (adminUser == null) {\n\t\tthrow new CustomException(AdminResponseEnum.USERNAME_NOT_EXIST);\n\t}\n\tif (!passwordEncoder.matches(adminInitDataBO.getPassword(), adminUser.getPassword())) {\n\t\tthrow new CustomException(AdminResponseEnum.PASSWORD_ERROR);\n\t}\n\tString token = jwtTokenUtil.generateToken(adminUser.getUserId());\n\tredisUtil.set(AdminRedisKeyEnum.ADMIN_TOKEN.getKey() + adminUser.getUserId(), token, 600L);\n\treturn token;\n}", "CodeBleu_score": 28.76844525103856}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString username = adminInitDataBO.getUsername();\n\tString password = <PASSWORD>();\n\t// Query user information based on username\n\tAdminUser adminUser = adminUserService.queryAdminUserByName(username);\n\tif (adminUser == null) {\n\t\tthrow new AdminServiceException(AdminResponseCode.ADMIN_USER_NOT_EXIST, MessageConf.ADMIN_USER_NOT_EXIST);\n\t}\n\t// Verify that the password is correct\n\tif (!passwordEncoder.matches(password, adminUser.getPassword())) {\n\t\tthrow new AdminServiceException(AdminResponseCode.ADMIN_PASSWORD_ERROR, MessageConf.ADMIN_PASSWORD_ERROR);\n\t}\n\t// Generate a temporary access code\n\tString accessCode = UUID.randomUUID().toString().replace(\\\"-\\\", \\\"\\\");\n\t// Store the access code in Redis with a 10-minute expiration\n\tredisUtil.set(AdminRedisKeyConf.ADMIN_ACCESS_CODE + adminUser.getUserId(), accessCode, 10, TimeUnit.MINUTES);\n\t// Return the access code\n\treturn accessCode;\n}", "CodeBleu_score": 27.174025213858965}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t//        String username = adminInitDataBO.getUsername();\n//        String password = <PASSWORD>InitDataBO.getPassword();\n//        String captcha = adminInitDataBO.getCaptcha();\n//        String captchaId = adminInitDataBO.getCaptchaId();\n//        String captchaCode = redisUtil.get(captchaId);\n//        if (!captcha.equals(captchaCode)) {\n//            throw new ServiceException(AdminResponseEnum.CAPTCHA_ERROR);\n//        }\n//        AdminUser adminUser = adminUserService.queryAdminUserByUsername(username);\n//        if (adminUser == null) {\n//            throw new ServiceException(AdminResponseEnum.USER_NOT_EXIST);\n//        }\n//        if (!passwordEncoder.matches(password, adminUser.getPassword())) {\n//            throw new ServiceException(AdminResponseEnum.PASSWORD_ERROR);\n//        }\n//        String accessCode = IdUtil.simpleUUID();\n//        redisUtil.set(accessCode, adminUser.getUserId(), 600L);\n//        return accessCode;\n}", "CodeBleu_score": 1.5532064197863735}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t\tLong userId = UserUtil.getUserId();\n\tString cacheName = AdminCacheKey.UNAUTHORIZED_URL_CACHE_KEY + userId;\n\tList<String> unauthorizedUrlList = BaseUtil.getRedis().sMembers(cacheName);\n\tString initAuthUrl = \\\"/admin/\\\" + INIT_AUTH_URL;\n\tif (CollUtil.isEmpty(unauthorizedUrlList) || !unauthorizedUrlList.contains(initAuthUrl)) {\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 43.38649361965425}, {"code": "private boolean verifyInitAuth(){\n\t\tLong userId = UserUtil.getUserId();\n\tString cacheName = AdminCacheKey.ADMIN_INIT_AUTH_CACHE_KEY + userId;\n\tList<String> urlList = BaseUtil.getRedis().lrange(cacheName, 0, -1);\n\tString url = request.getRequestURI();\n\tif (StrUtil.isNotBlank(url) && urlList.contains(url)) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 46.24359405489122}, {"code": "private boolean verifyInitAuth(){\n\tLong userId = UserUtil.getUserId();\nString cacheName = AdminCacheKey.ADMIN_INIT_AUTH_URL_CACHE_KEY + userId;\nList<String> unauthorizedMenuUrlList = BaseUtil.getRedis().lGet(cacheName, String.class);\nString initAuthUrl = \\\"/adminConfig/moduleInitData\\\";\nif (CollUtil.isEmpty(unauthorizedMenuUrlList)) {\n// The cache does not exist, or the cache has expired\nList<AdminMenu> adminMenuList = adminMenuService.list();\nList<String> menuUrlList = adminMenuList.stream().map(AdminMenu::getUrl).collect(Collectors.toList());\nunauthorizedMenuUrlList = menuUrlList.stream().filter(url -> !url.equals(initAuthUrl)).collect(Collectors.toList());\nBaseUtil.getRedis().lSet(cacheName, unauthorizedMenuUrlList, 3600);\n}\nreturn unauthorizedMenuUrlList.contains(initAuthUrl);\n}", "CodeBleu_score": 36.8217096508538}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t// 1. Create a list of AdminRoleMenu objects.\nList<AdminRoleMenu> roleMenuList = new ArrayList<>();\nfor (Integer menuId : menuIdList) {\nAdminRoleMenu roleMenu = new AdminRoleMenu();\nroleMenu.setRoleId(roleId);\nroleMenu.setMenuId(menuId);\nroleMenuList.add(roleMenu);\n}\n// 2. Save the list of role-menu associations in batches.\nthis.saveBatch(roleMenuList);\n}", "CodeBleu_score": 53.15615616652962}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t//        List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n//        for (Integer menuId : menuIdList) {\n//            AdminRoleMenu roleMenu = new AdminRoleMenu();\n//            roleMenu.setRoleId(roleId);\n//            roleMenu.setMenuId(menuId);\n//            roleMenuList.add(roleMenu);\n//        }\n//        this.saveBatch(roleMenuList);\n}", "CodeBleu_score": 8.503720271029366}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\tList<AdminRoleMenu> roleMenuList = new ArrayList<>();\nfor (Integer menuId : menuIdList) {\nAdminRoleMenu roleMenu = new AdminRoleMenu();\nroleMenu.setRoleId(roleId);\nroleMenu.setMenuId(menuId);\nroleMenuList.add(roleMenu);\n}\nsaveBatch(roleMenuList);\n}", "CodeBleu_score": 53.012875844659476}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\t//        // 1. Retrieve the log index.\nString index = getIndexAliases(SYS_LOG_TYPE);\n//        // 2. Convert the log object to a map.\nMap<String, Object> map = BeanUtil.beanToMap(sysLog);\n//        // 3. Format the creation time.\nmap.put(\\\"createTime\\\", DateUtil.formatDateTime(sysLog.getCreateTime()));\n//        // 4. Remove the ID.\nmap.remove(\\\"id\\\");\n//        // 5. Create an index request and submit it to the Elasticsearch client.\nIndexRequest indexRequest = new IndexRequest(index).source(map);\n        try {\n            IndexResponse indexResponse = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n            log.info(\\\"\u65e5\u5fd7\u4fdd\u5b58\u6210\u529f\uff0c\u65e5\u5fd7ID\uff1a{}\\\");\n        } catch (IOException e) {\n            log.error(\\\"\u65e5\u5fd7\u4fdd\u5b58\u5931\u8d25\uff0c\u65e5\u5fd7ID\uff1a{}\uff0c\u539f\u56e0\uff1a{}\\\", sysLog.getId(), e);\n        }\n    }", "CodeBleu_score": 51.850901896648914}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t\nString indexAliases = getIndexAliases(SYS_LOG_TYPE);\n\nGetIndexRequest getIndexRequest = new GetIndexRequest(indexAliases);\n\ntry {\n\nif (!restHighLevelClient.indices().exists(getIndexRequest, RequestOptions.DEFAULT)) {\n\nCreateIndexRequest createIndexRequest = new CreateIndexRequest(indexAliases);\n\ncreateIndexRequest.source(SYS_LOG_INDEX_SOURCE, XContentType.JSON);\n\nrestHighLevelClient.indices().create(createIndexRequest, RequestOptions.DEFAULT);\n\n}\n\nMap<String, Object> sysLogMap = BeanUtil.beanToMap(sysLog);\n\nString createTime = (String) sysLogMap.get(\\\"createTime\\\");\n\nif (StrUtil.isNotEmpty(createTime)) {\n\nDateTimeFormatter formatter = DateTimeFormatter.ofPattern(\\\"yyyy-MM-dd HH:mm:ss\\\");\n\nLocalDate localDate = DateUtil.parse(createTime, formatter).toInstant().atZone(ZoneId.systemDefault()).toLocalDate();\n\nsysLogMap.put(\\\"createTime\\\", localDate);\n\n}\n\nsysLogMap.remove(\\\"id\\\");\n\nIndexRequest indexRequest = new IndexRequest(indexAliases).source(sysLogMap, XContentType.JSON);\n\nadminThreadPoolExecutor.execute(() -> {\n\n\nIndexResponse indexResponse = null;\n\n\ntry {\n\n\nindexResponse = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n\n\n} catch (IOException e) {\n\n\nlog.error(\\\"Error while saving system log asynchronously, logId: {}, log: {}, error message: {}\\\", sysLog.getId(), sysLog, e.getMessage());\n\n\n}\n\n\nif (indexResponse != null) {\n\n\nlog.info(\\\"Successfully saved system log asynchronously, logId: {}, log: {}, response: {}\\\", sysLog.getId(), sysLog, indexResponse);\n\n\n}\n\n\n});\n\n\n} catch (IOException e) {\n\n\nlog.error(\\\"Error while saving system log asynchronously, logId: {}, log: {}, error message: {}\\\", sysLog.getId(), sysLog, e.getMessage());\n\n\n}\n\n\n}", "CodeBleu_score": 41.8285694363603}, {"code": "public void saveSysLog(SysLog sysLog) {\n\ttry {\n// Get the index name and convert the log object to a map.\nString indexName = getIndexAliases(SYS_LOG_TYPE);\nMap<String, Object> logMap = BeanUtil.beanToMap(sysLog);\n// Format the creation time.\nString createTime = DateUtil.format(sysLog.getCreateTime(), \\\"yyyy-MM-dd HH:mm:ss\\\");\n// Remove the ID.\nlogMap.remove(\\\"id\\\");\n// Create an index request and submit it to the Elasticsearch client.\nIndexRequest indexRequest = new IndexRequest(indexName).source(logMap, XContentType.JSON);\nIndexResponse indexResponse = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n} catch (IOException e) {\nlog.error(\\\"Failed to save system log asynchronously. LogId: {}\\\", sysLog.getId(), e);\n}\n}", "CodeBleu_score": 33.14148678856451}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\tString index = getSysLogIndex();\nSearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\nsearchSourceBuilder.query(buildQuery(querySysLogBO));\nsearchSourceBuilder.sort(SortBuilders.fieldSort(\\\"createTime\\\").order(SortOrder.DESC));\nsearchSourceBuilder.fetchSource(false, \\\"id\\\");\nSearchRequest searchRequest = new SearchRequest(index);\nsearchRequest.source(searchSourceBuilder);\ntry {\n    SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n    List<SysLog> sysLogList = new ArrayList<>();\n    for (SearchHit hit : searchResponse.getHits().getHits()) {\n        SysLog sysLog = JSON.parseObject(hit.getSourceAsString(), SysLog.class);\n        sysLogList.add(sysLog);\n    }\n    return new BasePage<>(sysLogList, searchResponse.getHits().getTotalHits().value, querySysLogBO.getPageNum(), querySysLogBO.getPageSize());\n} catch (IOException e) {\n    log.error(\\\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\\\", e.getMessage());\n    return new BasePage<>();\n}\n}", "CodeBleu_score": 32.44885915577066}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\tSearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\nsearchSourceBuilder.query(QueryBuilders.boolQuery().must(QueryBuilders.rangeQuery(\\\"createTime\\\").gte(querySysLogBO.getBeginTime()).lte(querySysLogBO.getEndTime()))).sort(SortBuilders.fieldSort(\\\"createTime\\\").descending()).from((querySysLogBO.getCurrentPage() - 1) * querySysLogBO.getPageSize()).size(querySysLogBO.getPageSize());\nsearchSourceBuilder.excludes(Arrays.asList(\\\"createTime\\\", \\\"updateTime\\\", \\\"remark\\\")).fetchSource(false);\nSearchRequest searchRequest = new SearchRequest(getIndexAliases(SYS_LOG_TYPE));\nsearchRequest.source(searchSourceBuilder);\ntry {\nSearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\nList<SysLog> sysLogList = new ArrayList<>();\nfor (SearchHit hit : searchResponse.getHits().getHits()) {\nSysLog sysLog = JSON.parseObject(hit.getSourceAsString(), SysLog.class);\n            sysLog.setId(hit.getId());\n            sysLogList.add(sysLog);\n        }\n        return new BasePage<>(querySysLogBO.getCurrentPage(), querySysLogBO.getPageSize(), (int) searchResponse.getHits().getTotalHits(), sysLogList);\n    } catch (IOException e) {\n        log.error(\\\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5217\u8868\u5f02\u5e38,msg:{}\\\", e.getMessage());\n        return null;\n    }\n}", "CodeBleu_score": 31.24107859286912}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t", "CodeBleu_score": 2.165507622947592}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps.get(url, (response) => {\n\t\t\tresponse.pipe(file);\n\t\t\tfile.on('finish', () => {\n\t\t\t\tfile.close();\n\t\t\t\tresolve();\n\t\t\t});\n\t\t}).on('error', (error) => {\n\t\t\tfs.unlink(dest, () => {\n\t\t\t\treject(error);\n\t\t\t});\n\t\t});\n\t});\n}", "CodeBleu_score": 54.748838834416546}, {"code": "async function downloadFile(url, dest){\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps.get(url, (response) => {\n\t\t\tresponse.pipe(file);\n\t\t\tfile.on('finish', () => {\n\t\t\t\tfile.close();\n\t\t\t\tresolve();\n\t\t\t});\n\t\t}).on('error', (error) => {\n\t\t\tfs.unlink(dest, () => {\n\t\t\t\treject(error);\n\t\t\t});\n\t\t});\n\t});\n}", "CodeBleu_score": 54.748838834416546}, {"code": "async function downloadFile(url, dest){\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps.get(url, response => {\n\t\t\tresponse.pipe(file);\n\t\t\tfile.on('finish', () => {\n\t\t\t\tfile.close(resolve);\n\t\t\t});\n\t\t}).on('error', error => {\n\t\t\tfs.unlink(dest, () => {\n\t\t\t\treject(error);\n\t\t\t});\n\t\t});\n\t});\n}", "CodeBleu_score": 49.06744407507758}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t return Flux.fromIterable(getDependentModulesFromDsl(module.getEditingApplicationDSL()))\n .filter(moduleId -> !circularDependencyCheckSet.contains(moduleId))\n .doOnNext(circularDependencyCheckSet::add)\n .flatMap(moduleId -> findById(moduleId))\n .onErrorContinue((e, i) -> log.warn(\"get dependent modules on error continue , {}\", e.getMessage()))\n .expandDeep(dependentModule -> getDependentModules(dependentModule, circularDependencyCheckSet));\n }", "CodeBleu_score": 73.58529863844036}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t return findByIdIn(module.getDependentModuleIds())\n .filter(dependentModule -> !circularDependencyCheckSet.contains(dependentModule.getId()))\n .doOnNext(dependentModule -> circularDependencyCheckSet.add(dependentModule.getId()))\n .onErrorContinue((e, i) -> log.warn(\\\"get dependent modules on error continue , {}\\\", e.getMessage()))\n .expandDeep(dependentModule -> getDependentModules(dependentModule, circularDependencyCheckSet));\n }", "CodeBleu_score": 57.140035473190444}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t return findById(module.getId())\n .flatMapMany(app -> {\n if (app.getApplicationStatus() == ApplicationStatus.PUBLISHED) {\n return Flux.just(app);\n } else {\n return Flux.empty();\n }\n })\n .onErrorContinue((e, i) -> log.warn(\"get dependent modules on error continue , {}\", e.getMessage()))\n .filter(app -> {\n if (circularDependencyCheckSet.contains(app.getId())) {\n return false;\n } else {\n circularDependencyCheckSet.add(app.getId());\n return true;\n }\n })\n .flatMapMany(app -> getAllDependentModulesFromApplication(app, false))\n .expandDeep(app -> getDependentModules(app, circularDependencyCheckSet))\n .collectList();\n }", "CodeBleu_score": 63.51271845463795}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t\tfor (Map.Entry<?, ?> entry : map.entrySet()) {\n\t\tObject value = entry.getValue();\n\t\tif (value instanceof Map<?, ?>) {\n\t\t\tdoGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n\t\t} else if (value instanceof List<?>) {\n\t\t\tfor (Object item : (List<?>) value) {\n\t\t\t\tif (item instanceof Map<?, ?>) {\n\t\t\t\t\tdoGetDependentModules((Map<?, ?>) item, dependentModuleIds);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (entry.getKey().equals(\\\"type\\\") && value instanceof String && ((String) value).equals(\\\"module\\\")) {\n\t\t\tObject id = map.get(\\\"id\\\");\n\t\t\tif (id instanceof String && StringUtils.isNotBlank((String) id)) {\n\t\t\t\tdependentModuleIds.add((String) id);\n\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 33.79530591856961}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t\tfor (Map.Entry<?, ?> entry : map.entrySet()) {\n\t\tObject value = entry.getValue();\n\t\tif (value instanceof Map<?, ?>) {\n\t\t\tdoGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n\t\t} else if (value instanceof List<?>) {\n\t\t\tfor (Object element : (List<?>) value) {\n\t\t\t\tif (element instanceof Map<?, ?>) {\n\t\t\t\t\tdoGetDependentModules((Map<?, ?>) element, dependentModuleIds);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (value instanceof String) {\n\t\t\tString componentType = (String) map.get(\"componentType\");\n\t\t\tif (componentType.equals(\"module\")) {\n\t\t\t\tString appId = (String) map.get(\"appId\");\n\t\t\t\tif (StringUtils.isNotBlank(appId)) {\n\t\t\t\t\tdependentModuleIds.add(appId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 44.55908382741079}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t\tfor (Map.Entry<?, ?> entry : map.entrySet()) {\n\t\tObject value = entry.getValue();\n\t\tif (value instanceof Map<?, ?>) {\n\t\t\tdoGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n\t\t} else if (value instanceof List<?>) {\n\t\t\tfor (Object item : (List<?>) value) {\n\t\t\t\tif (item instanceof Map<?, ?>) {\n\t\t\t\t\tdoGetDependentModules((Map<?, ?>) item, dependentModuleIds);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (value instanceof String) {\n\t\t\tString componentType = (String) map.get(\"type\");\n\t\t\tif (\"module\".equals(componentType)) {\n\t\t\t\tString appId = (String) map.get(\"appId\");\n\t\t\t\tif (StringUtils.isNotBlank(appId)) {\n\t\t\t\t\tdependentModuleIds.add(appId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 44.275487552297236}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t_\n\t// Convert the DataBuffer into an InputStream so that we can read the image data from it.\n\tfinal InputStream inputStream = DataBufferUtils.readInputStream(dataBuffer, dataBuffer.readableByteCount());\n\n\t// Create a BufferedImage from the InputStream\n\tfinal BufferedImage srcImage = ImageIO.read(inputStream);\n\n\t// Create a new BufferedImage with the correct content type and dimensions\n\tfinal int width = srcImage.getWidth();\n\tfinal int height = srcImage.getHeight();\n\tfinal int thumbNailWidth = thumbNailPhotoDimension.get();\n\tfinal int thumbNailHeight = thumbNailPhotoDimension.get();\n\tfinal BufferedImage destImage = new BufferedImage(createThumbnail ? thumbNailWidth : width, createThumbnail ? thumbNailHeight : height, createThumbnail ? BufferedImage.TYPE_INT_RGB : srcImage.getType());\n\n\t// Draw the image onto the new BufferedImage\n\tfinal Graphics2D g2d = destImage.createGraphics();\n\tg2d.drawImage(srcImage, 0, 0, createThumbnail ? thumbNailWidth : width, createThumbnail ? thumbNailHeight : height, null);\n\tg2d.dispose();\n\n\t// Convert the BufferedImage into a byte array\n\tfinal ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n\tImageIO.write(destImage, createThumbnail ? \\\"JPEG\\\" : srcContentType.getSubtype(), outputStream);\n\tfinal byte[] imageBytes = outputStream.toByteArray();\n\n\t// Release the DataBuffer and InputStream\n\tDataBufferUtils.release(dataBuffer);\n\tinputStream.close();\n\n\t// Return a new Asset object with the image data and content type\n\treturn new Asset(imageBytes, createThumbnail ? \\\"image/jpeg\\\" : srcContentType.toString());\n}", "CodeBleu_score": 34.25936387797059}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t_\n final byte[] bytes = dataBuffer.asInputStream().readAllBytes();\n final BufferedImage image = ImageIO.read(new ByteArrayInputStream(bytes));\n final Asset asset = new Asset();\n asset.setContentType(createThumbnail ? MediaType.IMAGE_JPEG : srcContentType);\n asset.setData(bytes);\n if (createThumbnail) {\n     final int width = image.getWidth();\n     final int height = image.getHeight();\n     final int dimension = Math.min(width, height);\n     final int x = (width - dimension) / 2;\n     final int y = (height - dimension) / 2;\n     final BufferedImage thumbnail = image.getSubimage(x, y, dimension, dimension);\n     final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n     ImageIO.write(thumbnail, \\\"JPEG\\\", outputStream);\n     asset.setThumbnail(outputStream.toByteArray());\n }\n return asset;\n }", "CodeBleu_score": 42.24795631465346}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t", "CodeBleu_score": 7.930396959171953}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn getById(assetId)\n\t\t\t.map(asset -> {\n\t\t\t\tServerHttpResponse response = exchange.getResponse();\n\t\t\t\tresponse.setStatusCode(HttpStatus.OK);\n\t\t\t\tif (asset.getContentType() != null) {\n\t\t\t\t\tresponse.getHeaders().setContentType(asset.getContentType());\n\t\t\t\t}\n\t\t\t\treturn asset;\n\t\t\t})\n\t\t\t.map(asset -> {\n\t\t\t\tDataBuffer dataBuffer = DefaultDataBufferFactory.sharedInstance.wrap(asset.getData());\n\t\t\t\treturn response.writeWith(Flux.just(dataBuffer));\n\t\t\t})\n\t\t\t.then();\n}", "CodeBleu_score": 51.229240891284725}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn repository.findById(assetId)\n\t\t\t.map(asset -> {\n\t\t\t\texchange.getResponse().setStatusCode(HttpStatus.OK);\n\t\t\t\tif (asset.getContentType() != null) {\n\t\t\t\t\texchange.getResponse().getHeaders().setContentType(asset.getContentType());\n\t\t\t\t}\n\t\t\t\treturn asset;\n\t\t\t})\n\t\t\t.map(asset -> {\n\t\t\t\tDataBufferFactory dataBufferFactory = new DefaultDataBufferFactory();\n\t\t\t\tDataBuffer buffer = dataBufferFactory.wrap(asset.getData());\n\t\t\t\treturn buffer;\n\t\t\t})\n\t\t\t.doOnNext(buffer -> {\n\t\t\t\tServerHttpResponse response = exchange.getResponse();\n\t\t\t\tresponse.getHeaders().setContentDispositionFormData(\"attachment\", assetId + \".\" + getExtension(asset.getContentType()));\n\t\t\t\tresponse.getHeaders().setCacheControl(HttpHeaders.CACHE_CONTROL_NO_CACHE);\n\t\t\t\tresponse.getHeaders().setPragma(\"no-cache\");\n\t\t\t\tresponse.getHeaders().setExpires(0);\n\t\t\t\tresponse.getHeaders().set(HttpHeaders.CONTENT_LENGTH, buffer.readableByteCount());\n\t\t\t\treturn buffer;\n\t\t\t})\n\t\t\t.doOnNext(buffer -> DataBufferUtils.write(buffer, exchange.getResponse().getOutputStream()))\n\t\t\t.then();\n}", "CodeBleu_score": 41.389311535877624}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn getById(assetId)\n\t\t.map(asset -> {\n\t\t\tServerHttpResponse response = exchange.getResponse();\n\t\t\tresponse.setStatusCode(HttpStatus.OK);\n\n\t\t\t// Set content type if available\n\t\t\tMediaType contentType = asset.getContentType();\n\t\t\tif (contentType != null) {\n\t\t\t\tresponse.getHeaders().setContentType(contentType);\n\t\t\t}\n\n\t\t\t// Write image data to response\n\t\t\tDataBufferFactory dataBufferFactory = DefaultDataBufferFactory.sharedInstance();\n\t\t\tDataBuffer dataBuffer = dataBufferFactory.wrap(asset.getData());\n\t\t\treturn response.writeWith(Flux.just(dataBuffer));\n\t\t})\n\t\t.defaultIfEmpty(exchange.getResponse().setStatusCode(HttpStatus.NOT_FOUND))\n\t\t.then();\n}", "CodeBleu_score": 55.035594203672765}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\tif (commonConfig.getWorkspaceMode() == WorkspaceMode.SAAS) {\n\t\treturn Flux.empty();\n\t}\n\n\treturn organizationService.getByMode(WorkspaceMode.ENTERPRISE)\n\t\t\t.flatMapIterable(organization ->\n\t\t\t\t\torganization.getAuthConfigs()\n\t\t\t\t\t\t\t.stream()\n\t\t\t\t\t\t\t.map(abstractAuthConfig -> new FindAuthConfig(abstractAuthConfig, organization))\n\t\t\t\t\t\t\t.collect(Collectors.toList())\n\t\t\t);\n}", "CodeBleu_score": 53.60060031975002}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\tif (commonConfig.getWorkspaceMode() == WorkspaceMode.SAAS) {\nreturn Flux.empty();\n}\nreturn organizationService.getByMode(WorkspaceMode.ENTERPRISE)\\\n.flatMapIterable(organization ->\norganization.getAuthConfigs()\n.stream()\n.map(abstractAuthConfig -> new FindAuthConfig(abstractAuthConfig, organization))\n.collect(Collectors.toList())\n);\n}", "CodeBleu_score": 53.06066883237808}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\treturn organizationService.getByWorkspaceMode(WorkspaceMode.ENTERPRISE)\n\t\t\t.flatMapIterable(organization ->\n\t\t\t\t\torganization.getAuthConfigs()\n\t\t\t\t\t\t\t.stream()\n\t\t\t\t\t\t\t.map(abstractAuthConfig -> new FindAuthConfig(abstractAuthConfig, organization))\n\t\t\t\t\t\t\t.collect(Collectors.toList())\n\t\t\t);\n}", "CodeBleu_score": 41.43158617152757}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\tlog.info(\\\"Configuring MongockApplicationRunner\\\");\n\treturn MongockSpring5.builder()\n\t\t.setDriver(new SpringDataMongoV3Driver(mongoTemplate))\n\t\t.addChangeLogsScanPackage(\\\"com.openblocks.domain.migrations\\\")\n\t\t.setSpringContext(springContext)\n\t\t.buildApplicationRunner();\n}", "CodeBleu_score": 21.849419039275794}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\tlog.info(\\\"Initializing MongockApplicationRunner\\\");\n\n\tMongoDatabaseFactory mongoDatabaseFactory = mongoTemplate.getMongoDatabaseFactory();\n\tMongoTemplate mongoTemplate = new MongoTemplate(mongoDatabaseFactory, mappingMongoConverter());\n\n\tSpringDataMongoV3Driver driver = SpringDataMongoV3Driver.withDefaultLock(mongoTemplate);\n\tdriver.setReadConcern(ReadConcern.MAJORITY);\n\tdriver.setWriteConcern(WriteConcern.MAJORITY);\n\n\treturn MongockSpring5.builder()\n\t\t.setDriver(driver)\n\t\t.addChangeLogsScanPackage(\\\"com.openblocks.mongo.changelogs\\\")\n\t\t.setSpringContext(springContext)\n\t\t.buildApplicationRunner();\n}", "CodeBleu_score": 48.27694834118356}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\t// Create the MongoDB driver\n\tSpringDataMongoV3Driver driver = SpringDataMongoV3Driver.withDefaultSpringDataMongo(mongoTemplate);\n\t// Set read and write concerns\n\tdriver.withWriteConcern(WriteConcern.MAJORITY)\n\t\t\t.withReadConcern(ReadConcern.MAJORITY)\n\t\t\t.withReadPreference(ReadPreference.primaryPreferred());\n\t// Set the package to scan for change logs\n\tdriver.withRepositoryPackagesToScan(\"com.openblocks.mongo.changesets\");\n\t// Integrate the Spring application context\n\tdriver.withSpringContext(springContext);\n\t// Create the MongockApplicationRunner\n\treturn new MongockSpring5.MongockApplicationRunner(driver, mongoTemplate);\n}", "CodeBleu_score": 54.32113102777409}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\treturn new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter)\n            .withReadPreference(ReadPreference.secondaryPreferred());\n}", "CodeBleu_score": 40.97297777492602}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\treturn new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter).setReadPreference(ReadPreference.secondaryPreferred());\n}", "CodeBleu_score": 37.90134987482475}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tMongoDatabaseFactory mongoDbFactory1 = mongoDbFactory;\n\tmongoDbFactory1.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn new ReactiveMongoTemplate(mongoDbFactory1, mappingMongoConverter);\n}", "CodeBleu_score": 44.42481438796854}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn libraryQueryRecordService.getLatestRecordByLibraryQueryId(libraryQueryId)\n.map(LibraryQueryRecord::getDsl)\n.switchIfEmpty(getById(libraryQueryId)\n.map(LibraryQuery::getDsl));\n}", "CodeBleu_score": 67.88315685825972}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn libraryQueryRecordService.getLatestRecordByLibraryQueryId(libraryQueryId)\n.map(LibraryQueryRecord::getDsl)\n.switchIfEmpty(getById(libraryQueryId)\n.map(LibraryQuery::getDsl));\n}", "CodeBleu_score": 67.88315685825972}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t\treturn libraryQueryRecordService.getLatestRecordByLibraryQueryId(libraryQueryId)\n\t\t\t.map(LibraryQueryRecord::getDsl)\n\t\t\t.switchIfEmpty(getById(libraryQueryId)\n\t\t\t\t\t.map(LibraryQuery::getDsl));\n}", "CodeBleu_score": 68.21459244377726}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t\n\\t\\tlog.info(\\\"Executing query on datasource \\\" + datasource.getName());\n\n\n\\t\\t// Determine the timeout duration\n\n\\t\\tDuration timeoutDuration = QueryTimeoutUtils.parseTimeout(timeoutStr);\n\n\n\\t\\t// Get the datasource connection holder from the pool\n\n\\t\\tMono<DatasourceConnectionHolder> datasourceConnectionHolderMono = datasourceConnectionPool.acquireConnection(datasource);\n\n\n\\t\\t// Execute the query based on the datasource type\n\n\\t\\tMono<QueryExecutionResult> queryExecutionResultMono = datasourceConnectionHolderMono.flatMap(datasourceConnectionHolder -> {\n\n\\t\\t\\tif (datasource.getType() == Datasource.Type.LOCAL) {\n\n\\t\\t\\t\\treturn datasourcePluginClient.executeQuery(datasourceConnectionHolder, queryConfig, requestParams, timeoutDuration, queryVisitorContext);\n\n\\t\\t\\t} else {\n\n\\t\\t\\t\\treturn datasourceMetaInfoService.getPlugin(datasource).execute(datasourceConnectionHolder, queryConfig, requestParams, timeoutDuration, queryVisitorContext);\n\n\\t\\t\\t}\n\n\\t\\t}).doOnError(error -> {\n\n\\t\\t\\tif (error instanceof TimeoutException) {\n\n\\t\\t\\t\\tlog.error(\\\"Query execution timeout\\\", error);\n\n\\t\\t\\t\\tthrow ofException(QUERY_EXECUTION_TIMEOUT, \\\"Query execution timeout\\\", error);\n\n\\t\\t\\t}\n\n\\t\\t\\tif (error instanceof PluginException) {\n\n\\t\\t\\t\\tlog.error(\\\"Query execution error\\\", error);\n\n\\t\\t\\t\\tthrow error;\n\n\\t\\t\\t}\n\n\\t\\t\\t// If it's not a plugin exception, it's a generic error\n\n\\t\\t\\tlog.error(\\\"Query execution error\\\", error);\n\n\\t\\t\\tthrow ofException(QUERY_EXECUTION_ERROR, \\\"Query execution error\\\", error);\n\n\\t\\t});\n\n\n\\t\\treturn queryExecutionResultMono;\n\n\\t}", "CodeBleu_score": 18.640824668641937}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t", "CodeBleu_score": 8.95524286354501}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t\nreturn Mono.defer(() -> {\n\n// Get the timeout duration\nDuration timeoutDuration = QueryTimeoutUtils.parseTimeout(timeoutStr);\n\n// Get the datasource connection holder\nDatasourceConnectionHolder datasourceConnectionHolder = datasourceConnectionPool.getDatasourceConnectionHolder(datasource);\n\n// Get the datasource plugin client\nDatasourcePluginClient datasourcePluginClient = datasourceMetaInfoService.getDatasourcePluginClient(datasource);\n\n// Execute the query\ntry {\n\nreturn datasourcePluginClient.executeQuery(datasourceConnectionHolder, queryConfig, requestParams, timeoutDuration, queryVisitorContext);\n\n} catch (TimeoutException e) {\n\n// If the timeout is reached, throw a plugin exception\nlog.warn(\"Query execution timed out\", e);\nreturn Mono.error(ofException(QUERY_EXECUTION_TIMEOUT));\n\n} catch (Exception e) {\n\n// If the query execution fails for any reason, log the error and throw a plugin exception\nlog.error(\"Query execution failed\", e);\nreturn Mono.error(ofException(QUERY_EXECUTION_ERROR));\n\n}\n\n});\n\n}", "CodeBleu_score": 36.31954651810027}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\n/**\n * If the datasource is a js datasource plugin, we execute the query using node.js.\n */\nif (datasourceMetaInfoService.isJsDatasourcePlugin(datasource.getType())) {\n    return executeByNodeJs(datasource, queryConfig, requestParams);\n}\n\n/**\n * If the datasource is a non-js datasource plugin, we execute the query using the plugin's query executor.\n */\nreturn datasourceConnectionPool.acquireConnection(datasource)\n.flatMap(connectionHolder -> {\n    try {\n        QueryExecutionContext queryExecutionContext = new QueryExecutionContext(connectionHolder, queryConfig, requestParams, queryVisitorContext);\n        return datasourcePluginClient.execute(datasource, queryExecutionContext)\n                .map(result -> {\n                    connectionHolder.release();\n                    return result;\n                });\n    } catch (Exception e) {\n        connectionHolder.release();\n        return Mono.error(e);\n    }\n});\n}", "CodeBleu_score": 45.67801727991691}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\n//        QueryExecutor queryExecutor = QueryExecutorFactory.getQueryExecutor(datasource.getType());\n\n//        QueryExecutionContext queryExecutionContext = QueryExecutionContext.builder()\n//                .datasource(datasource)\n//                .queryConfig(queryConfig)\n//                .requestParams(requestParams)\n//                .queryVisitorContext(queryVisitorContext)\n//                .build();\n\n//        return datasourceConnectionPool.acquireConnection(datasource)\n//                .flatMap(connection -> queryExecutor.execute(connection, queryExecutionContext)\n//                        .doOnSuccess(queryExecutionResult -> datasourceConnectionPool.releaseConnection(connection))\n//                        .onErrorMap(exception -> {\n//                            log.error(\\\"query exception\\\", exception);\n                            return ofException(QUERY_EXECUTION_ERROR, \\\"QUERY_EXECUTION_ERROR\\\", exception.getMessage());\n                        }));\n}", "CodeBleu_score": 10.13371642005709}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\nDatasourceConnectionHolder connectionHolder = datasourceConnectionPool.acquireConnection(datasource);\n\nreturn Mono.fromSupplier(() -> {\n    try {\n        QueryExecutionContext queryExecutionContext = new QueryExecutionContext(datasource, queryConfig, requestParams, connectionHolder, queryVisitorContext);\n\n        return datasourcePluginClient.executeQuery(datasource, queryExecutionContext);\n    } catch (PluginException e) {\n        throw e;\n    } catch (Exception e) {\n        throw new PluginException(PluginCommonError.UNKNOWN_ERROR, \"UNKNOWN_ERROR\", e.getMessage());\n    }\n}).doOnSuccess(result -> datasourceConnectionPool.releaseConnection(connectionHolder))\n        .onErrorMap(PluginException.class, e -> e)\n        .onErrorMap(exception -> {\n            log.error(\"query exception\", exception);\n            return ofException(QUERY_EXECUTION_ERROR, \"QUERY_EXECUTION_ERROR\", exception.getMessage());\n        });\n}", "CodeBleu_score": 43.89109663489289}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\tif (StringUtils.isBlank(timeoutStr)) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MILLIS;\n\t}\n\n\t// Extract the numeric value and unit from the string\n\tPair<String, String> valueAndUnit = extractValueAndUnit(timeoutStr);\n\tif (valueAndUnit == null) {\n\t\tthrow new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout: \" + timeoutStr);\n\t}\n\n\t// Convert the value to milliseconds\n\tint value = NumberUtils.toInt(valueAndUnit.getLeft());\n\tif (value == 0) {\n\t\tthrow new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout: \" + timeoutStr);\n\t}\n\n\t// Convert the unit to milliseconds\n\tString unit = valueAndUnit.getRight();\n\tif (unit.equals(\"s\")) {\n\t\tvalue *= 1000;\n\t} else if (unit.equals(\"m\")) {\n\t\tvalue *= 1000 * 60;\n\t} else if (unit.equals(\"h\")) {\n\t\tvalue *= 1000 * 60 * 60;\n\t} else if (!unit.equals(\"ms\")) {\n\t\tthrow new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout: \" + timeoutStr);\n\t}\n\n\t// Ensure it does not exceed the maximum allowed timeout\n\tif (value > MAX_QUERY_TIMEOUT_SECONDS * 1000) {\n\t\tthrow new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"Query timeout exceeds maximum allowed timeout: \" + timeoutStr);\n\t}\n\n\treturn value;\n}", "CodeBleu_score": 43.30070034785084}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\tif (StringUtils.isBlank(timeoutStr)) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MILLIS;\n\t}\n\n\tPair<String, String> valueAndUnit = parseQueryTimeoutValueAndUnit(timeoutStr);\n\tif (valueAndUnit == null) {\n\t\tthrow new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout: \" + timeoutStr);\n\t}\n\n\tint value = NumberUtils.toInt(valueAndUnit.getLeft());\n\tString unit = valueAndUnit.getRight();\n\tif (value <= 0) {\n\t\tthrow new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout value: \" + value);\n\t}\n\n\tif (\"s\".equals(unit)) {\n\t\tif (value > MAX_QUERY_TIMEOUT_SECONDS) {\n\t\t\tthrow new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"Query timeout exceeds maximum allowed value: \" + value);\n\t\t}\n\t\treturn (int) Duration.ofSeconds(value).toMillis();\n\t} else if (\"ms\".equals(unit)) {\n\t\tif (value > MAX_QUERY_TIMEOUT_SECONDS * 1000) {\n\t\t\tthrow new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"Query timeout exceeds maximum allowed value: \" + value);\n\t\t}\n\t\treturn value;\n\t} else {\n\t\tthrow new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout unit: \" + unit);\n\t}\n}", "CodeBleu_score": 42.26140619467314}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\nif (StringUtils.isBlank(timeoutStr)) {\nreturn DEFAULT_QUERY_TIMEOUT_MILLIS;\n}\n\nPair<String, String> timeoutPair = StringUtils.splitByWholeSeparator(timeoutStr, \" \");\n\nif (timeoutPair.getLeft() == null || timeoutPair.getRight() == null) {\nthrow new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout format: \" + timeoutStr);\n}\n\nString timeoutValueStr = timeoutPair.getLeft();\nString timeoutUnitStr = timeoutPair.getRight();\n\nif (!NumberUtils.isCreatable(timeoutValueStr) || !NumberUtils.isCreatable(timeoutUnitStr)) {\nthrow new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout format: \" + timeoutStr);\n}\n\nint timeoutValue = Integer.parseInt(timeoutValueStr);\nint timeoutUnit = Integer.parseInt(timeoutUnitStr);\n\nif (timeoutUnit != 0 && timeoutUnit != 1) {\nthrow new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout format: \" + timeoutStr);\n}\n\nint timeoutMillis = timeoutValue * 1000;\n\nif (timeoutMillis > MAX_QUERY_TIMEOUT_SECONDS * 1000) {\nthrow new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"Query timeout cannot exceed \" + MAX_QUERY_TIMEOUT_SECONDS + \" seconds\");\n}\n\nreturn timeoutMillis;\n}", "CodeBleu_score": 41.41883927090924}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t\nList<Pair<String, String>> datasourceIdMap = new ArrayList<>();\n\nList<ApplicationQuery> queries = application.getLiveApplicationDsl().get(\"queries\");\n\nif (isNull(queries) || queries.isEmpty()) {\n    return ofError(TEMPLATE_NOT_CORRECT, \"TEMPLATE_NOT_CORRECT\", \"No queries found in template application.\");\n}\n\nfor (ApplicationQuery query : queries) {\n    Datasource datasource = query.getDatasource();\n    if (isNull(datasource)) {\n        continue;\n    }\n\n    String datasourceId = datasource.getId();\n    if (isNull(datasourceId)) {\n        continue;\n    }\n\n    datasourceIdMap.add(Pair.of(datasourceId, datasourceService.copyDatasource(datasourceId, currentOrganizationId,\n            DatasourceCreationSource.TEMPLATE, visitorId)\n            .map(Datasource::getId)\n            .block()));\n}\n\nreturn Mono.just(datasourceIdMap);\n}", "CodeBleu_score": 42.91388354116119}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t\nList<String> datasourceIds = application.getLiveApplicationDsl().get(\"queries\").stream()\n        .map(query -> (String) query.get(\"datasource\"))\n        .collect(Collectors.toList());\n\nif (datasourceIds.isEmpty()) {\n    return deferredError(TEMPLATE_NOT_CORRECT, \"TEMPLATE_NOT_CORRECT\");\n}\n\nreturn Flux.fromIterable(datasourceIds)\n        .flatMap(datasourceId -> datasourceService.copy(datasourceId, currentOrganizationId, DatasourceCreationSource.TEMPLATE, visitorId))\n        .collectList()\n        .map(datasourceCopies -> datasourceIds.stream()\n                .map(datasourceId -> Pair.of(datasourceId, datasourceCopies.stream()\n                        .filter(datasourceCopy -> datasourceCopy.getOriginalId().equals(datasourceId))\n                        .map(Datasource::getId)\n                        .findFirst()\n                        .get()))\n                .collect(Collectors.toList()));\n}", "CodeBleu_score": 51.82248267033616}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t\n}", "CodeBleu_score": 6.7517121984820445}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.getById(datasourceId)\n.switchIfEmpty(deferredError(TEMPLATE_NOT_EXIST, \\\"TEMPLATE_NOT_EXIST\\\"))\n.flatMap(datasource -> {\nif (DatasourceCreationSource.SYSTEM_STATIC.equals(datasource.getCreationSource())) {\nreturn Mono.just(datasourceId);\n}\nif (DatasourceCreationSource.QUICK_REST_API.equals(datasource.getCreationSource())\n|| DatasourceCreationSource.OPENBLOCKS_API.equals(datasource.getCreationSource())) {\nreturn datasourceService.create(Datasource.builder()\n.creationSource(DatasourceCreationSource.MANUAL)\n.organizationId(organizationId)\n.name(datasource.getName())\n.connectionType(datasource.getConnectionType())\n.connectionUrl(datasource.getConnectionUrl())\n.username(datasource.getUsername())\n.password(<PASSWORD>())\n.build(), visitorId);\n}\nreturn datasourceService.create(Datasource.builder()\n.creationSource(DatasourceCreationSource.MANUAL)\n.organizationId(organizationId)\n.name(datasource.getName())\n.connectionType(datasource.getConnectionType())\n.connectionUrl(datasource.getConnectionUrl())\n.username(datasource.getUsername())\n.password(<PASSWORD>())\n.build(), visitorId)\n.map(Datasource::getId);\n});\n}", "CodeBleu_score": 18.721382160928883}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.getById(datasourceId)\n                .switchIfEmpty(deferredError(TEMPLATE_NOT_EXIST, \\\"TEMPLATE_NOT_EXIST\\\"))\n                .map(Datasource::getCreationSource)\n                .filter(DatasourceCreationSource::isSystemStatic)\n                .map(DatasourceCreationSource::getSystemStaticId)\n                .switchIfEmpty(datasourceService.create(Datasource.builder()\n                        .name(datasourceId)\n                        .organizationId(organizationId)\n                        .creationSource(DatasourceCreationSource.builder()\n                                .systemStaticId(RandomStringUtils.randomAlphanumeric(RANDOM_LENGTH))\n                                .build())\n                        .build(), visitorId))\n                .map(Datasource::getId);\n}", "CodeBleu_score": 21.50167881952545}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.findById(datasourceId)\n                .switchIfEmpty(deferredError(TEMPLATE_NOT_EXIST, \\\"TEMPLATE_NOT_EXIST\\\"))\n                .zipWith(Mono.just(visitorId))\n                .zipWhen(tuple -> datasourceService.create(Datasource.builder()\n                        .organizationId(organizationId)\n                        .name(tuple.getT1().getName())\n                        .creationSource(DatasourceCreationSource.TEMPLATE)\n                        .build(), tuple.getT2()), TupleUtils::merge)\n                .map(Datasource::getId);\n    }", "CodeBleu_score": 22.120231326925193}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t // If the user has a profile photo, we need to delete it first\n if (user.getProfilePhoto() != null) {\n return assetService.delete(user.getProfilePhoto().getId())\n .then(assetService.upload(filePart, user.getId()))\n .then(asset -> {\n user.setProfilePhoto(asset);\n return repository.save(user)\n .map(it -> true);\n });\n } else {\n return assetService.upload(filePart, user.getId())\n .then(asset -> {\n user.setProfilePhoto(asset);\n return repository.save(user)\n .map(it -> true);\n });\n }\n }", "CodeBleu_score": 24.62342914989456}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t // Save the new avatar\n return assetService.saveAsset(filePart, user, Asset.Type.AVATAR)\n\n .map(asset -> {\n // Remove the old avatar\n if (user.getAvatar() != null) {\n assetService.deleteAsset(user.getAvatar());\n }\n\n // Update the user's profile\n user.setAvatar(asset);\n return true;\n });\n }", "CodeBleu_score": 18.92667893843341}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t String userId = user.getId();\n if (StringUtils.isEmpty(userId)) {\n return Mono.error(ofError(BizError.INVALID_PARAMETER, FieldName.ID));\n }\n\n/**\n * If the user has a profile photo, we first need to delete the previous one\n */\n Mono<Boolean> deleteOldAvatar = Mono.just(false);\n if (user.getAvatar() != null) {\n deleteOldAvatar = assetService.delete(user.getAvatar());\n }\n\n/**\n * We then upload the new avatar\n */\n Mono<Asset> uploadNewAvatar = assetService.upload(filePart, userId, \"avatar\", avatarMaxSizeInKb.get());\n\n/**\n * If the upload fails, we need to delete the new avatar\n */\n Mono<Boolean> deleteNewAvatar = Mono.just(false);\n uploadNewAvatar = uploadNewAvatar.onErrorResume(e -> {\n deleteNewAvatar = assetService.delete(uploadNewAvatar.block().getId());\n return Mono.error(e);\n });\n\n/**\n * If the upload succeeds, we update the user's profile with the new avatar\n */\n Mono<User> updateUserProfile = uploadNewAvatar.map(newAvatar -> {\n user.setAvatar(newAvatar.getId());\n return user;\n });\n\n/**\n * If the update fails, we need to delete the new avatar\n */\n Mono<Boolean> deleteNewAvatarIfUpdateFailed = Mono.just(false);\n updateUserProfile = updateUserProfile.onErrorResume(e -> {\n deleteNewAvatarIfUpdateFailed = assetService.delete(uploadNewAvatar.block().getId());\n return Mono.error(e);\n });\n\n/**\n * If all the operations succeed, we return true\n */\n return deleteOldAvatar.then(uploadNewAvatar)\n .then(updateUserProfile)\n .then(Mono.just(true))\n .onErrorResume(DuplicateKeyException.class, e -> Mono.just(false))\n .onErrorResume(e -> {\n deleteNewAvatarIfUpdateFailed.block();\n return Mono.error(e);\n });\n }", "CodeBleu_score": 41.066986076098026}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t\treturn findById(authUser.getId())\n\t\t\t.switchIfEmpty(Mono.defer(() -> {\n\t\t\t\tUser user = new User();\n\t\t\t\tuser.setId(authUser.getId());\n\t\t\t\tuser.setConnections(new HashSet<>(Arrays.asList(new Connection(authUser.getSource(), authUser.getUid()))));\n\t\t\t\tuser.setState(UserState.NEW);\n\t\t\t\tuser.setEnabled(true);\n\t\t\t\tuser.setAvatar(null);\n\t\t\t\tuser.setLocale(LocaleUtils.getDefaultLocale());\n\t\t\t\treturn repository.save(user);\n\t\t\t}))\n\t\t\t.flatMap(user -> {\n\t\t\t\tif (user.getState() == UserState.NEW) {\n\t\t\t\t\treturn Mono.just(user);\n\t\t\t\t} else {\n\t\t\t\t\treturn ofError(BizError.USER_ALREADY_EXISTS, \"USER_ALREADY_EXISTS\", user.getId());\n\t\t\t\t}\n\t\t\t})\n\t\t\t.flatMap(user -> {\n\t\t\t\tif (authUser.getSource() == AuthSourceConstants.EMAIL && authUser.getContext() != null) {\n\t\t\t\t\tString password = authUser.getContext().get(FormAuthRequestContext.PASSWORD);\n\t\t\t\t\tif (password != null) {\n\t\t\t\t\t\treturn encryptionService.encrypt(password)\n\t\t\t\t\t\t\t\t.map(encryptedPassword -> {\n\t\t\t\t\t\t\t\t\tuser.setPassword(<PASSWORD>);\n\t\t\t\t\t\t\t\t\treturn user;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn Mono.just(user);\n\t\t\t})\n\t\t\t.flatMap(user -> {\n\t\t\t\tuser.setState(UserState.ACTIVE);\n\t\t\t\tuser.setEnabled(true);\n\t\t\t\treturn repository.save(user);\n\t\t\t});\n}", "CodeBleu_score": 42.012161389581316}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t\tMono<User> userMono = findByAuthUser(authUser)\n\t\t\t.switchIfEmpty(Mono.defer(() -> {\n\t\t\t\t// If the user is not found, create a new user\n\t\t\t\tUser user = new User();\n\t\t\t\tuser.setName(authUser.getName());\n\t\t\t\tuser.setState(UserState.NEW);\n\t\t\t\tuser.setEnabled(true);\n\t\t\t\tuser.setAvatar(null);\n\t\t\t\tuser.setConnections(new HashSet<>());\n\n\t\t\t\t// If the auth source is email, set the password\n\t\t\t\tif (authUser.getSource().equals(AuthSourceConstants.EMAIL)) {\n\t\t\t\t\tif (authUser.getContext() == null) {\n\t\t\t\t\t\treturn ofError(BizError.INVALID_PARAMETER, \"INVALID_PARAMETER\", FieldName.AUTH_CONTEXT);\n\t\t\t\t\t}\n\n\t\t\t\t\tFormAuthRequestContext context = (FormAuthRequestContext) authUser.getContext();\n\t\t\t\t\tif (context.getPassword() == null) {\n\t\t\t\t\t\treturn ofError(BizError.INVALID_PARAMETER, \"INVALID_PARAMETER\", FieldName.PASSWORD);\n\t\t\t\t\t}\n\n\t\t\t\t\tString password = context.getPassword();\n\t\t\t\t\tuser.setPassword(encryptionService.encrypt(password));\n\t\t\t\t}\n\n\t\t\t\t// Add the auth user as a connection\n\t\t\t\tConnection connection = new Connection();\n\t\t\t\tconnection.setSource(authUser.getSource());\n\t\t\t\tconnection.setRawId(authUser.getUid());\n\t\t\t\tuser.getConnections().add(connection);\n\n\t\t\t\treturn create(user);\n\t\t\t}));\n\n\t// Update the user's state to ACTIVE\n\treturn userMono.flatMap(user -> {\n\t\tuser.setState(UserState.ACTIVE);\n\t\treturn mongoUpsertHelper.updateById(user, user.getId());\n\t}).flatMap(updated -> {\n\t\tif (!updated) {\n\t\t\treturn ofError(BizError.NO_RESOURCE_FOUND, \"NO_USER_FOUND\", userMono.block().getId());\n\t\t}\n\t\treturn userMono;\n\t});\n}", "CodeBleu_score": 41.29579241870639}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t\tif (authUser == null) {\n\t\treturn ofError(BizError.INVALID_PARAMETER, \"INVALID_PARAMETER\", FieldName.AUTH_USER);\n\t}\n\n\t// Check if the user is already in the database\n\treturn findByAuthUser(authUser)\n\t\t\t.switchIfEmpty(Mono.defer(() -> {\n\t\t\t\t// Create a new user\n\t\t\t\tUser user = new User();\n\t\t\t\tuser.setName(authUser.getName());\n\t\t\t\tuser.setEmail(authUser.getEmail());\n\t\t\t\tuser.setEnabled(true);\n\t\t\t\tuser.setAvatar(null);\n\t\t\t\tuser.setState(UserState.NEW);\n\n\t\t\t\t// Set the user's connections\n\t\t\t\tuser.setConnections(authUser.getConnections());\n\n\t\t\t\t// Encrypt the password if the auth source is email and the auth context contains a password\n\t\t\t\tif (authUser.getSource().equals(AuthSourceConstants.EMAIL) && authUser.getContext().containsKey(FieldName.PASSWORD)) {\n\t\t\t\t\tuser.setPassword(encryptionService.encrypt(authUser.getContext().get(FieldName.PASSWORD)));\n\t\t\t\t}\n\n\t\t\t\t// Save the new user\n\t\t\t\treturn create(user);\n\t\t\t}));\n}", "CodeBleu_score": 43.410895725796514}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\tif (StringUtils.isEmpty(email)) {\n\t\treturn ofError(BizError.INVALID_PARAMETER, \"INVALID_PARAMETER\", FieldName.EMAIL);\n\t}\n\n\ttry {\n\t\tConnection connection = new Connection();\n\t\tconnection.setSource(AuthSourceConstants.EMAIL);\n        connection.setRawId(email);\n        user.getConnections().add(connection);\n        return save(user).map(it -> true);\n    } catch (DuplicateKeyException e) {\n        return ofError(BizError.EMAIL_ALREADY_IN_USE, \\\"EMAIL_ALREADY_IN_USE\\\", email);\n    }\n}", "CodeBleu_score": 34.59248839505635}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\tConnection connection = new Connection();\n\tconnection.setSource(AuthSourceConstants.EMAIL);\n    connection.setRawId(email);\n    user.getConnections().add(connection);\n    return repository.save(user)\n            .map(it -> true)\n            .onErrorResume(DuplicateKeyException.class, e -> ofException(BizError.EMAIL_ALREADY_BOUND, \\\"EMAIL_ALREADY_BOUND\\\", email));\n}", "CodeBleu_score": 28.339907588454743}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\treturn findBySourceAndId(AuthSourceConstants.EMAIL, email)\n.flatMap(existingUser -> {\nif (existingUser != null) {\nreturn ofError(BizError.EMAIL_ALREADY_BOUND, \\\"EMAIL_ALREADY_BOUND\\\", email);\n}\nreturn addConnectionToUser(user, email);\n})\n.onErrorResume(DuplicateKeyException.class, e -> ofError(BizError.EMAIL_ALREADY_BOUND, \\\"EMAIL_ALREADY_BOUND\\\", email))\n.onErrorResume(e -> ofException(e));\n}", "CodeBleu_score": 16.636590039333672}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t\treturn findById(userId)\n\t\t\t.doOnNext(user -> {\n\t\t\t\tif (!encryptionService.checkPassword(oldPassword, user.getPassword())) {\n\t\t\t\t\tthrow new BizException(BizError.INVALID_PASSWORD, \\\"INVALID_PASSWORD\\\", userId, oldPassword);\n                    }\n                })\n\t\t\t.map(user -> {\n\t\t\t\tuser.setPassword(encryptionService.encryptPassword(newPassword));\n                return user;\n            })\n\t\t\t.flatMap(repository::save)\n                .then(Mono.just(true))\n                .onErrorResume(throwable -> {\n                    if (throwable instanceof DuplicateKeyException) {\n                        return Mono.error(new BizException(BizError.ALREADY_BIND, \\\"ALREADY_BIND\\\", email, \\\"\\\"));\n                    }\n                    return Mono.error(throwable);\n                });\n    }", "CodeBleu_score": 29.389280177755666}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t\tif (StringUtils.isEmpty(userId)) {\n\t\treturn Mono.error(new BizException(BizError.INVALID_PARAMETER, \\\"INVALID_PARAMETER\\\", FieldName.ID));\n\t}\n\n\tif (StringUtils.isEmpty(oldPassword)) {\n\t\treturn Mono.error(new BizException(BizError.INVALID_PARAMETER, \\\"INVALID_PARAMETER\\\", FieldName.OLD_PASSWORD));\n\t}\n\n\tif (StringUtils.isEmpty(newPassword)) {\n\t\treturn Mono.error(new BizException(BizError.INVALID_PARAMETER, \\\"INVALID_PARAMETER\\\", FieldName.NEW_PASSWORD));\n\t}\n\n\treturn findById(userId)\n                .filter(user -> encryptionService.matches(oldPassword, user.getPassword()))\n                .doOnNext(user -> user.setPassword(encryptionService.encryptPassword(newPassword)))\n                .flatMap(repository::save)\n                .then(Mono.just(true))\n                .onErrorResume(throwable -> {\n                    if (throwable instanceof IllegalArgumentException) {\n                        return Mono.error(new BizException(BizError.INVALID_PASSWORD, \\\"INVALID_PASSWORD\\\", \\\"\\\"));\n                    }\n                    return Mono.error(throwable);\n                });\n}", "CodeBleu_score": 24.210472605433722}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t\treturn findById(userId)\n\t\t\t.map(user -> {\n\t\t\t\tif (!encryptionService.isPasswordMatch(oldPassword, user.getPassword())) {\n\t\t\t\t\tthrow new BizException(BizError.INVALID_PASSWORD, \\\"INVALID_PASSWORD\\\");\n\t\t\t\t}\n\t\t\t\tuser.setPassword(encryptionService.encryptPassword(newPassword));\n\t\t\t\treturn user;\n\t\t\t})\n\t\t\t.flatMap(repository::save)\n\t\t\t.then(Mono.just(true))\n\t\t\t.onErrorResume(throwable -> {\n\t\t\t\tif (throwable instanceof DuplicateKeyException) {\n\t\t\t\t\treturn Mono.error(new BizException(BizError.ALREADY_BIND, \\\"ALREADY_BIND\\\", email, \\\"\\\"));\n\t\t\t\t}\n\t\t\t\treturn Mono.error(throwable);\n\t\t\t});\n}", "CodeBleu_score": 21.7963781918421}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\treturn orgMember.isAdmin() ? buildAdminUserDetailGroups(userId, orgMember, withoutDynamicGroups, locale) : buildUserDetailGroups(userId, orgMember, withoutDynamicGroups, locale);\n}", "CodeBleu_score": 11.606719336296262}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\treturn groupService.findGroups(userId, withoutDynamicGroups)\n\n                .filter(group -> !group.isAllUsersGroup())\n\n                .map(group -> {\n\n                    String groupName = group.getName();\n                    String localizedGroupName = group.getLocalizedName(locale);\n                    return new HashMap<String, String>() {{\n\n                        put(\\\"id\\\", group.getId());\n\n                        put(\\\"name\\\", groupName);\n\n                        put(\\\"localizedName\\\", localizedGroupName);\n\n                    }};\n\n                })\n                .collectList()\n\n                .map(groups -> {\n\n                    if (orgMember.isAdmin()) {\n\n                        groups.add(new HashMap<String, String>() {{\n\n                            put(\\\"id\\\", ALL_USERS_GROUP_ID);\n\n                            put(\\\"name\\\", ALL_USERS_GROUP_NAME);\n\n                            put(\\\"localizedName\\\", ALL_USERS_GROUP_NAME);\n\n                        }});\n\n                    }\n\n                    return groups;\n\n                });\n}", "CodeBleu_score": 33.28233206256248}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\treturn orgMember.isAdmin() ? buildAdminUserDetailGroups(userId, orgMember, withoutDynamicGroups, locale)\n        : buildNonAdminUserDetailGroups(userId, orgMember, withoutDynamicGroups, locale);\n}", "CodeBleu_score": 11.588995731730964}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\treturn findByUserId(userId)\n        .map(userStatus -> userStatus.toBuilder()\n                .hasShowNewUserGuidance(true)\n                .build()\n        )\n        .flatMap(userStatus -> mongoUpsertHelper.upsert(repository, userStatus, UserStatus::getId))\n        .map(userStatus -> true);\n}", "CodeBleu_score": 32.611382673343776}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\treturn repository.upsert(UserStatus.builder()\n\t\t\t.id(userId)\n\t\t\t.hasShowNewUserGuidance(true)\n\t\t\t.build())\n\t\t\t.map(result -> result.wasAcknowledged());\n}", "CodeBleu_score": 28.416638523602817}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\treturn findByUserId(userId)\n        .flatMap(userStatus -> {\n            userStatus.setHasShowNewUserGuidance(true);\n            return mongoUpsertHelper.upsert(userStatus);\n        });\n}", "CodeBleu_score": 29.172086607791993}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\\\"predicatePartition cannot be nil\\\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\\\"predicateValue cannot be nil\\\")\n\t}\n\n\tvar wg sync.WaitGroup\n\twg.Add(len(c.partitions))\n\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\tgo func(k string, p PartitionManager) {\n\t\t\t\tdefer wg.Done()\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t}(k, p)\n\t\t}\n\t}\n\n\twg.Wait()\n}", "CodeBleu_score": 42.20423463932654}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\\\"predicatePartition must not be nil\\\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\\\"predicateValue must not be nil\\\")\n\t}\n\tg := rungroup.New(c.opts.Log)\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\tg.Go(func() error {\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t\treturn nil\n\t\t\t})\n\t\t}\n\t}\n\tg.Wait()\n}", "CodeBleu_score": 40.24474171124315}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\\\"predicatePartition is nil\\\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\\\"predicateValue is nil\\\")\n\t}\n\n\tvar wg sync.WaitGroup\n\twg.Add(len(c.partitions))\n\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\tgo func(k string, p PartitionManager) {\n\t\t\t\tdefer wg.Done()\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t}(k, p)\n\t\t}\n\t}\n\n\twg.Wait()\n}", "CodeBleu_score": 41.88933077399047}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions == 0 {\n\t\tpanic(\"numPartitions must be greater than zero\")\n\t}\n\tif totalWeightQuantity == 0 {\n\t\tpanic(\"totalWeightQuantity must be greater than zero\")\n\t}\n\t// Calculate the average weight per partition.\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\t// Calculate the maximum size per partition.\n\tmaxSizePerPartition := int(math.Floor(float64(maxItemsTotal) / float64(averageWeightPerPartition)))\n\t// If the maximum size per partition is less than the minimum size, set the maximum size per partition to the minimum size.\n\tif maxSizePerPartition < minMaxSize {\n\t\tmaxSizePerPartition = minMaxSize\n\t}\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 69.59823754684878}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Floor(float64(maxItemsTotal) * averageWeightPerPartition))\n}", "CodeBleu_score": 42.78819243199846}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 {\n\t\tpanic(\\\"number of partitions must be greater than zero\\\")\n\t}\n\tif totalWeightQuantity <= 0 {\n\t\tpanic(\\\"total weight quantity must be greater than zero\\\")\n\t}\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Floor(float64(maxItemsTotal) * averageWeightPerPartition))\n}", "CodeBleu_score": 56.2427749198523}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> map = new HashMap<>();\n\tConnection connection = null;\n\ttry {\n\t\tconnection = connectionFactory.create().block();\n\t\tConnectionMetadata metadata = connection.getMetadata();\n\t\tif (Objects.nonNull(metadata)) {\n\t\t\tmap.put(\\\"product\\\", metadata.getDatabaseProductName());\n\t\t\tmap.put(\\\"version\\\", metadata.getDatabaseProductVersion());\n\t\t}\n\t}\n\tcatch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\tfinally {\n\t\tif (Objects.nonNull(connection)) {\n\t\t\tconnection.close();\n\t\t}\n\t}\n\treturn map;\n}", "CodeBleu_score": 42.75347550802903}, {"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> map = new HashMap<>();\n\tConnection connection = null;\n\ttry {\n\t\tconnection = connectionFactory.create().block();\n\t\tif (Objects.nonNull(connection)) {\n\t\t\tConnectionMetadata connectionMetadata = connection.getMetadata().block();\n\t\t\tif (Objects.nonNull(connectionMetadata)) {\n\t\t\t\tmap.put(\\\"databaseProductName\\\", connectionMetadata.getDatabaseProductName());\n\t\t\t\tmap.put(\\\"databaseProductVersion\\\", connectionMetadata.getDatabaseProductVersion());\n\t\t\t}\n\t\t}\n\t}\n\tfinally {\n\t\tif (Objects.nonNull(connection)) {\n\t\t\tconnection.close().subscribe();\n\t\t}\n\t}\n\treturn map;\n}", "CodeBleu_score": 44.31745640745499}, {"code": "public Map<String, Object> contributorMap(){\n\tMap<String, Object> map = new HashMap<>();\nConnection connection = connectionFactory.create().block();\nif (connection != null) {\nConnectionMetadata metadata = connection.getMetadata();\nif (metadata != null) {\nmap.put(\\\"product\\\", metadata.getDatabaseProductName());\nmap.put(\\\"version\\\", metadata.getDatabaseProductVersion());\n}\n}\nreturn map;\n}", "CodeBleu_score": 42.5347662690025}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tvar user = SystemSetting.get(configMap, User.GROUP, User.class);\nif (user == null) {\ninfo.setAllowRegistration(false);\ninfo.setMustVerifyEmailOnRegistration(false);\n} else {\ninfo.setAllowRegistration(user.getEnable() != null && user.getEnable());\ninfo.setMustVerifyEmailOnRegistration(\nuser.getMustVerifyEmail() == null || user.getMustVerifyEmail());\n}\n}", "CodeBleu_score": 67.21335153678267}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tvar user = SystemSetting.get(configMap, User.GROUP, User.class);\nif (user == null) {\ninfo.setAllowRegistration(false);\ninfo.setMustVerifyEmailOnRegistration(false);\n} else {\ninfo.setAllowRegistration(user.getAllowRegistration() != null && user.getAllowRegistration());\ninfo.setMustVerifyEmailOnRegistration(\nuser.getMustVerifyEmailOnRegistration() != null && user.getMustVerifyEmailOnRegistration());\n}\n}", "CodeBleu_score": 70.41607180769441}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tvar user = SystemSetting.get(configMap, User.GROUP, User.class);\n\tif (user == null) {\n\t\tinfo.setAllowRegistration(false);\n\t\tinfo.setMustVerifyEmailOnRegistration(false);\n\t} else {\n\t\tinfo.setAllowRegistration(user.getEnable() != null && user.getEnable());\n\t\tinfo.setMustVerifyEmailOnRegistration(user.getMustVerifyEmail() != null && user.getMustVerifyEmail());\n\t}\n}", "CodeBleu_score": 67.27219132357763}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t\n}", "CodeBleu_score": 1.7697121563064027}, {"code": "public Object restart(){\n\ttry {\nThreadGroup group = new ThreadGroup(\\\"Halo-Restart-Thread-Group\\\");\nThread restartThread = new Thread(group, new Runnable() {\npublic void run() {\ntry {\nThread.sleep(10000);\nlog.info(\\\"Restarting Halo...\\\");\nThread.sleep(1000);\nif (context != null) {\ntry {\ncontext.close();\n} catch (IOException e) {\nlog.error(\\\"Failed to close application context\\\", e);\n}\n}\nif (application != null) {\napplication.run(args);\n}\n} catch (Exception e) {\nlog.error(\\\"Failed to restart Halo\\\", e);\n}\n}\n}, \\\"Halo-Restart-Thread\\\");\nrestartThread.setDaemon(false);\nrestartThread.setContextClassLoader(RestartEndpoint.class.getClassLoader());\nrestartThread.start();\nreturn Collections.singletonMap(\\\"message\\\", \\\"Restarting Halo...\\\");\n} catch (Exception e) {\nlog.error(\\\"Failed to restart Halo\\\", e);\nreturn Collections.singletonMap(\\\"message\\\", \\\"Failed to restart Halo\\\");\n}\n}", "CodeBleu_score": 30.891053707225925}, {"code": "public Object restart(){\n\t\tThreadGroup group = new ThreadGroup(\"Restart\");\n\tThread restartThread = new Thread(group, () -> {\n\t\ttry {\n\t\t\tClass.forName(Application.class.getName());\n\t\t\tthis.context = this.application.run(this.args);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tlog.error(\"Failed to restart application\", e);\n\t\t}\n\t});\n\trestartThread.setContextClassLoader(RestartEndpoint.class.getClassLoader());\n\trestartThread.setDaemon(false);\n\trestartThread.start();\n\treturn Collections.singletonMap(\"message\", \"Application restart has begun\");\n}", "CodeBleu_score": 50.419508868747585}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t\n}", "CodeBleu_score": 4.963729429268309}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t\n/**\n * Configure an encoder to serialize objects to JSON using Jackson.\n */\n configurer.defaultCodecs().jackson2JsonEncoder(\n new Jackson2JsonEncoder(objectMapper, MediaType.APPLICATION_JSON));\n\n/**\n * Configure a decoder to deserialize JSON to objects using Jackson.\n */\n configurer.defaultCodecs().jackson2JsonDecoder(\n new Jackson2JsonDecoder(objectMapper, MediaType.APPLICATION_JSON));\n }", "CodeBleu_score": 52.810049670422046}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n }", "CodeBleu_score": 70.99832409141749}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn route(path(\"/console/**\")\n.and(accept(MediaType.TEXT_HTML))\n.and(new WebSocketRequestPredicate(false))\n.and(method(HttpMethod.GET)),\nserverResponse -> ServerResponse.ok().body(BodyInserters.fromResource(\"/static/console/index.html\")));\n}", "CodeBleu_score": 25.241576082042094}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t\treturn route(path(\"/console/**\").and(accept(MediaType.TEXT_HTML)).and(method(HttpMethod.GET)).and(\n\t\t\tnew WebSocketRequestPredicate(false)), request -> ServerResponse.ok()\n\t\t\t.contentType(MediaType.TEXT_HTML).body(BodyInserters.fromResource(haloProp.getConsole().getIndex())))\n\t\t\t.filter(new ProxyFilter(haloProp.getConsole().getProxy()));\n}", "CodeBleu_score": 30.58808518942001}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn route(path(\"/console/**\")\n.and(accept(MediaType.TEXT_HTML))\n.and(method(HttpMethod.GET))\n.and(new WebSocketRequestPredicate(false)),\nrequest -> {\nString basePath = request.path().contextPath().value();\nString location = basePath + \"/console/index.html\";\nreturn ServerResponse.temporaryRedirect(location).build();\n});\n}", "CodeBleu_score": 35.2530084014573}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\tvar ucPredicate = method(HttpMethod.GET)\n\t\t.and(path(\"/uc/**\").and(path(\"/uc/assets/**\").negate()))\n\t\t.and(accept(MediaType.TEXT_HTML))\n\t\t.and(new WebSocketRequestPredicate().negate());\n\treturn route(ucPredicate, request -> serveIndex(haloProp.getUc().getLocation() + \"index.html\"));\n}", "CodeBleu_score": 77.41390887077114}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\tvar ucPredicate = method(HttpMethod.GET)\n\t\t.and(path(\"/uc/**\").and(path(\"/uc/assets/**\").negate()))\n\t\t.and(accept(MediaType.TEXT_HTML))\n\t\t.and(new WebSocketRequestPredicate().negate());\n\treturn route(ucPredicate, request -> serveIndex(haloProp.getUc().getLocation() + \"index.html\"));\n}", "CodeBleu_score": 77.41390887077114}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\tvar ucPredicate = method(HttpMethod.GET)\n\t\t.and(path(\"/uc/**\").and(path(\"/uc/assets/**\").negate()))\n\t\t.and(accept(MediaType.TEXT_HTML))\n\t\t.and(new WebSocketRequestPredicate().negate());\n\treturn route(ucPredicate, request -> this.serveIndex(haloProp.getUc().getLocation() + \"index.html\"));\n}", "CodeBleu_score": 86.65305227410592}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\treturn new InMemoryReactiveIndexedSessionRepository(new ConcurrentHashMap<>(), sessionProperties.getTimeout(), serverProperties.getSession().getCookie().getMaxAge());\n}", "CodeBleu_score": 18.076189125352126}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\treturn new InMemoryReactiveIndexedSessionRepository(new ConcurrentHashMap<>(), sessionProperties.getTimeout());\n}", "CodeBleu_score": 12.623908744592335}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\treturn new InMemoryReactiveIndexedSessionRepository(new ConcurrentHashMap<>(), sessionProperties.getTimeout());\n}", "CodeBleu_score": 12.623908744592335}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\n//        var userDetailsService = new DefaultUserDetailService(userService, roleService, haloProperties.getSecurity().getTwoFactor().isEnabled());\n//        userDetailsService.setPasswordEncoder(passwordEncoder());\n//        return userDetailsService;\n\n}", "CodeBleu_score": 8.115039031832884}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\nreturn new DefaultUserDetailService(userService, roleService, haloProperties.getSecurity().getTwoFactor().isEnabled());\n}", "CodeBleu_score": 22.784818598664476}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tDefaultUserDetailService userDetailService = new DefaultUserDetailService(userService, roleService);\nuserDetailService.setTwoFactorEnabled(haloProperties.getSecurity().getTwoFactor().isEnabled());\nreturn userDetailService;\n}", "CodeBleu_score": 50.38232698931212}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\tComment.CommentOwner owner = new Comment.CommentOwner();\nowner.setKind(\"email\");\nowner.setEmail(StringUtils.defaultIfBlank(email, \"\"));\nowner.setDisplayName(displayName);\nowner.setAvatar(avatar);\nowner.setWebsite(website);\nreturn owner;\n}", "CodeBleu_score": 27.01624943733864}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t\nreturn new Comment.CommentOwner()\n.setKind(\"email\")\n.setEmail(StringUtils.defaultIfEmpty(email, \"\"))\n.setDisplayName(displayName)\n.setAvatar(new Comment.CommentOwner.Avatar().setUrl(avatar))\n.setWebsite(new Comment.CommentOwner.Website().setUrl(website));\n}", "CodeBleu_score": 12.541396472438723}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t\tMap<String, String> annotations = new LinkedHashMap<>();\n\tannotations.put(\"avatar\", avatar);\n\tannotations.put(\"website\", website);\n\treturn new Comment.CommentOwner(\"email\", StringUtils.defaultIfBlank(email, \"\"), displayName, annotations);\n}", "CodeBleu_score": 30.89958507506976}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tif (StringUtils.equals(commentOwner.getKind(), \"user\")) {\nreturn StringUtils.equals(commentOwner.getName(), post.getSpec().getOwner().getName());\n} else if (StringUtils.equals(commentOwner.getKind(), \"email\")) {\nOptional<User> user = client.fetch(User.class, post.getSpec().getOwner().getName());\nreturn user.isPresent() && StringUtils.equals(commentOwner.getName(), user.get().getEmail());\n} else {\nreturn false;\n}\n}", "CodeBleu_score": 41.735321250587674}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tif (commentOwner.getKind().equals(\"email\")) {\nUser user = client.fetch(User.class, post.getSpec().getOwner().getName()).orElseThrow();\nreturn commentOwner.getName().equals(user.getEmail());\n}\nreturn commentOwner.getName().equals(post.getSpec().getOwner().getName());\n}", "CodeBleu_score": 40.566242989069224}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tif (commentOwner.getKind().equals(\"email\")) {\nString postOwnerEmail = post.getSpec().getOwner().getName();\nOptional<User> user = client.fetch(User.class, postOwnerEmail);\nif (user.isPresent()) {\nreturn user.get().getEmail().equals(commentOwner.getName());\n}\n}\nreturn commentOwner.getName().equals(post.getSpec().getOwner().getName());\n}", "CodeBleu_score": 43.29890437402416}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\t\nvar fieldSelectors = labelAndFieldSelectorToListOptions(queryParams, \\\"comment\\\");\n\nif (StringUtils.isNotBlank(getKeyword())) {\nfieldSelectors.add(FieldSelector.of(\\\"content\\\", contains(getKeyword())));\n}\n\nif (StringUtils.isNotBlank(getOwnerKind())) {\nfieldSelectors.add(FieldSelector.of(\\\"owner.kind\\\", equal(getOwnerKind())));\n}\n\nif (StringUtils.isNotBlank(getOwnerName())) {\nfieldSelectors.add(FieldSelector.of(\\\"owner.name\\\", equal(getOwnerName())));\n}\n\nreturn ListOptions.of(fieldSelectors, getPage(), getSize());\n}", "CodeBleu_score": 12.621024278569177}, {"code": "public ListOptions toListOptions(){\n\tListOptions listOptions = new ListOptions();\nlistOptions.setFieldSelector(FieldSelector.of(getFieldSelector()));\n\n// Add conditions\nQueryBuilder builder = QueryBuilder.builder();\nif (StringUtils.isNotBlank(getKeyword())) {\nbuilder.add(and(contains(\\\"content\\\", getKeyword())));\n}\nif (StringUtils.isNotBlank(getOwnerKind())) {\nbuilder.add(and(equal(\\\"owner.kind\\\", getOwnerKind())));\n}\nif (StringUtils.isNotBlank(getOwnerName())) {\nbuilder.add(and(equal(\\\"owner.name\\\", getOwnerName())));\n}\nlistOptions.setFieldQuery(builder.build());\nreturn listOptions;\n}", "CodeBleu_score": 23.451463202426737}, {"code": "public ListOptions toListOptions(){\n\t\tvar fieldSelectors = labelAndFieldSelectorToListOptions(getLabel(), getField());\n\tif (StringUtils.isNotBlank(getKeyword())) {\n\t\tfieldSelectors.add(FieldSelector.builder().field(\"content\").query(contains(getKeyword())).build());\n\t}\n\tif (StringUtils.isNotBlank(getOwnerKind())) {\n\t\tfieldSelectors.add(FieldSelector.builder().field(\"owner.kind\").query(equal(getOwnerKind())).build());\n\t}\n\tif (StringUtils.isNotBlank(getOwnerName())) {\n\t\tfieldSelectors.add(FieldSelector.builder().field(\"owner.name\").query(equal(getOwnerName())).build());\n\t}\n\tvar listOptions = ListOptions.builder().fieldSelectors(fieldSelectors).build();\n\treturn listOptions;\n}", "CodeBleu_score": 35.006054662128314}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\tAssert.hasText(commentName, \\\"The comment name must not be empty.\\\");\nreturn client.fetch(CommentCounter.class, commentName)\n.map(counter -> CommentStats.builder()\n.upvote(counter.getUpvote())\n.downvote(counter.getDownvote())\n.build());\n}", "CodeBleu_score": 21.485341861287782}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\tAssert.hasText(commentName, \\\"The commentName must not be null or empty.\\\");\nreturn counterService.get(commentName)\n.map(counter -> CommentStats.builder()\n.upvoteCount(counter.get())\n.build());\n}", "CodeBleu_score": 19.16236908334214}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\tAssert.hasText(commentName, \\\"The commentName must not be null or empty.\\\");\nreturn this.counterService.get(commentName)\n\n    .map(counter -> CommentStats.builder().upvote(counter.getValue()).build());\n}", "CodeBleu_score": 18.88354971659135}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\tvar subscription = Subscription.builder()\n.identity(identity)\n.reason(NotificationReasonConst.REPLY_COMMENT)\n.condition(StringUtils.equals(identity.getName(), \"guqing\"))\n.build();\nnotificationCenter.subscribe(subscription).block();\n}", "CodeBleu_score": 34.92250907738276}, {"code": "void subscribeReply(UserIdentity identity){\n\t// Create a subscriber from the given user identity and, if successful, set up an interest reason for the subscription, specifying that the reason type is \"someone replied to you\" and the condition is that the replied owner matches the user's name. Finally, subscribe the user to the notification center and block until the subscription is completed.\nvar subscriber = notificationCenter.createSubscriber(identity);\nif (subscriber.setupReason(NotificationReasonConst.REPLY_COMMENT, StringUtils.equals(identity.getName(), \\\"${identity.getName()}\\\"))) {\nnotificationCenter.subscribe(subscriber);\n}\n}", "CodeBleu_score": 25.701107895138698}, {"code": "void subscribeReply(UserIdentity identity){\n\t// Create a subscriber for the user\nvar subscriber = new Subscriber(identity);\n\n// Set up an interest reason for the subscriber\nsubscriber.addInterestReason(NotificationReasonConst.REPLY, new Condition() {\n@Override\npublic boolean test(Subscription subscription) {\n// If the subscription is null, return false\nif (subscription == null) {\nreturn false;\n}\n\n// Get the replied owner\nUserIdentity repliedOwner = subscription.getRepliedOwner();\n// If the replied owner is null, return false\nif (repliedOwner == null) {\nreturn false;\n}\n\n// Get the replied owner name\nString repliedOwnerName = repliedOwner.getName();\n// If the replied owner name is null or empty, return false\nif (StringUtils.isEmpty(repliedOwnerName)) {\nreturn false;\n}\n\n// Get the subscriber name\nString subscriberName = identity.getName();\n// If the subscriber name is null or empty, return false\nif (StringUtils.isEmpty(subscriberName)) {\nreturn false;\n}\n\n// If the subscriber name matches the replied owner name, return true\nreturn subscriberName.equals(repliedOwnerName);\n}\n});\n\n// Subscribe the subscriber to the notification center and block until the subscription is completed\nnotificationCenter.subscribe(subscriber).block();\n}", "CodeBleu_score": 37.60751928628236}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn updateComment(comment, commentToUpdate -> {\ncommentToUpdate.setApproved(true);\ncommentToUpdate.setApproveTime(Instant.now());\nreturn commentToUpdate;\n});\n}", "CodeBleu_score": 19.278366310090515}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn client.update(Comment.class, comment.getId(), comment, Comment::setApproved, Comment::setApprovedTime)\n    .retryWhen(Retry.backoff(3, Duration.ofMillis(100)))\n    .onErrorResume(OptimisticLockingFailureException.class, e -> client.get(Comment.class, comment.getId())\n        .flatMap(c -> approveComment(c)));\n}", "CodeBleu_score": 26.715844772931995}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn client.update(comment, update -> update.set(\"approved\", true).set(\"approvedAt\", Instant.now()))\n.retryWhen(Retry.backoff(3, Duration.ofMillis(100)))\n.onErrorResume(OptimisticLockingFailureException.class, e -> client.get(Comment.class, comment.getId())\n.flatMap(updatedComment -> approveComment(updatedComment)));\n}", "CodeBleu_score": 26.106815316278514}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif (! $action instanceof MountableAction) {\nreturn $action;\n}\n\nif ($action instanceof HasRecord) {\n$action->setRecord($this->getRecord());\n}\n\n$action->setParent($this);\n\nreturn $action;\n}", "CodeBleu_score": 69.01907478849857}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction && $this->getRecord()) {\n$action->setRecord($this->getRecord());\n}\n\nreturn $action;\n}", "CodeBleu_score": 39.613562382359596}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif (! $action instanceof MountableAction) {\nreturn $action;\n}\n\n$action->setComponent($this);\n\nif ($action instanceof HasRecord) {\n$action->setRecord($this->getRecord());\n}\n\nreturn $action;\n}", "CodeBleu_score": 70.02358034863533}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->evaluate($this->successRedirectUrl);\n\nif (filled($url)) {\n$this->redirect($url);\n}\n\nreturn $this;\n}", "CodeBleu_score": 89.60071149034441}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->evaluate($this->successRedirectUrl);\n\nif (filled($url)) {\n$this->redirect($url);\n}\n\nreturn $this;\n}", "CodeBleu_score": 89.60071149034441}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->evaluate($this->successRedirectUrl);\n\nif (filled($url)) {\n$this->redirect($url);\n}\n\nreturn $this;\n}", "CodeBleu_score": 89.60071149034441}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif (! $record) {\nreturn;\n}\n\n$tagClass = $record->tags()->getRelated();\n$tags = collect($state)\n->map(fn (string $name): Tag => $tagClass::firstOrCreate(['name' => $name]))\n->pluck('id')\n->all();\n\n$record->syncTags($tags);\n}", "CodeBleu_score": 28.396418594954753}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t$tags = Tag::getOrCreateFromStringCollection($state);\n$record->syncTags($tags->pluck('id')->all());\n}", "CodeBleu_score": 14.738964464856549}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif (! $record || ! method_exists($record, 'syncTags')) {\nreturn;\n}\n\n$tagModelClass = $record->tags()->getRelated();\n$tags = collect($state)->map(fn (string $name) => $tagModelClass::firstOrCreate(['name' => $name])->id);\n$record->syncTags($tags);\n}", "CodeBleu_score": 27.483767732934556}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspace, repo, err := paths.ParseRepoPath(repoPath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to parse repo path: %w\", err)\n\t}\n\n\tscope := types.Scope{\n\t\tSpace: space,\n\t\tRepo:  repo,\n\t}\n\n\tresource := types.Resource{\n\t\tType: types.ResourceType_PIPELINE,\n\t\tIdentifier: pipelineIdentifier,\n\t}\n\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 67.91566223267908}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tscope, resource, err := authz.GetPipelineScopeAndResource(repoPath, pipelineIdentifier)\n\tif err != nil {\n\t\treturn fmt.Errorf(\\\"failed to get pipeline scope and resource: %w\\\", err)\n\t}\n\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 36.83807186163134}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path to obtain the space path and repository name\n\tspacePath, repoName, err := paths.DissectRepoPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline\n\tscope := &types.Scope{\n\t\tType: types.PipelineScopeType,\n\t\tName: spacePath,\n\t}\n\tresource := &types.Resource{\n\t\tType: types.PipelineResourceType,\n\t\tName: repoName,\n\t}\n\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission to perform the authorization check\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 63.38544695636282}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparentSpace, name := paths.GetParentSpaceAndName(space.Path)\n\tscope := types.Scope{\n\t\tSpace: parentSpace,\n\t\tName:  name,\n\t}\n\tresource := types.Resource{\n\t\tType: types.ResourceTypeSpace,\n\t\tID:   space.ID,\n\t}\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 53.879502352740104}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparentSpace := space.Parent\n\tif parentSpace == nil {\n\t\treturn fmt.Errorf(\\\"space %s has no parent\\\", space.Path)\n\t}\n\tparentSpaceName := paths.GetSpaceNameFromPath(parentSpace.Path)\n\tscope := &authz.Scope{\n\t\tType:  authz.SpaceType,\n\t\tName:  parentSpaceName,\n\t\tPath:  parentSpace.Path,\n\t\tLevel: parentSpace.Level,\n\t}\n\tresource := &authz.Resource{\n\t\tType: authz.SpaceType,\n\t\tName: space.Name,\n\t\tPath: space.Path,\n\t}\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 55.16237602493885}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tif session == nil {\n\t\treturn auth.NotAuthenticated\n\t}\n\tif !authorizer.IsAuthorized(session, space.Path, permission) {\n\t\treturn auth.NotAuthorized\n\t}\n\tparentSpace, parentName := paths.SplitPath(space.Path)\n\tscope := types.Scope{\n\t\tSpace: parentSpace,\n\t\tName:  parentName,\n\t}\n\tresource := types.Resource{\n\t\tType: types.ResourceTypeSpace,\n\t\tID:   space.ID,\n\t}\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 54.90358466420149}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tvar buf bytes.Buffer\n\t\tif err := json.NewEncoder(&buf).Encode(data); err != nil {\n\t\t\treturn nil, fmt.Errorf(\"failed to marshal the provided data: %w\", err)\n\t\t}\n\t\tsource = buf.Bytes()\n\t}\n\n\tvar payload map[string]any\n\tif err := json.Unmarshal(source, &payload); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to decode the provided JSON: %w\", err)\n\t}\n\n\t// TODO: Remove this after the identifier migration.\n\tif _, ok := payload[\"check_uid\"]; ok {\n\t\treturn nil, fmt.Errorf(\"check_uid is no longer supported\")\n\t}\n\n\tif _, ok := payload[\"identifier\"]; !ok {\n\t\treturn nil, fmt.Errorf(\"identifier is required\")\n\t}\n\n\tif _, ok := payload[\"status\"]; !ok {\n\t\treturn nil, fmt.Errorf(\"status is required\")\n\t}\n\n\tif _, ok := payload[\"summary\"]; !ok {\n\t\treturn nil, fmt.Errorf(\"summary is required\")\n\t}\n\n\tif _, ok := payload[\"link\"]; !ok {\n\t\treturn nil, fmt.Errorf(\"link is required\")\n\t}\n\n\tif _, ok := payload[\"payload\"]; !ok {\n\t\treturn nil, fmt.Errorf(\"payload is required\")\n\t}\n\n\tif _, ok := payload[\"started\"]; !ok {\n\t\treturn nil, fmt.Errorf(\"started is required\")\n\t}\n\n\tif _, ok := payload[\"ended\"]; !ok {\n\t\treturn nil, fmt.Errorf(\"ended is required\")\n\t}\n\n\tpayload[\"started\"] = int64(payload[\"started\"].(float64))\n\tpayload[\"ended\"] = int64(payload[\"ended\"].(float64))\n\n\tsanitized, err := json.Marshal(payload)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to encode the sanitized JSON: %w\", err)\n\t}\n\n\tsanitized = bytes.TrimRight(sanitized, \"\n\")\n\n\treturn sanitized, nil\n}", "CodeBleu_score": 48.00710750264858}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t", "CodeBleu_score": 1.8385441642056348}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\t// If the source is empty, marshal the provided data.\n\tif len(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"failed to marshal the provided data: %w\", err)\n\t\t}\n\t}\n\n\t// Decode the JSON data and disallow unknown fields.\n\tvar payload map[string]any\n\tif err := json.Unmarshal(source, &payload); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to decode the provided data: %w\", err)\n\t}\n\n\t// Encode the JSON data to ensure it conforms to the required format.\n\tvar buf bytes.Buffer\n\tencoder := json.NewEncoder(&buf)\n\tencoder.SetEscapeHTML(false)\n\tif err := encoder.Encode(payload); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to encode the provided data: %w\", err)\n\t}\n\n\t// Remove any trailing newline from the result before returning the sanitized JSON.\n\tsanitized := buf.Bytes()\n\tif len(sanitized) > 0 && sanitized[len(sanitized)-1] == '\n' {\n\t\tsanitized = sanitized[:len(sanitized)-1]\n\t}\n\n\treturn sanitized, nil\n}", "CodeBleu_score": 64.76648796484625}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.repoStore.GetByReference(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif err := c.authorizer.Check(ctx, session, reqPermission, repo); err != nil {\n\t\treturn nil, err\n\t}\n\treturn repo, nil\n}", "CodeBleu_score": 41.38121861296493}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.repoStore.GetByRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, usererror.New(usererror.ErrRepoNotFound, \"Repository not found: %s\", repoRef)\n\t}\n\n\tif err := c.authorizer.Check(ctx, session, reqPermission, repo); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 47.487247402089864}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference.\n\trepo, err := c.repoStore.Get(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t// Check access permissions for the session on the repository.\n\tif err := c.authorizer.Check(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\treturn repo, nil\n}", "CodeBleu_score": 40.431318229677984}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.EmptyPayloadKind:  SanitizeEmptyPayload,\n\t\tenum.RawPayloadKind:    SanitizeRawPayload,\n\t\tenum.MarkdownPayloadKind: SanitizeRawPayload,\n\t\tenum.PipelinePayloadKind: SanitizePipelinePayload,\n\t}\n}", "CodeBleu_score": 24.68878154160605}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tcheckSanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tcheckSanitizers[enum.CheckPayloadKindEmpty] = SanitizeEmptyCheck\n\tcheckSanitizers[enum.CheckPayloadKindRaw] = SanitizeRawCheck\n\tcheckSanitizers[enum.CheckPayloadKindMarkdown] = SanitizeMarkdownCheck\n\tcheckSanitizers[enum.CheckPayloadKindPipeline] = SanitizePipelineCheck\n\treturn checkSanitizers\n}", "CodeBleu_score": 43.63489533897554}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.EmptyPayloadKind:   SanitizeEmptyPayload,\n\t\tenum.RawPayloadKind:     SanitizeRawPayload,\n\t\tenum.MarkdownPayloadKind: SanitizeMarkdownPayload,\n\t\tenum.PipelinePayloadKind: SanitizePipelinePayload,\n\t}\n}", "CodeBleu_score": 25.448590146916246}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t\tself.state.on_render = on_render\n\n\tif not self.state.is_attached_to_screen then\n\t\trenderer.add_buffer(self)\n\t\tself.state.is_attached_to_screen = true\n\tend\n\n\treturn self", "CodeBleu_score": 62.95180408399137}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tself.state.on_render = on_render\n\n\tif not self.state.is_attached_to_screen then\n\t\tself.state.is_attached_to_screen = true\n\t\trenderer.attach(self.bufnr, self.state.on_render)\n\tend\n\n\treturn self", "CodeBleu_score": 59.148124897063404}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tself.state.on_render = on_render\n\tif not self.state.is_attached_to_screen then\n\t\tself.state.is_attached_to_screen = true\n\t\trenderer.attach(self)\n\tend\n\treturn self", "CodeBleu_score": 60.66609905937168}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t\tlocal state = self.state\n\tlocal watcher = self.watcher\n\tlocal filename = self.filename\n\tlocal bufnr = self.bufnr\n\tlocal is_valid = self:is_valid()\n\tlocal is_rendering = self:is_rendering()\n\n\tif not is_valid then\n\t\treturn self\n\tend\n\n\tif not callback then\n\t\treturn self\n\tend\n\n\tif is_rendering then\n\t\treturn self\n\tend\n\n\tif watcher:is_running() then\n\t\treturn self\n\tend\n\n\tstate.is_processing = true\n\twatcher:start(filename, function()\n\t\tif not state.is_processing then\n\t\t\treturn\n\t\tend\n\n\t\tif not is_valid then\n\t\t\treturn\n\t\tend\n\n\t\tif not callback then\n\t\t\treturn\n\t\tend\n\n\t\tif is_rendering then\n\t\t\treturn\n\t\tend\n\n\t\tlocal ok, err = pcall(callback)\n\n\t\tif not ok then\n\t\t\tconsole.log(err)\n\t\tend\n\tend)\n\n\treturn self", "CodeBleu_score": 40.36979068532169}, {"code": "function Buffer:watch(callback)\n\t\tlocal filename = self.filename\n\tif not filename or filename == '' then \n\t\treturn self \n\tend\n\tif not fs.exists(filename) then \n\t\treturn self \n\tend\n\tlocal watcher = self.watcher\n\tif not watcher:is_running() then \n\t\tlocal ok, err = pcall(function() \n\t\t\twatcher:watch(filename, callback) \n\t\tend) \n\t\tif not ok then \n\t\t\tconsole.log(err) \n\t\tend \n\tend \n\treturn self ", "CodeBleu_score": 38.307720543114094}, {"code": "function Buffer:watch(callback)\n\t\tlocal filename = self.filename\n\tif not filename or filename == '' then\n\t\treturn self\n\tend\n\n\tlocal state = self.state\n\tif state.is_processing then\n\t\treturn self\n\tend\n\tstate.is_processing = true\n\n\tlocal watcher = self.watcher\n\tlocal bufnr = self.bufnr\n\tlocal on_change = function(bufnr)\n\t\tif bufnr == self.bufnr then\n\t\t\tif callback then\n\t\t\t\tcallback()\n\t\t\tend\n\t\tend\n\tend\n\n\tlocal on_error = function(err)\n\t\tconsole.log(err)\n\tend\n\n\tlocal on_close = function()\n\t\tif callback then\n\t\t\tcallback()\n\t\tend\n\tend\n\n\tlocal on_ready = function()\n\t\tif callback then\n\t\t\tcallback()\n\t\tend\n\tend\n\n\tlocal on_invalid = function()\n\t\tif callback then\n\t\t\tcallback()\n\t\tend\n\tend\n\n\twatcher\n\t\t:on('change', on_change)\n\t\t:on('error', on_error)\n\t\t:on('close', on_close)\n\t\t:on('ready', on_ready)\n\t\t:on('invalid', on_invalid)\n\t\t:watch(filename)\n\n\treturn self", "CodeBleu_score": 43.805097058341204}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t\nend\n", "CodeBleu_score": 0.9719152141768624}, {"code": "function Color:to_hex()\n\t\nend\n", "CodeBleu_score": 0.9719152141768624}, {"code": "function Color:to_hex()\n\t\nend\n", "CodeBleu_score": 0.9719152141768624}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = utils.buffer.get_lines(buffer)\n\tfor _, line in ipairs(lines) do\n\t\tlocal col_start = 0\n\t\twhile true do\n\t\t\tlocal col_end = string.find(line, pattern, col_start + 1, true)\n\t\t\tif not col_end then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tself:add_highlight(buffer, hl, _, col_start, col_end)\n\t\t\tcol_start = col_end\n\t\tend\n\tend\n\n\treturn self", "CodeBleu_score": 50.721149160349775}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = vim.api.nvim_buf_get_lines(buffer.bufnr, 0, -1, false)\n\tlocal pattern_regex = vim.regex(pattern)\n\n\tfor _, line in ipairs(lines) do\n\t\tfor match in pattern_regex:gmatch(line) do\n\t\t\tlocal row, col_start, col_end = match.start_pos[1], match.start_pos[2], match.end_pos[2]\n\t\t\tself:add_highlight(buffer, hl, row, col_start, col_end)\n\t\tend\n\tend\n\n\treturn self", "CodeBleu_score": 39.42161649854868}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = vim.api.nvim_buf_get_lines(buffer.bufnr, 0, -1, false)\n\n\tfor row, line in ipairs(lines) do\n\t\tlocal col_start = 0\n\t\twhile true do\n\t\t\tlocal col_start, col_end = line:find(pattern, col_start + 1, true)\n\t\t\tif col_start == nil then break end\n\t\t\tvim.api.nvim_buf_add_highlight(buffer.bufnr, self.ns_id, hl, row, col_start, col_end)\n\t\tend\n\tend\n\n\treturn self", "CodeBleu_score": 49.140828626923124}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = string.format('%s:%s:%s', row, col, utils.math.uuid())\n\n\tvim.api.nvim_buf_set_extmark(buffer.bufnr, self.ns_id, row - 1, col - 1, {\n\t\tid = id,\n\t\tvirt_text = {{text, hl}},\n\t\tvirt_text_pos = pos,\n\t\tpriority = priority,\n\t})\n\n\treturn id", "CodeBleu_score": 62.67608811983988}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\nend\n", "CodeBleu_score": 1.573573800174442}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tpcall(vim.api.nvim_buf_set_extmark, buffer.bufnr, self.ns_id, row, col, {\n\t\tvirt_text = {{text, hl}},\n\t\tvirt_text_pos = pos,\n\t\tpriority = priority,\n\t})\n\n\treturn self", "CodeBleu_score": 49.71516323185261}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = ''\n\tfor char in output:gmatch('.') do\n\t\tif char == '", "CodeBleu_score": 7.54985768617675}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = ''\n\tfor i = 1, #output do\n\t\tlocal char = output:sub(i, i)\n\t\tif char == '", "CodeBleu_score": 22.187029572699466}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal buffer = ''\n\tlocal line = ''\n\tfor i = 1, #output do\n\t\tlocal char = output:sub(i, i)\n\t\tif char == '", "CodeBleu_score": 23.089383655531414}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t\nend\n", "CodeBleu_score": 1.7515213379056636}, {"code": "function Watcher:watch_file(path, handler)\n\t\nend\n", "CodeBleu_score": 1.7515213379056636}, {"code": "function Watcher:watch_file(path, handler)\n\t\tif self.watcher then \n\t\treturn self.watcher\n\tend\n\tlocal function on_event(event, filename) \n\t\tif event == 'change' then \n\t\t\thandler(filename)\n\t\tend\n\tend\n\tself.watcher = luv.new_fs_event()\n\tself.watcher:start(path, luv.FS_EVENT_RECURSIVE, on_event)\n\treturn self.watcher", "CodeBleu_score": 55.127544588351526}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t\n-- TODO: This function is too long. Refactor it.\n", "CodeBleu_score": 1.288707960563026}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal lines = self:get_lines()\n\tif not lines then\n\t\treturn nil\n\tend\n\tlocal hunks = self.git_object:hunks_for_lines(lines)\n\tif not hunks then\n\t\treturn nil\n\tend\n\tself:set_var('vgit_hunks', hunks)\n\tlocal signs = {}\n\tfor _, hunk in ipairs(hunks) do\n\t\tlocal hunk_sign = signs_setting[hunk.type]\n\t\tfor _, line in ipairs(hunk.lines) do\n\t\t\tsigns[line] = hunk_sign\n\t\tend\n\tend\n\tself:set_var('vgit_signs', signs)\n\treturn hunks", "CodeBleu_score": 33.81215538233852}, {"code": "function GitBuffer:live_hunks()\n\t\nend\n", "CodeBleu_score": 1.3124364459293645}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\nend\n", "CodeBleu_score": 1.4853729282483075}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\nend\n", "CodeBleu_score": 1.4853729282483075}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\nend\n", "CodeBleu_score": 1.4853729282483075}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\nString authorization = config.getAccessTokenEndpoint() + \\\"?\\\" + GRANT_TYPE_KEY + \\\"=\\\" + GRANT_TYPE_CLIENT_CREDENTIALS;\nOAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), authorization, api.getAccessTokenEndpoint());\nrequest.addBodyParameter(OAuthConstants.CLIENT_ID, config.getApiKey());\nrequest.addBodyParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret());\nrequest.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\nrequest.addBodyParameter(OAuthConstants.REDIRECT_URI, config.getCallback());\nrequest.addBodyParameter(OAuthConstants.SCOPE, config.getScope());\n\nResponse response = request.send();\nreturn api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 37.73059287111587}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tOAuthRequest request = new OAuthRequest(this.api.getAccessTokenVerb(), this.api.getAccessTokenEndpoint());\n\trequest.addBodyParameter(OAuthConstants.CLIENT_ID, this.config.getApiKey());\n\trequest.addBodyParameter(OAuthConstants.CLIENT_SECRET, this.config.getApiSecret());\n\trequest.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n\trequest.addBodyParameter(OAuthConstants.REDIRECT_URI, this.config.getCallback());\n\trequest.addBodyParameter(GRANT_TYPE_KEY, GRANT_TYPE_CLIENT_CREDENTIALS);\n\trequest.addHeader(OAuthConstants.HEADER, \"Basic \" + Base64.encodeBytes(String.format(\"%s:%s\", this.config.getApiKey(), this.config.getApiSecret()).getBytes(StandardCharsets.UTF_8)));\n\tResponse response = request.send();\n\treturn this.api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 55.43940099743567}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tOAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());\nrequest.addBodyParameter(OAuthConstants.CLIENT_ID, config.getApiKey());\nrequest.addBodyParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret());\nrequest.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\nrequest.addBodyParameter(GRANT_TYPE_KEY, GRANT_TYPE_CLIENT_CREDENTIALS);\nrequest.addHeader(OAuthConstants.HEADER, \"Basic \" + Base64.encodeBytes(String.format(\"%s:%s\", config.getApiKey(), config.getApiSecret()).getBytes(StandardCharsets.UTF_8)));\nResponse response = request.send();\nreturn api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 69.61089371342254}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tLOGGER.log(Level.FINE, \"Configuring context for {0}\", host.toURI());\n\t// Create a credentials provider that will provide the credentials for the host\n\tCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n\tcredentialsProvider.setCredentials(new AuthScope(host), httpCredentials);\n\n\t// Create an auth cache that will cache the credentials for the host\n\tAuthCache authCache = new BasicAuthCache();\n\tLOGGER.log(Level.FINE, \"Adding host {0} to the authentication cache\", host.toURI());\n\tauthCache.put(host, new BasicScheme());\n\n\t// Assign the credentials and auth cache to the context\n\tcontext.setCredentialsProvider(credentialsProvider);\n\tcontext.setAuthCache(authCache);\n}", "CodeBleu_score": 71.99330456008687}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tLOGGER.log(Level.FINE, \"Configuring context for host {0}\", host);\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\tcredsProvider.setCredentials(AuthScope.ANY, httpCredentials);\n\tLOGGER.log(Level.FINE, \"Adding host {0} to auth cache\", host);\n\tAuthCache authCache = new BasicAuthCache();\n\tBasicScheme basicAuth = new BasicScheme();\n\tauthCache.put(host, basicAuth);\n\tcontext.setCredentialsProvider(credsProvider);\n\tcontext.setAuthCache(authCache);\n}", "CodeBleu_score": 58.53934022103597}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\t// Get the credentials provider\n\tCredentialsProvider credentialsProvider = context.getCredentialsProvider();\n\t// Add the credentials to the provider\n\tcredentialsProvider.setCredentials(new AuthScope(host), httpCredentials);\n\t// Create an auth cache\n\tAuthCache authCache = new BasicAuthCache();\n\t// Generate BasicScheme object and add it to the local auth cache\n\tBasicScheme basicAuth = new BasicScheme();\n\tauthCache.put(host, basicAuth);\n\t// Add the auth cache to the execution context\n\tcontext.setAuthCache(authCache);\n\tLOGGER.log(Level.FINE, \"Added host {0} to the authentication cache\", host);\n}", "CodeBleu_score": 65.69414212004313}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t\tAvatarCache avatarCache = AvatarCache.getInstance();\n\tif (avatarCache == null) {\n\t\tthrow new IllegalStateException(\\\"AvatarCache extension not found\\\");\n\t}\n\tString key = avatarCache.getKey(source, size);\n\tavatarCache.seed(source, size);\n\tString url = Jenkins.get().getRootUrl() + AvatarCache.ActionURI + \\\"/\\\" + size + \\\"/\\\" + key;\n\ttry {\n\t\treturn URLEncoder.encode(url, \\\"UTF-8\\\");\n\t} catch (UnsupportedEncodingException e) {\n\t\tthrow new RuntimeException(e);\n\t}\n}", "CodeBleu_score": 34.798185320742}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t\tJenkins jenkins = Jenkins.get();\n\tAvatarCache avatarCache = AvatarCache.get();\n\tif (avatarCache == null) {\n\t\tthrow new IllegalStateException(\\\"AvatarCache not available\\\");\n\t}\n\tString key = avatarCache.getKey(source, size);\n\tavatarCache.seed(source);\n\ttry {\n\t\treturn jenkins.getRootUrl() + ActionURI + \\\"/\\\" + URLEncoder.encode(key, \\\"UTF-8\\\") + \\\"/\\\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\\\"UTF-8 encoding not available\\\");\n    }\n}", "CodeBleu_score": 38.143625705091154}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t\tJenkins jenkins = Jenkins.getInstance();\n\tAvatarCache avatarCache = ExtensionList.lookupSingleton(AvatarCache.class);\n\tif (avatarCache == null) {\n\t\tthrow new IllegalStateException(\\\"AvatarCache not found.\\\");\n\t}\n\tString key = avatarCache.getKey(source, size);\n\tavatarCache.seed(source, size);\n\ttry {\n\t\treturn jenkins.getRootUrl() + ActionURI + \\\"/\\\" + URLEncoder.encode(key, \\\"UTF-8\\\") + \\\"/\\\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\\\"UTF-8 encoding not supported\\\", e);\n    }\n}", "CodeBleu_score": 43.35502099359778}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\nthis.image = image;\nif (lastModified < 0) {\nthis.lastModified = System.currentTimeMillis();\n} else {\nthis.lastModified = lastModified;\n}\n}", "CodeBleu_score": 35.06962740578115}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source;\n\tthis.image = image;\n\tthis.lastModified = lastModified;\n\tif (lastModified < 0) {\n\t\tlastModified = System.currentTimeMillis();\n\t}\n}", "CodeBleu_score": 31.88259237183696}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source;\n\tthis.image = image;\n\tthis.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n\tif (this.image != null) {\n\t\tif (this.image.getWidth() > 128 || this.image.getHeight() > 128) {\n\t\t\tthis.image = scaleImage(this.image, 128);\n\t\t}\n\t}\n}", "CodeBleu_score": 58.67150611469122}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\tif (future == null) {\nreturn false;\n}\nif (future.isDone()) {\ntry {\nCacheEntry entry = future.get();\nimage = entry.image;\nlastModified = entry.lastModified;\nfuture = null;\nreturn false;\n} catch (InterruptedException e) {\nfuture = null;\nreturn true;\n} catch (ExecutionException e) {\nfuture = null;\nreturn true;\n}\n}\nreturn true;\n}", "CodeBleu_score": 51.29950040625106}, {"code": "private synchronized boolean pending(){\n\tif (future == null) {\nreturn false;\n}\ntry {\nif (future.isDone()) {\nCacheEntry entry = future.get();\nimage = entry.image;\nlastModified = entry.lastModified;\nfuture = null;\nreturn false;\n}\n} catch (InterruptedException e) {\nfuture = null;\n} catch (ExecutionException e) {\nfuture = null;\n}\nreturn true;\n}", "CodeBleu_score": 47.866601033172216}, {"code": "private synchronized boolean pending(){\n\tif (future == null) {\nreturn false;\n}\nif (future.isDone()) {\ntry {\nCacheEntry entry = future.get();\nif (entry != null) {\nimage = entry.image;\nlastModified = entry.lastModified;\nfuture = null;\n}\n} catch (InterruptedException e) {\nfuture = null;\n} catch (ExecutionException e) {\nfuture = null;\n}\n}\nreturn true;\n}", "CodeBleu_score": 50.745194775802524}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\trsp.addDateHeader(\"Last-Modified\", lastModified);\n\trsp.addHeader(\"Cache-control\", cacheControl);\n\trsp.setContentType(\"image/png\");\n\tOutputStream out = rsp.getOutputStream();\n\tImageIO.write(image, \"PNG\", out);\n\tif (flushImage) {\n\t    image.flush();\n\t}\n}", "CodeBleu_score": 37.27661957885059}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\trsp.addDateHeader(\"Last-Modified\", avatar.lastModified);\nrsp.addHeader(\"Cache-control\", \"max-age=3600, public\");\nrsp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n}", "CodeBleu_score": 16.336657636323388}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t//                            rsp.addDateHeader(\"Last-Modified\", avatar.lastModified);\n//                            rsp.addHeader(\"Cache-control\", \"max-age=3600, public\");\n//                            rsp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n//                        }", "CodeBleu_score": 9.478072981173705}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tsuper();\nthis.enableCache = enableCache;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n        if (enableCache) {\n            cachedTeam.setExpiry(teamCacheDuration, HOURS);\n            cachedRepositories.setExpiry(repositoriesCacheDuration, HOURS);\n        }\n        RequestConfig config = RequestConfig.custom().setSocketTimeout(60 * 1000).setConnectTimeout(60 * 1000)\n                .setConnectionRequestTimeout(60 * 1000).build();\n        HttpClientBuilder builder = HttpClientBuilder.create().setDefaultRequestConfig(config)\n                .setConnectionManager(connectionManager).setRetryHandler(new StandardHttpRequestRetryHandler(5, true))\n                .setProxy(getProxyConfiguration());\n        if (authenticator != null) {\n            CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n            credentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(authenticator.getUsername(),\n                    authenticator.getPassword()));\n            builder.setDefaultCredentialsProvider(credentialsProvider);\n            AuthCache authCache = new BasicAuthCache();\n            BasicScheme basicAuth = new BasicScheme();\n            authCache.put(API_HOST, basicAuth);\n            context = HttpClientContext.create();\n            context.setAuthCache(authCache);\n        }\n        client = builder.build();\n    }", "CodeBleu_score": 50.35786291355562}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tthis.enableCache = enableCache;\nthis.owner = owner;\nthis.projectKey = projectKey;\nthis.repositoryName = repositoryName;\nthis.authenticator = authenticator;\nif (enableCache) {\n    cachedTeam.setExpiry(teamCacheDuration, TimeUnit.MINUTES);\n    cachedRepositories.setExpiry(repositoriesCacheDuration, TimeUnit.MINUTES);\n}\n\nRequestConfig requestConfig = RequestConfig.custom()\n        .setConnectTimeout(10 * 1000)\n        .setSocketTimeout(60 * 1000)\n        .setConnectionRequestTimeout(10 * 1000)\n        .setProxy(getProxy())\n        .build();\n\nCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\nif (authenticator != null) {\n    credentialsProvider.setCredentials(\n            AuthScope.ANY,\n            new UsernamePasswordCredentials(authenticator.getAuthenticationUsername(), authenticator.getAuthenticationPassword()));\n}\n\nclient = HttpClientBuilder.create()\n        .setConnectionManager(connectionManager)\n        .setDefaultCredentialsProvider(credentialsProvider)\n        .setRetryHandler(new StandardHttpRequestRetryHandler(3, false))\n        .setDefaultRequestConfig(requestConfig)\n        .build();\n\ncontext = HttpClientContext.create();\nif (authenticator != null) {\n    context.setCredentialsProvider(credentialsProvider);\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(API_HOST, new BasicScheme());\n    context.setAuthCache(authCache);\n}\n}", "CodeBleu_score": 46.76686205979023}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tthis.owner = owner;\nthis.projectKey = projectKey;\nthis.repositoryName = repositoryName;\nthis.enableCache = enableCache;\nthis.authenticator = authenticator;\n\nif (enableCache) {\n    cachedTeam.setExpiry(teamCacheDuration, HOURS);\n    cachedRepositories.setExpiry(repositoriesCacheDuration, HOURS);\n}\n\nRequestConfig config = RequestConfig.custom()\n        .setConnectTimeout(60 * 1000)\n        .setSocketTimeout(60 * 1000)\n        .build();\n\n// Configure proxy\n\nProxyConfiguration proxyConfiguration = Jenkins.getInstance().proxy;\n\nif (proxyConfiguration != null) {\n    Proxy proxy = proxyConfiguration.createProxy(API_HOST.getHostName());\n    if (proxy != null) {\n        LOGGER.log(Level.FINE, \\\"Using proxy {0}\\\", proxy);\n        config = RequestConfig.copy(config).setProxy(proxy).build();\n    }\n}\n\n// Configure retry handler\n\nclient = HttpClientBuilder.create()\n        .setConnectionManager(connectionManager)\n        .setRetryHandler(new StandardHttpRequestRetryHandler(3, false))\n        .setDefaultRequestConfig(config)\n        .build();\n\ncontext = HttpClientContext.create();\n\nif (authenticator != null) {\n    LOGGER.log(Level.FINE, \\\"Using authenticator {0}\\\", authenticator);\n    authenticator.configure(client, context);\n}\n\n}", "CodeBleu_score": 48.957851415519826}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\tif (pullRequest.getSource().getRepository() != null && pullRequest.getSource().getCommit() != null) {\n\t\tString branchName = pullRequest.getSource().getBranch().getName();\n\t\tString commitHash = pullRequest.getSource().getCommit().getHash();\n\t\tpullRequest.getSource().setCommit(new CommitClosure(commitHash));\n\t}\n\tif (pullRequest.getDestination().getRepository() != null && pullRequest.getDestination().getCommit() != null) {\n\t\tString branchName = pullRequest.getDestination().getBranch().getName();\n\t\tString commitHash = pullRequest.getDestination().getCommit().getHash();\n\t\tpullRequest.getDestination().setCommit(new CommitClosure(commitHash));\n\t}\n}", "CodeBleu_score": 36.909117418979854}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\tBitbucketBranch branch = pullRequest.getSource();\n\tif (branch != null && branch.getRepository() != null && branch.getCommit() != null) {\n\t\tString commitHash = branch.getCommit().getHash();\n\t\tif (commitHash != null) {\n\t\t\tBitbucketCommit commit = resolveCommit(commitHash);\n\t\t\tif (commit != null) {\n\t\t\t\tbranch.setCommit(commit);\n\t\t\t}\n\t\t}\n\t}\n\n\tbranch = pullRequest.getDestination();\n\tif (branch != null && branch.getRepository() != null && branch.getCommit() != null) {\n\t\tString commitHash = branch.getCommit().getHash();\n\t\tif (commitHash != null) {\n\t\t\tBitbucketCommit commit = resolveCommit(commitHash);\n\t\t\tif (commit != null) {\n\t\t\t\tbranch.setCommit(commit);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 38.86535990266836}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\tString sourceBranch = pullRequest.getSource().getBranch().getName();\n\tString destinationBranch = pullRequest.getDestination().getBranch().getName();\n\n\t// source branch\n\tBitbucketRepository repository = pullRequest.getSource().getRepository();\n\tif (repository != null) {\n\t\tBitbucketCloudCommit commit = resolveCommit(repository.getRawNode(), sourceBranch);\n\t\tpullRequest.getSource().setCommit(commit);\n\t}\n\n\t// destination branch\n\trepository = pullRequest.getDestination().getRepository();\n\tif (repository != null) {\n\t\tBitbucketCloudCommit commit = resolveCommit(repository.getRawNode(), destinationBranch);\n\t\tpullRequest.getDestination().setCommit(commit);\n\t}\n}", "CodeBleu_score": 40.21298883916917}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t\tJenkinsLocationConfiguration locationConfiguration = JenkinsLocationConfiguration.get();\n\tif (locationConfiguration == null) {\n\t\tthrow new IllegalStateException(\"Jenkins location configuration is null\");\n\t}\n\tString rootUrl = locationConfiguration.getUrl();\n\tif (rootUrl == null) {\n\t\tthrow new IllegalStateException(\"Jenkins location URL is null\");\n\t}\n\treturn DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 53.89064172433753}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t\tJenkinsLocationConfiguration locationConfiguration = JenkinsLocationConfiguration.get();\n\tif (locationConfiguration == null) {\n\t\tthrow new IllegalStateException(\"Jenkins location configuration not found\");\n\t}\n\tURL rootURL = locationConfiguration.getUrl();\n\tif (rootURL == null) {\n\t\tthrow new IllegalStateException(\"Jenkins root URL not found\");\n\t}\n\treturn DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 54.143428383683755}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t\tJenkinsLocationConfiguration locationConfiguration = JenkinsLocationConfiguration.get();\n\tString rootURL = locationConfiguration.getUrl();\n\tif (rootURL == null) {\n\t\tthrow new IllegalStateException(\"Jenkins root URL is not configured. Please configure it in Manage Jenkins -> Configure System -> Location\");\n\t}\n\tString displayURL = DisplayURLProvider.get().getRunURL(build);\n\tif (displayURL == null) {\n\t\tthrow new IllegalStateException(\"Cannot find display URL for build \" + build);\n\t}\n\treturn rootURL.endsWith(\"/\") ? rootURL + displayURL.substring(1) : rootURL + displayURL;\n}", "CodeBleu_score": 58.576206186177785}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\ttry {\n\t\tURL u = new URL(url);\n\t\tString host = u.getHost();\n\n\t\tif (host == null || host.isEmpty()) {\n\t\t\tthrow new IllegalStateException(\\\"Could not determine Jenkins URL.\\\");\n\t\t}\n\n\t\tif (host.equals(\\\"localhost\\\") || host.equals(\\\"unconfigured-jenkins-location\\\")) {\n\t\t\tthrow new IllegalStateException(\\\"Jenkins URL cannot be \\\" + host + \\\".\\\");\n\t\t}\n\n\t\tif (bitbucket instanceof BitbucketCloudApiClient) {\n\t\t\tif (!host.contains(\\\".\\\")) {\n\t\t\t\tthrow new IllegalStateException(\\\"Jenkins URL must be fully qualified for Bitbucket Cloud API clients.\\\");\n\t\t\t}\n\t\t}\n\n\t\treturn url;\n\t} catch (MalformedURLException e) {\n\t\tthrow new IllegalStateException(\\\"Jenkins URL is malformed.\\\", e);\n\t}\n}", "CodeBleu_score": 46.559062853401684}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\ttry {\n\t\tURL u = new URL(url);\n\t\tString host = u.getHost();\n\t\tif (host == null) {\n\t\t\tthrow new IllegalStateException(\\\"URL \\\" + url + \\\" is malformed.\\\");\n\t\t}\n\t\tif (host.equals(\\\"localhost\\\") || host.equals(\\\"unconfigured-jenkins-location\\\")) {\n\t\t\tthrow new IllegalStateException(\\\"URL \\\" + url + \\\" is using localhost or unconfigured-jenkins-location as the host.\\\");\n\t\t}\n\t\tif (bitbucket instanceof BitbucketCloudApiClient) {\n\t\t\tif (host.contains(\\\".\\\") == false) {\n\t\t\t\tthrow new IllegalStateException(\\\"URL \\\" + url + \\\" is using Bitbucket Cloud API but the host is not fully qualified.\\\");\n\t\t\t}\n\t\t}\n\t\treturn url;\n\t} catch (MalformedURLException e) {\n\t\tthrow new IllegalStateException(\\\"URL \\\" + url + \\\" is malformed.\\\", e);\n\t}\n}", "CodeBleu_score": 44.882508043957905}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\ttry {\n\t\tURL parsedURL = new URL(url);\n\t\tif (parsedURL.getHost().equals(\\\"localhost\\\") || parsedURL.getHost().equals(\\\"unconfigured-jenkins-location\\\")) {\n\t\t\tthrow new IllegalStateException(\\\"URL is not valid: \" + url + \\\". Please configure the Jenkins URL in the Jenkins global configuration.\\\");\n\t\t}\n\t\tif (bitbucket instanceof BitbucketCloudApiClient) {\n\t\t\tif (StringUtils.isEmpty(parsedURL.getHost())) {\n\t\t\t\tthrow new IllegalStateException(\\\"URL is not valid: \" + url + \\\". Please configure the Jenkins URL in the Jenkins global configuration.\\\");\n\t\t\t}\n\t\t}\n\t\treturn url;\n\t} catch (MalformedURLException e) {\n\t\tthrow new IllegalStateException(\\\"URL is not valid: \" + url + \\\". Please configure the Jenkins URL in the Jenkins global configuration.\\\", e);\n\t}\n}", "CodeBleu_score": 48.66903756758047}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\tif (source == null) {\n\t\treturn;\n\t}\n\n\tif (source.shouldNotifyBitbucket()) {\n\t\tlistener.getLogger().println(\\\"[Bitbucket] Sending build status notifications to Bitbucket for revision type: \\\" + source.getBuildStatus());\n\t\tSCMRevision revision = build.getAction(SCMRevisionAction.class).getRevision();\n\t\tString hash = null;\n\t\tif (revision != null) {\n\t\t\thash = revision.getHash();\n\t\t}\n\t\tif (hash == null) {\n\t\t\tlistener.getLogger().println(\\\"[Bitbucket] Unable to determine revision hash, skipping build status notification\\\");\n\t\t\treturn;\n\t\t}\n\n\t\tString buildKey = source.getBuildKey(build);\n\t\tif (buildKey == null) {\n\t\t\tlistener.getLogger().println(\\\"[Bitbucket] Unable to determine build key, skipping build status notification\\\");\n\t\t\treturn;\n\t\t}\n\n\t\tBitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n\t\tif (context.isNotificationDisabled()) {\n\t\t\tlistener.getLogger().println(\\\"[Bitbucket] Notification disabled for build key: \\\" + buildKey);\n\t\t\treturn;\n\t\t}\n\n\t\tBitbucketApi bitbucket = context.newClient();\n\t\tif (bitbucket == null) {\n\t\t\tlistener.getLogger().println(\\\"[Bitbucket] Unable to create Bitbucket client, skipping build status notification\\\");\n\t\t\treturn;\n\t\t}\n\n\t\tcreateStatus(build, listener, bitbucket, buildKey, hash);\n\t} else {\n\t\tlistener.getLogger().println(\\\"[Bitbucket] Skip build status notification\\\");\n\t}\n}", "CodeBleu_score": 31.011209224841664}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t", "CodeBleu_score": 3.5406350036655807}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t", "CodeBleu_score": 3.5406350036655807}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t String buildKey = build.getParent().getFullName();\n if (shareBuildKeyBetweenBranchAndPR) {\n buildKey = build.getParent().getFullName() + \\\"/\\\" + branch;\n }\n return buildKey;\n }", "CodeBleu_score": 32.0125258936993}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t String key = null;\n if (shareBuildKeyBetweenBranchAndPR) {\n Folder folder = build.getParent().getParent();\n if (folder != null) {\n key = folder.getFullName() + \\\"/\\\" + branch;\n }\n }\n if (key == null) {\n key = build.getParent().getFullName();\n }\n return key;\n }", "CodeBleu_score": 44.43596761528374}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t String jobFullName = build.getParent().getFullName();\n if (shareBuildKeyBetweenBranchAndPR) {\n return String.format(\\\"%s/%s\\\", jobFullName, branch);\n}\n return jobFullName;\n}", "CodeBleu_score": 32.92369603224894}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\t\tif (serverUrl == null) {\n\t\tLOGGER.log(Level.WARNING, \\\"No server URL set for {0}, using default {1}\\\", this, BitbucketCloudEndpoint.SERVER_URL);\n\t\tserverUrl = BitbucketCloudEndpoint.SERVER_URL;\n\t}\n\tif (traits == null) {\n\t\tLOGGER.log(Level.WARNING, \\\"No traits set for {0}, using default traits\\\", this);\n\t\ttraits = new ArrayList<>();\n\t\ttraits.add(new BranchDiscoveryTrait(true, true));\n\t\ttraits.add(new OriginPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD)));\n\t\ttraits.add(new ForkPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD),\n\t\t\t\tnew ForkPullRequestDiscoveryTrait.TrustEveryone()));\n\t\ttraits.add(new PublicRepoPullRequestFilterTrait());\n\t\tif (checkoutCredentialsId != null && !BitbucketSCMSource.DescriptorImpl.SAME.equals(checkoutCredentialsId)) {\n\t\t\ttraits.add(new SSHCheckoutTrait(checkoutCredentialsId));\n\t\t}\n\t}\n\treturn this;\n}", "CodeBleu_score": 18.023204111860515}, {"code": "private Object readResolve() throws ObjectStreamException{\n\tif (serverUrl == null) {\nserverUrl = BitbucketCloudEndpoint.SERVER_URL;\nLOGGER.log(Level.WARNING, \\\"Setting serverUrl to {0} since it was null\\\", serverUrl);\n}\nif (traits == null) {\ntraits = new ArrayList<>();\ntraits.add(new BranchDiscoveryTrait(true, true));\ntraits.add(new OriginPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD)));\ntraits.add(new ForkPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD), new ForkPullRequestDiscoveryTrait.TrustEveryone()));\ntraits.add(new PublicRepoPullRequestFilterTrait());\n}\nreturn this;\n}", "CodeBleu_score": 13.288013932680848}, {"code": "private Object readResolve() throws ObjectStreamException{\n\tif (serverUrl == null) {\nLOGGER.log(Level.WARNING, \\\"Deserializing legacy navigator with no server URL, assuming {0}\\\", BitbucketCloudEndpoint.SERVER_URL);\n\nserverUrl = BitbucketCloudEndpoint.SERVER_URL;\n\n}\n\nif (traits == null) {\n\nLOGGER.log(Level.WARNING, \\\"Deserializing legacy navigator with no traits, assuming defaults\\\");\n\ntraits = new ArrayList<>();\n\ntraits.add(new BranchDiscoveryTrait(true, true));\n\ntraits.add(new OriginPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD)));\n\ntraits.add(new ForkPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD),\n\nnew ForkPullRequestDiscoveryTrait.TrustEveryone()));\n\ntraits.add(new PublicRepoPullRequestFilterTrait());\n\n}\n\nreturn this;\n\n}", "CodeBleu_score": 13.00803465753147}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t\ttry {\n\t\tString fullName = request.getRepoOwner() + \"/\" + name;\n\t\tBitbucketRepository repository = request.getBitbucketSCMSource().getRepo(fullName);\n\t\tif (repository == null) {\n\t\t\tlistener.getLogger().format(\\\"[Bitbucket] No repository named '%s' found for %s\\\n\\\", fullName, request.getRepoOwner());\n\t\t} else {\n\t\t\tif (isMatch) {\n\t\t\t\tcount++;\n\t\t\t\tlistener.getLogger().format(\\\"[Bitbucket] Found repository '%s' for %s\\\n\\\", fullName, request.getRepoOwner());\n\t\t\t} else {\n\t\t\t\tlistener.getLogger().format(\\\"[Bitbucket] Ignoring repository '%s' for %s\\\n\\\", fullName, request.getRepoOwner());\n\t\t\t}\n\t\t}\n\t} catch (BitbucketRequestException e) {\n\t\tlistener.error(\\\"[Bitbucket] Failed to check repository '%s' for %s\\\n\\\", name, request.getRepoOwner());\n\t\tlistener.error(e.getMessage());\n\t}\n}", "CodeBleu_score": 42.93371945339325}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t\ttry {\n\t\tBitbucketRepository repo = getFromBitbucket(request.serverUrl, request.credentialsId, request.repoOwner, name);\n\t\tif (isMatch) {\n\t\t\tcount++;\n\t\t\tlistener.getLogger().format(\\\"Proposing %s (%s)\\\n\\\", repo.getRepositoryName(), repo.getRepositorySlug());\n\t\t} else {\n\t\t\tlistener.getLogger().format(\\\"Ignoring %s (%s)\\\n\\\", repo.getRepositoryName(), repo.getRepositorySlug());\n\t\t}\n\t} catch (IOException e) {\n\t\tlistener.error(\\\"Failed to retrieve repository %s from Bitbucket: %s\\\", name, e.getMessage());\n\t}\n}", "CodeBleu_score": 44.13861187647805}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\tif (isMatch) {\nlistener.getLogger().format(\n\"Found repository \\\"%s\\\" in Bitbucket server at %s%n\",\nname,\nrequest.getServerUrl());\ncount++;\n} else {\nlistener.getLogger().format(\n\"Ignoring repository \\\"%s\\\" in Bitbucket server at %s%n\",\nname,\nrequest.getServerUrl());\n}\n}", "CodeBleu_score": 37.68038786211504}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t", "CodeBleu_score": 7.465730872593649}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t_class: 'org.jenkinsci.plugins.gitclient.GitClient'}", "CodeBleu_score": 7.509140041621098}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t_class: \"com.cloudbees.jenkins.plugins.bitbucket.FallbackToOtherRepositoryGitSCMExtension\", cloneLink: \"https://github.com/jenkinsci/bitbucket-branch-source-plugin.git\", remoteName: \"origin\"}", "CodeBleu_score": 9.80668492538524}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n\tfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n\t\tList<BitbucketHref> hrefs = entry.getValue();\n\t\tif (hrefs != null && !hrefs.isEmpty()) {\n\t\t\tresult.put(entry.getKey(), hrefs.get(0));\n\t\t}\n\t}\n\treturn Collections.unmodifiableMap(result);\n}", "CodeBleu_score": 56.85665931900363}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n\tfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n\t\tList<BitbucketHref> linkList = entry.getValue();\n\t\tif (linkList != null && !linkList.isEmpty()) {\n\t\t\tresult.put(entry.getKey(), linkList.get(0));\n\t\t}\n\t}\n\treturn Collections.unmodifiableMap(result);\n}", "CodeBleu_score": 56.36664899770096}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\tif (links == null) {\nreturn null;\n}\nMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>(links.size());\nfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\nList<BitbucketHref> linkList = entry.getValue();\nif (linkList != null && !linkList.isEmpty()) {\nresult.put(entry.getKey(), linkList.get(0));\n}\n}\nreturn Collections.unmodifiableMap(result);\n}", "CodeBleu_score": 57.53371273708483}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tif (!resourceStates || resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\tconst uris = resourceStates.map(r => r.resourceUri);\n\tconst repository = this.repository(uris[0]);\n\n\tif (!repository) {\n\t\treturn;\n\t}\n\n\tconst paths = await this.getResourceStatesPaths(resourceStates);\n\tconst added = await repository.add(paths.added);\n\tconst updated = await repository.update(paths.updated);\n\tconst untracked = await repository.untracked(paths.untracked);\n\tconst ignored = await repository.ignored(paths.ignored);\n\tconst rejected = added.concat(updated, untracked, ignored).filter(r => !r.success);\n\n\tif (rejected.length) {\n\t\tconst message = rejected.map(r => r.reason).join(\\\"\\\n\\\");\n\t\tconst title = localize(\\\"svn.add.failed\\\", \\\"Failed to add to Subversion\\\");\n\t\twindow.showErrorMessage(title, { modal: true }, message);\n\t}\n}", "CodeBleu_score": 48.9406871669951}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tconst resources = await this.getResourceStates(resourceStates);\n\tif (resources.length === 0) {\n\t\treturn;\n\t}\n\n\tconst uris = resources.map(resource => resource.resourceUri);\n\tconst repoResources = this.repository.groupResources(uris);\n\n\tfor (const repoUri of repoResources.keys()) {\n\t\tconst repo = this.repository.getRepository(repoUri);\n\t\tconst repoPath = repo.rootUri.fsPath;\n\t\tconst repoResources = repoResources.get(repoUri)!;\n\n\t\tconst filePaths = repoResources.map(resource => this.repository.toFilePath(resource));\n\t\tconst addedFiles = await repo.add(filePaths);\n\n\t\tif (addedFiles.length > 0) {\n\t\t\tthis.repository.groupChanges(addedFiles, repoPath).forEach(change => {\n\t\t\t\tthis.repository.fireSoon(new SourceControlChangeEvent(this.repository, change));\n\t\t\t});\n\t\t}\n\t}\n}", "CodeBleu_score": 50.32877604424186}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tif (!resourceStates || resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\tconst resources = resourceStates.map(resource => resource.resourceUri);\n\n\tconst repository = await this.repository(resources[0]);\n\tif (!repository) {\n\t\treturn;\n\t}\n\n\tconst repositoryRoot = await this.repositoryRoot(repository);\n\tif (!repositoryRoot) {\n\t\treturn;\n\t}\n\n\tconst filePaths = resources.map(resource => this.resourcePath(repositoryRoot, resource));\n\tconst filePathsSet = new Set(filePaths);\n\n\tconst added = await this.addFilesToRepository(repository, filePathsSet);\n\tif (added.length === 0) {\n\t\treturn;\n\t}\n\n\tconst addedResources = added.map(filePath => this.resourceUri(repositoryRoot, filePath));\n\tconst addedResourcesSet = new Set(addedResources);\n\n\tconst untracked = filePathsSet.filter(filePath => !addedResourcesSet.has(filePath));\n\tif (untracked.size > 0) {\n\t\tconst untrackedResources = untracked.map(filePath => this.resourceUri(repositoryRoot, filePath));\n\t\tawait this.untrackedResourcesDecoration.provideFileDecoration(untrackedResources);\n\t}\n}", "CodeBleu_score": 46.46324624057135}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t\tconst resourceStates = this.resourceStates;\n\tif (!resourceStates.length || !(resourceStates[0] instanceof Uri)) {\n\t\tconst resource = this.getResource();\n\t\tif (resource) {\n\t\t\tthis.resourceStates = [resource];\n\t\t}\n\t}\n\n\treturn this.resourceStates.filter(resource => resource instanceof Resource);\n}", "CodeBleu_score": 35.124589763149416}, {"code": "protected async getResourceStates{\n\tconst resourceStates = await this.getResourceStatesInternal();\n\nif (resourceStates.length === 0 || !(resourceStates[0] instanceof Uri)) {\nconst resource = this.getResource(resourceStates);\n\nif (resource) {\nresourceStates[0] = resource.resourceUri;\n}\n}\n\nreturn resourceStates.filter(resourceState => resourceState instanceof Resource);\n}", "CodeBleu_score": 42.12310198919305}, {"code": "protected async getResourceStates{\n\tconst resourceStates = await this.getResourceStatesFromSourceControl(resourceStates);\n\nif (!resourceStates || resourceStates.length === 0 || !(resourceStates[0] instanceof Uri)) {\nconst resource = await this.getResourceFromSourceControl();\n\nif (resource) {\nresourceStates.push(resource);\n}\n}\n\nreturn resourceStates.filter(resourceState => resourceState instanceof Resource);\n}", "CodeBleu_score": 44.98854764847714}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t", "CodeBleu_score": 1.5395211194129954}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t/**\n * This async function retrieves a source control management (SCM) resource for a given URI. If no URI is provided, it uses the URI of the active text editor. If the URI is in the \"svn\" scheme, it converts it to a file URI. For file URIs, it gets the source control manager and retrieves the repository for the URI, returning the corresponding resource. If no valid URI or repository is found, it returns undefined.\n */\n    if (!uri && window.activeTextEditor) {\n      uri = window.activeTextEditor.document.uri;\n    }\n\n    if (uri && uri.scheme === \\\"svn\\\") {\n      uri = fromSvnUri(uri);\n    }\n\n    if (uri && uri.scheme === \\\"file\\\") {\n      const sourceControlManager = (await commands.executeCommand(\n        \\\"svn.getSourceControlManager\\\",\n        \\\"\\\"\n      )) as SourceControlManager;\n      const repository = sourceControlManager.getRepository(uri);\n\n      if (repository) {\n        return repository.getResource(uri);\n      }\n    }\n\n    return undefined;\n  }", "CodeBleu_score": 47.70442943311494}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t\n/**\n * This async function retrieves a source control management (SCM) resource for a given URI. If no URI is provided, it uses the URI of the active text editor. If the URI is in the \"svn\" scheme, it converts it to a file URI. For file URIs, it gets the source control manager and retrieves the repository for the URI, returning the corresponding resource. If no valid URI or repository is found, it returns undefined.\n */\n    if (!uri) {\n      const activeEditor = window.activeTextEditor;\n\n      if (!activeEditor) {\n        return undefined;\n      }\n\n      uri = activeEditor.document.uri;\n    }\n\n    if (uri.scheme === \\\"svn\\\") {\n      uri = fromSvnUri(uri);\n    }\n\n    const sourceControlManager = (await commands.executeCommand(\n      \\\"svn.getSourceControlManager\\\",\n      \\\"\\\"\n    )) as SourceControlManager;\n\n    const repository = sourceControlManager.getRepository(uri);\n\n    if (!repository) {\n      return undefined;\n    }\n\n    return repository.getResource(uri);\n  }", "CodeBleu_score": 56.137658007348655}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\t const repo = this.model.getRepository(element.repo);\n if (element.item === Status.ADDED) {\n openFileRemote(repo, element.newPath, element.newRevision);\n } else if (element.item === Status.MODIFIED) {\n openDiff(repo, element.oldPath, element.oldRevision, element.newPath, element.newRevision);\n }\n }", "CodeBleu_score": 58.34469843669062}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t const repo = this.model.getRepository(element.repo);\n if (repo === undefined) {\n return;\n }\n\n if (element.item === Status.ADDED) {\n await openFileRemote(repo, element.newPath, element.newRevision);\n } else {\n await openDiff(repo, element.oldPath, element.oldRevision, element.newPath, element.newRevision);\n }\n }", "CodeBleu_score": 54.63984251024077}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t const repo = await this.model.getRepository(element.repo);\n if (element.item === Status.ADDED) {\n openFileRemote(repo, element.newPath, element.newRevision);\n } else {\n openDiff(repo, element.oldPath, element.oldRevision, element.newPath, element.newRevision);\n }\n }", "CodeBleu_score": 54.38811012377265}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tconst clipboard = env.clipboard;\n\tif (!clipboard) {\n\t\twindow.showErrorMessage(\n\t\t\t`Cannot copy ${what} to clipboard because the clipboard is not supported.`\n\t\t);\n\t\treturn;\n\t}\n\tif (item.kind === LogTreeItemKind.Commit) {\n\t\tconst commit = item.data as ISvnLogEntry;\n\t\tclipboard.writeText(\n\t\t\titem.parent && item.parent.kind === LogTreeItemKind.Repo\n\t\t\t\t? commit.revision\n\t\t\t\t: commit.message\n\t\t);\n\t} else {\n\t\twindow.showErrorMessage(\n\t\t\t`Cannot copy ${what} to clipboard because it is not a commit.`\n\t\t);\n\t}\n}", "CodeBleu_score": 47.585375381794925}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!env.clipboard.writeText) {\n\t\twindow.showErrorMessage(\n\t\t\t`Copying ${what} to clipboard is not supported on this platform.`\n\t\t);\n\t\treturn;\n\t}\n\tif (item.kind === LogTreeItemKind.Commit) {\n\t\tconst commit = item.data as ISvnLogEntry;\n\t\tif (what === \"revision\") {\n\t\t\tawait env.clipboard.writeText(commit.revision.toString());\n\t\t} else if (what === \"message\") {\n\t\t\tawait env.clipboard.writeText(commit.message);\n\t\t}\n\t} else {\n\t\twindow.showErrorMessage(\n\t\t\t`Can only copy commit ${what} to clipboard, but this is not a commit.`\n\t\t);\n\t}\n}", "CodeBleu_score": 47.859377353462285}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!env.clipboard.writeText) {\n\t\twindow.showErrorMessage(\n\t\t\t`The clipboard is not supported on this platform. Please copy the ${what} manually.`\n\t\t);\n\t\treturn;\n\t}\n\n\tif (item.kind === LogTreeItemKind.Commit) {\n\t\tconst commit = item.data as ISvnLogEntry;\n\t\tif (what === \"revision\") {\n\t\t\tawait env.clipboard.writeText(commit.revision.toString());\n\t\t} else {\n\t\t\tawait env.clipboard.writeText(commit.message);\n\t\t}\n\t} else if (item.kind === LogTreeItemKind.CommitDetail) {\n\t\tconst commit = item.data as ISvnLogEntry;\n\t\tif (what === \"revision\") {\n\t\t\tawait env.clipboard.writeText(commit.revision.toString());\n\t\t} else {\n\t\t\tawait env.clipboard.writeText(commit.message);\n\t\t}\n\t} else {\n\t\twindow.showErrorMessage(\n\t\t\t`You can only copy the ${what} of a commit.`\n\t\t);\n\t}\n}", "CodeBleu_score": 45.320220448141434}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t\tGiteaConnectionFactory factory = null;\n\tfor (GiteaConnectionFactory f : ServiceLoader.load(GiteaConnectionFactory.class, classLoader)) {\n\t\tif (factory == null || f.priority() > factory.priority()) {\n\t\t\tfactory = f;\n\t\t}\n\t}\n\tif (factory == null) {\n\t\tthrow new IOException(\"No GiteaConnectionFactory implementations available\");\n\t}\n\treturn factory.open(serverUrl, authentication);\n}", "CodeBleu_score": 27.027272326492728}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t\tGiteaConnectionFactory factory = findBestFactory();\n\tif (factory == null) {\n\t\tthrow new IOException(\"No suitable GiteaConnectionFactory implementation found\");\n\t}\n\treturn factory.open(serverUrl, authentication);\n}", "CodeBleu_score": 9.204147463643404}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t\tGiteaConnectionFactory factory = ServiceLoader.load(GiteaConnectionFactory.class, classLoader).iterator().next();\n\treturn factory.open(serverUrl, authentication);\n}", "CodeBleu_score": 12.350801698713674}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tClassLoader classLoader = null;\n\tJenkins jenkins = Jenkins.getInstance();\n\tif (jenkins != null) {\n\t\tclassLoader = jenkins.getPluginManager().uberClassLoader;\n\t} else {\n\t\tclassLoader = Gitea.class.getClassLoader();\n\t}\n\treturn classLoader(classLoader);\n}", "CodeBleu_score": 44.487231155286736}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tJenkins jenkins = Jenkins.getInstance();\n\tif (jenkins != null) {\n\t\tClassLoader classLoader = jenkins.getPluginManager().uberClassLoader;\n\t\tif (classLoader != null) {\n\t\t\treturn classLoader(classLoader);\n\t\t}\n\t}\n\treturn classLoader(getClass().getClassLoader());\n}", "CodeBleu_score": 43.94592489988426}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tClassLoader classLoader = Jenkins.get().getPluginManager().uberClassLoader;\n\tif (classLoader == null) {\n\t\tclassLoader = getClass().getClassLoader();\n\t}\n\treturn classLoader(classLoader);\n}", "CodeBleu_score": 43.70938863834532}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tif (serverUrl == null) {\nthrow new IllegalArgumentException(\\\"serverUrl cannot be null\\\");\n}\nthis.serverUrl = normalizeServerUrl(serverUrl);\nif (credentialsId != null) {\nif (!manageHooks) {\nLOGGER.log(Level.WARNING, \\\"credentialsId set but manageHooks is false\\\");\n}\nthis.credentialsId = credentialsId;\n} else {\nthis.credentialsId = null;\n}\nthis.aliasUrl = normalizeServerUrl(aliasUrl);\nif (displayName == null) {\nthis.displayName = inferDisplayName(serverUrl);\n} else {\nthis.displayName = displayName;\n}\nthis.manageHooks = manageHooks;\n}", "CodeBleu_score": 32.124313675267466}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tsuper();\nif (StringUtils.isBlank(serverUrl)) {\nthrow new IllegalArgumentException(\\\"serverUrl cannot be blank\\\");\n}\nthis.displayName = StringUtils.defaultIfBlank(displayName, inferDisplayName(serverUrl));\nthis.serverUrl = Util.fixEmptyAndTrim(serverUrl);\n        this.manageHooks = manageHooks;\n        this.credentialsId = StringUtils.defaultIfBlank(credentialsId, null);\n        this.aliasUrl = Util.fixEmptyAndTrim(aliasUrl);\n    }", "CodeBleu_score": 42.61747975901663}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tthis.displayName = StringUtils.defaultIfEmpty(displayName, deriveDisplayName(serverUrl));\nthis.serverUrl = normalizeServerUrl(serverUrl);\nthis.manageHooks = manageHooks;\nthis.credentialsId = credentialsId;\nthis.aliasUrl = StringUtils.trimToNull(normalizeServerUrl(aliasUrl));\nif (this.manageHooks && this.credentialsId == null) {\nthrow new IllegalArgumentException(\\\"Cannot manage hooks without credentials\\\");\n}\n}", "CodeBleu_score": 40.77626490103359}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tJenkins.get().checkPermission(Jenkins.ADMINISTER);\n\tserverUrl = GiteaServers.normalizeServerUrl(serverUrl);\n\treturn new StandardListBoxModel()\n            .includeEmptyValue()\n            .includeMatchingAs(ACL.SYSTEM, Jenkins.get(), StandardCredentials.class, URIRequirementBuilder.fromUri(serverUrl).build(),\n                    AuthenticationTokens.matcher(GiteaAuth.class));\n}", "CodeBleu_score": 51.30502582576432}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tJenkins.get().checkPermission(Jenkins.ADMINISTER);\n\tserverUrl = GiteaServers.normalizeServerUrl(serverUrl);\n\tListBoxModel items = new ListBoxModel();\n\tfor (StandardCredentials c : CredentialsProvider.lookupCredentials(StandardCredentials.class, Jenkins.get(), ACL.SYSTEM, URIRequirementBuilder.fromUri(serverUrl).build())) {\n\t\tif (CredentialsMatchers.allOf(AuthenticationTokens.matcher(GiteaAuth.class), CredentialsMatchers.withId(c.getId())).matches(c)) {\n\t\t\titems.add(c.getId(), c.getId());\n\t\t}\n\t}\n\treturn items;\n}", "CodeBleu_score": 52.82703154680174}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tJenkins.get().checkPermission(Jenkins.ADMINISTER);\n\tserverUrl = GiteaServers.normalizeServerUrl(serverUrl);\n\tList<StandardCredentials> credentials = CredentialsProvider.lookupCredentials(StandardCredentials.class, Jenkins.get(), ACL.SYSTEM, URIRequirementBuilder.fromUri(serverUrl).build());\n\treturn new StandardCredentialsListBoxModel().withEmptySelection().withMatching(AuthenticationTokens.matcher(GiteaAuth.class), credentials);\n}", "CodeBleu_score": 55.327569191099826}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (StringUtils.isBlank(serverUrl)) {\n\t\treturn null;\n\t}\n\n\ttry {\n\t\tURI uri = new URI(serverUrl.toLowerCase(Locale.ENGLISH));\n\t\tint port = uri.getPort();\n\t\tif (port == 80 && \"http\".equals(uri.getScheme())) {\n\t\t\tport = -1;\n\t\t} else if (port == 443 && \"https\".equals(uri.getScheme())) {\n\t\t\tport = -1;\n\t\t}\n\n\t\turi = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), port, uri.getPath(), uri.getQuery(), uri.getFragment());\n\t\treturn uri.toString().replaceAll(\"/$\", \"\");\n\t} catch (URISyntaxException e) {\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 39.75098813642336}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl.toLowerCase(Locale.ENGLISH));\n\t\tif (uri.getPort() == 80 && \"http\".equals(uri.getScheme())) {\n\t\t\turi = new URI(uri.getScheme(), uri.getHost(), null, uri.getPath(), uri.getQuery(), uri.getFragment());\n\t\t} else if (uri.getPort() == 443 && \"https\".equals(uri.getScheme())) {\n\t\t\turi = new URI(uri.getScheme(), uri.getHost(), null, uri.getPath(), uri.getQuery(), uri.getFragment());\n\t\t}\n\t\treturn uri.toString().replaceAll(\"/$\", \"\");\n\t} catch (URISyntaxException e) {\n\t\treturn serverUrl;\n\t}\n}", "CodeBleu_score": 29.207911513180747}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl.toLowerCase(Locale.ENGLISH));\n\t\tint port = uri.getPort();\n\t\tif (port == 80 || port == 443) {\n\t\t\turi = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), -1, uri.getPath(), uri.getQuery(), uri.getFragment());\n\t\t}\n\t\treturn uri.normalize().toString();\n\t} catch (URISyntaxException e) {\n\t\treturn serverUrl;\n\t}\n}", "CodeBleu_score": 28.189755967574108}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\t\tListBoxModel model = new ListBoxModel();\n\tfor (GiteaServer server : getServers()) {\n\t\tString displayName = StringUtils.defaultIfBlank(server.getDisplayName(), server.getServerUrl());\n\t\tmodel.add(displayName, server.getServerUrl());\n\t}\n\treturn model;\n}", "CodeBleu_score": 42.8469829301925}, {"code": "public ListBoxModel getServerItems(){\n\t\tListBoxModel model = new ListBoxModel();\n\tfor (GiteaServer server : getServers()) {\n\t\tString displayName = server.getDisplayName();\n\t\tif (StringUtils.isBlank(displayName)) {\n\t\t\tdisplayName = server.getServerUrl();\n\t\t}\n\t\tmodel.add(displayName, server.getServerUrl());\n\t}\n\treturn model;\n}", "CodeBleu_score": 50.22965503266109}, {"code": "public ListBoxModel getServerItems(){\n\tListBoxModel model = new ListBoxModel();\nfor (GiteaServer server : getServers()) {\nString displayName = server.getDisplayName();\nif (StringUtils.isBlank(displayName)) {\ndisplayName = server.getServerUrl();\n}\nmodel.add(displayName, server.getServerUrl());\n}\nreturn model;\n}", "CodeBleu_score": 50.05561015498743}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (servers == null) {\n\t\tthis.servers = null;\n\t} else {\n\t\tList<GiteaServer> serversList = new ArrayList<GiteaServer>(servers.size());\n\t\tSet<String> serverUrls = new HashSet<String>();\n\t\tfor (GiteaServer server : servers) {\n\t\t\tif (server == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tString serverUrl = server.getServerUrl();\n\t\t\tif (StringUtils.isBlank(serverUrl)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tserverUrl = normalizeServerUrl(serverUrl);\n\t\t\tif (serverUrls.contains(serverUrl)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tserverUrls.add(serverUrl);\n\t\t\tserversList.add(server);\n\t\t}\n\t\tthis.servers = serversList;\n\t}\n\tsave();\n}", "CodeBleu_score": 43.991003251273824}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (servers == null) {\n\t\tthis.servers = null;\n\t} else {\n\t\tList<GiteaServer> newServers = new ArrayList<GiteaServer>(servers.size());\n\t\tSet<String> serverUrls = new HashSet<String>();\n\t\tfor (GiteaServer server : servers) {\n\t\t\tif (server != null) {\n\t\t\t\tString serverUrl = normalizeServerUrl(server.getServerUrl());\n\t\t\t\tif (StringUtils.isNotBlank(serverUrl)) {\n\t\t\t\t\tif (!serverUrls.contains(serverUrl)) {\n\t\t\t\t\t\tserverUrls.add(serverUrl);\n\t\t\t\t\t\tnewServers.add(server);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (newServers.isEmpty()) {\n\t\t\tthis.servers = null;\n\t\t} else {\n\t\t\tthis.servers = newServers;\n\t\t}\n\t}\n\tsave();\n}", "CodeBleu_score": 41.65386207824866}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (servers == null) {\n\t\tservers = Collections.emptyList();\n\t}\n\tif (servers.isEmpty()) {\n\t\tthis.servers = Collections.emptyList();\n\t\tsave();\n\t\treturn;\n\t}\n\tSet<String> serverUrls = new HashSet<String>();\n\tList<GiteaServer> newServers = new ArrayList<GiteaServer>();\n\tfor (GiteaServer server : servers) {\n\t\tString serverUrl = server.getServerUrl();\n\t\tif (StringUtils.isBlank(serverUrl)) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (serverUrls.contains(serverUrl)) {\n\t\t\tcontinue;\n\t\t}\n\t\tserverUrls.add(serverUrl);\n\t\tnewServers.add(server);\n\t}\n\tif (newServers.isEmpty()) {\n\t\tthis.servers = Collections.emptyList();\n\t\tsave();\n\t\treturn;\n\t}\n\tthis.servers = newServers;\n\tsave();\n}", "CodeBleu_score": 43.950801947397125}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t\tif (StringUtils.isBlank(serverUrl)) {\n\t\treturn false;\n\t}\n\tserverUrl = normalizeServerUrl(serverUrl);\n\tList<GiteaServer> endpoints = new ArrayList<>(getServers());\n\tfor (ListIterator<GiteaServer> iterator = endpoints.listIterator(); iterator.hasNext(); ) {\n\t\tGiteaServer endpoint = iterator.next();\n\t\tif (endpoint.getServerUrl().equals(serverUrl)) {\n\t\t\titerator.remove();\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (endpoints.isEmpty()) {\n\t\tsetServers(null);\n\t} else {\n\t\tsetServers(endpoints);\n\t}\n\treturn true;\n}", "CodeBleu_score": 52.335678859942}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t\tif (StringUtils.isBlank(serverUrl)) {\n\t\treturn false;\n\t}\n\tserverUrl = normalizeServerUrl(serverUrl);\n\tList<GiteaServer> endpoints = new ArrayList<>(getServers());\n\tfor (ListIterator<GiteaServer> iterator = endpoints.listIterator(); iterator.hasNext(); ) {\n\t\tGiteaServer endpoint = iterator.next();\n\t\tif (endpoint.getServerUrl().equals(serverUrl)) {\n\t\t\titerator.remove();\n\t\t\tbreak;\n\t\t}\n\t}\n\tsetServers(endpoints);\n\treturn true;\n}", "CodeBleu_score": 55.736883432578175}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tList<GiteaServer> endpoints = new ArrayList<>(getServers());\nfor (ListIterator<GiteaServer> iterator = endpoints.listIterator(); iterator.hasNext(); ) {\nGiteaServer endpoint = iterator.next();\nif (endpoint.getServerUrl().equals(serverUrl)) {\niterator.remove();\nbreak;\n}\n}\nsetServers(endpoints);\nreturn !endpoints.isEmpty();\n}", "CodeBleu_score": 49.55949579030784}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t\tSet<? extends Element> elements = roundEnv.getElementsAnnotatedWith(annotation);\n\n\tfor (Element e : elements) {\n\t\tString name = e.getSimpleName().toString();\n\t\tString type = e.asType().toString();\n\t\tConfigElement element = new ConfigElement(name, type);\n\t\tdescriptorElements.add(element);\n\t}\n}", "CodeBleu_score": 49.94811712231954}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t\tSet<? extends Element> annotatedElements = roundEnv.getElementsAnnotatedWith(annotation);\n\tfor (Element e : annotatedElements) {\n\t\tAnnotationMirror am = findAnnotation(e.getAnnotationMirrors(), annotation.getQualifiedName().toString());\n\t\tMap<String, Object> attributes = getAttributes(am);\n\t\tString type = e.asType().toString();\n\t\tdescriptorElements.add(new ConfigElement(attributes, type));\n\t}\n}", "CodeBleu_score": 57.43620199183973}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tSet<? extends Element> annotatedElements = roundEnv.getElementsAnnotatedWith(annotation);\nfor (Element e : annotatedElements) {\nif (e.getKind() == ElementKind.FIELD) {\nVariableElement field = (VariableElement) e;\nConfigValue annotationInstance = field.getAnnotation(ConfigValue.class);\nif (annotationInstance != null) {\nString type = field.asType().toString();\nString description = annotationInstance.description();\nString defaultValue = annotationInstance.defaultValue();\ndescriptorElements.add(new ConfigElement(field.getSimpleName().toString(), type, description, defaultValue));\n}\n}\n}\n}", "CodeBleu_score": 44.20618937559523}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tfor (TypeElement annotation : annotations) {\n\t\tif (annotation.getQualifiedName().toString().equals(annotationClass.getName())) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 42.74977956444374}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\nfor (TypeElement e : annotations) {\nif (annotationClass.getName().replace('$', '.').equals(e.getQualifiedName().toString())) {\nreturn e;\n}\n}\n\nreturn null;\n}", "CodeBleu_score": 40.53931417992558}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tfor (TypeElement annotation : annotations) {\nif (annotationClass.getName().replace('$', '.').equals(annotation.getQualifiedName().toString())) {\nreturn annotation;\n}\n}\nreturn null;\n}", "CodeBleu_score": 45.114119723603245}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n\n    filters = {\n        \"docstatus\": 1,\n        \"employee\": employee,\n    }\n\n    if for_approval:\n        filters.update(\n            {\n                \"status\": (\"!=\", \"Approved\"),\n                \"status\": (\"!=\", \"Rejected\"),\n                \"status\": (\"!=\", \"Closed\"),\n            }\n        )\n    else:\n        filters.update({\"status\": \"Open\"})\n\n    if approver_id:\n        filters.update({\"leave_approver\": approver_id})\n\n    return filters\n\n", "CodeBleu_score": 26.682848357726417}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n\n    filters = [\n        {\"docstatus\": 1},\n        {\"status\": \"Open\"},\n        {\"employee\": employee},\n    ]\n\n    if for_approval:\n        filters.append({\"leave_approver\": (\"!=\", employee)})\n        filters.append({\"workflow_state\": \"Pending\"})\n    else:\n        filters.append({\"status\": (\"!=\", \"Cancelled\")})\n\n    if approver_id:\n        filters.append({\"leave_approver\": approver_id})\n\n    return filters\n\n", "CodeBleu_score": 28.40039459364878}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"docstatus\": 1,\n        \"employee\": employee,\n    }\n\n    if for_approval:\n        filters.update(\n            {\n                \"status\": (\"!=\", \"Approved\"),\n                \"status\": (\"!=\", \"Rejected\"),\n                \"status\": (\"!=\", \"Closed\"),\n            }\n        )\n    else:\n        filters.update({\"status\": \"Open\"})\n\n    if approver_id:\n        filters.update({\"leave_approver\": approver_id})\n\n    return filters\n\n", "CodeBleu_score": 26.682848357726417}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_details[leave_type][\"allocated\"],\n            \"balance\": leave_details[leave_type][\"balance\"],\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 30.495005931316815}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    leave_balance_map = frappe._dict()\n    leave_details = get_leave_details(employee)\n    leave_types = frappe.get_all(\n        \"Leave Type\",\n        fields=[\"name\", \"max_leaves_allowed\", \"is_lwp\"],\n        filters={\"is_lwp\": 0},\n        order_by=\"name\",\n    )\n    leave_allocation = frappe.db.get_all(\n        \"Leave Allocation\",\n        fields=[\"leave_type\", \"new_leaves_allocated\", \"from_date\", \"to_date\"],\n        filters={\"employee\": employee},\n        order_by=\"from_date\",\n    )\n    leave_allocation_map = frappe._dict()\n    for allocation in leave_allocation:\n        leave_allocation_map.setdefault(allocation.leave_type, []).append(allocation)\n\n    for leave_type in leave_types:\n        leave_balance_map[leave_type.name] = {\n            \"allocated\": 0,\n            \"remaining\": 0,\n            \"is_lwp\": leave_type.is_lwp,\n        }\n        for allocation in leave_allocation_map.get(leave_type.name, []):\n            if allocation.from_date <= getdate(leave_details.date) <= allocation.to_date:\n                leave_balance_map[leave_type.name][\"allocated\"] += allocation.new_leaves_allocated\n\n        leave_balance_map[leave_type.name][\"remaining\"] = (\n            leave_type.max_leaves_allowed - leave_balance_map[leave_type.name][\"allocated\"]\n        )\n\n    return leave_balance_map\n\n", "CodeBleu_score": 32.17436615088555}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    leave_details = get_leave_details(employee)\n    leave_balance_map: dict[str, dict[str, float]] = {}\n    for leave_type, details in leave_details.items():\n        leave_balance_map[leave_type] = {\n            \"allocated\": details.get(\"allocated_leaves\"),\n            \"balance\": details.get(\"leave_balance\"),\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 40.90299062521497}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.db.get_value(\n        \"Employee\", employee, \"holiday_list\"\n    )\n    if not holiday_list:\n        return []\n\n    holidays = frappe.db.sql(\n        \"\"\"\n        SELECT\n            name,\n            holiday_date,\n            description,\n            weekly_off\n        FROM `tabHoliday`\n        WHERE\n            parent=%(holiday_list)s\n            AND weekly_off=0\n        ORDER BY holiday_date ASC\n        \"\"\",\n        values={\"holiday_list\": holiday_list},\n        as_dict=True,\n    )\n\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n\n    return holidays\n\n", "CodeBleu_score": 35.22937022632806}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.db.get_value(\n        \"Employee\", {\"name\": employee}, \"holiday_list\"\n    )\n    if holiday_list:\n        holidays = frappe.db.sql(\n            \"\"\"\n            SELECT\n                name,\n                holiday_date,\n                description\n            FROM `tabHoliday`\n            WHERE\n                parent=%(holiday_list)s\n                AND holiday_date >= %(start_date)s\n                AND holiday_date <= %(end_date)s\n                AND description NOT LIKE '%%Weekly Off%%'\n            ORDER BY holiday_date ASC\n            \"\"\",\n            values={\n                \"holiday_list\": holiday_list,\n                \"start_date\": frappe.utils.nowdate(),\n                \"end_date\": add_days(frappe.utils.nowdate(), 365),\n            },\n            as_dict=1,\n        )\n        for holiday in holidays:\n            holiday[\"description\"] = strip_html(holiday[\"description\"])\n        return holidays\n    return []\n\n", "CodeBleu_score": 33.576424550362454}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.db.get_value(\n        \\\"Employee\\\", employee, \\\"holiday_list\\\"\n    )\n    if not holiday_list:\n        return []\n\n    holidays = frappe.get_all(\n        \\\"Holiday\\\",\n        filters={\\\"parent\\\": holiday_list, \\\"weekly_off\\\": 0},\n        fields=[\\\"holiday_date\\\", \\\"description\\\"],\n        order_by=\\\"holiday_date asc\\\",\n    )\n    for holiday in holidays:\n        holiday[\\\"description\\\"] = strip_html(holiday.description)\n    return holidays\n\n", "CodeBleu_score": 35.16507548054306}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n    holiday_settings = frappe.get_single(\"HR Settings\")\n    if holiday_settings.send_weekly_reminder and holiday_settings.weekly_reminder_frequency == \"Weekly\":\n        send_weekly_reminders()\n\n", "CodeBleu_score": 16.27971029250478}, {"code": "def send_reminders_in_advance_weekly()\n\t\n\n    # Get the relevant HR Settings\n    hr_settings = frappe.get_single(\"HR Settings\")\n\n    # Get the frequency of the reminders\n    frequency = hr_settings.holiday_reminders_frequency\n\n    # Get the number of days in advance to send the reminders\n    number_of_days_in_advance = hr_settings.number_of_days_in_advance\n\n    # Get the list of employees\n    employees = get_employees()\n\n    # Get the list of holidays\n    holidays = get_holidays()\n\n    # Get the list of holidays that are in the list of employees\n    holidays_for_employees = get_holidays_for_employees(employees, holidays)\n\n    # Send the reminders\n    if frequency == \"Weekly\" and number_of_days_in_advance > 0:\n        send_weekly_holiday_reminders(employees, holidays_for_employees, number_of_days_in_advance)\n\n", "CodeBleu_score": 31.984814718307742}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    from frappe.utils.user import get_enabled_system_users\n    from frappe.utils import today, add_days, add_months\n    from frappe.utils.data import add_to_date\n\n    holiday_list = frappe.db.get_single_value(\"HR Settings\", \"holiday_list\")\n    if not holiday_list:\n        return\n\n    holiday_reminders_frequency = frappe.db.get_single_value(\n        \"HR Settings\", \"holiday_reminders_frequency\"\n    )\n    if not holiday_reminders_frequency:\n        return\n\n    if holiday_reminders_frequency != \"Weekly\":\n        return\n\n    holiday_reminders_in_advance = frappe.db.get_single_value(\n        \"HR Settings\", \"holiday_reminders_in_advance\"\n    )\n    if not holiday_reminders_in_advance:\n        return\n\n    holiday_reminders_sent_for_period = frappe.db.get_single_value(\n        \"HR Settings\", \"holiday_reminders_sent_for_period\"\n    )\n    if not holiday_reminders_sent_for_period:\n        return\n\n    holiday_reminders_sent_for_period = int(holiday_reminders_sent_for_period)\n\n    holiday_reminders_sent_for_period_unit = frappe.db.get_single_value(\n        \"HR Settings\", \"holiday_reminders_sent_for_period_unit\"\n    )\n    if not holiday_reminders_sent_for_period_unit:\n        return\n\n    holiday_reminders_sent_for_period_unit = holiday_reminders_sent_for_period_unit.lower()\n\n    if holiday_reminders_sent_for_period_unit == \"months\":\n        holiday_reminders_sent_for_period_unit = \"month\"\n\n    if holiday_reminders_sent_for_period_unit == \"days\":\n        holiday_reminders_sent_for_period_unit = \"day\"\n\n    current_date = today()\n    holiday_reminders_date = add_to_date(\n        current_date,\n        days=holiday_reminders_in_advance,\n        months=holiday_reminders_sent_for_period,\n        months_", "CodeBleu_score": 34.540325448636025}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n\n    total_weightage, total = 0, 0\n\n    for entry in self.self_ratings:\n        if flt(entry.rating) > 5:\n            frappe.throw(_(f\"Row {entry.idx}: Rating cannot be greater than 5\"))\n\n        entry.score = flt(entry.rating) * flt(entry.per_weightage) / 100\n        total += flt(entry.score)\n        total_weightage += flt(entry.per_weightage)\n\n    if total_weightage and flt(total_weightage, 2) != 100.0:\n        frappe.throw(\n            _(f\"Total weightage for all Self Ratings must add up to 100. Currently, it is {total_weightage}%\"),\n            title=_(\"Incorrect Weightage Allocation\"),\n        )\n\n    self.self_appraisal_score = flt(total, self.precision(\"self_appraisal_score\"))\n\n", "CodeBleu_score": 35.0810879629847}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    total_weightage, total = 0, 0\n    for entry in self.self_ratings:\n        score = flt(entry.rating) * flt(entry.per_weightage) / 100\n        entry.score_earned = flt(score, self.precision(\"score_earned\"))\n        total += entry.score_earned\n        total_weightage += entry.per_weightage\n\n    if total_weightage and flt(total_weightage, 2) != 100.0:\n        frappe.throw(\n            _(\"Total weightage for all Self Ratings must add up to 100. Currently, it is {0}%\").format(\n                total_weightage\n            ),\n            title=_(\"Incorrect Weightage Allocation\"),\n        )\n\n    self.self_appraisal_score = flt(total, self.precision(\"self_appraisal_score\"))\n\n", "CodeBleu_score": 38.128311234624334}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    total_weightage, total = 0, 0\n    for entry in self.self_ratings:\n        total_weightage += flt(entry.per_weightage)\n        total += flt(entry.score) * flt(entry.per_weightage) / 100\n\n    if total_weightage and flt(total_weightage, 2) != 100.0:\n        frappe.throw(\n            _(\"Total weightage for all Self Ratings must add up to 100. Currently, it is {0}%\").format(\n                total_weightage\n            ),\n            title=_(\"Incorrect Weightage Allocation\"),\n        )\n\n    self.self_appraisal_score = flt(total, self.precision(\"self_appraisal_score\"))\n\n", "CodeBleu_score": 33.350733999305056}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n    if self.appraisal_cycle:\n        appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n        if appraisal_cycle.calculate_final_score_using_formula:\n            # gather necessary data\n            total_score = self.total_score\n            avg_feedback_score = self.avg_feedback_score\n            self_score = self.self_score\n            # sanitize formula\n            formula = appraisal_cycle.final_score_formula\n            formula = formula.replace(\"total_score\", str(total_score))\n            formula = formula.replace(\"avg_feedback_score\", str(avg_feedback_score))\n            formula = formula.replace(\"self_score\", str(self_score))\n            formula = formula.replace(\"(\", \"\")\n            formula = formula.replace(\")\", \"\")\n            # evaluate formula\n            try:\n                final_score = eval(formula)\n            except:\n                frappe.throw(_(\"Error in formula. Please check the formula and try again.\"))\n        else:\n            # calculate final score as the average of total score, average feedback score, and self-appraisal score\n            final_score = (\n                (self.total_score + self.avg_feedback_score + self.self_score) / 3\n            )\n    else:\n        final_score = (self.total_score + self.avg_feedback_score + self.self_score) / 3\n\n    self.final_score = flt(final_score, self.precision(\"final_score\"))\n\n", "CodeBleu_score": 39.3779544837885}, {"code": "def calculate_final_score(self)\n\t\n\n    if self.appraisal_cycle:\n        appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n        if appraisal_cycle.final_rating_formula:\n            # get data for formula\n            data = get_data_for_formula(self, appraisal_cycle)\n\n            # sanitize formula\n            formula = sanitize_formula(appraisal_cycle.final_rating_formula)\n\n            # evaluate formula\n            score = frappe.safe_eval(formula, None, data)\n\n            # set final score\n            self.final_rating = flt(score, self.precision(\"final_rating\"))\n        else:\n            # calculate final score as average of total score, self-appraisal score, and average feedback score\n            self.final_rating = (\n                self.total_score\n                + self.self_score\n                + self.avg_feedback_score\n            ) / 3\n            self.final_rating = flt(self.final_rating, self.precision(\"final_rating\"))\n    else:\n        self.final_rating = 0.0\n\n    self.db_update()\n\n", "CodeBleu_score": 37.858940521779644}, {"code": "def calculate_final_score(self)\n\t\n    if self.appraisal_cycle:\n        appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n\n        if appraisal_cycle.final_score_formula:\n            # sanitize formula\n            formula = appraisal_cycle.final_score_formula.replace(\"self.total_score\", \"total_score\")\n            formula = formula.replace(\"self.avg_feedback_score\", \"avg_feedback_score\")\n            formula = formula.replace(\"self.self_score\", \"self_score\")\n            formula = formula.replace(\"self.goal_score_percentage\", \"goal_score_percentage\")\n\n            # evaluate formula\n            total_score = self.total_score or 0\n            avg_feedback_score = self.avg_feedback_score or 0\n            self_score = self.self_score or 0\n            goal_score_percentage = self.goal_score_percentage or 0\n\n            final_score = frappe.safe_eval(formula, None, {\"total_score\": total_score, \"avg_feedback_score\": avg_feedback_score, \"self_score\": self_score, \"goal_score_percentage\": goal_score_percentage})\n\n            self.final_score = flt(final_score, self.precision(\"final_score\"))\n        else:\n            self.final_score = (self.total_score + self.avg_feedback_score + self.self_score) / 3\n\n    else:\n        self.final_score = (self.total_score + self.avg_feedback_score + self.self_score) / 3\n\n", "CodeBleu_score": 36.66076577400247}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date and getdate(self.attendance_date) > getdate(nowdate()):\n        if self.status != \"On Leave\":\n            frappe.throw(_(\"Attendance for future dates can only be marked as On Leave\"))\n        else:\n            leave_record = frappe.db.sql(\"\"\"select name from `tabLeave Application` where employee = %s and %s between from_date and to_date and docstatus = 1\"\"\", (self.employee, self.attendance_date), as_dict = 1)\n            if not leave_record:\n                frappe.throw(_(\"Attendance for future dates can only be marked as On Leave if there is no leave application for this day\"))\n\n    if self.attendance_date and getdate(self.attendance_date) < getdate(self.employee_joining_date):\n        frappe.throw(_(\"Attendance date cannot be before employee's joining date\"))\n\n", "CodeBleu_score": 39.86751451153708}, {"code": "def validate_attendance_date(self)\n\t\n    if getdate(self.attendance_date) > getdate(nowdate()):\n        if self.status != \"On Leave\":\n            frappe.throw(_(\"Attendance date cannot be a future date.\"))\n        else:\n            leave_record = frappe.db.sql(\"\"\"select name from `tabLeave Application` where employee = %s and %s between from_date and to_date and status = 'Approved'\"\"\", (self.employee, self.attendance_date), as_dict = 1)\n            if not leave_record:\n                frappe.throw(_(\"Attendance for future date cannot be marked as On Leave. Please create a Leave Application first.\"))\n    elif getdate(self.attendance_date) < getdate(self.employee_availability):\n        frappe.throw(_(\"Attendance date cannot be before employee's joining date.\"))\n\n", "CodeBleu_score": 39.92264182068691}, {"code": "def validate_attendance_date(self)\n\t\n    if self.status != \"On Leave\":\n        if getdate(self.attendance_date) > getdate(nowdate()):\n            frappe.throw(_(\"Attendance for future dates can only be marked as 'On Leave'\"))\n    if getdate(self.attendance_date) < getdate(self.employee_joining_date):\n        frappe.throw(\n            _(\n                \"Attendance date cannot be before employee's joining date. Please correct the attendance date.\"\n            )\n        )\n\n", "CodeBleu_score": 27.93562279274283}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t\n    filters = {\n        \"employee\": self.employee,\n        \"attendance_date\": self.attendance_date,\n        \"docstatus\": (\"!=\", 2),\n    }\n    if self.name:\n        filters[\"name\"] = (\"!=\", self.name)\n    attendance = frappe.db.get_value(\"Attendance\", filters, [\"name\", \"status\"])\n    if attendance:\n        if attendance[1] == \"Present\":\n            msg = _(\"Attendance record already exists for employee {0} on {1}\").format(\n                frappe.bold(self.employee), frappe.bold(format_date(self.attendance_date))\n            )\n        else:\n            msg = _(\n                \"Attendance record already marked as {0} for employee {1} on {2}\"\n            ).format(\n                frappe.bold(attendance[1]),\n                frappe.bold(self.employee),\n                frappe.bold(format_date(self.attendance_date)),\n            )\n        msg += \" <br><br>\" + _(\"You can edit the existing record at\") + \": \" + get_link_to_form(\"Attendance\", attendance[0])\n        frappe.throw(msg, DuplicateAttendanceError)\n\n", "CodeBleu_score": 30.905249239729677}, {"code": "def validate_duplicate_record(self)\n\t\n    filters = {\n        \"employee\": self.employee,\n        \"attendance_date\": self.attendance_date,\n        \"name\": (\"!=\", self.name),\n        \"docstatus\": (\"!=\", 2),\n    }\n    if self.shift:\n        filters[\"shift\"] = self.shift\n\n    if self.project:\n        filters[\"project\"] = self.project\n\n    if self.status == \"Present\":\n        filters[\"status\"] = (\"in\", [\"Present\", \"Work From Home\"])\n\n    duplicate_record = frappe.db.exists(\"Attendance\", filters)\n    if duplicate_record:\n        duplicate_record_link = get_link_to_form(\"Attendance\", duplicate_record)\n        frappe.throw(\n            _(\n                \"Attendance record already exists for employee {0} on {1}. Please {2}.\"\n            ).format(\n                frappe.bold(self.employee),\n                frappe.bold(format_date(self.attendance_date)),\n                frappe.utils.get_link_to_form(\"Attendance\", duplicate_record),\n            ),\n            DuplicateAttendanceError,\n        )\n\n", "CodeBleu_score": 32.91726881341741}, {"code": "def validate_duplicate_record(self)\n\t\n    if not self.employee or not self.attendance_date:\n        return\n\n    filters = {\n        \"employee\": self.employee,\n        \"attendance_date\": self.attendance_date,\n    }\n    if self.name:\n        filters[\"name\"] = (\"!=\", self.name)\n\n    if frappe.db.exists(\"Attendance\", filters):\n        doc_link = get_link_to_form(\"Attendance\", filters[\"name\"])\n        msg = _(\n            \"Attendance record already exists for employee {0} on {1}.", "CodeBleu_score": 33.24271771690989}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\"\"\n    if self.enabled:\n        dws_group = frappe.get_doc(\"Daily Work Summary Group\", self.dws_group)\n        replies = []\n        for message in dws_group.get(\"replies\"):\n            replies.append(message.reply)\n\n        if replies:\n            emails = get_emails(replies)\n            self.send_mails(dws_group, emails)\n            self.db_set(\"status\", \"Sent\")\n        else:\n            frappe.msgprint(_(\"No replies found for the selected group\"))\n    else:\n        frappe.msgprint(_(\"Daily Work Summary is not enabled\"))\n\n", "CodeBleu_score": 36.46871193473377}, {"code": "def send_summary(self)\n\t\"\"\n    dws_group = frappe.get_doc(\"Daily Work Summary Group\", self.dws_group)\n    if dws_group.enable:\n        dws_group.check_permission(\"email\")\n        message_list = dws_group.get_messages()\n        emails = dws_group.get_emails()\n        if len(emails) > 0:\n            self.send_mails(dws_group, emails)\n            self.db_set(\"status\", \"Sent\")\n        else:\n            frappe.msgprint(_(\"No email addresses found in the group {0}\").format(dws_group.name))\n    else:\n        frappe.msgprint(_(\"Daily Work Summary Group {0} is disabled\").format(dws_group.name))\n\n", "CodeBleu_score": 36.00059143364576}, {"code": "def send_summary(self)\n\t\"\"\n    if self.send_emails_to_group:\n        dws_group = frappe.get_doc(\"Daily Work Summary Group\", self.send_emails_to_group)\n        if dws_group.status == \"Active\":\n            emails = [\n                u.email_id\n                for u in frappe.db.get_all(\n                    \"User\",\n                    filters={\"enabled\": 1, \"email\": (\"!=\", \"\")},\n                    fields=[\"email\"],\n                    order_by=\"name\",\n                )\n            ]\n            if emails:\n                self.send_mails(dws_group, emails)\n                frappe.msgprint(_(\"Daily Work Summary sent\"))\n            else:\n                frappe.msgprint(_(\"No active users found for the selected group\"))\n        else:\n            frappe.msgprint(_(\"Daily Work Summary Group is not Active\"))\n    else:\n        frappe.msgprint(_(\"Please select a group\"))\n", "CodeBleu_score": 29.031176519999057}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    if self.status == \"Open\":\n        interview_round = self.designation + \" - \" + self.round\n        interview_records = frappe.db.get_all(\n            \"Interview\",\n            filters={\n                \"job_applicant\": self.job_applicant,\n                \"interview_round\": interview_round,\n                \"docstatus\": (\"!=\", 2),\n            },\n            fields=[\"name\", \"applicant_name\", \"designation\"],\n        )\n        if interview_records:\n            interview_records_list = \", \".join(\n                [\n                    \"\"\"<b><a href=\"/app/Form/Interview/{0}\">{1}</a></b>\"\"\".format(\n                        d.name, d.designation\n                    )\n                    for d in interview_records\n                ]\n            )\n            message = \"\"\"{0} {1} is already scheduled for {2} {3}.<br><br>Interview Records: {4}\"\"\".format(\n                self.applicant_name,\n                self.job_applicant,\n                self.designation,\n                interview_round,\n                interview_records_list,\n            )\n            frappe.throw(message, DuplicateInterviewRoundError)\n\n", "CodeBleu_score": 37.94676525010947}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.status in (\"Open\", \"Scheduled\", \"Completed\", \"Cancelled\"):\n        return\n    interview_round = self.interview_round\n    if interview_round:\n        interview_round_details = frappe.get_doc(\"Interview Round\", interview_round)\n        interview_round_date = interview_round_details.interview_round_date\n        interview_round_location = interview_round_details.location\n        interview_round_time = interview_round_details.time\n        interview_round_participants = interview_round_details.interview_round_participants\n        interview_round_participants_details = []\n        for participant in interview_round_participants:\n            interview_round_participants_details.append(participant.job_applicant)\n        interview_round_participants_details = list(set(interview_round_participants_details))\n        if len(interview_round_participants_details) > 0:\n            interview_round_participants_details = frappe.get_all(\n                \"Job Applicant\",\n                filters={\"name\": [\"in\", interview_round_participants_details]},\n                fields=[\"name\", \"applicant_name\", \"status\"],\n            )\n            for participant in interview_round_participants_details:\n                if participant.name == self.job_applicant:\n                    continue\n                if participant.status == \"Open\":\n                    if participant.name:\n                        frappe.throw(\n                            _(\n                                \"Job Applicant {0} is already scheduled for the interview round {1} on {2} at {3}.\".format(\n                                    get_link_to_form(\"Job Applicant\", participant.name),\n                                    get_link_to_form(\"Interview Round\", interview_round),\n                                    interview_round_date,\n                                    interview_round_time,\n                                )\n                            ),\n                            title=_(\"Duplicate Interview\"),\n                        )\n                if participant.status == \"Scheduled\":\n                    if participant.name:\n                        frappe.throw(\n                            _(\n                                \"Job Applicant {0} is already scheduled for the interview round {1} on {2} at {3}.\".format(\n                                    get_link_to_form(\"Job Applicant\", participant.name),\n                                    get_link_to_form(\"Interview Round\", interview_round),\n                                    interview_round_date", "CodeBleu_score": 32.856747235572236}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.job_applicant:\n        duplicate_interview = frappe.db.exists(\n            \"Interview\",\n            {\n                \"job_applicant\": self.job_applicant,\n                \"interview_round\": self.interview_round,\n                \"name\": [\"!=\", self.name],\n            },\n        )\n        if duplicate_interview:\n            duplicate_interview_name = get_link_to_form(\"Interview\", duplicate_interview)\n            duplicate_interview_round = frappe.db.get_value(\n                \"Interview\", duplicate_interview, \"interview_round\"\n            )\n            job_applicant_name = frappe.db.get_value(\n                \"Job Applicant\", self.job_applicant, \"applicant_name\"\n            )\n            job_applicant_name = frappe.bold(job_applicant_name)\n            job_applicant_designation = frappe.db.get_value(\n                \"Job Applicant\", self.job_applicant, \"designation\"\n            )\n            job_applicant_designation = frappe.bold(job_applicant_designation)\n            interview_round = frappe.bold(duplicate_interview_round)\n            raise DuplicateInterviewRoundError(\n                frappe._(\n                    \"Interview record for {0} in {1} already exists for {2} in {3}. Please check {4}.\"\n                ).format(\n                    job_applicant_name,\n                    job_applicant_designation,\n                    self.applicant_name,\n                    self.designation,\n                    duplicate_interview_name,\n                )\n            )\n\n", "CodeBleu_score": 40.27845911097253}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n    self.average_rating = flt(\n        self.db_query(\n            lambda d: (\n                d.db_query(\n                    lambda d: Avg(d.rating),\n                    filters={\"assessment_type\": \"Skill Assessment\"},\n                )\n                .as_scalar()\n                .label(\"average_rating\")\n            )\n        ).as_scalar()\n    )\n\n", "CodeBleu_score": 21.63150715219667}, {"code": "def calculate_average_rating(self)\n\t\n    if self.skill_assessments:\n        self.average_rating = (\n            frappe.qb.from_(self.skill_assessments)\n            .where(self.skill_assessments.rating.is_null(False))\n            .select(Avg(self.skill_assessments.rating))\n            .scalar()\n        )\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 28.538180837928422}, {"code": "def calculate_average_rating(self)\n\t\n    if self.assessments:\n        self.average_rating = (\n            frappe.qb.from_(self.assessments)\n            .where(self.assessments.rating.is_null(False))\n            .select(Avg(self.assessments.rating).as_(\"average_rating\"))\n            .scalar()\n        )\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 27.098145042027134}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.get(\"interview_round\")\n    interview.designation = doc.get(\"designation\")\n    interview.candidate_name = doc.get(\"candidate_name\")\n    interview.candidate_email = doc.get(\"candidate_email\")\n    interview.candidate_phone_number = doc.get(\"candidate_phone_number\")\n    interview.candidate_resume = doc.get(\"candidate_resume\")\n    interview.candidate_profile_link = doc.get(\"candidate_profile_link\")\n    interview.save(ignore_permissions=True)\n    if doc.get(\"interviewers\"):\n        for interviewer in doc.get(\"interviewers\"):\n            interview.append(\"interviewers\", {\"interviewer\": interviewer})\n    interview.save(ignore_permissions=True)\n    return interview\n", "CodeBleu_score": 42.37171194863662}, {"code": "def create_interview(doc):\n\t\n\n    if type(doc) == str:\n        doc = json.loads(doc)\n\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.get(\"interview_round\")\n    interview.designation = doc.get(\"designation\")\n\n    if doc.get(\"interviewers\"):\n        for interviewer in doc.get(\"interviewers\"):\n            interview.append(\"interviewers\", interviewer)\n\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 48.460734640517735}, {"code": "def create_interview(doc):\n\t\n    # doc = json.loads(doc)\n    # doc = json.loads(doc)\n    # frappe.errprint(doc)\n    interview_round = frappe.get_doc(\"Interview Round\", doc.interview_round)\n    interview = frappe.new_doc(\"Interview\")\n    interview.designation = interview_round.designation\n    interview.interview_round = interview_round.name\n    interview.save(ignore_permissions=True)\n    if doc.interviewers:\n        interviewers = json.loads(doc.interviewers)\n        for interviewer in interviewers:\n            interview.append(\"interviewers\", {\"interviewer\": interviewer})\n    interview.save(ignore_permissions=True)\n    return interview\n", "CodeBleu_score": 41.67560382050045}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n    return frappe.get_all(\n        \"Job Offer\",\n        filters={\n            \"designation\": self.designation,\n            \"company\": self.company,\n            \"offer_date\": [\"between\", [from_date, to_date]],\n            \"docstatus\": 1,\n        },\n        fields=[\"name\"],\n    )\n\n", "CodeBleu_score": 65.80257982093272}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    return frappe.db.sql(\n        \"\"\"\n\t\tSELECT\n\t\t\tname\n\t\tFROM\n\t\t\t`tabJob Offer`\n\t\tWHERE\n\t\t\tdesignation = %(designation)s\n\t\t\tAND company = %(company)s\n\t\t\tAND offer_date BETWEEN %(from_date)s AND %(to_date)s\n\t\t\tAND docstatus = 1\n\t\"\"\",\n        {\n            \"designation\": self.designation,\n            \"company\": self.company,\n            \"from_date\": from_date,\n            \"to_date\": to_date,\n        },\n        as_dict=True,\n    )\n\n", "CodeBleu_score": 48.4822898200205}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    return frappe.db.sql(\n        \"\"\"\n\t\tSELECT\n\t\t\tname\n\t\tFROM\n\t\t\t`tabJob Offer`\n\t\tWHERE\n\t\t\tdesignation = %(designation)s\n\t\t\tAND company = %(company)s\n\t\t\tAND offer_date BETWEEN %(from_date)s AND %(to_date)s\n\t\t\tAND docstatus = 1\n\t\t\"\"\",\n        {\n            \"designation\": self.designation,\n            \"company\": self.company,\n            \"from_date\": from_date,\n            \"to_date\": to_date,\n        },\n        as_dict=1,\n    )\n\n", "CodeBleu_score": 48.54208350736402}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\"\"\n    query = \"\"\"SELECT count(name) as total_offers, sum(CASE WHEN status = 'Accepted' THEN 1 ELSE 0 END) as accepted_offers FROM `tabJob Offer` WHERE docstatus = 1\"\"\"\n    if company:\n        query += \"\"\" AND company = '{0}'\"\"\".format(company)\n    if department:\n        query += \"\"\" AND department = '{0}'\"\"\".format(department)\n    result = frappe.db.sql(query, as_dict=True)\n    if result:\n        total_offers = result[0].get(\"total_offers\", 0)\n        accepted_offers = result[0].get(\"accepted_offers\", 0)\n        if total_offers > 0:\n            return {\n                \"value\": (accepted_offers / total_offers) * 100,\n                \"indicator\": \"Blue\" if (accepted_offers / total_offers) * 100 > 50 else \"Red\",\n                \"label\": \"Acceptance Rate\",\n                \"fieldtype\": \"Percent\",\n            }\n    return {\"value\": 0, \"indicator\": \"Red\", \"label\": \"Acceptance Rate\", \"fieldtype\": \"Percent\"}\n\n", "CodeBleu_score": 29.773877046057674}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    filters = {\"docstatus\": 1}\n    if company:\n        filters[\"company\"] = company\n    if department:\n        filters[\"department\"] = department\n    total_offers = frappe.db.count(\"Job Offer\", filters)\n    accepted_offers = frappe.db.count(\"Job Offer\", filters={\"status\": \"Accepted\"})\n    if total_offers:\n        return (accepted_offers / total_offers) * 100, \"Percent\"\n    return 0, \"Percent\"\n\n", "CodeBleu_score": 53.0549265056676}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if not company and not department:\n        query = \"\"\"SELECT count(name) AS total_offers, count(CASE WHEN status = 'Accepted' THEN 1 END) AS accepted_offers FROM `tabJob Offer` WHERE docstatus = 1\"\"\"\n    elif company and not department:\n        query = \"\"\"SELECT count(name) AS total_offers, count(CASE WHEN status = 'Accepted' THEN 1 END) AS accepted_offers FROM `tabJob Offer` WHERE company = '{company}' AND docstatus = 1\"\"\".format(\n            company=company\n        )\n    elif not company and department:\n        query = \"\"\"SELECT count(name) AS total_offers, count(CASE WHEN status = 'Accepted' THEN 1 END) AS accepted_offers FROM `tabJob Offer` WHERE department = '{department}' AND docstatus = 1\"\"\".format(\n            department=department\n        )\n    else:\n        query = \"\"\"SELECT count(name) AS total_offers, count(CASE WHEN status = 'Accepted' THEN 1 END) AS accepted_offers FROM `tabJob Offer` WHERE company = '{company}' AND department = '{department}' AND docstatus = 1\"\"\".format(\n            company=company, department=department\n        )\n    return frappe.db.sql(query, as_dict=True)[0]\n\n", "CodeBleu_score": 20.02508352798421}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn ResponseEntity.badRequest().body(result);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 68.96549023540182}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 50.47477777909356}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\tif (!result.isSuccess())\n\t\treturn ResponseEntity.badRequest().body(result);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 68.96549023540182}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\tfinal Optional<CompanyStaff> companyStaff = this.companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\tif (!companyStaff.isPresent())\n\t\treturn new ErrorResult(Messages.notFound);\n\n\tfinal CompanyStaff companyStaffToUpdate = companyStaff.get();\n\tif (!companyStaffToUpdate.getPassword().equals(companyStaffForUpdateDto.getPassword()))\n\t\treturn new ErrorResult(Messages.passwordDoesNotMatch);\n\n\tcompanyStaffToUpdate.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaffToUpdate.setLastName(companyStaffForUpdateDto.getLastName());\n\tthis.companyStaffDao.save(companyStaffToUpdate);\n\treturn new SuccessResult(Messages.updated);\n}", "CodeBleu_score": 48.63730288640007}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\tfinal Optional<CompanyStaff> result = this.companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\n\tif (result.isEmpty())\n\t\treturn new ErrorResult(Messages.notFound);\n\n\tfinal CompanyStaff companyStaff = result.get();\n\n\tfinal Result passwordCheckResult = this.arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword());\n\n\tif (!passwordCheckResult.isSuccess())\n\t\treturn passwordCheckResult;\n\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\n\treturn this.companyStaffDao.save(companyStaff);\n}", "CodeBleu_score": 53.27019353678555}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\tfinal Optional<CompanyStaff> companyStaff = this.companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\tif (!companyStaff.isPresent())\n\t\treturn new ErrorResult(Messages.notFound);\n\n\tfinal String password = <PASSWORD>StaffForUpdateDto.getPassword();\n\tfinal String confirmPassword = <PASSWORD>StaffForUpdateDto.getConfirmPassword();\n\tfinal Result result = this.arePasswordMatch(password, confirmPassword);\n\tif (!result.isSuccess())\n\t\treturn result;\n\n\tcompanyStaff.get().setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.get().setLastName(companyStaffForUpdateDto.getLastName());\n\tcompanyStaff.get().setPassword(password);\n\tthis.companyStaffDao.save(companyStaff.get());\n\n\treturn new SuccessResult(Messages.updated);\n}", "CodeBleu_score": 53.984201837149826}]}
