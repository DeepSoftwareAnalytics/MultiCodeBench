{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\tdocuments = self.env['ir.attachment'].browse(args['attachments'])\n    documents.check_access_rights('read')\n    documents.check_access_rule('read')\n    zip_file = io.BytesIO()\n    with ZipFile(zip_file, 'w') as zf:\n        for document in documents:\n            zf.writestr(document.name, document.datas)\n    return request.make_response(zip_file.getvalue(), headers=_get_zip_headers(zip_file.getvalue(), 'documents.zip'))", "CodeBleu_score": 31.221104153601566}, {"code": "def export_zip_documents(self, **args)\n\t# retrieve attachment IDs from HTTP request arguments\n    attachment_ids = request.params.get('attachment_ids', '').split(',')\n    attachment_ids = [int(attachment_id) for attachment_id in attachment_ids if attachment_id]\n    # verify read access rights and rules for the attachments\n    self.check_access_rights('read')\n    self.check_access_rule('read')\n    attachments = self.env['ir.attachment'].browse(attachment_ids)\n    attachments.check_access_rights('read')\n    attachments.check_access_rule('read')\n    # build a zip file from the attachments' content\n    zip_content = io.BytesIO()\n    with zipfile.ZipFile(zip_content, 'w', zipfile.ZIP_DEFLATED) as z:\n        for attachment in attachments:\n            z.writestr(attachment.name, base64.b64decode(attachment.datas))\n    # prepare HTTP headers for the zip file and return the zip file as an HTTP response\n    filename = _('Attachments') + '.zip'\n    response = request.make_response(zip_content.getvalue(), headers=_get_zip_headers(zip_content.getvalue(), filename))\n    return response", "CodeBleu_score": 38.062194723801056}, {"code": "def export_zip_documents(self, **args)\n\t# retrieve attachment IDs from HTTP request arguments\n    attachment_ids = request.params.get('attachment_ids')\n    if not attachment_ids:\n        attachment_ids = request.params.get('ids')\n    if not attachment_ids:\n        return request.not_found()\n    attachment_ids = literal_eval(attachment_ids)\n    # verify read access rights and rules for the attachments\n    attachments = request.env['ir.attachment'].browse(attachment_ids)\n    attachments.check_access_rights('read')\n    attachments.check_access_rule('read')\n    # build a zip file from the attachments' content\n    zip_file = io.BytesIO()\n    with ZipFile(zip_file, 'w') as zip_buffer:\n        for attachment in attachments:\n            zip_buffer.writestr(attachment.name, attachment.datas)\n    # prepare HTTP headers for the zip file and return the zip file as an HTTP response\n    filename = 'attachments.zip'\n    response = request.make_response(zip_file.getvalue(), headers=_get_zip_headers(zip_file.getvalue(), filename))\n    return response\n\n", "CodeBleu_score": 42.25960921391616}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\tvalues = super(PortalAccount, self)._prepare_home_portal_values(counters)\n\n    # Invoice and Bill Counts\n    if request.env['account.move'].check_access_rights('read', raise_exception=False):\n        invoice_count = self.env['account.move'].search_count(expression.AND([\n            [('partner_id', '=', self.partner_id.id)],\n            [('state', 'in', ('open', 'paid', 'invoice_except'))],\n            [('type', '=', 'out_invoice')]\n        ]))\n        bill_count = self.env['account.move'].search_count(expression.AND([\n            [('partner_id', '=', self.partner_id.id)],\n            [('state', 'in', ('open', 'paid', 'invoice_except'))],\n            [('type', '=', 'in_invoice')]\n        ]))\n    else:\n        invoice_count = 0\n        bill_count = 0\n    values.update({\n        'invoice_count': invoice_count,\n        'bill_count': bill_count,\n    })\n    return values\n\n", "CodeBleu_score": 38.68488396016966}, {"code": "def _prepare_home_portal_values(self, counters)\n\tvalues = super(PortalAccount, self)._prepare_home_portal_values(counters)\n    if self.user.has_group('account.group_account_invoice'):\n        values['invoice_count'] = counters['account.move']\n    if self.user.has_group('account.group_account_invoice'):\n        values['bill_count'] = counters['account.move']\n    return values", "CodeBleu_score": 18.68787049371988}, {"code": "def _prepare_home_portal_values(self, counters)\n\tvalues = super(PortalAccount, self)._prepare_home_portal_values(counters)\n    if request.env['account.move'].check_access_rights('read', raise_exception=False):\n        values.update({\n            'invoice_count': counters['invoice'],\n            'bill_count': counters['bill'],\n        })\n    return values\n\n", "CodeBleu_score": 16.247808850476382}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\tvalues = self._prepare_portal_layout_values()\n    Invoice = request.env['account.move']\n    # default sortby\n    if not sortby:\n        sortby = 'date'\n    # default filterby\n    if not filterby:\n        filterby = 'all'\n    # default date_begin\n    if not date_begin:\n        date_begin = fields.Date.to_string(fields.Date.from_string(str(fields.Date.today())) + timedelta(days=-30))\n    # default date_end\n    if not date_end:\n        date_end = fields.Date.to_string(fields.Date.today())\n    # compute domain\n    domain = self._get_invoices_domain()\n    if date_begin:\n        domain += [('invoice_date', '>=', date_begin)]\n    if date_end:\n        domain += [('invoice_date', '<=', date_end)]\n    # compute sortby\n    sortings = self._get_account_searchbar_sortings()\n    sortby_vals = sortings.get(sortby)\n    if sortby_vals:\n        sortby_vals = sortby_vals['order']\n    else:\n        sortby_vals = 'invoice_date desc'\n    # compute filterby\n    filters = self._get_account_searchbar_filters()\n    filterby_vals = filters.get(filterby)\n    if filterby_vals:\n        domain += filterby_vals['domain']\n    # compute invoices\n    invoices = Invoice.search(expression.AND([domain, [('state', 'not in', ('cancel', 'draft'))]]), order=sortby_vals, limit=self._items_per_page)\n    # update history\n    history_values = self._get_history_values(invoices)\n    self._update_session_history(history_values)\n    # pager\n    pager = portal_pager(url=\"/my/invoices\", total=invoices.count(), page=page, step=self._items_per_page)\n    #", "CodeBleu_score": 28.5841155492863}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\tvalues = self.prepend_portal_navbar()\n    partner = request.env.user.partner_id\n    # default sortby\n    if not sortby:\n        sortby = 'date'\n    # default filterby\n    if not filterby:\n        filterby = 'all'\n    # default date_begin\n    if not date_begin:\n        date_begin = fields.Date.to_string(fields.Date.from_string(str(fields.Date.today())) - relativedelta(days=30))\n    # default date_end\n    if not date_end:\n        date_end = fields.Date.today()\n    # compute domain\n    domain = self._get_invoices_domain()\n    domain += expression.AND([\n        ('invoice_date', '>=', date_begin),\n        ('invoice_date', '<=', date_end),\n    ])\n    if filterby in self._get_account_searchbar_filters():\n        domain += self._get_account_searchbar_filters()[filterby]['domain']\n    # compute sortby\n    sortby_opt = self._get_account_searchbar_sortings()[sortby]\n    # compute invoices\n    invoices = request.env['account.move'].search(domain, order=sortby_opt['order'])\n    # compute pager\n    pager = portal_pager(url=\"/my/invoices\", total=len(invoices), page=page, step=self._items_per_page)\n    # update session history\n    history_ids = [int(invoice.id) for invoice in invoices]\n    self._update_session_history(history_ids)\n    # prepare values\n    values.update({\n        'date': date_begin,\n        'end_date': date_end,\n        'page_name': 'invoices',\n        'invoices': invoices[(pager['offset']):(pager['offset'] + self._items_per_page)],\n        'partner': partner,\n        'pager': pager,\n        'sortings': OrderedDict(sorted(self._get_account_search", "CodeBleu_score": 35.27665742834838}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\tvalues = self._prepare_portal_layout_values()\n    partner = request.env.user.partner_id\n    Invoice = request.env['account.move'].sudo()\n    domain = expression.AND([\n        Invoice._get_invoices_domain(),\n        ['|', ('partner_id', 'child_of', partner.commercial_partner_id.ids), ('partner_id', '=', partner.id)]\n    ])\n    searchbar_sortings = self._get_account_searchbar_sortings()\n    # default sort by value\n    if not sortby:\n        sortby = 'date'\n    sort_by_label = searchbar_sortings[sortby]['label']\n    sort_by_order = searchbar_sortings[sortby]['order']\n    searchbar_filters = self._get_account_searchbar_filters()\n    # default filter by value\n    if not filterby:\n        filterby = 'all'\n    # retrieve invoices\n    invoices = Invoice.search(domain, order=sort_by_order, limit=self._items_per_page)\n    # pager\n    pager = portal_pager(url=\"/my/invoices\", total=invoices.search_count(domain), page=page, step=self._items_per_page)\n    # update session history\n    history = request.session.get('my_invoices_history', [])\n    for invoice in invoices:\n        if invoice.id not in history:\n            history.append(invoice.id)\n    request.session['my_invoices_history'] = history[-20:]\n    # render\n    values.update({\n        'date': date_begin,\n        'end_date': date_end,\n        'invoices': invoices,\n        'page_name': 'invoices',\n        'pager': pager,\n        'partner': partner,\n        'searchbar_sortings': searchbar_sortings,\n        'sort_by_label': sort_by_label,\n        'sort_by_order': sort_by_order,\n        '", "CodeBleu_score": 31.575671082559474}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\tinvoice = request.env['account.move'].sudo().browse(int(invoice_id))\n    if not invoice.exists():\n        raise werkzeug.exceptions.NotFound()\n    if not invoice.can_access_portal():\n        raise AccessError(_('The requested document is not accessible.'))\n    if invoice.state == 'draft':\n        raise AccessError(_('The requested document is not accessible.'))\n    if download:\n        if report_type == 'pdf':\n            if invoice.state == 'posted':\n                # get attachments\n                attachments = request.env['ir.attachment'].sudo().search([\n                    ('res_model', '=', 'account.move'),\n                    ('res_id', '=', invoice.id),\n                    ('type', '=', 'binary'),\n                ])\n                if attachments:\n                    if len(attachments) == 1:\n                        # return single attachment\n                        return request.make_response(\n                            attachments[0].datas,\n                            headers=[\n                                ('Content-Type', 'application/pdf'),\n                                ('Content-Length', len(attachments[0].datas)),\n                                ('Content-Disposition', content_disposition(attachments[0].name)),\n                            ]\n                        )\n                    else:\n                        # return zip with attachments\n                        return request.make_response(\n                            _get_zip_headers(attachments, 'invoice_%s.pdf' % invoice.id),\n                            headers=[\n                                ('Content-Type', 'application/zip'),\n                                ('Content-Disposition', content_disposition('invoice_%s.zip' % invoice.id)),\n                            ]\n                        )\n                else:\n                    raise MissingError(_('The requested document is not accessible.'))\n            else:\n                raise MissingError(_('The requested document is not accessible.'))\n        else:\n            raise MissingError(_('The requested document is not accessible.'))\n    else:\n        values = self._invoice_get_page_view_values(invoice, access_token, **kw)\n        return request.render", "CodeBleu_score": 35.866470080093904}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t# Ensure invoice_id is an integer\n    try:\n        invoice_id = int(invoice_id)\n    except ValueError:\n        return request.redirect('/my')\n\n    # Ensure invoice exists and check access\n    try:\n        invoice = request.env['account.move'].browse(invoice_id).sudo().with_context(**kw)\n    except MissingError:\n        return request.redirect('/my')\n\n    # Ensure invoice is accessible\n    if not invoice.exists():\n        return request.redirect('/my')\n    if not invoice.can_access_from_portal():\n        raise AccessError(_('You do not have access to this document'))\n\n    # Retrieve legal documents and create zip file if there are multiple attachments\n    if invoice.state == 'posted' and report_type == 'pdf' and download:\n        attachments = request.env['ir.attachment'].search([('res_model', '=', 'account.move'), ('res_id', '=', invoice.id), ('type', '=', 'binary')])\n        if len(attachments) == 1:\n            return request.redirect('/web/content/%s?download=true' % attachments[0].id)\n        else:\n            zip_file = io.BytesIO()\n            with zipfile.ZipFile(zip_file, 'w') as zf:\n                for attachment in attachments:\n                    zf.writestr(attachment.name, attachment.datas)\n            request.session['invoice_id'] = invoice.id\n            request.session['invoice_zip_attachments'] = zip_file.getvalue()\n            return request.redirect('/my/invoices/download_zip')\n\n    # Prepare and show the report\n    if report_type in ('html', 'pdf', 'text'):\n        return request.env.ref('account.action_report_invoice').with_context(**kw).report_action(invoice, docargs={'report_type': report_type})\n\n    # Render invoice page view\n    values = self._invoice_get_page_view_values(invoice", "CodeBleu_score": 46.008603988559436}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t# pylint: disable=unused-argument\n    invoice = request.env['account.move'].sudo().browse(int(invoice_id))\n    if not invoice.exists():\n        raise werkzeug.exceptions.NotFound()\n    if not invoice.can_access_portal():\n        raise AccessError(_('The requested document is not accessible'))\n    if download and invoice.state == 'posted':\n        if report_type == 'pdf':\n            # retrieve the legal documents\n            docs = invoice.sudo().get_attachment_by_module('account', 'invoice_legal_document')\n            if len(docs) > 1:\n                # create a zip file\n                zip_file = io.BytesIO()\n                with ZipFile(zip_file, 'w') as zf:\n                    for doc in docs:\n                        zf.writestr(doc.name, base64.b64decode(doc.datas))\n                # return the zip file\n                zip_file.seek(0)\n                response = request.make_response(zip_file.read(), [('Content-Type', 'application/zip')])\n                response.headers['Content-Disposition'] = 'attachment; filename=%s' % slug(invoice.name)\n                return response\n            elif len(docs) == 1:\n                # return the document\n                doc = docs[0]\n                response = request.make_response(base64.b64decode(doc.datas), [('Content-Type', 'application/pdf')])\n                response.headers['Content-Disposition'] = 'attachment; filename=%s' % slug(doc.name)\n                return response\n        else:\n            # render the report\n            report_name = 'account.report_invoice'\n            if report_type == 'text':\n                report_name = 'account.report_invoice_document'\n            elif report_type == 'html':\n                report_name = 'account.report_invoice_html'\n            return request.env.ref(report_name).sudo().get_pdf(invoice, report_type='pdf')\n    else:\n        # render the page view", "CodeBleu_score": 38.77440388695352}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t# The following products are not in the list of products to be updated because they are not linked to any taxes:\n    # - 'product.product_product_computer_desk'\n    # - 'product.product_product_computer_screen'\n    # - 'product.product_product_computer_keyboard'\n    # - 'product.product_product_computer_mouse'\n    # - 'product.product_product_computer_laptop'\n    # - 'product.product_product_computer_chair'\n    # - 'product.product_product_computer_monitor'\n    # - 'product.product_product_computer_cpu'\n    # - 'product.product_product_computer_ram'\n    # - 'product.product_product_computer_hard_drive'\n    # - 'product.product_product_computer_ssd'\n    # - 'product.product_product_computer_case'\n    # - 'product.product_product_computer_cooler'\n    # - 'product.product_product_computer_card_reader'\n    # - 'product.product_product_computer_webcam'\n    # - 'product.product_product_computer_power_supply'\n    # - 'product.product_product_computer_optical_drive'\n    # - 'product.product_product_computer_printer'\n    # - 'product.product_product_computer_scanner'\n    # - 'product.product_product_computer_web_cam'\n    # - 'product.product_product_computer_laptop_screen'\n    # - 'product.product_product_computer_laptop_keyboard'\n    # - 'product.product_product_computer_laptop_mouse'\n    # - 'product.product_product_computer_laptop_battery'\n    # - 'product.product_product_computer_laptop_charger'\n    # - 'product.product_product_computer_laptop_stand'\n    # - 'product.product_product_computer_laptop_jacket'\n    # - '", "CodeBleu_score": 1.105006105006105}, {"code": "def _get_demo_data_products(self, company=False)\n\t# TODO: this function is a mess. It should be refactored.\n    # TODO: the function should be moved to product_template.py\n    # TODO: the function should be refactored to use the new API\n    # TODO: the function should be refactored to use the new API\n    # TODO: the function should be refactored to use the new API\n    # TODO: the function should be refactored to use the new API\n    # TODO: the function should be refactored to use the new API\n    # TODO: the function should be refactored to use the new API\n    # TODO: the function should be refactored to use the new API\n    # TODO: the function should be refactored to use the new API\n    # TODO: the function should be refactored to use the new API\n    # TODO: the function should be refactored to use the new API\n    # TODO: the function should be refactored to use the new API\n    # TODO: the function should be refactored to use the new API\n    # TODO: the function should be refactored to use the new API\n    # TODO: the function should be refactored to use the new API\n    # TODO: the function should be refactored to use the new API\n    # TODO: the function should be refactored to use the new API\n    # TODO: the function should be refactored to use the new API\n    # TODO: the function should be refactored to use the new API\n    # TODO: the function should be refactored to use the new API\n    # TODO: the function should be refactored to use the new API\n    # TODO: the function should be refactored to use the new API\n    # TODO: the function should be refactored to use the new API\n    # TODO: the function should be refactored to use the new API\n    # TODO: the function should be refactored to use the new API\n    # TODO: the function should be refactored to use the new API\n    # TODO: the function should be refactored to use the new API\n    # TODO: the function should be refactored to use the new API\n    # TODO: the function should be refactored to use the new API", "CodeBleu_score": 1.105006105006105}, {"code": "def _get_demo_data_products(self, company=False)\n\tself.env.cr.execute(\"\"\"\n        SELECT DISTINCT p.id\n        FROM product_template p\n        JOIN account_tax t ON p.categ_id = t.id\n        JOIN res_company c ON t.company_id = c.id\n        WHERE c.id = %s\n    \"\"\", [company.id])\n    product_ids = [x[0] for x in self.env.cr.fetchall()]\n    products = self.env['product.template'].browse(product_ids)\n    if company.account_sale_tax_id:\n        products.write({'taxes_id': [(6, 0, [company.account_sale_tax_id.id])]})\n    if company.account_purchase_tax_id:\n        products.write({'taxes_id': [(6, 0, [company.account_purchase_tax_id.id])]})\n    return products\n\n", "CodeBleu_score": 24.56760109059621}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t2000,\n                'date': time.strftime('%Y-01-01'),\n                'partner_id': 'base.res_partner_12',\n            },\n            'demo_bank_statement_line_3': {\n                'journal_id': bnk_journal.id,\n                'payment_ref': 'Last Year Interests',\n                'amount': 102.78,\n                'date': time.strftime('%Y-01-01'),\n            },\n            'demo_bank_statement_line_4': {\n                'journal_id': bnk_journal.id,\n                'payment_ref': time.strftime('INV/%Y/00002'),\n                'amount': 750,\n                'date': time.strftime('%Y-01-01'),\n                'partner_id': 'base.res_partner_2',\n            },\n            'demo_bank_statement_line_5': {\n                'journal_id': bnk_journal.id,\n                'payment_ref': f'R:9772938  10/07 AX 9415116318 T:5 BRT: {formatLang(self.env, 100.0, digits=2)} C/ croip',\n                'amount': 96.67,\n                'date': time.strftime('%Y-01-01'),\n            },\n        }\n\n    @api.model\n    def _get_demo_data_reconcile_model(self, company=False):\n        return {\n            'reconcile_from_label': {\n                'name': 'Line with Bank Fees',\n                'rule_type': 'writeoff_suggestion',\n                'match_label': 'contains',\n                'match_label_param': 'BRT',\n                'line_ids': [\n                    Command.create({\n                        'label': 'Due amount',\n                        'account_id': self._get_demo_account(\n                            'income',\n                            'income',\n                            self.env.company,\n                        ).id,\n                        'amount_type': 'regex',\n                        'amount_string': r'BRT: ([\\d,.]+)',\n                    }),\n                    Command.create({\n                        'label': 'Bank Fees',\n                        'account_id': self._get_demo_account(\n                            'cost_of_goods_sold',\n                            'expense_direct_cost',\n                            self.env.company,\n                        ).id,\n                        'amount_type': 'percentage',\n                        'amount_string': '100',\n                    }),\n                ]\n            },\n        }\n\n    @api.model\n    def _get_demo_data_attachment(self, company=False):\n        return {\n            'ir_attachment_in_invoice_1': {\n                'type': 'binary',\n                'name': 'in_invoice_yourcompany_demo.pdf',\n                'res_model': 'account.move',\n                'res_id': 'demo_invoice_extract',\n                'raw': file_open(\n                    'account/static/demo/in_invoice_yourcompany_demo_1.pdf', 'rb'\n                ).read()\n            },\n            'ir_attachment_in_invoice_2': {\n                'type': 'binary',\n                'name': 'in_invoice_yourcompany_demo.pdf',\n                'res_model': 'account.move',\n                'res_id': 'demo_invoice_equipment_purchase',\n                'raw': file_open(\n                    'account/static/demo/in_invoice_yourcompany_demo_2.pdf', 'rb'\n                ).read()\n            },\n        }\n\n    @api.model\n    def _get_demo_data_mail_message(self, company=False):\n        return {\n            'mail_message_in_invoice_1': {\n                'model': 'account.move',\n                'res_id': 'demo_invoice_extract',\n                'body': 'Vendor Bill attachment',\n                'message_type': 'comment',\n                'author_id': 'base.partner_demo',\n                'attachment_ids': [Command.set([\n                    'ir_attachment_in_invoice_1',\n                ])]\n            },\n            'mail_message_in_invoice_2': {\n                'model': 'account.move',\n                'res_id': 'demo_invoice_equipment_purchase',\n                'body': 'Vendor Bill attachment',\n                'message_type': 'comment',\n                'author_id': 'base.partner_demo',\n                'attachment_ids': [Command.set([\n                    'ir_attachment_in_invoice_2',\n                ])]\n            },\n        }\n\n    @api.model\n    def _get_demo_data_mail_activity(self, company=False):\n        return {\n            'invoice_activity_1': {\n                'res_id': 'demo_invoice_3',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_todo',\n                'date_deadline': (fields.Datetime.today() + relativedelta(days=5)).strftime('%Y-%m-%d %H:%M'),\n                'summary': 'Follow-up on payment',\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n            'invoice_activity_2': {\n                'res_id': 'demo_invoice_2',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_call',\n                'date_deadline': fields.Datetime.today().strftime('%Y-%m-%d %H:%M'),\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n            'invoice_activity_3': {\n                'res_id': 'demo_invoice_1',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_todo',\n                'date_deadline': (fields.Datetime.today() + relativedelta(days=5)).strftime('%Y-%m-%d %H:%M'),\n                'summary': 'Include upsell',\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n            'invoice_activity_4': {\n                'res_id': 'demo_invoice_extract',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_todo',\n                'date_deadline': (fields.Datetime.today() + relativedelta(days=5)).strftime('%Y-%m-%d %H:%M'),\n                'summary': 'Update address',\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n        }\n\n    @api.model\n\n\n", "CodeBleu_score": 30.742219151945093}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t2000,\n                'date': time.strftime('%Y-01-01'),\n                'partner_id': 'base.res_partner_12',\n            },\n            'demo_bank_statement_line_3': {\n                'journal_id': bnk_journal.id,\n                'payment_ref': 'Last Year Interests',\n                'amount': 102.78,\n                'date': time.strftime('%Y-01-01'),\n            },\n            'demo_bank_statement_line_4': {\n                'journal_id': bnk_journal.id,\n                'payment_ref': time.strftime('INV/%Y/00002'),\n                'amount': 750,\n                'date': time.strftime('%Y-01-01'),\n                'partner_id': 'base.res_partner_2',\n            },\n            'demo_bank_statement_line_5': {\n                'journal_id': bnk_journal.id,\n                'payment_ref': f'R:9772938  10/07 AX 9415116318 T:5 BRT: {formatLang(self.env, 100.0, digits=2)} C/ croip',\n                'amount': 96.67,\n                'date': time.strftime('%Y-01-01'),\n            },\n        }\n\n    @api.model\n    def _get_demo_data_reconcile_model(self, company=False):\n        return {\n            'reconcile_from_label': {\n                'name': 'Line with Bank Fees',\n                'rule_type': 'writeoff_suggestion',\n                'match_label': 'contains',\n                'match_label_param': 'BRT',\n                'line_ids': [\n                    Command.create({\n                        'label': 'Due amount',\n                        'account_id': self._get_demo_account(\n                            'income',\n                            'income',\n                            self.env.company,\n                        ).id,\n                        'amount_type': 'regex',\n                        'amount_string': r'BRT: ([\\d,.]+)',\n                    }),\n                    Command.create({\n                        'label': 'Bank Fees',\n                        'account_id': self._get_demo_account(\n                            'cost_of_goods_sold',\n                            'expense_direct_cost',\n                            self.env.company,\n                        ).id,\n                        'amount_type': 'percentage',\n                        'amount_string': '100',\n                    }),\n                ]\n            },\n        }\n\n    @api.model\n    def _get_demo_data_attachment(self, company=False):\n        return {\n            'ir_attachment_in_invoice_1': {\n                'type': 'binary',\n                'name': 'in_invoice_yourcompany_demo.pdf',\n                'res_model': 'account.move',\n                'res_id': 'demo_invoice_extract',\n                'raw': file_open(\n                    'account/static/demo/in_invoice_yourcompany_demo_1.pdf', 'rb'\n                ).read()\n            },\n            'ir_attachment_in_invoice_2': {\n                'type': 'binary',\n                'name': 'in_invoice_yourcompany_demo.pdf',\n                'res_model': 'account.move',\n                'res_id': 'demo_invoice_equipment_purchase',\n                'raw': file_open(\n                    'account/static/demo/in_invoice_yourcompany_demo_2.pdf', 'rb'\n                ).read()\n            },\n        }\n\n    @api.model\n    def _get_demo_data_mail_message(self, company=False):\n        return {\n            'mail_message_in_invoice_1': {\n                'model': 'account.move',\n                'res_id': 'demo_invoice_extract',\n                'body': 'Vendor Bill attachment',\n                'message_type': 'comment',\n                'author_id': 'base.partner_demo',\n                'attachment_ids': [Command.set([\n                    'ir_attachment_in_invoice_1',\n                ])]\n            },\n            'mail_message_in_invoice_2': {\n                'model': 'account.move',\n                'res_id': 'demo_invoice_equipment_purchase',\n                'body': 'Vendor Bill attachment',\n                'message_type': 'comment',\n                'author_id': 'base.partner_demo',\n                'attachment_ids': [Command.set([\n                    'ir_attachment_in_invoice_2',\n                ])]\n            },\n        }\n\n    @api.model\n    def _get_demo_data_mail_activity(self, company=False):\n        return {\n            'invoice_activity_1': {\n                'res_id': 'demo_invoice_3',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_todo',\n                'date_deadline': (fields.Datetime.today() + relativedelta(days=5)).strftime('%Y-%m-%d %H:%M'),\n                'summary': 'Follow-up on payment',\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n            'invoice_activity_2': {\n                'res_id': 'demo_invoice_2',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_call',\n                'date_deadline': fields.Datetime.today().strftime('%Y-%m-%d %H:%M'),\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n            'invoice_activity_3': {\n                'res_id': 'demo_invoice_1',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_todo',\n                'date_deadline': (fields.Datetime.today() + relativedelta(days=5)).strftime('%Y-%m-%d %H:%M'),\n                'summary': 'Include upsell',\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n            'invoice_activity_4': {\n                'res_id': 'demo_invoice_extract',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_todo',\n                'date_deadline': (fields.Datetime.today() + relativedelta(days=5)).strftime('%Y-%m-%d %H:%M'),\n                'summary': 'Update address',\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n        }\n\n    @api.model\n\n\n", "CodeBleu_score": 30.742219151945093}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t2000,\n                'date': time.strftime('%Y-01-01'),\n                'partner_id': 'base.res_partner_12',\n            },\n            'demo_bank_statement_line_3': {\n                'journal_id': bnk_journal.id,\n                'payment_ref': 'Last Year Interests',\n                'amount': 102.78,\n                'date': time.strftime('%Y-01-01'),\n            },\n            'demo_bank_statement_line_4': {\n                'journal_id': bnk_journal.id,\n                'payment_ref': time.strftime('INV/%Y/00002'),\n                'amount': 750,\n                'date': time.strftime('%Y-01-01'),\n                'partner_id': 'base.res_partner_2',\n            },\n            'demo_bank_statement_line_5': {\n                'journal_id': bnk_journal.id,\n                'payment_ref': f'R:9772938  10/07 AX 9415116318 T:5 BRT: {formatLang(self.env, 100.0, digits=2)} C/ croip',\n                'amount': 96.67,\n                'date': time.strftime('%Y-01-01'),\n            },\n        }\n\n    @api.model\n    def _get_demo_data_reconcile_model(self, company=False):\n        return {\n            'reconcile_from_label': {\n                'name': 'Line with Bank Fees',\n                'rule_type': 'writeoff_suggestion',\n                'match_label': 'contains',\n                'match_label_param': 'BRT',\n                'line_ids': [\n                    Command.create({\n                        'label': 'Due amount',\n                        'account_id': self._get_demo_account(\n                            'income',\n                            'income',\n                            self.env.company,\n                        ).id,\n                        'amount_type': 'regex',\n                        'amount_string': r'BRT: ([\\d,.]+)',\n                    }),\n                    Command.create({\n                        'label': 'Bank Fees',\n                        'account_id': self._get_demo_account(\n                            'cost_of_goods_sold',\n                            'expense_direct_cost',\n                            self.env.company,\n                        ).id,\n                        'amount_type': 'percentage',\n                        'amount_string': '100',\n                    }),\n                ]\n            },\n        }\n\n    @api.model\n    def _get_demo_data_attachment(self, company=False):\n        return {\n            'ir_attachment_in_invoice_1': {\n                'type': 'binary',\n                'name': 'in_invoice_yourcompany_demo.pdf',\n                'res_model': 'account.move',\n                'res_id': 'demo_invoice_extract',\n                'raw': file_open(\n                    'account/static/demo/in_invoice_yourcompany_demo_1.pdf', 'rb'\n                ).read()\n            },\n            'ir_attachment_in_invoice_2': {\n                'type': 'binary',\n                'name': 'in_invoice_yourcompany_demo.pdf',\n                'res_model': 'account.move',\n                'res_id': 'demo_invoice_equipment_purchase',\n                'raw': file_open(\n                    'account/static/demo/in_invoice_yourcompany_demo_2.pdf', 'rb'\n                ).read()\n            },\n        }\n\n    @api.model\n    def _get_demo_data_mail_message(self, company=False):\n        return {\n            'mail_message_in_invoice_1': {\n                'model': 'account.move',\n                'res_id': 'demo_invoice_extract',\n                'body': 'Vendor Bill attachment',\n                'message_type': 'comment',\n                'author_id': 'base.partner_demo',\n                'attachment_ids': [Command.set([\n                    'ir_attachment_in_invoice_1',\n                ])]\n            },\n            'mail_message_in_invoice_2': {\n                'model': 'account.move',\n                'res_id': 'demo_invoice_equipment_purchase',\n                'body': 'Vendor Bill attachment',\n                'message_type': 'comment',\n                'author_id': 'base.partner_demo',\n                'attachment_ids': [Command.set([\n                    'ir_attachment_in_invoice_2',\n                ])]\n            },\n        }\n\n    @api.model\n    def _get_demo_data_mail_activity(self, company=False):\n        return {\n            'invoice_activity_1': {\n                'res_id': 'demo_invoice_3',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_todo',\n                'date_deadline': (fields.Datetime.today() + relativedelta(days=5)).strftime('%Y-%m-%d %H:%M'),\n                'summary': 'Follow-up on payment',\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n            'invoice_activity_2': {\n                'res_id': 'demo_invoice_2',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_call',\n                'date_deadline': fields.Datetime.today().strftime('%Y-%m-%d %H:%M'),\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n            'invoice_activity_3': {\n                'res_id': 'demo_invoice_1',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_todo',\n                'date_deadline': (fields.Datetime.today() + relativedelta(days=5)).strftime('%Y-%m-%d %H:%M'),\n                'summary': 'Include upsell',\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n            'invoice_activity_4': {\n                'res_id': 'demo_invoice_extract',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_todo',\n                'date_deadline': (fields.Datetime.today() + relativedelta(days=5)).strftime('%Y-%m-%d %H:%M'),\n                'summary': 'Update address',\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n        }\n\n    @api.model\n\n\n", "CodeBleu_score": 30.742219151945093}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\tself.env.cr.execute(\"\"\"\n        SELECT\n            company_id,\n            count(*)\n        FROM\n            account_account\n        WHERE\n            account_type = 'other_income'\n            AND company_id IS NOT NULL\n        GROUP BY\n            company_id\n        HAVING\n            count(*) > 1\n    \"\"\")\n    for company_id, count in self.env.cr.fetchall():\n        raise ValidationError(_(\"There are %d accounts of type 'Current Year Earnings' for company '%s'. There should be only one.\") % (count, self.env['res.company'].browse(company_id).name))\n\n", "CodeBleu_score": 21.471181859571647}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\tself.ensure_one()\n    if self.account_type == \"other_income\" and self.internal_type == \"earnings\":\n        query = \"\"\"\n            SELECT count(id)\n            FROM account_account\n            WHERE account_type = 'other_income'\n            AND internal_type = 'earnings'\n            AND company_id = %s\n            AND id != %s\n        \"\"\"\n        self.env.cr.execute(query, (self.company_id.id, self.id))\n        count = self.env.cr.fetchone()[0]\n        if count > 0:\n            raise ValidationError(_(\"There can only be one account with the 'Current Year Earnings' type for each company.\"))\n\n", "CodeBleu_score": 24.228914935109007}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\tAccount = self.env['account.account']\n    accounts = Account.search([('account_type', '=', 'current_year_earning')])\n    accounts_by_company = defaultdict(list)\n    for account in accounts:\n        accounts_by_company[account.company_id].append(account)\n    for company, accounts in accounts_by_company.items():\n        if len(accounts) > 1:\n            raise ValidationError(_('You cannot have more than one Current Year Earnings account for a company. (accounts: %s)', ', '.join(accounts.mapped('code'))))\n\n", "CodeBleu_score": 29.0143263673336}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t.company_id.id].keys())\n            closest_index = bisect_left(codes_list, account.code) - 1\n            account.account_type = accounts_with_codes[account.company_id.id][codes_list[closest_index]] if closest_index != -1 else 'asset_current'\n\n    @api.depends('account_type')\n    def _compute_include_initial_balance(self):\n        for account in self:\n            account.include_initial_balance = account.account_type not in ('income', 'income_other', 'expense', 'expense_depreciation', 'expense_direct_cost', 'off_balance')\n\n    @api.depends('account_type')\n    def _compute_internal_group(self):\n        for account in self:\n            if account.account_type:\n                account.internal_group = 'off_balance' if account.account_type == 'off_balance' else account.account_type.split('_')[0]\n\n    @api.depends('account_type')\n    def _compute_reconcile(self):\n        for account in self:\n            account.reconcile = account.account_type in ('asset_receivable', 'liability_payable')\n\n    def _set_opening_debit(self):\n        for record in self:\n            record._set_opening_debit_credit(record.opening_debit, 'debit')\n\n    def _set_opening_credit(self):\n        for record in self:\n            record._set_opening_debit_credit(record.opening_credit, 'credit')\n\n    def _set_opening_balance(self):\n        # Tracking of the balances to be used after the import to populate the opening move in batch.\n        for account in self:\n            balance = account.opening_balance\n            account._set_opening_debit_credit(abs(balance) if balance > 0.0 else 0.0, 'debit')\n            account._set_opening_debit_credit(abs(balance) if balance < 0.0 else 0.0, 'credit')\n\n    def _set_opening_debit_credit(self, amount, field):\n        \\\"\\\"\\\" Generic function called by both opening_debit and opening_credit's\n        inverse function. 'Amount' parameter is the value to be set, and field\n        either 'debit' or 'credit', depending on which one of these two fields\n        got assigned.\n        \\\"\\\"\\\"\n        self.ensure_one()\n        if 'import_account_opening_balance' not in self._cr.precommit.data:\n            data = self._cr.precommit.data['import_account_opening_balance'] = {}\n            self._cr.precommit.add(self._load_precommit_update_opening_move)\n        else:\n            data = self._cr.precommit.data['import_account_opening_balance']\n        data.setdefault(self.id, [None, None])\n        index = 0 if field == 'debit' else 1\n        data[self.id][index] = amount\n\n    @api.model\n    def default_get(self, default_fields):\n        \\\"\\\"\\\"If we're creating a new account through a many2one, there are chances that we typed the account code\n        instead of its name. In that case, switch both fields values.\n        \\\"\\\"\\\"\n        if 'name' not in default_fields and 'code' not in default_fields:\n            return super().default_get(default_fields)\n        default_name = self._context.get('default_name')\n        default_code = self._context.get('default_code')\n        if default_name and not default_code:\n            try:\n                default_code = int(default_name)\n            except ValueError:\n                pass\n            if default_code:\n                default_name = False\n        contextual_self = self.with_context(default_name=default_name, default_code=default_code)\n        return super(AccountAccount, contextual_self).default_get(default_fields)\n\n    @api.model\n    def _get_most_frequent_accounts_for_partner(self, company_id, partner_id, move_type, filter_never_user_accounts=False, limit=None):\n        \\\"\\\"\\\"\n        Returns the accounts ordered from most frequent to least frequent for a given partner\n        and filtered according to the move type\n        :param company_id: the company id\n        :param partner_id: the partner id for which we want to retrieve the most frequent accounts\n        :param move_type: the type of the move to know which type of accounts to retrieve\n        :param filter_never_user_accounts: True if we should filter out accounts never used for the partner\n        :param limit: the maximum number of accounts to retrieve\n        :returns: List of account ids, ordered by frequency (from most to least frequent)\n        \\\"\\\"\\\"\n        domain = [\n            *self.env['account.move.line']._check_company_domain(company_id),\n            ('partner_id', '=', partner_id),\n            ('account_id.deprecated', '=', False),\n            ('date', '>=', fields.Date.add(fields.Date.today(), days=-365 * 2)),\n        ]\n        if move_type in self.env['account.move'].get_inbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'income'))\n        elif move_type in self.env['account.move'].get_outbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'expense'))\n\n        query = self.env['account.move.line']._where_calc(domain)\n        if not filter_never_user_accounts:\n            _kind, rhs_table, condition = query._joins['account_move_line__account_id']\n            query._joins['account_move_line__account_id'] = (SQL(\\\"RIGHT JOIN\\\"), rhs_table, condition)\n\n        from_clause, where_clause, params = query.get_sql()\n        self._cr.execute(f\\\"\\\"\\\"\n            SELECT account_move_line__account_id.id\n              FROM {from_clause}\n             WHERE {where_clause}\n          GROUP BY account_move_line__account_id.id\n          ORDER BY COUNT(account_move_line.id) DESC, account_move_line__account_id.code\n                   {f\\\"LIMIT {limit:d}\\\" if limit else \\\"\\\"}\n        \\\"\\\"\\\", params)\n        return [r[0] for r in self._cr.fetchall()]\n\n    @api.model\n    def _get_most_frequent_account_for_partner(self, company_id, partner_id, move_type=None):\n        most_frequent_account = self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type, filter_never_user_accounts=True, limit=1)\n        return most_frequent_account[0] if most_frequent_account else False\n\n    @api.model\n    def _order_accounts_by_frequency_for_partner(self, company_id, partner_id, move_type=None):\n        return self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type)\n\n    @api.model\n\n\n", "CodeBleu_score": 25.600099738353787}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t.company_id.id].keys())\n            closest_index = bisect_left(codes_list, account.code) - 1\n            account.account_type = accounts_with_codes[account.company_id.id][codes_list[closest_index]] if closest_index != -1 else 'asset_current'\n\n    @api.depends('account_type')\n    def _compute_include_initial_balance(self):\n        for account in self:\n            account.include_initial_balance = account.account_type not in ('income', 'income_other', 'expense', 'expense_depreciation', 'expense_direct_cost', 'off_balance')\n\n    @api.depends('account_type')\n    def _compute_internal_group(self):\n        for account in self:\n            if account.account_type:\n                account.internal_group = 'off_balance' if account.account_type == 'off_balance' else account.account_type.split('_')[0]\n\n    @api.depends('account_type')\n    def _compute_reconcile(self):\n        for account in self:\n            account.reconcile = account.account_type in ('asset_receivable', 'liability_payable')\n\n    def _set_opening_debit(self):\n        for record in self:\n            record._set_opening_debit_credit(record.opening_debit, 'debit')\n\n    def _set_opening_credit(self):\n        for record in self:\n            record._set_opening_debit_credit(record.opening_credit, 'credit')\n\n    def _set_opening_balance(self):\n        # Tracking of the balances to be used after the import to populate the opening move in batch.\n        for account in self:\n            balance = account.opening_balance\n            account._set_opening_debit_credit(abs(balance) if balance > 0.0 else 0.0, 'debit')\n            account._set_opening_debit_credit(abs(balance) if balance < 0.0 else 0.0, 'credit')\n\n    def _set_opening_debit_credit(self, amount, field):\n        \\\"\\\"\\\" Generic function called by both opening_debit and opening_credit's\n        inverse function. 'Amount' parameter is the value to be set, and field\n        either 'debit' or 'credit', depending on which one of these two fields\n        got assigned.\n        \\\"\\\"\\\"\n        self.ensure_one()\n        if 'import_account_opening_balance' not in self._cr.precommit.data:\n            data = self._cr.precommit.data['import_account_opening_balance'] = {}\n            self._cr.precommit.add(self._load_precommit_update_opening_move)\n        else:\n            data = self._cr.precommit.data['import_account_opening_balance']\n        data.setdefault(self.id, [None, None])\n        index = 0 if field == 'debit' else 1\n        data[self.id][index] = amount\n\n    @api.model\n    def default_get(self, default_fields):\n        \\\"\\\"\\\"If we're creating a new account through a many2one, there are chances that we typed the account code\n        instead of its name. In that case, switch both fields values.\n        \\\"\\\"\\\"\n        if 'name' not in default_fields and 'code' not in default_fields:\n            return super().default_get(default_fields)\n        default_name = self._context.get('default_name')\n        default_code = self._context.get('default_code')\n        if default_name and not default_code:\n            try:\n                default_code = int(default_name)\n            except ValueError:\n                pass\n            if default_code:\n                default_name = False\n        contextual_self = self.with_context(default_name=default_name, default_code=default_code)\n        return super(AccountAccount, contextual_self).default_get(default_fields)\n\n    @api.model\n    def _get_most_frequent_accounts_for_partner(self, company_id, partner_id, move_type, filter_never_user_accounts=False, limit=None):\n        \\\"\\\"\\\"\n        Returns the accounts ordered from most frequent to least frequent for a given partner\n        and filtered according to the move type\n        :param company_id: the company id\n        :param partner_id: the partner id for which we want to retrieve the most frequent accounts\n        :param move_type: the type of the move to know which type of accounts to retrieve\n        :param filter_never_user_accounts: True if we should filter out accounts never used for the partner\n        :param limit: the maximum number of accounts to retrieve\n        :returns: List of account ids, ordered by frequency (from most to least frequent)\n        \\\"\\\"\\\"\n        domain = [\n            *self.env['account.move.line']._check_company_domain(company_id),\n            ('partner_id', '=', partner_id),\n            ('account_id.deprecated', '=', False),\n            ('date', '>=', fields.Date.add(fields.Date.today(), days=-365 * 2)),\n        ]\n        if move_type in self.env['account.move'].get_inbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'income'))\n        elif move_type in self.env['account.move'].get_outbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'expense'))\n\n        query = self.env['account.move.line']._where_calc(domain)\n        if not filter_never_user_accounts:\n            _kind, rhs_table, condition = query._joins['account_move_line__account_id']\n            query._joins['account_move_line__account_id'] = (SQL(\\\"RIGHT JOIN\\\"), rhs_table, condition)\n\n        from_clause, where_clause, params = query.get_sql()\n        self._cr.execute(f\\\"\\\"\\\"\n            SELECT account_move_line__account_id.id\n              FROM {from_clause}\n             WHERE {where_clause}\n          GROUP BY account_move_line__account_id.id\n          ORDER BY COUNT(account_move_line.id) DESC, account_move_line__account_id.code\n                   {f\\\"LIMIT {limit:d}\\\" if limit else \\\"\\\"}\n        \\\"\\\"\\\", params)\n        return [r[0] for r in self._cr.fetchall()]\n\n    @api.model\n    def _get_most_frequent_account_for_partner(self, company_id, partner_id, move_type=None):\n        most_frequent_account = self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type, filter_never_user_accounts=True, limit=1)\n        return most_frequent_account[0] if most_frequent_account else False\n\n    @api.model\n    def _order_accounts_by_frequency_for_partner(self, company_id, partner_id, move_type=None):\n        return self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type)\n\n    @api.model\n\n\n", "CodeBleu_score": 25.600099738353787}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t.company_id.id].keys())\n            closest_index = bisect_left(codes_list, account.code) - 1\n            account.account_type = accounts_with_codes[account.company_id.id][codes_list[closest_index]] if closest_index != -1 else 'asset_current'\n\n    @api.depends('account_type')\n    def _compute_include_initial_balance(self):\n        for account in self:\n            account.include_initial_balance = account.account_type not in ('income', 'income_other', 'expense', 'expense_depreciation', 'expense_direct_cost', 'off_balance')\n\n    @api.depends('account_type')\n    def _compute_internal_group(self):\n        for account in self:\n            if account.account_type:\n                account.internal_group = 'off_balance' if account.account_type == 'off_balance' else account.account_type.split('_')[0]\n\n    @api.depends('account_type')\n    def _compute_reconcile(self):\n        for account in self:\n            account.reconcile = account.account_type in ('asset_receivable', 'liability_payable')\n\n    def _set_opening_debit(self):\n        for record in self:\n            record._set_opening_debit_credit(record.opening_debit, 'debit')\n\n    def _set_opening_credit(self):\n        for record in self:\n            record._set_opening_debit_credit(record.opening_credit, 'credit')\n\n    def _set_opening_balance(self):\n        # Tracking of the balances to be used after the import to populate the opening move in batch.\n        for account in self:\n            balance = account.opening_balance\n            account._set_opening_debit_credit(abs(balance) if balance > 0.0 else 0.0, 'debit')\n            account._set_opening_debit_credit(abs(balance) if balance < 0.0 else 0.0, 'credit')\n\n    def _set_opening_debit_credit(self, amount, field):\n        \\\"\\\"\\\" Generic function called by both opening_debit and opening_credit's\n        inverse function. 'Amount' parameter is the value to be set, and field\n        either 'debit' or 'credit', depending on which one of these two fields\n        got assigned.\n        \\\"\\\"\\\"\n        self.ensure_one()\n        if 'import_account_opening_balance' not in self._cr.precommit.data:\n            data = self._cr.precommit.data['import_account_opening_balance'] = {}\n            self._cr.precommit.add(self._load_precommit_update_opening_move)\n        else:\n            data = self._cr.precommit.data['import_account_opening_balance']\n        data.setdefault(self.id, [None, None])\n        index = 0 if field == 'debit' else 1\n        data[self.id][index] = amount\n\n    @api.model\n    def default_get(self, default_fields):\n        \\\"\\\"\\\"If we're creating a new account through a many2one, there are chances that we typed the account code\n        instead of its name. In that case, switch both fields values.\n        \\\"\\\"\\\"\n        if 'name' not in default_fields and 'code' not in default_fields:\n            return super().default_get(default_fields)\n        default_name = self._context.get('default_name')\n        default_code = self._context.get('default_code')\n        if default_name and not default_code:\n            try:\n                default_code = int(default_name)\n            except ValueError:\n                pass\n            if default_code:\n                default_name = False\n        contextual_self = self.with_context(default_name=default_name, default_code=default_code)\n        return super(AccountAccount, contextual_self).default_get(default_fields)\n\n    @api.model\n    def _get_most_frequent_accounts_for_partner(self, company_id, partner_id, move_type, filter_never_user_accounts=False, limit=None):\n        \\\"\\\"\\\"\n        Returns the accounts ordered from most frequent to least frequent for a given partner\n        and filtered according to the move type\n        :param company_id: the company id\n        :param partner_id: the partner id for which we want to retrieve the most frequent accounts\n        :param move_type: the type of the move to know which type of accounts to retrieve\n        :param filter_never_user_accounts: True if we should filter out accounts never used for the partner\n        :param limit: the maximum number of accounts to retrieve\n        :returns: List of account ids, ordered by frequency (from most to least frequent)\n        \\\"\\\"\\\"\n        domain = [\n            *self.env['account.move.line']._check_company_domain(company_id),\n            ('partner_id', '=', partner_id),\n            ('account_id.deprecated', '=', False),\n            ('date', '>=', fields.Date.add(fields.Date.today(), days=-365 * 2)),\n        ]\n        if move_type in self.env['account.move'].get_inbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'income'))\n        elif move_type in self.env['account.move'].get_outbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'expense'))\n\n        query = self.env['account.move.line']._where_calc(domain)\n        if not filter_never_user_accounts:\n            _kind, rhs_table, condition = query._joins['account_move_line__account_id']\n            query._joins['account_move_line__account_id'] = (SQL(\\\"RIGHT JOIN\\\"), rhs_table, condition)\n\n        from_clause, where_clause, params = query.get_sql()\n        self._cr.execute(f\\\"\\\"\\\"\n            SELECT account_move_line__account_id.id\n              FROM {from_clause}\n             WHERE {where_clause}\n          GROUP BY account_move_line__account_id.id\n          ORDER BY COUNT(account_move_line.id) DESC, account_move_line__account_id.code\n                   {f\\\"LIMIT {limit:d}\\\" if limit else \\\"\\\"}\n        \\\"\\\"\\\", params)\n        return [r[0] for r in self._cr.fetchall()]\n\n    @api.model\n    def _get_most_frequent_account_for_partner(self, company_id, partner_id, move_type=None):\n        most_frequent_account = self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type, filter_never_user_accounts=True, limit=1)\n        return most_frequent_account[0] if most_frequent_account else False\n\n    @api.model\n    def _order_accounts_by_frequency_for_partner(self, company_id, partner_id, move_type=None):\n        return self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type)\n\n    @api.model\n\n\n", "CodeBleu_score": 25.600099738353787}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t] = amount\n\n    @api.model\n    def default_get(self, default_fields):\n        \\\"\\\"\\\"If we're creating a new account through a many2one, there are chances that we typed the account code\n        instead of its name. In that case, switch both fields values.\n        \\\"\\\"\\\"\n        if 'name' not in default_fields and 'code' not in default_fields:\n            return super().default_get(default_fields)\n        default_name = self._context.get('default_name')\n        default_code = self._context.get('default_code')\n        if default_name and not default_code:\n            try:\n                default_code = int(default_name)\n            except ValueError:\n                pass\n            if default_code:\n                default_name = False\n        contextual_self = self.with_context(default_name=default_name, default_code=default_code)\n        return super(AccountAccount, contextual_self).default_get(default_fields)\n\n    @api.model\n    def _get_most_frequent_accounts_for_partner(self, company_id, partner_id, move_type, filter_never_user_accounts=False, limit=None):\n        \\\"\\\"\\\"\n        Returns the accounts ordered from most frequent to least frequent for a given partner\n        and filtered according to the move type\n        :param company_id: the company id\n        :param partner_id: the partner id for which we want to retrieve the most frequent accounts\n        :param move_type: the type of the move to know which type of accounts to retrieve\n        :param filter_never_user_accounts: True if we should filter out accounts never used for the partner\n        :param limit: the maximum number of accounts to retrieve\n        :returns: List of account ids, ordered by frequency (from most to least frequent)\n        \\\"\\\"\\\"\n        domain = [\n            *self.env['account.move.line']._check_company_domain(company_id),\n            ('partner_id', '=', partner_id),\n            ('account_id.deprecated', '=', False),\n            ('date', '>=', fields.Date.add(fields.Date.today(), days=-365 * 2)),\n        ]\n        if move_type in self.env['account.move'].get_inbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'income'))\n        elif move_type in self.env['account.move'].get_outbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'expense'))\n\n        query = self.env['account.move.line']._where_calc(domain)\n        if not filter_never_user_accounts:\n            _kind, rhs_table, condition = query._joins['account_move_line__account_id']\n            query._joins['account_move_line__account_id'] = (SQL(\\\"RIGHT JOIN\\\"), rhs_table, condition)\n\n        from_clause, where_clause, params = query.get_sql()\n        self._cr.execute(f\\\"\\\"\\\"\n            SELECT account_move_line__account_id.id\n              FROM {from_clause}\n             WHERE {where_clause}\n          GROUP BY account_move_line__account_id.id\n          ORDER BY COUNT(account_move_line.id) DESC, account_move_line__account_id.code\n                   {f\\\"LIMIT {limit:d}\\\" if limit else \\\"\\\"}\n        \\\"\\\"\\\", params)\n        return [r[0] for r in self._cr.fetchall()]\n\n    @api.model\n    def _get_most_frequent_account_for_partner(self, company_id, partner_id, move_type=None):\n        most_frequent_account = self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type, filter_never_user_accounts=True, limit=1)\n        return most_frequent_account[0] if most_frequent_account else False\n\n    @api.model\n    def _order_accounts_by_frequency_for_partner(self, company_id, partner_id, move_type=None):\n        return self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type)\n\n    @api.model\n    def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None):\n        if not name and self._context.get('partner_id') and self._context.get('move_type'):\n            return self._order_accounts_by_frequency_for_partner(\n                            self.env.company.id, self._context.get('partner_id'), self._context.get('move_type'))\n        domain = domain or []\n        if name:\n            if operator in ('=', '!='):\n                name_domain = ['|', ('code', '=', name.split(' ')[0]), ('name', operator, name)]\n            else:\n                name_domain = ['|', ('code', '=ilike', name.split(' ')[0] + '%'), ('name', operator, name)]\n            if operator in expression.NEGATIVE_TERM_OPERATORS:\n                name_domain = ['&', '!'] + name_domain[1:]\n            domain = expression.AND([name_domain, domain])\n        return self._search(domain, limit=limit, order=order)\n\n    @api.onchange('account_type')\n    def _onchange_account_type(self):\n        if self.internal_group == 'off_balance':\n            self.tax_ids = False\n\n    def _split_code_name(self, code_name):\n        # We only want to split the name on the first word if there is a digit in it\n        code, name = ACCOUNT_REGEX.match(code_name or '').groups()\n        return code, name.strip()\n\n    @api.onchange('name')\n    def _onchange_name(self):\n        code, name = self._split_code_name(self.name)\n        if code and not self.code:\n            self.name = name\n            self.code = code\n\n    @api.depends('code')\n    def _compute_display_name(self):\n        for account in self:\n            account.display_name = f\\\"{account.code} {account.name}\\\"\n\n    @api.returns('self', lambda value: value.id)\n    def copy(self, default=None):\n        default = dict(default or {})\n        if default.get('code', False):\n            return super(AccountAccount, self).copy(default)\n        try:\n            default['code'] = (str(int(self.code) + 10) or '').zfill(len(self.code))\n            default.setdefault('name', _(\\\"%s (copy)\\\", self.name or ''))\n            while self.env['account.account'].search([\n                *self.env['account.account']._check_company_domain(default.get('company_id', False) or self.company_id),\n                ('code', '=', default['code']),\n            ], limit=1):\n                default['code'] = (str(int(default['code']) + 10) or '')\n                default['name'] = _(\\\"%s (copy)\\\", self.name or '')\n        except ValueError:\n            default['code'] = _(\\\"%s.copy\\\", self.code or '')\n            default['name'] = self.name\n        return super(AccountAccount, self).copy(default)\n\n\n\n", "CodeBleu_score": 29.598566905469458}, {"code": "def copy_translations(self, new, excluded=())\n\t] = amount\n\n    @api.model\n    def default_get(self, default_fields):\n        \\\"\\\"\\\"If we're creating a new account through a many2one, there are chances that we typed the account code\n        instead of its name. In that case, switch both fields values.\n        \\\"\\\"\\\"\n        if 'name' not in default_fields and 'code' not in default_fields:\n            return super().default_get(default_fields)\n        default_name = self._context.get('default_name')\n        default_code = self._context.get('default_code')\n        if default_name and not default_code:\n            try:\n                default_code = int(default_name)\n            except ValueError:\n                pass\n            if default_code:\n                default_name = False\n        contextual_self = self.with_context(default_name=default_name, default_code=default_code)\n        return super(AccountAccount, contextual_self).default_get(default_fields)\n\n    @api.model\n    def _get_most_frequent_accounts_for_partner(self, company_id, partner_id, move_type, filter_never_user_accounts=False, limit=None):\n        \\\"\\\"\\\"\n        Returns the accounts ordered from most frequent to least frequent for a given partner\n        and filtered according to the move type\n        :param company_id: the company id\n        :param partner_id: the partner id for which we want to retrieve the most frequent accounts\n        :param move_type: the type of the move to know which type of accounts to retrieve\n        :param filter_never_user_accounts: True if we should filter out accounts never used for the partner\n        :param limit: the maximum number of accounts to retrieve\n        :returns: List of account ids, ordered by frequency (from most to least frequent)\n        \\\"\\\"\\\"\n        domain = [\n            *self.env['account.move.line']._check_company_domain(company_id),\n            ('partner_id', '=', partner_id),\n            ('account_id.deprecated', '=', False),\n            ('date', '>=', fields.Date.add(fields.Date.today(), days=-365 * 2)),\n        ]\n        if move_type in self.env['account.move'].get_inbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'income'))\n        elif move_type in self.env['account.move'].get_outbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'expense'))\n\n        query = self.env['account.move.line']._where_calc(domain)\n        if not filter_never_user_accounts:\n            _kind, rhs_table, condition = query._joins['account_move_line__account_id']\n            query._joins['account_move_line__account_id'] = (SQL(\\\"RIGHT JOIN\\\"), rhs_table, condition)\n\n        from_clause, where_clause, params = query.get_sql()\n        self._cr.execute(f\\\"\\\"\\\"\n            SELECT account_move_line__account_id.id\n              FROM {from_clause}\n             WHERE {where_clause}\n          GROUP BY account_move_line__account_id.id\n          ORDER BY COUNT(account_move_line.id) DESC, account_move_line__account_id.code\n                   {f\\\"LIMIT {limit:d}\\\" if limit else \\\"\\\"}\n        \\\"\\\"\\\", params)\n        return [r[0] for r in self._cr.fetchall()]\n\n    @api.model\n    def _get_most_frequent_account_for_partner(self, company_id, partner_id, move_type=None):\n        most_frequent_account = self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type, filter_never_user_accounts=True, limit=1)\n        return most_frequent_account[0] if most_frequent_account else False\n\n    @api.model\n    def _order_accounts_by_frequency_for_partner(self, company_id, partner_id, move_type=None):\n        return self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type)\n\n    @api.model\n    def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None):\n        if not name and self._context.get('partner_id') and self._context.get('move_type'):\n            return self._order_accounts_by_frequency_for_partner(\n                            self.env.company.id, self._context.get('partner_id'), self._context.get('move_type'))\n        domain = domain or []\n        if name:\n            if operator in ('=', '!='):\n                name_domain = ['|', ('code', '=', name.split(' ')[0]), ('name', operator, name)]\n            else:\n                name_domain = ['|', ('code', '=ilike', name.split(' ')[0] + '%'), ('name', operator, name)]\n            if operator in expression.NEGATIVE_TERM_OPERATORS:\n                name_domain = ['&', '!'] + name_domain[1:]\n            domain = expression.AND([name_domain, domain])\n        return self._search(domain, limit=limit, order=order)\n\n    @api.onchange('account_type')\n    def _onchange_account_type(self):\n        if self.internal_group == 'off_balance':\n            self.tax_ids = False\n\n    def _split_code_name(self, code_name):\n        # We only want to split the name on the first word if there is a digit in it\n        code, name = ACCOUNT_REGEX.match(code_name or '').groups()\n        return code, name.strip()\n\n    @api.onchange('name')\n    def _onchange_name(self):\n        code, name = self._split_code_name(self.name)\n        if code and not self.code:\n            self.name = name\n            self.code = code\n\n    @api.depends('code')\n    def _compute_display_name(self):\n        for account in self:\n            account.display_name = f\\\"{account.code} {account.name}\\\"\n\n    @api.returns('self', lambda value: value.id)\n    def copy(self, default=None):\n        default = dict(default or {})\n        if default.get('code', False):\n            return super(AccountAccount, self).copy(default)\n        try:\n            default['code'] = (str(int(self.code) + 10) or '').zfill(len(self.code))\n            default.setdefault('name', _(\\\"%s (copy)\\\", self.name or ''))\n            while self.env['account.account'].search([\n                *self.env['account.account']._check_company_domain(default.get('company_id', False) or self.company_id),\n                ('code', '=', default['code']),\n            ], limit=1):\n                default['code'] = (str(int(default['code']) + 10) or '')\n                default['name'] = _(\\\"%s (copy)\\\", self.name or '')\n        except ValueError:\n            default['code'] = _(\\\"%s.copy\\\", self.code or '')\n            default['name'] = self.name\n        return super(AccountAccount, self).copy(default)\n\n\n\n", "CodeBleu_score": 29.598566905469458}, {"code": "def copy_translations(self, new, excluded=())\n\t] = amount\n\n    @api.model\n    def default_get(self, default_fields):\n        \\\"\\\"\\\"If we're creating a new account through a many2one, there are chances that we typed the account code\n        instead of its name. In that case, switch both fields values.\n        \\\"\\\"\\\"\n        if 'name' not in default_fields and 'code' not in default_fields:\n            return super().default_get(default_fields)\n        default_name = self._context.get('default_name')\n        default_code = self._context.get('default_code')\n        if default_name and not default_code:\n            try:\n                default_code = int(default_name)\n            except ValueError:\n                pass\n            if default_code:\n                default_name = False\n        contextual_self = self.with_context(default_name=default_name, default_code=default_code)\n        return super(AccountAccount, contextual_self).default_get(default_fields)\n\n    @api.model\n    def _get_most_frequent_accounts_for_partner(self, company_id, partner_id, move_type, filter_never_user_accounts=False, limit=None):\n        \\\"\\\"\\\"\n        Returns the accounts ordered from most frequent to least frequent for a given partner\n        and filtered according to the move type\n        :param company_id: the company id\n        :param partner_id: the partner id for which we want to retrieve the most frequent accounts\n        :param move_type: the type of the move to know which type of accounts to retrieve\n        :param filter_never_user_accounts: True if we should filter out accounts never used for the partner\n        :param limit: the maximum number of accounts to retrieve\n        :returns: List of account ids, ordered by frequency (from most to least frequent)\n        \\\"\\\"\\\"\n        domain = [\n            *self.env['account.move.line']._check_company_domain(company_id),\n            ('partner_id', '=', partner_id),\n            ('account_id.deprecated', '=', False),\n            ('date', '>=', fields.Date.add(fields.Date.today(), days=-365 * 2)),\n        ]\n        if move_type in self.env['account.move'].get_inbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'income'))\n        elif move_type in self.env['account.move'].get_outbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'expense'))\n\n        query = self.env['account.move.line']._where_calc(domain)\n        if not filter_never_user_accounts:\n            _kind, rhs_table, condition = query._joins['account_move_line__account_id']\n            query._joins['account_move_line__account_id'] = (SQL(\\\"RIGHT JOIN\\\"), rhs_table, condition)\n\n        from_clause, where_clause, params = query.get_sql()\n        self._cr.execute(f\\\"\\\"\\\"\n            SELECT account_move_line__account_id.id\n              FROM {from_clause}\n             WHERE {where_clause}\n          GROUP BY account_move_line__account_id.id\n          ORDER BY COUNT(account_move_line.id) DESC, account_move_line__account_id.code\n                   {f\\\"LIMIT {limit:d}\\\" if limit else \\\"\\\"}\n        \\\"\\\"\\\", params)\n        return [r[0] for r in self._cr.fetchall()]\n\n    @api.model\n    def _get_most_frequent_account_for_partner(self, company_id, partner_id, move_type=None):\n        most_frequent_account = self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type, filter_never_user_accounts=True, limit=1)\n        return most_frequent_account[0] if most_frequent_account else False\n\n    @api.model\n    def _order_accounts_by_frequency_for_partner(self, company_id, partner_id, move_type=None):\n        return self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type)\n\n    @api.model\n    def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None):\n        if not name and self._context.get('partner_id') and self._context.get('move_type'):\n            return self._order_accounts_by_frequency_for_partner(\n                            self.env.company.id, self._context.get('partner_id'), self._context.get('move_type'))\n        domain = domain or []\n        if name:\n            if operator in ('=', '!='):\n                name_domain = ['|', ('code', '=', name.split(' ')[0]), ('name', operator, name)]\n            else:\n                name_domain = ['|', ('code', '=ilike', name.split(' ')[0] + '%'), ('name', operator, name)]\n            if operator in expression.NEGATIVE_TERM_OPERATORS:\n                name_domain = ['&', '!'] + name_domain[1:]\n            domain = expression.AND([name_domain, domain])\n        return self._search(domain, limit=limit, order=order)\n\n    @api.onchange('account_type')\n    def _onchange_account_type(self):\n        if self.internal_group == 'off_balance':\n            self.tax_ids = False\n\n    def _split_code_name(self, code_name):\n        # We only want to split the name on the first word if there is a digit in it\n        code, name = ACCOUNT_REGEX.match(code_name or '').groups()\n        return code, name.strip()\n\n    @api.onchange('name')\n    def _onchange_name(self):\n        code, name = self._split_code_name(self.name)\n        if code and not self.code:\n            self.name = name\n            self.code = code\n\n    @api.depends('code')\n    def _compute_display_name(self):\n        for account in self:\n            account.display_name = f\\\"{account.code} {account.name}\\\"\n\n    @api.returns('self', lambda value: value.id)\n    def copy(self, default=None):\n        default = dict(default or {})\n        if default.get('code', False):\n            return super(AccountAccount, self).copy(default)\n        try:\n            default['code'] = (str(int(self.code) + 10) or '').zfill(len(self.code))\n            default.setdefault('name', _(\\\"%s (copy)\\\", self.name or ''))\n            while self.env['account.account'].search([\n                *self.env['account.account']._check_company_domain(default.get('company_id', False) or self.company_id),\n                ('code', '=', default['code']),\n            ], limit=1):\n                default['code'] = (str(int(default['code']) + 10) or '')\n                default['name'] = _(\\\"%s (copy)\\\", self.name or '')\n        except ValueError:\n            default['code'] = _(\\\"%s.copy\\\", self.code or '')\n            default['name'] = self.name\n        return super(AccountAccount, self).copy(default)\n\n\n\n", "CodeBleu_score": 29.598566905469458}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\tsale_types = self.env['account.move'].get_sale_types(include_receipts=True)\n\n    query = self.env['account.move.line']._search([\n        ('parent_state', '=', 'posted'),\n        ('move_id.move_type', 'in', sale_types),\n    ])\n    query.add_where(\n        SQL(\n            \\\"\\\"\\\"%s && %s\\\"\\\"\\\",\n            [str(account_id) for account_id in self.ids],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n\n    query_string, query_param = query.select(\n        r\\\"\\\"\\\"DISTINCT move_id, (regexp_matches(jsonb_object_keys(account_move_line.analytic_distribution), '\\d+', 'g'))[1]::int as account_id\\\"\\\"\\\"\n    )\n    query_string = f\\\"\\\"\\\"\n        SELECT account_id, count(move_id) FROM\n        ({query_string}) distribution\n        GROUP BY account_id\n    \\\"\\\"\\\"\n\n    self._cr.execute(query_string, query_param)\n    data = {res['account_id']: res['count'] for res in self._cr.dictfetchall()}\n    for account in self:\n        account.invoice_count = data.get(account.id, 0)\n\n", "CodeBleu_score": 34.75348450476326}, {"code": "def action_view_invoice(self)\n\tsale_types = self.env['account.move'].get_sale_types(include_receipts=True)\n\n    query = self.env['account.move.line']._search([\n        ('parent_state', '=', 'posted'),\n        ('move_id.move_type', 'in', sale_types),\n    ])\n    query.add_where(\n        SQL(\"\"\"%s && %s\"\"\", [str(account_id) for account_id in self.ids], self.env['account.move.line']._query_analytic_accounts())\n    )\n\n    query_string, query_param = query.select(\n        r\"\"\"DISTINCT move_id, (regexp_matches(jsonb_object_keys(account_move_line.analytic_distribution), '\\d+', 'g'))[1]::int as account_id\"\"\"\n    )\n    query_string = f\"\"\"\n        SELECT account_id, count(move_id) FROM\n        ({query_string}) distribution\n        GROUP BY account_id\n    \"\"\"\n\n    self._cr.execute(query_string, query_param)\n    data = {res['account_id']: res['count'] for res in self._cr.dictfetchall()}\n    for account in self:\n        account.invoice_count = data.get(account.id, 0)\n\n", "CodeBleu_score": 35.12592765896587}, {"code": "def action_view_invoice(self)\n\tsale_types = self.env['account.move'].get_sale_types(include_receipts=True)\n\n    query = self.env['account.move.line']._search([\n        ('parent_state', '=', 'posted'),\n        ('move_id.move_type', 'in', sale_types),\n    ])\n    query.add_where(\n        SQL(\n            \\\"%s && %s\\\",\n            [str(account_id) for account_id in self.ids],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n\n    query_string, query_param = query.select(\n        r\\\"\\\"\\\"DISTINCT move_id, (regexp_matches(jsonb_object_keys(account_move_line.analytic_distribution), '\\d+', 'g'))[1]::int as account_id\\\"\\\"\\\"\n    )\n    query_string = f\\\"\\\"\\\"\n        SELECT account_id, count(move_id) FROM\n        ({query_string}) distribution\n        GROUP BY account_id\n    \\\"\\\"\\\"\n\n    self._cr.execute(query_string, query_param)\n    data = {res['account_id']: res['count'] for res in self._cr.dictfetchall()}\n    for account in self:\n        account.invoice_count = data.get(account.id, 0)\n\n", "CodeBleu_score": 34.875998307487876}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\tself.ensure_one()\n    query = self.env['account.move.line']._search([('move_id.move_type', 'in', self.env['account.move'].get_purchase_types())])\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(self.id)],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n    query_string, query_param = query.select('DISTINCT account_move_line.move_id')\n    self._cr.execute(query_string, query_param)\n    move_ids = [line.get('move_id') for line in self._cr.dictfetchall()]\n    result = {\n        'type': 'ir.actions.act_window',\n        'res_model': 'account.move',\n        'domain': [('id', 'in', move_ids)],\n        'context': {'create': False, 'default_move_type': 'in_invoice'},\n        'name': _('Vendor Bills'),\n        'view_mode': 'tree,form',\n    }\n    return result", "CodeBleu_score": 72.5067482953261}, {"code": "def action_view_vendor_bill(self)\n\tself.ensure_one()\n    query = self.env['account.move.line']._search([('move_id.move_type', 'in', self.env['account.move'].get_purchase_types())])\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(self.id)],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n    query_string, query_param = query.select('DISTINCT account_move_line.move_id')\n    self._cr.execute(query_string, query_param)\n    move_ids = [line.get('move_id') for line in self._cr.dictfetchall()]\n    result = {\n        'type': 'ir.actions.act_window',\n        'res_model': 'account.move',\n        'domain': [('id', 'in', move_ids)],\n        'context': {'create': False, 'default_move_type': 'in_invoice'},\n        'name': _('Vendor Bills'),\n        'view_mode': 'tree,form',\n    }\n    return result\n\n", "CodeBleu_score": 72.5067482953261}, {"code": "def action_view_vendor_bill(self)\n\tself.ensure_one()\n    query = self.env['account.move.line']._search([('move_id.move_type', 'in', self.env['account.move'].get_purchase_types())])\n    query.add_where(SQL(\"\"\"%s && %s\"\"\", [str(self.id)], self.env['account.move.line']._query_analytic_accounts()))\n    query_string, query_param = query.select('DISTINCT account_move_line.move_id')\n    self._cr.execute(query_string, query_param)\n    move_ids = [line.get('move_id') for line in self._cr.dictfetchall()]\n    result = {\n        \"type\": \"ir.actions.act_window\",\n        \"res_model\": \"account.move\",\n        \"domain\": [('id', 'in', move_ids)],\n        \"context\": {\"create\": False, 'default_move_type': 'in_invoice'},\n        \"name\": _(\"Vendor Bills\"),\n        'view_mode': 'tree,form',\n    }\n    return result", "CodeBleu_score": 74.32004997638096}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\tn                description = _(\\\"The running balance (%s) doesn't match the specified ending balance.\\\", formatLang(self.env, stmt.balance_end, currency_obj=stmt.currency_id))\n            stmt.problem_description = description\n\n    def _search_is_valid(self, operator, value):\n        if operator not in ('=', '!=', '<>'):\n            raise UserError(_('Operation not supported'))\n        invalid_ids = self._get_invalid_statement_ids(all_statements=True)\n        if operator in ('!=', '<>') and value or operator == '=' and not value:\n            return [('id', 'in', invalid_ids)]\n        return [('id', 'not in', invalid_ids)]\n\n    # -------------------------------------------------------------------------\n    # BUSINESS METHODS\n    # -------------------------------------------------------------------------\n    def _get_statement_validity(self):\n        \\\"\\\"\\\" Compares the balance_start to the previous statements balance_end_real \\\"\\\"\\\"\n        self.ensure_one()\n        previous = self.env['account.bank.statement'].search(\n            [\n                ('first_line_index', '<', self.first_line_index),\n                ('journal_id', '=', self.journal_id.id),\n            ],\n            limit=1,\n            order='first_line_index DESC',\n        )\n        return not previous or self.currency_id.compare_amounts(self.balance_start, previous.balance_end_real) == 0\n\n    def _get_invalid_statement_ids(self, all_statements=None):\n        \\\"\\\"\\\" Returns the statements that are invalid for _compute and _search methods.\\\"\\\"\\\"\n\n        self.env['account.bank.statement.line'].flush_model(['statement_id', 'internal_index'])\n        self.env['account.bank.statement'].flush_model(['balance_start', 'balance_end_real', 'first_line_index'])\n\n        self.env.cr.execute(f\\\"\\\"\\\"\n            SELECT st.id\n              FROM account_bank_statement st\n         LEFT JOIN res_company co ON st.company_id = co.id\n         LEFT JOIN account_journal j ON st.journal_id = j.id\n         LEFT JOIN res_currency currency ON COALESCE(j.currency_id, co.currency_id) = currency.id,\n                   LATERAL (\n                       SELECT balance_end_real\n                         FROM account_bank_statement st_lookup\n                        WHERE st_lookup.first_line_index < st.first_line_index\n                          AND st_lookup.journal_id = st.journal_id\n                     ORDER BY st_lookup.first_line_index desc\n                        LIMIT 1\n                   ) prev\n             WHERE ROUND(prev.balance_end_real, currency.decimal_places) != ROUND(st.balance_start, currency.decimal_places)\n               {\\\"\\\" if all_statements else \\\"AND st.id IN %(ids)s\\\"}\n        \\\"\\\"\\\", {\n            'ids': tuple(self.ids)\n        })\n        res = self.env.cr.fetchall()\n        return [r[0] for r in res]\n\n    # -------------------------------------------------------------------------\n    # LOW-LEVEL METHODS\n    # -------------------------------------------------------------------------\n\n    @api.model\n    def default_get(self, fields_list):\n        # EXTENDS base\n        defaults = super().default_get(fields_list)\n\n        if 'line_ids' not in fields_list:\n            return defaults\n\n        active_ids = self._context.get('active_ids', [])\n        context_split_line_id = self._context.get('split_line_id')\n        context_st_line_id = self._context.get('st_line_id')\n        lines = None\n        # creating statements with split button\n        if context_split_line_id:\n            current_st_line = self.env['account.bank.statement.line'].browse(context_split_line_id)\n            line_before = self.env['account.bank.statement.line'].search(\n                domain=[\n                    ('internal_index', '<', current_st_line.internal_index),\n                    ('journal_id', '=', current_st_line.journal_id.id),\n                    ('statement_id', '!=', current_st_line.statement_id.id),\n                    ('statement_id', '!=', False),\n                ],\n                order='internal_index desc',\n                limit=1,\n            )\n            lines = self.env['account.bank.statement.line'].search(\n                domain=[\n                    ('internal_index', '<=', current_st_line.internal_index),\n                    ('internal_index', '>', line_before.internal_index or ''),\n                    ('journal_id', '=', current_st_line.journal_id.id),\n                ],\n                order='internal_index desc',\n            )\n        # single line edit\n        elif context_st_line_id and len(active_ids) <= 1:\n            lines = self.env['account.bank.statement.line'].browse(context_st_line_id)\n        # multi edit\n        elif context_st_line_id and len(active_ids) > 1:\n            lines = self.env['account.bank.statement.line'].browse(active_ids).sorted()\n            if len(lines.journal_id) > 1:\n                raise UserError(_(\\\"A statement should only contain lines from the same journal.\\\"))\n            # Check that the selected lines are contiguous\n            indexes = lines.mapped('internal_index')\n            count_lines_between = self.env['account.bank.statement.line'].search_count([\n                ('internal_index', '>=', min(indexes)),\n                ('internal_index', '<=', max(indexes)),\n                ('journal_id', '=', lines.journal_id.id),\n            ])\n            if len(lines) != count_lines_between:\n                raise UserError(_(\\\"Unable to create a statement due to missing transactions. You may want to reorder the transactions before proceeding.\\\"))\n\n        if lines:\n            defaults['line_ids'] = [Command.set(lines.ids)]\n\n        return defaults\n\n    @contextmanager\n    def _check_attachments(self, container, values_list):\n        attachments_to_fix_list = []\n        for values in values_list:\n            attachment_ids = set()\n            for orm_command in values.get('attachment_ids', []):\n                if orm_command[0] == Command.LINK:\n                    attachment_ids.add(orm_command[1])\n                elif orm_command[0] == Command.SET:\n                    for attachment_id in orm_command[2]:\n                        attachment_ids.add(attachment_id)\n\n            attachments = self.env['ir.attachment'].browse(list(attachment_ids))\n            attachments_to_fix_list.append(attachments)\n\n        yield\n\n        for stmt, attachments in zip(container['records'], attachments_to_fix_list):\n            attachments.write({'res_id': stmt.id, 'res_model': stmt._name})\n\n    @api.model_create_multi\n    def create(self, vals_list):\n        container = {'records': self.env['account.bank.statement']}\n        with self._check_attachments(container, vals_list):\n            container['records'] = stmts = super().create(vals_list)\n        return stmts\n\n\n\n", "CodeBleu_score": 34.280810370813256}, {"code": "def write(self, values)\n\tn                description = _(\\\"The running balance (%s) doesn't match the specified ending balance.\\\", formatLang(self.env, stmt.balance_end, currency_obj=stmt.currency_id))\n            stmt.problem_description = description\n\n    def _search_is_valid(self, operator, value):\n        if operator not in ('=', '!=', '<>'):\n            raise UserError(_('Operation not supported'))\n        invalid_ids = self._get_invalid_statement_ids(all_statements=True)\n        if operator in ('!=', '<>') and value or operator == '=' and not value:\n            return [('id', 'in', invalid_ids)]\n        return [('id', 'not in', invalid_ids)]\n\n    # -------------------------------------------------------------------------\n    # BUSINESS METHODS\n    # -------------------------------------------------------------------------\n    def _get_statement_validity(self):\n        \\\"\\\"\\\" Compares the balance_start to the previous statements balance_end_real \\\"\\\"\\\"\n        self.ensure_one()\n        previous = self.env['account.bank.statement'].search(\n            [\n                ('first_line_index', '<', self.first_line_index),\n                ('journal_id', '=', self.journal_id.id),\n            ],\n            limit=1,\n            order='first_line_index DESC',\n        )\n        return not previous or self.currency_id.compare_amounts(self.balance_start, previous.balance_end_real) == 0\n\n    def _get_invalid_statement_ids(self, all_statements=None):\n        \\\"\\\"\\\" Returns the statements that are invalid for _compute and _search methods.\\\"\\\"\\\"\n\n        self.env['account.bank.statement.line'].flush_model(['statement_id', 'internal_index'])\n        self.env['account.bank.statement'].flush_model(['balance_start', 'balance_end_real', 'first_line_index'])\n\n        self.env.cr.execute(f\\\"\\\"\\\"\n            SELECT st.id\n              FROM account_bank_statement st\n         LEFT JOIN res_company co ON st.company_id = co.id\n         LEFT JOIN account_journal j ON st.journal_id = j.id\n         LEFT JOIN res_currency currency ON COALESCE(j.currency_id, co.currency_id) = currency.id,\n                   LATERAL (\n                       SELECT balance_end_real\n                         FROM account_bank_statement st_lookup\n                        WHERE st_lookup.first_line_index < st.first_line_index\n                          AND st_lookup.journal_id = st.journal_id\n                     ORDER BY st_lookup.first_line_index desc\n                        LIMIT 1\n                   ) prev\n             WHERE ROUND(prev.balance_end_real, currency.decimal_places) != ROUND(st.balance_start, currency.decimal_places)\n               {\\\"\\\" if all_statements else \\\"AND st.id IN %(ids)s\\\"}\n        \\\"\\\"\\\", {\n            'ids': tuple(self.ids)\n        })\n        res = self.env.cr.fetchall()\n        return [r[0] for r in res]\n\n    # -------------------------------------------------------------------------\n    # LOW-LEVEL METHODS\n    # -------------------------------------------------------------------------\n\n    @api.model\n    def default_get(self, fields_list):\n        # EXTENDS base\n        defaults = super().default_get(fields_list)\n\n        if 'line_ids' not in fields_list:\n            return defaults\n\n        active_ids = self._context.get('active_ids', [])\n        context_split_line_id = self._context.get('split_line_id')\n        context_st_line_id = self._context.get('st_line_id')\n        lines = None\n        # creating statements with split button\n        if context_split_line_id:\n            current_st_line = self.env['account.bank.statement.line'].browse(context_split_line_id)\n            line_before = self.env['account.bank.statement.line'].search(\n                domain=[\n                    ('internal_index', '<', current_st_line.internal_index),\n                    ('journal_id', '=', current_st_line.journal_id.id),\n                    ('statement_id', '!=', current_st_line.statement_id.id),\n                    ('statement_id', '!=', False),\n                ],\n                order='internal_index desc',\n                limit=1,\n            )\n            lines = self.env['account.bank.statement.line'].search(\n                domain=[\n                    ('internal_index', '<=', current_st_line.internal_index),\n                    ('internal_index', '>', line_before.internal_index or ''),\n                    ('journal_id', '=', current_st_line.journal_id.id),\n                ],\n                order='internal_index desc',\n            )\n        # single line edit\n        elif context_st_line_id and len(active_ids) <= 1:\n            lines = self.env['account.bank.statement.line'].browse(context_st_line_id)\n        # multi edit\n        elif context_st_line_id and len(active_ids) > 1:\n            lines = self.env['account.bank.statement.line'].browse(active_ids).sorted()\n            if len(lines.journal_id) > 1:\n                raise UserError(_(\\\"A statement should only contain lines from the same journal.\\\"))\n            # Check that the selected lines are contiguous\n            indexes = lines.mapped('internal_index')\n            count_lines_between = self.env['account.bank.statement.line'].search_count([\n                ('internal_index', '>=', min(indexes)),\n                ('internal_index', '<=', max(indexes)),\n                ('journal_id', '=', lines.journal_id.id),\n            ])\n            if len(lines) != count_lines_between:\n                raise UserError(_(\\\"Unable to create a statement due to missing transactions. You may want to reorder the transactions before proceeding.\\\"))\n\n        if lines:\n            defaults['line_ids'] = [Command.set(lines.ids)]\n\n        return defaults\n\n    @contextmanager\n    def _check_attachments(self, container, values_list):\n        attachments_to_fix_list = []\n        for values in values_list:\n            attachment_ids = set()\n            for orm_command in values.get('attachment_ids', []):\n                if orm_command[0] == Command.LINK:\n                    attachment_ids.add(orm_command[1])\n                elif orm_command[0] == Command.SET:\n                    for attachment_id in orm_command[2]:\n                        attachment_ids.add(attachment_id)\n\n            attachments = self.env['ir.attachment'].browse(list(attachment_ids))\n            attachments_to_fix_list.append(attachments)\n\n        yield\n\n        for stmt, attachments in zip(container['records'], attachments_to_fix_list):\n            attachments.write({'res_id': stmt.id, 'res_model': stmt._name})\n\n    @api.model_create_multi\n    def create(self, vals_list):\n        container = {'records': self.env['account.bank.statement']}\n        with self._check_attachments(container, vals_list):\n            container['records'] = stmts = super().create(vals_list)\n        return stmts\n\n\n\n", "CodeBleu_score": 34.280810370813256}, {"code": "def write(self, values)\n\tn                description = _(\\\"The running balance (%s) doesn't match the specified ending balance.\\\", formatLang(self.env, stmt.balance_end, currency_obj=stmt.currency_id))\n            stmt.problem_description = description\n\n    def _search_is_valid(self, operator, value):\n        if operator not in ('=', '!=', '<>'):\n            raise UserError(_('Operation not supported'))\n        invalid_ids = self._get_invalid_statement_ids(all_statements=True)\n        if operator in ('!=', '<>') and value or operator == '=' and not value:\n            return [('id', 'in', invalid_ids)]\n        return [('id', 'not in', invalid_ids)]\n\n    # -------------------------------------------------------------------------\n    # BUSINESS METHODS\n    # -------------------------------------------------------------------------\n    def _get_statement_validity(self):\n        \\\"\\\"\\\" Compares the balance_start to the previous statements balance_end_real \\\"\\\"\\\"\n        self.ensure_one()\n        previous = self.env['account.bank.statement'].search(\n            [\n                ('first_line_index', '<', self.first_line_index),\n                ('journal_id', '=', self.journal_id.id),\n            ],\n            limit=1,\n            order='first_line_index DESC',\n        )\n        return not previous or self.currency_id.compare_amounts(self.balance_start, previous.balance_end_real) == 0\n\n    def _get_invalid_statement_ids(self, all_statements=None):\n        \\\"\\\"\\\" Returns the statements that are invalid for _compute and _search methods.\\\"\\\"\\\"\n\n        self.env['account.bank.statement.line'].flush_model(['statement_id', 'internal_index'])\n        self.env['account.bank.statement'].flush_model(['balance_start', 'balance_end_real', 'first_line_index'])\n\n        self.env.cr.execute(f\\\"\\\"\\\"\n            SELECT st.id\n              FROM account_bank_statement st\n         LEFT JOIN res_company co ON st.company_id = co.id\n         LEFT JOIN account_journal j ON st.journal_id = j.id\n         LEFT JOIN res_currency currency ON COALESCE(j.currency_id, co.currency_id) = currency.id,\n                   LATERAL (\n                       SELECT balance_end_real\n                         FROM account_bank_statement st_lookup\n                        WHERE st_lookup.first_line_index < st.first_line_index\n                          AND st_lookup.journal_id = st.journal_id\n                     ORDER BY st_lookup.first_line_index desc\n                        LIMIT 1\n                   ) prev\n             WHERE ROUND(prev.balance_end_real, currency.decimal_places) != ROUND(st.balance_start, currency.decimal_places)\n               {\\\"\\\" if all_statements else \\\"AND st.id IN %(ids)s\\\"}\n        \\\"\\\"\\\", {\n            'ids': tuple(self.ids)\n        })\n        res = self.env.cr.fetchall()\n        return [r[0] for r in res]\n\n    # -------------------------------------------------------------------------\n    # LOW-LEVEL METHODS\n    # -------------------------------------------------------------------------\n\n    @api.model\n    def default_get(self, fields_list):\n        # EXTENDS base\n        defaults = super().default_get(fields_list)\n\n        if 'line_ids' not in fields_list:\n            return defaults\n\n        active_ids = self._context.get('active_ids', [])\n        context_split_line_id = self._context.get('split_line_id')\n        context_st_line_id = self._context.get('st_line_id')\n        lines = None\n        # creating statements with split button\n        if context_split_line_id:\n            current_st_line = self.env['account.bank.statement.line'].browse(context_split_line_id)\n            line_before = self.env['account.bank.statement.line'].search(\n                domain=[\n                    ('internal_index', '<', current_st_line.internal_index),\n                    ('journal_id', '=', current_st_line.journal_id.id),\n                    ('statement_id', '!=', current_st_line.statement_id.id),\n                    ('statement_id', '!=', False),\n                ],\n                order='internal_index desc',\n                limit=1,\n            )\n            lines = self.env['account.bank.statement.line'].search(\n                domain=[\n                    ('internal_index', '<=', current_st_line.internal_index),\n                    ('internal_index', '>', line_before.internal_index or ''),\n                    ('journal_id', '=', current_st_line.journal_id.id),\n                ],\n                order='internal_index desc',\n            )\n        # single line edit\n        elif context_st_line_id and len(active_ids) <= 1:\n            lines = self.env['account.bank.statement.line'].browse(context_st_line_id)\n        # multi edit\n        elif context_st_line_id and len(active_ids) > 1:\n            lines = self.env['account.bank.statement.line'].browse(active_ids).sorted()\n            if len(lines.journal_id) > 1:\n                raise UserError(_(\\\"A statement should only contain lines from the same journal.\\\"))\n            # Check that the selected lines are contiguous\n            indexes = lines.mapped('internal_index')\n            count_lines_between = self.env['account.bank.statement.line'].search_count([\n                ('internal_index', '>=', min(indexes)),\n                ('internal_index', '<=', max(indexes)),\n                ('journal_id', '=', lines.journal_id.id),\n            ])\n            if len(lines) != count_lines_between:\n                raise UserError(_(\\\"Unable to create a statement due to missing transactions. You may want to reorder the transactions before proceeding.\\\"))\n\n        if lines:\n            defaults['line_ids'] = [Command.set(lines.ids)]\n\n        return defaults\n\n    @contextmanager\n    def _check_attachments(self, container, values_list):\n        attachments_to_fix_list = []\n        for values in values_list:\n            attachment_ids = set()\n            for orm_command in values.get('attachment_ids', []):\n                if orm_command[0] == Command.LINK:\n                    attachment_ids.add(orm_command[1])\n                elif orm_command[0] == Command.SET:\n                    for attachment_id in orm_command[2]:\n                        attachment_ids.add(attachment_id)\n\n            attachments = self.env['ir.attachment'].browse(list(attachment_ids))\n            attachments_to_fix_list.append(attachments)\n\n        yield\n\n        for stmt, attachments in zip(container['records'], attachments_to_fix_list):\n            attachments.write({'res_id': stmt.id, 'res_model': stmt._name})\n\n    @api.model_create_multi\n    def create(self, vals_list):\n        container = {'records': self.env['account.bank.statement']}\n        with self._check_attachments(container, vals_list):\n            container['records'] = stmts = super().create(vals_list)\n        return stmts\n\n\n\n", "CodeBleu_score": 34.280810370813256}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\tzero(st_line.amount_residual)\n            elif st_line.currency_id.is_zero(st_line.amount):\n                st_line.is_reconciled = True\n            else:\n                # The journal entry seems reconciled.\n                st_line.is_reconciled = True\n\n\n    # -------------------------------------------------------------------------\n    # CONSTRAINT METHODS\n    # -------------------------------------------------------------------------\n\n    @api.constrains('amount', 'amount_currency', 'currency_id', 'foreign_currency_id', 'journal_id')\n    def _check_amounts_currencies(self):\n        \\\"\\\"\\\" Ensure the consistency the specified amounts and the currencies. \\\"\\\"\\\"\n\n        for st_line in self:\n            if st_line.foreign_currency_id == st_line.currency_id:\n                raise ValidationError(_(\\\"The foreign currency must be different than the journal one: %s\\\",\n                                        st_line.currency_id.name))\n            if not st_line.foreign_currency_id and st_line.amount_currency:\n                raise ValidationError(_(\\\"You can't provide an amount in foreign currency without \\\"\n                                        \\\"specifying a foreign currency.\\\"))\n            if not st_line.amount_currency and st_line.foreign_currency_id:\n                raise ValidationError(_(\\\"You can't provide a foreign currency without specifying an amount in \\\"\n                                        \\\"'Amount in Currency' field.\\\"))\n\n    # -------------------------------------------------------------------------\n    # LOW-LEVEL METHODS\n    # -------------------------------------------------------------------------\n\n    def new(self, values=None, origin=None, ref=None):\n        st_line = super().new(values, origin, ref)\n        if not st_line.journal_id:  # might not be computed because declared by inheritance\n            st_line.move_id._compute_journal_id()\n        return st_line\n\n    @api.model_create_multi\n    def create(self, vals_list):\n        # OVERRIDE\n        counterpart_account_ids = []\n\n        for vals in vals_list:\n            if 'statement_id' in vals and 'journal_id' not in vals:\n                statement = self.env['account.bank.statement'].browse(vals['statement_id'])\n                # Ensure the journal is the same as the statement one.\n                # journal_id is a required field in the view, so it should be always available if the user\n                # is creating the record, however, if a sync/import modules tries to add a line to an existing\n                # statement they can omit the journal field because it can be obtained from the statement\n                if statement.journal_id:\n                    vals['journal_id'] = statement.journal_id.id\n\n            # Avoid having the same foreign_currency_id as currency_id.\n            if vals.get('journal_id') and vals.get('foreign_currency_id'):\n                journal = self.env['account.journal'].browse(vals['journal_id'])\n                journal_currency = journal.currency_id or journal.company_id.currency_id\n                if vals['foreign_currency_id'] == journal_currency.id:\n                    vals['foreign_currency_id'] = None\n                    vals['amount_currency'] = 0.0\n\n            # Force the move_type to avoid inconsistency with residual 'default_move_type' inside the context.\n            vals['move_type'] = 'entry'\n\n            # Hack to force different account instead of the suspense account.\n            counterpart_account_ids.append(vals.pop('counterpart_account_id', None))\n\n            #Set the amount to 0 if it's not specified.\n            if 'amount' not in vals:\n                vals['amount'] = 0\n\n        st_lines = super().create(vals_list)\n\n        for i, st_line in enumerate(st_lines):\n            counterpart_account_id = counterpart_account_ids[i]\n\n            to_write = {'statement_line_id': st_line.id, 'narration': st_line.narration}\n            if 'line_ids' not in vals_list[i]:\n                to_write['line_ids'] = [(0, 0, line_vals) for line_vals in st_line._prepare_move_line_default_vals(\n                    counterpart_account_id=counterpart_account_id)]\n\n            st_line.move_id.write(to_write)\n\n            # Otherwise field narration will be recomputed silently (at next flush) when writing on partner_id\n            self.env.remove_to_compute(st_line.move_id._fields['narration'], st_line.move_id)\n\n        # No need for the user to manage their status (from 'Draft' to 'Posted')\n        st_lines.move_id.action_post()\n        return st_lines\n\n    def write(self, vals):\n        # OVERRIDE\n\n        res = super().write(vals)\n        self._synchronize_to_moves(set(vals.keys()))\n        return res\n\n    def unlink(self):\n        # OVERRIDE to unlink the inherited account.move (move_id field) as well.\n        moves = self.with_context(force_delete=True).mapped('move_id')\n        res = super().unlink()\n        moves.unlink()\n        return res\n\n    @api.model\n    def read_group(self, domain, fields, groupby, offset=0, limit=None, orderby=False, lazy=True):\n        # Add latest running_balance in the read_group\n        result = super(AccountBankStatementLine, self).read_group(\n            domain, fields, groupby, offset=offset,\n            limit=limit, orderby=orderby, lazy=lazy)\n        show_running_balance = False\n        # We loop over the content of groupby because the groupby date is in the form of \\\"date:granularity\\\"\n        for el in groupby:\n            if (el == 'statement_id' or el == 'journal_id' or el.startswith('date')) and 'running_balance' in fields:\n                show_running_balance = True\n                break\n        if show_running_balance:\n            for group_line in result:\n                group_line['running_balance'] = self.search(group_line.get('__domain'), limit=1).running_balance or 0.0\n        return result\n\n    # -------------------------------------------------------------------------\n    # ACTION METHODS\n    # -------------------------------------------------------------------------\n\n    def action_undo_reconciliation(self):\n        \\\"\\\"\\\" Undo the reconciliation made on the statement line and reset their journal items\n        to their original states.\n        \\\"\\\"\\\"\n        self.line_ids.remove_move_reconcile()\n        self.payment_ids.unlink()\n\n        for st_line in self:\n            st_line.with_context(force_delete=True).write({\n                'to_check': False,\n                'line_ids': [Command.clear()] + [\n                    Command.create(line_vals) for line_vals in st_line._prepare_move_line_default_vals()],\n            })\n\n    # -------------------------------------------------------------------------\n    # HELPERS\n    # -------------------------------------------------------------------------\n\n\n\n", "CodeBleu_score": 24.433763849051683}, {"code": "def _find_or_create_bank_account(self)\n\tzero(st_line.amount_residual)\n            elif st_line.currency_id.is_zero(st_line.amount):\n                st_line.is_reconciled = True\n            else:\n                # The journal entry seems reconciled.\n                st_line.is_reconciled = True\n\n\n    # -------------------------------------------------------------------------\n    # CONSTRAINT METHODS\n    # -------------------------------------------------------------------------\n\n    @api.constrains('amount', 'amount_currency', 'currency_id', 'foreign_currency_id', 'journal_id')\n    def _check_amounts_currencies(self):\n        \\\"\\\"\\\" Ensure the consistency the specified amounts and the currencies. \\\"\\\"\\\"\n\n        for st_line in self:\n            if st_line.foreign_currency_id == st_line.currency_id:\n                raise ValidationError(_(\\\"The foreign currency must be different than the journal one: %s\\\",\n                                        st_line.currency_id.name))\n            if not st_line.foreign_currency_id and st_line.amount_currency:\n                raise ValidationError(_(\\\"You can't provide an amount in foreign currency without \\\"\n                                        \\\"specifying a foreign currency.\\\"))\n            if not st_line.amount_currency and st_line.foreign_currency_id:\n                raise ValidationError(_(\\\"You can't provide a foreign currency without specifying an amount in \\\"\n                                        \\\"'Amount in Currency' field.\\\"))\n\n    # -------------------------------------------------------------------------\n    # LOW-LEVEL METHODS\n    # -------------------------------------------------------------------------\n\n    def new(self, values=None, origin=None, ref=None):\n        st_line = super().new(values, origin, ref)\n        if not st_line.journal_id:  # might not be computed because declared by inheritance\n            st_line.move_id._compute_journal_id()\n        return st_line\n\n    @api.model_create_multi\n    def create(self, vals_list):\n        # OVERRIDE\n        counterpart_account_ids = []\n\n        for vals in vals_list:\n            if 'statement_id' in vals and 'journal_id' not in vals:\n                statement = self.env['account.bank.statement'].browse(vals['statement_id'])\n                # Ensure the journal is the same as the statement one.\n                # journal_id is a required field in the view, so it should be always available if the user\n                # is creating the record, however, if a sync/import modules tries to add a line to an existing\n                # statement they can omit the journal field because it can be obtained from the statement\n                if statement.journal_id:\n                    vals['journal_id'] = statement.journal_id.id\n\n            # Avoid having the same foreign_currency_id as currency_id.\n            if vals.get('journal_id') and vals.get('foreign_currency_id'):\n                journal = self.env['account.journal'].browse(vals['journal_id'])\n                journal_currency = journal.currency_id or journal.company_id.currency_id\n                if vals['foreign_currency_id'] == journal_currency.id:\n                    vals['foreign_currency_id'] = None\n                    vals['amount_currency'] = 0.0\n\n            # Force the move_type to avoid inconsistency with residual 'default_move_type' inside the context.\n            vals['move_type'] = 'entry'\n\n            # Hack to force different account instead of the suspense account.\n            counterpart_account_ids.append(vals.pop('counterpart_account_id', None))\n\n            #Set the amount to 0 if it's not specified.\n            if 'amount' not in vals:\n                vals['amount'] = 0\n\n        st_lines = super().create(vals_list)\n\n        for i, st_line in enumerate(st_lines):\n            counterpart_account_id = counterpart_account_ids[i]\n\n            to_write = {'statement_line_id': st_line.id, 'narration': st_line.narration}\n            if 'line_ids' not in vals_list[i]:\n                to_write['line_ids'] = [(0, 0, line_vals) for line_vals in st_line._prepare_move_line_default_vals(\n                    counterpart_account_id=counterpart_account_id)]\n\n            st_line.move_id.write(to_write)\n\n            # Otherwise field narration will be recomputed silently (at next flush) when writing on partner_id\n            self.env.remove_to_compute(st_line.move_id._fields['narration'], st_line.move_id)\n\n        # No need for the user to manage their status (from 'Draft' to 'Posted')\n        st_lines.move_id.action_post()\n        return st_lines\n\n    def write(self, vals):\n        # OVERRIDE\n\n        res = super().write(vals)\n        self._synchronize_to_moves(set(vals.keys()))\n        return res\n\n    def unlink(self):\n        # OVERRIDE to unlink the inherited account.move (move_id field) as well.\n        moves = self.with_context(force_delete=True).mapped('move_id')\n        res = super().unlink()\n        moves.unlink()\n        return res\n\n    @api.model\n    def read_group(self, domain, fields, groupby, offset=0, limit=None, orderby=False, lazy=True):\n        # Add latest running_balance in the read_group\n        result = super(AccountBankStatementLine, self).read_group(\n            domain, fields, groupby, offset=offset,\n            limit=limit, orderby=orderby, lazy=lazy)\n        show_running_balance = False\n        # We loop over the content of groupby because the groupby date is in the form of \\\"date:granularity\\\"\n        for el in groupby:\n            if (el == 'statement_id' or el == 'journal_id' or el.startswith('date')) and 'running_balance' in fields:\n                show_running_balance = True\n                break\n        if show_running_balance:\n            for group_line in result:\n                group_line['running_balance'] = self.search(group_line.get('__domain'), limit=1).running_balance or 0.0\n        return result\n\n    # -------------------------------------------------------------------------\n    # ACTION METHODS\n    # -------------------------------------------------------------------------\n\n    def action_undo_reconciliation(self):\n        \\\"\\\"\\\" Undo the reconciliation made on the statement line and reset their journal items\n        to their original states.\n        \\\"\\\"\\\"\n        self.line_ids.remove_move_reconcile()\n        self.payment_ids.unlink()\n\n        for st_line in self:\n            st_line.with_context(force_delete=True).write({\n                'to_check': False,\n                'line_ids': [Command.clear()] + [\n                    Command.create(line_vals) for line_vals in st_line._prepare_move_line_default_vals()],\n            })\n\n    # -------------------------------------------------------------------------\n    # HELPERS\n    # -------------------------------------------------------------------------\n\n\n\n", "CodeBleu_score": 24.433763849051683}, {"code": "def _find_or_create_bank_account(self)\n\tzero(st_line.amount_residual)\n            elif st_line.currency_id.is_zero(st_line.amount):\n                st_line.is_reconciled = True\n            else:\n                # The journal entry seems reconciled.\n                st_line.is_reconciled = True\n\n\n    # -------------------------------------------------------------------------\n    # CONSTRAINT METHODS\n    # -------------------------------------------------------------------------\n\n    @api.constrains('amount', 'amount_currency', 'currency_id', 'foreign_currency_id', 'journal_id')\n    def _check_amounts_currencies(self):\n        \\\"\\\"\\\" Ensure the consistency the specified amounts and the currencies. \\\"\\\"\\\"\n\n        for st_line in self:\n            if st_line.foreign_currency_id == st_line.currency_id:\n                raise ValidationError(_(\\\"The foreign currency must be different than the journal one: %s\\\",\n                                        st_line.currency_id.name))\n            if not st_line.foreign_currency_id and st_line.amount_currency:\n                raise ValidationError(_(\\\"You can't provide an amount in foreign currency without \\\"\n                                        \\\"specifying a foreign currency.\\\"))\n            if not st_line.amount_currency and st_line.foreign_currency_id:\n                raise ValidationError(_(\\\"You can't provide a foreign currency without specifying an amount in \\\"\n                                        \\\"'Amount in Currency' field.\\\"))\n\n    # -------------------------------------------------------------------------\n    # LOW-LEVEL METHODS\n    # -------------------------------------------------------------------------\n\n    def new(self, values=None, origin=None, ref=None):\n        st_line = super().new(values, origin, ref)\n        if not st_line.journal_id:  # might not be computed because declared by inheritance\n            st_line.move_id._compute_journal_id()\n        return st_line\n\n    @api.model_create_multi\n    def create(self, vals_list):\n        # OVERRIDE\n        counterpart_account_ids = []\n\n        for vals in vals_list:\n            if 'statement_id' in vals and 'journal_id' not in vals:\n                statement = self.env['account.bank.statement'].browse(vals['statement_id'])\n                # Ensure the journal is the same as the statement one.\n                # journal_id is a required field in the view, so it should be always available if the user\n                # is creating the record, however, if a sync/import modules tries to add a line to an existing\n                # statement they can omit the journal field because it can be obtained from the statement\n                if statement.journal_id:\n                    vals['journal_id'] = statement.journal_id.id\n\n            # Avoid having the same foreign_currency_id as currency_id.\n            if vals.get('journal_id') and vals.get('foreign_currency_id'):\n                journal = self.env['account.journal'].browse(vals['journal_id'])\n                journal_currency = journal.currency_id or journal.company_id.currency_id\n                if vals['foreign_currency_id'] == journal_currency.id:\n                    vals['foreign_currency_id'] = None\n                    vals['amount_currency'] = 0.0\n\n            # Force the move_type to avoid inconsistency with residual 'default_move_type' inside the context.\n            vals['move_type'] = 'entry'\n\n            # Hack to force different account instead of the suspense account.\n            counterpart_account_ids.append(vals.pop('counterpart_account_id', None))\n\n            #Set the amount to 0 if it's not specified.\n            if 'amount' not in vals:\n                vals['amount'] = 0\n\n        st_lines = super().create(vals_list)\n\n        for i, st_line in enumerate(st_lines):\n            counterpart_account_id = counterpart_account_ids[i]\n\n            to_write = {'statement_line_id': st_line.id, 'narration': st_line.narration}\n            if 'line_ids' not in vals_list[i]:\n                to_write['line_ids'] = [(0, 0, line_vals) for line_vals in st_line._prepare_move_line_default_vals(\n                    counterpart_account_id=counterpart_account_id)]\n\n            st_line.move_id.write(to_write)\n\n            # Otherwise field narration will be recomputed silently (at next flush) when writing on partner_id\n            self.env.remove_to_compute(st_line.move_id._fields['narration'], st_line.move_id)\n\n        # No need for the user to manage their status (from 'Draft' to 'Posted')\n        st_lines.move_id.action_post()\n        return st_lines\n\n    def write(self, vals):\n        # OVERRIDE\n\n        res = super().write(vals)\n        self._synchronize_to_moves(set(vals.keys()))\n        return res\n\n    def unlink(self):\n        # OVERRIDE to unlink the inherited account.move (move_id field) as well.\n        moves = self.with_context(force_delete=True).mapped('move_id')\n        res = super().unlink()\n        moves.unlink()\n        return res\n\n    @api.model\n    def read_group(self, domain, fields, groupby, offset=0, limit=None, orderby=False, lazy=True):\n        # Add latest running_balance in the read_group\n        result = super(AccountBankStatementLine, self).read_group(\n            domain, fields, groupby, offset=offset,\n            limit=limit, orderby=orderby, lazy=lazy)\n        show_running_balance = False\n        # We loop over the content of groupby because the groupby date is in the form of \\\"date:granularity\\\"\n        for el in groupby:\n            if (el == 'statement_id' or el == 'journal_id' or el.startswith('date')) and 'running_balance' in fields:\n                show_running_balance = True\n                break\n        if show_running_balance:\n            for group_line in result:\n                group_line['running_balance'] = self.search(group_line.get('__domain'), limit=1).running_balance or 0.0\n        return result\n\n    # -------------------------------------------------------------------------\n    # ACTION METHODS\n    # -------------------------------------------------------------------------\n\n    def action_undo_reconciliation(self):\n        \\\"\\\"\\\" Undo the reconciliation made on the statement line and reset their journal items\n        to their original states.\n        \\\"\\\"\\\"\n        self.line_ids.remove_move_reconcile()\n        self.payment_ids.unlink()\n\n        for st_line in self:\n            st_line.with_context(force_delete=True).write({\n                'to_check': False,\n                'line_ids': [Command.clear()] + [\n                    Command.create(line_vals) for line_vals in st_line._prepare_move_line_default_vals()],\n            })\n\n    # -------------------------------------------------------------------------\n    # HELPERS\n    # -------------------------------------------------------------------------\n\n\n\n", "CodeBleu_score": 24.433763849051683}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t# OVERRIDE\n\n        res = super().write(vals)\n        self._synchronize_to_moves(set(vals.keys()))\n        return res\n\n    def unlink(self):\n        # OVERRIDE to unlink the inherited account.move (move_id field) as well.\n        moves = self.with_context(force_delete=True).mapped('move_id')\n        res = super().unlink()\n        moves.unlink()\n        return res\n\n    @api.model\n    def read_group(self, domain, fields, groupby, offset=0, limit=None, orderby=False, lazy=True):\n        # Add latest running_balance in the read_group\n        result = super(AccountBankStatementLine, self).read_group(\n            domain, fields, groupby, offset=offset,\n            limit=limit, orderby=orderby, lazy=lazy)\n        show_running_balance = False\n        # We loop over the content of groupby because the groupby date is in the form of \\\"date:granularity\\\"\n        for el in groupby:\n            if (el == 'statement_id' or el == 'journal_id' or el.startswith('date')) and 'running_balance' in fields:\n                show_running_balance = True\n                break\n        if show_running_balance:\n            for group_line in result:\n                group_line['running_balance'] = self.search(group_line.get('__domain'), limit=1).running_balance or 0.0\n        return result\n\n    # -------------------------------------------------------------------------\n    # ACTION METHODS\n    # -------------------------------------------------------------------------\n\n    def action_undo_reconciliation(self):\n        \\\"\\\"\\\" Undo the reconciliation made on the statement line and reset their journal items\n        to their original states.\n        \\\"\\\"\\\"\n        self.line_ids.remove_move_reconcile()\n        self.payment_ids.unlink()\n\n        for st_line in self:\n            st_line.with_context(force_delete=True).write({\n                'to_check': False,\n                'line_ids': [Command.clear()] + [\n                    Command.create(line_vals) for line_vals in st_line._prepare_move_line_default_vals()],\n            })\n\n    # -------------------------------------------------------------------------\n    # HELPERS\n    # -------------------------------------------------------------------------\n\n    def _find_or_create_bank_account(self):\n        self.ensure_one()\n        if str2bool(self.env['ir.config_parameter'].sudo().get_param(\\\"account.skip_create_bank_account_on_reconcile\\\")):\n            return self.env['res.partner.bank']\n\n        # There is a sql constraint on res.partner.bank ensuring an unique pair <partner, account number>.\n        # Since it's not dependent of the company, we need to search on others company too to avoid the creation\n        # of an extra res.partner.bank raising an error coming from this constraint.\n        # However, at the end, we need to filter out the results to not trigger the check_company when trying to\n        # assign a res.partner.bank owned by another company.\n        bank_account = self.env['res.partner.bank'].sudo().with_context(active_test=False).search([\n            ('acc_number', '=', self.account_number),\n            ('partner_id', '=', self.partner_id.id),\n        ])\n        if not bank_account:\n            bank_account = self.env['res.partner.bank'].create({\n                'acc_number': self.account_number,\n                'partner_id': self.partner_id.id,\n                'journal_id': None,\n            })\n        return bank_account.filtered(lambda x: x.company_id in (False, self.company_id))\n\n    def _get_default_amls_matching_domain(self):\n        self.ensure_one()\n        all_reconcilable_account_ids = self.env['account.account'].search([\n            (\\\"company_id\\\", \\\"child_of\\\", self.company_id.root_id.id),\n            ('reconcile', '=', True),\n        ]).ids\n        return [\n            # Base domain.\n            ('display_type', 'not in', ('line_section', 'line_note')),\n            ('parent_state', '=', 'posted'),\n            ('company_id', 'child_of', self.company_id.root_id.id),\n            # Reconciliation domain.\n            ('reconciled', '=', False),\n            # Domain to use the account_move_line__unreconciled_index\n            ('account_id', 'in', all_reconcilable_account_ids),\n            # Special domain for payments.\n            '|',\n            ('account_id.account_type', 'not in', ('asset_receivable', 'liability_payable')),\n            ('payment_id', '=', False),\n            # Special domain for statement lines.\n            ('statement_line_id', '!=', self.id),\n        ]\n\n    @api.model\n    def _get_default_journal(self):\n        journal_type = self.env.context.get('journal_type', 'bank')\n        return self.env['account.journal'].search([\n                *self.env['account.journal']._check_company_domain(self.env.company),\n                ('type', '=', journal_type),\n            ], limit=1)\n\n    @api.model\n    def _get_default_statement(self, journal_id=None, date=None):\n        statement = self.search(\n            domain=[\n                ('journal_id', '=', journal_id or self._get_default_journal().id),\n                ('date', '<=', date or fields.Date.today()),\n            ],\n            limit=1\n        ).statement_id\n        if not statement.is_complete:\n            return statement\n\n    def _get_accounting_amounts_and_currencies(self):\n        \\\"\\\"\\\" Retrieve the transaction amount, journal amount and the company amount with their corresponding currencies\n        from the journal entry linked to the statement line.\n        All returned amounts will be positive for an inbound transaction, negative for an outbound one.\n\n        :return: (\n            transaction_amount, transaction_currency,\n            journal_amount, journal_currency,\n            company_amount, company_currency,\n        )\n        \\\"\\\"\\\"\n        self.ensure_one()\n        liquidity_line, suspense_line, other_lines = self._seek_for_lines()\n        if suspense_line and not other_lines:\n            transaction_amount = -suspense_line.amount_currency\n            transaction_currency = suspense_line.currency_id\n        else:\n            # In case of to_check or partial reconciliation, we can't trust the suspense line.\n            transaction_amount = self.amount_currency if self.foreign_currency_id else self.amount\n            transaction_currency = self.foreign_currency_id or liquidity_line.currency_id\n        return (\n            transaction_amount,\n            transaction_currency,\n            sum(liquidity_line.mapped('amount_currency')),\n            liquidity_line.currency_id,\n            sum(liquidity_line.mapped('balance')),\n            liquidity_line.company_currency_id,\n        )\n\n\n\n", "CodeBleu_score": 22.306679279756}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t# OVERRIDE\n\n        res = super().write(vals)\n        self._synchronize_to_moves(set(vals.keys()))\n        return res\n\n    def unlink(self):\n        # OVERRIDE to unlink the inherited account.move (move_id field) as well.\n        moves = self.with_context(force_delete=True).mapped('move_id')\n        res = super().unlink()\n        moves.unlink()\n        return res\n\n    @api.model\n    def read_group(self, domain, fields, groupby, offset=0, limit=None, orderby=False, lazy=True):\n        # Add latest running_balance in the read_group\n        result = super(AccountBankStatementLine, self).read_group(\n            domain, fields, groupby, offset=offset,\n            limit=limit, orderby=orderby, lazy=lazy)\n        show_running_balance = False\n        # We loop over the content of groupby because the groupby date is in the form of \\\"date:granularity\\\"\n        for el in groupby:\n            if (el == 'statement_id' or el == 'journal_id' or el.startswith('date')) and 'running_balance' in fields:\n                show_running_balance = True\n                break\n        if show_running_balance:\n            for group_line in result:\n                group_line['running_balance'] = self.search(group_line.get('__domain'), limit=1).running_balance or 0.0\n        return result\n\n    # -------------------------------------------------------------------------\n    # ACTION METHODS\n    # -------------------------------------------------------------------------\n\n    def action_undo_reconciliation(self):\n        \\\"\\\"\\\" Undo the reconciliation made on the statement line and reset their journal items\n        to their original states.\n        \\\"\\\"\\\"\n        self.line_ids.remove_move_reconcile()\n        self.payment_ids.unlink()\n\n        for st_line in self:\n            st_line.with_context(force_delete=True).write({\n                'to_check': False,\n                'line_ids': [Command.clear()] + [\n                    Command.create(line_vals) for line_vals in st_line._prepare_move_line_default_vals()],\n            })\n\n    # -------------------------------------------------------------------------\n    # HELPERS\n    # -------------------------------------------------------------------------\n\n    def _find_or_create_bank_account(self):\n        self.ensure_one()\n        if str2bool(self.env['ir.config_parameter'].sudo().get_param(\\\"account.skip_create_bank_account_on_reconcile\\\")):\n            return self.env['res.partner.bank']\n\n        # There is a sql constraint on res.partner.bank ensuring an unique pair <partner, account number>.\n        # Since it's not dependent of the company, we need to search on others company too to avoid the creation\n        # of an extra res.partner.bank raising an error coming from this constraint.\n        # However, at the end, we need to filter out the results to not trigger the check_company when trying to\n        # assign a res.partner.bank owned by another company.\n        bank_account = self.env['res.partner.bank'].sudo().with_context(active_test=False).search([\n            ('acc_number', '=', self.account_number),\n            ('partner_id', '=', self.partner_id.id),\n        ])\n        if not bank_account:\n            bank_account = self.env['res.partner.bank'].create({\n                'acc_number': self.account_number,\n                'partner_id': self.partner_id.id,\n                'journal_id': None,\n            })\n        return bank_account.filtered(lambda x: x.company_id in (False, self.company_id))\n\n    def _get_default_amls_matching_domain(self):\n        self.ensure_one()\n        all_reconcilable_account_ids = self.env['account.account'].search([\n            (\\\"company_id\\\", \\\"child_of\\\", self.company_id.root_id.id),\n            ('reconcile', '=', True),\n        ]).ids\n        return [\n            # Base domain.\n            ('display_type', 'not in', ('line_section', 'line_note')),\n            ('parent_state', '=', 'posted'),\n            ('company_id', 'child_of', self.company_id.root_id.id),\n            # Reconciliation domain.\n            ('reconciled', '=', False),\n            # Domain to use the account_move_line__unreconciled_index\n            ('account_id', 'in', all_reconcilable_account_ids),\n            # Special domain for payments.\n            '|',\n            ('account_id.account_type', 'not in', ('asset_receivable', 'liability_payable')),\n            ('payment_id', '=', False),\n            # Special domain for statement lines.\n            ('statement_line_id', '!=', self.id),\n        ]\n\n    @api.model\n    def _get_default_journal(self):\n        journal_type = self.env.context.get('journal_type', 'bank')\n        return self.env['account.journal'].search([\n                *self.env['account.journal']._check_company_domain(self.env.company),\n                ('type', '=', journal_type),\n            ], limit=1)\n\n    @api.model\n    def _get_default_statement(self, journal_id=None, date=None):\n        statement = self.search(\n            domain=[\n                ('journal_id', '=', journal_id or self._get_default_journal().id),\n                ('date', '<=', date or fields.Date.today()),\n            ],\n            limit=1\n        ).statement_id\n        if not statement.is_complete:\n            return statement\n\n    def _get_accounting_amounts_and_currencies(self):\n        \\\"\\\"\\\" Retrieve the transaction amount, journal amount and the company amount with their corresponding currencies\n        from the journal entry linked to the statement line.\n        All returned amounts will be positive for an inbound transaction, negative for an outbound one.\n\n        :return: (\n            transaction_amount, transaction_currency,\n            journal_amount, journal_currency,\n            company_amount, company_currency,\n        )\n        \\\"\\\"\\\"\n        self.ensure_one()\n        liquidity_line, suspense_line, other_lines = self._seek_for_lines()\n        if suspense_line and not other_lines:\n            transaction_amount = -suspense_line.amount_currency\n            transaction_currency = suspense_line.currency_id\n        else:\n            # In case of to_check or partial reconciliation, we can't trust the suspense line.\n            transaction_amount = self.amount_currency if self.foreign_currency_id else self.amount\n            transaction_currency = self.foreign_currency_id or liquidity_line.currency_id\n        return (\n            transaction_amount,\n            transaction_currency,\n            sum(liquidity_line.mapped('amount_currency')),\n            liquidity_line.currency_id,\n            sum(liquidity_line.mapped('balance')),\n            liquidity_line.company_currency_id,\n        )\n\n\n\n", "CodeBleu_score": 22.306679279756}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t# OVERRIDE\n\n        res = super().write(vals)\n        self._synchronize_to_moves(set(vals.keys()))\n        return res\n\n    def unlink(self):\n        # OVERRIDE to unlink the inherited account.move (move_id field) as well.\n        moves = self.with_context(force_delete=True).mapped('move_id')\n        res = super().unlink()\n        moves.unlink()\n        return res\n\n    @api.model\n    def read_group(self, domain, fields, groupby, offset=0, limit=None, orderby=False, lazy=True):\n        # Add latest running_balance in the read_group\n        result = super(AccountBankStatementLine, self).read_group(\n            domain, fields, groupby, offset=offset,\n            limit=limit, orderby=orderby, lazy=lazy)\n        show_running_balance = False\n        # We loop over the content of groupby because the groupby date is in the form of \\\"date:granularity\\\"\n        for el in groupby:\n            if (el == 'statement_id' or el == 'journal_id' or el.startswith('date')) and 'running_balance' in fields:\n                show_running_balance = True\n                break\n        if show_running_balance:\n            for group_line in result:\n                group_line['running_balance'] = self.search(group_line.get('__domain'), limit=1).running_balance or 0.0\n        return result\n\n    # -------------------------------------------------------------------------\n    # ACTION METHODS\n    # -------------------------------------------------------------------------\n\n    def action_undo_reconciliation(self):\n        \\\"\\\"\\\" Undo the reconciliation made on the statement line and reset their journal items\n        to their original states.\n        \\\"\\\"\\\"\n        self.line_ids.remove_move_reconcile()\n        self.payment_ids.unlink()\n\n        for st_line in self:\n            st_line.with_context(force_delete=True).write({\n                'to_check': False,\n                'line_ids': [Command.clear()] + [\n                    Command.create(line_vals) for line_vals in st_line._prepare_move_line_default_vals()],\n            })\n\n    # -------------------------------------------------------------------------\n    # HELPERS\n    # -------------------------------------------------------------------------\n\n    def _find_or_create_bank_account(self):\n        self.ensure_one()\n        if str2bool(self.env['ir.config_parameter'].sudo().get_param(\\\"account.skip_create_bank_account_on_reconcile\\\")):\n            return self.env['res.partner.bank']\n\n        # There is a sql constraint on res.partner.bank ensuring an unique pair <partner, account number>.\n        # Since it's not dependent of the company, we need to search on others company too to avoid the creation\n        # of an extra res.partner.bank raising an error coming from this constraint.\n        # However, at the end, we need to filter out the results to not trigger the check_company when trying to\n        # assign a res.partner.bank owned by another company.\n        bank_account = self.env['res.partner.bank'].sudo().with_context(active_test=False).search([\n            ('acc_number', '=', self.account_number),\n            ('partner_id', '=', self.partner_id.id),\n        ])\n        if not bank_account:\n            bank_account = self.env['res.partner.bank'].create({\n                'acc_number': self.account_number,\n                'partner_id': self.partner_id.id,\n                'journal_id': None,\n            })\n        return bank_account.filtered(lambda x: x.company_id in (False, self.company_id))\n\n    def _get_default_amls_matching_domain(self):\n        self.ensure_one()\n        all_reconcilable_account_ids = self.env['account.account'].search([\n            (\\\"company_id\\\", \\\"child_of\\\", self.company_id.root_id.id),\n            ('reconcile', '=', True),\n        ]).ids\n        return [\n            # Base domain.\n            ('display_type', 'not in', ('line_section', 'line_note')),\n            ('parent_state', '=', 'posted'),\n            ('company_id', 'child_of', self.company_id.root_id.id),\n            # Reconciliation domain.\n            ('reconciled', '=', False),\n            # Domain to use the account_move_line__unreconciled_index\n            ('account_id', 'in', all_reconcilable_account_ids),\n            # Special domain for payments.\n            '|',\n            ('account_id.account_type', 'not in', ('asset_receivable', 'liability_payable')),\n            ('payment_id', '=', False),\n            # Special domain for statement lines.\n            ('statement_line_id', '!=', self.id),\n        ]\n\n    @api.model\n    def _get_default_journal(self):\n        journal_type = self.env.context.get('journal_type', 'bank')\n        return self.env['account.journal'].search([\n                *self.env['account.journal']._check_company_domain(self.env.company),\n                ('type', '=', journal_type),\n            ], limit=1)\n\n    @api.model\n    def _get_default_statement(self, journal_id=None, date=None):\n        statement = self.search(\n            domain=[\n                ('journal_id', '=', journal_id or self._get_default_journal().id),\n                ('date', '<=', date or fields.Date.today()),\n            ],\n            limit=1\n        ).statement_id\n        if not statement.is_complete:\n            return statement\n\n    def _get_accounting_amounts_and_currencies(self):\n        \\\"\\\"\\\" Retrieve the transaction amount, journal amount and the company amount with their corresponding currencies\n        from the journal entry linked to the statement line.\n        All returned amounts will be positive for an inbound transaction, negative for an outbound one.\n\n        :return: (\n            transaction_amount, transaction_currency,\n            journal_amount, journal_currency,\n            company_amount, company_currency,\n        )\n        \\\"\\\"\\\"\n        self.ensure_one()\n        liquidity_line, suspense_line, other_lines = self._seek_for_lines()\n        if suspense_line and not other_lines:\n            transaction_amount = -suspense_line.amount_currency\n            transaction_currency = suspense_line.currency_id\n        else:\n            # In case of to_check or partial reconciliation, we can't trust the suspense line.\n            transaction_amount = self.amount_currency if self.foreign_currency_id else self.amount\n            transaction_currency = self.foreign_currency_id or liquidity_line.currency_id\n        return (\n            transaction_amount,\n            transaction_currency,\n            sum(liquidity_line.mapped('amount_currency')),\n            liquidity_line.currency_id,\n            sum(liquidity_line.mapped('balance')),\n            liquidity_line.company_currency_id,\n        )\n\n\n\n", "CodeBleu_score": 22.306679279756}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\tn                'payment_method': pay_method,\n                'company_journals': {},\n            }\n            if values['mode'] == 'unique':\n                unique_electronic_ids.add(pay_method.id)\n            elif manage_providers and values['mode'] == 'electronic':\n                unique_electronic_ids.add(pay_method.id)\n                electronic_names.add(pay_method.code)\n\n        # Load the provider to manage 'electronic' payment methods.\n        providers_per_code = {}\n        if manage_providers:\n            providers = self.env['payment.provider'].sudo().search([\n                *self.env['payment.provider']._check_company_domain(self.company_id),\n                ('code', 'in', tuple(electronic_names)),\n            ])\n            for provider in providers:\n                providers_per_code.setdefault(provider.company_id.id, {}).setdefault(provider._get_code(), set()).add(provider.id)\n\n        # Collect the existing unique/electronic payment method lines.\n        if unique_electronic_ids:\n            fnames = ['payment_method_id', 'journal_id']\n            if manage_providers:\n                fnames.append('payment_provider_id')\n            self.env['account.payment.method.line'].flush_model(fnames=fnames)\n\n            self._cr.execute(\n                f'''\n                    SELECT\n                        apm.id,\n                        journal.company_id,\n                        journal.id,\n                        {'apml.payment_provider_id' if manage_providers else 'NULL'}\n                    FROM account_payment_method_line apml\n                    JOIN account_journal journal ON journal.id = apml.journal_id\n                    JOIN account_payment_method apm ON apm.id = apml.payment_method_id\n                    WHERE apm.id IN %s\n                ''',\n                [tuple(unique_electronic_ids)],\n            )\n            for pay_method_id, company_id, journal_id, provider_id in self._cr.fetchall():\n                values = method_information_mapping[pay_method_id]\n                is_electronic = manage_providers and values['mode'] == 'electronic'\n                if is_electronic:\n                    journal_ids = values['company_journals'].setdefault(company_id, {}).setdefault(provider_id, [])\n                else:\n                    journal_ids = values['company_journals'].setdefault(company_id, [])\n                journal_ids.append(journal_id)\n        return {\n            'pay_methods': pay_methods,\n            'manage_providers': manage_providers,\n            'method_information_mapping': method_information_mapping,\n            'providers_per_code': providers_per_code,\n        }\n\n    @api.depends('outbound_payment_method_line_ids', 'inbound_payment_method_line_ids')\n    def _compute_available_payment_method_ids(self):\n        \\\"\\\"\\\"\n        Compute the available payment methods id by respecting the following rules:\n            Methods of mode 'unique' cannot be used twice on the same company.\n            Methods of mode 'electronic' cannot be used twice on the same company for the same 'payment_provider_id'.\n            Methods of mode 'multi' can be duplicated on the same journal.\n        \\\"\\\"\\\"\n        results = self._get_journals_payment_method_information()\n        pay_methods = results['pay_methods']\n        manage_providers = results['manage_providers']\n        method_information_mapping = results['method_information_mapping']\n        providers_per_code = results['providers_per_code']\n\n        # Compute the candidates for each journal.\n        for journal in self:\n            commands = [Command.clear()]\n            company = journal.company_id\n\n            # Exclude the 'unique' / 'electronic' values that are already set on the journal.\n            protected_provider_ids = set()\n            protected_payment_method_ids = set()\n            for payment_type in ('inbound', 'outbound'):\n                lines = journal[f'{payment_type}_payment_method_line_ids']\n                for line in lines:\n                    if line.payment_method_id.id in method_information_mapping:\n                        protected_payment_method_ids.add(line.payment_method_id.id)\n                        if manage_providers and method_information_mapping.get(line.payment_method_id.id, {}).get('mode') == 'electronic':\n                            protected_provider_ids.add(line.payment_provider_id.id)\n\n            for pay_method in pay_methods:\n                values = method_information_mapping[pay_method.id]\n\n                # Get the domain of the journals on which the current method is usable.\n                method_domain = pay_method._get_payment_method_domain(pay_method.code)\n                if not journal.filtered_domain(method_domain):\n                    continue\n\n                if values['mode'] == 'unique':\n                    # 'unique' are linked to a single journal per company.\n                    already_linked_journal_ids = set(values['company_journals'].get(company.id, [])) - {journal._origin.id}\n                    if not already_linked_journal_ids and pay_method.id not in protected_payment_method_ids:\n                        commands.append(Command.link(pay_method.id))\n                elif manage_providers and values['mode'] == 'electronic':\n                    # 'electronic' are linked to a single journal per company per provider.\n                    for provider_id in providers_per_code.get(company.id, {}).get(pay_method.code, set()):\n                        already_linked_journal_ids = set(values['company_journals'].get(company.id, {}).get(provider_id, [])) - {journal._origin.id}\n                        if not already_linked_journal_ids and provider_id not in protected_provider_ids:\n                            commands.append(Command.link(pay_method.id))\n                elif values['mode'] == 'multi':\n                    # 'multi' are unlimited.\n                    commands.append(Command.link(pay_method.id))\n\n            journal.available_payment_method_ids = commands\n\n    @api.depends('type')\n    def _compute_default_account_type(self):\n        default_account_id_types = {\n            'bank': 'asset_cash',\n            'cash': 'asset_cash',\n            'sale': 'income%',\n            'purchase': 'expense%',\n        }\n\n        for journal in self:\n            journal.default_account_type = default_account_id_types.get(journal.type, '%')\n\n    @api.depends('type', 'currency_id')\n    def _compute_inbound_payment_method_line_ids(self):\n        for journal in self:\n            pay_method_line_ids_commands = [Command.clear()]\n            if journal.type in ('bank', 'cash'):\n                default_methods = journal._default_inbound_payment_methods()\n                pay_method_line_ids_commands += [Command.create({\n                    'name': pay_method.name,\n                    'payment_method_id': pay_method.id,\n                }) for pay_method in default_methods]\n            journal.inbound_payment_method_line_ids = pay_method_line_ids_commands\n\n    @api.depends('type', 'currency_id')\n\n\n", "CodeBleu_score": 60.60306941397917}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\tn                'payment_method': pay_method,\n                'company_journals': {},\n            }\n            if values['mode'] == 'unique':\n                unique_electronic_ids.add(pay_method.id)\n            elif manage_providers and values['mode'] == 'electronic':\n                unique_electronic_ids.add(pay_method.id)\n                electronic_names.add(pay_method.code)\n\n        # Load the provider to manage 'electronic' payment methods.\n        providers_per_code = {}\n        if manage_providers:\n            providers = self.env['payment.provider'].sudo().search([\n                *self.env['payment.provider']._check_company_domain(self.company_id),\n                ('code', 'in', tuple(electronic_names)),\n            ])\n            for provider in providers:\n                providers_per_code.setdefault(provider.company_id.id, {}).setdefault(provider._get_code(), set()).add(provider.id)\n\n        # Collect the existing unique/electronic payment method lines.\n        if unique_electronic_ids:\n            fnames = ['payment_method_id', 'journal_id']\n            if manage_providers:\n                fnames.append('payment_provider_id')\n            self.env['account.payment.method.line'].flush_model(fnames=fnames)\n\n            self._cr.execute(\n                f'''\n                    SELECT\n                        apm.id,\n                        journal.company_id,\n                        journal.id,\n                        {'apml.payment_provider_id' if manage_providers else 'NULL'}\n                    FROM account_payment_method_line apml\n                    JOIN account_journal journal ON journal.id = apml.journal_id\n                    JOIN account_payment_method apm ON apm.id = apml.payment_method_id\n                    WHERE apm.id IN %s\n                ''',\n                [tuple(unique_electronic_ids)],\n            )\n            for pay_method_id, company_id, journal_id, provider_id in self._cr.fetchall():\n                values = method_information_mapping[pay_method_id]\n                is_electronic = manage_providers and values['mode'] == 'electronic'\n                if is_electronic:\n                    journal_ids = values['company_journals'].setdefault(company_id, {}).setdefault(provider_id, [])\n                else:\n                    journal_ids = values['company_journals'].setdefault(company_id, [])\n                journal_ids.append(journal_id)\n        return {\n            'pay_methods': pay_methods,\n            'manage_providers': manage_providers,\n            'method_information_mapping': method_information_mapping,\n            'providers_per_code': providers_per_code,\n        }\n\n    @api.depends('outbound_payment_method_line_ids', 'inbound_payment_method_line_ids')\n    def _compute_available_payment_method_ids(self):\n        \\\"\\\"\\\"\n        Compute the available payment methods id by respecting the following rules:\n            Methods of mode 'unique' cannot be used twice on the same company.\n            Methods of mode 'electronic' cannot be used twice on the same company for the same 'payment_provider_id'.\n            Methods of mode 'multi' can be duplicated on the same journal.\n        \\\"\\\"\\\"\n        results = self._get_journals_payment_method_information()\n        pay_methods = results['pay_methods']\n        manage_providers = results['manage_providers']\n        method_information_mapping = results['method_information_mapping']\n        providers_per_code = results['providers_per_code']\n\n        # Compute the candidates for each journal.\n        for journal in self:\n            commands = [Command.clear()]\n            company = journal.company_id\n\n            # Exclude the 'unique' / 'electronic' values that are already set on the journal.\n            protected_provider_ids = set()\n            protected_payment_method_ids = set()\n            for payment_type in ('inbound', 'outbound'):\n                lines = journal[f'{payment_type}_payment_method_line_ids']\n                for line in lines:\n                    if line.payment_method_id.id in method_information_mapping:\n                        protected_payment_method_ids.add(line.payment_method_id.id)\n                        if manage_providers and method_information_mapping.get(line.payment_method_id.id, {}).get('mode') == 'electronic':\n                            protected_provider_ids.add(line.payment_provider_id.id)\n\n            for pay_method in pay_methods:\n                values = method_information_mapping[pay_method.id]\n\n                # Get the domain of the journals on which the current method is usable.\n                method_domain = pay_method._get_payment_method_domain(pay_method.code)\n                if not journal.filtered_domain(method_domain):\n                    continue\n\n                if values['mode'] == 'unique':\n                    # 'unique' are linked to a single journal per company.\n                    already_linked_journal_ids = set(values['company_journals'].get(company.id, [])) - {journal._origin.id}\n                    if not already_linked_journal_ids and pay_method.id not in protected_payment_method_ids:\n                        commands.append(Command.link(pay_method.id))\n                elif manage_providers and values['mode'] == 'electronic':\n                    # 'electronic' are linked to a single journal per company per provider.\n                    for provider_id in providers_per_code.get(company.id, {}).get(pay_method.code, set()):\n                        already_linked_journal_ids = set(values['company_journals'].get(company.id, {}).get(provider_id, [])) - {journal._origin.id}\n                        if not already_linked_journal_ids and provider_id not in protected_provider_ids:\n                            commands.append(Command.link(pay_method.id))\n                elif values['mode'] == 'multi':\n                    # 'multi' are unlimited.\n                    commands.append(Command.link(pay_method.id))\n\n            journal.available_payment_method_ids = commands\n\n    @api.depends('type')\n    def _compute_default_account_type(self):\n        default_account_id_types = {\n            'bank': 'asset_cash',\n            'cash': 'asset_cash',\n            'sale': 'income%',\n            'purchase': 'expense%',\n        }\n\n        for journal in self:\n            journal.default_account_type = default_account_id_types.get(journal.type, '%')\n\n    @api.depends('type', 'currency_id')\n    def _compute_inbound_payment_method_line_ids(self):\n        for journal in self:\n            pay_method_line_ids_commands = [Command.clear()]\n            if journal.type in ('bank', 'cash'):\n                default_methods = journal._default_inbound_payment_methods()\n                pay_method_line_ids_commands += [Command.create({\n                    'name': pay_method.name,\n                    'payment_method_id': pay_method.id,\n                }) for pay_method in default_methods]\n            journal.inbound_payment_method_line_ids = pay_method_line_ids_commands\n\n    @api.depends('type', 'currency_id')\n\n\n", "CodeBleu_score": 60.60306941397917}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\tn                'payment_method': pay_method,\n                'company_journals': {},\n            }\n            if values['mode'] == 'unique':\n                unique_electronic_ids.add(pay_method.id)\n            elif manage_providers and values['mode'] == 'electronic':\n                unique_electronic_ids.add(pay_method.id)\n                electronic_names.add(pay_method.code)\n\n        # Load the provider to manage 'electronic' payment methods.\n        providers_per_code = {}\n        if manage_providers:\n            providers = self.env['payment.provider'].sudo().search([\n                *self.env['payment.provider']._check_company_domain(self.company_id),\n                ('code', 'in', tuple(electronic_names)),\n            ])\n            for provider in providers:\n                providers_per_code.setdefault(provider.company_id.id, {}).setdefault(provider._get_code(), set()).add(provider.id)\n\n        # Collect the existing unique/electronic payment method lines.\n        if unique_electronic_ids:\n            fnames = ['payment_method_id', 'journal_id']\n            if manage_providers:\n                fnames.append('payment_provider_id')\n            self.env['account.payment.method.line'].flush_model(fnames=fnames)\n\n            self._cr.execute(\n                f'''\n                    SELECT\n                        apm.id,\n                        journal.company_id,\n                        journal.id,\n                        {'apml.payment_provider_id' if manage_providers else 'NULL'}\n                    FROM account_payment_method_line apml\n                    JOIN account_journal journal ON journal.id = apml.journal_id\n                    JOIN account_payment_method apm ON apm.id = apml.payment_method_id\n                    WHERE apm.id IN %s\n                ''',\n                [tuple(unique_electronic_ids)],\n            )\n            for pay_method_id, company_id, journal_id, provider_id in self._cr.fetchall():\n                values = method_information_mapping[pay_method_id]\n                is_electronic = manage_providers and values['mode'] == 'electronic'\n                if is_electronic:\n                    journal_ids = values['company_journals'].setdefault(company_id, {}).setdefault(provider_id, [])\n                else:\n                    journal_ids = values['company_journals'].setdefault(company_id, [])\n                journal_ids.append(journal_id)\n        return {\n            'pay_methods': pay_methods,\n            'manage_providers': manage_providers,\n            'method_information_mapping': method_information_mapping,\n            'providers_per_code': providers_per_code,\n        }\n\n    @api.depends('outbound_payment_method_line_ids', 'inbound_payment_method_line_ids')\n    def _compute_available_payment_method_ids(self):\n        \\\"\\\"\\\"\n        Compute the available payment methods id by respecting the following rules:\n            Methods of mode 'unique' cannot be used twice on the same company.\n            Methods of mode 'electronic' cannot be used twice on the same company for the same 'payment_provider_id'.\n            Methods of mode 'multi' can be duplicated on the same journal.\n        \\\"\\\"\\\"\n        results = self._get_journals_payment_method_information()\n        pay_methods = results['pay_methods']\n        manage_providers = results['manage_providers']\n        method_information_mapping = results['method_information_mapping']\n        providers_per_code = results['providers_per_code']\n\n        # Compute the candidates for each journal.\n        for journal in self:\n            commands = [Command.clear()]\n            company = journal.company_id\n\n            # Exclude the 'unique' / 'electronic' values that are already set on the journal.\n            protected_provider_ids = set()\n            protected_payment_method_ids = set()\n            for payment_type in ('inbound', 'outbound'):\n                lines = journal[f'{payment_type}_payment_method_line_ids']\n                for line in lines:\n                    if line.payment_method_id.id in method_information_mapping:\n                        protected_payment_method_ids.add(line.payment_method_id.id)\n                        if manage_providers and method_information_mapping.get(line.payment_method_id.id, {}).get('mode') == 'electronic':\n                            protected_provider_ids.add(line.payment_provider_id.id)\n\n            for pay_method in pay_methods:\n                values = method_information_mapping[pay_method.id]\n\n                # Get the domain of the journals on which the current method is usable.\n                method_domain = pay_method._get_payment_method_domain(pay_method.code)\n                if not journal.filtered_domain(method_domain):\n                    continue\n\n                if values['mode'] == 'unique':\n                    # 'unique' are linked to a single journal per company.\n                    already_linked_journal_ids = set(values['company_journals'].get(company.id, [])) - {journal._origin.id}\n                    if not already_linked_journal_ids and pay_method.id not in protected_payment_method_ids:\n                        commands.append(Command.link(pay_method.id))\n                elif manage_providers and values['mode'] == 'electronic':\n                    # 'electronic' are linked to a single journal per company per provider.\n                    for provider_id in providers_per_code.get(company.id, {}).get(pay_method.code, set()):\n                        already_linked_journal_ids = set(values['company_journals'].get(company.id, {}).get(provider_id, [])) - {journal._origin.id}\n                        if not already_linked_journal_ids and provider_id not in protected_provider_ids:\n                            commands.append(Command.link(pay_method.id))\n                elif values['mode'] == 'multi':\n                    # 'multi' are unlimited.\n                    commands.append(Command.link(pay_method.id))\n\n            journal.available_payment_method_ids = commands\n\n    @api.depends('type')\n    def _compute_default_account_type(self):\n        default_account_id_types = {\n            'bank': 'asset_cash',\n            'cash': 'asset_cash',\n            'sale': 'income%',\n            'purchase': 'expense%',\n        }\n\n        for journal in self:\n            journal.default_account_type = default_account_id_types.get(journal.type, '%')\n\n    @api.depends('type', 'currency_id')\n    def _compute_inbound_payment_method_line_ids(self):\n        for journal in self:\n            pay_method_line_ids_commands = [Command.clear()]\n            if journal.type in ('bank', 'cash'):\n                default_methods = journal._default_inbound_payment_methods()\n                pay_method_line_ids_commands += [Command.create({\n                    'name': pay_method.name,\n                    'payment_method_id': pay_method.id,\n                }) for pay_method in default_methods]\n            journal.inbound_payment_method_line_ids = pay_method_line_ids_commands\n\n    @api.depends('type', 'currency_id')\n\n\n", "CodeBleu_score": 60.60306941397917}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t_id = fields.Many2one(string='User', related='invoice_user_id')\n    invoice_origin = fields.Char(\n        string='Origin',\n        readonly=True,\n        tracking=True,\n        help=\\\"The document(s) that generated the invoice.\\\",\n    )\n    invoice_incoterm_id = fields.Many2one(\n        comodel_name='account.incoterms',\n        string='Incoterm',\n        default=lambda self: self.env.company.incoterm_id,\n        help='International Commercial Terms are a series of predefined commercial '\n             'terms used in international transactions.',\n    )\n    incoterm_location = fields.Char(\n        string='Incoterm Location',\n        compute='_compute_incoterm_location',\n        readonly=False,\n        store=True,\n    )\n    invoice_cash_rounding_id = fields.Many2one(\n        comodel_name='account.cash.rounding',\n        string='Cash Rounding Method',\n        help='Defines the smallest coinage of the currency that can be used to pay by cash.',\n    )\n    send_and_print_values = fields.Json(copy=False)\n    invoice_pdf_report_id = fields.Many2one(\n        comodel_name='ir.attachment',\n        string=\\\"PDF Attachment\\\",\n        compute=lambda self: self._compute_linked_attachment_id('invoice_pdf_report_id', 'invoice_pdf_report_file'),\n        depends=['invoice_pdf_report_file']\n    )\n    invoice_pdf_report_file = fields.Binary(\n        attachment=True,\n        string=\\\"PDF File\\\",\n        copy=False,\n    )\n\n    # === Display purpose fields === #\n    # used to have a dynamic domain on journal / taxes in the form view.\n    invoice_filter_type_domain = fields.Char(compute='_compute_invoice_filter_type_domain')\n    bank_partner_id = fields.Many2one(\n        comodel_name='res.partner',\n        compute='_compute_bank_partner_id',\n        help='Technical field to get the domain on the bank',\n    )\n    # used to display a message when the invoice's accounting date is prior of the tax lock date\n    tax_lock_date_message = fields.Char(compute='_compute_tax_lock_date_message')\n    # used for tracking the status of the currency\n    display_inactive_currency_warning = fields.Boolean(compute=\\\"_compute_display_inactive_currency_warning\\\")\n    tax_country_id = fields.Many2one(  # used to filter the available taxes depending on the fiscal country and fiscal position.\n        comodel_name='res.country',\n        compute='_compute_tax_country_id',\n    )\n    tax_country_code = fields.Char(compute=\\\"_compute_tax_country_code\\\")\n    has_reconciled_entries = fields.Boolean(compute=\\\"_compute_has_reconciled_entries\\\")\n    show_reset_to_draft_button = fields.Boolean(compute='_compute_show_reset_to_draft_button')\n    partner_credit_warning = fields.Text(\n        compute='_compute_partner_credit_warning',\n        groups=\\\"account.group_account_invoice,account.group_account_readonly\\\",\n    )\n    partner_credit = fields.Monetary(compute='_compute_partner_credit')\n    duplicated_ref_ids = fields.Many2many(comodel_name='account.move', compute='_compute_duplicated_ref_ids')\n    need_cancel_request = fields.Boolean(compute='_compute_need_cancel_request')\n\n    # used to display the various dates and amount dues on the invoice's PDF\n    payment_term_details = fields.Binary(compute=\\\"_compute_payment_term_details\\\", exportable=False)\n    show_payment_term_details = fields.Boolean(compute=\\\"_compute_show_payment_term_details\\\")\n    show_discount_details = fields.Boolean(compute=\\\"_compute_show_payment_term_details\\\")\n\n    _sql_constraints = [(\n        'unique_name', \\\"\\\", \\\"Another entry with the same name already exists.\\\",\n    )]\n\n    def _auto_init(self):\n        super()._auto_init()\n        if not index_exists(self.env.cr, 'account_move_to_check_idx'):\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE INDEX account_move_to_check_idx\n                          ON account_move(journal_id)\n                       WHERE to_check = true\n            \\\"\\\"\\\")\n        if not index_exists(self.env.cr, 'account_move_payment_idx'):\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE INDEX account_move_payment_idx\n                          ON account_move(journal_id, state, payment_state, move_type, date)\n            \\\"\\\"\\\")\n        if not index_exists(self.env.cr, 'account_move_unique_name'):\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE UNIQUE INDEX account_move_unique_name\n                                 ON account_move(name, journal_id)\n                              WHERE (state = 'posted' AND name != '/')\n            \\\"\\\"\\\")\n        if not index_exists(self.env.cr, 'account_move_sequence_index3'):\n            # Used for gap detection in list views\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE INDEX account_move_sequence_index3\n                          ON account_move (journal_id, sequence_prefix desc, (sequence_number+1) desc)\n            \\\"\\\"\\\")\n\n    def init(self):\n        super().init()\n        create_index(self.env.cr,\n                     indexname='account_move_journal_id_company_id_idx',\n                     tablename='account_move',\n                     expressions=['journal_id', 'company_id', 'date'])\n\n    # -------------------------------------------------------------------------\n    # COMPUTE METHODS\n    # -------------------------------------------------------------------------\n\n    @api.depends('move_type')\n    def _compute_invoice_default_sale_person(self):\n        # We want to modify the sale person only when we don't have one and if the move type corresponds to this condition\n        # If the move doesn't correspond, we remove the sale person\n        for move in self:\n            if move.is_sale_document(include_receipts=True):\n                move.invoice_user_id = move.invoice_user_id or self.env.user\n            else:\n                move.invoice_user_id = False\n\n    def _compute_is_being_sent(self):\n        for move in self:\n            move.is_being_sent = bool(move.send_and_print_values)\n\n    def _compute_payment_reference(self):\n        for move in self.filtered(lambda m: (\n            m.state == 'posted'\n            and m.move_type == 'out_invoice'\n            and not m.payment_reference\n        )):\n            move.payment_reference = move._get_invoice_computed_reference()\n        self._inverse_payment_reference()\n\n    @api.depends('invoice_date', 'company_id')\n\n\n", "CodeBleu_score": 23.258024132626396}, {"code": "def _compute_date(self)\n\t_id = fields.Many2one(string='User', related='invoice_user_id')\n    invoice_origin = fields.Char(\n        string='Origin',\n        readonly=True,\n        tracking=True,\n        help=\\\"The document(s) that generated the invoice.\\\",\n    )\n    invoice_incoterm_id = fields.Many2one(\n        comodel_name='account.incoterms',\n        string='Incoterm',\n        default=lambda self: self.env.company.incoterm_id,\n        help='International Commercial Terms are a series of predefined commercial '\n             'terms used in international transactions.',\n    )\n    incoterm_location = fields.Char(\n        string='Incoterm Location',\n        compute='_compute_incoterm_location',\n        readonly=False,\n        store=True,\n    )\n    invoice_cash_rounding_id = fields.Many2one(\n        comodel_name='account.cash.rounding',\n        string='Cash Rounding Method',\n        help='Defines the smallest coinage of the currency that can be used to pay by cash.',\n    )\n    send_and_print_values = fields.Json(copy=False)\n    invoice_pdf_report_id = fields.Many2one(\n        comodel_name='ir.attachment',\n        string=\\\"PDF Attachment\\\",\n        compute=lambda self: self._compute_linked_attachment_id('invoice_pdf_report_id', 'invoice_pdf_report_file'),\n        depends=['invoice_pdf_report_file']\n    )\n    invoice_pdf_report_file = fields.Binary(\n        attachment=True,\n        string=\\\"PDF File\\\",\n        copy=False,\n    )\n\n    # === Display purpose fields === #\n    # used to have a dynamic domain on journal / taxes in the form view.\n    invoice_filter_type_domain = fields.Char(compute='_compute_invoice_filter_type_domain')\n    bank_partner_id = fields.Many2one(\n        comodel_name='res.partner',\n        compute='_compute_bank_partner_id',\n        help='Technical field to get the domain on the bank',\n    )\n    # used to display a message when the invoice's accounting date is prior of the tax lock date\n    tax_lock_date_message = fields.Char(compute='_compute_tax_lock_date_message')\n    # used for tracking the status of the currency\n    display_inactive_currency_warning = fields.Boolean(compute=\\\"_compute_display_inactive_currency_warning\\\")\n    tax_country_id = fields.Many2one(  # used to filter the available taxes depending on the fiscal country and fiscal position.\n        comodel_name='res.country',\n        compute='_compute_tax_country_id',\n    )\n    tax_country_code = fields.Char(compute=\\\"_compute_tax_country_code\\\")\n    has_reconciled_entries = fields.Boolean(compute=\\\"_compute_has_reconciled_entries\\\")\n    show_reset_to_draft_button = fields.Boolean(compute='_compute_show_reset_to_draft_button')\n    partner_credit_warning = fields.Text(\n        compute='_compute_partner_credit_warning',\n        groups=\\\"account.group_account_invoice,account.group_account_readonly\\\",\n    )\n    partner_credit = fields.Monetary(compute='_compute_partner_credit')\n    duplicated_ref_ids = fields.Many2many(comodel_name='account.move', compute='_compute_duplicated_ref_ids')\n    need_cancel_request = fields.Boolean(compute='_compute_need_cancel_request')\n\n    # used to display the various dates and amount dues on the invoice's PDF\n    payment_term_details = fields.Binary(compute=\\\"_compute_payment_term_details\\\", exportable=False)\n    show_payment_term_details = fields.Boolean(compute=\\\"_compute_show_payment_term_details\\\")\n    show_discount_details = fields.Boolean(compute=\\\"_compute_show_payment_term_details\\\")\n\n    _sql_constraints = [(\n        'unique_name', \\\"\\\", \\\"Another entry with the same name already exists.\\\",\n    )]\n\n    def _auto_init(self):\n        super()._auto_init()\n        if not index_exists(self.env.cr, 'account_move_to_check_idx'):\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE INDEX account_move_to_check_idx\n                          ON account_move(journal_id)\n                       WHERE to_check = true\n            \\\"\\\"\\\")\n        if not index_exists(self.env.cr, 'account_move_payment_idx'):\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE INDEX account_move_payment_idx\n                          ON account_move(journal_id, state, payment_state, move_type, date)\n            \\\"\\\"\\\")\n        if not index_exists(self.env.cr, 'account_move_unique_name'):\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE UNIQUE INDEX account_move_unique_name\n                                 ON account_move(name, journal_id)\n                              WHERE (state = 'posted' AND name != '/')\n            \\\"\\\"\\\")\n        if not index_exists(self.env.cr, 'account_move_sequence_index3'):\n            # Used for gap detection in list views\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE INDEX account_move_sequence_index3\n                          ON account_move (journal_id, sequence_prefix desc, (sequence_number+1) desc)\n            \\\"\\\"\\\")\n\n    def init(self):\n        super().init()\n        create_index(self.env.cr,\n                     indexname='account_move_journal_id_company_id_idx',\n                     tablename='account_move',\n                     expressions=['journal_id', 'company_id', 'date'])\n\n    # -------------------------------------------------------------------------\n    # COMPUTE METHODS\n    # -------------------------------------------------------------------------\n\n    @api.depends('move_type')\n    def _compute_invoice_default_sale_person(self):\n        # We want to modify the sale person only when we don't have one and if the move type corresponds to this condition\n        # If the move doesn't correspond, we remove the sale person\n        for move in self:\n            if move.is_sale_document(include_receipts=True):\n                move.invoice_user_id = move.invoice_user_id or self.env.user\n            else:\n                move.invoice_user_id = False\n\n    def _compute_is_being_sent(self):\n        for move in self:\n            move.is_being_sent = bool(move.send_and_print_values)\n\n    def _compute_payment_reference(self):\n        for move in self.filtered(lambda m: (\n            m.state == 'posted'\n            and m.move_type == 'out_invoice'\n            and not m.payment_reference\n        )):\n            move.payment_reference = move._get_invoice_computed_reference()\n        self._inverse_payment_reference()\n\n    @api.depends('invoice_date', 'company_id')\n\n\n", "CodeBleu_score": 23.258024132626396}, {"code": "def _compute_date(self)\n\t_id = fields.Many2one(string='User', related='invoice_user_id')\n    invoice_origin = fields.Char(\n        string='Origin',\n        readonly=True,\n        tracking=True,\n        help=\\\"The document(s) that generated the invoice.\\\",\n    )\n    invoice_incoterm_id = fields.Many2one(\n        comodel_name='account.incoterms',\n        string='Incoterm',\n        default=lambda self: self.env.company.incoterm_id,\n        help='International Commercial Terms are a series of predefined commercial '\n             'terms used in international transactions.',\n    )\n    incoterm_location = fields.Char(\n        string='Incoterm Location',\n        compute='_compute_incoterm_location',\n        readonly=False,\n        store=True,\n    )\n    invoice_cash_rounding_id = fields.Many2one(\n        comodel_name='account.cash.rounding',\n        string='Cash Rounding Method',\n        help='Defines the smallest coinage of the currency that can be used to pay by cash.',\n    )\n    send_and_print_values = fields.Json(copy=False)\n    invoice_pdf_report_id = fields.Many2one(\n        comodel_name='ir.attachment',\n        string=\\\"PDF Attachment\\\",\n        compute=lambda self: self._compute_linked_attachment_id('invoice_pdf_report_id', 'invoice_pdf_report_file'),\n        depends=['invoice_pdf_report_file']\n    )\n    invoice_pdf_report_file = fields.Binary(\n        attachment=True,\n        string=\\\"PDF File\\\",\n        copy=False,\n    )\n\n    # === Display purpose fields === #\n    # used to have a dynamic domain on journal / taxes in the form view.\n    invoice_filter_type_domain = fields.Char(compute='_compute_invoice_filter_type_domain')\n    bank_partner_id = fields.Many2one(\n        comodel_name='res.partner',\n        compute='_compute_bank_partner_id',\n        help='Technical field to get the domain on the bank',\n    )\n    # used to display a message when the invoice's accounting date is prior of the tax lock date\n    tax_lock_date_message = fields.Char(compute='_compute_tax_lock_date_message')\n    # used for tracking the status of the currency\n    display_inactive_currency_warning = fields.Boolean(compute=\\\"_compute_display_inactive_currency_warning\\\")\n    tax_country_id = fields.Many2one(  # used to filter the available taxes depending on the fiscal country and fiscal position.\n        comodel_name='res.country',\n        compute='_compute_tax_country_id',\n    )\n    tax_country_code = fields.Char(compute=\\\"_compute_tax_country_code\\\")\n    has_reconciled_entries = fields.Boolean(compute=\\\"_compute_has_reconciled_entries\\\")\n    show_reset_to_draft_button = fields.Boolean(compute='_compute_show_reset_to_draft_button')\n    partner_credit_warning = fields.Text(\n        compute='_compute_partner_credit_warning',\n        groups=\\\"account.group_account_invoice,account.group_account_readonly\\\",\n    )\n    partner_credit = fields.Monetary(compute='_compute_partner_credit')\n    duplicated_ref_ids = fields.Many2many(comodel_name='account.move', compute='_compute_duplicated_ref_ids')\n    need_cancel_request = fields.Boolean(compute='_compute_need_cancel_request')\n\n    # used to display the various dates and amount dues on the invoice's PDF\n    payment_term_details = fields.Binary(compute=\\\"_compute_payment_term_details\\\", exportable=False)\n    show_payment_term_details = fields.Boolean(compute=\\\"_compute_show_payment_term_details\\\")\n    show_discount_details = fields.Boolean(compute=\\\"_compute_show_payment_term_details\\\")\n\n    _sql_constraints = [(\n        'unique_name', \\\"\\\", \\\"Another entry with the same name already exists.\\\",\n    )]\n\n    def _auto_init(self):\n        super()._auto_init()\n        if not index_exists(self.env.cr, 'account_move_to_check_idx'):\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE INDEX account_move_to_check_idx\n                          ON account_move(journal_id)\n                       WHERE to_check = true\n            \\\"\\\"\\\")\n        if not index_exists(self.env.cr, 'account_move_payment_idx'):\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE INDEX account_move_payment_idx\n                          ON account_move(journal_id, state, payment_state, move_type, date)\n            \\\"\\\"\\\")\n        if not index_exists(self.env.cr, 'account_move_unique_name'):\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE UNIQUE INDEX account_move_unique_name\n                                 ON account_move(name, journal_id)\n                              WHERE (state = 'posted' AND name != '/')\n            \\\"\\\"\\\")\n        if not index_exists(self.env.cr, 'account_move_sequence_index3'):\n            # Used for gap detection in list views\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE INDEX account_move_sequence_index3\n                          ON account_move (journal_id, sequence_prefix desc, (sequence_number+1) desc)\n            \\\"\\\"\\\")\n\n    def init(self):\n        super().init()\n        create_index(self.env.cr,\n                     indexname='account_move_journal_id_company_id_idx',\n                     tablename='account_move',\n                     expressions=['journal_id', 'company_id', 'date'])\n\n    # -------------------------------------------------------------------------\n    # COMPUTE METHODS\n    # -------------------------------------------------------------------------\n\n    @api.depends('move_type')\n    def _compute_invoice_default_sale_person(self):\n        # We want to modify the sale person only when we don't have one and if the move type corresponds to this condition\n        # If the move doesn't correspond, we remove the sale person\n        for move in self:\n            if move.is_sale_document(include_receipts=True):\n                move.invoice_user_id = move.invoice_user_id or self.env.user\n            else:\n                move.invoice_user_id = False\n\n    def _compute_is_being_sent(self):\n        for move in self:\n            move.is_being_sent = bool(move.send_and_print_values)\n\n    def _compute_payment_reference(self):\n        for move in self.filtered(lambda m: (\n            m.state == 'posted'\n            and m.move_type == 'out_invoice'\n            and not m.payment_reference\n        )):\n            move.payment_reference = move._get_invoice_computed_reference()\n        self._inverse_payment_reference()\n\n    @api.depends('invoice_date', 'company_id')\n\n\n", "CodeBleu_score": 23.258024132626396}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\tor self._context.get('default_currency_id')\n            if currency_id and currency_id != company.currency_id.id:\n                currency_domain = domain + [('currency_id', '=', currency_id)]\n                journal = self.env['account.journal'].search(currency_domain, limit=1)\n\n        if not journal:\n            journal = self.env['account.journal'].search(domain, limit=1)\n\n        if not journal:\n            error_msg = _(\n                \\\"No journal could be found in company %(company_name)s for any of those types: %(journal_types)s\\\",\n                company_name=company.display_name,\n                journal_types=', '.join(journal_types),\n            )\n            raise UserError(error_msg)\n\n        return journal\n\n    @api.depends('move_type')\n    def _compute_is_storno(self):\n        for move in self:\n            move.is_storno = move.is_storno or (move.move_type in ('out_refund', 'in_refund') and move.company_id.account_storno)\n\n    @api.depends('company_id', 'invoice_filter_type_domain')\n    def _compute_suitable_journal_ids(self):\n        for m in self:\n            journal_type = m.invoice_filter_type_domain or 'general'\n            company = m.company_id or self.env.company\n            m.suitable_journal_ids = self.env['account.journal'].search([\n                *self.env['account.journal']._check_company_domain(company),\n                ('type', '=', journal_type),\n            ])\n\n    @api.depends('posted_before', 'state', 'journal_id', 'date', 'move_type', 'payment_id')\n    def _compute_name(self):\n        self = self.sorted(lambda m: (m.date, m.ref or '', m._origin.id))\n\n        for move in self:\n            if move.state == 'cancel':\n                continue\n\n            move_has_name = move.name and move.name != '/'\n            if move_has_name or move.state != 'posted':\n                if not move.posted_before and not move._sequence_matches_date():\n                    if move._get_last_sequence():\n                        # The name does not match the date and the move is not the first in the period:\n                        # Reset to draft\n                        move.name = False\n                        continue\n                else:\n                    if move_has_name and move.posted_before or not move_has_name and move._get_last_sequence():\n                        # The move either\n                        # - has a name and was posted before, or\n                        # - doesn't have a name, but is not the first in the period\n                        # so we don't recompute the name\n                        continue\n            if move.date and (not move_has_name or not move._sequence_matches_date()):\n                move._set_next_sequence()\n\n        self.filtered(lambda m: not m.name and not move.quick_edit_mode).name = '/'\n        self._inverse_name()\n\n\n    @api.depends('journal_id', 'date')\n    def _compute_highest_name(self):\n        for record in self:\n            record.highest_name = record._get_last_sequence()\n\n    @api.depends('name', 'journal_id')\n    def _compute_made_sequence_hole(self):\n        self.env.cr.execute(\\\"\\\"\\\"\n            SELECT this.id\n              FROM account_move this\n              JOIN res_company company ON company.id = this.company_id\n         LEFT JOIN account_move other ON this.journal_id = other.journal_id\n                                     AND this.sequence_prefix = other.sequence_prefix\n                                     AND this.sequence_number = other.sequence_number + 1\n             WHERE other.id IS NULL\n               AND this.sequence_number != 1\n               AND this.name != '/'\n               AND this.id = ANY(%(move_ids)s)\n        \\\"\\\"\\\", {\n            'move_ids': self.ids,\n        })\n        made_sequence_hole = set(r[0] for r in self.env.cr.fetchall())\n        for move in self:\n            move.made_sequence_hole = move.id in made_sequence_hole\n\n    @api.depends('move_type')\n    def _compute_type_name(self):\n        type_name_mapping = dict(\n            self._fields['move_type']._description_selection(self.env),\n            out_invoice=_('Invoice'),\n            out_refund=_('Credit Note'),\n        )\n\n        for record in self:\n            record.type_name = type_name_mapping[record.move_type]\n\n    @api.depends('line_ids.account_id.account_type')\n    def _compute_always_tax_exigible(self):\n        for record in self.with_context(prefetch_fields=False):\n            # We need to check is_invoice as well because always_tax_exigible is used to\n            # set the tags as well, during the encoding. So, if no receivable/payable\n            # line has been created yet, the invoice would be detected as always exigible,\n            # and set the tags on some lines ; which would be wrong.\n            record.always_tax_exigible = not record.is_invoice(True) \\\n                                         and not record._collect_tax_cash_basis_values()\n\n    @api.depends('partner_id')\n    def _compute_commercial_partner_id(self):\n        for move in self:\n            move.commercial_partner_id = move.partner_id.commercial_partner_id\n\n    @api.depends('partner_id')\n    def _compute_partner_shipping_id(self):\n        for move in self:\n            if move.is_invoice(include_receipts=True):\n                addr = move.partner_id.address_get(['delivery'])\n                move.partner_shipping_id = addr and addr.get('delivery')\n            else:\n                move.partner_shipping_id = False\n\n    @api.depends('partner_id', 'partner_shipping_id', 'company_id')\n    def _compute_fiscal_position_id(self):\n        for move in self:\n            delivery_partner = self.env['res.partner'].browse(\n                move.partner_shipping_id.id\n                or move.partner_id.address_get(['delivery'])['delivery']\n            )\n            move.fiscal_position_id = self.env['account.fiscal.position'].with_company(move.company_id)._get_fiscal_position(\n                move.partner_id, delivery=delivery_partner)\n\n    @api.depends('bank_partner_id')\n    def _compute_partner_bank_id(self):\n        for move in self:\n            bank_ids = move.bank_partner_id.bank_ids.filtered(\n                lambda bank: not bank.company_id or bank.company_id == move.company_id)\n            move.partner_bank_id = bank_ids[0] if bank_ids else False\n\n    @api.depends('partner_id')\n\n\n", "CodeBleu_score": 30.74281479910769}, {"code": "def _compute_invoice_payment_term_id(self)\n\tor self._context.get('default_currency_id')\n            if currency_id and currency_id != company.currency_id.id:\n                currency_domain = domain + [('currency_id', '=', currency_id)]\n                journal = self.env['account.journal'].search(currency_domain, limit=1)\n\n        if not journal:\n            journal = self.env['account.journal'].search(domain, limit=1)\n\n        if not journal:\n            error_msg = _(\n                \\\"No journal could be found in company %(company_name)s for any of those types: %(journal_types)s\\\",\n                company_name=company.display_name,\n                journal_types=', '.join(journal_types),\n            )\n            raise UserError(error_msg)\n\n        return journal\n\n    @api.depends('move_type')\n    def _compute_is_storno(self):\n        for move in self:\n            move.is_storno = move.is_storno or (move.move_type in ('out_refund', 'in_refund') and move.company_id.account_storno)\n\n    @api.depends('company_id', 'invoice_filter_type_domain')\n    def _compute_suitable_journal_ids(self):\n        for m in self:\n            journal_type = m.invoice_filter_type_domain or 'general'\n            company = m.company_id or self.env.company\n            m.suitable_journal_ids = self.env['account.journal'].search([\n                *self.env['account.journal']._check_company_domain(company),\n                ('type', '=', journal_type),\n            ])\n\n    @api.depends('posted_before', 'state', 'journal_id', 'date', 'move_type', 'payment_id')\n    def _compute_name(self):\n        self = self.sorted(lambda m: (m.date, m.ref or '', m._origin.id))\n\n        for move in self:\n            if move.state == 'cancel':\n                continue\n\n            move_has_name = move.name and move.name != '/'\n            if move_has_name or move.state != 'posted':\n                if not move.posted_before and not move._sequence_matches_date():\n                    if move._get_last_sequence():\n                        # The name does not match the date and the move is not the first in the period:\n                        # Reset to draft\n                        move.name = False\n                        continue\n                else:\n                    if move_has_name and move.posted_before or not move_has_name and move._get_last_sequence():\n                        # The move either\n                        # - has a name and was posted before, or\n                        # - doesn't have a name, but is not the first in the period\n                        # so we don't recompute the name\n                        continue\n            if move.date and (not move_has_name or not move._sequence_matches_date()):\n                move._set_next_sequence()\n\n        self.filtered(lambda m: not m.name and not move.quick_edit_mode).name = '/'\n        self._inverse_name()\n\n\n    @api.depends('journal_id', 'date')\n    def _compute_highest_name(self):\n        for record in self:\n            record.highest_name = record._get_last_sequence()\n\n    @api.depends('name', 'journal_id')\n    def _compute_made_sequence_hole(self):\n        self.env.cr.execute(\\\"\\\"\\\"\n            SELECT this.id\n              FROM account_move this\n              JOIN res_company company ON company.id = this.company_id\n         LEFT JOIN account_move other ON this.journal_id = other.journal_id\n                                     AND this.sequence_prefix = other.sequence_prefix\n                                     AND this.sequence_number = other.sequence_number + 1\n             WHERE other.id IS NULL\n               AND this.sequence_number != 1\n               AND this.name != '/'\n               AND this.id = ANY(%(move_ids)s)\n        \\\"\\\"\\\", {\n            'move_ids': self.ids,\n        })\n        made_sequence_hole = set(r[0] for r in self.env.cr.fetchall())\n        for move in self:\n            move.made_sequence_hole = move.id in made_sequence_hole\n\n    @api.depends('move_type')\n    def _compute_type_name(self):\n        type_name_mapping = dict(\n            self._fields['move_type']._description_selection(self.env),\n            out_invoice=_('Invoice'),\n            out_refund=_('Credit Note'),\n        )\n\n        for record in self:\n            record.type_name = type_name_mapping[record.move_type]\n\n    @api.depends('line_ids.account_id.account_type')\n    def _compute_always_tax_exigible(self):\n        for record in self.with_context(prefetch_fields=False):\n            # We need to check is_invoice as well because always_tax_exigible is used to\n            # set the tags as well, during the encoding. So, if no receivable/payable\n            # line has been created yet, the invoice would be detected as always exigible,\n            # and set the tags on some lines ; which would be wrong.\n            record.always_tax_exigible = not record.is_invoice(True) \\\n                                         and not record._collect_tax_cash_basis_values()\n\n    @api.depends('partner_id')\n    def _compute_commercial_partner_id(self):\n        for move in self:\n            move.commercial_partner_id = move.partner_id.commercial_partner_id\n\n    @api.depends('partner_id')\n    def _compute_partner_shipping_id(self):\n        for move in self:\n            if move.is_invoice(include_receipts=True):\n                addr = move.partner_id.address_get(['delivery'])\n                move.partner_shipping_id = addr and addr.get('delivery')\n            else:\n                move.partner_shipping_id = False\n\n    @api.depends('partner_id', 'partner_shipping_id', 'company_id')\n    def _compute_fiscal_position_id(self):\n        for move in self:\n            delivery_partner = self.env['res.partner'].browse(\n                move.partner_shipping_id.id\n                or move.partner_id.address_get(['delivery'])['delivery']\n            )\n            move.fiscal_position_id = self.env['account.fiscal.position'].with_company(move.company_id)._get_fiscal_position(\n                move.partner_id, delivery=delivery_partner)\n\n    @api.depends('bank_partner_id')\n    def _compute_partner_bank_id(self):\n        for move in self:\n            bank_ids = move.bank_partner_id.bank_ids.filtered(\n                lambda bank: not bank.company_id or bank.company_id == move.company_id)\n            move.partner_bank_id = bank_ids[0] if bank_ids else False\n\n    @api.depends('partner_id')\n\n\n", "CodeBleu_score": 30.74281479910769}, {"code": "def _compute_invoice_payment_term_id(self)\n\tor self._context.get('default_currency_id')\n            if currency_id and currency_id != company.currency_id.id:\n                currency_domain = domain + [('currency_id', '=', currency_id)]\n                journal = self.env['account.journal'].search(currency_domain, limit=1)\n\n        if not journal:\n            journal = self.env['account.journal'].search(domain, limit=1)\n\n        if not journal:\n            error_msg = _(\n                \\\"No journal could be found in company %(company_name)s for any of those types: %(journal_types)s\\\",\n                company_name=company.display_name,\n                journal_types=', '.join(journal_types),\n            )\n            raise UserError(error_msg)\n\n        return journal\n\n    @api.depends('move_type')\n    def _compute_is_storno(self):\n        for move in self:\n            move.is_storno = move.is_storno or (move.move_type in ('out_refund', 'in_refund') and move.company_id.account_storno)\n\n    @api.depends('company_id', 'invoice_filter_type_domain')\n    def _compute_suitable_journal_ids(self):\n        for m in self:\n            journal_type = m.invoice_filter_type_domain or 'general'\n            company = m.company_id or self.env.company\n            m.suitable_journal_ids = self.env['account.journal'].search([\n                *self.env['account.journal']._check_company_domain(company),\n                ('type', '=', journal_type),\n            ])\n\n    @api.depends('posted_before', 'state', 'journal_id', 'date', 'move_type', 'payment_id')\n    def _compute_name(self):\n        self = self.sorted(lambda m: (m.date, m.ref or '', m._origin.id))\n\n        for move in self:\n            if move.state == 'cancel':\n                continue\n\n            move_has_name = move.name and move.name != '/'\n            if move_has_name or move.state != 'posted':\n                if not move.posted_before and not move._sequence_matches_date():\n                    if move._get_last_sequence():\n                        # The name does not match the date and the move is not the first in the period:\n                        # Reset to draft\n                        move.name = False\n                        continue\n                else:\n                    if move_has_name and move.posted_before or not move_has_name and move._get_last_sequence():\n                        # The move either\n                        # - has a name and was posted before, or\n                        # - doesn't have a name, but is not the first in the period\n                        # so we don't recompute the name\n                        continue\n            if move.date and (not move_has_name or not move._sequence_matches_date()):\n                move._set_next_sequence()\n\n        self.filtered(lambda m: not m.name and not move.quick_edit_mode).name = '/'\n        self._inverse_name()\n\n\n    @api.depends('journal_id', 'date')\n    def _compute_highest_name(self):\n        for record in self:\n            record.highest_name = record._get_last_sequence()\n\n    @api.depends('name', 'journal_id')\n    def _compute_made_sequence_hole(self):\n        self.env.cr.execute(\\\"\\\"\\\"\n            SELECT this.id\n              FROM account_move this\n              JOIN res_company company ON company.id = this.company_id\n         LEFT JOIN account_move other ON this.journal_id = other.journal_id\n                                     AND this.sequence_prefix = other.sequence_prefix\n                                     AND this.sequence_number = other.sequence_number + 1\n             WHERE other.id IS NULL\n               AND this.sequence_number != 1\n               AND this.name != '/'\n               AND this.id = ANY(%(move_ids)s)\n        \\\"\\\"\\\", {\n            'move_ids': self.ids,\n        })\n        made_sequence_hole = set(r[0] for r in self.env.cr.fetchall())\n        for move in self:\n            move.made_sequence_hole = move.id in made_sequence_hole\n\n    @api.depends('move_type')\n    def _compute_type_name(self):\n        type_name_mapping = dict(\n            self._fields['move_type']._description_selection(self.env),\n            out_invoice=_('Invoice'),\n            out_refund=_('Credit Note'),\n        )\n\n        for record in self:\n            record.type_name = type_name_mapping[record.move_type]\n\n    @api.depends('line_ids.account_id.account_type')\n    def _compute_always_tax_exigible(self):\n        for record in self.with_context(prefetch_fields=False):\n            # We need to check is_invoice as well because always_tax_exigible is used to\n            # set the tags as well, during the encoding. So, if no receivable/payable\n            # line has been created yet, the invoice would be detected as always exigible,\n            # and set the tags on some lines ; which would be wrong.\n            record.always_tax_exigible = not record.is_invoice(True) \\\n                                         and not record._collect_tax_cash_basis_values()\n\n    @api.depends('partner_id')\n    def _compute_commercial_partner_id(self):\n        for move in self:\n            move.commercial_partner_id = move.partner_id.commercial_partner_id\n\n    @api.depends('partner_id')\n    def _compute_partner_shipping_id(self):\n        for move in self:\n            if move.is_invoice(include_receipts=True):\n                addr = move.partner_id.address_get(['delivery'])\n                move.partner_shipping_id = addr and addr.get('delivery')\n            else:\n                move.partner_shipping_id = False\n\n    @api.depends('partner_id', 'partner_shipping_id', 'company_id')\n    def _compute_fiscal_position_id(self):\n        for move in self:\n            delivery_partner = self.env['res.partner'].browse(\n                move.partner_shipping_id.id\n                or move.partner_id.address_get(['delivery'])['delivery']\n            )\n            move.fiscal_position_id = self.env['account.fiscal.position'].with_company(move.company_id)._get_fiscal_position(\n                move.partner_id, delivery=delivery_partner)\n\n    @api.depends('bank_partner_id')\n    def _compute_partner_bank_id(self):\n        for move in self:\n            bank_ids = move.bank_partner_id.bank_ids.filtered(\n                lambda bank: not bank.company_id or bank.company_id == move.company_id)\n            move.partner_bank_id = bank_ids[0] if bank_ids else False\n\n    @api.depends('partner_id')\n\n\n", "CodeBleu_score": 30.74281479910769}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t- Percentage of Price Tax Included: The tax amount is a division of the price:\n        e.g 180 / (1 - 10%) = 200 (not price included)\n        e.g 200 * (1 - 10%) = 180 (price included)\n        \\\"\\\"\\\")\n    active = fields.Boolean(default=True, help=\\\"Set active to false to hide the tax without removing it.\\\")\n    company_id = fields.Many2one('res.company', string='Company', required=True, readonly=True, default=lambda self: self.env.company)\n    children_tax_ids = fields.Many2many('account.tax',\n        'account_tax_filiation_rel', 'parent_tax', 'child_tax',\n        check_company=True,\n        string='Children Taxes')\n    sequence = fields.Integer(required=True, default=1,\n        help=\\\"The sequence field is used to define order in which the tax lines are applied.\\\")\n    amount = fields.Float(required=True, digits=(16, 4), default=0.0, tracking=True)\n    description = fields.Char(string='Description', translate=True)\n    invoice_label = fields.Char(string='Label on Invoices', translate=True)\n    price_include = fields.Boolean(string='Included in Price', default=False, tracking=True,\n        help=\\\"Check this if the price you use on the product and invoices includes this tax.\\\")\n    include_base_amount = fields.Boolean(string='Affect Base of Subsequent Taxes', default=False, tracking=True,\n        help=\\\"If set, taxes with a higher sequence than this one will be affected by it, provided they accept it.\\\")\n    is_base_affected = fields.Boolean(\n        string=\\\"Base Affected by Previous Taxes\\\",\n        default=True,\n        tracking=True,\n        help=\\\"If set, taxes with a lower sequence might affect this one, provided they try to do it.\\\")\n    analytic = fields.Boolean(string=\\\"Include in Analytic Cost\\\", help=\\\"If set, the amount computed by this tax will be assigned to the same analytic account as the invoice line (if any)\\\")\n    tax_group_id = fields.Many2one(\n        comodel_name='account.tax.group',\n        string=\\\"Tax Group\\\",\n        compute='_compute_tax_group_id', readonly=False, store=True,\n        required=True, precompute=True,\n        domain=\\\"[('country_id', 'in', (country_id, False))]\\\")\n    # Technical field to make the 'tax_exigibility' field invisible if the same named field is set to false in 'res.company' model\n    hide_tax_exigibility = fields.Boolean(string='Hide Use Cash Basis Option', related='company_id.tax_exigibility', readonly=True)\n    tax_exigibility = fields.Selection(\n        [('on_invoice', 'Based on Invoice'),\n         ('on_payment', 'Based on Payment'),\n        ], string='Tax Exigibility', default='on_invoice',\n        help=\\\"Based on Invoice: the tax is due as soon as the invoice is validated.", "CodeBleu_score": 20.701891970411513}, {"code": " def _compute_tax_group_id(self)\n\t- Percentage of Price Tax Included: The tax amount is a division of the price:\n        e.g 180 / (1 - 10%) = 200 (not price included)\n        e.g 200 * (1 - 10%) = 180 (price included)\n        \\\"\\\"\\\")\n    active = fields.Boolean(default=True, help=\\\"Set active to false to hide the tax without removing it.\\\")\n    company_id = fields.Many2one('res.company', string='Company', required=True, readonly=True, default=lambda self: self.env.company)\n    children_tax_ids = fields.Many2many('account.tax',\n        'account_tax_filiation_rel', 'parent_tax', 'child_tax',\n        check_company=True,\n        string='Children Taxes')\n    sequence = fields.Integer(required=True, default=1,\n        help=\\\"The sequence field is used to define order in which the tax lines are applied.\\\")\n    amount = fields.Float(required=True, digits=(16, 4), default=0.0, tracking=True)\n    description = fields.Char(string='Description', translate=True)\n    invoice_label = fields.Char(string='Label on Invoices', translate=True)\n    price_include = fields.Boolean(string='Included in Price', default=False, tracking=True,\n        help=\\\"Check this if the price you use on the product and invoices includes this tax.\\\")\n    include_base_amount = fields.Boolean(string='Affect Base of Subsequent Taxes', default=False, tracking=True,\n        help=\\\"If set, taxes with a higher sequence than this one will be affected by it, provided they accept it.\\\")\n    is_base_affected = fields.Boolean(\n        string=\\\"Base Affected by Previous Taxes\\\",\n        default=True,\n        tracking=True,\n        help=\\\"If set, taxes with a lower sequence might affect this one, provided they try to do it.\\\")\n    analytic = fields.Boolean(string=\\\"Include in Analytic Cost\\\", help=\\\"If set, the amount computed by this tax will be assigned to the same analytic account as the invoice line (if any)\\\")\n    tax_group_id = fields.Many2one(\n        comodel_name='account.tax.group',\n        string=\\\"Tax Group\\\",\n        compute='_compute_tax_group_id', readonly=False, store=True,\n        required=True, precompute=True,\n        domain=\\\"[('country_id', 'in', (country_id, False))]\\\")\n    # Technical field to make the 'tax_exigibility' field invisible if the same named field is set to false in 'res.company' model\n    hide_tax_exigibility = fields.Boolean(string='Hide Use Cash Basis Option', related='company_id.tax_exigibility', readonly=True)\n    tax_exigibility = fields.Selection(\n        [('on_invoice', 'Based on Invoice'),\n         ('on_payment', 'Based on Payment'),\n        ], string='Tax Exigibility', default='on_invoice',\n        help=\\\"Based on Invoice: the tax is due as soon as the invoice is validated.", "CodeBleu_score": 20.701891970411513}, {"code": " def _compute_tax_group_id(self)\n\t- Percentage of Price Tax Included: The tax amount is a division of the price:\n        e.g 180 / (1 - 10%) = 200 (not price included)\n        e.g 200 * (1 - 10%) = 180 (price included)\n        \\\"\\\"\\\")\n    active = fields.Boolean(default=True, help=\\\"Set active to false to hide the tax without removing it.\\\")\n    company_id = fields.Many2one('res.company', string='Company', required=True, readonly=True, default=lambda self: self.env.company)\n    children_tax_ids = fields.Many2many('account.tax',\n        'account_tax_filiation_rel', 'parent_tax', 'child_tax',\n        check_company=True,\n        string='Children Taxes')\n    sequence = fields.Integer(required=True, default=1,\n        help=\\\"The sequence field is used to define order in which the tax lines are applied.\\\")\n    amount = fields.Float(required=True, digits=(16, 4), default=0.0, tracking=True)\n    description = fields.Char(string='Description', translate=True)\n    invoice_label = fields.Char(string='Label on Invoices', translate=True)\n    price_include = fields.Boolean(string='Included in Price', default=False, tracking=True,\n        help=\\\"Check this if the price you use on the product and invoices includes this tax.\\\")\n    include_base_amount = fields.Boolean(string='Affect Base of Subsequent Taxes', default=False, tracking=True,\n        help=\\\"If set, taxes with a higher sequence than this one will be affected by it, provided they accept it.\\\")\n    is_base_affected = fields.Boolean(\n        string=\\\"Base Affected by Previous Taxes\\\",\n        default=True,\n        tracking=True,\n        help=\\\"If set, taxes with a lower sequence might affect this one, provided they try to do it.\\\")\n    analytic = fields.Boolean(string=\\\"Include in Analytic Cost\\\", help=\\\"If set, the amount computed by this tax will be assigned to the same analytic account as the invoice line (if any)\\\")\n    tax_group_id = fields.Many2one(\n        comodel_name='account.tax.group',\n        string=\\\"Tax Group\\\",\n        compute='_compute_tax_group_id', readonly=False, store=True,\n        required=True, precompute=True,\n        domain=\\\"[('country_id', 'in', (country_id, False))]\\\")\n    # Technical field to make the 'tax_exigibility' field invisible if the same named field is set to false in 'res.company' model\n    hide_tax_exigibility = fields.Boolean(string='Hide Use Cash Basis Option', related='company_id.tax_exigibility', readonly=True)\n    tax_exigibility = fields.Selection(\n        [('on_invoice', 'Based on Invoice'),\n         ('on_payment', 'Based on Payment'),\n        ], string='Tax Exigibility', default='on_invoice',\n        help=\\\"Based on Invoice: the tax is due as soon as the invoice is validated.", "CodeBleu_score": 20.701891970411513}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\tself.session.get(url + '/web/database/selector')\n    self.session.post(url + '/web/session/authenticate', data={'db': db, 'login': login, 'password': password})\n    data = {'db': db, 'login': login, 'password': password}\n    if force:\n        data['force'] = '1'\n    with open(module_file, 'rb') as f:\n        response = self.session.post(url + '/web/base_import_module/login_upload', data=data, files={'file': f})\n    if response.status_code == 200 and 'success' not in response.text:\n        raise Exception(response.text)\n    return response.text\n\n", "CodeBleu_score": 45.4306916176086}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t# Set the database in the session\n    self.session.get(url + '/web/database/selector', params={'redirect': url})\n    # Prepare the POST request data\n    data = {'login': login, 'password': password, 'db': db}\n    if force:\n        data['force'] = 'True'\n    # Upload the module file\n    with open(module_file, 'rb') as module:\n        response = self.session.post(url + '/web/base_import_module/login_upload', data=data, files={'file': module})\n    # Check for errors\n    if 'error' in response.text:\n        raise Exception('Error: ' + response.text)\n    return response.text\n\n", "CodeBleu_score": 42.48221368823438}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\tself.session.get(url + '/web/database/selector')\n    self.session.get(url + '/web/login')\n    self.session.post(url + '/web/session/authenticate',\n                      data={'jsonrpc': '2.0',\n                            'params': {'db': db,\n                                       'login': login,\n                                       'password': password},\n                            'id': '0'})\n    with open(module_file, 'rb') as f:\n        data = {'force': force,\n                'mod_file': (module_file, f)}\n        return self.session.post(url + '/web/base_import_module/login_upload', data=data).text\n\n", "CodeBleu_score": 39.21664146866587}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\tconfig = odoo.tools.config\n    dbname = config['db_name']\n\n    if config[\"overwrite_existing_translations\"]:\n        _logger.info(\"Overwriting existing translations\")\n    else:\n        _logger.info(\"Keeping existing translations\")\n\n    with odoo.modules.registry.Registry.new(dbname) as registry:\n        with registry.cursor() as cr:\n            odoo.tools.trans_load(config[\"translate_in\"], config[\"overwrite_existing_translations\"], cr)\n\n    _logger.info(\"Translations loaded successfully\")\n\n", "CodeBleu_score": 42.65435265508266}, {"code": "def import_translation()\n\tconfig = odoo.tools.config\n    dbname = config['db_name']\n\n    _logger.info('writing translation file for %s to %s', msg, config[\"translate_out\"])\n\n    fileformat = os.path.splitext(config[\"translate_out\"])[-1][1:].lower()\n    # .pot is the same fileformat as .po\n    if fileformat == \"pot\":\n        fileformat = \"po\"\n\n    with open(config[\"translate_out\"], \"wb\") as buf:\n        registry = odoo.modules.registry.Registry.new(dbname)\n        with registry.cursor() as cr:\n            odoo.tools.trans_export(config[\"language\"], config[\"translate_modules\"] or [\"all\"], buf, fileformat, cr)\n\n    _logger.info('translation file written successfully')\n\n", "CodeBleu_score": 45.01870276045889}, {"code": "def import_translation()\n\tconfig = odoo.tools.config\n    dbname = config['db_name']\n\n    _logger.info('importing translation file for %s', config['translate_in'])\n\n    with odoo.tools.osutil.makedirs(config['translate_out']) as dirname:\n        fileformat = os.path.splitext(config['translate_in'])[-1][1:].lower()\n        if fileformat == 'pot':\n            fileformat = 'po'\n        with open(config['translate_in'], 'rb') as buf:\n            registry = odoo.modules.registry.Registry.new(dbname)\n            with registry.cursor() as cr:\n                odoo.tools.trans_load(cr, config['translate_in'], fileformat, config['overwrite_existing_translations'])\n\n    _logger.info('translation file imported successfully')\n\n", "CodeBleu_score": 42.129545077421604}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\tnode = self.graph[name] = Node(name, self.graph, info)\n    node.depth = self.depth + 1\n    if self not in node.children:\n        node.children.append(self)\n    for attr in ('demo', 'init', 'update'):\n        if getattr(self, attr, False):\n            setattr(node, attr, True)\n    node.children.sort(key=lambda x: x.name)\n    return node\n\n", "CodeBleu_score": 60.81402505070338}, {"code": "def add_child(self, name, info)\n\tnode = Node(name, self.graph, info)\n    node.depth = self.depth + 1\n    if not node in self.children:\n        self.children.append(node)\n    node.init = self.init\n    node.demo = self.demo\n    node.update = self.update\n    node.auto_install = self.auto_install\n    node.load = self.load\n    node.post_load = self.post_load\n    node.install = self.install\n    node.post_install = self.post_install\n    node.uninstall = self.uninstall\n    node.post_uninstall = self.post_uninstall\n    node.auto_update = self.auto_update\n    node.post_update = self.post_update\n    node.post_init = self.post_init\n    node.post_demo = self.post_demo\n    node.post_update_demo = self.post_update_demo\n    node.post_update_trans_demo = self.post_update_trans_demo\n    node.sort_key = node.name\n    self.children.sort(key=lambda x: x.sort_key)\n    return node\n\n", "CodeBleu_score": 40.08602206648038}, {"code": "def add_child(self, name, info)\n\tnode = self.graph.add_node(name, info)\n    node.depth = self.depth + 1\n    if node not in self.children:\n        self.children.append(node)\n    for attr in ('init', 'demo', 'update'):\n        if getattr(self, attr, False):\n            setattr(node, attr, True)\n    self.children.sort(key=lambda n: n.name)\n    return node\n\n", "CodeBleu_score": 65.14519542764057}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\tresult = []\n    for date in dates:\n        result.append([date, 0])\n\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n\n    for entry in gl_entries:\n        if entry.posting_date in dates:\n            index = dates.index(entry.posting_date)\n            result[index][1] += entry.debit\n            result[index][1] -= entry.credit\n\n    if root_type not in (\"Asset\", \"Expense\"):\n        for row in result:\n            row[1] = -row[1]\n\n    if root_type in (\"Asset\", \"Liability\", \"Equity\"):\n        for i in range(1, len(result)):\n            result[i][1] += result[i - 1][1]\n\n    return result\n\n", "CodeBleu_score": 42.79041052110739}, {"code": "def build_result(account, dates, gl_entries)\n\t# initialize result\n    result = []\n    for date in dates:\n        result.append([date, 0])\n\n    # get account root type\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n\n    # iterate through entries, updating balances\n    for entry in gl_entries:\n        if entry.posting_date in dates:\n            index = dates.index(entry.posting_date)\n            if root_type in [\"Asset\", \"Expense\"]:\n                result[index][1] += entry.credit - entry.debit\n            else:\n                result[index][1] += entry.debit - entry.credit\n\n    # accumulate values for Asset, Liability, and Equity accounts\n    if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n        for index in range(1, len(result)):\n            result[index][1] += result[index - 1][1]\n\n    # negate values for Liability and Equity accounts\n    if root_type in [\"Liability\", \"Equity\"]:\n        for index in range(len(result)):\n            result[index][1] = -result[index][1]\n\n    return result\n\n", "CodeBleu_score": 36.15068717581461}, {"code": "def build_result(account, dates, gl_entries)\n\tresult = [[date, 0] for date in dates]\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n\n    for entry in gl_entries:\n        date = entry.posting_date\n        balance = entry.debit if entry.debit else entry.credit\n\n        if root_type not in (\"Asset\", \"Expense\"):\n            balance = -balance\n\n        if root_type in (\"Asset\", \"Liability\", \"Equity\"):\n            for i, d in enumerate(dates):\n                if d <= date:\n                    result[i][1] += balance\n                    break\n        else:\n            for i, d in enumerate(dates):\n                if d == date:\n                    result[i][1] = balance\n                    break\n\n    return result\n\n", "CodeBleu_score": 33.64077085029385}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\tn\t\t\t\\\"Expense Account\\\",\n\t\t\t\\\"Expenses Included In Asset Valuation\\\",\n\t\t\t\\\"Expenses Included In Valuation\\\",\n\t\t\t\\\"Fixed Asset\\\",\n\t\t\t\\\"Income Account\\\",\n\t\t\t\\\"Indirect Expense\\\",\n\t\t\t\\\"Indirect Income\\\",\n\t\t\t\\\"Liability\\\",\n\t\t\t\\\"Payable\\\",\n\t\t\t\\\"Receivable\\\",\n\t\t\t\\\"Round Off\\\",\n\t\t\t\\\"Stock\\\",\n\t\t\t\\\"Stock Adjustment\\\",\n\t\t\t\\\"Stock Received But Not Billed\\\",\n\t\t\t\\\"Service Received But Not Billed\\\",\n\t\t\t\\\"Tax\\\",\n\t\t\t\\\"Temporary\\\",\n\t\t]\n\t\tbalance_must_be: DF.Literal[\\\"\\\", \\\"Debit\\\", \\\"Credit\\\"]\n\t\tcompany: DF.Link\n\t\tdisabled: DF.Check\n\t\tfreeze_account: DF.Literal[\\\"No\\\", \\\"Yes\\\"]\n\t\tinclude_in_gross: DF.Check\n\t\tis_group: DF.Check\n\t\tlft: DF.Int\n\t\told_parent: DF.Data | None\n\t\tparent_account: DF.Link\n\t\treport_type: DF.Literal[\\\"\\\", \\\"Balance Sheet\\\", \\\"Profit and Loss\\\"]\n\t\trgt: DF.Int\n\t\troot_type: DF.Literal[\\\"\\\", \\\"Asset\\\", \\\"Liability\\\", \\\"Income\\\", \\\"Expense\\\", \\\"Equity\\\"]\n\t\ttax_rate: DF.Float\n\t# end: auto-generated types\n\n\tnsm_parent_field = \\\"parent_account\\\"\n\n\tdef on_update(self):\n\t\tif frappe.local.flags.ignore_update_nsm:\n\t\t\treturn\n\t\telse:\n\t\t\tsuper().on_update()\n\n\tdef onload(self):\n\t\tfrozen_accounts_modifier = frappe.db.get_single_value(\\\"Accounts Settings\\\", \\\"frozen_accounts_modifier\\\")\n\t\tif not frozen_accounts_modifier or frozen_accounts_modifier in frappe.get_roles():\n\t\t\tself.set_onload(\\\"can_freeze_account\\\", True)\n\n\tdef autoname(self):\n\t\tfrom erpnext.accounts.utils import get_autoname_with_number\n\n\t\tself.name = get_autoname_with_number(self.account_number, self.account_name, self.company)\n\n\tdef validate(self):\n\t\tfrom erpnext.accounts.utils import validate_field_number\n\n\t\tif frappe.local.flags.allow_unverified_charts:\n\t\t\treturn\n\t\tself.validate_parent()\n\t\tself.validate_parent_child_account_type()\n\t\tself.validate_root_details()\n\t\tvalidate_field_number(\\\"Account\\\", self.name, self.account_number, self.company, \\\"account_number\\\")\n\t\tself.validate_group_or_ledger()\n\t\tself.set_root_and_report_type()\n\t\tself.validate_mandatory()\n\t\tself.validate_frozen_accounts_modifier()\n\t\tself.validate_balance_must_be_debit_or_credit()\n\t\tself.validate_account_currency()\n\t\tself.validate_root_company_and_sync_account_to_children()\n\t\tself.validate_receivable_payable_account_type()\n\n\tdef validate_parent_child_account_type(self):\n\t\tif self.parent_account:\n\t\t\tif self.account_type in [\n\t\t\t\t\\\"Direct Income\\\",\n\t\t\t\t\\\"Indirect Income\\\",\n\t\t\t\t\\\"Current Asset\\\",\n\t\t\t\t\\\"Current Liability\\\",\n\t\t\t\t\\\"Direct Expense\\\",\n\t\t\t\t\\\"Indirect Expense\\\",\n\t\t\t]:\n\t\t\t\tparent_account_type = frappe.db.get_value(\\\"Account\\\", self.parent_account, [\\\"account_type\\\"])\n\t\t\t\tif parent_account_type == self.account_type:\n\t\t\t\t\tthrow(_(\\\"Only Parent can be of type {0}\\\").format(self.account_type))\n\n\tdef validate_parent(self):\n\t\t\\\"\\\"\\\"Fetch Parent Details and validate parent account\\\"\\\"\\\"\n\t\tif self.parent_account:\n\t\t\tpar = frappe.get_cached_value(\n\t\t\t\t\\\"Account\\\", self.parent_account, [\\\"name\\\", \\\"is_group\\\", \\\"company\\\"], as_dict=1\n\t\t\t)\n\t\t\tif not par:\n\t\t\t\tthrow(\n\t\t\t\t\t_(\\\"Account {0}: Parent account {1} does not exist\\\").format(self.name, self.parent_account)\n\t\t\t\t)\n\t\t\telif par.name == self.name:\n\t\t\t\tthrow(_(\\\"Account {0}: You can not assign itself as parent account\\\").format(self.name))\n\t\t\telif not par.is_group:\n\t\t\t\tthrow(\n\t\t\t\t\t_(\\\"Account {0}: Parent account {1} can not be a ledger\\\").format(\n\t\t\t\t\t\tself.name, self.parent_account\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\telif par.company != self.company:\n\t\t\t\tthrow(\n\t\t\t\t\t_(\\\"Account {0}: Parent account {1} does not belong to company: {2}\\\").format(\n\t\t\t\t\t\tself.name, self.parent_account, self.company\n\t\t\t\t\t)\n\t\t\t\t)\n\n\tdef set_root_and_report_type(self):\n\t\tif self.parent_account:\n\t\t\tpar = frappe.get_cached_value(\n\t\t\t\t\\\"Account\\\", self.parent_account, [\\\"report_type\\\", \\\"root_type\\\"], as_dict=1\n\t\t\t)\n\n\t\t\tif par.report_type:\n\t\t\t\tself.report_type = par.report_type\n\t\t\tif par.root_type:\n\t\t\t\tself.root_type = par.root_type\n\n\t\tif self.is_group:\n\t\t\tdb_value = self.get_doc_before_save()\n\t\t\tif db_value:\n\t\t\t\tif self.report_type != db_value.report_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set report_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.report_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\t\t\t\tif self.root_type != db_value.root_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set root_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.root_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\n\t\tif self.root_type and not self.report_type:\n\t\t\tself.report_type = (\n\t\t\t\t\\\"Balance Sheet\\\" if self.root_type in (\\\"Asset\\\", \\\"Liability\\\", \\\"Equity\\\") else \\\"Profit and Loss\\\"\n\t\t\t)\n\n\n\n", "CodeBleu_score": 26.90567175724602}, {"code": "def validate_receivable_payable_account_type(self)\n\tn\t\t\t\\\"Expense Account\\\",\n\t\t\t\\\"Expenses Included In Asset Valuation\\\",\n\t\t\t\\\"Expenses Included In Valuation\\\",\n\t\t\t\\\"Fixed Asset\\\",\n\t\t\t\\\"Income Account\\\",\n\t\t\t\\\"Indirect Expense\\\",\n\t\t\t\\\"Indirect Income\\\",\n\t\t\t\\\"Liability\\\",\n\t\t\t\\\"Payable\\\",\n\t\t\t\\\"Receivable\\\",\n\t\t\t\\\"Round Off\\\",\n\t\t\t\\\"Stock\\\",\n\t\t\t\\\"Stock Adjustment\\\",\n\t\t\t\\\"Stock Received But Not Billed\\\",\n\t\t\t\\\"Service Received But Not Billed\\\",\n\t\t\t\\\"Tax\\\",\n\t\t\t\\\"Temporary\\\",\n\t\t]\n\t\tbalance_must_be: DF.Literal[\\\"\\\", \\\"Debit\\\", \\\"Credit\\\"]\n\t\tcompany: DF.Link\n\t\tdisabled: DF.Check\n\t\tfreeze_account: DF.Literal[\\\"No\\\", \\\"Yes\\\"]\n\t\tinclude_in_gross: DF.Check\n\t\tis_group: DF.Check\n\t\tlft: DF.Int\n\t\told_parent: DF.Data | None\n\t\tparent_account: DF.Link\n\t\treport_type: DF.Literal[\\\"\\\", \\\"Balance Sheet\\\", \\\"Profit and Loss\\\"]\n\t\trgt: DF.Int\n\t\troot_type: DF.Literal[\\\"\\\", \\\"Asset\\\", \\\"Liability\\\", \\\"Income\\\", \\\"Expense\\\", \\\"Equity\\\"]\n\t\ttax_rate: DF.Float\n\t# end: auto-generated types\n\n\tnsm_parent_field = \\\"parent_account\\\"\n\n\tdef on_update(self):\n\t\tif frappe.local.flags.ignore_update_nsm:\n\t\t\treturn\n\t\telse:\n\t\t\tsuper().on_update()\n\n\tdef onload(self):\n\t\tfrozen_accounts_modifier = frappe.db.get_single_value(\\\"Accounts Settings\\\", \\\"frozen_accounts_modifier\\\")\n\t\tif not frozen_accounts_modifier or frozen_accounts_modifier in frappe.get_roles():\n\t\t\tself.set_onload(\\\"can_freeze_account\\\", True)\n\n\tdef autoname(self):\n\t\tfrom erpnext.accounts.utils import get_autoname_with_number\n\n\t\tself.name = get_autoname_with_number(self.account_number, self.account_name, self.company)\n\n\tdef validate(self):\n\t\tfrom erpnext.accounts.utils import validate_field_number\n\n\t\tif frappe.local.flags.allow_unverified_charts:\n\t\t\treturn\n\t\tself.validate_parent()\n\t\tself.validate_parent_child_account_type()\n\t\tself.validate_root_details()\n\t\tvalidate_field_number(\\\"Account\\\", self.name, self.account_number, self.company, \\\"account_number\\\")\n\t\tself.validate_group_or_ledger()\n\t\tself.set_root_and_report_type()\n\t\tself.validate_mandatory()\n\t\tself.validate_frozen_accounts_modifier()\n\t\tself.validate_balance_must_be_debit_or_credit()\n\t\tself.validate_account_currency()\n\t\tself.validate_root_company_and_sync_account_to_children()\n\t\tself.validate_receivable_payable_account_type()\n\n\tdef validate_parent_child_account_type(self):\n\t\tif self.parent_account:\n\t\t\tif self.account_type in [\n\t\t\t\t\\\"Direct Income\\\",\n\t\t\t\t\\\"Indirect Income\\\",\n\t\t\t\t\\\"Current Asset\\\",\n\t\t\t\t\\\"Current Liability\\\",\n\t\t\t\t\\\"Direct Expense\\\",\n\t\t\t\t\\\"Indirect Expense\\\",\n\t\t\t]:\n\t\t\t\tparent_account_type = frappe.db.get_value(\\\"Account\\\", self.parent_account, [\\\"account_type\\\"])\n\t\t\t\tif parent_account_type == self.account_type:\n\t\t\t\t\tthrow(_(\\\"Only Parent can be of type {0}\\\").format(self.account_type))\n\n\tdef validate_parent(self):\n\t\t\\\"\\\"\\\"Fetch Parent Details and validate parent account\\\"\\\"\\\"\n\t\tif self.parent_account:\n\t\t\tpar = frappe.get_cached_value(\n\t\t\t\t\\\"Account\\\", self.parent_account, [\\\"name\\\", \\\"is_group\\\", \\\"company\\\"], as_dict=1\n\t\t\t)\n\t\t\tif not par:\n\t\t\t\tthrow(\n\t\t\t\t\t_(\\\"Account {0}: Parent account {1} does not exist\\\").format(self.name, self.parent_account)\n\t\t\t\t)\n\t\t\telif par.name == self.name:\n\t\t\t\tthrow(_(\\\"Account {0}: You can not assign itself as parent account\\\").format(self.name))\n\t\t\telif not par.is_group:\n\t\t\t\tthrow(\n\t\t\t\t\t_(\\\"Account {0}: Parent account {1} can not be a ledger\\\").format(\n\t\t\t\t\t\tself.name, self.parent_account\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\telif par.company != self.company:\n\t\t\t\tthrow(\n\t\t\t\t\t_(\\\"Account {0}: Parent account {1} does not belong to company: {2}\\\").format(\n\t\t\t\t\t\tself.name, self.parent_account, self.company\n\t\t\t\t\t)\n\t\t\t\t)\n\n\tdef set_root_and_report_type(self):\n\t\tif self.parent_account:\n\t\t\tpar = frappe.get_cached_value(\n\t\t\t\t\\\"Account\\\", self.parent_account, [\\\"report_type\\\", \\\"root_type\\\"], as_dict=1\n\t\t\t)\n\n\t\t\tif par.report_type:\n\t\t\t\tself.report_type = par.report_type\n\t\t\tif par.root_type:\n\t\t\t\tself.root_type = par.root_type\n\n\t\tif self.is_group:\n\t\t\tdb_value = self.get_doc_before_save()\n\t\t\tif db_value:\n\t\t\t\tif self.report_type != db_value.report_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set report_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.report_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\t\t\t\tif self.root_type != db_value.root_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set root_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.root_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\n\t\tif self.root_type and not self.report_type:\n\t\t\tself.report_type = (\n\t\t\t\t\\\"Balance Sheet\\\" if self.root_type in (\\\"Asset\\\", \\\"Liability\\\", \\\"Equity\\\") else \\\"Profit and Loss\\\"\n\t\t\t)\n\n\n\n", "CodeBleu_score": 26.90567175724602}, {"code": "def validate_receivable_payable_account_type(self)\n\tn\t\t\t\\\"Expense Account\\\",\n\t\t\t\\\"Expenses Included In Asset Valuation\\\",\n\t\t\t\\\"Expenses Included In Valuation\\\",\n\t\t\t\\\"Fixed Asset\\\",\n\t\t\t\\\"Income Account\\\",\n\t\t\t\\\"Indirect Expense\\\",\n\t\t\t\\\"Indirect Income\\\",\n\t\t\t\\\"Liability\\\",\n\t\t\t\\\"Payable\\\",\n\t\t\t\\\"Receivable\\\",\n\t\t\t\\\"Round Off\\\",\n\t\t\t\\\"Stock\\\",\n\t\t\t\\\"Stock Adjustment\\\",\n\t\t\t\\\"Stock Received But Not Billed\\\",\n\t\t\t\\\"Service Received But Not Billed\\\",\n\t\t\t\\\"Tax\\\",\n\t\t\t\\\"Temporary\\\",\n\t\t]\n\t\tbalance_must_be: DF.Literal[\\\"\\\", \\\"Debit\\\", \\\"Credit\\\"]\n\t\tcompany: DF.Link\n\t\tdisabled: DF.Check\n\t\tfreeze_account: DF.Literal[\\\"No\\\", \\\"Yes\\\"]\n\t\tinclude_in_gross: DF.Check\n\t\tis_group: DF.Check\n\t\tlft: DF.Int\n\t\told_parent: DF.Data | None\n\t\tparent_account: DF.Link\n\t\treport_type: DF.Literal[\\\"\\\", \\\"Balance Sheet\\\", \\\"Profit and Loss\\\"]\n\t\trgt: DF.Int\n\t\troot_type: DF.Literal[\\\"\\\", \\\"Asset\\\", \\\"Liability\\\", \\\"Income\\\", \\\"Expense\\\", \\\"Equity\\\"]\n\t\ttax_rate: DF.Float\n\t# end: auto-generated types\n\n\tnsm_parent_field = \\\"parent_account\\\"\n\n\tdef on_update(self):\n\t\tif frappe.local.flags.ignore_update_nsm:\n\t\t\treturn\n\t\telse:\n\t\t\tsuper().on_update()\n\n\tdef onload(self):\n\t\tfrozen_accounts_modifier = frappe.db.get_single_value(\\\"Accounts Settings\\\", \\\"frozen_accounts_modifier\\\")\n\t\tif not frozen_accounts_modifier or frozen_accounts_modifier in frappe.get_roles():\n\t\t\tself.set_onload(\\\"can_freeze_account\\\", True)\n\n\tdef autoname(self):\n\t\tfrom erpnext.accounts.utils import get_autoname_with_number\n\n\t\tself.name = get_autoname_with_number(self.account_number, self.account_name, self.company)\n\n\tdef validate(self):\n\t\tfrom erpnext.accounts.utils import validate_field_number\n\n\t\tif frappe.local.flags.allow_unverified_charts:\n\t\t\treturn\n\t\tself.validate_parent()\n\t\tself.validate_parent_child_account_type()\n\t\tself.validate_root_details()\n\t\tvalidate_field_number(\\\"Account\\\", self.name, self.account_number, self.company, \\\"account_number\\\")\n\t\tself.validate_group_or_ledger()\n\t\tself.set_root_and_report_type()\n\t\tself.validate_mandatory()\n\t\tself.validate_frozen_accounts_modifier()\n\t\tself.validate_balance_must_be_debit_or_credit()\n\t\tself.validate_account_currency()\n\t\tself.validate_root_company_and_sync_account_to_children()\n\t\tself.validate_receivable_payable_account_type()\n\n\tdef validate_parent_child_account_type(self):\n\t\tif self.parent_account:\n\t\t\tif self.account_type in [\n\t\t\t\t\\\"Direct Income\\\",\n\t\t\t\t\\\"Indirect Income\\\",\n\t\t\t\t\\\"Current Asset\\\",\n\t\t\t\t\\\"Current Liability\\\",\n\t\t\t\t\\\"Direct Expense\\\",\n\t\t\t\t\\\"Indirect Expense\\\",\n\t\t\t]:\n\t\t\t\tparent_account_type = frappe.db.get_value(\\\"Account\\\", self.parent_account, [\\\"account_type\\\"])\n\t\t\t\tif parent_account_type == self.account_type:\n\t\t\t\t\tthrow(_(\\\"Only Parent can be of type {0}\\\").format(self.account_type))\n\n\tdef validate_parent(self):\n\t\t\\\"\\\"\\\"Fetch Parent Details and validate parent account\\\"\\\"\\\"\n\t\tif self.parent_account:\n\t\t\tpar = frappe.get_cached_value(\n\t\t\t\t\\\"Account\\\", self.parent_account, [\\\"name\\\", \\\"is_group\\\", \\\"company\\\"], as_dict=1\n\t\t\t)\n\t\t\tif not par:\n\t\t\t\tthrow(\n\t\t\t\t\t_(\\\"Account {0}: Parent account {1} does not exist\\\").format(self.name, self.parent_account)\n\t\t\t\t)\n\t\t\telif par.name == self.name:\n\t\t\t\tthrow(_(\\\"Account {0}: You can not assign itself as parent account\\\").format(self.name))\n\t\t\telif not par.is_group:\n\t\t\t\tthrow(\n\t\t\t\t\t_(\\\"Account {0}: Parent account {1} can not be a ledger\\\").format(\n\t\t\t\t\t\tself.name, self.parent_account\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\telif par.company != self.company:\n\t\t\t\tthrow(\n\t\t\t\t\t_(\\\"Account {0}: Parent account {1} does not belong to company: {2}\\\").format(\n\t\t\t\t\t\tself.name, self.parent_account, self.company\n\t\t\t\t\t)\n\t\t\t\t)\n\n\tdef set_root_and_report_type(self):\n\t\tif self.parent_account:\n\t\t\tpar = frappe.get_cached_value(\n\t\t\t\t\\\"Account\\\", self.parent_account, [\\\"report_type\\\", \\\"root_type\\\"], as_dict=1\n\t\t\t)\n\n\t\t\tif par.report_type:\n\t\t\t\tself.report_type = par.report_type\n\t\t\tif par.root_type:\n\t\t\t\tself.root_type = par.root_type\n\n\t\tif self.is_group:\n\t\t\tdb_value = self.get_doc_before_save()\n\t\t\tif db_value:\n\t\t\t\tif self.report_type != db_value.report_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set report_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.report_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\t\t\t\tif self.root_type != db_value.root_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set root_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.root_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\n\t\tif self.root_type and not self.report_type:\n\t\t\tself.report_type = (\n\t\t\t\t\\\"Balance Sheet\\\" if self.root_type in (\\\"Asset\\\", \\\"Liability\\\", \\\"Equity\\\") else \\\"Profit and Loss\\\"\n\t\t\t)\n\n\n\n", "CodeBleu_score": 26.90567175724602}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\tif self.report_type != db_value.report_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set report_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.report_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\t\t\t\tif self.root_type != db_value.root_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set root_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.root_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\n\t\tif self.root_type and not self.report_type:\n\t\t\tself.report_type = (\n\t\t\t\t\\\"Balance Sheet\\\" if self.root_type in (\\\"Asset\\\", \\\"Liability\\\", \\\"Equity\\\") else \\\"Profit and Loss\\\"\n\t\t\t)\n\n\tdef validate_receivable_payable_account_type(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\t\treceivable_payable_types = [\\\"Receivable\\\", \\\"Payable\\\"]\n\t\tif (\n\t\t\tdoc_before_save\n\t\t\tand doc_before_save.account_type in receivable_payable_types\n\t\t\tand doc_before_save.account_type != self.account_type\n\t\t):\n\t\t\t# check for ledger entries\n\t\t\tif frappe.db.get_all(\\\"GL Entry\\\", filters={\\\"account\\\": self.name, \\\"is_cancelled\\\": 0}, limit=1):\n\t\t\t\tmsg = _(\n\t\t\t\t\t\\\"There are ledger entries against this account. Changing {0} to non-{1} in live system will cause incorrect output in 'Accounts {2}' report\\\"\n\t\t\t\t).format(\n\t\t\t\t\tfrappe.bold(\\\"Account Type\\\"), doc_before_save.account_type, doc_before_save.account_type\n\t\t\t\t)\n\t\t\t\tfrappe.msgprint(msg)\n\t\t\t\tself.add_comment(\\\"Comment\\\", msg)\n\n\tdef validate_root_details(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\n\t\tif doc_before_save and not doc_before_save.parent_account:\n\t\t\tthrow(_(\\\"Root cannot be edited.\\\"), RootNotEditable)\n\n\t\tif not self.parent_account and not self.is_group:\n\t\t\tthrow(_(\\\"The root account {0} must be a group\\\").format(frappe.bold(self.name)))\n\n\tdef validate_root_company_and_sync_account_to_children(self):\n\t\t# ignore validation while creating new compnay or while syncing to child companies\n\t\tif frappe.local.flags.ignore_root_company_validation or self.flags.ignore_root_company_validation:\n\t\t\treturn\n\t\tancestors = get_root_company(self.company)\n\t\tif ancestors:\n\t\t\tif frappe.get_cached_value(\n\t\t\t\t\\\"Company\\\", self.company, \\\"allow_account_creation_against_child_company\\\"\n\t\t\t):\n\t\t\t\treturn\n\t\t\tif not frappe.db.get_value(\n\t\t\t\t\\\"Account\\\", {\\\"account_name\\\": self.account_name, \\\"company\\\": ancestors[0]}, \\\"name\\\"\n\t\t\t):\n\t\t\t\tfrappe.throw(_(\\\"Please add the account to root level Company - {}\\\").format(ancestors[0]))\n\t\telif self.parent_account:\n\t\t\tdescendants = get_descendants_of(\\\"Company\\\", self.company)\n\t\t\tif not descendants:\n\t\t\t\treturn\n\t\t\tparent_acc_name_map = {}\n\t\t\tparent_acc_name, parent_acc_number = frappe.get_cached_value(\n\t\t\t\t\\\"Account\\\", self.parent_account, [\\\"account_name\\\", \\\"account_number\\\"]\n\t\t\t)\n\t\t\tfilters = {\n\t\t\t\t\\\"company\\\": [\\\"in\\\", descendants],\n\t\t\t\t\\\"account_name\\\": parent_acc_name,\n\t\t\t}\n\t\t\tif parent_acc_number:\n\t\t\t\tfilters[\\\"account_number\\\"] = parent_acc_number\n\n\t\t\tfor d in frappe.db.get_values(\n\t\t\t\t\\\"Account\\\", filters=filters, fieldname=[\\\"company\\\", \\\"name\\\"], as_dict=True\n\t\t\t):\n\t\t\t\tparent_acc_name_map[d[\\\"company\\\"]] = d[\\\"name\\\"]\n\n\t\t\tif not parent_acc_name_map:\n\t\t\t\treturn\n\n\t\t\tself.create_account_for_child_company(parent_acc_name_map, descendants, parent_acc_name)\n\n\tdef validate_group_or_ledger(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\t\tif not doc_before_save or cint(doc_before_save.is_group) == cint(self.is_group):\n\t\t\treturn\n\n\t\tif self.check_gle_exists():\n\t\t\tthrow(_(\\\"Account with existing transaction cannot be converted to ledger\\\"))\n\t\telif self.is_group:\n\t\t\tif self.account_type and not self.flags.exclude_account_type_check:\n\t\t\t\tthrow(_(\\\"Cannot covert to Group because Account Type is selected.\\\"))\n\t\telif self.check_if_child_exists():\n\t\t\tthrow(_(\\\"Account with child nodes cannot be set as ledger\\\"))\n\n\tdef validate_frozen_accounts_modifier(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\t\tif not doc_before_save or doc_before_save.freeze_account == self.freeze_account:\n\t\t\treturn\n\n\t\tfrozen_accounts_modifier = frappe.get_cached_value(\n\t\t\t\\\"Accounts Settings\\\", \\\"Accounts Settings\\\", \\\"frozen_accounts_modifier\\\"\n\t\t)\n\t\tif not frozen_accounts_modifier or frozen_accounts_modifier not in frappe.get_roles():\n\t\t\tthrow(_(\\\"You are not authorized to set Frozen value\\\"))\n\n\tdef validate_balance_must_be_debit_or_credit(self):\n\t\tfrom erpnext.accounts.utils import get_balance_on\n\n\t\tif not self.get(\\\"__islocal\\\") and self.balance_must_be:\n\t\t\taccount_balance = get_balance_on(self.name)\n\n\t\t\tif account_balance > 0 and self.balance_must_be == \\\"Credit\\\":\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Account balance already in Debit, you are not allowed to set 'Balance Must Be' as 'Credit'\\\"\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\telif account_balance < 0 and self.balance_must_be == \\\"Debit\\\":\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Account balance already in Credit, you are not allowed to set 'Balance Must Be' as 'Debit'\\\"\n\t\t\t\t\t)\n\t\t\t\t)\n\n\n\n", "CodeBleu_score": 25.3955121542445}, {"code": "def validate_account_currency(self)\n\tif self.report_type != db_value.report_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set report_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.report_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\t\t\t\tif self.root_type != db_value.root_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set root_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.root_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\n\t\tif self.root_type and not self.report_type:\n\t\t\tself.report_type = (\n\t\t\t\t\\\"Balance Sheet\\\" if self.root_type in (\\\"Asset\\\", \\\"Liability\\\", \\\"Equity\\\") else \\\"Profit and Loss\\\"\n\t\t\t)\n\n\tdef validate_receivable_payable_account_type(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\t\treceivable_payable_types = [\\\"Receivable\\\", \\\"Payable\\\"]\n\t\tif (\n\t\t\tdoc_before_save\n\t\t\tand doc_before_save.account_type in receivable_payable_types\n\t\t\tand doc_before_save.account_type != self.account_type\n\t\t):\n\t\t\t# check for ledger entries\n\t\t\tif frappe.db.get_all(\\\"GL Entry\\\", filters={\\\"account\\\": self.name, \\\"is_cancelled\\\": 0}, limit=1):\n\t\t\t\tmsg = _(\n\t\t\t\t\t\\\"There are ledger entries against this account. Changing {0} to non-{1} in live system will cause incorrect output in 'Accounts {2}' report\\\"\n\t\t\t\t).format(\n\t\t\t\t\tfrappe.bold(\\\"Account Type\\\"), doc_before_save.account_type, doc_before_save.account_type\n\t\t\t\t)\n\t\t\t\tfrappe.msgprint(msg)\n\t\t\t\tself.add_comment(\\\"Comment\\\", msg)\n\n\tdef validate_root_details(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\n\t\tif doc_before_save and not doc_before_save.parent_account:\n\t\t\tthrow(_(\\\"Root cannot be edited.\\\"), RootNotEditable)\n\n\t\tif not self.parent_account and not self.is_group:\n\t\t\tthrow(_(\\\"The root account {0} must be a group\\\").format(frappe.bold(self.name)))\n\n\tdef validate_root_company_and_sync_account_to_children(self):\n\t\t# ignore validation while creating new compnay or while syncing to child companies\n\t\tif frappe.local.flags.ignore_root_company_validation or self.flags.ignore_root_company_validation:\n\t\t\treturn\n\t\tancestors = get_root_company(self.company)\n\t\tif ancestors:\n\t\t\tif frappe.get_cached_value(\n\t\t\t\t\\\"Company\\\", self.company, \\\"allow_account_creation_against_child_company\\\"\n\t\t\t):\n\t\t\t\treturn\n\t\t\tif not frappe.db.get_value(\n\t\t\t\t\\\"Account\\\", {\\\"account_name\\\": self.account_name, \\\"company\\\": ancestors[0]}, \\\"name\\\"\n\t\t\t):\n\t\t\t\tfrappe.throw(_(\\\"Please add the account to root level Company - {}\\\").format(ancestors[0]))\n\t\telif self.parent_account:\n\t\t\tdescendants = get_descendants_of(\\\"Company\\\", self.company)\n\t\t\tif not descendants:\n\t\t\t\treturn\n\t\t\tparent_acc_name_map = {}\n\t\t\tparent_acc_name, parent_acc_number = frappe.get_cached_value(\n\t\t\t\t\\\"Account\\\", self.parent_account, [\\\"account_name\\\", \\\"account_number\\\"]\n\t\t\t)\n\t\t\tfilters = {\n\t\t\t\t\\\"company\\\": [\\\"in\\\", descendants],\n\t\t\t\t\\\"account_name\\\": parent_acc_name,\n\t\t\t}\n\t\t\tif parent_acc_number:\n\t\t\t\tfilters[\\\"account_number\\\"] = parent_acc_number\n\n\t\t\tfor d in frappe.db.get_values(\n\t\t\t\t\\\"Account\\\", filters=filters, fieldname=[\\\"company\\\", \\\"name\\\"], as_dict=True\n\t\t\t):\n\t\t\t\tparent_acc_name_map[d[\\\"company\\\"]] = d[\\\"name\\\"]\n\n\t\t\tif not parent_acc_name_map:\n\t\t\t\treturn\n\n\t\t\tself.create_account_for_child_company(parent_acc_name_map, descendants, parent_acc_name)\n\n\tdef validate_group_or_ledger(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\t\tif not doc_before_save or cint(doc_before_save.is_group) == cint(self.is_group):\n\t\t\treturn\n\n\t\tif self.check_gle_exists():\n\t\t\tthrow(_(\\\"Account with existing transaction cannot be converted to ledger\\\"))\n\t\telif self.is_group:\n\t\t\tif self.account_type and not self.flags.exclude_account_type_check:\n\t\t\t\tthrow(_(\\\"Cannot covert to Group because Account Type is selected.\\\"))\n\t\telif self.check_if_child_exists():\n\t\t\tthrow(_(\\\"Account with child nodes cannot be set as ledger\\\"))\n\n\tdef validate_frozen_accounts_modifier(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\t\tif not doc_before_save or doc_before_save.freeze_account == self.freeze_account:\n\t\t\treturn\n\n\t\tfrozen_accounts_modifier = frappe.get_cached_value(\n\t\t\t\\\"Accounts Settings\\\", \\\"Accounts Settings\\\", \\\"frozen_accounts_modifier\\\"\n\t\t)\n\t\tif not frozen_accounts_modifier or frozen_accounts_modifier not in frappe.get_roles():\n\t\t\tthrow(_(\\\"You are not authorized to set Frozen value\\\"))\n\n\tdef validate_balance_must_be_debit_or_credit(self):\n\t\tfrom erpnext.accounts.utils import get_balance_on\n\n\t\tif not self.get(\\\"__islocal\\\") and self.balance_must_be:\n\t\t\taccount_balance = get_balance_on(self.name)\n\n\t\t\tif account_balance > 0 and self.balance_must_be == \\\"Credit\\\":\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Account balance already in Debit, you are not allowed to set 'Balance Must Be' as 'Credit'\\\"\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\telif account_balance < 0 and self.balance_must_be == \\\"Debit\\\":\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Account balance already in Credit, you are not allowed to set 'Balance Must Be' as 'Debit'\\\"\n\t\t\t\t\t)\n\t\t\t\t)\n\n\n\n", "CodeBleu_score": 25.3955121542445}, {"code": "def validate_account_currency(self)\n\tif self.report_type != db_value.report_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set report_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.report_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\t\t\t\tif self.root_type != db_value.root_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set root_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.root_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\n\t\tif self.root_type and not self.report_type:\n\t\t\tself.report_type = (\n\t\t\t\t\\\"Balance Sheet\\\" if self.root_type in (\\\"Asset\\\", \\\"Liability\\\", \\\"Equity\\\") else \\\"Profit and Loss\\\"\n\t\t\t)\n\n\tdef validate_receivable_payable_account_type(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\t\treceivable_payable_types = [\\\"Receivable\\\", \\\"Payable\\\"]\n\t\tif (\n\t\t\tdoc_before_save\n\t\t\tand doc_before_save.account_type in receivable_payable_types\n\t\t\tand doc_before_save.account_type != self.account_type\n\t\t):\n\t\t\t# check for ledger entries\n\t\t\tif frappe.db.get_all(\\\"GL Entry\\\", filters={\\\"account\\\": self.name, \\\"is_cancelled\\\": 0}, limit=1):\n\t\t\t\tmsg = _(\n\t\t\t\t\t\\\"There are ledger entries against this account. Changing {0} to non-{1} in live system will cause incorrect output in 'Accounts {2}' report\\\"\n\t\t\t\t).format(\n\t\t\t\t\tfrappe.bold(\\\"Account Type\\\"), doc_before_save.account_type, doc_before_save.account_type\n\t\t\t\t)\n\t\t\t\tfrappe.msgprint(msg)\n\t\t\t\tself.add_comment(\\\"Comment\\\", msg)\n\n\tdef validate_root_details(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\n\t\tif doc_before_save and not doc_before_save.parent_account:\n\t\t\tthrow(_(\\\"Root cannot be edited.\\\"), RootNotEditable)\n\n\t\tif not self.parent_account and not self.is_group:\n\t\t\tthrow(_(\\\"The root account {0} must be a group\\\").format(frappe.bold(self.name)))\n\n\tdef validate_root_company_and_sync_account_to_children(self):\n\t\t# ignore validation while creating new compnay or while syncing to child companies\n\t\tif frappe.local.flags.ignore_root_company_validation or self.flags.ignore_root_company_validation:\n\t\t\treturn\n\t\tancestors = get_root_company(self.company)\n\t\tif ancestors:\n\t\t\tif frappe.get_cached_value(\n\t\t\t\t\\\"Company\\\", self.company, \\\"allow_account_creation_against_child_company\\\"\n\t\t\t):\n\t\t\t\treturn\n\t\t\tif not frappe.db.get_value(\n\t\t\t\t\\\"Account\\\", {\\\"account_name\\\": self.account_name, \\\"company\\\": ancestors[0]}, \\\"name\\\"\n\t\t\t):\n\t\t\t\tfrappe.throw(_(\\\"Please add the account to root level Company - {}\\\").format(ancestors[0]))\n\t\telif self.parent_account:\n\t\t\tdescendants = get_descendants_of(\\\"Company\\\", self.company)\n\t\t\tif not descendants:\n\t\t\t\treturn\n\t\t\tparent_acc_name_map = {}\n\t\t\tparent_acc_name, parent_acc_number = frappe.get_cached_value(\n\t\t\t\t\\\"Account\\\", self.parent_account, [\\\"account_name\\\", \\\"account_number\\\"]\n\t\t\t)\n\t\t\tfilters = {\n\t\t\t\t\\\"company\\\": [\\\"in\\\", descendants],\n\t\t\t\t\\\"account_name\\\": parent_acc_name,\n\t\t\t}\n\t\t\tif parent_acc_number:\n\t\t\t\tfilters[\\\"account_number\\\"] = parent_acc_number\n\n\t\t\tfor d in frappe.db.get_values(\n\t\t\t\t\\\"Account\\\", filters=filters, fieldname=[\\\"company\\\", \\\"name\\\"], as_dict=True\n\t\t\t):\n\t\t\t\tparent_acc_name_map[d[\\\"company\\\"]] = d[\\\"name\\\"]\n\n\t\t\tif not parent_acc_name_map:\n\t\t\t\treturn\n\n\t\t\tself.create_account_for_child_company(parent_acc_name_map, descendants, parent_acc_name)\n\n\tdef validate_group_or_ledger(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\t\tif not doc_before_save or cint(doc_before_save.is_group) == cint(self.is_group):\n\t\t\treturn\n\n\t\tif self.check_gle_exists():\n\t\t\tthrow(_(\\\"Account with existing transaction cannot be converted to ledger\\\"))\n\t\telif self.is_group:\n\t\t\tif self.account_type and not self.flags.exclude_account_type_check:\n\t\t\t\tthrow(_(\\\"Cannot covert to Group because Account Type is selected.\\\"))\n\t\telif self.check_if_child_exists():\n\t\t\tthrow(_(\\\"Account with child nodes cannot be set as ledger\\\"))\n\n\tdef validate_frozen_accounts_modifier(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\t\tif not doc_before_save or doc_before_save.freeze_account == self.freeze_account:\n\t\t\treturn\n\n\t\tfrozen_accounts_modifier = frappe.get_cached_value(\n\t\t\t\\\"Accounts Settings\\\", \\\"Accounts Settings\\\", \\\"frozen_accounts_modifier\\\"\n\t\t)\n\t\tif not frozen_accounts_modifier or frozen_accounts_modifier not in frappe.get_roles():\n\t\t\tthrow(_(\\\"You are not authorized to set Frozen value\\\"))\n\n\tdef validate_balance_must_be_debit_or_credit(self):\n\t\tfrom erpnext.accounts.utils import get_balance_on\n\n\t\tif not self.get(\\\"__islocal\\\") and self.balance_must_be:\n\t\t\taccount_balance = get_balance_on(self.name)\n\n\t\t\tif account_balance > 0 and self.balance_must_be == \\\"Credit\\\":\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Account balance already in Debit, you are not allowed to set 'Balance Must Be' as 'Credit'\\\"\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\telif account_balance < 0 and self.balance_must_be == \\\"Debit\\\":\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Account balance already in Credit, you are not allowed to set 'Balance Must Be' as 'Debit'\\\"\n\t\t\t\t\t)\n\t\t\t\t)\n\n\n\n", "CodeBleu_score": 25.3955121542445}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\tmerged_entries = {}\n\n    for entry in entries:\n        key = \"\"\n        for dimension in accounting_dimensions:\n            key += entry.get(dimension) + \"-\"\n        key += entry.get(\"account\")\n\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"account\": entry.get(\"account\"),\n                \"account_currency\": entry.get(\"account_currency\"),\n                \"company\": entry.get(\"company\"),\n                \"debit\": 0,\n                \"debit_in_account_currency\": 0,\n                \"credit\": 0,\n                \"credit_in_account_currency\": 0,\n                \"cost_center\": entry.get(\"cost_center\"),\n                \"finance_book\": entry.get(\"finance_book\"),\n                \"project\": entry.get(\"project\"),\n                \"dimensions\": {\n                    \"cost_center\": entry.get(\"cost_center\"),\n                    \"finance_book\": entry.get(\"finance_book\"),\n                    \"project\": entry.get(\"project\"),\n                },\n            }\n\n        if entry.get(\"debit\") > 0:\n            merged_entries[key][\"debit\"] += entry.get(\"debit\")\n            merged_entries[key][\"debit_in_account_currency\"] += entry.get(\n                \"debit_in_account_currency\"\n            )\n        else:\n            merged_entries[key][\"credit\"] += entry.get(\"credit\")\n            merged_entries[key][\"credit_in_account_currency\"] += entry.get(\n                \"credit_in_account_currency\"\n            )\n\n    return merged_entries\n\n", "CodeBleu_score": 41.22034813571979}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\tmerged_entries = {}\n\n    for entry in entries:\n        key = entry.get(\"account\")\n\n        for dimension in accounting_dimensions:\n            key += \"-\" + str(entry.get(dimension))\n\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"account\": entry.get(\"account\"),\n                \"account_currency\": entry.get(\"account_currency\"),\n                \"credit\": 0,\n                \"credit_in_account_currency\": 0,\n                \"debit\": 0,\n                \"debit_in_account_currency\": 0,\n                \"dimensions\": {},\n            }\n\n        merged_entries[key][\"credit\"] += entry.get(\"credit\")\n        merged_entries[key][\"credit_in_account_currency\"] += entry.get(\n            \"credit_in_account_currency\"\n        )\n        merged_entries[key][\"debit\"] += entry.get(\"debit\")\n        merged_entries[key][\"debit_in_account_currency\"] += entry.get(\n            \"debit_in_account_currency\"\n        )\n\n        for dimension in accounting_dimensions:\n            merged_entries[key][\"dimensions\"][dimension] = entry.get(dimension)\n\n    return merged_entries\n\n", "CodeBleu_score": 44.00941469048835}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\tmerged_entries = {}\n    for entry in entries:\n        key = get_account_closing_balance_key(entry, accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"account\": entry.account,\n                \"account_currency\": entry.account_currency,\n                \"company\": entry.company,\n                \"debit\": entry.debit,\n                \"debit_in_account_currency\": entry.debit_in_account_currency,\n                \"credit\": entry.credit,\n                \"credit_in_account_currency\": entry.credit_in_account_currency,\n                \"dimensions\": {},\n            }\n            for dimension in accounting_dimensions:\n                merged_entries[key][\"dimensions\"][dimension] = entry.get(dimension)\n        else:\n            merged_entries[key][\"debit\"] += entry.debit\n            merged_entries[key][\"debit_in_account_currency\"] += entry.debit_in_account_currency\n            merged_entries[key][\"credit\"] += entry.credit\n            merged_entries[key][\"credit_in_account_currency\"] += entry.credit_in_account_currency\n    return merged_entries\n\n", "CodeBleu_score": 35.48033260449625}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\tdef _get_supplier_info(self):\n        \"\"\"This function returns the supplier information from the transaction. If the transaction is a supplier payment, it retrieves the supplier information from the party. If the transaction is a buying invoice, it retrieves the supplier information from the supplier field.\"\"\"\n        if self.doctype == \"Payment Entry\":\n            supplier = self.party\n            supplier_name = self.party_name\n        elif self.doctype in [\"Purchase Invoice\", \"Purchase Order\", \"Purchase Receipt\"]:\n            supplier = self.supplier\n            supplier_name = self.supplier_name\n        return supplier, supplier_name\n\n    def _get_hold_type(self):\n        \"\"\"This function returns the hold type of the transaction. If the transaction is a supplier payment, it returns the hold type of the payment entry. If the transaction is a buying invoice, it returns the hold type of the supplier.\"\"\"\n        if self.doctype == \"Payment Entry\":\n            hold_type = self.hold_type\n        elif self.doctype in [\"Purchase Invoice\", \"Purchase Order\", \"Purchase Receipt\"]:\n            hold_type = frappe.db.get_value(\n                \"Supplier\", self.supplier, \"on_hold\", cache=True\n            )\n        return hold_type\n\n    def _get_release_date(self):\n        \"\"\"This function returns the release date of the transaction. If the transaction is a supplier payment, it returns the release date of the payment entry. If the transaction is a buying invoice, it returns the release date of the supplier.\"\"\"\n        if self.doctype == \"Payment Entry\":\n            release_date = self.release_date\n        elif self.doctype in [\"Purchase Invoice\", \"Purchase Order\", \"Purchase Receipt\"]:\n            release_date = frappe.db.get_value(\n                \"Supplier\", self.supplier, \"release_date\", cache=True\n            )\n        return release_date\n\n    def _get_current_date():\n        \"\"\"This function returns the current date.\"\"\"\n        return", "CodeBleu_score": 35.50236653819485}, {"code": "def ensure_supplier_is_not_blocked(self)\n\tif self.doctype in [\"Purchase Invoice\", \"Purchase Receipt\", \"Payment Entry\"]:\n        supplier = self.supplier\n        supplier_type = self.supplier_type\n        supplier_block_status = frappe.db.get_value(\n            \"Supplier\", supplier, \"on_hold\", cache=True\n        )\n        if supplier_block_status and supplier_block_status == 1:\n            hold_type = frappe.db.get_value(\n                \"Supplier\", supplier, \"hold_type\", cache=True\n            )\n            release_date = frappe.db.get_value(\n                \"Supplier\", supplier, \"release_date\", cache=True\n            )\n            if hold_type == \"All\" or hold_type == \"Payments\":\n                if getdate(self.posting_date) < getdate(release_date):\n                    frappe.throw(\n                        _(\n                            \"The Supplier {0} is on hold till {1}. Hence this transaction cannot be created.\"\n                        ).format(supplier, release_date)\n                    )\n\n", "CodeBleu_score": 32.428699527520166}, {"code": "def ensure_supplier_is_not_blocked(self)\n\tif self.doctype in (\"Payment Entry\", \"Purchase Invoice\", \"Purchase Receipt\"):\n        supplier_status = frappe.db.get_value(\n            \"Supplier\", self.supplier, \"on_hold\", cache=True\n        )\n        if supplier_status == 1:\n            release_date = frappe.db.get_value(\n                \"Supplier\", self.supplier, \"release_date\", cache=True\n            )\n            if getdate(self.posting_date) < getdate(release_date):\n                frappe.throw(\n                    _(\n                        \"Supplier {0} is on hold till {1}.\"\n                    ).format(self.supplier, release_date)\n                )\n\n", "CodeBleu_score": 26.03603827904722}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t()\n\n\t\tself.disable_pricing_rule_on_internal_transfer()\n\t\tself.disable_tax_included_prices_for_internal_transfer()\n\t\tself.set_incoming_rate()\n\t\tself.init_internal_values()\n\n\t\tif self.meta.get_field(\\\"currency\\\"):\n\t\t\tself.calculate_taxes_and_totals()\n\n\t\t\tif not self.meta.get_field(\\\"is_return\\\") or not self.is_return:\n\t\t\t\tself.validate_value(\\\"base_grand_total\\\", \\\">=\\\", 0)\n\n\t\t\tvalidate_return(self)\n\n\t\tself.validate_all_documents_schedule()\n\n\t\tif self.meta.get_field(\\\"taxes_and_charges\\\"):\n\t\t\tself.validate_enabled_taxes_and_charges()\n\t\t\tself.validate_tax_account_company()\n\n\t\tself.validate_party()\n\t\tself.validate_currency()\n\t\tself.validate_party_account_currency()\n\t\tself.validate_return_against_account()\n\n\t\tif self.doctype in [\\\"Purchase Invoice\\\", \\\"Sales Invoice\\\"]:\n\t\t\tif invalid_advances := [x for x in self.advances if not x.reference_type or not x.reference_name]:\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Rows: {0} in {1} section are Invalid. Reference Name should point to a valid Payment Entry or Journal Entry.\\\"\n\t\t\t\t\t).format(\n\t\t\t\t\t\tfrappe.bold(comma_and([x.idx for x in invalid_advances])),\n\t\t\t\t\t\tfrappe.bold(_(\\\"Advance Payments\\\")),\n\t\t\t\t\t)\n\t\t\t\t)\n\n\t\t\tif self.get(\\\"is_return\\\") and self.get(\\\"return_against\\\") and not self.get(\\\"is_pos\\\"):\n\t\t\t\tif self.get(\\\"update_outstanding_for_self\\\"):\n\t\t\t\t\tdocument_type = \\\"Credit Note\\\" if self.doctype == \\\"Sales Invoice\\\" else \\\"Debit Note\\\"\n\t\t\t\t\tfrappe.msgprint(\n\t\t\t\t\t\t_(\n\t\t\t\t\t\t\t\\\"We can see {0} is made against {1}. If you want {1}'s outstanding to be updated, uncheck '{2}' checkbox. <br><br> Or you can use {3} tool to reconcile against {1} later.\\\"\n\t\t\t\t\t\t).format(\n\t\t\t\t\t\t\tfrappe.bold(document_type),\n\t\t\t\t\t\t\tget_link_to_form(self.doctype, self.get(\\\"return_against\\\")),\n\t\t\t\t\t\t\tfrappe.bold(\\\"Update Outstanding for Self\\\"),\n\t\t\t\t\t\t\tget_link_to_form(\\\"Payment Reconciliation\\\"),\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\n\t\t\tpos_check_field = \\\"is_pos\\\" if self.doctype == \\\"Sales Invoice\\\" else \\\"is_paid\\\"\n\t\t\tif cint(self.allocate_advances_automatically) and not cint(self.get(pos_check_field)):\n\t\t\t\tself.set_advances()\n\n\t\t\tself.set_advance_gain_or_loss()\n\n\t\t\tif self.is_return:\n\t\t\t\tself.validate_qty()\n\t\t\telse:\n\t\t\t\tself.validate_deferred_start_and_end_date()\n\n\t\t\tself.validate_deferred_income_expense_account()\n\t\t\tself.set_inter_company_account()\n\n\t\tif self.doctype == \\\"Purchase Invoice\\\":\n\t\t\tself.calculate_paid_amount()\n\t\t\t# apply tax withholding only if checked and applicable\n\t\t\tself.set_tax_withholding()\n\n\t\twith temporary_flag(\\\"company\\\", self.company):\n\t\t\tvalidate_regional(self)\n\t\t\tvalidate_einvoice_fields(self)\n\n\t\tif self.doctype != \\\"Material Request\\\" and not self.ignore_pricing_rule:\n\t\t\tapply_pricing_rule_on_transaction(self)\n\n\t\tself.set_total_in_words()\n\t\tself.set_default_letter_head()\n\n\tdef set_default_letter_head(self):\n\t\tif hasattr(self, \\\"letter_head\\\") and not self.letter_head:\n\t\t\tself.letter_head = frappe.db.get_value(\\\"Company\\\", self.company, \\\"default_letter_head\\\")\n\n\tdef init_internal_values(self):\n\t\t# init all the internal values as 0 on sa\n\t\tif self.docstatus.is_draft():\n\t\t\t# TODO: Add all such pending values here\n\t\t\tfields = [\\\"billed_amt\\\", \\\"delivered_qty\\\"]\n\t\t\tfor item in self.get(\\\"items\\\"):\n\t\t\t\tfor field in fields:\n\t\t\t\t\tif hasattr(item, field):\n\t\t\t\t\t\titem.set(field, 0)\n\n\tdef before_cancel(self):\n\t\tvalidate_einvoice_fields(self)\n\n\tdef _remove_references_in_unreconcile(self):\n\t\tupe = frappe.qb.DocType(\\\"Unreconcile Payment Entries\\\")\n\t\trows = (\n\t\t\tfrappe.qb.from_(upe)\n\t\t\t.select(upe.name, upe.parent)\n\t\t\t.where((upe.reference_doctype == self.doctype) & (upe.reference_name == self.name))\n\t\t\t.run(as_dict=True)\n\t\t)\n\n\t\tif rows:\n\t\t\treferences_map = frappe._dict()\n\t\t\tfor x in rows:\n\t\t\t\treferences_map.setdefault(x.parent, []).append(x.name)\n\n\t\t\tfor doc, rows in references_map.items():\n\t\t\t\tunreconcile_doc = frappe.get_doc(\\\"Unreconcile Payment\\\", doc)\n\t\t\t\tfor row in rows:\n\t\t\t\t\tunreconcile_doc.remove(unreconcile_doc.get(\\\"allocations\\\", {\\\"name\\\": row})[0])\n\n\t\t\t\tunreconcile_doc.flags.ignore_validate_update_after_submit = True\n\t\t\t\tunreconcile_doc.flags.ignore_links = True\n\t\t\t\tunreconcile_doc.save(ignore_permissions=True)\n\n\t\t# delete docs upon parent doc deletion\n\t\tunreconcile_docs = frappe.db.get_all(\\\"Unreconcile Payment\\\", filters={\\\"voucher_no\\\": self.name})\n\t\tfor x in unreconcile_docs:\n\t\t\t_doc = frappe.get_doc(\\\"Unreconcile Payment\\\", x.name)\n\t\t\tif _doc.docstatus == 1:\n\t\t\t\t_doc.cancel()\n\t\t\t_doc.delete()\n\n\n\n", "CodeBleu_score": 33.701376201766806}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t()\n\n\t\tself.disable_pricing_rule_on_internal_transfer()\n\t\tself.disable_tax_included_prices_for_internal_transfer()\n\t\tself.set_incoming_rate()\n\t\tself.init_internal_values()\n\n\t\tif self.meta.get_field(\\\"currency\\\"):\n\t\t\tself.calculate_taxes_and_totals()\n\n\t\t\tif not self.meta.get_field(\\\"is_return\\\") or not self.is_return:\n\t\t\t\tself.validate_value(\\\"base_grand_total\\\", \\\">=\\\", 0)\n\n\t\t\tvalidate_return(self)\n\n\t\tself.validate_all_documents_schedule()\n\n\t\tif self.meta.get_field(\\\"taxes_and_charges\\\"):\n\t\t\tself.validate_enabled_taxes_and_charges()\n\t\t\tself.validate_tax_account_company()\n\n\t\tself.validate_party()\n\t\tself.validate_currency()\n\t\tself.validate_party_account_currency()\n\t\tself.validate_return_against_account()\n\n\t\tif self.doctype in [\\\"Purchase Invoice\\\", \\\"Sales Invoice\\\"]:\n\t\t\tif invalid_advances := [x for x in self.advances if not x.reference_type or not x.reference_name]:\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Rows: {0} in {1} section are Invalid. Reference Name should point to a valid Payment Entry or Journal Entry.\\\"\n\t\t\t\t\t).format(\n\t\t\t\t\t\tfrappe.bold(comma_and([x.idx for x in invalid_advances])),\n\t\t\t\t\t\tfrappe.bold(_(\\\"Advance Payments\\\")),\n\t\t\t\t\t)\n\t\t\t\t)\n\n\t\t\tif self.get(\\\"is_return\\\") and self.get(\\\"return_against\\\") and not self.get(\\\"is_pos\\\"):\n\t\t\t\tif self.get(\\\"update_outstanding_for_self\\\"):\n\t\t\t\t\tdocument_type = \\\"Credit Note\\\" if self.doctype == \\\"Sales Invoice\\\" else \\\"Debit Note\\\"\n\t\t\t\t\tfrappe.msgprint(\n\t\t\t\t\t\t_(\n\t\t\t\t\t\t\t\\\"We can see {0} is made against {1}. If you want {1}'s outstanding to be updated, uncheck '{2}' checkbox. <br><br> Or you can use {3} tool to reconcile against {1} later.\\\"\n\t\t\t\t\t\t).format(\n\t\t\t\t\t\t\tfrappe.bold(document_type),\n\t\t\t\t\t\t\tget_link_to_form(self.doctype, self.get(\\\"return_against\\\")),\n\t\t\t\t\t\t\tfrappe.bold(\\\"Update Outstanding for Self\\\"),\n\t\t\t\t\t\t\tget_link_to_form(\\\"Payment Reconciliation\\\"),\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\n\t\t\tpos_check_field = \\\"is_pos\\\" if self.doctype == \\\"Sales Invoice\\\" else \\\"is_paid\\\"\n\t\t\tif cint(self.allocate_advances_automatically) and not cint(self.get(pos_check_field)):\n\t\t\t\tself.set_advances()\n\n\t\t\tself.set_advance_gain_or_loss()\n\n\t\t\tif self.is_return:\n\t\t\t\tself.validate_qty()\n\t\t\telse:\n\t\t\t\tself.validate_deferred_start_and_end_date()\n\n\t\t\tself.validate_deferred_income_expense_account()\n\t\t\tself.set_inter_company_account()\n\n\t\tif self.doctype == \\\"Purchase Invoice\\\":\n\t\t\tself.calculate_paid_amount()\n\t\t\t# apply tax withholding only if checked and applicable\n\t\t\tself.set_tax_withholding()\n\n\t\twith temporary_flag(\\\"company\\\", self.company):\n\t\t\tvalidate_regional(self)\n\t\t\tvalidate_einvoice_fields(self)\n\n\t\tif self.doctype != \\\"Material Request\\\" and not self.ignore_pricing_rule:\n\t\t\tapply_pricing_rule_on_transaction(self)\n\n\t\tself.set_total_in_words()\n\t\tself.set_default_letter_head()\n\n\tdef set_default_letter_head(self):\n\t\tif hasattr(self, \\\"letter_head\\\") and not self.letter_head:\n\t\t\tself.letter_head = frappe.db.get_value(\\\"Company\\\", self.company, \\\"default_letter_head\\\")\n\n\tdef init_internal_values(self):\n\t\t# init all the internal values as 0 on sa\n\t\tif self.docstatus.is_draft():\n\t\t\t# TODO: Add all such pending values here\n\t\t\tfields = [\\\"billed_amt\\\", \\\"delivered_qty\\\"]\n\t\t\tfor item in self.get(\\\"items\\\"):\n\t\t\t\tfor field in fields:\n\t\t\t\t\tif hasattr(item, field):\n\t\t\t\t\t\titem.set(field, 0)\n\n\tdef before_cancel(self):\n\t\tvalidate_einvoice_fields(self)\n\n\tdef _remove_references_in_unreconcile(self):\n\t\tupe = frappe.qb.DocType(\\\"Unreconcile Payment Entries\\\")\n\t\trows = (\n\t\t\tfrappe.qb.from_(upe)\n\t\t\t.select(upe.name, upe.parent)\n\t\t\t.where((upe.reference_doctype == self.doctype) & (upe.reference_name == self.name))\n\t\t\t.run(as_dict=True)\n\t\t)\n\n\t\tif rows:\n\t\t\treferences_map = frappe._dict()\n\t\t\tfor x in rows:\n\t\t\t\treferences_map.setdefault(x.parent, []).append(x.name)\n\n\t\t\tfor doc, rows in references_map.items():\n\t\t\t\tunreconcile_doc = frappe.get_doc(\\\"Unreconcile Payment\\\", doc)\n\t\t\t\tfor row in rows:\n\t\t\t\t\tunreconcile_doc.remove(unreconcile_doc.get(\\\"allocations\\\", {\\\"name\\\": row})[0])\n\n\t\t\t\tunreconcile_doc.flags.ignore_validate_update_after_submit = True\n\t\t\t\tunreconcile_doc.flags.ignore_links = True\n\t\t\t\tunreconcile_doc.save(ignore_permissions=True)\n\n\t\t# delete docs upon parent doc deletion\n\t\tunreconcile_docs = frappe.db.get_all(\\\"Unreconcile Payment\\\", filters={\\\"voucher_no\\\": self.name})\n\t\tfor x in unreconcile_docs:\n\t\t\t_doc = frappe.get_doc(\\\"Unreconcile Payment\\\", x.name)\n\t\t\tif _doc.docstatus == 1:\n\t\t\t\t_doc.cancel()\n\t\t\t_doc.delete()\n\n\n\n", "CodeBleu_score": 33.701376201766806}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t()\n\n\t\tself.disable_pricing_rule_on_internal_transfer()\n\t\tself.disable_tax_included_prices_for_internal_transfer()\n\t\tself.set_incoming_rate()\n\t\tself.init_internal_values()\n\n\t\tif self.meta.get_field(\\\"currency\\\"):\n\t\t\tself.calculate_taxes_and_totals()\n\n\t\t\tif not self.meta.get_field(\\\"is_return\\\") or not self.is_return:\n\t\t\t\tself.validate_value(\\\"base_grand_total\\\", \\\">=\\\", 0)\n\n\t\t\tvalidate_return(self)\n\n\t\tself.validate_all_documents_schedule()\n\n\t\tif self.meta.get_field(\\\"taxes_and_charges\\\"):\n\t\t\tself.validate_enabled_taxes_and_charges()\n\t\t\tself.validate_tax_account_company()\n\n\t\tself.validate_party()\n\t\tself.validate_currency()\n\t\tself.validate_party_account_currency()\n\t\tself.validate_return_against_account()\n\n\t\tif self.doctype in [\\\"Purchase Invoice\\\", \\\"Sales Invoice\\\"]:\n\t\t\tif invalid_advances := [x for x in self.advances if not x.reference_type or not x.reference_name]:\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Rows: {0} in {1} section are Invalid. Reference Name should point to a valid Payment Entry or Journal Entry.\\\"\n\t\t\t\t\t).format(\n\t\t\t\t\t\tfrappe.bold(comma_and([x.idx for x in invalid_advances])),\n\t\t\t\t\t\tfrappe.bold(_(\\\"Advance Payments\\\")),\n\t\t\t\t\t)\n\t\t\t\t)\n\n\t\t\tif self.get(\\\"is_return\\\") and self.get(\\\"return_against\\\") and not self.get(\\\"is_pos\\\"):\n\t\t\t\tif self.get(\\\"update_outstanding_for_self\\\"):\n\t\t\t\t\tdocument_type = \\\"Credit Note\\\" if self.doctype == \\\"Sales Invoice\\\" else \\\"Debit Note\\\"\n\t\t\t\t\tfrappe.msgprint(\n\t\t\t\t\t\t_(\n\t\t\t\t\t\t\t\\\"We can see {0} is made against {1}. If you want {1}'s outstanding to be updated, uncheck '{2}' checkbox. <br><br> Or you can use {3} tool to reconcile against {1} later.\\\"\n\t\t\t\t\t\t).format(\n\t\t\t\t\t\t\tfrappe.bold(document_type),\n\t\t\t\t\t\t\tget_link_to_form(self.doctype, self.get(\\\"return_against\\\")),\n\t\t\t\t\t\t\tfrappe.bold(\\\"Update Outstanding for Self\\\"),\n\t\t\t\t\t\t\tget_link_to_form(\\\"Payment Reconciliation\\\"),\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\n\t\t\tpos_check_field = \\\"is_pos\\\" if self.doctype == \\\"Sales Invoice\\\" else \\\"is_paid\\\"\n\t\t\tif cint(self.allocate_advances_automatically) and not cint(self.get(pos_check_field)):\n\t\t\t\tself.set_advances()\n\n\t\t\tself.set_advance_gain_or_loss()\n\n\t\t\tif self.is_return:\n\t\t\t\tself.validate_qty()\n\t\t\telse:\n\t\t\t\tself.validate_deferred_start_and_end_date()\n\n\t\t\tself.validate_deferred_income_expense_account()\n\t\t\tself.set_inter_company_account()\n\n\t\tif self.doctype == \\\"Purchase Invoice\\\":\n\t\t\tself.calculate_paid_amount()\n\t\t\t# apply tax withholding only if checked and applicable\n\t\t\tself.set_tax_withholding()\n\n\t\twith temporary_flag(\\\"company\\\", self.company):\n\t\t\tvalidate_regional(self)\n\t\t\tvalidate_einvoice_fields(self)\n\n\t\tif self.doctype != \\\"Material Request\\\" and not self.ignore_pricing_rule:\n\t\t\tapply_pricing_rule_on_transaction(self)\n\n\t\tself.set_total_in_words()\n\t\tself.set_default_letter_head()\n\n\tdef set_default_letter_head(self):\n\t\tif hasattr(self, \\\"letter_head\\\") and not self.letter_head:\n\t\t\tself.letter_head = frappe.db.get_value(\\\"Company\\\", self.company, \\\"default_letter_head\\\")\n\n\tdef init_internal_values(self):\n\t\t# init all the internal values as 0 on sa\n\t\tif self.docstatus.is_draft():\n\t\t\t# TODO: Add all such pending values here\n\t\t\tfields = [\\\"billed_amt\\\", \\\"delivered_qty\\\"]\n\t\t\tfor item in self.get(\\\"items\\\"):\n\t\t\t\tfor field in fields:\n\t\t\t\t\tif hasattr(item, field):\n\t\t\t\t\t\titem.set(field, 0)\n\n\tdef before_cancel(self):\n\t\tvalidate_einvoice_fields(self)\n\n\tdef _remove_references_in_unreconcile(self):\n\t\tupe = frappe.qb.DocType(\\\"Unreconcile Payment Entries\\\")\n\t\trows = (\n\t\t\tfrappe.qb.from_(upe)\n\t\t\t.select(upe.name, upe.parent)\n\t\t\t.where((upe.reference_doctype == self.doctype) & (upe.reference_name == self.name))\n\t\t\t.run(as_dict=True)\n\t\t)\n\n\t\tif rows:\n\t\t\treferences_map = frappe._dict()\n\t\t\tfor x in rows:\n\t\t\t\treferences_map.setdefault(x.parent, []).append(x.name)\n\n\t\t\tfor doc, rows in references_map.items():\n\t\t\t\tunreconcile_doc = frappe.get_doc(\\\"Unreconcile Payment\\\", doc)\n\t\t\t\tfor row in rows:\n\t\t\t\t\tunreconcile_doc.remove(unreconcile_doc.get(\\\"allocations\\\", {\\\"name\\\": row})[0])\n\n\t\t\t\tunreconcile_doc.flags.ignore_validate_update_after_submit = True\n\t\t\t\tunreconcile_doc.flags.ignore_links = True\n\t\t\t\tunreconcile_doc.save(ignore_permissions=True)\n\n\t\t# delete docs upon parent doc deletion\n\t\tunreconcile_docs = frappe.db.get_all(\\\"Unreconcile Payment\\\", filters={\\\"voucher_no\\\": self.name})\n\t\tfor x in unreconcile_docs:\n\t\t\t_doc = frappe.get_doc(\\\"Unreconcile Payment\\\", x.name)\n\t\t\tif _doc.docstatus == 1:\n\t\t\t\t_doc.cancel()\n\t\t\t_doc.delete()\n\n\n\n", "CodeBleu_score": 33.701376201766806}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\ttry:\n        self.client.Auth.get(self.access_token)\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            pass\n    except APIError as e:\n        if e.code == \"PLANNED_MAINTENANCE\":\n            pass\n    except requests.Timeout:\n        pass\n    except Exception as e:\n        frappe.log_error(\"Plaid: Authentication error\")\n        frappe.throw(_(str(e)), title=_(\"Authentication Failed\"))\n    else:\n        try:\n            transactions = self.client.Transactions.get(\n                self.access_token,\n                start_date=start_date,\n                end_date=end_date,\n                options={\"account_ids\": [account_id]} if account_id else {},\n            )\n        except InvalidRequestError:\n            frappe.log_error(\"Plaid: Invalid request error\")\n            frappe.msgprint(_(\"Please check your Plaid client ID and secret values\"))\n        except APIError as e:\n            frappe.log_error(\"Plaid: Transactions error\")\n            frappe.throw(_(str(e)), title=_(\"Transactions Failed\"))\n        else:\n            transactions_list = transactions[\"transactions\"]\n            total_transactions = transactions[\"total_transactions\"]\n            while len(transactions_list) < total_transactions:\n                try:\n                    transactions = self.client.Transactions.get(\n                        self.access_token,\n                        start_date=start_date,\n                        end_date=end_date,\n                        options={\n                            \"account_ids\": [account_id],\n                            \"offset\": len(transactions_list),\n                        }\n                        if account_id\n                        else {\"offset\": len(transactions_list)},\n                    )\n                except InvalidRequestError:\n                    frappe.log_error(\"Plaid: Invalid request error\")\n                    frappe.msgprint(_(\"Please check your Plaid client ID and secret values\"))\n                except APIError as e:\n                    frappe.log_error(\"Pla", "CodeBleu_score": 40.044589954047424}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\ttry:\n        self.client.Auth.get(self.access_token)\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            pass\n    except APIError as e:\n        if e.code == \"PLANNED_MAINTENANCE\":\n            pass\n    except requests.Timeout:\n        pass\n    except Exception as e:\n        frappe.log_error(\"Plaid: Authentication error\")\n        frappe.throw(_(str(e)), title=_(\"Authentication Failed\"))\n    else:\n        args = {\n            \"access_token\": self.access_token,\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n        }\n        if account_id:\n            args[\"account_ids\"] = [account_id]\n        response = self.client.Transactions.get(**args)\n        transactions = response[\"transactions\"]\n        total_transactions = response[\"total_transactions\"]\n        while len(transactions) < total_transactions:\n            response = self.client.Transactions.get(\n                **args,\n                options={\"offset\": len(transactions)},\n            )\n            transactions += response[\"transactions\"]\n        return transactions\n\n", "CodeBleu_score": 41.07261249435462}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\ttry:\n        self.client.Auth.get(self.access_token)\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            pass\n    except APIError as e:\n        if e.code == \"PLANNED_MAINTENANCE\":\n            pass\n    except requests.Timeout:\n        pass\n    except Exception as e:\n        frappe.log_error(\"Plaid: Authentication error\")\n        frappe.throw(_(str(e)), title=_(\"Authentication Failed\"))\n    else:\n        transactions = []\n        total_transactions = 0\n        count = 0\n        offset = 0\n        while total_transactions == 0 or len(transactions) < total_transactions:\n            count += 1\n            try:\n                response = self.client.Transactions.get(\n                    self.access_token,\n                    start_date=start_date,\n                    end_date=end_date,\n                    options={\"offset\": offset, \"account_ids\": [account_id]},\n                )\n            except InvalidRequestError:\n                frappe.log_error(\"Plaid: Invalid request error\")\n                frappe.msgprint(_(\"Please check your Plaid client ID and secret values\"))\n            except APIError as e:\n                if e.code == \"PLANNED_MAINTENANCE\":\n                    pass\n            except requests.Timeout:\n                pass\n            except Exception as e:\n                frappe.log_error(\"Plaid: Transactions error\")\n                frappe.throw(_(str(e)), title=_(\"Transactions Failed\"))\n            else:\n                transactions.extend(response[\"transactions\"])\n                total_transactions = response[\"total_transactions\"]\n                offset = len(transactions)\n        return transactions\n\n", "CodeBleu_score": 41.60228426082589}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\ttry:\n        plaid = PlaidConnector()\n        access_token = plaid.get_access_token(token)\n        response = json.loads(response)\n        bank = response[\"institution\"]\n        bank_id = bank[\"institution_id\"]\n        bank_name = bank[\"name\"]\n        bank_type = bank[\"type\"]\n        bank_subtype = bank[\"subtype\"]\n        bank_country = bank[\"country\"]\n        bank_accounts = response[\"accounts\"]\n        bank_account_type = bank_accounts[0][\"type\"]\n        bank_account_subtype = bank_accounts[0][\"subtype\"]\n        bank_account_mask = bank_accounts[0][\"mask\"]\n        bank_account_id = bank_accounts[0][\"account_id\"]\n        bank_account_name = bank_accounts[0][\"name\"]\n        bank_account_official_name = bank_accounts[0][\"official_name\"]\n        bank_account_number = bank_accounts[0][\"account_number\"]\n        bank_account_balance = bank_accounts[0][\"balances\"]\n        bank_account_balance_available = bank_account_balance[\"available\"]\n        bank_account_balance_current = bank_account_balance[\"current\"]\n        bank_account_balance_iso_currency_code = bank_account_balance[\"iso_currency_code\"]\n        bank_account_balance_limit = bank_account_balance[\"limit\"]\n        bank_account_balance_unofficial_currency_code = bank_account_balance[\"unofficial_currency_code\"]\n        bank_account_balance_date = bank_accounts[0][\"balances\"][\"last_updated\"]\n        bank_account_balance_date = formatdate(getdate(bank_account_balance_date), \"yyyy-mm-dd\")\n        bank_account_balance_date = getdate(bank_account_balance_date)\n        bank_account_balance_date = add_months(bank_account_balance_date, 1)\n        bank_account_balance", "CodeBleu_score": 31.920382648808754}, {"code": "def add_institution(token, response)\n\ttry:\n        institution = json.loads(response)\n        plaid = PlaidConnector()\n        access_token = plaid.get_access_token(token)\n        bank = frappe.db.get_value(\"Plaid Bank\", {\"plaid_institution_id\": institution[\"institution_id\"]}, \"*\")\n        if bank:\n            frappe.db.set_value(\"Plaid Bank\", bank.name, \"plaid_access_token\", access_token)\n        else:\n            bank = frappe.get_doc({\n                \"doctype\": \"Plaid Bank\",\n                \"plaid_institution_id\": institution[\"institution_id\"],\n                \"plaid_institution_name\": institution[\"institution_name\"],\n                \"plaid_access_token\": access_token,\n            })\n            bank.insert()\n    except Exception as e:\n        frappe.log_error(message=frappe.get_traceback(), title=e)\n\n", "CodeBleu_score": 49.92436745255115}, {"code": "def add_institution(token, response)\n\ttry:\n        response = json.loads(response)\n    except Exception as e:\n        frappe.log_error(e, \"Plaid Error\")\n        frappe.throw(_(\"An error occurred while adding the bank. Please try again.\"))\n\n    try:\n        access_token = PlaidConnector().get_access_token(token)\n    except Exception as e:\n        frappe.log_error(e, \"Plaid Error\")\n        frappe.throw(_(\"An error occurred while adding the bank. Please try again.\"))\n\n    try:\n        bank_name = response[\"institution\"][\"name\"]\n        bank_id = response[\"institution\"][\"institution_id\"]\n    except Exception as e:\n        frappe.log_error(e, \"Plaid Error\")\n        frappe.throw(_(\"An error occurred while adding the bank. Please try again.\"))\n\n    try:\n        bank = frappe.db.exists(\"Bank\", bank_name)\n        if bank:\n            bank = frappe.get_doc(\"Bank\", bank)\n            bank.plaid_access_token = access_token\n            bank.save()\n        else:\n            bank = frappe.get_doc(\n                {\n                    \"doctype\": \"Bank\",\n                    \"bank_name\": bank_name,\n                    \"plaid_access_token\": access_token,\n                    \"plaid_bank_id\": bank_id,\n                }\n            )\n            bank.insert()\n    except Exception as e:\n        frappe.log_error(e, \"Plaid Error\")\n        frappe.throw(_(\"An error occurred while adding the bank. Please try again.\"))\n\n    return bank\n\n", "CodeBleu_score": 47.31996296929133}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\tef get_plaid_configuration():\n\tif frappe.db.get_single_value(\\\"Plaid Settings\\\", \\\"enabled\\\"):\n\t\tplaid_settings = frappe.get_single(\\\"Plaid Settings\\\")\n\t\treturn {\n\t\t\t\\\"plaid_env\\\": plaid_settings.plaid_env,\n\t\t\t\\\"link_token\\\": plaid_settings.get_link_token(),\n\t\t\t\\\"client_name\\\": frappe.local.site,\n\t\t}\n\n\treturn \\\"disabled\\\"\n\n", "CodeBleu_score": 8.429361512129377}, {"code": "def sync_transactions(bank, bank_account)\n\tef get_plaid_configuration():\n\tif frappe.db.get_single_value(\\\"Plaid Settings\\\", \\\"enabled\\\"):\n\t\tplaid_settings = frappe.get_single(\\\"Plaid Settings\\\")\n\t\treturn {\n\t\t\t\\\"plaid_env\\\": plaid_settings.plaid_env,\n\t\t\t\\\"link_token\\\": plaid_settings.get_link_token(),\n\t\t\t\\\"client_name\\\": frappe.local.site,\n\t\t}\n\n\treturn \\\"disabled\\\"\n\n", "CodeBleu_score": 8.429361512129377}, {"code": "def sync_transactions(bank, bank_account)\n\tef get_plaid_configuration():\n\tif frappe.db.get_single_value(\\\"Plaid Settings\\\", \\\"enabled\\\"):\n\t\tplaid_settings = frappe.get_single(\\\"Plaid Settings\\\")\n\t\treturn {\n\t\t\t\\\"plaid_env\\\": plaid_settings.plaid_env,\n\t\t\t\\\"link_token\\\": plaid_settings.get_link_token(),\n\t\t\t\\\"client_name\\\": frappe.local.site,\n\t\t}\n\n\treturn \\\"disabled\\\"\n\n", "CodeBleu_score": 8.429361512129377}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\tMigrator\\\", \\\"_migrate\\\", queue=\\\"long\\\")\n\n\tdef _migrate(self):\n\t\ttry:\n\t\t\tself.set_indicator(\\\"In Progress\\\")\n\t\t\t# Add quickbooks_id field to every document so that we can lookup by Id reference\n\t\t\t# provided by documents in API responses.\n\t\t\t# Also add a company field to Customer Supplier and Item\n\t\t\tself._make_custom_fields()\n\n\t\t\tself._migrate_accounts()\n\n\t\t\t# Some Quickbooks Entities like Advance Payment, Payment aren't available firectly from API\n\t\t\t# Sales Invoice also sometimes needs to be saved as a Journal Entry\n\t\t\t# (When Item table is not present, This appens when Invoice is attached with a \\\"StatementCharge\\\" \\\"ReimburseCharge\n\t\t\t# Details of both of these cannot be fetched from API)\n\t\t\t# Their GL entries need to be generated from GeneralLedger Report.\n\t\t\tself._fetch_general_ledger()\n\n\t\t\t# QuickBooks data can have transactions that do not fall in existing fiscal years in ERPNext\n\t\t\tself._create_fiscal_years()\n\n\t\t\tself._allow_fraction_in_unit()\n\n\t\t\t# Following entities are directly available from API\n\t\t\t# Invoice can be an exception sometimes though (as explained above).\n\t\t\tentities_for_normal_transform = [\n\t\t\t\t\\\"Customer\\\",\n\t\t\t\t\\\"Item\\\",\n\t\t\t\t\\\"Vendor\\\",\n\t\t\t\t\\\"Preferences\\\",\n\t\t\t\t\\\"JournalEntry\\\",\n\t\t\t\t\\\"Purchase\\\",\n\t\t\t\t\\\"Deposit\\\",\n\t\t\t\t\\\"Invoice\\\",\n\t\t\t\t\\\"CreditMemo\\\",\n\t\t\t\t\\\"SalesReceipt\\\",\n\t\t\t\t\\\"RefundReceipt\\\",\n\t\t\t\t\\\"Bill\\\",\n\t\t\t\t\\\"VendorCredit\\\",\n\t\t\t\t\\\"Payment\\\",\n\t\t\t\t\\\"BillPayment\\\",\n\t\t\t]\n\t\t\tfor entity in entities_for_normal_transform:\n\t\t\t\tself._migrate_entries(entity)\n\n\t\t\t# Following entries are not available directly from API, Need to be regenrated from GeneralLedger Report\n\t\t\tentities_for_gl_transform = [\n\t\t\t\t\\\"Advance Payment\\\",\n\t\t\t\t\\\"Tax Payment\\\",\n\t\t\t\t\\\"Sales Tax Payment\\\",\n\t\t\t\t\\\"Purchase Tax Payment\\\",\n\t\t\t\t\\\"Inventory Qty Adjust\\\",\n\t\t\t]\n\t\t\tfor entity in entities_for_gl_transform:\n\t\t\t\tself._migrate_entries_from_gl(entity)\n\t\t\tself.set_indicator(\\\"Complete\\\")\n\t\texcept Exception as e:\n\t\t\tself.set_indicator(\\\"Failed\\\")\n\t\t\tself._log_error(e)\n\n\t\tfrappe.db.commit()\n\n\tdef get_tokens(self):\n\t\ttoken = self.oauth.fetch_token(\n\t\t\ttoken_url=self.token_endpoint, client_secret=self.client_secret, code=self.code\n\t\t)\n\t\tself.access_token = token[\\\"access_token\\\"]\n\t\tself.refresh_token = token[\\\"refresh_token\\\"]\n\t\tself.save()\n\n\tdef _refresh_tokens(self):\n\t\ttoken = self.oauth.refresh_token(\n\t\t\ttoken_url=self.token_endpoint,\n\t\t\tclient_id=self.client_id,\n\t\t\trefresh_token=self.refresh_token,\n\t\t\tclient_secret=self.client_secret,\n\t\t\tcode=self.code,\n\t\t)\n\t\tself.access_token = token[\\\"access_token\\\"]\n\t\tself.refresh_token = token[\\\"refresh_token\\\"]\n\t\tself.save()\n\n\tdef _make_custom_fields(self):\n\t\tdoctypes_for_quickbooks_id_field = [\n\t\t\t\\\"Account\\\",\n\t\t\t\\\"Customer\\\",\n\t\t\t\\\"Address\\\",\n\t\t\t\\\"Item\\\",\n\t\t\t\\\"Supplier\\\",\n\t\t\t\\\"Sales Invoice\\\",\n\t\t\t\\\"Journal Entry\\\",\n\t\t\t\\\"Purchase Invoice\\\",\n\t\t]\n\t\tfor doctype in doctypes_for_quickbooks_id_field:\n\t\t\tself._make_custom_quickbooks_id_field(doctype)\n\n\t\tdoctypes_for_company_field = [\\\"Customer\\\", \\\"Item\\\", \\\"Supplier\\\"]\n\t\tfor doctype in doctypes_for_company_field:\n\t\t\tself._make_custom_company_field(doctype)\n\n\t\tfrappe.db.commit()\n\n\tdef _make_custom_quickbooks_id_field(self, doctype):\n\t\tif not frappe.get_meta(doctype).has_field(\\\"quickbooks_id\\\"):\n\t\t\tfrappe.get_doc(\n\t\t\t\t{\n\t\t\t\t\t\\\"doctype\\\": \\\"Custom Field\\\",\n\t\t\t\t\t\\\"label\\\": \\\"QuickBooks ID\\\",\n\t\t\t\t\t\\\"dt\\\": doctype,\n\t\t\t\t\t\\\"fieldname\\\": \\\"quickbooks_id\\\",\n\t\t\t\t\t\\\"fieldtype\\\": \\\"Data\\\",\n\t\t\t\t}\n\t\t\t).insert()\n\n\tdef _make_custom_company_field(self, doctype):\n\t\tif not frappe.get_meta(doctype).has_field(\\\"company\\\"):\n\t\t\tfrappe.get_doc(\n\t\t\t\t{\n\t\t\t\t\t\\\"doctype\\\": \\\"Custom Field\\\",\n\t\t\t\t\t\\\"label\\\": \\\"Company\\\",\n\t\t\t\t\t\\\"dt\\\": doctype,\n\t\t\t\t\t\\\"fieldname\\\": \\\"company\\\",\n\t\t\t\t\t\\\"fieldtype\\\": \\\"Link\\\",\n\t\t\t\t\t\\\"options\\\": \\\"Company\\\",\n\t\t\t\t}\n\t\t\t).insert()\n\n\tdef _migrate_accounts(self):\n\t\tself._make_root_accounts()\n\t\tfor entity in [\\\"Account\\\", \\\"TaxRate\\\", \\\"TaxCode\\\"]:\n\t\t\tself._migrate_entries(entity)\n\n\tdef _make_root_accounts(self):\n\t\troots = [\\\"Asset\\\", \\\"Equity\\\", \\\"Expense\\\", \\\"Liability\\\", \\\"Income\\\"]\n\t\tfor root in roots:\n\t\t\ttry:\n\t\t\t\tif not frappe.db.exists(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Account\\\",\n\t\t\t\t\t\t\\\"name\\\": encode_company_abbr(f\\\"{root} - QB\\\", self.company),\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t):\n\t\t\t\t\tfrappe.get_doc(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\\\"doctype\\\": \\\"Account\\\",\n\t\t\t\t\t\t\t\\\"account_name\\\": f\\\"{root} - QB\\\",\n\t\t\t\t\t\t\t\\\"root_type\\\": root,\n\t\t\t\t\t\t\t\\\"is_group\\\": \\\"1\\\",\n\t\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t\t}\n\t\t\t\t\t).insert(ignore_mandatory=True)\n\t\t\texcept Exception as e:\n\t\t\t\tself._log_error(e, root)\n\t\tfrappe.db.commit()\n\n\n\n", "CodeBleu_score": 23.499426640197825}, {"code": "def _migrate_entries(self, entity)\n\tMigrator\\\", \\\"_migrate\\\", queue=\\\"long\\\")\n\n\tdef _migrate(self):\n\t\ttry:\n\t\t\tself.set_indicator(\\\"In Progress\\\")\n\t\t\t# Add quickbooks_id field to every document so that we can lookup by Id reference\n\t\t\t# provided by documents in API responses.\n\t\t\t# Also add a company field to Customer Supplier and Item\n\t\t\tself._make_custom_fields()\n\n\t\t\tself._migrate_accounts()\n\n\t\t\t# Some Quickbooks Entities like Advance Payment, Payment aren't available firectly from API\n\t\t\t# Sales Invoice also sometimes needs to be saved as a Journal Entry\n\t\t\t# (When Item table is not present, This appens when Invoice is attached with a \\\"StatementCharge\\\" \\\"ReimburseCharge\n\t\t\t# Details of both of these cannot be fetched from API)\n\t\t\t# Their GL entries need to be generated from GeneralLedger Report.\n\t\t\tself._fetch_general_ledger()\n\n\t\t\t# QuickBooks data can have transactions that do not fall in existing fiscal years in ERPNext\n\t\t\tself._create_fiscal_years()\n\n\t\t\tself._allow_fraction_in_unit()\n\n\t\t\t# Following entities are directly available from API\n\t\t\t# Invoice can be an exception sometimes though (as explained above).\n\t\t\tentities_for_normal_transform = [\n\t\t\t\t\\\"Customer\\\",\n\t\t\t\t\\\"Item\\\",\n\t\t\t\t\\\"Vendor\\\",\n\t\t\t\t\\\"Preferences\\\",\n\t\t\t\t\\\"JournalEntry\\\",\n\t\t\t\t\\\"Purchase\\\",\n\t\t\t\t\\\"Deposit\\\",\n\t\t\t\t\\\"Invoice\\\",\n\t\t\t\t\\\"CreditMemo\\\",\n\t\t\t\t\\\"SalesReceipt\\\",\n\t\t\t\t\\\"RefundReceipt\\\",\n\t\t\t\t\\\"Bill\\\",\n\t\t\t\t\\\"VendorCredit\\\",\n\t\t\t\t\\\"Payment\\\",\n\t\t\t\t\\\"BillPayment\\\",\n\t\t\t]\n\t\t\tfor entity in entities_for_normal_transform:\n\t\t\t\tself._migrate_entries(entity)\n\n\t\t\t# Following entries are not available directly from API, Need to be regenrated from GeneralLedger Report\n\t\t\tentities_for_gl_transform = [\n\t\t\t\t\\\"Advance Payment\\\",\n\t\t\t\t\\\"Tax Payment\\\",\n\t\t\t\t\\\"Sales Tax Payment\\\",\n\t\t\t\t\\\"Purchase Tax Payment\\\",\n\t\t\t\t\\\"Inventory Qty Adjust\\\",\n\t\t\t]\n\t\t\tfor entity in entities_for_gl_transform:\n\t\t\t\tself._migrate_entries_from_gl(entity)\n\t\t\tself.set_indicator(\\\"Complete\\\")\n\t\texcept Exception as e:\n\t\t\tself.set_indicator(\\\"Failed\\\")\n\t\t\tself._log_error(e)\n\n\t\tfrappe.db.commit()\n\n\tdef get_tokens(self):\n\t\ttoken = self.oauth.fetch_token(\n\t\t\ttoken_url=self.token_endpoint, client_secret=self.client_secret, code=self.code\n\t\t)\n\t\tself.access_token = token[\\\"access_token\\\"]\n\t\tself.refresh_token = token[\\\"refresh_token\\\"]\n\t\tself.save()\n\n\tdef _refresh_tokens(self):\n\t\ttoken = self.oauth.refresh_token(\n\t\t\ttoken_url=self.token_endpoint,\n\t\t\tclient_id=self.client_id,\n\t\t\trefresh_token=self.refresh_token,\n\t\t\tclient_secret=self.client_secret,\n\t\t\tcode=self.code,\n\t\t)\n\t\tself.access_token = token[\\\"access_token\\\"]\n\t\tself.refresh_token = token[\\\"refresh_token\\\"]\n\t\tself.save()\n\n\tdef _make_custom_fields(self):\n\t\tdoctypes_for_quickbooks_id_field = [\n\t\t\t\\\"Account\\\",\n\t\t\t\\\"Customer\\\",\n\t\t\t\\\"Address\\\",\n\t\t\t\\\"Item\\\",\n\t\t\t\\\"Supplier\\\",\n\t\t\t\\\"Sales Invoice\\\",\n\t\t\t\\\"Journal Entry\\\",\n\t\t\t\\\"Purchase Invoice\\\",\n\t\t]\n\t\tfor doctype in doctypes_for_quickbooks_id_field:\n\t\t\tself._make_custom_quickbooks_id_field(doctype)\n\n\t\tdoctypes_for_company_field = [\\\"Customer\\\", \\\"Item\\\", \\\"Supplier\\\"]\n\t\tfor doctype in doctypes_for_company_field:\n\t\t\tself._make_custom_company_field(doctype)\n\n\t\tfrappe.db.commit()\n\n\tdef _make_custom_quickbooks_id_field(self, doctype):\n\t\tif not frappe.get_meta(doctype).has_field(\\\"quickbooks_id\\\"):\n\t\t\tfrappe.get_doc(\n\t\t\t\t{\n\t\t\t\t\t\\\"doctype\\\": \\\"Custom Field\\\",\n\t\t\t\t\t\\\"label\\\": \\\"QuickBooks ID\\\",\n\t\t\t\t\t\\\"dt\\\": doctype,\n\t\t\t\t\t\\\"fieldname\\\": \\\"quickbooks_id\\\",\n\t\t\t\t\t\\\"fieldtype\\\": \\\"Data\\\",\n\t\t\t\t}\n\t\t\t).insert()\n\n\tdef _make_custom_company_field(self, doctype):\n\t\tif not frappe.get_meta(doctype).has_field(\\\"company\\\"):\n\t\t\tfrappe.get_doc(\n\t\t\t\t{\n\t\t\t\t\t\\\"doctype\\\": \\\"Custom Field\\\",\n\t\t\t\t\t\\\"label\\\": \\\"Company\\\",\n\t\t\t\t\t\\\"dt\\\": doctype,\n\t\t\t\t\t\\\"fieldname\\\": \\\"company\\\",\n\t\t\t\t\t\\\"fieldtype\\\": \\\"Link\\\",\n\t\t\t\t\t\\\"options\\\": \\\"Company\\\",\n\t\t\t\t}\n\t\t\t).insert()\n\n\tdef _migrate_accounts(self):\n\t\tself._make_root_accounts()\n\t\tfor entity in [\\\"Account\\\", \\\"TaxRate\\\", \\\"TaxCode\\\"]:\n\t\t\tself._migrate_entries(entity)\n\n\tdef _make_root_accounts(self):\n\t\troots = [\\\"Asset\\\", \\\"Equity\\\", \\\"Expense\\\", \\\"Liability\\\", \\\"Income\\\"]\n\t\tfor root in roots:\n\t\t\ttry:\n\t\t\t\tif not frappe.db.exists(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Account\\\",\n\t\t\t\t\t\t\\\"name\\\": encode_company_abbr(f\\\"{root} - QB\\\", self.company),\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t):\n\t\t\t\t\tfrappe.get_doc(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\\\"doctype\\\": \\\"Account\\\",\n\t\t\t\t\t\t\t\\\"account_name\\\": f\\\"{root} - QB\\\",\n\t\t\t\t\t\t\t\\\"root_type\\\": root,\n\t\t\t\t\t\t\t\\\"is_group\\\": \\\"1\\\",\n\t\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t\t}\n\t\t\t\t\t).insert(ignore_mandatory=True)\n\t\t\texcept Exception as e:\n\t\t\t\tself._log_error(e, root)\n\t\tfrappe.db.commit()\n\n\n\n", "CodeBleu_score": 23.499426640197825}, {"code": "def _migrate_entries(self, entity)\n\tMigrator\\\", \\\"_migrate\\\", queue=\\\"long\\\")\n\n\tdef _migrate(self):\n\t\ttry:\n\t\t\tself.set_indicator(\\\"In Progress\\\")\n\t\t\t# Add quickbooks_id field to every document so that we can lookup by Id reference\n\t\t\t# provided by documents in API responses.\n\t\t\t# Also add a company field to Customer Supplier and Item\n\t\t\tself._make_custom_fields()\n\n\t\t\tself._migrate_accounts()\n\n\t\t\t# Some Quickbooks Entities like Advance Payment, Payment aren't available firectly from API\n\t\t\t# Sales Invoice also sometimes needs to be saved as a Journal Entry\n\t\t\t# (When Item table is not present, This appens when Invoice is attached with a \\\"StatementCharge\\\" \\\"ReimburseCharge\n\t\t\t# Details of both of these cannot be fetched from API)\n\t\t\t# Their GL entries need to be generated from GeneralLedger Report.\n\t\t\tself._fetch_general_ledger()\n\n\t\t\t# QuickBooks data can have transactions that do not fall in existing fiscal years in ERPNext\n\t\t\tself._create_fiscal_years()\n\n\t\t\tself._allow_fraction_in_unit()\n\n\t\t\t# Following entities are directly available from API\n\t\t\t# Invoice can be an exception sometimes though (as explained above).\n\t\t\tentities_for_normal_transform = [\n\t\t\t\t\\\"Customer\\\",\n\t\t\t\t\\\"Item\\\",\n\t\t\t\t\\\"Vendor\\\",\n\t\t\t\t\\\"Preferences\\\",\n\t\t\t\t\\\"JournalEntry\\\",\n\t\t\t\t\\\"Purchase\\\",\n\t\t\t\t\\\"Deposit\\\",\n\t\t\t\t\\\"Invoice\\\",\n\t\t\t\t\\\"CreditMemo\\\",\n\t\t\t\t\\\"SalesReceipt\\\",\n\t\t\t\t\\\"RefundReceipt\\\",\n\t\t\t\t\\\"Bill\\\",\n\t\t\t\t\\\"VendorCredit\\\",\n\t\t\t\t\\\"Payment\\\",\n\t\t\t\t\\\"BillPayment\\\",\n\t\t\t]\n\t\t\tfor entity in entities_for_normal_transform:\n\t\t\t\tself._migrate_entries(entity)\n\n\t\t\t# Following entries are not available directly from API, Need to be regenrated from GeneralLedger Report\n\t\t\tentities_for_gl_transform = [\n\t\t\t\t\\\"Advance Payment\\\",\n\t\t\t\t\\\"Tax Payment\\\",\n\t\t\t\t\\\"Sales Tax Payment\\\",\n\t\t\t\t\\\"Purchase Tax Payment\\\",\n\t\t\t\t\\\"Inventory Qty Adjust\\\",\n\t\t\t]\n\t\t\tfor entity in entities_for_gl_transform:\n\t\t\t\tself._migrate_entries_from_gl(entity)\n\t\t\tself.set_indicator(\\\"Complete\\\")\n\t\texcept Exception as e:\n\t\t\tself.set_indicator(\\\"Failed\\\")\n\t\t\tself._log_error(e)\n\n\t\tfrappe.db.commit()\n\n\tdef get_tokens(self):\n\t\ttoken = self.oauth.fetch_token(\n\t\t\ttoken_url=self.token_endpoint, client_secret=self.client_secret, code=self.code\n\t\t)\n\t\tself.access_token = token[\\\"access_token\\\"]\n\t\tself.refresh_token = token[\\\"refresh_token\\\"]\n\t\tself.save()\n\n\tdef _refresh_tokens(self):\n\t\ttoken = self.oauth.refresh_token(\n\t\t\ttoken_url=self.token_endpoint,\n\t\t\tclient_id=self.client_id,\n\t\t\trefresh_token=self.refresh_token,\n\t\t\tclient_secret=self.client_secret,\n\t\t\tcode=self.code,\n\t\t)\n\t\tself.access_token = token[\\\"access_token\\\"]\n\t\tself.refresh_token = token[\\\"refresh_token\\\"]\n\t\tself.save()\n\n\tdef _make_custom_fields(self):\n\t\tdoctypes_for_quickbooks_id_field = [\n\t\t\t\\\"Account\\\",\n\t\t\t\\\"Customer\\\",\n\t\t\t\\\"Address\\\",\n\t\t\t\\\"Item\\\",\n\t\t\t\\\"Supplier\\\",\n\t\t\t\\\"Sales Invoice\\\",\n\t\t\t\\\"Journal Entry\\\",\n\t\t\t\\\"Purchase Invoice\\\",\n\t\t]\n\t\tfor doctype in doctypes_for_quickbooks_id_field:\n\t\t\tself._make_custom_quickbooks_id_field(doctype)\n\n\t\tdoctypes_for_company_field = [\\\"Customer\\\", \\\"Item\\\", \\\"Supplier\\\"]\n\t\tfor doctype in doctypes_for_company_field:\n\t\t\tself._make_custom_company_field(doctype)\n\n\t\tfrappe.db.commit()\n\n\tdef _make_custom_quickbooks_id_field(self, doctype):\n\t\tif not frappe.get_meta(doctype).has_field(\\\"quickbooks_id\\\"):\n\t\t\tfrappe.get_doc(\n\t\t\t\t{\n\t\t\t\t\t\\\"doctype\\\": \\\"Custom Field\\\",\n\t\t\t\t\t\\\"label\\\": \\\"QuickBooks ID\\\",\n\t\t\t\t\t\\\"dt\\\": doctype,\n\t\t\t\t\t\\\"fieldname\\\": \\\"quickbooks_id\\\",\n\t\t\t\t\t\\\"fieldtype\\\": \\\"Data\\\",\n\t\t\t\t}\n\t\t\t).insert()\n\n\tdef _make_custom_company_field(self, doctype):\n\t\tif not frappe.get_meta(doctype).has_field(\\\"company\\\"):\n\t\t\tfrappe.get_doc(\n\t\t\t\t{\n\t\t\t\t\t\\\"doctype\\\": \\\"Custom Field\\\",\n\t\t\t\t\t\\\"label\\\": \\\"Company\\\",\n\t\t\t\t\t\\\"dt\\\": doctype,\n\t\t\t\t\t\\\"fieldname\\\": \\\"company\\\",\n\t\t\t\t\t\\\"fieldtype\\\": \\\"Link\\\",\n\t\t\t\t\t\\\"options\\\": \\\"Company\\\",\n\t\t\t\t}\n\t\t\t).insert()\n\n\tdef _migrate_accounts(self):\n\t\tself._make_root_accounts()\n\t\tfor entity in [\\\"Account\\\", \\\"TaxRate\\\", \\\"TaxCode\\\"]:\n\t\t\tself._migrate_entries(entity)\n\n\tdef _make_root_accounts(self):\n\t\troots = [\\\"Asset\\\", \\\"Equity\\\", \\\"Expense\\\", \\\"Liability\\\", \\\"Income\\\"]\n\t\tfor root in roots:\n\t\t\ttry:\n\t\t\t\tif not frappe.db.exists(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Account\\\",\n\t\t\t\t\t\t\\\"name\\\": encode_company_abbr(f\\\"{root} - QB\\\", self.company),\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t):\n\t\t\t\t\tfrappe.get_doc(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\\\"doctype\\\": \\\"Account\\\",\n\t\t\t\t\t\t\t\\\"account_name\\\": f\\\"{root} - QB\\\",\n\t\t\t\t\t\t\t\\\"root_type\\\": root,\n\t\t\t\t\t\t\t\\\"is_group\\\": \\\"1\\\",\n\t\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t\t}\n\t\t\t\t\t).insert(ignore_mandatory=True)\n\t\t\texcept Exception as e:\n\t\t\t\tself._log_error(e, root)\n\t\tfrappe.db.commit()\n\n\n\n", "CodeBleu_score": 23.499426640197825}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\tself.company,\n\t\t\t\t}\n\t\t\t):\n\t\t\t\tfrappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Account\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": \\\"TaxRate - {}\\\".format(tax_rate[\\\"Id\\\"]),\n\t\t\t\t\t\t\\\"account_name\\\": \\\"{} - QB\\\".format(tax_rate[\\\"Name\\\"]),\n\t\t\t\t\t\t\\\"root_type\\\": \\\"Liability\\\",\n\t\t\t\t\t\t\\\"parent_account\\\": encode_company_abbr(\\\"{} - QB\\\".format(\\\"Liability\\\"), self.company),\n\t\t\t\t\t\t\\\"is_group\\\": \\\"0\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t).insert()\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, tax_rate)\n\n\tdef _preprocess_tax_codes(self, tax_codes):\n\t\tself.tax_codes = {tax_code[\\\"Id\\\"]: tax_code for tax_code in tax_codes}\n\t\treturn tax_codes\n\n\tdef _save_tax_code(self, tax_code):\n\t\tpass\n\n\tdef _save_customer(self, customer):\n\t\ttry:\n\t\t\tif not frappe.db.exists(\n\t\t\t\t{\\\"doctype\\\": \\\"Customer\\\", \\\"quickbooks_id\\\": customer[\\\"Id\\\"], \\\"company\\\": self.company}\n\t\t\t):\n\t\t\t\ttry:\n\t\t\t\t\treceivable_account = frappe.get_all(\n\t\t\t\t\t\t\\\"Account\\\",\n\t\t\t\t\t\tfilters={\n\t\t\t\t\t\t\t\\\"account_type\\\": \\\"Receivable\\\",\n\t\t\t\t\t\t\t\\\"account_currency\\\": customer[\\\"CurrencyRef\\\"][\\\"value\\\"],\n\t\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t\t},\n\t\t\t\t\t)[0][\\\"name\\\"]\n\t\t\t\texcept Exception:\n\t\t\t\t\treceivable_account = None\n\t\t\t\terpcustomer = frappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Customer\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": customer[\\\"Id\\\"],\n\t\t\t\t\t\t\\\"customer_name\\\": encode_company_abbr(customer[\\\"DisplayName\\\"], self.company),\n\t\t\t\t\t\t\\\"customer_type\\\": \\\"Individual\\\",\n\t\t\t\t\t\t\\\"customer_group\\\": \\\"Commercial\\\",\n\t\t\t\t\t\t\\\"default_currency\\\": customer[\\\"CurrencyRef\\\"][\\\"value\\\"],\n\t\t\t\t\t\t\\\"accounts\\\": [{\\\"company\\\": self.company, \\\"account\\\": receivable_account}],\n\t\t\t\t\t\t\\\"territory\\\": \\\"All Territories\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t).insert()\n\t\t\t\tif \\\"BillAddr\\\" in customer:\n\t\t\t\t\tself._create_address(erpcustomer, \\\"Customer\\\", customer[\\\"BillAddr\\\"], \\\"Billing\\\")\n\t\t\t\tif \\\"ShipAddr\\\" in customer:\n\t\t\t\t\tself._create_address(erpcustomer, \\\"Customer\\\", customer[\\\"ShipAddr\\\"], \\\"Shipping\\\")\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, customer)\n\n\tdef _save_item(self, item):\n\t\ttry:\n\t\t\tif not frappe.db.exists(\n\t\t\t\t{\\\"doctype\\\": \\\"Item\\\", \\\"quickbooks_id\\\": item[\\\"Id\\\"], \\\"company\\\": self.company}\n\t\t\t):\n\t\t\t\tif item[\\\"Type\\\"] in (\\\"Service\\\", \\\"Inventory\\\"):\n\t\t\t\t\titem_dict = {\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Item\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": item[\\\"Id\\\"],\n\t\t\t\t\t\t\\\"item_code\\\": encode_company_abbr(item[\\\"Name\\\"], self.company),\n\t\t\t\t\t\t\\\"stock_uom\\\": \\\"Unit\\\",\n\t\t\t\t\t\t\\\"is_stock_item\\\": 0,\n\t\t\t\t\t\t\\\"item_group\\\": \\\"All Item Groups\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t\t\\\"item_defaults\\\": [\n\t\t\t\t\t\t\t{\\\"company\\\": self.company, \\\"default_warehouse\\\": self.default_warehouse}\n\t\t\t\t\t\t],\n\t\t\t\t\t}\n\t\t\t\t\tif \\\"ExpenseAccountRef\\\" in item:\n\t\t\t\t\t\texpense_account = self._get_account_name_by_id(item[\\\"ExpenseAccountRef\\\"][\\\"value\\\"])\n\t\t\t\t\t\titem_dict[\\\"item_defaults\\\"][0][\\\"expense_account\\\"] = expense_account\n\t\t\t\t\tif \\\"IncomeAccountRef\\\" in item:\n\t\t\t\t\t\tincome_account = self._get_account_name_by_id(item[\\\"IncomeAccountRef\\\"][\\\"value\\\"])\n\t\t\t\t\t\titem_dict[\\\"item_defaults\\\"][0][\\\"income_account\\\"] = income_account\n\t\t\t\t\tfrappe.get_doc(item_dict).insert()\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, item)\n\n\tdef _allow_fraction_in_unit(self):\n\t\tfrappe.db.set_value(\\\"UOM\\\", \\\"Unit\\\", \\\"must_be_whole_number\\\", 0)\n\n\tdef _save_vendor(self, vendor):\n\t\ttry:\n\t\t\tif not frappe.db.exists(\n\t\t\t\t{\\\"doctype\\\": \\\"Supplier\\\", \\\"quickbooks_id\\\": vendor[\\\"Id\\\"], \\\"company\\\": self.company}\n\t\t\t):\n\t\t\t\terpsupplier = frappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Supplier\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": vendor[\\\"Id\\\"],\n\t\t\t\t\t\t\\\"supplier_name\\\": encode_company_abbr(vendor[\\\"DisplayName\\\"], self.company),\n\t\t\t\t\t\t\\\"supplier_group\\\": \\\"All Supplier Groups\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t).insert()\n\t\t\t\tif \\\"BillAddr\\\" in vendor:\n\t\t\t\t\tself._create_address(erpsupplier, \\\"Supplier\\\", vendor[\\\"BillAddr\\\"], \\\"Billing\\\")\n\t\t\t\tif \\\"ShipAddr\\\" in vendor:\n\t\t\t\t\tself._create_address(erpsupplier, \\\"Supplier\\\", vendor[\\\"ShipAddr\\\"], \\\"Shipping\\\")\n\t\texcept Exception as e:\n\t\t\tself._log_error(e)\n\n\tdef _save_preference(self, preference):\n\t\ttry:\n\t\t\tif preference[\\\"SalesFormsPrefs\\\"][\\\"AllowShipping\\\"]:\n\t\t\t\tdefault_shipping_account_id = preference[\\\"SalesFormsPrefs\\\"][\\\"DefaultShippingAccount\\\"]\n\t\t\t\tself.default_shipping_account = self._get_account_name_by_id(\n\t\t\t\t\tself, default_shipping_account_id\n\t\t\t\t)\n\t\t\t\tself.save()\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, preference)\n\n\n\n", "CodeBleu_score": 26.955857025100936}, {"code": "def _save_invoice(self, invoice)\n\tself.company,\n\t\t\t\t}\n\t\t\t):\n\t\t\t\tfrappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Account\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": \\\"TaxRate - {}\\\".format(tax_rate[\\\"Id\\\"]),\n\t\t\t\t\t\t\\\"account_name\\\": \\\"{} - QB\\\".format(tax_rate[\\\"Name\\\"]),\n\t\t\t\t\t\t\\\"root_type\\\": \\\"Liability\\\",\n\t\t\t\t\t\t\\\"parent_account\\\": encode_company_abbr(\\\"{} - QB\\\".format(\\\"Liability\\\"), self.company),\n\t\t\t\t\t\t\\\"is_group\\\": \\\"0\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t).insert()\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, tax_rate)\n\n\tdef _preprocess_tax_codes(self, tax_codes):\n\t\tself.tax_codes = {tax_code[\\\"Id\\\"]: tax_code for tax_code in tax_codes}\n\t\treturn tax_codes\n\n\tdef _save_tax_code(self, tax_code):\n\t\tpass\n\n\tdef _save_customer(self, customer):\n\t\ttry:\n\t\t\tif not frappe.db.exists(\n\t\t\t\t{\\\"doctype\\\": \\\"Customer\\\", \\\"quickbooks_id\\\": customer[\\\"Id\\\"], \\\"company\\\": self.company}\n\t\t\t):\n\t\t\t\ttry:\n\t\t\t\t\treceivable_account = frappe.get_all(\n\t\t\t\t\t\t\\\"Account\\\",\n\t\t\t\t\t\tfilters={\n\t\t\t\t\t\t\t\\\"account_type\\\": \\\"Receivable\\\",\n\t\t\t\t\t\t\t\\\"account_currency\\\": customer[\\\"CurrencyRef\\\"][\\\"value\\\"],\n\t\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t\t},\n\t\t\t\t\t)[0][\\\"name\\\"]\n\t\t\t\texcept Exception:\n\t\t\t\t\treceivable_account = None\n\t\t\t\terpcustomer = frappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Customer\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": customer[\\\"Id\\\"],\n\t\t\t\t\t\t\\\"customer_name\\\": encode_company_abbr(customer[\\\"DisplayName\\\"], self.company),\n\t\t\t\t\t\t\\\"customer_type\\\": \\\"Individual\\\",\n\t\t\t\t\t\t\\\"customer_group\\\": \\\"Commercial\\\",\n\t\t\t\t\t\t\\\"default_currency\\\": customer[\\\"CurrencyRef\\\"][\\\"value\\\"],\n\t\t\t\t\t\t\\\"accounts\\\": [{\\\"company\\\": self.company, \\\"account\\\": receivable_account}],\n\t\t\t\t\t\t\\\"territory\\\": \\\"All Territories\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t).insert()\n\t\t\t\tif \\\"BillAddr\\\" in customer:\n\t\t\t\t\tself._create_address(erpcustomer, \\\"Customer\\\", customer[\\\"BillAddr\\\"], \\\"Billing\\\")\n\t\t\t\tif \\\"ShipAddr\\\" in customer:\n\t\t\t\t\tself._create_address(erpcustomer, \\\"Customer\\\", customer[\\\"ShipAddr\\\"], \\\"Shipping\\\")\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, customer)\n\n\tdef _save_item(self, item):\n\t\ttry:\n\t\t\tif not frappe.db.exists(\n\t\t\t\t{\\\"doctype\\\": \\\"Item\\\", \\\"quickbooks_id\\\": item[\\\"Id\\\"], \\\"company\\\": self.company}\n\t\t\t):\n\t\t\t\tif item[\\\"Type\\\"] in (\\\"Service\\\", \\\"Inventory\\\"):\n\t\t\t\t\titem_dict = {\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Item\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": item[\\\"Id\\\"],\n\t\t\t\t\t\t\\\"item_code\\\": encode_company_abbr(item[\\\"Name\\\"], self.company),\n\t\t\t\t\t\t\\\"stock_uom\\\": \\\"Unit\\\",\n\t\t\t\t\t\t\\\"is_stock_item\\\": 0,\n\t\t\t\t\t\t\\\"item_group\\\": \\\"All Item Groups\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t\t\\\"item_defaults\\\": [\n\t\t\t\t\t\t\t{\\\"company\\\": self.company, \\\"default_warehouse\\\": self.default_warehouse}\n\t\t\t\t\t\t],\n\t\t\t\t\t}\n\t\t\t\t\tif \\\"ExpenseAccountRef\\\" in item:\n\t\t\t\t\t\texpense_account = self._get_account_name_by_id(item[\\\"ExpenseAccountRef\\\"][\\\"value\\\"])\n\t\t\t\t\t\titem_dict[\\\"item_defaults\\\"][0][\\\"expense_account\\\"] = expense_account\n\t\t\t\t\tif \\\"IncomeAccountRef\\\" in item:\n\t\t\t\t\t\tincome_account = self._get_account_name_by_id(item[\\\"IncomeAccountRef\\\"][\\\"value\\\"])\n\t\t\t\t\t\titem_dict[\\\"item_defaults\\\"][0][\\\"income_account\\\"] = income_account\n\t\t\t\t\tfrappe.get_doc(item_dict).insert()\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, item)\n\n\tdef _allow_fraction_in_unit(self):\n\t\tfrappe.db.set_value(\\\"UOM\\\", \\\"Unit\\\", \\\"must_be_whole_number\\\", 0)\n\n\tdef _save_vendor(self, vendor):\n\t\ttry:\n\t\t\tif not frappe.db.exists(\n\t\t\t\t{\\\"doctype\\\": \\\"Supplier\\\", \\\"quickbooks_id\\\": vendor[\\\"Id\\\"], \\\"company\\\": self.company}\n\t\t\t):\n\t\t\t\terpsupplier = frappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Supplier\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": vendor[\\\"Id\\\"],\n\t\t\t\t\t\t\\\"supplier_name\\\": encode_company_abbr(vendor[\\\"DisplayName\\\"], self.company),\n\t\t\t\t\t\t\\\"supplier_group\\\": \\\"All Supplier Groups\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t).insert()\n\t\t\t\tif \\\"BillAddr\\\" in vendor:\n\t\t\t\t\tself._create_address(erpsupplier, \\\"Supplier\\\", vendor[\\\"BillAddr\\\"], \\\"Billing\\\")\n\t\t\t\tif \\\"ShipAddr\\\" in vendor:\n\t\t\t\t\tself._create_address(erpsupplier, \\\"Supplier\\\", vendor[\\\"ShipAddr\\\"], \\\"Shipping\\\")\n\t\texcept Exception as e:\n\t\t\tself._log_error(e)\n\n\tdef _save_preference(self, preference):\n\t\ttry:\n\t\t\tif preference[\\\"SalesFormsPrefs\\\"][\\\"AllowShipping\\\"]:\n\t\t\t\tdefault_shipping_account_id = preference[\\\"SalesFormsPrefs\\\"][\\\"DefaultShippingAccount\\\"]\n\t\t\t\tself.default_shipping_account = self._get_account_name_by_id(\n\t\t\t\t\tself, default_shipping_account_id\n\t\t\t\t)\n\t\t\t\tself.save()\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, preference)\n\n\n\n", "CodeBleu_score": 26.955857025100936}, {"code": "def _save_invoice(self, invoice)\n\tself.company,\n\t\t\t\t}\n\t\t\t):\n\t\t\t\tfrappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Account\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": \\\"TaxRate - {}\\\".format(tax_rate[\\\"Id\\\"]),\n\t\t\t\t\t\t\\\"account_name\\\": \\\"{} - QB\\\".format(tax_rate[\\\"Name\\\"]),\n\t\t\t\t\t\t\\\"root_type\\\": \\\"Liability\\\",\n\t\t\t\t\t\t\\\"parent_account\\\": encode_company_abbr(\\\"{} - QB\\\".format(\\\"Liability\\\"), self.company),\n\t\t\t\t\t\t\\\"is_group\\\": \\\"0\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t).insert()\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, tax_rate)\n\n\tdef _preprocess_tax_codes(self, tax_codes):\n\t\tself.tax_codes = {tax_code[\\\"Id\\\"]: tax_code for tax_code in tax_codes}\n\t\treturn tax_codes\n\n\tdef _save_tax_code(self, tax_code):\n\t\tpass\n\n\tdef _save_customer(self, customer):\n\t\ttry:\n\t\t\tif not frappe.db.exists(\n\t\t\t\t{\\\"doctype\\\": \\\"Customer\\\", \\\"quickbooks_id\\\": customer[\\\"Id\\\"], \\\"company\\\": self.company}\n\t\t\t):\n\t\t\t\ttry:\n\t\t\t\t\treceivable_account = frappe.get_all(\n\t\t\t\t\t\t\\\"Account\\\",\n\t\t\t\t\t\tfilters={\n\t\t\t\t\t\t\t\\\"account_type\\\": \\\"Receivable\\\",\n\t\t\t\t\t\t\t\\\"account_currency\\\": customer[\\\"CurrencyRef\\\"][\\\"value\\\"],\n\t\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t\t},\n\t\t\t\t\t)[0][\\\"name\\\"]\n\t\t\t\texcept Exception:\n\t\t\t\t\treceivable_account = None\n\t\t\t\terpcustomer = frappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Customer\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": customer[\\\"Id\\\"],\n\t\t\t\t\t\t\\\"customer_name\\\": encode_company_abbr(customer[\\\"DisplayName\\\"], self.company),\n\t\t\t\t\t\t\\\"customer_type\\\": \\\"Individual\\\",\n\t\t\t\t\t\t\\\"customer_group\\\": \\\"Commercial\\\",\n\t\t\t\t\t\t\\\"default_currency\\\": customer[\\\"CurrencyRef\\\"][\\\"value\\\"],\n\t\t\t\t\t\t\\\"accounts\\\": [{\\\"company\\\": self.company, \\\"account\\\": receivable_account}],\n\t\t\t\t\t\t\\\"territory\\\": \\\"All Territories\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t).insert()\n\t\t\t\tif \\\"BillAddr\\\" in customer:\n\t\t\t\t\tself._create_address(erpcustomer, \\\"Customer\\\", customer[\\\"BillAddr\\\"], \\\"Billing\\\")\n\t\t\t\tif \\\"ShipAddr\\\" in customer:\n\t\t\t\t\tself._create_address(erpcustomer, \\\"Customer\\\", customer[\\\"ShipAddr\\\"], \\\"Shipping\\\")\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, customer)\n\n\tdef _save_item(self, item):\n\t\ttry:\n\t\t\tif not frappe.db.exists(\n\t\t\t\t{\\\"doctype\\\": \\\"Item\\\", \\\"quickbooks_id\\\": item[\\\"Id\\\"], \\\"company\\\": self.company}\n\t\t\t):\n\t\t\t\tif item[\\\"Type\\\"] in (\\\"Service\\\", \\\"Inventory\\\"):\n\t\t\t\t\titem_dict = {\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Item\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": item[\\\"Id\\\"],\n\t\t\t\t\t\t\\\"item_code\\\": encode_company_abbr(item[\\\"Name\\\"], self.company),\n\t\t\t\t\t\t\\\"stock_uom\\\": \\\"Unit\\\",\n\t\t\t\t\t\t\\\"is_stock_item\\\": 0,\n\t\t\t\t\t\t\\\"item_group\\\": \\\"All Item Groups\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t\t\\\"item_defaults\\\": [\n\t\t\t\t\t\t\t{\\\"company\\\": self.company, \\\"default_warehouse\\\": self.default_warehouse}\n\t\t\t\t\t\t],\n\t\t\t\t\t}\n\t\t\t\t\tif \\\"ExpenseAccountRef\\\" in item:\n\t\t\t\t\t\texpense_account = self._get_account_name_by_id(item[\\\"ExpenseAccountRef\\\"][\\\"value\\\"])\n\t\t\t\t\t\titem_dict[\\\"item_defaults\\\"][0][\\\"expense_account\\\"] = expense_account\n\t\t\t\t\tif \\\"IncomeAccountRef\\\" in item:\n\t\t\t\t\t\tincome_account = self._get_account_name_by_id(item[\\\"IncomeAccountRef\\\"][\\\"value\\\"])\n\t\t\t\t\t\titem_dict[\\\"item_defaults\\\"][0][\\\"income_account\\\"] = income_account\n\t\t\t\t\tfrappe.get_doc(item_dict).insert()\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, item)\n\n\tdef _allow_fraction_in_unit(self):\n\t\tfrappe.db.set_value(\\\"UOM\\\", \\\"Unit\\\", \\\"must_be_whole_number\\\", 0)\n\n\tdef _save_vendor(self, vendor):\n\t\ttry:\n\t\t\tif not frappe.db.exists(\n\t\t\t\t{\\\"doctype\\\": \\\"Supplier\\\", \\\"quickbooks_id\\\": vendor[\\\"Id\\\"], \\\"company\\\": self.company}\n\t\t\t):\n\t\t\t\terpsupplier = frappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Supplier\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": vendor[\\\"Id\\\"],\n\t\t\t\t\t\t\\\"supplier_name\\\": encode_company_abbr(vendor[\\\"DisplayName\\\"], self.company),\n\t\t\t\t\t\t\\\"supplier_group\\\": \\\"All Supplier Groups\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t).insert()\n\t\t\t\tif \\\"BillAddr\\\" in vendor:\n\t\t\t\t\tself._create_address(erpsupplier, \\\"Supplier\\\", vendor[\\\"BillAddr\\\"], \\\"Billing\\\")\n\t\t\t\tif \\\"ShipAddr\\\" in vendor:\n\t\t\t\t\tself._create_address(erpsupplier, \\\"Supplier\\\", vendor[\\\"ShipAddr\\\"], \\\"Shipping\\\")\n\t\texcept Exception as e:\n\t\t\tself._log_error(e)\n\n\tdef _save_preference(self, preference):\n\t\ttry:\n\t\t\tif preference[\\\"SalesFormsPrefs\\\"][\\\"AllowShipping\\\"]:\n\t\t\t\tdefault_shipping_account_id = preference[\\\"SalesFormsPrefs\\\"][\\\"DefaultShippingAccount\\\"]\n\t\t\t\tself.default_shipping_account = self._get_account_name_by_id(\n\t\t\t\t\tself, default_shipping_account_id\n\t\t\t\t)\n\t\t\t\tself.save()\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, preference)\n\n\n\n", "CodeBleu_score": 26.955857025100936}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\t\tcustomer_group: DF.Link | None\n\t\tcustomer_name: DF.Data | None\n\t\titems: DF.Table[MaintenanceScheduleItem]\n\t\tnaming_series: DF.Literal[\\\"MAT-MSH-.YYYY.-\\\"]\n\t\tschedules: DF.Table[MaintenanceScheduleDetail]\n\t\tstatus: DF.Literal[\\\"\\\", \\\"Draft\\\", \\\"Submitted\\\", \\\"Cancelled\\\"]\n\t\tterritory: DF.Link | None\n\t\ttransaction_date: DF.Date\n\t# end: auto-generated types\n\n\t@frappe.whitelist()\n\tdef generate_schedule(self):\n\t\tif self.docstatus != 0:\n\t\t\treturn\n\t\tself.set(\\\"schedules\\\", [])\n\t\tcount = 1\n\t\tfor d in self.get(\\\"items\\\"):\n\t\t\tself.validate_maintenance_detail()\n\t\t\ts_list = []\n\t\t\ts_list = self.create_schedule_list(d.start_date, d.end_date, d.no_of_visits, d.sales_person)\n\t\t\tfor i in range(d.no_of_visits):\n\t\t\t\tchild = self.append(\\\"schedules\\\")\n\t\t\t\tchild.item_code = d.item_code\n\t\t\t\tchild.item_name = d.item_name\n\t\t\t\tchild.scheduled_date = s_list[i].strftime(\\\"%Y-%m-%d\\\")\n\t\t\t\tif d.serial_no:\n\t\t\t\t\tchild.serial_no = d.serial_no\n\t\t\t\tchild.idx = count\n\t\t\t\tcount = count + 1\n\t\t\t\tchild.sales_person = d.sales_person\n\t\t\t\tchild.completion_status = \\\"Pending\\\"\n\t\t\t\tchild.item_reference = d.name\n\n\t@frappe.whitelist()\n\tdef validate_end_date_visits(self):\n\t\tdays_in_period = {\\\"Weekly\\\": 7, \\\"Monthly\\\": 30, \\\"Quarterly\\\": 91, \\\"Half Yearly\\\": 182, \\\"Yearly\\\": 365}\n\t\tfor item in self.items:\n\t\t\tif item.periodicity and item.periodicity != \\\"Random\\\" and item.start_date:\n\t\t\t\tif not item.end_date:\n\t\t\t\t\tif item.no_of_visits:\n\t\t\t\t\t\titem.end_date = add_days(\n\t\t\t\t\t\t\titem.start_date, item.no_of_visits * days_in_period[item.periodicity]\n\t\t\t\t\t\t)\n\t\t\t\t\telse:\n\t\t\t\t\t\titem.end_date = add_days(item.start_date, days_in_period[item.periodicity])\n\n\t\t\t\tdiff = date_diff(item.end_date, item.start_date) + 1\n\t\t\t\tno_of_visits = cint(diff / days_in_period[item.periodicity])\n\n\t\t\t\tif not item.no_of_visits or item.no_of_visits == 0:\n\t\t\t\t\titem.end_date = add_days(item.start_date, days_in_period[item.periodicity])\n\t\t\t\t\tdiff = date_diff(item.end_date, item.start_date) + 1\n\t\t\t\t\titem.no_of_visits = cint(diff / days_in_period[item.periodicity])\n\n\t\t\t\telif item.no_of_visits > no_of_visits:\n\t\t\t\t\titem.end_date = add_days(\n\t\t\t\t\t\titem.start_date, item.no_of_visits * days_in_period[item.periodicity]\n\t\t\t\t\t)\n\n\t\t\t\telif item.no_of_visits < no_of_visits:\n\t\t\t\t\titem.end_date = add_days(\n\t\t\t\t\t\titem.start_date, item.no_of_visits * days_in_period[item.periodicity]\n\t\t\t\t\t)\n\n\tdef on_submit(self):\n\t\tif not self.get(\\\"schedules\\\"):\n\t\t\tthrow(_(\\\"Please click on 'Generate Schedule' to get schedule\\\"))\n\t\tself.check_serial_no_added()\n\t\tself.validate_schedule()\n\n\t\temail_map = {}\n\t\tfor d in self.get(\\\"items\\\"):\n\t\t\tif d.serial_and_batch_bundle:\n\t\t\t\tserial_nos = frappe.get_doc(\n\t\t\t\t\t\\\"Serial and Batch Bundle\\\", d.serial_and_batch_bundle\n\t\t\t\t).get_serial_nos()\n\n\t\t\t\tif serial_nos:\n\t\t\t\t\tself.validate_serial_no(d.item_code, serial_nos, d.start_date)\n\t\t\t\t\tself.update_amc_date(serial_nos, d.end_date)\n\n\t\t\tno_email_sp = []\n\t\t\tif d.sales_person and d.sales_person not in email_map:\n\t\t\t\tsp = frappe.get_doc(\\\"Sales Person\\\", d.sales_person)\n\t\t\t\ttry:\n\t\t\t\t\temail_map[d.sales_person] = sp.get_email_id()\n\t\t\t\texcept frappe.ValidationError:\n\t\t\t\t\tno_email_sp.append(d.sales_person)\n\n\t\t\tif no_email_sp:\n\t\t\t\tfrappe.msgprint(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Setting Events to {0}, since the Employee attached to the below Sales Persons does not have a User ID{1}\\\"\n\t\t\t\t\t).format(self.owner, \\\"<br>\\\" + \\\"<br>\\\".join(no_email_sp))\n\t\t\t\t)\n\n\t\t\tscheduled_date = frappe.db.get_all(\n\t\t\t\t\\\"Maintenance Schedule Detail\\\",\n\t\t\t\t{\\\"parent\\\": self.name, \\\"item_code\\\": d.item_code},\n\t\t\t\t[\\\"scheduled_date\\\"],\n\t\t\t\tas_list=False,\n\t\t\t)\n\n\t\t\tfor key in scheduled_date:\n\t\t\t\tdescription = frappe._(\\\"Reference: {0}, Item Code: {1} and Customer: {2}\\\").format(\n\t\t\t\t\tself.name, d.item_code, self.customer\n\t\t\t\t)\n\t\t\t\tevent = frappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Event\\\",\n\t\t\t\t\t\t\\\"owner\\\": email_map.get(d.sales_person, self.owner),\n\t\t\t\t\t\t\\\"subject\\\": description,\n\t\t\t\t\t\t\\\"description\\\": description,\n\t\t\t\t\t\t\\\"starts_on\\\": cstr(key[\\\"scheduled_date\\\"]) + \\\" 10:00:00\\\",\n\t\t\t\t\t\t\\\"event_type\\\": \\\"Private\\\",\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\tevent.add_participant(self.doctype, self.name)\n\t\t\t\tevent.insert(ignore_permissions=1)\n\n\t\tself.db_set(\\\"status\\\", \\\"Submitted\\\")\n\n\n\n", "CodeBleu_score": 21.937000171664838}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\t\tcustomer_group: DF.Link | None\n\t\tcustomer_name: DF.Data | None\n\t\titems: DF.Table[MaintenanceScheduleItem]\n\t\tnaming_series: DF.Literal[\\\"MAT-MSH-.YYYY.-\\\"]\n\t\tschedules: DF.Table[MaintenanceScheduleDetail]\n\t\tstatus: DF.Literal[\\\"\\\", \\\"Draft\\\", \\\"Submitted\\\", \\\"Cancelled\\\"]\n\t\tterritory: DF.Link | None\n\t\ttransaction_date: DF.Date\n\t# end: auto-generated types\n\n\t@frappe.whitelist()\n\tdef generate_schedule(self):\n\t\tif self.docstatus != 0:\n\t\t\treturn\n\t\tself.set(\\\"schedules\\\", [])\n\t\tcount = 1\n\t\tfor d in self.get(\\\"items\\\"):\n\t\t\tself.validate_maintenance_detail()\n\t\t\ts_list = []\n\t\t\ts_list = self.create_schedule_list(d.start_date, d.end_date, d.no_of_visits, d.sales_person)\n\t\t\tfor i in range(d.no_of_visits):\n\t\t\t\tchild = self.append(\\\"schedules\\\")\n\t\t\t\tchild.item_code = d.item_code\n\t\t\t\tchild.item_name = d.item_name\n\t\t\t\tchild.scheduled_date = s_list[i].strftime(\\\"%Y-%m-%d\\\")\n\t\t\t\tif d.serial_no:\n\t\t\t\t\tchild.serial_no = d.serial_no\n\t\t\t\tchild.idx = count\n\t\t\t\tcount = count + 1\n\t\t\t\tchild.sales_person = d.sales_person\n\t\t\t\tchild.completion_status = \\\"Pending\\\"\n\t\t\t\tchild.item_reference = d.name\n\n\t@frappe.whitelist()\n\tdef validate_end_date_visits(self):\n\t\tdays_in_period = {\\\"Weekly\\\": 7, \\\"Monthly\\\": 30, \\\"Quarterly\\\": 91, \\\"Half Yearly\\\": 182, \\\"Yearly\\\": 365}\n\t\tfor item in self.items:\n\t\t\tif item.periodicity and item.periodicity != \\\"Random\\\" and item.start_date:\n\t\t\t\tif not item.end_date:\n\t\t\t\t\tif item.no_of_visits:\n\t\t\t\t\t\titem.end_date = add_days(\n\t\t\t\t\t\t\titem.start_date, item.no_of_visits * days_in_period[item.periodicity]\n\t\t\t\t\t\t)\n\t\t\t\t\telse:\n\t\t\t\t\t\titem.end_date = add_days(item.start_date, days_in_period[item.periodicity])\n\n\t\t\t\tdiff = date_diff(item.end_date, item.start_date) + 1\n\t\t\t\tno_of_visits = cint(diff / days_in_period[item.periodicity])\n\n\t\t\t\tif not item.no_of_visits or item.no_of_visits == 0:\n\t\t\t\t\titem.end_date = add_days(item.start_date, days_in_period[item.periodicity])\n\t\t\t\t\tdiff = date_diff(item.end_date, item.start_date) + 1\n\t\t\t\t\titem.no_of_visits = cint(diff / days_in_period[item.periodicity])\n\n\t\t\t\telif item.no_of_visits > no_of_visits:\n\t\t\t\t\titem.end_date = add_days(\n\t\t\t\t\t\titem.start_date, item.no_of_visits * days_in_period[item.periodicity]\n\t\t\t\t\t)\n\n\t\t\t\telif item.no_of_visits < no_of_visits:\n\t\t\t\t\titem.end_date = add_days(\n\t\t\t\t\t\titem.start_date, item.no_of_visits * days_in_period[item.periodicity]\n\t\t\t\t\t)\n\n\tdef on_submit(self):\n\t\tif not self.get(\\\"schedules\\\"):\n\t\t\tthrow(_(\\\"Please click on 'Generate Schedule' to get schedule\\\"))\n\t\tself.check_serial_no_added()\n\t\tself.validate_schedule()\n\n\t\temail_map = {}\n\t\tfor d in self.get(\\\"items\\\"):\n\t\t\tif d.serial_and_batch_bundle:\n\t\t\t\tserial_nos = frappe.get_doc(\n\t\t\t\t\t\\\"Serial and Batch Bundle\\\", d.serial_and_batch_bundle\n\t\t\t\t).get_serial_nos()\n\n\t\t\t\tif serial_nos:\n\t\t\t\t\tself.validate_serial_no(d.item_code, serial_nos, d.start_date)\n\t\t\t\t\tself.update_amc_date(serial_nos, d.end_date)\n\n\t\t\tno_email_sp = []\n\t\t\tif d.sales_person and d.sales_person not in email_map:\n\t\t\t\tsp = frappe.get_doc(\\\"Sales Person\\\", d.sales_person)\n\t\t\t\ttry:\n\t\t\t\t\temail_map[d.sales_person] = sp.get_email_id()\n\t\t\t\texcept frappe.ValidationError:\n\t\t\t\t\tno_email_sp.append(d.sales_person)\n\n\t\t\tif no_email_sp:\n\t\t\t\tfrappe.msgprint(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Setting Events to {0}, since the Employee attached to the below Sales Persons does not have a User ID{1}\\\"\n\t\t\t\t\t).format(self.owner, \\\"<br>\\\" + \\\"<br>\\\".join(no_email_sp))\n\t\t\t\t)\n\n\t\t\tscheduled_date = frappe.db.get_all(\n\t\t\t\t\\\"Maintenance Schedule Detail\\\",\n\t\t\t\t{\\\"parent\\\": self.name, \\\"item_code\\\": d.item_code},\n\t\t\t\t[\\\"scheduled_date\\\"],\n\t\t\t\tas_list=False,\n\t\t\t)\n\n\t\t\tfor key in scheduled_date:\n\t\t\t\tdescription = frappe._(\\\"Reference: {0}, Item Code: {1} and Customer: {2}\\\").format(\n\t\t\t\t\tself.name, d.item_code, self.customer\n\t\t\t\t)\n\t\t\t\tevent = frappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Event\\\",\n\t\t\t\t\t\t\\\"owner\\\": email_map.get(d.sales_person, self.owner),\n\t\t\t\t\t\t\\\"subject\\\": description,\n\t\t\t\t\t\t\\\"description\\\": description,\n\t\t\t\t\t\t\\\"starts_on\\\": cstr(key[\\\"scheduled_date\\\"]) + \\\" 10:00:00\\\",\n\t\t\t\t\t\t\\\"event_type\\\": \\\"Private\\\",\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\tevent.add_participant(self.doctype, self.name)\n\t\t\t\tevent.insert(ignore_permissions=1)\n\n\t\tself.db_set(\\\"status\\\", \\\"Submitted\\\")\n\n\n\n", "CodeBleu_score": 21.937000171664838}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\t\tcustomer_group: DF.Link | None\n\t\tcustomer_name: DF.Data | None\n\t\titems: DF.Table[MaintenanceScheduleItem]\n\t\tnaming_series: DF.Literal[\\\"MAT-MSH-.YYYY.-\\\"]\n\t\tschedules: DF.Table[MaintenanceScheduleDetail]\n\t\tstatus: DF.Literal[\\\"\\\", \\\"Draft\\\", \\\"Submitted\\\", \\\"Cancelled\\\"]\n\t\tterritory: DF.Link | None\n\t\ttransaction_date: DF.Date\n\t# end: auto-generated types\n\n\t@frappe.whitelist()\n\tdef generate_schedule(self):\n\t\tif self.docstatus != 0:\n\t\t\treturn\n\t\tself.set(\\\"schedules\\\", [])\n\t\tcount = 1\n\t\tfor d in self.get(\\\"items\\\"):\n\t\t\tself.validate_maintenance_detail()\n\t\t\ts_list = []\n\t\t\ts_list = self.create_schedule_list(d.start_date, d.end_date, d.no_of_visits, d.sales_person)\n\t\t\tfor i in range(d.no_of_visits):\n\t\t\t\tchild = self.append(\\\"schedules\\\")\n\t\t\t\tchild.item_code = d.item_code\n\t\t\t\tchild.item_name = d.item_name\n\t\t\t\tchild.scheduled_date = s_list[i].strftime(\\\"%Y-%m-%d\\\")\n\t\t\t\tif d.serial_no:\n\t\t\t\t\tchild.serial_no = d.serial_no\n\t\t\t\tchild.idx = count\n\t\t\t\tcount = count + 1\n\t\t\t\tchild.sales_person = d.sales_person\n\t\t\t\tchild.completion_status = \\\"Pending\\\"\n\t\t\t\tchild.item_reference = d.name\n\n\t@frappe.whitelist()\n\tdef validate_end_date_visits(self):\n\t\tdays_in_period = {\\\"Weekly\\\": 7, \\\"Monthly\\\": 30, \\\"Quarterly\\\": 91, \\\"Half Yearly\\\": 182, \\\"Yearly\\\": 365}\n\t\tfor item in self.items:\n\t\t\tif item.periodicity and item.periodicity != \\\"Random\\\" and item.start_date:\n\t\t\t\tif not item.end_date:\n\t\t\t\t\tif item.no_of_visits:\n\t\t\t\t\t\titem.end_date = add_days(\n\t\t\t\t\t\t\titem.start_date, item.no_of_visits * days_in_period[item.periodicity]\n\t\t\t\t\t\t)\n\t\t\t\t\telse:\n\t\t\t\t\t\titem.end_date = add_days(item.start_date, days_in_period[item.periodicity])\n\n\t\t\t\tdiff = date_diff(item.end_date, item.start_date) + 1\n\t\t\t\tno_of_visits = cint(diff / days_in_period[item.periodicity])\n\n\t\t\t\tif not item.no_of_visits or item.no_of_visits == 0:\n\t\t\t\t\titem.end_date = add_days(item.start_date, days_in_period[item.periodicity])\n\t\t\t\t\tdiff = date_diff(item.end_date, item.start_date) + 1\n\t\t\t\t\titem.no_of_visits = cint(diff / days_in_period[item.periodicity])\n\n\t\t\t\telif item.no_of_visits > no_of_visits:\n\t\t\t\t\titem.end_date = add_days(\n\t\t\t\t\t\titem.start_date, item.no_of_visits * days_in_period[item.periodicity]\n\t\t\t\t\t)\n\n\t\t\t\telif item.no_of_visits < no_of_visits:\n\t\t\t\t\titem.end_date = add_days(\n\t\t\t\t\t\titem.start_date, item.no_of_visits * days_in_period[item.periodicity]\n\t\t\t\t\t)\n\n\tdef on_submit(self):\n\t\tif not self.get(\\\"schedules\\\"):\n\t\t\tthrow(_(\\\"Please click on 'Generate Schedule' to get schedule\\\"))\n\t\tself.check_serial_no_added()\n\t\tself.validate_schedule()\n\n\t\temail_map = {}\n\t\tfor d in self.get(\\\"items\\\"):\n\t\t\tif d.serial_and_batch_bundle:\n\t\t\t\tserial_nos = frappe.get_doc(\n\t\t\t\t\t\\\"Serial and Batch Bundle\\\", d.serial_and_batch_bundle\n\t\t\t\t).get_serial_nos()\n\n\t\t\t\tif serial_nos:\n\t\t\t\t\tself.validate_serial_no(d.item_code, serial_nos, d.start_date)\n\t\t\t\t\tself.update_amc_date(serial_nos, d.end_date)\n\n\t\t\tno_email_sp = []\n\t\t\tif d.sales_person and d.sales_person not in email_map:\n\t\t\t\tsp = frappe.get_doc(\\\"Sales Person\\\", d.sales_person)\n\t\t\t\ttry:\n\t\t\t\t\temail_map[d.sales_person] = sp.get_email_id()\n\t\t\t\texcept frappe.ValidationError:\n\t\t\t\t\tno_email_sp.append(d.sales_person)\n\n\t\t\tif no_email_sp:\n\t\t\t\tfrappe.msgprint(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Setting Events to {0}, since the Employee attached to the below Sales Persons does not have a User ID{1}\\\"\n\t\t\t\t\t).format(self.owner, \\\"<br>\\\" + \\\"<br>\\\".join(no_email_sp))\n\t\t\t\t)\n\n\t\t\tscheduled_date = frappe.db.get_all(\n\t\t\t\t\\\"Maintenance Schedule Detail\\\",\n\t\t\t\t{\\\"parent\\\": self.name, \\\"item_code\\\": d.item_code},\n\t\t\t\t[\\\"scheduled_date\\\"],\n\t\t\t\tas_list=False,\n\t\t\t)\n\n\t\t\tfor key in scheduled_date:\n\t\t\t\tdescription = frappe._(\\\"Reference: {0}, Item Code: {1} and Customer: {2}\\\").format(\n\t\t\t\t\tself.name, d.item_code, self.customer\n\t\t\t\t)\n\t\t\t\tevent = frappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Event\\\",\n\t\t\t\t\t\t\\\"owner\\\": email_map.get(d.sales_person, self.owner),\n\t\t\t\t\t\t\\\"subject\\\": description,\n\t\t\t\t\t\t\\\"description\\\": description,\n\t\t\t\t\t\t\\\"starts_on\\\": cstr(key[\\\"scheduled_date\\\"]) + \\\" 10:00:00\\\",\n\t\t\t\t\t\t\\\"event_type\\\": \\\"Private\\\",\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\tevent.add_participant(self.doctype, self.name)\n\t\t\t\tevent.insert(ignore_permissions=1)\n\n\t\tself.db_set(\\\"status\\\", \\\"Submitted\\\")\n\n\n\n", "CodeBleu_score": 21.937000171664838}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t$request = request();\n\n        $success = true;\n\n        $message = $this->getActionMessage($request);\n\n        $data = $this->getActionData($request, $data);\n\n        $html = view($view, $data)->render();\n\n        return response()->json([\n            'success' => $success,\n            'message' => $message,\n            'data' => $data,\n            'html' => $html\n        ]);\n    }", "CodeBleu_score": 32.848636937446415}, {"code": "<?\n   public function response($view, $data = []){\n\t$request = request();\n        $response = [];\n        $response['success'] = true;\n        $response['message'] = $this->getTranslatedMessage('general');\n        $response['data'] = [];\n        $response['data']['title'] = $data['title'];\n        $response['data']['path'] = $data['path'];\n        $response['data']['handle'] = $data['handle'];\n        $response['data']['html'] = view($view, $data)->render();\n\n        if ($request->expectsJson()) {\n            return response()->json($response);\n        }\n\n        return response()->make(view('partials.modal', $response['data']), 200, ['Content-Type' => 'text/html']);\n    }", "CodeBleu_score": 34.36027356011272}, {"code": "<?\n   public function response($view, $data = []){\n\t$request = request();\n\n        if ($request->expectsJson()) {\n            return response()->json([\n                'status' => 'success',\n                'message' => $this->getTranslation($this->messages['general']),\n                'data' => $data,\n            ]);\n        }\n\n        $data['url'] = url('bulk-actions/' . $request->route('bulk_action') . '/' . $request->route('method'));\n\n        $data['title'] = $this->getTranslation($this->actions[$request->route('method')]['name']);\n\n        $data['handle'] = $request->route('method');\n\n        $data['html'] = view($view, $data)->render();\n\n        return response()->json([\n            'status' => 'success',\n            'message' => $this->getTranslation($this->messages['general']),\n            'data' => $data,\n        ]);\n    }", "CodeBleu_score": 43.12998356033532}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request, 'user');\n\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 88.85307380605111}, {"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request, 'user');\n\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 97.29576256997855}, {"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request, 'user');\n\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 97.29576256997855}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\tuse App\\Jobs\\Banking\\DeleteTransaction;", "CodeBleu_score": 6.403975899927429}, {"code": "<?\npublic function deleteTransactions($request){\n\tuse App\\Jobs\\Banking\\DeleteTransaction;", "CodeBleu_score": 6.403975899927429}, {"code": "<?\npublic function deleteTransactions($request){\n\tuse App\\Jobs\\Banking\\DeleteTransaction;", "CodeBleu_score": 6.403975899927429}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\tif (!class_exists($this->request_class)) {\n        return;\n    }\n\n    $request = new $this->request_class;\n\n    if (!$request instanceof FormRequest) {\n        return;\n    }\n\n    $request->setContainer(app());\n    $request->setRedirector(app()->make(Redirector::class));\n    $request->setUserResolver(function () {\n        return $this->user;\n    });\n\n    $request->initialize(\n        app()->make('request')->query->all(),\n        app()->make('request')->request->all(),\n        app()->make('request')->attributes->all(),\n        app()->make('request')->cookies->all(),\n        app()->make('request')->files->all(),\n        app()->make('request')->server->all()\n    );\n\n    $request->setRouteResolver(function () use ($request) {\n        return (new Route('GET', '/', []))->bind($request);\n    });\n\n    $request->setUserResolver(function () {\n        return $this->user;\n    });\n\n    $rules = $request->rules();\n\n    $rules = $this->prepareRules($rules);\n\n    $validator->after(function ($validator) use ($request, $rules) {\n        $request->setContainer(app());\n        $request->setRedirector(app()->make(Redirector::class));\n        $request->setUserResolver(function () {\n            return $this->user;\n        });\n\n        $request->initialize(\n            app()->make('request')->query->all(),\n            app()->make('request')->request->all(),\n            app()->make('request')->attributes->all(),\n            app()->make('request')->cookies->all(),\n            app()->make('request')->files->all(),\n            app()->make('request')->server->all()\n        );\n\n        $request->setRouteResolver(function () use ($request) {\n            return (new Route('GET', '/', []))->bind($request);\n        });\n\n        $request->setUserResolver(function () {\n            return $this->user;\n        });\n\n        $request->replace($validator->getData());", "CodeBleu_score": 29.51974316689279}, {"code": "<?\npublic function withValidator($validator){\n\tif (!$this->request_class || !class_exists($this->request_class) || !is_subclass_of($this->request_class, FormRequest::class)) {\n        return;\n    }\n\n    $request = new $this->request_class();\n\n    $request->setContainer(app());\n    $request->setRedirector(app('redirect'));\n    $request->setUserResolver(function () {\n        return $this->user;\n    });\n\n    $request->initialize(\n        app('request')->query->all(),\n        app('request')->request->all(),\n        app('request')->attributes->all(),\n        app('request')->cookies->all(),\n        app('request')->files->all(),\n        app('request')->server->all()\n    );\n\n    $request->setRouteResolver(function () use ($request) {\n        return (new Route('GET', '/', []))->bind($request);\n    });\n\n    $rules = $request->rules();\n\n    $rules = $this->prepareRules($rules);\n\n    $validator->after(function ($validator) use ($request, $rules) {\n        $failed_rows = [];\n\n        foreach ($this->toArray(null) as $row) {\n            $request->replace($row);\n\n            try {\n                $request->validateResolved();\n            } catch (ValidationException $e) {\n                $failed_rows[] = $row;\n\n                foreach ($e->validator->failed() as $attribute => $messages) {\n                    foreach ($messages as $message) {\n                        $validator->errors()->add($attribute, $message);\n                    }\n                }\n            }\n        }\n\n        if (count($failed_rows) > 0) {\n            throw new ValidationException($validator, response()->json([\n                'message' => trans('messages.error.import_validation_failed', ['name' => $this->getRowName()]),\n                'errors' => $validator->errors(),\n                'failed_rows' => $failed_rows,\n            ]));\n        }\n    });\n}", "CodeBleu_score": 40.47452257176334}, {"code": "<?\npublic function withValidator($validator){\n\tif (!is_null($this->request_class)) {\n        $request_class = $this->request_class;\n\n        if (!$request_class instanceof FormRequest) {\n            return;\n        }\n\n        $request = new $request_class();\n\n        $request->setContainer(app());\n\n        $request->setRedirector(app('redirect'));\n\n        $request->setUserResolver(function () {\n            return $this->user;\n        });\n\n        $request->setRouteResolver(function () use ($request) {\n            $route = app('router')->getRoutes()->match($request);\n\n            $route->setParameter('tenant', $this->user->tenant);\n\n            return $route;\n        });\n\n        $request->initialize(\n            $request->query->all(),\n            $request->request->all(),\n            $request->attributes->all(),\n            $request->cookies->all(),\n            $request->files->all(),\n            $request->server->all()\n        );\n\n        $rules = $this->prepareRules($request->rules());\n\n        $validator->after(function ($validator) use ($request, $rules) {\n            $request->setUserResolver(function () {\n                return $this->user;\n            });\n\n            $request->setRouteResolver(function () use ($request) {\n                $route = app('router')->getRoutes()->match($request);\n\n                $route->setParameter('tenant', $this->user->tenant);\n\n                return $route;\n            });\n\n            $request->replace($validator->validated());\n\n            try {\n                $request->validate($rules);\n            } catch (ValidationException $e) {\n                $validator->errors()->add('row', $e->errors());\n\n                throw $e;\n            }\n        });\n    }\n}", "CodeBleu_score": 40.15331518489628}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif (! $this instanceof ShouldUpdate) {\n        return;\n    }\n\n    if (isset($arguments[0]) && $arguments[0] instanceof Model) {\n        $this->model = $arguments[0];\n    }\n\n    if (isset($arguments[1]) && $arguments[1] instanceof Request) {\n        $this->request = $arguments[1];\n    }\n}", "CodeBleu_score": 63.40112790812498}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif (! $this instanceof ShouldUpdate) {\n        return;\n    }\n\n    if ($arguments[0] instanceof Model) {\n        $this->model = $arguments[0];\n    }\n\n    $request = $this->getRequestInstance($arguments[1]);\n    if ($request instanceof Request) {\n        $this->request = $request;\n    }\n}", "CodeBleu_score": 97.86156640104318}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif (! $this instanceof ShouldUpdate) {\n        return;\n    }\n\n    $this->model = $arguments[0] instanceof Model ? $arguments[0] : $this->model;\n\n    $request = $this->getRequestInstance($arguments[0]);\n    if ($request instanceof Request) {\n        $this->request = $request;\n    }\n}", "CodeBleu_score": 66.71945788186868}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t$request = request();\n\n    $sort = $request->get('sort', $sort);\n\n    $search = $request->get('search');\n\n    if (!empty($search)) {\n        $query->search($search);\n    }\n\n    $query->orderBy($sort, $request->get('direction', 'asc'));\n\n    if ($request->expectsJson() && !$request->is('api/*')) {\n        return $query->get();\n    }\n\n    return $query->paginate(config('fi.results_per_page', 15));\n}", "CodeBleu_score": 52.99550320010429}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t$request = request();\n\n    $search = $request->get('search');\n    $limit = $request->get('limit', setting('default.list_limit', '25'));\n\n    $query->usingSearchString($search)->sortable($sort);\n\n    if ($request->expectsJson() && !$request->is('api/*')) {\n        return $query->get();\n    }\n\n    return $query->paginate($limit);\n}", "CodeBleu_score": 63.50269832095158}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t$request = request();\n\n    if ($request->has('search')) {\n        $search = $request->get('search');\n\n        event(new SearchStringApplying($search));\n\n        $query->search($search);\n\n        event(new SearchStringApplied($search));\n    }\n\n    if ($request->has('sort')) {\n        $sort = $request->get('sort');\n    }\n\n    $query->orderBy($sort);\n\n    if ($request->expectsJson()) {\n        if (($request->has('limit')) && ($request->get('limit') == -1)) {\n            return $query->get();\n        }\n    }\n\n    return $query->paginate(config('fi.results_per_page'));\n}", "CodeBleu_score": 48.988230157950355}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t$open = $overdue = 0;\n\n    if ($model->status == 'paid') {\n        return [$open, $overdue];\n    }\n\n    if ($model->status == 'partial') {\n        $open = $model->transactions->sum('amount');\n    } else {\n        $open = $model->amount;\n    }\n\n    if ($model->due_at && $model->due_at->isPast()) {\n        $overdue = $open;\n        $open = 0;\n    }\n\n    return [$open, $overdue];\n}", "CodeBleu_score": 50.295858842429276}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t$open = 0;\n    $overdue = 0;\n\n    if ($model->status_id == Document::STATUS_PAID) {\n        return [\n            'open' => $open,\n            'overdue' => $overdue,\n        ];\n    }\n\n    // Sum partial payments\n    if ($model->status_id == Document::STATUS_PARTIAL) {\n        $payments = $model->transactions()->where('type', '=', Transaction::TYPE_PAYMENT)->get();\n\n        foreach ($payments as $payment) {\n            $open += $payment->getAmountConvertedToDefault();\n        }\n    }\n\n    // Check if document is overdue\n    if ($model->isOverdue()) {\n        $overdue = $model->getAmountConvertedToDefault();\n    } else {\n        $open = $model->getAmountConvertedToDefault();\n    }\n\n    return [\n        'open' => $open,\n        'overdue' => $overdue,\n    ];\n}", "CodeBleu_score": 43.622548559959604}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t$open = $overdue = 0;\n\n    if ($model->status_id == 'paid') {\n        return [\n            'open' => $open,\n            'overdue' => $overdue,\n        ];\n    }\n\n    $payments = 0;\n\n    if ($model->status_id == 'partial') {\n        $payments = $model->transactions->where('type', 'payment')->sum('amount');\n    }\n\n    $due_date = $model->due_at;\n    $date_format = 'Y-m-d';\n    $date_now = date($date_format);\n\n    if ($model->status_id == 'sent' && $due_date < $date_now) {\n        $open = $model->amount - $payments;\n        $overdue = $open;\n    } else {\n        $open = $model->amount - $payments;\n    }\n\n    return [\n        'open' => $open,\n        'overdue' => $overdue,\n    ];\n}", "CodeBleu_score": 47.958850783820175}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $results = $this->forPage($page, $perPage)->get($columns);\n\n    $total = $results->total();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 76.49171914700963}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$perPage = $perPage ?: $this->model->getPerPage();\n    $columns = $this->getPaginationColumns($columns);\n    $currentPage = $page ?: Paginator::resolveCurrentPage($pageName);\n    $total = $this->getPaginationCount($columns);\n    $results = $this->forPage($currentPage, $perPage)->get($columns);\n    return $this->paginator($results, $total, $perPage, $currentPage, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 70.21839099808362}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $results = ($total = $this->toBase()->getCountForPagination())\n                ? $this->forPage($page, $perPage)->get($columns)\n                : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 92.95006145147924}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t$reconciliations = $this->getSelectedRecords($request);\n\n    Transaction::whereIn('id', $this->getRelatedRecords($reconciliations))->update(['reconciled' => 1]);\n\n    foreach ($reconciliations as $reconciliation) {\n        $reconciliation->status = 'reconciled';\n        $reconciliation->save();\n    }\n}", "CodeBleu_score": 41.358021882584396}, {"code": "<?\npublic function reconcile($request){\n\t$reconciliations = $this->getSelectedRecords($request);\n\n    foreach ($reconciliations as $reconciliation) {\n        $this->reconcileReconciliation($reconciliation);\n    }\n\n    return count($reconciliations);\n}", "CodeBleu_score": 29.141662984808793}, {"code": "<?\npublic function reconcile($request){\n\t$this->authorize('update-banking-reconciliations');\n\n    $reconciliations = $this->getSelectedRecords($request);\n\n    foreach ($reconciliations as $reconciliation) {\n        $reconciliation->status = 'reconciled';\n\n        $reconciliation->save();\n\n        $transactions = Transaction::where('account_id', $reconciliation->account_id)\n            ->where('reconciled', 0)\n            ->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])\n            ->get();\n\n        foreach ($transactions as $transaction) {\n            $transaction->reconciled = 1;\n\n            $transaction->save();\n        }\n    }\n}", "CodeBleu_score": 63.94823851003332}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t$this->beginTransaction();\n\n    $this->invitation = $this->dispatch(new DeleteInvitations($this->user));\n\n    $this->invitation = $this->dispatch(new CreateUserInvitation($this->user));\n\n    try {\n        $this->invitation->notify(new Notification($this->invitation));\n    } catch (TransportException $e) {\n        throw new Exception(trans('messages.error.email'));\n    }\n\n    $this->commit();\n\n    return $this->invitation;\n}", "CodeBleu_score": 28.808019697700093}, {"code": "<?\npublic function handle(): UserInvitation{\n\t$this->beginTransaction();\n\n    $this->invitation = $this->getInvitation();\n\n    $this->deleteInvitations();\n\n    $this->invitation = $this->createInvitation();\n\n    try {\n        $this->invitation->notify(new Notification($this->invitation));\n    } catch (TransportException $e) {\n        throw new Exception(trans('messages.error.email'));\n    }\n\n    $this->commitTransaction();\n\n    return $this->invitation;\n}", "CodeBleu_score": 25.635355228630374}, {"code": "<?\npublic function handle(): UserInvitation{\n\ttry {\n        \\DB::transaction(function () {\n            $this->deleteExistingInvitations();\n\n            $this->invitation = $this->createInvitation();\n\n            $this->sendNotification();\n        });\n    } catch (TransportException $e) {\n        throw new Exception('Could not send invitation email.');\n    }\n\n    return $this->invitation;\n}", "CodeBleu_score": 22.616071491822936}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\tif ($this->model->reconciled) {\n        throw new \\Exception(trans('messages.warning.reconciled', ['name' => $this->model->name]));\n    }\n\n    if ($this->model->type == Transaction::TRANSFER_TYPE) {\n        throw new \\Exception(trans('messages.error.unauthorized'));\n    }\n}", "CodeBleu_score": 34.49767011252555}, {"code": "<?\npublic function authorize(): void{\n\tif ($this->model->reconciled) {\n        throw new Exception(trans('messages.error.reconciled', ['name' => $this->model->name]));\n    }\n\n    if ($this->model->transfer) {\n        throw new Exception(trans('messages.error.transfer', ['name' => $this->model->name]));\n    }\n}", "CodeBleu_score": 28.302227017423387}, {"code": "<?\npublic function authorize(): void{\n\tif ($this->model->reconciled) {\n        throw new \\Exception(trans('messages.error.reconciled', ['name' => $this->model->name]));\n    }\n\n    if ($this->model->type == 'transfer') {\n        throw new \\Exception(trans('messages.error.transfer', ['name' => $this->model->name]));\n    }\n}", "CodeBleu_score": 30.54952488265525}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\tString token = request.getHeader(\"X-Access-Token\");\n    Long tenantId = Tools.getTenantIdByToken(token);\n    if (tenantId != 0L) {\n        //\u8fc7\u6ee4\u6307\u5b9a\u8868\n        List<String> ignoreTableName = new ArrayList<>();\n        ignoreTableName.add(\"material_category\");\n        ignoreTableName.add(\"serial_number_rule\");\n        ignoreTableName.add(\"unit\");\n        ignoreTableName.add(\"material_property\");\n        ignoreTableName.add(\"depot\");\n        ignoreTableName.add(\"organization\");\n        ignoreTableName.add(\"user_business\");\n        ignoreTableName.add(\"user\");\n        ignoreTableName.add(\"role\");\n        ignoreTableName.add(\"material\");\n        ignoreTableName.add(\"basic_material\");\n        ignoreTableName.add(\"person\");\n        ignoreTableName.add(\"supplier\");\n        ignoreTableName.add(\"depot_head\");\n        ignoreTableName.add(\"depot_item\");\n        ignoreTableName.add(\"account_head\");\n        ignoreTableName.add(\"account_item\");\n        ignoreTableName.add(\"account_head_v\");\n        ignoreTableName.add(\"serial_number\");\n        ignoreTableName.add(\"log\");\n        ignoreTableName.add(\"material_depot\");\n        ignoreTableName.add(\"depot_head_v\");\n        ignoreTableName.add(\"depot_item_v\");\n        ignoreTableName.add(\"account_head_v\");\n        ignoreTableName.add(\"account_item_v\");\n        ignoreTableName.add(\"account_head_v\");\n        ignoreTableName.add(\"account_item_v\");\n        ignoreTableName.add(\"basic_material_v\");\n        ignoreTableName.add(\"material_v\");\n        ignoreTableName.add(\"depot_v\");\n        ignoreTableName.add(\"depot_head_v\");\n        ignoreTableName.add(\"depot_item_v\");\n        ignoreTableName.add(\"account_head_v\");\n        ignoreTableName.add(\"account_item_v\");\n        ignoreTableName.add(\"serial_number_v\");", "CodeBleu_score": 32.52870125023163}, {"code": "public boolean doTableFilter(String tableName){\n\tString token = request.getHeader(\"X-Access-Token\");\n    Long tenantId = Tools.getTenantIdByToken(token);\n    if (tenantId != 0L) {\n        //\u975e\u8d85\u7ba1\n        return \"material_category\".equals(tableName) || \"material\".equals(tableName) || \"material_property\".equals(tableName)\n                || \"serial_number\".equals(tableName) || \"material_depot\".equals(tableName) || \"depot_head\".equals(tableName)\n                || \"depot_item\".equals(tableName) || \"account_head\".equals(tableName) || \"account_item\".equals(tableName)\n                || \"organization\".equals(tableName) || \"user\".equals(tableName) || \"role\".equals(tableName)\n                || \"app\".equals(tableName) || \"depot\".equals(tableName) || \"person\".equals(tableName)\n                || \"supplier\".equals(tableName) || \"unit\".equals(tableName) || \"material_depot_item\".equals(tableName)\n                || \"material_depot_inventory\".equals(tableName) || \"material_depot_inventory_detail\".equals(tableName)\n                || \"material_depot_inventory_item\".equals(tableName) || \"material_depot_inventory_item_detail\".equals(tableName)\n                || \"material_depot_inventory_item_detail_item\".equals(tableName) || \"material_depot_inventory_item_detail_item_detail\".equals(tableName)\n                || \"material_depot_inventory_item_detail_item_detail_item\".equals(tableName) || \"material_depot_inventory_item_detail_item_detail_item_detail\".equals(tableName)\n                || \"material_depot_inventory_item_detail_item_detail_item_detail_item\".equals(tableName) || \"material_depot_inventory_item_detail_item_detail_item_detail_item_detail\".equals(tableName)\n                || \"material_depot_inventory_item_detail_item_detail_item_detail_item", "CodeBleu_score": 40.08928167174362}, {"code": "public boolean doTableFilter(String tableName){\n\tString token = request.getHeader(\"X-Access-Token\");\n    Long tenantId = Tools.getTenantIdByToken(token);\n    if (tenantId != 0L) {\n        //\u5141\u8bb8\u8bbf\u95ee\u7684\u8868\n        List<String> tableWhiteList = new ArrayList<>();\n        tableWhiteList.add(\"sys_user\");\n        tableWhiteList.add(\"sys_user_role\");\n        tableWhiteList.add(\"sys_role\");\n        tableWhiteList.add(\"sys_role_resource\");\n        tableWhiteList.add(\"sys_resource\");\n        tableWhiteList.add(\"sys_tenant\");\n        tableWhiteList.add(\"sys_tenant_user\");\n        tableWhiteList.add(\"sys_tenant_user_role\");\n        tableWhiteList.add(\"sys_tenant_role\");\n        tableWhiteList.add(\"sys_tenant_role_resource\");\n        tableWhiteList.add(\"sys_tenant_resource\");\n        tableWhiteList.add(\"sys_tenant_depot\");\n        tableWhiteList.add(\"sys_depot\");\n        tableWhiteList.add(\"sys_depot_resource\");\n        tableWhiteList.add(\"sys_org\");\n        tableWhiteList.add(\"sys_org_resource\");\n        tableWhiteList.add(\"sys_org_user\");\n        tableWhiteList.add(\"sys_org_user_role\");\n        tableWhiteList.add(\"sys_org_role\");\n        tableWhiteList.add(\"sys_org_role_resource\");\n        tableWhiteList.add(\"sys_org_depot\");\n        tableWhiteList.add(\"sys_org_depot_resource\");\n        tableWhiteList.add(\"sys_org_tenant\");\n        tableWhiteList.add(\"sys_org_tenant_resource\");\n        tableWhiteList.add(\"sys_org_tenant_user\");\n        tableWhiteList.add(\"sys_org_tenant_user_role\");\n        tableWhiteList.add(\"sys_org_tenant_role\");\n        tableWhiteList.add(\"sys_org_tenant_role_resource\");\n        tableWhiteList.add(\"sys_org_tenant_dep", "CodeBleu_score": 32.634972027922316}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 64.10430100685872}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 64.10430100685872}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\n    //\u914d\u7f6e\u901a\u7528Mapper\uff0c\u8be6\u60c5\u8bf7\u67e5\u9605\u5b98\u65b9\u6587\u6863\n    Properties properties = new Properties();\n    properties.setProperty(\"mappers\", \"com.jsh.erp.datasource.mappers.MyMapper\");\n    properties.setProperty(\"notEmpty\", \"false\");//insert\u3001update\u662f\u5426\u5224\u65ad\u5b57\u7b26\u4e32\u7c7b\u578b!='' \u5373 test=\"str != null\"\u8868\u8fbe\u5f0f\u5185\u662f\u5426\u8ffd\u52a0 and str != ''\n    properties.setProperty(\"IDENTITY\", \"MYSQL\");\n    mapperScannerConfigurer.setProperties(properties);\n\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 54.44051227075691}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"id\", account.getId());\n                //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                item.put(\"name\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        res = dataArray.toJSONString();\n    } catch (Exception e) {\n        e.printStackTrace();\n        res = \"\u83b7\u53d6\u4fe1\u606f\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 88.91283044980153}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        //\u5904\u7406\u6570\u636e\u6743\u9650\n        String userInfo = accountService.getUserInfoByUserNo(request.getParameter(\"userNo\"));\n        if (StringUtil.isNotEmpty(userInfo)) {\n            JSONObject userInfo_obj = JSONObject.parseObject(userInfo);\n            String key = userInfo_obj.getString(\"key\");\n            String type = userInfo_obj.getString(\"type\");\n            if (StringUtil.isNotEmpty(type) && type.equals(\"1\")) {\n                if (StringUtil.isNotEmpty(key)) {\n                    List<Account> userDataList = JSONArray.parseArray(key, Account.class);\n                    Map<Long, String> map = new HashMap<Long, String>();\n                    for (int i = 0; i < userDataList.size(); i++) {\n                        map.put(userDataList.get(i).getId(), userDataList.get(i).getName());\n                    }\n                    List<Account> newDataList = new ArrayList<Account>();\n                    for (Account account : dataList) {\n                        if (map.containsKey(account.getId())) {\n                            newDataList.add(account);\n                        }\n                    }\n                    dataList = newDataList;\n                }\n            }\n        }\n        List<AccountVo4List> accountVo4Lists = new ArrayList<AccountVo4List>();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                AccountVo4List accountVo4List = new AccountVo4List();\n                accountVo4List.setId(account.getId());\n                accountVo4List.setName(account.getName());\n                accountVo4Lists.add(accountVo4List);\n            }\n        }\n        res = JSONArray.toJSONString(accountVo4Lists);\n    } catch (Exception e) {\n        e.printStackTrace();\n        res = \"\u83b7\u53d6\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 52.04649215475846}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"id\", account.getId());\n                //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                item.put(\"accountName\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        res = dataArray.toJSONString();\n    } catch (Exception e) {\n        e.printStackTrace();\n        res = \"\u83b7\u53d6\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 89.13365438847852}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tswagger.annotations.Api;", "CodeBleu_score": 12.027120952446907}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tswagger.annotations.Api;", "CodeBleu_score": 12.027120952446907}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tswagger.annotations.Api;", "CodeBleu_score": 12.027120952446907}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t   public String findBySelect(HttpServletRequest request) throws Exception {\n        String res = null;\n        try {\n            List<Account> dataList = accountService.findBySelect();\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataList) {\n                for (Account account : dataList) {\n                    JSONObject item = new JSONObject();\n                    item.put(\\\"Id\\\", account.getId());\n                    //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                    item.put(\\\"AccountName\\\", account.getName());\n                    dataArray.add(item);\n                }\n            }\n            res = dataArray.toJSONString();\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u83b7\u53d6\u6240\u6709\u7ed3\u7b97\u8d26\u6237\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/getAccount\\\")\n    @ApiOperation(value = \\\"\u83b7\u53d6\u6240\u6709\u7ed3\u7b97\u8d26\u6237\\\")\n    public BaseResponseInfo getAccount(HttpServletRequest request) throws Exception {\n        BaseResponseInfo res = new BaseResponseInfo();\n        Map<String, Object> map = new HashMap<String, Object>();\n        try {\n            List<Account> accountList = accountService.getAccount();\n            map.put(\\\"accountList\\\", accountList);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u8d26\u6237\u6d41\u6c34\u4fe1\u606f\n     * @param currentPage\n     * @param pageSize\n     * @param accountId\n     * @param initialAmount\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/findAccountInOutList\\\")\n    @ApiOperation(value = \\\"\u8d26\u6237\u6d41\u6c34\u4fe1\u606f\\\")\n    public BaseResponseInfo findAccountInOutList(@RequestParam(\\\"currentPage\\\") Integer currentPage,\n                                                 @RequestParam(\\\"pageSize\\\") Integer pageSize,\n                                                 @RequestParam(\\\"accountId\\\") Long accountId,\n                                                 @RequestParam(\\\"initialAmount\\\") BigDecimal initialAmount,\n                                                 @RequestParam(value = \\\"number\\\",required = false) String number,\n                                                 @RequestParam(value = \\\"beginTime\\\",required = false) String beginTime,\n                                                 @RequestParam(value = \\\"endTime\\\",required = false) String endTime,\n                                                 HttpServletRequest request) throws Exception{\n        BaseResponseInfo res = new BaseResponseInfo();\n        Map<String, Object> map = new HashMap<String, Object>();\n        try {\n            Boolean forceFlag = systemConfigService.getForceApprovalFlag();\n            List<AccountVo4InOutList> dataList = accountService.findAccountInOutList(accountId, StringUtil.toNull(number),\n                    beginTime, endTime, forceFlag, (currentPage-1)*pageSize, pageSize);\n            int total = accountService.findAccountInOutListCount(accountId, StringUtil.toNull(number),\n                    beginTime, endTime, forceFlag);\n            map.put(\\\"total\\\", total);\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataList) {\n                for (AccountVo4InOutList aEx : dataList) {\n                    String type = aEx.getType().replace(\\\"\u5176\u5b83\\\", \\\"\\\");\n                    aEx.setType(type);\n                    String operTime = aEx.getOperTime();\n                    BigDecimal balance = accountService.getAccountSum(accountId, null, operTime, forceFlag)\n                            .add(accountService.getAccountSumByHead(accountId, null, operTime, forceFlag))\n                            .add(accountService.getAccountSumByDetail(accountId, null, operTime, forceFlag))\n                            .add(accountService.getManyAccountSum(accountId, null, operTime, forceFlag)).add(initialAmount);\n                    aEx.setBalance(balance);\n                    aEx.setAccountId(accountId);\n                    dataArray.add(aEx);\n                }\n            }\n            map.put(\\\"rows\\\", dataArray);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u66f4\u65b0\u9ed8\u8ba4\u8d26\u6237\n     * @param object\n     * @param request\n     * @return\n     * @throws Exception\n     */\n    @PostMapping(value = \\\"/updateIsDefault\\\")\n    @ApiOperation(value = \\\"\u66f4\u65b0\u9ed8\u8ba4\u8d26\u6237\\\")\n    public String updateIsDefault(@RequestBody JSONObject object,\n                                       HttpServletRequest request) throws Exception{\n        Long accountId = object.getLong(\\\"id\\\");\n        Map<String, Object> objectMap = new HashMap<>();\n        int res = accountService.updateIsDefault(accountId);\n        if(res > 0) {\n            return returnJson(objectMap, ErpInfo.OK.name, ErpInfo.OK.code);\n        } else {\n            return returnJson(objectMap, ErpInfo.ERROR.name, ErpInfo.ERROR.code);\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u5e26\u4f59\u989d\u7684\u62a5\u8868\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/listWithBalance\\\")\n    @ApiOperation(value = \\\"\u83b7\u53d6\u5e26\u4f59\u989d\u7684\u62a5\u8868\\\")\n    public BaseResponseInfo listWithBalance(@RequestParam(\\\"name\\\") String name,\n                                            @RequestParam(\\\"serialNo\\\") String serialNo,\n                                            @RequestParam(\\\"currentPage\\\") Integer currentPage,\n                                            @RequestParam(\\\"pageSize\\\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception {\n        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\\\"rows\\\", list);\n            map.put(\\\"total\\\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u7ed3\u7b97\u8d26\u6237\u7684\u7edf\u8ba1\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/getStatistics\\\")\n    @ApiOperation(value = \\\"\u7ed3\u7b97\u8d26\u6237\u7684\u7edf\u8ba1\\\")\n\n\n", "CodeBleu_score": 45.52758473382627}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t   public String findBySelect(HttpServletRequest request) throws Exception {\n        String res = null;\n        try {\n            List<Account> dataList = accountService.findBySelect();\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataList) {\n                for (Account account : dataList) {\n                    JSONObject item = new JSONObject();\n                    item.put(\\\"Id\\\", account.getId());\n                    //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                    item.put(\\\"AccountName\\\", account.getName());\n                    dataArray.add(item);\n                }\n            }\n            res = dataArray.toJSONString();\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u83b7\u53d6\u6240\u6709\u7ed3\u7b97\u8d26\u6237\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/getAccount\\\")\n    @ApiOperation(value = \\\"\u83b7\u53d6\u6240\u6709\u7ed3\u7b97\u8d26\u6237\\\")\n    public BaseResponseInfo getAccount(HttpServletRequest request) throws Exception {\n        BaseResponseInfo res = new BaseResponseInfo();\n        Map<String, Object> map = new HashMap<String, Object>();\n        try {\n            List<Account> accountList = accountService.getAccount();\n            map.put(\\\"accountList\\\", accountList);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u8d26\u6237\u6d41\u6c34\u4fe1\u606f\n     * @param currentPage\n     * @param pageSize\n     * @param accountId\n     * @param initialAmount\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/findAccountInOutList\\\")\n    @ApiOperation(value = \\\"\u8d26\u6237\u6d41\u6c34\u4fe1\u606f\\\")\n    public BaseResponseInfo findAccountInOutList(@RequestParam(\\\"currentPage\\\") Integer currentPage,\n                                                 @RequestParam(\\\"pageSize\\\") Integer pageSize,\n                                                 @RequestParam(\\\"accountId\\\") Long accountId,\n                                                 @RequestParam(\\\"initialAmount\\\") BigDecimal initialAmount,\n                                                 @RequestParam(value = \\\"number\\\",required = false) String number,\n                                                 @RequestParam(value = \\\"beginTime\\\",required = false) String beginTime,\n                                                 @RequestParam(value = \\\"endTime\\\",required = false) String endTime,\n                                                 HttpServletRequest request) throws Exception{\n        BaseResponseInfo res = new BaseResponseInfo();\n        Map<String, Object> map = new HashMap<String, Object>();\n        try {\n            Boolean forceFlag = systemConfigService.getForceApprovalFlag();\n            List<AccountVo4InOutList> dataList = accountService.findAccountInOutList(accountId, StringUtil.toNull(number),\n                    beginTime, endTime, forceFlag, (currentPage-1)*pageSize, pageSize);\n            int total = accountService.findAccountInOutListCount(accountId, StringUtil.toNull(number),\n                    beginTime, endTime, forceFlag);\n            map.put(\\\"total\\\", total);\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataList) {\n                for (AccountVo4InOutList aEx : dataList) {\n                    String type = aEx.getType().replace(\\\"\u5176\u5b83\\\", \\\"\\\");\n                    aEx.setType(type);\n                    String operTime = aEx.getOperTime();\n                    BigDecimal balance = accountService.getAccountSum(accountId, null, operTime, forceFlag)\n                            .add(accountService.getAccountSumByHead(accountId, null, operTime, forceFlag))\n                            .add(accountService.getAccountSumByDetail(accountId, null, operTime, forceFlag))\n                            .add(accountService.getManyAccountSum(accountId, null, operTime, forceFlag)).add(initialAmount);\n                    aEx.setBalance(balance);\n                    aEx.setAccountId(accountId);\n                    dataArray.add(aEx);\n                }\n            }\n            map.put(\\\"rows\\\", dataArray);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u66f4\u65b0\u9ed8\u8ba4\u8d26\u6237\n     * @param object\n     * @param request\n     * @return\n     * @throws Exception\n     */\n    @PostMapping(value = \\\"/updateIsDefault\\\")\n    @ApiOperation(value = \\\"\u66f4\u65b0\u9ed8\u8ba4\u8d26\u6237\\\")\n    public String updateIsDefault(@RequestBody JSONObject object,\n                                       HttpServletRequest request) throws Exception{\n        Long accountId = object.getLong(\\\"id\\\");\n        Map<String, Object> objectMap = new HashMap<>();\n        int res = accountService.updateIsDefault(accountId);\n        if(res > 0) {\n            return returnJson(objectMap, ErpInfo.OK.name, ErpInfo.OK.code);\n        } else {\n            return returnJson(objectMap, ErpInfo.ERROR.name, ErpInfo.ERROR.code);\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u5e26\u4f59\u989d\u7684\u62a5\u8868\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/listWithBalance\\\")\n    @ApiOperation(value = \\\"\u83b7\u53d6\u5e26\u4f59\u989d\u7684\u62a5\u8868\\\")\n    public BaseResponseInfo listWithBalance(@RequestParam(\\\"name\\\") String name,\n                                            @RequestParam(\\\"serialNo\\\") String serialNo,\n                                            @RequestParam(\\\"currentPage\\\") Integer currentPage,\n                                            @RequestParam(\\\"pageSize\\\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception {\n        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\\\"rows\\\", list);\n            map.put(\\\"total\\\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u7ed3\u7b97\u8d26\u6237\u7684\u7edf\u8ba1\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/getStatistics\\\")\n    @ApiOperation(value = \\\"\u7ed3\u7b97\u8d26\u6237\u7684\u7edf\u8ba1\\\")\n\n\n", "CodeBleu_score": 45.52758473382627}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t   public String findBySelect(HttpServletRequest request) throws Exception {\n        String res = null;\n        try {\n            List<Account> dataList = accountService.findBySelect();\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataList) {\n                for (Account account : dataList) {\n                    JSONObject item = new JSONObject();\n                    item.put(\\\"Id\\\", account.getId());\n                    //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                    item.put(\\\"AccountName\\\", account.getName());\n                    dataArray.add(item);\n                }\n            }\n            res = dataArray.toJSONString();\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u83b7\u53d6\u6240\u6709\u7ed3\u7b97\u8d26\u6237\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/getAccount\\\")\n    @ApiOperation(value = \\\"\u83b7\u53d6\u6240\u6709\u7ed3\u7b97\u8d26\u6237\\\")\n    public BaseResponseInfo getAccount(HttpServletRequest request) throws Exception {\n        BaseResponseInfo res = new BaseResponseInfo();\n        Map<String, Object> map = new HashMap<String, Object>();\n        try {\n            List<Account> accountList = accountService.getAccount();\n            map.put(\\\"accountList\\\", accountList);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u8d26\u6237\u6d41\u6c34\u4fe1\u606f\n     * @param currentPage\n     * @param pageSize\n     * @param accountId\n     * @param initialAmount\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/findAccountInOutList\\\")\n    @ApiOperation(value = \\\"\u8d26\u6237\u6d41\u6c34\u4fe1\u606f\\\")\n    public BaseResponseInfo findAccountInOutList(@RequestParam(\\\"currentPage\\\") Integer currentPage,\n                                                 @RequestParam(\\\"pageSize\\\") Integer pageSize,\n                                                 @RequestParam(\\\"accountId\\\") Long accountId,\n                                                 @RequestParam(\\\"initialAmount\\\") BigDecimal initialAmount,\n                                                 @RequestParam(value = \\\"number\\\",required = false) String number,\n                                                 @RequestParam(value = \\\"beginTime\\\",required = false) String beginTime,\n                                                 @RequestParam(value = \\\"endTime\\\",required = false) String endTime,\n                                                 HttpServletRequest request) throws Exception{\n        BaseResponseInfo res = new BaseResponseInfo();\n        Map<String, Object> map = new HashMap<String, Object>();\n        try {\n            Boolean forceFlag = systemConfigService.getForceApprovalFlag();\n            List<AccountVo4InOutList> dataList = accountService.findAccountInOutList(accountId, StringUtil.toNull(number),\n                    beginTime, endTime, forceFlag, (currentPage-1)*pageSize, pageSize);\n            int total = accountService.findAccountInOutListCount(accountId, StringUtil.toNull(number),\n                    beginTime, endTime, forceFlag);\n            map.put(\\\"total\\\", total);\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataList) {\n                for (AccountVo4InOutList aEx : dataList) {\n                    String type = aEx.getType().replace(\\\"\u5176\u5b83\\\", \\\"\\\");\n                    aEx.setType(type);\n                    String operTime = aEx.getOperTime();\n                    BigDecimal balance = accountService.getAccountSum(accountId, null, operTime, forceFlag)\n                            .add(accountService.getAccountSumByHead(accountId, null, operTime, forceFlag))\n                            .add(accountService.getAccountSumByDetail(accountId, null, operTime, forceFlag))\n                            .add(accountService.getManyAccountSum(accountId, null, operTime, forceFlag)).add(initialAmount);\n                    aEx.setBalance(balance);\n                    aEx.setAccountId(accountId);\n                    dataArray.add(aEx);\n                }\n            }\n            map.put(\\\"rows\\\", dataArray);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u66f4\u65b0\u9ed8\u8ba4\u8d26\u6237\n     * @param object\n     * @param request\n     * @return\n     * @throws Exception\n     */\n    @PostMapping(value = \\\"/updateIsDefault\\\")\n    @ApiOperation(value = \\\"\u66f4\u65b0\u9ed8\u8ba4\u8d26\u6237\\\")\n    public String updateIsDefault(@RequestBody JSONObject object,\n                                       HttpServletRequest request) throws Exception{\n        Long accountId = object.getLong(\\\"id\\\");\n        Map<String, Object> objectMap = new HashMap<>();\n        int res = accountService.updateIsDefault(accountId);\n        if(res > 0) {\n            return returnJson(objectMap, ErpInfo.OK.name, ErpInfo.OK.code);\n        } else {\n            return returnJson(objectMap, ErpInfo.ERROR.name, ErpInfo.ERROR.code);\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u5e26\u4f59\u989d\u7684\u62a5\u8868\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/listWithBalance\\\")\n    @ApiOperation(value = \\\"\u83b7\u53d6\u5e26\u4f59\u989d\u7684\u62a5\u8868\\\")\n    public BaseResponseInfo listWithBalance(@RequestParam(\\\"name\\\") String name,\n                                            @RequestParam(\\\"serialNo\\\") String serialNo,\n                                            @RequestParam(\\\"currentPage\\\") Integer currentPage,\n                                            @RequestParam(\\\"pageSize\\\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception {\n        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\\\"rows\\\", list);\n            map.put(\\\"total\\\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u7ed3\u7b97\u8d26\u6237\u7684\u7edf\u8ba1\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/getStatistics\\\")\n    @ApiOperation(value = \\\"\u7ed3\u7b97\u8d26\u6237\u7684\u7edf\u8ba1\\\")\n\n\n", "CodeBleu_score": 45.52758473382627}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            List<AccountHeadVo4ListEx> dataList = accountHeadService.getDetailByNumber(billNo);\n            if(dataList.size()>0) {\n                res.code = 200;\n                res.data = dataList.get(0);\n            } else {\n                res.code = 200;\n                res.data = null;\n            }\n        } catch(Exception e){\n            e.printStackTrace();\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 58.136652117682175}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            List<AccountHeadVo4ListEx> dataList = accountHeadService.getDetailByNumber(billNo);\n            if (dataList.size() > 0) {\n                res.code = 200;\n                res.data = dataList.get(0);\n            } else {\n                res.code = 200;\n                res.data = \"\u6b64\u5355\u636e\u4e0d\u5b58\u5728\";\n            }\n        } catch(Exception e){\n            e.printStackTrace();\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 57.64363338408918}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            List<AccountHeadVo4ListEx> dataList = accountHeadService.getDetailByNumber(billNo);\n            if(dataList.size()>0) {\n                res.code = 200;\n                res.data = dataList.get(0);\n            } else {\n                res.code = 200;\n                res.data = null;\n            }\n        } catch(Exception e){\n            e.printStackTrace();\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 58.136652117682175}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<Depot> depotList = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = depotList;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 84.27944586484108}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<Depot> depotList = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = depotList;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 89.1118986336996}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<Depot> depotList = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = depotList;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 89.1118986336996}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\terp.datasource.entities.Function;", "CodeBleu_score": 6.790630875537182}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\terp.datasource.entities.Function;", "CodeBleu_score": 6.790630875537182}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\terp.datasource.entities.Function;", "CodeBleu_score": 6.790630875537182}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try  {\n        PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n        res.code = 200;\n        res.data = platformConfig;\n        res.data = JSONObject.toJSON(platformConfig);\n    } catch(Exception e){\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 79.88441629571197}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            List<PlatformConfig> dataList = platformConfigService.getInfoByKey(platformKey);\n            if (dataList.size() > 0) {\n                res.code = 200;\n                res.data = dataList.get(0);\n            } else {\n                res.code = 200;\n                res.data = \"\";\n            }\n        } catch(Exception e){\n            e.printStackTrace();\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 62.9051488823926}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            List<PlatformConfig> dataList = platformConfigService.getInfoByKey(platformKey);\n            if(dataList.size() > 0) {\n                res.code = 200;\n                res.data = dataList;\n            } else {\n                res.code = 500;\n                res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n            }\n        } catch(Exception e){\n            e.printStackTrace();\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 67.66173436449064}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<SystemConfig> dataList = systemConfigService.getSystemConfig();\n        if(dataList.size()>0) {\n            res.code = 200;\n            res.data = dataList.get(0);\n        } else {\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n    } catch(Exception e){\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 70.71076418029702}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<SystemConfig> dataList = systemConfigService.getSystemConfig();\n        if(dataList.size()>0) {\n            res.code = 200;\n            res.data = dataList.get(0);\n        } else {\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n    } catch(Exception e){\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 70.71076418029702}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<SystemConfig> dataList = systemConfigService.getSystemConfig();\n        if (dataList.size() > 0) {\n            res.code = 200;\n            res.data = dataList.get(0);\n        } else {\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n    } catch(Exception e){\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 70.41913691419042}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n        MultipartFile file = multipartRequest.getFile(\"file\");\n        String filePath = file.getOriginalFilename();\n        String fileExt = filePath.substring(filePath.lastIndexOf(\".\") + 1).toLowerCase();\n        String path = request.getSession().getServletContext().getRealPath(\"file\");\n        String basePath = File.separator + \"file\" + File.separator;\n        String fileName = UUID.randomUUID() + \".\" + fileExt;\n        String date = new SimpleDateFormat(\"yyyyMMdd\").format(new Date());\n        String relativePath = basePath + date + File.separator + fileName;\n        String realPath = path + relativePath;\n        File saveFile = new File(realPath);\n        if (!saveFile.getParentFile().exists()) {\n            saveFile.getParentFile().mkdirs();\n        }\n        file.transferTo(saveFile);\n        res.code = 200;\n        res.data = relativePath;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 51.672198620521115}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n        MultipartFile file = multipartRequest.getFile(\"file\");\n        String path = multipartRequest.getParameter(\"path\");\n        if(StringUtil.isNotEmpty(path) && StringUtil.isNotEmpty(path.trim())) {\n            if(fileUploadType == 1) {\n                String filePath = FileUtils.upload(file, path);\n                if(StringUtil.isNotEmpty(filePath)) {\n                    res.code = 200;\n                    res.data = filePath;\n                } else {\n                    res.code = 500;\n                    res.data = \"\u4e0a\u4f20\u5931\u8d25\";\n                }\n            } else if(fileUploadType == 2) {\n                String filePath = FileUtils.uploadToAliOss(file, path);\n                if(StringUtil.isNotEmpty(filePath)) {\n                    res.code = 200;\n                    res.data = filePath;\n                } else {\n                    res.code = 500;\n                    res.data = \"\u4e0a\u4f20\u5931\u8d25\";\n                }\n            } else {\n                res.code = 500;\n                res.data = \"\u4e0a\u4f20\u5931\u8d25\";\n            }\n        } else {\n            res.code = 500;\n            res.data = \"\u4e0a\u4f20\u5931\u8d25\";\n        }\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 58.27371133194868}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n        MultipartFile file = multipartRequest.getFile(\"file\");\n        String path = multipartRequest.getParameter(\"path\");\n        String fileName = file.getOriginalFilename();\n        String filePath = fileUploadType == 1 ? filePath : path;\n        String fileUrl = fileUploadType == 1 ? AliOssUtil.upload(file, filePath) : FileUtils.upload(file, filePath);\n        res.code = 200;\n        res.data = fileUrl;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u4e0a\u4f20\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 51.34082204407999}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\tRequestSize) {\n                limit = maxFileSize;\n            } else {\n                limit = maxRequestSize;\n            }\n            res.code = 200;\n            res.data = limit;\n        }", "CodeBleu_score": 13.574590747231483}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\tRequestSize) {\n                limit = maxFileSize;\n            } else {\n                limit = maxRequestSize;\n            }\n            res.code = 200;\n            res.data = limit;\n        }", "CodeBleu_score": 13.574590747231483}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\tRequestSize) {\n                limit = maxFileSize;\n            } else {\n                limit = maxRequestSize;\n            }\n            res.code = 200;\n            res.data = limit;\n        }", "CodeBleu_score": 13.574590747231483}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t.erp.service.systemConfig.SystemConfigService;", "CodeBleu_score": 4.08848161464715}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t.erp.service.systemConfig.SystemConfigService;", "CodeBleu_score": 4.08848161464715}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t.erp.service.systemConfig.SystemConfigService;", "CodeBleu_score": 4.08848161464715}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\tList = accountIdList.split(\\\",\\\");\n                    String[] amList = accountMoneyList.split(\\\",\\\");\n                    for (int i = 0; i < aList.length; i++) {\n                        if (aList[i].equals(accountId.toString())) {\n                            if(amList.length>0) {\n                                accountSum = accountSum.add(new BigDecimal(amList[i]));\n                            }\n                        }\n                    }\n                }", "CodeBleu_score": 23.304261193894877}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\tList = accountIdList.split(\\\",\\\");\n                    String[] amList = accountMoneyList.split(\\\",\\\");\n                    for (int i = 0; i < aList.length; i++) {\n                        if (aList[i].equals(accountId.toString())) {\n                            if(amList.length>0) {\n                                accountSum = accountSum.add(new BigDecimal(amList[i]));\n                            }\n                        }\n                    }\n                }", "CodeBleu_score": 23.304261193894877}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\tList = accountIdList.split(\\\",\\\");\n                    String[] amList = accountMoneyList.split(\\\",\\\");\n                    for (int i = 0; i < aList.length; i++) {\n                        if (aList[i].equals(accountId.toString())) {\n                            if(amList.length>0) {\n                                accountSum = accountSum.add(new BigDecimal(amList[i]));\n                            }\n                        }\n                    }\n                }", "CodeBleu_score": 23.304261193894877}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\tDepotItem depotItem = getDepotItem(id);\n    int result =0;\n    try{\n        result=depotItemMapper.deleteByPrimaryKey(id);\n    }catch(Exception e){\n        JshException.readFail(logger, e);\n    }\n    return result;\n}", "CodeBleu_score": 74.84971628570875}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\tDepotItem depotItem = getDepotItem(id);\n    int result =0;\n    try{\n        result=depotItemMapper.deleteByPrimaryKey(id);\n    }catch(Exception e){\n        JshException.readFail(logger, e);\n    }\n    return result;\n}", "CodeBleu_score": 74.84971628570875}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\tDepotItem depotItem = getDepotItem(id);\n    //\u5220\u9664\u524d\u9a8c\u8bc1\n    if(depotItem.getDepotId()!=null) {\n        Depot depot = depotService.getDepot(depotItem.getDepotId());\n        if(depot==null) {\n            throw new BusinessRunTimeException(ExceptionConstants.DEPOT_NOT_EXISTS_CODE,\n                    String.format(ExceptionConstants.DEPOT_NOT_EXISTS_MSG));\n        }\n    }\n    if(depotItem.getMaterialId()!=null) {\n        Material material = materialService.getMaterial(depotItem.getMaterialId());\n        if(material==null) {\n            throw new BusinessRunTimeException(ExceptionConstants.MATERIAL_NOT_EXISTS_CODE,\n                    String.format(ExceptionConstants.MATERIAL_NOT_EXISTS_MSG));\n        }\n    }\n    if(depotItem.getUnitId()!=null) {\n        Unit unit = unitService.getUnit(depotItem.getUnitId());\n        if(unit==null) {\n            throw new BusinessRunTimeException(ExceptionConstants.UNIT_NOT_EXISTS_CODE,\n                    String.format(ExceptionConstants.UNIT_NOT_EXISTS_MSG));\n        }\n    }\n    if(depotItem.getDepotId()!=null && depotItem.getMaterialId()!=null) {\n        DepotItem item = getDepotItemByParam(depotItem.getDepotId(), depotItem.getMaterialId());\n        if(item==null) {\n            throw new BusinessRunTimeException(ExceptionConstants.DEPOT_ITEM_NOT_EXISTS_CODE,\n                    String.format(ExceptionConstants.DEPOT_ITEM_NOT_EXISTS_MSG));\n        }\n    }\n    //\u5220\u9664\n    int result =0;\n    try{\n        result=depotItemMapper.deleteByPrimaryKey(id);\n    }catch(Exception e){\n        JshException.readFail(logger, e);\n    }\n    return result;\n}", "CodeBleu_score": 59.46721857117958}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tboolean success = false;\n    try (CloseableHttpClient client = HttpClients.createDefault()) {\n        String url = protocol + \"://\" + host + \":\" + port + \"/\" + projectName + \"/nodes/\" + nodeType + \"/\" + nodeKey;\n        HttpGet httpGet = new HttpGet(url);\n        CloseableHttpResponse response = client.execute(httpGet);\n        HttpEntity entity = response.getEntity();\n        String result = EntityUtils.toString(entity);\n        Map<String, Object> map = new ObjectMapper().readValue(result, Map.class);\n        if (map.containsKey(nodeKey)) {\n            success = true;\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return success;\n}", "CodeBleu_score": 44.308364554235816}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tboolean result = false;\n\ttry (CloseableHttpClient client = HttpClients.createDefault()) {\n\t\tHttpGet request = new HttpGet(protocol + \"://\" + host + \":\" + port + \"/\" + projectName + \"/\" + nodeType + \"/\" + nodeKey);\n\t\ttry (CloseableHttpResponse response = client.execute(request)) {\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tString responseString = EntityUtils.toString(entity);\n\t\t\tObjectMapper mapper = new ObjectMapper();\n\t\t\tMap<String, Object> responseMap = mapper.readValue(responseString, Map.class);\n\t\t\tif (responseMap.containsKey(\"key\")) {\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n\treturn result;\n}", "CodeBleu_score": 42.29437350707434}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tboolean result = false;\n\tCloseableHttpClient client = HttpClients.createDefault();\n\tHttpGet request = new HttpGet(protocol + \"://\" + host + \":\" + port + \"/\" + projectName + \"/\" + nodeType + \"/\" + nodeKey);\n\ttry {\n\t\tCloseableHttpResponse response = client.execute(request);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString responseString = EntityUtils.toString(entity, Charset.forName(\"UTF-8\"));\n\t\tSystem.out.println(\"Response: \" + responseString);\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\tMap<String, Object> map = mapper.readValue(responseString, Map.class);\n\t\tresult = map.containsKey(nodeKey);\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttry {\n\t\t\tclient.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\treturn result;\n}", "CodeBleu_score": 48.94439720507201}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\tHttpHost host = new HttpHost(getHost(), getPort(), getProtocol());\n\t\tHttpGet getRequest = new HttpGet(\n\t\t\t\t\"/addEdge/\" +withProjectName(projectName) + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to);\n\t\thttpResponse = httpClient.execute(host, getRequest);\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tif (entity != null) {\n\t\t\tObjectMapper om = new ObjectMapper();\n\t\t\tString result = EntityUtils.toString(entity);\n\t\t\tMap map = om.readValue(result, Map.class);\n\t\t\tif (map.get(\"key\") != null) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n}", "CodeBleu_score": 97.0642809963868}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tCloseableHttpClient httpClient = HttpClients.createDefault();\n    CloseableHttpResponse httpResponse = null;\n    try {\n        HttpHost host = new HttpHost(getHost(), getPort(), getProtocol());\n        HttpGet getRequest = new HttpGet(\n                \"/addEdge/\" +withProjectName(projectName) + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to);\n        httpResponse = httpClient.execute(host, getRequest);\n        HttpEntity entity = httpResponse.getEntity();\n        if (entity != null) {\n            ObjectMapper om = new ObjectMapper();\n            String result = EntityUtils.toString(entity);\n            Map map = om.readValue(result, Map.class);\n            if (map.get(\"key\") != null) {\n                return true;\n            }\n        }\n        return false;\n    } catch (Exception e) {\n        e.printStackTrace();\n        return false;\n    } finally {\n        close(httpClient, httpResponse);\n    }\n}", "CodeBleu_score": 95.65429454595333}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\tHttpHost host = new HttpHost(getHost(), getPort(), getProtocol());\n\t\tHttpGet getRequest = new HttpGet(\n\t\t\t\t\"/addEdge/\" +withProjectName(projectName) + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to);\n\t\thttpResponse = httpClient.execute(host, getRequest);\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tif (entity != null) {\n\t\t\tObjectMapper om = new ObjectMapper();\n\t\t\tString result = EntityUtils.toString(entity);\n\t\t\tMap map = om.readValue(result, Map.class);\n\t\t\tif (map.get(\"key\") != null) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n}", "CodeBleu_score": 97.0642809963868}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\tif (event == null || event.getMessage() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(getTestLocation());\n    }\n    event.setEventTime(new Date());\n    String json;\n    try {\n        json = objectMapper.writeValueAsString(event);\n    } catch (JsonProcessingException e) {\n        return;\n    }\n    String topic = \"test\";\n    if (event.getTarget() != null) {\n        topic = event.getTarget();\n    }\n    ProducerRecord<String, String> record = new ProducerRecord<>(topic, json);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 54.308427823870886}, {"code": "public void sendEvent(Event event){\n\tif (event == null || event.getMessage() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(getTestLocation());\n    }\n    event.setEventTime(new Date());\n    try {\n        String eventJson = objectMapper.writeValueAsString(event);\n        ProducerRecord<String, String> record = new ProducerRecord<>(\"test\", eventJson);\n        producer.send(record);\n        producer.flush();\n    } catch (JsonProcessingException e) {\n        e.printStackTrace();\n    }\n}", "CodeBleu_score": 44.90634517109753}, {"code": "public void sendEvent(Event event){\n\tif (event == null || event.getMessage() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(getTestLocation());\n    }\n    event.setEventTime(new Date());\n    String eventJson = null;\n    try {\n        eventJson = objectMapper.writeValueAsString(event);\n    } catch (JsonProcessingException e) {\n        e.printStackTrace();\n    }\n    if (eventJson == null) {\n        return;\n    }\n    String topic = \"test\";\n    if (event.getTarget() != null) {\n        topic = event.getTarget();\n    }\n    ProducerRecord<String, String> record = new ProducerRecord<>(topic, eventJson);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 57.61559715933354}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t;\n", "CodeBleu_score": 4.0526637978730085}, {"code": "public String upload(String objName, byte[] content){\n\t;\n", "CodeBleu_score": 4.0526637978730085}, {"code": "public String upload(String objName, byte[] content){\n\t;\n", "CodeBleu_score": 4.0526637978730085}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tIpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo();\n    }\n    return worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 26.832589815256302}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tIpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo().setIpAddress(ipAddress).setMainInfo(\"unknown\").setSubInfo(\"unknown\");\n    }\n    return worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 34.31055732118434}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tIpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo(ipAddress, \"unknown\", \"unknown\");\n    }\n    return worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 28.619977153871922}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (this.lowLevelRestClient == null || this.highLevelRestClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (this.lowLevelRestClient == null || this.highLevelRestClient == null) {\n\t\t\t\tList<HttpHost> hosts = new ArrayList<>();\n\t\t\t\tfor (String clusterHost : this.clusterHostList.split(\",\")) {\n\t\t\t\t\thosts.add(new HttpHost(clusterHost, this.clusterHostPort));\n\t\t\t\t}\n\t\t\t\tthis.lowLevelRestClient = RestClient.builder(hosts.toArray(new HttpHost[0])).build();\n\t\t\t\tthis.highLevelRestClient = new RestHighLevelClient(lowLevelRestClient);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 48.95667216688358}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (lowLevelRestClient != null && highLevelRestClient != null) {\n\t\treturn;\n\t}\n\n\tsynchronized (this) {\n\t\tif (lowLevelRestClient != null && highLevelRestClient != null) {\n\t\t\treturn;\n\t\t}\n\n\t\tList<HttpHost> hostList = new ArrayList<HttpHost>();\n\t\tfor (String host : clusterHostList.split(\",\")) {\n\t\t\thostList.add(new HttpHost(host, clusterHostPort));\n\t\t}\n\n\t\tlowLevelRestClient = RestClient.builder(hostList.toArray(new HttpHost[0])).build();\n\t\thighLevelRestClient = new RestHighLevelClient(lowLevelRestClient);\n\t}\n}", "CodeBleu_score": 75.01004847862762}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (lowLevelRestClient == null || highLevelRestClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (lowLevelRestClient == null || highLevelRestClient == null) {\n\t\t\t\tList<HttpHost> hostList = new ArrayList<HttpHost>();\n\t\t\t\tfor (String clusterHost : clusterHostList.split(\",\")) {\n\t\t\t\t\thostList.add(new HttpHost(clusterHost, clusterHostPort));\n\t\t\t\t}\n\t\t\t\tlowLevelRestClient = RestClient.builder(hostList.toArray(new HttpHost[0])).build();\n\t\t\t\thighLevelRestClient = new RestHighLevelClient(lowLevelRestClient);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 57.942493548526976}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tList<HttpHost> hosts = new ArrayList<>();\n    String[] hostList = clusterHostList.split(\",\");\n    for (String host : hostList) {\n        String hostname = host.trim();\n        if (hostname.length() > 0) {\n            int port = clusterPort;\n            if (hostname.indexOf(':') > 0) {\n                String[] hostport = hostname.split(\":\");\n                hostname = hostport[0];\n                port = Integer.parseInt(hostport[1]);\n            }\n            hosts.add(new HttpHost(hostname, port));\n        }\n    }\n    return hosts;\n}", "CodeBleu_score": 43.39133829565485}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tString[] hosts = clusterHostList.split(\",\");\n\tList<HttpHost> hostList = new ArrayList<HttpHost>();\n\tfor (String host : hosts) {\n\t\thostList.add(new HttpHost(host, clusterPort));\n\t}\n\treturn hostList;\n}", "CodeBleu_score": 38.93583392120107}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tfor (String host : clusterHostList.split(\",\")) {\n\t\tif (host.contains(\":\")) {\n\t\t\thosts.add(new HttpHost(host.split(\":\")[0], Integer.parseInt(host.split(\":\")[1])));\n\t\t} else {\n\t\t\thosts.add(new HttpHost(host, clusterPort));\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 39.851844966538934}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\tMap<String, Object> task = taskQueue.poll(30, TimeUnit.SECONDS);\n\tif (task == null) {\n\t\treturn;\n\t}\n\tString taskType = (String) task.get(PARAM_TASK_TYPE);\n\tif (taskType == null) {\n\t\treturn;\n\t}\n\tif (taskType.equals(TASK_PLAIN_TEXT_MESSAGE)) {\n\t\tString dest = (String) task.get(PARAM_RECIEVER_NUMBER);\n\t\tString fromWho = (String) task.get(PARAM_FROM_WHO);\n\t\tString template = (String) task.get(PARAM_MESSAGE_TEMPLATE);\n\t\tMap<String, String> parameters = (Map<String, String>) task.get(PARAM_MESSAGE_DATA);\n\t\ttry {\n\t\t\tsendSMS(dest, fromWho, template, parameters);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "CodeBleu_score": 55.582969770812504}, {"code": "protected void pollingWork() throws InterruptedException{\n\tMap<String, Object> task = taskQueue.poll(30, TimeUnit.SECONDS);\n\tif (task == null) {\n\t\treturn;\n\t}\n\tString taskType = (String) task.get(PARAM_TASK_TYPE);\n\tif (TASK_PLAIN_TEXT_MESSAGE.equals(taskType)) {\n\t\tString dest = (String) task.get(PARAM_RECIEVER_NUMBER);\n\t\tString fromWho = (String) task.get(PARAM_FROM_WHO);\n\t\tString template = (String) task.get(PARAM_MESSAGE_TEMPLATE);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tMap<String, String> parameters = (Map<String, String>) task.get(PARAM_MESSAGE_DATA);\n\t\ttry {\n\t\t\tsendMessage(dest, fromWho, template, parameters);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "CodeBleu_score": 56.978959938322134}, {"code": "protected void pollingWork() throws InterruptedException{\n\tMap<String, Object> task = taskQueue.poll(30, TimeUnit.SECONDS);\n\tif (task != null) {\n\t\tString taskType = (String) task.get(PARAM_TASK_TYPE);\n\t\tif (TASK_PLAIN_TEXT_MESSAGE.equals(taskType)) {\n\t\t\tString toNumber = (String) task.get(PARAM_RECIEVER_NUMBER);\n\t\t\tString fromWho = (String) task.get(PARAM_FROM_WHO);\n\t\t\tString template = (String) task.get(PARAM_MESSAGE_TEMPLATE);\n\t\t\tMap<String, String> parameters = (Map<String, String>) task.get(PARAM_MESSAGE_DATA);\n\t\t\ttry {\n\t\t\t\tsendPlainTextMessage(toNumber, fromWho, template, parameters);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 54.19300994735284}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tAM_TASK_TYPE=\\\"task_type\\\";\n\tprotected static final String PARAM_RECIEVER_NUMBER=\\\"to_number\\\";\n\tprotected static final String PARAM_FROM_WHO=\\\"from_who\\\";\n\n\tprotected static final String PARAM_MESSAGE_TEMPLATE=\\\"template\\\";\n\tprotected static final String PARAM_MESSAGE_DATA=\\\"params\\\";\n\tprotected static final int QUEUE_SIZE = 100;\n\n\tprotected SMTPService smtpService;\n\n\n\n\tpublic SMTPService getSmtpService() {\n\t\treturn smtpService;\n\t}\n\n\tpublic void setSmtpService(SMTPService smtpService) {\n\t\tthis.smtpService = smtpService;\n\t}\n\n\t@Override\n\tpublic void sendMessage(String dest, String fromWho, String template, Map<String, String> parameters)\n\t\t\tthrows Exception {\n\t\tif (!StringUtils.isBlank(template) && (parameters==null || parameters.isEmpty())){\n\t\t\t// \u5982\u679c\u4f60\u8c03\u9519\u4e86\u63a5\u53e3\uff0c\u628a\u6d88\u606f\u653e\u5230template\u53c2\u6570\u4e0a\u4e86\uff0c\u4e5f\u5c31\u8fd9\u4e2a\u77ed\u4fe1\u670d\u52a1\u63a5\u53e3\uff0c\u3000\u53ef\u4ee5\u517c\u5bb9\u5904\u7406\u4e00\u4e0b\n\t\t\tparameters = new HashMap<String, String>();\n\t\t\tparameters.put(\\\"message\\\", template);\n\t\t}\n\n\t\tMap<String, Object> task = new HashMap<String, Object>();\n\t\ttask.put(PARAM_TASK_TYPE, TASK_PLAIN_TEXT_MESSAGE);\n\t\ttask.put(PARAM_RECIEVER_NUMBER, dest);\n\t\ttask.put(PARAM_FROM_WHO, fromWho);\n\t\ttask.put(PARAM_MESSAGE_TEMPLATE, template);\n\t\ttask.put(PARAM_MESSAGE_DATA, parameters);\n\n\t\taddTask(task);\n\t}\n\n\tprivate void addTask(Map<String, Object> task) {\n\t\tensureTaskThread();\n\t\ttry {\n\t\t\ttaskQueue.put(task);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tprivate void ensureTaskThread() {\n\t\tif (taskQueue != null){\n\t\t\treturn;\n\t\t}\n\t\tsynchronized (SczhtMessageService.class){\n\t\t\tif (taskQueue != null){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttaskQueueThread = new Thread(){\n\t\t\t\tpublic void run(){\n\t\t\t\t\twhile(running.get()){\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tpollingWork();\n\t\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\ttaskQueue = new LinkedBlockingQueue<Map<String, Object>>(QUEUE_SIZE);\n\t\t\trunning.set(true);\n\t\t\ttaskQueueThread.start();\n\t\t}\n\t}\n\n\tprotected void pollingWork() throws InterruptedException{\n\t\tMap<String, Object> task = taskQueue.poll(30, TimeUnit.SECONDS);\n\t\tif (task == null){\n\t\t\treturn;\n\t\t}\n\t\tString taskType = (String) task.get(PARAM_TASK_TYPE);\n\t\tif (taskType.equals(TASK_PLAIN_TEXT_MESSAGE)){\n\t\t\ttry {\n\t\t\t\tString toNumber = (String) task.get(PARAM_RECIEVER_NUMBER);\n\t\t\t\tObject param = task.get(PARAM_MESSAGE_DATA);\n\t\t\t\tif (!(param instanceof Map)){\n\t\t\t\t\tSystem.out.println(\\\"Send message to \\\" + toNumber + \\\" failed. Input data is \\\" + param);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tString message = (String) ((Map<String, Object>) param).get(\\\"message\\\");\n\t\t\t\tSystem.out.println(\\\"Send message to \\\" + toNumber+\\\": \\\" + message);\n\t\t\t\tsendPlainTextMessage(toNumber,message);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate void sendPlainTextMessage(String toNumber, String message) throws Exception {\n\t\t// http://api.sczht.cc:8888/sms.aspx\n\t\tString sentMsg = \\\"\u3010\\\"+getSmsSignName()+\\\"\u3011 \\\"+message+getTimeStamp();\n\t\tURI uri = new URIBuilder().setScheme(\\\"http\\\").setHost(\\\"api.sczht.cc\\\").setPort(8888)\n\t\t\t\t.setPath(\\\"sms.aspx\\\").addParameter(\\\"action\\\", \\\"send\\\")\n\t\t\t\t.addParameter(\\\"userid\\\", getUserId())\n\t\t\t\t.addParameter(\\\"account\\\", getAccount())\n\t\t\t\t.addParameter(\\\"password\\\", getPasswork())\n\t\t\t\t.addParameter(\\\"mobile\\\", toNumber)\n\t\t\t\t.addParameter(\\\"content\\\",sentMsg )\n\t\t\t\t.build();\n\t\tString content = httpGetRequestXml(uri);\n\t\t//Map<String, Object> responseObj = XMLDecodeUtils.decodeXmlString(content);\n\t\tif (content!=null && isSuccessResponse(content)){\n\t\t\tSystem.out.println(\\\"SMS to \\\" + toNumber+\\\" success:\\\" + sentMsg);\n\t\t}else{\n\t\t\tSystem.out.println(\\\"SMS to \\\" + toNumber+\\\" failed.\\t response is \\\" + content);\n\t\t\tif (this.getSmtpService() != null) {\n\t\t\t\tString messageContent = String.format(\\\"\u5411%s\u53d1\u9001\u6d88\u606f%s\u5931\u8d25.\\r\n%s\\\", toNumber, sentMsg, content);\n\t\t\t\tthis.getSmtpService().send(\\\"archerliyaqing@163.com\\\", \\\"\u77ed\u4fe1\u670d\u52a1\u5931\u8d25\\\", messageContent);\n\t\t\t\tthis.getSmtpService().send(\\\"philip_chang@163.com\\\", \\\"\u77ed\u4fe1\u670d\u52a1\u5931\u8d25\\\", messageContent);\n\t\t\t\tthis.getSmtpService().send(\\\"clariones@163.com\\\", \\\"\u77ed\u4fe1\u670d\u52a1\u5931\u8d25\\\", messageContent);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static final Pattern ptnResponseOK = Pattern.compile(\\\"<returnstatus>\\\\s*success\\\\s*</returnstatus>\\\", Pattern.CASE_INSENSITIVE);\n\tprivate boolean isSuccessResponse(String content) {\n\t\tMatcher m = ptnResponseOK.matcher(content);\n\t\treturn m.find();\n\t}\n\n\tprivate String getSmsSignName() {\n\t\treturn System.getenv(\\\"SMS_SIGN_NAME\\\");\n\t}\n\n\tprotected static final SimpleDateFormat fmtSmsTimpStamp = new SimpleDateFormat(\\\"HH:mm:ss\\\");\n\tprotected String getTimeStamp() {\n\t\t// TODO Auto-generated method stub\n\t\treturn \\\" (\\\"+fmtSmsTimpStamp.format(new Date())+\\\")\\\";\n\t}\n\n\tprotected static CloseableHttpClient getHttpClient() {\n\t\tif (httpclient != null) {\n\t\t\treturn httpclient;\n\t\t}\n\t\thttpclient = HttpClients.createDefault();\n\t\treturn httpclient;\n\t}\n\n\n\n/**\n * This function performs an HTTP GET request to a specified URI and returns the response content as a string. It uses a CloseableHttpClient to execute the request, retrieves the response entity, converts it to a UTF-8 encoded string, logs the content, and returns it.\n */\nprivate static String httpGetRequestXml(URI uri) throws Exception {\n\tCloseableHttpClient httpclient = getHttpClient();\n\ttry {\n\t\tHttpGet httpget = new HttpGet(uri);\n\t\tSystem.out.println(\"Executing request \" + httpget.getRequestLine());\n\t\tCloseableHttpResponse response = httpclient.execute(httpget);\n\t\ttry {\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tif (entity != null) {\n\t\t\t\tSystem.out.println(\"----------------------------------------\");\n\t\t\t\tSystem.out.println(response.getStatusLine());\n\t\t\t\tif (entity.getContentType().getValue().contains(\"text/html\")) {\n\t\t\t\t\t// return EntityUtils.toString(entity);\n\t\t\t\t\treturn EntityUtils.toString(entity, \"GBK\");\n\t\t\t\t} else {\n\t\t\t\t\treturn EntityUtils.toString(entity);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} finally {\n\t\t\tresponse.close();\n\t\t}\n\t} finally {\n\t\thttpclient.close();\n\t}\n}\n\nprivate static final Pattern ptnResponseOK = Pattern.compile(\"<returnstatus>\\\\s*success\\\\s*</returnstatus>\", Pattern.CASE_INSENSITIVE);\nprivate boolean isSuccessResponse(String content) {\n\tMatcher m = ptnResponseOK.matcher(content);\n\treturn m.find();\n}\n\nprivate String getSmsSignName() {\n\treturn System.getenv(\"SMS_SIGN_NAME\");\n}\n\nprotected static final SimpleDateFormat fmtSmsTimpStamp = new SimpleDateFormat(\"HH:mm:ss\");\nprotected String getTimeStamp() {\n\t// TODO Auto-generated method stub\n\treturn \" (\"+fmtSmsTimpStamp.format(new Date())+\")\";\n}\n\nprotected static CloseableHttpClient getHttpClient() {\n\tif (httpclient != null) {\n\t\treturn httpclient;\n\t}\n\thttpclient = HttpClients.createDefault();\n\treturn httpclient;\n}\n\n}", "CodeBleu_score": 37.10805066461293}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tAM_TASK_TYPE=\\\"task_type\\\";\n\tprotected static final String PARAM_RECIEVER_NUMBER=\\\"to_number\\\";\n\tprotected static final String PARAM_FROM_WHO=\\\"from_who\\\";\n\n\tprotected static final String PARAM_MESSAGE_TEMPLATE=\\\"template\\\";\n\tprotected static final String PARAM_MESSAGE_DATA=\\\"params\\\";\n\tprotected static final int QUEUE_SIZE = 100;\n\n\tprotected SMTPService smtpService;\n\n\n\n\tpublic SMTPService getSmtpService() {\n\t\treturn smtpService;\n\t}\n\n\tpublic void setSmtpService(SMTPService smtpService) {\n\t\tthis.smtpService = smtpService;\n\t}\n\n\t@Override\n\tpublic void sendMessage(String dest, String fromWho, String template, Map<String, String> parameters)\n\t\t\tthrows Exception {\n\t\tif (!StringUtils.isBlank(template) && (parameters==null || parameters.isEmpty())){\n\t\t\t// \u5982\u679c\u4f60\u8c03\u9519\u4e86\u63a5\u53e3\uff0c\u628a\u6d88\u606f\u653e\u5230template\u53c2\u6570\u4e0a\u4e86\uff0c\u4e5f\u5c31\u8fd9\u4e2a\u77ed\u4fe1\u670d\u52a1\u63a5\u53e3\uff0c\u3000\u53ef\u4ee5\u517c\u5bb9\u5904\u7406\u4e00\u4e0b\n\t\t\tparameters = new HashMap<String, String>();\n\t\t\tparameters.put(\\\"message\\\", template);\n\t\t}\n\n\t\tMap<String, Object> task = new HashMap<String, Object>();\n\t\ttask.put(PARAM_TASK_TYPE, TASK_PLAIN_TEXT_MESSAGE);\n\t\ttask.put(PARAM_RECIEVER_NUMBER, dest);\n\t\ttask.put(PARAM_FROM_WHO, fromWho);\n\t\ttask.put(PARAM_MESSAGE_TEMPLATE, template);\n\t\ttask.put(PARAM_MESSAGE_DATA, parameters);\n\n\t\taddTask(task);\n\t}\n\n\tprivate void addTask(Map<String, Object> task) {\n\t\tensureTaskThread();\n\t\ttry {\n\t\t\ttaskQueue.put(task);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tprivate void ensureTaskThread() {\n\t\tif (taskQueue != null){\n\t\t\treturn;\n\t\t}\n\t\tsynchronized (SczhtMessageService.class){\n\t\t\tif (taskQueue != null){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttaskQueueThread = new Thread(){\n\t\t\t\tpublic void run(){\n\t\t\t\t\twhile(running.get()){\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tpollingWork();\n\t\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\ttaskQueue = new LinkedBlockingQueue<Map<String, Object>>(QUEUE_SIZE);\n\t\t\trunning.set(true);\n\t\t\ttaskQueueThread.start();\n\t\t}\n\t}\n\n\tprotected void pollingWork() throws InterruptedException{\n\t\tMap<String, Object> task = taskQueue.poll(30, TimeUnit.SECONDS);\n\t\tif (task == null){\n\t\t\treturn;\n\t\t}\n\t\tString taskType = (String) task.get(PARAM_TASK_TYPE);\n\t\tif (taskType.equals(TASK_PLAIN_TEXT_MESSAGE)){\n\t\t\ttry {\n\t\t\t\tString toNumber = (String) task.get(PARAM_RECIEVER_NUMBER);\n\t\t\t\tObject param = task.get(PARAM_MESSAGE_DATA);\n\t\t\t\tif (!(param instanceof Map)){\n\t\t\t\t\tSystem.out.println(\\\"Send message to \\\" + toNumber + \\\" failed. Input data is \\\" + param);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tString message = (String) ((Map<String, Object>) param).get(\\\"message\\\");\n\t\t\t\tSystem.out.println(\\\"Send message to \\\" + toNumber+\\\": \\\" + message);\n\t\t\t\tsendPlainTextMessage(toNumber,message);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate void sendPlainTextMessage(String toNumber, String message) throws Exception {\n\t\t// http://api.sczht.cc:8888/sms.aspx\n\t\tString sentMsg = \\\"\u3010\\\"+getSmsSignName()+\\\"\u3011 \\\"+message+getTimeStamp();\n\t\tURI uri = new URIBuilder().setScheme(\\\"http\\\").setHost(\\\"api.sczht.cc\\\").setPort(8888)\n\t\t\t\t.setPath(\\\"sms.aspx\\\").addParameter(\\\"action\\\", \\\"send\\\")\n\t\t\t\t.addParameter(\\\"userid\\\", getUserId())\n\t\t\t\t.addParameter(\\\"account\\\", getAccount())\n\t\t\t\t.addParameter(\\\"password\\\", getPasswork())\n\t\t\t\t.addParameter(\\\"mobile\\\", toNumber)\n\t\t\t\t.addParameter(\\\"content\\\",sentMsg )\n\t\t\t\t.build();\n\t\tString content = httpGetRequestXml(uri);\n\t\t//Map<String, Object> responseObj = XMLDecodeUtils.decodeXmlString(content);\n\t\tif (content!=null && isSuccessResponse(content)){\n\t\t\tSystem.out.println(\\\"SMS to \\\" + toNumber+\\\" success:\\\" + sentMsg);\n\t\t}else{\n\t\t\tSystem.out.println(\\\"SMS to \\\" + toNumber+\\\" failed.\\t response is \\\" + content);\n\t\t\tif (this.getSmtpService() != null) {\n\t\t\t\tString messageContent = String.format(\\\"\u5411%s\u53d1\u9001\u6d88\u606f%s\u5931\u8d25.\\r", "CodeBleu_score": 29.959088168672952}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tAM_TASK_TYPE=\\\"task_type\\\";\n\tprotected static final String PARAM_RECIEVER_NUMBER=\\\"to_number\\\";\n\tprotected static final String PARAM_FROM_WHO=\\\"from_who\\\";\n\n\tprotected static final String PARAM_MESSAGE_TEMPLATE=\\\"template\\\";\n\tprotected static final String PARAM_MESSAGE_DATA=\\\"params\\\";\n\tprotected static final int QUEUE_SIZE = 100;\n\n\tprotected SMTPService smtpService;\n\n\n\n\tpublic SMTPService getSmtpService() {\n\t\treturn smtpService;\n\t}\n\n\tpublic void setSmtpService(SMTPService smtpService) {\n\t\tthis.smtpService = smtpService;\n\t}\n\n\t@Override\n\tpublic void sendMessage(String dest, String fromWho, String template, Map<String, String> parameters)\n\t\t\tthrows Exception {\n\t\tif (!StringUtils.isBlank(template) && (parameters==null || parameters.isEmpty())){\n\t\t\t// \u5982\u679c\u4f60\u8c03\u9519\u4e86\u63a5\u53e3\uff0c\u628a\u6d88\u606f\u653e\u5230template\u53c2\u6570\u4e0a\u4e86\uff0c\u4e5f\u5c31\u8fd9\u4e2a\u77ed\u4fe1\u670d\u52a1\u63a5\u53e3\uff0c\u3000\u53ef\u4ee5\u517c\u5bb9\u5904\u7406\u4e00\u4e0b\n\t\t\tparameters = new HashMap<String, String>();\n\t\t\tparameters.put(\\\"message\\\", template);\n\t\t}\n\n\t\tMap<String, Object> task = new HashMap<String, Object>();\n\t\ttask.put(PARAM_TASK_TYPE, TASK_PLAIN_TEXT_MESSAGE);\n\t\ttask.put(PARAM_RECIEVER_NUMBER, dest);\n\t\ttask.put(PARAM_FROM_WHO, fromWho);\n\t\ttask.put(PARAM_MESSAGE_TEMPLATE, template);\n\t\ttask.put(PARAM_MESSAGE_DATA, parameters);\n\n\t\taddTask(task);\n\t}\n\n\tprivate void addTask(Map<String, Object> task) {\n\t\tensureTaskThread();\n\t\ttry {\n\t\t\ttaskQueue.put(task);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tprivate void ensureTaskThread() {\n\t\tif (taskQueue != null){\n\t\t\treturn;\n\t\t}\n\t\tsynchronized (SczhtMessageService.class){\n\t\t\tif (taskQueue != null){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttaskQueueThread = new Thread(){\n\t\t\t\tpublic void run(){\n\t\t\t\t\twhile(running.get()){\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tpollingWork();\n\t\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\ttaskQueue = new LinkedBlockingQueue<Map<String, Object>>(QUEUE_SIZE);\n\t\t\trunning.set(true);\n\t\t\ttaskQueueThread.start();\n\t\t}\n\t}\n\n\tprotected void pollingWork() throws InterruptedException{\n\t\tMap<String, Object> task = taskQueue.poll(30, TimeUnit.SECONDS);\n\t\tif (task == null){\n\t\t\treturn;\n\t\t}\n\t\tString taskType = (String) task.get(PARAM_TASK_TYPE);\n\t\tif (taskType.equals(TASK_PLAIN_TEXT_MESSAGE)){\n\t\t\ttry {\n\t\t\t\tString toNumber = (String) task.get(PARAM_RECIEVER_NUMBER);\n\t\t\t\tObject param = task.get(PARAM_MESSAGE_DATA);\n\t\t\t\tif (!(param instanceof Map)){\n\t\t\t\t\tSystem.out.println(\\\"Send message to \\\" + toNumber + \\\" failed. Input data is \\\" + param);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tString message = (String) ((Map<String, Object>) param).get(\\\"message\\\");\n\t\t\t\tSystem.out.println(\\\"Send message to \\\" + toNumber+\\\": \\\" + message);\n\t\t\t\tsendPlainTextMessage(toNumber,message);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate void sendPlainTextMessage(String toNumber, String message) throws Exception {\n\t\t// http://api.sczht.cc:8888/sms.aspx\n\t\tString sentMsg = \\\"\u3010\\\"+getSmsSignName()+\\\"\u3011 \\\"+message+getTimeStamp();\n\t\tURI uri = new URIBuilder().setScheme(\\\"http\\\").setHost(\\\"api.sczht.cc\\\").setPort(8888)\n\t\t\t\t.setPath(\\\"sms.aspx\\\").addParameter(\\\"action\\\", \\\"send\\\")\n\t\t\t\t.addParameter(\\\"userid\\\", getUserId())\n\t\t\t\t.addParameter(\\\"account\\\", getAccount())\n\t\t\t\t.addParameter(\\\"password\\\", getPasswork())\n\t\t\t\t.addParameter(\\\"mobile\\\", toNumber)\n\t\t\t\t.addParameter(\\\"content\\\",sentMsg )\n\t\t\t\t.build();\n\t\tString content = httpGetRequestXml(uri);\n\t\t//Map<String, Object> responseObj = XMLDecodeUtils.decodeXmlString(content);\n\t\tif (content!=null && isSuccessResponse(content)){\n\t\t\tSystem.out.println(\\\"SMS to \\\" + toNumber+\\\" success:\\\" + sentMsg);\n\t\t}else{\n\t\t\tSystem.out.println(\\\"SMS to \\\" + toNumber+\\\" failed.\\t response is \\\" + content);\n\t\t\tif (this.getSmtpService() != null) {\n\t\t\t\tString messageContent = String.format(\\\"\u5411%s\u53d1\u9001\u6d88\u606f%s\u5931\u8d25.\\r", "CodeBleu_score": 29.959088168672952}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document document = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n    Map<String, Object> map = new HashMap<String, Object>();\n    NodeList childNodes = document.getChildNodes();\n    for (int i = 0; i < childNodes.getLength(); i++) {\n        Node node = childNodes.item(i);\n        map.put(node.getNodeName(), decodeNode(node, doTrim));\n    }\n    return map;\n}", "CodeBleu_score": 59.51540713557939}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument document = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n\tMap<String, Object> map = new HashMap<>();\n\tNodeList root = document.getChildNodes();\n\tif (root.getLength() == 1) {\n\t\tNode node = root.item(0);\n\t\tif (node.getNodeType() == Node.ELEMENT_NODE) {\n\t\t\tmap = decodeElement(node, doTrim);\n\t\t}\n\t}\n\treturn map;\n}", "CodeBleu_score": 56.97317501571035}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document document = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n    Map<String, Object> map = new HashMap<>();\n    NodeList root = document.getDocumentElement().getChildNodes();\n    for (int i = 0; i < root.getLength(); i++) {\n        Node node = root.item(i);\n        map.put(node.getNodeName(), decodeNode(node, doTrim));\n    }\n    return map;\n}", "CodeBleu_score": 58.04789069314089}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tfinal OrderId orderId = OrderId.ofRepoId(orderRecord.getC_Order_ID());\n\n\tfinal boolean isAutoShipAndInvoice = sysConfigBL.getBooleanValue(SYS_Config_AUTO_SHIP_AND_INVOICE, false);\n\n\tif (isAutoShipAndInvoice) {\n\t\tfinal boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\t\tif (isEligibleForAutoProcessing) {\n\t\t\tLoggables.withLogger(logger, Level.DEBUG).addLog(\"{}: Enqueuing for auto-processing\", orderRecord);\n\t\t\tcompleteShipAndInvoiceEnqueuer.enqueueCompleteShipAndInvoice(orderId);\n\t\t} else {\n\t\t\tLoggables.withLogger(logger, Level.DEBUG).addLog(\"{}: Not eligible for auto-processing\", orderRecord);\n\t\t}\n\t} else {\n\t\tLoggables.withLogger(logger, Level.DEBUG).addLog(\"{}: Auto-processing is not enabled\", orderRecord);\n\t}\n\n\tfinal boolean isPostponeScheduling = sysConfigBL.getBooleanValue(SYSCONFIG_PostponeScheduling, false);\n\tif (isPostponeScheduling) {\n\t\tLoggables.withLogger(logger, Level.DEBUG).addLog(\"{}: Scheduling is postponed\", orderRecord);\n\t} else {\n\t\tLoggables.withLogger(logger, Level.DEBUG).addLog(\"{}: Scheduling is not postponed\", orderRecord);\n\t\tasyncBatchObserver.onComplete(AsyncBatchId.METASFRESH, CreateMissingShipmentSchedulesWorkpackageProcessor.class, orderId);\n\t}\n}", "CodeBleu_score": 56.506153029103515}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tfinal boolean autoShipAndInvoice = sysConfigBL.getBooleanValue(SYS_Config_AUTO_SHIP_AND_INVOICE, false);\n\n\tif (autoShipAndInvoice) {\n\t\tfinal OrderId orderId = OrderId.ofRepoId(orderRecord.getC_Order_ID());\n\t\tfinal AsyncBatchId asyncBatchId = completeShipAndInvoiceEnqueuer.enqueue(orderId);\n\t\tLoggables.withLogger(logger, Level.INFO).addLog(\"C_Order_ID={}; C_Async_Batch_ID={};\", orderId, asyncBatchId);\n\t} else {\n\t\tfinal boolean postponeScheduling = DeliveryRule.FORCE.equals(DeliveryRule.ofCode(orderRecord.getDeliveryRule()));\n\n\t\tif (postponeScheduling) {\n\t\t\tLoggables.withLogger(logger, Level.INFO).addLog(\"C_Order_ID={}; Postponing scheduling.\", orderRecord.getC_Order_ID());\n\t\t} else {\n\t\t\tfinal AsyncBatchId asyncBatchId = asyncBatchObserver.getAsyncBatchId();\n\t\t\tLoggables.withLogger(logger, Level.INFO).addLog(\"C_Order_ID={}; C_Async_Batch_ID={};\", orderRecord.getC_Order_ID(), asyncBatchId);\n\t\t\tif (asyncBatchId != null) {\n\t\t\t\tfinal CreateMissingShipmentSchedulesWorkpackageProcessor processor = CreateMissingShipmentSchedulesWorkpackageProcessor.newInstance(asyncBatchId);\n\t\t\t\tprocessor.scheduleWorkPackage(orderRecord);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 49.108256637050694}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tfinal OrderId orderId = OrderId.ofRepoId(orderRecord.getC_Order_ID());\n\n\tfinal boolean isAutoShipAndInvoice = sysConfigBL.getBooleanValue(SYS_Config_AUTO_SHIP_AND_INVOICE, true);\n\tif (isAutoShipAndInvoice) {\n\t\tfinal boolean isPostponeMissingSchedules = sysConfigBL.getBooleanValue(SYS_Config_AUTO_SHIP_AND_INVOICE_POSTPONE_MISSING_SCHEDULES, false);\n\t\tif (isPostponeMissingSchedules) {\n\t\t\tLoggables.addLog(\"Order {} is eligible for auto-processing. It will be enqueued for automatic shipping and invoicing.\", orderId);\n\t\t\tcompleteShipAndInvoiceEnqueuer.enqueueOrderForComplete(orderRecord);\n\t\t} else {\n\t\t\tLoggables.addLog(\"Order {} is eligible for auto-processing. It will be enqueued for automatic shipping and invoicing. The creation of missing shipment schedules will be postponed.\", orderId);\n\t\t\tcompleteShipAndInvoiceEnqueuer.enqueueOrderForComplete(orderRecord, true);\n\t\t}\n\t} else {\n\t\tLoggables.addLog(\"Order {} is not eligible for auto-processing. It will be enqueued for the creation of missing shipment schedules.\", orderId);\n\t\tfinal AsyncBatchId asyncBatchId = asyncBatchObserver.getAsyncBatchId();\n\t\tCreateMissingShipmentSchedulesWorkpackageProcessor.enqueueWorkPackage(asyncBatchId, orderId);\n\t}\n}", "CodeBleu_score": 46.919407997065846}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$model = $this->guard->getProvider()->getModel();\n\n    if (method_exists($model, 'findForFortify')) {\n        $user = $this->guard->getProvider()->retrieveByCredentials(\n            $request->only('email')\n        );\n    } else {\n        $user = $this->guard->getProvider()->retrieveByCredentials(\n            $request->only('email', 'password')\n        );\n    }\n\n    if (is_null($user) || ! $this->guard->getProvider()->validateCredentials($user, ['password' => $request->input('password')])) {\n        event(new Failed($this->guard->getName(), $user, [\n            'email' => $request->email,\n            'password' => $request->password,\n        ]));\n\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return $user;\n}", "CodeBleu_score": 46.16537619522151}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$model = $this->guard->getProvider()->getModel();\n\n    return $this->guard->validate(array_merge($request->only($this->username(), 'password'), [\n        'active' => true,\n    ]));\n}", "CodeBleu_score": 27.281262495587256}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\tif (is_null($user = User::where('email', $request->email)->first())) {\n        event(new Failed);\n\n        throw ValidationException::withMessages([\n            Fortify::username() => [trans('auth.failed')],\n        ]);\n    }\n\n    if (! Hash::check($request->password, $user->password)) {\n        event(new Failed);\n\n        throw ValidationException::withMessages([\n            Fortify::username() => [trans('auth.failed')],\n        ]);\n    }\n\n    return $user;\n}", "CodeBleu_score": 37.16120681484919}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        Fortify::username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 72.85557051104246}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        Fortify::username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 72.85557051104246}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        Fortify::username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 72.85557051104246}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t$user = $request->user();\n\n    if (!$user) {\n        return Inertia::render('TwoFactorChallenge', [\n            'enabled' => false,\n            'remember' => $request->session()->get('login.remember'),\n        ]);\n    }\n\n    $publicKey = Webauthn::prepareAssertion($user);\n\n    return Inertia::render('TwoFactorChallenge', [\n        'enabled' => $user->webauthn_enabled,\n        'publicKey' => $publicKey,\n        'remember' => $request->session()->get('login.remember'),\n    ]);\n}", "CodeBleu_score": 39.31844028761874}, {"code": "<?\npublic function toResponse($request){\n\t$user = User::find(\n        $request->session()->get('login.id')\n    );\n\n    $publicKey = null;\n    $webauthnEnabled = false;\n\n    if ($user) {\n        $publicKey = Webauthn::prepareAssertion($user);\n        $webauthnEnabled = true;\n    }\n\n    return Inertia::render('TwoFactorChallenge', [\n        'webauthnEnabled' => $webauthnEnabled,\n        'remember' => $request->session()->get('login.remember'),\n        'publicKey' => $publicKey,\n    ]);\n}", "CodeBleu_score": 45.59788014755799}, {"code": "<?\npublic function toResponse($request){\n\t$user = User::find(\n        $request->session()->get('login.id')\n    );\n\n    if ($user && Webauthn::enabled($user)) {\n        $publicKey = Webauthn::i()->getPublicKey($user);\n        $data = [\n            'publicKey' => $publicKey,\n            'remember' => $request->session()->get('login.remember'),\n        ];\n    } else {\n        $data = [\n            'enabled' => false,\n            'remember' => $request->session()->get('login.remember'),\n        ];\n    }\n\n    return Inertia::render('TwoFactorChallenge', $data);\n}", "CodeBleu_score": 45.573165725946765}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$provider = $this->getSocialiteProvider($driver);\n\n    $userToken = UserToken::where('driver', $driver)->where('socialite_user_id', $socialite->getId())->first();\n\n    if (is_null($userToken)) {\n        $user = $this->createUser($driver, $socialite);\n        $userToken = $this->createUserToken($user, $driver, $socialite);\n    } else {\n        $user = $userToken->user;\n\n        if (! $provider->user()->getEmail() || ! $user->email) {\n            $user->update(['email' => $provider->user()->getEmail()]);\n        }\n    }\n\n    $user->tokens()->delete();\n\n    if ($user->wasChanged()) {\n        $user->save();\n    }\n\n    $this->limiter->clear($request);\n\n    return $user;\n}", "CodeBleu_score": 51.911199177901516}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$userToken = UserToken::where('driver', $driver)->where('token', $socialite->getId())->first();\n\n    if ($userToken) {\n        $user = $userToken->user;\n\n        if (! $user->hasVerifiedEmail()) {\n            throw ValidationException::withMessages([\n                'email' => [__('Your email address is not verified.')],\n            ]);\n        }\n\n        if (method_exists($user, 'hasBeenInvited') && ! $user->hasBeenInvited()) {\n            throw ValidationException::withMessages([\n                'email' => [__('Your account has not been invited.')],\n            ]);\n        }\n\n        return $user;\n    }\n\n    if ($socialite instanceof OAuth1User) {\n        $user = User::where('email', $socialite->getEmail())->first();\n    } elseif ($socialite instanceof OAuth2User) {\n        $user = User::where('email', $socialite->getEmail())->first();\n    } else {\n        $user = null;\n    }\n\n    if (! $user) {\n        $user = $this->createNewUser($driver, $socialite);\n    }\n\n    $user->tokens()->save(\n        new UserToken([\n            'driver' => $driver,\n            'token' => $socialite->getId(),\n        ])\n    );\n\n    return $user;\n}", "CodeBleu_score": 45.39093900816708}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$userToken = UserToken::where('driver', $driver)->where('token', $socialite->getId())->first();\n\n    if ($userToken) {\n        $user = $userToken->user;\n        if ($userToken->user_id != $user->id) {\n            $userToken->user_id = $user->id;\n            $userToken->save();\n        }\n    } else {\n        $user = User::where('email', $socialite->getEmail())->first();\n\n        if (! $user) {\n            $user = $this->createUser($driver, $socialite);\n        }\n\n        $userToken = $this->createUserToken($driver, $socialite, $user);\n    }\n\n    return $user;\n}", "CodeBleu_score": 54.615336597872876}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $this->guard->user();\n\n    if (! $user instanceof Authenticatable) {\n        return false;\n    }\n\n    $credentials = $this->filterCredentials($request);\n\n    try {\n        WebauthnFacade::validateAssertion($user, $credentials);\n    } catch (WebauthnException $e) {\n        event(new Failed($this->guard->getProvider(), $user, [\n            'credentials' => $credentials,\n            'message' => $e->getMessage(),\n        ]));\n\n        $this->limiter->increment($request);\n\n        throw ValidationException::withMessages([\n            Webauthn::username() => [$e->getMessage()],\n        ]);\n    }\n\n    return true;\n}", "CodeBleu_score": 44.41745495892956}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $this->guard->user();\n    if (is_null($user)) {\n        return false;\n    }\n\n    $credentials = $this->filterCredentials($request);\n    if (!WebauthnFacade::validateAssertion($user, $credentials)) {\n        $this->limiter->increment($request);\n        event(new Failed(config('webauthn.guard'), $user, []));\n        $this->throwFailedAuthenticationException($request);\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 53.73501740620399}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\tif (!$user = $this->getUser($request)) {\n        return false;\n    }\n\n    try {\n        $credentials = $this->filterCredentials($request);\n        $publicKey = $credentials['publicKey'];\n        $data = $credentials['data'];\n        $signature = $credentials['signature'];\n        $clientDataJSON = $credentials['clientDataJSON'];\n        $authenticatorData = $credentials['authenticatorData'];\n        $userHandle = $credentials['userHandle'];\n\n        $webauthn = WebauthnFacade::make($user);\n        $webauthn->validateAssertion($publicKey, $data, $signature, $clientDataJSON, $authenticatorData, $userHandle);\n    } catch (Throwable $e) {\n        $this->limiter->increment($request);\n\n        event(new Failed($this->guard->getLastAttempted(), $user));\n\n        throw ValidationException::withMessages([\n            WebauthnFacade::username() => [trans('webauthn::errors.failed')],\n        ]);\n    }\n\n    return true;\n}", "CodeBleu_score": 42.9937059000455}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\t$email = $this->option('email');\n    if (!$email) {\n        $this->error('No email provided');\n        return null;\n    }\n    try {\n        return User::where('email', $email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error('User not found');\n        return null;\n    }\n}", "CodeBleu_score": 71.20213353367775}, {"code": "<?\nprivate function user(): ?User{\n\t$email = $this->option('email');\n    if ($email === null) {\n        $this->error('No email provided');\n        return null;\n    }\n    try {\n        return User::where('email', $email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error(\"User with email {$email} not found\");\n        return null;\n    }\n}", "CodeBleu_score": 72.00059777903701}, {"code": "<?\nprivate function user(): ?User{\n\t$email = $this->option('email') ?? $this->ask('Email address of the user');\n    if (empty($email)) {\n        $this->error('No email address provided');\n\n        return null;\n    }\n\n    try {\n        return User::where('email', $email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error('User not found');\n\n        return null;\n    }\n}", "CodeBleu_score": 66.99370620227631}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\tif (config('scout.driver') === 'meilisearch' && $this->option('flush')) {\n        $indexes = config('scout.meilisearch.indexes');\n        foreach ($indexes as $index) {\n            $this->artisan('\u2610 Flushing index ' . $index, 'scout:flush', [\n                'model' => $index,\n                '--verbose' => true\n            ]);\n        }\n        $this->info('Indexes flushed.');\n    }\n}", "CodeBleu_score": 49.26224980785441}, {"code": "<?\nprotected function scoutFlush(): void{\n\tif (config('scout.driver') === 'meilisearch' && $this->option('flush')) {\n        $client = new Client(config('scout.meilisearch.host'), config('scout.meilisearch.key'));\n        $indexes = $client->getAllIndexes();\n        foreach ($indexes as $index) {\n            $table = str_replace('\\\\', '', Str::studly(Str::singular($index->uid)));\n            $this->artisan('\u2610 Flushing index', 'scout:flush', ['model' => $table, '--verbose' => true]);\n        }\n        $this->info('Indexes flushed.');\n    }\n}", "CodeBleu_score": 51.22666468013717}, {"code": "<?\nprotected function scoutFlush(): void{\n\tif (config('scout.driver') === 'meilisearch' && $this->option('flush')) {\n        $this->artisan('\u2610 Flushing indexes on Meilisearch', 'scout:flush', ['--verbose' => true]);\n    }\n}", "CodeBleu_score": 23.136956324147935}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\ttry {\n        $vcard = Reader::read($resource->vcard);\n    } catch (ParseException $e) {\n        $vcard = new VCard();\n    }\n\n    if (!$vcard->UID) {\n        $vcard->UID = $resource->uid;\n    }\n\n    foreach (self::getExporters() as $exporter) {\n        $exporter->export($vcard, $resource);\n    }\n\n    return $vcard;\n}", "CodeBleu_score": 29.223983491735332}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\ttry {\n        $vcard = Reader::read($resource->vcard);\n    } catch (ParseException $e) {\n        $vcard = new VCard();\n    }\n\n    if (!isset($vcard->UID)) {\n        $vcard->UID = $resource->uid;\n    }\n\n    foreach ($this->exporters() as $exporter) {\n        $exporter::apply($vcard, $resource);\n    }\n\n    return $vcard;\n}", "CodeBleu_score": 28.245689718374635}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\ttry {\n        $vcard = Reader::read($resource->vcard);\n    } catch (ParseException $e) {\n        $vcard = new VCard();\n    }\n\n    if (!$vcard->UID) {\n        $vcard->UID = $resource->uid;\n    }\n\n    $this->applyExporters($vcard, $resource);\n\n    return $vcard;\n}", "CodeBleu_score": 25.47717626474354}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\tn     * Returns the collection of all active contacts.\n     *\n     * @return \\Illuminate\\Support\\Collection<array-key,VCardResource>\n     */\n    public function getObjects(?string $collectionId): Collection\n    {\n        $vaults = $this->user->vaults()\n            ->wherePivot('permission', '<=', Vault::PERMISSION_VIEW);\n\n        if ($collectionId !== null) {\n            $vaults = $vaults->where('id', $collectionId);\n        }\n\n        $contacts = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->contacts()\n                ->active()\n                ->get()\n            )\n            ->flatten();\n\n        $groups = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->groups()\n                ->get()\n            )\n            ->flatten();\n\n        $result = $contacts->merge($groups);\n\n        return $result;\n    }\n\n    /**\n     * Returns the collection of deleted contacts.\n     *\n     * @return \\Illuminate\\Support\\Collection<array-key,VCardResource>\n     */\n    public function getDeletedObjects(?string $collectionId): Collection\n    {\n        $vaults = $this->user->vaults()\n            ->wherePivot('permission', '<=', Vault::PERMISSION_VIEW);\n\n        if ($collectionId !== null) {\n            $vaults = $vaults->where('id', $collectionId);\n        }\n\n        $contacts = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->contacts()\n                ->onlyTrashed()\n                ->get()\n            )\n            ->flatten();\n\n        $groups = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->groups()\n                ->onlyTrashed()\n                ->get()\n            )\n            ->flatten();\n\n        return $contacts->merge($groups);\n    }\n\n    /**\n     * Returns all cards for a specific addressbook id.\n     *\n     * This method should return the following properties for each card:\n     *   * carddata - raw vcard data\n     *   * uri - Some unique url\n     *   * lastmodified - A unix timestamp\n     *\n     * It's recommended to also return the following properties:\n     *   * etag - A unique etag. This must change every time the card changes.\n     *   * size - The size of the card in bytes.\n     *\n     * If these last two properties are provided, less time will be spent\n     * calculating them. If they are specified, you can also ommit carddata.\n     * This may speed up certain requests, especially with large cards.\n     *\n     * @param  mixed  $addressbookId\n     */\n    public function getCards($addressbookId): array\n    {\n        $cards = $this->getObjects($addressbookId);\n\n        return $cards\n            ->map(fn (VCardResource $card) => $this->prepareCard($card))\n            ->toArray();\n    }\n\n    /**\n     * Returns a specific card.\n     *\n     * The same set of properties must be returned as with getCards. The only\n     * exception is that 'carddata' is absolutely required.\n     *\n     * If the card does not exist, you must return false.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     * @return array|bool\n     */\n    #[ReturnTypeWillChange]\n    public function getCard($addressBookId, $cardUri)\n    {\n        $card = $this->getObject($addressBookId, $cardUri);\n\n        return $card === null\n            ? false\n            : $this->prepareCard($card);\n    }\n\n    /**\n     * Creates a new card.\n     *\n     * The addressbook id will be passed as the first argument. This is the\n     * same id as it is returned from the getAddressBooksForUser method.\n     *\n     * The cardUri is a base uri, and doesn't include the full path. The\n     * cardData argument is the vcard body, and is passed as a string.\n     *\n     * It is possible to return an ETag from this method. This ETag is for the\n     * newly created resource, and must be enclosed with double quotes (that\n     * is, the string itself must contain the double quotes).\n     *\n     * You should only return the ETag if you store the carddata as-is. If a\n     * subsequent GET request on the same card does not have the same body,\n     * byte-by-byte and you did return an ETag here, clients tend to get\n     * confused.\n     *\n     * If you don't return an ETag, you can just return null.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     * @param  string  $cardData\n     */\n    public function createCard($addressBookId, $cardUri, $cardData): ?string\n    {\n        return $this->updateCard($addressBookId, $cardUri, $cardData);\n    }\n\n    /**\n     * Updates a card.\n     *\n     * The addressbook id will be passed as the first argument. This is the\n     * same id as it is returned from the getAddressBooksForUser method.\n     *\n     * The cardUri is a base uri, and doesn't include the full path. The\n     * cardData argument is the vcard body, and is passed as a string.\n     *\n     * It is possible to return an ETag from this method. This ETag should\n     * match that of the updated resource, and must be enclosed with double\n     * quotes (that is: the string itself must contain the actual quotes).\n     *\n     * You should only return the ETag if you store the carddata as-is. If a\n     * subsequent GET request on the same card does not have the same body,\n     * byte-by-byte and you did return an ETag here, clients tend to get\n     * confused.\n     *\n     * If you don't return an ETag, you can just return null.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     * @param  string|resource  $cardData\n     */\n    public function updateCard($addressBookId, $cardUri, $cardData): ?string\n    {\n        $vault = $this->user->vaults()\n            ->wherePivot('permission', '<=', Vault::PERMISSION_EDIT)\n            ->findOrFail($addressBookId);\n\n        $job = new UpdateVCard([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $vault->id,\n            'uri' => $cardUri,\n            'card' => $cardData,\n        ]);\n\n        Bus::batch([$job])\n            ->allowFailures()\n            ->onQueue('high')\n            ->dispatch();\n\n        return null;\n    }\n\n    /**\n     * Deletes a card.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     */\n\n\n", "CodeBleu_score": 36.575740769656036}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\tn     * Returns the collection of all active contacts.\n     *\n     * @return \\Illuminate\\Support\\Collection<array-key,VCardResource>\n     */\n    public function getObjects(?string $collectionId): Collection\n    {\n        $vaults = $this->user->vaults()\n            ->wherePivot('permission', '<=', Vault::PERMISSION_VIEW);\n\n        if ($collectionId !== null) {\n            $vaults = $vaults->where('id', $collectionId);\n        }\n\n        $contacts = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->contacts()\n                ->active()\n                ->get()\n            )\n            ->flatten();\n\n        $groups = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->groups()\n                ->get()\n            )\n            ->flatten();\n\n        $result = $contacts->merge($groups);\n\n        return $result;\n    }\n\n    /**\n     * Returns the collection of deleted contacts.\n     *\n     * @return \\Illuminate\\Support\\Collection<array-key,VCardResource>\n     */\n    public function getDeletedObjects(?string $collectionId): Collection\n    {\n        $vaults = $this->user->vaults()\n            ->wherePivot('permission', '<=', Vault::PERMISSION_VIEW);\n\n        if ($collectionId !== null) {\n            $vaults = $vaults->where('id', $collectionId);\n        }\n\n        $contacts = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->contacts()\n                ->onlyTrashed()\n                ->get()\n            )\n            ->flatten();\n\n        $groups = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->groups()\n                ->onlyTrashed()\n                ->get()\n            )\n            ->flatten();\n\n        return $contacts->merge($groups);\n    }\n\n    /**\n     * Returns all cards for a specific addressbook id.\n     *\n     * This method should return the following properties for each card:\n     *   * carddata - raw vcard data\n     *   * uri - Some unique url\n     *   * lastmodified - A unix timestamp\n     *\n     * It's recommended to also return the following properties:\n     *   * etag - A unique etag. This must change every time the card changes.\n     *   * size - The size of the card in bytes.\n     *\n     * If these last two properties are provided, less time will be spent\n     * calculating them. If they are specified, you can also ommit carddata.\n     * This may speed up certain requests, especially with large cards.\n     *\n     * @param  mixed  $addressbookId\n     */\n    public function getCards($addressbookId): array\n    {\n        $cards = $this->getObjects($addressbookId);\n\n        return $cards\n            ->map(fn (VCardResource $card) => $this->prepareCard($card))\n            ->toArray();\n    }\n\n    /**\n     * Returns a specific card.\n     *\n     * The same set of properties must be returned as with getCards. The only\n     * exception is that 'carddata' is absolutely required.\n     *\n     * If the card does not exist, you must return false.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     * @return array|bool\n     */\n    #[ReturnTypeWillChange]\n    public function getCard($addressBookId, $cardUri)\n    {\n        $card = $this->getObject($addressBookId, $cardUri);\n\n        return $card === null\n            ? false\n            : $this->prepareCard($card);\n    }\n\n    /**\n     * Creates a new card.\n     *\n     * The addressbook id will be passed as the first argument. This is the\n     * same id as it is returned from the getAddressBooksForUser method.\n     *\n     * The cardUri is a base uri, and doesn't include the full path. The\n     * cardData argument is the vcard body, and is passed as a string.\n     *\n     * It is possible to return an ETag from this method. This ETag is for the\n     * newly created resource, and must be enclosed with double quotes (that\n     * is, the string itself must contain the double quotes).\n     *\n     * You should only return the ETag if you store the carddata as-is. If a\n     * subsequent GET request on the same card does not have the same body,\n     * byte-by-byte and you did return an ETag here, clients tend to get\n     * confused.\n     *\n     * If you don't return an ETag, you can just return null.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     * @param  string  $cardData\n     */\n    public function createCard($addressBookId, $cardUri, $cardData): ?string\n    {\n        return $this->updateCard($addressBookId, $cardUri, $cardData);\n    }\n\n    /**\n     * Updates a card.\n     *\n     * The addressbook id will be passed as the first argument. This is the\n     * same id as it is returned from the getAddressBooksForUser method.\n     *\n     * The cardUri is a base uri, and doesn't include the full path. The\n     * cardData argument is the vcard body, and is passed as a string.\n     *\n     * It is possible to return an ETag from this method. This ETag should\n     * match that of the updated resource, and must be enclosed with double\n     * quotes (that is: the string itself must contain the actual quotes).\n     *\n     * You should only return the ETag if you store the carddata as-is. If a\n     * subsequent GET request on the same card does not have the same body,\n     * byte-by-byte and you did return an ETag here, clients tend to get\n     * confused.\n     *\n     * If you don't return an ETag, you can just return null.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     * @param  string|resource  $cardData\n     */\n    public function updateCard($addressBookId, $cardUri, $cardData): ?string\n    {\n        $vault = $this->user->vaults()\n            ->wherePivot('permission', '<=', Vault::PERMISSION_EDIT)\n            ->findOrFail($addressBookId);\n\n        $job = new UpdateVCard([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $vault->id,\n            'uri' => $cardUri,\n            'card' => $cardData,\n        ]);\n\n        Bus::batch([$job])\n            ->allowFailures()\n            ->onQueue('high')\n            ->dispatch();\n\n        return null;\n    }\n\n    /**\n     * Deletes a card.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     */\n\n\n", "CodeBleu_score": 36.575740769656036}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\tn     * Returns the collection of all active contacts.\n     *\n     * @return \\Illuminate\\Support\\Collection<array-key,VCardResource>\n     */\n    public function getObjects(?string $collectionId): Collection\n    {\n        $vaults = $this->user->vaults()\n            ->wherePivot('permission', '<=', Vault::PERMISSION_VIEW);\n\n        if ($collectionId !== null) {\n            $vaults = $vaults->where('id', $collectionId);\n        }\n\n        $contacts = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->contacts()\n                ->active()\n                ->get()\n            )\n            ->flatten();\n\n        $groups = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->groups()\n                ->get()\n            )\n            ->flatten();\n\n        $result = $contacts->merge($groups);\n\n        return $result;\n    }\n\n    /**\n     * Returns the collection of deleted contacts.\n     *\n     * @return \\Illuminate\\Support\\Collection<array-key,VCardResource>\n     */\n    public function getDeletedObjects(?string $collectionId): Collection\n    {\n        $vaults = $this->user->vaults()\n            ->wherePivot('permission', '<=', Vault::PERMISSION_VIEW);\n\n        if ($collectionId !== null) {\n            $vaults = $vaults->where('id', $collectionId);\n        }\n\n        $contacts = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->contacts()\n                ->onlyTrashed()\n                ->get()\n            )\n            ->flatten();\n\n        $groups = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->groups()\n                ->onlyTrashed()\n                ->get()\n            )\n            ->flatten();\n\n        return $contacts->merge($groups);\n    }\n\n    /**\n     * Returns all cards for a specific addressbook id.\n     *\n     * This method should return the following properties for each card:\n     *   * carddata - raw vcard data\n     *   * uri - Some unique url\n     *   * lastmodified - A unix timestamp\n     *\n     * It's recommended to also return the following properties:\n     *   * etag - A unique etag. This must change every time the card changes.\n     *   * size - The size of the card in bytes.\n     *\n     * If these last two properties are provided, less time will be spent\n     * calculating them. If they are specified, you can also ommit carddata.\n     * This may speed up certain requests, especially with large cards.\n     *\n     * @param  mixed  $addressbookId\n     */\n    public function getCards($addressbookId): array\n    {\n        $cards = $this->getObjects($addressbookId);\n\n        return $cards\n            ->map(fn (VCardResource $card) => $this->prepareCard($card))\n            ->toArray();\n    }\n\n    /**\n     * Returns a specific card.\n     *\n     * The same set of properties must be returned as with getCards. The only\n     * exception is that 'carddata' is absolutely required.\n     *\n     * If the card does not exist, you must return false.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     * @return array|bool\n     */\n    #[ReturnTypeWillChange]\n    public function getCard($addressBookId, $cardUri)\n    {\n        $card = $this->getObject($addressBookId, $cardUri);\n\n        return $card === null\n            ? false\n            : $this->prepareCard($card);\n    }\n\n    /**\n     * Creates a new card.\n     *\n     * The addressbook id will be passed as the first argument. This is the\n     * same id as it is returned from the getAddressBooksForUser method.\n     *\n     * The cardUri is a base uri, and doesn't include the full path. The\n     * cardData argument is the vcard body, and is passed as a string.\n     *\n     * It is possible to return an ETag from this method. This ETag is for the\n     * newly created resource, and must be enclosed with double quotes (that\n     * is, the string itself must contain the double quotes).\n     *\n     * You should only return the ETag if you store the carddata as-is. If a\n     * subsequent GET request on the same card does not have the same body,\n     * byte-by-byte and you did return an ETag here, clients tend to get\n     * confused.\n     *\n     * If you don't return an ETag, you can just return null.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     * @param  string  $cardData\n     */\n    public function createCard($addressBookId, $cardUri, $cardData): ?string\n    {\n        return $this->updateCard($addressBookId, $cardUri, $cardData);\n    }\n\n    /**\n     * Updates a card.\n     *\n     * The addressbook id will be passed as the first argument. This is the\n     * same id as it is returned from the getAddressBooksForUser method.\n     *\n     * The cardUri is a base uri, and doesn't include the full path. The\n     * cardData argument is the vcard body, and is passed as a string.\n     *\n     * It is possible to return an ETag from this method. This ETag should\n     * match that of the updated resource, and must be enclosed with double\n     * quotes (that is: the string itself must contain the actual quotes).\n     *\n     * You should only return the ETag if you store the carddata as-is. If a\n     * subsequent GET request on the same card does not have the same body,\n     * byte-by-byte and you did return an ETag here, clients tend to get\n     * confused.\n     *\n     * If you don't return an ETag, you can just return null.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     * @param  string|resource  $cardData\n     */\n    public function updateCard($addressBookId, $cardUri, $cardData): ?string\n    {\n        $vault = $this->user->vaults()\n            ->wherePivot('permission', '<=', Vault::PERMISSION_EDIT)\n            ->findOrFail($addressBookId);\n\n        $job = new UpdateVCard([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $vault->id,\n            'uri' => $cardUri,\n            'card' => $cardData,\n        ]);\n\n        Bus::batch([$job])\n            ->allowFailures()\n            ->onQueue('high')\n            ->dispatch();\n\n        return null;\n    }\n\n    /**\n     * Deletes a card.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     */\n\n\n", "CodeBleu_score": 36.575740769656036}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\tif (! request()->hasFile('file')) {\n        return;\n    }\n\n    $data['user_id'] = auth()->guard('user')->user()->id;\n\n    $activity = $this->activityRepository->create($data);\n\n    $file = request()->file('file');\n\n    $path = request()->file('file')->store('activity_files');\n\n    return $this->create([\n        'name'          => $file->getClientOriginalName(),\n        'path'          => $path,\n        'activity_id'   => $activity->id,\n    ]);\n}", "CodeBleu_score": 56.155416315226816}, {"code": "<?\npublic function upload(array $data){\n\tif (! request()->hasFile('file')) {\n        return;\n    }\n\n    $file = $data['file'];\n\n    $activity = $this->activityRepository->create([\n        'type'          => 'file',\n        'comment'       => $data['comment'],\n        'is_done'       => $data['is_done'],\n        'schedule_from' => $data['schedule_from'],\n        'schedule_to'   => $data['schedule_to'],\n        'user_id'       => $data['user_id'],\n        'lead_id'       => $data['lead_id'],\n    ]);\n\n    $path = request()->file('file')->store('files');\n\n    return $this->create([\n        'name'          => $file->getClientOriginalName(),\n        'path'          => $path,\n        'activity_id'   => $activity->id,\n    ]);\n}", "CodeBleu_score": 61.288699413401474}, {"code": "<?\npublic function upload(array $data){\n\tif (! request()->hasFile('file')) {\n        return;\n    }\n\n    $activity = $this->activityRepository->create([\n        'type' => 'file',\n        'comment' => $data['comment'],\n        'user_id' => auth()->guard('user')->user()->id,\n        'lead_id' => $data['lead_id'],\n    ]);\n\n    $file = $activity->files()->create([\n        'name' => request()->file('file')->getClientOriginalName(),\n        'path' => request()->file('file')->store('activity_files'),\n    ]);\n\n    return $file;\n}", "CodeBleu_score": 67.07495536621256}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\tif ($exception instanceof HttpException) {\n        $statusCode = $exception->getStatusCode();\n    } elseif ($exception instanceof ModelNotFoundException) {\n        $statusCode = 404;\n    } elseif ($exception instanceof PDOException) {\n        $statusCode = 500;\n    } elseif ($exception instanceof ParseError) {\n        $statusCode = 500;\n    } else {\n        $statusCode = 500;\n    }\n\n    if ($exception instanceof HttpException) {\n        $message = $exception->getMessage();\n    } else {\n        $message = $this->jsonErrorMessages[$statusCode];\n    }\n\n    if (request()->is('admin/*')) {\n        return response()->view('admin::errors.500', ['message' => $message], $statusCode);\n    } else {\n        return redirect()->route('customer.session.index');\n    }\n}", "CodeBleu_score": 47.68947729159592}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t$request = request();\n\n    if ($exception instanceof HttpException) {\n        $statusCode = $exception->getStatusCode();\n\n        if ($request->expectsJson()) {\n            return response()->json([\n                'message' => $this->jsonErrorMessages[$statusCode] ?? trans('admin::app.common.internal-server-error')\n            ], $statusCode);\n        }\n\n        return response()->view(\"admin::errors.{$statusCode}\", [], $statusCode);\n    } elseif ($exception instanceof ModelNotFoundException) {\n        if ($request->expectsJson()) {\n            return response()->json([\n                'message' => $this->jsonErrorMessages[404] ?? trans('admin::app.common.resource-not-found')\n            ], 404);\n        }\n\n        return response()->view('admin::errors.404', [], 404);\n    } elseif ($exception instanceof PDOException) {\n        if ($request->expectsJson()) {\n            return response()->json([\n                'message' => $this->jsonErrorMessages[500] ?? trans('admin::app.common.internal-server-error')\n            ], 500);\n        }\n\n        return response()->view('admin::errors.500', [], 500);\n    } elseif ($exception instanceof ParseError) {\n        if ($request->expectsJson()) {\n            return response()->json([\n                'message' => $this->jsonErrorMessages[500] ?? trans('admin::app.common.internal-server-error')\n            ], 500);\n        }\n\n        return response()->view('admin::errors.500', [], 500);\n    }\n\n    return parent::render($request, $exception);\n}", "CodeBleu_score": 35.492638468174285}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\tif ($exception instanceof HttpException) {\n        $statusCode = $exception->getStatusCode();\n        if (request()->is('admin/*') && ! request()->expectsJson()) {\n            return response()->view('admin::errors.404', [], $statusCode);\n        } else if (request()->expectsJson()) {\n            return response()->json([\n                'message' => $this->jsonErrorMessages[$statusCode],\n            ], $statusCode);\n        } else {\n            return redirect()->route('customer.session.index');\n        }\n    } else if ($exception instanceof ModelNotFoundException) {\n        $statusCode = 404;\n        if (request()->expectsJson()) {\n            return response()->json([\n                'message' => $this->jsonErrorMessages[$statusCode],\n            ], $statusCode);\n        } else {\n            return response()->view('admin::errors.404', [], $statusCode);\n        }\n    } else if ($exception instanceof PDOException) {\n        $statusCode = 500;\n        if (request()->expectsJson()) {\n            return response()->json([\n                'message' => $this->jsonErrorMessages[$statusCode],\n            ], $statusCode);\n        } else {\n            return response()->view('admin::errors.500', [], $statusCode);\n        }\n    } else if ($exception instanceof ParseError) {\n        $statusCode = 500;\n        if (request()->expectsJson()) {\n            return response()->json([\n                'message' => $this->jsonErrorMessages[$statusCode],\n            ], $statusCode);\n        } else {\n            return response()->view('admin::errors.500', [], $statusCode);\n        }\n    }\n}", "CodeBleu_score": 33.24016617802712}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\n        return response()->json([\n            'message' => $this->jsonErrorMessages[$statusCode],\n        ], $statusCode);\n    } else {\n        return response()->view('admin::errors.' . $statusCode, [], $statusCode);\n    }\n}", "CodeBleu_score": 64.81650335201002}, {"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\n        return response()->json([\n            'message' => $this->jsonErrorMessages[$statusCode],\n        ], $statusCode);\n    }\n\n    return response()->view('admin::errors.' . $statusCode, [], $statusCode);\n}", "CodeBleu_score": 64.95464570269579}, {"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\n        return response()->json(['message' => $this->jsonErrorMessages[$statusCode]], $statusCode);\n    }\n\n    return response()->view('admin::' . $path . '.exceptions.' . $statusCode, [], $statusCode);\n}", "CodeBleu_score": 57.664970482349986}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t$data = request()->all();\n\n    $count = 0;\n\n    foreach ($data['rows'] as $activityId) {\n        $activity = $this->activityRepository->findOrFail($activityId);\n\n        Event::dispatch('activity.update.before', $activityId);\n\n        $this->activityRepository->update([\n            'is_done' => $data['value'],\n        ], $activityId);\n\n        Event::dispatch('activity.update.after', $activity);\n\n        $count++;\n    }\n\n    return response()->json([\n        'success' => $count ? true : false,\n    ]);\n}", "CodeBleu_score": 48.02987746751935}, {"code": "<?\npublic function massUpdate(){\n\tEvent::dispatch('activities.mass_update.before');\n\n    $count = 0;\n\n    foreach (request('rows') as $activityId) {\n        $activity = $this->activityRepository->findOrFail($activityId);\n\n        Event::dispatch('activities.mass_update.before', $activityId);\n\n        $activity->update(['is_done' => 1]);\n\n        Event::dispatch('activities.mass_update.after', $activityId);\n\n        $count++;\n    }\n\n    Event::dispatch('activities.mass_update.after');\n\n    return response()->json([\n        'success' => $count ? true : false,\n    ]);\n}", "CodeBleu_score": 44.762381936299164}, {"code": "<?\npublic function massUpdate(){\n\t$data = request()->all();\n\n    $count = 0;\n\n    foreach ($data['rows'] as $activityId) {\n        Event::dispatch('activity.update.before', $activityId);\n\n        $this->activityRepository->update([\n            'is_done' => $data['value'],\n        ], $activityId);\n\n        Event::dispatch('activity.update.after', $activityId);\n\n        $count++;\n    }\n\n    return response()->json([\n        'success' => $count ? true : false,\n    ]);\n}", "CodeBleu_score": 38.74884838718774}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\tis_array(request('participants.users'))) {\n                foreach (request('participants.users') as $userId) {\n                    $activity->participants()->create([\n                        'user_id' => $userId\n                    ]);\n                }\n            }\n\n            if (is_array(request('participants.persons'))) {\n                foreach (request('participants.persons') as $personId) {\n                    $activity->participants()->create([\n                        'person_id' => $personId,\n                    ]);\n                }\n            }\n        }", "CodeBleu_score": 20.447445281556774}, {"code": "<?\n public function massDestroy(){\n\tis_array(request('participants.users'))) {\n                foreach (request('participants.users') as $userId) {\n                    $activity->participants()->create([\n                        'user_id' => $userId\n                    ]);\n                }\n            }\n\n            if (is_array(request('participants.persons'))) {\n                foreach (request('participants.persons') as $personId) {\n                    $activity->participants()->create([\n                        'person_id' => $personId,\n                    ]);\n                }\n            }\n        }", "CodeBleu_score": 20.447445281556774}, {"code": "<?\n public function massDestroy(){\n\tis_array(request('participants.users'))) {\n                foreach (request('participants.users') as $userId) {\n                    $activity->participants()->create([\n                        'user_id' => $userId\n                    ]);\n                }\n            }\n\n            if (is_array(request('participants.persons'))) {\n                foreach (request('participants.persons') as $personId) {\n                    $activity->participants()->create([\n                        'person_id' => $personId,\n                    ]);\n                }\n            }\n        }", "CodeBleu_score": 20.447445281556774}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t$response = $this->dashboardHelper->getCards();\n    $requestData = request()->all();\n\n    $response = array_map(function ($card) use ($requestData) {\n        $card['selected'] = false;\n\n        foreach ($requestData as $data) {\n            if ($card['key'] === $data['key']) {\n                $card['selected'] = true;\n            }\n        }\n\n        return $card;\n    }, $response);\n\n    return response()->json($response);\n}", "CodeBleu_score": 46.05003318757928}, {"code": "<?\n public function updateCards(){\n\t$response = $this->dashboardHelper->getCards();\n    $cards = request()->all();\n\n    foreach ($response as $key => $card) {\n        $response[$key]['selected'] = false;\n        foreach ($cards as $cardData) {\n            if ($card['url_key'] == $cardData['url_key']) {\n                $response[$key]['selected'] = true;\n            }\n        }\n    }\n\n    return response()->json($response);\n}", "CodeBleu_score": 46.007656142301165}, {"code": "<?\n public function updateCards(){\n\t$response = $this->dashboardHelper->getCards();\n\n     foreach ($response as $key => $card) {\n         if (request()->has($card['key'])) {\n             $response[$key]['selected'] = true;\n         } else {\n             $response[$key]['selected'] = false;\n         }\n     }\n\n     return response()->json($response);\n }", "CodeBleu_score": 37.48343803651536}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\tEvent::dispatch('core.configuration.create.before');\n\n    $this->validate(request(), [\n        'code' => ['required', new Code],\n    ]);\n\n    $this->configurationRepository->create(request()->all());\n\n    Event::dispatch('core.configuration.create.after');\n\n    session()->flash('success', trans('admin::app.configuration.create-success'));\n\n    return redirect()->route('admin.configuration.index');\n}", "CodeBleu_score": 39.74367313542152}, {"code": "<?\npublic function store(){\n\tEvent::dispatch('core.configuration.create.before');\n\n    $this->validate(request(), [\n        'code' => ['required', 'unique:core_config,code', new Code],\n        'value' => 'required',\n    ]);\n\n    $this->configurationRepository->create(request()->all());\n\n    Event::dispatch('core.configuration.create.after');\n\n    session()->flash('success', trans('admin::app.configuration.create-success'));\n\n    return redirect()->route($this->_config['redirect']);\n}", "CodeBleu_score": 37.72305379282274}, {"code": "<?\npublic function store(){\n\tEvent::dispatch('core.configuration.create.before');\n\n    $this->validate(request(), [\n        'code' => ['required', 'unique:core_config,code', new Code],\n        'value' => 'required',\n    ]);\n\n    $this->configurationRepository->create(request()->all());\n\n    Event::dispatch('core.configuration.create.after');\n\n    session()->flash('success', trans('admin::app.configuration.create-success'));\n\n    return redirect()->route('admin.configuration.index', request()->input());\n}", "CodeBleu_score": 37.11159444976288}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t$path = request()->route('path');\n    $filename = request()->route('filename');\n    $config = $this->configurationRepository->findOneByField('value', $filename);\n\n    return Storage::download($path . '/' . $filename, $config->value);\n}", "CodeBleu_score": 48.87480092667457}, {"code": "<?\npublic function download(){\n\t$path = request()->route('path');\n\n    $fileName = request()->route('filename');\n\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n\n    return Storage::download($path . '/' . $config->value);\n}", "CodeBleu_score": 55.48540480332096}, {"code": "<?\npublic function download(){\n\t$path = request()->route('path');\n    $filename = request()->route('filename');\n    $config = $this->configurationRepository->findOneByField('value', $path);\n    $file = Storage::get($config['value']);\n    $headers = [\n        'Content-Type' => Storage::mimeType($config['value']),\n        'Cache-Control' => 'must-revalidate, post-check=0, pre-check=0',\n        'Content-Length' => strlen($file),\n        'Pragma' => 'public',\n        'Content-Disposition' => 'attachment; filename=\"' . $filename . '\"',\n    ];\n    return response()->make($file, 200, $headers);\n}", "CodeBleu_score": 45.57373737610996}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tList<AdminModelSort> adminModelSorts = new ArrayList<>();\n    for (String model : list) {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setModel(model);\n        adminModelSort.setType(1);\n        adminModelSort.setUserId(UserUtil.getUserId());\n        adminModelSorts.add(adminModelSort);\n    }\n    adminModelSortService.lambdaUpdate().eq(AdminModelSort::getUserId, UserUtil.getUserId()).remove();\n    adminModelSortService.saveBatch(adminModelSorts);\n    return Result.ok();\n}", "CodeBleu_score": 47.56269066043816}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tList<AdminModelSort> adminModelSortList = new ArrayList<>();\n    list.forEach(s -> {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setModel(s);\n        adminModelSort.setType(1);\n        adminModelSort.setUserId(UserUtil.getUserId());\n        adminModelSortList.add(adminModelSort);\n    });\n    adminModelSortService.lambdaUpdate().eq(AdminModelSort::getUserId, UserUtil.getUserId()).eq(AdminModelSort::getType, 1).remove();\n    adminModelSortService.saveBatch(adminModelSortList);\n    return Result.ok();\n}", "CodeBleu_score": 47.06579521762172}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tList<AdminModelSort> adminModelSorts = new ArrayList<>();\n    for (String model : list) {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setUserId(UserUtil.getUserId());\n        adminModelSort.setType(1);\n        adminModelSort.setModel(model);\n        adminModelSorts.add(adminModelSort);\n    }\n    adminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()).eq(AdminModelSort::getType, 1));\n    adminModelSortService.saveBatch(adminModelSorts);\n    return Result.ok();\n}", "CodeBleu_score": 50.89577138286144}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getId());\n    if (AdminModuleEnum.CRM.getCode().equals(adminConfig.getModule())) {\n        return R.error(AdminCodeEnum.MODULE_SETTING_CRM_NOT_ALLOW_DISABLED);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.updateById(adminConfig);\n    return R.ok();\n}", "CodeBleu_score": 70.24165900408926}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig config = adminConfigService.getById(moduleSetting.getId());\n    if (config.getModule().equals(AdminModuleEnum.CRM.getValue())) {\n        return R.error(AdminCodeEnum.CRM_MODULE_NOT_ALLOW_DISABLE);\n    }\n    config.setStatus(moduleSetting.getStatus());\n    adminConfigService.updateById(config);\n    return R.ok();\n}", "CodeBleu_score": 60.040524565610575}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getId());\n    if (adminConfig.getModule().equals(AdminModuleEnum.CRM.getCode())) {\n        return R.error(AdminCodeEnum.MODULE_CRM_CAN_NOT_DISABLE);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.updateById(adminConfig);\n    return R.ok();\n}", "CodeBleu_score": 66.31566251358075}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t,object = \\\"\u4f01\u4e1a\u9996\u9875\u914d\u7f6e\\\",detail = \\\"'\u4f01\u4e1a\u9996\u9875\u914d\u7f6e:'+#adminCompanyBO.companyName\\\")\n    public Result setAdminConfig(@RequestBody AdminCompanyBO adminCompanyBO) {\n        adminConfigService.setAdminConfig(adminCompanyBO);\n        return Result.ok();\n    }\n\n    /**\n     * \u67e5\u8be2\u4f01\u4e1a\u914d\u7f6e\n     *\n     * @return Result\n     * @author zhangzhiwei\n     */\n    @ApiOperation(value = \\\"\u67e5\u8be2\u4f01\u4e1a\u914d\u7f6e\\\")\n    @PostMapping(\\\"/queryAdminConfig\\\")\n    public Result<AdminCompanyBO> queryAdminConfig() {\n        return R.ok(adminConfigService.queryAdminConfig());\n    }\n\n\n    @ApiOperation(value = \\\"\u5934\u90e8\u8bbe\u7f6e\\\")\n    @PostMapping(\\\"/queryHeaderModelSort\\\")\n    public Result<List<String>> queryHeaderModelSort() {\n        List<AdminModelSort> list = adminModelSortService.lambdaQuery().select(AdminModelSort::getModel)\n                .eq(AdminModelSort::getType, 1)\n                .eq(AdminModelSort::getUserId, UserUtil.getUserId())\n                .list();\n        return Result.ok(list.stream().map(AdminModelSort::getModel).collect(Collectors.toList()));\n    }\n\n    @ApiOperation(value = \\\"\u5934\u90e8\u8bbe\u7f6e\\\")\n    @PostMapping(\\\"/setHeaderModelSort\\\")\n    public Result setHeaderModelSort(@RequestBody List<String> list) {\n        List<AdminModelSort> modelSortList = new ArrayList<>();\n        for (int i = 0; i < list.size(); i++) {\n            AdminModelSort adminModelSort = new AdminModelSort();\n            adminModelSort.setType(1).setModel(list.get(i)).setSort(i).setIsHidden(0).setUserId(UserUtil.getUserId());\n            modelSortList.add(adminModelSort);\n        }\n        LambdaQueryWrapper<AdminModelSort> wrapper = new LambdaQueryWrapper<>();\n        wrapper.eq(AdminModelSort::getType, 1).eq(AdminModelSort::getUserId, UserUtil.getUserId());\n        adminModelSortService.remove(wrapper);\n        adminModelSortService.saveBatch(modelSortList, Const.BATCH_SAVE_SIZE);\n        return R.ok();\n    }\n\n    @ApiOperation(value = \\\"\u8bbe\u7f6e\u6d3b\u52a8\u54a8\u8be2\u72b6\u6001\\\")\n    @PostMapping(\\\"/setMarketing\\\")\n    @SysLogHandler(applicationName = \\\"admin\\\",subModel = SubModelType.ADMIN_OTHER_SETTINGS,behavior = BehaviorEnum.UPDATE,object = \\\"\u6d3b\u52a8\u54a8\u8be2\u8bbe\u7f6e\\\",detail = \\\"\u6d3b\u52a8\u54a8\u8be2\u8bbe\u7f6e\\\")\n    public Result setMarketing(@RequestParam(\\\"status\\\") Integer status) {\n       adminConfigService.setMarketing(status);\n       return R.ok();\n    }\n\n\n    @ApiOperation(value = \\\"\u67e5\u8be2\u6d3b\u52a8\u54a8\u8be2\u72b6\u6001\\\")\n    @PostMapping(\\\"/queryMarketing\\\")\n    public Result queryMarketing() {\n        return R.ok(adminConfigService.queryMarketing());\n    }\n\n    /**\n     * \u67e5\u8be2\u4f01\u4e1a\u6a21\u5757\u914d\u7f6e\n     *\n     * @author zhangzhiwei\n     */\n    @ApiOperation(value = \\\"\u67e5\u8be2\u4f01\u4e1a\u6a21\u5757\u914d\u7f6e\\\")\n    @PostMapping(\\\"/queryModuleSetting\\\")\n    public Result<List<ModuleSettingVO>> queryModuleSetting() {\n        return R.ok(adminConfigService.queryModuleSetting());\n    }\n\n    /**\n     * \u8bbe\u7f6e\u4f01\u4e1a\u6a21\u5757\n     *\n     * @param moduleSetting data\n     */\n    @ApiOperation(value = \\\"\u8bbe\u7f6e\u4f01\u4e1a\u6a21\u5757\\\")\n    @PostMapping(\\\"/setModuleSetting\\\")\n    @SysLogHandler(subModel = SubModelType.ADMIN_OTHER_SETTINGS,behavior = BehaviorEnum.UPDATE)\n    public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting) {\n        AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n        if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n            return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n        }\n        adminConfig.setStatus(moduleSetting.getStatus());\n        adminConfigService.setModuleSetting(adminConfig);\n        return Result.ok();\n    }\n\n    @ApiOperation(value = \\\"\u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\\\")\n    @PostMapping(\\\"/setLogWelcomeSpeech\\\")\n    @SysLogHandler(subModel = SubModelType.ADMIN_OTHER_SETTINGS,behavior = BehaviorEnum.UPDATE,object = \\\"\u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\\\",detail = \\\"\u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\\\")\n    public Result setLogWelcomeSpeech(@Valid @RequestBody List<String> stringList) {\n        adminConfigService.setLogWelcomeSpeech(stringList);\n        return Result.ok();\n    }\n\n    /**\n     * \u83b7\u53d6\u65e5\u5fd7\u6b22\u8fce\u8bed\u5217\u8868\n     */\n    @ApiOperation(value = \\\"\u83b7\u53d6\u65e5\u5fd7\u6b22\u8fce\u8bed\\\")\n    @PostMapping(\\\"/getLogWelcomeSpeechList\\\")\n    public Result<List<LogWelcomeSpeechBO>> getLogWelcomeSpeechList() {\n        List<LogWelcomeSpeechBO> adminConfigs = adminConfigService.getLogWelcomeSpeechList();\n        return R.ok(adminConfigs);\n    }\n\n    /**\n     * \u5220\u9664\u914d\u7f6e\u6570\u636e\n     */\n    @ApiOperation(value = \\\"\u5220\u9664\u914d\u7f6e\u6570\u636e\\\")\n    @PostMapping(\\\"/deleteConfigById\\\")\n    public Result deleteConfigById(@RequestBody @ApiParam(name = \\\"settingId\\\", value = \\\"\u4e3b\u952eID\\\", required = true) Integer settingId) {\n        if (settingId == null) {\n            return R.error(AdminCodeEnum.ADMIN_DATA_EXIST_ERROR);\n        }\n        adminConfigService.removeById(settingId);\n        return R.ok();\n    }\n\n    /**\n     * \u67e5\u8be2\u547c\u53eb\u4e2d\u5fc3\u8bbe\u7f6e\n     */\n    @ApiOperation(value = \\\"\u67e5\u8be2\u624b\u673a\u7aef\u6a21\u5757\u8bbe\u7f6e\\\")\n    @PostMapping(\\\"/queryCallModuleSetting\\\")\n    public Result<ModuleSettingVO> queryCallModuleSetting() {\n        ModuleSettingVO moduleSettingVO = adminConfigService.queryCallModuleSetting();\n        return R.ok(moduleSettingVO);\n    }\n\n    @ApiOperation(value = \\\"\u67e5\u8be2\u81ea\u5b9a\u4e49\u914d\u7f6e\\\")\n    @PostMapping(\\\"/queryCustomSetting/{customKey}\\\")\n    public Result<JSONArray> queryCustomSetting(@PathVariable(\\\"customKey\\\") String customKey) {\n        AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(customKey);\n        if (userConfig == null) {\n            return Result.ok(new JSONArray());\n        }\n        return Result.ok(JSON.parseArray(userConfig.getValue()));\n    }\n\n    /**\n     * \u4fee\u6539\u624b\u673a\u7aef\u6a21\u5757\u8bbe\u7f6e\n     */\n\n    @ApiOperation(value = \\\"\u4fee\u6539\u81ea\u5b9a\u4e49\u914d\u7f6e\\\")\n    @PostMapping(\\\"/setCustomSetting/{customKey}\\\")\n\n\n", "CodeBleu_score": 15.9488599993167}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t,object = \\\"\u4f01\u4e1a\u9996\u9875\u914d\u7f6e\\\",detail = \\\"'\u4f01\u4e1a\u9996\u9875\u914d\u7f6e:'+#adminCompanyBO.companyName\\\")\n    public Result setAdminConfig(@RequestBody AdminCompanyBO adminCompanyBO) {\n        adminConfigService.setAdminConfig(adminCompanyBO);\n        return Result.ok();\n    }\n\n    /**\n     * \u67e5\u8be2\u4f01\u4e1a\u914d\u7f6e\n     *\n     * @return Result\n     * @author zhangzhiwei\n     */\n    @ApiOperation(value = \\\"\u67e5\u8be2\u4f01\u4e1a\u914d\u7f6e\\\")\n    @PostMapping(\\\"/queryAdminConfig\\\")\n    public Result<AdminCompanyBO> queryAdminConfig() {\n        return R.ok(adminConfigService.queryAdminConfig());\n    }\n\n\n    @ApiOperation(value = \\\"\u5934\u90e8\u8bbe\u7f6e\\\")\n    @PostMapping(\\\"/queryHeaderModelSort\\\")\n    public Result<List<String>> queryHeaderModelSort() {\n        List<AdminModelSort> list = adminModelSortService.lambdaQuery().select(AdminModelSort::getModel)\n                .eq(AdminModelSort::getType, 1)\n                .eq(AdminModelSort::getUserId, UserUtil.getUserId())\n                .list();\n        return Result.ok(list.stream().map(AdminModelSort::getModel).collect(Collectors.toList()));\n    }\n\n    @ApiOperation(value = \\\"\u5934\u90e8\u8bbe\u7f6e\\\")\n    @PostMapping(\\\"/setHeaderModelSort\\\")\n    public Result setHeaderModelSort(@RequestBody List<String> list) {\n        List<AdminModelSort> modelSortList = new ArrayList<>();\n        for (int i = 0; i < list.size(); i++) {\n            AdminModelSort adminModelSort = new AdminModelSort();\n            adminModelSort.setType(1).setModel(list.get(i)).setSort(i).setIsHidden(0).setUserId(UserUtil.getUserId());\n            modelSortList.add(adminModelSort);\n        }\n        LambdaQueryWrapper<AdminModelSort> wrapper = new LambdaQueryWrapper<>();\n        wrapper.eq(AdminModelSort::getType, 1).eq(AdminModelSort::getUserId, UserUtil.getUserId());\n        adminModelSortService.remove(wrapper);\n        adminModelSortService.saveBatch(modelSortList, Const.BATCH_SAVE_SIZE);\n        return R.ok();\n    }\n\n    @ApiOperation(value = \\\"\u8bbe\u7f6e\u6d3b\u52a8\u54a8\u8be2\u72b6\u6001\\\")\n    @PostMapping(\\\"/setMarketing\\\")\n    @SysLogHandler(applicationName = \\\"admin\\\",subModel = SubModelType.ADMIN_OTHER_SETTINGS,behavior = BehaviorEnum.UPDATE,object = \\\"\u6d3b\u52a8\u54a8\u8be2\u8bbe\u7f6e\\\",detail = \\\"\u6d3b\u52a8\u54a8\u8be2\u8bbe\u7f6e\\\")\n    public Result setMarketing(@RequestParam(\\\"status\\\") Integer status) {\n       adminConfigService.setMarketing(status);\n       return R.ok();\n    }\n\n\n    @ApiOperation(value = \\\"\u67e5\u8be2\u6d3b\u52a8\u54a8\u8be2\u72b6\u6001\\\")\n    @PostMapping(\\\"/queryMarketing\\\")\n    public Result queryMarketing() {\n        return R.ok(adminConfigService.queryMarketing());\n    }\n\n    /**\n     * \u67e5\u8be2\u4f01\u4e1a\u6a21\u5757\u914d\u7f6e\n     *\n     * @author zhangzhiwei\n     */\n    @ApiOperation(value = \\\"\u67e5\u8be2\u4f01\u4e1a\u6a21\u5757\u914d\u7f6e\\\")\n    @PostMapping(\\\"/queryModuleSetting\\\")\n    public Result<List<ModuleSettingVO>> queryModuleSetting() {\n        return R.ok(adminConfigService.queryModuleSetting());\n    }\n\n    /**\n     * \u8bbe\u7f6e\u4f01\u4e1a\u6a21\u5757\n     *\n     * @param moduleSetting data\n     */\n    @ApiOperation(value = \\\"\u8bbe\u7f6e\u4f01\u4e1a\u6a21\u5757\\\")\n    @PostMapping(\\\"/setModuleSetting\\\")\n    @SysLogHandler(subModel = SubModelType.ADMIN_OTHER_SETTINGS,behavior = BehaviorEnum.UPDATE)\n    public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting) {\n        AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n        if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n            return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n        }\n        adminConfig.setStatus(moduleSetting.getStatus());\n        adminConfigService.setModuleSetting(adminConfig);\n        return Result.ok();\n    }\n\n    @ApiOperation(value = \\\"\u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\\\")\n    @PostMapping(\\\"/setLogWelcomeSpeech\\\")\n    @SysLogHandler(subModel = SubModelType.ADMIN_OTHER_SETTINGS,behavior = BehaviorEnum.UPDATE,object = \\\"\u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\\\",detail = \\\"\u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\\\")\n    public Result setLogWelcomeSpeech(@Valid @RequestBody List<String> stringList) {\n        adminConfigService.setLogWelcomeSpeech(stringList);\n        return Result.ok();\n    }\n\n    /**\n     * \u83b7\u53d6\u65e5\u5fd7\u6b22\u8fce\u8bed\u5217\u8868\n     */\n    @ApiOperation(value = \\\"\u83b7\u53d6\u65e5\u5fd7\u6b22\u8fce\u8bed\\\")\n    @PostMapping(\\\"/getLogWelcomeSpeechList\\\")\n    public Result<List<LogWelcomeSpeechBO>> getLogWelcomeSpeechList() {\n        List<LogWelcomeSpeechBO> adminConfigs = adminConfigService.getLogWelcomeSpeechList();\n        return R.ok(adminConfigs);\n    }\n\n    /**\n     * \u5220\u9664\u914d\u7f6e\u6570\u636e\n     */\n    @ApiOperation(value = \\\"\u5220\u9664\u914d\u7f6e\u6570\u636e\\\")\n    @PostMapping(\\\"/deleteConfigById\\\")\n    public Result deleteConfigById(@RequestBody @ApiParam(name = \\\"settingId\\\", value = \\\"\u4e3b\u952eID\\\", required = true) Integer settingId) {\n        if (settingId == null) {\n            return R.error(AdminCodeEnum.ADMIN_DATA_EXIST_ERROR);\n        }\n        adminConfigService.removeById(settingId);\n        return R.ok();\n    }\n\n    /**\n     * \u67e5\u8be2\u547c\u53eb\u4e2d\u5fc3\u8bbe\u7f6e\n     */\n    @ApiOperation(value = \\\"\u67e5\u8be2\u624b\u673a\u7aef\u6a21\u5757\u8bbe\u7f6e\\\")\n    @PostMapping(\\\"/queryCallModuleSetting\\\")\n    public Result<ModuleSettingVO> queryCallModuleSetting() {\n        ModuleSettingVO moduleSettingVO = adminConfigService.queryCallModuleSetting();\n        return R.ok(moduleSettingVO);\n    }\n\n    @ApiOperation(value = \\\"\u67e5\u8be2\u81ea\u5b9a\u4e49\u914d\u7f6e\\\")\n    @PostMapping(\\\"/queryCustomSetting/{customKey}\\\")\n    public Result<JSONArray> queryCustomSetting(@PathVariable(\\\"customKey\\\") String customKey) {\n        AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(customKey);\n        if (userConfig == null) {\n            return Result.ok(new JSONArray());\n        }\n        return Result.ok(JSON.parseArray(userConfig.getValue()));\n    }\n\n    /**\n     * \u4fee\u6539\u624b\u673a\u7aef\u6a21\u5757\u8bbe\u7f6e\n     */\n\n    @ApiOperation(value = \\\"\u4fee\u6539\u81ea\u5b9a\u4e49\u914d\u7f6e\\\")\n    @PostMapping(\\\"/setCustomSetting/{customKey}\\\")\n\n\n", "CodeBleu_score": 15.9488599993167}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t,object = \\\"\u4f01\u4e1a\u9996\u9875\u914d\u7f6e\\\",detail = \\\"'\u4f01\u4e1a\u9996\u9875\u914d\u7f6e:'+#adminCompanyBO.companyName\\\")\n    public Result setAdminConfig(@RequestBody AdminCompanyBO adminCompanyBO) {\n        adminConfigService.setAdminConfig(adminCompanyBO);\n        return Result.ok();\n    }\n\n    /**\n     * \u67e5\u8be2\u4f01\u4e1a\u914d\u7f6e\n     *\n     * @return Result\n     * @author zhangzhiwei\n     */\n    @ApiOperation(value = \\\"\u67e5\u8be2\u4f01\u4e1a\u914d\u7f6e\\\")\n    @PostMapping(\\\"/queryAdminConfig\\\")\n    public Result<AdminCompanyBO> queryAdminConfig() {\n        return R.ok(adminConfigService.queryAdminConfig());\n    }\n\n\n    @ApiOperation(value = \\\"\u5934\u90e8\u8bbe\u7f6e\\\")\n    @PostMapping(\\\"/queryHeaderModelSort\\\")\n    public Result<List<String>> queryHeaderModelSort() {\n        List<AdminModelSort> list = adminModelSortService.lambdaQuery().select(AdminModelSort::getModel)\n                .eq(AdminModelSort::getType, 1)\n                .eq(AdminModelSort::getUserId, UserUtil.getUserId())\n                .list();\n        return Result.ok(list.stream().map(AdminModelSort::getModel).collect(Collectors.toList()));\n    }\n\n    @ApiOperation(value = \\\"\u5934\u90e8\u8bbe\u7f6e\\\")\n    @PostMapping(\\\"/setHeaderModelSort\\\")\n    public Result setHeaderModelSort(@RequestBody List<String> list) {\n        List<AdminModelSort> modelSortList = new ArrayList<>();\n        for (int i = 0; i < list.size(); i++) {\n            AdminModelSort adminModelSort = new AdminModelSort();\n            adminModelSort.setType(1).setModel(list.get(i)).setSort(i).setIsHidden(0).setUserId(UserUtil.getUserId());\n            modelSortList.add(adminModelSort);\n        }\n        LambdaQueryWrapper<AdminModelSort> wrapper = new LambdaQueryWrapper<>();\n        wrapper.eq(AdminModelSort::getType, 1).eq(AdminModelSort::getUserId, UserUtil.getUserId());\n        adminModelSortService.remove(wrapper);\n        adminModelSortService.saveBatch(modelSortList, Const.BATCH_SAVE_SIZE);\n        return R.ok();\n    }\n\n    @ApiOperation(value = \\\"\u8bbe\u7f6e\u6d3b\u52a8\u54a8\u8be2\u72b6\u6001\\\")\n    @PostMapping(\\\"/setMarketing\\\")\n    @SysLogHandler(applicationName = \\\"admin\\\",subModel = SubModelType.ADMIN_OTHER_SETTINGS,behavior = BehaviorEnum.UPDATE,object = \\\"\u6d3b\u52a8\u54a8\u8be2\u8bbe\u7f6e\\\",detail = \\\"\u6d3b\u52a8\u54a8\u8be2\u8bbe\u7f6e\\\")\n    public Result setMarketing(@RequestParam(\\\"status\\\") Integer status) {\n       adminConfigService.setMarketing(status);\n       return R.ok();\n    }\n\n\n    @ApiOperation(value = \\\"\u67e5\u8be2\u6d3b\u52a8\u54a8\u8be2\u72b6\u6001\\\")\n    @PostMapping(\\\"/queryMarketing\\\")\n    public Result queryMarketing() {\n        return R.ok(adminConfigService.queryMarketing());\n    }\n\n    /**\n     * \u67e5\u8be2\u4f01\u4e1a\u6a21\u5757\u914d\u7f6e\n     *\n     * @author zhangzhiwei\n     */\n    @ApiOperation(value = \\\"\u67e5\u8be2\u4f01\u4e1a\u6a21\u5757\u914d\u7f6e\\\")\n    @PostMapping(\\\"/queryModuleSetting\\\")\n    public Result<List<ModuleSettingVO>> queryModuleSetting() {\n        return R.ok(adminConfigService.queryModuleSetting());\n    }\n\n    /**\n     * \u8bbe\u7f6e\u4f01\u4e1a\u6a21\u5757\n     *\n     * @param moduleSetting data\n     */\n    @ApiOperation(value = \\\"\u8bbe\u7f6e\u4f01\u4e1a\u6a21\u5757\\\")\n    @PostMapping(\\\"/setModuleSetting\\\")\n    @SysLogHandler(subModel = SubModelType.ADMIN_OTHER_SETTINGS,behavior = BehaviorEnum.UPDATE)\n    public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting) {\n        AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n        if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n            return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n        }\n        adminConfig.setStatus(moduleSetting.getStatus());\n        adminConfigService.setModuleSetting(adminConfig);\n        return Result.ok();\n    }\n\n    @ApiOperation(value = \\\"\u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\\\")\n    @PostMapping(\\\"/setLogWelcomeSpeech\\\")\n    @SysLogHandler(subModel = SubModelType.ADMIN_OTHER_SETTINGS,behavior = BehaviorEnum.UPDATE,object = \\\"\u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\\\",detail = \\\"\u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\\\")\n    public Result setLogWelcomeSpeech(@Valid @RequestBody List<String> stringList) {\n        adminConfigService.setLogWelcomeSpeech(stringList);\n        return Result.ok();\n    }\n\n    /**\n     * \u83b7\u53d6\u65e5\u5fd7\u6b22\u8fce\u8bed\u5217\u8868\n     */\n    @ApiOperation(value = \\\"\u83b7\u53d6\u65e5\u5fd7\u6b22\u8fce\u8bed\\\")\n    @PostMapping(\\\"/getLogWelcomeSpeechList\\\")\n    public Result<List<LogWelcomeSpeechBO>> getLogWelcomeSpeechList() {\n        List<LogWelcomeSpeechBO> adminConfigs = adminConfigService.getLogWelcomeSpeechList();\n        return R.ok(adminConfigs);\n    }\n\n    /**\n     * \u5220\u9664\u914d\u7f6e\u6570\u636e\n     */\n    @ApiOperation(value = \\\"\u5220\u9664\u914d\u7f6e\u6570\u636e\\\")\n    @PostMapping(\\\"/deleteConfigById\\\")\n    public Result deleteConfigById(@RequestBody @ApiParam(name = \\\"settingId\\\", value = \\\"\u4e3b\u952eID\\\", required = true) Integer settingId) {\n        if (settingId == null) {\n            return R.error(AdminCodeEnum.ADMIN_DATA_EXIST_ERROR);\n        }\n        adminConfigService.removeById(settingId);\n        return R.ok();\n    }\n\n    /**\n     * \u67e5\u8be2\u547c\u53eb\u4e2d\u5fc3\u8bbe\u7f6e\n     */\n    @ApiOperation(value = \\\"\u67e5\u8be2\u624b\u673a\u7aef\u6a21\u5757\u8bbe\u7f6e\\\")\n    @PostMapping(\\\"/queryCallModuleSetting\\\")\n    public Result<ModuleSettingVO> queryCallModuleSetting() {\n        ModuleSettingVO moduleSettingVO = adminConfigService.queryCallModuleSetting();\n        return R.ok(moduleSettingVO);\n    }\n\n    @ApiOperation(value = \\\"\u67e5\u8be2\u81ea\u5b9a\u4e49\u914d\u7f6e\\\")\n    @PostMapping(\\\"/queryCustomSetting/{customKey}\\\")\n    public Result<JSONArray> queryCustomSetting(@PathVariable(\\\"customKey\\\") String customKey) {\n        AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(customKey);\n        if (userConfig == null) {\n            return Result.ok(new JSONArray());\n        }\n        return Result.ok(JSON.parseArray(userConfig.getValue()));\n    }\n\n    /**\n     * \u4fee\u6539\u624b\u673a\u7aef\u6a21\u5757\u8bbe\u7f6e\n     */\n\n    @ApiOperation(value = \\\"\u4fee\u6539\u81ea\u5b9a\u4e49\u914d\u7f6e\\\")\n    @PostMapping(\\\"/setCustomSetting/{customKey}\\\")\n\n\n", "CodeBleu_score": 15.9488599993167}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\n    }", "CodeBleu_score": 8.118169045421043}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\n    }", "CodeBleu_score": 8.118169045421043}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\n    }", "CodeBleu_score": 8.118169045421043}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t\n    public Result updateImg(@RequestParam(\\\"file\\\") MultipartFile file) throws IOException {\n        UploadEntity img = adminFileService.upload(file, null, \\\"img\\\", \\\"0\\\");\n        AdminUser byId = adminUserService.getById(UserUtil.getUserId());\n        byId.setImg(img.getUrl());\n        adminUserService.updateById(byId);\n        return R.ok();\n    }\n\n    @PostMapping(\\\"/updatePassword\\\")\n    @ApiOperation(\\\"\u4fee\u6539\u767b\u5f55\u5bc6\u7801\\\")\n    @SysLogHandler(behavior = BehaviorEnum.UPDATE,object = \\\"\u4fee\u6539\u767b\u5f55\u5bc6\u7801\\\",detail = \\\"\u4fee\u6539\u767b\u5f55\u5bc6\u7801\\\")\n    public Result updatePassword(@RequestParam(\\\"oldPwd\\\") String oldPass, @RequestParam(\\\"newPwd\\\") String newPass) {\n        AdminUser adminUser = adminUserService.getById(UserUtil.getUserId());\n        if (!UserUtil.verify(adminUser.getUsername() + oldPass, adminUser.getSalt(), adminUser.getPassword())) {\n            return R.error(AdminCodeEnum.ADMIN_PASSWORD_ERROR);\n        }\n        adminUser.setPassword(newPass);\n        return updateUser(adminUser);\n    }\n\n    @PostMapping(\\\"/updateUser\\\")\n    @ApiOperation(\\\"\u4fee\u6539\u7528\u6237\u4fe1\u606f\\\")\n    public Result updateUser(@RequestBody AdminUser adminUser) {\n        adminUserService.updateUser(adminUser);\n        return R.ok();\n    }\n\n    @Autowired\n    private IAdminDeptService deptService;\n\n    @PostMapping(\\\"/queryLoginUser\\\")\n    @ApiOperation(\\\"\u67e5\u8be2\u5f53\u524d\u767b\u5f55\u7528\u6237\\\")\n    public Result<AdminUserVO> queryLoginUser(HttpServletRequest request, HttpServletResponse response) {\n        String name = \\\"readNotice\\\";\n        AdminUser user = adminUserService.getById(UserUtil.getUserId());\n        if (user == null) {\n            throw new NoLoginException();\n        }\n        AdminSuperUserVo adminUser = BeanUtil.copyProperties(user, AdminSuperUserVo.class);\n        adminUser.setIsAdmin(UserUtil.isAdmin());\n        AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(name);\n        adminUser.setIsReadNotice(userConfig != null ? userConfig.getStatus() : 0);\n        adminUser.setPassword(null);\n        String deptName = deptService.getNameByDeptId(adminUser.getDeptId());\n        adminUser.setDeptName(deptName);\n        adminUser.setParentName(UserCacheUtil.getUserName(adminUser.getParentId()));\n        AdminConfig config = ApplicationContextHolder.getBean(IAdminConfigService.class).queryConfigByName(\\\"email\\\");\n        if (config != null && config.getStatus() == 1) {\n            Integer data = ApplicationContextHolder.getBean(EmailService.class).getEmailId(adminUser.getUserId()).getData();\n            adminUser.setEmailId(data);\n        }\n        AdminUserConfig userConfigByName = adminUserConfigService.queryUserConfigByName(\\\"InitUserConfig\\\");\n        if(userConfigByName != null){\n            adminUser.setServerUserInfo(JSON.parseObject(userConfigByName.getValue()));\n        }\n        return R.ok(adminUser);\n    }\n\n    @RequestMapping(\\\"/queryUserRoleIds\\\")\n    @ApiExplain(\\\"\u67e5\u8be2\u7528\u6237\u89d2\u8272\u5217\u8868\\\")\n    public Result<List<Integer>> queryUserRoleIds(@RequestParam(\\\"userId\\\") @NotNull Long userId) {\n        return R.ok(adminUserService.queryUserRoleIds(userId));\n    }\n\n    @RequestMapping(\\\"/queryListName\\\")\n    @ApiExplain(\\\"\u67e5\u8be2\u901a\u8baf\u5f55\\\")\n    public Result queryListName(@RequestBody UserBookBO userBookBO) {\n        return R.ok(adminUserService.queryListName(userBookBO));\n    }\n\n    @RequestMapping(\\\"/attention\\\")\n    @ApiExplain(\\\"\u5207\u6362\u5173\u6ce8\u72b6\u6001\\\")\n    public Result attention(@RequestParam(\\\"userId\\\") Long userId) {\n        adminUserService.attention(userId);\n        return R.ok();\n    }\n\n    @RequestMapping(\\\"/queryChildUserId\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u4e0b\u7684\u5b50\u7528\u6237\\\")\n    public Result<List<Long>> queryChildUserId(@NotNull Long userId) {\n        List<Long> longList = adminUserService.queryChildUserId(userId);\n        return R.ok(longList);\n    }\n\n    @RequestMapping(\\\"/queryUserInfo\\\")\n    @ApiOperation(\\\"\u67e5\u8be2\u7528\u6237\u4fe1\u606f\\\")\n    public Result<AdminUser> queryUserInfo(@RequestParam(\\\"userId\\\") Long userId) {\n        AdminUser byId = adminUserService.getById(userId);\n        String nameByDeptId = ApplicationContextHolder.getBean(IAdminDeptService.class).getNameByDeptId(byId.getDeptId());\n        byId.setDeptName(nameByDeptId);\n        byId.setSalt(null);\n        byId.setPassword(null);\n        return R.ok(byId);\n    }\n\n    @RequestMapping(\\\"/queryInfoByUserId\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u83b7\u53d6\u7528\u6237\\\")\n    public Result<UserInfo> queryInfoByUserId(@NotNull Long userId) {\n        AdminUser byId = adminUserService.getById(userId);\n        UserInfo userInfo = null;\n        if (byId != null) {\n            userInfo = BeanUtil.copyProperties(byId, UserInfo.class);\n            if(byId.getDeptId() != null) {\n                String nameByDeptId = UserCacheUtil.getDeptName(byId.getDeptId());\n                userInfo.setDeptName(nameByDeptId);\n            }\n            userInfo.setRoles(adminUserService.queryUserRoleIds(userInfo.getUserId()));\n        }\n        return R.ok(userInfo);\n    }\n\n    @PostMapping(\\\"/queryNormalUserByIds\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u83b7\u53d6\u6b63\u5e38\u7528\u6237\\\")\n    public Result<List<Long>> queryNormalUserByIds(@RequestBody List<Long> ids) {\n        return R.ok(adminUserService.queryNormalUserByIds(ids));\n    }\n\n\n    @PostMapping(\\\"/queryUserById\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u83b7\u53d6\u7528\u6237\\\")\n    public Result<SimpleUser> queryUserById(@RequestParam(\\\"userId\\\") Long userId) {\n        AdminUser adminUser = adminUserService.getById(userId);\n        if(adminUser != null) {\n            adminUser.setDeptName(deptService.getNameByDeptId(adminUser.getDeptId()));\n        }\n        return R.ok(BeanUtil.copyProperties(adminUser, SimpleUser.class));\n    }\n\n    @PostMapping(\\\"/queryUserByDeptIds\\\")\n    @ApiExplain(\\\"\u6839\u636e\u90e8\u95e8ID\u83b7\u53d6\u7528\u6237ids\\\")\n    public Result<List<Long>> queryUserByDeptIds(@RequestBody List<Integer> ids) {\n        List<Long> userIds = adminUserService.queryUserByDeptIds(ids);\n        return R.ok(userIds);\n    }\n\n    @PostMapping(\\\"/readNotice\\\")\n    @ApiOperation(\\\"\u8bbe\u7f6e\u66f4\u65b0\u65e5\u5fd7\u4e3a\u5df2\u8bfb\\\")\n\n\n", "CodeBleu_score": 5.349562264262071}, {"code": " public Result readNotice() {\n\t\n    public Result updateImg(@RequestParam(\\\"file\\\") MultipartFile file) throws IOException {\n        UploadEntity img = adminFileService.upload(file, null, \\\"img\\\", \\\"0\\\");\n        AdminUser byId = adminUserService.getById(UserUtil.getUserId());\n        byId.setImg(img.getUrl());\n        adminUserService.updateById(byId);\n        return R.ok();\n    }\n\n    @PostMapping(\\\"/updatePassword\\\")\n    @ApiOperation(\\\"\u4fee\u6539\u767b\u5f55\u5bc6\u7801\\\")\n    @SysLogHandler(behavior = BehaviorEnum.UPDATE,object = \\\"\u4fee\u6539\u767b\u5f55\u5bc6\u7801\\\",detail = \\\"\u4fee\u6539\u767b\u5f55\u5bc6\u7801\\\")\n    public Result updatePassword(@RequestParam(\\\"oldPwd\\\") String oldPass, @RequestParam(\\\"newPwd\\\") String newPass) {\n        AdminUser adminUser = adminUserService.getById(UserUtil.getUserId());\n        if (!UserUtil.verify(adminUser.getUsername() + oldPass, adminUser.getSalt(), adminUser.getPassword())) {\n            return R.error(AdminCodeEnum.ADMIN_PASSWORD_ERROR);\n        }\n        adminUser.setPassword(newPass);\n        return updateUser(adminUser);\n    }\n\n    @PostMapping(\\\"/updateUser\\\")\n    @ApiOperation(\\\"\u4fee\u6539\u7528\u6237\u4fe1\u606f\\\")\n    public Result updateUser(@RequestBody AdminUser adminUser) {\n        adminUserService.updateUser(adminUser);\n        return R.ok();\n    }\n\n    @Autowired\n    private IAdminDeptService deptService;\n\n    @PostMapping(\\\"/queryLoginUser\\\")\n    @ApiOperation(\\\"\u67e5\u8be2\u5f53\u524d\u767b\u5f55\u7528\u6237\\\")\n    public Result<AdminUserVO> queryLoginUser(HttpServletRequest request, HttpServletResponse response) {\n        String name = \\\"readNotice\\\";\n        AdminUser user = adminUserService.getById(UserUtil.getUserId());\n        if (user == null) {\n            throw new NoLoginException();\n        }\n        AdminSuperUserVo adminUser = BeanUtil.copyProperties(user, AdminSuperUserVo.class);\n        adminUser.setIsAdmin(UserUtil.isAdmin());\n        AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(name);\n        adminUser.setIsReadNotice(userConfig != null ? userConfig.getStatus() : 0);\n        adminUser.setPassword(null);\n        String deptName = deptService.getNameByDeptId(adminUser.getDeptId());\n        adminUser.setDeptName(deptName);\n        adminUser.setParentName(UserCacheUtil.getUserName(adminUser.getParentId()));\n        AdminConfig config = ApplicationContextHolder.getBean(IAdminConfigService.class).queryConfigByName(\\\"email\\\");\n        if (config != null && config.getStatus() == 1) {\n            Integer data = ApplicationContextHolder.getBean(EmailService.class).getEmailId(adminUser.getUserId()).getData();\n            adminUser.setEmailId(data);\n        }\n        AdminUserConfig userConfigByName = adminUserConfigService.queryUserConfigByName(\\\"InitUserConfig\\\");\n        if(userConfigByName != null){\n            adminUser.setServerUserInfo(JSON.parseObject(userConfigByName.getValue()));\n        }\n        return R.ok(adminUser);\n    }\n\n    @RequestMapping(\\\"/queryUserRoleIds\\\")\n    @ApiExplain(\\\"\u67e5\u8be2\u7528\u6237\u89d2\u8272\u5217\u8868\\\")\n    public Result<List<Integer>> queryUserRoleIds(@RequestParam(\\\"userId\\\") @NotNull Long userId) {\n        return R.ok(adminUserService.queryUserRoleIds(userId));\n    }\n\n    @RequestMapping(\\\"/queryListName\\\")\n    @ApiExplain(\\\"\u67e5\u8be2\u901a\u8baf\u5f55\\\")\n    public Result queryListName(@RequestBody UserBookBO userBookBO) {\n        return R.ok(adminUserService.queryListName(userBookBO));\n    }\n\n    @RequestMapping(\\\"/attention\\\")\n    @ApiExplain(\\\"\u5207\u6362\u5173\u6ce8\u72b6\u6001\\\")\n    public Result attention(@RequestParam(\\\"userId\\\") Long userId) {\n        adminUserService.attention(userId);\n        return R.ok();\n    }\n\n    @RequestMapping(\\\"/queryChildUserId\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u4e0b\u7684\u5b50\u7528\u6237\\\")\n    public Result<List<Long>> queryChildUserId(@NotNull Long userId) {\n        List<Long> longList = adminUserService.queryChildUserId(userId);\n        return R.ok(longList);\n    }\n\n    @RequestMapping(\\\"/queryUserInfo\\\")\n    @ApiOperation(\\\"\u67e5\u8be2\u7528\u6237\u4fe1\u606f\\\")\n    public Result<AdminUser> queryUserInfo(@RequestParam(\\\"userId\\\") Long userId) {\n        AdminUser byId = adminUserService.getById(userId);\n        String nameByDeptId = ApplicationContextHolder.getBean(IAdminDeptService.class).getNameByDeptId(byId.getDeptId());\n        byId.setDeptName(nameByDeptId);\n        byId.setSalt(null);\n        byId.setPassword(null);\n        return R.ok(byId);\n    }\n\n    @RequestMapping(\\\"/queryInfoByUserId\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u83b7\u53d6\u7528\u6237\\\")\n    public Result<UserInfo> queryInfoByUserId(@NotNull Long userId) {\n        AdminUser byId = adminUserService.getById(userId);\n        UserInfo userInfo = null;\n        if (byId != null) {\n            userInfo = BeanUtil.copyProperties(byId, UserInfo.class);\n            if(byId.getDeptId() != null) {\n                String nameByDeptId = UserCacheUtil.getDeptName(byId.getDeptId());\n                userInfo.setDeptName(nameByDeptId);\n            }\n            userInfo.setRoles(adminUserService.queryUserRoleIds(userInfo.getUserId()));\n        }\n        return R.ok(userInfo);\n    }\n\n    @PostMapping(\\\"/queryNormalUserByIds\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u83b7\u53d6\u6b63\u5e38\u7528\u6237\\\")\n    public Result<List<Long>> queryNormalUserByIds(@RequestBody List<Long> ids) {\n        return R.ok(adminUserService.queryNormalUserByIds(ids));\n    }\n\n\n    @PostMapping(\\\"/queryUserById\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u83b7\u53d6\u7528\u6237\\\")\n    public Result<SimpleUser> queryUserById(@RequestParam(\\\"userId\\\") Long userId) {\n        AdminUser adminUser = adminUserService.getById(userId);\n        if(adminUser != null) {\n            adminUser.setDeptName(deptService.getNameByDeptId(adminUser.getDeptId()));\n        }\n        return R.ok(BeanUtil.copyProperties(adminUser, SimpleUser.class));\n    }\n\n    @PostMapping(\\\"/queryUserByDeptIds\\\")\n    @ApiExplain(\\\"\u6839\u636e\u90e8\u95e8ID\u83b7\u53d6\u7528\u6237ids\\\")\n    public Result<List<Long>> queryUserByDeptIds(@RequestBody List<Integer> ids) {\n        List<Long> userIds = adminUserService.queryUserByDeptIds(ids);\n        return R.ok(userIds);\n    }\n\n    @PostMapping(\\\"/readNotice\\\")\n    @ApiOperation(\\\"\u8bbe\u7f6e\u66f4\u65b0\u65e5\u5fd7\u4e3a\u5df2\u8bfb\\\")\n\n\n", "CodeBleu_score": 5.349562264262071}, {"code": " public Result readNotice() {\n\t\n    public Result updateImg(@RequestParam(\\\"file\\\") MultipartFile file) throws IOException {\n        UploadEntity img = adminFileService.upload(file, null, \\\"img\\\", \\\"0\\\");\n        AdminUser byId = adminUserService.getById(UserUtil.getUserId());\n        byId.setImg(img.getUrl());\n        adminUserService.updateById(byId);\n        return R.ok();\n    }\n\n    @PostMapping(\\\"/updatePassword\\\")\n    @ApiOperation(\\\"\u4fee\u6539\u767b\u5f55\u5bc6\u7801\\\")\n    @SysLogHandler(behavior = BehaviorEnum.UPDATE,object = \\\"\u4fee\u6539\u767b\u5f55\u5bc6\u7801\\\",detail = \\\"\u4fee\u6539\u767b\u5f55\u5bc6\u7801\\\")\n    public Result updatePassword(@RequestParam(\\\"oldPwd\\\") String oldPass, @RequestParam(\\\"newPwd\\\") String newPass) {\n        AdminUser adminUser = adminUserService.getById(UserUtil.getUserId());\n        if (!UserUtil.verify(adminUser.getUsername() + oldPass, adminUser.getSalt(), adminUser.getPassword())) {\n            return R.error(AdminCodeEnum.ADMIN_PASSWORD_ERROR);\n        }\n        adminUser.setPassword(newPass);\n        return updateUser(adminUser);\n    }\n\n    @PostMapping(\\\"/updateUser\\\")\n    @ApiOperation(\\\"\u4fee\u6539\u7528\u6237\u4fe1\u606f\\\")\n    public Result updateUser(@RequestBody AdminUser adminUser) {\n        adminUserService.updateUser(adminUser);\n        return R.ok();\n    }\n\n    @Autowired\n    private IAdminDeptService deptService;\n\n    @PostMapping(\\\"/queryLoginUser\\\")\n    @ApiOperation(\\\"\u67e5\u8be2\u5f53\u524d\u767b\u5f55\u7528\u6237\\\")\n    public Result<AdminUserVO> queryLoginUser(HttpServletRequest request, HttpServletResponse response) {\n        String name = \\\"readNotice\\\";\n        AdminUser user = adminUserService.getById(UserUtil.getUserId());\n        if (user == null) {\n            throw new NoLoginException();\n        }\n        AdminSuperUserVo adminUser = BeanUtil.copyProperties(user, AdminSuperUserVo.class);\n        adminUser.setIsAdmin(UserUtil.isAdmin());\n        AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(name);\n        adminUser.setIsReadNotice(userConfig != null ? userConfig.getStatus() : 0);\n        adminUser.setPassword(null);\n        String deptName = deptService.getNameByDeptId(adminUser.getDeptId());\n        adminUser.setDeptName(deptName);\n        adminUser.setParentName(UserCacheUtil.getUserName(adminUser.getParentId()));\n        AdminConfig config = ApplicationContextHolder.getBean(IAdminConfigService.class).queryConfigByName(\\\"email\\\");\n        if (config != null && config.getStatus() == 1) {\n            Integer data = ApplicationContextHolder.getBean(EmailService.class).getEmailId(adminUser.getUserId()).getData();\n            adminUser.setEmailId(data);\n        }\n        AdminUserConfig userConfigByName = adminUserConfigService.queryUserConfigByName(\\\"InitUserConfig\\\");\n        if(userConfigByName != null){\n            adminUser.setServerUserInfo(JSON.parseObject(userConfigByName.getValue()));\n        }\n        return R.ok(adminUser);\n    }\n\n    @RequestMapping(\\\"/queryUserRoleIds\\\")\n    @ApiExplain(\\\"\u67e5\u8be2\u7528\u6237\u89d2\u8272\u5217\u8868\\\")\n    public Result<List<Integer>> queryUserRoleIds(@RequestParam(\\\"userId\\\") @NotNull Long userId) {\n        return R.ok(adminUserService.queryUserRoleIds(userId));\n    }\n\n    @RequestMapping(\\\"/queryListName\\\")\n    @ApiExplain(\\\"\u67e5\u8be2\u901a\u8baf\u5f55\\\")\n    public Result queryListName(@RequestBody UserBookBO userBookBO) {\n        return R.ok(adminUserService.queryListName(userBookBO));\n    }\n\n    @RequestMapping(\\\"/attention\\\")\n    @ApiExplain(\\\"\u5207\u6362\u5173\u6ce8\u72b6\u6001\\\")\n    public Result attention(@RequestParam(\\\"userId\\\") Long userId) {\n        adminUserService.attention(userId);\n        return R.ok();\n    }\n\n    @RequestMapping(\\\"/queryChildUserId\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u4e0b\u7684\u5b50\u7528\u6237\\\")\n    public Result<List<Long>> queryChildUserId(@NotNull Long userId) {\n        List<Long> longList = adminUserService.queryChildUserId(userId);\n        return R.ok(longList);\n    }\n\n    @RequestMapping(\\\"/queryUserInfo\\\")\n    @ApiOperation(\\\"\u67e5\u8be2\u7528\u6237\u4fe1\u606f\\\")\n    public Result<AdminUser> queryUserInfo(@RequestParam(\\\"userId\\\") Long userId) {\n        AdminUser byId = adminUserService.getById(userId);\n        String nameByDeptId = ApplicationContextHolder.getBean(IAdminDeptService.class).getNameByDeptId(byId.getDeptId());\n        byId.setDeptName(nameByDeptId);\n        byId.setSalt(null);\n        byId.setPassword(null);\n        return R.ok(byId);\n    }\n\n    @RequestMapping(\\\"/queryInfoByUserId\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u83b7\u53d6\u7528\u6237\\\")\n    public Result<UserInfo> queryInfoByUserId(@NotNull Long userId) {\n        AdminUser byId = adminUserService.getById(userId);\n        UserInfo userInfo = null;\n        if (byId != null) {\n            userInfo = BeanUtil.copyProperties(byId, UserInfo.class);\n            if(byId.getDeptId() != null) {\n                String nameByDeptId = UserCacheUtil.getDeptName(byId.getDeptId());\n                userInfo.setDeptName(nameByDeptId);\n            }\n            userInfo.setRoles(adminUserService.queryUserRoleIds(userInfo.getUserId()));\n        }\n        return R.ok(userInfo);\n    }\n\n    @PostMapping(\\\"/queryNormalUserByIds\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u83b7\u53d6\u6b63\u5e38\u7528\u6237\\\")\n    public Result<List<Long>> queryNormalUserByIds(@RequestBody List<Long> ids) {\n        return R.ok(adminUserService.queryNormalUserByIds(ids));\n    }\n\n\n    @PostMapping(\\\"/queryUserById\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u83b7\u53d6\u7528\u6237\\\")\n    public Result<SimpleUser> queryUserById(@RequestParam(\\\"userId\\\") Long userId) {\n        AdminUser adminUser = adminUserService.getById(userId);\n        if(adminUser != null) {\n            adminUser.setDeptName(deptService.getNameByDeptId(adminUser.getDeptId()));\n        }\n        return R.ok(BeanUtil.copyProperties(adminUser, SimpleUser.class));\n    }\n\n    @PostMapping(\\\"/queryUserByDeptIds\\\")\n    @ApiExplain(\\\"\u6839\u636e\u90e8\u95e8ID\u83b7\u53d6\u7528\u6237ids\\\")\n    public Result<List<Long>> queryUserByDeptIds(@RequestBody List<Integer> ids) {\n        List<Long> userIds = adminUserService.queryUserByDeptIds(ids);\n        return R.ok(userIds);\n    }\n\n    @PostMapping(\\\"/readNotice\\\")\n    @ApiOperation(\\\"\u8bbe\u7f6e\u66f4\u65b0\u65e5\u5fd7\u4e3a\u5df2\u8bfb\\\")\n\n\n", "CodeBleu_score": 5.349562264262071}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\tAdminConfig adminConfig = queryConfigByName(AdminConst.COMPANY_INFO);\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(AdminConst.COMPANY_INFO);\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        save(adminConfig);\n    } else {\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        updateById(adminConfig);\n    }\n}", "CodeBleu_score": 44.45322861886202}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t// \u67e5\u8be2\u914d\u7f6e\u4fe1\u606f\n    List<AdminConfig> adminConfigs = queryConfigListByName(AdminConst.COMPANY_INFO);\n    AdminConfig adminConfig;\n    if (CollUtil.isNotEmpty(adminConfigs)) {\n        adminConfig = adminConfigs.get(0);\n    } else {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(AdminConst.COMPANY_INFO);\n        adminConfig.setValue(JSON.toJSONString(new AdminCompanyBO()));\n    }\n\n    // \u8bbe\u7f6e\u914d\u7f6e\u4fe1\u606f\n    BeanUtil.copyProperties(adminCompanyBO, adminConfig, \"id\", \"createTime\", \"updateTime\");\n\n    // \u4fdd\u5b58\u6216\u66f4\u65b0\u914d\u7f6e\u4fe1\u606f\n    saveOrUpdate(adminConfig);\n}", "CodeBleu_score": 41.74358745588567}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\tString companyInfo = \"companyInfo\";\n    List<AdminConfig> adminConfigList = queryConfigListByName(companyInfo);\n    if (CollUtil.isEmpty(adminConfigList)) {\n        AdminConfig adminConfig = new AdminConfig();\n        adminConfig.setName(companyInfo);\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        adminConfig.setRemark(\"\u4f01\u4e1a\u4fe1\u606f\");\n        save(adminConfig);\n    } else {\n        AdminConfig adminConfig = adminConfigList.get(0);\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        updateById(adminConfig);\n    }\n}", "CodeBleu_score": 45.44241111600339}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\tString companyKey = \"companyInfo\";\n    AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\" limit 1\").one();\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(companyKey);\n        adminConfig.setStatus(1);\n        adminConfig.setDescription(\"\u4f01\u4e1aLOGO\u914d\u7f6e\");\n    }\n    adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n    saveOrUpdate(adminConfig);\n}", "CodeBleu_score": 57.56580048854932}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\tString companyKey = \"companyInfo\";\n    AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\" limit 1\").one();\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(companyKey);\n        adminConfig.setStatus(1);\n        adminConfig.setDescription(\"\u4f01\u4e1aLOGO\u914d\u7f6e\");\n    }\n    adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n    saveOrUpdate(adminConfig);\n}", "CodeBleu_score": 57.56580048854932}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\tString companyKey = \"companyInfo\";\n    AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\" limit 1\").one();\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(companyKey);\n        adminConfig.setStatus(1);\n        adminConfig.setDescription(\"\u4f01\u4e1aLOGO\u914d\u7f6e\");\n    }\n    adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n    saveOrUpdate(adminConfig);\n}", "CodeBleu_score": 57.56580048854932}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\tList<AdminConfig> adminConfigList = new ArrayList<>();\n        stringList.forEach(str -> {\n            AdminConfig adminConfig = new AdminConfig();\n            adminConfig.setName(logConfigName);\n            adminConfig.setValue(str);\n            adminConfig.setStatus(1);\n            adminConfig.setDescription(\"\u65e5\u5fd7\u6b22\u8fce\u8bed\");\n            adminConfigList.add(adminConfig);\n        });\n        lambdaUpdate().eq(AdminConfig::getName, logConfigName).remove();\n        saveBatch(adminConfigList);\n    }", "CodeBleu_score": 47.89775188501194}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t// Create a list of AdminConfig objects from the list of strings\n        List<AdminConfig> adminConfigList = stringList.stream().map(string -> {\n            AdminConfig adminConfig = new AdminConfig();\n            adminConfig.setName(logConfigName);\n            adminConfig.setValue(string);\n            adminConfig.setDescription(\"\u65e5\u5fd7\u6b22\u8fce\u8bed\");\n            adminConfig.setStatus(1);\n            return adminConfig;\n        }).collect(Collectors.toList());\n        // Remove existing configurations with the specified log configuration name\n        lambdaUpdate().eq(AdminConfig::getName, logConfigName).remove();\n        // Save the new list of configurations in batch\n        saveBatch(adminConfigList);\n    }", "CodeBleu_score": 43.681874530678975}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\tList<AdminConfig> adminConfigList = new ArrayList<>();\n        stringList.forEach(string -> {\n            AdminConfig adminConfig = new AdminConfig();\n            adminConfig.setName(logConfigName);\n            adminConfig.setStatus(1);\n            adminConfig.setDescription(string);\n            adminConfig.setValue(String.valueOf(RandomUtil.randomInt(10000000, 99999999)));\n            adminConfigList.add(adminConfig);\n        });\n        remove(new QueryWrapper<AdminConfig>().eq(\"name\", logConfigName));\n        saveBatch(adminConfigList);\n    }", "CodeBleu_score": 42.96592742342368}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\tService jxcExamineService;\n\n    /**\n     * \u901a\u8fc7name\u67e5\u8be2\u7cfb\u7edf\u914d\u7f6e\n     *\n     * @param names names\n     * @return adminConfig\n     */\n    @Override\n    public List<AdminConfig> queryConfigListByName(Object... names) {\n        return query().in(\\\"name\\\", names).list();\n    }\n\n    /**\n     * \u8bbe\u7f6e\u4f01\u4e1a\u914d\u7f6e\n     *\n     */\n    @Override\n    public void setAdminConfig(AdminCompanyBO adminCompanyBO) {\n        String companyKey = \\\"companyInfo\\\";\n        AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\\\" limit 1\\\").one();\n        if (adminConfig == null) {\n            adminConfig = new AdminConfig();\n            adminConfig.setName(companyKey);\n            adminConfig.setStatus(1);\n            adminConfig.setDescription(\\\"\u4f01\u4e1aLOGO\u914d\u7f6e\\\");\n        }\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        saveOrUpdate(adminConfig);\n    }\n\n    /**\n     * \u67e5\u8be2\u4f01\u4e1a\u914d\u7f6e\n     *\n     * @return adminCompanyBO\n     */\n    @Override\n    public AdminCompanyBO queryAdminConfig() {\n        String companyKey = \\\"companyInfo\\\";\n        AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\\\" limit 1\\\").one();\n        AdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n        if (adminConfig != null) {\n            adminCompanyBO = JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n        }\n        return adminCompanyBO;\n    }\n\n    /**\n     * \u67e5\u8be2\u6a21\u5757\u8bbe\u7f6e\n     *\n     * @return data\n     */\n    @Override\n    public List<ModuleSettingVO> queryModuleSetting() {\n        List<AdminConfig> adminConfigList = queryConfigListByName((Object[]) AdminModuleEnum.getValues());\n        List<ModuleSettingVO> moduleSettingList = new ArrayList<>();\n        adminConfigList.forEach(adminConfig -> {\n            ModuleSettingVO moduleSettingVO = new ModuleSettingVO();\n            moduleSettingVO.setSettingId(adminConfig.getSettingId());\n            moduleSettingVO.setModule(adminConfig.getName());\n            moduleSettingVO.setStatus(adminConfig.getStatus());\n            moduleSettingVO.setType(adminConfig.getValue());\n            moduleSettingVO.setName(adminConfig.getDescription());\n            moduleSettingList.add(moduleSettingVO);\n        });\n        return moduleSettingList;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u6a21\u5757\u7684\u7981\u7528\u542f\u7528\n     *\n     * @param adminConfig data\n     */\n    @Override\n    public void setModuleSetting(AdminConfig adminConfig) {\n        updateById(adminConfig);\n        //\u67e5\u8be2\u4f01\u4e1a\u7528\u6237\uff0c\u5c06\u4f01\u4e1a\u7528\u6237\u7684\u6743\u9650\u7f13\u5b58\u6e05\u9664\uff0c\u91cd\u65b0\u8ba1\u7b97\n        List<AdminUserVO> userList = adminUserService.queryUserList(null).getRecords();\n        //\u6e05\u9664\u7f13\u5b58\n        adminRoleService.authInvalidate(userList.stream().map(AdminUserVO::getUserId).collect(Collectors.toList()));\n    }\n\n    /**\n     * \u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\n     *\n     * @param stringList data\n     */\n    @Override\n    public void setLogWelcomeSpeech(List<String> stringList) {\n        List<AdminConfig> configList = new ArrayList<>();\n        stringList.forEach(str -> {\n            AdminConfig config = new AdminConfig();\n            config.setName(logConfigName);\n            config.setValue(str);\n            config.setStatus(1);\n            configList.add(config);\n        });\n        QueryWrapper<AdminConfig> queryWrapper = new QueryWrapper<>();\n        queryWrapper.eq(\\\"name\\\", logConfigName);\n        remove(queryWrapper);\n        saveBatch(configList, AdminConst.BATCH_SAVE_SIZE);\n    }\n\n    /**\n     * \u67e5\u8be2\u65e5\u5fd7\u6b22\u8fce\u8bed\n     *\n     * @return data\n     */\n    @Override\n    public List<LogWelcomeSpeechBO> getLogWelcomeSpeechList() {\n        List<AdminConfig> adminConfigList = query().select(\\\"setting_id\\\", \\\"value\\\").eq(\\\"name\\\", logConfigName).list();\n        return adminConfigList.stream().map(adminConfig -> BeanUtil.copyProperties(adminConfig, LogWelcomeSpeechBO.class)).collect(Collectors.toList());\n    }\n\n    /**\n     * \u6839\u636e\u540d\u79f0\u67e5\u8be2\u914d\u7f6e\u4fe1\u606f\n     *\n     * @param name\n     * @return data\n     */\n    @Override\n    public AdminConfig queryConfigByName(String name) {\n        return query().in(\\\"name\\\", name).last(\\\" limit 1\\\").one();\n    }\n\n    /**\n     * \u67e5\u8be2\u547c\u53eb\u4e2d\u5fc3\u8bbe\u7f6e\n     *\n     * @return data\n     */\n    @Override\n    public ModuleSettingVO queryCallModuleSetting() {\n        AdminConfig adminConfig = queryConfigByName(AdminModuleEnum.CALL.getValue());\n        ModuleSettingVO moduleSettingVO = new ModuleSettingVO();\n        moduleSettingVO.setSettingId(adminConfig.getSettingId());\n        moduleSettingVO.setModule(adminConfig.getName());\n        moduleSettingVO.setStatus(adminConfig.getStatus());\n        moduleSettingVO.setType(adminConfig.getValue());\n        moduleSettingVO.setName(adminConfig.getDescription());\n        return moduleSettingVO;\n    }\n\n\n    @Override\n    public void updateAdminConfig(AdminConfig adminConfig) {\n        saveOrUpdate(adminConfig);\n    }\n\n    @Override\n    public AdminConfig queryFirstConfigByNameAndValue(String name, String value) {\n        return lambdaQuery().eq(AdminConfig::getName, name).eq(AdminConfig::getValue, value).one();\n    }\n\n    @Override\n    public void setMarketing(Integer status) {\n        String name = \\\"marketing\\\";\n        AdminConfig adminConfig = this.lambdaQuery().eq(AdminConfig::getName, name).last(\\\" limit 1\\\").one();\n        if (adminConfig == null) {\n            AdminConfig config = new AdminConfig();\n            config.setName(name);\n            config.setStatus(Objects.equals(1, status) ? 1 : 0);\n            config.setDescription(\\\"\u662f\u5426\u5f00\u542f\u8425\u9500\u6d3b\u52a8\\\");\n            this.save(config);\n        } else {\n            adminConfig.setStatus(Objects.equals(1, status) ? 1 : 0);\n            this.updateById(adminConfig);\n        }\n    }\n\n    @Override\n    public Integer queryMarketing() {\n        String name = \\\"marketing\\\";\n        AdminConfig adminConfig = this.lambdaQuery().eq(AdminConfig::getName, name).last(\\\" limit 1\\\").one();\n        if (adminConfig == null) {\n            adminConfig = new AdminConfig();\n            adminConfig.setName(name);\n            adminConfig.setStatus(1);\n            adminConfig.setDescription(\\\"\u662f\u5426\u5f00\u542f\u8425\u9500\u6d3b\u52a8\\\");\n            this.save(adminConfig);\n        }\n        return adminConfig.getStatus();\n    }\n\n    @Override\n\n\n", "CodeBleu_score": 8.811558815875008}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\tService jxcExamineService;\n\n    /**\n     * \u901a\u8fc7name\u67e5\u8be2\u7cfb\u7edf\u914d\u7f6e\n     *\n     * @param names names\n     * @return adminConfig\n     */\n    @Override\n    public List<AdminConfig> queryConfigListByName(Object... names) {\n        return query().in(\\\"name\\\", names).list();\n    }\n\n    /**\n     * \u8bbe\u7f6e\u4f01\u4e1a\u914d\u7f6e\n     *\n     */\n    @Override\n    public void setAdminConfig(AdminCompanyBO adminCompanyBO) {\n        String companyKey = \\\"companyInfo\\\";\n        AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\\\" limit 1\\\").one();\n        if (adminConfig == null) {\n            adminConfig = new AdminConfig();\n            adminConfig.setName(companyKey);\n            adminConfig.setStatus(1);\n            adminConfig.setDescription(\\\"\u4f01\u4e1aLOGO\u914d\u7f6e\\\");\n        }\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        saveOrUpdate(adminConfig);\n    }\n\n    /**\n     * \u67e5\u8be2\u4f01\u4e1a\u914d\u7f6e\n     *\n     * @return adminCompanyBO\n     */\n    @Override\n    public AdminCompanyBO queryAdminConfig() {\n        String companyKey = \\\"companyInfo\\\";\n        AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\\\" limit 1\\\").one();\n        AdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n        if (adminConfig != null) {\n            adminCompanyBO = JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n        }\n        return adminCompanyBO;\n    }\n\n    /**\n     * \u67e5\u8be2\u6a21\u5757\u8bbe\u7f6e\n     *\n     * @return data\n     */\n    @Override\n    public List<ModuleSettingVO> queryModuleSetting() {\n        List<AdminConfig> adminConfigList = queryConfigListByName((Object[]) AdminModuleEnum.getValues());\n        List<ModuleSettingVO> moduleSettingList = new ArrayList<>();\n        adminConfigList.forEach(adminConfig -> {\n            ModuleSettingVO moduleSettingVO = new ModuleSettingVO();\n            moduleSettingVO.setSettingId(adminConfig.getSettingId());\n            moduleSettingVO.setModule(adminConfig.getName());\n            moduleSettingVO.setStatus(adminConfig.getStatus());\n            moduleSettingVO.setType(adminConfig.getValue());\n            moduleSettingVO.setName(adminConfig.getDescription());\n            moduleSettingList.add(moduleSettingVO);\n        });\n        return moduleSettingList;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u6a21\u5757\u7684\u7981\u7528\u542f\u7528\n     *\n     * @param adminConfig data\n     */\n    @Override\n    public void setModuleSetting(AdminConfig adminConfig) {\n        updateById(adminConfig);\n        //\u67e5\u8be2\u4f01\u4e1a\u7528\u6237\uff0c\u5c06\u4f01\u4e1a\u7528\u6237\u7684\u6743\u9650\u7f13\u5b58\u6e05\u9664\uff0c\u91cd\u65b0\u8ba1\u7b97\n        List<AdminUserVO> userList = adminUserService.queryUserList(null).getRecords();\n        //\u6e05\u9664\u7f13\u5b58\n        adminRoleService.authInvalidate(userList.stream().map(AdminUserVO::getUserId).collect(Collectors.toList()));\n    }\n\n    /**\n     * \u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\n     *\n     * @param stringList data\n     */\n    @Override\n    public void setLogWelcomeSpeech(List<String> stringList) {\n        List<AdminConfig> configList = new ArrayList<>();\n        stringList.forEach(str -> {\n            AdminConfig config = new AdminConfig();\n            config.setName(logConfigName);\n            config.setValue(str);\n            config.setStatus(1);\n            configList.add(config);\n        });\n        QueryWrapper<AdminConfig> queryWrapper = new QueryWrapper<>();\n        queryWrapper.eq(\\\"name\\\", logConfigName);\n        remove(queryWrapper);\n        saveBatch(configList, AdminConst.BATCH_SAVE_SIZE);\n    }\n\n    /**\n     * \u67e5\u8be2\u65e5\u5fd7\u6b22\u8fce\u8bed\n     *\n     * @return data\n     */\n    @Override\n    public List<LogWelcomeSpeechBO> getLogWelcomeSpeechList() {\n        List<AdminConfig> adminConfigList = query().select(\\\"setting_id\\\", \\\"value\\\").eq(\\\"name\\\", logConfigName).list();\n        return adminConfigList.stream().map(adminConfig -> BeanUtil.copyProperties(adminConfig, LogWelcomeSpeechBO.class)).collect(Collectors.toList());\n    }\n\n    /**\n     * \u6839\u636e\u540d\u79f0\u67e5\u8be2\u914d\u7f6e\u4fe1\u606f\n     *\n     * @param name\n     * @return data\n     */\n    @Override\n    public AdminConfig queryConfigByName(String name) {\n        return query().in(\\\"name\\\", name).last(\\\" limit 1\\\").one();\n    }\n\n    /**\n     * \u67e5\u8be2\u547c\u53eb\u4e2d\u5fc3\u8bbe\u7f6e\n     *\n     * @return data\n     */\n    @Override\n    public ModuleSettingVO queryCallModuleSetting() {\n        AdminConfig adminConfig = queryConfigByName(AdminModuleEnum.CALL.getValue());\n        ModuleSettingVO moduleSettingVO = new ModuleSettingVO();\n        moduleSettingVO.setSettingId(adminConfig.getSettingId());\n        moduleSettingVO.setModule(adminConfig.getName());\n        moduleSettingVO.setStatus(adminConfig.getStatus());\n        moduleSettingVO.setType(adminConfig.getValue());\n        moduleSettingVO.setName(adminConfig.getDescription());\n        return moduleSettingVO;\n    }\n\n\n    @Override\n    public void updateAdminConfig(AdminConfig adminConfig) {\n        saveOrUpdate(adminConfig);\n    }\n\n    @Override\n    public AdminConfig queryFirstConfigByNameAndValue(String name, String value) {\n        return lambdaQuery().eq(AdminConfig::getName, name).eq(AdminConfig::getValue, value).one();\n    }\n\n    @Override\n    public void setMarketing(Integer status) {\n        String name = \\\"marketing\\\";\n        AdminConfig adminConfig = this.lambdaQuery().eq(AdminConfig::getName, name).last(\\\" limit 1\\\").one();\n        if (adminConfig == null) {\n            AdminConfig config = new AdminConfig();\n            config.setName(name);\n            config.setStatus(Objects.equals(1, status) ? 1 : 0);\n            config.setDescription(\\\"\u662f\u5426\u5f00\u542f\u8425\u9500\u6d3b\u52a8\\\");\n            this.save(config);\n        } else {\n            adminConfig.setStatus(Objects.equals(1, status) ? 1 : 0);\n            this.updateById(adminConfig);\n        }\n    }\n\n    @Override\n    public Integer queryMarketing() {\n        String name = \\\"marketing\\\";\n        AdminConfig adminConfig = this.lambdaQuery().eq(AdminConfig::getName, name).last(\\\" limit 1\\\").one();\n        if (adminConfig == null) {\n            adminConfig = new AdminConfig();\n            adminConfig.setName(name);\n            adminConfig.setStatus(1);\n            adminConfig.setDescription(\\\"\u662f\u5426\u5f00\u542f\u8425\u9500\u6d3b\u52a8\\\");\n            this.save(adminConfig);\n        }\n        return adminConfig.getStatus();\n    }\n\n    @Override\n\n\n", "CodeBleu_score": 8.811558815875008}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\tService jxcExamineService;\n\n    /**\n     * \u901a\u8fc7name\u67e5\u8be2\u7cfb\u7edf\u914d\u7f6e\n     *\n     * @param names names\n     * @return adminConfig\n     */\n    @Override\n    public List<AdminConfig> queryConfigListByName(Object... names) {\n        return query().in(\\\"name\\\", names).list();\n    }\n\n    /**\n     * \u8bbe\u7f6e\u4f01\u4e1a\u914d\u7f6e\n     *\n     */\n    @Override\n    public void setAdminConfig(AdminCompanyBO adminCompanyBO) {\n        String companyKey = \\\"companyInfo\\\";\n        AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\\\" limit 1\\\").one();\n        if (adminConfig == null) {\n            adminConfig = new AdminConfig();\n            adminConfig.setName(companyKey);\n            adminConfig.setStatus(1);\n            adminConfig.setDescription(\\\"\u4f01\u4e1aLOGO\u914d\u7f6e\\\");\n        }\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        saveOrUpdate(adminConfig);\n    }\n\n    /**\n     * \u67e5\u8be2\u4f01\u4e1a\u914d\u7f6e\n     *\n     * @return adminCompanyBO\n     */\n    @Override\n    public AdminCompanyBO queryAdminConfig() {\n        String companyKey = \\\"companyInfo\\\";\n        AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\\\" limit 1\\\").one();\n        AdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n        if (adminConfig != null) {\n            adminCompanyBO = JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n        }\n        return adminCompanyBO;\n    }\n\n    /**\n     * \u67e5\u8be2\u6a21\u5757\u8bbe\u7f6e\n     *\n     * @return data\n     */\n    @Override\n    public List<ModuleSettingVO> queryModuleSetting() {\n        List<AdminConfig> adminConfigList = queryConfigListByName((Object[]) AdminModuleEnum.getValues());\n        List<ModuleSettingVO> moduleSettingList = new ArrayList<>();\n        adminConfigList.forEach(adminConfig -> {\n            ModuleSettingVO moduleSettingVO = new ModuleSettingVO();\n            moduleSettingVO.setSettingId(adminConfig.getSettingId());\n            moduleSettingVO.setModule(adminConfig.getName());\n            moduleSettingVO.setStatus(adminConfig.getStatus());\n            moduleSettingVO.setType(adminConfig.getValue());\n            moduleSettingVO.setName(adminConfig.getDescription());\n            moduleSettingList.add(moduleSettingVO);\n        });\n        return moduleSettingList;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u6a21\u5757\u7684\u7981\u7528\u542f\u7528\n     *\n     * @param adminConfig data\n     */\n    @Override\n    public void setModuleSetting(AdminConfig adminConfig) {\n        updateById(adminConfig);\n        //\u67e5\u8be2\u4f01\u4e1a\u7528\u6237\uff0c\u5c06\u4f01\u4e1a\u7528\u6237\u7684\u6743\u9650\u7f13\u5b58\u6e05\u9664\uff0c\u91cd\u65b0\u8ba1\u7b97\n        List<AdminUserVO> userList = adminUserService.queryUserList(null).getRecords();\n        //\u6e05\u9664\u7f13\u5b58\n        adminRoleService.authInvalidate(userList.stream().map(AdminUserVO::getUserId).collect(Collectors.toList()));\n    }\n\n    /**\n     * \u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\n     *\n     * @param stringList data\n     */\n    @Override\n    public void setLogWelcomeSpeech(List<String> stringList) {\n        List<AdminConfig> configList = new ArrayList<>();\n        stringList.forEach(str -> {\n            AdminConfig config = new AdminConfig();\n            config.setName(logConfigName);\n            config.setValue(str);\n            config.setStatus(1);\n            configList.add(config);\n        });\n        QueryWrapper<AdminConfig> queryWrapper = new QueryWrapper<>();\n        queryWrapper.eq(\\\"name\\\", logConfigName);\n        remove(queryWrapper);\n        saveBatch(configList, AdminConst.BATCH_SAVE_SIZE);\n    }\n\n    /**\n     * \u67e5\u8be2\u65e5\u5fd7\u6b22\u8fce\u8bed\n     *\n     * @return data\n     */\n    @Override\n    public List<LogWelcomeSpeechBO> getLogWelcomeSpeechList() {\n        List<AdminConfig> adminConfigList = query().select(\\\"setting_id\\\", \\\"value\\\").eq(\\\"name\\\", logConfigName).list();\n        return adminConfigList.stream().map(adminConfig -> BeanUtil.copyProperties(adminConfig, LogWelcomeSpeechBO.class)).collect(Collectors.toList());\n    }\n\n    /**\n     * \u6839\u636e\u540d\u79f0\u67e5\u8be2\u914d\u7f6e\u4fe1\u606f\n     *\n     * @param name\n     * @return data\n     */\n    @Override\n    public AdminConfig queryConfigByName(String name) {\n        return query().in(\\\"name\\\", name).last(\\\" limit 1\\\").one();\n    }\n\n    /**\n     * \u67e5\u8be2\u547c\u53eb\u4e2d\u5fc3\u8bbe\u7f6e\n     *\n     * @return data\n     */\n    @Override\n    public ModuleSettingVO queryCallModuleSetting() {\n        AdminConfig adminConfig = queryConfigByName(AdminModuleEnum.CALL.getValue());\n        ModuleSettingVO moduleSettingVO = new ModuleSettingVO();\n        moduleSettingVO.setSettingId(adminConfig.getSettingId());\n        moduleSettingVO.setModule(adminConfig.getName());\n        moduleSettingVO.setStatus(adminConfig.getStatus());\n        moduleSettingVO.setType(adminConfig.getValue());\n        moduleSettingVO.setName(adminConfig.getDescription());\n        return moduleSettingVO;\n    }\n\n\n    @Override\n    public void updateAdminConfig(AdminConfig adminConfig) {\n        saveOrUpdate(adminConfig);\n    }\n\n    @Override\n    public AdminConfig queryFirstConfigByNameAndValue(String name, String value) {\n        return lambdaQuery().eq(AdminConfig::getName, name).eq(AdminConfig::getValue, value).one();\n    }\n\n    @Override\n    public void setMarketing(Integer status) {\n        String name = \\\"marketing\\\";\n        AdminConfig adminConfig = this.lambdaQuery().eq(AdminConfig::getName, name).last(\\\" limit 1\\\").one();\n        if (adminConfig == null) {\n            AdminConfig config = new AdminConfig();\n            config.setName(name);\n            config.setStatus(Objects.equals(1, status) ? 1 : 0);\n            config.setDescription(\\\"\u662f\u5426\u5f00\u542f\u8425\u9500\u6d3b\u52a8\\\");\n            this.save(config);\n        } else {\n            adminConfig.setStatus(Objects.equals(1, status) ? 1 : 0);\n            this.updateById(adminConfig);\n        }\n    }\n\n    @Override\n    public Integer queryMarketing() {\n        String name = \\\"marketing\\\";\n        AdminConfig adminConfig = this.lambdaQuery().eq(AdminConfig::getName, name).last(\\\" limit 1\\\").one();\n        if (adminConfig == null) {\n            adminConfig = new AdminConfig();\n            adminConfig.setName(name);\n            adminConfig.setStatus(1);\n            adminConfig.setDescription(\\\"\u662f\u5426\u5f00\u542f\u8425\u9500\u6d3b\u52a8\\\");\n            this.save(adminConfig);\n        }\n        return adminConfig.getStatus();\n    }\n\n    @Override\n\n\n", "CodeBleu_score": 8.811558815875008}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\tcopyProperties(adminConfig, LogWelcomeSpeechBO.class)).collect(Collectors.toList());\n    }", "CodeBleu_score": 6.797405239030874}, {"code": "private boolean verifyInitAuth(){\n\tcopyProperties(adminConfig, LogWelcomeSpeechBO.class)).collect(Collectors.toList());\n    }", "CodeBleu_score": 6.797405239030874}, {"code": "private boolean verifyInitAuth(){\n\tcopyProperties(adminConfig, LogWelcomeSpeechBO.class)).collect(Collectors.toList());\n    }", "CodeBleu_score": 6.797405239030874}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\tList<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    mapper.insertList(roleMenuList);\n}", "CodeBleu_score": 56.629305947158294}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\tList<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    this.saveBatch(roleMenuList);\n}", "CodeBleu_score": 56.9935743000498}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\tList<AdminRoleMenu> list = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu arm = new AdminRoleMenu();\n        arm.setRoleId(roleId);\n        arm.setMenuId(menuId);\n        list.add(arm);\n    }\n    this.saveBatch(list);\n}", "CodeBleu_score": 53.14127381874441}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\t.LoginLog;", "CodeBleu_score": 2.4789535040933925}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t.LoginLog;", "CodeBleu_score": 2.4789535040933925}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t.LoginLog;", "CodeBleu_score": 2.4789535040933925}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t   \\\"      \\\\\"detail\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"keyword\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"ipAddress\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"ip\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"userId\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"long\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"realname\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"keyword\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"createTime\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"date\\\\\",\n\\\" +\n                    \\\"        \\\\\"format\\\\\": \\\\\"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd\\\\\"\n\\\" +\n                    \\\"      }\n\\\" +\n                    \\\"    }", "CodeBleu_score": 7.3961787832243875}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t   \\\"      \\\\\"detail\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"keyword\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"ipAddress\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"ip\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"userId\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"long\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"realname\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"keyword\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"createTime\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"date\\\\\",\n\\\" +\n                    \\\"        \\\\\"format\\\\\": \\\\\"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd\\\\\"\n\\\" +\n                    \\\"      }\n\\\" +\n                    \\\"    }", "CodeBleu_score": 7.3961787832243875}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t   \\\"      \\\\\"detail\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"keyword\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"ipAddress\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"ip\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"userId\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"long\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"realname\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"keyword\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"createTime\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"date\\\\\",\n\\\" +\n                    \\\"        \\\\\"format\\\\\": \\\\\"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd\\\\\"\n\\\" +\n                    \\\"      }\n\\\" +\n                    \\\"    }", "CodeBleu_score": 7.3961787832243875}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\tconst file = fs.createWriteStream(dest);\n    const request = https.get(url, (response) => {\n        response.pipe(file);\n        file.on(\"finish\", () => {\n            file.close();\n        });\n    });\n    await new Promise((resolve, reject) => {\n        file.on(\"error\", (err) => {\n            fs.unlink(dest, () => {\n                reject(err.message);\n            });\n        });\n        request.on(\"error\", (err) => {\n            fs.unlink(dest, () => {\n                reject(err.message);\n            });\n        });\n        request.on(\"response\", (response) => {\n            if (response.statusCode === 200) {\n                resolve();\n            } else {\n                reject(`Server responded with ${response.statusCode}: ${response.statusMessage}`);\n            }\n        });\n    });\n}", "CodeBleu_score": 45.01675120156202}, {"code": "async function downloadFile(url, dest){\n\tconst file = fs.createWriteStream(dest);\n    const response = await axios({\n        url,\n        method: 'GET',\n        responseType: 'stream'\n    });\n    response.data.pipe(file);\n    return new Promise((resolve, reject) => {\n        file.on('finish', () => {\n            file.close();\n            resolve();\n        });\n        file.on('error', (err) => {\n            fs.unlink(dest, () => {\n                reject(err.message);\n            });\n        });\n    });\n}", "CodeBleu_score": 49.257629096013986}, {"code": "async function downloadFile(url, dest){\n\tconst file = fs.createWriteStream(dest);\n    const response = await axios({\n        url,\n        method: 'GET',\n        responseType: 'stream'\n    });\n\n    response.data.pipe(file);\n\n    return new Promise((resolve, reject) => {\n        file.on('finish', () => {\n            file.close();\n            resolve();\n        });\n        file.on('error', (err) => {\n            fs.unlink(dest, () => {\n                reject(err.message);\n            });\n        });\n    });\n}", "CodeBleu_score": 49.257629096013986}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\tSet<String> dependentModules = getDependentModulesFromDsl(module.getEditingApplicationDSL());\n    dependentModules.removeAll(circularDependencyCheckSet);\n    circularDependencyCheckSet.addAll(dependentModules);\n    return findByIdIn(Lists.newArrayList(dependentModules));\n}", "CodeBleu_score": 36.48551924653549}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\tSet<String> moduleSet = getDependentModulesFromDsl(module.getEditingApplicationDSL());\n     moduleSet.removeAll(circularDependencyCheckSet);\n     circularDependencyCheckSet.addAll(moduleSet);\n     return findByIdIn(Lists.newArrayList(moduleSet));\n }", "CodeBleu_score": 36.19612566297863}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\tMap<String, Object> dsl = module.getLiveApplicationDsl();\n        Set<String> moduleIds = getDependentModulesFromDsl(dsl);\n        moduleIds.removeAll(circularDependencyCheckSet);\n        circularDependencyCheckSet.addAll(moduleIds);\n        return findByIdIn(Lists.newArrayList(moduleIds))\n                .onErrorContinue((e, i) -> log.warn(\"get dependent modules on error continue , {}\", e.getMessage()));\n    }", "CodeBleu_score": 61.69377862103927}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tfor (Map.Entry<?, ?> entry : map.entrySet()) {\n        if (entry.getKey().equals(\"type\") && entry.getValue().equals(\"module\")) {\n            Object appId = map.get(\"appId\");\n            if (appId != null && !StringUtils.isBlank(appId.toString())) {\n                dependentModuleIds.add(appId.toString());\n            }\n        }\n        if (entry.getValue() instanceof Map<?, ?>) {\n            doGetDependentModules((Map<?, ?>) entry.getValue(), dependentModuleIds);\n        } else if (entry.getValue() instanceof List<?>) {\n            for (Object item : (List<?>) entry.getValue()) {\n                if (item instanceof Map<?, ?>) {\n                    doGetDependentModules((Map<?, ?>) item, dependentModuleIds);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 40.60091371204602}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tfor (Map.Entry<?, ?> entry : map.entrySet()) {\n        Object key = entry.getKey();\n        Object value = entry.getValue();\n        if (value instanceof Map<?, ?>) {\n            Map<?, ?> nestedMap = (Map<?, ?>) value;\n            if (\"module\".equals(nestedMap.get(\"type\"))) {\n                String appId = (String) nestedMap.get(\"appId\");\n                if (!StringUtils.isBlank(appId)) {\n                    dependentModuleIds.add(appId);\n                }\n            }\n            doGetDependentModules(nestedMap, dependentModuleIds);\n        } else if (value instanceof List<?>) {\n            List<?> list = (List<?>) value;\n            for (Object item : list) {\n                if (item instanceof Map<?, ?>) {\n                    doGetDependentModules((Map<?, ?>) item, dependentModuleIds);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 48.780066469033414}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tfor (Map.Entry<?, ?> entry : map.entrySet()) {\n        Object key = entry.getKey();\n        Object value = entry.getValue();\n\n        if (key instanceof String && value instanceof Map<?, ?>) {\n            Map<?, ?> valueMap = (Map<?, ?>) value;\n            Object compType = valueMap.get(\"comp\");\n            if (compType instanceof Map<?, ?>) {\n                Map<?, ?> compTypeMap = (Map<?, ?>) compType;\n                Object type = compTypeMap.get(\"type\");\n                if (type instanceof String && type.equals(\"module\")) {\n                    Object appId = compTypeMap.get(\"appId\");\n                    if (appId instanceof String && !StringUtils.isBlank((String) appId)) {\n                        dependentModuleIds.add((String) appId);\n                    }\n                }\n            }\n        }\n\n        if (value instanceof Map<?, ?>) {\n            doGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n        } else if (value instanceof List<?>) {\n            for (Object o : (List<?>) value) {\n                if (o instanceof Map<?, ?>) {\n                    doGetDependentModules((Map<?, ?>) o, dependentModuleIds);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 41.89637127059987}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\tBufferedImage image = ImageIO.read(dataBuffer.asInputStream());\n        DataBufferUtils.release(dataBuffer);\n        if (createThumbnail) {\n            image = resizeImage(image, thumbNailPhotoDimension.getValue());\n        }\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        ImageIO.write(image, \"jpg\", baos);\n        Asset asset = new Asset();\n        asset.setContentType(MediaType.IMAGE_JPEG);\n        asset.setData(baos.toByteArray());\n        return asset;\n    }", "CodeBleu_score": 43.98999892164063}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t// We only support JPEG and PNG files.\n    final Image image = ImageIO.read(dataBuffer.asInputStream());\n    final int width = image.getWidth(null);\n    final int height = image.getHeight(null);\n\n    // We only resize the image if the createThumbnail flag is true.\n    final BufferedImage resizedImage = createThumbnail\n            ? resizeImage(image, thumbNailPhotoDimension.getValue())\n            : new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n\n    final ByteArrayOutputStream os = new ByteArrayOutputStream();\n    ImageIO.write(resizedImage, \"jpg\", os);\n    final byte[] data = os.toByteArray();\n\n    final Asset asset = new Asset();\n    asset.setContentType(MediaType.IMAGE_JPEG);\n    asset.setData(data);\n\n    DataBufferUtils.release(dataBuffer);\n    return asset;\n}", "CodeBleu_score": 39.98783249876267}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\tfinal Image image = ImageIO.read(dataBuffer.asInputStream());\n    final BufferedImage bufferedImage = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_RGB);\n    bufferedImage.createGraphics().drawImage(image, 0, 0, Color.WHITE, null);\n\n    if (createThumbnail) {\n        bufferedImage.getScaledInstance(thumbNailPhotoDimension.get(), thumbNailPhotoDimension.get(), Image.SCALE_SMOOTH);\n    }\n\n    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    ImageIO.write(bufferedImage, \"jpeg\", baos);\n    baos.flush();\n\n    final Asset asset = new Asset();\n    asset.setContentType(MediaType.IMAGE_JPEG);\n    asset.setData(baos.toByteArray());\n\n    DataBufferUtils.release(dataBuffer);\n    baos.close();\n\n    return asset;\n}", "CodeBleu_score": 38.22538174567459}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn repository.findById(assetId)\n            .doOnNext(asset -> {\n                ServerHttpResponse response = exchange.getResponse();\n                response.setStatusCode(HttpStatus.OK);\n                if (asset.getContentType() != null) {\n                    response.getHeaders().add(HttpHeaders.CONTENT_TYPE, asset.getContentType().toString());\n                }\n                DataBuffer dataBuffer = response.bufferFactory().wrap(asset.getData());\n                response.writeWith(Mono.just(dataBuffer));\n            })\n            .then();\n}", "CodeBleu_score": 55.423924392673385}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn getById(assetId)\n            .doOnNext(asset -> exchange.getResponse().setStatusCode(HttpStatus.OK))\n            .doOnNext(asset -> asset.getContentType().ifPresent(contentType -> exchange.getResponse().getHeaders().set(HttpHeaders.CONTENT_TYPE, contentType.toString())))\n            .flatMap(asset -> DataBufferUtils.write(exchange.getResponse().bufferFactory().wrap(asset.getData()), exchange.getResponse()));\n}", "CodeBleu_score": 35.97457786988182}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn repository.findById(assetId)\n            .flatMap(asset -> {\n                ServerHttpResponse response = exchange.getResponse();\n                response.setStatusCode(HttpStatus.OK);\n                if (asset.getContentType() != null) {\n                    response.getHeaders().set(HttpHeaders.CONTENT_TYPE, asset.getContentType().toString());\n                }\n                DataBuffer dataBuffer = response.bufferFactory().wrap(asset.getData());\n                return response.writeWith(Mono.just(dataBuffer));\n            });\n}", "CodeBleu_score": 58.44231721719345}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\treturn Flux.empty();\n}", "CodeBleu_score": 14.527859102042253}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\tif (commonConfig.getWorkspaceMode() == WorkspaceMode.SAAS) {\n        return Flux.empty();\n    }\n\n    return organizationService.getByDomain()\n            .flatMapIterable(organization ->\n                    organization.getAuthConfigs()\n                            .stream()\n                            .map(abstractAuthConfig -> new FindAuthConfig(abstractAuthConfig, organization))\n                            .collect(Collectors.toList())\n            );\n}", "CodeBleu_score": 63.30511682984677}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\tif (WorkspaceMode.SAAS.equals(commonConfig.getWorkspaceMode())) {\n            return Flux.empty();\n        }\n        return organizationService.getByDomain()\n                .flatMapIterable(organization ->\n                        organization.getAuthConfigs()\n                                .stream()\n                                .map(abstractAuthConfig -> new FindAuthConfig(abstractAuthConfig, organization))\n                                .collect(Collectors.toList())\n                );\n    }", "CodeBleu_score": 60.24227719479971}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\treturn MongockSpring5.builder()\n            .setDriver(new SpringDataMongoV3Driver(\n                    mongoTemplate.getDb(),\n                    mongoTemplate.getConverter(),\n                    mongoTemplate.getMappingContext())\n                    .setWriteConcern(WriteConcern.MAJORITY)\n                    .setReadConcern(ReadConcern.MAJORITY)\n                    .setReadPreference(ReadPreference.primary()))\n            .addChangeLogsScanPackage(\"com.openblocks.infra.migration\")\n            .setSpringContext(springContext)\n            .buildApplicationRunner();\n}", "CodeBleu_score": 37.754663372725666}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t// Set up the MongoDB driver\n    SpringDataMongoV3Driver driver = SpringDataMongoV3Driver.withDefaultLock(mongoTemplate.getDb(), \"mongockLock\")\n            .setWriteConcern(WriteConcern.W1)\n            .setReadConcern(ReadConcern.MAJORITY)\n            .setReadPreference(ReadPreference.primary())\n            .build();\n\n    // Set up the Mongock runner\n    MongockSpring5.MongockApplicationRunner runner = MongockSpring5.builder()\n            .setDriver(driver)\n            .addChangeLogsScanPackage(\"com.openblocks.infra.migration\")\n            .setSpringContext(springContext)\n            .buildApplicationRunner();\n\n    return runner;\n}", "CodeBleu_score": 49.57969768819092}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\tSpringDataMongoV3Driver driver = SpringDataMongoV3Driver.withLockDatabaseName(\"mongock\")\n            .withLockCollectionName(\"mongockLock\")\n            .withMongoTemplate(mongoTemplate)\n            .build();\n\n    return MongockSpring5.builder()\n            .setDriver(driver)\n            .addChangeLogsScanPackage(\"com.openblocks.infra.migration\")\n            .setSpringContext(springContext)\n            .setTransactionEnabled(true)\n            .buildApplicationRunner();\n}", "CodeBleu_score": 49.03243339317537}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\tReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n    reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n    return reactiveMongoTemplate;\n}", "CodeBleu_score": 77.21973361724991}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\tReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n    reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n    return reactiveMongoTemplate;\n}", "CodeBleu_score": 77.21973361724991}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\tReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n    reactiveMongoTemplate.setWriteConcern(WriteConcern.JOURNALED.withJournal(false));\n    reactiveMongoTemplate.setReadConcern(ReadConcern.LOCAL);\n    reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n    return reactiveMongoTemplate;\n}", "CodeBleu_score": 64.66117802755107}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn libraryQueryRecordService.getLatestRecordByLibraryQueryId(libraryQueryId)\n            .map(LibraryQueryRecord::getDsl)\n            .switchIfEmpty(getById(libraryQueryId)\n                    .map(LibraryQuery::getDsl));\n}", "CodeBleu_score": 73.39228506648895}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn libraryQueryRecordService.getLatestRecordByLibraryQueryId(libraryQueryId)\n            .map(LibraryQueryRecord::getDsl)\n            .switchIfEmpty(getById(libraryQueryId)\n                    .map(LibraryQuery::getDsl));\n}", "CodeBleu_score": 73.39228506648895}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn libraryQueryRecordService.getLatestRecordByLibraryQueryId(libraryQueryId)\n            .map(LibraryQueryRecord::getDsl)\n            .switchIfEmpty(getById(libraryQueryId)\n                    .map(LibraryQuery::getDsl));\n}", "CodeBleu_score": 73.39228506648895}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\tlog.info(\"Executing query: {}\", queryVisitorContext.getQuery());\n        log.info(\"Query config: {}\", queryConfig);\n        log.info(\"Request params: {}\", requestParams);\n\n        Duration timeout = QueryTimeoutUtils.getTimeoutDuration(timeoutStr);\n\n        DatasourceConnectionHolder connectionHolder = datasourceConnectionPool.getConnection(datasource);\n        if (connectionHolder == null) {\n            throw new BizException(QUERY_EXECUTION_ERROR, \"Could not find a connection for the datasource: \" + datasource.getId());\n        }\n\n        try {\n            if (datasource.getType().equals(\"nodejs\")) {\n                return datasourcePluginClient.executeQuery(datasource, queryVisitorContext, queryConfig, requestParams, timeout)\n                        .onErrorMap(TimeoutException.class, e -> ofException(QUERY_EXECUTION_TIMEOUT, e))\n                        .onErrorMap(PluginException.class, e -> ofException(QUERY_EXECUTION_ERROR, e))\n                        .onErrorResume(e -> Mono.just(QueryExecutionResult.builder()\n                                .query(queryVisitorContext.getQuery())\n                                .error(e.getMessage())\n                                .build()));\n            } else {\n                return datasourcePluginClient.executeQuery(datasource, queryVisitorContext, queryConfig, requestParams, timeout)\n                        .onErrorMap(TimeoutException.class, e -> ofException(QUERY_EXECUTION_TIMEOUT, e))\n                        .onErrorMap(PluginException.class, e -> ofException(QUERY_EXECUTION_ERROR, e))\n                        .onErrorResume(e -> Mono.just(QueryExecutionResult.builder()\n                                .query(queryVisitorContext.getQuery())\n                                .error(e.getMessage())\n                                .build()));\n            }\n        } catch (Exception e) {\n            log.error(\"Error executing query\", e);\n            return Mono.just(QueryExecutionResult.builder()\n                    .query(queryVisitorContext.getQuery())\n                    .error(e.getMessage())\n                    .build());", "CodeBleu_score": 40.22492208578051}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\tfinal Duration timeout = QueryTimeoutUtils.parseTimeout(timeoutStr);\n        final QueryExecutionContext queryExecutionContext = new QueryExecutionContext(datasource, queryConfig, requestParams, timeoutStr, queryVisitorContext);\n        return Mono.defer(() -> {\n            try {\n                final DatasourceConnectionHolder datasourceConnectionHolder = datasourceConnectionPool.getDatasourceConnection(datasource);\n                final List<String> supportedDatasourceTypes = datasourceMetaInfoService.getSupportedDatasourceTypes(datasourceConnectionHolder.getDatasourceType());\n                if (supportedDatasourceTypes.contains(datasource.getDatasourceType())) {\n                    return datasourcePluginClient.executeQuery(datasourceConnectionHolder.getConnection(), queryExecutionContext)\n                            .timeout(timeout)\n                            .onErrorMap(TimeoutException.class, e -> ofException(QUERY_EXECUTION_TIMEOUT, e.getMessage()));\n                }\n                return Mono.error(ofException(QUERY_EXECUTION_ERROR, \"Unsupported datasource type \" + datasource.getDatasourceType()));\n            } catch (PluginException e) {\n                return Mono.error(e);\n            } catch (Exception e) {\n                log.error(\"Error while executing query\", e);\n                return Mono.error(ofException(QUERY_EXECUTION_ERROR, \"Error while executing query\"));\n            }\n        }).onErrorResume(PluginException.class, e -> Mono.just(new QueryExecutionResult(e)));\n    }", "CodeBleu_score": 43.48348702909398}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\tDuration timeout = QueryTimeoutUtils.parseTimeout(timeoutStr);\n        return datasourceConnectionPool.getConnection(datasource.getId())\n                .flatMap(connectionHolder -> {\n                    DatasourceConnectionHolder datasourceConnectionHolder = (DatasourceConnectionHolder) connectionHolder;\n                    QueryExecutionContext queryExecutionContext = new QueryExecutionContext(datasource, datasourceConnectionHolder.getConnection(),\n                            datasourceConnectionHolder.getConnectionInfo(), queryConfig, requestParams, queryVisitorContext);\n                    return datasourcePluginClient.executeQuery(queryExecutionContext, timeout)\n                            .timeout(timeout)\n                            .onErrorResume(TimeoutException.class, e -> {\n                                log.error(\"Query execution timed out\", e);\n                                return Mono.just(new QueryExecutionResult(false, List.of(ofException(QUERY_EXECUTION_TIMEOUT, e))));\n                            })\n                            .onErrorResume(PluginException.class, e -> {\n                                log.error(\"Plugin exception occurred while executing query\", e);\n                                return Mono.just(new QueryExecutionResult(false, List.of(ofException(QUERY_EXECUTION_ERROR, e))));\n                            })\n                            .onErrorResume(Exception.class, e -> {\n                                log.error(\"Unknown exception occurred while executing query\", e);\n                                return Mono.just(new QueryExecutionResult(false, List.of(ofException(QUERY_EXECUTION_ERROR, e))));\n                            });\n                })\n                .switchIfEmpty(Mono.just(new QueryExecutionResult(false, List.of(ofException(QUERY_EXECUTION_ERROR, \"Connection not found for datasource \" + datasource.getId())))));\n    }", "CodeBleu_score": 39.460793430502925}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\treturn datasourcePluginClient.getQueryExecutor(datasource.getType())\n                .flatMap(queryExecutor -> {\n                    QueryExecutionContext queryExecutionContext = QueryExecutionContext.builder()\n                            .queryConfig(queryConfig)\n                            .requestParams(requestParams)\n                            .datasource(datasource)\n                            .queryVisitorContext(queryVisitorContext)\n                            .build();\n                    return datasourceConnectionPool.acquireConnection(datasource)\n                            .flatMap(connection -> {\n                                return queryExecutor.execute(queryExecutionContext, connection)\n                                        .doFinally(signalType -> {\n                                            if (signalType == SignalType.ON_ERROR || signalType == SignalType.ON_COMPLETE) {\n                                                datasourceConnectionPool.releaseConnection(connection);\n                                            }\n                                        });\n                            });\n                });\n    }", "CodeBleu_score": 42.46582495493761}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\treturn Mono.defer(() -> {\n            QueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n            return datasourceConnectionPool.acquireConnection(datasource)\n                    .flatMap(connection -> Mono.just(connection)\n                            .map(connectionHolder -> (DatasourceConnectionHolder<Object>) connectionHolder)\n                            .flatMap(connectionHolder -> datasourcePluginClient.executeQuery(datasource, queryExecutionContext, connectionHolder))\n                            .doFinally(signalType -> datasourceConnectionPool.releaseConnection(datasource, connection)));\n        });\n    }", "CodeBleu_score": 38.67389645001313}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\treturn Mono.justOrEmpty(datasourceMetaInfoService.getQueryExecutor(datasource.getType()))\n                .switchIfEmpty(Mono.error(new BizException(QUERY_EXECUTION_ERROR, \"QUERY_EXECUTION_ERROR\", \"No query executor found for datasource type: \" + datasource.getType())))\n                .flatMap(queryExecutor -> {\n                    QueryExecutionContext queryExecutionContext = QueryExecutionContext.builder()\n                            .queryConfig(queryConfig)\n                            .datasource(datasource)\n                            .requestParams(requestParams)\n                            .queryVisitorContext(queryVisitorContext)\n                            .build();\n\n                    return datasourceConnectionPool.acquireConnection(datasource)\n                            .flatMap(connection -> {\n                                try {\n                                    return Mono.just(queryExecutor.execute(connection, queryExecutionContext));\n                                } catch (Exception e) {\n                                    return Mono.error(e);\n                                }\n                            })\n                            .onErrorMap(exception -> {\n                                log.error(\"query execution error\", exception);\n                                return ofException(QUERY_EXECUTION_ERROR, \"QUERY_EXECUTION_ERROR\", exception.getMessage());\n                            })\n                            .doFinally(signalType -> datasourceConnectionPool.releaseConnection(datasource, connection));\n                });\n    }", "CodeBleu_score": 40.75688363372788}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (StringUtils.isBlank(timeoutStr)) {\n        return DEFAULT_QUERY_TIMEOUT_MILLIS;\n    }\n\n    Pair<Integer, String> parsedTimeout = parseTimeout(timeoutStr);\n    int timeout = parsedTimeout.getLeft();\n    String unit = parsedTimeout.getRight();\n\n    if (timeout > MAX_QUERY_TIMEOUT_SECONDS) {\n        throw new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"Timeout must be less than or equal to 120 seconds\");\n    }\n\n    switch (unit) {\n        case \"s\":\n        case \"sec\":\n        case \"second\":\n        case \"seconds\":\n            return timeout * 1000;\n        case \"ms\":\n        case \"millis\":\n        case \"millisecond\":\n        case \"milliseconds\":\n            return timeout;\n        case \"m\":\n        case \"min\":\n        case \"minute\":\n        case \"minutes\":\n            return timeout * 60000;\n        case \"h\":\n        case \"hr\":\n        case \"hour\":\n        case \"hours\":\n            return timeout * 3600000;\n        default:\n            throw new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid timeout unit: \" + unit);\n    }\n}", "CodeBleu_score": 34.113268328832866}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (StringUtils.isBlank(timeoutStr)) {\n        return DEFAULT_QUERY_TIMEOUT_MILLIS;\n    }\n\n    Pair<Integer, String> valueAndUnit = extractValueAndUnit(timeoutStr);\n    int timeoutValue = valueAndUnit.getLeft();\n    String timeoutUnit = valueAndUnit.getRight();\n\n    if (timeoutValue < 0) {\n        throw new PluginException(QUERY_ARGUMENT_ERROR, \"Negative timeout value: \" + timeoutValue);\n    }\n\n    if (timeoutValue > MAX_QUERY_TIMEOUT_SECONDS) {\n        throw new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"Timeout value exceeds maximum allowed: \" + timeoutValue);\n    }\n\n    if (timeoutUnit.equalsIgnoreCase(\"ms\")) {\n        return timeoutValue;\n    } else if (timeoutUnit.equalsIgnoreCase(\"s\")) {\n        return timeoutValue * 1000;\n    } else if (timeoutUnit.equalsIgnoreCase(\"m\")) {\n        return timeoutValue * 1000 * 60;\n    } else if (timeoutUnit.equalsIgnoreCase(\"h\")) {\n        return timeoutValue * 1000 * 60 * 60;\n    } else {\n        throw new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid timeout unit: \" + timeoutUnit);\n    }\n}", "CodeBleu_score": 38.961975395383895}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (StringUtils.isBlank(timeoutStr)) {\n        return DEFAULT_QUERY_TIMEOUT_MILLIS;\n    }\n\n    final Pair<Integer, String> result = parseTimeout(timeoutStr);\n    final int value = result.getLeft();\n    final String unit = result.getRight();\n\n    if (StringUtils.isBlank(unit)) {\n        throw new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout: \" + timeoutStr);\n    }\n\n    final int timeoutMs = convertToMillis(value, unit);\n    if (timeoutMs > MAX_QUERY_TIMEOUT_SECONDS * 1000) {\n        throw new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"Query timeout cannot exceed \" + MAX_QUERY_TIMEOUT_SECONDS + \" seconds\");\n    }\n\n    return timeoutMs;\n}", "CodeBleu_score": 41.465085534181966}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn applicationService.findQueriesByApplicationId(application.getId())\n                .switchIfEmpty(deferredError(TEMPLATE_NOT_CORRECT, \"TEMPLATE_NOT_CORRECT\"))\n                .map(ApplicationQuery::getQuery)\n                .map(JsonUtils::toJson)\n                .collectList()\n                .flatMap(queries -> {\n                    List<String> datasourceIds = queries.stream()\n                            .map(JsonUtils::fromJsonMap)\n                            .map(map -> (List<Map<String, Object>>) map.get(\"datasources\"))\n                            .flatMap(Collection::stream)\n                            .map(map -> (String) map.get(\"id\"))\n                            .distinct()\n                            .collect(Collectors.toList());\n                    if (datasourceIds.isEmpty()) {\n                        return ofError(TEMPLATE_NOT_CORRECT, \"TEMPLATE_NOT_CORRECT\");\n                    }\n                    return Flux.fromIterable(datasourceIds)\n                            .flatMap(datasourceId -> datasourceService.getById(datasourceId)\n                                    .switchIfEmpty(deferredError(TEMPLATE_NOT_CORRECT, \"TEMPLATE_NOT_CORRECT\"))\n                                    .map(datasource -> Datasource.builder()\n                                            .creationSource(DatasourceCreationSource.TEMPLATE)\n                                            .name(datasource.getName())\n                                            .organizationId(currentOrganizationId)\n                                            .type(datasource.getType())\n                                            .properties(datasource.getProperties())\n                                            .build())\n                                    .flatMap(datasourceService::create)\n                                    .map(createdDatasource -> Pair.of(datasourceId, createdDatasource.getId())))\n                            .collectList();\n                });\n    }", "CodeBleu_score": 47.263628869852944}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn applicationService.getQueries(application.getId(), visitorId)\n                .switchIfEmpty(deferredError(TEMPLATE_NOT_CORRECT, \"TEMPLATE_NOT_CORRECT\"))\n                .map(ApplicationQuery::getDatasourceId)\n                .collect(Collectors.toSet())\n                .flatMap(datasourceIds -> {\n                    List<Mono<Pair<String, String>>> monos = datasourceIds.stream()\n                            .map(datasourceId -> datasourceService.getById(datasourceId)\n                                    .switchIfEmpty(deferredError(TEMPLATE_NOT_CORRECT, \"TEMPLATE_NOT_CORRECT\"))\n                                    .flatMap(datasource -> {\n                                        Datasource newDatasource = Datasource.builder()\n                                                .datasourceCreationSource(DatasourceCreationSource.TEMPLATE)\n                                                .name(datasource.getName())\n                                                .type(datasource.getType())\n                                                .build();\n                                        return datasourceService.create(newDatasource, currentOrganizationId, visitorId)\n                                                .map(newDatasourceId -> Pair.of(datasourceId, newDatasourceId));\n                                    }))\n                            .collect(Collectors.toList());\n                    return Flux.merge(monos)\n                            .collect(Collectors.toList());\n                });\n    }", "CodeBleu_score": 41.89110708207278}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn Flux.fromIterable(application.getLiveApplicationDsl().getQueries())\n                .flatMap(query -> datasourceService.getById(query.getDatasourceId()))\n                .collectList()\n                .switchIfEmpty(deferredError(TEMPLATE_NOT_CORRECT, \"TEMPLATE_NOT_CORRECT\"))\n                .flatMapMany(Flux::fromIterable)\n                .map(datasource -> Pair.of(datasource.getId(), datasource.getId() + \"-\" + RandomStringUtils.randomAlphanumeric(RANDOM_LENGTH)))\n                .collectList()\n                .flatMapMany(Flux::fromIterable)\n                .flatMap(pair -> datasourceService.copy(pair.getLeft(), currentOrganizationId, visitorId)\n                        .map(datasource -> Pair.of(pair.getRight(), datasource.getId())))\n                .collectList();\n    }", "CodeBleu_score": 36.81916191923357}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.findById(datasourceId)\n            .switchIfEmpty(deferredError(TEMPLATE_NOT_EXIST, \"TEMPLATE_NOT_EXIST\"))\n            .flatMap(datasource -> {\n                DatasourceCreationSource creationSource = datasource.getCreationSource();\n                if (creationSource == DatasourceCreationSource.SYSTEM_STATIC) {\n                    return Mono.just(datasourceId);\n                }\n                if (creationSource == DatasourceCreationSource.LEGACY_OPENBLOCKS_API) {\n                    return Mono.just(datasource.getLegacyOpenblocksApiId());\n                }\n                if (creationSource == DatasourceCreationSource.LEGACY_REST_API) {\n                    return Mono.just(datasource.getLegacyRestApiId());\n                }\n                String newDatasourceId = RandomStringUtils.randomAlphanumeric(RANDOM_LENGTH);\n                Datasource newDatasource = Datasource.builder()\n                        .creationSource(DatasourceCreationSource.TEMPLATE)\n                        .name(datasource.getName())\n                        .organizationId(organizationId)\n                        .id(newDatasourceId)\n                        .build();\n                return datasourceService.create(newDatasource, visitorId)\n                        .thenReturn(newDatasourceId);\n            });\n}", "CodeBleu_score": 37.706693253245504}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.getById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.getCreationSource() == DatasourceCreationSource.SYSTEM_STATIC) {\n                    return Mono.just(datasourceId);\n                } else if (datasource.getCreationSource() == DatasourceCreationSource.LEGACY_QUICK_REST_API) {\n                    return Mono.just(datasource.getLegacyQuickRestApiId());\n                } else if (datasource.getCreationSource() == DatasourceCreationSource.LEGACY_OPENBLOCKS_API) {\n                    return Mono.just(datasource.getLegacyOpenblocksApiId());\n                } else {\n                    return datasourceService.create(Datasource.builder()\n                            .name(datasource.getName())\n                            .creationSource(DatasourceCreationSource.USER)\n                            .organizationId(organizationId)\n                            .type(datasource.getType())\n                            .build(), visitorId);\n                }\n            });\n}", "CodeBleu_score": 47.169327647962945}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.getById(datasourceId)\n            .switchIfEmpty(deferredError(TEMPLATE_NOT_EXIST, \"TEMPLATE_NOT_EXIST\"))\n            .flatMap(datasource -> {\n                if (datasource.getCreationSource() == DatasourceCreationSource.SYSTEM_STATIC) {\n                    return Mono.just(datasource.getId());\n                }\n                if (datasource.getCreationSource() == DatasourceCreationSource.LEGACY_QUICK_API) {\n                    return Mono.just(datasource.getId());\n                }\n                if (datasource.getCreationSource() == DatasourceCreationSource.LEGACY_OPENBLOCKS_API) {\n                    return Mono.just(datasource.getId());\n                }\n                Datasource newDatasource = Datasource.builder()\n                        .name(datasource.getName())\n                        .organizationId(organizationId)\n                        .creationSource(DatasourceCreationSource.USER)\n                        .build();\n                return datasourceService.create(newDatasource, visitorId)\n                        .map(Datasource::getId);\n            });\n}", "CodeBleu_score": 54.21581224303892}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\treturn assetService.upload(filePart, avatarMaxSizeInKb.get())\n            .flatMap(asset -> {\n                if (user.getAvatar() != null) {\n                    return assetService.delete(user.getAvatar())\n                            .then(Mono.just(asset));\n                }\n                return Mono.just(asset);\n            })\n            .flatMap(asset -> {\n                user.setAvatar(asset);\n                return repository.save(user);\n            })\n            .map(it -> true);\n}", "CodeBleu_score": 32.1857148805867}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\treturn assetService.upload(filePart, avatarMaxSizeInKb.get())\n                .flatMap(asset -> {\n                    if (user.getAvatar() != null) {\n                        return assetService.delete(user.getAvatar().getId())\n                                .then(Mono.just(asset));\n                    }\n                    return Mono.just(asset);\n                })\n                .flatMap(asset -> {\n                    user.setAvatar(asset);\n                    return repository.save(user);\n                })\n                .map(it -> true)\n                .onErrorReturn(it -> false);\n    }", "CodeBleu_score": 31.734876638345582}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\treturn filePart.content()\n                .flatMap(dataBuffer -> assetService.uploadAsset(dataBuffer, Asset.Type.IMAGE, user.getId(), Asset.Scope.PROFILE_PHOTO))\n                .flatMap(asset -> {\n                    if (user.getProfilePhoto() != null) {\n                        return assetService.deleteAsset(user.getProfilePhoto().getId())\n                                .thenReturn(asset);\n                    }\n                    return Mono.just(asset);\n                })\n                .flatMap(asset -> {\n                    user.setProfilePhoto(asset);\n                    return repository.save(user);\n                })\n                .map(it -> true);\n    }", "CodeBleu_score": 28.82578383878852}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tUser user = new User();\n    user.setName(authUser.getDisplayName());\n    user.setState(UserState.ENABLED);\n    user.setEnabled(true);\n    user.setAvatar(authUser.getAvatar());\n    if (AuthSourceConstants.EMAIL.equals(authUser.getSource())) {\n        String password = ((FormAuthRequestContext) authUser.getAuthContext()).getPassword();\n        if (StringUtils.isNotEmpty(password)) {\n            user.setPassword(encryptionService.encrypt(password));\n        }\n    }\n    user.setConnections(List.of(new Connection(authUser.getSource(), authUser.getUid())));\n    user.setNew(true);\n    return repository.save(user);\n}", "CodeBleu_score": 48.77226871990873}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tUser user = new User();\n    user.setName(authUser.getName());\n    user.setState(UserState.ENABLED);\n    user.setEnabled(true);\n    user.setAvatar(authUser.getAvatar());\n    if (AuthSourceConstants.EMAIL.equals(authUser.getSource()) && authUser.getContext() instanceof FormAuthRequestContext) {\n        FormAuthRequestContext context = (FormAuthRequestContext) authUser.getContext();\n        if (StringUtils.isNotEmpty(context.getPassword())) {\n            user.setPassword(encryptionService.encrypt(context.getPassword()));\n        }\n    }\n    user.setConnections(List.of(new Connection(authUser.getSource(), authUser.getUid())));\n    user.setNew(true);\n    return create(user);\n}", "CodeBleu_score": 54.03762028725513}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tUser user = new User();\n    user.setConnections(newHashSet(new Connection(authUser.getSource(), authUser.getUid())));\n    user.setName(authUser.getName());\n    user.setState(UserState.ENABLED);\n    user.setEnabled(true);\n    user.setAvatar(authUser.getAvatar());\n    if (AuthSourceConstants.EMAIL.equals(authUser.getSource()) && authUser.getContext() instanceof FormAuthRequestContext) {\n        FormAuthRequestContext context = (FormAuthRequestContext) authUser.getContext();\n        if (StringUtils.isNotEmpty(context.getPassword())) {\n            user.setPassword(encryptionService.encrypt(context.getPassword()));\n        }\n    }\n    user.setNew(true);\n    return create(user);\n}", "CodeBleu_score": 54.28585926120183}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\tjavax.annotation.PostConstruct;\n", "CodeBleu_score": 5.152773031787983}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\tjavax.annotation.PostConstruct;\n", "CodeBleu_score": 5.152773031787983}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\tjavax.annotation.PostConstruct;\n", "CodeBleu_score": 5.152773031787983}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\tedUserInfo;", "CodeBleu_score": 6.132173832970684}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\tedUserInfo;", "CodeBleu_score": 6.132173832970684}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\tedUserInfo;", "CodeBleu_score": 6.132173832970684}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t> createNewUserByAuthUser(AuthUser authUser) {\n        User newUser = new User();\n        newUser.setName(authUser.getUsername());\n        newUser.setState(UserState.ACTIVATED);\n        newUser.setIsEnabled(true);\n        newUser.setTpAvatarLink(authUser.getAvatar());\n        if (AuthSourceConstants.EMAIL.equals(authUser.getSource())\n                && authUser.getAuthContext() instanceof FormAuthRequestContext formAuthRequestContext) {\n            newUser.setPassword(encryptionService.encryptPassword(formAuthRequestContext.getPassword()));\n        }\n        Set<Connection> connections = newHashSet();\n        Connection connection = authUser.toAuthConnection();\n        connections.add(connection);\n        newUser.setConnections(connections);\n        newUser.setIsNewUser(true);\n        return create(newUser);\n    }\n\n    @Override\n    public Mono<Void> getUserAvatar(ServerWebExchange exchange, String userId) {\n        return findById(userId)\n                .flatMap(user -> assetService.makeImageResponse(exchange, user.getAvatar()));\n    }\n\n    @Override\n    public Mono<Boolean> bindEmail(User user, String email) {\n        Connection connection = Connection.builder()\n                .source(AuthSourceConstants.EMAIL)\n                .name(email)\n                .rawId(email)\n                .build();\n        user.getConnections().add(connection);\n        return repository.save(user)\n                .then(Mono.just(true))\n                .onErrorResume(throwable -> {\n                    if (throwable instanceof DuplicateKeyException) {\n                        return Mono.error(new BizException(BizError.ALREADY_BIND, \\\"ALREADY_BIND\\\", email, \\\"\\\"));\n                    }\n                    return Mono.error(throwable);\n                });\n    }\n\n    @Override\n    public Mono<Boolean> addNewConnection(String userId, Connection connection) {\n        return findById(userId)\n                .doOnNext(user -> user.getConnections().add(connection))\n                .flatMap(repository::save)\n                .then(Mono.just(true));\n    }\n\n    @Override\n    public Mono<Void> deleteProfilePhoto(User visitor) {\n        String userAvatar = visitor.getAvatar();\n        visitor.setAvatar(null);\n        return repository.save(visitor).thenReturn(userAvatar)\n                .flatMap(assetService::remove);\n    }\n\n    @Override\n    public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword) {\n        return findById(userId)\n                .<User> handle((user, sink) -> {\n                    String password = user.getPassword();\n                    if (StringUtils.isBlank(password)) {\n                        sink.error(ofException(BizError.INVALID_PASSWORD, \\\"INVALID_PASSWORD\\\"));\n                        return;\n                    }\n                    String originalEncryptPassword = user.getPassword();\n                    if (!encryptionService.matchPassword(oldPassword, originalEncryptPassword)) {\n                        sink.error(ofException(BizError.INVALID_PASSWORD, \\\"INVALID_PASSWORD\\\"));\n                        return;\n                    }\n                    user.setPassword(encryptionService.encryptPassword(newPassword));\n                    sink.next(user);\n                })\n                .flatMap(repository::save)\n                .thenReturn(true);\n    }\n\n    @Override\n    public Mono<String> resetPassword(String userId) {\n        return findById(userId)\n                .flatMap(user -> {\n                    String password = user.getPassword();\n                    if (StringUtils.isBlank(password)) {\n                        return ofError(BizError.INVALID_PASSWORD, \\\"PASSWORD_NOT_SET_YET\\\");\n                    }\n\n                    String randomStr = generateNewRandomPwd();\n                    user.setPassword(encryptionService.encryptPassword(randomStr));\n                    return repository.save(user)\n                            .thenReturn(randomStr);\n                });\n    }\n\n    @SuppressWarnings(\\\"SpellCheckingInspection\\\")\n    @Nonnull\n    private static String generateNewRandomPwd() {\n        char[] possibleCharacters = (\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~`!@#$%^&*()-_=+[{]}<>?\\\")\n                .toCharArray();\n        return RandomStringUtils.random(12, 0, possibleCharacters.length - 1,\n                false, false, possibleCharacters, new SecureRandom());\n    }\n\n    @Override\n    public Mono<Boolean> setPassword(String userId, String password) {\n        return findById(userId)\n                .map(user -> {\n                    user.setPassword(encryptionService.encryptPassword(password));\n                    return user;\n                })\n                .flatMap(repository::save)\n                .thenReturn(true);\n    }\n\n\n    @Override\n    public Mono<UserDetail> buildUserDetail(User user, boolean withoutDynamicGroups) {\n        if (user.isAnonymous()) {\n            return Mono.just(ANONYMOUS_CURRENT_USER);\n        }\n        return Mono.deferContextual(contextView -> {\n            String ip = contextView.getOrDefault(CLIENT_IP, \\\"\\\");\n            Locale locale = LocaleUtils.getLocale(contextView);\n            return orgMemberService.getCurrentOrgMember(user.getId())\n                    .zipWhen(orgMember -> buildUserDetailGroups(user.getId(), orgMember, withoutDynamicGroups, locale))\n                    .map(tuple2 -> {\n                        OrgMember orgMember = tuple2.getT1();\n                        List<Map<String, String>> groups = tuple2.getT2();\n                        return UserDetail.builder()\n                                .id(user.getId())\n                                .name(user.getName())\n                                .avatarUrl(user.getAvatarUrl())\n                                .email(convertEmail(user.getConnections()))\n                                .ip(ip)\n                                .groups(groups)\n                                .extra(getUserDetailExtra(user, orgMember.getOrgId()))\n                                .build();\n                    });\n        });\n    }\n\n    /**\n     * In enterprise mode, user can be deleted and then related connections should be released here by appending a timestamp after the source field.\n     */\n    @Override\n    public Mono<Boolean> markUserDeletedAndInvalidConnectionsAtEnterpriseMode(String userId) {\n        if (commonConfig.getWorkspace().getMode() == WorkspaceMode.SAAS) {\n            return Mono.just(false);\n        }\n        return repository.findById(userId)\n                .flatMap(user -> {\n                    user.markAsDeleted();\n                    return mongoUpsertHelper.updateById(user, userId);\n                });\n    }\n\n    protected Map<String, Object> getUserDetailExtra(User user, String orgId) {\n        return Optional.ofNullable(user.getOrgTransformedUserInfo())\n                .map(orgTransformedUserInfo -> orgTransformedUserInfo.get(orgId))\n                .map(TransformedUserInfo::extra)\n                .orElse(convertConnections(user.getConnections()));\n    }\n\n\n\n", "CodeBleu_score": 28.38266438446559}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t> createNewUserByAuthUser(AuthUser authUser) {\n        User newUser = new User();\n        newUser.setName(authUser.getUsername());\n        newUser.setState(UserState.ACTIVATED);\n        newUser.setIsEnabled(true);\n        newUser.setTpAvatarLink(authUser.getAvatar());\n        if (AuthSourceConstants.EMAIL.equals(authUser.getSource())\n                && authUser.getAuthContext() instanceof FormAuthRequestContext formAuthRequestContext) {\n            newUser.setPassword(encryptionService.encryptPassword(formAuthRequestContext.getPassword()));\n        }\n        Set<Connection> connections = newHashSet();\n        Connection connection = authUser.toAuthConnection();\n        connections.add(connection);\n        newUser.setConnections(connections);\n        newUser.setIsNewUser(true);\n        return create(newUser);\n    }\n\n    @Override\n    public Mono<Void> getUserAvatar(ServerWebExchange exchange, String userId) {\n        return findById(userId)\n                .flatMap(user -> assetService.makeImageResponse(exchange, user.getAvatar()));\n    }\n\n    @Override\n    public Mono<Boolean> bindEmail(User user, String email) {\n        Connection connection = Connection.builder()\n                .source(AuthSourceConstants.EMAIL)\n                .name(email)\n                .rawId(email)\n                .build();\n        user.getConnections().add(connection);\n        return repository.save(user)\n                .then(Mono.just(true))\n                .onErrorResume(throwable -> {\n                    if (throwable instanceof DuplicateKeyException) {\n                        return Mono.error(new BizException(BizError.ALREADY_BIND, \\\"ALREADY_BIND\\\", email, \\\"\\\"));\n                    }\n                    return Mono.error(throwable);\n                });\n    }\n\n    @Override\n    public Mono<Boolean> addNewConnection(String userId, Connection connection) {\n        return findById(userId)\n                .doOnNext(user -> user.getConnections().add(connection))\n                .flatMap(repository::save)\n                .then(Mono.just(true));\n    }\n\n    @Override\n    public Mono<Void> deleteProfilePhoto(User visitor) {\n        String userAvatar = visitor.getAvatar();\n        visitor.setAvatar(null);\n        return repository.save(visitor).thenReturn(userAvatar)\n                .flatMap(assetService::remove);\n    }\n\n    @Override\n    public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword) {\n        return findById(userId)\n                .<User> handle((user, sink) -> {\n                    String password = user.getPassword();\n                    if (StringUtils.isBlank(password)) {\n                        sink.error(ofException(BizError.INVALID_PASSWORD, \\\"INVALID_PASSWORD\\\"));\n                        return;\n                    }\n                    String originalEncryptPassword = user.getPassword();\n                    if (!encryptionService.matchPassword(oldPassword, originalEncryptPassword)) {\n                        sink.error(ofException(BizError.INVALID_PASSWORD, \\\"INVALID_PASSWORD\\\"));\n                        return;\n                    }\n                    user.setPassword(encryptionService.encryptPassword(newPassword));\n                    sink.next(user);\n                })\n                .flatMap(repository::save)\n                .thenReturn(true);\n    }\n\n    @Override\n    public Mono<String> resetPassword(String userId) {\n        return findById(userId)\n                .flatMap(user -> {\n                    String password = user.getPassword();\n                    if (StringUtils.isBlank(password)) {\n                        return ofError(BizError.INVALID_PASSWORD, \\\"PASSWORD_NOT_SET_YET\\\");\n                    }\n\n                    String randomStr = generateNewRandomPwd();\n                    user.setPassword(encryptionService.encryptPassword(randomStr));\n                    return repository.save(user)\n                            .thenReturn(randomStr);\n                });\n    }\n\n    @SuppressWarnings(\\\"SpellCheckingInspection\\\")\n    @Nonnull\n    private static String generateNewRandomPwd() {\n        char[] possibleCharacters = (\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~`!@#$%^&*()-_=+[{]}<>?\\\")\n                .toCharArray();\n        return RandomStringUtils.random(12, 0, possibleCharacters.length - 1,\n                false, false, possibleCharacters, new SecureRandom());\n    }\n\n    @Override\n    public Mono<Boolean> setPassword(String userId, String password) {\n        return findById(userId)\n                .map(user -> {\n                    user.setPassword(encryptionService.encryptPassword(password));\n                    return user;\n                })\n                .flatMap(repository::save)\n                .thenReturn(true);\n    }\n\n\n    @Override\n    public Mono<UserDetail> buildUserDetail(User user, boolean withoutDynamicGroups) {\n        if (user.isAnonymous()) {\n            return Mono.just(ANONYMOUS_CURRENT_USER);\n        }\n        return Mono.deferContextual(contextView -> {\n            String ip = contextView.getOrDefault(CLIENT_IP, \\\"\\\");\n            Locale locale = LocaleUtils.getLocale(contextView);\n            return orgMemberService.getCurrentOrgMember(user.getId())\n                    .zipWhen(orgMember -> buildUserDetailGroups(user.getId(), orgMember, withoutDynamicGroups, locale))\n                    .map(tuple2 -> {\n                        OrgMember orgMember = tuple2.getT1();\n                        List<Map<String, String>> groups = tuple2.getT2();\n                        return UserDetail.builder()\n                                .id(user.getId())\n                                .name(user.getName())\n                                .avatarUrl(user.getAvatarUrl())\n                                .email(convertEmail(user.getConnections()))\n                                .ip(ip)\n                                .groups(groups)\n                                .extra(getUserDetailExtra(user, orgMember.getOrgId()))\n                                .build();\n                    });\n        });\n    }\n\n    /**\n     * In enterprise mode, user can be deleted and then related connections should be released here by appending a timestamp after the source field.\n     */\n    @Override\n    public Mono<Boolean> markUserDeletedAndInvalidConnectionsAtEnterpriseMode(String userId) {\n        if (commonConfig.getWorkspace().getMode() == WorkspaceMode.SAAS) {\n            return Mono.just(false);\n        }\n        return repository.findById(userId)\n                .flatMap(user -> {\n                    user.markAsDeleted();\n                    return mongoUpsertHelper.updateById(user, userId);\n                });\n    }\n\n    protected Map<String, Object> getUserDetailExtra(User user, String orgId) {\n        return Optional.ofNullable(user.getOrgTransformedUserInfo())\n                .map(orgTransformedUserInfo -> orgTransformedUserInfo.get(orgId))\n                .map(TransformedUserInfo::extra)\n                .orElse(convertConnections(user.getConnections()));\n    }\n\n\n\n", "CodeBleu_score": 28.38266438446559}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t> createNewUserByAuthUser(AuthUser authUser) {\n        User newUser = new User();\n        newUser.setName(authUser.getUsername());\n        newUser.setState(UserState.ACTIVATED);\n        newUser.setIsEnabled(true);\n        newUser.setTpAvatarLink(authUser.getAvatar());\n        if (AuthSourceConstants.EMAIL.equals(authUser.getSource())\n                && authUser.getAuthContext() instanceof FormAuthRequestContext formAuthRequestContext) {\n            newUser.setPassword(encryptionService.encryptPassword(formAuthRequestContext.getPassword()));\n        }\n        Set<Connection> connections = newHashSet();\n        Connection connection = authUser.toAuthConnection();\n        connections.add(connection);\n        newUser.setConnections(connections);\n        newUser.setIsNewUser(true);\n        return create(newUser);\n    }\n\n    @Override\n    public Mono<Void> getUserAvatar(ServerWebExchange exchange, String userId) {\n        return findById(userId)\n                .flatMap(user -> assetService.makeImageResponse(exchange, user.getAvatar()));\n    }\n\n    @Override\n    public Mono<Boolean> bindEmail(User user, String email) {\n        Connection connection = Connection.builder()\n                .source(AuthSourceConstants.EMAIL)\n                .name(email)\n                .rawId(email)\n                .build();\n        user.getConnections().add(connection);\n        return repository.save(user)\n                .then(Mono.just(true))\n                .onErrorResume(throwable -> {\n                    if (throwable instanceof DuplicateKeyException) {\n                        return Mono.error(new BizException(BizError.ALREADY_BIND, \\\"ALREADY_BIND\\\", email, \\\"\\\"));\n                    }\n                    return Mono.error(throwable);\n                });\n    }\n\n    @Override\n    public Mono<Boolean> addNewConnection(String userId, Connection connection) {\n        return findById(userId)\n                .doOnNext(user -> user.getConnections().add(connection))\n                .flatMap(repository::save)\n                .then(Mono.just(true));\n    }\n\n    @Override\n    public Mono<Void> deleteProfilePhoto(User visitor) {\n        String userAvatar = visitor.getAvatar();\n        visitor.setAvatar(null);\n        return repository.save(visitor).thenReturn(userAvatar)\n                .flatMap(assetService::remove);\n    }\n\n    @Override\n    public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword) {\n        return findById(userId)\n                .<User> handle((user, sink) -> {\n                    String password = user.getPassword();\n                    if (StringUtils.isBlank(password)) {\n                        sink.error(ofException(BizError.INVALID_PASSWORD, \\\"INVALID_PASSWORD\\\"));\n                        return;\n                    }\n                    String originalEncryptPassword = user.getPassword();\n                    if (!encryptionService.matchPassword(oldPassword, originalEncryptPassword)) {\n                        sink.error(ofException(BizError.INVALID_PASSWORD, \\\"INVALID_PASSWORD\\\"));\n                        return;\n                    }\n                    user.setPassword(encryptionService.encryptPassword(newPassword));\n                    sink.next(user);\n                })\n                .flatMap(repository::save)\n                .thenReturn(true);\n    }\n\n    @Override\n    public Mono<String> resetPassword(String userId) {\n        return findById(userId)\n                .flatMap(user -> {\n                    String password = user.getPassword();\n                    if (StringUtils.isBlank(password)) {\n                        return ofError(BizError.INVALID_PASSWORD, \\\"PASSWORD_NOT_SET_YET\\\");\n                    }\n\n                    String randomStr = generateNewRandomPwd();\n                    user.setPassword(encryptionService.encryptPassword(randomStr));\n                    return repository.save(user)\n                            .thenReturn(randomStr);\n                });\n    }\n\n    @SuppressWarnings(\\\"SpellCheckingInspection\\\")\n    @Nonnull\n    private static String generateNewRandomPwd() {\n        char[] possibleCharacters = (\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~`!@#$%^&*()-_=+[{]}<>?\\\")\n                .toCharArray();\n        return RandomStringUtils.random(12, 0, possibleCharacters.length - 1,\n                false, false, possibleCharacters, new SecureRandom());\n    }\n\n    @Override\n    public Mono<Boolean> setPassword(String userId, String password) {\n        return findById(userId)\n                .map(user -> {\n                    user.setPassword(encryptionService.encryptPassword(password));\n                    return user;\n                })\n                .flatMap(repository::save)\n                .thenReturn(true);\n    }\n\n\n    @Override\n    public Mono<UserDetail> buildUserDetail(User user, boolean withoutDynamicGroups) {\n        if (user.isAnonymous()) {\n            return Mono.just(ANONYMOUS_CURRENT_USER);\n        }\n        return Mono.deferContextual(contextView -> {\n            String ip = contextView.getOrDefault(CLIENT_IP, \\\"\\\");\n            Locale locale = LocaleUtils.getLocale(contextView);\n            return orgMemberService.getCurrentOrgMember(user.getId())\n                    .zipWhen(orgMember -> buildUserDetailGroups(user.getId(), orgMember, withoutDynamicGroups, locale))\n                    .map(tuple2 -> {\n                        OrgMember orgMember = tuple2.getT1();\n                        List<Map<String, String>> groups = tuple2.getT2();\n                        return UserDetail.builder()\n                                .id(user.getId())\n                                .name(user.getName())\n                                .avatarUrl(user.getAvatarUrl())\n                                .email(convertEmail(user.getConnections()))\n                                .ip(ip)\n                                .groups(groups)\n                                .extra(getUserDetailExtra(user, orgMember.getOrgId()))\n                                .build();\n                    });\n        });\n    }\n\n    /**\n     * In enterprise mode, user can be deleted and then related connections should be released here by appending a timestamp after the source field.\n     */\n    @Override\n    public Mono<Boolean> markUserDeletedAndInvalidConnectionsAtEnterpriseMode(String userId) {\n        if (commonConfig.getWorkspace().getMode() == WorkspaceMode.SAAS) {\n            return Mono.just(false);\n        }\n        return repository.findById(userId)\n                .flatMap(user -> {\n                    user.markAsDeleted();\n                    return mongoUpsertHelper.updateById(user, userId);\n                });\n    }\n\n    protected Map<String, Object> getUserDetailExtra(User user, String orgId) {\n        return Optional.ofNullable(user.getOrgTransformedUserInfo())\n                .map(orgTransformedUserInfo -> orgTransformedUserInfo.get(orgId))\n                .map(TransformedUserInfo::extra)\n                .orElse(convertConnections(user.getConnections()));\n    }\n\n\n\n", "CodeBleu_score": 28.38266438446559}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\tUserStatus userStatus = UserStatus.builder()\n            .id(userId)\n            .hasShowNewUserGuidance(true)\n            .build();\n\n    Update update = mongoUpsertHelper.createUpdateFromObject(userStatus);\n\n    return repository.updateUserStatus(userId, update);\n}", "CodeBleu_score": 72.49292124052087}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\tUserStatus userStatus = UserStatus.builder()\n            .id(userId)\n            .status(UserStatusType.NEW_USER_GUIDANCE_SHOWN)\n            .build();\n\n    Update update = new Update();\n    update.set(\"status\", userStatus.getStatus());\n\n    return mongoUpsertHelper.upsert(repository, userStatus, update);\n}", "CodeBleu_score": 58.97572603290797}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\tUserStatus userStatus = UserStatus.builder()\n            .id(userId)\n            .status(UserStatusType.NEW_USER_GUIDANCE_SHOWN)\n            .build();\n\n    Update update = new Update();\n    update.set(\"status\", userStatus.getStatus());\n\n    return mongoUpsertHelper.upsert(repository, userStatus, update);\n}", "CodeBleu_score": 58.97572603290797}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\"nil partition predicate\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"nil value predicate\")\n\t}\n\n\tvar wg sync.WaitGroup\n\tc.mu.RLock()\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\twg.Add(1)\n\t\t\tgo func(k string, p PartitionManager) {\n\t\t\t\tdefer wg.Done()\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t}(k, p)\n\t\t}\n\t}\n\tc.mu.RUnlock()\n\twg.Wait()\n}", "CodeBleu_score": 42.27804289610644}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\"partition predicate must not be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"value predicate must not be nil\")\n\t}\n\tvar wg sync.WaitGroup\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\twg.Add(1)\n\t\t\tgo func(k string, p PartitionManager) {\n\t\t\t\tdefer wg.Done()\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t}(k, p)\n\t\t}\n\t}\n\twg.Wait()\n}", "CodeBleu_score": 41.56146801180439}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\"nil predicatePartition\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"nil predicateValue\")\n\t}\n\tvar wg sync.WaitGroup\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\twg.Add(1)\n\t\t\tgo func(k string, p PartitionManager) {\n\t\t\t\tdefer wg.Done()\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t}(k, p)\n\t\t}\n\t}\n\twg.Wait()\n}", "CodeBleu_score": 42.5680465598097}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\tregexp\\\"\n\t\\\"runtime\\\"\n\t\\\"sync\\\"\n\t\\\"time\\\"\n\n\t\\\"github.com/bep/lazycache\\\"\n\t\\\"github.com/bep/logg\\\"\n\t\\\"github.com/gohugoio/hugo/common/collections\\\"\n\t\\\"github.com/gohugoio/hugo/common/herrors\\\"\n\t\\\"github.com/gohugoio/hugo/common/loggers\\\"\n\t\\\"github.com/gohugoio/hugo/common/paths\\\"\n\t\\\"github.com/gohugoio/hugo/common/rungroup\\\"\n\t\\\"github.com/gohugoio/hugo/config\\\"\n\t\\\"github.com/gohugoio/hugo/helpers\\\"\n\t\\\"github.com/gohugoio/hugo/identity\\\"\n\t\\\"github.com/gohugoio/hugo/resources/resource\\\"", "CodeBleu_score": 25.685177164742335}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\tregexp\\\"\n\t\\\"runtime\\\"\n\t\\\"sync\\\"\n\t\\\"time\\\"\n\n\t\\\"github.com/bep/lazycache\\\"\n\t\\\"github.com/bep/logg\\\"\n\t\\\"github.com/gohugoio/hugo/common/collections\\\"\n\t\\\"github.com/gohugoio/hugo/common/herrors\\\"\n\t\\\"github.com/gohugoio/hugo/common/loggers\\\"\n\t\\\"github.com/gohugoio/hugo/common/paths\\\"\n\t\\\"github.com/gohugoio/hugo/common/rungroup\\\"\n\t\\\"github.com/gohugoio/hugo/config\\\"\n\t\\\"github.com/gohugoio/hugo/helpers\\\"\n\t\\\"github.com/gohugoio/hugo/identity\\\"\n\t\\\"github.com/gohugoio/hugo/resources/resource\\\"", "CodeBleu_score": 25.685177164742335}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\tregexp\\\"\n\t\\\"runtime\\\"\n\t\\\"sync\\\"\n\t\\\"time\\\"\n\n\t\\\"github.com/bep/lazycache\\\"\n\t\\\"github.com/bep/logg\\\"\n\t\\\"github.com/gohugoio/hugo/common/collections\\\"\n\t\\\"github.com/gohugoio/hugo/common/herrors\\\"\n\t\\\"github.com/gohugoio/hugo/common/loggers\\\"\n\t\\\"github.com/gohugoio/hugo/common/paths\\\"\n\t\\\"github.com/gohugoio/hugo/common/rungroup\\\"\n\t\\\"github.com/gohugoio/hugo/config\\\"\n\t\\\"github.com/gohugoio/hugo/helpers\\\"\n\t\\\"github.com/gohugoio/hugo/identity\\\"\n\t\\\"github.com/gohugoio/hugo/resources/resource\\\"", "CodeBleu_score": 25.685177164742335}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\treturn Mono.from(connectionFactory.create())\n        .flatMap(connection -> Mono.from(connection.getMetadata())\n            .map(metadata -> {\n                Map<String, Object> map = new HashMap<>();\n                map.put(\"product\", metadata.getDatabaseProductName());\n                map.put(\"version\", metadata.getDatabaseVersion());\n                return map;\n            })\n            .switchIfEmpty(Mono.just(new HashMap<>()))\n            .doFinally(s -> connection.close())\n        )\n        .block();\n}", "CodeBleu_score": 37.63467764249089}, {"code": "public Map<String, Object> contributorMap(){\n\treturn Mono.from(connectionFactory.create())\n        .flatMap(connection -> Mono.from(connection.getMetadata()))\n        .map(DatabaseInfoContributor::toMap)\n        .defaultIfEmpty(new HashMap<>())\n        .block();\n}", "CodeBleu_score": 18.98174596937917}, {"code": "public Map<String, Object> contributorMap(){\n\treturn Mono.from(connectionFactory.create())\n        .flatMap(connection -> Mono.justOrEmpty(connection.getMetadata()))\n        .map(metadata -> {\n            Map<String, Object> map = new HashMap<>();\n            map.put(\"product\", metadata.getDatabaseProductName());\n            map.put(\"version\", metadata.getDatabaseVersion());\n            return map;\n        })\n        .defaultIfEmpty(new HashMap<>())\n        .block();\n}", "CodeBleu_score": 38.74247247993373}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tvar user = SystemSetting.get(configMap, User.GROUP, User.class);\n    if (user == null) {\n        info.setAllowRegistration(false);\n        info.setMustVerifyEmailOnRegistration(false);\n    } else {\n        info.setAllowRegistration(user.getEnable());\n        info.setMustVerifyEmailOnRegistration(user.getMustVerifyEmail());\n    }\n}", "CodeBleu_score": 62.31975158131245}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tvar user = SystemSetting.get(configMap, User.GROUP, User.class);\n    if (user == null) {\n        info.setAllowRegistration(false);\n        info.setMustVerifyEmailOnRegistration(false);\n    } else {\n        info.setAllowRegistration(user.getEnable() != null && user.getEnable());\n        info.setMustVerifyEmailOnRegistration(user.getMustVerifyEmail() != null && user.getMustVerifyEmail());\n    }\n}", "CodeBleu_score": 70.55110750814076}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tvar user = SystemSetting.get(configMap, User.GROUP, User.class);\n    if (user == null) {\n        info.setAllowRegistration(false);\n        info.setMustVerifyEmailOnRegistration(false);\n    } else {\n        info.setAllowRegistration(user.getEnable() != null && user.getEnable());\n        info.setMustVerifyEmailOnRegistration(isTrue(user.getMustVerifyEmailOnRegistration()));\n    }\n}", "CodeBleu_score": 69.82195068815186}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\tThread thread = new Thread(new RestartThread(application, args));\n    thread.setName(\"restart-thread\");\n    thread.setContextClassLoader(Application.class.getClassLoader());\n    thread.setDaemon(false);\n    thread.start();\n    return Collections.singletonMap(\"message\", \"Restarting\");\n}", "CodeBleu_score": 54.62646610211783}, {"code": "public Object restart(){\n\tThreadGroup threadGroup = new ThreadGroup(\"restart\");\n    Thread thread = new Thread(threadGroup, \"restart\", new Runnable() {\n        @Override\n        public void run() {\n            try {\n                log.info(\"Restarting application...\");\n                context.close();\n                application.run(args);\n            } catch (Exception e) {\n                log.error(\"Restart failed\", e);\n            }\n        }\n    });\n    thread.setContextClassLoader(Application.class.getClassLoader());\n    thread.setDaemon(false);\n    thread.start();\n    return Collections.singletonMap(\"message\", \"Restarting\");\n}", "CodeBleu_score": 61.484883729549786}, {"code": "public Object restart(){\n\tnew Thread(\n        () -> {\n            try {\n                log.info(\"Restarting the application...\");\n                Thread.sleep(5000);\n                log.info(\"Stopping the application...\");\n                context.close();\n                log.info(\"Application stopped...\");\n                Thread.sleep(5000);\n                log.info(\"Starting the application...\");\n                application.run(args);\n            } catch (Exception e) {\n                log.error(\"Application restart failed\", e);\n            }\n        },\n        \"restart-thread\"\n    ) {{\n        setContextClassLoader(Application.class.getClassLoader());\n        setDaemon(false);\n    }}.start();\n    return Collections.singletonMap(\"message\", \"Restarting...\");\n}", "CodeBleu_score": 27.430133415706226}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t// TODO: 2020/4/1 \u4e34\u65f6\u89e3\u51b3\u65b9\u6848\uff0c\u540e\u7eed\u5347\u7ea7springboot\u7248\u672c\u540e\u5220\u9664\n        configurer.customCodecs().register(new Jackson2JsonEncoder(objectMapper));\n        configurer.customCodecs().register(new Jackson2JsonDecoder(objectMapper));\n    }", "CodeBleu_score": 64.6472957444179}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\tconfigurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n        configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n    }", "CodeBleu_score": 71.09720633011617}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\tconfigurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n        configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n    }", "CodeBleu_score": 92.71920594309859}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn route(\n        accept(MediaType.TEXT_HTML).and(path(\"/console/**\").and(path(\"/console/assets/**\").negate()).and(method(HttpMethod.GET).and(WebSocketRequestPredicate.INSTANCE.negate()))),\n        request -> ServerResponse.permanentRedirect(URI.create(\"/console/index.html\")).build()\n    );\n}", "CodeBleu_score": 32.051777927795555}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn route(\n        method(HttpMethod.GET).and(path(\"/console/**\")).and(accept(MediaType.TEXT_HTML)).and(WebSocketRequestPredicate.not()),\n        request -> {\n            var path = request.path();\n            if (path.startsWith(\"/console/assets/\")) {\n                return ServerResponse.notFound().build();\n            }\n            var consoleIndexLocation = FILE_URL_PREFIX + haloProp.getConsole().getIndex();\n            return ServerResponse.temporaryRedirect(consoleIndexLocation).build();\n        });\n}", "CodeBleu_score": 36.53203682064453}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn route(\n        method(HttpMethod.GET).and(\n            accept(MediaType.TEXT_HTML).and(\n                path(\"/console/**\").and(\n                    WebSocketRequestPredicate.notWebSocketRequest().and(\n                        path(\"/console/assets/**\").negate()\n                    )\n                )\n            )\n        ),\n        request -> ServerResponse.permanentRedirect(URI.create(\"/console/index.html\")).build()\n    );\n}", "CodeBleu_score": 29.17776532661559}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\tvar ucPredicate = method(HttpMethod.GET)\n        .and(path(\"/uc/**\").and(path(\"/uc/assets/**\").negate()))\n        .and(accept(MediaType.TEXT_HTML))\n        .and(new WebSocketRequestPredicate().negate());\n    return route(ucPredicate,\n        request -> this.serveIndex(haloProp.getUc().getLocation() + \"index.html\"));\n}", "CodeBleu_score": 90.07281020318733}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\tvar ucPredicate = method(HttpMethod.GET)\n        .and(path(\"/uc/**\").and(path(\"/uc/assets/**\").negate()))\n        .and(accept(MediaType.TEXT_HTML))\n        .and(new WebSocketRequestPredicate().negate());\n    return route(ucPredicate,\n        request -> this.serveIndex(haloProp.getUc().getLocation() + \"index.html\"));\n}", "CodeBleu_score": 90.07281020318733}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\tvar ucPredicate = method(HttpMethod.GET)\n        .and(path(\"/uc/**\").and(path(\"/uc/assets/**\").negate()))\n        .and(accept(MediaType.TEXT_HTML))\n        .and(new WebSocketRequestPredicate().negate());\n    return route(ucPredicate, request -> this.serveIndex(haloProp.getUc().getLocation() + \"index.html\"));\n}", "CodeBleu_score": 89.33225333832293}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t@Bean\n    public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository(SessionProperties sessionProperties,\n                                                                                  ServerProperties serverProperties) {\n        return new InMemoryReactiveIndexedSessionRepository(new ConcurrentHashMap<>(100),\n            serverProperties.getServlet().getSession().getTimeout().toMillis());\n    }\n}", "CodeBleu_score": 35.550082246894846}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\tnew InMemoryReactiveIndexedSessionRepository(new ConcurrentHashMap<>()) {\n        @Override\n        public void setDefaultMaxInactiveInterval(int defaultMaxInactiveInterval) {\n            super.setDefaultMaxInactiveInterval(serverProperties.getServlet().getSession().getTimeout().toSeconds());\n        }\n    }\n}", "CodeBleu_score": 26.93689254083334}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\treturn new InMemoryReactiveIndexedSessionRepository(new ConcurrentHashMap<>(),\n            new SessionProperties().getStoreType(),\n            new ServerProperties().getServlet().getSession().getTimeout());\n}", "CodeBleu_score": 18.51004762291352}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tvar userDetailsService = new DefaultUserDetailService(userService, roleService);\n    userDetailsService.setTwoFactorEnabled(haloProperties.getSecurity().getTwoFactor().isEnabled());\n    return userDetailsService;\n}", "CodeBleu_score": 46.82922872674966}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tvar userDetailService = new DefaultUserDetailService(userService, roleService);\n    userDetailService.setEnableTwoFactorAuthentication(haloProperties.getSecurity().getTwoFactorAuthentication().isEnabled());\n    return userDetailService;\n}", "CodeBleu_score": 52.36754358166324}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tvar userDetailService = new DefaultUserDetailService(userService, roleService);\n    userDetailService.setEnableTwoFactorAuthentication(\n            haloProperties.getSecurity().getTwoFactorAuthentication().isEnabled());\n    return userDetailService;\n}", "CodeBleu_score": 52.89624336589791}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\tMap<String, String> annotations = new LinkedHashMap<>();\n    annotations.put(\"avatar\", StringUtils.defaultIfBlank(avatar, \"\"));\n    annotations.put(\"website\", StringUtils.defaultIfBlank(website, \"\"));\n    return new Comment.CommentOwner(\"email\", email, displayName, annotations);\n}", "CodeBleu_score": 35.043428642156606}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\tMap<String, Object> annotations = new LinkedHashMap<>();\n    annotations.put(\"avatar\", StringUtils.defaultString(avatar, \"\"));\n    annotations.put(\"website\", StringUtils.defaultString(website, \"\"));\n    return new Comment.CommentOwner(email, \"email\", displayName, annotations);\n}", "CodeBleu_score": 31.615874195749853}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\tMap<String, Object> annotations = new LinkedHashMap<>();\n    annotations.put(\"avatar\", StringUtils.defaultString(avatar));\n    annotations.put(\"website\", StringUtils.defaultString(website));\n    return new Comment.CommentOwner(email, \"email\", displayName, annotations);\n}", "CodeBleu_score": 33.53889652882159}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tif (commentOwner.getKind().equals(\"email\")) {\n        return client.fetch(User.class, post.getSpec().getOwner().getName()).map(user -> user.getSpec().getEmail().equals(commentOwner.getName())).orElse(false);\n    }\n    return post.getSpec().getOwner().getName().equals(commentOwner.getName());\n}", "CodeBleu_score": 32.514985823946176}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tif (commentOwner.getKind() == User.Kind.EMAIL) {\n        Optional<User> postOwner = client.fetch(User.class, post.getSpec().getOwner().getName());\n        return postOwner.map(user -> StringUtils.equals(user.getSpec().getEmail(), commentOwner.getName())).orElse(false);\n    }\n    return StringUtils.equals(post.getSpec().getOwner().getName(), commentOwner.getName());\n}", "CodeBleu_score": 45.152122953209506}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tif (commentOwner.getKind().equals(User.class.getSimpleName())) {\n        return commentOwner.getName().equals(post.getSpec().getOwner().getName());\n    }\n    var postOwner = client.fetch(User.class, post.getSpec().getOwner().getName()).orElseThrow();\n    return commentOwner.getName().equals(postOwner.getSpec().getEmail());\n}", "CodeBleu_score": 45.97510069373089}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\tListOptions listOptions = new ListOptions();\n    listOptions.setFieldSelector(labelAndFieldSelectorToListOptions(exchange, Comment.class));\n\n    var fieldQuery = and(\n        equal(Comment.STATUS_FIELD, CommentStatus.PUBLISHED),\n        contains(Comment.METADATA_FIELD, Comment.METADATA_NAME_FIELD, getKeyword())\n    );\n\n    if (getOwnerKind() != null && getOwnerName() != null) {\n        fieldQuery = fieldQuery.and(equal(Comment.METADATA_FIELD, Comment.METADATA_OWNER_KIND_FIELD, getOwnerKind()), equal(Comment.METADATA_FIELD, Comment.METADATA_OWNER_NAME_FIELD, getOwnerName()));\n    }\n\n    listOptions.setFieldQuery(fieldQuery);\n    return listOptions;\n}", "CodeBleu_score": 36.37635796229854}, {"code": "public ListOptions toListOptions(){\n\tvar fieldSelector = labelAndFieldSelectorToListOptions(exchange);\n    var query = and(\n        equal(\"status.ownerKind\", getOwnerKind()),\n        equal(\"status.ownerName\", getOwnerName()),\n        contains(\"content\", getKeyword())\n    );\n    fieldSelector.setQuery(query);\n    return fieldSelector;\n}", "CodeBleu_score": 21.087548836194898}, {"code": "public ListOptions toListOptions(){\n\tvar fieldSelector = labelAndFieldSelectorToListOptions(exchange, Comment.class);\n    var query = and(\n        equal(\"status.isDeleted\", false),\n        contains(\"metadata.name\", getKeyword()),\n        contains(\"spec.ownerName\", getOwnerName()),\n        contains(\"spec.ownerKind\", getOwnerKind())\n    );\n    fieldSelector.setQuery(query);\n    return fieldSelector;\n}", "CodeBleu_score": 25.47782000541574}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\tServiceImpl(ReactiveExtensionClient client,\n        UserService userService,\n        SystemConfigurableEnvironmentFetcher environmentFetcher,\n        CounterService counterService, RoleService roleService,\n        ExtensionGetter extensionGetter\n    ) {\n        this.client = client;\n        this.userService = userService;\n        this.environmentFetcher = environmentFetcher;\n        this.counterService = counterService;\n        this.roleService = roleService;\n        this.extensionGetter = extensionGetter;\n    }\n\n    @Override\n    public Mono<ListResult<ListedComment>> listComment(CommentQuery commentQuery) {\n        return this.client.listBy(Comment.class, commentQuery.toListOptions(),\n                commentQuery.toPageRequest())\n            .flatMap(comments -> Flux.fromStream(comments.get()\n                    .map(this::toListedComment))\n                .concatMap(Function.identity())\n                .collectList()\n                .map(list -> new ListResult<>(comments.getPage(), comments.getSize(),\n                    comments.getTotal(), list)\n                )\n            );\n    }\n\n    @Override\n    public Mono<Comment> create(Comment comment) {\n        return environmentFetcher.fetchComment()\n            .flatMap(commentSetting -> {\n                if (Boolean.FALSE.equals(commentSetting.getEnable())) {\n                    return Mono.error(\n                        new AccessDeniedException(\\\"The comment function has been turned off.\\\",\n                            \\\"problemDetail.comment.turnedOff\\\", null));\n                }\n                if (checkCommentOwner(comment, commentSetting.getSystemUserOnly())) {\n                    return Mono.error(\n                        new AccessDeniedException(\\\"Allow only system users to comment.\\\",\n                            \\\"problemDetail.comment.systemUsersOnly\\\", null));\n                }\n\n                if (comment.getSpec().getTop() == null) {\n                    comment.getSpec().setTop(false);\n                }\n                if (comment.getSpec().getPriority() == null) {\n                    comment.getSpec().setPriority(0);\n                }\n                comment.getSpec()\n                    .setApproved(Boolean.FALSE.equals(commentSetting.getRequireReviewForNew()));\n\n                if (BooleanUtils.isTrue(comment.getSpec().getApproved())\n                    && comment.getSpec().getApprovedTime() == null) {\n                    comment.getSpec().setApprovedTime(Instant.now());\n                }\n\n                if (comment.getSpec().getCreationTime() == null) {\n                    comment.getSpec().setCreationTime(Instant.now());\n                }\n\n                comment.getSpec().setHidden(false);\n\n                // return if the comment owner is not null\n                if (comment.getSpec().getOwner() != null) {\n                    return Mono.just(comment);\n                }\n                // populate owner from current user\n                return fetchCurrentUser()\n                    .flatMap(currentUser -> ReactiveSecurityContextHolder.getContext()\n                        .flatMap(securityContext -> {\n                            var authentication = securityContext.getAuthentication();\n                            var roles = AuthorityUtils.authoritiesToRoles(\n                                authentication.getAuthorities());\n                            return roleService.contains(roles,\n                                    Set.of(AuthorityUtils.COMMENT_MANAGEMENT_ROLE_NAME))\n                                .doOnNext(result -> {\n                                    if (result) {\n                                        comment.getSpec().setApproved(true);\n                                        comment.getSpec().setApprovedTime(Instant.now());\n                                    }\n                                })\n                                .thenReturn(toCommentOwner(currentUser));\n                        }))\n                    .map(owner -> {\n                        comment.getSpec().setOwner(owner);\n                        return comment;\n                    })\n                    .switchIfEmpty(\n                        Mono.error(new IllegalStateException(\\\"The owner must not be null.\\\")));\n            })\n            .flatMap(client::create);\n    }\n\n    @Override\n    public Mono<Void> removeBySubject(@NonNull Ref subjectRef) {\n        Assert.notNull(subjectRef, \\\"The subjectRef must not be null.\\\");\n        return cleanupComments(subjectRef, 200);\n    }\n\n    private Mono<Void> cleanupComments(Ref subjectRef, int batchSize) {\n        // ascending order by creation time and name\n        final var pageRequest = PageRequestImpl.of(1, batchSize,\n            Sort.by(\\\"metadata.creationTimestamp\\\", \\\"metadata.name\\\"));\n        // forever loop first page until no more to delete\n        return listCommentsByRef(subjectRef, pageRequest)\n            .flatMap(page -> Flux.fromIterable(page.getItems())\n                .flatMap(this::deleteWithRetry)\n                .then(page.hasNext() ? cleanupComments(subjectRef, batchSize) : Mono.empty())\n            );\n    }\n\n    private Mono<Comment> deleteWithRetry(Comment item) {\n        return client.delete(item)\n            .onErrorResume(OptimisticLockingFailureException.class,\n                e -> attemptToDelete(item.getMetadata().getName()));\n    }\n\n    private Mono<Comment> attemptToDelete(String name) {\n        return Mono.defer(() -> client.fetch(Comment.class, name)\n                .flatMap(client::delete)\n            )\n            .retryWhen(Retry.backoff(8, Duration.ofMillis(100))\n                .filter(OptimisticLockingFailureException.class::isInstance));\n    }\n\n    Mono<ListResult<Comment>> listCommentsByRef(Ref subjectRef, PageRequest pageRequest) {\n        var listOptions = new ListOptions();\n        listOptions.setFieldSelector(FieldSelector.of(\n            and(equal(\\\"spec.subjectRef\\\", Comment.toSubjectRefKey(subjectRef)),\n                isNull(\\\"metadata.deletionTimestamp\\\"))\n        ));\n        return client.listBy(Comment.class, listOptions, pageRequest);\n    }\n\n    private boolean checkCommentOwner(Comment comment, Boolean onlySystemUser) {\n        Comment.CommentOwner owner = comment.getSpec().getOwner();\n        if (Boolean.TRUE.equals(onlySystemUser)) {\n            return owner != null && Comment.CommentOwner.KIND_EMAIL.equals(owner.getKind());\n        }\n        return false;\n    }\n\n    private Comment.CommentOwner toCommentOwner(User user) {\n        Comment.CommentOwner owner = new Comment.CommentOwner();\n        owner.setKind(User.KIND);\n        owner.setName(user.getMetadata().getName());\n        owner.setDisplayName(user.getSpec().getDisplayName());\n        return owner;\n    }\n\n    private Mono<User> fetchCurrentUser() {\n        return ReactiveSecurityContextHolder.getContext()\n            .map(securityContext -> securityContext.getAuthentication().getName())\n            .flatMap(username -> client.fetch(User.class, username));\n    }\n\n    private Mono<ListedComment> toListedComment(Comment comment) {\n        var builder = ListedComment.builder().comment(comment);\n        // not empty\n        var ownerInfoMono = getCommentOwnerInfo(comment.getSpec().getOwner())\n            .doOnNext(builder::owner);\n        var subjectMono = getCommentSubject(comment.getSpec().getSubjectRef())\n            .doOnNext(builder::subject);\n        var statsMono = fetchStats(comment.getMetadata().getName())\n            .doOnNext(builder::stats);\n        return Mono.when(ownerInfoMono, subjectMono, statsMono)\n            .then(Mono.fromSupplier(builder::build));\n    }\n\n\n\n", "CodeBleu_score": 30.23499081008529}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\tServiceImpl(ReactiveExtensionClient client,\n        UserService userService,\n        SystemConfigurableEnvironmentFetcher environmentFetcher,\n        CounterService counterService, RoleService roleService,\n        ExtensionGetter extensionGetter\n    ) {\n        this.client = client;\n        this.userService = userService;\n        this.environmentFetcher = environmentFetcher;\n        this.counterService = counterService;\n        this.roleService = roleService;\n        this.extensionGetter = extensionGetter;\n    }\n\n    @Override\n    public Mono<ListResult<ListedComment>> listComment(CommentQuery commentQuery) {\n        return this.client.listBy(Comment.class, commentQuery.toListOptions(),\n                commentQuery.toPageRequest())\n            .flatMap(comments -> Flux.fromStream(comments.get()\n                    .map(this::toListedComment))\n                .concatMap(Function.identity())\n                .collectList()\n                .map(list -> new ListResult<>(comments.getPage(), comments.getSize(),\n                    comments.getTotal(), list)\n                )\n            );\n    }\n\n    @Override\n    public Mono<Comment> create(Comment comment) {\n        return environmentFetcher.fetchComment()\n            .flatMap(commentSetting -> {\n                if (Boolean.FALSE.equals(commentSetting.getEnable())) {\n                    return Mono.error(\n                        new AccessDeniedException(\\\"The comment function has been turned off.\\\",\n                            \\\"problemDetail.comment.turnedOff\\\", null));\n                }\n                if (checkCommentOwner(comment, commentSetting.getSystemUserOnly())) {\n                    return Mono.error(\n                        new AccessDeniedException(\\\"Allow only system users to comment.\\\",\n                            \\\"problemDetail.comment.systemUsersOnly\\\", null));\n                }\n\n                if (comment.getSpec().getTop() == null) {\n                    comment.getSpec().setTop(false);\n                }\n                if (comment.getSpec().getPriority() == null) {\n                    comment.getSpec().setPriority(0);\n                }\n                comment.getSpec()\n                    .setApproved(Boolean.FALSE.equals(commentSetting.getRequireReviewForNew()));\n\n                if (BooleanUtils.isTrue(comment.getSpec().getApproved())\n                    && comment.getSpec().getApprovedTime() == null) {\n                    comment.getSpec().setApprovedTime(Instant.now());\n                }\n\n                if (comment.getSpec().getCreationTime() == null) {\n                    comment.getSpec().setCreationTime(Instant.now());\n                }\n\n                comment.getSpec().setHidden(false);\n\n                // return if the comment owner is not null\n                if (comment.getSpec().getOwner() != null) {\n                    return Mono.just(comment);\n                }\n                // populate owner from current user\n                return fetchCurrentUser()\n                    .flatMap(currentUser -> ReactiveSecurityContextHolder.getContext()\n                        .flatMap(securityContext -> {\n                            var authentication = securityContext.getAuthentication();\n                            var roles = AuthorityUtils.authoritiesToRoles(\n                                authentication.getAuthorities());\n                            return roleService.contains(roles,\n                                    Set.of(AuthorityUtils.COMMENT_MANAGEMENT_ROLE_NAME))\n                                .doOnNext(result -> {\n                                    if (result) {\n                                        comment.getSpec().setApproved(true);\n                                        comment.getSpec().setApprovedTime(Instant.now());\n                                    }\n                                })\n                                .thenReturn(toCommentOwner(currentUser));\n                        }))\n                    .map(owner -> {\n                        comment.getSpec().setOwner(owner);\n                        return comment;\n                    })\n                    .switchIfEmpty(\n                        Mono.error(new IllegalStateException(\\\"The owner must not be null.\\\")));\n            })\n            .flatMap(client::create);\n    }\n\n    @Override\n    public Mono<Void> removeBySubject(@NonNull Ref subjectRef) {\n        Assert.notNull(subjectRef, \\\"The subjectRef must not be null.\\\");\n        return cleanupComments(subjectRef, 200);\n    }\n\n    private Mono<Void> cleanupComments(Ref subjectRef, int batchSize) {\n        // ascending order by creation time and name\n        final var pageRequest = PageRequestImpl.of(1, batchSize,\n            Sort.by(\\\"metadata.creationTimestamp\\\", \\\"metadata.name\\\"));\n        // forever loop first page until no more to delete\n        return listCommentsByRef(subjectRef, pageRequest)\n            .flatMap(page -> Flux.fromIterable(page.getItems())\n                .flatMap(this::deleteWithRetry)\n                .then(page.hasNext() ? cleanupComments(subjectRef, batchSize) : Mono.empty())\n            );\n    }\n\n    private Mono<Comment> deleteWithRetry(Comment item) {\n        return client.delete(item)\n            .onErrorResume(OptimisticLockingFailureException.class,\n                e -> attemptToDelete(item.getMetadata().getName()));\n    }\n\n    private Mono<Comment> attemptToDelete(String name) {\n        return Mono.defer(() -> client.fetch(Comment.class, name)\n                .flatMap(client::delete)\n            )\n            .retryWhen(Retry.backoff(8, Duration.ofMillis(100))\n                .filter(OptimisticLockingFailureException.class::isInstance));\n    }\n\n    Mono<ListResult<Comment>> listCommentsByRef(Ref subjectRef, PageRequest pageRequest) {\n        var listOptions = new ListOptions();\n        listOptions.setFieldSelector(FieldSelector.of(\n            and(equal(\\\"spec.subjectRef\\\", Comment.toSubjectRefKey(subjectRef)),\n                isNull(\\\"metadata.deletionTimestamp\\\"))\n        ));\n        return client.listBy(Comment.class, listOptions, pageRequest);\n    }\n\n    private boolean checkCommentOwner(Comment comment, Boolean onlySystemUser) {\n        Comment.CommentOwner owner = comment.getSpec().getOwner();\n        if (Boolean.TRUE.equals(onlySystemUser)) {\n            return owner != null && Comment.CommentOwner.KIND_EMAIL.equals(owner.getKind());\n        }\n        return false;\n    }\n\n    private Comment.CommentOwner toCommentOwner(User user) {\n        Comment.CommentOwner owner = new Comment.CommentOwner();\n        owner.setKind(User.KIND);\n        owner.setName(user.getMetadata().getName());\n        owner.setDisplayName(user.getSpec().getDisplayName());\n        return owner;\n    }\n\n    private Mono<User> fetchCurrentUser() {\n        return ReactiveSecurityContextHolder.getContext()\n            .map(securityContext -> securityContext.getAuthentication().getName())\n            .flatMap(username -> client.fetch(User.class, username));\n    }\n\n    private Mono<ListedComment> toListedComment(Comment comment) {\n        var builder = ListedComment.builder().comment(comment);\n        // not empty\n        var ownerInfoMono = getCommentOwnerInfo(comment.getSpec().getOwner())\n            .doOnNext(builder::owner);\n        var subjectMono = getCommentSubject(comment.getSpec().getSubjectRef())\n            .doOnNext(builder::subject);\n        var statsMono = fetchStats(comment.getMetadata().getName())\n            .doOnNext(builder::stats);\n        return Mono.when(ownerInfoMono, subjectMono, statsMono)\n            .then(Mono.fromSupplier(builder::build));\n    }\n\n\n\n", "CodeBleu_score": 30.23499081008529}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\tServiceImpl(ReactiveExtensionClient client,\n        UserService userService,\n        SystemConfigurableEnvironmentFetcher environmentFetcher,\n        CounterService counterService, RoleService roleService,\n        ExtensionGetter extensionGetter\n    ) {\n        this.client = client;\n        this.userService = userService;\n        this.environmentFetcher = environmentFetcher;\n        this.counterService = counterService;\n        this.roleService = roleService;\n        this.extensionGetter = extensionGetter;\n    }\n\n    @Override\n    public Mono<ListResult<ListedComment>> listComment(CommentQuery commentQuery) {\n        return this.client.listBy(Comment.class, commentQuery.toListOptions(),\n                commentQuery.toPageRequest())\n            .flatMap(comments -> Flux.fromStream(comments.get()\n                    .map(this::toListedComment))\n                .concatMap(Function.identity())\n                .collectList()\n                .map(list -> new ListResult<>(comments.getPage(), comments.getSize(),\n                    comments.getTotal(), list)\n                )\n            );\n    }\n\n    @Override\n    public Mono<Comment> create(Comment comment) {\n        return environmentFetcher.fetchComment()\n            .flatMap(commentSetting -> {\n                if (Boolean.FALSE.equals(commentSetting.getEnable())) {\n                    return Mono.error(\n                        new AccessDeniedException(\\\"The comment function has been turned off.\\\",\n                            \\\"problemDetail.comment.turnedOff\\\", null));\n                }\n                if (checkCommentOwner(comment, commentSetting.getSystemUserOnly())) {\n                    return Mono.error(\n                        new AccessDeniedException(\\\"Allow only system users to comment.\\\",\n                            \\\"problemDetail.comment.systemUsersOnly\\\", null));\n                }\n\n                if (comment.getSpec().getTop() == null) {\n                    comment.getSpec().setTop(false);\n                }\n                if (comment.getSpec().getPriority() == null) {\n                    comment.getSpec().setPriority(0);\n                }\n                comment.getSpec()\n                    .setApproved(Boolean.FALSE.equals(commentSetting.getRequireReviewForNew()));\n\n                if (BooleanUtils.isTrue(comment.getSpec().getApproved())\n                    && comment.getSpec().getApprovedTime() == null) {\n                    comment.getSpec().setApprovedTime(Instant.now());\n                }\n\n                if (comment.getSpec().getCreationTime() == null) {\n                    comment.getSpec().setCreationTime(Instant.now());\n                }\n\n                comment.getSpec().setHidden(false);\n\n                // return if the comment owner is not null\n                if (comment.getSpec().getOwner() != null) {\n                    return Mono.just(comment);\n                }\n                // populate owner from current user\n                return fetchCurrentUser()\n                    .flatMap(currentUser -> ReactiveSecurityContextHolder.getContext()\n                        .flatMap(securityContext -> {\n                            var authentication = securityContext.getAuthentication();\n                            var roles = AuthorityUtils.authoritiesToRoles(\n                                authentication.getAuthorities());\n                            return roleService.contains(roles,\n                                    Set.of(AuthorityUtils.COMMENT_MANAGEMENT_ROLE_NAME))\n                                .doOnNext(result -> {\n                                    if (result) {\n                                        comment.getSpec().setApproved(true);\n                                        comment.getSpec().setApprovedTime(Instant.now());\n                                    }\n                                })\n                                .thenReturn(toCommentOwner(currentUser));\n                        }))\n                    .map(owner -> {\n                        comment.getSpec().setOwner(owner);\n                        return comment;\n                    })\n                    .switchIfEmpty(\n                        Mono.error(new IllegalStateException(\\\"The owner must not be null.\\\")));\n            })\n            .flatMap(client::create);\n    }\n\n    @Override\n    public Mono<Void> removeBySubject(@NonNull Ref subjectRef) {\n        Assert.notNull(subjectRef, \\\"The subjectRef must not be null.\\\");\n        return cleanupComments(subjectRef, 200);\n    }\n\n    private Mono<Void> cleanupComments(Ref subjectRef, int batchSize) {\n        // ascending order by creation time and name\n        final var pageRequest = PageRequestImpl.of(1, batchSize,\n            Sort.by(\\\"metadata.creationTimestamp\\\", \\\"metadata.name\\\"));\n        // forever loop first page until no more to delete\n        return listCommentsByRef(subjectRef, pageRequest)\n            .flatMap(page -> Flux.fromIterable(page.getItems())\n                .flatMap(this::deleteWithRetry)\n                .then(page.hasNext() ? cleanupComments(subjectRef, batchSize) : Mono.empty())\n            );\n    }\n\n    private Mono<Comment> deleteWithRetry(Comment item) {\n        return client.delete(item)\n            .onErrorResume(OptimisticLockingFailureException.class,\n                e -> attemptToDelete(item.getMetadata().getName()));\n    }\n\n    private Mono<Comment> attemptToDelete(String name) {\n        return Mono.defer(() -> client.fetch(Comment.class, name)\n                .flatMap(client::delete)\n            )\n            .retryWhen(Retry.backoff(8, Duration.ofMillis(100))\n                .filter(OptimisticLockingFailureException.class::isInstance));\n    }\n\n    Mono<ListResult<Comment>> listCommentsByRef(Ref subjectRef, PageRequest pageRequest) {\n        var listOptions = new ListOptions();\n        listOptions.setFieldSelector(FieldSelector.of(\n            and(equal(\\\"spec.subjectRef\\\", Comment.toSubjectRefKey(subjectRef)),\n                isNull(\\\"metadata.deletionTimestamp\\\"))\n        ));\n        return client.listBy(Comment.class, listOptions, pageRequest);\n    }\n\n    private boolean checkCommentOwner(Comment comment, Boolean onlySystemUser) {\n        Comment.CommentOwner owner = comment.getSpec().getOwner();\n        if (Boolean.TRUE.equals(onlySystemUser)) {\n            return owner != null && Comment.CommentOwner.KIND_EMAIL.equals(owner.getKind());\n        }\n        return false;\n    }\n\n    private Comment.CommentOwner toCommentOwner(User user) {\n        Comment.CommentOwner owner = new Comment.CommentOwner();\n        owner.setKind(User.KIND);\n        owner.setName(user.getMetadata().getName());\n        owner.setDisplayName(user.getSpec().getDisplayName());\n        return owner;\n    }\n\n    private Mono<User> fetchCurrentUser() {\n        return ReactiveSecurityContextHolder.getContext()\n            .map(securityContext -> securityContext.getAuthentication().getName())\n            .flatMap(username -> client.fetch(User.class, username));\n    }\n\n    private Mono<ListedComment> toListedComment(Comment comment) {\n        var builder = ListedComment.builder().comment(comment);\n        // not empty\n        var ownerInfoMono = getCommentOwnerInfo(comment.getSpec().getOwner())\n            .doOnNext(builder::owner);\n        var subjectMono = getCommentSubject(comment.getSpec().getSubjectRef())\n            .doOnNext(builder::subject);\n        var statsMono = fetchStats(comment.getMetadata().getName())\n            .doOnNext(builder::stats);\n        return Mono.when(ownerInfoMono, subjectMono, statsMono)\n            .then(Mono.fromSupplier(builder::build));\n    }\n\n\n\n", "CodeBleu_score": 30.23499081008529}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t// Create a subscriber from the given user identity\n    var subscriber = notificationCenter.createSubscriber(identity);\n    // Set up an interest reason for the subscription\n    subscriber.addInterestReason(NotificationReasonConst.REPLY_SOMEONE,\n            reason -> reason.setCondition(\"repliedOwner\", identity.getName()));\n    // Subscribe the user to the notification center and block until the subscription is completed\n    notificationCenter.subscribe(subscriber).block();\n}", "CodeBleu_score": 29.763851691653848}, {"code": "void subscribeReply(UserIdentity identity){\n\tnotificationCenter.subscribe(identity)\n        .interestReason(NotificationReasonConst.SOMEONE_REPLIED_TO_YOU,\n            reason -> reason.condition(reply -> {\n                String repliedOwner = reply.getSpec().getOwner();\n                return StringUtils.isNotBlank(repliedOwner) && repliedOwner.equals(identity.getName());\n            }))\n        .subscribe()\n        .block();\n}", "CodeBleu_score": 36.672328744534504}, {"code": "void subscribeReply(UserIdentity identity){\n\tnotificationCenter.subscribe(identity)\n        .interestReason(NotificationReasonConst.SOMEONE_REPLIED_TO_YOU)\n        .condition(condition -> condition.put(\"repliedOwner\", identity.getName()))\n        .subscribe();\n}", "CodeBleu_score": 20.331868316873685}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn Mono.defer(() -> {\n        comment.getSpec().setApproved(true);\n        comment.getSpec().setApprovedDate(Instant.now());\n        return client.update(comment.getName(), comment);\n    }).onErrorResume(OptimisticLockingFailureException.class, (e) -> {\n        return approveComment(comment);\n    });\n}", "CodeBleu_score": 33.40937506360176}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn client.update(comment.getName(), comment, (commentToUpdate) -> {\n        commentToUpdate.getSpec().setApproved(true);\n        commentToUpdate.getSpec().setApprovedDate(Instant.now());\n        return commentToUpdate;\n    }, comment.getRev()).retryWhen(Retry.backoff(3, Duration.ofSeconds(1)).filter(throwable -> throwable instanceof OptimisticLockingFailureException));\n}", "CodeBleu_score": 36.59257593713009}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn client.update(Comment.class, comment.getName(), comment.setApproved(true).setApprovedTime(Instant.now()))\n        .onErrorResume(OptimisticLockingFailureException.class,\n            e -> client.get(Comment.class, comment.getName())\n                .flatMap(latestComment -> approveComment(latestComment)));\n}", "CodeBleu_score": 30.970099007978153}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t()` instead.\n     *\n     * @param  array<StaticAction> | Closure | null  $actions\n     */\n    public function modalActions(array | Closure | null $actions = null): static\n    {\n        $this->modalFooterActions($actions);\n\n        return $this;\n    }\n\n    /**\n     * @param  array<StaticAction> | Closure | null  $actions\n     */\n    public function modalFooterActions(array | Closure | null $actions = null): static\n    {\n        $this->modalFooterActions = $actions;\n\n        return $this;\n    }\n\n    public function modalFooterActionsAlignment(Alignment | string | Closure | null $alignment = null): static\n    {\n        $this->modalFooterActionsAlignment = $alignment;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `extraModalFooterActions()` instead.\n     *\n     * @param  array<StaticAction> | Closure  $actions\n     */\n    public function extraModalActions(array | Closure $actions): static\n    {\n        $this->extraModalFooterActions($actions);\n\n        return $this;\n    }\n\n    /**\n     * @param  array<StaticAction> | Closure  $actions\n     */\n    public function extraModalFooterActions(array | Closure $actions): static\n    {\n        $this->extraModalFooterActions = $actions;\n\n        return $this;\n    }\n\n    /**\n     * @param  array<StaticAction>  $actions\n     */\n    public function registerModalActions(array $actions): static\n    {\n        $this->modalActions = [\n            ...$this->modalActions,\n            ...$actions,\n        ];\n\n        return $this;\n    }\n\n    public function modalSubmitAction(StaticAction | bool | Closure | null $action = null): static\n    {\n        $this->modalSubmitAction = $action;\n\n        return $this;\n    }\n\n    public function modalCancelAction(StaticAction | bool | Closure | null $action = null): static\n    {\n        $this->modalCancelAction = $action;\n\n        return $this;\n    }\n\n    public function modalSubmitActionLabel(string | Closure | null $label = null): static\n    {\n        $this->modalSubmitActionLabel = $label;\n\n        return $this;\n    }\n\n    public function modalCancelActionLabel(string | Closure | null $label = null): static\n    {\n        $this->modalCancelActionLabel = $label;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `modalSubmitActionLabel()` instead.\n     */\n    public function modalButton(string | Closure | null $label = null): static\n    {\n        $this->modalSubmitActionLabel($label);\n\n        return $this;\n    }\n\n    public function modalContent(View | Htmlable | Closure | null $content = null): static\n    {\n        $this->modalContent = $content;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `modalContentFooter()` instead.\n     */\n    public function modalFooter(View | Htmlable | Closure | null $footer = null): static\n    {\n        return $this->modalContentFooter($footer);\n    }\n\n    public function modalContentFooter(View | Htmlable | Closure | null $footer = null): static\n    {\n        $this->modalContentFooter = $footer;\n\n        return $this;\n    }\n\n    public function modalHeading(string | Htmlable | Closure | null $heading = null): static\n    {\n        $this->modalHeading = $heading;\n\n        return $this;\n    }\n\n    public function modalDescription(string | Htmlable | Closure | null $description = null): static\n    {\n        $this->modalDescription = $description;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `modalDescription()` instead.\n     */\n    public function modalSubheading(string | Htmlable | Closure | null $subheading = null): static\n    {\n        $this->modalDescription($subheading);\n\n        return $this;\n    }\n\n    public function modalWidth(MaxWidth | string | Closure | null $width = null): static\n    {\n        $this->modalWidth = $width;\n\n        return $this;\n    }\n\n    public function getLivewireCallMountedActionName(): ?string\n    {\n        return null;\n    }\n\n    public function modal(bool | Closure | null $condition = true): static\n    {\n        $this->hasModal = $condition;\n\n        return $this;\n    }\n\n    public function modalHidden(bool | Closure | null $condition = true): static\n    {\n        $this->isModalHidden = $condition;\n\n        return $this;\n    }\n\n    /**\n     * @return array<string, StaticAction>\n     */\n    public function getModalFooterActions(): array\n    {\n        if ($this->isWizard()) {\n            return [];\n        }\n\n        if (isset($this->cachedModalFooterActions)) {\n            return $this->cachedModalFooterActions;\n        }\n\n        if ($this->modalFooterActions) {\n            $actions = [];\n\n            foreach ($this->evaluate($this->modalFooterActions) as $action) {\n                $actions[$action->getName()] = $this->prepareModalAction($action);\n            }\n\n            return $this->cachedModalFooterActions = $actions;\n        }\n\n        $actions = [];\n\n        if ($submitAction = $this->getModalSubmitAction()) {\n            $actions['submit'] = $submitAction;\n        }\n\n        $actions = [\n            ...$actions,\n            ...$this->getExtraModalFooterActions(),\n        ];\n\n        if ($cancelAction = $this->getModalCancelAction()) {\n            $actions['cancel'] = $cancelAction;\n        }\n\n        if (in_array($this->getModalFooterActionsAlignment(), [Alignment::Center, 'center'])) {\n            $actions = array_reverse($actions);\n        }\n\n        return $this->cachedModalFooterActions = $actions;\n    }\n\n    public function getModalFooterActionsAlignment(): string | Alignment | null\n    {\n        return $this->evaluate($this->modalFooterActionsAlignment);\n    }\n\n    /**\n     * @return array<string, StaticAction>\n     */\n    public function getModalActions(): array\n    {\n        if (isset($this->cachedModalActions)) {\n            return $this->cachedModalActions;\n        }\n\n        $actions = $this->getModalFooterActions();\n\n        foreach ($this->modalActions as $action) {\n            $actions[$action->getName()] = $this->prepareModalAction($action);\n        }\n\n        return $this->cachedModalActions = $actions;\n    }\n\n    public function getModalAction(string $name): ?StaticAction\n    {\n        return $this->getModalActions()[$name] ?? null;\n    }\n\n    public function getMountableModalAction(string $name): ?MountableAction\n    {\n        $action = $this->getModalAction($name);\n\n        if (! $action) {\n            return null;\n        }\n\n        if (! $action instanceof MountableAction) {\n            return null;\n        }\n\n        return $action;\n    }\n\n\n\n", "CodeBleu_score": 18.05069975196484}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t()` instead.\n     *\n     * @param  array<StaticAction> | Closure | null  $actions\n     */\n    public function modalActions(array | Closure | null $actions = null): static\n    {\n        $this->modalFooterActions($actions);\n\n        return $this;\n    }\n\n    /**\n     * @param  array<StaticAction> | Closure | null  $actions\n     */\n    public function modalFooterActions(array | Closure | null $actions = null): static\n    {\n        $this->modalFooterActions = $actions;\n\n        return $this;\n    }\n\n    public function modalFooterActionsAlignment(Alignment | string | Closure | null $alignment = null): static\n    {\n        $this->modalFooterActionsAlignment = $alignment;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `extraModalFooterActions()` instead.\n     *\n     * @param  array<StaticAction> | Closure  $actions\n     */\n    public function extraModalActions(array | Closure $actions): static\n    {\n        $this->extraModalFooterActions($actions);\n\n        return $this;\n    }\n\n    /**\n     * @param  array<StaticAction> | Closure  $actions\n     */\n    public function extraModalFooterActions(array | Closure $actions): static\n    {\n        $this->extraModalFooterActions = $actions;\n\n        return $this;\n    }\n\n    /**\n     * @param  array<StaticAction>  $actions\n     */\n    public function registerModalActions(array $actions): static\n    {\n        $this->modalActions = [\n            ...$this->modalActions,\n            ...$actions,\n        ];\n\n        return $this;\n    }\n\n    public function modalSubmitAction(StaticAction | bool | Closure | null $action = null): static\n    {\n        $this->modalSubmitAction = $action;\n\n        return $this;\n    }\n\n    public function modalCancelAction(StaticAction | bool | Closure | null $action = null): static\n    {\n        $this->modalCancelAction = $action;\n\n        return $this;\n    }\n\n    public function modalSubmitActionLabel(string | Closure | null $label = null): static\n    {\n        $this->modalSubmitActionLabel = $label;\n\n        return $this;\n    }\n\n    public function modalCancelActionLabel(string | Closure | null $label = null): static\n    {\n        $this->modalCancelActionLabel = $label;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `modalSubmitActionLabel()` instead.\n     */\n    public function modalButton(string | Closure | null $label = null): static\n    {\n        $this->modalSubmitActionLabel($label);\n\n        return $this;\n    }\n\n    public function modalContent(View | Htmlable | Closure | null $content = null): static\n    {\n        $this->modalContent = $content;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `modalContentFooter()` instead.\n     */\n    public function modalFooter(View | Htmlable | Closure | null $footer = null): static\n    {\n        return $this->modalContentFooter($footer);\n    }\n\n    public function modalContentFooter(View | Htmlable | Closure | null $footer = null): static\n    {\n        $this->modalContentFooter = $footer;\n\n        return $this;\n    }\n\n    public function modalHeading(string | Htmlable | Closure | null $heading = null): static\n    {\n        $this->modalHeading = $heading;\n\n        return $this;\n    }\n\n    public function modalDescription(string | Htmlable | Closure | null $description = null): static\n    {\n        $this->modalDescription = $description;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `modalDescription()` instead.\n     */\n    public function modalSubheading(string | Htmlable | Closure | null $subheading = null): static\n    {\n        $this->modalDescription($subheading);\n\n        return $this;\n    }\n\n    public function modalWidth(MaxWidth | string | Closure | null $width = null): static\n    {\n        $this->modalWidth = $width;\n\n        return $this;\n    }\n\n    public function getLivewireCallMountedActionName(): ?string\n    {\n        return null;\n    }\n\n    public function modal(bool | Closure | null $condition = true): static\n    {\n        $this->hasModal = $condition;\n\n        return $this;\n    }\n\n    public function modalHidden(bool | Closure | null $condition = true): static\n    {\n        $this->isModalHidden = $condition;\n\n        return $this;\n    }\n\n    /**\n     * @return array<string, StaticAction>\n     */\n    public function getModalFooterActions(): array\n    {\n        if ($this->isWizard()) {\n            return [];\n        }\n\n        if (isset($this->cachedModalFooterActions)) {\n            return $this->cachedModalFooterActions;\n        }\n\n        if ($this->modalFooterActions) {\n            $actions = [];\n\n            foreach ($this->evaluate($this->modalFooterActions) as $action) {\n                $actions[$action->getName()] = $this->prepareModalAction($action);\n            }\n\n            return $this->cachedModalFooterActions = $actions;\n        }\n\n        $actions = [];\n\n        if ($submitAction = $this->getModalSubmitAction()) {\n            $actions['submit'] = $submitAction;\n        }\n\n        $actions = [\n            ...$actions,\n            ...$this->getExtraModalFooterActions(),\n        ];\n\n        if ($cancelAction = $this->getModalCancelAction()) {\n            $actions['cancel'] = $cancelAction;\n        }\n\n        if (in_array($this->getModalFooterActionsAlignment(), [Alignment::Center, 'center'])) {\n            $actions = array_reverse($actions);\n        }\n\n        return $this->cachedModalFooterActions = $actions;\n    }\n\n    public function getModalFooterActionsAlignment(): string | Alignment | null\n    {\n        return $this->evaluate($this->modalFooterActionsAlignment);\n    }\n\n    /**\n     * @return array<string, StaticAction>\n     */\n    public function getModalActions(): array\n    {\n        if (isset($this->cachedModalActions)) {\n            return $this->cachedModalActions;\n        }\n\n        $actions = $this->getModalFooterActions();\n\n        foreach ($this->modalActions as $action) {\n            $actions[$action->getName()] = $this->prepareModalAction($action);\n        }\n\n        return $this->cachedModalActions = $actions;\n    }\n\n    public function getModalAction(string $name): ?StaticAction\n    {\n        return $this->getModalActions()[$name] ?? null;\n    }\n\n    public function getMountableModalAction(string $name): ?MountableAction\n    {\n        $action = $this->getModalAction($name);\n\n        if (! $action) {\n            return null;\n        }\n\n        if (! $action instanceof MountableAction) {\n            return null;\n        }\n\n        return $action;\n    }\n\n\n\n", "CodeBleu_score": 18.05069975196484}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t()` instead.\n     *\n     * @param  array<StaticAction> | Closure | null  $actions\n     */\n    public function modalActions(array | Closure | null $actions = null): static\n    {\n        $this->modalFooterActions($actions);\n\n        return $this;\n    }\n\n    /**\n     * @param  array<StaticAction> | Closure | null  $actions\n     */\n    public function modalFooterActions(array | Closure | null $actions = null): static\n    {\n        $this->modalFooterActions = $actions;\n\n        return $this;\n    }\n\n    public function modalFooterActionsAlignment(Alignment | string | Closure | null $alignment = null): static\n    {\n        $this->modalFooterActionsAlignment = $alignment;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `extraModalFooterActions()` instead.\n     *\n     * @param  array<StaticAction> | Closure  $actions\n     */\n    public function extraModalActions(array | Closure $actions): static\n    {\n        $this->extraModalFooterActions($actions);\n\n        return $this;\n    }\n\n    /**\n     * @param  array<StaticAction> | Closure  $actions\n     */\n    public function extraModalFooterActions(array | Closure $actions): static\n    {\n        $this->extraModalFooterActions = $actions;\n\n        return $this;\n    }\n\n    /**\n     * @param  array<StaticAction>  $actions\n     */\n    public function registerModalActions(array $actions): static\n    {\n        $this->modalActions = [\n            ...$this->modalActions,\n            ...$actions,\n        ];\n\n        return $this;\n    }\n\n    public function modalSubmitAction(StaticAction | bool | Closure | null $action = null): static\n    {\n        $this->modalSubmitAction = $action;\n\n        return $this;\n    }\n\n    public function modalCancelAction(StaticAction | bool | Closure | null $action = null): static\n    {\n        $this->modalCancelAction = $action;\n\n        return $this;\n    }\n\n    public function modalSubmitActionLabel(string | Closure | null $label = null): static\n    {\n        $this->modalSubmitActionLabel = $label;\n\n        return $this;\n    }\n\n    public function modalCancelActionLabel(string | Closure | null $label = null): static\n    {\n        $this->modalCancelActionLabel = $label;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `modalSubmitActionLabel()` instead.\n     */\n    public function modalButton(string | Closure | null $label = null): static\n    {\n        $this->modalSubmitActionLabel($label);\n\n        return $this;\n    }\n\n    public function modalContent(View | Htmlable | Closure | null $content = null): static\n    {\n        $this->modalContent = $content;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `modalContentFooter()` instead.\n     */\n    public function modalFooter(View | Htmlable | Closure | null $footer = null): static\n    {\n        return $this->modalContentFooter($footer);\n    }\n\n    public function modalContentFooter(View | Htmlable | Closure | null $footer = null): static\n    {\n        $this->modalContentFooter = $footer;\n\n        return $this;\n    }\n\n    public function modalHeading(string | Htmlable | Closure | null $heading = null): static\n    {\n        $this->modalHeading = $heading;\n\n        return $this;\n    }\n\n    public function modalDescription(string | Htmlable | Closure | null $description = null): static\n    {\n        $this->modalDescription = $description;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `modalDescription()` instead.\n     */\n    public function modalSubheading(string | Htmlable | Closure | null $subheading = null): static\n    {\n        $this->modalDescription($subheading);\n\n        return $this;\n    }\n\n    public function modalWidth(MaxWidth | string | Closure | null $width = null): static\n    {\n        $this->modalWidth = $width;\n\n        return $this;\n    }\n\n    public function getLivewireCallMountedActionName(): ?string\n    {\n        return null;\n    }\n\n    public function modal(bool | Closure | null $condition = true): static\n    {\n        $this->hasModal = $condition;\n\n        return $this;\n    }\n\n    public function modalHidden(bool | Closure | null $condition = true): static\n    {\n        $this->isModalHidden = $condition;\n\n        return $this;\n    }\n\n    /**\n     * @return array<string, StaticAction>\n     */\n    public function getModalFooterActions(): array\n    {\n        if ($this->isWizard()) {\n            return [];\n        }\n\n        if (isset($this->cachedModalFooterActions)) {\n            return $this->cachedModalFooterActions;\n        }\n\n        if ($this->modalFooterActions) {\n            $actions = [];\n\n            foreach ($this->evaluate($this->modalFooterActions) as $action) {\n                $actions[$action->getName()] = $this->prepareModalAction($action);\n            }\n\n            return $this->cachedModalFooterActions = $actions;\n        }\n\n        $actions = [];\n\n        if ($submitAction = $this->getModalSubmitAction()) {\n            $actions['submit'] = $submitAction;\n        }\n\n        $actions = [\n            ...$actions,\n            ...$this->getExtraModalFooterActions(),\n        ];\n\n        if ($cancelAction = $this->getModalCancelAction()) {\n            $actions['cancel'] = $cancelAction;\n        }\n\n        if (in_array($this->getModalFooterActionsAlignment(), [Alignment::Center, 'center'])) {\n            $actions = array_reverse($actions);\n        }\n\n        return $this->cachedModalFooterActions = $actions;\n    }\n\n    public function getModalFooterActionsAlignment(): string | Alignment | null\n    {\n        return $this->evaluate($this->modalFooterActionsAlignment);\n    }\n\n    /**\n     * @return array<string, StaticAction>\n     */\n    public function getModalActions(): array\n    {\n        if (isset($this->cachedModalActions)) {\n            return $this->cachedModalActions;\n        }\n\n        $actions = $this->getModalFooterActions();\n\n        foreach ($this->modalActions as $action) {\n            $actions[$action->getName()] = $this->prepareModalAction($action);\n        }\n\n        return $this->cachedModalActions = $actions;\n    }\n\n    public function getModalAction(string $name): ?StaticAction\n    {\n        return $this->getModalActions()[$name] ?? null;\n    }\n\n    public function getMountableModalAction(string $name): ?MountableAction\n    {\n        $action = $this->getModalAction($name);\n\n        if (! $action) {\n            return null;\n        }\n\n        if (! $action instanceof MountableAction) {\n            return null;\n        }\n\n        return $action;\n    }\n\n\n\n", "CodeBleu_score": 18.05069975196484}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->evaluate($this->successRedirectUrl);\n\n    if (filled($url)) {\n        $this->redirect($url);\n    }\n\n    return $this;\n}", "CodeBleu_score": 94.557045237306}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->evaluate($this->successRedirectUrl);\n\n    if (filled($url)) {\n        $this->redirect($url);\n    }\n\n    return $this;\n}", "CodeBleu_score": 94.557045237306}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->evaluate($this->successRedirectUrl);\n\n    if (filled($url)) {\n        $this->redirect($url);\n    }\n\n    return $this;\n}", "CodeBleu_score": 94.557045237306}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif (! (method_exists($record, 'syncTags') && method_exists($record, 'tags'))) {\n        return;\n    }\n\n    $tags = [];\n\n    foreach ($state as $name) {\n        $tags[] = Tag::findOrCreate($name);\n    }\n\n    $record->syncTags($tags);\n}", "CodeBleu_score": 22.358597206729264}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif (! (method_exists($record, 'syncTags') && method_exists($record, 'tags'))) {\n        return;\n    }\n\n    $tagModelClass = $record->tags()->getRelated();\n    $tags = $tagModelClass::query()->whereIn('name', $state)->get();\n    $tagsToCreate = collect($state)->diff($tags->pluck('name'));\n    $tagsToCreate->each(static function (string $name) use ($tagModelClass): void {\n        $tagModelClass::create([\n            'name' => $name,\n        ]);\n    });\n\n    $record->syncTags($tags->pluck('id')->merge($tagsToCreate)->all());\n}", "CodeBleu_score": 42.90951674912483}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif (! (method_exists($record, 'syncTags'))) {\n        return;\n    }\n\n    $tagModelClass = Tag::class;\n\n    $tags = collect($state)\n        ->map(fn (string $name): Tag => $tagModelClass::firstOrCreate(['name' => $name]));\n\n    $record->syncTags($tags->pluck('id')->all());\n}", "CodeBleu_score": 28.10656159965388}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repoName, err := paths.DissectRepositoryPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline.\n\tscope := types.NewScope(spacePath, repoName)\n\tresource := types.NewResource(scope, pipelineIdentifier)\n\n\t// Check if the user has the required permission for the pipeline.\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err != nil {\n\t\treturn fmt.Errorf(\"check pipeline: %w\", err)\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 50.31316458667193}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\tspacePath, repoName, err := paths.SplitRepositoryPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope := authz.NewScope(spacePath, enum.ResourceTypePipeline)\n\tresource := authz.NewResource(repoName, pipelineIdentifier)\n\n\terr = authorizer.Check(ctx, session, scope, resource, permission)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 52.253737933133536}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\tspacePath, repoName, err := paths.SplitRepoPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tscope := authz.Scope{\n\t\tType: enum.PipelineScope,\n\t\tPath: spacePath,\n\t}\n\tresource := authz.Resource{\n\t\tType: enum.PipelineResource,\n\t\tName: fmt.Sprintf(\"%s/%s\", repoName, pipelineIdentifier),\n\t}\n\terr = authorizer.Check(ctx, session, scope, resource, permission)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}", "CodeBleu_score": 63.006051459819275}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\tif space == nil {\n\t\treturn fmt.Errorf(\"space is nil\")\n\t}\n\n\tif session == nil {\n\t\treturn fmt.Errorf(\"session is nil\")\n\t}\n\n\tif authorizer == nil {\n\t\treturn fmt.Errorf(\"authorizer is nil\")\n\t}\n\n\tparentPath, err := paths.Parse(space.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tparentSpace, err := parentPath.GetSpace()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif parentSpace == nil {\n\t\treturn fmt.Errorf(\"parent space is nil\")\n\t}\n\n\tscope, err := authz.NewScope(parentSpace.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tresource, err := authz.NewResource(space.Name)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn authorizer.Check(\n\t\tctx,\n\t\tsession,\n\t\tscope,\n\t\tresource,\n\t\tpermission,\n\t)\n}", "CodeBleu_score": 46.65803774637636}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\tif space == nil {\n\t\treturn fmt.Errorf(\"space is nil\")\n\t}\n\n\tparentSpace, name, err := paths.ParseSpacePath(space.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope := types.Scope{\n\t\tKind:  enum.ScopeKindSpace,\n\t\tName:  parentSpace,\n\t\tPath:  parentSpace,\n\t\tSpace: parentSpace,\n\t}\n\n\tresource := types.Resource{\n\t\tKind:  enum.ResourceKindSpace,\n\t\tName:  name,\n\t\tPath:  space.Path,\n\t\tSpace: parentSpace,\n\t}\n\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 67.16924618397316}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\tparentSpacePath, err := paths.ParentSpacePath(space.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tparentSpace, err := session.Spaces.Get(parentSpacePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tscope := authz.Scope(parentSpace.Path)\n\tresource := authz.Resource(space.Name)\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 60.85562711489384}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\tif len(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tvar decoded map[string]any\n\tif err := json.Unmarshal(source, &decoded); err != nil {\n\t\treturn nil, err\n\t}\n\n\tsanitized, err := json.Marshal(decoded)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn bytes.TrimRight(sanitized, \"\n\"), nil\n}", "CodeBleu_score": 32.88045496721897}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\tif len(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tvar payload json.RawMessage\n\tif err := json.Unmarshal(source, &payload); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := json.Unmarshal(payload, &data); err != nil {\n\t\treturn nil, err\n\t}\n\n\tsanitized, err := json.Marshal(data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn bytes.TrimRight(sanitized, \"\n\"), nil\n}", "CodeBleu_score": 37.04356105052315}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\tif len(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"failed to marshal data: %w\", err)\n\t\t}\n\t}\n\n\tdec := json.NewDecoder(bytes.NewReader(source))\n\tdec.DisallowUnknownFields()\n\n\tvar payload json.RawMessage\n\tif err := dec.Decode(&payload); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to decode payload: %w\", err)\n\t}\n\n\tencoded, err := json.Marshal(payload)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to encode payload: %w\", err)\n\t}\n\n\treturn bytes.TrimRight(encoded, \"\n\"), nil\n}", "CodeBleu_score": 49.898621001544974}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\trepo, err := c.repoStore.Get(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := c.authorizer.CheckRepoPermission(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 41.23063090238356}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\trepo, err := c.repoStore.Get(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := c.authorizer.CheckAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 40.81116925576982}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\trepo, err := c.repoStore.GetByRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := c.authorizer.CheckAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 41.20587063978755}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tsanitizers := map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindRaw: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindMarkdown: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindPipeline: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t}\n\treturn sanitizers\n}", "CodeBleu_score": 27.226531440197512}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tsanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tsanitizers[enum.CheckPayloadKindEmpty] = func(in *ReportInput, s *auth.Session) error {\n\t\treturn nil\n\t}\n\n\tsanitizers[enum.CheckPayloadKindRaw] = func(in *ReportInput, s *auth.Session) error {\n\t\treturn nil\n\t}\n\n\tsanitizers[enum.CheckPayloadKindMarkdown] = func(in *ReportInput, s *auth.Session) error {\n\t\treturn nil\n\t}\n\n\tsanitizers[enum.CheckPayloadKindPipeline] = func(in *ReportInput, s *auth.Session) error {\n\t\tif in.Pipeline == nil {\n\t\t\treturn usererror.New(\"pipeline is required\")\n\t\t}\n\t\treturn nil\n\t}\n\n\treturn sanitizers\n}", "CodeBleu_score": 43.677007558983476}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tsanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tsanitizers[enum.CheckPayloadKindEmpty] = sanitizeEmpty\n\tsanitizers[enum.CheckPayloadKindRaw] = sanitizeRaw\n\tsanitizers[enum.CheckPayloadKindMarkdown] = sanitizeRaw\n\tsanitizers[enum.CheckPayloadKindPipeline] = sanitizePipeline\n\treturn sanitizers\n}", "CodeBleu_score": 40.82485920514872}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\tself.state.on_render = on_render\n  if not self.state.is_attached_to_screen then\n    renderer.attach(self)\n    self.state.is_attached_to_screen = true\n  end\n\n  return self", "CodeBleu_score": 66.84882399033754}, {"code": "function Buffer:attach_to_renderer(on_render)\n\tself.state.on_render = on_render \n  if not self.state.is_attached_to_screen then \n    renderer.attach(self.bufnr, self.namespace) \n    self.state.is_attached_to_screen = true \n  end \n  return self ", "CodeBleu_score": 63.095922344589574}, {"code": "function Buffer:attach_to_renderer(on_render)\n\tself.state.on_render = on_render\n\n  if not self.state.is_attached_to_screen then\n    renderer.attach(self.bufnr, self.namespace, self.state)\n    self.state.is_attached_to_screen = true\n  end\n\n  return self", "CodeBleu_score": 63.63634222152387}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\tif not self:is_in_disk() then\n    return \n  end\n  local filename = self.filename\n  if self.watcher:is_watching(filename) then\n    return \n  end\n  local watcher = self.watcher\n  local function on_change(event, filename)\n    if not self:is_valid() then\n      watcher:stop(filename)\n      return \n    end\n    if callback then\n      callback(event, filename)\n    end\n  end\n  watcher:start(filename, on_change)", "CodeBleu_score": 47.50902820278948}, {"code": "function Buffer:watch(callback)\n\tlocal filename = self.filename\n\n  if not filename or filename == '' then\n    return false\n  end\n  if not fs.exists(filename) then\n    return false\n  end\n\n  local watcher = self.watcher\n  watcher:set_filename(filename)\n  watcher:set_callback(callback)\n  watcher:start()\n\n  return true", "CodeBleu_score": 39.132819550773256}, {"code": "function Buffer:watch(callback)\n\tlocal filename = self.filename\n  if not filename or filename == '' then\n    return\n  end\n  if not fs.exists(filename) then\n    return\n  end\n  self.watcher:start(filename, callback)", "CodeBleu_score": 30.899286091117638}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\tif self.hex then\n    return self.hex\n  end\n  local spec = self.spec\n  local attr = spec.fg and 'fg' or 'bg'\n  local color = vim.api.nvim_get_hl_by_name(spec.name, true)[attr]\n  if color then\n    self.rgb = Rgb:from_decimal(color)\n    self.hex = self.rgb:to_hex()\n  end\n  return self.hex", "CodeBleu_score": 56.84126229903113}, {"code": "function Color:to_hex()\n\tif self.hex then\n    return self.hex\n  end\n  local spec = self.spec\n  local attr = spec.attribute\n  local color = spec.color\n  local is_cterm = spec.cterm\n  local is_gui = spec.gui\n  local is_rgb = spec.rgb\n  local is_bg = spec.bg\n  local gui_attr = is_bg and 'background' or 'foreground'\n  local cterm_attr = is_bg and 'background' or 'foreground'\n  local gui_color = is_gui and vim.api.nvim_get_hl_by_name(color, true)[gui_attr]\n  local cterm_color = is_cterm and vim.api.nvim_get_hl_by_name(color, false)[cterm_attr]\n  local hex\n  if is_rgb then\n    hex = Rgb:new(gui_color):to_hex()\n  else\n    hex = string.format('#%06x', cterm_color)\n  end\n  self.hex = hex\n  return hex", "CodeBleu_score": 49.82436336976992}, {"code": "function Color:to_hex()\n\tif self.hex then \n    return self.hex \n  end \n  local spec = self.spec \n  local attribute = spec.attribute \n  local color = vim.api.nvim_get_hl_by_name(attribute, true).background or vim.api.nvim_get_hl_by_name(attribute, true).foreground \n  if color then \n    local rgb = Rgb:from_color(color) \n    self.hex = rgb:to_hex() \n    return self.hex \n  end ", "CodeBleu_score": 56.89925677884953}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\tlocal lines = buffer:get_lines(0, -1, false)\n  for i, line in ipairs(lines) do\n    local start_pos, end_pos = string.find(line, pattern)\n    if start_pos then\n      pcall(vim.api.nvim_buf_add_highlight, buffer.bufnr, self.ns_id, hl, i - 1, start_pos - 1, end_pos)\n    end\n  end\n  return self", "CodeBleu_score": 43.12390397043282}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\tlocal lines = buffer:get_lines(0, -1, false)\n  for i, line in ipairs(lines) do\n    local start_index, end_index = string.find(line, pattern)\n    if start_index then\n      self:add_highlight(buffer, hl, i - 1, start_index - 1, end_index)\n    end\n  end\n  return self", "CodeBleu_score": 44.87594377221361}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\tlocal lines = buffer:get_lines()\n  for i = 1, #lines do \n    local line = lines[i]\n    local start_index, end_index = string.find(line, pattern)\n    if start_index then\n      pcall(vim.api.nvim_buf_add_highlight, buffer.bufnr, self.ns_id, hl, i - 1, start_index - 1, end_index)\n    end\n  end\n\n  return self", "CodeBleu_score": 59.003401611419314}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\tlocal id = string.format('%d:%d:%s', row, col, text)\n  local opts = {\n    id = id,\n    virt_text = { { text, hl } },\n    virt_text_pos = pos,\n    hl_mode = 'combine',\n    priority = priority,\n  }\n  vim.api.nvim_buf_set_extmark(buffer.bufnr, self.ns_id, row, col, opts)\n  return id", "CodeBleu_score": 72.76944150466352}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\tlocal id = string.format('%s:%s:%s:%s', row, col, pos, priority)\n  vim.api.nvim_buf_set_extmark(buffer.bufnr, self.ns_id, row - 1, col - 1, {\n    virt_text = { { text, hl } },\n    id = id,\n    virt_text_pos = pos,\n    priority = priority,\n  })\n  return id", "CodeBleu_score": 68.61117474743256}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\tlocal id = string.format('%s:%s:%s', row, col, text)\n  local opts = {\n    virt_text = {{text, hl}},\n    virt_text_pos = pos,\n    priority = priority,\n  }\n  vim.api.nvim_buf_set_extmark(buffer.bufnr, self.ns_id, row, col, opts)\n  return id", "CodeBleu_score": 55.98183413172176}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\tlocal line = ''\n  for i = 1, #output do\n    local char = output:sub(i, i)\n    if char == '", "CodeBleu_score": 22.584243156265977}, {"code": "function Spawn:parse_result(output, callback)\n\tlocal line = ''\n  for i = 1, #output do\n    local char = output:sub(i, i)\n    if char == '", "CodeBleu_score": 22.584243156265977}, {"code": "function Spawn:parse_result(output, callback)\n\tlocal line = ''\n  for i = 1, #output do\n    local char = output:sub(i, i)\n    if char == '", "CodeBleu_score": 22.584243156265977}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\tif not self.watcher then\n    self.watcher = luv.new_fs_event()\n  end\n  loop.fs_event(self.watcher, path, self.interval, handler)\n  return self.watcher", "CodeBleu_score": 41.84496900035396}, {"code": "function Watcher:watch_file(path, handler)\n\tend\n", "CodeBleu_score": 1.7515213379056636}, {"code": "function Watcher:watch_file(path, handler)\n\tif not self.watcher then\n    self.watcher = luv.new_fs_event()\n    luv.fs_event_start(self.watcher, path, {\n      interval = self.interval,\n      stat = true,\n      recursive = false,\n    }, handler)\n  end\n  return self.watcher", "CodeBleu_score": 62.526244385947315}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\tlocal lines = self:get_lines()\n  local hunks, err = self.git_object:process_hunks(lines)\n  if err then\n    return err\n  end\n  self.hunks = hunks\n  self.is_processing = false\n  self:set_var('vgit_hunks', hunks)\n  self:setup_signs()\n  return hunks", "CodeBleu_score": 23.512252433614115}, {"code": "function GitBuffer:live_hunks()\n\tlocal lines = self:get_lines()\n  local hunks, err = self.git_object:generate_hunks(lines)\n  if err then\n    return err\n  end\n  self.signs = {}\n  local signs = signs_setting:get()\n  local hunk_signs = signs.hunks\n  local add_sign = hunk_signs.add\n  local change_sign = hunk_signs.change\n  local remove_sign = hunk_signs.remove\n  local topdelete_sign = hunk_signs.topdelete\n  local botdelete_sign = hunk_signs.botdelete\n  local priority_add = signs.priority.add\n  local priority_change = signs.priority.change\n  local priority_delete = signs.priority.delete\n  local priority_topdelete = signs.priority.topdelete\n  local priority_botdelete = signs.priority.botdelete\n  for _, hunk in ipairs(hunks) do\n    for i = hunk.top, hunk.bot do\n      local type = hunk.type\n      if type == 'add' then\n        self.signs[i] = {\n          type = add_sign,\n          priority = priority_add,\n        }\n      elseif type == 'change' then\n        self.signs[i] = {\n          type = change_sign,\n          priority = priority_change,\n        }\n      elseif type == 'delete' then\n        if i == hunk.top then\n          self.signs[i] = {\n            type = topdelete_sign,\n            priority = priority_topdelete,\n          }\n        elseif i == hunk.bot then\n          self.signs[i] = {\n            type = botdelete_sign,\n            priority = priority_botdelete,\n          }\n        else\n          self.signs[i] = {\n            type = remove_sign,\n            priority = priority_delete,\n          }\n        end\n      end\n    end\n  end\n  self:set_signs()\n  return hunks", "CodeBleu_score": 47.40466879316154}, {"code": "function GitBuffer:live_hunks()\n\tlocal buf_lines = self:get_lines()\n  local hunks = self.git_object:process_hunks(buf_lines)\n  if not vim.tbl_isempty(hunks) then\n    self:set_var('vgit_hunks', hunks)\n    self:set_var('vgit_hunks_enabled', true)\n    self:set_var('vgit_hunks_enabled_indicator', true)\n    self:set_var('vgit_hunks_disabled_indicator', false)\n    self:set_var('vgit_hunks_preview_indicator', false)\n    self.signs = {}\n    for _, hunk in ipairs(hunks) do\n      for _, line in ipairs(hunk.lines) do\n        self.signs[line.current_line] = {\n          type = line.type,\n          priority = signs_setting:get('priority')[line.type],\n        }\n      end\n    end\n    self:set_signs()\n  else\n    self:set_var('vgit_hunks_enabled', false)\n    self:set_var('vgit_hunks_enabled_indicator', false)\n    self:set_var('vgit_hunks_disabled_indicator', true)\n    self:set_var('vgit_hunks_preview_indicator', false)\n    self:unplace_signs()\n  end\n  return hunks", "CodeBleu_score": 39.58607127639168}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\tlocal tmp_filename = utils.tmpname()\n  local err = fs.write_file(tmp_filename, patch:to_string())\n  if err then\n    return err\n  end\n  local result = self.git:stage_hunk(tmp_filename)\n  fs.delete_file(tmp_filename)\n  return result", "CodeBleu_score": 53.63361696613411}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\tlocal temp_filename = fs.tmpname()\n  fs.write(temp_filename, patch:get_patch())\n  local err = self.git:stage_hunk(temp_filename)\n  fs.delete(temp_filename)\n  return err", "CodeBleu_score": 47.565641154134944}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\tlocal tmp_filename = fs.tmpname()\n  local tmp_file = io.open(tmp_filename, 'w')\n  tmp_file:write(patch:to_string())\n  tmp_file:close()\n  local err = self.git:stage_hunks_from_patch(tmp_filename)\n  fs.delete(tmp_filename)\n  return err", "CodeBleu_score": 53.287915935457605}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tOAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());\n    request.addBodyParameter(OAuthConstants.CLIENT_ID, config.getApiKey());\n    request.addBodyParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret());\n    request.addBodyParameter(GRANT_TYPE_KEY, GRANT_TYPE_CLIENT_CREDENTIALS);\n    request.addHeader(\"Authorization\", \"Basic \" + Base64.encodeBytes((config.getApiKey() + \":\" + config.getApiSecret()).getBytes(StandardCharsets.UTF_8)));\n    Response response = request.send();\n    return api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 71.33672178102285}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tOAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());\n    request.addHeader(OAuthConstants.HEADER, getAuthorizationHeader(requestToken, verifier));\n    request.addBodyParameter(OAuthConstants.CLIENT_ID, config.getApiKey());\n    request.addBodyParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret());\n    request.addBodyParameter(GRANT_TYPE_KEY, GRANT_TYPE_CLIENT_CREDENTIALS);\n    Response response = request.send();\n    return api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 81.40612839042547}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tOAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());\n    request.addBodyParameter(OAuthConstants.TOKEN, requestToken.getToken());\n    request.addBodyParameter(OAuthConstants.VERIFIER, verifier.getValue());\n    request.addBodyParameter(GRANT_TYPE_KEY, GRANT_TYPE_CLIENT_CREDENTIALS);\n    request.addHeader(OAuthConstants.HEADER, getAuthorizationHeader(requestToken, verifier));\n    Response response = request.send();\n    return api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 78.26602352740746}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\tCredentialsProvider provider = new BasicCredentialsProvider();\n    provider.setCredentials(AuthScope.ANY, httpCredentials);\n    AuthCache cache = new BasicAuthCache();\n    cache.put(host, new BasicScheme());\n    context.setCredentialsProvider(provider);\n    context.setAuthCache(cache);\n    LOGGER.log(Level.FINE, \"Added host {0} to authentication cache\", host);\n}", "CodeBleu_score": 65.76780382713774}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\tCredentialsProvider provider = new BasicCredentialsProvider();\n    provider.setCredentials(new AuthScope(host), httpCredentials);\n    AuthCache cache = new BasicAuthCache();\n    BasicScheme scheme = new BasicScheme();\n    LOGGER.log(Level.FINE, \"Adding host {0} to authentication cache\", host);\n    cache.put(host, scheme);\n    context.setCredentialsProvider(provider);\n    context.setAuthCache(cache);\n}", "CodeBleu_score": 66.05563219413717}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\tLOGGER.log(Level.FINE, \"Configuring HTTP Basic Auth for host {0}\", host);\n    CredentialsProvider provider = new BasicCredentialsProvider();\n    provider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), httpCredentials);\n    AuthCache cache = new BasicAuthCache();\n    BasicScheme basicAuth = new BasicScheme();\n    cache.put(host, basicAuth);\n    context.setCredentialsProvider(provider);\n    context.setAuthCache(cache);\n}", "CodeBleu_score": 60.735763652252984}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tJenkins jenkins = Jenkins.getInstance();\n    AvatarCache cache = ExtensionList.lookupSingleton(AvatarCache.class);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache is not enabled\");\n    }\n    String key = cache.seed(source, size);\n    try {\n        return jenkins.getRootUrl() + ActionURI + \"/\" + URLEncoder.encode(key, StandardCharsets.UTF_8.name()) + \"/\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new Error(e);\n    }\n}", "CodeBleu_score": 48.50162325522853}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tJenkins jenkins = Jenkins.getInstanceOrNull();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins instance is null\");\n    }\n    AvatarCache cache = ExtensionList.lookupSingleton(AvatarCache.class);\n    if (cache == null) {\n        throw new IllegalStateException(\"Avatar cache is null\");\n    }\n    String key = cache.seed(source);\n    String url = jenkins.getRootUrl() + cache.getUrlName() + '/' + key + '/' + size;\n    try {\n        url = URLEncoder.encode(url, StandardCharsets.UTF_8.name());\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding is unsupported\", e);\n    }\n    return url;\n}", "CodeBleu_score": 56.694013126708434}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tJenkins jenkins = Jenkins.getInstance();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins has not been started, or was already shut down\");\n    }\n    AvatarCache cache = ExtensionList.lookup(AvatarCache.class).get(AvatarCache.class);\n    if (cache == null) {\n        throw new IllegalStateException(\"The avatar cache has not been initialized\");\n    }\n    String key = cache.buildKey(source);\n    cache.seed(key, source);\n    String url = String.format(Locale.ENGLISH, \"%s%s/%s/%s\", jenkins.getRootUrlFromRequest(), ActionURI, key, size);\n    try {\n        return URLEncoder.encode(url, StandardCharsets.UTF_8.name());\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding is unsupported\", e);\n    }\n}", "CodeBleu_score": 60.252369663067064}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t;\n    }", "CodeBleu_score": 6.3726230641916235}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t;\n    }", "CodeBleu_score": 6.3726230641916235}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t;\n    }", "CodeBleu_score": 6.3726230641916235}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t');\n        // we will only resize images in the 16x16 - 128x128 range\n        if (index < 2) {\n            try {\n                targetSize = Math.min(128, Math.max(16, Integer.parseInt(StringUtils.trim(size))));\n            } catch (NumberFormatException e) {\n                // ignore\n            }\n        } else {\n            try {\n                targetSize = Math.min(128, Math.max(16, Integer.parseInt(StringUtils.trim(size.substring(0, index)))));\n            } catch (NumberFormatException e) {\n                // ignore\n            }\n        }\n        final CacheEntry avatar = getCacheEntry(key, null);\n        final long since = req.getDateHeader(\\\"If-Modified-Since\\\");\n\n        // If no avatar, all is unmodified\n        if (avatar == null || !avatar.canFetch()) {\n            if (startedTime <= since) {\n                return new HttpResponse() {\n                    @Override\n                    public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                            throws IOException, ServletException {\n                        rsp.addDateHeader(\\\"Last-Modified\\\", startedTime);\n                        rsp.addHeader(\\\"Cache-control\\\", \\\"max-age=365000000, immutable, public\\\");\n                        rsp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                    }\n                };\n            }\n            // we will generate avatars if the URL is not HTTP based\n            // since the url string will not magically turn itself into a HTTP url this\n            // avatar is immutable\n            return new ImageResponse(generateAvatar(avatar == null ? \\\"\\\" : avatar.source.hashKey(), targetSize), true,\n                    startedTime, \\\"max-age=365000000, immutable, public\\\");\n        }\n\n        if (avatar.pending() && avatar.image == null) {\n            // serve a temporary avatar until we get the remote one, no caching as we could\n            // have the real deal\n            // real soon now\n            return new ImageResponse(generateAvatar(avatar.source.hashKey(), targetSize), true, -1L,\n                    \\\"no-cache, public\\\");\n        }\n        if (avatar.lastModified <= since) {\n            return new HttpResponse() {\n\n                @Override\n                public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                        throws IOException, ServletException {\n                    rsp.addDateHeader(\\\"Last-Modified\\\", avatar.lastModified);\n                    rsp.addHeader(\\\"Cache-control\\\", \\\"max-age=3600, public\\\");\n                    rsp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                }\n            };\n        }\n        // If no image, generate a temp avatar\n        if (avatar.image == null) {\n            // we can retry in an hour\n            return new ImageResponse(generateAvatar(avatar.source.hashKey(), targetSize), true, -1L,\n                    \\\"max-age=3600, public\\\");\n        }\n\n        BufferedImage image = avatar.image;\n        boolean flushImage = false;\n        if (image.getWidth() != targetSize || image.getHeight() != targetSize) {\n            image = scaleImage(image, targetSize);\n            flushImage = true;\n        }\n        return new ImageResponse(image, flushImage, avatar.lastModified, \\\"max-age=3600, public\\\");\n    }", "CodeBleu_score": 29.304251572556606}, {"code": "private synchronized boolean pending(){\n\t');\n        // we will only resize images in the 16x16 - 128x128 range\n        if (index < 2) {\n            try {\n                targetSize = Math.min(128, Math.max(16, Integer.parseInt(StringUtils.trim(size))));\n            } catch (NumberFormatException e) {\n                // ignore\n            }\n        } else {\n            try {\n                targetSize = Math.min(128, Math.max(16, Integer.parseInt(StringUtils.trim(size.substring(0, index)))));\n            } catch (NumberFormatException e) {\n                // ignore\n            }\n        }\n        final CacheEntry avatar = getCacheEntry(key, null);\n        final long since = req.getDateHeader(\\\"If-Modified-Since\\\");\n\n        // If no avatar, all is unmodified\n        if (avatar == null || !avatar.canFetch()) {\n            if (startedTime <= since) {\n                return new HttpResponse() {\n                    @Override\n                    public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                            throws IOException, ServletException {\n                        rsp.addDateHeader(\\\"Last-Modified\\\", startedTime);\n                        rsp.addHeader(\\\"Cache-control\\\", \\\"max-age=365000000, immutable, public\\\");\n                        rsp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                    }\n                };\n            }\n            // we will generate avatars if the URL is not HTTP based\n            // since the url string will not magically turn itself into a HTTP url this\n            // avatar is immutable\n            return new ImageResponse(generateAvatar(avatar == null ? \\\"\\\" : avatar.source.hashKey(), targetSize), true,\n                    startedTime, \\\"max-age=365000000, immutable, public\\\");\n        }\n\n        if (avatar.pending() && avatar.image == null) {\n            // serve a temporary avatar until we get the remote one, no caching as we could\n            // have the real deal\n            // real soon now\n            return new ImageResponse(generateAvatar(avatar.source.hashKey(), targetSize), true, -1L,\n                    \\\"no-cache, public\\\");\n        }\n        if (avatar.lastModified <= since) {\n            return new HttpResponse() {\n\n                @Override\n                public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                        throws IOException, ServletException {\n                    rsp.addDateHeader(\\\"Last-Modified\\\", avatar.lastModified);\n                    rsp.addHeader(\\\"Cache-control\\\", \\\"max-age=3600, public\\\");\n                    rsp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                }\n            };\n        }\n        // If no image, generate a temp avatar\n        if (avatar.image == null) {\n            // we can retry in an hour\n            return new ImageResponse(generateAvatar(avatar.source.hashKey(), targetSize), true, -1L,\n                    \\\"max-age=3600, public\\\");\n        }\n\n        BufferedImage image = avatar.image;\n        boolean flushImage = false;\n        if (image.getWidth() != targetSize || image.getHeight() != targetSize) {\n            image = scaleImage(image, targetSize);\n            flushImage = true;\n        }\n        return new ImageResponse(image, flushImage, avatar.lastModified, \\\"max-age=3600, public\\\");\n    }", "CodeBleu_score": 29.304251572556606}, {"code": "private synchronized boolean pending(){\n\t');\n        // we will only resize images in the 16x16 - 128x128 range\n        if (index < 2) {\n            try {\n                targetSize = Math.min(128, Math.max(16, Integer.parseInt(StringUtils.trim(size))));\n            } catch (NumberFormatException e) {\n                // ignore\n            }\n        } else {\n            try {\n                targetSize = Math.min(128, Math.max(16, Integer.parseInt(StringUtils.trim(size.substring(0, index)))));\n            } catch (NumberFormatException e) {\n                // ignore\n            }\n        }\n        final CacheEntry avatar = getCacheEntry(key, null);\n        final long since = req.getDateHeader(\\\"If-Modified-Since\\\");\n\n        // If no avatar, all is unmodified\n        if (avatar == null || !avatar.canFetch()) {\n            if (startedTime <= since) {\n                return new HttpResponse() {\n                    @Override\n                    public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                            throws IOException, ServletException {\n                        rsp.addDateHeader(\\\"Last-Modified\\\", startedTime);\n                        rsp.addHeader(\\\"Cache-control\\\", \\\"max-age=365000000, immutable, public\\\");\n                        rsp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                    }\n                };\n            }\n            // we will generate avatars if the URL is not HTTP based\n            // since the url string will not magically turn itself into a HTTP url this\n            // avatar is immutable\n            return new ImageResponse(generateAvatar(avatar == null ? \\\"\\\" : avatar.source.hashKey(), targetSize), true,\n                    startedTime, \\\"max-age=365000000, immutable, public\\\");\n        }\n\n        if (avatar.pending() && avatar.image == null) {\n            // serve a temporary avatar until we get the remote one, no caching as we could\n            // have the real deal\n            // real soon now\n            return new ImageResponse(generateAvatar(avatar.source.hashKey(), targetSize), true, -1L,\n                    \\\"no-cache, public\\\");\n        }\n        if (avatar.lastModified <= since) {\n            return new HttpResponse() {\n\n                @Override\n                public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                        throws IOException, ServletException {\n                    rsp.addDateHeader(\\\"Last-Modified\\\", avatar.lastModified);\n                    rsp.addHeader(\\\"Cache-control\\\", \\\"max-age=3600, public\\\");\n                    rsp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                }\n            };\n        }\n        // If no image, generate a temp avatar\n        if (avatar.image == null) {\n            // we can retry in an hour\n            return new ImageResponse(generateAvatar(avatar.source.hashKey(), targetSize), true, -1L,\n                    \\\"max-age=3600, public\\\");\n        }\n\n        BufferedImage image = avatar.image;\n        boolean flushImage = false;\n        if (image.getWidth() != targetSize || image.getHeight() != targetSize) {\n            image = scaleImage(image, targetSize);\n            flushImage = true;\n        }\n        return new ImageResponse(image, flushImage, avatar.lastModified, \\\"max-age=3600, public\\\");\n    }", "CodeBleu_score": 29.304251572556606}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t           return new ImageResponse(generateAvatar(avatar.source.hashKey(), targetSize), true, -1L,\n                    \\\"no-cache, public\\\");\n        }", "CodeBleu_score": 13.051076738534718}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t           return new ImageResponse(generateAvatar(avatar.source.hashKey(), targetSize), true, -1L,\n                    \\\"no-cache, public\\\");\n        }", "CodeBleu_score": 13.051076738534718}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t           return new ImageResponse(generateAvatar(avatar.source.hashKey(), targetSize), true, -1L,\n                    \\\"no-cache, public\\\");\n        }", "CodeBleu_score": 13.051076738534718}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tbucketPullRequestValue;", "CodeBleu_score": 7.504665870882987}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tbucketPullRequestValue;", "CodeBleu_score": 7.504665870882987}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tbucketPullRequestValue;", "CodeBleu_score": 7.504665870882987}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t_URL = \\\"https://api.bitbucket.org/2.0/repositories\\\";\n    private static final String V2_WORKSPACES_API_BASE_URL = \\\"https://api.bitbucket.org/2.0/workspaces\\\";\n    private static final String REPO_URL_TEMPLATE = V2_API_BASE_URL + \\\"{/owner,repo}\\\";\n    private static final int API_RATE_LIMIT_CODE = 429;\n    // Limit images to 16k\n    private static final int MAX_AVATAR_LENGTH = 16384;\n    private static final int MAX_PAGE_LENGTH = 100;\n    private static final PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();\n    private CloseableHttpClient client;\n    private HttpClientContext context;\n    private final String owner;\n    private final String projectKey;\n    private final String repositoryName;\n    private final boolean enableCache;\n    private final BitbucketAuthenticator authenticator;\n    private static final Cache<String, BitbucketTeam> cachedTeam = new Cache<>(6, HOURS);\n    private static final Cache<String, AvatarImage> cachedAvatar = new Cache<>(6, HOURS);\n    private static final Cache<String, List<BitbucketCloudRepository>> cachedRepositories = new Cache<>(3, HOURS);\n    private static final Cache<String, BitbucketCloudCommit> cachedCommits = new Cache<>(24, HOURS);\n    private transient BitbucketRepository cachedRepository;\n    private transient String cachedDefaultBranch;\n\n    static {\n        connectionManager.setDefaultMaxPerRoute(20);\n        connectionManager.setMaxTotal(22);\n        connectionManager.setSocketConfig(API_HOST, SocketConfig.custom().setSoTimeout(60 * 1000).build());\n    }\n\n    public static List<String> stats() {\n        List<String> stats = new ArrayList<>();\n        stats.add(\\\"Team: \\\" + cachedTeam.stats().toString());\n        stats.add(\\\"Repositories : \\\" + cachedRepositories.stats().toString());\n        stats.add(\\\"Commits: \\\" + cachedCommits.stats().toString());\n        return stats;\n    }\n\n    public static void clearCaches() {\n        cachedTeam.evictAll();\n        cachedRepositories.evictAll();\n        cachedCommits.evictAll();\n    }\n\n    @Deprecated\n    public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n                                   String owner, String repositoryName, StandardUsernamePasswordCredentials credentials) {\n        this(enableCache, teamCacheDuration, repositoriesCacheDuration, owner, null, repositoryName,\n                new BitbucketUsernamePasswordAuthenticator(credentials));\n    }\n\n    public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator) {\n        this.authenticator = authenticator;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.enableCache = enableCache;\n        if (enableCache) {\n            cachedTeam.setExpireDuration(teamCacheDuration, MINUTES);\n            cachedRepositories.setExpireDuration(repositoriesCacheDuration, MINUTES);\n        }\n\n        // Create Http client\n        HttpClientBuilder httpClientBuilder = HttpClientBuilder.create();\n\n        httpClientBuilder.setKeepAliveStrategy((__, ___) -> MILLISECONDS.convert(5, SECONDS));\n        httpClientBuilder.setConnectionManager(connectionManager);\n        httpClientBuilder.setConnectionManagerShared(true);\n        httpClientBuilder.setRetryHandler(new StandardHttpRequestRetryHandler());\n\n        if (authenticator != null) {\n            authenticator.configureBuilder(httpClientBuilder);\n\n            context = HttpClientContext.create();\n            authenticator.configureContext(context, API_HOST);\n        }\n\n        setClientProxyParams(\\\"bitbucket.org\\\", httpClientBuilder);\n\n        this.client = httpClientBuilder.build();\n    }\n\n    @Override\n    protected void finalize() throws Throwable {\n        if (client != null) {\n            client.close();\n        }\n\n        super.finalize();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @NonNull\n    @Override\n    public String getOwner() {\n        return owner;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    @CheckForNull\n    public String getRepositoryName() {\n        return repositoryName;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @NonNull\n    @Override\n    public List<BitbucketPullRequestValue> getPullRequests() throws InterruptedException, IOException {\n        List<BitbucketPullRequestValue> pullRequests = new ArrayList<>();\n\n        // we can not use the default max pagelen also if documented\n        // https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests#get\n        // so because with values greater than 50 the API returns HTTP 400\n        int pageLen = 50;\n        UriTemplate template = UriTemplate.fromTemplate(REPO_URL_TEMPLATE + \\\"/pullrequests{?page,pagelen}\\\")\n                .set(\\\"owner\\\", owner)\n                .set(\\\"repo\\\", repositoryName)\n                .set(\\\"pagelen\\\", pageLen);\n\n        BitbucketPullRequests page;\n        int pageNumber = 1;\n        do {\n            if (Thread.interrupted()) {\n                throw new InterruptedException();\n            }\n            String url = template //\n                    .set(\\\"page\\\", pageNumber++) //\n                    .expand();\n            String response = getRequest(url);\n            try {\n                page = JsonParser.toJava(response, BitbucketPullRequests.class);\n            } catch (IOException e) {\n                throw new IOException(\\\"I/O error when parsing response from URL: \\\" + url, e);\n            }\n            pullRequests.addAll(page.getValues());\n        } while (page.getNext() != null);\n\n        // PRs with missing destination branch are invalid and should be ignored.\n        pullRequests.removeIf(this::shouldIgnore);\n\n        for (BitbucketPullRequestValue pullRequest : pullRequests) {\n            setupClosureForPRBranch(pullRequest);\n        }\n\n        return pullRequests;\n    }\n\n    /**\n     * PRs with missing source / destination branch are invalid and should be ignored.\n     *\n     * @param pr a {@link BitbucketPullRequest}\n     * @return whether the PR should be ignored\n     */\n    private boolean shouldIgnore(BitbucketPullRequest pr) {\n        return pr.getSource().getRepository() == null\n            || pr.getSource().getCommit() == null\n            || pr.getDestination().getBranch() == null\n            || pr.getDestination().getCommit() == null;\n    }\n\n    /**\n     * Make available commit information in a lazy way.\n     *\n     * @author Nikolas Falco\n     */\n    private class CommitClosure implements Callable<BitbucketCommit> {\n        private final String hash;\n\n        public CommitClosure(@NonNull String hash) {\n            this.hash = hash;\n        }\n\n        @Override\n        public BitbucketCommit call() throws Exception {\n            return resolveCommit(hash);\n        }\n    }\n\n\n\n", "CodeBleu_score": 5.064932050291124}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t_URL = \\\"https://api.bitbucket.org/2.0/repositories\\\";\n    private static final String V2_WORKSPACES_API_BASE_URL = \\\"https://api.bitbucket.org/2.0/workspaces\\\";\n    private static final String REPO_URL_TEMPLATE = V2_API_BASE_URL + \\\"{/owner,repo}\\\";\n    private static final int API_RATE_LIMIT_CODE = 429;\n    // Limit images to 16k\n    private static final int MAX_AVATAR_LENGTH = 16384;\n    private static final int MAX_PAGE_LENGTH = 100;\n    private static final PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();\n    private CloseableHttpClient client;\n    private HttpClientContext context;\n    private final String owner;\n    private final String projectKey;\n    private final String repositoryName;\n    private final boolean enableCache;\n    private final BitbucketAuthenticator authenticator;\n    private static final Cache<String, BitbucketTeam> cachedTeam = new Cache<>(6, HOURS);\n    private static final Cache<String, AvatarImage> cachedAvatar = new Cache<>(6, HOURS);\n    private static final Cache<String, List<BitbucketCloudRepository>> cachedRepositories = new Cache<>(3, HOURS);\n    private static final Cache<String, BitbucketCloudCommit> cachedCommits = new Cache<>(24, HOURS);\n    private transient BitbucketRepository cachedRepository;\n    private transient String cachedDefaultBranch;\n\n    static {\n        connectionManager.setDefaultMaxPerRoute(20);\n        connectionManager.setMaxTotal(22);\n        connectionManager.setSocketConfig(API_HOST, SocketConfig.custom().setSoTimeout(60 * 1000).build());\n    }\n\n    public static List<String> stats() {\n        List<String> stats = new ArrayList<>();\n        stats.add(\\\"Team: \\\" + cachedTeam.stats().toString());\n        stats.add(\\\"Repositories : \\\" + cachedRepositories.stats().toString());\n        stats.add(\\\"Commits: \\\" + cachedCommits.stats().toString());\n        return stats;\n    }\n\n    public static void clearCaches() {\n        cachedTeam.evictAll();\n        cachedRepositories.evictAll();\n        cachedCommits.evictAll();\n    }\n\n    @Deprecated\n    public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n                                   String owner, String repositoryName, StandardUsernamePasswordCredentials credentials) {\n        this(enableCache, teamCacheDuration, repositoriesCacheDuration, owner, null, repositoryName,\n                new BitbucketUsernamePasswordAuthenticator(credentials));\n    }\n\n    public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator) {\n        this.authenticator = authenticator;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.enableCache = enableCache;\n        if (enableCache) {\n            cachedTeam.setExpireDuration(teamCacheDuration, MINUTES);\n            cachedRepositories.setExpireDuration(repositoriesCacheDuration, MINUTES);\n        }\n\n        // Create Http client\n        HttpClientBuilder httpClientBuilder = HttpClientBuilder.create();\n\n        httpClientBuilder.setKeepAliveStrategy((__, ___) -> MILLISECONDS.convert(5, SECONDS));\n        httpClientBuilder.setConnectionManager(connectionManager);\n        httpClientBuilder.setConnectionManagerShared(true);\n        httpClientBuilder.setRetryHandler(new StandardHttpRequestRetryHandler());\n\n        if (authenticator != null) {\n            authenticator.configureBuilder(httpClientBuilder);\n\n            context = HttpClientContext.create();\n            authenticator.configureContext(context, API_HOST);\n        }\n\n        setClientProxyParams(\\\"bitbucket.org\\\", httpClientBuilder);\n\n        this.client = httpClientBuilder.build();\n    }\n\n    @Override\n    protected void finalize() throws Throwable {\n        if (client != null) {\n            client.close();\n        }\n\n        super.finalize();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @NonNull\n    @Override\n    public String getOwner() {\n        return owner;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    @CheckForNull\n    public String getRepositoryName() {\n        return repositoryName;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @NonNull\n    @Override\n    public List<BitbucketPullRequestValue> getPullRequests() throws InterruptedException, IOException {\n        List<BitbucketPullRequestValue> pullRequests = new ArrayList<>();\n\n        // we can not use the default max pagelen also if documented\n        // https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests#get\n        // so because with values greater than 50 the API returns HTTP 400\n        int pageLen = 50;\n        UriTemplate template = UriTemplate.fromTemplate(REPO_URL_TEMPLATE + \\\"/pullrequests{?page,pagelen}\\\")\n                .set(\\\"owner\\\", owner)\n                .set(\\\"repo\\\", repositoryName)\n                .set(\\\"pagelen\\\", pageLen);\n\n        BitbucketPullRequests page;\n        int pageNumber = 1;\n        do {\n            if (Thread.interrupted()) {\n                throw new InterruptedException();\n            }\n            String url = template //\n                    .set(\\\"page\\\", pageNumber++) //\n                    .expand();\n            String response = getRequest(url);\n            try {\n                page = JsonParser.toJava(response, BitbucketPullRequests.class);\n            } catch (IOException e) {\n                throw new IOException(\\\"I/O error when parsing response from URL: \\\" + url, e);\n            }\n            pullRequests.addAll(page.getValues());\n        } while (page.getNext() != null);\n\n        // PRs with missing destination branch are invalid and should be ignored.\n        pullRequests.removeIf(this::shouldIgnore);\n\n        for (BitbucketPullRequestValue pullRequest : pullRequests) {\n            setupClosureForPRBranch(pullRequest);\n        }\n\n        return pullRequests;\n    }\n\n    /**\n     * PRs with missing source / destination branch are invalid and should be ignored.\n     *\n     * @param pr a {@link BitbucketPullRequest}\n     * @return whether the PR should be ignored\n     */\n    private boolean shouldIgnore(BitbucketPullRequest pr) {\n        return pr.getSource().getRepository() == null\n            || pr.getSource().getCommit() == null\n            || pr.getDestination().getBranch() == null\n            || pr.getDestination().getCommit() == null;\n    }\n\n    /**\n     * Make available commit information in a lazy way.\n     *\n     * @author Nikolas Falco\n     */\n    private class CommitClosure implements Callable<BitbucketCommit> {\n        private final String hash;\n\n        public CommitClosure(@NonNull String hash) {\n            this.hash = hash;\n        }\n\n        @Override\n        public BitbucketCommit call() throws Exception {\n            return resolveCommit(hash);\n        }\n    }\n\n\n\n", "CodeBleu_score": 5.064932050291124}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t_URL = \\\"https://api.bitbucket.org/2.0/repositories\\\";\n    private static final String V2_WORKSPACES_API_BASE_URL = \\\"https://api.bitbucket.org/2.0/workspaces\\\";\n    private static final String REPO_URL_TEMPLATE = V2_API_BASE_URL + \\\"{/owner,repo}\\\";\n    private static final int API_RATE_LIMIT_CODE = 429;\n    // Limit images to 16k\n    private static final int MAX_AVATAR_LENGTH = 16384;\n    private static final int MAX_PAGE_LENGTH = 100;\n    private static final PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();\n    private CloseableHttpClient client;\n    private HttpClientContext context;\n    private final String owner;\n    private final String projectKey;\n    private final String repositoryName;\n    private final boolean enableCache;\n    private final BitbucketAuthenticator authenticator;\n    private static final Cache<String, BitbucketTeam> cachedTeam = new Cache<>(6, HOURS);\n    private static final Cache<String, AvatarImage> cachedAvatar = new Cache<>(6, HOURS);\n    private static final Cache<String, List<BitbucketCloudRepository>> cachedRepositories = new Cache<>(3, HOURS);\n    private static final Cache<String, BitbucketCloudCommit> cachedCommits = new Cache<>(24, HOURS);\n    private transient BitbucketRepository cachedRepository;\n    private transient String cachedDefaultBranch;\n\n    static {\n        connectionManager.setDefaultMaxPerRoute(20);\n        connectionManager.setMaxTotal(22);\n        connectionManager.setSocketConfig(API_HOST, SocketConfig.custom().setSoTimeout(60 * 1000).build());\n    }\n\n    public static List<String> stats() {\n        List<String> stats = new ArrayList<>();\n        stats.add(\\\"Team: \\\" + cachedTeam.stats().toString());\n        stats.add(\\\"Repositories : \\\" + cachedRepositories.stats().toString());\n        stats.add(\\\"Commits: \\\" + cachedCommits.stats().toString());\n        return stats;\n    }\n\n    public static void clearCaches() {\n        cachedTeam.evictAll();\n        cachedRepositories.evictAll();\n        cachedCommits.evictAll();\n    }\n\n    @Deprecated\n    public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n                                   String owner, String repositoryName, StandardUsernamePasswordCredentials credentials) {\n        this(enableCache, teamCacheDuration, repositoriesCacheDuration, owner, null, repositoryName,\n                new BitbucketUsernamePasswordAuthenticator(credentials));\n    }\n\n    public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator) {\n        this.authenticator = authenticator;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.enableCache = enableCache;\n        if (enableCache) {\n            cachedTeam.setExpireDuration(teamCacheDuration, MINUTES);\n            cachedRepositories.setExpireDuration(repositoriesCacheDuration, MINUTES);\n        }\n\n        // Create Http client\n        HttpClientBuilder httpClientBuilder = HttpClientBuilder.create();\n\n        httpClientBuilder.setKeepAliveStrategy((__, ___) -> MILLISECONDS.convert(5, SECONDS));\n        httpClientBuilder.setConnectionManager(connectionManager);\n        httpClientBuilder.setConnectionManagerShared(true);\n        httpClientBuilder.setRetryHandler(new StandardHttpRequestRetryHandler());\n\n        if (authenticator != null) {\n            authenticator.configureBuilder(httpClientBuilder);\n\n            context = HttpClientContext.create();\n            authenticator.configureContext(context, API_HOST);\n        }\n\n        setClientProxyParams(\\\"bitbucket.org\\\", httpClientBuilder);\n\n        this.client = httpClientBuilder.build();\n    }\n\n    @Override\n    protected void finalize() throws Throwable {\n        if (client != null) {\n            client.close();\n        }\n\n        super.finalize();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @NonNull\n    @Override\n    public String getOwner() {\n        return owner;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    @CheckForNull\n    public String getRepositoryName() {\n        return repositoryName;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @NonNull\n    @Override\n    public List<BitbucketPullRequestValue> getPullRequests() throws InterruptedException, IOException {\n        List<BitbucketPullRequestValue> pullRequests = new ArrayList<>();\n\n        // we can not use the default max pagelen also if documented\n        // https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests#get\n        // so because with values greater than 50 the API returns HTTP 400\n        int pageLen = 50;\n        UriTemplate template = UriTemplate.fromTemplate(REPO_URL_TEMPLATE + \\\"/pullrequests{?page,pagelen}\\\")\n                .set(\\\"owner\\\", owner)\n                .set(\\\"repo\\\", repositoryName)\n                .set(\\\"pagelen\\\", pageLen);\n\n        BitbucketPullRequests page;\n        int pageNumber = 1;\n        do {\n            if (Thread.interrupted()) {\n                throw new InterruptedException();\n            }\n            String url = template //\n                    .set(\\\"page\\\", pageNumber++) //\n                    .expand();\n            String response = getRequest(url);\n            try {\n                page = JsonParser.toJava(response, BitbucketPullRequests.class);\n            } catch (IOException e) {\n                throw new IOException(\\\"I/O error when parsing response from URL: \\\" + url, e);\n            }\n            pullRequests.addAll(page.getValues());\n        } while (page.getNext() != null);\n\n        // PRs with missing destination branch are invalid and should be ignored.\n        pullRequests.removeIf(this::shouldIgnore);\n\n        for (BitbucketPullRequestValue pullRequest : pullRequests) {\n            setupClosureForPRBranch(pullRequest);\n        }\n\n        return pullRequests;\n    }\n\n    /**\n     * PRs with missing source / destination branch are invalid and should be ignored.\n     *\n     * @param pr a {@link BitbucketPullRequest}\n     * @return whether the PR should be ignored\n     */\n    private boolean shouldIgnore(BitbucketPullRequest pr) {\n        return pr.getSource().getRepository() == null\n            || pr.getSource().getCommit() == null\n            || pr.getDestination().getBranch() == null\n            || pr.getDestination().getCommit() == null;\n    }\n\n    /**\n     * Make available commit information in a lazy way.\n     *\n     * @author Nikolas Falco\n     */\n    private class CommitClosure implements Callable<BitbucketCommit> {\n        private final String hash;\n\n        public CommitClosure(@NonNull String hash) {\n            this.hash = hash;\n        }\n\n        @Override\n        public BitbucketCommit call() throws Exception {\n            return resolveCommit(hash);\n        }\n    }\n\n\n\n", "CodeBleu_score": 5.064932050291124}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration jenkinsLocationConfiguration = JenkinsLocationConfiguration.get();\n    if (jenkinsLocationConfiguration == null) {\n        throw new IllegalStateException(\"Jenkins location configuration is null\");\n    }\n    String rootUrl = jenkinsLocationConfiguration.getUrl();\n    if (rootUrl == null) {\n        throw new IllegalStateException(\"Jenkins location configuration URL is null\");\n    }\n    return DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 56.52403925847901}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration jenkinsLocationConfiguration = JenkinsLocationConfiguration.get();\n    if (jenkinsLocationConfiguration == null) {\n        throw new IllegalStateException(\"Jenkins location configuration is null\");\n    }\n    URL jenkinsURL = jenkinsLocationConfiguration.getUrl();\n    if (jenkinsURL == null) {\n        throw new IllegalStateException(\"Jenkins URL is null\");\n    }\n    return DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 57.0501074937653}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration globalConfig = JenkinsLocationConfiguration.get();\n    if (globalConfig == null) {\n        throw new IllegalStateException(\"Jenkins has no global configuration\");\n    }\n    String jenkinsRootUrl = globalConfig.getUrl();\n    if (jenkinsRootUrl == null) {\n        throw new IllegalStateException(\"Jenkins has no root URL\");\n    }\n    return DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 58.26591023211347}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\ttry {\n        URL u = new URL(url);\n        if (u.getHost().equals(\"localhost\") || u.getHost().equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"Bitbucket API does not support localhost or unconfigured-jenkins-location as the host\");\n        }\n        if (bitbucket instanceof BitbucketCloudApiClient && !u.getHost().contains(\".\")) {\n            throw new IllegalStateException(\"Bitbucket Cloud API requires fully qualified host\");\n        }\n        return url;\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"Invalid URL: \" + url, e);\n    }\n}", "CodeBleu_score": 64.81072503616949}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\ttry {\n        URL u = new URL(url);\n        if (u.getHost().equals(\"localhost\") || u.getHost().equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"Bitbucket does not accept localhost or unconfigured-jenkins-location as the hostname for the Jenkins URL.\");\n        }\n        if (bitbucket instanceof BitbucketCloudApiClient && u.getHost().contains(\".\")) {\n            throw new IllegalStateException(\"Bitbucket Cloud does not accept fully qualified URLs for the Jenkins URL.\");\n        }\n        return url;\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"The Jenkins URL is malformed: \" + url);\n    }\n}", "CodeBleu_score": 68.27098347712621}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\ttry {\n        URL u = new URL(url);\n        if (u.getHost().equals(\"localhost\") || u.getHost().equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"Bitbucket does not support localhost or unconfigured-jenkins-location as the hostname\");\n        }\n        if (bitbucket instanceof BitbucketCloudApiClient && !u.getHost().contains(\".\")) {\n            throw new IllegalStateException(\"Bitbucket Cloud API requires a fully qualified hostname\");\n        }\n        return url;\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"Could not determine Jenkins URL.\", e);\n    }\n}", "CodeBleu_score": 67.41208132965481}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t.BitbucketApi;", "CodeBleu_score": 3.568372831151435}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t.BitbucketApi;", "CodeBleu_score": 3.568372831151435}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t.BitbucketApi;", "CodeBleu_score": 3.568372831151435}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t);\n    }", "CodeBleu_score": 9.26149648301191}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t);\n    }", "CodeBleu_score": 9.26149648301191}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t);\n    }", "CodeBleu_score": 9.26149648301191}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\t.cloudbees.jenkins.plugins.bitbucket.endpoints.BitbucketEndpointConfiguration;", "CodeBleu_score": 1.8407589602745098}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t.cloudbees.jenkins.plugins.bitbucket.endpoints.BitbucketEndpointConfiguration;", "CodeBleu_score": 1.8407589602745098}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t.cloudbees.jenkins.plugins.bitbucket.endpoints.BitbucketEndpointConfiguration;", "CodeBleu_score": 1.8407589602745098}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\tNamedArrayList\n                            .anyOf(NamedArrayList.withAnnotation(Discovery.class),\n                                    NamedArrayList.withAnnotation(Selection.class)),\n                    true, result);\n            int insertionPoint = result.size();\n            NamedArrayList.select(all, \\\"Git\\\", it -> GitSCM.class.isAssignableFrom(it.getScmClass()), true, result);\n            NamedArrayList.select(all, \\\"General\\\", null, true, result, insertionPoint);\n            return result;\n        }", "CodeBleu_score": 30.432677953670932}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\tNamedArrayList\n                            .anyOf(NamedArrayList.withAnnotation(Discovery.class),\n                                    NamedArrayList.withAnnotation(Selection.class)),\n                    true, result);\n            int insertionPoint = result.size();\n            NamedArrayList.select(all, \\\"Git\\\", it -> GitSCM.class.isAssignableFrom(it.getScmClass()), true, result);\n            NamedArrayList.select(all, \\\"General\\\", null, true, result, insertionPoint);\n            return result;\n        }", "CodeBleu_score": 30.432677953670932}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\tNamedArrayList\n                            .anyOf(NamedArrayList.withAnnotation(Discovery.class),\n                                    NamedArrayList.withAnnotation(Selection.class)),\n                    true, result);\n            int insertionPoint = result.size();\n            NamedArrayList.select(all, \\\"Git\\\", it -> GitSCM.class.isAssignableFrom(it.getScmClass()), true, result);\n            NamedArrayList.select(all, \\\"General\\\", null, true, result, insertionPoint);\n            return result;\n        }", "CodeBleu_score": 30.432677953670932}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tList<RefSpec> refSpecs = branchWithHashes.stream()\n            .filter(branchWithHash -> !git.hasRevision(branchWithHash.getHash()))\n            .map(branchWithHash -> new RefSpec(\"+refs/heads/\" + branchWithHash.getBranch() + \":refs/remotes/\" + remoteName + \"/\" + branchWithHash.getBranch()))\n            .collect(Collectors.toList());\n    if (!refSpecs.isEmpty()) {\n        try {\n            FetchCommand fetchCommand = git.fetch_().from(new URIish(cloneLink), refSpecs);\n            fetchCommand.execute();\n        } catch (URISyntaxException | GitException e) {\n            listener.getLogger().println(\"Failed to fetch commits for branches: \" + branchWithHashes.stream().map(BranchWithHash::getBranch).collect(Collectors.joining(\", \")));\n            listener.getLogger().println(e.getMessage());\n        }\n    }\n    return rev;\n}", "CodeBleu_score": 57.287316689515634}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tList<RefSpec> refSpecs = branchWithHashes\n            .stream()\n            .filter(branchWithHash -> {\n                try {\n                    return !git.isCommitInRepo(branchWithHash.getHash());\n                } catch (Exception e) {\n                    e.printStackTrace(listener.getLogger());\n                    return false;\n                }\n            })\n            .map(branchWithHash -> {\n                try {\n                    return new RefSpec(\n                            \"+\" + branchWithHash.getHash() + \":\" + branchWithHash.getBranch()\n                    );\n                } catch (URISyntaxException e) {\n                    e.printStackTrace(listener.getLogger());\n                    return null;\n                }\n            })\n            .collect(Collectors.toList());\n\n    if (!refSpecs.isEmpty()) {\n        try {\n            git.fetch_()\n                    .from(new URIish(cloneLink), refSpecs)\n                    .execute();\n        } catch (Exception e) {\n            e.printStackTrace(listener.getLogger());\n            throw new GitException(e);\n        }\n    }\n\n    return rev;\n}", "CodeBleu_score": 48.53891467223315}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tif (rev == null) {\n            return null;\n        }\n\n        List<BranchWithHash> branchesWithHashes = scm.getExtensions().stream()\n                .filter(e -> e instanceof BranchWithHash)\n                .map(e -> (BranchWithHash) e)\n                .collect(Collectors.toList());\n\n        if (branchesWithHashes.isEmpty()) {\n            return rev;\n        }\n\n        List<RefSpec> refSpecs = branchesWithHashes.stream()\n                .filter(b -> !git.revList(\"--quiet\", \"--verify\", b.getHash()).isEmpty())\n                .map(b -> new RefSpec(b.getHash() + \":\" + b.getHash()))\n                .collect(Collectors.toList());\n\n        if (refSpecs.isEmpty()) {\n            return rev;\n        }\n\n        try {\n            URIish uri = new URIish(cloneLink);\n            FetchCommand fetch = git.fetch_()\n                    .from(uri, refSpecs)\n                    .timeout(scm.getGitTool(build.getParent()).getTimeout());\n            for (GitSCMExtension extension : scm.getExtensions()) {\n                extension.decorateFetchCommand(build, git, listener, fetch);\n            }\n            fetch.execute();\n        } catch (URISyntaxException | GitException e) {\n            listener.error(\"Failed to fetch commits for branches with hashes from \" + cloneLink + \": \" + e);\n        }\n\n        return rev;\n    }", "CodeBleu_score": 45.439868016607356}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\tif (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().get(0));\n    }\n    return result;\n}", "CodeBleu_score": 67.5591182963143}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\tif (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        if (entry.getValue() != null && !entry.getValue().isEmpty()) {\n            result.put(entry.getKey(), entry.getValue().get(0));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 82.46204512203794}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\tif (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        if (entry.getValue() != null && !entry.getValue().isEmpty()) {\n            result.put(entry.getKey(), entry.getValue().get(0));\n        }\n    }\n    return Collections.unmodifiableMap(result);\n}", "CodeBleu_score": 70.76508693278244}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\tif (resourceStates.length === 0) {\n        return;\n    }\n\n    const uris = this.getResourceUris(resourceStates);\n    const resources = this.getResources(uris);\n    const groupedResources = this.groupByRepository(resources);\n\n    for (const [repository, paths] of groupedResources) {\n        try {\n            await repository.addFiles(paths);\n        } catch (error) {\n            console.error(error);\n            window.showErrorMessage(`Unable to add files: ${error}`);\n        }\n    }\n}", "CodeBleu_score": 51.660148995715716}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\tif (resourceStates.length === 0) {\n        return;\n    }\n\n    const uris = this.getSCMResourceURIs(resourceStates);\n    const resources = await this.getSCMResources(uris);\n    const groupedResources = this.groupByRepo(resources);\n\n    for (const [, resources] of groupedResources) {\n        const paths = resources.map(resource => resource.resourceUri.fsPath);\n        try {\n            await this.runByRepository(resources[0].resourceUri, async (repository) => {\n                const files = paths.map(path => path.substring(repository.root.length + 1));\n                await repository.addFiles(files);\n            });\n        } catch (error) {\n            console.error(error);\n            window.showErrorMessage(`Unable to add files: ${error}`);\n        }\n    }\n}", "CodeBleu_score": 52.2910270967649}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t// Select the resource states to add.\n\tresourceStates = await this.resourceStates(resourceStates);\n\tif (!resourceStates) {\n\t\treturn;\n\t}\n\n\t// Group the resources by repository.\n\tconst groups = this.groupByRepository(resourceStates);\n\n\tfor (const repository of groups.keys()) {\n\t\tconst paths = groups.get(repository)!.map(resource => resource.resourceUri.fsPath);\n\n\t\ttry {\n\t\t\tawait repository.addFiles(paths);\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\n\t\t\twindow.showErrorMessage(`Unable to add files to ${repository.root}`);\n\t\t}\n\t}\n}", "CodeBleu_score": 50.69577237076531}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\tif (!resourceStates || !resourceStates.length || !(resourceStates[0] instanceof Uri)) {\n    const scmResourceStates = await commands.executeCommand('svn.getSCMResourceStates');\n    if (scmResourceStates && scmResourceStates.length) {\n      resourceStates = scmResourceStates;\n    }\n  }\n\n  return resourceStates.filter(resourceState => resourceState instanceof Resource) as Resource[];\n}", "CodeBleu_score": 44.27744071629074}, {"code": "protected async getResourceStates{\n\tif (resourceStates.length === 0) {\n        const resourceState = await commands.executeCommand<SourceControlResourceState>(\n            \"svn.getResourceState\",\n            resourceUri\n        );\n        if (resourceState instanceof Resource) {\n            resourceStates.push(resourceState);\n        }\n    } else if (!(resourceStates[0].resourceUri instanceof Uri)) {\n        const resourceState = await commands.executeCommand<SourceControlResourceState>(\n            \"svn.getResourceState\",\n            resourceUri\n        );\n        if (resourceState instanceof Resource) {\n            resourceStates.splice(0, 1, resourceState);\n        }\n    }\n\n    return resourceStates.filter(resourceState => resourceState instanceof Resource) as Resource[];\n}", "CodeBleu_score": 40.68930707167727}, {"code": "protected async getResourceStates{\n\tconst resourceStates = this.resourceStates;\n  if (resourceStates.length === 0 || !(resourceStates[0] instanceof Uri)) {\n    const sourceControl = this.sourceControl;\n    const scmResourceStates = await commands.executeCommand<SourceControlResourceState[]>(\n      \"svn.getResourceState\",\n      sourceControl\n    );\n    if (scmResourceStates) {\n      this.resourceStates = scmResourceStates;\n    }\n  }\n\n  return this.resourceStates.filter(\n    (resourceState): resourceState is Resource => resourceState instanceof Resource\n  );\n}", "CodeBleu_score": 35.3725260076363}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\turi = uri\n      ? uri\n      : window.activeTextEditor\n      ? window.activeTextEditor.document.uri\n      : undefined;\n\n    if (!uri) {\n      return undefined;\n    }\n\n    if (uri.scheme === \"svn\") {\n      uri = fromSvnUri(uri);\n    }\n\n    if (uri.scheme !== \"file\") {\n      return undefined;\n    }\n\n    const sourceControlManager = (await commands.executeCommand(\n      \"svn.getSourceControlManager\",\n      \"\"\n    )) as SourceControlManager;\n    const repository = sourceControlManager.getRepository(uri);\n\n    if (!repository) {\n      return undefined;\n    }\n\n    return repository.getResourceFromFile(uri);\n  }", "CodeBleu_score": 60.905195236817}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\tif (!uri) {\n      const activeTextEditor = window.activeTextEditor;\n\n      if (!activeTextEditor) {\n        return undefined;\n      }\n\n      uri = activeTextEditor.document.uri;\n    }\n\n    if (uri.scheme === 'svn') {\n      uri = fromSvnUri(uri);\n    }\n\n    if (uri.scheme !== 'file') {\n      return undefined;\n    }\n\n    const sourceControlManager = (await commands.executeCommand('svn.getSourceControlManager', '')) as SourceControlManager;\n    const repository = sourceControlManager.getRepository(uri);\n\n    if (!repository) {\n      return undefined;\n    }\n\n    return repository.getResourceFromFile(uri);\n  }", "CodeBleu_score": 64.87503119493583}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\turi = uri || window.activeTextEditor?.document.uri;\n\n    if (!uri) {\n      return undefined;\n    }\n\n    if (uri.scheme === \"svn\") {\n      uri = Uri.file(uri.fsPath);\n    }\n\n    if (uri.scheme !== \"file\") {\n      return undefined;\n    }\n\n    const sourceControlManager = (await commands.executeCommand(\n      \"svn.getSourceControlManager\",\n      \"\"\n    )) as SourceControlManager;\n    const repository = sourceControlManager.getRepository(uri);\n\n    if (!repository) {\n      return undefined;\n    }\n\n    return repository.getSCMResource(uri);\n  }", "CodeBleu_score": 65.43064277772947}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\tconst remote = await element.repo.getRemote();\n    if (element.item === Status.ADDED) {\n      openFileRemote(element.newPath, remote, element.newRevision);\n    } else if (element.item === Status.DELETED) {\n      openFileRemote(element.oldPath, remote, element.oldRevision);\n    } else if (element.item === Status.MODIFIED) {\n      openDiff(element.oldPath, element.oldRevision, element.newPath, element.newRevision, remote);\n    }\n  }", "CodeBleu_score": 45.95964060179214}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\tif (element.item === Status.MODIFIED) {\n      openDiff(element);\n    } else if (element.item === Status.ADDED) {\n      openFileRemote(element);\n    }\n  }", "CodeBleu_score": 28.829999508257558}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\tconst repo = await this.model.getRemoteRepository(element.repo);\n    if (element.item === Status.MODIFIED) {\n      return openDiff(repo, element.oldPath, element.oldRevision, element.newPath, element.newRevision);\n    } else if (element.item === Status.ADDED) {\n      return openFileRemote(repo, element.newPath, element.newRevision);\n    }\n  }", "CodeBleu_score": 75.59299547509059}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\tif (typeof env.clipboard.writeText !== \"function\") {\n    window.showErrorMessage(\"Copying to the clipboard is not supported.\");\n    return;\n  }\n\n  let text = \"\";\n\n  switch (what) {\n    case \"revision\":\n      text = item.data.revision.toString();\n      break;\n    case \"message\":\n      text = item.data.message;\n      break;\n    default:\n      throw Error(`Unknown copy type: ${what}`);\n  }\n\n  await env.clipboard.writeText(text);\n}", "CodeBleu_score": 35.79008803038799}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\tconst clipboardSupported = env.clipboard.availableFormats.includes(\"text/plain\");\n  if (!clipboardSupported) {\n    window.showErrorMessage(\"Copying to the clipboard is not supported in this environment.\");\n    return;\n  }\n\n  let text: string;\n  switch (what) {\n    case \"revision\":\n      text = item.data.revision;\n      break;\n    case \"message\":\n      text = (item.data as ISvnLogEntry).msg;\n      break;\n    default:\n      throw new Error(`Invalid copy target: ${what}`);\n  }\n\n  await env.clipboard.writeText(text);\n}", "CodeBleu_score": 45.28110731388861}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\tif (!env.clipboard.available) {\n    window.showErrorMessage(\"Clipboard is not available.\");\n    return;\n  }\n\n  if (item.kind === LogTreeItemKind.Commit) {\n    const commit = item.data as ISvnLogEntry;\n    if (what === \"revision\") {\n      await env.clipboard.writeText(commit.revision.toString());\n    } else if (what === \"message\") {\n      await env.clipboard.writeText(commit.msg);\n    }\n  } else if (item.kind === LogTreeItemKind.CommitDetail) {\n    const path = item.data as ISvnLogEntryPath;\n    if (what === \"revision\") {\n      await env.clipboard.writeText(path.revision.toString());\n    } else if (what === \"path\") {\n      await env.clipboard.writeText(path.path);\n    }\n  } else if (item.kind === LogTreeItemKind.TItem) {\n    const titem = item.data as TreeItem;\n    if (what === \"label\") {\n      await env.clipboard.writeText(titem.label);\n    }\n  }\n}", "CodeBleu_score": 46.76851305565394}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tif (classLoader == null) {\n        classLoader = Jenkins.getActiveInstance().getPluginManager().uberClassLoader;\n    }\n    ServiceLoader<GiteaConnectionFactory> serviceLoader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n    GiteaConnectionFactory factory = null;\n    int highestPriority = Integer.MIN_VALUE;\n    for (GiteaConnectionFactory f : serviceLoader) {\n        int priority = f.getPriority();\n        if (priority > highestPriority && f.supports(serverUrl)) {\n            factory = f;\n            highestPriority = priority;\n        }\n    }\n    if (factory == null) {\n        throw new IOException(\"No suitable GiteaConnectionFactory found for \" + serverUrl);\n    }\n    return factory.open(serverUrl, authentication);\n}", "CodeBleu_score": 43.26402008866076}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n    GiteaConnectionFactory factory = null;\n    int priority = Integer.MIN_VALUE;\n    for (GiteaConnectionFactory f : loader) {\n        int fp = f.getPriority();\n        if (fp > priority && f.accepts(serverUrl)) {\n            factory = f;\n            priority = fp;\n        }\n    }\n    if (factory == null) {\n        throw new IOException(\"No GiteaConnectionFactory implementation found for \" + serverUrl);\n    }\n    return factory.open(this);\n}", "CodeBleu_score": 57.47567561915652}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tClassLoader classLoader = this.classLoader;\n    if (classLoader == null) {\n        classLoader = Jenkins.getInstance().getPluginManager().uberClassLoader;\n    }\n    ServiceLoader<GiteaConnectionFactory> serviceLoader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n    GiteaConnectionFactory factory = null;\n    int priority = Integer.MIN_VALUE;\n    for (GiteaConnectionFactory f : serviceLoader) {\n        if (f.supports(this)) {\n            if (f.priority() > priority) {\n                factory = f;\n                priority = f.priority();\n            }\n        }\n    }\n    if (factory == null) {\n        throw new IOException(\"No suitable GiteaConnectionFactory implementation found\");\n    }\n    return factory.open(this);\n}", "CodeBleu_score": 43.53308574698678}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\tClassLoader classLoader = null;\n    Jenkins jenkins = Jenkins.getInstance();\n    if (jenkins != null) {\n        classLoader = jenkins.getPluginManager().uberClassLoader;\n    }\n    if (classLoader == null) {\n        classLoader = getClass().getClassLoader();\n    }\n    return classLoader(classLoader);\n}", "CodeBleu_score": 45.86322369003419}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\tClassLoader classLoader = Jenkins.getInstance() == null ? getClass().getClassLoader() : Jenkins.getInstance().getPluginManager().uberClassLoader;\n    return classLoader(classLoader);\n}", "CodeBleu_score": 52.45319688627881}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\tClassLoader cl = null;\n    Jenkins jenkins = Jenkins.getInstance();\n    if (jenkins != null) {\n        cl = jenkins.getPluginManager().uberClassLoader;\n    }\n    if (cl == null) {\n        cl = this.getClass().getClassLoader();\n    }\n    return classLoader(cl);\n}", "CodeBleu_score": 46.09163745640766}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tthis.displayName = displayName;\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    this.credentialsId = manageHooks ? credentialsId : null;\n    this.aliasUrl = normalizeServerUrl(aliasUrl);\n}", "CodeBleu_score": 40.37219185945909}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tthis.displayName = displayName;\n        this.serverUrl = normalizeServerUrl(serverUrl);\n        this.manageHooks = manageHooks;\n        this.credentialsId = manageHooks ? credentialsId : null;\n        this.aliasUrl = normalizeServerUrl(aliasUrl);\n    }", "CodeBleu_score": 41.92989175117672}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tif (StringUtils.isBlank(displayName)) {\n            this.displayName = SCMName.fromUrl(serverUrl, COMMON_PREFIX_HOSTNAMES);\n        } else {\n            this.displayName = displayName;\n        }\n        this.serverUrl = Util.ensureEndsWith(serverUrl, \"/\");\n        this.manageHooks = manageHooks;\n        this.credentialsId = manageHooks ? credentialsId : null;\n        this.aliasUrl = StringUtils.isBlank(aliasUrl) ? null : Util.ensureEndsWith(aliasUrl, \"/\");\n    }", "CodeBleu_score": 54.27483008489142}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\tif different from the URL that Jenkins needs to use to\n     * access Gitea.\n     *\n     * @since 1.0.5\n     */\n    @CheckForNull\n    private final String aliasUrl;\n\n    /**\n     * Constructor\n     *\n     * @param displayName   Optional name to use to describe the end-point.\n     * @param serverUrl     The URL of this Gitea Server\n     * @param manageHooks   {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     * @param credentialsId The {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for\n     *                      auto-management of hooks.\n     * @deprecated Use {@link #GiteaServer(String, String, boolean, String, String)}\n     */\n    @Deprecated\n    @Restricted(DoNotUse.class)\n    public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId) {\n        this(displayName, serverUrl, manageHooks, credentialsId, null);\n    }\n\n    /**\n     * Constructor\n     *\n     * @param displayName   Optional name to use to describe the end-point.\n     * @param serverUrl     The URL of this Gitea Server\n     * @param manageHooks   {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     * @param credentialsId The {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for\n     *                      auto-management of hooks.\n     * @param aliasUrl      The URL this Gitea Server thinks it is at.\n     * @since 1.0.5\n     */\n    @DataBoundConstructor\n    public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n        this.manageHooks = manageHooks && StringUtils.isNotBlank(credentialsId);\n        this.credentialsId = manageHooks ? credentialsId : null;\n        this.serverUrl = GiteaServers.normalizeServerUrl(serverUrl);\n        this.displayName = StringUtils.isBlank(displayName)\n                ? SCMName.fromUrl(this.serverUrl, COMMON_PREFIX_HOSTNAMES)\n                : displayName;\n        this.aliasUrl = StringUtils.trimToNull(GiteaServers.normalizeServerUrl(aliasUrl));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @CheckForNull\n    public String getDisplayName() {\n        return displayName;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @NonNull\n    public String getServerUrl() {\n        return serverUrl;\n    }\n\n    /**\n     * Returns {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     *\n     * @return {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     */\n    public final boolean isManageHooks() {\n        return manageHooks;\n    }\n\n    /**\n     * Returns the {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for auto-management\n     * of hooks.\n     *\n     * @return the {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for auto-management\n     * of hooks.\n     */\n    @CheckForNull\n    public final String getCredentialsId() {\n        return credentialsId;\n    }\n\n    /**\n     * Returns the {@link #getServerUrl()} that the Gitea server believes it has when publishing webhook events or\n     * {@code null} if this is a normal environment and Gitea is accessed through one true URL and has been configured\n     * with that URL.\n     *\n     * @return the {@link #getServerUrl()} that the Gitea server believes it has when publishing webhook events or\n     * {@code null}\n     * @since 1.0.5\n     */\n    @CheckForNull\n    public String getAliasUrl() {\n        return aliasUrl;\n    }\n\n    /**\n     * Looks up the {@link StandardCredentials} to use for auto-management of hooks.\n     *\n     * @return the credentials or {@code null}.\n     */\n    @CheckForNull\n    public StandardCredentials credentials() {\n        return StringUtils.isBlank(credentialsId) ? null : CredentialsMatchers.firstOrNull(\n                CredentialsProvider.lookupCredentials(\n                        StandardCredentials.class,\n                        Jenkins.get(),\n                        ACL.SYSTEM,\n                        URIRequirementBuilder.fromUri(serverUrl).build()\n                ),\n                CredentialsMatchers.allOf(\n                        AuthenticationTokens.matcher(GiteaAuth.class),\n                        CredentialsMatchers.withId(credentialsId)\n                )\n        );\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public DescriptorImpl getDescriptor() {\n        return (DescriptorImpl) super.getDescriptor();\n    }\n\n    /**\n     * Our descriptor.\n     */\n    @Extension\n    public static class DescriptorImpl extends Descriptor<GiteaServer> {\n        /**\n         * Checks that the supplied URL is valid.\n         *\n         * @param value the URL to check.\n         * @return the validation results.\n         */\n        public static FormValidation doCheckServerUrl(@QueryParameter String value) {\n            Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n            try (GiteaConnection c = Gitea.server(GiteaServers.normalizeServerUrl(value)).open()) {\n                return FormValidation\n                        .okWithMarkup(Messages.GiteaServer_serverVersion(Util.escape(c.fetchVersion().getVersion())));\n            } catch (MalformedURLException e) {\n                return FormValidation.errorWithMarkup(Messages.GiteaServer_invalidUrl(Util.escape(e.getMessage())));\n            } catch (InterruptedException e) {\n                return FormValidation.warning(Messages.GiteaServer_versionInterrupted());\n            } catch (IOException e) {\n                return FormValidation\n                        .errorWithMarkup(Messages.GiteaServer_cannotConnect(Util.escape(e.getMessage())));\n            }\n        }\n\n        /**\n         * Checks that the supplied URL is valid.\n         *\n         * @param value the URL to check.\n         * @return the validation results.\n         */\n        public static FormValidation doCheckAliasUrl(@QueryParameter String value) {\n            Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n            if (StringUtils.isBlank(value)) return FormValidation.ok();\n            try {\n                new URI(value);\n                return FormValidation.ok();\n            } catch (URISyntaxException e) {\n                return FormValidation.errorWithMarkup(Messages.GiteaServer_invalidUrl(Util.escape(e.getMessage())));\n            }\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Nonnull\n        @Override\n        public String getDisplayName() {\n            return Messages.GiteaServer_displayName();\n        }\n\n        /**\n         * Stapler form completion.\n         *\n         * @param serverUrl the server URL.\n         * @return the available credentials.\n         */\n        @Restricted(NoExternalUse.class) // stapler\n        @SuppressWarnings(\\\"unused\\\")\n\n\n", "CodeBleu_score": 43.496774863277246}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\tif different from the URL that Jenkins needs to use to\n     * access Gitea.\n     *\n     * @since 1.0.5\n     */\n    @CheckForNull\n    private final String aliasUrl;\n\n    /**\n     * Constructor\n     *\n     * @param displayName   Optional name to use to describe the end-point.\n     * @param serverUrl     The URL of this Gitea Server\n     * @param manageHooks   {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     * @param credentialsId The {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for\n     *                      auto-management of hooks.\n     * @deprecated Use {@link #GiteaServer(String, String, boolean, String, String)}\n     */\n    @Deprecated\n    @Restricted(DoNotUse.class)\n    public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId) {\n        this(displayName, serverUrl, manageHooks, credentialsId, null);\n    }\n\n    /**\n     * Constructor\n     *\n     * @param displayName   Optional name to use to describe the end-point.\n     * @param serverUrl     The URL of this Gitea Server\n     * @param manageHooks   {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     * @param credentialsId The {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for\n     *                      auto-management of hooks.\n     * @param aliasUrl      The URL this Gitea Server thinks it is at.\n     * @since 1.0.5\n     */\n    @DataBoundConstructor\n    public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n        this.manageHooks = manageHooks && StringUtils.isNotBlank(credentialsId);\n        this.credentialsId = manageHooks ? credentialsId : null;\n        this.serverUrl = GiteaServers.normalizeServerUrl(serverUrl);\n        this.displayName = StringUtils.isBlank(displayName)\n                ? SCMName.fromUrl(this.serverUrl, COMMON_PREFIX_HOSTNAMES)\n                : displayName;\n        this.aliasUrl = StringUtils.trimToNull(GiteaServers.normalizeServerUrl(aliasUrl));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @CheckForNull\n    public String getDisplayName() {\n        return displayName;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @NonNull\n    public String getServerUrl() {\n        return serverUrl;\n    }\n\n    /**\n     * Returns {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     *\n     * @return {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     */\n    public final boolean isManageHooks() {\n        return manageHooks;\n    }\n\n    /**\n     * Returns the {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for auto-management\n     * of hooks.\n     *\n     * @return the {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for auto-management\n     * of hooks.\n     */\n    @CheckForNull\n    public final String getCredentialsId() {\n        return credentialsId;\n    }\n\n    /**\n     * Returns the {@link #getServerUrl()} that the Gitea server believes it has when publishing webhook events or\n     * {@code null} if this is a normal environment and Gitea is accessed through one true URL and has been configured\n     * with that URL.\n     *\n     * @return the {@link #getServerUrl()} that the Gitea server believes it has when publishing webhook events or\n     * {@code null}\n     * @since 1.0.5\n     */\n    @CheckForNull\n    public String getAliasUrl() {\n        return aliasUrl;\n    }\n\n    /**\n     * Looks up the {@link StandardCredentials} to use for auto-management of hooks.\n     *\n     * @return the credentials or {@code null}.\n     */\n    @CheckForNull\n    public StandardCredentials credentials() {\n        return StringUtils.isBlank(credentialsId) ? null : CredentialsMatchers.firstOrNull(\n                CredentialsProvider.lookupCredentials(\n                        StandardCredentials.class,\n                        Jenkins.get(),\n                        ACL.SYSTEM,\n                        URIRequirementBuilder.fromUri(serverUrl).build()\n                ),\n                CredentialsMatchers.allOf(\n                        AuthenticationTokens.matcher(GiteaAuth.class),\n                        CredentialsMatchers.withId(credentialsId)\n                )\n        );\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public DescriptorImpl getDescriptor() {\n        return (DescriptorImpl) super.getDescriptor();\n    }\n\n    /**\n     * Our descriptor.\n     */\n    @Extension\n    public static class DescriptorImpl extends Descriptor<GiteaServer> {\n        /**\n         * Checks that the supplied URL is valid.\n         *\n         * @param value the URL to check.\n         * @return the validation results.\n         */\n        public static FormValidation doCheckServerUrl(@QueryParameter String value) {\n            Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n            try (GiteaConnection c = Gitea.server(GiteaServers.normalizeServerUrl(value)).open()) {\n                return FormValidation\n                        .okWithMarkup(Messages.GiteaServer_serverVersion(Util.escape(c.fetchVersion().getVersion())));\n            } catch (MalformedURLException e) {\n                return FormValidation.errorWithMarkup(Messages.GiteaServer_invalidUrl(Util.escape(e.getMessage())));\n            } catch (InterruptedException e) {\n                return FormValidation.warning(Messages.GiteaServer_versionInterrupted());\n            } catch (IOException e) {\n                return FormValidation\n                        .errorWithMarkup(Messages.GiteaServer_cannotConnect(Util.escape(e.getMessage())));\n            }\n        }\n\n        /**\n         * Checks that the supplied URL is valid.\n         *\n         * @param value the URL to check.\n         * @return the validation results.\n         */\n        public static FormValidation doCheckAliasUrl(@QueryParameter String value) {\n            Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n            if (StringUtils.isBlank(value)) return FormValidation.ok();\n            try {\n                new URI(value);\n                return FormValidation.ok();\n            } catch (URISyntaxException e) {\n                return FormValidation.errorWithMarkup(Messages.GiteaServer_invalidUrl(Util.escape(e.getMessage())));\n            }\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Nonnull\n        @Override\n        public String getDisplayName() {\n            return Messages.GiteaServer_displayName();\n        }\n\n        /**\n         * Stapler form completion.\n         *\n         * @param serverUrl the server URL.\n         * @return the available credentials.\n         */\n        @Restricted(NoExternalUse.class) // stapler\n        @SuppressWarnings(\\\"unused\\\")\n\n\n", "CodeBleu_score": 43.496774863277246}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\tif different from the URL that Jenkins needs to use to\n     * access Gitea.\n     *\n     * @since 1.0.5\n     */\n    @CheckForNull\n    private final String aliasUrl;\n\n    /**\n     * Constructor\n     *\n     * @param displayName   Optional name to use to describe the end-point.\n     * @param serverUrl     The URL of this Gitea Server\n     * @param manageHooks   {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     * @param credentialsId The {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for\n     *                      auto-management of hooks.\n     * @deprecated Use {@link #GiteaServer(String, String, boolean, String, String)}\n     */\n    @Deprecated\n    @Restricted(DoNotUse.class)\n    public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId) {\n        this(displayName, serverUrl, manageHooks, credentialsId, null);\n    }\n\n    /**\n     * Constructor\n     *\n     * @param displayName   Optional name to use to describe the end-point.\n     * @param serverUrl     The URL of this Gitea Server\n     * @param manageHooks   {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     * @param credentialsId The {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for\n     *                      auto-management of hooks.\n     * @param aliasUrl      The URL this Gitea Server thinks it is at.\n     * @since 1.0.5\n     */\n    @DataBoundConstructor\n    public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n        this.manageHooks = manageHooks && StringUtils.isNotBlank(credentialsId);\n        this.credentialsId = manageHooks ? credentialsId : null;\n        this.serverUrl = GiteaServers.normalizeServerUrl(serverUrl);\n        this.displayName = StringUtils.isBlank(displayName)\n                ? SCMName.fromUrl(this.serverUrl, COMMON_PREFIX_HOSTNAMES)\n                : displayName;\n        this.aliasUrl = StringUtils.trimToNull(GiteaServers.normalizeServerUrl(aliasUrl));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @CheckForNull\n    public String getDisplayName() {\n        return displayName;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @NonNull\n    public String getServerUrl() {\n        return serverUrl;\n    }\n\n    /**\n     * Returns {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     *\n     * @return {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     */\n    public final boolean isManageHooks() {\n        return manageHooks;\n    }\n\n    /**\n     * Returns the {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for auto-management\n     * of hooks.\n     *\n     * @return the {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for auto-management\n     * of hooks.\n     */\n    @CheckForNull\n    public final String getCredentialsId() {\n        return credentialsId;\n    }\n\n    /**\n     * Returns the {@link #getServerUrl()} that the Gitea server believes it has when publishing webhook events or\n     * {@code null} if this is a normal environment and Gitea is accessed through one true URL and has been configured\n     * with that URL.\n     *\n     * @return the {@link #getServerUrl()} that the Gitea server believes it has when publishing webhook events or\n     * {@code null}\n     * @since 1.0.5\n     */\n    @CheckForNull\n    public String getAliasUrl() {\n        return aliasUrl;\n    }\n\n    /**\n     * Looks up the {@link StandardCredentials} to use for auto-management of hooks.\n     *\n     * @return the credentials or {@code null}.\n     */\n    @CheckForNull\n    public StandardCredentials credentials() {\n        return StringUtils.isBlank(credentialsId) ? null : CredentialsMatchers.firstOrNull(\n                CredentialsProvider.lookupCredentials(\n                        StandardCredentials.class,\n                        Jenkins.get(),\n                        ACL.SYSTEM,\n                        URIRequirementBuilder.fromUri(serverUrl).build()\n                ),\n                CredentialsMatchers.allOf(\n                        AuthenticationTokens.matcher(GiteaAuth.class),\n                        CredentialsMatchers.withId(credentialsId)\n                )\n        );\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public DescriptorImpl getDescriptor() {\n        return (DescriptorImpl) super.getDescriptor();\n    }\n\n    /**\n     * Our descriptor.\n     */\n    @Extension\n    public static class DescriptorImpl extends Descriptor<GiteaServer> {\n        /**\n         * Checks that the supplied URL is valid.\n         *\n         * @param value the URL to check.\n         * @return the validation results.\n         */\n        public static FormValidation doCheckServerUrl(@QueryParameter String value) {\n            Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n            try (GiteaConnection c = Gitea.server(GiteaServers.normalizeServerUrl(value)).open()) {\n                return FormValidation\n                        .okWithMarkup(Messages.GiteaServer_serverVersion(Util.escape(c.fetchVersion().getVersion())));\n            } catch (MalformedURLException e) {\n                return FormValidation.errorWithMarkup(Messages.GiteaServer_invalidUrl(Util.escape(e.getMessage())));\n            } catch (InterruptedException e) {\n                return FormValidation.warning(Messages.GiteaServer_versionInterrupted());\n            } catch (IOException e) {\n                return FormValidation\n                        .errorWithMarkup(Messages.GiteaServer_cannotConnect(Util.escape(e.getMessage())));\n            }\n        }\n\n        /**\n         * Checks that the supplied URL is valid.\n         *\n         * @param value the URL to check.\n         * @return the validation results.\n         */\n        public static FormValidation doCheckAliasUrl(@QueryParameter String value) {\n            Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n            if (StringUtils.isBlank(value)) return FormValidation.ok();\n            try {\n                new URI(value);\n                return FormValidation.ok();\n            } catch (URISyntaxException e) {\n                return FormValidation.errorWithMarkup(Messages.GiteaServer_invalidUrl(Util.escape(e.getMessage())));\n            }\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Nonnull\n        @Override\n        public String getDisplayName() {\n            return Messages.GiteaServer_displayName();\n        }\n\n        /**\n         * Stapler form completion.\n         *\n         * @param serverUrl the server URL.\n         * @return the available credentials.\n         */\n        @Restricted(NoExternalUse.class) // stapler\n        @SuppressWarnings(\\\"unused\\\")\n\n\n", "CodeBleu_score": 43.496774863277246}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\n        return \"\";\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        if (uri.getScheme() != null) {\n            serverUrl = uri.getScheme().toLowerCase(Locale.ENGLISH) + \"://\" + uri.getAuthority();\n        }\n        if (uri.getPort() == 80 || uri.getPort() == 443) {\n            serverUrl = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), -1, uri.getPath(), uri.getQuery(), uri.getFragment()).toString();\n        }\n        if (serverUrl.endsWith(\"/\")) {\n            serverUrl = serverUrl.substring(0, serverUrl.length() - 1);\n        }\n    } catch (URISyntaxException e) {\n        // ignore\n    }\n    return serverUrl;\n}", "CodeBleu_score": 44.41638722045011}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\ttry {\n        if (StringUtils.isBlank(serverUrl)) {\n            return \"\";\n        }\n        URI uri = new URI(serverUrl).parseServerAuthority();\n        if (uri.getHost() == null) {\n            return \"\";\n        }\n        if (uri.getScheme() == null) {\n            uri = new URI(\"http://\" + serverUrl);\n        }\n        if (uri.getHost() == null) {\n            return \"\";\n        }\n        if (uri.getPort() == -1) {\n            return uri.toString().toLowerCase(Locale.ENGLISH);\n        }\n        if ((uri.getPort() == 80 && \"http\".equals(uri.getScheme()))\n                || (uri.getPort() == 443 && \"https\".equals(uri.getScheme()))) {\n            return new URI(uri.getScheme(), null, uri.getHost(), -1, uri.getPath(), uri.getQuery(), uri.getFragment())\n                    .toString()\n                    .toLowerCase(Locale.ENGLISH);\n        }\n        return uri.toString().toLowerCase(Locale.ENGLISH);\n    } catch (URISyntaxException e) {\n        return \"\";\n    }\n}", "CodeBleu_score": 39.670050249151146}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\n        return \"\";\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        if (scheme == null) {\n            throw new URISyntaxException(serverUrl, \"No scheme specified\");\n        }\n        scheme = scheme.toLowerCase(Locale.ENGLISH);\n        int port = uri.getPort();\n        if (port == -1) {\n            if (\"http\".equals(scheme)) {\n                port = 80;\n            } else if (\"https\".equals(scheme)) {\n                port = 443;\n            }\n        }\n        String host = uri.getHost();\n        if (host == null) {\n            throw new URISyntaxException(serverUrl, \"No host specified\");\n        }\n        StringBuilder sb = new StringBuilder();\n        sb.append(scheme);\n        sb.append(\"://\");\n        sb.append(host);\n        if (port != -1) {\n            sb.append(':');\n            sb.append(port);\n        }\n        String path = uri.getPath();\n        if (path != null) {\n            sb.append(path);\n        }\n        return sb.toString();\n    } catch (URISyntaxException e) {\n        return serverUrl.toLowerCase(Locale.ENGLISH);\n    }\n}", "CodeBleu_score": 44.56286499494142}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\t* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */", "CodeBleu_score": 15.47059711405511}, {"code": "public ListBoxModel getServerItems(){\n\t* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */", "CodeBleu_score": 15.47059711405511}, {"code": "public ListBoxModel getServerItems(){\n\t* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */", "CodeBleu_score": 15.47059711405511}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tIterator;", "CodeBleu_score": 2.8017183249687947}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tIterator;", "CodeBleu_score": 2.8017183249687947}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tIterator;", "CodeBleu_score": 2.8017183249687947}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\ty-up\n        }", "CodeBleu_score": 2.5488376951994884}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\ty-up\n        }", "CodeBleu_score": 2.5488376951994884}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\ty-up\n        }", "CodeBleu_score": 2.5488376951994884}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tfor (Element e : roundEnv.getElementsAnnotatedWith(annotation)) {\n        if (e.getKind() == ElementKind.FIELD) {\n            VariableElement variableElement = (VariableElement) e;\n            AnnotationMirror annotationMirror = getAnnotationMirror(e, annotation);\n\n            ConfigElement configElement = new ConfigElement();\n            configElement.setType(variableElement.asType().toString());\n\n            for (Map.Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : annotationMirror.getElementValues().entrySet()) {\n                configElement.addAttribute(entry.getKey().getSimpleName().toString(), entry.getValue().getValue().toString());\n            }\n\n            descriptorElements.add(configElement);\n        }\n    }\n}", "CodeBleu_score": 33.06004494720325}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tfor (Element e : roundEnv.getElementsAnnotatedWith(annotation)) {\n    if (e.getKind() == ElementKind.FIELD) {\n      VariableElement variableElement = (VariableElement) e;\n      String key = variableElement.getConstantValue().toString();\n      String type = variableElement.asType().toString();\n      String defaultValue = variableElement.getConstantValue().toString();\n      descriptorElements.add(new ConfigElement(key, type, defaultValue));\n    }\n  }\n}", "CodeBleu_score": 35.87904433605058}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tfor (Element e : roundEnv.getElementsAnnotatedWith(annotation)) {\n        if (e.getKind() == ElementKind.FIELD) {\n            VariableElement element = (VariableElement) e;\n            AnnotationMirror configAnnotation = getAnnotationMirror(element, annotation);\n            AnnotationValue value = getAnnotationValue(configAnnotation, \"value\");\n            AnnotationValue defaultValue = getAnnotationValue(configAnnotation, \"defaultValue\");\n            AnnotationValue label = getAnnotationValue(configAnnotation, \"label\");\n            AnnotationValue description = getAnnotationValue(configAnnotation, \"description\");\n            AnnotationValue type = getAnnotationValue(configAnnotation, \"type\");\n            AnnotationValue options = getAnnotationValue(configAnnotation, \"options\");\n            AnnotationValue multiline = getAnnotationValue(configAnnotation, \"multiline\");\n            AnnotationValue required = getAnnotationValue(configAnnotation, \"required\");\n\n            ConfigElement configElement = new ConfigElement();\n            configElement.setValue(value.getValue().toString());\n            configElement.setDefaultValue(defaultValue.getValue().toString());\n            configElement.setLabel(label.getValue().toString());\n            configElement.setDescription(description.getValue().toString());\n            configElement.setType(type.getValue().toString());\n            configElement.setMultiline(multiline.getValue().toString());\n            configElement.setRequired(required.getValue().toString());\n\n            if (options != null) {\n                List<AnnotationValue> values = (List<AnnotationValue>) options.getValue();\n                for (AnnotationValue option : values) {\n                    configElement.addOption(option.getValue().toString());\n                }\n            }\n\n            configElement.setType(element.asType().toString());\n            descriptorElements.add(configElement);\n        }\n    }\n}", "CodeBleu_score": 27.38087619499283}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tn * MIT License\n *\n * Copyright (c) 2020-present Cloudogu GmbH and Contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n", "CodeBleu_score": 15.940738924097298}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tn * MIT License\n *\n * Copyright (c) 2020-present Cloudogu GmbH and Contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n", "CodeBleu_score": 15.940738924097298}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tn * MIT License\n *\n * Copyright (c) 2020-present Cloudogu GmbH and Contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n", "CodeBleu_score": 15.940738924097298}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\tfilters = {\"employee\": employee, \"status\": \"Open\"}\n    if for_approval:\n        filters.update(\n            {\n                \"leave_approver\": approver_id,\n                \"employee\": (\"!=\", employee),\n                \"status\": (\"in\", [\"Open\", \"Approved\"]),\n            }\n        )\n    else:\n        filters.update({\"status\": (\"!=\", \"Cancelled\")})\n\n    if workflow_state_field := get_workflow_state_field(\"Leave Application\"):\n        filters[workflow_state_field] = \"Pending\"\n\n    return filters\n\n", "CodeBleu_score": 31.867293577175037}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\tfilters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n    }\n\n    if for_approval:\n        filters.update(\n            {\n                \"status\": (\"in\", [\"Open\", \"Approved\", \"Pending Approval\"]),\n                \"leave_approver\": approver_id,\n            }\n        )\n\n        if workflow_state_field := get_workflow_state_field(\"Leave Application\"):\n            filters[workflow_state_field] = \"Pending Approval\"\n    else:\n        filters.update(\n            {\n                \"status\": (\"not in\", [\"Rejected\", \"Cancelled\"]),\n            }\n        )\n\n    return filters\n\n", "CodeBleu_score": 28.282599724320434}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\tfilters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n        \"status\": [\"not in\", [\"Rejected\", \"Cancelled\"]],\n    }\n\n    if for_approval:\n        filters.update(\n            {\n                \"leave_approver\": approver_id,\n                \"status\": \"Open\",\n                \"employee\": [\"!=\", employee],\n            }\n        )\n    else:\n        filters.update({\"employee\": employee, \"status\": \"Open\"})\n\n    if workflow_state_field := get_workflow_state_field(\"Leave Application\"):\n        filters[workflow_state_field] = \"Open\"\n\n    return filters\n\n", "CodeBleu_score": 29.287248943858735}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\ttoday = getdate()\n    leave_details = get_leave_details(employee, today)\n\n    leave_balance_map = {}\n    for leave_detail in leave_details:\n        leave_balance_map[leave_detail.leave_type] = {\n            \"allocated_leaves\": leave_detail.total_leaves_allocated,\n            \"leave_balance\": leave_detail.leaves_remaining,\n        }\n\n    return leave_balance_map\n\n", "CodeBleu_score": 40.39180383649803}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\tleave_balance_map = {}\n    today = getdate()\n    leave_details = get_leave_details(employee, today)\n\n    for leave_detail in leave_details:\n        leave_balance_map[leave_detail.leave_type] = {\n            \"allocated_leaves\": leave_detail.total_leaves_allocated,\n            \"balance_leaves\": leave_detail.remaining_leaves,\n        }\n\n    return leave_balance_map\n\n", "CodeBleu_score": 41.72929010627313}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\tleave_balance_map = {}\n    today = getdate()\n    leave_details = get_leave_details(employee, today)\n\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            \"allocated_leaves\": leave_details[leave_type][\"allocated_leaves\"],\n            \"leave_balance\": leave_details[leave_type][\"leave_balance\"],\n        }\n\n    return leave_balance_map\n\n", "CodeBleu_score": 40.52437702598856}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\tFIELD_TYPES = [\n\t\\\"Link\\\",\n\t\\\"Select\\\",\n\t\\\"Small Text\\\",\n\t\\\"Text\\\",\n\t\\\"Long Text\\\",\n\t\\\"Text Editor\\\",\n\t\\\"Table\\\",\n\t\\\"Check\\\",\n\t\\\"Data\\\",\n\t\\\"Float\\\",\n\t\\\"Int\\\",\n\t\\\"Section Break\\\",\n\t\\\"Date\\\",\n\t\\\"Time\\\",\n\t\\\"Datetime\\\",\n\t\\\"Currency\\\",", "CodeBleu_score": 3.195562384349841}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\tFIELD_TYPES = [\n\t\\\"Link\\\",\n\t\\\"Select\\\",\n\t\\\"Small Text\\\",\n\t\\\"Text\\\",\n\t\\\"Long Text\\\",\n\t\\\"Text Editor\\\",\n\t\\\"Table\\\",\n\t\\\"Check\\\",\n\t\\\"Data\\\",\n\t\\\"Float\\\",\n\t\\\"Int\\\",\n\t\\\"Section Break\\\",\n\t\\\"Date\\\",\n\t\\\"Time\\\",\n\t\\\"Datetime\\\",\n\t\\\"Currency\\\",", "CodeBleu_score": 3.195562384349841}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\tFIELD_TYPES = [\n\t\\\"Link\\\",\n\t\\\"Select\\\",\n\t\\\"Small Text\\\",\n\t\\\"Text\\\",\n\t\\\"Long Text\\\",\n\t\\\"Text Editor\\\",\n\t\\\"Table\\\",\n\t\\\"Check\\\",\n\t\\\"Data\\\",\n\t\\\"Float\\\",\n\t\\\"Int\\\",\n\t\\\"Section Break\\\",\n\t\\\"Date\\\",\n\t\\\"Time\\\",\n\t\\\"Datetime\\\",\n\t\\\"Currency\\\",", "CodeBleu_score": 3.195562384349841}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t# Retrieve the settings from HR Settings.\n    hr_settings = frappe.get_single(\"HR Settings\")\n    if hr_settings.enable_holiday_reminder:\n        if hr_settings.holiday_reminder_frequency == \"Weekly\":\n            send_reminders(hr_settings.holiday_reminder_advance_days)\n\n", "CodeBleu_score": 18.825966832537457}, {"code": "def send_reminders_in_advance_weekly()\n\tif frappe.db.get_single_value(\"HR Settings\", \"send_holiday_reminder_in_advance\"):\n        frequency = frappe.db.get_single_value(\"HR Settings\", \"holiday_reminder_frequency\")\n        if frequency == \"Weekly\":\n            send_reminders_in_advance(frequency)\n\n", "CodeBleu_score": 43.90724397881274}, {"code": "def send_reminders_in_advance_weekly()\n\tif frappe.db.get_single_value(\"HR Settings\", \"enable_holiday_reminder\"):\n        frequency = frappe.db.get_single_value(\"HR Settings\", \"holiday_reminder_frequency\")\n        if frequency == \"Weekly\":\n            send_reminders_in_advance()\n\n", "CodeBleu_score": 42.39710639492951}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\nfrom hrms.mixins.appraisal import AppraisalMixin", "CodeBleu_score": 0.8294104975878784}, {"code": "def calculate_self_appraisal_score(self)\n\t\nfrom hrms.mixins.appraisal import AppraisalMixin", "CodeBleu_score": 0.8294104975878784}, {"code": "def calculate_self_appraisal_score(self)\n\t\nfrom hrms.mixins.appraisal import AppraisalMixin", "CodeBleu_score": 0.8294104975878784}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t= (\n\t\t\tfrappe.qb.from_(Appraisal)\n\t\t\t.select(Appraisal.name)\n\t\t\t.where(\n\t\t\t\t(Appraisal.employee == self.employee)\n\t\t\t\t& (Appraisal.docstatus != 2)\n\t\t\t\t& (Appraisal.name != self.name)\n\t\t\t\t& (\n\t\t\t\t\t(Appraisal.appraisal_cycle == self.appraisal_cycle)\n\t\t\t\t\t| (\n\t\t\t\t\t\t(Appraisal.start_date.between(self.start_date, self.end_date))\n\t\t\t\t\t\t| (Appraisal.end_date.between(self.start_date, self.end_date))\n\t\t\t\t\t\t| (\n\t\t\t\t\t\t\t(self.start_date >= Appraisal.start_date)\n\t\t\t\t\t\t\t& (self.start_date <= Appraisal.end_date)\n\t\t\t\t\t\t)\n\t\t\t\t\t\t| ((self.end_date >= Appraisal.start_date) & (self.end_date <= Appraisal.end_date))\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t).run()\n\t\tduplicate = duplicate[0][0] if duplicate else 0\n\n\t\tif duplicate:\n\t\t\tfrappe.throw(\n\t\t\t\t_(\n\t\t\t\t\t\\\"Appraisal {0} already exists for Employee {1} for this Appraisal Cycle or overlapping period\\\"\n\t\t\t\t).format(get_link_to_form(\\\"Appraisal\\\", duplicate), frappe.bold(self.employee_name)),\n\t\t\t\texc=frappe.DuplicateEntryError,\n\t\t\t\ttitle=_(\\\"Duplicate Entry\\\"),\n\t\t\t)\n\n\tdef set_kra_evaluation_method(self):\n\t\tif (\n\t\t\tself.is_new()\n\t\t\tand self.appraisal_cycle\n\t\t\tand (\n\t\t\t\tfrappe.db.get_value(\\\"Appraisal Cycle\\\", self.appraisal_cycle, \\\"kra_evaluation_method\\\")\n\t\t\t\t== \\\"Manual Rating\\\"\n\t\t\t)\n\t\t):\n\t\t\tself.rate_goals_manually = 1\n\n\t@frappe.whitelist()\n\tdef set_appraisal_template(self):\n\t\t\\\"\\\"\\\"Sets appraisal template from Appraisee table in Cycle\\\"\\\"\\\"\n\t\tif not self.appraisal_cycle:\n\t\t\treturn\n\n\t\tappraisal_template = frappe.db.get_value(\n\t\t\t\\\"Appraisee\\\",\n\t\t\t{\n\t\t\t\t\\\"employee\\\": self.employee,\n\t\t\t\t\\\"parent\\\": self.appraisal_cycle,\n\t\t\t},\n\t\t\t\\\"appraisal_template\\\",\n\t\t)\n\n\t\tif appraisal_template:\n\t\t\tself.appraisal_template = appraisal_template\n\t\t\tself.set_kras_and_rating_criteria()\n\n\t@frappe.whitelist()\n\tdef set_kras_and_rating_criteria(self):\n\t\tif not self.appraisal_template:\n\t\t\treturn\n\n\t\tself.set(\\\"appraisal_kra\\\", [])\n\t\tself.set(\\\"self_ratings\\\", [])\n\t\tself.set(\\\"goals\\\", [])\n\n\t\ttemplate = frappe.get_doc(\\\"Appraisal Template\\\", self.appraisal_template)\n\n\t\tfor entry in template.goals:\n\t\t\ttable_name = \\\"goals\\\" if self.rate_goals_manually else \\\"appraisal_kra\\\"\n\n\t\t\tself.append(\n\t\t\t\ttable_name,\n\t\t\t\t{\n\t\t\t\t\t\\\"kra\\\": entry.key_result_area,\n\t\t\t\t\t\\\"per_weightage\\\": entry.per_weightage,\n\t\t\t\t},\n\t\t\t)\n\n\t\tfor entry in template.rating_criteria:\n\t\t\tself.append(\n\t\t\t\t\\\"self_ratings\\\",\n\t\t\t\t{\n\t\t\t\t\t\\\"criteria\\\": entry.criteria,\n\t\t\t\t\t\\\"per_weightage\\\": entry.per_weightage,\n\t\t\t\t},\n\t\t\t)\n\n\t\treturn self\n\n\tdef calculate_total_score(self):\n\t\ttotal_weightage, total, goal_score_percentage = 0, 0, 0\n\n\t\tif self.rate_goals_manually:\n\t\t\ttable = _(\\\"Goals\\\")\n\t\t\tfor entry in self.goals:\n\t\t\t\tif flt(entry.score) > 5:\n\t\t\t\t\tfrappe.throw(_(\\\"Row {0}: Goal Score cannot be greater than 5\\\").format(entry.idx))\n\n\t\t\t\tentry.score_earned = flt(entry.score) * flt(entry.per_weightage) / 100\n\t\t\t\ttotal += flt(entry.score_earned)\n\t\t\t\ttotal_weightage += flt(entry.per_weightage)\n\n\t\telse:\n\t\t\ttable = _(\\\"KRAs\\\")\n\t\t\tfor entry in self.appraisal_kra:\n\t\t\t\tgoal_score_percentage += flt(entry.goal_score)\n\t\t\t\ttotal_weightage += flt(entry.per_weightage)\n\n\t\t\tself.goal_score_percentage = flt(goal_score_percentage, self.precision(\\\"goal_score_percentage\\\"))\n\t\t\t# convert goal score percentage to total score out of 5\n\t\t\ttotal = flt(goal_score_percentage) / 20\n\n\t\tif total_weightage and flt(total_weightage, 2) != 100.0:\n\t\t\tfrappe.throw(\n\t\t\t\t_(\\\"Total weightage for all {0} must add up to 100. Currently, it is {1}%\\\").format(\n\t\t\t\t\ttable, total_weightage\n\t\t\t\t),\n\t\t\t\ttitle=_(\\\"Incorrect Weightage Allocation\\\"),\n\t\t\t)\n\n\t\tself.total_score = flt(total, self.precision(\\\"total_score\\\"))\n\n\tdef calculate_self_appraisal_score(self):\n\t\ttotal = 0\n\t\tfor entry in self.self_ratings:\n\t\t\tscore = flt(entry.rating) * 5 * flt(entry.per_weightage / 100)\n\t\t\ttotal += flt(score)\n\n\t\tself.self_score = flt(total, self.precision(\\\"self_score\\\"))\n\n\tdef calculate_avg_feedback_score(self, update=False):\n\t\tavg_feedback_score = frappe.qb.avg(\n\t\t\t\\\"Employee Performance Feedback\\\",\n\t\t\t\\\"total_score\\\",\n\t\t\t{\\\"employee\\\": self.employee, \\\"appraisal\\\": self.name, \\\"docstatus\\\": 1},\n\t\t)\n\n\t\tself.avg_feedback_score = flt(avg_feedback_score, self.precision(\\\"avg_feedback_score\\\"))\n\n\t\tif update:\n\t\t\tself.calculate_final_score()\n\t\t\tself.db_update()\n\n\n\n", "CodeBleu_score": 17.788992766359293}, {"code": "def calculate_final_score(self)\n\t= (\n\t\t\tfrappe.qb.from_(Appraisal)\n\t\t\t.select(Appraisal.name)\n\t\t\t.where(\n\t\t\t\t(Appraisal.employee == self.employee)\n\t\t\t\t& (Appraisal.docstatus != 2)\n\t\t\t\t& (Appraisal.name != self.name)\n\t\t\t\t& (\n\t\t\t\t\t(Appraisal.appraisal_cycle == self.appraisal_cycle)\n\t\t\t\t\t| (\n\t\t\t\t\t\t(Appraisal.start_date.between(self.start_date, self.end_date))\n\t\t\t\t\t\t| (Appraisal.end_date.between(self.start_date, self.end_date))\n\t\t\t\t\t\t| (\n\t\t\t\t\t\t\t(self.start_date >= Appraisal.start_date)\n\t\t\t\t\t\t\t& (self.start_date <= Appraisal.end_date)\n\t\t\t\t\t\t)\n\t\t\t\t\t\t| ((self.end_date >= Appraisal.start_date) & (self.end_date <= Appraisal.end_date))\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t).run()\n\t\tduplicate = duplicate[0][0] if duplicate else 0\n\n\t\tif duplicate:\n\t\t\tfrappe.throw(\n\t\t\t\t_(\n\t\t\t\t\t\\\"Appraisal {0} already exists for Employee {1} for this Appraisal Cycle or overlapping period\\\"\n\t\t\t\t).format(get_link_to_form(\\\"Appraisal\\\", duplicate), frappe.bold(self.employee_name)),\n\t\t\t\texc=frappe.DuplicateEntryError,\n\t\t\t\ttitle=_(\\\"Duplicate Entry\\\"),\n\t\t\t)\n\n\tdef set_kra_evaluation_method(self):\n\t\tif (\n\t\t\tself.is_new()\n\t\t\tand self.appraisal_cycle\n\t\t\tand (\n\t\t\t\tfrappe.db.get_value(\\\"Appraisal Cycle\\\", self.appraisal_cycle, \\\"kra_evaluation_method\\\")\n\t\t\t\t== \\\"Manual Rating\\\"\n\t\t\t)\n\t\t):\n\t\t\tself.rate_goals_manually = 1\n\n\t@frappe.whitelist()\n\tdef set_appraisal_template(self):\n\t\t\\\"\\\"\\\"Sets appraisal template from Appraisee table in Cycle\\\"\\\"\\\"\n\t\tif not self.appraisal_cycle:\n\t\t\treturn\n\n\t\tappraisal_template = frappe.db.get_value(\n\t\t\t\\\"Appraisee\\\",\n\t\t\t{\n\t\t\t\t\\\"employee\\\": self.employee,\n\t\t\t\t\\\"parent\\\": self.appraisal_cycle,\n\t\t\t},\n\t\t\t\\\"appraisal_template\\\",\n\t\t)\n\n\t\tif appraisal_template:\n\t\t\tself.appraisal_template = appraisal_template\n\t\t\tself.set_kras_and_rating_criteria()\n\n\t@frappe.whitelist()\n\tdef set_kras_and_rating_criteria(self):\n\t\tif not self.appraisal_template:\n\t\t\treturn\n\n\t\tself.set(\\\"appraisal_kra\\\", [])\n\t\tself.set(\\\"self_ratings\\\", [])\n\t\tself.set(\\\"goals\\\", [])\n\n\t\ttemplate = frappe.get_doc(\\\"Appraisal Template\\\", self.appraisal_template)\n\n\t\tfor entry in template.goals:\n\t\t\ttable_name = \\\"goals\\\" if self.rate_goals_manually else \\\"appraisal_kra\\\"\n\n\t\t\tself.append(\n\t\t\t\ttable_name,\n\t\t\t\t{\n\t\t\t\t\t\\\"kra\\\": entry.key_result_area,\n\t\t\t\t\t\\\"per_weightage\\\": entry.per_weightage,\n\t\t\t\t},\n\t\t\t)\n\n\t\tfor entry in template.rating_criteria:\n\t\t\tself.append(\n\t\t\t\t\\\"self_ratings\\\",\n\t\t\t\t{\n\t\t\t\t\t\\\"criteria\\\": entry.criteria,\n\t\t\t\t\t\\\"per_weightage\\\": entry.per_weightage,\n\t\t\t\t},\n\t\t\t)\n\n\t\treturn self\n\n\tdef calculate_total_score(self):\n\t\ttotal_weightage, total, goal_score_percentage = 0, 0, 0\n\n\t\tif self.rate_goals_manually:\n\t\t\ttable = _(\\\"Goals\\\")\n\t\t\tfor entry in self.goals:\n\t\t\t\tif flt(entry.score) > 5:\n\t\t\t\t\tfrappe.throw(_(\\\"Row {0}: Goal Score cannot be greater than 5\\\").format(entry.idx))\n\n\t\t\t\tentry.score_earned = flt(entry.score) * flt(entry.per_weightage) / 100\n\t\t\t\ttotal += flt(entry.score_earned)\n\t\t\t\ttotal_weightage += flt(entry.per_weightage)\n\n\t\telse:\n\t\t\ttable = _(\\\"KRAs\\\")\n\t\t\tfor entry in self.appraisal_kra:\n\t\t\t\tgoal_score_percentage += flt(entry.goal_score)\n\t\t\t\ttotal_weightage += flt(entry.per_weightage)\n\n\t\t\tself.goal_score_percentage = flt(goal_score_percentage, self.precision(\\\"goal_score_percentage\\\"))\n\t\t\t# convert goal score percentage to total score out of 5\n\t\t\ttotal = flt(goal_score_percentage) / 20\n\n\t\tif total_weightage and flt(total_weightage, 2) != 100.0:\n\t\t\tfrappe.throw(\n\t\t\t\t_(\\\"Total weightage for all {0} must add up to 100. Currently, it is {1}%\\\").format(\n\t\t\t\t\ttable, total_weightage\n\t\t\t\t),\n\t\t\t\ttitle=_(\\\"Incorrect Weightage Allocation\\\"),\n\t\t\t)\n\n\t\tself.total_score = flt(total, self.precision(\\\"total_score\\\"))\n\n\tdef calculate_self_appraisal_score(self):\n\t\ttotal = 0\n\t\tfor entry in self.self_ratings:\n\t\t\tscore = flt(entry.rating) * 5 * flt(entry.per_weightage / 100)\n\t\t\ttotal += flt(score)\n\n\t\tself.self_score = flt(total, self.precision(\\\"self_score\\\"))\n\n\tdef calculate_avg_feedback_score(self, update=False):\n\t\tavg_feedback_score = frappe.qb.avg(\n\t\t\t\\\"Employee Performance Feedback\\\",\n\t\t\t\\\"total_score\\\",\n\t\t\t{\\\"employee\\\": self.employee, \\\"appraisal\\\": self.name, \\\"docstatus\\\": 1},\n\t\t)\n\n\t\tself.avg_feedback_score = flt(avg_feedback_score, self.precision(\\\"avg_feedback_score\\\"))\n\n\t\tif update:\n\t\t\tself.calculate_final_score()\n\t\t\tself.db_update()\n\n\n\n", "CodeBleu_score": 17.788992766359293}, {"code": "def calculate_final_score(self)\n\t= (\n\t\t\tfrappe.qb.from_(Appraisal)\n\t\t\t.select(Appraisal.name)\n\t\t\t.where(\n\t\t\t\t(Appraisal.employee == self.employee)\n\t\t\t\t& (Appraisal.docstatus != 2)\n\t\t\t\t& (Appraisal.name != self.name)\n\t\t\t\t& (\n\t\t\t\t\t(Appraisal.appraisal_cycle == self.appraisal_cycle)\n\t\t\t\t\t| (\n\t\t\t\t\t\t(Appraisal.start_date.between(self.start_date, self.end_date))\n\t\t\t\t\t\t| (Appraisal.end_date.between(self.start_date, self.end_date))\n\t\t\t\t\t\t| (\n\t\t\t\t\t\t\t(self.start_date >= Appraisal.start_date)\n\t\t\t\t\t\t\t& (self.start_date <= Appraisal.end_date)\n\t\t\t\t\t\t)\n\t\t\t\t\t\t| ((self.end_date >= Appraisal.start_date) & (self.end_date <= Appraisal.end_date))\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t).run()\n\t\tduplicate = duplicate[0][0] if duplicate else 0\n\n\t\tif duplicate:\n\t\t\tfrappe.throw(\n\t\t\t\t_(\n\t\t\t\t\t\\\"Appraisal {0} already exists for Employee {1} for this Appraisal Cycle or overlapping period\\\"\n\t\t\t\t).format(get_link_to_form(\\\"Appraisal\\\", duplicate), frappe.bold(self.employee_name)),\n\t\t\t\texc=frappe.DuplicateEntryError,\n\t\t\t\ttitle=_(\\\"Duplicate Entry\\\"),\n\t\t\t)\n\n\tdef set_kra_evaluation_method(self):\n\t\tif (\n\t\t\tself.is_new()\n\t\t\tand self.appraisal_cycle\n\t\t\tand (\n\t\t\t\tfrappe.db.get_value(\\\"Appraisal Cycle\\\", self.appraisal_cycle, \\\"kra_evaluation_method\\\")\n\t\t\t\t== \\\"Manual Rating\\\"\n\t\t\t)\n\t\t):\n\t\t\tself.rate_goals_manually = 1\n\n\t@frappe.whitelist()\n\tdef set_appraisal_template(self):\n\t\t\\\"\\\"\\\"Sets appraisal template from Appraisee table in Cycle\\\"\\\"\\\"\n\t\tif not self.appraisal_cycle:\n\t\t\treturn\n\n\t\tappraisal_template = frappe.db.get_value(\n\t\t\t\\\"Appraisee\\\",\n\t\t\t{\n\t\t\t\t\\\"employee\\\": self.employee,\n\t\t\t\t\\\"parent\\\": self.appraisal_cycle,\n\t\t\t},\n\t\t\t\\\"appraisal_template\\\",\n\t\t)\n\n\t\tif appraisal_template:\n\t\t\tself.appraisal_template = appraisal_template\n\t\t\tself.set_kras_and_rating_criteria()\n\n\t@frappe.whitelist()\n\tdef set_kras_and_rating_criteria(self):\n\t\tif not self.appraisal_template:\n\t\t\treturn\n\n\t\tself.set(\\\"appraisal_kra\\\", [])\n\t\tself.set(\\\"self_ratings\\\", [])\n\t\tself.set(\\\"goals\\\", [])\n\n\t\ttemplate = frappe.get_doc(\\\"Appraisal Template\\\", self.appraisal_template)\n\n\t\tfor entry in template.goals:\n\t\t\ttable_name = \\\"goals\\\" if self.rate_goals_manually else \\\"appraisal_kra\\\"\n\n\t\t\tself.append(\n\t\t\t\ttable_name,\n\t\t\t\t{\n\t\t\t\t\t\\\"kra\\\": entry.key_result_area,\n\t\t\t\t\t\\\"per_weightage\\\": entry.per_weightage,\n\t\t\t\t},\n\t\t\t)\n\n\t\tfor entry in template.rating_criteria:\n\t\t\tself.append(\n\t\t\t\t\\\"self_ratings\\\",\n\t\t\t\t{\n\t\t\t\t\t\\\"criteria\\\": entry.criteria,\n\t\t\t\t\t\\\"per_weightage\\\": entry.per_weightage,\n\t\t\t\t},\n\t\t\t)\n\n\t\treturn self\n\n\tdef calculate_total_score(self):\n\t\ttotal_weightage, total, goal_score_percentage = 0, 0, 0\n\n\t\tif self.rate_goals_manually:\n\t\t\ttable = _(\\\"Goals\\\")\n\t\t\tfor entry in self.goals:\n\t\t\t\tif flt(entry.score) > 5:\n\t\t\t\t\tfrappe.throw(_(\\\"Row {0}: Goal Score cannot be greater than 5\\\").format(entry.idx))\n\n\t\t\t\tentry.score_earned = flt(entry.score) * flt(entry.per_weightage) / 100\n\t\t\t\ttotal += flt(entry.score_earned)\n\t\t\t\ttotal_weightage += flt(entry.per_weightage)\n\n\t\telse:\n\t\t\ttable = _(\\\"KRAs\\\")\n\t\t\tfor entry in self.appraisal_kra:\n\t\t\t\tgoal_score_percentage += flt(entry.goal_score)\n\t\t\t\ttotal_weightage += flt(entry.per_weightage)\n\n\t\t\tself.goal_score_percentage = flt(goal_score_percentage, self.precision(\\\"goal_score_percentage\\\"))\n\t\t\t# convert goal score percentage to total score out of 5\n\t\t\ttotal = flt(goal_score_percentage) / 20\n\n\t\tif total_weightage and flt(total_weightage, 2) != 100.0:\n\t\t\tfrappe.throw(\n\t\t\t\t_(\\\"Total weightage for all {0} must add up to 100. Currently, it is {1}%\\\").format(\n\t\t\t\t\ttable, total_weightage\n\t\t\t\t),\n\t\t\t\ttitle=_(\\\"Incorrect Weightage Allocation\\\"),\n\t\t\t)\n\n\t\tself.total_score = flt(total, self.precision(\\\"total_score\\\"))\n\n\tdef calculate_self_appraisal_score(self):\n\t\ttotal = 0\n\t\tfor entry in self.self_ratings:\n\t\t\tscore = flt(entry.rating) * 5 * flt(entry.per_weightage / 100)\n\t\t\ttotal += flt(score)\n\n\t\tself.self_score = flt(total, self.precision(\\\"self_score\\\"))\n\n\tdef calculate_avg_feedback_score(self, update=False):\n\t\tavg_feedback_score = frappe.qb.avg(\n\t\t\t\\\"Employee Performance Feedback\\\",\n\t\t\t\\\"total_score\\\",\n\t\t\t{\\\"employee\\\": self.employee, \\\"appraisal\\\": self.name, \\\"docstatus\\\": 1},\n\t\t)\n\n\t\tself.avg_feedback_score = flt(avg_feedback_score, self.precision(\\\"avg_feedback_score\\\"))\n\n\t\tif update:\n\t\t\tself.calculate_final_score()\n\t\t\tself.db_update()\n\n\n\n", "CodeBleu_score": 17.788992766359293}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\tif getdate(self.attendance_date) > getdate(nowdate()):\n        if self.status != \"On Leave\" or frappe.db.exists(\"Leave Application\", {\"employee\": self.employee, \"from_date\": self.attendance_date, \"to_date\": self.attendance_date, \"docstatus\": 1}):\n            frappe.throw(_(\"Attendance can not be marked for future dates.\"))\n\n    if self.employee_type == \"WC\":\n        return\n\n    date_of_joining = frappe.db.get_value(\"Employee\", self.employee, \"date_of_joining\")\n    if getdate(self.attendance_date) < getdate(date_of_joining):\n        frappe.throw(_(\"Attendance can not be marked for dates before employee's date of joining.\"))\n\n", "CodeBleu_score": 50.26720071247037}, {"code": "def validate_attendance_date(self)\n\tif getdate(self.attendance_date) > getdate(nowdate()):\n        if self.status == \"On Leave\":\n            if not frappe.db.exists(\"Leave Application\", {\"employee\": self.employee, \"from_date\": self.attendance_date, \"to_date\": self.attendance_date, \"docstatus\": 1}):\n                frappe.throw(_(\"Attendance for future dates can only be marked for employees on leave\"))\n        else:\n            frappe.throw(_(\"Attendance for future dates cannot be marked\"))\n    if getdate(self.attendance_date) < getdate(self.employee_doj):\n        frappe.throw(_(\"Attendance date cannot be before employee's joining date\"))\n\n", "CodeBleu_score": 33.15440926032364}, {"code": "def validate_attendance_date(self)\n\tif getdate(self.attendance_date) > getdate(nowdate()):\n        if self.status != \"On Leave\" or frappe.db.get_value(\"Leave Application\", {\"employee\": self.employee, \"from_date\": self.attendance_date, \"to_date\": self.attendance_date, \"docstatus\": 1}):\n            frappe.throw(_(\"Attendance can not be marked for future dates\"))\n\n    if self.attendance_date < getdate(self.employee_doj):\n        frappe.throw(_(\"Attendance can not be marked before employee's joining date\"))\n\n", "CodeBleu_score": 32.99901413623184}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\tattendance_record = frappe.db.exists(\n        \"Attendance\",\n        {\n            \"employee\": self.employee,\n            \"attendance_date\": self.attendance_date,\n        },\n    )\n    if attendance_record and attendance_record != self.name:\n        frappe.throw(\n            _(\n                \"Attendance for employee {0} on date {1} already exists. See {2}.\"\n            ).format(\n                frappe.bold(self.employee),\n                frappe.bold(format_date(self.attendance_date)),\n                frappe.utils.get_link_to_form(\"Attendance\", attendance_record),\n            ),\n            DuplicateAttendanceError,\n        )\n\n", "CodeBleu_score": 38.542100663656264}, {"code": "def validate_duplicate_record(self)\n\tif frappe.db.exists(\n        \"Attendance\",\n        {\n            \"employee\": self.employee,\n            \"attendance_date\": self.attendance_date,\n            \"docstatus\": 1,\n        },\n    ):\n        frappe.throw(\n            _(\n                \"Attendance for employee {0} on date {1} already exists. Please update that record instead.\"\n            ).format(\n                frappe.bold(self.employee),\n                frappe.bold(format_date(self.attendance_date)),\n            ),\n            DuplicateAttendanceError,\n        )\n\n", "CodeBleu_score": 35.158582491205905}, {"code": "def validate_duplicate_record(self)\n\tattendance = frappe.db.sql(\n        \"\"\"\n            SELECT\n                name,\n                attendance_date\n            FROM\n                `tabAttendance`\n            WHERE\n                employee = %(employee)s\n                AND attendance_date = %(attendance_date)s\n                AND docstatus < 2\n                AND status = %(status)s\n                AND name != %(name)s\n        \"\"\",\n        {\n            \"employee\": self.employee,\n            \"attendance_date\": self.attendance_date,\n            \"status\": self.status,\n            \"name\": self.name,\n        },\n    )\n\n    if attendance:\n        attendance_link = get_link_to_form(\"Attendance\", attendance[0][0])\n        frappe.throw(\n            _(\n                \"Attendance for employee {0} on date {1} already exists. See {2}.\"\n            ).format(\n                frappe.bold(self.employee),\n                frappe.bold(format_date(self.attendance_date)),\n                attendance_link,\n            ),\n            DuplicateAttendanceError,\n        )\n\n", "CodeBleu_score": 36.69491171370849}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\tdws_group = frappe.get_doc(\"Daily Work Summary Group\", self.daily_work_summary_group)\n    emails = [user.email for user in dws_group.users]\n    incoming_email_account = frappe.db.get_value(\n        \"Email Account\", dict(enable_incoming=1, default_incoming=1), \"email_id\"\n    )\n\n    self.db_set(\"email_sent_to\", \"", "CodeBleu_score": 24.98336793443699}, {"code": "def send_summary(self)\n\tif self.message_type == \"Daily Work Summary\":\n        message = self.message\n        subject = self.subject\n        emails = [user.email for user in self.get_users()]\n        if emails:\n            self.send_mails(self, emails, subject, message)\n            self.db_set(\"status\", \"Sent\")\n\n", "CodeBleu_score": 34.58953748233017}, {"code": "def send_summary(self)\n\t# get the email addresses of the users in the group\n    emails = [user.email for user in self.users]\n    # get the message details\n    message = self.message\n    subject = self.subject\n    # send the email\n    frappe.sendmail(\n        recipients=emails,\n        message=message,\n        subject=subject,\n        reference_doctype=self.doctype,\n        reference_name=self.name,\n    )\n    # update the status to \"Sent\"\n    self.db_set(\"status\", \"Sent\")\n\n", "CodeBleu_score": 36.07258519212563}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\tif self.job_applicant and self.interview_round:\n        filters = {\n            \"job_applicant\": self.job_applicant,\n            \"interview_round\": self.interview_round,\n            \"status\": [\"!=\", \"Cancelled\"],\n            \"name\": [\"!=\", self.name],\n        }\n        if frappe.db.exists(\"Interview\", filters):\n            job_applicant = frappe.get_doc(\"Job Applicant\", self.job_applicant)\n            raise DuplicateInterviewRoundError(\n                _(\n                    \"Job Applicant {0} has already appeared for Interview Round {1}.\"\n                ).format(\n                    frappe.bold(get_link_to_form(\"Job Applicant\", self.job_applicant)),\n                    frappe.bold(get_link_to_form(\"Interview Round\", self.interview_round)),\n                ),\n                title=_(\"Duplicate Interview\"),\n            )\n\n", "CodeBleu_score": 43.453351888555694}, {"code": "def validate_duplicate_interview(self)\n\tif not self.job_applicant:\n        return\n\n    if not self.interview_round:\n        return\n\n    filters = {\n        \"job_applicant\": self.job_applicant,\n        \"interview_round\": self.interview_round,\n        \"name\": (\"!=\", self.name),\n    }\n\n    if frappe.db.exists(\"Interview\", filters):\n        job_applicant = frappe.get_doc(\"Job Applicant\", self.job_applicant)\n        raise DuplicateInterviewRoundError(\n            _(\"Job Applicant {0} has already appeared for Interview Round {1}\").format(\n                get_link_to_form(\"Job Applicant\", self.job_applicant),\n                get_link_to_form(\"Interview Round\", self.interview_round),\n            )\n        )\n\n", "CodeBleu_score": 44.94787162718117}, {"code": "def validate_duplicate_interview(self)\n\tif self.job_applicant and self.interview_round:\n        duplicate_interview = frappe.db.exists(\n            \"Interview\",\n            {\n                \"job_applicant\": self.job_applicant,\n                \"interview_round\": self.interview_round,\n                \"docstatus\": 1,\n            },\n        )\n        if duplicate_interview:\n            job_applicant = frappe.get_doc(\"Job Applicant\", self.job_applicant)\n            raise DuplicateInterviewRoundError(\n                _(\n                    \"Job Applicant {0} has already appeared for Interview Round {1} in Interview {2}.\n", "CodeBleu_score": 51.134108192893834}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\tif not self.skill_assessments:\n        self.average_rating = 0\n        return\n\n    total = sum([assessment.rating for assessment in self.skill_assessments if assessment.rating])\n    self.average_rating = total / len(self.skill_assessments)\n\n", "CodeBleu_score": 34.281370532222766}, {"code": "def calculate_average_rating(self)\n\tself.average_rating = 0\n    if self.skill_assessment:\n        total = sum([assessment.rating for assessment in self.skill_assessment if assessment.rating])\n        self.average_rating = total / len(self.skill_assessment)\n\n", "CodeBleu_score": 33.69552788228528}, {"code": "def calculate_average_rating(self)\n\ttotal = sum(assessment.rating for assessment in self.skill_assessments if assessment.rating)\n    self.average_rating = total / len(self.skill_assessments) if self.skill_assessments else 0\n\n", "CodeBleu_score": 20.434855221407147}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\tdoc = json.loads(doc) if isinstance(doc, str) else doc\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.get(\"interview_round\")\n    interview.designation = doc.get(\"designation\")\n    if doc.get(\"interviewers\"):\n        for interviewer in doc.get(\"interviewers\"):\n            interview.append(\"interview_details\", interviewer)\n    interview.save(ignore_permissions=True)\n    return interview\n\n", "CodeBleu_score": 46.65160400393731}, {"code": "def create_interview(doc):\n\tinterview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.interviewers:\n        for interviewer in doc.interviewers:\n            interview.append(\"interview_details\", {\n                \"interviewer\": interviewer.interviewer,\n                \"interviewer_name\": interviewer.interviewer_name,\n                \"status\": interviewer.status,\n                \"interview_date\": interviewer.interview_date,\n                \"interview_time\": interviewer.interview_time,\n                \"location\": interviewer.location,\n                \"interview_type\": interviewer.interview_type,\n                \"feedback\": interviewer.feedback,\n                \"comments\": interviewer.comments\n            })\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 35.96999453001723}, {"code": "def create_interview(doc):\n\tdoc = json.loads(doc)\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.get(\"interview_round\")\n    interview.designation = doc.get(\"designation\")\n    interviewers = doc.get(\"interviewers\")\n    if interviewers:\n        for interviewer in interviewers:\n            interview.append(\"interview_details\", {\n                \"interviewer\": interviewer\n            })\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 45.32725813970021}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\treturn frappe.db.sql(\"\"\"\n        SELECT\n            name\n        FROM\n            `tabJob Offer`\n        WHERE\n            designation = %(designation)s\n        AND\n            company = %(company)s\n        AND\n            docstatus = 1\n        AND\n            offer_date BETWEEN %(from_date)s AND %(to_date)s\n        \"\"\", {\n            \"designation\": self.designation,\n            \"company\": self.company,\n            \"from_date\": from_date,\n            \"to_date\": to_date\n        }, as_dict=True)\n\n", "CodeBleu_score": 46.93067353835148}, {"code": "def get_job_offer(self, from_date, to_date)\n\tjob_offers = frappe.db.sql(\"\"\"\n        SELECT\n            name\n        FROM\n            `tabJob Offer`\n        WHERE\n            designation = %s AND\n            company = %s AND\n            docstatus = 1 AND\n            offer_date BETWEEN %s AND %s\n    \"\"\", (self.designation, self.company, from_date, to_date), as_dict=1)\n\n    return [d.name for d in job_offers]\n\n", "CodeBleu_score": 34.90133138157282}, {"code": "def get_job_offer(self, from_date, to_date)\n\tjob_offer_list = frappe.db.sql(\"\"\"\n        SELECT name\n        FROM `tabJob Offer`\n        WHERE designation = %s\n        AND company = %s\n        AND docstatus = 1\n        AND offer_date BETWEEN %s AND %s\n    \"\"\", (self.designation, self.company, from_date, to_date), as_dict=1)\n    return job_offer_list\n\n", "CodeBleu_score": 33.0141317541066}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\tjob_offers = frappe.get_all(\n        \"Job Offer\",\n        filters={\n            \"docstatus\": 1,\n            \"company\": company or \"\",\n            \"department\": department or \"\",\n        },\n        fields=[\"name\", \"status\"],\n    )\n    total_job_offers = len(job_offers)\n    accepted_job_offers = len(\n        [job_offer for job_offer in job_offers if job_offer.status == \"Accepted\"]\n    )\n    if total_job_offers == 0:\n        return 0, \"Percent\"\n    else:\n        return (accepted_job_offers / total_job_offers) * 100, \"Percent\"", "CodeBleu_score": 26.94108992150995}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\tfilters = {\"docstatus\": 1}\n\n    if company:\n        filters[\"company\"] = company\n\n    if department:\n        filters[\"department\"] = department\n\n    total_job_offers = frappe.db.count(\"Job Offer\", filters=filters)\n    accepted_job_offers = frappe.db.count(\n        \"Job Offer\", filters={\"docstatus\": 1, \"status\": \"Accepted\"}\n    )\n\n    if total_job_offers > 0:\n        acceptance_rate = (accepted_job_offers / total_job_offers) * 100\n        return {\"acceptance_rate\": acceptance_rate, \"type\": \"Percent\"}\n    else:\n        return {\"acceptance_rate\": None, \"type\": \"Percent\"}\n\n", "CodeBleu_score": 51.487439775714385}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\tfilters = {\"docstatus\": 1}\n    if company:\n        filters[\"company\"] = company\n    if department:\n        filters[\"department\"] = department\n\n    total_job_offers = frappe.db.count(\"Job Offer\", filters)\n    accepted_job_offers = frappe.db.count(\n        \"Job Offer\", {\"status\": \"Accepted\", **filters}\n    )\n\n    if total_job_offers == 0:\n        return 0\n\n    return {\"percent\": accepted_job_offers / total_job_offers * 100, \"type\": \"Percent\"}\n\n", "CodeBleu_score": 49.42280787572894}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess()) {\n\t\treturn ResponseEntity.badRequest().body(result);\n\t}\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 67.35964625303241}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess()) {\n\t\treturn ResponseEntity.badRequest().body(result);\n\t}\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 67.35964625303241}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess()) {\n\t\treturn ResponseEntity.badRequest().body(result);\n\t}\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 67.35964625303241}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal Optional<CompanyStaff> optionalCompanyStaff = this.companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\tif (!optionalCompanyStaff.isPresent()) {\n\t\treturn new ErrorResult(Messages.noRecord);\n\t}\n\n\tfinal Result result = BusinessRules.run(arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword()));\n\tif (result != null) {\n\t\treturn result;\n\t}\n\n\tfinal CompanyStaff companyStaff = optionalCompanyStaff.get();\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\tthis.companyStaffDao.save(companyStaff);\n\treturn new SuccessResult(Messages.companyStaffUpdated);\n}", "CodeBleu_score": 52.61337245897037}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal Optional<CompanyStaff> companyStaff = companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\tif (!companyStaff.isPresent()) {\n\t\treturn new ErrorResult(Messages.noRecord);\n\t}\n\n\tfinal Result result = BusinessRules.run(arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword()));\n\tif (result != null) {\n\t\treturn result;\n\t}\n\n\tfinal CompanyStaff staff = companyStaff.get();\n\tstaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tstaff.setLastName(companyStaffForUpdateDto.getLastName());\n\tcompanyStaffDao.save(staff);\n\n\treturn new SuccessResult(Messages.updated);\n}", "CodeBleu_score": 60.74217015951111}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal Optional<CompanyStaff> optionalCompanyStaff = companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\n    if (!optionalCompanyStaff.isPresent()) {\n        return new ErrorResult(Messages.noRecord);\n    }\n\n    final Result result = BusinessRules.run(\n            arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword())\n    );\n\n    if (result.isFailure()) {\n        return result;\n    }\n\n    final CompanyStaff companyStaff = optionalCompanyStaff.get();\n    companyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n    companyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\n    companyStaffDao.save(companyStaff);\n\n    return new SuccessResult(Messages.updated);\n}", "CodeBleu_score": 54.85840013755543}]}
