{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t# The function export_zip_documents retrieves attachment IDs from HTTP request arguments, verifies read access rights and rules for the attachments, and builds a zip file from the attachments' content. It then prepares HTTP headers for the zip file and returns the zip file as an HTTP response.\n    #\n    # :param self: The AccountDocumentDownloadController object\n    # :param args: The HTTP request arguments\n    # :return: The zip file as an HTTP response\n    # :rtype: werkzeug.wrappers.Response\n    #\n    # :Example:\n    #\n    #     /account/export_zip_documents?attachment_ids=1,2,3\n    #\n    # :param attachment_ids: The attachment IDs to be exported\n    # :type attachment_ids: list\n    # :param model: The model name of the attachments' parent records\n    # :type model: str\n    # :param ids: The IDs of the attachments' parent records\n    # :type ids: list\n    # :param filename: The filename of the zip file\n    # :type filename: str\n    # :param file_field: The name of the field containing the attachments\n    # :type file_field: str\n    # :param mimetype: The mimetype of the zip file\n    # :type mimetype: str\n    #\n    # :return: The zip file as an HTTP response\n    # :rtype: werkzeug.wrappers.Response\n    #\n    # :Example:\n    #\n    #     /account/export_zip_documents?attachment_ids=1,2,3&model=account.invoice&ids=1,2,3&filename=invoices.zip&file_field=invoice_attachment&mimetype=application/zip\n    #\n    attachment_ids = request.httprequest.args.getlist('attachment_ids')\n    model = request.httprequest.args.get('model')\n    ids = request.httprequest.args.getlist('ids')\n    filename = request.httprequest.args.get('filename')\n    file_field = request.httprequest.args.get('file_field')\n    mimetype =", "CodeBleu_score": 30.107868920723824}, {"code": "def export_zip_documents(self, **args)\n\t# Get the attachments' IDs from HTTP request arguments\n    attachment_ids = request.args.get('ids')\n    # Verify read access rights and rules for the attachments\n    attachments = request.env['ir.attachment'].browse(attachment_ids.split(',')).sudo()\n    attachments.check_access_rights('read')\n    # Build a zip file from the attachments' content\n    zip_content = b''\n    for attachment in attachments:\n        zip_content += attachment.datas\n    # Prepare HTTP headers for the zip file\n    filename = 'attachments.zip'\n    headers = _get_zip_headers(zip_content, filename)\n    # Return the zip file as an HTTP response\n    return request.make_response(zip_content, headers)\n\n\n    @http.route('/account/export_zip_documents', type='http', auth='user')\n\n", "CodeBleu_score": 43.75229695310756}, {"code": "def export_zip_documents(self, **args)\n\t# Get attachment IDs from HTTP request arguments\n    attachment_ids = request.args.getlist('attachment_ids[]')\n    if not attachment_ids:\n        return request.not_found()\n\n    # Verify read access rights and rules for the attachments\n    attachments = request.env['ir.attachment'].browse(attachment_ids).sudo()\n    if not attachments:\n        return request.not_found()\n    if not all(attachment.check_access_rights('read') for attachment in attachments):\n        return request.not_found()\n\n    # Build a zip file from the attachments' content\n    zip_content = io.BytesIO()\n    with zipfile.ZipFile(zip_content, 'w') as zip_file:\n        for attachment in attachments:\n            zip_file.writestr(attachment.name, attachment.datas)\n\n    # Prepare HTTP headers for the zip file\n    filename = '%s.zip' % request.env['ir.qweb']._strip_qweb_unsafe_chars(request.env['ir.attachment']._find_common_name(attachments))\n    headers = _get_zip_headers(zip_content.getvalue(), filename)\n\n    # Return the zip file as an HTTP response\n    return request.make_response(zip_content.getvalue(), headers)", "CodeBleu_score": 38.06392454197518}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\tvalues = super(PortalAccount, self)._prepare_home_portal_values(counters)\n    if request.env.user.has_group('account.group_account_invoice'):\n        domain = expression.AND([[('type', 'in', ['out_invoice', 'out_refund', 'in_invoice'])]])\n        try:\n            values['invoice_count'] = counters['account.move'].get(domain, 'total_count')\n        except AccessError:\n            pass\n    if request.env.user.has_group('account.group_account_bill'):\n        domain = expression.AND([[('type', 'in', ['out_receipt', 'in_payment'])]])\n        try:\n            values['bill_count'] = counters['account.move'].get(domain, 'total_count')\n        except AccessError:\n            pass\n    return values\n\n", "CodeBleu_score": 36.2505579363364}, {"code": "def _prepare_home_portal_values(self, counters)\n\tvalues = super(PortalAccount, self)._prepare_home_portal_values(counters)\n    if self._check_access_rights('account.move'):\n        values['invoice_count'] = counters.get('account.move', {}).get('invoice', 0)\n        values['bill_count'] = counters.get('account.move', {}).get('invoice', 0)\n    return values\n\n", "CodeBleu_score": 19.28979482597814}, {"code": "def _prepare_home_portal_values(self, counters)\n\tvalues = super(PortalAccount, self)._prepare_home_portal_values(counters)\n    if self._check_access_rights('read', 'account.move'):\n        values['invoice_count'] = counters.get('account.move', {}).get('invoice_count', 0)\n        values['bill_count'] = counters.get('account.move', {}).get('bill_count', 0)\n    return values\n\n", "CodeBleu_score": 20.346982299005546}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\tif not self._is_valid_session():\n        return request.redirect(\"/my\")\n\n    # Prepare values\n    values = self._prepare_portal_layout_values()\n\n    # Prepare invoices\n    domain = self._get_invoices_domain()\n    if date_begin and date_end:\n        domain += [('date', '>=', date_begin), ('date', '<=', date_end)]\n    invoice_ids = request.env['account.move'].search(domain, order=sortby, limit=self._items_per_page, offset=(page - 1) * self._items_per_page)\n    values['invoices'] = invoice_ids\n\n    # Prepare pagination\n    pager = portal_pager(\n        url=\"/my/invoices\",\n        url_args={'date_begin': date_begin, 'date_end': date_end, 'sortby': sortby, 'filterby': filterby},\n        total=invoice_ids.count(),\n        page=page,\n        step=self._items_per_page,\n        scope=self._items_per_page,\n        css_classes=\"o_portal_my_invoices_pagination\",\n    )\n    values['pager'] = pager\n\n    # Prepare sort/filter options\n    sortings = self._get_account_searchbar_sortings()\n    filters = self._get_account_searchbar_filters()\n    values['sortings'] = sortings\n    values['filters'] = filters\n    values['sortby'] = sortby or sortings['date']['order']\n    values['filterby'] = filterby or filters['all']['domain']\n\n    # Update session history\n    self._update_session_history(invoice_ids.ids)\n\n    return request.render(\"portal_account.portal_my_invoices\", values)\n\n", "CodeBleu_score": 39.10762474881727}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t# Get the user's invoices\n    invoices = self._get_invoices(date_begin=date_begin, date_end=date_end, sortby=sortby, filterby=filterby)\n\n    # Update the session history with the latest invoice IDs\n    self._update_history_with_invoices(invoices)\n\n    # Prepare the values for the invoices page\n    values = self._prepare_portal_invoices_values(invoices, page)\n\n    # Render the invoices page with the prepared values\n    return request.render(\"portal_my_invoices.portal_my_invoices_page\", values)\n\n", "CodeBleu_score": 28.443881059850156}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\tself.ensure_one()\n    # retrieve the counters and the page of invoices\n    counters = self._get_portal_counters()\n    invoice_ids = self._get_invoices(counters, date_begin, date_end, sortby, filterby)\n    # update the session history\n    self._update_history(invoice_ids)\n    # render the page\n    values = self._prepare_portal_layout_values()\n    values.update(self._prepare_portal_headers())\n    values.update(self._prepare_portal_footer())\n    values.update(self._prepare_portal_content_menu())\n    values.update(self._prepare_portal_searchbar())\n    values.update(self._prepare_portal_breadcrumb())\n    values.update(self._prepare_portal_notification())\n    values.update(self._prepare_portal_favorites())\n    values.update(self._prepare_portal_my_account())\n    values.update(self._prepare_home_portal_values(counters))\n    values.update(self._prepare_my_invoices_portal_values(counters, invoice_ids, page))\n    return request.website.render(\"portal_my_invoices.html\", values)\n\n", "CodeBleu_score": 26.94975299811419}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\tinvoice = request.env['account.move'].browse(invoice_id)\n    if not invoice.exists():\n        return request.redirect('/my')\n\n    # check access\n    if not invoice.check_access_rights('read'):\n        return request.redirect('/my')\n\n    # PDF download of a posted invoice\n    if download:\n        if report_type not in ['html', 'pdf', 'text']:\n            raise AccessError(_(\"You are not allowed to download this document\"))\n\n        # retrieve legal documents\n        legal_doc_ids = []\n        if report_type == 'pdf':\n            legal_doc_ids = request.env['ir.attachment'].search([('res_model', '=', 'account.move'), ('res_id', '=', invoice.id), ('type', '=', 'legal')])\n\n        # create zip file if there are multiple attachments\n        if len(legal_doc_ids) > 1:\n            zip_file = io.BytesIO()\n            with zipfile.ZipFile(zip_file, 'w') as zip_file_obj:\n                for legal_doc in legal_doc_ids:\n                    zip_file_obj.writestr(legal_doc.name, legal_doc.datas)\n            zip_file.seek(0)\n            return request.make_response(zip_file.read(), headers=_get_zip_headers(zip_file.getvalue(), 'invoice-%s.zip' % invoice.name))\n\n        # return the first attachment\n        elif len(legal_doc_ids) == 1:\n            return request.make_response(legal_doc_ids.datas, [('Content-Type', legal_doc_ids.mimetype)])\n\n    # HTML, PDF, or text report\n    if report_type in ['html', 'pdf', 'text']:\n        # retrieve invoice report\n        report_name = 'account.report_invoice'\n        if report_type == 'pdf':\n            report_name = 'account.report_invoice_document'\n        report = request.env['ir.actions.report']._get_report_from_name(report", "CodeBleu_score": 37.84626767476967}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\tinvoice = request.env['account.move'].browse(invoice_id)\n\n    if not invoice.exists():\n        return request.redirect('/my')\n\n    if invoice.state == 'draft':\n        return request.redirect('/my')\n\n    if invoice.state == 'cancel':\n        return request.redirect('/my')\n\n    if not invoice.check_access_rights('read'):\n        raise AccessError(_(\"You do not have access to this document.\"))\n\n    if download:\n        legal_docs = invoice.message_get_attachments(attachment_ids=invoice.attachment_ids.ids)\n        if len(legal_docs) == 1:\n            return request.make_response(legal_docs[0].datas_fname, legal_docs[0].datas, _get_zip_headers(invoice.name))\n        else:\n            return request.make_response(invoice.name + '.zip', legal_docs[0].datas, _get_zip_headers(invoice.name))\n\n    if report_type:\n        if report_type == 'html':\n            report_name = 'account.account_invoice_report_html'\n        elif report_type == 'pdf':\n            report_name = 'account.account_invoice_report_pdf'\n        elif report_type == 'text':\n            report_name = 'account.account_invoice_report_txt'\n        else:\n            raise MissingError(_('Invalid report type.'))\n        return request.report_response(report_name, [invoice.id])\n\n    values = self._invoice_get_page_view_values(invoice, access_token, **kw)\n    return request.render(\"account.portal_my_invoice_detail\", values)\n\n", "CodeBleu_score": 37.84210736692677}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\tinvoice = request.env['account.move'].browse(invoice_id)\n    if invoice.state == 'draft':\n        return request.redirect('/my/invoices')\n    if invoice.state == 'cancel':\n        return request.redirect('/my/invoices')\n    if not invoice.check_access_rights('read'):\n        return request.redirect('/my/invoices')\n\n    if download:\n        # retrieve legal documents\n        legal_doc_attachments = []\n        if invoice.company_id.invoice_legal_pad:\n            legal_doc_attachments = invoice.company_id.invoice_legal_pad.attachment_ids\n\n        # create zip file if there are multiple attachments\n        if len(legal_doc_attachments) > 1:\n            zip_file = io.BytesIO()\n            with zipfile.ZipFile(zip_file, 'w') as zip_file_obj:\n                for attachment in legal_doc_attachments:\n                    zip_file_obj.writestr(attachment.name, attachment.datas)\n            zip_file.seek(0)\n            return request.make_response(zip_file.read(), headers=_get_zip_headers(zip_file.getvalue(), 'invoice_legal_documents.zip'))\n\n        # return the attachment if there is only one\n        elif len(legal_doc_attachments) == 1:\n            return request.make_response(legal_doc_attachments[0].datas, headers=[('Content-Disposition', 'attachment; filename=\"%s\"' % legal_doc_attachments[0].name)])\n\n        # return an error if there are no attachments\n        else:\n            raise MissingError(_('No legal documents found.'))\n\n    # check report type\n    if report_type:\n        report_type = report_type.split(',')\n        if 'html' in report_type:\n            report_type = 'html'\n        elif 'pdf' in report_type:\n            report_type = 'pdf'\n        elif 'text' in report_type:\n            report_type = 'text'", "CodeBleu_score": 33.63556892075384}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t# This is a generator because data created here might be referenced by xml_id to data\n    # created later but defined in this same function.\n    product_domain = [('company_id', '=', company.id)] if company else []\n    for product in self.env['product.template'].search(product_domain):\n        if company.account_sale_tax_id:\n            product.taxes_id = [(6, 0, [company.account_sale_tax_id.id])]\n        if company.account_purchase_tax_id:\n            product.supplier_taxes_id = [(6, 0, [company.account_purchase_tax_id.id])]\n        yield product\n\n", "CodeBleu_score": 22.24783067526916}, {"code": "def _get_demo_data_products(self, company=False)\n\t# This is a generator because data created here might be referenced by xml_id to data\n    # created later but defined in this same function.\n    #\n    # This function is a copy of the original function from the module account_chart_template_l10n_in_custom.\n    # The only change is that we use the 'company' parameter.\n    #\n    # The 'company' parameter is the company for which we want to create demo data.\n    #\n    # The 'company' parameter is optional, if it is not specified, we use the first company found in the database.\n    #\n    # If the 'company' parameter is specified, we update the sale taxes for the products based on the company's account_sale_tax_id and the purchase taxes based on the company's account_purchase_tax_id.\n    #\n    # If the 'company' parameter is not specified, we update the sale taxes for the products based on the first company's account_sale_tax_id and the purchase taxes based on the first company's account_purchase_tax_id.\n    #\n    # If there is no company in the database, we raise an exception.\n    #\n    # If the 'company' parameter is specified and the company doesn't exist in the database, we raise an exception.\n    #\n    # If the 'company' parameter is not specified and there is no company in the database, we raise an exception.\n\n    if company:\n        company_id = company.id\n    else:\n        company_ids = self.env['res.company'].search([], order='id')\n        if not company_ids:\n            raise UserError(\n                _('No company found in the database. Please create a company first.'))\n        company_id = company_ids[0].id\n\n    company_obj = self.env['res.company']\n    product_tmpl_obj = self.env['product.template']\n    tax_obj = self.env['account.tax']\n    tax_group_obj = self.env['account.tax.group']\n\n    # Find the company's account_sale_tax_id\n    company = company_obj.browse(company_id", "CodeBleu_score": 24.761127321097486}, {"code": "def _get_demo_data_products(self, company=False)\n\t# This is a generator because data created here might be referenced by xml_id to data\n    # created later but defined in this same function.\n    if company:\n        company_id = company\n    else:\n        company_id = self.env.ref('base.main_company')\n    products = self.env['product.template'].search([('company_id', '=', company_id.id)])\n    for product in products:\n        if company_id.account_sale_tax_id:\n            product.taxes_id = [(6, 0, [company_id.account_sale_tax_id.id])]\n        if company_id.account_purchase_tax_id:\n            product.supplier_taxes_id = [(6, 0, [company_id.account_purchase_tax_id.id])]\n\n", "CodeBleu_score": 31.538148091674838}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t2000,\n                'date': time.strftime('%Y-01-01'),\n                'partner_id': 'base.res_partner_12',\n            },\n            'demo_bank_statement_line_3': {\n                'journal_id': bnk_journal.id,\n                'payment_ref': 'Last Year Interests',\n                'amount': 102.78,\n                'date': time.strftime('%Y-01-01'),\n            },\n            'demo_bank_statement_line_4': {\n                'journal_id': bnk_journal.id,\n                'payment_ref': time.strftime('INV/%Y/00002'),\n                'amount': 750,\n                'date': time.strftime('%Y-01-01'),\n                'partner_id': 'base.res_partner_2',\n            },\n            'demo_bank_statement_line_5': {\n                'journal_id': bnk_journal.id,\n                'payment_ref': f'R:9772938  10/07 AX 9415116318 T:5 BRT: {formatLang(self.env, 100.0, digits=2)} C/ croip',\n                'amount': 96.67,\n                'date': time.strftime('%Y-01-01'),\n            },\n        }\n\n    @api.model\n    def _get_demo_data_reconcile_model(self, company=False):\n        return {\n            'reconcile_from_label': {\n                'name': 'Line with Bank Fees',\n                'rule_type': 'writeoff_suggestion',\n                'match_label': 'contains',\n                'match_label_param': 'BRT',\n                'line_ids': [\n                    Command.create({\n                        'label': 'Due amount',\n                        'account_id': self._get_demo_account(\n                            'income',\n                            'income',\n                            self.env.company,\n                        ).id,\n                        'amount_type': 'regex',\n                        'amount_string': r'BRT: ([\\d,.]+)',\n                    }),\n                    Command.create({\n                        'label': 'Bank Fees',\n                        'account_id': self._get_demo_account(\n                            'cost_of_goods_sold',\n                            'expense_direct_cost',\n                            self.env.company,\n                        ).id,\n                        'amount_type': 'percentage',\n                        'amount_string': '100',\n                    }),\n                ]\n            },\n        }\n\n    @api.model\n    def _get_demo_data_attachment(self, company=False):\n        return {\n            'ir_attachment_in_invoice_1': {\n                'type': 'binary',\n                'name': 'in_invoice_yourcompany_demo.pdf',\n                'res_model': 'account.move',\n                'res_id': 'demo_invoice_extract',\n                'raw': file_open(\n                    'account/static/demo/in_invoice_yourcompany_demo_1.pdf', 'rb'\n                ).read()\n            },\n            'ir_attachment_in_invoice_2': {\n                'type': 'binary',\n                'name': 'in_invoice_yourcompany_demo.pdf',\n                'res_model': 'account.move',\n                'res_id': 'demo_invoice_equipment_purchase',\n                'raw': file_open(\n                    'account/static/demo/in_invoice_yourcompany_demo_2.pdf', 'rb'\n                ).read()\n            },\n        }\n\n    @api.model\n    def _get_demo_data_mail_message(self, company=False):\n        return {\n            'mail_message_in_invoice_1': {\n                'model': 'account.move',\n                'res_id': 'demo_invoice_extract',\n                'body': 'Vendor Bill attachment',\n                'message_type': 'comment',\n                'author_id': 'base.partner_demo',\n                'attachment_ids': [Command.set([\n                    'ir_attachment_in_invoice_1',\n                ])]\n            },\n            'mail_message_in_invoice_2': {\n                'model': 'account.move',\n                'res_id': 'demo_invoice_equipment_purchase',\n                'body': 'Vendor Bill attachment',\n                'message_type': 'comment',\n                'author_id': 'base.partner_demo',\n                'attachment_ids': [Command.set([\n                    'ir_attachment_in_invoice_2',\n                ])]\n            },\n        }\n\n    @api.model\n    def _get_demo_data_mail_activity(self, company=False):\n        return {\n            'invoice_activity_1': {\n                'res_id': 'demo_invoice_3',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_todo',\n                'date_deadline': (fields.Datetime.today() + relativedelta(days=5)).strftime('%Y-%m-%d %H:%M'),\n                'summary': 'Follow-up on payment',\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n            'invoice_activity_2': {\n                'res_id': 'demo_invoice_2',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_call',\n                'date_deadline': fields.Datetime.today().strftime('%Y-%m-%d %H:%M'),\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n            'invoice_activity_3': {\n                'res_id': 'demo_invoice_1',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_todo',\n                'date_deadline': (fields.Datetime.today() + relativedelta(days=5)).strftime('%Y-%m-%d %H:%M'),\n                'summary': 'Include upsell',\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n            'invoice_activity_4': {\n                'res_id': 'demo_invoice_extract',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_todo',\n                'date_deadline': (fields.Datetime.today() + relativedelta(days=5)).strftime('%Y-%m-%d %H:%M'),\n                'summary': 'Update address',\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n        }\n\n    @api.model\n\n\n", "CodeBleu_score": 30.742219151945093}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t2000,\n                'date': time.strftime('%Y-01-01'),\n                'partner_id': 'base.res_partner_12',\n            },\n            'demo_bank_statement_line_3': {\n                'journal_id': bnk_journal.id,\n                'payment_ref': 'Last Year Interests',\n                'amount': 102.78,\n                'date': time.strftime('%Y-01-01'),\n            },\n            'demo_bank_statement_line_4': {\n                'journal_id': bnk_journal.id,\n                'payment_ref': time.strftime('INV/%Y/00002'),\n                'amount': 750,\n                'date': time.strftime('%Y-01-01'),\n                'partner_id': 'base.res_partner_2',\n            },\n            'demo_bank_statement_line_5': {\n                'journal_id': bnk_journal.id,\n                'payment_ref': f'R:9772938  10/07 AX 9415116318 T:5 BRT: {formatLang(self.env, 100.0, digits=2)} C/ croip',\n                'amount': 96.67,\n                'date': time.strftime('%Y-01-01'),\n            },\n        }\n\n    @api.model\n    def _get_demo_data_reconcile_model(self, company=False):\n        return {\n            'reconcile_from_label': {\n                'name': 'Line with Bank Fees',\n                'rule_type': 'writeoff_suggestion',\n                'match_label': 'contains',\n                'match_label_param': 'BRT',\n                'line_ids': [\n                    Command.create({\n                        'label': 'Due amount',\n                        'account_id': self._get_demo_account(\n                            'income',\n                            'income',\n                            self.env.company,\n                        ).id,\n                        'amount_type': 'regex',\n                        'amount_string': r'BRT: ([\\d,.]+)',\n                    }),\n                    Command.create({\n                        'label': 'Bank Fees',\n                        'account_id': self._get_demo_account(\n                            'cost_of_goods_sold',\n                            'expense_direct_cost',\n                            self.env.company,\n                        ).id,\n                        'amount_type': 'percentage',\n                        'amount_string': '100',\n                    }),\n                ]\n            },\n        }\n\n    @api.model\n    def _get_demo_data_attachment(self, company=False):\n        return {\n            'ir_attachment_in_invoice_1': {\n                'type': 'binary',\n                'name': 'in_invoice_yourcompany_demo.pdf',\n                'res_model': 'account.move',\n                'res_id': 'demo_invoice_extract',\n                'raw': file_open(\n                    'account/static/demo/in_invoice_yourcompany_demo_1.pdf', 'rb'\n                ).read()\n            },\n            'ir_attachment_in_invoice_2': {\n                'type': 'binary',\n                'name': 'in_invoice_yourcompany_demo.pdf',\n                'res_model': 'account.move',\n                'res_id': 'demo_invoice_equipment_purchase',\n                'raw': file_open(\n                    'account/static/demo/in_invoice_yourcompany_demo_2.pdf', 'rb'\n                ).read()\n            },\n        }\n\n    @api.model\n    def _get_demo_data_mail_message(self, company=False):\n        return {\n            'mail_message_in_invoice_1': {\n                'model': 'account.move',\n                'res_id': 'demo_invoice_extract',\n                'body': 'Vendor Bill attachment',\n                'message_type': 'comment',\n                'author_id': 'base.partner_demo',\n                'attachment_ids': [Command.set([\n                    'ir_attachment_in_invoice_1',\n                ])]\n            },\n            'mail_message_in_invoice_2': {\n                'model': 'account.move',\n                'res_id': 'demo_invoice_equipment_purchase',\n                'body': 'Vendor Bill attachment',\n                'message_type': 'comment',\n                'author_id': 'base.partner_demo',\n                'attachment_ids': [Command.set([\n                    'ir_attachment_in_invoice_2',\n                ])]\n            },\n        }\n\n    @api.model\n    def _get_demo_data_mail_activity(self, company=False):\n        return {\n            'invoice_activity_1': {\n                'res_id': 'demo_invoice_3',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_todo',\n                'date_deadline': (fields.Datetime.today() + relativedelta(days=5)).strftime('%Y-%m-%d %H:%M'),\n                'summary': 'Follow-up on payment',\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n            'invoice_activity_2': {\n                'res_id': 'demo_invoice_2',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_call',\n                'date_deadline': fields.Datetime.today().strftime('%Y-%m-%d %H:%M'),\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n            'invoice_activity_3': {\n                'res_id': 'demo_invoice_1',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_todo',\n                'date_deadline': (fields.Datetime.today() + relativedelta(days=5)).strftime('%Y-%m-%d %H:%M'),\n                'summary': 'Include upsell',\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n            'invoice_activity_4': {\n                'res_id': 'demo_invoice_extract',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_todo',\n                'date_deadline': (fields.Datetime.today() + relativedelta(days=5)).strftime('%Y-%m-%d %H:%M'),\n                'summary': 'Update address',\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n        }\n\n    @api.model\n\n\n", "CodeBleu_score": 30.742219151945093}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t2000,\n                'date': time.strftime('%Y-01-01'),\n                'partner_id': 'base.res_partner_12',\n            },\n            'demo_bank_statement_line_3': {\n                'journal_id': bnk_journal.id,\n                'payment_ref': 'Last Year Interests',\n                'amount': 102.78,\n                'date': time.strftime('%Y-01-01'),\n            },\n            'demo_bank_statement_line_4': {\n                'journal_id': bnk_journal.id,\n                'payment_ref': time.strftime('INV/%Y/00002'),\n                'amount': 750,\n                'date': time.strftime('%Y-01-01'),\n                'partner_id': 'base.res_partner_2',\n            },\n            'demo_bank_statement_line_5': {\n                'journal_id': bnk_journal.id,\n                'payment_ref': f'R:9772938  10/07 AX 9415116318 T:5 BRT: {formatLang(self.env, 100.0, digits=2)} C/ croip',\n                'amount': 96.67,\n                'date': time.strftime('%Y-01-01'),\n            },\n        }\n\n    @api.model\n    def _get_demo_data_reconcile_model(self, company=False):\n        return {\n            'reconcile_from_label': {\n                'name': 'Line with Bank Fees',\n                'rule_type': 'writeoff_suggestion',\n                'match_label': 'contains',\n                'match_label_param': 'BRT',\n                'line_ids': [\n                    Command.create({\n                        'label': 'Due amount',\n                        'account_id': self._get_demo_account(\n                            'income',\n                            'income',\n                            self.env.company,\n                        ).id,\n                        'amount_type': 'regex',\n                        'amount_string': r'BRT: ([\\d,.]+)',\n                    }),\n                    Command.create({\n                        'label': 'Bank Fees',\n                        'account_id': self._get_demo_account(\n                            'cost_of_goods_sold',\n                            'expense_direct_cost',\n                            self.env.company,\n                        ).id,\n                        'amount_type': 'percentage',\n                        'amount_string': '100',\n                    }),\n                ]\n            },\n        }\n\n    @api.model\n    def _get_demo_data_attachment(self, company=False):\n        return {\n            'ir_attachment_in_invoice_1': {\n                'type': 'binary',\n                'name': 'in_invoice_yourcompany_demo.pdf',\n                'res_model': 'account.move',\n                'res_id': 'demo_invoice_extract',\n                'raw': file_open(\n                    'account/static/demo/in_invoice_yourcompany_demo_1.pdf', 'rb'\n                ).read()\n            },\n            'ir_attachment_in_invoice_2': {\n                'type': 'binary',\n                'name': 'in_invoice_yourcompany_demo.pdf',\n                'res_model': 'account.move',\n                'res_id': 'demo_invoice_equipment_purchase',\n                'raw': file_open(\n                    'account/static/demo/in_invoice_yourcompany_demo_2.pdf', 'rb'\n                ).read()\n            },\n        }\n\n    @api.model\n    def _get_demo_data_mail_message(self, company=False):\n        return {\n            'mail_message_in_invoice_1': {\n                'model': 'account.move',\n                'res_id': 'demo_invoice_extract',\n                'body': 'Vendor Bill attachment',\n                'message_type': 'comment',\n                'author_id': 'base.partner_demo',\n                'attachment_ids': [Command.set([\n                    'ir_attachment_in_invoice_1',\n                ])]\n            },\n            'mail_message_in_invoice_2': {\n                'model': 'account.move',\n                'res_id': 'demo_invoice_equipment_purchase',\n                'body': 'Vendor Bill attachment',\n                'message_type': 'comment',\n                'author_id': 'base.partner_demo',\n                'attachment_ids': [Command.set([\n                    'ir_attachment_in_invoice_2',\n                ])]\n            },\n        }\n\n    @api.model\n    def _get_demo_data_mail_activity(self, company=False):\n        return {\n            'invoice_activity_1': {\n                'res_id': 'demo_invoice_3',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_todo',\n                'date_deadline': (fields.Datetime.today() + relativedelta(days=5)).strftime('%Y-%m-%d %H:%M'),\n                'summary': 'Follow-up on payment',\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n            'invoice_activity_2': {\n                'res_id': 'demo_invoice_2',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_call',\n                'date_deadline': fields.Datetime.today().strftime('%Y-%m-%d %H:%M'),\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n            'invoice_activity_3': {\n                'res_id': 'demo_invoice_1',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_todo',\n                'date_deadline': (fields.Datetime.today() + relativedelta(days=5)).strftime('%Y-%m-%d %H:%M'),\n                'summary': 'Include upsell',\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n            'invoice_activity_4': {\n                'res_id': 'demo_invoice_extract',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_todo',\n                'date_deadline': (fields.Datetime.today() + relativedelta(days=5)).strftime('%Y-%m-%d %H:%M'),\n                'summary': 'Update address',\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n        }\n\n    @api.model\n\n\n", "CodeBleu_score": 30.742219151945093}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\tcurrent_year_earnings = self.env['account.account'].search([('account_type', '=', 'current_year_earnings')])\n    current_year_earnings_by_company = defaultdict(list)\n    for earning in current_year_earnings:\n        current_year_earnings_by_company[earning.company_id].append(earning)\n\n    for company, earnings in current_year_earnings_by_company.items():\n        if len(earnings) > 1:\n            raise ValidationError(_('You cannot have more than one account with the \"Current Year Earnings\" account type per company. (account codes: %s)', [earning.code for earning in earnings]))\n\n", "CodeBleu_score": 35.01054202020941}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\tfor company, accounts in groupby(self, lambda account: account.company_id):\n        accounts = list(accounts)\n        if len(accounts) > 1:\n            raise ValidationError(\n                _(\n                    \"There must be only one account with the 'Current Year Earnings' type for each company. (account code: %s)\",\n                    accounts[1].code,\n                )\n            )\n\n", "CodeBleu_score": 24.448945924793602}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\tcurrent_year_earning_accounts = self.env['account.account'].search([('account_type', '=', 'earning'), ('company_id', 'in', self.ids)])\n    if current_year_earning_accounts:\n        current_year_earning_accounts_grouped = current_year_earning_accounts.read_group([('account_type', '=', 'earning')], ['company_id'], ['company_id'])\n        for current_year_earning_account in current_year_earning_accounts_grouped:\n            if current_year_earning_account['company_id_count'] > 1:\n                raise ValidationError(_('You cannot have more than one Current Year Earnings account for a company.'))\n\n", "CodeBleu_score": 37.2485648748229}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t.company_id.id].keys())\n            closest_index = bisect_left(codes_list, account.code) - 1\n            account.account_type = accounts_with_codes[account.company_id.id][codes_list[closest_index]] if closest_index != -1 else 'asset_current'\n\n    @api.depends('account_type')\n    def _compute_include_initial_balance(self):\n        for account in self:\n            account.include_initial_balance = account.account_type not in ('income', 'income_other', 'expense', 'expense_depreciation', 'expense_direct_cost', 'off_balance')\n\n    @api.depends('account_type')\n    def _compute_internal_group(self):\n        for account in self:\n            if account.account_type:\n                account.internal_group = 'off_balance' if account.account_type == 'off_balance' else account.account_type.split('_')[0]\n\n    @api.depends('account_type')\n    def _compute_reconcile(self):\n        for account in self:\n            account.reconcile = account.account_type in ('asset_receivable', 'liability_payable')\n\n    def _set_opening_debit(self):\n        for record in self:\n            record._set_opening_debit_credit(record.opening_debit, 'debit')\n\n    def _set_opening_credit(self):\n        for record in self:\n            record._set_opening_debit_credit(record.opening_credit, 'credit')\n\n    def _set_opening_balance(self):\n        # Tracking of the balances to be used after the import to populate the opening move in batch.\n        for account in self:\n            balance = account.opening_balance\n            account._set_opening_debit_credit(abs(balance) if balance > 0.0 else 0.0, 'debit')\n            account._set_opening_debit_credit(abs(balance) if balance < 0.0 else 0.0, 'credit')\n\n    def _set_opening_debit_credit(self, amount, field):\n        \\\"\\\"\\\" Generic function called by both opening_debit and opening_credit's\n        inverse function. 'Amount' parameter is the value to be set, and field\n        either 'debit' or 'credit', depending on which one of these two fields\n        got assigned.\n        \\\"\\\"\\\"\n        self.ensure_one()\n        if 'import_account_opening_balance' not in self._cr.precommit.data:\n            data = self._cr.precommit.data['import_account_opening_balance'] = {}\n            self._cr.precommit.add(self._load_precommit_update_opening_move)\n        else:\n            data = self._cr.precommit.data['import_account_opening_balance']\n        data.setdefault(self.id, [None, None])\n        index = 0 if field == 'debit' else 1\n        data[self.id][index] = amount\n\n    @api.model\n    def default_get(self, default_fields):\n        \\\"\\\"\\\"If we're creating a new account through a many2one, there are chances that we typed the account code\n        instead of its name. In that case, switch both fields values.\n        \\\"\\\"\\\"\n        if 'name' not in default_fields and 'code' not in default_fields:\n            return super().default_get(default_fields)\n        default_name = self._context.get('default_name')\n        default_code = self._context.get('default_code')\n        if default_name and not default_code:\n            try:\n                default_code = int(default_name)\n            except ValueError:\n                pass\n            if default_code:\n                default_name = False\n        contextual_self = self.with_context(default_name=default_name, default_code=default_code)\n        return super(AccountAccount, contextual_self).default_get(default_fields)\n\n    @api.model\n    def _get_most_frequent_accounts_for_partner(self, company_id, partner_id, move_type, filter_never_user_accounts=False, limit=None):\n        \\\"\\\"\\\"\n        Returns the accounts ordered from most frequent to least frequent for a given partner\n        and filtered according to the move type\n        :param company_id: the company id\n        :param partner_id: the partner id for which we want to retrieve the most frequent accounts\n        :param move_type: the type of the move to know which type of accounts to retrieve\n        :param filter_never_user_accounts: True if we should filter out accounts never used for the partner\n        :param limit: the maximum number of accounts to retrieve\n        :returns: List of account ids, ordered by frequency (from most to least frequent)\n        \\\"\\\"\\\"\n        domain = [\n            *self.env['account.move.line']._check_company_domain(company_id),\n            ('partner_id', '=', partner_id),\n            ('account_id.deprecated', '=', False),\n            ('date', '>=', fields.Date.add(fields.Date.today(), days=-365 * 2)),\n        ]\n        if move_type in self.env['account.move'].get_inbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'income'))\n        elif move_type in self.env['account.move'].get_outbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'expense'))\n\n        query = self.env['account.move.line']._where_calc(domain)\n        if not filter_never_user_accounts:\n            _kind, rhs_table, condition = query._joins['account_move_line__account_id']\n            query._joins['account_move_line__account_id'] = (SQL(\\\"RIGHT JOIN\\\"), rhs_table, condition)\n\n        from_clause, where_clause, params = query.get_sql()\n        self._cr.execute(f\\\"\\\"\\\"\n            SELECT account_move_line__account_id.id\n              FROM {from_clause}\n             WHERE {where_clause}\n          GROUP BY account_move_line__account_id.id\n          ORDER BY COUNT(account_move_line.id) DESC, account_move_line__account_id.code\n                   {f\\\"LIMIT {limit:d}\\\" if limit else \\\"\\\"}\n        \\\"\\\"\\\", params)\n        return [r[0] for r in self._cr.fetchall()]\n\n    @api.model\n    def _get_most_frequent_account_for_partner(self, company_id, partner_id, move_type=None):\n        most_frequent_account = self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type, filter_never_user_accounts=True, limit=1)\n        return most_frequent_account[0] if most_frequent_account else False\n\n    @api.model\n    def _order_accounts_by_frequency_for_partner(self, company_id, partner_id, move_type=None):\n        return self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type)\n\n    @api.model\n\n\n", "CodeBleu_score": 25.81749104270162}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t.company_id.id].keys())\n            closest_index = bisect_left(codes_list, account.code) - 1\n            account.account_type = accounts_with_codes[account.company_id.id][codes_list[closest_index]] if closest_index != -1 else 'asset_current'\n\n    @api.depends('account_type')\n    def _compute_include_initial_balance(self):\n        for account in self:\n            account.include_initial_balance = account.account_type not in ('income', 'income_other', 'expense', 'expense_depreciation', 'expense_direct_cost', 'off_balance')\n\n    @api.depends('account_type')\n    def _compute_internal_group(self):\n        for account in self:\n            if account.account_type:\n                account.internal_group = 'off_balance' if account.account_type == 'off_balance' else account.account_type.split('_')[0]\n\n    @api.depends('account_type')\n    def _compute_reconcile(self):\n        for account in self:\n            account.reconcile = account.account_type in ('asset_receivable', 'liability_payable')\n\n    def _set_opening_debit(self):\n        for record in self:\n            record._set_opening_debit_credit(record.opening_debit, 'debit')\n\n    def _set_opening_credit(self):\n        for record in self:\n            record._set_opening_debit_credit(record.opening_credit, 'credit')\n\n    def _set_opening_balance(self):\n        # Tracking of the balances to be used after the import to populate the opening move in batch.\n        for account in self:\n            balance = account.opening_balance\n            account._set_opening_debit_credit(abs(balance) if balance > 0.0 else 0.0, 'debit')\n            account._set_opening_debit_credit(abs(balance) if balance < 0.0 else 0.0, 'credit')\n\n    def _set_opening_debit_credit(self, amount, field):\n        \\\"\\\"\\\" Generic function called by both opening_debit and opening_credit's\n        inverse function. 'Amount' parameter is the value to be set, and field\n        either 'debit' or 'credit', depending on which one of these two fields\n        got assigned.\n        \\\"\\\"\\\"\n        self.ensure_one()\n        if 'import_account_opening_balance' not in self._cr.precommit.data:\n            data = self._cr.precommit.data['import_account_opening_balance'] = {}\n            self._cr.precommit.add(self._load_precommit_update_opening_move)\n        else:\n            data = self._cr.precommit.data['import_account_opening_balance']\n        data.setdefault(self.id, [None, None])\n        index = 0 if field == 'debit' else 1\n        data[self.id][index] = amount\n\n    @api.model\n    def default_get(self, default_fields):\n        \\\"\\\"\\\"If we're creating a new account through a many2one, there are chances that we typed the account code\n        instead of its name. In that case, switch both fields values.\n        \\\"\\\"\\\"\n        if 'name' not in default_fields and 'code' not in default_fields:\n            return super().default_get(default_fields)\n        default_name = self._context.get('default_name')\n        default_code = self._context.get('default_code')\n        if default_name and not default_code:\n            try:\n                default_code = int(default_name)\n            except ValueError:\n                pass\n            if default_code:\n                default_name = False\n        contextual_self = self.with_context(default_name=default_name, default_code=default_code)\n        return super(AccountAccount, contextual_self).default_get(default_fields)\n\n    @api.model\n    def _get_most_frequent_accounts_for_partner(self, company_id, partner_id, move_type, filter_never_user_accounts=False, limit=None):\n        \\\"\\\"\\\"\n        Returns the accounts ordered from most frequent to least frequent for a given partner\n        and filtered according to the move type\n        :param company_id: the company id\n        :param partner_id: the partner id for which we want to retrieve the most frequent accounts\n        :param move_type: the type of the move to know which type of accounts to retrieve\n        :param filter_never_user_accounts: True if we should filter out accounts never used for the partner\n        :param limit: the maximum number of accounts to retrieve\n        :returns: List of account ids, ordered by frequency (from most to least frequent)\n        \\\"\\\"\\\"\n        domain = [\n            *self.env['account.move.line']._check_company_domain(company_id),\n            ('partner_id', '=', partner_id),\n            ('account_id.deprecated', '=', False),\n            ('date', '>=', fields.Date.add(fields.Date.today(), days=-365 * 2)),\n        ]\n        if move_type in self.env['account.move'].get_inbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'income'))\n        elif move_type in self.env['account.move'].get_outbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'expense'))\n\n        query = self.env['account.move.line']._where_calc(domain)\n        if not filter_never_user_accounts:\n            _kind, rhs_table, condition = query._joins['account_move_line__account_id']\n            query._joins['account_move_line__account_id'] = (SQL(\\\"RIGHT JOIN\\\"), rhs_table, condition)\n\n        from_clause, where_clause, params = query.get_sql()\n        self._cr.execute(f\\\"\\\"\\\"\n            SELECT account_move_line__account_id.id\n              FROM {from_clause}\n             WHERE {where_clause}\n          GROUP BY account_move_line__account_id.id\n          ORDER BY COUNT(account_move_line.id) DESC, account_move_line__account_id.code\n                   {f\\\"LIMIT {limit:d}\\\" if limit else \\\"\\\"}\n        \\\"\\\"\\\", params)\n        return [r[0] for r in self._cr.fetchall()]\n\n    @api.model\n    def _get_most_frequent_account_for_partner(self, company_id, partner_id, move_type=None):\n        most_frequent_account = self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type, filter_never_user_accounts=True, limit=1)\n        return most_frequent_account[0] if most_frequent_account else False\n\n    @api.model\n    def _order_accounts_by_frequency_for_partner(self, company_id, partner_id, move_type=None):\n        return self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type)\n\n    @api.model\n\n\n", "CodeBleu_score": 25.81749104270162}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t.company_id.id].keys())\n            closest_index = bisect_left(codes_list, account.code) - 1\n            account.account_type = accounts_with_codes[account.company_id.id][codes_list[closest_index]] if closest_index != -1 else 'asset_current'\n\n    @api.depends('account_type')\n    def _compute_include_initial_balance(self):\n        for account in self:\n            account.include_initial_balance = account.account_type not in ('income', 'income_other', 'expense', 'expense_depreciation', 'expense_direct_cost', 'off_balance')\n\n    @api.depends('account_type')\n    def _compute_internal_group(self):\n        for account in self:\n            if account.account_type:\n                account.internal_group = 'off_balance' if account.account_type == 'off_balance' else account.account_type.split('_')[0]\n\n    @api.depends('account_type')\n    def _compute_reconcile(self):\n        for account in self:\n            account.reconcile = account.account_type in ('asset_receivable', 'liability_payable')\n\n    def _set_opening_debit(self):\n        for record in self:\n            record._set_opening_debit_credit(record.opening_debit, 'debit')\n\n    def _set_opening_credit(self):\n        for record in self:\n            record._set_opening_debit_credit(record.opening_credit, 'credit')\n\n    def _set_opening_balance(self):\n        # Tracking of the balances to be used after the import to populate the opening move in batch.\n        for account in self:\n            balance = account.opening_balance\n            account._set_opening_debit_credit(abs(balance) if balance > 0.0 else 0.0, 'debit')\n            account._set_opening_debit_credit(abs(balance) if balance < 0.0 else 0.0, 'credit')\n\n    def _set_opening_debit_credit(self, amount, field):\n        \\\"\\\"\\\" Generic function called by both opening_debit and opening_credit's\n        inverse function. 'Amount' parameter is the value to be set, and field\n        either 'debit' or 'credit', depending on which one of these two fields\n        got assigned.\n        \\\"\\\"\\\"\n        self.ensure_one()\n        if 'import_account_opening_balance' not in self._cr.precommit.data:\n            data = self._cr.precommit.data['import_account_opening_balance'] = {}\n            self._cr.precommit.add(self._load_precommit_update_opening_move)\n        else:\n            data = self._cr.precommit.data['import_account_opening_balance']\n        data.setdefault(self.id, [None, None])\n        index = 0 if field == 'debit' else 1\n        data[self.id][index] = amount\n\n    @api.model\n    def default_get(self, default_fields):\n        \\\"\\\"\\\"If we're creating a new account through a many2one, there are chances that we typed the account code\n        instead of its name. In that case, switch both fields values.\n        \\\"\\\"\\\"\n        if 'name' not in default_fields and 'code' not in default_fields:\n            return super().default_get(default_fields)\n        default_name = self._context.get('default_name')\n        default_code = self._context.get('default_code')\n        if default_name and not default_code:\n            try:\n                default_code = int(default_name)\n            except ValueError:\n                pass\n            if default_code:\n                default_name = False\n        contextual_self = self.with_context(default_name=default_name, default_code=default_code)\n        return super(AccountAccount, contextual_self).default_get(default_fields)\n\n    @api.model\n    def _get_most_frequent_accounts_for_partner(self, company_id, partner_id, move_type, filter_never_user_accounts=False, limit=None):\n        \\\"\\\"\\\"\n        Returns the accounts ordered from most frequent to least frequent for a given partner\n        and filtered according to the move type\n        :param company_id: the company id\n        :param partner_id: the partner id for which we want to retrieve the most frequent accounts\n        :param move_type: the type of the move to know which type of accounts to retrieve\n        :param filter_never_user_accounts: True if we should filter out accounts never used for the partner\n        :param limit: the maximum number of accounts to retrieve\n        :returns: List of account ids, ordered by frequency (from most to least frequent)\n        \\\"\\\"\\\"\n        domain = [\n            *self.env['account.move.line']._check_company_domain(company_id),\n            ('partner_id', '=', partner_id),\n            ('account_id.deprecated', '=', False),\n            ('date', '>=', fields.Date.add(fields.Date.today(), days=-365 * 2)),\n        ]\n        if move_type in self.env['account.move'].get_inbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'income'))\n        elif move_type in self.env['account.move'].get_outbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'expense'))\n\n        query = self.env['account.move.line']._where_calc(domain)\n        if not filter_never_user_accounts:\n            _kind, rhs_table, condition = query._joins['account_move_line__account_id']\n            query._joins['account_move_line__account_id'] = (SQL(\\\"RIGHT JOIN\\\"), rhs_table, condition)\n\n        from_clause, where_clause, params = query.get_sql()\n        self._cr.execute(f\\\"\\\"\\\"\n            SELECT account_move_line__account_id.id\n              FROM {from_clause}\n             WHERE {where_clause}\n          GROUP BY account_move_line__account_id.id\n          ORDER BY COUNT(account_move_line.id) DESC, account_move_line__account_id.code\n                   {f\\\"LIMIT {limit:d}\\\" if limit else \\\"\\\"}\n        \\\"\\\"\\\", params)\n        return [r[0] for r in self._cr.fetchall()]\n\n    @api.model\n    def _get_most_frequent_account_for_partner(self, company_id, partner_id, move_type=None):\n        most_frequent_account = self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type, filter_never_user_accounts=True, limit=1)\n        return most_frequent_account[0] if most_frequent_account else False\n\n    @api.model\n    def _order_accounts_by_frequency_for_partner(self, company_id, partner_id, move_type=None):\n        return self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type)\n\n    @api.model\n\n\n", "CodeBleu_score": 25.81749104270162}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t] = amount\n\n    @api.model\n    def default_get(self, default_fields):\n        \\\"\\\"\\\"If we're creating a new account through a many2one, there are chances that we typed the account code\n        instead of its name. In that case, switch both fields values.\n        \\\"\\\"\\\"\n        if 'name' not in default_fields and 'code' not in default_fields:\n            return super().default_get(default_fields)\n        default_name = self._context.get('default_name')\n        default_code = self._context.get('default_code')\n        if default_name and not default_code:\n            try:\n                default_code = int(default_name)\n            except ValueError:\n                pass\n            if default_code:\n                default_name = False\n        contextual_self = self.with_context(default_name=default_name, default_code=default_code)\n        return super(AccountAccount, contextual_self).default_get(default_fields)\n\n    @api.model\n    def _get_most_frequent_accounts_for_partner(self, company_id, partner_id, move_type, filter_never_user_accounts=False, limit=None):\n        \\\"\\\"\\\"\n        Returns the accounts ordered from most frequent to least frequent for a given partner\n        and filtered according to the move type\n        :param company_id: the company id\n        :param partner_id: the partner id for which we want to retrieve the most frequent accounts\n        :param move_type: the type of the move to know which type of accounts to retrieve\n        :param filter_never_user_accounts: True if we should filter out accounts never used for the partner\n        :param limit: the maximum number of accounts to retrieve\n        :returns: List of account ids, ordered by frequency (from most to least frequent)\n        \\\"\\\"\\\"\n        domain = [\n            *self.env['account.move.line']._check_company_domain(company_id),\n            ('partner_id', '=', partner_id),\n            ('account_id.deprecated', '=', False),\n            ('date', '>=', fields.Date.add(fields.Date.today(), days=-365 * 2)),\n        ]\n        if move_type in self.env['account.move'].get_inbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'income'))\n        elif move_type in self.env['account.move'].get_outbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'expense'))\n\n        query = self.env['account.move.line']._where_calc(domain)\n        if not filter_never_user_accounts:\n            _kind, rhs_table, condition = query._joins['account_move_line__account_id']\n            query._joins['account_move_line__account_id'] = (SQL(\\\"RIGHT JOIN\\\"), rhs_table, condition)\n\n        from_clause, where_clause, params = query.get_sql()\n        self._cr.execute(f\\\"\\\"\\\"\n            SELECT account_move_line__account_id.id\n              FROM {from_clause}\n             WHERE {where_clause}\n          GROUP BY account_move_line__account_id.id\n          ORDER BY COUNT(account_move_line.id) DESC, account_move_line__account_id.code\n                   {f\\\"LIMIT {limit:d}\\\" if limit else \\\"\\\"}\n        \\\"\\\"\\\", params)\n        return [r[0] for r in self._cr.fetchall()]\n\n    @api.model\n    def _get_most_frequent_account_for_partner(self, company_id, partner_id, move_type=None):\n        most_frequent_account = self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type, filter_never_user_accounts=True, limit=1)\n        return most_frequent_account[0] if most_frequent_account else False\n\n    @api.model\n    def _order_accounts_by_frequency_for_partner(self, company_id, partner_id, move_type=None):\n        return self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type)\n\n    @api.model\n    def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None):\n        if not name and self._context.get('partner_id') and self._context.get('move_type'):\n            return self._order_accounts_by_frequency_for_partner(\n                            self.env.company.id, self._context.get('partner_id'), self._context.get('move_type'))\n        domain = domain or []\n        if name:\n            if operator in ('=', '!='):\n                name_domain = ['|', ('code', '=', name.split(' ')[0]), ('name', operator, name)]\n            else:\n                name_domain = ['|', ('code', '=ilike', name.split(' ')[0] + '%'), ('name', operator, name)]\n            if operator in expression.NEGATIVE_TERM_OPERATORS:\n                name_domain = ['&', '!'] + name_domain[1:]\n            domain = expression.AND([name_domain, domain])\n        return self._search(domain, limit=limit, order=order)\n\n    @api.onchange('account_type')\n    def _onchange_account_type(self):\n        if self.internal_group == 'off_balance':\n            self.tax_ids = False\n\n    def _split_code_name(self, code_name):\n        # We only want to split the name on the first word if there is a digit in it\n        code, name = ACCOUNT_REGEX.match(code_name or '').groups()\n        return code, name.strip()\n\n    @api.onchange('name')\n    def _onchange_name(self):\n        code, name = self._split_code_name(self.name)\n        if code and not self.code:\n            self.name = name\n            self.code = code\n\n    @api.depends('code')\n    def _compute_display_name(self):\n        for account in self:\n            account.display_name = f\\\"{account.code} {account.name}\\\"\n\n    @api.returns('self', lambda value: value.id)\n    def copy(self, default=None):\n        default = dict(default or {})\n        if default.get('code', False):\n            return super(AccountAccount, self).copy(default)\n        try:\n            default['code'] = (str(int(self.code) + 10) or '').zfill(len(self.code))\n            default.setdefault('name', _(\\\"%s (copy)\\\", self.name or ''))\n            while self.env['account.account'].search([\n                *self.env['account.account']._check_company_domain(default.get('company_id', False) or self.company_id),\n                ('code', '=', default['code']),\n            ], limit=1):\n                default['code'] = (str(int(default['code']) + 10) or '')\n                default['name'] = _(\\\"%s (copy)\\\", self.name or '')\n        except ValueError:\n            default['code'] = _(\\\"%s.copy\\\", self.code or '')\n            default['name'] = self.name\n        return super(AccountAccount, self).copy(default)\n\n\n\n", "CodeBleu_score": 29.598566905469458}, {"code": "def copy_translations(self, new, excluded=())\n\t] = amount\n\n    @api.model\n    def default_get(self, default_fields):\n        \\\"\\\"\\\"If we're creating a new account through a many2one, there are chances that we typed the account code\n        instead of its name. In that case, switch both fields values.\n        \\\"\\\"\\\"\n        if 'name' not in default_fields and 'code' not in default_fields:\n            return super().default_get(default_fields)\n        default_name = self._context.get('default_name')\n        default_code = self._context.get('default_code')\n        if default_name and not default_code:\n            try:\n                default_code = int(default_name)\n            except ValueError:\n                pass\n            if default_code:\n                default_name = False\n        contextual_self = self.with_context(default_name=default_name, default_code=default_code)\n        return super(AccountAccount, contextual_self).default_get(default_fields)\n\n    @api.model\n    def _get_most_frequent_accounts_for_partner(self, company_id, partner_id, move_type, filter_never_user_accounts=False, limit=None):\n        \\\"\\\"\\\"\n        Returns the accounts ordered from most frequent to least frequent for a given partner\n        and filtered according to the move type\n        :param company_id: the company id\n        :param partner_id: the partner id for which we want to retrieve the most frequent accounts\n        :param move_type: the type of the move to know which type of accounts to retrieve\n        :param filter_never_user_accounts: True if we should filter out accounts never used for the partner\n        :param limit: the maximum number of accounts to retrieve\n        :returns: List of account ids, ordered by frequency (from most to least frequent)\n        \\\"\\\"\\\"\n        domain = [\n            *self.env['account.move.line']._check_company_domain(company_id),\n            ('partner_id', '=', partner_id),\n            ('account_id.deprecated', '=', False),\n            ('date', '>=', fields.Date.add(fields.Date.today(), days=-365 * 2)),\n        ]\n        if move_type in self.env['account.move'].get_inbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'income'))\n        elif move_type in self.env['account.move'].get_outbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'expense'))\n\n        query = self.env['account.move.line']._where_calc(domain)\n        if not filter_never_user_accounts:\n            _kind, rhs_table, condition = query._joins['account_move_line__account_id']\n            query._joins['account_move_line__account_id'] = (SQL(\\\"RIGHT JOIN\\\"), rhs_table, condition)\n\n        from_clause, where_clause, params = query.get_sql()\n        self._cr.execute(f\\\"\\\"\\\"\n            SELECT account_move_line__account_id.id\n              FROM {from_clause}\n             WHERE {where_clause}\n          GROUP BY account_move_line__account_id.id\n          ORDER BY COUNT(account_move_line.id) DESC, account_move_line__account_id.code\n                   {f\\\"LIMIT {limit:d}\\\" if limit else \\\"\\\"}\n        \\\"\\\"\\\", params)\n        return [r[0] for r in self._cr.fetchall()]\n\n    @api.model\n    def _get_most_frequent_account_for_partner(self, company_id, partner_id, move_type=None):\n        most_frequent_account = self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type, filter_never_user_accounts=True, limit=1)\n        return most_frequent_account[0] if most_frequent_account else False\n\n    @api.model\n    def _order_accounts_by_frequency_for_partner(self, company_id, partner_id, move_type=None):\n        return self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type)\n\n    @api.model\n    def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None):\n        if not name and self._context.get('partner_id') and self._context.get('move_type'):\n            return self._order_accounts_by_frequency_for_partner(\n                            self.env.company.id, self._context.get('partner_id'), self._context.get('move_type'))\n        domain = domain or []\n        if name:\n            if operator in ('=', '!='):\n                name_domain = ['|', ('code', '=', name.split(' ')[0]), ('name', operator, name)]\n            else:\n                name_domain = ['|', ('code', '=ilike', name.split(' ')[0] + '%'), ('name', operator, name)]\n            if operator in expression.NEGATIVE_TERM_OPERATORS:\n                name_domain = ['&', '!'] + name_domain[1:]\n            domain = expression.AND([name_domain, domain])\n        return self._search(domain, limit=limit, order=order)\n\n    @api.onchange('account_type')\n    def _onchange_account_type(self):\n        if self.internal_group == 'off_balance':\n            self.tax_ids = False\n\n    def _split_code_name(self, code_name):\n        # We only want to split the name on the first word if there is a digit in it\n        code, name = ACCOUNT_REGEX.match(code_name or '').groups()\n        return code, name.strip()\n\n    @api.onchange('name')\n    def _onchange_name(self):\n        code, name = self._split_code_name(self.name)\n        if code and not self.code:\n            self.name = name\n            self.code = code\n\n    @api.depends('code')\n    def _compute_display_name(self):\n        for account in self:\n            account.display_name = f\\\"{account.code} {account.name}\\\"\n\n    @api.returns('self', lambda value: value.id)\n    def copy(self, default=None):\n        default = dict(default or {})\n        if default.get('code', False):\n            return super(AccountAccount, self).copy(default)\n        try:\n            default['code'] = (str(int(self.code) + 10) or '').zfill(len(self.code))\n            default.setdefault('name', _(\\\"%s (copy)\\\", self.name or ''))\n            while self.env['account.account'].search([\n                *self.env['account.account']._check_company_domain(default.get('company_id', False) or self.company_id),\n                ('code', '=', default['code']),\n            ], limit=1):\n                default['code'] = (str(int(default['code']) + 10) or '')\n                default['name'] = _(\\\"%s (copy)\\\", self.name or '')\n        except ValueError:\n            default['code'] = _(\\\"%s.copy\\\", self.code or '')\n            default['name'] = self.name\n        return super(AccountAccount, self).copy(default)\n\n\n\n", "CodeBleu_score": 29.598566905469458}, {"code": "def copy_translations(self, new, excluded=())\n\t] = amount\n\n    @api.model\n    def default_get(self, default_fields):\n        \\\"\\\"\\\"If we're creating a new account through a many2one, there are chances that we typed the account code\n        instead of its name. In that case, switch both fields values.\n        \\\"\\\"\\\"\n        if 'name' not in default_fields and 'code' not in default_fields:\n            return super().default_get(default_fields)\n        default_name = self._context.get('default_name')\n        default_code = self._context.get('default_code')\n        if default_name and not default_code:\n            try:\n                default_code = int(default_name)\n            except ValueError:\n                pass\n            if default_code:\n                default_name = False\n        contextual_self = self.with_context(default_name=default_name, default_code=default_code)\n        return super(AccountAccount, contextual_self).default_get(default_fields)\n\n    @api.model\n    def _get_most_frequent_accounts_for_partner(self, company_id, partner_id, move_type, filter_never_user_accounts=False, limit=None):\n        \\\"\\\"\\\"\n        Returns the accounts ordered from most frequent to least frequent for a given partner\n        and filtered according to the move type\n        :param company_id: the company id\n        :param partner_id: the partner id for which we want to retrieve the most frequent accounts\n        :param move_type: the type of the move to know which type of accounts to retrieve\n        :param filter_never_user_accounts: True if we should filter out accounts never used for the partner\n        :param limit: the maximum number of accounts to retrieve\n        :returns: List of account ids, ordered by frequency (from most to least frequent)\n        \\\"\\\"\\\"\n        domain = [\n            *self.env['account.move.line']._check_company_domain(company_id),\n            ('partner_id', '=', partner_id),\n            ('account_id.deprecated', '=', False),\n            ('date', '>=', fields.Date.add(fields.Date.today(), days=-365 * 2)),\n        ]\n        if move_type in self.env['account.move'].get_inbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'income'))\n        elif move_type in self.env['account.move'].get_outbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'expense'))\n\n        query = self.env['account.move.line']._where_calc(domain)\n        if not filter_never_user_accounts:\n            _kind, rhs_table, condition = query._joins['account_move_line__account_id']\n            query._joins['account_move_line__account_id'] = (SQL(\\\"RIGHT JOIN\\\"), rhs_table, condition)\n\n        from_clause, where_clause, params = query.get_sql()\n        self._cr.execute(f\\\"\\\"\\\"\n            SELECT account_move_line__account_id.id\n              FROM {from_clause}\n             WHERE {where_clause}\n          GROUP BY account_move_line__account_id.id\n          ORDER BY COUNT(account_move_line.id) DESC, account_move_line__account_id.code\n                   {f\\\"LIMIT {limit:d}\\\" if limit else \\\"\\\"}\n        \\\"\\\"\\\", params)\n        return [r[0] for r in self._cr.fetchall()]\n\n    @api.model\n    def _get_most_frequent_account_for_partner(self, company_id, partner_id, move_type=None):\n        most_frequent_account = self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type, filter_never_user_accounts=True, limit=1)\n        return most_frequent_account[0] if most_frequent_account else False\n\n    @api.model\n    def _order_accounts_by_frequency_for_partner(self, company_id, partner_id, move_type=None):\n        return self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type)\n\n    @api.model\n    def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None):\n        if not name and self._context.get('partner_id') and self._context.get('move_type'):\n            return self._order_accounts_by_frequency_for_partner(\n                            self.env.company.id, self._context.get('partner_id'), self._context.get('move_type'))\n        domain = domain or []\n        if name:\n            if operator in ('=', '!='):\n                name_domain = ['|', ('code', '=', name.split(' ')[0]), ('name', operator, name)]\n            else:\n                name_domain = ['|', ('code', '=ilike', name.split(' ')[0] + '%'), ('name', operator, name)]\n            if operator in expression.NEGATIVE_TERM_OPERATORS:\n                name_domain = ['&', '!'] + name_domain[1:]\n            domain = expression.AND([name_domain, domain])\n        return self._search(domain, limit=limit, order=order)\n\n    @api.onchange('account_type')\n    def _onchange_account_type(self):\n        if self.internal_group == 'off_balance':\n            self.tax_ids = False\n\n    def _split_code_name(self, code_name):\n        # We only want to split the name on the first word if there is a digit in it\n        code, name = ACCOUNT_REGEX.match(code_name or '').groups()\n        return code, name.strip()\n\n    @api.onchange('name')\n    def _onchange_name(self):\n        code, name = self._split_code_name(self.name)\n        if code and not self.code:\n            self.name = name\n            self.code = code\n\n    @api.depends('code')\n    def _compute_display_name(self):\n        for account in self:\n            account.display_name = f\\\"{account.code} {account.name}\\\"\n\n    @api.returns('self', lambda value: value.id)\n    def copy(self, default=None):\n        default = dict(default or {})\n        if default.get('code', False):\n            return super(AccountAccount, self).copy(default)\n        try:\n            default['code'] = (str(int(self.code) + 10) or '').zfill(len(self.code))\n            default.setdefault('name', _(\\\"%s (copy)\\\", self.name or ''))\n            while self.env['account.account'].search([\n                *self.env['account.account']._check_company_domain(default.get('company_id', False) or self.company_id),\n                ('code', '=', default['code']),\n            ], limit=1):\n                default['code'] = (str(int(default['code']) + 10) or '')\n                default['name'] = _(\\\"%s (copy)\\\", self.name or '')\n        except ValueError:\n            default['code'] = _(\\\"%s.copy\\\", self.code or '')\n            default['name'] = self.name\n        return super(AccountAccount, self).copy(default)\n\n\n\n", "CodeBleu_score": 29.598566905469458}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\tsale_types = self.env['account.move'].get_sale_types(include_receipts=True)\n\n    query = self.env['account.move.line']._search([\n        ('parent_state', '=', 'posted'),\n        ('move_id.move_type', 'in', sale_types),\n    ])\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(account_id) for account_id in self.ids],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n\n    query_string, query_param = query.select(\n        r\"\"\"DISTINCT move_id, (regexp_matches(jsonb_object_keys(account_move_line.analytic_distribution), '\\d+', 'g'))[1]::int as account_id\"\"\"\n    )\n    query_string = f\"\"\"\n        SELECT account_id, count(move_id) FROM\n        ({query_string}) distribution\n        GROUP BY account_id\n    \"\"\"\n\n    self._cr.execute(query_string, query_param)\n    data = {res['account_id']: res['count'] for res in self._cr.dictfetchall()}\n    for account in self:\n        account.invoice_count = data.get(account.id, 0)\n\n", "CodeBleu_score": 37.749926432781514}, {"code": "def action_view_invoice(self)\n\tsale_types = self.env['account.move'].get_sale_types(include_receipts=True)\n\n    query = self.env['account.move.line']._search([\n        ('parent_state', '=', 'posted'),\n        ('move_id.move_type', 'in', sale_types),\n    ])\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(account_id) for account_id in self.ids],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n\n    query_string, query_param = query.select(\n        r\"\"\"DISTINCT move_id, (regexp_matches(jsonb_object_keys(account_move_line.analytic_distribution), '\\d+', 'g'))[1]::int as account_id\"\"\"\n    )\n    query_string = f\"\"\"\n        SELECT account_id, count(move_id) FROM\n        ({query_string}) distribution\n        GROUP BY account_id\n    \"\"\"\n\n    self._cr.execute(query_string, query_param)\n    data = {res['account_id']: res['count'] for res in self._cr.dictfetchall()}\n    for account in self:\n        account.invoice_count = data.get(account.id, 0)\n\n", "CodeBleu_score": 37.749926432781514}, {"code": "def action_view_invoice(self)\n\tsale_types = self.env['account.move'].get_sale_types(include_receipts=True)\n\n    query = self.env['account.move.line']._search([\n        ('parent_state', '=', 'posted'),\n        ('move_id.move_type', 'in', sale_types),\n    ])\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(account_id) for account_id in self.ids],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n\n    query_string, query_param = query.select(\n        r\"\"\"DISTINCT move_id, (regexp_matches(jsonb_object_keys(account_move_line.analytic_distribution), '\\d+', 'g'))[1]::int as account_id\"\"\"\n    )\n    query_string = f\"\"\"\n        SELECT account_id, count(move_id) FROM\n        ({query_string}) distribution\n        GROUP BY account_id\n    \"\"\"\n\n    self._cr.execute(query_string, query_param)\n    data = {res['account_id']: res['count'] for res in self._cr.dictfetchall()}\n\n    return {\n        'name': _('Invoices'),\n        'view_mode': 'tree,form',\n        'domain': [('id', 'in', [move_id for move_id, _ in data.items()])],\n        'res_model': 'account.move',\n        'type': 'ir.actions.act_window',\n        'context': {\n            'default_type': 'out_invoice',\n            'default_analytic_account_id': self.id,\n            'default_journal_id': self.env.context.get('default_journal_id'),\n            'default_invoice_date': self.env.context.get('default_invoice_date'),\n            'default_invoice_payment_term_id': self.env.context.get('default_invoice_payment_term_id'),\n            'default", "CodeBleu_score": 37.13318983793588}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\tself.ensure_one()\n    query = self.env['account.move.line']._search([('move_id.move_type', 'in', self.env['account.move'].get_purchase_types())])\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(self.id)],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n    query_string, query_param = query.select('DISTINCT account_move_line.move_id')\n    self._cr.execute(query_string, query_param)\n    move_ids = [line.get('move_id') for line in self._cr.dictfetchall()]\n    result = {\n        \"type\": \"ir.actions.act_window\",\n        \"res_model\": \"account.move\",\n        \"domain\": [('id', 'in', move_ids)],\n        \"context\": {\"create\": False, 'default_move_type': 'in_invoice'},\n        \"name\": _(\"Vendor Bills\"),\n        'view_mode': 'tree,form',\n    }\n    return result\n\n", "CodeBleu_score": 81.16392973103454}, {"code": "def action_view_vendor_bill(self)\n\tself.ensure_one()\n    query = self.env['account.move.line']._search([('move_id.move_type', 'in', self.env['account.move'].get_purchase_types())])\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(self.id)],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n    query_string, query_param = query.select(\"DISTINCT account_move_line.move_id\")\n    self._cr.execute(query_string, query_param)\n    move_ids = [line.get(\"move_id\") for line in self._cr.dictfetchall()]\n    result = {\n        \"type\": \"ir.actions.act_window\",\n        \"res_model\": \"account.move\",\n        \"domain\": [(\"id\", \"in\", move_ids)],\n        \"context\": {\"create\": False, \"default_move_type\": \"in_invoice\"},\n        \"name\": _(\"Vendor Bills\"),\n        \"view_mode\": \"tree,form\",\n    }\n    return result", "CodeBleu_score": 71.51352068878246}, {"code": "def action_view_vendor_bill(self)\n\tself.ensure_one()\n    query = self.env['account.move.line']._search([('move_id.move_type', 'in', self.env['account.move'].get_purchase_types())])\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(self.id)],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n    query_string, query_param = query.select('DISTINCT account_move_line.move_id')\n    self._cr.execute(query_string, query_param)\n    move_ids = [line.get('move_id') for line in self._cr.dictfetchall()]\n    result = {\n        \"type\": \"ir.actions.act_window\",\n        \"res_model\": \"account.move\",\n        \"domain\": [('id', 'in', move_ids)],\n        \"context\": {\"create\": False, 'default_move_type': 'in_invoice'},\n        \"name\": _(\"Vendor Bills\"),\n        'view_mode': 'tree,form',\n    }\n    return result\n\n\n", "CodeBleu_score": 81.16392973103454}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\tn                description = _(\\\"The running balance (%s) doesn't match the specified ending balance.\\\", formatLang(self.env, stmt.balance_end, currency_obj=stmt.currency_id))\n            stmt.problem_description = description\n\n    def _search_is_valid(self, operator, value):\n        if operator not in ('=', '!=', '<>'):\n            raise UserError(_('Operation not supported'))\n        invalid_ids = self._get_invalid_statement_ids(all_statements=True)\n        if operator in ('!=', '<>') and value or operator == '=' and not value:\n            return [('id', 'in', invalid_ids)]\n        return [('id', 'not in', invalid_ids)]\n\n    # -------------------------------------------------------------------------\n    # BUSINESS METHODS\n    # -------------------------------------------------------------------------\n    def _get_statement_validity(self):\n        \\\"\\\"\\\" Compares the balance_start to the previous statements balance_end_real \\\"\\\"\\\"\n        self.ensure_one()\n        previous = self.env['account.bank.statement'].search(\n            [\n                ('first_line_index', '<', self.first_line_index),\n                ('journal_id', '=', self.journal_id.id),\n            ],\n            limit=1,\n            order='first_line_index DESC',\n        )\n        return not previous or self.currency_id.compare_amounts(self.balance_start, previous.balance_end_real) == 0\n\n    def _get_invalid_statement_ids(self, all_statements=None):\n        \\\"\\\"\\\" Returns the statements that are invalid for _compute and _search methods.\\\"\\\"\\\"\n\n        self.env['account.bank.statement.line'].flush_model(['statement_id', 'internal_index'])\n        self.env['account.bank.statement'].flush_model(['balance_start', 'balance_end_real', 'first_line_index'])\n\n        self.env.cr.execute(f\\\"\\\"\\\"\n            SELECT st.id\n              FROM account_bank_statement st\n         LEFT JOIN res_company co ON st.company_id = co.id\n         LEFT JOIN account_journal j ON st.journal_id = j.id\n         LEFT JOIN res_currency currency ON COALESCE(j.currency_id, co.currency_id) = currency.id,\n                   LATERAL (\n                       SELECT balance_end_real\n                         FROM account_bank_statement st_lookup\n                        WHERE st_lookup.first_line_index < st.first_line_index\n                          AND st_lookup.journal_id = st.journal_id\n                     ORDER BY st_lookup.first_line_index desc\n                        LIMIT 1\n                   ) prev\n             WHERE ROUND(prev.balance_end_real, currency.decimal_places) != ROUND(st.balance_start, currency.decimal_places)\n               {\\\"\\\" if all_statements else \\\"AND st.id IN %(ids)s\\\"}\n        \\\"\\\"\\\", {\n            'ids': tuple(self.ids)\n        })\n        res = self.env.cr.fetchall()\n        return [r[0] for r in res]\n\n    # -------------------------------------------------------------------------\n    # LOW-LEVEL METHODS\n    # -------------------------------------------------------------------------\n\n    @api.model\n    def default_get(self, fields_list):\n        # EXTENDS base\n        defaults = super().default_get(fields_list)\n\n        if 'line_ids' not in fields_list:\n            return defaults\n\n        active_ids = self._context.get('active_ids', [])\n        context_split_line_id = self._context.get('split_line_id')\n        context_st_line_id = self._context.get('st_line_id')\n        lines = None\n        # creating statements with split button\n        if context_split_line_id:\n            current_st_line = self.env['account.bank.statement.line'].browse(context_split_line_id)\n            line_before = self.env['account.bank.statement.line'].search(\n                domain=[\n                    ('internal_index', '<', current_st_line.internal_index),\n                    ('journal_id', '=', current_st_line.journal_id.id),\n                    ('statement_id', '!=', current_st_line.statement_id.id),\n                    ('statement_id', '!=', False),\n                ],\n                order='internal_index desc',\n                limit=1,\n            )\n            lines = self.env['account.bank.statement.line'].search(\n                domain=[\n                    ('internal_index', '<=', current_st_line.internal_index),\n                    ('internal_index', '>', line_before.internal_index or ''),\n                    ('journal_id', '=', current_st_line.journal_id.id),\n                ],\n                order='internal_index desc',\n            )\n        # single line edit\n        elif context_st_line_id and len(active_ids) <= 1:\n            lines = self.env['account.bank.statement.line'].browse(context_st_line_id)\n        # multi edit\n        elif context_st_line_id and len(active_ids) > 1:\n            lines = self.env['account.bank.statement.line'].browse(active_ids).sorted()\n            if len(lines.journal_id) > 1:\n                raise UserError(_(\\\"A statement should only contain lines from the same journal.\\\"))\n            # Check that the selected lines are contiguous\n            indexes = lines.mapped('internal_index')\n            count_lines_between = self.env['account.bank.statement.line'].search_count([\n                ('internal_index', '>=', min(indexes)),\n                ('internal_index', '<=', max(indexes)),\n                ('journal_id', '=', lines.journal_id.id),\n            ])\n            if len(lines) != count_lines_between:\n                raise UserError(_(\\\"Unable to create a statement due to missing transactions. You may want to reorder the transactions before proceeding.\\\"))\n\n        if lines:\n            defaults['line_ids'] = [Command.set(lines.ids)]\n\n        return defaults\n\n    @contextmanager\n    def _check_attachments(self, container, values_list):\n        attachments_to_fix_list = []\n        for values in values_list:\n            attachment_ids = set()\n            for orm_command in values.get('attachment_ids', []):\n                if orm_command[0] == Command.LINK:\n                    attachment_ids.add(orm_command[1])\n                elif orm_command[0] == Command.SET:\n                    for attachment_id in orm_command[2]:\n                        attachment_ids.add(attachment_id)\n\n            attachments = self.env['ir.attachment'].browse(list(attachment_ids))\n            attachments_to_fix_list.append(attachments)\n\n        yield\n\n        for stmt, attachments in zip(container['records'], attachments_to_fix_list):\n            attachments.write({'res_id': stmt.id, 'res_model': stmt._name})\n\n    @api.model_create_multi\n    def create(self, vals_list):\n        container = {'records': self.env['account.bank.statement']}\n        with self._check_attachments(container, vals_list):\n            container['records'] = stmts = super().create(vals_list)\n        return stmts\n\n\n\n", "CodeBleu_score": 34.280810370813256}, {"code": "def write(self, values)\n\tn                description = _(\\\"The running balance (%s) doesn't match the specified ending balance.\\\", formatLang(self.env, stmt.balance_end, currency_obj=stmt.currency_id))\n            stmt.problem_description = description\n\n    def _search_is_valid(self, operator, value):\n        if operator not in ('=', '!=', '<>'):\n            raise UserError(_('Operation not supported'))\n        invalid_ids = self._get_invalid_statement_ids(all_statements=True)\n        if operator in ('!=', '<>') and value or operator == '=' and not value:\n            return [('id', 'in', invalid_ids)]\n        return [('id', 'not in', invalid_ids)]\n\n    # -------------------------------------------------------------------------\n    # BUSINESS METHODS\n    # -------------------------------------------------------------------------\n    def _get_statement_validity(self):\n        \\\"\\\"\\\" Compares the balance_start to the previous statements balance_end_real \\\"\\\"\\\"\n        self.ensure_one()\n        previous = self.env['account.bank.statement'].search(\n            [\n                ('first_line_index', '<', self.first_line_index),\n                ('journal_id', '=', self.journal_id.id),\n            ],\n            limit=1,\n            order='first_line_index DESC',\n        )\n        return not previous or self.currency_id.compare_amounts(self.balance_start, previous.balance_end_real) == 0\n\n    def _get_invalid_statement_ids(self, all_statements=None):\n        \\\"\\\"\\\" Returns the statements that are invalid for _compute and _search methods.\\\"\\\"\\\"\n\n        self.env['account.bank.statement.line'].flush_model(['statement_id', 'internal_index'])\n        self.env['account.bank.statement'].flush_model(['balance_start', 'balance_end_real', 'first_line_index'])\n\n        self.env.cr.execute(f\\\"\\\"\\\"\n            SELECT st.id\n              FROM account_bank_statement st\n         LEFT JOIN res_company co ON st.company_id = co.id\n         LEFT JOIN account_journal j ON st.journal_id = j.id\n         LEFT JOIN res_currency currency ON COALESCE(j.currency_id, co.currency_id) = currency.id,\n                   LATERAL (\n                       SELECT balance_end_real\n                         FROM account_bank_statement st_lookup\n                        WHERE st_lookup.first_line_index < st.first_line_index\n                          AND st_lookup.journal_id = st.journal_id\n                     ORDER BY st_lookup.first_line_index desc\n                        LIMIT 1\n                   ) prev\n             WHERE ROUND(prev.balance_end_real, currency.decimal_places) != ROUND(st.balance_start, currency.decimal_places)\n               {\\\"\\\" if all_statements else \\\"AND st.id IN %(ids)s\\\"}\n        \\\"\\\"\\\", {\n            'ids': tuple(self.ids)\n        })\n        res = self.env.cr.fetchall()\n        return [r[0] for r in res]\n\n    # -------------------------------------------------------------------------\n    # LOW-LEVEL METHODS\n    # -------------------------------------------------------------------------\n\n    @api.model\n    def default_get(self, fields_list):\n        # EXTENDS base\n        defaults = super().default_get(fields_list)\n\n        if 'line_ids' not in fields_list:\n            return defaults\n\n        active_ids = self._context.get('active_ids', [])\n        context_split_line_id = self._context.get('split_line_id')\n        context_st_line_id = self._context.get('st_line_id')\n        lines = None\n        # creating statements with split button\n        if context_split_line_id:\n            current_st_line = self.env['account.bank.statement.line'].browse(context_split_line_id)\n            line_before = self.env['account.bank.statement.line'].search(\n                domain=[\n                    ('internal_index', '<', current_st_line.internal_index),\n                    ('journal_id', '=', current_st_line.journal_id.id),\n                    ('statement_id', '!=', current_st_line.statement_id.id),\n                    ('statement_id', '!=', False),\n                ],\n                order='internal_index desc',\n                limit=1,\n            )\n            lines = self.env['account.bank.statement.line'].search(\n                domain=[\n                    ('internal_index', '<=', current_st_line.internal_index),\n                    ('internal_index', '>', line_before.internal_index or ''),\n                    ('journal_id', '=', current_st_line.journal_id.id),\n                ],\n                order='internal_index desc',\n            )\n        # single line edit\n        elif context_st_line_id and len(active_ids) <= 1:\n            lines = self.env['account.bank.statement.line'].browse(context_st_line_id)\n        # multi edit\n        elif context_st_line_id and len(active_ids) > 1:\n            lines = self.env['account.bank.statement.line'].browse(active_ids).sorted()\n            if len(lines.journal_id) > 1:\n                raise UserError(_(\\\"A statement should only contain lines from the same journal.\\\"))\n            # Check that the selected lines are contiguous\n            indexes = lines.mapped('internal_index')\n            count_lines_between = self.env['account.bank.statement.line'].search_count([\n                ('internal_index', '>=', min(indexes)),\n                ('internal_index', '<=', max(indexes)),\n                ('journal_id', '=', lines.journal_id.id),\n            ])\n            if len(lines) != count_lines_between:\n                raise UserError(_(\\\"Unable to create a statement due to missing transactions. You may want to reorder the transactions before proceeding.\\\"))\n\n        if lines:\n            defaults['line_ids'] = [Command.set(lines.ids)]\n\n        return defaults\n\n    @contextmanager\n    def _check_attachments(self, container, values_list):\n        attachments_to_fix_list = []\n        for values in values_list:\n            attachment_ids = set()\n            for orm_command in values.get('attachment_ids', []):\n                if orm_command[0] == Command.LINK:\n                    attachment_ids.add(orm_command[1])\n                elif orm_command[0] == Command.SET:\n                    for attachment_id in orm_command[2]:\n                        attachment_ids.add(attachment_id)\n\n            attachments = self.env['ir.attachment'].browse(list(attachment_ids))\n            attachments_to_fix_list.append(attachments)\n\n        yield\n\n        for stmt, attachments in zip(container['records'], attachments_to_fix_list):\n            attachments.write({'res_id': stmt.id, 'res_model': stmt._name})\n\n    @api.model_create_multi\n    def create(self, vals_list):\n        container = {'records': self.env['account.bank.statement']}\n        with self._check_attachments(container, vals_list):\n            container['records'] = stmts = super().create(vals_list)\n        return stmts\n\n\n\n", "CodeBleu_score": 34.280810370813256}, {"code": "def write(self, values)\n\tn                description = _(\\\"The running balance (%s) doesn't match the specified ending balance.\\\", formatLang(self.env, stmt.balance_end, currency_obj=stmt.currency_id))\n            stmt.problem_description = description\n\n    def _search_is_valid(self, operator, value):\n        if operator not in ('=', '!=', '<>'):\n            raise UserError(_('Operation not supported'))\n        invalid_ids = self._get_invalid_statement_ids(all_statements=True)\n        if operator in ('!=', '<>') and value or operator == '=' and not value:\n            return [('id', 'in', invalid_ids)]\n        return [('id', 'not in', invalid_ids)]\n\n    # -------------------------------------------------------------------------\n    # BUSINESS METHODS\n    # -------------------------------------------------------------------------\n    def _get_statement_validity(self):\n        \\\"\\\"\\\" Compares the balance_start to the previous statements balance_end_real \\\"\\\"\\\"\n        self.ensure_one()\n        previous = self.env['account.bank.statement'].search(\n            [\n                ('first_line_index', '<', self.first_line_index),\n                ('journal_id', '=', self.journal_id.id),\n            ],\n            limit=1,\n            order='first_line_index DESC',\n        )\n        return not previous or self.currency_id.compare_amounts(self.balance_start, previous.balance_end_real) == 0\n\n    def _get_invalid_statement_ids(self, all_statements=None):\n        \\\"\\\"\\\" Returns the statements that are invalid for _compute and _search methods.\\\"\\\"\\\"\n\n        self.env['account.bank.statement.line'].flush_model(['statement_id', 'internal_index'])\n        self.env['account.bank.statement'].flush_model(['balance_start', 'balance_end_real', 'first_line_index'])\n\n        self.env.cr.execute(f\\\"\\\"\\\"\n            SELECT st.id\n              FROM account_bank_statement st\n         LEFT JOIN res_company co ON st.company_id = co.id\n         LEFT JOIN account_journal j ON st.journal_id = j.id\n         LEFT JOIN res_currency currency ON COALESCE(j.currency_id, co.currency_id) = currency.id,\n                   LATERAL (\n                       SELECT balance_end_real\n                         FROM account_bank_statement st_lookup\n                        WHERE st_lookup.first_line_index < st.first_line_index\n                          AND st_lookup.journal_id = st.journal_id\n                     ORDER BY st_lookup.first_line_index desc\n                        LIMIT 1\n                   ) prev\n             WHERE ROUND(prev.balance_end_real, currency.decimal_places) != ROUND(st.balance_start, currency.decimal_places)\n               {\\\"\\\" if all_statements else \\\"AND st.id IN %(ids)s\\\"}\n        \\\"\\\"\\\", {\n            'ids': tuple(self.ids)\n        })\n        res = self.env.cr.fetchall()\n        return [r[0] for r in res]\n\n    # -------------------------------------------------------------------------\n    # LOW-LEVEL METHODS\n    # -------------------------------------------------------------------------\n\n    @api.model\n    def default_get(self, fields_list):\n        # EXTENDS base\n        defaults = super().default_get(fields_list)\n\n        if 'line_ids' not in fields_list:\n            return defaults\n\n        active_ids = self._context.get('active_ids', [])\n        context_split_line_id = self._context.get('split_line_id')\n        context_st_line_id = self._context.get('st_line_id')\n        lines = None\n        # creating statements with split button\n        if context_split_line_id:\n            current_st_line = self.env['account.bank.statement.line'].browse(context_split_line_id)\n            line_before = self.env['account.bank.statement.line'].search(\n                domain=[\n                    ('internal_index', '<', current_st_line.internal_index),\n                    ('journal_id', '=', current_st_line.journal_id.id),\n                    ('statement_id', '!=', current_st_line.statement_id.id),\n                    ('statement_id', '!=', False),\n                ],\n                order='internal_index desc',\n                limit=1,\n            )\n            lines = self.env['account.bank.statement.line'].search(\n                domain=[\n                    ('internal_index', '<=', current_st_line.internal_index),\n                    ('internal_index', '>', line_before.internal_index or ''),\n                    ('journal_id', '=', current_st_line.journal_id.id),\n                ],\n                order='internal_index desc',\n            )\n        # single line edit\n        elif context_st_line_id and len(active_ids) <= 1:\n            lines = self.env['account.bank.statement.line'].browse(context_st_line_id)\n        # multi edit\n        elif context_st_line_id and len(active_ids) > 1:\n            lines = self.env['account.bank.statement.line'].browse(active_ids).sorted()\n            if len(lines.journal_id) > 1:\n                raise UserError(_(\\\"A statement should only contain lines from the same journal.\\\"))\n            # Check that the selected lines are contiguous\n            indexes = lines.mapped('internal_index')\n            count_lines_between = self.env['account.bank.statement.line'].search_count([\n                ('internal_index', '>=', min(indexes)),\n                ('internal_index', '<=', max(indexes)),\n                ('journal_id', '=', lines.journal_id.id),\n            ])\n            if len(lines) != count_lines_between:\n                raise UserError(_(\\\"Unable to create a statement due to missing transactions. You may want to reorder the transactions before proceeding.\\\"))\n\n        if lines:\n            defaults['line_ids'] = [Command.set(lines.ids)]\n\n        return defaults\n\n    @contextmanager\n    def _check_attachments(self, container, values_list):\n        attachments_to_fix_list = []\n        for values in values_list:\n            attachment_ids = set()\n            for orm_command in values.get('attachment_ids', []):\n                if orm_command[0] == Command.LINK:\n                    attachment_ids.add(orm_command[1])\n                elif orm_command[0] == Command.SET:\n                    for attachment_id in orm_command[2]:\n                        attachment_ids.add(attachment_id)\n\n            attachments = self.env['ir.attachment'].browse(list(attachment_ids))\n            attachments_to_fix_list.append(attachments)\n\n        yield\n\n        for stmt, attachments in zip(container['records'], attachments_to_fix_list):\n            attachments.write({'res_id': stmt.id, 'res_model': stmt._name})\n\n    @api.model_create_multi\n    def create(self, vals_list):\n        container = {'records': self.env['account.bank.statement']}\n        with self._check_attachments(container, vals_list):\n            container['records'] = stmts = super().create(vals_list)\n        return stmts\n\n\n\n", "CodeBleu_score": 34.280810370813256}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\tzero(st_line.amount_residual)\n            elif st_line.currency_id.is_zero(st_line.amount):\n                st_line.is_reconciled = True\n            else:\n                # The journal entry seems reconciled.\n                st_line.is_reconciled = True\n\n\n    # -------------------------------------------------------------------------\n    # CONSTRAINT METHODS\n    # -------------------------------------------------------------------------\n\n    @api.constrains('amount', 'amount_currency', 'currency_id', 'foreign_currency_id', 'journal_id')\n    def _check_amounts_currencies(self):\n        \\\"\\\"\\\" Ensure the consistency the specified amounts and the currencies. \\\"\\\"\\\"\n\n        for st_line in self:\n            if st_line.foreign_currency_id == st_line.currency_id:\n                raise ValidationError(_(\\\"The foreign currency must be different than the journal one: %s\\\",\n                                        st_line.currency_id.name))\n            if not st_line.foreign_currency_id and st_line.amount_currency:\n                raise ValidationError(_(\\\"You can't provide an amount in foreign currency without \\\"\n                                        \\\"specifying a foreign currency.\\\"))\n            if not st_line.amount_currency and st_line.foreign_currency_id:\n                raise ValidationError(_(\\\"You can't provide a foreign currency without specifying an amount in \\\"\n                                        \\\"'Amount in Currency' field.\\\"))\n\n    # -------------------------------------------------------------------------\n    # LOW-LEVEL METHODS\n    # -------------------------------------------------------------------------\n\n    def new(self, values=None, origin=None, ref=None):\n        st_line = super().new(values, origin, ref)\n        if not st_line.journal_id:  # might not be computed because declared by inheritance\n            st_line.move_id._compute_journal_id()\n        return st_line\n\n    @api.model_create_multi\n    def create(self, vals_list):\n        # OVERRIDE\n        counterpart_account_ids = []\n\n        for vals in vals_list:\n            if 'statement_id' in vals and 'journal_id' not in vals:\n                statement = self.env['account.bank.statement'].browse(vals['statement_id'])\n                # Ensure the journal is the same as the statement one.\n                # journal_id is a required field in the view, so it should be always available if the user\n                # is creating the record, however, if a sync/import modules tries to add a line to an existing\n                # statement they can omit the journal field because it can be obtained from the statement\n                if statement.journal_id:\n                    vals['journal_id'] = statement.journal_id.id\n\n            # Avoid having the same foreign_currency_id as currency_id.\n            if vals.get('journal_id') and vals.get('foreign_currency_id'):\n                journal = self.env['account.journal'].browse(vals['journal_id'])\n                journal_currency = journal.currency_id or journal.company_id.currency_id\n                if vals['foreign_currency_id'] == journal_currency.id:\n                    vals['foreign_currency_id'] = None\n                    vals['amount_currency'] = 0.0\n\n            # Force the move_type to avoid inconsistency with residual 'default_move_type' inside the context.\n            vals['move_type'] = 'entry'\n\n            # Hack to force different account instead of the suspense account.\n            counterpart_account_ids.append(vals.pop('counterpart_account_id', None))\n\n            #Set the amount to 0 if it's not specified.\n            if 'amount' not in vals:\n                vals['amount'] = 0\n\n        st_lines = super().create(vals_list)\n\n        for i, st_line in enumerate(st_lines):\n            counterpart_account_id = counterpart_account_ids[i]\n\n            to_write = {'statement_line_id': st_line.id, 'narration': st_line.narration}\n            if 'line_ids' not in vals_list[i]:\n                to_write['line_ids'] = [(0, 0, line_vals) for line_vals in st_line._prepare_move_line_default_vals(\n                    counterpart_account_id=counterpart_account_id)]\n\n            st_line.move_id.write(to_write)\n\n            # Otherwise field narration will be recomputed silently (at next flush) when writing on partner_id\n            self.env.remove_to_compute(st_line.move_id._fields['narration'], st_line.move_id)\n\n        # No need for the user to manage their status (from 'Draft' to 'Posted')\n        st_lines.move_id.action_post()\n        return st_lines\n\n    def write(self, vals):\n        # OVERRIDE\n\n        res = super().write(vals)\n        self._synchronize_to_moves(set(vals.keys()))\n        return res\n\n    def unlink(self):\n        # OVERRIDE to unlink the inherited account.move (move_id field) as well.\n        moves = self.with_context(force_delete=True).mapped('move_id')\n        res = super().unlink()\n        moves.unlink()\n        return res\n\n    @api.model\n    def read_group(self, domain, fields, groupby, offset=0, limit=None, orderby=False, lazy=True):\n        # Add latest running_balance in the read_group\n        result = super(AccountBankStatementLine, self).read_group(\n            domain, fields, groupby, offset=offset,\n            limit=limit, orderby=orderby, lazy=lazy)\n        show_running_balance = False\n        # We loop over the content of groupby because the groupby date is in the form of \\\"date:granularity\\\"\n        for el in groupby:\n            if (el == 'statement_id' or el == 'journal_id' or el.startswith('date')) and 'running_balance' in fields:\n                show_running_balance = True\n                break\n        if show_running_balance:\n            for group_line in result:\n                group_line['running_balance'] = self.search(group_line.get('__domain'), limit=1).running_balance or 0.0\n        return result\n\n    # -------------------------------------------------------------------------\n    # ACTION METHODS\n    # -------------------------------------------------------------------------\n\n    def action_undo_reconciliation(self):\n        \\\"\\\"\\\" Undo the reconciliation made on the statement line and reset their journal items\n        to their original states.\n        \\\"\\\"\\\"\n        self.line_ids.remove_move_reconcile()\n        self.payment_ids.unlink()\n\n        for st_line in self:\n            st_line.with_context(force_delete=True).write({\n                'to_check': False,\n                'line_ids': [Command.clear()] + [\n                    Command.create(line_vals) for line_vals in st_line._prepare_move_line_default_vals()],\n            })\n\n    # -------------------------------------------------------------------------\n    # HELPERS\n    # -------------------------------------------------------------------------\n\n\n\n", "CodeBleu_score": 24.433763849051683}, {"code": "def _find_or_create_bank_account(self)\n\tzero(st_line.amount_residual)\n            elif st_line.currency_id.is_zero(st_line.amount):\n                st_line.is_reconciled = True\n            else:\n                # The journal entry seems reconciled.\n                st_line.is_reconciled = True\n\n\n    # -------------------------------------------------------------------------\n    # CONSTRAINT METHODS\n    # -------------------------------------------------------------------------\n\n    @api.constrains('amount', 'amount_currency', 'currency_id', 'foreign_currency_id', 'journal_id')\n    def _check_amounts_currencies(self):\n        \\\"\\\"\\\" Ensure the consistency the specified amounts and the currencies. \\\"\\\"\\\"\n\n        for st_line in self:\n            if st_line.foreign_currency_id == st_line.currency_id:\n                raise ValidationError(_(\\\"The foreign currency must be different than the journal one: %s\\\",\n                                        st_line.currency_id.name))\n            if not st_line.foreign_currency_id and st_line.amount_currency:\n                raise ValidationError(_(\\\"You can't provide an amount in foreign currency without \\\"\n                                        \\\"specifying a foreign currency.\\\"))\n            if not st_line.amount_currency and st_line.foreign_currency_id:\n                raise ValidationError(_(\\\"You can't provide a foreign currency without specifying an amount in \\\"\n                                        \\\"'Amount in Currency' field.\\\"))\n\n    # -------------------------------------------------------------------------\n    # LOW-LEVEL METHODS\n    # -------------------------------------------------------------------------\n\n    def new(self, values=None, origin=None, ref=None):\n        st_line = super().new(values, origin, ref)\n        if not st_line.journal_id:  # might not be computed because declared by inheritance\n            st_line.move_id._compute_journal_id()\n        return st_line\n\n    @api.model_create_multi\n    def create(self, vals_list):\n        # OVERRIDE\n        counterpart_account_ids = []\n\n        for vals in vals_list:\n            if 'statement_id' in vals and 'journal_id' not in vals:\n                statement = self.env['account.bank.statement'].browse(vals['statement_id'])\n                # Ensure the journal is the same as the statement one.\n                # journal_id is a required field in the view, so it should be always available if the user\n                # is creating the record, however, if a sync/import modules tries to add a line to an existing\n                # statement they can omit the journal field because it can be obtained from the statement\n                if statement.journal_id:\n                    vals['journal_id'] = statement.journal_id.id\n\n            # Avoid having the same foreign_currency_id as currency_id.\n            if vals.get('journal_id') and vals.get('foreign_currency_id'):\n                journal = self.env['account.journal'].browse(vals['journal_id'])\n                journal_currency = journal.currency_id or journal.company_id.currency_id\n                if vals['foreign_currency_id'] == journal_currency.id:\n                    vals['foreign_currency_id'] = None\n                    vals['amount_currency'] = 0.0\n\n            # Force the move_type to avoid inconsistency with residual 'default_move_type' inside the context.\n            vals['move_type'] = 'entry'\n\n            # Hack to force different account instead of the suspense account.\n            counterpart_account_ids.append(vals.pop('counterpart_account_id', None))\n\n            #Set the amount to 0 if it's not specified.\n            if 'amount' not in vals:\n                vals['amount'] = 0\n\n        st_lines = super().create(vals_list)\n\n        for i, st_line in enumerate(st_lines):\n            counterpart_account_id = counterpart_account_ids[i]\n\n            to_write = {'statement_line_id': st_line.id, 'narration': st_line.narration}\n            if 'line_ids' not in vals_list[i]:\n                to_write['line_ids'] = [(0, 0, line_vals) for line_vals in st_line._prepare_move_line_default_vals(\n                    counterpart_account_id=counterpart_account_id)]\n\n            st_line.move_id.write(to_write)\n\n            # Otherwise field narration will be recomputed silently (at next flush) when writing on partner_id\n            self.env.remove_to_compute(st_line.move_id._fields['narration'], st_line.move_id)\n\n        # No need for the user to manage their status (from 'Draft' to 'Posted')\n        st_lines.move_id.action_post()\n        return st_lines\n\n    def write(self, vals):\n        # OVERRIDE\n\n        res = super().write(vals)\n        self._synchronize_to_moves(set(vals.keys()))\n        return res\n\n    def unlink(self):\n        # OVERRIDE to unlink the inherited account.move (move_id field) as well.\n        moves = self.with_context(force_delete=True).mapped('move_id')\n        res = super().unlink()\n        moves.unlink()\n        return res\n\n    @api.model\n    def read_group(self, domain, fields, groupby, offset=0, limit=None, orderby=False, lazy=True):\n        # Add latest running_balance in the read_group\n        result = super(AccountBankStatementLine, self).read_group(\n            domain, fields, groupby, offset=offset,\n            limit=limit, orderby=orderby, lazy=lazy)\n        show_running_balance = False\n        # We loop over the content of groupby because the groupby date is in the form of \\\"date:granularity\\\"\n        for el in groupby:\n            if (el == 'statement_id' or el == 'journal_id' or el.startswith('date')) and 'running_balance' in fields:\n                show_running_balance = True\n                break\n        if show_running_balance:\n            for group_line in result:\n                group_line['running_balance'] = self.search(group_line.get('__domain'), limit=1).running_balance or 0.0\n        return result\n\n    # -------------------------------------------------------------------------\n    # ACTION METHODS\n    # -------------------------------------------------------------------------\n\n    def action_undo_reconciliation(self):\n        \\\"\\\"\\\" Undo the reconciliation made on the statement line and reset their journal items\n        to their original states.\n        \\\"\\\"\\\"\n        self.line_ids.remove_move_reconcile()\n        self.payment_ids.unlink()\n\n        for st_line in self:\n            st_line.with_context(force_delete=True).write({\n                'to_check': False,\n                'line_ids': [Command.clear()] + [\n                    Command.create(line_vals) for line_vals in st_line._prepare_move_line_default_vals()],\n            })\n\n    # -------------------------------------------------------------------------\n    # HELPERS\n    # -------------------------------------------------------------------------\n\n\n\n", "CodeBleu_score": 24.433763849051683}, {"code": "def _find_or_create_bank_account(self)\n\tzero(st_line.amount_residual)\n            elif st_line.currency_id.is_zero(st_line.amount):\n                st_line.is_reconciled = True\n            else:\n                # The journal entry seems reconciled.\n                st_line.is_reconciled = True\n\n\n    # -------------------------------------------------------------------------\n    # CONSTRAINT METHODS\n    # -------------------------------------------------------------------------\n\n    @api.constrains('amount', 'amount_currency', 'currency_id', 'foreign_currency_id', 'journal_id')\n    def _check_amounts_currencies(self):\n        \\\"\\\"\\\" Ensure the consistency the specified amounts and the currencies. \\\"\\\"\\\"\n\n        for st_line in self:\n            if st_line.foreign_currency_id == st_line.currency_id:\n                raise ValidationError(_(\\\"The foreign currency must be different than the journal one: %s\\\",\n                                        st_line.currency_id.name))\n            if not st_line.foreign_currency_id and st_line.amount_currency:\n                raise ValidationError(_(\\\"You can't provide an amount in foreign currency without \\\"\n                                        \\\"specifying a foreign currency.\\\"))\n            if not st_line.amount_currency and st_line.foreign_currency_id:\n                raise ValidationError(_(\\\"You can't provide a foreign currency without specifying an amount in \\\"\n                                        \\\"'Amount in Currency' field.\\\"))\n\n    # -------------------------------------------------------------------------\n    # LOW-LEVEL METHODS\n    # -------------------------------------------------------------------------\n\n    def new(self, values=None, origin=None, ref=None):\n        st_line = super().new(values, origin, ref)\n        if not st_line.journal_id:  # might not be computed because declared by inheritance\n            st_line.move_id._compute_journal_id()\n        return st_line\n\n    @api.model_create_multi\n    def create(self, vals_list):\n        # OVERRIDE\n        counterpart_account_ids = []\n\n        for vals in vals_list:\n            if 'statement_id' in vals and 'journal_id' not in vals:\n                statement = self.env['account.bank.statement'].browse(vals['statement_id'])\n                # Ensure the journal is the same as the statement one.\n                # journal_id is a required field in the view, so it should be always available if the user\n                # is creating the record, however, if a sync/import modules tries to add a line to an existing\n                # statement they can omit the journal field because it can be obtained from the statement\n                if statement.journal_id:\n                    vals['journal_id'] = statement.journal_id.id\n\n            # Avoid having the same foreign_currency_id as currency_id.\n            if vals.get('journal_id') and vals.get('foreign_currency_id'):\n                journal = self.env['account.journal'].browse(vals['journal_id'])\n                journal_currency = journal.currency_id or journal.company_id.currency_id\n                if vals['foreign_currency_id'] == journal_currency.id:\n                    vals['foreign_currency_id'] = None\n                    vals['amount_currency'] = 0.0\n\n            # Force the move_type to avoid inconsistency with residual 'default_move_type' inside the context.\n            vals['move_type'] = 'entry'\n\n            # Hack to force different account instead of the suspense account.\n            counterpart_account_ids.append(vals.pop('counterpart_account_id', None))\n\n            #Set the amount to 0 if it's not specified.\n            if 'amount' not in vals:\n                vals['amount'] = 0\n\n        st_lines = super().create(vals_list)\n\n        for i, st_line in enumerate(st_lines):\n            counterpart_account_id = counterpart_account_ids[i]\n\n            to_write = {'statement_line_id': st_line.id, 'narration': st_line.narration}\n            if 'line_ids' not in vals_list[i]:\n                to_write['line_ids'] = [(0, 0, line_vals) for line_vals in st_line._prepare_move_line_default_vals(\n                    counterpart_account_id=counterpart_account_id)]\n\n            st_line.move_id.write(to_write)\n\n            # Otherwise field narration will be recomputed silently (at next flush) when writing on partner_id\n            self.env.remove_to_compute(st_line.move_id._fields['narration'], st_line.move_id)\n\n        # No need for the user to manage their status (from 'Draft' to 'Posted')\n        st_lines.move_id.action_post()\n        return st_lines\n\n    def write(self, vals):\n        # OVERRIDE\n\n        res = super().write(vals)\n        self._synchronize_to_moves(set(vals.keys()))\n        return res\n\n    def unlink(self):\n        # OVERRIDE to unlink the inherited account.move (move_id field) as well.\n        moves = self.with_context(force_delete=True).mapped('move_id')\n        res = super().unlink()\n        moves.unlink()\n        return res\n\n    @api.model\n    def read_group(self, domain, fields, groupby, offset=0, limit=None, orderby=False, lazy=True):\n        # Add latest running_balance in the read_group\n        result = super(AccountBankStatementLine, self).read_group(\n            domain, fields, groupby, offset=offset,\n            limit=limit, orderby=orderby, lazy=lazy)\n        show_running_balance = False\n        # We loop over the content of groupby because the groupby date is in the form of \\\"date:granularity\\\"\n        for el in groupby:\n            if (el == 'statement_id' or el == 'journal_id' or el.startswith('date')) and 'running_balance' in fields:\n                show_running_balance = True\n                break\n        if show_running_balance:\n            for group_line in result:\n                group_line['running_balance'] = self.search(group_line.get('__domain'), limit=1).running_balance or 0.0\n        return result\n\n    # -------------------------------------------------------------------------\n    # ACTION METHODS\n    # -------------------------------------------------------------------------\n\n    def action_undo_reconciliation(self):\n        \\\"\\\"\\\" Undo the reconciliation made on the statement line and reset their journal items\n        to their original states.\n        \\\"\\\"\\\"\n        self.line_ids.remove_move_reconcile()\n        self.payment_ids.unlink()\n\n        for st_line in self:\n            st_line.with_context(force_delete=True).write({\n                'to_check': False,\n                'line_ids': [Command.clear()] + [\n                    Command.create(line_vals) for line_vals in st_line._prepare_move_line_default_vals()],\n            })\n\n    # -------------------------------------------------------------------------\n    # HELPERS\n    # -------------------------------------------------------------------------\n\n\n\n", "CodeBleu_score": 24.433763849051683}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t# OVERRIDE\n\n        res = super().write(vals)\n        self._synchronize_to_moves(set(vals.keys()))\n        return res\n\n    def unlink(self):\n        # OVERRIDE to unlink the inherited account.move (move_id field) as well.\n        moves = self.with_context(force_delete=True).mapped('move_id')\n        res = super().unlink()\n        moves.unlink()\n        return res\n\n    @api.model\n    def read_group(self, domain, fields, groupby, offset=0, limit=None, orderby=False, lazy=True):\n        # Add latest running_balance in the read_group\n        result = super(AccountBankStatementLine, self).read_group(\n            domain, fields, groupby, offset=offset,\n            limit=limit, orderby=orderby, lazy=lazy)\n        show_running_balance = False\n        # We loop over the content of groupby because the groupby date is in the form of \\\"date:granularity\\\"\n        for el in groupby:\n            if (el == 'statement_id' or el == 'journal_id' or el.startswith('date')) and 'running_balance' in fields:\n                show_running_balance = True\n                break\n        if show_running_balance:\n            for group_line in result:\n                group_line['running_balance'] = self.search(group_line.get('__domain'), limit=1).running_balance or 0.0\n        return result\n\n    # -------------------------------------------------------------------------\n    # ACTION METHODS\n    # -------------------------------------------------------------------------\n\n    def action_undo_reconciliation(self):\n        \\\"\\\"\\\" Undo the reconciliation made on the statement line and reset their journal items\n        to their original states.\n        \\\"\\\"\\\"\n        self.line_ids.remove_move_reconcile()\n        self.payment_ids.unlink()\n\n        for st_line in self:\n            st_line.with_context(force_delete=True).write({\n                'to_check': False,\n                'line_ids': [Command.clear()] + [\n                    Command.create(line_vals) for line_vals in st_line._prepare_move_line_default_vals()],\n            })\n\n    # -------------------------------------------------------------------------\n    # HELPERS\n    # -------------------------------------------------------------------------\n\n    def _find_or_create_bank_account(self):\n        self.ensure_one()\n        if str2bool(self.env['ir.config_parameter'].sudo().get_param(\\\"account.skip_create_bank_account_on_reconcile\\\")):\n            return self.env['res.partner.bank']\n\n        # There is a sql constraint on res.partner.bank ensuring an unique pair <partner, account number>.\n        # Since it's not dependent of the company, we need to search on others company too to avoid the creation\n        # of an extra res.partner.bank raising an error coming from this constraint.\n        # However, at the end, we need to filter out the results to not trigger the check_company when trying to\n        # assign a res.partner.bank owned by another company.\n        bank_account = self.env['res.partner.bank'].sudo().with_context(active_test=False).search([\n            ('acc_number', '=', self.account_number),\n            ('partner_id', '=', self.partner_id.id),\n        ])\n        if not bank_account:\n            bank_account = self.env['res.partner.bank'].create({\n                'acc_number': self.account_number,\n                'partner_id': self.partner_id.id,\n                'journal_id': None,\n            })\n        return bank_account.filtered(lambda x: x.company_id in (False, self.company_id))\n\n    def _get_default_amls_matching_domain(self):\n        self.ensure_one()\n        all_reconcilable_account_ids = self.env['account.account'].search([\n            (\\\"company_id\\\", \\\"child_of\\\", self.company_id.root_id.id),\n            ('reconcile', '=', True),\n        ]).ids\n        return [\n            # Base domain.\n            ('display_type', 'not in', ('line_section', 'line_note')),\n            ('parent_state', '=', 'posted'),\n            ('company_id', 'child_of', self.company_id.root_id.id),\n            # Reconciliation domain.\n            ('reconciled', '=', False),\n            # Domain to use the account_move_line__unreconciled_index\n            ('account_id', 'in', all_reconcilable_account_ids),\n            # Special domain for payments.\n            '|',\n            ('account_id.account_type', 'not in', ('asset_receivable', 'liability_payable')),\n            ('payment_id', '=', False),\n            # Special domain for statement lines.\n            ('statement_line_id', '!=', self.id),\n        ]\n\n    @api.model\n    def _get_default_journal(self):\n        journal_type = self.env.context.get('journal_type', 'bank')\n        return self.env['account.journal'].search([\n                *self.env['account.journal']._check_company_domain(self.env.company),\n                ('type', '=', journal_type),\n            ], limit=1)\n\n    @api.model\n    def _get_default_statement(self, journal_id=None, date=None):\n        statement = self.search(\n            domain=[\n                ('journal_id', '=', journal_id or self._get_default_journal().id),\n                ('date', '<=', date or fields.Date.today()),\n            ],\n            limit=1\n        ).statement_id\n        if not statement.is_complete:\n            return statement\n\n    def _get_accounting_amounts_and_currencies(self):\n        \\\"\\\"\\\" Retrieve the transaction amount, journal amount and the company amount with their corresponding currencies\n        from the journal entry linked to the statement line.\n        All returned amounts will be positive for an inbound transaction, negative for an outbound one.\n\n        :return: (\n            transaction_amount, transaction_currency,\n            journal_amount, journal_currency,\n            company_amount, company_currency,\n        )\n        \\\"\\\"\\\"\n        self.ensure_one()\n        liquidity_line, suspense_line, other_lines = self._seek_for_lines()\n        if suspense_line and not other_lines:\n            transaction_amount = -suspense_line.amount_currency\n            transaction_currency = suspense_line.currency_id\n        else:\n            # In case of to_check or partial reconciliation, we can't trust the suspense line.\n            transaction_amount = self.amount_currency if self.foreign_currency_id else self.amount\n            transaction_currency = self.foreign_currency_id or liquidity_line.currency_id\n        return (\n            transaction_amount,\n            transaction_currency,\n            sum(liquidity_line.mapped('amount_currency')),\n            liquidity_line.currency_id,\n            sum(liquidity_line.mapped('balance')),\n            liquidity_line.company_currency_id,\n        )\n\n\n\n", "CodeBleu_score": 22.306679279756}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t# OVERRIDE\n\n        res = super().write(vals)\n        self._synchronize_to_moves(set(vals.keys()))\n        return res\n\n    def unlink(self):\n        # OVERRIDE to unlink the inherited account.move (move_id field) as well.\n        moves = self.with_context(force_delete=True).mapped('move_id')\n        res = super().unlink()\n        moves.unlink()\n        return res\n\n    @api.model\n    def read_group(self, domain, fields, groupby, offset=0, limit=None, orderby=False, lazy=True):\n        # Add latest running_balance in the read_group\n        result = super(AccountBankStatementLine, self).read_group(\n            domain, fields, groupby, offset=offset,\n            limit=limit, orderby=orderby, lazy=lazy)\n        show_running_balance = False\n        # We loop over the content of groupby because the groupby date is in the form of \\\"date:granularity\\\"\n        for el in groupby:\n            if (el == 'statement_id' or el == 'journal_id' or el.startswith('date')) and 'running_balance' in fields:\n                show_running_balance = True\n                break\n        if show_running_balance:\n            for group_line in result:\n                group_line['running_balance'] = self.search(group_line.get('__domain'), limit=1).running_balance or 0.0\n        return result\n\n    # -------------------------------------------------------------------------\n    # ACTION METHODS\n    # -------------------------------------------------------------------------\n\n    def action_undo_reconciliation(self):\n        \\\"\\\"\\\" Undo the reconciliation made on the statement line and reset their journal items\n        to their original states.\n        \\\"\\\"\\\"\n        self.line_ids.remove_move_reconcile()\n        self.payment_ids.unlink()\n\n        for st_line in self:\n            st_line.with_context(force_delete=True).write({\n                'to_check': False,\n                'line_ids': [Command.clear()] + [\n                    Command.create(line_vals) for line_vals in st_line._prepare_move_line_default_vals()],\n            })\n\n    # -------------------------------------------------------------------------\n    # HELPERS\n    # -------------------------------------------------------------------------\n\n    def _find_or_create_bank_account(self):\n        self.ensure_one()\n        if str2bool(self.env['ir.config_parameter'].sudo().get_param(\\\"account.skip_create_bank_account_on_reconcile\\\")):\n            return self.env['res.partner.bank']\n\n        # There is a sql constraint on res.partner.bank ensuring an unique pair <partner, account number>.\n        # Since it's not dependent of the company, we need to search on others company too to avoid the creation\n        # of an extra res.partner.bank raising an error coming from this constraint.\n        # However, at the end, we need to filter out the results to not trigger the check_company when trying to\n        # assign a res.partner.bank owned by another company.\n        bank_account = self.env['res.partner.bank'].sudo().with_context(active_test=False).search([\n            ('acc_number', '=', self.account_number),\n            ('partner_id', '=', self.partner_id.id),\n        ])\n        if not bank_account:\n            bank_account = self.env['res.partner.bank'].create({\n                'acc_number': self.account_number,\n                'partner_id': self.partner_id.id,\n                'journal_id': None,\n            })\n        return bank_account.filtered(lambda x: x.company_id in (False, self.company_id))\n\n    def _get_default_amls_matching_domain(self):\n        self.ensure_one()\n        all_reconcilable_account_ids = self.env['account.account'].search([\n            (\\\"company_id\\\", \\\"child_of\\\", self.company_id.root_id.id),\n            ('reconcile', '=', True),\n        ]).ids\n        return [\n            # Base domain.\n            ('display_type', 'not in', ('line_section', 'line_note')),\n            ('parent_state', '=', 'posted'),\n            ('company_id', 'child_of', self.company_id.root_id.id),\n            # Reconciliation domain.\n            ('reconciled', '=', False),\n            # Domain to use the account_move_line__unreconciled_index\n            ('account_id', 'in', all_reconcilable_account_ids),\n            # Special domain for payments.\n            '|',\n            ('account_id.account_type', 'not in', ('asset_receivable', 'liability_payable')),\n            ('payment_id', '=', False),\n            # Special domain for statement lines.\n            ('statement_line_id', '!=', self.id),\n        ]\n\n    @api.model\n    def _get_default_journal(self):\n        journal_type = self.env.context.get('journal_type', 'bank')\n        return self.env['account.journal'].search([\n                *self.env['account.journal']._check_company_domain(self.env.company),\n                ('type', '=', journal_type),\n            ], limit=1)\n\n    @api.model\n    def _get_default_statement(self, journal_id=None, date=None):\n        statement = self.search(\n            domain=[\n                ('journal_id', '=', journal_id or self._get_default_journal().id),\n                ('date', '<=', date or fields.Date.today()),\n            ],\n            limit=1\n        ).statement_id\n        if not statement.is_complete:\n            return statement\n\n    def _get_accounting_amounts_and_currencies(self):\n        \\\"\\\"\\\" Retrieve the transaction amount, journal amount and the company amount with their corresponding currencies\n        from the journal entry linked to the statement line.\n        All returned amounts will be positive for an inbound transaction, negative for an outbound one.\n\n        :return: (\n            transaction_amount, transaction_currency,\n            journal_amount, journal_currency,\n            company_amount, company_currency,\n        )\n        \\\"\\\"\\\"\n        self.ensure_one()\n        liquidity_line, suspense_line, other_lines = self._seek_for_lines()\n        if suspense_line and not other_lines:\n            transaction_amount = -suspense_line.amount_currency\n            transaction_currency = suspense_line.currency_id\n        else:\n            # In case of to_check or partial reconciliation, we can't trust the suspense line.\n            transaction_amount = self.amount_currency if self.foreign_currency_id else self.amount\n            transaction_currency = self.foreign_currency_id or liquidity_line.currency_id\n        return (\n            transaction_amount,\n            transaction_currency,\n            sum(liquidity_line.mapped('amount_currency')),\n            liquidity_line.currency_id,\n            sum(liquidity_line.mapped('balance')),\n            liquidity_line.company_currency_id,\n        )\n\n\n\n", "CodeBleu_score": 22.306679279756}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t# OVERRIDE\n\n        res = super().write(vals)\n        self._synchronize_to_moves(set(vals.keys()))\n        return res\n\n    def unlink(self):\n        # OVERRIDE to unlink the inherited account.move (move_id field) as well.\n        moves = self.with_context(force_delete=True).mapped('move_id')\n        res = super().unlink()\n        moves.unlink()\n        return res\n\n    @api.model\n    def read_group(self, domain, fields, groupby, offset=0, limit=None, orderby=False, lazy=True):\n        # Add latest running_balance in the read_group\n        result = super(AccountBankStatementLine, self).read_group(\n            domain, fields, groupby, offset=offset,\n            limit=limit, orderby=orderby, lazy=lazy)\n        show_running_balance = False\n        # We loop over the content of groupby because the groupby date is in the form of \\\"date:granularity\\\"\n        for el in groupby:\n            if (el == 'statement_id' or el == 'journal_id' or el.startswith('date')) and 'running_balance' in fields:\n                show_running_balance = True\n                break\n        if show_running_balance:\n            for group_line in result:\n                group_line['running_balance'] = self.search(group_line.get('__domain'), limit=1).running_balance or 0.0\n        return result\n\n    # -------------------------------------------------------------------------\n    # ACTION METHODS\n    # -------------------------------------------------------------------------\n\n    def action_undo_reconciliation(self):\n        \\\"\\\"\\\" Undo the reconciliation made on the statement line and reset their journal items\n        to their original states.\n        \\\"\\\"\\\"\n        self.line_ids.remove_move_reconcile()\n        self.payment_ids.unlink()\n\n        for st_line in self:\n            st_line.with_context(force_delete=True).write({\n                'to_check': False,\n                'line_ids': [Command.clear()] + [\n                    Command.create(line_vals) for line_vals in st_line._prepare_move_line_default_vals()],\n            })\n\n    # -------------------------------------------------------------------------\n    # HELPERS\n    # -------------------------------------------------------------------------\n\n    def _find_or_create_bank_account(self):\n        self.ensure_one()\n        if str2bool(self.env['ir.config_parameter'].sudo().get_param(\\\"account.skip_create_bank_account_on_reconcile\\\")):\n            return self.env['res.partner.bank']\n\n        # There is a sql constraint on res.partner.bank ensuring an unique pair <partner, account number>.\n        # Since it's not dependent of the company, we need to search on others company too to avoid the creation\n        # of an extra res.partner.bank raising an error coming from this constraint.\n        # However, at the end, we need to filter out the results to not trigger the check_company when trying to\n        # assign a res.partner.bank owned by another company.\n        bank_account = self.env['res.partner.bank'].sudo().with_context(active_test=False).search([\n            ('acc_number', '=', self.account_number),\n            ('partner_id', '=', self.partner_id.id),\n        ])\n        if not bank_account:\n            bank_account = self.env['res.partner.bank'].create({\n                'acc_number': self.account_number,\n                'partner_id': self.partner_id.id,\n                'journal_id': None,\n            })\n        return bank_account.filtered(lambda x: x.company_id in (False, self.company_id))\n\n    def _get_default_amls_matching_domain(self):\n        self.ensure_one()\n        all_reconcilable_account_ids = self.env['account.account'].search([\n            (\\\"company_id\\\", \\\"child_of\\\", self.company_id.root_id.id),\n            ('reconcile', '=', True),\n        ]).ids\n        return [\n            # Base domain.\n            ('display_type', 'not in', ('line_section', 'line_note')),\n            ('parent_state', '=', 'posted'),\n            ('company_id', 'child_of', self.company_id.root_id.id),\n            # Reconciliation domain.\n            ('reconciled', '=', False),\n            # Domain to use the account_move_line__unreconciled_index\n            ('account_id', 'in', all_reconcilable_account_ids),\n            # Special domain for payments.\n            '|',\n            ('account_id.account_type', 'not in', ('asset_receivable', 'liability_payable')),\n            ('payment_id', '=', False),\n            # Special domain for statement lines.\n            ('statement_line_id', '!=', self.id),\n        ]\n\n    @api.model\n    def _get_default_journal(self):\n        journal_type = self.env.context.get('journal_type', 'bank')\n        return self.env['account.journal'].search([\n                *self.env['account.journal']._check_company_domain(self.env.company),\n                ('type', '=', journal_type),\n            ], limit=1)\n\n    @api.model\n    def _get_default_statement(self, journal_id=None, date=None):\n        statement = self.search(\n            domain=[\n                ('journal_id', '=', journal_id or self._get_default_journal().id),\n                ('date', '<=', date or fields.Date.today()),\n            ],\n            limit=1\n        ).statement_id\n        if not statement.is_complete:\n            return statement\n\n    def _get_accounting_amounts_and_currencies(self):\n        \\\"\\\"\\\" Retrieve the transaction amount, journal amount and the company amount with their corresponding currencies\n        from the journal entry linked to the statement line.\n        All returned amounts will be positive for an inbound transaction, negative for an outbound one.\n\n        :return: (\n            transaction_amount, transaction_currency,\n            journal_amount, journal_currency,\n            company_amount, company_currency,\n        )\n        \\\"\\\"\\\"\n        self.ensure_one()\n        liquidity_line, suspense_line, other_lines = self._seek_for_lines()\n        if suspense_line and not other_lines:\n            transaction_amount = -suspense_line.amount_currency\n            transaction_currency = suspense_line.currency_id\n        else:\n            # In case of to_check or partial reconciliation, we can't trust the suspense line.\n            transaction_amount = self.amount_currency if self.foreign_currency_id else self.amount\n            transaction_currency = self.foreign_currency_id or liquidity_line.currency_id\n        return (\n            transaction_amount,\n            transaction_currency,\n            sum(liquidity_line.mapped('amount_currency')),\n            liquidity_line.currency_id,\n            sum(liquidity_line.mapped('balance')),\n            liquidity_line.company_currency_id,\n        )\n\n\n\n", "CodeBleu_score": 22.306679279756}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\tn                'payment_method': pay_method,\n                'company_journals': {},\n            }\n            if values['mode'] == 'unique':\n                unique_electronic_ids.add(pay_method.id)\n            elif manage_providers and values['mode'] == 'electronic':\n                unique_electronic_ids.add(pay_method.id)\n                electronic_names.add(pay_method.code)\n\n        # Load the provider to manage 'electronic' payment methods.\n        providers_per_code = {}\n        if manage_providers:\n            providers = self.env['payment.provider'].sudo().search([\n                *self.env['payment.provider']._check_company_domain(self.company_id),\n                ('code', 'in', tuple(electronic_names)),\n            ])\n            for provider in providers:\n                providers_per_code.setdefault(provider.company_id.id, {}).setdefault(provider._get_code(), set()).add(provider.id)\n\n        # Collect the existing unique/electronic payment method lines.\n        if unique_electronic_ids:\n            fnames = ['payment_method_id', 'journal_id']\n            if manage_providers:\n                fnames.append('payment_provider_id')\n            self.env['account.payment.method.line'].flush_model(fnames=fnames)\n\n            self._cr.execute(\n                f'''\n                    SELECT\n                        apm.id,\n                        journal.company_id,\n                        journal.id,\n                        {'apml.payment_provider_id' if manage_providers else 'NULL'}\n                    FROM account_payment_method_line apml\n                    JOIN account_journal journal ON journal.id = apml.journal_id\n                    JOIN account_payment_method apm ON apm.id = apml.payment_method_id\n                    WHERE apm.id IN %s\n                ''',\n                [tuple(unique_electronic_ids)],\n            )\n            for pay_method_id, company_id, journal_id, provider_id in self._cr.fetchall():\n                values = method_information_mapping[pay_method_id]\n                is_electronic = manage_providers and values['mode'] == 'electronic'\n                if is_electronic:\n                    journal_ids = values['company_journals'].setdefault(company_id, {}).setdefault(provider_id, [])\n                else:\n                    journal_ids = values['company_journals'].setdefault(company_id, [])\n                journal_ids.append(journal_id)\n        return {\n            'pay_methods': pay_methods,\n            'manage_providers': manage_providers,\n            'method_information_mapping': method_information_mapping,\n            'providers_per_code': providers_per_code,\n        }\n\n    @api.depends('outbound_payment_method_line_ids', 'inbound_payment_method_line_ids')\n    def _compute_available_payment_method_ids(self):\n        \\\"\\\"\\\"\n        Compute the available payment methods id by respecting the following rules:\n            Methods of mode 'unique' cannot be used twice on the same company.\n            Methods of mode 'electronic' cannot be used twice on the same company for the same 'payment_provider_id'.\n            Methods of mode 'multi' can be duplicated on the same journal.\n        \\\"\\\"\\\"\n        results = self._get_journals_payment_method_information()\n        pay_methods = results['pay_methods']\n        manage_providers = results['manage_providers']\n        method_information_mapping = results['method_information_mapping']\n        providers_per_code = results['providers_per_code']\n\n        # Compute the candidates for each journal.\n        for journal in self:\n            commands = [Command.clear()]\n            company = journal.company_id\n\n            # Exclude the 'unique' / 'electronic' values that are already set on the journal.\n            protected_provider_ids = set()\n            protected_payment_method_ids = set()\n            for payment_type in ('inbound', 'outbound'):\n                lines = journal[f'{payment_type}_payment_method_line_ids']\n                for line in lines:\n                    if line.payment_method_id.id in method_information_mapping:\n                        protected_payment_method_ids.add(line.payment_method_id.id)\n                        if manage_providers and method_information_mapping.get(line.payment_method_id.id, {}).get('mode') == 'electronic':\n                            protected_provider_ids.add(line.payment_provider_id.id)\n\n            for pay_method in pay_methods:\n                values = method_information_mapping[pay_method.id]\n\n                # Get the domain of the journals on which the current method is usable.\n                method_domain = pay_method._get_payment_method_domain(pay_method.code)\n                if not journal.filtered_domain(method_domain):\n                    continue\n\n                if values['mode'] == 'unique':\n                    # 'unique' are linked to a single journal per company.\n                    already_linked_journal_ids = set(values['company_journals'].get(company.id, [])) - {journal._origin.id}\n                    if not already_linked_journal_ids and pay_method.id not in protected_payment_method_ids:\n                        commands.append(Command.link(pay_method.id))\n                elif manage_providers and values['mode'] == 'electronic':\n                    # 'electronic' are linked to a single journal per company per provider.\n                    for provider_id in providers_per_code.get(company.id, {}).get(pay_method.code, set()):\n                        already_linked_journal_ids = set(values['company_journals'].get(company.id, {}).get(provider_id, [])) - {journal._origin.id}\n                        if not already_linked_journal_ids and provider_id not in protected_provider_ids:\n                            commands.append(Command.link(pay_method.id))\n                elif values['mode'] == 'multi':\n                    # 'multi' are unlimited.\n                    commands.append(Command.link(pay_method.id))\n\n            journal.available_payment_method_ids = commands\n\n    @api.depends('type')\n    def _compute_default_account_type(self):\n        default_account_id_types = {\n            'bank': 'asset_cash',\n            'cash': 'asset_cash',\n            'sale': 'income%',\n            'purchase': 'expense%',\n        }\n\n        for journal in self:\n            journal.default_account_type = default_account_id_types.get(journal.type, '%')\n\n    @api.depends('type', 'currency_id')\n    def _compute_inbound_payment_method_line_ids(self):\n        for journal in self:\n            pay_method_line_ids_commands = [Command.clear()]\n            if journal.type in ('bank', 'cash'):\n                default_methods = journal._default_inbound_payment_methods()\n                pay_method_line_ids_commands += [Command.create({\n                    'name': pay_method.name,\n                    'payment_method_id': pay_method.id,\n                }) for pay_method in default_methods]\n            journal.inbound_payment_method_line_ids = pay_method_line_ids_commands\n\n    @api.depends('type', 'currency_id')\n\n\n", "CodeBleu_score": 59.51611289224004}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\tn                'payment_method': pay_method,\n                'company_journals': {},\n            }\n            if values['mode'] == 'unique':\n                unique_electronic_ids.add(pay_method.id)\n            elif manage_providers and values['mode'] == 'electronic':\n                unique_electronic_ids.add(pay_method.id)\n                electronic_names.add(pay_method.code)\n\n        # Load the provider to manage 'electronic' payment methods.\n        providers_per_code = {}\n        if manage_providers:\n            providers = self.env['payment.provider'].sudo().search([\n                *self.env['payment.provider']._check_company_domain(self.company_id),\n                ('code', 'in', tuple(electronic_names)),\n            ])\n            for provider in providers:\n                providers_per_code.setdefault(provider.company_id.id, {}).setdefault(provider._get_code(), set()).add(provider.id)\n\n        # Collect the existing unique/electronic payment method lines.\n        if unique_electronic_ids:\n            fnames = ['payment_method_id', 'journal_id']\n            if manage_providers:\n                fnames.append('payment_provider_id')\n            self.env['account.payment.method.line'].flush_model(fnames=fnames)\n\n            self._cr.execute(\n                f'''\n                    SELECT\n                        apm.id,\n                        journal.company_id,\n                        journal.id,\n                        {'apml.payment_provider_id' if manage_providers else 'NULL'}\n                    FROM account_payment_method_line apml\n                    JOIN account_journal journal ON journal.id = apml.journal_id\n                    JOIN account_payment_method apm ON apm.id = apml.payment_method_id\n                    WHERE apm.id IN %s\n                ''',\n                [tuple(unique_electronic_ids)],\n            )\n            for pay_method_id, company_id, journal_id, provider_id in self._cr.fetchall():\n                values = method_information_mapping[pay_method_id]\n                is_electronic = manage_providers and values['mode'] == 'electronic'\n                if is_electronic:\n                    journal_ids = values['company_journals'].setdefault(company_id, {}).setdefault(provider_id, [])\n                else:\n                    journal_ids = values['company_journals'].setdefault(company_id, [])\n                journal_ids.append(journal_id)\n        return {\n            'pay_methods': pay_methods,\n            'manage_providers': manage_providers,\n            'method_information_mapping': method_information_mapping,\n            'providers_per_code': providers_per_code,\n        }\n\n    @api.depends('outbound_payment_method_line_ids', 'inbound_payment_method_line_ids')\n    def _compute_available_payment_method_ids(self):\n        \\\"\\\"\\\"\n        Compute the available payment methods id by respecting the following rules:\n            Methods of mode 'unique' cannot be used twice on the same company.\n            Methods of mode 'electronic' cannot be used twice on the same company for the same 'payment_provider_id'.\n            Methods of mode 'multi' can be duplicated on the same journal.\n        \\\"\\\"\\\"\n        results = self._get_journals_payment_method_information()\n        pay_methods = results['pay_methods']\n        manage_providers = results['manage_providers']\n        method_information_mapping = results['method_information_mapping']\n        providers_per_code = results['providers_per_code']\n\n        # Compute the candidates for each journal.\n        for journal in self:\n            commands = [Command.clear()]\n            company = journal.company_id\n\n            # Exclude the 'unique' / 'electronic' values that are already set on the journal.\n            protected_provider_ids = set()\n            protected_payment_method_ids = set()\n            for payment_type in ('inbound', 'outbound'):\n                lines = journal[f'{payment_type}_payment_method_line_ids']\n                for line in lines:\n                    if line.payment_method_id.id in method_information_mapping:\n                        protected_payment_method_ids.add(line.payment_method_id.id)\n                        if manage_providers and method_information_mapping.get(line.payment_method_id.id, {}).get('mode') == 'electronic':\n                            protected_provider_ids.add(line.payment_provider_id.id)\n\n            for pay_method in pay_methods:\n                values = method_information_mapping[pay_method.id]\n\n                # Get the domain of the journals on which the current method is usable.\n                method_domain = pay_method._get_payment_method_domain(pay_method.code)\n                if not journal.filtered_domain(method_domain):\n                    continue\n\n                if values['mode'] == 'unique':\n                    # 'unique' are linked to a single journal per company.\n                    already_linked_journal_ids = set(values['company_journals'].get(company.id, [])) - {journal._origin.id}\n                    if not already_linked_journal_ids and pay_method.id not in protected_payment_method_ids:\n                        commands.append(Command.link(pay_method.id))\n                elif manage_providers and values['mode'] == 'electronic':\n                    # 'electronic' are linked to a single journal per company per provider.\n                    for provider_id in providers_per_code.get(company.id, {}).get(pay_method.code, set()):\n                        already_linked_journal_ids = set(values['company_journals'].get(company.id, {}).get(provider_id, [])) - {journal._origin.id}\n                        if not already_linked_journal_ids and provider_id not in protected_provider_ids:\n                            commands.append(Command.link(pay_method.id))\n                elif values['mode'] == 'multi':\n                    # 'multi' are unlimited.\n                    commands.append(Command.link(pay_method.id))\n\n            journal.available_payment_method_ids = commands\n\n    @api.depends('type')\n    def _compute_default_account_type(self):\n        default_account_id_types = {\n            'bank': 'asset_cash',\n            'cash': 'asset_cash',\n            'sale': 'income%',\n            'purchase': 'expense%',\n        }\n\n        for journal in self:\n            journal.default_account_type = default_account_id_types.get(journal.type, '%')\n\n    @api.depends('type', 'currency_id')\n    def _compute_inbound_payment_method_line_ids(self):\n        for journal in self:\n            pay_method_line_ids_commands = [Command.clear()]\n            if journal.type in ('bank', 'cash'):\n                default_methods = journal._default_inbound_payment_methods()\n                pay_method_line_ids_commands += [Command.create({\n                    'name': pay_method.name,\n                    'payment_method_id': pay_method.id,\n                }) for pay_method in default_methods]\n            journal.inbound_payment_method_line_ids = pay_method_line_ids_commands\n\n    @api.depends('type', 'currency_id')\n\n\n", "CodeBleu_score": 59.51611289224004}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\tn                'payment_method': pay_method,\n                'company_journals': {},\n            }\n            if values['mode'] == 'unique':\n                unique_electronic_ids.add(pay_method.id)\n            elif manage_providers and values['mode'] == 'electronic':\n                unique_electronic_ids.add(pay_method.id)\n                electronic_names.add(pay_method.code)\n\n        # Load the provider to manage 'electronic' payment methods.\n        providers_per_code = {}\n        if manage_providers:\n            providers = self.env['payment.provider'].sudo().search([\n                *self.env['payment.provider']._check_company_domain(self.company_id),\n                ('code', 'in', tuple(electronic_names)),\n            ])\n            for provider in providers:\n                providers_per_code.setdefault(provider.company_id.id, {}).setdefault(provider._get_code(), set()).add(provider.id)\n\n        # Collect the existing unique/electronic payment method lines.\n        if unique_electronic_ids:\n            fnames = ['payment_method_id', 'journal_id']\n            if manage_providers:\n                fnames.append('payment_provider_id')\n            self.env['account.payment.method.line'].flush_model(fnames=fnames)\n\n            self._cr.execute(\n                f'''\n                    SELECT\n                        apm.id,\n                        journal.company_id,\n                        journal.id,\n                        {'apml.payment_provider_id' if manage_providers else 'NULL'}\n                    FROM account_payment_method_line apml\n                    JOIN account_journal journal ON journal.id = apml.journal_id\n                    JOIN account_payment_method apm ON apm.id = apml.payment_method_id\n                    WHERE apm.id IN %s\n                ''',\n                [tuple(unique_electronic_ids)],\n            )\n            for pay_method_id, company_id, journal_id, provider_id in self._cr.fetchall():\n                values = method_information_mapping[pay_method_id]\n                is_electronic = manage_providers and values['mode'] == 'electronic'\n                if is_electronic:\n                    journal_ids = values['company_journals'].setdefault(company_id, {}).setdefault(provider_id, [])\n                else:\n                    journal_ids = values['company_journals'].setdefault(company_id, [])\n                journal_ids.append(journal_id)\n        return {\n            'pay_methods': pay_methods,\n            'manage_providers': manage_providers,\n            'method_information_mapping': method_information_mapping,\n            'providers_per_code': providers_per_code,\n        }\n\n    @api.depends('outbound_payment_method_line_ids', 'inbound_payment_method_line_ids')\n    def _compute_available_payment_method_ids(self):\n        \\\"\\\"\\\"\n        Compute the available payment methods id by respecting the following rules:\n            Methods of mode 'unique' cannot be used twice on the same company.\n            Methods of mode 'electronic' cannot be used twice on the same company for the same 'payment_provider_id'.\n            Methods of mode 'multi' can be duplicated on the same journal.\n        \\\"\\\"\\\"\n        results = self._get_journals_payment_method_information()\n        pay_methods = results['pay_methods']\n        manage_providers = results['manage_providers']\n        method_information_mapping = results['method_information_mapping']\n        providers_per_code = results['providers_per_code']\n\n        # Compute the candidates for each journal.\n        for journal in self:\n            commands = [Command.clear()]\n            company = journal.company_id\n\n            # Exclude the 'unique' / 'electronic' values that are already set on the journal.\n            protected_provider_ids = set()\n            protected_payment_method_ids = set()\n            for payment_type in ('inbound', 'outbound'):\n                lines = journal[f'{payment_type}_payment_method_line_ids']\n                for line in lines:\n                    if line.payment_method_id.id in method_information_mapping:\n                        protected_payment_method_ids.add(line.payment_method_id.id)\n                        if manage_providers and method_information_mapping.get(line.payment_method_id.id, {}).get('mode') == 'electronic':\n                            protected_provider_ids.add(line.payment_provider_id.id)\n\n            for pay_method in pay_methods:\n                values = method_information_mapping[pay_method.id]\n\n                # Get the domain of the journals on which the current method is usable.\n                method_domain = pay_method._get_payment_method_domain(pay_method.code)\n                if not journal.filtered_domain(method_domain):\n                    continue\n\n                if values['mode'] == 'unique':\n                    # 'unique' are linked to a single journal per company.\n                    already_linked_journal_ids = set(values['company_journals'].get(company.id, [])) - {journal._origin.id}\n                    if not already_linked_journal_ids and pay_method.id not in protected_payment_method_ids:\n                        commands.append(Command.link(pay_method.id))\n                elif manage_providers and values['mode'] == 'electronic':\n                    # 'electronic' are linked to a single journal per company per provider.\n                    for provider_id in providers_per_code.get(company.id, {}).get(pay_method.code, set()):\n                        already_linked_journal_ids = set(values['company_journals'].get(company.id, {}).get(provider_id, [])) - {journal._origin.id}\n                        if not already_linked_journal_ids and provider_id not in protected_provider_ids:\n                            commands.append(Command.link(pay_method.id))\n                elif values['mode'] == 'multi':\n                    # 'multi' are unlimited.\n                    commands.append(Command.link(pay_method.id))\n\n            journal.available_payment_method_ids = commands\n\n    @api.depends('type')\n    def _compute_default_account_type(self):\n        default_account_id_types = {\n            'bank': 'asset_cash',\n            'cash': 'asset_cash',\n            'sale': 'income%',\n            'purchase': 'expense%',\n        }\n\n        for journal in self:\n            journal.default_account_type = default_account_id_types.get(journal.type, '%')\n\n    @api.depends('type', 'currency_id')\n    def _compute_inbound_payment_method_line_ids(self):\n        for journal in self:\n            pay_method_line_ids_commands = [Command.clear()]\n            if journal.type in ('bank', 'cash'):\n                default_methods = journal._default_inbound_payment_methods()\n                pay_method_line_ids_commands += [Command.create({\n                    'name': pay_method.name,\n                    'payment_method_id': pay_method.id,\n                }) for pay_method in default_methods]\n            journal.inbound_payment_method_line_ids = pay_method_line_ids_commands\n\n    @api.depends('type', 'currency_id')\n\n\n", "CodeBleu_score": 59.51611289224004}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t_id = fields.Many2one(string='User', related='invoice_user_id')\n    invoice_origin = fields.Char(\n        string='Origin',\n        readonly=True,\n        tracking=True,\n        help=\\\"The document(s) that generated the invoice.\\\",\n    )\n    invoice_incoterm_id = fields.Many2one(\n        comodel_name='account.incoterms',\n        string='Incoterm',\n        default=lambda self: self.env.company.incoterm_id,\n        help='International Commercial Terms are a series of predefined commercial '\n             'terms used in international transactions.',\n    )\n    incoterm_location = fields.Char(\n        string='Incoterm Location',\n        compute='_compute_incoterm_location',\n        readonly=False,\n        store=True,\n    )\n    invoice_cash_rounding_id = fields.Many2one(\n        comodel_name='account.cash.rounding',\n        string='Cash Rounding Method',\n        help='Defines the smallest coinage of the currency that can be used to pay by cash.',\n    )\n    send_and_print_values = fields.Json(copy=False)\n    invoice_pdf_report_id = fields.Many2one(\n        comodel_name='ir.attachment',\n        string=\\\"PDF Attachment\\\",\n        compute=lambda self: self._compute_linked_attachment_id('invoice_pdf_report_id', 'invoice_pdf_report_file'),\n        depends=['invoice_pdf_report_file']\n    )\n    invoice_pdf_report_file = fields.Binary(\n        attachment=True,\n        string=\\\"PDF File\\\",\n        copy=False,\n    )\n\n    # === Display purpose fields === #\n    # used to have a dynamic domain on journal / taxes in the form view.\n    invoice_filter_type_domain = fields.Char(compute='_compute_invoice_filter_type_domain')\n    bank_partner_id = fields.Many2one(\n        comodel_name='res.partner',\n        compute='_compute_bank_partner_id',\n        help='Technical field to get the domain on the bank',\n    )\n    # used to display a message when the invoice's accounting date is prior of the tax lock date\n    tax_lock_date_message = fields.Char(compute='_compute_tax_lock_date_message')\n    # used for tracking the status of the currency\n    display_inactive_currency_warning = fields.Boolean(compute=\\\"_compute_display_inactive_currency_warning\\\")\n    tax_country_id = fields.Many2one(  # used to filter the available taxes depending on the fiscal country and fiscal position.\n        comodel_name='res.country',\n        compute='_compute_tax_country_id',\n    )\n    tax_country_code = fields.Char(compute=\\\"_compute_tax_country_code\\\")\n    has_reconciled_entries = fields.Boolean(compute=\\\"_compute_has_reconciled_entries\\\")\n    show_reset_to_draft_button = fields.Boolean(compute='_compute_show_reset_to_draft_button')\n    partner_credit_warning = fields.Text(\n        compute='_compute_partner_credit_warning',\n        groups=\\\"account.group_account_invoice,account.group_account_readonly\\\",\n    )\n    partner_credit = fields.Monetary(compute='_compute_partner_credit')\n    duplicated_ref_ids = fields.Many2many(comodel_name='account.move', compute='_compute_duplicated_ref_ids')\n    need_cancel_request = fields.Boolean(compute='_compute_need_cancel_request')\n\n    # used to display the various dates and amount dues on the invoice's PDF\n    payment_term_details = fields.Binary(compute=\\\"_compute_payment_term_details\\\", exportable=False)\n    show_payment_term_details = fields.Boolean(compute=\\\"_compute_show_payment_term_details\\\")\n    show_discount_details = fields.Boolean(compute=\\\"_compute_show_payment_term_details\\\")\n\n    _sql_constraints = [(\n        'unique_name', \\\"\\\", \\\"Another entry with the same name already exists.\\\",\n    )]\n\n    def _auto_init(self):\n        super()._auto_init()\n        if not index_exists(self.env.cr, 'account_move_to_check_idx'):\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE INDEX account_move_to_check_idx\n                          ON account_move(journal_id)\n                       WHERE to_check = true\n            \\\"\\\"\\\")\n        if not index_exists(self.env.cr, 'account_move_payment_idx'):\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE INDEX account_move_payment_idx\n                          ON account_move(journal_id, state, payment_state, move_type, date)\n            \\\"\\\"\\\")\n        if not index_exists(self.env.cr, 'account_move_unique_name'):\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE UNIQUE INDEX account_move_unique_name\n                                 ON account_move(name, journal_id)\n                              WHERE (state = 'posted' AND name != '/')\n            \\\"\\\"\\\")\n        if not index_exists(self.env.cr, 'account_move_sequence_index3'):\n            # Used for gap detection in list views\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE INDEX account_move_sequence_index3\n                          ON account_move (journal_id, sequence_prefix desc, (sequence_number+1) desc)\n            \\\"\\\"\\\")\n\n    def init(self):\n        super().init()\n        create_index(self.env.cr,\n                     indexname='account_move_journal_id_company_id_idx',\n                     tablename='account_move',\n                     expressions=['journal_id', 'company_id', 'date'])\n\n    # -------------------------------------------------------------------------\n    # COMPUTE METHODS\n    # -------------------------------------------------------------------------\n\n    @api.depends('move_type')\n    def _compute_invoice_default_sale_person(self):\n        # We want to modify the sale person only when we don't have one and if the move type corresponds to this condition\n        # If the move doesn't correspond, we remove the sale person\n        for move in self:\n            if move.is_sale_document(include_receipts=True):\n                move.invoice_user_id = move.invoice_user_id or self.env.user\n            else:\n                move.invoice_user_id = False\n\n    def _compute_is_being_sent(self):\n        for move in self:\n            move.is_being_sent = bool(move.send_and_print_values)\n\n    def _compute_payment_reference(self):\n        for move in self.filtered(lambda m: (\n            m.state == 'posted'\n            and m.move_type == 'out_invoice'\n            and not m.payment_reference\n        )):\n            move.payment_reference = move._get_invoice_computed_reference()\n        self._inverse_payment_reference()\n\n    @api.depends('invoice_date', 'company_id')\n\n\n", "CodeBleu_score": 23.258024132626396}, {"code": "def _compute_date(self)\n\t_id = fields.Many2one(string='User', related='invoice_user_id')\n    invoice_origin = fields.Char(\n        string='Origin',\n        readonly=True,\n        tracking=True,\n        help=\\\"The document(s) that generated the invoice.\\\",\n    )\n    invoice_incoterm_id = fields.Many2one(\n        comodel_name='account.incoterms',\n        string='Incoterm',\n        default=lambda self: self.env.company.incoterm_id,\n        help='International Commercial Terms are a series of predefined commercial '\n             'terms used in international transactions.',\n    )\n    incoterm_location = fields.Char(\n        string='Incoterm Location',\n        compute='_compute_incoterm_location',\n        readonly=False,\n        store=True,\n    )\n    invoice_cash_rounding_id = fields.Many2one(\n        comodel_name='account.cash.rounding',\n        string='Cash Rounding Method',\n        help='Defines the smallest coinage of the currency that can be used to pay by cash.',\n    )\n    send_and_print_values = fields.Json(copy=False)\n    invoice_pdf_report_id = fields.Many2one(\n        comodel_name='ir.attachment',\n        string=\\\"PDF Attachment\\\",\n        compute=lambda self: self._compute_linked_attachment_id('invoice_pdf_report_id', 'invoice_pdf_report_file'),\n        depends=['invoice_pdf_report_file']\n    )\n    invoice_pdf_report_file = fields.Binary(\n        attachment=True,\n        string=\\\"PDF File\\\",\n        copy=False,\n    )\n\n    # === Display purpose fields === #\n    # used to have a dynamic domain on journal / taxes in the form view.\n    invoice_filter_type_domain = fields.Char(compute='_compute_invoice_filter_type_domain')\n    bank_partner_id = fields.Many2one(\n        comodel_name='res.partner',\n        compute='_compute_bank_partner_id',\n        help='Technical field to get the domain on the bank',\n    )\n    # used to display a message when the invoice's accounting date is prior of the tax lock date\n    tax_lock_date_message = fields.Char(compute='_compute_tax_lock_date_message')\n    # used for tracking the status of the currency\n    display_inactive_currency_warning = fields.Boolean(compute=\\\"_compute_display_inactive_currency_warning\\\")\n    tax_country_id = fields.Many2one(  # used to filter the available taxes depending on the fiscal country and fiscal position.\n        comodel_name='res.country',\n        compute='_compute_tax_country_id',\n    )\n    tax_country_code = fields.Char(compute=\\\"_compute_tax_country_code\\\")\n    has_reconciled_entries = fields.Boolean(compute=\\\"_compute_has_reconciled_entries\\\")\n    show_reset_to_draft_button = fields.Boolean(compute='_compute_show_reset_to_draft_button')\n    partner_credit_warning = fields.Text(\n        compute='_compute_partner_credit_warning',\n        groups=\\\"account.group_account_invoice,account.group_account_readonly\\\",\n    )\n    partner_credit = fields.Monetary(compute='_compute_partner_credit')\n    duplicated_ref_ids = fields.Many2many(comodel_name='account.move', compute='_compute_duplicated_ref_ids')\n    need_cancel_request = fields.Boolean(compute='_compute_need_cancel_request')\n\n    # used to display the various dates and amount dues on the invoice's PDF\n    payment_term_details = fields.Binary(compute=\\\"_compute_payment_term_details\\\", exportable=False)\n    show_payment_term_details = fields.Boolean(compute=\\\"_compute_show_payment_term_details\\\")\n    show_discount_details = fields.Boolean(compute=\\\"_compute_show_payment_term_details\\\")\n\n    _sql_constraints = [(\n        'unique_name', \\\"\\\", \\\"Another entry with the same name already exists.\\\",\n    )]\n\n    def _auto_init(self):\n        super()._auto_init()\n        if not index_exists(self.env.cr, 'account_move_to_check_idx'):\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE INDEX account_move_to_check_idx\n                          ON account_move(journal_id)\n                       WHERE to_check = true\n            \\\"\\\"\\\")\n        if not index_exists(self.env.cr, 'account_move_payment_idx'):\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE INDEX account_move_payment_idx\n                          ON account_move(journal_id, state, payment_state, move_type, date)\n            \\\"\\\"\\\")\n        if not index_exists(self.env.cr, 'account_move_unique_name'):\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE UNIQUE INDEX account_move_unique_name\n                                 ON account_move(name, journal_id)\n                              WHERE (state = 'posted' AND name != '/')\n            \\\"\\\"\\\")\n        if not index_exists(self.env.cr, 'account_move_sequence_index3'):\n            # Used for gap detection in list views\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE INDEX account_move_sequence_index3\n                          ON account_move (journal_id, sequence_prefix desc, (sequence_number+1) desc)\n            \\\"\\\"\\\")\n\n    def init(self):\n        super().init()\n        create_index(self.env.cr,\n                     indexname='account_move_journal_id_company_id_idx',\n                     tablename='account_move',\n                     expressions=['journal_id', 'company_id', 'date'])\n\n    # -------------------------------------------------------------------------\n    # COMPUTE METHODS\n    # -------------------------------------------------------------------------\n\n    @api.depends('move_type')\n    def _compute_invoice_default_sale_person(self):\n        # We want to modify the sale person only when we don't have one and if the move type corresponds to this condition\n        # If the move doesn't correspond, we remove the sale person\n        for move in self:\n            if move.is_sale_document(include_receipts=True):\n                move.invoice_user_id = move.invoice_user_id or self.env.user\n            else:\n                move.invoice_user_id = False\n\n    def _compute_is_being_sent(self):\n        for move in self:\n            move.is_being_sent = bool(move.send_and_print_values)\n\n    def _compute_payment_reference(self):\n        for move in self.filtered(lambda m: (\n            m.state == 'posted'\n            and m.move_type == 'out_invoice'\n            and not m.payment_reference\n        )):\n            move.payment_reference = move._get_invoice_computed_reference()\n        self._inverse_payment_reference()\n\n    @api.depends('invoice_date', 'company_id')\n\n\n", "CodeBleu_score": 23.258024132626396}, {"code": "def _compute_date(self)\n\t_id = fields.Many2one(string='User', related='invoice_user_id')\n    invoice_origin = fields.Char(\n        string='Origin',\n        readonly=True,\n        tracking=True,\n        help=\\\"The document(s) that generated the invoice.\\\",\n    )\n    invoice_incoterm_id = fields.Many2one(\n        comodel_name='account.incoterms',\n        string='Incoterm',\n        default=lambda self: self.env.company.incoterm_id,\n        help='International Commercial Terms are a series of predefined commercial '\n             'terms used in international transactions.',\n    )\n    incoterm_location = fields.Char(\n        string='Incoterm Location',\n        compute='_compute_incoterm_location',\n        readonly=False,\n        store=True,\n    )\n    invoice_cash_rounding_id = fields.Many2one(\n        comodel_name='account.cash.rounding',\n        string='Cash Rounding Method',\n        help='Defines the smallest coinage of the currency that can be used to pay by cash.',\n    )\n    send_and_print_values = fields.Json(copy=False)\n    invoice_pdf_report_id = fields.Many2one(\n        comodel_name='ir.attachment',\n        string=\\\"PDF Attachment\\\",\n        compute=lambda self: self._compute_linked_attachment_id('invoice_pdf_report_id', 'invoice_pdf_report_file'),\n        depends=['invoice_pdf_report_file']\n    )\n    invoice_pdf_report_file = fields.Binary(\n        attachment=True,\n        string=\\\"PDF File\\\",\n        copy=False,\n    )\n\n    # === Display purpose fields === #\n    # used to have a dynamic domain on journal / taxes in the form view.\n    invoice_filter_type_domain = fields.Char(compute='_compute_invoice_filter_type_domain')\n    bank_partner_id = fields.Many2one(\n        comodel_name='res.partner',\n        compute='_compute_bank_partner_id',\n        help='Technical field to get the domain on the bank',\n    )\n    # used to display a message when the invoice's accounting date is prior of the tax lock date\n    tax_lock_date_message = fields.Char(compute='_compute_tax_lock_date_message')\n    # used for tracking the status of the currency\n    display_inactive_currency_warning = fields.Boolean(compute=\\\"_compute_display_inactive_currency_warning\\\")\n    tax_country_id = fields.Many2one(  # used to filter the available taxes depending on the fiscal country and fiscal position.\n        comodel_name='res.country',\n        compute='_compute_tax_country_id',\n    )\n    tax_country_code = fields.Char(compute=\\\"_compute_tax_country_code\\\")\n    has_reconciled_entries = fields.Boolean(compute=\\\"_compute_has_reconciled_entries\\\")\n    show_reset_to_draft_button = fields.Boolean(compute='_compute_show_reset_to_draft_button')\n    partner_credit_warning = fields.Text(\n        compute='_compute_partner_credit_warning',\n        groups=\\\"account.group_account_invoice,account.group_account_readonly\\\",\n    )\n    partner_credit = fields.Monetary(compute='_compute_partner_credit')\n    duplicated_ref_ids = fields.Many2many(comodel_name='account.move', compute='_compute_duplicated_ref_ids')\n    need_cancel_request = fields.Boolean(compute='_compute_need_cancel_request')\n\n    # used to display the various dates and amount dues on the invoice's PDF\n    payment_term_details = fields.Binary(compute=\\\"_compute_payment_term_details\\\", exportable=False)\n    show_payment_term_details = fields.Boolean(compute=\\\"_compute_show_payment_term_details\\\")\n    show_discount_details = fields.Boolean(compute=\\\"_compute_show_payment_term_details\\\")\n\n    _sql_constraints = [(\n        'unique_name', \\\"\\\", \\\"Another entry with the same name already exists.\\\",\n    )]\n\n    def _auto_init(self):\n        super()._auto_init()\n        if not index_exists(self.env.cr, 'account_move_to_check_idx'):\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE INDEX account_move_to_check_idx\n                          ON account_move(journal_id)\n                       WHERE to_check = true\n            \\\"\\\"\\\")\n        if not index_exists(self.env.cr, 'account_move_payment_idx'):\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE INDEX account_move_payment_idx\n                          ON account_move(journal_id, state, payment_state, move_type, date)\n            \\\"\\\"\\\")\n        if not index_exists(self.env.cr, 'account_move_unique_name'):\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE UNIQUE INDEX account_move_unique_name\n                                 ON account_move(name, journal_id)\n                              WHERE (state = 'posted' AND name != '/')\n            \\\"\\\"\\\")\n        if not index_exists(self.env.cr, 'account_move_sequence_index3'):\n            # Used for gap detection in list views\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE INDEX account_move_sequence_index3\n                          ON account_move (journal_id, sequence_prefix desc, (sequence_number+1) desc)\n            \\\"\\\"\\\")\n\n    def init(self):\n        super().init()\n        create_index(self.env.cr,\n                     indexname='account_move_journal_id_company_id_idx',\n                     tablename='account_move',\n                     expressions=['journal_id', 'company_id', 'date'])\n\n    # -------------------------------------------------------------------------\n    # COMPUTE METHODS\n    # -------------------------------------------------------------------------\n\n    @api.depends('move_type')\n    def _compute_invoice_default_sale_person(self):\n        # We want to modify the sale person only when we don't have one and if the move type corresponds to this condition\n        # If the move doesn't correspond, we remove the sale person\n        for move in self:\n            if move.is_sale_document(include_receipts=True):\n                move.invoice_user_id = move.invoice_user_id or self.env.user\n            else:\n                move.invoice_user_id = False\n\n    def _compute_is_being_sent(self):\n        for move in self:\n            move.is_being_sent = bool(move.send_and_print_values)\n\n    def _compute_payment_reference(self):\n        for move in self.filtered(lambda m: (\n            m.state == 'posted'\n            and m.move_type == 'out_invoice'\n            and not m.payment_reference\n        )):\n            move.payment_reference = move._get_invoice_computed_reference()\n        self._inverse_payment_reference()\n\n    @api.depends('invoice_date', 'company_id')\n\n\n", "CodeBleu_score": 23.258024132626396}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\tor self._context.get('default_currency_id')\n            if currency_id and currency_id != company.currency_id.id:\n                currency_domain = domain + [('currency_id', '=', currency_id)]\n                journal = self.env['account.journal'].search(currency_domain, limit=1)\n\n        if not journal:\n            journal = self.env['account.journal'].search(domain, limit=1)\n\n        if not journal:\n            error_msg = _(\n                \\\"No journal could be found in company %(company_name)s for any of those types: %(journal_types)s\\\",\n                company_name=company.display_name,\n                journal_types=', '.join(journal_types),\n            )\n            raise UserError(error_msg)\n\n        return journal\n\n    @api.depends('move_type')\n    def _compute_is_storno(self):\n        for move in self:\n            move.is_storno = move.is_storno or (move.move_type in ('out_refund', 'in_refund') and move.company_id.account_storno)\n\n    @api.depends('company_id', 'invoice_filter_type_domain')\n    def _compute_suitable_journal_ids(self):\n        for m in self:\n            journal_type = m.invoice_filter_type_domain or 'general'\n            company = m.company_id or self.env.company\n            m.suitable_journal_ids = self.env['account.journal'].search([\n                *self.env['account.journal']._check_company_domain(company),\n                ('type', '=', journal_type),\n            ])\n\n    @api.depends('posted_before', 'state', 'journal_id', 'date', 'move_type', 'payment_id')\n    def _compute_name(self):\n        self = self.sorted(lambda m: (m.date, m.ref or '', m._origin.id))\n\n        for move in self:\n            if move.state == 'cancel':\n                continue\n\n            move_has_name = move.name and move.name != '/'\n            if move_has_name or move.state != 'posted':\n                if not move.posted_before and not move._sequence_matches_date():\n                    if move._get_last_sequence():\n                        # The name does not match the date and the move is not the first in the period:\n                        # Reset to draft\n                        move.name = False\n                        continue\n                else:\n                    if move_has_name and move.posted_before or not move_has_name and move._get_last_sequence():\n                        # The move either\n                        # - has a name and was posted before, or\n                        # - doesn't have a name, but is not the first in the period\n                        # so we don't recompute the name\n                        continue\n            if move.date and (not move_has_name or not move._sequence_matches_date()):\n                move._set_next_sequence()\n\n        self.filtered(lambda m: not m.name and not move.quick_edit_mode).name = '/'\n        self._inverse_name()\n\n\n    @api.depends('journal_id', 'date')\n    def _compute_highest_name(self):\n        for record in self:\n            record.highest_name = record._get_last_sequence()\n\n    @api.depends('name', 'journal_id')\n    def _compute_made_sequence_hole(self):\n        self.env.cr.execute(\\\"\\\"\\\"\n            SELECT this.id\n              FROM account_move this\n              JOIN res_company company ON company.id = this.company_id\n         LEFT JOIN account_move other ON this.journal_id = other.journal_id\n                                     AND this.sequence_prefix = other.sequence_prefix\n                                     AND this.sequence_number = other.sequence_number + 1\n             WHERE other.id IS NULL\n               AND this.sequence_number != 1\n               AND this.name != '/'\n               AND this.id = ANY(%(move_ids)s)\n        \\\"\\\"\\\", {\n            'move_ids': self.ids,\n        })\n        made_sequence_hole = set(r[0] for r in self.env.cr.fetchall())\n        for move in self:\n            move.made_sequence_hole = move.id in made_sequence_hole\n\n    @api.depends('move_type')\n    def _compute_type_name(self):\n        type_name_mapping = dict(\n            self._fields['move_type']._description_selection(self.env),\n            out_invoice=_('Invoice'),\n            out_refund=_('Credit Note'),\n        )\n\n        for record in self:\n            record.type_name = type_name_mapping[record.move_type]\n\n    @api.depends('line_ids.account_id.account_type')\n    def _compute_always_tax_exigible(self):\n        for record in self.with_context(prefetch_fields=False):\n            # We need to check is_invoice as well because always_tax_exigible is used to\n            # set the tags as well, during the encoding. So, if no receivable/payable\n            # line has been created yet, the invoice would be detected as always exigible,\n            # and set the tags on some lines ; which would be wrong.\n            record.always_tax_exigible = not record.is_invoice(True) \\\n                                         and not record._collect_tax_cash_basis_values()\n\n    @api.depends('partner_id')\n    def _compute_commercial_partner_id(self):\n        for move in self:\n            move.commercial_partner_id = move.partner_id.commercial_partner_id\n\n    @api.depends('partner_id')\n    def _compute_partner_shipping_id(self):\n        for move in self:\n            if move.is_invoice(include_receipts=True):\n                addr = move.partner_id.address_get(['delivery'])\n                move.partner_shipping_id = addr and addr.get('delivery')\n            else:\n                move.partner_shipping_id = False\n\n    @api.depends('partner_id', 'partner_shipping_id', 'company_id')\n    def _compute_fiscal_position_id(self):\n        for move in self:\n            delivery_partner = self.env['res.partner'].browse(\n                move.partner_shipping_id.id\n                or move.partner_id.address_get(['delivery'])['delivery']\n            )\n            move.fiscal_position_id = self.env['account.fiscal.position'].with_company(move.company_id)._get_fiscal_position(\n                move.partner_id, delivery=delivery_partner)\n\n    @api.depends('bank_partner_id')\n    def _compute_partner_bank_id(self):\n        for move in self:\n            bank_ids = move.bank_partner_id.bank_ids.filtered(\n                lambda bank: not bank.company_id or bank.company_id == move.company_id)\n            move.partner_bank_id = bank_ids[0] if bank_ids else False\n\n    @api.depends('partner_id')\n\n\n", "CodeBleu_score": 30.74281479910769}, {"code": "def _compute_invoice_payment_term_id(self)\n\tor self._context.get('default_currency_id')\n            if currency_id and currency_id != company.currency_id.id:\n                currency_domain = domain + [('currency_id', '=', currency_id)]\n                journal = self.env['account.journal'].search(currency_domain, limit=1)\n\n        if not journal:\n            journal = self.env['account.journal'].search(domain, limit=1)\n\n        if not journal:\n            error_msg = _(\n                \\\"No journal could be found in company %(company_name)s for any of those types: %(journal_types)s\\\",\n                company_name=company.display_name,\n                journal_types=', '.join(journal_types),\n            )\n            raise UserError(error_msg)\n\n        return journal\n\n    @api.depends('move_type')\n    def _compute_is_storno(self):\n        for move in self:\n            move.is_storno = move.is_storno or (move.move_type in ('out_refund', 'in_refund') and move.company_id.account_storno)\n\n    @api.depends('company_id', 'invoice_filter_type_domain')\n    def _compute_suitable_journal_ids(self):\n        for m in self:\n            journal_type = m.invoice_filter_type_domain or 'general'\n            company = m.company_id or self.env.company\n            m.suitable_journal_ids = self.env['account.journal'].search([\n                *self.env['account.journal']._check_company_domain(company),\n                ('type', '=', journal_type),\n            ])\n\n    @api.depends('posted_before', 'state', 'journal_id', 'date', 'move_type', 'payment_id')\n    def _compute_name(self):\n        self = self.sorted(lambda m: (m.date, m.ref or '', m._origin.id))\n\n        for move in self:\n            if move.state == 'cancel':\n                continue\n\n            move_has_name = move.name and move.name != '/'\n            if move_has_name or move.state != 'posted':\n                if not move.posted_before and not move._sequence_matches_date():\n                    if move._get_last_sequence():\n                        # The name does not match the date and the move is not the first in the period:\n                        # Reset to draft\n                        move.name = False\n                        continue\n                else:\n                    if move_has_name and move.posted_before or not move_has_name and move._get_last_sequence():\n                        # The move either\n                        # - has a name and was posted before, or\n                        # - doesn't have a name, but is not the first in the period\n                        # so we don't recompute the name\n                        continue\n            if move.date and (not move_has_name or not move._sequence_matches_date()):\n                move._set_next_sequence()\n\n        self.filtered(lambda m: not m.name and not move.quick_edit_mode).name = '/'\n        self._inverse_name()\n\n\n    @api.depends('journal_id', 'date')\n    def _compute_highest_name(self):\n        for record in self:\n            record.highest_name = record._get_last_sequence()\n\n    @api.depends('name', 'journal_id')\n    def _compute_made_sequence_hole(self):\n        self.env.cr.execute(\\\"\\\"\\\"\n            SELECT this.id\n              FROM account_move this\n              JOIN res_company company ON company.id = this.company_id\n         LEFT JOIN account_move other ON this.journal_id = other.journal_id\n                                     AND this.sequence_prefix = other.sequence_prefix\n                                     AND this.sequence_number = other.sequence_number + 1\n             WHERE other.id IS NULL\n               AND this.sequence_number != 1\n               AND this.name != '/'\n               AND this.id = ANY(%(move_ids)s)\n        \\\"\\\"\\\", {\n            'move_ids': self.ids,\n        })\n        made_sequence_hole = set(r[0] for r in self.env.cr.fetchall())\n        for move in self:\n            move.made_sequence_hole = move.id in made_sequence_hole\n\n    @api.depends('move_type')\n    def _compute_type_name(self):\n        type_name_mapping = dict(\n            self._fields['move_type']._description_selection(self.env),\n            out_invoice=_('Invoice'),\n            out_refund=_('Credit Note'),\n        )\n\n        for record in self:\n            record.type_name = type_name_mapping[record.move_type]\n\n    @api.depends('line_ids.account_id.account_type')\n    def _compute_always_tax_exigible(self):\n        for record in self.with_context(prefetch_fields=False):\n            # We need to check is_invoice as well because always_tax_exigible is used to\n            # set the tags as well, during the encoding. So, if no receivable/payable\n            # line has been created yet, the invoice would be detected as always exigible,\n            # and set the tags on some lines ; which would be wrong.\n            record.always_tax_exigible = not record.is_invoice(True) \\\n                                         and not record._collect_tax_cash_basis_values()\n\n    @api.depends('partner_id')\n    def _compute_commercial_partner_id(self):\n        for move in self:\n            move.commercial_partner_id = move.partner_id.commercial_partner_id\n\n    @api.depends('partner_id')\n    def _compute_partner_shipping_id(self):\n        for move in self:\n            if move.is_invoice(include_receipts=True):\n                addr = move.partner_id.address_get(['delivery'])\n                move.partner_shipping_id = addr and addr.get('delivery')\n            else:\n                move.partner_shipping_id = False\n\n    @api.depends('partner_id', 'partner_shipping_id', 'company_id')\n    def _compute_fiscal_position_id(self):\n        for move in self:\n            delivery_partner = self.env['res.partner'].browse(\n                move.partner_shipping_id.id\n                or move.partner_id.address_get(['delivery'])['delivery']\n            )\n            move.fiscal_position_id = self.env['account.fiscal.position'].with_company(move.company_id)._get_fiscal_position(\n                move.partner_id, delivery=delivery_partner)\n\n    @api.depends('bank_partner_id')\n    def _compute_partner_bank_id(self):\n        for move in self:\n            bank_ids = move.bank_partner_id.bank_ids.filtered(\n                lambda bank: not bank.company_id or bank.company_id == move.company_id)\n            move.partner_bank_id = bank_ids[0] if bank_ids else False\n\n    @api.depends('partner_id')\n\n\n", "CodeBleu_score": 30.74281479910769}, {"code": "def _compute_invoice_payment_term_id(self)\n\tor self._context.get('default_currency_id')\n            if currency_id and currency_id != company.currency_id.id:\n                currency_domain = domain + [('currency_id', '=', currency_id)]\n                journal = self.env['account.journal'].search(currency_domain, limit=1)\n\n        if not journal:\n            journal = self.env['account.journal'].search(domain, limit=1)\n\n        if not journal:\n            error_msg = _(\n                \\\"No journal could be found in company %(company_name)s for any of those types: %(journal_types)s\\\",\n                company_name=company.display_name,\n                journal_types=', '.join(journal_types),\n            )\n            raise UserError(error_msg)\n\n        return journal\n\n    @api.depends('move_type')\n    def _compute_is_storno(self):\n        for move in self:\n            move.is_storno = move.is_storno or (move.move_type in ('out_refund', 'in_refund') and move.company_id.account_storno)\n\n    @api.depends('company_id', 'invoice_filter_type_domain')\n    def _compute_suitable_journal_ids(self):\n        for m in self:\n            journal_type = m.invoice_filter_type_domain or 'general'\n            company = m.company_id or self.env.company\n            m.suitable_journal_ids = self.env['account.journal'].search([\n                *self.env['account.journal']._check_company_domain(company),\n                ('type', '=', journal_type),\n            ])\n\n    @api.depends('posted_before', 'state', 'journal_id', 'date', 'move_type', 'payment_id')\n    def _compute_name(self):\n        self = self.sorted(lambda m: (m.date, m.ref or '', m._origin.id))\n\n        for move in self:\n            if move.state == 'cancel':\n                continue\n\n            move_has_name = move.name and move.name != '/'\n            if move_has_name or move.state != 'posted':\n                if not move.posted_before and not move._sequence_matches_date():\n                    if move._get_last_sequence():\n                        # The name does not match the date and the move is not the first in the period:\n                        # Reset to draft\n                        move.name = False\n                        continue\n                else:\n                    if move_has_name and move.posted_before or not move_has_name and move._get_last_sequence():\n                        # The move either\n                        # - has a name and was posted before, or\n                        # - doesn't have a name, but is not the first in the period\n                        # so we don't recompute the name\n                        continue\n            if move.date and (not move_has_name or not move._sequence_matches_date()):\n                move._set_next_sequence()\n\n        self.filtered(lambda m: not m.name and not move.quick_edit_mode).name = '/'\n        self._inverse_name()\n\n\n    @api.depends('journal_id', 'date')\n    def _compute_highest_name(self):\n        for record in self:\n            record.highest_name = record._get_last_sequence()\n\n    @api.depends('name', 'journal_id')\n    def _compute_made_sequence_hole(self):\n        self.env.cr.execute(\\\"\\\"\\\"\n            SELECT this.id\n              FROM account_move this\n              JOIN res_company company ON company.id = this.company_id\n         LEFT JOIN account_move other ON this.journal_id = other.journal_id\n                                     AND this.sequence_prefix = other.sequence_prefix\n                                     AND this.sequence_number = other.sequence_number + 1\n             WHERE other.id IS NULL\n               AND this.sequence_number != 1\n               AND this.name != '/'\n               AND this.id = ANY(%(move_ids)s)\n        \\\"\\\"\\\", {\n            'move_ids': self.ids,\n        })\n        made_sequence_hole = set(r[0] for r in self.env.cr.fetchall())\n        for move in self:\n            move.made_sequence_hole = move.id in made_sequence_hole\n\n    @api.depends('move_type')\n    def _compute_type_name(self):\n        type_name_mapping = dict(\n            self._fields['move_type']._description_selection(self.env),\n            out_invoice=_('Invoice'),\n            out_refund=_('Credit Note'),\n        )\n\n        for record in self:\n            record.type_name = type_name_mapping[record.move_type]\n\n    @api.depends('line_ids.account_id.account_type')\n    def _compute_always_tax_exigible(self):\n        for record in self.with_context(prefetch_fields=False):\n            # We need to check is_invoice as well because always_tax_exigible is used to\n            # set the tags as well, during the encoding. So, if no receivable/payable\n            # line has been created yet, the invoice would be detected as always exigible,\n            # and set the tags on some lines ; which would be wrong.\n            record.always_tax_exigible = not record.is_invoice(True) \\\n                                         and not record._collect_tax_cash_basis_values()\n\n    @api.depends('partner_id')\n    def _compute_commercial_partner_id(self):\n        for move in self:\n            move.commercial_partner_id = move.partner_id.commercial_partner_id\n\n    @api.depends('partner_id')\n    def _compute_partner_shipping_id(self):\n        for move in self:\n            if move.is_invoice(include_receipts=True):\n                addr = move.partner_id.address_get(['delivery'])\n                move.partner_shipping_id = addr and addr.get('delivery')\n            else:\n                move.partner_shipping_id = False\n\n    @api.depends('partner_id', 'partner_shipping_id', 'company_id')\n    def _compute_fiscal_position_id(self):\n        for move in self:\n            delivery_partner = self.env['res.partner'].browse(\n                move.partner_shipping_id.id\n                or move.partner_id.address_get(['delivery'])['delivery']\n            )\n            move.fiscal_position_id = self.env['account.fiscal.position'].with_company(move.company_id)._get_fiscal_position(\n                move.partner_id, delivery=delivery_partner)\n\n    @api.depends('bank_partner_id')\n    def _compute_partner_bank_id(self):\n        for move in self:\n            bank_ids = move.bank_partner_id.bank_ids.filtered(\n                lambda bank: not bank.company_id or bank.company_id == move.company_id)\n            move.partner_bank_id = bank_ids[0] if bank_ids else False\n\n    @api.depends('partner_id')\n\n\n", "CodeBleu_score": 30.74281479910769}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t- Percentage of Price Tax Included: The tax amount is a division of the price:\n        e.g 180 / (1 - 10%) = 200 (not price included)\n        e.g 200 * (1 - 10%) = 180 (price included)\n        \\\"\\\"\\\")\n    active = fields.Boolean(default=True, help=\\\"Set active to false to hide the tax without removing it.\\\")\n    company_id = fields.Many2one('res.company', string='Company', required=True, readonly=True, default=lambda self: self.env.company)\n    children_tax_ids = fields.Many2many('account.tax',\n        'account_tax_filiation_rel', 'parent_tax', 'child_tax',\n        check_company=True,\n        string='Children Taxes')\n    sequence = fields.Integer(required=True, default=1,\n        help=\\\"The sequence field is used to define order in which the tax lines are applied.\\\")\n    amount = fields.Float(required=True, digits=(16, 4), default=0.0, tracking=True)\n    description = fields.Char(string='Description', translate=True)\n    invoice_label = fields.Char(string='Label on Invoices', translate=True)\n    price_include = fields.Boolean(string='Included in Price', default=False, tracking=True,\n        help=\\\"Check this if the price you use on the product and invoices includes this tax.\\\")\n    include_base_amount = fields.Boolean(string='Affect Base of Subsequent Taxes', default=False, tracking=True,\n        help=\\\"If set, taxes with a higher sequence than this one will be affected by it, provided they accept it.\\\")\n    is_base_affected = fields.Boolean(\n        string=\\\"Base Affected by Previous Taxes\\\",\n        default=True,\n        tracking=True,\n        help=\\\"If set, taxes with a lower sequence might affect this one, provided they try to do it.\\\")\n    analytic = fields.Boolean(string=\\\"Include in Analytic Cost\\\", help=\\\"If set, the amount computed by this tax will be assigned to the same analytic account as the invoice line (if any)\\\")\n    tax_group_id = fields.Many2one(\n        comodel_name='account.tax.group',\n        string=\\\"Tax Group\\\",\n        compute='_compute_tax_group_id', readonly=False, store=True,\n        required=True, precompute=True,\n        domain=\\\"[('country_id', 'in', (country_id, False))]\\\")\n    # Technical field to make the 'tax_exigibility' field invisible if the same named field is set to false in 'res.company' model\n    hide_tax_exigibility = fields.Boolean(string='Hide Use Cash Basis Option', related='company_id.tax_exigibility', readonly=True)\n    tax_exigibility = fields.Selection(\n        [('on_invoice', 'Based on Invoice'),\n         ('on_payment', 'Based on Payment'),\n        ], string='Tax Exigibility', default='on_invoice',\n        help=\\\"Based on Invoice: the tax is due as soon as the invoice is validated.", "CodeBleu_score": 20.701891970411513}, {"code": " def _compute_tax_group_id(self)\n\t- Percentage of Price Tax Included: The tax amount is a division of the price:\n        e.g 180 / (1 - 10%) = 200 (not price included)\n        e.g 200 * (1 - 10%) = 180 (price included)\n        \\\"\\\"\\\")\n    active = fields.Boolean(default=True, help=\\\"Set active to false to hide the tax without removing it.\\\")\n    company_id = fields.Many2one('res.company', string='Company', required=True, readonly=True, default=lambda self: self.env.company)\n    children_tax_ids = fields.Many2many('account.tax',\n        'account_tax_filiation_rel', 'parent_tax', 'child_tax',\n        check_company=True,\n        string='Children Taxes')\n    sequence = fields.Integer(required=True, default=1,\n        help=\\\"The sequence field is used to define order in which the tax lines are applied.\\\")\n    amount = fields.Float(required=True, digits=(16, 4), default=0.0, tracking=True)\n    description = fields.Char(string='Description', translate=True)\n    invoice_label = fields.Char(string='Label on Invoices', translate=True)\n    price_include = fields.Boolean(string='Included in Price', default=False, tracking=True,\n        help=\\\"Check this if the price you use on the product and invoices includes this tax.\\\")\n    include_base_amount = fields.Boolean(string='Affect Base of Subsequent Taxes', default=False, tracking=True,\n        help=\\\"If set, taxes with a higher sequence than this one will be affected by it, provided they accept it.\\\")\n    is_base_affected = fields.Boolean(\n        string=\\\"Base Affected by Previous Taxes\\\",\n        default=True,\n        tracking=True,\n        help=\\\"If set, taxes with a lower sequence might affect this one, provided they try to do it.\\\")\n    analytic = fields.Boolean(string=\\\"Include in Analytic Cost\\\", help=\\\"If set, the amount computed by this tax will be assigned to the same analytic account as the invoice line (if any)\\\")\n    tax_group_id = fields.Many2one(\n        comodel_name='account.tax.group',\n        string=\\\"Tax Group\\\",\n        compute='_compute_tax_group_id', readonly=False, store=True,\n        required=True, precompute=True,\n        domain=\\\"[('country_id', 'in', (country_id, False))]\\\")\n    # Technical field to make the 'tax_exigibility' field invisible if the same named field is set to false in 'res.company' model\n    hide_tax_exigibility = fields.Boolean(string='Hide Use Cash Basis Option', related='company_id.tax_exigibility', readonly=True)\n    tax_exigibility = fields.Selection(\n        [('on_invoice', 'Based on Invoice'),\n         ('on_payment', 'Based on Payment'),\n        ], string='Tax Exigibility', default='on_invoice',\n        help=\\\"Based on Invoice: the tax is due as soon as the invoice is validated.", "CodeBleu_score": 20.701891970411513}, {"code": " def _compute_tax_group_id(self)\n\t- Percentage of Price Tax Included: The tax amount is a division of the price:\n        e.g 180 / (1 - 10%) = 200 (not price included)\n        e.g 200 * (1 - 10%) = 180 (price included)\n        \\\"\\\"\\\")\n    active = fields.Boolean(default=True, help=\\\"Set active to false to hide the tax without removing it.\\\")\n    company_id = fields.Many2one('res.company', string='Company', required=True, readonly=True, default=lambda self: self.env.company)\n    children_tax_ids = fields.Many2many('account.tax',\n        'account_tax_filiation_rel', 'parent_tax', 'child_tax',\n        check_company=True,\n        string='Children Taxes')\n    sequence = fields.Integer(required=True, default=1,\n        help=\\\"The sequence field is used to define order in which the tax lines are applied.\\\")\n    amount = fields.Float(required=True, digits=(16, 4), default=0.0, tracking=True)\n    description = fields.Char(string='Description', translate=True)\n    invoice_label = fields.Char(string='Label on Invoices', translate=True)\n    price_include = fields.Boolean(string='Included in Price', default=False, tracking=True,\n        help=\\\"Check this if the price you use on the product and invoices includes this tax.\\\")\n    include_base_amount = fields.Boolean(string='Affect Base of Subsequent Taxes', default=False, tracking=True,\n        help=\\\"If set, taxes with a higher sequence than this one will be affected by it, provided they accept it.\\\")\n    is_base_affected = fields.Boolean(\n        string=\\\"Base Affected by Previous Taxes\\\",\n        default=True,\n        tracking=True,\n        help=\\\"If set, taxes with a lower sequence might affect this one, provided they try to do it.\\\")\n    analytic = fields.Boolean(string=\\\"Include in Analytic Cost\\\", help=\\\"If set, the amount computed by this tax will be assigned to the same analytic account as the invoice line (if any)\\\")\n    tax_group_id = fields.Many2one(\n        comodel_name='account.tax.group',\n        string=\\\"Tax Group\\\",\n        compute='_compute_tax_group_id', readonly=False, store=True,\n        required=True, precompute=True,\n        domain=\\\"[('country_id', 'in', (country_id, False))]\\\")\n    # Technical field to make the 'tax_exigibility' field invisible if the same named field is set to false in 'res.company' model\n    hide_tax_exigibility = fields.Boolean(string='Hide Use Cash Basis Option', related='company_id.tax_exigibility', readonly=True)\n    tax_exigibility = fields.Selection(\n        [('on_invoice', 'Based on Invoice'),\n         ('on_payment', 'Based on Payment'),\n        ], string='Tax Exigibility', default='on_invoice',\n        help=\\\"Based on Invoice: the tax is due as soon as the invoice is validated.", "CodeBleu_score": 20.701891970411513}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t# Set the database in the session\n    self.session.get(url + '/web/database/selector', params={'db': db})\n    # Prepare the POST request data\n    data = {'db': db, 'login': login, 'password': password}\n    if force:\n        data['force'] = 'true'\n    # Upload the module file\n    files = {'module': open(module_file, 'rb')}\n    response = self.session.post(url + '/base_import_module/login_upload', data=data, files=files)\n    if response.status_code != 200:\n        raise Exception(response.text)\n    return response.text\n\n", "CodeBleu_score": 39.422994622103225}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t# Set the database in the session\n    self.session.get(url + '/web/session/authenticate', params={'db': db}, auth=(login, password))\n    # Prepare the POST request data\n    data = {\n        'db': db,\n        'login': login,\n        'password': password,\n        'force': force,\n    }\n    # Upload the module file\n    files = {'module': open(module_file, 'rb')}\n    response = self.session.post(url + '/web/session/login_upload', data=data, files=files)\n    # Check the response\n    if response.status_code != 200:\n        raise Exception(response.text)\n    return response.text\n\n", "CodeBleu_score": 41.44730091534022}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\tself.session.get(url + '/web/login', auth=(login, password))\n    if db:\n        self.session.post(url + '/web/database/select', data={'db': db})\n    data = {'login': login, 'password': password, 'db': db, 'force': force}\n    files = {'module': open(module_file, 'rb')}\n    response = self.session.post(url + '/web/addons/base_import_module/login_upload', data=data, files=files)\n    response.raise_for_status()\n    return response.text\n\n", "CodeBleu_score": 43.840767421899905}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\tconfig = odoo.tools.config\n    dbname = config['db_name']\n\n    if config[\"overwrite_existing_translations\"]:\n        overwrite = True\n    else:\n        overwrite = False\n\n    registry = odoo.modules.registry.Registry.new(dbname)\n    with registry.cursor() as cr:\n        importer = odoo.tools.trans_load(config[\"translation_file\"], cr, overwrite)\n        importer.load()\n\n    _logger.info('translation file imported successfully')\n\n", "CodeBleu_score": 37.81354237580694}, {"code": "def import_translation()\n\tconfig = odoo.tools.config\n    dbname = config['db_name']\n    registry = odoo.modules.registry.Registry.new(dbname)\n    with registry.cursor() as cr:\n        importer = odoo.tools.trans_load(cr, config['translate_modules'] or ['all'], config['translate_file'], config['translate_mode'], config['translate_code'], config['translate_debug'], config['translate_noupdate'], config['translate_overwrite'], config['translate_progress'], config['translate_progress_nbr'])\n        importer.load()\n        importer.save()\n\n", "CodeBleu_score": 34.46142751460688}, {"code": "def import_translation()\n\tconfig = odoo.tools.config\n    dbname = config['db_name']\n\n    if config[\"overwrite\"]:\n        msg = \"overwriting existing translations\"\n    else:\n        msg = \"updating existing translations\"\n    _logger.info('importing translations from %s to %s', config[\"translate_in\"], msg)\n\n    fileformat = os.path.splitext(config[\"translate_in\"])[-1][1:].lower()\n    # .pot is the same fileformat as .po\n    if fileformat == \"pot\":\n        fileformat = \"po\"\n\n    with open(config[\"translate_in\"], \"rb\") as buf:\n        registry = odoo.modules.registry.Registry.new(dbname)\n        with registry.cursor() as cr:\n            odoo.tools.trans_load(fileformat, buf, cr, config[\"overwrite\"])\n\n    _logger.info('translations imported successfully')\n\n", "CodeBleu_score": 56.91715635287093}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\tmax_depth, father = 0, None\n    for d in info['depends']:\n        n = self.graph.get(d) or Node(d, self.graph, None)  # lazy creation, do not use default value for get()\n        if n.depth >= max_depth:\n            father = n\n            max_depth = n.depth\n    if father:\n        return father.add_child(name, info)\n    else:\n        return Node(name, self.graph, info)\n\n", "CodeBleu_score": 34.260928342093614}, {"code": "def add_child(self, name, info)\n\tif not any(child.name == name for child in self.children):\n        child = self.graph.add_node(name, info)\n        child.depth = self.depth + 1\n        self.children.append(child)\n        self.children.sort(key=lambda x: x.name)\n    else:\n        child = [child for child in self.children if child.name == name][0]\n    for attr in ('init', 'demo', 'update'):\n        if hasattr(self, attr):\n            setattr(child, attr, getattr(self, attr))\n    return child\n\n", "CodeBleu_score": 47.96027549173381}, {"code": "def add_child(self, name, info)\n\tif not self.children:\n        self.depth = 1\n    else:\n        self.depth = max(child.depth for child in self.children) + 1\n    for child in self.children:\n        if child.name == name:\n            return child\n    child = self.graph.add_node(name, info)\n    child.depth = self.depth + 1\n    self.children.append(child)\n    self.children.sort(key=lambda n: n.name)\n    return child\n\n", "CodeBleu_score": 40.346250997522915}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\tresult = []\n    for date in dates:\n        result.append([date, 0])\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n    for entry in gl_entries:\n        date = entry.posting_date\n        date_index = dates.index(date)\n        if root_type not in (\"Asset\", \"Expense\"):\n            entry.debit = -entry.debit\n            entry.credit = -entry.credit\n        result[date_index][1] += entry.debit - entry.credit\n    return result\n\n", "CodeBleu_score": 33.56453566278083}, {"code": "def build_result(account, dates, gl_entries)\n\tresult = []\n    for date in dates:\n        result.append([date, 0])\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n    for entry in gl_entries:\n        if entry.posting_date in dates:\n            index = dates.index(entry.posting_date)\n            result[index][1] += entry.debit - entry.credit\n    if root_type not in [\"Asset\", \"Expense\"]:\n        result = [(r[0], -r[1]) for r in result]\n    return result\n\n", "CodeBleu_score": 35.17215682824057}, {"code": "def build_result(account, dates, gl_entries)\n\tresult = []\n    for date in dates:\n        result.append([date, 0])\n\n    root_type = frappe.get_cached_value(\"Account\", account, \"root_type\")\n\n    for entry in gl_entries:\n        if entry.account == account:\n            if root_type not in [\"Asset\", \"Expense\"]:\n                entry.debit = -entry.debit\n                entry.credit = -entry.credit\n\n            for date, balance in result:\n                if entry.posting_date == date:\n                    if entry.debit:\n                        balance += entry.debit\n                    elif entry.credit:\n                        balance -= entry.credit\n                    break\n\n            if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n                for date, balance in result:\n                    if entry.posting_date < date:\n                        balance += entry.debit - entry.credit\n                    break\n\n    return result\n\n", "CodeBleu_score": 26.946952603560888}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\tn\t\t\t\\\"Expense Account\\\",\n\t\t\t\\\"Expenses Included In Asset Valuation\\\",\n\t\t\t\\\"Expenses Included In Valuation\\\",\n\t\t\t\\\"Fixed Asset\\\",\n\t\t\t\\\"Income Account\\\",\n\t\t\t\\\"Indirect Expense\\\",\n\t\t\t\\\"Indirect Income\\\",\n\t\t\t\\\"Liability\\\",\n\t\t\t\\\"Payable\\\",\n\t\t\t\\\"Receivable\\\",\n\t\t\t\\\"Round Off\\\",\n\t\t\t\\\"Stock\\\",\n\t\t\t\\\"Stock Adjustment\\\",\n\t\t\t\\\"Stock Received But Not Billed\\\",\n\t\t\t\\\"Service Received But Not Billed\\\",\n\t\t\t\\\"Tax\\\",\n\t\t\t\\\"Temporary\\\",\n\t\t]\n\t\tbalance_must_be: DF.Literal[\\\"\\\", \\\"Debit\\\", \\\"Credit\\\"]\n\t\tcompany: DF.Link\n\t\tdisabled: DF.Check\n\t\tfreeze_account: DF.Literal[\\\"No\\\", \\\"Yes\\\"]\n\t\tinclude_in_gross: DF.Check\n\t\tis_group: DF.Check\n\t\tlft: DF.Int\n\t\told_parent: DF.Data | None\n\t\tparent_account: DF.Link\n\t\treport_type: DF.Literal[\\\"\\\", \\\"Balance Sheet\\\", \\\"Profit and Loss\\\"]\n\t\trgt: DF.Int\n\t\troot_type: DF.Literal[\\\"\\\", \\\"Asset\\\", \\\"Liability\\\", \\\"Income\\\", \\\"Expense\\\", \\\"Equity\\\"]\n\t\ttax_rate: DF.Float\n\t# end: auto-generated types\n\n\tnsm_parent_field = \\\"parent_account\\\"\n\n\tdef on_update(self):\n\t\tif frappe.local.flags.ignore_update_nsm:\n\t\t\treturn\n\t\telse:\n\t\t\tsuper().on_update()\n\n\tdef onload(self):\n\t\tfrozen_accounts_modifier = frappe.db.get_single_value(\\\"Accounts Settings\\\", \\\"frozen_accounts_modifier\\\")\n\t\tif not frozen_accounts_modifier or frozen_accounts_modifier in frappe.get_roles():\n\t\t\tself.set_onload(\\\"can_freeze_account\\\", True)\n\n\tdef autoname(self):\n\t\tfrom erpnext.accounts.utils import get_autoname_with_number\n\n\t\tself.name = get_autoname_with_number(self.account_number, self.account_name, self.company)\n\n\tdef validate(self):\n\t\tfrom erpnext.accounts.utils import validate_field_number\n\n\t\tif frappe.local.flags.allow_unverified_charts:\n\t\t\treturn\n\t\tself.validate_parent()\n\t\tself.validate_parent_child_account_type()\n\t\tself.validate_root_details()\n\t\tvalidate_field_number(\\\"Account\\\", self.name, self.account_number, self.company, \\\"account_number\\\")\n\t\tself.validate_group_or_ledger()\n\t\tself.set_root_and_report_type()\n\t\tself.validate_mandatory()\n\t\tself.validate_frozen_accounts_modifier()\n\t\tself.validate_balance_must_be_debit_or_credit()\n\t\tself.validate_account_currency()\n\t\tself.validate_root_company_and_sync_account_to_children()\n\t\tself.validate_receivable_payable_account_type()\n\n\tdef validate_parent_child_account_type(self):\n\t\tif self.parent_account:\n\t\t\tif self.account_type in [\n\t\t\t\t\\\"Direct Income\\\",\n\t\t\t\t\\\"Indirect Income\\\",\n\t\t\t\t\\\"Current Asset\\\",\n\t\t\t\t\\\"Current Liability\\\",\n\t\t\t\t\\\"Direct Expense\\\",\n\t\t\t\t\\\"Indirect Expense\\\",\n\t\t\t]:\n\t\t\t\tparent_account_type = frappe.db.get_value(\\\"Account\\\", self.parent_account, [\\\"account_type\\\"])\n\t\t\t\tif parent_account_type == self.account_type:\n\t\t\t\t\tthrow(_(\\\"Only Parent can be of type {0}\\\").format(self.account_type))\n\n\tdef validate_parent(self):\n\t\t\\\"\\\"\\\"Fetch Parent Details and validate parent account\\\"\\\"\\\"\n\t\tif self.parent_account:\n\t\t\tpar = frappe.get_cached_value(\n\t\t\t\t\\\"Account\\\", self.parent_account, [\\\"name\\\", \\\"is_group\\\", \\\"company\\\"], as_dict=1\n\t\t\t)\n\t\t\tif not par:\n\t\t\t\tthrow(\n\t\t\t\t\t_(\\\"Account {0}: Parent account {1} does not exist\\\").format(self.name, self.parent_account)\n\t\t\t\t)\n\t\t\telif par.name == self.name:\n\t\t\t\tthrow(_(\\\"Account {0}: You can not assign itself as parent account\\\").format(self.name))\n\t\t\telif not par.is_group:\n\t\t\t\tthrow(\n\t\t\t\t\t_(\\\"Account {0}: Parent account {1} can not be a ledger\\\").format(\n\t\t\t\t\t\tself.name, self.parent_account\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\telif par.company != self.company:\n\t\t\t\tthrow(\n\t\t\t\t\t_(\\\"Account {0}: Parent account {1} does not belong to company: {2}\\\").format(\n\t\t\t\t\t\tself.name, self.parent_account, self.company\n\t\t\t\t\t)\n\t\t\t\t)\n\n\tdef set_root_and_report_type(self):\n\t\tif self.parent_account:\n\t\t\tpar = frappe.get_cached_value(\n\t\t\t\t\\\"Account\\\", self.parent_account, [\\\"report_type\\\", \\\"root_type\\\"], as_dict=1\n\t\t\t)\n\n\t\t\tif par.report_type:\n\t\t\t\tself.report_type = par.report_type\n\t\t\tif par.root_type:\n\t\t\t\tself.root_type = par.root_type\n\n\t\tif self.is_group:\n\t\t\tdb_value = self.get_doc_before_save()\n\t\t\tif db_value:\n\t\t\t\tif self.report_type != db_value.report_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set report_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.report_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\t\t\t\tif self.root_type != db_value.root_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set root_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.root_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\n\t\tif self.root_type and not self.report_type:\n\t\t\tself.report_type = (\n\t\t\t\t\\\"Balance Sheet\\\" if self.root_type in (\\\"Asset\\\", \\\"Liability\\\", \\\"Equity\\\") else \\\"Profit and Loss\\\"\n\t\t\t)\n\n\n\n", "CodeBleu_score": 26.90567175724602}, {"code": "def validate_receivable_payable_account_type(self)\n\tn\t\t\t\\\"Expense Account\\\",\n\t\t\t\\\"Expenses Included In Asset Valuation\\\",\n\t\t\t\\\"Expenses Included In Valuation\\\",\n\t\t\t\\\"Fixed Asset\\\",\n\t\t\t\\\"Income Account\\\",\n\t\t\t\\\"Indirect Expense\\\",\n\t\t\t\\\"Indirect Income\\\",\n\t\t\t\\\"Liability\\\",\n\t\t\t\\\"Payable\\\",\n\t\t\t\\\"Receivable\\\",\n\t\t\t\\\"Round Off\\\",\n\t\t\t\\\"Stock\\\",\n\t\t\t\\\"Stock Adjustment\\\",\n\t\t\t\\\"Stock Received But Not Billed\\\",\n\t\t\t\\\"Service Received But Not Billed\\\",\n\t\t\t\\\"Tax\\\",\n\t\t\t\\\"Temporary\\\",\n\t\t]\n\t\tbalance_must_be: DF.Literal[\\\"\\\", \\\"Debit\\\", \\\"Credit\\\"]\n\t\tcompany: DF.Link\n\t\tdisabled: DF.Check\n\t\tfreeze_account: DF.Literal[\\\"No\\\", \\\"Yes\\\"]\n\t\tinclude_in_gross: DF.Check\n\t\tis_group: DF.Check\n\t\tlft: DF.Int\n\t\told_parent: DF.Data | None\n\t\tparent_account: DF.Link\n\t\treport_type: DF.Literal[\\\"\\\", \\\"Balance Sheet\\\", \\\"Profit and Loss\\\"]\n\t\trgt: DF.Int\n\t\troot_type: DF.Literal[\\\"\\\", \\\"Asset\\\", \\\"Liability\\\", \\\"Income\\\", \\\"Expense\\\", \\\"Equity\\\"]\n\t\ttax_rate: DF.Float\n\t# end: auto-generated types\n\n\tnsm_parent_field = \\\"parent_account\\\"\n\n\tdef on_update(self):\n\t\tif frappe.local.flags.ignore_update_nsm:\n\t\t\treturn\n\t\telse:\n\t\t\tsuper().on_update()\n\n\tdef onload(self):\n\t\tfrozen_accounts_modifier = frappe.db.get_single_value(\\\"Accounts Settings\\\", \\\"frozen_accounts_modifier\\\")\n\t\tif not frozen_accounts_modifier or frozen_accounts_modifier in frappe.get_roles():\n\t\t\tself.set_onload(\\\"can_freeze_account\\\", True)\n\n\tdef autoname(self):\n\t\tfrom erpnext.accounts.utils import get_autoname_with_number\n\n\t\tself.name = get_autoname_with_number(self.account_number, self.account_name, self.company)\n\n\tdef validate(self):\n\t\tfrom erpnext.accounts.utils import validate_field_number\n\n\t\tif frappe.local.flags.allow_unverified_charts:\n\t\t\treturn\n\t\tself.validate_parent()\n\t\tself.validate_parent_child_account_type()\n\t\tself.validate_root_details()\n\t\tvalidate_field_number(\\\"Account\\\", self.name, self.account_number, self.company, \\\"account_number\\\")\n\t\tself.validate_group_or_ledger()\n\t\tself.set_root_and_report_type()\n\t\tself.validate_mandatory()\n\t\tself.validate_frozen_accounts_modifier()\n\t\tself.validate_balance_must_be_debit_or_credit()\n\t\tself.validate_account_currency()\n\t\tself.validate_root_company_and_sync_account_to_children()\n\t\tself.validate_receivable_payable_account_type()\n\n\tdef validate_parent_child_account_type(self):\n\t\tif self.parent_account:\n\t\t\tif self.account_type in [\n\t\t\t\t\\\"Direct Income\\\",\n\t\t\t\t\\\"Indirect Income\\\",\n\t\t\t\t\\\"Current Asset\\\",\n\t\t\t\t\\\"Current Liability\\\",\n\t\t\t\t\\\"Direct Expense\\\",\n\t\t\t\t\\\"Indirect Expense\\\",\n\t\t\t]:\n\t\t\t\tparent_account_type = frappe.db.get_value(\\\"Account\\\", self.parent_account, [\\\"account_type\\\"])\n\t\t\t\tif parent_account_type == self.account_type:\n\t\t\t\t\tthrow(_(\\\"Only Parent can be of type {0}\\\").format(self.account_type))\n\n\tdef validate_parent(self):\n\t\t\\\"\\\"\\\"Fetch Parent Details and validate parent account\\\"\\\"\\\"\n\t\tif self.parent_account:\n\t\t\tpar = frappe.get_cached_value(\n\t\t\t\t\\\"Account\\\", self.parent_account, [\\\"name\\\", \\\"is_group\\\", \\\"company\\\"], as_dict=1\n\t\t\t)\n\t\t\tif not par:\n\t\t\t\tthrow(\n\t\t\t\t\t_(\\\"Account {0}: Parent account {1} does not exist\\\").format(self.name, self.parent_account)\n\t\t\t\t)\n\t\t\telif par.name == self.name:\n\t\t\t\tthrow(_(\\\"Account {0}: You can not assign itself as parent account\\\").format(self.name))\n\t\t\telif not par.is_group:\n\t\t\t\tthrow(\n\t\t\t\t\t_(\\\"Account {0}: Parent account {1} can not be a ledger\\\").format(\n\t\t\t\t\t\tself.name, self.parent_account\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\telif par.company != self.company:\n\t\t\t\tthrow(\n\t\t\t\t\t_(\\\"Account {0}: Parent account {1} does not belong to company: {2}\\\").format(\n\t\t\t\t\t\tself.name, self.parent_account, self.company\n\t\t\t\t\t)\n\t\t\t\t)\n\n\tdef set_root_and_report_type(self):\n\t\tif self.parent_account:\n\t\t\tpar = frappe.get_cached_value(\n\t\t\t\t\\\"Account\\\", self.parent_account, [\\\"report_type\\\", \\\"root_type\\\"], as_dict=1\n\t\t\t)\n\n\t\t\tif par.report_type:\n\t\t\t\tself.report_type = par.report_type\n\t\t\tif par.root_type:\n\t\t\t\tself.root_type = par.root_type\n\n\t\tif self.is_group:\n\t\t\tdb_value = self.get_doc_before_save()\n\t\t\tif db_value:\n\t\t\t\tif self.report_type != db_value.report_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set report_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.report_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\t\t\t\tif self.root_type != db_value.root_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set root_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.root_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\n\t\tif self.root_type and not self.report_type:\n\t\t\tself.report_type = (\n\t\t\t\t\\\"Balance Sheet\\\" if self.root_type in (\\\"Asset\\\", \\\"Liability\\\", \\\"Equity\\\") else \\\"Profit and Loss\\\"\n\t\t\t)\n\n\n\n", "CodeBleu_score": 26.90567175724602}, {"code": "def validate_receivable_payable_account_type(self)\n\tn\t\t\t\\\"Expense Account\\\",\n\t\t\t\\\"Expenses Included In Asset Valuation\\\",\n\t\t\t\\\"Expenses Included In Valuation\\\",\n\t\t\t\\\"Fixed Asset\\\",\n\t\t\t\\\"Income Account\\\",\n\t\t\t\\\"Indirect Expense\\\",\n\t\t\t\\\"Indirect Income\\\",\n\t\t\t\\\"Liability\\\",\n\t\t\t\\\"Payable\\\",\n\t\t\t\\\"Receivable\\\",\n\t\t\t\\\"Round Off\\\",\n\t\t\t\\\"Stock\\\",\n\t\t\t\\\"Stock Adjustment\\\",\n\t\t\t\\\"Stock Received But Not Billed\\\",\n\t\t\t\\\"Service Received But Not Billed\\\",\n\t\t\t\\\"Tax\\\",\n\t\t\t\\\"Temporary\\\",\n\t\t]\n\t\tbalance_must_be: DF.Literal[\\\"\\\", \\\"Debit\\\", \\\"Credit\\\"]\n\t\tcompany: DF.Link\n\t\tdisabled: DF.Check\n\t\tfreeze_account: DF.Literal[\\\"No\\\", \\\"Yes\\\"]\n\t\tinclude_in_gross: DF.Check\n\t\tis_group: DF.Check\n\t\tlft: DF.Int\n\t\told_parent: DF.Data | None\n\t\tparent_account: DF.Link\n\t\treport_type: DF.Literal[\\\"\\\", \\\"Balance Sheet\\\", \\\"Profit and Loss\\\"]\n\t\trgt: DF.Int\n\t\troot_type: DF.Literal[\\\"\\\", \\\"Asset\\\", \\\"Liability\\\", \\\"Income\\\", \\\"Expense\\\", \\\"Equity\\\"]\n\t\ttax_rate: DF.Float\n\t# end: auto-generated types\n\n\tnsm_parent_field = \\\"parent_account\\\"\n\n\tdef on_update(self):\n\t\tif frappe.local.flags.ignore_update_nsm:\n\t\t\treturn\n\t\telse:\n\t\t\tsuper().on_update()\n\n\tdef onload(self):\n\t\tfrozen_accounts_modifier = frappe.db.get_single_value(\\\"Accounts Settings\\\", \\\"frozen_accounts_modifier\\\")\n\t\tif not frozen_accounts_modifier or frozen_accounts_modifier in frappe.get_roles():\n\t\t\tself.set_onload(\\\"can_freeze_account\\\", True)\n\n\tdef autoname(self):\n\t\tfrom erpnext.accounts.utils import get_autoname_with_number\n\n\t\tself.name = get_autoname_with_number(self.account_number, self.account_name, self.company)\n\n\tdef validate(self):\n\t\tfrom erpnext.accounts.utils import validate_field_number\n\n\t\tif frappe.local.flags.allow_unverified_charts:\n\t\t\treturn\n\t\tself.validate_parent()\n\t\tself.validate_parent_child_account_type()\n\t\tself.validate_root_details()\n\t\tvalidate_field_number(\\\"Account\\\", self.name, self.account_number, self.company, \\\"account_number\\\")\n\t\tself.validate_group_or_ledger()\n\t\tself.set_root_and_report_type()\n\t\tself.validate_mandatory()\n\t\tself.validate_frozen_accounts_modifier()\n\t\tself.validate_balance_must_be_debit_or_credit()\n\t\tself.validate_account_currency()\n\t\tself.validate_root_company_and_sync_account_to_children()\n\t\tself.validate_receivable_payable_account_type()\n\n\tdef validate_parent_child_account_type(self):\n\t\tif self.parent_account:\n\t\t\tif self.account_type in [\n\t\t\t\t\\\"Direct Income\\\",\n\t\t\t\t\\\"Indirect Income\\\",\n\t\t\t\t\\\"Current Asset\\\",\n\t\t\t\t\\\"Current Liability\\\",\n\t\t\t\t\\\"Direct Expense\\\",\n\t\t\t\t\\\"Indirect Expense\\\",\n\t\t\t]:\n\t\t\t\tparent_account_type = frappe.db.get_value(\\\"Account\\\", self.parent_account, [\\\"account_type\\\"])\n\t\t\t\tif parent_account_type == self.account_type:\n\t\t\t\t\tthrow(_(\\\"Only Parent can be of type {0}\\\").format(self.account_type))\n\n\tdef validate_parent(self):\n\t\t\\\"\\\"\\\"Fetch Parent Details and validate parent account\\\"\\\"\\\"\n\t\tif self.parent_account:\n\t\t\tpar = frappe.get_cached_value(\n\t\t\t\t\\\"Account\\\", self.parent_account, [\\\"name\\\", \\\"is_group\\\", \\\"company\\\"], as_dict=1\n\t\t\t)\n\t\t\tif not par:\n\t\t\t\tthrow(\n\t\t\t\t\t_(\\\"Account {0}: Parent account {1} does not exist\\\").format(self.name, self.parent_account)\n\t\t\t\t)\n\t\t\telif par.name == self.name:\n\t\t\t\tthrow(_(\\\"Account {0}: You can not assign itself as parent account\\\").format(self.name))\n\t\t\telif not par.is_group:\n\t\t\t\tthrow(\n\t\t\t\t\t_(\\\"Account {0}: Parent account {1} can not be a ledger\\\").format(\n\t\t\t\t\t\tself.name, self.parent_account\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\telif par.company != self.company:\n\t\t\t\tthrow(\n\t\t\t\t\t_(\\\"Account {0}: Parent account {1} does not belong to company: {2}\\\").format(\n\t\t\t\t\t\tself.name, self.parent_account, self.company\n\t\t\t\t\t)\n\t\t\t\t)\n\n\tdef set_root_and_report_type(self):\n\t\tif self.parent_account:\n\t\t\tpar = frappe.get_cached_value(\n\t\t\t\t\\\"Account\\\", self.parent_account, [\\\"report_type\\\", \\\"root_type\\\"], as_dict=1\n\t\t\t)\n\n\t\t\tif par.report_type:\n\t\t\t\tself.report_type = par.report_type\n\t\t\tif par.root_type:\n\t\t\t\tself.root_type = par.root_type\n\n\t\tif self.is_group:\n\t\t\tdb_value = self.get_doc_before_save()\n\t\t\tif db_value:\n\t\t\t\tif self.report_type != db_value.report_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set report_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.report_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\t\t\t\tif self.root_type != db_value.root_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set root_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.root_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\n\t\tif self.root_type and not self.report_type:\n\t\t\tself.report_type = (\n\t\t\t\t\\\"Balance Sheet\\\" if self.root_type in (\\\"Asset\\\", \\\"Liability\\\", \\\"Equity\\\") else \\\"Profit and Loss\\\"\n\t\t\t)\n\n\n\n", "CodeBleu_score": 26.90567175724602}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\tif self.report_type != db_value.report_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set report_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.report_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\t\t\t\tif self.root_type != db_value.root_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set root_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.root_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\n\t\tif self.root_type and not self.report_type:\n\t\t\tself.report_type = (\n\t\t\t\t\\\"Balance Sheet\\\" if self.root_type in (\\\"Asset\\\", \\\"Liability\\\", \\\"Equity\\\") else \\\"Profit and Loss\\\"\n\t\t\t)\n\n\tdef validate_receivable_payable_account_type(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\t\treceivable_payable_types = [\\\"Receivable\\\", \\\"Payable\\\"]\n\t\tif (\n\t\t\tdoc_before_save\n\t\t\tand doc_before_save.account_type in receivable_payable_types\n\t\t\tand doc_before_save.account_type != self.account_type\n\t\t):\n\t\t\t# check for ledger entries\n\t\t\tif frappe.db.get_all(\\\"GL Entry\\\", filters={\\\"account\\\": self.name, \\\"is_cancelled\\\": 0}, limit=1):\n\t\t\t\tmsg = _(\n\t\t\t\t\t\\\"There are ledger entries against this account. Changing {0} to non-{1} in live system will cause incorrect output in 'Accounts {2}' report\\\"\n\t\t\t\t).format(\n\t\t\t\t\tfrappe.bold(\\\"Account Type\\\"), doc_before_save.account_type, doc_before_save.account_type\n\t\t\t\t)\n\t\t\t\tfrappe.msgprint(msg)\n\t\t\t\tself.add_comment(\\\"Comment\\\", msg)\n\n\tdef validate_root_details(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\n\t\tif doc_before_save and not doc_before_save.parent_account:\n\t\t\tthrow(_(\\\"Root cannot be edited.\\\"), RootNotEditable)\n\n\t\tif not self.parent_account and not self.is_group:\n\t\t\tthrow(_(\\\"The root account {0} must be a group\\\").format(frappe.bold(self.name)))\n\n\tdef validate_root_company_and_sync_account_to_children(self):\n\t\t# ignore validation while creating new compnay or while syncing to child companies\n\t\tif frappe.local.flags.ignore_root_company_validation or self.flags.ignore_root_company_validation:\n\t\t\treturn\n\t\tancestors = get_root_company(self.company)\n\t\tif ancestors:\n\t\t\tif frappe.get_cached_value(\n\t\t\t\t\\\"Company\\\", self.company, \\\"allow_account_creation_against_child_company\\\"\n\t\t\t):\n\t\t\t\treturn\n\t\t\tif not frappe.db.get_value(\n\t\t\t\t\\\"Account\\\", {\\\"account_name\\\": self.account_name, \\\"company\\\": ancestors[0]}, \\\"name\\\"\n\t\t\t):\n\t\t\t\tfrappe.throw(_(\\\"Please add the account to root level Company - {}\\\").format(ancestors[0]))\n\t\telif self.parent_account:\n\t\t\tdescendants = get_descendants_of(\\\"Company\\\", self.company)\n\t\t\tif not descendants:\n\t\t\t\treturn\n\t\t\tparent_acc_name_map = {}\n\t\t\tparent_acc_name, parent_acc_number = frappe.get_cached_value(\n\t\t\t\t\\\"Account\\\", self.parent_account, [\\\"account_name\\\", \\\"account_number\\\"]\n\t\t\t)\n\t\t\tfilters = {\n\t\t\t\t\\\"company\\\": [\\\"in\\\", descendants],\n\t\t\t\t\\\"account_name\\\": parent_acc_name,\n\t\t\t}\n\t\t\tif parent_acc_number:\n\t\t\t\tfilters[\\\"account_number\\\"] = parent_acc_number\n\n\t\t\tfor d in frappe.db.get_values(\n\t\t\t\t\\\"Account\\\", filters=filters, fieldname=[\\\"company\\\", \\\"name\\\"], as_dict=True\n\t\t\t):\n\t\t\t\tparent_acc_name_map[d[\\\"company\\\"]] = d[\\\"name\\\"]\n\n\t\t\tif not parent_acc_name_map:\n\t\t\t\treturn\n\n\t\t\tself.create_account_for_child_company(parent_acc_name_map, descendants, parent_acc_name)\n\n\tdef validate_group_or_ledger(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\t\tif not doc_before_save or cint(doc_before_save.is_group) == cint(self.is_group):\n\t\t\treturn\n\n\t\tif self.check_gle_exists():\n\t\t\tthrow(_(\\\"Account with existing transaction cannot be converted to ledger\\\"))\n\t\telif self.is_group:\n\t\t\tif self.account_type and not self.flags.exclude_account_type_check:\n\t\t\t\tthrow(_(\\\"Cannot covert to Group because Account Type is selected.\\\"))\n\t\telif self.check_if_child_exists():\n\t\t\tthrow(_(\\\"Account with child nodes cannot be set as ledger\\\"))\n\n\tdef validate_frozen_accounts_modifier(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\t\tif not doc_before_save or doc_before_save.freeze_account == self.freeze_account:\n\t\t\treturn\n\n\t\tfrozen_accounts_modifier = frappe.get_cached_value(\n\t\t\t\\\"Accounts Settings\\\", \\\"Accounts Settings\\\", \\\"frozen_accounts_modifier\\\"\n\t\t)\n\t\tif not frozen_accounts_modifier or frozen_accounts_modifier not in frappe.get_roles():\n\t\t\tthrow(_(\\\"You are not authorized to set Frozen value\\\"))\n\n\tdef validate_balance_must_be_debit_or_credit(self):\n\t\tfrom erpnext.accounts.utils import get_balance_on\n\n\t\tif not self.get(\\\"__islocal\\\") and self.balance_must_be:\n\t\t\taccount_balance = get_balance_on(self.name)\n\n\t\t\tif account_balance > 0 and self.balance_must_be == \\\"Credit\\\":\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Account balance already in Debit, you are not allowed to set 'Balance Must Be' as 'Credit'\\\"\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\telif account_balance < 0 and self.balance_must_be == \\\"Debit\\\":\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Account balance already in Credit, you are not allowed to set 'Balance Must Be' as 'Debit'\\\"\n\t\t\t\t\t)\n\t\t\t\t)\n\n\n\n", "CodeBleu_score": 25.3955121542445}, {"code": "def validate_account_currency(self)\n\tif self.report_type != db_value.report_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set report_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.report_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\t\t\t\tif self.root_type != db_value.root_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set root_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.root_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\n\t\tif self.root_type and not self.report_type:\n\t\t\tself.report_type = (\n\t\t\t\t\\\"Balance Sheet\\\" if self.root_type in (\\\"Asset\\\", \\\"Liability\\\", \\\"Equity\\\") else \\\"Profit and Loss\\\"\n\t\t\t)\n\n\tdef validate_receivable_payable_account_type(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\t\treceivable_payable_types = [\\\"Receivable\\\", \\\"Payable\\\"]\n\t\tif (\n\t\t\tdoc_before_save\n\t\t\tand doc_before_save.account_type in receivable_payable_types\n\t\t\tand doc_before_save.account_type != self.account_type\n\t\t):\n\t\t\t# check for ledger entries\n\t\t\tif frappe.db.get_all(\\\"GL Entry\\\", filters={\\\"account\\\": self.name, \\\"is_cancelled\\\": 0}, limit=1):\n\t\t\t\tmsg = _(\n\t\t\t\t\t\\\"There are ledger entries against this account. Changing {0} to non-{1} in live system will cause incorrect output in 'Accounts {2}' report\\\"\n\t\t\t\t).format(\n\t\t\t\t\tfrappe.bold(\\\"Account Type\\\"), doc_before_save.account_type, doc_before_save.account_type\n\t\t\t\t)\n\t\t\t\tfrappe.msgprint(msg)\n\t\t\t\tself.add_comment(\\\"Comment\\\", msg)\n\n\tdef validate_root_details(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\n\t\tif doc_before_save and not doc_before_save.parent_account:\n\t\t\tthrow(_(\\\"Root cannot be edited.\\\"), RootNotEditable)\n\n\t\tif not self.parent_account and not self.is_group:\n\t\t\tthrow(_(\\\"The root account {0} must be a group\\\").format(frappe.bold(self.name)))\n\n\tdef validate_root_company_and_sync_account_to_children(self):\n\t\t# ignore validation while creating new compnay or while syncing to child companies\n\t\tif frappe.local.flags.ignore_root_company_validation or self.flags.ignore_root_company_validation:\n\t\t\treturn\n\t\tancestors = get_root_company(self.company)\n\t\tif ancestors:\n\t\t\tif frappe.get_cached_value(\n\t\t\t\t\\\"Company\\\", self.company, \\\"allow_account_creation_against_child_company\\\"\n\t\t\t):\n\t\t\t\treturn\n\t\t\tif not frappe.db.get_value(\n\t\t\t\t\\\"Account\\\", {\\\"account_name\\\": self.account_name, \\\"company\\\": ancestors[0]}, \\\"name\\\"\n\t\t\t):\n\t\t\t\tfrappe.throw(_(\\\"Please add the account to root level Company - {}\\\").format(ancestors[0]))\n\t\telif self.parent_account:\n\t\t\tdescendants = get_descendants_of(\\\"Company\\\", self.company)\n\t\t\tif not descendants:\n\t\t\t\treturn\n\t\t\tparent_acc_name_map = {}\n\t\t\tparent_acc_name, parent_acc_number = frappe.get_cached_value(\n\t\t\t\t\\\"Account\\\", self.parent_account, [\\\"account_name\\\", \\\"account_number\\\"]\n\t\t\t)\n\t\t\tfilters = {\n\t\t\t\t\\\"company\\\": [\\\"in\\\", descendants],\n\t\t\t\t\\\"account_name\\\": parent_acc_name,\n\t\t\t}\n\t\t\tif parent_acc_number:\n\t\t\t\tfilters[\\\"account_number\\\"] = parent_acc_number\n\n\t\t\tfor d in frappe.db.get_values(\n\t\t\t\t\\\"Account\\\", filters=filters, fieldname=[\\\"company\\\", \\\"name\\\"], as_dict=True\n\t\t\t):\n\t\t\t\tparent_acc_name_map[d[\\\"company\\\"]] = d[\\\"name\\\"]\n\n\t\t\tif not parent_acc_name_map:\n\t\t\t\treturn\n\n\t\t\tself.create_account_for_child_company(parent_acc_name_map, descendants, parent_acc_name)\n\n\tdef validate_group_or_ledger(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\t\tif not doc_before_save or cint(doc_before_save.is_group) == cint(self.is_group):\n\t\t\treturn\n\n\t\tif self.check_gle_exists():\n\t\t\tthrow(_(\\\"Account with existing transaction cannot be converted to ledger\\\"))\n\t\telif self.is_group:\n\t\t\tif self.account_type and not self.flags.exclude_account_type_check:\n\t\t\t\tthrow(_(\\\"Cannot covert to Group because Account Type is selected.\\\"))\n\t\telif self.check_if_child_exists():\n\t\t\tthrow(_(\\\"Account with child nodes cannot be set as ledger\\\"))\n\n\tdef validate_frozen_accounts_modifier(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\t\tif not doc_before_save or doc_before_save.freeze_account == self.freeze_account:\n\t\t\treturn\n\n\t\tfrozen_accounts_modifier = frappe.get_cached_value(\n\t\t\t\\\"Accounts Settings\\\", \\\"Accounts Settings\\\", \\\"frozen_accounts_modifier\\\"\n\t\t)\n\t\tif not frozen_accounts_modifier or frozen_accounts_modifier not in frappe.get_roles():\n\t\t\tthrow(_(\\\"You are not authorized to set Frozen value\\\"))\n\n\tdef validate_balance_must_be_debit_or_credit(self):\n\t\tfrom erpnext.accounts.utils import get_balance_on\n\n\t\tif not self.get(\\\"__islocal\\\") and self.balance_must_be:\n\t\t\taccount_balance = get_balance_on(self.name)\n\n\t\t\tif account_balance > 0 and self.balance_must_be == \\\"Credit\\\":\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Account balance already in Debit, you are not allowed to set 'Balance Must Be' as 'Credit'\\\"\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\telif account_balance < 0 and self.balance_must_be == \\\"Debit\\\":\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Account balance already in Credit, you are not allowed to set 'Balance Must Be' as 'Debit'\\\"\n\t\t\t\t\t)\n\t\t\t\t)\n\n\n\n", "CodeBleu_score": 25.3955121542445}, {"code": "def validate_account_currency(self)\n\tif self.report_type != db_value.report_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set report_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.report_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\t\t\t\tif self.root_type != db_value.root_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set root_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.root_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\n\t\tif self.root_type and not self.report_type:\n\t\t\tself.report_type = (\n\t\t\t\t\\\"Balance Sheet\\\" if self.root_type in (\\\"Asset\\\", \\\"Liability\\\", \\\"Equity\\\") else \\\"Profit and Loss\\\"\n\t\t\t)\n\n\tdef validate_receivable_payable_account_type(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\t\treceivable_payable_types = [\\\"Receivable\\\", \\\"Payable\\\"]\n\t\tif (\n\t\t\tdoc_before_save\n\t\t\tand doc_before_save.account_type in receivable_payable_types\n\t\t\tand doc_before_save.account_type != self.account_type\n\t\t):\n\t\t\t# check for ledger entries\n\t\t\tif frappe.db.get_all(\\\"GL Entry\\\", filters={\\\"account\\\": self.name, \\\"is_cancelled\\\": 0}, limit=1):\n\t\t\t\tmsg = _(\n\t\t\t\t\t\\\"There are ledger entries against this account. Changing {0} to non-{1} in live system will cause incorrect output in 'Accounts {2}' report\\\"\n\t\t\t\t).format(\n\t\t\t\t\tfrappe.bold(\\\"Account Type\\\"), doc_before_save.account_type, doc_before_save.account_type\n\t\t\t\t)\n\t\t\t\tfrappe.msgprint(msg)\n\t\t\t\tself.add_comment(\\\"Comment\\\", msg)\n\n\tdef validate_root_details(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\n\t\tif doc_before_save and not doc_before_save.parent_account:\n\t\t\tthrow(_(\\\"Root cannot be edited.\\\"), RootNotEditable)\n\n\t\tif not self.parent_account and not self.is_group:\n\t\t\tthrow(_(\\\"The root account {0} must be a group\\\").format(frappe.bold(self.name)))\n\n\tdef validate_root_company_and_sync_account_to_children(self):\n\t\t# ignore validation while creating new compnay or while syncing to child companies\n\t\tif frappe.local.flags.ignore_root_company_validation or self.flags.ignore_root_company_validation:\n\t\t\treturn\n\t\tancestors = get_root_company(self.company)\n\t\tif ancestors:\n\t\t\tif frappe.get_cached_value(\n\t\t\t\t\\\"Company\\\", self.company, \\\"allow_account_creation_against_child_company\\\"\n\t\t\t):\n\t\t\t\treturn\n\t\t\tif not frappe.db.get_value(\n\t\t\t\t\\\"Account\\\", {\\\"account_name\\\": self.account_name, \\\"company\\\": ancestors[0]}, \\\"name\\\"\n\t\t\t):\n\t\t\t\tfrappe.throw(_(\\\"Please add the account to root level Company - {}\\\").format(ancestors[0]))\n\t\telif self.parent_account:\n\t\t\tdescendants = get_descendants_of(\\\"Company\\\", self.company)\n\t\t\tif not descendants:\n\t\t\t\treturn\n\t\t\tparent_acc_name_map = {}\n\t\t\tparent_acc_name, parent_acc_number = frappe.get_cached_value(\n\t\t\t\t\\\"Account\\\", self.parent_account, [\\\"account_name\\\", \\\"account_number\\\"]\n\t\t\t)\n\t\t\tfilters = {\n\t\t\t\t\\\"company\\\": [\\\"in\\\", descendants],\n\t\t\t\t\\\"account_name\\\": parent_acc_name,\n\t\t\t}\n\t\t\tif parent_acc_number:\n\t\t\t\tfilters[\\\"account_number\\\"] = parent_acc_number\n\n\t\t\tfor d in frappe.db.get_values(\n\t\t\t\t\\\"Account\\\", filters=filters, fieldname=[\\\"company\\\", \\\"name\\\"], as_dict=True\n\t\t\t):\n\t\t\t\tparent_acc_name_map[d[\\\"company\\\"]] = d[\\\"name\\\"]\n\n\t\t\tif not parent_acc_name_map:\n\t\t\t\treturn\n\n\t\t\tself.create_account_for_child_company(parent_acc_name_map, descendants, parent_acc_name)\n\n\tdef validate_group_or_ledger(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\t\tif not doc_before_save or cint(doc_before_save.is_group) == cint(self.is_group):\n\t\t\treturn\n\n\t\tif self.check_gle_exists():\n\t\t\tthrow(_(\\\"Account with existing transaction cannot be converted to ledger\\\"))\n\t\telif self.is_group:\n\t\t\tif self.account_type and not self.flags.exclude_account_type_check:\n\t\t\t\tthrow(_(\\\"Cannot covert to Group because Account Type is selected.\\\"))\n\t\telif self.check_if_child_exists():\n\t\t\tthrow(_(\\\"Account with child nodes cannot be set as ledger\\\"))\n\n\tdef validate_frozen_accounts_modifier(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\t\tif not doc_before_save or doc_before_save.freeze_account == self.freeze_account:\n\t\t\treturn\n\n\t\tfrozen_accounts_modifier = frappe.get_cached_value(\n\t\t\t\\\"Accounts Settings\\\", \\\"Accounts Settings\\\", \\\"frozen_accounts_modifier\\\"\n\t\t)\n\t\tif not frozen_accounts_modifier or frozen_accounts_modifier not in frappe.get_roles():\n\t\t\tthrow(_(\\\"You are not authorized to set Frozen value\\\"))\n\n\tdef validate_balance_must_be_debit_or_credit(self):\n\t\tfrom erpnext.accounts.utils import get_balance_on\n\n\t\tif not self.get(\\\"__islocal\\\") and self.balance_must_be:\n\t\t\taccount_balance = get_balance_on(self.name)\n\n\t\t\tif account_balance > 0 and self.balance_must_be == \\\"Credit\\\":\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Account balance already in Debit, you are not allowed to set 'Balance Must Be' as 'Credit'\\\"\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\telif account_balance < 0 and self.balance_must_be == \\\"Debit\\\":\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Account balance already in Credit, you are not allowed to set 'Balance Must Be' as 'Debit'\\\"\n\t\t\t\t\t)\n\t\t\t\t)\n\n\n\n", "CodeBleu_score": 25.3955121542445}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\tmerged_entries = {}\n    for entry in entries:\n        key = generate_key(entry, accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"account\": entry[\"account\"],\n                \"account_currency\": entry[\"account_currency\"],\n                \"credit\": 0,\n                \"credit_in_account_currency\": 0,\n                \"debit\": 0,\n                \"debit_in_account_currency\": 0,\n                \"dimensions\": {},\n            }\n        merged_entries[key][\"credit\"] += entry[\"credit\"]\n        merged_entries[key][\"credit_in_account_currency\"] += entry[\n            \"credit_in_account_currency\"\n        ]\n        merged_entries[key][\"debit\"] += entry[\"debit\"]\n        merged_entries[key][\"debit_in_account_currency\"] += entry[\n            \"debit_in_account_currency\"\n        ]\n        merged_entries[key][\"dimensions\"] = entry[\"dimensions\"]\n    return merged_entries\n\n", "CodeBleu_score": 38.7755059089216}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\tmerged_entries = {}\n\n    for entry in entries:\n        key = entry.get(\"account\")\n        for dimension in accounting_dimensions:\n            key += \"|\" + entry.get(dimension)\n\n        if key not in merged_entries:\n            merged_entries[key] = entry\n            merged_entries[key][\"debit\"] = 0\n            merged_entries[key][\"credit\"] = 0\n            merged_entries[key][\"debit_in_account_currency\"] = 0\n            merged_entries[key][\"credit_in_account_currency\"] = 0\n\n        if entry.get(\"debit\") and entry.get(\"debit\") > 0:\n            merged_entries[key][\"debit\"] += entry.get(\"debit\")\n            merged_entries[key][\"debit_in_account_currency\"] += entry.get(\"debit_in_account_currency\")\n        elif entry.get(\"credit\") and entry.get(\"credit\") > 0:\n            merged_entries[key][\"credit\"] += entry.get(\"credit\")\n            merged_entries[key][\"credit_in_account_currency\"] += entry.get(\"credit_in_account_currency\")\n\n    return merged_entries\n\n", "CodeBleu_score": 42.428898915514395}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\tmerged_entries = {}\n    for entry in entries:\n        key = _get_key(entry, accounting_dimensions)\n        if key in merged_entries:\n            merged_entries[key].update(_get_value(entry, accounting_dimensions))\n        else:\n            merged_entries[key] = _get_value(entry, accounting_dimensions)\n\n    return merged_entries\n\n", "CodeBleu_score": 18.028098663716317}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\tif self.doctype in (\"Purchase Invoice\", \"Purchase Receipt\", \"Purchase Order\", \"Purchase Invoice Merge\", \"Purchase Order Merge\"):\n        supplier_blocked_status = frappe.db.get_value(\"Supplier\", self.supplier, \"blocked\")\n        if supplier_blocked_status == \"Yes\":\n            supplier_hold_type = frappe.db.get_value(\"Supplier\", self.supplier, \"on_hold\")\n            if supplier_hold_type == \"Payment\":\n                supplier_hold_release_date = frappe.db.get_value(\"Supplier\", self.supplier, \"hold_release_date\")\n                if supplier_hold_release_date:\n                    if getdate(supplier_hold_release_date) >= getdate(nowdate()):\n                        frappe.throw(_(\"Supplier {0} is on hold till {1}. Please try again after that date.\").format(self.supplier, supplier_hold_release_date))\n                else:\n                    frappe.throw(_(\"Supplier {0} is on hold. Please try again after the hold is released.\").format(self.supplier))\n            elif supplier_hold_type == \"Invoice\":\n                frappe.throw(_(\"Supplier {0} is on hold. Please try again after the hold is released.\").format(self.supplier))\n\n", "CodeBleu_score": 29.92793246328922}, {"code": "def ensure_supplier_is_not_blocked(self)\n\tif self.doctype in (\"Purchase Invoice\", \"Purchase Order\", \"Purchase Receipt\", \"Purchase Return\"):\n        supplier_blocked_message = _(\"Supplier {0} is on hold.\").format(self.supplier)\n        if self.supplier_blocked_on:\n            if self.supplier_blocked_on == \"Supplier\" and self.supplier_block_unblock_via_payment == 1:\n                return\n            elif self.supplier_blocked_on == \"Supplier\" and self.supplier_block_unblock_via_payment == 0:\n                frappe.throw(supplier_blocked_message)\n\n            elif self.supplier_blocked_on == \"Payment\":\n                if self.is_return:\n                    frappe.throw(supplier_blocked_message)\n\n                elif self.doctype == \"Purchase Receipt\":\n                    if self.is_paid:\n                        frappe.throw(supplier_blocked_message)\n\n                elif self.doctype == \"Purchase Invoice\":\n                    if self.is_paid:\n                        frappe.throw(supplier_blocked_message)\n\n", "CodeBleu_score": 25.57412135511144}, {"code": "def ensure_supplier_is_not_blocked(self)\n\tif self.doctype == \"Supplier Payment\" and self.party_type == \"Supplier\":\n        supplier_name = self.party\n    elif self.doctype in (\"Purchase Invoice\", \"Purchase Order\"):\n        supplier_name = self.supplier\n    else:\n        return\n\n    supplier = frappe.get_doc(\"Supplier\", supplier_name)\n    if supplier.on_hold and supplier.hold_type == self.doctype:\n        if getdate(supplier.release_date) > getdate(nowdate()):\n            frappe.throw(\n                _(\n                    \"Supplier {0} is on hold till {1}. Please set the release date.\".format(\n                        frappe.bold(supplier_name),\n                        frappe.bold(formatdate(supplier.release_date)),\n                    )\n                )\n            )\n        else:\n            frappe.throw(\n                _(\n                    \"Supplier {0} is on hold. Please set the release date.\".format(\n                        frappe.bold(supplier_name)\n                    )\n                )\n            )\n\n", "CodeBleu_score": 31.98444744498158}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t()\n\n\t\tself.disable_pricing_rule_on_internal_transfer()\n\t\tself.disable_tax_included_prices_for_internal_transfer()\n\t\tself.set_incoming_rate()\n\t\tself.init_internal_values()\n\n\t\tif self.meta.get_field(\\\"currency\\\"):\n\t\t\tself.calculate_taxes_and_totals()\n\n\t\t\tif not self.meta.get_field(\\\"is_return\\\") or not self.is_return:\n\t\t\t\tself.validate_value(\\\"base_grand_total\\\", \\\">=\\\", 0)\n\n\t\t\tvalidate_return(self)\n\n\t\tself.validate_all_documents_schedule()\n\n\t\tif self.meta.get_field(\\\"taxes_and_charges\\\"):\n\t\t\tself.validate_enabled_taxes_and_charges()\n\t\t\tself.validate_tax_account_company()\n\n\t\tself.validate_party()\n\t\tself.validate_currency()\n\t\tself.validate_party_account_currency()\n\t\tself.validate_return_against_account()\n\n\t\tif self.doctype in [\\\"Purchase Invoice\\\", \\\"Sales Invoice\\\"]:\n\t\t\tif invalid_advances := [x for x in self.advances if not x.reference_type or not x.reference_name]:\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Rows: {0} in {1} section are Invalid. Reference Name should point to a valid Payment Entry or Journal Entry.\\\"\n\t\t\t\t\t).format(\n\t\t\t\t\t\tfrappe.bold(comma_and([x.idx for x in invalid_advances])),\n\t\t\t\t\t\tfrappe.bold(_(\\\"Advance Payments\\\")),\n\t\t\t\t\t)\n\t\t\t\t)\n\n\t\t\tif self.get(\\\"is_return\\\") and self.get(\\\"return_against\\\") and not self.get(\\\"is_pos\\\"):\n\t\t\t\tif self.get(\\\"update_outstanding_for_self\\\"):\n\t\t\t\t\tdocument_type = \\\"Credit Note\\\" if self.doctype == \\\"Sales Invoice\\\" else \\\"Debit Note\\\"\n\t\t\t\t\tfrappe.msgprint(\n\t\t\t\t\t\t_(\n\t\t\t\t\t\t\t\\\"We can see {0} is made against {1}. If you want {1}'s outstanding to be updated, uncheck '{2}' checkbox. <br><br> Or you can use {3} tool to reconcile against {1} later.\\\"\n\t\t\t\t\t\t).format(\n\t\t\t\t\t\t\tfrappe.bold(document_type),\n\t\t\t\t\t\t\tget_link_to_form(self.doctype, self.get(\\\"return_against\\\")),\n\t\t\t\t\t\t\tfrappe.bold(\\\"Update Outstanding for Self\\\"),\n\t\t\t\t\t\t\tget_link_to_form(\\\"Payment Reconciliation\\\"),\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\n\t\t\tpos_check_field = \\\"is_pos\\\" if self.doctype == \\\"Sales Invoice\\\" else \\\"is_paid\\\"\n\t\t\tif cint(self.allocate_advances_automatically) and not cint(self.get(pos_check_field)):\n\t\t\t\tself.set_advances()\n\n\t\t\tself.set_advance_gain_or_loss()\n\n\t\t\tif self.is_return:\n\t\t\t\tself.validate_qty()\n\t\t\telse:\n\t\t\t\tself.validate_deferred_start_and_end_date()\n\n\t\t\tself.validate_deferred_income_expense_account()\n\t\t\tself.set_inter_company_account()\n\n\t\tif self.doctype == \\\"Purchase Invoice\\\":\n\t\t\tself.calculate_paid_amount()\n\t\t\t# apply tax withholding only if checked and applicable\n\t\t\tself.set_tax_withholding()\n\n\t\twith temporary_flag(\\\"company\\\", self.company):\n\t\t\tvalidate_regional(self)\n\t\t\tvalidate_einvoice_fields(self)\n\n\t\tif self.doctype != \\\"Material Request\\\" and not self.ignore_pricing_rule:\n\t\t\tapply_pricing_rule_on_transaction(self)\n\n\t\tself.set_total_in_words()\n\t\tself.set_default_letter_head()\n\n\tdef set_default_letter_head(self):\n\t\tif hasattr(self, \\\"letter_head\\\") and not self.letter_head:\n\t\t\tself.letter_head = frappe.db.get_value(\\\"Company\\\", self.company, \\\"default_letter_head\\\")\n\n\tdef init_internal_values(self):\n\t\t# init all the internal values as 0 on sa\n\t\tif self.docstatus.is_draft():\n\t\t\t# TODO: Add all such pending values here\n\t\t\tfields = [\\\"billed_amt\\\", \\\"delivered_qty\\\"]\n\t\t\tfor item in self.get(\\\"items\\\"):\n\t\t\t\tfor field in fields:\n\t\t\t\t\tif hasattr(item, field):\n\t\t\t\t\t\titem.set(field, 0)\n\n\tdef before_cancel(self):\n\t\tvalidate_einvoice_fields(self)\n\n\tdef _remove_references_in_unreconcile(self):\n\t\tupe = frappe.qb.DocType(\\\"Unreconcile Payment Entries\\\")\n\t\trows = (\n\t\t\tfrappe.qb.from_(upe)\n\t\t\t.select(upe.name, upe.parent)\n\t\t\t.where((upe.reference_doctype == self.doctype) & (upe.reference_name == self.name))\n\t\t\t.run(as_dict=True)\n\t\t)\n\n\t\tif rows:\n\t\t\treferences_map = frappe._dict()\n\t\t\tfor x in rows:\n\t\t\t\treferences_map.setdefault(x.parent, []).append(x.name)\n\n\t\t\tfor doc, rows in references_map.items():\n\t\t\t\tunreconcile_doc = frappe.get_doc(\\\"Unreconcile Payment\\\", doc)\n\t\t\t\tfor row in rows:\n\t\t\t\t\tunreconcile_doc.remove(unreconcile_doc.get(\\\"allocations\\\", {\\\"name\\\": row})[0])\n\n\t\t\t\tunreconcile_doc.flags.ignore_validate_update_after_submit = True\n\t\t\t\tunreconcile_doc.flags.ignore_links = True\n\t\t\t\tunreconcile_doc.save(ignore_permissions=True)\n\n\t\t# delete docs upon parent doc deletion\n\t\tunreconcile_docs = frappe.db.get_all(\\\"Unreconcile Payment\\\", filters={\\\"voucher_no\\\": self.name})\n\t\tfor x in unreconcile_docs:\n\t\t\t_doc = frappe.get_doc(\\\"Unreconcile Payment\\\", x.name)\n\t\t\tif _doc.docstatus == 1:\n\t\t\t\t_doc.cancel()\n\t\t\t_doc.delete()\n\n\n\n", "CodeBleu_score": 33.51889444994199}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t()\n\n\t\tself.disable_pricing_rule_on_internal_transfer()\n\t\tself.disable_tax_included_prices_for_internal_transfer()\n\t\tself.set_incoming_rate()\n\t\tself.init_internal_values()\n\n\t\tif self.meta.get_field(\\\"currency\\\"):\n\t\t\tself.calculate_taxes_and_totals()\n\n\t\t\tif not self.meta.get_field(\\\"is_return\\\") or not self.is_return:\n\t\t\t\tself.validate_value(\\\"base_grand_total\\\", \\\">=\\\", 0)\n\n\t\t\tvalidate_return(self)\n\n\t\tself.validate_all_documents_schedule()\n\n\t\tif self.meta.get_field(\\\"taxes_and_charges\\\"):\n\t\t\tself.validate_enabled_taxes_and_charges()\n\t\t\tself.validate_tax_account_company()\n\n\t\tself.validate_party()\n\t\tself.validate_currency()\n\t\tself.validate_party_account_currency()\n\t\tself.validate_return_against_account()\n\n\t\tif self.doctype in [\\\"Purchase Invoice\\\", \\\"Sales Invoice\\\"]:\n\t\t\tif invalid_advances := [x for x in self.advances if not x.reference_type or not x.reference_name]:\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Rows: {0} in {1} section are Invalid. Reference Name should point to a valid Payment Entry or Journal Entry.\\\"\n\t\t\t\t\t).format(\n\t\t\t\t\t\tfrappe.bold(comma_and([x.idx for x in invalid_advances])),\n\t\t\t\t\t\tfrappe.bold(_(\\\"Advance Payments\\\")),\n\t\t\t\t\t)\n\t\t\t\t)\n\n\t\t\tif self.get(\\\"is_return\\\") and self.get(\\\"return_against\\\") and not self.get(\\\"is_pos\\\"):\n\t\t\t\tif self.get(\\\"update_outstanding_for_self\\\"):\n\t\t\t\t\tdocument_type = \\\"Credit Note\\\" if self.doctype == \\\"Sales Invoice\\\" else \\\"Debit Note\\\"\n\t\t\t\t\tfrappe.msgprint(\n\t\t\t\t\t\t_(\n\t\t\t\t\t\t\t\\\"We can see {0} is made against {1}. If you want {1}'s outstanding to be updated, uncheck '{2}' checkbox. <br><br> Or you can use {3} tool to reconcile against {1} later.\\\"\n\t\t\t\t\t\t).format(\n\t\t\t\t\t\t\tfrappe.bold(document_type),\n\t\t\t\t\t\t\tget_link_to_form(self.doctype, self.get(\\\"return_against\\\")),\n\t\t\t\t\t\t\tfrappe.bold(\\\"Update Outstanding for Self\\\"),\n\t\t\t\t\t\t\tget_link_to_form(\\\"Payment Reconciliation\\\"),\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\n\t\t\tpos_check_field = \\\"is_pos\\\" if self.doctype == \\\"Sales Invoice\\\" else \\\"is_paid\\\"\n\t\t\tif cint(self.allocate_advances_automatically) and not cint(self.get(pos_check_field)):\n\t\t\t\tself.set_advances()\n\n\t\t\tself.set_advance_gain_or_loss()\n\n\t\t\tif self.is_return:\n\t\t\t\tself.validate_qty()\n\t\t\telse:\n\t\t\t\tself.validate_deferred_start_and_end_date()\n\n\t\t\tself.validate_deferred_income_expense_account()\n\t\t\tself.set_inter_company_account()\n\n\t\tif self.doctype == \\\"Purchase Invoice\\\":\n\t\t\tself.calculate_paid_amount()\n\t\t\t# apply tax withholding only if checked and applicable\n\t\t\tself.set_tax_withholding()\n\n\t\twith temporary_flag(\\\"company\\\", self.company):\n\t\t\tvalidate_regional(self)\n\t\t\tvalidate_einvoice_fields(self)\n\n\t\tif self.doctype != \\\"Material Request\\\" and not self.ignore_pricing_rule:\n\t\t\tapply_pricing_rule_on_transaction(self)\n\n\t\tself.set_total_in_words()\n\t\tself.set_default_letter_head()\n\n\tdef set_default_letter_head(self):\n\t\tif hasattr(self, \\\"letter_head\\\") and not self.letter_head:\n\t\t\tself.letter_head = frappe.db.get_value(\\\"Company\\\", self.company, \\\"default_letter_head\\\")\n\n\tdef init_internal_values(self):\n\t\t# init all the internal values as 0 on sa\n\t\tif self.docstatus.is_draft():\n\t\t\t# TODO: Add all such pending values here\n\t\t\tfields = [\\\"billed_amt\\\", \\\"delivered_qty\\\"]\n\t\t\tfor item in self.get(\\\"items\\\"):\n\t\t\t\tfor field in fields:\n\t\t\t\t\tif hasattr(item, field):\n\t\t\t\t\t\titem.set(field, 0)\n\n\tdef before_cancel(self):\n\t\tvalidate_einvoice_fields(self)\n\n\tdef _remove_references_in_unreconcile(self):\n\t\tupe = frappe.qb.DocType(\\\"Unreconcile Payment Entries\\\")\n\t\trows = (\n\t\t\tfrappe.qb.from_(upe)\n\t\t\t.select(upe.name, upe.parent)\n\t\t\t.where((upe.reference_doctype == self.doctype) & (upe.reference_name == self.name))\n\t\t\t.run(as_dict=True)\n\t\t)\n\n\t\tif rows:\n\t\t\treferences_map = frappe._dict()\n\t\t\tfor x in rows:\n\t\t\t\treferences_map.setdefault(x.parent, []).append(x.name)\n\n\t\t\tfor doc, rows in references_map.items():\n\t\t\t\tunreconcile_doc = frappe.get_doc(\\\"Unreconcile Payment\\\", doc)\n\t\t\t\tfor row in rows:\n\t\t\t\t\tunreconcile_doc.remove(unreconcile_doc.get(\\\"allocations\\\", {\\\"name\\\": row})[0])\n\n\t\t\t\tunreconcile_doc.flags.ignore_validate_update_after_submit = True\n\t\t\t\tunreconcile_doc.flags.ignore_links = True\n\t\t\t\tunreconcile_doc.save(ignore_permissions=True)\n\n\t\t# delete docs upon parent doc deletion\n\t\tunreconcile_docs = frappe.db.get_all(\\\"Unreconcile Payment\\\", filters={\\\"voucher_no\\\": self.name})\n\t\tfor x in unreconcile_docs:\n\t\t\t_doc = frappe.get_doc(\\\"Unreconcile Payment\\\", x.name)\n\t\t\tif _doc.docstatus == 1:\n\t\t\t\t_doc.cancel()\n\t\t\t_doc.delete()\n\n\n\n", "CodeBleu_score": 33.51889444994199}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t()\n\n\t\tself.disable_pricing_rule_on_internal_transfer()\n\t\tself.disable_tax_included_prices_for_internal_transfer()\n\t\tself.set_incoming_rate()\n\t\tself.init_internal_values()\n\n\t\tif self.meta.get_field(\\\"currency\\\"):\n\t\t\tself.calculate_taxes_and_totals()\n\n\t\t\tif not self.meta.get_field(\\\"is_return\\\") or not self.is_return:\n\t\t\t\tself.validate_value(\\\"base_grand_total\\\", \\\">=\\\", 0)\n\n\t\t\tvalidate_return(self)\n\n\t\tself.validate_all_documents_schedule()\n\n\t\tif self.meta.get_field(\\\"taxes_and_charges\\\"):\n\t\t\tself.validate_enabled_taxes_and_charges()\n\t\t\tself.validate_tax_account_company()\n\n\t\tself.validate_party()\n\t\tself.validate_currency()\n\t\tself.validate_party_account_currency()\n\t\tself.validate_return_against_account()\n\n\t\tif self.doctype in [\\\"Purchase Invoice\\\", \\\"Sales Invoice\\\"]:\n\t\t\tif invalid_advances := [x for x in self.advances if not x.reference_type or not x.reference_name]:\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Rows: {0} in {1} section are Invalid. Reference Name should point to a valid Payment Entry or Journal Entry.\\\"\n\t\t\t\t\t).format(\n\t\t\t\t\t\tfrappe.bold(comma_and([x.idx for x in invalid_advances])),\n\t\t\t\t\t\tfrappe.bold(_(\\\"Advance Payments\\\")),\n\t\t\t\t\t)\n\t\t\t\t)\n\n\t\t\tif self.get(\\\"is_return\\\") and self.get(\\\"return_against\\\") and not self.get(\\\"is_pos\\\"):\n\t\t\t\tif self.get(\\\"update_outstanding_for_self\\\"):\n\t\t\t\t\tdocument_type = \\\"Credit Note\\\" if self.doctype == \\\"Sales Invoice\\\" else \\\"Debit Note\\\"\n\t\t\t\t\tfrappe.msgprint(\n\t\t\t\t\t\t_(\n\t\t\t\t\t\t\t\\\"We can see {0} is made against {1}. If you want {1}'s outstanding to be updated, uncheck '{2}' checkbox. <br><br> Or you can use {3} tool to reconcile against {1} later.\\\"\n\t\t\t\t\t\t).format(\n\t\t\t\t\t\t\tfrappe.bold(document_type),\n\t\t\t\t\t\t\tget_link_to_form(self.doctype, self.get(\\\"return_against\\\")),\n\t\t\t\t\t\t\tfrappe.bold(\\\"Update Outstanding for Self\\\"),\n\t\t\t\t\t\t\tget_link_to_form(\\\"Payment Reconciliation\\\"),\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\n\t\t\tpos_check_field = \\\"is_pos\\\" if self.doctype == \\\"Sales Invoice\\\" else \\\"is_paid\\\"\n\t\t\tif cint(self.allocate_advances_automatically) and not cint(self.get(pos_check_field)):\n\t\t\t\tself.set_advances()\n\n\t\t\tself.set_advance_gain_or_loss()\n\n\t\t\tif self.is_return:\n\t\t\t\tself.validate_qty()\n\t\t\telse:\n\t\t\t\tself.validate_deferred_start_and_end_date()\n\n\t\t\tself.validate_deferred_income_expense_account()\n\t\t\tself.set_inter_company_account()\n\n\t\tif self.doctype == \\\"Purchase Invoice\\\":\n\t\t\tself.calculate_paid_amount()\n\t\t\t# apply tax withholding only if checked and applicable\n\t\t\tself.set_tax_withholding()\n\n\t\twith temporary_flag(\\\"company\\\", self.company):\n\t\t\tvalidate_regional(self)\n\t\t\tvalidate_einvoice_fields(self)\n\n\t\tif self.doctype != \\\"Material Request\\\" and not self.ignore_pricing_rule:\n\t\t\tapply_pricing_rule_on_transaction(self)\n\n\t\tself.set_total_in_words()\n\t\tself.set_default_letter_head()\n\n\tdef set_default_letter_head(self):\n\t\tif hasattr(self, \\\"letter_head\\\") and not self.letter_head:\n\t\t\tself.letter_head = frappe.db.get_value(\\\"Company\\\", self.company, \\\"default_letter_head\\\")\n\n\tdef init_internal_values(self):\n\t\t# init all the internal values as 0 on sa\n\t\tif self.docstatus.is_draft():\n\t\t\t# TODO: Add all such pending values here\n\t\t\tfields = [\\\"billed_amt\\\", \\\"delivered_qty\\\"]\n\t\t\tfor item in self.get(\\\"items\\\"):\n\t\t\t\tfor field in fields:\n\t\t\t\t\tif hasattr(item, field):\n\t\t\t\t\t\titem.set(field, 0)\n\n\tdef before_cancel(self):\n\t\tvalidate_einvoice_fields(self)\n\n\tdef _remove_references_in_unreconcile(self):\n\t\tupe = frappe.qb.DocType(\\\"Unreconcile Payment Entries\\\")\n\t\trows = (\n\t\t\tfrappe.qb.from_(upe)\n\t\t\t.select(upe.name, upe.parent)\n\t\t\t.where((upe.reference_doctype == self.doctype) & (upe.reference_name == self.name))\n\t\t\t.run(as_dict=True)\n\t\t)\n\n\t\tif rows:\n\t\t\treferences_map = frappe._dict()\n\t\t\tfor x in rows:\n\t\t\t\treferences_map.setdefault(x.parent, []).append(x.name)\n\n\t\t\tfor doc, rows in references_map.items():\n\t\t\t\tunreconcile_doc = frappe.get_doc(\\\"Unreconcile Payment\\\", doc)\n\t\t\t\tfor row in rows:\n\t\t\t\t\tunreconcile_doc.remove(unreconcile_doc.get(\\\"allocations\\\", {\\\"name\\\": row})[0])\n\n\t\t\t\tunreconcile_doc.flags.ignore_validate_update_after_submit = True\n\t\t\t\tunreconcile_doc.flags.ignore_links = True\n\t\t\t\tunreconcile_doc.save(ignore_permissions=True)\n\n\t\t# delete docs upon parent doc deletion\n\t\tunreconcile_docs = frappe.db.get_all(\\\"Unreconcile Payment\\\", filters={\\\"voucher_no\\\": self.name})\n\t\tfor x in unreconcile_docs:\n\t\t\t_doc = frappe.get_doc(\\\"Unreconcile Payment\\\", x.name)\n\t\t\tif _doc.docstatus == 1:\n\t\t\t\t_doc.cancel()\n\t\t\t_doc.delete()\n\n\n\n", "CodeBleu_score": 33.51889444994199}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\ttry:\n        self.auth()\n    except Exception as e:\n        frappe.throw(str(e), title=_(\"Authentication Failed\"))\n\n    transactions = []\n    start_date = start_date.strftime(\"%Y-%m-%d\")\n    end_date = end_date.strftime(\"%Y-%m-%d\")\n\n    try:\n        response = self.client.Transactions.get(\n            self.access_token,\n            start_date=start_date,\n            end_date=end_date,\n            account_ids=account_id,\n        )\n    except InvalidRequestError:\n        frappe.log_error(\"Plaid: Invalid request error\")\n        frappe.msgprint(_(\"Please check your Plaid client ID and secret values\"))\n    except APIError as e:\n        frappe.log_error(\"Plaid: Authentication error\")\n        frappe.throw(_(str(e)), title=_(\"Authentication Failed\"))\n    except Exception as e:\n        frappe.log_error(\"Plaid: Authentication error\")\n        frappe.throw(_(str(e)), title=_(\"Authentication Failed\"))\n\n    transactions.extend(response[\"transactions\"])\n    while response[\"total_transactions\"] > len(transactions):\n        response = self.client.Transactions.get(\n            self.access_token,\n            start_date=start_date,\n            end_date=end_date,\n            account_ids=account_id,\n            offset=len(transactions),\n        )\n        transactions.extend(response[\"transactions\"])\n\n    return transactions\n\n", "CodeBleu_score": 47.234516664927675}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t# Authenticate the client\n    self.auth()\n\n    # Construct the query parameters\n    query_params = {\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n        \"count\": 100,\n        \"offset\": 0,\n    }\n    if account_id:\n        query_params[\"account_ids\"] = [account_id]\n\n    # Fetch the transactions\n    transactions = []\n    while True:\n        try:\n            response = self.client.Transactions.get(\n                self.access_token,\n                **query_params,\n            )\n        except InvalidRequestError:\n            frappe.log_error(\"Plaid: Invalid request error\")\n            frappe.msgprint(_(\"Please check your Plaid client ID and secret values\"))\n        except APIError as e:\n            frappe.log_error(\"Plaid: Authentication error\")\n            frappe.throw(_(str(e)), title=_(\"Authentication Failed\"))\n        except requests.Timeout:\n            pass\n        except Exception as e:\n            frappe.log_error(\"Plaid: Error retrieving transactions\")\n            frappe.throw(_(str(e)), title=_(\"Retrieval Failed\"))\n\n        # Stop if no transactions are retrieved\n        if not response[\"transactions\"]:\n            break\n\n        # Stop if the number of retrieved transactions is less than the total\n        if response[\"total\"] <= len(response[\"transactions\"]):\n            break\n\n        # Update the query parameters\n        query_params[\"offset\"] += 100\n\n        # Add the transactions to the list\n        transactions.extend(response[\"transactions\"])\n\n    return transactions\n\n", "CodeBleu_score": 35.290381970934014}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\ttry:\n        self.auth()\n    except Exception as e:\n        frappe.throw(str(e), title=_(\"Authentication Failed\"))\n\n    try:\n        # Construct the query parameters\n        start_date = start_date.strftime(\"%Y-%m-%d\")\n        end_date = end_date.strftime(\"%Y-%m-%d\")\n        query_params = {\n            \"access_token\": self.access_token,\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n        }\n        if account_id:\n            query_params[\"account_ids\"] = [account_id]\n\n        # Fetch the transactions\n        transactions = self.client.Transactions.get(query_params)\n        while True:\n            # If the number of retrieved transactions is less than the total, fetch the next set of transactions\n            if len(transactions[\"transactions\"]) < transactions[\"total_transactions\"]:\n                transactions = self.client.Transactions.get(\n                    query_params,\n                    after=transactions[\"transactions\"][-1][\"transaction_id\"],\n                )\n            else:\n                break\n\n        return transactions\n    except APIError as e:\n        if e.code == \"PRODUCT_NOT_ENABLED\":\n            frappe.throw(_(str(e)), title=_(\"Product Not Enabled\"))\n        elif e.code == \"INVALID_REQUEST\":\n            frappe.throw(_(str(e)), title=_(\"Invalid Request\"))\n        elif e.code == \"INVALID_ACCESS_TOKEN\":\n            frappe.throw(_(str(e)), title=_(\"Invalid Access Token\"))\n        else:\n            frappe.log_error(\"Plaid: API Error\")\n            frappe.throw(_(str(e)), title=_(\"API Error\"))\n    except InvalidRequestError:\n        frappe.log_error(\"Plaid: Invalid request error\")\n        frappe.throw(_(\"Please check your Plaid client ID and secret values\"), title=_(\"Invalid Request\"))\n    except Exception as e:\n        frappe.log_error(\"Plaid: API Error\")", "CodeBleu_score": 33.97867330144678}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t# begin: auto-generated code\n    # This code is auto-generated. Do not modify anything in this block.\n\n    from typing import TYPE_CHECKING\n\n    if TYPE_CHECKING:\n        from frappe.types import DF\n\n        institution: DF.Data | None\n        institution_id: DF.Data | None\n        institution_name: DF.Data | None\n        institution_type: DF.Data | None\n        institution_logo: DF.Data | None\n        institution_primary_color: DF.Data | None\n        institution_url: DF.Data | None\n        institution_supports_account_identification: DF.Check | None\n        institution_supports_account_statement: DF.Check | None\n        institution_supports_transaction_history: DF.Check | None\n        institution_supports_transaction_detail: DF.Check | None\n        institution_supports_auth: DF.Check | None\n        institution_supports_balance: DF.Check | None\n        institution_supports_identity: DF.Check | None\n        institution_supports_transfer: DF.Check | None\n        institution_supports_payment_initiation: DF.Check | None\n        institution_supports_payment_all: DF.Check | None\n        institution_supports_depository_checks: DF.Check | None\n        institution_supports_credit_cards: DF.Check | None\n        institution_supports_credit_details: DF.Check | None\n        institution_supports_investments: DF.Check | None\n        institution_supports_investment_transactions: DF.Check | None\n        institution_supports_investment_holdings: DF.Check | None\n        institution_supports_investment_options: DF.Check | None\n        institution_supports_other_assets: DF.Check | None\n        institution_supports_other_liabilities: DF.Check | None\n        institution_supports_other_investments: DF.Check | None\n        institution_supports_other_transactions: DF.", "CodeBleu_score": 7.533141000157303}, {"code": "def add_institution(token, response)\n\ttry:\n        plaid = PlaidConnector()\n        access_token = plaid.get_access_token(token, response)\n        institution_id = response[\"institution\"][\"institution_id\"]\n        institution_name = response[\"institution\"][\"name\"]\n        institution_url = response[\"institution\"][\"url\"]\n        institution_logo = response[\"institution\"][\"logo\"]\n        institution_type = response[\"institution\"][\"type\"]\n\n        bank = frappe.get_doc(\n            {\n                \"doctype\": \"Bank\",\n                \"bank_name\": institution_name,\n                \"bank_url\": institution_url,\n                \"bank_logo\": institution_logo,\n                \"bank_type\": institution_type,\n                \"plaid_access_token\": access_token,\n                \"plaid_institution_id\": institution_id,\n            }\n        )\n\n        if not frappe.db.exists(\"Bank\", institution_id):\n            bank.insert()\n            frappe.db.commit()\n            frappe.msgprint(_(\"Bank {0} added successfully.\").format(institution_name))\n        else:\n            bank.db_update()\n            frappe.db.commit()\n            frappe.msgprint(_(\"Bank {0} updated successfully.\").format(institution_name))\n\n    except ItemError as e:\n        frappe.msgprint(\n            _(\"Error adding bank {0}: {1}\").format(institution_name, e.message)\n        )\n    except Exception as e:\n        frappe.msgprint(_(\"Error adding bank {0}: {1}\").format(institution_name, e))\n\n", "CodeBleu_score": 41.99320628278629}, {"code": "def add_institution(token, response)\n\ttry:\n        plaid = PlaidConnector()\n        access_token = plaid.exchange_token(token)\n        institution_name = response.get(\"institution\").get(\"name\")\n        institution_id = response.get(\"institution\").get(\"id\")\n        institution_type = response.get(\"institution\").get(\"type\")\n        institution_logo = response.get(\"institution\").get(\"logo\")\n        institution_url = response.get(\"institution\").get(\"url\")\n        institution_products = response.get(\"institution\").get(\"products\")\n\n        bank = frappe.db.get_value(\"Bank\", {\"bank_id\": institution_id})\n\n        if bank:\n            bank_doc = frappe.get_doc(\"Bank\", bank)\n            bank_doc.access_token = access_token\n            bank_doc.save()\n            frappe.db.commit()\n            frappe.msgprint(_(\"Bank {0} has been updated.\").format(bank_doc.bank_name))\n\n        else:\n            bank_doc = frappe.new_doc(\"Bank\")\n            bank_doc.bank_id = institution_id\n            bank_doc.bank_name = institution_name\n            bank_doc.bank_type = institution_type\n            bank_doc.bank_logo = institution_logo\n            bank_doc.bank_url = institution_url\n            bank_doc.bank_products = institution_products\n            bank_doc.access_token = access_token\n            bank_doc.save()\n            frappe.db.commit()\n            frappe.msgprint(_(\"Bank {0} has been added.\").format(bank_doc.bank_name))\n\n    except Exception as e:\n        frappe.msgprint(_(\"Error: {0}\").format(e))\n\n", "CodeBleu_score": 36.568361713993006}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\tef get_plaid_configuration():\n\tif frappe.db.get_single_value(\\\"Plaid Settings\\\", \\\"enabled\\\"):\n\t\tplaid_settings = frappe.get_single(\\\"Plaid Settings\\\")\n\t\treturn {\n\t\t\t\\\"plaid_env\\\": plaid_settings.plaid_env,\n\t\t\t\\\"link_token\\\": plaid_settings.get_link_token(),\n\t\t\t\\\"client_name\\\": frappe.local.site,\n\t\t}\n\n\treturn \\\"disabled\\\"\n\n", "CodeBleu_score": 8.429361512129377}, {"code": "def sync_transactions(bank, bank_account)\n\tef get_plaid_configuration():\n\tif frappe.db.get_single_value(\\\"Plaid Settings\\\", \\\"enabled\\\"):\n\t\tplaid_settings = frappe.get_single(\\\"Plaid Settings\\\")\n\t\treturn {\n\t\t\t\\\"plaid_env\\\": plaid_settings.plaid_env,\n\t\t\t\\\"link_token\\\": plaid_settings.get_link_token(),\n\t\t\t\\\"client_name\\\": frappe.local.site,\n\t\t}\n\n\treturn \\\"disabled\\\"\n\n", "CodeBleu_score": 8.429361512129377}, {"code": "def sync_transactions(bank, bank_account)\n\tef get_plaid_configuration():\n\tif frappe.db.get_single_value(\\\"Plaid Settings\\\", \\\"enabled\\\"):\n\t\tplaid_settings = frappe.get_single(\\\"Plaid Settings\\\")\n\t\treturn {\n\t\t\t\\\"plaid_env\\\": plaid_settings.plaid_env,\n\t\t\t\\\"link_token\\\": plaid_settings.get_link_token(),\n\t\t\t\\\"client_name\\\": frappe.local.site,\n\t\t}\n\n\treturn \\\"disabled\\\"\n\n", "CodeBleu_score": 8.429361512129377}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\tMigrator\\\", \\\"_migrate\\\", queue=\\\"long\\\")\n\n\tdef _migrate(self):\n\t\ttry:\n\t\t\tself.set_indicator(\\\"In Progress\\\")\n\t\t\t# Add quickbooks_id field to every document so that we can lookup by Id reference\n\t\t\t# provided by documents in API responses.\n\t\t\t# Also add a company field to Customer Supplier and Item\n\t\t\tself._make_custom_fields()\n\n\t\t\tself._migrate_accounts()\n\n\t\t\t# Some Quickbooks Entities like Advance Payment, Payment aren't available firectly from API\n\t\t\t# Sales Invoice also sometimes needs to be saved as a Journal Entry\n\t\t\t# (When Item table is not present, This appens when Invoice is attached with a \\\"StatementCharge\\\" \\\"ReimburseCharge\n\t\t\t# Details of both of these cannot be fetched from API)\n\t\t\t# Their GL entries need to be generated from GeneralLedger Report.\n\t\t\tself._fetch_general_ledger()\n\n\t\t\t# QuickBooks data can have transactions that do not fall in existing fiscal years in ERPNext\n\t\t\tself._create_fiscal_years()\n\n\t\t\tself._allow_fraction_in_unit()\n\n\t\t\t# Following entities are directly available from API\n\t\t\t# Invoice can be an exception sometimes though (as explained above).\n\t\t\tentities_for_normal_transform = [\n\t\t\t\t\\\"Customer\\\",\n\t\t\t\t\\\"Item\\\",\n\t\t\t\t\\\"Vendor\\\",\n\t\t\t\t\\\"Preferences\\\",\n\t\t\t\t\\\"JournalEntry\\\",\n\t\t\t\t\\\"Purchase\\\",\n\t\t\t\t\\\"Deposit\\\",\n\t\t\t\t\\\"Invoice\\\",\n\t\t\t\t\\\"CreditMemo\\\",\n\t\t\t\t\\\"SalesReceipt\\\",\n\t\t\t\t\\\"RefundReceipt\\\",\n\t\t\t\t\\\"Bill\\\",\n\t\t\t\t\\\"VendorCredit\\\",\n\t\t\t\t\\\"Payment\\\",\n\t\t\t\t\\\"BillPayment\\\",\n\t\t\t]\n\t\t\tfor entity in entities_for_normal_transform:\n\t\t\t\tself._migrate_entries(entity)\n\n\t\t\t# Following entries are not available directly from API, Need to be regenrated from GeneralLedger Report\n\t\t\tentities_for_gl_transform = [\n\t\t\t\t\\\"Advance Payment\\\",\n\t\t\t\t\\\"Tax Payment\\\",\n\t\t\t\t\\\"Sales Tax Payment\\\",\n\t\t\t\t\\\"Purchase Tax Payment\\\",\n\t\t\t\t\\\"Inventory Qty Adjust\\\",\n\t\t\t]\n\t\t\tfor entity in entities_for_gl_transform:\n\t\t\t\tself._migrate_entries_from_gl(entity)\n\t\t\tself.set_indicator(\\\"Complete\\\")\n\t\texcept Exception as e:\n\t\t\tself.set_indicator(\\\"Failed\\\")\n\t\t\tself._log_error(e)\n\n\t\tfrappe.db.commit()\n\n\tdef get_tokens(self):\n\t\ttoken = self.oauth.fetch_token(\n\t\t\ttoken_url=self.token_endpoint, client_secret=self.client_secret, code=self.code\n\t\t)\n\t\tself.access_token = token[\\\"access_token\\\"]\n\t\tself.refresh_token = token[\\\"refresh_token\\\"]\n\t\tself.save()\n\n\tdef _refresh_tokens(self):\n\t\ttoken = self.oauth.refresh_token(\n\t\t\ttoken_url=self.token_endpoint,\n\t\t\tclient_id=self.client_id,\n\t\t\trefresh_token=self.refresh_token,\n\t\t\tclient_secret=self.client_secret,\n\t\t\tcode=self.code,\n\t\t)\n\t\tself.access_token = token[\\\"access_token\\\"]\n\t\tself.refresh_token = token[\\\"refresh_token\\\"]\n\t\tself.save()\n\n\tdef _make_custom_fields(self):\n\t\tdoctypes_for_quickbooks_id_field = [\n\t\t\t\\\"Account\\\",\n\t\t\t\\\"Customer\\\",\n\t\t\t\\\"Address\\\",\n\t\t\t\\\"Item\\\",\n\t\t\t\\\"Supplier\\\",\n\t\t\t\\\"Sales Invoice\\\",\n\t\t\t\\\"Journal Entry\\\",\n\t\t\t\\\"Purchase Invoice\\\",\n\t\t]\n\t\tfor doctype in doctypes_for_quickbooks_id_field:\n\t\t\tself._make_custom_quickbooks_id_field(doctype)\n\n\t\tdoctypes_for_company_field = [\\\"Customer\\\", \\\"Item\\\", \\\"Supplier\\\"]\n\t\tfor doctype in doctypes_for_company_field:\n\t\t\tself._make_custom_company_field(doctype)\n\n\t\tfrappe.db.commit()\n\n\tdef _make_custom_quickbooks_id_field(self, doctype):\n\t\tif not frappe.get_meta(doctype).has_field(\\\"quickbooks_id\\\"):\n\t\t\tfrappe.get_doc(\n\t\t\t\t{\n\t\t\t\t\t\\\"doctype\\\": \\\"Custom Field\\\",\n\t\t\t\t\t\\\"label\\\": \\\"QuickBooks ID\\\",\n\t\t\t\t\t\\\"dt\\\": doctype,\n\t\t\t\t\t\\\"fieldname\\\": \\\"quickbooks_id\\\",\n\t\t\t\t\t\\\"fieldtype\\\": \\\"Data\\\",\n\t\t\t\t}\n\t\t\t).insert()\n\n\tdef _make_custom_company_field(self, doctype):\n\t\tif not frappe.get_meta(doctype).has_field(\\\"company\\\"):\n\t\t\tfrappe.get_doc(\n\t\t\t\t{\n\t\t\t\t\t\\\"doctype\\\": \\\"Custom Field\\\",\n\t\t\t\t\t\\\"label\\\": \\\"Company\\\",\n\t\t\t\t\t\\\"dt\\\": doctype,\n\t\t\t\t\t\\\"fieldname\\\": \\\"company\\\",\n\t\t\t\t\t\\\"fieldtype\\\": \\\"Link\\\",\n\t\t\t\t\t\\\"options\\\": \\\"Company\\\",\n\t\t\t\t}\n\t\t\t).insert()\n\n\tdef _migrate_accounts(self):\n\t\tself._make_root_accounts()\n\t\tfor entity in [\\\"Account\\\", \\\"TaxRate\\\", \\\"TaxCode\\\"]:\n\t\t\tself._migrate_entries(entity)\n\n\tdef _make_root_accounts(self):\n\t\troots = [\\\"Asset\\\", \\\"Equity\\\", \\\"Expense\\\", \\\"Liability\\\", \\\"Income\\\"]\n\t\tfor root in roots:\n\t\t\ttry:\n\t\t\t\tif not frappe.db.exists(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Account\\\",\n\t\t\t\t\t\t\\\"name\\\": encode_company_abbr(f\\\"{root} - QB\\\", self.company),\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t):\n\t\t\t\t\tfrappe.get_doc(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\\\"doctype\\\": \\\"Account\\\",\n\t\t\t\t\t\t\t\\\"account_name\\\": f\\\"{root} - QB\\\",\n\t\t\t\t\t\t\t\\\"root_type\\\": root,\n\t\t\t\t\t\t\t\\\"is_group\\\": \\\"1\\\",\n\t\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t\t}\n\t\t\t\t\t).insert(ignore_mandatory=True)\n\t\t\texcept Exception as e:\n\t\t\t\tself._log_error(e, root)\n\t\tfrappe.db.commit()\n\n\n\n", "CodeBleu_score": 23.221648862420047}, {"code": "def _migrate_entries(self, entity)\n\tMigrator\\\", \\\"_migrate\\\", queue=\\\"long\\\")\n\n\tdef _migrate(self):\n\t\ttry:\n\t\t\tself.set_indicator(\\\"In Progress\\\")\n\t\t\t# Add quickbooks_id field to every document so that we can lookup by Id reference\n\t\t\t# provided by documents in API responses.\n\t\t\t# Also add a company field to Customer Supplier and Item\n\t\t\tself._make_custom_fields()\n\n\t\t\tself._migrate_accounts()\n\n\t\t\t# Some Quickbooks Entities like Advance Payment, Payment aren't available firectly from API\n\t\t\t# Sales Invoice also sometimes needs to be saved as a Journal Entry\n\t\t\t# (When Item table is not present, This appens when Invoice is attached with a \\\"StatementCharge\\\" \\\"ReimburseCharge\n\t\t\t# Details of both of these cannot be fetched from API)\n\t\t\t# Their GL entries need to be generated from GeneralLedger Report.\n\t\t\tself._fetch_general_ledger()\n\n\t\t\t# QuickBooks data can have transactions that do not fall in existing fiscal years in ERPNext\n\t\t\tself._create_fiscal_years()\n\n\t\t\tself._allow_fraction_in_unit()\n\n\t\t\t# Following entities are directly available from API\n\t\t\t# Invoice can be an exception sometimes though (as explained above).\n\t\t\tentities_for_normal_transform = [\n\t\t\t\t\\\"Customer\\\",\n\t\t\t\t\\\"Item\\\",\n\t\t\t\t\\\"Vendor\\\",\n\t\t\t\t\\\"Preferences\\\",\n\t\t\t\t\\\"JournalEntry\\\",\n\t\t\t\t\\\"Purchase\\\",\n\t\t\t\t\\\"Deposit\\\",\n\t\t\t\t\\\"Invoice\\\",\n\t\t\t\t\\\"CreditMemo\\\",\n\t\t\t\t\\\"SalesReceipt\\\",\n\t\t\t\t\\\"RefundReceipt\\\",\n\t\t\t\t\\\"Bill\\\",\n\t\t\t\t\\\"VendorCredit\\\",\n\t\t\t\t\\\"Payment\\\",\n\t\t\t\t\\\"BillPayment\\\",\n\t\t\t]\n\t\t\tfor entity in entities_for_normal_transform:\n\t\t\t\tself._migrate_entries(entity)\n\n\t\t\t# Following entries are not available directly from API, Need to be regenrated from GeneralLedger Report\n\t\t\tentities_for_gl_transform = [\n\t\t\t\t\\\"Advance Payment\\\",\n\t\t\t\t\\\"Tax Payment\\\",\n\t\t\t\t\\\"Sales Tax Payment\\\",\n\t\t\t\t\\\"Purchase Tax Payment\\\",\n\t\t\t\t\\\"Inventory Qty Adjust\\\",\n\t\t\t]\n\t\t\tfor entity in entities_for_gl_transform:\n\t\t\t\tself._migrate_entries_from_gl(entity)\n\t\t\tself.set_indicator(\\\"Complete\\\")\n\t\texcept Exception as e:\n\t\t\tself.set_indicator(\\\"Failed\\\")\n\t\t\tself._log_error(e)\n\n\t\tfrappe.db.commit()\n\n\tdef get_tokens(self):\n\t\ttoken = self.oauth.fetch_token(\n\t\t\ttoken_url=self.token_endpoint, client_secret=self.client_secret, code=self.code\n\t\t)\n\t\tself.access_token = token[\\\"access_token\\\"]\n\t\tself.refresh_token = token[\\\"refresh_token\\\"]\n\t\tself.save()\n\n\tdef _refresh_tokens(self):\n\t\ttoken = self.oauth.refresh_token(\n\t\t\ttoken_url=self.token_endpoint,\n\t\t\tclient_id=self.client_id,\n\t\t\trefresh_token=self.refresh_token,\n\t\t\tclient_secret=self.client_secret,\n\t\t\tcode=self.code,\n\t\t)\n\t\tself.access_token = token[\\\"access_token\\\"]\n\t\tself.refresh_token = token[\\\"refresh_token\\\"]\n\t\tself.save()\n\n\tdef _make_custom_fields(self):\n\t\tdoctypes_for_quickbooks_id_field = [\n\t\t\t\\\"Account\\\",\n\t\t\t\\\"Customer\\\",\n\t\t\t\\\"Address\\\",\n\t\t\t\\\"Item\\\",\n\t\t\t\\\"Supplier\\\",\n\t\t\t\\\"Sales Invoice\\\",\n\t\t\t\\\"Journal Entry\\\",\n\t\t\t\\\"Purchase Invoice\\\",\n\t\t]\n\t\tfor doctype in doctypes_for_quickbooks_id_field:\n\t\t\tself._make_custom_quickbooks_id_field(doctype)\n\n\t\tdoctypes_for_company_field = [\\\"Customer\\\", \\\"Item\\\", \\\"Supplier\\\"]\n\t\tfor doctype in doctypes_for_company_field:\n\t\t\tself._make_custom_company_field(doctype)\n\n\t\tfrappe.db.commit()\n\n\tdef _make_custom_quickbooks_id_field(self, doctype):\n\t\tif not frappe.get_meta(doctype).has_field(\\\"quickbooks_id\\\"):\n\t\t\tfrappe.get_doc(\n\t\t\t\t{\n\t\t\t\t\t\\\"doctype\\\": \\\"Custom Field\\\",\n\t\t\t\t\t\\\"label\\\": \\\"QuickBooks ID\\\",\n\t\t\t\t\t\\\"dt\\\": doctype,\n\t\t\t\t\t\\\"fieldname\\\": \\\"quickbooks_id\\\",\n\t\t\t\t\t\\\"fieldtype\\\": \\\"Data\\\",\n\t\t\t\t}\n\t\t\t).insert()\n\n\tdef _make_custom_company_field(self, doctype):\n\t\tif not frappe.get_meta(doctype).has_field(\\\"company\\\"):\n\t\t\tfrappe.get_doc(\n\t\t\t\t{\n\t\t\t\t\t\\\"doctype\\\": \\\"Custom Field\\\",\n\t\t\t\t\t\\\"label\\\": \\\"Company\\\",\n\t\t\t\t\t\\\"dt\\\": doctype,\n\t\t\t\t\t\\\"fieldname\\\": \\\"company\\\",\n\t\t\t\t\t\\\"fieldtype\\\": \\\"Link\\\",\n\t\t\t\t\t\\\"options\\\": \\\"Company\\\",\n\t\t\t\t}\n\t\t\t).insert()\n\n\tdef _migrate_accounts(self):\n\t\tself._make_root_accounts()\n\t\tfor entity in [\\\"Account\\\", \\\"TaxRate\\\", \\\"TaxCode\\\"]:\n\t\t\tself._migrate_entries(entity)\n\n\tdef _make_root_accounts(self):\n\t\troots = [\\\"Asset\\\", \\\"Equity\\\", \\\"Expense\\\", \\\"Liability\\\", \\\"Income\\\"]\n\t\tfor root in roots:\n\t\t\ttry:\n\t\t\t\tif not frappe.db.exists(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Account\\\",\n\t\t\t\t\t\t\\\"name\\\": encode_company_abbr(f\\\"{root} - QB\\\", self.company),\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t):\n\t\t\t\t\tfrappe.get_doc(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\\\"doctype\\\": \\\"Account\\\",\n\t\t\t\t\t\t\t\\\"account_name\\\": f\\\"{root} - QB\\\",\n\t\t\t\t\t\t\t\\\"root_type\\\": root,\n\t\t\t\t\t\t\t\\\"is_group\\\": \\\"1\\\",\n\t\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t\t}\n\t\t\t\t\t).insert(ignore_mandatory=True)\n\t\t\texcept Exception as e:\n\t\t\t\tself._log_error(e, root)\n\t\tfrappe.db.commit()\n\n\n\n", "CodeBleu_score": 23.221648862420047}, {"code": "def _migrate_entries(self, entity)\n\tMigrator\\\", \\\"_migrate\\\", queue=\\\"long\\\")\n\n\tdef _migrate(self):\n\t\ttry:\n\t\t\tself.set_indicator(\\\"In Progress\\\")\n\t\t\t# Add quickbooks_id field to every document so that we can lookup by Id reference\n\t\t\t# provided by documents in API responses.\n\t\t\t# Also add a company field to Customer Supplier and Item\n\t\t\tself._make_custom_fields()\n\n\t\t\tself._migrate_accounts()\n\n\t\t\t# Some Quickbooks Entities like Advance Payment, Payment aren't available firectly from API\n\t\t\t# Sales Invoice also sometimes needs to be saved as a Journal Entry\n\t\t\t# (When Item table is not present, This appens when Invoice is attached with a \\\"StatementCharge\\\" \\\"ReimburseCharge\n\t\t\t# Details of both of these cannot be fetched from API)\n\t\t\t# Their GL entries need to be generated from GeneralLedger Report.\n\t\t\tself._fetch_general_ledger()\n\n\t\t\t# QuickBooks data can have transactions that do not fall in existing fiscal years in ERPNext\n\t\t\tself._create_fiscal_years()\n\n\t\t\tself._allow_fraction_in_unit()\n\n\t\t\t# Following entities are directly available from API\n\t\t\t# Invoice can be an exception sometimes though (as explained above).\n\t\t\tentities_for_normal_transform = [\n\t\t\t\t\\\"Customer\\\",\n\t\t\t\t\\\"Item\\\",\n\t\t\t\t\\\"Vendor\\\",\n\t\t\t\t\\\"Preferences\\\",\n\t\t\t\t\\\"JournalEntry\\\",\n\t\t\t\t\\\"Purchase\\\",\n\t\t\t\t\\\"Deposit\\\",\n\t\t\t\t\\\"Invoice\\\",\n\t\t\t\t\\\"CreditMemo\\\",\n\t\t\t\t\\\"SalesReceipt\\\",\n\t\t\t\t\\\"RefundReceipt\\\",\n\t\t\t\t\\\"Bill\\\",\n\t\t\t\t\\\"VendorCredit\\\",\n\t\t\t\t\\\"Payment\\\",\n\t\t\t\t\\\"BillPayment\\\",\n\t\t\t]\n\t\t\tfor entity in entities_for_normal_transform:\n\t\t\t\tself._migrate_entries(entity)\n\n\t\t\t# Following entries are not available directly from API, Need to be regenrated from GeneralLedger Report\n\t\t\tentities_for_gl_transform = [\n\t\t\t\t\\\"Advance Payment\\\",\n\t\t\t\t\\\"Tax Payment\\\",\n\t\t\t\t\\\"Sales Tax Payment\\\",\n\t\t\t\t\\\"Purchase Tax Payment\\\",\n\t\t\t\t\\\"Inventory Qty Adjust\\\",\n\t\t\t]\n\t\t\tfor entity in entities_for_gl_transform:\n\t\t\t\tself._migrate_entries_from_gl(entity)\n\t\t\tself.set_indicator(\\\"Complete\\\")\n\t\texcept Exception as e:\n\t\t\tself.set_indicator(\\\"Failed\\\")\n\t\t\tself._log_error(e)\n\n\t\tfrappe.db.commit()\n\n\tdef get_tokens(self):\n\t\ttoken = self.oauth.fetch_token(\n\t\t\ttoken_url=self.token_endpoint, client_secret=self.client_secret, code=self.code\n\t\t)\n\t\tself.access_token = token[\\\"access_token\\\"]\n\t\tself.refresh_token = token[\\\"refresh_token\\\"]\n\t\tself.save()\n\n\tdef _refresh_tokens(self):\n\t\ttoken = self.oauth.refresh_token(\n\t\t\ttoken_url=self.token_endpoint,\n\t\t\tclient_id=self.client_id,\n\t\t\trefresh_token=self.refresh_token,\n\t\t\tclient_secret=self.client_secret,\n\t\t\tcode=self.code,\n\t\t)\n\t\tself.access_token = token[\\\"access_token\\\"]\n\t\tself.refresh_token = token[\\\"refresh_token\\\"]\n\t\tself.save()\n\n\tdef _make_custom_fields(self):\n\t\tdoctypes_for_quickbooks_id_field = [\n\t\t\t\\\"Account\\\",\n\t\t\t\\\"Customer\\\",\n\t\t\t\\\"Address\\\",\n\t\t\t\\\"Item\\\",\n\t\t\t\\\"Supplier\\\",\n\t\t\t\\\"Sales Invoice\\\",\n\t\t\t\\\"Journal Entry\\\",\n\t\t\t\\\"Purchase Invoice\\\",\n\t\t]\n\t\tfor doctype in doctypes_for_quickbooks_id_field:\n\t\t\tself._make_custom_quickbooks_id_field(doctype)\n\n\t\tdoctypes_for_company_field = [\\\"Customer\\\", \\\"Item\\\", \\\"Supplier\\\"]\n\t\tfor doctype in doctypes_for_company_field:\n\t\t\tself._make_custom_company_field(doctype)\n\n\t\tfrappe.db.commit()\n\n\tdef _make_custom_quickbooks_id_field(self, doctype):\n\t\tif not frappe.get_meta(doctype).has_field(\\\"quickbooks_id\\\"):\n\t\t\tfrappe.get_doc(\n\t\t\t\t{\n\t\t\t\t\t\\\"doctype\\\": \\\"Custom Field\\\",\n\t\t\t\t\t\\\"label\\\": \\\"QuickBooks ID\\\",\n\t\t\t\t\t\\\"dt\\\": doctype,\n\t\t\t\t\t\\\"fieldname\\\": \\\"quickbooks_id\\\",\n\t\t\t\t\t\\\"fieldtype\\\": \\\"Data\\\",\n\t\t\t\t}\n\t\t\t).insert()\n\n\tdef _make_custom_company_field(self, doctype):\n\t\tif not frappe.get_meta(doctype).has_field(\\\"company\\\"):\n\t\t\tfrappe.get_doc(\n\t\t\t\t{\n\t\t\t\t\t\\\"doctype\\\": \\\"Custom Field\\\",\n\t\t\t\t\t\\\"label\\\": \\\"Company\\\",\n\t\t\t\t\t\\\"dt\\\": doctype,\n\t\t\t\t\t\\\"fieldname\\\": \\\"company\\\",\n\t\t\t\t\t\\\"fieldtype\\\": \\\"Link\\\",\n\t\t\t\t\t\\\"options\\\": \\\"Company\\\",\n\t\t\t\t}\n\t\t\t).insert()\n\n\tdef _migrate_accounts(self):\n\t\tself._make_root_accounts()\n\t\tfor entity in [\\\"Account\\\", \\\"TaxRate\\\", \\\"TaxCode\\\"]:\n\t\t\tself._migrate_entries(entity)\n\n\tdef _make_root_accounts(self):\n\t\troots = [\\\"Asset\\\", \\\"Equity\\\", \\\"Expense\\\", \\\"Liability\\\", \\\"Income\\\"]\n\t\tfor root in roots:\n\t\t\ttry:\n\t\t\t\tif not frappe.db.exists(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Account\\\",\n\t\t\t\t\t\t\\\"name\\\": encode_company_abbr(f\\\"{root} - QB\\\", self.company),\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t):\n\t\t\t\t\tfrappe.get_doc(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\\\"doctype\\\": \\\"Account\\\",\n\t\t\t\t\t\t\t\\\"account_name\\\": f\\\"{root} - QB\\\",\n\t\t\t\t\t\t\t\\\"root_type\\\": root,\n\t\t\t\t\t\t\t\\\"is_group\\\": \\\"1\\\",\n\t\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t\t}\n\t\t\t\t\t).insert(ignore_mandatory=True)\n\t\t\texcept Exception as e:\n\t\t\t\tself._log_error(e, root)\n\t\tfrappe.db.commit()\n\n\n\n", "CodeBleu_score": 23.221648862420047}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\tself.company,\n\t\t\t\t}\n\t\t\t):\n\t\t\t\tfrappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Account\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": \\\"TaxRate - {}\\\".format(tax_rate[\\\"Id\\\"]),\n\t\t\t\t\t\t\\\"account_name\\\": \\\"{} - QB\\\".format(tax_rate[\\\"Name\\\"]),\n\t\t\t\t\t\t\\\"root_type\\\": \\\"Liability\\\",\n\t\t\t\t\t\t\\\"parent_account\\\": encode_company_abbr(\\\"{} - QB\\\".format(\\\"Liability\\\"), self.company),\n\t\t\t\t\t\t\\\"is_group\\\": \\\"0\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t).insert()\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, tax_rate)\n\n\tdef _preprocess_tax_codes(self, tax_codes):\n\t\tself.tax_codes = {tax_code[\\\"Id\\\"]: tax_code for tax_code in tax_codes}\n\t\treturn tax_codes\n\n\tdef _save_tax_code(self, tax_code):\n\t\tpass\n\n\tdef _save_customer(self, customer):\n\t\ttry:\n\t\t\tif not frappe.db.exists(\n\t\t\t\t{\\\"doctype\\\": \\\"Customer\\\", \\\"quickbooks_id\\\": customer[\\\"Id\\\"], \\\"company\\\": self.company}\n\t\t\t):\n\t\t\t\ttry:\n\t\t\t\t\treceivable_account = frappe.get_all(\n\t\t\t\t\t\t\\\"Account\\\",\n\t\t\t\t\t\tfilters={\n\t\t\t\t\t\t\t\\\"account_type\\\": \\\"Receivable\\\",\n\t\t\t\t\t\t\t\\\"account_currency\\\": customer[\\\"CurrencyRef\\\"][\\\"value\\\"],\n\t\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t\t},\n\t\t\t\t\t)[0][\\\"name\\\"]\n\t\t\t\texcept Exception:\n\t\t\t\t\treceivable_account = None\n\t\t\t\terpcustomer = frappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Customer\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": customer[\\\"Id\\\"],\n\t\t\t\t\t\t\\\"customer_name\\\": encode_company_abbr(customer[\\\"DisplayName\\\"], self.company),\n\t\t\t\t\t\t\\\"customer_type\\\": \\\"Individual\\\",\n\t\t\t\t\t\t\\\"customer_group\\\": \\\"Commercial\\\",\n\t\t\t\t\t\t\\\"default_currency\\\": customer[\\\"CurrencyRef\\\"][\\\"value\\\"],\n\t\t\t\t\t\t\\\"accounts\\\": [{\\\"company\\\": self.company, \\\"account\\\": receivable_account}],\n\t\t\t\t\t\t\\\"territory\\\": \\\"All Territories\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t).insert()\n\t\t\t\tif \\\"BillAddr\\\" in customer:\n\t\t\t\t\tself._create_address(erpcustomer, \\\"Customer\\\", customer[\\\"BillAddr\\\"], \\\"Billing\\\")\n\t\t\t\tif \\\"ShipAddr\\\" in customer:\n\t\t\t\t\tself._create_address(erpcustomer, \\\"Customer\\\", customer[\\\"ShipAddr\\\"], \\\"Shipping\\\")\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, customer)\n\n\tdef _save_item(self, item):\n\t\ttry:\n\t\t\tif not frappe.db.exists(\n\t\t\t\t{\\\"doctype\\\": \\\"Item\\\", \\\"quickbooks_id\\\": item[\\\"Id\\\"], \\\"company\\\": self.company}\n\t\t\t):\n\t\t\t\tif item[\\\"Type\\\"] in (\\\"Service\\\", \\\"Inventory\\\"):\n\t\t\t\t\titem_dict = {\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Item\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": item[\\\"Id\\\"],\n\t\t\t\t\t\t\\\"item_code\\\": encode_company_abbr(item[\\\"Name\\\"], self.company),\n\t\t\t\t\t\t\\\"stock_uom\\\": \\\"Unit\\\",\n\t\t\t\t\t\t\\\"is_stock_item\\\": 0,\n\t\t\t\t\t\t\\\"item_group\\\": \\\"All Item Groups\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t\t\\\"item_defaults\\\": [\n\t\t\t\t\t\t\t{\\\"company\\\": self.company, \\\"default_warehouse\\\": self.default_warehouse}\n\t\t\t\t\t\t],\n\t\t\t\t\t}\n\t\t\t\t\tif \\\"ExpenseAccountRef\\\" in item:\n\t\t\t\t\t\texpense_account = self._get_account_name_by_id(item[\\\"ExpenseAccountRef\\\"][\\\"value\\\"])\n\t\t\t\t\t\titem_dict[\\\"item_defaults\\\"][0][\\\"expense_account\\\"] = expense_account\n\t\t\t\t\tif \\\"IncomeAccountRef\\\" in item:\n\t\t\t\t\t\tincome_account = self._get_account_name_by_id(item[\\\"IncomeAccountRef\\\"][\\\"value\\\"])\n\t\t\t\t\t\titem_dict[\\\"item_defaults\\\"][0][\\\"income_account\\\"] = income_account\n\t\t\t\t\tfrappe.get_doc(item_dict).insert()\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, item)\n\n\tdef _allow_fraction_in_unit(self):\n\t\tfrappe.db.set_value(\\\"UOM\\\", \\\"Unit\\\", \\\"must_be_whole_number\\\", 0)\n\n\tdef _save_vendor(self, vendor):\n\t\ttry:\n\t\t\tif not frappe.db.exists(\n\t\t\t\t{\\\"doctype\\\": \\\"Supplier\\\", \\\"quickbooks_id\\\": vendor[\\\"Id\\\"], \\\"company\\\": self.company}\n\t\t\t):\n\t\t\t\terpsupplier = frappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Supplier\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": vendor[\\\"Id\\\"],\n\t\t\t\t\t\t\\\"supplier_name\\\": encode_company_abbr(vendor[\\\"DisplayName\\\"], self.company),\n\t\t\t\t\t\t\\\"supplier_group\\\": \\\"All Supplier Groups\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t).insert()\n\t\t\t\tif \\\"BillAddr\\\" in vendor:\n\t\t\t\t\tself._create_address(erpsupplier, \\\"Supplier\\\", vendor[\\\"BillAddr\\\"], \\\"Billing\\\")\n\t\t\t\tif \\\"ShipAddr\\\" in vendor:\n\t\t\t\t\tself._create_address(erpsupplier, \\\"Supplier\\\", vendor[\\\"ShipAddr\\\"], \\\"Shipping\\\")\n\t\texcept Exception as e:\n\t\t\tself._log_error(e)\n\n\tdef _save_preference(self, preference):\n\t\ttry:\n\t\t\tif preference[\\\"SalesFormsPrefs\\\"][\\\"AllowShipping\\\"]:\n\t\t\t\tdefault_shipping_account_id = preference[\\\"SalesFormsPrefs\\\"][\\\"DefaultShippingAccount\\\"]\n\t\t\t\tself.default_shipping_account = self._get_account_name_by_id(\n\t\t\t\t\tself, default_shipping_account_id\n\t\t\t\t)\n\t\t\t\tself.save()\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, preference)\n\n\n\n", "CodeBleu_score": 26.955857025100936}, {"code": "def _save_invoice(self, invoice)\n\tself.company,\n\t\t\t\t}\n\t\t\t):\n\t\t\t\tfrappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Account\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": \\\"TaxRate - {}\\\".format(tax_rate[\\\"Id\\\"]),\n\t\t\t\t\t\t\\\"account_name\\\": \\\"{} - QB\\\".format(tax_rate[\\\"Name\\\"]),\n\t\t\t\t\t\t\\\"root_type\\\": \\\"Liability\\\",\n\t\t\t\t\t\t\\\"parent_account\\\": encode_company_abbr(\\\"{} - QB\\\".format(\\\"Liability\\\"), self.company),\n\t\t\t\t\t\t\\\"is_group\\\": \\\"0\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t).insert()\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, tax_rate)\n\n\tdef _preprocess_tax_codes(self, tax_codes):\n\t\tself.tax_codes = {tax_code[\\\"Id\\\"]: tax_code for tax_code in tax_codes}\n\t\treturn tax_codes\n\n\tdef _save_tax_code(self, tax_code):\n\t\tpass\n\n\tdef _save_customer(self, customer):\n\t\ttry:\n\t\t\tif not frappe.db.exists(\n\t\t\t\t{\\\"doctype\\\": \\\"Customer\\\", \\\"quickbooks_id\\\": customer[\\\"Id\\\"], \\\"company\\\": self.company}\n\t\t\t):\n\t\t\t\ttry:\n\t\t\t\t\treceivable_account = frappe.get_all(\n\t\t\t\t\t\t\\\"Account\\\",\n\t\t\t\t\t\tfilters={\n\t\t\t\t\t\t\t\\\"account_type\\\": \\\"Receivable\\\",\n\t\t\t\t\t\t\t\\\"account_currency\\\": customer[\\\"CurrencyRef\\\"][\\\"value\\\"],\n\t\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t\t},\n\t\t\t\t\t)[0][\\\"name\\\"]\n\t\t\t\texcept Exception:\n\t\t\t\t\treceivable_account = None\n\t\t\t\terpcustomer = frappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Customer\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": customer[\\\"Id\\\"],\n\t\t\t\t\t\t\\\"customer_name\\\": encode_company_abbr(customer[\\\"DisplayName\\\"], self.company),\n\t\t\t\t\t\t\\\"customer_type\\\": \\\"Individual\\\",\n\t\t\t\t\t\t\\\"customer_group\\\": \\\"Commercial\\\",\n\t\t\t\t\t\t\\\"default_currency\\\": customer[\\\"CurrencyRef\\\"][\\\"value\\\"],\n\t\t\t\t\t\t\\\"accounts\\\": [{\\\"company\\\": self.company, \\\"account\\\": receivable_account}],\n\t\t\t\t\t\t\\\"territory\\\": \\\"All Territories\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t).insert()\n\t\t\t\tif \\\"BillAddr\\\" in customer:\n\t\t\t\t\tself._create_address(erpcustomer, \\\"Customer\\\", customer[\\\"BillAddr\\\"], \\\"Billing\\\")\n\t\t\t\tif \\\"ShipAddr\\\" in customer:\n\t\t\t\t\tself._create_address(erpcustomer, \\\"Customer\\\", customer[\\\"ShipAddr\\\"], \\\"Shipping\\\")\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, customer)\n\n\tdef _save_item(self, item):\n\t\ttry:\n\t\t\tif not frappe.db.exists(\n\t\t\t\t{\\\"doctype\\\": \\\"Item\\\", \\\"quickbooks_id\\\": item[\\\"Id\\\"], \\\"company\\\": self.company}\n\t\t\t):\n\t\t\t\tif item[\\\"Type\\\"] in (\\\"Service\\\", \\\"Inventory\\\"):\n\t\t\t\t\titem_dict = {\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Item\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": item[\\\"Id\\\"],\n\t\t\t\t\t\t\\\"item_code\\\": encode_company_abbr(item[\\\"Name\\\"], self.company),\n\t\t\t\t\t\t\\\"stock_uom\\\": \\\"Unit\\\",\n\t\t\t\t\t\t\\\"is_stock_item\\\": 0,\n\t\t\t\t\t\t\\\"item_group\\\": \\\"All Item Groups\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t\t\\\"item_defaults\\\": [\n\t\t\t\t\t\t\t{\\\"company\\\": self.company, \\\"default_warehouse\\\": self.default_warehouse}\n\t\t\t\t\t\t],\n\t\t\t\t\t}\n\t\t\t\t\tif \\\"ExpenseAccountRef\\\" in item:\n\t\t\t\t\t\texpense_account = self._get_account_name_by_id(item[\\\"ExpenseAccountRef\\\"][\\\"value\\\"])\n\t\t\t\t\t\titem_dict[\\\"item_defaults\\\"][0][\\\"expense_account\\\"] = expense_account\n\t\t\t\t\tif \\\"IncomeAccountRef\\\" in item:\n\t\t\t\t\t\tincome_account = self._get_account_name_by_id(item[\\\"IncomeAccountRef\\\"][\\\"value\\\"])\n\t\t\t\t\t\titem_dict[\\\"item_defaults\\\"][0][\\\"income_account\\\"] = income_account\n\t\t\t\t\tfrappe.get_doc(item_dict).insert()\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, item)\n\n\tdef _allow_fraction_in_unit(self):\n\t\tfrappe.db.set_value(\\\"UOM\\\", \\\"Unit\\\", \\\"must_be_whole_number\\\", 0)\n\n\tdef _save_vendor(self, vendor):\n\t\ttry:\n\t\t\tif not frappe.db.exists(\n\t\t\t\t{\\\"doctype\\\": \\\"Supplier\\\", \\\"quickbooks_id\\\": vendor[\\\"Id\\\"], \\\"company\\\": self.company}\n\t\t\t):\n\t\t\t\terpsupplier = frappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Supplier\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": vendor[\\\"Id\\\"],\n\t\t\t\t\t\t\\\"supplier_name\\\": encode_company_abbr(vendor[\\\"DisplayName\\\"], self.company),\n\t\t\t\t\t\t\\\"supplier_group\\\": \\\"All Supplier Groups\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t).insert()\n\t\t\t\tif \\\"BillAddr\\\" in vendor:\n\t\t\t\t\tself._create_address(erpsupplier, \\\"Supplier\\\", vendor[\\\"BillAddr\\\"], \\\"Billing\\\")\n\t\t\t\tif \\\"ShipAddr\\\" in vendor:\n\t\t\t\t\tself._create_address(erpsupplier, \\\"Supplier\\\", vendor[\\\"ShipAddr\\\"], \\\"Shipping\\\")\n\t\texcept Exception as e:\n\t\t\tself._log_error(e)\n\n\tdef _save_preference(self, preference):\n\t\ttry:\n\t\t\tif preference[\\\"SalesFormsPrefs\\\"][\\\"AllowShipping\\\"]:\n\t\t\t\tdefault_shipping_account_id = preference[\\\"SalesFormsPrefs\\\"][\\\"DefaultShippingAccount\\\"]\n\t\t\t\tself.default_shipping_account = self._get_account_name_by_id(\n\t\t\t\t\tself, default_shipping_account_id\n\t\t\t\t)\n\t\t\t\tself.save()\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, preference)\n\n\n\n", "CodeBleu_score": 26.955857025100936}, {"code": "def _save_invoice(self, invoice)\n\tself.company,\n\t\t\t\t}\n\t\t\t):\n\t\t\t\tfrappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Account\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": \\\"TaxRate - {}\\\".format(tax_rate[\\\"Id\\\"]),\n\t\t\t\t\t\t\\\"account_name\\\": \\\"{} - QB\\\".format(tax_rate[\\\"Name\\\"]),\n\t\t\t\t\t\t\\\"root_type\\\": \\\"Liability\\\",\n\t\t\t\t\t\t\\\"parent_account\\\": encode_company_abbr(\\\"{} - QB\\\".format(\\\"Liability\\\"), self.company),\n\t\t\t\t\t\t\\\"is_group\\\": \\\"0\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t).insert()\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, tax_rate)\n\n\tdef _preprocess_tax_codes(self, tax_codes):\n\t\tself.tax_codes = {tax_code[\\\"Id\\\"]: tax_code for tax_code in tax_codes}\n\t\treturn tax_codes\n\n\tdef _save_tax_code(self, tax_code):\n\t\tpass\n\n\tdef _save_customer(self, customer):\n\t\ttry:\n\t\t\tif not frappe.db.exists(\n\t\t\t\t{\\\"doctype\\\": \\\"Customer\\\", \\\"quickbooks_id\\\": customer[\\\"Id\\\"], \\\"company\\\": self.company}\n\t\t\t):\n\t\t\t\ttry:\n\t\t\t\t\treceivable_account = frappe.get_all(\n\t\t\t\t\t\t\\\"Account\\\",\n\t\t\t\t\t\tfilters={\n\t\t\t\t\t\t\t\\\"account_type\\\": \\\"Receivable\\\",\n\t\t\t\t\t\t\t\\\"account_currency\\\": customer[\\\"CurrencyRef\\\"][\\\"value\\\"],\n\t\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t\t},\n\t\t\t\t\t)[0][\\\"name\\\"]\n\t\t\t\texcept Exception:\n\t\t\t\t\treceivable_account = None\n\t\t\t\terpcustomer = frappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Customer\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": customer[\\\"Id\\\"],\n\t\t\t\t\t\t\\\"customer_name\\\": encode_company_abbr(customer[\\\"DisplayName\\\"], self.company),\n\t\t\t\t\t\t\\\"customer_type\\\": \\\"Individual\\\",\n\t\t\t\t\t\t\\\"customer_group\\\": \\\"Commercial\\\",\n\t\t\t\t\t\t\\\"default_currency\\\": customer[\\\"CurrencyRef\\\"][\\\"value\\\"],\n\t\t\t\t\t\t\\\"accounts\\\": [{\\\"company\\\": self.company, \\\"account\\\": receivable_account}],\n\t\t\t\t\t\t\\\"territory\\\": \\\"All Territories\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t).insert()\n\t\t\t\tif \\\"BillAddr\\\" in customer:\n\t\t\t\t\tself._create_address(erpcustomer, \\\"Customer\\\", customer[\\\"BillAddr\\\"], \\\"Billing\\\")\n\t\t\t\tif \\\"ShipAddr\\\" in customer:\n\t\t\t\t\tself._create_address(erpcustomer, \\\"Customer\\\", customer[\\\"ShipAddr\\\"], \\\"Shipping\\\")\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, customer)\n\n\tdef _save_item(self, item):\n\t\ttry:\n\t\t\tif not frappe.db.exists(\n\t\t\t\t{\\\"doctype\\\": \\\"Item\\\", \\\"quickbooks_id\\\": item[\\\"Id\\\"], \\\"company\\\": self.company}\n\t\t\t):\n\t\t\t\tif item[\\\"Type\\\"] in (\\\"Service\\\", \\\"Inventory\\\"):\n\t\t\t\t\titem_dict = {\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Item\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": item[\\\"Id\\\"],\n\t\t\t\t\t\t\\\"item_code\\\": encode_company_abbr(item[\\\"Name\\\"], self.company),\n\t\t\t\t\t\t\\\"stock_uom\\\": \\\"Unit\\\",\n\t\t\t\t\t\t\\\"is_stock_item\\\": 0,\n\t\t\t\t\t\t\\\"item_group\\\": \\\"All Item Groups\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t\t\\\"item_defaults\\\": [\n\t\t\t\t\t\t\t{\\\"company\\\": self.company, \\\"default_warehouse\\\": self.default_warehouse}\n\t\t\t\t\t\t],\n\t\t\t\t\t}\n\t\t\t\t\tif \\\"ExpenseAccountRef\\\" in item:\n\t\t\t\t\t\texpense_account = self._get_account_name_by_id(item[\\\"ExpenseAccountRef\\\"][\\\"value\\\"])\n\t\t\t\t\t\titem_dict[\\\"item_defaults\\\"][0][\\\"expense_account\\\"] = expense_account\n\t\t\t\t\tif \\\"IncomeAccountRef\\\" in item:\n\t\t\t\t\t\tincome_account = self._get_account_name_by_id(item[\\\"IncomeAccountRef\\\"][\\\"value\\\"])\n\t\t\t\t\t\titem_dict[\\\"item_defaults\\\"][0][\\\"income_account\\\"] = income_account\n\t\t\t\t\tfrappe.get_doc(item_dict).insert()\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, item)\n\n\tdef _allow_fraction_in_unit(self):\n\t\tfrappe.db.set_value(\\\"UOM\\\", \\\"Unit\\\", \\\"must_be_whole_number\\\", 0)\n\n\tdef _save_vendor(self, vendor):\n\t\ttry:\n\t\t\tif not frappe.db.exists(\n\t\t\t\t{\\\"doctype\\\": \\\"Supplier\\\", \\\"quickbooks_id\\\": vendor[\\\"Id\\\"], \\\"company\\\": self.company}\n\t\t\t):\n\t\t\t\terpsupplier = frappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Supplier\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": vendor[\\\"Id\\\"],\n\t\t\t\t\t\t\\\"supplier_name\\\": encode_company_abbr(vendor[\\\"DisplayName\\\"], self.company),\n\t\t\t\t\t\t\\\"supplier_group\\\": \\\"All Supplier Groups\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t).insert()\n\t\t\t\tif \\\"BillAddr\\\" in vendor:\n\t\t\t\t\tself._create_address(erpsupplier, \\\"Supplier\\\", vendor[\\\"BillAddr\\\"], \\\"Billing\\\")\n\t\t\t\tif \\\"ShipAddr\\\" in vendor:\n\t\t\t\t\tself._create_address(erpsupplier, \\\"Supplier\\\", vendor[\\\"ShipAddr\\\"], \\\"Shipping\\\")\n\t\texcept Exception as e:\n\t\t\tself._log_error(e)\n\n\tdef _save_preference(self, preference):\n\t\ttry:\n\t\t\tif preference[\\\"SalesFormsPrefs\\\"][\\\"AllowShipping\\\"]:\n\t\t\t\tdefault_shipping_account_id = preference[\\\"SalesFormsPrefs\\\"][\\\"DefaultShippingAccount\\\"]\n\t\t\t\tself.default_shipping_account = self._get_account_name_by_id(\n\t\t\t\t\tself, default_shipping_account_id\n\t\t\t\t)\n\t\t\t\tself.save()\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, preference)\n\n\n\n", "CodeBleu_score": 26.955857025100936}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\t\tcustomer_group: DF.Link | None\n\t\tcustomer_name: DF.Data | None\n\t\titems: DF.Table[MaintenanceScheduleItem]\n\t\tnaming_series: DF.Literal[\\\"MAT-MSH-.YYYY.-\\\"]\n\t\tschedules: DF.Table[MaintenanceScheduleDetail]\n\t\tstatus: DF.Literal[\\\"\\\", \\\"Draft\\\", \\\"Submitted\\\", \\\"Cancelled\\\"]\n\t\tterritory: DF.Link | None\n\t\ttransaction_date: DF.Date\n\t# end: auto-generated types\n\n\t@frappe.whitelist()\n\tdef generate_schedule(self):\n\t\tif self.docstatus != 0:\n\t\t\treturn\n\t\tself.set(\\\"schedules\\\", [])\n\t\tcount = 1\n\t\tfor d in self.get(\\\"items\\\"):\n\t\t\tself.validate_maintenance_detail()\n\t\t\ts_list = []\n\t\t\ts_list = self.create_schedule_list(d.start_date, d.end_date, d.no_of_visits, d.sales_person)\n\t\t\tfor i in range(d.no_of_visits):\n\t\t\t\tchild = self.append(\\\"schedules\\\")\n\t\t\t\tchild.item_code = d.item_code\n\t\t\t\tchild.item_name = d.item_name\n\t\t\t\tchild.scheduled_date = s_list[i].strftime(\\\"%Y-%m-%d\\\")\n\t\t\t\tif d.serial_no:\n\t\t\t\t\tchild.serial_no = d.serial_no\n\t\t\t\tchild.idx = count\n\t\t\t\tcount = count + 1\n\t\t\t\tchild.sales_person = d.sales_person\n\t\t\t\tchild.completion_status = \\\"Pending\\\"\n\t\t\t\tchild.item_reference = d.name\n\n\t@frappe.whitelist()\n\tdef validate_end_date_visits(self):\n\t\tdays_in_period = {\\\"Weekly\\\": 7, \\\"Monthly\\\": 30, \\\"Quarterly\\\": 91, \\\"Half Yearly\\\": 182, \\\"Yearly\\\": 365}\n\t\tfor item in self.items:\n\t\t\tif item.periodicity and item.periodicity != \\\"Random\\\" and item.start_date:\n\t\t\t\tif not item.end_date:\n\t\t\t\t\tif item.no_of_visits:\n\t\t\t\t\t\titem.end_date = add_days(\n\t\t\t\t\t\t\titem.start_date, item.no_of_visits * days_in_period[item.periodicity]\n\t\t\t\t\t\t)\n\t\t\t\t\telse:\n\t\t\t\t\t\titem.end_date = add_days(item.start_date, days_in_period[item.periodicity])\n\n\t\t\t\tdiff = date_diff(item.end_date, item.start_date) + 1\n\t\t\t\tno_of_visits = cint(diff / days_in_period[item.periodicity])\n\n\t\t\t\tif not item.no_of_visits or item.no_of_visits == 0:\n\t\t\t\t\titem.end_date = add_days(item.start_date, days_in_period[item.periodicity])\n\t\t\t\t\tdiff = date_diff(item.end_date, item.start_date) + 1\n\t\t\t\t\titem.no_of_visits = cint(diff / days_in_period[item.periodicity])\n\n\t\t\t\telif item.no_of_visits > no_of_visits:\n\t\t\t\t\titem.end_date = add_days(\n\t\t\t\t\t\titem.start_date, item.no_of_visits * days_in_period[item.periodicity]\n\t\t\t\t\t)\n\n\t\t\t\telif item.no_of_visits < no_of_visits:\n\t\t\t\t\titem.end_date = add_days(\n\t\t\t\t\t\titem.start_date, item.no_of_visits * days_in_period[item.periodicity]\n\t\t\t\t\t)\n\n\tdef on_submit(self):\n\t\tif not self.get(\\\"schedules\\\"):\n\t\t\tthrow(_(\\\"Please click on 'Generate Schedule' to get schedule\\\"))\n\t\tself.check_serial_no_added()\n\t\tself.validate_schedule()\n\n\t\temail_map = {}\n\t\tfor d in self.get(\\\"items\\\"):\n\t\t\tif d.serial_and_batch_bundle:\n\t\t\t\tserial_nos = frappe.get_doc(\n\t\t\t\t\t\\\"Serial and Batch Bundle\\\", d.serial_and_batch_bundle\n\t\t\t\t).get_serial_nos()\n\n\t\t\t\tif serial_nos:\n\t\t\t\t\tself.validate_serial_no(d.item_code, serial_nos, d.start_date)\n\t\t\t\t\tself.update_amc_date(serial_nos, d.end_date)\n\n\t\t\tno_email_sp = []\n\t\t\tif d.sales_person and d.sales_person not in email_map:\n\t\t\t\tsp = frappe.get_doc(\\\"Sales Person\\\", d.sales_person)\n\t\t\t\ttry:\n\t\t\t\t\temail_map[d.sales_person] = sp.get_email_id()\n\t\t\t\texcept frappe.ValidationError:\n\t\t\t\t\tno_email_sp.append(d.sales_person)\n\n\t\t\tif no_email_sp:\n\t\t\t\tfrappe.msgprint(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Setting Events to {0}, since the Employee attached to the below Sales Persons does not have a User ID{1}\\\"\n\t\t\t\t\t).format(self.owner, \\\"<br>\\\" + \\\"<br>\\\".join(no_email_sp))\n\t\t\t\t)\n\n\t\t\tscheduled_date = frappe.db.get_all(\n\t\t\t\t\\\"Maintenance Schedule Detail\\\",\n\t\t\t\t{\\\"parent\\\": self.name, \\\"item_code\\\": d.item_code},\n\t\t\t\t[\\\"scheduled_date\\\"],\n\t\t\t\tas_list=False,\n\t\t\t)\n\n\t\t\tfor key in scheduled_date:\n\t\t\t\tdescription = frappe._(\\\"Reference: {0}, Item Code: {1} and Customer: {2}\\\").format(\n\t\t\t\t\tself.name, d.item_code, self.customer\n\t\t\t\t)\n\t\t\t\tevent = frappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Event\\\",\n\t\t\t\t\t\t\\\"owner\\\": email_map.get(d.sales_person, self.owner),\n\t\t\t\t\t\t\\\"subject\\\": description,\n\t\t\t\t\t\t\\\"description\\\": description,\n\t\t\t\t\t\t\\\"starts_on\\\": cstr(key[\\\"scheduled_date\\\"]) + \\\" 10:00:00\\\",\n\t\t\t\t\t\t\\\"event_type\\\": \\\"Private\\\",\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\tevent.add_participant(self.doctype, self.name)\n\t\t\t\tevent.insert(ignore_permissions=1)\n\n\t\tself.db_set(\\\"status\\\", \\\"Submitted\\\")\n\n\n\n", "CodeBleu_score": 20.224671404541553}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\t\tcustomer_group: DF.Link | None\n\t\tcustomer_name: DF.Data | None\n\t\titems: DF.Table[MaintenanceScheduleItem]\n\t\tnaming_series: DF.Literal[\\\"MAT-MSH-.YYYY.-\\\"]\n\t\tschedules: DF.Table[MaintenanceScheduleDetail]\n\t\tstatus: DF.Literal[\\\"\\\", \\\"Draft\\\", \\\"Submitted\\\", \\\"Cancelled\\\"]\n\t\tterritory: DF.Link | None\n\t\ttransaction_date: DF.Date\n\t# end: auto-generated types\n\n\t@frappe.whitelist()\n\tdef generate_schedule(self):\n\t\tif self.docstatus != 0:\n\t\t\treturn\n\t\tself.set(\\\"schedules\\\", [])\n\t\tcount = 1\n\t\tfor d in self.get(\\\"items\\\"):\n\t\t\tself.validate_maintenance_detail()\n\t\t\ts_list = []\n\t\t\ts_list = self.create_schedule_list(d.start_date, d.end_date, d.no_of_visits, d.sales_person)\n\t\t\tfor i in range(d.no_of_visits):\n\t\t\t\tchild = self.append(\\\"schedules\\\")\n\t\t\t\tchild.item_code = d.item_code\n\t\t\t\tchild.item_name = d.item_name\n\t\t\t\tchild.scheduled_date = s_list[i].strftime(\\\"%Y-%m-%d\\\")\n\t\t\t\tif d.serial_no:\n\t\t\t\t\tchild.serial_no = d.serial_no\n\t\t\t\tchild.idx = count\n\t\t\t\tcount = count + 1\n\t\t\t\tchild.sales_person = d.sales_person\n\t\t\t\tchild.completion_status = \\\"Pending\\\"\n\t\t\t\tchild.item_reference = d.name\n\n\t@frappe.whitelist()\n\tdef validate_end_date_visits(self):\n\t\tdays_in_period = {\\\"Weekly\\\": 7, \\\"Monthly\\\": 30, \\\"Quarterly\\\": 91, \\\"Half Yearly\\\": 182, \\\"Yearly\\\": 365}\n\t\tfor item in self.items:\n\t\t\tif item.periodicity and item.periodicity != \\\"Random\\\" and item.start_date:\n\t\t\t\tif not item.end_date:\n\t\t\t\t\tif item.no_of_visits:\n\t\t\t\t\t\titem.end_date = add_days(\n\t\t\t\t\t\t\titem.start_date, item.no_of_visits * days_in_period[item.periodicity]\n\t\t\t\t\t\t)\n\t\t\t\t\telse:\n\t\t\t\t\t\titem.end_date = add_days(item.start_date, days_in_period[item.periodicity])\n\n\t\t\t\tdiff = date_diff(item.end_date, item.start_date) + 1\n\t\t\t\tno_of_visits = cint(diff / days_in_period[item.periodicity])\n\n\t\t\t\tif not item.no_of_visits or item.no_of_visits == 0:\n\t\t\t\t\titem.end_date = add_days(item.start_date, days_in_period[item.periodicity])\n\t\t\t\t\tdiff = date_diff(item.end_date, item.start_date) + 1\n\t\t\t\t\titem.no_of_visits = cint(diff / days_in_period[item.periodicity])\n\n\t\t\t\telif item.no_of_visits > no_of_visits:\n\t\t\t\t\titem.end_date = add_days(\n\t\t\t\t\t\titem.start_date, item.no_of_visits * days_in_period[item.periodicity]\n\t\t\t\t\t)\n\n\t\t\t\telif item.no_of_visits < no_of_visits:\n\t\t\t\t\titem.end_date = add_days(\n\t\t\t\t\t\titem.start_date, item.no_of_visits * days_in_period[item.periodicity]\n\t\t\t\t\t)\n\n\tdef on_submit(self):\n\t\tif not self.get(\\\"schedules\\\"):\n\t\t\tthrow(_(\\\"Please click on 'Generate Schedule' to get schedule\\\"))\n\t\tself.check_serial_no_added()\n\t\tself.validate_schedule()\n\n\t\temail_map = {}\n\t\tfor d in self.get(\\\"items\\\"):\n\t\t\tif d.serial_and_batch_bundle:\n\t\t\t\tserial_nos = frappe.get_doc(\n\t\t\t\t\t\\\"Serial and Batch Bundle\\\", d.serial_and_batch_bundle\n\t\t\t\t).get_serial_nos()\n\n\t\t\t\tif serial_nos:\n\t\t\t\t\tself.validate_serial_no(d.item_code, serial_nos, d.start_date)\n\t\t\t\t\tself.update_amc_date(serial_nos, d.end_date)\n\n\t\t\tno_email_sp = []\n\t\t\tif d.sales_person and d.sales_person not in email_map:\n\t\t\t\tsp = frappe.get_doc(\\\"Sales Person\\\", d.sales_person)\n\t\t\t\ttry:\n\t\t\t\t\temail_map[d.sales_person] = sp.get_email_id()\n\t\t\t\texcept frappe.ValidationError:\n\t\t\t\t\tno_email_sp.append(d.sales_person)\n\n\t\t\tif no_email_sp:\n\t\t\t\tfrappe.msgprint(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Setting Events to {0}, since the Employee attached to the below Sales Persons does not have a User ID{1}\\\"\n\t\t\t\t\t).format(self.owner, \\\"<br>\\\" + \\\"<br>\\\".join(no_email_sp))\n\t\t\t\t)\n\n\t\t\tscheduled_date = frappe.db.get_all(\n\t\t\t\t\\\"Maintenance Schedule Detail\\\",\n\t\t\t\t{\\\"parent\\\": self.name, \\\"item_code\\\": d.item_code},\n\t\t\t\t[\\\"scheduled_date\\\"],\n\t\t\t\tas_list=False,\n\t\t\t)\n\n\t\t\tfor key in scheduled_date:\n\t\t\t\tdescription = frappe._(\\\"Reference: {0}, Item Code: {1} and Customer: {2}\\\").format(\n\t\t\t\t\tself.name, d.item_code, self.customer\n\t\t\t\t)\n\t\t\t\tevent = frappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Event\\\",\n\t\t\t\t\t\t\\\"owner\\\": email_map.get(d.sales_person, self.owner),\n\t\t\t\t\t\t\\\"subject\\\": description,\n\t\t\t\t\t\t\\\"description\\\": description,\n\t\t\t\t\t\t\\\"starts_on\\\": cstr(key[\\\"scheduled_date\\\"]) + \\\" 10:00:00\\\",\n\t\t\t\t\t\t\\\"event_type\\\": \\\"Private\\\",\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\tevent.add_participant(self.doctype, self.name)\n\t\t\t\tevent.insert(ignore_permissions=1)\n\n\t\tself.db_set(\\\"status\\\", \\\"Submitted\\\")\n\n\n\n", "CodeBleu_score": 20.224671404541553}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\t\tcustomer_group: DF.Link | None\n\t\tcustomer_name: DF.Data | None\n\t\titems: DF.Table[MaintenanceScheduleItem]\n\t\tnaming_series: DF.Literal[\\\"MAT-MSH-.YYYY.-\\\"]\n\t\tschedules: DF.Table[MaintenanceScheduleDetail]\n\t\tstatus: DF.Literal[\\\"\\\", \\\"Draft\\\", \\\"Submitted\\\", \\\"Cancelled\\\"]\n\t\tterritory: DF.Link | None\n\t\ttransaction_date: DF.Date\n\t# end: auto-generated types\n\n\t@frappe.whitelist()\n\tdef generate_schedule(self):\n\t\tif self.docstatus != 0:\n\t\t\treturn\n\t\tself.set(\\\"schedules\\\", [])\n\t\tcount = 1\n\t\tfor d in self.get(\\\"items\\\"):\n\t\t\tself.validate_maintenance_detail()\n\t\t\ts_list = []\n\t\t\ts_list = self.create_schedule_list(d.start_date, d.end_date, d.no_of_visits, d.sales_person)\n\t\t\tfor i in range(d.no_of_visits):\n\t\t\t\tchild = self.append(\\\"schedules\\\")\n\t\t\t\tchild.item_code = d.item_code\n\t\t\t\tchild.item_name = d.item_name\n\t\t\t\tchild.scheduled_date = s_list[i].strftime(\\\"%Y-%m-%d\\\")\n\t\t\t\tif d.serial_no:\n\t\t\t\t\tchild.serial_no = d.serial_no\n\t\t\t\tchild.idx = count\n\t\t\t\tcount = count + 1\n\t\t\t\tchild.sales_person = d.sales_person\n\t\t\t\tchild.completion_status = \\\"Pending\\\"\n\t\t\t\tchild.item_reference = d.name\n\n\t@frappe.whitelist()\n\tdef validate_end_date_visits(self):\n\t\tdays_in_period = {\\\"Weekly\\\": 7, \\\"Monthly\\\": 30, \\\"Quarterly\\\": 91, \\\"Half Yearly\\\": 182, \\\"Yearly\\\": 365}\n\t\tfor item in self.items:\n\t\t\tif item.periodicity and item.periodicity != \\\"Random\\\" and item.start_date:\n\t\t\t\tif not item.end_date:\n\t\t\t\t\tif item.no_of_visits:\n\t\t\t\t\t\titem.end_date = add_days(\n\t\t\t\t\t\t\titem.start_date, item.no_of_visits * days_in_period[item.periodicity]\n\t\t\t\t\t\t)\n\t\t\t\t\telse:\n\t\t\t\t\t\titem.end_date = add_days(item.start_date, days_in_period[item.periodicity])\n\n\t\t\t\tdiff = date_diff(item.end_date, item.start_date) + 1\n\t\t\t\tno_of_visits = cint(diff / days_in_period[item.periodicity])\n\n\t\t\t\tif not item.no_of_visits or item.no_of_visits == 0:\n\t\t\t\t\titem.end_date = add_days(item.start_date, days_in_period[item.periodicity])\n\t\t\t\t\tdiff = date_diff(item.end_date, item.start_date) + 1\n\t\t\t\t\titem.no_of_visits = cint(diff / days_in_period[item.periodicity])\n\n\t\t\t\telif item.no_of_visits > no_of_visits:\n\t\t\t\t\titem.end_date = add_days(\n\t\t\t\t\t\titem.start_date, item.no_of_visits * days_in_period[item.periodicity]\n\t\t\t\t\t)\n\n\t\t\t\telif item.no_of_visits < no_of_visits:\n\t\t\t\t\titem.end_date = add_days(\n\t\t\t\t\t\titem.start_date, item.no_of_visits * days_in_period[item.periodicity]\n\t\t\t\t\t)\n\n\tdef on_submit(self):\n\t\tif not self.get(\\\"schedules\\\"):\n\t\t\tthrow(_(\\\"Please click on 'Generate Schedule' to get schedule\\\"))\n\t\tself.check_serial_no_added()\n\t\tself.validate_schedule()\n\n\t\temail_map = {}\n\t\tfor d in self.get(\\\"items\\\"):\n\t\t\tif d.serial_and_batch_bundle:\n\t\t\t\tserial_nos = frappe.get_doc(\n\t\t\t\t\t\\\"Serial and Batch Bundle\\\", d.serial_and_batch_bundle\n\t\t\t\t).get_serial_nos()\n\n\t\t\t\tif serial_nos:\n\t\t\t\t\tself.validate_serial_no(d.item_code, serial_nos, d.start_date)\n\t\t\t\t\tself.update_amc_date(serial_nos, d.end_date)\n\n\t\t\tno_email_sp = []\n\t\t\tif d.sales_person and d.sales_person not in email_map:\n\t\t\t\tsp = frappe.get_doc(\\\"Sales Person\\\", d.sales_person)\n\t\t\t\ttry:\n\t\t\t\t\temail_map[d.sales_person] = sp.get_email_id()\n\t\t\t\texcept frappe.ValidationError:\n\t\t\t\t\tno_email_sp.append(d.sales_person)\n\n\t\t\tif no_email_sp:\n\t\t\t\tfrappe.msgprint(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Setting Events to {0}, since the Employee attached to the below Sales Persons does not have a User ID{1}\\\"\n\t\t\t\t\t).format(self.owner, \\\"<br>\\\" + \\\"<br>\\\".join(no_email_sp))\n\t\t\t\t)\n\n\t\t\tscheduled_date = frappe.db.get_all(\n\t\t\t\t\\\"Maintenance Schedule Detail\\\",\n\t\t\t\t{\\\"parent\\\": self.name, \\\"item_code\\\": d.item_code},\n\t\t\t\t[\\\"scheduled_date\\\"],\n\t\t\t\tas_list=False,\n\t\t\t)\n\n\t\t\tfor key in scheduled_date:\n\t\t\t\tdescription = frappe._(\\\"Reference: {0}, Item Code: {1} and Customer: {2}\\\").format(\n\t\t\t\t\tself.name, d.item_code, self.customer\n\t\t\t\t)\n\t\t\t\tevent = frappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Event\\\",\n\t\t\t\t\t\t\\\"owner\\\": email_map.get(d.sales_person, self.owner),\n\t\t\t\t\t\t\\\"subject\\\": description,\n\t\t\t\t\t\t\\\"description\\\": description,\n\t\t\t\t\t\t\\\"starts_on\\\": cstr(key[\\\"scheduled_date\\\"]) + \\\" 10:00:00\\\",\n\t\t\t\t\t\t\\\"event_type\\\": \\\"Private\\\",\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\tevent.add_participant(self.doctype, self.name)\n\t\t\t\tevent.insert(ignore_permissions=1)\n\n\t\tself.db_set(\\\"status\\\", \\\"Submitted\\\")\n\n\n\n", "CodeBleu_score": 20.224671404541553}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t$request = request();\n\n        if ($request->ajax()) {\n            $response = [\n                'status'  => 'success',\n                'message' => trans('bulk_actions.success.general'),\n                'data'    => [\n                    'title'     => trans('bulk_actions.title'),\n                    'path'      => $request->url(),\n                    'handle'    => $request->input('bulk_action_handle'),\n                    'html'      => view($view, $data)->render(),\n                ],\n            ];\n\n            return response()->json($response);\n        }\n\n        return response()->redirectTo($request->url());\n    }", "CodeBleu_score": 41.22783643496139}, {"code": "<?\n   public function response($view, $data = []){\n\t$response = [];\n        $response['success'] = true;\n        $response['message'] = $this->getResponseMessage();\n        $response['data'] = $this->getResponseData($view, $data);\n\n        return response()->json($response);\n    }", "CodeBleu_score": 20.002373781194912}, {"code": "<?\n   public function response($view, $data = []){\n\t$request = request();\n\n       $data = array_merge($data, [\n           'title'   => $this->title,\n           'path'    => $this->path,\n           'handle'  => $this->handle,\n           'html'    => view($view, $data)->render(),\n       ]);\n\n       if ($request->ajax()) {\n           return response()->json([\n               'success'   => true,\n               'message'   => $this->messages[$this->action],\n               'data'      => $data,\n           ]);\n       }\n\n       return redirect($this->path)->with('success', $this->messages[$this->action]);\n   }", "CodeBleu_score": 44.64764215053432}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request, 'user');\n\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 97.29576256997855}, {"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request, 'user');\n\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 97.29576256997855}, {"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request, 'user');\n\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 97.29576256997855}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\tuse App\\Jobs\\Banking\\DeleteTransaction;", "CodeBleu_score": 6.403975899927429}, {"code": "<?\npublic function deleteTransactions($request){\n\tuse App\\Jobs\\Banking\\DeleteTransaction;", "CodeBleu_score": 6.403975899927429}, {"code": "<?\npublic function deleteTransactions($request){\n\tuse App\\Jobs\\Banking\\DeleteTransaction;", "CodeBleu_score": 6.403975899927429}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\tif (!$this->request_class) {\n        return;\n    }\n\n    if (!is_subclass_of($this->request_class, FormRequest::class)) {\n        return;\n    }\n\n    $rules = $this->rules();\n\n    foreach ($this->get() as $index => $row) {\n        $request = new $this->request_class($row);\n\n        $request->setContainer($this->getContainer());\n\n        $request->setRedirector($this->getRedirector());\n\n        $request->setUserResolver($this->getUserResolver());\n\n        $request->setRouteResolver($this->getRouteResolver());\n\n        $rules = $this->prepareRules($rules);\n\n        $request->setRules($rules);\n\n        try {\n            $request->validateResolved();\n        } catch (ValidationException $e) {\n            $validator->errors()->add($index, $e->errors());\n\n            throw $e;\n        }\n    }\n}", "CodeBleu_score": 38.868198137056055}, {"code": "<?\npublic function withValidator($validator){\n\tif (!$this->request_class || !is_subclass_of($this->request_class, FormRequest::class)) {\n        return;\n    }\n\n    $request = new $this->request_class();\n    $request->setUserResolver(function () {\n        return $this->user;\n    });\n\n    $rules = $request->rules();\n    $messages = $request->messages();\n    $attributes = $request->attributes();\n\n    foreach ($this->get() as $row) {\n        $request->setUserResolver(function () {\n            return $this->user;\n        });\n\n        $request->setContainer(app());\n\n        $request->merge($row);\n\n        $rules = $this->prepareRules($rules);\n\n        $validator->make($row, $rules, $messages, $attributes)->validate();\n    }\n\n    throw_if($validator->fails(), ValidationException::withMessages($validator->errors()->toArray()));\n}", "CodeBleu_score": 40.69131574875534}, {"code": "<?\npublic function withValidator($validator){\n\tif (!$this->request_class || !$this->request_class instanceof FormRequest) {\n        return;\n    }\n\n    $request = new $this->request_class($this->getAttributes());\n\n    foreach ($this->get() as $row) {\n        $request->setAttributes($row);\n        $rules = $request->rules();\n\n        if ($request->has('id')) {\n            $rules['id'] = 'exists:' . $request->getEntityType() . ',id';\n        }\n\n        $rules = $request->prepareRules($rules);\n\n        $validator->make($row, $rules)->validate();\n    }\n}", "CodeBleu_score": 33.96913343304312}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif (! $this instanceof ShouldUpdate) {\n        return;\n    }\n\n    $request = $this->getRequestInstance($arguments[0]);\n    if ($request instanceof Request) {\n        $this->request = $request;\n    }\n\n    if ($this instanceof HasOwner) {\n        $this->setOwner();\n    }\n\n    if ($this instanceof HasSource) {\n        $this->setSource();\n    }\n}", "CodeBleu_score": 59.29860542270984}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif (! $this instanceof ShouldUpdate) {\n        return;\n    }\n\n    $model = $arguments[0];\n    $request = $this->getRequestInstance($arguments[1]);\n\n    if ($model instanceof Model) {\n        $this->model = $model;\n    }\n\n    if ($request instanceof Request) {\n        $this->request = $request;\n    }\n\n    if ($this instanceof HasOwner) {\n        $this->setOwner();\n    }\n\n    if ($this instanceof HasSource) {\n        $this->setSource();\n    }\n}", "CodeBleu_score": 66.06078423256486}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif (! $this instanceof ShouldUpdate) {\n        return;\n    }\n\n    $model = $arguments[0];\n    $request = $this->getRequestInstance($arguments[1]);\n\n    if ($model instanceof Model) {\n        $this->model = $model;\n    }\n\n    if ($request instanceof Request) {\n        $this->request = $request;\n    }\n\n    if ($this instanceof HasOwner) {\n        $this->setOwner();\n    }\n\n    if ($this instanceof HasSource) {\n        $this->setSource();\n    }\n}", "CodeBleu_score": 66.06078423256486}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t$sort = $sort ?? request('sort', 'name');\n    $order = request('order', 'asc');\n\n    $query->searchString(request('search'), $this->searchable);\n\n    $query->orderBy($sort, $order);\n\n    if (request()->expectsJson() && ! request()->is('api/*')) {\n        return $query->get();\n    }\n\n    return $query->paginate(request('limit', setting('general.list_limit', '25')));\n}", "CodeBleu_score": 41.92213035528199}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t// Get the search term\n     $search = request('search');\n\n     // Apply search if there is one\n     if ($search) {\n         $query->search($search);\n     }\n\n     // Apply sorting if there is one\n     if ($sort) {\n         $query->sort($sort);\n     }\n\n     // Return the results\n     if (request()->expectsJson() && !request()->is('api/*')) {\n         return $query->get();\n     } else {\n         return $query->paginate(request('per_page') ?? $this->perPage);\n     }\n }", "CodeBleu_score": 35.52642678131238}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t$sort = $sort ?? request('sort');\n\n    $query->searchString(request('search'), $sort);\n\n    if (request()->expectsJson() && !request()->is('api/*')) {\n        return $query->get();\n    }\n\n    return $query->paginate(request('limit') ?? 25);\n}", "CodeBleu_score": 32.815231505046974}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t$open_amount = 0;\n    $overdue_amount = 0;\n\n    if ($model->status == 'paid') {\n        return [\n            'open_amount' => 0,\n            'overdue_amount' => 0,\n        ];\n    }\n\n    if ($model->status == 'partial') {\n        $payments = $model->payments;\n\n        $open_amount = $model->amount - $payments->sum('amount');\n        $overdue_amount = 0;\n    }\n\n    $due_date = Date::parse($model->due_at);\n\n    if ($due_date->isPast()) {\n        $overdue_amount = $open_amount;\n        $open_amount = 0;\n    }\n\n    return [\n        'open_amount' => $open_amount,\n        'overdue_amount' => $overdue_amount,\n    ];\n}", "CodeBleu_score": 46.77481756567589}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t$open_amount = 0;\n    $overdue_amount = 0;\n\n    if ($model->status == 'paid') {\n        return [\n            'open_amount' => 0,\n            'overdue_amount' => 0,\n        ];\n    }\n\n    if ($model->status == 'partial') {\n        $open_amount = $model->amount - $model->getTotalPaid();\n    }\n\n    if ($model->due_at) {\n        $now = now()->format('Y-m-d');\n        $due_at = Date::parse($model->due_at)->format('Y-m-d');\n\n        if ($now > $due_at) {\n            $overdue_amount = $open_amount;\n            $open_amount = 0;\n        }\n    }\n\n    return [\n        'open_amount' => $open_amount,\n        'overdue_amount' => $overdue_amount,\n    ];\n}", "CodeBleu_score": 46.68145714364951}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t$open_amount = 0;\n    $overdue_amount = 0;\n\n    if ($model->status == 'paid') {\n        return [\n            'open_amount' => 0,\n            'overdue_amount' => 0,\n        ];\n    }\n\n    if ($model->status == 'partial') {\n        $open_amount = $model->amount - $model->paid_amount;\n    }\n\n    $due_date = Date::parse($model->due_date);\n    $now = Date::now();\n\n    if ($due_date->isPast()) {\n        $overdue_amount = $open_amount;\n        $open_amount = 0;\n    } elseif ($due_date->isFuture()) {\n        $open_amount = $open_amount;\n        $overdue_amount = 0;\n    } elseif ($due_date->isToday()) {\n        $open_amount = $open_amount;\n        $overdue_amount = 0;\n    }\n\n    return [\n        'open_amount' => $open_amount,\n        'overdue_amount' => $overdue_amount,\n    ];\n}", "CodeBleu_score": 43.98622488817109}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $total = $this->getCountForPagination($columns);\n    $results = $total ? $this->forPage($page, $perPage)->get($columns) : collect();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 79.55568814629586}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $total = $this->toBase()->getCountForPagination();\n    $results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 85.61171088768747}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $total = $this->toBase()->getCountForPagination();\n\n    $results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 85.61171088768747}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t$reconciliations = $this->getSelectedRecords($request);\n\n    foreach ($reconciliations as $reconciliation) {\n        $reconciliation->reconcile($request->input('date_field'), $request->input('date_value'));\n    }\n}", "CodeBleu_score": 30.420293061579244}, {"code": "<?\npublic function reconcile($request){\n\t$reconciliations = $this->getSelectedRecords($request);\n\n    foreach ($reconciliations as $reconciliation) {\n        $reconciliation->reconciled = 1;\n        $reconciliation->save();\n\n        $transactions = Transaction::where('account_id', $reconciliation->account_id)\n            ->whereBetween('paid_at', [$reconciliation->start_date, $reconciliation->end_date])\n            ->get();\n\n        foreach ($transactions as $transaction) {\n            $transaction->reconciled = 1;\n            $transaction->save();\n        }\n    }\n\n    $this->showMessage('bulk_actions.message.reconcile');\n}", "CodeBleu_score": 66.8473628220708}, {"code": "<?\npublic function reconcile($request){\n\t$reconciliations = $this->getSelectedRecords($request);\n\n    foreach ($reconciliations as $reconciliation) {\n        $this->process($reconciliation, 'reconciled', $request);\n    }\n}", "CodeBleu_score": 28.655573238815435}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t$this->invitation = $this->getInvitation();\n\n    if ($this->invitation) {\n        $this->invitation->delete();\n    }\n\n    $this->invitation = $this->createInvitation();\n\n    $this->notifyUser();\n\n    return $this->invitation;\n}", "CodeBleu_score": 13.725788194441602}, {"code": "<?\npublic function handle(): UserInvitation{\n\t$this->invitation = $this->user->invitations()->create([\n        'token' => Str::random(60),\n    ]);\n\n    $this->user->notify(new Notification($this->invitation));\n\n    return $this->invitation;\n}", "CodeBleu_score": 17.421942375988976}, {"code": "<?\npublic function handle(): UserInvitation{\n\t$this->invitation = UserInvitation::where('user_id', $this->user->id)->first();\n\n    if ($this->invitation) {\n        $this->invitation->delete();\n    }\n\n    $this->invitation = UserInvitation::create([\n        'user_id' => $this->user->id,\n        'token' => Str::random(60),\n    ]);\n\n    try {\n        $this->dispatch(new SendInvitation($this->user, $this->invitation));\n    } catch (Exception $e) {\n        throw new Exception($e->getMessage());\n    }\n\n    return $this->invitation;\n}", "CodeBleu_score": 40.51357256495879}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\tif ($this->model->is_reconciled) {\n        throw new \\Exception(__('warnings.reconciled_transaction'));\n    }\n\n    if ($this->model->is_transfer) {\n        throw new \\Exception(__('warnings.transfer_transaction'));\n    }\n}", "CodeBleu_score": 33.09550192285642}, {"code": "<?\npublic function authorize(): void{\n\tif ($this->model->is_reconciled) {\n        throw new \\Exception(__('messages.warning.updated_reconciled', ['name' => $this->model->name]));\n    }\n\n    if ($this->model->type == Transaction::TRANSFER_TYPE) {\n        throw new \\Illuminate\\Auth\\Access\\AuthorizationException(__('messages.warning.transfer_transaction'));\n    }\n}", "CodeBleu_score": 30.72712189310457}, {"code": "<?\npublic function authorize(): void{\n\tif ($this->model->isReconciled()) {\n        throw new \\Exception(__('warnings.reconciled_transaction'));\n    }\n\n    if ($this->model->isTransfer()) {\n        throw new \\Illuminate\\Auth\\Access\\AuthorizationException(__('Unauthorized'));\n    }\n}", "CodeBleu_score": 34.59686235386712}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t// \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u79df\u6237ID\n    Long tenantId = Tools.getTenantIdByToken(request.getHeader(\"X-Access-Token\"));\n    if (tenantId == 0L) {\n        //\u8d85\u7ba1\n        return true;\n    }\n    // \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u79df\u6237ID\n    Long tenantId = Tools.getTenantIdByToken(request.getHeader(\"X-Access-Token\"));\n    if (tenantId == 0L) {\n        //\u8d85\u7ba1\n        return true;\n    }\n    // \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u79df\u6237ID\n    Long tenantId = Tools.getTenantIdByToken(request.getHeader(\"X-Access-Token\"));\n    if (tenantId == 0L) {\n        //\u8d85\u7ba1\n        return true;\n    }\n    // \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u79df\u6237ID\n    Long tenantId = Tools.getTenantIdByToken(request.getHeader(\"X-Access-Token\"));\n    if (tenantId == 0L) {\n        //\u8d85\u7ba1\n        return true;\n    }\n    // \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u79df\u6237ID\n    Long tenantId = Tools.getTenantIdByToken(request.getHeader(\"X-Access-Token\"));\n    if (tenantId == 0L) {\n        //\u8d85\u7ba1\n        return true;\n    }\n    // \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u79df\u6237ID\n    Long tenantId = Tools.getTenantIdByToken(request.getHeader(\"X-Access-Token\"));\n    if (tenantId == 0L) {\n        //\u8d85\u7ba1\n        return true;\n    }\n    // \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u79df\u6237ID\n    Long tenantId = Tools.getTenantIdByToken(request.getHeader(\"X-Access-Token\"));\n    if (tenantId == 0L) {\n        //\u8d85\u7ba1\n        return true;\n    }\n    // \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u79df", "CodeBleu_score": 24.7998920111079}, {"code": "public boolean doTableFilter(String tableName){\n\tif (tableName.equals(\"tenant\")) {\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 6.196967851478375}, {"code": "public boolean doTableFilter(String tableName){\n\t// \u8fd9\u91cc\u53ef\u4ee5\u5224\u65ad\u662f\u5426\u8fc7\u6ee4\u8868\n    if (tableName.equals(\"user\") || tableName.equals(\"role\") || tableName.equals(\"resource\") || tableName.equals(\"tenant\") || tableName.equals(\"user_role\") || tableName.equals(\"role_resource\") || tableName.equals(\"tenant_user\") || tableName.equals(\"tenant_role\") || tableName.equals(\"tenant_resource\")) {\n        return true;\n    } else {\n        return false;\n    }\n}", "CodeBleu_score": 22.70507171631224}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 64.10430100685872}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.2261177705181}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.2261177705181}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = \"\";\n    try {\n        List<Account> list = accountService.findBySelect();\n        JSONArray jsonArray = JSONArray.parseArray(JSONArray.toJSONString(list));\n        res = jsonArray.toString();\n    } catch (Exception e) {\n        e.printStackTrace();\n        logger.error(\"\u5f02\u5e38\u7801[{}],\u5f02\u5e38\u63d0\u793a[{}],\u5f02\u5e38[{}]\",\n                ExceptionConstants.DATA_READ_FAIL_CODE, ExceptionConstants.DATA_READ_FAIL_MSG, e);\n        return ExceptionConstants.DATA_READ_FAIL_MSG;\n    }\n    return res;\n}", "CodeBleu_score": 36.324207194524966}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        JSONArray jsonArray = new JSONArray();\n        for (Account account : dataList) {\n            JSONObject item = new JSONObject();\n            item.put(\"id\", account.getId());\n            item.put(\"name\", account.getName());\n            jsonArray.add(item);\n        }\n        res = jsonArray.toJSONString();\n    } catch (Exception e) {\n        e.printStackTrace();\n        logger.error(\"Error!\", e);\n        return returnJson(com.alibaba.fastjson.JSONObject.toJSONString(new BaseResponseInfo(500, \"\u7cfb\u7edf\u9519\u8bef!\")), request);\n    }\n    return returnJson(res, request);\n}", "CodeBleu_score": 70.00557705959726}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\n    try {\n        List<Account> list = accountService.findBySelect();\n        JSONArray array = new JSONArray();\n        for (Account account : list) {\n            JSONObject row = new JSONObject();\n            row.put(\"id\", account.getId());\n            row.put(\"name\", account.getName());\n            array.add(row);\n        }\n        res = array.toJSONString();\n    } catch (Exception e) {\n        logger.error(\"Error: \", e);\n        e.printStackTrace();\n        res = \"{\\\"result\\\":\\\"error\\\",\\\"message\\\":\\\"\u7cfb\u7edf\u5f02\u5e38\\\"}\";\n    }\n    return res;\n}", "CodeBleu_score": 67.08274122881541}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tswagger.annotations.Api;", "CodeBleu_score": 12.027120952446907}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tswagger.annotations.Api;", "CodeBleu_score": 12.027120952446907}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tswagger.annotations.Api;", "CodeBleu_score": 12.027120952446907}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t   public String findBySelect(HttpServletRequest request) throws Exception {\n        String res = null;\n        try {\n            List<Account> dataList = accountService.findBySelect();\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataList) {\n                for (Account account : dataList) {\n                    JSONObject item = new JSONObject();\n                    item.put(\\\"Id\\\", account.getId());\n                    //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                    item.put(\\\"AccountName\\\", account.getName());\n                    dataArray.add(item);\n                }\n            }\n            res = dataArray.toJSONString();\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u83b7\u53d6\u6240\u6709\u7ed3\u7b97\u8d26\u6237\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/getAccount\\\")\n    @ApiOperation(value = \\\"\u83b7\u53d6\u6240\u6709\u7ed3\u7b97\u8d26\u6237\\\")\n    public BaseResponseInfo getAccount(HttpServletRequest request) throws Exception {\n        BaseResponseInfo res = new BaseResponseInfo();\n        Map<String, Object> map = new HashMap<String, Object>();\n        try {\n            List<Account> accountList = accountService.getAccount();\n            map.put(\\\"accountList\\\", accountList);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u8d26\u6237\u6d41\u6c34\u4fe1\u606f\n     * @param currentPage\n     * @param pageSize\n     * @param accountId\n     * @param initialAmount\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/findAccountInOutList\\\")\n    @ApiOperation(value = \\\"\u8d26\u6237\u6d41\u6c34\u4fe1\u606f\\\")\n    public BaseResponseInfo findAccountInOutList(@RequestParam(\\\"currentPage\\\") Integer currentPage,\n                                                 @RequestParam(\\\"pageSize\\\") Integer pageSize,\n                                                 @RequestParam(\\\"accountId\\\") Long accountId,\n                                                 @RequestParam(\\\"initialAmount\\\") BigDecimal initialAmount,\n                                                 @RequestParam(value = \\\"number\\\",required = false) String number,\n                                                 @RequestParam(value = \\\"beginTime\\\",required = false) String beginTime,\n                                                 @RequestParam(value = \\\"endTime\\\",required = false) String endTime,\n                                                 HttpServletRequest request) throws Exception{\n        BaseResponseInfo res = new BaseResponseInfo();\n        Map<String, Object> map = new HashMap<String, Object>();\n        try {\n            Boolean forceFlag = systemConfigService.getForceApprovalFlag();\n            List<AccountVo4InOutList> dataList = accountService.findAccountInOutList(accountId, StringUtil.toNull(number),\n                    beginTime, endTime, forceFlag, (currentPage-1)*pageSize, pageSize);\n            int total = accountService.findAccountInOutListCount(accountId, StringUtil.toNull(number),\n                    beginTime, endTime, forceFlag);\n            map.put(\\\"total\\\", total);\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataList) {\n                for (AccountVo4InOutList aEx : dataList) {\n                    String type = aEx.getType().replace(\\\"\u5176\u5b83\\\", \\\"\\\");\n                    aEx.setType(type);\n                    String operTime = aEx.getOperTime();\n                    BigDecimal balance = accountService.getAccountSum(accountId, null, operTime, forceFlag)\n                            .add(accountService.getAccountSumByHead(accountId, null, operTime, forceFlag))\n                            .add(accountService.getAccountSumByDetail(accountId, null, operTime, forceFlag))\n                            .add(accountService.getManyAccountSum(accountId, null, operTime, forceFlag)).add(initialAmount);\n                    aEx.setBalance(balance);\n                    aEx.setAccountId(accountId);\n                    dataArray.add(aEx);\n                }\n            }\n            map.put(\\\"rows\\\", dataArray);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u66f4\u65b0\u9ed8\u8ba4\u8d26\u6237\n     * @param object\n     * @param request\n     * @return\n     * @throws Exception\n     */\n    @PostMapping(value = \\\"/updateIsDefault\\\")\n    @ApiOperation(value = \\\"\u66f4\u65b0\u9ed8\u8ba4\u8d26\u6237\\\")\n    public String updateIsDefault(@RequestBody JSONObject object,\n                                       HttpServletRequest request) throws Exception{\n        Long accountId = object.getLong(\\\"id\\\");\n        Map<String, Object> objectMap = new HashMap<>();\n        int res = accountService.updateIsDefault(accountId);\n        if(res > 0) {\n            return returnJson(objectMap, ErpInfo.OK.name, ErpInfo.OK.code);\n        } else {\n            return returnJson(objectMap, ErpInfo.ERROR.name, ErpInfo.ERROR.code);\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u5e26\u4f59\u989d\u7684\u62a5\u8868\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/listWithBalance\\\")\n    @ApiOperation(value = \\\"\u83b7\u53d6\u5e26\u4f59\u989d\u7684\u62a5\u8868\\\")\n    public BaseResponseInfo listWithBalance(@RequestParam(\\\"name\\\") String name,\n                                            @RequestParam(\\\"serialNo\\\") String serialNo,\n                                            @RequestParam(\\\"currentPage\\\") Integer currentPage,\n                                            @RequestParam(\\\"pageSize\\\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception {\n        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\\\"rows\\\", list);\n            map.put(\\\"total\\\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u7ed3\u7b97\u8d26\u6237\u7684\u7edf\u8ba1\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/getStatistics\\\")\n    @ApiOperation(value = \\\"\u7ed3\u7b97\u8d26\u6237\u7684\u7edf\u8ba1\\\")\n\n\n", "CodeBleu_score": 45.04681550305703}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t   public String findBySelect(HttpServletRequest request) throws Exception {\n        String res = null;\n        try {\n            List<Account> dataList = accountService.findBySelect();\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataList) {\n                for (Account account : dataList) {\n                    JSONObject item = new JSONObject();\n                    item.put(\\\"Id\\\", account.getId());\n                    //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                    item.put(\\\"AccountName\\\", account.getName());\n                    dataArray.add(item);\n                }\n            }\n            res = dataArray.toJSONString();\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u83b7\u53d6\u6240\u6709\u7ed3\u7b97\u8d26\u6237\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/getAccount\\\")\n    @ApiOperation(value = \\\"\u83b7\u53d6\u6240\u6709\u7ed3\u7b97\u8d26\u6237\\\")\n    public BaseResponseInfo getAccount(HttpServletRequest request) throws Exception {\n        BaseResponseInfo res = new BaseResponseInfo();\n        Map<String, Object> map = new HashMap<String, Object>();\n        try {\n            List<Account> accountList = accountService.getAccount();\n            map.put(\\\"accountList\\\", accountList);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u8d26\u6237\u6d41\u6c34\u4fe1\u606f\n     * @param currentPage\n     * @param pageSize\n     * @param accountId\n     * @param initialAmount\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/findAccountInOutList\\\")\n    @ApiOperation(value = \\\"\u8d26\u6237\u6d41\u6c34\u4fe1\u606f\\\")\n    public BaseResponseInfo findAccountInOutList(@RequestParam(\\\"currentPage\\\") Integer currentPage,\n                                                 @RequestParam(\\\"pageSize\\\") Integer pageSize,\n                                                 @RequestParam(\\\"accountId\\\") Long accountId,\n                                                 @RequestParam(\\\"initialAmount\\\") BigDecimal initialAmount,\n                                                 @RequestParam(value = \\\"number\\\",required = false) String number,\n                                                 @RequestParam(value = \\\"beginTime\\\",required = false) String beginTime,\n                                                 @RequestParam(value = \\\"endTime\\\",required = false) String endTime,\n                                                 HttpServletRequest request) throws Exception{\n        BaseResponseInfo res = new BaseResponseInfo();\n        Map<String, Object> map = new HashMap<String, Object>();\n        try {\n            Boolean forceFlag = systemConfigService.getForceApprovalFlag();\n            List<AccountVo4InOutList> dataList = accountService.findAccountInOutList(accountId, StringUtil.toNull(number),\n                    beginTime, endTime, forceFlag, (currentPage-1)*pageSize, pageSize);\n            int total = accountService.findAccountInOutListCount(accountId, StringUtil.toNull(number),\n                    beginTime, endTime, forceFlag);\n            map.put(\\\"total\\\", total);\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataList) {\n                for (AccountVo4InOutList aEx : dataList) {\n                    String type = aEx.getType().replace(\\\"\u5176\u5b83\\\", \\\"\\\");\n                    aEx.setType(type);\n                    String operTime = aEx.getOperTime();\n                    BigDecimal balance = accountService.getAccountSum(accountId, null, operTime, forceFlag)\n                            .add(accountService.getAccountSumByHead(accountId, null, operTime, forceFlag))\n                            .add(accountService.getAccountSumByDetail(accountId, null, operTime, forceFlag))\n                            .add(accountService.getManyAccountSum(accountId, null, operTime, forceFlag)).add(initialAmount);\n                    aEx.setBalance(balance);\n                    aEx.setAccountId(accountId);\n                    dataArray.add(aEx);\n                }\n            }\n            map.put(\\\"rows\\\", dataArray);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u66f4\u65b0\u9ed8\u8ba4\u8d26\u6237\n     * @param object\n     * @param request\n     * @return\n     * @throws Exception\n     */\n    @PostMapping(value = \\\"/updateIsDefault\\\")\n    @ApiOperation(value = \\\"\u66f4\u65b0\u9ed8\u8ba4\u8d26\u6237\\\")\n    public String updateIsDefault(@RequestBody JSONObject object,\n                                       HttpServletRequest request) throws Exception{\n        Long accountId = object.getLong(\\\"id\\\");\n        Map<String, Object> objectMap = new HashMap<>();\n        int res = accountService.updateIsDefault(accountId);\n        if(res > 0) {\n            return returnJson(objectMap, ErpInfo.OK.name, ErpInfo.OK.code);\n        } else {\n            return returnJson(objectMap, ErpInfo.ERROR.name, ErpInfo.ERROR.code);\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u5e26\u4f59\u989d\u7684\u62a5\u8868\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/listWithBalance\\\")\n    @ApiOperation(value = \\\"\u83b7\u53d6\u5e26\u4f59\u989d\u7684\u62a5\u8868\\\")\n    public BaseResponseInfo listWithBalance(@RequestParam(\\\"name\\\") String name,\n                                            @RequestParam(\\\"serialNo\\\") String serialNo,\n                                            @RequestParam(\\\"currentPage\\\") Integer currentPage,\n                                            @RequestParam(\\\"pageSize\\\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception {\n        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\\\"rows\\\", list);\n            map.put(\\\"total\\\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u7ed3\u7b97\u8d26\u6237\u7684\u7edf\u8ba1\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/getStatistics\\\")\n    @ApiOperation(value = \\\"\u7ed3\u7b97\u8d26\u6237\u7684\u7edf\u8ba1\\\")\n\n\n", "CodeBleu_score": 45.04681550305703}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t   public String findBySelect(HttpServletRequest request) throws Exception {\n        String res = null;\n        try {\n            List<Account> dataList = accountService.findBySelect();\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataList) {\n                for (Account account : dataList) {\n                    JSONObject item = new JSONObject();\n                    item.put(\\\"Id\\\", account.getId());\n                    //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                    item.put(\\\"AccountName\\\", account.getName());\n                    dataArray.add(item);\n                }\n            }\n            res = dataArray.toJSONString();\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u83b7\u53d6\u6240\u6709\u7ed3\u7b97\u8d26\u6237\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/getAccount\\\")\n    @ApiOperation(value = \\\"\u83b7\u53d6\u6240\u6709\u7ed3\u7b97\u8d26\u6237\\\")\n    public BaseResponseInfo getAccount(HttpServletRequest request) throws Exception {\n        BaseResponseInfo res = new BaseResponseInfo();\n        Map<String, Object> map = new HashMap<String, Object>();\n        try {\n            List<Account> accountList = accountService.getAccount();\n            map.put(\\\"accountList\\\", accountList);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u8d26\u6237\u6d41\u6c34\u4fe1\u606f\n     * @param currentPage\n     * @param pageSize\n     * @param accountId\n     * @param initialAmount\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/findAccountInOutList\\\")\n    @ApiOperation(value = \\\"\u8d26\u6237\u6d41\u6c34\u4fe1\u606f\\\")\n    public BaseResponseInfo findAccountInOutList(@RequestParam(\\\"currentPage\\\") Integer currentPage,\n                                                 @RequestParam(\\\"pageSize\\\") Integer pageSize,\n                                                 @RequestParam(\\\"accountId\\\") Long accountId,\n                                                 @RequestParam(\\\"initialAmount\\\") BigDecimal initialAmount,\n                                                 @RequestParam(value = \\\"number\\\",required = false) String number,\n                                                 @RequestParam(value = \\\"beginTime\\\",required = false) String beginTime,\n                                                 @RequestParam(value = \\\"endTime\\\",required = false) String endTime,\n                                                 HttpServletRequest request) throws Exception{\n        BaseResponseInfo res = new BaseResponseInfo();\n        Map<String, Object> map = new HashMap<String, Object>();\n        try {\n            Boolean forceFlag = systemConfigService.getForceApprovalFlag();\n            List<AccountVo4InOutList> dataList = accountService.findAccountInOutList(accountId, StringUtil.toNull(number),\n                    beginTime, endTime, forceFlag, (currentPage-1)*pageSize, pageSize);\n            int total = accountService.findAccountInOutListCount(accountId, StringUtil.toNull(number),\n                    beginTime, endTime, forceFlag);\n            map.put(\\\"total\\\", total);\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataList) {\n                for (AccountVo4InOutList aEx : dataList) {\n                    String type = aEx.getType().replace(\\\"\u5176\u5b83\\\", \\\"\\\");\n                    aEx.setType(type);\n                    String operTime = aEx.getOperTime();\n                    BigDecimal balance = accountService.getAccountSum(accountId, null, operTime, forceFlag)\n                            .add(accountService.getAccountSumByHead(accountId, null, operTime, forceFlag))\n                            .add(accountService.getAccountSumByDetail(accountId, null, operTime, forceFlag))\n                            .add(accountService.getManyAccountSum(accountId, null, operTime, forceFlag)).add(initialAmount);\n                    aEx.setBalance(balance);\n                    aEx.setAccountId(accountId);\n                    dataArray.add(aEx);\n                }\n            }\n            map.put(\\\"rows\\\", dataArray);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u66f4\u65b0\u9ed8\u8ba4\u8d26\u6237\n     * @param object\n     * @param request\n     * @return\n     * @throws Exception\n     */\n    @PostMapping(value = \\\"/updateIsDefault\\\")\n    @ApiOperation(value = \\\"\u66f4\u65b0\u9ed8\u8ba4\u8d26\u6237\\\")\n    public String updateIsDefault(@RequestBody JSONObject object,\n                                       HttpServletRequest request) throws Exception{\n        Long accountId = object.getLong(\\\"id\\\");\n        Map<String, Object> objectMap = new HashMap<>();\n        int res = accountService.updateIsDefault(accountId);\n        if(res > 0) {\n            return returnJson(objectMap, ErpInfo.OK.name, ErpInfo.OK.code);\n        } else {\n            return returnJson(objectMap, ErpInfo.ERROR.name, ErpInfo.ERROR.code);\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u5e26\u4f59\u989d\u7684\u62a5\u8868\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/listWithBalance\\\")\n    @ApiOperation(value = \\\"\u83b7\u53d6\u5e26\u4f59\u989d\u7684\u62a5\u8868\\\")\n    public BaseResponseInfo listWithBalance(@RequestParam(\\\"name\\\") String name,\n                                            @RequestParam(\\\"serialNo\\\") String serialNo,\n                                            @RequestParam(\\\"currentPage\\\") Integer currentPage,\n                                            @RequestParam(\\\"pageSize\\\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception {\n        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\\\"rows\\\", list);\n            map.put(\\\"total\\\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u7ed3\u7b97\u8d26\u6237\u7684\u7edf\u8ba1\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/getStatistics\\\")\n    @ApiOperation(value = \\\"\u7ed3\u7b97\u8d26\u6237\u7684\u7edf\u8ba1\\\")\n\n\n", "CodeBleu_score": 45.04681550305703}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size() > 0) {\n                res.code = 200;\n                res.data = list.get(0);\n            } else {\n                res.code = 500;\n                res.data = \"\u67e5\u8be2\u5931\u8d25\";\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            res.code = 500;\n            res.data = \"\u670d\u52a1\u5668\u5f02\u5e38\";\n        }\n        return res;\n    }", "CodeBleu_score": 59.29581594356651}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size() > 0) {\n                res.code = 200;\n                res.data = list.get(0);\n            } else {\n                res.code = 200;\n                res.data = null;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 61.55089335826458}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size() > 0) {\n                res.code = 200;\n                res.data = list.get(0);\n            } else {\n                res.code = 200;\n                res.data = null;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 61.55089335826458}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<Depot> depotList = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = depotList;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 84.27944586484108}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<Depot> depotList = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = depotList;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 84.27944586484108}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<Depot> depotList = depotService.findDepotByCurrentUser(request);\n        res.code = 200;\n        res.data = depotList;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 67.0668061749528}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\terp.datasource.entities.Function;", "CodeBleu_score": 6.790630875537182}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\terp.datasource.entities.Function;", "CodeBleu_score": 6.790630875537182}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\terp.datasource.entities.Function;", "CodeBleu_score": 6.790630875537182}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n            res.code = 200;\n            res.data = platformConfig;\n        } catch(Exception e){\n            e.printStackTrace();\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 82.15390171989658}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n        res.code = 200;\n        res.data = platformConfig;\n    } catch(Exception e) {\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 89.12340376922701}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n            res.code = 200;\n            res.data = platformConfig;\n        } catch(Exception e){\n            e.printStackTrace();\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u4fe1\u606f\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 79.79742307746126}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<SystemConfig> list = systemConfigService.getSystemConfigList(null);\n        if(list.size() > 0) {\n            res.setData(list.get(0));\n            res.setCode(200);\n        } else {\n            res.setCode(404);\n            res.setMsg(\"Not found\");\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        res.setCode(500);\n        res.setMsg(e.getMessage());\n    }\n    return res;\n}", "CodeBleu_score": 45.29708741272978}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<SystemConfig> list = systemConfigService.getSystemConfigList();\n        if(list.size() > 0) {\n            res.code = 200;\n            res.data = list.get(0);\n        } else {\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\";\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\u5f02\u5e38\";\n    }\n    return res;\n}", "CodeBleu_score": 68.23764378905075}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<SystemConfig> list = systemConfigService.getSystemConfig();\n        if(list.size() > 0) {\n            res.code = 200;\n            res.data = list.get(0);\n        } else {\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\";\n        }\n    } catch(Exception e) {\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 71.40097503921963}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        // \u83b7\u53d6\u6587\u4ef6\u4fdd\u5b58\u8def\u5f84\n        String path = getBusinessPath(request);\n        // \u83b7\u53d6\u4e0a\u4f20\u7684\u6587\u4ef6\n        MultipartFile file = getFile(request);\n        // \u4fdd\u5b58\u6587\u4ef6\n        String fileUrl = FileUtils.saveFile(file, path, fileUploadType);\n        res.code = 200;\n        res.data = fileUrl;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u4e0a\u4f20\u6587\u4ef6\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 39.822240734192334}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        // \u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u7684\u8def\u5f84\n        String path = request.getParameter(\"path\");\n        // \u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\n        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n        MultipartFile file = multipartRequest.getFile(\"file\");\n        // \u5982\u679c\u8def\u5f84\u4e3a\u7a7a\uff0c\u5219\u5c06\u6587\u4ef6\u4fdd\u5b58\u5230\u9ed8\u8ba4\u8def\u5f84\n        if (StringUtil.isEmpty(path)) {\n            path = filePath;\n        }\n        // \u5982\u679c\u6587\u4ef6\u4e0a\u4f20\u7c7b\u578b\u4e3a\u672c\u5730\uff0c\u5219\u5c06\u6587\u4ef6\u4fdd\u5b58\u5230\u672c\u5730\n        if (fileUploadType == 0) {\n            // \u6587\u4ef6\u4fdd\u5b58\u8def\u5f84\n            String fileSavePath = path + File.separator + file.getOriginalFilename();\n            // \u4fdd\u5b58\u6587\u4ef6\n            FileUtils.saveFile(file, fileSavePath);\n        } else {\n            // \u6587\u4ef6\u4fdd\u5b58\u8def\u5f84\n            String fileSavePath = path + File.separator + file.getOriginalFilename();\n            // \u4fdd\u5b58\u6587\u4ef6\n            FileUtils.saveFileToOss(file, fileSavePath);\n        }\n        res.code = 200;\n        res.data = fileSavePath;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 52.5968232370543}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        // Get the business path from the request\n        String businessPath = request.getParameter(\"businessPath\");\n        if(StringUtil.isEmpty(businessPath)) {\n            res.code = 500;\n            res.data = \"\u4e1a\u52a1\u8def\u5f84\u4e0d\u80fd\u4e3a\u7a7a\";\n            return res;\n        }\n        // Get the uploaded file from the request\n        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n        MultipartFile file = multipartRequest.getFile(\"file\");\n        if(file == null || file.isEmpty()) {\n            res.code = 500;\n            res.data = \"\u6587\u4ef6\u4e0d\u80fd\u4e3a\u7a7a\";\n            return res;\n        }\n        // Get the file upload type from the request\n        String fileUploadType = request.getParameter(\"fileUploadType\");\n        if(StringUtil.isEmpty(fileUploadType)) {\n            res.code = 500;\n            res.data = \"\u6587\u4ef6\u4e0a\u4f20\u7c7b\u578b\u4e0d\u80fd\u4e3a\u7a7a\";\n            return res;\n        }\n        // Get the file path from the request\n        String filePath = request.getParameter(\"filePath\");\n        if(StringUtil.isEmpty(filePath)) {\n            res.code = 500;\n            res.data = \"\u6587\u4ef6\u8def\u5f84\u4e0d\u80fd\u4e3a\u7a7a\";\n            return res;\n        }\n        // Save the file\n        String fileUrl = \"\";\n        if(fileUploadType.equals(\"0\")) {\n            fileUrl = FileUtils.saveFile(file, filePath, businessPath);\n        } else if(fileUploadType.equals(\"1\")) {\n            fileUrl = FileUtils.saveFileToAliOss(file, filePath, businessPath);\n        }\n        // Set the response code and data\n        res.code = 200;\n        res.data = fileUrl;\n    } catch(Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 55.19622325800731}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\tRequestSize) {\n                limit = maxFileSize;\n            } else {\n                limit = maxRequestSize;\n            }\n            res.code = 200;\n            res.data = limit;\n        }", "CodeBleu_score": 13.574590747231483}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\tRequestSize) {\n                limit = maxFileSize;\n            } else {\n                limit = maxRequestSize;\n            }\n            res.code = 200;\n            res.data = limit;\n        }", "CodeBleu_score": 13.574590747231483}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\tRequestSize) {\n                limit = maxFileSize;\n            } else {\n                limit = maxRequestSize;\n            }\n            res.code = 200;\n            res.data = limit;\n        }", "CodeBleu_score": 13.574590747231483}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t.erp.service.systemConfig.SystemConfigService;", "CodeBleu_score": 4.08848161464715}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t.erp.service.systemConfig.SystemConfigService;", "CodeBleu_score": 4.08848161464715}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t.erp.service.systemConfig.SystemConfigService;", "CodeBleu_score": 4.08848161464715}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\tList = accountIdList.split(\\\",\\\");\n                    String[] amList = accountMoneyList.split(\\\",\\\");\n                    for (int i = 0; i < aList.length; i++) {\n                        if (aList[i].equals(accountId.toString())) {\n                            if(amList.length>0) {\n                                accountSum = accountSum.add(new BigDecimal(amList[i]));\n                            }\n                        }\n                    }\n                }", "CodeBleu_score": 23.304261193894877}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\tList = accountIdList.split(\\\",\\\");\n                    String[] amList = accountMoneyList.split(\\\",\\\");\n                    for (int i = 0; i < aList.length; i++) {\n                        if (aList[i].equals(accountId.toString())) {\n                            if(amList.length>0) {\n                                accountSum = accountSum.add(new BigDecimal(amList[i]));\n                            }\n                        }\n                    }\n                }", "CodeBleu_score": 23.304261193894877}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\tList = accountIdList.split(\\\",\\\");\n                    String[] amList = accountMoneyList.split(\\\",\\\");\n                    for (int i = 0; i < aList.length; i++) {\n                        if (aList[i].equals(accountId.toString())) {\n                            if(amList.length>0) {\n                                accountSum = accountSum.add(new BigDecimal(amList[i]));\n                            }\n                        }\n                    }\n                }", "CodeBleu_score": 23.304261193894877}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\tint result =0;\n    try{\n        result=depotItemMapper.deleteByPrimaryKey(id);\n    }catch(Exception e){\n        JshException.readFail(logger, e);\n    }\n    return result;\n}", "CodeBleu_score": 92.97408128334675}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\tint result =0;\n    try{\n        result=depotItemMapper.deleteByPrimaryKey(id);\n    }catch(Exception e){\n        JshException.readFail(logger, e);\n    }\n    return result;\n}", "CodeBleu_score": 92.97408128334675}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\tint result = 0;\n    try{\n        result=depotItemMapper.deleteByPrimaryKey(id);\n    }catch(Exception e){\n        JshException.readFail(logger, e);\n    }\n    return result;\n}", "CodeBleu_score": 86.62804442606266}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tCloseableHttpClient httpClient = null;\n\tCloseableHttpResponse response = null;\n\ttry {\n\t\thttpClient = HttpClients.createDefault();\n\t\tHttpGet getRequest = new HttpGet(protocol + \"://\" + host + \":\" + port + \"/\" + projectName + \"/nodes/\" + nodeType + \"/\" + nodeKey);\n\t\tresponse = httpClient.execute(getRequest);\n\t\tif (response.getStatusLine().getStatusCode() == 200) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttry {\n\t\t\tresponse.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\ttry {\n\t\t\thttpClient.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 39.50342638843164}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\ttry (CloseableHttpClient client = HttpClients.createDefault()) {\n\n\t\t\tHttpGet request = new HttpGet(protocol + \"://\" + host + \":\" + port + \"/\" + projectName + \"/node/\" + nodeType + \"/\" + nodeKey);\n\t\t\tCloseableHttpResponse response = client.execute(request);\n\n\t\t\ttry {\n\t\t\t\tHttpEntity entity = response.getEntity();\n\t\t\t\tString responseString = EntityUtils.toString(entity);\n\t\t\t\treturn responseString.contains(\"key\");\n\t\t\t} finally {\n\t\t\t\tresponse.close();\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 35.34941146474713}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tString requestUrl = protocol + \"://\" + host + \":\" + port + \"/db/\" + projectName + \"/node/\" + nodeType + \"/\" + nodeKey;\n\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tHttpGet httpGet = new HttpGet(requestUrl);\n\tCloseableHttpResponse response = null;\n\ttry {\n\t\tresponse = httpClient.execute(httpGet);\n\t\tString responseString = EntityUtils.toString(response.getEntity(), Charset.forName(\"UTF-8\"));\n\t\tif (responseString.contains(\"key\")) {\n\t\t\treturn true;\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttry {\n\t\t\tresponse.close();\n\t\t\thttpClient.close();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 45.56784432908284}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\tHttpHost host = new HttpHost(getHost(), getPort(), getProtocol());\n\t\tHttpGet getRequest = new HttpGet(\n\t\t\t\t\"/addEdge/\" +withProjectName(projectName) + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to);\n\t\thttpResponse = httpClient.execute(host, getRequest);\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tif (entity != null) {\n\t\t\tObjectMapper om = new ObjectMapper();\n\t\t\tString result = EntityUtils.toString(entity);\n\t\t\tMap map = om.readValue(result, Map.class);\n\t\t\tif (map.get(\"key\") != null) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n}", "CodeBleu_score": 97.0642809963868}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\tHttpHost host = new HttpHost(getHost(), getPort(), getProtocol());\n\t\tHttpGet getRequest = new HttpGet(\n\t\t\t\t\"/addEdge/\" +withProjectName(projectName) + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to);\n\t\thttpResponse = httpClient.execute(host, getRequest);\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tif (entity != null) {\n\t\t\tObjectMapper om = new ObjectMapper();\n\t\t\tString result = EntityUtils.toString(entity);\n\t\t\tMap map = om.readValue(result, Map.class);\n\t\t\tif (map.get(\"key\") != null) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n}", "CodeBleu_score": 97.0642809963868}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\tHttpHost host = new HttpHost(getHost(), getPort(), getProtocol());\n\t\tHttpGet getRequest = new HttpGet(\n\t\t\t\t\"/addEdge/\" +withProjectName(projectName) + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to);\n\t\thttpResponse = httpClient.execute(host, getRequest);\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tif (entity != null) {\n\t\t\tObjectMapper om = new ObjectMapper();\n\t\t\tString result = EntityUtils.toString(entity);\n\t\t\tMap map = om.readValue(result, Map.class);\n\t\t\tif (map.get(\"key\") != null) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n}", "CodeBleu_score": 97.0642809963868}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\tif (event == null || event.getMessage() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(getRandomTestLocation());\n    }\n    event.setTime(new Date());\n    try {\n        String json = objectMapper.writeValueAsString(event);\n        String topic = event.getTarget() == null ? \"test\" : event.getTarget();\n        ProducerRecord<String, String> record = new ProducerRecord<>(topic, json);\n        producer.send(record);\n        producer.flush();\n    } catch (JsonProcessingException e) {\n        throw new RuntimeException(\"Failed to convert event to JSON\", e);\n    }\n}", "CodeBleu_score": 50.15387036725959}, {"code": "public void sendEvent(Event event){\n\tif (event == null || event.getMessage() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(getTestLocation());\n    }\n    event.setTime(new Date());\n    String json = null;\n    try {\n        json = objectMapper.writeValueAsString(event);\n    } catch (JsonProcessingException e) {\n        e.printStackTrace();\n    }\n    if (json == null) {\n        return;\n    }\n    String topic = event.getTarget();\n    if (topic == null) {\n        topic = \"test\";\n    }\n    ProducerRecord<String, String> record = new ProducerRecord<>(topic, json);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 56.89283336747542}, {"code": "public void sendEvent(Event event){\n\tif (event == null || event.getMessage() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(getTestLocation());\n    }\n    event.setEventTime(new Date());\n    String jsonString;\n    try {\n        jsonString = objectMapper.writeValueAsString(event);\n    } catch (JsonProcessingException e) {\n        return;\n    }\n    String topic = event.getTarget() != null ? event.getTarget() : \"test\";\n    ProducerRecord<String, String> record = new ProducerRecord<>(topic, jsonString);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 51.25517964016808}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t;\n", "CodeBleu_score": 4.0526637978730085}, {"code": "public String upload(String objName, byte[] content){\n\t;\n", "CodeBleu_score": 4.0526637978730085}, {"code": "public String upload(String objName, byte[] content){\n\t;\n", "CodeBleu_score": 4.0526637978730085}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tIpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo(ipAddress, \"unknown\", \"unknown\");\n    }\n    return worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 28.619977153871922}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tIpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo(ipAddress, \"unknown\", \"unknown\");\n    }\n    return worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 28.619977153871922}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tIpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo(ipAddress);\n    }\n    return worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 28.235794218025568}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (lowLevelRestClient == null || highLevelRestClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (lowLevelRestClient == null || highLevelRestClient == null) {\n\t\t\t\tString[] clusterHosts = clusterHostList.split(\",\");\n\t\t\t\tList<HttpHost> httpHosts = new ArrayList<HttpHost>();\n\t\t\t\tfor (String clusterHost : clusterHosts) {\n\t\t\t\t\tString[] hostAndPort = clusterHost.split(\":\");\n\t\t\t\t\thttpHosts.add(new HttpHost(hostAndPort[0], Integer.parseInt(hostAndPort[1]), \"http\"));\n\t\t\t\t}\n\t\t\t\tlowLevelRestClient = RestClient.builder(httpHosts.toArray(new HttpHost[httpHosts.size()])).build();\n\t\t\t\thighLevelRestClient = new RestHighLevelClient(lowLevelRestClient);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 47.42483415984623}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (lowLevelRestClient != null && highLevelRestClient != null) {\n\t\treturn;\n\t}\n\tsynchronized (this) {\n\t\tif (lowLevelRestClient != null && highLevelRestClient != null) {\n\t\t\treturn;\n\t\t}\n\t\tif (clusterHostList == null) {\n\t\t\tthrow new IllegalArgumentException(\"Cluster host list is not set.\");\n\t\t}\n\t\tif (clusterHostList.trim().isEmpty()) {\n\t\t\tthrow new IllegalArgumentException(\"Cluster host list is empty.\");\n\t\t}\n\t\tString[] clusterHosts = clusterHostList.split(\",\");\n\t\tList<HttpHost> httpHosts = new ArrayList<HttpHost>();\n\t\tfor (String clusterHost : clusterHosts) {\n\t\t\tString[] hostPort = clusterHost.split(\":\");\n\t\t\tif (hostPort.length != 2) {\n\t\t\t\tthrow new IllegalArgumentException(\"Invalid cluster host: \" + clusterHost);\n\t\t\t}\n\t\t\tString host = hostPort[0].trim();\n\t\t\tint port = Integer.parseInt(hostPort[1].trim());\n\t\t\tHttpHost httpHost = new HttpHost(host, port);\n\t\t\thttpHosts.add(httpHost);\n\t\t}\n\t\tlowLevelRestClient = RestClient.builder(httpHosts.toArray(new HttpHost[httpHosts.size()])).build();\n\t\thighLevelRestClient = new RestHighLevelClient(lowLevelRestClient);\n\t}\n}", "CodeBleu_score": 58.202002870653644}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (lowLevelRestClient != null && highLevelRestClient != null) {\n\t\treturn;\n\t}\n\tsynchronized (this) {\n\t\tif (lowLevelRestClient != null && highLevelRestClient != null) {\n\t\t\treturn;\n\t\t}\n\t\tif (clusterHostList == null) {\n\t\t\tthrow new Exception(\"The clusterHostList property must be set.\");\n\t\t}\n\t\tString[] clusterHostListArray = clusterHostList.split(\",\");\n\t\tif (clusterHostListArray.length == 0) {\n\t\t\tthrow new Exception(\"The clusterHostList property must contain at least one host.\");\n\t\t}\n\t\tList<HttpHost> httpHosts = new ArrayList<HttpHost>();\n\t\tfor (String clusterHost : clusterHostListArray) {\n\t\t\tString[] hostPort = clusterHost.split(\":\");\n\t\t\tif (hostPort.length != 2) {\n\t\t\t\tthrow new Exception(\"The clusterHostList property must contain a list of hosts in the format host:port.\");\n\t\t\t}\n\t\t\thttpHosts.add(new HttpHost(hostPort[0], Integer.parseInt(hostPort[1])));\n\t\t}\n\t\tlowLevelRestClient = RestClient.builder(httpHosts.toArray(new HttpHost[httpHosts.size()])).build();\n\t\thighLevelRestClient = new RestHighLevelClient(lowLevelRestClient);\n\t}\n}", "CodeBleu_score": 58.006703395583436}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tint port = clusterPort;\n\t\tString hostString = host.trim();\n\t\tif (hostString.contains(\":\")) {\n\t\t\tString[] hostPort = hostString.split(\":\");\n\t\t\thostString = hostPort[0];\n\t\t\tport = Integer.parseInt(hostPort[1]);\n\t\t}\n\t\thosts.add(new HttpHost(hostString, port));\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 44.68181573888457}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tString[] hostPort = host.split(\":\");\n\t\tif (hostPort.length == 1) {\n\t\t\thosts.add(new HttpHost(hostPort[0], clusterPort, \"http\"));\n\t\t} else if (hostPort.length == 2) {\n\t\t\thosts.add(new HttpHost(hostPort[0], Integer.parseInt(hostPort[1]), \"http\"));\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 44.46525084778891}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tString hostName = host.trim();\n\t\tif (hostName.contains(\":\")) {\n\t\t\tString[] hostPort = hostName.split(\":\");\n\t\t\thosts.add(new HttpHost(hostPort[0].trim(), Integer.parseInt(hostPort[1].trim()), \"http\"));\n\t\t} else {\n\t\t\thosts.add(new HttpHost(hostName.trim(), clusterPort, \"http\"));\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 43.526440210845}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\tMap<String, Object> task = taskQueue.poll(30, TimeUnit.SECONDS);\n\tif (task != null) {\n\t\tString taskType = (String) task.get(PARAM_TASK_TYPE);\n\t\tif (taskType.equals(TASK_PLAIN_TEXT_MESSAGE)) {\n\t\t\tString dest = (String) task.get(PARAM_RECIEVER_NUMBER);\n\t\t\tString fromWho = (String) task.get(PARAM_FROM_WHO);\n\t\t\tString template = (String) task.get(PARAM_MESSAGE_TEMPLATE);\n\t\t\tMap<String, String> parameters = (Map<String, String>) task.get(PARAM_MESSAGE_DATA);\n\t\t\tif (StringUtils.isBlank(dest) || StringUtils.isBlank(fromWho) || StringUtils.isBlank(template) || parameters == null || parameters.isEmpty()) {\n\t\t\t\tlog.error(\"Invalid message data: \" + task);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsendMessage(dest, fromWho, template, parameters);\n\t\t}\n\t}\n}", "CodeBleu_score": 53.70973464826019}, {"code": "protected void pollingWork() throws InterruptedException{\n\tMap<String, Object> task = null;\n\ttry {\n\t\ttask = taskQueue.poll(30, TimeUnit.SECONDS);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\tif (task == null) {\n\t\treturn;\n\t}\n\tString taskType = (String) task.get(PARAM_TASK_TYPE);\n\tif (taskType == null) {\n\t\treturn;\n\t}\n\tif (taskType.equals(TASK_PLAIN_TEXT_MESSAGE)) {\n\t\tString toNumber = (String) task.get(PARAM_RECIEVER_NUMBER);\n\t\tString fromWho = (String) task.get(PARAM_FROM_WHO);\n\t\tString template = (String) task.get(PARAM_MESSAGE_TEMPLATE);\n\t\tMap<String, String> parameters = (Map<String, String>) task.get(PARAM_MESSAGE_DATA);\n\t\tif (StringUtils.isBlank(toNumber) || StringUtils.isBlank(fromWho) || StringUtils.isBlank(template) || parameters == null\n\t\t\t\t|| parameters.isEmpty()) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tsendPlainTextMessage(toNumber, fromWho, template, parameters);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "CodeBleu_score": 49.54084939578734}, {"code": "protected void pollingWork() throws InterruptedException{\n\tMap<String, Object> task = null;\n\twhile (running.get()) {\n\t\ttask = taskQueue.poll(30, TimeUnit.SECONDS);\n\t\tif (task != null) {\n\t\t\ttry {\n\t\t\t\tString taskType = (String) task.get(PARAM_TASK_TYPE);\n\t\t\t\tif (taskType.equals(TASK_PLAIN_TEXT_MESSAGE)) {\n\t\t\t\t\tString dest = (String) task.get(PARAM_RECIEVER_NUMBER);\n\t\t\t\t\tString fromWho = (String) task.get(PARAM_FROM_WHO);\n\t\t\t\t\tString template = (String) task.get(PARAM_MESSAGE_TEMPLATE);\n\t\t\t\t\tMap<String, String> parameters = (Map<String, String>) task.get(PARAM_MESSAGE_DATA);\n\t\t\t\t\tif (StringUtils.isBlank(dest) || StringUtils.isBlank(template) || parameters == null\n\t\t\t\t\t\t\t|| parameters.isEmpty()) {\n\t\t\t\t\t\tlog.error(\"Invalid task parameters: taskType=\" + taskType + \", dest=\" + dest\n\t\t\t\t\t\t\t\t+ \", template=\" + template + \", parameters=\" + parameters);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (StringUtils.isBlank(fromWho)) {\n\t\t\t\t\t\tfromWho = DEFAULT_FROM_WHO;\n\t\t\t\t\t}\n\t\t\t\t\tString message = MessageUtil.formatMessage(template, parameters);\n\t\t\t\t\tif (StringUtils.isBlank(message)) {\n\t\t\t\t\t\tlog.error(\"Invalid message: template=\" + template + \", parameters=\" + parameters);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tsendMessage(dest, fromWho, message);\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tlog.error(\"Exception when processing task: \" + task, e);\n\t\t\t}", "CodeBleu_score": 41.71387536331154}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tAM_TASK_TYPE=\\\"task_type\\\";\n\tprotected static final String PARAM_RECIEVER_NUMBER=\\\"to_number\\\";\n\tprotected static final String PARAM_FROM_WHO=\\\"from_who\\\";\n\n\tprotected static final String PARAM_MESSAGE_TEMPLATE=\\\"template\\\";\n\tprotected static final String PARAM_MESSAGE_DATA=\\\"params\\\";\n\tprotected static final int QUEUE_SIZE = 100;\n\n\tprotected SMTPService smtpService;\n\n\n\n\tpublic SMTPService getSmtpService() {\n\t\treturn smtpService;\n\t}\n\n\tpublic void setSmtpService(SMTPService smtpService) {\n\t\tthis.smtpService = smtpService;\n\t}\n\n\t@Override\n\tpublic void sendMessage(String dest, String fromWho, String template, Map<String, String> parameters)\n\t\t\tthrows Exception {\n\t\tif (!StringUtils.isBlank(template) && (parameters==null || parameters.isEmpty())){\n\t\t\t// \u5982\u679c\u4f60\u8c03\u9519\u4e86\u63a5\u53e3\uff0c\u628a\u6d88\u606f\u653e\u5230template\u53c2\u6570\u4e0a\u4e86\uff0c\u4e5f\u5c31\u8fd9\u4e2a\u77ed\u4fe1\u670d\u52a1\u63a5\u53e3\uff0c\u3000\u53ef\u4ee5\u517c\u5bb9\u5904\u7406\u4e00\u4e0b\n\t\t\tparameters = new HashMap<String, String>();\n\t\t\tparameters.put(\\\"message\\\", template);\n\t\t}\n\n\t\tMap<String, Object> task = new HashMap<String, Object>();\n\t\ttask.put(PARAM_TASK_TYPE, TASK_PLAIN_TEXT_MESSAGE);\n\t\ttask.put(PARAM_RECIEVER_NUMBER, dest);\n\t\ttask.put(PARAM_FROM_WHO, fromWho);\n\t\ttask.put(PARAM_MESSAGE_TEMPLATE, template);\n\t\ttask.put(PARAM_MESSAGE_DATA, parameters);\n\n\t\taddTask(task);\n\t}\n\n\tprivate void addTask(Map<String, Object> task) {\n\t\tensureTaskThread();\n\t\ttry {\n\t\t\ttaskQueue.put(task);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tprivate void ensureTaskThread() {\n\t\tif (taskQueue != null){\n\t\t\treturn;\n\t\t}\n\t\tsynchronized (SczhtMessageService.class){\n\t\t\tif (taskQueue != null){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttaskQueueThread = new Thread(){\n\t\t\t\tpublic void run(){\n\t\t\t\t\twhile(running.get()){\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tpollingWork();\n\t\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\ttaskQueue = new LinkedBlockingQueue<Map<String, Object>>(QUEUE_SIZE);\n\t\t\trunning.set(true);\n\t\t\ttaskQueueThread.start();\n\t\t}\n\t}\n\n\tprotected void pollingWork() throws InterruptedException{\n\t\tMap<String, Object> task = taskQueue.poll(30, TimeUnit.SECONDS);\n\t\tif (task == null){\n\t\t\treturn;\n\t\t}\n\t\tString taskType = (String) task.get(PARAM_TASK_TYPE);\n\t\tif (taskType.equals(TASK_PLAIN_TEXT_MESSAGE)){\n\t\t\ttry {\n\t\t\t\tString toNumber = (String) task.get(PARAM_RECIEVER_NUMBER);\n\t\t\t\tObject param = task.get(PARAM_MESSAGE_DATA);\n\t\t\t\tif (!(param instanceof Map)){\n\t\t\t\t\tSystem.out.println(\\\"Send message to \\\" + toNumber + \\\" failed. Input data is \\\" + param);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tString message = (String) ((Map<String, Object>) param).get(\\\"message\\\");\n\t\t\t\tSystem.out.println(\\\"Send message to \\\" + toNumber+\\\": \\\" + message);\n\t\t\t\tsendPlainTextMessage(toNumber,message);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate void sendPlainTextMessage(String toNumber, String message) throws Exception {\n\t\t// http://api.sczht.cc:8888/sms.aspx\n\t\tString sentMsg = \\\"\u3010\\\"+getSmsSignName()+\\\"\u3011 \\\"+message+getTimeStamp();\n\t\tURI uri = new URIBuilder().setScheme(\\\"http\\\").setHost(\\\"api.sczht.cc\\\").setPort(8888)\n\t\t\t\t.setPath(\\\"sms.aspx\\\").addParameter(\\\"action\\\", \\\"send\\\")\n\t\t\t\t.addParameter(\\\"userid\\\", getUserId())\n\t\t\t\t.addParameter(\\\"account\\\", getAccount())\n\t\t\t\t.addParameter(\\\"password\\\", getPasswork())\n\t\t\t\t.addParameter(\\\"mobile\\\", toNumber)\n\t\t\t\t.addParameter(\\\"content\\\",sentMsg )\n\t\t\t\t.build();\n\t\tString content = httpGetRequestXml(uri);\n\t\t//Map<String, Object> responseObj = XMLDecodeUtils.decodeXmlString(content);\n\t\tif (content!=null && isSuccessResponse(content)){\n\t\t\tSystem.out.println(\\\"SMS to \\\" + toNumber+\\\" success:\\\" + sentMsg);\n\t\t}else{\n\t\t\tSystem.out.println(\\\"SMS to \\\" + toNumber+\\\" failed.\\t response is \\\" + content);\n\t\t\tif (this.getSmtpService() != null) {\n\t\t\t\tString messageContent = String.format(\\\"\u5411%s\u53d1\u9001\u6d88\u606f%s\u5931\u8d25.\\r", "CodeBleu_score": 29.959088168672952}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tAM_TASK_TYPE=\\\"task_type\\\";\n\tprotected static final String PARAM_RECIEVER_NUMBER=\\\"to_number\\\";\n\tprotected static final String PARAM_FROM_WHO=\\\"from_who\\\";\n\n\tprotected static final String PARAM_MESSAGE_TEMPLATE=\\\"template\\\";\n\tprotected static final String PARAM_MESSAGE_DATA=\\\"params\\\";\n\tprotected static final int QUEUE_SIZE = 100;\n\n\tprotected SMTPService smtpService;\n\n\n\n\tpublic SMTPService getSmtpService() {\n\t\treturn smtpService;\n\t}\n\n\tpublic void setSmtpService(SMTPService smtpService) {\n\t\tthis.smtpService = smtpService;\n\t}\n\n\t@Override\n\tpublic void sendMessage(String dest, String fromWho, String template, Map<String, String> parameters)\n\t\t\tthrows Exception {\n\t\tif (!StringUtils.isBlank(template) && (parameters==null || parameters.isEmpty())){\n\t\t\t// \u5982\u679c\u4f60\u8c03\u9519\u4e86\u63a5\u53e3\uff0c\u628a\u6d88\u606f\u653e\u5230template\u53c2\u6570\u4e0a\u4e86\uff0c\u4e5f\u5c31\u8fd9\u4e2a\u77ed\u4fe1\u670d\u52a1\u63a5\u53e3\uff0c\u3000\u53ef\u4ee5\u517c\u5bb9\u5904\u7406\u4e00\u4e0b\n\t\t\tparameters = new HashMap<String, String>();\n\t\t\tparameters.put(\\\"message\\\", template);\n\t\t}\n\n\t\tMap<String, Object> task = new HashMap<String, Object>();\n\t\ttask.put(PARAM_TASK_TYPE, TASK_PLAIN_TEXT_MESSAGE);\n\t\ttask.put(PARAM_RECIEVER_NUMBER, dest);\n\t\ttask.put(PARAM_FROM_WHO, fromWho);\n\t\ttask.put(PARAM_MESSAGE_TEMPLATE, template);\n\t\ttask.put(PARAM_MESSAGE_DATA, parameters);\n\n\t\taddTask(task);\n\t}\n\n\tprivate void addTask(Map<String, Object> task) {\n\t\tensureTaskThread();\n\t\ttry {\n\t\t\ttaskQueue.put(task);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tprivate void ensureTaskThread() {\n\t\tif (taskQueue != null){\n\t\t\treturn;\n\t\t}\n\t\tsynchronized (SczhtMessageService.class){\n\t\t\tif (taskQueue != null){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttaskQueueThread = new Thread(){\n\t\t\t\tpublic void run(){\n\t\t\t\t\twhile(running.get()){\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tpollingWork();\n\t\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\ttaskQueue = new LinkedBlockingQueue<Map<String, Object>>(QUEUE_SIZE);\n\t\t\trunning.set(true);\n\t\t\ttaskQueueThread.start();\n\t\t}\n\t}\n\n\tprotected void pollingWork() throws InterruptedException{\n\t\tMap<String, Object> task = taskQueue.poll(30, TimeUnit.SECONDS);\n\t\tif (task == null){\n\t\t\treturn;\n\t\t}\n\t\tString taskType = (String) task.get(PARAM_TASK_TYPE);\n\t\tif (taskType.equals(TASK_PLAIN_TEXT_MESSAGE)){\n\t\t\ttry {\n\t\t\t\tString toNumber = (String) task.get(PARAM_RECIEVER_NUMBER);\n\t\t\t\tObject param = task.get(PARAM_MESSAGE_DATA);\n\t\t\t\tif (!(param instanceof Map)){\n\t\t\t\t\tSystem.out.println(\\\"Send message to \\\" + toNumber + \\\" failed. Input data is \\\" + param);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tString message = (String) ((Map<String, Object>) param).get(\\\"message\\\");\n\t\t\t\tSystem.out.println(\\\"Send message to \\\" + toNumber+\\\": \\\" + message);\n\t\t\t\tsendPlainTextMessage(toNumber,message);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate void sendPlainTextMessage(String toNumber, String message) throws Exception {\n\t\t// http://api.sczht.cc:8888/sms.aspx\n\t\tString sentMsg = \\\"\u3010\\\"+getSmsSignName()+\\\"\u3011 \\\"+message+getTimeStamp();\n\t\tURI uri = new URIBuilder().setScheme(\\\"http\\\").setHost(\\\"api.sczht.cc\\\").setPort(8888)\n\t\t\t\t.setPath(\\\"sms.aspx\\\").addParameter(\\\"action\\\", \\\"send\\\")\n\t\t\t\t.addParameter(\\\"userid\\\", getUserId())\n\t\t\t\t.addParameter(\\\"account\\\", getAccount())\n\t\t\t\t.addParameter(\\\"password\\\", getPasswork())\n\t\t\t\t.addParameter(\\\"mobile\\\", toNumber)\n\t\t\t\t.addParameter(\\\"content\\\",sentMsg )\n\t\t\t\t.build();\n\t\tString content = httpGetRequestXml(uri);\n\t\t//Map<String, Object> responseObj = XMLDecodeUtils.decodeXmlString(content);\n\t\tif (content!=null && isSuccessResponse(content)){\n\t\t\tSystem.out.println(\\\"SMS to \\\" + toNumber+\\\" success:\\\" + sentMsg);\n\t\t}else{\n\t\t\tSystem.out.println(\\\"SMS to \\\" + toNumber+\\\" failed.\\t response is \\\" + content);\n\t\t\tif (this.getSmtpService() != null) {\n\t\t\t\tString messageContent = String.format(\\\"\u5411%s\u53d1\u9001\u6d88\u606f%s\u5931\u8d25.\\r", "CodeBleu_score": 29.959088168672952}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tAM_TASK_TYPE=\\\"task_type\\\";\n\tprotected static final String PARAM_RECIEVER_NUMBER=\\\"to_number\\\";\n\tprotected static final String PARAM_FROM_WHO=\\\"from_who\\\";\n\n\tprotected static final String PARAM_MESSAGE_TEMPLATE=\\\"template\\\";\n\tprotected static final String PARAM_MESSAGE_DATA=\\\"params\\\";\n\tprotected static final int QUEUE_SIZE = 100;\n\n\tprotected SMTPService smtpService;\n\n\n\n\tpublic SMTPService getSmtpService() {\n\t\treturn smtpService;\n\t}\n\n\tpublic void setSmtpService(SMTPService smtpService) {\n\t\tthis.smtpService = smtpService;\n\t}\n\n\t@Override\n\tpublic void sendMessage(String dest, String fromWho, String template, Map<String, String> parameters)\n\t\t\tthrows Exception {\n\t\tif (!StringUtils.isBlank(template) && (parameters==null || parameters.isEmpty())){\n\t\t\t// \u5982\u679c\u4f60\u8c03\u9519\u4e86\u63a5\u53e3\uff0c\u628a\u6d88\u606f\u653e\u5230template\u53c2\u6570\u4e0a\u4e86\uff0c\u4e5f\u5c31\u8fd9\u4e2a\u77ed\u4fe1\u670d\u52a1\u63a5\u53e3\uff0c\u3000\u53ef\u4ee5\u517c\u5bb9\u5904\u7406\u4e00\u4e0b\n\t\t\tparameters = new HashMap<String, String>();\n\t\t\tparameters.put(\\\"message\\\", template);\n\t\t}\n\n\t\tMap<String, Object> task = new HashMap<String, Object>();\n\t\ttask.put(PARAM_TASK_TYPE, TASK_PLAIN_TEXT_MESSAGE);\n\t\ttask.put(PARAM_RECIEVER_NUMBER, dest);\n\t\ttask.put(PARAM_FROM_WHO, fromWho);\n\t\ttask.put(PARAM_MESSAGE_TEMPLATE, template);\n\t\ttask.put(PARAM_MESSAGE_DATA, parameters);\n\n\t\taddTask(task);\n\t}\n\n\tprivate void addTask(Map<String, Object> task) {\n\t\tensureTaskThread();\n\t\ttry {\n\t\t\ttaskQueue.put(task);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tprivate void ensureTaskThread() {\n\t\tif (taskQueue != null){\n\t\t\treturn;\n\t\t}\n\t\tsynchronized (SczhtMessageService.class){\n\t\t\tif (taskQueue != null){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttaskQueueThread = new Thread(){\n\t\t\t\tpublic void run(){\n\t\t\t\t\twhile(running.get()){\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tpollingWork();\n\t\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\ttaskQueue = new LinkedBlockingQueue<Map<String, Object>>(QUEUE_SIZE);\n\t\t\trunning.set(true);\n\t\t\ttaskQueueThread.start();\n\t\t}\n\t}\n\n\tprotected void pollingWork() throws InterruptedException{\n\t\tMap<String, Object> task = taskQueue.poll(30, TimeUnit.SECONDS);\n\t\tif (task == null){\n\t\t\treturn;\n\t\t}\n\t\tString taskType = (String) task.get(PARAM_TASK_TYPE);\n\t\tif (taskType.equals(TASK_PLAIN_TEXT_MESSAGE)){\n\t\t\ttry {\n\t\t\t\tString toNumber = (String) task.get(PARAM_RECIEVER_NUMBER);\n\t\t\t\tObject param = task.get(PARAM_MESSAGE_DATA);\n\t\t\t\tif (!(param instanceof Map)){\n\t\t\t\t\tSystem.out.println(\\\"Send message to \\\" + toNumber + \\\" failed. Input data is \\\" + param);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tString message = (String) ((Map<String, Object>) param).get(\\\"message\\\");\n\t\t\t\tSystem.out.println(\\\"Send message to \\\" + toNumber+\\\": \\\" + message);\n\t\t\t\tsendPlainTextMessage(toNumber,message);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate void sendPlainTextMessage(String toNumber, String message) throws Exception {\n\t\t// http://api.sczht.cc:8888/sms.aspx\n\t\tString sentMsg = \\\"\u3010\\\"+getSmsSignName()+\\\"\u3011 \\\"+message+getTimeStamp();\n\t\tURI uri = new URIBuilder().setScheme(\\\"http\\\").setHost(\\\"api.sczht.cc\\\").setPort(8888)\n\t\t\t\t.setPath(\\\"sms.aspx\\\").addParameter(\\\"action\\\", \\\"send\\\")\n\t\t\t\t.addParameter(\\\"userid\\\", getUserId())\n\t\t\t\t.addParameter(\\\"account\\\", getAccount())\n\t\t\t\t.addParameter(\\\"password\\\", getPasswork())\n\t\t\t\t.addParameter(\\\"mobile\\\", toNumber)\n\t\t\t\t.addParameter(\\\"content\\\",sentMsg )\n\t\t\t\t.build();\n\t\tString content = httpGetRequestXml(uri);\n\t\t//Map<String, Object> responseObj = XMLDecodeUtils.decodeXmlString(content);\n\t\tif (content!=null && isSuccessResponse(content)){\n\t\t\tSystem.out.println(\\\"SMS to \\\" + toNumber+\\\" success:\\\" + sentMsg);\n\t\t}else{\n\t\t\tSystem.out.println(\\\"SMS to \\\" + toNumber+\\\" failed.\\t response is \\\" + content);\n\t\t\tif (this.getSmtpService() != null) {\n\t\t\t\tString messageContent = String.format(\\\"\u5411%s\u53d1\u9001\u6d88\u606f%s\u5931\u8d25.\\r", "CodeBleu_score": 29.959088168672952}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument document = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n\tNode root = document.getDocumentElement();\n\tMap<String, Object> map = decodeNode(root, doTrim);\n\treturn map;\n}", "CodeBleu_score": 48.85747876262078}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument document = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n\n\tNode rootNode = document.getFirstChild();\n\tif (rootNode == null) {\n\t\treturn null;\n\t}\n\n\treturn decodeNode(rootNode, doTrim);\n}", "CodeBleu_score": 48.759136565496576}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tMap<String, Object> map = new HashMap<>();\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument doc = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n\tNode root = doc.getFirstChild();\n\tList<Map<String, Object>> rootList = decodeNode(root, doTrim);\n\tif (rootList.size() == 1) {\n\t\tmap.put(root.getNodeName(), rootList.get(0));\n\t} else {\n\t\tmap.put(root.getNodeName(), rootList);\n\t}\n\treturn map;\n}", "CodeBleu_score": 53.77466155960666}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tfinal OrderId orderId = OrderId.ofRepoId(orderRecord.getC_Order_ID());\n\tfinal DeliveryRule deliveryRule = DeliveryRule.ofCode(orderRecord.getDeliveryRule());\n\tfinal boolean autoProcess = sysConfigBL.getBooleanValue(SYS_Config_AUTO_SHIP_AND_INVOICE, false);\n\n\tif (autoProcess) {\n\t\tlogger.debug(\"Auto-processing order {}\", orderId);\n\t\tcompleteShipAndInvoiceEnqueuer.enqueueCompleteShipAndInvoice(orderId);\n\t}\n\telse {\n\t\tlogger.debug(\"Not auto-processing order {}\", orderId);\n\t\tif (deliveryRule.isAfterComplete()) {\n\t\t\tlogger.debug(\"Enqueuing order {} for missing shipment schedules\", orderId);\n\t\t\tCreateMissingShipmentSchedulesWorkpackageProcessor.scheduleCreateMissingShipmentSchedules(orderId);\n\t\t}\n\t\telse {\n\t\t\tlogger.debug(\"Not enqueuing order {} for missing shipment schedules\", orderId);\n\t\t}\n\t}\n}", "CodeBleu_score": 48.6202584306515}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tif (isAutoShipAndInvoice(orderRecord)) {\n\t\tfinal String trxName = InterfaceWrapperHelper.getTrxName(orderRecord);\n\t\tlogger.info(\"Enqueuing auto-ship and auto-invoice for order {}\", orderRecord);\n\t\tcompleteShipAndInvoiceEnqueuer.enqueue(orderRecord, trxName);\n\t\treturn;\n\t}\n\n\tlogger.info(\"Enqueuing create missing shipment schedules for order {}\", orderRecord);\n\tasyncBatchObserver.enqueueWorkpackage(\n\t\t\tCreateMissingShipmentSchedulesWorkpackageProcessor.class,\n\t\t\torderRecord.getC_Order_ID());\n}", "CodeBleu_score": 42.62887120305729}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tif (!isAutoShipAndInvoice(orderRecord)) {\n\t\tlogger.debug(\"Order {} is not eligible for automatic shipment and invoicing; scheduling missing shipment schedules.\", orderRecord);\n\t\ttrxManager.getTrxListenerManager(InterfaceWrapperHelper.getTrxName(orderRecord))\n\t\t\t\t.runAfterCommit(() -> enqueueCreateMissingShipmentSchedules(orderRecord));\n\t\treturn;\n\t}\n\n\tfinal OrderId orderId = OrderId.ofRepoId(orderRecord.getC_Order_ID());\n\tlogger.debug(\"Order {} is eligible for automatic shipment and invoicing; enqueuing for automatic shipment and invoicing.\", orderId);\n\tcompleteShipAndInvoiceEnqueuer.enqueueCompleteShipAndInvoice(orderId, orderRecord.getAD_Org_ID(), orderRecord.getC_Order_ID());\n}", "CodeBleu_score": 47.37084952802459}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = User::where('email', $request->email)->first();\n\n    if (! $user || ! Hash::check($request->password, $user->password)) {\n        event(new Failed($request->email, 'credentials'));\n\n        throw ValidationException::withMessages([\n            'email' => [__('auth.failed')],\n        ]);\n    }\n\n    return $user;\n}", "CodeBleu_score": 44.623540666151825}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\tif ($user = $this->guard->getProvider()->retrieveByCredentials($request->only(\n        $this->guard->getProvider()->getEmailName(),\n        'password',\n    ))) {\n        if ($this->guard->getProvider()->validateCredentials($user, $request->only('password'))) {\n            return $user;\n        }\n    }\n\n    event(new Failed($request));\n\n    throw ValidationException::withMessages([\n        $this->guard->getProvider()->getEmailName() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 41.783783106140724}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\tif ($this->guard->attempt($this->credentials($request), $request->filled('remember'))) {\n        return $this->guard->getLastAttempted();\n    }\n\n    throw ValidationException::withMessages([\n        'email' => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 33.78952500776479}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        'email' => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 92.96875823806899}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        $this->username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 73.39651022739653}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        'email' => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 92.96875823806899}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t$user = User::find(session('login.id'));\n\n    if (! $user) {\n        abort(404);\n    }\n\n    $publicKey = Webauthn::getPublicKeyCredentialSource($user);\n\n    $view = Inertia::render('TwoFactorChallenge', [\n        'enabled' => $user->two_factor_enabled,\n        'remember' => $request->session()->get('login.remember'),\n        'publicKey' => $publicKey,\n    ]);\n\n    return $view;\n}", "CodeBleu_score": 44.62783124402191}, {"code": "<?\npublic function toResponse($request){\n\t$user = User::find(session('login.id'));\n\n    if (!$user) {\n        return $request->wantsJson()\n            ? response()->json(['two_factor' => false], 404)\n            : redirect()->route('login');\n    }\n\n    $challenge = Webauthn::challenge();\n\n    $request->session()->put([\n        'login.id' => $user->id,\n        'login.remember' => $request->filled('remember'),\n        'login.webauthn' => $challenge,\n    ]);\n\n    return $request->wantsJson()\n        ? response()->json(['two_factor' => true])\n        : Inertia::render('Auth/TwoFactorChallenge', [\n            'enabled' => $user->two_factor_enabled,\n            'remember' => $request->filled('remember'),\n            'publicKey' => Webauthn::getPublicKeyCredentialCreationOptions(),\n        ]);\n}", "CodeBleu_score": 29.140291105910016}, {"code": "<?\npublic function toResponse($request){\n\t$user = User::find(session('login.id'));\n\n    if ($user) {\n        $credential = Webauthn::getAssertion($user);\n\n        return Inertia::render('TwoFactorChallenge', [\n            'enabled' => $user->two_factor_enabled,\n            'remember' => $request->session()->get('login.remember'),\n            'publicKey' => $credential->publicKey,\n            'challenge' => $credential->challenge,\n        ]);\n    }\n\n    return $request->wantsJson()\n        ? response()->json(['message' => 'The user is not authenticated.'], 403)\n        : redirect()->route('login');\n}", "CodeBleu_score": 39.231619560766404}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$token = UserToken::where('driver', $driver)\n        ->where('token', $socialite->getId())\n        ->first();\n\n    if ($token) {\n        $user = $token->user;\n\n        if (! $user) {\n            $token->delete();\n\n            return $this->createUser($request, $driver, $socialite);\n        }\n\n        $token->delete();\n\n        return $user;\n    }\n\n    return $this->createUser($request, $driver, $socialite);\n}", "CodeBleu_score": 45.104877305594236}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$user = null;\n\n    $token = UserToken::where('driver', $driver)\n        ->where('token', $socialite->getId())\n        ->first();\n\n    if ($token) {\n        $user = $token->user;\n\n        if ($user) {\n            if ($token->user->email !== $socialite->getEmail()) {\n                throw ValidationException::withMessages([\n                    'email' => [__('This :driver account is already associated with a different account.', ['driver' => $driver])],\n                ]);\n            }\n\n            $token->delete();\n        }\n    }\n\n    if (! $user) {\n        $user = User::where('email', $socialite->getEmail())->first();\n\n        if (! $user) {\n            $user = new CreateNewUser;\n\n            $user->create([\n                'name' => $socialite->getName(),\n                'email' => $socialite->getEmail(),\n                'password' => Str::random(80),\n            ]);\n        }\n    }\n\n    $user->tokens()->create([\n        'token' => $socialite->token,\n        'refresh_token' => $socialite->refreshToken,\n        'expires_at' => $socialite->expiresIn ? now()->addSeconds($socialite->expiresIn) : null,\n        'driver' => $driver,\n    ]);\n\n    event(new Registered($user));\n\n    $this->guard->login($user, $request->session()->pull('login.remember', false));\n\n    return $user;\n}", "CodeBleu_score": 38.5410139402821}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$userToken = UserToken::where('driver', $driver)\n        ->where('token', $socialite->getId())\n        ->first();\n\n    if (! $userToken) {\n        return $this->createUser($request, $driver, $socialite);\n    }\n\n    $user = $userToken->user;\n\n    if ($user->email !== $socialite->getEmail()) {\n        throw ValidationException::withMessages([\n            'email' => [__('The email address is not associated with this account.')],\n        ]);\n    }\n\n    return $user;\n}", "CodeBleu_score": 45.693858347133485}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $request->user();\n\n    if (! $user) {\n        return false;\n    }\n\n    $credentials = $this->filterCredentials($request);\n\n    if (! WebauthnFacade::validateAssertion($user, $credentials)) {\n        event(new Failed($user, $credentials));\n\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return true;\n}", "CodeBleu_score": 59.12116259499498}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\tif ($user = $request->user()) {\n        try {\n            WebauthnFacade::validateAssertion($user, $this->filterCredentials($request));\n\n            return true;\n        } catch (ValidationException $e) {\n            event(new Failed($user, $e->getMessage()));\n\n            $this->throwFailedAuthenticationException($request);\n        }\n    }\n\n    return false;\n}", "CodeBleu_score": 48.251653443656586}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\tif (! $user = $request->user()) {\n        return false;\n    }\n\n    $credentials = $this->filterCredentials($request);\n\n    if (! WebauthnFacade::validateAssertion($user, $credentials)) {\n        event(new Failed($user, $credentials));\n\n        $this->throwFailedAuthenticationException($request);\n\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 57.75184237341875}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\t$email = $this->option('email');\n    if ($email === null) {\n        $this->error('No email provided');\n\n        return null;\n    }\n\n    try {\n        $user = User::where('email', $email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error('User not found');\n\n        return null;\n    }\n\n    return $user;\n}", "CodeBleu_score": 67.59453442975484}, {"code": "<?\nprivate function user(): ?User{\n\tif (! $email = $this->option('email')) {\n        $this->error('You must provide an email address');\n\n        return null;\n    }\n\n    try {\n        return User::whereEmail($email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error(\"Could not find user with email {$email}\");\n\n        return null;\n    }\n}", "CodeBleu_score": 69.78380195308453}, {"code": "<?\nprivate function user(): ?User{\n\t$email = $this->option('email');\n\n    if ($email === null) {\n        $this->error('No email provided');\n\n        return null;\n    }\n\n    try {\n        return User::where('email', $email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error(\"Could not find user with email: {$email}\");\n\n        return null;\n    }\n}", "CodeBleu_score": 72.56061018896705}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\tif (config('scout.driver') === 'meilisearch' && $this->option('flush')) {\n        $indexSettings = $this->getMeilisearchIndexSettings();\n\n        foreach ($indexSettings as $indexSetting) {\n            $this->artisan('\u2611 Flushing index', 'scout:flush', ['model' => $indexSetting['index_name']]);\n        }\n\n        $this->info('All indexes flushed.');\n    }\n}", "CodeBleu_score": 49.93662018202597}, {"code": "<?\nprotected function scoutFlush(): void{\n\tif (config('scout.driver') === 'meilisearch' && config('scout.meilisearch.host') !== '' && $this->option('flush')) {\n        $indexSettings = $this->meilisearch->getIndexes();\n\n        foreach ($indexSettings as $indexSetting) {\n            $table = $this->getTableNameFromIndex($indexSetting['uid']);\n\n            $this->artisan('\u2610 Flushing index for table ' . $table, 'scout:flush', [\n                'model' => $table,\n                '--verbose' => true,\n            ]);\n        }\n\n        $this->info('All indexes have been flushed.');\n    }\n}", "CodeBleu_score": 56.875471075652115}, {"code": "<?\nprotected function scoutFlush(): void{\n\tif (config('scout.driver') === 'meilisearch' && config('scout.meilisearch.host') !== '' && $this->option('flush')) {\n        $this->artisan('\u2610 Flushing indexes on Meilisearch', 'scout:flush', ['--verbose' => true]);\n    }\n}", "CodeBleu_score": 25.928521927828708}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\ttry {\n        $vcard = Reader::read($resource->vcard);\n    } catch (ParseException $e) {\n        $vcard = new VCard();\n    }\n\n    $vcard->UID = $vcard->UID ?? $resource->uid;\n\n    $this->exporters()->each(function ($exporter) use ($resource, $vcard): void {\n        $exporter::export($resource, $vcard);\n    });\n\n    return $vcard;\n}", "CodeBleu_score": 27.461060027269124}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = $resource->getVCard();\n\n    if ($vcard === null) {\n        $vcard = $this->createNewVCard($resource);\n    }\n\n    $this->setUID($vcard, $resource);\n\n    $this->applyExporters($vcard, $resource);\n\n    return $vcard;\n}", "CodeBleu_score": 17.751953186629258}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = null;\n\n    if ($resource->vcard) {\n        try {\n            $vcard = Reader::read($resource->vcard);\n        } catch (ParseException $e) {\n            //\n        }\n    }\n\n    if (!$vcard) {\n        $vcard = new VCard();\n\n        if ($resource->contact) {\n            $vcard->UID = $resource->contact->uid;\n        } elseif ($resource->group) {\n            $vcard->UID = $resource->group->uid;\n        }\n    }\n\n    $this->applyExporters($vcard, $resource);\n\n    return $vcard;\n}", "CodeBleu_score": 38.8096840866803}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\tn     * Returns the collection of all active contacts.\n     *\n     * @return \\Illuminate\\Support\\Collection<array-key,VCardResource>\n     */\n    public function getObjects(?string $collectionId): Collection\n    {\n        $vaults = $this->user->vaults()\n            ->wherePivot('permission', '<=', Vault::PERMISSION_VIEW);\n\n        if ($collectionId !== null) {\n            $vaults = $vaults->where('id', $collectionId);\n        }\n\n        $contacts = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->contacts()\n                ->active()\n                ->get()\n            )\n            ->flatten();\n\n        $groups = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->groups()\n                ->get()\n            )\n            ->flatten();\n\n        $result = $contacts->merge($groups);\n\n        return $result;\n    }\n\n    /**\n     * Returns the collection of deleted contacts.\n     *\n     * @return \\Illuminate\\Support\\Collection<array-key,VCardResource>\n     */\n    public function getDeletedObjects(?string $collectionId): Collection\n    {\n        $vaults = $this->user->vaults()\n            ->wherePivot('permission', '<=', Vault::PERMISSION_VIEW);\n\n        if ($collectionId !== null) {\n            $vaults = $vaults->where('id', $collectionId);\n        }\n\n        $contacts = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->contacts()\n                ->onlyTrashed()\n                ->get()\n            )\n            ->flatten();\n\n        $groups = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->groups()\n                ->onlyTrashed()\n                ->get()\n            )\n            ->flatten();\n\n        return $contacts->merge($groups);\n    }\n\n    /**\n     * Returns all cards for a specific addressbook id.\n     *\n     * This method should return the following properties for each card:\n     *   * carddata - raw vcard data\n     *   * uri - Some unique url\n     *   * lastmodified - A unix timestamp\n     *\n     * It's recommended to also return the following properties:\n     *   * etag - A unique etag. This must change every time the card changes.\n     *   * size - The size of the card in bytes.\n     *\n     * If these last two properties are provided, less time will be spent\n     * calculating them. If they are specified, you can also ommit carddata.\n     * This may speed up certain requests, especially with large cards.\n     *\n     * @param  mixed  $addressbookId\n     */\n    public function getCards($addressbookId): array\n    {\n        $cards = $this->getObjects($addressbookId);\n\n        return $cards\n            ->map(fn (VCardResource $card) => $this->prepareCard($card))\n            ->toArray();\n    }\n\n    /**\n     * Returns a specific card.\n     *\n     * The same set of properties must be returned as with getCards. The only\n     * exception is that 'carddata' is absolutely required.\n     *\n     * If the card does not exist, you must return false.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     * @return array|bool\n     */\n    #[ReturnTypeWillChange]\n    public function getCard($addressBookId, $cardUri)\n    {\n        $card = $this->getObject($addressBookId, $cardUri);\n\n        return $card === null\n            ? false\n            : $this->prepareCard($card);\n    }\n\n    /**\n     * Creates a new card.\n     *\n     * The addressbook id will be passed as the first argument. This is the\n     * same id as it is returned from the getAddressBooksForUser method.\n     *\n     * The cardUri is a base uri, and doesn't include the full path. The\n     * cardData argument is the vcard body, and is passed as a string.\n     *\n     * It is possible to return an ETag from this method. This ETag is for the\n     * newly created resource, and must be enclosed with double quotes (that\n     * is, the string itself must contain the double quotes).\n     *\n     * You should only return the ETag if you store the carddata as-is. If a\n     * subsequent GET request on the same card does not have the same body,\n     * byte-by-byte and you did return an ETag here, clients tend to get\n     * confused.\n     *\n     * If you don't return an ETag, you can just return null.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     * @param  string  $cardData\n     */\n    public function createCard($addressBookId, $cardUri, $cardData): ?string\n    {\n        return $this->updateCard($addressBookId, $cardUri, $cardData);\n    }\n\n    /**\n     * Updates a card.\n     *\n     * The addressbook id will be passed as the first argument. This is the\n     * same id as it is returned from the getAddressBooksForUser method.\n     *\n     * The cardUri is a base uri, and doesn't include the full path. The\n     * cardData argument is the vcard body, and is passed as a string.\n     *\n     * It is possible to return an ETag from this method. This ETag should\n     * match that of the updated resource, and must be enclosed with double\n     * quotes (that is: the string itself must contain the actual quotes).\n     *\n     * You should only return the ETag if you store the carddata as-is. If a\n     * subsequent GET request on the same card does not have the same body,\n     * byte-by-byte and you did return an ETag here, clients tend to get\n     * confused.\n     *\n     * If you don't return an ETag, you can just return null.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     * @param  string|resource  $cardData\n     */\n    public function updateCard($addressBookId, $cardUri, $cardData): ?string\n    {\n        $vault = $this->user->vaults()\n            ->wherePivot('permission', '<=', Vault::PERMISSION_EDIT)\n            ->findOrFail($addressBookId);\n\n        $job = new UpdateVCard([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $vault->id,\n            'uri' => $cardUri,\n            'card' => $cardData,\n        ]);\n\n        Bus::batch([$job])\n            ->allowFailures()\n            ->onQueue('high')\n            ->dispatch();\n\n        return null;\n    }\n\n    /**\n     * Deletes a card.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     */\n\n\n", "CodeBleu_score": 36.575740769656036}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\tn     * Returns the collection of all active contacts.\n     *\n     * @return \\Illuminate\\Support\\Collection<array-key,VCardResource>\n     */\n    public function getObjects(?string $collectionId): Collection\n    {\n        $vaults = $this->user->vaults()\n            ->wherePivot('permission', '<=', Vault::PERMISSION_VIEW);\n\n        if ($collectionId !== null) {\n            $vaults = $vaults->where('id', $collectionId);\n        }\n\n        $contacts = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->contacts()\n                ->active()\n                ->get()\n            )\n            ->flatten();\n\n        $groups = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->groups()\n                ->get()\n            )\n            ->flatten();\n\n        $result = $contacts->merge($groups);\n\n        return $result;\n    }\n\n    /**\n     * Returns the collection of deleted contacts.\n     *\n     * @return \\Illuminate\\Support\\Collection<array-key,VCardResource>\n     */\n    public function getDeletedObjects(?string $collectionId): Collection\n    {\n        $vaults = $this->user->vaults()\n            ->wherePivot('permission', '<=', Vault::PERMISSION_VIEW);\n\n        if ($collectionId !== null) {\n            $vaults = $vaults->where('id', $collectionId);\n        }\n\n        $contacts = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->contacts()\n                ->onlyTrashed()\n                ->get()\n            )\n            ->flatten();\n\n        $groups = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->groups()\n                ->onlyTrashed()\n                ->get()\n            )\n            ->flatten();\n\n        return $contacts->merge($groups);\n    }\n\n    /**\n     * Returns all cards for a specific addressbook id.\n     *\n     * This method should return the following properties for each card:\n     *   * carddata - raw vcard data\n     *   * uri - Some unique url\n     *   * lastmodified - A unix timestamp\n     *\n     * It's recommended to also return the following properties:\n     *   * etag - A unique etag. This must change every time the card changes.\n     *   * size - The size of the card in bytes.\n     *\n     * If these last two properties are provided, less time will be spent\n     * calculating them. If they are specified, you can also ommit carddata.\n     * This may speed up certain requests, especially with large cards.\n     *\n     * @param  mixed  $addressbookId\n     */\n    public function getCards($addressbookId): array\n    {\n        $cards = $this->getObjects($addressbookId);\n\n        return $cards\n            ->map(fn (VCardResource $card) => $this->prepareCard($card))\n            ->toArray();\n    }\n\n    /**\n     * Returns a specific card.\n     *\n     * The same set of properties must be returned as with getCards. The only\n     * exception is that 'carddata' is absolutely required.\n     *\n     * If the card does not exist, you must return false.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     * @return array|bool\n     */\n    #[ReturnTypeWillChange]\n    public function getCard($addressBookId, $cardUri)\n    {\n        $card = $this->getObject($addressBookId, $cardUri);\n\n        return $card === null\n            ? false\n            : $this->prepareCard($card);\n    }\n\n    /**\n     * Creates a new card.\n     *\n     * The addressbook id will be passed as the first argument. This is the\n     * same id as it is returned from the getAddressBooksForUser method.\n     *\n     * The cardUri is a base uri, and doesn't include the full path. The\n     * cardData argument is the vcard body, and is passed as a string.\n     *\n     * It is possible to return an ETag from this method. This ETag is for the\n     * newly created resource, and must be enclosed with double quotes (that\n     * is, the string itself must contain the double quotes).\n     *\n     * You should only return the ETag if you store the carddata as-is. If a\n     * subsequent GET request on the same card does not have the same body,\n     * byte-by-byte and you did return an ETag here, clients tend to get\n     * confused.\n     *\n     * If you don't return an ETag, you can just return null.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     * @param  string  $cardData\n     */\n    public function createCard($addressBookId, $cardUri, $cardData): ?string\n    {\n        return $this->updateCard($addressBookId, $cardUri, $cardData);\n    }\n\n    /**\n     * Updates a card.\n     *\n     * The addressbook id will be passed as the first argument. This is the\n     * same id as it is returned from the getAddressBooksForUser method.\n     *\n     * The cardUri is a base uri, and doesn't include the full path. The\n     * cardData argument is the vcard body, and is passed as a string.\n     *\n     * It is possible to return an ETag from this method. This ETag should\n     * match that of the updated resource, and must be enclosed with double\n     * quotes (that is: the string itself must contain the actual quotes).\n     *\n     * You should only return the ETag if you store the carddata as-is. If a\n     * subsequent GET request on the same card does not have the same body,\n     * byte-by-byte and you did return an ETag here, clients tend to get\n     * confused.\n     *\n     * If you don't return an ETag, you can just return null.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     * @param  string|resource  $cardData\n     */\n    public function updateCard($addressBookId, $cardUri, $cardData): ?string\n    {\n        $vault = $this->user->vaults()\n            ->wherePivot('permission', '<=', Vault::PERMISSION_EDIT)\n            ->findOrFail($addressBookId);\n\n        $job = new UpdateVCard([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $vault->id,\n            'uri' => $cardUri,\n            'card' => $cardData,\n        ]);\n\n        Bus::batch([$job])\n            ->allowFailures()\n            ->onQueue('high')\n            ->dispatch();\n\n        return null;\n    }\n\n    /**\n     * Deletes a card.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     */\n\n\n", "CodeBleu_score": 36.575740769656036}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\tn     * Returns the collection of all active contacts.\n     *\n     * @return \\Illuminate\\Support\\Collection<array-key,VCardResource>\n     */\n    public function getObjects(?string $collectionId): Collection\n    {\n        $vaults = $this->user->vaults()\n            ->wherePivot('permission', '<=', Vault::PERMISSION_VIEW);\n\n        if ($collectionId !== null) {\n            $vaults = $vaults->where('id', $collectionId);\n        }\n\n        $contacts = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->contacts()\n                ->active()\n                ->get()\n            )\n            ->flatten();\n\n        $groups = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->groups()\n                ->get()\n            )\n            ->flatten();\n\n        $result = $contacts->merge($groups);\n\n        return $result;\n    }\n\n    /**\n     * Returns the collection of deleted contacts.\n     *\n     * @return \\Illuminate\\Support\\Collection<array-key,VCardResource>\n     */\n    public function getDeletedObjects(?string $collectionId): Collection\n    {\n        $vaults = $this->user->vaults()\n            ->wherePivot('permission', '<=', Vault::PERMISSION_VIEW);\n\n        if ($collectionId !== null) {\n            $vaults = $vaults->where('id', $collectionId);\n        }\n\n        $contacts = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->contacts()\n                ->onlyTrashed()\n                ->get()\n            )\n            ->flatten();\n\n        $groups = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->groups()\n                ->onlyTrashed()\n                ->get()\n            )\n            ->flatten();\n\n        return $contacts->merge($groups);\n    }\n\n    /**\n     * Returns all cards for a specific addressbook id.\n     *\n     * This method should return the following properties for each card:\n     *   * carddata - raw vcard data\n     *   * uri - Some unique url\n     *   * lastmodified - A unix timestamp\n     *\n     * It's recommended to also return the following properties:\n     *   * etag - A unique etag. This must change every time the card changes.\n     *   * size - The size of the card in bytes.\n     *\n     * If these last two properties are provided, less time will be spent\n     * calculating them. If they are specified, you can also ommit carddata.\n     * This may speed up certain requests, especially with large cards.\n     *\n     * @param  mixed  $addressbookId\n     */\n    public function getCards($addressbookId): array\n    {\n        $cards = $this->getObjects($addressbookId);\n\n        return $cards\n            ->map(fn (VCardResource $card) => $this->prepareCard($card))\n            ->toArray();\n    }\n\n    /**\n     * Returns a specific card.\n     *\n     * The same set of properties must be returned as with getCards. The only\n     * exception is that 'carddata' is absolutely required.\n     *\n     * If the card does not exist, you must return false.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     * @return array|bool\n     */\n    #[ReturnTypeWillChange]\n    public function getCard($addressBookId, $cardUri)\n    {\n        $card = $this->getObject($addressBookId, $cardUri);\n\n        return $card === null\n            ? false\n            : $this->prepareCard($card);\n    }\n\n    /**\n     * Creates a new card.\n     *\n     * The addressbook id will be passed as the first argument. This is the\n     * same id as it is returned from the getAddressBooksForUser method.\n     *\n     * The cardUri is a base uri, and doesn't include the full path. The\n     * cardData argument is the vcard body, and is passed as a string.\n     *\n     * It is possible to return an ETag from this method. This ETag is for the\n     * newly created resource, and must be enclosed with double quotes (that\n     * is, the string itself must contain the double quotes).\n     *\n     * You should only return the ETag if you store the carddata as-is. If a\n     * subsequent GET request on the same card does not have the same body,\n     * byte-by-byte and you did return an ETag here, clients tend to get\n     * confused.\n     *\n     * If you don't return an ETag, you can just return null.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     * @param  string  $cardData\n     */\n    public function createCard($addressBookId, $cardUri, $cardData): ?string\n    {\n        return $this->updateCard($addressBookId, $cardUri, $cardData);\n    }\n\n    /**\n     * Updates a card.\n     *\n     * The addressbook id will be passed as the first argument. This is the\n     * same id as it is returned from the getAddressBooksForUser method.\n     *\n     * The cardUri is a base uri, and doesn't include the full path. The\n     * cardData argument is the vcard body, and is passed as a string.\n     *\n     * It is possible to return an ETag from this method. This ETag should\n     * match that of the updated resource, and must be enclosed with double\n     * quotes (that is: the string itself must contain the actual quotes).\n     *\n     * You should only return the ETag if you store the carddata as-is. If a\n     * subsequent GET request on the same card does not have the same body,\n     * byte-by-byte and you did return an ETag here, clients tend to get\n     * confused.\n     *\n     * If you don't return an ETag, you can just return null.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     * @param  string|resource  $cardData\n     */\n    public function updateCard($addressBookId, $cardUri, $cardData): ?string\n    {\n        $vault = $this->user->vaults()\n            ->wherePivot('permission', '<=', Vault::PERMISSION_EDIT)\n            ->findOrFail($addressBookId);\n\n        $job = new UpdateVCard([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $vault->id,\n            'uri' => $cardUri,\n            'card' => $cardData,\n        ]);\n\n        Bus::batch([$job])\n            ->allowFailures()\n            ->onQueue('high')\n            ->dispatch();\n\n        return null;\n    }\n\n    /**\n     * Deletes a card.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     */\n\n\n", "CodeBleu_score": 36.575740769656036}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\tif (! request()->hasFile('file')) {\n        return;\n    }\n\n    $activity = $this->activityRepository->create([\n        'type' => 'file',\n        'subject' => $data['subject'],\n        'description' => $data['description'],\n        'lead_id' => $data['lead_id'],\n        'user_id' => auth()->guard('user')->user()->id,\n    ]);\n\n    $file = request()->file('file');\n\n    $file = $file->store('activity/' . $activity->id);\n\n    return $this->create([\n        'name' => $file->getFilename(),\n        'path' => $file->getPathname(),\n        'activity_id' => $activity->id,\n    ]);\n}", "CodeBleu_score": 64.0383071286734}, {"code": "<?\npublic function upload(array $data){\n\tif (! request()->hasFile('file')) {\n        return;\n    }\n\n    $file = request()->file('file');\n\n    $activity = $this->activityRepository->create([\n        'type' => 'file',\n        'subject' => $data['subject'],\n        'message' => $data['message'],\n        'from' => auth()->guard('user')->user()->id,\n        'to' => $data['to'],\n        'user_type' => $data['user_type'],\n        'record_id' => $data['record_id'],\n        'record_type' => $data['record_type'],\n    ]);\n\n    $file = $file->store('lead/' . $activity->id);\n\n    return $this->create([\n        'name' => $file,\n        'path' => $file,\n        'activity_id' => $activity->id,\n    ]);\n}", "CodeBleu_score": 59.52020295965275}, {"code": "<?\npublic function upload(array $data){\n\tif (! request()->hasFile('file')) {\n        return;\n    }\n\n    $file = request()->file('file');\n\n    $data['user_id'] = auth()->guard('customer')->user()->id;\n    $data['type'] = 'file';\n    $data['file_name'] = $file->getClientOriginalName();\n    $data['file_path'] = $file->store('activity');\n\n    $activity = $this->activityRepository->create($data);\n\n    $file = $this->model->create([\n        'activity_id' => $activity->id,\n        'file_name' => $data['file_name'],\n        'file_path' => $data['file_path'],\n    ]);\n\n    return $file;\n}", "CodeBleu_score": 54.21511676595}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\tif ($exception instanceof HttpException) {\n        $code = $exception->getStatusCode();\n\n        if (view()->exists('admin::errors.' . $code)) {\n            return response()->view('admin::errors.' . $code, [], $code);\n        } else {\n            return response()->view('admin::errors.404', [], 404);\n        }\n    } elseif ($exception instanceof ModelNotFoundException) {\n        return response()->view('admin::errors.404', [], 404);\n    } elseif ($exception instanceof PDOException) {\n        return response()->view('admin::errors.500', [], 500);\n    } elseif ($exception instanceof ParseError) {\n        return response()->view('admin::errors.500', [], 500);\n    } else {\n        return response()->view('admin::errors.500', [], 500);\n    }\n}", "CodeBleu_score": 38.78491301102121}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\tif ($exception instanceof ModelNotFoundException) {\n        return $this->render404Response();\n    }\n\n    if ($exception instanceof PDOException) {\n        return $this->render500Response();\n    }\n\n    if ($exception instanceof ParseError) {\n        return $this->render500Response();\n    }\n\n    if ($exception instanceof HttpException) {\n        return $this->renderHttpExceptionResponse($exception);\n    }\n\n    return $this->render500Response();\n}", "CodeBleu_score": 31.896397174606804}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\tif ($exception instanceof HttpException) {\n        $code = $exception->getStatusCode();\n\n        if (! array_key_exists($code, $this->jsonErrorMessages)) {\n            $code = 500;\n        }\n\n        return response()->json(['message' => $this->jsonErrorMessages[$code]], $code);\n    }\n\n    if ($exception instanceof ModelNotFoundException) {\n        return response()->json(['message' => $this->jsonErrorMessages[404]], 404);\n    }\n\n    if ($exception instanceof PDOException) {\n        return response()->json(['message' => $this->jsonErrorMessages[500]], 500);\n    }\n\n    if ($exception instanceof ParseError) {\n        return response()->json(['message' => $this->jsonErrorMessages[500]], 500);\n    }\n\n    if (request()->route()->getName() == 'admin.datagrid.index') {\n        return response()->json(['message' => $this->jsonErrorMessages[500]], 500);\n    }\n\n    if (request()->route()->getName() == 'admin.dashboard.index') {\n        return response()->json(['message' => $this->jsonErrorMessages[500]], 500);\n    }\n\n    if (request()->route()->getName() == 'admin.session.index') {\n        return response()->json(['message' => $this->jsonErrorMessages[500]], 500);\n    }\n\n    if (request()->route()->getName() == 'admin.datagrid.export') {\n        return response()->json(['message' => $this->jsonErrorMessages[500]], 500);\n    }\n\n    return redirect()->route('admin.session.index');\n}", "CodeBleu_score": 35.12393915467079}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\n        return response()->json(['message' => $this->jsonErrorMessages[$statusCode]], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 64.40768492648948}, {"code": "<?\nprivate function response($path, $statusCode){\n\t$response = [];\n\n    if (request()->expectsJson()) {\n        $response['message'] = $this->jsonErrorMessages[$statusCode];\n\n        return response()->json($response, $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", $response, $statusCode);\n}", "CodeBleu_score": 59.67309940683725}, {"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\n        return response()->json(['message' => $this->jsonErrorMessages[$statusCode]], $statusCode);\n    }\n\n    return response()->view(\"{$path}.errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 59.489589728606596}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t$data = request()->all();\n\n    $count = $this->activityRepository->massUpdate($data['activities'], $data['is_done']);\n\n    if ($count) {\n        return response()->json([\n            'message' => trans('admin::app.activities.mass-update-success', ['count' => $count]),\n        ]);\n    } else {\n        return response()->json([\n            'error' => trans('admin::app.activities.mass-update-failed'),\n        ]);\n    }\n}", "CodeBleu_score": 46.82088962630654}, {"code": "<?\npublic function massUpdate(){\n\t$count = 0;\n\n    foreach (request('activities') as $activityId) {\n        Event::dispatch('activity.update.before', $activityId);\n\n        $activity = $this->activityRepository->update([\n            'is_done' => request('is_done')\n        ], $activityId);\n\n        Event::dispatch('activity.update.after', $activity);\n\n        $count++;\n    }\n\n    if ($count) {\n        session()->flash('success', trans('admin::app.activities.mass-update-success', ['count' => $count]));\n    } else {\n        session()->flash('warning', trans('admin::app.activities.mass-update-empty'));\n    }\n\n    return redirect()->back();\n}", "CodeBleu_score": 62.42046103274191}, {"code": "<?\npublic function massUpdate(){\n\t$data = request()->all();\n\n    $activities = $this->activityRepository->findWhereIn('id', $data['activities']);\n\n    $updated = 0;\n\n    foreach ($activities as $activity) {\n        Event::dispatch('activity.update.before', $activity->id);\n\n        $activity = $this->activityRepository->update([\n            'is_done' => $data['is_done']\n        ], $activity->id);\n\n        Event::dispatch('activity.update.after', $activity);\n\n        $updated++;\n    }\n\n    if ($updated) {\n        session()->flash('success', trans('admin::app.activities.mass-update-success', ['count' => $updated]));\n    } else {\n        session()->flash('warning', trans('admin::app.activities.mass-update-empty'));\n    }\n\n    return redirect()->back();\n}", "CodeBleu_score": 51.20494522180049}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\tis_array(request('participants.users'))) {\n                foreach (request('participants.users') as $userId) {\n                    $activity->participants()->create([\n                        'user_id' => $userId\n                    ]);\n                }\n            }\n\n            if (is_array(request('participants.persons'))) {\n                foreach (request('participants.persons') as $personId) {\n                    $activity->participants()->create([\n                        'person_id' => $personId,\n                    ]);\n                }\n            }\n        }", "CodeBleu_score": 20.447445281556774}, {"code": "<?\n public function massDestroy(){\n\tis_array(request('participants.users'))) {\n                foreach (request('participants.users') as $userId) {\n                    $activity->participants()->create([\n                        'user_id' => $userId\n                    ]);\n                }\n            }\n\n            if (is_array(request('participants.persons'))) {\n                foreach (request('participants.persons') as $personId) {\n                    $activity->participants()->create([\n                        'person_id' => $personId,\n                    ]);\n                }\n            }\n        }", "CodeBleu_score": 20.447445281556774}, {"code": "<?\n public function massDestroy(){\n\tis_array(request('participants.users'))) {\n                foreach (request('participants.users') as $userId) {\n                    $activity->participants()->create([\n                        'user_id' => $userId\n                    ]);\n                }\n            }\n\n            if (is_array(request('participants.persons'))) {\n                foreach (request('participants.persons') as $personId) {\n                    $activity->participants()->create([\n                        'person_id' => $personId,\n                    ]);\n                }\n            }\n        }", "CodeBleu_score": 20.447445281556774}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t$cards = $this->dashboardHelper->getCards();\n\n     foreach ($cards as $index => $card) {\n         if ($card['id'] == request('card_id')) {\n             $cards[$index]['selected'] = request('selected');\n         }\n     }\n\n     return response()->json($cards);\n }", "CodeBleu_score": 39.18611210354871}, {"code": "<?\n public function updateCards(){\n\t$cards = $this->dashboardHelper->getCards();\n\n foreach ($cards as $key => $card) {\n\n $cards[$key]['selected'] = false;\n\n foreach (request()->all() as $requestData) {\n\n if ($card['code'] == $requestData['code']) {\n\n $cards[$key]['selected'] = true;\n\n }\n\n }\n\n }\n\n return response()->json($cards);\n\n }", "CodeBleu_score": 39.93036277229693}, {"code": "<?\n public function updateCards(){\n\t$cards = $this->dashboardHelper->getCards();\n\n    foreach (request()->all() as $card) {\n        foreach ($cards as $key => $currentCard) {\n            if ($card['id'] === $currentCard['id']) {\n                $cards[$key]['selected'] = $card['selected'];\n            }\n        }\n    }\n\n    return response()->json($cards);\n}", "CodeBleu_score": 45.39380985089951}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\tEvent::dispatch('configuration.save.before');\n\n    $configuration = $this->configurationRepository->create(request()->all());\n\n    Event::dispatch('configuration.save.after', $configuration);\n\n    session()->flash('success', trans('admin::app.configuration.save-message'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 55.45293369283855}, {"code": "<?\npublic function store(){\n\tEvent::dispatch('core.configuration.save.before');\n\n    $this->validate(request(), [\n        'channel_based' => 'required',\n        'locale_based' => 'required',\n        'code' => 'required|unique:core_configs,code',\n        'value' => 'required',\n    ]);\n\n    $configuration = $this->configurationRepository->create(request()->all());\n\n    Event::dispatch('core.configuration.save.after', $configuration);\n\n    session()->flash('success', trans('admin::app.configuration.save-message'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 47.22191020601094}, {"code": "<?\npublic function store(){\n\tEvent::dispatch('configuration.create.before');\n\n    $configuration = $this->configurationRepository->create(request()->all());\n\n    Event::dispatch('configuration.create.after', $configuration);\n\n    session()->flash('success', trans('admin::app.configuration.save-message'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 54.595182533635366}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t$path = request()->get('path');\n    $fileName = request()->get('name');\n\n    $config = $this->configurationRepository->findOneByField('value', $path);\n\n    if (! $config) {\n        abort(404);\n    }\n\n    $config->value = Storage::disk('public')->getDriver()->getAdapter()->getPathPrefix() . 'configuration/' . $path;\n\n    return response()->download($config->value, $fileName);\n}", "CodeBleu_score": 47.74552984061968}, {"code": "<?\npublic function download(){\n\t$path = request()->get('path');\n\n    $fileName = $this->configurationRepository->getValue('catalog.products.default_image.value');\n\n    $filePath = storage_path('app/public/' . $path . '/' . $fileName);\n\n    return response()->download($filePath, $fileName);\n}", "CodeBleu_score": 44.070177043929654}, {"code": "<?\npublic function download(){\n\t$path = request()->get('path');\n\n    $fileName = config('core')['storage'] . '/' . $path;\n\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n\n    return Storage::download($fileName, $config['name'] . '.' . pathinfo($fileName, PATHINFO_EXTENSION));\n}", "CodeBleu_score": 58.82294939429765}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tList<AdminModelSort> adminModelSortList = new ArrayList<>();\n    for (String model : list) {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setModel(model);\n        adminModelSort.setType(1);\n        adminModelSort.setUserId(UserUtil.getUserId());\n        adminModelSortList.add(adminModelSort);\n    }\n    adminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()));\n    adminModelSortService.saveBatch(adminModelSortList);\n    return Result.ok();\n}", "CodeBleu_score": 49.21257618516876}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tList<AdminModelSort> adminModelSorts = new ArrayList<>();\n    list.forEach(model -> {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setUserId(UserUtil.getUserId());\n        adminModelSort.setModel(model);\n        adminModelSort.setType(1);\n        adminModelSorts.add(adminModelSort);\n    });\n    adminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()).eq(AdminModelSort::getType, 1));\n    adminModelSortService.saveBatch(adminModelSorts);\n    return Result.ok();\n}", "CodeBleu_score": 47.556820261598176}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tList<AdminModelSort> adminModelSortList = new ArrayList<>();\n    for (int i = 0; i < list.size(); i++) {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setModel(list.get(i));\n        adminModelSort.setType(1);\n        adminModelSort.setUserId(UserUtil.getUserId());\n        adminModelSort.setSort(i);\n        adminModelSortList.add(adminModelSort);\n    }\n    adminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()));\n    adminModelSortService.saveBatch(adminModelSortList);\n    return Result.ok();\n}", "CodeBleu_score": 69.53504803131861}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getId());\n    if (adminConfig.getModule().equals(AdminModuleEnum.CRM.getCode())) {\n        return Result.error(AdminCodeEnum.MODULE_SETTING_ERROR.getCode(), AdminCodeEnum.MODULE_SETTING_ERROR.getMsg());\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.updateById(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 63.929316123163474}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getId());\n    if (adminConfig.getModule().equals(AdminModuleEnum.CRM.getCode())) {\n        return Result.error(AdminCodeEnum.CRM_MODULE_CAN_NOT_BE_DISABLED);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.updateById(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 68.10099185401856}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getId());\n    if (adminConfig == null) {\n        return R.error(AdminCodeEnum.DATA_NOT_FOUND);\n    }\n    if (adminConfig.getModule().equals(AdminModuleEnum.CRM.getCode())) {\n        return R.error(AdminCodeEnum.DATA_CRM_MODULE);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.updateById(adminConfig);\n    return R.ok();\n}", "CodeBleu_score": 63.821641780513126}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t,object = \\\"\u4f01\u4e1a\u9996\u9875\u914d\u7f6e\\\",detail = \\\"'\u4f01\u4e1a\u9996\u9875\u914d\u7f6e:'+#adminCompanyBO.companyName\\\")\n    public Result setAdminConfig(@RequestBody AdminCompanyBO adminCompanyBO) {\n        adminConfigService.setAdminConfig(adminCompanyBO);\n        return Result.ok();\n    }\n\n    /**\n     * \u67e5\u8be2\u4f01\u4e1a\u914d\u7f6e\n     *\n     * @return Result\n     * @author zhangzhiwei\n     */\n    @ApiOperation(value = \\\"\u67e5\u8be2\u4f01\u4e1a\u914d\u7f6e\\\")\n    @PostMapping(\\\"/queryAdminConfig\\\")\n    public Result<AdminCompanyBO> queryAdminConfig() {\n        return R.ok(adminConfigService.queryAdminConfig());\n    }\n\n\n    @ApiOperation(value = \\\"\u5934\u90e8\u8bbe\u7f6e\\\")\n    @PostMapping(\\\"/queryHeaderModelSort\\\")\n    public Result<List<String>> queryHeaderModelSort() {\n        List<AdminModelSort> list = adminModelSortService.lambdaQuery().select(AdminModelSort::getModel)\n                .eq(AdminModelSort::getType, 1)\n                .eq(AdminModelSort::getUserId, UserUtil.getUserId())\n                .list();\n        return Result.ok(list.stream().map(AdminModelSort::getModel).collect(Collectors.toList()));\n    }\n\n    @ApiOperation(value = \\\"\u5934\u90e8\u8bbe\u7f6e\\\")\n    @PostMapping(\\\"/setHeaderModelSort\\\")\n    public Result setHeaderModelSort(@RequestBody List<String> list) {\n        List<AdminModelSort> modelSortList = new ArrayList<>();\n        for (int i = 0; i < list.size(); i++) {\n            AdminModelSort adminModelSort = new AdminModelSort();\n            adminModelSort.setType(1).setModel(list.get(i)).setSort(i).setIsHidden(0).setUserId(UserUtil.getUserId());\n            modelSortList.add(adminModelSort);\n        }\n        LambdaQueryWrapper<AdminModelSort> wrapper = new LambdaQueryWrapper<>();\n        wrapper.eq(AdminModelSort::getType, 1).eq(AdminModelSort::getUserId, UserUtil.getUserId());\n        adminModelSortService.remove(wrapper);\n        adminModelSortService.saveBatch(modelSortList, Const.BATCH_SAVE_SIZE);\n        return R.ok();\n    }\n\n    @ApiOperation(value = \\\"\u8bbe\u7f6e\u6d3b\u52a8\u54a8\u8be2\u72b6\u6001\\\")\n    @PostMapping(\\\"/setMarketing\\\")\n    @SysLogHandler(applicationName = \\\"admin\\\",subModel = SubModelType.ADMIN_OTHER_SETTINGS,behavior = BehaviorEnum.UPDATE,object = \\\"\u6d3b\u52a8\u54a8\u8be2\u8bbe\u7f6e\\\",detail = \\\"\u6d3b\u52a8\u54a8\u8be2\u8bbe\u7f6e\\\")\n    public Result setMarketing(@RequestParam(\\\"status\\\") Integer status) {\n       adminConfigService.setMarketing(status);\n       return R.ok();\n    }\n\n\n    @ApiOperation(value = \\\"\u67e5\u8be2\u6d3b\u52a8\u54a8\u8be2\u72b6\u6001\\\")\n    @PostMapping(\\\"/queryMarketing\\\")\n    public Result queryMarketing() {\n        return R.ok(adminConfigService.queryMarketing());\n    }\n\n    /**\n     * \u67e5\u8be2\u4f01\u4e1a\u6a21\u5757\u914d\u7f6e\n     *\n     * @author zhangzhiwei\n     */\n    @ApiOperation(value = \\\"\u67e5\u8be2\u4f01\u4e1a\u6a21\u5757\u914d\u7f6e\\\")\n    @PostMapping(\\\"/queryModuleSetting\\\")\n    public Result<List<ModuleSettingVO>> queryModuleSetting() {\n        return R.ok(adminConfigService.queryModuleSetting());\n    }\n\n    /**\n     * \u8bbe\u7f6e\u4f01\u4e1a\u6a21\u5757\n     *\n     * @param moduleSetting data\n     */\n    @ApiOperation(value = \\\"\u8bbe\u7f6e\u4f01\u4e1a\u6a21\u5757\\\")\n    @PostMapping(\\\"/setModuleSetting\\\")\n    @SysLogHandler(subModel = SubModelType.ADMIN_OTHER_SETTINGS,behavior = BehaviorEnum.UPDATE)\n    public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting) {\n        AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n        if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n            return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n        }\n        adminConfig.setStatus(moduleSetting.getStatus());\n        adminConfigService.setModuleSetting(adminConfig);\n        return Result.ok();\n    }\n\n    @ApiOperation(value = \\\"\u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\\\")\n    @PostMapping(\\\"/setLogWelcomeSpeech\\\")\n    @SysLogHandler(subModel = SubModelType.ADMIN_OTHER_SETTINGS,behavior = BehaviorEnum.UPDATE,object = \\\"\u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\\\",detail = \\\"\u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\\\")\n    public Result setLogWelcomeSpeech(@Valid @RequestBody List<String> stringList) {\n        adminConfigService.setLogWelcomeSpeech(stringList);\n        return Result.ok();\n    }\n\n    /**\n     * \u83b7\u53d6\u65e5\u5fd7\u6b22\u8fce\u8bed\u5217\u8868\n     */\n    @ApiOperation(value = \\\"\u83b7\u53d6\u65e5\u5fd7\u6b22\u8fce\u8bed\\\")\n    @PostMapping(\\\"/getLogWelcomeSpeechList\\\")\n    public Result<List<LogWelcomeSpeechBO>> getLogWelcomeSpeechList() {\n        List<LogWelcomeSpeechBO> adminConfigs = adminConfigService.getLogWelcomeSpeechList();\n        return R.ok(adminConfigs);\n    }\n\n    /**\n     * \u5220\u9664\u914d\u7f6e\u6570\u636e\n     */\n    @ApiOperation(value = \\\"\u5220\u9664\u914d\u7f6e\u6570\u636e\\\")\n    @PostMapping(\\\"/deleteConfigById\\\")\n    public Result deleteConfigById(@RequestBody @ApiParam(name = \\\"settingId\\\", value = \\\"\u4e3b\u952eID\\\", required = true) Integer settingId) {\n        if (settingId == null) {\n            return R.error(AdminCodeEnum.ADMIN_DATA_EXIST_ERROR);\n        }\n        adminConfigService.removeById(settingId);\n        return R.ok();\n    }\n\n    /**\n     * \u67e5\u8be2\u547c\u53eb\u4e2d\u5fc3\u8bbe\u7f6e\n     */\n    @ApiOperation(value = \\\"\u67e5\u8be2\u624b\u673a\u7aef\u6a21\u5757\u8bbe\u7f6e\\\")\n    @PostMapping(\\\"/queryCallModuleSetting\\\")\n    public Result<ModuleSettingVO> queryCallModuleSetting() {\n        ModuleSettingVO moduleSettingVO = adminConfigService.queryCallModuleSetting();\n        return R.ok(moduleSettingVO);\n    }\n\n    @ApiOperation(value = \\\"\u67e5\u8be2\u81ea\u5b9a\u4e49\u914d\u7f6e\\\")\n    @PostMapping(\\\"/queryCustomSetting/{customKey}\\\")\n    public Result<JSONArray> queryCustomSetting(@PathVariable(\\\"customKey\\\") String customKey) {\n        AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(customKey);\n        if (userConfig == null) {\n            return Result.ok(new JSONArray());\n        }\n        return Result.ok(JSON.parseArray(userConfig.getValue()));\n    }\n\n    /**\n     * \u4fee\u6539\u624b\u673a\u7aef\u6a21\u5757\u8bbe\u7f6e\n     */\n\n    @ApiOperation(value = \\\"\u4fee\u6539\u81ea\u5b9a\u4e49\u914d\u7f6e\\\")\n    @PostMapping(\\\"/setCustomSetting/{customKey}\\\")\n\n\n", "CodeBleu_score": 15.9488599993167}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t,object = \\\"\u4f01\u4e1a\u9996\u9875\u914d\u7f6e\\\",detail = \\\"'\u4f01\u4e1a\u9996\u9875\u914d\u7f6e:'+#adminCompanyBO.companyName\\\")\n    public Result setAdminConfig(@RequestBody AdminCompanyBO adminCompanyBO) {\n        adminConfigService.setAdminConfig(adminCompanyBO);\n        return Result.ok();\n    }\n\n    /**\n     * \u67e5\u8be2\u4f01\u4e1a\u914d\u7f6e\n     *\n     * @return Result\n     * @author zhangzhiwei\n     */\n    @ApiOperation(value = \\\"\u67e5\u8be2\u4f01\u4e1a\u914d\u7f6e\\\")\n    @PostMapping(\\\"/queryAdminConfig\\\")\n    public Result<AdminCompanyBO> queryAdminConfig() {\n        return R.ok(adminConfigService.queryAdminConfig());\n    }\n\n\n    @ApiOperation(value = \\\"\u5934\u90e8\u8bbe\u7f6e\\\")\n    @PostMapping(\\\"/queryHeaderModelSort\\\")\n    public Result<List<String>> queryHeaderModelSort() {\n        List<AdminModelSort> list = adminModelSortService.lambdaQuery().select(AdminModelSort::getModel)\n                .eq(AdminModelSort::getType, 1)\n                .eq(AdminModelSort::getUserId, UserUtil.getUserId())\n                .list();\n        return Result.ok(list.stream().map(AdminModelSort::getModel).collect(Collectors.toList()));\n    }\n\n    @ApiOperation(value = \\\"\u5934\u90e8\u8bbe\u7f6e\\\")\n    @PostMapping(\\\"/setHeaderModelSort\\\")\n    public Result setHeaderModelSort(@RequestBody List<String> list) {\n        List<AdminModelSort> modelSortList = new ArrayList<>();\n        for (int i = 0; i < list.size(); i++) {\n            AdminModelSort adminModelSort = new AdminModelSort();\n            adminModelSort.setType(1).setModel(list.get(i)).setSort(i).setIsHidden(0).setUserId(UserUtil.getUserId());\n            modelSortList.add(adminModelSort);\n        }\n        LambdaQueryWrapper<AdminModelSort> wrapper = new LambdaQueryWrapper<>();\n        wrapper.eq(AdminModelSort::getType, 1).eq(AdminModelSort::getUserId, UserUtil.getUserId());\n        adminModelSortService.remove(wrapper);\n        adminModelSortService.saveBatch(modelSortList, Const.BATCH_SAVE_SIZE);\n        return R.ok();\n    }\n\n    @ApiOperation(value = \\\"\u8bbe\u7f6e\u6d3b\u52a8\u54a8\u8be2\u72b6\u6001\\\")\n    @PostMapping(\\\"/setMarketing\\\")\n    @SysLogHandler(applicationName = \\\"admin\\\",subModel = SubModelType.ADMIN_OTHER_SETTINGS,behavior = BehaviorEnum.UPDATE,object = \\\"\u6d3b\u52a8\u54a8\u8be2\u8bbe\u7f6e\\\",detail = \\\"\u6d3b\u52a8\u54a8\u8be2\u8bbe\u7f6e\\\")\n    public Result setMarketing(@RequestParam(\\\"status\\\") Integer status) {\n       adminConfigService.setMarketing(status);\n       return R.ok();\n    }\n\n\n    @ApiOperation(value = \\\"\u67e5\u8be2\u6d3b\u52a8\u54a8\u8be2\u72b6\u6001\\\")\n    @PostMapping(\\\"/queryMarketing\\\")\n    public Result queryMarketing() {\n        return R.ok(adminConfigService.queryMarketing());\n    }\n\n    /**\n     * \u67e5\u8be2\u4f01\u4e1a\u6a21\u5757\u914d\u7f6e\n     *\n     * @author zhangzhiwei\n     */\n    @ApiOperation(value = \\\"\u67e5\u8be2\u4f01\u4e1a\u6a21\u5757\u914d\u7f6e\\\")\n    @PostMapping(\\\"/queryModuleSetting\\\")\n    public Result<List<ModuleSettingVO>> queryModuleSetting() {\n        return R.ok(adminConfigService.queryModuleSetting());\n    }\n\n    /**\n     * \u8bbe\u7f6e\u4f01\u4e1a\u6a21\u5757\n     *\n     * @param moduleSetting data\n     */\n    @ApiOperation(value = \\\"\u8bbe\u7f6e\u4f01\u4e1a\u6a21\u5757\\\")\n    @PostMapping(\\\"/setModuleSetting\\\")\n    @SysLogHandler(subModel = SubModelType.ADMIN_OTHER_SETTINGS,behavior = BehaviorEnum.UPDATE)\n    public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting) {\n        AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n        if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n            return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n        }\n        adminConfig.setStatus(moduleSetting.getStatus());\n        adminConfigService.setModuleSetting(adminConfig);\n        return Result.ok();\n    }\n\n    @ApiOperation(value = \\\"\u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\\\")\n    @PostMapping(\\\"/setLogWelcomeSpeech\\\")\n    @SysLogHandler(subModel = SubModelType.ADMIN_OTHER_SETTINGS,behavior = BehaviorEnum.UPDATE,object = \\\"\u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\\\",detail = \\\"\u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\\\")\n    public Result setLogWelcomeSpeech(@Valid @RequestBody List<String> stringList) {\n        adminConfigService.setLogWelcomeSpeech(stringList);\n        return Result.ok();\n    }\n\n    /**\n     * \u83b7\u53d6\u65e5\u5fd7\u6b22\u8fce\u8bed\u5217\u8868\n     */\n    @ApiOperation(value = \\\"\u83b7\u53d6\u65e5\u5fd7\u6b22\u8fce\u8bed\\\")\n    @PostMapping(\\\"/getLogWelcomeSpeechList\\\")\n    public Result<List<LogWelcomeSpeechBO>> getLogWelcomeSpeechList() {\n        List<LogWelcomeSpeechBO> adminConfigs = adminConfigService.getLogWelcomeSpeechList();\n        return R.ok(adminConfigs);\n    }\n\n    /**\n     * \u5220\u9664\u914d\u7f6e\u6570\u636e\n     */\n    @ApiOperation(value = \\\"\u5220\u9664\u914d\u7f6e\u6570\u636e\\\")\n    @PostMapping(\\\"/deleteConfigById\\\")\n    public Result deleteConfigById(@RequestBody @ApiParam(name = \\\"settingId\\\", value = \\\"\u4e3b\u952eID\\\", required = true) Integer settingId) {\n        if (settingId == null) {\n            return R.error(AdminCodeEnum.ADMIN_DATA_EXIST_ERROR);\n        }\n        adminConfigService.removeById(settingId);\n        return R.ok();\n    }\n\n    /**\n     * \u67e5\u8be2\u547c\u53eb\u4e2d\u5fc3\u8bbe\u7f6e\n     */\n    @ApiOperation(value = \\\"\u67e5\u8be2\u624b\u673a\u7aef\u6a21\u5757\u8bbe\u7f6e\\\")\n    @PostMapping(\\\"/queryCallModuleSetting\\\")\n    public Result<ModuleSettingVO> queryCallModuleSetting() {\n        ModuleSettingVO moduleSettingVO = adminConfigService.queryCallModuleSetting();\n        return R.ok(moduleSettingVO);\n    }\n\n    @ApiOperation(value = \\\"\u67e5\u8be2\u81ea\u5b9a\u4e49\u914d\u7f6e\\\")\n    @PostMapping(\\\"/queryCustomSetting/{customKey}\\\")\n    public Result<JSONArray> queryCustomSetting(@PathVariable(\\\"customKey\\\") String customKey) {\n        AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(customKey);\n        if (userConfig == null) {\n            return Result.ok(new JSONArray());\n        }\n        return Result.ok(JSON.parseArray(userConfig.getValue()));\n    }\n\n    /**\n     * \u4fee\u6539\u624b\u673a\u7aef\u6a21\u5757\u8bbe\u7f6e\n     */\n\n    @ApiOperation(value = \\\"\u4fee\u6539\u81ea\u5b9a\u4e49\u914d\u7f6e\\\")\n    @PostMapping(\\\"/setCustomSetting/{customKey}\\\")\n\n\n", "CodeBleu_score": 15.9488599993167}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t,object = \\\"\u4f01\u4e1a\u9996\u9875\u914d\u7f6e\\\",detail = \\\"'\u4f01\u4e1a\u9996\u9875\u914d\u7f6e:'+#adminCompanyBO.companyName\\\")\n    public Result setAdminConfig(@RequestBody AdminCompanyBO adminCompanyBO) {\n        adminConfigService.setAdminConfig(adminCompanyBO);\n        return Result.ok();\n    }\n\n    /**\n     * \u67e5\u8be2\u4f01\u4e1a\u914d\u7f6e\n     *\n     * @return Result\n     * @author zhangzhiwei\n     */\n    @ApiOperation(value = \\\"\u67e5\u8be2\u4f01\u4e1a\u914d\u7f6e\\\")\n    @PostMapping(\\\"/queryAdminConfig\\\")\n    public Result<AdminCompanyBO> queryAdminConfig() {\n        return R.ok(adminConfigService.queryAdminConfig());\n    }\n\n\n    @ApiOperation(value = \\\"\u5934\u90e8\u8bbe\u7f6e\\\")\n    @PostMapping(\\\"/queryHeaderModelSort\\\")\n    public Result<List<String>> queryHeaderModelSort() {\n        List<AdminModelSort> list = adminModelSortService.lambdaQuery().select(AdminModelSort::getModel)\n                .eq(AdminModelSort::getType, 1)\n                .eq(AdminModelSort::getUserId, UserUtil.getUserId())\n                .list();\n        return Result.ok(list.stream().map(AdminModelSort::getModel).collect(Collectors.toList()));\n    }\n\n    @ApiOperation(value = \\\"\u5934\u90e8\u8bbe\u7f6e\\\")\n    @PostMapping(\\\"/setHeaderModelSort\\\")\n    public Result setHeaderModelSort(@RequestBody List<String> list) {\n        List<AdminModelSort> modelSortList = new ArrayList<>();\n        for (int i = 0; i < list.size(); i++) {\n            AdminModelSort adminModelSort = new AdminModelSort();\n            adminModelSort.setType(1).setModel(list.get(i)).setSort(i).setIsHidden(0).setUserId(UserUtil.getUserId());\n            modelSortList.add(adminModelSort);\n        }\n        LambdaQueryWrapper<AdminModelSort> wrapper = new LambdaQueryWrapper<>();\n        wrapper.eq(AdminModelSort::getType, 1).eq(AdminModelSort::getUserId, UserUtil.getUserId());\n        adminModelSortService.remove(wrapper);\n        adminModelSortService.saveBatch(modelSortList, Const.BATCH_SAVE_SIZE);\n        return R.ok();\n    }\n\n    @ApiOperation(value = \\\"\u8bbe\u7f6e\u6d3b\u52a8\u54a8\u8be2\u72b6\u6001\\\")\n    @PostMapping(\\\"/setMarketing\\\")\n    @SysLogHandler(applicationName = \\\"admin\\\",subModel = SubModelType.ADMIN_OTHER_SETTINGS,behavior = BehaviorEnum.UPDATE,object = \\\"\u6d3b\u52a8\u54a8\u8be2\u8bbe\u7f6e\\\",detail = \\\"\u6d3b\u52a8\u54a8\u8be2\u8bbe\u7f6e\\\")\n    public Result setMarketing(@RequestParam(\\\"status\\\") Integer status) {\n       adminConfigService.setMarketing(status);\n       return R.ok();\n    }\n\n\n    @ApiOperation(value = \\\"\u67e5\u8be2\u6d3b\u52a8\u54a8\u8be2\u72b6\u6001\\\")\n    @PostMapping(\\\"/queryMarketing\\\")\n    public Result queryMarketing() {\n        return R.ok(adminConfigService.queryMarketing());\n    }\n\n    /**\n     * \u67e5\u8be2\u4f01\u4e1a\u6a21\u5757\u914d\u7f6e\n     *\n     * @author zhangzhiwei\n     */\n    @ApiOperation(value = \\\"\u67e5\u8be2\u4f01\u4e1a\u6a21\u5757\u914d\u7f6e\\\")\n    @PostMapping(\\\"/queryModuleSetting\\\")\n    public Result<List<ModuleSettingVO>> queryModuleSetting() {\n        return R.ok(adminConfigService.queryModuleSetting());\n    }\n\n    /**\n     * \u8bbe\u7f6e\u4f01\u4e1a\u6a21\u5757\n     *\n     * @param moduleSetting data\n     */\n    @ApiOperation(value = \\\"\u8bbe\u7f6e\u4f01\u4e1a\u6a21\u5757\\\")\n    @PostMapping(\\\"/setModuleSetting\\\")\n    @SysLogHandler(subModel = SubModelType.ADMIN_OTHER_SETTINGS,behavior = BehaviorEnum.UPDATE)\n    public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting) {\n        AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n        if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n            return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n        }\n        adminConfig.setStatus(moduleSetting.getStatus());\n        adminConfigService.setModuleSetting(adminConfig);\n        return Result.ok();\n    }\n\n    @ApiOperation(value = \\\"\u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\\\")\n    @PostMapping(\\\"/setLogWelcomeSpeech\\\")\n    @SysLogHandler(subModel = SubModelType.ADMIN_OTHER_SETTINGS,behavior = BehaviorEnum.UPDATE,object = \\\"\u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\\\",detail = \\\"\u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\\\")\n    public Result setLogWelcomeSpeech(@Valid @RequestBody List<String> stringList) {\n        adminConfigService.setLogWelcomeSpeech(stringList);\n        return Result.ok();\n    }\n\n    /**\n     * \u83b7\u53d6\u65e5\u5fd7\u6b22\u8fce\u8bed\u5217\u8868\n     */\n    @ApiOperation(value = \\\"\u83b7\u53d6\u65e5\u5fd7\u6b22\u8fce\u8bed\\\")\n    @PostMapping(\\\"/getLogWelcomeSpeechList\\\")\n    public Result<List<LogWelcomeSpeechBO>> getLogWelcomeSpeechList() {\n        List<LogWelcomeSpeechBO> adminConfigs = adminConfigService.getLogWelcomeSpeechList();\n        return R.ok(adminConfigs);\n    }\n\n    /**\n     * \u5220\u9664\u914d\u7f6e\u6570\u636e\n     */\n    @ApiOperation(value = \\\"\u5220\u9664\u914d\u7f6e\u6570\u636e\\\")\n    @PostMapping(\\\"/deleteConfigById\\\")\n    public Result deleteConfigById(@RequestBody @ApiParam(name = \\\"settingId\\\", value = \\\"\u4e3b\u952eID\\\", required = true) Integer settingId) {\n        if (settingId == null) {\n            return R.error(AdminCodeEnum.ADMIN_DATA_EXIST_ERROR);\n        }\n        adminConfigService.removeById(settingId);\n        return R.ok();\n    }\n\n    /**\n     * \u67e5\u8be2\u547c\u53eb\u4e2d\u5fc3\u8bbe\u7f6e\n     */\n    @ApiOperation(value = \\\"\u67e5\u8be2\u624b\u673a\u7aef\u6a21\u5757\u8bbe\u7f6e\\\")\n    @PostMapping(\\\"/queryCallModuleSetting\\\")\n    public Result<ModuleSettingVO> queryCallModuleSetting() {\n        ModuleSettingVO moduleSettingVO = adminConfigService.queryCallModuleSetting();\n        return R.ok(moduleSettingVO);\n    }\n\n    @ApiOperation(value = \\\"\u67e5\u8be2\u81ea\u5b9a\u4e49\u914d\u7f6e\\\")\n    @PostMapping(\\\"/queryCustomSetting/{customKey}\\\")\n    public Result<JSONArray> queryCustomSetting(@PathVariable(\\\"customKey\\\") String customKey) {\n        AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(customKey);\n        if (userConfig == null) {\n            return Result.ok(new JSONArray());\n        }\n        return Result.ok(JSON.parseArray(userConfig.getValue()));\n    }\n\n    /**\n     * \u4fee\u6539\u624b\u673a\u7aef\u6a21\u5757\u8bbe\u7f6e\n     */\n\n    @ApiOperation(value = \\\"\u4fee\u6539\u81ea\u5b9a\u4e49\u914d\u7f6e\\\")\n    @PostMapping(\\\"/setCustomSetting/{customKey}\\\")\n\n\n", "CodeBleu_score": 15.9488599993167}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\n    }", "CodeBleu_score": 8.118169045421043}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\n    }", "CodeBleu_score": 8.118169045421043}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\n    }", "CodeBleu_score": 8.118169045421043}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t\n    public Result updateImg(@RequestParam(\\\"file\\\") MultipartFile file) throws IOException {\n        UploadEntity img = adminFileService.upload(file, null, \\\"img\\\", \\\"0\\\");\n        AdminUser byId = adminUserService.getById(UserUtil.getUserId());\n        byId.setImg(img.getUrl());\n        adminUserService.updateById(byId);\n        return R.ok();\n    }\n\n    @PostMapping(\\\"/updatePassword\\\")\n    @ApiOperation(\\\"\u4fee\u6539\u767b\u5f55\u5bc6\u7801\\\")\n    @SysLogHandler(behavior = BehaviorEnum.UPDATE,object = \\\"\u4fee\u6539\u767b\u5f55\u5bc6\u7801\\\",detail = \\\"\u4fee\u6539\u767b\u5f55\u5bc6\u7801\\\")\n    public Result updatePassword(@RequestParam(\\\"oldPwd\\\") String oldPass, @RequestParam(\\\"newPwd\\\") String newPass) {\n        AdminUser adminUser = adminUserService.getById(UserUtil.getUserId());\n        if (!UserUtil.verify(adminUser.getUsername() + oldPass, adminUser.getSalt(), adminUser.getPassword())) {\n            return R.error(AdminCodeEnum.ADMIN_PASSWORD_ERROR);\n        }\n        adminUser.setPassword(newPass);\n        return updateUser(adminUser);\n    }\n\n    @PostMapping(\\\"/updateUser\\\")\n    @ApiOperation(\\\"\u4fee\u6539\u7528\u6237\u4fe1\u606f\\\")\n    public Result updateUser(@RequestBody AdminUser adminUser) {\n        adminUserService.updateUser(adminUser);\n        return R.ok();\n    }\n\n    @Autowired\n    private IAdminDeptService deptService;\n\n    @PostMapping(\\\"/queryLoginUser\\\")\n    @ApiOperation(\\\"\u67e5\u8be2\u5f53\u524d\u767b\u5f55\u7528\u6237\\\")\n    public Result<AdminUserVO> queryLoginUser(HttpServletRequest request, HttpServletResponse response) {\n        String name = \\\"readNotice\\\";\n        AdminUser user = adminUserService.getById(UserUtil.getUserId());\n        if (user == null) {\n            throw new NoLoginException();\n        }\n        AdminSuperUserVo adminUser = BeanUtil.copyProperties(user, AdminSuperUserVo.class);\n        adminUser.setIsAdmin(UserUtil.isAdmin());\n        AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(name);\n        adminUser.setIsReadNotice(userConfig != null ? userConfig.getStatus() : 0);\n        adminUser.setPassword(null);\n        String deptName = deptService.getNameByDeptId(adminUser.getDeptId());\n        adminUser.setDeptName(deptName);\n        adminUser.setParentName(UserCacheUtil.getUserName(adminUser.getParentId()));\n        AdminConfig config = ApplicationContextHolder.getBean(IAdminConfigService.class).queryConfigByName(\\\"email\\\");\n        if (config != null && config.getStatus() == 1) {\n            Integer data = ApplicationContextHolder.getBean(EmailService.class).getEmailId(adminUser.getUserId()).getData();\n            adminUser.setEmailId(data);\n        }\n        AdminUserConfig userConfigByName = adminUserConfigService.queryUserConfigByName(\\\"InitUserConfig\\\");\n        if(userConfigByName != null){\n            adminUser.setServerUserInfo(JSON.parseObject(userConfigByName.getValue()));\n        }\n        return R.ok(adminUser);\n    }\n\n    @RequestMapping(\\\"/queryUserRoleIds\\\")\n    @ApiExplain(\\\"\u67e5\u8be2\u7528\u6237\u89d2\u8272\u5217\u8868\\\")\n    public Result<List<Integer>> queryUserRoleIds(@RequestParam(\\\"userId\\\") @NotNull Long userId) {\n        return R.ok(adminUserService.queryUserRoleIds(userId));\n    }\n\n    @RequestMapping(\\\"/queryListName\\\")\n    @ApiExplain(\\\"\u67e5\u8be2\u901a\u8baf\u5f55\\\")\n    public Result queryListName(@RequestBody UserBookBO userBookBO) {\n        return R.ok(adminUserService.queryListName(userBookBO));\n    }\n\n    @RequestMapping(\\\"/attention\\\")\n    @ApiExplain(\\\"\u5207\u6362\u5173\u6ce8\u72b6\u6001\\\")\n    public Result attention(@RequestParam(\\\"userId\\\") Long userId) {\n        adminUserService.attention(userId);\n        return R.ok();\n    }\n\n    @RequestMapping(\\\"/queryChildUserId\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u4e0b\u7684\u5b50\u7528\u6237\\\")\n    public Result<List<Long>> queryChildUserId(@NotNull Long userId) {\n        List<Long> longList = adminUserService.queryChildUserId(userId);\n        return R.ok(longList);\n    }\n\n    @RequestMapping(\\\"/queryUserInfo\\\")\n    @ApiOperation(\\\"\u67e5\u8be2\u7528\u6237\u4fe1\u606f\\\")\n    public Result<AdminUser> queryUserInfo(@RequestParam(\\\"userId\\\") Long userId) {\n        AdminUser byId = adminUserService.getById(userId);\n        String nameByDeptId = ApplicationContextHolder.getBean(IAdminDeptService.class).getNameByDeptId(byId.getDeptId());\n        byId.setDeptName(nameByDeptId);\n        byId.setSalt(null);\n        byId.setPassword(null);\n        return R.ok(byId);\n    }\n\n    @RequestMapping(\\\"/queryInfoByUserId\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u83b7\u53d6\u7528\u6237\\\")\n    public Result<UserInfo> queryInfoByUserId(@NotNull Long userId) {\n        AdminUser byId = adminUserService.getById(userId);\n        UserInfo userInfo = null;\n        if (byId != null) {\n            userInfo = BeanUtil.copyProperties(byId, UserInfo.class);\n            if(byId.getDeptId() != null) {\n                String nameByDeptId = UserCacheUtil.getDeptName(byId.getDeptId());\n                userInfo.setDeptName(nameByDeptId);\n            }\n            userInfo.setRoles(adminUserService.queryUserRoleIds(userInfo.getUserId()));\n        }\n        return R.ok(userInfo);\n    }\n\n    @PostMapping(\\\"/queryNormalUserByIds\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u83b7\u53d6\u6b63\u5e38\u7528\u6237\\\")\n    public Result<List<Long>> queryNormalUserByIds(@RequestBody List<Long> ids) {\n        return R.ok(adminUserService.queryNormalUserByIds(ids));\n    }\n\n\n    @PostMapping(\\\"/queryUserById\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u83b7\u53d6\u7528\u6237\\\")\n    public Result<SimpleUser> queryUserById(@RequestParam(\\\"userId\\\") Long userId) {\n        AdminUser adminUser = adminUserService.getById(userId);\n        if(adminUser != null) {\n            adminUser.setDeptName(deptService.getNameByDeptId(adminUser.getDeptId()));\n        }\n        return R.ok(BeanUtil.copyProperties(adminUser, SimpleUser.class));\n    }\n\n    @PostMapping(\\\"/queryUserByDeptIds\\\")\n    @ApiExplain(\\\"\u6839\u636e\u90e8\u95e8ID\u83b7\u53d6\u7528\u6237ids\\\")\n    public Result<List<Long>> queryUserByDeptIds(@RequestBody List<Integer> ids) {\n        List<Long> userIds = adminUserService.queryUserByDeptIds(ids);\n        return R.ok(userIds);\n    }\n\n    @PostMapping(\\\"/readNotice\\\")\n    @ApiOperation(\\\"\u8bbe\u7f6e\u66f4\u65b0\u65e5\u5fd7\u4e3a\u5df2\u8bfb\\\")\n\n\n", "CodeBleu_score": 5.349562264262071}, {"code": " public Result readNotice() {\n\t\n    public Result updateImg(@RequestParam(\\\"file\\\") MultipartFile file) throws IOException {\n        UploadEntity img = adminFileService.upload(file, null, \\\"img\\\", \\\"0\\\");\n        AdminUser byId = adminUserService.getById(UserUtil.getUserId());\n        byId.setImg(img.getUrl());\n        adminUserService.updateById(byId);\n        return R.ok();\n    }\n\n    @PostMapping(\\\"/updatePassword\\\")\n    @ApiOperation(\\\"\u4fee\u6539\u767b\u5f55\u5bc6\u7801\\\")\n    @SysLogHandler(behavior = BehaviorEnum.UPDATE,object = \\\"\u4fee\u6539\u767b\u5f55\u5bc6\u7801\\\",detail = \\\"\u4fee\u6539\u767b\u5f55\u5bc6\u7801\\\")\n    public Result updatePassword(@RequestParam(\\\"oldPwd\\\") String oldPass, @RequestParam(\\\"newPwd\\\") String newPass) {\n        AdminUser adminUser = adminUserService.getById(UserUtil.getUserId());\n        if (!UserUtil.verify(adminUser.getUsername() + oldPass, adminUser.getSalt(), adminUser.getPassword())) {\n            return R.error(AdminCodeEnum.ADMIN_PASSWORD_ERROR);\n        }\n        adminUser.setPassword(newPass);\n        return updateUser(adminUser);\n    }\n\n    @PostMapping(\\\"/updateUser\\\")\n    @ApiOperation(\\\"\u4fee\u6539\u7528\u6237\u4fe1\u606f\\\")\n    public Result updateUser(@RequestBody AdminUser adminUser) {\n        adminUserService.updateUser(adminUser);\n        return R.ok();\n    }\n\n    @Autowired\n    private IAdminDeptService deptService;\n\n    @PostMapping(\\\"/queryLoginUser\\\")\n    @ApiOperation(\\\"\u67e5\u8be2\u5f53\u524d\u767b\u5f55\u7528\u6237\\\")\n    public Result<AdminUserVO> queryLoginUser(HttpServletRequest request, HttpServletResponse response) {\n        String name = \\\"readNotice\\\";\n        AdminUser user = adminUserService.getById(UserUtil.getUserId());\n        if (user == null) {\n            throw new NoLoginException();\n        }\n        AdminSuperUserVo adminUser = BeanUtil.copyProperties(user, AdminSuperUserVo.class);\n        adminUser.setIsAdmin(UserUtil.isAdmin());\n        AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(name);\n        adminUser.setIsReadNotice(userConfig != null ? userConfig.getStatus() : 0);\n        adminUser.setPassword(null);\n        String deptName = deptService.getNameByDeptId(adminUser.getDeptId());\n        adminUser.setDeptName(deptName);\n        adminUser.setParentName(UserCacheUtil.getUserName(adminUser.getParentId()));\n        AdminConfig config = ApplicationContextHolder.getBean(IAdminConfigService.class).queryConfigByName(\\\"email\\\");\n        if (config != null && config.getStatus() == 1) {\n            Integer data = ApplicationContextHolder.getBean(EmailService.class).getEmailId(adminUser.getUserId()).getData();\n            adminUser.setEmailId(data);\n        }\n        AdminUserConfig userConfigByName = adminUserConfigService.queryUserConfigByName(\\\"InitUserConfig\\\");\n        if(userConfigByName != null){\n            adminUser.setServerUserInfo(JSON.parseObject(userConfigByName.getValue()));\n        }\n        return R.ok(adminUser);\n    }\n\n    @RequestMapping(\\\"/queryUserRoleIds\\\")\n    @ApiExplain(\\\"\u67e5\u8be2\u7528\u6237\u89d2\u8272\u5217\u8868\\\")\n    public Result<List<Integer>> queryUserRoleIds(@RequestParam(\\\"userId\\\") @NotNull Long userId) {\n        return R.ok(adminUserService.queryUserRoleIds(userId));\n    }\n\n    @RequestMapping(\\\"/queryListName\\\")\n    @ApiExplain(\\\"\u67e5\u8be2\u901a\u8baf\u5f55\\\")\n    public Result queryListName(@RequestBody UserBookBO userBookBO) {\n        return R.ok(adminUserService.queryListName(userBookBO));\n    }\n\n    @RequestMapping(\\\"/attention\\\")\n    @ApiExplain(\\\"\u5207\u6362\u5173\u6ce8\u72b6\u6001\\\")\n    public Result attention(@RequestParam(\\\"userId\\\") Long userId) {\n        adminUserService.attention(userId);\n        return R.ok();\n    }\n\n    @RequestMapping(\\\"/queryChildUserId\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u4e0b\u7684\u5b50\u7528\u6237\\\")\n    public Result<List<Long>> queryChildUserId(@NotNull Long userId) {\n        List<Long> longList = adminUserService.queryChildUserId(userId);\n        return R.ok(longList);\n    }\n\n    @RequestMapping(\\\"/queryUserInfo\\\")\n    @ApiOperation(\\\"\u67e5\u8be2\u7528\u6237\u4fe1\u606f\\\")\n    public Result<AdminUser> queryUserInfo(@RequestParam(\\\"userId\\\") Long userId) {\n        AdminUser byId = adminUserService.getById(userId);\n        String nameByDeptId = ApplicationContextHolder.getBean(IAdminDeptService.class).getNameByDeptId(byId.getDeptId());\n        byId.setDeptName(nameByDeptId);\n        byId.setSalt(null);\n        byId.setPassword(null);\n        return R.ok(byId);\n    }\n\n    @RequestMapping(\\\"/queryInfoByUserId\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u83b7\u53d6\u7528\u6237\\\")\n    public Result<UserInfo> queryInfoByUserId(@NotNull Long userId) {\n        AdminUser byId = adminUserService.getById(userId);\n        UserInfo userInfo = null;\n        if (byId != null) {\n            userInfo = BeanUtil.copyProperties(byId, UserInfo.class);\n            if(byId.getDeptId() != null) {\n                String nameByDeptId = UserCacheUtil.getDeptName(byId.getDeptId());\n                userInfo.setDeptName(nameByDeptId);\n            }\n            userInfo.setRoles(adminUserService.queryUserRoleIds(userInfo.getUserId()));\n        }\n        return R.ok(userInfo);\n    }\n\n    @PostMapping(\\\"/queryNormalUserByIds\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u83b7\u53d6\u6b63\u5e38\u7528\u6237\\\")\n    public Result<List<Long>> queryNormalUserByIds(@RequestBody List<Long> ids) {\n        return R.ok(adminUserService.queryNormalUserByIds(ids));\n    }\n\n\n    @PostMapping(\\\"/queryUserById\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u83b7\u53d6\u7528\u6237\\\")\n    public Result<SimpleUser> queryUserById(@RequestParam(\\\"userId\\\") Long userId) {\n        AdminUser adminUser = adminUserService.getById(userId);\n        if(adminUser != null) {\n            adminUser.setDeptName(deptService.getNameByDeptId(adminUser.getDeptId()));\n        }\n        return R.ok(BeanUtil.copyProperties(adminUser, SimpleUser.class));\n    }\n\n    @PostMapping(\\\"/queryUserByDeptIds\\\")\n    @ApiExplain(\\\"\u6839\u636e\u90e8\u95e8ID\u83b7\u53d6\u7528\u6237ids\\\")\n    public Result<List<Long>> queryUserByDeptIds(@RequestBody List<Integer> ids) {\n        List<Long> userIds = adminUserService.queryUserByDeptIds(ids);\n        return R.ok(userIds);\n    }\n\n    @PostMapping(\\\"/readNotice\\\")\n    @ApiOperation(\\\"\u8bbe\u7f6e\u66f4\u65b0\u65e5\u5fd7\u4e3a\u5df2\u8bfb\\\")\n\n\n", "CodeBleu_score": 5.349562264262071}, {"code": " public Result readNotice() {\n\t\n    public Result updateImg(@RequestParam(\\\"file\\\") MultipartFile file) throws IOException {\n        UploadEntity img = adminFileService.upload(file, null, \\\"img\\\", \\\"0\\\");\n        AdminUser byId = adminUserService.getById(UserUtil.getUserId());\n        byId.setImg(img.getUrl());\n        adminUserService.updateById(byId);\n        return R.ok();\n    }\n\n    @PostMapping(\\\"/updatePassword\\\")\n    @ApiOperation(\\\"\u4fee\u6539\u767b\u5f55\u5bc6\u7801\\\")\n    @SysLogHandler(behavior = BehaviorEnum.UPDATE,object = \\\"\u4fee\u6539\u767b\u5f55\u5bc6\u7801\\\",detail = \\\"\u4fee\u6539\u767b\u5f55\u5bc6\u7801\\\")\n    public Result updatePassword(@RequestParam(\\\"oldPwd\\\") String oldPass, @RequestParam(\\\"newPwd\\\") String newPass) {\n        AdminUser adminUser = adminUserService.getById(UserUtil.getUserId());\n        if (!UserUtil.verify(adminUser.getUsername() + oldPass, adminUser.getSalt(), adminUser.getPassword())) {\n            return R.error(AdminCodeEnum.ADMIN_PASSWORD_ERROR);\n        }\n        adminUser.setPassword(newPass);\n        return updateUser(adminUser);\n    }\n\n    @PostMapping(\\\"/updateUser\\\")\n    @ApiOperation(\\\"\u4fee\u6539\u7528\u6237\u4fe1\u606f\\\")\n    public Result updateUser(@RequestBody AdminUser adminUser) {\n        adminUserService.updateUser(adminUser);\n        return R.ok();\n    }\n\n    @Autowired\n    private IAdminDeptService deptService;\n\n    @PostMapping(\\\"/queryLoginUser\\\")\n    @ApiOperation(\\\"\u67e5\u8be2\u5f53\u524d\u767b\u5f55\u7528\u6237\\\")\n    public Result<AdminUserVO> queryLoginUser(HttpServletRequest request, HttpServletResponse response) {\n        String name = \\\"readNotice\\\";\n        AdminUser user = adminUserService.getById(UserUtil.getUserId());\n        if (user == null) {\n            throw new NoLoginException();\n        }\n        AdminSuperUserVo adminUser = BeanUtil.copyProperties(user, AdminSuperUserVo.class);\n        adminUser.setIsAdmin(UserUtil.isAdmin());\n        AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(name);\n        adminUser.setIsReadNotice(userConfig != null ? userConfig.getStatus() : 0);\n        adminUser.setPassword(null);\n        String deptName = deptService.getNameByDeptId(adminUser.getDeptId());\n        adminUser.setDeptName(deptName);\n        adminUser.setParentName(UserCacheUtil.getUserName(adminUser.getParentId()));\n        AdminConfig config = ApplicationContextHolder.getBean(IAdminConfigService.class).queryConfigByName(\\\"email\\\");\n        if (config != null && config.getStatus() == 1) {\n            Integer data = ApplicationContextHolder.getBean(EmailService.class).getEmailId(adminUser.getUserId()).getData();\n            adminUser.setEmailId(data);\n        }\n        AdminUserConfig userConfigByName = adminUserConfigService.queryUserConfigByName(\\\"InitUserConfig\\\");\n        if(userConfigByName != null){\n            adminUser.setServerUserInfo(JSON.parseObject(userConfigByName.getValue()));\n        }\n        return R.ok(adminUser);\n    }\n\n    @RequestMapping(\\\"/queryUserRoleIds\\\")\n    @ApiExplain(\\\"\u67e5\u8be2\u7528\u6237\u89d2\u8272\u5217\u8868\\\")\n    public Result<List<Integer>> queryUserRoleIds(@RequestParam(\\\"userId\\\") @NotNull Long userId) {\n        return R.ok(adminUserService.queryUserRoleIds(userId));\n    }\n\n    @RequestMapping(\\\"/queryListName\\\")\n    @ApiExplain(\\\"\u67e5\u8be2\u901a\u8baf\u5f55\\\")\n    public Result queryListName(@RequestBody UserBookBO userBookBO) {\n        return R.ok(adminUserService.queryListName(userBookBO));\n    }\n\n    @RequestMapping(\\\"/attention\\\")\n    @ApiExplain(\\\"\u5207\u6362\u5173\u6ce8\u72b6\u6001\\\")\n    public Result attention(@RequestParam(\\\"userId\\\") Long userId) {\n        adminUserService.attention(userId);\n        return R.ok();\n    }\n\n    @RequestMapping(\\\"/queryChildUserId\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u4e0b\u7684\u5b50\u7528\u6237\\\")\n    public Result<List<Long>> queryChildUserId(@NotNull Long userId) {\n        List<Long> longList = adminUserService.queryChildUserId(userId);\n        return R.ok(longList);\n    }\n\n    @RequestMapping(\\\"/queryUserInfo\\\")\n    @ApiOperation(\\\"\u67e5\u8be2\u7528\u6237\u4fe1\u606f\\\")\n    public Result<AdminUser> queryUserInfo(@RequestParam(\\\"userId\\\") Long userId) {\n        AdminUser byId = adminUserService.getById(userId);\n        String nameByDeptId = ApplicationContextHolder.getBean(IAdminDeptService.class).getNameByDeptId(byId.getDeptId());\n        byId.setDeptName(nameByDeptId);\n        byId.setSalt(null);\n        byId.setPassword(null);\n        return R.ok(byId);\n    }\n\n    @RequestMapping(\\\"/queryInfoByUserId\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u83b7\u53d6\u7528\u6237\\\")\n    public Result<UserInfo> queryInfoByUserId(@NotNull Long userId) {\n        AdminUser byId = adminUserService.getById(userId);\n        UserInfo userInfo = null;\n        if (byId != null) {\n            userInfo = BeanUtil.copyProperties(byId, UserInfo.class);\n            if(byId.getDeptId() != null) {\n                String nameByDeptId = UserCacheUtil.getDeptName(byId.getDeptId());\n                userInfo.setDeptName(nameByDeptId);\n            }\n            userInfo.setRoles(adminUserService.queryUserRoleIds(userInfo.getUserId()));\n        }\n        return R.ok(userInfo);\n    }\n\n    @PostMapping(\\\"/queryNormalUserByIds\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u83b7\u53d6\u6b63\u5e38\u7528\u6237\\\")\n    public Result<List<Long>> queryNormalUserByIds(@RequestBody List<Long> ids) {\n        return R.ok(adminUserService.queryNormalUserByIds(ids));\n    }\n\n\n    @PostMapping(\\\"/queryUserById\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u83b7\u53d6\u7528\u6237\\\")\n    public Result<SimpleUser> queryUserById(@RequestParam(\\\"userId\\\") Long userId) {\n        AdminUser adminUser = adminUserService.getById(userId);\n        if(adminUser != null) {\n            adminUser.setDeptName(deptService.getNameByDeptId(adminUser.getDeptId()));\n        }\n        return R.ok(BeanUtil.copyProperties(adminUser, SimpleUser.class));\n    }\n\n    @PostMapping(\\\"/queryUserByDeptIds\\\")\n    @ApiExplain(\\\"\u6839\u636e\u90e8\u95e8ID\u83b7\u53d6\u7528\u6237ids\\\")\n    public Result<List<Long>> queryUserByDeptIds(@RequestBody List<Integer> ids) {\n        List<Long> userIds = adminUserService.queryUserByDeptIds(ids);\n        return R.ok(userIds);\n    }\n\n    @PostMapping(\\\"/readNotice\\\")\n    @ApiOperation(\\\"\u8bbe\u7f6e\u66f4\u65b0\u65e5\u5fd7\u4e3a\u5df2\u8bfb\\\")\n\n\n", "CodeBleu_score": 5.349562264262071}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t// \u67e5\u8be2\u662f\u5426\u5df2\u5b58\u5728\n    AdminConfig adminConfig = query().eq(\"name\", \"companyInfo\").one();\n    if (Objects.isNull(adminConfig)) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(\"companyInfo\");\n        adminConfig.setValue(\"{}\");\n    }\n    // \u66f4\u65b0\u503c\n    AdminConfig.CompanyInfo companyInfo = new AdminConfig.CompanyInfo();\n    companyInfo.setName(adminCompanyBO.getName());\n    companyInfo.setAddress(adminCompanyBO.getAddress());\n    companyInfo.setPhone(adminCompanyBO.getPhone());\n    companyInfo.setFax(adminCompanyBO.getFax());\n    companyInfo.setEmail(adminCompanyBO.getEmail());\n    companyInfo.setWebsite(adminCompanyBO.getWebsite());\n    companyInfo.setLogo(adminCompanyBO.getLogo());\n    adminConfig.setValue(JSON.toJSONString(companyInfo));\n    // \u4fdd\u5b58\n    saveOrUpdate(adminConfig);\n}", "CodeBleu_score": 49.38120101667288}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\tAdminConfig adminConfig = query().eq(\"name\", \"companyInfo\").one();\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(\"companyInfo\");\n        adminConfig.setValue(\"{}\");\n        save(adminConfig);\n    }\n    AdminCompanyBO companyBO = JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n    BeanUtil.copyProperties(adminCompanyBO, companyBO);\n    adminConfig.setValue(JSON.toJSONString(companyBO));\n    updateById(adminConfig);\n}", "CodeBleu_score": 60.224870385933436}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\tAdminConfig adminConfig = query().eq(\"name\", \"companyInfo\").one();\n    if (Objects.isNull(adminConfig)) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(\"companyInfo\");\n        adminConfig.setValue(\"\");\n        adminConfig.setDescription(\"company information\");\n        save(adminConfig);\n    }\n    adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n    updateById(adminConfig);\n}", "CodeBleu_score": 52.099055611870746}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\tString companyKey = \"companyInfo\";\n    AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\" limit 1\").one();\n    if (adminConfig == null) {\n        return new AdminCompanyBO();\n    }\n    return JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n}", "CodeBleu_score": 63.05943189927999}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\tString companyKey = \"companyInfo\";\n    AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\" limit 1\").one();\n    if (adminConfig == null) {\n        return new AdminCompanyBO();\n    }\n    return JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n}", "CodeBleu_score": 63.05943189927999}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\tAdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, \"companyInfo\").last(\" limit 1\").one();\n    if (adminConfig == null) {\n        return new AdminCompanyBO();\n    }\n    return JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n}", "CodeBleu_score": 43.909864463878925}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\tList<AdminConfig> adminConfigList = new ArrayList<>();\n    for (String string : stringList) {\n        AdminConfig adminConfig = new AdminConfig();\n        adminConfig.setName(logConfigName);\n        adminConfig.setDescription(logConfigName);\n        adminConfig.setStatus(1);\n        adminConfig.setValue(string);\n        adminConfigList.add(adminConfig);\n    }\n    remove(new QueryWrapper<AdminConfig>().eq(\"name\", logConfigName));\n    saveBatch(adminConfigList);\n}", "CodeBleu_score": 50.58570276590849}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\tList<AdminConfig> adminConfigList = new ArrayList<>();\n        stringList.forEach(s -> {\n            AdminConfig adminConfig = new AdminConfig();\n            adminConfig.setName(logConfigName);\n            adminConfig.setDescription(s);\n            adminConfig.setStatus(1);\n            adminConfig.setValue(s);\n            adminConfigList.add(adminConfig);\n        });\n        remove(new QueryWrapper<AdminConfig>().eq(\"name\", logConfigName));\n        saveBatch(adminConfigList);\n    }", "CodeBleu_score": 47.23486317644179}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\tList<AdminConfig> adminConfigList = new ArrayList<>();\n  for (String string : stringList) {\n   AdminConfig adminConfig = new AdminConfig();\n   adminConfig.setName(logConfigName);\n   adminConfig.setStatus(1);\n   adminConfig.setDescription(\"\u65e5\u5fd7\u6b22\u8fce\u8bed\");\n   adminConfig.setValue(string);\n   adminConfigList.add(adminConfig);\n  }\n  remove(new QueryWrapper<AdminConfig>().eq(\"name\", logConfigName));\n  saveBatch(adminConfigList);\n }", "CodeBleu_score": 48.487448969931094}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\tService jxcExamineService;\n\n    /**\n     * \u901a\u8fc7name\u67e5\u8be2\u7cfb\u7edf\u914d\u7f6e\n     *\n     * @param names names\n     * @return adminConfig\n     */\n    @Override\n    public List<AdminConfig> queryConfigListByName(Object... names) {\n        return query().in(\\\"name\\\", names).list();\n    }\n\n    /**\n     * \u8bbe\u7f6e\u4f01\u4e1a\u914d\u7f6e\n     *\n     */\n    @Override\n    public void setAdminConfig(AdminCompanyBO adminCompanyBO) {\n        String companyKey = \\\"companyInfo\\\";\n        AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\\\" limit 1\\\").one();\n        if (adminConfig == null) {\n            adminConfig = new AdminConfig();\n            adminConfig.setName(companyKey);\n            adminConfig.setStatus(1);\n            adminConfig.setDescription(\\\"\u4f01\u4e1aLOGO\u914d\u7f6e\\\");\n        }\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        saveOrUpdate(adminConfig);\n    }\n\n    /**\n     * \u67e5\u8be2\u4f01\u4e1a\u914d\u7f6e\n     *\n     * @return adminCompanyBO\n     */\n    @Override\n    public AdminCompanyBO queryAdminConfig() {\n        String companyKey = \\\"companyInfo\\\";\n        AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\\\" limit 1\\\").one();\n        AdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n        if (adminConfig != null) {\n            adminCompanyBO = JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n        }\n        return adminCompanyBO;\n    }\n\n    /**\n     * \u67e5\u8be2\u6a21\u5757\u8bbe\u7f6e\n     *\n     * @return data\n     */\n    @Override\n    public List<ModuleSettingVO> queryModuleSetting() {\n        List<AdminConfig> adminConfigList = queryConfigListByName((Object[]) AdminModuleEnum.getValues());\n        List<ModuleSettingVO> moduleSettingList = new ArrayList<>();\n        adminConfigList.forEach(adminConfig -> {\n            ModuleSettingVO moduleSettingVO = new ModuleSettingVO();\n            moduleSettingVO.setSettingId(adminConfig.getSettingId());\n            moduleSettingVO.setModule(adminConfig.getName());\n            moduleSettingVO.setStatus(adminConfig.getStatus());\n            moduleSettingVO.setType(adminConfig.getValue());\n            moduleSettingVO.setName(adminConfig.getDescription());\n            moduleSettingList.add(moduleSettingVO);\n        });\n        return moduleSettingList;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u6a21\u5757\u7684\u7981\u7528\u542f\u7528\n     *\n     * @param adminConfig data\n     */\n    @Override\n    public void setModuleSetting(AdminConfig adminConfig) {\n        updateById(adminConfig);\n        //\u67e5\u8be2\u4f01\u4e1a\u7528\u6237\uff0c\u5c06\u4f01\u4e1a\u7528\u6237\u7684\u6743\u9650\u7f13\u5b58\u6e05\u9664\uff0c\u91cd\u65b0\u8ba1\u7b97\n        List<AdminUserVO> userList = adminUserService.queryUserList(null).getRecords();\n        //\u6e05\u9664\u7f13\u5b58\n        adminRoleService.authInvalidate(userList.stream().map(AdminUserVO::getUserId).collect(Collectors.toList()));\n    }\n\n    /**\n     * \u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\n     *\n     * @param stringList data\n     */\n    @Override\n    public void setLogWelcomeSpeech(List<String> stringList) {\n        List<AdminConfig> configList = new ArrayList<>();\n        stringList.forEach(str -> {\n            AdminConfig config = new AdminConfig();\n            config.setName(logConfigName);\n            config.setValue(str);\n            config.setStatus(1);\n            configList.add(config);\n        });\n        QueryWrapper<AdminConfig> queryWrapper = new QueryWrapper<>();\n        queryWrapper.eq(\\\"name\\\", logConfigName);\n        remove(queryWrapper);\n        saveBatch(configList, AdminConst.BATCH_SAVE_SIZE);\n    }\n\n    /**\n     * \u67e5\u8be2\u65e5\u5fd7\u6b22\u8fce\u8bed\n     *\n     * @return data\n     */\n    @Override\n    public List<LogWelcomeSpeechBO> getLogWelcomeSpeechList() {\n        List<AdminConfig> adminConfigList = query().select(\\\"setting_id\\\", \\\"value\\\").eq(\\\"name\\\", logConfigName).list();\n        return adminConfigList.stream().map(adminConfig -> BeanUtil.copyProperties(adminConfig, LogWelcomeSpeechBO.class)).collect(Collectors.toList());\n    }\n\n    /**\n     * \u6839\u636e\u540d\u79f0\u67e5\u8be2\u914d\u7f6e\u4fe1\u606f\n     *\n     * @param name\n     * @return data\n     */\n    @Override\n    public AdminConfig queryConfigByName(String name) {\n        return query().in(\\\"name\\\", name).last(\\\" limit 1\\\").one();\n    }\n\n    /**\n     * \u67e5\u8be2\u547c\u53eb\u4e2d\u5fc3\u8bbe\u7f6e\n     *\n     * @return data\n     */\n    @Override\n    public ModuleSettingVO queryCallModuleSetting() {\n        AdminConfig adminConfig = queryConfigByName(AdminModuleEnum.CALL.getValue());\n        ModuleSettingVO moduleSettingVO = new ModuleSettingVO();\n        moduleSettingVO.setSettingId(adminConfig.getSettingId());\n        moduleSettingVO.setModule(adminConfig.getName());\n        moduleSettingVO.setStatus(adminConfig.getStatus());\n        moduleSettingVO.setType(adminConfig.getValue());\n        moduleSettingVO.setName(adminConfig.getDescription());\n        return moduleSettingVO;\n    }\n\n\n    @Override\n    public void updateAdminConfig(AdminConfig adminConfig) {\n        saveOrUpdate(adminConfig);\n    }\n\n    @Override\n    public AdminConfig queryFirstConfigByNameAndValue(String name, String value) {\n        return lambdaQuery().eq(AdminConfig::getName, name).eq(AdminConfig::getValue, value).one();\n    }\n\n    @Override\n    public void setMarketing(Integer status) {\n        String name = \\\"marketing\\\";\n        AdminConfig adminConfig = this.lambdaQuery().eq(AdminConfig::getName, name).last(\\\" limit 1\\\").one();\n        if (adminConfig == null) {\n            AdminConfig config = new AdminConfig();\n            config.setName(name);\n            config.setStatus(Objects.equals(1, status) ? 1 : 0);\n            config.setDescription(\\\"\u662f\u5426\u5f00\u542f\u8425\u9500\u6d3b\u52a8\\\");\n            this.save(config);\n        } else {\n            adminConfig.setStatus(Objects.equals(1, status) ? 1 : 0);\n            this.updateById(adminConfig);\n        }\n    }\n\n    @Override\n    public Integer queryMarketing() {\n        String name = \\\"marketing\\\";\n        AdminConfig adminConfig = this.lambdaQuery().eq(AdminConfig::getName, name).last(\\\" limit 1\\\").one();\n        if (adminConfig == null) {\n            adminConfig = new AdminConfig();\n            adminConfig.setName(name);\n            adminConfig.setStatus(1);\n            adminConfig.setDescription(\\\"\u662f\u5426\u5f00\u542f\u8425\u9500\u6d3b\u52a8\\\");\n            this.save(adminConfig);\n        }\n        return adminConfig.getStatus();\n    }\n\n    @Override\n\n\n", "CodeBleu_score": 8.811558815875008}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\tService jxcExamineService;\n\n    /**\n     * \u901a\u8fc7name\u67e5\u8be2\u7cfb\u7edf\u914d\u7f6e\n     *\n     * @param names names\n     * @return adminConfig\n     */\n    @Override\n    public List<AdminConfig> queryConfigListByName(Object... names) {\n        return query().in(\\\"name\\\", names).list();\n    }\n\n    /**\n     * \u8bbe\u7f6e\u4f01\u4e1a\u914d\u7f6e\n     *\n     */\n    @Override\n    public void setAdminConfig(AdminCompanyBO adminCompanyBO) {\n        String companyKey = \\\"companyInfo\\\";\n        AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\\\" limit 1\\\").one();\n        if (adminConfig == null) {\n            adminConfig = new AdminConfig();\n            adminConfig.setName(companyKey);\n            adminConfig.setStatus(1);\n            adminConfig.setDescription(\\\"\u4f01\u4e1aLOGO\u914d\u7f6e\\\");\n        }\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        saveOrUpdate(adminConfig);\n    }\n\n    /**\n     * \u67e5\u8be2\u4f01\u4e1a\u914d\u7f6e\n     *\n     * @return adminCompanyBO\n     */\n    @Override\n    public AdminCompanyBO queryAdminConfig() {\n        String companyKey = \\\"companyInfo\\\";\n        AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\\\" limit 1\\\").one();\n        AdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n        if (adminConfig != null) {\n            adminCompanyBO = JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n        }\n        return adminCompanyBO;\n    }\n\n    /**\n     * \u67e5\u8be2\u6a21\u5757\u8bbe\u7f6e\n     *\n     * @return data\n     */\n    @Override\n    public List<ModuleSettingVO> queryModuleSetting() {\n        List<AdminConfig> adminConfigList = queryConfigListByName((Object[]) AdminModuleEnum.getValues());\n        List<ModuleSettingVO> moduleSettingList = new ArrayList<>();\n        adminConfigList.forEach(adminConfig -> {\n            ModuleSettingVO moduleSettingVO = new ModuleSettingVO();\n            moduleSettingVO.setSettingId(adminConfig.getSettingId());\n            moduleSettingVO.setModule(adminConfig.getName());\n            moduleSettingVO.setStatus(adminConfig.getStatus());\n            moduleSettingVO.setType(adminConfig.getValue());\n            moduleSettingVO.setName(adminConfig.getDescription());\n            moduleSettingList.add(moduleSettingVO);\n        });\n        return moduleSettingList;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u6a21\u5757\u7684\u7981\u7528\u542f\u7528\n     *\n     * @param adminConfig data\n     */\n    @Override\n    public void setModuleSetting(AdminConfig adminConfig) {\n        updateById(adminConfig);\n        //\u67e5\u8be2\u4f01\u4e1a\u7528\u6237\uff0c\u5c06\u4f01\u4e1a\u7528\u6237\u7684\u6743\u9650\u7f13\u5b58\u6e05\u9664\uff0c\u91cd\u65b0\u8ba1\u7b97\n        List<AdminUserVO> userList = adminUserService.queryUserList(null).getRecords();\n        //\u6e05\u9664\u7f13\u5b58\n        adminRoleService.authInvalidate(userList.stream().map(AdminUserVO::getUserId).collect(Collectors.toList()));\n    }\n\n    /**\n     * \u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\n     *\n     * @param stringList data\n     */\n    @Override\n    public void setLogWelcomeSpeech(List<String> stringList) {\n        List<AdminConfig> configList = new ArrayList<>();\n        stringList.forEach(str -> {\n            AdminConfig config = new AdminConfig();\n            config.setName(logConfigName);\n            config.setValue(str);\n            config.setStatus(1);\n            configList.add(config);\n        });\n        QueryWrapper<AdminConfig> queryWrapper = new QueryWrapper<>();\n        queryWrapper.eq(\\\"name\\\", logConfigName);\n        remove(queryWrapper);\n        saveBatch(configList, AdminConst.BATCH_SAVE_SIZE);\n    }\n\n    /**\n     * \u67e5\u8be2\u65e5\u5fd7\u6b22\u8fce\u8bed\n     *\n     * @return data\n     */\n    @Override\n    public List<LogWelcomeSpeechBO> getLogWelcomeSpeechList() {\n        List<AdminConfig> adminConfigList = query().select(\\\"setting_id\\\", \\\"value\\\").eq(\\\"name\\\", logConfigName).list();\n        return adminConfigList.stream().map(adminConfig -> BeanUtil.copyProperties(adminConfig, LogWelcomeSpeechBO.class)).collect(Collectors.toList());\n    }\n\n    /**\n     * \u6839\u636e\u540d\u79f0\u67e5\u8be2\u914d\u7f6e\u4fe1\u606f\n     *\n     * @param name\n     * @return data\n     */\n    @Override\n    public AdminConfig queryConfigByName(String name) {\n        return query().in(\\\"name\\\", name).last(\\\" limit 1\\\").one();\n    }\n\n    /**\n     * \u67e5\u8be2\u547c\u53eb\u4e2d\u5fc3\u8bbe\u7f6e\n     *\n     * @return data\n     */\n    @Override\n    public ModuleSettingVO queryCallModuleSetting() {\n        AdminConfig adminConfig = queryConfigByName(AdminModuleEnum.CALL.getValue());\n        ModuleSettingVO moduleSettingVO = new ModuleSettingVO();\n        moduleSettingVO.setSettingId(adminConfig.getSettingId());\n        moduleSettingVO.setModule(adminConfig.getName());\n        moduleSettingVO.setStatus(adminConfig.getStatus());\n        moduleSettingVO.setType(adminConfig.getValue());\n        moduleSettingVO.setName(adminConfig.getDescription());\n        return moduleSettingVO;\n    }\n\n\n    @Override\n    public void updateAdminConfig(AdminConfig adminConfig) {\n        saveOrUpdate(adminConfig);\n    }\n\n    @Override\n    public AdminConfig queryFirstConfigByNameAndValue(String name, String value) {\n        return lambdaQuery().eq(AdminConfig::getName, name).eq(AdminConfig::getValue, value).one();\n    }\n\n    @Override\n    public void setMarketing(Integer status) {\n        String name = \\\"marketing\\\";\n        AdminConfig adminConfig = this.lambdaQuery().eq(AdminConfig::getName, name).last(\\\" limit 1\\\").one();\n        if (adminConfig == null) {\n            AdminConfig config = new AdminConfig();\n            config.setName(name);\n            config.setStatus(Objects.equals(1, status) ? 1 : 0);\n            config.setDescription(\\\"\u662f\u5426\u5f00\u542f\u8425\u9500\u6d3b\u52a8\\\");\n            this.save(config);\n        } else {\n            adminConfig.setStatus(Objects.equals(1, status) ? 1 : 0);\n            this.updateById(adminConfig);\n        }\n    }\n\n    @Override\n    public Integer queryMarketing() {\n        String name = \\\"marketing\\\";\n        AdminConfig adminConfig = this.lambdaQuery().eq(AdminConfig::getName, name).last(\\\" limit 1\\\").one();\n        if (adminConfig == null) {\n            adminConfig = new AdminConfig();\n            adminConfig.setName(name);\n            adminConfig.setStatus(1);\n            adminConfig.setDescription(\\\"\u662f\u5426\u5f00\u542f\u8425\u9500\u6d3b\u52a8\\\");\n            this.save(adminConfig);\n        }\n        return adminConfig.getStatus();\n    }\n\n    @Override\n\n\n", "CodeBleu_score": 8.811558815875008}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\tService jxcExamineService;\n\n    /**\n     * \u901a\u8fc7name\u67e5\u8be2\u7cfb\u7edf\u914d\u7f6e\n     *\n     * @param names names\n     * @return adminConfig\n     */\n    @Override\n    public List<AdminConfig> queryConfigListByName(Object... names) {\n        return query().in(\\\"name\\\", names).list();\n    }\n\n    /**\n     * \u8bbe\u7f6e\u4f01\u4e1a\u914d\u7f6e\n     *\n     */\n    @Override\n    public void setAdminConfig(AdminCompanyBO adminCompanyBO) {\n        String companyKey = \\\"companyInfo\\\";\n        AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\\\" limit 1\\\").one();\n        if (adminConfig == null) {\n            adminConfig = new AdminConfig();\n            adminConfig.setName(companyKey);\n            adminConfig.setStatus(1);\n            adminConfig.setDescription(\\\"\u4f01\u4e1aLOGO\u914d\u7f6e\\\");\n        }\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        saveOrUpdate(adminConfig);\n    }\n\n    /**\n     * \u67e5\u8be2\u4f01\u4e1a\u914d\u7f6e\n     *\n     * @return adminCompanyBO\n     */\n    @Override\n    public AdminCompanyBO queryAdminConfig() {\n        String companyKey = \\\"companyInfo\\\";\n        AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\\\" limit 1\\\").one();\n        AdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n        if (adminConfig != null) {\n            adminCompanyBO = JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n        }\n        return adminCompanyBO;\n    }\n\n    /**\n     * \u67e5\u8be2\u6a21\u5757\u8bbe\u7f6e\n     *\n     * @return data\n     */\n    @Override\n    public List<ModuleSettingVO> queryModuleSetting() {\n        List<AdminConfig> adminConfigList = queryConfigListByName((Object[]) AdminModuleEnum.getValues());\n        List<ModuleSettingVO> moduleSettingList = new ArrayList<>();\n        adminConfigList.forEach(adminConfig -> {\n            ModuleSettingVO moduleSettingVO = new ModuleSettingVO();\n            moduleSettingVO.setSettingId(adminConfig.getSettingId());\n            moduleSettingVO.setModule(adminConfig.getName());\n            moduleSettingVO.setStatus(adminConfig.getStatus());\n            moduleSettingVO.setType(adminConfig.getValue());\n            moduleSettingVO.setName(adminConfig.getDescription());\n            moduleSettingList.add(moduleSettingVO);\n        });\n        return moduleSettingList;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u6a21\u5757\u7684\u7981\u7528\u542f\u7528\n     *\n     * @param adminConfig data\n     */\n    @Override\n    public void setModuleSetting(AdminConfig adminConfig) {\n        updateById(adminConfig);\n        //\u67e5\u8be2\u4f01\u4e1a\u7528\u6237\uff0c\u5c06\u4f01\u4e1a\u7528\u6237\u7684\u6743\u9650\u7f13\u5b58\u6e05\u9664\uff0c\u91cd\u65b0\u8ba1\u7b97\n        List<AdminUserVO> userList = adminUserService.queryUserList(null).getRecords();\n        //\u6e05\u9664\u7f13\u5b58\n        adminRoleService.authInvalidate(userList.stream().map(AdminUserVO::getUserId).collect(Collectors.toList()));\n    }\n\n    /**\n     * \u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\n     *\n     * @param stringList data\n     */\n    @Override\n    public void setLogWelcomeSpeech(List<String> stringList) {\n        List<AdminConfig> configList = new ArrayList<>();\n        stringList.forEach(str -> {\n            AdminConfig config = new AdminConfig();\n            config.setName(logConfigName);\n            config.setValue(str);\n            config.setStatus(1);\n            configList.add(config);\n        });\n        QueryWrapper<AdminConfig> queryWrapper = new QueryWrapper<>();\n        queryWrapper.eq(\\\"name\\\", logConfigName);\n        remove(queryWrapper);\n        saveBatch(configList, AdminConst.BATCH_SAVE_SIZE);\n    }\n\n    /**\n     * \u67e5\u8be2\u65e5\u5fd7\u6b22\u8fce\u8bed\n     *\n     * @return data\n     */\n    @Override\n    public List<LogWelcomeSpeechBO> getLogWelcomeSpeechList() {\n        List<AdminConfig> adminConfigList = query().select(\\\"setting_id\\\", \\\"value\\\").eq(\\\"name\\\", logConfigName).list();\n        return adminConfigList.stream().map(adminConfig -> BeanUtil.copyProperties(adminConfig, LogWelcomeSpeechBO.class)).collect(Collectors.toList());\n    }\n\n    /**\n     * \u6839\u636e\u540d\u79f0\u67e5\u8be2\u914d\u7f6e\u4fe1\u606f\n     *\n     * @param name\n     * @return data\n     */\n    @Override\n    public AdminConfig queryConfigByName(String name) {\n        return query().in(\\\"name\\\", name).last(\\\" limit 1\\\").one();\n    }\n\n    /**\n     * \u67e5\u8be2\u547c\u53eb\u4e2d\u5fc3\u8bbe\u7f6e\n     *\n     * @return data\n     */\n    @Override\n    public ModuleSettingVO queryCallModuleSetting() {\n        AdminConfig adminConfig = queryConfigByName(AdminModuleEnum.CALL.getValue());\n        ModuleSettingVO moduleSettingVO = new ModuleSettingVO();\n        moduleSettingVO.setSettingId(adminConfig.getSettingId());\n        moduleSettingVO.setModule(adminConfig.getName());\n        moduleSettingVO.setStatus(adminConfig.getStatus());\n        moduleSettingVO.setType(adminConfig.getValue());\n        moduleSettingVO.setName(adminConfig.getDescription());\n        return moduleSettingVO;\n    }\n\n\n    @Override\n    public void updateAdminConfig(AdminConfig adminConfig) {\n        saveOrUpdate(adminConfig);\n    }\n\n    @Override\n    public AdminConfig queryFirstConfigByNameAndValue(String name, String value) {\n        return lambdaQuery().eq(AdminConfig::getName, name).eq(AdminConfig::getValue, value).one();\n    }\n\n    @Override\n    public void setMarketing(Integer status) {\n        String name = \\\"marketing\\\";\n        AdminConfig adminConfig = this.lambdaQuery().eq(AdminConfig::getName, name).last(\\\" limit 1\\\").one();\n        if (adminConfig == null) {\n            AdminConfig config = new AdminConfig();\n            config.setName(name);\n            config.setStatus(Objects.equals(1, status) ? 1 : 0);\n            config.setDescription(\\\"\u662f\u5426\u5f00\u542f\u8425\u9500\u6d3b\u52a8\\\");\n            this.save(config);\n        } else {\n            adminConfig.setStatus(Objects.equals(1, status) ? 1 : 0);\n            this.updateById(adminConfig);\n        }\n    }\n\n    @Override\n    public Integer queryMarketing() {\n        String name = \\\"marketing\\\";\n        AdminConfig adminConfig = this.lambdaQuery().eq(AdminConfig::getName, name).last(\\\" limit 1\\\").one();\n        if (adminConfig == null) {\n            adminConfig = new AdminConfig();\n            adminConfig.setName(name);\n            adminConfig.setStatus(1);\n            adminConfig.setDescription(\\\"\u662f\u5426\u5f00\u542f\u8425\u9500\u6d3b\u52a8\\\");\n            this.save(adminConfig);\n        }\n        return adminConfig.getStatus();\n    }\n\n    @Override\n\n\n", "CodeBleu_score": 8.811558815875008}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\tcopyProperties(adminConfig, LogWelcomeSpeechBO.class)).collect(Collectors.toList());\n    }", "CodeBleu_score": 6.797405239030874}, {"code": "private boolean verifyInitAuth(){\n\tcopyProperties(adminConfig, LogWelcomeSpeechBO.class)).collect(Collectors.toList());\n    }", "CodeBleu_score": 6.797405239030874}, {"code": "private boolean verifyInitAuth(){\n\tcopyProperties(adminConfig, LogWelcomeSpeechBO.class)).collect(Collectors.toList());\n    }", "CodeBleu_score": 6.797405239030874}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\tList<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    this.saveBatch(roleMenuList);\n}", "CodeBleu_score": 56.9935743000498}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t// First delete all the existing role-menu associations of the specified role.\n    remove(new QueryWrapper<AdminRoleMenu>().eq(\"role_id\", roleId));\n    // Then create a list of role-menu associations and save them in batches.\n    List<AdminRoleMenu> list = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        list.add(roleMenu);\n    }\n    saveBatch(list);\n}", "CodeBleu_score": 57.138741563242604}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\tList<AdminRoleMenu> list = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        list.add(roleMenu);\n    }\n    this.saveBatch(list);\n}", "CodeBleu_score": 55.08445689525452}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\t.LoginLog;", "CodeBleu_score": 2.4789535040933925}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t.LoginLog;", "CodeBleu_score": 2.4789535040933925}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t.LoginLog;", "CodeBleu_score": 2.4789535040933925}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t   \\\"      \\\\\"detail\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"keyword\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"ipAddress\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"ip\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"userId\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"long\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"realname\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"keyword\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"createTime\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"date\\\\\",\n\\\" +\n                    \\\"        \\\\\"format\\\\\": \\\\\"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd\\\\\"\n\\\" +\n                    \\\"      }\n\\\" +\n                    \\\"    }", "CodeBleu_score": 7.067231414803335}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t   \\\"      \\\\\"detail\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"keyword\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"ipAddress\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"ip\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"userId\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"long\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"realname\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"keyword\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"createTime\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"date\\\\\",\n\\\" +\n                    \\\"        \\\\\"format\\\\\": \\\\\"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd\\\\\"\n\\\" +\n                    \\\"      }\n\\\" +\n                    \\\"    }", "CodeBleu_score": 7.067231414803335}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t   \\\"      \\\\\"detail\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"keyword\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"ipAddress\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"ip\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"userId\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"long\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"realname\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"keyword\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"createTime\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"date\\\\\",\n\\\" +\n                    \\\"        \\\\\"format\\\\\": \\\\\"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd\\\\\"\n\\\" +\n                    \\\"      }\n\\\" +\n                    \\\"    }", "CodeBleu_score": 7.067231414803335}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\tconst file = fs.createWriteStream(dest);\n  return new Promise((resolve, reject) => {\n    https\n      .get(url, (response) => {\n        response.pipe(file);\n        file.on(\\\"finish\\\", () => {\n          file.close();\n          resolve();\n        });\n      })\n      .on(\\\"error\\\", (err) => {\n        fs.unlink(dest);\n        reject(err);\n      });\n  });\n}", "CodeBleu_score": 61.9478253702484}, {"code": "async function downloadFile(url, dest){\n\treturn new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https.get(url, response => {\n      response.pipe(file);\n      file.on(\\\"finish\\\", () => {\n        file.close(resolve);\n      });\n    }).on(\\\"error\\\", e => {\n      fs.unlink(dest);\n      reject(e);\n    });\n  });\n}", "CodeBleu_score": 54.328810772325774}, {"code": "async function downloadFile(url, dest){\n\tconst file = fs.createWriteStream(dest);\n  const response = await axios.get(url, {\n    responseType: \\\"stream\\\"\n  });\n  response.data.pipe(file);\n  return new Promise((resolve, reject) => {\n    file.on(\\\"finish\\\", () => {\n      file.close(resolve);\n    });\n    file.on(\\\"error\\\", (err) => {\n      fs.unlink(dest);\n      reject(err);\n    });\n  });\n}", "CodeBleu_score": 52.47527143264568}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\tSet<String> moduleSet = Sets.newHashSet();\n    moduleSet.add(module.getId());\n    circularDependencyCheckSet.addAll(moduleSet);\n    return findByIdIn(Lists.newArrayList(moduleSet))\n            .onErrorContinue((e, i) -> log.warn(\"get dependent modules on error continue , {}\", e.getMessage()))\n            .expandDeep(m -> getDependentModules(m, circularDependencyCheckSet))\n            .filter(m -> !circularDependencyCheckSet.contains(m.getId()));\n}", "CodeBleu_score": 68.61612660987674}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\tMap<String, Object> dsl = module.getEditingApplicationDSL();\n    Set<String> moduleSet = getDependentModulesFromDsl(dsl);\n    circularDependencyCheckSet.addAll(moduleSet);\n    return findByIdIn(Lists.newArrayList(moduleSet))\n            .onErrorContinue((e, i) -> log.warn(\"get dependent modules on error continue , {}\", e.getMessage()))\n            .expandDeep(module -> getDependentModules(module, circularDependencyCheckSet))\n            .collectList();\n}", "CodeBleu_score": 66.63235859280185}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\tif (circularDependencyCheckSet.contains(module.getId())) {\n            return Flux.empty();\n        }\n\n        Map<String, Object> dsl = module.getEditingApplicationDSL();\n        Set<String> moduleSet = getDependentModulesFromDsl(dsl);\n        circularDependencyCheckSet.addAll(moduleSet);\n\n        return findByIdIn(Lists.newArrayList(moduleSet))\n                .onErrorContinue((e, i) -> log.warn(\"get dependent modules on error continue , {}\", e.getMessage()))\n                .expandDeep(module -> getDependentModules(module, circularDependencyCheckSet));\n    }", "CodeBleu_score": 66.22552825022206}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tif (map == null) {\n        return;\n    }\n    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        Object value = entry.getValue();\n        if (value instanceof Map<?, ?>) {\n            doGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n        } else if (value instanceof List<?>) {\n            doGetDependentModules((List<?>) value, dependentModuleIds);\n        } else if (entry.getKey().equals(\"type\") && value instanceof String) {\n            String type = (String) value;\n            if (type.equals(\"module\")) {\n                Object appId = map.get(\"appId\");\n                if (appId instanceof String) {\n                    String appIdString = (String) appId;\n                    if (StringUtils.isNotBlank(appIdString)) {\n                        dependentModuleIds.add(appIdString);\n                    }\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 44.4271278780107}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tif (map == null) {\n        return;\n    }\n    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        Object value = entry.getValue();\n        if (value instanceof Map<?, ?>) {\n            Map<?, ?> mapValue = (Map<?, ?>) value;\n            Object compType = mapValue.get(\"compType\");\n            if (compType instanceof String && StringUtils.isNotBlank((String) compType) && \"module\".equals((String) compType)) {\n                Object moduleId = mapValue.get(\"moduleId\");\n                if (moduleId instanceof String && StringUtils.isNotBlank((String) moduleId)) {\n                    dependentModuleIds.add((String) moduleId);\n                }\n            }\n            doGetDependentModules(mapValue, dependentModuleIds);\n        } else if (value instanceof List<?>) {\n            List<?> listValue = (List<?>) value;\n            for (Object listEntry : listValue) {\n                if (listEntry instanceof Map<?, ?>) {\n                    Map<?, ?> mapValue = (Map<?, ?>) listEntry;\n                    doGetDependentModules(mapValue, dependentModuleIds);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 43.31157634973048}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tfor (Map.Entry<?, ?> entry : map.entrySet()) {\n        Object value = entry.getValue();\n        if (value instanceof Map<?, ?>) {\n            doGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n        } else if (value instanceof List<?>) {\n            for (Object item : (List<?>) value) {\n                if (item instanceof Map<?, ?>) {\n                    doGetDependentModules((Map<?, ?>) item, dependentModuleIds);\n                }\n            }\n        } else if (entry.getKey().equals(\"comp\") && value instanceof Map<?, ?>) {\n            Object comp = ((Map<?, ?>) value).get(\"type\");\n            if (comp instanceof String && StringUtils.isNotBlank((String) comp) && comp.equals(\"module\")) {\n                Object moduleId = ((Map<?, ?>) value).get(\"id\");\n                if (moduleId instanceof String && StringUtils.isNotBlank((String) moduleId)) {\n                    dependentModuleIds.add((String) moduleId);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 42.02237405746757}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\tBufferedImage image = ImageIO.read(new ByteArrayInputStream(dataBuffer.asByteBuffer().array()));\n     if (image == null) {\n         DataBufferUtils.release(dataBuffer);\n         throw new IOException(\"Failed to parse image\");\n     }\n     if (createThumbnail) {\n         int thumbNailDimension = thumbNailPhotoDimension.get();\n         image = resizeImage(image, thumbNailDimension, thumbNailDimension);\n     }\n     ByteArrayOutputStream baos = new ByteArrayOutputStream();\n     ImageIO.write(image, \"jpg\", baos);\n     DataBufferUtils.release(dataBuffer);\n     return new Asset(baos.toByteArray(), srcContentType.equals(MediaType.IMAGE_PNG) ? MediaType.IMAGE_PNG : MediaType.IMAGE_JPEG);\n }", "CodeBleu_score": 41.87081685921136}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\tfinal BufferedImage image = ImageIO.read(new ByteArrayInputStream(DataBufferUtils.toByteArray(dataBuffer)));\n        DataBufferUtils.release(dataBuffer);\n\n        if (createThumbnail) {\n            final BufferedImage thumbnail = new BufferedImage(thumbNailPhotoDimension.get(), thumbNailPhotoDimension.get(), BufferedImage.TYPE_INT_ARGB);\n            final Graphics2D g = thumbnail.createGraphics();\n            g.drawImage(image, 0, 0, thumbNailPhotoDimension.get(), thumbNailPhotoDimension.get(), null);\n            g.dispose();\n            image.flush();\n            image.dispose();\n\n            final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            ImageIO.write(thumbnail, \"jpg\", baos);\n            baos.flush();\n            baos.close();\n\n            return new Asset(baos.toByteArray(), MediaType.IMAGE_JPEG);\n        } else {\n            final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            ImageIO.write(image, srcContentType.getSubtype(), baos);\n            baos.flush();\n            baos.close();\n\n            return new Asset(baos.toByteArray(), srcContentType);\n        }\n    }", "CodeBleu_score": 35.236028511556555}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t// We need to copy the data buffer because the one passed in is backed by a ByteBuffer that is reused by the file uploader.\n     DataBuffer dataBufferCopy = DefaultDataBufferFactory.sharedInstance.allocateBuffer(dataBuffer.readableByteCount());\n     dataBufferCopy.write(dataBuffer);\n     DataBufferUtils.release(dataBuffer);\n\n     BufferedImage image = ImageIO.read(new ByteArrayInputStream(dataBufferCopy.asByteBuffer().array()));\n     DataBufferUtils.release(dataBufferCopy);\n\n     Asset asset = new Asset();\n     asset.setContentType(srcContentType.getSubtype());\n     asset.setImage(image);\n\n     if (createThumbnail) {\n         Image thumbnail = image.getScaledInstance(thumbNailPhotoDimension.get(), thumbNailPhotoDimension.get(), Image.SCALE_SMOOTH);\n         asset.setThumbnail(thumbnail);\n     }\n\n     return asset;\n }", "CodeBleu_score": 40.10692912655094}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn getById(assetId)\n            .flatMap(asset -> {\n                ServerHttpResponse response = exchange.getResponse();\n                response.setStatusCode(HttpStatus.OK);\n                if (asset.getContentType() != null) {\n                    response.getHeaders().set(HttpHeaders.CONTENT_TYPE, asset.getContentType().toString());\n                }\n                DataBuffer buffer = exchange.getResponse().bufferFactory().wrap(asset.getData());\n                return response.writeWith(Flux.just(buffer));\n            });\n}", "CodeBleu_score": 62.70124808255506}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn getById(assetId)\n            .map(asset -> {\n                exchange.getResponse().setStatusCode(HttpStatus.OK);\n                if (asset.getContentType() != null) {\n                    exchange.getResponse().getHeaders().set(HttpHeaders.CONTENT_TYPE, asset.getContentType().toString());\n                }\n                return asset;\n            })\n            .flatMap(asset -> {\n                ServerHttpResponse response = exchange.getResponse();\n                DataBuffer buffer = response.bufferFactory().wrap(asset.getData());\n                return response.writeWith(Flux.just(buffer));\n            });\n}", "CodeBleu_score": 52.23100474980561}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn getById(assetId)\n            .flatMap(asset -> {\n                ServerHttpResponse response = exchange.getResponse();\n                response.setStatusCode(HttpStatus.OK);\n                if (asset.getContentType() != null) {\n                    response.getHeaders().setContentType(asset.getContentType());\n                }\n                DataBuffer dataBuffer = response.bufferFactory().wrap(asset.getData());\n                return response.writeWith(Flux.just(dataBuffer));\n            });\n}", "CodeBleu_score": 59.84654882754478}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\tif (commonConfig.getWorkspaceMode() == WorkspaceMode.SAAS) {\n        return Flux.empty();\n    }\n    return organizationService.getAllOrganizations()\n            .flatMapIterable(organization ->\n                    organization.getAuthConfigs()\n                            .stream()\n                            .map(abstractAuthConfig -> new FindAuthConfig(abstractAuthConfig, organization))\n                            .collect(Collectors.toList())\n            );\n}", "CodeBleu_score": 63.82472192546249}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\tif (commonConfig.getWorkspaceMode() != WorkspaceMode.ENTERPRISE) {\n    return Flux.empty();\n  }\n\n  return organizationService.getAllEnterpriseOrganizations()\n      .flatMapIterable(organization ->\n          organization.getAuthConfigs()\n              .stream()\n              .map(abstractAuthConfig -> new FindAuthConfig(abstractAuthConfig, organization))\n              .collect(Collectors.toList())\n      );\n}", "CodeBleu_score": 57.67361834987042}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\treturn organizationService.getAllOrganizations()\n            .flatMapIterable(organization ->\n                    organization.getAuthConfigs()\n                            .stream()\n                            .map(abstractAuthConfig -> new FindAuthConfig(abstractAuthConfig, organization))\n                            .collect(Collectors.toList())\n            )\n            .filter(findAuthConfig -> findAuthConfig.authConfig().getWorkspaceMode() == WorkspaceMode.ENTERPRISE);\n}", "CodeBleu_score": 51.93329631102348}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\tSpringDataMongoV3Driver driver = SpringDataMongoV3Driver.withDefaultLock(mongoTemplate.getConverter(), mongoTemplate.getCollection(\"mongockchangeLog\"));\n    driver.setWriteConcern(WriteConcern.MAJORITY);\n    driver.setReadConcern(ReadConcern.MAJORITY);\n    driver.setReadPreference(ReadPreference.primary());\n    MongockSpring5.MongockApplicationRunner mongockApplicationRunner = MongockSpring5.builder()\n            .setDriver(driver)\n            .addChangeLogsScanPackage(\"com.openblocks.infra.migrations\")\n            .setApplicationContext(springContext)\n            .buildApplicationRunner();\n    return mongockApplicationRunner;\n}", "CodeBleu_score": 50.22667601198659}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\tSpringDataMongoV3Driver driver = SpringDataMongoV3Driver.withDefaultLock(mongoTemplate);\n    driver.setWriteConcern(WriteConcern.MAJORITY);\n    driver.setReadConcern(ReadConcern.MAJORITY);\n    driver.setReadPreference(ReadPreference.primary());\n\n    MongockSpring5.MongockApplicationRunner mongockApplicationRunner = MongockSpring5.builder()\n            .setDriver(driver)\n            .addChangeLogsScanPackage(\"com.openblocks.infra.migration\")\n            .setSpringContext(springContext)\n            .buildApplicationRunner();\n\n    return mongockApplicationRunner;\n}", "CodeBleu_score": 54.04127290111377}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\tSpringDataMongoV3Driver driver = SpringDataMongoV3Driver.withDefaultLock(mongoTemplate);\n    driver.setWriteConcern(WriteConcern.MAJORITY);\n    driver.setReadConcern(ReadConcern.MAJORITY);\n    driver.setReadPreference(ReadPreference.primary());\n\n    MongockSpring5.MongockApplicationRunner runner = MongockSpring5.builder()\n            .setDriver(driver)\n            .addChangeLogsScanPackage(\"com.openblocks.infra.migration\")\n            .setSpringContext(springContext)\n            .buildApplicationRunner();\n\n    return runner;\n}", "CodeBleu_score": 55.021154256272695}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\tReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        template.setReadPreference(ReadPreference.secondaryPreferred());\n        return template;\n    }", "CodeBleu_score": 77.95915380666187}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\treturn new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter) {\n            @Override\n            protected <T> ReactiveMongoCollection<T> getCollection(Class<T> domainType) {\n                return super.getCollection(domainType).withReadPreference(ReadPreference.secondaryPreferred());\n            }\n        };\n    }", "CodeBleu_score": 38.58977762374652}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\tReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory,\n                mappingMongoConverter);\n        reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return reactiveMongoTemplate;\n    }", "CodeBleu_score": 74.88761994472341}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn libraryQueryRecordService.getLatestRecordByLibraryQueryId(libraryQueryId)\n            .map(LibraryQueryRecord::getQuery)\n            .switchIfEmpty(getById(libraryQueryId)\n                    .map(LibraryQuery::getQuery))\n            .map(BaseQuery::getDSL);\n}", "CodeBleu_score": 69.42065193065429}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn libraryQueryRecordService.getLatestRecordByLibraryQueryId(libraryQueryId)\n            .map(LibraryQueryRecord::getQuery)\n            .flatMap(baseQuery -> baseQuery.getDSL(baseQuery.getDSLClass()))\n            .switchIfEmpty(getById(libraryQueryId)\n                    .map(LibraryQuery::getQuery)\n                    .flatMap(baseQuery -> baseQuery.getDSL(baseQuery.getDSLClass())));\n}", "CodeBleu_score": 60.60016683383075}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn getLiveBaseQueryByLibraryQueryId(libraryQueryId)\n            .map(BaseQuery::getDSL)\n            .switchIfEmpty(getById(libraryQueryId)\n                    .map(LibraryQuery::getQuery)\n                    .map(BaseQuery::getDSL));\n}", "CodeBleu_score": 58.97815064744882}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\tQueryTimeoutUtils.QueryTimeoutConfig timeoutConfig = QueryTimeoutUtils.parseTimeoutConfig(timeoutStr);\n        Duration timeoutDuration = timeoutConfig.getTimeoutDuration();\n\n        return Mono.defer(() -> {\n            DatasourceConnectionHolder connectionHolder = datasourceConnectionPool.getConnection(datasource);\n            if (connectionHolder == null) {\n                return Mono.error(ofException(QUERY_EXECUTION_ERROR, \"No connection found for datasource: \" + datasource.getName()));\n            }\n\n            if (connectionHolder.isLocal()) {\n                return executeLocalQuery(datasource, queryConfig, requestParams, timeoutDuration, queryVisitorContext, connectionHolder);\n            } else {\n                return executeRemoteQuery(datasource, queryConfig, requestParams, timeoutDuration, queryVisitorContext, connectionHolder);\n            }\n        });\n    }", "CodeBleu_score": 41.10790952627062}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\tif (datasource == null) {\n            return Mono.error(ofException(QUERY_EXECUTION_ERROR, \"Datasource is null\"));\n        }\n\n        if (queryConfig == null) {\n            return Mono.error(ofException(QUERY_EXECUTION_ERROR, \"Query config is null\"));\n        }\n\n        if (requestParams == null) {\n            return Mono.error(ofException(QUERY_EXECUTION_ERROR, \"Request params is null\"));\n        }\n\n        if (timeoutStr == null) {\n            return Mono.error(ofException(QUERY_EXECUTION_ERROR, \"Timeout is null\"));\n        }\n\n        if (queryVisitorContext == null) {\n            return Mono.error(ofException(QUERY_EXECUTION_ERROR, \"Query visitor context is null\"));\n        }\n\n        QueryExecutionContext queryExecutionContext = new QueryExecutionContext(datasource, queryConfig, requestParams, timeoutStr, queryVisitorContext);\n\n        if (queryExecutionContext.getDatasource().getDatasourceType() == Datasource.DatasourceType.PLUGIN) {\n            return executePluginQuery(queryExecutionContext);\n        }\n\n        return executeLocalQuery(queryExecutionContext);\n    }", "CodeBleu_score": 38.03297413359971}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t// Get the datasource connection\n        DatasourceConnectionHolder datasourceConnectionHolder = datasourceConnectionPool.getDatasourceConnection(datasource);\n        // Get the timeout duration\n        Duration timeout = QueryTimeoutUtils.getTimeoutDuration(timeoutStr);\n        // Execute the query\n        return Mono.defer(() -> {\n            if (datasourceConnectionHolder.getDatasourceType().equals(DatasourceConnectionHolder.DATASOURCE_TYPE_JAVA)) {\n                // Execute query locally\n                return executeQueryLocally(datasourceConnectionHolder, queryConfig, requestParams, timeout, queryVisitorContext);\n            } else {\n                // Execute query remotely\n                return executeQueryRemotely(datasourceConnectionHolder, queryConfig, requestParams, timeout, queryVisitorContext);\n            }\n        }).timeout(timeout).onErrorMap(TimeoutException.class, e -> ofException(QUERY_EXECUTION_TIMEOUT, e));\n    }", "CodeBleu_score": 39.39200284978911}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\tQueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n    return datasourceConnectionPool.acquire(datasource)\n            .flatMap(connectionHolder -> {\n                QueryExecutor queryExecutor = QueryExecutorFactory.getQueryExecutor(datasource.getType());\n                return queryExecutor.execute(queryExecutionContext, connectionHolder)\n                        .onErrorResume(exception -> Mono.just(QueryExecutionResult.error(exception)));\n            });\n}", "CodeBleu_score": 46.21558492637023}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\treturn Mono.defer(() -> {\n                    QueryExecutionContext queryExecutionContext = new QueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n                    return datasourceConnectionPool.acquireConnection(datasource)\n                            .map(datasourceConnectionHolder -> {\n                                DatasourcePluginClient pluginClient = datasourceMetaInfoService.getDatasourcePluginClient(datasource.getType());\n                                return pluginClient.executeQuery(datasourceConnectionHolder.getConnection(), queryExecutionContext);\n                            })\n                            .onErrorResume(exception -> Mono.just(QueryExecutionResult.error(ofException(QUERY_EXECUTION_ERROR, \"QUERY_EXECUTION_ERROR\", exception.getMessage()))));\n                });\n    }", "CodeBleu_score": 46.856099551270304}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\tQueryExecutionContext queryExecutionContext = new QueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n\n        return datasourceConnectionPool.acquireConnection(datasource)\n                .flatMap(connection -> {\n                    DatasourceQueryExecutor queryExecutor = queryExecutorRegistry.getExecutor(datasource.getType());\n\n                    return queryExecutor.execute(connection, queryExecutionContext)\n                            .onErrorResume(exception -> {\n                                log.error(\"query execution error\", exception);\n                                return Mono.just(QueryExecutionResult.error(ofException(QUERY_EXECUTION_ERROR, \"QUERY_EXECUTION_ERROR\", exception.getMessage())));\n                            });\n                });\n    }", "CodeBleu_score": 46.03561913773967}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (StringUtils.isBlank(timeoutStr)) {\n        return DEFAULT_QUERY_TIMEOUT_MILLIS;\n    }\n\n    Pair<Integer, String> parsedTimeout = parseQueryTimeout(timeoutStr);\n    int timeout = parsedTimeout.getLeft();\n    String unit = parsedTimeout.getRight();\n\n    if (timeout <= 0) {\n        throw new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid timeout value: \" + timeoutStr);\n    }\n\n    if (timeout > MAX_QUERY_TIMEOUT_SECONDS) {\n        throw new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"Timeout value exceeds maximum allowed value of \" + MAX_QUERY_TIMEOUT_SECONDS + \" seconds.\");\n    }\n\n    return convertToMillis(timeout, unit);\n}", "CodeBleu_score": 41.41954130488271}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (StringUtils.isBlank(timeoutStr)) {\n        return DEFAULT_QUERY_TIMEOUT_MILLIS;\n    }\n\n    Pair<Long, String> numericValueAndUnit = extractNumericValueAndUnit(timeoutStr);\n    long value = numericValueAndUnit.getLeft();\n    String unit = numericValueAndUnit.getRight();\n\n    if (value <= 0) {\n        throw new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout value: \" + timeoutStr);\n    }\n\n    if (StringUtils.isBlank(unit)) {\n        unit = \"ms\";\n    }\n\n    long timeoutMs = convertToMs(value, unit);\n\n    if (timeoutMs > MAX_QUERY_TIMEOUT_SECONDS * 1000) {\n        throw new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"Query timeout must be less than \" + MAX_QUERY_TIMEOUT_SECONDS + \" seconds\");\n    }\n\n    return (int) timeoutMs;\n}", "CodeBleu_score": 46.51844601976629}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (StringUtils.isBlank(timeoutStr)) {\n        return DEFAULT_QUERY_TIMEOUT_MILLIS;\n    }\n\n    Pair<Integer, String> parsedTimeout = parseQueryTimeout(timeoutStr);\n\n    int timeoutMs = convertTimeoutToMs(parsedTimeout.getLeft(), parsedTimeout.getRight());\n\n    if (timeoutMs > MAX_QUERY_TIMEOUT_SECONDS * 1000) {\n        throw new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"Query timeout must not exceed 120 seconds\");\n    }\n\n    return timeoutMs;\n}", "CodeBleu_score": 29.261013075605135}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\tList<String> datasourceIds = application.getLiveApplicationDsl().entrySet().stream()\n                .filter(entry -> entry.getValue() instanceof Map)\n                .map(entry -> (Map<String, Object>) entry.getValue())\n                .filter(map -> map.containsKey(\"datasourceId\"))\n                .map(map -> (String) map.get(\"datasourceId\"))\n                .collect(Collectors.toList());\n        if (datasourceIds.isEmpty()) {\n            return Mono.error(ofError(TEMPLATE_NOT_CORRECT, \"TEMPLATE_NOT_CORRECT\"));\n        }\n        return Flux.fromIterable(datasourceIds)\n                .flatMap(datasourceId -> datasourceService.getById(datasourceId)\n                        .switchIfEmpty(deferredError(TEMPLATE_NOT_CORRECT, \"TEMPLATE_NOT_CORRECT\"))\n                        .flatMap(datasource -> {\n                            if (isNull(datasource.getCreationSource()) || datasource.getCreationSource() != DatasourceCreationSource.TEMPLATE) {\n                                return Mono.error(ofError(TEMPLATE_NOT_CORRECT, \"TEMPLATE_NOT_CORRECT\"));\n                            }\n                            Datasource datasourceCopy = Datasource.builder()\n                                    .name(datasource.getName())\n                                    .creationSource(DatasourceCreationSource.TEMPLATE)\n                                    .organizationId(currentOrganizationId)\n                                    .datasourceId(RandomStringUtils.random(RANDOM_LENGTH, true, true))\n                                    .datasourceType(datasource.getDatasourceType())\n                                    .datasourceConfiguration(datasource.getDatasourceConfiguration())\n                                    .build();\n                            return datasourceService.create(datasourceCopy, visitorId)\n                                    .map(datasourceCopy1 -> Pair.of(datasource.getDatasourceId(), datasourceCopy1.getDatasourceId()));\n                        }))\n                .collectList();\n    }", "CodeBleu_score": 44.744901385948054}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\tList<String> datasourceIds = ApplicationQuery.getDatasourceIds(application);\n        if (isNull(datasourceIds) || datasourceIds.isEmpty()) {\n            return Mono.error(ofError(TEMPLATE_NOT_CORRECT, \"TEMPLATE_NOT_CORRECT\"));\n        }\n        return Flux.fromIterable(datasourceIds).flatMap(datasourceId -> {\n            Datasource datasource = Datasource.builder().creationSource(DatasourceCreationSource.TEMPLATE).build();\n            return datasourceService.create(datasource, currentOrganizationId, visitorId)\n                    .map(createdDatasource -> Pair.of(datasourceId, createdDatasource.getId()));\n        }).collectList();\n    }", "CodeBleu_score": 47.48555025161736}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn Mono.just(application.getLiveApplicationDsl())\n                .map(JsonUtils::fromJsonMap)\n                .flatMap(applicationDsl -> {\n                    List<String> datasourceIds = applicationDsl.values().stream()\n                            .filter(value -> value instanceof Map)\n                            .map(value -> (Map<String, Object>) value)\n                            .filter(value -> value.containsKey(\"datasourceId\"))\n                            .map(value -> (String) value.get(\"datasourceId\"))\n                            .collect(Collectors.toList());\n                    if (isNull(datasourceIds) || datasourceIds.isEmpty()) {\n                        return ofError(TEMPLATE_NOT_CORRECT, \"TEMPLATE_NOT_CORRECT\");\n                    }\n                    return Flux.fromIterable(datasourceIds)\n                            .flatMap(datasourceId -> datasourceService.getById(datasourceId)\n                                    .switchIfEmpty(deferredError(TEMPLATE_NOT_CORRECT, \"TEMPLATE_NOT_CORRECT\"))\n                                    .flatMap(datasource -> {\n                                        DatasourceCreationSource datasourceCreationSource = DatasourceCreationSource.builder()\n                                                .name(datasource.getName())\n                                                .description(datasource.getDescription())\n                                                .datasourceType(datasource.getDatasourceType())\n                                                .datasourceConfiguration(datasource.getDatasourceConfiguration())\n                                                .build();\n                                        return datasourceService.create(currentOrganizationId, datasourceCreationSource, visitorId)\n                                                .map(createdDatasource -> Pair.of(datasourceId, createdDatasource.getId()));\n                                    }))\n                            .collectList();\n                });\n    }", "CodeBleu_score": 48.988353378048586}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.getById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.getDatasourceCreationSource() == DatasourceCreationSource.SYSTEM_STATIC) {\n                    return Mono.just(datasourceId);\n                } else if (datasource.getDatasourceCreationSource() == DatasourceCreationSource.LEGACY_QUICK_REST_API\n                        || datasource.getDatasourceCreationSource() == DatasourceCreationSource.LEGACY_OPENBLOCKS_API) {\n                    return Mono.just(datasourceId);\n                } else {\n                    Datasource copiedDatasource = Datasource.builder()\n                            .name(datasource.getName() + \" - \" + RandomStringUtils.randomAlphanumeric(RANDOM_LENGTH))\n                            .organizationId(organizationId)\n                            .datasourceCreationSource(DatasourceCreationSource.TEMPLATE)\n                            .datasourceType(datasource.getDatasourceType())\n                            .datasourceConfiguration(datasource.getDatasourceConfiguration())\n                            .build();\n                    return datasourceService.create(copiedDatasource, visitorId)\n                            .map(Datasource::getId);\n                }\n            });\n}", "CodeBleu_score": 45.37278651791452}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.getById(datasourceId)\n            .switchIfEmpty(deferredError(TEMPLATE_NOT_CORRECT, \"TEMPLATE_NOT_CORRECT\"))\n            .flatMap(datasource -> {\n                if (datasource.getDatasourceCreationSource() == DatasourceCreationSource.SYSTEM_STATIC) {\n                    return Mono.just(datasourceId);\n                } else if (datasource.getDatasourceCreationSource() == DatasourceCreationSource.QUICK_REST_API || datasource.getDatasourceCreationSource() == DatasourceCreationSource.OPENBLOCKS_API) {\n                    return Mono.just(datasource.getDatasourceId());\n                } else {\n                    Datasource copiedDatasource = Datasource.builder()\n                            .organizationId(organizationId)\n                            .datasourceId(RandomStringUtils.random(RANDOM_LENGTH, true, true))\n                            .datasourceName(datasource.getDatasourceName())\n                            .datasourceCreationSource(datasource.getDatasourceCreationSource())\n                            .datasourceConfig(datasource.getDatasourceConfig())\n                            .build();\n                    return datasourceService.create(copiedDatasource, visitorId)\n                            .map(Datasource::getDatasourceId);\n                }\n            });\n}", "CodeBleu_score": 44.74430761042405}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.getById(datasourceId)\n            .switchIfEmpty(deferredError(TEMPLATE_NOT_CORRECT, \"TEMPLATE_NOT_CORRECT\"))\n            .flatMap(datasource -> {\n                if (datasource.getCreationSource() == DatasourceCreationSource.SYSTEM_STATIC) {\n                    return Mono.just(datasourceId);\n                }\n                if (datasource.getCreationSource() == DatasourceCreationSource.QUICK_REST_API) {\n                    return Mono.just(datasource.getId());\n                }\n                if (datasource.getCreationSource() == DatasourceCreationSource.OPENBLOCKS_API) {\n                    return Mono.just(datasource.getId());\n                }\n                return datasourceService.create(\n                        Datasource.builder()\n                                .organizationId(organizationId)\n                                .creationSource(DatasourceCreationSource.USER_CREATED)\n                                .name(datasource.getName())\n                                .description(datasource.getDescription())\n                                .type(datasource.getType())\n                                .config(datasource.getConfig())\n                                .build(),\n                        visitorId);\n            });\n}", "CodeBleu_score": 51.03876326165123}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\treturn assetService.upload(filePart, avatarMaxSizeInKb.get())\n            .flatMap(asset -> {\n                if (user.getAvatar() != null) {\n                    return assetService.delete(user.getAvatar().getId())\n                            .thenReturn(asset);\n                }\n                return Mono.just(asset);\n            })\n            .flatMap(asset -> {\n                user.setAvatar(asset);\n                return repository.save(user);\n            })\n            .map(user1 -> true);\n}", "CodeBleu_score": 31.787868217522846}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\treturn assetService.upload(filePart, avatarMaxSizeInKb.get())\n             .flatMap(asset -> {\n                 if (user.getAvatar() != null) {\n                     return assetService.delete(user.getAvatar().getId())\n                             .then(Mono.just(asset));\n                 } else {\n                     return Mono.just(asset);\n                 }\n             })\n             .map(asset -> {\n                 user.setAvatar(asset);\n                 return user;\n             })\n             .flatMap(this::update);\n }", "CodeBleu_score": 33.28681073872275}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\treturn assetService.uploadAsset(filePart, user.getId(), Asset.Type.AVATAR, avatarMaxSizeInKb.get())\n            .flatMap(asset -> {\n                if (user.getAvatar() != null) {\n                    return assetService.deleteAsset(user.getAvatar().getId())\n                            .then(Mono.just(asset));\n                }\n                return Mono.just(asset);\n            })\n            .flatMap(asset -> repository.save(user.setAvatar(asset)))\n            .map(it -> true);\n}", "CodeBleu_score": 32.2303110947771}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tUser user = new User();\n    user.setName(authUser.getName());\n    user.setState(UserState.NEW);\n    user.setEnabled(true);\n    user.setAvatar(authUser.getAvatar());\n    user.setConnections(authUser.getConnections());\n    if (authUser.getSource().equals(AuthSourceConstants.EMAIL)) {\n        FormAuthRequestContext authContext = (FormAuthRequestContext) authUser.getAuthContext();\n        user.setPassword(encryptionService.encrypt(authContext.getPassword()));\n    }\n    return create(user);\n}", "CodeBleu_score": 44.062519633448616}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tif (authUser == null) {\n        return Mono.error(new BizException(BizError.INVALID_PARAMETER, \"INVALID_PARAMETER\", FieldName.AUTH_USER));\n    }\n\n    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(UserState.NEW);\n    user.setEnabled(true);\n    user.setAvatar(authUser.getAvatar());\n    user.setConnections(newHashSet(authUser.getConnections()));\n    user.setGroups(newHashSet());\n    user.setOrgs(newHashSet());\n\n    if (AuthSourceConstants.EMAIL.equals(authUser.getSource())) {\n        user.setPassword(encryptionService.encrypt(authUser.getPassword()));\n    }\n\n    return repository.save(user);\n}", "CodeBleu_score": 44.21640916240914}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tUser newUser = new User();\n    newUser.setName(authUser.getName());\n    newUser.setState(UserState.NEW);\n    newUser.setEnabled(true);\n    newUser.setAvatar(authUser.getAvatar());\n    newUser.setConnections(new HashSet<>(Collections.singletonList(new Connection(authUser.getSource(), authUser.getUid(), authUser.getRawId()))));\n    if (authUser.getSource().equals(AuthSourceConstants.EMAIL) && authUser.getAuthContext() != null) {\n        String password = authUser.getAuthContext().getPassword();\n        if (password != null) {\n            newUser.setPassword(encryptionService.encrypt(password));\n        }\n    }\n    return create(newUser);\n}", "CodeBleu_score": 55.76040486459936}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\tjavax.annotation.PostConstruct;\n", "CodeBleu_score": 5.152773031787983}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\tjavax.annotation.PostConstruct;\n", "CodeBleu_score": 5.152773031787983}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\tjavax.annotation.PostConstruct;\n", "CodeBleu_score": 5.152773031787983}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\tedUserInfo;", "CodeBleu_score": 6.132173832970684}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\tedUserInfo;", "CodeBleu_score": 6.132173832970684}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\tedUserInfo;", "CodeBleu_score": 6.132173832970684}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t> createNewUserByAuthUser(AuthUser authUser) {\n        User newUser = new User();\n        newUser.setName(authUser.getUsername());\n        newUser.setState(UserState.ACTIVATED);\n        newUser.setIsEnabled(true);\n        newUser.setTpAvatarLink(authUser.getAvatar());\n        if (AuthSourceConstants.EMAIL.equals(authUser.getSource())\n                && authUser.getAuthContext() instanceof FormAuthRequestContext formAuthRequestContext) {\n            newUser.setPassword(encryptionService.encryptPassword(formAuthRequestContext.getPassword()));\n        }\n        Set<Connection> connections = newHashSet();\n        Connection connection = authUser.toAuthConnection();\n        connections.add(connection);\n        newUser.setConnections(connections);\n        newUser.setIsNewUser(true);\n        return create(newUser);\n    }\n\n    @Override\n    public Mono<Void> getUserAvatar(ServerWebExchange exchange, String userId) {\n        return findById(userId)\n                .flatMap(user -> assetService.makeImageResponse(exchange, user.getAvatar()));\n    }\n\n    @Override\n    public Mono<Boolean> bindEmail(User user, String email) {\n        Connection connection = Connection.builder()\n                .source(AuthSourceConstants.EMAIL)\n                .name(email)\n                .rawId(email)\n                .build();\n        user.getConnections().add(connection);\n        return repository.save(user)\n                .then(Mono.just(true))\n                .onErrorResume(throwable -> {\n                    if (throwable instanceof DuplicateKeyException) {\n                        return Mono.error(new BizException(BizError.ALREADY_BIND, \\\"ALREADY_BIND\\\", email, \\\"\\\"));\n                    }\n                    return Mono.error(throwable);\n                });\n    }\n\n    @Override\n    public Mono<Boolean> addNewConnection(String userId, Connection connection) {\n        return findById(userId)\n                .doOnNext(user -> user.getConnections().add(connection))\n                .flatMap(repository::save)\n                .then(Mono.just(true));\n    }\n\n    @Override\n    public Mono<Void> deleteProfilePhoto(User visitor) {\n        String userAvatar = visitor.getAvatar();\n        visitor.setAvatar(null);\n        return repository.save(visitor).thenReturn(userAvatar)\n                .flatMap(assetService::remove);\n    }\n\n    @Override\n    public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword) {\n        return findById(userId)\n                .<User> handle((user, sink) -> {\n                    String password = user.getPassword();\n                    if (StringUtils.isBlank(password)) {\n                        sink.error(ofException(BizError.INVALID_PASSWORD, \\\"INVALID_PASSWORD\\\"));\n                        return;\n                    }\n                    String originalEncryptPassword = user.getPassword();\n                    if (!encryptionService.matchPassword(oldPassword, originalEncryptPassword)) {\n                        sink.error(ofException(BizError.INVALID_PASSWORD, \\\"INVALID_PASSWORD\\\"));\n                        return;\n                    }\n                    user.setPassword(encryptionService.encryptPassword(newPassword));\n                    sink.next(user);\n                })\n                .flatMap(repository::save)\n                .thenReturn(true);\n    }\n\n    @Override\n    public Mono<String> resetPassword(String userId) {\n        return findById(userId)\n                .flatMap(user -> {\n                    String password = user.getPassword();\n                    if (StringUtils.isBlank(password)) {\n                        return ofError(BizError.INVALID_PASSWORD, \\\"PASSWORD_NOT_SET_YET\\\");\n                    }\n\n                    String randomStr = generateNewRandomPwd();\n                    user.setPassword(encryptionService.encryptPassword(randomStr));\n                    return repository.save(user)\n                            .thenReturn(randomStr);\n                });\n    }\n\n    @SuppressWarnings(\\\"SpellCheckingInspection\\\")\n    @Nonnull\n    private static String generateNewRandomPwd() {\n        char[] possibleCharacters = (\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~`!@#$%^&*()-_=+[{]}<>?\\\")\n                .toCharArray();\n        return RandomStringUtils.random(12, 0, possibleCharacters.length - 1,\n                false, false, possibleCharacters, new SecureRandom());\n    }\n\n    @Override\n    public Mono<Boolean> setPassword(String userId, String password) {\n        return findById(userId)\n                .map(user -> {\n                    user.setPassword(encryptionService.encryptPassword(password));\n                    return user;\n                })\n                .flatMap(repository::save)\n                .thenReturn(true);\n    }\n\n\n    @Override\n    public Mono<UserDetail> buildUserDetail(User user, boolean withoutDynamicGroups) {\n        if (user.isAnonymous()) {\n            return Mono.just(ANONYMOUS_CURRENT_USER);\n        }\n        return Mono.deferContextual(contextView -> {\n            String ip = contextView.getOrDefault(CLIENT_IP, \\\"\\\");\n            Locale locale = LocaleUtils.getLocale(contextView);\n            return orgMemberService.getCurrentOrgMember(user.getId())\n                    .zipWhen(orgMember -> buildUserDetailGroups(user.getId(), orgMember, withoutDynamicGroups, locale))\n                    .map(tuple2 -> {\n                        OrgMember orgMember = tuple2.getT1();\n                        List<Map<String, String>> groups = tuple2.getT2();\n                        return UserDetail.builder()\n                                .id(user.getId())\n                                .name(user.getName())\n                                .avatarUrl(user.getAvatarUrl())\n                                .email(convertEmail(user.getConnections()))\n                                .ip(ip)\n                                .groups(groups)\n                                .extra(getUserDetailExtra(user, orgMember.getOrgId()))\n                                .build();\n                    });\n        });\n    }\n\n    /**\n     * In enterprise mode, user can be deleted and then related connections should be released here by appending a timestamp after the source field.\n     */\n    @Override\n    public Mono<Boolean> markUserDeletedAndInvalidConnectionsAtEnterpriseMode(String userId) {\n        if (commonConfig.getWorkspace().getMode() == WorkspaceMode.SAAS) {\n            return Mono.just(false);\n        }\n        return repository.findById(userId)\n                .flatMap(user -> {\n                    user.markAsDeleted();\n                    return mongoUpsertHelper.updateById(user, userId);\n                });\n    }\n\n    protected Map<String, Object> getUserDetailExtra(User user, String orgId) {\n        return Optional.ofNullable(user.getOrgTransformedUserInfo())\n                .map(orgTransformedUserInfo -> orgTransformedUserInfo.get(orgId))\n                .map(TransformedUserInfo::extra)\n                .orElse(convertConnections(user.getConnections()));\n    }\n\n\n\n", "CodeBleu_score": 28.38266438446559}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t> createNewUserByAuthUser(AuthUser authUser) {\n        User newUser = new User();\n        newUser.setName(authUser.getUsername());\n        newUser.setState(UserState.ACTIVATED);\n        newUser.setIsEnabled(true);\n        newUser.setTpAvatarLink(authUser.getAvatar());\n        if (AuthSourceConstants.EMAIL.equals(authUser.getSource())\n                && authUser.getAuthContext() instanceof FormAuthRequestContext formAuthRequestContext) {\n            newUser.setPassword(encryptionService.encryptPassword(formAuthRequestContext.getPassword()));\n        }\n        Set<Connection> connections = newHashSet();\n        Connection connection = authUser.toAuthConnection();\n        connections.add(connection);\n        newUser.setConnections(connections);\n        newUser.setIsNewUser(true);\n        return create(newUser);\n    }\n\n    @Override\n    public Mono<Void> getUserAvatar(ServerWebExchange exchange, String userId) {\n        return findById(userId)\n                .flatMap(user -> assetService.makeImageResponse(exchange, user.getAvatar()));\n    }\n\n    @Override\n    public Mono<Boolean> bindEmail(User user, String email) {\n        Connection connection = Connection.builder()\n                .source(AuthSourceConstants.EMAIL)\n                .name(email)\n                .rawId(email)\n                .build();\n        user.getConnections().add(connection);\n        return repository.save(user)\n                .then(Mono.just(true))\n                .onErrorResume(throwable -> {\n                    if (throwable instanceof DuplicateKeyException) {\n                        return Mono.error(new BizException(BizError.ALREADY_BIND, \\\"ALREADY_BIND\\\", email, \\\"\\\"));\n                    }\n                    return Mono.error(throwable);\n                });\n    }\n\n    @Override\n    public Mono<Boolean> addNewConnection(String userId, Connection connection) {\n        return findById(userId)\n                .doOnNext(user -> user.getConnections().add(connection))\n                .flatMap(repository::save)\n                .then(Mono.just(true));\n    }\n\n    @Override\n    public Mono<Void> deleteProfilePhoto(User visitor) {\n        String userAvatar = visitor.getAvatar();\n        visitor.setAvatar(null);\n        return repository.save(visitor).thenReturn(userAvatar)\n                .flatMap(assetService::remove);\n    }\n\n    @Override\n    public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword) {\n        return findById(userId)\n                .<User> handle((user, sink) -> {\n                    String password = user.getPassword();\n                    if (StringUtils.isBlank(password)) {\n                        sink.error(ofException(BizError.INVALID_PASSWORD, \\\"INVALID_PASSWORD\\\"));\n                        return;\n                    }\n                    String originalEncryptPassword = user.getPassword();\n                    if (!encryptionService.matchPassword(oldPassword, originalEncryptPassword)) {\n                        sink.error(ofException(BizError.INVALID_PASSWORD, \\\"INVALID_PASSWORD\\\"));\n                        return;\n                    }\n                    user.setPassword(encryptionService.encryptPassword(newPassword));\n                    sink.next(user);\n                })\n                .flatMap(repository::save)\n                .thenReturn(true);\n    }\n\n    @Override\n    public Mono<String> resetPassword(String userId) {\n        return findById(userId)\n                .flatMap(user -> {\n                    String password = user.getPassword();\n                    if (StringUtils.isBlank(password)) {\n                        return ofError(BizError.INVALID_PASSWORD, \\\"PASSWORD_NOT_SET_YET\\\");\n                    }\n\n                    String randomStr = generateNewRandomPwd();\n                    user.setPassword(encryptionService.encryptPassword(randomStr));\n                    return repository.save(user)\n                            .thenReturn(randomStr);\n                });\n    }\n\n    @SuppressWarnings(\\\"SpellCheckingInspection\\\")\n    @Nonnull\n    private static String generateNewRandomPwd() {\n        char[] possibleCharacters = (\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~`!@#$%^&*()-_=+[{]}<>?\\\")\n                .toCharArray();\n        return RandomStringUtils.random(12, 0, possibleCharacters.length - 1,\n                false, false, possibleCharacters, new SecureRandom());\n    }\n\n    @Override\n    public Mono<Boolean> setPassword(String userId, String password) {\n        return findById(userId)\n                .map(user -> {\n                    user.setPassword(encryptionService.encryptPassword(password));\n                    return user;\n                })\n                .flatMap(repository::save)\n                .thenReturn(true);\n    }\n\n\n    @Override\n    public Mono<UserDetail> buildUserDetail(User user, boolean withoutDynamicGroups) {\n        if (user.isAnonymous()) {\n            return Mono.just(ANONYMOUS_CURRENT_USER);\n        }\n        return Mono.deferContextual(contextView -> {\n            String ip = contextView.getOrDefault(CLIENT_IP, \\\"\\\");\n            Locale locale = LocaleUtils.getLocale(contextView);\n            return orgMemberService.getCurrentOrgMember(user.getId())\n                    .zipWhen(orgMember -> buildUserDetailGroups(user.getId(), orgMember, withoutDynamicGroups, locale))\n                    .map(tuple2 -> {\n                        OrgMember orgMember = tuple2.getT1();\n                        List<Map<String, String>> groups = tuple2.getT2();\n                        return UserDetail.builder()\n                                .id(user.getId())\n                                .name(user.getName())\n                                .avatarUrl(user.getAvatarUrl())\n                                .email(convertEmail(user.getConnections()))\n                                .ip(ip)\n                                .groups(groups)\n                                .extra(getUserDetailExtra(user, orgMember.getOrgId()))\n                                .build();\n                    });\n        });\n    }\n\n    /**\n     * In enterprise mode, user can be deleted and then related connections should be released here by appending a timestamp after the source field.\n     */\n    @Override\n    public Mono<Boolean> markUserDeletedAndInvalidConnectionsAtEnterpriseMode(String userId) {\n        if (commonConfig.getWorkspace().getMode() == WorkspaceMode.SAAS) {\n            return Mono.just(false);\n        }\n        return repository.findById(userId)\n                .flatMap(user -> {\n                    user.markAsDeleted();\n                    return mongoUpsertHelper.updateById(user, userId);\n                });\n    }\n\n    protected Map<String, Object> getUserDetailExtra(User user, String orgId) {\n        return Optional.ofNullable(user.getOrgTransformedUserInfo())\n                .map(orgTransformedUserInfo -> orgTransformedUserInfo.get(orgId))\n                .map(TransformedUserInfo::extra)\n                .orElse(convertConnections(user.getConnections()));\n    }\n\n\n\n", "CodeBleu_score": 28.38266438446559}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t> createNewUserByAuthUser(AuthUser authUser) {\n        User newUser = new User();\n        newUser.setName(authUser.getUsername());\n        newUser.setState(UserState.ACTIVATED);\n        newUser.setIsEnabled(true);\n        newUser.setTpAvatarLink(authUser.getAvatar());\n        if (AuthSourceConstants.EMAIL.equals(authUser.getSource())\n                && authUser.getAuthContext() instanceof FormAuthRequestContext formAuthRequestContext) {\n            newUser.setPassword(encryptionService.encryptPassword(formAuthRequestContext.getPassword()));\n        }\n        Set<Connection> connections = newHashSet();\n        Connection connection = authUser.toAuthConnection();\n        connections.add(connection);\n        newUser.setConnections(connections);\n        newUser.setIsNewUser(true);\n        return create(newUser);\n    }\n\n    @Override\n    public Mono<Void> getUserAvatar(ServerWebExchange exchange, String userId) {\n        return findById(userId)\n                .flatMap(user -> assetService.makeImageResponse(exchange, user.getAvatar()));\n    }\n\n    @Override\n    public Mono<Boolean> bindEmail(User user, String email) {\n        Connection connection = Connection.builder()\n                .source(AuthSourceConstants.EMAIL)\n                .name(email)\n                .rawId(email)\n                .build();\n        user.getConnections().add(connection);\n        return repository.save(user)\n                .then(Mono.just(true))\n                .onErrorResume(throwable -> {\n                    if (throwable instanceof DuplicateKeyException) {\n                        return Mono.error(new BizException(BizError.ALREADY_BIND, \\\"ALREADY_BIND\\\", email, \\\"\\\"));\n                    }\n                    return Mono.error(throwable);\n                });\n    }\n\n    @Override\n    public Mono<Boolean> addNewConnection(String userId, Connection connection) {\n        return findById(userId)\n                .doOnNext(user -> user.getConnections().add(connection))\n                .flatMap(repository::save)\n                .then(Mono.just(true));\n    }\n\n    @Override\n    public Mono<Void> deleteProfilePhoto(User visitor) {\n        String userAvatar = visitor.getAvatar();\n        visitor.setAvatar(null);\n        return repository.save(visitor).thenReturn(userAvatar)\n                .flatMap(assetService::remove);\n    }\n\n    @Override\n    public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword) {\n        return findById(userId)\n                .<User> handle((user, sink) -> {\n                    String password = user.getPassword();\n                    if (StringUtils.isBlank(password)) {\n                        sink.error(ofException(BizError.INVALID_PASSWORD, \\\"INVALID_PASSWORD\\\"));\n                        return;\n                    }\n                    String originalEncryptPassword = user.getPassword();\n                    if (!encryptionService.matchPassword(oldPassword, originalEncryptPassword)) {\n                        sink.error(ofException(BizError.INVALID_PASSWORD, \\\"INVALID_PASSWORD\\\"));\n                        return;\n                    }\n                    user.setPassword(encryptionService.encryptPassword(newPassword));\n                    sink.next(user);\n                })\n                .flatMap(repository::save)\n                .thenReturn(true);\n    }\n\n    @Override\n    public Mono<String> resetPassword(String userId) {\n        return findById(userId)\n                .flatMap(user -> {\n                    String password = user.getPassword();\n                    if (StringUtils.isBlank(password)) {\n                        return ofError(BizError.INVALID_PASSWORD, \\\"PASSWORD_NOT_SET_YET\\\");\n                    }\n\n                    String randomStr = generateNewRandomPwd();\n                    user.setPassword(encryptionService.encryptPassword(randomStr));\n                    return repository.save(user)\n                            .thenReturn(randomStr);\n                });\n    }\n\n    @SuppressWarnings(\\\"SpellCheckingInspection\\\")\n    @Nonnull\n    private static String generateNewRandomPwd() {\n        char[] possibleCharacters = (\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~`!@#$%^&*()-_=+[{]}<>?\\\")\n                .toCharArray();\n        return RandomStringUtils.random(12, 0, possibleCharacters.length - 1,\n                false, false, possibleCharacters, new SecureRandom());\n    }\n\n    @Override\n    public Mono<Boolean> setPassword(String userId, String password) {\n        return findById(userId)\n                .map(user -> {\n                    user.setPassword(encryptionService.encryptPassword(password));\n                    return user;\n                })\n                .flatMap(repository::save)\n                .thenReturn(true);\n    }\n\n\n    @Override\n    public Mono<UserDetail> buildUserDetail(User user, boolean withoutDynamicGroups) {\n        if (user.isAnonymous()) {\n            return Mono.just(ANONYMOUS_CURRENT_USER);\n        }\n        return Mono.deferContextual(contextView -> {\n            String ip = contextView.getOrDefault(CLIENT_IP, \\\"\\\");\n            Locale locale = LocaleUtils.getLocale(contextView);\n            return orgMemberService.getCurrentOrgMember(user.getId())\n                    .zipWhen(orgMember -> buildUserDetailGroups(user.getId(), orgMember, withoutDynamicGroups, locale))\n                    .map(tuple2 -> {\n                        OrgMember orgMember = tuple2.getT1();\n                        List<Map<String, String>> groups = tuple2.getT2();\n                        return UserDetail.builder()\n                                .id(user.getId())\n                                .name(user.getName())\n                                .avatarUrl(user.getAvatarUrl())\n                                .email(convertEmail(user.getConnections()))\n                                .ip(ip)\n                                .groups(groups)\n                                .extra(getUserDetailExtra(user, orgMember.getOrgId()))\n                                .build();\n                    });\n        });\n    }\n\n    /**\n     * In enterprise mode, user can be deleted and then related connections should be released here by appending a timestamp after the source field.\n     */\n    @Override\n    public Mono<Boolean> markUserDeletedAndInvalidConnectionsAtEnterpriseMode(String userId) {\n        if (commonConfig.getWorkspace().getMode() == WorkspaceMode.SAAS) {\n            return Mono.just(false);\n        }\n        return repository.findById(userId)\n                .flatMap(user -> {\n                    user.markAsDeleted();\n                    return mongoUpsertHelper.updateById(user, userId);\n                });\n    }\n\n    protected Map<String, Object> getUserDetailExtra(User user, String orgId) {\n        return Optional.ofNullable(user.getOrgTransformedUserInfo())\n                .map(orgTransformedUserInfo -> orgTransformedUserInfo.get(orgId))\n                .map(TransformedUserInfo::extra)\n                .orElse(convertConnections(user.getConnections()));\n    }\n\n\n\n", "CodeBleu_score": 28.38266438446559}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\tUserStatus userStatus = UserStatus.builder()\n            .id(userId)\n            .hasShownNewUserGuidance(true)\n            .build();\n\n    return mongoUpsertHelper.upsert(repository, userStatus, userStatus.getId(), UserStatus::getId);\n}", "CodeBleu_score": 69.91552457218752}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\tUserStatus userStatus = UserStatus.builder()\n            .id(userId)\n            .hasShowNewUserGuidance(true)\n            .build();\n\n    return mongoUpsertHelper.upsert(repository, userId, userStatus, UserStatus.class);\n}", "CodeBleu_score": 78.01457009526854}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\tUserStatus userStatus = UserStatus.builder()\n            .id(userId)\n            .hasShowNewUserGuidance(true)\n            .build();\n\n    Update update = new Update();\n    update.set(\"hasShowNewUserGuidance\", true);\n\n    return mongoUpsertHelper.upsert(repository, userId, update)\n            .map(userStatus1 -> true);\n}", "CodeBleu_score": 71.11016714591493}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\"nil predicatePartition\")\n\t}\n\n\tif predicateValue == nil {\n\t\tpanic(\"nil predicateValue\")\n\t}\n\n\tg, ctx := rungroup.WithContext(context.Background())\n\n\tfor k, p := range c.partitions {\n\t\tif !predicatePartition(k, p) {\n\t\t\tcontinue\n\t\t}\n\n\t\tk := k\n\t\tp := p\n\n\t\tg.Go(func() error {\n\t\t\treturn p.ClearMatching(ctx, predicateValue)\n\t\t})\n\t}\n\n\terr := g.Wait()\n\tif err != nil {\n\t\tc.infol.Errorf(\"error clearing cache: %s\", err)\n\t}\n}", "CodeBleu_score": 47.34006613910019}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\"nil predicatePartition\")\n\t}\n\n\tif predicateValue == nil {\n\t\tpanic(\"nil predicateValue\")\n\t}\n\n\trg := rungroup.New()\n\n\tc.mu.RLock()\n\tfor k, v := range c.partitions {\n\t\tif predicatePartition(k, v) {\n\t\t\trg.Add(func() error {\n\t\t\t\treturn v.ClearMatching(predicateValue)\n\t\t\t}, func(err error) {\n\t\t\t\tc.infol.Warnf(\\\"failed to clear partition %q: %s\\\", k, err)\n\t\t\t})\n\t\t}\n\t}\n\tc.mu.RUnlock()\n\n\trg.Wait()\n}", "CodeBleu_score": 40.980414628299734}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\"nil predicatePartition\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"nil predicateValue\")\n\t}\n\n\tc.mu.RLock()\n\tdefer c.mu.RUnlock()\n\n\tif len(c.partitions) == 0 {\n\t\treturn\n\t}\n\n\tg := rungroup.New(c.opts.Log.InfoCommand(\"dynacache.clear\"))\n\tfor k, p := range c.partitions {\n\t\tif !predicatePartition(k, p) {\n\t\t\tcontinue\n\t\t}\n\t\tg.Add(func() error {\n\t\t\tp.ClearMatching(predicateValue)\n\t\t\treturn nil\n\t\t})\n\t}\n\tg.Wait()\n}", "CodeBleu_score": 50.09492949787877}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\tregexp\\\"\n\t\\\"runtime\\\"\n\t\\\"sync\\\"\n\t\\\"time\\\"\n\n\t\\\"github.com/bep/lazycache\\\"\n\t\\\"github.com/bep/logg\\\"\n\t\\\"github.com/gohugoio/hugo/common/collections\\\"\n\t\\\"github.com/gohugoio/hugo/common/herrors\\\"\n\t\\\"github.com/gohugoio/hugo/common/loggers\\\"\n\t\\\"github.com/gohugoio/hugo/common/paths\\\"\n\t\\\"github.com/gohugoio/hugo/common/rungroup\\\"\n\t\\\"github.com/gohugoio/hugo/config\\\"\n\t\\\"github.com/gohugoio/hugo/helpers\\\"\n\t\\\"github.com/gohugoio/hugo/identity\\\"\n\t\\\"github.com/gohugoio/hugo/resources/resource\\\"", "CodeBleu_score": 25.685177164742335}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\tregexp\\\"\n\t\\\"runtime\\\"\n\t\\\"sync\\\"\n\t\\\"time\\\"\n\n\t\\\"github.com/bep/lazycache\\\"\n\t\\\"github.com/bep/logg\\\"\n\t\\\"github.com/gohugoio/hugo/common/collections\\\"\n\t\\\"github.com/gohugoio/hugo/common/herrors\\\"\n\t\\\"github.com/gohugoio/hugo/common/loggers\\\"\n\t\\\"github.com/gohugoio/hugo/common/paths\\\"\n\t\\\"github.com/gohugoio/hugo/common/rungroup\\\"\n\t\\\"github.com/gohugoio/hugo/config\\\"\n\t\\\"github.com/gohugoio/hugo/helpers\\\"\n\t\\\"github.com/gohugoio/hugo/identity\\\"\n\t\\\"github.com/gohugoio/hugo/resources/resource\\\"", "CodeBleu_score": 25.685177164742335}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\tregexp\\\"\n\t\\\"runtime\\\"\n\t\\\"sync\\\"\n\t\\\"time\\\"\n\n\t\\\"github.com/bep/lazycache\\\"\n\t\\\"github.com/bep/logg\\\"\n\t\\\"github.com/gohugoio/hugo/common/collections\\\"\n\t\\\"github.com/gohugoio/hugo/common/herrors\\\"\n\t\\\"github.com/gohugoio/hugo/common/loggers\\\"\n\t\\\"github.com/gohugoio/hugo/common/paths\\\"\n\t\\\"github.com/gohugoio/hugo/common/rungroup\\\"\n\t\\\"github.com/gohugoio/hugo/config\\\"\n\t\\\"github.com/gohugoio/hugo/helpers\\\"\n\t\\\"github.com/gohugoio/hugo/identity\\\"\n\t\\\"github.com/gohugoio/hugo/resources/resource\\\"", "CodeBleu_score": 25.685177164742335}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\tMap<String, Object> map = new HashMap<>();\n    ConnectionFactory connectionFactory = this.connectionFactory;\n    if (Objects.nonNull(connectionFactory)) {\n        ConnectionMetadata connectionMetadata = connectionFactory.getMetadata();\n        if (Objects.nonNull(connectionMetadata)) {\n            String databaseProductName = connectionMetadata.getDatabaseProductName();\n            String databaseProductVersion = connectionMetadata.getDatabaseProductVersion();\n            if (Objects.nonNull(databaseProductName)) {\n                map.put(\"databaseProductName\", databaseProductName);\n            }\n            if (Objects.nonNull(databaseProductVersion)) {\n                map.put(\"databaseProductVersion\", databaseProductVersion);\n            }\n        }\n    }\n    return map;\n}", "CodeBleu_score": 38.36615064032919}, {"code": "public Map<String, Object> contributorMap(){\n\tMap<String, Object> map = new HashMap<>();\n    ConnectionFactory connectionFactory = this.connectionFactory;\n    if (Objects.nonNull(connectionFactory)) {\n        ConnectionMetadata metadata = connectionFactory.getMetadata();\n        if (Objects.nonNull(metadata)) {\n            map.put(\"productName\", metadata.getDatabaseProductName());\n            map.put(\"productVersion\", metadata.getDatabaseProductVersion());\n        }\n    }\n    return map;\n}", "CodeBleu_score": 51.40873511961331}, {"code": "public Map<String, Object> contributorMap(){\n\tMap<String, Object> map = new HashMap<>();\n    ConnectionFactory connectionFactory = this.connectionFactory;\n    if (Objects.nonNull(connectionFactory)) {\n        ConnectionMetadata metadata = connectionFactory.getMetadata();\n        if (Objects.nonNull(metadata)) {\n            String productName = metadata.getDatabaseProductName();\n            if (Objects.nonNull(productName)) {\n                map.put(\"productName\", productName);\n            }\n            String productVersion = metadata.getDatabaseProductVersion();\n            if (Objects.nonNull(productVersion)) {\n                map.put(\"productVersion\", productVersion);\n            }\n        }\n    }\n    return map;\n}", "CodeBleu_score": 40.18857020978358}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tvar user = SystemSetting.get(configMap, User.GROUP, User.class);\n    if (user == null) {\n        info.setAllowRegistration(false);\n        info.setMustVerifyEmailOnRegistration(false);\n    } else {\n        info.setAllowRegistration(isTrue(user.getEnableRegistration()));\n        info.setMustVerifyEmailOnRegistration(isTrue(user.getMustVerifyEmailOnRegistration()));\n    }\n}", "CodeBleu_score": 64.9937949566488}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tvar user = SystemSetting.get(configMap, User.GROUP, User.class);\n    if (user == null) {\n        info.setAllowRegistration(false);\n        info.setMustVerifyEmailOnRegistration(false);\n    } else {\n        info.setAllowRegistration(user.getEnable() != null && user.getEnable());\n        info.setMustVerifyEmailOnRegistration(user.getMustVerifyEmailOnRegistration() != null\n            && user.getMustVerifyEmailOnRegistration());\n    }\n}", "CodeBleu_score": 72.80229931474767}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tvar user = SystemSetting.get(configMap, User.GROUP, User.class);\n    if (user == null) {\n        info.setAllowRegistration(false);\n        info.setMustVerifyEmailOnRegistration(false);\n    } else {\n        info.setAllowRegistration(user.getEnable() != null && user.getEnable());\n        info.setMustVerifyEmailOnRegistration(isTrue(user.getMustVerifyEmailOnRegistration()));\n    }\n}", "CodeBleu_score": 69.82195068815186}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\tThreadGroup threadGroup = new ThreadGroup(\"restart\");\n    Thread thread = new Thread(threadGroup, \"restart\") {\n        @Override\n        public void run() {\n            try {\n                log.info(\"Restarting application...\");\n                SpringApplication.run(Application.class, args);\n            } catch (Exception e) {\n                log.error(\"Restarting application failed\", e);\n            }\n        }\n    };\n    thread.setContextClassLoader(Application.class.getClassLoader());\n    thread.setDaemon(false);\n    thread.start();\n    return \"Restarting application...\";\n}", "CodeBleu_score": 51.77088242404287}, {"code": "public Object restart(){\n\t// Create a new thread group and thread to execute the restart process.\n    ThreadGroup group = new ThreadGroup(\"restart\");\n    Thread thread = new Thread(group, \"restart\") {\n        @Override\n        public void run() {\n            try {\n                // Set the thread as non-daemon and assign the application class loader as its context class loader.\n                setDaemon(false);\n                setContextClassLoader(Application.class.getClassLoader());\n\n                // Start the application using the original arguments.\n                SpringApplication.run(Application.class, args);\n            } catch (Exception e) {\n                log.error(\"Failed to restart application\", e);\n            }\n        }\n    };\n\n    // Start the thread.\n    thread.start();\n\n    // Return a message indicating the restart has begun.\n    return \"Restarting application...\";\n}", "CodeBleu_score": 43.83309872005545}, {"code": "public Object restart(){\n\tThreadGroup threadGroup = new ThreadGroup(\"restart-thread-group\");\n    Thread thread = new Thread(threadGroup, \"restart-thread\") {\n        @Override\n        public void run() {\n            try {\n                SpringApplication.run(Application.class, args);\n            } catch (Exception e) {\n                log.error(\"Restart failed\", e);\n            }\n        }\n    };\n\n    thread.setContextClassLoader(Application.class.getClassLoader());\n    thread.setDaemon(false);\n    thread.start();\n\n    return \"Restarting...\";\n}", "CodeBleu_score": 50.40538130987229}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\tconfigurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper,\n      Jackson2JsonEncoder.DEFAULT_VIEW_INCLUSION));\n  configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper,\n      Jackson2JsonDecoder.DEFAULT_VIEW_INCLUSION));\n  configurer.customCodecs().register(new ProtobufHttpMessageWriter());\n  configurer.customCodecs().register(new ProtobufHttpMessageReader());\n  configurer.customCodecs().register(new ThriftHttpMessageWriter());\n  configurer.customCodecs().register(new ThriftHttpMessageReader());\n }", "CodeBleu_score": 43.177527538839435}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\tconfigurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n        configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n    }", "CodeBleu_score": 71.09720633011617}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\tconfigurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n  configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n }", "CodeBleu_score": 92.68961594623742}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn route(\n            path(\"/console/**\")\n                    .and(accept(MediaType.TEXT_HTML))\n                    .and(method(HttpMethod.GET))\n                    .and(WebSocketRequestPredicate.negate()),\n            request -> {\n                String consoleIndex = haloProp.getConsole().getIndex();\n                String consolePath = haloProp.getConsole().getPath();\n                String consoleIndexUrl = FILE_URL_PREFIX + consoleIndex;\n                String consolePathUrl = FILE_URL_PREFIX + consolePath;\n                String consoleIndexFileUrl = consoleIndexUrl + \"/index.html\";\n                String consolePathFileUrl = consolePathUrl + \"/index.html\";\n                return ServerResponse\n                        .ok()\n                        .contentType(MediaType.TEXT_HTML)\n                        .body(BodyInserters.fromResource(consoleIndexFileUrl));\n            });\n}", "CodeBleu_score": 32.79054164532343}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn route(\n            path(\"/console/**\")\n                    .and(accept(MediaType.TEXT_HTML))\n                    .and(method(HttpMethod.GET))\n                    .and(WebSocketRequestPredicate.negate()),\n            request -> ServerResponse.temporaryRedirect(URI.create(\"/console/index.html\"))\n                    .build());\n}", "CodeBleu_score": 30.03248760031453}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn route(\n        method(HttpMethod.GET)\n            .and(path(\"/console/**\")\n                .and(accept(MediaType.TEXT_HTML)\n                    .negate()))\n            .and(WebSocketRequestPredicate.negate())\n            .and(path(\"/console/assets/**\").negate()),\n        request -> ServerResponse.temporaryRedirect(URI.create(\"/console/\")).build());\n}", "CodeBleu_score": 33.88823001308835}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\tvar ucPredicate = method(HttpMethod.GET).and(path(\"/uc/**\").and(path(\"/uc/assets/**\").negate())).and(accept(MediaType.TEXT_HTML)).and(new WebSocketRequestPredicate().negate());\n    return route(ucPredicate, request -> serveIndex(haloProp.getConsole().getLocation() + \"index.html\"));\n}", "CodeBleu_score": 63.1145903124406}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\tvar ucPredicate = method(HttpMethod.GET).and(path(\"/uc/**\").and(path(\"/uc/assets/**\").negate())).and(accept(MediaType.TEXT_HTML)).and(new WebSocketRequestPredicate().negate());\n    return route(ucPredicate, request -> serveIndex(haloProp.getConsole().getLocation() + \"index.html\"));\n}", "CodeBleu_score": 63.1145903124406}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\tvar ucPredicate = method(HttpMethod.GET)\n        .and(path(\"/uc/**\").and(path(\"/uc/assets/**\").negate()))\n        .and(accept(MediaType.TEXT_HTML))\n        .and(new WebSocketRequestPredicate().negate());\n    return route(ucPredicate, request -> serveIndex(haloProp.getUc().getLocation() + \"index.html\"));\n}", "CodeBleu_score": 80.11464858426595}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\tServerProperties serverProperties, SessionProperties sessionProperties ->\n\n        // Create a concurrent hash map to store sessions\n        ConcurrentHashMap<String, MapSession> sessionMap = new ConcurrentHashMap<>();\n\n        // Create a new reactive session repository with the concurrent hash map and the default session timeout\n        InMemoryReactiveIndexedSessionRepository.builder(sessionMap)\n            .defaultTimeout(sessionProperties.getTimeout())\n            .build();\n}", "CodeBleu_score": 32.11508523310359}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\tvar sessionRepository = new InMemoryReactiveIndexedSessionRepository(new ConcurrentHashMap<>());\n    var sessionProperties = new SessionProperties();\n    var serverProperties = new ServerProperties();\n    sessionRepository.setDefaultMaxInactiveInterval(sessionProperties.getTimeout());\n    sessionRepository.setDefaultMaxInactiveInterval(serverProperties.getServlet().getSession().getTimeout());\n    return sessionRepository;\n}", "CodeBleu_score": 49.05713998087185}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\tvar sessionRepository = new InMemoryReactiveIndexedSessionRepository<MapSession>(new ConcurrentHashMap<>());\n    var sessionProperties = sessionProperties();\n    var serverProperties = serverProperties();\n    sessionRepository.setDefaultMaxInactiveInterval(sessionProperties.getTimeout());\n    sessionRepository.setDefaultMaxInactiveInterval(serverProperties.getServlet().getSession().getTimeout());\n    return sessionRepository;\n}", "CodeBleu_score": 44.09197718377763}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tvar userDetailService = new DefaultUserDetailService(userService, roleService);\n    userDetailService.setEnableTwoFactorAuthentication(\n            haloProperties.getSecurity().getEnableTwoFactorAuthentication());\n    return userDetailService;\n}", "CodeBleu_score": 51.10112630469512}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tvar userDetailService = new DefaultUserDetailService(userService, roleService);\n    userDetailService.setTwoFactorAuthenticationEnabled(haloProperties.getSecurity().isTwoFactorAuthenticationEnabled());\n    return userDetailService;\n}", "CodeBleu_score": 50.98262069434878}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tvar userDetailService = new DefaultUserDetailService(userService, roleService);\n    userDetailService.setEnableTwoFactorAuthentication(\n            haloProperties.getSecurity().isEnableTwoFactorAuthentication());\n    return userDetailService;\n}", "CodeBleu_score": 51.00204934180659}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\tvar commentOwner = new Comment.CommentOwner();\n    commentOwner.setKind(\"email\");\n    commentOwner.setEmail(this.email);\n    commentOwner.setDisplayName(this.displayName);\n    var annotations = new LinkedHashMap<String, String>();\n    if (StringUtils.isNotBlank(this.avatar)) {\n        annotations.put(\"avatar\", this.avatar);\n    }\n    if (StringUtils.isNotBlank(this.website)) {\n        annotations.put(\"website\", this.website);\n    }\n    commentOwner.setAnnotations(annotations);\n    return commentOwner;\n}", "CodeBleu_score": 50.77912898030146}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\treturn new Comment.CommentOwner()\n            .setKind(\"email\")\n            .setEmail(StringUtils.trimToEmpty(this.email))\n            .setDisplayName(this.displayName)\n            .setAnnotations(new LinkedHashMap<String, String>() {{\n                put(\"avatar\", StringUtils.trimToEmpty(this.avatar));\n                put(\"website\", StringUtils.trimToEmpty(this.website));\n            }});\n}", "CodeBleu_score": 17.30223670392095}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\treturn new Comment.CommentOwner() {\n        @Override\n        public String getKind() {\n            return \"email\";\n        }\n\n        @Override\n        public String getEmail() {\n            return email;\n        }\n\n        @Override\n        public String getDisplayName() {\n            return displayName;\n        }\n\n        @Override\n        public String getAvatar() {\n            return avatar;\n        }\n\n        @Override\n        public String getWebsite() {\n            return website;\n        }\n\n        @Override\n        public Map<String, Object> getAnnotations() {\n            var annotations = new LinkedHashMap<String, Object>();\n            if (StringUtils.isNotBlank(avatar)) {\n                annotations.put(\"avatar\", avatar);\n            }\n            if (StringUtils.isNotBlank(website)) {\n                annotations.put(\"website\", website);\n            }\n            return annotations;\n        }\n    };\n}", "CodeBleu_score": 31.588556744855467}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tif (commentOwner.getKind().equals(User.KIND)) {\n        return post.getSpec().getOwner().getName().equals(commentOwner.getName());\n    }\n    return client.fetch(User.class, post.getSpec().getOwner().getName())\n            .map(user -> user.getKind().equals(commentOwner.getKind()) && user.getName().equals(commentOwner.getName()))\n            .orElse(false);\n}", "CodeBleu_score": 36.770879489379624}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\treturn commentOwner.getKind().equals(User.KIND) &&\n        commentOwner.getName().equals(post.getSpec().getOwner().getName());\n}", "CodeBleu_score": 18.70162305177977}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tif (commentOwner.getKind() == Comment.CommentOwner.Kind.EMAIL) {\n        Optional<User> user = client.fetch(User.class, commentOwner.getName());\n        return user.map(user1 -> user1.getEmail().equals(post.getSpec().getOwner().getEmail())).orElse(false);\n    } else {\n        return commentOwner.getName().equals(post.getSpec().getOwner().getName());\n    }\n}", "CodeBleu_score": 39.41596484998639}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\tvar listOptions = labelAndFieldSelectorToListOptions(exchange,\n        FieldSelector.of(Comment.class, \"spec.ownerName\", \"spec.ownerKind\"),\n        FieldSelector.of(Comment.class, \"spec.ownerName\", \"spec.ownerKind\"),\n        FieldSelector.of(Comment.class, \"metadata.name\", \"spec.creationTime\", \"spec.content\", \"spec.status.lastReplyTime\"),\n        FieldSelector.of(Comment.class, \"metadata.name\", \"spec.creationTime\", \"spec.content\", \"spec.status.lastReplyTime\"));\n\n    var keyword = getKeyword();\n    if (StringUtils.isNotBlank(keyword)) {\n        listOptions.addCondition(and(contains(\"spec.content\", keyword), equal(\"spec.status.status\", \"PUBLISHED\")));\n    }\n\n    var ownerName = getOwnerName();\n    if (StringUtils.isNotBlank(ownerName)) {\n        listOptions.addCondition(equal(\"spec.ownerName\", ownerName));\n    }\n\n    var ownerKind = getOwnerKind();\n    if (StringUtils.isNotBlank(ownerKind)) {\n        listOptions.addCondition(equal(\"spec.ownerKind\", ownerKind));\n    }\n\n    return listOptions;\n}", "CodeBleu_score": 44.30347244470474}, {"code": "public ListOptions toListOptions(){\n\tvar fieldSelector = labelAndFieldSelectorToListOptions(getLabelSelector(), getFieldSelector());\n\n    var query = and(\n        fieldSelector.getQuery(),\n        contains(Comment.FIELD_CONTENT, getKeyword()),\n        equal(Comment.FIELD_OWNER_NAME, getOwnerName())\n    );\n\n    return ListOptions.of(query, fieldSelector.getProjection());\n}", "CodeBleu_score": 26.416372839722662}, {"code": "public ListOptions toListOptions(){\n\tvar listOptions = labelAndFieldSelectorToListOptions(getFieldSelector(), getKeyword(), getOwnerName());\n    listOptions.setPageRequest(toPageRequest());\n    return listOptions;\n}", "CodeBleu_score": 12.307294858286744}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\tServiceImpl(ReactiveExtensionClient client,\n        UserService userService,\n        SystemConfigurableEnvironmentFetcher environmentFetcher,\n        CounterService counterService, RoleService roleService,\n        ExtensionGetter extensionGetter\n    ) {\n        this.client = client;\n        this.userService = userService;\n        this.environmentFetcher = environmentFetcher;\n        this.counterService = counterService;\n        this.roleService = roleService;\n        this.extensionGetter = extensionGetter;\n    }\n\n    @Override\n    public Mono<ListResult<ListedComment>> listComment(CommentQuery commentQuery) {\n        return this.client.listBy(Comment.class, commentQuery.toListOptions(),\n                commentQuery.toPageRequest())\n            .flatMap(comments -> Flux.fromStream(comments.get()\n                    .map(this::toListedComment))\n                .concatMap(Function.identity())\n                .collectList()\n                .map(list -> new ListResult<>(comments.getPage(), comments.getSize(),\n                    comments.getTotal(), list)\n                )\n            );\n    }\n\n    @Override\n    public Mono<Comment> create(Comment comment) {\n        return environmentFetcher.fetchComment()\n            .flatMap(commentSetting -> {\n                if (Boolean.FALSE.equals(commentSetting.getEnable())) {\n                    return Mono.error(\n                        new AccessDeniedException(\\\"The comment function has been turned off.\\\",\n                            \\\"problemDetail.comment.turnedOff\\\", null));\n                }\n                if (checkCommentOwner(comment, commentSetting.getSystemUserOnly())) {\n                    return Mono.error(\n                        new AccessDeniedException(\\\"Allow only system users to comment.\\\",\n                            \\\"problemDetail.comment.systemUsersOnly\\\", null));\n                }\n\n                if (comment.getSpec().getTop() == null) {\n                    comment.getSpec().setTop(false);\n                }\n                if (comment.getSpec().getPriority() == null) {\n                    comment.getSpec().setPriority(0);\n                }\n                comment.getSpec()\n                    .setApproved(Boolean.FALSE.equals(commentSetting.getRequireReviewForNew()));\n\n                if (BooleanUtils.isTrue(comment.getSpec().getApproved())\n                    && comment.getSpec().getApprovedTime() == null) {\n                    comment.getSpec().setApprovedTime(Instant.now());\n                }\n\n                if (comment.getSpec().getCreationTime() == null) {\n                    comment.getSpec().setCreationTime(Instant.now());\n                }\n\n                comment.getSpec().setHidden(false);\n\n                // return if the comment owner is not null\n                if (comment.getSpec().getOwner() != null) {\n                    return Mono.just(comment);\n                }\n                // populate owner from current user\n                return fetchCurrentUser()\n                    .flatMap(currentUser -> ReactiveSecurityContextHolder.getContext()\n                        .flatMap(securityContext -> {\n                            var authentication = securityContext.getAuthentication();\n                            var roles = AuthorityUtils.authoritiesToRoles(\n                                authentication.getAuthorities());\n                            return roleService.contains(roles,\n                                    Set.of(AuthorityUtils.COMMENT_MANAGEMENT_ROLE_NAME))\n                                .doOnNext(result -> {\n                                    if (result) {\n                                        comment.getSpec().setApproved(true);\n                                        comment.getSpec().setApprovedTime(Instant.now());\n                                    }\n                                })\n                                .thenReturn(toCommentOwner(currentUser));\n                        }))\n                    .map(owner -> {\n                        comment.getSpec().setOwner(owner);\n                        return comment;\n                    })\n                    .switchIfEmpty(\n                        Mono.error(new IllegalStateException(\\\"The owner must not be null.\\\")));\n            })\n            .flatMap(client::create);\n    }\n\n    @Override\n    public Mono<Void> removeBySubject(@NonNull Ref subjectRef) {\n        Assert.notNull(subjectRef, \\\"The subjectRef must not be null.\\\");\n        return cleanupComments(subjectRef, 200);\n    }\n\n    private Mono<Void> cleanupComments(Ref subjectRef, int batchSize) {\n        // ascending order by creation time and name\n        final var pageRequest = PageRequestImpl.of(1, batchSize,\n            Sort.by(\\\"metadata.creationTimestamp\\\", \\\"metadata.name\\\"));\n        // forever loop first page until no more to delete\n        return listCommentsByRef(subjectRef, pageRequest)\n            .flatMap(page -> Flux.fromIterable(page.getItems())\n                .flatMap(this::deleteWithRetry)\n                .then(page.hasNext() ? cleanupComments(subjectRef, batchSize) : Mono.empty())\n            );\n    }\n\n    private Mono<Comment> deleteWithRetry(Comment item) {\n        return client.delete(item)\n            .onErrorResume(OptimisticLockingFailureException.class,\n                e -> attemptToDelete(item.getMetadata().getName()));\n    }\n\n    private Mono<Comment> attemptToDelete(String name) {\n        return Mono.defer(() -> client.fetch(Comment.class, name)\n                .flatMap(client::delete)\n            )\n            .retryWhen(Retry.backoff(8, Duration.ofMillis(100))\n                .filter(OptimisticLockingFailureException.class::isInstance));\n    }\n\n    Mono<ListResult<Comment>> listCommentsByRef(Ref subjectRef, PageRequest pageRequest) {\n        var listOptions = new ListOptions();\n        listOptions.setFieldSelector(FieldSelector.of(\n            and(equal(\\\"spec.subjectRef\\\", Comment.toSubjectRefKey(subjectRef)),\n                isNull(\\\"metadata.deletionTimestamp\\\"))\n        ));\n        return client.listBy(Comment.class, listOptions, pageRequest);\n    }\n\n    private boolean checkCommentOwner(Comment comment, Boolean onlySystemUser) {\n        Comment.CommentOwner owner = comment.getSpec().getOwner();\n        if (Boolean.TRUE.equals(onlySystemUser)) {\n            return owner != null && Comment.CommentOwner.KIND_EMAIL.equals(owner.getKind());\n        }\n        return false;\n    }\n\n    private Comment.CommentOwner toCommentOwner(User user) {\n        Comment.CommentOwner owner = new Comment.CommentOwner();\n        owner.setKind(User.KIND);\n        owner.setName(user.getMetadata().getName());\n        owner.setDisplayName(user.getSpec().getDisplayName());\n        return owner;\n    }\n\n    private Mono<User> fetchCurrentUser() {\n        return ReactiveSecurityContextHolder.getContext()\n            .map(securityContext -> securityContext.getAuthentication().getName())\n            .flatMap(username -> client.fetch(User.class, username));\n    }\n\n    private Mono<ListedComment> toListedComment(Comment comment) {\n        var builder = ListedComment.builder().comment(comment);\n        // not empty\n        var ownerInfoMono = getCommentOwnerInfo(comment.getSpec().getOwner())\n            .doOnNext(builder::owner);\n        var subjectMono = getCommentSubject(comment.getSpec().getSubjectRef())\n            .doOnNext(builder::subject);\n        var statsMono = fetchStats(comment.getMetadata().getName())\n            .doOnNext(builder::stats);\n        return Mono.when(ownerInfoMono, subjectMono, statsMono)\n            .then(Mono.fromSupplier(builder::build));\n    }\n\n\n\n", "CodeBleu_score": 30.23499081008529}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\tServiceImpl(ReactiveExtensionClient client,\n        UserService userService,\n        SystemConfigurableEnvironmentFetcher environmentFetcher,\n        CounterService counterService, RoleService roleService,\n        ExtensionGetter extensionGetter\n    ) {\n        this.client = client;\n        this.userService = userService;\n        this.environmentFetcher = environmentFetcher;\n        this.counterService = counterService;\n        this.roleService = roleService;\n        this.extensionGetter = extensionGetter;\n    }\n\n    @Override\n    public Mono<ListResult<ListedComment>> listComment(CommentQuery commentQuery) {\n        return this.client.listBy(Comment.class, commentQuery.toListOptions(),\n                commentQuery.toPageRequest())\n            .flatMap(comments -> Flux.fromStream(comments.get()\n                    .map(this::toListedComment))\n                .concatMap(Function.identity())\n                .collectList()\n                .map(list -> new ListResult<>(comments.getPage(), comments.getSize(),\n                    comments.getTotal(), list)\n                )\n            );\n    }\n\n    @Override\n    public Mono<Comment> create(Comment comment) {\n        return environmentFetcher.fetchComment()\n            .flatMap(commentSetting -> {\n                if (Boolean.FALSE.equals(commentSetting.getEnable())) {\n                    return Mono.error(\n                        new AccessDeniedException(\\\"The comment function has been turned off.\\\",\n                            \\\"problemDetail.comment.turnedOff\\\", null));\n                }\n                if (checkCommentOwner(comment, commentSetting.getSystemUserOnly())) {\n                    return Mono.error(\n                        new AccessDeniedException(\\\"Allow only system users to comment.\\\",\n                            \\\"problemDetail.comment.systemUsersOnly\\\", null));\n                }\n\n                if (comment.getSpec().getTop() == null) {\n                    comment.getSpec().setTop(false);\n                }\n                if (comment.getSpec().getPriority() == null) {\n                    comment.getSpec().setPriority(0);\n                }\n                comment.getSpec()\n                    .setApproved(Boolean.FALSE.equals(commentSetting.getRequireReviewForNew()));\n\n                if (BooleanUtils.isTrue(comment.getSpec().getApproved())\n                    && comment.getSpec().getApprovedTime() == null) {\n                    comment.getSpec().setApprovedTime(Instant.now());\n                }\n\n                if (comment.getSpec().getCreationTime() == null) {\n                    comment.getSpec().setCreationTime(Instant.now());\n                }\n\n                comment.getSpec().setHidden(false);\n\n                // return if the comment owner is not null\n                if (comment.getSpec().getOwner() != null) {\n                    return Mono.just(comment);\n                }\n                // populate owner from current user\n                return fetchCurrentUser()\n                    .flatMap(currentUser -> ReactiveSecurityContextHolder.getContext()\n                        .flatMap(securityContext -> {\n                            var authentication = securityContext.getAuthentication();\n                            var roles = AuthorityUtils.authoritiesToRoles(\n                                authentication.getAuthorities());\n                            return roleService.contains(roles,\n                                    Set.of(AuthorityUtils.COMMENT_MANAGEMENT_ROLE_NAME))\n                                .doOnNext(result -> {\n                                    if (result) {\n                                        comment.getSpec().setApproved(true);\n                                        comment.getSpec().setApprovedTime(Instant.now());\n                                    }\n                                })\n                                .thenReturn(toCommentOwner(currentUser));\n                        }))\n                    .map(owner -> {\n                        comment.getSpec().setOwner(owner);\n                        return comment;\n                    })\n                    .switchIfEmpty(\n                        Mono.error(new IllegalStateException(\\\"The owner must not be null.\\\")));\n            })\n            .flatMap(client::create);\n    }\n\n    @Override\n    public Mono<Void> removeBySubject(@NonNull Ref subjectRef) {\n        Assert.notNull(subjectRef, \\\"The subjectRef must not be null.\\\");\n        return cleanupComments(subjectRef, 200);\n    }\n\n    private Mono<Void> cleanupComments(Ref subjectRef, int batchSize) {\n        // ascending order by creation time and name\n        final var pageRequest = PageRequestImpl.of(1, batchSize,\n            Sort.by(\\\"metadata.creationTimestamp\\\", \\\"metadata.name\\\"));\n        // forever loop first page until no more to delete\n        return listCommentsByRef(subjectRef, pageRequest)\n            .flatMap(page -> Flux.fromIterable(page.getItems())\n                .flatMap(this::deleteWithRetry)\n                .then(page.hasNext() ? cleanupComments(subjectRef, batchSize) : Mono.empty())\n            );\n    }\n\n    private Mono<Comment> deleteWithRetry(Comment item) {\n        return client.delete(item)\n            .onErrorResume(OptimisticLockingFailureException.class,\n                e -> attemptToDelete(item.getMetadata().getName()));\n    }\n\n    private Mono<Comment> attemptToDelete(String name) {\n        return Mono.defer(() -> client.fetch(Comment.class, name)\n                .flatMap(client::delete)\n            )\n            .retryWhen(Retry.backoff(8, Duration.ofMillis(100))\n                .filter(OptimisticLockingFailureException.class::isInstance));\n    }\n\n    Mono<ListResult<Comment>> listCommentsByRef(Ref subjectRef, PageRequest pageRequest) {\n        var listOptions = new ListOptions();\n        listOptions.setFieldSelector(FieldSelector.of(\n            and(equal(\\\"spec.subjectRef\\\", Comment.toSubjectRefKey(subjectRef)),\n                isNull(\\\"metadata.deletionTimestamp\\\"))\n        ));\n        return client.listBy(Comment.class, listOptions, pageRequest);\n    }\n\n    private boolean checkCommentOwner(Comment comment, Boolean onlySystemUser) {\n        Comment.CommentOwner owner = comment.getSpec().getOwner();\n        if (Boolean.TRUE.equals(onlySystemUser)) {\n            return owner != null && Comment.CommentOwner.KIND_EMAIL.equals(owner.getKind());\n        }\n        return false;\n    }\n\n    private Comment.CommentOwner toCommentOwner(User user) {\n        Comment.CommentOwner owner = new Comment.CommentOwner();\n        owner.setKind(User.KIND);\n        owner.setName(user.getMetadata().getName());\n        owner.setDisplayName(user.getSpec().getDisplayName());\n        return owner;\n    }\n\n    private Mono<User> fetchCurrentUser() {\n        return ReactiveSecurityContextHolder.getContext()\n            .map(securityContext -> securityContext.getAuthentication().getName())\n            .flatMap(username -> client.fetch(User.class, username));\n    }\n\n    private Mono<ListedComment> toListedComment(Comment comment) {\n        var builder = ListedComment.builder().comment(comment);\n        // not empty\n        var ownerInfoMono = getCommentOwnerInfo(comment.getSpec().getOwner())\n            .doOnNext(builder::owner);\n        var subjectMono = getCommentSubject(comment.getSpec().getSubjectRef())\n            .doOnNext(builder::subject);\n        var statsMono = fetchStats(comment.getMetadata().getName())\n            .doOnNext(builder::stats);\n        return Mono.when(ownerInfoMono, subjectMono, statsMono)\n            .then(Mono.fromSupplier(builder::build));\n    }\n\n\n\n", "CodeBleu_score": 30.23499081008529}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\tServiceImpl(ReactiveExtensionClient client,\n        UserService userService,\n        SystemConfigurableEnvironmentFetcher environmentFetcher,\n        CounterService counterService, RoleService roleService,\n        ExtensionGetter extensionGetter\n    ) {\n        this.client = client;\n        this.userService = userService;\n        this.environmentFetcher = environmentFetcher;\n        this.counterService = counterService;\n        this.roleService = roleService;\n        this.extensionGetter = extensionGetter;\n    }\n\n    @Override\n    public Mono<ListResult<ListedComment>> listComment(CommentQuery commentQuery) {\n        return this.client.listBy(Comment.class, commentQuery.toListOptions(),\n                commentQuery.toPageRequest())\n            .flatMap(comments -> Flux.fromStream(comments.get()\n                    .map(this::toListedComment))\n                .concatMap(Function.identity())\n                .collectList()\n                .map(list -> new ListResult<>(comments.getPage(), comments.getSize(),\n                    comments.getTotal(), list)\n                )\n            );\n    }\n\n    @Override\n    public Mono<Comment> create(Comment comment) {\n        return environmentFetcher.fetchComment()\n            .flatMap(commentSetting -> {\n                if (Boolean.FALSE.equals(commentSetting.getEnable())) {\n                    return Mono.error(\n                        new AccessDeniedException(\\\"The comment function has been turned off.\\\",\n                            \\\"problemDetail.comment.turnedOff\\\", null));\n                }\n                if (checkCommentOwner(comment, commentSetting.getSystemUserOnly())) {\n                    return Mono.error(\n                        new AccessDeniedException(\\\"Allow only system users to comment.\\\",\n                            \\\"problemDetail.comment.systemUsersOnly\\\", null));\n                }\n\n                if (comment.getSpec().getTop() == null) {\n                    comment.getSpec().setTop(false);\n                }\n                if (comment.getSpec().getPriority() == null) {\n                    comment.getSpec().setPriority(0);\n                }\n                comment.getSpec()\n                    .setApproved(Boolean.FALSE.equals(commentSetting.getRequireReviewForNew()));\n\n                if (BooleanUtils.isTrue(comment.getSpec().getApproved())\n                    && comment.getSpec().getApprovedTime() == null) {\n                    comment.getSpec().setApprovedTime(Instant.now());\n                }\n\n                if (comment.getSpec().getCreationTime() == null) {\n                    comment.getSpec().setCreationTime(Instant.now());\n                }\n\n                comment.getSpec().setHidden(false);\n\n                // return if the comment owner is not null\n                if (comment.getSpec().getOwner() != null) {\n                    return Mono.just(comment);\n                }\n                // populate owner from current user\n                return fetchCurrentUser()\n                    .flatMap(currentUser -> ReactiveSecurityContextHolder.getContext()\n                        .flatMap(securityContext -> {\n                            var authentication = securityContext.getAuthentication();\n                            var roles = AuthorityUtils.authoritiesToRoles(\n                                authentication.getAuthorities());\n                            return roleService.contains(roles,\n                                    Set.of(AuthorityUtils.COMMENT_MANAGEMENT_ROLE_NAME))\n                                .doOnNext(result -> {\n                                    if (result) {\n                                        comment.getSpec().setApproved(true);\n                                        comment.getSpec().setApprovedTime(Instant.now());\n                                    }\n                                })\n                                .thenReturn(toCommentOwner(currentUser));\n                        }))\n                    .map(owner -> {\n                        comment.getSpec().setOwner(owner);\n                        return comment;\n                    })\n                    .switchIfEmpty(\n                        Mono.error(new IllegalStateException(\\\"The owner must not be null.\\\")));\n            })\n            .flatMap(client::create);\n    }\n\n    @Override\n    public Mono<Void> removeBySubject(@NonNull Ref subjectRef) {\n        Assert.notNull(subjectRef, \\\"The subjectRef must not be null.\\\");\n        return cleanupComments(subjectRef, 200);\n    }\n\n    private Mono<Void> cleanupComments(Ref subjectRef, int batchSize) {\n        // ascending order by creation time and name\n        final var pageRequest = PageRequestImpl.of(1, batchSize,\n            Sort.by(\\\"metadata.creationTimestamp\\\", \\\"metadata.name\\\"));\n        // forever loop first page until no more to delete\n        return listCommentsByRef(subjectRef, pageRequest)\n            .flatMap(page -> Flux.fromIterable(page.getItems())\n                .flatMap(this::deleteWithRetry)\n                .then(page.hasNext() ? cleanupComments(subjectRef, batchSize) : Mono.empty())\n            );\n    }\n\n    private Mono<Comment> deleteWithRetry(Comment item) {\n        return client.delete(item)\n            .onErrorResume(OptimisticLockingFailureException.class,\n                e -> attemptToDelete(item.getMetadata().getName()));\n    }\n\n    private Mono<Comment> attemptToDelete(String name) {\n        return Mono.defer(() -> client.fetch(Comment.class, name)\n                .flatMap(client::delete)\n            )\n            .retryWhen(Retry.backoff(8, Duration.ofMillis(100))\n                .filter(OptimisticLockingFailureException.class::isInstance));\n    }\n\n    Mono<ListResult<Comment>> listCommentsByRef(Ref subjectRef, PageRequest pageRequest) {\n        var listOptions = new ListOptions();\n        listOptions.setFieldSelector(FieldSelector.of(\n            and(equal(\\\"spec.subjectRef\\\", Comment.toSubjectRefKey(subjectRef)),\n                isNull(\\\"metadata.deletionTimestamp\\\"))\n        ));\n        return client.listBy(Comment.class, listOptions, pageRequest);\n    }\n\n    private boolean checkCommentOwner(Comment comment, Boolean onlySystemUser) {\n        Comment.CommentOwner owner = comment.getSpec().getOwner();\n        if (Boolean.TRUE.equals(onlySystemUser)) {\n            return owner != null && Comment.CommentOwner.KIND_EMAIL.equals(owner.getKind());\n        }\n        return false;\n    }\n\n    private Comment.CommentOwner toCommentOwner(User user) {\n        Comment.CommentOwner owner = new Comment.CommentOwner();\n        owner.setKind(User.KIND);\n        owner.setName(user.getMetadata().getName());\n        owner.setDisplayName(user.getSpec().getDisplayName());\n        return owner;\n    }\n\n    private Mono<User> fetchCurrentUser() {\n        return ReactiveSecurityContextHolder.getContext()\n            .map(securityContext -> securityContext.getAuthentication().getName())\n            .flatMap(username -> client.fetch(User.class, username));\n    }\n\n    private Mono<ListedComment> toListedComment(Comment comment) {\n        var builder = ListedComment.builder().comment(comment);\n        // not empty\n        var ownerInfoMono = getCommentOwnerInfo(comment.getSpec().getOwner())\n            .doOnNext(builder::owner);\n        var subjectMono = getCommentSubject(comment.getSpec().getSubjectRef())\n            .doOnNext(builder::subject);\n        var statsMono = fetchStats(comment.getMetadata().getName())\n            .doOnNext(builder::stats);\n        return Mono.when(ownerInfoMono, subjectMono, statsMono)\n            .then(Mono.fromSupplier(builder::build));\n    }\n\n\n\n", "CodeBleu_score": 30.23499081008529}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\tvar subscriber = identity.getSubscriber();\n    if (subscriber == null) {\n        return;\n    }\n\n    var reason = NotificationReasonConst.REPLY_REASON;\n\n    var subscription = Subscription.builder()\n        .subscriber(subscriber)\n        .reason(reason)\n        .condition(StringUtils.format(\"reply.owner == '%s'\", identity.getName()))\n        .build();\n\n    notificationCenter.subscribe(subscription);\n}", "CodeBleu_score": 52.68154950463977}, {"code": "void subscribeReply(UserIdentity identity){\n\tif (identity == null) {\n        return;\n    }\n    var subscriber = identity.getSubscriber();\n    if (subscriber == null) {\n        return;\n    }\n    var subscription = Subscription.of(subscriber, NotificationReasonConst.REPLY_NOTIFICATION_REASON);\n    subscription.setInterestReason(InterestReason.of(NotificationReasonConst.REPLY_NOTIFICATION_REASON,\n            StringUtils.quote(identity.getUsername())));\n    notificationCenter.subscribe(subscription);\n}", "CodeBleu_score": 52.36588037725303}, {"code": "void subscribeReply(UserIdentity identity){\n\tif (identity == null) {\n        return;\n    }\n\n    var subscriber = notificationCenter.subscriber(identity);\n    var interest = subscriber.interest(NotificationReasonConst.SOMEONE_REPLIED_TO_YOU);\n    interest.when(StringUtils::isNotBlank, owner -> owner.equals(identity.getName()));\n\n    notificationCenter.subscribe(subscriber);\n}", "CodeBleu_score": 53.10921777795608}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn client.update(comment.getSpec().setApproved(true).setApprovedAt(Instant.now()),\n        UnaryOperator.identity(),\n        Retry.backoff(3, Duration.ofSeconds(1))\n            .filter(e -> e instanceof OptimisticLockingFailureException));\n}", "CodeBleu_score": 20.642809656644843}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn approveComment(comment, UnaryOperator.identity());\n}", "CodeBleu_score": 11.450292995647015}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn client.update(comment.getClass(), comment.getName(),\n        comment.getSpec().setApproved(true).setApprovedAt(Instant.now()),\n        (Function<Comment, Comment>) comment1 -> comment1.getSpec().setApproved(true).setApprovedAt(Instant.now()))\n        .onErrorMap(OptimisticLockingFailureException.class, e -> new IllegalStateException(\"Comment is outdated.\"));\n}", "CodeBleu_score": 30.870508192012963}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t()` instead.\n     *\n     * @param  array<StaticAction> | Closure | null  $actions\n     */\n    public function modalActions(array | Closure | null $actions = null): static\n    {\n        $this->modalFooterActions($actions);\n\n        return $this;\n    }\n\n    /**\n     * @param  array<StaticAction> | Closure | null  $actions\n     */\n    public function modalFooterActions(array | Closure | null $actions = null): static\n    {\n        $this->modalFooterActions = $actions;\n\n        return $this;\n    }\n\n    public function modalFooterActionsAlignment(Alignment | string | Closure | null $alignment = null): static\n    {\n        $this->modalFooterActionsAlignment = $alignment;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `extraModalFooterActions()` instead.\n     *\n     * @param  array<StaticAction> | Closure  $actions\n     */\n    public function extraModalActions(array | Closure $actions): static\n    {\n        $this->extraModalFooterActions($actions);\n\n        return $this;\n    }\n\n    /**\n     * @param  array<StaticAction> | Closure  $actions\n     */\n    public function extraModalFooterActions(array | Closure $actions): static\n    {\n        $this->extraModalFooterActions = $actions;\n\n        return $this;\n    }\n\n    /**\n     * @param  array<StaticAction>  $actions\n     */\n    public function registerModalActions(array $actions): static\n    {\n        $this->modalActions = [\n            ...$this->modalActions,\n            ...$actions,\n        ];\n\n        return $this;\n    }\n\n    public function modalSubmitAction(StaticAction | bool | Closure | null $action = null): static\n    {\n        $this->modalSubmitAction = $action;\n\n        return $this;\n    }\n\n    public function modalCancelAction(StaticAction | bool | Closure | null $action = null): static\n    {\n        $this->modalCancelAction = $action;\n\n        return $this;\n    }\n\n    public function modalSubmitActionLabel(string | Closure | null $label = null): static\n    {\n        $this->modalSubmitActionLabel = $label;\n\n        return $this;\n    }\n\n    public function modalCancelActionLabel(string | Closure | null $label = null): static\n    {\n        $this->modalCancelActionLabel = $label;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `modalSubmitActionLabel()` instead.\n     */\n    public function modalButton(string | Closure | null $label = null): static\n    {\n        $this->modalSubmitActionLabel($label);\n\n        return $this;\n    }\n\n    public function modalContent(View | Htmlable | Closure | null $content = null): static\n    {\n        $this->modalContent = $content;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `modalContentFooter()` instead.\n     */\n    public function modalFooter(View | Htmlable | Closure | null $footer = null): static\n    {\n        return $this->modalContentFooter($footer);\n    }\n\n    public function modalContentFooter(View | Htmlable | Closure | null $footer = null): static\n    {\n        $this->modalContentFooter = $footer;\n\n        return $this;\n    }\n\n    public function modalHeading(string | Htmlable | Closure | null $heading = null): static\n    {\n        $this->modalHeading = $heading;\n\n        return $this;\n    }\n\n    public function modalDescription(string | Htmlable | Closure | null $description = null): static\n    {\n        $this->modalDescription = $description;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `modalDescription()` instead.\n     */\n    public function modalSubheading(string | Htmlable | Closure | null $subheading = null): static\n    {\n        $this->modalDescription($subheading);\n\n        return $this;\n    }\n\n    public function modalWidth(MaxWidth | string | Closure | null $width = null): static\n    {\n        $this->modalWidth = $width;\n\n        return $this;\n    }\n\n    public function getLivewireCallMountedActionName(): ?string\n    {\n        return null;\n    }\n\n    public function modal(bool | Closure | null $condition = true): static\n    {\n        $this->hasModal = $condition;\n\n        return $this;\n    }\n\n    public function modalHidden(bool | Closure | null $condition = true): static\n    {\n        $this->isModalHidden = $condition;\n\n        return $this;\n    }\n\n    /**\n     * @return array<string, StaticAction>\n     */\n    public function getModalFooterActions(): array\n    {\n        if ($this->isWizard()) {\n            return [];\n        }\n\n        if (isset($this->cachedModalFooterActions)) {\n            return $this->cachedModalFooterActions;\n        }\n\n        if ($this->modalFooterActions) {\n            $actions = [];\n\n            foreach ($this->evaluate($this->modalFooterActions) as $action) {\n                $actions[$action->getName()] = $this->prepareModalAction($action);\n            }\n\n            return $this->cachedModalFooterActions = $actions;\n        }\n\n        $actions = [];\n\n        if ($submitAction = $this->getModalSubmitAction()) {\n            $actions['submit'] = $submitAction;\n        }\n\n        $actions = [\n            ...$actions,\n            ...$this->getExtraModalFooterActions(),\n        ];\n\n        if ($cancelAction = $this->getModalCancelAction()) {\n            $actions['cancel'] = $cancelAction;\n        }\n\n        if (in_array($this->getModalFooterActionsAlignment(), [Alignment::Center, 'center'])) {\n            $actions = array_reverse($actions);\n        }\n\n        return $this->cachedModalFooterActions = $actions;\n    }\n\n    public function getModalFooterActionsAlignment(): string | Alignment | null\n    {\n        return $this->evaluate($this->modalFooterActionsAlignment);\n    }\n\n    /**\n     * @return array<string, StaticAction>\n     */\n    public function getModalActions(): array\n    {\n        if (isset($this->cachedModalActions)) {\n            return $this->cachedModalActions;\n        }\n\n        $actions = $this->getModalFooterActions();\n\n        foreach ($this->modalActions as $action) {\n            $actions[$action->getName()] = $this->prepareModalAction($action);\n        }\n\n        return $this->cachedModalActions = $actions;\n    }\n\n    public function getModalAction(string $name): ?StaticAction\n    {\n        return $this->getModalActions()[$name] ?? null;\n    }\n\n    public function getMountableModalAction(string $name): ?MountableAction\n    {\n        $action = $this->getModalAction($name);\n\n        if (! $action) {\n            return null;\n        }\n\n        if (! $action instanceof MountableAction) {\n            return null;\n        }\n\n        return $action;\n    }\n\n\n\n", "CodeBleu_score": 18.05069975196484}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t()` instead.\n     *\n     * @param  array<StaticAction> | Closure | null  $actions\n     */\n    public function modalActions(array | Closure | null $actions = null): static\n    {\n        $this->modalFooterActions($actions);\n\n        return $this;\n    }\n\n    /**\n     * @param  array<StaticAction> | Closure | null  $actions\n     */\n    public function modalFooterActions(array | Closure | null $actions = null): static\n    {\n        $this->modalFooterActions = $actions;\n\n        return $this;\n    }\n\n    public function modalFooterActionsAlignment(Alignment | string | Closure | null $alignment = null): static\n    {\n        $this->modalFooterActionsAlignment = $alignment;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `extraModalFooterActions()` instead.\n     *\n     * @param  array<StaticAction> | Closure  $actions\n     */\n    public function extraModalActions(array | Closure $actions): static\n    {\n        $this->extraModalFooterActions($actions);\n\n        return $this;\n    }\n\n    /**\n     * @param  array<StaticAction> | Closure  $actions\n     */\n    public function extraModalFooterActions(array | Closure $actions): static\n    {\n        $this->extraModalFooterActions = $actions;\n\n        return $this;\n    }\n\n    /**\n     * @param  array<StaticAction>  $actions\n     */\n    public function registerModalActions(array $actions): static\n    {\n        $this->modalActions = [\n            ...$this->modalActions,\n            ...$actions,\n        ];\n\n        return $this;\n    }\n\n    public function modalSubmitAction(StaticAction | bool | Closure | null $action = null): static\n    {\n        $this->modalSubmitAction = $action;\n\n        return $this;\n    }\n\n    public function modalCancelAction(StaticAction | bool | Closure | null $action = null): static\n    {\n        $this->modalCancelAction = $action;\n\n        return $this;\n    }\n\n    public function modalSubmitActionLabel(string | Closure | null $label = null): static\n    {\n        $this->modalSubmitActionLabel = $label;\n\n        return $this;\n    }\n\n    public function modalCancelActionLabel(string | Closure | null $label = null): static\n    {\n        $this->modalCancelActionLabel = $label;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `modalSubmitActionLabel()` instead.\n     */\n    public function modalButton(string | Closure | null $label = null): static\n    {\n        $this->modalSubmitActionLabel($label);\n\n        return $this;\n    }\n\n    public function modalContent(View | Htmlable | Closure | null $content = null): static\n    {\n        $this->modalContent = $content;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `modalContentFooter()` instead.\n     */\n    public function modalFooter(View | Htmlable | Closure | null $footer = null): static\n    {\n        return $this->modalContentFooter($footer);\n    }\n\n    public function modalContentFooter(View | Htmlable | Closure | null $footer = null): static\n    {\n        $this->modalContentFooter = $footer;\n\n        return $this;\n    }\n\n    public function modalHeading(string | Htmlable | Closure | null $heading = null): static\n    {\n        $this->modalHeading = $heading;\n\n        return $this;\n    }\n\n    public function modalDescription(string | Htmlable | Closure | null $description = null): static\n    {\n        $this->modalDescription = $description;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `modalDescription()` instead.\n     */\n    public function modalSubheading(string | Htmlable | Closure | null $subheading = null): static\n    {\n        $this->modalDescription($subheading);\n\n        return $this;\n    }\n\n    public function modalWidth(MaxWidth | string | Closure | null $width = null): static\n    {\n        $this->modalWidth = $width;\n\n        return $this;\n    }\n\n    public function getLivewireCallMountedActionName(): ?string\n    {\n        return null;\n    }\n\n    public function modal(bool | Closure | null $condition = true): static\n    {\n        $this->hasModal = $condition;\n\n        return $this;\n    }\n\n    public function modalHidden(bool | Closure | null $condition = true): static\n    {\n        $this->isModalHidden = $condition;\n\n        return $this;\n    }\n\n    /**\n     * @return array<string, StaticAction>\n     */\n    public function getModalFooterActions(): array\n    {\n        if ($this->isWizard()) {\n            return [];\n        }\n\n        if (isset($this->cachedModalFooterActions)) {\n            return $this->cachedModalFooterActions;\n        }\n\n        if ($this->modalFooterActions) {\n            $actions = [];\n\n            foreach ($this->evaluate($this->modalFooterActions) as $action) {\n                $actions[$action->getName()] = $this->prepareModalAction($action);\n            }\n\n            return $this->cachedModalFooterActions = $actions;\n        }\n\n        $actions = [];\n\n        if ($submitAction = $this->getModalSubmitAction()) {\n            $actions['submit'] = $submitAction;\n        }\n\n        $actions = [\n            ...$actions,\n            ...$this->getExtraModalFooterActions(),\n        ];\n\n        if ($cancelAction = $this->getModalCancelAction()) {\n            $actions['cancel'] = $cancelAction;\n        }\n\n        if (in_array($this->getModalFooterActionsAlignment(), [Alignment::Center, 'center'])) {\n            $actions = array_reverse($actions);\n        }\n\n        return $this->cachedModalFooterActions = $actions;\n    }\n\n    public function getModalFooterActionsAlignment(): string | Alignment | null\n    {\n        return $this->evaluate($this->modalFooterActionsAlignment);\n    }\n\n    /**\n     * @return array<string, StaticAction>\n     */\n    public function getModalActions(): array\n    {\n        if (isset($this->cachedModalActions)) {\n            return $this->cachedModalActions;\n        }\n\n        $actions = $this->getModalFooterActions();\n\n        foreach ($this->modalActions as $action) {\n            $actions[$action->getName()] = $this->prepareModalAction($action);\n        }\n\n        return $this->cachedModalActions = $actions;\n    }\n\n    public function getModalAction(string $name): ?StaticAction\n    {\n        return $this->getModalActions()[$name] ?? null;\n    }\n\n    public function getMountableModalAction(string $name): ?MountableAction\n    {\n        $action = $this->getModalAction($name);\n\n        if (! $action) {\n            return null;\n        }\n\n        if (! $action instanceof MountableAction) {\n            return null;\n        }\n\n        return $action;\n    }\n\n\n\n", "CodeBleu_score": 18.05069975196484}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t()` instead.\n     *\n     * @param  array<StaticAction> | Closure | null  $actions\n     */\n    public function modalActions(array | Closure | null $actions = null): static\n    {\n        $this->modalFooterActions($actions);\n\n        return $this;\n    }\n\n    /**\n     * @param  array<StaticAction> | Closure | null  $actions\n     */\n    public function modalFooterActions(array | Closure | null $actions = null): static\n    {\n        $this->modalFooterActions = $actions;\n\n        return $this;\n    }\n\n    public function modalFooterActionsAlignment(Alignment | string | Closure | null $alignment = null): static\n    {\n        $this->modalFooterActionsAlignment = $alignment;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `extraModalFooterActions()` instead.\n     *\n     * @param  array<StaticAction> | Closure  $actions\n     */\n    public function extraModalActions(array | Closure $actions): static\n    {\n        $this->extraModalFooterActions($actions);\n\n        return $this;\n    }\n\n    /**\n     * @param  array<StaticAction> | Closure  $actions\n     */\n    public function extraModalFooterActions(array | Closure $actions): static\n    {\n        $this->extraModalFooterActions = $actions;\n\n        return $this;\n    }\n\n    /**\n     * @param  array<StaticAction>  $actions\n     */\n    public function registerModalActions(array $actions): static\n    {\n        $this->modalActions = [\n            ...$this->modalActions,\n            ...$actions,\n        ];\n\n        return $this;\n    }\n\n    public function modalSubmitAction(StaticAction | bool | Closure | null $action = null): static\n    {\n        $this->modalSubmitAction = $action;\n\n        return $this;\n    }\n\n    public function modalCancelAction(StaticAction | bool | Closure | null $action = null): static\n    {\n        $this->modalCancelAction = $action;\n\n        return $this;\n    }\n\n    public function modalSubmitActionLabel(string | Closure | null $label = null): static\n    {\n        $this->modalSubmitActionLabel = $label;\n\n        return $this;\n    }\n\n    public function modalCancelActionLabel(string | Closure | null $label = null): static\n    {\n        $this->modalCancelActionLabel = $label;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `modalSubmitActionLabel()` instead.\n     */\n    public function modalButton(string | Closure | null $label = null): static\n    {\n        $this->modalSubmitActionLabel($label);\n\n        return $this;\n    }\n\n    public function modalContent(View | Htmlable | Closure | null $content = null): static\n    {\n        $this->modalContent = $content;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `modalContentFooter()` instead.\n     */\n    public function modalFooter(View | Htmlable | Closure | null $footer = null): static\n    {\n        return $this->modalContentFooter($footer);\n    }\n\n    public function modalContentFooter(View | Htmlable | Closure | null $footer = null): static\n    {\n        $this->modalContentFooter = $footer;\n\n        return $this;\n    }\n\n    public function modalHeading(string | Htmlable | Closure | null $heading = null): static\n    {\n        $this->modalHeading = $heading;\n\n        return $this;\n    }\n\n    public function modalDescription(string | Htmlable | Closure | null $description = null): static\n    {\n        $this->modalDescription = $description;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `modalDescription()` instead.\n     */\n    public function modalSubheading(string | Htmlable | Closure | null $subheading = null): static\n    {\n        $this->modalDescription($subheading);\n\n        return $this;\n    }\n\n    public function modalWidth(MaxWidth | string | Closure | null $width = null): static\n    {\n        $this->modalWidth = $width;\n\n        return $this;\n    }\n\n    public function getLivewireCallMountedActionName(): ?string\n    {\n        return null;\n    }\n\n    public function modal(bool | Closure | null $condition = true): static\n    {\n        $this->hasModal = $condition;\n\n        return $this;\n    }\n\n    public function modalHidden(bool | Closure | null $condition = true): static\n    {\n        $this->isModalHidden = $condition;\n\n        return $this;\n    }\n\n    /**\n     * @return array<string, StaticAction>\n     */\n    public function getModalFooterActions(): array\n    {\n        if ($this->isWizard()) {\n            return [];\n        }\n\n        if (isset($this->cachedModalFooterActions)) {\n            return $this->cachedModalFooterActions;\n        }\n\n        if ($this->modalFooterActions) {\n            $actions = [];\n\n            foreach ($this->evaluate($this->modalFooterActions) as $action) {\n                $actions[$action->getName()] = $this->prepareModalAction($action);\n            }\n\n            return $this->cachedModalFooterActions = $actions;\n        }\n\n        $actions = [];\n\n        if ($submitAction = $this->getModalSubmitAction()) {\n            $actions['submit'] = $submitAction;\n        }\n\n        $actions = [\n            ...$actions,\n            ...$this->getExtraModalFooterActions(),\n        ];\n\n        if ($cancelAction = $this->getModalCancelAction()) {\n            $actions['cancel'] = $cancelAction;\n        }\n\n        if (in_array($this->getModalFooterActionsAlignment(), [Alignment::Center, 'center'])) {\n            $actions = array_reverse($actions);\n        }\n\n        return $this->cachedModalFooterActions = $actions;\n    }\n\n    public function getModalFooterActionsAlignment(): string | Alignment | null\n    {\n        return $this->evaluate($this->modalFooterActionsAlignment);\n    }\n\n    /**\n     * @return array<string, StaticAction>\n     */\n    public function getModalActions(): array\n    {\n        if (isset($this->cachedModalActions)) {\n            return $this->cachedModalActions;\n        }\n\n        $actions = $this->getModalFooterActions();\n\n        foreach ($this->modalActions as $action) {\n            $actions[$action->getName()] = $this->prepareModalAction($action);\n        }\n\n        return $this->cachedModalActions = $actions;\n    }\n\n    public function getModalAction(string $name): ?StaticAction\n    {\n        return $this->getModalActions()[$name] ?? null;\n    }\n\n    public function getMountableModalAction(string $name): ?MountableAction\n    {\n        $action = $this->getModalAction($name);\n\n        if (! $action) {\n            return null;\n        }\n\n        if (! $action instanceof MountableAction) {\n            return null;\n        }\n\n        return $action;\n    }\n\n\n\n", "CodeBleu_score": 18.05069975196484}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->evaluate($this->successRedirectUrl);\n\n    if (filled($url)) {\n        $this->redirect($url);\n    }\n\n    return $this;\n}", "CodeBleu_score": 94.557045237306}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->evaluate($this->successRedirectUrl);\n\n    if (filled($url)) {\n        $this->redirect($url);\n    }\n\n    return $this;\n}", "CodeBleu_score": 94.557045237306}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->evaluate($this->successRedirectUrl);\n\n    if (filled($url)) {\n        $this->redirect($url);\n    }\n\n    return $this;\n}", "CodeBleu_score": 94.557045237306}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif (! $record || ! method_exists($record, 'syncTags')) {\n        return;\n    }\n\n    $tags = $this->getTagModel()::query();\n\n    if ($this->isUnique()) {\n        $tags = $tags->whereDoesntHave('taggables', static function (Builder $query) use ($record): void {\n            $query->where('taggable_id', $record->getKey())\n                ->where('taggable_type', $record->getMorphClass());\n        });\n    }\n\n    $tags = $tags->get();\n\n    $tagNames = array_map(static function (string $tagName): string {\n        return strtolower($tagName);\n    }, $state);\n\n    $tagIds = [];\n\n    foreach ($tagNames as $tagName) {\n        $tag = $tags->first(static function (Tag $tag) use ($tagName): bool {\n            return strtolower($tag->name) === $tagName;\n        });\n\n        if (! $tag) {\n            $tag = $this->getTagModel()::create(['name' => $tagName]);\n        }\n\n        $tagIds[] = $tag->getKey();\n    }\n\n    $record->syncTags($tagIds);\n}", "CodeBleu_score": 42.10161412746041}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif (! method_exists($record, 'syncTags')) {\n        return;\n    }\n\n    $record->syncTags(\n        collect($state)\n            ->map(function (string $name) {\n                return Tag::findFromString($name) ?? Tag::createWithName($name);\n            })\n            ->all(),\n    );\n}", "CodeBleu_score": 22.26360253693124}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif (! $record || ! method_exists($record, 'tags')) {\n        return;\n    }\n\n    $record->syncTags(\n        collect($state)->map(static function (string $name): Tag {\n            $tag = Tag::findFromString($name);\n\n            if (! $tag) {\n                $tag = Tag::create(['name' => $name]);\n            }\n\n            return $tag;\n        })->all()\n    );\n}", "CodeBleu_score": 31.778842696588395}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\tif session == nil {\n\t\treturn fmt.Errorf(\"session is nil\")\n\t}\n\tif authorizer == nil {\n\t\treturn fmt.Errorf(\"authorizer is nil\")\n\t}\n\tif session.IsAnonymous() {\n\t\treturn fmt.Errorf(\"not authenticated\")\n\t}\n\tif session.IsExpired() {\n\t\treturn fmt.Errorf(\"session is expired\")\n\t}\n\n\tspacePath, repoName, err := paths.SplitRepositoryPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tpipelineScope := types.Scope{\n\t\tType:   enum.ScopeTypePipeline,\n\t\tParent: types.Scope{Type: enum.ScopeTypeRepository, Name: repoName},\n\t\tName:   pipelineIdentifier,\n\t}\n\tpipelineResource := types.Resource{\n\t\tType:   enum.ResourceTypePipeline,\n\t\tParent: types.Resource{Type: enum.ResourceTypeRepository, Name: repoName},\n\t\tName:   pipelineIdentifier,\n\t}\n\n\treturn authorizer.Check(ctx, session, spacePath, pipelineScope, pipelineResource, permission)\n}", "CodeBleu_score": 54.67603408801689}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t// get the space path and repository name from the repository path\n\tspacePath, repoName, err := paths.GetSpacePathAndRepoNameFromRepoPath(repoPath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to get space path and repository name from repository path %s: %w\", repoPath, err)\n\t}\n\n\t// create a scope for the repository\n\tscope := types.Scope{\n\t\tResourceType: types.ResourceTypePipeline,\n\t\tResource:     fmt.Sprintf(\"%s/%s\", spacePath, repoName),\n\t}\n\n\t// create a resource for the pipeline\n\tresource := types.Resource{\n\t\tResourceType: types.ResourceTypePipeline,\n\t\tName:         pipelineIdentifier,\n\t}\n\n\t// perform the authorization check\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 68.1423268353602}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\tspacePath, repoName, err := paths.SplitRepoPath(repoPath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to split repo path %s: %w\", repoPath, err)\n\t}\n\n\tscope := &types.Scope{\n\t\tSpacePath: spacePath,\n\t\tRepoName:  repoName,\n\t}\n\n\tresource := &types.Pipeline{\n\t\tPipelineIdentifier: pipelineIdentifier,\n\t}\n\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 73.23185092754754}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\tif session == nil {\n\t\treturn auth.ErrNotAuthenticated\n\t}\n\n\tif space == nil {\n\t\treturn auth.ErrNotAuthorized\n\t}\n\n\tparentSpace, spaceName := paths.SplitSpacePath(space.Path)\n\tscope := &authz.Scope{\n\t\tParent: parentSpace,\n\t\tName:   spaceName,\n\t}\n\n\tresource := &authz.Resource{\n\t\tType: authz.ResourceTypeSpace,\n\t}\n\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 60.64307786902155}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\tif space == nil {\n\t\treturn fmt.Errorf(\"space is nil\")\n\t}\n\n\tif space.Path == \"\" {\n\t\treturn fmt.Errorf(\"space path is empty\")\n\t}\n\n\tif session == nil {\n\t\treturn fmt.Errorf(\"session is nil\")\n\t}\n\n\tif authorizer == nil {\n\t\treturn fmt.Errorf(\"authorizer is nil\")\n\t}\n\n\tparentSpace, name, err := paths.SplitSpacePath(space.Path)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to split space path %s: %w\", space.Path, err)\n\t}\n\n\tscope := types.NewScope(parentSpace, \"\")\n\tresource := types.NewResource(name, enum.ResourceTypeSpace)\n\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 63.81786507214581}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\tif space == nil {\n\t\treturn nil\n\t}\n\n\tif space.Parent == nil {\n\t\treturn nil\n\t}\n\n\tparentPath := paths.SpacePath(space.Parent.Name)\n\tscope := authz.NewScope(parentPath, permission)\n\tresource := authz.NewResource(space.Name)\n\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 51.355576096490005}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\tif len(source) == 0 {\n\t\tsource, _ = json.Marshal(data)\n\t}\n\n\tvar result map[string]any\n\tif err := json.Unmarshal(source, &result); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := json.Unmarshal(source, &result); err != nil {\n\t\treturn nil, err\n\t}\n\n\tsanitized, err := json.Marshal(result)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn bytes.TrimSuffix(sanitized, []byte(\"\n\")), nil\n}", "CodeBleu_score": 35.86651514305013}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\tif len(source) == 0 {\n\t\tb, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn b, nil\n\t}\n\n\tvar dataMap map[string]any\n\tif err := json.Unmarshal(source, &dataMap); err != nil {\n\t\treturn nil, err\n\t}\n\n\tb, err := json.Marshal(dataMap)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn bytes.TrimSpace(b), nil\n}", "CodeBleu_score": 30.55071700067879}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\tif source == nil {\n\t\tif data == nil {\n\t\t\treturn nil, nil\n\t\t}\n\n\t\treturn json.Marshal(data)\n\t}\n\n\tvar decoded interface{}\n\tif err := json.Unmarshal(source, &decoded); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := json.Unmarshal(source, data); err != nil {\n\t\treturn nil, err\n\t}\n\n\tsanitized, err := json.Marshal(data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn bytes.TrimSuffix(sanitized, []byte(\"\n\")), nil\n}", "CodeBleu_score": 34.54240161784169}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t// Validate the repository reference.\n\trepoRef, err := c.validateRepoRef(repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch the repository.\n\trepo, err := c.repoStore.GetRepo(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the access permissions.\n\tif err := c.authorizer.Authorize(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 50.060543046344506}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t// Validate the repository reference.\n\trepoRef, err := c.authorizer.ValidateRepoRef(ctx, session, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch the repository using the reference.\n\trepo, err := c.repoStore.Get(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the required permissions for the session on the repository.\n\tif err := c.authorizer.CheckRepoAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 51.99872412178424}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\tif err := c.authorizer.Authorize(ctx, session, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\trepo, err := c.repoStore.Get(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 37.902444407863975}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tsanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tsanitizers[enum.CheckPayloadKindEmpty] = func(in *ReportInput, s *auth.Session) error {\n\t\tin.Payload.Empty = &types.Empty{}\n\t\treturn nil\n\t}\n\tsanitizers[enum.CheckPayloadKindRaw] = func(in *ReportInput, s *auth.Session) error {\n\t\tin.Payload.Raw = &types.Raw{}\n\t\treturn nil\n\t}\n\tsanitizers[enum.CheckPayloadKindMarkdown] = func(in *ReportInput, s *auth.Session) error {\n\t\tin.Payload.Markdown = &types.Markdown{}\n\t\treturn nil\n\t}\n\tsanitizers[enum.CheckPayloadKindPipeline] = func(in *ReportInput, s *auth.Session) error {\n\t\tin.Payload.Pipeline = &types.Pipeline{}\n\t\treturn nil\n\t}\n\treturn sanitizers\n}", "CodeBleu_score": 40.84155982870129}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty:    sanitizeEmptyPayload,\n\t\tenum.CheckPayloadKindRaw:      sanitizeRawPayload,\n\t\tenum.CheckPayloadKindMarkdown: sanitizeRawPayload,\n\t\tenum.CheckPayloadKindPipeline: sanitizePipelinePayload,\n\t}\n}", "CodeBleu_score": 26.452372429364278}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindRaw: func(in *ReportInput, s *auth.Session) error {\n\t\t\tin.Payload = types.SanitizeMarkdown(in.Payload)\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindMarkdown: func(in *ReportInput, s *auth.Session) error {\n\t\t\tin.Payload = types.SanitizeMarkdown(in.Payload)\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindPipeline: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t}\n}", "CodeBleu_score": 28.078644109158308}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\tself.state.on_render = on_render\n\n  if not self.state.is_attached_to_screen then\n    self:attach_to_screen()\n  end\n\n  return self", "CodeBleu_score": 45.52392789709263}, {"code": "function Buffer:attach_to_renderer(on_render)\n\tif not self.state.is_attached_to_screen then\n    self:attach_to_screen()\n  end\n\n  self.state.on_render = on_render\n\n  return self", "CodeBleu_score": 41.466530391651304}, {"code": "function Buffer:attach_to_renderer(on_render)\n\tlocal renderer_buffer = renderer.buffers[self.bufnr]\n\n  if not renderer_buffer then\n    renderer.buffers[self.bufnr] = self\n    self.state.is_attached_to_screen = true\n  end\n\n  self.state.on_render = on_render\n\n  return self", "CodeBleu_score": 45.8330607609521}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\tlocal filename = self.filename\n  if not filename or filename == '' then\n    return self\n  end\n  if not fs.exists(filename) then\n    return self\n  end\n  local watcher = self.watcher\n  watcher:setup(filename, function()\n    if not watcher:is_valid() then\n      return self\n    end\n    if not callback then\n      return self\n    end\n    callback()\n  end, function(err)\n    if not watcher:is_valid() then\n      return self\n    end\n    console.error(err)\n  end)\n  return self", "CodeBleu_score": 50.22908859383155}, {"code": "function Buffer:watch(callback)\n\tlocal filename = self.filename\n  if not filename or filename == '' then\n    return\n  end\n  if not fs.exists(filename) then\n    return\n  end\n  self.watcher:watch(filename, callback)", "CodeBleu_score": 27.780811636149423}, {"code": "function Buffer:watch(callback)\n\tlocal filename = self.filename\n\n  if not filename or filename == '' then\n    return self\n  end\n\n  if not fs.exists(filename) then\n    return self\n  end\n\n  local watcher = self.watcher\n\n  watcher:watch(filename, function(err)\n    if err then\n      console.error(err)\n      return\n    end\n\n    if not self.is_in_disk() then\n      return\n    end\n\n    if callback then\n      callback()\n    end\n  end)\n\n  return self", "CodeBleu_score": 51.142158493446566}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\tif self.hex ~= nil then\n    return self.hex\n  end\n\n  local spec = self.spec\n  local attribute = spec.attribute\n  local highlight_group = spec.highlight_group\n  local gui = spec.gui\n  local name = spec.name\n  local rgb = self.rgb\n\n  if rgb ~= nil then\n    self.hex = rgb:to_hex()\n    return self.hex\n  end\n\n  local highlight_name = nil\n  local highlight_attribute = nil\n  if attribute == 'foreground' then\n    highlight_name = 'Normal'\n    highlight_attribute = 'fg'\n  elseif attribute == 'background' then\n    highlight_name = 'Normal'\n    highlight_attribute = 'bg'\n  elseif attribute == 'gui_foreground' then\n    highlight_name = 'Normal'\n    highlight_attribute = 'guifg'\n  elseif attribute == 'gui_background' then\n    highlight_name = 'Normal'\n    highlight_attribute = 'guibg'\n  else\n    highlight_name = highlight_group\n    highlight_attribute = attribute\n  end\n\n  local highlight = vim.api.nvim_get_hl_by_name(highlight_name, true)\n  if highlight == nil then\n    return nil\n  end\n\n  local color = highlight[highlight_attribute]\n  if color == nil then\n    return nil\n  end\n\n  if type(color) == 'string' then\n    self.hex = color\n    return self.hex\n  end\n\n  local red = bit.band(color, 0xff0000)\n  local green = bit.band(color, 0x00ff00)\n  local blue = bit.band(color, 0x0000ff)\n\n  self.hex = string.format('#%02X%02X%02X', red, green, blue)\n  return self.hex", "CodeBleu_score": 48.41750760282788}, {"code": "function Color:to_hex()\n\tif self.hex then return self.hex end\n  local spec = self.spec\n  local attr = spec.attr or 'foreground'\n  local gui = spec.gui or 'bold'\n  local fg = spec.fg or 'NONE'\n  local bg = spec.bg or 'NONE'\n  local hl = vim.fn.synIDattr(vim.fn.hlID(attr), gui)\n  local rgb = Rgb:new(hl)\n  if not rgb.valid then\n    if fg ~= 'NONE' then\n      hl = vim.fn.synIDattr(vim.fn.hlID(fg), gui)\n      rgb = Rgb:new(hl)\n    elseif bg ~= 'NONE' then\n      hl = vim.fn.synIDattr(vim.fn.hlID(bg), gui)\n      rgb = Rgb:new(hl)\n    end\n  end\n  if not rgb.valid then\n    if fg ~= 'NONE' then\n      hl = vim.fn.synIDattr(vim.fn.hlID(fg), 'fg')\n      rgb = Rgb:new(hl)\n    elseif bg ~= 'NONE' then\n      hl = vim.fn.synIDattr(vim.fn.hlID(bg), 'bg')\n      rgb = Rgb:new(hl)\n    end\n  end\n  if not rgb.valid then\n    if fg ~= 'NONE' then\n      hl = vim.fn.synIDattr(vim.fn.hlID(fg), 'fg')\n      rgb = Rgb:new(hl)\n    elseif bg ~= 'NONE' then\n      hl = vim.fn.synIDattr(vim.fn.hlID(bg), 'bg')\n      rgb = Rgb:new(hl)\n    end\n  end\n  if not rgb.valid then\n    if fg ~= 'NONE' then\n      hl = vim.fn.synIDattr(vim.fn.hlID(fg), 'fg')\n      rgb = Rgb:", "CodeBleu_score": 44.30666902202021}, {"code": "function Color:to_hex()\n\tif self.hex ~= nil then\n    return self.hex\n  end\n  local spec = self.spec\n  local attr = spec.attr or 'foreground'\n  local fg = vim.api.nvim_get_hl_by_name(attr, true)\n  if fg == nil then\n    return nil\n  end\n  local hex = Rgb.from_hex(fg.foreground)\n  self.hex = hex\n  return hex", "CodeBleu_score": 51.781222805764436}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\tlocal lines = buffer.lines\n  local row = 1\n  local col_start = 1\n  local col_end = 1\n\n  for _, line in ipairs(lines) do\n    local start_pos, end_pos = string.find(line, pattern)\n\n    if start_pos ~= nil then\n      col_start = start_pos\n      col_end = end_pos\n\n      pcall(vim.api.nvim_buf_add_highlight, buffer.bufnr, self.ns_id, hl, row, col_start, col_end)\n    end\n\n    row = row + 1\n  end\n\n  return self", "CodeBleu_score": 47.256541763074026}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\tlocal lines = buffer.lines\n  local row = 0\n  local col_start = 0\n  local col_end = 0\n  local matches = {}\n\n  for _, line in ipairs(lines) do\n    local start_index, end_index = string.find(line, pattern)\n    if start_index then\n      table.insert(matches, {\n        row = row,\n        col_start = start_index,\n        col_end = end_index,\n      })\n    end\n\n    row = row + 1\n    col_start = 0\n    col_end = 0\n  end\n\n  for _, match in ipairs(matches) do\n    self:add_highlight(buffer, hl, match.row, match.col_start, match.col_end)\n  end\n\n  return self", "CodeBleu_score": 45.12882666460833}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\tlocal lines = vim.api.nvim_buf_get_lines(buffer.bufnr, 0, -1, true)\n\n  for row, line in ipairs(lines) do\n    local start_col, end_col = string.find(line, pattern)\n    if start_col ~= nil then\n      self:add_highlight(buffer, hl, row, start_col, end_col)\n    end\n  end\n\n  return self", "CodeBleu_score": 41.01552872750959}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\tlocal id = string.format('tanvirtin/vgit.nvim/virtual_text/%s/%s/%s', buffer.bufnr, row, col)\n\n  vim.api.nvim_buf_set_extmark(buffer.bufnr, self.ns_id, row, col, {\n    id = id,\n    virt_text = { { text, hl } },\n    virt_text_pos = pos,\n    priority = priority,\n  })\n\n  return id", "CodeBleu_score": 70.9881488602942}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\tlocal id = string.format('tanvirtin/vgit.nvim/virtual_text/%s/%s', buffer.bufnr, string.format('%s:%s', row, col))\n  vim.api.nvim_buf_set_extmark(buffer.bufnr, self.ns_id, row, col, {\n    id = id,\n    virt_text = { { text, hl } },\n    virt_text_pos = pos,\n    priority = priority\n  })\n  return id", "CodeBleu_score": 68.1371972532502}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\tlocal id = string.format('tanvirtin/vgit.nvim/virtual_text/%s/%s/%s/%s', buffer.bufnr, row, col, hl)\n\n  vim.api.nvim_buf_set_extmark(buffer.bufnr, self.ns_id, row, col, {\n    id = id,\n    virt_text = { { text, hl } },\n    virt_text_pos = pos,\n    priority = priority,\n  })\n\n  return id", "CodeBleu_score": 70.6700985432301}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\tlocal line = ''\n  for i = 1, #output do\n    local char = output:sub(i, i)\n    if char == '", "CodeBleu_score": 22.584243156265977}, {"code": "function Spawn:parse_result(output, callback)\n\tlocal line = ''\n  for i = 1, #output do\n    local char = output:sub(i, i)\n    if char == '", "CodeBleu_score": 22.584243156265977}, {"code": "function Spawn:parse_result(output, callback)\n\tlocal line = ''\n  for i = 1, #output do\n    local char = output:sub(i, i)\n    if char == '", "CodeBleu_score": 22.584243156265977}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\tif self.watcher then\n    return self.watcher\n  end\n  local watcher = luv.new_fs_event()\n  watcher:start(path, {\n    recursive = true,\n  }, function(_, _, filename)\n    handler(filename)\n  end)\n  self.watcher = watcher\n  return watcher", "CodeBleu_score": 58.421354789557256}, {"code": "function Watcher:watch_file(path, handler)\n\tif not self.watcher then\n    self.watcher = loop.fs_event(path, {\n      recursive = true,\n    }, handler)\n  end\n  return self.watcher", "CodeBleu_score": 34.976904060398105}, {"code": "function Watcher:watch_file(path, handler)\n\tif self.watcher == nil then\n    self.watcher = luv.new_fs_event()\n  end\n  if self.watcher:start(path, {\n    recursive = true,\n    watch_entry = true\n  }) then\n    self.watcher:on('change', handler)\n    return self.watcher\n  end", "CodeBleu_score": 48.86432586355034}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\tif self.is_processing then return end\n  self.is_processing = true\n\n  local lines = self:get_lines()\n  local hunks = self.git_object:live_hunks(lines)\n  if type(hunks) == 'string' then\n    self.is_processing = false\n    return\n  end\n\n  local signs = {}\n  for _, hunk in ipairs(hunks) do\n    for i = hunk.start, hunk.end_ do\n      local sign = signs_setting.get_sign(hunk.type)\n      signs[i] = sign.name\n      signs[i .. '_priority'] = sign.priority\n    end\n  end\n\n  self.signs = signs\n  self:set_signs()\n  self.is_processing = false\n  return hunks", "CodeBleu_score": 41.378054104552106}, {"code": "function GitBuffer:live_hunks()\n\tlocal hunks = self.git_object:live_hunks()\n  if hunks.error then\n    return hunks\n  end\n\n  self.signs = {}\n\n  for _, hunk in pairs(hunks) do\n    local lines = vim.api.nvim_buf_get_lines(self.bufnr, hunk.start, hunk.end_line, false)\n    for i, line in pairs(lines) do\n      local sign = hunk.type == 'addition' and signs_setting.addition or signs_setting.removal\n      local priority = hunk.type == 'addition' and 1 or 2\n      self.signs[hunk.start + i - 1] = {\n        sign = sign,\n        priority = priority,\n        hunk = hunk,\n        line = line,\n        type = hunk.type,\n      }\n    end\n  end\n\n  self:set_signs()\n  self:set_var('vgit_hunks', hunks)\n\n  return hunks", "CodeBleu_score": 50.073953155453545}, {"code": "function GitBuffer:live_hunks()\n\tlocal lines = vim.api.nvim_buf_get_lines(self.bufnr, 0, -1, false)\n  local hunks = self.git_object:live_hunks(lines)\n  if not hunks then\n    return nil, 'No hunks found'\n  end\n\n  local signs = {}\n  for _, hunk in ipairs(hunks) do\n    for _, line in ipairs(hunk.lines) do\n      if signs_setting.priorities[line.type] then\n        table.insert(signs, {\n          lnum = line.lnum,\n          type = line.type,\n          priority = signs_setting.priorities[line.type],\n        })\n      end\n    end\n  end\n\n  self.signs = signs\n  self:set_signs()\n\n  return hunks", "CodeBleu_score": 43.964024070073}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\tlocal temp_filename = fs.join(os.tmpdir(), 'vgit-' .. utils.random_string(10) .. '.patch')\n  local err = fs.write_file(temp_filename, patch.content)\n\n  if err ~= nil then\n    return err\n  end\n\n  local cmd = self.git:stage_hunk_from_patch(temp_filename, patch)\n  local _, err = loop.await(cmd:exec())\n\n  fs.remove(temp_filename)\n\n  return err", "CodeBleu_score": 54.866117465431685}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\tlocal tmp_filename = utils.tmp_filename(self.filename.native, patch.hunk.header.range.start_line)\n  local err = fs.write_file(tmp_filename, patch.content)\n  if err then\n    return err\n  end\n\n  local err = self.git:stage_hunk_from_patch(patch, tmp_filename)\n  if err then\n    return err\n  end\n\n  fs.remove(tmp_filename)\n  return nil", "CodeBleu_score": 48.200565199605236}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\tlocal tmp_filename = self.dirname .. '/' .. utils.random_string()\n\n  -- Write the patch content to a temporary file\n  local file = io.open(tmp_filename, 'w')\n  file:write(patch.content)\n  file:close()\n\n  -- Stage the hunk using the temporary file\n  local error = self.git:stage_hunk_from_patch(self.filename.native, patch.hunk, tmp_filename)\n\n  -- Remove the temporary file\n  fs.rm(tmp_filename)\n\n  return error", "CodeBleu_score": 52.3520078109028}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tOAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());\n    request.addHeader(OAuthConstants.HEADER, api.getAuthorizationHeader(config));\n    request.addBodyParameter(OAuthConstants.CLIENT_ID, config.getApiKey());\n    request.addBodyParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret());\n    request.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n    request.addBodyParameter(OAuthConstants.REDIRECT_URI, config.getCallback());\n    request.addBodyParameter(GRANT_TYPE_KEY, GRANT_TYPE_CLIENT_CREDENTIALS);\n    Response response = request.send();\n    return api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 73.72987559002958}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tOAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());\n    request.addBodyParameter(OAuthConstants.CLIENT_ID, config.getApiKey());\n    request.addBodyParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret());\n    request.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n    request.addBodyParameter(GRANT_TYPE_KEY, GRANT_TYPE_CLIENT_CREDENTIALS);\n    request.addBodyParameter(OAuthConstants.REDIRECT_URI, config.getCallback());\n    request.addBodyParameter(OAuthConstants.SCOPE, \"repository:read\");\n    request.addBodyParameter(OAuthConstants.SCOPE, \"pullrequest:read\");\n    request.addBodyParameter(OAuthConstants.SCOPE, \"webhook\");\n    request.addBodyParameter(OAuthConstants.SCOPE, \"account:read\");\n    request.addBodyParameter(OAuthConstants.SCOPE, \"team:read\");\n    request.addBodyParameter(OAuthConstants.SCOPE, \"issue:read\");\n    request.addBodyParameter(OAuthConstants.SCOPE, \"repository:write\");\n    request.addBodyParameter(OAuthConstants.SCOPE, \"pullrequest:write\");\n    request.addBodyParameter(OAuthConstants.SCOPE, \"account:write\");\n    request.addBodyParameter(OAuthConstants.SCOPE, \"team:write\");\n    request.addBodyParameter(OAuthConstants.SCOPE, \"issue:write\");\n    request.addBodyParameter(OAuthConstants.SCOPE, \"repository:admin\");\n    request.addBodyParameter(OAuthConstants.SCOPE, \"pullrequest:write:admin\");\n    request.addBodyParameter(OAuthConstants.SCOPE, \"account:write\");\n    request.addBodyParameter(OAuthConstants.SCOPE, \"team:write\");\n    request.addBodyParameter(OAuthConstants.SCOPE, \"issue:write\");\n    request.addBodyParameter(OAuthConstants.SCOPE, \"repository:delete\");\n    request.addBody", "CodeBleu_score": 48.463931587684854}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tOAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());\n    request.addBodyParameter(OAuthConstants.CLIENT_ID, config.getApiKey());\n    request.addBodyParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret());\n    request.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n    request.addBodyParameter(GRANT_TYPE_KEY, GRANT_TYPE_CLIENT_CREDENTIALS);\n    request.addHeader(OAuthConstants.HEADER, getAuthorizationHeader(requestToken));\n    Response response = request.send();\n    return api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 71.94841429982478}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\tCredentialsProvider credsProvider = (CredentialsProvider) context.getAttribute(HttpClientContext.CREDS_PROVIDER);\n    if (credsProvider == null) {\n        credsProvider = new BasicCredentialsProvider();\n        context.setAttribute(HttpClientContext.CREDS_PROVIDER, credsProvider);\n    }\n    credsProvider.setCredentials(\n            new AuthScope(host.getHostName(), host.getPort()),\n            httpCredentials\n    );\n\n    // Create AuthCache instance\n    AuthCache authCache = (AuthCache) context.getAttribute(HttpClientContext.AUTH_CACHE);\n    if (authCache == null) {\n        authCache = new BasicAuthCache();\n        context.setAttribute(HttpClientContext.AUTH_CACHE, authCache);\n    }\n    // Generate BASIC scheme object and add it to the local\n    // auth cache\n    BasicScheme basicAuth = new BasicScheme();\n    authCache.put(host, basicAuth);\n\n    LOGGER.log(Level.FINE, \"Added host {0} to auth cache\", host);\n}", "CodeBleu_score": 46.413419017839544}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(AuthScope.ANY, httpCredentials);\n    AuthCache authCache = new BasicAuthCache();\n    BasicScheme basicAuth = new BasicScheme();\n    authCache.put(host, basicAuth);\n    context.setCredentialsProvider(credsProvider);\n    context.setAuthCache(authCache);\n    LOGGER.log(Level.FINE, \"Added {0} to auth cache\", host);\n}", "CodeBleu_score": 68.63195638010126}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(AuthScope.ANY, httpCredentials);\n    context.setCredentialsProvider(credsProvider);\n    AuthCache authCache = new BasicAuthCache();\n    BasicScheme basicAuth = new BasicScheme();\n    authCache.put(host, basicAuth);\n    context.setAuthCache(authCache);\n    LOGGER.log(Level.FINE, \"Adding host {0} to auth cache\", host.getHostName());\n}", "CodeBleu_score": 54.50148183172926}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tJenkins jenkins = Jenkins.get();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins instance is not available\");\n    }\n    AvatarCache cache = ExtensionList.lookup(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache is not available\");\n    }\n    String key = cache.seed(source);\n    try {\n        return jenkins.getRootUrl() + \"custom-avatar-cache/\" + URLEncoder.encode(key, \"UTF-8\") + \"/\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding is not supported\", e);\n    }\n}", "CodeBleu_score": 50.35284308217244}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tJenkins jenkins = Jenkins.getInstanceOrNull();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"No Jenkins instance\");\n    }\n    AvatarCache cache = ExtensionList.lookup(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"No AvatarCache instance\");\n    }\n    String key = cache.seedCache(source);\n    try {\n        return jenkins.getRootUrl() + \"custom-avatar-cache/\" + URLEncoder.encode(key, StandardCharsets.UTF_8) + \"/\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 not supported\", e);\n    }\n}", "CodeBleu_score": 51.688179444701795}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tJenkins jenkins = Jenkins.get();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Cannot build avatar URL outside of a request handling thread\");\n    }\n    AvatarCache cache = ExtensionList.lookupSingleton(AvatarCache.class);\n    if (cache == null) {\n        throw new IllegalStateException(\"Cannot build avatar URL without an AvatarCache extension\");\n    }\n    String key = cache.getCacheKey(source);\n    cache.seedCache(key, source);\n    try {\n        return jenkins.getRootUrl() + \"custom-avatar-cache/\" + URLEncoder.encode(key, \"UTF-8\") + \"?size=\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding not supported\", e);\n    }\n}", "CodeBleu_score": 50.1811034713277}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t;\n    }", "CodeBleu_score": 6.3726230641916235}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t;\n    }", "CodeBleu_score": 6.3726230641916235}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t;\n    }", "CodeBleu_score": 6.3726230641916235}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t');\n        // we will only resize images in the 16x16 - 128x128 range\n        if (index < 2) {\n            try {\n                targetSize = Math.min(128, Math.max(16, Integer.parseInt(StringUtils.trim(size))));\n            } catch (NumberFormatException e) {\n                // ignore\n            }\n        } else {\n            try {\n                targetSize = Math.min(128, Math.max(16, Integer.parseInt(StringUtils.trim(size.substring(0, index)))));\n            } catch (NumberFormatException e) {\n                // ignore\n            }\n        }\n        final CacheEntry avatar = getCacheEntry(key, null);\n        final long since = req.getDateHeader(\\\"If-Modified-Since\\\");\n\n        // If no avatar, all is unmodified\n        if (avatar == null || !avatar.canFetch()) {\n            if (startedTime <= since) {\n                return new HttpResponse() {\n                    @Override\n                    public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                            throws IOException, ServletException {\n                        rsp.addDateHeader(\\\"Last-Modified\\\", startedTime);\n                        rsp.addHeader(\\\"Cache-control\\\", \\\"max-age=365000000, immutable, public\\\");\n                        rsp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                    }\n                };\n            }\n            // we will generate avatars if the URL is not HTTP based\n            // since the url string will not magically turn itself into a HTTP url this\n            // avatar is immutable\n            return new ImageResponse(generateAvatar(avatar == null ? \\\"\\\" : avatar.source.hashKey(), targetSize), true,\n                    startedTime, \\\"max-age=365000000, immutable, public\\\");\n        }\n\n        if (avatar.pending() && avatar.image == null) {\n            // serve a temporary avatar until we get the remote one, no caching as we could\n            // have the real deal\n            // real soon now\n            return new ImageResponse(generateAvatar(avatar.source.hashKey(), targetSize), true, -1L,\n                    \\\"no-cache, public\\\");\n        }\n        if (avatar.lastModified <= since) {\n            return new HttpResponse() {\n\n                @Override\n                public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                        throws IOException, ServletException {\n                    rsp.addDateHeader(\\\"Last-Modified\\\", avatar.lastModified);\n                    rsp.addHeader(\\\"Cache-control\\\", \\\"max-age=3600, public\\\");\n                    rsp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                }\n            };\n        }\n        // If no image, generate a temp avatar\n        if (avatar.image == null) {\n            // we can retry in an hour\n            return new ImageResponse(generateAvatar(avatar.source.hashKey(), targetSize), true, -1L,\n                    \\\"max-age=3600, public\\\");\n        }\n\n        BufferedImage image = avatar.image;\n        boolean flushImage = false;\n        if (image.getWidth() != targetSize || image.getHeight() != targetSize) {\n            image = scaleImage(image, targetSize);\n            flushImage = true;\n        }\n        return new ImageResponse(image, flushImage, avatar.lastModified, \\\"max-age=3600, public\\\");\n    }", "CodeBleu_score": 28.26258490588994}, {"code": "private synchronized boolean pending(){\n\t');\n        // we will only resize images in the 16x16 - 128x128 range\n        if (index < 2) {\n            try {\n                targetSize = Math.min(128, Math.max(16, Integer.parseInt(StringUtils.trim(size))));\n            } catch (NumberFormatException e) {\n                // ignore\n            }\n        } else {\n            try {\n                targetSize = Math.min(128, Math.max(16, Integer.parseInt(StringUtils.trim(size.substring(0, index)))));\n            } catch (NumberFormatException e) {\n                // ignore\n            }\n        }\n        final CacheEntry avatar = getCacheEntry(key, null);\n        final long since = req.getDateHeader(\\\"If-Modified-Since\\\");\n\n        // If no avatar, all is unmodified\n        if (avatar == null || !avatar.canFetch()) {\n            if (startedTime <= since) {\n                return new HttpResponse() {\n                    @Override\n                    public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                            throws IOException, ServletException {\n                        rsp.addDateHeader(\\\"Last-Modified\\\", startedTime);\n                        rsp.addHeader(\\\"Cache-control\\\", \\\"max-age=365000000, immutable, public\\\");\n                        rsp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                    }\n                };\n            }\n            // we will generate avatars if the URL is not HTTP based\n            // since the url string will not magically turn itself into a HTTP url this\n            // avatar is immutable\n            return new ImageResponse(generateAvatar(avatar == null ? \\\"\\\" : avatar.source.hashKey(), targetSize), true,\n                    startedTime, \\\"max-age=365000000, immutable, public\\\");\n        }\n\n        if (avatar.pending() && avatar.image == null) {\n            // serve a temporary avatar until we get the remote one, no caching as we could\n            // have the real deal\n            // real soon now\n            return new ImageResponse(generateAvatar(avatar.source.hashKey(), targetSize), true, -1L,\n                    \\\"no-cache, public\\\");\n        }\n        if (avatar.lastModified <= since) {\n            return new HttpResponse() {\n\n                @Override\n                public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                        throws IOException, ServletException {\n                    rsp.addDateHeader(\\\"Last-Modified\\\", avatar.lastModified);\n                    rsp.addHeader(\\\"Cache-control\\\", \\\"max-age=3600, public\\\");\n                    rsp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                }\n            };\n        }\n        // If no image, generate a temp avatar\n        if (avatar.image == null) {\n            // we can retry in an hour\n            return new ImageResponse(generateAvatar(avatar.source.hashKey(), targetSize), true, -1L,\n                    \\\"max-age=3600, public\\\");\n        }\n\n        BufferedImage image = avatar.image;\n        boolean flushImage = false;\n        if (image.getWidth() != targetSize || image.getHeight() != targetSize) {\n            image = scaleImage(image, targetSize);\n            flushImage = true;\n        }\n        return new ImageResponse(image, flushImage, avatar.lastModified, \\\"max-age=3600, public\\\");\n    }", "CodeBleu_score": 28.26258490588994}, {"code": "private synchronized boolean pending(){\n\t');\n        // we will only resize images in the 16x16 - 128x128 range\n        if (index < 2) {\n            try {\n                targetSize = Math.min(128, Math.max(16, Integer.parseInt(StringUtils.trim(size))));\n            } catch (NumberFormatException e) {\n                // ignore\n            }\n        } else {\n            try {\n                targetSize = Math.min(128, Math.max(16, Integer.parseInt(StringUtils.trim(size.substring(0, index)))));\n            } catch (NumberFormatException e) {\n                // ignore\n            }\n        }\n        final CacheEntry avatar = getCacheEntry(key, null);\n        final long since = req.getDateHeader(\\\"If-Modified-Since\\\");\n\n        // If no avatar, all is unmodified\n        if (avatar == null || !avatar.canFetch()) {\n            if (startedTime <= since) {\n                return new HttpResponse() {\n                    @Override\n                    public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                            throws IOException, ServletException {\n                        rsp.addDateHeader(\\\"Last-Modified\\\", startedTime);\n                        rsp.addHeader(\\\"Cache-control\\\", \\\"max-age=365000000, immutable, public\\\");\n                        rsp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                    }\n                };\n            }\n            // we will generate avatars if the URL is not HTTP based\n            // since the url string will not magically turn itself into a HTTP url this\n            // avatar is immutable\n            return new ImageResponse(generateAvatar(avatar == null ? \\\"\\\" : avatar.source.hashKey(), targetSize), true,\n                    startedTime, \\\"max-age=365000000, immutable, public\\\");\n        }\n\n        if (avatar.pending() && avatar.image == null) {\n            // serve a temporary avatar until we get the remote one, no caching as we could\n            // have the real deal\n            // real soon now\n            return new ImageResponse(generateAvatar(avatar.source.hashKey(), targetSize), true, -1L,\n                    \\\"no-cache, public\\\");\n        }\n        if (avatar.lastModified <= since) {\n            return new HttpResponse() {\n\n                @Override\n                public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                        throws IOException, ServletException {\n                    rsp.addDateHeader(\\\"Last-Modified\\\", avatar.lastModified);\n                    rsp.addHeader(\\\"Cache-control\\\", \\\"max-age=3600, public\\\");\n                    rsp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                }\n            };\n        }\n        // If no image, generate a temp avatar\n        if (avatar.image == null) {\n            // we can retry in an hour\n            return new ImageResponse(generateAvatar(avatar.source.hashKey(), targetSize), true, -1L,\n                    \\\"max-age=3600, public\\\");\n        }\n\n        BufferedImage image = avatar.image;\n        boolean flushImage = false;\n        if (image.getWidth() != targetSize || image.getHeight() != targetSize) {\n            image = scaleImage(image, targetSize);\n            flushImage = true;\n        }\n        return new ImageResponse(image, flushImage, avatar.lastModified, \\\"max-age=3600, public\\\");\n    }", "CodeBleu_score": 28.26258490588994}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t           return new ImageResponse(generateAvatar(avatar.source.hashKey(), targetSize), true, -1L,\n                    \\\"no-cache, public\\\");\n        }", "CodeBleu_score": 13.051076738534718}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t           return new ImageResponse(generateAvatar(avatar.source.hashKey(), targetSize), true, -1L,\n                    \\\"no-cache, public\\\");\n        }", "CodeBleu_score": 13.051076738534718}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t           return new ImageResponse(generateAvatar(avatar.source.hashKey(), targetSize), true, -1L,\n                    \\\"no-cache, public\\\");\n        }", "CodeBleu_score": 13.051076738534718}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tbucketPullRequestValue;", "CodeBleu_score": 7.504665870882987}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tbucketPullRequestValue;", "CodeBleu_score": 7.504665870882987}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tbucketPullRequestValue;", "CodeBleu_score": 7.504665870882987}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t_URL = \\\"https://api.bitbucket.org/2.0/repositories\\\";\n    private static final String V2_WORKSPACES_API_BASE_URL = \\\"https://api.bitbucket.org/2.0/workspaces\\\";\n    private static final String REPO_URL_TEMPLATE = V2_API_BASE_URL + \\\"{/owner,repo}\\\";\n    private static final int API_RATE_LIMIT_CODE = 429;\n    // Limit images to 16k\n    private static final int MAX_AVATAR_LENGTH = 16384;\n    private static final int MAX_PAGE_LENGTH = 100;\n    private static final PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();\n    private CloseableHttpClient client;\n    private HttpClientContext context;\n    private final String owner;\n    private final String projectKey;\n    private final String repositoryName;\n    private final boolean enableCache;\n    private final BitbucketAuthenticator authenticator;\n    private static final Cache<String, BitbucketTeam> cachedTeam = new Cache<>(6, HOURS);\n    private static final Cache<String, AvatarImage> cachedAvatar = new Cache<>(6, HOURS);\n    private static final Cache<String, List<BitbucketCloudRepository>> cachedRepositories = new Cache<>(3, HOURS);\n    private static final Cache<String, BitbucketCloudCommit> cachedCommits = new Cache<>(24, HOURS);\n    private transient BitbucketRepository cachedRepository;\n    private transient String cachedDefaultBranch;\n\n    static {\n        connectionManager.setDefaultMaxPerRoute(20);\n        connectionManager.setMaxTotal(22);\n        connectionManager.setSocketConfig(API_HOST, SocketConfig.custom().setSoTimeout(60 * 1000).build());\n    }\n\n    public static List<String> stats() {\n        List<String> stats = new ArrayList<>();\n        stats.add(\\\"Team: \\\" + cachedTeam.stats().toString());\n        stats.add(\\\"Repositories : \\\" + cachedRepositories.stats().toString());\n        stats.add(\\\"Commits: \\\" + cachedCommits.stats().toString());\n        return stats;\n    }\n\n    public static void clearCaches() {\n        cachedTeam.evictAll();\n        cachedRepositories.evictAll();\n        cachedCommits.evictAll();\n    }\n\n    @Deprecated\n    public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n                                   String owner, String repositoryName, StandardUsernamePasswordCredentials credentials) {\n        this(enableCache, teamCacheDuration, repositoriesCacheDuration, owner, null, repositoryName,\n                new BitbucketUsernamePasswordAuthenticator(credentials));\n    }\n\n    public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator) {\n        this.authenticator = authenticator;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.enableCache = enableCache;\n        if (enableCache) {\n            cachedTeam.setExpireDuration(teamCacheDuration, MINUTES);\n            cachedRepositories.setExpireDuration(repositoriesCacheDuration, MINUTES);\n        }\n\n        // Create Http client\n        HttpClientBuilder httpClientBuilder = HttpClientBuilder.create();\n\n        httpClientBuilder.setKeepAliveStrategy((__, ___) -> MILLISECONDS.convert(5, SECONDS));\n        httpClientBuilder.setConnectionManager(connectionManager);\n        httpClientBuilder.setConnectionManagerShared(true);\n        httpClientBuilder.setRetryHandler(new StandardHttpRequestRetryHandler());\n\n        if (authenticator != null) {\n            authenticator.configureBuilder(httpClientBuilder);\n\n            context = HttpClientContext.create();\n            authenticator.configureContext(context, API_HOST);\n        }\n\n        setClientProxyParams(\\\"bitbucket.org\\\", httpClientBuilder);\n\n        this.client = httpClientBuilder.build();\n    }\n\n    @Override\n    protected void finalize() throws Throwable {\n        if (client != null) {\n            client.close();\n        }\n\n        super.finalize();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @NonNull\n    @Override\n    public String getOwner() {\n        return owner;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    @CheckForNull\n    public String getRepositoryName() {\n        return repositoryName;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @NonNull\n    @Override\n    public List<BitbucketPullRequestValue> getPullRequests() throws InterruptedException, IOException {\n        List<BitbucketPullRequestValue> pullRequests = new ArrayList<>();\n\n        // we can not use the default max pagelen also if documented\n        // https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests#get\n        // so because with values greater than 50 the API returns HTTP 400\n        int pageLen = 50;\n        UriTemplate template = UriTemplate.fromTemplate(REPO_URL_TEMPLATE + \\\"/pullrequests{?page,pagelen}\\\")\n                .set(\\\"owner\\\", owner)\n                .set(\\\"repo\\\", repositoryName)\n                .set(\\\"pagelen\\\", pageLen);\n\n        BitbucketPullRequests page;\n        int pageNumber = 1;\n        do {\n            if (Thread.interrupted()) {\n                throw new InterruptedException();\n            }\n            String url = template //\n                    .set(\\\"page\\\", pageNumber++) //\n                    .expand();\n            String response = getRequest(url);\n            try {\n                page = JsonParser.toJava(response, BitbucketPullRequests.class);\n            } catch (IOException e) {\n                throw new IOException(\\\"I/O error when parsing response from URL: \\\" + url, e);\n            }\n            pullRequests.addAll(page.getValues());\n        } while (page.getNext() != null);\n\n        // PRs with missing destination branch are invalid and should be ignored.\n        pullRequests.removeIf(this::shouldIgnore);\n\n        for (BitbucketPullRequestValue pullRequest : pullRequests) {\n            setupClosureForPRBranch(pullRequest);\n        }\n\n        return pullRequests;\n    }\n\n    /**\n     * PRs with missing source / destination branch are invalid and should be ignored.\n     *\n     * @param pr a {@link BitbucketPullRequest}\n     * @return whether the PR should be ignored\n     */\n    private boolean shouldIgnore(BitbucketPullRequest pr) {\n        return pr.getSource().getRepository() == null\n            || pr.getSource().getCommit() == null\n            || pr.getDestination().getBranch() == null\n            || pr.getDestination().getCommit() == null;\n    }\n\n    /**\n     * Make available commit information in a lazy way.\n     *\n     * @author Nikolas Falco\n     */\n    private class CommitClosure implements Callable<BitbucketCommit> {\n        private final String hash;\n\n        public CommitClosure(@NonNull String hash) {\n            this.hash = hash;\n        }\n\n        @Override\n        public BitbucketCommit call() throws Exception {\n            return resolveCommit(hash);\n        }\n    }\n\n\n\n", "CodeBleu_score": 5.064932050291124}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t_URL = \\\"https://api.bitbucket.org/2.0/repositories\\\";\n    private static final String V2_WORKSPACES_API_BASE_URL = \\\"https://api.bitbucket.org/2.0/workspaces\\\";\n    private static final String REPO_URL_TEMPLATE = V2_API_BASE_URL + \\\"{/owner,repo}\\\";\n    private static final int API_RATE_LIMIT_CODE = 429;\n    // Limit images to 16k\n    private static final int MAX_AVATAR_LENGTH = 16384;\n    private static final int MAX_PAGE_LENGTH = 100;\n    private static final PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();\n    private CloseableHttpClient client;\n    private HttpClientContext context;\n    private final String owner;\n    private final String projectKey;\n    private final String repositoryName;\n    private final boolean enableCache;\n    private final BitbucketAuthenticator authenticator;\n    private static final Cache<String, BitbucketTeam> cachedTeam = new Cache<>(6, HOURS);\n    private static final Cache<String, AvatarImage> cachedAvatar = new Cache<>(6, HOURS);\n    private static final Cache<String, List<BitbucketCloudRepository>> cachedRepositories = new Cache<>(3, HOURS);\n    private static final Cache<String, BitbucketCloudCommit> cachedCommits = new Cache<>(24, HOURS);\n    private transient BitbucketRepository cachedRepository;\n    private transient String cachedDefaultBranch;\n\n    static {\n        connectionManager.setDefaultMaxPerRoute(20);\n        connectionManager.setMaxTotal(22);\n        connectionManager.setSocketConfig(API_HOST, SocketConfig.custom().setSoTimeout(60 * 1000).build());\n    }\n\n    public static List<String> stats() {\n        List<String> stats = new ArrayList<>();\n        stats.add(\\\"Team: \\\" + cachedTeam.stats().toString());\n        stats.add(\\\"Repositories : \\\" + cachedRepositories.stats().toString());\n        stats.add(\\\"Commits: \\\" + cachedCommits.stats().toString());\n        return stats;\n    }\n\n    public static void clearCaches() {\n        cachedTeam.evictAll();\n        cachedRepositories.evictAll();\n        cachedCommits.evictAll();\n    }\n\n    @Deprecated\n    public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n                                   String owner, String repositoryName, StandardUsernamePasswordCredentials credentials) {\n        this(enableCache, teamCacheDuration, repositoriesCacheDuration, owner, null, repositoryName,\n                new BitbucketUsernamePasswordAuthenticator(credentials));\n    }\n\n    public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator) {\n        this.authenticator = authenticator;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.enableCache = enableCache;\n        if (enableCache) {\n            cachedTeam.setExpireDuration(teamCacheDuration, MINUTES);\n            cachedRepositories.setExpireDuration(repositoriesCacheDuration, MINUTES);\n        }\n\n        // Create Http client\n        HttpClientBuilder httpClientBuilder = HttpClientBuilder.create();\n\n        httpClientBuilder.setKeepAliveStrategy((__, ___) -> MILLISECONDS.convert(5, SECONDS));\n        httpClientBuilder.setConnectionManager(connectionManager);\n        httpClientBuilder.setConnectionManagerShared(true);\n        httpClientBuilder.setRetryHandler(new StandardHttpRequestRetryHandler());\n\n        if (authenticator != null) {\n            authenticator.configureBuilder(httpClientBuilder);\n\n            context = HttpClientContext.create();\n            authenticator.configureContext(context, API_HOST);\n        }\n\n        setClientProxyParams(\\\"bitbucket.org\\\", httpClientBuilder);\n\n        this.client = httpClientBuilder.build();\n    }\n\n    @Override\n    protected void finalize() throws Throwable {\n        if (client != null) {\n            client.close();\n        }\n\n        super.finalize();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @NonNull\n    @Override\n    public String getOwner() {\n        return owner;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    @CheckForNull\n    public String getRepositoryName() {\n        return repositoryName;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @NonNull\n    @Override\n    public List<BitbucketPullRequestValue> getPullRequests() throws InterruptedException, IOException {\n        List<BitbucketPullRequestValue> pullRequests = new ArrayList<>();\n\n        // we can not use the default max pagelen also if documented\n        // https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests#get\n        // so because with values greater than 50 the API returns HTTP 400\n        int pageLen = 50;\n        UriTemplate template = UriTemplate.fromTemplate(REPO_URL_TEMPLATE + \\\"/pullrequests{?page,pagelen}\\\")\n                .set(\\\"owner\\\", owner)\n                .set(\\\"repo\\\", repositoryName)\n                .set(\\\"pagelen\\\", pageLen);\n\n        BitbucketPullRequests page;\n        int pageNumber = 1;\n        do {\n            if (Thread.interrupted()) {\n                throw new InterruptedException();\n            }\n            String url = template //\n                    .set(\\\"page\\\", pageNumber++) //\n                    .expand();\n            String response = getRequest(url);\n            try {\n                page = JsonParser.toJava(response, BitbucketPullRequests.class);\n            } catch (IOException e) {\n                throw new IOException(\\\"I/O error when parsing response from URL: \\\" + url, e);\n            }\n            pullRequests.addAll(page.getValues());\n        } while (page.getNext() != null);\n\n        // PRs with missing destination branch are invalid and should be ignored.\n        pullRequests.removeIf(this::shouldIgnore);\n\n        for (BitbucketPullRequestValue pullRequest : pullRequests) {\n            setupClosureForPRBranch(pullRequest);\n        }\n\n        return pullRequests;\n    }\n\n    /**\n     * PRs with missing source / destination branch are invalid and should be ignored.\n     *\n     * @param pr a {@link BitbucketPullRequest}\n     * @return whether the PR should be ignored\n     */\n    private boolean shouldIgnore(BitbucketPullRequest pr) {\n        return pr.getSource().getRepository() == null\n            || pr.getSource().getCommit() == null\n            || pr.getDestination().getBranch() == null\n            || pr.getDestination().getCommit() == null;\n    }\n\n    /**\n     * Make available commit information in a lazy way.\n     *\n     * @author Nikolas Falco\n     */\n    private class CommitClosure implements Callable<BitbucketCommit> {\n        private final String hash;\n\n        public CommitClosure(@NonNull String hash) {\n            this.hash = hash;\n        }\n\n        @Override\n        public BitbucketCommit call() throws Exception {\n            return resolveCommit(hash);\n        }\n    }\n\n\n\n", "CodeBleu_score": 5.064932050291124}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t_URL = \\\"https://api.bitbucket.org/2.0/repositories\\\";\n    private static final String V2_WORKSPACES_API_BASE_URL = \\\"https://api.bitbucket.org/2.0/workspaces\\\";\n    private static final String REPO_URL_TEMPLATE = V2_API_BASE_URL + \\\"{/owner,repo}\\\";\n    private static final int API_RATE_LIMIT_CODE = 429;\n    // Limit images to 16k\n    private static final int MAX_AVATAR_LENGTH = 16384;\n    private static final int MAX_PAGE_LENGTH = 100;\n    private static final PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();\n    private CloseableHttpClient client;\n    private HttpClientContext context;\n    private final String owner;\n    private final String projectKey;\n    private final String repositoryName;\n    private final boolean enableCache;\n    private final BitbucketAuthenticator authenticator;\n    private static final Cache<String, BitbucketTeam> cachedTeam = new Cache<>(6, HOURS);\n    private static final Cache<String, AvatarImage> cachedAvatar = new Cache<>(6, HOURS);\n    private static final Cache<String, List<BitbucketCloudRepository>> cachedRepositories = new Cache<>(3, HOURS);\n    private static final Cache<String, BitbucketCloudCommit> cachedCommits = new Cache<>(24, HOURS);\n    private transient BitbucketRepository cachedRepository;\n    private transient String cachedDefaultBranch;\n\n    static {\n        connectionManager.setDefaultMaxPerRoute(20);\n        connectionManager.setMaxTotal(22);\n        connectionManager.setSocketConfig(API_HOST, SocketConfig.custom().setSoTimeout(60 * 1000).build());\n    }\n\n    public static List<String> stats() {\n        List<String> stats = new ArrayList<>();\n        stats.add(\\\"Team: \\\" + cachedTeam.stats().toString());\n        stats.add(\\\"Repositories : \\\" + cachedRepositories.stats().toString());\n        stats.add(\\\"Commits: \\\" + cachedCommits.stats().toString());\n        return stats;\n    }\n\n    public static void clearCaches() {\n        cachedTeam.evictAll();\n        cachedRepositories.evictAll();\n        cachedCommits.evictAll();\n    }\n\n    @Deprecated\n    public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n                                   String owner, String repositoryName, StandardUsernamePasswordCredentials credentials) {\n        this(enableCache, teamCacheDuration, repositoriesCacheDuration, owner, null, repositoryName,\n                new BitbucketUsernamePasswordAuthenticator(credentials));\n    }\n\n    public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator) {\n        this.authenticator = authenticator;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.enableCache = enableCache;\n        if (enableCache) {\n            cachedTeam.setExpireDuration(teamCacheDuration, MINUTES);\n            cachedRepositories.setExpireDuration(repositoriesCacheDuration, MINUTES);\n        }\n\n        // Create Http client\n        HttpClientBuilder httpClientBuilder = HttpClientBuilder.create();\n\n        httpClientBuilder.setKeepAliveStrategy((__, ___) -> MILLISECONDS.convert(5, SECONDS));\n        httpClientBuilder.setConnectionManager(connectionManager);\n        httpClientBuilder.setConnectionManagerShared(true);\n        httpClientBuilder.setRetryHandler(new StandardHttpRequestRetryHandler());\n\n        if (authenticator != null) {\n            authenticator.configureBuilder(httpClientBuilder);\n\n            context = HttpClientContext.create();\n            authenticator.configureContext(context, API_HOST);\n        }\n\n        setClientProxyParams(\\\"bitbucket.org\\\", httpClientBuilder);\n\n        this.client = httpClientBuilder.build();\n    }\n\n    @Override\n    protected void finalize() throws Throwable {\n        if (client != null) {\n            client.close();\n        }\n\n        super.finalize();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @NonNull\n    @Override\n    public String getOwner() {\n        return owner;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    @CheckForNull\n    public String getRepositoryName() {\n        return repositoryName;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @NonNull\n    @Override\n    public List<BitbucketPullRequestValue> getPullRequests() throws InterruptedException, IOException {\n        List<BitbucketPullRequestValue> pullRequests = new ArrayList<>();\n\n        // we can not use the default max pagelen also if documented\n        // https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests#get\n        // so because with values greater than 50 the API returns HTTP 400\n        int pageLen = 50;\n        UriTemplate template = UriTemplate.fromTemplate(REPO_URL_TEMPLATE + \\\"/pullrequests{?page,pagelen}\\\")\n                .set(\\\"owner\\\", owner)\n                .set(\\\"repo\\\", repositoryName)\n                .set(\\\"pagelen\\\", pageLen);\n\n        BitbucketPullRequests page;\n        int pageNumber = 1;\n        do {\n            if (Thread.interrupted()) {\n                throw new InterruptedException();\n            }\n            String url = template //\n                    .set(\\\"page\\\", pageNumber++) //\n                    .expand();\n            String response = getRequest(url);\n            try {\n                page = JsonParser.toJava(response, BitbucketPullRequests.class);\n            } catch (IOException e) {\n                throw new IOException(\\\"I/O error when parsing response from URL: \\\" + url, e);\n            }\n            pullRequests.addAll(page.getValues());\n        } while (page.getNext() != null);\n\n        // PRs with missing destination branch are invalid and should be ignored.\n        pullRequests.removeIf(this::shouldIgnore);\n\n        for (BitbucketPullRequestValue pullRequest : pullRequests) {\n            setupClosureForPRBranch(pullRequest);\n        }\n\n        return pullRequests;\n    }\n\n    /**\n     * PRs with missing source / destination branch are invalid and should be ignored.\n     *\n     * @param pr a {@link BitbucketPullRequest}\n     * @return whether the PR should be ignored\n     */\n    private boolean shouldIgnore(BitbucketPullRequest pr) {\n        return pr.getSource().getRepository() == null\n            || pr.getSource().getCommit() == null\n            || pr.getDestination().getBranch() == null\n            || pr.getDestination().getCommit() == null;\n    }\n\n    /**\n     * Make available commit information in a lazy way.\n     *\n     * @author Nikolas Falco\n     */\n    private class CommitClosure implements Callable<BitbucketCommit> {\n        private final String hash;\n\n        public CommitClosure(@NonNull String hash) {\n            this.hash = hash;\n        }\n\n        @Override\n        public BitbucketCommit call() throws Exception {\n            return resolveCommit(hash);\n        }\n    }\n\n\n\n", "CodeBleu_score": 5.064932050291124}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration locationConfiguration = JenkinsLocationConfiguration.get();\n    if (locationConfiguration == null) {\n        throw new IllegalStateException(\"Jenkins location configuration is null\");\n    }\n    String rootURL = locationConfiguration.getUrl();\n    if (StringUtils.isBlank(rootURL)) {\n        throw new IllegalStateException(\"Jenkins root URL is blank\");\n    }\n    DisplayURLProvider displayURLProvider = DisplayURLProvider.get();\n    if (displayURLProvider == null) {\n        throw new IllegalStateException(\"Display URL provider is null\");\n    }\n    String displayURL = displayURLProvider.getRunURL(build);\n    if (StringUtils.isBlank(displayURL)) {\n        throw new IllegalStateException(\"Display URL for build is blank\");\n    }\n    return rootURL + displayURL;\n}", "CodeBleu_score": 45.387878048746785}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration locationConfiguration = JenkinsLocationConfiguration.get();\n    if (locationConfiguration == null || StringUtils.isBlank(locationConfiguration.getUrl())) {\n        throw new IllegalStateException(\"Jenkins Location Configuration is not set.\");\n    }\n    DisplayURLProvider displayURLProvider = DisplayURLProvider.get();\n    if (displayURLProvider == null) {\n        throw new IllegalStateException(\"Display URL Provider is not set.\");\n    }\n    return displayURLProvider.getRunURL(build);\n}", "CodeBleu_score": 50.247920617201714}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration config = JenkinsLocationConfiguration.get();\n    if (config == null || StringUtils.isBlank(config.getUrl())) {\n        throw new IllegalStateException(\"Jenkins location configuration is null or URL is blank\");\n    }\n    DisplayURLProvider provider = DisplayURLProvider.get();\n    return provider.getRunURL(build);\n}", "CodeBleu_score": 50.919891621031134}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\ttry {\n        URL jenkinsURL = new URL(url);\n        String host = jenkinsURL.getHost();\n        if (StringUtils.isEmpty(host)) {\n            throw new IllegalStateException(\"Could not determine Jenkins URL.\");\n        }\n        if (bitbucket instanceof BitbucketCloudApiClient && !host.contains(\".\")) {\n            throw new IllegalStateException(\"Bitbucket Cloud API requires fully qualified or IP hostnames. \" +\n                    \"Please check your Jenkins URL.\");\n        }\n        if (host.equals(\"localhost\") || host.equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"Bitbucket Cloud API does not support localhost or unconfigured-jenkins-location hostnames. \" +\n                    \"Please check your Jenkins URL.\");\n        }\n        return url;\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"Jenkins URL is malformed. Please check your Jenkins URL.\");\n    }\n}", "CodeBleu_score": 64.34239364888332}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\ttry {\n        URL parsed = new URL(url);\n        if (parsed.getHost().equals(\"localhost\")) {\n            throw new IllegalStateException(\"The Jenkins URL must not be \\\"localhost\\\"\");\n        }\n        if (parsed.getHost().equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"The Jenkins URL must be configured\");\n        }\n        if (bitbucket.getDescriptor().getServerUrl().contains(\"bitbucket.org\") && !parsed.getHost().contains(\".\")) {\n            throw new IllegalStateException(\"The Jenkins URL must be fully qualified\");\n        }\n        return url;\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"The Jenkins URL is malformed\", e);\n    }\n}", "CodeBleu_score": 67.26485791193586}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\ttry {\n        URL parsedUrl = new URL(url);\n        String host = parsedUrl.getHost();\n        if (host == null) {\n            throw new IllegalStateException(\"Could not determine Jenkins URL host.\");\n        }\n        if (StringUtils.equalsIgnoreCase(host, \"localhost\")) {\n            throw new IllegalStateException(\"Jenkins URL host must not be 'localhost'.\");\n        }\n        if (StringUtils.equalsIgnoreCase(host, \"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"Jenkins URL host must not be 'unconfigured-jenkins-location'.\");\n        }\n        if (bitbucket instanceof BitbucketCloudApiClient && !host.contains(\".\")) {\n            throw new IllegalStateException(\"Jenkins URL host must be fully qualified for Bitbucket Cloud API.\");\n        }\n        return url;\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"Jenkins URL is malformed.\", e);\n    }\n}", "CodeBleu_score": 62.53637637420694}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t.BitbucketApi;", "CodeBleu_score": 3.568372831151435}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t.BitbucketApi;", "CodeBleu_score": 3.568372831151435}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t.BitbucketApi;", "CodeBleu_score": 3.568372831151435}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t);\n    }", "CodeBleu_score": 9.26149648301191}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t);\n    }", "CodeBleu_score": 9.26149648301191}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t);\n    }", "CodeBleu_score": 9.26149648301191}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\t.cloudbees.jenkins.plugins.bitbucket.endpoints.BitbucketEndpointConfiguration;", "CodeBleu_score": 1.8407589602745098}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t.cloudbees.jenkins.plugins.bitbucket.endpoints.BitbucketEndpointConfiguration;", "CodeBleu_score": 1.8407589602745098}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t.cloudbees.jenkins.plugins.bitbucket.endpoints.BitbucketEndpointConfiguration;", "CodeBleu_score": 1.8407589602745098}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\tNamedArrayList\n                            .anyOf(NamedArrayList.withAnnotation(Discovery.class),\n                                    NamedArrayList.withAnnotation(Selection.class)),\n                    true, result);\n            int insertionPoint = result.size();\n            NamedArrayList.select(all, \\\"Git\\\", it -> GitSCM.class.isAssignableFrom(it.getScmClass()), true, result);\n            NamedArrayList.select(all, \\\"General\\\", null, true, result, insertionPoint);\n            return result;\n        }", "CodeBleu_score": 30.432677953670932}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\tNamedArrayList\n                            .anyOf(NamedArrayList.withAnnotation(Discovery.class),\n                                    NamedArrayList.withAnnotation(Selection.class)),\n                    true, result);\n            int insertionPoint = result.size();\n            NamedArrayList.select(all, \\\"Git\\\", it -> GitSCM.class.isAssignableFrom(it.getScmClass()), true, result);\n            NamedArrayList.select(all, \\\"General\\\", null, true, result, insertionPoint);\n            return result;\n        }", "CodeBleu_score": 30.432677953670932}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\tNamedArrayList\n                            .anyOf(NamedArrayList.withAnnotation(Discovery.class),\n                                    NamedArrayList.withAnnotation(Selection.class)),\n                    true, result);\n            int insertionPoint = result.size();\n            NamedArrayList.select(all, \\\"Git\\\", it -> GitSCM.class.isAssignableFrom(it.getScmClass()), true, result);\n            NamedArrayList.select(all, \\\"General\\\", null, true, result, insertionPoint);\n            return result;\n        }", "CodeBleu_score": 30.432677953670932}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\ttry {\n            List<RefSpec> refSpecs = branchWithHashes.stream()\n                .filter(branchWithHash -> !branchWithHash.isCommitInRepository(git, listener))\n                .map(branchWithHash -> new RefSpec(branchWithHash.getBranch() + \":\" + branchWithHash.getBranch()))\n                .collect(Collectors.toList());\n            if (!refSpecs.isEmpty()) {\n                listener.getLogger().println(\"Fetching missing commits from \" + cloneLink);\n                FetchCommand fetch = git.fetch_().from(new URIish(cloneLink), refSpecs);\n                fetch.execute();\n            }\n        } catch (GitException | URISyntaxException e) {\n            listener.getLogger().println(\"Failed to fetch missing commits from \" + cloneLink);\n            e.printStackTrace(listener.getLogger());\n        }\n        return rev;\n    }", "CodeBleu_score": 52.85745808016107}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tif (rev.getBranches().isEmpty()) {\n            return rev;\n        }\n\n        List<RefSpec> refSpecs = rev.getBranches().stream()\n                .filter(b -> branchWithHashes.stream().anyMatch(bh -> b.getName().equals(bh.getBranchName()) && !bh.getCommitHash().isEmpty()))\n                .map(b -> new RefSpec(String.format(\"%s:%s\", b.getName(), b.getName())))\n                .collect(Collectors.toList());\n\n        if (refSpecs.isEmpty()) {\n            return rev;\n        }\n\n        try {\n            listener.getLogger().println(\"Fetching missing commits from remote repository: \" + cloneLink);\n            FetchCommand fetch = git.fetch_();\n            fetch.from(new URIish(cloneLink), refSpecs);\n            fetch.execute();\n        } catch (GitException | URISyntaxException e) {\n            listener.getLogger().println(\"Failed to fetch missing commits from remote repository: \" + cloneLink);\n            listener.getLogger().println(e.getMessage());\n            listener.getLogger().println(\"Continuing with the build...\");\n        }\n\n        return rev;\n    }", "CodeBleu_score": 46.15769510630871}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\ttry {\n            List<RefSpec> refSpecs = branchWithHashes.stream()\n                .filter(branchWithHash -> !git.hasGitObject(branchWithHash.getHash()))\n                .map(branchWithHash -> new RefSpec(branchWithHash.getHash() + \":\" + branchWithHash.getBranch()))\n                .collect(Collectors.toList());\n\n            if (refSpecs.size() > 0) {\n                listener.getLogger().println(\"Fetching \" + refSpecs.size() + \" branch(es) from \" + cloneLink);\n                git.fetch_().from(new URIish(cloneLink), refSpecs.toArray(new RefSpec[refSpecs.size()])).execute();\n            }\n        } catch (GitException | URISyntaxException e) {\n            listener.getLogger().println(\"Failed to fetch branches from \" + cloneLink + \": \" + e.getMessage());\n        }\n\n        return rev;\n    }", "CodeBleu_score": 46.722524160922156}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\tif (links == null) {\n        return null;\n    }\n\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        List<BitbucketHref> hrefs = entry.getValue();\n        if (hrefs != null && !hrefs.isEmpty()) {\n            result.put(entry.getKey(), hrefs.get(0));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 73.61472422085447}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\tif (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> newLinks = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        if (entry.getValue() != null && !entry.getValue().isEmpty()) {\n            newLinks.put(entry.getKey(), entry.getValue().get(0));\n        }\n    }\n    return newLinks;\n}", "CodeBleu_score": 73.75578994914012}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\tif (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        if (entry.getValue() != null && !entry.getValue().isEmpty()) {\n            result.put(entry.getKey(), entry.getValue().get(0));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 80.53896819896102}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\tif (resourceStates.length === 0) {\n    return;\n  }\n\n  const selectedResources = resourceStates.filter(\n    (resourceState) => resourceState.resourceUri\n  );\n\n  if (selectedResources.length === 0) {\n    return;\n  }\n\n  const selectedResourceUris = selectedResources.map(\n    (resourceState) => resourceState.resourceUri\n  );\n\n  const repositories = await this.repositoryTracker.getRepositories();\n\n  if (repositories.length === 0) {\n    return;\n  }\n\n  for (const repository of repositories) {\n    const resourcePaths = selectedResourceUris.map((resourceUri) =>\n      repository.toPath(resourceUri)\n    );\n\n    try {\n      await repository.add(resourcePaths);\n    } catch (e) {\n      this.logger.error(e);\n      void window.showErrorMessage(\n        `Unable to add ${resourcePaths.length} resources to repository ${repository.rootUri}`\n      );\n    }\n  }\n}", "CodeBleu_score": 44.19474665362212}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\tif (resourceStates.length === 0) {\n    return;\n  }\n\n  const uris = resourceStates.map(r => r.resourceUri);\n  const repos = this.getRepositories(uris);\n\n  for (const repo of repos) {\n    const paths = this.toPaths(repo, uris);\n    const result = await this.runByRepository(repo, 'add', paths);\n\n    if (result.exitCode) {\n      this.logger.appendLine(`Error code ${result.exitCode} while adding ${paths.join(', ')}`);\n      this.logger.appendLine(result.stderr);\n      window.showErrorMessage(`Unable to add ${paths.join(', ')}`);\n    }\n  }\n}", "CodeBleu_score": 52.73841831295959}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\tconst resources = await this.getSCMResources(resourceStates);\n  if (!resources) {\n    return;\n  }\n\n  const repos = resources.map(r => r.resourceUri.authority).filter((value, index, self) => self.indexOf(value) === index);\n  for (const repo of repos) {\n    const resourcesForRepo = resources.filter(r => r.resourceUri.authority === repo);\n    const files = resourcesForRepo.map(r => r.resourceUri.fsPath);\n    try {\n      await this.repository.add(repo, files);\n    } catch (err) {\n      this.logger.error(err);\n      window.showErrorMessage(`Unable to add resources to repository: ${err}`);\n    }\n  }\n}", "CodeBleu_score": 48.21491651935991}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\tconst resourceStates = await this.getResourceStates(resourceStates);\n\n  return resourceStates.filter(resourceState => resourceState instanceof Resource);\n}", "CodeBleu_score": 21.680362429476773}, {"code": "protected async getResourceStates{\n\tconst resourceStates = args[1] as SourceControlResourceState[];\n    if (resourceStates.length === 0 || !(resourceStates[0].resourceUri instanceof Uri)) {\n      const resource = await this.getSingleResource();\n      if (!resource) {\n        return [];\n      }\n\n      resourceStates.push(resource);\n    }\n\n    return resourceStates.filter(resource => resource instanceof Resource);\n  }", "CodeBleu_score": 60.32371694501384}, {"code": "protected async getResourceStates{\n\tconst resourceStates = await this.getSourceControlResourceStates();\n\n  if (resourceStates.length === 0 || !(resourceStates[0].resourceUri instanceof Uri)) {\n    const resource = await this.getSingleSourceControlResource();\n\n    if (resource) {\n      resourceStates.push(resource);\n    }\n  }\n\n  return resourceStates.filter(resource => resource instanceof Resource);\n}", "CodeBleu_score": 52.62778216573179}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\tconst activeTextEditor = window.activeTextEditor;\n\n    if (!uri) {\n      if (!activeTextEditor) {\n        return undefined;\n      }\n\n      uri = activeTextEditor.document.uri;\n    }\n\n    if (uri.scheme === \\\"svn\\\") {\n      uri = Uri.file(uri.path);\n    }\n\n    const sourceControlManager = (await commands.executeCommand(\n      \\\"svn.getSourceControlManager\\\",\n      \\\"\\\"\n    )) as SourceControlManager;\n    const repository = sourceControlManager.getRepository(uri);\n\n    if (!repository) {\n      return undefined;\n    }\n\n    return repository.getResource(uri);\n  }", "CodeBleu_score": 48.94656583782877}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\tconst activeTextEditor = window.activeTextEditor;\n\n    if (!uri) {\n      if (!activeTextEditor) {\n        return undefined;\n      }\n\n      uri = activeTextEditor.document.uri;\n    }\n\n    if (uri.scheme === \\\"svn\\\") {\n      uri = uri.with({ scheme: \\\"file\\\" });\n    }\n\n    const sourceControlManager = (await commands.executeCommand(\n      \\\"svn.getSourceControlManager\\\",\n      \\\"\\\"\n    )) as SourceControlManager;\n    const repository = sourceControlManager.getRepository(uri);\n\n    if (!repository) {\n      return undefined;\n    }\n\n    return repository.getResource(uri);\n  }", "CodeBleu_score": 46.35317821277216}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\turi = uri || window.activeTextEditor?.document.uri;\n\n    if (!uri) {\n      return undefined;\n    }\n\n    if (uri.scheme === \\\"svn\\\") {\n      uri = uri.with({ scheme: \\\"file\\\" });\n    }\n\n    const sourceControlManager = (await commands.executeCommand(\n      \\\"svn.getSourceControlManager\\\",\n      \\\"\\\"\n    )) as SourceControlManager;\n\n    const repository = sourceControlManager.getRepository(uri);\n\n    if (!repository) {\n      return undefined;\n    }\n\n    return repository.getResource(uri);\n  }", "CodeBleu_score": 44.64726527177456}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\tif (element.item === Status.MODIFIED) {\n      const remoteRepo = await this.model.getRemoteRepository(\n        element.repo.rootUri\n      );\n\n      if (remoteRepo) {\n        await openDiff(\n          remoteRepo,\n          element.oldPath,\n          element.oldRevision,\n          element.newPath,\n          element.newRevision\n        );\n      }\n    } else if (element.item === Status.ADDED) {\n      const remoteRepo = await this.model.getRemoteRepository(\n        element.repo.rootUri\n      );\n\n      if (remoteRepo) {\n        await openFileRemote(remoteRepo, element.newPath, element.newRevision);\n      }\n    }\n  }", "CodeBleu_score": 53.900301165493424}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\tconst repo = this.model.getRepository(element.repo.uri);\n   if (repo) {\n     if (element.item === Status.MODIFIED) {\n       openDiff(repo, element.oldPath, element.oldRevision, element.newPath, element.newRevision);\n     } else if (element.item === Status.ADDED) {\n       openFileRemote(repo, element.newPath, element.newRevision);\n     }\n   }\n }", "CodeBleu_score": 64.08384477360283}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\tconst repo = this.model.getRepository(element.repo.root);\n  if (repo === undefined) {\n    return;\n  }\n\n  if (element.item === Status.MODIFIED) {\n    openDiff(element.repo, element.oldPath, element.oldRevision, element.newPath, element.newRevision);\n  } else if (element.item === Status.ADDED) {\n    openFileRemote(repo, element.newPath, element.newRevision);\n  }\n}", "CodeBleu_score": 62.30423666534715}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\tif (!env.clipboard.writeText) {\n    window.showErrorMessage('Copying to clipboard is not supported.');\n    return;\n  }\n\n  let text = '';\n  if (item.kind === LogTreeItemKind.Commit) {\n    const commit = item.data as ISvnLogEntry;\n    if (what === 'message') {\n      text = commit.msg;\n    } else if (what === 'revision') {\n      text = commit.revision;\n    }\n  }\n\n  await env.clipboard.writeText(text);\n}", "CodeBleu_score": 49.193873197521555}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\tif (!env.clipboard.writeText) {\n    window.showErrorMessage(`Copying ${what} to clipboard is not supported on this platform`);\n    return;\n  }\n\n  if (item.kind !== LogTreeItemKind.Commit) {\n    window.showErrorMessage(`Copying ${what} to clipboard is not supported on this item`);\n    return;\n  }\n\n  const commit = item.data as ISvnLogEntry;\n\n  const text = what === 'revision' ? commit.revision : commit.message;\n\n  await env.clipboard.writeText(text);\n}", "CodeBleu_score": 44.59427513367904}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\tif (!env.clipboard.writeText) {\n    window.showErrorMessage(\n      \\\"Copying to clipboard is not supported on this platform\\\"\n    );\n    return;\n  }\n\n  if (item.kind !== LogTreeItemKind.Commit) {\n    window.showErrorMessage(\n      \\\"This command can only be run on a commit item\\\"\n    );\n    return;\n  }\n\n  const { data } = item;\n\n  if (what === \\\"message\\\") {\n    const message = data.msg;\n    await env.clipboard.writeText(message);\n  } else if (what === \\\"revision\\\") {\n    const revision = data.rev;\n    await env.clipboard.writeText(revision);\n  } else {\n    window.showErrorMessage(\n      `Unknown copy type: ${what}. Supported types: message, revision.`\n    );\n  }\n}", "CodeBleu_score": 33.210979964521755}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\treturn open(null);\n}", "CodeBleu_score": 2.2655930395820763}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tGiteaConnectionFactory factory = null;\n    int maxPriority = Integer.MIN_VALUE;\n    for (GiteaConnectionFactory f : ServiceLoader.load(GiteaConnectionFactory.class, classLoader)) {\n        if (f.canOpen(serverUrl, authentication)) {\n            if (f.priority() > maxPriority) {\n                factory = f;\n                maxPriority = f.priority();\n            }\n        }\n    }\n    if (factory != null) {\n        return factory.open(serverUrl, authentication);\n    } else {\n        throw new IOException(\"No GiteaConnectionFactory found that can open a connection to \" + serverUrl);\n    }\n}", "CodeBleu_score": 42.2015788952077}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t// Attempt to open a connection using the available GiteaConnectionFactory implementations.\n    // Iterate through the factories to find the most suitable one based on their ability to open the connection and their priority.\n    // If a suitable factory is found, it opens the connection. If no suitable factory is found, it throws an IOException.\n    for (GiteaConnectionFactory factory : ServiceLoader.load(GiteaConnectionFactory.class, classLoader())) {\n        if (factory.canOpen(serverUrl)) {\n            try {\n                return factory.open(this);\n            } catch (GiteaConnectionFactory.CannotOpenException e) {\n                // If the factory cannot open the connection, continue to the next factory.\n                continue;\n            }\n        }\n    }\n    // If no suitable factory is found, throw an IOException.\n    throw new IOException(\"Cannot open connection to Gitea server: \" + serverUrl);\n}", "CodeBleu_score": 32.33321549296069}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\tJenkins jenkins = Jenkins.getInstance();\n    if (jenkins != null) {\n        classLoader(jenkins.getPluginManager().uberClassLoader);\n    } else {\n        classLoader(Gitea.class.getClassLoader());\n    }\n    return this;\n}", "CodeBleu_score": 39.09226319574209}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\tClassLoader classLoader = Jenkins.getActiveInstance() != null ? Jenkins.getActiveInstance().getPluginManager().uberClassLoader : getClass().getClassLoader();\n    return classLoader(classLoader);\n}", "CodeBleu_score": 45.8773383272309}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\tJenkins jenkins = Jenkins.getInstance();\n    if (jenkins != null) {\n        classLoader(jenkins.getPluginManager().uberClassLoader);\n    } else {\n        classLoader(getClass().getClassLoader());\n    }\n    return this;\n}", "CodeBleu_score": 42.279764744440854}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tthis.displayName = displayName;\n    this.serverUrl = normalizeUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    this.credentialsId = manageHooks ? credentialsId : null;\n    this.aliasUrl = normalizeUrl(aliasUrl);\n}", "CodeBleu_score": 38.598978279124026}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tthis.displayName = displayName;\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    this.credentialsId = manageHooks ? credentialsId : null;\n    this.aliasUrl = normalizeAliasUrl(aliasUrl);\n}", "CodeBleu_score": 39.066103754278046}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tthis.displayName = Util.fixEmptyAndTrim(displayName);\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    if (manageHooks) {\n        this.credentialsId = credentialsId;\n    }\n    this.aliasUrl = normalizeAliasUrl(aliasUrl);\n}", "CodeBleu_score": 35.57670093477913}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\tif different from the URL that Jenkins needs to use to\n     * access Gitea.\n     *\n     * @since 1.0.5\n     */\n    @CheckForNull\n    private final String aliasUrl;\n\n    /**\n     * Constructor\n     *\n     * @param displayName   Optional name to use to describe the end-point.\n     * @param serverUrl     The URL of this Gitea Server\n     * @param manageHooks   {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     * @param credentialsId The {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for\n     *                      auto-management of hooks.\n     * @deprecated Use {@link #GiteaServer(String, String, boolean, String, String)}\n     */\n    @Deprecated\n    @Restricted(DoNotUse.class)\n    public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId) {\n        this(displayName, serverUrl, manageHooks, credentialsId, null);\n    }\n\n    /**\n     * Constructor\n     *\n     * @param displayName   Optional name to use to describe the end-point.\n     * @param serverUrl     The URL of this Gitea Server\n     * @param manageHooks   {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     * @param credentialsId The {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for\n     *                      auto-management of hooks.\n     * @param aliasUrl      The URL this Gitea Server thinks it is at.\n     * @since 1.0.5\n     */\n    @DataBoundConstructor\n    public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n        this.manageHooks = manageHooks && StringUtils.isNotBlank(credentialsId);\n        this.credentialsId = manageHooks ? credentialsId : null;\n        this.serverUrl = GiteaServers.normalizeServerUrl(serverUrl);\n        this.displayName = StringUtils.isBlank(displayName)\n                ? SCMName.fromUrl(this.serverUrl, COMMON_PREFIX_HOSTNAMES)\n                : displayName;\n        this.aliasUrl = StringUtils.trimToNull(GiteaServers.normalizeServerUrl(aliasUrl));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @CheckForNull\n    public String getDisplayName() {\n        return displayName;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @NonNull\n    public String getServerUrl() {\n        return serverUrl;\n    }\n\n    /**\n     * Returns {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     *\n     * @return {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     */\n    public final boolean isManageHooks() {\n        return manageHooks;\n    }\n\n    /**\n     * Returns the {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for auto-management\n     * of hooks.\n     *\n     * @return the {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for auto-management\n     * of hooks.\n     */\n    @CheckForNull\n    public final String getCredentialsId() {\n        return credentialsId;\n    }\n\n    /**\n     * Returns the {@link #getServerUrl()} that the Gitea server believes it has when publishing webhook events or\n     * {@code null} if this is a normal environment and Gitea is accessed through one true URL and has been configured\n     * with that URL.\n     *\n     * @return the {@link #getServerUrl()} that the Gitea server believes it has when publishing webhook events or\n     * {@code null}\n     * @since 1.0.5\n     */\n    @CheckForNull\n    public String getAliasUrl() {\n        return aliasUrl;\n    }\n\n    /**\n     * Looks up the {@link StandardCredentials} to use for auto-management of hooks.\n     *\n     * @return the credentials or {@code null}.\n     */\n    @CheckForNull\n    public StandardCredentials credentials() {\n        return StringUtils.isBlank(credentialsId) ? null : CredentialsMatchers.firstOrNull(\n                CredentialsProvider.lookupCredentials(\n                        StandardCredentials.class,\n                        Jenkins.get(),\n                        ACL.SYSTEM,\n                        URIRequirementBuilder.fromUri(serverUrl).build()\n                ),\n                CredentialsMatchers.allOf(\n                        AuthenticationTokens.matcher(GiteaAuth.class),\n                        CredentialsMatchers.withId(credentialsId)\n                )\n        );\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public DescriptorImpl getDescriptor() {\n        return (DescriptorImpl) super.getDescriptor();\n    }\n\n    /**\n     * Our descriptor.\n     */\n    @Extension\n    public static class DescriptorImpl extends Descriptor<GiteaServer> {\n        /**\n         * Checks that the supplied URL is valid.\n         *\n         * @param value the URL to check.\n         * @return the validation results.\n         */\n        public static FormValidation doCheckServerUrl(@QueryParameter String value) {\n            Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n            try (GiteaConnection c = Gitea.server(GiteaServers.normalizeServerUrl(value)).open()) {\n                return FormValidation\n                        .okWithMarkup(Messages.GiteaServer_serverVersion(Util.escape(c.fetchVersion().getVersion())));\n            } catch (MalformedURLException e) {\n                return FormValidation.errorWithMarkup(Messages.GiteaServer_invalidUrl(Util.escape(e.getMessage())));\n            } catch (InterruptedException e) {\n                return FormValidation.warning(Messages.GiteaServer_versionInterrupted());\n            } catch (IOException e) {\n                return FormValidation\n                        .errorWithMarkup(Messages.GiteaServer_cannotConnect(Util.escape(e.getMessage())));\n            }\n        }\n\n        /**\n         * Checks that the supplied URL is valid.\n         *\n         * @param value the URL to check.\n         * @return the validation results.\n         */\n        public static FormValidation doCheckAliasUrl(@QueryParameter String value) {\n            Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n            if (StringUtils.isBlank(value)) return FormValidation.ok();\n            try {\n                new URI(value);\n                return FormValidation.ok();\n            } catch (URISyntaxException e) {\n                return FormValidation.errorWithMarkup(Messages.GiteaServer_invalidUrl(Util.escape(e.getMessage())));\n            }\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Nonnull\n        @Override\n        public String getDisplayName() {\n            return Messages.GiteaServer_displayName();\n        }\n\n        /**\n         * Stapler form completion.\n         *\n         * @param serverUrl the server URL.\n         * @return the available credentials.\n         */\n        @Restricted(NoExternalUse.class) // stapler\n        @SuppressWarnings(\\\"unused\\\")\n\n\n", "CodeBleu_score": 43.496774863277246}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\tif different from the URL that Jenkins needs to use to\n     * access Gitea.\n     *\n     * @since 1.0.5\n     */\n    @CheckForNull\n    private final String aliasUrl;\n\n    /**\n     * Constructor\n     *\n     * @param displayName   Optional name to use to describe the end-point.\n     * @param serverUrl     The URL of this Gitea Server\n     * @param manageHooks   {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     * @param credentialsId The {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for\n     *                      auto-management of hooks.\n     * @deprecated Use {@link #GiteaServer(String, String, boolean, String, String)}\n     */\n    @Deprecated\n    @Restricted(DoNotUse.class)\n    public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId) {\n        this(displayName, serverUrl, manageHooks, credentialsId, null);\n    }\n\n    /**\n     * Constructor\n     *\n     * @param displayName   Optional name to use to describe the end-point.\n     * @param serverUrl     The URL of this Gitea Server\n     * @param manageHooks   {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     * @param credentialsId The {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for\n     *                      auto-management of hooks.\n     * @param aliasUrl      The URL this Gitea Server thinks it is at.\n     * @since 1.0.5\n     */\n    @DataBoundConstructor\n    public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n        this.manageHooks = manageHooks && StringUtils.isNotBlank(credentialsId);\n        this.credentialsId = manageHooks ? credentialsId : null;\n        this.serverUrl = GiteaServers.normalizeServerUrl(serverUrl);\n        this.displayName = StringUtils.isBlank(displayName)\n                ? SCMName.fromUrl(this.serverUrl, COMMON_PREFIX_HOSTNAMES)\n                : displayName;\n        this.aliasUrl = StringUtils.trimToNull(GiteaServers.normalizeServerUrl(aliasUrl));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @CheckForNull\n    public String getDisplayName() {\n        return displayName;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @NonNull\n    public String getServerUrl() {\n        return serverUrl;\n    }\n\n    /**\n     * Returns {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     *\n     * @return {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     */\n    public final boolean isManageHooks() {\n        return manageHooks;\n    }\n\n    /**\n     * Returns the {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for auto-management\n     * of hooks.\n     *\n     * @return the {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for auto-management\n     * of hooks.\n     */\n    @CheckForNull\n    public final String getCredentialsId() {\n        return credentialsId;\n    }\n\n    /**\n     * Returns the {@link #getServerUrl()} that the Gitea server believes it has when publishing webhook events or\n     * {@code null} if this is a normal environment and Gitea is accessed through one true URL and has been configured\n     * with that URL.\n     *\n     * @return the {@link #getServerUrl()} that the Gitea server believes it has when publishing webhook events or\n     * {@code null}\n     * @since 1.0.5\n     */\n    @CheckForNull\n    public String getAliasUrl() {\n        return aliasUrl;\n    }\n\n    /**\n     * Looks up the {@link StandardCredentials} to use for auto-management of hooks.\n     *\n     * @return the credentials or {@code null}.\n     */\n    @CheckForNull\n    public StandardCredentials credentials() {\n        return StringUtils.isBlank(credentialsId) ? null : CredentialsMatchers.firstOrNull(\n                CredentialsProvider.lookupCredentials(\n                        StandardCredentials.class,\n                        Jenkins.get(),\n                        ACL.SYSTEM,\n                        URIRequirementBuilder.fromUri(serverUrl).build()\n                ),\n                CredentialsMatchers.allOf(\n                        AuthenticationTokens.matcher(GiteaAuth.class),\n                        CredentialsMatchers.withId(credentialsId)\n                )\n        );\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public DescriptorImpl getDescriptor() {\n        return (DescriptorImpl) super.getDescriptor();\n    }\n\n    /**\n     * Our descriptor.\n     */\n    @Extension\n    public static class DescriptorImpl extends Descriptor<GiteaServer> {\n        /**\n         * Checks that the supplied URL is valid.\n         *\n         * @param value the URL to check.\n         * @return the validation results.\n         */\n        public static FormValidation doCheckServerUrl(@QueryParameter String value) {\n            Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n            try (GiteaConnection c = Gitea.server(GiteaServers.normalizeServerUrl(value)).open()) {\n                return FormValidation\n                        .okWithMarkup(Messages.GiteaServer_serverVersion(Util.escape(c.fetchVersion().getVersion())));\n            } catch (MalformedURLException e) {\n                return FormValidation.errorWithMarkup(Messages.GiteaServer_invalidUrl(Util.escape(e.getMessage())));\n            } catch (InterruptedException e) {\n                return FormValidation.warning(Messages.GiteaServer_versionInterrupted());\n            } catch (IOException e) {\n                return FormValidation\n                        .errorWithMarkup(Messages.GiteaServer_cannotConnect(Util.escape(e.getMessage())));\n            }\n        }\n\n        /**\n         * Checks that the supplied URL is valid.\n         *\n         * @param value the URL to check.\n         * @return the validation results.\n         */\n        public static FormValidation doCheckAliasUrl(@QueryParameter String value) {\n            Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n            if (StringUtils.isBlank(value)) return FormValidation.ok();\n            try {\n                new URI(value);\n                return FormValidation.ok();\n            } catch (URISyntaxException e) {\n                return FormValidation.errorWithMarkup(Messages.GiteaServer_invalidUrl(Util.escape(e.getMessage())));\n            }\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Nonnull\n        @Override\n        public String getDisplayName() {\n            return Messages.GiteaServer_displayName();\n        }\n\n        /**\n         * Stapler form completion.\n         *\n         * @param serverUrl the server URL.\n         * @return the available credentials.\n         */\n        @Restricted(NoExternalUse.class) // stapler\n        @SuppressWarnings(\\\"unused\\\")\n\n\n", "CodeBleu_score": 43.496774863277246}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\tif different from the URL that Jenkins needs to use to\n     * access Gitea.\n     *\n     * @since 1.0.5\n     */\n    @CheckForNull\n    private final String aliasUrl;\n\n    /**\n     * Constructor\n     *\n     * @param displayName   Optional name to use to describe the end-point.\n     * @param serverUrl     The URL of this Gitea Server\n     * @param manageHooks   {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     * @param credentialsId The {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for\n     *                      auto-management of hooks.\n     * @deprecated Use {@link #GiteaServer(String, String, boolean, String, String)}\n     */\n    @Deprecated\n    @Restricted(DoNotUse.class)\n    public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId) {\n        this(displayName, serverUrl, manageHooks, credentialsId, null);\n    }\n\n    /**\n     * Constructor\n     *\n     * @param displayName   Optional name to use to describe the end-point.\n     * @param serverUrl     The URL of this Gitea Server\n     * @param manageHooks   {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     * @param credentialsId The {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for\n     *                      auto-management of hooks.\n     * @param aliasUrl      The URL this Gitea Server thinks it is at.\n     * @since 1.0.5\n     */\n    @DataBoundConstructor\n    public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n        this.manageHooks = manageHooks && StringUtils.isNotBlank(credentialsId);\n        this.credentialsId = manageHooks ? credentialsId : null;\n        this.serverUrl = GiteaServers.normalizeServerUrl(serverUrl);\n        this.displayName = StringUtils.isBlank(displayName)\n                ? SCMName.fromUrl(this.serverUrl, COMMON_PREFIX_HOSTNAMES)\n                : displayName;\n        this.aliasUrl = StringUtils.trimToNull(GiteaServers.normalizeServerUrl(aliasUrl));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @CheckForNull\n    public String getDisplayName() {\n        return displayName;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @NonNull\n    public String getServerUrl() {\n        return serverUrl;\n    }\n\n    /**\n     * Returns {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     *\n     * @return {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     */\n    public final boolean isManageHooks() {\n        return manageHooks;\n    }\n\n    /**\n     * Returns the {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for auto-management\n     * of hooks.\n     *\n     * @return the {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for auto-management\n     * of hooks.\n     */\n    @CheckForNull\n    public final String getCredentialsId() {\n        return credentialsId;\n    }\n\n    /**\n     * Returns the {@link #getServerUrl()} that the Gitea server believes it has when publishing webhook events or\n     * {@code null} if this is a normal environment and Gitea is accessed through one true URL and has been configured\n     * with that URL.\n     *\n     * @return the {@link #getServerUrl()} that the Gitea server believes it has when publishing webhook events or\n     * {@code null}\n     * @since 1.0.5\n     */\n    @CheckForNull\n    public String getAliasUrl() {\n        return aliasUrl;\n    }\n\n    /**\n     * Looks up the {@link StandardCredentials} to use for auto-management of hooks.\n     *\n     * @return the credentials or {@code null}.\n     */\n    @CheckForNull\n    public StandardCredentials credentials() {\n        return StringUtils.isBlank(credentialsId) ? null : CredentialsMatchers.firstOrNull(\n                CredentialsProvider.lookupCredentials(\n                        StandardCredentials.class,\n                        Jenkins.get(),\n                        ACL.SYSTEM,\n                        URIRequirementBuilder.fromUri(serverUrl).build()\n                ),\n                CredentialsMatchers.allOf(\n                        AuthenticationTokens.matcher(GiteaAuth.class),\n                        CredentialsMatchers.withId(credentialsId)\n                )\n        );\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public DescriptorImpl getDescriptor() {\n        return (DescriptorImpl) super.getDescriptor();\n    }\n\n    /**\n     * Our descriptor.\n     */\n    @Extension\n    public static class DescriptorImpl extends Descriptor<GiteaServer> {\n        /**\n         * Checks that the supplied URL is valid.\n         *\n         * @param value the URL to check.\n         * @return the validation results.\n         */\n        public static FormValidation doCheckServerUrl(@QueryParameter String value) {\n            Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n            try (GiteaConnection c = Gitea.server(GiteaServers.normalizeServerUrl(value)).open()) {\n                return FormValidation\n                        .okWithMarkup(Messages.GiteaServer_serverVersion(Util.escape(c.fetchVersion().getVersion())));\n            } catch (MalformedURLException e) {\n                return FormValidation.errorWithMarkup(Messages.GiteaServer_invalidUrl(Util.escape(e.getMessage())));\n            } catch (InterruptedException e) {\n                return FormValidation.warning(Messages.GiteaServer_versionInterrupted());\n            } catch (IOException e) {\n                return FormValidation\n                        .errorWithMarkup(Messages.GiteaServer_cannotConnect(Util.escape(e.getMessage())));\n            }\n        }\n\n        /**\n         * Checks that the supplied URL is valid.\n         *\n         * @param value the URL to check.\n         * @return the validation results.\n         */\n        public static FormValidation doCheckAliasUrl(@QueryParameter String value) {\n            Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n            if (StringUtils.isBlank(value)) return FormValidation.ok();\n            try {\n                new URI(value);\n                return FormValidation.ok();\n            } catch (URISyntaxException e) {\n                return FormValidation.errorWithMarkup(Messages.GiteaServer_invalidUrl(Util.escape(e.getMessage())));\n            }\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Nonnull\n        @Override\n        public String getDisplayName() {\n            return Messages.GiteaServer_displayName();\n        }\n\n        /**\n         * Stapler form completion.\n         *\n         * @param serverUrl the server URL.\n         * @return the available credentials.\n         */\n        @Restricted(NoExternalUse.class) // stapler\n        @SuppressWarnings(\\\"unused\\\")\n\n\n", "CodeBleu_score": 43.496774863277246}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\n        return \"\";\n    }\n\n    String normalizedServerUrl = serverUrl.toLowerCase(Locale.ENGLISH);\n\n    try {\n        URI uri = new URI(normalizedServerUrl);\n\n        if (uri.getScheme() != null && uri.getScheme().equals(\"http\")) {\n            if (uri.getPort() == 80) {\n                normalizedServerUrl = uri.getScheme() + \"://\" + uri.getHost() + uri.getPath();\n            }\n        } else if (uri.getScheme() != null && uri.getScheme().equals(\"https\")) {\n            if (uri.getPort() == 443) {\n                normalizedServerUrl = uri.getScheme() + \"://\" + uri.getHost() + uri.getPath();\n            }\n        }\n    } catch (URISyntaxException e) {\n        // ignore exception\n    }\n\n    if (normalizedServerUrl.endsWith(\"/\")) {\n        normalizedServerUrl = normalizedServerUrl.substring(0, normalizedServerUrl.length() - 1);\n    }\n\n    return normalizedServerUrl;\n}", "CodeBleu_score": 39.87666214542103}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        if (scheme == null) {\n            scheme = \"https\";\n        } else {\n            scheme = scheme.toLowerCase(Locale.ENGLISH);\n        }\n        int port = uri.getPort();\n        if (port == -1) {\n            if (\"http\".equals(scheme)) {\n                port = 80;\n            } else if (\"https\".equals(scheme)) {\n                port = 443;\n            }\n        }\n        String host = uri.getHost();\n        if (host == null) {\n            return null;\n        }\n        host = host.toLowerCase(Locale.ENGLISH);\n        StringBuilder sb = new StringBuilder();\n        sb.append(scheme);\n        sb.append(\"://\");\n        sb.append(host);\n        if (port != -1) {\n            sb.append(':');\n            sb.append(port);\n        }\n        String path = uri.getPath();\n        if (path != null) {\n            sb.append(path);\n        }\n        String query = uri.getQuery();\n        if (query != null) {\n            sb.append('?');\n            sb.append(query);\n        }\n        String fragment = uri.getFragment();\n        if (fragment != null) {\n            sb.append('#');\n            sb.append(fragment);\n        }\n        return sb.toString();\n    } catch (URISyntaxException e) {\n        return serverUrl;\n    }\n}", "CodeBleu_score": 43.71321665739656}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\n        return \"\";\n    }\n    serverUrl = serverUrl.trim();\n    if (serverUrl.isEmpty()) {\n        return \"\";\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        if (scheme == null) {\n            scheme = \"http\";\n        }\n        int port = uri.getPort();\n        if (port == -1) {\n            if (\"http\".equalsIgnoreCase(scheme)) {\n                port = 80;\n            } else if (\"https\".equalsIgnoreCase(scheme)) {\n                port = 443;\n            }\n        }\n        if (port == 80 || port == 443) {\n            uri = new URI(scheme, uri.getUserInfo(), uri.getHost(), -1, uri.getPath(), uri.getQuery(), uri.getFragment());\n        }\n        return uri.toString().trim().toLowerCase(Locale.ENGLISH);\n    } catch (URISyntaxException e) {\n        return \"\";\n    }\n}", "CodeBleu_score": 50.85713598800523}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\t* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */", "CodeBleu_score": 15.47059711405511}, {"code": "public ListBoxModel getServerItems(){\n\t* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */", "CodeBleu_score": 15.47059711405511}, {"code": "public ListBoxModel getServerItems(){\n\t* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */", "CodeBleu_score": 15.47059711405511}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tIterator;", "CodeBleu_score": 2.8017183249687947}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tIterator;", "CodeBleu_score": 2.8017183249687947}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tIterator;", "CodeBleu_score": 2.8017183249687947}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\ty-up\n        }", "CodeBleu_score": 2.5488376951994884}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\ty-up\n        }", "CodeBleu_score": 2.5488376951994884}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\ty-up\n        }", "CodeBleu_score": 2.5488376951994884}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tfor (Element e : roundEnv.getElementsAnnotatedWith(annotation)) {\n    if (e.getKind() == ElementKind.FIELD) {\n      VariableElement variableElement = (VariableElement) e;\n      String fieldName = variableElement.getSimpleName().toString();\n      String type = variableElement.asType().toString();\n      descriptorElements.add(new ConfigElement(fieldName, type));\n    }\n  }\n}", "CodeBleu_score": 40.494095512950366}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tfor (Element e : roundEnv.getElementsAnnotatedWith(annotation)) {\n        if (e.getKind() == ElementKind.FIELD) {\n            VariableElement variableElement = (VariableElement) e;\n            String type = variableElement.asType().toString();\n            String name = variableElement.getSimpleName().toString();\n            String description = variableElement.getAnnotation(ConfigValue.class).description();\n            String defaultValue = variableElement.getAnnotation(ConfigValue.class).defaultValue();\n            descriptorElements.add(new ConfigElement(type, name, description, defaultValue));\n        }\n    }\n}", "CodeBleu_score": 31.318672826759048}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tfor (Element e : roundEnv.getElementsAnnotatedWith(annotation)) {\n    if (e.getKind() != ElementKind.FIELD) {\n      continue;\n    }\n\n    VariableElement variableElement = (VariableElement) e;\n    String type = variableElement.asType().toString();\n    String name = variableElement.getSimpleName().toString();\n\n    Map<String, String> attributes = Maps.newHashMap();\n    attributes.put(\"name\", name);\n    attributes.put(\"type\", type);\n\n    descriptorElements.add(new ConfigElement(attributes));\n  }\n}", "CodeBleu_score": 35.88654079947887}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tn * MIT License\n *\n * Copyright (c) 2020-present Cloudogu GmbH and Contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n", "CodeBleu_score": 15.940738924097298}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tn * MIT License\n *\n * Copyright (c) 2020-present Cloudogu GmbH and Contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n", "CodeBleu_score": 15.940738924097298}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tn * MIT License\n *\n * Copyright (c) 2020-present Cloudogu GmbH and Contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n", "CodeBleu_score": 15.940738924097298}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\tfilters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n    }\n\n    if approver_id:\n        filters[\"leave_approver\"] = approver_id\n\n    if for_approval:\n        filters[\"status\"] = \"Open\"\n        filters[\"name\"] = (\"!=\", employee)\n    else:\n        filters[\"status\"] = (\"!=\", \"Cancelled\")\n\n    if workflow_state_field := get_workflow_state_field(\"Leave Application\"):\n        filters[workflow_state_field] = (\"!=\", \"Completed\")\n\n    return filters\n\n", "CodeBleu_score": 33.01703878204753}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\tfilters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n    }\n\n    if for_approval:\n        filters.update(\n            {\n                \"status\": (\"!=\", \"Cancelled\"),\n                \"leave_approver\": (\"!=\", employee),\n            }\n        )\n        if approver_id:\n            filters.update({\"leave_approver\": approver_id})\n    else:\n        filters.update({\"status\": (\"!=\", \"Cancelled\")})\n\n    return filters\n\n", "CodeBleu_score": 27.531806037542232}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\tfilters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n        \"status\": (\"!=\", \"Cancelled\"),\n    }\n\n    if approver_id:\n        filters[\"leave_approver\"] = approver_id\n\n    if for_approval:\n        filters[\"status\"] = (\"!=\", \"Cancelled\")\n\n        if workflow_state_field := get_workflow_state_field(\"Leave Application\"):\n            filters[workflow_state_field] = \"Approved\"\n        else:\n            filters[\"status\"] = \"Open\"\n\n    return filters\n\n", "CodeBleu_score": 29.810756398585365}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\tfrom frappe.utils import getdate\n\n    today = getdate()\n    leave_details = get_leave_details(employee, today)\n\n    leave_balance_map = frappe._dict()\n    for leave_detail in leave_details:\n        leave_balance_map.setdefault(leave_detail.leave_type, frappe._dict())\n        leave_balance_map[leave_detail.leave_type].allocated = leave_detail.allocated_leaves\n        leave_balance_map[leave_detail.leave_type].balance = leave_detail.leave_balance\n\n    return leave_balance_map\n\n", "CodeBleu_score": 36.0990962411451}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\tfrom frappe.utils import getdate\n    from frappe.core.doctype.leave_application.leave_application import get_leave_details\n    from frappe.core.doctype.leave_type.leave_type import get_leave_allocation_records\n\n    today = getdate()\n    leave_details = get_leave_details(employee, today)\n    leave_allocation_records = get_leave_allocation_records(employee, today)\n\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type.leave_type] = {\n            \"allocated_leaves\": 0.0,\n            \"balance_leaves\": 0.0,\n        }\n\n    for leave_allocation_record in leave_allocation_records:\n        leave_balance_map[leave_allocation_record.leave_type][\"allocated_leaves\"] = (\n            leave_allocation_record.total_leaves_allocated\n        )\n\n    for leave_type, leave_balance in leave_balance_map.items():\n        leave_balance[\"balance_leaves\"] = leave_details[leave_type].total_leaves\n\n    return leave_balance_map\n\n", "CodeBleu_score": 39.766530419136295}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\tcurrent_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n\n    leave_balance_map = frappe._dict()\n    for leave_detail in leave_details:\n        leave_type = leave_detail.leave_type\n        if leave_type not in leave_balance_map:\n            leave_balance_map[leave_type] = frappe._dict()\n\n        leave_balance_map[leave_type].allocated = leave_detail.total_leaves_allocated\n        leave_balance_map[leave_type].balance = leave_detail.leaves_taken\n\n    return leave_balance_map\n\n", "CodeBleu_score": 37.22474153028571}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\tFIELD_TYPES = [\n\t\\\"Link\\\",\n\t\\\"Select\\\",\n\t\\\"Small Text\\\",\n\t\\\"Text\\\",\n\t\\\"Long Text\\\",\n\t\\\"Text Editor\\\",\n\t\\\"Table\\\",\n\t\\\"Check\\\",\n\t\\\"Data\\\",\n\t\\\"Float\\\",\n\t\\\"Int\\\",\n\t\\\"Section Break\\\",\n\t\\\"Date\\\",\n\t\\\"Time\\\",\n\t\\\"Datetime\\\",\n\t\\\"Currency\\\",", "CodeBleu_score": 3.195562384349841}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\tFIELD_TYPES = [\n\t\\\"Link\\\",\n\t\\\"Select\\\",\n\t\\\"Small Text\\\",\n\t\\\"Text\\\",\n\t\\\"Long Text\\\",\n\t\\\"Text Editor\\\",\n\t\\\"Table\\\",\n\t\\\"Check\\\",\n\t\\\"Data\\\",\n\t\\\"Float\\\",\n\t\\\"Int\\\",\n\t\\\"Section Break\\\",\n\t\\\"Date\\\",\n\t\\\"Time\\\",\n\t\\\"Datetime\\\",\n\t\\\"Currency\\\",", "CodeBleu_score": 3.195562384349841}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\tFIELD_TYPES = [\n\t\\\"Link\\\",\n\t\\\"Select\\\",\n\t\\\"Small Text\\\",\n\t\\\"Text\\\",\n\t\\\"Long Text\\\",\n\t\\\"Text Editor\\\",\n\t\\\"Table\\\",\n\t\\\"Check\\\",\n\t\\\"Data\\\",\n\t\\\"Float\\\",\n\t\\\"Int\\\",\n\t\\\"Section Break\\\",\n\t\\\"Date\\\",\n\t\\\"Time\\\",\n\t\\\"Datetime\\\",\n\t\\\"Currency\\\",", "CodeBleu_score": 3.195562384349841}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\tholiday_list = frappe.db.get_single_value('HR Settings', 'default_holiday_list')\n    frequency = frappe.db.get_single_value('HR Settings', 'holiday_reminder_frequency')\n    reminder_days_in_advance = frappe.db.get_single_value('HR Settings', 'holiday_reminder_days_in_advance')\n    send_reminders = frappe.db.get_single_value('HR Settings', 'send_holiday_reminders')\n\n    if holiday_list and frequency and reminder_days_in_advance and send_reminders:\n        if frequency == 'Weekly':\n            send_weekly_reminders(holiday_list, reminder_days_in_advance)\n\n", "CodeBleu_score": 40.079265847681974}, {"code": "def send_reminders_in_advance_weekly()\n\tholiday_list = frappe.db.get_single_value(\"HR Settings\", \"default_holiday_list\")\n    if holiday_list:\n        holidays = get_holidays_for_employee(holiday_list, getdate(today()))\n        if holidays:\n            send_reminders_in_advance(holidays)\n\n", "CodeBleu_score": 21.64376259888925}, {"code": "def send_reminders_in_advance_weekly()\n\tholiday_settings = frappe.get_doc(\"Holiday Settings\")\n    if holiday_settings.send_reminders and holiday_settings.reminder_frequency == \"Weekly\":\n        send_reminders_in_advance(7)\n\n", "CodeBleu_score": 15.864638100456615}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\nfrom hrms.mixins.appraisal import AppraisalMixin", "CodeBleu_score": 0.8294104975878784}, {"code": "def calculate_self_appraisal_score(self)\n\t\nfrom hrms.mixins.appraisal import AppraisalMixin", "CodeBleu_score": 0.8294104975878784}, {"code": "def calculate_self_appraisal_score(self)\n\t\nfrom hrms.mixins.appraisal import AppraisalMixin", "CodeBleu_score": 0.8294104975878784}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t= (\n\t\t\tfrappe.qb.from_(Appraisal)\n\t\t\t.select(Appraisal.name)\n\t\t\t.where(\n\t\t\t\t(Appraisal.employee == self.employee)\n\t\t\t\t& (Appraisal.docstatus != 2)\n\t\t\t\t& (Appraisal.name != self.name)\n\t\t\t\t& (\n\t\t\t\t\t(Appraisal.appraisal_cycle == self.appraisal_cycle)\n\t\t\t\t\t| (\n\t\t\t\t\t\t(Appraisal.start_date.between(self.start_date, self.end_date))\n\t\t\t\t\t\t| (Appraisal.end_date.between(self.start_date, self.end_date))\n\t\t\t\t\t\t| (\n\t\t\t\t\t\t\t(self.start_date >= Appraisal.start_date)\n\t\t\t\t\t\t\t& (self.start_date <= Appraisal.end_date)\n\t\t\t\t\t\t)\n\t\t\t\t\t\t| ((self.end_date >= Appraisal.start_date) & (self.end_date <= Appraisal.end_date))\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t).run()\n\t\tduplicate = duplicate[0][0] if duplicate else 0\n\n\t\tif duplicate:\n\t\t\tfrappe.throw(\n\t\t\t\t_(\n\t\t\t\t\t\\\"Appraisal {0} already exists for Employee {1} for this Appraisal Cycle or overlapping period\\\"\n\t\t\t\t).format(get_link_to_form(\\\"Appraisal\\\", duplicate), frappe.bold(self.employee_name)),\n\t\t\t\texc=frappe.DuplicateEntryError,\n\t\t\t\ttitle=_(\\\"Duplicate Entry\\\"),\n\t\t\t)\n\n\tdef set_kra_evaluation_method(self):\n\t\tif (\n\t\t\tself.is_new()\n\t\t\tand self.appraisal_cycle\n\t\t\tand (\n\t\t\t\tfrappe.db.get_value(\\\"Appraisal Cycle\\\", self.appraisal_cycle, \\\"kra_evaluation_method\\\")\n\t\t\t\t== \\\"Manual Rating\\\"\n\t\t\t)\n\t\t):\n\t\t\tself.rate_goals_manually = 1\n\n\t@frappe.whitelist()\n\tdef set_appraisal_template(self):\n\t\t\\\"\\\"\\\"Sets appraisal template from Appraisee table in Cycle\\\"\\\"\\\"\n\t\tif not self.appraisal_cycle:\n\t\t\treturn\n\n\t\tappraisal_template = frappe.db.get_value(\n\t\t\t\\\"Appraisee\\\",\n\t\t\t{\n\t\t\t\t\\\"employee\\\": self.employee,\n\t\t\t\t\\\"parent\\\": self.appraisal_cycle,\n\t\t\t},\n\t\t\t\\\"appraisal_template\\\",\n\t\t)\n\n\t\tif appraisal_template:\n\t\t\tself.appraisal_template = appraisal_template\n\t\t\tself.set_kras_and_rating_criteria()\n\n\t@frappe.whitelist()\n\tdef set_kras_and_rating_criteria(self):\n\t\tif not self.appraisal_template:\n\t\t\treturn\n\n\t\tself.set(\\\"appraisal_kra\\\", [])\n\t\tself.set(\\\"self_ratings\\\", [])\n\t\tself.set(\\\"goals\\\", [])\n\n\t\ttemplate = frappe.get_doc(\\\"Appraisal Template\\\", self.appraisal_template)\n\n\t\tfor entry in template.goals:\n\t\t\ttable_name = \\\"goals\\\" if self.rate_goals_manually else \\\"appraisal_kra\\\"\n\n\t\t\tself.append(\n\t\t\t\ttable_name,\n\t\t\t\t{\n\t\t\t\t\t\\\"kra\\\": entry.key_result_area,\n\t\t\t\t\t\\\"per_weightage\\\": entry.per_weightage,\n\t\t\t\t},\n\t\t\t)\n\n\t\tfor entry in template.rating_criteria:\n\t\t\tself.append(\n\t\t\t\t\\\"self_ratings\\\",\n\t\t\t\t{\n\t\t\t\t\t\\\"criteria\\\": entry.criteria,\n\t\t\t\t\t\\\"per_weightage\\\": entry.per_weightage,\n\t\t\t\t},\n\t\t\t)\n\n\t\treturn self\n\n\tdef calculate_total_score(self):\n\t\ttotal_weightage, total, goal_score_percentage = 0, 0, 0\n\n\t\tif self.rate_goals_manually:\n\t\t\ttable = _(\\\"Goals\\\")\n\t\t\tfor entry in self.goals:\n\t\t\t\tif flt(entry.score) > 5:\n\t\t\t\t\tfrappe.throw(_(\\\"Row {0}: Goal Score cannot be greater than 5\\\").format(entry.idx))\n\n\t\t\t\tentry.score_earned = flt(entry.score) * flt(entry.per_weightage) / 100\n\t\t\t\ttotal += flt(entry.score_earned)\n\t\t\t\ttotal_weightage += flt(entry.per_weightage)\n\n\t\telse:\n\t\t\ttable = _(\\\"KRAs\\\")\n\t\t\tfor entry in self.appraisal_kra:\n\t\t\t\tgoal_score_percentage += flt(entry.goal_score)\n\t\t\t\ttotal_weightage += flt(entry.per_weightage)\n\n\t\t\tself.goal_score_percentage = flt(goal_score_percentage, self.precision(\\\"goal_score_percentage\\\"))\n\t\t\t# convert goal score percentage to total score out of 5\n\t\t\ttotal = flt(goal_score_percentage) / 20\n\n\t\tif total_weightage and flt(total_weightage, 2) != 100.0:\n\t\t\tfrappe.throw(\n\t\t\t\t_(\\\"Total weightage for all {0} must add up to 100. Currently, it is {1}%\\\").format(\n\t\t\t\t\ttable, total_weightage\n\t\t\t\t),\n\t\t\t\ttitle=_(\\\"Incorrect Weightage Allocation\\\"),\n\t\t\t)\n\n\t\tself.total_score = flt(total, self.precision(\\\"total_score\\\"))\n\n\tdef calculate_self_appraisal_score(self):\n\t\ttotal = 0\n\t\tfor entry in self.self_ratings:\n\t\t\tscore = flt(entry.rating) * 5 * flt(entry.per_weightage / 100)\n\t\t\ttotal += flt(score)\n\n\t\tself.self_score = flt(total, self.precision(\\\"self_score\\\"))\n\n\tdef calculate_avg_feedback_score(self, update=False):\n\t\tavg_feedback_score = frappe.qb.avg(\n\t\t\t\\\"Employee Performance Feedback\\\",\n\t\t\t\\\"total_score\\\",\n\t\t\t{\\\"employee\\\": self.employee, \\\"appraisal\\\": self.name, \\\"docstatus\\\": 1},\n\t\t)\n\n\t\tself.avg_feedback_score = flt(avg_feedback_score, self.precision(\\\"avg_feedback_score\\\"))\n\n\t\tif update:\n\t\t\tself.calculate_final_score()\n\t\t\tself.db_update()\n\n\n\n", "CodeBleu_score": 17.993910799146178}, {"code": "def calculate_final_score(self)\n\t= (\n\t\t\tfrappe.qb.from_(Appraisal)\n\t\t\t.select(Appraisal.name)\n\t\t\t.where(\n\t\t\t\t(Appraisal.employee == self.employee)\n\t\t\t\t& (Appraisal.docstatus != 2)\n\t\t\t\t& (Appraisal.name != self.name)\n\t\t\t\t& (\n\t\t\t\t\t(Appraisal.appraisal_cycle == self.appraisal_cycle)\n\t\t\t\t\t| (\n\t\t\t\t\t\t(Appraisal.start_date.between(self.start_date, self.end_date))\n\t\t\t\t\t\t| (Appraisal.end_date.between(self.start_date, self.end_date))\n\t\t\t\t\t\t| (\n\t\t\t\t\t\t\t(self.start_date >= Appraisal.start_date)\n\t\t\t\t\t\t\t& (self.start_date <= Appraisal.end_date)\n\t\t\t\t\t\t)\n\t\t\t\t\t\t| ((self.end_date >= Appraisal.start_date) & (self.end_date <= Appraisal.end_date))\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t).run()\n\t\tduplicate = duplicate[0][0] if duplicate else 0\n\n\t\tif duplicate:\n\t\t\tfrappe.throw(\n\t\t\t\t_(\n\t\t\t\t\t\\\"Appraisal {0} already exists for Employee {1} for this Appraisal Cycle or overlapping period\\\"\n\t\t\t\t).format(get_link_to_form(\\\"Appraisal\\\", duplicate), frappe.bold(self.employee_name)),\n\t\t\t\texc=frappe.DuplicateEntryError,\n\t\t\t\ttitle=_(\\\"Duplicate Entry\\\"),\n\t\t\t)\n\n\tdef set_kra_evaluation_method(self):\n\t\tif (\n\t\t\tself.is_new()\n\t\t\tand self.appraisal_cycle\n\t\t\tand (\n\t\t\t\tfrappe.db.get_value(\\\"Appraisal Cycle\\\", self.appraisal_cycle, \\\"kra_evaluation_method\\\")\n\t\t\t\t== \\\"Manual Rating\\\"\n\t\t\t)\n\t\t):\n\t\t\tself.rate_goals_manually = 1\n\n\t@frappe.whitelist()\n\tdef set_appraisal_template(self):\n\t\t\\\"\\\"\\\"Sets appraisal template from Appraisee table in Cycle\\\"\\\"\\\"\n\t\tif not self.appraisal_cycle:\n\t\t\treturn\n\n\t\tappraisal_template = frappe.db.get_value(\n\t\t\t\\\"Appraisee\\\",\n\t\t\t{\n\t\t\t\t\\\"employee\\\": self.employee,\n\t\t\t\t\\\"parent\\\": self.appraisal_cycle,\n\t\t\t},\n\t\t\t\\\"appraisal_template\\\",\n\t\t)\n\n\t\tif appraisal_template:\n\t\t\tself.appraisal_template = appraisal_template\n\t\t\tself.set_kras_and_rating_criteria()\n\n\t@frappe.whitelist()\n\tdef set_kras_and_rating_criteria(self):\n\t\tif not self.appraisal_template:\n\t\t\treturn\n\n\t\tself.set(\\\"appraisal_kra\\\", [])\n\t\tself.set(\\\"self_ratings\\\", [])\n\t\tself.set(\\\"goals\\\", [])\n\n\t\ttemplate = frappe.get_doc(\\\"Appraisal Template\\\", self.appraisal_template)\n\n\t\tfor entry in template.goals:\n\t\t\ttable_name = \\\"goals\\\" if self.rate_goals_manually else \\\"appraisal_kra\\\"\n\n\t\t\tself.append(\n\t\t\t\ttable_name,\n\t\t\t\t{\n\t\t\t\t\t\\\"kra\\\": entry.key_result_area,\n\t\t\t\t\t\\\"per_weightage\\\": entry.per_weightage,\n\t\t\t\t},\n\t\t\t)\n\n\t\tfor entry in template.rating_criteria:\n\t\t\tself.append(\n\t\t\t\t\\\"self_ratings\\\",\n\t\t\t\t{\n\t\t\t\t\t\\\"criteria\\\": entry.criteria,\n\t\t\t\t\t\\\"per_weightage\\\": entry.per_weightage,\n\t\t\t\t},\n\t\t\t)\n\n\t\treturn self\n\n\tdef calculate_total_score(self):\n\t\ttotal_weightage, total, goal_score_percentage = 0, 0, 0\n\n\t\tif self.rate_goals_manually:\n\t\t\ttable = _(\\\"Goals\\\")\n\t\t\tfor entry in self.goals:\n\t\t\t\tif flt(entry.score) > 5:\n\t\t\t\t\tfrappe.throw(_(\\\"Row {0}: Goal Score cannot be greater than 5\\\").format(entry.idx))\n\n\t\t\t\tentry.score_earned = flt(entry.score) * flt(entry.per_weightage) / 100\n\t\t\t\ttotal += flt(entry.score_earned)\n\t\t\t\ttotal_weightage += flt(entry.per_weightage)\n\n\t\telse:\n\t\t\ttable = _(\\\"KRAs\\\")\n\t\t\tfor entry in self.appraisal_kra:\n\t\t\t\tgoal_score_percentage += flt(entry.goal_score)\n\t\t\t\ttotal_weightage += flt(entry.per_weightage)\n\n\t\t\tself.goal_score_percentage = flt(goal_score_percentage, self.precision(\\\"goal_score_percentage\\\"))\n\t\t\t# convert goal score percentage to total score out of 5\n\t\t\ttotal = flt(goal_score_percentage) / 20\n\n\t\tif total_weightage and flt(total_weightage, 2) != 100.0:\n\t\t\tfrappe.throw(\n\t\t\t\t_(\\\"Total weightage for all {0} must add up to 100. Currently, it is {1}%\\\").format(\n\t\t\t\t\ttable, total_weightage\n\t\t\t\t),\n\t\t\t\ttitle=_(\\\"Incorrect Weightage Allocation\\\"),\n\t\t\t)\n\n\t\tself.total_score = flt(total, self.precision(\\\"total_score\\\"))\n\n\tdef calculate_self_appraisal_score(self):\n\t\ttotal = 0\n\t\tfor entry in self.self_ratings:\n\t\t\tscore = flt(entry.rating) * 5 * flt(entry.per_weightage / 100)\n\t\t\ttotal += flt(score)\n\n\t\tself.self_score = flt(total, self.precision(\\\"self_score\\\"))\n\n\tdef calculate_avg_feedback_score(self, update=False):\n\t\tavg_feedback_score = frappe.qb.avg(\n\t\t\t\\\"Employee Performance Feedback\\\",\n\t\t\t\\\"total_score\\\",\n\t\t\t{\\\"employee\\\": self.employee, \\\"appraisal\\\": self.name, \\\"docstatus\\\": 1},\n\t\t)\n\n\t\tself.avg_feedback_score = flt(avg_feedback_score, self.precision(\\\"avg_feedback_score\\\"))\n\n\t\tif update:\n\t\t\tself.calculate_final_score()\n\t\t\tself.db_update()\n\n\n\n", "CodeBleu_score": 17.993910799146178}, {"code": "def calculate_final_score(self)\n\t= (\n\t\t\tfrappe.qb.from_(Appraisal)\n\t\t\t.select(Appraisal.name)\n\t\t\t.where(\n\t\t\t\t(Appraisal.employee == self.employee)\n\t\t\t\t& (Appraisal.docstatus != 2)\n\t\t\t\t& (Appraisal.name != self.name)\n\t\t\t\t& (\n\t\t\t\t\t(Appraisal.appraisal_cycle == self.appraisal_cycle)\n\t\t\t\t\t| (\n\t\t\t\t\t\t(Appraisal.start_date.between(self.start_date, self.end_date))\n\t\t\t\t\t\t| (Appraisal.end_date.between(self.start_date, self.end_date))\n\t\t\t\t\t\t| (\n\t\t\t\t\t\t\t(self.start_date >= Appraisal.start_date)\n\t\t\t\t\t\t\t& (self.start_date <= Appraisal.end_date)\n\t\t\t\t\t\t)\n\t\t\t\t\t\t| ((self.end_date >= Appraisal.start_date) & (self.end_date <= Appraisal.end_date))\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t).run()\n\t\tduplicate = duplicate[0][0] if duplicate else 0\n\n\t\tif duplicate:\n\t\t\tfrappe.throw(\n\t\t\t\t_(\n\t\t\t\t\t\\\"Appraisal {0} already exists for Employee {1} for this Appraisal Cycle or overlapping period\\\"\n\t\t\t\t).format(get_link_to_form(\\\"Appraisal\\\", duplicate), frappe.bold(self.employee_name)),\n\t\t\t\texc=frappe.DuplicateEntryError,\n\t\t\t\ttitle=_(\\\"Duplicate Entry\\\"),\n\t\t\t)\n\n\tdef set_kra_evaluation_method(self):\n\t\tif (\n\t\t\tself.is_new()\n\t\t\tand self.appraisal_cycle\n\t\t\tand (\n\t\t\t\tfrappe.db.get_value(\\\"Appraisal Cycle\\\", self.appraisal_cycle, \\\"kra_evaluation_method\\\")\n\t\t\t\t== \\\"Manual Rating\\\"\n\t\t\t)\n\t\t):\n\t\t\tself.rate_goals_manually = 1\n\n\t@frappe.whitelist()\n\tdef set_appraisal_template(self):\n\t\t\\\"\\\"\\\"Sets appraisal template from Appraisee table in Cycle\\\"\\\"\\\"\n\t\tif not self.appraisal_cycle:\n\t\t\treturn\n\n\t\tappraisal_template = frappe.db.get_value(\n\t\t\t\\\"Appraisee\\\",\n\t\t\t{\n\t\t\t\t\\\"employee\\\": self.employee,\n\t\t\t\t\\\"parent\\\": self.appraisal_cycle,\n\t\t\t},\n\t\t\t\\\"appraisal_template\\\",\n\t\t)\n\n\t\tif appraisal_template:\n\t\t\tself.appraisal_template = appraisal_template\n\t\t\tself.set_kras_and_rating_criteria()\n\n\t@frappe.whitelist()\n\tdef set_kras_and_rating_criteria(self):\n\t\tif not self.appraisal_template:\n\t\t\treturn\n\n\t\tself.set(\\\"appraisal_kra\\\", [])\n\t\tself.set(\\\"self_ratings\\\", [])\n\t\tself.set(\\\"goals\\\", [])\n\n\t\ttemplate = frappe.get_doc(\\\"Appraisal Template\\\", self.appraisal_template)\n\n\t\tfor entry in template.goals:\n\t\t\ttable_name = \\\"goals\\\" if self.rate_goals_manually else \\\"appraisal_kra\\\"\n\n\t\t\tself.append(\n\t\t\t\ttable_name,\n\t\t\t\t{\n\t\t\t\t\t\\\"kra\\\": entry.key_result_area,\n\t\t\t\t\t\\\"per_weightage\\\": entry.per_weightage,\n\t\t\t\t},\n\t\t\t)\n\n\t\tfor entry in template.rating_criteria:\n\t\t\tself.append(\n\t\t\t\t\\\"self_ratings\\\",\n\t\t\t\t{\n\t\t\t\t\t\\\"criteria\\\": entry.criteria,\n\t\t\t\t\t\\\"per_weightage\\\": entry.per_weightage,\n\t\t\t\t},\n\t\t\t)\n\n\t\treturn self\n\n\tdef calculate_total_score(self):\n\t\ttotal_weightage, total, goal_score_percentage = 0, 0, 0\n\n\t\tif self.rate_goals_manually:\n\t\t\ttable = _(\\\"Goals\\\")\n\t\t\tfor entry in self.goals:\n\t\t\t\tif flt(entry.score) > 5:\n\t\t\t\t\tfrappe.throw(_(\\\"Row {0}: Goal Score cannot be greater than 5\\\").format(entry.idx))\n\n\t\t\t\tentry.score_earned = flt(entry.score) * flt(entry.per_weightage) / 100\n\t\t\t\ttotal += flt(entry.score_earned)\n\t\t\t\ttotal_weightage += flt(entry.per_weightage)\n\n\t\telse:\n\t\t\ttable = _(\\\"KRAs\\\")\n\t\t\tfor entry in self.appraisal_kra:\n\t\t\t\tgoal_score_percentage += flt(entry.goal_score)\n\t\t\t\ttotal_weightage += flt(entry.per_weightage)\n\n\t\t\tself.goal_score_percentage = flt(goal_score_percentage, self.precision(\\\"goal_score_percentage\\\"))\n\t\t\t# convert goal score percentage to total score out of 5\n\t\t\ttotal = flt(goal_score_percentage) / 20\n\n\t\tif total_weightage and flt(total_weightage, 2) != 100.0:\n\t\t\tfrappe.throw(\n\t\t\t\t_(\\\"Total weightage for all {0} must add up to 100. Currently, it is {1}%\\\").format(\n\t\t\t\t\ttable, total_weightage\n\t\t\t\t),\n\t\t\t\ttitle=_(\\\"Incorrect Weightage Allocation\\\"),\n\t\t\t)\n\n\t\tself.total_score = flt(total, self.precision(\\\"total_score\\\"))\n\n\tdef calculate_self_appraisal_score(self):\n\t\ttotal = 0\n\t\tfor entry in self.self_ratings:\n\t\t\tscore = flt(entry.rating) * 5 * flt(entry.per_weightage / 100)\n\t\t\ttotal += flt(score)\n\n\t\tself.self_score = flt(total, self.precision(\\\"self_score\\\"))\n\n\tdef calculate_avg_feedback_score(self, update=False):\n\t\tavg_feedback_score = frappe.qb.avg(\n\t\t\t\\\"Employee Performance Feedback\\\",\n\t\t\t\\\"total_score\\\",\n\t\t\t{\\\"employee\\\": self.employee, \\\"appraisal\\\": self.name, \\\"docstatus\\\": 1},\n\t\t)\n\n\t\tself.avg_feedback_score = flt(avg_feedback_score, self.precision(\\\"avg_feedback_score\\\"))\n\n\t\tif update:\n\t\t\tself.calculate_final_score()\n\t\t\tself.db_update()\n\n\n\n", "CodeBleu_score": 17.993910799146178}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\temployee = frappe.get_doc(\"Employee\", self.employee)\n    employee_date_of_joining = employee.date_of_joining\n    if self.status != \"On Leave\":\n        if getdate(self.attendance_date) > getdate(nowdate()):\n            frappe.throw(_(\"Attendance date cannot be future date\"))\n        elif getdate(self.attendance_date) < getdate(employee_date_of_joining):\n            frappe.throw(\n                _(\"Attendance date cannot be earlier than employee date of joining\")\n            )\n\n", "CodeBleu_score": 30.239592083283444}, {"code": "def validate_attendance_date(self)\n\tif self.status != \"On Leave\":\n        if getdate(self.attendance_date) > getdate(nowdate()):\n            frappe.throw(_(\"Attendance cannot be marked for future dates\"))\n\n    if self.status != \"On Leave\":\n        if getdate(self.attendance_date) < getdate(self.employee_date_of_joining):\n            frappe.throw(\n                _(\n                    \"Attendance cannot be marked for dates earlier than the employee's date of joining\"\n                )\n            )\n\n", "CodeBleu_score": 30.3615173378873}, {"code": "def validate_attendance_date(self)\n\tif self.status == \"On Leave\" and not self.leave_application:\n        return\n\n    if self.attendance_date > getdate(nowdate()):\n        frappe.throw(_(\"Attendance date cannot be a future date\"))\n\n    if self.attendance_date < getdate(self.employee_date_of_joining):\n        frappe.throw(_(\"Attendance date cannot be earlier than the employee's date of joining\"))\n\n", "CodeBleu_score": 26.9620850100668}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\tattendance_exists = frappe.db.exists(\n        \"Attendance\",\n        {\n            \"employee\": self.employee,\n            \"attendance_date\": self.attendance_date,\n            \"name\": (\"!=\", self.name),\n        },\n    )\n    if attendance_exists:\n        raise DuplicateAttendanceError(\n            _(\n                \"An attendance record already exists for employee {0} on {1}. Please visit <a href='{2}'>{2}</a> to view the existing record.\"\n            ).format(\n                frappe.bold(self.employee),\n                frappe.bold(format_date(self.attendance_date)),\n                get_link_to_form(\"Attendance\", attendance_exists[0]),\n            )\n        )\n\n", "CodeBleu_score": 37.23149076880263}, {"code": "def validate_duplicate_record(self)\n\tattendance_exists = frappe.db.exists(\n        \"Attendance\",\n        {\n            \"employee\": self.employee,\n            \"attendance_date\": self.attendance_date,\n            \"name\": (\"!=\", self.name),\n        },\n    )\n    if attendance_exists:\n        raise DuplicateAttendanceError(\n            _(\n                \"Attendance for employee {0} already exists on {1}.\n", "CodeBleu_score": 26.39725942056853}, {"code": "def validate_duplicate_record(self)\n\tattendance = frappe.db.sql(\n        \"\"\"\n\t\t\tSELECT name, attendance_date\n\t\t\tFROM `tabAttendance`\n\t\t\tWHERE employee = %(employee)s AND attendance_date = %(attendance_date)s\n\t\t\tAND name != %(name)s\n\t\t\"\"\",\n        values={\n            \"employee\": self.employee,\n            \"attendance_date\": self.attendance_date,\n            \"name\": self.name,\n        },\n        as_dict=1,\n    )\n\n    if attendance:\n        raise DuplicateAttendanceError(\n            _(\n                \"Attendance for employee {0} on date {1} already exists: {2}\".format(\n                    frappe.bold(self.employee),\n                    frappe.bold(format_date(self.attendance_date)),\n                    get_link_to_form(\"Attendance\", attendance[0].name),\n                )\n            )\n        )\n\n", "CodeBleu_score": 40.86034255130427}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t# Get the email addresses of users in the specified group\n    emails = get_emails_from_group(self.dws_group)\n\n    # Send the email\n    self.send_mails(self.dws_group, emails)\n\n    # Update the status of the summary\n    self.db_set(\"status\", \"Sent\")\n\n", "CodeBleu_score": 13.020076619036693}, {"code": "def send_summary(self)\n\tdws_group = frappe.get_doc(\"Daily Work Summary Group\", self.dws_group)\n    emails = []\n    for user in dws_group.users:\n        if user.enable_daily_summary:\n            emails.append(user.email)\n    if emails:\n        self.send_mails(dws_group, emails)\n\n", "CodeBleu_score": 23.48402717481625}, {"code": "def send_summary(self)\n\t# Retrieve the message details\n    message = self.get_message_details()\n    # Get the email addresses of users in the specified group\n    emails = self.get_emails_from_group()\n\n    # Send the email\n    self.send_mails(message, emails)\n\n    # Update the status to \"Sent\"\n    self.db_set(\"status\", \"Sent\")\n\n", "CodeBleu_score": 16.301180937213473}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\tif self.status == \"Scheduled\":\n        existing_interview = frappe.db.get_value(\n            \"Interview\",\n            {\n                \"job_applicant\": self.job_applicant,\n                \"interview_round\": self.interview_round,\n                \"name\": (\"!=\", self.name),\n                \"status\": (\"!=\", \"Cancelled\"),\n            },\n            \"name\",\n            as_dict=True,\n        )\n        if existing_interview:\n            frappe.throw(\n                _(\n                    \"Job Applicant {0} is already scheduled for the interview round {1}. Please refer to the existing interview record {2} for more details.\".format(\n                        get_link_to_form(\"Job Applicant\", self.job_applicant),\n                        get_link_to_form(\"Interview Round\", self.interview_round),\n                        get_link_to_form(\"Interview\", existing_interview.name),\n                    )\n                )\n            )\n\n", "CodeBleu_score": 41.05583745218898}, {"code": "def validate_duplicate_interview(self)\n\tif self.status == \"Scheduled\":\n        interview_rounds = frappe.get_all(\n            \"Interview\",\n            filters={\n                \"job_applicant\": self.job_applicant,\n                \"interview_round\": self.interview_round,\n                \"docstatus\": 1,\n                \"name\": [\"!=\", self.name],\n            },\n        )\n        if interview_rounds:\n            raise DuplicateInterviewRoundError(\n                _(\n                    \"Job applicant {0} is already scheduled for interview round {1}. Please check the existing interview record {2}.\".format(\n                        get_link_to_form(\"Job Applicant\", self.job_applicant),\n                        get_link_to_form(\n                            \"Interview Round\", self.interview_round\n                        ),\n                        get_link_to_form(\"Interview\", interview_rounds[0].name),\n                    )\n                )\n            )\n\n", "CodeBleu_score": 42.48763138550915}, {"code": "def validate_duplicate_interview(self)\n\tif self.job_applicant and self.interview_round:\n        interview_count = frappe.db.count(\n            \"Interview\",\n            filters={\n                \"job_applicant\": self.job_applicant,\n                \"interview_round\": self.interview_round,\n                \"docstatus\": 1,\n            },\n        )\n        if interview_count:\n            interview = frappe.db.get_value(\n                \"Interview\",\n                filters={\n                    \"job_applicant\": self.job_applicant,\n                    \"interview_round\": self.interview_round,\n                    \"docstatus\": 1,\n                },\n                fieldname=\"name\",\n            )\n            applicant_name = frappe.db.get_value(\n                \"Job Applicant\", self.job_applicant, \"applicant_name\"\n            )\n            applicant_email = frappe.db.get_value(\n                \"Job Applicant\", self.job_applicant, \"email_id\"\n            )\n            applicant_phone = frappe.db.get_value(\n                \"Job Applicant\", self.job_applicant, \"phone\"\n            )\n            applicant_link = get_link_to_form(\"Job Applicant\", self.job_applicant)\n            interview_link = get_link_to_form(\"Interview\", interview)\n            raise DuplicateInterviewRoundError(\n                _(\n                    \"\"\"Job Applicant {0} has already appeared for Interview Round {1}.\n", "CodeBleu_score": 42.17872480239452}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\tskill_assessments = frappe.get_all(\n        \"Skill Assessment\",\n        filters={\"parent\": self.name, \"parenttype\": \"Interview Feedback\"},\n        fields=[\"rating\"],\n    )\n\n    total_rating = 0\n    for assessment in skill_assessments:\n        if assessment.rating:\n            total_rating += assessment.rating\n\n    if not total_rating:\n        self.average_rating = 0\n    else:\n        self.average_rating = total_rating / len(skill_assessments)\n\n", "CodeBleu_score": 28.696151972744804}, {"code": "def calculate_average_rating(self)\n\ttotal_rating = 0\n    total_assessments = 0\n    for assessment in self.skill_assessments:\n        if assessment.rating:\n            total_rating += assessment.rating\n            total_assessments += 1\n\n    self.average_rating = total_rating / total_assessments if total_assessments else 0\n\n", "CodeBleu_score": 25.67012949290476}, {"code": "def calculate_average_rating(self)\n\tif self.skill_assessments:\n        total_rating = 0\n        for assessment in self.skill_assessments:\n            if assessment.rating:\n                total_rating += assessment.rating\n        self.average_rating = total_rating / len(self.skill_assessments)\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 40.04527048921464}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\tinterview_round = frappe.get_doc(\"Interview Round\", doc.interview_round)\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = interview_round.name\n    interview.designation = interview_round.designation\n    interview.interviewers = []\n    for interviewer in interview_round.interviewers:\n        interview.append(\"interviewers\", {\n            \"interviewer\": interviewer.interviewer,\n            \"interviewer_name\": interviewer.interviewer_name,\n            \"interviewer_email\": interviewer.interviewer_email\n        })\n    return interview\n\n", "CodeBleu_score": 48.41490625742056}, {"code": "def create_interview(doc):\n\tinterview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.name\n    interview.designation = doc.designation\n    interview.interviewers = doc.interviewers\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 35.433000551953434}, {"code": "def create_interview(doc):\n\tinterview = frappe.new_doc('Interview')\n    interview.round = doc.round\n    interview.designation = doc.designation\n    interview.interviewers = doc.interviewers\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 29.630051158561155}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\tjob_offers = frappe.db.sql(\n        \"\"\"\n            SELECT name\n            FROM `tabJob Offer`\n            WHERE designation = %(designation)s\n                AND company = %(company)s\n                AND offer_date BETWEEN %(from_date)s AND %(to_date)s\n                AND docstatus = 1\n        \"\"\",\n        {\n            \"designation\": self.designation,\n            \"company\": self.company,\n            \"from_date\": from_date,\n            \"to_date\": to_date,\n        },\n        as_dict=1,\n    )\n    return [job_offer.name for job_offer in job_offers]\n\n", "CodeBleu_score": 47.299819359440306}, {"code": "def get_job_offer(self, from_date, to_date)\n\treturn frappe.get_all(\"Job Offer\", filters={\"designation\": self.designation, \"company\": self.company, \"offer_date\": [\"between\", [from_date, to_date]], \"docstatus\": 1}, pluck=\"name\")\n\n", "CodeBleu_score": 57.62746813816193}, {"code": "def get_job_offer(self, from_date, to_date)\n\tjob_offers = frappe.db.sql(\n        \"\"\"\n            SELECT\n                name\n            FROM\n                `tabJob Offer`\n            WHERE\n                designation = %(designation)s\n                AND company = %(company)s\n                AND offer_date BETWEEN %(from_date)s AND %(to_date)s\n                AND docstatus = 1\n        \"\"\",\n        values={\n            \"designation\": self.designation,\n            \"company\": self.company,\n            \"from_date\": from_date,\n            \"to_date\": to_date,\n        },\n        as_dict=1,\n    )\n    return [job_offer.name for job_offer in job_offers]\n\n", "CodeBleu_score": 46.825647683946336}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\tif not company and not department:\n        return None\n    job_offers = frappe.db.sql(\n        \"\"\"\n            SELECT\n                COUNT(name) AS total,\n                COUNT(CASE WHEN status = 'Accepted' THEN name END) AS accepted\n            FROM `tabJob Offer`\n            WHERE\n                docstatus = 1\n                AND company = %(company)s\n                AND department = %(department)s\n        \"\"\",\n        values={\"company\": company, \"department\": department},\n    )\n\n    if not job_offers:\n        return None\n\n    total = job_offers[0][0]\n    accepted = job_offers[0][1]\n\n    if total == 0:\n        return None\n\n    return frappe._dict({\"value\": flt(accepted / total) * 100, \"fieldtype\": \"Percent\"})\n\n", "CodeBleu_score": 28.75191118663645}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\tif not company:\n        company = frappe.db.get_single_value(\"HR Settings\", \"default_company\")\n\n    if not department:\n        department = frappe.db.get_single_value(\"HR Settings\", \"default_department\")\n\n    total_job_offers = frappe.db.sql(\n        \"\"\"\n\t\tSELECT\n\t\t\tCOUNT(*)\n\t\tFROM `tabJob Offer`\n\t\tWHERE\n\t\t\tcompany=%(company)s\n\t\t\tAND department=%(department)s\n\t\t\tAND docstatus=1\n\t\t\"\"\",\n        values={\"company\": company, \"department\": department},\n    )\n    accepted_job_offers = frappe.db.sql(\n        \"\"\"\n\t\tSELECT\n\t\t\tCOUNT(*)\n\t\tFROM `tabJob Offer`\n\t\tWHERE\n\t\t\tcompany=%(company)s\n\t\t\tAND department=%(department)s\n\t\t\tAND docstatus=1\n\t\t\tAND status='Accepted'\n\t\t\"\"\",\n        values={\"company\": company, \"department\": department},\n    )\n\n    if not total_job_offers[0][0] or not accepted_job_offers[0][0]:\n        return 0\n    else:\n        return flt(accepted_job_offers[0][0]) / flt(total_job_offers[0][0]) * 100\n\n", "CodeBleu_score": 27.67152372589331}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\tif not company:\n        company = frappe.db.get_single_value(\"HR Settings\", \"default_company\")\n    if not department:\n        department = frappe.db.get_single_value(\"HR Settings\", \"default_department\")\n    total_job_offers = frappe.db.sql(\n        \"\"\"\n\t\tSELECT COUNT(*)\n\t\tFROM `tabJob Offer`\n\t\tWHERE\n\t\t\tdocstatus = 1\n\t\t\tAND company = %(company)s\n\t\t\tAND department = %(department)s\n\t\t\"\"\",\n        {\"company\": company, \"department\": department},\n    )\n    accepted_job_offers = frappe.db.sql(\n        \"\"\"\n\t\tSELECT COUNT(*)\n\t\tFROM `tabJob Offer`\n\t\tWHERE\n\t\t\tdocstatus = 1\n\t\t\tAND company = %(company)s\n\t\t\tAND department = %(department)s\n\t\t\tAND status = 'Accepted'\n\t\t\"\"\",\n        {\"company\": company, \"department\": department},\n    )\n    if total_job_offers[0][0]:\n        return frappe._dict(\n            {\n                \"value\": flt(accepted_job_offers[0][0]) / flt(total_job_offers[0][0]),\n                \"fieldtype\": \"Percent\",\n            }\n        )\n    else:\n        return frappe._dict({\"value\": 0, \"fieldtype\": \"Percent\"})\n\n", "CodeBleu_score": 29.42351031887176}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess()) {\n\t\treturn ResponseEntity.badRequest().body(result);\n\t}\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 67.35964625303241}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\tfinal Result result = employerService.register(employerForRegisterDto);\n\n    if (!result.isSuccess()) {\n        return ResponseEntity.badRequest().body(result);\n    }\n\n    return ResponseEntity.ok(result);\n}", "CodeBleu_score": 67.62053090995745}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess()) {\n\t\treturn ResponseEntity.badRequest().body(result);\n\t}\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 67.35964625303241}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal Optional<CompanyStaff> companyStaffOptional = companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\n\t\tif (companyStaffOptional.isPresent()) {\n\t\t\tfinal CompanyStaff companyStaff = companyStaffOptional.get();\n\n\t\t\tfinal Result result = BusinessRules.run(arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword()));\n\n\t\t\tif (result instanceof SuccessResult) {\n\t\t\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\t\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\n\t\t\t\tcompanyStaffDao.save(companyStaff);\n\n\t\t\t\treturn new SuccessResult(Messages.companyStaffUpdated);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\treturn new ErrorResult(Messages.companyStaffNotFound);\n\t}", "CodeBleu_score": 53.202587810874725}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal Optional<CompanyStaff> companyStaff = this.companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\tif (companyStaff.isPresent()) {\n\t\tfinal CompanyStaff companyStaffRecord = companyStaff.get();\n\t\tfinal Result result = BusinessRules.run(arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword()),\n\t\t\t\tareFieldsNotNull(companyStaffForUpdateDto.getFirstName(), companyStaffForUpdateDto.getLastName(), companyStaffForUpdateDto.getEmail()));\n\t\tif (result instanceof ErrorResult) {\n\t\t\treturn result;\n\t\t}\n\t\tcompanyStaffRecord.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaffRecord.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tcompanyStaffRecord.setEmail(companyStaffForUpdateDto.getEmail());\n\t\tthis.companyStaffDao.save(companyStaffRecord);\n\t\treturn new SuccessResult(Messages.companyStaffUpdated);\n\t}\n\treturn new ErrorResult(Messages.companyStaffNotFound);\n}", "CodeBleu_score": 50.18146492293882}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal Optional<CompanyStaff> companyStaffOptional = companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\t\tif (companyStaffOptional.isEmpty()) {\n\t\t\treturn new ErrorResult(Messages.notFound(entityClass, companyStaffForUpdateDto.getId()));\n\t\t}\n\n\t\tfinal CompanyStaff companyStaff = companyStaffOptional.get();\n\n\t\tfinal Result result = BusinessRules.run(arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword()));\n\t\tif (result != null) {\n\t\t\treturn result;\n\t\t}\n\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\n\t\tcompanyStaffDao.save(companyStaff);\n\n\t\treturn new SuccessResult(Messages.updated(entityClass));\n\t}", "CodeBleu_score": 54.85401500377978}]}
