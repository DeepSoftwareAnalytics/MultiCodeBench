{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t# The following code is adapted from the function export_zip_documents in the module account_document_download.\n    # The original code can be found at https://github.com/odoo/odoo/blob/12.0/addons/account_document_download/controllers/main.py#L12.\n    # The original code is licensed under the Odoo Proprietary License v1.0.\n    # See https://github.com/odoo/odoo/blob/12.0/LICENSE for details.\n    #\n    # The following code is licensed under the Odoo Proprietary License v1.0.\n    # See https://github.com/odoo/odoo/blob/12.0/LICENSE for details.\n    #\n    # The following code is licensed under the Odoo Proprietary License v1.0.\n    # See https://github.com/odoo/odoo/blob/12.0/LICENSE for details.\n    #\n    # The following code is licensed under the Odoo Proprietary License v1.0.\n    # See https://github.com/odoo/odoo/blob/12.0/LICENSE for details.\n    #\n    # The following code is licensed under the Odoo Proprietary License v1.0.\n    # See https://github.com/odoo/odoo/blob/12.0/LICENSE for details.\n    #\n    # The following code is licensed under the Odoo Proprietary License v1.0.\n    # See https://github.com/odoo/odoo/blob/12.0/LICENSE for details.\n    #\n    # The following code is licensed under the Odoo Proprietary License v1.0.\n    # See https://github.com/odoo/odoo/blob/12.0/LICENSE for details.\n    #\n    # The following code is licensed under the Odoo Proprietary License v1.0.\n    # See https://github.com/odoo/odoo/blob/12.", "CodeBleu_score": 0.8928571428571428}, {"code": "def export_zip_documents(self, **args)\n\t# The function export_zip_documents retrieves attachment IDs from HTTP request arguments, verifies read access rights and rules for the attachments, and builds a zip file from the attachments' content. It then prepares HTTP headers for the zip file and returns the zip file as an HTTP response.\n    # The function export_zip_documents retrieves attachment IDs from HTTP request arguments, verifies read access rights and rules for the attachments, and builds a zip file from the attachments' content. It then prepares HTTP headers for the zip file and returns the zip file as an HTTP response.\n    # The function export_zip_documents retrieves attachment IDs from HTTP request arguments, verifies read access rights and rules for the attachments, and builds a zip file from the attachments' content. It then prepares HTTP headers for the zip file and returns the zip file as an HTTP response.\n    # The function export_zip_documents retrieves attachment IDs from HTTP request arguments, verifies read access rights and rules for the attachments, and builds a zip file from the attachments' content. It then prepares HTTP headers for the zip file and returns the zip file as an HTTP response.\n    # The function export_zip_documents retrieves attachment IDs from HTTP request arguments, verifies read access rights and rules for the attachments, and builds a zip file from the attachments' content. It then prepares HTTP headers for the zip file and returns the zip file as an HTTP response.\n    # The function export_zip_documents retrieves attachment IDs from HTTP request arguments, verifies read access rights and rules for the attachments, and builds a zip file from the attachments' content. It then prepares HTTP headers for the zip file and returns the zip file as an HTTP response.\n    # The function export_zip_documents retrieves attachment IDs from HTTP request arguments, verifies read access rights and rules for the attachments, and builds a zip file from the attachments' content. It then prepares HTTP headers for the zip file and returns the zip file as an HTTP response.\n    # The function export_zip_documents retrieves attachment IDs from HTTP request arguments, verifies read access rights and rules for the attachments, and builds a zip file from the attachments' content. It then prepares HTTP headers for the zip file and returns the zip file as an HTTP response", "CodeBleu_score": 0.8928571428571428}, {"code": "def export_zip_documents(self, **args)\n\tattachment_ids = args.get('attachment_ids')\n    if not attachment_ids:\n        attachment_ids = args.get('attachment_ids_to_download')\n    if not attachment_ids:\n        return\n    attachments = self.env['ir.attachment'].browse(attachment_ids)\n    # check access rights\n    if not attachments.check_access_rights('read'):\n        raise http.AccessDenied()\n    # check access rights on the attachments' parent records\n    for attachment in attachments:\n        attachment.check_access_rule('read')\n    # build the zip file\n    zip_file = self.env['ir.attachment'].build_zip(attachments)\n    # prepare HTTP headers\n    headers = _get_zip_headers(zip_file, 'documents.zip')\n    return headers, zip_file\n\n", "CodeBleu_score": 40.05496790374055}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\tvalues = super(PortalAccount, self)._prepare_home_portal_values(counters)\n    if not values.get('invoices'):\n        values['invoices'] = self._get_invoices_count()\n    if not values.get('bills'):\n        values['bills'] = self._get_bills_count()\n    return values\n\n", "CodeBleu_score": 17.270994083637344}, {"code": "def _prepare_home_portal_values(self, counters)\n\tvalues = super(PortalAccount, self)._prepare_home_portal_values(counters)\n    if request.env.user.has_group('account.group_account_invoice'):\n        values.update({\n            'invoice_count': counters['invoice'],\n            'bill_count': counters['bill'],\n        })\n    return values\n\n", "CodeBleu_score": 14.592545185621889}, {"code": "def _prepare_home_portal_values(self, counters)\n\tvalues = super(PortalAccount, self)._prepare_home_portal_values(counters)\n    if self.env.user.has_group('account.group_account_invoice'):\n        values['invoice_count'] = self.env['account.move'].search_count([('state', '=', 'posted'), ('type', 'in', ['in_invoice', 'in_refund'])])\n    if self.env.user.has_group('account.group_account_payment'):\n        values['bill_count'] = self.env['account.move'].search_count([('state', '=', 'posted'), ('type', 'in', ['out_invoice', 'out_refund'])])\n    return values\n\n", "CodeBleu_score": 35.367402117964176}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t# The function portal_my_invoices prepares the values needed for displaying invoices, including pagination and sorting/filtering options. It retrieves the relevant invoices based on these parameters, updates the session history with the latest invoice IDs, and renders the invoices page with the prepared values.\n    # The function portal_my_invoices prepares the values needed for displaying invoices, including pagination and sorting/filtering options. It retrieves the relevant invoices based on these parameters, updates the session history with the latest invoice IDs, and renders the invoices page with the prepared values.\n    # The function portal_my_invoices prepares the values needed for displaying invoices, including pagination and sorting/filtering options. It retrieves the relevant invoices based on these parameters, updates the session history with the latest invoice IDs, and renders the invoices page with the prepared values.\n    # The function portal_my_invoices prepares the values needed for displaying invoices, including pagination and sorting/filtering options. It retrieves the relevant invoices based on these parameters, updates the session history with the latest invoice IDs, and renders the invoices page with the prepared values.\n    # The function portal_my_invoices prepares the values needed for displaying invoices, including pagination and sorting/filtering options. It retrieves the relevant invoices based on these parameters, updates the session history with the latest invoice IDs, and renders the invoices page with the prepared values.\n    # The function portal_my_invoices prepares the values needed for displaying invoices, including pagination and sorting/filtering options. It retrieves the relevant invoices based on these parameters, updates the session history with the latest invoice IDs, and renders the invoices page with the prepared values.\n    # The function portal_my_invoices prepares the values needed for displaying invoices, including pagination and sorting/filtering options. It retrieves the relevant invoices based on these parameters, updates the session history with the latest invoice IDs, and renders the invoices page with the prepared values.\n    # The function portal_my_invoices prepares the values needed for displaying invoices", "CodeBleu_score": 7.211538461538461}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\treturn super(PortalAccount, self).portal_my_invoices(page=page, date_begin=date_begin, date_end=date_end, sortby=sortby, filterby=filterby, **kw)\n\n", "CodeBleu_score": 12.773385667438067}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t# get the current user\n    user = request.env.user\n    # get the invoices\n    invoices = user.with_context(active_test=False)._get_invoices(date_begin, date_end, sortby, filterby)\n    # update the session history\n    self._update_history(invoices)\n    # prepare the values\n    values = self._prepare_invoices_values(invoices, page, date_begin, date_end, sortby, filterby)\n    # render the invoices page\n    return request.render('portal_account.invoices', values)\n\n", "CodeBleu_score": 32.98089677705941}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\tinvoice = self._get_invoice_from_id(invoice_id)\n    if not invoice.exists():\n        raise MissingError(_('The invoice you are looking for cannot be found.'))\n    if not invoice.check_access_rights('read'):\n        raise AccessError(_('Invoice access denied!'))\n    if not invoice.check_access_rule('read'):\n        raise AccessError(_('Invoice access denied!'))\n    values = self._prepare_home_portal_values(counters=['invoice_count', 'bill_count'])\n    values = self._get_page_view_values(invoice, access_token, values, 'my_invoices_history', False, **kw)\n    if download:\n        if report_type == 'pdf':\n            return self._portal_download_invoice(invoice, access_token, report_type)\n        elif report_type == 'text':\n            return self._portal_download_invoice(invoice, access_token, report_type)\n        elif report_type == 'html':\n            return self._portal_download_invoice(invoice, access_token, report_type)\n    return request.render('account.portal_my_invoice', values)\n\n", "CodeBleu_score": 31.00878418267316}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\tinvoice = request.env['account.move'].browse(invoice_id)\n    if not invoice.exists() or not invoice.check_access_rights('read'):\n        raise AccessError(_('Invoice not found.'))\n    if not invoice.state in ('posted', 'draft', 'proforma2'):\n        raise AccessError(_('Invoice not editable.'))\n    if download:\n        if report_type == 'pdf':\n            return request.make_response(invoice._render_pdf(), headers=_get_zip_headers())\n        else:\n            return invoice._render_report(report_type)\n    return self._get_page_view_values(invoice, access_token, {'page_name': 'invoice', 'invoice': invoice}, 'my_invoices_history', False, **kw)\n\n", "CodeBleu_score": 20.656995506358243}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\tinvoice = request.env['account.move'].sudo().browse(invoice_id)\n    if not invoice.exists():\n        raise http.HttpNotFound()\n    if not invoice.exists() or not invoice.check_access_rights('read', raise_exception=False):\n        raise AccessError(_('Access Denied'))\n    if not invoice.state in ['posted', 'draft']:\n        raise MissingError(_('This invoice is not available anymore.'))\n    if not invoice.invoice_report_id:\n        raise MissingError(_('This invoice has no report.'))\n    if download and report_type == 'pdf':\n        legal_docs = invoice.invoice_report_id.get_attachments(invoice)\n        if len(legal_docs) > 1:\n            zip_file = self._zip_attachments(legal_docs)\n            return request.make_response(zip_file, _get_zip_headers())\n        else:\n            return request.make_response(legal_docs[0][2], {'Content-Type': legal_docs[0][1]})\n    values = self._prepare_portal_layout_values()\n    values.update({\n        'invoice': invoice,\n        'report_type': report_type,\n        'report_name': invoice.invoice_report_id.name,\n        'report_file': invoice.invoice_report_id.render(invoice),\n        'page_name': 'invoice',\n    })\n    return request.render('account.portal_my_invoice_detail', values)\n\n", "CodeBleu_score": 34.64548160494011}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t# The function _get_demo_data_products searches for product templates based on the specified company's domain, updates the sale taxes for these products if the company's account_sale_tax_id is set, and updates the purchase taxes if the company's account_purchase_tax_id is set.\n    # The function _get_demo_data_products searches for product templates based on the specified company's domain, updates the sale taxes for these products if the company's account_sale_tax_id is set, and updates the purchase taxes if the company's account_purchase_tax_id is set.\n    # The function _get_demo_data_products searches for product templates based on the specified company's domain, updates the sale taxes for these products if the company's account_sale_tax_id is set, and updates the purchase taxes if the company's account_purchase_tax_id is set.\n    # The function _get_demo_data_products searches for product templates based on the specified company's domain, updates the sale taxes for these products if the company's account_sale_tax_id is set, and updates the purchase taxes if the company's account_purchase_tax_id is set.\n    # The function _get_demo_data_products searches for product templates based on the specified company's domain, updates the sale taxes for these products if the company's account_sale_tax_id is set, and updates the purchase taxes if the company's account_purchase_tax_id is set.\n    # The function _get_demo_data_products searches for product templates based on the specified company's domain, updates the sale taxes for these products if the company's account_sale_tax_id is set, and updates the purchase taxes if the company's account_purchase_tax_id is set.\n    # The function _get_demo_data_products searches for product templates based on the specified company's domain, updates the sale taxes for these products if the company's account_sale_tax_id is set, and updates the purchase taxes if the company's account_purchase_tax_id is set.\n    # The function _get_", "CodeBleu_score": 1.105006105006105}, {"code": "def _get_demo_data_products(self, company=False)\n\tdomain = self._get_demo_data_products_domain(company)\n    product_templates = self.env['product.template'].search(domain)\n    for product in product_templates:\n        if company and company.account_sale_tax_id:\n            product.property_account_income_id = company.account_sale_tax_id\n        if company and company.account_purchase_tax_id:\n            product.property_account_expense_id = company.account_purchase_tax_id\n    return product_templates\n\n", "CodeBleu_score": 14.850042409294492}, {"code": "def _get_demo_data_products(self, company=False)\n\t# This is a generator because data created here might be referenced by xml_id to data\n    # created later but defined in this same function.\n    self.ensure_one()\n    if not company:\n        company = self.env.company\n    product_ids = self.env['product.template'].search(company.domain_force)\n    for product in product_ids:\n        if company.account_sale_tax_id:\n            product.taxes_id = [(6, 0, company.account_sale_tax_id.ids)]\n        if company.account_purchase_tax_id:\n            product.purchase_taxes_id = [(6, 0, company.account_purchase_tax_id.ids)]\n    return product_ids\n", "CodeBleu_score": 29.815666789399387}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t2000,\n                'date': time.strftime('%Y-01-01'),\n                'partner_id': 'base.res_partner_12',\n            },\n            'demo_bank_statement_line_3': {\n                'journal_id': bnk_journal.id,\n                'payment_ref': 'Last Year Interests',\n                'amount': 102.78,\n                'date': time.strftime('%Y-01-01'),\n            },\n            'demo_bank_statement_line_4': {\n                'journal_id': bnk_journal.id,\n                'payment_ref': time.strftime('INV/%Y/00002'),\n                'amount': 750,\n                'date': time.strftime('%Y-01-01'),\n                'partner_id': 'base.res_partner_2',\n            },\n            'demo_bank_statement_line_5': {\n                'journal_id': bnk_journal.id,\n                'payment_ref': f'R:9772938  10/07 AX 9415116318 T:5 BRT: {formatLang(self.env, 100.0, digits=2)} C/ croip',\n                'amount': 96.67,\n                'date': time.strftime('%Y-01-01'),\n            },\n        }\n\n    @api.model\n    def _get_demo_data_reconcile_model(self, company=False):\n        return {\n            'reconcile_from_label': {\n                'name': 'Line with Bank Fees',\n                'rule_type': 'writeoff_suggestion',\n                'match_label': 'contains',\n                'match_label_param': 'BRT',\n                'line_ids': [\n                    Command.create({\n                        'label': 'Due amount',\n                        'account_id': self._get_demo_account(\n                            'income',\n                            'income',\n                            self.env.company,\n                        ).id,\n                        'amount_type': 'regex',\n                        'amount_string': r'BRT: ([\\d,.]+)',\n                    }),\n                    Command.create({\n                        'label': 'Bank Fees',\n                        'account_id': self._get_demo_account(\n                            'cost_of_goods_sold',\n                            'expense_direct_cost',\n                            self.env.company,\n                        ).id,\n                        'amount_type': 'percentage',\n                        'amount_string': '100',\n                    }),\n                ]\n            },\n        }\n\n    @api.model\n    def _get_demo_data_attachment(self, company=False):\n        return {\n            'ir_attachment_in_invoice_1': {\n                'type': 'binary',\n                'name': 'in_invoice_yourcompany_demo.pdf',\n                'res_model': 'account.move',\n                'res_id': 'demo_invoice_extract',\n                'raw': file_open(\n                    'account/static/demo/in_invoice_yourcompany_demo_1.pdf', 'rb'\n                ).read()\n            },\n            'ir_attachment_in_invoice_2': {\n                'type': 'binary',\n                'name': 'in_invoice_yourcompany_demo.pdf',\n                'res_model': 'account.move',\n                'res_id': 'demo_invoice_equipment_purchase',\n                'raw': file_open(\n                    'account/static/demo/in_invoice_yourcompany_demo_2.pdf', 'rb'\n                ).read()\n            },\n        }\n\n    @api.model\n    def _get_demo_data_mail_message(self, company=False):\n        return {\n            'mail_message_in_invoice_1': {\n                'model': 'account.move',\n                'res_id': 'demo_invoice_extract',\n                'body': 'Vendor Bill attachment',\n                'message_type': 'comment',\n                'author_id': 'base.partner_demo',\n                'attachment_ids': [Command.set([\n                    'ir_attachment_in_invoice_1',\n                ])]\n            },\n            'mail_message_in_invoice_2': {\n                'model': 'account.move',\n                'res_id': 'demo_invoice_equipment_purchase',\n                'body': 'Vendor Bill attachment',\n                'message_type': 'comment',\n                'author_id': 'base.partner_demo',\n                'attachment_ids': [Command.set([\n                    'ir_attachment_in_invoice_2',\n                ])]\n            },\n        }\n\n    @api.model\n    def _get_demo_data_mail_activity(self, company=False):\n        return {\n            'invoice_activity_1': {\n                'res_id': 'demo_invoice_3',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_todo',\n                'date_deadline': (fields.Datetime.today() + relativedelta(days=5)).strftime('%Y-%m-%d %H:%M'),\n                'summary': 'Follow-up on payment',\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n            'invoice_activity_2': {\n                'res_id': 'demo_invoice_2',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_call',\n                'date_deadline': fields.Datetime.today().strftime('%Y-%m-%d %H:%M'),\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n            'invoice_activity_3': {\n                'res_id': 'demo_invoice_1',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_todo',\n                'date_deadline': (fields.Datetime.today() + relativedelta(days=5)).strftime('%Y-%m-%d %H:%M'),\n                'summary': 'Include upsell',\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n            'invoice_activity_4': {\n                'res_id': 'demo_invoice_extract',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_todo',\n                'date_deadline': (fields.Datetime.today() + relativedelta(days=5)).strftime('%Y-%m-%d %H:%M'),\n                'summary': 'Update address',\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n        }\n\n    @api.model\n\n\n", "CodeBleu_score": 30.742219151945093}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t2000,\n                'date': time.strftime('%Y-01-01'),\n                'partner_id': 'base.res_partner_12',\n            },\n            'demo_bank_statement_line_3': {\n                'journal_id': bnk_journal.id,\n                'payment_ref': 'Last Year Interests',\n                'amount': 102.78,\n                'date': time.strftime('%Y-01-01'),\n            },\n            'demo_bank_statement_line_4': {\n                'journal_id': bnk_journal.id,\n                'payment_ref': time.strftime('INV/%Y/00002'),\n                'amount': 750,\n                'date': time.strftime('%Y-01-01'),\n                'partner_id': 'base.res_partner_2',\n            },\n            'demo_bank_statement_line_5': {\n                'journal_id': bnk_journal.id,\n                'payment_ref': f'R:9772938  10/07 AX 9415116318 T:5 BRT: {formatLang(self.env, 100.0, digits=2)} C/ croip',\n                'amount': 96.67,\n                'date': time.strftime('%Y-01-01'),\n            },\n        }\n\n    @api.model\n    def _get_demo_data_reconcile_model(self, company=False):\n        return {\n            'reconcile_from_label': {\n                'name': 'Line with Bank Fees',\n                'rule_type': 'writeoff_suggestion',\n                'match_label': 'contains',\n                'match_label_param': 'BRT',\n                'line_ids': [\n                    Command.create({\n                        'label': 'Due amount',\n                        'account_id': self._get_demo_account(\n                            'income',\n                            'income',\n                            self.env.company,\n                        ).id,\n                        'amount_type': 'regex',\n                        'amount_string': r'BRT: ([\\d,.]+)',\n                    }),\n                    Command.create({\n                        'label': 'Bank Fees',\n                        'account_id': self._get_demo_account(\n                            'cost_of_goods_sold',\n                            'expense_direct_cost',\n                            self.env.company,\n                        ).id,\n                        'amount_type': 'percentage',\n                        'amount_string': '100',\n                    }),\n                ]\n            },\n        }\n\n    @api.model\n    def _get_demo_data_attachment(self, company=False):\n        return {\n            'ir_attachment_in_invoice_1': {\n                'type': 'binary',\n                'name': 'in_invoice_yourcompany_demo.pdf',\n                'res_model': 'account.move',\n                'res_id': 'demo_invoice_extract',\n                'raw': file_open(\n                    'account/static/demo/in_invoice_yourcompany_demo_1.pdf', 'rb'\n                ).read()\n            },\n            'ir_attachment_in_invoice_2': {\n                'type': 'binary',\n                'name': 'in_invoice_yourcompany_demo.pdf',\n                'res_model': 'account.move',\n                'res_id': 'demo_invoice_equipment_purchase',\n                'raw': file_open(\n                    'account/static/demo/in_invoice_yourcompany_demo_2.pdf', 'rb'\n                ).read()\n            },\n        }\n\n    @api.model\n    def _get_demo_data_mail_message(self, company=False):\n        return {\n            'mail_message_in_invoice_1': {\n                'model': 'account.move',\n                'res_id': 'demo_invoice_extract',\n                'body': 'Vendor Bill attachment',\n                'message_type': 'comment',\n                'author_id': 'base.partner_demo',\n                'attachment_ids': [Command.set([\n                    'ir_attachment_in_invoice_1',\n                ])]\n            },\n            'mail_message_in_invoice_2': {\n                'model': 'account.move',\n                'res_id': 'demo_invoice_equipment_purchase',\n                'body': 'Vendor Bill attachment',\n                'message_type': 'comment',\n                'author_id': 'base.partner_demo',\n                'attachment_ids': [Command.set([\n                    'ir_attachment_in_invoice_2',\n                ])]\n            },\n        }\n\n    @api.model\n    def _get_demo_data_mail_activity(self, company=False):\n        return {\n            'invoice_activity_1': {\n                'res_id': 'demo_invoice_3',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_todo',\n                'date_deadline': (fields.Datetime.today() + relativedelta(days=5)).strftime('%Y-%m-%d %H:%M'),\n                'summary': 'Follow-up on payment',\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n            'invoice_activity_2': {\n                'res_id': 'demo_invoice_2',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_call',\n                'date_deadline': fields.Datetime.today().strftime('%Y-%m-%d %H:%M'),\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n            'invoice_activity_3': {\n                'res_id': 'demo_invoice_1',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_todo',\n                'date_deadline': (fields.Datetime.today() + relativedelta(days=5)).strftime('%Y-%m-%d %H:%M'),\n                'summary': 'Include upsell',\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n            'invoice_activity_4': {\n                'res_id': 'demo_invoice_extract',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_todo',\n                'date_deadline': (fields.Datetime.today() + relativedelta(days=5)).strftime('%Y-%m-%d %H:%M'),\n                'summary': 'Update address',\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n        }\n\n    @api.model\n\n\n", "CodeBleu_score": 30.742219151945093}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t2000,\n                'date': time.strftime('%Y-01-01'),\n                'partner_id': 'base.res_partner_12',\n            },\n            'demo_bank_statement_line_3': {\n                'journal_id': bnk_journal.id,\n                'payment_ref': 'Last Year Interests',\n                'amount': 102.78,\n                'date': time.strftime('%Y-01-01'),\n            },\n            'demo_bank_statement_line_4': {\n                'journal_id': bnk_journal.id,\n                'payment_ref': time.strftime('INV/%Y/00002'),\n                'amount': 750,\n                'date': time.strftime('%Y-01-01'),\n                'partner_id': 'base.res_partner_2',\n            },\n            'demo_bank_statement_line_5': {\n                'journal_id': bnk_journal.id,\n                'payment_ref': f'R:9772938  10/07 AX 9415116318 T:5 BRT: {formatLang(self.env, 100.0, digits=2)} C/ croip',\n                'amount': 96.67,\n                'date': time.strftime('%Y-01-01'),\n            },\n        }\n\n    @api.model\n    def _get_demo_data_reconcile_model(self, company=False):\n        return {\n            'reconcile_from_label': {\n                'name': 'Line with Bank Fees',\n                'rule_type': 'writeoff_suggestion',\n                'match_label': 'contains',\n                'match_label_param': 'BRT',\n                'line_ids': [\n                    Command.create({\n                        'label': 'Due amount',\n                        'account_id': self._get_demo_account(\n                            'income',\n                            'income',\n                            self.env.company,\n                        ).id,\n                        'amount_type': 'regex',\n                        'amount_string': r'BRT: ([\\d,.]+)',\n                    }),\n                    Command.create({\n                        'label': 'Bank Fees',\n                        'account_id': self._get_demo_account(\n                            'cost_of_goods_sold',\n                            'expense_direct_cost',\n                            self.env.company,\n                        ).id,\n                        'amount_type': 'percentage',\n                        'amount_string': '100',\n                    }),\n                ]\n            },\n        }\n\n    @api.model\n    def _get_demo_data_attachment(self, company=False):\n        return {\n            'ir_attachment_in_invoice_1': {\n                'type': 'binary',\n                'name': 'in_invoice_yourcompany_demo.pdf',\n                'res_model': 'account.move',\n                'res_id': 'demo_invoice_extract',\n                'raw': file_open(\n                    'account/static/demo/in_invoice_yourcompany_demo_1.pdf', 'rb'\n                ).read()\n            },\n            'ir_attachment_in_invoice_2': {\n                'type': 'binary',\n                'name': 'in_invoice_yourcompany_demo.pdf',\n                'res_model': 'account.move',\n                'res_id': 'demo_invoice_equipment_purchase',\n                'raw': file_open(\n                    'account/static/demo/in_invoice_yourcompany_demo_2.pdf', 'rb'\n                ).read()\n            },\n        }\n\n    @api.model\n    def _get_demo_data_mail_message(self, company=False):\n        return {\n            'mail_message_in_invoice_1': {\n                'model': 'account.move',\n                'res_id': 'demo_invoice_extract',\n                'body': 'Vendor Bill attachment',\n                'message_type': 'comment',\n                'author_id': 'base.partner_demo',\n                'attachment_ids': [Command.set([\n                    'ir_attachment_in_invoice_1',\n                ])]\n            },\n            'mail_message_in_invoice_2': {\n                'model': 'account.move',\n                'res_id': 'demo_invoice_equipment_purchase',\n                'body': 'Vendor Bill attachment',\n                'message_type': 'comment',\n                'author_id': 'base.partner_demo',\n                'attachment_ids': [Command.set([\n                    'ir_attachment_in_invoice_2',\n                ])]\n            },\n        }\n\n    @api.model\n    def _get_demo_data_mail_activity(self, company=False):\n        return {\n            'invoice_activity_1': {\n                'res_id': 'demo_invoice_3',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_todo',\n                'date_deadline': (fields.Datetime.today() + relativedelta(days=5)).strftime('%Y-%m-%d %H:%M'),\n                'summary': 'Follow-up on payment',\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n            'invoice_activity_2': {\n                'res_id': 'demo_invoice_2',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_call',\n                'date_deadline': fields.Datetime.today().strftime('%Y-%m-%d %H:%M'),\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n            'invoice_activity_3': {\n                'res_id': 'demo_invoice_1',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_todo',\n                'date_deadline': (fields.Datetime.today() + relativedelta(days=5)).strftime('%Y-%m-%d %H:%M'),\n                'summary': 'Include upsell',\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n            'invoice_activity_4': {\n                'res_id': 'demo_invoice_extract',\n                'res_model_id': 'account.model_account_move',\n                'activity_type_id': 'mail.mail_activity_data_todo',\n                'date_deadline': (fields.Datetime.today() + relativedelta(days=5)).strftime('%Y-%m-%d %H:%M'),\n                'summary': 'Update address',\n                'create_uid': 'base.user_admin',\n                'user_id': 'base.user_admin',\n            },\n        }\n\n    @api.model\n\n\n", "CodeBleu_score": 30.742219151945093}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\tearning_accounts = self.search([('account_type', '=', 'earnings')])\n    for company in earning_accounts.mapped('company_id'):\n        current_year_earning_accounts = earning_accounts.filtered(lambda account: account.company_id == company and account.account_type == 'earnings' and account.name.endswith('Current Year Earnings'))\n        if len(current_year_earning_accounts) > 1:\n            raise ValidationError(_('There should be only one account of type \"Current Year Earnings\" for each company. (account code: %s)', current_year_earning_accounts.mapped('code')))\n\n", "CodeBleu_score": 21.846901279692137}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t# Get all the accounts of type \"Current Year Earnings\"\n    current_year_earnings_accounts = self.search([('account_type', '=', 'other_current_account'), ('company_id', '!=', False)])\n    # Group the accounts by company\n    current_year_earnings_accounts_by_company = current_year_earnings_accounts.read_group([('company_id', 'in', current_year_earnings_accounts.mapped('company_id').ids)], ['company_id'])\n    # For each company, check if there is more than one account of type \"Current Year Earnings\"\n    for company in current_year_earnings_accounts_by_company:\n        if len(company['company_id']) > 1:\n            raise ValidationError(_('There cannot be more than one Current Year Earnings account for a company.'))\n\n", "CodeBleu_score": 21.314541427538693}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\tcurrent_year_earning_accounts = self.filtered(lambda account: account.account_type == 'earnings_current_year')\n    if current_year_earning_accounts:\n        current_year_earning_accounts_by_company = current_year_earning_accounts.group_by('company_id')\n        for company, accounts in current_year_earning_accounts_by_company.items():\n            if len(accounts) > 1:\n                raise ValidationError(_('You cannot have more than one account of type \"Current Year Earnings\" for each company. (company: %s)', company.name))\n\n", "CodeBleu_score": 31.798822455204668}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t.company_id.id].keys())\n            closest_index = bisect_left(codes_list, account.code) - 1\n            account.account_type = accounts_with_codes[account.company_id.id][codes_list[closest_index]] if closest_index != -1 else 'asset_current'\n\n    @api.depends('account_type')\n    def _compute_include_initial_balance(self):\n        for account in self:\n            account.include_initial_balance = account.account_type not in ('income', 'income_other', 'expense', 'expense_depreciation', 'expense_direct_cost', 'off_balance')\n\n    @api.depends('account_type')\n    def _compute_internal_group(self):\n        for account in self:\n            if account.account_type:\n                account.internal_group = 'off_balance' if account.account_type == 'off_balance' else account.account_type.split('_')[0]\n\n    @api.depends('account_type')\n    def _compute_reconcile(self):\n        for account in self:\n            account.reconcile = account.account_type in ('asset_receivable', 'liability_payable')\n\n    def _set_opening_debit(self):\n        for record in self:\n            record._set_opening_debit_credit(record.opening_debit, 'debit')\n\n    def _set_opening_credit(self):\n        for record in self:\n            record._set_opening_debit_credit(record.opening_credit, 'credit')\n\n    def _set_opening_balance(self):\n        # Tracking of the balances to be used after the import to populate the opening move in batch.\n        for account in self:\n            balance = account.opening_balance\n            account._set_opening_debit_credit(abs(balance) if balance > 0.0 else 0.0, 'debit')\n            account._set_opening_debit_credit(abs(balance) if balance < 0.0 else 0.0, 'credit')\n\n    def _set_opening_debit_credit(self, amount, field):\n        \\\"\\\"\\\" Generic function called by both opening_debit and opening_credit's\n        inverse function. 'Amount' parameter is the value to be set, and field\n        either 'debit' or 'credit', depending on which one of these two fields\n        got assigned.\n        \\\"\\\"\\\"\n        self.ensure_one()\n        if 'import_account_opening_balance' not in self._cr.precommit.data:\n            data = self._cr.precommit.data['import_account_opening_balance'] = {}\n            self._cr.precommit.add(self._load_precommit_update_opening_move)\n        else:\n            data = self._cr.precommit.data['import_account_opening_balance']\n        data.setdefault(self.id, [None, None])\n        index = 0 if field == 'debit' else 1\n        data[self.id][index] = amount\n\n    @api.model\n    def default_get(self, default_fields):\n        \\\"\\\"\\\"If we're creating a new account through a many2one, there are chances that we typed the account code\n        instead of its name. In that case, switch both fields values.\n        \\\"\\\"\\\"\n        if 'name' not in default_fields and 'code' not in default_fields:\n            return super().default_get(default_fields)\n        default_name = self._context.get('default_name')\n        default_code = self._context.get('default_code')\n        if default_name and not default_code:\n            try:\n                default_code = int(default_name)\n            except ValueError:\n                pass\n            if default_code:\n                default_name = False\n        contextual_self = self.with_context(default_name=default_name, default_code=default_code)\n        return super(AccountAccount, contextual_self).default_get(default_fields)\n\n    @api.model\n    def _get_most_frequent_accounts_for_partner(self, company_id, partner_id, move_type, filter_never_user_accounts=False, limit=None):\n        \\\"\\\"\\\"\n        Returns the accounts ordered from most frequent to least frequent for a given partner\n        and filtered according to the move type\n        :param company_id: the company id\n        :param partner_id: the partner id for which we want to retrieve the most frequent accounts\n        :param move_type: the type of the move to know which type of accounts to retrieve\n        :param filter_never_user_accounts: True if we should filter out accounts never used for the partner\n        :param limit: the maximum number of accounts to retrieve\n        :returns: List of account ids, ordered by frequency (from most to least frequent)\n        \\\"\\\"\\\"\n        domain = [\n            *self.env['account.move.line']._check_company_domain(company_id),\n            ('partner_id', '=', partner_id),\n            ('account_id.deprecated', '=', False),\n            ('date', '>=', fields.Date.add(fields.Date.today(), days=-365 * 2)),\n        ]\n        if move_type in self.env['account.move'].get_inbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'income'))\n        elif move_type in self.env['account.move'].get_outbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'expense'))\n\n        query = self.env['account.move.line']._where_calc(domain)\n        if not filter_never_user_accounts:\n            _kind, rhs_table, condition = query._joins['account_move_line__account_id']\n            query._joins['account_move_line__account_id'] = (SQL(\\\"RIGHT JOIN\\\"), rhs_table, condition)\n\n        from_clause, where_clause, params = query.get_sql()\n        self._cr.execute(f\\\"\\\"\\\"\n            SELECT account_move_line__account_id.id\n              FROM {from_clause}\n             WHERE {where_clause}\n          GROUP BY account_move_line__account_id.id\n          ORDER BY COUNT(account_move_line.id) DESC, account_move_line__account_id.code\n                   {f\\\"LIMIT {limit:d}\\\" if limit else \\\"\\\"}\n        \\\"\\\"\\\", params)\n        return [r[0] for r in self._cr.fetchall()]\n\n    @api.model\n    def _get_most_frequent_account_for_partner(self, company_id, partner_id, move_type=None):\n        most_frequent_account = self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type, filter_never_user_accounts=True, limit=1)\n        return most_frequent_account[0] if most_frequent_account else False\n\n    @api.model\n    def _order_accounts_by_frequency_for_partner(self, company_id, partner_id, move_type=None):\n        return self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type)\n\n    @api.model\n\n\n", "CodeBleu_score": 25.600099738353787}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t.company_id.id].keys())\n            closest_index = bisect_left(codes_list, account.code) - 1\n            account.account_type = accounts_with_codes[account.company_id.id][codes_list[closest_index]] if closest_index != -1 else 'asset_current'\n\n    @api.depends('account_type')\n    def _compute_include_initial_balance(self):\n        for account in self:\n            account.include_initial_balance = account.account_type not in ('income', 'income_other', 'expense', 'expense_depreciation', 'expense_direct_cost', 'off_balance')\n\n    @api.depends('account_type')\n    def _compute_internal_group(self):\n        for account in self:\n            if account.account_type:\n                account.internal_group = 'off_balance' if account.account_type == 'off_balance' else account.account_type.split('_')[0]\n\n    @api.depends('account_type')\n    def _compute_reconcile(self):\n        for account in self:\n            account.reconcile = account.account_type in ('asset_receivable', 'liability_payable')\n\n    def _set_opening_debit(self):\n        for record in self:\n            record._set_opening_debit_credit(record.opening_debit, 'debit')\n\n    def _set_opening_credit(self):\n        for record in self:\n            record._set_opening_debit_credit(record.opening_credit, 'credit')\n\n    def _set_opening_balance(self):\n        # Tracking of the balances to be used after the import to populate the opening move in batch.\n        for account in self:\n            balance = account.opening_balance\n            account._set_opening_debit_credit(abs(balance) if balance > 0.0 else 0.0, 'debit')\n            account._set_opening_debit_credit(abs(balance) if balance < 0.0 else 0.0, 'credit')\n\n    def _set_opening_debit_credit(self, amount, field):\n        \\\"\\\"\\\" Generic function called by both opening_debit and opening_credit's\n        inverse function. 'Amount' parameter is the value to be set, and field\n        either 'debit' or 'credit', depending on which one of these two fields\n        got assigned.\n        \\\"\\\"\\\"\n        self.ensure_one()\n        if 'import_account_opening_balance' not in self._cr.precommit.data:\n            data = self._cr.precommit.data['import_account_opening_balance'] = {}\n            self._cr.precommit.add(self._load_precommit_update_opening_move)\n        else:\n            data = self._cr.precommit.data['import_account_opening_balance']\n        data.setdefault(self.id, [None, None])\n        index = 0 if field == 'debit' else 1\n        data[self.id][index] = amount\n\n    @api.model\n    def default_get(self, default_fields):\n        \\\"\\\"\\\"If we're creating a new account through a many2one, there are chances that we typed the account code\n        instead of its name. In that case, switch both fields values.\n        \\\"\\\"\\\"\n        if 'name' not in default_fields and 'code' not in default_fields:\n            return super().default_get(default_fields)\n        default_name = self._context.get('default_name')\n        default_code = self._context.get('default_code')\n        if default_name and not default_code:\n            try:\n                default_code = int(default_name)\n            except ValueError:\n                pass\n            if default_code:\n                default_name = False\n        contextual_self = self.with_context(default_name=default_name, default_code=default_code)\n        return super(AccountAccount, contextual_self).default_get(default_fields)\n\n    @api.model\n    def _get_most_frequent_accounts_for_partner(self, company_id, partner_id, move_type, filter_never_user_accounts=False, limit=None):\n        \\\"\\\"\\\"\n        Returns the accounts ordered from most frequent to least frequent for a given partner\n        and filtered according to the move type\n        :param company_id: the company id\n        :param partner_id: the partner id for which we want to retrieve the most frequent accounts\n        :param move_type: the type of the move to know which type of accounts to retrieve\n        :param filter_never_user_accounts: True if we should filter out accounts never used for the partner\n        :param limit: the maximum number of accounts to retrieve\n        :returns: List of account ids, ordered by frequency (from most to least frequent)\n        \\\"\\\"\\\"\n        domain = [\n            *self.env['account.move.line']._check_company_domain(company_id),\n            ('partner_id', '=', partner_id),\n            ('account_id.deprecated', '=', False),\n            ('date', '>=', fields.Date.add(fields.Date.today(), days=-365 * 2)),\n        ]\n        if move_type in self.env['account.move'].get_inbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'income'))\n        elif move_type in self.env['account.move'].get_outbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'expense'))\n\n        query = self.env['account.move.line']._where_calc(domain)\n        if not filter_never_user_accounts:\n            _kind, rhs_table, condition = query._joins['account_move_line__account_id']\n            query._joins['account_move_line__account_id'] = (SQL(\\\"RIGHT JOIN\\\"), rhs_table, condition)\n\n        from_clause, where_clause, params = query.get_sql()\n        self._cr.execute(f\\\"\\\"\\\"\n            SELECT account_move_line__account_id.id\n              FROM {from_clause}\n             WHERE {where_clause}\n          GROUP BY account_move_line__account_id.id\n          ORDER BY COUNT(account_move_line.id) DESC, account_move_line__account_id.code\n                   {f\\\"LIMIT {limit:d}\\\" if limit else \\\"\\\"}\n        \\\"\\\"\\\", params)\n        return [r[0] for r in self._cr.fetchall()]\n\n    @api.model\n    def _get_most_frequent_account_for_partner(self, company_id, partner_id, move_type=None):\n        most_frequent_account = self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type, filter_never_user_accounts=True, limit=1)\n        return most_frequent_account[0] if most_frequent_account else False\n\n    @api.model\n    def _order_accounts_by_frequency_for_partner(self, company_id, partner_id, move_type=None):\n        return self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type)\n\n    @api.model\n\n\n", "CodeBleu_score": 25.600099738353787}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t.company_id.id].keys())\n            closest_index = bisect_left(codes_list, account.code) - 1\n            account.account_type = accounts_with_codes[account.company_id.id][codes_list[closest_index]] if closest_index != -1 else 'asset_current'\n\n    @api.depends('account_type')\n    def _compute_include_initial_balance(self):\n        for account in self:\n            account.include_initial_balance = account.account_type not in ('income', 'income_other', 'expense', 'expense_depreciation', 'expense_direct_cost', 'off_balance')\n\n    @api.depends('account_type')\n    def _compute_internal_group(self):\n        for account in self:\n            if account.account_type:\n                account.internal_group = 'off_balance' if account.account_type == 'off_balance' else account.account_type.split('_')[0]\n\n    @api.depends('account_type')\n    def _compute_reconcile(self):\n        for account in self:\n            account.reconcile = account.account_type in ('asset_receivable', 'liability_payable')\n\n    def _set_opening_debit(self):\n        for record in self:\n            record._set_opening_debit_credit(record.opening_debit, 'debit')\n\n    def _set_opening_credit(self):\n        for record in self:\n            record._set_opening_debit_credit(record.opening_credit, 'credit')\n\n    def _set_opening_balance(self):\n        # Tracking of the balances to be used after the import to populate the opening move in batch.\n        for account in self:\n            balance = account.opening_balance\n            account._set_opening_debit_credit(abs(balance) if balance > 0.0 else 0.0, 'debit')\n            account._set_opening_debit_credit(abs(balance) if balance < 0.0 else 0.0, 'credit')\n\n    def _set_opening_debit_credit(self, amount, field):\n        \\\"\\\"\\\" Generic function called by both opening_debit and opening_credit's\n        inverse function. 'Amount' parameter is the value to be set, and field\n        either 'debit' or 'credit', depending on which one of these two fields\n        got assigned.\n        \\\"\\\"\\\"\n        self.ensure_one()\n        if 'import_account_opening_balance' not in self._cr.precommit.data:\n            data = self._cr.precommit.data['import_account_opening_balance'] = {}\n            self._cr.precommit.add(self._load_precommit_update_opening_move)\n        else:\n            data = self._cr.precommit.data['import_account_opening_balance']\n        data.setdefault(self.id, [None, None])\n        index = 0 if field == 'debit' else 1\n        data[self.id][index] = amount\n\n    @api.model\n    def default_get(self, default_fields):\n        \\\"\\\"\\\"If we're creating a new account through a many2one, there are chances that we typed the account code\n        instead of its name. In that case, switch both fields values.\n        \\\"\\\"\\\"\n        if 'name' not in default_fields and 'code' not in default_fields:\n            return super().default_get(default_fields)\n        default_name = self._context.get('default_name')\n        default_code = self._context.get('default_code')\n        if default_name and not default_code:\n            try:\n                default_code = int(default_name)\n            except ValueError:\n                pass\n            if default_code:\n                default_name = False\n        contextual_self = self.with_context(default_name=default_name, default_code=default_code)\n        return super(AccountAccount, contextual_self).default_get(default_fields)\n\n    @api.model\n    def _get_most_frequent_accounts_for_partner(self, company_id, partner_id, move_type, filter_never_user_accounts=False, limit=None):\n        \\\"\\\"\\\"\n        Returns the accounts ordered from most frequent to least frequent for a given partner\n        and filtered according to the move type\n        :param company_id: the company id\n        :param partner_id: the partner id for which we want to retrieve the most frequent accounts\n        :param move_type: the type of the move to know which type of accounts to retrieve\n        :param filter_never_user_accounts: True if we should filter out accounts never used for the partner\n        :param limit: the maximum number of accounts to retrieve\n        :returns: List of account ids, ordered by frequency (from most to least frequent)\n        \\\"\\\"\\\"\n        domain = [\n            *self.env['account.move.line']._check_company_domain(company_id),\n            ('partner_id', '=', partner_id),\n            ('account_id.deprecated', '=', False),\n            ('date', '>=', fields.Date.add(fields.Date.today(), days=-365 * 2)),\n        ]\n        if move_type in self.env['account.move'].get_inbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'income'))\n        elif move_type in self.env['account.move'].get_outbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'expense'))\n\n        query = self.env['account.move.line']._where_calc(domain)\n        if not filter_never_user_accounts:\n            _kind, rhs_table, condition = query._joins['account_move_line__account_id']\n            query._joins['account_move_line__account_id'] = (SQL(\\\"RIGHT JOIN\\\"), rhs_table, condition)\n\n        from_clause, where_clause, params = query.get_sql()\n        self._cr.execute(f\\\"\\\"\\\"\n            SELECT account_move_line__account_id.id\n              FROM {from_clause}\n             WHERE {where_clause}\n          GROUP BY account_move_line__account_id.id\n          ORDER BY COUNT(account_move_line.id) DESC, account_move_line__account_id.code\n                   {f\\\"LIMIT {limit:d}\\\" if limit else \\\"\\\"}\n        \\\"\\\"\\\", params)\n        return [r[0] for r in self._cr.fetchall()]\n\n    @api.model\n    def _get_most_frequent_account_for_partner(self, company_id, partner_id, move_type=None):\n        most_frequent_account = self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type, filter_never_user_accounts=True, limit=1)\n        return most_frequent_account[0] if most_frequent_account else False\n\n    @api.model\n    def _order_accounts_by_frequency_for_partner(self, company_id, partner_id, move_type=None):\n        return self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type)\n\n    @api.model\n\n\n", "CodeBleu_score": 25.600099738353787}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t] = amount\n\n    @api.model\n    def default_get(self, default_fields):\n        \\\"\\\"\\\"If we're creating a new account through a many2one, there are chances that we typed the account code\n        instead of its name. In that case, switch both fields values.\n        \\\"\\\"\\\"\n        if 'name' not in default_fields and 'code' not in default_fields:\n            return super().default_get(default_fields)\n        default_name = self._context.get('default_name')\n        default_code = self._context.get('default_code')\n        if default_name and not default_code:\n            try:\n                default_code = int(default_name)\n            except ValueError:\n                pass\n            if default_code:\n                default_name = False\n        contextual_self = self.with_context(default_name=default_name, default_code=default_code)\n        return super(AccountAccount, contextual_self).default_get(default_fields)\n\n    @api.model\n    def _get_most_frequent_accounts_for_partner(self, company_id, partner_id, move_type, filter_never_user_accounts=False, limit=None):\n        \\\"\\\"\\\"\n        Returns the accounts ordered from most frequent to least frequent for a given partner\n        and filtered according to the move type\n        :param company_id: the company id\n        :param partner_id: the partner id for which we want to retrieve the most frequent accounts\n        :param move_type: the type of the move to know which type of accounts to retrieve\n        :param filter_never_user_accounts: True if we should filter out accounts never used for the partner\n        :param limit: the maximum number of accounts to retrieve\n        :returns: List of account ids, ordered by frequency (from most to least frequent)\n        \\\"\\\"\\\"\n        domain = [\n            *self.env['account.move.line']._check_company_domain(company_id),\n            ('partner_id', '=', partner_id),\n            ('account_id.deprecated', '=', False),\n            ('date', '>=', fields.Date.add(fields.Date.today(), days=-365 * 2)),\n        ]\n        if move_type in self.env['account.move'].get_inbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'income'))\n        elif move_type in self.env['account.move'].get_outbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'expense'))\n\n        query = self.env['account.move.line']._where_calc(domain)\n        if not filter_never_user_accounts:\n            _kind, rhs_table, condition = query._joins['account_move_line__account_id']\n            query._joins['account_move_line__account_id'] = (SQL(\\\"RIGHT JOIN\\\"), rhs_table, condition)\n\n        from_clause, where_clause, params = query.get_sql()\n        self._cr.execute(f\\\"\\\"\\\"\n            SELECT account_move_line__account_id.id\n              FROM {from_clause}\n             WHERE {where_clause}\n          GROUP BY account_move_line__account_id.id\n          ORDER BY COUNT(account_move_line.id) DESC, account_move_line__account_id.code\n                   {f\\\"LIMIT {limit:d}\\\" if limit else \\\"\\\"}\n        \\\"\\\"\\\", params)\n        return [r[0] for r in self._cr.fetchall()]\n\n    @api.model\n    def _get_most_frequent_account_for_partner(self, company_id, partner_id, move_type=None):\n        most_frequent_account = self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type, filter_never_user_accounts=True, limit=1)\n        return most_frequent_account[0] if most_frequent_account else False\n\n    @api.model\n    def _order_accounts_by_frequency_for_partner(self, company_id, partner_id, move_type=None):\n        return self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type)\n\n    @api.model\n    def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None):\n        if not name and self._context.get('partner_id') and self._context.get('move_type'):\n            return self._order_accounts_by_frequency_for_partner(\n                            self.env.company.id, self._context.get('partner_id'), self._context.get('move_type'))\n        domain = domain or []\n        if name:\n            if operator in ('=', '!='):\n                name_domain = ['|', ('code', '=', name.split(' ')[0]), ('name', operator, name)]\n            else:\n                name_domain = ['|', ('code', '=ilike', name.split(' ')[0] + '%'), ('name', operator, name)]\n            if operator in expression.NEGATIVE_TERM_OPERATORS:\n                name_domain = ['&', '!'] + name_domain[1:]\n            domain = expression.AND([name_domain, domain])\n        return self._search(domain, limit=limit, order=order)\n\n    @api.onchange('account_type')\n    def _onchange_account_type(self):\n        if self.internal_group == 'off_balance':\n            self.tax_ids = False\n\n    def _split_code_name(self, code_name):\n        # We only want to split the name on the first word if there is a digit in it\n        code, name = ACCOUNT_REGEX.match(code_name or '').groups()\n        return code, name.strip()\n\n    @api.onchange('name')\n    def _onchange_name(self):\n        code, name = self._split_code_name(self.name)\n        if code and not self.code:\n            self.name = name\n            self.code = code\n\n    @api.depends('code')\n    def _compute_display_name(self):\n        for account in self:\n            account.display_name = f\\\"{account.code} {account.name}\\\"\n\n    @api.returns('self', lambda value: value.id)\n    def copy(self, default=None):\n        default = dict(default or {})\n        if default.get('code', False):\n            return super(AccountAccount, self).copy(default)\n        try:\n            default['code'] = (str(int(self.code) + 10) or '').zfill(len(self.code))\n            default.setdefault('name', _(\\\"%s (copy)\\\", self.name or ''))\n            while self.env['account.account'].search([\n                *self.env['account.account']._check_company_domain(default.get('company_id', False) or self.company_id),\n                ('code', '=', default['code']),\n            ], limit=1):\n                default['code'] = (str(int(default['code']) + 10) or '')\n                default['name'] = _(\\\"%s (copy)\\\", self.name or '')\n        except ValueError:\n            default['code'] = _(\\\"%s.copy\\\", self.code or '')\n            default['name'] = self.name\n        return super(AccountAccount, self).copy(default)\n\n\n\n", "CodeBleu_score": 29.598566905469458}, {"code": "def copy_translations(self, new, excluded=())\n\t] = amount\n\n    @api.model\n    def default_get(self, default_fields):\n        \\\"\\\"\\\"If we're creating a new account through a many2one, there are chances that we typed the account code\n        instead of its name. In that case, switch both fields values.\n        \\\"\\\"\\\"\n        if 'name' not in default_fields and 'code' not in default_fields:\n            return super().default_get(default_fields)\n        default_name = self._context.get('default_name')\n        default_code = self._context.get('default_code')\n        if default_name and not default_code:\n            try:\n                default_code = int(default_name)\n            except ValueError:\n                pass\n            if default_code:\n                default_name = False\n        contextual_self = self.with_context(default_name=default_name, default_code=default_code)\n        return super(AccountAccount, contextual_self).default_get(default_fields)\n\n    @api.model\n    def _get_most_frequent_accounts_for_partner(self, company_id, partner_id, move_type, filter_never_user_accounts=False, limit=None):\n        \\\"\\\"\\\"\n        Returns the accounts ordered from most frequent to least frequent for a given partner\n        and filtered according to the move type\n        :param company_id: the company id\n        :param partner_id: the partner id for which we want to retrieve the most frequent accounts\n        :param move_type: the type of the move to know which type of accounts to retrieve\n        :param filter_never_user_accounts: True if we should filter out accounts never used for the partner\n        :param limit: the maximum number of accounts to retrieve\n        :returns: List of account ids, ordered by frequency (from most to least frequent)\n        \\\"\\\"\\\"\n        domain = [\n            *self.env['account.move.line']._check_company_domain(company_id),\n            ('partner_id', '=', partner_id),\n            ('account_id.deprecated', '=', False),\n            ('date', '>=', fields.Date.add(fields.Date.today(), days=-365 * 2)),\n        ]\n        if move_type in self.env['account.move'].get_inbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'income'))\n        elif move_type in self.env['account.move'].get_outbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'expense'))\n\n        query = self.env['account.move.line']._where_calc(domain)\n        if not filter_never_user_accounts:\n            _kind, rhs_table, condition = query._joins['account_move_line__account_id']\n            query._joins['account_move_line__account_id'] = (SQL(\\\"RIGHT JOIN\\\"), rhs_table, condition)\n\n        from_clause, where_clause, params = query.get_sql()\n        self._cr.execute(f\\\"\\\"\\\"\n            SELECT account_move_line__account_id.id\n              FROM {from_clause}\n             WHERE {where_clause}\n          GROUP BY account_move_line__account_id.id\n          ORDER BY COUNT(account_move_line.id) DESC, account_move_line__account_id.code\n                   {f\\\"LIMIT {limit:d}\\\" if limit else \\\"\\\"}\n        \\\"\\\"\\\", params)\n        return [r[0] for r in self._cr.fetchall()]\n\n    @api.model\n    def _get_most_frequent_account_for_partner(self, company_id, partner_id, move_type=None):\n        most_frequent_account = self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type, filter_never_user_accounts=True, limit=1)\n        return most_frequent_account[0] if most_frequent_account else False\n\n    @api.model\n    def _order_accounts_by_frequency_for_partner(self, company_id, partner_id, move_type=None):\n        return self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type)\n\n    @api.model\n    def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None):\n        if not name and self._context.get('partner_id') and self._context.get('move_type'):\n            return self._order_accounts_by_frequency_for_partner(\n                            self.env.company.id, self._context.get('partner_id'), self._context.get('move_type'))\n        domain = domain or []\n        if name:\n            if operator in ('=', '!='):\n                name_domain = ['|', ('code', '=', name.split(' ')[0]), ('name', operator, name)]\n            else:\n                name_domain = ['|', ('code', '=ilike', name.split(' ')[0] + '%'), ('name', operator, name)]\n            if operator in expression.NEGATIVE_TERM_OPERATORS:\n                name_domain = ['&', '!'] + name_domain[1:]\n            domain = expression.AND([name_domain, domain])\n        return self._search(domain, limit=limit, order=order)\n\n    @api.onchange('account_type')\n    def _onchange_account_type(self):\n        if self.internal_group == 'off_balance':\n            self.tax_ids = False\n\n    def _split_code_name(self, code_name):\n        # We only want to split the name on the first word if there is a digit in it\n        code, name = ACCOUNT_REGEX.match(code_name or '').groups()\n        return code, name.strip()\n\n    @api.onchange('name')\n    def _onchange_name(self):\n        code, name = self._split_code_name(self.name)\n        if code and not self.code:\n            self.name = name\n            self.code = code\n\n    @api.depends('code')\n    def _compute_display_name(self):\n        for account in self:\n            account.display_name = f\\\"{account.code} {account.name}\\\"\n\n    @api.returns('self', lambda value: value.id)\n    def copy(self, default=None):\n        default = dict(default or {})\n        if default.get('code', False):\n            return super(AccountAccount, self).copy(default)\n        try:\n            default['code'] = (str(int(self.code) + 10) or '').zfill(len(self.code))\n            default.setdefault('name', _(\\\"%s (copy)\\\", self.name or ''))\n            while self.env['account.account'].search([\n                *self.env['account.account']._check_company_domain(default.get('company_id', False) or self.company_id),\n                ('code', '=', default['code']),\n            ], limit=1):\n                default['code'] = (str(int(default['code']) + 10) or '')\n                default['name'] = _(\\\"%s (copy)\\\", self.name or '')\n        except ValueError:\n            default['code'] = _(\\\"%s.copy\\\", self.code or '')\n            default['name'] = self.name\n        return super(AccountAccount, self).copy(default)\n\n\n\n", "CodeBleu_score": 29.598566905469458}, {"code": "def copy_translations(self, new, excluded=())\n\t] = amount\n\n    @api.model\n    def default_get(self, default_fields):\n        \\\"\\\"\\\"If we're creating a new account through a many2one, there are chances that we typed the account code\n        instead of its name. In that case, switch both fields values.\n        \\\"\\\"\\\"\n        if 'name' not in default_fields and 'code' not in default_fields:\n            return super().default_get(default_fields)\n        default_name = self._context.get('default_name')\n        default_code = self._context.get('default_code')\n        if default_name and not default_code:\n            try:\n                default_code = int(default_name)\n            except ValueError:\n                pass\n            if default_code:\n                default_name = False\n        contextual_self = self.with_context(default_name=default_name, default_code=default_code)\n        return super(AccountAccount, contextual_self).default_get(default_fields)\n\n    @api.model\n    def _get_most_frequent_accounts_for_partner(self, company_id, partner_id, move_type, filter_never_user_accounts=False, limit=None):\n        \\\"\\\"\\\"\n        Returns the accounts ordered from most frequent to least frequent for a given partner\n        and filtered according to the move type\n        :param company_id: the company id\n        :param partner_id: the partner id for which we want to retrieve the most frequent accounts\n        :param move_type: the type of the move to know which type of accounts to retrieve\n        :param filter_never_user_accounts: True if we should filter out accounts never used for the partner\n        :param limit: the maximum number of accounts to retrieve\n        :returns: List of account ids, ordered by frequency (from most to least frequent)\n        \\\"\\\"\\\"\n        domain = [\n            *self.env['account.move.line']._check_company_domain(company_id),\n            ('partner_id', '=', partner_id),\n            ('account_id.deprecated', '=', False),\n            ('date', '>=', fields.Date.add(fields.Date.today(), days=-365 * 2)),\n        ]\n        if move_type in self.env['account.move'].get_inbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'income'))\n        elif move_type in self.env['account.move'].get_outbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'expense'))\n\n        query = self.env['account.move.line']._where_calc(domain)\n        if not filter_never_user_accounts:\n            _kind, rhs_table, condition = query._joins['account_move_line__account_id']\n            query._joins['account_move_line__account_id'] = (SQL(\\\"RIGHT JOIN\\\"), rhs_table, condition)\n\n        from_clause, where_clause, params = query.get_sql()\n        self._cr.execute(f\\\"\\\"\\\"\n            SELECT account_move_line__account_id.id\n              FROM {from_clause}\n             WHERE {where_clause}\n          GROUP BY account_move_line__account_id.id\n          ORDER BY COUNT(account_move_line.id) DESC, account_move_line__account_id.code\n                   {f\\\"LIMIT {limit:d}\\\" if limit else \\\"\\\"}\n        \\\"\\\"\\\", params)\n        return [r[0] for r in self._cr.fetchall()]\n\n    @api.model\n    def _get_most_frequent_account_for_partner(self, company_id, partner_id, move_type=None):\n        most_frequent_account = self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type, filter_never_user_accounts=True, limit=1)\n        return most_frequent_account[0] if most_frequent_account else False\n\n    @api.model\n    def _order_accounts_by_frequency_for_partner(self, company_id, partner_id, move_type=None):\n        return self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type)\n\n    @api.model\n    def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None):\n        if not name and self._context.get('partner_id') and self._context.get('move_type'):\n            return self._order_accounts_by_frequency_for_partner(\n                            self.env.company.id, self._context.get('partner_id'), self._context.get('move_type'))\n        domain = domain or []\n        if name:\n            if operator in ('=', '!='):\n                name_domain = ['|', ('code', '=', name.split(' ')[0]), ('name', operator, name)]\n            else:\n                name_domain = ['|', ('code', '=ilike', name.split(' ')[0] + '%'), ('name', operator, name)]\n            if operator in expression.NEGATIVE_TERM_OPERATORS:\n                name_domain = ['&', '!'] + name_domain[1:]\n            domain = expression.AND([name_domain, domain])\n        return self._search(domain, limit=limit, order=order)\n\n    @api.onchange('account_type')\n    def _onchange_account_type(self):\n        if self.internal_group == 'off_balance':\n            self.tax_ids = False\n\n    def _split_code_name(self, code_name):\n        # We only want to split the name on the first word if there is a digit in it\n        code, name = ACCOUNT_REGEX.match(code_name or '').groups()\n        return code, name.strip()\n\n    @api.onchange('name')\n    def _onchange_name(self):\n        code, name = self._split_code_name(self.name)\n        if code and not self.code:\n            self.name = name\n            self.code = code\n\n    @api.depends('code')\n    def _compute_display_name(self):\n        for account in self:\n            account.display_name = f\\\"{account.code} {account.name}\\\"\n\n    @api.returns('self', lambda value: value.id)\n    def copy(self, default=None):\n        default = dict(default or {})\n        if default.get('code', False):\n            return super(AccountAccount, self).copy(default)\n        try:\n            default['code'] = (str(int(self.code) + 10) or '').zfill(len(self.code))\n            default.setdefault('name', _(\\\"%s (copy)\\\", self.name or ''))\n            while self.env['account.account'].search([\n                *self.env['account.account']._check_company_domain(default.get('company_id', False) or self.company_id),\n                ('code', '=', default['code']),\n            ], limit=1):\n                default['code'] = (str(int(default['code']) + 10) or '')\n                default['name'] = _(\\\"%s (copy)\\\", self.name or '')\n        except ValueError:\n            default['code'] = _(\\\"%s.copy\\\", self.code or '')\n            default['name'] = self.name\n        return super(AccountAccount, self).copy(default)\n\n\n\n", "CodeBleu_score": 29.598566905469458}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\tsale_types = self.env['account.move'].get_sale_types(include_receipts=True)\n\n    query = self.env['account.move.line']._search([\n        ('parent_state', '=', 'posted'),\n        ('move_id.move_type', 'in', sale_types),\n    ])\n    query.add_where(\n        SQL(\n            \"\"\"%s && %s\"\"\",\n            [str(account_id) for account_id in self.ids],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n\n    query_string, query_param = query.select(\n        r\"\"\"DISTINCT move_id, (regexp_matches(jsonb_object_keys(account_move_line.analytic_distribution), '\\d+', 'g'))[1]::int as account_id\"\"\"\n    )\n    query_string = f\"\"\"\n        SELECT account_id, count(move_id) FROM\n            ({query_string}) distribution\n        GROUP BY account_id\n    \"\"\"\n\n    self._cr.execute(query_string, query_param)\n    data = {res['account_id']: res['count'] for res in self._cr.dictfetchall()}\n    for account in self:\n        account.invoice_count = data.get(account.id, 0)\n\n", "CodeBleu_score": 36.18910517729487}, {"code": "def action_view_invoice(self)\n\tsale_types = self.env['account.move'].get_sale_types(include_receipts=True)\n    query = self.env['account.move.line']._search([\n        ('parent_state', '=', 'posted'),\n        ('move_id.move_type', 'in', sale_types),\n    ])\n    query.add_where(SQL(\n        \"%s && %s\",\n        [str(account_id) for account_id in self.ids],\n        self.env['account.move.line']._query_analytic_accounts(),\n    ))\n    query_string, query_param = query.select(r\"\"\"DISTINCT move_id, (regexp_matches(jsonb_object_keys(account_move_line.analytic_distribution), '\\d+', 'g'))[1]::int as account_id\"\"\")\n    query_string = f\"\"\"\n        SELECT account_id, count(move_id) FROM\n            ({query_string}) distribution\n        GROUP BY account_id\n    \"\"\"\n    self._cr.execute(query_string, query_param)\n    data = {res['account_id']: res['count'] for res in self._cr.dictfetchall()}\n    for account in self:\n        account.invoice_count = data.get(account.id, 0)\n    return {\n        'name': _('Invoices'),\n        'type': 'ir.actions.act_window',\n        'view_type': 'form',\n        'view_mode': 'tree,form',\n        'res_model': 'account.move',\n        'domain': [\n            ('state', 'in', ['posted', 'draft']),\n            ('move_type', 'in', sale_types),\n            ('analytic_account_id', 'in', self.ids),\n        ],\n        'context': {\n            'search_default_analytic_account_id': self.ids,\n            'search_default_move_type': sale_types,\n            'search_default_state': ['posted', 'draft'],\n            'search_default_invoice_count': self.", "CodeBleu_score": 36.348752005952356}, {"code": "def action_view_invoice(self)\n\tsale_types = self.env['account.move'].get_sale_types(include_receipts=True)\n    query = self.env['account.move.line']._search([\n        ('parent_state', '=', 'posted'),\n        ('move_id.move_type', 'in', sale_types),\n    ])\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(account_id) for account_id in self.ids],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n    query_string, query_param = query.select(\n        r\"\"\"DISTINCT move_id, (regexp_matches(jsonb_object_keys(account_move_line.analytic_distribution), '\\d+', 'g'))[1]::int as account_id\"\"\"\n    )\n    query_string = f\"\"\"\n        SELECT account_id, count(move_id) FROM\n            ({query_string}) distribution\n        GROUP BY account_id\n    \"\"\"\n    self._cr.execute(query_string, query_param)\n    data = {res['account_id']: res['count'] for res in self._cr.dictfetchall()}\n    for account in self:\n        account.invoice_count = data.get(account.id, 0)\n\n", "CodeBleu_score": 37.68851554240852}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\tself.ensure_one()\n    query = self.env['account.move.line']._search(\n        [('move_id.move_type', 'in', self.env['account.move'].get_purchase_types())])\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(self.id)],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n    query_string, query_param = query.select('DISTINCT account_move_line.move_id')\n    self._cr.execute(query_string, query_param)\n    move_ids = [line.get('move_id') for line in self._cr.dictfetchall()]\n    result = {\n        \"type\": \"ir.actions.act_window\",\n        \"res_model\": \"account.move\",\n        \"domain\": [('id', 'in', move_ids)],\n        \"context\": {\"create\": False, 'default_move_type': 'in_invoice'},\n        \"name\": _(\"Vendor Bills\"),\n        'view_mode': 'tree,form',\n    }\n    return result\n\n", "CodeBleu_score": 79.87775076209402}, {"code": "def action_view_vendor_bill(self)\n\tself.ensure_one()\n    query = self.env['account.move.line']._search([('move_id.move_type', 'in', self.env['account.move'].get_purchase_types())])\n    query.add_where(SQL('%s && %s', [str(self.id), self.env['account.move.line']._query_analytic_accounts()]))\n    query_string, query_param = query.select('DISTINCT account_move_line.move_id')\n    self._cr.execute(query_string, query_param)\n    move_ids = [line.get('move_id') for line in self._cr.dictfetchall()]\n    result = {\n        'type': 'ir.actions.act_window',\n        'res_model': 'account.move',\n        'domain': [('id', 'in', move_ids)],\n        'context': {'create': False, 'default_move_type': 'in_invoice'},\n        'name': _('Vendor Bills'),\n        'view_mode': 'tree,form',\n    }\n    return result\n\n", "CodeBleu_score": 65.25231400164677}, {"code": "def action_view_vendor_bill(self)\n\tself.ensure_one()\n    query = self.env['account.move.line']._search([('move_id.move_type', 'in', self.env['account.move'].get_purchase_types())])\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(self.id)],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n    query_string, query_param = query.select('DISTINCT account_move_line.move_id')\n    self._cr.execute(query_string, query_param)\n    move_ids = [line.get('move_id') for line in self._cr.dictfetchall()]\n    result = {\n        \"type\": \"ir.actions.act_window\",\n        \"res_model\": \"account.move\",\n        \"domain\": [('id', 'in', move_ids)],\n        \"context\": {\"create\": False, 'default_move_type': 'in_invoice'},\n        \"name\": _(\"Vendor Bills\"),\n        'view_mode': 'tree,form',\n    }\n    return result\n\n", "CodeBleu_score": 81.16392973103454}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\tn                description = _(\\\"The running balance (%s) doesn't match the specified ending balance.\\\", formatLang(self.env, stmt.balance_end, currency_obj=stmt.currency_id))\n            stmt.problem_description = description\n\n    def _search_is_valid(self, operator, value):\n        if operator not in ('=', '!=', '<>'):\n            raise UserError(_('Operation not supported'))\n        invalid_ids = self._get_invalid_statement_ids(all_statements=True)\n        if operator in ('!=', '<>') and value or operator == '=' and not value:\n            return [('id', 'in', invalid_ids)]\n        return [('id', 'not in', invalid_ids)]\n\n    # -------------------------------------------------------------------------\n    # BUSINESS METHODS\n    # -------------------------------------------------------------------------\n    def _get_statement_validity(self):\n        \\\"\\\"\\\" Compares the balance_start to the previous statements balance_end_real \\\"\\\"\\\"\n        self.ensure_one()\n        previous = self.env['account.bank.statement'].search(\n            [\n                ('first_line_index', '<', self.first_line_index),\n                ('journal_id', '=', self.journal_id.id),\n            ],\n            limit=1,\n            order='first_line_index DESC',\n        )\n        return not previous or self.currency_id.compare_amounts(self.balance_start, previous.balance_end_real) == 0\n\n    def _get_invalid_statement_ids(self, all_statements=None):\n        \\\"\\\"\\\" Returns the statements that are invalid for _compute and _search methods.\\\"\\\"\\\"\n\n        self.env['account.bank.statement.line'].flush_model(['statement_id', 'internal_index'])\n        self.env['account.bank.statement'].flush_model(['balance_start', 'balance_end_real', 'first_line_index'])\n\n        self.env.cr.execute(f\\\"\\\"\\\"\n            SELECT st.id\n              FROM account_bank_statement st\n         LEFT JOIN res_company co ON st.company_id = co.id\n         LEFT JOIN account_journal j ON st.journal_id = j.id\n         LEFT JOIN res_currency currency ON COALESCE(j.currency_id, co.currency_id) = currency.id,\n                   LATERAL (\n                       SELECT balance_end_real\n                         FROM account_bank_statement st_lookup\n                        WHERE st_lookup.first_line_index < st.first_line_index\n                          AND st_lookup.journal_id = st.journal_id\n                     ORDER BY st_lookup.first_line_index desc\n                        LIMIT 1\n                   ) prev\n             WHERE ROUND(prev.balance_end_real, currency.decimal_places) != ROUND(st.balance_start, currency.decimal_places)\n               {\\\"\\\" if all_statements else \\\"AND st.id IN %(ids)s\\\"}\n        \\\"\\\"\\\", {\n            'ids': tuple(self.ids)\n        })\n        res = self.env.cr.fetchall()\n        return [r[0] for r in res]\n\n    # -------------------------------------------------------------------------\n    # LOW-LEVEL METHODS\n    # -------------------------------------------------------------------------\n\n    @api.model\n    def default_get(self, fields_list):\n        # EXTENDS base\n        defaults = super().default_get(fields_list)\n\n        if 'line_ids' not in fields_list:\n            return defaults\n\n        active_ids = self._context.get('active_ids', [])\n        context_split_line_id = self._context.get('split_line_id')\n        context_st_line_id = self._context.get('st_line_id')\n        lines = None\n        # creating statements with split button\n        if context_split_line_id:\n            current_st_line = self.env['account.bank.statement.line'].browse(context_split_line_id)\n            line_before = self.env['account.bank.statement.line'].search(\n                domain=[\n                    ('internal_index', '<', current_st_line.internal_index),\n                    ('journal_id', '=', current_st_line.journal_id.id),\n                    ('statement_id', '!=', current_st_line.statement_id.id),\n                    ('statement_id', '!=', False),\n                ],\n                order='internal_index desc',\n                limit=1,\n            )\n            lines = self.env['account.bank.statement.line'].search(\n                domain=[\n                    ('internal_index', '<=', current_st_line.internal_index),\n                    ('internal_index', '>', line_before.internal_index or ''),\n                    ('journal_id', '=', current_st_line.journal_id.id),\n                ],\n                order='internal_index desc',\n            )\n        # single line edit\n        elif context_st_line_id and len(active_ids) <= 1:\n            lines = self.env['account.bank.statement.line'].browse(context_st_line_id)\n        # multi edit\n        elif context_st_line_id and len(active_ids) > 1:\n            lines = self.env['account.bank.statement.line'].browse(active_ids).sorted()\n            if len(lines.journal_id) > 1:\n                raise UserError(_(\\\"A statement should only contain lines from the same journal.\\\"))\n            # Check that the selected lines are contiguous\n            indexes = lines.mapped('internal_index')\n            count_lines_between = self.env['account.bank.statement.line'].search_count([\n                ('internal_index', '>=', min(indexes)),\n                ('internal_index', '<=', max(indexes)),\n                ('journal_id', '=', lines.journal_id.id),\n            ])\n            if len(lines) != count_lines_between:\n                raise UserError(_(\\\"Unable to create a statement due to missing transactions. You may want to reorder the transactions before proceeding.\\\"))\n\n        if lines:\n            defaults['line_ids'] = [Command.set(lines.ids)]\n\n        return defaults\n\n    @contextmanager\n    def _check_attachments(self, container, values_list):\n        attachments_to_fix_list = []\n        for values in values_list:\n            attachment_ids = set()\n            for orm_command in values.get('attachment_ids', []):\n                if orm_command[0] == Command.LINK:\n                    attachment_ids.add(orm_command[1])\n                elif orm_command[0] == Command.SET:\n                    for attachment_id in orm_command[2]:\n                        attachment_ids.add(attachment_id)\n\n            attachments = self.env['ir.attachment'].browse(list(attachment_ids))\n            attachments_to_fix_list.append(attachments)\n\n        yield\n\n        for stmt, attachments in zip(container['records'], attachments_to_fix_list):\n            attachments.write({'res_id': stmt.id, 'res_model': stmt._name})\n\n    @api.model_create_multi\n    def create(self, vals_list):\n        container = {'records': self.env['account.bank.statement']}\n        with self._check_attachments(container, vals_list):\n            container['records'] = stmts = super().create(vals_list)\n        return stmts\n\n\n\n", "CodeBleu_score": 34.280810370813256}, {"code": "def write(self, values)\n\tn                description = _(\\\"The running balance (%s) doesn't match the specified ending balance.\\\", formatLang(self.env, stmt.balance_end, currency_obj=stmt.currency_id))\n            stmt.problem_description = description\n\n    def _search_is_valid(self, operator, value):\n        if operator not in ('=', '!=', '<>'):\n            raise UserError(_('Operation not supported'))\n        invalid_ids = self._get_invalid_statement_ids(all_statements=True)\n        if operator in ('!=', '<>') and value or operator == '=' and not value:\n            return [('id', 'in', invalid_ids)]\n        return [('id', 'not in', invalid_ids)]\n\n    # -------------------------------------------------------------------------\n    # BUSINESS METHODS\n    # -------------------------------------------------------------------------\n    def _get_statement_validity(self):\n        \\\"\\\"\\\" Compares the balance_start to the previous statements balance_end_real \\\"\\\"\\\"\n        self.ensure_one()\n        previous = self.env['account.bank.statement'].search(\n            [\n                ('first_line_index', '<', self.first_line_index),\n                ('journal_id', '=', self.journal_id.id),\n            ],\n            limit=1,\n            order='first_line_index DESC',\n        )\n        return not previous or self.currency_id.compare_amounts(self.balance_start, previous.balance_end_real) == 0\n\n    def _get_invalid_statement_ids(self, all_statements=None):\n        \\\"\\\"\\\" Returns the statements that are invalid for _compute and _search methods.\\\"\\\"\\\"\n\n        self.env['account.bank.statement.line'].flush_model(['statement_id', 'internal_index'])\n        self.env['account.bank.statement'].flush_model(['balance_start', 'balance_end_real', 'first_line_index'])\n\n        self.env.cr.execute(f\\\"\\\"\\\"\n            SELECT st.id\n              FROM account_bank_statement st\n         LEFT JOIN res_company co ON st.company_id = co.id\n         LEFT JOIN account_journal j ON st.journal_id = j.id\n         LEFT JOIN res_currency currency ON COALESCE(j.currency_id, co.currency_id) = currency.id,\n                   LATERAL (\n                       SELECT balance_end_real\n                         FROM account_bank_statement st_lookup\n                        WHERE st_lookup.first_line_index < st.first_line_index\n                          AND st_lookup.journal_id = st.journal_id\n                     ORDER BY st_lookup.first_line_index desc\n                        LIMIT 1\n                   ) prev\n             WHERE ROUND(prev.balance_end_real, currency.decimal_places) != ROUND(st.balance_start, currency.decimal_places)\n               {\\\"\\\" if all_statements else \\\"AND st.id IN %(ids)s\\\"}\n        \\\"\\\"\\\", {\n            'ids': tuple(self.ids)\n        })\n        res = self.env.cr.fetchall()\n        return [r[0] for r in res]\n\n    # -------------------------------------------------------------------------\n    # LOW-LEVEL METHODS\n    # -------------------------------------------------------------------------\n\n    @api.model\n    def default_get(self, fields_list):\n        # EXTENDS base\n        defaults = super().default_get(fields_list)\n\n        if 'line_ids' not in fields_list:\n            return defaults\n\n        active_ids = self._context.get('active_ids', [])\n        context_split_line_id = self._context.get('split_line_id')\n        context_st_line_id = self._context.get('st_line_id')\n        lines = None\n        # creating statements with split button\n        if context_split_line_id:\n            current_st_line = self.env['account.bank.statement.line'].browse(context_split_line_id)\n            line_before = self.env['account.bank.statement.line'].search(\n                domain=[\n                    ('internal_index', '<', current_st_line.internal_index),\n                    ('journal_id', '=', current_st_line.journal_id.id),\n                    ('statement_id', '!=', current_st_line.statement_id.id),\n                    ('statement_id', '!=', False),\n                ],\n                order='internal_index desc',\n                limit=1,\n            )\n            lines = self.env['account.bank.statement.line'].search(\n                domain=[\n                    ('internal_index', '<=', current_st_line.internal_index),\n                    ('internal_index', '>', line_before.internal_index or ''),\n                    ('journal_id', '=', current_st_line.journal_id.id),\n                ],\n                order='internal_index desc',\n            )\n        # single line edit\n        elif context_st_line_id and len(active_ids) <= 1:\n            lines = self.env['account.bank.statement.line'].browse(context_st_line_id)\n        # multi edit\n        elif context_st_line_id and len(active_ids) > 1:\n            lines = self.env['account.bank.statement.line'].browse(active_ids).sorted()\n            if len(lines.journal_id) > 1:\n                raise UserError(_(\\\"A statement should only contain lines from the same journal.\\\"))\n            # Check that the selected lines are contiguous\n            indexes = lines.mapped('internal_index')\n            count_lines_between = self.env['account.bank.statement.line'].search_count([\n                ('internal_index', '>=', min(indexes)),\n                ('internal_index', '<=', max(indexes)),\n                ('journal_id', '=', lines.journal_id.id),\n            ])\n            if len(lines) != count_lines_between:\n                raise UserError(_(\\\"Unable to create a statement due to missing transactions. You may want to reorder the transactions before proceeding.\\\"))\n\n        if lines:\n            defaults['line_ids'] = [Command.set(lines.ids)]\n\n        return defaults\n\n    @contextmanager\n    def _check_attachments(self, container, values_list):\n        attachments_to_fix_list = []\n        for values in values_list:\n            attachment_ids = set()\n            for orm_command in values.get('attachment_ids', []):\n                if orm_command[0] == Command.LINK:\n                    attachment_ids.add(orm_command[1])\n                elif orm_command[0] == Command.SET:\n                    for attachment_id in orm_command[2]:\n                        attachment_ids.add(attachment_id)\n\n            attachments = self.env['ir.attachment'].browse(list(attachment_ids))\n            attachments_to_fix_list.append(attachments)\n\n        yield\n\n        for stmt, attachments in zip(container['records'], attachments_to_fix_list):\n            attachments.write({'res_id': stmt.id, 'res_model': stmt._name})\n\n    @api.model_create_multi\n    def create(self, vals_list):\n        container = {'records': self.env['account.bank.statement']}\n        with self._check_attachments(container, vals_list):\n            container['records'] = stmts = super().create(vals_list)\n        return stmts\n\n\n\n", "CodeBleu_score": 34.280810370813256}, {"code": "def write(self, values)\n\tn                description = _(\\\"The running balance (%s) doesn't match the specified ending balance.\\\", formatLang(self.env, stmt.balance_end, currency_obj=stmt.currency_id))\n            stmt.problem_description = description\n\n    def _search_is_valid(self, operator, value):\n        if operator not in ('=', '!=', '<>'):\n            raise UserError(_('Operation not supported'))\n        invalid_ids = self._get_invalid_statement_ids(all_statements=True)\n        if operator in ('!=', '<>') and value or operator == '=' and not value:\n            return [('id', 'in', invalid_ids)]\n        return [('id', 'not in', invalid_ids)]\n\n    # -------------------------------------------------------------------------\n    # BUSINESS METHODS\n    # -------------------------------------------------------------------------\n    def _get_statement_validity(self):\n        \\\"\\\"\\\" Compares the balance_start to the previous statements balance_end_real \\\"\\\"\\\"\n        self.ensure_one()\n        previous = self.env['account.bank.statement'].search(\n            [\n                ('first_line_index', '<', self.first_line_index),\n                ('journal_id', '=', self.journal_id.id),\n            ],\n            limit=1,\n            order='first_line_index DESC',\n        )\n        return not previous or self.currency_id.compare_amounts(self.balance_start, previous.balance_end_real) == 0\n\n    def _get_invalid_statement_ids(self, all_statements=None):\n        \\\"\\\"\\\" Returns the statements that are invalid for _compute and _search methods.\\\"\\\"\\\"\n\n        self.env['account.bank.statement.line'].flush_model(['statement_id', 'internal_index'])\n        self.env['account.bank.statement'].flush_model(['balance_start', 'balance_end_real', 'first_line_index'])\n\n        self.env.cr.execute(f\\\"\\\"\\\"\n            SELECT st.id\n              FROM account_bank_statement st\n         LEFT JOIN res_company co ON st.company_id = co.id\n         LEFT JOIN account_journal j ON st.journal_id = j.id\n         LEFT JOIN res_currency currency ON COALESCE(j.currency_id, co.currency_id) = currency.id,\n                   LATERAL (\n                       SELECT balance_end_real\n                         FROM account_bank_statement st_lookup\n                        WHERE st_lookup.first_line_index < st.first_line_index\n                          AND st_lookup.journal_id = st.journal_id\n                     ORDER BY st_lookup.first_line_index desc\n                        LIMIT 1\n                   ) prev\n             WHERE ROUND(prev.balance_end_real, currency.decimal_places) != ROUND(st.balance_start, currency.decimal_places)\n               {\\\"\\\" if all_statements else \\\"AND st.id IN %(ids)s\\\"}\n        \\\"\\\"\\\", {\n            'ids': tuple(self.ids)\n        })\n        res = self.env.cr.fetchall()\n        return [r[0] for r in res]\n\n    # -------------------------------------------------------------------------\n    # LOW-LEVEL METHODS\n    # -------------------------------------------------------------------------\n\n    @api.model\n    def default_get(self, fields_list):\n        # EXTENDS base\n        defaults = super().default_get(fields_list)\n\n        if 'line_ids' not in fields_list:\n            return defaults\n\n        active_ids = self._context.get('active_ids', [])\n        context_split_line_id = self._context.get('split_line_id')\n        context_st_line_id = self._context.get('st_line_id')\n        lines = None\n        # creating statements with split button\n        if context_split_line_id:\n            current_st_line = self.env['account.bank.statement.line'].browse(context_split_line_id)\n            line_before = self.env['account.bank.statement.line'].search(\n                domain=[\n                    ('internal_index', '<', current_st_line.internal_index),\n                    ('journal_id', '=', current_st_line.journal_id.id),\n                    ('statement_id', '!=', current_st_line.statement_id.id),\n                    ('statement_id', '!=', False),\n                ],\n                order='internal_index desc',\n                limit=1,\n            )\n            lines = self.env['account.bank.statement.line'].search(\n                domain=[\n                    ('internal_index', '<=', current_st_line.internal_index),\n                    ('internal_index', '>', line_before.internal_index or ''),\n                    ('journal_id', '=', current_st_line.journal_id.id),\n                ],\n                order='internal_index desc',\n            )\n        # single line edit\n        elif context_st_line_id and len(active_ids) <= 1:\n            lines = self.env['account.bank.statement.line'].browse(context_st_line_id)\n        # multi edit\n        elif context_st_line_id and len(active_ids) > 1:\n            lines = self.env['account.bank.statement.line'].browse(active_ids).sorted()\n            if len(lines.journal_id) > 1:\n                raise UserError(_(\\\"A statement should only contain lines from the same journal.\\\"))\n            # Check that the selected lines are contiguous\n            indexes = lines.mapped('internal_index')\n            count_lines_between = self.env['account.bank.statement.line'].search_count([\n                ('internal_index', '>=', min(indexes)),\n                ('internal_index', '<=', max(indexes)),\n                ('journal_id', '=', lines.journal_id.id),\n            ])\n            if len(lines) != count_lines_between:\n                raise UserError(_(\\\"Unable to create a statement due to missing transactions. You may want to reorder the transactions before proceeding.\\\"))\n\n        if lines:\n            defaults['line_ids'] = [Command.set(lines.ids)]\n\n        return defaults\n\n    @contextmanager\n    def _check_attachments(self, container, values_list):\n        attachments_to_fix_list = []\n        for values in values_list:\n            attachment_ids = set()\n            for orm_command in values.get('attachment_ids', []):\n                if orm_command[0] == Command.LINK:\n                    attachment_ids.add(orm_command[1])\n                elif orm_command[0] == Command.SET:\n                    for attachment_id in orm_command[2]:\n                        attachment_ids.add(attachment_id)\n\n            attachments = self.env['ir.attachment'].browse(list(attachment_ids))\n            attachments_to_fix_list.append(attachments)\n\n        yield\n\n        for stmt, attachments in zip(container['records'], attachments_to_fix_list):\n            attachments.write({'res_id': stmt.id, 'res_model': stmt._name})\n\n    @api.model_create_multi\n    def create(self, vals_list):\n        container = {'records': self.env['account.bank.statement']}\n        with self._check_attachments(container, vals_list):\n            container['records'] = stmts = super().create(vals_list)\n        return stmts\n\n\n\n", "CodeBleu_score": 34.280810370813256}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\tzero(st_line.amount_residual)\n            elif st_line.currency_id.is_zero(st_line.amount):\n                st_line.is_reconciled = True\n            else:\n                # The journal entry seems reconciled.\n                st_line.is_reconciled = True\n\n\n    # -------------------------------------------------------------------------\n    # CONSTRAINT METHODS\n    # -------------------------------------------------------------------------\n\n    @api.constrains('amount', 'amount_currency', 'currency_id', 'foreign_currency_id', 'journal_id')\n    def _check_amounts_currencies(self):\n        \\\"\\\"\\\" Ensure the consistency the specified amounts and the currencies. \\\"\\\"\\\"\n\n        for st_line in self:\n            if st_line.foreign_currency_id == st_line.currency_id:\n                raise ValidationError(_(\\\"The foreign currency must be different than the journal one: %s\\\",\n                                        st_line.currency_id.name))\n            if not st_line.foreign_currency_id and st_line.amount_currency:\n                raise ValidationError(_(\\\"You can't provide an amount in foreign currency without \\\"\n                                        \\\"specifying a foreign currency.\\\"))\n            if not st_line.amount_currency and st_line.foreign_currency_id:\n                raise ValidationError(_(\\\"You can't provide a foreign currency without specifying an amount in \\\"\n                                        \\\"'Amount in Currency' field.\\\"))\n\n    # -------------------------------------------------------------------------\n    # LOW-LEVEL METHODS\n    # -------------------------------------------------------------------------\n\n    def new(self, values=None, origin=None, ref=None):\n        st_line = super().new(values, origin, ref)\n        if not st_line.journal_id:  # might not be computed because declared by inheritance\n            st_line.move_id._compute_journal_id()\n        return st_line\n\n    @api.model_create_multi\n    def create(self, vals_list):\n        # OVERRIDE\n        counterpart_account_ids = []\n\n        for vals in vals_list:\n            if 'statement_id' in vals and 'journal_id' not in vals:\n                statement = self.env['account.bank.statement'].browse(vals['statement_id'])\n                # Ensure the journal is the same as the statement one.\n                # journal_id is a required field in the view, so it should be always available if the user\n                # is creating the record, however, if a sync/import modules tries to add a line to an existing\n                # statement they can omit the journal field because it can be obtained from the statement\n                if statement.journal_id:\n                    vals['journal_id'] = statement.journal_id.id\n\n            # Avoid having the same foreign_currency_id as currency_id.\n            if vals.get('journal_id') and vals.get('foreign_currency_id'):\n                journal = self.env['account.journal'].browse(vals['journal_id'])\n                journal_currency = journal.currency_id or journal.company_id.currency_id\n                if vals['foreign_currency_id'] == journal_currency.id:\n                    vals['foreign_currency_id'] = None\n                    vals['amount_currency'] = 0.0\n\n            # Force the move_type to avoid inconsistency with residual 'default_move_type' inside the context.\n            vals['move_type'] = 'entry'\n\n            # Hack to force different account instead of the suspense account.\n            counterpart_account_ids.append(vals.pop('counterpart_account_id', None))\n\n            #Set the amount to 0 if it's not specified.\n            if 'amount' not in vals:\n                vals['amount'] = 0\n\n        st_lines = super().create(vals_list)\n\n        for i, st_line in enumerate(st_lines):\n            counterpart_account_id = counterpart_account_ids[i]\n\n            to_write = {'statement_line_id': st_line.id, 'narration': st_line.narration}\n            if 'line_ids' not in vals_list[i]:\n                to_write['line_ids'] = [(0, 0, line_vals) for line_vals in st_line._prepare_move_line_default_vals(\n                    counterpart_account_id=counterpart_account_id)]\n\n            st_line.move_id.write(to_write)\n\n            # Otherwise field narration will be recomputed silently (at next flush) when writing on partner_id\n            self.env.remove_to_compute(st_line.move_id._fields['narration'], st_line.move_id)\n\n        # No need for the user to manage their status (from 'Draft' to 'Posted')\n        st_lines.move_id.action_post()\n        return st_lines\n\n    def write(self, vals):\n        # OVERRIDE\n\n        res = super().write(vals)\n        self._synchronize_to_moves(set(vals.keys()))\n        return res\n\n    def unlink(self):\n        # OVERRIDE to unlink the inherited account.move (move_id field) as well.\n        moves = self.with_context(force_delete=True).mapped('move_id')\n        res = super().unlink()\n        moves.unlink()\n        return res\n\n    @api.model\n    def read_group(self, domain, fields, groupby, offset=0, limit=None, orderby=False, lazy=True):\n        # Add latest running_balance in the read_group\n        result = super(AccountBankStatementLine, self).read_group(\n            domain, fields, groupby, offset=offset,\n            limit=limit, orderby=orderby, lazy=lazy)\n        show_running_balance = False\n        # We loop over the content of groupby because the groupby date is in the form of \\\"date:granularity\\\"\n        for el in groupby:\n            if (el == 'statement_id' or el == 'journal_id' or el.startswith('date')) and 'running_balance' in fields:\n                show_running_balance = True\n                break\n        if show_running_balance:\n            for group_line in result:\n                group_line['running_balance'] = self.search(group_line.get('__domain'), limit=1).running_balance or 0.0\n        return result\n\n    # -------------------------------------------------------------------------\n    # ACTION METHODS\n    # -------------------------------------------------------------------------\n\n    def action_undo_reconciliation(self):\n        \\\"\\\"\\\" Undo the reconciliation made on the statement line and reset their journal items\n        to their original states.\n        \\\"\\\"\\\"\n        self.line_ids.remove_move_reconcile()\n        self.payment_ids.unlink()\n\n        for st_line in self:\n            st_line.with_context(force_delete=True).write({\n                'to_check': False,\n                'line_ids': [Command.clear()] + [\n                    Command.create(line_vals) for line_vals in st_line._prepare_move_line_default_vals()],\n            })\n\n    # -------------------------------------------------------------------------\n    # HELPERS\n    # -------------------------------------------------------------------------\n\n\n\n", "CodeBleu_score": 24.433763849051683}, {"code": "def _find_or_create_bank_account(self)\n\tzero(st_line.amount_residual)\n            elif st_line.currency_id.is_zero(st_line.amount):\n                st_line.is_reconciled = True\n            else:\n                # The journal entry seems reconciled.\n                st_line.is_reconciled = True\n\n\n    # -------------------------------------------------------------------------\n    # CONSTRAINT METHODS\n    # -------------------------------------------------------------------------\n\n    @api.constrains('amount', 'amount_currency', 'currency_id', 'foreign_currency_id', 'journal_id')\n    def _check_amounts_currencies(self):\n        \\\"\\\"\\\" Ensure the consistency the specified amounts and the currencies. \\\"\\\"\\\"\n\n        for st_line in self:\n            if st_line.foreign_currency_id == st_line.currency_id:\n                raise ValidationError(_(\\\"The foreign currency must be different than the journal one: %s\\\",\n                                        st_line.currency_id.name))\n            if not st_line.foreign_currency_id and st_line.amount_currency:\n                raise ValidationError(_(\\\"You can't provide an amount in foreign currency without \\\"\n                                        \\\"specifying a foreign currency.\\\"))\n            if not st_line.amount_currency and st_line.foreign_currency_id:\n                raise ValidationError(_(\\\"You can't provide a foreign currency without specifying an amount in \\\"\n                                        \\\"'Amount in Currency' field.\\\"))\n\n    # -------------------------------------------------------------------------\n    # LOW-LEVEL METHODS\n    # -------------------------------------------------------------------------\n\n    def new(self, values=None, origin=None, ref=None):\n        st_line = super().new(values, origin, ref)\n        if not st_line.journal_id:  # might not be computed because declared by inheritance\n            st_line.move_id._compute_journal_id()\n        return st_line\n\n    @api.model_create_multi\n    def create(self, vals_list):\n        # OVERRIDE\n        counterpart_account_ids = []\n\n        for vals in vals_list:\n            if 'statement_id' in vals and 'journal_id' not in vals:\n                statement = self.env['account.bank.statement'].browse(vals['statement_id'])\n                # Ensure the journal is the same as the statement one.\n                # journal_id is a required field in the view, so it should be always available if the user\n                # is creating the record, however, if a sync/import modules tries to add a line to an existing\n                # statement they can omit the journal field because it can be obtained from the statement\n                if statement.journal_id:\n                    vals['journal_id'] = statement.journal_id.id\n\n            # Avoid having the same foreign_currency_id as currency_id.\n            if vals.get('journal_id') and vals.get('foreign_currency_id'):\n                journal = self.env['account.journal'].browse(vals['journal_id'])\n                journal_currency = journal.currency_id or journal.company_id.currency_id\n                if vals['foreign_currency_id'] == journal_currency.id:\n                    vals['foreign_currency_id'] = None\n                    vals['amount_currency'] = 0.0\n\n            # Force the move_type to avoid inconsistency with residual 'default_move_type' inside the context.\n            vals['move_type'] = 'entry'\n\n            # Hack to force different account instead of the suspense account.\n            counterpart_account_ids.append(vals.pop('counterpart_account_id', None))\n\n            #Set the amount to 0 if it's not specified.\n            if 'amount' not in vals:\n                vals['amount'] = 0\n\n        st_lines = super().create(vals_list)\n\n        for i, st_line in enumerate(st_lines):\n            counterpart_account_id = counterpart_account_ids[i]\n\n            to_write = {'statement_line_id': st_line.id, 'narration': st_line.narration}\n            if 'line_ids' not in vals_list[i]:\n                to_write['line_ids'] = [(0, 0, line_vals) for line_vals in st_line._prepare_move_line_default_vals(\n                    counterpart_account_id=counterpart_account_id)]\n\n            st_line.move_id.write(to_write)\n\n            # Otherwise field narration will be recomputed silently (at next flush) when writing on partner_id\n            self.env.remove_to_compute(st_line.move_id._fields['narration'], st_line.move_id)\n\n        # No need for the user to manage their status (from 'Draft' to 'Posted')\n        st_lines.move_id.action_post()\n        return st_lines\n\n    def write(self, vals):\n        # OVERRIDE\n\n        res = super().write(vals)\n        self._synchronize_to_moves(set(vals.keys()))\n        return res\n\n    def unlink(self):\n        # OVERRIDE to unlink the inherited account.move (move_id field) as well.\n        moves = self.with_context(force_delete=True).mapped('move_id')\n        res = super().unlink()\n        moves.unlink()\n        return res\n\n    @api.model\n    def read_group(self, domain, fields, groupby, offset=0, limit=None, orderby=False, lazy=True):\n        # Add latest running_balance in the read_group\n        result = super(AccountBankStatementLine, self).read_group(\n            domain, fields, groupby, offset=offset,\n            limit=limit, orderby=orderby, lazy=lazy)\n        show_running_balance = False\n        # We loop over the content of groupby because the groupby date is in the form of \\\"date:granularity\\\"\n        for el in groupby:\n            if (el == 'statement_id' or el == 'journal_id' or el.startswith('date')) and 'running_balance' in fields:\n                show_running_balance = True\n                break\n        if show_running_balance:\n            for group_line in result:\n                group_line['running_balance'] = self.search(group_line.get('__domain'), limit=1).running_balance or 0.0\n        return result\n\n    # -------------------------------------------------------------------------\n    # ACTION METHODS\n    # -------------------------------------------------------------------------\n\n    def action_undo_reconciliation(self):\n        \\\"\\\"\\\" Undo the reconciliation made on the statement line and reset their journal items\n        to their original states.\n        \\\"\\\"\\\"\n        self.line_ids.remove_move_reconcile()\n        self.payment_ids.unlink()\n\n        for st_line in self:\n            st_line.with_context(force_delete=True).write({\n                'to_check': False,\n                'line_ids': [Command.clear()] + [\n                    Command.create(line_vals) for line_vals in st_line._prepare_move_line_default_vals()],\n            })\n\n    # -------------------------------------------------------------------------\n    # HELPERS\n    # -------------------------------------------------------------------------\n\n\n\n", "CodeBleu_score": 24.433763849051683}, {"code": "def _find_or_create_bank_account(self)\n\tzero(st_line.amount_residual)\n            elif st_line.currency_id.is_zero(st_line.amount):\n                st_line.is_reconciled = True\n            else:\n                # The journal entry seems reconciled.\n                st_line.is_reconciled = True\n\n\n    # -------------------------------------------------------------------------\n    # CONSTRAINT METHODS\n    # -------------------------------------------------------------------------\n\n    @api.constrains('amount', 'amount_currency', 'currency_id', 'foreign_currency_id', 'journal_id')\n    def _check_amounts_currencies(self):\n        \\\"\\\"\\\" Ensure the consistency the specified amounts and the currencies. \\\"\\\"\\\"\n\n        for st_line in self:\n            if st_line.foreign_currency_id == st_line.currency_id:\n                raise ValidationError(_(\\\"The foreign currency must be different than the journal one: %s\\\",\n                                        st_line.currency_id.name))\n            if not st_line.foreign_currency_id and st_line.amount_currency:\n                raise ValidationError(_(\\\"You can't provide an amount in foreign currency without \\\"\n                                        \\\"specifying a foreign currency.\\\"))\n            if not st_line.amount_currency and st_line.foreign_currency_id:\n                raise ValidationError(_(\\\"You can't provide a foreign currency without specifying an amount in \\\"\n                                        \\\"'Amount in Currency' field.\\\"))\n\n    # -------------------------------------------------------------------------\n    # LOW-LEVEL METHODS\n    # -------------------------------------------------------------------------\n\n    def new(self, values=None, origin=None, ref=None):\n        st_line = super().new(values, origin, ref)\n        if not st_line.journal_id:  # might not be computed because declared by inheritance\n            st_line.move_id._compute_journal_id()\n        return st_line\n\n    @api.model_create_multi\n    def create(self, vals_list):\n        # OVERRIDE\n        counterpart_account_ids = []\n\n        for vals in vals_list:\n            if 'statement_id' in vals and 'journal_id' not in vals:\n                statement = self.env['account.bank.statement'].browse(vals['statement_id'])\n                # Ensure the journal is the same as the statement one.\n                # journal_id is a required field in the view, so it should be always available if the user\n                # is creating the record, however, if a sync/import modules tries to add a line to an existing\n                # statement they can omit the journal field because it can be obtained from the statement\n                if statement.journal_id:\n                    vals['journal_id'] = statement.journal_id.id\n\n            # Avoid having the same foreign_currency_id as currency_id.\n            if vals.get('journal_id') and vals.get('foreign_currency_id'):\n                journal = self.env['account.journal'].browse(vals['journal_id'])\n                journal_currency = journal.currency_id or journal.company_id.currency_id\n                if vals['foreign_currency_id'] == journal_currency.id:\n                    vals['foreign_currency_id'] = None\n                    vals['amount_currency'] = 0.0\n\n            # Force the move_type to avoid inconsistency with residual 'default_move_type' inside the context.\n            vals['move_type'] = 'entry'\n\n            # Hack to force different account instead of the suspense account.\n            counterpart_account_ids.append(vals.pop('counterpart_account_id', None))\n\n            #Set the amount to 0 if it's not specified.\n            if 'amount' not in vals:\n                vals['amount'] = 0\n\n        st_lines = super().create(vals_list)\n\n        for i, st_line in enumerate(st_lines):\n            counterpart_account_id = counterpart_account_ids[i]\n\n            to_write = {'statement_line_id': st_line.id, 'narration': st_line.narration}\n            if 'line_ids' not in vals_list[i]:\n                to_write['line_ids'] = [(0, 0, line_vals) for line_vals in st_line._prepare_move_line_default_vals(\n                    counterpart_account_id=counterpart_account_id)]\n\n            st_line.move_id.write(to_write)\n\n            # Otherwise field narration will be recomputed silently (at next flush) when writing on partner_id\n            self.env.remove_to_compute(st_line.move_id._fields['narration'], st_line.move_id)\n\n        # No need for the user to manage their status (from 'Draft' to 'Posted')\n        st_lines.move_id.action_post()\n        return st_lines\n\n    def write(self, vals):\n        # OVERRIDE\n\n        res = super().write(vals)\n        self._synchronize_to_moves(set(vals.keys()))\n        return res\n\n    def unlink(self):\n        # OVERRIDE to unlink the inherited account.move (move_id field) as well.\n        moves = self.with_context(force_delete=True).mapped('move_id')\n        res = super().unlink()\n        moves.unlink()\n        return res\n\n    @api.model\n    def read_group(self, domain, fields, groupby, offset=0, limit=None, orderby=False, lazy=True):\n        # Add latest running_balance in the read_group\n        result = super(AccountBankStatementLine, self).read_group(\n            domain, fields, groupby, offset=offset,\n            limit=limit, orderby=orderby, lazy=lazy)\n        show_running_balance = False\n        # We loop over the content of groupby because the groupby date is in the form of \\\"date:granularity\\\"\n        for el in groupby:\n            if (el == 'statement_id' or el == 'journal_id' or el.startswith('date')) and 'running_balance' in fields:\n                show_running_balance = True\n                break\n        if show_running_balance:\n            for group_line in result:\n                group_line['running_balance'] = self.search(group_line.get('__domain'), limit=1).running_balance or 0.0\n        return result\n\n    # -------------------------------------------------------------------------\n    # ACTION METHODS\n    # -------------------------------------------------------------------------\n\n    def action_undo_reconciliation(self):\n        \\\"\\\"\\\" Undo the reconciliation made on the statement line and reset their journal items\n        to their original states.\n        \\\"\\\"\\\"\n        self.line_ids.remove_move_reconcile()\n        self.payment_ids.unlink()\n\n        for st_line in self:\n            st_line.with_context(force_delete=True).write({\n                'to_check': False,\n                'line_ids': [Command.clear()] + [\n                    Command.create(line_vals) for line_vals in st_line._prepare_move_line_default_vals()],\n            })\n\n    # -------------------------------------------------------------------------\n    # HELPERS\n    # -------------------------------------------------------------------------\n\n\n\n", "CodeBleu_score": 24.433763849051683}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t# OVERRIDE\n\n        res = super().write(vals)\n        self._synchronize_to_moves(set(vals.keys()))\n        return res\n\n    def unlink(self):\n        # OVERRIDE to unlink the inherited account.move (move_id field) as well.\n        moves = self.with_context(force_delete=True).mapped('move_id')\n        res = super().unlink()\n        moves.unlink()\n        return res\n\n    @api.model\n    def read_group(self, domain, fields, groupby, offset=0, limit=None, orderby=False, lazy=True):\n        # Add latest running_balance in the read_group\n        result = super(AccountBankStatementLine, self).read_group(\n            domain, fields, groupby, offset=offset,\n            limit=limit, orderby=orderby, lazy=lazy)\n        show_running_balance = False\n        # We loop over the content of groupby because the groupby date is in the form of \\\"date:granularity\\\"\n        for el in groupby:\n            if (el == 'statement_id' or el == 'journal_id' or el.startswith('date')) and 'running_balance' in fields:\n                show_running_balance = True\n                break\n        if show_running_balance:\n            for group_line in result:\n                group_line['running_balance'] = self.search(group_line.get('__domain'), limit=1).running_balance or 0.0\n        return result\n\n    # -------------------------------------------------------------------------\n    # ACTION METHODS\n    # -------------------------------------------------------------------------\n\n    def action_undo_reconciliation(self):\n        \\\"\\\"\\\" Undo the reconciliation made on the statement line and reset their journal items\n        to their original states.\n        \\\"\\\"\\\"\n        self.line_ids.remove_move_reconcile()\n        self.payment_ids.unlink()\n\n        for st_line in self:\n            st_line.with_context(force_delete=True).write({\n                'to_check': False,\n                'line_ids': [Command.clear()] + [\n                    Command.create(line_vals) for line_vals in st_line._prepare_move_line_default_vals()],\n            })\n\n    # -------------------------------------------------------------------------\n    # HELPERS\n    # -------------------------------------------------------------------------\n\n    def _find_or_create_bank_account(self):\n        self.ensure_one()\n        if str2bool(self.env['ir.config_parameter'].sudo().get_param(\\\"account.skip_create_bank_account_on_reconcile\\\")):\n            return self.env['res.partner.bank']\n\n        # There is a sql constraint on res.partner.bank ensuring an unique pair <partner, account number>.\n        # Since it's not dependent of the company, we need to search on others company too to avoid the creation\n        # of an extra res.partner.bank raising an error coming from this constraint.\n        # However, at the end, we need to filter out the results to not trigger the check_company when trying to\n        # assign a res.partner.bank owned by another company.\n        bank_account = self.env['res.partner.bank'].sudo().with_context(active_test=False).search([\n            ('acc_number', '=', self.account_number),\n            ('partner_id', '=', self.partner_id.id),\n        ])\n        if not bank_account:\n            bank_account = self.env['res.partner.bank'].create({\n                'acc_number': self.account_number,\n                'partner_id': self.partner_id.id,\n                'journal_id': None,\n            })\n        return bank_account.filtered(lambda x: x.company_id in (False, self.company_id))\n\n    def _get_default_amls_matching_domain(self):\n        self.ensure_one()\n        all_reconcilable_account_ids = self.env['account.account'].search([\n            (\\\"company_id\\\", \\\"child_of\\\", self.company_id.root_id.id),\n            ('reconcile', '=', True),\n        ]).ids\n        return [\n            # Base domain.\n            ('display_type', 'not in', ('line_section', 'line_note')),\n            ('parent_state', '=', 'posted'),\n            ('company_id', 'child_of', self.company_id.root_id.id),\n            # Reconciliation domain.\n            ('reconciled', '=', False),\n            # Domain to use the account_move_line__unreconciled_index\n            ('account_id', 'in', all_reconcilable_account_ids),\n            # Special domain for payments.\n            '|',\n            ('account_id.account_type', 'not in', ('asset_receivable', 'liability_payable')),\n            ('payment_id', '=', False),\n            # Special domain for statement lines.\n            ('statement_line_id', '!=', self.id),\n        ]\n\n    @api.model\n    def _get_default_journal(self):\n        journal_type = self.env.context.get('journal_type', 'bank')\n        return self.env['account.journal'].search([\n                *self.env['account.journal']._check_company_domain(self.env.company),\n                ('type', '=', journal_type),\n            ], limit=1)\n\n    @api.model\n    def _get_default_statement(self, journal_id=None, date=None):\n        statement = self.search(\n            domain=[\n                ('journal_id', '=', journal_id or self._get_default_journal().id),\n                ('date', '<=', date or fields.Date.today()),\n            ],\n            limit=1\n        ).statement_id\n        if not statement.is_complete:\n            return statement\n\n    def _get_accounting_amounts_and_currencies(self):\n        \\\"\\\"\\\" Retrieve the transaction amount, journal amount and the company amount with their corresponding currencies\n        from the journal entry linked to the statement line.\n        All returned amounts will be positive for an inbound transaction, negative for an outbound one.\n\n        :return: (\n            transaction_amount, transaction_currency,\n            journal_amount, journal_currency,\n            company_amount, company_currency,\n        )\n        \\\"\\\"\\\"\n        self.ensure_one()\n        liquidity_line, suspense_line, other_lines = self._seek_for_lines()\n        if suspense_line and not other_lines:\n            transaction_amount = -suspense_line.amount_currency\n            transaction_currency = suspense_line.currency_id\n        else:\n            # In case of to_check or partial reconciliation, we can't trust the suspense line.\n            transaction_amount = self.amount_currency if self.foreign_currency_id else self.amount\n            transaction_currency = self.foreign_currency_id or liquidity_line.currency_id\n        return (\n            transaction_amount,\n            transaction_currency,\n            sum(liquidity_line.mapped('amount_currency')),\n            liquidity_line.currency_id,\n            sum(liquidity_line.mapped('balance')),\n            liquidity_line.company_currency_id,\n        )\n\n\n\n", "CodeBleu_score": 22.306679279756}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t# OVERRIDE\n\n        res = super().write(vals)\n        self._synchronize_to_moves(set(vals.keys()))\n        return res\n\n    def unlink(self):\n        # OVERRIDE to unlink the inherited account.move (move_id field) as well.\n        moves = self.with_context(force_delete=True).mapped('move_id')\n        res = super().unlink()\n        moves.unlink()\n        return res\n\n    @api.model\n    def read_group(self, domain, fields, groupby, offset=0, limit=None, orderby=False, lazy=True):\n        # Add latest running_balance in the read_group\n        result = super(AccountBankStatementLine, self).read_group(\n            domain, fields, groupby, offset=offset,\n            limit=limit, orderby=orderby, lazy=lazy)\n        show_running_balance = False\n        # We loop over the content of groupby because the groupby date is in the form of \\\"date:granularity\\\"\n        for el in groupby:\n            if (el == 'statement_id' or el == 'journal_id' or el.startswith('date')) and 'running_balance' in fields:\n                show_running_balance = True\n                break\n        if show_running_balance:\n            for group_line in result:\n                group_line['running_balance'] = self.search(group_line.get('__domain'), limit=1).running_balance or 0.0\n        return result\n\n    # -------------------------------------------------------------------------\n    # ACTION METHODS\n    # -------------------------------------------------------------------------\n\n    def action_undo_reconciliation(self):\n        \\\"\\\"\\\" Undo the reconciliation made on the statement line and reset their journal items\n        to their original states.\n        \\\"\\\"\\\"\n        self.line_ids.remove_move_reconcile()\n        self.payment_ids.unlink()\n\n        for st_line in self:\n            st_line.with_context(force_delete=True).write({\n                'to_check': False,\n                'line_ids': [Command.clear()] + [\n                    Command.create(line_vals) for line_vals in st_line._prepare_move_line_default_vals()],\n            })\n\n    # -------------------------------------------------------------------------\n    # HELPERS\n    # -------------------------------------------------------------------------\n\n    def _find_or_create_bank_account(self):\n        self.ensure_one()\n        if str2bool(self.env['ir.config_parameter'].sudo().get_param(\\\"account.skip_create_bank_account_on_reconcile\\\")):\n            return self.env['res.partner.bank']\n\n        # There is a sql constraint on res.partner.bank ensuring an unique pair <partner, account number>.\n        # Since it's not dependent of the company, we need to search on others company too to avoid the creation\n        # of an extra res.partner.bank raising an error coming from this constraint.\n        # However, at the end, we need to filter out the results to not trigger the check_company when trying to\n        # assign a res.partner.bank owned by another company.\n        bank_account = self.env['res.partner.bank'].sudo().with_context(active_test=False).search([\n            ('acc_number', '=', self.account_number),\n            ('partner_id', '=', self.partner_id.id),\n        ])\n        if not bank_account:\n            bank_account = self.env['res.partner.bank'].create({\n                'acc_number': self.account_number,\n                'partner_id': self.partner_id.id,\n                'journal_id': None,\n            })\n        return bank_account.filtered(lambda x: x.company_id in (False, self.company_id))\n\n    def _get_default_amls_matching_domain(self):\n        self.ensure_one()\n        all_reconcilable_account_ids = self.env['account.account'].search([\n            (\\\"company_id\\\", \\\"child_of\\\", self.company_id.root_id.id),\n            ('reconcile', '=', True),\n        ]).ids\n        return [\n            # Base domain.\n            ('display_type', 'not in', ('line_section', 'line_note')),\n            ('parent_state', '=', 'posted'),\n            ('company_id', 'child_of', self.company_id.root_id.id),\n            # Reconciliation domain.\n            ('reconciled', '=', False),\n            # Domain to use the account_move_line__unreconciled_index\n            ('account_id', 'in', all_reconcilable_account_ids),\n            # Special domain for payments.\n            '|',\n            ('account_id.account_type', 'not in', ('asset_receivable', 'liability_payable')),\n            ('payment_id', '=', False),\n            # Special domain for statement lines.\n            ('statement_line_id', '!=', self.id),\n        ]\n\n    @api.model\n    def _get_default_journal(self):\n        journal_type = self.env.context.get('journal_type', 'bank')\n        return self.env['account.journal'].search([\n                *self.env['account.journal']._check_company_domain(self.env.company),\n                ('type', '=', journal_type),\n            ], limit=1)\n\n    @api.model\n    def _get_default_statement(self, journal_id=None, date=None):\n        statement = self.search(\n            domain=[\n                ('journal_id', '=', journal_id or self._get_default_journal().id),\n                ('date', '<=', date or fields.Date.today()),\n            ],\n            limit=1\n        ).statement_id\n        if not statement.is_complete:\n            return statement\n\n    def _get_accounting_amounts_and_currencies(self):\n        \\\"\\\"\\\" Retrieve the transaction amount, journal amount and the company amount with their corresponding currencies\n        from the journal entry linked to the statement line.\n        All returned amounts will be positive for an inbound transaction, negative for an outbound one.\n\n        :return: (\n            transaction_amount, transaction_currency,\n            journal_amount, journal_currency,\n            company_amount, company_currency,\n        )\n        \\\"\\\"\\\"\n        self.ensure_one()\n        liquidity_line, suspense_line, other_lines = self._seek_for_lines()\n        if suspense_line and not other_lines:\n            transaction_amount = -suspense_line.amount_currency\n            transaction_currency = suspense_line.currency_id\n        else:\n            # In case of to_check or partial reconciliation, we can't trust the suspense line.\n            transaction_amount = self.amount_currency if self.foreign_currency_id else self.amount\n            transaction_currency = self.foreign_currency_id or liquidity_line.currency_id\n        return (\n            transaction_amount,\n            transaction_currency,\n            sum(liquidity_line.mapped('amount_currency')),\n            liquidity_line.currency_id,\n            sum(liquidity_line.mapped('balance')),\n            liquidity_line.company_currency_id,\n        )\n\n\n\n", "CodeBleu_score": 22.306679279756}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t# OVERRIDE\n\n        res = super().write(vals)\n        self._synchronize_to_moves(set(vals.keys()))\n        return res\n\n    def unlink(self):\n        # OVERRIDE to unlink the inherited account.move (move_id field) as well.\n        moves = self.with_context(force_delete=True).mapped('move_id')\n        res = super().unlink()\n        moves.unlink()\n        return res\n\n    @api.model\n    def read_group(self, domain, fields, groupby, offset=0, limit=None, orderby=False, lazy=True):\n        # Add latest running_balance in the read_group\n        result = super(AccountBankStatementLine, self).read_group(\n            domain, fields, groupby, offset=offset,\n            limit=limit, orderby=orderby, lazy=lazy)\n        show_running_balance = False\n        # We loop over the content of groupby because the groupby date is in the form of \\\"date:granularity\\\"\n        for el in groupby:\n            if (el == 'statement_id' or el == 'journal_id' or el.startswith('date')) and 'running_balance' in fields:\n                show_running_balance = True\n                break\n        if show_running_balance:\n            for group_line in result:\n                group_line['running_balance'] = self.search(group_line.get('__domain'), limit=1).running_balance or 0.0\n        return result\n\n    # -------------------------------------------------------------------------\n    # ACTION METHODS\n    # -------------------------------------------------------------------------\n\n    def action_undo_reconciliation(self):\n        \\\"\\\"\\\" Undo the reconciliation made on the statement line and reset their journal items\n        to their original states.\n        \\\"\\\"\\\"\n        self.line_ids.remove_move_reconcile()\n        self.payment_ids.unlink()\n\n        for st_line in self:\n            st_line.with_context(force_delete=True).write({\n                'to_check': False,\n                'line_ids': [Command.clear()] + [\n                    Command.create(line_vals) for line_vals in st_line._prepare_move_line_default_vals()],\n            })\n\n    # -------------------------------------------------------------------------\n    # HELPERS\n    # -------------------------------------------------------------------------\n\n    def _find_or_create_bank_account(self):\n        self.ensure_one()\n        if str2bool(self.env['ir.config_parameter'].sudo().get_param(\\\"account.skip_create_bank_account_on_reconcile\\\")):\n            return self.env['res.partner.bank']\n\n        # There is a sql constraint on res.partner.bank ensuring an unique pair <partner, account number>.\n        # Since it's not dependent of the company, we need to search on others company too to avoid the creation\n        # of an extra res.partner.bank raising an error coming from this constraint.\n        # However, at the end, we need to filter out the results to not trigger the check_company when trying to\n        # assign a res.partner.bank owned by another company.\n        bank_account = self.env['res.partner.bank'].sudo().with_context(active_test=False).search([\n            ('acc_number', '=', self.account_number),\n            ('partner_id', '=', self.partner_id.id),\n        ])\n        if not bank_account:\n            bank_account = self.env['res.partner.bank'].create({\n                'acc_number': self.account_number,\n                'partner_id': self.partner_id.id,\n                'journal_id': None,\n            })\n        return bank_account.filtered(lambda x: x.company_id in (False, self.company_id))\n\n    def _get_default_amls_matching_domain(self):\n        self.ensure_one()\n        all_reconcilable_account_ids = self.env['account.account'].search([\n            (\\\"company_id\\\", \\\"child_of\\\", self.company_id.root_id.id),\n            ('reconcile', '=', True),\n        ]).ids\n        return [\n            # Base domain.\n            ('display_type', 'not in', ('line_section', 'line_note')),\n            ('parent_state', '=', 'posted'),\n            ('company_id', 'child_of', self.company_id.root_id.id),\n            # Reconciliation domain.\n            ('reconciled', '=', False),\n            # Domain to use the account_move_line__unreconciled_index\n            ('account_id', 'in', all_reconcilable_account_ids),\n            # Special domain for payments.\n            '|',\n            ('account_id.account_type', 'not in', ('asset_receivable', 'liability_payable')),\n            ('payment_id', '=', False),\n            # Special domain for statement lines.\n            ('statement_line_id', '!=', self.id),\n        ]\n\n    @api.model\n    def _get_default_journal(self):\n        journal_type = self.env.context.get('journal_type', 'bank')\n        return self.env['account.journal'].search([\n                *self.env['account.journal']._check_company_domain(self.env.company),\n                ('type', '=', journal_type),\n            ], limit=1)\n\n    @api.model\n    def _get_default_statement(self, journal_id=None, date=None):\n        statement = self.search(\n            domain=[\n                ('journal_id', '=', journal_id or self._get_default_journal().id),\n                ('date', '<=', date or fields.Date.today()),\n            ],\n            limit=1\n        ).statement_id\n        if not statement.is_complete:\n            return statement\n\n    def _get_accounting_amounts_and_currencies(self):\n        \\\"\\\"\\\" Retrieve the transaction amount, journal amount and the company amount with their corresponding currencies\n        from the journal entry linked to the statement line.\n        All returned amounts will be positive for an inbound transaction, negative for an outbound one.\n\n        :return: (\n            transaction_amount, transaction_currency,\n            journal_amount, journal_currency,\n            company_amount, company_currency,\n        )\n        \\\"\\\"\\\"\n        self.ensure_one()\n        liquidity_line, suspense_line, other_lines = self._seek_for_lines()\n        if suspense_line and not other_lines:\n            transaction_amount = -suspense_line.amount_currency\n            transaction_currency = suspense_line.currency_id\n        else:\n            # In case of to_check or partial reconciliation, we can't trust the suspense line.\n            transaction_amount = self.amount_currency if self.foreign_currency_id else self.amount\n            transaction_currency = self.foreign_currency_id or liquidity_line.currency_id\n        return (\n            transaction_amount,\n            transaction_currency,\n            sum(liquidity_line.mapped('amount_currency')),\n            liquidity_line.currency_id,\n            sum(liquidity_line.mapped('balance')),\n            liquidity_line.company_currency_id,\n        )\n\n\n\n", "CodeBleu_score": 22.306679279756}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\tn                'payment_method': pay_method,\n                'company_journals': {},\n            }\n            if values['mode'] == 'unique':\n                unique_electronic_ids.add(pay_method.id)\n            elif manage_providers and values['mode'] == 'electronic':\n                unique_electronic_ids.add(pay_method.id)\n                electronic_names.add(pay_method.code)\n\n        # Load the provider to manage 'electronic' payment methods.\n        providers_per_code = {}\n        if manage_providers:\n            providers = self.env['payment.provider'].sudo().search([\n                *self.env['payment.provider']._check_company_domain(self.company_id),\n                ('code', 'in', tuple(electronic_names)),\n            ])\n            for provider in providers:\n                providers_per_code.setdefault(provider.company_id.id, {}).setdefault(provider._get_code(), set()).add(provider.id)\n\n        # Collect the existing unique/electronic payment method lines.\n        if unique_electronic_ids:\n            fnames = ['payment_method_id', 'journal_id']\n            if manage_providers:\n                fnames.append('payment_provider_id')\n            self.env['account.payment.method.line'].flush_model(fnames=fnames)\n\n            self._cr.execute(\n                f'''\n                    SELECT\n                        apm.id,\n                        journal.company_id,\n                        journal.id,\n                        {'apml.payment_provider_id' if manage_providers else 'NULL'}\n                    FROM account_payment_method_line apml\n                    JOIN account_journal journal ON journal.id = apml.journal_id\n                    JOIN account_payment_method apm ON apm.id = apml.payment_method_id\n                    WHERE apm.id IN %s\n                ''',\n                [tuple(unique_electronic_ids)],\n            )\n            for pay_method_id, company_id, journal_id, provider_id in self._cr.fetchall():\n                values = method_information_mapping[pay_method_id]\n                is_electronic = manage_providers and values['mode'] == 'electronic'\n                if is_electronic:\n                    journal_ids = values['company_journals'].setdefault(company_id, {}).setdefault(provider_id, [])\n                else:\n                    journal_ids = values['company_journals'].setdefault(company_id, [])\n                journal_ids.append(journal_id)\n        return {\n            'pay_methods': pay_methods,\n            'manage_providers': manage_providers,\n            'method_information_mapping': method_information_mapping,\n            'providers_per_code': providers_per_code,\n        }\n\n    @api.depends('outbound_payment_method_line_ids', 'inbound_payment_method_line_ids')\n    def _compute_available_payment_method_ids(self):\n        \\\"\\\"\\\"\n        Compute the available payment methods id by respecting the following rules:\n            Methods of mode 'unique' cannot be used twice on the same company.\n            Methods of mode 'electronic' cannot be used twice on the same company for the same 'payment_provider_id'.\n            Methods of mode 'multi' can be duplicated on the same journal.\n        \\\"\\\"\\\"\n        results = self._get_journals_payment_method_information()\n        pay_methods = results['pay_methods']\n        manage_providers = results['manage_providers']\n        method_information_mapping = results['method_information_mapping']\n        providers_per_code = results['providers_per_code']\n\n        # Compute the candidates for each journal.\n        for journal in self:\n            commands = [Command.clear()]\n            company = journal.company_id\n\n            # Exclude the 'unique' / 'electronic' values that are already set on the journal.\n            protected_provider_ids = set()\n            protected_payment_method_ids = set()\n            for payment_type in ('inbound', 'outbound'):\n                lines = journal[f'{payment_type}_payment_method_line_ids']\n                for line in lines:\n                    if line.payment_method_id.id in method_information_mapping:\n                        protected_payment_method_ids.add(line.payment_method_id.id)\n                        if manage_providers and method_information_mapping.get(line.payment_method_id.id, {}).get('mode') == 'electronic':\n                            protected_provider_ids.add(line.payment_provider_id.id)\n\n            for pay_method in pay_methods:\n                values = method_information_mapping[pay_method.id]\n\n                # Get the domain of the journals on which the current method is usable.\n                method_domain = pay_method._get_payment_method_domain(pay_method.code)\n                if not journal.filtered_domain(method_domain):\n                    continue\n\n                if values['mode'] == 'unique':\n                    # 'unique' are linked to a single journal per company.\n                    already_linked_journal_ids = set(values['company_journals'].get(company.id, [])) - {journal._origin.id}\n                    if not already_linked_journal_ids and pay_method.id not in protected_payment_method_ids:\n                        commands.append(Command.link(pay_method.id))\n                elif manage_providers and values['mode'] == 'electronic':\n                    # 'electronic' are linked to a single journal per company per provider.\n                    for provider_id in providers_per_code.get(company.id, {}).get(pay_method.code, set()):\n                        already_linked_journal_ids = set(values['company_journals'].get(company.id, {}).get(provider_id, [])) - {journal._origin.id}\n                        if not already_linked_journal_ids and provider_id not in protected_provider_ids:\n                            commands.append(Command.link(pay_method.id))\n                elif values['mode'] == 'multi':\n                    # 'multi' are unlimited.\n                    commands.append(Command.link(pay_method.id))\n\n            journal.available_payment_method_ids = commands\n\n    @api.depends('type')\n    def _compute_default_account_type(self):\n        default_account_id_types = {\n            'bank': 'asset_cash',\n            'cash': 'asset_cash',\n            'sale': 'income%',\n            'purchase': 'expense%',\n        }\n\n        for journal in self:\n            journal.default_account_type = default_account_id_types.get(journal.type, '%')\n\n    @api.depends('type', 'currency_id')\n    def _compute_inbound_payment_method_line_ids(self):\n        for journal in self:\n            pay_method_line_ids_commands = [Command.clear()]\n            if journal.type in ('bank', 'cash'):\n                default_methods = journal._default_inbound_payment_methods()\n                pay_method_line_ids_commands += [Command.create({\n                    'name': pay_method.name,\n                    'payment_method_id': pay_method.id,\n                }) for pay_method in default_methods]\n            journal.inbound_payment_method_line_ids = pay_method_line_ids_commands\n\n    @api.depends('type', 'currency_id')\n\n\n", "CodeBleu_score": 60.0595911531096}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\tn                'payment_method': pay_method,\n                'company_journals': {},\n            }\n            if values['mode'] == 'unique':\n                unique_electronic_ids.add(pay_method.id)\n            elif manage_providers and values['mode'] == 'electronic':\n                unique_electronic_ids.add(pay_method.id)\n                electronic_names.add(pay_method.code)\n\n        # Load the provider to manage 'electronic' payment methods.\n        providers_per_code = {}\n        if manage_providers:\n            providers = self.env['payment.provider'].sudo().search([\n                *self.env['payment.provider']._check_company_domain(self.company_id),\n                ('code', 'in', tuple(electronic_names)),\n            ])\n            for provider in providers:\n                providers_per_code.setdefault(provider.company_id.id, {}).setdefault(provider._get_code(), set()).add(provider.id)\n\n        # Collect the existing unique/electronic payment method lines.\n        if unique_electronic_ids:\n            fnames = ['payment_method_id', 'journal_id']\n            if manage_providers:\n                fnames.append('payment_provider_id')\n            self.env['account.payment.method.line'].flush_model(fnames=fnames)\n\n            self._cr.execute(\n                f'''\n                    SELECT\n                        apm.id,\n                        journal.company_id,\n                        journal.id,\n                        {'apml.payment_provider_id' if manage_providers else 'NULL'}\n                    FROM account_payment_method_line apml\n                    JOIN account_journal journal ON journal.id = apml.journal_id\n                    JOIN account_payment_method apm ON apm.id = apml.payment_method_id\n                    WHERE apm.id IN %s\n                ''',\n                [tuple(unique_electronic_ids)],\n            )\n            for pay_method_id, company_id, journal_id, provider_id in self._cr.fetchall():\n                values = method_information_mapping[pay_method_id]\n                is_electronic = manage_providers and values['mode'] == 'electronic'\n                if is_electronic:\n                    journal_ids = values['company_journals'].setdefault(company_id, {}).setdefault(provider_id, [])\n                else:\n                    journal_ids = values['company_journals'].setdefault(company_id, [])\n                journal_ids.append(journal_id)\n        return {\n            'pay_methods': pay_methods,\n            'manage_providers': manage_providers,\n            'method_information_mapping': method_information_mapping,\n            'providers_per_code': providers_per_code,\n        }\n\n    @api.depends('outbound_payment_method_line_ids', 'inbound_payment_method_line_ids')\n    def _compute_available_payment_method_ids(self):\n        \\\"\\\"\\\"\n        Compute the available payment methods id by respecting the following rules:\n            Methods of mode 'unique' cannot be used twice on the same company.\n            Methods of mode 'electronic' cannot be used twice on the same company for the same 'payment_provider_id'.\n            Methods of mode 'multi' can be duplicated on the same journal.\n        \\\"\\\"\\\"\n        results = self._get_journals_payment_method_information()\n        pay_methods = results['pay_methods']\n        manage_providers = results['manage_providers']\n        method_information_mapping = results['method_information_mapping']\n        providers_per_code = results['providers_per_code']\n\n        # Compute the candidates for each journal.\n        for journal in self:\n            commands = [Command.clear()]\n            company = journal.company_id\n\n            # Exclude the 'unique' / 'electronic' values that are already set on the journal.\n            protected_provider_ids = set()\n            protected_payment_method_ids = set()\n            for payment_type in ('inbound', 'outbound'):\n                lines = journal[f'{payment_type}_payment_method_line_ids']\n                for line in lines:\n                    if line.payment_method_id.id in method_information_mapping:\n                        protected_payment_method_ids.add(line.payment_method_id.id)\n                        if manage_providers and method_information_mapping.get(line.payment_method_id.id, {}).get('mode') == 'electronic':\n                            protected_provider_ids.add(line.payment_provider_id.id)\n\n            for pay_method in pay_methods:\n                values = method_information_mapping[pay_method.id]\n\n                # Get the domain of the journals on which the current method is usable.\n                method_domain = pay_method._get_payment_method_domain(pay_method.code)\n                if not journal.filtered_domain(method_domain):\n                    continue\n\n                if values['mode'] == 'unique':\n                    # 'unique' are linked to a single journal per company.\n                    already_linked_journal_ids = set(values['company_journals'].get(company.id, [])) - {journal._origin.id}\n                    if not already_linked_journal_ids and pay_method.id not in protected_payment_method_ids:\n                        commands.append(Command.link(pay_method.id))\n                elif manage_providers and values['mode'] == 'electronic':\n                    # 'electronic' are linked to a single journal per company per provider.\n                    for provider_id in providers_per_code.get(company.id, {}).get(pay_method.code, set()):\n                        already_linked_journal_ids = set(values['company_journals'].get(company.id, {}).get(provider_id, [])) - {journal._origin.id}\n                        if not already_linked_journal_ids and provider_id not in protected_provider_ids:\n                            commands.append(Command.link(pay_method.id))\n                elif values['mode'] == 'multi':\n                    # 'multi' are unlimited.\n                    commands.append(Command.link(pay_method.id))\n\n            journal.available_payment_method_ids = commands\n\n    @api.depends('type')\n    def _compute_default_account_type(self):\n        default_account_id_types = {\n            'bank': 'asset_cash',\n            'cash': 'asset_cash',\n            'sale': 'income%',\n            'purchase': 'expense%',\n        }\n\n        for journal in self:\n            journal.default_account_type = default_account_id_types.get(journal.type, '%')\n\n    @api.depends('type', 'currency_id')\n    def _compute_inbound_payment_method_line_ids(self):\n        for journal in self:\n            pay_method_line_ids_commands = [Command.clear()]\n            if journal.type in ('bank', 'cash'):\n                default_methods = journal._default_inbound_payment_methods()\n                pay_method_line_ids_commands += [Command.create({\n                    'name': pay_method.name,\n                    'payment_method_id': pay_method.id,\n                }) for pay_method in default_methods]\n            journal.inbound_payment_method_line_ids = pay_method_line_ids_commands\n\n    @api.depends('type', 'currency_id')\n\n\n", "CodeBleu_score": 60.0595911531096}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\tn                'payment_method': pay_method,\n                'company_journals': {},\n            }\n            if values['mode'] == 'unique':\n                unique_electronic_ids.add(pay_method.id)\n            elif manage_providers and values['mode'] == 'electronic':\n                unique_electronic_ids.add(pay_method.id)\n                electronic_names.add(pay_method.code)\n\n        # Load the provider to manage 'electronic' payment methods.\n        providers_per_code = {}\n        if manage_providers:\n            providers = self.env['payment.provider'].sudo().search([\n                *self.env['payment.provider']._check_company_domain(self.company_id),\n                ('code', 'in', tuple(electronic_names)),\n            ])\n            for provider in providers:\n                providers_per_code.setdefault(provider.company_id.id, {}).setdefault(provider._get_code(), set()).add(provider.id)\n\n        # Collect the existing unique/electronic payment method lines.\n        if unique_electronic_ids:\n            fnames = ['payment_method_id', 'journal_id']\n            if manage_providers:\n                fnames.append('payment_provider_id')\n            self.env['account.payment.method.line'].flush_model(fnames=fnames)\n\n            self._cr.execute(\n                f'''\n                    SELECT\n                        apm.id,\n                        journal.company_id,\n                        journal.id,\n                        {'apml.payment_provider_id' if manage_providers else 'NULL'}\n                    FROM account_payment_method_line apml\n                    JOIN account_journal journal ON journal.id = apml.journal_id\n                    JOIN account_payment_method apm ON apm.id = apml.payment_method_id\n                    WHERE apm.id IN %s\n                ''',\n                [tuple(unique_electronic_ids)],\n            )\n            for pay_method_id, company_id, journal_id, provider_id in self._cr.fetchall():\n                values = method_information_mapping[pay_method_id]\n                is_electronic = manage_providers and values['mode'] == 'electronic'\n                if is_electronic:\n                    journal_ids = values['company_journals'].setdefault(company_id, {}).setdefault(provider_id, [])\n                else:\n                    journal_ids = values['company_journals'].setdefault(company_id, [])\n                journal_ids.append(journal_id)\n        return {\n            'pay_methods': pay_methods,\n            'manage_providers': manage_providers,\n            'method_information_mapping': method_information_mapping,\n            'providers_per_code': providers_per_code,\n        }\n\n    @api.depends('outbound_payment_method_line_ids', 'inbound_payment_method_line_ids')\n    def _compute_available_payment_method_ids(self):\n        \\\"\\\"\\\"\n        Compute the available payment methods id by respecting the following rules:\n            Methods of mode 'unique' cannot be used twice on the same company.\n            Methods of mode 'electronic' cannot be used twice on the same company for the same 'payment_provider_id'.\n            Methods of mode 'multi' can be duplicated on the same journal.\n        \\\"\\\"\\\"\n        results = self._get_journals_payment_method_information()\n        pay_methods = results['pay_methods']\n        manage_providers = results['manage_providers']\n        method_information_mapping = results['method_information_mapping']\n        providers_per_code = results['providers_per_code']\n\n        # Compute the candidates for each journal.\n        for journal in self:\n            commands = [Command.clear()]\n            company = journal.company_id\n\n            # Exclude the 'unique' / 'electronic' values that are already set on the journal.\n            protected_provider_ids = set()\n            protected_payment_method_ids = set()\n            for payment_type in ('inbound', 'outbound'):\n                lines = journal[f'{payment_type}_payment_method_line_ids']\n                for line in lines:\n                    if line.payment_method_id.id in method_information_mapping:\n                        protected_payment_method_ids.add(line.payment_method_id.id)\n                        if manage_providers and method_information_mapping.get(line.payment_method_id.id, {}).get('mode') == 'electronic':\n                            protected_provider_ids.add(line.payment_provider_id.id)\n\n            for pay_method in pay_methods:\n                values = method_information_mapping[pay_method.id]\n\n                # Get the domain of the journals on which the current method is usable.\n                method_domain = pay_method._get_payment_method_domain(pay_method.code)\n                if not journal.filtered_domain(method_domain):\n                    continue\n\n                if values['mode'] == 'unique':\n                    # 'unique' are linked to a single journal per company.\n                    already_linked_journal_ids = set(values['company_journals'].get(company.id, [])) - {journal._origin.id}\n                    if not already_linked_journal_ids and pay_method.id not in protected_payment_method_ids:\n                        commands.append(Command.link(pay_method.id))\n                elif manage_providers and values['mode'] == 'electronic':\n                    # 'electronic' are linked to a single journal per company per provider.\n                    for provider_id in providers_per_code.get(company.id, {}).get(pay_method.code, set()):\n                        already_linked_journal_ids = set(values['company_journals'].get(company.id, {}).get(provider_id, [])) - {journal._origin.id}\n                        if not already_linked_journal_ids and provider_id not in protected_provider_ids:\n                            commands.append(Command.link(pay_method.id))\n                elif values['mode'] == 'multi':\n                    # 'multi' are unlimited.\n                    commands.append(Command.link(pay_method.id))\n\n            journal.available_payment_method_ids = commands\n\n    @api.depends('type')\n    def _compute_default_account_type(self):\n        default_account_id_types = {\n            'bank': 'asset_cash',\n            'cash': 'asset_cash',\n            'sale': 'income%',\n            'purchase': 'expense%',\n        }\n\n        for journal in self:\n            journal.default_account_type = default_account_id_types.get(journal.type, '%')\n\n    @api.depends('type', 'currency_id')\n    def _compute_inbound_payment_method_line_ids(self):\n        for journal in self:\n            pay_method_line_ids_commands = [Command.clear()]\n            if journal.type in ('bank', 'cash'):\n                default_methods = journal._default_inbound_payment_methods()\n                pay_method_line_ids_commands += [Command.create({\n                    'name': pay_method.name,\n                    'payment_method_id': pay_method.id,\n                }) for pay_method in default_methods]\n            journal.inbound_payment_method_line_ids = pay_method_line_ids_commands\n\n    @api.depends('type', 'currency_id')\n\n\n", "CodeBleu_score": 60.0595911531096}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t_id = fields.Many2one(string='User', related='invoice_user_id')\n    invoice_origin = fields.Char(\n        string='Origin',\n        readonly=True,\n        tracking=True,\n        help=\\\"The document(s) that generated the invoice.\\\",\n    )\n    invoice_incoterm_id = fields.Many2one(\n        comodel_name='account.incoterms',\n        string='Incoterm',\n        default=lambda self: self.env.company.incoterm_id,\n        help='International Commercial Terms are a series of predefined commercial '\n             'terms used in international transactions.',\n    )\n    incoterm_location = fields.Char(\n        string='Incoterm Location',\n        compute='_compute_incoterm_location',\n        readonly=False,\n        store=True,\n    )\n    invoice_cash_rounding_id = fields.Many2one(\n        comodel_name='account.cash.rounding',\n        string='Cash Rounding Method',\n        help='Defines the smallest coinage of the currency that can be used to pay by cash.',\n    )\n    send_and_print_values = fields.Json(copy=False)\n    invoice_pdf_report_id = fields.Many2one(\n        comodel_name='ir.attachment',\n        string=\\\"PDF Attachment\\\",\n        compute=lambda self: self._compute_linked_attachment_id('invoice_pdf_report_id', 'invoice_pdf_report_file'),\n        depends=['invoice_pdf_report_file']\n    )\n    invoice_pdf_report_file = fields.Binary(\n        attachment=True,\n        string=\\\"PDF File\\\",\n        copy=False,\n    )\n\n    # === Display purpose fields === #\n    # used to have a dynamic domain on journal / taxes in the form view.\n    invoice_filter_type_domain = fields.Char(compute='_compute_invoice_filter_type_domain')\n    bank_partner_id = fields.Many2one(\n        comodel_name='res.partner',\n        compute='_compute_bank_partner_id',\n        help='Technical field to get the domain on the bank',\n    )\n    # used to display a message when the invoice's accounting date is prior of the tax lock date\n    tax_lock_date_message = fields.Char(compute='_compute_tax_lock_date_message')\n    # used for tracking the status of the currency\n    display_inactive_currency_warning = fields.Boolean(compute=\\\"_compute_display_inactive_currency_warning\\\")\n    tax_country_id = fields.Many2one(  # used to filter the available taxes depending on the fiscal country and fiscal position.\n        comodel_name='res.country',\n        compute='_compute_tax_country_id',\n    )\n    tax_country_code = fields.Char(compute=\\\"_compute_tax_country_code\\\")\n    has_reconciled_entries = fields.Boolean(compute=\\\"_compute_has_reconciled_entries\\\")\n    show_reset_to_draft_button = fields.Boolean(compute='_compute_show_reset_to_draft_button')\n    partner_credit_warning = fields.Text(\n        compute='_compute_partner_credit_warning',\n        groups=\\\"account.group_account_invoice,account.group_account_readonly\\\",\n    )\n    partner_credit = fields.Monetary(compute='_compute_partner_credit')\n    duplicated_ref_ids = fields.Many2many(comodel_name='account.move', compute='_compute_duplicated_ref_ids')\n    need_cancel_request = fields.Boolean(compute='_compute_need_cancel_request')\n\n    # used to display the various dates and amount dues on the invoice's PDF\n    payment_term_details = fields.Binary(compute=\\\"_compute_payment_term_details\\\", exportable=False)\n    show_payment_term_details = fields.Boolean(compute=\\\"_compute_show_payment_term_details\\\")\n    show_discount_details = fields.Boolean(compute=\\\"_compute_show_payment_term_details\\\")\n\n    _sql_constraints = [(\n        'unique_name', \\\"\\\", \\\"Another entry with the same name already exists.\\\",\n    )]\n\n    def _auto_init(self):\n        super()._auto_init()\n        if not index_exists(self.env.cr, 'account_move_to_check_idx'):\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE INDEX account_move_to_check_idx\n                          ON account_move(journal_id)\n                       WHERE to_check = true\n            \\\"\\\"\\\")\n        if not index_exists(self.env.cr, 'account_move_payment_idx'):\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE INDEX account_move_payment_idx\n                          ON account_move(journal_id, state, payment_state, move_type, date)\n            \\\"\\\"\\\")\n        if not index_exists(self.env.cr, 'account_move_unique_name'):\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE UNIQUE INDEX account_move_unique_name\n                                 ON account_move(name, journal_id)\n                              WHERE (state = 'posted' AND name != '/')\n            \\\"\\\"\\\")\n        if not index_exists(self.env.cr, 'account_move_sequence_index3'):\n            # Used for gap detection in list views\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE INDEX account_move_sequence_index3\n                          ON account_move (journal_id, sequence_prefix desc, (sequence_number+1) desc)\n            \\\"\\\"\\\")\n\n    def init(self):\n        super().init()\n        create_index(self.env.cr,\n                     indexname='account_move_journal_id_company_id_idx',\n                     tablename='account_move',\n                     expressions=['journal_id', 'company_id', 'date'])\n\n    # -------------------------------------------------------------------------\n    # COMPUTE METHODS\n    # -------------------------------------------------------------------------\n\n    @api.depends('move_type')\n    def _compute_invoice_default_sale_person(self):\n        # We want to modify the sale person only when we don't have one and if the move type corresponds to this condition\n        # If the move doesn't correspond, we remove the sale person\n        for move in self:\n            if move.is_sale_document(include_receipts=True):\n                move.invoice_user_id = move.invoice_user_id or self.env.user\n            else:\n                move.invoice_user_id = False\n\n    def _compute_is_being_sent(self):\n        for move in self:\n            move.is_being_sent = bool(move.send_and_print_values)\n\n    def _compute_payment_reference(self):\n        for move in self.filtered(lambda m: (\n            m.state == 'posted'\n            and m.move_type == 'out_invoice'\n            and not m.payment_reference\n        )):\n            move.payment_reference = move._get_invoice_computed_reference()\n        self._inverse_payment_reference()\n\n    @api.depends('invoice_date', 'company_id')\n\n\n", "CodeBleu_score": 24.796485671087932}, {"code": "def _compute_date(self)\n\t_id = fields.Many2one(string='User', related='invoice_user_id')\n    invoice_origin = fields.Char(\n        string='Origin',\n        readonly=True,\n        tracking=True,\n        help=\\\"The document(s) that generated the invoice.\\\",\n    )\n    invoice_incoterm_id = fields.Many2one(\n        comodel_name='account.incoterms',\n        string='Incoterm',\n        default=lambda self: self.env.company.incoterm_id,\n        help='International Commercial Terms are a series of predefined commercial '\n             'terms used in international transactions.',\n    )\n    incoterm_location = fields.Char(\n        string='Incoterm Location',\n        compute='_compute_incoterm_location',\n        readonly=False,\n        store=True,\n    )\n    invoice_cash_rounding_id = fields.Many2one(\n        comodel_name='account.cash.rounding',\n        string='Cash Rounding Method',\n        help='Defines the smallest coinage of the currency that can be used to pay by cash.',\n    )\n    send_and_print_values = fields.Json(copy=False)\n    invoice_pdf_report_id = fields.Many2one(\n        comodel_name='ir.attachment',\n        string=\\\"PDF Attachment\\\",\n        compute=lambda self: self._compute_linked_attachment_id('invoice_pdf_report_id', 'invoice_pdf_report_file'),\n        depends=['invoice_pdf_report_file']\n    )\n    invoice_pdf_report_file = fields.Binary(\n        attachment=True,\n        string=\\\"PDF File\\\",\n        copy=False,\n    )\n\n    # === Display purpose fields === #\n    # used to have a dynamic domain on journal / taxes in the form view.\n    invoice_filter_type_domain = fields.Char(compute='_compute_invoice_filter_type_domain')\n    bank_partner_id = fields.Many2one(\n        comodel_name='res.partner',\n        compute='_compute_bank_partner_id',\n        help='Technical field to get the domain on the bank',\n    )\n    # used to display a message when the invoice's accounting date is prior of the tax lock date\n    tax_lock_date_message = fields.Char(compute='_compute_tax_lock_date_message')\n    # used for tracking the status of the currency\n    display_inactive_currency_warning = fields.Boolean(compute=\\\"_compute_display_inactive_currency_warning\\\")\n    tax_country_id = fields.Many2one(  # used to filter the available taxes depending on the fiscal country and fiscal position.\n        comodel_name='res.country',\n        compute='_compute_tax_country_id',\n    )\n    tax_country_code = fields.Char(compute=\\\"_compute_tax_country_code\\\")\n    has_reconciled_entries = fields.Boolean(compute=\\\"_compute_has_reconciled_entries\\\")\n    show_reset_to_draft_button = fields.Boolean(compute='_compute_show_reset_to_draft_button')\n    partner_credit_warning = fields.Text(\n        compute='_compute_partner_credit_warning',\n        groups=\\\"account.group_account_invoice,account.group_account_readonly\\\",\n    )\n    partner_credit = fields.Monetary(compute='_compute_partner_credit')\n    duplicated_ref_ids = fields.Many2many(comodel_name='account.move', compute='_compute_duplicated_ref_ids')\n    need_cancel_request = fields.Boolean(compute='_compute_need_cancel_request')\n\n    # used to display the various dates and amount dues on the invoice's PDF\n    payment_term_details = fields.Binary(compute=\\\"_compute_payment_term_details\\\", exportable=False)\n    show_payment_term_details = fields.Boolean(compute=\\\"_compute_show_payment_term_details\\\")\n    show_discount_details = fields.Boolean(compute=\\\"_compute_show_payment_term_details\\\")\n\n    _sql_constraints = [(\n        'unique_name', \\\"\\\", \\\"Another entry with the same name already exists.\\\",\n    )]\n\n    def _auto_init(self):\n        super()._auto_init()\n        if not index_exists(self.env.cr, 'account_move_to_check_idx'):\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE INDEX account_move_to_check_idx\n                          ON account_move(journal_id)\n                       WHERE to_check = true\n            \\\"\\\"\\\")\n        if not index_exists(self.env.cr, 'account_move_payment_idx'):\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE INDEX account_move_payment_idx\n                          ON account_move(journal_id, state, payment_state, move_type, date)\n            \\\"\\\"\\\")\n        if not index_exists(self.env.cr, 'account_move_unique_name'):\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE UNIQUE INDEX account_move_unique_name\n                                 ON account_move(name, journal_id)\n                              WHERE (state = 'posted' AND name != '/')\n            \\\"\\\"\\\")\n        if not index_exists(self.env.cr, 'account_move_sequence_index3'):\n            # Used for gap detection in list views\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE INDEX account_move_sequence_index3\n                          ON account_move (journal_id, sequence_prefix desc, (sequence_number+1) desc)\n            \\\"\\\"\\\")\n\n    def init(self):\n        super().init()\n        create_index(self.env.cr,\n                     indexname='account_move_journal_id_company_id_idx',\n                     tablename='account_move',\n                     expressions=['journal_id', 'company_id', 'date'])\n\n    # -------------------------------------------------------------------------\n    # COMPUTE METHODS\n    # -------------------------------------------------------------------------\n\n    @api.depends('move_type')\n    def _compute_invoice_default_sale_person(self):\n        # We want to modify the sale person only when we don't have one and if the move type corresponds to this condition\n        # If the move doesn't correspond, we remove the sale person\n        for move in self:\n            if move.is_sale_document(include_receipts=True):\n                move.invoice_user_id = move.invoice_user_id or self.env.user\n            else:\n                move.invoice_user_id = False\n\n    def _compute_is_being_sent(self):\n        for move in self:\n            move.is_being_sent = bool(move.send_and_print_values)\n\n    def _compute_payment_reference(self):\n        for move in self.filtered(lambda m: (\n            m.state == 'posted'\n            and m.move_type == 'out_invoice'\n            and not m.payment_reference\n        )):\n            move.payment_reference = move._get_invoice_computed_reference()\n        self._inverse_payment_reference()\n\n    @api.depends('invoice_date', 'company_id')\n\n\n", "CodeBleu_score": 24.796485671087932}, {"code": "def _compute_date(self)\n\t_id = fields.Many2one(string='User', related='invoice_user_id')\n    invoice_origin = fields.Char(\n        string='Origin',\n        readonly=True,\n        tracking=True,\n        help=\\\"The document(s) that generated the invoice.\\\",\n    )\n    invoice_incoterm_id = fields.Many2one(\n        comodel_name='account.incoterms',\n        string='Incoterm',\n        default=lambda self: self.env.company.incoterm_id,\n        help='International Commercial Terms are a series of predefined commercial '\n             'terms used in international transactions.',\n    )\n    incoterm_location = fields.Char(\n        string='Incoterm Location',\n        compute='_compute_incoterm_location',\n        readonly=False,\n        store=True,\n    )\n    invoice_cash_rounding_id = fields.Many2one(\n        comodel_name='account.cash.rounding',\n        string='Cash Rounding Method',\n        help='Defines the smallest coinage of the currency that can be used to pay by cash.',\n    )\n    send_and_print_values = fields.Json(copy=False)\n    invoice_pdf_report_id = fields.Many2one(\n        comodel_name='ir.attachment',\n        string=\\\"PDF Attachment\\\",\n        compute=lambda self: self._compute_linked_attachment_id('invoice_pdf_report_id', 'invoice_pdf_report_file'),\n        depends=['invoice_pdf_report_file']\n    )\n    invoice_pdf_report_file = fields.Binary(\n        attachment=True,\n        string=\\\"PDF File\\\",\n        copy=False,\n    )\n\n    # === Display purpose fields === #\n    # used to have a dynamic domain on journal / taxes in the form view.\n    invoice_filter_type_domain = fields.Char(compute='_compute_invoice_filter_type_domain')\n    bank_partner_id = fields.Many2one(\n        comodel_name='res.partner',\n        compute='_compute_bank_partner_id',\n        help='Technical field to get the domain on the bank',\n    )\n    # used to display a message when the invoice's accounting date is prior of the tax lock date\n    tax_lock_date_message = fields.Char(compute='_compute_tax_lock_date_message')\n    # used for tracking the status of the currency\n    display_inactive_currency_warning = fields.Boolean(compute=\\\"_compute_display_inactive_currency_warning\\\")\n    tax_country_id = fields.Many2one(  # used to filter the available taxes depending on the fiscal country and fiscal position.\n        comodel_name='res.country',\n        compute='_compute_tax_country_id',\n    )\n    tax_country_code = fields.Char(compute=\\\"_compute_tax_country_code\\\")\n    has_reconciled_entries = fields.Boolean(compute=\\\"_compute_has_reconciled_entries\\\")\n    show_reset_to_draft_button = fields.Boolean(compute='_compute_show_reset_to_draft_button')\n    partner_credit_warning = fields.Text(\n        compute='_compute_partner_credit_warning',\n        groups=\\\"account.group_account_invoice,account.group_account_readonly\\\",\n    )\n    partner_credit = fields.Monetary(compute='_compute_partner_credit')\n    duplicated_ref_ids = fields.Many2many(comodel_name='account.move', compute='_compute_duplicated_ref_ids')\n    need_cancel_request = fields.Boolean(compute='_compute_need_cancel_request')\n\n    # used to display the various dates and amount dues on the invoice's PDF\n    payment_term_details = fields.Binary(compute=\\\"_compute_payment_term_details\\\", exportable=False)\n    show_payment_term_details = fields.Boolean(compute=\\\"_compute_show_payment_term_details\\\")\n    show_discount_details = fields.Boolean(compute=\\\"_compute_show_payment_term_details\\\")\n\n    _sql_constraints = [(\n        'unique_name', \\\"\\\", \\\"Another entry with the same name already exists.\\\",\n    )]\n\n    def _auto_init(self):\n        super()._auto_init()\n        if not index_exists(self.env.cr, 'account_move_to_check_idx'):\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE INDEX account_move_to_check_idx\n                          ON account_move(journal_id)\n                       WHERE to_check = true\n            \\\"\\\"\\\")\n        if not index_exists(self.env.cr, 'account_move_payment_idx'):\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE INDEX account_move_payment_idx\n                          ON account_move(journal_id, state, payment_state, move_type, date)\n            \\\"\\\"\\\")\n        if not index_exists(self.env.cr, 'account_move_unique_name'):\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE UNIQUE INDEX account_move_unique_name\n                                 ON account_move(name, journal_id)\n                              WHERE (state = 'posted' AND name != '/')\n            \\\"\\\"\\\")\n        if not index_exists(self.env.cr, 'account_move_sequence_index3'):\n            # Used for gap detection in list views\n            self.env.cr.execute(\\\"\\\"\\\"\n                CREATE INDEX account_move_sequence_index3\n                          ON account_move (journal_id, sequence_prefix desc, (sequence_number+1) desc)\n            \\\"\\\"\\\")\n\n    def init(self):\n        super().init()\n        create_index(self.env.cr,\n                     indexname='account_move_journal_id_company_id_idx',\n                     tablename='account_move',\n                     expressions=['journal_id', 'company_id', 'date'])\n\n    # -------------------------------------------------------------------------\n    # COMPUTE METHODS\n    # -------------------------------------------------------------------------\n\n    @api.depends('move_type')\n    def _compute_invoice_default_sale_person(self):\n        # We want to modify the sale person only when we don't have one and if the move type corresponds to this condition\n        # If the move doesn't correspond, we remove the sale person\n        for move in self:\n            if move.is_sale_document(include_receipts=True):\n                move.invoice_user_id = move.invoice_user_id or self.env.user\n            else:\n                move.invoice_user_id = False\n\n    def _compute_is_being_sent(self):\n        for move in self:\n            move.is_being_sent = bool(move.send_and_print_values)\n\n    def _compute_payment_reference(self):\n        for move in self.filtered(lambda m: (\n            m.state == 'posted'\n            and m.move_type == 'out_invoice'\n            and not m.payment_reference\n        )):\n            move.payment_reference = move._get_invoice_computed_reference()\n        self._inverse_payment_reference()\n\n    @api.depends('invoice_date', 'company_id')\n\n\n", "CodeBleu_score": 24.796485671087932}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\tor self._context.get('default_currency_id')\n            if currency_id and currency_id != company.currency_id.id:\n                currency_domain = domain + [('currency_id', '=', currency_id)]\n                journal = self.env['account.journal'].search(currency_domain, limit=1)\n\n        if not journal:\n            journal = self.env['account.journal'].search(domain, limit=1)\n\n        if not journal:\n            error_msg = _(\n                \\\"No journal could be found in company %(company_name)s for any of those types: %(journal_types)s\\\",\n                company_name=company.display_name,\n                journal_types=', '.join(journal_types),\n            )\n            raise UserError(error_msg)\n\n        return journal\n\n    @api.depends('move_type')\n    def _compute_is_storno(self):\n        for move in self:\n            move.is_storno = move.is_storno or (move.move_type in ('out_refund', 'in_refund') and move.company_id.account_storno)\n\n    @api.depends('company_id', 'invoice_filter_type_domain')\n    def _compute_suitable_journal_ids(self):\n        for m in self:\n            journal_type = m.invoice_filter_type_domain or 'general'\n            company = m.company_id or self.env.company\n            m.suitable_journal_ids = self.env['account.journal'].search([\n                *self.env['account.journal']._check_company_domain(company),\n                ('type', '=', journal_type),\n            ])\n\n    @api.depends('posted_before', 'state', 'journal_id', 'date', 'move_type', 'payment_id')\n    def _compute_name(self):\n        self = self.sorted(lambda m: (m.date, m.ref or '', m._origin.id))\n\n        for move in self:\n            if move.state == 'cancel':\n                continue\n\n            move_has_name = move.name and move.name != '/'\n            if move_has_name or move.state != 'posted':\n                if not move.posted_before and not move._sequence_matches_date():\n                    if move._get_last_sequence():\n                        # The name does not match the date and the move is not the first in the period:\n                        # Reset to draft\n                        move.name = False\n                        continue\n                else:\n                    if move_has_name and move.posted_before or not move_has_name and move._get_last_sequence():\n                        # The move either\n                        # - has a name and was posted before, or\n                        # - doesn't have a name, but is not the first in the period\n                        # so we don't recompute the name\n                        continue\n            if move.date and (not move_has_name or not move._sequence_matches_date()):\n                move._set_next_sequence()\n\n        self.filtered(lambda m: not m.name and not move.quick_edit_mode).name = '/'\n        self._inverse_name()\n\n\n    @api.depends('journal_id', 'date')\n    def _compute_highest_name(self):\n        for record in self:\n            record.highest_name = record._get_last_sequence()\n\n    @api.depends('name', 'journal_id')\n    def _compute_made_sequence_hole(self):\n        self.env.cr.execute(\\\"\\\"\\\"\n            SELECT this.id\n              FROM account_move this\n              JOIN res_company company ON company.id = this.company_id\n         LEFT JOIN account_move other ON this.journal_id = other.journal_id\n                                     AND this.sequence_prefix = other.sequence_prefix\n                                     AND this.sequence_number = other.sequence_number + 1\n             WHERE other.id IS NULL\n               AND this.sequence_number != 1\n               AND this.name != '/'\n               AND this.id = ANY(%(move_ids)s)\n        \\\"\\\"\\\", {\n            'move_ids': self.ids,\n        })\n        made_sequence_hole = set(r[0] for r in self.env.cr.fetchall())\n        for move in self:\n            move.made_sequence_hole = move.id in made_sequence_hole\n\n    @api.depends('move_type')\n    def _compute_type_name(self):\n        type_name_mapping = dict(\n            self._fields['move_type']._description_selection(self.env),\n            out_invoice=_('Invoice'),\n            out_refund=_('Credit Note'),\n        )\n\n        for record in self:\n            record.type_name = type_name_mapping[record.move_type]\n\n    @api.depends('line_ids.account_id.account_type')\n    def _compute_always_tax_exigible(self):\n        for record in self.with_context(prefetch_fields=False):\n            # We need to check is_invoice as well because always_tax_exigible is used to\n            # set the tags as well, during the encoding. So, if no receivable/payable\n            # line has been created yet, the invoice would be detected as always exigible,\n            # and set the tags on some lines ; which would be wrong.\n            record.always_tax_exigible = not record.is_invoice(True) \\\n                                         and not record._collect_tax_cash_basis_values()\n\n    @api.depends('partner_id')\n    def _compute_commercial_partner_id(self):\n        for move in self:\n            move.commercial_partner_id = move.partner_id.commercial_partner_id\n\n    @api.depends('partner_id')\n    def _compute_partner_shipping_id(self):\n        for move in self:\n            if move.is_invoice(include_receipts=True):\n                addr = move.partner_id.address_get(['delivery'])\n                move.partner_shipping_id = addr and addr.get('delivery')\n            else:\n                move.partner_shipping_id = False\n\n    @api.depends('partner_id', 'partner_shipping_id', 'company_id')\n    def _compute_fiscal_position_id(self):\n        for move in self:\n            delivery_partner = self.env['res.partner'].browse(\n                move.partner_shipping_id.id\n                or move.partner_id.address_get(['delivery'])['delivery']\n            )\n            move.fiscal_position_id = self.env['account.fiscal.position'].with_company(move.company_id)._get_fiscal_position(\n                move.partner_id, delivery=delivery_partner)\n\n    @api.depends('bank_partner_id')\n    def _compute_partner_bank_id(self):\n        for move in self:\n            bank_ids = move.bank_partner_id.bank_ids.filtered(\n                lambda bank: not bank.company_id or bank.company_id == move.company_id)\n            move.partner_bank_id = bank_ids[0] if bank_ids else False\n\n    @api.depends('partner_id')\n\n\n", "CodeBleu_score": 30.74281479910769}, {"code": "def _compute_invoice_payment_term_id(self)\n\tor self._context.get('default_currency_id')\n            if currency_id and currency_id != company.currency_id.id:\n                currency_domain = domain + [('currency_id', '=', currency_id)]\n                journal = self.env['account.journal'].search(currency_domain, limit=1)\n\n        if not journal:\n            journal = self.env['account.journal'].search(domain, limit=1)\n\n        if not journal:\n            error_msg = _(\n                \\\"No journal could be found in company %(company_name)s for any of those types: %(journal_types)s\\\",\n                company_name=company.display_name,\n                journal_types=', '.join(journal_types),\n            )\n            raise UserError(error_msg)\n\n        return journal\n\n    @api.depends('move_type')\n    def _compute_is_storno(self):\n        for move in self:\n            move.is_storno = move.is_storno or (move.move_type in ('out_refund', 'in_refund') and move.company_id.account_storno)\n\n    @api.depends('company_id', 'invoice_filter_type_domain')\n    def _compute_suitable_journal_ids(self):\n        for m in self:\n            journal_type = m.invoice_filter_type_domain or 'general'\n            company = m.company_id or self.env.company\n            m.suitable_journal_ids = self.env['account.journal'].search([\n                *self.env['account.journal']._check_company_domain(company),\n                ('type', '=', journal_type),\n            ])\n\n    @api.depends('posted_before', 'state', 'journal_id', 'date', 'move_type', 'payment_id')\n    def _compute_name(self):\n        self = self.sorted(lambda m: (m.date, m.ref or '', m._origin.id))\n\n        for move in self:\n            if move.state == 'cancel':\n                continue\n\n            move_has_name = move.name and move.name != '/'\n            if move_has_name or move.state != 'posted':\n                if not move.posted_before and not move._sequence_matches_date():\n                    if move._get_last_sequence():\n                        # The name does not match the date and the move is not the first in the period:\n                        # Reset to draft\n                        move.name = False\n                        continue\n                else:\n                    if move_has_name and move.posted_before or not move_has_name and move._get_last_sequence():\n                        # The move either\n                        # - has a name and was posted before, or\n                        # - doesn't have a name, but is not the first in the period\n                        # so we don't recompute the name\n                        continue\n            if move.date and (not move_has_name or not move._sequence_matches_date()):\n                move._set_next_sequence()\n\n        self.filtered(lambda m: not m.name and not move.quick_edit_mode).name = '/'\n        self._inverse_name()\n\n\n    @api.depends('journal_id', 'date')\n    def _compute_highest_name(self):\n        for record in self:\n            record.highest_name = record._get_last_sequence()\n\n    @api.depends('name', 'journal_id')\n    def _compute_made_sequence_hole(self):\n        self.env.cr.execute(\\\"\\\"\\\"\n            SELECT this.id\n              FROM account_move this\n              JOIN res_company company ON company.id = this.company_id\n         LEFT JOIN account_move other ON this.journal_id = other.journal_id\n                                     AND this.sequence_prefix = other.sequence_prefix\n                                     AND this.sequence_number = other.sequence_number + 1\n             WHERE other.id IS NULL\n               AND this.sequence_number != 1\n               AND this.name != '/'\n               AND this.id = ANY(%(move_ids)s)\n        \\\"\\\"\\\", {\n            'move_ids': self.ids,\n        })\n        made_sequence_hole = set(r[0] for r in self.env.cr.fetchall())\n        for move in self:\n            move.made_sequence_hole = move.id in made_sequence_hole\n\n    @api.depends('move_type')\n    def _compute_type_name(self):\n        type_name_mapping = dict(\n            self._fields['move_type']._description_selection(self.env),\n            out_invoice=_('Invoice'),\n            out_refund=_('Credit Note'),\n        )\n\n        for record in self:\n            record.type_name = type_name_mapping[record.move_type]\n\n    @api.depends('line_ids.account_id.account_type')\n    def _compute_always_tax_exigible(self):\n        for record in self.with_context(prefetch_fields=False):\n            # We need to check is_invoice as well because always_tax_exigible is used to\n            # set the tags as well, during the encoding. So, if no receivable/payable\n            # line has been created yet, the invoice would be detected as always exigible,\n            # and set the tags on some lines ; which would be wrong.\n            record.always_tax_exigible = not record.is_invoice(True) \\\n                                         and not record._collect_tax_cash_basis_values()\n\n    @api.depends('partner_id')\n    def _compute_commercial_partner_id(self):\n        for move in self:\n            move.commercial_partner_id = move.partner_id.commercial_partner_id\n\n    @api.depends('partner_id')\n    def _compute_partner_shipping_id(self):\n        for move in self:\n            if move.is_invoice(include_receipts=True):\n                addr = move.partner_id.address_get(['delivery'])\n                move.partner_shipping_id = addr and addr.get('delivery')\n            else:\n                move.partner_shipping_id = False\n\n    @api.depends('partner_id', 'partner_shipping_id', 'company_id')\n    def _compute_fiscal_position_id(self):\n        for move in self:\n            delivery_partner = self.env['res.partner'].browse(\n                move.partner_shipping_id.id\n                or move.partner_id.address_get(['delivery'])['delivery']\n            )\n            move.fiscal_position_id = self.env['account.fiscal.position'].with_company(move.company_id)._get_fiscal_position(\n                move.partner_id, delivery=delivery_partner)\n\n    @api.depends('bank_partner_id')\n    def _compute_partner_bank_id(self):\n        for move in self:\n            bank_ids = move.bank_partner_id.bank_ids.filtered(\n                lambda bank: not bank.company_id or bank.company_id == move.company_id)\n            move.partner_bank_id = bank_ids[0] if bank_ids else False\n\n    @api.depends('partner_id')\n\n\n", "CodeBleu_score": 30.74281479910769}, {"code": "def _compute_invoice_payment_term_id(self)\n\tor self._context.get('default_currency_id')\n            if currency_id and currency_id != company.currency_id.id:\n                currency_domain = domain + [('currency_id', '=', currency_id)]\n                journal = self.env['account.journal'].search(currency_domain, limit=1)\n\n        if not journal:\n            journal = self.env['account.journal'].search(domain, limit=1)\n\n        if not journal:\n            error_msg = _(\n                \\\"No journal could be found in company %(company_name)s for any of those types: %(journal_types)s\\\",\n                company_name=company.display_name,\n                journal_types=', '.join(journal_types),\n            )\n            raise UserError(error_msg)\n\n        return journal\n\n    @api.depends('move_type')\n    def _compute_is_storno(self):\n        for move in self:\n            move.is_storno = move.is_storno or (move.move_type in ('out_refund', 'in_refund') and move.company_id.account_storno)\n\n    @api.depends('company_id', 'invoice_filter_type_domain')\n    def _compute_suitable_journal_ids(self):\n        for m in self:\n            journal_type = m.invoice_filter_type_domain or 'general'\n            company = m.company_id or self.env.company\n            m.suitable_journal_ids = self.env['account.journal'].search([\n                *self.env['account.journal']._check_company_domain(company),\n                ('type', '=', journal_type),\n            ])\n\n    @api.depends('posted_before', 'state', 'journal_id', 'date', 'move_type', 'payment_id')\n    def _compute_name(self):\n        self = self.sorted(lambda m: (m.date, m.ref or '', m._origin.id))\n\n        for move in self:\n            if move.state == 'cancel':\n                continue\n\n            move_has_name = move.name and move.name != '/'\n            if move_has_name or move.state != 'posted':\n                if not move.posted_before and not move._sequence_matches_date():\n                    if move._get_last_sequence():\n                        # The name does not match the date and the move is not the first in the period:\n                        # Reset to draft\n                        move.name = False\n                        continue\n                else:\n                    if move_has_name and move.posted_before or not move_has_name and move._get_last_sequence():\n                        # The move either\n                        # - has a name and was posted before, or\n                        # - doesn't have a name, but is not the first in the period\n                        # so we don't recompute the name\n                        continue\n            if move.date and (not move_has_name or not move._sequence_matches_date()):\n                move._set_next_sequence()\n\n        self.filtered(lambda m: not m.name and not move.quick_edit_mode).name = '/'\n        self._inverse_name()\n\n\n    @api.depends('journal_id', 'date')\n    def _compute_highest_name(self):\n        for record in self:\n            record.highest_name = record._get_last_sequence()\n\n    @api.depends('name', 'journal_id')\n    def _compute_made_sequence_hole(self):\n        self.env.cr.execute(\\\"\\\"\\\"\n            SELECT this.id\n              FROM account_move this\n              JOIN res_company company ON company.id = this.company_id\n         LEFT JOIN account_move other ON this.journal_id = other.journal_id\n                                     AND this.sequence_prefix = other.sequence_prefix\n                                     AND this.sequence_number = other.sequence_number + 1\n             WHERE other.id IS NULL\n               AND this.sequence_number != 1\n               AND this.name != '/'\n               AND this.id = ANY(%(move_ids)s)\n        \\\"\\\"\\\", {\n            'move_ids': self.ids,\n        })\n        made_sequence_hole = set(r[0] for r in self.env.cr.fetchall())\n        for move in self:\n            move.made_sequence_hole = move.id in made_sequence_hole\n\n    @api.depends('move_type')\n    def _compute_type_name(self):\n        type_name_mapping = dict(\n            self._fields['move_type']._description_selection(self.env),\n            out_invoice=_('Invoice'),\n            out_refund=_('Credit Note'),\n        )\n\n        for record in self:\n            record.type_name = type_name_mapping[record.move_type]\n\n    @api.depends('line_ids.account_id.account_type')\n    def _compute_always_tax_exigible(self):\n        for record in self.with_context(prefetch_fields=False):\n            # We need to check is_invoice as well because always_tax_exigible is used to\n            # set the tags as well, during the encoding. So, if no receivable/payable\n            # line has been created yet, the invoice would be detected as always exigible,\n            # and set the tags on some lines ; which would be wrong.\n            record.always_tax_exigible = not record.is_invoice(True) \\\n                                         and not record._collect_tax_cash_basis_values()\n\n    @api.depends('partner_id')\n    def _compute_commercial_partner_id(self):\n        for move in self:\n            move.commercial_partner_id = move.partner_id.commercial_partner_id\n\n    @api.depends('partner_id')\n    def _compute_partner_shipping_id(self):\n        for move in self:\n            if move.is_invoice(include_receipts=True):\n                addr = move.partner_id.address_get(['delivery'])\n                move.partner_shipping_id = addr and addr.get('delivery')\n            else:\n                move.partner_shipping_id = False\n\n    @api.depends('partner_id', 'partner_shipping_id', 'company_id')\n    def _compute_fiscal_position_id(self):\n        for move in self:\n            delivery_partner = self.env['res.partner'].browse(\n                move.partner_shipping_id.id\n                or move.partner_id.address_get(['delivery'])['delivery']\n            )\n            move.fiscal_position_id = self.env['account.fiscal.position'].with_company(move.company_id)._get_fiscal_position(\n                move.partner_id, delivery=delivery_partner)\n\n    @api.depends('bank_partner_id')\n    def _compute_partner_bank_id(self):\n        for move in self:\n            bank_ids = move.bank_partner_id.bank_ids.filtered(\n                lambda bank: not bank.company_id or bank.company_id == move.company_id)\n            move.partner_bank_id = bank_ids[0] if bank_ids else False\n\n    @api.depends('partner_id')\n\n\n", "CodeBleu_score": 30.74281479910769}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t- Percentage of Price Tax Included: The tax amount is a division of the price:\n        e.g 180 / (1 - 10%) = 200 (not price included)\n        e.g 200 * (1 - 10%) = 180 (price included)\n        \\\"\\\"\\\")\n    active = fields.Boolean(default=True, help=\\\"Set active to false to hide the tax without removing it.\\\")\n    company_id = fields.Many2one('res.company', string='Company', required=True, readonly=True, default=lambda self: self.env.company)\n    children_tax_ids = fields.Many2many('account.tax',\n        'account_tax_filiation_rel', 'parent_tax', 'child_tax',\n        check_company=True,\n        string='Children Taxes')\n    sequence = fields.Integer(required=True, default=1,\n        help=\\\"The sequence field is used to define order in which the tax lines are applied.\\\")\n    amount = fields.Float(required=True, digits=(16, 4), default=0.0, tracking=True)\n    description = fields.Char(string='Description', translate=True)\n    invoice_label = fields.Char(string='Label on Invoices', translate=True)\n    price_include = fields.Boolean(string='Included in Price', default=False, tracking=True,\n        help=\\\"Check this if the price you use on the product and invoices includes this tax.\\\")\n    include_base_amount = fields.Boolean(string='Affect Base of Subsequent Taxes', default=False, tracking=True,\n        help=\\\"If set, taxes with a higher sequence than this one will be affected by it, provided they accept it.\\\")\n    is_base_affected = fields.Boolean(\n        string=\\\"Base Affected by Previous Taxes\\\",\n        default=True,\n        tracking=True,\n        help=\\\"If set, taxes with a lower sequence might affect this one, provided they try to do it.\\\")\n    analytic = fields.Boolean(string=\\\"Include in Analytic Cost\\\", help=\\\"If set, the amount computed by this tax will be assigned to the same analytic account as the invoice line (if any)\\\")\n    tax_group_id = fields.Many2one(\n        comodel_name='account.tax.group',\n        string=\\\"Tax Group\\\",\n        compute='_compute_tax_group_id', readonly=False, store=True,\n        required=True, precompute=True,\n        domain=\\\"[('country_id', 'in', (country_id, False))]\\\")\n    # Technical field to make the 'tax_exigibility' field invisible if the same named field is set to false in 'res.company' model\n    hide_tax_exigibility = fields.Boolean(string='Hide Use Cash Basis Option', related='company_id.tax_exigibility', readonly=True)\n    tax_exigibility = fields.Selection(\n        [('on_invoice', 'Based on Invoice'),\n         ('on_payment', 'Based on Payment'),\n        ], string='Tax Exigibility', default='on_invoice',\n        help=\\\"Based on Invoice: the tax is due as soon as the invoice is validated.", "CodeBleu_score": 20.90030466882421}, {"code": " def _compute_tax_group_id(self)\n\t- Percentage of Price Tax Included: The tax amount is a division of the price:\n        e.g 180 / (1 - 10%) = 200 (not price included)\n        e.g 200 * (1 - 10%) = 180 (price included)\n        \\\"\\\"\\\")\n    active = fields.Boolean(default=True, help=\\\"Set active to false to hide the tax without removing it.\\\")\n    company_id = fields.Many2one('res.company', string='Company', required=True, readonly=True, default=lambda self: self.env.company)\n    children_tax_ids = fields.Many2many('account.tax',\n        'account_tax_filiation_rel', 'parent_tax', 'child_tax',\n        check_company=True,\n        string='Children Taxes')\n    sequence = fields.Integer(required=True, default=1,\n        help=\\\"The sequence field is used to define order in which the tax lines are applied.\\\")\n    amount = fields.Float(required=True, digits=(16, 4), default=0.0, tracking=True)\n    description = fields.Char(string='Description', translate=True)\n    invoice_label = fields.Char(string='Label on Invoices', translate=True)\n    price_include = fields.Boolean(string='Included in Price', default=False, tracking=True,\n        help=\\\"Check this if the price you use on the product and invoices includes this tax.\\\")\n    include_base_amount = fields.Boolean(string='Affect Base of Subsequent Taxes', default=False, tracking=True,\n        help=\\\"If set, taxes with a higher sequence than this one will be affected by it, provided they accept it.\\\")\n    is_base_affected = fields.Boolean(\n        string=\\\"Base Affected by Previous Taxes\\\",\n        default=True,\n        tracking=True,\n        help=\\\"If set, taxes with a lower sequence might affect this one, provided they try to do it.\\\")\n    analytic = fields.Boolean(string=\\\"Include in Analytic Cost\\\", help=\\\"If set, the amount computed by this tax will be assigned to the same analytic account as the invoice line (if any)\\\")\n    tax_group_id = fields.Many2one(\n        comodel_name='account.tax.group',\n        string=\\\"Tax Group\\\",\n        compute='_compute_tax_group_id', readonly=False, store=True,\n        required=True, precompute=True,\n        domain=\\\"[('country_id', 'in', (country_id, False))]\\\")\n    # Technical field to make the 'tax_exigibility' field invisible if the same named field is set to false in 'res.company' model\n    hide_tax_exigibility = fields.Boolean(string='Hide Use Cash Basis Option', related='company_id.tax_exigibility', readonly=True)\n    tax_exigibility = fields.Selection(\n        [('on_invoice', 'Based on Invoice'),\n         ('on_payment', 'Based on Payment'),\n        ], string='Tax Exigibility', default='on_invoice',\n        help=\\\"Based on Invoice: the tax is due as soon as the invoice is validated.", "CodeBleu_score": 20.90030466882421}, {"code": " def _compute_tax_group_id(self)\n\t- Percentage of Price Tax Included: The tax amount is a division of the price:\n        e.g 180 / (1 - 10%) = 200 (not price included)\n        e.g 200 * (1 - 10%) = 180 (price included)\n        \\\"\\\"\\\")\n    active = fields.Boolean(default=True, help=\\\"Set active to false to hide the tax without removing it.\\\")\n    company_id = fields.Many2one('res.company', string='Company', required=True, readonly=True, default=lambda self: self.env.company)\n    children_tax_ids = fields.Many2many('account.tax',\n        'account_tax_filiation_rel', 'parent_tax', 'child_tax',\n        check_company=True,\n        string='Children Taxes')\n    sequence = fields.Integer(required=True, default=1,\n        help=\\\"The sequence field is used to define order in which the tax lines are applied.\\\")\n    amount = fields.Float(required=True, digits=(16, 4), default=0.0, tracking=True)\n    description = fields.Char(string='Description', translate=True)\n    invoice_label = fields.Char(string='Label on Invoices', translate=True)\n    price_include = fields.Boolean(string='Included in Price', default=False, tracking=True,\n        help=\\\"Check this if the price you use on the product and invoices includes this tax.\\\")\n    include_base_amount = fields.Boolean(string='Affect Base of Subsequent Taxes', default=False, tracking=True,\n        help=\\\"If set, taxes with a higher sequence than this one will be affected by it, provided they accept it.\\\")\n    is_base_affected = fields.Boolean(\n        string=\\\"Base Affected by Previous Taxes\\\",\n        default=True,\n        tracking=True,\n        help=\\\"If set, taxes with a lower sequence might affect this one, provided they try to do it.\\\")\n    analytic = fields.Boolean(string=\\\"Include in Analytic Cost\\\", help=\\\"If set, the amount computed by this tax will be assigned to the same analytic account as the invoice line (if any)\\\")\n    tax_group_id = fields.Many2one(\n        comodel_name='account.tax.group',\n        string=\\\"Tax Group\\\",\n        compute='_compute_tax_group_id', readonly=False, store=True,\n        required=True, precompute=True,\n        domain=\\\"[('country_id', 'in', (country_id, False))]\\\")\n    # Technical field to make the 'tax_exigibility' field invisible if the same named field is set to false in 'res.company' model\n    hide_tax_exigibility = fields.Boolean(string='Hide Use Cash Basis Option', related='company_id.tax_exigibility', readonly=True)\n    tax_exigibility = fields.Selection(\n        [('on_invoice', 'Based on Invoice'),\n         ('on_payment', 'Based on Payment'),\n        ], string='Tax Exigibility', default='on_invoice',\n        help=\\\"Based on Invoice: the tax is due as soon as the invoice is validated.", "CodeBleu_score": 20.90030466882421}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\turl = url.rstrip('/')\n    if not db:\n        raise Exception('You must specify a database name')\n    self.session.get(url + '/web/database/login?db=' + db)\n    data = {'login': login, 'password': password, 'db': db, 'force': force}\n    with open(module_file, 'rb') as f:\n        files = {'file': f}\n        r = self.session.post(url + '/web/database/login_upload', data=data, files=files)\n    if r.status_code != 200:\n        raise Exception('Error %d: %s' % (r.status_code, r.text))\n    return r.text\n\n", "CodeBleu_score": 48.021595512552096}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t# login to the server\n    login_url = url + '/web/session/authenticate'\n    login_data = {\n        'db': db,\n        'login': login,\n        'password': password,\n    }\n    self.session.post(login_url, data=login_data)\n    # prepare the module upload data\n    upload_data = {\n        'file': open(module_file, 'rb'),\n        'filename': module_file,\n        'force': force,\n    }\n    # upload the module\n    upload_url = url + '/web/dataset/base_import_module/login_upload'\n    response = self.session.post(upload_url, files=upload_data)\n    return response.text\n\n\n\n\n", "CodeBleu_score": 40.65192212727523}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\tself.session.get(url + '/web/database/login?db=%s&login=%s&password=%s' % (db, login, password))\n    data = {'file': open(module_file, 'rb')}\n    if force:\n        data['force'] = 'true'\n    return self.session.post(url + '/base/login_upload', data=data).text\n\n", "CodeBleu_score": 20.454684479852723}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\tconfig = odoo.tools.config\n    dbname = config['db_name']\n    overwrite = config['translate_overwrite']\n    if config['language']:\n        msg = \"language %s\" % (config['language'],)\n    else:\n        msg = \"new language\"\n    _logger.info('importing translation file for %s into %s', msg, dbname)\n    fileformat = os.path.splitext(config['translate_in'])[-1][1:].lower()\n    # .pot is the same fileformat as .po\n    if fileformat == 'pot':\n        fileformat = 'po'\n    with open(config['translate_in'], 'rb') as buf:\n        registry = odoo.modules.registry.Registry.new(dbname)\n        with registry.cursor() as cr:\n            importer = odoo.tools.trans_load(config['language'], buf, fileformat, cr, overwrite)\n            importer.import_translations()\n    _logger.info('translation file imported successfully')\n\n", "CodeBleu_score": 56.18254264784416}, {"code": "def import_translation()\n\tconfig = odoo.tools.config\n    dbname = config['db_name']\n    overwrite = config['translate_overwrite']\n    if config['language']:\n        msg = \"language %s\" % (config['language'],)\n    else:\n        msg = \"new language\"\n    _logger.info('importing translation file for %s from %s', msg, config['translate_in'])\n    fileformat = os.path.splitext(config['translate_in'])[-1][1:].lower()\n    # .pot is the same fileformat as .po\n    if fileformat == 'pot':\n        fileformat = 'po'\n    with open(config['translate_in'], 'rb') as buf:\n        registry = odoo.modules.registry.Registry.new(dbname)\n        with registry.cursor() as cr:\n            odoo.tools.trans_import(config['language'], buf, fileformat, cr, overwrite)\n    _logger.info('translation file imported successfully')\n\n", "CodeBleu_score": 56.43023078838154}, {"code": "def import_translation()\n\tconfig = odoo.tools.config\n    dbname = config['db_name']\n    _logger.info('importing translations for database %s', dbname)\n    overwrite = config['translate_overwrite']\n    registry = odoo.modules.registry.Registry.new(dbname)\n    with registry.cursor() as cr:\n        importer = odoo.tools.trans_load(config['translate_in'], cr, overwrite)\n        importer.load()\n    _logger.info('translations imported successfully')\n\n", "CodeBleu_score": 37.17329444853338}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\tnew_node = self.graph.add_node(name, info)\n    new_node.depth = self.depth + 1\n    if not new_node in self.children:\n        self.children.append(new_node)\n    self.children.sort(key=lambda node: node.name)\n    return new_node\n\n", "CodeBleu_score": 36.59264901411642}, {"code": "def add_child(self, name, info)\n\tnew_node = self.graph.add_node(name, info)\n    new_node.depth = self.depth + 1\n    if not new_node in self.children:\n        self.children.append(new_node)\n    self.children.sort(key=lambda x: x.name)\n    return new_node\n\n", "CodeBleu_score": 38.13236087651739}, {"code": "def add_child(self, name, info)\n\tmax_depth, father = 0, None\n    for d in info['depends']:\n        n = self.graph.get(d) or Node(d, self.graph, None)  # lazy creation, do not use default value for get()\n        if n.depth >= max_depth:\n            father = n\n            max_depth = n.depth\n    if father:\n        return father.add_child(name, info)\n    else:\n        return Node(name, self.graph, info)\n\n", "CodeBleu_score": 32.63049355948492}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\tresult = []\n    for date in dates:\n        result.append((date, 0))\n\n    root_type = frappe.get_cached_value(\"Account\", account, \"root_type\")\n    if root_type not in (\"Asset\", \"Liability\", \"Equity\"):\n        result = [(date, -value) for date, value in result]\n\n    for entry in gl_entries:\n        if entry.posting_date <= dates[-1]:\n            if entry.account == account:\n                result[dates.index(entry.posting_date)][1] = entry.debit - entry.credit\n            elif entry.account in get_descendants_of(\"Account\", account):\n                result[dates.index(entry.posting_date)][1] += entry.debit - entry.credit\n    return result\n\n", "CodeBleu_score": 35.10406325108524}, {"code": "def build_result(account, dates, gl_entries)\n\t# Initializes the result with the dates and zeros for balances\n    result = [(d, 0.0) for d in dates]\n    # Determines the account's root type\n    root_type = frappe.get_cached_value(\"Account\", account, \"root_type\")\n    # Iterates through the entries, updating the balance for each date\n    for entry in gl_entries:\n        if entry.account == account:\n            if root_type in (\"Asset\", \"Liability\", \"Equity\"):\n                for i, (d, b) in enumerate(result):\n                    if entry.posting_date <= d:\n                        result[i] = (d, b + entry.credit - entry.debit)\n                        break\n            else:\n                for i, (d, b) in enumerate(result):\n                    if entry.posting_date <= d:\n                        result[i] = (d, b - entry.credit + entry.debit)\n                        break\n    # Negates the balances if the root type is not \"Asset\" or \"Expense\"\n    if root_type not in (\"Asset\", \"Expense\"):\n        for i, (d, b) in enumerate(result):\n            result[i] = (d, -b)\n    return result\n\n", "CodeBleu_score": 30.446468965088712}, {"code": "def build_result(account, dates, gl_entries)\n\tresult = [[d, 0] for d in dates]\n    root_type = frappe.get_cached_value(\"Account\", account, \"root_type\")\n    if root_type not in (\"Asset\", \"Liability\", \"Equity\"):\n        for i in range(len(result)):\n            result[i][1] = -result[i][1]\n    for entry in gl_entries:\n        if entry.account == account:\n            continue\n        if entry.account in get_descendants_of(account):\n            if root_type in (\"Asset\", \"Liability\", \"Equity\"):\n                for i in range(len(result)):\n                    result[i][1] += entry.debit - entry.credit\n            else:\n                for i in range(len(result)):\n                    result[i][1] -= entry.debit - entry.credit\n    return result\n\n", "CodeBleu_score": 32.09413397524439}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\tn\t\t\t\\\"Expense Account\\\",\n\t\t\t\\\"Expenses Included In Asset Valuation\\\",\n\t\t\t\\\"Expenses Included In Valuation\\\",\n\t\t\t\\\"Fixed Asset\\\",\n\t\t\t\\\"Income Account\\\",\n\t\t\t\\\"Indirect Expense\\\",\n\t\t\t\\\"Indirect Income\\\",\n\t\t\t\\\"Liability\\\",\n\t\t\t\\\"Payable\\\",\n\t\t\t\\\"Receivable\\\",\n\t\t\t\\\"Round Off\\\",\n\t\t\t\\\"Stock\\\",\n\t\t\t\\\"Stock Adjustment\\\",\n\t\t\t\\\"Stock Received But Not Billed\\\",\n\t\t\t\\\"Service Received But Not Billed\\\",\n\t\t\t\\\"Tax\\\",\n\t\t\t\\\"Temporary\\\",\n\t\t]\n\t\tbalance_must_be: DF.Literal[\\\"\\\", \\\"Debit\\\", \\\"Credit\\\"]\n\t\tcompany: DF.Link\n\t\tdisabled: DF.Check\n\t\tfreeze_account: DF.Literal[\\\"No\\\", \\\"Yes\\\"]\n\t\tinclude_in_gross: DF.Check\n\t\tis_group: DF.Check\n\t\tlft: DF.Int\n\t\told_parent: DF.Data | None\n\t\tparent_account: DF.Link\n\t\treport_type: DF.Literal[\\\"\\\", \\\"Balance Sheet\\\", \\\"Profit and Loss\\\"]\n\t\trgt: DF.Int\n\t\troot_type: DF.Literal[\\\"\\\", \\\"Asset\\\", \\\"Liability\\\", \\\"Income\\\", \\\"Expense\\\", \\\"Equity\\\"]\n\t\ttax_rate: DF.Float\n\t# end: auto-generated types\n\n\tnsm_parent_field = \\\"parent_account\\\"\n\n\tdef on_update(self):\n\t\tif frappe.local.flags.ignore_update_nsm:\n\t\t\treturn\n\t\telse:\n\t\t\tsuper().on_update()\n\n\tdef onload(self):\n\t\tfrozen_accounts_modifier = frappe.db.get_single_value(\\\"Accounts Settings\\\", \\\"frozen_accounts_modifier\\\")\n\t\tif not frozen_accounts_modifier or frozen_accounts_modifier in frappe.get_roles():\n\t\t\tself.set_onload(\\\"can_freeze_account\\\", True)\n\n\tdef autoname(self):\n\t\tfrom erpnext.accounts.utils import get_autoname_with_number\n\n\t\tself.name = get_autoname_with_number(self.account_number, self.account_name, self.company)\n\n\tdef validate(self):\n\t\tfrom erpnext.accounts.utils import validate_field_number\n\n\t\tif frappe.local.flags.allow_unverified_charts:\n\t\t\treturn\n\t\tself.validate_parent()\n\t\tself.validate_parent_child_account_type()\n\t\tself.validate_root_details()\n\t\tvalidate_field_number(\\\"Account\\\", self.name, self.account_number, self.company, \\\"account_number\\\")\n\t\tself.validate_group_or_ledger()\n\t\tself.set_root_and_report_type()\n\t\tself.validate_mandatory()\n\t\tself.validate_frozen_accounts_modifier()\n\t\tself.validate_balance_must_be_debit_or_credit()\n\t\tself.validate_account_currency()\n\t\tself.validate_root_company_and_sync_account_to_children()\n\t\tself.validate_receivable_payable_account_type()\n\n\tdef validate_parent_child_account_type(self):\n\t\tif self.parent_account:\n\t\t\tif self.account_type in [\n\t\t\t\t\\\"Direct Income\\\",\n\t\t\t\t\\\"Indirect Income\\\",\n\t\t\t\t\\\"Current Asset\\\",\n\t\t\t\t\\\"Current Liability\\\",\n\t\t\t\t\\\"Direct Expense\\\",\n\t\t\t\t\\\"Indirect Expense\\\",\n\t\t\t]:\n\t\t\t\tparent_account_type = frappe.db.get_value(\\\"Account\\\", self.parent_account, [\\\"account_type\\\"])\n\t\t\t\tif parent_account_type == self.account_type:\n\t\t\t\t\tthrow(_(\\\"Only Parent can be of type {0}\\\").format(self.account_type))\n\n\tdef validate_parent(self):\n\t\t\\\"\\\"\\\"Fetch Parent Details and validate parent account\\\"\\\"\\\"\n\t\tif self.parent_account:\n\t\t\tpar = frappe.get_cached_value(\n\t\t\t\t\\\"Account\\\", self.parent_account, [\\\"name\\\", \\\"is_group\\\", \\\"company\\\"], as_dict=1\n\t\t\t)\n\t\t\tif not par:\n\t\t\t\tthrow(\n\t\t\t\t\t_(\\\"Account {0}: Parent account {1} does not exist\\\").format(self.name, self.parent_account)\n\t\t\t\t)\n\t\t\telif par.name == self.name:\n\t\t\t\tthrow(_(\\\"Account {0}: You can not assign itself as parent account\\\").format(self.name))\n\t\t\telif not par.is_group:\n\t\t\t\tthrow(\n\t\t\t\t\t_(\\\"Account {0}: Parent account {1} can not be a ledger\\\").format(\n\t\t\t\t\t\tself.name, self.parent_account\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\telif par.company != self.company:\n\t\t\t\tthrow(\n\t\t\t\t\t_(\\\"Account {0}: Parent account {1} does not belong to company: {2}\\\").format(\n\t\t\t\t\t\tself.name, self.parent_account, self.company\n\t\t\t\t\t)\n\t\t\t\t)\n\n\tdef set_root_and_report_type(self):\n\t\tif self.parent_account:\n\t\t\tpar = frappe.get_cached_value(\n\t\t\t\t\\\"Account\\\", self.parent_account, [\\\"report_type\\\", \\\"root_type\\\"], as_dict=1\n\t\t\t)\n\n\t\t\tif par.report_type:\n\t\t\t\tself.report_type = par.report_type\n\t\t\tif par.root_type:\n\t\t\t\tself.root_type = par.root_type\n\n\t\tif self.is_group:\n\t\t\tdb_value = self.get_doc_before_save()\n\t\t\tif db_value:\n\t\t\t\tif self.report_type != db_value.report_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set report_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.report_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\t\t\t\tif self.root_type != db_value.root_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set root_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.root_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\n\t\tif self.root_type and not self.report_type:\n\t\t\tself.report_type = (\n\t\t\t\t\\\"Balance Sheet\\\" if self.root_type in (\\\"Asset\\\", \\\"Liability\\\", \\\"Equity\\\") else \\\"Profit and Loss\\\"\n\t\t\t)\n\n\n\n", "CodeBleu_score": 26.90567175724602}, {"code": "def validate_receivable_payable_account_type(self)\n\tn\t\t\t\\\"Expense Account\\\",\n\t\t\t\\\"Expenses Included In Asset Valuation\\\",\n\t\t\t\\\"Expenses Included In Valuation\\\",\n\t\t\t\\\"Fixed Asset\\\",\n\t\t\t\\\"Income Account\\\",\n\t\t\t\\\"Indirect Expense\\\",\n\t\t\t\\\"Indirect Income\\\",\n\t\t\t\\\"Liability\\\",\n\t\t\t\\\"Payable\\\",\n\t\t\t\\\"Receivable\\\",\n\t\t\t\\\"Round Off\\\",\n\t\t\t\\\"Stock\\\",\n\t\t\t\\\"Stock Adjustment\\\",\n\t\t\t\\\"Stock Received But Not Billed\\\",\n\t\t\t\\\"Service Received But Not Billed\\\",\n\t\t\t\\\"Tax\\\",\n\t\t\t\\\"Temporary\\\",\n\t\t]\n\t\tbalance_must_be: DF.Literal[\\\"\\\", \\\"Debit\\\", \\\"Credit\\\"]\n\t\tcompany: DF.Link\n\t\tdisabled: DF.Check\n\t\tfreeze_account: DF.Literal[\\\"No\\\", \\\"Yes\\\"]\n\t\tinclude_in_gross: DF.Check\n\t\tis_group: DF.Check\n\t\tlft: DF.Int\n\t\told_parent: DF.Data | None\n\t\tparent_account: DF.Link\n\t\treport_type: DF.Literal[\\\"\\\", \\\"Balance Sheet\\\", \\\"Profit and Loss\\\"]\n\t\trgt: DF.Int\n\t\troot_type: DF.Literal[\\\"\\\", \\\"Asset\\\", \\\"Liability\\\", \\\"Income\\\", \\\"Expense\\\", \\\"Equity\\\"]\n\t\ttax_rate: DF.Float\n\t# end: auto-generated types\n\n\tnsm_parent_field = \\\"parent_account\\\"\n\n\tdef on_update(self):\n\t\tif frappe.local.flags.ignore_update_nsm:\n\t\t\treturn\n\t\telse:\n\t\t\tsuper().on_update()\n\n\tdef onload(self):\n\t\tfrozen_accounts_modifier = frappe.db.get_single_value(\\\"Accounts Settings\\\", \\\"frozen_accounts_modifier\\\")\n\t\tif not frozen_accounts_modifier or frozen_accounts_modifier in frappe.get_roles():\n\t\t\tself.set_onload(\\\"can_freeze_account\\\", True)\n\n\tdef autoname(self):\n\t\tfrom erpnext.accounts.utils import get_autoname_with_number\n\n\t\tself.name = get_autoname_with_number(self.account_number, self.account_name, self.company)\n\n\tdef validate(self):\n\t\tfrom erpnext.accounts.utils import validate_field_number\n\n\t\tif frappe.local.flags.allow_unverified_charts:\n\t\t\treturn\n\t\tself.validate_parent()\n\t\tself.validate_parent_child_account_type()\n\t\tself.validate_root_details()\n\t\tvalidate_field_number(\\\"Account\\\", self.name, self.account_number, self.company, \\\"account_number\\\")\n\t\tself.validate_group_or_ledger()\n\t\tself.set_root_and_report_type()\n\t\tself.validate_mandatory()\n\t\tself.validate_frozen_accounts_modifier()\n\t\tself.validate_balance_must_be_debit_or_credit()\n\t\tself.validate_account_currency()\n\t\tself.validate_root_company_and_sync_account_to_children()\n\t\tself.validate_receivable_payable_account_type()\n\n\tdef validate_parent_child_account_type(self):\n\t\tif self.parent_account:\n\t\t\tif self.account_type in [\n\t\t\t\t\\\"Direct Income\\\",\n\t\t\t\t\\\"Indirect Income\\\",\n\t\t\t\t\\\"Current Asset\\\",\n\t\t\t\t\\\"Current Liability\\\",\n\t\t\t\t\\\"Direct Expense\\\",\n\t\t\t\t\\\"Indirect Expense\\\",\n\t\t\t]:\n\t\t\t\tparent_account_type = frappe.db.get_value(\\\"Account\\\", self.parent_account, [\\\"account_type\\\"])\n\t\t\t\tif parent_account_type == self.account_type:\n\t\t\t\t\tthrow(_(\\\"Only Parent can be of type {0}\\\").format(self.account_type))\n\n\tdef validate_parent(self):\n\t\t\\\"\\\"\\\"Fetch Parent Details and validate parent account\\\"\\\"\\\"\n\t\tif self.parent_account:\n\t\t\tpar = frappe.get_cached_value(\n\t\t\t\t\\\"Account\\\", self.parent_account, [\\\"name\\\", \\\"is_group\\\", \\\"company\\\"], as_dict=1\n\t\t\t)\n\t\t\tif not par:\n\t\t\t\tthrow(\n\t\t\t\t\t_(\\\"Account {0}: Parent account {1} does not exist\\\").format(self.name, self.parent_account)\n\t\t\t\t)\n\t\t\telif par.name == self.name:\n\t\t\t\tthrow(_(\\\"Account {0}: You can not assign itself as parent account\\\").format(self.name))\n\t\t\telif not par.is_group:\n\t\t\t\tthrow(\n\t\t\t\t\t_(\\\"Account {0}: Parent account {1} can not be a ledger\\\").format(\n\t\t\t\t\t\tself.name, self.parent_account\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\telif par.company != self.company:\n\t\t\t\tthrow(\n\t\t\t\t\t_(\\\"Account {0}: Parent account {1} does not belong to company: {2}\\\").format(\n\t\t\t\t\t\tself.name, self.parent_account, self.company\n\t\t\t\t\t)\n\t\t\t\t)\n\n\tdef set_root_and_report_type(self):\n\t\tif self.parent_account:\n\t\t\tpar = frappe.get_cached_value(\n\t\t\t\t\\\"Account\\\", self.parent_account, [\\\"report_type\\\", \\\"root_type\\\"], as_dict=1\n\t\t\t)\n\n\t\t\tif par.report_type:\n\t\t\t\tself.report_type = par.report_type\n\t\t\tif par.root_type:\n\t\t\t\tself.root_type = par.root_type\n\n\t\tif self.is_group:\n\t\t\tdb_value = self.get_doc_before_save()\n\t\t\tif db_value:\n\t\t\t\tif self.report_type != db_value.report_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set report_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.report_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\t\t\t\tif self.root_type != db_value.root_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set root_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.root_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\n\t\tif self.root_type and not self.report_type:\n\t\t\tself.report_type = (\n\t\t\t\t\\\"Balance Sheet\\\" if self.root_type in (\\\"Asset\\\", \\\"Liability\\\", \\\"Equity\\\") else \\\"Profit and Loss\\\"\n\t\t\t)\n\n\n\n", "CodeBleu_score": 26.90567175724602}, {"code": "def validate_receivable_payable_account_type(self)\n\tn\t\t\t\\\"Expense Account\\\",\n\t\t\t\\\"Expenses Included In Asset Valuation\\\",\n\t\t\t\\\"Expenses Included In Valuation\\\",\n\t\t\t\\\"Fixed Asset\\\",\n\t\t\t\\\"Income Account\\\",\n\t\t\t\\\"Indirect Expense\\\",\n\t\t\t\\\"Indirect Income\\\",\n\t\t\t\\\"Liability\\\",\n\t\t\t\\\"Payable\\\",\n\t\t\t\\\"Receivable\\\",\n\t\t\t\\\"Round Off\\\",\n\t\t\t\\\"Stock\\\",\n\t\t\t\\\"Stock Adjustment\\\",\n\t\t\t\\\"Stock Received But Not Billed\\\",\n\t\t\t\\\"Service Received But Not Billed\\\",\n\t\t\t\\\"Tax\\\",\n\t\t\t\\\"Temporary\\\",\n\t\t]\n\t\tbalance_must_be: DF.Literal[\\\"\\\", \\\"Debit\\\", \\\"Credit\\\"]\n\t\tcompany: DF.Link\n\t\tdisabled: DF.Check\n\t\tfreeze_account: DF.Literal[\\\"No\\\", \\\"Yes\\\"]\n\t\tinclude_in_gross: DF.Check\n\t\tis_group: DF.Check\n\t\tlft: DF.Int\n\t\told_parent: DF.Data | None\n\t\tparent_account: DF.Link\n\t\treport_type: DF.Literal[\\\"\\\", \\\"Balance Sheet\\\", \\\"Profit and Loss\\\"]\n\t\trgt: DF.Int\n\t\troot_type: DF.Literal[\\\"\\\", \\\"Asset\\\", \\\"Liability\\\", \\\"Income\\\", \\\"Expense\\\", \\\"Equity\\\"]\n\t\ttax_rate: DF.Float\n\t# end: auto-generated types\n\n\tnsm_parent_field = \\\"parent_account\\\"\n\n\tdef on_update(self):\n\t\tif frappe.local.flags.ignore_update_nsm:\n\t\t\treturn\n\t\telse:\n\t\t\tsuper().on_update()\n\n\tdef onload(self):\n\t\tfrozen_accounts_modifier = frappe.db.get_single_value(\\\"Accounts Settings\\\", \\\"frozen_accounts_modifier\\\")\n\t\tif not frozen_accounts_modifier or frozen_accounts_modifier in frappe.get_roles():\n\t\t\tself.set_onload(\\\"can_freeze_account\\\", True)\n\n\tdef autoname(self):\n\t\tfrom erpnext.accounts.utils import get_autoname_with_number\n\n\t\tself.name = get_autoname_with_number(self.account_number, self.account_name, self.company)\n\n\tdef validate(self):\n\t\tfrom erpnext.accounts.utils import validate_field_number\n\n\t\tif frappe.local.flags.allow_unverified_charts:\n\t\t\treturn\n\t\tself.validate_parent()\n\t\tself.validate_parent_child_account_type()\n\t\tself.validate_root_details()\n\t\tvalidate_field_number(\\\"Account\\\", self.name, self.account_number, self.company, \\\"account_number\\\")\n\t\tself.validate_group_or_ledger()\n\t\tself.set_root_and_report_type()\n\t\tself.validate_mandatory()\n\t\tself.validate_frozen_accounts_modifier()\n\t\tself.validate_balance_must_be_debit_or_credit()\n\t\tself.validate_account_currency()\n\t\tself.validate_root_company_and_sync_account_to_children()\n\t\tself.validate_receivable_payable_account_type()\n\n\tdef validate_parent_child_account_type(self):\n\t\tif self.parent_account:\n\t\t\tif self.account_type in [\n\t\t\t\t\\\"Direct Income\\\",\n\t\t\t\t\\\"Indirect Income\\\",\n\t\t\t\t\\\"Current Asset\\\",\n\t\t\t\t\\\"Current Liability\\\",\n\t\t\t\t\\\"Direct Expense\\\",\n\t\t\t\t\\\"Indirect Expense\\\",\n\t\t\t]:\n\t\t\t\tparent_account_type = frappe.db.get_value(\\\"Account\\\", self.parent_account, [\\\"account_type\\\"])\n\t\t\t\tif parent_account_type == self.account_type:\n\t\t\t\t\tthrow(_(\\\"Only Parent can be of type {0}\\\").format(self.account_type))\n\n\tdef validate_parent(self):\n\t\t\\\"\\\"\\\"Fetch Parent Details and validate parent account\\\"\\\"\\\"\n\t\tif self.parent_account:\n\t\t\tpar = frappe.get_cached_value(\n\t\t\t\t\\\"Account\\\", self.parent_account, [\\\"name\\\", \\\"is_group\\\", \\\"company\\\"], as_dict=1\n\t\t\t)\n\t\t\tif not par:\n\t\t\t\tthrow(\n\t\t\t\t\t_(\\\"Account {0}: Parent account {1} does not exist\\\").format(self.name, self.parent_account)\n\t\t\t\t)\n\t\t\telif par.name == self.name:\n\t\t\t\tthrow(_(\\\"Account {0}: You can not assign itself as parent account\\\").format(self.name))\n\t\t\telif not par.is_group:\n\t\t\t\tthrow(\n\t\t\t\t\t_(\\\"Account {0}: Parent account {1} can not be a ledger\\\").format(\n\t\t\t\t\t\tself.name, self.parent_account\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\telif par.company != self.company:\n\t\t\t\tthrow(\n\t\t\t\t\t_(\\\"Account {0}: Parent account {1} does not belong to company: {2}\\\").format(\n\t\t\t\t\t\tself.name, self.parent_account, self.company\n\t\t\t\t\t)\n\t\t\t\t)\n\n\tdef set_root_and_report_type(self):\n\t\tif self.parent_account:\n\t\t\tpar = frappe.get_cached_value(\n\t\t\t\t\\\"Account\\\", self.parent_account, [\\\"report_type\\\", \\\"root_type\\\"], as_dict=1\n\t\t\t)\n\n\t\t\tif par.report_type:\n\t\t\t\tself.report_type = par.report_type\n\t\t\tif par.root_type:\n\t\t\t\tself.root_type = par.root_type\n\n\t\tif self.is_group:\n\t\t\tdb_value = self.get_doc_before_save()\n\t\t\tif db_value:\n\t\t\t\tif self.report_type != db_value.report_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set report_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.report_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\t\t\t\tif self.root_type != db_value.root_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set root_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.root_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\n\t\tif self.root_type and not self.report_type:\n\t\t\tself.report_type = (\n\t\t\t\t\\\"Balance Sheet\\\" if self.root_type in (\\\"Asset\\\", \\\"Liability\\\", \\\"Equity\\\") else \\\"Profit and Loss\\\"\n\t\t\t)\n\n\n\n", "CodeBleu_score": 26.90567175724602}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\tif self.report_type != db_value.report_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set report_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.report_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\t\t\t\tif self.root_type != db_value.root_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set root_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.root_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\n\t\tif self.root_type and not self.report_type:\n\t\t\tself.report_type = (\n\t\t\t\t\\\"Balance Sheet\\\" if self.root_type in (\\\"Asset\\\", \\\"Liability\\\", \\\"Equity\\\") else \\\"Profit and Loss\\\"\n\t\t\t)\n\n\tdef validate_receivable_payable_account_type(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\t\treceivable_payable_types = [\\\"Receivable\\\", \\\"Payable\\\"]\n\t\tif (\n\t\t\tdoc_before_save\n\t\t\tand doc_before_save.account_type in receivable_payable_types\n\t\t\tand doc_before_save.account_type != self.account_type\n\t\t):\n\t\t\t# check for ledger entries\n\t\t\tif frappe.db.get_all(\\\"GL Entry\\\", filters={\\\"account\\\": self.name, \\\"is_cancelled\\\": 0}, limit=1):\n\t\t\t\tmsg = _(\n\t\t\t\t\t\\\"There are ledger entries against this account. Changing {0} to non-{1} in live system will cause incorrect output in 'Accounts {2}' report\\\"\n\t\t\t\t).format(\n\t\t\t\t\tfrappe.bold(\\\"Account Type\\\"), doc_before_save.account_type, doc_before_save.account_type\n\t\t\t\t)\n\t\t\t\tfrappe.msgprint(msg)\n\t\t\t\tself.add_comment(\\\"Comment\\\", msg)\n\n\tdef validate_root_details(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\n\t\tif doc_before_save and not doc_before_save.parent_account:\n\t\t\tthrow(_(\\\"Root cannot be edited.\\\"), RootNotEditable)\n\n\t\tif not self.parent_account and not self.is_group:\n\t\t\tthrow(_(\\\"The root account {0} must be a group\\\").format(frappe.bold(self.name)))\n\n\tdef validate_root_company_and_sync_account_to_children(self):\n\t\t# ignore validation while creating new compnay or while syncing to child companies\n\t\tif frappe.local.flags.ignore_root_company_validation or self.flags.ignore_root_company_validation:\n\t\t\treturn\n\t\tancestors = get_root_company(self.company)\n\t\tif ancestors:\n\t\t\tif frappe.get_cached_value(\n\t\t\t\t\\\"Company\\\", self.company, \\\"allow_account_creation_against_child_company\\\"\n\t\t\t):\n\t\t\t\treturn\n\t\t\tif not frappe.db.get_value(\n\t\t\t\t\\\"Account\\\", {\\\"account_name\\\": self.account_name, \\\"company\\\": ancestors[0]}, \\\"name\\\"\n\t\t\t):\n\t\t\t\tfrappe.throw(_(\\\"Please add the account to root level Company - {}\\\").format(ancestors[0]))\n\t\telif self.parent_account:\n\t\t\tdescendants = get_descendants_of(\\\"Company\\\", self.company)\n\t\t\tif not descendants:\n\t\t\t\treturn\n\t\t\tparent_acc_name_map = {}\n\t\t\tparent_acc_name, parent_acc_number = frappe.get_cached_value(\n\t\t\t\t\\\"Account\\\", self.parent_account, [\\\"account_name\\\", \\\"account_number\\\"]\n\t\t\t)\n\t\t\tfilters = {\n\t\t\t\t\\\"company\\\": [\\\"in\\\", descendants],\n\t\t\t\t\\\"account_name\\\": parent_acc_name,\n\t\t\t}\n\t\t\tif parent_acc_number:\n\t\t\t\tfilters[\\\"account_number\\\"] = parent_acc_number\n\n\t\t\tfor d in frappe.db.get_values(\n\t\t\t\t\\\"Account\\\", filters=filters, fieldname=[\\\"company\\\", \\\"name\\\"], as_dict=True\n\t\t\t):\n\t\t\t\tparent_acc_name_map[d[\\\"company\\\"]] = d[\\\"name\\\"]\n\n\t\t\tif not parent_acc_name_map:\n\t\t\t\treturn\n\n\t\t\tself.create_account_for_child_company(parent_acc_name_map, descendants, parent_acc_name)\n\n\tdef validate_group_or_ledger(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\t\tif not doc_before_save or cint(doc_before_save.is_group) == cint(self.is_group):\n\t\t\treturn\n\n\t\tif self.check_gle_exists():\n\t\t\tthrow(_(\\\"Account with existing transaction cannot be converted to ledger\\\"))\n\t\telif self.is_group:\n\t\t\tif self.account_type and not self.flags.exclude_account_type_check:\n\t\t\t\tthrow(_(\\\"Cannot covert to Group because Account Type is selected.\\\"))\n\t\telif self.check_if_child_exists():\n\t\t\tthrow(_(\\\"Account with child nodes cannot be set as ledger\\\"))\n\n\tdef validate_frozen_accounts_modifier(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\t\tif not doc_before_save or doc_before_save.freeze_account == self.freeze_account:\n\t\t\treturn\n\n\t\tfrozen_accounts_modifier = frappe.get_cached_value(\n\t\t\t\\\"Accounts Settings\\\", \\\"Accounts Settings\\\", \\\"frozen_accounts_modifier\\\"\n\t\t)\n\t\tif not frozen_accounts_modifier or frozen_accounts_modifier not in frappe.get_roles():\n\t\t\tthrow(_(\\\"You are not authorized to set Frozen value\\\"))\n\n\tdef validate_balance_must_be_debit_or_credit(self):\n\t\tfrom erpnext.accounts.utils import get_balance_on\n\n\t\tif not self.get(\\\"__islocal\\\") and self.balance_must_be:\n\t\t\taccount_balance = get_balance_on(self.name)\n\n\t\t\tif account_balance > 0 and self.balance_must_be == \\\"Credit\\\":\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Account balance already in Debit, you are not allowed to set 'Balance Must Be' as 'Credit'\\\"\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\telif account_balance < 0 and self.balance_must_be == \\\"Debit\\\":\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Account balance already in Credit, you are not allowed to set 'Balance Must Be' as 'Debit'\\\"\n\t\t\t\t\t)\n\t\t\t\t)\n\n\n\n", "CodeBleu_score": 25.3955121542445}, {"code": "def validate_account_currency(self)\n\tif self.report_type != db_value.report_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set report_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.report_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\t\t\t\tif self.root_type != db_value.root_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set root_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.root_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\n\t\tif self.root_type and not self.report_type:\n\t\t\tself.report_type = (\n\t\t\t\t\\\"Balance Sheet\\\" if self.root_type in (\\\"Asset\\\", \\\"Liability\\\", \\\"Equity\\\") else \\\"Profit and Loss\\\"\n\t\t\t)\n\n\tdef validate_receivable_payable_account_type(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\t\treceivable_payable_types = [\\\"Receivable\\\", \\\"Payable\\\"]\n\t\tif (\n\t\t\tdoc_before_save\n\t\t\tand doc_before_save.account_type in receivable_payable_types\n\t\t\tand doc_before_save.account_type != self.account_type\n\t\t):\n\t\t\t# check for ledger entries\n\t\t\tif frappe.db.get_all(\\\"GL Entry\\\", filters={\\\"account\\\": self.name, \\\"is_cancelled\\\": 0}, limit=1):\n\t\t\t\tmsg = _(\n\t\t\t\t\t\\\"There are ledger entries against this account. Changing {0} to non-{1} in live system will cause incorrect output in 'Accounts {2}' report\\\"\n\t\t\t\t).format(\n\t\t\t\t\tfrappe.bold(\\\"Account Type\\\"), doc_before_save.account_type, doc_before_save.account_type\n\t\t\t\t)\n\t\t\t\tfrappe.msgprint(msg)\n\t\t\t\tself.add_comment(\\\"Comment\\\", msg)\n\n\tdef validate_root_details(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\n\t\tif doc_before_save and not doc_before_save.parent_account:\n\t\t\tthrow(_(\\\"Root cannot be edited.\\\"), RootNotEditable)\n\n\t\tif not self.parent_account and not self.is_group:\n\t\t\tthrow(_(\\\"The root account {0} must be a group\\\").format(frappe.bold(self.name)))\n\n\tdef validate_root_company_and_sync_account_to_children(self):\n\t\t# ignore validation while creating new compnay or while syncing to child companies\n\t\tif frappe.local.flags.ignore_root_company_validation or self.flags.ignore_root_company_validation:\n\t\t\treturn\n\t\tancestors = get_root_company(self.company)\n\t\tif ancestors:\n\t\t\tif frappe.get_cached_value(\n\t\t\t\t\\\"Company\\\", self.company, \\\"allow_account_creation_against_child_company\\\"\n\t\t\t):\n\t\t\t\treturn\n\t\t\tif not frappe.db.get_value(\n\t\t\t\t\\\"Account\\\", {\\\"account_name\\\": self.account_name, \\\"company\\\": ancestors[0]}, \\\"name\\\"\n\t\t\t):\n\t\t\t\tfrappe.throw(_(\\\"Please add the account to root level Company - {}\\\").format(ancestors[0]))\n\t\telif self.parent_account:\n\t\t\tdescendants = get_descendants_of(\\\"Company\\\", self.company)\n\t\t\tif not descendants:\n\t\t\t\treturn\n\t\t\tparent_acc_name_map = {}\n\t\t\tparent_acc_name, parent_acc_number = frappe.get_cached_value(\n\t\t\t\t\\\"Account\\\", self.parent_account, [\\\"account_name\\\", \\\"account_number\\\"]\n\t\t\t)\n\t\t\tfilters = {\n\t\t\t\t\\\"company\\\": [\\\"in\\\", descendants],\n\t\t\t\t\\\"account_name\\\": parent_acc_name,\n\t\t\t}\n\t\t\tif parent_acc_number:\n\t\t\t\tfilters[\\\"account_number\\\"] = parent_acc_number\n\n\t\t\tfor d in frappe.db.get_values(\n\t\t\t\t\\\"Account\\\", filters=filters, fieldname=[\\\"company\\\", \\\"name\\\"], as_dict=True\n\t\t\t):\n\t\t\t\tparent_acc_name_map[d[\\\"company\\\"]] = d[\\\"name\\\"]\n\n\t\t\tif not parent_acc_name_map:\n\t\t\t\treturn\n\n\t\t\tself.create_account_for_child_company(parent_acc_name_map, descendants, parent_acc_name)\n\n\tdef validate_group_or_ledger(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\t\tif not doc_before_save or cint(doc_before_save.is_group) == cint(self.is_group):\n\t\t\treturn\n\n\t\tif self.check_gle_exists():\n\t\t\tthrow(_(\\\"Account with existing transaction cannot be converted to ledger\\\"))\n\t\telif self.is_group:\n\t\t\tif self.account_type and not self.flags.exclude_account_type_check:\n\t\t\t\tthrow(_(\\\"Cannot covert to Group because Account Type is selected.\\\"))\n\t\telif self.check_if_child_exists():\n\t\t\tthrow(_(\\\"Account with child nodes cannot be set as ledger\\\"))\n\n\tdef validate_frozen_accounts_modifier(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\t\tif not doc_before_save or doc_before_save.freeze_account == self.freeze_account:\n\t\t\treturn\n\n\t\tfrozen_accounts_modifier = frappe.get_cached_value(\n\t\t\t\\\"Accounts Settings\\\", \\\"Accounts Settings\\\", \\\"frozen_accounts_modifier\\\"\n\t\t)\n\t\tif not frozen_accounts_modifier or frozen_accounts_modifier not in frappe.get_roles():\n\t\t\tthrow(_(\\\"You are not authorized to set Frozen value\\\"))\n\n\tdef validate_balance_must_be_debit_or_credit(self):\n\t\tfrom erpnext.accounts.utils import get_balance_on\n\n\t\tif not self.get(\\\"__islocal\\\") and self.balance_must_be:\n\t\t\taccount_balance = get_balance_on(self.name)\n\n\t\t\tif account_balance > 0 and self.balance_must_be == \\\"Credit\\\":\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Account balance already in Debit, you are not allowed to set 'Balance Must Be' as 'Credit'\\\"\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\telif account_balance < 0 and self.balance_must_be == \\\"Debit\\\":\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Account balance already in Credit, you are not allowed to set 'Balance Must Be' as 'Debit'\\\"\n\t\t\t\t\t)\n\t\t\t\t)\n\n\n\n", "CodeBleu_score": 25.3955121542445}, {"code": "def validate_account_currency(self)\n\tif self.report_type != db_value.report_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set report_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.report_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\t\t\t\tif self.root_type != db_value.root_type:\n\t\t\t\t\tfrappe.db.sql(\n\t\t\t\t\t\t\\\"update `tabAccount` set root_type=%s where lft > %s and rgt < %s\\\",\n\t\t\t\t\t\t(self.root_type, self.lft, self.rgt),\n\t\t\t\t\t)\n\n\t\tif self.root_type and not self.report_type:\n\t\t\tself.report_type = (\n\t\t\t\t\\\"Balance Sheet\\\" if self.root_type in (\\\"Asset\\\", \\\"Liability\\\", \\\"Equity\\\") else \\\"Profit and Loss\\\"\n\t\t\t)\n\n\tdef validate_receivable_payable_account_type(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\t\treceivable_payable_types = [\\\"Receivable\\\", \\\"Payable\\\"]\n\t\tif (\n\t\t\tdoc_before_save\n\t\t\tand doc_before_save.account_type in receivable_payable_types\n\t\t\tand doc_before_save.account_type != self.account_type\n\t\t):\n\t\t\t# check for ledger entries\n\t\t\tif frappe.db.get_all(\\\"GL Entry\\\", filters={\\\"account\\\": self.name, \\\"is_cancelled\\\": 0}, limit=1):\n\t\t\t\tmsg = _(\n\t\t\t\t\t\\\"There are ledger entries against this account. Changing {0} to non-{1} in live system will cause incorrect output in 'Accounts {2}' report\\\"\n\t\t\t\t).format(\n\t\t\t\t\tfrappe.bold(\\\"Account Type\\\"), doc_before_save.account_type, doc_before_save.account_type\n\t\t\t\t)\n\t\t\t\tfrappe.msgprint(msg)\n\t\t\t\tself.add_comment(\\\"Comment\\\", msg)\n\n\tdef validate_root_details(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\n\t\tif doc_before_save and not doc_before_save.parent_account:\n\t\t\tthrow(_(\\\"Root cannot be edited.\\\"), RootNotEditable)\n\n\t\tif not self.parent_account and not self.is_group:\n\t\t\tthrow(_(\\\"The root account {0} must be a group\\\").format(frappe.bold(self.name)))\n\n\tdef validate_root_company_and_sync_account_to_children(self):\n\t\t# ignore validation while creating new compnay or while syncing to child companies\n\t\tif frappe.local.flags.ignore_root_company_validation or self.flags.ignore_root_company_validation:\n\t\t\treturn\n\t\tancestors = get_root_company(self.company)\n\t\tif ancestors:\n\t\t\tif frappe.get_cached_value(\n\t\t\t\t\\\"Company\\\", self.company, \\\"allow_account_creation_against_child_company\\\"\n\t\t\t):\n\t\t\t\treturn\n\t\t\tif not frappe.db.get_value(\n\t\t\t\t\\\"Account\\\", {\\\"account_name\\\": self.account_name, \\\"company\\\": ancestors[0]}, \\\"name\\\"\n\t\t\t):\n\t\t\t\tfrappe.throw(_(\\\"Please add the account to root level Company - {}\\\").format(ancestors[0]))\n\t\telif self.parent_account:\n\t\t\tdescendants = get_descendants_of(\\\"Company\\\", self.company)\n\t\t\tif not descendants:\n\t\t\t\treturn\n\t\t\tparent_acc_name_map = {}\n\t\t\tparent_acc_name, parent_acc_number = frappe.get_cached_value(\n\t\t\t\t\\\"Account\\\", self.parent_account, [\\\"account_name\\\", \\\"account_number\\\"]\n\t\t\t)\n\t\t\tfilters = {\n\t\t\t\t\\\"company\\\": [\\\"in\\\", descendants],\n\t\t\t\t\\\"account_name\\\": parent_acc_name,\n\t\t\t}\n\t\t\tif parent_acc_number:\n\t\t\t\tfilters[\\\"account_number\\\"] = parent_acc_number\n\n\t\t\tfor d in frappe.db.get_values(\n\t\t\t\t\\\"Account\\\", filters=filters, fieldname=[\\\"company\\\", \\\"name\\\"], as_dict=True\n\t\t\t):\n\t\t\t\tparent_acc_name_map[d[\\\"company\\\"]] = d[\\\"name\\\"]\n\n\t\t\tif not parent_acc_name_map:\n\t\t\t\treturn\n\n\t\t\tself.create_account_for_child_company(parent_acc_name_map, descendants, parent_acc_name)\n\n\tdef validate_group_or_ledger(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\t\tif not doc_before_save or cint(doc_before_save.is_group) == cint(self.is_group):\n\t\t\treturn\n\n\t\tif self.check_gle_exists():\n\t\t\tthrow(_(\\\"Account with existing transaction cannot be converted to ledger\\\"))\n\t\telif self.is_group:\n\t\t\tif self.account_type and not self.flags.exclude_account_type_check:\n\t\t\t\tthrow(_(\\\"Cannot covert to Group because Account Type is selected.\\\"))\n\t\telif self.check_if_child_exists():\n\t\t\tthrow(_(\\\"Account with child nodes cannot be set as ledger\\\"))\n\n\tdef validate_frozen_accounts_modifier(self):\n\t\tdoc_before_save = self.get_doc_before_save()\n\t\tif not doc_before_save or doc_before_save.freeze_account == self.freeze_account:\n\t\t\treturn\n\n\t\tfrozen_accounts_modifier = frappe.get_cached_value(\n\t\t\t\\\"Accounts Settings\\\", \\\"Accounts Settings\\\", \\\"frozen_accounts_modifier\\\"\n\t\t)\n\t\tif not frozen_accounts_modifier or frozen_accounts_modifier not in frappe.get_roles():\n\t\t\tthrow(_(\\\"You are not authorized to set Frozen value\\\"))\n\n\tdef validate_balance_must_be_debit_or_credit(self):\n\t\tfrom erpnext.accounts.utils import get_balance_on\n\n\t\tif not self.get(\\\"__islocal\\\") and self.balance_must_be:\n\t\t\taccount_balance = get_balance_on(self.name)\n\n\t\t\tif account_balance > 0 and self.balance_must_be == \\\"Credit\\\":\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Account balance already in Debit, you are not allowed to set 'Balance Must Be' as 'Credit'\\\"\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\telif account_balance < 0 and self.balance_must_be == \\\"Debit\\\":\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Account balance already in Credit, you are not allowed to set 'Balance Must Be' as 'Debit'\\\"\n\t\t\t\t\t)\n\t\t\t\t)\n\n\n\n", "CodeBleu_score": 25.3955121542445}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\tmerged_entries = {}\n    for entry in entries:\n        key = generate_key(entry, accounting_dimensions)\n        if key in merged_entries:\n            merged_entries[key][\"debit\"] += entry.debit\n            merged_entries[key][\"credit\"] += entry.credit\n            merged_entries[key][\"debit_in_account_currency\"] += entry.debit_in_account_currency\n            merged_entries[key][\"credit_in_account_currency\"] += entry.credit_in_account_currency\n        else:\n            merged_entries[key] = {\n                \"account\": entry.account,\n                \"debit\": entry.debit,\n                \"credit\": entry.credit,\n                \"debit_in_account_currency\": entry.debit_in_account_currency,\n                \"credit_in_account_currency\": entry.credit_in_account_currency,\n                \"account_currency\": entry.account_currency,\n                \"dimensions\": entry.dimensions,\n            }\n    return merged_entries\n\n", "CodeBleu_score": 36.36330857615106}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\tmerged_entries = {}\n    for entry in entries:\n        key = generate_key(entry, accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"account\": entry.account,\n                \"account_currency\": entry.account_currency,\n                \"closing_date\": entry.closing_date,\n                \"company\": entry.company,\n                \"cost_center\": entry.cost_center,\n                \"debit\": 0.0,\n                \"debit_in_account_currency\": 0.0,\n                \"credit\": 0.0,\n                \"credit_in_account_currency\": 0.0,\n                \"finance_book\": entry.finance_book,\n                \"is_period_closing_voucher_entry\": entry.is_period_closing_voucher_entry,\n                \"period_closing_voucher\": entry.period_closing_voucher,\n                \"project\": entry.project,\n                \"dimensions\": entry.dimensions,\n            }\n        merged_entries[key][\"debit\"] += entry.debit\n        merged_entries[key][\"debit_in_account_currency\"] += entry.debit_in_account_currency\n        merged_entries[key][\"credit\"] += entry.credit\n        merged_entries[key][\"credit_in_account_currency\"] += entry.credit_in_account_currency\n    return merged_entries\n\n", "CodeBleu_score": 33.297385394712386}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\tmerged_entries = {}\n    for entry in entries:\n        key = get_key(entry, accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"account\": entry.account,\n                \"account_currency\": entry.account_currency,\n                \"closing_date\": entry.closing_date,\n                \"company\": entry.company,\n                \"cost_center\": entry.cost_center,\n                \"credit\": 0,\n                \"credit_in_account_currency\": 0,\n                \"debit\": 0,\n                \"debit_in_account_currency\": 0,\n                \"finance_book\": entry.finance_book,\n                \"is_period_closing_voucher_entry\": entry.is_period_closing_voucher_entry,\n                \"period_closing_voucher\": entry.period_closing_voucher,\n                \"project\": entry.project,\n                \"dimensions\": entry.dimensions,\n            }\n        if entry.debit:\n            merged_entries[key][\"debit\"] += entry.debit\n            merged_entries[key][\"debit_in_account_currency\"] += entry.debit_in_account_currency\n        if entry.credit:\n            merged_entries[key][\"credit\"] += entry.credit\n            merged_entries[key][\"credit_in_account_currency\"] += entry.credit_in_account_currency\n    return merged_entries\n\n", "CodeBleu_score": 35.05326973840265}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\tif self.doctype == \"Payment Entry\":\n        if not self.payment_type == \"Receive\":\n            return\n\n        if self.party_type == \"Supplier\":\n            supplier_details = frappe.db.get_value(\"Supplier\", self.party, [\"name\", \"hold_type\", \"hold_type_date\"])\n            if supplier_details:\n                supplier_name, hold_type, hold_type_date = supplier_details\n                if supplier_name and hold_type and hold_type_date:\n                    if hold_type == \"On Hold\":\n                        if hold_type_date > today():\n                            frappe.throw(_(\"Supplier {0} is on hold. Please contact the supplier to proceed with the transaction.\").format(supplier_name), title=_(\"Supplier On Hold\"))\n\n                    elif hold_type == \"Blocked\":\n                        frappe.throw(_(\"Supplier {0} is blocked. Please contact the supplier to proceed with the transaction.\").format(supplier_name), title=_(\"Supplier Blocked\"))\n\n", "CodeBleu_score": 30.677091630668823}, {"code": "def ensure_supplier_is_not_blocked(self)\n\tif self.doctype in (\"Supplier Payment\", \"Purchase Invoice\"):\n        supplier = frappe.get_value(\n            \"Purchase Invoice\", self.name, \"supplier\"\n        )\n    else:\n        supplier = frappe.get_value(\"Supplier Payment\", self.name, \"supplier\")\n\n    if supplier:\n        supplier_block = frappe.get_value(\n            \"Supplier\", supplier, \"is_blocked\"\n        )\n        supplier_block_type = frappe.get_value(\n            \"Supplier\", supplier, \"block_type\"\n        )\n        if supplier_block and supplier_block_type == self.doctype:\n            release_date = frappe.get_value(\n                \"Supplier\", supplier, \"release_date\"\n            )\n            if release_date:\n                if getdate(release_date) > getdate(nowdate()):\n                    frappe.throw(\n                        _(\n                            \"Supplier {0} is on hold. Please contact the supplier to release them.\".format(\n                                supplier\n                            )\n                        )\n                    )\n            else:\n                frappe.throw(\n                    _(\n                        \"Supplier {0} is on hold. Please contact the supplier to release them.\".format(\n                            supplier\n                        )\n                    )\n                )\n\n", "CodeBleu_score": 27.478521927926934}, {"code": "def ensure_supplier_is_not_blocked(self)\n\tif self.doctype in (\"Supplier Payment\", \"Purchase Invoice\"):\n        supplier_name = self.supplier\n        supplier_doc = frappe.get_doc(\"Supplier\", supplier_name)\n        if supplier_doc.hold_type == \"Supplier\":\n            if supplier_doc.hold_type == \"Supplier\" and supplier_doc.hold_date:\n                if supplier_doc.hold_date > today():\n                    frappe.throw(\n                        _(\n                            \"Supplier {0} is on hold. Please contact the Supplier to release the hold.\".format(\n                                supplier_name\n                            )\n                        )\n                    )\n\n", "CodeBleu_score": 26.953948568279056}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t()\n\n\t\tself.disable_pricing_rule_on_internal_transfer()\n\t\tself.disable_tax_included_prices_for_internal_transfer()\n\t\tself.set_incoming_rate()\n\t\tself.init_internal_values()\n\n\t\tif self.meta.get_field(\\\"currency\\\"):\n\t\t\tself.calculate_taxes_and_totals()\n\n\t\t\tif not self.meta.get_field(\\\"is_return\\\") or not self.is_return:\n\t\t\t\tself.validate_value(\\\"base_grand_total\\\", \\\">=\\\", 0)\n\n\t\t\tvalidate_return(self)\n\n\t\tself.validate_all_documents_schedule()\n\n\t\tif self.meta.get_field(\\\"taxes_and_charges\\\"):\n\t\t\tself.validate_enabled_taxes_and_charges()\n\t\t\tself.validate_tax_account_company()\n\n\t\tself.validate_party()\n\t\tself.validate_currency()\n\t\tself.validate_party_account_currency()\n\t\tself.validate_return_against_account()\n\n\t\tif self.doctype in [\\\"Purchase Invoice\\\", \\\"Sales Invoice\\\"]:\n\t\t\tif invalid_advances := [x for x in self.advances if not x.reference_type or not x.reference_name]:\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Rows: {0} in {1} section are Invalid. Reference Name should point to a valid Payment Entry or Journal Entry.\\\"\n\t\t\t\t\t).format(\n\t\t\t\t\t\tfrappe.bold(comma_and([x.idx for x in invalid_advances])),\n\t\t\t\t\t\tfrappe.bold(_(\\\"Advance Payments\\\")),\n\t\t\t\t\t)\n\t\t\t\t)\n\n\t\t\tif self.get(\\\"is_return\\\") and self.get(\\\"return_against\\\") and not self.get(\\\"is_pos\\\"):\n\t\t\t\tif self.get(\\\"update_outstanding_for_self\\\"):\n\t\t\t\t\tdocument_type = \\\"Credit Note\\\" if self.doctype == \\\"Sales Invoice\\\" else \\\"Debit Note\\\"\n\t\t\t\t\tfrappe.msgprint(\n\t\t\t\t\t\t_(\n\t\t\t\t\t\t\t\\\"We can see {0} is made against {1}. If you want {1}'s outstanding to be updated, uncheck '{2}' checkbox. <br><br> Or you can use {3} tool to reconcile against {1} later.\\\"\n\t\t\t\t\t\t).format(\n\t\t\t\t\t\t\tfrappe.bold(document_type),\n\t\t\t\t\t\t\tget_link_to_form(self.doctype, self.get(\\\"return_against\\\")),\n\t\t\t\t\t\t\tfrappe.bold(\\\"Update Outstanding for Self\\\"),\n\t\t\t\t\t\t\tget_link_to_form(\\\"Payment Reconciliation\\\"),\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\n\t\t\tpos_check_field = \\\"is_pos\\\" if self.doctype == \\\"Sales Invoice\\\" else \\\"is_paid\\\"\n\t\t\tif cint(self.allocate_advances_automatically) and not cint(self.get(pos_check_field)):\n\t\t\t\tself.set_advances()\n\n\t\t\tself.set_advance_gain_or_loss()\n\n\t\t\tif self.is_return:\n\t\t\t\tself.validate_qty()\n\t\t\telse:\n\t\t\t\tself.validate_deferred_start_and_end_date()\n\n\t\t\tself.validate_deferred_income_expense_account()\n\t\t\tself.set_inter_company_account()\n\n\t\tif self.doctype == \\\"Purchase Invoice\\\":\n\t\t\tself.calculate_paid_amount()\n\t\t\t# apply tax withholding only if checked and applicable\n\t\t\tself.set_tax_withholding()\n\n\t\twith temporary_flag(\\\"company\\\", self.company):\n\t\t\tvalidate_regional(self)\n\t\t\tvalidate_einvoice_fields(self)\n\n\t\tif self.doctype != \\\"Material Request\\\" and not self.ignore_pricing_rule:\n\t\t\tapply_pricing_rule_on_transaction(self)\n\n\t\tself.set_total_in_words()\n\t\tself.set_default_letter_head()\n\n\tdef set_default_letter_head(self):\n\t\tif hasattr(self, \\\"letter_head\\\") and not self.letter_head:\n\t\t\tself.letter_head = frappe.db.get_value(\\\"Company\\\", self.company, \\\"default_letter_head\\\")\n\n\tdef init_internal_values(self):\n\t\t# init all the internal values as 0 on sa\n\t\tif self.docstatus.is_draft():\n\t\t\t# TODO: Add all such pending values here\n\t\t\tfields = [\\\"billed_amt\\\", \\\"delivered_qty\\\"]\n\t\t\tfor item in self.get(\\\"items\\\"):\n\t\t\t\tfor field in fields:\n\t\t\t\t\tif hasattr(item, field):\n\t\t\t\t\t\titem.set(field, 0)\n\n\tdef before_cancel(self):\n\t\tvalidate_einvoice_fields(self)\n\n\tdef _remove_references_in_unreconcile(self):\n\t\tupe = frappe.qb.DocType(\\\"Unreconcile Payment Entries\\\")\n\t\trows = (\n\t\t\tfrappe.qb.from_(upe)\n\t\t\t.select(upe.name, upe.parent)\n\t\t\t.where((upe.reference_doctype == self.doctype) & (upe.reference_name == self.name))\n\t\t\t.run(as_dict=True)\n\t\t)\n\n\t\tif rows:\n\t\t\treferences_map = frappe._dict()\n\t\t\tfor x in rows:\n\t\t\t\treferences_map.setdefault(x.parent, []).append(x.name)\n\n\t\t\tfor doc, rows in references_map.items():\n\t\t\t\tunreconcile_doc = frappe.get_doc(\\\"Unreconcile Payment\\\", doc)\n\t\t\t\tfor row in rows:\n\t\t\t\t\tunreconcile_doc.remove(unreconcile_doc.get(\\\"allocations\\\", {\\\"name\\\": row})[0])\n\n\t\t\t\tunreconcile_doc.flags.ignore_validate_update_after_submit = True\n\t\t\t\tunreconcile_doc.flags.ignore_links = True\n\t\t\t\tunreconcile_doc.save(ignore_permissions=True)\n\n\t\t# delete docs upon parent doc deletion\n\t\tunreconcile_docs = frappe.db.get_all(\\\"Unreconcile Payment\\\", filters={\\\"voucher_no\\\": self.name})\n\t\tfor x in unreconcile_docs:\n\t\t\t_doc = frappe.get_doc(\\\"Unreconcile Payment\\\", x.name)\n\t\t\tif _doc.docstatus == 1:\n\t\t\t\t_doc.cancel()\n\t\t\t_doc.delete()\n\n\n\n", "CodeBleu_score": 33.153930946292355}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t()\n\n\t\tself.disable_pricing_rule_on_internal_transfer()\n\t\tself.disable_tax_included_prices_for_internal_transfer()\n\t\tself.set_incoming_rate()\n\t\tself.init_internal_values()\n\n\t\tif self.meta.get_field(\\\"currency\\\"):\n\t\t\tself.calculate_taxes_and_totals()\n\n\t\t\tif not self.meta.get_field(\\\"is_return\\\") or not self.is_return:\n\t\t\t\tself.validate_value(\\\"base_grand_total\\\", \\\">=\\\", 0)\n\n\t\t\tvalidate_return(self)\n\n\t\tself.validate_all_documents_schedule()\n\n\t\tif self.meta.get_field(\\\"taxes_and_charges\\\"):\n\t\t\tself.validate_enabled_taxes_and_charges()\n\t\t\tself.validate_tax_account_company()\n\n\t\tself.validate_party()\n\t\tself.validate_currency()\n\t\tself.validate_party_account_currency()\n\t\tself.validate_return_against_account()\n\n\t\tif self.doctype in [\\\"Purchase Invoice\\\", \\\"Sales Invoice\\\"]:\n\t\t\tif invalid_advances := [x for x in self.advances if not x.reference_type or not x.reference_name]:\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Rows: {0} in {1} section are Invalid. Reference Name should point to a valid Payment Entry or Journal Entry.\\\"\n\t\t\t\t\t).format(\n\t\t\t\t\t\tfrappe.bold(comma_and([x.idx for x in invalid_advances])),\n\t\t\t\t\t\tfrappe.bold(_(\\\"Advance Payments\\\")),\n\t\t\t\t\t)\n\t\t\t\t)\n\n\t\t\tif self.get(\\\"is_return\\\") and self.get(\\\"return_against\\\") and not self.get(\\\"is_pos\\\"):\n\t\t\t\tif self.get(\\\"update_outstanding_for_self\\\"):\n\t\t\t\t\tdocument_type = \\\"Credit Note\\\" if self.doctype == \\\"Sales Invoice\\\" else \\\"Debit Note\\\"\n\t\t\t\t\tfrappe.msgprint(\n\t\t\t\t\t\t_(\n\t\t\t\t\t\t\t\\\"We can see {0} is made against {1}. If you want {1}'s outstanding to be updated, uncheck '{2}' checkbox. <br><br> Or you can use {3} tool to reconcile against {1} later.\\\"\n\t\t\t\t\t\t).format(\n\t\t\t\t\t\t\tfrappe.bold(document_type),\n\t\t\t\t\t\t\tget_link_to_form(self.doctype, self.get(\\\"return_against\\\")),\n\t\t\t\t\t\t\tfrappe.bold(\\\"Update Outstanding for Self\\\"),\n\t\t\t\t\t\t\tget_link_to_form(\\\"Payment Reconciliation\\\"),\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\n\t\t\tpos_check_field = \\\"is_pos\\\" if self.doctype == \\\"Sales Invoice\\\" else \\\"is_paid\\\"\n\t\t\tif cint(self.allocate_advances_automatically) and not cint(self.get(pos_check_field)):\n\t\t\t\tself.set_advances()\n\n\t\t\tself.set_advance_gain_or_loss()\n\n\t\t\tif self.is_return:\n\t\t\t\tself.validate_qty()\n\t\t\telse:\n\t\t\t\tself.validate_deferred_start_and_end_date()\n\n\t\t\tself.validate_deferred_income_expense_account()\n\t\t\tself.set_inter_company_account()\n\n\t\tif self.doctype == \\\"Purchase Invoice\\\":\n\t\t\tself.calculate_paid_amount()\n\t\t\t# apply tax withholding only if checked and applicable\n\t\t\tself.set_tax_withholding()\n\n\t\twith temporary_flag(\\\"company\\\", self.company):\n\t\t\tvalidate_regional(self)\n\t\t\tvalidate_einvoice_fields(self)\n\n\t\tif self.doctype != \\\"Material Request\\\" and not self.ignore_pricing_rule:\n\t\t\tapply_pricing_rule_on_transaction(self)\n\n\t\tself.set_total_in_words()\n\t\tself.set_default_letter_head()\n\n\tdef set_default_letter_head(self):\n\t\tif hasattr(self, \\\"letter_head\\\") and not self.letter_head:\n\t\t\tself.letter_head = frappe.db.get_value(\\\"Company\\\", self.company, \\\"default_letter_head\\\")\n\n\tdef init_internal_values(self):\n\t\t# init all the internal values as 0 on sa\n\t\tif self.docstatus.is_draft():\n\t\t\t# TODO: Add all such pending values here\n\t\t\tfields = [\\\"billed_amt\\\", \\\"delivered_qty\\\"]\n\t\t\tfor item in self.get(\\\"items\\\"):\n\t\t\t\tfor field in fields:\n\t\t\t\t\tif hasattr(item, field):\n\t\t\t\t\t\titem.set(field, 0)\n\n\tdef before_cancel(self):\n\t\tvalidate_einvoice_fields(self)\n\n\tdef _remove_references_in_unreconcile(self):\n\t\tupe = frappe.qb.DocType(\\\"Unreconcile Payment Entries\\\")\n\t\trows = (\n\t\t\tfrappe.qb.from_(upe)\n\t\t\t.select(upe.name, upe.parent)\n\t\t\t.where((upe.reference_doctype == self.doctype) & (upe.reference_name == self.name))\n\t\t\t.run(as_dict=True)\n\t\t)\n\n\t\tif rows:\n\t\t\treferences_map = frappe._dict()\n\t\t\tfor x in rows:\n\t\t\t\treferences_map.setdefault(x.parent, []).append(x.name)\n\n\t\t\tfor doc, rows in references_map.items():\n\t\t\t\tunreconcile_doc = frappe.get_doc(\\\"Unreconcile Payment\\\", doc)\n\t\t\t\tfor row in rows:\n\t\t\t\t\tunreconcile_doc.remove(unreconcile_doc.get(\\\"allocations\\\", {\\\"name\\\": row})[0])\n\n\t\t\t\tunreconcile_doc.flags.ignore_validate_update_after_submit = True\n\t\t\t\tunreconcile_doc.flags.ignore_links = True\n\t\t\t\tunreconcile_doc.save(ignore_permissions=True)\n\n\t\t# delete docs upon parent doc deletion\n\t\tunreconcile_docs = frappe.db.get_all(\\\"Unreconcile Payment\\\", filters={\\\"voucher_no\\\": self.name})\n\t\tfor x in unreconcile_docs:\n\t\t\t_doc = frappe.get_doc(\\\"Unreconcile Payment\\\", x.name)\n\t\t\tif _doc.docstatus == 1:\n\t\t\t\t_doc.cancel()\n\t\t\t_doc.delete()\n\n\n\n", "CodeBleu_score": 33.153930946292355}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t()\n\n\t\tself.disable_pricing_rule_on_internal_transfer()\n\t\tself.disable_tax_included_prices_for_internal_transfer()\n\t\tself.set_incoming_rate()\n\t\tself.init_internal_values()\n\n\t\tif self.meta.get_field(\\\"currency\\\"):\n\t\t\tself.calculate_taxes_and_totals()\n\n\t\t\tif not self.meta.get_field(\\\"is_return\\\") or not self.is_return:\n\t\t\t\tself.validate_value(\\\"base_grand_total\\\", \\\">=\\\", 0)\n\n\t\t\tvalidate_return(self)\n\n\t\tself.validate_all_documents_schedule()\n\n\t\tif self.meta.get_field(\\\"taxes_and_charges\\\"):\n\t\t\tself.validate_enabled_taxes_and_charges()\n\t\t\tself.validate_tax_account_company()\n\n\t\tself.validate_party()\n\t\tself.validate_currency()\n\t\tself.validate_party_account_currency()\n\t\tself.validate_return_against_account()\n\n\t\tif self.doctype in [\\\"Purchase Invoice\\\", \\\"Sales Invoice\\\"]:\n\t\t\tif invalid_advances := [x for x in self.advances if not x.reference_type or not x.reference_name]:\n\t\t\t\tfrappe.throw(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Rows: {0} in {1} section are Invalid. Reference Name should point to a valid Payment Entry or Journal Entry.\\\"\n\t\t\t\t\t).format(\n\t\t\t\t\t\tfrappe.bold(comma_and([x.idx for x in invalid_advances])),\n\t\t\t\t\t\tfrappe.bold(_(\\\"Advance Payments\\\")),\n\t\t\t\t\t)\n\t\t\t\t)\n\n\t\t\tif self.get(\\\"is_return\\\") and self.get(\\\"return_against\\\") and not self.get(\\\"is_pos\\\"):\n\t\t\t\tif self.get(\\\"update_outstanding_for_self\\\"):\n\t\t\t\t\tdocument_type = \\\"Credit Note\\\" if self.doctype == \\\"Sales Invoice\\\" else \\\"Debit Note\\\"\n\t\t\t\t\tfrappe.msgprint(\n\t\t\t\t\t\t_(\n\t\t\t\t\t\t\t\\\"We can see {0} is made against {1}. If you want {1}'s outstanding to be updated, uncheck '{2}' checkbox. <br><br> Or you can use {3} tool to reconcile against {1} later.\\\"\n\t\t\t\t\t\t).format(\n\t\t\t\t\t\t\tfrappe.bold(document_type),\n\t\t\t\t\t\t\tget_link_to_form(self.doctype, self.get(\\\"return_against\\\")),\n\t\t\t\t\t\t\tfrappe.bold(\\\"Update Outstanding for Self\\\"),\n\t\t\t\t\t\t\tget_link_to_form(\\\"Payment Reconciliation\\\"),\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\n\t\t\tpos_check_field = \\\"is_pos\\\" if self.doctype == \\\"Sales Invoice\\\" else \\\"is_paid\\\"\n\t\t\tif cint(self.allocate_advances_automatically) and not cint(self.get(pos_check_field)):\n\t\t\t\tself.set_advances()\n\n\t\t\tself.set_advance_gain_or_loss()\n\n\t\t\tif self.is_return:\n\t\t\t\tself.validate_qty()\n\t\t\telse:\n\t\t\t\tself.validate_deferred_start_and_end_date()\n\n\t\t\tself.validate_deferred_income_expense_account()\n\t\t\tself.set_inter_company_account()\n\n\t\tif self.doctype == \\\"Purchase Invoice\\\":\n\t\t\tself.calculate_paid_amount()\n\t\t\t# apply tax withholding only if checked and applicable\n\t\t\tself.set_tax_withholding()\n\n\t\twith temporary_flag(\\\"company\\\", self.company):\n\t\t\tvalidate_regional(self)\n\t\t\tvalidate_einvoice_fields(self)\n\n\t\tif self.doctype != \\\"Material Request\\\" and not self.ignore_pricing_rule:\n\t\t\tapply_pricing_rule_on_transaction(self)\n\n\t\tself.set_total_in_words()\n\t\tself.set_default_letter_head()\n\n\tdef set_default_letter_head(self):\n\t\tif hasattr(self, \\\"letter_head\\\") and not self.letter_head:\n\t\t\tself.letter_head = frappe.db.get_value(\\\"Company\\\", self.company, \\\"default_letter_head\\\")\n\n\tdef init_internal_values(self):\n\t\t# init all the internal values as 0 on sa\n\t\tif self.docstatus.is_draft():\n\t\t\t# TODO: Add all such pending values here\n\t\t\tfields = [\\\"billed_amt\\\", \\\"delivered_qty\\\"]\n\t\t\tfor item in self.get(\\\"items\\\"):\n\t\t\t\tfor field in fields:\n\t\t\t\t\tif hasattr(item, field):\n\t\t\t\t\t\titem.set(field, 0)\n\n\tdef before_cancel(self):\n\t\tvalidate_einvoice_fields(self)\n\n\tdef _remove_references_in_unreconcile(self):\n\t\tupe = frappe.qb.DocType(\\\"Unreconcile Payment Entries\\\")\n\t\trows = (\n\t\t\tfrappe.qb.from_(upe)\n\t\t\t.select(upe.name, upe.parent)\n\t\t\t.where((upe.reference_doctype == self.doctype) & (upe.reference_name == self.name))\n\t\t\t.run(as_dict=True)\n\t\t)\n\n\t\tif rows:\n\t\t\treferences_map = frappe._dict()\n\t\t\tfor x in rows:\n\t\t\t\treferences_map.setdefault(x.parent, []).append(x.name)\n\n\t\t\tfor doc, rows in references_map.items():\n\t\t\t\tunreconcile_doc = frappe.get_doc(\\\"Unreconcile Payment\\\", doc)\n\t\t\t\tfor row in rows:\n\t\t\t\t\tunreconcile_doc.remove(unreconcile_doc.get(\\\"allocations\\\", {\\\"name\\\": row})[0])\n\n\t\t\t\tunreconcile_doc.flags.ignore_validate_update_after_submit = True\n\t\t\t\tunreconcile_doc.flags.ignore_links = True\n\t\t\t\tunreconcile_doc.save(ignore_permissions=True)\n\n\t\t# delete docs upon parent doc deletion\n\t\tunreconcile_docs = frappe.db.get_all(\\\"Unreconcile Payment\\\", filters={\\\"voucher_no\\\": self.name})\n\t\tfor x in unreconcile_docs:\n\t\t\t_doc = frappe.get_doc(\\\"Unreconcile Payment\\\", x.name)\n\t\t\tif _doc.docstatus == 1:\n\t\t\t\t_doc.cancel()\n\t\t\t_doc.delete()\n\n\n\n", "CodeBleu_score": 33.153930946292355}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t# Authenticate the client\n    self.auth()\n\n    # Construct the query parameters\n    params = {\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n        \"options\": {\n            \"count\": 200,\n            \"offset\": 0,\n        },\n    }\n\n    # If an account ID is specified, add it to the query parameters\n    if account_id is not None:\n        params[\"account_ids\"] = account_id\n\n    # Fetch the transactions\n    transactions = []\n    while True:\n        try:\n            response = self.client.Transactions.get(self.access_token, **params)\n        except APIError as e:\n            if e.code == \"INVALID_ACCOUNT_ID\":\n                frappe.log_error(\"Plaid: Invalid account ID\")\n                frappe.throw(_(\"Please check your Plaid account ID values\"))\n            elif e.code == \"INVALID_DATE_RANGE\":\n                frappe.log_error(\"Plaid: Invalid date range\")\n                frappe.throw(_(\"Please check your Plaid start and end date values\"))\n            elif e.code == \"INVALID_OPTIONS\":\n                frappe.log_error(\"Plaid: Invalid options\")\n                frappe.throw(_(\"Please check your Plaid options values\"))\n            elif e.code == \"INVALID_ACCESS_TOKEN\":\n                frappe.log_error(\"Plaid: Invalid access token\")\n                frappe.throw(_(\"Please check your Plaid access token values\"))\n            elif e.code == \"PLANNED_MAINTENANCE\":\n                frappe.log_error(\"Plaid: Planned maintenance\")\n                frappe.throw(_(\"Plaid is undergoing planned maintenance\"))\n            elif e.code == \"ITEM_LOGIN_REQUIRED\":\n                frappe.log_error(\"Plaid: Item login required\")\n                frappe.throw(_(\"Please log in to your Plaid account\"))\n            elif e.code == \"INVALID_REQUEST\":\n                frappe.log_error(\"Plaid: Invalid request\")\n                frappe.throw", "CodeBleu_score": 22.810063188885955}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t# TODO: Add pagination\n    # TODO: Add support for multiple accounts\n    # TODO: Add support for multiple accounts with different currencies\n    # TODO: Add support for multiple accounts with different currencies and different account IDs\n    # TODO: Add support for multiple accounts with different currencies and different account IDs and different start and end dates\n    # TODO: Add support for multiple accounts with different currencies and different account IDs and different start and end dates and different access tokens\n    # TODO: Add support for multiple accounts with different currencies and different account IDs and different start and end dates and different access tokens and different products\n    # TODO: Add support for multiple accounts with different currencies and different account IDs and different start and end dates and different access tokens and different products and different webhooks\n    # TODO: Add support for multiple accounts with different currencies and different account IDs and different start and end dates and different access tokens and different products and different webhooks and different options\n    # TODO: Add support for multiple accounts with different currencies and different account IDs and different start and end dates and different access tokens and different products and different webhooks and different options and different account_ids\n    # TODO: Add support for multiple accounts with different currencies and different account IDs and different start and end dates and different access tokens and different products and different webhooks and different options and different account_ids and different start and end dates\n    # TODO: Add support for multiple accounts with different currencies and different account IDs and different start and end dates and different access tokens and different products and different webhooks and different options and different account_ids and different start and end dates and different account_ids\n    # TODO: Add support for multiple accounts with different currencies and different account IDs and different start and end dates and different access tokens and different products and different webhooks and different options and different account_ids and different start and end dates and different account_ids and different start and end dates\n    # TODO: Add support for multiple accounts with different currencies and different account IDs and different start and end dates and different access tokens and different products and different webhooks and different options and different account_ids and different start and end dates and different account_ids and different start and end dates and different access tokens\n    # TODO: Add support for multiple accounts with different currencies and different account IDs and different start and end dates and different access tokens and", "CodeBleu_score": 2.4768518518518516}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t# Authenticate the client\n    self.auth()\n\n    # Construct the query parameters\n    params = {\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n        \"options\": {\n            \"count\": 200,\n            \"offset\": 0,\n            \"account_ids\": [account_id] if account_id else None,\n        },\n    }\n\n    # Fetch transactions\n    transactions = []\n    while True:\n        try:\n            response = self.client.Transactions.get(self.access_token, params)\n        except APIError as e:\n            frappe.log_error(\"Plaid: API error\")\n            frappe.throw(_(str(e)), title=_(\"API Error\"))\n        except InvalidRequestError as e:\n            frappe.log_error(\"Plaid: Invalid request error\")\n            frappe.throw(_(str(e)), title=_(\"Invalid Request\"))\n        except ItemError as e:\n            frappe.log_error(\"Plaid: Item error\")\n            frappe.throw(_(str(e)), title=_(\"Item Error\"))\n        except requests.Timeout:\n            frappe.log_error(\"Plaid: Timeout error\")\n            frappe.throw(_(\"Timeout error\"), title=_(\"Timeout\"))\n        except Exception as e:\n            frappe.log_error(\"Plaid: Unknown error\")\n            frappe.throw(_(str(e)), title=_(\"Unknown Error\"))\n\n        # Check if there are more transactions to fetch\n        if len(response[\"transactions\"]) == 0:\n            break\n\n        # Add the transactions to the list\n        transactions += response[\"transactions\"]\n\n        # Update the offset and continue fetching\n        params[\"options\"][\"offset\"] += 200\n\n    return transactions\n\n", "CodeBleu_score": 29.317352685347352}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t# begin: auto-generated types\n    # This code is auto-generated. Do not modify anything in this block.\n\n    from typing import TYPE_CHECKING\n\n    if TYPE_CHECKING:\n        from frappe.types import DF\n\n        automatic_sync: DF.Check\n        enable_european_access: DF.Check\n        enabled: DF.Check\n        plaid_client_id: DF.Data | None\n        plaid_env: DF.Literal[\"sandbox\", \"development\", \"production\"]\n        plaid_secret: DF.Password | None\n    # end: auto-generated types\n\n    plaid = PlaidConnector()\n    plaid.set_access_token(token)\n    try:\n        plaid_response = plaid.get_institution(response)\n    except ItemError as e:\n        frappe.log_error(e)\n        frappe.throw(_(\"Could not retrieve institution information\"))\n\n    if frappe.db.exists(\"Bank\", plaid_response.get(\"institution_id\")):\n        bank = frappe.get_doc(\"Bank\", plaid_response.get(\"institution_id\"))\n        bank.access_token = plaid_response.get(\"access_token\")\n        bank.save()\n    else:\n        bank = frappe.new_doc(\"Bank\")\n        bank.institution = plaid_response.get(\"institution_id\")\n        bank.institution_name = plaid_response.get(\"name\")\n        bank.access_token = plaid_response.get(\"access_token\")\n        bank.save()\n\n    frappe.db.commit()\n\n", "CodeBleu_score": 36.37981633501145}, {"code": "def add_institution(token, response)\n\ttry:\n        # Parse the response\n        institution = json.loads(response)\n        # Get the access token using the PlaidConnector\n        plaid = PlaidConnector()\n        access_token = plaid.get_access_token(token)\n        # Check if the bank already exists in the database\n        bank_exists = frappe.db.exists(\n            \"Bank\", {\"institution_id\": institution[\"institution_id\"]}\n        )\n        # If the bank does not exist, create and insert a new bank record\n        if not bank_exists:\n            new_bank = frappe.get_doc(\n                {\n                    \"doctype\": \"Bank\",\n                    \"institution_id\": institution[\"institution_id\"],\n                    \"institution_name\": institution[\"name\"],\n                    \"access_token\": access_token,\n                    \"enabled\": 1,\n                }\n            )\n            new_bank.insert()\n            frappe.msgprint(\n                _(\"Bank {0} has been added\").format(institution[\"name\"]),\n                alert=True,\n                indicator=\"green\",\n            )\n        # If the bank exists, update the access token for the existing bank record and save it\n        else:\n            existing_bank = frappe.get_doc(\"Bank\", {\"institution_id\": institution[\"institution_id\"]})\n            existing_bank.access_token = access_token\n            existing_bank.save()\n            frappe.msgprint(\n                _(\"Bank {0} has been updated\").format(institution[\"name\"]),\n                alert=True,\n                indicator=\"green\",\n            )\n    except ItemError as e:\n        frappe.msgprint(\n            _(\"The bank could not be added. Please try again. If the error persists, contact the administrator.\"),\n            alert=True,\n            indicator=\"red\",\n        )\n        frappe.log_error(e)\n\n", "CodeBleu_score": 45.29469051427723}, {"code": "def add_institution(token, response)\n\ttry:\n        # Parse the response and retrieve the institution ID and name\n        institution_id = response[\"institution_id\"]\n        institution_name = response[\"institution_name\"]\n\n        # Create a new PlaidConnector object and retrieve an access token\n        plaid = PlaidConnector()\n        access_token = plaid.get_access_token(token)\n\n        # Check if the bank already exists in the database\n        bank = frappe.get_all(\"Bank\", filters={\"institution_id\": institution_id})\n\n        if len(bank) == 0:\n            # If the bank does not exist, create a new bank record and insert it\n            bank = frappe.new_doc(\"Bank\")\n            bank.institution_id = institution_id\n            bank.institution_name = institution_name\n            bank.access_token = access_token\n            bank.save()\n            frappe.msgprint(\n                _(\"Bank {0} has been added successfully.\").format(institution_name),\n                alert=True,\n            )\n        else:\n            # If the bank exists, update the access token for the existing bank record and save it\n            bank = frappe.get_doc(\"Bank\", bank[0].name)\n            bank.access_token = access_token\n            bank.save()\n            frappe.msgprint(\n                _(\"Bank {0} has been updated successfully.\").format(institution_name),\n                alert=True,\n            )\n    except Exception as e:\n        frappe.log_error(e)\n        frappe.msgprint(\n            _(\"Unable to add bank. Please try again.\"),\n            alert=True,\n            indicator=\"red\",\n        )\n\n", "CodeBleu_score": 43.38713509207348}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\tef get_plaid_configuration():\n\tif frappe.db.get_single_value(\\\"Plaid Settings\\\", \\\"enabled\\\"):\n\t\tplaid_settings = frappe.get_single(\\\"Plaid Settings\\\")\n\t\treturn {\n\t\t\t\\\"plaid_env\\\": plaid_settings.plaid_env,\n\t\t\t\\\"link_token\\\": plaid_settings.get_link_token(),\n\t\t\t\\\"client_name\\\": frappe.local.site,\n\t\t}\n\n\treturn \\\"disabled\\\"\n\n", "CodeBleu_score": 8.429361512129377}, {"code": "def sync_transactions(bank, bank_account)\n\tef get_plaid_configuration():\n\tif frappe.db.get_single_value(\\\"Plaid Settings\\\", \\\"enabled\\\"):\n\t\tplaid_settings = frappe.get_single(\\\"Plaid Settings\\\")\n\t\treturn {\n\t\t\t\\\"plaid_env\\\": plaid_settings.plaid_env,\n\t\t\t\\\"link_token\\\": plaid_settings.get_link_token(),\n\t\t\t\\\"client_name\\\": frappe.local.site,\n\t\t}\n\n\treturn \\\"disabled\\\"\n\n", "CodeBleu_score": 8.429361512129377}, {"code": "def sync_transactions(bank, bank_account)\n\tef get_plaid_configuration():\n\tif frappe.db.get_single_value(\\\"Plaid Settings\\\", \\\"enabled\\\"):\n\t\tplaid_settings = frappe.get_single(\\\"Plaid Settings\\\")\n\t\treturn {\n\t\t\t\\\"plaid_env\\\": plaid_settings.plaid_env,\n\t\t\t\\\"link_token\\\": plaid_settings.get_link_token(),\n\t\t\t\\\"client_name\\\": frappe.local.site,\n\t\t}\n\n\treturn \\\"disabled\\\"\n\n", "CodeBleu_score": 8.429361512129377}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\tMigrator\\\", \\\"_migrate\\\", queue=\\\"long\\\")\n\n\tdef _migrate(self):\n\t\ttry:\n\t\t\tself.set_indicator(\\\"In Progress\\\")\n\t\t\t# Add quickbooks_id field to every document so that we can lookup by Id reference\n\t\t\t# provided by documents in API responses.\n\t\t\t# Also add a company field to Customer Supplier and Item\n\t\t\tself._make_custom_fields()\n\n\t\t\tself._migrate_accounts()\n\n\t\t\t# Some Quickbooks Entities like Advance Payment, Payment aren't available firectly from API\n\t\t\t# Sales Invoice also sometimes needs to be saved as a Journal Entry\n\t\t\t# (When Item table is not present, This appens when Invoice is attached with a \\\"StatementCharge\\\" \\\"ReimburseCharge\n\t\t\t# Details of both of these cannot be fetched from API)\n\t\t\t# Their GL entries need to be generated from GeneralLedger Report.\n\t\t\tself._fetch_general_ledger()\n\n\t\t\t# QuickBooks data can have transactions that do not fall in existing fiscal years in ERPNext\n\t\t\tself._create_fiscal_years()\n\n\t\t\tself._allow_fraction_in_unit()\n\n\t\t\t# Following entities are directly available from API\n\t\t\t# Invoice can be an exception sometimes though (as explained above).\n\t\t\tentities_for_normal_transform = [\n\t\t\t\t\\\"Customer\\\",\n\t\t\t\t\\\"Item\\\",\n\t\t\t\t\\\"Vendor\\\",\n\t\t\t\t\\\"Preferences\\\",\n\t\t\t\t\\\"JournalEntry\\\",\n\t\t\t\t\\\"Purchase\\\",\n\t\t\t\t\\\"Deposit\\\",\n\t\t\t\t\\\"Invoice\\\",\n\t\t\t\t\\\"CreditMemo\\\",\n\t\t\t\t\\\"SalesReceipt\\\",\n\t\t\t\t\\\"RefundReceipt\\\",\n\t\t\t\t\\\"Bill\\\",\n\t\t\t\t\\\"VendorCredit\\\",\n\t\t\t\t\\\"Payment\\\",\n\t\t\t\t\\\"BillPayment\\\",\n\t\t\t]\n\t\t\tfor entity in entities_for_normal_transform:\n\t\t\t\tself._migrate_entries(entity)\n\n\t\t\t# Following entries are not available directly from API, Need to be regenrated from GeneralLedger Report\n\t\t\tentities_for_gl_transform = [\n\t\t\t\t\\\"Advance Payment\\\",\n\t\t\t\t\\\"Tax Payment\\\",\n\t\t\t\t\\\"Sales Tax Payment\\\",\n\t\t\t\t\\\"Purchase Tax Payment\\\",\n\t\t\t\t\\\"Inventory Qty Adjust\\\",\n\t\t\t]\n\t\t\tfor entity in entities_for_gl_transform:\n\t\t\t\tself._migrate_entries_from_gl(entity)\n\t\t\tself.set_indicator(\\\"Complete\\\")\n\t\texcept Exception as e:\n\t\t\tself.set_indicator(\\\"Failed\\\")\n\t\t\tself._log_error(e)\n\n\t\tfrappe.db.commit()\n\n\tdef get_tokens(self):\n\t\ttoken = self.oauth.fetch_token(\n\t\t\ttoken_url=self.token_endpoint, client_secret=self.client_secret, code=self.code\n\t\t)\n\t\tself.access_token = token[\\\"access_token\\\"]\n\t\tself.refresh_token = token[\\\"refresh_token\\\"]\n\t\tself.save()\n\n\tdef _refresh_tokens(self):\n\t\ttoken = self.oauth.refresh_token(\n\t\t\ttoken_url=self.token_endpoint,\n\t\t\tclient_id=self.client_id,\n\t\t\trefresh_token=self.refresh_token,\n\t\t\tclient_secret=self.client_secret,\n\t\t\tcode=self.code,\n\t\t)\n\t\tself.access_token = token[\\\"access_token\\\"]\n\t\tself.refresh_token = token[\\\"refresh_token\\\"]\n\t\tself.save()\n\n\tdef _make_custom_fields(self):\n\t\tdoctypes_for_quickbooks_id_field = [\n\t\t\t\\\"Account\\\",\n\t\t\t\\\"Customer\\\",\n\t\t\t\\\"Address\\\",\n\t\t\t\\\"Item\\\",\n\t\t\t\\\"Supplier\\\",\n\t\t\t\\\"Sales Invoice\\\",\n\t\t\t\\\"Journal Entry\\\",\n\t\t\t\\\"Purchase Invoice\\\",\n\t\t]\n\t\tfor doctype in doctypes_for_quickbooks_id_field:\n\t\t\tself._make_custom_quickbooks_id_field(doctype)\n\n\t\tdoctypes_for_company_field = [\\\"Customer\\\", \\\"Item\\\", \\\"Supplier\\\"]\n\t\tfor doctype in doctypes_for_company_field:\n\t\t\tself._make_custom_company_field(doctype)\n\n\t\tfrappe.db.commit()\n\n\tdef _make_custom_quickbooks_id_field(self, doctype):\n\t\tif not frappe.get_meta(doctype).has_field(\\\"quickbooks_id\\\"):\n\t\t\tfrappe.get_doc(\n\t\t\t\t{\n\t\t\t\t\t\\\"doctype\\\": \\\"Custom Field\\\",\n\t\t\t\t\t\\\"label\\\": \\\"QuickBooks ID\\\",\n\t\t\t\t\t\\\"dt\\\": doctype,\n\t\t\t\t\t\\\"fieldname\\\": \\\"quickbooks_id\\\",\n\t\t\t\t\t\\\"fieldtype\\\": \\\"Data\\\",\n\t\t\t\t}\n\t\t\t).insert()\n\n\tdef _make_custom_company_field(self, doctype):\n\t\tif not frappe.get_meta(doctype).has_field(\\\"company\\\"):\n\t\t\tfrappe.get_doc(\n\t\t\t\t{\n\t\t\t\t\t\\\"doctype\\\": \\\"Custom Field\\\",\n\t\t\t\t\t\\\"label\\\": \\\"Company\\\",\n\t\t\t\t\t\\\"dt\\\": doctype,\n\t\t\t\t\t\\\"fieldname\\\": \\\"company\\\",\n\t\t\t\t\t\\\"fieldtype\\\": \\\"Link\\\",\n\t\t\t\t\t\\\"options\\\": \\\"Company\\\",\n\t\t\t\t}\n\t\t\t).insert()\n\n\tdef _migrate_accounts(self):\n\t\tself._make_root_accounts()\n\t\tfor entity in [\\\"Account\\\", \\\"TaxRate\\\", \\\"TaxCode\\\"]:\n\t\t\tself._migrate_entries(entity)\n\n\tdef _make_root_accounts(self):\n\t\troots = [\\\"Asset\\\", \\\"Equity\\\", \\\"Expense\\\", \\\"Liability\\\", \\\"Income\\\"]\n\t\tfor root in roots:\n\t\t\ttry:\n\t\t\t\tif not frappe.db.exists(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Account\\\",\n\t\t\t\t\t\t\\\"name\\\": encode_company_abbr(f\\\"{root} - QB\\\", self.company),\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t):\n\t\t\t\t\tfrappe.get_doc(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\\\"doctype\\\": \\\"Account\\\",\n\t\t\t\t\t\t\t\\\"account_name\\\": f\\\"{root} - QB\\\",\n\t\t\t\t\t\t\t\\\"root_type\\\": root,\n\t\t\t\t\t\t\t\\\"is_group\\\": \\\"1\\\",\n\t\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t\t}\n\t\t\t\t\t).insert(ignore_mandatory=True)\n\t\t\texcept Exception as e:\n\t\t\t\tself._log_error(e, root)\n\t\tfrappe.db.commit()\n\n\n\n", "CodeBleu_score": 23.7772044179756}, {"code": "def _migrate_entries(self, entity)\n\tMigrator\\\", \\\"_migrate\\\", queue=\\\"long\\\")\n\n\tdef _migrate(self):\n\t\ttry:\n\t\t\tself.set_indicator(\\\"In Progress\\\")\n\t\t\t# Add quickbooks_id field to every document so that we can lookup by Id reference\n\t\t\t# provided by documents in API responses.\n\t\t\t# Also add a company field to Customer Supplier and Item\n\t\t\tself._make_custom_fields()\n\n\t\t\tself._migrate_accounts()\n\n\t\t\t# Some Quickbooks Entities like Advance Payment, Payment aren't available firectly from API\n\t\t\t# Sales Invoice also sometimes needs to be saved as a Journal Entry\n\t\t\t# (When Item table is not present, This appens when Invoice is attached with a \\\"StatementCharge\\\" \\\"ReimburseCharge\n\t\t\t# Details of both of these cannot be fetched from API)\n\t\t\t# Their GL entries need to be generated from GeneralLedger Report.\n\t\t\tself._fetch_general_ledger()\n\n\t\t\t# QuickBooks data can have transactions that do not fall in existing fiscal years in ERPNext\n\t\t\tself._create_fiscal_years()\n\n\t\t\tself._allow_fraction_in_unit()\n\n\t\t\t# Following entities are directly available from API\n\t\t\t# Invoice can be an exception sometimes though (as explained above).\n\t\t\tentities_for_normal_transform = [\n\t\t\t\t\\\"Customer\\\",\n\t\t\t\t\\\"Item\\\",\n\t\t\t\t\\\"Vendor\\\",\n\t\t\t\t\\\"Preferences\\\",\n\t\t\t\t\\\"JournalEntry\\\",\n\t\t\t\t\\\"Purchase\\\",\n\t\t\t\t\\\"Deposit\\\",\n\t\t\t\t\\\"Invoice\\\",\n\t\t\t\t\\\"CreditMemo\\\",\n\t\t\t\t\\\"SalesReceipt\\\",\n\t\t\t\t\\\"RefundReceipt\\\",\n\t\t\t\t\\\"Bill\\\",\n\t\t\t\t\\\"VendorCredit\\\",\n\t\t\t\t\\\"Payment\\\",\n\t\t\t\t\\\"BillPayment\\\",\n\t\t\t]\n\t\t\tfor entity in entities_for_normal_transform:\n\t\t\t\tself._migrate_entries(entity)\n\n\t\t\t# Following entries are not available directly from API, Need to be regenrated from GeneralLedger Report\n\t\t\tentities_for_gl_transform = [\n\t\t\t\t\\\"Advance Payment\\\",\n\t\t\t\t\\\"Tax Payment\\\",\n\t\t\t\t\\\"Sales Tax Payment\\\",\n\t\t\t\t\\\"Purchase Tax Payment\\\",\n\t\t\t\t\\\"Inventory Qty Adjust\\\",\n\t\t\t]\n\t\t\tfor entity in entities_for_gl_transform:\n\t\t\t\tself._migrate_entries_from_gl(entity)\n\t\t\tself.set_indicator(\\\"Complete\\\")\n\t\texcept Exception as e:\n\t\t\tself.set_indicator(\\\"Failed\\\")\n\t\t\tself._log_error(e)\n\n\t\tfrappe.db.commit()\n\n\tdef get_tokens(self):\n\t\ttoken = self.oauth.fetch_token(\n\t\t\ttoken_url=self.token_endpoint, client_secret=self.client_secret, code=self.code\n\t\t)\n\t\tself.access_token = token[\\\"access_token\\\"]\n\t\tself.refresh_token = token[\\\"refresh_token\\\"]\n\t\tself.save()\n\n\tdef _refresh_tokens(self):\n\t\ttoken = self.oauth.refresh_token(\n\t\t\ttoken_url=self.token_endpoint,\n\t\t\tclient_id=self.client_id,\n\t\t\trefresh_token=self.refresh_token,\n\t\t\tclient_secret=self.client_secret,\n\t\t\tcode=self.code,\n\t\t)\n\t\tself.access_token = token[\\\"access_token\\\"]\n\t\tself.refresh_token = token[\\\"refresh_token\\\"]\n\t\tself.save()\n\n\tdef _make_custom_fields(self):\n\t\tdoctypes_for_quickbooks_id_field = [\n\t\t\t\\\"Account\\\",\n\t\t\t\\\"Customer\\\",\n\t\t\t\\\"Address\\\",\n\t\t\t\\\"Item\\\",\n\t\t\t\\\"Supplier\\\",\n\t\t\t\\\"Sales Invoice\\\",\n\t\t\t\\\"Journal Entry\\\",\n\t\t\t\\\"Purchase Invoice\\\",\n\t\t]\n\t\tfor doctype in doctypes_for_quickbooks_id_field:\n\t\t\tself._make_custom_quickbooks_id_field(doctype)\n\n\t\tdoctypes_for_company_field = [\\\"Customer\\\", \\\"Item\\\", \\\"Supplier\\\"]\n\t\tfor doctype in doctypes_for_company_field:\n\t\t\tself._make_custom_company_field(doctype)\n\n\t\tfrappe.db.commit()\n\n\tdef _make_custom_quickbooks_id_field(self, doctype):\n\t\tif not frappe.get_meta(doctype).has_field(\\\"quickbooks_id\\\"):\n\t\t\tfrappe.get_doc(\n\t\t\t\t{\n\t\t\t\t\t\\\"doctype\\\": \\\"Custom Field\\\",\n\t\t\t\t\t\\\"label\\\": \\\"QuickBooks ID\\\",\n\t\t\t\t\t\\\"dt\\\": doctype,\n\t\t\t\t\t\\\"fieldname\\\": \\\"quickbooks_id\\\",\n\t\t\t\t\t\\\"fieldtype\\\": \\\"Data\\\",\n\t\t\t\t}\n\t\t\t).insert()\n\n\tdef _make_custom_company_field(self, doctype):\n\t\tif not frappe.get_meta(doctype).has_field(\\\"company\\\"):\n\t\t\tfrappe.get_doc(\n\t\t\t\t{\n\t\t\t\t\t\\\"doctype\\\": \\\"Custom Field\\\",\n\t\t\t\t\t\\\"label\\\": \\\"Company\\\",\n\t\t\t\t\t\\\"dt\\\": doctype,\n\t\t\t\t\t\\\"fieldname\\\": \\\"company\\\",\n\t\t\t\t\t\\\"fieldtype\\\": \\\"Link\\\",\n\t\t\t\t\t\\\"options\\\": \\\"Company\\\",\n\t\t\t\t}\n\t\t\t).insert()\n\n\tdef _migrate_accounts(self):\n\t\tself._make_root_accounts()\n\t\tfor entity in [\\\"Account\\\", \\\"TaxRate\\\", \\\"TaxCode\\\"]:\n\t\t\tself._migrate_entries(entity)\n\n\tdef _make_root_accounts(self):\n\t\troots = [\\\"Asset\\\", \\\"Equity\\\", \\\"Expense\\\", \\\"Liability\\\", \\\"Income\\\"]\n\t\tfor root in roots:\n\t\t\ttry:\n\t\t\t\tif not frappe.db.exists(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Account\\\",\n\t\t\t\t\t\t\\\"name\\\": encode_company_abbr(f\\\"{root} - QB\\\", self.company),\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t):\n\t\t\t\t\tfrappe.get_doc(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\\\"doctype\\\": \\\"Account\\\",\n\t\t\t\t\t\t\t\\\"account_name\\\": f\\\"{root} - QB\\\",\n\t\t\t\t\t\t\t\\\"root_type\\\": root,\n\t\t\t\t\t\t\t\\\"is_group\\\": \\\"1\\\",\n\t\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t\t}\n\t\t\t\t\t).insert(ignore_mandatory=True)\n\t\t\texcept Exception as e:\n\t\t\t\tself._log_error(e, root)\n\t\tfrappe.db.commit()\n\n\n\n", "CodeBleu_score": 23.7772044179756}, {"code": "def _migrate_entries(self, entity)\n\tMigrator\\\", \\\"_migrate\\\", queue=\\\"long\\\")\n\n\tdef _migrate(self):\n\t\ttry:\n\t\t\tself.set_indicator(\\\"In Progress\\\")\n\t\t\t# Add quickbooks_id field to every document so that we can lookup by Id reference\n\t\t\t# provided by documents in API responses.\n\t\t\t# Also add a company field to Customer Supplier and Item\n\t\t\tself._make_custom_fields()\n\n\t\t\tself._migrate_accounts()\n\n\t\t\t# Some Quickbooks Entities like Advance Payment, Payment aren't available firectly from API\n\t\t\t# Sales Invoice also sometimes needs to be saved as a Journal Entry\n\t\t\t# (When Item table is not present, This appens when Invoice is attached with a \\\"StatementCharge\\\" \\\"ReimburseCharge\n\t\t\t# Details of both of these cannot be fetched from API)\n\t\t\t# Their GL entries need to be generated from GeneralLedger Report.\n\t\t\tself._fetch_general_ledger()\n\n\t\t\t# QuickBooks data can have transactions that do not fall in existing fiscal years in ERPNext\n\t\t\tself._create_fiscal_years()\n\n\t\t\tself._allow_fraction_in_unit()\n\n\t\t\t# Following entities are directly available from API\n\t\t\t# Invoice can be an exception sometimes though (as explained above).\n\t\t\tentities_for_normal_transform = [\n\t\t\t\t\\\"Customer\\\",\n\t\t\t\t\\\"Item\\\",\n\t\t\t\t\\\"Vendor\\\",\n\t\t\t\t\\\"Preferences\\\",\n\t\t\t\t\\\"JournalEntry\\\",\n\t\t\t\t\\\"Purchase\\\",\n\t\t\t\t\\\"Deposit\\\",\n\t\t\t\t\\\"Invoice\\\",\n\t\t\t\t\\\"CreditMemo\\\",\n\t\t\t\t\\\"SalesReceipt\\\",\n\t\t\t\t\\\"RefundReceipt\\\",\n\t\t\t\t\\\"Bill\\\",\n\t\t\t\t\\\"VendorCredit\\\",\n\t\t\t\t\\\"Payment\\\",\n\t\t\t\t\\\"BillPayment\\\",\n\t\t\t]\n\t\t\tfor entity in entities_for_normal_transform:\n\t\t\t\tself._migrate_entries(entity)\n\n\t\t\t# Following entries are not available directly from API, Need to be regenrated from GeneralLedger Report\n\t\t\tentities_for_gl_transform = [\n\t\t\t\t\\\"Advance Payment\\\",\n\t\t\t\t\\\"Tax Payment\\\",\n\t\t\t\t\\\"Sales Tax Payment\\\",\n\t\t\t\t\\\"Purchase Tax Payment\\\",\n\t\t\t\t\\\"Inventory Qty Adjust\\\",\n\t\t\t]\n\t\t\tfor entity in entities_for_gl_transform:\n\t\t\t\tself._migrate_entries_from_gl(entity)\n\t\t\tself.set_indicator(\\\"Complete\\\")\n\t\texcept Exception as e:\n\t\t\tself.set_indicator(\\\"Failed\\\")\n\t\t\tself._log_error(e)\n\n\t\tfrappe.db.commit()\n\n\tdef get_tokens(self):\n\t\ttoken = self.oauth.fetch_token(\n\t\t\ttoken_url=self.token_endpoint, client_secret=self.client_secret, code=self.code\n\t\t)\n\t\tself.access_token = token[\\\"access_token\\\"]\n\t\tself.refresh_token = token[\\\"refresh_token\\\"]\n\t\tself.save()\n\n\tdef _refresh_tokens(self):\n\t\ttoken = self.oauth.refresh_token(\n\t\t\ttoken_url=self.token_endpoint,\n\t\t\tclient_id=self.client_id,\n\t\t\trefresh_token=self.refresh_token,\n\t\t\tclient_secret=self.client_secret,\n\t\t\tcode=self.code,\n\t\t)\n\t\tself.access_token = token[\\\"access_token\\\"]\n\t\tself.refresh_token = token[\\\"refresh_token\\\"]\n\t\tself.save()\n\n\tdef _make_custom_fields(self):\n\t\tdoctypes_for_quickbooks_id_field = [\n\t\t\t\\\"Account\\\",\n\t\t\t\\\"Customer\\\",\n\t\t\t\\\"Address\\\",\n\t\t\t\\\"Item\\\",\n\t\t\t\\\"Supplier\\\",\n\t\t\t\\\"Sales Invoice\\\",\n\t\t\t\\\"Journal Entry\\\",\n\t\t\t\\\"Purchase Invoice\\\",\n\t\t]\n\t\tfor doctype in doctypes_for_quickbooks_id_field:\n\t\t\tself._make_custom_quickbooks_id_field(doctype)\n\n\t\tdoctypes_for_company_field = [\\\"Customer\\\", \\\"Item\\\", \\\"Supplier\\\"]\n\t\tfor doctype in doctypes_for_company_field:\n\t\t\tself._make_custom_company_field(doctype)\n\n\t\tfrappe.db.commit()\n\n\tdef _make_custom_quickbooks_id_field(self, doctype):\n\t\tif not frappe.get_meta(doctype).has_field(\\\"quickbooks_id\\\"):\n\t\t\tfrappe.get_doc(\n\t\t\t\t{\n\t\t\t\t\t\\\"doctype\\\": \\\"Custom Field\\\",\n\t\t\t\t\t\\\"label\\\": \\\"QuickBooks ID\\\",\n\t\t\t\t\t\\\"dt\\\": doctype,\n\t\t\t\t\t\\\"fieldname\\\": \\\"quickbooks_id\\\",\n\t\t\t\t\t\\\"fieldtype\\\": \\\"Data\\\",\n\t\t\t\t}\n\t\t\t).insert()\n\n\tdef _make_custom_company_field(self, doctype):\n\t\tif not frappe.get_meta(doctype).has_field(\\\"company\\\"):\n\t\t\tfrappe.get_doc(\n\t\t\t\t{\n\t\t\t\t\t\\\"doctype\\\": \\\"Custom Field\\\",\n\t\t\t\t\t\\\"label\\\": \\\"Company\\\",\n\t\t\t\t\t\\\"dt\\\": doctype,\n\t\t\t\t\t\\\"fieldname\\\": \\\"company\\\",\n\t\t\t\t\t\\\"fieldtype\\\": \\\"Link\\\",\n\t\t\t\t\t\\\"options\\\": \\\"Company\\\",\n\t\t\t\t}\n\t\t\t).insert()\n\n\tdef _migrate_accounts(self):\n\t\tself._make_root_accounts()\n\t\tfor entity in [\\\"Account\\\", \\\"TaxRate\\\", \\\"TaxCode\\\"]:\n\t\t\tself._migrate_entries(entity)\n\n\tdef _make_root_accounts(self):\n\t\troots = [\\\"Asset\\\", \\\"Equity\\\", \\\"Expense\\\", \\\"Liability\\\", \\\"Income\\\"]\n\t\tfor root in roots:\n\t\t\ttry:\n\t\t\t\tif not frappe.db.exists(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Account\\\",\n\t\t\t\t\t\t\\\"name\\\": encode_company_abbr(f\\\"{root} - QB\\\", self.company),\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t):\n\t\t\t\t\tfrappe.get_doc(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\\\"doctype\\\": \\\"Account\\\",\n\t\t\t\t\t\t\t\\\"account_name\\\": f\\\"{root} - QB\\\",\n\t\t\t\t\t\t\t\\\"root_type\\\": root,\n\t\t\t\t\t\t\t\\\"is_group\\\": \\\"1\\\",\n\t\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t\t}\n\t\t\t\t\t).insert(ignore_mandatory=True)\n\t\t\texcept Exception as e:\n\t\t\t\tself._log_error(e, root)\n\t\tfrappe.db.commit()\n\n\n\n", "CodeBleu_score": 23.7772044179756}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\tself.company,\n\t\t\t\t}\n\t\t\t):\n\t\t\t\tfrappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Account\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": \\\"TaxRate - {}\\\".format(tax_rate[\\\"Id\\\"]),\n\t\t\t\t\t\t\\\"account_name\\\": \\\"{} - QB\\\".format(tax_rate[\\\"Name\\\"]),\n\t\t\t\t\t\t\\\"root_type\\\": \\\"Liability\\\",\n\t\t\t\t\t\t\\\"parent_account\\\": encode_company_abbr(\\\"{} - QB\\\".format(\\\"Liability\\\"), self.company),\n\t\t\t\t\t\t\\\"is_group\\\": \\\"0\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t).insert()\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, tax_rate)\n\n\tdef _preprocess_tax_codes(self, tax_codes):\n\t\tself.tax_codes = {tax_code[\\\"Id\\\"]: tax_code for tax_code in tax_codes}\n\t\treturn tax_codes\n\n\tdef _save_tax_code(self, tax_code):\n\t\tpass\n\n\tdef _save_customer(self, customer):\n\t\ttry:\n\t\t\tif not frappe.db.exists(\n\t\t\t\t{\\\"doctype\\\": \\\"Customer\\\", \\\"quickbooks_id\\\": customer[\\\"Id\\\"], \\\"company\\\": self.company}\n\t\t\t):\n\t\t\t\ttry:\n\t\t\t\t\treceivable_account = frappe.get_all(\n\t\t\t\t\t\t\\\"Account\\\",\n\t\t\t\t\t\tfilters={\n\t\t\t\t\t\t\t\\\"account_type\\\": \\\"Receivable\\\",\n\t\t\t\t\t\t\t\\\"account_currency\\\": customer[\\\"CurrencyRef\\\"][\\\"value\\\"],\n\t\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t\t},\n\t\t\t\t\t)[0][\\\"name\\\"]\n\t\t\t\texcept Exception:\n\t\t\t\t\treceivable_account = None\n\t\t\t\terpcustomer = frappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Customer\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": customer[\\\"Id\\\"],\n\t\t\t\t\t\t\\\"customer_name\\\": encode_company_abbr(customer[\\\"DisplayName\\\"], self.company),\n\t\t\t\t\t\t\\\"customer_type\\\": \\\"Individual\\\",\n\t\t\t\t\t\t\\\"customer_group\\\": \\\"Commercial\\\",\n\t\t\t\t\t\t\\\"default_currency\\\": customer[\\\"CurrencyRef\\\"][\\\"value\\\"],\n\t\t\t\t\t\t\\\"accounts\\\": [{\\\"company\\\": self.company, \\\"account\\\": receivable_account}],\n\t\t\t\t\t\t\\\"territory\\\": \\\"All Territories\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t).insert()\n\t\t\t\tif \\\"BillAddr\\\" in customer:\n\t\t\t\t\tself._create_address(erpcustomer, \\\"Customer\\\", customer[\\\"BillAddr\\\"], \\\"Billing\\\")\n\t\t\t\tif \\\"ShipAddr\\\" in customer:\n\t\t\t\t\tself._create_address(erpcustomer, \\\"Customer\\\", customer[\\\"ShipAddr\\\"], \\\"Shipping\\\")\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, customer)\n\n\tdef _save_item(self, item):\n\t\ttry:\n\t\t\tif not frappe.db.exists(\n\t\t\t\t{\\\"doctype\\\": \\\"Item\\\", \\\"quickbooks_id\\\": item[\\\"Id\\\"], \\\"company\\\": self.company}\n\t\t\t):\n\t\t\t\tif item[\\\"Type\\\"] in (\\\"Service\\\", \\\"Inventory\\\"):\n\t\t\t\t\titem_dict = {\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Item\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": item[\\\"Id\\\"],\n\t\t\t\t\t\t\\\"item_code\\\": encode_company_abbr(item[\\\"Name\\\"], self.company),\n\t\t\t\t\t\t\\\"stock_uom\\\": \\\"Unit\\\",\n\t\t\t\t\t\t\\\"is_stock_item\\\": 0,\n\t\t\t\t\t\t\\\"item_group\\\": \\\"All Item Groups\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t\t\\\"item_defaults\\\": [\n\t\t\t\t\t\t\t{\\\"company\\\": self.company, \\\"default_warehouse\\\": self.default_warehouse}\n\t\t\t\t\t\t],\n\t\t\t\t\t}\n\t\t\t\t\tif \\\"ExpenseAccountRef\\\" in item:\n\t\t\t\t\t\texpense_account = self._get_account_name_by_id(item[\\\"ExpenseAccountRef\\\"][\\\"value\\\"])\n\t\t\t\t\t\titem_dict[\\\"item_defaults\\\"][0][\\\"expense_account\\\"] = expense_account\n\t\t\t\t\tif \\\"IncomeAccountRef\\\" in item:\n\t\t\t\t\t\tincome_account = self._get_account_name_by_id(item[\\\"IncomeAccountRef\\\"][\\\"value\\\"])\n\t\t\t\t\t\titem_dict[\\\"item_defaults\\\"][0][\\\"income_account\\\"] = income_account\n\t\t\t\t\tfrappe.get_doc(item_dict).insert()\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, item)\n\n\tdef _allow_fraction_in_unit(self):\n\t\tfrappe.db.set_value(\\\"UOM\\\", \\\"Unit\\\", \\\"must_be_whole_number\\\", 0)\n\n\tdef _save_vendor(self, vendor):\n\t\ttry:\n\t\t\tif not frappe.db.exists(\n\t\t\t\t{\\\"doctype\\\": \\\"Supplier\\\", \\\"quickbooks_id\\\": vendor[\\\"Id\\\"], \\\"company\\\": self.company}\n\t\t\t):\n\t\t\t\terpsupplier = frappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Supplier\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": vendor[\\\"Id\\\"],\n\t\t\t\t\t\t\\\"supplier_name\\\": encode_company_abbr(vendor[\\\"DisplayName\\\"], self.company),\n\t\t\t\t\t\t\\\"supplier_group\\\": \\\"All Supplier Groups\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t).insert()\n\t\t\t\tif \\\"BillAddr\\\" in vendor:\n\t\t\t\t\tself._create_address(erpsupplier, \\\"Supplier\\\", vendor[\\\"BillAddr\\\"], \\\"Billing\\\")\n\t\t\t\tif \\\"ShipAddr\\\" in vendor:\n\t\t\t\t\tself._create_address(erpsupplier, \\\"Supplier\\\", vendor[\\\"ShipAddr\\\"], \\\"Shipping\\\")\n\t\texcept Exception as e:\n\t\t\tself._log_error(e)\n\n\tdef _save_preference(self, preference):\n\t\ttry:\n\t\t\tif preference[\\\"SalesFormsPrefs\\\"][\\\"AllowShipping\\\"]:\n\t\t\t\tdefault_shipping_account_id = preference[\\\"SalesFormsPrefs\\\"][\\\"DefaultShippingAccount\\\"]\n\t\t\t\tself.default_shipping_account = self._get_account_name_by_id(\n\t\t\t\t\tself, default_shipping_account_id\n\t\t\t\t)\n\t\t\t\tself.save()\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, preference)\n\n\n\n", "CodeBleu_score": 26.955857025100936}, {"code": "def _save_invoice(self, invoice)\n\tself.company,\n\t\t\t\t}\n\t\t\t):\n\t\t\t\tfrappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Account\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": \\\"TaxRate - {}\\\".format(tax_rate[\\\"Id\\\"]),\n\t\t\t\t\t\t\\\"account_name\\\": \\\"{} - QB\\\".format(tax_rate[\\\"Name\\\"]),\n\t\t\t\t\t\t\\\"root_type\\\": \\\"Liability\\\",\n\t\t\t\t\t\t\\\"parent_account\\\": encode_company_abbr(\\\"{} - QB\\\".format(\\\"Liability\\\"), self.company),\n\t\t\t\t\t\t\\\"is_group\\\": \\\"0\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t).insert()\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, tax_rate)\n\n\tdef _preprocess_tax_codes(self, tax_codes):\n\t\tself.tax_codes = {tax_code[\\\"Id\\\"]: tax_code for tax_code in tax_codes}\n\t\treturn tax_codes\n\n\tdef _save_tax_code(self, tax_code):\n\t\tpass\n\n\tdef _save_customer(self, customer):\n\t\ttry:\n\t\t\tif not frappe.db.exists(\n\t\t\t\t{\\\"doctype\\\": \\\"Customer\\\", \\\"quickbooks_id\\\": customer[\\\"Id\\\"], \\\"company\\\": self.company}\n\t\t\t):\n\t\t\t\ttry:\n\t\t\t\t\treceivable_account = frappe.get_all(\n\t\t\t\t\t\t\\\"Account\\\",\n\t\t\t\t\t\tfilters={\n\t\t\t\t\t\t\t\\\"account_type\\\": \\\"Receivable\\\",\n\t\t\t\t\t\t\t\\\"account_currency\\\": customer[\\\"CurrencyRef\\\"][\\\"value\\\"],\n\t\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t\t},\n\t\t\t\t\t)[0][\\\"name\\\"]\n\t\t\t\texcept Exception:\n\t\t\t\t\treceivable_account = None\n\t\t\t\terpcustomer = frappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Customer\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": customer[\\\"Id\\\"],\n\t\t\t\t\t\t\\\"customer_name\\\": encode_company_abbr(customer[\\\"DisplayName\\\"], self.company),\n\t\t\t\t\t\t\\\"customer_type\\\": \\\"Individual\\\",\n\t\t\t\t\t\t\\\"customer_group\\\": \\\"Commercial\\\",\n\t\t\t\t\t\t\\\"default_currency\\\": customer[\\\"CurrencyRef\\\"][\\\"value\\\"],\n\t\t\t\t\t\t\\\"accounts\\\": [{\\\"company\\\": self.company, \\\"account\\\": receivable_account}],\n\t\t\t\t\t\t\\\"territory\\\": \\\"All Territories\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t).insert()\n\t\t\t\tif \\\"BillAddr\\\" in customer:\n\t\t\t\t\tself._create_address(erpcustomer, \\\"Customer\\\", customer[\\\"BillAddr\\\"], \\\"Billing\\\")\n\t\t\t\tif \\\"ShipAddr\\\" in customer:\n\t\t\t\t\tself._create_address(erpcustomer, \\\"Customer\\\", customer[\\\"ShipAddr\\\"], \\\"Shipping\\\")\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, customer)\n\n\tdef _save_item(self, item):\n\t\ttry:\n\t\t\tif not frappe.db.exists(\n\t\t\t\t{\\\"doctype\\\": \\\"Item\\\", \\\"quickbooks_id\\\": item[\\\"Id\\\"], \\\"company\\\": self.company}\n\t\t\t):\n\t\t\t\tif item[\\\"Type\\\"] in (\\\"Service\\\", \\\"Inventory\\\"):\n\t\t\t\t\titem_dict = {\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Item\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": item[\\\"Id\\\"],\n\t\t\t\t\t\t\\\"item_code\\\": encode_company_abbr(item[\\\"Name\\\"], self.company),\n\t\t\t\t\t\t\\\"stock_uom\\\": \\\"Unit\\\",\n\t\t\t\t\t\t\\\"is_stock_item\\\": 0,\n\t\t\t\t\t\t\\\"item_group\\\": \\\"All Item Groups\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t\t\\\"item_defaults\\\": [\n\t\t\t\t\t\t\t{\\\"company\\\": self.company, \\\"default_warehouse\\\": self.default_warehouse}\n\t\t\t\t\t\t],\n\t\t\t\t\t}\n\t\t\t\t\tif \\\"ExpenseAccountRef\\\" in item:\n\t\t\t\t\t\texpense_account = self._get_account_name_by_id(item[\\\"ExpenseAccountRef\\\"][\\\"value\\\"])\n\t\t\t\t\t\titem_dict[\\\"item_defaults\\\"][0][\\\"expense_account\\\"] = expense_account\n\t\t\t\t\tif \\\"IncomeAccountRef\\\" in item:\n\t\t\t\t\t\tincome_account = self._get_account_name_by_id(item[\\\"IncomeAccountRef\\\"][\\\"value\\\"])\n\t\t\t\t\t\titem_dict[\\\"item_defaults\\\"][0][\\\"income_account\\\"] = income_account\n\t\t\t\t\tfrappe.get_doc(item_dict).insert()\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, item)\n\n\tdef _allow_fraction_in_unit(self):\n\t\tfrappe.db.set_value(\\\"UOM\\\", \\\"Unit\\\", \\\"must_be_whole_number\\\", 0)\n\n\tdef _save_vendor(self, vendor):\n\t\ttry:\n\t\t\tif not frappe.db.exists(\n\t\t\t\t{\\\"doctype\\\": \\\"Supplier\\\", \\\"quickbooks_id\\\": vendor[\\\"Id\\\"], \\\"company\\\": self.company}\n\t\t\t):\n\t\t\t\terpsupplier = frappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Supplier\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": vendor[\\\"Id\\\"],\n\t\t\t\t\t\t\\\"supplier_name\\\": encode_company_abbr(vendor[\\\"DisplayName\\\"], self.company),\n\t\t\t\t\t\t\\\"supplier_group\\\": \\\"All Supplier Groups\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t).insert()\n\t\t\t\tif \\\"BillAddr\\\" in vendor:\n\t\t\t\t\tself._create_address(erpsupplier, \\\"Supplier\\\", vendor[\\\"BillAddr\\\"], \\\"Billing\\\")\n\t\t\t\tif \\\"ShipAddr\\\" in vendor:\n\t\t\t\t\tself._create_address(erpsupplier, \\\"Supplier\\\", vendor[\\\"ShipAddr\\\"], \\\"Shipping\\\")\n\t\texcept Exception as e:\n\t\t\tself._log_error(e)\n\n\tdef _save_preference(self, preference):\n\t\ttry:\n\t\t\tif preference[\\\"SalesFormsPrefs\\\"][\\\"AllowShipping\\\"]:\n\t\t\t\tdefault_shipping_account_id = preference[\\\"SalesFormsPrefs\\\"][\\\"DefaultShippingAccount\\\"]\n\t\t\t\tself.default_shipping_account = self._get_account_name_by_id(\n\t\t\t\t\tself, default_shipping_account_id\n\t\t\t\t)\n\t\t\t\tself.save()\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, preference)\n\n\n\n", "CodeBleu_score": 26.955857025100936}, {"code": "def _save_invoice(self, invoice)\n\tself.company,\n\t\t\t\t}\n\t\t\t):\n\t\t\t\tfrappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Account\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": \\\"TaxRate - {}\\\".format(tax_rate[\\\"Id\\\"]),\n\t\t\t\t\t\t\\\"account_name\\\": \\\"{} - QB\\\".format(tax_rate[\\\"Name\\\"]),\n\t\t\t\t\t\t\\\"root_type\\\": \\\"Liability\\\",\n\t\t\t\t\t\t\\\"parent_account\\\": encode_company_abbr(\\\"{} - QB\\\".format(\\\"Liability\\\"), self.company),\n\t\t\t\t\t\t\\\"is_group\\\": \\\"0\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t).insert()\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, tax_rate)\n\n\tdef _preprocess_tax_codes(self, tax_codes):\n\t\tself.tax_codes = {tax_code[\\\"Id\\\"]: tax_code for tax_code in tax_codes}\n\t\treturn tax_codes\n\n\tdef _save_tax_code(self, tax_code):\n\t\tpass\n\n\tdef _save_customer(self, customer):\n\t\ttry:\n\t\t\tif not frappe.db.exists(\n\t\t\t\t{\\\"doctype\\\": \\\"Customer\\\", \\\"quickbooks_id\\\": customer[\\\"Id\\\"], \\\"company\\\": self.company}\n\t\t\t):\n\t\t\t\ttry:\n\t\t\t\t\treceivable_account = frappe.get_all(\n\t\t\t\t\t\t\\\"Account\\\",\n\t\t\t\t\t\tfilters={\n\t\t\t\t\t\t\t\\\"account_type\\\": \\\"Receivable\\\",\n\t\t\t\t\t\t\t\\\"account_currency\\\": customer[\\\"CurrencyRef\\\"][\\\"value\\\"],\n\t\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t\t},\n\t\t\t\t\t)[0][\\\"name\\\"]\n\t\t\t\texcept Exception:\n\t\t\t\t\treceivable_account = None\n\t\t\t\terpcustomer = frappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Customer\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": customer[\\\"Id\\\"],\n\t\t\t\t\t\t\\\"customer_name\\\": encode_company_abbr(customer[\\\"DisplayName\\\"], self.company),\n\t\t\t\t\t\t\\\"customer_type\\\": \\\"Individual\\\",\n\t\t\t\t\t\t\\\"customer_group\\\": \\\"Commercial\\\",\n\t\t\t\t\t\t\\\"default_currency\\\": customer[\\\"CurrencyRef\\\"][\\\"value\\\"],\n\t\t\t\t\t\t\\\"accounts\\\": [{\\\"company\\\": self.company, \\\"account\\\": receivable_account}],\n\t\t\t\t\t\t\\\"territory\\\": \\\"All Territories\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t).insert()\n\t\t\t\tif \\\"BillAddr\\\" in customer:\n\t\t\t\t\tself._create_address(erpcustomer, \\\"Customer\\\", customer[\\\"BillAddr\\\"], \\\"Billing\\\")\n\t\t\t\tif \\\"ShipAddr\\\" in customer:\n\t\t\t\t\tself._create_address(erpcustomer, \\\"Customer\\\", customer[\\\"ShipAddr\\\"], \\\"Shipping\\\")\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, customer)\n\n\tdef _save_item(self, item):\n\t\ttry:\n\t\t\tif not frappe.db.exists(\n\t\t\t\t{\\\"doctype\\\": \\\"Item\\\", \\\"quickbooks_id\\\": item[\\\"Id\\\"], \\\"company\\\": self.company}\n\t\t\t):\n\t\t\t\tif item[\\\"Type\\\"] in (\\\"Service\\\", \\\"Inventory\\\"):\n\t\t\t\t\titem_dict = {\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Item\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": item[\\\"Id\\\"],\n\t\t\t\t\t\t\\\"item_code\\\": encode_company_abbr(item[\\\"Name\\\"], self.company),\n\t\t\t\t\t\t\\\"stock_uom\\\": \\\"Unit\\\",\n\t\t\t\t\t\t\\\"is_stock_item\\\": 0,\n\t\t\t\t\t\t\\\"item_group\\\": \\\"All Item Groups\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t\t\\\"item_defaults\\\": [\n\t\t\t\t\t\t\t{\\\"company\\\": self.company, \\\"default_warehouse\\\": self.default_warehouse}\n\t\t\t\t\t\t],\n\t\t\t\t\t}\n\t\t\t\t\tif \\\"ExpenseAccountRef\\\" in item:\n\t\t\t\t\t\texpense_account = self._get_account_name_by_id(item[\\\"ExpenseAccountRef\\\"][\\\"value\\\"])\n\t\t\t\t\t\titem_dict[\\\"item_defaults\\\"][0][\\\"expense_account\\\"] = expense_account\n\t\t\t\t\tif \\\"IncomeAccountRef\\\" in item:\n\t\t\t\t\t\tincome_account = self._get_account_name_by_id(item[\\\"IncomeAccountRef\\\"][\\\"value\\\"])\n\t\t\t\t\t\titem_dict[\\\"item_defaults\\\"][0][\\\"income_account\\\"] = income_account\n\t\t\t\t\tfrappe.get_doc(item_dict).insert()\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, item)\n\n\tdef _allow_fraction_in_unit(self):\n\t\tfrappe.db.set_value(\\\"UOM\\\", \\\"Unit\\\", \\\"must_be_whole_number\\\", 0)\n\n\tdef _save_vendor(self, vendor):\n\t\ttry:\n\t\t\tif not frappe.db.exists(\n\t\t\t\t{\\\"doctype\\\": \\\"Supplier\\\", \\\"quickbooks_id\\\": vendor[\\\"Id\\\"], \\\"company\\\": self.company}\n\t\t\t):\n\t\t\t\terpsupplier = frappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Supplier\\\",\n\t\t\t\t\t\t\\\"quickbooks_id\\\": vendor[\\\"Id\\\"],\n\t\t\t\t\t\t\\\"supplier_name\\\": encode_company_abbr(vendor[\\\"DisplayName\\\"], self.company),\n\t\t\t\t\t\t\\\"supplier_group\\\": \\\"All Supplier Groups\\\",\n\t\t\t\t\t\t\\\"company\\\": self.company,\n\t\t\t\t\t}\n\t\t\t\t).insert()\n\t\t\t\tif \\\"BillAddr\\\" in vendor:\n\t\t\t\t\tself._create_address(erpsupplier, \\\"Supplier\\\", vendor[\\\"BillAddr\\\"], \\\"Billing\\\")\n\t\t\t\tif \\\"ShipAddr\\\" in vendor:\n\t\t\t\t\tself._create_address(erpsupplier, \\\"Supplier\\\", vendor[\\\"ShipAddr\\\"], \\\"Shipping\\\")\n\t\texcept Exception as e:\n\t\t\tself._log_error(e)\n\n\tdef _save_preference(self, preference):\n\t\ttry:\n\t\t\tif preference[\\\"SalesFormsPrefs\\\"][\\\"AllowShipping\\\"]:\n\t\t\t\tdefault_shipping_account_id = preference[\\\"SalesFormsPrefs\\\"][\\\"DefaultShippingAccount\\\"]\n\t\t\t\tself.default_shipping_account = self._get_account_name_by_id(\n\t\t\t\t\tself, default_shipping_account_id\n\t\t\t\t)\n\t\t\t\tself.save()\n\t\texcept Exception as e:\n\t\t\tself._log_error(e, preference)\n\n\n\n", "CodeBleu_score": 26.955857025100936}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\t\tcustomer_group: DF.Link | None\n\t\tcustomer_name: DF.Data | None\n\t\titems: DF.Table[MaintenanceScheduleItem]\n\t\tnaming_series: DF.Literal[\\\"MAT-MSH-.YYYY.-\\\"]\n\t\tschedules: DF.Table[MaintenanceScheduleDetail]\n\t\tstatus: DF.Literal[\\\"\\\", \\\"Draft\\\", \\\"Submitted\\\", \\\"Cancelled\\\"]\n\t\tterritory: DF.Link | None\n\t\ttransaction_date: DF.Date\n\t# end: auto-generated types\n\n\t@frappe.whitelist()\n\tdef generate_schedule(self):\n\t\tif self.docstatus != 0:\n\t\t\treturn\n\t\tself.set(\\\"schedules\\\", [])\n\t\tcount = 1\n\t\tfor d in self.get(\\\"items\\\"):\n\t\t\tself.validate_maintenance_detail()\n\t\t\ts_list = []\n\t\t\ts_list = self.create_schedule_list(d.start_date, d.end_date, d.no_of_visits, d.sales_person)\n\t\t\tfor i in range(d.no_of_visits):\n\t\t\t\tchild = self.append(\\\"schedules\\\")\n\t\t\t\tchild.item_code = d.item_code\n\t\t\t\tchild.item_name = d.item_name\n\t\t\t\tchild.scheduled_date = s_list[i].strftime(\\\"%Y-%m-%d\\\")\n\t\t\t\tif d.serial_no:\n\t\t\t\t\tchild.serial_no = d.serial_no\n\t\t\t\tchild.idx = count\n\t\t\t\tcount = count + 1\n\t\t\t\tchild.sales_person = d.sales_person\n\t\t\t\tchild.completion_status = \\\"Pending\\\"\n\t\t\t\tchild.item_reference = d.name\n\n\t@frappe.whitelist()\n\tdef validate_end_date_visits(self):\n\t\tdays_in_period = {\\\"Weekly\\\": 7, \\\"Monthly\\\": 30, \\\"Quarterly\\\": 91, \\\"Half Yearly\\\": 182, \\\"Yearly\\\": 365}\n\t\tfor item in self.items:\n\t\t\tif item.periodicity and item.periodicity != \\\"Random\\\" and item.start_date:\n\t\t\t\tif not item.end_date:\n\t\t\t\t\tif item.no_of_visits:\n\t\t\t\t\t\titem.end_date = add_days(\n\t\t\t\t\t\t\titem.start_date, item.no_of_visits * days_in_period[item.periodicity]\n\t\t\t\t\t\t)\n\t\t\t\t\telse:\n\t\t\t\t\t\titem.end_date = add_days(item.start_date, days_in_period[item.periodicity])\n\n\t\t\t\tdiff = date_diff(item.end_date, item.start_date) + 1\n\t\t\t\tno_of_visits = cint(diff / days_in_period[item.periodicity])\n\n\t\t\t\tif not item.no_of_visits or item.no_of_visits == 0:\n\t\t\t\t\titem.end_date = add_days(item.start_date, days_in_period[item.periodicity])\n\t\t\t\t\tdiff = date_diff(item.end_date, item.start_date) + 1\n\t\t\t\t\titem.no_of_visits = cint(diff / days_in_period[item.periodicity])\n\n\t\t\t\telif item.no_of_visits > no_of_visits:\n\t\t\t\t\titem.end_date = add_days(\n\t\t\t\t\t\titem.start_date, item.no_of_visits * days_in_period[item.periodicity]\n\t\t\t\t\t)\n\n\t\t\t\telif item.no_of_visits < no_of_visits:\n\t\t\t\t\titem.end_date = add_days(\n\t\t\t\t\t\titem.start_date, item.no_of_visits * days_in_period[item.periodicity]\n\t\t\t\t\t)\n\n\tdef on_submit(self):\n\t\tif not self.get(\\\"schedules\\\"):\n\t\t\tthrow(_(\\\"Please click on 'Generate Schedule' to get schedule\\\"))\n\t\tself.check_serial_no_added()\n\t\tself.validate_schedule()\n\n\t\temail_map = {}\n\t\tfor d in self.get(\\\"items\\\"):\n\t\t\tif d.serial_and_batch_bundle:\n\t\t\t\tserial_nos = frappe.get_doc(\n\t\t\t\t\t\\\"Serial and Batch Bundle\\\", d.serial_and_batch_bundle\n\t\t\t\t).get_serial_nos()\n\n\t\t\t\tif serial_nos:\n\t\t\t\t\tself.validate_serial_no(d.item_code, serial_nos, d.start_date)\n\t\t\t\t\tself.update_amc_date(serial_nos, d.end_date)\n\n\t\t\tno_email_sp = []\n\t\t\tif d.sales_person and d.sales_person not in email_map:\n\t\t\t\tsp = frappe.get_doc(\\\"Sales Person\\\", d.sales_person)\n\t\t\t\ttry:\n\t\t\t\t\temail_map[d.sales_person] = sp.get_email_id()\n\t\t\t\texcept frappe.ValidationError:\n\t\t\t\t\tno_email_sp.append(d.sales_person)\n\n\t\t\tif no_email_sp:\n\t\t\t\tfrappe.msgprint(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Setting Events to {0}, since the Employee attached to the below Sales Persons does not have a User ID{1}\\\"\n\t\t\t\t\t).format(self.owner, \\\"<br>\\\" + \\\"<br>\\\".join(no_email_sp))\n\t\t\t\t)\n\n\t\t\tscheduled_date = frappe.db.get_all(\n\t\t\t\t\\\"Maintenance Schedule Detail\\\",\n\t\t\t\t{\\\"parent\\\": self.name, \\\"item_code\\\": d.item_code},\n\t\t\t\t[\\\"scheduled_date\\\"],\n\t\t\t\tas_list=False,\n\t\t\t)\n\n\t\t\tfor key in scheduled_date:\n\t\t\t\tdescription = frappe._(\\\"Reference: {0}, Item Code: {1} and Customer: {2}\\\").format(\n\t\t\t\t\tself.name, d.item_code, self.customer\n\t\t\t\t)\n\t\t\t\tevent = frappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Event\\\",\n\t\t\t\t\t\t\\\"owner\\\": email_map.get(d.sales_person, self.owner),\n\t\t\t\t\t\t\\\"subject\\\": description,\n\t\t\t\t\t\t\\\"description\\\": description,\n\t\t\t\t\t\t\\\"starts_on\\\": cstr(key[\\\"scheduled_date\\\"]) + \\\" 10:00:00\\\",\n\t\t\t\t\t\t\\\"event_type\\\": \\\"Private\\\",\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\tevent.add_participant(self.doctype, self.name)\n\t\t\t\tevent.insert(ignore_permissions=1)\n\n\t\tself.db_set(\\\"status\\\", \\\"Submitted\\\")\n\n\n\n", "CodeBleu_score": 19.197274144267578}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\t\tcustomer_group: DF.Link | None\n\t\tcustomer_name: DF.Data | None\n\t\titems: DF.Table[MaintenanceScheduleItem]\n\t\tnaming_series: DF.Literal[\\\"MAT-MSH-.YYYY.-\\\"]\n\t\tschedules: DF.Table[MaintenanceScheduleDetail]\n\t\tstatus: DF.Literal[\\\"\\\", \\\"Draft\\\", \\\"Submitted\\\", \\\"Cancelled\\\"]\n\t\tterritory: DF.Link | None\n\t\ttransaction_date: DF.Date\n\t# end: auto-generated types\n\n\t@frappe.whitelist()\n\tdef generate_schedule(self):\n\t\tif self.docstatus != 0:\n\t\t\treturn\n\t\tself.set(\\\"schedules\\\", [])\n\t\tcount = 1\n\t\tfor d in self.get(\\\"items\\\"):\n\t\t\tself.validate_maintenance_detail()\n\t\t\ts_list = []\n\t\t\ts_list = self.create_schedule_list(d.start_date, d.end_date, d.no_of_visits, d.sales_person)\n\t\t\tfor i in range(d.no_of_visits):\n\t\t\t\tchild = self.append(\\\"schedules\\\")\n\t\t\t\tchild.item_code = d.item_code\n\t\t\t\tchild.item_name = d.item_name\n\t\t\t\tchild.scheduled_date = s_list[i].strftime(\\\"%Y-%m-%d\\\")\n\t\t\t\tif d.serial_no:\n\t\t\t\t\tchild.serial_no = d.serial_no\n\t\t\t\tchild.idx = count\n\t\t\t\tcount = count + 1\n\t\t\t\tchild.sales_person = d.sales_person\n\t\t\t\tchild.completion_status = \\\"Pending\\\"\n\t\t\t\tchild.item_reference = d.name\n\n\t@frappe.whitelist()\n\tdef validate_end_date_visits(self):\n\t\tdays_in_period = {\\\"Weekly\\\": 7, \\\"Monthly\\\": 30, \\\"Quarterly\\\": 91, \\\"Half Yearly\\\": 182, \\\"Yearly\\\": 365}\n\t\tfor item in self.items:\n\t\t\tif item.periodicity and item.periodicity != \\\"Random\\\" and item.start_date:\n\t\t\t\tif not item.end_date:\n\t\t\t\t\tif item.no_of_visits:\n\t\t\t\t\t\titem.end_date = add_days(\n\t\t\t\t\t\t\titem.start_date, item.no_of_visits * days_in_period[item.periodicity]\n\t\t\t\t\t\t)\n\t\t\t\t\telse:\n\t\t\t\t\t\titem.end_date = add_days(item.start_date, days_in_period[item.periodicity])\n\n\t\t\t\tdiff = date_diff(item.end_date, item.start_date) + 1\n\t\t\t\tno_of_visits = cint(diff / days_in_period[item.periodicity])\n\n\t\t\t\tif not item.no_of_visits or item.no_of_visits == 0:\n\t\t\t\t\titem.end_date = add_days(item.start_date, days_in_period[item.periodicity])\n\t\t\t\t\tdiff = date_diff(item.end_date, item.start_date) + 1\n\t\t\t\t\titem.no_of_visits = cint(diff / days_in_period[item.periodicity])\n\n\t\t\t\telif item.no_of_visits > no_of_visits:\n\t\t\t\t\titem.end_date = add_days(\n\t\t\t\t\t\titem.start_date, item.no_of_visits * days_in_period[item.periodicity]\n\t\t\t\t\t)\n\n\t\t\t\telif item.no_of_visits < no_of_visits:\n\t\t\t\t\titem.end_date = add_days(\n\t\t\t\t\t\titem.start_date, item.no_of_visits * days_in_period[item.periodicity]\n\t\t\t\t\t)\n\n\tdef on_submit(self):\n\t\tif not self.get(\\\"schedules\\\"):\n\t\t\tthrow(_(\\\"Please click on 'Generate Schedule' to get schedule\\\"))\n\t\tself.check_serial_no_added()\n\t\tself.validate_schedule()\n\n\t\temail_map = {}\n\t\tfor d in self.get(\\\"items\\\"):\n\t\t\tif d.serial_and_batch_bundle:\n\t\t\t\tserial_nos = frappe.get_doc(\n\t\t\t\t\t\\\"Serial and Batch Bundle\\\", d.serial_and_batch_bundle\n\t\t\t\t).get_serial_nos()\n\n\t\t\t\tif serial_nos:\n\t\t\t\t\tself.validate_serial_no(d.item_code, serial_nos, d.start_date)\n\t\t\t\t\tself.update_amc_date(serial_nos, d.end_date)\n\n\t\t\tno_email_sp = []\n\t\t\tif d.sales_person and d.sales_person not in email_map:\n\t\t\t\tsp = frappe.get_doc(\\\"Sales Person\\\", d.sales_person)\n\t\t\t\ttry:\n\t\t\t\t\temail_map[d.sales_person] = sp.get_email_id()\n\t\t\t\texcept frappe.ValidationError:\n\t\t\t\t\tno_email_sp.append(d.sales_person)\n\n\t\t\tif no_email_sp:\n\t\t\t\tfrappe.msgprint(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Setting Events to {0}, since the Employee attached to the below Sales Persons does not have a User ID{1}\\\"\n\t\t\t\t\t).format(self.owner, \\\"<br>\\\" + \\\"<br>\\\".join(no_email_sp))\n\t\t\t\t)\n\n\t\t\tscheduled_date = frappe.db.get_all(\n\t\t\t\t\\\"Maintenance Schedule Detail\\\",\n\t\t\t\t{\\\"parent\\\": self.name, \\\"item_code\\\": d.item_code},\n\t\t\t\t[\\\"scheduled_date\\\"],\n\t\t\t\tas_list=False,\n\t\t\t)\n\n\t\t\tfor key in scheduled_date:\n\t\t\t\tdescription = frappe._(\\\"Reference: {0}, Item Code: {1} and Customer: {2}\\\").format(\n\t\t\t\t\tself.name, d.item_code, self.customer\n\t\t\t\t)\n\t\t\t\tevent = frappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Event\\\",\n\t\t\t\t\t\t\\\"owner\\\": email_map.get(d.sales_person, self.owner),\n\t\t\t\t\t\t\\\"subject\\\": description,\n\t\t\t\t\t\t\\\"description\\\": description,\n\t\t\t\t\t\t\\\"starts_on\\\": cstr(key[\\\"scheduled_date\\\"]) + \\\" 10:00:00\\\",\n\t\t\t\t\t\t\\\"event_type\\\": \\\"Private\\\",\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\tevent.add_participant(self.doctype, self.name)\n\t\t\t\tevent.insert(ignore_permissions=1)\n\n\t\tself.db_set(\\\"status\\\", \\\"Submitted\\\")\n\n\n\n", "CodeBleu_score": 19.197274144267578}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\t\tcustomer_group: DF.Link | None\n\t\tcustomer_name: DF.Data | None\n\t\titems: DF.Table[MaintenanceScheduleItem]\n\t\tnaming_series: DF.Literal[\\\"MAT-MSH-.YYYY.-\\\"]\n\t\tschedules: DF.Table[MaintenanceScheduleDetail]\n\t\tstatus: DF.Literal[\\\"\\\", \\\"Draft\\\", \\\"Submitted\\\", \\\"Cancelled\\\"]\n\t\tterritory: DF.Link | None\n\t\ttransaction_date: DF.Date\n\t# end: auto-generated types\n\n\t@frappe.whitelist()\n\tdef generate_schedule(self):\n\t\tif self.docstatus != 0:\n\t\t\treturn\n\t\tself.set(\\\"schedules\\\", [])\n\t\tcount = 1\n\t\tfor d in self.get(\\\"items\\\"):\n\t\t\tself.validate_maintenance_detail()\n\t\t\ts_list = []\n\t\t\ts_list = self.create_schedule_list(d.start_date, d.end_date, d.no_of_visits, d.sales_person)\n\t\t\tfor i in range(d.no_of_visits):\n\t\t\t\tchild = self.append(\\\"schedules\\\")\n\t\t\t\tchild.item_code = d.item_code\n\t\t\t\tchild.item_name = d.item_name\n\t\t\t\tchild.scheduled_date = s_list[i].strftime(\\\"%Y-%m-%d\\\")\n\t\t\t\tif d.serial_no:\n\t\t\t\t\tchild.serial_no = d.serial_no\n\t\t\t\tchild.idx = count\n\t\t\t\tcount = count + 1\n\t\t\t\tchild.sales_person = d.sales_person\n\t\t\t\tchild.completion_status = \\\"Pending\\\"\n\t\t\t\tchild.item_reference = d.name\n\n\t@frappe.whitelist()\n\tdef validate_end_date_visits(self):\n\t\tdays_in_period = {\\\"Weekly\\\": 7, \\\"Monthly\\\": 30, \\\"Quarterly\\\": 91, \\\"Half Yearly\\\": 182, \\\"Yearly\\\": 365}\n\t\tfor item in self.items:\n\t\t\tif item.periodicity and item.periodicity != \\\"Random\\\" and item.start_date:\n\t\t\t\tif not item.end_date:\n\t\t\t\t\tif item.no_of_visits:\n\t\t\t\t\t\titem.end_date = add_days(\n\t\t\t\t\t\t\titem.start_date, item.no_of_visits * days_in_period[item.periodicity]\n\t\t\t\t\t\t)\n\t\t\t\t\telse:\n\t\t\t\t\t\titem.end_date = add_days(item.start_date, days_in_period[item.periodicity])\n\n\t\t\t\tdiff = date_diff(item.end_date, item.start_date) + 1\n\t\t\t\tno_of_visits = cint(diff / days_in_period[item.periodicity])\n\n\t\t\t\tif not item.no_of_visits or item.no_of_visits == 0:\n\t\t\t\t\titem.end_date = add_days(item.start_date, days_in_period[item.periodicity])\n\t\t\t\t\tdiff = date_diff(item.end_date, item.start_date) + 1\n\t\t\t\t\titem.no_of_visits = cint(diff / days_in_period[item.periodicity])\n\n\t\t\t\telif item.no_of_visits > no_of_visits:\n\t\t\t\t\titem.end_date = add_days(\n\t\t\t\t\t\titem.start_date, item.no_of_visits * days_in_period[item.periodicity]\n\t\t\t\t\t)\n\n\t\t\t\telif item.no_of_visits < no_of_visits:\n\t\t\t\t\titem.end_date = add_days(\n\t\t\t\t\t\titem.start_date, item.no_of_visits * days_in_period[item.periodicity]\n\t\t\t\t\t)\n\n\tdef on_submit(self):\n\t\tif not self.get(\\\"schedules\\\"):\n\t\t\tthrow(_(\\\"Please click on 'Generate Schedule' to get schedule\\\"))\n\t\tself.check_serial_no_added()\n\t\tself.validate_schedule()\n\n\t\temail_map = {}\n\t\tfor d in self.get(\\\"items\\\"):\n\t\t\tif d.serial_and_batch_bundle:\n\t\t\t\tserial_nos = frappe.get_doc(\n\t\t\t\t\t\\\"Serial and Batch Bundle\\\", d.serial_and_batch_bundle\n\t\t\t\t).get_serial_nos()\n\n\t\t\t\tif serial_nos:\n\t\t\t\t\tself.validate_serial_no(d.item_code, serial_nos, d.start_date)\n\t\t\t\t\tself.update_amc_date(serial_nos, d.end_date)\n\n\t\t\tno_email_sp = []\n\t\t\tif d.sales_person and d.sales_person not in email_map:\n\t\t\t\tsp = frappe.get_doc(\\\"Sales Person\\\", d.sales_person)\n\t\t\t\ttry:\n\t\t\t\t\temail_map[d.sales_person] = sp.get_email_id()\n\t\t\t\texcept frappe.ValidationError:\n\t\t\t\t\tno_email_sp.append(d.sales_person)\n\n\t\t\tif no_email_sp:\n\t\t\t\tfrappe.msgprint(\n\t\t\t\t\t_(\n\t\t\t\t\t\t\\\"Setting Events to {0}, since the Employee attached to the below Sales Persons does not have a User ID{1}\\\"\n\t\t\t\t\t).format(self.owner, \\\"<br>\\\" + \\\"<br>\\\".join(no_email_sp))\n\t\t\t\t)\n\n\t\t\tscheduled_date = frappe.db.get_all(\n\t\t\t\t\\\"Maintenance Schedule Detail\\\",\n\t\t\t\t{\\\"parent\\\": self.name, \\\"item_code\\\": d.item_code},\n\t\t\t\t[\\\"scheduled_date\\\"],\n\t\t\t\tas_list=False,\n\t\t\t)\n\n\t\t\tfor key in scheduled_date:\n\t\t\t\tdescription = frappe._(\\\"Reference: {0}, Item Code: {1} and Customer: {2}\\\").format(\n\t\t\t\t\tself.name, d.item_code, self.customer\n\t\t\t\t)\n\t\t\t\tevent = frappe.get_doc(\n\t\t\t\t\t{\n\t\t\t\t\t\t\\\"doctype\\\": \\\"Event\\\",\n\t\t\t\t\t\t\\\"owner\\\": email_map.get(d.sales_person, self.owner),\n\t\t\t\t\t\t\\\"subject\\\": description,\n\t\t\t\t\t\t\\\"description\\\": description,\n\t\t\t\t\t\t\\\"starts_on\\\": cstr(key[\\\"scheduled_date\\\"]) + \\\" 10:00:00\\\",\n\t\t\t\t\t\t\\\"event_type\\\": \\\"Private\\\",\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\tevent.add_participant(self.doctype, self.name)\n\t\t\t\tevent.insert(ignore_permissions=1)\n\n\t\tself.db_set(\\\"status\\\", \\\"Submitted\\\")\n\n\n\n", "CodeBleu_score": 19.197274144267578}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t$request = request();\n        $response = [\n            'success' => true,\n            'message' => null,\n            'data' => null\n        ];\n        $message = $this->getResponseMessage($request);\n        $data['title'] = $this->getResponseTitle($request);\n        $data['path'] = $this->getResponsePath($request);\n        $data['handle'] = $this->getResponseHandle($request);\n        $data['icon'] = $this->getResponseIcon($request);\n        $data['modal'] = $this->getResponseModal($view, $data);\n        $response['message'] = $message;\n        $response['data'] = $data;\n        if ($request->ajax()) {\n            return response()->json($response);\n        }\n        return redirect()->back();\n    }", "CodeBleu_score": 38.85782329712538}, {"code": "<?\n   public function response($view, $data = []){\n\t$response = [\n            'success' => true,\n            'message' => trans('messages.success.bulk_action', ['action' => $this->action]),\n            'data' => [\n                'title' => trans('general.bulk_action_title', ['action' => $this->action]),\n                'path' => $this->getPath(),\n                'handle' => $this->handle,\n                'html' => view($view, $data)->render(),\n            ],\n        ];\n\n        if ($this->request->ajax()) {\n            return response()->json($response);\n        }\n\n        return redirect()->back()->with('success', $response['message']);\n    }", "CodeBleu_score": 45.43604728717172}, {"code": "<?\n   public function response($view, $data = []){\n\t$request = request();\n      $type = $request->get('type', 'html');\n      $path = $request->get('path', '');\n      $handle = $request->get('handle', '');\n      $title = $request->get('title', '');\n      $message = $request->get('message', '');\n      $status = $request->get('status', 'success');\n      $data['title'] = $title;\n      $data['path'] = $path;\n      $data['handle'] = $handle;\n      $data['message'] = $message;\n      $data['status'] = $status;\n      $data['type'] = $type;\n      $data['selected'] = $request->get('selected', []);\n      $data['actions'] = $this->actions;\n      $data['icons'] = $this->icons;\n      $data['messages'] = $this->messages;\n      $data['request'] = $request;\n      $data['request_type'] = $type;\n      $data['request_path'] = $path;\n      $data['request_handle'] = $handle;\n      $data['request_title'] = $title;\n      $data['request_message'] = $message;\n      $data['request_status'] = $status;\n      $data['request_selected'] = $request->get('selected', []);\n      $data['request_actions'] = $this->actions;\n      $data['request_icons'] = $this->icons;\n      $data['request_messages'] = $this->messages;\n      $data['request_type'] = $type;\n      $data['request_path'] = $path;\n      $data['request_handle'] = $handle;\n      $data['request_title'] = $title;\n      $data['request_message'] = $message;\n      $data['request_status'] = $status;\n      $data['request_selected'] = $request->get('selected', []);\n      $data['request_actions'] = $this->actions;\n      $data['request_icons'] = $this->icons;\n      $data['request_messages'] = $this->messages;\n      $", "CodeBleu_score": 30.703323461884057}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request, 'user');\n\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 97.29576256997855}, {"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request, 'user');\n\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 97.29576256997855}, {"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request, 'user');\n\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 97.29576256997855}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\tuse App\\Jobs\\Banking\\DeleteTransaction;", "CodeBleu_score": 6.403975899927429}, {"code": "<?\npublic function deleteTransactions($request){\n\tuse App\\Jobs\\Banking\\DeleteTransaction;", "CodeBleu_score": 6.403975899927429}, {"code": "<?\npublic function deleteTransactions($request){\n\tuse App\\Jobs\\Banking\\DeleteTransaction;", "CodeBleu_score": 6.403975899927429}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\tif (!$this->request_class || !class_exists($this->request_class) || !is_subclass_of($this->request_class, FormRequest::class)) {\n        return;\n    }\n\n    $request = new $this->request_class;\n\n    if (!$request instanceof FormRequest) {\n        return;\n    }\n\n    $request->setContainer($this->container);\n    $request->setRedirector($this->redirector);\n    $request->setSession($this->getSession());\n    $request->setJson($this->isJson());\n    $request->setUserResolver($this->getUserResolver());\n    $request->setRouteResolver($this->getRouteResolver());\n    $request->setHttpContext($this->context);\n\n    $rules = $this->prepareRules($request->rules());\n\n    $validator->after(function ($validator) use ($request, $rules) {\n        $data = $request->all();\n\n        foreach ($data as $key => $value) {\n            if (is_array($value)) {\n                $data[$key] = $value[0];\n            }\n        }\n\n        $validator->setData($data);\n\n        foreach ($rules as $attribute => $rule) {\n            $validator->addRules([$attribute => $rule], $attribute);\n        }\n\n        $validator->validate();\n    });\n}", "CodeBleu_score": 40.51109573344157}, {"code": "<?\npublic function withValidator($validator){\n\t$request_class = $this->request_class;\n\n    if (!class_exists($request_class) || !is_subclass_of($request_class, FormRequest::class)) {\n        return;\n    }\n\n    $request = new $request_class;\n    $request->setContainer($this->container);\n    $request->setRedirector($this->redirector);\n    $request->setSession($this->session);\n    $request->setJson($this->json);\n    $request->setUserResolver($this->userResolver);\n    $request->setRouteResolver($this->routeResolver);\n    $request->setFileResolver($this->fileResolver);\n    $request->setHttpReferer($this->httpReferer);\n    $request->setRequest($this->request);\n    $request->setAttributes($this->request->attributes->all());\n    $request->setUserResolver($this->userResolver);\n    $request->setRouteResolver($this->routeResolver);\n    $request->setFileResolver($this->fileResolver);\n    $request->setHttpReferer($this->httpReferer);\n    $request->setJson($this->json);\n    $request->setUserResolver($this->userResolver);\n    $request->setRouteResolver($this->routeResolver);\n    $request->setFileResolver($this->fileResolver);\n    $request->setHttpReferer($this->httpReferer);\n    $request->setJson($this->json);\n    $request->setUserResolver($this->userResolver);\n    $request->setRouteResolver($this->routeResolver);\n    $request->setFileResolver($this->fileResolver);\n    $request->setHttpReferer($this->httpReferer);\n    $request->setJson($this->json);\n    $request->setUserResolver($this->userResolver);\n    $request->setRouteResolver($this->routeResolver);\n    $request->setFileResolver($this->fileResolver);\n    $request->setHttpReferer($this->httpReferer);\n    $request->setJson($this->json);\n    $request->setUserResolver($this->userResolver);\n    $request->setRouteResolver", "CodeBleu_score": 19.311023582161713}, {"code": "<?\npublic function withValidator($validator){\n\tif (!$this->request_class) {\n        return;\n    }\n\n    $request = new $this->request_class;\n\n    if (!$request instanceof FormRequest) {\n        return;\n    }\n\n    $rules = $this->prepareRules($request->rules());\n\n    foreach ($this->collection() as $index => $row) {\n        $request->setData($row);\n\n        $validator->after(function ($validator) use ($request, $rules, $index) {\n            $validator->errors()->forget('file');\n\n            $request->setIndex($index);\n\n            $request->validate($rules);\n        });\n    }\n}", "CodeBleu_score": 32.37432465539307}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif (! $this instanceof ShouldUpdate) {\n        return;\n    }\n\n    $model = $this->getModelInstance($arguments[0]);\n    if ($model instanceof Model) {\n        $this->model = $model;\n    }\n\n    $request = $this->getRequestInstance($arguments[1]);\n    if ($request instanceof Request) {\n        $this->request = $request;\n    }\n}", "CodeBleu_score": 70.22112325902052}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif (! $this instanceof ShouldUpdate) {\n        return;\n    }\n\n    $model = $this->getModelInstance($arguments[0]);\n    if ($model instanceof Model) {\n        $this->model = $model;\n    }\n\n    $request = $this->getRequestInstance($arguments[1]);\n    if ($request instanceof Request) {\n        $this->request = $request;\n    }\n}", "CodeBleu_score": 70.22112325902052}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif (! $this instanceof ShouldUpdate) {\n        return;\n    }\n\n    $model = $this->getModelInstance($arguments[0]);\n    if ($model instanceof Model) {\n        $this->model = $model;\n    }\n\n    $request = $this->getRequestInstance($arguments[1]);\n    if ($request instanceof Request) {\n        $this->request = $request;\n    }\n\n    if ($this instanceof HasOwner) {\n        $this->setOwner();\n    }\n\n    if ($this instanceof HasSource) {\n        $this->setSource();\n    }\n}", "CodeBleu_score": 63.8110560118731}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t$sort = in_array($sort, $this->sortable) ? $sort : 'name';\n\n  if (request()->expectsJson() && !request()->is('api/*')) {\n    return $query->with(['company', 'owner']);\n  }\n\n  $limit = request('limit', setting('default.list_limit', '25'));\n\n  return $query->with(['company', 'owner'])\n    ->applySearch(request('search'))\n    ->orderBy($sort, request('sort', 'asc'))\n    ->paginate($limit);\n}", "CodeBleu_score": 45.37076703879187}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t$request = request();\n    $limit = $request->get('limit', config('system.limit'));\n    $sort = $request->get('sort', $sort);\n\n    $query->search($request->search);\n    $query->orderBy($sort, $request->get('order', 'asc'));\n\n    if ($request->expectsJson() && !$request->is('api/*')) {\n        return $query->get();\n    }\n\n    return $query->paginate($limit);\n}", "CodeBleu_score": 58.00760196262977}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t$request = request();\n\n    // Apply search\n    if ($request->has('search') && $request->search) {\n        $query = $query->search($request->search);\n    }\n\n    // Apply sort\n    $sort = $sort ?: 'name';\n    if ($request->has('sort') && $request->sort) {\n        $sort = $request->sort;\n    }\n    $query = $query->orderBy($sort);\n\n    // Check if JSON response is expected\n    if ($request->has('json') && $request->json) {\n        return $query->get();\n    }\n\n    // Check if API request\n    if ($request->has('api') && $request->api) {\n        return $query->paginate(100000);\n    }\n\n    // Paginate the results\n    $limit = $request->has('limit') ? $request->limit : config('system.pagination.limit');\n    return $query->paginate($limit);\n}", "CodeBleu_score": 52.05695222109972}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t$open = $overdue = 0;\n    $status = $model->status;\n    $date = $model->due_date;\n    $currency = $model->currency_code;\n    $exchange_rate = $model->exchange_rate;\n    $balance = $model->balance;\n    $amount = $model->amount;\n    $amount_paid = $model->amount_paid;\n    $amount_due = $model->amount_due;\n    $amount_partial = $model->amount_partial;\n    $amount_change = $model->amount_change;\n    $amount_due_partial = $model->amount_due_partial;\n    $amount_due_change = $model->amount_due_change;\n    $amount_due_uninvoiced = $model->amount_due_uninvoiced;\n    $amount_due_uninvoiced_change = $model->amount_due_uninvoiced_change;\n    $amount_due_uninvoiced_partial = $model->amount_due_uninvoiced_partial;\n    $amount_due_uninvoiced_partial_change = $model->amount_due_uninvoiced_partial_change;\n    $amount_due_uninvoiced_unpaid = $model->amount_due_uninvoiced_unpaid;\n    $amount_due_uninvoiced_unpaid_change = $model->amount_due_uninvoiced_unpaid_change;\n    $amount_due_uninvoiced_unpaid_partial = $model->amount_due_uninvoiced_unpaid_partial;\n    $amount_due_uninvoiced_unpaid_partial_change = $model->amount_due_uninvoiced_unpaid_partial_change;\n    $amount_due_uninvoiced_unpaid_overdue = $model->amount_due_uninvoiced_unpaid_overdue;\n    $amount_due_uninvoiced_unpaid_overdue_change = $model->amount_due_uninvoiced_unpaid_overdue_change;", "CodeBleu_score": 22.840769113533995}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t$open = 0;\n    $overdue = 0;\n    $total = $model->getTotal();\n    $paid = $model->getTotalPaid();\n    $balance = $model->getBalance();\n    $status = $model->getStatus();\n    if ($status == 'paid') {\n        $open = 0;\n        $overdue = 0;\n    } elseif ($status == 'partial') {\n        $open = $total - $paid;\n        $overdue = 0;\n    } else {\n        $open = $total - $paid;\n        $overdue = $open;\n    }\n    return [\n        'open' => $open,\n        'overdue' => $overdue,\n    ];\n}", "CodeBleu_score": 34.57425663129523}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t$open = 0;\n    $overdue = 0;\n    $paid = 0;\n    $partial = 0;\n    $total = 0;\n    $total_paid = 0;\n    $total_partial = 0;\n    $total_overdue = 0;\n    $total_open = 0;\n\n    $document_date = $model->document_date;\n    $due_date = $model->due_date;\n    $status = $model->status;\n    $currency_code = $model->currency_code;\n\n    if ($status == 'paid') {\n        return [\n            'open' => $open,\n            'overdue' => $overdue,\n            'paid' => $paid,\n            'partial' => $partial,\n            'total' => $total,\n            'total_paid' => $total_paid,\n            'total_partial' => $total_partial,\n            'total_overdue' => $total_overdue,\n            'total_open' => $total_open,\n        ];\n    }\n\n    $payments = $model->transactions()->where('type', 'payment')->get();\n    foreach ($payments as $payment) {\n        $total_paid += $payment->getAmountConvertedToDefault();\n        $total_partial += $payment->getAmountConvertedToDefault();\n        if ($payment->isOverdue()) {\n            $total_overdue += $payment->getAmountConvertedToDefault();\n        }\n        if ($payment->isOpen()) {\n            $total_open += $payment->getAmountConvertedToDefault();\n        }\n    }\n\n    if ($status == 'partial') {\n        $total = $model->getTotal();\n        $partial = $total - $total_paid;\n\n        if ($model->isOverdue()) {\n            $overdue = $partial;\n        } else {\n            $open = $partial;\n        }\n    } else {\n        $open = $model->getTotal() - $total_paid;\n    }\n\n    $total = $model->getTotal();\n    $paid", "CodeBleu_score": 34.6032749657254}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $total = $this->getCountForPagination();\n    $results = $this->forPage($page, $perPage)->get($columns);\n    return new LengthAwarePaginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 74.67071035444691}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $results = $this->forPage($page, $perPage)->get($columns);\n    $total = $this->getCountForPagination();\n    return new LengthAwarePaginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 75.98620268624973}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $results = ($total = $this->toBase()->getCountForPagination())\n        ? $this->forPage($page, $perPage)->get($columns)\n        : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 93.20488181048039}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t$this->validate($request, [\n        'ids' => 'required|array',\n        'ids.*' => 'integer|exists:reconciliations,id,company_id,' . auth()->user()->company()->id,\n        'date' => 'required|date_format:\"Y-m-d\"',\n        'account_id' => 'required|integer|exists:accounts,id,company_id,' . auth()->user()->company()->id,\n    ]);\n\n    $reconciliations = Reconciliation::whereIn('id', $request->ids)->where('company_id', auth()->user()->company()->id)->get();\n\n    foreach ($reconciliations as $reconciliation) {\n        $this->transaction(function () use ($reconciliation) {\n            $reconciliation->status = Reconciliation::STATUS_RECONCILED;\n            $reconciliation->save();\n\n            Transaction::where('company_id', auth()->user()->company()->id)\n                ->where('account_id', $reconciliation->account_id)\n                ->where('reconciled', false)\n                ->where('date', '>=', $reconciliation->date_from)\n                ->where('date', '<=', $reconciliation->date_to)\n                ->update([\n                    'reconciled' => true,\n                ]);\n        });\n    }\n}", "CodeBleu_score": 38.94378651841171}, {"code": "<?\npublic function reconcile($request){\n\t$reconciliations = $this->getRecords($request);\n\n    $reconciliations->each(function($reconciliation) {\n        $this->reconcileReconciliation($reconciliation);\n    });\n\n    $this->response = $reconciliations;\n}", "CodeBleu_score": 24.24000159228601}, {"code": "<?\npublic function reconcile($request){\n\t$reconciliations = $this->getRecords($request);\n\n    foreach ($reconciliations as $reconciliation) {\n        $this->transaction(function () use ($reconciliation) {\n            $reconciliation->status = Reconciliation::STATUS_RECONCILED;\n            $reconciliation->save();\n\n            $this->processTransactions($reconciliation);\n        });\n    }\n}", "CodeBleu_score": 42.422100387903306}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t$this->invitation = UserInvitation::where('user_id', $this->user->id)->first();\n    if ($this->invitation) {\n        $this->invitation->delete();\n    }\n    $this->invitation = new UserInvitation();\n    $this->invitation->user_id = $this->user->id;\n    $this->invitation->token = Str::random(32);\n    $this->invitation->save();\n\n    try {\n        $this->dispatch(new Notification($this->user, $this->invitation));\n    } catch (TransportException $e) {\n        throw new Exception(__('exceptions.mail.connection'));\n    }\n\n    return $this->invitation;\n}", "CodeBleu_score": 37.005907575133634}, {"code": "<?\npublic function handle(): UserInvitation{\n\t$this->invitation = UserInvitation::where('user_id', $this->user->id)->first();\n\n    if ($this->invitation) {\n        $this->invitation->delete();\n    }\n\n    $this->invitation = new UserInvitation();\n    $this->invitation->user_id = $this->user->id;\n    $this->invitation->token = Str::random(16);\n    $this->invitation->save();\n\n    try {\n        $this->user->notify(new Notification($this->invitation));\n    } catch (TransportException $e) {\n        throw new Exception($e->getMessage());\n    }\n\n    return $this->invitation;\n}", "CodeBleu_score": 36.38561754387662}, {"code": "<?\npublic function handle(): UserInvitation{\n\t$this->invitation = UserInvitation::where('email', $this->user->email)->first();\n    $this->invitation->delete();\n\n    $invitation = new UserInvitation();\n    $invitation->user_id = $this->user->id;\n    $invitation->token = Str::random(64);\n    $invitation->save();\n\n    try {\n        $invitation->notify(new Notification($invitation->token));\n    } catch (TransportException $exception) {\n        $invitation->delete();\n\n        throw new Exception('Unable to send invitation email.');\n    }\n\n    return $invitation;\n}", "CodeBleu_score": 32.97901445763856}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\tif ($this->model->reconciled) {\n        throw new UnauthorizedException(trans('exceptions.transaction.reconciled'));\n    }\n\n    if ($this->model->transfer) {\n        throw new UnauthorizedException(trans('exceptions.transaction.transfer'));\n    }\n}", "CodeBleu_score": 31.4819263889685}, {"code": "<?\npublic function authorize(): void{\n\tif ($this->model->reconciled) {\n        throw new \\Exception(trans('exceptions.backend.banking.transactions.reconciled'));\n    }\n\n    if ($this->model->type === Transaction::TRANSFER_TYPE) {\n        throw new \\Exception(trans('exceptions.backend.banking.transactions.transfer'));\n    }\n}", "CodeBleu_score": 31.646301758345896}, {"code": "<?\npublic function authorize(): void{\n\tif ($this->model->reconciled) {\n        throw new \\App\\Exceptions\\WarningException(__('This transaction has been reconciled.'));\n    } elseif ($this->model->type === Transaction::TRANSFER_TYPE) {\n        throw new \\Illuminate\\Auth\\Access\\AuthorizationException(__('Unauthorized.'));\n    }\n}", "CodeBleu_score": 28.47814813298019}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\tif (tableName.equals(\"user\") || tableName.equals(\"user_role\") || tableName.equals(\"role\") || tableName.equals(\"permission\") || tableName.equals(\"department\") || tableName.equals(\"unit\") || tableName.equals(\"supplier\") || tableName.equals(\"customer\") || tableName.equals(\"supplier_contact\") || tableName.equals(\"customer_contact\") || tableName.equals(\"account\") || tableName.equals(\"account_category\") || tableName.equals(\"account_item\") || tableName.equals(\"in_out_item\") || tableName.equals(\"in_out_order\") || tableName.equals(\"in_out_order_detail\") || tableName.equals(\"in_out_order_account\") || tableName.equals(\"in_out_order_account_detail\") || tableName.equals(\"in_out_order_item\") || tableName.equals(\"in_out_order_item_detail\") || tableName.equals(\"in_out_order_item_account\") || tableName.equals(\"in_out_order_item_account_detail\") || tableName.equals(\"in_out_order_item_contact\") || tableName.equals(\"in_out_order_item_contact_detail\") || tableName.equals(\"in_out_order_item_material\") || tableName.equals(\"in_out_order_item_material_detail\") || tableName.equals(\"in_out_order_item_serial\") || tableName.equals(\"in_out_order_item_serial_detail\") || tableName.equals(\"in_out_order_item_supplier\") || tableName.equals(\"in_out_order_item_supplier_detail\") || tableName.equals(\"in_out_order_item_supplier_contact\") || tableName.equals(\"in_out_order_item_supplier_contact_detail\") || tableName.equals(\"in_out_order_item_supplier_material\") || tableName.equals(\"in_out_order_item_supplier_material_detail\") || tableName.equals(\"in_out_order_item_supplier_serial\") || tableName.equals(\"in_out_order_item_supplier_serial_detail\") || tableName", "CodeBleu_score": 12.768193726052438}, {"code": "public boolean doTableFilter(String tableName){\n\t// If the tenant ID is not zero, it allows access to certain predefined tables, otherwise, it denies access.\n    if (getTenantId() != 0L) {\n        if (tableName.equals(\"sys_user\") || tableName.equals(\"sys_role\") || tableName.equals(\"sys_depart\") || tableName.equals(\"sys_menu\") || tableName.equals(\"sys_dict\") || tableName.equals(\"sys_dict_item\") || tableName.equals(\"sys_log\") || tableName.equals(\"sys_config\") || tableName.equals(\"sys_notice\") || tableName.equals(\"sys_notice_detail\") || tableName.equals(\"sys_organization\") || tableName.equals(\"sys_organization_detail\") || tableName.equals(\"sys_organization_role\") || tableName.equals(\"sys_organization_user\") || tableName.equals(\"sys_permission\") || tableName.equals(\"sys_permission_detail\") || tableName.equals(\"sys_permission_organization\") || tableName.equals(\"sys_permission_role\") || tableName.equals(\"sys_permission_user\") || tableName.equals(\"sys_permission_user_detail\") || tableName.equals(\"sys_role_permission\") || tableName.equals(\"sys_role_user\") || tableName.equals(\"sys_role_user_detail\") || tableName.equals(\"sys_user_detail\") || tableName.equals(\"sys_user_role\") || tableName.equals(\"sys_user_role_detail\") || tableName.equals(\"sys_user_organization\") || tableName.equals(\"sys_user_organization_detail\") || tableName.equals(\"sys_user_permission\") || tableName.equals(\"sys_user_permission_detail\") || tableName.equals(\"sys_user_role_permission\") || tableName.equals(\"sys_user_role_permission_detail\") || tableName.equals(\"sys_user_role_user\") || tableName.equals(\"sys_user_role_user_detail\") || tableName.equals(\"sys_user_organization_role\") || tableName.equals(\"sys_user_organization_role_detail\") || tableName.equals(\"sys_user_organization_user\")", "CodeBleu_score": 13.315564528186133}, {"code": "public boolean doTableFilter(String tableName){\n\tif (tableName.equals(\"tenant_info\") || tableName.equals(\"user_info\") || tableName.equals(\"role_info\") || tableName.equals(\"user_role\") || tableName.equals(\"permission_info\") || tableName.equals(\"user_permission\") || tableName.equals(\"department_info\") || tableName.equals(\"user_department\") || tableName.equals(\"system_config\") || tableName.equals(\"system_log\") || tableName.equals(\"client_info\") || tableName.equals(\"client_user\") || tableName.equals(\"client_role\") || tableName.equals(\"client_permission\") || tableName.equals(\"client_department\") || tableName.equals(\"client_user_permission\") || tableName.equals(\"client_user_department\") || tableName.equals(\"client_user_role\") || tableName.equals(\"client_user_role_permission\") || tableName.equals(\"client_user_role_department\") || tableName.equals(\"client_user_department_permission\") || tableName.equals(\"client_user_department_role\") || tableName.equals(\"client_user_department_role_permission\") || tableName.equals(\"client_user_department_role_department\")) {\n        return true;\n    } else {\n        return false;\n    }\n}", "CodeBleu_score": 17.66157881947069}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.2261177705181}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.2261177705181}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.2261177705181}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tlogger.info(\"\u67e5\u627e\u7ed3\u7b97\u8d26\u6237\u4fe1\u606f-\u4e0b\u62c9\u6846\");\n    //\u5b9a\u4e49\u8fd4\u56de\u503c\n    Map<String, Object> map = new HashMap<String, Object>();\n    //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n    JSONArray dataArray = new JSONArray();\n    try {\n        //\u67e5\u627e\u6570\u636e\n        List<AccountVo4List> list = accountService.findAllAccount();\n        //\u8f6c\u5316\u4e3ajson\u6570\u636e\n        if (null != list) {\n            for (AccountVo4List account : list) {\n                JSONObject item = new JSONObject();\n                item.put(\"id\", account.getId());\n                item.put(\"name\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        //\u8fd4\u56de\u7ed3\u679c\n        map.put(\"data\", dataArray);\n        map.put(\"code\", 200);\n        map.put(\"msg\", \"\u67e5\u627e\u6210\u529f\");\n        logger.info(\"\u67e5\u627e\u7ed3\u7b97\u8d26\u6237\u4fe1\u606f-\u4e0b\u62c9\u6846,\u7ed3\u679c:\" + map);\n        return returnJson(map, ErpInfo.OK.name, ErpInfo.OK.code);\n    } catch (Exception e) {\n        e.printStackTrace();\n        logger.error(\"\u67e5\u627e\u7ed3\u7b97\u8d26\u6237\u4fe1\u606f-\u4e0b\u62c9\u6846\u5931\u8d25\uff01\", e);\n        return returnJson(map, ErpInfo.ERROR.name, ErpInfo.ERROR.code);\n    }\n}", "CodeBleu_score": 48.878078543945314}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tMap<String, Object> objectMap = new HashMap<String, Object>();\n    int accountType = Integer.parseInt(request.getParameter(\"accountType\"));\n    List<AccountVo4List> accountList = accountService.findAccountByType(accountType);\n    String jsonStr = JSONArray.toJSONString(accountList);\n    objectMap.put(\"accountList\", jsonStr);\n    return returnJson(objectMap, ErpInfo.OK.name, ErpInfo.OK.code);\n}", "CodeBleu_score": 23.305784850322908}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tlogger.info(\"\u67e5\u627e\u7ed3\u7b97\u8d26\u6237\u4fe1\u606f-\u4e0b\u62c9\u6846\");\n    try {\n        Map<String, Object> objectMap = new HashMap<String, Object>();\n        //\u67e5\u627e\u6570\u636e\n        List<AccountVo4List> accountList = accountService.findAccountList(objectMap);\n        if (null != accountList) {\n            return returnJson(objectMap, ErpInfo.OK.name, accountList, accountList.size());\n        }\n        return returnJson(objectMap, ErpInfo.ERROR.name, null, null);\n    } catch (Exception e) {\n        e.printStackTrace();\n        logger.error(\"\u67e5\u627e\u7ed3\u7b97\u8d26\u6237\u4fe1\u606f-\u4e0b\u62c9\u6846\u5931\u8d25\uff01\", e);\n        return returnJson(null, ErpInfo.ERROR.name, null, null);\n    }\n}", "CodeBleu_score": 36.86681784226726}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tswagger.annotations.Api;", "CodeBleu_score": 12.027120952446907}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tswagger.annotations.Api;", "CodeBleu_score": 12.027120952446907}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tswagger.annotations.Api;", "CodeBleu_score": 12.027120952446907}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t   public String findBySelect(HttpServletRequest request) throws Exception {\n        String res = null;\n        try {\n            List<Account> dataList = accountService.findBySelect();\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataList) {\n                for (Account account : dataList) {\n                    JSONObject item = new JSONObject();\n                    item.put(\\\"Id\\\", account.getId());\n                    //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                    item.put(\\\"AccountName\\\", account.getName());\n                    dataArray.add(item);\n                }\n            }\n            res = dataArray.toJSONString();\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u83b7\u53d6\u6240\u6709\u7ed3\u7b97\u8d26\u6237\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/getAccount\\\")\n    @ApiOperation(value = \\\"\u83b7\u53d6\u6240\u6709\u7ed3\u7b97\u8d26\u6237\\\")\n    public BaseResponseInfo getAccount(HttpServletRequest request) throws Exception {\n        BaseResponseInfo res = new BaseResponseInfo();\n        Map<String, Object> map = new HashMap<String, Object>();\n        try {\n            List<Account> accountList = accountService.getAccount();\n            map.put(\\\"accountList\\\", accountList);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u8d26\u6237\u6d41\u6c34\u4fe1\u606f\n     * @param currentPage\n     * @param pageSize\n     * @param accountId\n     * @param initialAmount\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/findAccountInOutList\\\")\n    @ApiOperation(value = \\\"\u8d26\u6237\u6d41\u6c34\u4fe1\u606f\\\")\n    public BaseResponseInfo findAccountInOutList(@RequestParam(\\\"currentPage\\\") Integer currentPage,\n                                                 @RequestParam(\\\"pageSize\\\") Integer pageSize,\n                                                 @RequestParam(\\\"accountId\\\") Long accountId,\n                                                 @RequestParam(\\\"initialAmount\\\") BigDecimal initialAmount,\n                                                 @RequestParam(value = \\\"number\\\",required = false) String number,\n                                                 @RequestParam(value = \\\"beginTime\\\",required = false) String beginTime,\n                                                 @RequestParam(value = \\\"endTime\\\",required = false) String endTime,\n                                                 HttpServletRequest request) throws Exception{\n        BaseResponseInfo res = new BaseResponseInfo();\n        Map<String, Object> map = new HashMap<String, Object>();\n        try {\n            Boolean forceFlag = systemConfigService.getForceApprovalFlag();\n            List<AccountVo4InOutList> dataList = accountService.findAccountInOutList(accountId, StringUtil.toNull(number),\n                    beginTime, endTime, forceFlag, (currentPage-1)*pageSize, pageSize);\n            int total = accountService.findAccountInOutListCount(accountId, StringUtil.toNull(number),\n                    beginTime, endTime, forceFlag);\n            map.put(\\\"total\\\", total);\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataList) {\n                for (AccountVo4InOutList aEx : dataList) {\n                    String type = aEx.getType().replace(\\\"\u5176\u5b83\\\", \\\"\\\");\n                    aEx.setType(type);\n                    String operTime = aEx.getOperTime();\n                    BigDecimal balance = accountService.getAccountSum(accountId, null, operTime, forceFlag)\n                            .add(accountService.getAccountSumByHead(accountId, null, operTime, forceFlag))\n                            .add(accountService.getAccountSumByDetail(accountId, null, operTime, forceFlag))\n                            .add(accountService.getManyAccountSum(accountId, null, operTime, forceFlag)).add(initialAmount);\n                    aEx.setBalance(balance);\n                    aEx.setAccountId(accountId);\n                    dataArray.add(aEx);\n                }\n            }\n            map.put(\\\"rows\\\", dataArray);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u66f4\u65b0\u9ed8\u8ba4\u8d26\u6237\n     * @param object\n     * @param request\n     * @return\n     * @throws Exception\n     */\n    @PostMapping(value = \\\"/updateIsDefault\\\")\n    @ApiOperation(value = \\\"\u66f4\u65b0\u9ed8\u8ba4\u8d26\u6237\\\")\n    public String updateIsDefault(@RequestBody JSONObject object,\n                                       HttpServletRequest request) throws Exception{\n        Long accountId = object.getLong(\\\"id\\\");\n        Map<String, Object> objectMap = new HashMap<>();\n        int res = accountService.updateIsDefault(accountId);\n        if(res > 0) {\n            return returnJson(objectMap, ErpInfo.OK.name, ErpInfo.OK.code);\n        } else {\n            return returnJson(objectMap, ErpInfo.ERROR.name, ErpInfo.ERROR.code);\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u5e26\u4f59\u989d\u7684\u62a5\u8868\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/listWithBalance\\\")\n    @ApiOperation(value = \\\"\u83b7\u53d6\u5e26\u4f59\u989d\u7684\u62a5\u8868\\\")\n    public BaseResponseInfo listWithBalance(@RequestParam(\\\"name\\\") String name,\n                                            @RequestParam(\\\"serialNo\\\") String serialNo,\n                                            @RequestParam(\\\"currentPage\\\") Integer currentPage,\n                                            @RequestParam(\\\"pageSize\\\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception {\n        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\\\"rows\\\", list);\n            map.put(\\\"total\\\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u7ed3\u7b97\u8d26\u6237\u7684\u7edf\u8ba1\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/getStatistics\\\")\n    @ApiOperation(value = \\\"\u7ed3\u7b97\u8d26\u6237\u7684\u7edf\u8ba1\\\")\n\n\n", "CodeBleu_score": 45.52758473382627}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t   public String findBySelect(HttpServletRequest request) throws Exception {\n        String res = null;\n        try {\n            List<Account> dataList = accountService.findBySelect();\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataList) {\n                for (Account account : dataList) {\n                    JSONObject item = new JSONObject();\n                    item.put(\\\"Id\\\", account.getId());\n                    //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                    item.put(\\\"AccountName\\\", account.getName());\n                    dataArray.add(item);\n                }\n            }\n            res = dataArray.toJSONString();\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u83b7\u53d6\u6240\u6709\u7ed3\u7b97\u8d26\u6237\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/getAccount\\\")\n    @ApiOperation(value = \\\"\u83b7\u53d6\u6240\u6709\u7ed3\u7b97\u8d26\u6237\\\")\n    public BaseResponseInfo getAccount(HttpServletRequest request) throws Exception {\n        BaseResponseInfo res = new BaseResponseInfo();\n        Map<String, Object> map = new HashMap<String, Object>();\n        try {\n            List<Account> accountList = accountService.getAccount();\n            map.put(\\\"accountList\\\", accountList);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u8d26\u6237\u6d41\u6c34\u4fe1\u606f\n     * @param currentPage\n     * @param pageSize\n     * @param accountId\n     * @param initialAmount\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/findAccountInOutList\\\")\n    @ApiOperation(value = \\\"\u8d26\u6237\u6d41\u6c34\u4fe1\u606f\\\")\n    public BaseResponseInfo findAccountInOutList(@RequestParam(\\\"currentPage\\\") Integer currentPage,\n                                                 @RequestParam(\\\"pageSize\\\") Integer pageSize,\n                                                 @RequestParam(\\\"accountId\\\") Long accountId,\n                                                 @RequestParam(\\\"initialAmount\\\") BigDecimal initialAmount,\n                                                 @RequestParam(value = \\\"number\\\",required = false) String number,\n                                                 @RequestParam(value = \\\"beginTime\\\",required = false) String beginTime,\n                                                 @RequestParam(value = \\\"endTime\\\",required = false) String endTime,\n                                                 HttpServletRequest request) throws Exception{\n        BaseResponseInfo res = new BaseResponseInfo();\n        Map<String, Object> map = new HashMap<String, Object>();\n        try {\n            Boolean forceFlag = systemConfigService.getForceApprovalFlag();\n            List<AccountVo4InOutList> dataList = accountService.findAccountInOutList(accountId, StringUtil.toNull(number),\n                    beginTime, endTime, forceFlag, (currentPage-1)*pageSize, pageSize);\n            int total = accountService.findAccountInOutListCount(accountId, StringUtil.toNull(number),\n                    beginTime, endTime, forceFlag);\n            map.put(\\\"total\\\", total);\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataList) {\n                for (AccountVo4InOutList aEx : dataList) {\n                    String type = aEx.getType().replace(\\\"\u5176\u5b83\\\", \\\"\\\");\n                    aEx.setType(type);\n                    String operTime = aEx.getOperTime();\n                    BigDecimal balance = accountService.getAccountSum(accountId, null, operTime, forceFlag)\n                            .add(accountService.getAccountSumByHead(accountId, null, operTime, forceFlag))\n                            .add(accountService.getAccountSumByDetail(accountId, null, operTime, forceFlag))\n                            .add(accountService.getManyAccountSum(accountId, null, operTime, forceFlag)).add(initialAmount);\n                    aEx.setBalance(balance);\n                    aEx.setAccountId(accountId);\n                    dataArray.add(aEx);\n                }\n            }\n            map.put(\\\"rows\\\", dataArray);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u66f4\u65b0\u9ed8\u8ba4\u8d26\u6237\n     * @param object\n     * @param request\n     * @return\n     * @throws Exception\n     */\n    @PostMapping(value = \\\"/updateIsDefault\\\")\n    @ApiOperation(value = \\\"\u66f4\u65b0\u9ed8\u8ba4\u8d26\u6237\\\")\n    public String updateIsDefault(@RequestBody JSONObject object,\n                                       HttpServletRequest request) throws Exception{\n        Long accountId = object.getLong(\\\"id\\\");\n        Map<String, Object> objectMap = new HashMap<>();\n        int res = accountService.updateIsDefault(accountId);\n        if(res > 0) {\n            return returnJson(objectMap, ErpInfo.OK.name, ErpInfo.OK.code);\n        } else {\n            return returnJson(objectMap, ErpInfo.ERROR.name, ErpInfo.ERROR.code);\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u5e26\u4f59\u989d\u7684\u62a5\u8868\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/listWithBalance\\\")\n    @ApiOperation(value = \\\"\u83b7\u53d6\u5e26\u4f59\u989d\u7684\u62a5\u8868\\\")\n    public BaseResponseInfo listWithBalance(@RequestParam(\\\"name\\\") String name,\n                                            @RequestParam(\\\"serialNo\\\") String serialNo,\n                                            @RequestParam(\\\"currentPage\\\") Integer currentPage,\n                                            @RequestParam(\\\"pageSize\\\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception {\n        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\\\"rows\\\", list);\n            map.put(\\\"total\\\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u7ed3\u7b97\u8d26\u6237\u7684\u7edf\u8ba1\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/getStatistics\\\")\n    @ApiOperation(value = \\\"\u7ed3\u7b97\u8d26\u6237\u7684\u7edf\u8ba1\\\")\n\n\n", "CodeBleu_score": 45.52758473382627}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t   public String findBySelect(HttpServletRequest request) throws Exception {\n        String res = null;\n        try {\n            List<Account> dataList = accountService.findBySelect();\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataList) {\n                for (Account account : dataList) {\n                    JSONObject item = new JSONObject();\n                    item.put(\\\"Id\\\", account.getId());\n                    //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                    item.put(\\\"AccountName\\\", account.getName());\n                    dataArray.add(item);\n                }\n            }\n            res = dataArray.toJSONString();\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u83b7\u53d6\u6240\u6709\u7ed3\u7b97\u8d26\u6237\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/getAccount\\\")\n    @ApiOperation(value = \\\"\u83b7\u53d6\u6240\u6709\u7ed3\u7b97\u8d26\u6237\\\")\n    public BaseResponseInfo getAccount(HttpServletRequest request) throws Exception {\n        BaseResponseInfo res = new BaseResponseInfo();\n        Map<String, Object> map = new HashMap<String, Object>();\n        try {\n            List<Account> accountList = accountService.getAccount();\n            map.put(\\\"accountList\\\", accountList);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u8d26\u6237\u6d41\u6c34\u4fe1\u606f\n     * @param currentPage\n     * @param pageSize\n     * @param accountId\n     * @param initialAmount\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/findAccountInOutList\\\")\n    @ApiOperation(value = \\\"\u8d26\u6237\u6d41\u6c34\u4fe1\u606f\\\")\n    public BaseResponseInfo findAccountInOutList(@RequestParam(\\\"currentPage\\\") Integer currentPage,\n                                                 @RequestParam(\\\"pageSize\\\") Integer pageSize,\n                                                 @RequestParam(\\\"accountId\\\") Long accountId,\n                                                 @RequestParam(\\\"initialAmount\\\") BigDecimal initialAmount,\n                                                 @RequestParam(value = \\\"number\\\",required = false) String number,\n                                                 @RequestParam(value = \\\"beginTime\\\",required = false) String beginTime,\n                                                 @RequestParam(value = \\\"endTime\\\",required = false) String endTime,\n                                                 HttpServletRequest request) throws Exception{\n        BaseResponseInfo res = new BaseResponseInfo();\n        Map<String, Object> map = new HashMap<String, Object>();\n        try {\n            Boolean forceFlag = systemConfigService.getForceApprovalFlag();\n            List<AccountVo4InOutList> dataList = accountService.findAccountInOutList(accountId, StringUtil.toNull(number),\n                    beginTime, endTime, forceFlag, (currentPage-1)*pageSize, pageSize);\n            int total = accountService.findAccountInOutListCount(accountId, StringUtil.toNull(number),\n                    beginTime, endTime, forceFlag);\n            map.put(\\\"total\\\", total);\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataList) {\n                for (AccountVo4InOutList aEx : dataList) {\n                    String type = aEx.getType().replace(\\\"\u5176\u5b83\\\", \\\"\\\");\n                    aEx.setType(type);\n                    String operTime = aEx.getOperTime();\n                    BigDecimal balance = accountService.getAccountSum(accountId, null, operTime, forceFlag)\n                            .add(accountService.getAccountSumByHead(accountId, null, operTime, forceFlag))\n                            .add(accountService.getAccountSumByDetail(accountId, null, operTime, forceFlag))\n                            .add(accountService.getManyAccountSum(accountId, null, operTime, forceFlag)).add(initialAmount);\n                    aEx.setBalance(balance);\n                    aEx.setAccountId(accountId);\n                    dataArray.add(aEx);\n                }\n            }\n            map.put(\\\"rows\\\", dataArray);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u66f4\u65b0\u9ed8\u8ba4\u8d26\u6237\n     * @param object\n     * @param request\n     * @return\n     * @throws Exception\n     */\n    @PostMapping(value = \\\"/updateIsDefault\\\")\n    @ApiOperation(value = \\\"\u66f4\u65b0\u9ed8\u8ba4\u8d26\u6237\\\")\n    public String updateIsDefault(@RequestBody JSONObject object,\n                                       HttpServletRequest request) throws Exception{\n        Long accountId = object.getLong(\\\"id\\\");\n        Map<String, Object> objectMap = new HashMap<>();\n        int res = accountService.updateIsDefault(accountId);\n        if(res > 0) {\n            return returnJson(objectMap, ErpInfo.OK.name, ErpInfo.OK.code);\n        } else {\n            return returnJson(objectMap, ErpInfo.ERROR.name, ErpInfo.ERROR.code);\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u5e26\u4f59\u989d\u7684\u62a5\u8868\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/listWithBalance\\\")\n    @ApiOperation(value = \\\"\u83b7\u53d6\u5e26\u4f59\u989d\u7684\u62a5\u8868\\\")\n    public BaseResponseInfo listWithBalance(@RequestParam(\\\"name\\\") String name,\n                                            @RequestParam(\\\"serialNo\\\") String serialNo,\n                                            @RequestParam(\\\"currentPage\\\") Integer currentPage,\n                                            @RequestParam(\\\"pageSize\\\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception {\n        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\\\"rows\\\", list);\n            map.put(\\\"total\\\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \\\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\\\";\n        }\n        return res;\n    }\n\n    /**\n     * \u7ed3\u7b97\u8d26\u6237\u7684\u7edf\u8ba1\n     * @param request\n     * @return\n     */\n    @GetMapping(value = \\\"/getStatistics\\\")\n    @ApiOperation(value = \\\"\u7ed3\u7b97\u8d26\u6237\u7684\u7edf\u8ba1\\\")\n\n\n", "CodeBleu_score": 45.52758473382627}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n        if (list != null && list.size() > 0) {\n            res.code = 200;\n            res.data = list.get(0);\n        }\n    } catch(Exception e) {\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 60.79818167798733}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        Map<String, Object> map = new HashMap<String, Object>();\n        map.put(\"billNo\", billNo);\n        List<AccountHeadVo4ListEx> details = accountHeadService.getDetailByNumber(map);\n        if (details != null && details.size() > 0) {\n            res.code = 200;\n            res.data = details.get(0);\n        } else {\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 58.87833701008589}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    Map<String, Object> map = new HashMap<String, Object>();\n    try {\n        List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n        if (list.size() > 0) {\n            AccountHeadVo4ListEx vo = list.get(0);\n            map.put(\"billNo\", vo.getBillNo());\n            map.put(\"billType\", vo.getBillType());\n            map.put(\"billTime\", vo.getBillTime());\n            map.put(\"billTypeName\", vo.getBillTypeName());\n            map.put(\"billStatus\", vo.getBillStatus());\n            map.put(\"billStatusName\", vo.getBillStatusName());\n            map.put(\"totalAmount\", vo.getTotalAmount());\n            map.put(\"totalAmountName\", vo.getTotalAmountName());\n            map.put(\"totalDiscount\", vo.getTotalDiscount());\n            map.put(\"totalDiscountName\", vo.getTotalDiscountName());\n            map.put(\"totalTax\", vo.getTotalTax());\n            map.put(\"totalTaxName\", vo.getTotalTaxName());\n            map.put(\"totalCost\", vo.getTotalCost());\n            map.put(\"totalCostName\", vo.getTotalCostName());\n            map.put(\"note\", vo.getNote());\n            map.put(\"creator\", vo.getCreator());\n            map.put(\"createTime\", vo.getCreateTime());\n            map.put(\"updater\", vo.getUpdater());\n            map.put(\"updateTime\", vo.getUpdateTime());\n            map.put(\"accountHeadDetails\", vo.getAccountHeadDetails());\n            res.code = 200;\n            res.data = map;\n        } else {\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e", "CodeBleu_score": 50.354866349432136}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        // Get the current user's information\n        User userInfo = (User) request.getSession().getAttribute(\"userInfo\");\n        List<Depot> depotList = depotService.findDepotByCurrentUser(userInfo);\n        res.code = 200;\n        res.data = depotList;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 68.8230828595848}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        //Get the current user information\n        Map<String, Object> currentUser = userService.getCurrentUser();\n        String userBusinessType = currentUser.get(\"userBusinessType\").toString();\n        String userBusinessId = currentUser.get(\"userBusinessId\").toString();\n        //Get the user's depot list\n        List<Depot> dataList = depotService.findDepotByCurrentUser();\n        //Start assembling json data\n        JSONObject outer = new JSONObject();\n        outer.put(\"id\", 0);\n        outer.put(\"key\", 0);\n        outer.put(\"value\", 0);\n        outer.put(\"title\", \"\u4ed3\u5e93\u5217\u8868\");\n        outer.put(\"attributes\", \"\u4ed3\u5e93\u5217\u8868\");\n        //Store data json array\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Depot depot : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"id\", depot.getId());\n                item.put(\"key\", depot.getId());\n                item.put(\"value\", depot.getId());\n                item.put(\"title\", depot.getName());\n                item.put(\"attributes\", depot.getName());\n                Boolean flag = userBusinessService.getUBValueByTypeAndKeyId(userBusinessType, userBusinessId).contains(\"[\" + depot.getId().toString() + \"]\");\n                if (flag) {\n                    item.put(\"checked\", true);\n                }\n                dataArray.add(item);\n            }\n        }\n        outer.put(\"children\", dataArray);\n        res.code = 200;\n        res.data = outer;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 58.37525216911773}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        //Get the user information from the session\n        UserSession session = (UserSession) request.getSession().getAttribute(\"user\");\n        //Get the current user's depot list\n        List<Depot> depotList = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = depotList;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 71.4968634641744}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\terp.datasource.entities.Function;", "CodeBleu_score": 6.790630875537182}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\terp.datasource.entities.Function;", "CodeBleu_score": 6.790630875537182}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\terp.datasource.entities.Function;", "CodeBleu_score": 6.790630875537182}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\n    Map<String, Object> map = new HashMap<String, Object>();\n    try {\n        PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n        map.put(\"platformValue\", platformConfig.getPlatformValue());\n        res.code = 200;\n        res.data = map;\n    } catch(Exception e) {\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u5e73\u53f0\u53c2\u6570\u4fe1\u606f\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 61.17360543995741}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n            res.setCode(Constants.HTTP_RESPONSE_CODE_200);\n            res.setData(platformConfig);\n        } catch(Exception e) {\n            logger.error(e.getMessage(), e);\n            res.setCode(Constants.HTTP_RESPONSE_CODE_500);\n            res.setMsg(Constants.HTTP_RESPONSE_MSG_500);\n        }\n        return res;\n    }", "CodeBleu_score": 55.352488545550884}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\n    Map<String, Object> map = new HashMap<String, Object>();\n    try {\n        PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n        map.put(\"platformValue\", platformConfig.getPlatformValue());\n        res.code = 200;\n        res.data = map;\n    } catch(Exception e){\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u5e73\u53f0\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 61.7750065414894}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        res.setCode(Constants.RESPONSE_CODE_SUCCESS);\n        res.setMsg(\"\u83b7\u53d6\u6210\u529f\");\n        List<SystemConfig> list = systemConfigService.getSystemConfigListByTenantId(userService.getCurrentUserInfo().getTenantId());\n        if (list.size() > 0) {\n            res.setData(list.get(0));\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        res.setCode(Constants.RESPONSE_CODE_ERROR);\n        res.setMsg(\"\u83b7\u53d6\u5931\u8d25\");\n        logger.error(\"\u83b7\u53d6\u5931\u8d25\", e);\n    }\n    return res;\n}", "CodeBleu_score": 49.37003075602641}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        // get current user information\n        String userId = request.getHeader(\"userId\");\n        String userName = request.getHeader(\"userName\");\n        // get current tenant id\n        String tenantId = request.getHeader(\"tenantId\");\n        String token = request.getHeader(\"token\");\n        // get current company id\n        String companyId = request.getHeader(\"companyId\");\n        // get current depot id\n        String depotId = request.getHeader(\"depotId\");\n        // get current business id\n        String businessId = request.getHeader(\"businessId\");\n        // get current user business id\n        String userBusinessId = request.getHeader(\"userBusinessId\");\n        // get current user role id\n        String roleId = request.getHeader(\"roleId\");\n        // get current user type\n        String userType = request.getHeader(\"userType\");\n        // get current user type\n        String userSubType = request.getHeader(\"userSubType\");\n        // get current user type\n        String userSubTypeId = request.getHeader(\"userSubTypeId\");\n        // get current user type\n        String userSubTypeName = request.getHeader(\"userSubTypeName\");\n        // get current user type\n        String userSubTypeCode = request.getHeader(\"userSubTypeCode\");\n        // get current user type\n        String userSubTypeCodeId = request.getHeader(\"userSubTypeCodeId\");\n        // get current user type\n        String userSubTypeCodeName = request.getHeader(\"userSubTypeCodeName\");\n        // get current user type\n        String userSubTypeCodeType = request.getHeader(\"userSubTypeCodeType\");\n        // get current user type\n        String userSubTypeCodeTypeId = request.getHeader(\"userSubTypeCodeTypeId\");\n        // get current user type\n        String userSubTypeCodeTypeName = request.getHeader(\"userSubTypeCodeTypeName\");\n        // get current user type\n        String userSubTypeCodeTypeCode = request.getHeader(\"userSubTypeCodeTypeCode\");\n        // get current user type\n        String userSubTypeCodeTypeCodeId = request.getHeader(\"userSub", "CodeBleu_score": 24.183573712963458}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<SystemConfig> list = systemConfigService.getSystemConfigList();\n        if (list != null && list.size() > 0) {\n            res.code = 200;\n            res.data = list.get(0);\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 73.1807559605723}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        // Get the business path and file from the request\n        String businessPath = request.getParameter(\"businessPath\");\n        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n        MultipartFile file = multipartRequest.getFile(\"file\");\n\n        // Check if the file is null\n        if (file == null) {\n            res.code = 500;\n            res.data = \"No file was uploaded\";\n            return res;\n        }\n\n        // Check if the file is too large\n        if (file.getSize() > maxFileSize) {\n            res.code = 500;\n            res.data = \"The file is too large. The maximum file size is \" + maxFileSize + \" bytes.\";\n            return res;\n        }\n\n        // Check if the file is too large for the request\n        if (file.getSize() > maxRequestSize) {\n            res.code = 500;\n            res.data = \"The file is too large. The maximum request size is \" + maxRequestSize + \" bytes.\";\n            return res;\n        }\n\n        // Check if the file is an image\n        String contentType = file.getContentType();\n        if (contentType.startsWith(\"image\")) {\n            // Get the image file\n            BufferedImage image = ImageIO.read(file.getInputStream());\n            if (image == null) {\n                res.code = 500;\n                res.data = \"The file is not an image\";\n                return res;\n            }\n        }\n\n        // Save the file to the appropriate location\n        String fileName = file.getOriginalFilename();\n        String filePath = \"\";\n        if (fileUploadType == 0) {\n            // Local file upload\n            filePath = FileUtils.saveFile(file, businessPath);\n        } else if (fileUploadType == 1) {\n            // AliOss file upload\n            filePath = FileUtils.saveAliOssFile(file, businessPath);\n        } else {\n            res.code = 500;\n            res.data = \"Invalid file", "CodeBleu_score": 45.8220628407775}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n        MultipartFile file = multipartRequest.getFile(\"file\");\n        String businessPath = multipartRequest.getParameter(\"businessPath\");\n        String fileName = file.getOriginalFilename();\n        String filePath = fileUploadType == 1 ? filePath + businessPath + \"/\" + fileName : businessPath + \"/\" + fileName;\n        String fileUrl = fileUploadType == 1 ? filePath : filePath.replace(filePath.substring(0, filePath.lastIndexOf(\"/\")), \"\");\n        if (file.isEmpty()) {\n            res.code = 500;\n            res.data = \"\u4e0a\u4f20\u6587\u4ef6\u4e0d\u80fd\u4e3a\u7a7a\";\n            return res;\n        }\n        if (file.getSize() > maxFileSize) {\n            res.code = 500;\n            res.data = \"\u6587\u4ef6\u5927\u5c0f\u4e0d\u80fd\u8d85\u8fc7\" + maxFileSize / 1024 / 1024 + \"M\";\n            return res;\n        }\n        if (file.getSize() > maxRequestSize) {\n            res.code = 500;\n            res.data = \"\u6587\u4ef6\u5927\u5c0f\u4e0d\u80fd\u8d85\u8fc7\" + maxRequestSize / 1024 / 1024 + \"M\";\n            return res;\n        }\n        String suffix = fileName.substring(fileName.lastIndexOf(\".\"));\n        if (!suffix.equalsIgnoreCase(\".jpg\") && !suffix.equalsIgnoreCase(\".png\") && !suffix.equalsIgnoreCase(\".gif\") && !suffix.equalsIgnoreCase(\".jpeg\")) {\n            res.code = 500;\n            res.data = \"\u6587\u4ef6\u683c\u5f0f\u9519\u8bef\";\n            return res;\n        }\n        if (fileUploadType == 1) {\n            FileUtils.uploadFile(filePath, file);\n        } else {\n            FileUtils.uploadFileToAliOss(filePath, file);\n        }\n        res.code = 200;\n        res.data = fileUrl;\n    } catch", "CodeBleu_score": 46.79564820100782}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n        MultipartFile file = multipartRequest.getFile(\"file\");\n        String path = multipartRequest.getParameter(\"path\");\n        if (file != null) {\n            if (fileUploadType == 0) {\n                // \u4e0a\u4f20\u5230\u672c\u5730\n                String fileName = FileUtils.uploadFile(file, path, filePath);\n                if (StringUtil.isNotEmpty(fileName)) {\n                    res.code = 200;\n                    res.data = fileName;\n                } else {\n                    res.code = 500;\n                    res.data = \"\u4e0a\u4f20\u6587\u4ef6\u5931\u8d25\";\n                }\n            } else if (fileUploadType == 1) {\n                // \u4e0a\u4f20\u5230\u963f\u91cc\u4e91OSS\n                String fileName = FileUtils.uploadFileToAliOss(file, path, filePath);\n                if (StringUtil.isNotEmpty(fileName)) {\n                    res.code = 200;\n                    res.data = fileName;\n                } else {\n                    res.code = 500;\n                    res.data = \"\u4e0a\u4f20\u6587\u4ef6\u5931\u8d25\";\n                }\n            } else {\n                res.code = 500;\n                res.data = \"\u4e0a\u4f20\u6587\u4ef6\u5931\u8d25\";\n            }\n        } else {\n            res.code = 500;\n            res.data = \"\u4e0a\u4f20\u6587\u4ef6\u5931\u8d25\";\n        }\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u4e0a\u4f20\u6587\u4ef6\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 54.721650986307715}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\tRequestSize) {\n                limit = maxFileSize;\n            } else {\n                limit = maxRequestSize;\n            }\n            res.code = 200;\n            res.data = limit;\n        }", "CodeBleu_score": 13.574590747231483}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\tRequestSize) {\n                limit = maxFileSize;\n            } else {\n                limit = maxRequestSize;\n            }\n            res.code = 200;\n            res.data = limit;\n        }", "CodeBleu_score": 13.574590747231483}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\tRequestSize) {\n                limit = maxFileSize;\n            } else {\n                limit = maxRequestSize;\n            }\n            res.code = 200;\n            res.data = limit;\n        }", "CodeBleu_score": 13.574590747231483}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t.erp.service.systemConfig.SystemConfigService;", "CodeBleu_score": 4.08848161464715}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t.erp.service.systemConfig.SystemConfigService;", "CodeBleu_score": 4.08848161464715}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t.erp.service.systemConfig.SystemConfigService;", "CodeBleu_score": 4.08848161464715}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\tList = accountIdList.split(\\\",\\\");\n                    String[] amList = accountMoneyList.split(\\\",\\\");\n                    for (int i = 0; i < aList.length; i++) {\n                        if (aList[i].equals(accountId.toString())) {\n                            if(amList.length>0) {\n                                accountSum = accountSum.add(new BigDecimal(amList[i]));\n                            }\n                        }\n                    }\n                }", "CodeBleu_score": 23.304261193894877}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\tList = accountIdList.split(\\\",\\\");\n                    String[] amList = accountMoneyList.split(\\\",\\\");\n                    for (int i = 0; i < aList.length; i++) {\n                        if (aList[i].equals(accountId.toString())) {\n                            if(amList.length>0) {\n                                accountSum = accountSum.add(new BigDecimal(amList[i]));\n                            }\n                        }\n                    }\n                }", "CodeBleu_score": 23.304261193894877}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\tList = accountIdList.split(\\\",\\\");\n                    String[] amList = accountMoneyList.split(\\\",\\\");\n                    for (int i = 0; i < aList.length; i++) {\n                        if (aList[i].equals(accountId.toString())) {\n                            if(amList.length>0) {\n                                accountSum = accountSum.add(new BigDecimal(amList[i]));\n                            }\n                        }\n                    }\n                }", "CodeBleu_score": 23.304261193894877}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\tint result=0;\n    try{\n        result=depotItemMapper.deleteByPrimaryKey(id);\n    }catch(Exception e){\n        JshException.writeFail(logger, e);\n    }\n    return result;\n}", "CodeBleu_score": 87.21796643193692}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\tint result = 0;\n    try {\n        result = depotItemMapper.deleteByPrimaryKey(id);\n    } catch(Exception e) {\n        JshException.writeFail(logger, e);\n    }\n    return result;\n}", "CodeBleu_score": 79.61426137406589}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\tint result =0;\n    try{\n        result=depotItemMapper.deleteByPrimaryKey(id);\n    }catch(Exception e){\n        JshException.writeFail(logger, e);\n    }\n    return result;\n}", "CodeBleu_score": 99.122119158269}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\ttry {\n\t\t\tString url = protocol + \"://\" + host + \":\" + port + \"/\" + projectName + \"/\" + nodeType + \"/\" + nodeKey;\n\t\t\tHttpGet httpGet = new HttpGet(url);\n\t\t\thttpGet.setHeader(\"Content-type\", \"application/json\");\n\t\t\tCloseableHttpResponse response = httpClient.execute(httpGet);\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tString result = EntityUtils.toString(entity, \"UTF-8\");\n\t\t\tif (result.contains(\"\\\"key\\\"\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\thttpClient.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 42.96873596570695}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tCloseableHttpClient httpclient = HttpClients.createDefault();\n\t\ttry {\n\t\t\tString url = protocol + \"://\" + host + \":\" + port + \"/api/projects/\" + projectName + \"/nodes/\" + nodeType + \"/\" + nodeKey;\n\t\t\tHttpGet httpget = new HttpGet(url);\n\t\t\tCloseableHttpResponse response = httpclient.execute(httpget);\n\t\t\ttry {\n\t\t\t\tHttpEntity entity = response.getEntity();\n\t\t\t\tif (entity != null) {\n\t\t\t\t\tString result = EntityUtils.toString(entity, Charset.forName(\"UTF-8\"));\n\t\t\t\t\tif (result.contains(nodeKey)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tresponse.close();\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\thttpclient.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 45.98927147910471}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tCloseableHttpClient httpclient = HttpClients.createDefault();\n\t\tString url = protocol + \"://\" + host + \":\" + port + \"/api/projects/\" + projectName + \"/nodes/\" + nodeType + \"/\" + nodeKey;\n\t\tHttpGet httpGet = new HttpGet(url);\n\t\ttry {\n\t\t\tCloseableHttpResponse response = httpclient.execute(httpGet);\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tString responseString = EntityUtils.toString(entity, Charset.forName(\"UTF-8\"));\n\t\t\tif (responseString.contains(nodeKey)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\thttpclient.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 42.7936111731627}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\tHttpHost host = new HttpHost(getHost(), getPort(), getProtocol());\n\t\tHttpGet getRequest = new HttpGet(\"/addEdge/\" +withProjectName(projectName) + edgeType + \"/\" + fromType + \"/\" + from + \"/\" + toType + \"/\" + to);\n\t\thttpResponse = httpClient.execute(host, getRequest);\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tif (entity != null) {\n\t\t\tObjectMapper om = new ObjectMapper();\n\t\t\tString result = EntityUtils.toString(entity);\n\t\t\tMap map = om.readValue(result, Map.class);\n\t\t\tif (map.get(\"key\") != null) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n}", "CodeBleu_score": 91.57096572772087}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\tHttpHost host = new HttpHost(getHost(), getPort(), getProtocol());\n\t\tHttpGet getRequest = new HttpGet(\"/addEdge/\" +withProjectName(projectName) + edgeType + \"/\" + fromType + \"/\" + from + \"/\" + toType + \"/\" + to);\n\t\thttpResponse = httpClient.execute(host, getRequest);\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tif (entity != null) {\n\t\t\tObjectMapper om = new ObjectMapper();\n\t\t\tString result = EntityUtils.toString(entity);\n\t\t\tMap map = om.readValue(result, Map.class);\n\t\t\tif (map.get(\"key\") != null) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n}", "CodeBleu_score": 91.57096572772087}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\tHttpHost host = new HttpHost(getHost(), getPort(), getProtocol());\n\t\tHttpGet getRequest = new HttpGet(\"/addEdge/\" +withProjectName(projectName) + edgeType + \"/\" + fromType + \"/\" + from + \"/\" + toType + \"/\" + to);\n\t\thttpResponse = httpClient.execute(host, getRequest);\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tif (entity != null) {\n\t\t\tObjectMapper om = new ObjectMapper();\n\t\t\tString result = EntityUtils.toString(entity);\n\t\t\tMap map = om.readValue(result, Map.class);\n\t\t\tif (map.get(\"key\") != null) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n}", "CodeBleu_score": 91.57096572772087}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\tif (event == null || event.getMessage() == null) {\n\t\treturn;\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(testLocations.get(new Random().nextInt(testLocations.size())));\n\t}\n\tevent.setEventTime(new Date());\n\tString jsonString;\n\ttry {\n\t\tjsonString = objectMapper.writeValueAsString(event);\n\t} catch (JsonProcessingException e) {\n\t\te.printStackTrace();\n\t\treturn;\n\t}\n\tString topic = \"test\";\n\tif (event.getTarget() != null) {\n\t\ttopic = event.getTarget();\n\t}\n\tProducerRecord<String, String> record = new ProducerRecord<>(topic, jsonString);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 53.48758681578427}, {"code": "public void sendEvent(Event event){\n\tif (event == null) {\n        return;\n    }\n    if (event.getMessage() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(testLocations.get(new Random().nextInt(testLocations.size())));\n    }\n    event.setEventTime(new Date());\n    String jsonString;\n    try {\n        jsonString = objectMapper.writeValueAsString(event);\n    } catch (JsonProcessingException e) {\n        e.printStackTrace();\n        return;\n    }\n    String topic = event.getTarget() == null ? \"test\" : event.getTarget();\n    ProducerRecord<String, String> producerRecord = new ProducerRecord<>(topic, jsonString);\n    producer.send(producerRecord);\n    producer.flush();\n}", "CodeBleu_score": 60.30161839362498}, {"code": "public void sendEvent(Event event){\n\tif (event == null || event.getMessage() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(testLocations.get(new Random().nextInt(testLocations.size())));\n    }\n    event.setEventTime(new Date());\n    String jsonString;\n    try {\n        jsonString = objectMapper.writeValueAsString(event);\n    } catch (JsonProcessingException e) {\n        return;\n    }\n    String topic = event.getTarget() != null ? event.getTarget() : \"test\";\n    ProducerRecord<String, String> record = new ProducerRecord<>(topic, jsonString);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 52.169222105559676}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t;\n", "CodeBleu_score": 4.0526637978730085}, {"code": "public String upload(String objName, byte[] content){\n\t;\n", "CodeBleu_score": 4.0526637978730085}, {"code": "public String upload(String objName, byte[] content){\n\t;\n", "CodeBleu_score": 4.0526637978730085}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tIpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return LocationInfo.createUnknownLocationInfo();\n    }\n    return worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 26.964254339807354}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tIpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo();\n    }\n    return worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 26.832589815256302}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tIpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo(\"unknown\", \"unknown\", \"unknown\");\n    }\n    return worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 28.437363462164157}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (this.lowLevelRestClient != null && this.highLevelRestClient != null) {\n\t\treturn;\n\t}\n\n\tsynchronized (this) {\n\t\tif (this.lowLevelRestClient != null && this.highLevelRestClient != null) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.clusterHostList == null) {\n\t\t\tthrow new Exception(\"Elasticsearch cluster host list is not set.\");\n\t\t}\n\n\t\tString[] clusterHosts = this.clusterHostList.split(\",\");\n\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\t\tfor (String clusterHost : clusterHosts) {\n\t\t\tString[] hostPort = clusterHost.split(\":\");\n\t\t\tif (hostPort.length != 2) {\n\t\t\t\tthrow new Exception(\"Elasticsearch cluster host is not set properly.\");\n\t\t\t}\n\n\t\t\tString host = hostPort[0];\n\t\t\tint port = Integer.parseInt(hostPort[1]);\n\t\t\thosts.add(new HttpHost(host, port, \"http\"));\n\t\t}\n\n\t\tthis.lowLevelRestClient = RestClient.builder(hosts.toArray(new HttpHost[hosts.size()])).build();\n\t\tthis.highLevelRestClient = new RestHighLevelClient(this.lowLevelRestClient);\n\t}\n}", "CodeBleu_score": 41.8805057032214}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (lowLevelRestClient == null || highLevelRestClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (lowLevelRestClient == null || highLevelRestClient == null) {\n\t\t\t\tif (clusterHostList == null) {\n\t\t\t\t\tthrow new Exception(\"The cluster host list is not set\");\n\t\t\t\t}\n\t\t\t\tif (clusterHostPort == 0) {\n\t\t\t\t\tthrow new Exception(\"The cluster host port is not set\");\n\t\t\t\t}\n\t\t\t\tString[] hostList = clusterHostList.split(\",\");\n\t\t\t\tList<HttpHost> httpHosts = new ArrayList<HttpHost>();\n\t\t\t\tfor (String host : hostList) {\n\t\t\t\t\tString[] hostPort = host.split(\":\");\n\t\t\t\t\tif (hostPort.length != 2) {\n\t\t\t\t\t\tthrow new Exception(\"The cluster host list is not correct\");\n\t\t\t\t\t}\n\t\t\t\t\thttpHosts.add(new HttpHost(hostPort[0].trim(), Integer.parseInt(hostPort[1].trim()), \"http\"));\n\t\t\t\t}\n\t\t\t\tlowLevelRestClient = RestClient.builder(httpHosts.toArray(new HttpHost[0])).build();\n\t\t\t\thighLevelRestClient = new RestHighLevelClient(lowLevelRestClient);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 47.50487181534845}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (lowLevelRestClient == null || highLevelRestClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (lowLevelRestClient == null || highLevelRestClient == null) {\n\t\t\t\tif (lowLevelRestClient == null) {\n\t\t\t\t\t// Parse the cluster hosts and ports\n\t\t\t\t\tString[] clusterHosts = clusterHostList.split(\",\");\n\t\t\t\t\tList<HttpHost> hosts = new ArrayList<>();\n\t\t\t\t\tfor (String clusterHost : clusterHosts) {\n\t\t\t\t\t\tString[] clusterHostPort = clusterHost.split(\":\");\n\t\t\t\t\t\thosts.add(new HttpHost(clusterHostPort[0], Integer.parseInt(clusterHostPort[1]), \"http\"));\n\t\t\t\t\t}\n\t\t\t\t\tlowLevelRestClient = RestClient.builder(hosts.toArray(new HttpHost[0])).build();\n\t\t\t\t}\n\t\t\t\tif (highLevelRestClient == null) {\n\t\t\t\t\thighLevelRestClient = new RestHighLevelClient(lowLevelRestClient);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 52.75000795325698}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tList<HttpHost> hosts = new ArrayList<>();\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tString[] hostAndPort = host.split(\":\");\n\t\tif (hostAndPort.length == 2) {\n\t\t\thosts.add(new HttpHost(hostAndPort[0], Integer.parseInt(hostAndPort[1]), \"http\"));\n\t\t} else {\n\t\t\thosts.add(new HttpHost(host, clusterPort, \"http\"));\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 43.35443632466129}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tString[] hostArray = clusterHostList.split(\",\");\n\tfor (String host : hostArray) {\n\t\tString hostName = host.split(\":\")[0];\n\t\tint port = clusterPort;\n\t\tif (host.split(\":\").length > 1) {\n\t\t\tport = Integer.parseInt(host.split(\":\")[1]);\n\t\t}\n\t\tHttpHost httpHost = new HttpHost(hostName, port);\n\t\thosts.add(httpHost);\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 42.201778721492765}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tif (clusterHostList == null || clusterHostList.isEmpty()) {\n\t\tthrow new IllegalArgumentException(\"clusterHostList cannot be null or empty\");\n\t}\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tString hostName = host.trim();\n\t\tint port = clusterPort;\n\t\tif (hostName.contains(\":\")) {\n\t\t\tString[] hostPort = hostName.split(\":\");\n\t\t\thostName = hostPort[0].trim();\n\t\t\tport = Integer.parseInt(hostPort[1].trim());\n\t\t}\n\t\tHttpHost httpHost = new HttpHost(hostName, port);\n\t\thosts.add(httpHost);\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 39.87901408278901}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\tMap<String, Object> task = null;\n\t\ttry {\n\t\t\ttask = taskQueue.poll(30, TimeUnit.SECONDS);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif (task == null) {\n\t\t\treturn;\n\t\t}\n\t\tString taskType = (String) task.get(PARAM_TASK_TYPE);\n\t\tif (taskType.equals(TASK_PLAIN_TEXT_MESSAGE)) {\n\t\t\tString toNumber = (String) task.get(PARAM_RECIEVER_NUMBER);\n\t\t\tString fromWho = (String) task.get(PARAM_FROM_WHO);\n\t\t\tString template = (String) task.get(PARAM_MESSAGE_TEMPLATE);\n\t\t\tMap<String, String> parameters = (Map<String, String>) task.get(PARAM_MESSAGE_DATA);\n\t\t\ttry {\n\t\t\t\tString message = null;\n\t\t\t\tif (parameters == null || parameters.isEmpty()) {\n\t\t\t\t\tmessage = template;\n\t\t\t\t} else {\n\t\t\t\t\tmessage = MessageUtils.parseMessage(template, parameters);\n\t\t\t\t}\n\t\t\t\tif (StringUtils.isBlank(message)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (message.length() > 1024) {\n\t\t\t\t\tmessage = message.substring(0, 1024);\n\t\t\t\t}\n\t\t\t\tString url = \"http://api.sc.ftqq.com/\" + fromWho + \".send\";\n\t\t\t\tURIBuilder builder = new URIBuilder(url);\n\t\t\t\tbuilder.addParameter(\"text\", \"\");\n\t\t\t\tbuilder.addParameter(\"desp\", message);\n\t\t\t\tbuilder.addParameter(\"sendkey\", fromWho);\n\t\t\t\tbuilder.addParameter(\"user\", \"\");\n\t\t\t\tbuilder.addParameter(\"pass\", \"\");\n\t\t\t\tURI uri = builder.", "CodeBleu_score": 49.13492114812497}, {"code": "protected void pollingWork() throws InterruptedException{\n\tMap<String, Object> task = null;\n\ttry {\n\t\ttask = taskQueue.poll(30, TimeUnit.SECONDS);\n\t\tif (task == null) {\n\t\t\treturn;\n\t\t}\n\t\tString taskType = (String) task.get(PARAM_TASK_TYPE);\n\t\tif (taskType.equals(TASK_PLAIN_TEXT_MESSAGE)) {\n\t\t\tString toNumber = (String) task.get(PARAM_RECIEVER_NUMBER);\n\t\t\tString fromWho = (String) task.get(PARAM_FROM_WHO);\n\t\t\tString template = (String) task.get(PARAM_MESSAGE_TEMPLATE);\n\t\t\tMap<String, String> params = (Map<String, String>) task.get(PARAM_MESSAGE_DATA);\n\t\t\tif (StringUtils.isBlank(template)) {\n\t\t\t\ttemplate = \"Your verification code is {code}\";\n\t\t\t}\n\t\t\tif (params == null || params.isEmpty()) {\n\t\t\t\tparams = new HashMap<String, String>();\n\t\t\t\tparams.put(\"code\", \"123456\");\n\t\t\t}\n\t\t\tString message = String.format(template, params);\n\t\t\tif (StringUtils.isBlank(toNumber) || StringUtils.isBlank(fromWho) || StringUtils.isBlank(message)) {\n\t\t\t\tlogger.error(\"Invalid task: \" + task);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!isValidPhoneNumber(toNumber)) {\n\t\t\t\tlogger.error(\"Invalid phone number: \" + toNumber);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tsendSMS(toNumber, fromWho, message);\n\t\t\t} catch (Exception e) {\n\t\t\t\tlogger.error(\"Failed to send SMS: \" + e.getMessage());\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(\"Failed to process task:", "CodeBleu_score": 48.1157249131987}, {"code": "protected void pollingWork() throws InterruptedException{\n\tMap<String, Object> task = taskQueue.poll(30, TimeUnit.SECONDS);\n\tif (task != null) {\n\t\tString taskType = (String) task.get(PARAM_TASK_TYPE);\n\t\tif (taskType.equals(TASK_PLAIN_TEXT_MESSAGE)) {\n\t\t\tString toNumber = (String) task.get(PARAM_RECIEVER_NUMBER);\n\t\t\tString fromWho = (String) task.get(PARAM_FROM_WHO);\n\t\t\tString template = (String) task.get(PARAM_MESSAGE_TEMPLATE);\n\t\t\tMap<String, String> parameters = (Map<String, String>) task.get(PARAM_MESSAGE_DATA);\n\t\t\ttry {\n\t\t\t\tString message = getMessage(template, parameters);\n\t\t\t\tsendMessage(toNumber, fromWho, message);\n\t\t\t} catch (Exception e) {\n\t\t\t\tlogger.error(\"Failed to send message to \" + toNumber + \": \" + e.getMessage());\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 60.599022302385244}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tAM_TASK_TYPE=\\\"task_type\\\";\n\tprotected static final String PARAM_RECIEVER_NUMBER=\\\"to_number\\\";\n\tprotected static final String PARAM_FROM_WHO=\\\"from_who\\\";\n\n\tprotected static final String PARAM_MESSAGE_TEMPLATE=\\\"template\\\";\n\tprotected static final String PARAM_MESSAGE_DATA=\\\"params\\\";\n\tprotected static final int QUEUE_SIZE = 100;\n\n\tprotected SMTPService smtpService;\n\n\n\n\tpublic SMTPService getSmtpService() {\n\t\treturn smtpService;\n\t}\n\n\tpublic void setSmtpService(SMTPService smtpService) {\n\t\tthis.smtpService = smtpService;\n\t}\n\n\t@Override\n\tpublic void sendMessage(String dest, String fromWho, String template, Map<String, String> parameters)\n\t\t\tthrows Exception {\n\t\tif (!StringUtils.isBlank(template) && (parameters==null || parameters.isEmpty())){\n\t\t\t// \u5982\u679c\u4f60\u8c03\u9519\u4e86\u63a5\u53e3\uff0c\u628a\u6d88\u606f\u653e\u5230template\u53c2\u6570\u4e0a\u4e86\uff0c\u4e5f\u5c31\u8fd9\u4e2a\u77ed\u4fe1\u670d\u52a1\u63a5\u53e3\uff0c\u3000\u53ef\u4ee5\u517c\u5bb9\u5904\u7406\u4e00\u4e0b\n\t\t\tparameters = new HashMap<String, String>();\n\t\t\tparameters.put(\\\"message\\\", template);\n\t\t}\n\n\t\tMap<String, Object> task = new HashMap<String, Object>();\n\t\ttask.put(PARAM_TASK_TYPE, TASK_PLAIN_TEXT_MESSAGE);\n\t\ttask.put(PARAM_RECIEVER_NUMBER, dest);\n\t\ttask.put(PARAM_FROM_WHO, fromWho);\n\t\ttask.put(PARAM_MESSAGE_TEMPLATE, template);\n\t\ttask.put(PARAM_MESSAGE_DATA, parameters);\n\n\t\taddTask(task);\n\t}\n\n\tprivate void addTask(Map<String, Object> task) {\n\t\tensureTaskThread();\n\t\ttry {\n\t\t\ttaskQueue.put(task);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tprivate void ensureTaskThread() {\n\t\tif (taskQueue != null){\n\t\t\treturn;\n\t\t}\n\t\tsynchronized (SczhtMessageService.class){\n\t\t\tif (taskQueue != null){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttaskQueueThread = new Thread(){\n\t\t\t\tpublic void run(){\n\t\t\t\t\twhile(running.get()){\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tpollingWork();\n\t\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\ttaskQueue = new LinkedBlockingQueue<Map<String, Object>>(QUEUE_SIZE);\n\t\t\trunning.set(true);\n\t\t\ttaskQueueThread.start();\n\t\t}\n\t}\n\n\tprotected void pollingWork() throws InterruptedException{\n\t\tMap<String, Object> task = taskQueue.poll(30, TimeUnit.SECONDS);\n\t\tif (task == null){\n\t\t\treturn;\n\t\t}\n\t\tString taskType = (String) task.get(PARAM_TASK_TYPE);\n\t\tif (taskType.equals(TASK_PLAIN_TEXT_MESSAGE)){\n\t\t\ttry {\n\t\t\t\tString toNumber = (String) task.get(PARAM_RECIEVER_NUMBER);\n\t\t\t\tObject param = task.get(PARAM_MESSAGE_DATA);\n\t\t\t\tif (!(param instanceof Map)){\n\t\t\t\t\tSystem.out.println(\\\"Send message to \\\" + toNumber + \\\" failed. Input data is \\\" + param);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tString message = (String) ((Map<String, Object>) param).get(\\\"message\\\");\n\t\t\t\tSystem.out.println(\\\"Send message to \\\" + toNumber+\\\": \\\" + message);\n\t\t\t\tsendPlainTextMessage(toNumber,message);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate void sendPlainTextMessage(String toNumber, String message) throws Exception {\n\t\t// http://api.sczht.cc:8888/sms.aspx\n\t\tString sentMsg = \\\"\u3010\\\"+getSmsSignName()+\\\"\u3011 \\\"+message+getTimeStamp();\n\t\tURI uri = new URIBuilder().setScheme(\\\"http\\\").setHost(\\\"api.sczht.cc\\\").setPort(8888)\n\t\t\t\t.setPath(\\\"sms.aspx\\\").addParameter(\\\"action\\\", \\\"send\\\")\n\t\t\t\t.addParameter(\\\"userid\\\", getUserId())\n\t\t\t\t.addParameter(\\\"account\\\", getAccount())\n\t\t\t\t.addParameter(\\\"password\\\", getPasswork())\n\t\t\t\t.addParameter(\\\"mobile\\\", toNumber)\n\t\t\t\t.addParameter(\\\"content\\\",sentMsg )\n\t\t\t\t.build();\n\t\tString content = httpGetRequestXml(uri);\n\t\t//Map<String, Object> responseObj = XMLDecodeUtils.decodeXmlString(content);\n\t\tif (content!=null && isSuccessResponse(content)){\n\t\t\tSystem.out.println(\\\"SMS to \\\" + toNumber+\\\" success:\\\" + sentMsg);\n\t\t}else{\n\t\t\tSystem.out.println(\\\"SMS to \\\" + toNumber+\\\" failed.\\t response is \\\" + content);\n\t\t\tif (this.getSmtpService() != null) {\n\t\t\t\tString messageContent = String.format(\\\"\u5411%s\u53d1\u9001\u6d88\u606f%s\u5931\u8d25.\\r", "CodeBleu_score": 30.63476384434863}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tAM_TASK_TYPE=\\\"task_type\\\";\n\tprotected static final String PARAM_RECIEVER_NUMBER=\\\"to_number\\\";\n\tprotected static final String PARAM_FROM_WHO=\\\"from_who\\\";\n\n\tprotected static final String PARAM_MESSAGE_TEMPLATE=\\\"template\\\";\n\tprotected static final String PARAM_MESSAGE_DATA=\\\"params\\\";\n\tprotected static final int QUEUE_SIZE = 100;\n\n\tprotected SMTPService smtpService;\n\n\n\n\tpublic SMTPService getSmtpService() {\n\t\treturn smtpService;\n\t}\n\n\tpublic void setSmtpService(SMTPService smtpService) {\n\t\tthis.smtpService = smtpService;\n\t}\n\n\t@Override\n\tpublic void sendMessage(String dest, String fromWho, String template, Map<String, String> parameters)\n\t\t\tthrows Exception {\n\t\tif (!StringUtils.isBlank(template) && (parameters==null || parameters.isEmpty())){\n\t\t\t// \u5982\u679c\u4f60\u8c03\u9519\u4e86\u63a5\u53e3\uff0c\u628a\u6d88\u606f\u653e\u5230template\u53c2\u6570\u4e0a\u4e86\uff0c\u4e5f\u5c31\u8fd9\u4e2a\u77ed\u4fe1\u670d\u52a1\u63a5\u53e3\uff0c\u3000\u53ef\u4ee5\u517c\u5bb9\u5904\u7406\u4e00\u4e0b\n\t\t\tparameters = new HashMap<String, String>();\n\t\t\tparameters.put(\\\"message\\\", template);\n\t\t}\n\n\t\tMap<String, Object> task = new HashMap<String, Object>();\n\t\ttask.put(PARAM_TASK_TYPE, TASK_PLAIN_TEXT_MESSAGE);\n\t\ttask.put(PARAM_RECIEVER_NUMBER, dest);\n\t\ttask.put(PARAM_FROM_WHO, fromWho);\n\t\ttask.put(PARAM_MESSAGE_TEMPLATE, template);\n\t\ttask.put(PARAM_MESSAGE_DATA, parameters);\n\n\t\taddTask(task);\n\t}\n\n\tprivate void addTask(Map<String, Object> task) {\n\t\tensureTaskThread();\n\t\ttry {\n\t\t\ttaskQueue.put(task);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tprivate void ensureTaskThread() {\n\t\tif (taskQueue != null){\n\t\t\treturn;\n\t\t}\n\t\tsynchronized (SczhtMessageService.class){\n\t\t\tif (taskQueue != null){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttaskQueueThread = new Thread(){\n\t\t\t\tpublic void run(){\n\t\t\t\t\twhile(running.get()){\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tpollingWork();\n\t\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\ttaskQueue = new LinkedBlockingQueue<Map<String, Object>>(QUEUE_SIZE);\n\t\t\trunning.set(true);\n\t\t\ttaskQueueThread.start();\n\t\t}\n\t}\n\n\tprotected void pollingWork() throws InterruptedException{\n\t\tMap<String, Object> task = taskQueue.poll(30, TimeUnit.SECONDS);\n\t\tif (task == null){\n\t\t\treturn;\n\t\t}\n\t\tString taskType = (String) task.get(PARAM_TASK_TYPE);\n\t\tif (taskType.equals(TASK_PLAIN_TEXT_MESSAGE)){\n\t\t\ttry {\n\t\t\t\tString toNumber = (String) task.get(PARAM_RECIEVER_NUMBER);\n\t\t\t\tObject param = task.get(PARAM_MESSAGE_DATA);\n\t\t\t\tif (!(param instanceof Map)){\n\t\t\t\t\tSystem.out.println(\\\"Send message to \\\" + toNumber + \\\" failed. Input data is \\\" + param);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tString message = (String) ((Map<String, Object>) param).get(\\\"message\\\");\n\t\t\t\tSystem.out.println(\\\"Send message to \\\" + toNumber+\\\": \\\" + message);\n\t\t\t\tsendPlainTextMessage(toNumber,message);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate void sendPlainTextMessage(String toNumber, String message) throws Exception {\n\t\t// http://api.sczht.cc:8888/sms.aspx\n\t\tString sentMsg = \\\"\u3010\\\"+getSmsSignName()+\\\"\u3011 \\\"+message+getTimeStamp();\n\t\tURI uri = new URIBuilder().setScheme(\\\"http\\\").setHost(\\\"api.sczht.cc\\\").setPort(8888)\n\t\t\t\t.setPath(\\\"sms.aspx\\\").addParameter(\\\"action\\\", \\\"send\\\")\n\t\t\t\t.addParameter(\\\"userid\\\", getUserId())\n\t\t\t\t.addParameter(\\\"account\\\", getAccount())\n\t\t\t\t.addParameter(\\\"password\\\", getPasswork())\n\t\t\t\t.addParameter(\\\"mobile\\\", toNumber)\n\t\t\t\t.addParameter(\\\"content\\\",sentMsg )\n\t\t\t\t.build();\n\t\tString content = httpGetRequestXml(uri);\n\t\t//Map<String, Object> responseObj = XMLDecodeUtils.decodeXmlString(content);\n\t\tif (content!=null && isSuccessResponse(content)){\n\t\t\tSystem.out.println(\\\"SMS to \\\" + toNumber+\\\" success:\\\" + sentMsg);\n\t\t}else{\n\t\t\tSystem.out.println(\\\"SMS to \\\" + toNumber+\\\" failed.\\t response is \\\" + content);\n\t\t\tif (this.getSmtpService() != null) {\n\t\t\t\tString messageContent = String.format(\\\"\u5411%s\u53d1\u9001\u6d88\u606f%s\u5931\u8d25.\\r", "CodeBleu_score": 30.63476384434863}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tAM_TASK_TYPE=\\\"task_type\\\";\n\tprotected static final String PARAM_RECIEVER_NUMBER=\\\"to_number\\\";\n\tprotected static final String PARAM_FROM_WHO=\\\"from_who\\\";\n\n\tprotected static final String PARAM_MESSAGE_TEMPLATE=\\\"template\\\";\n\tprotected static final String PARAM_MESSAGE_DATA=\\\"params\\\";\n\tprotected static final int QUEUE_SIZE = 100;\n\n\tprotected SMTPService smtpService;\n\n\n\n\tpublic SMTPService getSmtpService() {\n\t\treturn smtpService;\n\t}\n\n\tpublic void setSmtpService(SMTPService smtpService) {\n\t\tthis.smtpService = smtpService;\n\t}\n\n\t@Override\n\tpublic void sendMessage(String dest, String fromWho, String template, Map<String, String> parameters)\n\t\t\tthrows Exception {\n\t\tif (!StringUtils.isBlank(template) && (parameters==null || parameters.isEmpty())){\n\t\t\t// \u5982\u679c\u4f60\u8c03\u9519\u4e86\u63a5\u53e3\uff0c\u628a\u6d88\u606f\u653e\u5230template\u53c2\u6570\u4e0a\u4e86\uff0c\u4e5f\u5c31\u8fd9\u4e2a\u77ed\u4fe1\u670d\u52a1\u63a5\u53e3\uff0c\u3000\u53ef\u4ee5\u517c\u5bb9\u5904\u7406\u4e00\u4e0b\n\t\t\tparameters = new HashMap<String, String>();\n\t\t\tparameters.put(\\\"message\\\", template);\n\t\t}\n\n\t\tMap<String, Object> task = new HashMap<String, Object>();\n\t\ttask.put(PARAM_TASK_TYPE, TASK_PLAIN_TEXT_MESSAGE);\n\t\ttask.put(PARAM_RECIEVER_NUMBER, dest);\n\t\ttask.put(PARAM_FROM_WHO, fromWho);\n\t\ttask.put(PARAM_MESSAGE_TEMPLATE, template);\n\t\ttask.put(PARAM_MESSAGE_DATA, parameters);\n\n\t\taddTask(task);\n\t}\n\n\tprivate void addTask(Map<String, Object> task) {\n\t\tensureTaskThread();\n\t\ttry {\n\t\t\ttaskQueue.put(task);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tprivate void ensureTaskThread() {\n\t\tif (taskQueue != null){\n\t\t\treturn;\n\t\t}\n\t\tsynchronized (SczhtMessageService.class){\n\t\t\tif (taskQueue != null){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttaskQueueThread = new Thread(){\n\t\t\t\tpublic void run(){\n\t\t\t\t\twhile(running.get()){\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tpollingWork();\n\t\t\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\ttaskQueue = new LinkedBlockingQueue<Map<String, Object>>(QUEUE_SIZE);\n\t\t\trunning.set(true);\n\t\t\ttaskQueueThread.start();\n\t\t}\n\t}\n\n\tprotected void pollingWork() throws InterruptedException{\n\t\tMap<String, Object> task = taskQueue.poll(30, TimeUnit.SECONDS);\n\t\tif (task == null){\n\t\t\treturn;\n\t\t}\n\t\tString taskType = (String) task.get(PARAM_TASK_TYPE);\n\t\tif (taskType.equals(TASK_PLAIN_TEXT_MESSAGE)){\n\t\t\ttry {\n\t\t\t\tString toNumber = (String) task.get(PARAM_RECIEVER_NUMBER);\n\t\t\t\tObject param = task.get(PARAM_MESSAGE_DATA);\n\t\t\t\tif (!(param instanceof Map)){\n\t\t\t\t\tSystem.out.println(\\\"Send message to \\\" + toNumber + \\\" failed. Input data is \\\" + param);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tString message = (String) ((Map<String, Object>) param).get(\\\"message\\\");\n\t\t\t\tSystem.out.println(\\\"Send message to \\\" + toNumber+\\\": \\\" + message);\n\t\t\t\tsendPlainTextMessage(toNumber,message);\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate void sendPlainTextMessage(String toNumber, String message) throws Exception {\n\t\t// http://api.sczht.cc:8888/sms.aspx\n\t\tString sentMsg = \\\"\u3010\\\"+getSmsSignName()+\\\"\u3011 \\\"+message+getTimeStamp();\n\t\tURI uri = new URIBuilder().setScheme(\\\"http\\\").setHost(\\\"api.sczht.cc\\\").setPort(8888)\n\t\t\t\t.setPath(\\\"sms.aspx\\\").addParameter(\\\"action\\\", \\\"send\\\")\n\t\t\t\t.addParameter(\\\"userid\\\", getUserId())\n\t\t\t\t.addParameter(\\\"account\\\", getAccount())\n\t\t\t\t.addParameter(\\\"password\\\", getPasswork())\n\t\t\t\t.addParameter(\\\"mobile\\\", toNumber)\n\t\t\t\t.addParameter(\\\"content\\\",sentMsg )\n\t\t\t\t.build();\n\t\tString content = httpGetRequestXml(uri);\n\t\t//Map<String, Object> responseObj = XMLDecodeUtils.decodeXmlString(content);\n\t\tif (content!=null && isSuccessResponse(content)){\n\t\t\tSystem.out.println(\\\"SMS to \\\" + toNumber+\\\" success:\\\" + sentMsg);\n\t\t}else{\n\t\t\tSystem.out.println(\\\"SMS to \\\" + toNumber+\\\" failed.\\t response is \\\" + content);\n\t\t\tif (this.getSmtpService() != null) {\n\t\t\t\tString messageContent = String.format(\\\"\u5411%s\u53d1\u9001\u6d88\u606f%s\u5931\u8d25.\\r", "CodeBleu_score": 30.63476384434863}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tif (StringUtils.isEmpty(messageXmlStr)) {\n\t\treturn null;\n\t}\n\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tfactory.setNamespaceAware(false);\n\tfactory.setValidating(false);\n\tfactory.setIgnoringElementContentWhitespace(true);\n\tfactory.setIgnoringComments(true);\n\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument document = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n\n\tNodeList nodeList = document.getChildNodes();\n\tif (nodeList.getLength() == 0) {\n\t\treturn null;\n\t}\n\n\tNode rootNode = nodeList.item(0);\n\treturn decodeNode(rootNode, doTrim);\n}", "CodeBleu_score": 50.92580815533411}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tif (StringUtils.isBlank(messageXmlStr)) {\n\t\treturn null;\n\t}\n\t\n\tDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder db = dbf.newDocumentBuilder();\n\tDocument doc = db.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n\t\n\tMap<String, Object> map = new HashMap<>();\n\t\n\tNodeList childNodes = doc.getDocumentElement().getChildNodes();\n\tfor (int i = 0; i < childNodes.getLength(); i++) {\n\t\tNode node = childNodes.item(i);\n\t\t\n\t\tif (node.getNodeType() == Node.ELEMENT_NODE) {\n\t\t\tString nodeName = node.getNodeName();\n\t\t\tString nodeValue = node.getTextContent();\n\t\t\t\n\t\t\tif (doTrim) {\n\t\t\t\tnodeValue = nodeValue.trim();\n\t\t\t}\n\t\t\t\n\t\t\tif (node.hasAttributes()) {\n\t\t\t\tNamedNodeMap attributes = node.getAttributes();\n\t\t\t\t\n\t\t\t\tMap<String, String> attributesMap = new HashMap<>();\n\t\t\t\tfor (int j = 0; j < attributes.getLength(); j++) {\n\t\t\t\t\tNode attr = attributes.item(j);\n\t\t\t\t\tString attrName = attr.getNodeName();\n\t\t\t\t\tString attrValue = attr.getNodeValue();\n\t\t\t\t\t\n\t\t\t\t\tif (doTrim) {\n\t\t\t\t\t\tattrValue = attrValue.trim();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tattributesMap.put(attrName, attrValue);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tmap.put(nodeName, attributesMap);\n\t\t\t} else {\n\t\t\t\tmap.put(nodeName, nodeValue);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn map;\n}", "CodeBleu_score": 44.60855564291381}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tif (StringUtils.isBlank(messageXmlStr)) {\n        return null;\n    }\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    Document doc = db.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n    doc.getDocumentElement().normalize();\n    NodeList childNodes = doc.getDocumentElement().getChildNodes();\n    List<Map<String, Object>> root = decodeNodeList(childNodes, doTrim);\n    if (root == null || root.size() == 0) {\n        return null;\n    }\n    if (root.size() == 1) {\n        return (Map<String, Object>) root.get(0);\n    }\n    return null;\n}", "CodeBleu_score": 52.21884544253723}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tfinal boolean autoShipAndInvoice = sysConfigBL.getBooleanValue(SYS_Config_AUTO_SHIP_AND_INVOICE, false, orderRecord.getAD_Org_ID());\n\tfinal boolean isCompleteShipAndInvoiceEnabled = completeShipAndInvoiceEnqueuer.isCompleteShipAndInvoiceEnabled();\n\tfinal boolean isDeliveryRule = orderRecord.getDeliveryRule() == DeliveryRule.Force;\n\tfinal boolean isCompleteShipAndInvoiceEligible = autoShipAndInvoice && isCompleteShipAndInvoiceEnabled && isDeliveryRule;\n\n\tif (isCompleteShipAndInvoiceEligible) {\n\t\tfinal String trxName = InterfaceWrapperHelper.getTrxName(orderRecord);\n\t\tfinal OrderId orderId = OrderId.ofRepoId(orderRecord.getC_Order_ID());\n\t\tfinal AsyncBatchId asyncBatchId = completeShipAndInvoiceEnqueuer.enqueueCompleteShipAndInvoice(orderId, trxName);\n\t\tasyncBatchObserver.onAsyncBatchProcessed(asyncBatchId);\n\t\tLoggables.withLogger(logger, Level.INFO).addLog(\"Auto-processing order {}\", orderId);\n\t} else {\n\t\tfinal String trxName = InterfaceWrapperHelper.getTrxName(orderRecord);\n\t\tfinal OrderId orderId = OrderId.ofRepoId(orderRecord.getC_Order_ID());\n\t\tfinal AsyncBatchId asyncBatchId = CreateMissingShipmentSchedulesWorkpackageProcessor.enqueue(orderId, trxName);\n\t\tasyncBatchObserver.onAsyncBatchProcessed(asyncBatchId);\n\t\tLoggables.withLogger(logger, Level.INFO).addLog(\"Auto-processing order {} is not eligible for auto-processing. Enqueued missing shipment schedules for order {}\", orderId, orderId);\n\t}\n}", "CodeBleu_score": 54.613849195648555}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tfinal boolean autoProcess = sysConfigBL.getBooleanValue(SYS_Config_AUTO_SHIP_AND_INVOICE, true, orderRecord.getAD_Client_ID(), orderRecord.getAD_Org_ID());\n\tfinal boolean isComplete = orderRecord.isComplete();\n\tfinal boolean isDeliveryRule = orderRecord.getDeliveryRule() == DeliveryRule.FORCE || orderRecord.getDeliveryRule() == DeliveryRule.AVAILABLE_AS_SOON_AS_POSSIBLE;\n\tfinal boolean isSOTrx = orderRecord.isSOTrx();\n\tfinal boolean isInvoiceRule = orderRecord.getInvoiceRule() == DeliveryRule.FORCE || orderRecord.getInvoiceRule() == DeliveryRule.PO;\n\n\tif (autoProcess && isComplete && isDeliveryRule && isSOTrx && isInvoiceRule) {\n\t\tLoggables.withLogger(logger, Level.INFO).addLog(\"Auto-processing of order {} is eligible\", orderRecord.getDocumentNo());\n\t\tcompleteShipAndInvoiceEnqueuer.enqueueCompleteShipAndInvoice(orderRecord);\n\t} else {\n\t\tLoggables.withLogger(logger, Level.INFO).addLog(\"Auto-processing of order {} is not eligible\", orderRecord.getDocumentNo());\n\t\tfinal boolean postponeMissingShipmentSchedules = sysConfigBL.getBooleanValue(CreateMissingShipmentSchedulesWorkpackageProcessor.SYS_Config_POSTPONE_MISSING_SHIPMENT_SCHEDULES, true, orderRecord.getAD_Client_ID(), orderRecord.getAD_Org_ID());\n\t\tif (!postponeMissingShipmentSchedules) {\n\t\t\tLoggables.withLogger(logger, Level.INFO).addLog(\"Enqueuing missing shipment schedules for order {}\", orderRecord.getDocumentNo());\n\t\t\tasyncBatchObserver.enqueueWorkpackage(CreateMissingShipmentSchedulesWorkpackageProcessor.WORKPACKAGE_TYPE, OrderId.ofRepoId(orderRecord.getC_Order_ID()));\n\t\t} else {", "CodeBleu_score": 43.42914468881577}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tfinal boolean isAutoShipAndInvoice = isAutoShipAndInvoice(orderRecord);\n\tif (isAutoShipAndInvoice) {\n\t\tlog(Level.INFO, \"Auto-processing order {}\", orderRecord);\n\t\tcompleteShipAndInvoiceEnqueuer.enqueue(OrderId.ofRepoId(orderRecord.getC_Order_ID()));\n\t} else {\n\t\tlog(Level.INFO, \"Order {} is not eligible for auto-processing. Scheduling creation of missing shipment schedules\", orderRecord);\n\t\tfinal AsyncBatchId asyncBatchId = CreateMissingShipmentSchedulesWorkpackageProcessor.enqueue(orderRecord);\n\t\tasyncBatchObserver.onNewAsyncBatch(asyncBatchId);\n\t}\n}", "CodeBleu_score": 40.187949809485524}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$request->validate([\n        'email' => 'required|string',\n        'password' => 'required|string',\n    ]);\n\n    $user = User::where('email', $request->input('email'))->first();\n\n    if (is_null($user) || ! $user->checkPassword($request->input('password'))) {\n        event(new Failed($request));\n\n        throw ValidationException::withMessages([\n            'email' => [__('auth.failed')],\n        ]);\n    }\n\n    return $user;\n}", "CodeBleu_score": 43.126061008958516}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$request->validate([\n        'email' => 'required|string',\n        'password' => 'required|string',\n    ]);\n\n    $user = User::where('email', $request->email)->first();\n\n    if (\n        $user &&\n        \\Hash::check($request->password, $user->password)\n    ) {\n        return $user;\n    }\n\n    event(new Failed(config('fortify.guard')));\n\n    throw ValidationException::withMessages([\n        'email' => [__('auth.failed')],\n    ]);\n}", "CodeBleu_score": 41.043418566287734}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$request->validate([\n        'email' => ['required', 'string'],\n        'password' => ['required', 'string'],\n    ]);\n\n    $user = User::where('email', $request->email)->first();\n\n    if ($user && $user->two_factor_secret) {\n        $user->two_factor_confirmed_at = now();\n        $user->save();\n    }\n\n    if ($user && $user->two_factor_secret) {\n        $request->session()->put('auth.password_confirmed_at', time());\n    }\n\n    if ($user && $user->two_factor_secret) {\n        $request->session()->put('auth.password_confirmed_at', time());\n    }\n\n    if ($user && $user->two_factor_secret) {\n        $request->session()->put('auth.password_confirmed_at', time());\n    }\n\n    if ($user && $user->two_factor_secret) {\n        $request->session()->put('auth.password_confirmed_at', time());\n    }\n\n    if ($user && $user->two_factor_secret) {\n        $request->session()->put('auth.password_confirmed_at', time());\n    }\n\n    if ($user && $user->two_factor_secret) {\n        $request->session()->put('auth.password_confirmed_at', time());\n    }\n\n    if ($user && $user->two_factor_secret) {\n        $request->session()->put('auth.password_confirmed_at', time());\n    }\n\n    if ($user && $user->two_factor_secret) {\n        $request->session()->put('auth.password_confirmed_at', time());\n    }\n\n    if ($user && $user->two_factor_secret) {\n        $request->session()->put('auth.password_confirmed_at', time());\n    }\n\n    if ($user && $user->two_factor_secret) {\n        $request->session()->put('auth.password_confirmed_at', time());\n    }\n\n    if ($", "CodeBleu_score": 30.63704374553464}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        'email' => [__($this->getFailedLoginMessage($request))],\n    ]);\n}", "CodeBleu_score": 68.25196469012482}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        'email' => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 92.96875823806899}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        'email' => [__($this->getFailedLoginMessage())],\n    ]);\n}", "CodeBleu_score": 69.15442847890303}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t$user = User::find(session('two_factor.user_id'));\n    if ($user) {\n        $data = Webauthn::prepareAssertion($user);\n        $data['remember'] = $request->session()->get('two_factor.remember', false);\n        $data['enabled'] = $user->two_factor_secret ? true : false;\n    }\n    return Inertia::render('Auth/TwoFactorChallenge', $data);\n}", "CodeBleu_score": 44.570066778673564}, {"code": "<?\npublic function toResponse($request){\n\t$user = $request->user();\n\n    $publicKey = Webauthn::publicKey($user);\n\n    if ($publicKey) {\n        $user->webauthn_public_key = $publicKey->publicKey;\n        $user->save();\n    }\n\n    return Inertia::render('TwoFactorChallenge', [\n        'twoFactorEnabled' => $user->two_factor_secret,\n        'remember' => $request->session()->get('remember')\n    ]);\n}", "CodeBleu_score": 37.8065739021208}, {"code": "<?\npublic function toResponse($request){\n\t$user = User::find(session('two_factor.user.id'));\n    if (!$user) {\n        return redirect('/');\n    }\n\n    $data = [\n        'twoFactorEnabled' => $user->two_factor_secret ? true : false,\n        'remember' => session('two_factor.remember'),\n        'user' => $user,\n    ];\n\n    if ($user->two_factor_secret) {\n        $data['assertion'] = Webauthn::generateAssertion($user, session('two_factor.user.id'));\n    }\n\n    return Inertia::render('TwoFactorChallenge', $data);\n}", "CodeBleu_score": 40.74041455612832}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$token = UserToken::where('driver', $driver)->where('provider_id', $socialite->getId())->first();\n    if ($token) {\n        return $this->verifyUserAssociation($request, $token, $socialite);\n    }\n\n    return $this->createUser($request, $driver, $socialite);\n}", "CodeBleu_score": 35.20152391523958}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$userToken = UserToken::where('driver', $driver)->where('socialite_id', $socialite->getId())->first();\n\n    if ($userToken) {\n        $user = $userToken->user;\n        $user->update([\n            'name' => $socialite->getName(),\n            'email' => $socialite->getEmail(),\n        ]);\n\n        $userToken->update([\n            'token' => $socialite->token,\n            'refresh_token' => $socialite->refreshToken,\n            'expires_in' => $socialite->expiresIn,\n        ]);\n\n        $user->tokens()->where('tokenable_id', $user->id)->delete();\n        $user->tokens()->create([\n            'token' => $socialite->token,\n            'name' => 'Socialite ' . $driver,\n        ]);\n\n        return $user;\n    }\n\n    $user = User::where('email', $socialite->getEmail())->first();\n\n    if ($user) {\n        $user->update([\n            'name' => $socialite->getName(),\n        ]);\n\n        $user->tokens()->where('tokenable_id', $user->id)->delete();\n        $user->tokens()->create([\n            'token' => $socialite->token,\n            'name' => 'Socialite ' . $driver,\n        ]);\n\n        return $user;\n    }\n\n    $user = User::create([\n        'name' => $socialite->getName(),\n        'email' => $socialite->getEmail(),\n        'password' => Str::random(16),\n    ]);\n\n    $user->tokens()->create([\n        'token' => $socialite->token,\n        'name' => 'Socialite ' . $driver,\n    ]);\n\n    UserToken::create([\n        'user_id' => $user->id,\n        'driver' => $driver,\n        'socialite_id' => $socialite->getId(),\n        'token' => $socialite->token,\n        'refresh_token' => $socialite->refreshToken", "CodeBleu_score": 41.590746095116735}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$socialiteId = $socialite->getId();\n    $token = UserToken::where('driver', $driver)->where('socialite_id', $socialiteId)->first();\n\n    if ($token) {\n        $user = $token->user;\n\n        if ($user->two_factor_secret && ! is_null($user->two_factor_confirmed_at)) {\n            return $user;\n        }\n\n        if (Webauthn::enabled($user)) {\n            return $user;\n        }\n\n        $this->guard->login($user, $request->session()->pull('login.remember', false));\n\n        return $user;\n    }\n\n    if ($driver === 'google') {\n        $user = User::where('email', $socialite->getEmail())->first();\n\n        if ($user) {\n            $user->update([\n                'name' => $socialite->getName(),\n            ]);\n        } else {\n            $user = User::create([\n                'name' => $socialite->getName(),\n                'email' => $socialite->getEmail(),\n            ]);\n        }\n    } else {\n        $user = User::where('email', $socialite->getEmail())->first();\n\n        if ($user) {\n            $user->update([\n                'name' => $socialite->getName(),\n            ]);\n        } else {\n            $user = User::create([\n                'name' => $socialite->getName(),\n                'email' => $socialite->getEmail(),\n                'password' => Str::random(64),\n            ]);\n        }\n    }\n\n    $token = UserToken::create([\n        'driver' => $driver,\n        'socialite_id' => $socialiteId,\n        'user_id' => $user->id,\n    ]);\n\n    return $user;\n}", "CodeBleu_score": 45.26817551676226}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $request->user();\n    if (!$user) {\n        return false;\n    }\n\n    if (!WebauthnFacade::validateAssertion($user, $this->filterCredentials($request))) {\n        event(new Failed($user, 'webauthn', ['webauthn' => 'Invalid assertion.']));\n\n        $this->throwFailedAuthenticationException($request);\n\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 57.25003286589379}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $this->guard->user();\n\n    if (! $user) {\n        return false;\n    }\n\n    $credentials = $this->filterCredentials($request);\n\n    $validated = WebauthnFacade::validateAssertion(\n        $user,\n        $credentials['id'],\n        $credentials['clientData'],\n        $credentials['authenticatorData'],\n        $credentials['signature'],\n        $credentials['publicKey'],\n        $credentials['transports'],\n    );\n\n    if (! $validated) {\n        event(new Failed($user, $credentials['id'], 'webauthn'));\n\n        $this->throwFailedAuthenticationException($request);\n\n        return false;\n    }\n\n    $this->guard->login($user);\n\n    return true;\n}", "CodeBleu_score": 51.63448373901047}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $request->user();\n\n    if ($user === null) {\n        return false;\n    }\n\n    try {\n        WebauthnFacade::validateAssertion($user, $request->input('assertion'));\n\n        return true;\n    } catch (ValidationException $e) {\n        $this->guard->logout();\n\n        event(new Failed($user, $e));\n\n        $this->throwFailedAuthenticationException($request);\n\n        return false;\n    }\n}", "CodeBleu_score": 59.51892443562947}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\t$email = $this->option('email');\n    if ($email === null) {\n        $this->error('No email provided');\n        return null;\n    }\n\n    try {\n        return User::where('email', $email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error('User not found');\n        return null;\n    }\n}", "CodeBleu_score": 72.65439217477736}, {"code": "<?\nprivate function user(): ?User{\n\tif ($this->email === null) {\n        $this->error('No email provided');\n\n        return null;\n    }\n\n    try {\n        return User::where('email', $this->email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error('User not found');\n\n        return null;\n    }\n}", "CodeBleu_score": 44.776068990172746}, {"code": "<?\nprivate function user(): ?User{\n\tif ($this->option('email') === null) {\n        $this->error('No email provided');\n        return null;\n    }\n\n    try {\n        return User::where('email', $this->option('email'))->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error('User not found');\n        return null;\n    }\n}", "CodeBleu_score": 45.70544195417043}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\tif (config('scout.driver') === 'meilisearch' && config('scout.meilisearch.host') !== '') {\n        $this->artisan('\u2610 Flushing indexes on Meilisearch', 'scout:flush', ['--verbose' => true]);\n    }\n}", "CodeBleu_score": 22.66507996272668}, {"code": "<?\nprotected function scoutFlush(): void{\n\tif (config('scout.driver') === 'meilisearch' && config('scout.meilisearch.host') !== '') {\n        $this->info('\u2610 Flushing indexes on Meilisearch');\n        $this->call('scout:flush', ['--force' => true]);\n    }\n}", "CodeBleu_score": 24.880588696208765}, {"code": "<?\nprotected function scoutFlush(): void{\n\tif (config('scout.driver') === 'meilisearch' && config('scout.meilisearch.host') !== '') {\n        $this->artisan('\u2610 Flushing indexes on Meilisearch', 'scout:flush', ['--verbose' => true]);\n    }\n}", "CodeBleu_score": 22.66507996272668}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = $this->read($resource);\n    $this->applyExporters($vcard, $resource);\n    return $vcard;\n}", "CodeBleu_score": 13.445855174396634}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = $this->read($resource);\n    if (!$vcard) {\n        $vcard = $this->create($resource);\n    }\n\n    $this->applyExporters($resource, $vcard);\n\n    return $vcard;\n}", "CodeBleu_score": 15.955110304490299}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = $this->read($resource);\n    $vcard = $this->addBasicInformation($vcard, $resource);\n    $vcard = $this->applyExporters($vcard, $resource);\n    return $vcard;\n}", "CodeBleu_score": 17.19036246553758}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\tn     * Returns the collection of all active contacts.\n     *\n     * @return \\Illuminate\\Support\\Collection<array-key,VCardResource>\n     */\n    public function getObjects(?string $collectionId): Collection\n    {\n        $vaults = $this->user->vaults()\n            ->wherePivot('permission', '<=', Vault::PERMISSION_VIEW);\n\n        if ($collectionId !== null) {\n            $vaults = $vaults->where('id', $collectionId);\n        }\n\n        $contacts = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->contacts()\n                ->active()\n                ->get()\n            )\n            ->flatten();\n\n        $groups = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->groups()\n                ->get()\n            )\n            ->flatten();\n\n        $result = $contacts->merge($groups);\n\n        return $result;\n    }\n\n    /**\n     * Returns the collection of deleted contacts.\n     *\n     * @return \\Illuminate\\Support\\Collection<array-key,VCardResource>\n     */\n    public function getDeletedObjects(?string $collectionId): Collection\n    {\n        $vaults = $this->user->vaults()\n            ->wherePivot('permission', '<=', Vault::PERMISSION_VIEW);\n\n        if ($collectionId !== null) {\n            $vaults = $vaults->where('id', $collectionId);\n        }\n\n        $contacts = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->contacts()\n                ->onlyTrashed()\n                ->get()\n            )\n            ->flatten();\n\n        $groups = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->groups()\n                ->onlyTrashed()\n                ->get()\n            )\n            ->flatten();\n\n        return $contacts->merge($groups);\n    }\n\n    /**\n     * Returns all cards for a specific addressbook id.\n     *\n     * This method should return the following properties for each card:\n     *   * carddata - raw vcard data\n     *   * uri - Some unique url\n     *   * lastmodified - A unix timestamp\n     *\n     * It's recommended to also return the following properties:\n     *   * etag - A unique etag. This must change every time the card changes.\n     *   * size - The size of the card in bytes.\n     *\n     * If these last two properties are provided, less time will be spent\n     * calculating them. If they are specified, you can also ommit carddata.\n     * This may speed up certain requests, especially with large cards.\n     *\n     * @param  mixed  $addressbookId\n     */\n    public function getCards($addressbookId): array\n    {\n        $cards = $this->getObjects($addressbookId);\n\n        return $cards\n            ->map(fn (VCardResource $card) => $this->prepareCard($card))\n            ->toArray();\n    }\n\n    /**\n     * Returns a specific card.\n     *\n     * The same set of properties must be returned as with getCards. The only\n     * exception is that 'carddata' is absolutely required.\n     *\n     * If the card does not exist, you must return false.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     * @return array|bool\n     */\n    #[ReturnTypeWillChange]\n    public function getCard($addressBookId, $cardUri)\n    {\n        $card = $this->getObject($addressBookId, $cardUri);\n\n        return $card === null\n            ? false\n            : $this->prepareCard($card);\n    }\n\n    /**\n     * Creates a new card.\n     *\n     * The addressbook id will be passed as the first argument. This is the\n     * same id as it is returned from the getAddressBooksForUser method.\n     *\n     * The cardUri is a base uri, and doesn't include the full path. The\n     * cardData argument is the vcard body, and is passed as a string.\n     *\n     * It is possible to return an ETag from this method. This ETag is for the\n     * newly created resource, and must be enclosed with double quotes (that\n     * is, the string itself must contain the double quotes).\n     *\n     * You should only return the ETag if you store the carddata as-is. If a\n     * subsequent GET request on the same card does not have the same body,\n     * byte-by-byte and you did return an ETag here, clients tend to get\n     * confused.\n     *\n     * If you don't return an ETag, you can just return null.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     * @param  string  $cardData\n     */\n    public function createCard($addressBookId, $cardUri, $cardData): ?string\n    {\n        return $this->updateCard($addressBookId, $cardUri, $cardData);\n    }\n\n    /**\n     * Updates a card.\n     *\n     * The addressbook id will be passed as the first argument. This is the\n     * same id as it is returned from the getAddressBooksForUser method.\n     *\n     * The cardUri is a base uri, and doesn't include the full path. The\n     * cardData argument is the vcard body, and is passed as a string.\n     *\n     * It is possible to return an ETag from this method. This ETag should\n     * match that of the updated resource, and must be enclosed with double\n     * quotes (that is: the string itself must contain the actual quotes).\n     *\n     * You should only return the ETag if you store the carddata as-is. If a\n     * subsequent GET request on the same card does not have the same body,\n     * byte-by-byte and you did return an ETag here, clients tend to get\n     * confused.\n     *\n     * If you don't return an ETag, you can just return null.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     * @param  string|resource  $cardData\n     */\n    public function updateCard($addressBookId, $cardUri, $cardData): ?string\n    {\n        $vault = $this->user->vaults()\n            ->wherePivot('permission', '<=', Vault::PERMISSION_EDIT)\n            ->findOrFail($addressBookId);\n\n        $job = new UpdateVCard([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $vault->id,\n            'uri' => $cardUri,\n            'card' => $cardData,\n        ]);\n\n        Bus::batch([$job])\n            ->allowFailures()\n            ->onQueue('high')\n            ->dispatch();\n\n        return null;\n    }\n\n    /**\n     * Deletes a card.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     */\n\n\n", "CodeBleu_score": 36.575740769656036}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\tn     * Returns the collection of all active contacts.\n     *\n     * @return \\Illuminate\\Support\\Collection<array-key,VCardResource>\n     */\n    public function getObjects(?string $collectionId): Collection\n    {\n        $vaults = $this->user->vaults()\n            ->wherePivot('permission', '<=', Vault::PERMISSION_VIEW);\n\n        if ($collectionId !== null) {\n            $vaults = $vaults->where('id', $collectionId);\n        }\n\n        $contacts = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->contacts()\n                ->active()\n                ->get()\n            )\n            ->flatten();\n\n        $groups = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->groups()\n                ->get()\n            )\n            ->flatten();\n\n        $result = $contacts->merge($groups);\n\n        return $result;\n    }\n\n    /**\n     * Returns the collection of deleted contacts.\n     *\n     * @return \\Illuminate\\Support\\Collection<array-key,VCardResource>\n     */\n    public function getDeletedObjects(?string $collectionId): Collection\n    {\n        $vaults = $this->user->vaults()\n            ->wherePivot('permission', '<=', Vault::PERMISSION_VIEW);\n\n        if ($collectionId !== null) {\n            $vaults = $vaults->where('id', $collectionId);\n        }\n\n        $contacts = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->contacts()\n                ->onlyTrashed()\n                ->get()\n            )\n            ->flatten();\n\n        $groups = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->groups()\n                ->onlyTrashed()\n                ->get()\n            )\n            ->flatten();\n\n        return $contacts->merge($groups);\n    }\n\n    /**\n     * Returns all cards for a specific addressbook id.\n     *\n     * This method should return the following properties for each card:\n     *   * carddata - raw vcard data\n     *   * uri - Some unique url\n     *   * lastmodified - A unix timestamp\n     *\n     * It's recommended to also return the following properties:\n     *   * etag - A unique etag. This must change every time the card changes.\n     *   * size - The size of the card in bytes.\n     *\n     * If these last two properties are provided, less time will be spent\n     * calculating them. If they are specified, you can also ommit carddata.\n     * This may speed up certain requests, especially with large cards.\n     *\n     * @param  mixed  $addressbookId\n     */\n    public function getCards($addressbookId): array\n    {\n        $cards = $this->getObjects($addressbookId);\n\n        return $cards\n            ->map(fn (VCardResource $card) => $this->prepareCard($card))\n            ->toArray();\n    }\n\n    /**\n     * Returns a specific card.\n     *\n     * The same set of properties must be returned as with getCards. The only\n     * exception is that 'carddata' is absolutely required.\n     *\n     * If the card does not exist, you must return false.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     * @return array|bool\n     */\n    #[ReturnTypeWillChange]\n    public function getCard($addressBookId, $cardUri)\n    {\n        $card = $this->getObject($addressBookId, $cardUri);\n\n        return $card === null\n            ? false\n            : $this->prepareCard($card);\n    }\n\n    /**\n     * Creates a new card.\n     *\n     * The addressbook id will be passed as the first argument. This is the\n     * same id as it is returned from the getAddressBooksForUser method.\n     *\n     * The cardUri is a base uri, and doesn't include the full path. The\n     * cardData argument is the vcard body, and is passed as a string.\n     *\n     * It is possible to return an ETag from this method. This ETag is for the\n     * newly created resource, and must be enclosed with double quotes (that\n     * is, the string itself must contain the double quotes).\n     *\n     * You should only return the ETag if you store the carddata as-is. If a\n     * subsequent GET request on the same card does not have the same body,\n     * byte-by-byte and you did return an ETag here, clients tend to get\n     * confused.\n     *\n     * If you don't return an ETag, you can just return null.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     * @param  string  $cardData\n     */\n    public function createCard($addressBookId, $cardUri, $cardData): ?string\n    {\n        return $this->updateCard($addressBookId, $cardUri, $cardData);\n    }\n\n    /**\n     * Updates a card.\n     *\n     * The addressbook id will be passed as the first argument. This is the\n     * same id as it is returned from the getAddressBooksForUser method.\n     *\n     * The cardUri is a base uri, and doesn't include the full path. The\n     * cardData argument is the vcard body, and is passed as a string.\n     *\n     * It is possible to return an ETag from this method. This ETag should\n     * match that of the updated resource, and must be enclosed with double\n     * quotes (that is: the string itself must contain the actual quotes).\n     *\n     * You should only return the ETag if you store the carddata as-is. If a\n     * subsequent GET request on the same card does not have the same body,\n     * byte-by-byte and you did return an ETag here, clients tend to get\n     * confused.\n     *\n     * If you don't return an ETag, you can just return null.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     * @param  string|resource  $cardData\n     */\n    public function updateCard($addressBookId, $cardUri, $cardData): ?string\n    {\n        $vault = $this->user->vaults()\n            ->wherePivot('permission', '<=', Vault::PERMISSION_EDIT)\n            ->findOrFail($addressBookId);\n\n        $job = new UpdateVCard([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $vault->id,\n            'uri' => $cardUri,\n            'card' => $cardData,\n        ]);\n\n        Bus::batch([$job])\n            ->allowFailures()\n            ->onQueue('high')\n            ->dispatch();\n\n        return null;\n    }\n\n    /**\n     * Deletes a card.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     */\n\n\n", "CodeBleu_score": 36.575740769656036}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\tn     * Returns the collection of all active contacts.\n     *\n     * @return \\Illuminate\\Support\\Collection<array-key,VCardResource>\n     */\n    public function getObjects(?string $collectionId): Collection\n    {\n        $vaults = $this->user->vaults()\n            ->wherePivot('permission', '<=', Vault::PERMISSION_VIEW);\n\n        if ($collectionId !== null) {\n            $vaults = $vaults->where('id', $collectionId);\n        }\n\n        $contacts = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->contacts()\n                ->active()\n                ->get()\n            )\n            ->flatten();\n\n        $groups = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->groups()\n                ->get()\n            )\n            ->flatten();\n\n        $result = $contacts->merge($groups);\n\n        return $result;\n    }\n\n    /**\n     * Returns the collection of deleted contacts.\n     *\n     * @return \\Illuminate\\Support\\Collection<array-key,VCardResource>\n     */\n    public function getDeletedObjects(?string $collectionId): Collection\n    {\n        $vaults = $this->user->vaults()\n            ->wherePivot('permission', '<=', Vault::PERMISSION_VIEW);\n\n        if ($collectionId !== null) {\n            $vaults = $vaults->where('id', $collectionId);\n        }\n\n        $contacts = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->contacts()\n                ->onlyTrashed()\n                ->get()\n            )\n            ->flatten();\n\n        $groups = $vaults->get()\n            ->map(fn (Vault $vault): Collection => $vault->groups()\n                ->onlyTrashed()\n                ->get()\n            )\n            ->flatten();\n\n        return $contacts->merge($groups);\n    }\n\n    /**\n     * Returns all cards for a specific addressbook id.\n     *\n     * This method should return the following properties for each card:\n     *   * carddata - raw vcard data\n     *   * uri - Some unique url\n     *   * lastmodified - A unix timestamp\n     *\n     * It's recommended to also return the following properties:\n     *   * etag - A unique etag. This must change every time the card changes.\n     *   * size - The size of the card in bytes.\n     *\n     * If these last two properties are provided, less time will be spent\n     * calculating them. If they are specified, you can also ommit carddata.\n     * This may speed up certain requests, especially with large cards.\n     *\n     * @param  mixed  $addressbookId\n     */\n    public function getCards($addressbookId): array\n    {\n        $cards = $this->getObjects($addressbookId);\n\n        return $cards\n            ->map(fn (VCardResource $card) => $this->prepareCard($card))\n            ->toArray();\n    }\n\n    /**\n     * Returns a specific card.\n     *\n     * The same set of properties must be returned as with getCards. The only\n     * exception is that 'carddata' is absolutely required.\n     *\n     * If the card does not exist, you must return false.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     * @return array|bool\n     */\n    #[ReturnTypeWillChange]\n    public function getCard($addressBookId, $cardUri)\n    {\n        $card = $this->getObject($addressBookId, $cardUri);\n\n        return $card === null\n            ? false\n            : $this->prepareCard($card);\n    }\n\n    /**\n     * Creates a new card.\n     *\n     * The addressbook id will be passed as the first argument. This is the\n     * same id as it is returned from the getAddressBooksForUser method.\n     *\n     * The cardUri is a base uri, and doesn't include the full path. The\n     * cardData argument is the vcard body, and is passed as a string.\n     *\n     * It is possible to return an ETag from this method. This ETag is for the\n     * newly created resource, and must be enclosed with double quotes (that\n     * is, the string itself must contain the double quotes).\n     *\n     * You should only return the ETag if you store the carddata as-is. If a\n     * subsequent GET request on the same card does not have the same body,\n     * byte-by-byte and you did return an ETag here, clients tend to get\n     * confused.\n     *\n     * If you don't return an ETag, you can just return null.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     * @param  string  $cardData\n     */\n    public function createCard($addressBookId, $cardUri, $cardData): ?string\n    {\n        return $this->updateCard($addressBookId, $cardUri, $cardData);\n    }\n\n    /**\n     * Updates a card.\n     *\n     * The addressbook id will be passed as the first argument. This is the\n     * same id as it is returned from the getAddressBooksForUser method.\n     *\n     * The cardUri is a base uri, and doesn't include the full path. The\n     * cardData argument is the vcard body, and is passed as a string.\n     *\n     * It is possible to return an ETag from this method. This ETag should\n     * match that of the updated resource, and must be enclosed with double\n     * quotes (that is: the string itself must contain the actual quotes).\n     *\n     * You should only return the ETag if you store the carddata as-is. If a\n     * subsequent GET request on the same card does not have the same body,\n     * byte-by-byte and you did return an ETag here, clients tend to get\n     * confused.\n     *\n     * If you don't return an ETag, you can just return null.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     * @param  string|resource  $cardData\n     */\n    public function updateCard($addressBookId, $cardUri, $cardData): ?string\n    {\n        $vault = $this->user->vaults()\n            ->wherePivot('permission', '<=', Vault::PERMISSION_EDIT)\n            ->findOrFail($addressBookId);\n\n        $job = new UpdateVCard([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $vault->id,\n            'uri' => $cardUri,\n            'card' => $cardData,\n        ]);\n\n        Bus::batch([$job])\n            ->allowFailures()\n            ->onQueue('high')\n            ->dispatch();\n\n        return null;\n    }\n\n    /**\n     * Deletes a card.\n     *\n     * @param  mixed  $addressBookId\n     * @param  string  $cardUri\n     */\n\n\n", "CodeBleu_score": 36.575740769656036}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\tif (! $data['file']) {\n        return;\n    }\n\n    $activity = $this->activityRepository->create(array_merge($data, [\n        'user_id' => auth()->guard('user')->user()->id,\n        'channel_type' => 'admin',\n    ]));\n\n    $file = $this->model->create([\n        'name' => $data['file']->getClientOriginalName(),\n        'path' => $data['file']->store('activity/'. $activity->id),\n        'activity_id' => $activity->id,\n    ]);\n\n    return $file;\n}", "CodeBleu_score": 56.304873313764716}, {"code": "<?\npublic function upload(array $data){\n\tif (!isset($data['file'])) {\n        return;\n    }\n\n    $activity = $this->activityRepository->create([\n        'name' => $data['name'],\n        'description' => $data['description'],\n        'user_id' => auth()->user()->id,\n        'lead_id' => $data['lead_id'],\n    ]);\n\n    $file = $data['file'];\n\n    $file->storeAs('activity/' . $activity->id, $file->getClientOriginalName());\n\n    $this->create([\n        'name' => $file->getClientOriginalName(),\n        'path' => 'activity/' . $activity->id . '/' . $file->getClientOriginalName(),\n        'activity_id' => $activity->id,\n    ]);\n}", "CodeBleu_score": 52.466225313273696}, {"code": "<?\npublic function upload(array $data){\n\tif (!isset($data['file'])) {\n        return;\n    }\n\n    $activity = $this->activityRepository->create([\n        'name' => $data['name'],\n        'description' => $data['description'],\n        'lead_id' => $data['lead_id'],\n        'user_id' => auth()->guard('user')->user()->id,\n        'type' => $data['type']\n    ]);\n\n    $file = $data['file'];\n\n    $fileName = $file->getClientOriginalName();\n\n    $file->storeAs('activity/' . $activity->id, $fileName, 'activity_files');\n\n    $this->create([\n        'name' => $fileName,\n        'path' => 'activity/' . $activity->id . '/' . $fileName,\n        'activity_id' => $activity->id\n    ]);\n\n    return $activity;\n}", "CodeBleu_score": 54.13069742706133}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t$response = null;\n\n    if ($exception instanceof ModelNotFoundException) {\n        $response = response()->view('admin::errors.404', [], 404);\n    } elseif ($exception instanceof PDOException) {\n        $response = response()->view('admin::errors.500', [], 500);\n    } elseif ($exception instanceof ParseError) {\n        $response = response()->view('admin::errors.500', [], 500);\n    } elseif ($exception instanceof HttpException) {\n        $response = response()->view('admin::errors.500', [], $exception->getStatusCode());\n    }\n\n    return $response;\n}", "CodeBleu_score": 46.14913413915735}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\tif ($exception instanceof ModelNotFoundException) {\n        if ($request->expectsJson()) {\n            return response()->json(['message' => $this->jsonErrorMessages[404]], 404);\n        }\n\n        return redirect()->guest(route('customer.session.index'));\n    }\n\n    if ($exception instanceof PDOException) {\n        if ($request->expectsJson()) {\n            return response()->json(['message' => $this->jsonErrorMessages[500]], 500);\n        }\n\n        return redirect()->guest(route('customer.session.index'));\n    }\n\n    if ($exception instanceof ParseError) {\n        if ($request->expectsJson()) {\n            return response()->json(['message' => $this->jsonErrorMessages[500]], 500);\n        }\n\n        return redirect()->guest(route('customer.session.index'));\n    }\n\n    if ($exception instanceof HttpException) {\n        if ($request->expectsJson()) {\n            return response()->json(['message' => $this->jsonErrorMessages[$exception->getStatusCode()]], $exception->getStatusCode());\n        }\n\n        return redirect()->guest(route('customer.session.index'));\n    }\n\n    return parent::render($request, $exception);\n}", "CodeBleu_score": 34.480611508712116}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\tif ($exception instanceof HttpException) {\n        $statusCode = $exception->getStatusCode();\n\n        if ($statusCode == 404) {\n            if (strpos($request->path(), 'admin') !== false) {\n                return response()->view('admin::errors.404', [], 404);\n            } else {\n                return redirect()->guest(route('customer.session.index'));\n            }\n        }\n\n        if ($statusCode == 403) {\n            if (strpos($request->path(), 'admin') !== false) {\n                return response()->view('admin::errors.403', [], 403);\n            } else {\n                return redirect()->guest(route('customer.session.index'));\n            }\n        }\n\n        if ($statusCode == 500) {\n            if (strpos($request->path(), 'admin') !== false) {\n                return response()->view('admin::errors.500', [], 500);\n            } else {\n                return redirect()->guest(route('customer.session.index'));\n            }\n        }\n    }\n\n    if ($exception instanceof ModelNotFoundException) {\n        if (strpos($request->path(), 'admin') !== false) {\n            return response()->view('admin::errors.404', [], 404);\n        } else {\n            return redirect()->guest(route('customer.session.index'));\n        }\n    }\n\n    if ($exception instanceof PDOException) {\n        if (strpos($request->path(), 'admin') !== false) {\n            return response()->view('admin::errors.500', [], 500);\n        } else {\n            return redirect()->guest(route('customer.session.index'));\n        }\n    }\n\n    if ($exception instanceof ParseError) {\n        if (strpos($request->path(), 'admin') !== false) {\n            return response()->view('admin::errors.500', [], 500);\n        } else {\n            return redirect()->guest(route('customer.session.index'));\n        }\n    }\n\n    return parent::render($request, $exception);\n}", "CodeBleu_score": 33.82199640256979}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\n        return response()->json(['message' => $this->jsonErrorMessages[$statusCode]], $statusCode);\n    }\n\n    return view('admin::' . $path . '.errors.' . $statusCode);\n}", "CodeBleu_score": 53.603223843746875}, {"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\n        return response()->json([\n            'message' => $this->jsonErrorMessages[$statusCode],\n        ], $statusCode);\n    }\n\n    return view(\n        'admin::' . $path . '.errors.' . $statusCode,\n        ['statusCode' => $statusCode]\n    );\n}", "CodeBleu_score": 60.51062692833202}, {"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\n        return response()->json(['message' => $this->jsonErrorMessages[$statusCode]], $statusCode);\n    }\n\n    return view('admin::' . $path . '.errors.' . $statusCode);\n}", "CodeBleu_score": 53.603223843746875}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t$activities = $this->activityRepository->findWhereIn('id', explode(',', request('ids')));\n    $updated = 0;\n\n    foreach ($activities as $activity) {\n        Event::dispatch('activity.update.before', $activity->id);\n\n        $activity->is_done = request('is_done');\n\n        $activity->save();\n\n        Event::dispatch('activity.update.after', $activity->id);\n\n        $updated++;\n    }\n\n    return response()->json([\n        'message' => trans('admin::app.activities.mass-update-success', ['count' => $updated]),\n    ]);\n}", "CodeBleu_score": 45.52229680806056}, {"code": "<?\npublic function massUpdate(){\n\t$activityIds = explode(',', request('activity_ids'));\n    $updatedCount = 0;\n    foreach ($activityIds as $activityId) {\n        $activity = $this->activityRepository->find($activityId);\n        if ($activity) {\n            Event::dispatch('activity.update.before', $activityId);\n            $this->activityRepository->update(['is_done' => request('is_done')], $activityId);\n            Event::dispatch('activity.update.after', $activity);\n            $updatedCount++;\n        }\n    }\n    if ($updatedCount > 0) {\n        return response()->json([\n            'message' => trans('admin::app.activities.mass-update-success', ['count' => $updatedCount]),\n        ]);\n    } else {\n        return response()->json([\n            'message' => trans('admin::app.activities.mass-update-failure'),\n        ], 400);\n    }\n}", "CodeBleu_score": 57.462782811322775}, {"code": "<?\npublic function massUpdate(){\n\t$ids = explode(',', request('ids'));\n    $updated = 0;\n\n    foreach ($ids as $id) {\n        Event::dispatch('activity.update.before', $id);\n\n        $activity = $this->activityRepository->update(['is_done' => request('is_done')], $id);\n\n        Event::dispatch('activity.update.after', $activity);\n\n        $updated++;\n    }\n\n    if (request()->ajax()) {\n        return response()->json([\n            'message' => trans('admin::app.activities.mass-update-success', ['count' => $updated]),\n        ]);\n    } else {\n        session()->flash('success', trans('admin::app.activities.mass-update-success', ['count' => $updated]));\n\n        return redirect()->route('admin.activities.index');\n    }\n}", "CodeBleu_score": 57.05990758524775}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\tis_array(request('participants.users'))) {\n                foreach (request('participants.users') as $userId) {\n                    $activity->participants()->create([\n                        'user_id' => $userId\n                    ]);\n                }\n            }\n\n            if (is_array(request('participants.persons'))) {\n                foreach (request('participants.persons') as $personId) {\n                    $activity->participants()->create([\n                        'person_id' => $personId,\n                    ]);\n                }\n            }\n        }", "CodeBleu_score": 20.447445281556774}, {"code": "<?\n public function massDestroy(){\n\tis_array(request('participants.users'))) {\n                foreach (request('participants.users') as $userId) {\n                    $activity->participants()->create([\n                        'user_id' => $userId\n                    ]);\n                }\n            }\n\n            if (is_array(request('participants.persons'))) {\n                foreach (request('participants.persons') as $personId) {\n                    $activity->participants()->create([\n                        'person_id' => $personId,\n                    ]);\n                }\n            }\n        }", "CodeBleu_score": 20.447445281556774}, {"code": "<?\n public function massDestroy(){\n\tis_array(request('participants.users'))) {\n                foreach (request('participants.users') as $userId) {\n                    $activity->participants()->create([\n                        'user_id' => $userId\n                    ]);\n                }\n            }\n\n            if (is_array(request('participants.persons'))) {\n                foreach (request('participants.persons') as $personId) {\n                    $activity->participants()->create([\n                        'person_id' => $personId,\n                    ]);\n                }\n            }\n        }", "CodeBleu_score": 20.447445281556774}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t$cards = $this->dashboardHelper->getCards();\n  $request = request()->all();\n  foreach($cards as $key => $card) {\n   if(isset($request[$key]) && $request[$key] == 'true') {\n    $cards[$key]['selected'] = true;\n   } else {\n    $cards[$key]['selected'] = false;\n   }\n  }\n  return response()->json($cards);\n }", "CodeBleu_score": 42.234637771481985}, {"code": "<?\n public function updateCards(){\n\t$cards = $this->dashboardHelper->getCards();\n    $requestData = request()->all();\n\n    foreach ($cards as $key => $card) {\n        if (isset($requestData[$key])) {\n            $cards[$key]['selected'] = $requestData[$key];\n        }\n    }\n\n    return response()->json($cards);\n}", "CodeBleu_score": 45.121931068286926}, {"code": "<?\n public function updateCards(){\n\t$cards = $this->dashboardHelper->getCards();\n\n  foreach ($cards as $key => $card) {\n\n    foreach (request()->all() as $requestKey => $requestValue) {\n\n      if ($requestKey == $key) {\n\n        $cards[$key]['selected'] = $requestValue;\n      }\n    }\n  }\n\n  return response()->json($cards);\n}", "CodeBleu_score": 37.727615048738386}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t$this->validate(request(), [\n        'configuration' => 'required|array',\n    ]);\n\n    Event::dispatch('configuration.save.before');\n\n    foreach (request()->input('configuration') as $key => $value) {\n        if (strpos($key, 'configuration.') === 0) {\n            $key = str_replace('configuration.', '', $key);\n\n            $this->configurationRepository->create(request()->input('configuration')[$key]);\n        }\n    }\n\n    Event::dispatch('configuration.save.after');\n\n    session()->flash('success', trans('admin::app.configuration.saved'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 35.594533381207846}, {"code": "<?\npublic function store(){\n\t$this->validate(request(), [\n        'configuration' => 'required|array',\n    ]);\n\n    $this->dispatch(new \\Webkul\\Core\\Events\\ConfigurationBeforeSave($this->configurationRepository->create(request()->input('configuration'))));\n\n    $this->configurationRepository->save(request()->input('configuration'));\n\n    Event::dispatch('core.configuration.save.after');\n\n    session()->flash('success', trans('admin::app.response.update-success', ['name' => 'Configuration']));\n\n    return redirect()->back();\n}", "CodeBleu_score": 34.17164234699016}, {"code": "<?\npublic function store(){\n\tEvent::dispatch('core.configuration.save.before');\n\n    $this->configurationRepository->create(request()->all());\n\n    Event::dispatch('core.configuration.save.after');\n\n    session()->flash('success', trans('admin::app.configuration.save-message'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 68.65298576842974}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t$filePath = request()->get('path');\n    $fileName = request()->get('filename');\n    $file = Storage::disk('local')->get($filePath . '/' . $fileName);\n    return response()->make($file, 200, [\n        'Content-Type' => 'application/octet-stream',\n        'Content-Disposition' => 'attachment; filename=\"' . $fileName . '\"'\n    ]);\n}", "CodeBleu_score": 35.3873489823831}, {"code": "<?\npublic function download(){\n\t$file = request()->get('file');\n    $fileName = $this->configurationRepository->findOneByField('code', $file)->value;\n    $filePath = storage_path('app/public/'.$fileName);\n    return response()->download($filePath);\n}", "CodeBleu_score": 49.20469448123383}, {"code": "<?\npublic function download(){\n\t$fileName = request()->get('fileName');\n    $filePath = request()->get('filePath');\n\n    $file = Storage::get($filePath);\n\n    return response()->make($file, 200, [\n        'Content-Type' => 'application/octet-stream',\n        'Content-Disposition' => 'attachment; filename=\"' . $fileName . '\"',\n    ]);\n}", "CodeBleu_score": 32.6970359227499}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tList<AdminModelSort> adminModelSorts = new ArrayList<>();\n    for (String model : list) {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setUserId(UserUtil.getUserId());\n        adminModelSort.setModel(model);\n        adminModelSort.setType(1);\n        adminModelSorts.add(adminModelSort);\n    }\n    adminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()).eq(AdminModelSort::getType, 1));\n    adminModelSortService.saveBatch(adminModelSorts);\n    return Result.ok();\n}", "CodeBleu_score": 50.89577138286144}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tList<AdminModelSort> adminModelSortList = new ArrayList<>();\n    for (String model : list) {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setModel(model);\n        adminModelSort.setType(1);\n        adminModelSort.setUserId(UserUtil.getUserId());\n        adminModelSortList.add(adminModelSort);\n    }\n    adminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()).eq(AdminModelSort::getType, 1));\n    adminModelSortService.saveBatch(adminModelSortList);\n    return Result.ok();\n}", "CodeBleu_score": 51.49081320391045}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tList<AdminModelSort> adminModelSortList = new ArrayList<>();\n    list.forEach(model -> {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setModel(model);\n        adminModelSort.setType(1);\n        adminModelSort.setUserId(UserUtil.getUserId());\n        adminModelSortList.add(adminModelSort);\n    });\n    adminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getType, 1).eq(AdminModelSort::getUserId, UserUtil.getUserId()));\n    adminModelSortService.saveBatch(adminModelSortList);\n    return Result.ok();\n}", "CodeBleu_score": 48.209719157893026}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tif (moduleSetting.getModule().equals(AdminModuleEnum.CRM.getModule())) {\n        return Result.error(AdminCodeEnum.MODULE_SETTING_ERROR.getCode(), AdminCodeEnum.MODULE_SETTING_ERROR.getMsg());\n    }\n    AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getId());\n    if (adminConfig == null) {\n        return Result.error(AdminCodeEnum.MODULE_SETTING_ERROR.getCode(), AdminCodeEnum.MODULE_SETTING_ERROR.getMsg());\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.saveOrUpdate(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 60.136354717311406}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.queryAdminConfig();\n    if (moduleSetting.getModuleId().equals(AdminModuleEnum.CRM.getId())) {\n        return Result.error(AdminCodeEnum.ERROR_CRM_MODULE_SETTING);\n    }\n    adminConfig.setModuleSetting(JSON.toJSONString(moduleSetting));\n    adminConfigService.save(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 52.95528143855756}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminUserConfig adminUserConfig = adminUserConfigService.lambdaQuery().eq(AdminUserConfig::getUserId, UserUtil.getUserId()).one();\n    if (adminUserConfig == null) {\n        adminUserConfig = new AdminUserConfig();\n        adminUserConfig.setUserId(UserUtil.getUserId());\n    }\n    AdminConfig adminConfig = adminConfigService.lambdaQuery().eq(AdminConfig::getId, adminUserConfig.getAdminConfigId()).one();\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setId(adminUserConfig.getAdminConfigId());\n    }\n    List<AdminConfig> adminConfigList = new ArrayList<>();\n    adminConfigList.add(adminConfig);\n    if (moduleSetting.getStatus() == 1) {\n        adminConfig.setCrm(1);\n    } else {\n        adminConfig.setCrm(0);\n    }\n    adminConfigService.updateBatchById(adminConfigList, Const.BATCH_SAVE_SIZE);\n    adminUserConfig.setModuleSetting(JSON.toJSONString(moduleSetting));\n    adminUserConfigService.updateById(adminUserConfig);\n    return Result.ok();\n}", "CodeBleu_score": 45.12949285195922}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t,object = \\\"\u4f01\u4e1a\u9996\u9875\u914d\u7f6e\\\",detail = \\\"'\u4f01\u4e1a\u9996\u9875\u914d\u7f6e:'+#adminCompanyBO.companyName\\\")\n    public Result setAdminConfig(@RequestBody AdminCompanyBO adminCompanyBO) {\n        adminConfigService.setAdminConfig(adminCompanyBO);\n        return Result.ok();\n    }\n\n    /**\n     * \u67e5\u8be2\u4f01\u4e1a\u914d\u7f6e\n     *\n     * @return Result\n     * @author zhangzhiwei\n     */\n    @ApiOperation(value = \\\"\u67e5\u8be2\u4f01\u4e1a\u914d\u7f6e\\\")\n    @PostMapping(\\\"/queryAdminConfig\\\")\n    public Result<AdminCompanyBO> queryAdminConfig() {\n        return R.ok(adminConfigService.queryAdminConfig());\n    }\n\n\n    @ApiOperation(value = \\\"\u5934\u90e8\u8bbe\u7f6e\\\")\n    @PostMapping(\\\"/queryHeaderModelSort\\\")\n    public Result<List<String>> queryHeaderModelSort() {\n        List<AdminModelSort> list = adminModelSortService.lambdaQuery().select(AdminModelSort::getModel)\n                .eq(AdminModelSort::getType, 1)\n                .eq(AdminModelSort::getUserId, UserUtil.getUserId())\n                .list();\n        return Result.ok(list.stream().map(AdminModelSort::getModel).collect(Collectors.toList()));\n    }\n\n    @ApiOperation(value = \\\"\u5934\u90e8\u8bbe\u7f6e\\\")\n    @PostMapping(\\\"/setHeaderModelSort\\\")\n    public Result setHeaderModelSort(@RequestBody List<String> list) {\n        List<AdminModelSort> modelSortList = new ArrayList<>();\n        for (int i = 0; i < list.size(); i++) {\n            AdminModelSort adminModelSort = new AdminModelSort();\n            adminModelSort.setType(1).setModel(list.get(i)).setSort(i).setIsHidden(0).setUserId(UserUtil.getUserId());\n            modelSortList.add(adminModelSort);\n        }\n        LambdaQueryWrapper<AdminModelSort> wrapper = new LambdaQueryWrapper<>();\n        wrapper.eq(AdminModelSort::getType, 1).eq(AdminModelSort::getUserId, UserUtil.getUserId());\n        adminModelSortService.remove(wrapper);\n        adminModelSortService.saveBatch(modelSortList, Const.BATCH_SAVE_SIZE);\n        return R.ok();\n    }\n\n    @ApiOperation(value = \\\"\u8bbe\u7f6e\u6d3b\u52a8\u54a8\u8be2\u72b6\u6001\\\")\n    @PostMapping(\\\"/setMarketing\\\")\n    @SysLogHandler(applicationName = \\\"admin\\\",subModel = SubModelType.ADMIN_OTHER_SETTINGS,behavior = BehaviorEnum.UPDATE,object = \\\"\u6d3b\u52a8\u54a8\u8be2\u8bbe\u7f6e\\\",detail = \\\"\u6d3b\u52a8\u54a8\u8be2\u8bbe\u7f6e\\\")\n    public Result setMarketing(@RequestParam(\\\"status\\\") Integer status) {\n       adminConfigService.setMarketing(status);\n       return R.ok();\n    }\n\n\n    @ApiOperation(value = \\\"\u67e5\u8be2\u6d3b\u52a8\u54a8\u8be2\u72b6\u6001\\\")\n    @PostMapping(\\\"/queryMarketing\\\")\n    public Result queryMarketing() {\n        return R.ok(adminConfigService.queryMarketing());\n    }\n\n    /**\n     * \u67e5\u8be2\u4f01\u4e1a\u6a21\u5757\u914d\u7f6e\n     *\n     * @author zhangzhiwei\n     */\n    @ApiOperation(value = \\\"\u67e5\u8be2\u4f01\u4e1a\u6a21\u5757\u914d\u7f6e\\\")\n    @PostMapping(\\\"/queryModuleSetting\\\")\n    public Result<List<ModuleSettingVO>> queryModuleSetting() {\n        return R.ok(adminConfigService.queryModuleSetting());\n    }\n\n    /**\n     * \u8bbe\u7f6e\u4f01\u4e1a\u6a21\u5757\n     *\n     * @param moduleSetting data\n     */\n    @ApiOperation(value = \\\"\u8bbe\u7f6e\u4f01\u4e1a\u6a21\u5757\\\")\n    @PostMapping(\\\"/setModuleSetting\\\")\n    @SysLogHandler(subModel = SubModelType.ADMIN_OTHER_SETTINGS,behavior = BehaviorEnum.UPDATE)\n    public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting) {\n        AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n        if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n            return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n        }\n        adminConfig.setStatus(moduleSetting.getStatus());\n        adminConfigService.setModuleSetting(adminConfig);\n        return Result.ok();\n    }\n\n    @ApiOperation(value = \\\"\u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\\\")\n    @PostMapping(\\\"/setLogWelcomeSpeech\\\")\n    @SysLogHandler(subModel = SubModelType.ADMIN_OTHER_SETTINGS,behavior = BehaviorEnum.UPDATE,object = \\\"\u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\\\",detail = \\\"\u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\\\")\n    public Result setLogWelcomeSpeech(@Valid @RequestBody List<String> stringList) {\n        adminConfigService.setLogWelcomeSpeech(stringList);\n        return Result.ok();\n    }\n\n    /**\n     * \u83b7\u53d6\u65e5\u5fd7\u6b22\u8fce\u8bed\u5217\u8868\n     */\n    @ApiOperation(value = \\\"\u83b7\u53d6\u65e5\u5fd7\u6b22\u8fce\u8bed\\\")\n    @PostMapping(\\\"/getLogWelcomeSpeechList\\\")\n    public Result<List<LogWelcomeSpeechBO>> getLogWelcomeSpeechList() {\n        List<LogWelcomeSpeechBO> adminConfigs = adminConfigService.getLogWelcomeSpeechList();\n        return R.ok(adminConfigs);\n    }\n\n    /**\n     * \u5220\u9664\u914d\u7f6e\u6570\u636e\n     */\n    @ApiOperation(value = \\\"\u5220\u9664\u914d\u7f6e\u6570\u636e\\\")\n    @PostMapping(\\\"/deleteConfigById\\\")\n    public Result deleteConfigById(@RequestBody @ApiParam(name = \\\"settingId\\\", value = \\\"\u4e3b\u952eID\\\", required = true) Integer settingId) {\n        if (settingId == null) {\n            return R.error(AdminCodeEnum.ADMIN_DATA_EXIST_ERROR);\n        }\n        adminConfigService.removeById(settingId);\n        return R.ok();\n    }\n\n    /**\n     * \u67e5\u8be2\u547c\u53eb\u4e2d\u5fc3\u8bbe\u7f6e\n     */\n    @ApiOperation(value = \\\"\u67e5\u8be2\u624b\u673a\u7aef\u6a21\u5757\u8bbe\u7f6e\\\")\n    @PostMapping(\\\"/queryCallModuleSetting\\\")\n    public Result<ModuleSettingVO> queryCallModuleSetting() {\n        ModuleSettingVO moduleSettingVO = adminConfigService.queryCallModuleSetting();\n        return R.ok(moduleSettingVO);\n    }\n\n    @ApiOperation(value = \\\"\u67e5\u8be2\u81ea\u5b9a\u4e49\u914d\u7f6e\\\")\n    @PostMapping(\\\"/queryCustomSetting/{customKey}\\\")\n    public Result<JSONArray> queryCustomSetting(@PathVariable(\\\"customKey\\\") String customKey) {\n        AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(customKey);\n        if (userConfig == null) {\n            return Result.ok(new JSONArray());\n        }\n        return Result.ok(JSON.parseArray(userConfig.getValue()));\n    }\n\n    /**\n     * \u4fee\u6539\u624b\u673a\u7aef\u6a21\u5757\u8bbe\u7f6e\n     */\n\n    @ApiOperation(value = \\\"\u4fee\u6539\u81ea\u5b9a\u4e49\u914d\u7f6e\\\")\n    @PostMapping(\\\"/setCustomSetting/{customKey}\\\")\n\n\n", "CodeBleu_score": 15.9488599993167}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t,object = \\\"\u4f01\u4e1a\u9996\u9875\u914d\u7f6e\\\",detail = \\\"'\u4f01\u4e1a\u9996\u9875\u914d\u7f6e:'+#adminCompanyBO.companyName\\\")\n    public Result setAdminConfig(@RequestBody AdminCompanyBO adminCompanyBO) {\n        adminConfigService.setAdminConfig(adminCompanyBO);\n        return Result.ok();\n    }\n\n    /**\n     * \u67e5\u8be2\u4f01\u4e1a\u914d\u7f6e\n     *\n     * @return Result\n     * @author zhangzhiwei\n     */\n    @ApiOperation(value = \\\"\u67e5\u8be2\u4f01\u4e1a\u914d\u7f6e\\\")\n    @PostMapping(\\\"/queryAdminConfig\\\")\n    public Result<AdminCompanyBO> queryAdminConfig() {\n        return R.ok(adminConfigService.queryAdminConfig());\n    }\n\n\n    @ApiOperation(value = \\\"\u5934\u90e8\u8bbe\u7f6e\\\")\n    @PostMapping(\\\"/queryHeaderModelSort\\\")\n    public Result<List<String>> queryHeaderModelSort() {\n        List<AdminModelSort> list = adminModelSortService.lambdaQuery().select(AdminModelSort::getModel)\n                .eq(AdminModelSort::getType, 1)\n                .eq(AdminModelSort::getUserId, UserUtil.getUserId())\n                .list();\n        return Result.ok(list.stream().map(AdminModelSort::getModel).collect(Collectors.toList()));\n    }\n\n    @ApiOperation(value = \\\"\u5934\u90e8\u8bbe\u7f6e\\\")\n    @PostMapping(\\\"/setHeaderModelSort\\\")\n    public Result setHeaderModelSort(@RequestBody List<String> list) {\n        List<AdminModelSort> modelSortList = new ArrayList<>();\n        for (int i = 0; i < list.size(); i++) {\n            AdminModelSort adminModelSort = new AdminModelSort();\n            adminModelSort.setType(1).setModel(list.get(i)).setSort(i).setIsHidden(0).setUserId(UserUtil.getUserId());\n            modelSortList.add(adminModelSort);\n        }\n        LambdaQueryWrapper<AdminModelSort> wrapper = new LambdaQueryWrapper<>();\n        wrapper.eq(AdminModelSort::getType, 1).eq(AdminModelSort::getUserId, UserUtil.getUserId());\n        adminModelSortService.remove(wrapper);\n        adminModelSortService.saveBatch(modelSortList, Const.BATCH_SAVE_SIZE);\n        return R.ok();\n    }\n\n    @ApiOperation(value = \\\"\u8bbe\u7f6e\u6d3b\u52a8\u54a8\u8be2\u72b6\u6001\\\")\n    @PostMapping(\\\"/setMarketing\\\")\n    @SysLogHandler(applicationName = \\\"admin\\\",subModel = SubModelType.ADMIN_OTHER_SETTINGS,behavior = BehaviorEnum.UPDATE,object = \\\"\u6d3b\u52a8\u54a8\u8be2\u8bbe\u7f6e\\\",detail = \\\"\u6d3b\u52a8\u54a8\u8be2\u8bbe\u7f6e\\\")\n    public Result setMarketing(@RequestParam(\\\"status\\\") Integer status) {\n       adminConfigService.setMarketing(status);\n       return R.ok();\n    }\n\n\n    @ApiOperation(value = \\\"\u67e5\u8be2\u6d3b\u52a8\u54a8\u8be2\u72b6\u6001\\\")\n    @PostMapping(\\\"/queryMarketing\\\")\n    public Result queryMarketing() {\n        return R.ok(adminConfigService.queryMarketing());\n    }\n\n    /**\n     * \u67e5\u8be2\u4f01\u4e1a\u6a21\u5757\u914d\u7f6e\n     *\n     * @author zhangzhiwei\n     */\n    @ApiOperation(value = \\\"\u67e5\u8be2\u4f01\u4e1a\u6a21\u5757\u914d\u7f6e\\\")\n    @PostMapping(\\\"/queryModuleSetting\\\")\n    public Result<List<ModuleSettingVO>> queryModuleSetting() {\n        return R.ok(adminConfigService.queryModuleSetting());\n    }\n\n    /**\n     * \u8bbe\u7f6e\u4f01\u4e1a\u6a21\u5757\n     *\n     * @param moduleSetting data\n     */\n    @ApiOperation(value = \\\"\u8bbe\u7f6e\u4f01\u4e1a\u6a21\u5757\\\")\n    @PostMapping(\\\"/setModuleSetting\\\")\n    @SysLogHandler(subModel = SubModelType.ADMIN_OTHER_SETTINGS,behavior = BehaviorEnum.UPDATE)\n    public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting) {\n        AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n        if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n            return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n        }\n        adminConfig.setStatus(moduleSetting.getStatus());\n        adminConfigService.setModuleSetting(adminConfig);\n        return Result.ok();\n    }\n\n    @ApiOperation(value = \\\"\u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\\\")\n    @PostMapping(\\\"/setLogWelcomeSpeech\\\")\n    @SysLogHandler(subModel = SubModelType.ADMIN_OTHER_SETTINGS,behavior = BehaviorEnum.UPDATE,object = \\\"\u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\\\",detail = \\\"\u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\\\")\n    public Result setLogWelcomeSpeech(@Valid @RequestBody List<String> stringList) {\n        adminConfigService.setLogWelcomeSpeech(stringList);\n        return Result.ok();\n    }\n\n    /**\n     * \u83b7\u53d6\u65e5\u5fd7\u6b22\u8fce\u8bed\u5217\u8868\n     */\n    @ApiOperation(value = \\\"\u83b7\u53d6\u65e5\u5fd7\u6b22\u8fce\u8bed\\\")\n    @PostMapping(\\\"/getLogWelcomeSpeechList\\\")\n    public Result<List<LogWelcomeSpeechBO>> getLogWelcomeSpeechList() {\n        List<LogWelcomeSpeechBO> adminConfigs = adminConfigService.getLogWelcomeSpeechList();\n        return R.ok(adminConfigs);\n    }\n\n    /**\n     * \u5220\u9664\u914d\u7f6e\u6570\u636e\n     */\n    @ApiOperation(value = \\\"\u5220\u9664\u914d\u7f6e\u6570\u636e\\\")\n    @PostMapping(\\\"/deleteConfigById\\\")\n    public Result deleteConfigById(@RequestBody @ApiParam(name = \\\"settingId\\\", value = \\\"\u4e3b\u952eID\\\", required = true) Integer settingId) {\n        if (settingId == null) {\n            return R.error(AdminCodeEnum.ADMIN_DATA_EXIST_ERROR);\n        }\n        adminConfigService.removeById(settingId);\n        return R.ok();\n    }\n\n    /**\n     * \u67e5\u8be2\u547c\u53eb\u4e2d\u5fc3\u8bbe\u7f6e\n     */\n    @ApiOperation(value = \\\"\u67e5\u8be2\u624b\u673a\u7aef\u6a21\u5757\u8bbe\u7f6e\\\")\n    @PostMapping(\\\"/queryCallModuleSetting\\\")\n    public Result<ModuleSettingVO> queryCallModuleSetting() {\n        ModuleSettingVO moduleSettingVO = adminConfigService.queryCallModuleSetting();\n        return R.ok(moduleSettingVO);\n    }\n\n    @ApiOperation(value = \\\"\u67e5\u8be2\u81ea\u5b9a\u4e49\u914d\u7f6e\\\")\n    @PostMapping(\\\"/queryCustomSetting/{customKey}\\\")\n    public Result<JSONArray> queryCustomSetting(@PathVariable(\\\"customKey\\\") String customKey) {\n        AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(customKey);\n        if (userConfig == null) {\n            return Result.ok(new JSONArray());\n        }\n        return Result.ok(JSON.parseArray(userConfig.getValue()));\n    }\n\n    /**\n     * \u4fee\u6539\u624b\u673a\u7aef\u6a21\u5757\u8bbe\u7f6e\n     */\n\n    @ApiOperation(value = \\\"\u4fee\u6539\u81ea\u5b9a\u4e49\u914d\u7f6e\\\")\n    @PostMapping(\\\"/setCustomSetting/{customKey}\\\")\n\n\n", "CodeBleu_score": 15.9488599993167}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t,object = \\\"\u4f01\u4e1a\u9996\u9875\u914d\u7f6e\\\",detail = \\\"'\u4f01\u4e1a\u9996\u9875\u914d\u7f6e:'+#adminCompanyBO.companyName\\\")\n    public Result setAdminConfig(@RequestBody AdminCompanyBO adminCompanyBO) {\n        adminConfigService.setAdminConfig(adminCompanyBO);\n        return Result.ok();\n    }\n\n    /**\n     * \u67e5\u8be2\u4f01\u4e1a\u914d\u7f6e\n     *\n     * @return Result\n     * @author zhangzhiwei\n     */\n    @ApiOperation(value = \\\"\u67e5\u8be2\u4f01\u4e1a\u914d\u7f6e\\\")\n    @PostMapping(\\\"/queryAdminConfig\\\")\n    public Result<AdminCompanyBO> queryAdminConfig() {\n        return R.ok(adminConfigService.queryAdminConfig());\n    }\n\n\n    @ApiOperation(value = \\\"\u5934\u90e8\u8bbe\u7f6e\\\")\n    @PostMapping(\\\"/queryHeaderModelSort\\\")\n    public Result<List<String>> queryHeaderModelSort() {\n        List<AdminModelSort> list = adminModelSortService.lambdaQuery().select(AdminModelSort::getModel)\n                .eq(AdminModelSort::getType, 1)\n                .eq(AdminModelSort::getUserId, UserUtil.getUserId())\n                .list();\n        return Result.ok(list.stream().map(AdminModelSort::getModel).collect(Collectors.toList()));\n    }\n\n    @ApiOperation(value = \\\"\u5934\u90e8\u8bbe\u7f6e\\\")\n    @PostMapping(\\\"/setHeaderModelSort\\\")\n    public Result setHeaderModelSort(@RequestBody List<String> list) {\n        List<AdminModelSort> modelSortList = new ArrayList<>();\n        for (int i = 0; i < list.size(); i++) {\n            AdminModelSort adminModelSort = new AdminModelSort();\n            adminModelSort.setType(1).setModel(list.get(i)).setSort(i).setIsHidden(0).setUserId(UserUtil.getUserId());\n            modelSortList.add(adminModelSort);\n        }\n        LambdaQueryWrapper<AdminModelSort> wrapper = new LambdaQueryWrapper<>();\n        wrapper.eq(AdminModelSort::getType, 1).eq(AdminModelSort::getUserId, UserUtil.getUserId());\n        adminModelSortService.remove(wrapper);\n        adminModelSortService.saveBatch(modelSortList, Const.BATCH_SAVE_SIZE);\n        return R.ok();\n    }\n\n    @ApiOperation(value = \\\"\u8bbe\u7f6e\u6d3b\u52a8\u54a8\u8be2\u72b6\u6001\\\")\n    @PostMapping(\\\"/setMarketing\\\")\n    @SysLogHandler(applicationName = \\\"admin\\\",subModel = SubModelType.ADMIN_OTHER_SETTINGS,behavior = BehaviorEnum.UPDATE,object = \\\"\u6d3b\u52a8\u54a8\u8be2\u8bbe\u7f6e\\\",detail = \\\"\u6d3b\u52a8\u54a8\u8be2\u8bbe\u7f6e\\\")\n    public Result setMarketing(@RequestParam(\\\"status\\\") Integer status) {\n       adminConfigService.setMarketing(status);\n       return R.ok();\n    }\n\n\n    @ApiOperation(value = \\\"\u67e5\u8be2\u6d3b\u52a8\u54a8\u8be2\u72b6\u6001\\\")\n    @PostMapping(\\\"/queryMarketing\\\")\n    public Result queryMarketing() {\n        return R.ok(adminConfigService.queryMarketing());\n    }\n\n    /**\n     * \u67e5\u8be2\u4f01\u4e1a\u6a21\u5757\u914d\u7f6e\n     *\n     * @author zhangzhiwei\n     */\n    @ApiOperation(value = \\\"\u67e5\u8be2\u4f01\u4e1a\u6a21\u5757\u914d\u7f6e\\\")\n    @PostMapping(\\\"/queryModuleSetting\\\")\n    public Result<List<ModuleSettingVO>> queryModuleSetting() {\n        return R.ok(adminConfigService.queryModuleSetting());\n    }\n\n    /**\n     * \u8bbe\u7f6e\u4f01\u4e1a\u6a21\u5757\n     *\n     * @param moduleSetting data\n     */\n    @ApiOperation(value = \\\"\u8bbe\u7f6e\u4f01\u4e1a\u6a21\u5757\\\")\n    @PostMapping(\\\"/setModuleSetting\\\")\n    @SysLogHandler(subModel = SubModelType.ADMIN_OTHER_SETTINGS,behavior = BehaviorEnum.UPDATE)\n    public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting) {\n        AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n        if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n            return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n        }\n        adminConfig.setStatus(moduleSetting.getStatus());\n        adminConfigService.setModuleSetting(adminConfig);\n        return Result.ok();\n    }\n\n    @ApiOperation(value = \\\"\u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\\\")\n    @PostMapping(\\\"/setLogWelcomeSpeech\\\")\n    @SysLogHandler(subModel = SubModelType.ADMIN_OTHER_SETTINGS,behavior = BehaviorEnum.UPDATE,object = \\\"\u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\\\",detail = \\\"\u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\\\")\n    public Result setLogWelcomeSpeech(@Valid @RequestBody List<String> stringList) {\n        adminConfigService.setLogWelcomeSpeech(stringList);\n        return Result.ok();\n    }\n\n    /**\n     * \u83b7\u53d6\u65e5\u5fd7\u6b22\u8fce\u8bed\u5217\u8868\n     */\n    @ApiOperation(value = \\\"\u83b7\u53d6\u65e5\u5fd7\u6b22\u8fce\u8bed\\\")\n    @PostMapping(\\\"/getLogWelcomeSpeechList\\\")\n    public Result<List<LogWelcomeSpeechBO>> getLogWelcomeSpeechList() {\n        List<LogWelcomeSpeechBO> adminConfigs = adminConfigService.getLogWelcomeSpeechList();\n        return R.ok(adminConfigs);\n    }\n\n    /**\n     * \u5220\u9664\u914d\u7f6e\u6570\u636e\n     */\n    @ApiOperation(value = \\\"\u5220\u9664\u914d\u7f6e\u6570\u636e\\\")\n    @PostMapping(\\\"/deleteConfigById\\\")\n    public Result deleteConfigById(@RequestBody @ApiParam(name = \\\"settingId\\\", value = \\\"\u4e3b\u952eID\\\", required = true) Integer settingId) {\n        if (settingId == null) {\n            return R.error(AdminCodeEnum.ADMIN_DATA_EXIST_ERROR);\n        }\n        adminConfigService.removeById(settingId);\n        return R.ok();\n    }\n\n    /**\n     * \u67e5\u8be2\u547c\u53eb\u4e2d\u5fc3\u8bbe\u7f6e\n     */\n    @ApiOperation(value = \\\"\u67e5\u8be2\u624b\u673a\u7aef\u6a21\u5757\u8bbe\u7f6e\\\")\n    @PostMapping(\\\"/queryCallModuleSetting\\\")\n    public Result<ModuleSettingVO> queryCallModuleSetting() {\n        ModuleSettingVO moduleSettingVO = adminConfigService.queryCallModuleSetting();\n        return R.ok(moduleSettingVO);\n    }\n\n    @ApiOperation(value = \\\"\u67e5\u8be2\u81ea\u5b9a\u4e49\u914d\u7f6e\\\")\n    @PostMapping(\\\"/queryCustomSetting/{customKey}\\\")\n    public Result<JSONArray> queryCustomSetting(@PathVariable(\\\"customKey\\\") String customKey) {\n        AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(customKey);\n        if (userConfig == null) {\n            return Result.ok(new JSONArray());\n        }\n        return Result.ok(JSON.parseArray(userConfig.getValue()));\n    }\n\n    /**\n     * \u4fee\u6539\u624b\u673a\u7aef\u6a21\u5757\u8bbe\u7f6e\n     */\n\n    @ApiOperation(value = \\\"\u4fee\u6539\u81ea\u5b9a\u4e49\u914d\u7f6e\\\")\n    @PostMapping(\\\"/setCustomSetting/{customKey}\\\")\n\n\n", "CodeBleu_score": 15.9488599993167}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\n    }", "CodeBleu_score": 8.118169045421043}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\n    }", "CodeBleu_score": 8.118169045421043}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\n    }", "CodeBleu_score": 8.118169045421043}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t\n    public Result updateImg(@RequestParam(\\\"file\\\") MultipartFile file) throws IOException {\n        UploadEntity img = adminFileService.upload(file, null, \\\"img\\\", \\\"0\\\");\n        AdminUser byId = adminUserService.getById(UserUtil.getUserId());\n        byId.setImg(img.getUrl());\n        adminUserService.updateById(byId);\n        return R.ok();\n    }\n\n    @PostMapping(\\\"/updatePassword\\\")\n    @ApiOperation(\\\"\u4fee\u6539\u767b\u5f55\u5bc6\u7801\\\")\n    @SysLogHandler(behavior = BehaviorEnum.UPDATE,object = \\\"\u4fee\u6539\u767b\u5f55\u5bc6\u7801\\\",detail = \\\"\u4fee\u6539\u767b\u5f55\u5bc6\u7801\\\")\n    public Result updatePassword(@RequestParam(\\\"oldPwd\\\") String oldPass, @RequestParam(\\\"newPwd\\\") String newPass) {\n        AdminUser adminUser = adminUserService.getById(UserUtil.getUserId());\n        if (!UserUtil.verify(adminUser.getUsername() + oldPass, adminUser.getSalt(), adminUser.getPassword())) {\n            return R.error(AdminCodeEnum.ADMIN_PASSWORD_ERROR);\n        }\n        adminUser.setPassword(newPass);\n        return updateUser(adminUser);\n    }\n\n    @PostMapping(\\\"/updateUser\\\")\n    @ApiOperation(\\\"\u4fee\u6539\u7528\u6237\u4fe1\u606f\\\")\n    public Result updateUser(@RequestBody AdminUser adminUser) {\n        adminUserService.updateUser(adminUser);\n        return R.ok();\n    }\n\n    @Autowired\n    private IAdminDeptService deptService;\n\n    @PostMapping(\\\"/queryLoginUser\\\")\n    @ApiOperation(\\\"\u67e5\u8be2\u5f53\u524d\u767b\u5f55\u7528\u6237\\\")\n    public Result<AdminUserVO> queryLoginUser(HttpServletRequest request, HttpServletResponse response) {\n        String name = \\\"readNotice\\\";\n        AdminUser user = adminUserService.getById(UserUtil.getUserId());\n        if (user == null) {\n            throw new NoLoginException();\n        }\n        AdminSuperUserVo adminUser = BeanUtil.copyProperties(user, AdminSuperUserVo.class);\n        adminUser.setIsAdmin(UserUtil.isAdmin());\n        AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(name);\n        adminUser.setIsReadNotice(userConfig != null ? userConfig.getStatus() : 0);\n        adminUser.setPassword(null);\n        String deptName = deptService.getNameByDeptId(adminUser.getDeptId());\n        adminUser.setDeptName(deptName);\n        adminUser.setParentName(UserCacheUtil.getUserName(adminUser.getParentId()));\n        AdminConfig config = ApplicationContextHolder.getBean(IAdminConfigService.class).queryConfigByName(\\\"email\\\");\n        if (config != null && config.getStatus() == 1) {\n            Integer data = ApplicationContextHolder.getBean(EmailService.class).getEmailId(adminUser.getUserId()).getData();\n            adminUser.setEmailId(data);\n        }\n        AdminUserConfig userConfigByName = adminUserConfigService.queryUserConfigByName(\\\"InitUserConfig\\\");\n        if(userConfigByName != null){\n            adminUser.setServerUserInfo(JSON.parseObject(userConfigByName.getValue()));\n        }\n        return R.ok(adminUser);\n    }\n\n    @RequestMapping(\\\"/queryUserRoleIds\\\")\n    @ApiExplain(\\\"\u67e5\u8be2\u7528\u6237\u89d2\u8272\u5217\u8868\\\")\n    public Result<List<Integer>> queryUserRoleIds(@RequestParam(\\\"userId\\\") @NotNull Long userId) {\n        return R.ok(adminUserService.queryUserRoleIds(userId));\n    }\n\n    @RequestMapping(\\\"/queryListName\\\")\n    @ApiExplain(\\\"\u67e5\u8be2\u901a\u8baf\u5f55\\\")\n    public Result queryListName(@RequestBody UserBookBO userBookBO) {\n        return R.ok(adminUserService.queryListName(userBookBO));\n    }\n\n    @RequestMapping(\\\"/attention\\\")\n    @ApiExplain(\\\"\u5207\u6362\u5173\u6ce8\u72b6\u6001\\\")\n    public Result attention(@RequestParam(\\\"userId\\\") Long userId) {\n        adminUserService.attention(userId);\n        return R.ok();\n    }\n\n    @RequestMapping(\\\"/queryChildUserId\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u4e0b\u7684\u5b50\u7528\u6237\\\")\n    public Result<List<Long>> queryChildUserId(@NotNull Long userId) {\n        List<Long> longList = adminUserService.queryChildUserId(userId);\n        return R.ok(longList);\n    }\n\n    @RequestMapping(\\\"/queryUserInfo\\\")\n    @ApiOperation(\\\"\u67e5\u8be2\u7528\u6237\u4fe1\u606f\\\")\n    public Result<AdminUser> queryUserInfo(@RequestParam(\\\"userId\\\") Long userId) {\n        AdminUser byId = adminUserService.getById(userId);\n        String nameByDeptId = ApplicationContextHolder.getBean(IAdminDeptService.class).getNameByDeptId(byId.getDeptId());\n        byId.setDeptName(nameByDeptId);\n        byId.setSalt(null);\n        byId.setPassword(null);\n        return R.ok(byId);\n    }\n\n    @RequestMapping(\\\"/queryInfoByUserId\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u83b7\u53d6\u7528\u6237\\\")\n    public Result<UserInfo> queryInfoByUserId(@NotNull Long userId) {\n        AdminUser byId = adminUserService.getById(userId);\n        UserInfo userInfo = null;\n        if (byId != null) {\n            userInfo = BeanUtil.copyProperties(byId, UserInfo.class);\n            if(byId.getDeptId() != null) {\n                String nameByDeptId = UserCacheUtil.getDeptName(byId.getDeptId());\n                userInfo.setDeptName(nameByDeptId);\n            }\n            userInfo.setRoles(adminUserService.queryUserRoleIds(userInfo.getUserId()));\n        }\n        return R.ok(userInfo);\n    }\n\n    @PostMapping(\\\"/queryNormalUserByIds\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u83b7\u53d6\u6b63\u5e38\u7528\u6237\\\")\n    public Result<List<Long>> queryNormalUserByIds(@RequestBody List<Long> ids) {\n        return R.ok(adminUserService.queryNormalUserByIds(ids));\n    }\n\n\n    @PostMapping(\\\"/queryUserById\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u83b7\u53d6\u7528\u6237\\\")\n    public Result<SimpleUser> queryUserById(@RequestParam(\\\"userId\\\") Long userId) {\n        AdminUser adminUser = adminUserService.getById(userId);\n        if(adminUser != null) {\n            adminUser.setDeptName(deptService.getNameByDeptId(adminUser.getDeptId()));\n        }\n        return R.ok(BeanUtil.copyProperties(adminUser, SimpleUser.class));\n    }\n\n    @PostMapping(\\\"/queryUserByDeptIds\\\")\n    @ApiExplain(\\\"\u6839\u636e\u90e8\u95e8ID\u83b7\u53d6\u7528\u6237ids\\\")\n    public Result<List<Long>> queryUserByDeptIds(@RequestBody List<Integer> ids) {\n        List<Long> userIds = adminUserService.queryUserByDeptIds(ids);\n        return R.ok(userIds);\n    }\n\n    @PostMapping(\\\"/readNotice\\\")\n    @ApiOperation(\\\"\u8bbe\u7f6e\u66f4\u65b0\u65e5\u5fd7\u4e3a\u5df2\u8bfb\\\")\n\n\n", "CodeBleu_score": 5.349562264262071}, {"code": " public Result readNotice() {\n\t\n    public Result updateImg(@RequestParam(\\\"file\\\") MultipartFile file) throws IOException {\n        UploadEntity img = adminFileService.upload(file, null, \\\"img\\\", \\\"0\\\");\n        AdminUser byId = adminUserService.getById(UserUtil.getUserId());\n        byId.setImg(img.getUrl());\n        adminUserService.updateById(byId);\n        return R.ok();\n    }\n\n    @PostMapping(\\\"/updatePassword\\\")\n    @ApiOperation(\\\"\u4fee\u6539\u767b\u5f55\u5bc6\u7801\\\")\n    @SysLogHandler(behavior = BehaviorEnum.UPDATE,object = \\\"\u4fee\u6539\u767b\u5f55\u5bc6\u7801\\\",detail = \\\"\u4fee\u6539\u767b\u5f55\u5bc6\u7801\\\")\n    public Result updatePassword(@RequestParam(\\\"oldPwd\\\") String oldPass, @RequestParam(\\\"newPwd\\\") String newPass) {\n        AdminUser adminUser = adminUserService.getById(UserUtil.getUserId());\n        if (!UserUtil.verify(adminUser.getUsername() + oldPass, adminUser.getSalt(), adminUser.getPassword())) {\n            return R.error(AdminCodeEnum.ADMIN_PASSWORD_ERROR);\n        }\n        adminUser.setPassword(newPass);\n        return updateUser(adminUser);\n    }\n\n    @PostMapping(\\\"/updateUser\\\")\n    @ApiOperation(\\\"\u4fee\u6539\u7528\u6237\u4fe1\u606f\\\")\n    public Result updateUser(@RequestBody AdminUser adminUser) {\n        adminUserService.updateUser(adminUser);\n        return R.ok();\n    }\n\n    @Autowired\n    private IAdminDeptService deptService;\n\n    @PostMapping(\\\"/queryLoginUser\\\")\n    @ApiOperation(\\\"\u67e5\u8be2\u5f53\u524d\u767b\u5f55\u7528\u6237\\\")\n    public Result<AdminUserVO> queryLoginUser(HttpServletRequest request, HttpServletResponse response) {\n        String name = \\\"readNotice\\\";\n        AdminUser user = adminUserService.getById(UserUtil.getUserId());\n        if (user == null) {\n            throw new NoLoginException();\n        }\n        AdminSuperUserVo adminUser = BeanUtil.copyProperties(user, AdminSuperUserVo.class);\n        adminUser.setIsAdmin(UserUtil.isAdmin());\n        AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(name);\n        adminUser.setIsReadNotice(userConfig != null ? userConfig.getStatus() : 0);\n        adminUser.setPassword(null);\n        String deptName = deptService.getNameByDeptId(adminUser.getDeptId());\n        adminUser.setDeptName(deptName);\n        adminUser.setParentName(UserCacheUtil.getUserName(adminUser.getParentId()));\n        AdminConfig config = ApplicationContextHolder.getBean(IAdminConfigService.class).queryConfigByName(\\\"email\\\");\n        if (config != null && config.getStatus() == 1) {\n            Integer data = ApplicationContextHolder.getBean(EmailService.class).getEmailId(adminUser.getUserId()).getData();\n            adminUser.setEmailId(data);\n        }\n        AdminUserConfig userConfigByName = adminUserConfigService.queryUserConfigByName(\\\"InitUserConfig\\\");\n        if(userConfigByName != null){\n            adminUser.setServerUserInfo(JSON.parseObject(userConfigByName.getValue()));\n        }\n        return R.ok(adminUser);\n    }\n\n    @RequestMapping(\\\"/queryUserRoleIds\\\")\n    @ApiExplain(\\\"\u67e5\u8be2\u7528\u6237\u89d2\u8272\u5217\u8868\\\")\n    public Result<List<Integer>> queryUserRoleIds(@RequestParam(\\\"userId\\\") @NotNull Long userId) {\n        return R.ok(adminUserService.queryUserRoleIds(userId));\n    }\n\n    @RequestMapping(\\\"/queryListName\\\")\n    @ApiExplain(\\\"\u67e5\u8be2\u901a\u8baf\u5f55\\\")\n    public Result queryListName(@RequestBody UserBookBO userBookBO) {\n        return R.ok(adminUserService.queryListName(userBookBO));\n    }\n\n    @RequestMapping(\\\"/attention\\\")\n    @ApiExplain(\\\"\u5207\u6362\u5173\u6ce8\u72b6\u6001\\\")\n    public Result attention(@RequestParam(\\\"userId\\\") Long userId) {\n        adminUserService.attention(userId);\n        return R.ok();\n    }\n\n    @RequestMapping(\\\"/queryChildUserId\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u4e0b\u7684\u5b50\u7528\u6237\\\")\n    public Result<List<Long>> queryChildUserId(@NotNull Long userId) {\n        List<Long> longList = adminUserService.queryChildUserId(userId);\n        return R.ok(longList);\n    }\n\n    @RequestMapping(\\\"/queryUserInfo\\\")\n    @ApiOperation(\\\"\u67e5\u8be2\u7528\u6237\u4fe1\u606f\\\")\n    public Result<AdminUser> queryUserInfo(@RequestParam(\\\"userId\\\") Long userId) {\n        AdminUser byId = adminUserService.getById(userId);\n        String nameByDeptId = ApplicationContextHolder.getBean(IAdminDeptService.class).getNameByDeptId(byId.getDeptId());\n        byId.setDeptName(nameByDeptId);\n        byId.setSalt(null);\n        byId.setPassword(null);\n        return R.ok(byId);\n    }\n\n    @RequestMapping(\\\"/queryInfoByUserId\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u83b7\u53d6\u7528\u6237\\\")\n    public Result<UserInfo> queryInfoByUserId(@NotNull Long userId) {\n        AdminUser byId = adminUserService.getById(userId);\n        UserInfo userInfo = null;\n        if (byId != null) {\n            userInfo = BeanUtil.copyProperties(byId, UserInfo.class);\n            if(byId.getDeptId() != null) {\n                String nameByDeptId = UserCacheUtil.getDeptName(byId.getDeptId());\n                userInfo.setDeptName(nameByDeptId);\n            }\n            userInfo.setRoles(adminUserService.queryUserRoleIds(userInfo.getUserId()));\n        }\n        return R.ok(userInfo);\n    }\n\n    @PostMapping(\\\"/queryNormalUserByIds\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u83b7\u53d6\u6b63\u5e38\u7528\u6237\\\")\n    public Result<List<Long>> queryNormalUserByIds(@RequestBody List<Long> ids) {\n        return R.ok(adminUserService.queryNormalUserByIds(ids));\n    }\n\n\n    @PostMapping(\\\"/queryUserById\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u83b7\u53d6\u7528\u6237\\\")\n    public Result<SimpleUser> queryUserById(@RequestParam(\\\"userId\\\") Long userId) {\n        AdminUser adminUser = adminUserService.getById(userId);\n        if(adminUser != null) {\n            adminUser.setDeptName(deptService.getNameByDeptId(adminUser.getDeptId()));\n        }\n        return R.ok(BeanUtil.copyProperties(adminUser, SimpleUser.class));\n    }\n\n    @PostMapping(\\\"/queryUserByDeptIds\\\")\n    @ApiExplain(\\\"\u6839\u636e\u90e8\u95e8ID\u83b7\u53d6\u7528\u6237ids\\\")\n    public Result<List<Long>> queryUserByDeptIds(@RequestBody List<Integer> ids) {\n        List<Long> userIds = adminUserService.queryUserByDeptIds(ids);\n        return R.ok(userIds);\n    }\n\n    @PostMapping(\\\"/readNotice\\\")\n    @ApiOperation(\\\"\u8bbe\u7f6e\u66f4\u65b0\u65e5\u5fd7\u4e3a\u5df2\u8bfb\\\")\n\n\n", "CodeBleu_score": 5.349562264262071}, {"code": " public Result readNotice() {\n\t\n    public Result updateImg(@RequestParam(\\\"file\\\") MultipartFile file) throws IOException {\n        UploadEntity img = adminFileService.upload(file, null, \\\"img\\\", \\\"0\\\");\n        AdminUser byId = adminUserService.getById(UserUtil.getUserId());\n        byId.setImg(img.getUrl());\n        adminUserService.updateById(byId);\n        return R.ok();\n    }\n\n    @PostMapping(\\\"/updatePassword\\\")\n    @ApiOperation(\\\"\u4fee\u6539\u767b\u5f55\u5bc6\u7801\\\")\n    @SysLogHandler(behavior = BehaviorEnum.UPDATE,object = \\\"\u4fee\u6539\u767b\u5f55\u5bc6\u7801\\\",detail = \\\"\u4fee\u6539\u767b\u5f55\u5bc6\u7801\\\")\n    public Result updatePassword(@RequestParam(\\\"oldPwd\\\") String oldPass, @RequestParam(\\\"newPwd\\\") String newPass) {\n        AdminUser adminUser = adminUserService.getById(UserUtil.getUserId());\n        if (!UserUtil.verify(adminUser.getUsername() + oldPass, adminUser.getSalt(), adminUser.getPassword())) {\n            return R.error(AdminCodeEnum.ADMIN_PASSWORD_ERROR);\n        }\n        adminUser.setPassword(newPass);\n        return updateUser(adminUser);\n    }\n\n    @PostMapping(\\\"/updateUser\\\")\n    @ApiOperation(\\\"\u4fee\u6539\u7528\u6237\u4fe1\u606f\\\")\n    public Result updateUser(@RequestBody AdminUser adminUser) {\n        adminUserService.updateUser(adminUser);\n        return R.ok();\n    }\n\n    @Autowired\n    private IAdminDeptService deptService;\n\n    @PostMapping(\\\"/queryLoginUser\\\")\n    @ApiOperation(\\\"\u67e5\u8be2\u5f53\u524d\u767b\u5f55\u7528\u6237\\\")\n    public Result<AdminUserVO> queryLoginUser(HttpServletRequest request, HttpServletResponse response) {\n        String name = \\\"readNotice\\\";\n        AdminUser user = adminUserService.getById(UserUtil.getUserId());\n        if (user == null) {\n            throw new NoLoginException();\n        }\n        AdminSuperUserVo adminUser = BeanUtil.copyProperties(user, AdminSuperUserVo.class);\n        adminUser.setIsAdmin(UserUtil.isAdmin());\n        AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(name);\n        adminUser.setIsReadNotice(userConfig != null ? userConfig.getStatus() : 0);\n        adminUser.setPassword(null);\n        String deptName = deptService.getNameByDeptId(adminUser.getDeptId());\n        adminUser.setDeptName(deptName);\n        adminUser.setParentName(UserCacheUtil.getUserName(adminUser.getParentId()));\n        AdminConfig config = ApplicationContextHolder.getBean(IAdminConfigService.class).queryConfigByName(\\\"email\\\");\n        if (config != null && config.getStatus() == 1) {\n            Integer data = ApplicationContextHolder.getBean(EmailService.class).getEmailId(adminUser.getUserId()).getData();\n            adminUser.setEmailId(data);\n        }\n        AdminUserConfig userConfigByName = adminUserConfigService.queryUserConfigByName(\\\"InitUserConfig\\\");\n        if(userConfigByName != null){\n            adminUser.setServerUserInfo(JSON.parseObject(userConfigByName.getValue()));\n        }\n        return R.ok(adminUser);\n    }\n\n    @RequestMapping(\\\"/queryUserRoleIds\\\")\n    @ApiExplain(\\\"\u67e5\u8be2\u7528\u6237\u89d2\u8272\u5217\u8868\\\")\n    public Result<List<Integer>> queryUserRoleIds(@RequestParam(\\\"userId\\\") @NotNull Long userId) {\n        return R.ok(adminUserService.queryUserRoleIds(userId));\n    }\n\n    @RequestMapping(\\\"/queryListName\\\")\n    @ApiExplain(\\\"\u67e5\u8be2\u901a\u8baf\u5f55\\\")\n    public Result queryListName(@RequestBody UserBookBO userBookBO) {\n        return R.ok(adminUserService.queryListName(userBookBO));\n    }\n\n    @RequestMapping(\\\"/attention\\\")\n    @ApiExplain(\\\"\u5207\u6362\u5173\u6ce8\u72b6\u6001\\\")\n    public Result attention(@RequestParam(\\\"userId\\\") Long userId) {\n        adminUserService.attention(userId);\n        return R.ok();\n    }\n\n    @RequestMapping(\\\"/queryChildUserId\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u4e0b\u7684\u5b50\u7528\u6237\\\")\n    public Result<List<Long>> queryChildUserId(@NotNull Long userId) {\n        List<Long> longList = adminUserService.queryChildUserId(userId);\n        return R.ok(longList);\n    }\n\n    @RequestMapping(\\\"/queryUserInfo\\\")\n    @ApiOperation(\\\"\u67e5\u8be2\u7528\u6237\u4fe1\u606f\\\")\n    public Result<AdminUser> queryUserInfo(@RequestParam(\\\"userId\\\") Long userId) {\n        AdminUser byId = adminUserService.getById(userId);\n        String nameByDeptId = ApplicationContextHolder.getBean(IAdminDeptService.class).getNameByDeptId(byId.getDeptId());\n        byId.setDeptName(nameByDeptId);\n        byId.setSalt(null);\n        byId.setPassword(null);\n        return R.ok(byId);\n    }\n\n    @RequestMapping(\\\"/queryInfoByUserId\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u83b7\u53d6\u7528\u6237\\\")\n    public Result<UserInfo> queryInfoByUserId(@NotNull Long userId) {\n        AdminUser byId = adminUserService.getById(userId);\n        UserInfo userInfo = null;\n        if (byId != null) {\n            userInfo = BeanUtil.copyProperties(byId, UserInfo.class);\n            if(byId.getDeptId() != null) {\n                String nameByDeptId = UserCacheUtil.getDeptName(byId.getDeptId());\n                userInfo.setDeptName(nameByDeptId);\n            }\n            userInfo.setRoles(adminUserService.queryUserRoleIds(userInfo.getUserId()));\n        }\n        return R.ok(userInfo);\n    }\n\n    @PostMapping(\\\"/queryNormalUserByIds\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u83b7\u53d6\u6b63\u5e38\u7528\u6237\\\")\n    public Result<List<Long>> queryNormalUserByIds(@RequestBody List<Long> ids) {\n        return R.ok(adminUserService.queryNormalUserByIds(ids));\n    }\n\n\n    @PostMapping(\\\"/queryUserById\\\")\n    @ApiExplain(\\\"\u6839\u636e\u7528\u6237ID\u83b7\u53d6\u7528\u6237\\\")\n    public Result<SimpleUser> queryUserById(@RequestParam(\\\"userId\\\") Long userId) {\n        AdminUser adminUser = adminUserService.getById(userId);\n        if(adminUser != null) {\n            adminUser.setDeptName(deptService.getNameByDeptId(adminUser.getDeptId()));\n        }\n        return R.ok(BeanUtil.copyProperties(adminUser, SimpleUser.class));\n    }\n\n    @PostMapping(\\\"/queryUserByDeptIds\\\")\n    @ApiExplain(\\\"\u6839\u636e\u90e8\u95e8ID\u83b7\u53d6\u7528\u6237ids\\\")\n    public Result<List<Long>> queryUserByDeptIds(@RequestBody List<Integer> ids) {\n        List<Long> userIds = adminUserService.queryUserByDeptIds(ids);\n        return R.ok(userIds);\n    }\n\n    @PostMapping(\\\"/readNotice\\\")\n    @ApiOperation(\\\"\u8bbe\u7f6e\u66f4\u65b0\u65e5\u5fd7\u4e3a\u5df2\u8bfb\\\")\n\n\n", "CodeBleu_score": 5.349562264262071}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\tAdminConfig adminConfig = query().eq(\"name\", \"companyInfo\").one();\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(\"companyInfo\");\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        adminConfig.setCreateTime(BaseUtil.getNow());\n        adminConfig.setUpdateTime(BaseUtil.getNow());\n        save(adminConfig);\n    } else {\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        adminConfig.setUpdateTime(BaseUtil.getNow());\n        updateById(adminConfig);\n    }\n}", "CodeBleu_score": 53.559738382538136}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\tAdminConfig adminConfig = queryConfigListByName(AdminConst.AdminConfigName.COMPANY_INFO).get(0);\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(AdminConst.AdminConfigName.COMPANY_INFO);\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        save(adminConfig);\n    } else {\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        updateById(adminConfig);\n    }\n}", "CodeBleu_score": 50.110959241946006}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\tAdminConfig adminConfig = queryConfigByName(\"companyInfo\");\n    if (Objects.isNull(adminConfig)) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(\"companyInfo\");\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        save(adminConfig);\n    } else {\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        updateById(adminConfig);\n    }\n}", "CodeBleu_score": 42.440821346138435}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\tString companyKey = \"companyInfo\";\n    AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\" limit 1\").one();\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(companyKey);\n        adminConfig.setStatus(1);\n        adminConfig.setDescription(\"\u4f01\u4e1aLOGO\u914d\u7f6e\");\n    }\n    AdminCompanyBO adminCompanyBO = JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n    if (adminCompanyBO == null) {\n        adminCompanyBO = new AdminCompanyBO();\n    }\n    return adminCompanyBO;\n}", "CodeBleu_score": 74.74284648792838}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\tString companyKey = \"companyInfo\";\n    AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\" limit 1\").one();\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(companyKey);\n        adminConfig.setStatus(1);\n        adminConfig.setDescription(\"\u4f01\u4e1aLOGO\u914d\u7f6e\");\n    }\n    AdminCompanyBO adminCompanyBO = JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n    if (adminCompanyBO == null) {\n        adminCompanyBO = new AdminCompanyBO();\n    }\n    return adminCompanyBO;\n}", "CodeBleu_score": 74.74284648792838}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\tString companyKey = \"companyInfo\";\n    AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\" limit 1\").one();\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(companyKey);\n        adminConfig.setStatus(1);\n        adminConfig.setDescription(\"\u4f01\u4e1aLOGO\u914d\u7f6e\");\n    }\n    return JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n}", "CodeBleu_score": 63.711975812985536}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\tList<AdminConfig> adminConfigList = new ArrayList<>();\n        stringList.forEach(string -> {\n            AdminConfig adminConfig = new AdminConfig();\n            adminConfig.setName(logConfigName);\n            adminConfig.setStatus(1);\n            adminConfig.setDescription(string);\n            adminConfig.setValue(string);\n            adminConfigList.add(adminConfig);\n        });\n        // Remove existing configurations with the specified log configuration name\n        remove(new QueryWrapper<AdminConfig>().eq(\"name\", logConfigName));\n        // Save the new list of configurations in batch\n        saveOrUpdateBatch(adminConfigList);\n    }", "CodeBleu_score": 46.62198662007039}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\tList<AdminConfig> adminConfigList = new ArrayList<>();\n        stringList.forEach(string -> {\n            AdminConfig adminConfig = new AdminConfig();\n            adminConfig.setName(logConfigName);\n            adminConfig.setStatus(1);\n            adminConfig.setDescription(string);\n            adminConfig.setValue(string);\n            adminConfigList.add(adminConfig);\n        });\n        // Remove existing configurations with the specified log configuration name\n        remove(new QueryWrapper<AdminConfig>().eq(\"name\", logConfigName));\n        // Save the new list of configurations in batch\n        saveBatch(adminConfigList);\n    }", "CodeBleu_score": 46.90721308632359}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\tList<AdminConfig> adminConfigList = new ArrayList<>();\n  stringList.forEach(string -> {\n   AdminConfig adminConfig = new AdminConfig();\n   adminConfig.setName(logConfigName);\n   adminConfig.setDescription(\"Log welcome speech\");\n   adminConfig.setValue(string);\n   adminConfig.setStatus(1);\n   adminConfigList.add(adminConfig);\n  });\n  // Remove existing configurations with the specified log configuration name\n  queryConfigListByName(logConfigName).forEach(adminConfig -> {\n   adminConfig.setStatus(0);\n   saveOrUpdate(adminConfig);\n  });\n  // Save the new list of configurations in batch\n  saveOrUpdateBatch(adminConfigList);\n }", "CodeBleu_score": 48.287386251144824}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\tService jxcExamineService;\n\n    /**\n     * \u901a\u8fc7name\u67e5\u8be2\u7cfb\u7edf\u914d\u7f6e\n     *\n     * @param names names\n     * @return adminConfig\n     */\n    @Override\n    public List<AdminConfig> queryConfigListByName(Object... names) {\n        return query().in(\\\"name\\\", names).list();\n    }\n\n    /**\n     * \u8bbe\u7f6e\u4f01\u4e1a\u914d\u7f6e\n     *\n     */\n    @Override\n    public void setAdminConfig(AdminCompanyBO adminCompanyBO) {\n        String companyKey = \\\"companyInfo\\\";\n        AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\\\" limit 1\\\").one();\n        if (adminConfig == null) {\n            adminConfig = new AdminConfig();\n            adminConfig.setName(companyKey);\n            adminConfig.setStatus(1);\n            adminConfig.setDescription(\\\"\u4f01\u4e1aLOGO\u914d\u7f6e\\\");\n        }\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        saveOrUpdate(adminConfig);\n    }\n\n    /**\n     * \u67e5\u8be2\u4f01\u4e1a\u914d\u7f6e\n     *\n     * @return adminCompanyBO\n     */\n    @Override\n    public AdminCompanyBO queryAdminConfig() {\n        String companyKey = \\\"companyInfo\\\";\n        AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\\\" limit 1\\\").one();\n        AdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n        if (adminConfig != null) {\n            adminCompanyBO = JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n        }\n        return adminCompanyBO;\n    }\n\n    /**\n     * \u67e5\u8be2\u6a21\u5757\u8bbe\u7f6e\n     *\n     * @return data\n     */\n    @Override\n    public List<ModuleSettingVO> queryModuleSetting() {\n        List<AdminConfig> adminConfigList = queryConfigListByName((Object[]) AdminModuleEnum.getValues());\n        List<ModuleSettingVO> moduleSettingList = new ArrayList<>();\n        adminConfigList.forEach(adminConfig -> {\n            ModuleSettingVO moduleSettingVO = new ModuleSettingVO();\n            moduleSettingVO.setSettingId(adminConfig.getSettingId());\n            moduleSettingVO.setModule(adminConfig.getName());\n            moduleSettingVO.setStatus(adminConfig.getStatus());\n            moduleSettingVO.setType(adminConfig.getValue());\n            moduleSettingVO.setName(adminConfig.getDescription());\n            moduleSettingList.add(moduleSettingVO);\n        });\n        return moduleSettingList;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u6a21\u5757\u7684\u7981\u7528\u542f\u7528\n     *\n     * @param adminConfig data\n     */\n    @Override\n    public void setModuleSetting(AdminConfig adminConfig) {\n        updateById(adminConfig);\n        //\u67e5\u8be2\u4f01\u4e1a\u7528\u6237\uff0c\u5c06\u4f01\u4e1a\u7528\u6237\u7684\u6743\u9650\u7f13\u5b58\u6e05\u9664\uff0c\u91cd\u65b0\u8ba1\u7b97\n        List<AdminUserVO> userList = adminUserService.queryUserList(null).getRecords();\n        //\u6e05\u9664\u7f13\u5b58\n        adminRoleService.authInvalidate(userList.stream().map(AdminUserVO::getUserId).collect(Collectors.toList()));\n    }\n\n    /**\n     * \u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\n     *\n     * @param stringList data\n     */\n    @Override\n    public void setLogWelcomeSpeech(List<String> stringList) {\n        List<AdminConfig> configList = new ArrayList<>();\n        stringList.forEach(str -> {\n            AdminConfig config = new AdminConfig();\n            config.setName(logConfigName);\n            config.setValue(str);\n            config.setStatus(1);\n            configList.add(config);\n        });\n        QueryWrapper<AdminConfig> queryWrapper = new QueryWrapper<>();\n        queryWrapper.eq(\\\"name\\\", logConfigName);\n        remove(queryWrapper);\n        saveBatch(configList, AdminConst.BATCH_SAVE_SIZE);\n    }\n\n    /**\n     * \u67e5\u8be2\u65e5\u5fd7\u6b22\u8fce\u8bed\n     *\n     * @return data\n     */\n    @Override\n    public List<LogWelcomeSpeechBO> getLogWelcomeSpeechList() {\n        List<AdminConfig> adminConfigList = query().select(\\\"setting_id\\\", \\\"value\\\").eq(\\\"name\\\", logConfigName).list();\n        return adminConfigList.stream().map(adminConfig -> BeanUtil.copyProperties(adminConfig, LogWelcomeSpeechBO.class)).collect(Collectors.toList());\n    }\n\n    /**\n     * \u6839\u636e\u540d\u79f0\u67e5\u8be2\u914d\u7f6e\u4fe1\u606f\n     *\n     * @param name\n     * @return data\n     */\n    @Override\n    public AdminConfig queryConfigByName(String name) {\n        return query().in(\\\"name\\\", name).last(\\\" limit 1\\\").one();\n    }\n\n    /**\n     * \u67e5\u8be2\u547c\u53eb\u4e2d\u5fc3\u8bbe\u7f6e\n     *\n     * @return data\n     */\n    @Override\n    public ModuleSettingVO queryCallModuleSetting() {\n        AdminConfig adminConfig = queryConfigByName(AdminModuleEnum.CALL.getValue());\n        ModuleSettingVO moduleSettingVO = new ModuleSettingVO();\n        moduleSettingVO.setSettingId(adminConfig.getSettingId());\n        moduleSettingVO.setModule(adminConfig.getName());\n        moduleSettingVO.setStatus(adminConfig.getStatus());\n        moduleSettingVO.setType(adminConfig.getValue());\n        moduleSettingVO.setName(adminConfig.getDescription());\n        return moduleSettingVO;\n    }\n\n\n    @Override\n    public void updateAdminConfig(AdminConfig adminConfig) {\n        saveOrUpdate(adminConfig);\n    }\n\n    @Override\n    public AdminConfig queryFirstConfigByNameAndValue(String name, String value) {\n        return lambdaQuery().eq(AdminConfig::getName, name).eq(AdminConfig::getValue, value).one();\n    }\n\n    @Override\n    public void setMarketing(Integer status) {\n        String name = \\\"marketing\\\";\n        AdminConfig adminConfig = this.lambdaQuery().eq(AdminConfig::getName, name).last(\\\" limit 1\\\").one();\n        if (adminConfig == null) {\n            AdminConfig config = new AdminConfig();\n            config.setName(name);\n            config.setStatus(Objects.equals(1, status) ? 1 : 0);\n            config.setDescription(\\\"\u662f\u5426\u5f00\u542f\u8425\u9500\u6d3b\u52a8\\\");\n            this.save(config);\n        } else {\n            adminConfig.setStatus(Objects.equals(1, status) ? 1 : 0);\n            this.updateById(adminConfig);\n        }\n    }\n\n    @Override\n    public Integer queryMarketing() {\n        String name = \\\"marketing\\\";\n        AdminConfig adminConfig = this.lambdaQuery().eq(AdminConfig::getName, name).last(\\\" limit 1\\\").one();\n        if (adminConfig == null) {\n            adminConfig = new AdminConfig();\n            adminConfig.setName(name);\n            adminConfig.setStatus(1);\n            adminConfig.setDescription(\\\"\u662f\u5426\u5f00\u542f\u8425\u9500\u6d3b\u52a8\\\");\n            this.save(adminConfig);\n        }\n        return adminConfig.getStatus();\n    }\n\n    @Override\n\n\n", "CodeBleu_score": 8.811558815875008}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\tService jxcExamineService;\n\n    /**\n     * \u901a\u8fc7name\u67e5\u8be2\u7cfb\u7edf\u914d\u7f6e\n     *\n     * @param names names\n     * @return adminConfig\n     */\n    @Override\n    public List<AdminConfig> queryConfigListByName(Object... names) {\n        return query().in(\\\"name\\\", names).list();\n    }\n\n    /**\n     * \u8bbe\u7f6e\u4f01\u4e1a\u914d\u7f6e\n     *\n     */\n    @Override\n    public void setAdminConfig(AdminCompanyBO adminCompanyBO) {\n        String companyKey = \\\"companyInfo\\\";\n        AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\\\" limit 1\\\").one();\n        if (adminConfig == null) {\n            adminConfig = new AdminConfig();\n            adminConfig.setName(companyKey);\n            adminConfig.setStatus(1);\n            adminConfig.setDescription(\\\"\u4f01\u4e1aLOGO\u914d\u7f6e\\\");\n        }\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        saveOrUpdate(adminConfig);\n    }\n\n    /**\n     * \u67e5\u8be2\u4f01\u4e1a\u914d\u7f6e\n     *\n     * @return adminCompanyBO\n     */\n    @Override\n    public AdminCompanyBO queryAdminConfig() {\n        String companyKey = \\\"companyInfo\\\";\n        AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\\\" limit 1\\\").one();\n        AdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n        if (adminConfig != null) {\n            adminCompanyBO = JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n        }\n        return adminCompanyBO;\n    }\n\n    /**\n     * \u67e5\u8be2\u6a21\u5757\u8bbe\u7f6e\n     *\n     * @return data\n     */\n    @Override\n    public List<ModuleSettingVO> queryModuleSetting() {\n        List<AdminConfig> adminConfigList = queryConfigListByName((Object[]) AdminModuleEnum.getValues());\n        List<ModuleSettingVO> moduleSettingList = new ArrayList<>();\n        adminConfigList.forEach(adminConfig -> {\n            ModuleSettingVO moduleSettingVO = new ModuleSettingVO();\n            moduleSettingVO.setSettingId(adminConfig.getSettingId());\n            moduleSettingVO.setModule(adminConfig.getName());\n            moduleSettingVO.setStatus(adminConfig.getStatus());\n            moduleSettingVO.setType(adminConfig.getValue());\n            moduleSettingVO.setName(adminConfig.getDescription());\n            moduleSettingList.add(moduleSettingVO);\n        });\n        return moduleSettingList;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u6a21\u5757\u7684\u7981\u7528\u542f\u7528\n     *\n     * @param adminConfig data\n     */\n    @Override\n    public void setModuleSetting(AdminConfig adminConfig) {\n        updateById(adminConfig);\n        //\u67e5\u8be2\u4f01\u4e1a\u7528\u6237\uff0c\u5c06\u4f01\u4e1a\u7528\u6237\u7684\u6743\u9650\u7f13\u5b58\u6e05\u9664\uff0c\u91cd\u65b0\u8ba1\u7b97\n        List<AdminUserVO> userList = adminUserService.queryUserList(null).getRecords();\n        //\u6e05\u9664\u7f13\u5b58\n        adminRoleService.authInvalidate(userList.stream().map(AdminUserVO::getUserId).collect(Collectors.toList()));\n    }\n\n    /**\n     * \u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\n     *\n     * @param stringList data\n     */\n    @Override\n    public void setLogWelcomeSpeech(List<String> stringList) {\n        List<AdminConfig> configList = new ArrayList<>();\n        stringList.forEach(str -> {\n            AdminConfig config = new AdminConfig();\n            config.setName(logConfigName);\n            config.setValue(str);\n            config.setStatus(1);\n            configList.add(config);\n        });\n        QueryWrapper<AdminConfig> queryWrapper = new QueryWrapper<>();\n        queryWrapper.eq(\\\"name\\\", logConfigName);\n        remove(queryWrapper);\n        saveBatch(configList, AdminConst.BATCH_SAVE_SIZE);\n    }\n\n    /**\n     * \u67e5\u8be2\u65e5\u5fd7\u6b22\u8fce\u8bed\n     *\n     * @return data\n     */\n    @Override\n    public List<LogWelcomeSpeechBO> getLogWelcomeSpeechList() {\n        List<AdminConfig> adminConfigList = query().select(\\\"setting_id\\\", \\\"value\\\").eq(\\\"name\\\", logConfigName).list();\n        return adminConfigList.stream().map(adminConfig -> BeanUtil.copyProperties(adminConfig, LogWelcomeSpeechBO.class)).collect(Collectors.toList());\n    }\n\n    /**\n     * \u6839\u636e\u540d\u79f0\u67e5\u8be2\u914d\u7f6e\u4fe1\u606f\n     *\n     * @param name\n     * @return data\n     */\n    @Override\n    public AdminConfig queryConfigByName(String name) {\n        return query().in(\\\"name\\\", name).last(\\\" limit 1\\\").one();\n    }\n\n    /**\n     * \u67e5\u8be2\u547c\u53eb\u4e2d\u5fc3\u8bbe\u7f6e\n     *\n     * @return data\n     */\n    @Override\n    public ModuleSettingVO queryCallModuleSetting() {\n        AdminConfig adminConfig = queryConfigByName(AdminModuleEnum.CALL.getValue());\n        ModuleSettingVO moduleSettingVO = new ModuleSettingVO();\n        moduleSettingVO.setSettingId(adminConfig.getSettingId());\n        moduleSettingVO.setModule(adminConfig.getName());\n        moduleSettingVO.setStatus(adminConfig.getStatus());\n        moduleSettingVO.setType(adminConfig.getValue());\n        moduleSettingVO.setName(adminConfig.getDescription());\n        return moduleSettingVO;\n    }\n\n\n    @Override\n    public void updateAdminConfig(AdminConfig adminConfig) {\n        saveOrUpdate(adminConfig);\n    }\n\n    @Override\n    public AdminConfig queryFirstConfigByNameAndValue(String name, String value) {\n        return lambdaQuery().eq(AdminConfig::getName, name).eq(AdminConfig::getValue, value).one();\n    }\n\n    @Override\n    public void setMarketing(Integer status) {\n        String name = \\\"marketing\\\";\n        AdminConfig adminConfig = this.lambdaQuery().eq(AdminConfig::getName, name).last(\\\" limit 1\\\").one();\n        if (adminConfig == null) {\n            AdminConfig config = new AdminConfig();\n            config.setName(name);\n            config.setStatus(Objects.equals(1, status) ? 1 : 0);\n            config.setDescription(\\\"\u662f\u5426\u5f00\u542f\u8425\u9500\u6d3b\u52a8\\\");\n            this.save(config);\n        } else {\n            adminConfig.setStatus(Objects.equals(1, status) ? 1 : 0);\n            this.updateById(adminConfig);\n        }\n    }\n\n    @Override\n    public Integer queryMarketing() {\n        String name = \\\"marketing\\\";\n        AdminConfig adminConfig = this.lambdaQuery().eq(AdminConfig::getName, name).last(\\\" limit 1\\\").one();\n        if (adminConfig == null) {\n            adminConfig = new AdminConfig();\n            adminConfig.setName(name);\n            adminConfig.setStatus(1);\n            adminConfig.setDescription(\\\"\u662f\u5426\u5f00\u542f\u8425\u9500\u6d3b\u52a8\\\");\n            this.save(adminConfig);\n        }\n        return adminConfig.getStatus();\n    }\n\n    @Override\n\n\n", "CodeBleu_score": 8.811558815875008}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\tService jxcExamineService;\n\n    /**\n     * \u901a\u8fc7name\u67e5\u8be2\u7cfb\u7edf\u914d\u7f6e\n     *\n     * @param names names\n     * @return adminConfig\n     */\n    @Override\n    public List<AdminConfig> queryConfigListByName(Object... names) {\n        return query().in(\\\"name\\\", names).list();\n    }\n\n    /**\n     * \u8bbe\u7f6e\u4f01\u4e1a\u914d\u7f6e\n     *\n     */\n    @Override\n    public void setAdminConfig(AdminCompanyBO adminCompanyBO) {\n        String companyKey = \\\"companyInfo\\\";\n        AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\\\" limit 1\\\").one();\n        if (adminConfig == null) {\n            adminConfig = new AdminConfig();\n            adminConfig.setName(companyKey);\n            adminConfig.setStatus(1);\n            adminConfig.setDescription(\\\"\u4f01\u4e1aLOGO\u914d\u7f6e\\\");\n        }\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        saveOrUpdate(adminConfig);\n    }\n\n    /**\n     * \u67e5\u8be2\u4f01\u4e1a\u914d\u7f6e\n     *\n     * @return adminCompanyBO\n     */\n    @Override\n    public AdminCompanyBO queryAdminConfig() {\n        String companyKey = \\\"companyInfo\\\";\n        AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\\\" limit 1\\\").one();\n        AdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n        if (adminConfig != null) {\n            adminCompanyBO = JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n        }\n        return adminCompanyBO;\n    }\n\n    /**\n     * \u67e5\u8be2\u6a21\u5757\u8bbe\u7f6e\n     *\n     * @return data\n     */\n    @Override\n    public List<ModuleSettingVO> queryModuleSetting() {\n        List<AdminConfig> adminConfigList = queryConfigListByName((Object[]) AdminModuleEnum.getValues());\n        List<ModuleSettingVO> moduleSettingList = new ArrayList<>();\n        adminConfigList.forEach(adminConfig -> {\n            ModuleSettingVO moduleSettingVO = new ModuleSettingVO();\n            moduleSettingVO.setSettingId(adminConfig.getSettingId());\n            moduleSettingVO.setModule(adminConfig.getName());\n            moduleSettingVO.setStatus(adminConfig.getStatus());\n            moduleSettingVO.setType(adminConfig.getValue());\n            moduleSettingVO.setName(adminConfig.getDescription());\n            moduleSettingList.add(moduleSettingVO);\n        });\n        return moduleSettingList;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u6a21\u5757\u7684\u7981\u7528\u542f\u7528\n     *\n     * @param adminConfig data\n     */\n    @Override\n    public void setModuleSetting(AdminConfig adminConfig) {\n        updateById(adminConfig);\n        //\u67e5\u8be2\u4f01\u4e1a\u7528\u6237\uff0c\u5c06\u4f01\u4e1a\u7528\u6237\u7684\u6743\u9650\u7f13\u5b58\u6e05\u9664\uff0c\u91cd\u65b0\u8ba1\u7b97\n        List<AdminUserVO> userList = adminUserService.queryUserList(null).getRecords();\n        //\u6e05\u9664\u7f13\u5b58\n        adminRoleService.authInvalidate(userList.stream().map(AdminUserVO::getUserId).collect(Collectors.toList()));\n    }\n\n    /**\n     * \u8bbe\u7f6e\u65e5\u5fd7\u6b22\u8fce\u8bed\n     *\n     * @param stringList data\n     */\n    @Override\n    public void setLogWelcomeSpeech(List<String> stringList) {\n        List<AdminConfig> configList = new ArrayList<>();\n        stringList.forEach(str -> {\n            AdminConfig config = new AdminConfig();\n            config.setName(logConfigName);\n            config.setValue(str);\n            config.setStatus(1);\n            configList.add(config);\n        });\n        QueryWrapper<AdminConfig> queryWrapper = new QueryWrapper<>();\n        queryWrapper.eq(\\\"name\\\", logConfigName);\n        remove(queryWrapper);\n        saveBatch(configList, AdminConst.BATCH_SAVE_SIZE);\n    }\n\n    /**\n     * \u67e5\u8be2\u65e5\u5fd7\u6b22\u8fce\u8bed\n     *\n     * @return data\n     */\n    @Override\n    public List<LogWelcomeSpeechBO> getLogWelcomeSpeechList() {\n        List<AdminConfig> adminConfigList = query().select(\\\"setting_id\\\", \\\"value\\\").eq(\\\"name\\\", logConfigName).list();\n        return adminConfigList.stream().map(adminConfig -> BeanUtil.copyProperties(adminConfig, LogWelcomeSpeechBO.class)).collect(Collectors.toList());\n    }\n\n    /**\n     * \u6839\u636e\u540d\u79f0\u67e5\u8be2\u914d\u7f6e\u4fe1\u606f\n     *\n     * @param name\n     * @return data\n     */\n    @Override\n    public AdminConfig queryConfigByName(String name) {\n        return query().in(\\\"name\\\", name).last(\\\" limit 1\\\").one();\n    }\n\n    /**\n     * \u67e5\u8be2\u547c\u53eb\u4e2d\u5fc3\u8bbe\u7f6e\n     *\n     * @return data\n     */\n    @Override\n    public ModuleSettingVO queryCallModuleSetting() {\n        AdminConfig adminConfig = queryConfigByName(AdminModuleEnum.CALL.getValue());\n        ModuleSettingVO moduleSettingVO = new ModuleSettingVO();\n        moduleSettingVO.setSettingId(adminConfig.getSettingId());\n        moduleSettingVO.setModule(adminConfig.getName());\n        moduleSettingVO.setStatus(adminConfig.getStatus());\n        moduleSettingVO.setType(adminConfig.getValue());\n        moduleSettingVO.setName(adminConfig.getDescription());\n        return moduleSettingVO;\n    }\n\n\n    @Override\n    public void updateAdminConfig(AdminConfig adminConfig) {\n        saveOrUpdate(adminConfig);\n    }\n\n    @Override\n    public AdminConfig queryFirstConfigByNameAndValue(String name, String value) {\n        return lambdaQuery().eq(AdminConfig::getName, name).eq(AdminConfig::getValue, value).one();\n    }\n\n    @Override\n    public void setMarketing(Integer status) {\n        String name = \\\"marketing\\\";\n        AdminConfig adminConfig = this.lambdaQuery().eq(AdminConfig::getName, name).last(\\\" limit 1\\\").one();\n        if (adminConfig == null) {\n            AdminConfig config = new AdminConfig();\n            config.setName(name);\n            config.setStatus(Objects.equals(1, status) ? 1 : 0);\n            config.setDescription(\\\"\u662f\u5426\u5f00\u542f\u8425\u9500\u6d3b\u52a8\\\");\n            this.save(config);\n        } else {\n            adminConfig.setStatus(Objects.equals(1, status) ? 1 : 0);\n            this.updateById(adminConfig);\n        }\n    }\n\n    @Override\n    public Integer queryMarketing() {\n        String name = \\\"marketing\\\";\n        AdminConfig adminConfig = this.lambdaQuery().eq(AdminConfig::getName, name).last(\\\" limit 1\\\").one();\n        if (adminConfig == null) {\n            adminConfig = new AdminConfig();\n            adminConfig.setName(name);\n            adminConfig.setStatus(1);\n            adminConfig.setDescription(\\\"\u662f\u5426\u5f00\u542f\u8425\u9500\u6d3b\u52a8\\\");\n            this.save(adminConfig);\n        }\n        return adminConfig.getStatus();\n    }\n\n    @Override\n\n\n", "CodeBleu_score": 8.811558815875008}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\tcopyProperties(adminConfig, LogWelcomeSpeechBO.class)).collect(Collectors.toList());\n    }", "CodeBleu_score": 6.797405239030874}, {"code": "private boolean verifyInitAuth(){\n\tcopyProperties(adminConfig, LogWelcomeSpeechBO.class)).collect(Collectors.toList());\n    }", "CodeBleu_score": 6.797405239030874}, {"code": "private boolean verifyInitAuth(){\n\tcopyProperties(adminConfig, LogWelcomeSpeechBO.class)).collect(Collectors.toList());\n    }", "CodeBleu_score": 6.797405239030874}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t// Delete all role-menu associations for the role\n    this.delete(new AdminRoleMenu().setRoleId(roleId));\n\n    // Create a list of role-menu associations\n    List<AdminRoleMenu> list = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n        adminRoleMenu.setRoleId(roleId);\n        adminRoleMenu.setMenuId(menuId);\n        list.add(adminRoleMenu);\n    }\n\n    // Save the list of role-menu associations in batches\n    this.saveBatch(list);\n}", "CodeBleu_score": 61.75989038376722}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t// Delete all existing role-menu associations for this role\n    baseMapper.delete(new QueryWrapper<AdminRoleMenu>().eq(\"role_id\", roleId));\n    // Create a list of role-menu associations\n    List<AdminRoleMenu> list = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n        adminRoleMenu.setRoleId(roleId);\n        adminRoleMenu.setMenuId(menuId);\n        list.add(adminRoleMenu);\n    }\n    // Save the list of role-menu associations in batches\n    this.saveBatch(list);\n}", "CodeBleu_score": 63.698289020603504}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t// Delete the existing role-menu associations\n    this.baseMapper.delete(new QueryWrapper<AdminRoleMenu>().lambda().eq(AdminRoleMenu::getRoleId, roleId));\n\n    // Create a list of role-menu associations\n    List<AdminRoleMenu> adminRoleMenuList = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n        adminRoleMenu.setRoleId(roleId);\n        adminRoleMenu.setMenuId(menuId);\n        adminRoleMenuList.add(adminRoleMenu);\n    }\n\n    // Save the list of role-menu associations in batches\n    this.saveBatch(adminRoleMenuList);\n}", "CodeBleu_score": 65.40298942137514}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\t.LoginLog;", "CodeBleu_score": 2.4789535040933925}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t.LoginLog;", "CodeBleu_score": 2.4789535040933925}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t.LoginLog;", "CodeBleu_score": 2.4789535040933925}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t   \\\"      \\\\\"detail\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"keyword\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"ipAddress\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"ip\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"userId\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"long\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"realname\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"keyword\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"createTime\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"date\\\\\",\n\\\" +\n                    \\\"        \\\\\"format\\\\\": \\\\\"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd\\\\\"\n\\\" +\n                    \\\"      }\n\\\" +\n                    \\\"    }", "CodeBleu_score": 7.067231414803335}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t   \\\"      \\\\\"detail\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"keyword\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"ipAddress\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"ip\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"userId\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"long\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"realname\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"keyword\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"createTime\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"date\\\\\",\n\\\" +\n                    \\\"        \\\\\"format\\\\\": \\\\\"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd\\\\\"\n\\\" +\n                    \\\"      }\n\\\" +\n                    \\\"    }", "CodeBleu_score": 7.067231414803335}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t   \\\"      \\\\\"detail\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"keyword\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"ipAddress\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"ip\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"userId\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"long\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"realname\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"keyword\\\\\"\n\\\" +\n                    \\\"      },\n\\\" +\n                    \\\"      \\\\\"createTime\\\\\": {\n\\\" +\n                    \\\"        \\\\\"type\\\\\": \\\\\"date\\\\\",\n\\\" +\n                    \\\"        \\\\\"format\\\\\": \\\\\"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd\\\\\"\n\\\" +\n                    \\\"      }\n\\\" +\n                    \\\"    }", "CodeBleu_score": 7.067231414803335}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\treturn new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https.get(url, (response) => {\n      if (response.statusCode === 200) {\n        response.pipe(file);\n        file.on(\\\"finish\\\", () => {\n          file.close();\n          resolve(true);\n        });\n      } else {\n        file.close();\n        fs.unlink(dest);\n        reject(new Error(\\`Failed to download file: Server responded with status code \\${response.statusCode}.\\`));\n      }\n    }).on(\\\"error\\\", (err) => {\n      fs.unlink(dest);\n      reject(err);\n    });\n  });\n}", "CodeBleu_score": 61.65143199271963}, {"code": "async function downloadFile(url, dest){\n\treturn new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https.get(url, (response) => {\n      if (response.statusCode === 200) {\n        response.pipe(file);\n        file.on(\\\"finish\\\", () => {\n          file.close();\n          resolve();\n        });\n      } else {\n        reject(new Error(\\\"Failed to download file.\\\"));\n      }\n    }).on(\\\"error\\\", (err) => {\n      fs.unlink(dest);\n      reject(err);\n    });\n  });\n}", "CodeBleu_score": 66.04051889353349}, {"code": "async function downloadFile(url, dest){\n\treturn new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https.get(url, (response) => {\n      if (response.statusCode === 200) {\n        response.pipe(file);\n        file.on(\\\"finish\\\", () => {\n          file.close();\n          resolve();\n        });\n      } else {\n        file.close();\n        fs.unlink(dest, () => {\n          reject(new Error(\\\"Failed to download file. Server responded with non-200 status code: \\\" + response.statusCode));\n        });\n      }\n    }).on(\\\"error\\\", (err) => {\n      fs.unlink(dest, () => {\n        reject(err);\n      });\n    });\n  });\n}", "CodeBleu_score": 58.281689082514134}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\treturn findByIdIn(module.getDependsOn())\n            .doOnNext(circularDependencyCheckSet::add)\n            .flatMapMany(dependentModule -> getDependentModules(dependentModule, circularDependencyCheckSet))\n            .filter(dependentModule -> !circularDependencyCheckSet.contains(dependentModule.getId()));\n}", "CodeBleu_score": 50.75441574118828}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\tMap<String, Object> dsl = module.getLiveApplicationDsl();\n    return getAllDependentModulesFromDsl(dsl)\n        .filter(id -> !circularDependencyCheckSet.contains(id))\n        .collectList()\n        .flatMapMany(moduleIds -> findByIdIn(moduleIds))\n        .onErrorContinue((e, i) -> log.warn(\"get dependent modules on error continue , {}\", e.getMessage()))\n        .expandDeep(module -> getDependentModules(module, circularDependencyCheckSet))\n        .collectList();\n}", "CodeBleu_score": 70.33708196027014}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\treturn getAllDependentModulesFromApplication(module, false)\n            .filter(application -> !circularDependencyCheckSet.contains(application.getId()))\n            .doOnNext(application -> circularDependencyCheckSet.add(application.getId()))\n            .flatMapMany(application -> findByIdIn(Lists.newArrayList(application.getId())));\n}", "CodeBleu_score": 48.96475353096906}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tfor (Map.Entry<?, ?> entry : map.entrySet()) {\n        if (entry.getValue() instanceof Map<?, ?>) {\n            doGetDependentModules((Map<?, ?>) entry.getValue(), dependentModuleIds);\n        } else if (entry.getValue() instanceof List<?>) {\n            for (Object value : (List<?>) entry.getValue()) {\n                if (value instanceof Map<?, ?>) {\n                    doGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n                }\n            }\n        }\n        if (entry.getKey().equals(\"type\") && entry.getValue().equals(\"module\")) {\n            Object appId = map.get(\"appId\");\n            if (appId != null && !StringUtils.isBlank(appId.toString())) {\n                dependentModuleIds.add(appId.toString());\n            }\n        }\n    }\n}", "CodeBleu_score": 42.81684806350385}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tfor (Map.Entry<?, ?> entry : map.entrySet()) {\n        Object value = entry.getValue();\n        if (value instanceof Map) {\n            doGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n        } else if (value instanceof List) {\n            for (Object listValue : (List<?>) value) {\n                if (listValue instanceof Map) {\n                    doGetDependentModules((Map<?, ?>) listValue, dependentModuleIds);\n                }\n            }\n        }\n\n        if (entry.getKey().equals(\"type\") && entry.getValue().equals(\"module\")) {\n            Object appId = map.get(\"appId\");\n            if (appId instanceof String && !StringUtils.isBlank((String) appId)) {\n                dependentModuleIds.add((String) appId);\n            }\n        }\n    }\n}", "CodeBleu_score": 42.130421401211464}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tif (map == null) {\n        return;\n    }\n\n    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        Object value = entry.getValue();\n        if (value instanceof Map<?, ?>) {\n            Map<?, ?> nestedMap = (Map<?, ?>) value;\n            if (nestedMap.containsKey(\"type\") && \"module\".equals(nestedMap.get(\"type\"))) {\n                String appId = (String) nestedMap.get(\"appId\");\n                if (StringUtils.isNotBlank(appId)) {\n                    dependentModuleIds.add(appId);\n                }\n            }\n            doGetDependentModules(nestedMap, dependentModuleIds);\n        } else if (value instanceof List<?>) {\n            List<?> list = (List<?>) value;\n            for (Object item : list) {\n                if (item instanceof Map<?, ?>) {\n                    doGetDependentModules((Map<?, ?>) item, dependentModuleIds);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 49.809579058224685}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\tfinal ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    dataBuffer.writeTo(baos);\n    byte[] imageData = baos.toByteArray();\n    DataBufferUtils.release(dataBuffer);\n\n    // We need to convert the image to a BufferedImage in order to manipulate it.\n    BufferedImage image = ImageIO.read(new ByteArrayInputStream(imageData));\n    if (image == null) {\n        throw new IOException(\"Could not read image\");\n    }\n\n    // If we're not creating a thumbnail, we can just return the original image data.\n    if (!createThumbnail) {\n        return new Asset(imageData, srcContentType);\n    }\n\n    // We're creating a thumbnail, so we need to resize the image.\n    int width = image.getWidth();\n    int height = image.getHeight();\n    int dimension = thumbNailPhotoDimension.get();\n    if (width > height) {\n        height = (int) (height * ((double) dimension / width));\n        width = dimension;\n    } else {\n        width = (int) (width * ((double) dimension / height));\n        height = dimension;\n    }\n    image = resize(image, width, height);\n\n    // We're done with the original image, so we can release it.\n    image.flush();\n\n    // We need to convert the BufferedImage to a byte array so we can return it as an Asset.\n    ByteArrayOutputStream baos2 = new ByteArrayOutputStream();\n    ImageIO.write(image, \"jpg\", baos2);\n    byte[] thumbnailData = baos2.toByteArray();\n\n    // We're done with the BufferedImage, so we can release it.\n    image.flush();\n\n    return new Asset(thumbnailData, MediaType.IMAGE_JPEG);\n}", "CodeBleu_score": 37.553626598810084}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\tfinal ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    dataBuffer.writeTo(baos);\n    DataBufferUtils.release(dataBuffer);\n    final byte[] imageData = baos.toByteArray();\n\n    // Get the image dimensions\n    final BufferedImage image = ImageIO.read(new ByteArrayInputStream(imageData));\n    final int width = image.getWidth();\n    final int height = image.getHeight();\n\n    // Create the thumbnail\n    final BufferedImage thumbnail;\n    if (createThumbnail) {\n        final int thumbnailWidth = thumbNailPhotoDimension.getValue();\n        final int thumbnailHeight = (int) Math.round(thumbnailWidth * (height / (double) width));\n        thumbnail = new BufferedImage(thumbnailWidth, thumbnailHeight, image.getType());\n        final Graphics2D graphics = thumbnail.createGraphics();\n        graphics.drawImage(image, 0, 0, thumbnailWidth, thumbnailHeight, null);\n        graphics.dispose();\n    } else {\n        thumbnail = image;\n    }\n\n    // Write the thumbnail to a byte array\n    final ByteArrayOutputStream thumbnailStream = new ByteArrayOutputStream();\n    ImageIO.write(thumbnail, \"jpeg\", thumbnailStream);\n    final byte[] thumbnailData = thumbnailStream.toByteArray();\n\n    // Create the thumbnail asset\n    final Asset thumbnailAsset = new Asset();\n    thumbnailAsset.setContentType(MediaType.IMAGE_JPEG);\n    thumbnailAsset.setContent(thumbnailData);\n\n    // Create the original asset\n    final Asset originalAsset = new Asset();\n    originalAsset.setContentType(srcContentType);\n    originalAsset.setContent(imageData);\n\n    // Return the original asset\n    return originalAsset;\n}", "CodeBleu_score": 37.77476932762032}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\tbyte[] data = new byte[dataBuffer.readableByteCount()];\n    dataBuffer.read(data);\n    DataBufferUtils.release(dataBuffer);\n\n    BufferedImage img = ImageIO.read(new ByteArrayInputStream(data));\n    if (img == null) {\n        throw new BizException(BizError.INVALID_PARAMETER, \"IMAGE_PARSE_ERROR\");\n    }\n\n    int width = img.getWidth();\n    int height = img.getHeight();\n\n    int thumbWidth = (int) (width * thumbNailPhotoDimension.get());\n    int thumbHeight = (int) (height * thumbNailPhotoDimension.get());\n\n    if (createThumbnail) {\n        img = resizeImage(img, thumbWidth, thumbHeight);\n    }\n\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    ImageIO.write(img, \"jpeg\", out);\n    byte[] imageData = out.toByteArray();\n    out.close();\n\n    Asset asset = new Asset();\n    asset.setContentType(MediaType.IMAGE_JPEG);\n    asset.setContent(imageData);\n    asset.setWidth(width);\n    asset.setHeight(height);\n    return asset;\n}", "CodeBleu_score": 40.019485688858595}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn repository.findById(assetId)\n            .flatMap(asset -> {\n                ServerHttpResponse response = exchange.getResponse();\n                response.setStatusCode(HttpStatus.OK);\n                if (asset.getContentType() != null) {\n                    response.getHeaders().setContentType(asset.getContentType());\n                }\n                return response.writeWith(Flux.just(DataBufferUtils.wrap(asset.getData())));\n            });\n}", "CodeBleu_score": 53.988483277699295}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn getById(assetId)\n            .flatMap(asset -> {\n                HttpHeaders headers = new HttpHeaders();\n                headers.setContentType(asset.getContentType());\n                return exchange.getResponse().writeWith(Mono.just(exchange.getResponse().bufferFactory().wrap(asset.getData())))\n                        .doOnSuccess(v -> exchange.getResponse().setStatusCode(HttpStatus.OK))\n                        .doOnSuccess(v -> exchange.getResponse().getHeaders().putAll(headers));\n            })\n            .switchIfEmpty(Mono.error(new BizException(BizError.NOT_FOUND, \"ASSET_NOT_FOUND\", assetId)));\n}", "CodeBleu_score": 47.20555555108379}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn repository.findById(assetId)\n            .flatMap(asset -> {\n                ServerHttpResponse response = exchange.getResponse();\n                response.setStatusCode(HttpStatus.OK);\n                if (asset.getContentType() != null) {\n                    response.getHeaders().setContentType(asset.getContentType());\n                }\n                return response.writeWith(Flux.just(DataBuffer.wrap(asset.getData())));\n            });\n}", "CodeBleu_score": 53.91084206648576}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\treturn Flux.empty();\n}", "CodeBleu_score": 14.527859102042253}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\treturn Flux.empty();\n\n}", "CodeBleu_score": 14.527859102042253}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\treturn Flux.empty();\n}", "CodeBleu_score": 14.527859102042253}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\treturn MongockSpring5.builder()\n            .setApplicationContext(springContext)\n            .setDriver(new SpringDataMongoV3Driver(mongoTemplate))\n            .setChangeLogsScanPackage(\"com.openblocks.infra.migration\")\n            .setEnabled(true)\n            .setTransactionEnabled(true)\n            .setTransactionTemplate(new TransactionTemplate(new DataSourceTransactionManager(dataSource)))\n            .build();\n}", "CodeBleu_score": 27.288999467961084}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\treturn MongockSpring5.builder()\n            .setDriver(new SpringDataMongoV3Driver(mongoTemplate))\n            .setChangeLogsScanPackage(\"com.openblocks.infra.db.changelogs\")\n            .setSpringContext(springContext)\n            .setTransactionEnabled(true)\n            .build();\n}", "CodeBleu_score": 23.145034026575082}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\treturn MongockSpring5.builder()\n            .setDriver(new SpringDataMongoV3Driver(mongoTemplate))\n            .setChangeLogsScanPackage(\"com.openblocks.infra.migration\")\n            .setSpringContext(springContext)\n            .setTransactionStrategy(MongockSpring5.TransactionStrategy.SINGLE_TRANSACTION)\n            .setTransactionEnabled(true)\n            .setTransactionRollbackOnError(true)\n            .build();\n}", "CodeBleu_score": 28.15346355542254}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\treturn new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n}", "CodeBleu_score": 26.023969508628948}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\treturn new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n}", "CodeBleu_score": 26.023969508628948}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\tReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n    template.setReadPreference(ReadPreference.secondaryPreferred());\n    return template;\n}", "CodeBleu_score": 77.82290641854172}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn getLiveBaseQueryByLibraryQueryId(libraryQueryId)\n            .map(BaseQuery::getDsl);\n}", "CodeBleu_score": 27.154461955137787}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn getLiveBaseQueryByLibraryQueryId(libraryQueryId)\n            .map(BaseQuery::getDsl);\n}", "CodeBleu_score": 27.154461955137787}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn getLiveBaseQueryByLibraryQueryId(libraryQueryId).map(BaseQuery::getDsl);\n}", "CodeBleu_score": 20.719438967298917}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\tDuration timeout = QueryTimeoutUtils.getTimeout(timeoutStr);\n        return Mono.defer(() -> {\n            try {\n                DatasourceConnectionHolder connectionHolder = datasourceConnectionPool.getConnection(datasource);\n                QueryExecutionContext queryExecutionContext = QueryExecutionContext.builder()\n                        .queryConfig(queryConfig)\n                        .requestParams(requestParams)\n                        .connectionHolder(connectionHolder)\n                        .timeout(timeout)\n                        .queryVisitorContext(queryVisitorContext)\n                        .build();\n                return datasourcePluginClient.executeQuery(datasource, queryExecutionContext);\n            } catch (TimeoutException e) {\n                return Mono.error(ofException(QUERY_EXECUTION_TIMEOUT, e));\n            } catch (Exception e) {\n                log.error(\"Query execution error\", e);\n                return Mono.error(ofException(QUERY_EXECUTION_ERROR, e));\n            }\n        });\n    }", "CodeBleu_score": 41.64786534762123}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t// Parse timeout\n        Duration timeout = QueryTimeoutUtils.parseTimeout(timeoutStr);\n\n        // Get connection\n        DatasourceConnectionHolder connectionHolder = datasourceConnectionPool.getConnection(datasource);\n\n        // Get query execution context\n        QueryExecutionContext queryExecutionContext = QueryExecutionContext.builder()\n                .datasource(datasource)\n                .connectionHolder(connectionHolder)\n                .queryConfig(queryConfig)\n                .requestParams(requestParams)\n                .timeout(timeout)\n                .queryVisitorContext(queryVisitorContext)\n                .build();\n\n        // Execute query\n        return Mono.defer(() -> {\n            try {\n                return Mono.just(datasourcePluginClient.executeQuery(queryExecutionContext));\n            } catch (TimeoutException e) {\n                // Close connection\n                datasourceConnectionPool.closeConnection(connectionHolder);\n\n                // Map timeout exception to a plugin exception\n                return Mono.error(ofException(QUERY_EXECUTION_TIMEOUT, \"Query execution timed out\", e));\n            } catch (Exception e) {\n                // Close connection\n                datasourceConnectionPool.closeConnection(connectionHolder);\n\n                // Log error\n                log.error(\"Error executing query\", e);\n\n                // Map error to a generic query execution error\n                return Mono.error(ofException(QUERY_EXECUTION_ERROR, \"Error executing query\", e));\n            }\n        });\n    }", "CodeBleu_score": 40.691569790087925}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\tlog.info(\"Executing query with query config: {} and request params: {}\", queryConfig, requestParams);\n\n        // The timeout duration\n        Duration timeout = QueryTimeoutUtils.getTimeoutDuration(timeoutStr);\n\n        // The datasource connection holder\n        DatasourceConnectionHolder datasourceConnectionHolder = datasourceConnectionPool.getConnection(datasource);\n\n        // The datasource plugin client\n        DatasourcePluginClient datasourcePluginClient = datasourcePluginClient.getClient(datasource.getPluginId());\n\n        // The datasource meta info\n        Map<String, Object> datasourceMetaInfo = datasourceMetaInfoService.getMetaInfo(datasource.getPluginId());\n\n        // The query execution result\n        QueryExecutionResult queryExecutionResult = new QueryExecutionResult();\n\n        // The query execution context\n        QueryExecutionContext queryExecutionContext = new QueryExecutionContext(datasourceConnectionHolder, datasourcePluginClient, datasourceMetaInfo, queryConfig, requestParams);\n\n        // The query execution timeout exception\n        TimeoutException queryExecutionTimeoutException = null;\n\n        // The query execution exception\n        Exception queryExecutionException = null;\n\n        // The query execution result\n        Object queryExecutionResultValue = null;\n\n        // The query execution result type\n        String queryExecutionResultType = null;\n\n        // The query execution result error message\n        String queryExecutionResultErrorMessage = null;\n\n        // The query execution result error stack trace\n        String queryExecutionResultErrorStackTrace = null;\n\n        // The query execution result error\n        String queryExecutionResultError = null;\n\n        // The query execution result data\n        List<Map<String, Object>> queryExecutionResultData = null;\n\n        // The query execution result columns\n        List<String> queryExecutionResultColumns = null;\n\n        // The query execution result row count\n        int queryExecutionResultRowCount = -1;\n\n        // The query execution result column count\n        int queryExecutionResultColumnCount = -1;\n\n        // The query execution result execution time\n        long queryExecutionResultExecutionTime = -1;\n\n        // The query execution result execution time\n        long queryExecutionResultExecutionTime = -1;\n\n        // The query execution result execution time\n        long queryExecutionResultExecutionTime", "CodeBleu_score": 33.4872392588599}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\treturn datasourceConnectionPool.acquireConnection(datasource)\n            .flatMap(datasourceConnectionHolder -> {\n                QueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext, datasourceConnectionHolder);\n                return datasourcePluginClient.executeQuery(datasource, queryExecutionContext);\n            })\n            .onErrorMap(exception -> {\n                if (exception instanceof BizException) {\n                    return exception;\n                }\n                log.error(\"query exception\", exception);\n                return ofException(QUERY_EXECUTION_ERROR, \"QUERY_EXECUTION_ERROR\", exception.getMessage());\n            });\n}", "CodeBleu_score": 40.3676162085888}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\treturn Mono.defer(() -> {\n        QueryExecutionContext queryExecutionContext = new QueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n        return datasourceConnectionPool.acquireConnection(datasource)\n                .flatMap(datasourceConnectionHolder -> {\n                    QueryExecutor queryExecutor = QueryExecutorFactory.getQueryExecutor(datasource.getType());\n                    return queryExecutor.execute(datasourceConnectionHolder, queryExecutionContext);\n                });\n    });\n}", "CodeBleu_score": 46.47340283564709}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\treturn Mono.defer(() -> {\n        QueryExecutionContext queryExecutionContext = QueryExecutionContext.builder()\n                .datasource(datasource)\n                .queryConfig(queryConfig)\n                .requestParams(requestParams)\n                .queryVisitorContext(queryVisitorContext)\n                .build();\n\n        return datasourceConnectionPool.acquireConnection(datasource)\n                .flatMap(connection -> {\n                    QueryExecutor queryExecutor = datasourceMetaInfoService.getQueryExecutor(datasource.getType());\n                    return queryExecutor.executeQuery(connection, queryExecutionContext);\n                })\n                .doFinally(signalType -> {\n                    if (signalType == SignalType.ON_ERROR) {\n                        log.error(\"query execution error\", queryExecutionContext.getError());\n                    }\n                    datasourceConnectionPool.releaseConnection(datasource, connection);\n                });\n    });\n}", "CodeBleu_score": 48.33259927210051}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (StringUtils.isBlank(timeoutStr)) {\n        return DEFAULT_QUERY_TIMEOUT_MILLIS;\n    }\n\n    Pair<String, String> parsed = parseTimeoutStr(timeoutStr);\n    if (parsed == null) {\n        throw new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout value: \" + timeoutStr);\n    }\n\n    int timeoutMs = parseTimeoutValue(parsed.getLeft());\n    if (timeoutMs <= 0) {\n        throw new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout value: \" + timeoutStr);\n    }\n\n    if (timeoutMs > MAX_QUERY_TIMEOUT_SECONDS * 1000) {\n        throw new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"Query timeout cannot exceed \" + MAX_QUERY_TIMEOUT_SECONDS + \" seconds\");\n    }\n\n    if (StringUtils.isNotBlank(parsed.getRight())) {\n        return convertToMillis(parsed.getRight(), timeoutMs);\n    }\n\n    return timeoutMs;\n}", "CodeBleu_score": 41.829230433762696}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (StringUtils.isBlank(timeoutStr)) {\n        return DEFAULT_QUERY_TIMEOUT_MILLIS;\n    }\n\n    Pair<Integer, String> timeout = extractTimeout(timeoutStr);\n    if (timeout.getLeft() == null) {\n        throw new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout: \" + timeoutStr);\n    }\n\n    int timeoutMs = convertToMs(timeout.getLeft(), timeout.getRight());\n    if (timeoutMs > MAX_QUERY_TIMEOUT_SECONDS * 1000) {\n        throw new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"Query timeout must be less than \" + MAX_QUERY_TIMEOUT_SECONDS + \" seconds\");\n    }\n\n    return timeoutMs;\n}", "CodeBleu_score": 38.05785607176445}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (StringUtils.isBlank(timeoutStr)) {\n        return DEFAULT_QUERY_TIMEOUT_MILLIS;\n    }\n\n    Pair<Long, String> timeoutPair = parseTimeout(timeoutStr);\n    long timeout = timeoutPair.getLeft();\n    String unit = timeoutPair.getRight();\n\n    if (!unit.equals(\"ms\")) {\n        throw new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid unit \" + unit + \" for query timeout\");\n    }\n\n    if (timeout > MAX_QUERY_TIMEOUT_SECONDS * 1000) {\n        throw new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"Query timeout \" + timeoutStr + \" exceeds maximum allowed timeout of \" + MAX_QUERY_TIMEOUT_SECONDS + \" seconds\");\n    }\n\n    return (int) timeout;\n}", "CodeBleu_score": 36.048424502313615}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn datasourceService.getByApplicationId(application.getApplicationId())\n            .flatMap(datasources -> {\n                if (datasources.isEmpty()) {\n                    return Mono.error(ofError(TEMPLATE_NOT_CORRECT, \"TEMPLATE_NOT_CORRECT\"));\n                }\n                return datasourceService.create(datasources.stream()\n                                .map(datasource -> {\n                                    Datasource copiedDatasource = Datasource.builder()\n                                            .name(datasource.getName())\n                                            .applicationId(application.getApplicationId())\n                                            .organizationId(currentOrganizationId)\n                                            .pluginId(datasource.getPluginId())\n                                            .datasourceConfiguration(datasource.getDatasourceConfiguration())\n                                            .datasourceAuthentication(datasource.getDatasourceAuthentication())\n                                            .datasourceProperties(datasource.getDatasourceProperties())\n                                            .datasourceConfigurationProperties(datasource.getDatasourceConfigurationProperties())\n                                            .datasourceConfigurationId(datasource.getDatasourceConfigurationId())\n                                            .datasourceAuthenticationId(datasource.getDatasourceAuthenticationId())\n                                            .datasourcePropertiesId(datasource.getDatasourcePropertiesId())\n                                            .datasourceConfigurationPropertiesId(datasource.getDatasourceConfigurationPropertiesId())\n                                            .pluginDatasourceConfiguration(datasource.getPluginDatasourceConfiguration())\n                                            .pluginDatasourceAuthentication(datasource.getPluginDatasourceAuthentication())\n                                            .pluginDatasourceProperties(datasource.getPluginDatasourceProperties())\n                                            .pluginDatasourceConfigurationProperties(datasource.getPluginDatasourceConfigurationProperties())\n                                            .datasourceCreationSource(DatasourceCreationSource.TEMPLATE)\n                                            .build();\n                                    return copiedDatasource;\n                                })\n                                .collect(Collectors.toList()),\n                        visitorId);\n            })\n            .map(datasources -> {\n                List<Pair<String, String>> datasourceIdMap = new ArrayList<>();\n                for (Datas", "CodeBleu_score": 36.07044146907712}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn datasourceService.findByApplicationId(application.getId())\n            .flatMap(datasources -> datasourceService.copyDatasources(datasources, currentOrganizationId, visitorId))\n            .map(datasources -> datasources.stream()\n                    .map(datasource -> Pair.of(datasource.getId(), datasource.getId()))\n                    .collect(Collectors.toList()))\n            .defaultIfEmpty(Mono.error(ofError(TEMPLATE_NOT_CORRECT, \"TEMPLATE_NOT_CORRECT\")));\n}", "CodeBleu_score": 32.75254394423441}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn datasourceService.getByApplicationId(application.getApplicationId())\n                .collectList()\n                .flatMap(datasources -> {\n                    List<String> datasourceIds = datasources.stream()\n                            .map(Datasource::getId)\n                            .collect(Collectors.toList());\n                    return datasourceService.getByQueryIds(datasourceIds)\n                            .collectList();\n                })\n                .flatMap(datasources -> {\n                    List<String> datasourceIds = datasources.stream()\n                            .map(Datasource::getId)\n                            .collect(Collectors.toList());\n                    return datasourceService.getByQueryIds(datasourceIds)\n                            .collectList();\n                })\n                .flatMap(datasources -> {\n                    List<String> datasourceIds = datasources.stream()\n                            .map(Datasource::getId)\n                            .collect(Collectors.toList());\n                    return datasourceService.getByQueryIds(datasourceIds)\n                            .collectList();\n                })\n                .flatMap(datasources -> {\n                    List<String> datasourceIds = datasources.stream()\n                            .map(Datasource::getId)\n                            .collect(Collectors.toList());\n                    return datasourceService.getByQueryIds(datasourceIds)\n                            .collectList();\n                })\n                .flatMap(datasources -> {\n                    List<String> datasourceIds = datasources.stream()\n                            .map(Datasource::getId)\n                            .collect(Collectors.toList());\n                    return datasourceService.getByQueryIds(datasourceIds)\n                            .collectList();\n                })\n                .flatMap(datasources -> {\n                    List<String> datasourceIds = datasources.stream()\n                            .map(Datasource::getId)\n                            .collect(Collectors.toList());\n                    return datasourceService.getByQueryIds(datasourceIds)\n                            .collectList();\n                })\n                .flatMap(datasources -> {\n                    List<String> datasourceIds =", "CodeBleu_score": 33.91962046757332}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.getById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.getDatasourceCreationSource() == DatasourceCreationSource.QUICK_API_V1 || datasource.getDatasourceCreationSource() == DatasourceCreationSource.OPENBLOCKS_API_V1) {\n                    return Mono.just(datasource.getId());\n                }\n                if (datasource.getDatasourceCreationSource() == DatasourceCreationSource.SYSTEM_DEFAULT) {\n                    return Mono.just(datasource.getId());\n                }\n                return datasourceService.create(datasource.getOrganizationId(), organizationId, datasource.getPluginId(), datasource.getDatasourceConfiguration(), visitorId);\n            });\n}", "CodeBleu_score": 59.32196379978103}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.getById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.getCreationSource() == DatasourceCreationSource.SYSTEM_DEFAULT) {\n                    return Mono.just(datasourceId);\n                } else if (datasource.getCreationSource() == DatasourceCreationSource.QUICK_API) {\n                    return Mono.just(datasource.getId());\n                } else if (datasource.getCreationSource() == DatasourceCreationSource.OPEN_BLOCKS_API) {\n                    return Mono.just(datasource.getId());\n                } else {\n                    return datasourceService.create(datasource.getOrganizationId(), datasource.getPluginId(), datasource.getDatasourceConfiguration(), datasource.getDatasourceName(), organizationId, visitorId);\n                }\n            });\n}", "CodeBleu_score": 54.54908445933212}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.getById(datasourceId)\n            .switchIfEmpty(deferredError(TEMPLATE_NOT_EXIST, \"TEMPLATE_NOT_EXIST\"))\n            .flatMap(datasource -> {\n                if (datasource.getCreationSource() == DatasourceCreationSource.SYSTEM_DEFAULT) {\n                    return Mono.just(datasource.getId());\n                }\n                if (datasource.getCreationSource() == DatasourceCreationSource.QUICK_API) {\n                    return Mono.just(datasource.getId());\n                }\n                if (datasource.getCreationSource() == DatasourceCreationSource.OPENBLOCKS_API) {\n                    return Mono.just(datasource.getId());\n                }\n                return datasourceService.create(datasource, organizationId, visitorId);\n            });\n}", "CodeBleu_score": 60.68005616360246}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t// TODO: 2020/12/11 1. \u4e0a\u4f20\u6587\u4ef6\n    // TODO: 2020/12/11 2. \u5220\u9664\u65e7\u7684\u6587\u4ef6\n    // TODO: 2020/12/11 3. \u66f4\u65b0\u7528\u6237\u4fe1\u606f\n\n    return Mono.just(true);\n}", "CodeBleu_score": 6.609969876846187}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\tif (filePart == null) {\n        return Mono.error(new BizException(BizError.INVALID_PARAMETER, \"INVALID_PARAMETER\", FieldName.FILE));\n    }\n\n    if (filePart.contentLength() > avatarMaxSizeInKb.get()) {\n        return Mono.error(new BizException(BizError.INVALID_PARAMETER, \"INVALID_PARAMETER\", FieldName.FILE, \"File size exceeded the maximum allowed size\"));\n    }\n\n    if (user.getAvatar() != null) {\n        assetService.delete(user.getAvatar().getId());\n    }\n\n    return assetService.upload(filePart)\n            .map(asset -> {\n                user.setAvatar(asset);\n                return repository.save(user);\n            })\n            .thenReturn(true);\n}", "CodeBleu_score": 30.015293364759238}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\treturn assetService.saveAsset(filePart, user.getId(), avatarMaxSizeInKb.get())\n            .flatMap(asset -> {\n                if (user.getAvatar() != null) {\n                    return assetService.deleteAsset(user.getAvatar().getId());\n                }\n                return Mono.empty();\n            })\n            .then(repository.save(user))\n            .map(it -> true);\n}", "CodeBleu_score": 28.43429828779671}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tUser user = new User();\n    user.setName(authUser.getUid());\n    user.setState(UserState.NEW);\n    user.setEnabled(true);\n    user.setAvatar(authUser.getAvatar());\n    user.setConnections(authUser.getConnections());\n    if (authUser.getSource().equals(AuthSourceConstants.EMAIL)) {\n        user.setPassword(encryptionService.encrypt(authUser.getPassword()));\n    }\n    return create(user);\n}", "CodeBleu_score": 35.85951349596852}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tUser user = new User();\n    user.setName(authUser.getName());\n    user.setState(UserState.NEW);\n    user.setEnabled(true);\n    user.setAvatar(authUser.getAvatar());\n    user.setConnections(List.of(new Connection(authUser.getSource(), authUser.getUid())));\n    user.setNew(true);\n    if (authUser.getSource().equals(AuthSourceConstants.EMAIL) && authUser.getPassword() != null) {\n        user.setPassword(encryptionService.encrypt(authUser.getPassword()));\n    }\n    return create(user);\n}", "CodeBleu_score": 44.158366354806056}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tUser user = new User();\n    user.setName(authUser.getName());\n    user.setState(UserState.NEW);\n    user.setEnabled(true);\n    user.setAvatar(authUser.getAvatar());\n    user.setConnections(authUser.getConnections());\n    user.setLastLogin(authUser.getLastLogin());\n    user.setLastLoginIp(authUser.getLastLoginIp());\n    user.setLastLoginDevice(authUser.getLastLoginDevice());\n    user.setCreatedBy(authUser.getCreatedBy());\n    user.setCreatedAt(authUser.getCreatedAt());\n    user.setUpdatedBy(authUser.getUpdatedBy());\n    user.setUpdatedAt(authUser.getUpdatedAt());\n    user.setLastUpdatedBy(authUser.getLastUpdatedBy());\n    user.setLastUpdatedAt(authUser.getLastUpdatedAt());\n    user.setLastUpdatedBy(authUser.getLastUpdatedBy());\n    user.setLastUpdatedAt(authUser.getLastUpdatedAt());\n    if (authUser.getSource().equals(AuthSourceConstants.EMAIL) && authUser.getContext() != null && authUser.getContext().getPassword() != null) {\n        user.setPassword(encryptionService.encrypt(authUser.getContext().getPassword()));\n    }\n    return create(user);\n}", "CodeBleu_score": 45.3103045363151}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\tjavax.annotation.PostConstruct;\n", "CodeBleu_score": 5.152773031787983}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\tjavax.annotation.PostConstruct;\n", "CodeBleu_score": 5.152773031787983}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\tjavax.annotation.PostConstruct;\n", "CodeBleu_score": 5.152773031787983}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\tedUserInfo;", "CodeBleu_score": 6.132173832970684}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\tedUserInfo;", "CodeBleu_score": 6.132173832970684}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\tedUserInfo;", "CodeBleu_score": 6.132173832970684}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t> createNewUserByAuthUser(AuthUser authUser) {\n        User newUser = new User();\n        newUser.setName(authUser.getUsername());\n        newUser.setState(UserState.ACTIVATED);\n        newUser.setIsEnabled(true);\n        newUser.setTpAvatarLink(authUser.getAvatar());\n        if (AuthSourceConstants.EMAIL.equals(authUser.getSource())\n                && authUser.getAuthContext() instanceof FormAuthRequestContext formAuthRequestContext) {\n            newUser.setPassword(encryptionService.encryptPassword(formAuthRequestContext.getPassword()));\n        }\n        Set<Connection> connections = newHashSet();\n        Connection connection = authUser.toAuthConnection();\n        connections.add(connection);\n        newUser.setConnections(connections);\n        newUser.setIsNewUser(true);\n        return create(newUser);\n    }\n\n    @Override\n    public Mono<Void> getUserAvatar(ServerWebExchange exchange, String userId) {\n        return findById(userId)\n                .flatMap(user -> assetService.makeImageResponse(exchange, user.getAvatar()));\n    }\n\n    @Override\n    public Mono<Boolean> bindEmail(User user, String email) {\n        Connection connection = Connection.builder()\n                .source(AuthSourceConstants.EMAIL)\n                .name(email)\n                .rawId(email)\n                .build();\n        user.getConnections().add(connection);\n        return repository.save(user)\n                .then(Mono.just(true))\n                .onErrorResume(throwable -> {\n                    if (throwable instanceof DuplicateKeyException) {\n                        return Mono.error(new BizException(BizError.ALREADY_BIND, \\\"ALREADY_BIND\\\", email, \\\"\\\"));\n                    }\n                    return Mono.error(throwable);\n                });\n    }\n\n    @Override\n    public Mono<Boolean> addNewConnection(String userId, Connection connection) {\n        return findById(userId)\n                .doOnNext(user -> user.getConnections().add(connection))\n                .flatMap(repository::save)\n                .then(Mono.just(true));\n    }\n\n    @Override\n    public Mono<Void> deleteProfilePhoto(User visitor) {\n        String userAvatar = visitor.getAvatar();\n        visitor.setAvatar(null);\n        return repository.save(visitor).thenReturn(userAvatar)\n                .flatMap(assetService::remove);\n    }\n\n    @Override\n    public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword) {\n        return findById(userId)\n                .<User> handle((user, sink) -> {\n                    String password = user.getPassword();\n                    if (StringUtils.isBlank(password)) {\n                        sink.error(ofException(BizError.INVALID_PASSWORD, \\\"INVALID_PASSWORD\\\"));\n                        return;\n                    }\n                    String originalEncryptPassword = user.getPassword();\n                    if (!encryptionService.matchPassword(oldPassword, originalEncryptPassword)) {\n                        sink.error(ofException(BizError.INVALID_PASSWORD, \\\"INVALID_PASSWORD\\\"));\n                        return;\n                    }\n                    user.setPassword(encryptionService.encryptPassword(newPassword));\n                    sink.next(user);\n                })\n                .flatMap(repository::save)\n                .thenReturn(true);\n    }\n\n    @Override\n    public Mono<String> resetPassword(String userId) {\n        return findById(userId)\n                .flatMap(user -> {\n                    String password = user.getPassword();\n                    if (StringUtils.isBlank(password)) {\n                        return ofError(BizError.INVALID_PASSWORD, \\\"PASSWORD_NOT_SET_YET\\\");\n                    }\n\n                    String randomStr = generateNewRandomPwd();\n                    user.setPassword(encryptionService.encryptPassword(randomStr));\n                    return repository.save(user)\n                            .thenReturn(randomStr);\n                });\n    }\n\n    @SuppressWarnings(\\\"SpellCheckingInspection\\\")\n    @Nonnull\n    private static String generateNewRandomPwd() {\n        char[] possibleCharacters = (\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~`!@#$%^&*()-_=+[{]}<>?\\\")\n                .toCharArray();\n        return RandomStringUtils.random(12, 0, possibleCharacters.length - 1,\n                false, false, possibleCharacters, new SecureRandom());\n    }\n\n    @Override\n    public Mono<Boolean> setPassword(String userId, String password) {\n        return findById(userId)\n                .map(user -> {\n                    user.setPassword(encryptionService.encryptPassword(password));\n                    return user;\n                })\n                .flatMap(repository::save)\n                .thenReturn(true);\n    }\n\n\n    @Override\n    public Mono<UserDetail> buildUserDetail(User user, boolean withoutDynamicGroups) {\n        if (user.isAnonymous()) {\n            return Mono.just(ANONYMOUS_CURRENT_USER);\n        }\n        return Mono.deferContextual(contextView -> {\n            String ip = contextView.getOrDefault(CLIENT_IP, \\\"\\\");\n            Locale locale = LocaleUtils.getLocale(contextView);\n            return orgMemberService.getCurrentOrgMember(user.getId())\n                    .zipWhen(orgMember -> buildUserDetailGroups(user.getId(), orgMember, withoutDynamicGroups, locale))\n                    .map(tuple2 -> {\n                        OrgMember orgMember = tuple2.getT1();\n                        List<Map<String, String>> groups = tuple2.getT2();\n                        return UserDetail.builder()\n                                .id(user.getId())\n                                .name(user.getName())\n                                .avatarUrl(user.getAvatarUrl())\n                                .email(convertEmail(user.getConnections()))\n                                .ip(ip)\n                                .groups(groups)\n                                .extra(getUserDetailExtra(user, orgMember.getOrgId()))\n                                .build();\n                    });\n        });\n    }\n\n    /**\n     * In enterprise mode, user can be deleted and then related connections should be released here by appending a timestamp after the source field.\n     */\n    @Override\n    public Mono<Boolean> markUserDeletedAndInvalidConnectionsAtEnterpriseMode(String userId) {\n        if (commonConfig.getWorkspace().getMode() == WorkspaceMode.SAAS) {\n            return Mono.just(false);\n        }\n        return repository.findById(userId)\n                .flatMap(user -> {\n                    user.markAsDeleted();\n                    return mongoUpsertHelper.updateById(user, userId);\n                });\n    }\n\n    protected Map<String, Object> getUserDetailExtra(User user, String orgId) {\n        return Optional.ofNullable(user.getOrgTransformedUserInfo())\n                .map(orgTransformedUserInfo -> orgTransformedUserInfo.get(orgId))\n                .map(TransformedUserInfo::extra)\n                .orElse(convertConnections(user.getConnections()));\n    }\n\n\n\n", "CodeBleu_score": 28.38266438446559}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t> createNewUserByAuthUser(AuthUser authUser) {\n        User newUser = new User();\n        newUser.setName(authUser.getUsername());\n        newUser.setState(UserState.ACTIVATED);\n        newUser.setIsEnabled(true);\n        newUser.setTpAvatarLink(authUser.getAvatar());\n        if (AuthSourceConstants.EMAIL.equals(authUser.getSource())\n                && authUser.getAuthContext() instanceof FormAuthRequestContext formAuthRequestContext) {\n            newUser.setPassword(encryptionService.encryptPassword(formAuthRequestContext.getPassword()));\n        }\n        Set<Connection> connections = newHashSet();\n        Connection connection = authUser.toAuthConnection();\n        connections.add(connection);\n        newUser.setConnections(connections);\n        newUser.setIsNewUser(true);\n        return create(newUser);\n    }\n\n    @Override\n    public Mono<Void> getUserAvatar(ServerWebExchange exchange, String userId) {\n        return findById(userId)\n                .flatMap(user -> assetService.makeImageResponse(exchange, user.getAvatar()));\n    }\n\n    @Override\n    public Mono<Boolean> bindEmail(User user, String email) {\n        Connection connection = Connection.builder()\n                .source(AuthSourceConstants.EMAIL)\n                .name(email)\n                .rawId(email)\n                .build();\n        user.getConnections().add(connection);\n        return repository.save(user)\n                .then(Mono.just(true))\n                .onErrorResume(throwable -> {\n                    if (throwable instanceof DuplicateKeyException) {\n                        return Mono.error(new BizException(BizError.ALREADY_BIND, \\\"ALREADY_BIND\\\", email, \\\"\\\"));\n                    }\n                    return Mono.error(throwable);\n                });\n    }\n\n    @Override\n    public Mono<Boolean> addNewConnection(String userId, Connection connection) {\n        return findById(userId)\n                .doOnNext(user -> user.getConnections().add(connection))\n                .flatMap(repository::save)\n                .then(Mono.just(true));\n    }\n\n    @Override\n    public Mono<Void> deleteProfilePhoto(User visitor) {\n        String userAvatar = visitor.getAvatar();\n        visitor.setAvatar(null);\n        return repository.save(visitor).thenReturn(userAvatar)\n                .flatMap(assetService::remove);\n    }\n\n    @Override\n    public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword) {\n        return findById(userId)\n                .<User> handle((user, sink) -> {\n                    String password = user.getPassword();\n                    if (StringUtils.isBlank(password)) {\n                        sink.error(ofException(BizError.INVALID_PASSWORD, \\\"INVALID_PASSWORD\\\"));\n                        return;\n                    }\n                    String originalEncryptPassword = user.getPassword();\n                    if (!encryptionService.matchPassword(oldPassword, originalEncryptPassword)) {\n                        sink.error(ofException(BizError.INVALID_PASSWORD, \\\"INVALID_PASSWORD\\\"));\n                        return;\n                    }\n                    user.setPassword(encryptionService.encryptPassword(newPassword));\n                    sink.next(user);\n                })\n                .flatMap(repository::save)\n                .thenReturn(true);\n    }\n\n    @Override\n    public Mono<String> resetPassword(String userId) {\n        return findById(userId)\n                .flatMap(user -> {\n                    String password = user.getPassword();\n                    if (StringUtils.isBlank(password)) {\n                        return ofError(BizError.INVALID_PASSWORD, \\\"PASSWORD_NOT_SET_YET\\\");\n                    }\n\n                    String randomStr = generateNewRandomPwd();\n                    user.setPassword(encryptionService.encryptPassword(randomStr));\n                    return repository.save(user)\n                            .thenReturn(randomStr);\n                });\n    }\n\n    @SuppressWarnings(\\\"SpellCheckingInspection\\\")\n    @Nonnull\n    private static String generateNewRandomPwd() {\n        char[] possibleCharacters = (\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~`!@#$%^&*()-_=+[{]}<>?\\\")\n                .toCharArray();\n        return RandomStringUtils.random(12, 0, possibleCharacters.length - 1,\n                false, false, possibleCharacters, new SecureRandom());\n    }\n\n    @Override\n    public Mono<Boolean> setPassword(String userId, String password) {\n        return findById(userId)\n                .map(user -> {\n                    user.setPassword(encryptionService.encryptPassword(password));\n                    return user;\n                })\n                .flatMap(repository::save)\n                .thenReturn(true);\n    }\n\n\n    @Override\n    public Mono<UserDetail> buildUserDetail(User user, boolean withoutDynamicGroups) {\n        if (user.isAnonymous()) {\n            return Mono.just(ANONYMOUS_CURRENT_USER);\n        }\n        return Mono.deferContextual(contextView -> {\n            String ip = contextView.getOrDefault(CLIENT_IP, \\\"\\\");\n            Locale locale = LocaleUtils.getLocale(contextView);\n            return orgMemberService.getCurrentOrgMember(user.getId())\n                    .zipWhen(orgMember -> buildUserDetailGroups(user.getId(), orgMember, withoutDynamicGroups, locale))\n                    .map(tuple2 -> {\n                        OrgMember orgMember = tuple2.getT1();\n                        List<Map<String, String>> groups = tuple2.getT2();\n                        return UserDetail.builder()\n                                .id(user.getId())\n                                .name(user.getName())\n                                .avatarUrl(user.getAvatarUrl())\n                                .email(convertEmail(user.getConnections()))\n                                .ip(ip)\n                                .groups(groups)\n                                .extra(getUserDetailExtra(user, orgMember.getOrgId()))\n                                .build();\n                    });\n        });\n    }\n\n    /**\n     * In enterprise mode, user can be deleted and then related connections should be released here by appending a timestamp after the source field.\n     */\n    @Override\n    public Mono<Boolean> markUserDeletedAndInvalidConnectionsAtEnterpriseMode(String userId) {\n        if (commonConfig.getWorkspace().getMode() == WorkspaceMode.SAAS) {\n            return Mono.just(false);\n        }\n        return repository.findById(userId)\n                .flatMap(user -> {\n                    user.markAsDeleted();\n                    return mongoUpsertHelper.updateById(user, userId);\n                });\n    }\n\n    protected Map<String, Object> getUserDetailExtra(User user, String orgId) {\n        return Optional.ofNullable(user.getOrgTransformedUserInfo())\n                .map(orgTransformedUserInfo -> orgTransformedUserInfo.get(orgId))\n                .map(TransformedUserInfo::extra)\n                .orElse(convertConnections(user.getConnections()));\n    }\n\n\n\n", "CodeBleu_score": 28.38266438446559}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t> createNewUserByAuthUser(AuthUser authUser) {\n        User newUser = new User();\n        newUser.setName(authUser.getUsername());\n        newUser.setState(UserState.ACTIVATED);\n        newUser.setIsEnabled(true);\n        newUser.setTpAvatarLink(authUser.getAvatar());\n        if (AuthSourceConstants.EMAIL.equals(authUser.getSource())\n                && authUser.getAuthContext() instanceof FormAuthRequestContext formAuthRequestContext) {\n            newUser.setPassword(encryptionService.encryptPassword(formAuthRequestContext.getPassword()));\n        }\n        Set<Connection> connections = newHashSet();\n        Connection connection = authUser.toAuthConnection();\n        connections.add(connection);\n        newUser.setConnections(connections);\n        newUser.setIsNewUser(true);\n        return create(newUser);\n    }\n\n    @Override\n    public Mono<Void> getUserAvatar(ServerWebExchange exchange, String userId) {\n        return findById(userId)\n                .flatMap(user -> assetService.makeImageResponse(exchange, user.getAvatar()));\n    }\n\n    @Override\n    public Mono<Boolean> bindEmail(User user, String email) {\n        Connection connection = Connection.builder()\n                .source(AuthSourceConstants.EMAIL)\n                .name(email)\n                .rawId(email)\n                .build();\n        user.getConnections().add(connection);\n        return repository.save(user)\n                .then(Mono.just(true))\n                .onErrorResume(throwable -> {\n                    if (throwable instanceof DuplicateKeyException) {\n                        return Mono.error(new BizException(BizError.ALREADY_BIND, \\\"ALREADY_BIND\\\", email, \\\"\\\"));\n                    }\n                    return Mono.error(throwable);\n                });\n    }\n\n    @Override\n    public Mono<Boolean> addNewConnection(String userId, Connection connection) {\n        return findById(userId)\n                .doOnNext(user -> user.getConnections().add(connection))\n                .flatMap(repository::save)\n                .then(Mono.just(true));\n    }\n\n    @Override\n    public Mono<Void> deleteProfilePhoto(User visitor) {\n        String userAvatar = visitor.getAvatar();\n        visitor.setAvatar(null);\n        return repository.save(visitor).thenReturn(userAvatar)\n                .flatMap(assetService::remove);\n    }\n\n    @Override\n    public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword) {\n        return findById(userId)\n                .<User> handle((user, sink) -> {\n                    String password = user.getPassword();\n                    if (StringUtils.isBlank(password)) {\n                        sink.error(ofException(BizError.INVALID_PASSWORD, \\\"INVALID_PASSWORD\\\"));\n                        return;\n                    }\n                    String originalEncryptPassword = user.getPassword();\n                    if (!encryptionService.matchPassword(oldPassword, originalEncryptPassword)) {\n                        sink.error(ofException(BizError.INVALID_PASSWORD, \\\"INVALID_PASSWORD\\\"));\n                        return;\n                    }\n                    user.setPassword(encryptionService.encryptPassword(newPassword));\n                    sink.next(user);\n                })\n                .flatMap(repository::save)\n                .thenReturn(true);\n    }\n\n    @Override\n    public Mono<String> resetPassword(String userId) {\n        return findById(userId)\n                .flatMap(user -> {\n                    String password = user.getPassword();\n                    if (StringUtils.isBlank(password)) {\n                        return ofError(BizError.INVALID_PASSWORD, \\\"PASSWORD_NOT_SET_YET\\\");\n                    }\n\n                    String randomStr = generateNewRandomPwd();\n                    user.setPassword(encryptionService.encryptPassword(randomStr));\n                    return repository.save(user)\n                            .thenReturn(randomStr);\n                });\n    }\n\n    @SuppressWarnings(\\\"SpellCheckingInspection\\\")\n    @Nonnull\n    private static String generateNewRandomPwd() {\n        char[] possibleCharacters = (\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~`!@#$%^&*()-_=+[{]}<>?\\\")\n                .toCharArray();\n        return RandomStringUtils.random(12, 0, possibleCharacters.length - 1,\n                false, false, possibleCharacters, new SecureRandom());\n    }\n\n    @Override\n    public Mono<Boolean> setPassword(String userId, String password) {\n        return findById(userId)\n                .map(user -> {\n                    user.setPassword(encryptionService.encryptPassword(password));\n                    return user;\n                })\n                .flatMap(repository::save)\n                .thenReturn(true);\n    }\n\n\n    @Override\n    public Mono<UserDetail> buildUserDetail(User user, boolean withoutDynamicGroups) {\n        if (user.isAnonymous()) {\n            return Mono.just(ANONYMOUS_CURRENT_USER);\n        }\n        return Mono.deferContextual(contextView -> {\n            String ip = contextView.getOrDefault(CLIENT_IP, \\\"\\\");\n            Locale locale = LocaleUtils.getLocale(contextView);\n            return orgMemberService.getCurrentOrgMember(user.getId())\n                    .zipWhen(orgMember -> buildUserDetailGroups(user.getId(), orgMember, withoutDynamicGroups, locale))\n                    .map(tuple2 -> {\n                        OrgMember orgMember = tuple2.getT1();\n                        List<Map<String, String>> groups = tuple2.getT2();\n                        return UserDetail.builder()\n                                .id(user.getId())\n                                .name(user.getName())\n                                .avatarUrl(user.getAvatarUrl())\n                                .email(convertEmail(user.getConnections()))\n                                .ip(ip)\n                                .groups(groups)\n                                .extra(getUserDetailExtra(user, orgMember.getOrgId()))\n                                .build();\n                    });\n        });\n    }\n\n    /**\n     * In enterprise mode, user can be deleted and then related connections should be released here by appending a timestamp after the source field.\n     */\n    @Override\n    public Mono<Boolean> markUserDeletedAndInvalidConnectionsAtEnterpriseMode(String userId) {\n        if (commonConfig.getWorkspace().getMode() == WorkspaceMode.SAAS) {\n            return Mono.just(false);\n        }\n        return repository.findById(userId)\n                .flatMap(user -> {\n                    user.markAsDeleted();\n                    return mongoUpsertHelper.updateById(user, userId);\n                });\n    }\n\n    protected Map<String, Object> getUserDetailExtra(User user, String orgId) {\n        return Optional.ofNullable(user.getOrgTransformedUserInfo())\n                .map(orgTransformedUserInfo -> orgTransformedUserInfo.get(orgId))\n                .map(TransformedUserInfo::extra)\n                .orElse(convertConnections(user.getConnections()));\n    }\n\n\n\n", "CodeBleu_score": 28.38266438446559}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\tUserStatus userStatus = UserStatus.builder()\n            .id(userId)\n            .hasShowNewUserGuidance(true)\n            .build();\n\n    return mongoUpsertHelper.upsert(\n            repository,\n            userStatus,\n            UserStatus::getId,\n            Update.update(\"hasShowNewUserGuidance\", true)\n    );\n}", "CodeBleu_score": 73.03468705223437}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\tUserStatus userStatus = UserStatus.builder()\n            .id(userId)\n            .hasShowNewUserGuidance(true)\n            .build();\n\n    return mongoUpsertHelper.upsert(\n            UserStatus.class,\n            userStatus,\n            Update.update(\"hasShowNewUserGuidance\", true),\n            userId)\n            .thenReturn(true);\n}", "CodeBleu_score": 74.50127771232687}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\treturn findByUserId(userId)\n            .map(userStatus -> userStatus.toBuilder()\n                    .hasShowNewUserGuidance(true)\n                    .status(UserStatusType.ACTIVE)\n                    .build())\n            .flatMap(userStatus -> mongoUpsertHelper.upsert(repository, userStatus, userStatus.getId()));\n}", "CodeBleu_score": 31.282606236267128}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\"nil predicatePartition\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"nil predicateValue\")\n\t}\n\n\tc.mu.RLock()\n\tdefer c.mu.RUnlock()\n\n\trunGroup := rungroup.New()\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\trunGroup.Add(func() error {\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t\treturn nil\n\t\t\t})\n\t\t}\n\t}\n\trunGroup.Wait()\n}", "CodeBleu_score": 41.583823357956845}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\"nil predicatePartition\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"nil predicateValue\")\n\t}\n\n\tc.mu.RLock()\n\tdefer c.mu.RUnlock()\n\n\tc.infol.Debugf(\"Clearing cache matching predicate\")\n\n\trunGroup := rungroup.New()\n\n\tfor partitionName, partition := range c.partitions {\n\t\tif !predicatePartition(partitionName, partition) {\n\t\t\tcontinue\n\t\t}\n\n\t\trunGroup.Add(func() error {\n\t\t\tpartition.ClearMatching(predicateValue)\n\t\t\treturn nil\n\t\t})\n\t}\n\n\trunGroup.Wait()\n}", "CodeBleu_score": 43.2281538519059}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\"nil predicatePartition\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"nil predicateValue\")\n\t}\n\n\tc.mu.RLock()\n\tdefer c.mu.RUnlock()\n\n\t// Create a run group to handle clearing matching entries across multiple partitions concurrently.\n\tvar r rungroup.Group\n\n\tfor k, p := range c.partitions {\n\t\tif !predicatePartition(k, p) {\n\t\t\tcontinue\n\t\t}\n\n\t\tr.Add(func() error {\n\t\t\tp.ClearMatching(predicateValue)\n\t\t\treturn nil\n\t\t})\n\t}\n\n\t// Wait for all tasks to complete before returning.\n\tif err := r.Wait(); err != nil {\n\t\tpanic(err)\n\t}\n}", "CodeBleu_score": 46.72398268511386}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\tregexp\\\"\n\t\\\"runtime\\\"\n\t\\\"sync\\\"\n\t\\\"time\\\"\n\n\t\\\"github.com/bep/lazycache\\\"\n\t\\\"github.com/bep/logg\\\"\n\t\\\"github.com/gohugoio/hugo/common/collections\\\"\n\t\\\"github.com/gohugoio/hugo/common/herrors\\\"\n\t\\\"github.com/gohugoio/hugo/common/loggers\\\"\n\t\\\"github.com/gohugoio/hugo/common/paths\\\"\n\t\\\"github.com/gohugoio/hugo/common/rungroup\\\"\n\t\\\"github.com/gohugoio/hugo/config\\\"\n\t\\\"github.com/gohugoio/hugo/helpers\\\"\n\t\\\"github.com/gohugoio/hugo/identity\\\"\n\t\\\"github.com/gohugoio/hugo/resources/resource\\\"", "CodeBleu_score": 25.685177164742335}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\tregexp\\\"\n\t\\\"runtime\\\"\n\t\\\"sync\\\"\n\t\\\"time\\\"\n\n\t\\\"github.com/bep/lazycache\\\"\n\t\\\"github.com/bep/logg\\\"\n\t\\\"github.com/gohugoio/hugo/common/collections\\\"\n\t\\\"github.com/gohugoio/hugo/common/herrors\\\"\n\t\\\"github.com/gohugoio/hugo/common/loggers\\\"\n\t\\\"github.com/gohugoio/hugo/common/paths\\\"\n\t\\\"github.com/gohugoio/hugo/common/rungroup\\\"\n\t\\\"github.com/gohugoio/hugo/config\\\"\n\t\\\"github.com/gohugoio/hugo/helpers\\\"\n\t\\\"github.com/gohugoio/hugo/identity\\\"\n\t\\\"github.com/gohugoio/hugo/resources/resource\\\"", "CodeBleu_score": 25.685177164742335}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\tregexp\\\"\n\t\\\"runtime\\\"\n\t\\\"sync\\\"\n\t\\\"time\\\"\n\n\t\\\"github.com/bep/lazycache\\\"\n\t\\\"github.com/bep/logg\\\"\n\t\\\"github.com/gohugoio/hugo/common/collections\\\"\n\t\\\"github.com/gohugoio/hugo/common/herrors\\\"\n\t\\\"github.com/gohugoio/hugo/common/loggers\\\"\n\t\\\"github.com/gohugoio/hugo/common/paths\\\"\n\t\\\"github.com/gohugoio/hugo/common/rungroup\\\"\n\t\\\"github.com/gohugoio/hugo/config\\\"\n\t\\\"github.com/gohugoio/hugo/helpers\\\"\n\t\\\"github.com/gohugoio/hugo/identity\\\"\n\t\\\"github.com/gohugoio/hugo/resources/resource\\\"", "CodeBleu_score": 25.685177164742335}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\tMap<String, Object> map = new HashMap<>();\n    Mono<Connection> connectionMono = this.connectionFactory.create();\n    connectionMono.doOnNext(connection -> {\n        ConnectionMetadata metadata = connection.getMetadata();\n        if (Objects.nonNull(metadata)) {\n            map.put(\"database.productName\", metadata.getName());\n            map.put(\"database.productVersion\", metadata.getVersion());\n        }\n    }).subscribe();\n    return map;\n}", "CodeBleu_score": 51.18927896408033}, {"code": "public Map<String, Object> contributorMap(){\n\tMap<String, Object> map = new HashMap<>();\n    try {\n        Connection connection = connectionFactory.create().block();\n        if (Objects.nonNull(connection)) {\n            ConnectionMetadata metadata = connection.getMetadata().block();\n            if (Objects.nonNull(metadata)) {\n                map.put(\"productName\", metadata.getDatabaseProductName());\n                map.put(\"productVersion\", metadata.getDatabaseProductVersion());\n            }\n        }\n    } catch (Exception e) {\n        // ignore\n    }\n    return map;\n}", "CodeBleu_score": 49.73481144652593}, {"code": "public Map<String, Object> contributorMap(){\n\tMap<String, Object> map = new HashMap<>();\n    ConnectionMetadata metadata = getConnectionMetadata();\n    if (Objects.nonNull(metadata)) {\n        map.put(\"database.productName\", metadata.getDatabaseProductName());\n        map.put(\"database.productVersion\", metadata.getDatabaseProductVersion());\n    }\n    return map;\n}", "CodeBleu_score": 50.06934191681537}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tvar user = SystemSetting.get(configMap, User.GROUP, User.class);\n    if (user == null) {\n        info.setAllowRegistration(false);\n        info.setMustVerifyEmailOnRegistration(false);\n    } else {\n        info.setAllowRegistration(user.getEnable() != null && user.getEnable());\n        info.setMustVerifyEmailOnRegistration(user.getMustVerifyEmail() != null && user.getMustVerifyEmail());\n    }\n}", "CodeBleu_score": 70.55110750814076}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tvar user = SystemSetting.get(configMap, User.GROUP, User.class);\n    if (user == null) {\n        info.setAllowRegistration(false);\n        info.setMustVerifyEmailOnRegistration(false);\n    } else {\n        info.setAllowRegistration(user.getEnable() != null && user.getEnable());\n        info.setMustVerifyEmailOnRegistration(user.getVerifyEmail() == null || user.getVerifyEmail());\n    }\n}", "CodeBleu_score": 70.22264432741474}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tvar user = SystemSetting.get(configMap, User.GROUP, User.class);\n    if (user == null) {\n        info.setAllowRegistration(false);\n        info.setMustVerifyEmailOnRegistration(false);\n    } else {\n        info.setAllowRegistration(user.getEnable() != null && user.getEnable());\n        info.setMustVerifyEmailOnRegistration(user.getMustVerifyEmailOnRegistration() != null && user.getMustVerifyEmailOnRegistration());\n    }\n}", "CodeBleu_score": 72.15761015137491}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\tif (context == null) {\n        return \"Restart has not been initiated.\";\n    }\n\n    log.info(\"Restarting application...\");\n\n    ThreadGroup group = new ThreadGroup(\"restart-thread-group\");\n    Thread thread = new Thread(group, () -> {\n        try {\n            Thread.sleep(500);\n        } catch (InterruptedException e) {\n            // Ignore\n        }\n        try {\n            SpringApplication application = this.application;\n            String[] args = this.args;\n            this.application = null;\n            this.args = null;\n            this.context.close();\n            this.context = null;\n            application.setAdditionalProfiles(\"restart\");\n            application.run(args);\n        } catch (Exception e) {\n            log.error(\"Restart failed.\", e);\n        }\n    });\n    thread.setContextClassLoader(Application.class.getClassLoader());\n    thread.setDaemon(false);\n    thread.start();\n\n    return \"Restarting application...\";\n}", "CodeBleu_score": 38.8660006636548}, {"code": "public Object restart(){\n\tif (context == null) {\n        return \"No application context found.\";\n    }\n\n    if (context.isActive()) {\n        return \"Application is already running.\";\n    }\n\n    // Create new thread group and thread\n    ThreadGroup threadGroup = new ThreadGroup(\"RestartThreadGroup\");\n    Thread restartThread = new Thread(threadGroup, new Runnable() {\n        @Override\n        public void run() {\n            try {\n                // Set thread as non-daemon\n                Thread.currentThread().setDaemon(false);\n\n                // Set context class loader\n                Thread.currentThread().setContextClassLoader(Application.class.getClassLoader());\n\n                // Start application\n                SpringApplication springApplication = new SpringApplication(Application.class);\n                springApplication.setApplicationContext(context);\n                springApplication.setHeadless(true);\n                springApplication.setAdditionalProfiles(\"restart\");\n                springApplication.run(args);\n            } catch (Exception e) {\n                log.error(\"Restart failed\", e);\n            } finally {\n                // Close context\n                if (context instanceof Closeable) {\n                    try {\n                        ((Closeable) context).close();\n                    } catch (IOException e) {\n                        log.error(\"Error closing application context\", e);\n                    }\n                }\n            }\n        }\n    });\n\n    // Start thread\n    restartThread.start();\n\n    return \"Restart initiated.\";\n}", "CodeBleu_score": 36.60560077890256}, {"code": "public Object restart(){\n\t// TODO: Implement this method\n    throw new UnsupportedOperationException(\"Not implemented\");\n}", "CodeBleu_score": 6.677466685903393}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\tconfigurer.customCodecs().register(new Jackson2JsonDecoder(objectMapper));\n    configurer.customCodecs().register(new Jackson2JsonEncoder(objectMapper));\n}", "CodeBleu_score": 69.69891885028045}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\tconfigurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n  configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n }", "CodeBleu_score": 71.067616333255}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\tconfigurer.customCodecs().register(new Jackson2JsonEncoder(objectMapper));\n    configurer.customCodecs().register(new Jackson2JsonDecoder(objectMapper));\n}", "CodeBleu_score": 68.57556928305367}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn route(\n            path(\"/console/**\")\n                    .and(accept(MediaType.TEXT_HTML))\n                    .and(method(HttpMethod.GET))\n                    .and(WebSocketRequestPredicate.notWebSocket()),\n            request -> ServerResponse.temporaryRedirect(URI.create(\"/console/index.html\")).build()\n    );\n}", "CodeBleu_score": 29.601693727284285}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn route(\n            path(\"/console/**\")\n                    .and(accept(MediaType.TEXT_HTML))\n                    .and(path().matches(\"(?!/console/assets/.*)\")\n                            .and(path().matches(\"(?!/console/websocket).*\")))\n                    .and(method(HttpMethod.GET)),\n            request -> ServerResponse.temporaryRedirect(URI.create(\"/console/index.html\")).build());\n}", "CodeBleu_score": 29.347114655269646}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn route(\n            path(\"/console/**\")\n                    .and(accept(MediaType.TEXT_HTML))\n                    .and(method(HttpMethod.GET))\n                    .and(WebSocketRequestPredicate.not())\n                    .and(path -> !path.startsWith(\"/console/assets/\")),\n            request -> {\n                var path = request.path().value();\n                var indexFile = \"/console/index.html\";\n                var index = path.endsWith(\"/\") ? indexFile : indexFile + \"/\";\n                return ServerResponse.temporaryRedirect(index).build();\n            }\n    );\n}", "CodeBleu_score": 34.79036087993998}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\tvar consolePredicate = method(HttpMethod.GET)\n        .and(path(\"/uc/**\").and(path(\"/uc/assets/**\").negate()))\n        .and(accept(MediaType.TEXT_HTML))\n        .and(new WebSocketRequestPredicate().negate());\n    return route(consolePredicate, request -> serveIndex(haloProp.getUc().getLocation() + \"index.html\"));\n}", "CodeBleu_score": 89.72846887404403}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\tvar ucPredicate = method(HttpMethod.GET)\n            .and(path(\"/uc/**\").and(path(\"/uc/assets/**\").negate()))\n            .and(accept(MediaType.TEXT_HTML))\n            .and(new WebSocketRequestPredicate().negate());\n    return route(ucPredicate, request -> serveIndex(haloProp.getUc().getLocation() + \"index.html\"));\n}", "CodeBleu_score": 80.83465411532913}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\tvar ucPredicate = method(HttpMethod.GET).and(path(\"/uc/**\").and(path(\"/uc/assets/**\").negate())).and(accept(MediaType.TEXT_HTML)).and(new WebSocketRequestPredicate().negate());\n    return route(ucPredicate, request -> serveIndex(haloProp.getConsole().getLocation() + \"index.html\"));\n}", "CodeBleu_score": 60.56356990427734}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\treturn new InMemoryReactiveIndexedSessionRepository(new ConcurrentHashMap<>(),\n            sessionProperties.getTimeout().getMaxInactiveInterval().getSeconds());\n}", "CodeBleu_score": 17.98969277713331}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\tvar sessionProperties = new SessionProperties();\n    var serverProperties = new ServerProperties();\n    var sessionTimeout = sessionProperties.getTimeout() == null ? serverProperties.getServlet().getSession().getTimeout() : sessionProperties.getTimeout();\n    return new InMemoryReactiveIndexedSessionRepository(new ConcurrentHashMap<>(), sessionTimeout);\n}", "CodeBleu_score": 41.311849318046015}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\tvar sessionTimeout = sessionProperties.getTimeout();\n    var serverSessionTimeout = serverProperties.getSession().getTimeout();\n    var sessionTimeoutInSeconds = sessionTimeout.toSeconds();\n    var serverSessionTimeoutInSeconds = serverSessionTimeout.toSeconds();\n    var sessionTimeoutInMinutes = sessionTimeoutInSeconds / 60;\n    var serverSessionTimeoutInMinutes = serverSessionTimeoutInSeconds / 60;\n    var sessionTimeoutInHours = sessionTimeoutInMinutes / 60;\n    var serverSessionTimeoutInHours = serverSessionTimeoutInMinutes / 60;\n    var sessionTimeoutInDays = sessionTimeoutInHours / 24;\n    var serverSessionTimeoutInDays = serverSessionTimeoutInHours / 24;\n    var sessionTimeoutInWeeks = sessionTimeoutInDays / 7;\n    var serverSessionTimeoutInWeeks = serverSessionTimeoutInDays / 7;\n    var sessionTimeoutInMonths = sessionTimeoutInWeeks / 4;\n    var serverSessionTimeoutInMonths = serverSessionTimeoutInWeeks / 4;\n    var sessionTimeoutInYears = sessionTimeoutInMonths / 12;\n    var serverSessionTimeoutInYears = serverSessionTimeoutInMonths / 12;\n    var sessionTimeoutInDecades = sessionTimeoutInYears / 10;\n    var serverSessionTimeoutInDecades = serverSessionTimeoutInYears / 10;\n\n    if (sessionTimeoutInDecades > 0) {\n        log.warn(\"Session timeout is greater than 10 years. This may result in unexpected behavior.\");\n    }\n\n    if (sessionTimeoutInYears > 0) {\n        log.warn(\"Session timeout is greater than 1 year. This may result in unexpected behavior.\");\n    }\n\n    if (sessionTimeoutInMonths > 0) {\n        log.warn(\"Session timeout is greater than 4 months. This may result in unexpected behavior.\");\n    }\n\n    if (sessionTimeoutInWeeks > 0) {\n        log.warn(\"Session timeout is greater than 1 week. This may result in unexpected behavior.\");\n    }\n\n    if (sessionTimeoutInDays > 0) {\n        log.warn(\"Session timeout is greater", "CodeBleu_score": 23.642771986895898}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tvar userDetailsService = new DefaultUserDetailService(userService, roleService);\n    userDetailsService.setEnableTwoFactor(haloProperties.getSecurity().isEnableTwoFactor());\n    return userDetailsService;\n}", "CodeBleu_score": 44.53343726644936}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tvar userDetailsService = new DefaultUserDetailService(userService, roleService);\n    userDetailsService.setEnableTwoFactorAuthentication(haloProperties.getSecurity().getTwoFactor().isEnabled());\n    return userDetailsService;\n}", "CodeBleu_score": 47.27674333232395}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService);\n    userDetailsService.setTwoFactorEnabled(haloProperties.getSecurity().isTwoFactorEnabled());\n    return userDetailsService;\n}", "CodeBleu_score": 45.6359472642066}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\treturn Comment.CommentOwner.builder()\n            .kind(\"email\")\n            .email(email != null ? email : \"\")\n            .displayName(displayName)\n            .avatar(avatar)\n            .website(website)\n            .build();\n}", "CodeBleu_score": 10.66093743070024}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\tMap<String, String> annotations = new LinkedHashMap<>();\n    if (StringUtils.isNotBlank(avatar)) {\n        annotations.put(\"avatar\", avatar);\n    }\n    if (StringUtils.isNotBlank(website)) {\n        annotations.put(\"website\", website);\n    }\n    return new Comment.CommentOwner(email, displayName, annotations);\n}", "CodeBleu_score": 37.066233512434565}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\tString email = this.email == null ? \"\" : this.email;\n    return Comment.CommentOwner.builder()\n            .email(email)\n            .displayName(this.displayName)\n            .avatar(this.avatar)\n            .website(this.website)\n            .build();\n}", "CodeBleu_score": 14.96629908910917}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tif (StringUtils.isNotBlank(commentOwner.getKind()) && commentOwner.getKind().equals(User.KIND_EMAIL)) {\n        return Optional.ofNullable(client.fetch(User.class, post.getSpec().getOwner().getName()).orElse(null))\n                .map(user -> user.getSpec().getEmail().equals(commentOwner.getName()))\n                .orElse(false);\n    }\n    return commentOwner.getName().equals(post.getSpec().getOwner().getName());\n}", "CodeBleu_score": 36.37201525441127}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tif (post.getSpec().getOwner().getKind().equals(commentOwner.getKind())) {\n        if (post.getSpec().getOwner().getKind().equals(User.USER_KIND)) {\n            return post.getSpec().getOwner().getName().equals(commentOwner.getName());\n        } else if (post.getSpec().getOwner().getKind().equals(User.EMAIL_KIND)) {\n            return client.fetch(User.class, post.getSpec().getOwner().getName()).map(user -> user.getEmail().equals(commentOwner.getName())).orElse(false);\n        }\n    }\n    return false;\n}", "CodeBleu_score": 33.558582791884085}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tif (commentOwner.getKind().equals(\"email\")) {\n        User user = client.fetch(User.class, commentOwner.getName()).orElseThrow();\n        return user.getEmail().equals(post.getSpec().getOwner().getEmail());\n    }\n    return commentOwner.getName().equals(post.getSpec().getOwner().getName());\n}", "CodeBleu_score": 44.02253066384563}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\tvar fieldSelector = labelAndFieldSelectorToListOptions(getLabelSelector(), getFieldSelector(), Comment.class);\n\n    // Build query\n    var query = and(\n        contains(Comment.METADATA_NAME, getKeyword()),\n        equal(Comment.SPEC_OWNER_KIND, getOwnerKind()),\n        equal(Comment.SPEC_OWNER_NAME, getOwnerName())\n    );\n\n    return ListOptions.builder()\n        .fieldSelector(fieldSelector)\n        .query(query)\n        .build();\n}", "CodeBleu_score": 27.520552041627056}, {"code": "public ListOptions toListOptions(){\n\tListOptions listOptions = new ListOptions();\n    listOptions.setFieldSelector(labelAndFieldSelectorToListOptions(exchange));\n\n    // Build query\n    QueryParamBuildUtil queryParamBuildUtil = new QueryParamBuildUtil();\n    queryParamBuildUtil.addQuery(contains(\"metadata.name\", getKeyword()));\n    queryParamBuildUtil.addQuery(equal(\"spec.ownerName\", getOwnerName()));\n    queryParamBuildUtil.addQuery(equal(\"spec.ownerKind\", getOwnerKind()));\n    queryParamBuildUtil.addQuery(equal(\"spec.status.isApproved\", true));\n    queryParamBuildUtil.addQuery(and(queryParamBuildUtil.getQueryList()));\n\n    listOptions.setQuery(queryParamBuildUtil.getQuery());\n\n    return listOptions;\n}", "CodeBleu_score": 23.450623223869176}, {"code": "public ListOptions toListOptions(){\n\tListOptions listOptions = new ListOptions();\n\n    // Build field query\n    listOptions.setFieldSelector(labelAndFieldSelectorToListOptions(fieldSelector, exchange));\n\n    // Build keyword query\n    String keyword = getKeyword();\n    if (StringUtils.isNotBlank(keyword)) {\n        listOptions.addCondition(contains(\"spec.content\", keyword));\n    }\n\n    // Build owner name query\n    String ownerName = getOwnerName();\n    if (StringUtils.isNotBlank(ownerName)) {\n        listOptions.addCondition(equal(\"spec.ownerName\", ownerName));\n    }\n\n    // Build owner kind query\n    String ownerKind = getOwnerKind();\n    if (StringUtils.isNotBlank(ownerKind)) {\n        listOptions.addCondition(equal(\"spec.ownerKind\", ownerKind));\n    }\n\n    return listOptions;\n}", "CodeBleu_score": 42.52331464145841}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\tServiceImpl(ReactiveExtensionClient client,\n        UserService userService,\n        SystemConfigurableEnvironmentFetcher environmentFetcher,\n        CounterService counterService, RoleService roleService,\n        ExtensionGetter extensionGetter\n    ) {\n        this.client = client;\n        this.userService = userService;\n        this.environmentFetcher = environmentFetcher;\n        this.counterService = counterService;\n        this.roleService = roleService;\n        this.extensionGetter = extensionGetter;\n    }\n\n    @Override\n    public Mono<ListResult<ListedComment>> listComment(CommentQuery commentQuery) {\n        return this.client.listBy(Comment.class, commentQuery.toListOptions(),\n                commentQuery.toPageRequest())\n            .flatMap(comments -> Flux.fromStream(comments.get()\n                    .map(this::toListedComment))\n                .concatMap(Function.identity())\n                .collectList()\n                .map(list -> new ListResult<>(comments.getPage(), comments.getSize(),\n                    comments.getTotal(), list)\n                )\n            );\n    }\n\n    @Override\n    public Mono<Comment> create(Comment comment) {\n        return environmentFetcher.fetchComment()\n            .flatMap(commentSetting -> {\n                if (Boolean.FALSE.equals(commentSetting.getEnable())) {\n                    return Mono.error(\n                        new AccessDeniedException(\\\"The comment function has been turned off.\\\",\n                            \\\"problemDetail.comment.turnedOff\\\", null));\n                }\n                if (checkCommentOwner(comment, commentSetting.getSystemUserOnly())) {\n                    return Mono.error(\n                        new AccessDeniedException(\\\"Allow only system users to comment.\\\",\n                            \\\"problemDetail.comment.systemUsersOnly\\\", null));\n                }\n\n                if (comment.getSpec().getTop() == null) {\n                    comment.getSpec().setTop(false);\n                }\n                if (comment.getSpec().getPriority() == null) {\n                    comment.getSpec().setPriority(0);\n                }\n                comment.getSpec()\n                    .setApproved(Boolean.FALSE.equals(commentSetting.getRequireReviewForNew()));\n\n                if (BooleanUtils.isTrue(comment.getSpec().getApproved())\n                    && comment.getSpec().getApprovedTime() == null) {\n                    comment.getSpec().setApprovedTime(Instant.now());\n                }\n\n                if (comment.getSpec().getCreationTime() == null) {\n                    comment.getSpec().setCreationTime(Instant.now());\n                }\n\n                comment.getSpec().setHidden(false);\n\n                // return if the comment owner is not null\n                if (comment.getSpec().getOwner() != null) {\n                    return Mono.just(comment);\n                }\n                // populate owner from current user\n                return fetchCurrentUser()\n                    .flatMap(currentUser -> ReactiveSecurityContextHolder.getContext()\n                        .flatMap(securityContext -> {\n                            var authentication = securityContext.getAuthentication();\n                            var roles = AuthorityUtils.authoritiesToRoles(\n                                authentication.getAuthorities());\n                            return roleService.contains(roles,\n                                    Set.of(AuthorityUtils.COMMENT_MANAGEMENT_ROLE_NAME))\n                                .doOnNext(result -> {\n                                    if (result) {\n                                        comment.getSpec().setApproved(true);\n                                        comment.getSpec().setApprovedTime(Instant.now());\n                                    }\n                                })\n                                .thenReturn(toCommentOwner(currentUser));\n                        }))\n                    .map(owner -> {\n                        comment.getSpec().setOwner(owner);\n                        return comment;\n                    })\n                    .switchIfEmpty(\n                        Mono.error(new IllegalStateException(\\\"The owner must not be null.\\\")));\n            })\n            .flatMap(client::create);\n    }\n\n    @Override\n    public Mono<Void> removeBySubject(@NonNull Ref subjectRef) {\n        Assert.notNull(subjectRef, \\\"The subjectRef must not be null.\\\");\n        return cleanupComments(subjectRef, 200);\n    }\n\n    private Mono<Void> cleanupComments(Ref subjectRef, int batchSize) {\n        // ascending order by creation time and name\n        final var pageRequest = PageRequestImpl.of(1, batchSize,\n            Sort.by(\\\"metadata.creationTimestamp\\\", \\\"metadata.name\\\"));\n        // forever loop first page until no more to delete\n        return listCommentsByRef(subjectRef, pageRequest)\n            .flatMap(page -> Flux.fromIterable(page.getItems())\n                .flatMap(this::deleteWithRetry)\n                .then(page.hasNext() ? cleanupComments(subjectRef, batchSize) : Mono.empty())\n            );\n    }\n\n    private Mono<Comment> deleteWithRetry(Comment item) {\n        return client.delete(item)\n            .onErrorResume(OptimisticLockingFailureException.class,\n                e -> attemptToDelete(item.getMetadata().getName()));\n    }\n\n    private Mono<Comment> attemptToDelete(String name) {\n        return Mono.defer(() -> client.fetch(Comment.class, name)\n                .flatMap(client::delete)\n            )\n            .retryWhen(Retry.backoff(8, Duration.ofMillis(100))\n                .filter(OptimisticLockingFailureException.class::isInstance));\n    }\n\n    Mono<ListResult<Comment>> listCommentsByRef(Ref subjectRef, PageRequest pageRequest) {\n        var listOptions = new ListOptions();\n        listOptions.setFieldSelector(FieldSelector.of(\n            and(equal(\\\"spec.subjectRef\\\", Comment.toSubjectRefKey(subjectRef)),\n                isNull(\\\"metadata.deletionTimestamp\\\"))\n        ));\n        return client.listBy(Comment.class, listOptions, pageRequest);\n    }\n\n    private boolean checkCommentOwner(Comment comment, Boolean onlySystemUser) {\n        Comment.CommentOwner owner = comment.getSpec().getOwner();\n        if (Boolean.TRUE.equals(onlySystemUser)) {\n            return owner != null && Comment.CommentOwner.KIND_EMAIL.equals(owner.getKind());\n        }\n        return false;\n    }\n\n    private Comment.CommentOwner toCommentOwner(User user) {\n        Comment.CommentOwner owner = new Comment.CommentOwner();\n        owner.setKind(User.KIND);\n        owner.setName(user.getMetadata().getName());\n        owner.setDisplayName(user.getSpec().getDisplayName());\n        return owner;\n    }\n\n    private Mono<User> fetchCurrentUser() {\n        return ReactiveSecurityContextHolder.getContext()\n            .map(securityContext -> securityContext.getAuthentication().getName())\n            .flatMap(username -> client.fetch(User.class, username));\n    }\n\n    private Mono<ListedComment> toListedComment(Comment comment) {\n        var builder = ListedComment.builder().comment(comment);\n        // not empty\n        var ownerInfoMono = getCommentOwnerInfo(comment.getSpec().getOwner())\n            .doOnNext(builder::owner);\n        var subjectMono = getCommentSubject(comment.getSpec().getSubjectRef())\n            .doOnNext(builder::subject);\n        var statsMono = fetchStats(comment.getMetadata().getName())\n            .doOnNext(builder::stats);\n        return Mono.when(ownerInfoMono, subjectMono, statsMono)\n            .then(Mono.fromSupplier(builder::build));\n    }\n\n\n\n", "CodeBleu_score": 30.23499081008529}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\tServiceImpl(ReactiveExtensionClient client,\n        UserService userService,\n        SystemConfigurableEnvironmentFetcher environmentFetcher,\n        CounterService counterService, RoleService roleService,\n        ExtensionGetter extensionGetter\n    ) {\n        this.client = client;\n        this.userService = userService;\n        this.environmentFetcher = environmentFetcher;\n        this.counterService = counterService;\n        this.roleService = roleService;\n        this.extensionGetter = extensionGetter;\n    }\n\n    @Override\n    public Mono<ListResult<ListedComment>> listComment(CommentQuery commentQuery) {\n        return this.client.listBy(Comment.class, commentQuery.toListOptions(),\n                commentQuery.toPageRequest())\n            .flatMap(comments -> Flux.fromStream(comments.get()\n                    .map(this::toListedComment))\n                .concatMap(Function.identity())\n                .collectList()\n                .map(list -> new ListResult<>(comments.getPage(), comments.getSize(),\n                    comments.getTotal(), list)\n                )\n            );\n    }\n\n    @Override\n    public Mono<Comment> create(Comment comment) {\n        return environmentFetcher.fetchComment()\n            .flatMap(commentSetting -> {\n                if (Boolean.FALSE.equals(commentSetting.getEnable())) {\n                    return Mono.error(\n                        new AccessDeniedException(\\\"The comment function has been turned off.\\\",\n                            \\\"problemDetail.comment.turnedOff\\\", null));\n                }\n                if (checkCommentOwner(comment, commentSetting.getSystemUserOnly())) {\n                    return Mono.error(\n                        new AccessDeniedException(\\\"Allow only system users to comment.\\\",\n                            \\\"problemDetail.comment.systemUsersOnly\\\", null));\n                }\n\n                if (comment.getSpec().getTop() == null) {\n                    comment.getSpec().setTop(false);\n                }\n                if (comment.getSpec().getPriority() == null) {\n                    comment.getSpec().setPriority(0);\n                }\n                comment.getSpec()\n                    .setApproved(Boolean.FALSE.equals(commentSetting.getRequireReviewForNew()));\n\n                if (BooleanUtils.isTrue(comment.getSpec().getApproved())\n                    && comment.getSpec().getApprovedTime() == null) {\n                    comment.getSpec().setApprovedTime(Instant.now());\n                }\n\n                if (comment.getSpec().getCreationTime() == null) {\n                    comment.getSpec().setCreationTime(Instant.now());\n                }\n\n                comment.getSpec().setHidden(false);\n\n                // return if the comment owner is not null\n                if (comment.getSpec().getOwner() != null) {\n                    return Mono.just(comment);\n                }\n                // populate owner from current user\n                return fetchCurrentUser()\n                    .flatMap(currentUser -> ReactiveSecurityContextHolder.getContext()\n                        .flatMap(securityContext -> {\n                            var authentication = securityContext.getAuthentication();\n                            var roles = AuthorityUtils.authoritiesToRoles(\n                                authentication.getAuthorities());\n                            return roleService.contains(roles,\n                                    Set.of(AuthorityUtils.COMMENT_MANAGEMENT_ROLE_NAME))\n                                .doOnNext(result -> {\n                                    if (result) {\n                                        comment.getSpec().setApproved(true);\n                                        comment.getSpec().setApprovedTime(Instant.now());\n                                    }\n                                })\n                                .thenReturn(toCommentOwner(currentUser));\n                        }))\n                    .map(owner -> {\n                        comment.getSpec().setOwner(owner);\n                        return comment;\n                    })\n                    .switchIfEmpty(\n                        Mono.error(new IllegalStateException(\\\"The owner must not be null.\\\")));\n            })\n            .flatMap(client::create);\n    }\n\n    @Override\n    public Mono<Void> removeBySubject(@NonNull Ref subjectRef) {\n        Assert.notNull(subjectRef, \\\"The subjectRef must not be null.\\\");\n        return cleanupComments(subjectRef, 200);\n    }\n\n    private Mono<Void> cleanupComments(Ref subjectRef, int batchSize) {\n        // ascending order by creation time and name\n        final var pageRequest = PageRequestImpl.of(1, batchSize,\n            Sort.by(\\\"metadata.creationTimestamp\\\", \\\"metadata.name\\\"));\n        // forever loop first page until no more to delete\n        return listCommentsByRef(subjectRef, pageRequest)\n            .flatMap(page -> Flux.fromIterable(page.getItems())\n                .flatMap(this::deleteWithRetry)\n                .then(page.hasNext() ? cleanupComments(subjectRef, batchSize) : Mono.empty())\n            );\n    }\n\n    private Mono<Comment> deleteWithRetry(Comment item) {\n        return client.delete(item)\n            .onErrorResume(OptimisticLockingFailureException.class,\n                e -> attemptToDelete(item.getMetadata().getName()));\n    }\n\n    private Mono<Comment> attemptToDelete(String name) {\n        return Mono.defer(() -> client.fetch(Comment.class, name)\n                .flatMap(client::delete)\n            )\n            .retryWhen(Retry.backoff(8, Duration.ofMillis(100))\n                .filter(OptimisticLockingFailureException.class::isInstance));\n    }\n\n    Mono<ListResult<Comment>> listCommentsByRef(Ref subjectRef, PageRequest pageRequest) {\n        var listOptions = new ListOptions();\n        listOptions.setFieldSelector(FieldSelector.of(\n            and(equal(\\\"spec.subjectRef\\\", Comment.toSubjectRefKey(subjectRef)),\n                isNull(\\\"metadata.deletionTimestamp\\\"))\n        ));\n        return client.listBy(Comment.class, listOptions, pageRequest);\n    }\n\n    private boolean checkCommentOwner(Comment comment, Boolean onlySystemUser) {\n        Comment.CommentOwner owner = comment.getSpec().getOwner();\n        if (Boolean.TRUE.equals(onlySystemUser)) {\n            return owner != null && Comment.CommentOwner.KIND_EMAIL.equals(owner.getKind());\n        }\n        return false;\n    }\n\n    private Comment.CommentOwner toCommentOwner(User user) {\n        Comment.CommentOwner owner = new Comment.CommentOwner();\n        owner.setKind(User.KIND);\n        owner.setName(user.getMetadata().getName());\n        owner.setDisplayName(user.getSpec().getDisplayName());\n        return owner;\n    }\n\n    private Mono<User> fetchCurrentUser() {\n        return ReactiveSecurityContextHolder.getContext()\n            .map(securityContext -> securityContext.getAuthentication().getName())\n            .flatMap(username -> client.fetch(User.class, username));\n    }\n\n    private Mono<ListedComment> toListedComment(Comment comment) {\n        var builder = ListedComment.builder().comment(comment);\n        // not empty\n        var ownerInfoMono = getCommentOwnerInfo(comment.getSpec().getOwner())\n            .doOnNext(builder::owner);\n        var subjectMono = getCommentSubject(comment.getSpec().getSubjectRef())\n            .doOnNext(builder::subject);\n        var statsMono = fetchStats(comment.getMetadata().getName())\n            .doOnNext(builder::stats);\n        return Mono.when(ownerInfoMono, subjectMono, statsMono)\n            .then(Mono.fromSupplier(builder::build));\n    }\n\n\n\n", "CodeBleu_score": 30.23499081008529}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\tServiceImpl(ReactiveExtensionClient client,\n        UserService userService,\n        SystemConfigurableEnvironmentFetcher environmentFetcher,\n        CounterService counterService, RoleService roleService,\n        ExtensionGetter extensionGetter\n    ) {\n        this.client = client;\n        this.userService = userService;\n        this.environmentFetcher = environmentFetcher;\n        this.counterService = counterService;\n        this.roleService = roleService;\n        this.extensionGetter = extensionGetter;\n    }\n\n    @Override\n    public Mono<ListResult<ListedComment>> listComment(CommentQuery commentQuery) {\n        return this.client.listBy(Comment.class, commentQuery.toListOptions(),\n                commentQuery.toPageRequest())\n            .flatMap(comments -> Flux.fromStream(comments.get()\n                    .map(this::toListedComment))\n                .concatMap(Function.identity())\n                .collectList()\n                .map(list -> new ListResult<>(comments.getPage(), comments.getSize(),\n                    comments.getTotal(), list)\n                )\n            );\n    }\n\n    @Override\n    public Mono<Comment> create(Comment comment) {\n        return environmentFetcher.fetchComment()\n            .flatMap(commentSetting -> {\n                if (Boolean.FALSE.equals(commentSetting.getEnable())) {\n                    return Mono.error(\n                        new AccessDeniedException(\\\"The comment function has been turned off.\\\",\n                            \\\"problemDetail.comment.turnedOff\\\", null));\n                }\n                if (checkCommentOwner(comment, commentSetting.getSystemUserOnly())) {\n                    return Mono.error(\n                        new AccessDeniedException(\\\"Allow only system users to comment.\\\",\n                            \\\"problemDetail.comment.systemUsersOnly\\\", null));\n                }\n\n                if (comment.getSpec().getTop() == null) {\n                    comment.getSpec().setTop(false);\n                }\n                if (comment.getSpec().getPriority() == null) {\n                    comment.getSpec().setPriority(0);\n                }\n                comment.getSpec()\n                    .setApproved(Boolean.FALSE.equals(commentSetting.getRequireReviewForNew()));\n\n                if (BooleanUtils.isTrue(comment.getSpec().getApproved())\n                    && comment.getSpec().getApprovedTime() == null) {\n                    comment.getSpec().setApprovedTime(Instant.now());\n                }\n\n                if (comment.getSpec().getCreationTime() == null) {\n                    comment.getSpec().setCreationTime(Instant.now());\n                }\n\n                comment.getSpec().setHidden(false);\n\n                // return if the comment owner is not null\n                if (comment.getSpec().getOwner() != null) {\n                    return Mono.just(comment);\n                }\n                // populate owner from current user\n                return fetchCurrentUser()\n                    .flatMap(currentUser -> ReactiveSecurityContextHolder.getContext()\n                        .flatMap(securityContext -> {\n                            var authentication = securityContext.getAuthentication();\n                            var roles = AuthorityUtils.authoritiesToRoles(\n                                authentication.getAuthorities());\n                            return roleService.contains(roles,\n                                    Set.of(AuthorityUtils.COMMENT_MANAGEMENT_ROLE_NAME))\n                                .doOnNext(result -> {\n                                    if (result) {\n                                        comment.getSpec().setApproved(true);\n                                        comment.getSpec().setApprovedTime(Instant.now());\n                                    }\n                                })\n                                .thenReturn(toCommentOwner(currentUser));\n                        }))\n                    .map(owner -> {\n                        comment.getSpec().setOwner(owner);\n                        return comment;\n                    })\n                    .switchIfEmpty(\n                        Mono.error(new IllegalStateException(\\\"The owner must not be null.\\\")));\n            })\n            .flatMap(client::create);\n    }\n\n    @Override\n    public Mono<Void> removeBySubject(@NonNull Ref subjectRef) {\n        Assert.notNull(subjectRef, \\\"The subjectRef must not be null.\\\");\n        return cleanupComments(subjectRef, 200);\n    }\n\n    private Mono<Void> cleanupComments(Ref subjectRef, int batchSize) {\n        // ascending order by creation time and name\n        final var pageRequest = PageRequestImpl.of(1, batchSize,\n            Sort.by(\\\"metadata.creationTimestamp\\\", \\\"metadata.name\\\"));\n        // forever loop first page until no more to delete\n        return listCommentsByRef(subjectRef, pageRequest)\n            .flatMap(page -> Flux.fromIterable(page.getItems())\n                .flatMap(this::deleteWithRetry)\n                .then(page.hasNext() ? cleanupComments(subjectRef, batchSize) : Mono.empty())\n            );\n    }\n\n    private Mono<Comment> deleteWithRetry(Comment item) {\n        return client.delete(item)\n            .onErrorResume(OptimisticLockingFailureException.class,\n                e -> attemptToDelete(item.getMetadata().getName()));\n    }\n\n    private Mono<Comment> attemptToDelete(String name) {\n        return Mono.defer(() -> client.fetch(Comment.class, name)\n                .flatMap(client::delete)\n            )\n            .retryWhen(Retry.backoff(8, Duration.ofMillis(100))\n                .filter(OptimisticLockingFailureException.class::isInstance));\n    }\n\n    Mono<ListResult<Comment>> listCommentsByRef(Ref subjectRef, PageRequest pageRequest) {\n        var listOptions = new ListOptions();\n        listOptions.setFieldSelector(FieldSelector.of(\n            and(equal(\\\"spec.subjectRef\\\", Comment.toSubjectRefKey(subjectRef)),\n                isNull(\\\"metadata.deletionTimestamp\\\"))\n        ));\n        return client.listBy(Comment.class, listOptions, pageRequest);\n    }\n\n    private boolean checkCommentOwner(Comment comment, Boolean onlySystemUser) {\n        Comment.CommentOwner owner = comment.getSpec().getOwner();\n        if (Boolean.TRUE.equals(onlySystemUser)) {\n            return owner != null && Comment.CommentOwner.KIND_EMAIL.equals(owner.getKind());\n        }\n        return false;\n    }\n\n    private Comment.CommentOwner toCommentOwner(User user) {\n        Comment.CommentOwner owner = new Comment.CommentOwner();\n        owner.setKind(User.KIND);\n        owner.setName(user.getMetadata().getName());\n        owner.setDisplayName(user.getSpec().getDisplayName());\n        return owner;\n    }\n\n    private Mono<User> fetchCurrentUser() {\n        return ReactiveSecurityContextHolder.getContext()\n            .map(securityContext -> securityContext.getAuthentication().getName())\n            .flatMap(username -> client.fetch(User.class, username));\n    }\n\n    private Mono<ListedComment> toListedComment(Comment comment) {\n        var builder = ListedComment.builder().comment(comment);\n        // not empty\n        var ownerInfoMono = getCommentOwnerInfo(comment.getSpec().getOwner())\n            .doOnNext(builder::owner);\n        var subjectMono = getCommentSubject(comment.getSpec().getSubjectRef())\n            .doOnNext(builder::subject);\n        var statsMono = fetchStats(comment.getMetadata().getName())\n            .doOnNext(builder::stats);\n        return Mono.when(ownerInfoMono, subjectMono, statsMono)\n            .then(Mono.fromSupplier(builder::build));\n    }\n\n\n\n", "CodeBleu_score": 30.23499081008529}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\tSubscription subscription = new Subscription();\n    subscription.setReason(NotificationReasonConst.SOMEONE_REPLIED_TO_YOU);\n    subscription.setReasonCondition(\"repliedOwner = '\" + identity.getName() + \"'\");\n    subscription.setUserIdentity(identity);\n    notificationCenter.subscribe(subscription);\n}", "CodeBleu_score": 26.828816326961736}, {"code": "void subscribeReply(UserIdentity identity){\n\t// Create subscriber from user identity\n    var subscriber = Subscription.builder()\n            .identity(identity)\n            .reasonType(NotificationReasonConst.SOMEONE_REPLY_TO_YOU)\n            .condition(\"reply.spec.owner == '\" + identity.getName() + \"'\")\n            .build();\n\n    // Subscribe\n    notificationCenter.subscribe(subscriber);\n}", "CodeBleu_score": 41.1771108402867}, {"code": "void subscribeReply(UserIdentity identity){\n\tSubscription subscription = new Subscription();\n    subscription.setIdentity(identity);\n    subscription.setReasonType(NotificationReasonConst.REPLY);\n    subscription.setReasonCondition(String.format(\"repliedOwner eq '%s'\", identity.getUsername()));\n    notificationCenter.subscribe(subscription);\n}", "CodeBleu_score": 26.485796285430713}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn client.update(comment, (UnaryOperator<Comment>) comment1 -> {\n        comment1.setApproved(true);\n        comment1.setApprovedTime(Instant.now());\n        return comment1;\n    }).retryWhen(Retry.backoff(Integer.MAX_VALUE, Duration.ofSeconds(1))\n            .filter(throwable -> throwable instanceof OptimisticLockingFailureException));\n}", "CodeBleu_score": 28.275768130644973}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn client.update(comment, comment1 -> {\n        comment1.setApproved(true);\n        comment1.setApprovedTime(Instant.now());\n        return comment1;\n    }, Retry.backoff(3, Duration.ofMillis(100)).doBeforeRetry(retrySignal -> {\n        var exception = retrySignal.failure();\n        if (exception instanceof OptimisticLockingFailureException) {\n            counterService.increment(CounterService.Counter.COMMENT_LOCK_FAILURE);\n        }\n    }));\n}", "CodeBleu_score": 30.4830939688287}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn client.update(comment, comment.getId(),\n        (UnaryOperator<Comment>) (comment1) -> {\n            comment1.setApproved(true);\n            comment1.setApprovedAt(Instant.now());\n            return comment1;\n        },\n        (comment1, comment2) -> comment1.getVersion() == comment2.getVersion());\n}", "CodeBleu_score": 27.64927444480456}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t()` instead.\n     *\n     * @param  array<StaticAction> | Closure | null  $actions\n     */\n    public function modalActions(array | Closure | null $actions = null): static\n    {\n        $this->modalFooterActions($actions);\n\n        return $this;\n    }\n\n    /**\n     * @param  array<StaticAction> | Closure | null  $actions\n     */\n    public function modalFooterActions(array | Closure | null $actions = null): static\n    {\n        $this->modalFooterActions = $actions;\n\n        return $this;\n    }\n\n    public function modalFooterActionsAlignment(Alignment | string | Closure | null $alignment = null): static\n    {\n        $this->modalFooterActionsAlignment = $alignment;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `extraModalFooterActions()` instead.\n     *\n     * @param  array<StaticAction> | Closure  $actions\n     */\n    public function extraModalActions(array | Closure $actions): static\n    {\n        $this->extraModalFooterActions($actions);\n\n        return $this;\n    }\n\n    /**\n     * @param  array<StaticAction> | Closure  $actions\n     */\n    public function extraModalFooterActions(array | Closure $actions): static\n    {\n        $this->extraModalFooterActions = $actions;\n\n        return $this;\n    }\n\n    /**\n     * @param  array<StaticAction>  $actions\n     */\n    public function registerModalActions(array $actions): static\n    {\n        $this->modalActions = [\n            ...$this->modalActions,\n            ...$actions,\n        ];\n\n        return $this;\n    }\n\n    public function modalSubmitAction(StaticAction | bool | Closure | null $action = null): static\n    {\n        $this->modalSubmitAction = $action;\n\n        return $this;\n    }\n\n    public function modalCancelAction(StaticAction | bool | Closure | null $action = null): static\n    {\n        $this->modalCancelAction = $action;\n\n        return $this;\n    }\n\n    public function modalSubmitActionLabel(string | Closure | null $label = null): static\n    {\n        $this->modalSubmitActionLabel = $label;\n\n        return $this;\n    }\n\n    public function modalCancelActionLabel(string | Closure | null $label = null): static\n    {\n        $this->modalCancelActionLabel = $label;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `modalSubmitActionLabel()` instead.\n     */\n    public function modalButton(string | Closure | null $label = null): static\n    {\n        $this->modalSubmitActionLabel($label);\n\n        return $this;\n    }\n\n    public function modalContent(View | Htmlable | Closure | null $content = null): static\n    {\n        $this->modalContent = $content;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `modalContentFooter()` instead.\n     */\n    public function modalFooter(View | Htmlable | Closure | null $footer = null): static\n    {\n        return $this->modalContentFooter($footer);\n    }\n\n    public function modalContentFooter(View | Htmlable | Closure | null $footer = null): static\n    {\n        $this->modalContentFooter = $footer;\n\n        return $this;\n    }\n\n    public function modalHeading(string | Htmlable | Closure | null $heading = null): static\n    {\n        $this->modalHeading = $heading;\n\n        return $this;\n    }\n\n    public function modalDescription(string | Htmlable | Closure | null $description = null): static\n    {\n        $this->modalDescription = $description;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `modalDescription()` instead.\n     */\n    public function modalSubheading(string | Htmlable | Closure | null $subheading = null): static\n    {\n        $this->modalDescription($subheading);\n\n        return $this;\n    }\n\n    public function modalWidth(MaxWidth | string | Closure | null $width = null): static\n    {\n        $this->modalWidth = $width;\n\n        return $this;\n    }\n\n    public function getLivewireCallMountedActionName(): ?string\n    {\n        return null;\n    }\n\n    public function modal(bool | Closure | null $condition = true): static\n    {\n        $this->hasModal = $condition;\n\n        return $this;\n    }\n\n    public function modalHidden(bool | Closure | null $condition = true): static\n    {\n        $this->isModalHidden = $condition;\n\n        return $this;\n    }\n\n    /**\n     * @return array<string, StaticAction>\n     */\n    public function getModalFooterActions(): array\n    {\n        if ($this->isWizard()) {\n            return [];\n        }\n\n        if (isset($this->cachedModalFooterActions)) {\n            return $this->cachedModalFooterActions;\n        }\n\n        if ($this->modalFooterActions) {\n            $actions = [];\n\n            foreach ($this->evaluate($this->modalFooterActions) as $action) {\n                $actions[$action->getName()] = $this->prepareModalAction($action);\n            }\n\n            return $this->cachedModalFooterActions = $actions;\n        }\n\n        $actions = [];\n\n        if ($submitAction = $this->getModalSubmitAction()) {\n            $actions['submit'] = $submitAction;\n        }\n\n        $actions = [\n            ...$actions,\n            ...$this->getExtraModalFooterActions(),\n        ];\n\n        if ($cancelAction = $this->getModalCancelAction()) {\n            $actions['cancel'] = $cancelAction;\n        }\n\n        if (in_array($this->getModalFooterActionsAlignment(), [Alignment::Center, 'center'])) {\n            $actions = array_reverse($actions);\n        }\n\n        return $this->cachedModalFooterActions = $actions;\n    }\n\n    public function getModalFooterActionsAlignment(): string | Alignment | null\n    {\n        return $this->evaluate($this->modalFooterActionsAlignment);\n    }\n\n    /**\n     * @return array<string, StaticAction>\n     */\n    public function getModalActions(): array\n    {\n        if (isset($this->cachedModalActions)) {\n            return $this->cachedModalActions;\n        }\n\n        $actions = $this->getModalFooterActions();\n\n        foreach ($this->modalActions as $action) {\n            $actions[$action->getName()] = $this->prepareModalAction($action);\n        }\n\n        return $this->cachedModalActions = $actions;\n    }\n\n    public function getModalAction(string $name): ?StaticAction\n    {\n        return $this->getModalActions()[$name] ?? null;\n    }\n\n    public function getMountableModalAction(string $name): ?MountableAction\n    {\n        $action = $this->getModalAction($name);\n\n        if (! $action) {\n            return null;\n        }\n\n        if (! $action instanceof MountableAction) {\n            return null;\n        }\n\n        return $action;\n    }\n\n\n\n", "CodeBleu_score": 18.05069975196484}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t()` instead.\n     *\n     * @param  array<StaticAction> | Closure | null  $actions\n     */\n    public function modalActions(array | Closure | null $actions = null): static\n    {\n        $this->modalFooterActions($actions);\n\n        return $this;\n    }\n\n    /**\n     * @param  array<StaticAction> | Closure | null  $actions\n     */\n    public function modalFooterActions(array | Closure | null $actions = null): static\n    {\n        $this->modalFooterActions = $actions;\n\n        return $this;\n    }\n\n    public function modalFooterActionsAlignment(Alignment | string | Closure | null $alignment = null): static\n    {\n        $this->modalFooterActionsAlignment = $alignment;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `extraModalFooterActions()` instead.\n     *\n     * @param  array<StaticAction> | Closure  $actions\n     */\n    public function extraModalActions(array | Closure $actions): static\n    {\n        $this->extraModalFooterActions($actions);\n\n        return $this;\n    }\n\n    /**\n     * @param  array<StaticAction> | Closure  $actions\n     */\n    public function extraModalFooterActions(array | Closure $actions): static\n    {\n        $this->extraModalFooterActions = $actions;\n\n        return $this;\n    }\n\n    /**\n     * @param  array<StaticAction>  $actions\n     */\n    public function registerModalActions(array $actions): static\n    {\n        $this->modalActions = [\n            ...$this->modalActions,\n            ...$actions,\n        ];\n\n        return $this;\n    }\n\n    public function modalSubmitAction(StaticAction | bool | Closure | null $action = null): static\n    {\n        $this->modalSubmitAction = $action;\n\n        return $this;\n    }\n\n    public function modalCancelAction(StaticAction | bool | Closure | null $action = null): static\n    {\n        $this->modalCancelAction = $action;\n\n        return $this;\n    }\n\n    public function modalSubmitActionLabel(string | Closure | null $label = null): static\n    {\n        $this->modalSubmitActionLabel = $label;\n\n        return $this;\n    }\n\n    public function modalCancelActionLabel(string | Closure | null $label = null): static\n    {\n        $this->modalCancelActionLabel = $label;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `modalSubmitActionLabel()` instead.\n     */\n    public function modalButton(string | Closure | null $label = null): static\n    {\n        $this->modalSubmitActionLabel($label);\n\n        return $this;\n    }\n\n    public function modalContent(View | Htmlable | Closure | null $content = null): static\n    {\n        $this->modalContent = $content;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `modalContentFooter()` instead.\n     */\n    public function modalFooter(View | Htmlable | Closure | null $footer = null): static\n    {\n        return $this->modalContentFooter($footer);\n    }\n\n    public function modalContentFooter(View | Htmlable | Closure | null $footer = null): static\n    {\n        $this->modalContentFooter = $footer;\n\n        return $this;\n    }\n\n    public function modalHeading(string | Htmlable | Closure | null $heading = null): static\n    {\n        $this->modalHeading = $heading;\n\n        return $this;\n    }\n\n    public function modalDescription(string | Htmlable | Closure | null $description = null): static\n    {\n        $this->modalDescription = $description;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `modalDescription()` instead.\n     */\n    public function modalSubheading(string | Htmlable | Closure | null $subheading = null): static\n    {\n        $this->modalDescription($subheading);\n\n        return $this;\n    }\n\n    public function modalWidth(MaxWidth | string | Closure | null $width = null): static\n    {\n        $this->modalWidth = $width;\n\n        return $this;\n    }\n\n    public function getLivewireCallMountedActionName(): ?string\n    {\n        return null;\n    }\n\n    public function modal(bool | Closure | null $condition = true): static\n    {\n        $this->hasModal = $condition;\n\n        return $this;\n    }\n\n    public function modalHidden(bool | Closure | null $condition = true): static\n    {\n        $this->isModalHidden = $condition;\n\n        return $this;\n    }\n\n    /**\n     * @return array<string, StaticAction>\n     */\n    public function getModalFooterActions(): array\n    {\n        if ($this->isWizard()) {\n            return [];\n        }\n\n        if (isset($this->cachedModalFooterActions)) {\n            return $this->cachedModalFooterActions;\n        }\n\n        if ($this->modalFooterActions) {\n            $actions = [];\n\n            foreach ($this->evaluate($this->modalFooterActions) as $action) {\n                $actions[$action->getName()] = $this->prepareModalAction($action);\n            }\n\n            return $this->cachedModalFooterActions = $actions;\n        }\n\n        $actions = [];\n\n        if ($submitAction = $this->getModalSubmitAction()) {\n            $actions['submit'] = $submitAction;\n        }\n\n        $actions = [\n            ...$actions,\n            ...$this->getExtraModalFooterActions(),\n        ];\n\n        if ($cancelAction = $this->getModalCancelAction()) {\n            $actions['cancel'] = $cancelAction;\n        }\n\n        if (in_array($this->getModalFooterActionsAlignment(), [Alignment::Center, 'center'])) {\n            $actions = array_reverse($actions);\n        }\n\n        return $this->cachedModalFooterActions = $actions;\n    }\n\n    public function getModalFooterActionsAlignment(): string | Alignment | null\n    {\n        return $this->evaluate($this->modalFooterActionsAlignment);\n    }\n\n    /**\n     * @return array<string, StaticAction>\n     */\n    public function getModalActions(): array\n    {\n        if (isset($this->cachedModalActions)) {\n            return $this->cachedModalActions;\n        }\n\n        $actions = $this->getModalFooterActions();\n\n        foreach ($this->modalActions as $action) {\n            $actions[$action->getName()] = $this->prepareModalAction($action);\n        }\n\n        return $this->cachedModalActions = $actions;\n    }\n\n    public function getModalAction(string $name): ?StaticAction\n    {\n        return $this->getModalActions()[$name] ?? null;\n    }\n\n    public function getMountableModalAction(string $name): ?MountableAction\n    {\n        $action = $this->getModalAction($name);\n\n        if (! $action) {\n            return null;\n        }\n\n        if (! $action instanceof MountableAction) {\n            return null;\n        }\n\n        return $action;\n    }\n\n\n\n", "CodeBleu_score": 18.05069975196484}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t()` instead.\n     *\n     * @param  array<StaticAction> | Closure | null  $actions\n     */\n    public function modalActions(array | Closure | null $actions = null): static\n    {\n        $this->modalFooterActions($actions);\n\n        return $this;\n    }\n\n    /**\n     * @param  array<StaticAction> | Closure | null  $actions\n     */\n    public function modalFooterActions(array | Closure | null $actions = null): static\n    {\n        $this->modalFooterActions = $actions;\n\n        return $this;\n    }\n\n    public function modalFooterActionsAlignment(Alignment | string | Closure | null $alignment = null): static\n    {\n        $this->modalFooterActionsAlignment = $alignment;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `extraModalFooterActions()` instead.\n     *\n     * @param  array<StaticAction> | Closure  $actions\n     */\n    public function extraModalActions(array | Closure $actions): static\n    {\n        $this->extraModalFooterActions($actions);\n\n        return $this;\n    }\n\n    /**\n     * @param  array<StaticAction> | Closure  $actions\n     */\n    public function extraModalFooterActions(array | Closure $actions): static\n    {\n        $this->extraModalFooterActions = $actions;\n\n        return $this;\n    }\n\n    /**\n     * @param  array<StaticAction>  $actions\n     */\n    public function registerModalActions(array $actions): static\n    {\n        $this->modalActions = [\n            ...$this->modalActions,\n            ...$actions,\n        ];\n\n        return $this;\n    }\n\n    public function modalSubmitAction(StaticAction | bool | Closure | null $action = null): static\n    {\n        $this->modalSubmitAction = $action;\n\n        return $this;\n    }\n\n    public function modalCancelAction(StaticAction | bool | Closure | null $action = null): static\n    {\n        $this->modalCancelAction = $action;\n\n        return $this;\n    }\n\n    public function modalSubmitActionLabel(string | Closure | null $label = null): static\n    {\n        $this->modalSubmitActionLabel = $label;\n\n        return $this;\n    }\n\n    public function modalCancelActionLabel(string | Closure | null $label = null): static\n    {\n        $this->modalCancelActionLabel = $label;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `modalSubmitActionLabel()` instead.\n     */\n    public function modalButton(string | Closure | null $label = null): static\n    {\n        $this->modalSubmitActionLabel($label);\n\n        return $this;\n    }\n\n    public function modalContent(View | Htmlable | Closure | null $content = null): static\n    {\n        $this->modalContent = $content;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `modalContentFooter()` instead.\n     */\n    public function modalFooter(View | Htmlable | Closure | null $footer = null): static\n    {\n        return $this->modalContentFooter($footer);\n    }\n\n    public function modalContentFooter(View | Htmlable | Closure | null $footer = null): static\n    {\n        $this->modalContentFooter = $footer;\n\n        return $this;\n    }\n\n    public function modalHeading(string | Htmlable | Closure | null $heading = null): static\n    {\n        $this->modalHeading = $heading;\n\n        return $this;\n    }\n\n    public function modalDescription(string | Htmlable | Closure | null $description = null): static\n    {\n        $this->modalDescription = $description;\n\n        return $this;\n    }\n\n    /**\n     * @deprecated Use `modalDescription()` instead.\n     */\n    public function modalSubheading(string | Htmlable | Closure | null $subheading = null): static\n    {\n        $this->modalDescription($subheading);\n\n        return $this;\n    }\n\n    public function modalWidth(MaxWidth | string | Closure | null $width = null): static\n    {\n        $this->modalWidth = $width;\n\n        return $this;\n    }\n\n    public function getLivewireCallMountedActionName(): ?string\n    {\n        return null;\n    }\n\n    public function modal(bool | Closure | null $condition = true): static\n    {\n        $this->hasModal = $condition;\n\n        return $this;\n    }\n\n    public function modalHidden(bool | Closure | null $condition = true): static\n    {\n        $this->isModalHidden = $condition;\n\n        return $this;\n    }\n\n    /**\n     * @return array<string, StaticAction>\n     */\n    public function getModalFooterActions(): array\n    {\n        if ($this->isWizard()) {\n            return [];\n        }\n\n        if (isset($this->cachedModalFooterActions)) {\n            return $this->cachedModalFooterActions;\n        }\n\n        if ($this->modalFooterActions) {\n            $actions = [];\n\n            foreach ($this->evaluate($this->modalFooterActions) as $action) {\n                $actions[$action->getName()] = $this->prepareModalAction($action);\n            }\n\n            return $this->cachedModalFooterActions = $actions;\n        }\n\n        $actions = [];\n\n        if ($submitAction = $this->getModalSubmitAction()) {\n            $actions['submit'] = $submitAction;\n        }\n\n        $actions = [\n            ...$actions,\n            ...$this->getExtraModalFooterActions(),\n        ];\n\n        if ($cancelAction = $this->getModalCancelAction()) {\n            $actions['cancel'] = $cancelAction;\n        }\n\n        if (in_array($this->getModalFooterActionsAlignment(), [Alignment::Center, 'center'])) {\n            $actions = array_reverse($actions);\n        }\n\n        return $this->cachedModalFooterActions = $actions;\n    }\n\n    public function getModalFooterActionsAlignment(): string | Alignment | null\n    {\n        return $this->evaluate($this->modalFooterActionsAlignment);\n    }\n\n    /**\n     * @return array<string, StaticAction>\n     */\n    public function getModalActions(): array\n    {\n        if (isset($this->cachedModalActions)) {\n            return $this->cachedModalActions;\n        }\n\n        $actions = $this->getModalFooterActions();\n\n        foreach ($this->modalActions as $action) {\n            $actions[$action->getName()] = $this->prepareModalAction($action);\n        }\n\n        return $this->cachedModalActions = $actions;\n    }\n\n    public function getModalAction(string $name): ?StaticAction\n    {\n        return $this->getModalActions()[$name] ?? null;\n    }\n\n    public function getMountableModalAction(string $name): ?MountableAction\n    {\n        $action = $this->getModalAction($name);\n\n        if (! $action) {\n            return null;\n        }\n\n        if (! $action instanceof MountableAction) {\n            return null;\n        }\n\n        return $action;\n    }\n\n\n\n", "CodeBleu_score": 18.05069975196484}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->evaluate($this->successRedirectUrl);\n\n    if (filled($url)) {\n        $this->redirect($url);\n    }\n\n    return $this;\n}", "CodeBleu_score": 94.557045237306}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->evaluate($this->successRedirectUrl);\n\n    if (filled($url)) {\n        $this->redirect($url);\n    }\n\n    return $this;\n}", "CodeBleu_score": 94.557045237306}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->evaluate($this->successRedirectUrl);\n\n    if (filled($url)) {\n        $this->redirect($url);\n    }\n\n    return $this;\n}", "CodeBleu_score": 94.557045237306}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif (! $record || ! method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagModel = $record->tags()->getRelated();\n\n    $tags = collect($state)->map(static function (string $name) use ($tagModel) {\n        return $tagModel::firstOrCreate([\n            'name' => $name,\n        ]);\n    });\n\n    $record->syncTags($tags);\n}", "CodeBleu_score": 33.62049151344753}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif (! $record || ! method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagModel = $record->getRelation('tags')->getRelated();\n\n    $tags = collect($state)->map(static function (string $name) use ($tagModel) {\n        return $tagModel::firstOrCreate([\n            'name' => $name,\n        ]);\n    });\n\n    $record->syncTags($tags);\n}", "CodeBleu_score": 34.174755822111436}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif (! $record || ! method_exists($record, 'syncTags')) {\n        return;\n    }\n\n    $tagModel = config('filament.forms.components.spatie_tags_input.model');\n    $tagModel = $tagModel ?: config('filament-spatie-laravel-tags-plugin.models.tag');\n\n    if (! $tagModel) {\n        return;\n    }\n\n    $tags = $tagModel::findOrCreateMany($state);\n\n    $record->syncTags($tags);\n}", "CodeBleu_score": 25.634722015727007}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\tspacePath, repoName, err := paths.GetSpacePathAndRepoName(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tpipelineScope := types.NewScope(spacePath, repoName)\n\tpipelineResource := types.NewResource(pipelineIdentifier, enum.ResourceTypePipeline)\n\tif err := authorizer.Check(ctx, session, pipelineScope, pipelineResource, permission); err != nil {\n\t\treturn fmt.Errorf(\"unauthorized to %s pipeline %s: %w\", permission, pipelineIdentifier, err)\n\t}\n\treturn nil\n}", "CodeBleu_score": 51.94573404589011}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repoName, err := paths.DissectPipelinePath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline.\n\tscope := types.NewScope(spacePath, repoName)\n\tresource := types.NewResource(pipelineIdentifier, enum.ResourceTypePipeline)\n\n\t// Perform the permission check.\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err != nil {\n\t\treturn err\n\t}\n\n\t// Return nil if the permission check is successful.\n\treturn nil\n}", "CodeBleu_score": 49.30749478319072}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t// Dissect the path to obtain the space and repository names\n\tspace, repository, err := paths.DissectPipelinePath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline\n\tscope := types.NewScope(space, repository)\n\tresource := types.NewResource(pipelineIdentifier, enum.PipelineResourceType)\n\n\t// Check the permission\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 46.069219568391}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t// Get the parent space\n\tparentSpace, err := space.Parent()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Get the name of the space\n\tname := space.Name()\n\n\t// Create the scope\n\tscope := authz.NewScope(\n\t\tauthz.NewResource(parentSpace, name),\n\t)\n\n\t// Create the resource\n\tresource := authz.NewResource(space, \"\")\n\n\t// Check the permission\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 55.44587040875379}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t// Get the parent space\n\tparentSpace := space.Parent()\n\tif parentSpace == nil {\n\t\treturn authz.NotAuthorized(\"\")\n\t}\n\n\t// Create a scope based on the parent space\n\tscope := paths.NewScope(parentSpace)\n\n\t// Create a resource based on the space name\n\tresource := paths.NewResource(space.Name())\n\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission\n\treturn Check(\n\t\tctx,\n\t\tauthorizer,\n\t\tsession,\n\t\tscope,\n\t\tresource,\n\t\tpermission,\n\t)\n}", "CodeBleu_score": 47.735882094317795}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t// Get the parent space and name.\n\tparentSpace, name := paths.GetParentSpace(space.Path)\n\n\t// Create a scope and resource based on the parent space and name.\n\tscope := &authz.Scope{\n\t\tSpace: parentSpace,\n\t\tName:  name,\n\t}\n\tresource := &authz.Resource{\n\t\tScope: scope,\n\t}\n\n\t// Check the permission.\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 56.9961126887415}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\tvar err error\n\tif len(source) == 0 {\n\t\tsource, err = json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tvar decoded interface{}\n\tif err = json.Unmarshal(source, &decoded); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err = json.Unmarshal(source, &decoded); err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar encoded []byte\n\tif encoded, err = json.Marshal(decoded); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn bytes.TrimSuffix(encoded, []byte(\"\n\")), nil\n}", "CodeBleu_score": 41.510152148889865}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\tif len(source) == 0 {\n\t\tmarshaled, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"failed to marshal data: %w\", err)\n\t\t}\n\t\tsource = marshaled\n\t}\n\n\tvar decoded map[string]any\n\tif err := json.Unmarshal(source, &decoded); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to unmarshal data: %w\", err)\n\t}\n\n\tvar encoded bytes.Buffer\n\tif err := json.NewEncoder(&encoded).Encode(decoded); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to re-encode data: %w\", err)\n\t}\n\n\tsanitized := encoded.Bytes()\n\tsanitized = bytes.TrimRight(sanitized, \"\n\")\n\treturn sanitized, nil\n}", "CodeBleu_score": 52.534880088052006}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\tif len(source) == 0 {\n\t\tsource, _ = json.Marshal(data)\n\t}\n\n\tvar sanitized json.RawMessage\n\tif err := json.Unmarshal(source, &sanitized); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to unmarshal JSON payload: %w\", err)\n\t}\n\n\tsanitized, err := json.Marshal(sanitized)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to marshal JSON payload: %w\", err)\n\t}\n\n\tsanitized = bytes.TrimSuffix(sanitized, []byte(\"\n\"))\n\treturn sanitized, nil\n}", "CodeBleu_score": 41.915148611435015}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\trepo, err := c.repoStore.Get(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif err := c.authorizer.CheckAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\treturn repo, nil\n}", "CodeBleu_score": 40.81116925576982}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t// Validate the repository reference.\n\trepo, err := c.repoStore.GetRepository(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check access permissions.\n\tif err := c.authorizer.CheckAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 41.53678436871843}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t// Validate the repo reference\n\trepo, err := c.repoStore.GetRepoByRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check access\n\terr = c.authorizer.CheckAccess(ctx, session, repo, reqPermission)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 45.53988780443892}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tcheckSanitizers := map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty:   sanitizeEmptyPayload,\n\t\tenum.CheckPayloadKindRaw:     sanitizeRawPayload,\n\t\tenum.CheckPayloadKindMarkdown: sanitizeRawPayload,\n\t\tenum.CheckPayloadKindPipeline: sanitizePipelinePayload,\n\t}\n\n\treturn checkSanitizers\n}", "CodeBleu_score": 29.81547117604221}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty:   SanitizeEmptyPayload,\n\t\tenum.CheckPayloadKindRaw:     SanitizeRawPayload,\n\t\tenum.CheckPayloadKindMarkdown: SanitizeRawPayload,\n\t\tenum.CheckPayloadKindPipeline: SanitizePipelinePayload,\n\t}\n}", "CodeBleu_score": 26.51450165175034}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tsanitizers := map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: sanitizeEmptyPayload,\n\t\tenum.CheckPayloadKindRaw:   sanitizeRawPayload,\n\t\tenum.CheckPayloadKindMarkdown: sanitizeRawPayload,\n\t\tenum.CheckPayloadKindPipeline: sanitizePipelinePayload,\n\t}\n\n\treturn sanitizers\n}", "CodeBleu_score": 29.051546156640605}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\tself.state.on_render = on_render\n  if not self.state.is_attached_to_screen then\n    self:attach_to_screen()\n  end\n  return self", "CodeBleu_score": 45.52392789709263}, {"code": "function Buffer:attach_to_renderer(on_render)\n\tself.state.on_render = on_render\n  if not self.state.is_attached_to_screen then\n    self:attach_to_screen()\n  end\n  return self", "CodeBleu_score": 45.52392789709263}, {"code": "function Buffer:attach_to_renderer(on_render)\n\tself.state.on_render = on_render\n  self.state.is_attached_to_screen = true\n  self.renderer = renderer\n  self.renderer:attach_to_screen(self)\n  return self", "CodeBleu_score": 53.239831244417736}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\tif not self:is_in_disk() then\n    return\n  end\n  local filename = self.filename\n  local watcher = self.watcher\n  watcher:watch(filename, callback)", "CodeBleu_score": 30.820757153686507}, {"code": "function Buffer:watch(callback)\n\tlocal filename = self.filename\n  if not filename or filename == '' then\n    return \n  end\n  if not fs.exists(filename) then\n    return \n  end\n  if not callback then\n    return \n  end\n  local watcher = self.watcher\n  watcher:watch(filename, callback)", "CodeBleu_score": 35.76686556737824}, {"code": "function Buffer:watch(callback)\n\tif not self:is_in_disk() then\n    return\n  end\n  local filename = self.filename\n  local bufnr = self.bufnr\n  local watcher = self.watcher\n  local state = self.state\n  local on_render = state.on_render\n  local is_processing = state.is_processing\n  if is_processing then\n    return\n  end\n  state.is_processing = true\n  watcher:watch(filename, function()\n    if not self:is_in_disk() then\n      return\n    end\n    if is_processing then\n      return\n    end\n    state.is_processing = true\n    local top, bot = on_render(self)\n    if top and bot then\n      self:on_render(top, bot)\n    end\n    state.is_processing = false\n  end)\n  if callback then\n    callback(self)\n  end\n  state.is_processing = false", "CodeBleu_score": 37.18549430681393}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\tif self.hex then\n    return self.hex\n  end\n  local spec = self.spec\n  local attr = spec.attr\n  local hex\n  if spec.type == 'gui' then\n    hex = vim.api.nvim_get_hl_by_name(attr, true)\n  else\n    hex = vim.api.nvim_get_hl_by_id(attr, true)\n  end\n  if hex then\n    hex = Rgb.to_hex(hex)\n    self.hex = hex\n  end\n  return hex", "CodeBleu_score": 55.809182991214016}, {"code": "function Color:to_hex()\n\tif self.hex then\n    return self.hex\n  end\n  local spec = self.spec\n  local rgb = self.rgb\n  if not rgb then\n    local hsl = spec.hsl\n    rgb = Rgb.from_hsl(hsl)\n  end\n  local hex = rgb:to_hex()\n  self.hex = hex\n  return hex", "CodeBleu_score": 47.75650329934362}, {"code": "function Color:to_hex()\n\tif self.hex then\n    return self.hex\n  end\n  local spec = self.spec\n  local rgb = self.rgb\n  if not rgb then\n    local attr = spec.attr\n    if attr == 'fg' then\n      rgb = vim.api.nvim_get_hl_by_name(spec.group, true)\n    elseif attr == 'bg' then\n      rgb = vim.api.nvim_get_hl_by_name(spec.group, false)\n    end\n    self.rgb = rgb\n  end\n  if not rgb then\n    return\n  end\n  local r, g, b = rgb.r, rgb.g, rgb.b\n  self.hex = Rgb:new({r, g, b}):to_hex()\n  return self.hex", "CodeBleu_score": 54.62320262209354}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\tlocal lines = buffer:get_lines()\n  local line_count = #lines\n  local col_start, col_end\n  local row = 1\n  while row <= line_count do\n    local line = lines[row]\n    local _, col_start_tmp, col_end_tmp = line:find(pattern)\n    if col_start_tmp then\n      col_start = col_start_tmp\n      col_end = col_end_tmp\n      buffer:add_highlight(row, col_start, col_end, hl)\n    end\n    row = row + 1\n  end\n  return self", "CodeBleu_score": 56.264301165799225}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\tlocal lines = buffer:get_lines() \n  local pattern_hl = signs_setting.pattern_highlights[hl] \n  if not pattern_hl then return self end \n  for i, line in ipairs(lines) do \n    local matches = string.gmatch(line, pattern) \n    for match in matches do \n      local col_start, col_end = line:find(match) \n      if col_start and col_end then \n        self:add_highlight(buffer, pattern_hl, i, col_start, col_end) \n      end \n    end \n  end \n  return self ", "CodeBleu_score": 46.459507869805854}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\tlocal lines = buffer:get_lines()\n  for i, line in ipairs(lines) do\n    local start, finish = string.find(line, pattern)\n    if start then\n      self:add_highlight(buffer, hl, i, start, finish)\n    end\n  end\n  return self", "CodeBleu_score": 42.7675403815415}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\tlocal id = string.format('%s:%s:%s:%s', buffer.bufnr, row, col, pos)\n  local extmark_opts = {\n    id = id,\n    end_line = row,\n    end_col = col,\n    hl_group = hl,\n    virt_text = {\n      {text, pos}\n    },\n    virt_text_pos = 'eol',\n    priority = priority or 0\n  }\n  buffer:set_extmark(extmark_opts)\n  return id", "CodeBleu_score": 58.86959870779018}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\tlocal id = self:get_virtual_text_id(buffer, row, col)\n  vim.api.nvim_buf_set_extmark(buffer.bufnr, self.ns_id, row, col, {\n    id = id,\n    virt_text = {\n      {\n        text,\n        hl\n      }\n    },\n    virt_text_pos = pos,\n    hl_mode = 'combine',\n    priority = priority\n  })\n  return id", "CodeBleu_score": 72.24036995683907}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\tlocal id = string.format('%s-%s-%s-%s', buffer.bufnr, row, col, pos)\n  local extmark_opts = {\n    id = id,\n    row = row,\n    col = col,\n    hl_group = hl,\n    end_row = row,\n    end_col = col,\n    virt_text = {\n      { text, pos },\n    },\n    virt_text_pos = 'overlay',\n    priority = priority,\n  }\n  vim.api.nvim_buf_set_extmark(buffer.bufnr, self.ns_id, row, col, extmark_opts)\n  return id", "CodeBleu_score": 60.914388260490014}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\tlocal line = ''\n  local result = ''\n  for i = 1, #output do\n    local char = output:sub(i, i)\n    if char == '", "CodeBleu_score": 23.807908477402012}, {"code": "function Spawn:parse_result(output, callback)\n\tlocal lines = {}\n    local line = ''\n    for i = 1, #output do\n        local char = output:sub(i, i)\n        if char == '", "CodeBleu_score": 27.900115001824766}, {"code": "function Spawn:parse_result(output, callback)\n\tlocal lines = {}\n  local line = ''\n  for i = 1, #output do\n    local char = output:sub(i, i)\n    if char == '", "CodeBleu_score": 26.860577554473643}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\tif self.watcher then\n    return self.watcher\n  end\n  self.watcher = luv.new_fs_event()\n  luv.fs_event_start(self.watcher, path, {\n    recursive = true,\n    persistent = true,\n  }, handler)\n  return self.watcher", "CodeBleu_score": 61.597294758845145}, {"code": "function Watcher:watch_file(path, handler)\n\tif self.watcher then\n    return self.watcher\n  end\n  self.watcher = luv.new_fs_event()\n  luv.fs_event_start(self.watcher, path, {\n    persistent = false,\n    recursive = false,\n  }, handler)\n  return self.watcher", "CodeBleu_score": 69.83731937154252}, {"code": "function Watcher:watch_file(path, handler)\n\tif self.watcher then\n    return self.watcher\n  end\n  self.watcher = luv.new_fs_event()\n  luv.fs_event_start(self.watcher, path, {\n    persistent = true,\n    recursive = false,\n  }, function(err, code, pid)\n    if err then\n      return handler(err)\n    end\n    if code == 'renamed' then\n      handler('renamed')\n    else\n      handler(nil)\n    end\n  end)\n  loop.run(self.interval)\n  return self.watcher", "CodeBleu_score": 62.36423671202158}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\tlocal lines = self:get_lines()\n  local hunks = self.git_object:live_hunks(lines)\n  if not hunks then\n    return hunks\n  end\n  self:clear_signs()\n  for _, hunk in ipairs(hunks) do\n    for _, line in ipairs(hunk) do\n      self:set_sign(line.line, line.type, line.priority)\n    end\n  end\n  self:update_signs()\n  return hunks", "CodeBleu_score": 29.239473137043454}, {"code": "function GitBuffer:live_hunks()\n\tlocal lines = self:get_lines()\n  local git_object = self.git_object\n  local hunks = {}\n  local signs = {}\n  local signs_by_line = {}\n  local signs_by_type = {}\n  local signs_by_priority = {}\n  local signs_by_type_by_priority = {}\n  local signs_by_line_by_priority = {}\n  local signs_by_type_by_line_by_priority = {}\n  local signs_by_type_by_line = {}\n  local signs_by_type_by_line_by_priority = {}\n  local signs_by_type_by_line_by_priority_by_type = {}\n  local signs_by_type_by_line_by_priority_by_type_by_type = {}\n  local signs_by_type_by_line_by_priority_by_type_by_type_by_type = {}\n  local signs_by_type_by_line_by_priority_by_type_by_type_by_type_by_type = {}\n  local signs_by_type_by_line_by_priority_by_type_by_type_by_type_by_type_by_type = {}\n  local signs_by_type_by_line_by_priority_by_type_by_type_by_type_by_type_by_type_by_type = {}\n  local signs_by_type_by_line_by_priority_by_type_by_type_by_type_by_type_by_type_by_type_by_type = {}\n  local signs_by_type_by_line_by_priority_by_type_by_type_by_type_by_type_by_type_by_type_by_type_by_type = {}\n  local signs_by_type_by_line_by_priority_by_type_by_type_by_type_by_type_by_type_by_type_by_type_by_type_by_type = {}\n  local signs_by_type_by_line_", "CodeBleu_score": 17.36774684421843}, {"code": "function GitBuffer:live_hunks()\n\tlocal hunks, err = self.git_object:live_hunks()\n  if err then return err end\n  if #hunks == 0 then return end\n  for _, hunk in ipairs(hunks) do\n    local lines = vim.api.nvim_buf_get_lines(self.bufnr, hunk.start - 1, hunk.stop, false)\n    for i, line in ipairs(lines) do\n      local sign = signs_setting.signs[hunk.type]\n      local priority = signs_setting.priorities[hunk.type]\n      self:set_sign(hunk.type, hunk.start + i - 1, line, sign, priority)\n    end\n  end\n  return hunks", "CodeBleu_score": 40.2940795494916}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\tlocal temp_file = self.git:temp_filename()\n  local temp_file_path = self.git:temp_filepath()\n  local temp_file_handle = io.open(temp_file_path, 'w')\n  temp_file_handle:write(patch)\n  temp_file_handle:close()\n  local _, err = self.git:stage_hunk_from_patch(self.filename.native, temp_file)\n  os.remove(temp_file_path)\n  return err", "CodeBleu_score": 49.3855976413487}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\tlocal hunk = patch:get_hunk()\n  local filename = self.git:tracked_full_filename(self.filename.native)\n  local temp_filename = utils.temp_filename()\n  local temp_file = io.open(temp_filename, 'w')\n  temp_file:write(hunk:get_content())\n  temp_file:close()\n  local cmd = self.git:stage_hunk(filename, temp_filename, hunk:get_line_start(), hunk:get_line_end())\n  local success, err = loop.await_task(cmd)\n  os.remove(temp_filename)\n  return success, err", "CodeBleu_score": 49.86807182626257}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\tlocal filename = self.git:tracked_full_filename(self.filename.native)\n  local temp_filename = utils.temp_filename()\n  local temp_file = io.open(temp_filename, 'w')\n  temp_file:write(patch.content)\n  temp_file:close()\n  local _, _, err = self.git:stage_hunk_from_patch(filename, temp_filename, patch.hunk)\n  fs.remove_file(temp_filename)\n  return err", "CodeBleu_score": 54.63255157287584}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tOAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());\n    request.addHeader(OAuthConstants.HEADER, OAuthConstants.AUTHORIZATION_HEADER_PREFIX + \" \" + config.getApiKey() + \":\" + config.getApiSecret());\n    request.addBodyParameter(GRANT_TYPE_KEY, GRANT_TYPE_CLIENT_CREDENTIALS);\n    Response response = request.send();\n    return api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 79.65446704132563}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tOAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());\n\n    request.addHeader(\"Authorization\", \"Basic \" + Base64.encodeBytes((config.getApiKey() + \":\" + config.getApiSecret()).getBytes(StandardCharsets.UTF_8)));\n\n    request.addBodyParameter(GRANT_TYPE_KEY, GRANT_TYPE_CLIENT_CREDENTIALS);\n\n    Response response = request.send();\n\n    return api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 75.13467195426489}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tOAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());\n    request.addHeader(\"Accept\", \"application/json\");\n    request.addHeader(\"Authorization\", \"Basic \" + Base64.encodeBytes(config.getApiKey().getBytes(StandardCharsets.UTF_8)));\n    request.addBodyParameter(GRANT_TYPE_KEY, GRANT_TYPE_CLIENT_CREDENTIALS);\n    Response response = request.send();\n    return api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 76.40684814492565}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(new AuthScope(host), httpCredentials);\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n    context.setCredentialsProvider(credsProvider);\n    context.setAuthCache(authCache);\n    LOGGER.log(Level.FINE, \"Added host {0} to authentication cache\", host);\n}", "CodeBleu_score": 78.73377673986526}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), httpCredentials);\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n    context.setCredentialsProvider(credsProvider);\n    context.setAuthCache(authCache);\n    LOGGER.log(Level.FINE, \"Adding {0} to the authentication cache.\", host);\n}", "CodeBleu_score": 73.5528122243188}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(new AuthScope(host), httpCredentials);\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n    context.setCredentialsProvider(credsProvider);\n    context.setAuthCache(authCache);\n    LOGGER.log(Level.FINE, \"Adding host {0} to the auth cache\", host);\n}", "CodeBleu_score": 78.45081859138577}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tJenkins jenkins = Jenkins.getInstanceOrNull();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Cannot build URL outside of a request handling thread.\");\n    }\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache extension is not installed.\");\n    }\n    String key = cache.generateKey(source);\n    if (key == null) {\n        throw new IllegalStateException(\"Cannot build URL outside of a request handling thread.\");\n    }\n    cache.seed(key, source);\n    String url = jenkins.getRootUrl() + ActionURI + \"/\" + key + \"/\" + size;\n    try {\n        url = URLEncoder.encode(url, StandardCharsets.UTF_8.name());\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding is unsupported.\");\n    }\n    return url;\n}", "CodeBleu_score": 52.72092122461657}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tJenkins jenkins = Jenkins.getInstanceOrNull();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins instance not found\");\n    }\n    AvatarCache avatarCache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (avatarCache == null) {\n        throw new IllegalStateException(\"AvatarCache extension not found\");\n    }\n    String cacheKey = avatarCache.getCacheKey(source);\n    avatarCache.seedCache(cacheKey, size);\n    String encodedKey;\n    try {\n        encodedKey = URLEncoder.encode(cacheKey, StandardCharsets.UTF_8.name());\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding not supported\", e);\n    }\n    return jenkins.getRootUrl() + ActionURI + \"/\" + encodedKey + \"/\" + size;\n}", "CodeBleu_score": 58.2596109350997}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tJenkins jenkins = Jenkins.getInstance();\n    AvatarCache avatarCache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (avatarCache == null) {\n        throw new IllegalStateException(\"AvatarCache not found\");\n    }\n    String cacheKey = avatarCache.generateCacheKey(source);\n    avatarCache.seedCache(cacheKey, source);\n    String url = jenkins.getRootUrl() + AvatarCache.ActionURI + \"/\" + URLEncoder.encode(cacheKey, StandardCharsets.UTF_8.name()) + \"/\" + size;\n    return url;\n}", "CodeBleu_score": 46.87857603186947}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t;\n    }", "CodeBleu_score": 6.3726230641916235}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t;\n    }", "CodeBleu_score": 6.3726230641916235}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t;\n    }", "CodeBleu_score": 6.3726230641916235}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t');\n        // we will only resize images in the 16x16 - 128x128 range\n        if (index < 2) {\n            try {\n                targetSize = Math.min(128, Math.max(16, Integer.parseInt(StringUtils.trim(size))));\n            } catch (NumberFormatException e) {\n                // ignore\n            }\n        } else {\n            try {\n                targetSize = Math.min(128, Math.max(16, Integer.parseInt(StringUtils.trim(size.substring(0, index)))));\n            } catch (NumberFormatException e) {\n                // ignore\n            }\n        }\n        final CacheEntry avatar = getCacheEntry(key, null);\n        final long since = req.getDateHeader(\\\"If-Modified-Since\\\");\n\n        // If no avatar, all is unmodified\n        if (avatar == null || !avatar.canFetch()) {\n            if (startedTime <= since) {\n                return new HttpResponse() {\n                    @Override\n                    public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                            throws IOException, ServletException {\n                        rsp.addDateHeader(\\\"Last-Modified\\\", startedTime);\n                        rsp.addHeader(\\\"Cache-control\\\", \\\"max-age=365000000, immutable, public\\\");\n                        rsp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                    }\n                };\n            }\n            // we will generate avatars if the URL is not HTTP based\n            // since the url string will not magically turn itself into a HTTP url this\n            // avatar is immutable\n            return new ImageResponse(generateAvatar(avatar == null ? \\\"\\\" : avatar.source.hashKey(), targetSize), true,\n                    startedTime, \\\"max-age=365000000, immutable, public\\\");\n        }\n\n        if (avatar.pending() && avatar.image == null) {\n            // serve a temporary avatar until we get the remote one, no caching as we could\n            // have the real deal\n            // real soon now\n            return new ImageResponse(generateAvatar(avatar.source.hashKey(), targetSize), true, -1L,\n                    \\\"no-cache, public\\\");\n        }\n        if (avatar.lastModified <= since) {\n            return new HttpResponse() {\n\n                @Override\n                public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                        throws IOException, ServletException {\n                    rsp.addDateHeader(\\\"Last-Modified\\\", avatar.lastModified);\n                    rsp.addHeader(\\\"Cache-control\\\", \\\"max-age=3600, public\\\");\n                    rsp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                }\n            };\n        }\n        // If no image, generate a temp avatar\n        if (avatar.image == null) {\n            // we can retry in an hour\n            return new ImageResponse(generateAvatar(avatar.source.hashKey(), targetSize), true, -1L,\n                    \\\"max-age=3600, public\\\");\n        }\n\n        BufferedImage image = avatar.image;\n        boolean flushImage = false;\n        if (image.getWidth() != targetSize || image.getHeight() != targetSize) {\n            image = scaleImage(image, targetSize);\n            flushImage = true;\n        }\n        return new ImageResponse(image, flushImage, avatar.lastModified, \\\"max-age=3600, public\\\");\n    }", "CodeBleu_score": 28.26258490588994}, {"code": "private synchronized boolean pending(){\n\t');\n        // we will only resize images in the 16x16 - 128x128 range\n        if (index < 2) {\n            try {\n                targetSize = Math.min(128, Math.max(16, Integer.parseInt(StringUtils.trim(size))));\n            } catch (NumberFormatException e) {\n                // ignore\n            }\n        } else {\n            try {\n                targetSize = Math.min(128, Math.max(16, Integer.parseInt(StringUtils.trim(size.substring(0, index)))));\n            } catch (NumberFormatException e) {\n                // ignore\n            }\n        }\n        final CacheEntry avatar = getCacheEntry(key, null);\n        final long since = req.getDateHeader(\\\"If-Modified-Since\\\");\n\n        // If no avatar, all is unmodified\n        if (avatar == null || !avatar.canFetch()) {\n            if (startedTime <= since) {\n                return new HttpResponse() {\n                    @Override\n                    public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                            throws IOException, ServletException {\n                        rsp.addDateHeader(\\\"Last-Modified\\\", startedTime);\n                        rsp.addHeader(\\\"Cache-control\\\", \\\"max-age=365000000, immutable, public\\\");\n                        rsp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                    }\n                };\n            }\n            // we will generate avatars if the URL is not HTTP based\n            // since the url string will not magically turn itself into a HTTP url this\n            // avatar is immutable\n            return new ImageResponse(generateAvatar(avatar == null ? \\\"\\\" : avatar.source.hashKey(), targetSize), true,\n                    startedTime, \\\"max-age=365000000, immutable, public\\\");\n        }\n\n        if (avatar.pending() && avatar.image == null) {\n            // serve a temporary avatar until we get the remote one, no caching as we could\n            // have the real deal\n            // real soon now\n            return new ImageResponse(generateAvatar(avatar.source.hashKey(), targetSize), true, -1L,\n                    \\\"no-cache, public\\\");\n        }\n        if (avatar.lastModified <= since) {\n            return new HttpResponse() {\n\n                @Override\n                public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                        throws IOException, ServletException {\n                    rsp.addDateHeader(\\\"Last-Modified\\\", avatar.lastModified);\n                    rsp.addHeader(\\\"Cache-control\\\", \\\"max-age=3600, public\\\");\n                    rsp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                }\n            };\n        }\n        // If no image, generate a temp avatar\n        if (avatar.image == null) {\n            // we can retry in an hour\n            return new ImageResponse(generateAvatar(avatar.source.hashKey(), targetSize), true, -1L,\n                    \\\"max-age=3600, public\\\");\n        }\n\n        BufferedImage image = avatar.image;\n        boolean flushImage = false;\n        if (image.getWidth() != targetSize || image.getHeight() != targetSize) {\n            image = scaleImage(image, targetSize);\n            flushImage = true;\n        }\n        return new ImageResponse(image, flushImage, avatar.lastModified, \\\"max-age=3600, public\\\");\n    }", "CodeBleu_score": 28.26258490588994}, {"code": "private synchronized boolean pending(){\n\t');\n        // we will only resize images in the 16x16 - 128x128 range\n        if (index < 2) {\n            try {\n                targetSize = Math.min(128, Math.max(16, Integer.parseInt(StringUtils.trim(size))));\n            } catch (NumberFormatException e) {\n                // ignore\n            }\n        } else {\n            try {\n                targetSize = Math.min(128, Math.max(16, Integer.parseInt(StringUtils.trim(size.substring(0, index)))));\n            } catch (NumberFormatException e) {\n                // ignore\n            }\n        }\n        final CacheEntry avatar = getCacheEntry(key, null);\n        final long since = req.getDateHeader(\\\"If-Modified-Since\\\");\n\n        // If no avatar, all is unmodified\n        if (avatar == null || !avatar.canFetch()) {\n            if (startedTime <= since) {\n                return new HttpResponse() {\n                    @Override\n                    public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                            throws IOException, ServletException {\n                        rsp.addDateHeader(\\\"Last-Modified\\\", startedTime);\n                        rsp.addHeader(\\\"Cache-control\\\", \\\"max-age=365000000, immutable, public\\\");\n                        rsp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                    }\n                };\n            }\n            // we will generate avatars if the URL is not HTTP based\n            // since the url string will not magically turn itself into a HTTP url this\n            // avatar is immutable\n            return new ImageResponse(generateAvatar(avatar == null ? \\\"\\\" : avatar.source.hashKey(), targetSize), true,\n                    startedTime, \\\"max-age=365000000, immutable, public\\\");\n        }\n\n        if (avatar.pending() && avatar.image == null) {\n            // serve a temporary avatar until we get the remote one, no caching as we could\n            // have the real deal\n            // real soon now\n            return new ImageResponse(generateAvatar(avatar.source.hashKey(), targetSize), true, -1L,\n                    \\\"no-cache, public\\\");\n        }\n        if (avatar.lastModified <= since) {\n            return new HttpResponse() {\n\n                @Override\n                public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                        throws IOException, ServletException {\n                    rsp.addDateHeader(\\\"Last-Modified\\\", avatar.lastModified);\n                    rsp.addHeader(\\\"Cache-control\\\", \\\"max-age=3600, public\\\");\n                    rsp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                }\n            };\n        }\n        // If no image, generate a temp avatar\n        if (avatar.image == null) {\n            // we can retry in an hour\n            return new ImageResponse(generateAvatar(avatar.source.hashKey(), targetSize), true, -1L,\n                    \\\"max-age=3600, public\\\");\n        }\n\n        BufferedImage image = avatar.image;\n        boolean flushImage = false;\n        if (image.getWidth() != targetSize || image.getHeight() != targetSize) {\n            image = scaleImage(image, targetSize);\n            flushImage = true;\n        }\n        return new ImageResponse(image, flushImage, avatar.lastModified, \\\"max-age=3600, public\\\");\n    }", "CodeBleu_score": 28.26258490588994}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t           return new ImageResponse(generateAvatar(avatar.source.hashKey(), targetSize), true, -1L,\n                    \\\"no-cache, public\\\");\n        }", "CodeBleu_score": 13.051076738534718}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t           return new ImageResponse(generateAvatar(avatar.source.hashKey(), targetSize), true, -1L,\n                    \\\"no-cache, public\\\");\n        }", "CodeBleu_score": 13.051076738534718}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t           return new ImageResponse(generateAvatar(avatar.source.hashKey(), targetSize), true, -1L,\n                    \\\"no-cache, public\\\");\n        }", "CodeBleu_score": 13.051076738534718}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tbucketPullRequestValue;", "CodeBleu_score": 7.504665870882987}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tbucketPullRequestValue;", "CodeBleu_score": 7.504665870882987}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tbucketPullRequestValue;", "CodeBleu_score": 7.504665870882987}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t_URL = \\\"https://api.bitbucket.org/2.0/repositories\\\";\n    private static final String V2_WORKSPACES_API_BASE_URL = \\\"https://api.bitbucket.org/2.0/workspaces\\\";\n    private static final String REPO_URL_TEMPLATE = V2_API_BASE_URL + \\\"{/owner,repo}\\\";\n    private static final int API_RATE_LIMIT_CODE = 429;\n    // Limit images to 16k\n    private static final int MAX_AVATAR_LENGTH = 16384;\n    private static final int MAX_PAGE_LENGTH = 100;\n    private static final PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();\n    private CloseableHttpClient client;\n    private HttpClientContext context;\n    private final String owner;\n    private final String projectKey;\n    private final String repositoryName;\n    private final boolean enableCache;\n    private final BitbucketAuthenticator authenticator;\n    private static final Cache<String, BitbucketTeam> cachedTeam = new Cache<>(6, HOURS);\n    private static final Cache<String, AvatarImage> cachedAvatar = new Cache<>(6, HOURS);\n    private static final Cache<String, List<BitbucketCloudRepository>> cachedRepositories = new Cache<>(3, HOURS);\n    private static final Cache<String, BitbucketCloudCommit> cachedCommits = new Cache<>(24, HOURS);\n    private transient BitbucketRepository cachedRepository;\n    private transient String cachedDefaultBranch;\n\n    static {\n        connectionManager.setDefaultMaxPerRoute(20);\n        connectionManager.setMaxTotal(22);\n        connectionManager.setSocketConfig(API_HOST, SocketConfig.custom().setSoTimeout(60 * 1000).build());\n    }\n\n    public static List<String> stats() {\n        List<String> stats = new ArrayList<>();\n        stats.add(\\\"Team: \\\" + cachedTeam.stats().toString());\n        stats.add(\\\"Repositories : \\\" + cachedRepositories.stats().toString());\n        stats.add(\\\"Commits: \\\" + cachedCommits.stats().toString());\n        return stats;\n    }\n\n    public static void clearCaches() {\n        cachedTeam.evictAll();\n        cachedRepositories.evictAll();\n        cachedCommits.evictAll();\n    }\n\n    @Deprecated\n    public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n                                   String owner, String repositoryName, StandardUsernamePasswordCredentials credentials) {\n        this(enableCache, teamCacheDuration, repositoriesCacheDuration, owner, null, repositoryName,\n                new BitbucketUsernamePasswordAuthenticator(credentials));\n    }\n\n    public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator) {\n        this.authenticator = authenticator;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.enableCache = enableCache;\n        if (enableCache) {\n            cachedTeam.setExpireDuration(teamCacheDuration, MINUTES);\n            cachedRepositories.setExpireDuration(repositoriesCacheDuration, MINUTES);\n        }\n\n        // Create Http client\n        HttpClientBuilder httpClientBuilder = HttpClientBuilder.create();\n\n        httpClientBuilder.setKeepAliveStrategy((__, ___) -> MILLISECONDS.convert(5, SECONDS));\n        httpClientBuilder.setConnectionManager(connectionManager);\n        httpClientBuilder.setConnectionManagerShared(true);\n        httpClientBuilder.setRetryHandler(new StandardHttpRequestRetryHandler());\n\n        if (authenticator != null) {\n            authenticator.configureBuilder(httpClientBuilder);\n\n            context = HttpClientContext.create();\n            authenticator.configureContext(context, API_HOST);\n        }\n\n        setClientProxyParams(\\\"bitbucket.org\\\", httpClientBuilder);\n\n        this.client = httpClientBuilder.build();\n    }\n\n    @Override\n    protected void finalize() throws Throwable {\n        if (client != null) {\n            client.close();\n        }\n\n        super.finalize();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @NonNull\n    @Override\n    public String getOwner() {\n        return owner;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    @CheckForNull\n    public String getRepositoryName() {\n        return repositoryName;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @NonNull\n    @Override\n    public List<BitbucketPullRequestValue> getPullRequests() throws InterruptedException, IOException {\n        List<BitbucketPullRequestValue> pullRequests = new ArrayList<>();\n\n        // we can not use the default max pagelen also if documented\n        // https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests#get\n        // so because with values greater than 50 the API returns HTTP 400\n        int pageLen = 50;\n        UriTemplate template = UriTemplate.fromTemplate(REPO_URL_TEMPLATE + \\\"/pullrequests{?page,pagelen}\\\")\n                .set(\\\"owner\\\", owner)\n                .set(\\\"repo\\\", repositoryName)\n                .set(\\\"pagelen\\\", pageLen);\n\n        BitbucketPullRequests page;\n        int pageNumber = 1;\n        do {\n            if (Thread.interrupted()) {\n                throw new InterruptedException();\n            }\n            String url = template //\n                    .set(\\\"page\\\", pageNumber++) //\n                    .expand();\n            String response = getRequest(url);\n            try {\n                page = JsonParser.toJava(response, BitbucketPullRequests.class);\n            } catch (IOException e) {\n                throw new IOException(\\\"I/O error when parsing response from URL: \\\" + url, e);\n            }\n            pullRequests.addAll(page.getValues());\n        } while (page.getNext() != null);\n\n        // PRs with missing destination branch are invalid and should be ignored.\n        pullRequests.removeIf(this::shouldIgnore);\n\n        for (BitbucketPullRequestValue pullRequest : pullRequests) {\n            setupClosureForPRBranch(pullRequest);\n        }\n\n        return pullRequests;\n    }\n\n    /**\n     * PRs with missing source / destination branch are invalid and should be ignored.\n     *\n     * @param pr a {@link BitbucketPullRequest}\n     * @return whether the PR should be ignored\n     */\n    private boolean shouldIgnore(BitbucketPullRequest pr) {\n        return pr.getSource().getRepository() == null\n            || pr.getSource().getCommit() == null\n            || pr.getDestination().getBranch() == null\n            || pr.getDestination().getCommit() == null;\n    }\n\n    /**\n     * Make available commit information in a lazy way.\n     *\n     * @author Nikolas Falco\n     */\n    private class CommitClosure implements Callable<BitbucketCommit> {\n        private final String hash;\n\n        public CommitClosure(@NonNull String hash) {\n            this.hash = hash;\n        }\n\n        @Override\n        public BitbucketCommit call() throws Exception {\n            return resolveCommit(hash);\n        }\n    }\n\n\n\n", "CodeBleu_score": 5.064932050291124}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t_URL = \\\"https://api.bitbucket.org/2.0/repositories\\\";\n    private static final String V2_WORKSPACES_API_BASE_URL = \\\"https://api.bitbucket.org/2.0/workspaces\\\";\n    private static final String REPO_URL_TEMPLATE = V2_API_BASE_URL + \\\"{/owner,repo}\\\";\n    private static final int API_RATE_LIMIT_CODE = 429;\n    // Limit images to 16k\n    private static final int MAX_AVATAR_LENGTH = 16384;\n    private static final int MAX_PAGE_LENGTH = 100;\n    private static final PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();\n    private CloseableHttpClient client;\n    private HttpClientContext context;\n    private final String owner;\n    private final String projectKey;\n    private final String repositoryName;\n    private final boolean enableCache;\n    private final BitbucketAuthenticator authenticator;\n    private static final Cache<String, BitbucketTeam> cachedTeam = new Cache<>(6, HOURS);\n    private static final Cache<String, AvatarImage> cachedAvatar = new Cache<>(6, HOURS);\n    private static final Cache<String, List<BitbucketCloudRepository>> cachedRepositories = new Cache<>(3, HOURS);\n    private static final Cache<String, BitbucketCloudCommit> cachedCommits = new Cache<>(24, HOURS);\n    private transient BitbucketRepository cachedRepository;\n    private transient String cachedDefaultBranch;\n\n    static {\n        connectionManager.setDefaultMaxPerRoute(20);\n        connectionManager.setMaxTotal(22);\n        connectionManager.setSocketConfig(API_HOST, SocketConfig.custom().setSoTimeout(60 * 1000).build());\n    }\n\n    public static List<String> stats() {\n        List<String> stats = new ArrayList<>();\n        stats.add(\\\"Team: \\\" + cachedTeam.stats().toString());\n        stats.add(\\\"Repositories : \\\" + cachedRepositories.stats().toString());\n        stats.add(\\\"Commits: \\\" + cachedCommits.stats().toString());\n        return stats;\n    }\n\n    public static void clearCaches() {\n        cachedTeam.evictAll();\n        cachedRepositories.evictAll();\n        cachedCommits.evictAll();\n    }\n\n    @Deprecated\n    public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n                                   String owner, String repositoryName, StandardUsernamePasswordCredentials credentials) {\n        this(enableCache, teamCacheDuration, repositoriesCacheDuration, owner, null, repositoryName,\n                new BitbucketUsernamePasswordAuthenticator(credentials));\n    }\n\n    public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator) {\n        this.authenticator = authenticator;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.enableCache = enableCache;\n        if (enableCache) {\n            cachedTeam.setExpireDuration(teamCacheDuration, MINUTES);\n            cachedRepositories.setExpireDuration(repositoriesCacheDuration, MINUTES);\n        }\n\n        // Create Http client\n        HttpClientBuilder httpClientBuilder = HttpClientBuilder.create();\n\n        httpClientBuilder.setKeepAliveStrategy((__, ___) -> MILLISECONDS.convert(5, SECONDS));\n        httpClientBuilder.setConnectionManager(connectionManager);\n        httpClientBuilder.setConnectionManagerShared(true);\n        httpClientBuilder.setRetryHandler(new StandardHttpRequestRetryHandler());\n\n        if (authenticator != null) {\n            authenticator.configureBuilder(httpClientBuilder);\n\n            context = HttpClientContext.create();\n            authenticator.configureContext(context, API_HOST);\n        }\n\n        setClientProxyParams(\\\"bitbucket.org\\\", httpClientBuilder);\n\n        this.client = httpClientBuilder.build();\n    }\n\n    @Override\n    protected void finalize() throws Throwable {\n        if (client != null) {\n            client.close();\n        }\n\n        super.finalize();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @NonNull\n    @Override\n    public String getOwner() {\n        return owner;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    @CheckForNull\n    public String getRepositoryName() {\n        return repositoryName;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @NonNull\n    @Override\n    public List<BitbucketPullRequestValue> getPullRequests() throws InterruptedException, IOException {\n        List<BitbucketPullRequestValue> pullRequests = new ArrayList<>();\n\n        // we can not use the default max pagelen also if documented\n        // https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests#get\n        // so because with values greater than 50 the API returns HTTP 400\n        int pageLen = 50;\n        UriTemplate template = UriTemplate.fromTemplate(REPO_URL_TEMPLATE + \\\"/pullrequests{?page,pagelen}\\\")\n                .set(\\\"owner\\\", owner)\n                .set(\\\"repo\\\", repositoryName)\n                .set(\\\"pagelen\\\", pageLen);\n\n        BitbucketPullRequests page;\n        int pageNumber = 1;\n        do {\n            if (Thread.interrupted()) {\n                throw new InterruptedException();\n            }\n            String url = template //\n                    .set(\\\"page\\\", pageNumber++) //\n                    .expand();\n            String response = getRequest(url);\n            try {\n                page = JsonParser.toJava(response, BitbucketPullRequests.class);\n            } catch (IOException e) {\n                throw new IOException(\\\"I/O error when parsing response from URL: \\\" + url, e);\n            }\n            pullRequests.addAll(page.getValues());\n        } while (page.getNext() != null);\n\n        // PRs with missing destination branch are invalid and should be ignored.\n        pullRequests.removeIf(this::shouldIgnore);\n\n        for (BitbucketPullRequestValue pullRequest : pullRequests) {\n            setupClosureForPRBranch(pullRequest);\n        }\n\n        return pullRequests;\n    }\n\n    /**\n     * PRs with missing source / destination branch are invalid and should be ignored.\n     *\n     * @param pr a {@link BitbucketPullRequest}\n     * @return whether the PR should be ignored\n     */\n    private boolean shouldIgnore(BitbucketPullRequest pr) {\n        return pr.getSource().getRepository() == null\n            || pr.getSource().getCommit() == null\n            || pr.getDestination().getBranch() == null\n            || pr.getDestination().getCommit() == null;\n    }\n\n    /**\n     * Make available commit information in a lazy way.\n     *\n     * @author Nikolas Falco\n     */\n    private class CommitClosure implements Callable<BitbucketCommit> {\n        private final String hash;\n\n        public CommitClosure(@NonNull String hash) {\n            this.hash = hash;\n        }\n\n        @Override\n        public BitbucketCommit call() throws Exception {\n            return resolveCommit(hash);\n        }\n    }\n\n\n\n", "CodeBleu_score": 5.064932050291124}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t_URL = \\\"https://api.bitbucket.org/2.0/repositories\\\";\n    private static final String V2_WORKSPACES_API_BASE_URL = \\\"https://api.bitbucket.org/2.0/workspaces\\\";\n    private static final String REPO_URL_TEMPLATE = V2_API_BASE_URL + \\\"{/owner,repo}\\\";\n    private static final int API_RATE_LIMIT_CODE = 429;\n    // Limit images to 16k\n    private static final int MAX_AVATAR_LENGTH = 16384;\n    private static final int MAX_PAGE_LENGTH = 100;\n    private static final PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();\n    private CloseableHttpClient client;\n    private HttpClientContext context;\n    private final String owner;\n    private final String projectKey;\n    private final String repositoryName;\n    private final boolean enableCache;\n    private final BitbucketAuthenticator authenticator;\n    private static final Cache<String, BitbucketTeam> cachedTeam = new Cache<>(6, HOURS);\n    private static final Cache<String, AvatarImage> cachedAvatar = new Cache<>(6, HOURS);\n    private static final Cache<String, List<BitbucketCloudRepository>> cachedRepositories = new Cache<>(3, HOURS);\n    private static final Cache<String, BitbucketCloudCommit> cachedCommits = new Cache<>(24, HOURS);\n    private transient BitbucketRepository cachedRepository;\n    private transient String cachedDefaultBranch;\n\n    static {\n        connectionManager.setDefaultMaxPerRoute(20);\n        connectionManager.setMaxTotal(22);\n        connectionManager.setSocketConfig(API_HOST, SocketConfig.custom().setSoTimeout(60 * 1000).build());\n    }\n\n    public static List<String> stats() {\n        List<String> stats = new ArrayList<>();\n        stats.add(\\\"Team: \\\" + cachedTeam.stats().toString());\n        stats.add(\\\"Repositories : \\\" + cachedRepositories.stats().toString());\n        stats.add(\\\"Commits: \\\" + cachedCommits.stats().toString());\n        return stats;\n    }\n\n    public static void clearCaches() {\n        cachedTeam.evictAll();\n        cachedRepositories.evictAll();\n        cachedCommits.evictAll();\n    }\n\n    @Deprecated\n    public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n                                   String owner, String repositoryName, StandardUsernamePasswordCredentials credentials) {\n        this(enableCache, teamCacheDuration, repositoriesCacheDuration, owner, null, repositoryName,\n                new BitbucketUsernamePasswordAuthenticator(credentials));\n    }\n\n    public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator) {\n        this.authenticator = authenticator;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.enableCache = enableCache;\n        if (enableCache) {\n            cachedTeam.setExpireDuration(teamCacheDuration, MINUTES);\n            cachedRepositories.setExpireDuration(repositoriesCacheDuration, MINUTES);\n        }\n\n        // Create Http client\n        HttpClientBuilder httpClientBuilder = HttpClientBuilder.create();\n\n        httpClientBuilder.setKeepAliveStrategy((__, ___) -> MILLISECONDS.convert(5, SECONDS));\n        httpClientBuilder.setConnectionManager(connectionManager);\n        httpClientBuilder.setConnectionManagerShared(true);\n        httpClientBuilder.setRetryHandler(new StandardHttpRequestRetryHandler());\n\n        if (authenticator != null) {\n            authenticator.configureBuilder(httpClientBuilder);\n\n            context = HttpClientContext.create();\n            authenticator.configureContext(context, API_HOST);\n        }\n\n        setClientProxyParams(\\\"bitbucket.org\\\", httpClientBuilder);\n\n        this.client = httpClientBuilder.build();\n    }\n\n    @Override\n    protected void finalize() throws Throwable {\n        if (client != null) {\n            client.close();\n        }\n\n        super.finalize();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @NonNull\n    @Override\n    public String getOwner() {\n        return owner;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    @CheckForNull\n    public String getRepositoryName() {\n        return repositoryName;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @NonNull\n    @Override\n    public List<BitbucketPullRequestValue> getPullRequests() throws InterruptedException, IOException {\n        List<BitbucketPullRequestValue> pullRequests = new ArrayList<>();\n\n        // we can not use the default max pagelen also if documented\n        // https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests#get\n        // so because with values greater than 50 the API returns HTTP 400\n        int pageLen = 50;\n        UriTemplate template = UriTemplate.fromTemplate(REPO_URL_TEMPLATE + \\\"/pullrequests{?page,pagelen}\\\")\n                .set(\\\"owner\\\", owner)\n                .set(\\\"repo\\\", repositoryName)\n                .set(\\\"pagelen\\\", pageLen);\n\n        BitbucketPullRequests page;\n        int pageNumber = 1;\n        do {\n            if (Thread.interrupted()) {\n                throw new InterruptedException();\n            }\n            String url = template //\n                    .set(\\\"page\\\", pageNumber++) //\n                    .expand();\n            String response = getRequest(url);\n            try {\n                page = JsonParser.toJava(response, BitbucketPullRequests.class);\n            } catch (IOException e) {\n                throw new IOException(\\\"I/O error when parsing response from URL: \\\" + url, e);\n            }\n            pullRequests.addAll(page.getValues());\n        } while (page.getNext() != null);\n\n        // PRs with missing destination branch are invalid and should be ignored.\n        pullRequests.removeIf(this::shouldIgnore);\n\n        for (BitbucketPullRequestValue pullRequest : pullRequests) {\n            setupClosureForPRBranch(pullRequest);\n        }\n\n        return pullRequests;\n    }\n\n    /**\n     * PRs with missing source / destination branch are invalid and should be ignored.\n     *\n     * @param pr a {@link BitbucketPullRequest}\n     * @return whether the PR should be ignored\n     */\n    private boolean shouldIgnore(BitbucketPullRequest pr) {\n        return pr.getSource().getRepository() == null\n            || pr.getSource().getCommit() == null\n            || pr.getDestination().getBranch() == null\n            || pr.getDestination().getCommit() == null;\n    }\n\n    /**\n     * Make available commit information in a lazy way.\n     *\n     * @author Nikolas Falco\n     */\n    private class CommitClosure implements Callable<BitbucketCommit> {\n        private final String hash;\n\n        public CommitClosure(@NonNull String hash) {\n            this.hash = hash;\n        }\n\n        @Override\n        public BitbucketCommit call() throws Exception {\n            return resolveCommit(hash);\n        }\n    }\n\n\n\n", "CodeBleu_score": 5.064932050291124}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration locationConfiguration = JenkinsLocationConfiguration.get();\n    if (locationConfiguration == null) {\n        throw new IllegalStateException(\"Jenkins Location Configuration is null\");\n    }\n    URL url = locationConfiguration.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\"Jenkins Location Configuration URL is null\");\n    }\n    DisplayURLProvider displayURLProvider = DisplayURLProvider.get();\n    if (displayURLProvider == null) {\n        throw new IllegalStateException(\"DisplayURLProvider is null\");\n    }\n    return displayURLProvider.getRunURL(build);\n}", "CodeBleu_score": 47.34619827598204}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration config = JenkinsLocationConfiguration.get();\n    if (config == null) {\n        throw new IllegalStateException(\"Jenkins location configuration not found\");\n    }\n    URL url = config.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\"Jenkins URL not found\");\n    }\n    String rootUrl = DisplayURLProvider.get().getRunURL(build);\n    if (rootUrl == null) {\n        throw new IllegalStateException(\"Jenkins build URL not found\");\n    }\n    return url.toString() + rootUrl;\n}", "CodeBleu_score": 50.18428670140813}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration jenkinsLocationConfiguration = JenkinsLocationConfiguration.get();\n    URL url = jenkinsLocationConfiguration.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\"Jenkins URL is null\");\n    }\n    DisplayURLProvider displayURLProvider = DisplayURLProvider.get();\n    if (displayURLProvider == null) {\n        throw new IllegalStateException(\"DisplayURLProvider is null\");\n    }\n    return displayURLProvider.getRunURL(build);\n}", "CodeBleu_score": 49.40008136970521}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\ttry {\n        URL urlObject = new URL(url);\n        if (urlObject.getHost() == null) {\n            throw new IllegalStateException(\"The URL is not fully qualified.\");\n        }\n        if (\"localhost\".equals(urlObject.getHost()) || \"unconfigured-jenkins-location\".equals(urlObject.getHost())) {\n            throw new IllegalStateException(\"The URL cannot use \\\"localhost\\\" or \\\"unconfigured-jenkins-location\\\" as the host.\");\n        }\n        if (bitbucket instanceof BitbucketCloudApiClient) {\n            if (urlObject.getHost().startsWith(\"localhost\") || urlObject.getHost().startsWith(\"127.0.0.1\") || urlObject.getHost().startsWith(\"0.0.0.0\")) {\n                throw new IllegalStateException(\"The URL cannot use \\\"localhost\\\" or \\\"127.0.0.1\\\" or \\\"0.0.0.0\\\" as the host.\");\n            }\n        }\n        return url;\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"The URL is not well-formed.\", e);\n    }\n}", "CodeBleu_score": 66.80511951185113}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\ttry {\n        URL u = new URL(url);\n        if (u.getHost() == null) {\n            throw new IllegalStateException(\"Invalid URL: \" + url);\n        }\n        if (u.getHost().equalsIgnoreCase(\"localhost\")) {\n            throw new IllegalStateException(\"Invalid URL: \" + url);\n        }\n        if (u.getHost().equalsIgnoreCase(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"Invalid URL: \" + url);\n        }\n        if (bitbucket instanceof BitbucketCloudApiClient) {\n            if (!u.getHost().contains(\".\")) {\n                throw new IllegalStateException(\"Invalid URL: \" + url);\n            }\n        }\n        return u.toString();\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"Invalid URL: \" + url, e);\n    }\n}", "CodeBleu_score": 62.252066219674994}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\tURL u = new URL(url);\n    if (u.getHost().equals(\"localhost\") || u.getHost().equals(\"unconfigured-jenkins-location\")) {\n        throw new IllegalStateException(\"Jenkins URL cannot be localhost or unconfigured-jenkins-location\");\n    }\n    if (bitbucket.getClass().getSimpleName().equals(\"BitbucketCloudApiClient\")) {\n        if (!u.getHost().contains(\".\")) {\n            throw new IllegalStateException(\"Jenkins URL cannot be a hostname without a domain\");\n        }\n    }\n    return url;\n}", "CodeBleu_score": 51.63200279963621}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t.BitbucketApi;", "CodeBleu_score": 3.568372831151435}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t.BitbucketApi;", "CodeBleu_score": 3.568372831151435}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t.BitbucketApi;", "CodeBleu_score": 3.568372831151435}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t);\n    }", "CodeBleu_score": 9.26149648301191}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t);\n    }", "CodeBleu_score": 9.26149648301191}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t);\n    }", "CodeBleu_score": 9.26149648301191}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\t.cloudbees.jenkins.plugins.bitbucket.endpoints.BitbucketEndpointConfiguration;", "CodeBleu_score": 1.8407589602745098}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t.cloudbees.jenkins.plugins.bitbucket.endpoints.BitbucketEndpointConfiguration;", "CodeBleu_score": 1.8407589602745098}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t.cloudbees.jenkins.plugins.bitbucket.endpoints.BitbucketEndpointConfiguration;", "CodeBleu_score": 1.8407589602745098}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\tNamedArrayList\n                            .anyOf(NamedArrayList.withAnnotation(Discovery.class),\n                                    NamedArrayList.withAnnotation(Selection.class)),\n                    true, result);\n            int insertionPoint = result.size();\n            NamedArrayList.select(all, \\\"Git\\\", it -> GitSCM.class.isAssignableFrom(it.getScmClass()), true, result);\n            NamedArrayList.select(all, \\\"General\\\", null, true, result, insertionPoint);\n            return result;\n        }", "CodeBleu_score": 30.432677953670932}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\tNamedArrayList\n                            .anyOf(NamedArrayList.withAnnotation(Discovery.class),\n                                    NamedArrayList.withAnnotation(Selection.class)),\n                    true, result);\n            int insertionPoint = result.size();\n            NamedArrayList.select(all, \\\"Git\\\", it -> GitSCM.class.isAssignableFrom(it.getScmClass()), true, result);\n            NamedArrayList.select(all, \\\"General\\\", null, true, result, insertionPoint);\n            return result;\n        }", "CodeBleu_score": 30.432677953670932}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\tNamedArrayList\n                            .anyOf(NamedArrayList.withAnnotation(Discovery.class),\n                                    NamedArrayList.withAnnotation(Selection.class)),\n                    true, result);\n            int insertionPoint = result.size();\n            NamedArrayList.select(all, \\\"Git\\\", it -> GitSCM.class.isAssignableFrom(it.getScmClass()), true, result);\n            NamedArrayList.select(all, \\\"General\\\", null, true, result, insertionPoint);\n            return result;\n        }", "CodeBleu_score": 30.432677953670932}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tList<RefSpec> refSpecs = branchWithHashes.stream()\n            .filter(branchWithHash -> !git.hasCommit(branchWithHash.getHash()))\n            .map(branchWithHash -> new RefSpec(branchWithHash.getBranch()))\n            .collect(Collectors.toList());\n\n        if (!refSpecs.isEmpty()) {\n            try {\n                listener.getLogger().println(\"Fetching missing commits from \" + cloneLink + \" using \" + remoteName + \" remote.\");\n                git.fetch_()\n                    .from(new URIish(cloneLink), remoteName)\n                    .setRefSpecs(refSpecs)\n                    .execute();\n            } catch (URISyntaxException e) {\n                throw new GitException(\"Invalid clone link: \" + cloneLink, e);\n            }\n        }\n\n        return rev;\n    }", "CodeBleu_score": 52.04011033817775}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tList<RefSpec> refSpecs = branchWithHashes.stream()\n            .filter(branchWithHash -> !git.hasCommit(branchWithHash.getHash()))\n            .map(branchWithHash -> new RefSpec(branchWithHash.getBranch()))\n            .collect(Collectors.toList());\n\n        if (refSpecs.isEmpty()) {\n            return rev;\n        }\n\n        try {\n            listener.getLogger().println(\"Fetching missing commits from \" + cloneLink);\n            FetchCommand fetchCommand = git.fetch_().from(new URIish(cloneLink), remoteName);\n            for (RefSpec refSpec : refSpecs) {\n                fetchCommand.refspec(refSpec);\n            }\n            fetchCommand.execute();\n        } catch (GitException | URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n\n        return rev;\n    }", "CodeBleu_score": 53.72148046811607}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tList<RefSpec> refSpecs = branchWithHashes.stream()\n        .filter(branchWithHash -> {\n            try {\n                return !git.hasCommit(branchWithHash.getHash());\n            } catch (GitException e) {\n                e.printStackTrace();\n            }\n            return false;\n        })\n        .map(branchWithHash -> new RefSpec(branchWithHash.getBranch() + \":\" + branchWithHash.getBranch()))\n        .collect(Collectors.toList());\n\n    if (refSpecs.isEmpty()) {\n        return rev;\n    }\n\n    try {\n        FetchCommand fetchCommand = git.fetch_();\n        fetchCommand.setRemote(remoteName);\n        fetchCommand.setRefSpecs(refSpecs);\n        fetchCommand.setTimeout(scm.getGitTool().getFetchTimeout());\n        fetchCommand.setCredentials(scm.getRepositoryByName(remoteName).getCredentials());\n        fetchCommand.setRefSpecs(refSpecs);\n        fetchCommand.setRemote(remoteName);\n        fetchCommand.setTimeout(scm.getGitTool().getFetchTimeout());\n        fetchCommand.setCredentials(scm.getRepositoryByName(remoteName).getCredentials());\n        fetchCommand.setRefSpecs(refSpecs);\n        fetchCommand.setRemote(remoteName);\n        fetchCommand.setTimeout(scm.getGitTool().getFetchTimeout());\n        fetchCommand.setCredentials(scm.getRepositoryByName(remoteName).getCredentials());\n        fetchCommand.setRefSpecs(refSpecs);\n        fetchCommand.setRemote(remoteName);\n        fetchCommand.setTimeout(scm.getGitTool().getFetchTimeout());\n        fetchCommand.setCredentials(scm.getRepositoryByName(remoteName).getCredentials());\n        fetchCommand.setRefSpecs(refSpecs);\n        fetchCommand.setRemote(remoteName);\n        fetchCommand.setTimeout(scm.getGitTool().getFetchTimeout());\n        fetchCommand.setCredentials(scm.getRepositoryByName(remoteName).getCredentials());\n        fetchCommand.setRefSpecs(refSpecs);\n        fetchCommand.setRemote(remoteName);", "CodeBleu_score": 42.22427434824916}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\tif (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        if (entry.getValue() != null && !entry.getValue().isEmpty()) {\n            result.put(entry.getKey(), entry.getValue().get(0));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 77.3250219219174}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\tif (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        if (entry.getValue().size() > 0) {\n            result.put(entry.getKey(), entry.getValue().get(0));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 78.71361562337}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\tif (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        if (entry.getValue() != null && !entry.getValue().isEmpty()) {\n            result.put(entry.getKey(), entry.getValue().get(0));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 77.3250219219174}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\tlet resources = this.getResources(resourceStates);\n    if (!resources || resources.length === 0) {\n        return;\n    }\n\n    // TODO: Support multiple repositories\n    let repository = await this.getRepository(resources[0]);\n    if (!repository) {\n        return;\n    }\n\n    let uris = resources.map(r => r.resourceUri);\n    let filePaths = uris.map(uri => uri.fsPath);\n\n    try {\n        await repository.add(filePaths);\n    } catch (err) {\n        window.showErrorMessage(\\\"Failed to add files to repository: \\\" + err);\n    }\n}", "CodeBleu_score": 54.75820810897888}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t// Retrieve selected resources\n    const resources = this.getResources(resourceStates);\n    if (!resources.length) {\n        return;\n    }\n\n    // Get the repository of the first resource\n    const repository = await this.getRepository(resources[0]);\n    if (!repository) {\n        return;\n    }\n\n    // Convert resources to file paths\n    const paths = resources.map(r => r.resourceUri.fsPath);\n\n    // Add files to repository\n    try {\n        await repository.add(paths);\n    } catch (err) {\n        window.showErrorMessage(\\`Failed to add files to repository: \\${err.message}\\`);\n        return;\n    }\n\n    // Show a success message\n    window.showInformationMessage(\\`Added \\${resources.length} \\${resources.length === 1 ? \\\"file\\\" : \\\"files\\\"} to repository.\\`);\n}", "CodeBleu_score": 51.1572073574923}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\tif (!resourceStates.length) {\n        window.showErrorMessage(\\\"No resource selected\\\");\n        return;\n    }\n\n    const resources = resourceStates.map(r => r.resourceUri);\n\n    const uris = resources.map(r => r.fsPath);\n\n    const addPromises = this.client.repositories.map(r => r.add(uris));\n\n    try {\n        await Promise.all(addPromises);\n    } catch (e) {\n        window.showErrorMessage(e.message);\n    }\n}", "CodeBleu_score": 44.41849894599786}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\tif (this.resourceStates.length === 0 || !this.resourceStates[0].resourceUri) {\n    const resource = await this.getResource();\n    if (resource) {\n      this.resourceStates = [new Resource(resource)];\n    }\n  }\n\n  return this.resourceStates.filter(resource => resource instanceof Resource);\n}", "CodeBleu_score": 36.32913244002657}, {"code": "protected async getResourceStates{\n\tlet resourceStates = args[0];\n  if (resourceStates.length === 0 || !(resourceStates[0] instanceof Uri)) {\n    const repository = await this.getRepository(args[0]);\n    const uri = await this.getUri(args[0]);\n    if (!uri) {\n      return [];\n    }\n\n    resourceStates = [await repository.getResource(uri)];\n  }\n\n  return resourceStates.filter(r => r instanceof Resource);\n}", "CodeBleu_score": 45.13949939853764}, {"code": "protected async getResourceStates{\n\tif (resourceStates.length === 0 || !(resourceStates[0].resourceUri instanceof Uri)) {\n    const repository = await this.getRepository();\n    if (!repository) {\n      return [];\n    }\n\n    const uri = await this.getUri();\n    if (!uri) {\n      return [];\n    }\n\n    const svnUri = toSvnUri(uri);\n\n    const resource = await repository.getResource(svnUri);\n    if (!resource) {\n      return [];\n    }\n\n    resourceStates = [resource];\n  }\n\n  return resourceStates.filter(resourceState => resourceState instanceof Resource);\n}", "CodeBleu_score": 58.382393722617955}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\tif (!uri) {\n      const editor = window.activeTextEditor;\n      if (!editor) {\n        return undefined;\n      }\n\n      uri = editor.document.uri;\n    }\n\n    if (uri.scheme === \\\"svn\\\") {\n      uri = toSvnUri(uri);\n    }\n\n    const sourceControlManager = (await commands.executeCommand(\\\"svn.getSourceControlManager\\\", \\\"\\\")) as SourceControlManager;\n    const repository = sourceControlManager.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n\n    return repository.getResource(uri);\n  }", "CodeBleu_score": 45.71641151844839}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\tif (uri && uri.scheme === \\\"svn\\\") {\n    uri = toSvnUri(uri);\n  }\n\n  if (!uri) {\n    uri = window.activeTextEditor?.document.uri;\n  }\n\n  if (!uri) {\n    return undefined;\n  }\n\n  if (uri.scheme !== \\\"file\\\") {\n    return undefined;\n  }\n\n  const sourceControlManager = (await commands.executeCommand(\\\"svn.getSourceControlManager\\\", \\\"\\\")) as SourceControlManager;\n  const repository = sourceControlManager.getRepository(uri);\n\n  if (!repository) {\n    return undefined;\n  }\n\n  return repository.getResource(uri);\n}", "CodeBleu_score": 46.009719301773586}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\tif (!uri) {\n      const editor = window.activeTextEditor;\n      if (!editor) {\n        return undefined;\n      }\n      uri = editor.document.uri;\n    }\n    if (uri.scheme === \\\"svn\\\") {\n      uri = fromSvnUri(uri);\n    }\n    const sourceControlManager = (await commands.executeCommand(\\\"svn.getSourceControlManager\\\", \\\"\\\")) as SourceControlManager;\n    const repository = sourceControlManager.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n    return repository.getResource(uri);\n  }", "CodeBleu_score": 46.066808177763654}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\tconst repo = this.model.getRepository(element.repo.fsPath);\n    if (!repo) {\n      return;\n    }\n    if (element.item === Status.ADDED) {\n      await openFileRemote(repo, element.newPath, element.newRevision);\n    } else {\n      await openDiff(repo, element.oldPath, element.newPath, element.oldRevision, element.newRevision);\n    }\n  }", "CodeBleu_score": 58.317554741301336}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\tlet remoteRepo: Repository;\n    if (element.item === Status.MODIFIED) {\n      remoteRepo = await element.repo.getRemoteRepository();\n      if (remoteRepo === undefined) {\n        return;\n      }\n      await openDiff(element.oldPath, element.newPath, element.oldRevision, element.newRevision, remoteRepo.fsPath);\n    } else if (element.item === Status.ADDED) {\n      remoteRepo = await element.repo.getRemoteRepository();\n      if (remoteRepo === undefined) {\n        return;\n      }\n      await openFileRemote(element.newPath, element.newRevision, remoteRepo.fsPath);\n    }\n  }", "CodeBleu_score": 38.972651988198464}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\tconst repo = this.model.getRepository(element.repo);\n    if (!repo) {\n      return;\n    }\n    const remote = await repo.getRemote();\n    if (!remote) {\n      return;\n    }\n\n    if (element.item === Status.MODIFIED) {\n      await openDiff(element.oldPath, element.oldRevision, element.newPath, element.newRevision);\n    } else if (element.item === Status.ADDED) {\n      await openFileRemote(element.newPath, element.newRevision, remote);\n    }\n  }", "CodeBleu_score": 56.8547888944338}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\tif (!env.clipboard.writeText) {\n    window.showErrorMessage(\\\"This extension does not support copying to the clipboard. Please use a different extension.\\\");\n    return;\n  }\n  if (item.kind === LogTreeItemKind.Commit) {\n    const commit = item.data as ISvnLogEntry;\n    if (what === \\\"message\\\") {\n      await env.clipboard.writeText(commit.message);\n    } else if (what === \\\"revision\\\") {\n      await env.clipboard.writeText(commit.revision.toString());\n    } else if (what === \\\"author\\\") {\n      await env.clipboard.writeText(commit.author);\n    } else if (what === \\\"date\\\") {\n      await env.clipboard.writeText(commit.date.toISOString());\n    }\n  } else if (item.kind === LogTreeItemKind.CommitDetail) {\n    const commit = item.data as ISvnLogEntry;\n    const commitPath = item.parent!.data as ISvnLogEntryPath;\n    if (what === \\\"message\\\") {\n      await env.clipboard.writeText(commit.message);\n    } else if (what === \\\"revision\\\") {\n      await env.clipboard.writeText(commit.revision.toString());\n    } else if (what === \\\"author\\\") {\n      await env.clipboard.writeText(commit.author);\n    } else if (what === \\\"date\\\") {\n      await env.clipboard.writeText(commit.date.toISOString());\n    } else if (what === \\\"file\\\") {\n      await env.clipboard.writeText(commitPath.path);\n    } else if (what === \\\"baseRevision\\\") {\n      await env.clipboard.writeText(commitPath.baseRevision.toString());\n    }\n  } else if (item.kind === LogTreeItemKind.Repo) {\n    const repo = item.data as IRemoteRepository;\n    if (what === \\\"url\\\") {\n      await env.clipboard.writeText(repo.url);\n    }\n  }\n}", "CodeBleu_score": 38.39122566100382}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\tif (!env.clipboard.writeText) {\n    window.showErrorMessage(`Copying to clipboard is not supported on your platform`);\n    return;\n  }\n  if (item.kind === LogTreeItemKind.Commit) {\n    const commit = item.data as ISvnLogEntry;\n    if (what === \\\"message\\\") {\n      await env.clipboard.writeText(commit.message);\n    } else if (what === \\\"revision\\\") {\n      await env.clipboard.writeText(commit.revision.toString());\n    }\n  }\n}", "CodeBleu_score": 48.177290330648205}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\tif (!window.state.focused) {\n    return;\n  }\n  if (window.activeTextEditor) {\n    const editor = window.activeTextEditor;\n    if (editor.document.uri.scheme !== \\\"file\\\") {\n      return;\n    }\n    const document = editor.document;\n    const selection = editor.selection;\n    if (selection.isEmpty) {\n      return;\n    }\n    const text = document.getText(selection);\n    if (text.length === 0) {\n      return;\n    }\n    if (text.indexOf(\\\"svn://\\\") === 0) {\n      window.showErrorMessage(\\\"Copying to clipboard is not supported for remote repositories.\\\");\n      return;\n    }\n    const svnUri = SvnRI.getSvnUri(document.uri);\n    if (svnUri === undefined) {\n      return;\n    }\n    const svn = await SvnRI.getSvn(svnUri);\n    if (svn === undefined) {\n      return;\n    }\n    const result = await svn.getLog(svnUri, { limit: 1, onEntry: entry => entry.revision === text });\n    if (result.entries.length === 0) {\n      return;\n    }\n    const entry = result.entries[0];\n    if (what === \\\"commit message\\\") {\n      env.clipboard.writeText(entry.message);\n    } else if (what === \\\"revision\\\") {\n      env.clipboard.writeText(entry.revision);\n    } else {\n      window.showErrorMessage(\\\"Unknown value for 'what' parameter.\\\");\n    }\n  }\n}", "CodeBleu_score": 31.486900239392522}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tList<GiteaConnectionFactory> factories = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n    GiteaConnectionFactory factory = null;\n    for (GiteaConnectionFactory f : factories) {\n        if (f.canOpen(this)) {\n            if (factory == null || factory.priority() < f.priority()) {\n                factory = f;\n            }\n        }\n    }\n    if (factory == null) {\n        throw new IOException(\"No suitable GiteaConnectionFactory found\");\n    }\n    return factory.open(this);\n}", "CodeBleu_score": 45.30366639673368}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tList<GiteaConnectionFactory> factories = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n    GiteaConnectionFactory factory = factories.stream()\n        .filter(f -> f.canOpen(this))\n        .max(Comparator.comparingInt(GiteaConnectionFactory::priority))\n        .orElseThrow(() -> new IOException(\"No suitable GiteaConnectionFactory found\"));\n    return factory.open(this);\n}", "CodeBleu_score": 29.8524582828449}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t// Find the most suitable factory\n    GiteaConnectionFactory factory = null;\n    for (GiteaConnectionFactory f : ServiceLoader.load(GiteaConnectionFactory.class, classLoader)) {\n        if (f.canOpen(this)) {\n            if (factory == null || factory.priority() < f.priority()) {\n                factory = f;\n            }\n        }\n    }\n    if (factory == null) {\n        throw new IOException(\"No suitable GiteaConnectionFactory found\");\n    }\n    return factory.open(this);\n}", "CodeBleu_score": 37.85668266510833}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\tif (Jenkins.getInstance() != null) {\n        this.classLoader = Jenkins.getInstance().getPluginManager().uberClassLoader;\n    } else {\n        this.classLoader = this.getClass().getClassLoader();\n    }\n    return this;\n}", "CodeBleu_score": 45.146041485087345}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\tif (Jenkins.getInstance() != null) {\n        this.classLoader = Jenkins.getInstance().pluginManager.uberClassLoader;\n    } else {\n        this.classLoader = this.getClass().getClassLoader();\n    }\n    return this;\n}", "CodeBleu_score": 43.942286378363846}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\tClassLoader classLoader = Jenkins.get().pluginManager == null ? this.getClass().getClassLoader() : Jenkins.get().pluginManager.uberClassLoader;\n    return classLoader(classLoader);\n}", "CodeBleu_score": 45.80014750315733}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tthis.displayName = displayName;\n    this.serverUrl = serverUrl;\n    this.manageHooks = manageHooks;\n    this.credentialsId = credentialsId;\n    this.aliasUrl = aliasUrl;\n}", "CodeBleu_score": 22.844341233136088}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tif (StringUtils.isBlank(serverUrl)) {\n            throw new IllegalArgumentException(\"serverUrl cannot be null or empty\");\n        }\n        this.serverUrl = Util.fixEmptyAndTrim(serverUrl);\n        this.manageHooks = manageHooks;\n        this.credentialsId = manageHooks ? Util.fixEmptyAndTrim(credentialsId) : null;\n        this.displayName = Util.fixEmptyAndTrim(displayName);\n        this.aliasUrl = Util.fixEmptyAndTrim(aliasUrl);\n    }", "CodeBleu_score": 44.48098253532204}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tthis.displayName = displayName;\n    this.serverUrl = serverUrl;\n    this.manageHooks = manageHooks;\n    this.credentialsId = credentialsId;\n    this.aliasUrl = aliasUrl;\n}", "CodeBleu_score": 22.844341233136088}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\tif different from the URL that Jenkins needs to use to\n     * access Gitea.\n     *\n     * @since 1.0.5\n     */\n    @CheckForNull\n    private final String aliasUrl;\n\n    /**\n     * Constructor\n     *\n     * @param displayName   Optional name to use to describe the end-point.\n     * @param serverUrl     The URL of this Gitea Server\n     * @param manageHooks   {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     * @param credentialsId The {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for\n     *                      auto-management of hooks.\n     * @deprecated Use {@link #GiteaServer(String, String, boolean, String, String)}\n     */\n    @Deprecated\n    @Restricted(DoNotUse.class)\n    public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId) {\n        this(displayName, serverUrl, manageHooks, credentialsId, null);\n    }\n\n    /**\n     * Constructor\n     *\n     * @param displayName   Optional name to use to describe the end-point.\n     * @param serverUrl     The URL of this Gitea Server\n     * @param manageHooks   {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     * @param credentialsId The {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for\n     *                      auto-management of hooks.\n     * @param aliasUrl      The URL this Gitea Server thinks it is at.\n     * @since 1.0.5\n     */\n    @DataBoundConstructor\n    public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n        this.manageHooks = manageHooks && StringUtils.isNotBlank(credentialsId);\n        this.credentialsId = manageHooks ? credentialsId : null;\n        this.serverUrl = GiteaServers.normalizeServerUrl(serverUrl);\n        this.displayName = StringUtils.isBlank(displayName)\n                ? SCMName.fromUrl(this.serverUrl, COMMON_PREFIX_HOSTNAMES)\n                : displayName;\n        this.aliasUrl = StringUtils.trimToNull(GiteaServers.normalizeServerUrl(aliasUrl));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @CheckForNull\n    public String getDisplayName() {\n        return displayName;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @NonNull\n    public String getServerUrl() {\n        return serverUrl;\n    }\n\n    /**\n     * Returns {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     *\n     * @return {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     */\n    public final boolean isManageHooks() {\n        return manageHooks;\n    }\n\n    /**\n     * Returns the {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for auto-management\n     * of hooks.\n     *\n     * @return the {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for auto-management\n     * of hooks.\n     */\n    @CheckForNull\n    public final String getCredentialsId() {\n        return credentialsId;\n    }\n\n    /**\n     * Returns the {@link #getServerUrl()} that the Gitea server believes it has when publishing webhook events or\n     * {@code null} if this is a normal environment and Gitea is accessed through one true URL and has been configured\n     * with that URL.\n     *\n     * @return the {@link #getServerUrl()} that the Gitea server believes it has when publishing webhook events or\n     * {@code null}\n     * @since 1.0.5\n     */\n    @CheckForNull\n    public String getAliasUrl() {\n        return aliasUrl;\n    }\n\n    /**\n     * Looks up the {@link StandardCredentials} to use for auto-management of hooks.\n     *\n     * @return the credentials or {@code null}.\n     */\n    @CheckForNull\n    public StandardCredentials credentials() {\n        return StringUtils.isBlank(credentialsId) ? null : CredentialsMatchers.firstOrNull(\n                CredentialsProvider.lookupCredentials(\n                        StandardCredentials.class,\n                        Jenkins.get(),\n                        ACL.SYSTEM,\n                        URIRequirementBuilder.fromUri(serverUrl).build()\n                ),\n                CredentialsMatchers.allOf(\n                        AuthenticationTokens.matcher(GiteaAuth.class),\n                        CredentialsMatchers.withId(credentialsId)\n                )\n        );\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public DescriptorImpl getDescriptor() {\n        return (DescriptorImpl) super.getDescriptor();\n    }\n\n    /**\n     * Our descriptor.\n     */\n    @Extension\n    public static class DescriptorImpl extends Descriptor<GiteaServer> {\n        /**\n         * Checks that the supplied URL is valid.\n         *\n         * @param value the URL to check.\n         * @return the validation results.\n         */\n        public static FormValidation doCheckServerUrl(@QueryParameter String value) {\n            Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n            try (GiteaConnection c = Gitea.server(GiteaServers.normalizeServerUrl(value)).open()) {\n                return FormValidation\n                        .okWithMarkup(Messages.GiteaServer_serverVersion(Util.escape(c.fetchVersion().getVersion())));\n            } catch (MalformedURLException e) {\n                return FormValidation.errorWithMarkup(Messages.GiteaServer_invalidUrl(Util.escape(e.getMessage())));\n            } catch (InterruptedException e) {\n                return FormValidation.warning(Messages.GiteaServer_versionInterrupted());\n            } catch (IOException e) {\n                return FormValidation\n                        .errorWithMarkup(Messages.GiteaServer_cannotConnect(Util.escape(e.getMessage())));\n            }\n        }\n\n        /**\n         * Checks that the supplied URL is valid.\n         *\n         * @param value the URL to check.\n         * @return the validation results.\n         */\n        public static FormValidation doCheckAliasUrl(@QueryParameter String value) {\n            Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n            if (StringUtils.isBlank(value)) return FormValidation.ok();\n            try {\n                new URI(value);\n                return FormValidation.ok();\n            } catch (URISyntaxException e) {\n                return FormValidation.errorWithMarkup(Messages.GiteaServer_invalidUrl(Util.escape(e.getMessage())));\n            }\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Nonnull\n        @Override\n        public String getDisplayName() {\n            return Messages.GiteaServer_displayName();\n        }\n\n        /**\n         * Stapler form completion.\n         *\n         * @param serverUrl the server URL.\n         * @return the available credentials.\n         */\n        @Restricted(NoExternalUse.class) // stapler\n        @SuppressWarnings(\\\"unused\\\")\n\n\n", "CodeBleu_score": 43.496774863277246}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\tif different from the URL that Jenkins needs to use to\n     * access Gitea.\n     *\n     * @since 1.0.5\n     */\n    @CheckForNull\n    private final String aliasUrl;\n\n    /**\n     * Constructor\n     *\n     * @param displayName   Optional name to use to describe the end-point.\n     * @param serverUrl     The URL of this Gitea Server\n     * @param manageHooks   {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     * @param credentialsId The {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for\n     *                      auto-management of hooks.\n     * @deprecated Use {@link #GiteaServer(String, String, boolean, String, String)}\n     */\n    @Deprecated\n    @Restricted(DoNotUse.class)\n    public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId) {\n        this(displayName, serverUrl, manageHooks, credentialsId, null);\n    }\n\n    /**\n     * Constructor\n     *\n     * @param displayName   Optional name to use to describe the end-point.\n     * @param serverUrl     The URL of this Gitea Server\n     * @param manageHooks   {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     * @param credentialsId The {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for\n     *                      auto-management of hooks.\n     * @param aliasUrl      The URL this Gitea Server thinks it is at.\n     * @since 1.0.5\n     */\n    @DataBoundConstructor\n    public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n        this.manageHooks = manageHooks && StringUtils.isNotBlank(credentialsId);\n        this.credentialsId = manageHooks ? credentialsId : null;\n        this.serverUrl = GiteaServers.normalizeServerUrl(serverUrl);\n        this.displayName = StringUtils.isBlank(displayName)\n                ? SCMName.fromUrl(this.serverUrl, COMMON_PREFIX_HOSTNAMES)\n                : displayName;\n        this.aliasUrl = StringUtils.trimToNull(GiteaServers.normalizeServerUrl(aliasUrl));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @CheckForNull\n    public String getDisplayName() {\n        return displayName;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @NonNull\n    public String getServerUrl() {\n        return serverUrl;\n    }\n\n    /**\n     * Returns {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     *\n     * @return {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     */\n    public final boolean isManageHooks() {\n        return manageHooks;\n    }\n\n    /**\n     * Returns the {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for auto-management\n     * of hooks.\n     *\n     * @return the {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for auto-management\n     * of hooks.\n     */\n    @CheckForNull\n    public final String getCredentialsId() {\n        return credentialsId;\n    }\n\n    /**\n     * Returns the {@link #getServerUrl()} that the Gitea server believes it has when publishing webhook events or\n     * {@code null} if this is a normal environment and Gitea is accessed through one true URL and has been configured\n     * with that URL.\n     *\n     * @return the {@link #getServerUrl()} that the Gitea server believes it has when publishing webhook events or\n     * {@code null}\n     * @since 1.0.5\n     */\n    @CheckForNull\n    public String getAliasUrl() {\n        return aliasUrl;\n    }\n\n    /**\n     * Looks up the {@link StandardCredentials} to use for auto-management of hooks.\n     *\n     * @return the credentials or {@code null}.\n     */\n    @CheckForNull\n    public StandardCredentials credentials() {\n        return StringUtils.isBlank(credentialsId) ? null : CredentialsMatchers.firstOrNull(\n                CredentialsProvider.lookupCredentials(\n                        StandardCredentials.class,\n                        Jenkins.get(),\n                        ACL.SYSTEM,\n                        URIRequirementBuilder.fromUri(serverUrl).build()\n                ),\n                CredentialsMatchers.allOf(\n                        AuthenticationTokens.matcher(GiteaAuth.class),\n                        CredentialsMatchers.withId(credentialsId)\n                )\n        );\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public DescriptorImpl getDescriptor() {\n        return (DescriptorImpl) super.getDescriptor();\n    }\n\n    /**\n     * Our descriptor.\n     */\n    @Extension\n    public static class DescriptorImpl extends Descriptor<GiteaServer> {\n        /**\n         * Checks that the supplied URL is valid.\n         *\n         * @param value the URL to check.\n         * @return the validation results.\n         */\n        public static FormValidation doCheckServerUrl(@QueryParameter String value) {\n            Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n            try (GiteaConnection c = Gitea.server(GiteaServers.normalizeServerUrl(value)).open()) {\n                return FormValidation\n                        .okWithMarkup(Messages.GiteaServer_serverVersion(Util.escape(c.fetchVersion().getVersion())));\n            } catch (MalformedURLException e) {\n                return FormValidation.errorWithMarkup(Messages.GiteaServer_invalidUrl(Util.escape(e.getMessage())));\n            } catch (InterruptedException e) {\n                return FormValidation.warning(Messages.GiteaServer_versionInterrupted());\n            } catch (IOException e) {\n                return FormValidation\n                        .errorWithMarkup(Messages.GiteaServer_cannotConnect(Util.escape(e.getMessage())));\n            }\n        }\n\n        /**\n         * Checks that the supplied URL is valid.\n         *\n         * @param value the URL to check.\n         * @return the validation results.\n         */\n        public static FormValidation doCheckAliasUrl(@QueryParameter String value) {\n            Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n            if (StringUtils.isBlank(value)) return FormValidation.ok();\n            try {\n                new URI(value);\n                return FormValidation.ok();\n            } catch (URISyntaxException e) {\n                return FormValidation.errorWithMarkup(Messages.GiteaServer_invalidUrl(Util.escape(e.getMessage())));\n            }\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Nonnull\n        @Override\n        public String getDisplayName() {\n            return Messages.GiteaServer_displayName();\n        }\n\n        /**\n         * Stapler form completion.\n         *\n         * @param serverUrl the server URL.\n         * @return the available credentials.\n         */\n        @Restricted(NoExternalUse.class) // stapler\n        @SuppressWarnings(\\\"unused\\\")\n\n\n", "CodeBleu_score": 43.496774863277246}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\tif different from the URL that Jenkins needs to use to\n     * access Gitea.\n     *\n     * @since 1.0.5\n     */\n    @CheckForNull\n    private final String aliasUrl;\n\n    /**\n     * Constructor\n     *\n     * @param displayName   Optional name to use to describe the end-point.\n     * @param serverUrl     The URL of this Gitea Server\n     * @param manageHooks   {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     * @param credentialsId The {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for\n     *                      auto-management of hooks.\n     * @deprecated Use {@link #GiteaServer(String, String, boolean, String, String)}\n     */\n    @Deprecated\n    @Restricted(DoNotUse.class)\n    public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId) {\n        this(displayName, serverUrl, manageHooks, credentialsId, null);\n    }\n\n    /**\n     * Constructor\n     *\n     * @param displayName   Optional name to use to describe the end-point.\n     * @param serverUrl     The URL of this Gitea Server\n     * @param manageHooks   {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     * @param credentialsId The {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for\n     *                      auto-management of hooks.\n     * @param aliasUrl      The URL this Gitea Server thinks it is at.\n     * @since 1.0.5\n     */\n    @DataBoundConstructor\n    public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n        this.manageHooks = manageHooks && StringUtils.isNotBlank(credentialsId);\n        this.credentialsId = manageHooks ? credentialsId : null;\n        this.serverUrl = GiteaServers.normalizeServerUrl(serverUrl);\n        this.displayName = StringUtils.isBlank(displayName)\n                ? SCMName.fromUrl(this.serverUrl, COMMON_PREFIX_HOSTNAMES)\n                : displayName;\n        this.aliasUrl = StringUtils.trimToNull(GiteaServers.normalizeServerUrl(aliasUrl));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @CheckForNull\n    public String getDisplayName() {\n        return displayName;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @NonNull\n    public String getServerUrl() {\n        return serverUrl;\n    }\n\n    /**\n     * Returns {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     *\n     * @return {@code true} if and only if Jenkins is supposed to auto-manage hooks for this end-point.\n     */\n    public final boolean isManageHooks() {\n        return manageHooks;\n    }\n\n    /**\n     * Returns the {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for auto-management\n     * of hooks.\n     *\n     * @return the {@link StandardUsernamePasswordCredentials#getId()} of the credentials to use for auto-management\n     * of hooks.\n     */\n    @CheckForNull\n    public final String getCredentialsId() {\n        return credentialsId;\n    }\n\n    /**\n     * Returns the {@link #getServerUrl()} that the Gitea server believes it has when publishing webhook events or\n     * {@code null} if this is a normal environment and Gitea is accessed through one true URL and has been configured\n     * with that URL.\n     *\n     * @return the {@link #getServerUrl()} that the Gitea server believes it has when publishing webhook events or\n     * {@code null}\n     * @since 1.0.5\n     */\n    @CheckForNull\n    public String getAliasUrl() {\n        return aliasUrl;\n    }\n\n    /**\n     * Looks up the {@link StandardCredentials} to use for auto-management of hooks.\n     *\n     * @return the credentials or {@code null}.\n     */\n    @CheckForNull\n    public StandardCredentials credentials() {\n        return StringUtils.isBlank(credentialsId) ? null : CredentialsMatchers.firstOrNull(\n                CredentialsProvider.lookupCredentials(\n                        StandardCredentials.class,\n                        Jenkins.get(),\n                        ACL.SYSTEM,\n                        URIRequirementBuilder.fromUri(serverUrl).build()\n                ),\n                CredentialsMatchers.allOf(\n                        AuthenticationTokens.matcher(GiteaAuth.class),\n                        CredentialsMatchers.withId(credentialsId)\n                )\n        );\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public DescriptorImpl getDescriptor() {\n        return (DescriptorImpl) super.getDescriptor();\n    }\n\n    /**\n     * Our descriptor.\n     */\n    @Extension\n    public static class DescriptorImpl extends Descriptor<GiteaServer> {\n        /**\n         * Checks that the supplied URL is valid.\n         *\n         * @param value the URL to check.\n         * @return the validation results.\n         */\n        public static FormValidation doCheckServerUrl(@QueryParameter String value) {\n            Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n            try (GiteaConnection c = Gitea.server(GiteaServers.normalizeServerUrl(value)).open()) {\n                return FormValidation\n                        .okWithMarkup(Messages.GiteaServer_serverVersion(Util.escape(c.fetchVersion().getVersion())));\n            } catch (MalformedURLException e) {\n                return FormValidation.errorWithMarkup(Messages.GiteaServer_invalidUrl(Util.escape(e.getMessage())));\n            } catch (InterruptedException e) {\n                return FormValidation.warning(Messages.GiteaServer_versionInterrupted());\n            } catch (IOException e) {\n                return FormValidation\n                        .errorWithMarkup(Messages.GiteaServer_cannotConnect(Util.escape(e.getMessage())));\n            }\n        }\n\n        /**\n         * Checks that the supplied URL is valid.\n         *\n         * @param value the URL to check.\n         * @return the validation results.\n         */\n        public static FormValidation doCheckAliasUrl(@QueryParameter String value) {\n            Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n            if (StringUtils.isBlank(value)) return FormValidation.ok();\n            try {\n                new URI(value);\n                return FormValidation.ok();\n            } catch (URISyntaxException e) {\n                return FormValidation.errorWithMarkup(Messages.GiteaServer_invalidUrl(Util.escape(e.getMessage())));\n            }\n        }\n\n        /**\n         * {@inheritDoc}\n         */\n        @Nonnull\n        @Override\n        public String getDisplayName() {\n            return Messages.GiteaServer_displayName();\n        }\n\n        /**\n         * Stapler form completion.\n         *\n         * @param serverUrl the server URL.\n         * @return the available credentials.\n         */\n        @Restricted(NoExternalUse.class) // stapler\n        @SuppressWarnings(\\\"unused\\\")\n\n\n", "CodeBleu_score": 43.496774863277246}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        String host = uri.getHost();\n        int port = uri.getPort();\n        String path = uri.getPath();\n        if (scheme == null) {\n            scheme = \"http\";\n        }\n        if (host == null) {\n            throw new URISyntaxException(serverUrl, \"Missing host\");\n        }\n        if (port == -1) {\n            if (\"http\".equals(scheme)) {\n                port = 80;\n            } else if (\"https\".equals(scheme)) {\n                port = 443;\n            }\n        }\n        if (path == null) {\n            path = \"/\";\n        }\n        return new URI(scheme, null, host, port, path, null, null).toString().toLowerCase(Locale.ENGLISH).replaceAll(\"/$\", \"\");\n    } catch (URISyntaxException e) {\n        return serverUrl.toLowerCase(Locale.ENGLISH).replaceAll(\"/$\", \"\");\n    }\n}", "CodeBleu_score": 44.98022130931092}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\n        return null;\n    }\n\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        String host = uri.getHost();\n        int port = uri.getPort();\n\n        // if the scheme is null, set it to http\n        if (scheme == null) {\n            scheme = \"http\";\n        }\n\n        // if the host is null, set it to localhost\n        if (host == null) {\n            host = \"localhost\";\n        }\n\n        // if the port is not specified, set it to the default port for the scheme\n        if (port == -1) {\n            if (scheme.equalsIgnoreCase(\"http\")) {\n                port = 80;\n            } else if (scheme.equalsIgnoreCase(\"https\")) {\n                port = 443;\n            }\n        }\n\n        // remove the port if it is the default port for the scheme\n        if (port == 80 && scheme.equalsIgnoreCase(\"http\")) {\n            port = -1;\n        } else if (port == 443 && scheme.equalsIgnoreCase(\"https\")) {\n            port = -1;\n        }\n\n        // set the URI components\n        uri = new URI(scheme, null, host, port, uri.getPath(), uri.getQuery(), uri.getFragment());\n\n        // remove any trailing slash\n        return uri.toString().replaceAll(\"/$\", \"\");\n    } catch (URISyntaxException e) {\n        // ignore the exception\n    }\n\n    return serverUrl;\n}", "CodeBleu_score": 53.291654178777925}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\n        return null;\n    }\n    serverUrl = serverUrl.trim();\n    try {\n        URI uri = new URI(serverUrl);\n        if (uri.getPort() == 80 && \"http\".equals(uri.getScheme())) {\n            serverUrl = uri.getScheme() + \"://\" + uri.getHost();\n        } else if (uri.getPort() == 443 && \"https\".equals(uri.getScheme())) {\n            serverUrl = uri.getScheme() + \"://\" + uri.getHost();\n        } else {\n            serverUrl = uri.toString();\n        }\n    } catch (URISyntaxException e) {\n        // Ignore\n    }\n    if (serverUrl.endsWith(\"/\")) {\n        serverUrl = serverUrl.substring(0, serverUrl.length() - 1);\n    }\n    return serverUrl;\n}", "CodeBleu_score": 35.38544181046054}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\t* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */", "CodeBleu_score": 15.47059711405511}, {"code": "public ListBoxModel getServerItems(){\n\t* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */", "CodeBleu_score": 15.47059711405511}, {"code": "public ListBoxModel getServerItems(){\n\t* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */", "CodeBleu_score": 15.47059711405511}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tIterator;", "CodeBleu_score": 2.8017183249687947}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tIterator;", "CodeBleu_score": 2.8017183249687947}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tIterator;", "CodeBleu_score": 2.8017183249687947}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\ty-up\n        }", "CodeBleu_score": 2.5488376951994884}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\ty-up\n        }", "CodeBleu_score": 2.5488376951994884}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\ty-up\n        }", "CodeBleu_score": 2.5488376951994884}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tfor (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n        ConfigValue configValue = element.getAnnotation(ConfigValue.class);\n        if (configValue != null) {\n            descriptorElements.add(new ConfigElement(configValue.value(), element.getSimpleName().toString(), element.getEnclosingElement().getSimpleName().toString()));\n        }\n    }\n}", "CodeBleu_score": 34.052496691097055}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tfor (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n    Map<String, String> attributes = Maps.newHashMap();\n    attributes.put(\"name\", element.getSimpleName().toString());\n    attributes.put(\"type\", element.getSimpleName().toString());\n    attributes.put(\"description\", getDescription(element));\n    attributes.put(\"value\", getValue(element));\n    descriptorElements.add(new ConfigElement(attributes));\n  }\n}", "CodeBleu_score": 38.06928190296546}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tfor (Element e : roundEnv.getElementsAnnotatedWith(annotation)) {\n    if (e.getKind() == ElementKind.METHOD) {\n      String type = e.asType().toString();\n      String name = e.getSimpleName().toString();\n      String value = getAnnotationValue(e, annotation);\n      descriptorElements.add(new ConfigElement(type, name, value));\n    }\n  }\n}", "CodeBleu_score": 42.711462078431396}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tn * MIT License\n *\n * Copyright (c) 2020-present Cloudogu GmbH and Contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n", "CodeBleu_score": 15.940738924097298}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tn * MIT License\n *\n * Copyright (c) 2020-present Cloudogu GmbH and Contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n", "CodeBleu_score": 15.940738924097298}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tn * MIT License\n *\n * Copyright (c) 2020-present Cloudogu GmbH and Contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n", "CodeBleu_score": 15.940738924097298}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\tfilters = {\"employee\": employee}\n    if for_approval:\n        filters[\"leave_approver\"] = approver_id or frappe.session.user\n        filters[\"status\"] = [\"not in\", \"Approved, Rejected, Cancelled\"]\n    else:\n        filters[\"status\"] = \"Open\"\n    return filters\n\n", "CodeBleu_score": 25.091556130429115}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\tfilters: dict = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n    }\n\n    if for_approval:\n        filters.update(\n            {\n                \"leave_approver\": approver_id,\n                \"status\": \"Open\",\n            }\n        )\n    else:\n        filters.update(\n            {\n                \"status\": [\"not in\", [\"Cancelled\", \"Rejected\"]],\n            }\n        )\n\n    return filters\n\n", "CodeBleu_score": 24.588053266495464}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\tfilters = {\"employee\": employee}\n    if approver_id:\n        filters[\"leave_approver\"] = approver_id\n        filters[\"status\"] = \"Pending Approval\"\n    else:\n        filters[\"status\"] = \"Open\" if not for_approval else [\"!=\", \"Cancelled\"]\n    return filters\n\n", "CodeBleu_score": 21.119016751579526}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\tfrom frappe.utils import today\n    from frappe.utils.user import get_user_fullname\n    from erpnext.hr.doctype.leave_application.leave_application import get_leave_details\n\n    employee_name = get_user_fullname(employee)\n    leave_balance_map = frappe._dict()\n    leave_details = get_leave_details(employee, today())\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_details[leave_type][\"allocated_leaves\"],\n            \"balance\": leave_details[leave_type][\"leave_balance\"],\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 42.53884953905891}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\tcurrent_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_details[leave_type][\"allocated_leaves\"],\n            \"balance\": leave_details[leave_type][\"leave_balance\"],\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 39.66699352152585}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\ttoday = getdate()\n    leave_details = get_leave_details(employee, today)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_details[leave_type][\"allocated_leaves\"],\n            \"balance\": leave_details[leave_type][\"leave_balance\"],\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 39.11365988747598}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\tFIELD_TYPES = [\n\t\\\"Link\\\",\n\t\\\"Select\\\",\n\t\\\"Small Text\\\",\n\t\\\"Text\\\",\n\t\\\"Long Text\\\",\n\t\\\"Text Editor\\\",\n\t\\\"Table\\\",\n\t\\\"Check\\\",\n\t\\\"Data\\\",\n\t\\\"Float\\\",\n\t\\\"Int\\\",\n\t\\\"Section Break\\\",\n\t\\\"Date\\\",\n\t\\\"Time\\\",\n\t\\\"Datetime\\\",\n\t\\\"Currency\\\",", "CodeBleu_score": 3.195562384349841}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\tFIELD_TYPES = [\n\t\\\"Link\\\",\n\t\\\"Select\\\",\n\t\\\"Small Text\\\",\n\t\\\"Text\\\",\n\t\\\"Long Text\\\",\n\t\\\"Text Editor\\\",\n\t\\\"Table\\\",\n\t\\\"Check\\\",\n\t\\\"Data\\\",\n\t\\\"Float\\\",\n\t\\\"Int\\\",\n\t\\\"Section Break\\\",\n\t\\\"Date\\\",\n\t\\\"Time\\\",\n\t\\\"Datetime\\\",\n\t\\\"Currency\\\",", "CodeBleu_score": 3.195562384349841}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\tFIELD_TYPES = [\n\t\\\"Link\\\",\n\t\\\"Select\\\",\n\t\\\"Small Text\\\",\n\t\\\"Text\\\",\n\t\\\"Long Text\\\",\n\t\\\"Text Editor\\\",\n\t\\\"Table\\\",\n\t\\\"Check\\\",\n\t\\\"Data\\\",\n\t\\\"Float\\\",\n\t\\\"Int\\\",\n\t\\\"Section Break\\\",\n\t\\\"Date\\\",\n\t\\\"Time\\\",\n\t\\\"Datetime\\\",\n\t\\\"Currency\\\",", "CodeBleu_score": 3.195562384349841}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\tholiday_settings = frappe.get_single(\"Holiday Settings\")\n    if holiday_settings.send_reminders_in_advance and holiday_settings.reminder_frequency == \"Weekly\":\n        send_reminders_in_advance_weekly_helper()\n\n", "CodeBleu_score": 18.37370328942985}, {"code": "def send_reminders_in_advance_weekly()\n\t# Check if the reminder is enabled\n    if frappe.db.get_single_value(\"HR Settings\", \"send_holiday_reminders\"):\n\n        # Check if the frequency is set to weekly\n        if frappe.db.get_single_value(\"HR Settings\", \"holiday_reminder_frequency\") == \"Weekly\":\n\n            # Get the current date\n            current_date = today()\n\n            # Get the date of the previous Sunday\n            previous_sunday = current_date - relativedelta(weekday=SU(-1))\n\n            # Get the date of the previous Sunday's Sunday\n            previous_sunday_sunday = previous_sunday - relativedelta(weekday=SU(-1))\n\n            # Get the date of the previous Sunday's Monday\n            previous_sunday_monday = previous_sunday - relativeday(weekday=MO(-1))\n\n            # Get the date of the previous Sunday's Tuesday\n            previous_sunday_tuesday = previous_sunday - relativeday(weekday=TU(-1))\n\n            # Get the date of the previous Sunday's Wednesday\n            previous_sunday_wednesday = previous_sunday - relativeday(weekday=WE(-1))\n\n            # Get the date of the previous Sunday's Thursday\n            previous_sunday_thursday = previous_sunday - relativeday(weekday=TH(-1))\n\n            # Get the date of the previous Sunday's Friday\n            previous_sunday_friday = previous_sunday - relativeday(weekday=FR(-1))\n\n            # Get the date of the previous Sunday's Saturday\n            previous_sunday_saturday = previous_sunday - relativeday(weekday=SA(-1))\n\n            # Get the date of the previous Sunday's Sunday\n            previous_sunday_sunday = previous_sunday - relativeday(weekday=SU(-1))\n\n            # Get the date of the previous Sunday's Monday\n            previous_sunday_monday = previous_sunday", "CodeBleu_score": 31.32992608828442}, {"code": "def send_reminders_in_advance_weekly()\n\tholiday_settings = frappe.get_single(\"HR Settings\")\n    if holiday_settings.send_reminders_in_advance_weekly and holiday_settings.reminder_frequency == \"Weekly\":\n        send_holiday_reminders_in_advance(\n            holiday_settings.send_reminders_in_advance_weekly,\n            holiday_settings.reminder_frequency,\n            holiday_settings.reminder_subject,\n            holiday_settings.reminder_message,\n        )\n\n", "CodeBleu_score": 18.25804683328393}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\nfrom hrms.mixins.appraisal import AppraisalMixin", "CodeBleu_score": 0.8294104975878784}, {"code": "def calculate_self_appraisal_score(self)\n\t\nfrom hrms.mixins.appraisal import AppraisalMixin", "CodeBleu_score": 0.8294104975878784}, {"code": "def calculate_self_appraisal_score(self)\n\t\nfrom hrms.mixins.appraisal import AppraisalMixin", "CodeBleu_score": 0.8294104975878784}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t= (\n\t\t\tfrappe.qb.from_(Appraisal)\n\t\t\t.select(Appraisal.name)\n\t\t\t.where(\n\t\t\t\t(Appraisal.employee == self.employee)\n\t\t\t\t& (Appraisal.docstatus != 2)\n\t\t\t\t& (Appraisal.name != self.name)\n\t\t\t\t& (\n\t\t\t\t\t(Appraisal.appraisal_cycle == self.appraisal_cycle)\n\t\t\t\t\t| (\n\t\t\t\t\t\t(Appraisal.start_date.between(self.start_date, self.end_date))\n\t\t\t\t\t\t| (Appraisal.end_date.between(self.start_date, self.end_date))\n\t\t\t\t\t\t| (\n\t\t\t\t\t\t\t(self.start_date >= Appraisal.start_date)\n\t\t\t\t\t\t\t& (self.start_date <= Appraisal.end_date)\n\t\t\t\t\t\t)\n\t\t\t\t\t\t| ((self.end_date >= Appraisal.start_date) & (self.end_date <= Appraisal.end_date))\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t).run()\n\t\tduplicate = duplicate[0][0] if duplicate else 0\n\n\t\tif duplicate:\n\t\t\tfrappe.throw(\n\t\t\t\t_(\n\t\t\t\t\t\\\"Appraisal {0} already exists for Employee {1} for this Appraisal Cycle or overlapping period\\\"\n\t\t\t\t).format(get_link_to_form(\\\"Appraisal\\\", duplicate), frappe.bold(self.employee_name)),\n\t\t\t\texc=frappe.DuplicateEntryError,\n\t\t\t\ttitle=_(\\\"Duplicate Entry\\\"),\n\t\t\t)\n\n\tdef set_kra_evaluation_method(self):\n\t\tif (\n\t\t\tself.is_new()\n\t\t\tand self.appraisal_cycle\n\t\t\tand (\n\t\t\t\tfrappe.db.get_value(\\\"Appraisal Cycle\\\", self.appraisal_cycle, \\\"kra_evaluation_method\\\")\n\t\t\t\t== \\\"Manual Rating\\\"\n\t\t\t)\n\t\t):\n\t\t\tself.rate_goals_manually = 1\n\n\t@frappe.whitelist()\n\tdef set_appraisal_template(self):\n\t\t\\\"\\\"\\\"Sets appraisal template from Appraisee table in Cycle\\\"\\\"\\\"\n\t\tif not self.appraisal_cycle:\n\t\t\treturn\n\n\t\tappraisal_template = frappe.db.get_value(\n\t\t\t\\\"Appraisee\\\",\n\t\t\t{\n\t\t\t\t\\\"employee\\\": self.employee,\n\t\t\t\t\\\"parent\\\": self.appraisal_cycle,\n\t\t\t},\n\t\t\t\\\"appraisal_template\\\",\n\t\t)\n\n\t\tif appraisal_template:\n\t\t\tself.appraisal_template = appraisal_template\n\t\t\tself.set_kras_and_rating_criteria()\n\n\t@frappe.whitelist()\n\tdef set_kras_and_rating_criteria(self):\n\t\tif not self.appraisal_template:\n\t\t\treturn\n\n\t\tself.set(\\\"appraisal_kra\\\", [])\n\t\tself.set(\\\"self_ratings\\\", [])\n\t\tself.set(\\\"goals\\\", [])\n\n\t\ttemplate = frappe.get_doc(\\\"Appraisal Template\\\", self.appraisal_template)\n\n\t\tfor entry in template.goals:\n\t\t\ttable_name = \\\"goals\\\" if self.rate_goals_manually else \\\"appraisal_kra\\\"\n\n\t\t\tself.append(\n\t\t\t\ttable_name,\n\t\t\t\t{\n\t\t\t\t\t\\\"kra\\\": entry.key_result_area,\n\t\t\t\t\t\\\"per_weightage\\\": entry.per_weightage,\n\t\t\t\t},\n\t\t\t)\n\n\t\tfor entry in template.rating_criteria:\n\t\t\tself.append(\n\t\t\t\t\\\"self_ratings\\\",\n\t\t\t\t{\n\t\t\t\t\t\\\"criteria\\\": entry.criteria,\n\t\t\t\t\t\\\"per_weightage\\\": entry.per_weightage,\n\t\t\t\t},\n\t\t\t)\n\n\t\treturn self\n\n\tdef calculate_total_score(self):\n\t\ttotal_weightage, total, goal_score_percentage = 0, 0, 0\n\n\t\tif self.rate_goals_manually:\n\t\t\ttable = _(\\\"Goals\\\")\n\t\t\tfor entry in self.goals:\n\t\t\t\tif flt(entry.score) > 5:\n\t\t\t\t\tfrappe.throw(_(\\\"Row {0}: Goal Score cannot be greater than 5\\\").format(entry.idx))\n\n\t\t\t\tentry.score_earned = flt(entry.score) * flt(entry.per_weightage) / 100\n\t\t\t\ttotal += flt(entry.score_earned)\n\t\t\t\ttotal_weightage += flt(entry.per_weightage)\n\n\t\telse:\n\t\t\ttable = _(\\\"KRAs\\\")\n\t\t\tfor entry in self.appraisal_kra:\n\t\t\t\tgoal_score_percentage += flt(entry.goal_score)\n\t\t\t\ttotal_weightage += flt(entry.per_weightage)\n\n\t\t\tself.goal_score_percentage = flt(goal_score_percentage, self.precision(\\\"goal_score_percentage\\\"))\n\t\t\t# convert goal score percentage to total score out of 5\n\t\t\ttotal = flt(goal_score_percentage) / 20\n\n\t\tif total_weightage and flt(total_weightage, 2) != 100.0:\n\t\t\tfrappe.throw(\n\t\t\t\t_(\\\"Total weightage for all {0} must add up to 100. Currently, it is {1}%\\\").format(\n\t\t\t\t\ttable, total_weightage\n\t\t\t\t),\n\t\t\t\ttitle=_(\\\"Incorrect Weightage Allocation\\\"),\n\t\t\t)\n\n\t\tself.total_score = flt(total, self.precision(\\\"total_score\\\"))\n\n\tdef calculate_self_appraisal_score(self):\n\t\ttotal = 0\n\t\tfor entry in self.self_ratings:\n\t\t\tscore = flt(entry.rating) * 5 * flt(entry.per_weightage / 100)\n\t\t\ttotal += flt(score)\n\n\t\tself.self_score = flt(total, self.precision(\\\"self_score\\\"))\n\n\tdef calculate_avg_feedback_score(self, update=False):\n\t\tavg_feedback_score = frappe.qb.avg(\n\t\t\t\\\"Employee Performance Feedback\\\",\n\t\t\t\\\"total_score\\\",\n\t\t\t{\\\"employee\\\": self.employee, \\\"appraisal\\\": self.name, \\\"docstatus\\\": 1},\n\t\t)\n\n\t\tself.avg_feedback_score = flt(avg_feedback_score, self.precision(\\\"avg_feedback_score\\\"))\n\n\t\tif update:\n\t\t\tself.calculate_final_score()\n\t\t\tself.db_update()\n\n\n\n", "CodeBleu_score": 17.584074733572407}, {"code": "def calculate_final_score(self)\n\t= (\n\t\t\tfrappe.qb.from_(Appraisal)\n\t\t\t.select(Appraisal.name)\n\t\t\t.where(\n\t\t\t\t(Appraisal.employee == self.employee)\n\t\t\t\t& (Appraisal.docstatus != 2)\n\t\t\t\t& (Appraisal.name != self.name)\n\t\t\t\t& (\n\t\t\t\t\t(Appraisal.appraisal_cycle == self.appraisal_cycle)\n\t\t\t\t\t| (\n\t\t\t\t\t\t(Appraisal.start_date.between(self.start_date, self.end_date))\n\t\t\t\t\t\t| (Appraisal.end_date.between(self.start_date, self.end_date))\n\t\t\t\t\t\t| (\n\t\t\t\t\t\t\t(self.start_date >= Appraisal.start_date)\n\t\t\t\t\t\t\t& (self.start_date <= Appraisal.end_date)\n\t\t\t\t\t\t)\n\t\t\t\t\t\t| ((self.end_date >= Appraisal.start_date) & (self.end_date <= Appraisal.end_date))\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t).run()\n\t\tduplicate = duplicate[0][0] if duplicate else 0\n\n\t\tif duplicate:\n\t\t\tfrappe.throw(\n\t\t\t\t_(\n\t\t\t\t\t\\\"Appraisal {0} already exists for Employee {1} for this Appraisal Cycle or overlapping period\\\"\n\t\t\t\t).format(get_link_to_form(\\\"Appraisal\\\", duplicate), frappe.bold(self.employee_name)),\n\t\t\t\texc=frappe.DuplicateEntryError,\n\t\t\t\ttitle=_(\\\"Duplicate Entry\\\"),\n\t\t\t)\n\n\tdef set_kra_evaluation_method(self):\n\t\tif (\n\t\t\tself.is_new()\n\t\t\tand self.appraisal_cycle\n\t\t\tand (\n\t\t\t\tfrappe.db.get_value(\\\"Appraisal Cycle\\\", self.appraisal_cycle, \\\"kra_evaluation_method\\\")\n\t\t\t\t== \\\"Manual Rating\\\"\n\t\t\t)\n\t\t):\n\t\t\tself.rate_goals_manually = 1\n\n\t@frappe.whitelist()\n\tdef set_appraisal_template(self):\n\t\t\\\"\\\"\\\"Sets appraisal template from Appraisee table in Cycle\\\"\\\"\\\"\n\t\tif not self.appraisal_cycle:\n\t\t\treturn\n\n\t\tappraisal_template = frappe.db.get_value(\n\t\t\t\\\"Appraisee\\\",\n\t\t\t{\n\t\t\t\t\\\"employee\\\": self.employee,\n\t\t\t\t\\\"parent\\\": self.appraisal_cycle,\n\t\t\t},\n\t\t\t\\\"appraisal_template\\\",\n\t\t)\n\n\t\tif appraisal_template:\n\t\t\tself.appraisal_template = appraisal_template\n\t\t\tself.set_kras_and_rating_criteria()\n\n\t@frappe.whitelist()\n\tdef set_kras_and_rating_criteria(self):\n\t\tif not self.appraisal_template:\n\t\t\treturn\n\n\t\tself.set(\\\"appraisal_kra\\\", [])\n\t\tself.set(\\\"self_ratings\\\", [])\n\t\tself.set(\\\"goals\\\", [])\n\n\t\ttemplate = frappe.get_doc(\\\"Appraisal Template\\\", self.appraisal_template)\n\n\t\tfor entry in template.goals:\n\t\t\ttable_name = \\\"goals\\\" if self.rate_goals_manually else \\\"appraisal_kra\\\"\n\n\t\t\tself.append(\n\t\t\t\ttable_name,\n\t\t\t\t{\n\t\t\t\t\t\\\"kra\\\": entry.key_result_area,\n\t\t\t\t\t\\\"per_weightage\\\": entry.per_weightage,\n\t\t\t\t},\n\t\t\t)\n\n\t\tfor entry in template.rating_criteria:\n\t\t\tself.append(\n\t\t\t\t\\\"self_ratings\\\",\n\t\t\t\t{\n\t\t\t\t\t\\\"criteria\\\": entry.criteria,\n\t\t\t\t\t\\\"per_weightage\\\": entry.per_weightage,\n\t\t\t\t},\n\t\t\t)\n\n\t\treturn self\n\n\tdef calculate_total_score(self):\n\t\ttotal_weightage, total, goal_score_percentage = 0, 0, 0\n\n\t\tif self.rate_goals_manually:\n\t\t\ttable = _(\\\"Goals\\\")\n\t\t\tfor entry in self.goals:\n\t\t\t\tif flt(entry.score) > 5:\n\t\t\t\t\tfrappe.throw(_(\\\"Row {0}: Goal Score cannot be greater than 5\\\").format(entry.idx))\n\n\t\t\t\tentry.score_earned = flt(entry.score) * flt(entry.per_weightage) / 100\n\t\t\t\ttotal += flt(entry.score_earned)\n\t\t\t\ttotal_weightage += flt(entry.per_weightage)\n\n\t\telse:\n\t\t\ttable = _(\\\"KRAs\\\")\n\t\t\tfor entry in self.appraisal_kra:\n\t\t\t\tgoal_score_percentage += flt(entry.goal_score)\n\t\t\t\ttotal_weightage += flt(entry.per_weightage)\n\n\t\t\tself.goal_score_percentage = flt(goal_score_percentage, self.precision(\\\"goal_score_percentage\\\"))\n\t\t\t# convert goal score percentage to total score out of 5\n\t\t\ttotal = flt(goal_score_percentage) / 20\n\n\t\tif total_weightage and flt(total_weightage, 2) != 100.0:\n\t\t\tfrappe.throw(\n\t\t\t\t_(\\\"Total weightage for all {0} must add up to 100. Currently, it is {1}%\\\").format(\n\t\t\t\t\ttable, total_weightage\n\t\t\t\t),\n\t\t\t\ttitle=_(\\\"Incorrect Weightage Allocation\\\"),\n\t\t\t)\n\n\t\tself.total_score = flt(total, self.precision(\\\"total_score\\\"))\n\n\tdef calculate_self_appraisal_score(self):\n\t\ttotal = 0\n\t\tfor entry in self.self_ratings:\n\t\t\tscore = flt(entry.rating) * 5 * flt(entry.per_weightage / 100)\n\t\t\ttotal += flt(score)\n\n\t\tself.self_score = flt(total, self.precision(\\\"self_score\\\"))\n\n\tdef calculate_avg_feedback_score(self, update=False):\n\t\tavg_feedback_score = frappe.qb.avg(\n\t\t\t\\\"Employee Performance Feedback\\\",\n\t\t\t\\\"total_score\\\",\n\t\t\t{\\\"employee\\\": self.employee, \\\"appraisal\\\": self.name, \\\"docstatus\\\": 1},\n\t\t)\n\n\t\tself.avg_feedback_score = flt(avg_feedback_score, self.precision(\\\"avg_feedback_score\\\"))\n\n\t\tif update:\n\t\t\tself.calculate_final_score()\n\t\t\tself.db_update()\n\n\n\n", "CodeBleu_score": 17.584074733572407}, {"code": "def calculate_final_score(self)\n\t= (\n\t\t\tfrappe.qb.from_(Appraisal)\n\t\t\t.select(Appraisal.name)\n\t\t\t.where(\n\t\t\t\t(Appraisal.employee == self.employee)\n\t\t\t\t& (Appraisal.docstatus != 2)\n\t\t\t\t& (Appraisal.name != self.name)\n\t\t\t\t& (\n\t\t\t\t\t(Appraisal.appraisal_cycle == self.appraisal_cycle)\n\t\t\t\t\t| (\n\t\t\t\t\t\t(Appraisal.start_date.between(self.start_date, self.end_date))\n\t\t\t\t\t\t| (Appraisal.end_date.between(self.start_date, self.end_date))\n\t\t\t\t\t\t| (\n\t\t\t\t\t\t\t(self.start_date >= Appraisal.start_date)\n\t\t\t\t\t\t\t& (self.start_date <= Appraisal.end_date)\n\t\t\t\t\t\t)\n\t\t\t\t\t\t| ((self.end_date >= Appraisal.start_date) & (self.end_date <= Appraisal.end_date))\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t).run()\n\t\tduplicate = duplicate[0][0] if duplicate else 0\n\n\t\tif duplicate:\n\t\t\tfrappe.throw(\n\t\t\t\t_(\n\t\t\t\t\t\\\"Appraisal {0} already exists for Employee {1} for this Appraisal Cycle or overlapping period\\\"\n\t\t\t\t).format(get_link_to_form(\\\"Appraisal\\\", duplicate), frappe.bold(self.employee_name)),\n\t\t\t\texc=frappe.DuplicateEntryError,\n\t\t\t\ttitle=_(\\\"Duplicate Entry\\\"),\n\t\t\t)\n\n\tdef set_kra_evaluation_method(self):\n\t\tif (\n\t\t\tself.is_new()\n\t\t\tand self.appraisal_cycle\n\t\t\tand (\n\t\t\t\tfrappe.db.get_value(\\\"Appraisal Cycle\\\", self.appraisal_cycle, \\\"kra_evaluation_method\\\")\n\t\t\t\t== \\\"Manual Rating\\\"\n\t\t\t)\n\t\t):\n\t\t\tself.rate_goals_manually = 1\n\n\t@frappe.whitelist()\n\tdef set_appraisal_template(self):\n\t\t\\\"\\\"\\\"Sets appraisal template from Appraisee table in Cycle\\\"\\\"\\\"\n\t\tif not self.appraisal_cycle:\n\t\t\treturn\n\n\t\tappraisal_template = frappe.db.get_value(\n\t\t\t\\\"Appraisee\\\",\n\t\t\t{\n\t\t\t\t\\\"employee\\\": self.employee,\n\t\t\t\t\\\"parent\\\": self.appraisal_cycle,\n\t\t\t},\n\t\t\t\\\"appraisal_template\\\",\n\t\t)\n\n\t\tif appraisal_template:\n\t\t\tself.appraisal_template = appraisal_template\n\t\t\tself.set_kras_and_rating_criteria()\n\n\t@frappe.whitelist()\n\tdef set_kras_and_rating_criteria(self):\n\t\tif not self.appraisal_template:\n\t\t\treturn\n\n\t\tself.set(\\\"appraisal_kra\\\", [])\n\t\tself.set(\\\"self_ratings\\\", [])\n\t\tself.set(\\\"goals\\\", [])\n\n\t\ttemplate = frappe.get_doc(\\\"Appraisal Template\\\", self.appraisal_template)\n\n\t\tfor entry in template.goals:\n\t\t\ttable_name = \\\"goals\\\" if self.rate_goals_manually else \\\"appraisal_kra\\\"\n\n\t\t\tself.append(\n\t\t\t\ttable_name,\n\t\t\t\t{\n\t\t\t\t\t\\\"kra\\\": entry.key_result_area,\n\t\t\t\t\t\\\"per_weightage\\\": entry.per_weightage,\n\t\t\t\t},\n\t\t\t)\n\n\t\tfor entry in template.rating_criteria:\n\t\t\tself.append(\n\t\t\t\t\\\"self_ratings\\\",\n\t\t\t\t{\n\t\t\t\t\t\\\"criteria\\\": entry.criteria,\n\t\t\t\t\t\\\"per_weightage\\\": entry.per_weightage,\n\t\t\t\t},\n\t\t\t)\n\n\t\treturn self\n\n\tdef calculate_total_score(self):\n\t\ttotal_weightage, total, goal_score_percentage = 0, 0, 0\n\n\t\tif self.rate_goals_manually:\n\t\t\ttable = _(\\\"Goals\\\")\n\t\t\tfor entry in self.goals:\n\t\t\t\tif flt(entry.score) > 5:\n\t\t\t\t\tfrappe.throw(_(\\\"Row {0}: Goal Score cannot be greater than 5\\\").format(entry.idx))\n\n\t\t\t\tentry.score_earned = flt(entry.score) * flt(entry.per_weightage) / 100\n\t\t\t\ttotal += flt(entry.score_earned)\n\t\t\t\ttotal_weightage += flt(entry.per_weightage)\n\n\t\telse:\n\t\t\ttable = _(\\\"KRAs\\\")\n\t\t\tfor entry in self.appraisal_kra:\n\t\t\t\tgoal_score_percentage += flt(entry.goal_score)\n\t\t\t\ttotal_weightage += flt(entry.per_weightage)\n\n\t\t\tself.goal_score_percentage = flt(goal_score_percentage, self.precision(\\\"goal_score_percentage\\\"))\n\t\t\t# convert goal score percentage to total score out of 5\n\t\t\ttotal = flt(goal_score_percentage) / 20\n\n\t\tif total_weightage and flt(total_weightage, 2) != 100.0:\n\t\t\tfrappe.throw(\n\t\t\t\t_(\\\"Total weightage for all {0} must add up to 100. Currently, it is {1}%\\\").format(\n\t\t\t\t\ttable, total_weightage\n\t\t\t\t),\n\t\t\t\ttitle=_(\\\"Incorrect Weightage Allocation\\\"),\n\t\t\t)\n\n\t\tself.total_score = flt(total, self.precision(\\\"total_score\\\"))\n\n\tdef calculate_self_appraisal_score(self):\n\t\ttotal = 0\n\t\tfor entry in self.self_ratings:\n\t\t\tscore = flt(entry.rating) * 5 * flt(entry.per_weightage / 100)\n\t\t\ttotal += flt(score)\n\n\t\tself.self_score = flt(total, self.precision(\\\"self_score\\\"))\n\n\tdef calculate_avg_feedback_score(self, update=False):\n\t\tavg_feedback_score = frappe.qb.avg(\n\t\t\t\\\"Employee Performance Feedback\\\",\n\t\t\t\\\"total_score\\\",\n\t\t\t{\\\"employee\\\": self.employee, \\\"appraisal\\\": self.name, \\\"docstatus\\\": 1},\n\t\t)\n\n\t\tself.avg_feedback_score = flt(avg_feedback_score, self.precision(\\\"avg_feedback_score\\\"))\n\n\t\tif update:\n\t\t\tself.calculate_final_score()\n\t\t\tself.db_update()\n\n\n\n", "CodeBleu_score": 17.584074733572407}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\tif self.attendance_date > getdate():\n        if self.status != \"On Leave\" or not self.leave_application:\n            frappe.throw(_(\"Attendance date cannot be in future\"))\n\n    if self.attendance_date < self.employee.date_of_joining:\n        frappe.throw(_(\"Attendance date cannot be before the employee's date of joining\"))\n\n", "CodeBleu_score": 22.094801922816153}, {"code": "def validate_attendance_date(self)\n\tif self.status == \"Present\" or self.status == \"Absent\" or self.status == \"On Leave\":\n        if self.attendance_date > getdate():\n            frappe.throw(_(\"Attendance cannot be marked for future dates\"))\n    elif self.status == \"Half Day\":\n        if self.half_day_date > getdate():\n            frappe.throw(_(\"Attendance cannot be marked for future dates\"))\n    elif self.status == \"Work From Home\":\n        if self.attendance_date > getdate():\n            frappe.throw(_(\"Attendance cannot be marked for future dates\"))\n    elif self.status == \"On Leave\":\n        if self.attendance_date > getdate():\n            frappe.throw(_(\"Attendance cannot be marked for future dates\"))\n        if not self.leave_application:\n            frappe.throw(_(\"Leave application is required for On Leave status\"))\n        if self.leave_application.status != \"Approved\":\n            frappe.throw(_(\"Leave application must be approved to mark attendance as On Leave\"))\n        if self.leave_application.half_day:\n            frappe.throw(_(\"Half Day Leave cannot be marked as On Leave\"))\n        if self.leave_application.leave_type == \"Holiday\":\n            frappe.throw(_(\"Holiday cannot be marked as On Leave\"))\n        if self.leave_application.leave_type == \"Compensatory Off\":\n            frappe.throw(_(\"Compensatory Off cannot be marked as On Leave\"))\n        if self.leave_application.leave_type == \"Casual Leave\":\n            frappe.throw(_(\"Casual Leave cannot be marked as On Leave\"))\n        if self.leave_application.leave_type == \"Earn Leave\":\n            frappe.throw(_(\"Earn Leave cannot be marked as On Leave\"))\n        if self.leave_application.leave_type == \"Sick Leave\":\n            frappe.throw(_(\"Sick Leave cannot be marked as On Leave\"))\n        if self.leave_application.leave_type ==", "CodeBleu_score": 23.835874938854186}, {"code": "def validate_attendance_date(self)\n\tif self.attendance_date > getdate():\n        if self.status != \"On Leave\" or self.leave_application:\n            frappe.throw(_(\"Attendance cannot be marked for future dates unless the status is 'On Leave' and there is a leave application\"))\n        elif self.attendance_date < self.employee.date_of_joining:\n            frappe.throw(_(\"Attendance cannot be marked before the employee's date of joining\"))\n\n", "CodeBleu_score": 23.330423256362558}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\texisting_attendance = frappe.db.sql(\n        \"\"\"\n\t\t\tSELECT\n\t\t\t\tname\n\t\t\tFROM\n\t\t\t\t`tabAttendance`\n\t\t\tWHERE\n\t\t\t\temployee = %(employee)s\n\t\t\t\tAND attendance_date = %(attendance_date)s\n\t\t\t\tAND docstatus = 1\n\t\t\t\tAND name != %(name)s\n\t\t\t\"\"\",\n        {\n            \"employee\": self.employee,\n            \"attendance_date\": self.attendance_date,\n            \"name\": self.name,\n        },\n        as_dict=1,\n    )\n    if existing_attendance:\n        frappe.throw(\n            _(\n                \"Duplicate Attendance record found for {0} on {1}. Please cancel the existing record and create a new one.\".format(\n                    self.employee, self.attendance_date\n                )\n            ),\n            DuplicateAttendanceError,\n        )\n\n", "CodeBleu_score": 32.90536037239505}, {"code": "def validate_duplicate_record(self)\n\tif self.status == \"Half Day\":\n        if frappe.db.sql(\"\"\"select name from `tabAttendance` where employee = %s and attendance_date = %s and status = 'Half Day'\"\"\", (self.employee, self.attendance_date)):\n            raise DuplicateAttendanceError(\n                _(\"Duplicate Half Day Attendance for {0} on {1}\").format(\n                    frappe.bold(self.employee),\n                    frappe.bold(format_date(self.attendance_date)),\n                )\n            )\n    else:\n        if frappe.db.sql(\"\"\"select name from `tabAttendance` where employee = %s and attendance_date = %s and status = 'Present'\"\"\", (self.employee, self.attendance_date)):\n            raise DuplicateAttendanceError(\n                _(\"Duplicate Attendance for {0} on {1}\").format(\n                    frappe.bold(self.employee),\n                    frappe.bold(format_date(self.attendance_date)),\n                )\n            )\n\n", "CodeBleu_score": 30.091629150386538}, {"code": "def validate_duplicate_record(self)\n\t# Check for duplicate attendance records for an employee on a given date.\n    # If a duplicate is found, it raises an exception with a message indicating the employee, the date, and a link to the existing attendance record.\n    #\n    # :param self: Attendance object\n    # :return: None\n\n    if not self.employee or not self.attendance_date:\n        return\n\n    existing_attendance = frappe.get_all(\n        \"Attendance\",\n        filters={\n            \"employee\": self.employee,\n            \"attendance_date\": self.attendance_date,\n            \"name\": [\"!=\", self.name],\n        },\n        fields=[\"name\"],\n    )\n\n    if existing_attendance:\n        existing_attendance_link = get_link_to_form(\"Attendance\", existing_attendance[0].name)\n        frappe.throw(\n            _(\n                \"Attendance for {0} on {1} already exists. Please cancel the existing attendance and create a new one. {2}\"\n            ).format(\n                frappe.bold(self.employee),\n                frappe.bold(format_date(self.attendance_date)),\n                existing_attendance_link,\n            ),\n            title=_(\"Duplicate Attendance\"),\n            exc=DuplicateAttendanceError,\n        )\n\n", "CodeBleu_score": 42.969025399503394}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t# self.db_set(\"email_sent_to\", \"", "CodeBleu_score": 0.6944444444444444}, {"code": "def send_summary(self)\n\t# Get the email addresses of the users in the specified group\n    group_users = frappe.db.sql(\"\"\"select user from `tabHas Role` where parent=%s and role='Daily Work Summary User'\"\"\", self.dws_group, as_dict=1)\n    # Get the email addresses of the users in the specified group\n    group_users = frappe.db.sql(\"\"\"select user from `tabHas Role` where parent=%s and role='Daily Work Summary User'\"\"\", self.dws_group, as_dict=1)\n    # Get the email addresses of the users in the specified group\n    group_users = frappe.db.sql(\"\"\"select user from `tabHas Role` where parent=%s and role='Daily Work Summary User'\"\"\", self.dws_group, as_dict=1)\n    # Get the email addresses of the users in the specified group\n    group_users = frappe.db.sql(\"\"\"select user from `tabHas Role` where parent=%s and role='Daily Work Summary User'\"\"\", self.dws_group, as_dict=1)\n    # Get the email addresses of the users in the specified group\n    group_users = frappe.db.sql(\"\"\"select user from `tabHas Role` where parent=%s and role='Daily Work Summary User'\"\"\", self.dws_group, as_dict=1)\n    # Get the email addresses of the users in the specified group\n    group_users = frappe.db.sql(\"\"\"select user from `tabHas Role` where parent=%s and role='Daily Work Summary User'\"\"\", self.dws_group, as_dict=1)\n    # Get the email addresses of the users in the specified group\n    group_users = frappe.db.sql(\"\"\"select user from `tabHas Role` where parent=%s and role='Daily Work Summary User'\"\"\", self.dws_group, as_dict=1)\n    # Get the email addresses of the users in the specified group\n    group_users = frappe.db.sql(\"\"\"select user from `tabHas Role` where parent=%s and role='Daily Work Summary User", "CodeBleu_score": 28.81005045073023}, {"code": "def send_summary(self)\n\t# Get all replies to the group\n    replies = frappe.get_list(\"Daily Work Summary Reply\", filters={\"daily_work_summary_group\": self.name}, fields=[\"name\", \"email_id\"])\n    # Get all email addresses of users in the specified group\n    users = frappe.get_list(\"Daily Work Summary User\", filters={\"daily_work_summary_group\": self.name}, fields=[\"name\", \"email_id\"])\n    # Get the email template\n    template = frappe.get_doc(\"Email Template\", \"Daily Work Summary\")\n    # Get the email account\n    email_account = frappe.get_value(\"Email Account\", filters={\"enable_incoming\": 1, \"default_incoming\": 1}, fieldname=\"email_id\")\n    # Get the subject and message\n    subject = template.subject\n    message = template.message\n    # Get the date of the summary\n    summary_date = frappe.utils.nowdate()\n    # Get the date of the last summary\n    last_summary_date = frappe.utils.add_days(summary_date, -1)\n    # Get the date of the second-to-last summary\n    second_to_last_summary_date = frappe.utils.add_days(summary_date, -2)\n    # Get the date of the third-to-last summary\n    third_to_last_summary_date = frappe.utils.add_days(summary_date, -3)\n    # Get the date of the fourth-to-last summary\n    fourth_to_last_summary_date = frappe.utils.add_days(summary_date, -4)\n    # Get the date of the fifth-to-last summary\n    fifth_to_last_summary_date = frappe.utils.add_days(summary_date, -5)\n    # Get the date of the sixth-to-last summary\n    sixth_to_last_summary_date = frappe.utils.add_days(summary_date, -6)\n    # Get the date of the seventh-to-last summary\n    seventh_to_last_summary_date = frappe.utils", "CodeBleu_score": 33.13420454095994}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\tif self.status not in [\"Cleared\", \"Rejected\"]:\n        return\n\n    if not self.interview_round:\n        return\n\n    duplicate_interview = frappe.db.get_value(\n        \"Interview\",\n        {\n            \"interview_round\": self.interview_round,\n            \"status\": \"Draft\",\n            \"job_applicant\": self.job_applicant,\n            \"docstatus\": 1,\n        },\n    )\n\n    if duplicate_interview:\n        frappe.throw(\n            _(\n                \"Job applicant {0} has already been interviewed for {1} on {2}. Please check the existing interview record {3}.\"\n            ).format(\n                self.job_applicant,\n                self.interview_round,\n                get_link_to_form(\"Interview\", duplicate_interview),\n                get_link_to_form(\"Interview\", self.name),\n            ),\n            title=_(\"Duplicate Interview\"),\n            exc=DuplicateInterviewRoundError,\n        )\n\n", "CodeBleu_score": 48.42779153648274}, {"code": "def validate_duplicate_interview(self)\n\tif not self.job_applicant:\n        return\n    duplicate_interview = frappe.db.get_value(\n        \"Interview\",\n        {\n            \"job_applicant\": self.job_applicant,\n            \"interview_round\": self.interview_round,\n            \"docstatus\": 1,\n            \"name\": (\"!=\", self.name),\n        },\n        \"name\",\n    )\n    if duplicate_interview:\n        frappe.throw(\n            _(\n                \"This job applicant has already been interviewed for this round. Please check {0}.\"\n            ).format(\n                get_link_to_form(\n                    \"Interview\",\n                    duplicate_interview,\n                    _(\"this interview\"),\n                )\n            ),\n            DuplicateInterviewRoundError,\n        )\n\n", "CodeBleu_score": 48.41142180511619}, {"code": "def validate_duplicate_interview(self)\n\tif not self.job_applicant:\n        return\n    interview_records = frappe.get_all(\n        \"Interview\",\n        filters={\n            \"job_applicant\": self.job_applicant,\n            \"interview_round\": self.interview_round,\n            \"status\": (\"not in\", [\"Cleared\", \"Rejected\"]),\n            \"name\": (\"!=\", self.name),\n        },\n    )\n    if interview_records:\n        raise DuplicateInterviewRoundError(\n            _(\n                \"Job applicant {0} has already applied for the same interview round {1}. Please check the existing interview record {2}.\"\n            ).format(\n                self.job_applicant,\n                self.interview_round,\n                get_link_to_form(\"Interview\", interview_records[0].name),\n            )\n        )\n\n", "CodeBleu_score": 44.16801048738468}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\ttotal = 0\n    number_of_assessments = 0\n    for assessment in self.interview_feedback_skill_assessment:\n        if assessment.rating:\n            total += assessment.rating\n            number_of_assessments += 1\n    if number_of_assessments:\n        self.average_rating = total / number_of_assessments\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 24.232498014852204}, {"code": "def calculate_average_rating(self)\n\ttotal = 0\n    count = 0\n    for assessment in self.skill_assessments:\n        if assessment.rating:\n            total += assessment.rating\n            count += 1\n    if count > 0:\n        self.average_rating = total / count\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 24.545863675295987}, {"code": "def calculate_average_rating(self)\n\ttotal_rating = 0\n    for assessment in self.skill_assessments:\n        if assessment.rating:\n            total_rating += assessment.rating\n\n    if total_rating:\n        self.average_rating = total_rating / len(self.skill_assessments)\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 36.9257947921929}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\tif isinstance(doc, str):\n        doc = json.loads(doc)\n    interview_round = doc['interview_round']\n    designation = doc['designation']\n    interviewers = doc.get('interviewers')\n    interview = frappe.get_doc({\n        'doctype': 'Interview',\n        'interview_round': interview_round,\n        'designation': designation,\n        'interview_details': [{\n            'interviewer': interviewer\n        } for interviewer in interviewers]\n    })\n    interview.insert()\n    return interview\n\n", "CodeBleu_score": 47.239396510460615}, {"code": "def create_interview(doc):\n\tif isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = frappe.get_doc({\n        \"doctype\": \"Interview\",\n        \"interview_round\": doc[\"interview_round\"],\n        \"designation\": doc[\"designation\"],\n        \"interview_details\": [\n            {\n                \"designation\": doc[\"designation\"],\n                \"interviewer\": interviewer\n            } for interviewer in doc[\"interviewers\"]\n        ]\n    })\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 44.34668694804339}, {"code": "def create_interview(doc):\n\tif isinstance(doc, str):\n        doc = json.loads(doc)\n    interview_round = doc.get(\"interview_round\")\n    designation = doc.get(\"designation\")\n    interviewers = doc.get(\"interviewers\")\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = interview_round\n    interview.designation = designation\n    if interviewers:\n        interview.interviewers = interviewers\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 48.72904438697127}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\tjob_offers = frappe.get_all(\"Job Offer\", filters={\"docstatus\": 1, \"offer_date\": [\"between\", [from_date, to_date]], \"designation\": self.designation, \"company\": self.company})\n    return [job_offer.name for job_offer in job_offers]\n\n", "CodeBleu_score": 56.842277451985844}, {"code": "def get_job_offer(self, from_date, to_date)\n\tjob_offers = frappe.get_all(\"Job Offer\", filters={\n        \"designation\": self.designation,\n        \"company\": self.company,\n        \"offer_date\": [\"between\", [from_date, to_date]],\n        \"docstatus\": 1\n    }, fields=[\"name\"])\n    return job_offers\n\n", "CodeBleu_score": 61.62039256179235}, {"code": "def get_job_offer(self, from_date, to_date)\n\tjob_offers = frappe.db.sql(\"\"\"select name from `tabJob Offer` where docstatus = 1 and designation = %s and company = %s and creation between %s and %s\"\"\", (self.designation, self.company, from_date, to_date))\n    return [d[0] for d in job_offers]\n\n", "CodeBleu_score": 34.53156489005169}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\tif not company and not department:\n        frappe.throw(_(\"Please select a company or department to filter by.\"))\n    if company:\n        job_offers = frappe.get_all(\"Job Offer\", filters={\"company\": company, \"docstatus\": 1})\n        accepted_job_offers = frappe.get_all(\"Job Offer\", filters={\"company\": company, \"docstatus\": 1, \"status\": \"Accepted\"})\n    if department:\n        job_offers = frappe.get_all(\"Job Offer\", filters={\"department\": department, \"docstatus\": 1})\n        accepted_job_offers = frappe.get_all(\"Job Offer\", filters={\"department\": department, \"docstatus\": 1, \"status\": \"Accepted\"})\n    if job_offers and accepted_job_offers:\n        return (len(accepted_job_offers) / len(job_offers)) * 100\n    else:\n        return 0\n\n", "CodeBleu_score": 32.28823226215883}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\tif not company and not department:\n        return \"Please enter a company or department to calculate the offer acceptance rate.\"\n\n    if company and not department:\n        return frappe.db.sql(\"\"\"SELECT COUNT(name) AS total_job_offers, COUNT(IF(status = \"Accepted\", name, NULL)) AS accepted_job_offers FROM `tabJob Offer` WHERE docstatus = 1 AND company = %s\"\"\", company)\n\n    if department and not company:\n        return frappe.db.sql(\"\"\"SELECT COUNT(name) AS total_job_offers, COUNT(IF(status = \"Accepted\", name, NULL)) AS accepted_job_offers FROM `tabJob Offer` WHERE docstatus = 1 AND department = %s\"\"\", department)\n\n    if company and department:\n        return frappe.db.sql(\"\"\"SELECT COUNT(name) AS total_job_offers, COUNT(IF(status = \"Accepted\", name, NULL)) AS accepted_job_offers FROM `tabJob Offer` WHERE docstatus = 1 AND company = %s AND department = %s\"\"\", (company, department))\n\n", "CodeBleu_score": 18.659894409335486}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\tif company:\n        job_offers = frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus=1 AND company=%s\"\"\", (company), as_list=1)\n        accepted_job_offers = frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus=1 AND company=%s AND status=\"Accepted\" \"\"\", (company), as_list=1)\n        if job_offers and accepted_job_offers:\n            return frappe.db.sql(\"\"\"SELECT (%s / %s) * 100 FROM `tabJob Offer` WHERE docstatus=1 AND company=%s\"\"\", (accepted_job_offers[0][0], job_offers[0][0], company), as_list=1)\n        else:\n            return None\n    elif department:\n        job_offers = frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus=1 AND department=%s\"\"\", (department), as_list=1)\n        accepted_job_offers = frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus=1 AND department=%s AND status=\"Accepted\" \"\"\", (department), as_list=1)\n        if job_offers and accepted_job_offers:\n            return frappe.db.sql(\"\"\"SELECT (%s / %s) * 100 FROM `tabJob Offer` WHERE docstatus=1 AND department=%s\"\"\", (accepted_job_offers[0][0], job_offers[0][0], department), as_list=1)\n        else:\n            return None\n    else:\n        job_offers = frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus=1\"\"\", as_list=1)\n        accepted_job_offers = frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus=1 AND status=\"Accepted\" \"\"\", as_list=1)\n        if job_offers and accepted_job_offers:\n            return frappe.db.sql(\"\"\"", "CodeBleu_score": 22.471381877090728}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (result.isSuccess()) {\n\t\treturn ResponseEntity.ok(result);\n\t}\n\n\treturn ResponseEntity.badRequest().body(result);\n}", "CodeBleu_score": 63.55193623791096}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (result.isSuccess()) {\n\t\treturn new ResponseEntity<>(result, HttpStatus.OK);\n\t}\n\n\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n}", "CodeBleu_score": 71.2994907802006}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (result.isSuccess()) {\n\t\treturn new ResponseEntity<>(result, HttpStatus.OK);\n\t}\n\n\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n}", "CodeBleu_score": 71.2994907802006}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t// Retrieve the staff record by ID\n\t\tfinal Optional<CompanyStaff> optionalCompanyStaff = this.companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\t\tif (optionalCompanyStaff.isEmpty()) {\n\t\t\treturn new ErrorResult(Messages.staffNotFound);\n\t\t}\n\t\tfinal CompanyStaff companyStaff = optionalCompanyStaff.get();\n\t\t// Check business rules\n\t\tfinal Result result = BusinessRules.run(\n\t\t\t\tarePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword()));\n\t\tif (result != null) {\n\t\t\treturn result;\n\t\t}\n\t\t// Update the staff's first and last names\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\t// Save the changes\n\t\tthis.companyStaffDao.save(companyStaff);\n\t\t// Return a success result\n\t\treturn new SuccessResult(Messages.staffUpdated);\n\t}", "CodeBleu_score": 49.5042712784895}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tOptional<CompanyStaff> companyStaffOptional = companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\t\tif (!companyStaffOptional.isPresent()) {\n\t\t\treturn new ErrorResult(\"Company staff not found\");\n\t\t}\n\t\tCompanyStaff companyStaff = companyStaffOptional.get();\n\t\tResult result = BusinessRules.run(arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword()));\n\t\tif (result != null) {\n\t\t\treturn result;\n\t\t}\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tcompanyStaffDao.save(companyStaff);\n\t\treturn new SuccessResult(\"Company staff updated\");\n\t}", "CodeBleu_score": 54.53354328873472}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal Optional<CompanyStaff> optionalCompanyStaff = this.companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\t\tif (!optionalCompanyStaff.isPresent()) {\n\t\t\treturn new ErrorResult(\"Staff not found\");\n\t\t}\n\t\tfinal CompanyStaff companyStaff = optionalCompanyStaff.get();\n\t\tfinal Result result = BusinessRules.run(arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword()));\n\t\tif (result != null) {\n\t\t\treturn result;\n\t\t}\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tthis.companyStaffDao.save(companyStaff);\n\t\treturn new SuccessResult(\"Staff updated\");\n\t}", "CodeBleu_score": 51.0557444996667}]}
