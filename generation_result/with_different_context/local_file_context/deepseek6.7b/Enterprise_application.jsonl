{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = request.httprequest.args.getlist('attachment_ids')\n    attachments = request.env['ir.attachment'].browse(attachment_ids)\n    if not attachments.check_access_rights('read', raise_exception=False):\n        return request.not_found()\n    if not attachments.filtered(lambda a: a.res_model == 'account.document'):\n        return request.not_found()\n    if not attachments.filtered(lambda a: a.res_id in request.env['account.document'].search([]).ids):\n        return request.not_found()\n    zip_content = io.BytesIO()\n    with zipfile.ZipFile(zip_content, 'w') as zip_file:\n        for attachment in attachments:\n            zip_file.writestr(attachment.name, attachment.datas)\n    return request.make_response(zip_content.getvalue(), headers=_get_zip_headers(zip_content.getvalue(), 'documents.zip'))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 30.948921861143685}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = request.httprequest.args.getlist('attachment_ids')\n    attachments = request.env['ir.attachment'].browse(attachment_ids)\n    if not attachments.check_access_rights('read', raise_exception=False):\n        return request.not_found()\n    attachments.check_access_rule('read')\n    content = b''.join(attachment.datas for attachment in attachments)\n    return request.make_response(content, headers=_get_zip_headers(content, 'documents.zip'))", "CodeBleu_score": 41.63966274633021}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = request.httprequest.args.getlist('attachment_ids')\n    if not attachment_ids:\n        raise UserError(_('You have to select at least one attachment.'))\n    attachments = request.env['ir.attachment'].browse(attachment_ids)\n    if not attachments.check_access_rights('read', raise_exception=False):\n        raise UserError(_('You have no access rights to download the selected attachments.'))\n    if not attachments.check_access_rule(raise_exception=False):\n        raise UserError(_('You have no access rights to download the selected attachments.'))\n    content = b''.join(attachment.datas for attachment in attachments)\n    filename = _('Documents.zip')\n    headers = _get_zip_headers(content, filename)\n    return request.make_response(content, headers=headers)", "CodeBleu_score": 38.167495812659645}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(PortalAccount, self)._prepare_home_portal_values(counters)\n    invoices_count = counters.get('invoice', 0)\n    if not request.env['account.move'].check_access_rights('read', raise_exception=False):\n        invoices_count = 0\n    values['invoices_count'] = invoices_count\n    bills_count = counters.get('bill', 0)\n    if not request.env['account.move'].check_access_rights('read', raise_exception=False):\n        bills_count = 0\n    values['bills_count'] = bills_count\n    return values\n\n", "CodeBleu_score": 34.643908516705295}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(PortalAccount, self)._prepare_home_portal_values(counters)\n    if request.env.user.has_group('account.group_account_invoice'):\n        invoice_count = counters.get('account.move', {}).get('out_invoice', 0)\n        values['invoice_count'] = invoice_count\n        values['invoice_url'] = '/my/invoices'\n    if request.env.user.has_group('account.group_account_invoice'):\n        bill_count = counters.get('account.move', {}).get('in_invoice', 0)\n        values['bill_count'] = bill_count\n        values['bill_url'] = '/my/bills'\n    return values\n\n", "CodeBleu_score": 33.66891434308434}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(PortalAccount, self)._prepare_home_portal_values(counters)\n    invoice_count = counters.get('invoice_count')\n    if invoice_count is not None:\n        values['invoice_count'] = invoice_count\n        values['invoice_count_no_link'] = invoice_count if invoice_count <= 0 else 0\n    bill_count = counters.get('bill_count')\n    if bill_count is not None:\n        values['bill_count'] = bill_count\n        values['bill_count_no_link'] = bill_count if bill_count <= 0 else 0\n    return values\n\n", "CodeBleu_score": 29.50526667951775}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_portal_layout_values()\n    invoices = request.env['account.move'].search(self._get_invoices_domain(), limit=100)\n    if invoices:\n        # Update session history\n        invoices.ensure_one()\n        request.session['my_invoices_history'] = [invoices.id] + request.session.get('my_invoices_history', [])[:9]\n    invoices = invoices.sudo()\n    # Prepare pager\n    pager = portal_pager(\n        url=\"/my/invoices\",\n        url_args={'date_begin': date_begin, 'date_end': date_end, 'sortby': sortby, 'filterby': filterby},\n        total=len(invoices),\n        page=page,\n        step=self._items_per_page\n    )\n    # Prepare values\n    values.update({\n        'date': date_begin,\n        'date_end': date_end,\n        'invoices': invoices,\n        'pager': pager,\n        'searchbar_sortings': self._get_account_searchbar_sortings(),\n        'searchbar_filters': self._get_account_searchbar_filters(),\n    })\n    return request.render(\"account.portal_my_invoices\", values)\n\n", "CodeBleu_score": 44.440164030276726}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_portal_layout_values()\n    invoices = request.env['account.move'].search(self._get_invoices_domain(), limit=100, order='invoice_date desc')\n    if invoices:\n        values.update({'date': {}})\n            if date_begin or date_end:\n                date_begin = date_begin or invoices[0].invoice_date_due\n                date_end = date_end or invoices[-1].invoice_date_due\n                values['date']['begin'] = date_begin = fields.Date.to_string(date_begin)\n                values['date']['end'] = date_end = fields.Date.to_string(date_end)\n                domain += [('invoice_date_due', '>=', date_begin), ('invoice_date_due', '<=', date_end)]\n            if sortby is not None:\n                order = self._get_account_searchbar_sortings()[sortby]['order']\n                invoices = invoices.sorted(lambda r: r[order])\n            if filterby is not None:\n                domain = self._get_account_searchbar_filters()[filterby]['domain']\n                invoices = invoices.filtered(lambda r: r.move_type in domain[0][1])\n            # update session history\n            request.session.history.update({'invoice_ids': invoices.ids})\n            # pager\n            pager = portal_pager(url=\"/my/invoices\", url_args={'date_begin': date_begin, 'date_end': date_end, 'sortby': sortby, 'filterby': filterby}, total=len(invoices), page=page, step=self._items_per_page)\n            # content according to pager and archive dates, sorted by date\n            invoices = invoices.with_context(bin_size=False)\n\n    # pylint: disable=cell-var-from-loop\n    invoices = invoices.sorted", "CodeBleu_score": 34.31109830473859}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_portal_layout_values()\n    invoices = request.env['account.move'].search(self._get_invoices_domain(), limit=self._items_per_page, offset=(page - 1) * self._items_per_page, order=sortby)\n    values.update({\n        'date': date_begin,\n        'date_end': date_end,\n        'invoices': invoices,\n        'page_name': 'invoice',\n    })\n    return request.render(\"account.portal_my_invoices\", values)\n\n", "CodeBleu_score": 40.67068914699791}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    try:\n            invoice = request.env['account.move'].browse(invoice_id).exists()\n        except (TypeError, ValueError):\n            raise MissingError()\n        try:\n            invoice.check_access_rights('read')\n            invoice.check_access_rule('read')\n        except AccessError:\n            raise AccessError(_(\"Access Denied.\"))\n\n        if report_type == 'html':\n            return self._invoice_get_page_view_values(invoice, access_token, **kw)\n\n        if report_type in ('pdf', 'text'):\n            # retrieve attachments\n            attachments = invoice.message_main_attachment_ids\n            if len(attachments) > 1:\n                zip_data, file_name = self._get_invoice_attachment_zip(attachments)\n                if report_type == 'pdf':\n                    headers = _get_zip_headers(file_name)\n                    return request.make_response(zip_data, headers=headers)\n            else:\n                if report_type == 'pdf':\n                    return request.env.ref('account.account_invoices').report_action(invoice, data={'invoice_id': invoice.id})\n                else:\n                    return self._invoice_get_pdf_content(invoice, report_type)\n\n        if download:\n            return request.redirect('/my/invoices/download/%s' % invoice_id)\n\n    @http.route(['/my/invoices/download/<int:invoice_id>'], type='http', auth=\\\"user\\\", website=True)\n    def portal_my_invoice_download(self, invoice_id, access_token=None, **kw):\n        try:\n            invoice = request.env['account.move'].browse(invoice_id).exists()\n        except (TypeError, ValueError):\n            raise MissingError()\n        try:\n            invoice.check_access_rights('read')\n            invoice.check_", "CodeBleu_score": 38.003327734556116}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    try:\n            invoice_sudo = self._document_check_access('account.move', invoice_id, access_token)\n        except (AccessError, MissingError):\n            return request.redirect('/my')\n\n        if report_type in ('html', 'qweb-html'):\n            return self._show_report(invoice_sudo, report_type, data=kw)\n\n        if report_type in ('pdf', 'qweb-pdf'):\n            if invoice_sudo.state != 'posted':\n                raise AccessError(_('You can only generate a PDF for posted invoices.'))\n\n            if download:\n                # Generate the report\n                report = request.env.ref('account.account_invoices')\n                pdf = report._render_qweb_pdf(invoice_sudo.ids, data=kw)\n\n                # Create a zip file with the attachments\n                attachments = invoice_sudo.message_main_attachment_ids\n                if len(attachments) > 1:\n                    zip_file = _get_zip_headers(attachments)\n                    for attachment in attachments:\n                        zip_file.writestr(attachment.name, attachment.datas)\n                else:\n                    zip_file = attachments[0].datas\n\n                # Return the report\n                return request.make_response(zip_file, headers=[('Content-Type', 'application/octet-stream'), ('Content-Disposition', 'attachment; filename=%s.pdf;' % invoice_sudo.name)])\n            else:\n                return request.env.ref('account.account_invoices').report_action(invoice_sudo, data=kw)\n\n        if report_type in ('text', 'qweb-text'):\n            return self._show_report(invoice_sudo, report_type, data=kw)\n\n        return request.render(\\\"account.portal_invoice_page\\\", {})\n\n    @http.route(['/my/invoices/<int:invoice_id>/download'], type=", "CodeBleu_score": 47.53123457201231}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    try:\n            invoice = self._document_check_access('account.move', invoice_id, access_token)\n        except (AccessError, MissingError):\n            return request.redirect('/my')\n\n        if report_type in ('html', 'pdf', 'text'):\n            return self._show_report(model='account.move', report_type=report_type, report_ref=invoice.get_portal_url(), download=download)\n\n        if report_type == 'invoice':\n            if invoice.state != 'posted':\n                raise MissingError(_('The invoice you are trying to access is not posted yet. Please check back later.'))\n            return self._show_report(model='account.move', report_type='html', report_ref=invoice.get_portal_url(), download=download)\n\n        if report_type == 'invoice_print':\n            if invoice.state != 'posted':\n                raise MissingError(_('The invoice you are trying to access is not posted yet. Please check back later.'))\n            return self._show_report(model='account.move', report_type='pdf', report_ref=invoice.get_portal_url(), download=download)\n\n        if report_type == 'invoice_print_preview':\n            if invoice.state != 'posted':\n                raise MissingError(_('The invoice you are trying to access is not posted yet. Please check back later.'))\n            return self._show_report(model='account.move', report_type='html', report_ref=invoice.get_portal_url(), download=download)\n\n        if report_type == 'invoice_pdf_download':\n            if invoice.state != 'posted':\n                raise MissingError(_('The invoice you are trying to access is not posted yet. Please check back later.'))\n            return self._show_report(model='account.move', report_type='pdf', report_ref=invoice.get_portal_url(), download=download)", "CodeBleu_score": 39.84196725901863}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    # Get the company's domain\n    company_domain = self.env['res.company']._get_default_domain(company)\n        # Search for product templates based on the company's domain\n        products = self.env['product.template'].search(company_domain)\n        # Update the sale taxes for the products if the company's account_sale_tax_id is set\n        if company and company.account_sale_tax_id:\n            products.write({'taxes_id': [(4, company.account_sale_tax_id.id)]})\n        # Update the purchase taxes for the products if the company's account_purchase_tax_id is set\n        if company and company.account_purchase_tax_id:\n            products.write({'supplier_taxes_id': [(4, company.account_purchase_tax_id.id)]})\n\n    def _get_demo_data_move(self, company=False):\n        \\\"\\\"\\\"Generate the demo data related to accounting moves.\\\"\\\"\\\"\n        # This is a generator because data created here might be referenced by xml_id to data\n        # created later but defined in this same function.\n        # Get the company's domain\n        company_domain = self.env['res.company']._get_default_domain(company)\n        # Search for the demo invoice 1\n        invoice_1 = self.ref('demo_invoice_1')\n        # Search for the demo invoice 2\n        invoice_2 = self.ref('demo_invoice_2')\n        # Search for the demo invoice 3\n        invoice_3 = self.ref('demo_invoice_3')\n        # Search for the demo invoice 5\n        invoice_5 = self.ref('demo_invoice_5')\n        # Search for the demo invoice followup\n        invoice_followup = self.ref('demo_invoice_followup')\n        # Search for the demo invoice equipment purchase\n        invoice_equipment_purchase = self.ref('demo_inv", "CodeBleu_score": 32.09722913546243}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    # This is a generator because data created here might be referenced by xml_id to data created later but defined in this same function.\n    # This is a generator because data created here might be referenced by xml_id to data created later but defined in this same function.\n    # This is a generator because data created here might be referenced by xml_id to data created later but defined in this same function.\n    # This is a generator because data created here might be referenced by xml_id to data created later but defined in this same function.\n    # This is a generator because data created here might be referenced by xml_id to data created later but defined in this same function.\n    # This is a generator because data created here might be referenced by xml_id to data created later but defined in this same function.\n    # This is a generator because data created here might be referenced by xml_id to data created later but defined in this same function.\n    # This is a generator because data created here might be referenced by xml_id to data created later but defined in this same function.\n    # This is a generator because data created here might be referenced by xml_id to data created later but defined in this same function.\n    # This is a generator because data created here might be referenced by xml_id to data created later but defined in this same function.\n    # This is a generator because data created here might be referenced by xml_id to data created later but defined in this same function.\n    # This is a generator because data created here might be referenced by xml_id to data created later but defined in this same function.\n    # This is a generator because data created here might be referenced by xml_id to data created later but defined in this same function.\n    # This is a generator because data created here might be referenced by xml_id to data created later but defined in this same function.\n    # This is a generator because data created here might be referenced by xml_id to data created later but defined in this same function.\n    # This is a generator because data created here might be referenced by xml_id to data created later but defined in this same function.\n    # This is a generator because data created here might be referenced by xml_id to data created later but defined in this same function.\n    # This is a generator because data created here might be referenced by xml_id to", "CodeBleu_score": 1.105006105006105}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    # This is a generator because data created here might be referenced by xml_id to data\n        # created later but defined in this same function.\n        # Search for product templates based on the company's domain\n        products = self.env['product.template'].search(self._get_demo_data_domain(company))\n        # Update sale taxes for these products if the company's account_sale_tax_id is set\n        if company and company.account_sale_tax_id:\n            products.write({'taxes_id': [Command.set([company.account_sale_tax_id.id])]})\n        # Update purchase taxes if the company's account_purchase_tax_id is set\n        if company and company.account_purchase_tax_id:\n            products.write({'supplier_taxes_id': [Command.set([company.account_purchase_tax_id.id])]})\n        return products\n\n    @api.model\n    def _get_demo_data_domain(self, company=False):\n        \\\"\\\"\\\"Get the domain for product templates.\\\"\\\"\\\"\n        domain = [('type', '=', 'product')\n                  ,('company_id', '=', company.id if company else False)\n                  ,('invoice_policy', '=', 'order')\n                  ,('expense_policy', '=', 'no')\n                  ,('list_price', '>', 0)\n                  ,('standard_price', '>', 0)\n                 ]\n        return domain\n\n    @api.model\n    def _get_demo_data_move(self, company=False):\n        \\\"\\\"\\\"Generate the demo data related to accounting.\\\"\\\"\\\"\n        # This is a generator because data created here might be referenced by xml_id to data\n        # created later but defined in this same function.\n        # Search for product templates based on the company's domain\n        products = self.env['product.template'].search(self._get_demo_data_domain(company))\n        # Update sale taxes for these products if the company's account_", "CodeBleu_score": 33.658190886002735}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    if company.id and xml_id:\n        account_id = self.env.ref(f'{xml_id}.{company.id}', raise_if_not_found=False)\n        if account_id:\n            return account_id\n    if account_type:\n        domain = [('company_id', '=', company.id), ('user_type_id.type', '=', account_type)]\n        account_id = self.search(domain, limit=1)\n        if account_id:\n            return account_id\n    domain = [('company_id', '=', company.id)]\n    return self.search(domain, limit=1)\n\n", "CodeBleu_score": 38.14250507326901}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env.ref(f'{xml_id}.{account_type}', False)\n    if not account:\n        account = self.env['account.account'].search([\n            ('company_id', '=', company.id),\n            ('user_type_id.type', '=', account_type),\n        ], limit=1)\n    if not account:\n        account = self.env['account.account'].search([\n            ('company_id', '=', company.id),\n        ], limit=1)\n    return account\n\n", "CodeBleu_score": 46.79749407771841}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env.ref(f'{xml_id}.{company.id}', raise_if_not_found=False)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.type', '=', account_type)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    return account\n\n", "CodeBleu_score": 38.59345733701653}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    accounts = self.env['account.account'].search([('account_type', '=', 'current_year_earning')]).read(['company_id'])\n    accounts_by_company = defaultdict(list)\n    for account in accounts:\n        accounts_by_company[account['company_id']].append(account)\n    for company_id, accounts in accounts_by_company.items():\n        if len(accounts) > 1:\n            raise ValidationError(_('There can be only one account with the \"Current Year Earnings\" type for each company.'))\n\n", "CodeBleu_score": 25.20576417977663}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    accounts = self.env['account.account'].search([('account_type', '=', 'current_year_earning')])\n        companies = accounts.mapped('company_id')\n        for company in companies:\n            if len(accounts.filtered(lambda a: a.company_id == company)) > 1:\n                raise ValidationError(_('There can only be one account with the \"Current Year Earnings\" type for each company. (company: %s)', company.name))\n\n    @api.constrains('account_type')\n    def _check_account_type_unique_current_year_earning(self):\n        self._check_account_type_unique_current_year_earning()\n\n    @api.constrains('code')\n    def _check_code_unique(self):\n        for account in self:\n            domain = [('id', 'not in', account.ids), ('code', '=', account.code)]\n            if self.env['account.account'].search_count(domain):\n                raise ValidationError(_('The code must be unique. (account code: %s)', account.code))\n\n    @api.constrains('code')\n    def _check_code_format(self):\n        for account in self:\n            if not ACCOUNT_CODE_REGEX.match(account.code):\n                raise ValidationError(_('The code must be alphanumeric. (account code: %s)', account.code))\n\n    @api.constrains('code')\n    def _check_code_format_parent(self):\n        for account in self:\n            if account.parent_id and not ACCOUNT_CODE_REGEX.match(account.parent_id.code):\n                raise ValidationError(_('The parent account code must be alphanumeric. (account code: %s)', account.code))\n\n    @api.constrains('code')\n    def _check_code_format_child(self):\n        for account in self:\n            if account.child_ids and not ACCOUNT_CODE_REGEX.", "CodeBleu_score": 25.561569806665453}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    accounts = self.env['account.account'].search([('account_type', '=', 'current_year_earning')])\n    accounts_by_company = defaultdict(list)\n    for account in accounts:\n        accounts_by_company[account.company_id].append(account)\n    for company, accounts in accounts_by_company.items():\n        if len(accounts) > 1:\n            raise ValidationError(_('Only one account with the \"Current Year Earnings\" type is allowed per company.'))\n", "CodeBleu_score": 25.707269179198494}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self._context.get('partner_id'):\n        domain = [('id', 'in', self._order_accounts_by_frequency_for_partner(self._context.get('company_id'), self._context.get('partner_id'), self._context.get('move_type')))]\n    return super()._name_search(name, domain, operator, limit, order)\n\n", "CodeBleu_score": 29.20288418353097}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self._context.get('order_accounts_by_frequency_for_partner'):\n        partner_id = self._context.get('order_accounts_by_frequency_for_partner_id')\n        move_type = self._context.get('order_accounts_by_frequency_for_partner_move_type')\n        account_ids = self._order_accounts_by_frequency_for_partner(self._context.get('company_id'), partner_id, move_type)\n        return [(record.id, record.name) for record in self.browse(account_ids)]\n    else:\n        return super()._name_search(name, domain=domain, operator=operator, limit=limit, order=order)\n\n    @api.model\n    def _load_precommit_update_opening_move(self, cr):\n        data = cr.precommit.data.pop('import_account_opening_balance')\n        opening_move = self.env['account.move'].browse(cr.context.get('opening_move_id'))\n        for account_id, amounts in data.items():\n            if amounts[0] or amounts[1]:\n                move_line_vals = opening_move._get_move_line_values_for_update_opening_move(account_id, amounts[0], amounts[1])\n                opening_move.write({'line_ids': [(0, 0, move_line_vals)]})\n\n    def _get_move_line_values_for_update_opening_move(self, account_id, debit, credit):\n        return {\n            'account_id': account_id,\n            'debit': debit,\n            'credit': credit,\n            'date': fields.Date.context_today(self),\n            'date_maturity': fields.Date.context_today(self),\n            'partner_id': self.partner_id.id,\n            'analytic_account_id': self.analytic_account_id.id,\n            'analytic_", "CodeBleu_score": 35.2640587139525}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self._context.get(\\\"default_partner_id\\\"):\n        partner_id = self._context.get(\\\"default_partner_id\\\")\n        return self._order_accounts_by_frequency_for_partner(self.env.company.id, partner_id, self._context.get(\\\"default_move_type\\\"))\n    return super()._name_search(name, domain=domain, operator=operator, limit=limit, order=order)\n\n    @api.model\n    def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None):\n        if not name and self._context.get('default_partner_id'):\n            partner_id = self._context.get('default_partner_id')\n            return self._order_accounts_by_frequency_for_partner(self.env.company.id, partner_id, self._context.get('default_move_type'))\n        return super()._name_search(name, domain=domain, operator=operator, limit=limit, order=order)\n\n    @api.model\n    def _order_accounts_by_frequency_for_partner(self, company_id, partner_id, move_type=None):\n        return self._get_most_frequent_accounts_for_partner(company_id, partner_id, move_type)\n\n    @api.model\n    def _get_most_frequent_accounts_for_partner(self, company_id, partner_id, move_type=None, filter_never_user_accounts=False, limit=None):\n        \\\"\\\"\\\"\n        Returns the accounts ordered from most frequent to least frequent for a given partner\n        and filtered according to the move type\n        :param company_id: the company id\n        :param partner_id: the partner id for which we want to retrieve the most frequent accounts\n        :param move_type: the type of the move to know which type of accounts to retrieve\n        :param filter_never_user_accounts: True if we should", "CodeBleu_score": 35.3265562992038}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    if not new:\n        return\n    excluded = excluded + ('name',)\n    if not self.env.context.get(\\\"force_lang\\\") and self.env.context.get(\\\"lang\\\") and new.env.context.get(\\\"lang\\\"):\n        # If the new record's name follows a specific pattern, update the translations for the name field in the cache\n        # to reflect the new name format.\n        new_name = new.with_context(lang=self.env.context.get(\\\"lang\\\")).name\n        if new_name and not new_name.startswith(\\\"%\\\"):\n            new_name = new_name.replace(\\\"%s\\\", \\\"%s\\\")\n            new_name = new_name.replace(\\\"%(name)s\\\", \\\"%s\\\")\n            new_name = new_name.replace(\\\"%(code)s\\\", \\\"%s\\\")\n            new_name = new_name.replace(\\\"%(display_name)s\\\", \\\"%s\\\")\n            new_name = new_name.replace(\\\"%(display_name)s\\\", \\\"%s\\\")\n            new_name = new_name.replace(\\\"%(display_name)s\\\", \\\"%s\\\")\n            new_name = new_name.replace(\\\"%(display_name)s\\\", \\\"%s\\\")\n            new_name = new_name.replace(\\\"%(display_name)s\\\", \\\"%s\\\")\n            new_name = new_name.replace(\\\"%(display_name)s\\\", \\\"%s\\\")\n            new_name = new_name.replace(\\\"%(display_name)s\\\", \\\"%s\\\")\n            new_name = new_name.replace(\\\"%(display_name)s\\\", \\\"%s\\\")\n            new_name = new_name.replace(\\\"%(display_name)s\\\", \\\"%s\\\")\n            new_name = new_name.replace(\\\"%(display_name)s\\\", \\\"%s\\\")\n            new_name = new_name.replace(\\\"%(display_name", "CodeBleu_score": 28.96189099898536}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    self.ensure_one()\n    if new.name and not self.name:\n        return\n    if not new.name and not self.name:\n        return\n    if not new.name and self.name:\n        new_name = new.name.split(' ')[0]\n        new.name = new_name\n        new.with_context(lang='en_US').name = new_name\n    if new.name and self.name:\n        new_name = new.name.split(' ')[0]\n        new.name = new_name\n        new.with_context(lang='en_US').name = new_name\n    if not self.env.context.get('no_translations'):\n        for field in self.fields_get(allfields=True).keys() - excluded:\n            if field == 'name':\n                continue\n            for lang in self.env['res.lang'].search([]):\n                translation = self.with_context(lang=lang.code).with_preferences(lang=lang.code)._fields_get(allfields=True)[field].string\n            if translation:\n                new.with_context(lang=lang.code).with_preferences(lang=lang.code)[field] = translation\n        if new.name and self.name and new.name != self.name:\n            new.with_context(lang='en_US').name = new.name\n\n", "CodeBleu_score": 28.01472723651427}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    # Get the translations for the current record\n    translations = self.with_context(active_test=False).env['ir.translation'].search([('res_id', '=', self.id), ('src', '=', 'name'), ('name', '=', 'name')])\n\n    # Copy the translations to the new record\n    for translation in translations:\n        if translation.name not in excluded:\n            translation.copy({'res_id': new.id, 'src': 'name', 'name': translation.name})\n\n    # Update the translations for the name field in the cache to reflect the new name format\n    if new.name.startswith('%s ' % self.code):\n        new_name = new.name.replace('%s ' % self.code, '%s ' % new.code)\n        self.env['ir.translation'].with_context(active_test=False).search([('res_id', '=', self.id), ('src', '=', 'name'), ('name', '=', 'name')]).write({'value': new_name})\n\n", "CodeBleu_score": 28.604952080611838}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    sale_types = self.env['account.move'].get_sale_types(include_receipts=True)\n    query = self.env['account.move.line']._search(\n        [\n            ('parent_state', '=', 'posted'),\n            ('move_id.move_type', 'in', sale_types),\n        ]\n    )\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(account_id) for account_id in self.ids],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n    query_string, query_param = query.select(\n        r\"\"\"DISTINCT move_id, (regexp_matches(jsonb_object_keys(account_move_line.analytic_distribution), '\\d+', 'g'))[1]::int as account_id\"\"\"\n    )\n    query_string = f\"\"\"\n        SELECT account_id, count(move_id) FROM\n        ({query_string}) distribution\n        GROUP BY account_id\n    \"\"\"\n\n    self._cr.execute(query_string, query_param)\n    data = {res['account_id']: res['count'] for res in self._cr.dictfetchall()}\n    for account in self:\n        account.invoice_count = data.get(account.id, 0)\n\n    action = self.env[\"ir.actions.act_window\"]._for_xml_id(\"account.action_move_in_invoice_type\")\n    action['domain'] = [('id', 'in', query.ids)]\n    action['context'] = {\n        'search_default_invoice': 1,\n        'search_default_draft': 1,\n        'search_default_posted': 1,\n        'search_default_unreconciled': 1,\n        'search_default_not_in_payment': 1,\n        'search_default_not_in_payment_or_done': 1,\n        'search_default_not_in_payment_or_done_or_", "CodeBleu_score": 38.2192169992823}, {"code": "def action_view_invoice(self)\n\t\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['context'] = {'default_move_type': 'out_invoice', 'search_default_sale_types': 1}\n    action['domain'] = [('id', 'in', self.env.context.get('active_ids'))]\n    action['context'] = {'search_default_sale_types': 1}\n    action['context'] = {'search_default_sale_types': 1, 'default_move_type': 'out_invoice'}\n    action['context'] = {'search_default_sale_types': 1, 'default_move_type': 'out_invoice', 'default_analytic_account_id': self.id}\n    action['context'] = {'search_default_sale_types': 1, 'default_move_type': 'out_invoice', 'default_analytic_account_id': self.id}\n    action['context'] = {'search_default_sale_types': 1, 'default_move_type': 'out_invoice', 'default_analytic_account_id': self.id}\n    action['context'] = {'search_default_sale_types': 1, 'default_move_type': 'out_invoice', 'default_analytic_account_id': self.id}\n    action['context'] = {'search_default_sale_types': 1, 'default_move_type': 'out_invoice', 'default_analytic_account_id': self.id}\n    action['context'] = {'search_default_sale_types': 1, 'default_move_type': 'out_invoice', 'default_analytic_account_id': self.id}\n    action['context'] = {'search_default_sale_types': 1, 'default_move_type': 'out_invoice', 'default_analytic_account_id': self.id}\n    action['context'] = {'search_default_sale_types': 1, 'default_move_type': 'out_invoice', 'default_analytic_account_id", "CodeBleu_score": 26.6249762847645}, {"code": "def action_view_invoice(self)\n\t\n    sale_types = self.env['account.move'].get_sale_types(include_receipts=True)\n    query = self.env['account.move.line']._search([\n        ('parent_state', '=', 'posted'),\n        ('move_id.move_type', 'in', sale_types),\n    ])\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(account_id) for account_id in self.ids],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n\n    query_string, query_param = query.select(\n        r\"\"\"DISTINCT move_id, (regexp_matches(jsonb_object_keys(account_move_line.analytic_distribution), '\\d+', 'g'))[1]::int as account_id\"\"\"\n    )\n    query_string = f\"\"\"\n        SELECT account_id, count(move_id) FROM\n        ({query_string}) distribution\n        GROUP BY account_id\n    \"\"\"\n\n    self._cr.execute(query_string, query_param)\n    data = {res['account_id']: res['count'] for res in self._cr.dictfetchall()}\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['domain'] = [('id', 'in', [res['move_id'][0] for res in self._cr.dictfetchall()])]\n    action['context'] = {'search_default_analytic_account_id': self.ids[0]}\n    action['name'] = _('Customer Invoices')\n    action['res_id'] = False\n    action['views'] = [(False, 'tree'), (False, 'form')]\n    return action\n\n", "CodeBleu_score": 43.448939458501044}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    query = self.env['account.move.line']._search([('move_id.move_type', 'in', self.env['account.move'].get_purchase_types())])\n    query.add_where(SQL(\"%s && %s\", [str(self.id)], self.env['account.move.line']._query_analytic_accounts()))\n    query_string, query_param = query.select('DISTINCT account_move_line.move_id')\n    self._cr.execute(query_string, query_param)\n    move_ids = [line.get('move_id') for line in self._cr.dictfetchall()]\n    result = {\n        \"type\": \"ir.actions.act_window\",\n        \"res_model\": \"account.move\",\n        \"domain\": [('id', 'in', move_ids)],\n        \"context\": {\"create\": False, 'default_move_type': 'in_invoice'},\n        \"name\": _(\"Vendor Bills\"),\n        'view_mode': 'tree,form',\n    }\n    return result\n\n", "CodeBleu_score": 74.91951135899792}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    query = self.env['account.move.line']._search([('move_id.move_type', 'in', self.env['account.move'].get_purchase_types())])\n    query.add_where(SQL(\"%s && %s\", [str(self.id)], self.env['account.move.line']._query_analytic_accounts()))\n    query_string, query_param = query.select('DISTINCT account_move_line.move_id')\n    self._cr.execute(query_string, query_param)\n    move_ids = [line.get('move_id') for line in self._cr.dictfetchall()]\n    result = {\n        \"type\": \"ir.actions.act_window\",\n        \"res_model\": \"account.move\",\n        \"domain\": [('id', 'in', move_ids)],\n        \"context\": {\"create\": False, 'default_move_type': 'in_invoice'},\n        \"name\": _(\"Vendor Bills\"),\n        'view_mode': 'tree,form',\n    }\n    return result\n", "CodeBleu_score": 74.91951135899792}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    query = self.env['account.move.line']._search([('move_id.move_type', 'in', self.env['account.move'].get_purchase_types())])\n    query.add_where(SQL(\"%s && %s\", [str(self.id)], self.env['account.move.line']._query_analytic_accounts()))\n    query_string, query_param = query.select('DISTINCT account_move_line.move_id')\n    self._cr.execute(query_string, query_param)\n    move_ids = [line.get('move_id') for line in self._cr.dictfetchall()]\n    result = {\n        \"type\": \"ir.actions.act_window\",\n        \"res_model\": \"account.move\",\n        \"domain\": [('id', 'in', move_ids)],\n        \"context\": {\"create\": False, 'default_move_type': 'in_invoice'},\n        \"name\": _(\"Vendor Bills\"),\n        'view_mode': 'tree,form',\n    }\n    return result\n\n", "CodeBleu_score": 74.91951135899792}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t\n    container = {'records': self}\n        if not values.get(\\\"attachment_ids\\\") and len(self) > 1:\n            values.pop(\\\"attachment_ids\\\")\n        with self._check_attachments(container, [values]):\n            return super().write(values)\n\n    def unlink(self):\n        \\\"\\\"\\\" The function unlink removes records from the database. It first checks if the current user has the permission to delete the records and if the records are not in a draft state. If the records are not in a draft state, it raises a UserError. If the records are in a draft state, it calls the parent class's unlink method and returns the result. \\\"\\\"\\\"\n        if self.env.user.has_group(\\\"account.group_account_manager\\\") or self.env.user.has_group(\\\"account.group_account_user\\\"):\n            raise UserError(_(\\\"You can only delete a statement if you are an accountant.\\\"))\n        if self.filtered(lambda stmt: stmt.state != 'draft'):\n            raise UserError(_(\\\"You can only delete a statement if it is in a draft state.\\\"))\n        return super().unlink()\n\n    def action_confirm(self):\n        \\\"\\\"\\\" The function action_confirm confirms the selected statements. It checks if the current user has the permission to confirm the statements and if the statements are in a draft state. If the statements are not in a draft state, it raises a UserError. If the statements are in a draft state, it sets the state of the statements to 'confirm' and calls the parent class's action_confirm method. \\\"\\\"\\\"\n        if self.env.user.has_group(\\\"account.group_account_manager\\\") or self.env.user.has_group(\\\"account.group_account_user\\\"):\n            raise UserError(_(\\\"You can only confirm a statement if you are an accountant.\\\"))\n        if self.filtered(lambda stmt: stmt.state != 'draft'):\n            raise UserError(_(\\\"You can only confirm a statement if it is in a draft", "CodeBleu_score": 44.04459488121623}, {"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values and len(self) > 1:\n            values.pop('attachment_ids')\n        container = {'records': self}\n        with self._check_attachments(container, [values]):\n            return super().write(values)\n\n    def _get_last_statement_line(self):\n        \\\"\\\"\\\" Returns the last statement line of the statement.\\\"\\\"\\\"\n        self.ensure_one()\n        return self.line_ids.sorted(key=lambda line: line.date, reverse=True)[0]\n\n    def _get_first_statement_line(self):\n        \\\"\\\"\\\" Returns the first statement line of the statement.\\\"\\\"\\\"\n        self.ensure_one()\n        return self.line_ids.sorted(key=lambda line: line.date)[0]\n\n    def _get_last_statement_line_date(self):\n        \\\"\\\"\\\" Returns the date of the last statement line of the statement.\\\"\\\"\\\"\n        self.ensure_one()\n        return self._get_last_statement_line().date\n\n    def _get_first_statement_line_date(self):\n        \\\"\\\"\\\" Returns the date of the first statement line of the statement.\\\"\\\"\\\"\n        self.ensure_one()\n        return self._get_first_statement_line().date\n\n    def _get_last_statement_line_amount(self):\n        \\\"\\\"\\\" Returns the amount of the last statement line of the statement.\\\"\\\"\\\"\n        self.ensure_one()\n        return self._get_last_statement_line().amount\n\n    def _get_first_statement_line_amount(self):\n        \\\"\\\"\\\" Returns the amount of the first statement line of the statement.\\\"\\\"\\\"\n        self.ensure_one()\n        return self._get_first_statement_line().amount\n\n    def _get_last_statement_line_name(self):\n        \\\"\\\"\\\" Returns the name of the last statement line of the statement.\\\"\\\"\\\"\n        self.ensure_one()\n", "CodeBleu_score": 54.72210795808137}, {"code": "def write(self, values)\n\t\n    # EXTENDS base\n    if 'attachment_ids' in values:\n        values.pop('attachment_ids')\n    container = {'records': self}\n        with self._check_attachments(container, [values]):\n            return super().write(values)\n\n    def write(self, values):\n        # EXTENDS base\n        container = {'records': self}\n        with self._check_attachments(container, [values]):\n            return super().write(values)\n\n    def unlink(self):\n        # EXTENDS base\n        attachments = self.mapped('attachment_ids')\n        res = super().unlink()\n        attachments.unlink()\n        return res\n\n    def action_open_in_accounting(self):\n        # EXTENDS base\n        action = super().action_open_in_accounting()\n        action.update({\n            'views': [(False, 'form')],\n            'view_mode': 'form',\n            'res_id': self.id,\n        })\n        return action\n\n    def action_open_in_accounting_menu(self):\n        # EXTENDS base\n        action = super().action_open_in_accounting_menu()\n        action.update({\n            'views': [(False, 'form')],\n            'view_mode': 'form',\n            'res_id': self.id,\n        })\n        return action\n\n    def action_open_in_accounting_income(self):\n        # EXTENDS base\n        action = super().action_open_in_accounting_income()\n        action.update({\n            'views': [(False, 'form')],\n            'view_mode': 'form',\n            'res_id': self.id,\n        })\n        return action\n\n    def action_open_in_accounting_expense(self):\n        # EXTENDS base\n        action = super().action_", "CodeBleu_score": 53.46517278829537}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    # The function _find_or_create_bank_account ensures a single record context, checks a configuration parameter to determine if bank account creation should be skipped, and returns an empty bank account record if true. If not, it searches for an existing bank account with the same account number and partner ID, creating a new one if none is found. The function returns the bank account filtered by the company ID.\n    if self.env.context.get(\\\"skip_bank_account_create\\\") or self.env.context.get(\\\"no_create_bank_account\\\"):\n        return self.env[\\\"res.partner.bank\\\"].browse()\n    return self.env[\\\"res.partner.bank\\\"].with_company(self.company_id)._find_or_create_bank_account(self.account_number, self.partner_id.id)\n\n", "CodeBleu_score": 15.534720214953948}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if self.env.context.get(\\\"skip_bank_account_creation\\\"):\n        return self.env['res.partner.bank'].new()\n    return self.env['res.partner.bank'].search([('acc_number', '=', self.acc_number), ('partner_id', '=', self.partner_id.id), ('company_id', '=', self.company_id.id)], limit=1) or self.env['res.partner.bank'].create({\n        'acc_number': self.acc_number,\n        'partner_id': self.partner_id.id,\n        'company_id': self.company_id.id,\n    })\n\n\n    def _prepare_bank_account_vals(self):\n        \\\"\\\"\\\" Prepare the values for the bank account creation.\\\"\\\"\\\"\n        return {\n            \\\"acc_number\\\": self.acc_number,\n            \\\"partner_id\\\": self.partner_id.id,\n            \\\"company_id\\\": self.company_id.id,\n        }\n\n\n    def _find_or_create_bank_account(self):\n        \\\"\\\"\\\" The function _find_or_create_bank_account ensures a single record context, checks a configuration parameter to determine if bank account creation should be skipped, and returns an empty bank account record if true. If not, it searches for an existing bank account with the same account number and partner ID, creating a new one if none is found. The function returns the bank account filtered by the company ID.\\\"\\\"\\\"\n        if self.env.context.get(\\\"skip_bank_account_creation\\\"):\n            return self.env[\\\"res.partner.bank\\\"]\n\n        return self.env[\\\"res.partner.bank\\\"].search([(\\\"acc_number\\\", \\\"=\\\", self.acc_number), (\\\"partner_id\\\", \\\"=\\\", self.partner_id.id), (\\\"company_id\\\", \\\"=\\\", self.company_id.id)], limit=1) or self.env[\\\"res.partner.bank\\\"].", "CodeBleu_score": 28.369334900535208}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if self.env.context.get(\\\"skip_bank_account_creation\\\"):\n        return self.env[\\\"res.partner.bank\\\"].browse()\n    bank_account = self.env[\\\"res.partner.bank\\\"].search([(\\\"company_id\\\", \\\"=\\\", self.company_id.id), (\\\"acc_number\\\", \\\"=\\\", self.account_number), (\\\"partner_id\\\", \\\"=\\\", self.partner_id.id)], limit=1)\n        if not bank_account:\n            bank_account = self.env[\\\"res.partner.bank\\\"].create({\n                \\\"acc_number\\\": self.account_number,\n                \\\"partner_id\\\": self.partner_id.id,\n                \\\"company_id\\\": self.company_id.id,\n            })\n        return bank_account\n", "CodeBleu_score": 44.905719960531634}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    # Ensure a single record context to avoid unexpected behavior\n        # when calling the function from a loop.\n        with self.env.context.protected():\n            transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n            if transaction_currency == currency:\n                # If the transaction currency is the same as the currency of the statement line,\n                # we can simply return the transaction amount and balance.\n                return {\n                    'transaction_amount': transaction_amount,\n                    'transaction_currency': transaction_currency,\n                    'journal_amount': journal_amount,\n                    'journal_currency': journal_currency,\n                    'company_amount': company_amount,\n                    'company_currency': company_currency,\n                }\n            elif currency == company_currency:\n                # If the currency is the same as the company currency,\n                # we can simply return the company amount and balance.\n                return {\n                    'transaction_amount': company_amount,\n                    'transaction_currency': company_currency,\n                    'journal_amount': company_amount,\n                    'journal_currency': company_currency,\n                    'company_amount': company_amount,\n                    'company_currency': company_currency,\n                }\n            elif currency == transaction_currency:\n                # If the currency is the same as the transaction currency,\n                # we can simply return the transaction amount and balance.\n                return {\n                    'transaction_amount': transaction_amount,\n                    'transaction_currency': transaction_currency,\n                    'journal_amount': transaction_amount,\n                    'journal_currency': transaction_currency,\n                    'company_amount': transaction_amount,\n                    'company_currency': transaction_currency,\n                }\n            elif currency == journal_currency:\n                # If the currency is the same as the journal currency,\n                # we can simply return the journal amount and balance.\n                return {\n                    'transaction_amount': journal_amount,\n                    'transaction_currency': journal_currency,\n                    'journal_amount': journal_amount,\n                    'journal_currency': journal_currency,\n                    'company_amount': journal_", "CodeBleu_score": 24.63141736779638}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    # Ensure a single record context to avoid inconsistencies in the exchange rate computation.\n        # See https://github.com/odoo/odoo/issues/16940\n        self.ensure_one()\n        transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n        if currency == transaction_currency:\n            return {\n                'transaction_amount': transaction_amount,\n                'transaction_currency': transaction_currency,\n                'journal_amount': journal_amount,\n                'journal_currency': journal_currency,\n                'company_amount': company_amount,\n                'company_currency': company_currency,\n            }\n        if currency == journal_currency:\n            return {\n                'transaction_amount': transaction_amount * -1,\n                'transaction_currency': transaction_currency,\n                'journal_amount': journal_amount,\n                'journal_currency': journal_currency,\n                'company_amount': company_amount,\n                'company_currency': company_currency,\n            }\n        if currency == company_currency:\n            return {\n                'transaction_amount': transaction_amount * -1,\n                'transaction_currency': transaction_currency,\n                'journal_amount': journal_amount * -1,\n                'journal_currency': journal_currency,\n                'company_amount': company_amount,\n                'company_currency': company_currency,\n            }\n        if transaction_currency == company_currency:\n            return {\n                'transaction_amount': transaction_amount * -1 * currency.with_context(date=self.date)._convert(1, transaction_currency, round=False),  # noqa\n                'transaction_currency': transaction_currency,\n                'journal_amount': journal_amount * -1 * currency.with_context(date=self.date)._convert(1, journal_currency, round=False),  # noqa\n                'journal_currency': journal_currency,\n                'company_amount': company_amount * -1 * currency.with_context(date=self.date).", "CodeBleu_score": 24.78478698732639}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    # Ensure a single record context to avoid unexpected behavior when calling the function from a multi-record context.\n        with self.env.context.protected():\n            # Retrieve accounting amounts and currencies.\n            transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n\n            # Compute transaction amount and balance using the rate of the statement line.\n            if currency != transaction_currency:\n                rate = self.currency_id._get_conversion_rate(transaction_currency, currency, self.date)\n                transaction_amount = transaction_amount * rate\n                balance = balance * rate\n\n            # Adjust transaction amount for a foreign currency.\n            if self.foreign_currency_id:\n                transaction_amount = transaction_amount * self.currency_id._get_conversion_rate(self.foreign_currency_id, currency, self.date)\n\n            # Adjust transaction amount for a foreign currency and a company currency.\n            if self.foreign_currency_id and self.company_currency_id != self.foreign_currency_id:\n                transaction_amount = transaction_amount * self.company_currency_id._get_conversion_rate(self.foreign_currency_id, currency, self.date)\n\n            # Adjust transaction amount for a foreign currency and a company currency.\n            if self.foreign_currency_id and self.company_currency_id != self.foreign_currency_id:\n                transaction_amount = transaction_amount * self.company_currency_id._get_conversion_rate(self.foreign_currency_id, currency, self.date)\n\n            # Adjust balance for a foreign currency and a company currency.\n            if self.foreign_currency_id and self.company_currency_id != self.foreign_currency_id:\n                balance = balance * self.company_currency_id._get_conversion_rate(self.foreign_currency_id, currency, self.date)\n\n            return {\n                'transaction_amount': transaction_amount,\n                'transaction_", "CodeBleu_score": 31.574428310859382}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        pay_method_line_ids_commands = [Command.clear()]\n        if journal.type in ('bank', 'cash'):\n            default_methods = journal._default_outbound_payment_methods()\n            pay_method_line_ids_commands += [Command.create({\n                'name': pay_method.name,\n                'payment_method_id': pay_method.id,\n            }) for pay_method in default_methods]\n        journal.outbound_payment_method_line_ids = pay_method_line_ids_commands\n", "CodeBleu_score": 81.53084552180385}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        pay_method_line_ids_commands = [Command.clear()]\n        if journal.type in ('bank', 'cash'):\n            default_methods = journal._default_outbound_payment_methods()\n            pay_method_line_ids_commands += [Command.create({\n                'name': pay_method.name,\n                'payment_method_id': pay_method.id,\n            }) for pay_method in default_methods]\n        journal.outbound_payment_method_line_ids = pay_method_line_ids_commands\n\n", "CodeBleu_score": 81.53084552180385}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        pay_method_line_ids_commands = [Command.clear()]\n        if journal.type in ('bank', 'cash'):\n            default_methods = journal._default_outbound_payment_methods()\n            pay_method_line_ids_commands += [Command.create({\n                'name': pay_method.name,\n                'payment_method_id': pay_method.id,\n            }) for pay_method in default_methods]\n        journal.outbound_payment_method_line_ids = pay_method_line_ids_commands\n\n", "CodeBleu_score": 81.53084552180385}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t\n    for move in self:\n        if not move.invoice_date and not move.date:\n            move.date = fields.Date.today()\n        elif move.invoice_date and not move.date:\n            if move.is_sale_document(include_receipts=True):\n                move.date = move._get_invoice_date()\n            else:\n                move.date = move._get_accounting_date()\n        elif move.date != move._get_accounting_date():\n            move.date = move._get_accounting_date()\n            move._compute_related_fields()\n", "CodeBleu_score": 36.983187458750955}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if move.invoice_date:\n            if move.move_type in ('out_invoice', 'out_refund'):\n                if move.company_id.tax_calculation_rounding_method == 'round_globally':\n                    move.date = move.invoice_date\n                elif move.company_id.tax_calculation_rounding_method == 'round_per_line':\n                    move.date = move.invoice_date\n                else:\n                    move.date = move.invoice_date\n            elif move.move_type in ('in_invoice', 'in_refund'):\n                if move.company_id.tax_calculation_rounding_method == 'round_globally':\n                    move.date = move.invoice_date\n                elif move.company_id.tax_calculation_rounding_method == 'round_per_line':\n                    move.date = move.invoice_date\n                else:\n                    move.date = move.invoice_date\n            elif move.move_type == 'out_receipt':\n                move.date = move.invoice_date\n            elif move.move_type == 'in_receipt':\n                move.date = move.invoice_date\n            elif move.move_type == 'entry':\n                move.date = move.invoice_date\n            elif move.move_type == 'out_invoice' and move.invoice_date:\n                move.date = move.invoice_date\n            elif move.move_type == 'out_refund' and move.invoice_date:\n                move.date = move.invoice_date\n            elif move.move_type == 'in_invoice' and move.invoice_date:\n                move.date = move.invoice_date\n            elif move.move_type == 'in_refund' and move.invoice_date:\n                move.date = move.invoice_date\n            elif move.move_type == 'entry' and move.invoice_date:\n                move.date = move.invoice_date\n            else:\n                move.date = move.invoice_date\n", "CodeBleu_score": 19.21409393137936}, {"code": "def _compute_date(self)\n\t\n    today = fields.Date.context_today(self)\n        for move in self:\n            if move.move_type in ('out_invoice', 'out_refund'):\n                if move.invoice_date:\n                    move.date = move.invoice_date\n                elif move.date != today:\n                    move.date = today\n                    move._recompute_date_from_invoice_date()\n            elif move.move_type in ('in_invoice', 'in_refund'):\n                if move.invoice_date:\n                    move.date = move.invoice_date\n                elif move.date != today:\n                    move.date = today\n                    move._recompute_date_from_invoice_date()\n            elif move.move_type == 'out_receipt':\n                if move.invoice_date:\n                    move.date = move.invoice_date\n                elif move.date != today:\n                    move.date = today\n                    move._recompute_date_from_invoice_date()\n            elif move.move_type == 'in_receipt':\n                if move.invoice_date:\n                    move.date = move.invoice_date\n                elif move.date != today:\n                    move.date = today\n                    move._recompute_date_from_invoice_date()\n            elif move.move_type == 'entry':\n                if move.invoice_date:\n                    move.date = move.invoice_date\n                elif move.date != today:\n                    move.date = today\n                    move._recompute_date_from_invoice_date()\n            elif move.move_type == 'entry.return':\n                if move.invoice_date:\n                    move.date = move.invoice_date\n                elif move.date != today:\n                    move.date = today\n                    move._recompute_date_from_invoice_date()\n\n    @api.depends('date', 'company_id')\n    def _compute_invoice_date(self):\n       ", "CodeBleu_score": 24.024268885621257}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.move_type in ('out_invoice', 'out_refund') and move.partner_id.customer_payment_term_id:\n            move.invoice_payment_term_id = move.partner_id.customer_payment_term_id\n        elif move.move_type in ('in_invoice', 'in_refund') and move.partner_id.supplier_payment_term_id:\n            move.invoice_payment_term_id = move.partner_id.supplier_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 46.283733314418726}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.move_type == 'in_invoice':\n            move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n        elif move.move_type == 'out_invoice':\n            move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 45.07767497789803}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.move_type in ('out_invoice', 'out_refund'):\n            move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n        elif move.move_type in ('in_invoice', 'in_refund'):\n            move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 45.86322343125669}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        if tax.company_id.account_fiscal_country_id:\n            country_id = tax.company_id.account_fiscal_country_id.id\n        elif tax.country_id:\n            country_id = tax.country_id.id\n        else:\n            country_id = False\n        tax_group_id = self.env['account.tax.group'].search([('country_id', '=', country_id), ('company_id', '=', tax.company_id.id)], limit=1)\n        if not tax_group_id:\n            tax_group_id = self.env['account.tax.group'].search([('country_id', '=', False), ('company_id', '=', tax.company_id.id)], limit=1)\n        tax.tax_group_id = tax_group_id\n\n\n    def _compute_repartition_lines_str(self):\n        \"\"\"Computes a string representation of the repartition lines for each tax.\"\"\"\n        for tax in self:\n            repartition_lines_str = ''\n            for repartition_line in tax.repartition_line_ids:\n                repartition_lines_str += repartition_line.name + ', '\n            tax.repartition_lines_str = repartition_lines_str[:-2]\n\n\n    def _compute_is_used(self):\n        \"\"\"Computes the 'is_used' field for each tax based on whether it is used in any invoice or refund.\"\"\"\n        for tax in self:\n            tax.is_used = bool(self.env['account.move.line'].search_count([('tax_ids', '=', tax.id)]) or self.env['account.move.line'].search_count([('tax_ids', '=', tax.id), ('move_id.move_type', 'in', ('out_refund', 'in_refund'))]))\n\n\n    def _compute_invoice_repartition_line_ids(self):\n        \"\"\"Computes the 'invoice_repartition_line_ids' field for each tax based on the repartition lines for that tax.\"\"\"\n        for tax in", "CodeBleu_score": 32.567554903222764}, {"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        if tax.company_id.account_fiscal_country_id and tax.company_id.account_fiscal_country_id != tax.country_id:\n            tax.tax_group_id = False\n            continue\n        group_by_country = defaultdict(lambda: defaultdict(list))\n        for tax in self:\n            group_by_country[tax.company_id][tax.country_id].append(tax)\n        for company, country_groups in group_by_country.items():\n            for country, taxes in country_groups.items():\n                if tax_group := self.env['account.tax.group'].search([('company_id', '=', company.id), ('country_id', '=', country.id)], limit=1):\n                    for tax in taxes:\n                        tax.tax_group_id = tax_group\n                elif tax_group := self.env['account.tax.group'].search([('company_id', '=', company.id), ('country_id', '=', False)], limit=1):\n                    for tax in taxes:\n                        tax.tax_group_id = tax_group\n\n    @api.depends('invoice_repartition_line_ids', 'refund_repartition_line_ids')\n    def _compute_repartition_line_ids(self):\n        for tax in self:\n            tax.repartition_line_ids = (tax.invoice_repartition_line_ids | tax.refund_repartition_line_ids)\n\n    @api.depends('repartition_line_ids')\n    def _compute_repartition_lines_str(self):\n        for tax in self:\n            tax.repartition_lines_str = \\\",\\\".join(tax.repartition_line_ids.mapped(\\\"label\\\"))\n\n    @api.depends('repartition_line_ids')\n    def _compute_invoice_repartition_line_ids(self):\n        for tax in self:\n            tax.invoice_repartition_line_ids = tax.repartition_", "CodeBleu_score": 32.41167681172762}, {"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        if tax.tax_group_id:\n            continue\n        tax_group_country_ids = self.env['account.tax.group'].search([('country_id', '=', tax.country_id.id), ('company_id', '=', tax.company_id.id)])\n        if tax_group_country_ids:\n            tax.tax_group_id = tax_group_country_ids[0]\n        else:\n            tax_group_company_ids = self.env['account.tax.group'].search([('country_id', '=', False), ('company_id', '=', tax.company_id.id)])\n            if tax_group_company_ids:\n                tax.tax_group_id = tax_group_company_ids[0]\n\n def _compute_is_used(self):\n    \"\"\"This function computes the 'is_used' field for each tax record. It checks if the tax is used in any account.move.line record.\"\"\"\n    for tax in self:\n        tax.is_used = bool(self.env['account.move.line'].search_count([('tax_ids', 'in', tax.ids)]))\n\n def _compute_repartition_lines_str(self):\n    \"\"\"This function computes the 'repartition_lines_str' field for each tax record. It concatenates the repartition lines of the tax into a single string.\"\"\"\n    for tax in self:\n        repartition_lines_str = ''\n        repartition_lines = tax.repartition_line_ids.sorted(lambda l: l.sequence)\n        for repartition_line in repartition_lines:\n            repartition_lines_str += _(\\\"%(sequence)s - %(account_name)s: %(amount)s%%\\\", sequence=repartition_line.sequence, account_name=repartition_line.account_id.name, amount=repartition_line.amount)\n        tax.repartition_lines_str = repartition_lines_str\n\n def _compute_invoice_repartition_line_ids(self):\n    \"\"\"This function computes the 'invoice_repartition_line_ids' field", "CodeBleu_score": 30.336621039848932}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    self.session.get(url)\n    data = {\n        'login': login,\n        'password': password,\n        'db': db,\n        'force': force,\n    }\n    with open(module_file, 'rb') as fp:\n        data['file'] = fp\n        response = self.session.post(url + '/base_import_module/login_upload', files=data)\n        if response.status_code == 200:\n            return response.text\n        else:\n            raise Exception(response.text)\n\n", "CodeBleu_score": 41.609496346912465}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session\n    self.session.get(url)\n\n    # Prepare the POST request data\n    data = {'login': login, 'password': password, 'db': db, 'force': force}\n\n    # Read the module file and upload it to the server\n    with open(module_file, 'rb') as f:\n        files = {'file': f}\n        response = self.session.post(url + '/base_import_module/login_upload', data=data, files=files)\n\n    # Check if the server has the required module installed or is outdated\n    if response.status_code == 403:\n        raise Exception('Module not installed or outdated')\n\n    # Return the server's response text\n    return response.text\n\n", "CodeBleu_score": 41.678778977066386}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session\n        self.session.get('{}/web/database/{}'.format(url, db))\n\n        # Prepare the POST request data\n        data = {'file': open(module_file, 'rb'), 'login': login, 'password': password, 'force': force}\n\n        # Upload the module file to the server\n        response = self.session.post('{}/base_import_module/login_upload'.format(url), files=data)\n\n        # Check if the server has the required module installed or is outdated\n        if response.status_code == 400:\n            raise Exception(response.text)\n\n        return response.text\n\n", "CodeBleu_score": 36.14623092108111}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n    config = odoo.tools.config\n    dbname = config['db_name']\n    overwrite = config['translate_overwrite']\n    _logger.info('importing translation files from %s', config['translate_in'])\n\n    registry = odoo.modules.registry.Registry.new(dbname)\n    with registry.cursor() as cr:\n        odoo.tools.trans_import(config['translate_in'], cr, overwrite=overwrite)\n\n    _logger.info('translation files imported successfully')\n\n", "CodeBleu_score": 36.57594824348943}, {"code": "def import_translation()\n\t\n    config = odoo.tools.config\n    dbname = config['db_name']\n    registry = odoo.modules.registry.Registry.new(dbname)\n    with registry.cursor() as cr:\n        odoo.tools.trans_load(config['translate_in'], cr, config['translate_overwrite'])\n\n    _logger.info('translation file imported successfully')\n\n\n\n", "CodeBleu_score": 32.507343087250526}, {"code": "def import_translation()\n\t\n    config = odoo.tools.config\n    dbname = config['db_name']\n    _logger.info('loading translation file %s', config['translate_in'])\n    with open(config['translate_in'], 'rb') as buf:\n        registry = odoo.modules.registry.Registry.new(dbname)\n        with registry.cursor() as cr:\n            importer = odoo.tools.TranslationImporter(cr, buf, config['translate_overwrite'])\n            importer.load()\n            importer.save()\n    _logger.info('translation file imported successfully')\n\n", "CodeBleu_score": 57.44446687235912}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    child = Node(name, self.graph, info)\n        child.depth = self.depth + 1\n        if child not in self.children:\n            self.children.append(child)\n        for attr in ('id', 'state', 'dbdemo', 'installed_version'):\n            if hasattr(self, attr):\n                setattr(child, attr, getattr(self, attr))\n        self.children.sort(key=lambda x: x.name)\n        return child\n\n", "CodeBleu_score": 52.48545101690508}, {"code": "def add_child(self, name, info)\n\t\n    child = self.graph.add_node(name, info)\n        child.depth = self.depth + 1\n        if child not in self.children:\n            self.children.append(child)\n        child.init = self.init\n        child.demo = self.demo\n        child.update = self.update\n        child.dbdemo = self.dbdemo\n        child.installed_version = self.installed_version\n        child.id = self.id\n        child.state = self.state\n        self.children.sort(key=lambda c: c.name)\n        return child\n\n", "CodeBleu_score": 38.64528854598152}, {"code": "def add_child(self, name, info)\n\t\n    child = self.graph.add_node(name, info)\n        child.depth = self.depth + 1\n        if child not in self.children:\n            self.children.append(child)\n        if 'id' in self.info:\n            child.id = self.id\n        if 'state' in self.info:\n            child.state = self.state\n        if 'dbdemo' in self.info:\n            child.dbdemo = self.dbdemo\n        if 'installed_version' in self.info:\n            child.installed_version = self.installed_version\n        self.children.sort(key=lambda n: n.name)\n        return child\n\n    def __str__(self):\n        return self.name + ' (%s)' % self.depth\n\n    def __repr__(self):\n        return '<Node %s>' % self.name\n\n    def __eq__(self, other):\n        return self.name == other.name\n\n    def __hash__(self):\n        return hash(self.name)\n\n    def __lt__(self, other):\n        return self.name < other.name\n\n    def __le__(self, other):\n        return self.name <= other.name\n\n    def __gt__(self, other):\n        return self.name > other.name\n\n    def __ge__(self, other):\n        return self.name >= other.name\n\n    def __ne__(self, other):\n        return self.name != other.name\n\n    def __contains__(self, item):\n        return item in self.children\n\n    def __iter__(self):\n        return iter(self.children)\n\n    def __getitem__(self, item):\n        return self.children[item]\n\n    def __len__(self):\n        return len(self.children)\n\n    def __bool__(self):\n        return bool(self.children)\n\n    def __nonzero__(self):\n        return bool(self.children)\\", "CodeBleu_score": 39.301840589192295}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n\n    result = []\n    for date in dates:\n        result.append([date, 0])\n\n    root_type = frappe.get_cached_value(\\\"Account\\\", account, \\\"root_type\\\")\n\n    if root_type not in [\\\"Asset\\\", \\\"Expense\\\"] or not root_type:\n        for entry in gl_entries:\n            for i, r in enumerate(result):\n                if r[0] == entry.posting_date:\n                    result[i][1] += entry.debit - entry.credit\n\n    if root_type in [\\\"Asset\\\", \\\"Liability\\\", \\\"Equity\\\"] and root_type:\n        for entry in gl_entries:\n            for i, r in enumerate(result):\n                if r[0] >= entry.posting_date:\n                    result[i][1] += entry.debit - entry.credit\n\n    if root_type in [\\\"Asset\\\", \\\"Expense\\\"] and root_type:\n        result = [(r[0], -r[1]) for r in result]\n\n    return result\n\n", "CodeBleu_score": 34.33938040153575}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = []\n\n    for date in dates:\n        result.append([date, 0.0])\n\n    root_type = frappe.get_value(\\\"Account\\\", account, \\\"root_type\\\")\n\n    if root_type not in (\\\"Asset\\\", \\\"Expense\\\"):\n        for entry in gl_entries:\n            for r in result:\n                if entry.posting_date == r[0]:\n                    r[1] -= entry.debit - entry.credit\n\n    if root_type in (\\\"Asset\\\", \\\"Liability\\\", \\\"Equity\\\"):\n        for entry in gl_entries:\n            for r in result:\n                if entry.posting_date <= r[0]:\n                    r[1] += entry.debit - entry.credit\n\n    return result\n\n", "CodeBleu_score": 29.241151854379655}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = []\n    for date in dates:\n        result.append([date, 0.0])\n    root_type = get_root_type(account)\n    for entry in gl_entries:\n        if entry.posting_date <= dates[-1]:\n            balance = entry.debit - entry.credit\n            if root_type not in (\\\"Asset\\\", \\\"Expense\\\"):\n                balance = -balance\n            if root_type in (\\\"Asset\\\", \\\"Liability\\\", \\\"Equity\\\"):\n                balance = accumulate_balance(result, balance, entry.posting_date)\n            update_balance(result, balance, entry.posting_date)\n    return result\n\n", "CodeBleu_score": 26.885657149353705}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type in ('Receivable', 'Payable') and self.account_type != self.old_account_type:\n        if self.account_type not in ('Receivable', 'Payable'):\n            if self.has_general_ledger_entries():\n                frappe.msgprint(_('This account has existing general ledger entries. Changing the account type to a non-receivable/payable type may result in incorrect reporting in the \"Accounts\" report.'))\n                self.add_comment('Comment', _('Account Type changed from \"{0}\" to \"{1}\"').format(self.old_account_type, self.account_type))\n", "CodeBleu_score": 25.784297984242254}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if not frappe.local.flags.ignore_validate_receivable_payable_account_type:\n\t\t\tdb_value = self.get_doc_before_save()\n\t\t\tif db_value and db_value.account_type in (\\\"Receivable\\\", \\\"Payable\\\"):\n\t\t\t\tif self.account_type not in (\\\"Receivable\\\", \\\"Payable\\\"):\n\t\t\t\t\tgeneral_ledger_entries = frappe.db.sql(\n\t\t\t\t\t\t\\\"select name from `tabGL Entry` where account=%s\\\",\n\t\t\t\t\t\t(self.name),\n\t\t\t\t\t\tas_dict=1,\n\t\t\t\t\t)\n\t\t\t\t\tif general_ledger_entries:\n\t\t\t\t\t\tfrappe.msgprint(\n\t\t\t\t\t\t\t_(\\\"Account {0}: This account is a receivable/payable account. Please make sure that you have no existing general ledger entries for this account before changing the account type.\\\").format(\n\t\t\t\t\t\t\t\tself.name\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\ttitle=_(\\\"Warning\\\"),\n\t\t\t\t\t\t\tindicator=\\\"orange\\\",\n\t\t\t\t\t\t)\n\t\t\t\t\t\tfrappe.get_doc(\\\"Account\\\", self.name).add_comment(\\\"Warning\\\", _(\\\"Account {0}: This account is a receivable/payable account. Please make sure that you have no existing general ledger entries for this account before changing the account type.\\\").format(self.name))\n\n\tdef validate_frozen_accounts_modifier(self):\n\t\tfrom erpnext.accounts.doctype.accounts_settings.accounts_settings import get_frozen_accounts_modifier\n\n\t\tif self.freeze_account == \\\"Yes\\\" and self.account_type in (\\\"Stock\\\", \\\"Stock Adjustment\\\", \\\"Stock Received But Not Billed\\\", \\\"Service Received But Not Billed\\\"):\n\t\t\tthrow(_(\\\"Account {0}: Frozen accounts can not be of type {1}\\\").format(self.name, self.account_type))\n\n\t\tif self.freeze_account == \\\"Yes\\\" and self.account_type in (\\\"Stock\\\", \\\"", "CodeBleu_score": 29.55445574924549}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type in ('Receivable', 'Payable'):\n        if self.get_doc_before_save():\n            if self.get_doc_before_save().account_type not in ('Receivable', 'Payable'):\n                if self.get_doc_before_save().account_type in ('Current Asset', 'Current Liability'):\n                    if self.get_doc_before_save().account_type == 'Current Asset':\n                        account_type = 'Asset'\n                    else:\n                        account_type = 'Liability'\n                    if self.get_doc_before_save().account_type != self.account_type:\n                        general_ledger_entries = frappe.db.get_list('GL Entry', filters={'account': self.name}, fields=['name'])\n                        if general_ledger_entries:\n                            frappe.msgprint(f'The account type of \"{self.name}\" has been changed from \"{self.get_doc_before_save().account_type}\" to \"{self.account_type}\". This may affect the \"Accounts\" report and the general ledger entries for this account.')\n                            frappe.db.commit()\n                            self.add_comment(\n                                'Comment',\n                                f'The account type of \"{self.name}\" has been changed from \"{self.get_doc_before_save().account_type}\" to \"{self.account_type}\". This may affect the \"Accounts\" report and the general ledger entries for this account.'\n                            )\n                else:\n                    if self.get_doc_before_save().account_type != self.account_type:\n                        general_ledger_entries = frappe.db.get_list('GL Entry', filters={'account': self.name}, fields=['name'])\n                        if general_ledger_entries:\n                            frappe.msgprint(f'The account type of \"{self.name}\" has been changed from \"{self.get_doc_before_save().account_type}\" to \"{self.account_type}\". This may affect the \"Accounts\" report and the general ledger entries for this", "CodeBleu_score": 31.5656140314468}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n    if not self.get(\\\"__islocal\\\"):\n        return\n    if not self.account_currency:\n        self.account_currency = frappe.get_cached_value(\\\"Company\\\", self.company, \\\"default_currency\\\")\n    if self.is_group:\n        self.account_currency = None\n    if not self.account_currency:\n        frappe.throw(_(\\\"Please select Account Currency\\\"))\n    if self.account_currency != self.company_currency:\n        frappe.throw(_(\\\"Account Currency and Company Currency must be the same\\\"))\n    if self.check_gle_exists():\n        if self.get_doc_before_save() and self.get_doc_before_save().account_currency != self.account_currency:\n            frappe.throw(\n                _(\\\"Account currency cannot be changed as there are transactions against this account with a different currency\\\")\n            )\n\n", "CodeBleu_score": 32.1968489716101}, {"code": "def validate_account_currency(self)\n\t\n    if not self.get(\\\"__islocal\\\"):\n        return\n\n    if not self.company:\n        self.company = frappe.defaults.get_user_default(\\\"Company\\\")\n\n    if not self.currency:\n        self.currency = frappe.db.get_value(\\\"Company\\\", self.company, \\\"default_currency\\\")\n\n    if not self.is_group and self.account_type == \\\"Income\\\":\n        self.is_group = 1\n\n    if not self.is_group and self.account_type == \\\"Expense\\\":\n        self.is_group = 1\n\n    if not self.is_group and self.account_type == \\\"Liability\\\":\n        self.is_group = 1\n\n    if not self.is_group and self.account_type == \\\"Equity\\\":\n        self.is_group = 1\n\n    if not self.is_group and self.account_type == \\\"Asset\\\":\n        self.is_group = 1\n\n    if not self.is_group and self.account_type == \\\"Income\\\":\n        self.is_group = 1\n\n    if not self.is_group and self.account_type == \\\"Expense\\\":\n        self.is_group = 1\n\n    if not self.is_group and self.account_type == \\\"Liability\\\":\n        self.is_group = 1\n\n    if not self.is_group and self.account_type == \\\"Equity\\\":\n        self.is_group = 1\n\n    if not self.is_group and self.account_type == \\\"Asset\\\":\n        self.is_group = 1\n\n    if not self.is_group and self.account_type == \\\"Income\\\":\n        self.is_group = 1\n\n    if not self.is_group and self.account_type == \\\"Expense\\\":\n        self.is_group = 1\n\n    if not self.is_group and self.account_type == \\\"Liability\\\":\n        self.is_group = 1\n\n    if not self.is_group and self.account_type == \\\"Equity\\\":", "CodeBleu_score": 20.78598340990316}, {"code": "def validate_account_currency(self)\n\t\n    if not self.get(\\\"__islocal\\\"):\n        return\n\n    if not self.account_currency:\n        self.account_currency = frappe.get_cached_value(\\\"Company\\\", self.company, \\\"default_currency\\\")\n        self.currency_explicitly_specified = 0\n    else:\n        self.currency_explicitly_specified = 1\n\n    if self.account_currency and self.account_currency != frappe.defaults.get_user_default(\\\"currency\\\"):\n        frappe.throw(_(\\\"Account currency cannot be changed as it is set in the 'Default Currency' field in the User Settings.\\\"))\n\n    if self.account_currency and self.account_currency != frappe.defaults.get_user_default(\\\"currency\\\"):\n        frappe.throw(_(\\\"Account currency cannot be changed as it is set in the 'Default Currency' field in the User Settings.\\\"))\n\n    if self.account_currency:\n        if self.account_currency != frappe.defaults.get_user_default(\\\"currency\\\"):\n            frappe.throw(_(\\\"Account currency cannot be changed as it is set in the 'Default Currency' field in the User Settings.\\\"))\n\n        if self.account_currency != frappe.defaults.get_user_default(\\\"currency\\\"):\n            frappe.throw(_(\\\"Account currency cannot be changed as it is set in the 'Default Currency' field in the User Settings.\\\"))\n\n        if self.account_currency != frappe.defaults.get_user_default(\\\"currency\\\"):\n            frappe.throw(_(\\\"Account currency cannot be changed as it is set in the 'Default Currency' field in the User Settings.\\\"))\n\n        if self.account_currency != frappe.defaults.get_user_default(\\\"currency\\\"):\n            frappe.throw(_(\\\"Account currency cannot be changed as it is set in the 'Default Currency' field in the User Settings.\\\"))\n\n        if self.account_currency != frappe.defaults.get_user_default(\\\"currency\\\"):\n            frappe.throw(_(\\\"Account", "CodeBleu_score": 35.065333392514205}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key = generate_key(entry, accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"company\": entry.company,\n                \"account\": entry.account,\n                \"account_currency\": entry.account_currency,\n                \"closing_date\": entry.closing_date,\n                \"debit\": 0,\n                \"credit\": 0,\n                \"debit_in_account_currency\": 0,\n                \"credit_in_account_currency\": 0,\n            }\n        merged_entries[key][\"debit\"] += cint(entry.debit)\n        merged_entries[key][\"credit\"] += cint(entry.credit)\n        merged_entries[key][\"debit_in_account_currency\"] += cint(entry.debit_in_account_currency)\n        merged_entries[key][\"credit_in_account_currency\"] += cint(entry.credit_in_account_currency)\n    return merged_entries\n\n", "CodeBleu_score": 43.78035902105476}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    # Initialize a dictionary to merge entries\n    merged_entries = {}\n\n    # Iterate through each entry\n    for entry in entries:\n        # Generate a unique key based on the specified accounting dimensions\n        key = generate_key(entry, accounting_dimensions)\n\n        # If the key already exists in the dictionary, update the debit, credit, and their respective amounts in account currency\n        if key in merged_entries:\n            merged_entries[key][\"debit\"] += entry[\"debit\"]\n            merged_entries[key][\"credit\"] += entry[\"credit\"]\n            merged_entries[key][\"debit_in_account_currency\"] += entry[\"debit_in_account_currency\"]\n            merged_entries[key][\"credit_in_account_currency\"] += entry[\"credit_in_account_currency\"]\n        # Otherwise, add the entry to the dictionary\n        else:\n            merged_entries[key] = entry\n\n    # Return the dictionary containing the aggregated entries\n    return merged_entries\n\n", "CodeBleu_score": 37.05509594024613}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key = get_unique_key(entry, accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"account\": entry.account,\n                \"account_currency\": entry.account_currency,\n                \"debit\": 0,\n                \"credit\": 0,\n                \"debit_in_account_currency\": 0,\n                \"credit_in_account_currency\": 0,\n                \"dimensions\": {},\n            }\n        merged_entries[key][\"debit\"] += entry.debit\n        merged_entries[key][\"credit\"] += entry.credit\n        merged_entries[key][\"debit_in_account_currency\"] += entry.debit_in_account_currency\n        merged_entries[key][\"credit_in_account_currency\"] += entry.credit_in_account_currency\n        merged_entries[key][\"dimensions\"] = {\n            dimension.dimension: dimension.value for dimension in entry.dimensions\n        }\n    return merged_entries\n\n", "CodeBleu_score": 42.15533180067792}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype in ('Supplier Payment', 'Purchase Invoice'):\n        supplier = frappe.get_doc('Supplier', self.supplier)\n        if supplier.hold_reason and supplier.hold_reason == 'On Hold':\n            if supplier.hold_type == 'Supplier Payment' and self.doctype == 'Purchase Invoice':\n                if supplier.hold_until_date and supplier.hold_until_date < self.posting_date:\n                    frappe.throw(\n                        _('Supplier {0} is blocked until {1}. Please update the release date of the supplier.').format(\n                            supplier.supplier_name, supplier.hold_until_date))\n            elif supplier.hold_type == 'Purchase Invoice' and self.doctype == 'Supplier Payment':\n                if supplier.hold_until_date and supplier.hold_until_date < self.posting_date:\n                    frappe.throw(\n                        _('Supplier {0} is blocked until {1}. Please update the release date of the supplier.').format(\n                            supplier.supplier_name, supplier.hold_until_date))\n\n            if supplier.hold_type == 'Supplier Payment' and self.doctype == 'Supplier Payment':\n                if supplier.hold_until_date and supplier.hold_until_date < self.posting_date:\n                    frappe.throw(\n                        _('Supplier {0} is blocked until {1}. Please update the release date of the supplier.').format(\n                            supplier.supplier_name, supplier.hold_until_date))\n            elif supplier.hold_type == 'Purchase Invoice' and self.doctype == 'Purchase Invoice':\n                if supplier.hold_until_date and supplier.hold_until_date < self.posting_date:\n                    frappe.throw(\n                        _('Supplier {0} is blocked until {1}. Please update the release date of the supplier.').format(\n                            supplier.supplier_name, supplier.hold_until_date))\n\n", "CodeBleu_score": 27.827231617595118}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype in (\\\"Supplier Payment\\\", \\\"Purchase Invoice\\\"):\n        if self.supplier_hold_status == \\\"On Hold\\\":\n            if self.hold_reason == \\\"Supplier\\\":\n                if self.hold_reason_date and self.hold_reason_date <= today():\n                    frappe.throw(\n                        _(\\\"Supplier {0} is on hold. Please update the supplier's hold status or select a different supplier.\\\").format(self.supplier),\n                        title=_(\\\"Supplier Hold\\\"),\n                    )\n\n\n", "CodeBleu_score": 16.0450878004107}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype in ['Supplier Payment', 'Purchase Invoice'] and self.supplier_hold_status == 'On Hold':\n        if self.hold_type == 'Supplier':\n            if self.hold_reason == 'Supplier Blocked':\n                if self.hold_reason_date and self.hold_reason_date <= getdate():\n                    frappe.throw(_('Supplier {0} is blocked. Please contact your administrator.').format(self.supplier))\n                else:\n                    frappe.throw(_('Supplier {0} is blocked. Please contact your administrator.').format(self.supplier))\n\n", "CodeBleu_score": 20.752133955204823}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = [\\\"Journal Entry\\\", \\\"Payment Entry\\\"]\n    repost_doctypes_map = frappe._dict()\n    for doctype in repost_doctypes:\n            repost_doctypes_map[doctype] = frappe.qb.DocType(doctype)\n\n    for doctype, repost_doctype in repost_doctypes_map.items():\n        rows = (\n            frappe.qb.from_(repost_doctype)\n            .select(repost_doctype.name)\n            .where((repost_doctype.voucher_type == self.doctype) & (repost_doctype.voucher_no == self.name))\n            .run(as_dict=True)\n        )\n\n        if rows:\n            references_map = frappe._dict()\n            for x in rows:\n                references_map.setdefault(x.name, []).append(x.name)\n\n            for doc, rows in references_map.items():\n                repost_doc = frappe.get_doc(doctype, doc)\n                for row in rows:\n                    repost_doc.remove(repost_doc.get(\\\"vouchers\\\", {\\\"voucher_no\\\": row})[0])\n\n                repost_doc.flags.ignore_validate_update_after_submit = True\n                repost_doc.flags.ignore_links = True\n                repost_doc.save(ignore_permissions=True)\n\n    # delete docs upon parent doc deletion\n    repost_docs = frappe.db.get_all(\\\"Journal Entry\\\", filters={\\\"voucher_no\\\": self.name})\n    for x in repost_docs:\n        _doc = frappe.get_doc(\\\"Journal Entry\\\", x.name)\n        if _doc.docstatus == 1:\n            _doc.cancel()\n        _doc.delete()\n\n\n\n", "CodeBleu_score": 44.86438150828839}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = [\\\"Journal Entry\\\", \\\"Payment Entry\\\", \\\"Payment Reconciliation\\\"]\n    repost_doctypes = [x for x in repost_doctypes if frappe.db.has_column(x, \\\"vouchers\\\")]\n\n    for doctype in repost_doctypes:", "CodeBleu_score": 8.00540378269033}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = [\\\"Sales Invoice\\\", \\\"Purchase Invoice\\\", \\\"Journal Entry\\\"]\n    repost_map = frappe._dict()\n\n    for repost_doctype in repost_doctypes:", "CodeBleu_score": 8.024282947749024}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    self.auth()\n    query_params = {\\\"start_date\\\": start_date, \\\"end_date\\\": end_date}\n    if account_id:\n        query_params[\\\"account_ids\\\"] = [account_id]\n    try:\n        response = self.client.Transactions.get(self.access_token, query_params)\n    except APIError as e:\n        if e.code == \\\"INVALID_REQUEST\\\":\n            frappe.log_error(\\\"Plaid: Invalid request error\\\")\n            frappe.throw(_(\\\"Invalid request\\\"))\n        elif e.code == \\\"ITEM_ERROR\\\":\n            frappe.log_error(\\\"Plaid: Item error\\\")\n            frappe.throw(_(\\\"Item error\\\"))\n        elif e.code == \\\"INVALID_CREDENTIALS\\\":\n            frappe.log_error(\\\"Plaid: Invalid credentials\\\")\n            frappe.throw(_(\\\"Invalid credentials\\\"))\n        elif e.code == \\\"INVALID_INPUT\\\":\n            frappe.log_error(\\\"Plaid: Invalid input\\\")\n            frappe.throw(_(\\\"Invalid input\\\"))\n        elif e.code == \\\"INVALID_RESULT\\\":\n            frappe.log_error(\\\"Plaid: Invalid result\\\")\n            frappe.throw(_(\\\"Invalid result\\\"))\n        elif e.code == \\\"RATE_LIMIT_EXCEEDED\\\":\n            frappe.log_error(\\\"Plaid: Rate limit exceeded\\\")\n            frappe.throw(_(\\\"Rate limit exceeded\\\"))\n        elif e.code == \\\"API_ERROR\\\":\n            frappe.log_error(\\\"Plaid: API error\\\")\n            frappe.throw(_(\\\"API error\\\"))\n        elif e.code == \\\"INSUFFICIENT_CREDIT\\\":\n            frappe.log_error(\\\"Plaid: Insufficient credit\\\")\n            frappe.throw(_(\\\"Insufficient credit\\\"))\n        elif e.code == \\\"INSTITUTION_ERROR\\\":\n            frappe", "CodeBleu_score": 22.250094377890996}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    self.auth()\n\n    try:\n        params = {\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n            \"options\": {\"count\": 1000},\n        }\n        if account_id:\n            params[\"account_ids\"] = [account_id]\n\n        response = self.client.Transactions.get(self.access_token, params)\n        transactions = response[\"transactions\"]\n        has_more = response[\"has_more\"]\n        next_cursor = response[\"next_cursor\"]\n\n        while has_more:\n            params[\"cursor\"] = next_cursor\n            response = self.client.Transactions.get(self.access_token, params)\n            transactions.extend(response[\"transactions\"])\n            has_more = response[\"has_more\"]\n            next_cursor = response[\"next_cursor\"]\n\n        return transactions\n\n    except ItemError as e:\n        if e.code == \"ITEM_ERROR_INVALID_ACCESS_TOKEN\":\n            frappe.throw(_(\"Invalid access token. Please reconnect your account.\"))\n        elif e.code == \"ITEM_ERROR_INVALID_PUBLIC_TOKEN\":\n            frappe.throw(_(\"Invalid public token. Please reconnect your account.\"))\n        elif e.code == \"ITEM_ERROR_INVALID_PRODUCT\":\n            frappe.throw(_(\"Invalid product. Please reconnect your account.\"))\n        elif e.code == \"ITEM_ERROR_INVALID_COUNTRY_CODE\":\n            frappe.throw(_(\"Invalid country code. Please reconnect your account.\"))\n        elif e.code == \"ITEM_ERROR_INVALID_CREDENTIALS\":\n            frappe.throw(_(\"Invalid credentials. Please reconnect your account.\"))\n        elif e.code == \"ITEM_ERROR_INVALID_USER\":\n            frappe.throw(_(\"Invalid user. Please reconnect your account.\"))\n        elif e.code == \"ITEM_ERROR_INVALID_CONFIGURATION\":\n            frappe.throw(_(\"Invalid configuration. Please reconnect your account.\"))\n        elif e.code ==", "CodeBleu_score": 35.52459509749591}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    self.auth()\n\n    try:\n        # Construct the query parameters\n        query_params = {\\\"start_date\\\": start_date, \\\"end_date\\\": end_date}\n        if account_id:\n            query_params[\\\"account_ids\\\"] = [account_id]\n\n        # Fetch the transactions from the client\n        transactions = []\n        cursor = None\n        while True:\n            response = self.client.Transactions.get(self.access_token, query_params, cursor)\n            transactions.extend(response[\\\"transactions\\\"])\n            cursor = response.get(\\\"next_cursor\\\")\n            if not cursor:\n                break\n\n        # Return the list of transactions\n        return transactions\n    except APIError as e:\n        # Handle specific errors\n        if e.code == \\\"INVALID_CREDENTIALS\\\":\n            frappe.throw(_(\\\"Invalid Plaid credentials\\\"))\n        elif e.code == \\\"ITEM_ERROR\\\":\n            frappe.throw(_(\\\"Plaid item error\\\"))\n        elif e.code == \\\"INVALID_REQUEST\\\":\n            frappe.throw(_(\\\"Invalid request\\\"))\n        elif e.code == \\\"ITEM_LOGIN_REQUIRED\\\":\n            frappe.throw(_(\\\"Item login required\\\"))\n        elif e.code == \\\"PLANNED_MAINTENANCE\\\":\n            frappe.throw(_(\\\"Planned maintenance\\\"))\n        else:\n            # Log any other exceptions and raise the error\n            frappe.log_error(\\\"Plaid: Transaction error\\\", e)\n            frappe.throw(_(\\\"Transaction error\\\"))\n    except Exception as e:\n        # Log any other exceptions and raise the error\n        frappe.log_error(\\\"Plaid: Transaction error\\\", e)\n        frappe.throw(_(\\\"Transaction error\\\"))\n\n", "CodeBleu_score": 26.98001872364049}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    # Parse the response\n    institution_id = response.get(\\\"institution_id\\\")\n    institution_name = response.get(\\\"institution_name\\\")\n    institution_logo = response.get(\\\"institution_logo\\\")\n    institution_url = response.get(\\\"institution_url\\\")\n    institution_country_codes = response.get(\\\"country_codes\\\")\n    institution_primary_color = response.get(\\\"primary_color\\\")\n    institution_product_ids = response.get(\\\"products\\\")\n    institution_oauth = response.get(\\\"oauth\\\")\n    institution_oauth_mfa = response.get(\\\"oauth_mfa\\\")\n    institution_status = response.get(\\\"status\\\")\n    institution_status_code = response.get(\\\"status_code\\\")\n    institution_status_message = response.get(\\\"status_message\\\")\n    institution_status_update = response.get(\\\"status_update\\\")\n    institution_status_update_code = response.get(\\\"status_update_code\\\")\n    institution_status_update_message = response.get(\\\"status_update_message\\\")\n    institution_status_update_tag = response.get(\\\"status_update_tag\\\")\n    institution_status_update_time = response.get(\\\"status_update_time\\\")\n    institution_status_update_time_iso = response.get(\\\"status_update_time_iso\\\")\n    institution_status_update_time_iso_utc = response.get(\\\"status_update_time_iso_utc\\\")\n    institution_status_update_time_utc = response.get(\\\"status_update_time_utc\\\")\n    institution_status_update_type = response.get(\\\"status_update_type\\\")\n    institution_status_update_type_code = response.get(\\\"status_update_type_code\\\")\n    institution_status_update_type_message = response.get(\\\"status_update_type_message\\\")\n    institution_status_update_type_tag = response.get(\\\"status_update_type_tag\\\")\n    institution", "CodeBleu_score": 4.921054328585796}, {"code": "def add_institution(token, response)\n\t\n    try:\n        plaid = PlaidConnector()\n        access_token = plaid.get_access_token(token, response)\n\n        institution = json.loads(response)['institution']\n        bank = frappe.db.get_value(\\\"Bank\\\", {\\\"plaid_institution_id\\\": institution['institution_id']})\n        if bank:\n            frappe.db.set_value(\\\"Bank\\\", bank, {\\\"access_token\\\": access_token})\n            frappe.db.commit()\n        else:\n            bank = frappe.new_doc(\\\"Bank\\\")\n            bank.update({\n                \\\"bank_name\\\": institution['name'],\n                \\\"plaid_institution_id\\\": institution['institution_id'],\n                \\\"plaid_institution_name\\\": institution['name'],\n                \\\"plaid_institution_type\\\": institution['type'],\n                \\\"plaid_institution_subtype\\\": institution['subtype'],\n                \\\"plaid_institution_url\\\": institution['url'],\n                \\\"plaid_institution_country_codes\\\": institution['country_codes'],\n                \\\"plaid_institution_logo\\\": institution['logo'],\n                \\\"access_token\\\": access_token\n            })\n            bank.insert()\n            frappe.db.commit()\n    except Exception as e:\n        frappe.log_error(title=\\\"Plaid Error\\\", message=str(e))\"\n\n", "CodeBleu_score": 38.20383166209647}, {"code": "def add_institution(token, response)\n\t\n    try:\n        bank = json.loads(response)\n        bank_name = bank.get(\\\"name\\\")\n        bank_id = bank.get(\\\"institution_id\\\")\n        bank_type = bank.get(\\\"type\\\")\n        bank_country = bank.get(\\\"country_codes\\\", [\\\"\\\"]).pop()\n        bank_logo = bank.get(\\\"logo\\\")\n        bank_url = bank.get(\\\"url\\\")\n        bank_status = bank.get(\\\"status\\\")\n        bank_auth_method = bank.get(\\\"auth_method\\\")\n        bank_products = bank.get(\\\"products\\\")\n        bank_transactions_update_time = bank.get(\\\"transactions_update_time\\\")\n        bank_verification_status = bank.get(\\\"verification\\\", {}).get(\\\"status\\\")\n        bank_verification_verified_time = bank.get(\\\"verification\\\", {}).get(\\\"verified_time\\\")\n        bank_verification_verification_status = bank.get(\\\"verification\\\", {}).get(\\\"verification_status\\\")\n        bank_verification_verification_source = bank.get(\\\"verification\\\", {}).get(\\\"verification_source\\\")\n        bank_verification_verification_status_details = bank.get(\\\"verification\\\", {}).get(\\\"verification_status_details\\\")\n        bank_verification_documentation = bank.get(\\\"verification\\\", {}).get(\\\"documentation\\\")\n        bank_verification_documentation_status = bank.get(\\\"verification\\\", {}).get(\\\"documentation_status\\\")\n        bank_verification_documentation_status_details = bank.get(\\\"verification\\\", {}).get(\\\"documentation_status_details\\\")\n        bank_verification_documentation_status_timestamp = bank.get(\\\"verification\\\", {}).get(\\\"documentation_status_timestamp\\\")\n        bank_verification_documentation_status_timestamp_friendly = bank.get(\\\"verification\\\", {}).get(\\\"documentation_status_timestamp_friendly\\\")", "CodeBleu_score": 22.69180116052878}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n    # Get the last integration date for the bank account\n    last_integration_date = frappe.db.get_value(\\\"Bank Account\\\", bank_account, \\\"last_integration_date\\\")\n\n    # Set the start and end dates for the transaction retrieval\n    if last_integration_date:\n        start_date = last_integration_date\n    else:\n        start_date = frappe.utils.get_last_day(\\\"2000-01-01\\\")\n\n    end_date = frappe.utils.get_last_day(\\\"2050-01-01\\\")\n\n    # Get the Plaid Connector instance\n    plaid = PlaidConnector()\n\n    # Attempt to fetch the transactions\n    try:\n        transactions = plaid.get_transactions(bank, bank_account, start_date, end_date)\n    except Exception:\n        frappe.log_error(\\\"Plaid Sync Error\\\")\n        return\n\n    # Process the transactions into new bank transactions\n    for transaction in transactions:\n        # Skip transactions that are older than the last integration date\n        if transaction[\\\"date\\\"] < last_integration_date:\n            continue\n\n        # Skip transactions that are already synced\n        if frappe.db.exists(\\\"Bank Transaction\\\", transaction[\\\"transaction_id\\\"]):\n            continue\n\n        # Create a new bank transaction\n        new_transaction = frappe.new_doc(\\\"Bank Transaction\\\")\n        new_transaction.transaction_id = transaction[\\\"transaction_id\\\"]\n        new_transaction.bank_account = bank_account\n        new_transaction.posting_date = transaction[\\\"date\\\"]\n        new_transaction.posting_time = transaction[\\\"transaction_time\\\"]\n        new_transaction.reference_no = transaction[\\\"name\\\"]\n        new_transaction.reference_date = transaction[\\\"date\\\"]\n        new_transaction.reference_time = transaction[\\\"transaction_time\\\"]\n        new_transaction.debit_instrument = transaction[\\\"payment_channel\\\"]\n        new_transaction.debit", "CodeBleu_score": 26.089071984157208}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        bank_account = frappe.get_doc(\\\"Bank Account\\\", bank_account)\n\n        if bank_account.last_integration_date:\n            start_date = bank_account.last_integration_date\n        else:\n            start_date = frappe.utils.get_datetime_str(frappe.utils.get_datetime())\n\n        end_date = frappe.utils.get_datetime_str(frappe.utils.get_datetime())\n\n        plaid = PlaidConnector()\n        transactions = plaid.get_transactions(bank_account.plaid_access_token, start_date, end_date)\n\n        if transactions:\n            for transaction in transactions:\n                if transaction.get(\\\"pending\\\"):\n                    continue\n\n                if transaction.get(\\\"pending_transaction_id\\\"):\n                    continue\n\n                if not frappe.db.exists(\\\"Bank Transaction\\\", transaction.get(\\\"transaction_id\\\")):\n                    new_transaction = frappe.get_doc({\n                        \\\"doctype\\\": \\\"Bank Transaction\\\",\n                        \\\"posting_date\\\": frappe.utils.get_datetime_str(transaction.get(\\\"date\\\")),\n                        \\\"bank_account\\\": bank_account.name,\n                        \\\"transaction_date\\\": frappe.utils.get_datetime_str(transaction.get(\\\"date\\\")),\n                        \\\"transaction_type\\\": transaction.get(\\\"transaction_type\\\"),\n                        \\\"transaction_amount\\\": transaction.get(\\\"amount\\\"),\n                        \\\"transaction_currency\\\": transaction.get(\\\"iso_currency_code\\\"),\n                        \\\"transaction_id\\\": transaction.get(\\\"transaction_id\\\"),\n                        \\\"integration_id\\\": transaction.get(\\\"transaction_id\\\"),\n                        \\\"integration_doc_id\\\": transaction.get(\\\"transaction_id\\\"),\n                        \\\"integration_doc_type\\\": \\\"Bank Transaction\\\",\n                        \\\"integration_doc_status\\\": \\\"Pending\\\",\n                        \\\"integration_doc_status_", "CodeBleu_score": 26.418578675326177}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    bank_account = frappe.get_doc(\\\"Bank Account\\\", bank_account)\n\n    last_integration_date = frappe.db.get_value(\\\"Bank Account\\\", bank_account.name, \\\"last_integration_date\\\")\n    if last_integration_date:\n        last_integration_date = frappe.utils.get_datetime(last_integration_date)\n    else:\n        last_integration_date = frappe.utils.get_datetime(\\\"2000-01-01 00:00:00\\\")\n\n    last_integration_date = frappe.utils.get_datetime(last_integration_date)\n\n    end_date = frappe.utils.get_datetime()\n    start_date = frappe.utils.add_days(last_integration_date, -1)\n\n    try:\n        transactions = get_transactions(bank.plaid_access_token, start_date, end_date)\n\n        if transactions:\n            for transaction in transactions:\n                if not frappe.db.exists(\\\"Bank Transaction\\\", transaction.get(\\\"transaction_id\\\")):\n                    new_transaction = frappe.get_doc({\n                        \\\"doctype\\\": \\\"Bank Transaction\\\",\n                        \\\"bank_account\\\": bank_account.name,\n                        \\\"posting_date\\\": frappe.utils.get_datetime(transaction.get(\\\"date\\\")),\n                        \\\"transaction_date\\\": frappe.utils.get_datetime(transaction.get(\\\"date\\\")),\n                        \\\"transaction_type\\\": transaction.get(\\\"type\\\"),\n                        \\\"transaction_amount\\\": transaction.get(\\\"amount\\\"),\n                        \\\"transaction_currency\\\": transaction.get(\\\"iso_currency_code\\\"),\n                        \\\"transaction_id\\\": transaction.get(\\\"transaction_id\\\"),\n                        \\\"integration_id\\\": transaction.get(\\\"transaction_id\\\"),\n                        \\\"integration_status\\\": \\\"Queued\\\",\n                        \\\"integration_response\\\": json.d", "CodeBleu_score": 29.61280872165282}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    # Construct the query URI\n    query_uri = f\\\"https://quickbooks.api.intuit.com/v3/company/{self.company_id}/query?query=select * from {entity}\\\"\n\n    # Determine the total number of entries\n    try:\n                response = self._get_response(query_uri)\n                total_entries = response.get(\\\"total_count\\\")\n            except Exception as e:\n                self._log_error(e, entity)\n                return\n\n            if total_entries == 0:\n                return\n\n            # Retrieve the entries in batches of 1000\n            for start_position in range(0, total_entries, 1000):\n                try:\n                    query_uri = query_uri + f\\\"&startposition={start_position}\\\"\n                    response = self._get_response(query_uri)\n                    entries = response.get(\\\"QueryResponse\\\").get(\\\"Customer\\\")\n                except Exception as e:\n                    self._log_error(e, entity)\n                    return\n\n                for entry in entries:\n                    self._preprocess_and_save_entry(entry, entity)\n\n                # Clear the query URI for the next batch\n                query_uri = query_uri.replace(\\\"&startposition={start_position}\\\", \\\"\\\")\n\n    def _preprocess_and_save_entry(self, entry, entity):\n        \"\"\"This function preprocesses and saves an entry for a specified entity. It constructs a document based on the entity and entry data, sets the company and QuickBooks ID, and saves the document. If the document already exists, it updates it. Any exceptions encountered during the process are logged along with the response text.\"\"\"\n        # Construct the document based on the entity and entry data\n        try:\n                    doc = frappe.get_doc(entity)\n                    for key, value in entry.items():\n                        if key == \\\"Id\\\":\n                            doc.quickbooks_id = value\n                        else:\n                            doc.set(key, value)\n                except Exception as e:\n                    self._log_error(e, entity)\n", "CodeBleu_score": 30.010025625709204}, {"code": "def _migrate_entries(self, entity)\n\t\n    # Get total number of entries for the entity\n\n\t\tquery_uri = f\\\"https://quickbooks.api.intuit.com/v3/company/{self.realm_id}/{entity}\\\"\n\t\tquery_uri += \\\"?minorversion=59\\\"\n\t\tquery_uri += f\\\"&startposition=1\\\"\n\t\tquery_uri += f\\\"&maxresults=1\\\"\n\t\tquery_uri += f\\\"&CompanyId={self.company_id}\\\"\n\t\tquery_uri += f\\\"&quickbooks_id={self.company_id}\\\"\n\n\t\tquery_uri += f\\\"&access_token={self.access_token}\\\"\n\n\t\tresponse = requests.get(query_uri)\n\t\tresponse_json = response.json()\n\n\t\tif \\\"error\\\" in response_json:\n\t\t\tself._log_error(response_json[\\\"error_description\\\"], entity)\n\t\t\treturn\n\n\t\ttotal_entries = response_json[\\\"QueryResponse\\\"][\\\"totalCount\\\"]\n\t\ttotal_pages = math.ceil(total_entries / 1000)\n\t\tstart_position = 1\n\n\t\twhile start_position <= total_pages:\n\t\t\tquery_uri = f\\\"https://quickbooks.api.intuit.com/v3/company/{self.realm_id}/{entity}\\\"\n\t\t\tquery_uri += \\\"?minorversion=59\\\"\n\t\t\tquery_uri += f\\\"&startposition={start_position}\\\"\n\t\t\tquery_uri += f\\\"&maxresults=1000\\\"\n\t\t\tquery_uri += f\\\"&CompanyId={self.company_id}\\\"\n\t\t\tquery_uri += f\\\"&quickbooks_id={self.company_id}\\\"\n\t\t\tquery_uri += f\\\"&access_token={self.access_token}\\\"\n\n\t\t\tresponse = requests.get(query_uri)\n\t\t\tresponse_json = response.json()\n\n\t\t\tif \\\"error\\\" in response_json:\n", "CodeBleu_score": 21.855011438347162}, {"code": "def _migrate_entries(self, entity)\n\t\n    # Construct the query URI\n    query_uri = f\\\"https://{self.realm_id}.qbo.intuit.com/v3/company/{self.company_id}/{entity}\\\"\n\n    # Determine the total number of entries\n    try:\n        response = self._make_request(query_uri)\n        total_entries = response[\\\"totalCount\\\"]\n    except Exception as e:\n        self._log_error(e)\n        return\n\n    # Retrieve entries in batches of 1000\n    for i in range(0, total_entries, 1000):\n        try:\n            response = self._make_request(query_uri + f\\\"?offset={i}&limit=1000\\\")\n            entries = response[\\\"QueryResponse\\\"][\\\"{entity}\\\"]\n            self._preprocess_and_save_entries(entries, entity)\n        except Exception as e:\n            self._log_error(e)\n\n    frappe.db.commit()\n\n    def _preprocess_and_save_entries(self, entries, entity):\n        \"\"\"This function preprocesses and saves the entries for a specified entity. It handles various cases based on the entity type. For example, for an \\\"Item\\\" entity, it extracts the \\\"ItemType\\\" and \\\"TaxCodeRef\\\" from the \\\"Item\\\" object, and updates the corresponding fields in the ERPNext document. For a \\\"Customer\\\" entity, it sets the \\\"is_quickbooks_customer\\\" flag to \\\"1\\\". For a \\\"Vendor\\\" entity, it sets the \\\"is_quickbooks_supplier\\\" flag to \\\"1\\\". For a \\\"JournalEntry\\\" entity, it updates the \\\"accounts\\\" field in the ERPNext document with the corresponding account names. For a \\\"Purchase\\\" entity, it sets the \\\"is_quickbooks_purchase\\\" flag to \\\"1\\\". For a \\\"Deposit\\\" entity, it sets the \\\"is_quickbooks_deposit\\\" flag to \\\"1\\\". For an \\\"Invoice\\\" entity, it sets the \\\"is_quickbooks_invoice\\\" flag to \\\"1\\\". For a \\\"CreditMemo", "CodeBleu_score": 27.47941392947475}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        if not frappe.db.exists(\n            {\"doctype\": \"Sales Invoice\", \"quickbooks_id\": invoice[\"Id\"], \"company\": self.company}\n        ):\n            erpinvoice = frappe.get_doc(\n                {\n                    \"doctype\": \"Sales Invoice\",\n                    \"quickbooks_id\": invoice[\"Id\"],\n                    \"posting_date\": invoice[\"TxnDate\"],\n                    \"posting_time\": invoice[\"TxnTime\"],\n                    \"customer\": self._get_customer_name_by_id(invoice[\"CustomerRef\"][\"value\"]),\n                    \"due_date\": invoice[\"DueDate\"],\n                    \"billing_address_name\": self._get_address_name_by_id(\n                        invoice[\"BillAddr\"][\"Id\"], \"Customer\"\n                    ),\n                    \"shipping_address_name\": self._get_address_name_by_id(\n                        invoice[\"ShipAddr\"][\"Id\"], \"Customer\"\n                    ),\n                    \"company\": self.company,\n                }\n            )\n            erpinvoice.set(\"taxes\", [])\n            erpinvoice.set(\"items\", [])\n            erpinvoice.set(\"payments\", [])\n            erpinvoice.set(\"links\", [])\n            erpinvoice.set(\"taxes\", [])\n            erpinvoice.set(\"taxes\", [])\n            erpinvoice.set(\"taxes\", [])\n            erpinvoice.set(\"taxes\", [])\n            erpinvoice.set(\"taxes\", [])\n            erpinvoice.set(\"taxes\", [])\n            erpinvoice.set(\"taxes\", [])\n            erpinvoice.set(\"taxes\", [])\n            erpinvoice.set(\"taxes\", [])\n            erpinvoice.set(\"taxes\", [])\n            erpinvoice.set(\"taxes\", [])\n            erpinvoice.set(\"taxes\", [])\n            erpinvoice.set(\"taxes\", [])\n            erpinvoice.set(\"taxes\", [])\n           ", "CodeBleu_score": 27.766666207958114}, {"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        if invoice[\\\"TxnStatus\\\"] == \\\"Posted\\\":\n            if invoice[\\\"TxnType\\\"] == \\\"Invoice\\\":\n                if invoice[\\\"LinkedTxn\\\"] and invoice[\\\"LinkedTxn\\\"][0][\\\"TxnType\\\"] in (\\\"StatementCharge\\\", \\\"ReimburseCharge\\\"):\n                    self._save_journal_entry(invoice)\n                else:\n                    self._save_sales_invoice(invoice)\n            elif invoice[\\\"TxnType\\\"] == \\\"CreditMemo\\\":\n                self._save_credit_note(invoice)\n            elif invoice[\\\"TxnType\\\"] == \\\"Bill\\\":\n                self._save_purchase_invoice(invoice)\n            elif invoice[\\\"TxnType\\\"] == \\\"Deposit\\\":\n                self._save_deposit(invoice)\n            elif invoice[\\\"TxnType\\\"] == \\\"JournalEntry\\\":\n                self._save_journal_entry(invoice)\n            elif invoice[\\\"TxnType\\\"] == \\\"Payment\\\":\n                self._save_payment(invoice)\n            elif invoice[\\\"TxnType\\\"] == \\\"VendorCredit\\\":\n                self._save_vendor_credit(invoice)\n            elif invoice[\\\"TxnType\\\"] == \\\"SalesReceipt\\\":\n                self._save_sales_receipt(invoice)\n            elif invoice[\\\"TxnType\\\"] == \\\"Purchase\\\":\n                self._save_purchase(invoice)\n            elif invoice[\\\"TxnType\\\"] == \\\"PurchaseOrder\\\":\n                self._save_purchase_order(invoice)\n            elif invoice[\\\"TxnType\\\"] == \\\"RefundReceipt\\\":\n                self._save_refund_receipt(invoice)\n            elif invoice[\\\"TxnType\\\"] == \\\"Estimate\\\":\n                self._save_estimate(invoice)\n            elif invoice[\\\"TxnType\\\\\" == \\\"SalesOrder\\\":\n                self._save_sales", "CodeBleu_score": 13.703970663281051}, {"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        if not frappe.db.exists(\n            {\n                \"doctype\": \"Sales Invoice\",\n                \"quickbooks_id\": invoice[\"Id\"],\n                \"company\": self.company,\n            }\n        ):\n            if invoice[\"TxnType\"] == \"Invoice\":\n                erpinvoice = frappe.get_doc(\n                    {\n                        \"doctype\": \"Sales Invoice\",\n                        \"quickbooks_id\": invoice[\"Id\"],\n                        \"company\": self.company,\n                        \"customer\": self._get_customer_name_by_id(\n                            invoice[\"CustomerRef\"][\"value\"]\n                        ),\n                        \"posting_date\": invoice[\"TxnDate\"],\n                        \"due_date\": invoice[\"DueDate\"],\n                        \"total_taxes_and_charges\": invoice[\"TotalTax\"],\n                        \"total_taxes\": invoice[\"TotalTax\"],\n                        \"total\": invoice[\"TotalAmt\"],\n                        \"payments\": [\n                            {\n                                \"company\": self.company,\n                                \"mode_of_payment\": self._get_mode_of_payment(\n                                    invoice[\"PaymentType\"]\n                                ),\n                                \"amount\": invoice[\"TotalAmt\"],\n                            }\n                        ],\n                        \"taxes\": [\n                            {\n                                \"company\": self.company,\n                                \"tax_amount\": invoice[\"TotalTax\"],\n                                \"account_head\": self._get_account_name_by_id(\n                                    invoice[\"SalesTaxCodeRef\"][\"value\"]\n                                ),\n                            }\n                        ],\n                        \"items\": [\n                            {\n                                \"company\": self.company,\n                                \"item_code\": self._get_item_name_by_id(\n                                    line[\"ItemRef\"][\"value\"]\n                                ),\n                                \"qty\": line[\"Qty\"],\n                                \"rate\": line[\"UnitPrice\"],\n                                \"amount\": line[\"LineAmount\"],\n                                \"description\": line[\"Description\"],\n                            }\n                            for line in invoice[\"Line\"]\n                        ],\n                    }\n                )\n                erpinvoice.insert()\n                if \"LinkedTxn\" in invoice:\n", "CodeBleu_score": 29.96772680294846}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    # Calculate the interval between visits\n    interval = date_diff(end_date, start_date) / no_of_visit\n        # Iterate to create the schedule\n        schedule_list = []\n        for i in range(no_of_visit):\n            schedule_date = add_days(start_date, interval * i)\n            # Adjust dates to avoid holidays\n            schedule_date = adjust_date_for_holidays(schedule_date, sales_person)\n            schedule_list.append(schedule_date)\n        return schedule_list\n\n", "CodeBleu_score": 23.950709482529515}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    from erpnext.maintenance.doctype.maintenance_schedule_detail.maintenance_schedule_detail import MaintenanceScheduleDetail\n    from erpnext.maintenance.doctype.maintenance_schedule_item.maintenance_schedule_item import MaintenanceScheduleItem\n\n    # Calculate the interval between visits\n    interval = (end_date - start_date).days / no_of_visit\n\n    # Create a list to store the schedule dates\n    schedule_dates = []\n\n    # Iterate to create the schedule\n    for i in range(no_of_visit):\n        # Calculate the scheduled date for this visit\n        scheduled_date = start_date + timedelta(days=i * interval)\n\n        # Adjust the scheduled date to avoid holidays\n        scheduled_date = self.adjust_date_to_avoid_holidays(scheduled_date, sales_person)\n\n        # Add the scheduled date to the list\n        schedule_dates.append(scheduled_date)\n\n    # Return the list of schedule dates\n    return schedule_dates\n\n", "CodeBleu_score": 34.94260959537702}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    days_in_period = {\\\"Weekly\\\": 7, \\\"Monthly\\\": 30, \\\"Quarterly\\\": 91, \\\"Half Yearly\\\": 182, \\\"Yearly\\\": 365}\n    if no_of_visit > 0:\n        interval = days_in_period[self.periodicity]\n        schedule_list = []\n        for i in range(no_of_visit):\n            schedule_list.append(start_date)\n            start_date = add_days(start_date, interval)\n        schedule_list = self.adjust_schedule_list(schedule_list, sales_person)\n        return schedule_list\n    else:\n        return []\n\n", "CodeBleu_score": 31.423375313343648}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t    $method = request()->method();\n    $path = request()->path();\n    $handle = request()->route()->getName();\n\n    $url = route('bulk-actions.action', [\n        'method' => $method,\n        'path' => $path,\n        'handle' => $handle,\n    ]);\n\n    $html = view($view, $data)->render();\n\n    return response()->json([\n        'success' => true,\n        'message' => trans('bulk_actions.success.general'),\n        'data' => [\n            'title' => trans('bulk_actions.title'),\n            'path' => $path,\n            'handle' => $handle,\n            'html' => $html,\n        ],\n    ]);\n}", "CodeBleu_score": 49.276476106514764}, {"code": "<?\n   public function response($view, $data = []){\n\t    // Determine the method to handle the request\n    $method = request()->method();\n\n    // Construct a URL for bulk actions\n    $url = route('bulk-actions.action', ['model' => $this->model, 'action' => 'enable']);\n\n    // Render HTML content for a modal using the specified view and data\n    $html = view($view, $data)->render();\n\n    // Return a JSON response with success status, message, data, and the rendered HTML\n    return response()->json([\n        'success' => true,\n        'message' => __('bulk_actions.success.general'),\n        'data' => [\n            'title' => __('general.title.bulk_actions'),\n            'path' => $url,\n            'handle' => 'bulk-actions',\n            'html' => $html,\n        ],\n    ]);\n}", "CodeBleu_score": 44.037451552067246}, {"code": "<?\n   public function response($view, $data = []){\n\t    // Determine the method to handle the request\n    $method = request()->method();\n\n    // Construct the URL for bulk actions\n    $url = route('common.bulk-actions.action', ['code' => $this->code, 'model' => $this->model]);\n\n    // Render HTML content for a modal using the specified view and data\n    $html = view($view, $data)->render();\n\n    // Return the response with success status, message, data, and the rendered HTML\n    return response()->json([\n        'success' => true,\n        'message' => __('bulk_actions.success.general'),\n        'data' => [\n            'title' => __('bulk_actions.title', ['action' => $this->code]),\n            'path' => $url,\n            'handle' => $this->code,\n            'html' => $html,\n        ],\n    ]);\n}", "CodeBleu_score": 45.12722307617541}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t    $contacts = $this->getSelectedRecords($request, 'user');\n\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 97.64664368128642}, {"code": "<?\npublic function deleteContacts($request){\n\t    $contacts = $this->getSelectedRecords($request, 'user');\n\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 97.64664368128642}, {"code": "<?\npublic function deleteContacts($request){\n\t    $contacts = $this->getSelectedRecords($request, 'user');\n\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 97.64664368128642}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getSelectedRecords($request, 'contact');\n\n    foreach ($transactions as $transaction) {\n        try {\n            $this->dispatch(new DeleteTransaction($transaction));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 94.21460109242368}, {"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getSelectedRecords($request, 'user');\n\n    foreach ($transactions as $transaction) {\n        try {\n            $this->dispatch(new DeleteTransaction($transaction));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 91.3355978575138}, {"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getSelectedRecords($request);\n\n    foreach ($transactions as $transaction) {\n        try {\n            $this->dispatch(new DeleteTransaction($transaction));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 77.51133095308249}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t    $request_class = $this->request_class;\n    if ($request_class && is_subclass_of($request_class, FormRequest::class)) {\n        $request = new $request_class();\n\n        foreach ($this->rows as $row) {\n            $request->initialize($row);\n            $rules = $request->rules();\n            $rules = $this->prepareRules($rules);\n\n            try {\n                $validator->validate($row, $rules);\n            } catch (ValidationException $e) {\n                $validator->errors()->merge($e->errors());\n                throw $e;\n            }\n        }\n    }\n}", "CodeBleu_score": 36.857260846366074}, {"code": "<?\npublic function withValidator($validator){\n\t    $request = $this->getRequest();\n\n    if ($request === null || !$request instanceof FormRequest) {\n        return;\n    }\n\n    foreach ($this->toArray() as $row) {\n        $request->prepareForValidation();\n        $request->merge($row);\n\n        $rules = $request->rules();\n\n        if (method_exists($request, 'prepareRules')) {\n            $rules = $request->prepareRules($rules);\n        }\n\n        try {\n            $validator->validate();\n        } catch (ValidationException $e) {\n            $validator->errors()->merge($e->errors());\n            throw $e;\n        }\n    }\n}", "CodeBleu_score": 36.434139783558926}, {"code": "<?\npublic function withValidator($validator){\n\t    $request_class = $this->request_class;\n    if (!$request_class || !is_a($request_class, FormRequest::class)) {\n        return;\n    }\n\n    foreach ($this->rows() as $row) {\n        $request = new $request_class($row);\n        $rules = $this->prepareRules($request->rules());\n\n        try {\n            $validator->validate();\n        } catch (ValidationException $e) {\n            $validator->errors()->merge($e->errors());\n            throw $e;\n        }\n    }\n}", "CodeBleu_score": 37.38355140898133}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if (! $this instanceof ShouldUpdate) {\n        return;\n    }\n\n    $model = $this->getModelInstance($arguments[0]);\n    if ($model instanceof Model) {\n        $this->model = $model;\n    }\n\n    $request = $this->getRequestInstance($arguments[1]);\n    if ($request instanceof Request) {\n        $this->request = $request;\n    }\n}", "CodeBleu_score": 69.22212950574497}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if (! $this instanceof ShouldUpdate) {\n        return;\n    }\n\n    $model = $this->getModelInstance($arguments[0]);\n    if ($model instanceof Model) {\n        $this->model = $model;\n    }\n\n    $request = $this->getRequestInstance($arguments[1]);\n    if ($request instanceof Request) {\n        $this->request = $request;\n    }\n\n    if ($this instanceof HasOwner) {\n        $this->setOwner();\n    }\n\n    if ($this instanceof HasSource) {\n        $this->setSource();\n    }\n}", "CodeBleu_score": 62.82440931277225}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if (! $this instanceof ShouldUpdate) {\n        return;\n    }\n\n    $model = $this->getModelInstance($arguments[0]);\n    if ($model instanceof Model) {\n        $this->model = $model;\n    }\n\n    $request = $this->getRequestInstance($arguments[1]);\n    if ($request instanceof Request) {\n        $this->request = $request;\n    }\n}", "CodeBleu_score": 69.22212950574497}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    $search = request('search');\n    $limit = request('limit', setting('default.list_limit', '25'));\n\n    if ($search) {\n        event(new SearchStringApplying($this));\n        $query->search($search);\n        event(new SearchStringApplied($this));\n    }\n\n    if ($sort) {\n        $query->orderBy($sort);\n    }\n\n    if (request()->expectsJson() && !request()->is('api/*')) {\n        return $query->get();\n    }\n\n    return $query->paginate($limit);\n}", "CodeBleu_score": 44.920442341049245}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    if (request()->filled('search')) {\n        event(new SearchStringApplying($query));\n        $query->where($this->qualifyColumn('name'), 'like', '%' . request('search') . '%');\n        event(new SearchStringApplied($query));\n    }\n\n    $query->orderBy($sort, 'desc');\n\n    if (request()->expectsJson() && !request()->is('api/*')) {\n        return $query->get();\n    }\n\n    return $query->paginate(request('limit', setting('default.list_limit', '25')));\n}", "CodeBleu_score": 34.614241149447736}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    // Get the sorting parameter from the request\n    $sort = request('sort', $sort);\n\n    // Apply search and sorting to the query\n    $query = $this->scopeSearch($query, request('search'));\n    $query = $this->scopeSort($query, $sort);\n\n    // Check if the request expects a JSON response and is not an API request\n    if (request()->expectsJson() && !request()->is('api/*')) {\n        // Return all records\n        return $query->get();\n    }\n\n    // Paginate the results based on a limit from the request or a default setting\n    return $query->paginate(request('limit', setting('default.list_limit', '25')));\n}", "CodeBleu_score": 48.52490953260863}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $open_amount = $overdue_amount = $paid_amount = 0;\n\n    if ($model->status == 'paid') {\n        return [$open_amount, $overdue_amount, $paid_amount];\n    }\n\n    if ($model->status == 'partial') {\n        $paid_amount = (float) $model->transactions()->paid()->sum('amount');\n    }\n\n    $due_at = Date::parse($model->due_at);\n\n    if ($due_at->isFuture()) {\n        $open_amount = (float) $model->amount - $paid_amount;\n    } else {\n        $overdue_amount = (float) $model->amount - $paid_amount;\n    }\n\n    return [$open_amount, $overdue_amount, $paid_amount];\n}", "CodeBleu_score": 48.69683041017549}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $open_amount = 0;\n    $overdue_amount = 0;\n\n    if ($model->status === 'paid') {\n        return [$open_amount, $overdue_amount];\n    }\n\n    if ($model->status === 'partial') {\n        $open_amount = $model->transactions()->where('status', 'paid')->sum('amount');\n    }\n\n    $due_date = Date::parse($model->due_at);\n    $now = Date::now();\n\n    if ($due_date->lessThan($now)) {\n        $overdue_amount = $model->amount - $open_amount;\n    } else {\n        $open_amount = $model->amount - $open_amount;\n    }\n\n    return [$open_amount, $overdue_amount];\n}", "CodeBleu_score": 50.96932940859173}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $open_amount = 0;\n    $overdue_amount = 0;\n\n    if ($model->status == 'paid') {\n        return [$open_amount, $overdue_amount];\n    }\n\n    if ($model->status == 'partial') {\n        $open_amount = (double) $model->transactions()->sum('amount');\n    }\n\n    if ($model->status == 'draft' || $model->status == 'sent') {\n        $open_amount = (double) $model->amount;\n    }\n\n    if ($model->due_at && $model->due_at->isPast()) {\n        $overdue_amount = (double) $open_amount;\n        $open_amount = 0;\n    }\n\n    return [$open_amount, $overdue_amount];\n}", "CodeBleu_score": 50.26037619893664}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $total = $this->toBase()->getCountForPagination();\n\n    $results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 85.79727650177529}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $total = $this->toBase()->getCountForPagination();\n\n    $results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 79.87473038260035}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $total = $this->toBase()->getCountForPagination();\n\n    $results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n\n    return new LengthAwarePaginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 82.85363412652038}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t    if (! $this->canExecuteAction($request, 'reconcile')) {\n        return;\n    }\n\n    // Get the selected reconciliations\n    $reconciliations = Reconciliation::whereIn('id', $request->get('ids'))->get();\n\n    // Loop through each reconciliation and process it\n    foreach ($reconciliations as $reconciliation) {\n        // Start a database transaction\n        \\DB::beginTransaction();\n\n        // Set the reconciliation's status to reconciled\n        $reconciliation->status = 'reconciled';\n        $reconciliation->save();\n\n        // Mark all related transactions within the reconciliation's date range and account ID as reconciled\n        Transaction::where('account_id', $reconciliation->account_id)\n            ->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])\n            ->update(['reconciled' => true]);\n\n        // Commit the database transaction\n        \\DB::commit();\n    }\n\n    // Redirect back to the listing page with a success message\n    return $this->redirect($request, 'reconciliations.reconcile_selected');\n}", "CodeBleu_score": 45.55787076666325}, {"code": "<?\npublic function reconcile($request){\n\t    \\DB::transaction(function () use ($request) {\n        $reconciliations = Reconciliation::whereIn('id', $request->get('ids'))->get();\n\n        foreach ($reconciliations as $reconciliation) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n\n            Transaction::where('account_id', $reconciliation->account_id)\n                ->where('paid_at', '>=', $reconciliation->started_at)\n                ->where('paid_at', '<=', $reconciliation->ended_at)\n                ->update(['reconciled' => true]);\n        }\n    });\n}", "CodeBleu_score": 47.11382870920707}, {"code": "<?\npublic function reconcile($request){\n\t    if (empty($request['ids'])) {\n        return;\n    }\n\n    $reconciliations = Reconciliation::whereIn('id', $request['ids'])->get();\n\n    foreach ($reconciliations as $reconciliation) {\n        \\DB::transaction(function () use ($reconciliation) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n\n            $transactions = Transaction::where('account_id', $reconciliation->account_id)\n                ->whereDate('paid_at', '>=', $reconciliation->started_at)\n                ->whereDate('paid_at', '<=', $reconciliation->ended_at)\n                ->get();\n\n            foreach ($transactions as $transaction) {\n                $transaction->reconciled = true;\n                $transaction->save();\n            }\n        });\n    }\n}", "CodeBleu_score": 48.93507177881763}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t    // Delete existing invitations\n    $this->deleteExistingInvitations();\n\n    // Create new invitation\n    $invitation = $this->createInvitation();\n\n    // Notify user\n    try {\n        $this->notifyUser($invitation);\n    } catch (TransportException $e) {\n        throw new Exception(trans('exceptions.notifications.error', ['error' => $e->getMessage()]));\n    }\n\n    return $invitation;\n}", "CodeBleu_score": 17.95705711532311}, {"code": "<?\npublic function handle(): UserInvitation{\n\t    \\DB::transaction(function () {\n        $this->deleteExistingInvitations();\n\n        $this->invitation = $this->createInvitation();\n\n        try {\n            $this->dispatch(new Notification($this->invitation));\n        } catch (TransportException $e) {\n            throw new Exception(trans('exceptions.notifications.error', ['error' => $e->getMessage()]));\n        }\n    });\n\n    return $this->invitation;\n}", "CodeBleu_score": 27.468278344041536}, {"code": "<?\npublic function handle(): UserInvitation{\n\t    $this->deleteExistingInvitations();\n\n    $invitation = UserInvitation::create([\n        'company_id' => $this->user->company_id,\n        'user_id' => $this->user->id,\n        'email' => $this->user->email,\n        'token' => Str::random(64),\n    ]);\n\n    try {\n        $this->dispatch(new Notification($invitation));\n    } catch (TransportException $e) {\n        throw new Exception(trans('exceptions.messages.error.email_not_sent', ['email' => $invitation->email]));\n    }\n\n    return $invitation;\n}", "CodeBleu_score": 34.21480610789944}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\t    if ($this->model->reconciled) {\n        throw new \\Exception(trans('exceptions.banking.transactions.reconciled'));\n    }\n\n    if ($this->model->type == Transaction::TRANSFER_TYPE) {\n        throw new \\Exception(trans('exceptions.banking.transactions.transfer'));\n    }\n}", "CodeBleu_score": 32.67372873900104}, {"code": "<?\npublic function authorize(): void{\n\t    if ($this->model->reconciled) {\n        throw new \\Exception('This transaction has been reconciled and can\\'t be edited.');\n    }\n\n    if ($this->model->type == Transaction::TRANSFER_TYPE) {\n        throw new \\Exception('This transaction is a transfer and can\\'t be edited.');\n    }\n}", "CodeBleu_score": 27.653277868333348}, {"code": "<?\npublic function authorize(): void{\n\t    if ($this->model->reconciled) {\n        throw new \\Exception(trans('exceptions.banking.transactions.reconciled'));\n    }\n\n    if ($this->model->type == Transaction::TRANSFER_TYPE) {\n        throw new \\Exception(trans('exceptions.banking.transactions.transfer'));\n    }\n}", "CodeBleu_score": 32.67372873900104}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t    if (Tools.getTenantIdByToken(request.getHeader(\\\"X-Access-Token\\\"))==0L) {\n                    return false;\n                } else {\n                    return true;\n                }\n            }", "CodeBleu_score": 6.588530589942818}, {"code": "public boolean doTableFilter(String tableName){\n\t    if (tableName.equals(\\\"user\\\") || tableName.equals(\\\"role\\\") || tableName.equals(\\\"permission\\\") || tableName.equals(\\\"tenant\\\") || tableName.equals(\\\"tenant_user\\\") || tableName.equals(\\\"tenant_role\\\") || tableName.equals(\\\"tenant_permission\\\")) {\n                    return true;\n                }\n                return false;\n            }", "CodeBleu_score": 15.3403381852536}, {"code": "public boolean doTableFilter(String tableName){\n\t    if (tableName.equalsIgnoreCase(\\\"sys_user\\\")) {\n                    return true;\n                }\n                return false;\n            }", "CodeBleu_score": 3.2964897610202533}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.2955715722213}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.2955715722213}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer scannerConfigurer = new MapperScannerConfigurer();\n    scannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return scannerConfigurer;\n}", "CodeBleu_score": 99.69420714478667}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    try {\n            List<Account> accountList = accountService.findAll();\n            JSONArray jsonArray = new JSONArray();\n            for (Account account : accountList) {\n                JSONObject jsonObject = new JSONObject();\n                jsonObject.put(\\\"id\\\", account.getId());\n                jsonObject.put(\\\"name\\\", account.getName());\n                jsonArray.add(jsonObject);\n            }\n            return returnJson(ErpInfo.SUCCESS, jsonArray);\n        } catch (Exception e) {\n            logger.error(\\\"\u67e5\u627e\u7ed3\u7b97\u8d26\u6237\u4fe1\u606f-\u4e0b\u62c9\u6846\\\", e);\n            return returnJson(ErpInfo.FAILURE, \\\"\u67e5\u627e\u7ed3\u7b97\u8d26\u6237\u4fe1\u606f-\u4e0b\u62c9\u6846\\\");\n        }\n    }", "CodeBleu_score": 44.52139755861205}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    List<Account> list = accountService.findBySelect();\n    JSONArray jsonArray = new JSONArray();\n    for (Account account : list) {\n        JSONObject jsonObject = new JSONObject();\n        jsonObject.put(\\\"id\\\", account.getId());\n        jsonObject.put(\\\"name\\\", account.getName());\n        jsonArray.add(jsonObject);\n    }\n    return returnJson(jsonArray);\n}", "CodeBleu_score": 31.724252949919567}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    try {\n            List<Account> accountList = accountService.findBySelect();\n            JSONArray jsonArray = new JSONArray();\n            for (Account account : accountList) {\n                JSONObject jsonObject = new JSONObject();\n                jsonObject.put(\\\"id\\\", account.getId());\n                jsonObject.put(\\\"name\\\", account.getName());\n                jsonArray.add(jsonObject);\n            }\n            return jsonArray.toString();\n        } catch (Exception e) {\n            logger.error(\\\"\u67e5\u627e\u7ed3\u7b97\u8d26\u6237\u4fe1\u606f-\u4e0b\u62c9\u6846\u5931\u8d25\\\", e);\n            return returnJson(ErpInfo.FAILURE, \\\"\u67e5\u627e\u7ed3\u7b97\u8d26\u6237\u4fe1\u606f-\u4e0b\u62c9\u6846\u5931\u8d25\\\");\n        }\n    }", "CodeBleu_score": 44.270751292002416}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t     BaseResponseInfo res = new BaseResponseInfo();\n     Map<String, Object> map = new HashMap<String, Object>();\n     try {\n         List<AccountVo4List> dataList = accountService.listWithBalance(name, serialNo, (currentPage - 1) * pageSize, pageSize);\n         int total = accountService.listWithBalanceCount(name, serialNo);\n         map.put(\"total\", total);\n         //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n         JSONArray dataArray = new JSONArray();\n         if (null != dataList) {\n             for (AccountVo4List aEx : dataList) {\n                 dataArray.add(aEx);\n             }\n         }\n         map.put(\"rows\", dataArray);\n         res.code = 200;\n         res.data = map;\n     } catch (Exception e) {\n         logger.error(e.getMessage(), e);\n         res.code = 500;\n         res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n     }\n     return res;\n }", "CodeBleu_score": 61.05205392637543}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        Map<String, Object> map = new HashMap<String, Object>();\n        try {\n            List<AccountVo4List> dataList = accountService.listWithBalance(name, serialNo, (currentPage - 1) * pageSize, pageSize);\n            int total = accountService.listWithBalanceCount(name, serialNo);\n            map.put(\"total\", total);\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataList) {\n                for (AccountVo4List aEx : dataList) {\n                    dataArray.add(aEx);\n                }\n            }\n            map.put(\"rows\", dataArray);\n            res.code = 200;\n            res.data = map;\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 59.840984483213376}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        Map<String, Object> map = new HashMap<String, Object>();\n        try {\n            List<AccountVo4List> dataList = accountService.listWithBalance(name, serialNo, (currentPage-1)*pageSize, pageSize);\n            int total = accountService.listWithBalanceCount(name, serialNo);\n            map.put(\"total\", total);\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataList) {\n                for (AccountVo4List account : dataList) {\n                    dataArray.add(account);\n                }\n            }\n            map.put(\"rows\", dataArray);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e) {\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 61.82081548672718}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        Map<String, Object> map = new HashMap<>();\n        List<AccountVo4Statistics> list = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n        map.put(\"list\", list);\n        res.code = 200;\n        res.data = map;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 75.86526423003279}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        Map<String, Object> map = new HashMap<>();\n        List<AccountVo4Statistics> list = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n        map.put(\"rows\", list);\n        res.code = 200;\n        res.data = map;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 78.86997821206234}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        Map<String, Object> map = new HashMap<>();\n        List<AccountVo4Statistics> list = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n        map.put(\"rows\", list);\n        res.code = 200;\n        res.data = map;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 75.86526423003279}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            Map<String, Object> objectMap = new HashMap<>();\n            AccountHeadVo4ListEx accountHeadVo4ListEx = accountHeadService.getDetailByNumber(billNo);\n            objectMap.put(BusinessConstants.DATA, accountHeadVo4ListEx);\n            response.setData(objectMap);\n            response.setCode(200);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n            response.setCode(500);\n            response.setMsg(e.getMessage());\n        }\n        return response;\n    }", "CodeBleu_score": 43.14440969042514}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t     BaseResponseInfo response = new BaseResponseInfo();\n     try {\n         List<AccountHeadVo4ListEx> details = accountHeadService.getDetailByNumber(billNo);\n         if (details != null && details.size() > 0) {\n             response.setStatus(200);\n             response.setData(details.get(0));\n         } else {\n             response.setStatus(200);\n         }\n     } catch (Exception e) {\n         logger.error(e.getMessage());\n         response.setStatus(500);\n         response.setMessage(\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\");\n     }\n     return response;\n }", "CodeBleu_score": 39.17104483466466}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t     BaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n     try {\n         AccountHeadVo4ListEx accountHeadVo4ListEx = accountHeadService.getDetailByNumber(billNo);\n         if (accountHeadVo4ListEx != null) {\n             baseResponseInfo.setInfo(accountHeadVo4ListEx);\n             baseResponseInfo.setCode(BusinessConstants.OK);\n         }\n     } catch (Exception e) {\n         logger.error(e.getMessage());\n         baseResponseInfo.setCode(BusinessConstants.ERROR);\n         baseResponseInfo.setMsg(e.getMessage());\n     }\n     return baseResponseInfo;\n }", "CodeBleu_score": 38.552249958773466}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<Depot> depotList = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = depotList;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 89.14400550582621}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<Depot> dataList = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = dataList;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 89.33466238583225}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<Depot> depotList = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = depotList;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 89.14400550582621}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray dataArray = new JSONArray();\n    JSONObject jsonObject = new JSONObject();\n    try {\n        List<Function> functionList = functionService.getRoleFunction(type, keyId);\n        List<Function> functionListFilter = new ArrayList<>();\n        // \u975e\u7ba1\u7406\u5458\u7528\u6237\uff0c\u8fc7\u6ee4\u6389\u7cfb\u7edf\u7ba1\u7406\n        if (!Tools.isAdmin(request)) {\n            for (Function function : functionList) {\n                if (!function.getName().equals(\"\u7cfb\u7edf\u7ba1\u7406\")) {\n                    functionListFilter.add(function);\n                }\n            }\n        } else {\n            functionListFilter = functionList;\n        }\n        jsonObject.put(\"functionList\", functionListFilter);\n        dataArray.add(jsonObject);\n    } catch (Exception e) {\n        logger.error(\">>>>>>>>>>>>>>>>>>>>\u67e5\u627e\u5f02\u5e38\", e);\n    }\n    return dataArray;\n}", "CodeBleu_score": 37.90692843957193}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray dataArray = new JSONArray();\n    try {\n        JSONObject data = new JSONObject();\n        List<Function> list = functionService.getRoleFunction(type, keyId);\n        JSONArray functionArray = new JSONArray();\n        for (Function function : list) {\n            if (function.getTenantId() != 0) {\n                if (request.getAttribute(\\\"tenantId\\\") != null) {\n                    if (function.getTenantId() != Long.parseLong(request.getAttribute(\\\"tenantId\\\").toString())) {\n                        continue;\n                    }\n                }\n            }\n            if (\\\"\u7cfb\u7edf\u7ba1\u7406\\\".equals(function.getName())) {\n                continue;\n            }\n            JSONObject functionItem = new JSONObject();\n            functionItem.put(\\\"id\\\", function.getId());\n            functionItem.put(\\\"text\\\", function.getName());\n            functionItem.put(\\\"icon\\\", function.getIcon());\n            functionItem.put(\\\"url\\\", function.getUrl());\n            functionItem.put(\\\"component\\\", function.getComponent());\n            functionArray.add(functionItem);\n        }\n        data.put(\\\"children\\\", functionArray);\n        dataArray.add(data);\n    } catch (DataAccessException e) {\n        logger.error(\\\">>>>>>>>>>>>>>>>>>\u67e5\u627e\u5f02\u5e38\\\", e);\n    }\n    return dataArray;\n}", "CodeBleu_score": 43.02564604947151}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    // Initialize a JSON array to store the data\n    JSONArray dataArray = new JSONArray();\n    // Fetch a list of functions based on the provided type and keyId\n    List<Function> dataList = functionService.getRoleFunction(type, keyId);\n    // Create a JSON object to represent the function list\n    JSONObject data = new JSONObject();\n    // Filter out \"\u7cfb\u7edf\u7ba1\u7406\" for non-admin users\n    List<Function> newList = new ArrayList<>();\n    if (!Tools.isAdmin(request)) {\n        for (Function function : dataList) {\n            if (function.getNumber().equals(\\\"systemManagement\\\")) {\n                continue;\n            }\n            newList.add(function);\n        }\n    } else {\n        newList = dataList;\n    }\n    // Add the filtered functions to the JSON array\n    data.put(\\\"data\\\", newList);\n    // Nest this array within the main JSON object\n    dataArray.add(data);\n    // Add the main JSON object to the JSON array\n    dataArray.add(data);\n    // Return the JSON array\n    return dataArray;\n}", "CodeBleu_score": 31.76255679616995}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t    BaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n    try {\n        PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n        baseResponseInfo.setCode(200);\n        baseResponseInfo.setData(platformConfig);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        baseResponseInfo.setCode(500);\n        baseResponseInfo.setMsg(e.getMessage());\n    }\n    return baseResponseInfo;\n}", "CodeBleu_score": 50.03390895065705}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t    BaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n    try {\n        PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n        baseResponseInfo.setCode(ErpInfo.OK.code);\n        baseResponseInfo.setData(platformConfig);\n    } catch(Exception e) {\n        logger.error(e.getMessage(), e);\n        baseResponseInfo.setCode(ErpInfo.ERROR.code);\n        baseResponseInfo.setMsg(ErpInfo.ERROR.name);\n    }\n    return baseResponseInfo;\n}", "CodeBleu_score": 51.683267185050994}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t    BaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n    try {\n        PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n        baseResponseInfo.setCode(200);\n        baseResponseInfo.setData(platformConfig);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        baseResponseInfo.setCode(500);\n        baseResponseInfo.setMsg(ErpInfo.ERROR.name);\n    }\n    return baseResponseInfo;\n}", "CodeBleu_score": 50.65621157855224}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList();\n        response.setCode(200);\n        response.setData(systemConfigList.get(0));\n    } catch (Exception e) {\n        logger.error(e.getMessage());\n        response.setCode(500);\n        response.setMsg(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 40.07679047341014}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n    try {\n        List<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList(request);\n        if (systemConfigList != null && systemConfigList.size() > 0) {\n            baseResponseInfo.setCode(200);\n            baseResponseInfo.setData(systemConfigList.get(0));\n        } else {\n            baseResponseInfo.setCode(500);\n            baseResponseInfo.setMessage(\\\"\u83b7\u53d6\u5931\u8d25\\\");\n        }\n    } catch (Exception e) {\n        logger.error(\\\"\u83b7\u53d6\u5f53\u524d\u79df\u6237\u7684\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\\\", e);\n        baseResponseInfo.setCode(500);\n        baseResponseInfo.setMessage(\\\"\u83b7\u53d6\u5931\u8d25\\\");\n    }\n    return baseResponseInfo;\n    }", "CodeBleu_score": 34.263096061923626}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList(request);\n        response.setCode(200);\n        response.setData(systemConfigList.get(0));\n    } catch (Exception e) {\n        logger.error(e.getMessage());\n        response.setCode(500);\n        response.setMsg(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 38.73549194207447}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        String businessPath = (String) request.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);\n        String path = request.getParameter(\"path\");\n        String fileName = request.getParameter(\"fileName\");\n        MultipartFile file = ((MultipartHttpServletRequest) request).getFile(\"file\");\n        if (file != null) {\n            String filePath = FileUtils.uploadFile(businessPath, path, fileName, file, fileUploadType);\n            if (StringUtil.isNotEmpty(filePath)) {\n                res.code = 200;\n                res.data = filePath;\n            } else {\n                res.code = 500;\n                res.data = \"\u4e0a\u4f20\u5931\u8d25\";\n            }\n        } else {\n            res.code = 500;\n            res.data = \"\u4e0a\u4f20\u5931\u8d25\";\n        }\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u4e0a\u4f20\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 56.73778253952499}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        String businessPath = request.getParameter(\"businessPath\");\n        MultipartFile file = ((MultipartHttpServletRequest) request).getFile(\"file\");\n        if (file == null) {\n            res.code = 500;\n            res.data = \"\u8bf7\u9009\u62e9\u4e0a\u4f20\u6587\u4ef6\";\n            return res;\n        }\n        if (file.getSize() == 0) {\n            res.code = 500;\n            res.data = \"\u6587\u4ef6\u5927\u5c0f\u4e3a0\";\n            return res;\n        }\n        if (file.getSize() > maxFileSize) {\n            res.code = 500;\n            res.data = \"\u6587\u4ef6\u5927\u5c0f\u8d85\u8fc7\u9650\u5236\";\n            return res;\n        }\n        if (StringUtil.isEmpty(businessPath)) {\n            res.code = 500;\n            res.data = \"\u8bf7\u9009\u62e9\u4e1a\u52a1\u7c7b\u578b\";\n            return res;\n        }\n        if (fileUploadType == 1) {\n            String fileName = FileUtils.saveFile(file, filePath + businessPath);\n            res.code = 200;\n            res.data = fileName;\n        } else if (fileUploadType == 2) {\n            String fileName = FileUtils.saveFileAliOss(file, businessPath);\n            res.code = 200;\n            res.data = fileName;\n        }\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u4e0a\u4f20\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 53.074667137495744}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t", "CodeBleu_score": 1.8642714310173143}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t    try {\n        String title = jsonObject.getString(\\\"title\\\");\n        String[] head = jsonObject.getJSONArray(\\\"head\\\").toArray(new String[0]);\n        String tip = jsonObject.getString(\\\"tip\\\");\n        List<JSONObject> dataList = jsonObject.getJSONArray(\\\"dataList\\\").toJavaList(JSONObject.class);\n        String fileName = systemConfigService.exportExcel(title, head, tip, dataList, response);\n        if (StringUtils.isNotEmpty(fileName)) {\n            response.setHeader(\\\"Content-Disposition\\\", \\\"attachment;filename=\\\" + fileName);\n            response.setContentType(\\\"application/octet-stream;charset=UTF-8\\\");\n            response.setCharacterEncoding(\\\"UTF-8\\\");\n            response.setHeader(\\\"Pragma\\\", \\\"no-cache\\\");\n            response.setHeader(\\\"Cache-Control\\\", \\\"no-cache\\\");\n            response.setDateHeader(\\\"Expires\\\", 0);\n            response.flushBuffer();\n        }\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n    }\n}", "CodeBleu_score": 37.27194844518556}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t     try {\n         String title = jsonObject.getString(\\\"title\\\");\n         List<String> head = jsonObject.getJSONArray(\\\"head\\\").toJavaList(String.class);\n         String tip = jsonObject.getString(\\\"tip\\\");\n         List<List<String>> data = jsonObject.getJSONArray(\\\"data\\\").toJavaList(List.class);\n         String fileName = jsonObject.getString(\\\"fileName\\\");\n         if(StringUtil.isEmpty(fileName)) {\n                fileName = \\\"\u5bfc\u51fa\u6570\u636e\\\";\n            }\n            response.setContentType(\\\"application/vnd.ms-excel\\\");\n            response.setCharacterEncoding(\\\"utf-8\\\");\n            response.setHeader(\\\"Content-disposition\\\", \\\"attachment;filename=\\\" + fileName + \\\".xls\\\");\n            response.flushBuffer();\n            excelService.exportExcel(response.getOutputStream(), title, head, tip, data);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 37.59621342920138}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t        try {\n            String title = jsonObject.getString(\\\"title\\\");\n            String head = jsonObject.getString(\\\"head\\\");\n            String tip = jsonObject.getString(\\\"tip\\\");\n            List<Map<String, Object>> dataList = jsonObject.getJSONArray(\\\"dataList\\\").toJavaList(Map.class);\n            response.setContentType(\\\"application/vnd.ms-excel\\\");\n            response.setCharacterEncoding(\\\"utf-8\\\");\n            response.setHeader(\\\"Content-disposition\\\", \\\"attachment;filename=\\\" + title + \\\".xls\\\");\n            OutputStream out = response.getOutputStream();\n            ExcelUtil.exportExcel(title, head, tip, dataList, out);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 38.548245462613465}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    int result = 0;\n    try {\n        Account account = JSONObject.toBean(obj, Account.class);\n        account.setInitialAmount(BigDecimal.ZERO);\n        account.setDefaultFlag(false);\n        if (accountMapper.countByPrimaryKey(account.getId()) == 0) {\n            account.setCreateTime(new Date());\n            account.setLastUpdateTime(new Date());\n            account.setCreateUser(userService.getCurrentUser(request));\n            account.setLastUpdateUser(userService.getCurrentUser(request));\n            account.setDeleteFlag(BusinessConstants.DELETE_FLAG_NOT_DELETED);\n            account.setEnabled(true);\n            if (accountMapper.selectCount(new AccountExample()) == 0) {\n                account.setDefaultFlag(true);\n            }\n            accountMapper.insertSelective(account);\n            logService.addAccountLog(account, LogType.ADD, request);\n            result = 1;\n        }\n    } catch (Exception e) {\n        JshException.createFail(logger, e);\n    }\n        return result;\n    }", "CodeBleu_score": 46.89460077373426}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    int result = 0;\n    try {\n        Account account = new Account();\n        account.setName(obj.getString(\\\"name\\\"));\n        account.setSerialNo(obj.getString(\\\"serialNo\\\"));\n        account.setRemark(obj.getString(\\\"remark\\\"));\n        account.setInitialAmount(obj.getBigDecimal(\\\"initialAmount\\\"));\n        account.setDefaultAccount(obj.getBoolean(\\\"defaultAccount\\\"));\n        account.setEnabled(obj.getBoolean(\\\"enabled\\\"));\n        account.setDeleteFlag(obj.getBoolean(\\\"deleteFlag\\\"));\n        account.setCreateTime(new Date());\n        account.setCreateUser(userService.getCurrentUser(request).getId());\n        account.setUpdateTime(new Date());\n        account.setUpdateUser(userService.getCurrentUser(request).getId());\n        if (account.getInitialAmount() == null) {\n            account.setInitialAmount(BigDecimal.ZERO);\n        }\n        if (account.getDefaultAccount()) {\n            AccountExample example = new AccountExample();\n            example.createCriteria().andDeleteFlagNotEqualTo(BusinessConstants.DELETE_FLAG_DELETED);\n            List<Account> list = accountMapper.selectByExample(example);\n            if (list != null && list.size() > 0) {\n                for (Account a : list) {\n                    a.setDefaultAccount(false);\n                    accountMapper.updateByPrimaryKeySelective(a);\n                }\n            }\n        }\n        account.setSort(accountMapperEx.getMaxSort());\n        accountMapper.insertSelective(account);\n        logService.saveLog(request, LogType.ADD_ACCOUNT, account.getId());\n        result = 1;\n            } catch (Exception e) {\n                JshException.createFail(logger, e);\n            }\n            return result;\n        }", "CodeBleu_score": 45.00549998891691}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    Account account = new Account();\n    try {\n        account.setName(obj.getString(\\\"name\\\"));\n        account.setSerialNo(obj.getString(\\\"serialNo\\\"));\n        account.setRemark(obj.getString(\\\"remark\\\"));\n        account.setSort(obj.getInt(\\\"sort\\\"));\n        account.setInitialAmount(new BigDecimal(obj.getString(\\\"initialAmount\\\")));\n        if (obj.has(\\\"defaultFlag\\\")) {\n            account.setDefaultFlag(obj.getBoolean(\\\"defaultFlag\\\"));\n        } else {\n            account.setDefaultFlag(false);\n        }\n        account.setEnabled(obj.getBoolean(\\\"enabled\\\"));\n        account.setCreateTime(new Date());\n        account.setCreateBy(userService.getCurrentUserId(request));\n        account.setDeleteFlag(false);\n        accountMapper.insertSelective(account);\n        logService.insertLog(BusinessConstants.LOG_TYPE_ACCOUNT, \\\"\u65b0\u589e\u8d26\u6237\\\", account.getId(), account.getName(), request);\n        return 1;\n        } catch (Exception e) {\n            JshException.insertFail(logger, e);\n            return 0;\n        }\n    }", "CodeBleu_score": 27.644370449332968}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    Long result = null;\n    try {\n        result = accountMapperEx.selectByConditionAccountCount(name, serialNo, null);\n    } catch (Exception e) {\n        JshException.readFail(logger, e);\n    }\n    return result;\n}", "CodeBleu_score": 76.17035695774693}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    Long count = null;\n    try {\n        count = accountMapperEx.selectByConditionAccountCount(name, serialNo, null);\n    } catch (Exception e) {\n        JshException.readFail(logger, e);\n    }\n    return count;\n}", "CodeBleu_score": 67.24009173126687}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    Long count = null;\n    try {\n        count = accountMapperEx.selectByConditionAccountCount(name, serialNo, null);\n    } catch (Exception e) {\n        JshException.readFail(logger, e);\n    }\n    return count;\n}", "CodeBleu_score": 67.24009173126687}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    int result =0;\n        try{\n            result=depotItemMapper.deleteByPrimaryKey(id);\n        }catch(Exception e){\n            JshException.readFail(logger, e);\n        }\n        return result;\n    }", "CodeBleu_score": 90.43525467134937}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    int result =0;\n        try{\n            result=depotItemMapper.deleteByPrimaryKey(id);\n        }catch(Exception e){\n            JshException.readFail(logger, e);\n        }\n        return result;\n    }", "CodeBleu_score": 90.43525467134937}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    int result =0;\n        try{\n            result=depotItemMapper.deleteByPrimaryKey(id);\n        }catch(Exception e){\n            JshException.readFail(logger, e);\n        }\n        return result;\n    }", "CodeBleu_score": 90.43525467134937}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\tCloseableHttpClient httpclient = HttpClients.createDefault();\n\ttry {\n\t\tString url = protocol + \\\"://\\\" + host + \\\":\\\" + port + \\\"/\\\" + projectName + \\\"/\\\" + nodeType + \\\"/\\\" + nodeKey;\n\t\tHttpGet httpget = new HttpGet(url);\n\t\tCloseableHttpResponse response = httpclient.execute(httpget);\n\t\ttry {\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tString responseString = EntityUtils.toString(entity);\n\t\t\tObjectMapper mapper = new ObjectMapper();\n\t\t\tMap<String, Object> map = mapper.readValue(responseString, Map.class);\n\t\t\tif (map.containsKey(\\\"key\\\")) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} finally {\n\t\t\tresponse.close();\n\t\t}\n\t} finally {\n\t\thttpclient.close();\n\t}\n}", "CodeBleu_score": 25.766657135720568}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t    CloseableHttpClient httpClient = HttpClients.createDefault();\n    String requestUrl = protocol + \\\"://\\\" + host + \\\":\\\" + port + \\\"/projects/\\\" + projectName + \\\"/nodes/\\\" + nodeType + \\\"/\\\" + nodeKey;\n    HttpGet httpGet = new HttpGet(requestUrl);\n    try {\n        CloseableHttpResponse response = httpClient.execute(httpGet);\n        HttpEntity entity = response.getEntity();\n        String responseString = EntityUtils.toString(entity, \\\"UTF-8\\\");\n        EntityUtils.consume(entity);\n        response.close();\n        ObjectMapper objectMapper = new ObjectMapper();\n        Map<String, Object> responseMap = objectMapper.readValue(responseString, Map.class);\n        if (responseMap.containsKey(\\\"key\\\")) {\n            return true;\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        try {\n            httpClient.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return false;\n}", "CodeBleu_score": 29.601094832836377}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t    CloseableHttpClient httpClient = HttpClients.createDefault();\n    try {\n        HttpGet request = new HttpGet(protocol + \\\"://\\\" + host + \\\":\\\" + port + \\\"/graph/project/\\\" + projectName + \\\"/addNode/\\\" + nodeType + \\\"/\\\" + nodeKey);\n        CloseableHttpResponse response = httpClient.execute(request);\n        try {\n            HttpEntity entity = response.getEntity();\n            if (entity != null) {\n                String result = EntityUtils.toString(entity);\n                if (result.contains(\\\"key\\\")) {\n                    return true;\n                }\n            }\n        } finally {\n            response.close();\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        try {\n            httpClient.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return false;\n}", "CodeBleu_score": 30.108223647463}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t    CloseableHttpClient httpClient = HttpClients.createDefault();\n    CloseableHttpResponse httpResponse = null;\n    try {\n        HttpHost host = new HttpHost(getHost(), getPort(), getProtocol());\n        HttpGet getRequest = new HttpGet(\n                \"/addEdge/\" + withProjectName(projectName) + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to);\n        httpResponse = httpClient.execute(host, getRequest);\n        HttpEntity entity = httpResponse.getEntity();\n        if (entity != null) {\n            ObjectMapper om = new ObjectMapper();\n            String result = EntityUtils.toString(entity);\n            Map map = om.readValue(result, Map.class);\n            if (map.get(\"key\") != null) {\n                return true;\n            }\n        }\n        return false;\n    } catch (Exception e) {\n        e.printStackTrace();\n        return false;\n    } finally {\n        close(httpClient, httpResponse);\n    }\n}", "CodeBleu_score": 91.11219732035526}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\tHttpHost host = new HttpHost(getHost(), getPort(), getProtocol());\n\t\tHttpGet getRequest = new HttpGet(\n\t\t\t\t\"/addEdge/\" + withProjectName(projectName) + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to);\n\t\thttpResponse = httpClient.execute(host, getRequest);\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tif (entity != null) {\n\t\t\tObjectMapper om = new ObjectMapper();\n\t\t\tString result = EntityUtils.toString(entity);\n\t\t\tMap map = om.readValue(result, Map.class);\n\t\t\tif (map.get(\"key\") != null) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n}", "CodeBleu_score": 92.58449896189353}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t    CloseableHttpClient httpClient = HttpClients.createDefault();\n    CloseableHttpResponse httpResponse = null;\n    try {\n        HttpHost host = new HttpHost(getHost(), getPort(), getProtocol());\n        HttpGet getRequest = new HttpGet(\n                \"/addEdge/\" + withProjectName(projectName) + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to);\n        httpResponse = httpClient.execute(host, getRequest);\n        HttpEntity entity = httpResponse.getEntity();\n        if (entity != null) {\n            ObjectMapper om = new ObjectMapper();\n            String result = EntityUtils.toString(entity);\n            Map map = om.readValue(result, Map.class);\n            if (map.get(\"key\") != null) {\n                return true;\n            }\n        }\n        return false;\n    } catch (Exception e) {\n        e.printStackTrace();\n        return false;\n    } finally {\n        close(httpClient, httpResponse);\n    }\n}", "CodeBleu_score": 91.11219732035526}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t    if (event == null || event.getMessage() == null) {\n            return;\n        }\n        if (event.getLocation() == null) {\n            event.setLocation(getTestLocation());\n        }\n        event.setEventTime(new Date());\n        String json = null;\n        try {\n            json = objectMapper.writeValueAsString(event);\n        } catch (JsonProcessingException e) {\n            e.printStackTrace();\n        }\n        String topic = event.getTarget() == null ? \\\"test\\\" : event.getTarget();\n        ProducerRecord<String, String> record = new ProducerRecord<>(topic, json);\n        producer.send(record);\n        producer.flush();\n    }", "CodeBleu_score": 43.9977805547908}, {"code": "public void sendEvent(Event event){\n\t    if (event == null || event.getMessage() == null) {\n            return;\n        }\n        if (event.getLocation() == null) {\n            event.setLocation(getTestingLocation());\n        }\n        event.setEventTime(new Date());\n        String jsonString = null;\n        try {\n            jsonString = objectMapper.writeValueAsString(event);\n        } catch (JsonProcessingException e) {\n            e.printStackTrace();\n        }\n        String topic = event.getTarget() == null ? \\\"test\\\" : event.getTarget();\n        ProducerRecord<String, String> record = new ProducerRecord<>(topic, jsonString);\n        producer.send(record);\n        producer.flush();\n    }", "CodeBleu_score": 44.64608649068682}, {"code": "public void sendEvent(Event event){\n\t    if (event == null || event.getMessage() == null) {\n            return;\n        }\n        if (event.getLocation() == null) {\n            event.setLocation(getTestLocation());\n        }\n        event.setTime(new Date());\n        String jsonString = null;\n        try {\n            jsonString = objectMapper.writeValueAsString(event);\n        } catch (JsonProcessingException e) {\n            e.printStackTrace();\n        }\n        String topic = event.getTarget() != null ? event.getTarget() : \\\"test\\\";\n        ProducerRecord<String, String> record = new ProducerRecord<>(topic, jsonString);\n        producer.send(record);\n        producer.flush();\n    }", "CodeBleu_score": 45.1228354730282}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t    // Initialize the OSS client\n    OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);\n\n    try {\n        // Upload the file content as an object\n        ossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n        // Get the URL of the uploaded object\n        String url = \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n\n        return url;\n    } catch (OSSException e) {\n        e.printStackTrace();\n    } finally {\n        // Shut down the OSS client\n        ossClient.shutdown();\n    }\n\n    return null;\n}", "CodeBleu_score": 35.07942566425402}, {"code": "public String upload(String objName, byte[] content){\n\t    // Initialize the OSS client with access credentials\n    OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);\n\n    // Upload the file content as an object with the specified name\n    ossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n    // Shut down the OSS client\n    ossClient.shutdown();\n\n    // Return the URL of the uploaded object\n    return \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 32.959339075780235}, {"code": "public String upload(String objName, byte[] content){\n\t    // Initialize the OSS client with access credentials\n    OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);\n\n    // Upload the file content as an object with the specified name\n    ossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n    // Shut down the OSS client\n    ossClient.shutdown();\n\n    // Return the URL of the uploaded object\n    return \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 32.959339075780235}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo();\n    }\n    return worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 27.089589997624515}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo();\n    }\n    return worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 27.089589997624515}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        LocationInfo result = new LocationInfo();\n        result.setIpAddress(ipAddress);\n        result.setMainInfo(\"unknown\");\n        result.setSubInfo(\"unknown\");\n        return result;\n    }\n    return worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 52.35826020400045}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t    if (lowLevelRestClient != null && highLevelRestClient != null) {\n        return;\n    }\n    synchronized (this) {\n        if (lowLevelRestClient != null && highLevelRestClient != null) {\n            return;\n        }\n        if (clusterHostList == null) {\n            throw new Exception(\\\"clusterHostList is not set.\\\");\n        }\n        List<HttpHost> httpHosts = new ArrayList<HttpHost>();\n        String[] hostList = clusterHostList.split(\\\",\\\");\n        for (String host : hostList) {\n            String[] hostPort = host.split(\\\":\\\");\n            httpHosts.add(new HttpHost(hostPort[0], Integer.parseInt(hostPort[1]), \\\"http\\\"));\n\n        }\n\n        lowLevelRestClient = RestClient.builder(httpHosts.toArray(new HttpHost[0])).build();\n\n        highLevelRestClient = new RestHighLevelClient(lowLevelRestClient);\n\n    }\n}", "CodeBleu_score": 59.55085556014437}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t    if (lowLevelRestClient == null && highLevelRestClient == null) {\n        synchronized (this) {\n            if (lowLevelRestClient == null && highLevelRestClient == null) {\n                // Parse the cluster hosts and ports\n                List<HttpHost> httpHosts = new ArrayList<>();\n                String[] hosts = clusterHostList.split(\",\");\n                for (String host : hosts) {\n                    String[] hostParts = host.split(\":\");\n                    String hostname = hostParts[0];\n                    int port = Integer.parseInt(hostParts[1]);\n                    httpHosts.add(new HttpHost(hostname, port));\n                }\n                // Build the low-level REST client\n                lowLevelRestClient = RestClient.builder(httpHosts.toArray(new HttpHost[0])).build();\n                // Build the high-level REST client\n                highLevelRestClient = new RestHighLevelClient(RestClient.builder(httpHosts.toArray(new HttpHost[0])));\n            }\n        }\n    }\n}", "CodeBleu_score": 46.67917134848562}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t    if (lowLevelRestClient == null && highLevelRestClient == null) {\n        synchronized (this) {\n            if (lowLevelRestClient == null && highLevelRestClient == null) {\n                String[] clusterHosts = clusterHostList.split(\",\");\n                List<HttpHost> httpHosts = new ArrayList<>();\n                for (String clusterHost : clusterHosts) {\n                    String[] hostAndPort = clusterHost.split(\":\");\n                    httpHosts.add(new HttpHost(hostAndPort[0], Integer.parseInt(hostAndPort[1]), \"http\"));\n                }\n                lowLevelRestClient = RestClient.builder(httpHosts.toArray(new HttpHost[0])).build();\n                highLevelRestClient = new RestHighLevelClient(lowLevelRestClient);\n            }\n        }\n    }\n}", "CodeBleu_score": 53.08648760887312}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<HttpHost>();\n    String[] hostArray = clusterHostList.split(\",\");\n    for (String host : hostArray) {\n        if (host.contains(\":\")) {\n            String[] hostPort = host.split(\":\");\n            hosts.add(new HttpHost(hostPort[0], Integer.parseInt(hostPort[1]), \"http\"));\n        } else {\n            hosts.add(new HttpHost(host, clusterPort, \"http\"));\n        }\n    }\n    return hosts;\n}", "CodeBleu_score": 44.49154618665847}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    String[] hosts = clusterHostList.split(\",\");\n    List<HttpHost> hostList = new ArrayList<>();\n    for (String host : hosts) {\n        if (host.contains(\":\")) {\n            String[] hostParts = host.split(\":\");\n            hostList.add(new HttpHost(hostParts[0], Integer.parseInt(hostParts[1]), \"http\"));\n        } else {\n            hostList.add(new HttpHost(host, clusterPort, \"http\"));\n        }\n    }\n    return hostList;\n}", "CodeBleu_score": 47.14274507353191}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tString[] hostPort = host.split(\":\");\n\t\tif (hostPort.length == 2) {\n\t\t\thosts.add(new HttpHost(hostPort[0], Integer.parseInt(hostPort[1]), \"http\"));\n\t\t} else {\n\t\t\thosts.add(new HttpHost(host, clusterPort, \"http\"));\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 45.64251133962938}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\t    Map<String, Object> task = taskQueue.poll(30, TimeUnit.SECONDS);\n    if (task != null) {\n        String taskType = (String) task.get(PARAM_TASK_TYPE);\n        if (TASK_PLAIN_TEXT_MESSAGE.equals(taskType)) {\n            String dest = (String) task.get(PARAM_RECIEVER_NUMBER);\n            String fromWho = (String) task.get(PARAM_FROM_WHO);\n            String template = (String) task.get(PARAM_MESSAGE_TEMPLATE);\n            Map<String, String> parameters = (Map<String, String>) task.get(PARAM_MESSAGE_DATA);\n            if (StringUtils.isBlank(dest)) {\n                log.error(\\\"recipient number is empty!\\\");\n                return;\n\n                if (StringUtils.isBlank(template)) {\n                    log.error(\\\"message template is empty!\\\");\n                    return;\n                }\n\n                if (parameters == null || parameters.isEmpty()) {\n                    log.error(\\\"message data is empty!\\\");\n                    return;\n                }\n\n                try {\n                    sendPlainTextMessage(dest, fromWho, template, parameters);\n                } catch (Exception e) {\n                    log.error(\\\"failed to send message\\\", e);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 51.21545745878444}, {"code": "protected void pollingWork() throws InterruptedException{\n\t    Map<String, Object> task = taskQueue.poll(30, TimeUnit.SECONDS);\n    if (task == null) {\n        return;\n    }\n\n    String taskType = (String) task.get(PARAM_TASK_TYPE);\n    if (TASK_PLAIN_TEXT_MESSAGE.equals(taskType)) {\n        String toNumber = (String) task.get(PARAM_RECIEVER_NUMBER);\n        String fromWho = (String) task.get(PARAM_FROM_WHO);\n        String template = (String) task.get(PARAM_MESSAGE_TEMPLATE);\n        Map<String, String> params = (Map<String, String>) task.get(PARAM_MESSAGE_DATA);\n\n        if (StringUtils.isBlank(toNumber) || StringUtils.isBlank(template)) {\n            return;\n        }\n\n        try {\n            String message = String.format(template, params.values().toArray());\n            smtpService.sendMessage(toNumber, fromWho, message);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}", "CodeBleu_score": 58.81367706546785}, {"code": "protected void pollingWork() throws InterruptedException{\n\t    Map<String, Object> task = taskQueue.poll(30, TimeUnit.SECONDS);\n    if (task != null) {\n        String taskType = (String) task.get(PARAM_TASK_TYPE);\n        if (TASK_PLAIN_TEXT_MESSAGE.equals(taskType)) {\n            String toNumber = (String) task.get(PARAM_RECIEVER_NUMBER);\n            String fromWho = (String) task.get(PARAM_FROM_WHO);\n            String template = (String) task.get(PARAM_MESSAGE_TEMPLATE);\n            Map<String, String> params = (Map<String, String>) task.get(PARAM_MESSAGE_DATA);\n            if (StringUtils.isBlank(toNumber)) {\n                logger.error(\\\"The recipient number is empty.\\\");\n                return;\n\n                }\n            if (StringUtils.isBlank(template)) {\n                logger.error(\\\"The message template is empty.\\\");\n                return;\n\n                }\n            if (params == null || params.isEmpty()) {\n                logger.error(\\\"The message data is empty.\\\");\n                return;\n\n                }\n            String message = generateMessage(template, params);\n            if (StringUtils.isBlank(message)) {\n                logger.error(\\\"The message is empty.\\\");\n                return;\n\n                }\n            try {\n\n                    smtpService.sendMessage(toNumber, fromWho, message);\n\n                } catch (Exception e) {\n\n                    logger.error(\\\"Failed to send message to \\\" + toNumber + \\\": \\\" + e.getMessage());\n\n                }\n\n            }\n\n        }\n\n    }", "CodeBleu_score": 53.03024004504668}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    CloseableHttpClient httpclient = getHttpClient();\n    HttpGet httpget = new HttpGet(uri);\n    CloseableHttpResponse response = null;\n    try {\n        response = httpclient.execute(httpget);\n        HttpEntity entity = response.getEntity();\n        if (entity != null) {\n            String content = EntityUtils.toString(entity, \\\"UTF-8\\\");\n            log.info(\\\"Response content: \\\" + content);\n            return content;\n        }\n    } catch (IOException e) {\n        log.error(\\\"Error occurred while executing HTTP GET request: \\\" + e.getMessage());\n    } finally {\n        if (response != null) {\n            response.close();\n        }\n    }\n    return null;\n}", "CodeBleu_score": 50.38838452374574}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    try (CloseableHttpClient httpClient = getHttpClient()) {\n        HttpGet httpGet = new HttpGet(uri);\n        CloseableHttpResponse response = httpClient.execute(httpGet);\n        try {\n            HttpEntity entity = response.getEntity();\n            String content = EntityUtils.toString(entity, \"UTF-8\");\n            System.out.println(\\\"Response content: \\\" + content);\n            return content;\n        } finally {\n            response.close();\n        }\n    }\n}", "CodeBleu_score": 55.075417900389226}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    HttpGet httpGet = new HttpGet(uri);\n    try (CloseableHttpResponse response = getHttpClient().execute(httpGet)) {\n        HttpEntity entity = response.getEntity();\n        if (entity != null) {\n            String content = EntityUtils.toString(entity, \"UTF-8\");\n            System.out.println(\\\"Response content: \\\" + content);\n            return content;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 45.994438666184564}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n    NodeList nodes = doc.getChildNodes();\n    Node node = nodes.item(0);\n    if (node.getNodeName().equalsIgnoreCase(TEXT)) {\n        node = node.getFirstChild();\n    }\n    return decodeNode(node, doTrim);\n}", "CodeBleu_score": 54.633735648810685}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    factory.setIgnoringElementContentWhitespace(true);\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n    NodeList nodeList = doc.getChildNodes();\n    Node root = nodeList.item(0);\n    return decodeNode(root, doTrim);\n}", "CodeBleu_score": 50.64559107428366}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n\n    NodeList rootNodes = doc.getChildNodes();\n    Node rootNode = rootNodes.item(0);\n\n    Object[] decodedRoot = decodeElement(rootNode, doTrim);\n\n    Map<String, Object> resultMap = new HashMap<>();\n    for (Object decodedObject : decodedRoot) {\n        if (decodedObject instanceof Map) {\n            resultMap.putAll((Map<String, Object>) decodedObject);\n        }\n    }\n\n    return resultMap;\n}", "CodeBleu_score": 60.04304912416713}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t    if (isAutoShipAndInvoiceEnabled()) {\n        if (orderRecord.isAutoShipAndInvoiceEligible()) {\n            logAutoShipAndInvoiceEnabled(orderRecord);\n            completeShipAndInvoiceEnqueuer.enqueue(orderRecord);\n        } else {\n            logAutoShipAndInvoiceDisabled(orderRecord);\n            enqueueCreateMissingShipmentSchedules(orderRecord);\n        }\n    } else {\n        logAutoShipAndInvoiceDisabled(orderRecord);\n        enqueueCreateMissingShipmentSchedules(orderRecord);\n    }\n}", "CodeBleu_score": 21.889471099341076}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t", "CodeBleu_score": 3.839633916411321}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t    if (isEligibleForAutoProcessing(orderRecord)) {\n        logger.info(\\\"Order {} is eligible for automatic processing, enqueuing for shipment and invoice generation\\\", orderRecord.getC_Order_ID());\n        completeShipAndInvoiceEnqueuer.enqueue(orderRecord.getC_Order_ID());\n    } else {\n        logger.info(\\\"Order {} is not eligible for automatic processing, checking if missing shipment schedules need to be created\\\", orderRecord.getC_Order_ID());\n        createMissingShipmentSchedules(orderRecord);\n    }\n}", "CodeBleu_score": 26.788570663991212}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n\n    if (! $user || ! Hash::check($request->password, $user->password)) {\n        event(new Failed('auth', $user, [\n            'email' => $request->email,\n            'password' => $request->password,\n        ]));\n\n        throw ValidationException::withMessages([\n            'email' => __('auth.failed'),\n        ]);\n    }\n\n    return $user;\n}", "CodeBleu_score": 47.95591442824237}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n\n    if ($user && $user->password && ! Hash::check($request->password, $user->password)) {\n        event(new Failed('auth', $user, [\n            'password' => [trans('auth.failed')],\n        ]));\n\n        throw ValidationException::withMessages([\n            'email' => [trans('auth.failed')],\n        ]);\n    }\n\n    return $user;\n}", "CodeBleu_score": 40.335384096661286}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n\n    if (! $user || ! Hash::check($request->password, $user->password)) {\n        event(new Failed($user, $request->has('remember')));\n\n        throw ValidationException::withMessages([\n            'email' => __('auth.failed'),\n        ]);\n    }\n\n    return $user;\n}", "CodeBleu_score": 48.60781136183585}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    if (! $this->limiter->tooManyAttempts($request)) {\n        $this->limiter->increment($request);\n    }\n\n    throw ValidationException::withMessages([\n        'email' => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 82.33083742771277}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        'email' => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 93.6680953024984}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        Fortify::username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 72.95533593440727}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t    $userId = $request->session()->get('two_factor.user_id');\n    $user = User::findOrFail($userId);\n\n    if ($user) {\n        $assertion = Webauthn::prepareAssertion($user);\n\n        $data = [\n            'two_factor_enabled' => !is_null($user->two_factor_secret),\n            'remember' => $request->session()->get('two_factor.remember', false),\n            'assertion' => $assertion,\n            'public_key' => $assertion->publicKey,\n        ];\n\n        return Inertia::render('TwoFactorChallenge', $data);\n    }\n}", "CodeBleu_score": 48.43039959303818}, {"code": "<?\npublic function toResponse($request){\n\t    return Inertia::render('TwoFactorChallenge', [\n        'twoFactorEnabled' => true,\n        'remember' => $request->session()->get('two_factor.remember', false),\n        'publicKey' => Webauthn::getPublicKey($request->session()->get('two_factor.user_id')),\n    ]);\n}", "CodeBleu_score": 21.77285363558016}, {"code": "<?\npublic function toResponse($request){\n\t    $userId = $request->session()->get('auth.two_factor.user_id');\n    $user = User::find($userId);\n\n    if ($user) {\n        $webauthn = Webauthn::prepareAssertion($user);\n        $data = [\n            'two_factor_enabled' => true,\n            'remember_me' => $request->session()->get('auth.two_factor.remember', false),\n            'public_key' => $webauthn->getPublicKey(),\n        ];\n    } else {\n        $data = [\n            'two_factor_enabled' => false,\n            'remember_me' => false,\n            'public_key' => null,\n        ];\n    }\n\n    return Inertia::render('TwoFactorChallenge', $data);\n}", "CodeBleu_score": 46.02605317008795}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    // Check if there is an existing user token for the given driver and socialite user ID\n    $userToken = UserToken::where('driver', $driver)->where('socialite_id', $socialite->getId())->first();\n\n    // If found, retrieve the associated user and verify the user association\n    if ($userToken) {\n        $user = $userToken->user;\n\n        if (! $user->hasVerifiedEmail()) {\n            throw ValidationException::withMessages(['email' => [trans('auth.socialite.email_not_verified')]]);\n        }\n\n        if (! $user->hasVerifiedPhone()) {\n            throw ValidationException::withMessages(['phone' => [trans('auth.socialite.phone_not_verified')]]);\n        }\n\n        if (! $user->hasVerifiedTwoFactor()) {\n            throw ValidationException::withMessages(['two_factor' => [trans('auth.socialite.two_factor_not_verified')]]);\n        }\n\n        if ($user->hasWebauthn()) {\n            throw ValidationException::withMessages(['webauthn' => [trans('auth.socialite.webauthn_not_verified')]]);\n        }\n\n        return $user;\n    }\n\n    // If not, create a new user or associate the socialite token with an existing user\n    if ($request->user()) {\n        return $this->associateUser($request->user(), $driver, $socialite);\n    }\n\n    return $this->createUser($driver, $socialite);\n}", "CodeBleu_score": 37.20823877725087}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    if ($userToken = UserToken::where('driver', $driver)->where('socialite_id', $socialite->getId())->first()) {\n        if ($userToken->user->email !== $socialite->getEmail()) {\n            throw ValidationException::withMessages([\n                'email' => [__('The provided credentials do not match our records.')],\n            ]);\n        }\n\n        if ($userToken->user->name !== $socialite->getName()) {\n            $userToken->user->name = $socialite->getName();\n            $userToken->user->save();\n        }\n\n        return $userToken->user;\n    }\n\n    if ($user = User::where('email', $socialite->getEmail())->first()) {\n        if ($user->tokens()->where('driver', $driver)->where('socialite_id', $socialite->getId())->exists()) {\n            throw ValidationException::withMessages([\n                'email' => [__('The provided credentials do not match our records.')],\n            ]);\n        }\n\n        $user->tokens()->create([\n            'driver' => $driver,\n            'socialite_id' => $socialite->getId(),\n            'socialite_token' => $socialite->token,\n            'socialite_refresh_token' => $socialite->refreshToken,\n            'socialite_expires_in' => $socialite->expiresIn,\n        ]);\n\n        return $user;\n    }\n\n    $user = CreateNewUser::fromSocialite($socialite);\n\n    $user->tokens()->create([\n        'driver' => $driver,\n        'socialite_id' => $socialite->getId(),\n        'socialite_token' => $socialite->token,\n        'socialite_refresh_token' => $socialite->refreshToken,\n        'socialite_expires_in' => $socialite->expiresIn,\n    ]);\n\n    event(new Registered($user));\n\n    return $user;\n}", "CodeBleu_score": 36.96960486668473}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t", "CodeBleu_score": 9.75609756097561}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $request->user();\n    if (! $user) {\n        return false;\n    }\n\n    $credentials = $this->filterCredentials($request);\n\n    if (! WebauthnFacade::validateAssertion($user, $credentials)) {\n        event(new Failed($user, $credentials, false));\n\n        $this->throwFailedAuthenticationException($request);\n\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 63.993476207289035}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    if ($this->guard->check()) {\n        return false;\n    }\n\n    $user = $request->user();\n\n    if (! $user) {\n        return false;\n    }\n\n    if (! WebauthnFacade::validateAssertion($user, $this->filterCredentials($request))) {\n        event(new Failed($user, $request));\n\n        $this->throwFailedAuthenticationException($request);\n\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 60.95330972121161}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    if (!$user = $request->user()) {\n        return false;\n    }\n\n    $credentials = $this->filterCredentials($request);\n\n    if (!WebauthnFacade::validateAssertion($credentials, $user)) {\n        event(new Failed('webauthn', $user, []));\n\n        $this->throwFailedAuthenticationException($request);\n\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 58.02143548065365}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\t    $email = $this->option('email');\n    if (empty($email)) {\n        $this->error('No email provided');\n\n        return null;\n    }\n\n    try {\n        return User::where('email', $email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error('User not found');\n\n        return null;\n    }\n}", "CodeBleu_score": 71.40764346920427}, {"code": "<?\nprivate function user(): ?User{\n\t    if (! $email = $this->option('email')) {\n        $this->error('No email provided');\n\n        return null;\n    }\n\n    try {\n        return User::where('email', $email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error('User not found');\n\n        return null;\n    }\n}", "CodeBleu_score": 71.33117038217063}, {"code": "<?\nprivate function user(): ?User{\n\t    $email = $this->option('email');\n    if ($email === null) {\n        $this->error('No email provided');\n\n        return null;\n    }\n\n    try {\n        $user = User::where('email', $email)->firstOrFail();\n\n        return $user;\n    } catch (ModelNotFoundException $e) {\n        $this->error('User not found');\n\n        return null;\n    }\n}", "CodeBleu_score": 66.8743541508272}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\t    if (config('scout.driver') !== '' && $this->option('flush')) {\n        $this->artisan('\u2610 Flushing indexes', 'scout:flush', ['--verbose' => true]);\n    }\n}", "CodeBleu_score": 21.986891976390577}, {"code": "<?\nprotected function scoutFlush(): void{\n\t    if (config('scout.driver') !== 'meilisearch' || ! $this->option('flush')) {\n        return;\n    }\n\n    $indexes = config('scout.meilisearch.indexes');\n\n    foreach ($indexes as $index => $settings) {\n        $table = explode('.', $index)[1];\n\n        $this->artisan('\u2610 Flushing index', $table, ['--verbose' => true]);\n    }\n\n    $this->line('\u2705 Indexes flushed.', OutputInterface::VERBOSITY_VERBOSE);\n}", "CodeBleu_score": 52.53143475044346}, {"code": "<?\nprotected function scoutFlush(): void{\n\t    if (config('scout.driver') === 'meilisearch' && config('scout.meilisearch.host') !== '' && $this->option('flush')) {\n        $this->artisan('\u2610 Flushing indexes on Meilisearch', 'scout:flush', ['--verbose' => true]);\n\n        foreach (config('scout.meilisearch.settings') as $index => $settings) {\n            $table = explode('.', $index)[1];\n\n            $this->artisan('scout:flush', [\n                'model' => config('scout.models')[$table] ?? null,\n                '--index' => $index,\n                '--force' => $this->option('force'),\n            ]);\n        }\n\n        $this->info('\u2714 Indexes have been flushed.');\n    }\n}", "CodeBleu_score": 51.240016451618416}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    // First, try to read an existing VCard from the resource, setting a UID if it is missing\n    $vcard = Reader::read($resource->vcard);\n    if (!$vcard->getProperty('UID')) {\n        $vcard->add('UID', uniqid());\n    }\n\n    // If reading fails or the VCard doesn't exist, create a new VCard with basic information\n    if (!$vcard) {\n        $vcard = new VCard();\n        $vcard->add('FN', $resource->first_name . ' ' . $resource->last_name);\n        $vcard->add('N', $resource->last_name . ';' . $resource->first_name);\n    }\n\n    // Apply a series of exporters to add more details to the VCard from the resource\n    foreach (self::exporters() as $exporter) {\n        $exporter->export($resource, $vcard);\n    }\n\n    return $vcard;\n}", "CodeBleu_score": 32.95166365001805}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t", "CodeBleu_score": 7.242990654205607}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    $vcard = null;\n\n    // read existing vcard\n    if ($resource->vcard) {\n        try {\n            $vcard = Reader::read($resource->vcard);\n        } catch (ParseException $e) {\n            // do nothing\n        }\n    }\n\n    // create new vcard\n    if (!$vcard) {\n        $vcard = new VCard();\n        $vcard->add('FN', $resource->first_name . ' ' . $resource->last_name);\n        $vcard->add('N', [$resource->last_name, $resource->first_name]);\n        $vcard->add('UID', $resource->id);\n    }\n\n    // apply exporters\n    foreach (self::getExporters() as $exporter) {\n        $exporter->export($vcard, $resource);\n    }\n\n    return $vcard;\n}", "CodeBleu_score": 41.20816447061929}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $object = $this->getObject($addressBookId, $cardUri);\n\n    if ($object instanceof Contact) {\n        Bus::dispatch(new DestroyContact($object));\n    } elseif ($object instanceof Group) {\n        Bus::dispatch(new DestroyGroup($object));\n    } else {\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 35.2182951498094}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $object = $this->getObject($addressBookId, $cardUri);\n    if ($object instanceof Contact) {\n        $job = new DestroyContact($object);\n    } elseif ($object instanceof Group) {\n        $job = new DestroyGroup($object);\n    } else {\n        return false;\n    }\n\n    Bus::batch([$job])\n        ->allowFailures()\n        ->onQueue('high')\n        ->dispatch();\n\n    return true;\n}", "CodeBleu_score": 41.74875076103838}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $object = $this->getObject($addressBookId, $cardUri);\n\n    if ($object instanceof Contact) {\n        Bus::batch([new DestroyContact($object)])\n            ->allowFailures()\n            ->onQueue('high')\n            ->dispatch();\n    } elseif ($object instanceof Group) {\n        Bus::batch([new DestroyGroup($object)])\n            ->allowFailures()\n            ->onQueue('high')\n            ->dispatch();\n    } else {\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 45.00913810113916}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\t    $file = $data['file'];\n\n    if (! $file) {\n        return;\n    }\n\n    $activity = $this->activityRepository->create([\n        'subject_type' => 'App\\Models\\File',\n        'subject_id' => null,\n        'description' => 'uploaded a file',\n        'user_type' => 'App\\Models\\User',\n        'user_id' => auth()->id(),\n        'properties' => json_encode([\n            'file_name' => $file->getClientOriginalName(),\n            'file_size' => $file->getSize(),\n            'file_type' => $file->getMimeType(),\n            'file_path' => $file->store('files'),\n        ]),\n    ]);\n\n    return $this->create([\n        'name' => $file->getClientOriginalName(),\n        'path' => $file->store('files'),\n        'activity_id' => $activity->id,\n    ]);\n}", "CodeBleu_score": 49.801549778147205}, {"code": "<?\npublic function upload(array $data){\n\t    if (! isset($data['file'])) {\n        return;\n    }\n\n    $activity = $this->activityRepository->create([\n        'type' => 'file',\n        'description' => $data['description'],\n        'user_id' => auth()->id(),\n        'lead_id' => $data['lead_id'],\n    ]);\n\n    return $activity->files()->create([\n        'name' => $data['file']->getClientOriginalName(),\n        'path' => $data['file']->store('leads/files'),\n    ]);\n}", "CodeBleu_score": 51.41993076187465}, {"code": "<?\npublic function upload(array $data){\n\t    if (! request()->hasFile('file')) {\n        return;\n    }\n\n    $activity = $this->activityRepository->create([\n        'type' => 'file',\n        'description' => __('admin::app.activities.uploaded-a-file'),\n        'user_id' => auth()->guard('user')->user()->id,\n        'lead_id' => $data['lead_id'],\n    ]);\n\n    $file = request()->file('file');\n\n    $path = $file->store('leads/' . $data['lead_id']);\n\n    return $this->create([\n        'name' => $file->getClientOriginalName(),\n        'path' => $path,\n        'activity_id' => $activity->id,\n    ]);\n}", "CodeBleu_score": 63.30173852124932}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if (request()->routeIs('admin*')) {\n        if ($exception instanceof ModelNotFoundException) {\n            return response()->view('admin::layouts.exception', ['message' => $this->jsonErrorMessages[404]], 404);\n        }\n\n        if ($exception instanceof PDOException) {\n            return response()->view('admin::layouts.exception', ['message' => $this->jsonErrorMessages[500]], 500);\n        }\n\n        if ($exception instanceof ParseError) {\n            return response()->view('admin::layouts.exception', ['message' => $this->jsonErrorMessages[500]], 500);\n        }\n\n        if ($exception instanceof HttpException) {\n            return response()->view('admin::layouts.exception', ['message' => $this->jsonErrorMessages[$exception->getStatusCode()]], $exception->getStatusCode());\n        }\n    } else {\n        if ($exception instanceof ModelNotFoundException) {\n            return redirect()->route('admin.session.index');\n        }\n\n        if ($exception instanceof PDOException) {\n            return redirect()->route('admin.session.index');\n        }\n\n        if ($exception instanceof ParseError) {\n            return redirect()->route('admin.session.index');\n        }\n\n        if ($exception instanceof HttpException) {\n            return response()->view('admin::layouts.exception', ['message' => $this->jsonErrorMessages[$exception->getStatusCode()]], $exception->getStatusCode());\n        }\n    }\n}", "CodeBleu_score": 32.66932686661616}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if ($this->isAdminRoute()) {\n        if ($exception instanceof ModelNotFoundException) {\n            return response()->view('admin::layouts.error', ['code' => 404], 404);\n        } elseif ($exception instanceof PDOException) {\n            return response()->view('admin::layouts.error', ['code' => 500], 500);\n        } elseif ($exception instanceof ParseError) {\n            return response()->view('admin::layouts.error', ['code' => 500], 500);\n        }\n    } else {\n        if ($exception instanceof HttpException) {\n            $statusCode = $exception->getStatusCode();\n        } else {\n            $statusCode = 500;\n        }\n\n        if ($statusCode == 404) {\n            return redirect()->route('admin.session.index');\n        }\n    }\n}", "CodeBleu_score": 42.691797601448336}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if (request()->is(\\'admin*\\') && ! request()->is(\\'admin/login*\\')) {\n        return redirect()->route(\\'admin.session.create\\');\n    }\n\n    if ($exception instanceof ModelNotFoundException) {\n        return response()->view(\\'admin::session.expired\\', [], 404);\n    }\n\n    if ($exception instanceof PDOException) {\n        return response()->view(\\'admin::session.expired\\', [], 500);\n    }\n\n    if ($exception instanceof ParseError) {\n        return response()->view(\\'admin::session.expired\\', [], 500);\n    }\n\n    if ($exception instanceof HttpException) {\n        return response()->view(\\'admin::session.expired\\', [], $exception->getStatusCode());\n    }\n}", "CodeBleu_score": 29.91701657126705}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json(['message' => $this->jsonErrorMessages[$statusCode]], $statusCode);\n    }\n\n    return response()->view('errors.' . $statusCode, [], $statusCode);\n}", "CodeBleu_score": 56.68819610501139}, {"code": "<?\nprivate function response($path, $statusCode){\n\t    $errorMessage = $this->jsonErrorMessages[$statusCode];\n\n    if (request()->expectsJson()) {\n        return response()->json(['message' => $errorMessage], $statusCode);\n    }\n\n    return response()->view($path . '.errors.' . $statusCode, ['message' => $errorMessage], $statusCode);\n}", "CodeBleu_score": 54.126564951393306}, {"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json(['message' => $this->jsonErrorMessages[$statusCode]], $statusCode);\n    }\n\n    return response()->view('admin::errors.' . $statusCode, [], $statusCode);\n}", "CodeBleu_score": 57.38991981292331}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t    $updated = 0;\n\n        foreach (request('rows') as $activityId) {\n            Event::dispatch('activity.update.before', $activityId);\n\n            $activity = $this->activityRepository->find($activityId);\n\n            $activity->update([\n                'is_done' => request('value')]);\n\n            Event::dispatch('activity.update.after', $activity);\n\n            $updated++;\n        }\n\n        if ($updated) {\n            return response()->json([\n                'message' => trans('admin::app.datagrid.mass-ops.update-success', ['resource' => 'Activity', 'count' => $updated])]);\n        } else {\n            return response()->json([\n                'error' => true,\n                'message' => trans('admin::app.datagrid.mass-ops.update-failed', ['resource' => 'Activity'])]);\n        }\n    }", "CodeBleu_score": 53.381328159735155}, {"code": "<?\npublic function massUpdate(){\n\t    $activityIds = explode(',', request()->get('indexes'));\n    $updated = 0;\n\n    foreach ($activityIds as $activityId) {\n        Event::dispatch('activity.update.before', $activityId);\n\n        $activity = $this->activityRepository->find($activityId);\n\n        $activity->update(['is_done' => request('is_done')]);\n\n        Event::dispatch('activity.update.after', $activity);\n\n        $updated++;\n    }\n\n    if ($updated) {\n        return response()->json([\n            'message' => trans('admin::app.response.update-success', ['name' => 'Activities']),\n        ]);\n    } else {\n        return response()->json([\n            'message' => trans('admin::app.response.update-failed', ['name' => 'Activities']),\n        ], 400);\n    }\n}", "CodeBleu_score": 61.13470836777019}, {"code": "<?\npublic function massUpdate(){\n\t    $count = 0;\n\n        foreach (request('rows') as $activityId) {\n            Event::dispatch('activity.update.before', $activityId);\n\n            $activity = $this->activityRepository->findOrFail($activityId);\n\n            $activity->update([\n                'is_done' => request('value'),\n            ]);\n\n            Event::dispatch('activity.update.after', $activity);\n\n            $count++;\n        }\n\n        if ($count) {\n            return response()->json(['message' => trans('admin::app.datagrid.mass-ops.success', ['resource' => 'activities', 'count' => $count])]);\n        } else {\n            return response()->json(['message' => trans('admin::app.datagrid.mass-ops.zero-rows-selected')], 400);\n        }\n    }", "CodeBleu_score": 57.31308575249039}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t    $count = 0;\n\n        $data = request()->all();\n\n        foreach (request('rows') as $activityId) {\n            Event::dispatch('activity.delete.before', $activityId);\n\n            $this->activityRepository->delete($activityId);\n\n            Event::dispatch('activity.delete.after', $activityId);\n\n            $count++;\n        }\n\n        if (! $count) {\n            return response()->json([\n                'message' => trans('admin::app.activities.mass-delete-failed'),\n            ], 400);\n        }\n\n        return response()->json([\n            'message' => trans('admin::app.activities.mass-delete-success'),\n        ]);\n    }", "CodeBleu_score": 48.781237702526646}, {"code": "<?\n public function massDestroy(){\n\t    $count = 0;\n\n        foreach (request('rows') as $activityId) {\n            Event::dispatch('activity.delete.before', $activityId);\n\n            $this->activityRepository->delete($activityId);\n\n            Event::dispatch('activity.delete.after', $activityId);\n\n            $count++;\n        }\n\n        if (! $count) {\n            return response()->json([\n                'message' => trans('admin::app.activities.mass-destroy-failed'),\n            ], 400);\n        }\n\n        return response()->json([\n            'message' => trans('admin::app.activities.mass-destroy-success'),\n        ]);\n    }", "CodeBleu_score": 49.739032097621184}, {"code": "<?\n public function massDestroy(){\n\t    $count = 0;\n\n        $data = request()->all();\n\n        foreach (request('rows') as $activityId) {\n            Event::dispatch('activity.delete.before', $activityId);\n\n            $this->activityRepository->delete($activityId);\n\n            Event::dispatch('activity.delete.after', $activityId);\n\n            $count++;\n        }\n\n        if (! $count) {\n            return response()->json([\n                'message' => trans('admin::app.activities.mass-destroy-failed'),\n            ], 400);\n        }\n\n        return response()->json([\n            'message' => trans('admin::app.activities.mass-destroy-success'),\n        ]);\n    }", "CodeBleu_score": 48.906831838063326}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t    $cards = $this->dashboardHelper->getCards();\n\n    foreach (request()->all() as $card) {\n        $cardIndex = array_search($card['name'], array_column($cards, 'name'));\n\n        if ($cardIndex !== false) {\n            $cards[$cardIndex]['selected'] = $card['selected'];\n        }\n    }\n\n    return response()->json($cards);\n}", "CodeBleu_score": 46.72175210072289}, {"code": "<?\n public function updateCards(){\n\t    $currentCards = $this->dashboardHelper->getCards();\n    $requestData = request()->all();\n\n    foreach ($requestData as $card) {\n        $cardId = $card['id'];\n        $cardIndex = array_search($cardId, array_column($currentCards, 'id'));\n\n        if ($cardIndex !== false) {\n            $currentCards[$cardIndex]['selected'] = $card['selected'];\n        }\n    }\n\n    return response()->json($currentCards);\n}", "CodeBleu_score": 47.23057210114796}, {"code": "<?\n public function updateCards(){\n\t    $cards = $this->dashboardHelper->getCards();\n    $requestCards = request()->all();\n\n    foreach ($requestCards as $requestCard) {\n        $card = collect($cards)->firstWhere('code', $requestCard['code']);\n\n        if ($card) {\n            $card['selected'] = $requestCard['selected'];\n        }\n    }\n\n    return response()->json($cards);\n}", "CodeBleu_score": 46.34240389502644}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t    $this->dispatch(new Code);\n\n    $this->configurationRepository->create(request()->all());\n\n    $this->dispatch(new Code);\n\n    session()->flash('success', trans('admin::app.configuration.create-success'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 40.86465424359859}, {"code": "<?\npublic function store(){\n\t    Event::dispatch('core.configuration.create.before');\n\n    $this->configurationRepository->create(request()->all());\n\n    Event::dispatch('core.configuration.create.after');\n\n    session()->flash('success', trans('admin::app.configuration.create-success'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 50.702925193819226}, {"code": "<?\npublic function store(){\n\t    event(new BeforeStoreConfiguration());\n\n    $this->configurationRepository->create(request()->all());\n\n    event(new AfterStoreConfiguration());\n\n    session()->flash('success', trans('admin::app.configuration.create-success'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 42.489500765607715}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t    $file = request()->get('file');\n    $config = $this->configurationRepository->findOneWhere(['value' => $file]);\n    if ($config) {\n        $file = storage_path('app/public/' . $config->value);\n        if (file_exists($file)) {\n            return response()->download($file);\n        }\n    }\n    abort(404);\n}", "CodeBleu_score": 42.57539625448986}, {"code": "<?\npublic function download(){\n\t    $filePath = request()->get('file_path');\n    $fullFileName = config('app.locale') . '.' . $filePath;\n\n    $config = $this->configurationRepository->findOneWhere([\n        'path' => $fullFileName,\n    ]);\n\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 50.91149791031745}, {"code": "<?\npublic function download(){\n\t    $file = request()->get('file');\n    $config = $this->configurationRepository->findOneByField('value', $file);\n\n    if ($config) {\n        $file = storage_path('app/public/' . $config->value);\n\n        return response()->download($file);\n    }\n\n    return response()->json(['message' => 'File not found.'], 404);\n}", "CodeBleu_score": 46.96626608073379}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> adminModelSorts = new ArrayList<>();\n    for (String model : list) {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setUserId(UserUtil.getUserId());\n        adminModelSort.setType(1);\n        adminModelSort.setModel(model);\n        adminModelSorts.add(adminModelSort);\n    }\n    adminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()).eq(AdminModelSort::getType, 1));\n    adminModelSortService.saveBatch(adminModelSorts);\n    return Result.ok();\n}", "CodeBleu_score": 51.00635087442016}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t        List<AdminModelSort> adminModelSorts = new ArrayList<>();\n        for (String s : list) {\n            AdminModelSort adminModelSort = new AdminModelSort();\n            adminModelSort.setModel(s);\n            adminModelSort.setType(1);\n            adminModelSort.setUserId(UserUtil.getUserId());\n            adminModelSorts.add(adminModelSort);\n        }\n        adminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()).eq(AdminModelSort::getType, 1));\n        adminModelSortService.saveBatch(adminModelSorts);\n        return Result.ok();\n    }", "CodeBleu_score": 50.97550689128118}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> modelSortList = new ArrayList<>();\n    for (int i = 0; i < list.size(); i++) {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setUserId(UserUtil.getUserId());\n        adminModelSort.setModel(list.get(i));\n        adminModelSort.setType(1);\n        adminModelSort.setSort(i);\n        modelSortList.add(adminModelSort);\n    }\n    adminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getType, 1).eq(AdminModelSort::getUserId, UserUtil.getUserId()));\n    adminModelSortService.saveBatch(modelSortList);\n    return Result.ok();\n}", "CodeBleu_score": 73.96061421878105}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (AdminModuleEnum.CRM.getModule().equals(adminConfig.getModule())) {\n        return R.error(AdminCodeEnum.MODULE_CAN_NOT_SETTING);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.updateById(adminConfig);\n    return R.ok();\n}", "CodeBleu_score": 73.64341421853061}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getId());\n    if (AdminModuleEnum.CRM.getModule().equals(adminConfig.getModule())) {\n        return R.error(AdminCodeEnum.ADMIN_MODULE_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.updateById(adminConfig);\n    return R.ok();\n}", "CodeBleu_score": 69.4770552890586}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getId());\n    if (AdminModuleEnum.CRM.getModule().equals(adminConfig.getModule())) {\n        return Result.error(AdminCodeEnum.MODULE_IS_CRM);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.updateById(adminConfig);\n    return R.ok();\n}", "CodeBleu_score": 68.95249900047448}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t        AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(customKey);\n        if (userConfig == null) {\n            AdminUserConfig adminUserConfig = new AdminUserConfig();\n            adminUserConfig.setName(customKey).setValue(json.toJSONString()).setUserId(UserUtil.getUserId());\n            adminUserConfigService.save(adminUserConfig);\n        } else {\n            userConfig.setValue(json.toJSONString());\n            adminUserConfigService.updateById(userConfig);\n        }\n        return Result.ok();\n    }", "CodeBleu_score": 67.55761439651046}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t        AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(customKey);\n        if (userConfig == null) {\n            userConfig = new AdminUserConfig();\n            userConfig.setName(customKey);\n            userConfig.setValue(json.toJSONString());\n            adminUserConfigService.save(userConfig);\n        } else {\n            userConfig.setValue(json.toJSONString());\n            adminUserConfigService.updateById(userConfig);\n        }\n        return Result.ok();\n    }", "CodeBleu_score": 73.70126856833653}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t        AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(customKey);\n        if (userConfig == null) {\n            userConfig = new AdminUserConfig();\n            userConfig.setUserId(UserUtil.getUserId());\n            userConfig.setName(customKey);\n            userConfig.setValue(json.toJSONString());\n            adminUserConfigService.save(userConfig);\n        } else {\n            userConfig.setValue(json.toJSONString());\n            adminUserConfigService.updateById(userConfig);\n        }\n        return Result.ok();\n    }", "CodeBleu_score": 77.12045523003647}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser user = adminUserService.getById(userId);\n    if (user == null) {\n        return R.error(AdminCodeEnum.ADMIN_USER_NOT_EXIST);\n    }\n    String deptName = deptService.getNameByDeptId(user.getDeptId());\n    user.setDeptName(deptName);\n    user.setSalt(null);\n    user.setPassword(null);\n    return R.ok(user);\n}", "CodeBleu_score": 52.72468248244453}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser user = adminUserService.getById(userId);\n    if (user == null) {\n        return R.error(AdminCodeEnum.ADMIN_USER_NOT_EXIST);\n    }\n    String deptName = deptService.getNameByDeptId(user.getDeptId());\n    user.setDeptName(deptName);\n    user.setSalt(null);\n    user.setPassword(null);\n    return R.ok(user);\n}", "CodeBleu_score": 52.72468248244453}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser user = adminUserService.getById(userId);\n    if (user == null) {\n            return R.error(AdminCodeEnum.ADMIN_USER_NOT_EXIST);\n        }\n        String deptName = deptService.getNameByDeptId(user.getDeptId());\n        user.setDeptName(deptName);\n        user.setSalt(null);\n        user.setPassword(null);\n        return R.ok(user);\n    }", "CodeBleu_score": 51.31061372908861}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t        Long userId = UserUtil.getUserId();\n        AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(\"readNotice\");\n        if (userConfig != null) {\n            userConfig.setStatus(1);\n            adminUserConfigService.updateById(userConfig);\n        } else {\n            AdminUserConfig adminUserConfig = new AdminUserConfig();\n            adminUserConfig.setUserId(userId);\n            adminUserConfig.setName(\"readNotice\");\n            adminUserConfig.setStatus(1);\n            adminUserConfigService.save(adminUserConfig);\n        }\n        return R.ok();\n    }", "CodeBleu_score": 43.972777173547165}, {"code": " public Result readNotice() {\n\t        Long userId = UserUtil.getUserId();\n        AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(\"readNotice\");\n        if (userConfig == null) {\n            AdminUserConfig adminUserConfig = new AdminUserConfig();\n            adminUserConfig.setUserId(userId);\n            adminUserConfig.setName(\"readNotice\");\n            adminUserConfig.setStatus(1);\n            adminUserConfigService.save(adminUserConfig);\n        } else {\n            QueryWrapper<AdminUserConfig> queryWrapper = new QueryWrapper<>();\n            queryWrapper.eq(\\\"user_id\\\", userId).eq(\\\"name\\\", \\\"readNotice\\\");\n            List<AdminUserConfig> list = adminUserConfigService.list(queryWrapper);\n            if (list.size() > 1) {\n                list.forEach(item -> {\n                    item.setStatus(1);\n                    adminUserConfigService.updateById(item);\n                });\n            }\n        }\n        return R.ok();\n    }", "CodeBleu_score": 44.88389485433832}, {"code": " public Result readNotice() {\n\t        Long userId = UserUtil.getUserId();\n        List<AdminUserConfig> list = adminUserConfigService.queryUserConfigByUserIdAndName(userId, \\\"readNotice\\\");\n        if (list.size() > 1) {\n            list.forEach(item -> {\n                item.setStatus(1);\n                adminUserConfigService.updateById(item);\n            });\n        } else {\n            AdminUserConfig userConfig = new AdminUserConfig();\n            userConfig.setName(\\\"readNotice\\\");\n            userConfig.setUserId(userId);\n            userConfig.setStatus(1);\n            adminUserConfigService.save(userConfig);\n        }\n        return R.ok();\n    }", "CodeBleu_score": 28.730065807339937}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    AdminConfig adminConfig = query().eq(\\\"name\\\", AdminConst.COMPANY_INFO).one();\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(AdminConst.COMPANY_INFO);\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        save(adminConfig);\n    } else {\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        updateById(adminConfig);\n    }\n}", "CodeBleu_score": 53.64042568201324}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    AdminConfig adminConfig = query().eq(\\\"name\\\", AdminConst.ADMIN_COMPANY_INFO).one();\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(AdminConst.ADMIN_COMPANY_INFO);\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        saveOrUpdate(adminConfig);\n    } else {\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        saveOrUpdate(adminConfig);\n    }\n}", "CodeBleu_score": 54.756368706767866}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t", "CodeBleu_score": 1.6537543811019455}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\t    String companyKey = \"companyInfo\";\n    AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\" limit 1\").one();\n    if (adminConfig == null) {\n        return new AdminCompanyBO();\n    }\n    return JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n}", "CodeBleu_score": 63.38909005104608}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t    String companyKey = \"companyInfo\";\n    AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\" limit 1\").one();\n    if (adminConfig != null) {\n        return JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n    }\n    return new AdminCompanyBO();\n}", "CodeBleu_score": 66.07302391745445}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t    String companyKey = \"companyInfo\";\n    AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\" limit 1\").one();\n    if (adminConfig != null) {\n        return JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n    }\n    return new AdminCompanyBO();\n}", "CodeBleu_score": 66.07302391745445}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t     List<AdminConfig> adminConfigList = new ArrayList<>();\n     stringList.forEach(item -> {\n         AdminConfig adminConfig = new AdminConfig();\n         adminConfig.setName(logConfigName);\n         adminConfig.setStatus(1);\n         adminConfig.setDescription(\\\"\u65e5\u5fd7\u6b22\u8fce\u8bed\\\");\n         adminConfig.setValue(item);\n         adminConfigList.add(adminConfig);\n     });\n     removeConfigByName(logConfigName);\n     saveBatch(adminConfigList);\n }", "CodeBleu_score": 45.62827150135632}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t     List<AdminConfig> adminConfigList = new ArrayList<>();\n     for (String str : stringList) {\n         AdminConfig adminConfig = new AdminConfig();\n         adminConfig.setName(logConfigName);\n         adminConfig.setStatus(1);\n         adminConfig.setValue(str);\n         adminConfigList.add(adminConfig);\n     }\n     removeByName(logConfigName);\n     saveBatch(adminConfigList);\n }", "CodeBleu_score": 47.753953474749665}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t     List<AdminConfig> adminConfigList = new ArrayList<>();\n     AdminConfig adminConfig = new AdminConfig();\n     adminConfig.setName(logConfigName);\n     adminConfig.setStatus(1);\n     adminConfig.setDescription(\\\"\u65e5\u5fd7\u6b22\u8fce\u8bed\\\");\n     adminConfig.setValue(JSON.toJSONString(stringList));\n     adminConfigList.add(adminConfig);\n     //\u5220\u9664\u5df2\u6709\u914d\u7f6e\n        removeByName(logConfigName);\n        //\u4fdd\u5b58\n        saveBatch(adminConfigList);\n    }", "CodeBleu_score": 44.24877920692076}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    Long userId = adminUserService.getUserId();\n    AdminUser adminUser = adminUserService.getById(userId);\n    String username = adminUser.getUsername();\n    String password = adminInitDataBO.getPassword();\n    String salt = adminUser.getSalt();\n    String storedPassword = adminUser.getPassword();\n    String inputPassword = DigestUtils.md5Hex(password + salt);\n    if (!inputPassword.equals(storedPassword)) {\n        throw new ServiceException(ResultCode.PASSWORD_ERROR);\n    }\n    String accessCode = UUID.randomUUID().toString();\n    redisUtil.set(RedisConst.ACCESS_CODE_KEY + userId, accessCode, RedisConst.ACCESS_CODE_EXPIRE);\n    return accessCode;\n}", "CodeBleu_score": 44.616039197570146}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    // Get the current user ID and user details\n    String userId = adminInitDataBO.getUserId();\n    AdminUser adminUser = adminUserService.getById(userId);\n    if (adminUser == null) {\n        throw new ServiceException(AdminErrorCode.USER_NOT_EXIST);\n    }\n    String username = adminUser.getUsername();\n    String password = adminUser.getPassword();\n\n    // Check the provided password against the stored password\n    String salt = adminUser.getSalt();\n    String inputPassword = adminInitDataBO.getPassword();\n    String inputPasswordWithSalt = adminInitDataBO.getPassword() + salt;\n    String md5Password = DigestUtils.md5DigestAsHex(inputPasswordWithSalt.getBytes());\n    if (!password.equals(md5Password)) {\n        throw new ServiceException(AdminErrorCode.INVALID_PASSWORD);\n    }\n\n    // Generate a temporary access code and store it in Redis\n    String accessCode = UUID.randomUUID().toString();\n    redisTemplate.opsForValue().set(RedisKey.ADMIN_ACCESS_CODE + accessCode, userId, 10, TimeUnit.MINUTES);\n\n    return accessCode;\n}", "CodeBleu_score": 43.347921116426235}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    // Retrieve the current user ID and user details\n    Long userId = adminUserService.getUserId();\n    AdminUser adminUser = adminUserService.getById(userId);\n    String username = adminUser.getUsername();\n\n    // Check the provided password against the stored password\n    String salt = adminUser.getSalt();\n    String password = adminUser.getPassword();\n    String inputPassword = adminInitDataBO.getPassword();\n    String verifyPassword = MD5Util.getMD5(username + inputPassword + salt);\n    if (!password.equals(verifyPassword)) {\n        throw new ServiceException(ResultCode.USER_PASSWORD_ERROR.getCode(), ResultCode.USER_PASSWORD_ERROR.getMessage());\n    }\n\n    // Generate a temporary access code and store it in Redis\n    String code = RandomUtil.randomString(6);\n    redisUtil.set(RedisKey.ADMIN_INIT_DATA_CODE + userId, code, 600);\n\n    return code;\n}", "CodeBleu_score": 43.084127992912826}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t    Long userId = UserUtil.getUserId();\n    String key = AdminCacheKey.UNAUTHORIZED_MENU_URL_CACHE_KEY + userId;\n    List<String> unauthorizedMenuUrlList = BaseUtil.getRedis().get(key, new TypeReference<List<String>>() {\n    });\n    if (CollUtil.isNotEmpty(unauthorizedMenuUrlList)) {\n        return unauthorizedMenuUrlList.contains(INIT_AUTH_URL);\n    }\n    return false;\n}", "CodeBleu_score": 48.07429862848903}, {"code": "private boolean verifyInitAuth(){\n\t    Long userId = UserUtil.getUserId();\n    String key = AdminCacheKey.UNAUTHORIZED_MENU_URL_CACHE_KEY + userId;\n    List<String> unauthorizedMenuUrlList = (List<String>) BaseUtil.getRedis().get(key);\n    if (CollUtil.isNotEmpty(unauthorizedMenuUrlList)) {\n        return unauthorizedMenuUrlList.contains(INIT_AUTH_URL);\n    }\n    return false;\n}", "CodeBleu_score": 51.64966887006963}, {"code": "private boolean verifyInitAuth(){\n\t    Long userId = UserUtil.getUserId();\n    String key = AdminCacheKey.UNAUTH_MENU_URL_KEY + userId;\n    List<String> unauthMenuUrlList = BaseUtil.getRedis().getList(key);\n    if (CollUtil.isNotEmpty(unauthMenuUrlList)) {\n        return unauthMenuUrlList.contains(INIT_AUTH_URL);\n    }\n    return false;\n}", "CodeBleu_score": 52.41408713394442}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    // Check if the role ID is null\n    if (roleId == null) {\n        return;\n    }\n    // Check if the menu ID list is null or empty\n    if (menuIdList == null || menuIdList.size() == 0) {\n        return;\n    }\n    // Create a list of AdminRoleMenu objects\n    List<AdminRoleMenu> list = new ArrayList<>(menuIdList.size());\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n        adminRoleMenu.setMenuId(menuId);\n        adminRoleMenu.setRoleId(roleId);\n        list.add(adminRoleMenu);\n    }\n    // Save the list of role-menu associations in batches\n    this.saveBatch(list);\n}", "CodeBleu_score": 59.05958083356807}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    // TODO: Implement this function\n}", "CodeBleu_score": 8.503720271029366}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    // Create a list of AdminRoleMenu objects\n    List<AdminRoleMenu> list = new ArrayList<>(menuIdList.size());\n    for(Integer menuId : menuIdList) {\n        AdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n        adminRoleMenu.setRoleId(roleId);\n        adminRoleMenu.setMenuId(menuId);\n        list.add(adminRoleMenu);\n    }\n    // Save the list of role-menu associations in batches\n    this.saveBatch(list);\n}", "CodeBleu_score": 61.470168721810445}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\t    String indexAliases = getIndexAliases(SYS_LOG_TYPE);\n    Map<String, Object> logMap = BeanUtil.beanToMap(sysLog);\n    logMap.remove(\\\"id\\\");\n    logMap.put(\\\"createTime\\\", LocalDate.now().format(DateTimeFormatter.ofPattern(\\\"yyyy-MM-dd HH:mm:ss\\\")));\n    IndexRequest indexRequest = new IndexRequest(indexAliases).source(logMap, XContentType.JSON);\n    adminThreadPoolExecutor.execute(() -> {\n            try {\n                IndexResponse indexResponse = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n                log.info(\\\"ES\u4fdd\u5b58\u65e5\u5fd7\u6210\u529f,id:{}\\\", indexResponse.getId());\n            } catch (IOException e) {\n                log.error(\\\"ES\u4fdd\u5b58\u65e5\u5fd7\u5931\u8d25\\\", e);\n            }\n        });\n    }", "CodeBleu_score": 52.20036011989937}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t    String indexAliases = getIndexAliases(SYS_LOG_TYPE);\n    Map<String, Object> logMap = BeanUtil.beanToMap(sysLog);\n    logMap.put(\\\"createTime\\\", DateUtil.format(sysLog.getCreateTime(), \\\"yyyy-MM-dd HH:mm:ss\\\"));\n    logMap.remove(\\\"id\\\");\n    IndexRequest indexRequest = new IndexRequest(indexAliases).source(logMap, XContentType.JSON);\n    try {\n            restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n        } catch (IOException e) {\n            log.error(\\\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5931\u8d25\\\", e);\n        }\n    }", "CodeBleu_score": 33.45682957328472}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t    String indexAliases = getIndexAliases(SYS_LOG_TYPE);\n    Map<String, Object> logMap = BeanUtil.beanToMap(sysLog);\n    logMap.remove(\\\"id\\\");\n    logMap.put(\\\"createTime\\\", DateTimeUtil.format(sysLog.getCreateTime(), \\\"yyyy-MM-dd HH:mm:ss\\\"));\n    IndexRequest indexRequest = new IndexRequest(indexAliases).source(logMap, XContentType.JSON);\n    adminThreadPoolExecutor.execute(() -> {\n        try {\n                IndexResponse indexResponse = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n                log.info(\\\"ES \u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u6210\u529f\uff1a{}\uff0cID\uff1a{}\uff0c\u7d22\u5f15\uff1a{}\uff0c\u7c7b\u578b\uff1a{}\uff0c\u7ed3\u679c\uff1a{}\uff0c\u8017\u65f6\uff1a{}ms\\\", sysLog.getDetail(), indexResponse.getId(), indexResponse.getIndex(), indexResponse.getType(), indexResponse.getResult().name(), indexResponse.getTook().getMillis());\n            } catch (IOException e) {\n                log.error(\\\"ES \u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5931\u8d25\uff1a{}\\\", e.getMessage());\n            }\n        });\n    }", "CodeBleu_score": 36.70620309884619}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t", "CodeBleu_score": 2.165507622947592}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t", "CodeBleu_score": 2.165507622947592}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t", "CodeBleu_score": 2.165507622947592}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\t  const file = fs.createWriteStream(dest);\n  const response = await axios({\n    url,\n    method: \\\"GET\\\",\n    responseType: \\\"stream\\\"\n  });\n  return new Promise((resolve, reject) => {\n    response.data.pipe(file);\n    file.on(\\\"finish\\\", () => {\n      file.close();\n      resolve();\n    });\n    file.on(\\\"error\\\", (err) => {\n      // Delete the file if it exists\n      fs.unlink(dest, () => {\n        reject(err);\n      });\n    });\n  });\n}", "CodeBleu_score": 50.720786139979104}, {"code": "async function downloadFile(url, dest){\n\t  const file = fs.createWriteStream(dest);\n  const response = await https.get(url, (response) => {\n    response.pipe(file);\n  });\n  return new Promise((resolve, reject) => {\n    file.on('finish', () => {\n      file.close();\n      resolve();\n    });\n    file.on('error', (err) => {\n      // Delete the file if it exists\n      fs.unlink(dest, () => {});\n      reject(err);\n    });\n  });\n}", "CodeBleu_score": 52.68413522498171}, {"code": "async function downloadFile(url, dest){\n\t  const file = fs.createWriteStream(dest);\n  const response = await axios({\n    url,\n    method: \\\"GET\\\",\n    responseType: \\\"stream\\\"\n  });\n  response.data.pipe(file);\n  return new Promise((resolve, reject) => {\n    file.on(\\\"finish\\\", resolve);\n    file.on(\\\"error\\\", reject);\n  });\n}", "CodeBleu_score": 37.67505755122189}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t    Set<String> moduleIds = getDependentModulesFromDsl(module.getEditingApplicationDSL());\n    return findByIdIn(Lists.newArrayList(moduleIds))\\\n            .filter(subModule -> !circularDependencyCheckSet.contains(subModule.getId()))\n            .doOnNext(subModule -> circularDependencyCheckSet.add(subModule.getId()));\n}", "CodeBleu_score": 41.54017444945719}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t     Set<String> moduleIdSet = getDependentModulesFromDsl(module.getEditingApplicationDSL());\n     moduleIdSet.removeAll(circularDependencyCheckSet);\n     circularDependencyCheckSet.addAll(moduleIdSet);\n     return findByIdIn(Lists.newArrayList(moduleIdSet));\n }", "CodeBleu_score": 36.87863850170461}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t     return findByIdWithoutDsl(module.getId())\n             .filter(m -> !circularDependencyCheckSet.contains(m.getId()))\n             .doOnNext(m -> circularDependencyCheckSet.add(m.getId()))\n             .flatMap(m -> getAllDependentModulesFromApplication(m, false));\n }", "CodeBleu_score": 47.9248741116803}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    if (map == null) {\n            return;\n        }\n        if (map instanceof List<?> list) {\n            for (Object item : list) {\n                if (item instanceof Map<?, ?> itemMap) {\n                    doGetDependentModules(itemMap, dependentModuleIds);\n                }\n            }\n        } else if (map instanceof Map<?, ?> itemMap) {\n            Object type = itemMap.get(\\\"type\\\");\n            if (type instanceof String typeStr && typeStr.equals(\\\"module\\\")) {\n                Object appId = itemMap.get(\\\"appId\\\");\n                if (appId instanceof String appIdStr && StringUtils.isNotBlank(appIdStr)) {\n                    dependentModuleIds.add(appIdStr);\n                }\n            }\n            map.forEach((key, value) -> doGetDependentModules(value, dependentModuleIds));\n        }\n    }", "CodeBleu_score": 50.45574202703167}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    if (map == null) {\n            return;\n        }\n        for (Map.Entry<?, ?> entry : map.entrySet()) {\n            if (entry.getValue() instanceof Map<?, ?>) {\n                doGetDependentModules((Map<?, ?>) entry.getValue(), dependentModuleIds);\n            } else if (entry.getValue() instanceof List<?>) {\n                for (Object value : (List<?>) entry.getValue()) {\n                    if (value instanceof Map<?, ?>) {\n                        doGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n                    }\n                }\n            } else if (entry.getKey().equals(\\\"type\\\") && entry.getValue().equals(\\\"module\\\")) {\n                Object appId = map.get(\\\"appId\\\");\n                if (appId instanceof String && StringUtils.isNotBlank((String) appId)) {\n                    dependentModuleIds.add((String) appId);\n                }\n            }\n        }\n    }", "CodeBleu_score": 39.749432266784645}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    if (map == null) {\n            return;\n        }\n        for (Map.Entry<?, ?> entry : map.entrySet()) {\n            if (entry.getValue() instanceof Map<?, ?>) {\n                doGetDependentModules((Map<?, ?>) entry.getValue(), dependentModuleIds);\n            }\n            if (entry.getValue() instanceof List<?>) {\n                for (Object value : (List<?>) entry.getValue()) {\n                    if (value instanceof Map<?, ?>) {\n                        doGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n                    }\n                }\n            }\n            if (entry.getKey() instanceof String && \\\"module\\\".equals(entry.getKey()) && entry.getValue() instanceof Map<?, ?>) {\n                Map<?, ?> moduleMap = (Map<?, ?>) entry.getValue();\n                Object appId = moduleMap.get(\\\"appId\\\");\n                if (appId instanceof String && StringUtils.isNotBlank((String) appId)) {\n                    dependentModuleIds.add((String) appId);\n                }\n            }\n        }\n    }", "CodeBleu_score": 34.905340155658195}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t        final byte[] bytes = new byte[dataBuffer.readableByteCount()];\n        dataBuffer.read(bytes);\n        DataBufferUtils.release(dataBuffer);\n        final BufferedImage src = ImageIO.read(new ByteArrayInputStream(bytes));\n        final BufferedImage dst = createThumbnail ? resizeImage(src, thumbNailPhotoDimension.get()) : src;\n\n        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n        ImageIO.write(dst, \\\"JPEG\\\", out);\n\n        final Asset asset = new Asset();\n        asset.setContent(out.toByteArray());\n        asset.setContentType(createThumbnail ? MediaType.IMAGE_JPEG : srcContentType);\n        return asset;\n    }", "CodeBleu_score": 40.06584953724842}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        ImageIO.write(ImageIO.read(dataBuffer.asInputStream()), \\\"JPEG\\\", baos);\n        baos.flush();\n\n        final byte[] imageBytes = baos.toByteArray();\n        final int thumbnailDimension = thumbNailPhotoDimension.get();\n        final Asset asset = new Asset();\n        asset.setContentType(createThumbnail ? MediaType.IMAGE_JPEG : srcContentType);\n        asset.setContent(imageBytes);\n        if (createThumbnail) {\n            final BufferedImage thumbnail = resizeImage(imageBytes, thumbnailDimension);\n            final ByteArrayOutputStream thumbnailBaos = new ByteArrayOutputStream();\n            ImageIO.write(thumbnail, \\\"JPEG\\\", thumbnailBaos);\n            thumbnailBaos.flush();\n            asset.setThumbnail(thumbnailBaos.toByteArray());\n        }\n\n        DataBufferUtils.release(dataBuffer);\n        return asset;\n    }", "CodeBleu_score": 20.960620910793736}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t     final byte[] data = new byte[dataBuffer.readableByteCount()];\n     dataBuffer.read(data);\n     DataBufferUtils.release(dataBuffer);\n\n        final BufferedImage image = ImageIO.read(new ByteArrayInputStream(data));\n        final Image resizedImage = createThumbnail ? resizeImage(image) : image;\n\n        final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n        ImageIO.write(resizedImage, \\\"jpeg\\\", outputStream);\n        final byte[] resizedData = outputStream.toByteArray();\n        final MediaType contentType = createThumbnail ? MediaType.IMAGE_JPEG : srcContentType;\n        return new Asset(resizedData, contentType);\n    }", "CodeBleu_score": 42.04149759002702}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return getById(assetId)\n            .doOnNext(asset -> exchange.getResponse().setStatusCode(HttpStatus.OK))\n            .flatMap(asset -> {\n                if (asset.getContentType() != null) {\n                    exchange.getResponse().getHeaders().setContentType(asset.getContentType());\n                }\n                return exchange.getResponse().writeWith(Mono.just(asset.getData()));\n            });\n}", "CodeBleu_score": 40.44181986420415}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return getById(assetId)\n            .doOnNext(asset -> exchange.getResponse().setStatusCode(HttpStatus.OK))\n            .doOnNext(asset -> exchange.getResponse().getHeaders().setContentType(asset.getContentType()))\n            .flatMap(asset -> exchange.getResponse().writeWith(Mono.just(new DefaultDataBufferFactory().wrap(asset.getData()))))\n            .then();\n}", "CodeBleu_score": 38.5443502814844}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return repository.findById(assetId)\n            .flatMap(asset -> {\n                ServerHttpResponse response = exchange.getResponse();\n                response.setStatusCode(HttpStatus.OK);\n                if (asset.getContentType() != null) {\n                    response.getHeaders().setContentType(asset.getContentType());\n                }\n                return response.writeWith(Mono.just(new DefaultDataBufferFactory().wrap(asset.getData())));\n            });\n}", "CodeBleu_score": 61.96996426084789}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    if (commonConfig.getWorkspaceMode() == WorkspaceMode.SAAS) {\n        return Flux.empty();\n    }\n    return organizationService.getByEnterpriseMode()\n            .flatMapIterable(organization ->\n                    organization.getAuthConfigs()\n                            .stream()\n                            .map(abstractAuthConfig -> new FindAuthConfig(abstractAuthConfig, organization))\n                            .collect(Collectors.toList())\n            );\n}", "CodeBleu_score": 64.16590052967169}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    if (commonConfig.getWorkspaceMode() == WorkspaceMode.SAAS) {\n        return Flux.empty();\n    }\n\n    return organizationService.findAllByMode(WorkspaceMode.ENTERPRISE)\n            .flatMapIterable(organization ->\n                    organization.getAuthConfigs()\n                            .stream()\n                            .map(abstractAuthConfig -> new FindAuthConfig(abstractAuthConfig, organization))\n                            .collect(Collectors.toList())\n            );\n}", "CodeBleu_score": 62.259633119622336}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    if (commonConfig.getWorkspaceMode() == WorkspaceMode.SAAS) {\n        return Flux.empty();\n    }\n    return organizationService.findAllByEnterpriseMode()\n            .flatMapIterable(organization ->\n                    organization.getAuthConfigs()\n                            .stream()\n                            .map(abstractAuthConfig -> new FindAuthConfig(abstractAuthConfig, organization))\n                            .collect(Collectors.toList())\n            );\n}", "CodeBleu_score": 64.0430736612347}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n                .setDriver(SpringDataMongoV3Driver.withDefaultLock(mongoTemplate, \\\"mongock.lock\\\"))\n                .setLockQuickConfig()\n                .setChangeLogsScanPackage(\\\"com.openblocks.infra.migration\\\")\n                .setSpringContext(springContext)\n                .setLockManager(new MongoDBLockManager(mongoTemplate))\n                .build();\n    }", "CodeBleu_score": 23.4537204395346}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n            .setDriver(SpringDataMongoV3Driver.withDefaultLock(mongoTemplate, \\\"mongock\\\", \\\"mongock_lock\\\"))\n            .setLockQuickConfig()\n            .setChangeLogsScanPackage(\\\"com.openblocks.infra.migrations\\\")\n            .setSpringContext(springContext)\n            .build();\n}", "CodeBleu_score": 21.610826924141602}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n                .setDriver(SpringDataMongoV3Driver.withDefaultLock(mongoTemplate.getDb(), \\\"mongock\\\"))\n                .setChangeLogsScanPackage(\\\"com.openblocks.infra.migration\\\")\n                .setSpringContext(springContext)\n                .setLockQuickConfig()\n                .build();\n    }", "CodeBleu_score": 21.78784775665841}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return reactiveMongoTemplate;\n    }", "CodeBleu_score": 75.7466843048766}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return reactiveMongoTemplate;\n    }", "CodeBleu_score": 75.7466843048766}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return reactiveMongoTemplate;\n    }", "CodeBleu_score": 75.7466843048766}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return libraryQueryRecordService.getLatestRecordByLibraryQueryId(libraryQueryId)\n            .map(LibraryQueryRecord::getDsl)\n            .switchIfEmpty(getById(libraryQueryId)\n                    .map(LibraryQuery::getDsl));\n}", "CodeBleu_score": 73.8189927472059}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return libraryQueryRecordService.getLatestRecordByLibraryQueryId(libraryQueryId)\n            .map(LibraryQueryRecord::getQuery)\n            .map(BaseQuery::getDsl)\n            .switchIfEmpty(getById(libraryQueryId)\n                    .map(LibraryQuery::getQuery)\n                    .map(BaseQuery::getDsl));\n}", "CodeBleu_score": 64.07315702593347}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return libraryQueryRecordService.getLatestRecordByLibraryQueryId(libraryQueryId)\n            .map(LibraryQueryRecord::getDSL)\n            .switchIfEmpty(getById(libraryQueryId)\n                    .map(LibraryQuery::getDSL));\n}", "CodeBleu_score": 74.35423955305949}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        Duration timeout = QueryTimeoutUtils.parseTimeout(timeoutStr);\n        DatasourceConnectionHolder connectionHolder = datasourceConnectionPool.getConnection(datasource.getId());\n        return Mono.deferContextual(ctx -> {\n            QueryExecutionContext queryExecutionContext = new QueryExecutionContext(datasource, connectionHolder, queryConfig, requestParams, ctx.get(QueryVisitorContext.class));\n            if (datasource.getDatasourceType().isNodeJs()) {\n                return datasourcePluginClient.executeQuery(queryExecutionContext, timeout);\n            }\n            return executeQueryLocally(queryExecutionContext, timeout);\n        }).onErrorResume(TimeoutException.class, e -> Mono.error(ofException(QUERY_EXECUTION_TIMEOUT, timeoutStr))).onErrorMap(PluginException.class, e -> ofException(QUERY_EXECUTION_ERROR, e.getErrorCode(), e.getErrorMessage()));\n    }", "CodeBleu_score": 39.71906975459454}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        QueryExecutionContext queryExecutionContext = new QueryExecutionContext(queryConfig, requestParams, queryVisitorContext);\n\n        Duration timeout = QueryTimeoutUtils.parseTimeout(timeoutStr);\n\n        DatasourceConnectionHolder connectionHolder = datasourceConnectionPool.getConnection(datasource);\n\n        if (connectionHolder.isNodeJs()) {\n            return executeQueryNodeJs(connectionHolder, queryExecutionContext, timeout);\n        } else {\n            return executeQueryLocal(datasource, queryExecutionContext, timeout);\n        }\n    }", "CodeBleu_score": 29.52023999027899}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t", "CodeBleu_score": 8.95524286354501}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t    return Mono.defer(() -> datasourceMetaInfoService.getQueryExecutor(datasource.getType()))\n            .flatMap(queryExecutor -> Mono.defer(() -> datasourceConnectionPool.getConnection(datasource.getId())\n                    .flatMap(connection -> Mono.defer(() -> {\n                        QueryExecutionContext queryExecutionContext = QueryExecutionContext.builder()\n\" +\n                                \"                                .queryConfig(queryConfig)\n\" +\n                                \"                                .requestParams(requestParams)\n\" +\n                                \"                                .queryVisitorContext(queryVisitorContext)\n\" +\n                                \"                                .build();\n\" +\n                                \"                        return queryExecutor.executeQuery(connection, queryExecutionContext);\n\" +\n                                \"                    }))))\n            .doOnNext(result -> log.info(\\\"query execution result: {}\\\", result));\n}", "CodeBleu_score": 32.31612796094735}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t    return Mono.defer(() -> {\n        DatasourceConnectionHolder connectionHolder = datasourceConnectionPool.acquire(datasource.getId());\n        QueryExecutionContext queryExecutionContext = new QueryExecutionContext(connectionHolder, queryConfig, requestParams, queryVisitorContext);\n        return Mono.fromCallable(() -> datasourcePluginClient.executeQuery(datasource.getType(), queryExecutionContext))\n                .onErrorResume(PluginException.class, pluginException -> Mono.just(QueryExecutionResult.error(pluginException)));\n    })\n            .onErrorMap(exception -> {\n                if (exception instanceof BizException) {\n                    return exception;\n                }\n                log.error(\"query exception\", exception);\n                return ofException(QUERY_EXECUTION_ERROR, \"QUERY_EXECUTION_ERROR\", exception.getMessage());\n            });\n}", "CodeBleu_score": 47.30585569152434}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t    return Mono.defer(() -> {\n        QueryExecutionContext queryExecutionContext = QueryExecutionContext.builder()\n                .queryConfig(queryConfig)\n                .requestParams(requestParams)\n                .queryVisitorContext(queryVisitorContext)\n                .build();\n        return datasourceConnectionPool.acquireConnection(datasource.getType())\n                .flatMap(connection -> {\n                    try {\n                        return Mono.just(connection.getQueryExecutor().execute(queryExecutionContext));\n                    } catch (Exception e) {\n                        return Mono.error(e);\n                    }\n                })\n                .onErrorResume(e -> Mono.error(new PluginException(QUERY_EXECUTION_ERROR, \\\"QUERY_EXECUTION_ERROR\\\", e.getMessage())));\n    });\n}", "CodeBleu_score": 44.63709489776364}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t    if (StringUtils.isBlank(timeoutStr)) {\n            return DEFAULT_QUERY_TIMEOUT_MILLIS;\n        }\n\n        Pair<String, String> pair = StringUtils.splitByWholeSeparator(timeoutStr, \\\" \\\");\n        if (pair == null || pair.getLeft() == null || pair.getRight() == null) {\n            throw new PluginException(QUERY_ARGUMENT_ERROR, \\\"invalid timeoutStr\\\");\n        }\n\n        int value = NumberUtils.toInt(pair.getLeft(), -1);\n        if (value < 0) {\n            throw new PluginException(QUERY_ARGUMENT_ERROR, \\\"invalid timeoutStr\\\");\n        }\n\n        String unit = pair.getRight().toLowerCase();\n        long millis = Duration.of(value, switch (unit) {\n            case \\\"ms\\\" -> java.time.temporal.ChronoUnit.MILLIS;\n            case \\\"s\\\" -> java.time.temporal.ChronoUnit.SECONDS;\n            case \\\"m\\\" -> java.time.temporal.ChronoUnit.MINUTES;\n            case \\\"h\\\" -> java.time.temporal.ChronoUnit.HOURS;\n            case \\\"d\\\" -> java.time.temporal.ChronoUnit.DAYS;\n            default -> throw new PluginException(QUERY_ARGUMENT_ERROR, \\\"invalid timeoutStr\\\");\n        }).toMillis();\n\n        if (millis > MAX_QUERY_TIMEOUT_SECONDS * 1000) {\n            throw new PluginException(EXCEED_MAX_QUERY_TIMEOUT);\n        }\n\n        return (int) millis;\n    }", "CodeBleu_score": 26.863529038765925}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t    if (StringUtils.isBlank(timeoutStr)) {\n            return DEFAULT_QUERY_TIMEOUT_MILLIS;\n        }\n\n        String[] timeoutParts = timeoutStr.split(\\\" \\\");\n        if (timeoutParts.length != 2) {\n            throw new PluginException(QUERY_ARGUMENT_ERROR, \\\"Invalid timeout string: \\\" + timeoutStr);\n        }\n\n        long timeoutValue = NumberUtils.toLong(timeoutParts[0]);\n        if (timeoutValue <= 0) {\n            throw new PluginException(QUERY_ARGUMENT_ERROR, \\\"Invalid timeout value: \\\" + timeoutStr);\n        }\n\n        String timeoutUnit = timeoutParts[1].toLowerCase();\n        if (timeoutUnit.startsWith(\\\"ms\\\")) {\n            return (int) timeoutValue;\n        } else if (timeoutUnit.startsWith(\\\"s\\\")) {\n            return (int) (timeoutValue * 1000);\n        } else if (timeoutUnit.startsWith(\\\"m\\\")) {\n            return (int) (timeoutValue * 60 * 1000);\n        } else if (timeoutUnit.startsWith(\\\"h\\\")) {\n            return (int) (timeoutValue * 60 * 60 * 1000);\n        } else {\n            throw new PluginException(QUERY_ARGUMENT_ERROR, \\\"Invalid timeout unit: \\\" + timeoutStr);\n        }\n    }", "CodeBleu_score": 22.427312143397163}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t    if (StringUtils.isBlank(timeoutStr)) {\n            return DEFAULT_QUERY_TIMEOUT_MILLIS;\n        }\n\n        Pair<Integer, String> timeoutPair = extractTimeoutValueAndUnit(timeoutStr);\n        int timeoutValue = timeoutPair.getLeft();\n        String timeoutUnit = timeoutPair.getRight();\n\n        int timeoutMillis = convertTimeoutValueToMillis(timeoutValue, timeoutUnit);\n\n        if (timeoutMillis > MAX_QUERY_TIMEOUT_SECONDS * 1000) {\n            throw new PluginException(EXCEED_MAX_QUERY_TIMEOUT, timeoutStr);\n        }\n\n        return timeoutMillis;\n    }", "CodeBleu_score": 38.76469096718584}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t        List<String> datasourceIds = application.getLiveApplicationDsl().values().stream()\n                .filter(query -> query.getDatasourceId() != null)\n                .map(query -> query.getDatasourceId())\n                .distinct()\n                .collect(Collectors.toList());\n        if (datasourceIds.isEmpty()) {\n                        return ofError(TEMPLATE_NOT_CORRECT, \\\"TEMPLATE_NOT_CORRECT\\\");\n                    }\n                    return Flux.fromIterable(datasourceIds)\n                            .flatMap(datasourceId -> datasourceService.getById(datasourceId)\n                                    .switchIfEmpty(deferredError(TEMPLATE_NOT_CORRECT, \\\"TEMPLATE_NOT_CORRECT\\\"))\n                                    .flatMap(datasource -> {\n                                        if (datasource.getOrganizationId().equals(currentOrganizationId)) {\n                                            return Mono.just(Pair.of(datasourceId, datasourceId));\n                                        }\n                                        Datasource newDatasource = Datasource.builder()\n                                                .organizationId(currentOrganizationId)\n                                                .name(datasource.getName())\n                                                .type(datasource.getType())\n                                                .connectionConfig(datasource.getConnectionConfig())\n                                                .creationSource(DatasourceCreationSource.TEMPLATE)\n                                                .build();\n                                        return datasourceService.create(newDatasource, visitorId)\n                                                .map(newDatasource1 -> Pair.of(datasourceId, newDatasource1.getId()));\n                                    }))\n                            .collectList();\n                }", "CodeBleu_score": 41.703151403595385}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t    return Mono.justOrEmpty(application.getLiveApplicationDsl())\n            .flatMapMany(applicationDsl -> Flux.fromIterable(applicationDsl.values()).flatMap(query -> Mono.justOrEmpty(query.getDatasourceId())\n                    .flatMap(datasourceId -> datasourceService.getDatasource(datasourceId, visitorId).flatMap(datasource -> {\n                        if (isNull(datasource.getDatasourceCreationSource())) {\n                                return Mono.error(ofError(TEMPLATE_NOT_CORRECT, \\\"TEMPLATE_NOT_CORRECT\\\"));\n                            }\n                            DatasourceCreationSource creationSource = datasource.getDatasourceCreationSource();\n                            Datasource datasourceToCopy = Datasource.builder()\n                                    .organizationId(currentOrganizationId)\n                                    .name(datasource.getName())\n                                    .datasourceType(datasource.getDatasourceType())\n                                    .datasourceCreationSource(creationSource)\n                                    .build();\n                            return datasourceService.createDatasource(datasourceToCopy, visitorId).map(copiedDatasource -> {\n                                return Pair.of(datasourceId, copiedDatasource.getId());\n                            });\n                        })))\n            .collectList();\n}", "CodeBleu_score": 23.838093892008406}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t    return Mono.just(application.getLiveApplicationDsl())\n            .map(liveApplicationDsl -> liveApplicationDsl.getQueries().stream()\n                    .flatMap(query -> query.getDatasourceIds().stream())\n                    .collect(Collectors.toSet()))\n            .switchIfEmpty(deferredError(TEMPLATE_NOT_CORRECT, \"TEMPLATE_NOT_CORRECT\"))\n            .flatMapMany(Flux::fromIterable)\n            .flatMap(datasourceId -> datasourceService.getById(datasourceId)\n                    .switchIfEmpty(deferredError(TEMPLATE_NOT_CORRECT, \"TEMPLATE_NOT_CORRECT\"))\n                    .flatMap(datasource -> datasourceService.copy(datasource, currentOrganizationId, visitorId)))\n            .map(datasource -> Pair.of(datasource.getOriginalId(), datasource.getId()))\n            .collect(Collectors.toList());\n}", "CodeBleu_score": 36.23720951150493}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.findById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.getDatasourceType() == Datasource.DatasourceType.SYSTEM_STATIC) {\n                    return Mono.just(datasourceId);\n                }\n                if (datasource.getDatasourceType() == Datasource.DatasourceType.LEGACY_QUICK_REST_API) {\n                    return Mono.just(datasource.getDatasourceId());\n                }\n                if (datasource.getDatasourceType() == Datasource.DatasourceType.LEGACY_OPENBLOCKS_API) {\n                    return Mono.just(datasource.getDatasourceId());\n                }\n                Datasource datasourceToCopy = Datasource.builder()\n                        .organizationId(organizationId)\n                        .datasourceType(datasource.getDatasourceType())\n                        .datasourceCreationSource(DatasourceCreationSource.TEMPLATE)\n                        .name(datasource.getName())\n                        .description(datasource.getDescription())\n                        .datasourceConfig(datasource.getDatasourceConfig())\n                        .build();\n                return datasourceService.create(datasourceToCopy, visitorId);\n            });\n}", "CodeBleu_score": 47.49747789223665}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.getById(datasourceId)\n            .map(datasource -> {\n                if (datasource.getDatasourceType() == Datasource.DatasourceType.SYSTEM_STATIC) {\n                    return datasourceId;\n                }\n                if (datasource.getDatasourceType() == Datasource.DatasourceType.LEGACY_QUICK_REST_API) {\n                    return datasource.getDatasourceConfig().get(\"datasourceId\");\n                }\n                if (datasource.getDatasourceType() == Datasource.DatasourceType.LEGACY_OPENBLOCKS_API) {\n                    return datasource.getDatasourceConfig().get(\"datasourceId\");\n                }\n                Datasource newDatasource = Datasource.builder()\n                        .organizationId(organizationId)\n                        .name(datasource.getName())\n                        .datasourceType(datasource.getDatasourceType())\n                        .datasourceConfig(datasource.getDatasourceConfig())\n                        .datasourceCreationSource(DatasourceCreationSource.TEMPLATE)\n                        .build();\n                return datasourceService.create(newDatasource, visitorId).map(Datasource::getId);\n            });\n}", "CodeBleu_score": 43.96089429110506}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.getById(datasourceId)\n            .map(datasource -> {\n                if (datasource.getCreationSource() == DatasourceCreationSource.SYSTEM_STATIC) {\n                    return datasourceId;\n                }\n                if (datasource.getCreationSource() == DatasourceCreationSource.LEGACY_OPENBLOCKS_API || datasource.getCreationSource() == DatasourceCreationSource.LEGACY_QUICK_REST_API) {\n                    return datasource.getDatasourceId();\n                }\n                Datasource newDatasource = Datasource.builder()\n                        .organizationId(organizationId)\n                        .name(datasource.getName())\n                        .datasourceType(datasource.getDatasourceType())\n                        .datasourceId(RandomStringUtils.randomAlphanumeric(RANDOM_LENGTH))\n                        .datasourceConfig(datasource.getDatasourceConfig())\n                        .creationSource(DatasourceCreationSource.USER_CREATED)\n                        .build();\n                return datasourceService.create(newDatasource, visitorId).map(Datasource::getDatasourceId);\n            });\n}", "CodeBleu_score": 43.87571573644111}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t", "CodeBleu_score": 6.277227342940204}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t    return authenticationService.getCurrentUser()\n                .flatMap(authUser -> {\n                    if (authUser.getUser() == null) {\n                        return Mono.error(new BizException(BizError.NOT_LOGGED_IN));\n                    }\n\n                    return saveProfilePhoto(filePart, authUser.getUser());\n                });\n    }", "CodeBleu_score": 23.07874397419074}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t    return authenticationService.getCurrentUser()\n                .map(AuthUser::getUser)\n                .flatMap(user1 -> {\n                    if (user1.getId().equals(user.getId())) {\n                        return Mono.error(new BizException(BizError.USER_NOT_ALLOWED, \\\"USER_NOT_ALLOWED\\\"));\n                    }\n                    return Mono.just(user1);\n                })\n                .flatMap(user1 -> {\n                    if (user1.getAvatar() != null) {\n                        return assetService.delete(user1.getAvatar()) \n                                .then(Mono.just(true));\n                    } else {\n                        return Mono.just(true);\n                    }\n                })\n                .flatMap(it -> assetService.upload(filePart, \\\"profile\\\", \\\"avatar\\\", user.getId()))\n                .flatMap(asset -> {\n                    user.setAvatar(asset.getId());\n                    return Mono.just(user);\n                })\n                .flatMap(repository::save)\n                .map(it -> true);\n    }", "CodeBleu_score": 19.750392582699416}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(UserState.ENABLED);\n    user.setEnabled(true);\n    user.setAvatar(authUser.getAvatar());\n    if (authUser.getSource().equals(AuthSourceConstants.EMAIL) && authUser.getContext().getPassword() != null) {\n        String encryptedPassword = encryptionService.encrypt(authUser.getContext().getPassword());\n        user.setPassword(encryptedPassword);\n    }\n    user.setConnections(authUser.getConnections());\n    user.setNewUser(true);\n    return repository.save(user);\n}", "CodeBleu_score": 48.48470249766243}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(UserState.ACTIVE);\n    user.setEnabled(true);\n    user.setAvatar(authUser.getAvatar());\n\n    if (authUser.getSource().equals(AuthSourceConstants.EMAIL) && authUser.getContext().containsKey(FormAuthRequestContext.PASSWORD)) {\n        user.setPassword(encryptionService.encrypt(authUser.getContext().get(FormAuthRequestContext.PASSWORD)));\n    }\n\n    user.setConnections(authUser.getConnections());\n    user.setNew(true);\n\n    return repository.save(user);\n}", "CodeBleu_score": 44.28802535460707}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(UserState.ENABLED);\n    user.setEnabled(true);\n    user.setAvatar(authUser.getAvatar());\n\n    if (AuthSourceConstants.EMAIL.equals(authUser.getSource()) && authUser.getAuthContext() instanceof FormAuthRequestContext) {\n        FormAuthRequestContext context = (FormAuthRequestContext) authUser.getAuthContext();\n        String password = context.getPassword();\n        if (password != null) {\n            user.setPassword(encryptionService.encrypt(password));\n        }\n    }\n\n    user.setConnections(authUser.getConnections());\n    user.setNew(true);\n    return create(user);\n}", "CodeBleu_score": 55.18844681991138}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    Connection connection = new Connection();\n    connection.setSource(AuthSourceConstants.EMAIL);\n    connection.setRawId(email);\n    connection.setIsPrimary(true);\n    user.getConnections().add(connection);\n    return repository.save(user)\n            .map(it -> true)\n            .onErrorResume(DuplicateKeyException.class, e -> Mono.error(BizError.EMAIL_ALREADY_EXISTS));\n}", "CodeBleu_score": 29.54552751778109}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    Connection connection = new Connection();\n    connection.setSource(AuthSourceConstants.EMAIL);\n    connection.setRawId(email);\n    user.getConnections().add(connection);\n    return repository.save(user).map(it -> true).onErrorResume(DuplicateKeyException.class, e -> {\n        if (e.getMessage().contains(\\\"email\\\")) {\\\n            return Mono.error(new BizException(BizError.DUPLICATE_EMAIL, \\\"DUPLICATE_EMAIL\\\", email));\n        }\n        return Mono.error(e);\n    });\n}", "CodeBleu_score": 33.47944165136414}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    Connection connection = new Connection();\n    connection.setSource(AuthSourceConstants.EMAIL);\n    connection.setRawId(email);\n    user.getConnections().add(connection);\n    return repository.save(user).thenReturn(true).onErrorResume(DuplicateKeyException.class, e -> {\n        if (e.getCause() instanceof MongoWriteException mongoWriteException) {\n            if (mongoWriteException.getCode() == 11000) {\n                return Mono.error(new BizException(BizError.DUPLICATE_EMAIL, \\\"DUPLICATE_EMAIL\\\", email));\n            }\n        }\n        return Mono.error(e);\n    });\n}", "CodeBleu_score": 37.138485269875545}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return findById(userId)\n            .flatMap(user -> {\n                if (!encryptionService.isValidPassword(oldPassword, user.getPassword())) {\n                    return Mono.error(new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\"));\n                }\n                user.setPassword(encryptionService.encryptPassword(newPassword));\n                return repository.save(user).then(Mono.just(true));\n            });\n}", "CodeBleu_score": 27.16599225264167}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return findById(userId)\n            .flatMap(user -> {\n                if (!encryptionService.isPasswordValid(oldPassword, user.getPassword())) {\n                    return Mono.error(new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\", \"\"));\n                }\n                user.setPassword(encryptionService.encryptPassword(newPassword));\n                return repository.save(user);\n            })\n            .then(Mono.just(true))\n            .onErrorResume(throwable -> {\n                if (throwable instanceof BizException) {\n                    return Mono.error(throwable);\n                }\n                return Mono.error(new BizException(BizError.UNKNOWN_ERROR, \"UNKNOWN_ERROR\", \"\"));\n            });\n}", "CodeBleu_score": 39.48444670020926}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return findById(userId)\n            .flatMap(user -> {\n                if (!encryptionService.isPasswordValid(user.getPassword(), oldPassword)) {\n                    return Mono.error(new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\", \"\"));\n                }\n                user.setPassword(encryptionService.encryptPassword(newPassword));\n                return repository.save(user).then(Mono.just(true));\n            });\n}", "CodeBleu_score": 24.169468408904418}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t        return orgMemberService.getOrgMemberGroups(orgMember)\n                .filter(group -> !group.isAllUsersGroup())\n                .flatMap(group -> {\n                    if (withoutDynamicGroups) {\n                        return Mono.just(group);\n                    }\n                    return orgMemberService.getDynamicGroup(orgMember, group.getId())\n                            .map(dynamicGroup -> {\n                                dynamicGroup.setName(group.getName());\n                                return dynamicGroup;\n                            });\n                })\n                .map(group -> {\n                    Map<String, String> groupMap = new HashMap<>();\n                    groupMap.put(GROUP_ID, group.getId());\n                    groupMap.put(GROUP_NAME, group.getName());\n                    return groupMap;\n                })\n                .collectList();\n    }", "CodeBleu_score": 32.3683344164705}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t        if (orgMember.isAdmin()) {\n            return getAllGroups(userId, withoutDynamicGroups, locale);\n        }\n        return getGroupsByMemberId(userId, orgMember.getId(), withoutDynamicGroups, locale);\n    }", "CodeBleu_score": 13.447988887097729}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t        if (withoutDynamicGroups) {\n            return Mono.just(Collections.emptyList());\n        }\n        if (orgMember.isAdmin()) {\n            return groupService.findAllGroupIdsByOrgId(orgMember.getOrgId())\n                    .map(groupIds -> groupIds.stream()\n                            .filter(group -> !group.equals(GroupConstants.ALL_USERS))\n                            .map(groupId -> buildGroupMap(groupId, locale))\n                            .collect(Collectors.toList()));\n        }\n        return groupService.findGroupsByUserIdAndOrgId(userId, orgMember.getOrgId())\n                .map(groups -> groups.stream()\n                        .filter(group -> !group.equals(GroupConstants.ALL_USERS))\n                        .map(group -> buildGroupMap(group.getId(), locale))\n                        .collect(Collectors.toList()));\n    }", "CodeBleu_score": 31.91643466460276}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    return Mono.just(UserStatus.builder()\n            .id(userId)\n            .hasShowNewUserGuidance(true)\n            .build())\n        .flatMap(userStatus -> mongoUpsertHelper.upsert(userStatus, Update.update(\"hasShowNewUserGuidance\", true), UserStatus.class));\n}", "CodeBleu_score": 36.243239579476025}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    return repository.upsert(userId, new Update().set(\"hasShowNewUserGuidance\", true));\n}", "CodeBleu_score": 14.332437357052294}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    UserStatus userStatus = UserStatus.builder()\n            .id(userId)\n            .hasShowNewUserGuidance(true)\n            .build();\n    return mongoUpsertHelper.upsert(repository, userStatus.getId(), userStatus, Update.update(\"hasShowNewUserGuidance\", true));\n}", "CodeBleu_score": 75.89984842301494}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition is nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue is nil\")\n\t}\n\n\trg := rungroup.New(context.Background())\n\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\trg.Go(func(ctx context.Context) error {\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t\treturn nil\n\t\t\t})\n\t\t}\n\t}\n\n\trg.Wait()\n}", "CodeBleu_score": 42.690969304305725}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition is nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue is nil\")\n\t}\n\n\trungroup.New(context.Background(), 0).Go(func(ctx context.Context) error {\n\t\tfor k, p := range c.partitions {\n\t\t\tif predicatePartition(k, p) {\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t})\n}", "CodeBleu_score": 39.95185540980252}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\t// Ensure partition predicate is not nil and panic if value predicate is nil\n\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition is nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue is nil\")\n\t}\n\n\t// Create a run group to handle clearing matching entries across multiple partitions concurrently\n\trg := rungroup.New()\n\n\t// Enqueue matching partitions for processing\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\trg.Go(func() error {\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t\treturn nil\n\t\t\t})\n\t\t}\n\t}\n\n\t// Wait for all tasks to complete\n\trg.Wait()\n}", "CodeBleu_score": 39.66792004022296}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\t// Check that the number of partitions and total weight quantity are greater than zero.\n\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\t// Calculate the average weight per partition.\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\n\t// Calculate the maximum size per partition based on the provided formula.\n\tmaxSizePerPartition := int(math.Floor(float64(maxItemsTotal) * avgWeightPerPartition))\n\n\t// Return the maximum size per partition.\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 42.135323140940585}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\t// Check that the number of partitions and total weight quantity are greater than zero.\n\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\t// Calculate the average weight per partition.\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\n\t// Calculate the maximum size per partition based on the provided formula.\n\tmaxSizePerPartition := int(math.Floor(float64(maxItemsTotal) / averageWeightPerPartition))\n\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 42.04879778307854}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\tmaxSizePerPartition := int(math.Floor(float64(maxItemsTotal) / avgWeightPerPartition))\n\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 42.3536029320936}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t    Connection connection = connectionFactory.create().block();\n    ConnectionMetadata metadata = connection.getMetadata();\n    if (Objects.isNull(metadata)) {\n            return new HashMap<>();\n        }\n        Map<String, Object> map = new HashMap<>();\n        map.put(\\\"product\\\", metadata.getProduct());\n        map.put(\\\"version\\\", metadata.getVersion());\n        return map;\n    }", "CodeBleu_score": 47.155932471917886}, {"code": "public Map<String, Object> contributorMap(){\n\t    Map<String, Object> map = new HashMap<>();\n    ConnectionMetadata metadata = connectionFactory.create().block(null);\n    if (Objects.nonNull(metadata)) {\n            map.put(\\\"productName\\\", metadata.getProductName());\n            map.put(\\\"databaseVersion\\\", metadata.getDatabaseVersion());\n        }\n        return map;\n    }", "CodeBleu_score": 49.90609126572844}, {"code": "public Map<String, Object> contributorMap(){\n\t    Map<String, Object> databaseInfo = new HashMap<>();\n    ConnectionMetadata connectionMetadata = connectionFactory.create().block().getMetadata();\n    if (Objects.nonNull(connectionMetadata)) {\n            databaseInfo.put(\\\"productName\\\", connectionMetadata.getProductName());\n            databaseInfo.put(\\\"databaseVersion\\\", connectionMetadata.getDatabaseVersion());\n        }\n        return databaseInfo;\n    }", "CodeBleu_score": 46.40421091964869}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    var user = SystemSetting.get(configMap, User.GROUP, User.class);\n    if (user == null) {\n        info.setAllowRegistration(false);\n        info.setMustVerifyEmailOnRegistration(false);\n    } else {\n        info.setAllowRegistration(user.getEnable() != null && user.getEnable());\n        info.setMustVerifyEmailOnRegistration(user.getMustVerifyEmailOnRegistration() != null && user.getMustVerifyEmailOnRegistration());\n    }\n}", "CodeBleu_score": 72.3888508360993}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    var user = SystemSetting.get(configMap, User.GROUP, User.class);\n    if (user == null) {\n        info.setAllowRegistration(false);\n        info.setMustVerifyEmailOnRegistration(false);\n    } else {\n        info.setAllowRegistration(user.getEnable() != null && user.getEnable());\n        info.setMustVerifyEmailOnRegistration(user.getMustVerifyEmailOnRegistration() != null && user.getMustVerifyEmailOnRegistration());\n    }\n}", "CodeBleu_score": 72.3888508360993}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    var user = SystemSetting.get(configMap, User.GROUP, User.class);\n    if (user == null) {\n        info.setAllowRegistration(false);\n        info.setMustVerifyEmailOnRegistration(false);\n    } else {\n        info.setAllowRegistration(user.getEnable() != null && user.getEnable());\n        info.setMustVerifyEmailOnRegistration(user.getMustVerifyEmailOnRegistration() != null && user.getMustVerifyEmailOnRegistration());\n    }\n}", "CodeBleu_score": 72.3888508360993}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t    ThreadGroup threadGroup = new ThreadGroup(\\\"RestartThreadGroup\\\");\n        Thread thread = new Thread(threadGroup, () -> {\n            try (Closeable closeable = context.close()) {\n                closeable.close();\n            }\n            threadGroup.uncaughtException(Thread.currentThread(), new Exception(\\\"Restarting...\\\"));\n            application.run(args);\n        }, \\\"RestartThread\\\", 1 << 24);\n        thread.setContextClassLoader(application.getClassLoader());\n        thread.setDaemon(false);\n        thread.start();\n        return \\\"Restarting...\\\";\n    }", "CodeBleu_score": 27.29775294340275}, {"code": "public Object restart(){\n\t    ThreadGroup threadGroup = new ThreadGroup(\\\"Restart ThreadGroup\\\");\n\n    Thread thread = new Thread(threadGroup, () -> {\n        threadGroup.setDaemon(false);\n        Thread.currentThread().setContextClassLoader(application.getClassLoader());\n        application.run(args);\n    },\\\"Restart Thread\\\");\n\n    thread.start();\n    return \\\"Restart has begun\\\";\n}", "CodeBleu_score": 42.56749771776151}, {"code": "public Object restart(){\n\t    ThreadGroup threadGroup = new ThreadGroup(\\\"Restart Thread Group\\\");\n        threadGroup.setDaemon(false);\n        Thread thread = new Thread(threadGroup, () -> {\n            try {\n                ClassLoader classLoader = this.getClass().getClassLoader();\n                thread.setContextClassLoader(classLoader);\n                thread.start();\n            } catch (Exception e) {\n                log.error(\\\"Restart failed\\\", e);\n            }\n        });\n        thread.start();\n        return \\\"Restarting...\\\";\n    }", "CodeBleu_score": 39.328562576200824}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t    configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n    configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n}", "CodeBleu_score": 71.82220753180427}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t    configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n    configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n}", "CodeBleu_score": 71.82220753180427}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t    configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n    configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n}", "CodeBleu_score": 71.82220753180427}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return route(method(HttpMethod.GET).and(accept(MediaType.TEXT_HTML)).and(path(\"console/**\").and(path(\"!/console/assets/**\").negate())).and(WebSocketRequestPredicate.negate()), request -> {\n        // Get the console index file path from the application properties\n        String consoleIndexPath = haloProp.getConsole().getIndex();\n        // Check if the console index file exists\n        if (checkDirectoryTraversal(consoleIndexPath)) {\n            return ServerResponse.notFound().build();\n        }\n        // Serve the console index file\n        return ServerResponse.ok().contentType(MediaType.TEXT_HTML).body(BodyInserters.fromResource(consoleIndexPath));\n    });\n}", "CodeBleu_score": 38.91625431634118}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return route(\n        // match GET requests to \"/console/**\" excluding \"/console/assets/**\", accepting HTML, and not being a WebSocket request\n        method(HttpMethod.GET).and(accept(MediaType.TEXT_HTML)).and(new WebSocketRequestPredicate()).and(path(\"/console/**\").and(path(\"!/console/assets/**\")).and(path(\"!/console/index.html\"))),\n        // serve the console index.html file from the specified location\n        request -> ServerResponse.ok().contentType(MediaType.TEXT_HTML).body(BodyInserters.fromResource(\"classpath:/static/console/index.html\"))\n    );\n}", "CodeBleu_score": 33.85853702754959}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return route(\n        // Match all GET requests to \"/console/**\" excluding \"/console/assets/**\"\n        method(HttpMethod.GET),\n        // Accept HTML\n        accept(MediaType.TEXT_HTML),\n        // Not a WebSocket request\n        !WebSocketRequestPredicate.create(),\n        // Serve the console index.html file from the specified location\n        request -> {\n            // Get the console index file path from the configuration\n            String consoleIndexFilePath = haloProp.getConsole().getIndexFilePath();\n            // Check if the file path is not empty\n            if (consoleIndexFilePath.isEmpty()) {\n                // If the file path is empty, return a 404 error\n                return ServerResponse.notFound().build();\n            }\n            // Check if the file path starts with \"classpath:\"\n            if (consoleIndexFilePath.startsWith(FILE_URL_PREFIX)) {\n                // If the file path starts with \"classpath:\", resolve the file path\n                String resolvedFilePath = checkDirectoryTraversal(consoleIndexFilePath.substring(FILE_URL_PREFIX.length()));\n                // Load the file from the classpath\n                var resource = applicationContext.getResource(resolvedFilePath);\n                // Create a response with the file content and the content type\n                return ServerResponse.ok().contentType(MediaType.TEXT_HTML).body(BodyInserters.fromResource(resource));\n            }\n            // If the file path does not start with \"classpath:\", return a 404 error\n            return ServerResponse.notFound().build();\n        }\n    );\n}", "CodeBleu_score": 34.23898553241364}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    var ucPredicate = method(HttpMethod.GET)\n        .and(path(\"/uc/**\").and(path(\"/uc/assets/**\").negate()))\n        .and(accept(MediaType.TEXT_HTML))\n        .and(new WebSocketRequestPredicate().negate());\n    return route(ucPredicate,\n        request -> this.serveIndex(haloProp.getUc().getLocation() + \"index.html\"));\n}", "CodeBleu_score": 90.38101869192259}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    var consolePredicate = method(HttpMethod.GET)\n        .and(path(\"/uc/**\").and(path(\"/uc/assets/**\").negate()))\n        .and(accept(MediaType.TEXT_HTML))\n        .and(new WebSocketRequestPredicate().negate());\n    return route(consolePredicate,\n        request -> this.serveIndex(haloProp.getUc().getLocation() + \"index.html\"));\n}", "CodeBleu_score": 99.83156296292583}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    var consolePredicate = method(HttpMethod.GET)\n        .and(path(\"/uc/**\").and(path(\"/uc/assets/**\").negate()))\n        .and(accept(MediaType.TEXT_HTML))\n        .and(new WebSocketRequestPredicate().negate());\n    return route(consolePredicate, request -> this.serveIndex(haloProp.getConsole().getLocation() + \"index.html\"));\n}", "CodeBleu_score": 94.62591286548479}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    return new InMemoryReactiveIndexedSessionRepository(new ConcurrentHashMap<>(), sessionProperties.getTimeout().toMillis());\n}", "CodeBleu_score": 14.272881079961234}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    return new InMemoryReactiveIndexedSessionRepository(\n        ConcurrentHashMap::new,\n        sessionProperties.getTimeout().toMillis(),\n        serverProperties.getServlet().getSession().getTimeout().toMillis()\n    );\n}", "CodeBleu_score": 21.556931670436736}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    @Bean\n    public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository(SessionProperties sessionProperties, ServerProperties serverProperties) {\n        var sessionTimeout = sessionProperties.getTimeout().getSeconds();\n        var defaultMaxInactiveInterval = serverProperties.getServlet().getSession().getTimeout().getSeconds();\n        var sessionTimeoutInSeconds = sessionTimeout > 0 ? sessionTimeout : defaultMaxInactiveInterval;\n        var sessionMap = new ConcurrentHashMap<String, MapSession>();\n        return new InMemoryReactiveIndexedSessionRepository(sessionMap, sessionTimeoutInSeconds);\n    }\n}", "CodeBleu_score": 46.066595963684165}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    var service = new DefaultUserDetailService(userService, roleService);\n    service.setEnableTwoFactorAuthentication(haloProperties.getSecurity().getEnableTwoFactorAuthentication());\n    return service;\n}", "CodeBleu_score": 43.20789200719754}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    var userDetailsService = new DefaultUserDetailService(userService, roleService);\n    userDetailsService.setTwoFactorAuthenticationEnabled(haloProperties.getSecurity().isTwoFactorAuthenticationEnabled());\n    return userDetailsService;\n}", "CodeBleu_score": 46.99156868142137}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    var service = new DefaultUserDetailService(userService, roleService);\n    service.setTwoFactorEnabled(haloProperties.getSecurity().isTwoFactorEnabled());\n    return service;\n}", "CodeBleu_score": 41.843780107951304}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Map<String, Object> annotations = new LinkedHashMap<>();\n    annotations.put(\\\"avatar\\\", avatar);\n    annotations.put(\\\"website\\\", website);\n    return new Comment.CommentOwner(\\\"email\\\", email, displayName, annotations);\n}", "CodeBleu_score": 28.332109753950895}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Map<String, String> annotations = new LinkedHashMap<>();\n    if (StringUtils.isNotBlank(avatar)) {\n            annotations.put(\\\"avatar\\\", avatar);\n        }\n        if (StringUtils.isNotBlank(website)) {\n            annotations.put(\\\"website\\\", website);\n        }\n        return new Comment.CommentOwner(\\\"email\\\", email, displayName, annotations);\n    }", "CodeBleu_score": 39.70076922552342}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Map<String, String> annotations = new LinkedHashMap<>(3);\n    annotations.put(\"avatar\", StringUtils.defaultIfBlank(avatar, \"\"));\n    annotations.put(\"website\", StringUtils.defaultIfBlank(website, \"\"));\n    return new Comment.CommentOwner(email, displayName, annotations);\n}", "CodeBleu_score": 27.565869210021273}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    Post.PostOwner postOwner = post.getSpec().getOwner();\n    if (postOwner.getKind().equals(Comment.CommentOwner.Kind.EMAIL)) {\n        User user = client.fetch(User.class, postOwner.getName()).orElse(null);\n        if (user != null) {\n            return user.getSpec().getEmail().equals(commentOwner.getName());\n        }\n    }\n    return postOwner.getName().equals(commentOwner.getName());\n}", "CodeBleu_score": 49.497948002302586}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    Post.PostOwner postOwner = post.getSpec().getOwner();\n    if (postOwner.getKind().equals(User.KIND)) {\n        return client.fetch(User.class, postOwner.getName()).map(user -> user.getSpec().getEmail().equals(commentOwner.getEmail())).orElse(false);\n    }\n    return postOwner.getName().equals(commentOwner.getName());\n}", "CodeBleu_score": 43.68957718733004}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    Post.PostOwner postOwner = post.getSpec().getOwner();\n    if (postOwner.getKind().equals(Comment.CommentOwner.Kind.EMAIL)) {\n        User user = client.fetch(User.class, postOwner.getName()).orElse(null);\n        if (user != null) {\n            return user.getSpec().getEmail().equals(commentOwner.getName());\n        }\n    }\n    return postOwner.getName().equals(commentOwner.getName());\n}", "CodeBleu_score": 49.497948002302586}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\t    ListOptions listOptions = labelAndFieldSelectorToListOptions(exchange);\n\n    // Build field query\n    FieldSelector fieldSelector = listOptions.getFieldSelector();\n    if (fieldSelector == null) {\n        fieldSelector = new FieldSelector();\n    }\n    FieldSelector.FieldQuery fieldQuery = fieldSelector.getQuery();\n    if (fieldQuery == null) {\n        fieldQuery = new FieldSelector.FieldQuery();\n    }\n    if (getKeyword() != null) {\n            fieldQuery.setName(getKeyword());\n        }\n        if (getOwnerName() != null) {\n            fieldQuery.setOwnerName(getOwnerName());\n        }\n        if (getOwnerKind() != null) {\n            fieldQuery.setOwnerKind(getOwnerKind());\n        }\n        fieldSelector.setQuery(fieldQuery);\n\n    // Add conditions\n    ListOptions.Builder builder = ListOptions.builder();\n    if (getKeyword() != null) {\n            builder.matching(and(contains(\\\"spec.authorName\\\"), contains(\\\"spec.authorEmail\\\"), contains(\\\"spec.authorUrl\\\"), contains(\\\"spec.content\\\")));\n        }\n        if (getOwnerName() != null) {\n            builder.matching(equal(\\\"spec.owner.name\\\", getOwnerName()));\n        }\n        if (getOwnerKind() != null) {\n            builder.matching(equal(\\\"spec.owner.kind\\\", getOwnerKind()));\n        }\n        builder.fieldSelector(fieldSelector);\n\n    // Set field selector in ListOptions\n    listOptions = builder.build();\n    return listOptions;\n    }", "CodeBleu_score": 29.971229150676503}, {"code": "public ListOptions toListOptions(){\n\t    var fieldSelector = FieldSelector.of(queryParams);\n    var fieldQuery = QueryFactory.query();\n    if (StringUtils.isNotBlank(getKeyword())) {\n            fieldQuery = fieldQuery.and(contains(\\\"spec.content\\\", getKeyword()));\n        }\n        if (StringUtils.isNotBlank(getOwnerName())) {\n            fieldQuery = fieldQuery.and(equal(\\\"spec.owner.name\\\", getOwnerName()));\n        }\n        fieldQuery = fieldQuery.and(equal(\\\"spec.owner.kind\\\", getOwnerKind()));\n        return ListOptions.listOptions(fieldQuery, fieldSelector);\n    }", "CodeBleu_score": 37.85431118687995}, {"code": "public ListOptions toListOptions(){\n\t    FieldSelector fieldSelector = QueryParamBuildUtil.buildFieldSelector(queryParams, exchange);\n    ListOptions.Builder builder = ListOptions.builder();\n    if (StringUtils.isNotBlank(getKeyword())) {\n            builder.field(and(contains(\\\"spec.content\\\", getKeyword()), contains(\\\"spec.author.nickname\\\", getKeyword())));\n        }\n        if (StringUtils.isNotBlank(getOwnerName())) {\n            builder.field(equal(\\\"spec.owner.name\\\", getOwnerName()));\n        }\n        if (StringUtils.isNotBlank(getOwnerKind())) {\n            builder.field(equal(\\\"spec.owner.kind\\\", getOwnerKind()));\n        }\n        builder.fieldSelector(fieldSelector);\n\n    return builder.build();\n}", "CodeBleu_score": 29.287622413122705}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    Assert.notNull(commentName, \"The commentName must not be null.\");\n    return counterService.fetch(commentName)\n        .map(counter -> {\n            var stats = new CommentStats();\n            stats.setUpvoteCount(counter.getUpvoteCount());\n            return stats;\n        })\n        .defaultIfEmpty(new CommentStats());\n}", "CodeBleu_score": 60.49014438080742}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    Assert.notNull(commentName, \\\"The commentName must not be null.\\\");\n    return counterService.getCounter(commentName)\n            .map(counter -> new CommentStats(counter.getUpvote()));\n}", "CodeBleu_score": 19.30978473663907}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    Assert.notNull(commentName, \"The commentName must not be null.\");\n    return counterService.fetch(Comment.COUNTER_PREFIX + commentName)\n        .map(counter -> new CommentStats(counter.getUpvoteCount()));\n}", "CodeBleu_score": 62.7001017879176}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t    Subscription subscriber = Subscription.builder()\n        .withUserIdentity(identity)\n        .withInterestReason(NotificationReasonConst.SOMEONE_REPLIED_TO_YOU, \"replied_owner=\" + identity.getUserName())\n        .build();\n    notificationCenter.subscribe(subscriber);\n}", "CodeBleu_score": 36.49831252257536}, {"code": "void subscribeReply(UserIdentity identity){\n\t    Subscription subscriber = Subscription.builder()\n                .withUserIdentity(identity)\n                .withReason(NotificationReasonConst.SOMEONE_REPLIED_TO_YOU, condition -> {\n                    String repliedOwner = condition.getConditionValue(\\\"repliedOwner\\\");\n                    return StringUtils.isNotBlank(repliedOwner) && repliedOwner.equals(identity.getUserName());\n                })\n                .build();\n        notificationCenter.subscribe(subscriber);\n    }", "CodeBleu_score": 37.277273867666274}, {"code": "void subscribeReply(UserIdentity identity){\n\t    Subscription subscriber = Subscription.builder()\n                .userIdentity(identity)\n                .build();\n        subscriber.setReason(NotificationReasonConst.SOMEONE_REPLIED_TO_YOU);\n        subscriber.setCondition(condition -> {\n            var repliedOwner = condition.getReply().getSpec().getOwner();\n            return StringUtils.equals(repliedOwner.getName(), identity.getName());\n        });\n        notificationCenter.subscribe(subscriber);\n    }", "CodeBleu_score": 42.19284090344363}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\t    comment.setApproved(true);\n    comment.setApprovedTime(Instant.now());\n    return client.update(comment).retryWhen(Retry.backoff(3, Duration.ofSeconds(1)));\n}", "CodeBleu_score": 17.722097495372964}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t    comment.getSpec().setApproved(true);\n    comment.getSpec().setApprovedAt(Instant.now());\n    return client.update(comment, Comment.class)\n        .onErrorResume(OptimisticLockingFailureException.class, update -> approveComment(comment, update));\n}", "CodeBleu_score": 29.07346665238535}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t    comment.getSpec().setApproved(true);\n    comment.getSpec().setApprovedAt(Instant.now());\n    return client.update(comment)\n        .onErrorResume(OptimisticLockingFailureException.class,\n            e -> client.update(comment, update -> update.setSpec(comment.getSpec())))\n        .thenReturn(comment);\n}", "CodeBleu_score": 36.54446438145819}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->component($this);\n    }\n\n    if ($action instanceof HasRecord) {\n        $action->record($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 59.969935371806486}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->associateWithLivewire($this);\n    }\n\n    if ($action instanceof HasRecord && $this instanceof HasRecord) {\n        $action->setRecord($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 60.97411838433812}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->associateWith($this);\n    }\n\n    if ($this instanceof HasRecord && $action instanceof HasRecord) {\n        $action->setRecord($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 63.758199652394055}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    $url = $this->evaluate($this->successRedirectUrl);\n\n    if (filled($url)) {\n        $this->redirect($url);\n    }\n\n    return $this;\n}", "CodeBleu_score": 95.27650964273269}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    $url = $this->evaluate($this->successRedirectUrl);\n\n    if (filled($url)) {\n        $this->redirect($url);\n    }\n\n    return $this;\n}", "CodeBleu_score": 95.27650964273269}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    $url = $this->evaluate($this->successRedirectUrl);\n\n    if (filled($url)) {\n        $this->redirect($url);\n    }\n\n    return $this;\n}", "CodeBleu_score": 95.27650964273269}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if (! $record || ! method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagModel = Tag::getTagClass();\n\n    $tags = $tagModel::findOrCreate($state, $record->getTable(), $record->getKeyName());\n\n    $record->tags()->sync($tags->pluck('id'));\n}", "CodeBleu_score": 26.35458269819858}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if (! $record) {\n        return;\n    }\n\n    $tagModel = Tag::getTagClass();\n\n    $tagNames = array_map(fn (string $tagName) => trim($tagName), $state);\n    $tagNames = array_filter($tagNames);\n    $tagNames = array_unique($tagNames);\n\n    $tags = $tagModel::findOrCreate($tagNames);\n\n    $record->syncTags($tags);\n}", "CodeBleu_score": 27.778546132722216}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if (! $record || ! method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagModelClass = $record->tags()->getRelated()::class;\n\n    $tagNames = array_map(static fn (string $tagName) => trim($tagName), $state);\n    $tagNames = array_filter($tagNames);\n\n    $tags = [];\n\n    foreach ($tagNames as $tagName) {\n        $tags[] = $tagModelClass::findOrCreate($tagName, $record->getTable());\n    }\n\n    $record->tags()->sync(collect($tags)->pluck('id')->toArray());\n}", "CodeBleu_score": 39.05668198983033}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := paths.DissectRepoPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope := &authz.Scope{\n\t\tSpacePath: spacePath,\n\t\tResource:  types.ResourceRepository,\n\t}\n\n\tresource := &authz.Resource{\n\t\tType:    types.ResourceRepository,\n\t\tName:    repoName,\n\t\tDetails: &authz.RepositoryDetails{PipelineIdentifier: pipelineIdentifier},\n\t}\n\n\treturn authorizer.Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 65.85446535498485}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := paths.DissectRepositoryPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope := types.NewScope(spacePath, repoName)\n\tresource := types.NewResource(enum.Pipeline, pipelineIdentifier)\n\n\treturn authorizer.Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 52.150797353004386}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := paths.DissectRepositoryPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tscope := fmt.Sprintf(\"%s/%s\", spacePath, repoName)\n\tresource := fmt.Sprintf(\"pipeline/%s\", pipelineIdentifier)\n\treturn authorizer.Check(ctx, session, types.Scope(scope), types.Resource(resource), permission)\n}", "CodeBleu_score": 48.25274409574022}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tscope, resource, err := space.ScopeResource()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"scope resource: %w\", err)\n\t}\n\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 37.49133959533093}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparent := paths.GetParentSpace(space.Path)\n\tscope := authz.Scope{\n\t\tType:   enum.SpaceType,\n\t\tParent: parent,\n\t\tName:   space.Name,\n\t}\n\tresource := authz.Resource{\n\t\tType:   enum.SpaceType,\n\t\tParent: parent,\n\t\tName:   space.Name,\n\t}\n\treturn authz.Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 54.453846903917956}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparent, name := paths.DissectSpace(space.Path)\n\tscope := fmt.Sprintf(\\\"%s/%s\\\", parent, name)\n\tresource := fmt.Sprintf(\\\"%s/%s/%s\\\", parent, name, name)\n\treturn authz.Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 47.798112977917704}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"failed to marshal data: %w\", err)\n\t\t}\n\n\t\treturn source, nil\n\t}\n\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\n\tif err := decoder.Decode(data); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to decode source: %w\", err)\n\t}\n\n\tencoder := json.NewEncoder(bytes.NewBuffer(nil))\n\tencoder.SetEscapeHTML(false)\n\n\tvar result bytes.Buffer\n\tif err := encoder.Encode(data); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to encode data: %w\", err)\n\t}\n\n\treturn bytes.TrimSuffix(result.Bytes(), []byte(\"\n\")), nil\n}", "CodeBleu_score": 60.892851342151765}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\t// If the source is empty, marshal the provided data and return it.\n\tif len(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"failed to marshal data: %w\", err)\n\t\t}\n\t\treturn source, nil\n\t}\n\n\t// Decode the source JSON, disallowing unknown fields.\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\tif err := decoder.Decode(data); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to decode JSON: %w\", err)\n\t}\n\n\t// Encode the data to ensure it conforms to the required format.\n\tencoded, err := json.Marshal(data)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to encode data: %w\", err)\n\t}\n\n\t// Remove any trailing newline from the result.\n\tencoded = bytes.TrimSuffix(encoded, []byte(\"\n\"))\n\n\treturn encoded, nil\n}", "CodeBleu_score": 56.793457245058775}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\t// If the source is empty, marshal the provided data.\n\tif len(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"failed to marshal data: %w\", err)\n\t\t}\n\t}\n\n\t// Decode the source JSON, disallowing unknown fields.\n\tdec := json.NewDecoder(bytes.NewReader(source))\n\tdec.DisallowUnknownFields()\n\tif err := dec.Decode(data); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to decode source JSON: %w\", err)\n\t}\n\n\t// Encode the data to ensure it conforms to the required format.\n\tvar buf bytes.Buffer\n\tenc := json.NewEncoder(&buf)\n\tenc.SetEscapeHTML(false)\n\tif err := enc.Encode(data); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to encode data: %w\", err)\n\t}\n\n\t// Remove any trailing newline from the result.\n\tresult := bytes.TrimSuffix(buf.Bytes(), []byte(\"\n\"))\n\n\treturn result, nil\n}", "CodeBleu_score": 57.28935186819195}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.repoStore.Get(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := c.authorizer.CheckPermission(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 40.94355238347563}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.repoStore.Get(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, usererror.Wrap(err, \"failed to get repository\")\n\t}\n\n\tif err := c.authorizer.Authorize(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, usererror.Wrap(err, \"failed to authorize session\")\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 48.51053594162853}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.repoStore.Get(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, usererror.Wrap(err, \"failed to get repository\")\n\t}\n\n\tok, err := c.authorizer.Can(ctx, session, repo, reqPermission)\n\tif err != nil {\n\t\treturn nil, usererror.Wrap(err, \"failed to check permissions\")\n\t}\n\tif !ok {\n\t\treturn nil, usererror.New(\n\t\t\t\"insufficient permissions\",\n\t\t\tusererror.WithCode(usererror.CodeUnauthorized),\n\t\t)\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 50.60106030101744}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.Empty:      func(in *ReportInput, s *auth.Session) error { return nil },\n\t\tenum.Raw:        func(in *ReportInput, s *auth.Session) error { return nil },\n\t\tenum.Markdown:   func(in *ReportInput, s *auth.Session) error { return nil },\n\t\tenum.Pipeline:   func(in *ReportInput, s *auth.Session) error { return nil },\n\t\tenum.Table:      func(in *ReportInput, s *auth.Session) error { return nil },\n\t\tenum.Image:      func(in *ReportInput, s *auth.Session) error { return nil },\n\t\tenum.Text:       func(in *ReportInput, s *auth.Session) error { return nil },\n\t\tenum.MarkdownV2: func(in *ReportInput, s *auth.Session) error { return nil },\n\t}\n}", "CodeBleu_score": 20.22244078921797}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.EmptyPayloadKind: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.RawPayloadKind: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.MarkdownPayloadKind: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.PipelinePayloadKind: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t}\n}", "CodeBleu_score": 23.368737560691095}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty:   EmptySanitizer,\n\t\tenum.CheckPayloadKindRaw:     RawSanitizer,\n\t\tenum.CheckPayloadKindMarkdown: RawSanitizer,\n\t\tenum.CheckPayloadKindPipeline: PipelineSanitizer,\n\t}\n}", "CodeBleu_score": 24.972010229755355}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t  self.state.on_render = on_render\n\n  if not self.state.is_attached_to_screen then\n    vim.api.nvim_buf_attach(self.bufnr, false, false)\n    self.state.is_attached_to_screen = true\n  end\n\n  return self", "CodeBleu_score": 62.59441554674516}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t  self.state.on_render = on_render\n  if not self.state.is_attached_to_screen then\n    self:attach_to_changes()\n    self.state.is_attached_to_screen = true\n  end\n  return self", "CodeBleu_score": 63.178502985288674}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t  self.state.on_render = on_render \n  if not self.state.is_attached_to_screen then \n    self:attach_to_changes({ on_attach = function() self.state.is_attached_to_screen = true end }) \n  end \n  return self ", "CodeBleu_score": 58.91364398540511}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t    -- Check if the buffer is valid\n    if not self.filename then\n        console.error('Buffer:watch', 'Invalid buffer')\n        return\n    end\n\n    -- Check if a callback function is provided\n    if not callback then\n        console.error('Buffer:watch', 'No callback provided')\n        return\n    end\n\n    -- Watch the buffer's filename\n    self.watcher:watch(self.filename, callback)", "CodeBleu_score": 39.848584010154156}, {"code": "function Buffer:watch(callback)\n\t  -- Check if the buffer is valid and has a filename\n  if not self.filename or self.filename == '' then\n    return\n  end\n\n  -- Create a new file watcher for the buffer's filename\n  local watcher = self.watcher\n  watcher:watch(self.filename, function()\n    -- If the buffer is valid and a callback is provided, execute the callback function\n    if self.filename and self.filename ~= '' and callback then\n      callback()\n    end\n  end)", "CodeBleu_score": 44.82442754077811}, {"code": "function Buffer:watch(callback)\n\t  -- Check if the buffer is valid and a callback is provided.\n  if not self.filename or self.filename == '' then\n    console.error('Buffer:watch: Buffer has no filename')\n    return\n  end\n  if not callback then\n    console.error('Buffer:watch: No callback provided')\n    return\n  end\n\n  -- Watch the buffer's filename and run the callback function when changes are detected.\n  self.watcher:watch(self.filename, function()\n    -- Check if the buffer is valid.\n    if not self.filename or self.filename == '' then\n      console.error('Buffer:watch: Buffer has no filename')\n      return\n    end\n\n    -- Run the callback function.\n    callback()\n  end)", "CodeBleu_score": 42.84412292675515}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t  if self.hex then\n    return self.hex\n  end\n\n  local spec = self.spec\n  local attr = spec.attr\n  local fg = spec.fg\n  local bg = spec.bg\n\n  if attr == 'fg' then\n    fg = fg or vim.api.nvim_get_hl_by_name(spec.name, {}).foreground\n  elseif attr == 'bg' then\n    bg = bg or vim.api.nvim_get_hl_by_name(spec.name, {}).background\n  end\n\n  local rgb\n  if fg then\n    rgb = Rgb.from_string(fg)\n  elseif bg then\n    rgb = Rgb.from_string(bg)\n  end\n\n  if rgb then\n    self.rgb = rgb\n    self.hex = rgb:to_hex()\n    return self.hex\n  end", "CodeBleu_score": 54.4836837445586}, {"code": "function Color:to_hex()\n\t    if self.hex then\n        return self.hex\n    end\n\n    local spec = self.spec\n    local attr = spec.attr\n    local highlight = vim.api.nvim_get_hl_by_name(spec.name, true)\n    if highlight then\n        local rgb = Rgb.from_table(highlight.foreground)\n        self.hex = rgb:to_hex()\n        return self.hex\n    end\n\n    return nil", "CodeBleu_score": 55.730876016311534}, {"code": "function Color:to_hex()\n\t  if self.hex then\n    return self.hex\n  end\n\n  local spec = self.spec\n  local attr = vim.fn.get(spec, 'attr', 'foreground')\n  local highlight = vim.fn.get(spec, 'highlight', nil)\n\n  if highlight then\n    local rgb = vim.fn.get(highlight, 'fg', nil)\n    if rgb then\n      self.rgb = Rgb:new(rgb)\n      self.hex = self.rgb:to_hex()\n      return self.hex\n    end\n  end\n\n  local rgb = vim.fn.get(spec, 'rgb', nil)\n  if rgb then\n    self.rgb = Rgb:new(rgb)\n    self.hex = self.rgb:to_hex()\n    return self.hex\n  end\n\n  local hex = vim.fn.get(spec, 'hex', nil)\n  if hex then\n    self.hex = hex\n    return hex\n  end\n\n  local red = vim.fn.get(spec, 'red', nil)\n  local green = vim.fn.get(spec, 'green', nil)\n  local blue = vim.fn.get(spec, 'blue', nil)\n\n  if red and green and blue then\n    self.rgb = Rgb:new(red, green, blue)\n    self.hex = self.rgb:to_hex()\n    return self.hex\n  end\n\n  return nil", "CodeBleu_score": 51.928895421241194}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  local lines = buffer:get_lines()\n  local row = 0\n  for _, line in ipairs(lines) do\n    local col_start, col_end = line:find(pattern)\n    while col_start do\n      self:add_highlight(buffer, hl, row, col_start, col_end)\n      col_start, col_end = line:find(pattern, col_start + 1)\n    end\n    row = row + 1\n  end\n\n  return self", "CodeBleu_score": 55.311489814149574}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  local lines = vim.api.nvim_buf_get_lines(buffer.bufnr, 0, -1, false)\n  local row = 0\n  for _, line in ipairs(lines) do\n    local col_start, col_end = line:find(pattern, 1, true)\n    while col_start do\n      self:add_highlight(buffer, hl, row, col_start - 1, col_end - 1)\n      col_start, col_end = line:find(pattern, col_end, true)\n    end\n    row = row + 1\n  end\n\n  return self", "CodeBleu_score": 48.7100810999293}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  local lines = buffer:get_lines() \n  for row, line in ipairs(lines) do \n    for col_start, col_end in line:gmatch(pattern) do \n      self:add_highlight(buffer, hl, row, col_start, col_end) \n    end \n  end \n  return self ", "CodeBleu_score": 40.20411364892641}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t  local id = string.format('%s_%s_%s', row, col, utils.math.uuid())\n  vim.api.nvim_buf_set_extmark(buffer.bufnr, self.ns_id, id, {\n    virt_text = { { text, hl } },\n    virt_pos = pos,\n    priority = priority,\n  })\n  return id", "CodeBleu_score": 61.2429808122293}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t  local id = string.format('tanvirtin/vgit.nvim/virtual_text/%s/%s/%s/%s', buffer.bufnr, row, col, utils.math.uuid())\n\n  vim.api.nvim_buf_set_extmark(buffer.bufnr, id, {\n    virt_text = {{text, hl}},\n    virt_pos = pos,\n    priority = priority or 100,\n  })\n\n  return id", "CodeBleu_score": 53.58528534345265}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t  local id = string.format('tanvirtin/vgit.nvim/%s/%s/%s/%s/%s', buffer.bufnr, row, col, pos, priority)\n  vim.api.nvim_buf_set_extmark(buffer.bufnr, self.ns_id, id, {\n    start_row = row - 1,\n    start_col = col - 1,\n    end_row = row - 1,\n    end_col = col + #text - 1,\n    virt_text = {\n      {\n        text = text,\n        hl_group = hl,\n      },\n    },\n    hl_mode = 'nostatusline',\n    priority = priority,\n  })\n\n  return id", "CodeBleu_score": 53.66402583525062}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t    local line = ''\n    for i = 1, #output do\n        local char = output:sub(i, i)\n        if char == '", "CodeBleu_score": 23.590373394301913}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal result = ''\n\tlocal line = ''\n\tfor i = 1, #output do\n\t\tlocal c = string.sub(output, i, i)\n\t\tif c == '", "CodeBleu_score": 18.860114766219123}, {"code": "function Spawn:parse_result(output, callback)\n\t    local result = {}\n    local line = {}\n    local i = 1\n    while i <= #output do\n        local c = string.sub(output, i, i)\n        if c == \"", "CodeBleu_score": 23.40927747730816}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t  if self.watcher then\n    return self.watcher\n  end\n\n  self.watcher = luv.fs_event_new()\n  self.watcher:start(path, handler)\n\n  return self.watcher", "CodeBleu_score": 50.262364390335804}, {"code": "function Watcher:watch_file(path, handler)\n\t  if self.watcher then\n    return self.watcher\n  end\n  self.watcher = luv.fs_event_watcher_new(loop)\n  local watcher = self.watcher\n  local interval = self.interval\n  local function on_change()\n    local _, err = pcall(handler)\n    if err then\n      vim.notify(err, vim.log.levels.ERROR)\n    end\n  end\n  watcher:start(path, on_change, interval)\n  return watcher", "CodeBleu_score": 59.130827044463594}, {"code": "function Watcher:watch_file(path, handler)\n\t  if self.watcher then\n    return self.watcher\n  end\n  self.watcher = luv.fs_event_watcher.new()\n  self.watcher:start(path, handler, self.interval)\n  return self.watcher", "CodeBleu_score": 55.55940001261583}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t  local lines = self:lines() \n  local hunks, err = self.git_object:live_hunks(lines) \n  if err then \n    return err \n  end \n\n  self.signs = {} \n  for _, hunk in ipairs(hunks) do \n    for _, line in ipairs(hunk.lines) do \n      local sign_type = signs_setting[line.type] \n      local sign_priority = line.priority or 10 \n      local sign_text = sign_type.text or '' \n      local sign_hl_group = sign_type.hl_group or 'VgitStatus' \n      local sign_opts = { \n        priority = sign_priority, \n        text = sign_text, \n        hl_group = sign_hl_group \n      } \n\n      self.signs[line.number] = sign_opts \n    end \n  end \n\n  self:set_signs(self.signs) \n  return hunks ", "CodeBleu_score": 55.316952041062365}, {"code": "function GitBuffer:live_hunks()\n\t  local hunks = self.git_object:live_hunks() \n  if not hunks then \n    return hunks \n  end \n\n  local lines = vim.api.nvim_buf_get_lines(self.bufnr, 0, -1, false) \n  local line_count = #lines \n\n  -- Set up signs for each line in the hunks. \n  for _, hunk in ipairs(hunks) do \n    local start_line = hunk.start_line \n    local end_line = hunk.end_line \n    local priority = hunk.priority \n    local type = hunk.type \n\n    -- Assign priorities to the lines in the hunk based on their position in the buffer. \n    for i = start_line, end_line do \n      local line = lines[i] \n      local line_num = i - 1 \n      local sign_priority = math.floor(priority * (line_num / line_count)) \n\n      -- Set up the sign for the line. \n      self.signs[i] = { \n        priority = sign_priority, \n        type = type, \n        hunk = hunk, \n      } \n    end \n  end \n\n  -- Update the buffer's signs. \n  self:update_signs() \n\n  return hunks ", "CodeBleu_score": 42.79541950019772}, {"code": "function GitBuffer:live_hunks()\n\t  if self.is_processing then\n    return\n  end\n\n  local lines = self:get_lines()\n  local hunks, error = self.git_object:live_hunks(lines)\n  if error then\n    return error\n  end\n\n  for _, hunk in ipairs(hunks) do\n    for _, line in ipairs(hunk.lines) do\n      local sign_priority = signs_setting.signs[line.type]\n      if sign_priority then\n        local sign_group = self:get_sign_group(sign_priority)\n        sign_group[line.number] = line\n      end\n    end\n  end\n\n  self:update_signs()\n\n  return hunks", "CodeBleu_score": 39.30644884672779}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t  local hunk = patch.hunks[1] \n  local filepath = self.filename.native \n  local tmp_filepath = fs.get_temp_filepath(filepath) \n  local patch_content = patch:get_content() \n  local file_content = fs.read_file(filepath) \n  local content = file_content:sub(1, hunk.old_start) .. patch_content .. file_content:sub(hunk.old_end + 1) \n  fs.write_file(tmp_filepath, content) \n  local _, err = self.git:stage_file(tmp_filepath) \n  fs.delete_file(tmp_filepath) \n  if err then \n    return err \n  end ", "CodeBleu_score": 49.37181454070122}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t  -- Create a temporary file to write the patch content to\n  local tmp_file = vim.fn.tempname()\n  local tmp_file_fd = io.open(tmp_file, \"w\")\n  if tmp_file_fd == nil then\n    return \"Failed to create temporary file for patch\"\n  end\n\n  -- Write the patch content to the temporary file\n  tmp_file_fd:write(patch.content)\n  tmp_file_fd:close()\n\n  -- Stage the hunk using the temporary file\n  local _, err = self.git:run_command(\"add\", \"-p\", tmp_file)\n  if err ~= nil then\n    os.remove(tmp_file)\n    return err\n  end\n\n  -- Remove the temporary file\n  os.remove(tmp_file)\n\n  return nil", "CodeBleu_score": 45.011118595019674}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t  local hunk = patch:get_hunk()\n  local content = hunk:get_content()\n  local temp_filename = os.tmpname()\n  local f = io.open(temp_filename, \"w\")\n  f:write(content)\n  f:close()\n  local result, err = self.git:stage_file(temp_filename, self:tracked_filename(), patch:get_hunk():get_old_start_line())\n  os.remove(temp_filename)\n  if err then\n    return nil, err\n  end\n  return result", "CodeBleu_score": 50.941738482594886}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    OAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());\n    request.addBodyParameter(OAuthConstants.CLIENT_ID, config.getApiKey());\n    request.addBodyParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret());\n    request.addBodyParameter(OAuthConstants.REDIRECT_URI, config.getCallback());\n    request.addBodyParameter(OAuthConstants.VERIFIER, verifier.getValue());\n    request.addBodyParameter(GRANT_TYPE_KEY, GRANT_TYPE_CLIENT_CREDENTIALS);\n    Response response = request.send();\n    return api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 73.42594821309154}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    OAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());\n    request.addBodyParameter(OAuthConstants.CLIENT_ID, config.getApiKey());\n    request.addBodyParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret());\n    request.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n    request.addBodyParameter(OAuthConstants.REDIRECT_URI, config.getCallback());\n    request.addBodyParameter(GRANT_TYPE_KEY, GRANT_TYPE_CLIENT_CREDENTIALS);\n    Response response = request.send();\n    return api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 73.47727195640645}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    OAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());\n    request.addBodyParameter(OAuthConstants.CLIENT_ID, config.getApiKey());\n    request.addBodyParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret());\n    request.addBodyParameter(GRANT_TYPE_KEY, GRANT_TYPE_CLIENT_CREDENTIALS);\n    request.addBodyParameter(OAuthConstants.VERIFIER, verifier.getValue());\n    Response response = request.send();\n    return api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 73.3897090855214}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    CredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(new AuthScope(host), httpCredentials);\n    context.setCredentialsProvider(credsProvider);\n\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n    context.setAuthCache(authCache);\n\n    LOGGER.log(Level.FINE, \"Added host {0} to auth cache\", host);\n}", "CodeBleu_score": 71.37626988691498}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    CredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(new AuthScope(host), httpCredentials);\n    context.setCredentialsProvider(credsProvider);\n\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n    context.setAuthCache(authCache);\n\n    LOGGER.log(Level.FINE, \"Added host {0} to auth cache\", host);\n}", "CodeBleu_score": 71.37626988691498}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    CredentialsProvider provider = new BasicCredentialsProvider();\n    provider.setCredentials(new AuthScope(host), httpCredentials);\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n    context.setCredentialsProvider(provider);\n    context.setAuthCache(authCache);\n    LOGGER.log(Level.FINE, \"Added {0} to auth cache\", host);\n}", "CodeBleu_score": 77.37265033593228}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins jenkins = Jenkins.getInstance();\n    if (jenkins == null) {\n            throw new IllegalStateException(\\\"Cannot build URL outside of a request handling thread\\\");\n        }\n\n        AvatarCache cache = jenkins.getExtension(AvatarCache.class);\n        if (cache == null) {\n            throw new IllegalStateException(\\\"Cannot build URL outside of a request handling thread\\\");\n        }\n\n        String key = cache.seedCache(source);\n        try {\n            return jenkins.getRootUrl() + ActionURI + \\\"?key=\\\" + URLEncoder.encode(key, \\\"UTF-8\\\") + \\\"&size=\\\" + size;\n        } catch (UnsupportedEncodingException e) {\n            throw new IllegalStateException(\\\"Cannot build URL outside of a request handling thread\\\", e);\n        }\n    }", "CodeBleu_score": 43.98058286548488}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins jenkins = Jenkins.getInstance();\n    AvatarCache avatarCache = jenkins.getExtensionList(AvatarCache.class).get(AvatarCache.class);\n    if (avatarCache == null) {\n            throw new IllegalStateException(\\\"AvatarCache extension not found\\\");\n        }\n        String key = source.getCacheKey();\n        avatarCache.seedCache(key);\n        try {\n            return jenkins.getRootUrl() + ActionURI + \\\"?key=\\\" + URLEncoder.encode(key, \\\"UTF-8\\\") + \\\"&size=\\\" + size;\n        } catch (UnsupportedEncodingException e) {\n            throw new IllegalStateException(\\\"UTF-8 encoding not supported\\\");\n        }\n    }", "CodeBleu_score": 46.64842876211637}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins jenkins = Jenkins.getInstance();\n    if (jenkins == null) {\n        throw new IllegalStateException(\\\"Jenkins instance not available\\\");\n    }\n\n    String cacheKey = getCacheKey(source);\n    seedCache(cacheKey);\n\n    try {\n            return jenkins.getRootUrl() + ActionURI + \\\"?key=\\\" + URLEncoder.encode(cacheKey, \\\"UTF-8\\\") + \\\"&size=\\\" + size;\n        } catch (UnsupportedEncodingException e) {\n            throw new IllegalStateException(\\\"UTF-8 encoding is not supported\\\", e);\n        }\n    }", "CodeBleu_score": 33.86687628761199}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        image = scaleImage(image, 128);\n    }\n    this.image = image;\n    if (lastModified < 0) {\n        lastModified = System.currentTimeMillis();\n    }\n    this.lastModified = lastModified;\n}", "CodeBleu_score": 56.71692868506793}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    if (image != null) {\n        if (image.getWidth() > 128 || image.getHeight() > 128) {\n            image = scaleImage(image, 128);\n        }\n        this.image = image;\n    }\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 71.75462711003587}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        image = scaleImage(image, 128);\n    }\n    this.image = image;\n    if (lastModified < 0) {\n        lastModified = System.currentTimeMillis();\n    }\n    this.lastModified = lastModified;\n}", "CodeBleu_score": 56.71692868506793}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            CacheEntry entry = future.get();\n            image = entry.image;\n            lastModified = entry.lastModified;\n            future = null;\n        } catch (InterruptedException e) {\n            // ignore\n        } catch (ExecutionException e) {\n            // ignore\n        }\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 56.445738802201696}, {"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            CacheEntry entry = future.get();\n            if (entry != null) {\n                image = entry.image;\n            lastModified = entry.lastModified;\n            future = null;\n        }\n        } catch (InterruptedException | ExecutionException e) {\n            // ignore\n        }\n    }\n    return true;\n}", "CodeBleu_score": 62.02837409682931}, {"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            CacheEntry entry = future.get();\n            image = entry.image;\n            lastModified = entry.lastModified;\n            future = null;\n        } catch (InterruptedException | ExecutionException e) {\n            // ignore\n        }\n        return true;\n    }\n\n    /**\n     * Checks if this entry is unused.\n     *\n     * @return whether the entry is unused.\n     */\n    private boolean isUnused() {\n        return lastAccessed == -1L || System.currentTimeMillis() - lastAccessed > 60000;\n    }\n\n    /**\n     * Checks if this entry is stale.\n     *\n     * @return whether the entry is stale.\n     */\n    private boolean isStale() {\n        return System.currentTimeMillis() - lastModified > 60000;\n    }\n\n    /**\n     * Updates the last accessed timestamp.\n     */\n    private void touch() {\n        lastAccessed = System.currentTimeMillis();\n    }\n}", "CodeBleu_score": 61.80250970162797}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t            rsp.addDateHeader(\"Last-Modified\", lastModified);\n            rsp.addHeader(\"Cache-control\", cacheControl);\n            rsp.setContentType(\"image/png\");\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            ImageIO.write(image, \\\"png\\\", baos);\n            if (flushImage) {\n                image.flush();\n            }\n            rsp.getOutputStream().write(baos.toByteArray());\n        }", "CodeBleu_score": 42.93241352430029}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            ImageIO.write(image, \\\"png\\\", baos);\n            if (flushImage) {\n                image.flush();\n            }\n            rsp.addDateHeader(\\\"Last-Modified\\\", lastModified);\n            rsp.addHeader(\\\"Cache-control\\\", cacheControl);\n            rsp.setContentType(\\\"image/png\\\");\n            rsp.getOutputStream().write(baos.toByteArray());\n            rsp.getOutputStream().flush();\n        }", "CodeBleu_score": 38.960725721498534}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            ImageIO.write(image, \\\"png\\\", baos);\n            if (flushImage) {\n                image.flush();\n            }\n            rsp.addHeader(\\\"Cache-control\\\", cacheControl);\n            rsp.addDateHeader(\\\"Last-Modified\\\", lastModified);\n            rsp.setContentType(\\\"image/png\\\");\n            rsp.getOutputStream().write(baos.toByteArray());\n        }", "CodeBleu_score": 38.22741024441359}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        this.enableCache = enableCache;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n        if (enableCache) {\n            cachedTeam.setExpireAfterWrite(teamCacheDuration, HOURS);\n            cachedRepositories.setExpireAfterWrite(repositoriesCacheDuration, HOURS);\n        }\n        HttpClientBuilder builder = HttpClientBuilder.create();\n        builder.setKeepAliveStrategy(new BitbucketKeepAliveStrategy());\n        builder.setConnectionManager(connectionManager);\n        builder.setRetryHandler(new StandardHttpRequestRetryHandler(3, true));\n        if (authenticator != null) {\n            builder.useSystemProperties();\n            authenticator.configure(builder);\n        }\n        ProxyConfiguration proxy = Jenkins.get().proxy;\n        if (proxy != null) {\n            builder.setProxy(new HttpHost(proxy.name, proxy.port, proxy.scheme));\n        }\n        client = builder.build();\n        context = HttpClientContext.create();\n    }", "CodeBleu_score": 55.5580472363953}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        this.enableCache = enableCache;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n        if (enableCache) {\n            cachedTeam.setExpiration(teamCacheDuration, HOURS);\n            cachedRepositories.setExpiration(repositoriesCacheDuration, HOURS);\n        }\n\n        ProxyConfiguration proxy = Jenkins.get().proxy;\n        if (proxy != null) {\n            HttpHost proxyHost = new HttpHost(proxy.name, proxy.port);\n            if (proxy.noProxy) {\n                client = HttpClientBuilder.create().setConnectionManager(connectionManager)\n                        .setRetryHandler(new StandardHttpRequestRetryHandler(0, false)).build();\n            } else {\n                client = HttpClientBuilder.create().setConnectionManager(connectionManager)\n                        .setRetryHandler(new StandardHttpRequestRetryHandler(0, false))\n                        .setProxy(proxyHost).build();\n            }\n        } else {\n            client = HttpClientBuilder.create().setConnectionManager(connectionManager)\n                    .setRetryHandler(new StandardHttpRequestRetryHandler(0, false)).build();\n        }\n\n        context = HttpClientContext.create();\n        if (authenticator != null) {\n            authenticator.configure(client, context);\n        }\n    }", "CodeBleu_score": 48.00398853421747}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        this.enableCache = enableCache;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n        if (enableCache) {\n            cachedTeam.setExpiration(teamCacheDuration, HOURS);\n            cachedRepositories.setExpiration(repositoriesCacheDuration, HOURS);\n        }\n        context = HttpClientContext.create();\n        client = HttpClientBuilder.create()\n                .setKeepAliveStrategy(new DefaultConnectionKeepAliveStrategy())\n                .setConnectionManager(connectionManager)\n                .setRetryHandler(new StandardHttpRequestRetryHandler(3, true))\n                .setDefaultRequestConfig(RequestConfig.custom()\n                        .setConnectTimeout(30000)\n                        .setConnectionRequestTimeout(30000)\n                        .setSocketTimeout(30000)\n                        .build())\n                .build();\n        ProxyConfiguration proxyConfiguration = Jenkins.get().proxy;\n        if (proxyConfiguration != null) {\n            HttpHost proxy = new HttpHost(proxyConfiguration.name, proxyConfiguration.port, proxyConfiguration.scheme);\n            client = client.useSystemProperties();\n            if (proxyConfiguration.getUserName() != null && proxyConfiguration.getPassword() != null) {\n                CredentialsProvider credsProvider = new BasicCredentialsProvider();\n                credsProvider.setCredentials(new AuthScope(proxyConfiguration.name, proxyConfiguration.port),\n                        new UsernamePasswordCredentials(proxyConfiguration.getUserName(), proxyConfiguration.getPassword()));\n                client = client.setDefaultCredentialsProvider(credsProvider);\n            }\n            if (proxyConfiguration.getNoProxyHost() != null) {\n                client = client.setProxy(proxy);\n            }\n        }\n    }", "CodeBleu_score": 44.99847578640351}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    BitbucketBranch branch = pullRequest.getSource().getBranch();\n    if (branch != null) {\n        pullRequest.getSource().setBranch(new BitbucketBranch(branch.getName(), new CommitClosure(branch.getRawNode().getHash())));\n    }\n    branch = pullRequest.getDestination().getBranch();\n    if (branch != null) {\n        pullRequest.getDestination().setBranch(new BitbucketBranch(branch.getName(), new CommitClosure(branch.getRawNode().getHash())));\n    }\n}", "CodeBleu_score": 64.14550413688215}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    BitbucketBranch branch = pullRequest.getSource().getBranch();\n    if (branch != null) {\n        pullRequest.setSource(branch.getCommit() != null ? new BitbucketBranch(branch.getName(), new CommitClosure(branch.getCommit().getHash())) : branch);\n    }\n    branch = pullRequest.getDestination().getBranch();\n    if (branch != null) {\n        pullRequest.setDestination(branch.getCommit() != null ? new BitbucketBranch(branch.getName(), new CommitClosure(branch.getCommit().getHash())) : branch);\n    }\n}", "CodeBleu_score": 63.076086813513044}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    BitbucketBranch branch = pullRequest.getSource().getBranch();\n    if (branch != null) {\n        branch.setCommit(new CommitClosure(branch.getRawNode()));\n    }\n    branch = pullRequest.getDestination().getBranch();\n    if (branch != null) {\n        branch.setCommit(new CommitClosure(branch.getRawNode()));\n    }\n}", "CodeBleu_score": 81.51571312723078}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration location = JenkinsLocationConfiguration.get();\n    if (location == null || location.getUrl() == null) {\n        throw new IllegalStateException(\\\"No Jenkins location configured\\\");\n    }\n    DisplayURLProvider provider = location.getDisplayURLProvider();\n    if (provider == null) {\n        throw new IllegalStateException(\\\"No DisplayURLProvider configured\\\");\n    }\n    URL url = provider.getDisplayURL(build);\n    if (url == null) {\n        throw new IllegalStateException(\\\"No URL for build\\\");\n    }\n    return url.toString();\n}", "CodeBleu_score": 50.37271005816887}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration location = JenkinsLocationConfiguration.get();\n    if (location == null || location.getUrl() == null) {\n        throw new IllegalStateException(\\\"Jenkins URL is not configured\\\");\n    }\n    DisplayURLProvider displayURLProvider = DisplayURLProvider.get();\n    if (displayURLProvider == null) {\n        throw new IllegalStateException(\\\"Display URL plugin is not installed\\\");\n    }\n    return displayURLProvider.getDisplayURL(build);\n}", "CodeBleu_score": 49.781260724852864}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration location = JenkinsLocationConfiguration.get();\n    if (location == null) {\n        throw new IllegalStateException(\\\"Jenkins location configuration is null\\\");\n    }\n    URL url = location.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\\\"Jenkins location URL is null\\\");\n    }\n    DisplayURLProvider provider = DisplayURLProvider.get(url);\n    if (provider == null) {\n        throw new IllegalStateException(\\\"DisplayURLProvider is null\\\");\n    }\n    return provider.getDisplayURL(build);\n}", "CodeBleu_score": 47.2450571713447}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    try {\n        URL jenkinsUrl = new URL(url);\n        if (jenkinsUrl.getHost().equals(\"localhost\")) {\n            throw new IllegalStateException(\"The Jenkins URL must not use 'localhost' as the host.\");\n        }\n        if (jenkinsUrl.getHost().equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"The Jenkins URL must not use 'unconfigured-jenkins-location' as the host.\");\n        }\n        if (bitbucket instanceof BitbucketCloudApiClient && !jenkinsUrl.getHost().matches(\"^[a-zA-Z0-9.-]+$\")) {\n            throw new IllegalStateException(\"The Jenkins URL must be fully qualified for Bitbucket Cloud API clients.\");\n        }\n        return jenkinsUrl.toString();\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"The Jenkins URL is malformed.\", e);\n    }\n}", "CodeBleu_score": 66.2747572073197}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    try {\n            URL buildURL = new URL(url);\n            if (bitbucket instanceof BitbucketCloudApiClient) {\n                if (buildURL.getHost().equals(\\\"localhost\\\")) {\n                    throw new IllegalStateException(\\\"Bitbucket Cloud API does not support localhost.\\\");\n                }\n                if (buildURL.getHost().equals(\\\"unconfigured-jenkins-location\\\")) {\n                    throw new IllegalStateException(\\\"Bitbucket Cloud API does not support unconfigured-jenkins-location.\\\");\n                }\n                if (!buildURL.getHost().matches(\\\"^[a-zA-Z0-9-]+\\\\\\\\.[a-zA-Z0-9-]+\\\\\\\\.com$\\\")) {\n                    throw new IllegalStateException(\\\"Bitbucket Cloud API does not support unqualified hostnames.\\\");\n                }\n            }\n        } catch (MalformedURLException e) {\n            throw new IllegalStateException(\\\"Invalid build URL.\\\", e);\n        }\n\n        return url;\n    }", "CodeBleu_score": 54.11047654318543}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    if (url.startsWith(\\\"http://localhost\\\") || url.startsWith(\\\"http://unconfigured-jenkins-location\\\")) {\n            throw new IllegalStateException(\\\"Jenkins URL is not configured.\\\");\n        }\n\n        if (bitbucket instanceof BitbucketCloudApiClient) {\n            try {\n                URL jenkinsUrl = new URL(url);\n                if (jenkinsUrl.getHost() != null && jenkinsUrl.getHost().equals(\\\"localhost\\\")) {\n                    throw new IllegalStateException(\\\"Jenkins URL is not fully qualified.\\\");\n                }\n            } catch (MalformedURLException e) {\n                throw new IllegalStateException(\\\"Jenkins URL is malformed.\\\");\n            }\n        }\n\n        return url;\n    }", "CodeBleu_score": 47.426548501051904}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t", "CodeBleu_score": 3.5406350036655807}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t        BitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n        if (context.disableNotification()) {\n            listener.getLogger().println(\\\"[Bitbucket] Skip notification\\\");\n            return;\n        }\n\n        SCMRevision rev = build.getLastBuiltRevision();\n        if (rev == null) {\n            listener.getLogger().println(\\\"[Bitbucket] Skip notification, no SCM revision\\\");\n            return;\n        }\n\n        String hash = rev.getHash();\n        if (hash == null) {\n            listener.getLogger().println(\\\"[Bitbucket] Skip notification, no hash\\\");\n            return;\n        }\n\n        String key = source.getKey();\n        if (source.isShareBuildKeyBetweenBranchAndPullRequest()) {\n            key = key + \\\"/\\\" + rev.getBranch();\n        }\n\n        BitbucketApi bitbucket = source.getBitbucket();\n        if (rev instanceof BitbucketSCMRevision) {\n            listener.getLogger().println(\\\"[Bitbucket] Notify Bitbucket for a changeset\\\");\n            createStatus(build, listener, bitbucket, key, hash);\n        } else if (rev instanceof AbstractGitSCMRevision) {\n            listener.getLogger().println(\\\"[Bitbucket] Notify Bitbucket for a git commit\\\");\n            createStatus(build, listener, bitbucket, key, hash);\n        } else {\n            listener.getLogger().println(\\\"[Bitbucket] Skip notification, unsupported SCM revision type\\\");\n        }\n    }", "CodeBleu_score": 41.26119118046523}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t", "CodeBleu_score": 3.5406350036655807}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t        if (shareBuildKeyBetweenBranchAndPR) {\n            String folderName = getFolderName(build);\n            return StringUtils.defaultIfBlank(folderName, \\\"\\\") + \\\"/\\\" + branch;\n        } else {\n            return build.getParent().getFullName();\n        }\n    }", "CodeBleu_score": 36.67927838183959}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    if (shareBuildKeyBetweenBranchAndPR) {\n        return build.getParent().getFullName() + \\\"/\\\" + branch;\n    }\n    return build.getFullDisplayName();\n}", "CodeBleu_score": 24.991750202947856}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String key = build.getParent().getFullName();\n    if (shareBuildKeyBetweenBranchAndPR) {\n        key += \\\"/\\\" + branch;\n    }\n    return key;\n}", "CodeBleu_score": 33.76072239095546}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = BitbucketCloudEndpoint.SERVER_URL;\n        LOGGER.log(Level.WARNING, \\\"BitbucketSCMNavigator.serverUrl is null, setting to default value: \\\" + serverUrl);\n    }\n    if (traits == null) {\n        traits = new ArrayList<>();\n        traits.add(new BranchDiscoveryTrait(true, true));\n        traits.add(new OriginPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD)));\n        traits.add(new ForkPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD), new ForkPullRequestDiscoveryTrait.TrustEveryone()));\n        traits.add(new PublicRepoPullRequestFilterTrait());\n        if (checkoutCredentialsId != null && !BitbucketSCMSource.DescriptorImpl.SAME.equals(checkoutCredentialsId)) {\n            traits.add(new SSHCheckoutTrait(checkoutCredentialsId));\n        }\n    }\n    return this;\n}", "CodeBleu_score": 21.303300238982576}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = BitbucketCloudEndpoint.SERVER_URL;\n        LOGGER.log(Level.WARNING, \\\"BitbucketSCMNavigator.serverUrl is null, defaulting to \\\" + serverUrl);\n    }\n    if (traits == null) {\n        traits = new ArrayList<>();\n        if (checkoutCredentialsId != null) {\n            traits.add(new SSHCheckoutTrait(checkoutCredentialsId));\n        }\n        if (pattern != null) {\n            traits.add(new RegexSCMSourceFilterTrait(pattern));\n        }\n        if (autoRegisterHooks) {\n            traits.add(new BitbucketServerHookTrait());\n        }\n        if (includes != null || excludes != null) {\n            traits.add(new WildcardSCMHeadFilterTrait(includes, excludes));\n        }\n        if (bitbucketServerUrl != null) {\n            traits.add(new BitbucketServerWebhookTrait(bitbucketServerUrl));\n        }\n    }\n    return this;\n}", "CodeBleu_score": 21.772600362942327}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = BitbucketCloudEndpoint.SERVER_URL;\n        LOGGER.log(Level.WARNING, \\\"BitbucketSCMNavigator.serverUrl is null, using default value: {0}\\\", serverUrl);\n    }\n    if (traits == null) {\n        traits = new ArrayList<>();\n        traits.add(new BranchDiscoveryTrait(true, true));\n        traits.add(new OriginPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD)));\n        traits.add(new ForkPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD), new ForkPullRequestDiscoveryTrait.TrustEveryone()));\n        traits.add(new PublicRepoPullRequestFilterTrait());\n        if (checkoutCredentialsId != null && !BitbucketSCMSource.DescriptorImpl.SAME.equals(checkoutCredentialsId)) {\n            traits.add(new SSHCheckoutTrait(checkoutCredentialsId));\n        }\n        LOGGER.log(Level.WARNING, \\\"BitbucketSCMNavigator.traits is null, using default value: {0}\\\", traits);\n    }\n    return this;\n}", "CodeBleu_score": 22.644990938965474}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t    BitbucketRepository repository = getRepository(name);\n    if (isMatch) {\n            listener.getLogger().println(\\\"Proposed: \\\" + repository.getFullName());\n            count++;\n        } else {\n            listener.getLogger().println(\\\"Ignored: \\\" + repository.getFullName());\n        }\n    }", "CodeBleu_score": 54.040759345059165}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t    try {\n            BitbucketRepository repository = request.getRepository(name);\n            if (isMatch) {\n                if (listener != null) {\n                    listener.getLogger().println(\\\"Proposed repository: \\\" + name);\n                }\n                count++;\n            } else if (listener != null) {\n                listener.getLogger().println(\\\"Ignored repository: \\\" + name);\n            }\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n    }", "CodeBleu_score": 45.74904048785409}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t    BitbucketRepository repository = request.getRepository(name);\n    if (repository != null) {\n        if (isMatch) {\n            count++;\n        }\n        listener.getLogger().println(Messages._BitbucketSCMNavigatorRequest_RepositoryMatch_LogMessage(repository.getFullName(), isMatch));\n    }\n}", "CodeBleu_score": 52.65032872906704}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t        List<RefSpec> refSpecs = branchWithHashes.stream()\n            .filter(branchWithHash -> !branchWithHash.getHash().equals(rev.getHash()))\n            .map(branchWithHash -> new RefSpec(branchWithHash.getBranch(), branchWithHash.getHash()))\n            .collect(Collectors.toList());\n        if (refSpecs.isEmpty()) {\n            return rev;\n        }\n        try {\n            git.fetch(new FetchCommand(new URIish(cloneLink), refSpecs, remoteName));\n        } catch (GitException | URISyntaxException e) {\n            throw new InterruptedException(e);\n        }\n        return rev;\n    }", "CodeBleu_score": 48.2115878503967}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t        if (branchWithHashes.isEmpty()) {\n            return rev;\n        }\n\n        // If the revision is a branch, we need to check if it exists in the local repository.\n        if (rev instanceof Revision.Branch) {\n            Revision.Branch branch = (Revision.Branch) rev;\n            if (!git.branchExists(branch.getName())) {\n                // The branch does not exist in the local repository.\n                // Fetch the branch from the remote repository using the provided clone link.\n                try {\n                    URIish uri = new URIish(cloneLink);\n                    git.fetch(new FetchCommand(uri, branch.getName()));\n                } catch (GitException | URISyntaxException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n        } else if (rev instanceof Revision.SHA1) {\n            // The revision is a commit hash. Check if it exists in the local repository.\n            Revision.SHA1 sha1 = (Revision.SHA1) rev;\n            if (!git.revExists(sha1.getName())) {\n                // The commit hash does not exist in the local repository.\n                // Fetch the branch from the remote repository using the provided clone link.\n                try {\n                    URIish uri = new URIish(cloneLink);\n                    List<RefSpec> refSpecs = branchWithHashes.stream()\n                            .filter(b -> b.getHash().equals(sha1.getName()))\n                            .map(b -> new RefSpec(b.getBranch()))\n                            .collect(Collectors.toList());\n                    git.fetch(new FetchCommand(uri, refSpecs));\n                } catch (GitException | URISyntaxException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n        }\n        return rev;\n    }", "CodeBleu_score": 44.93535000972598}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t        if (rev instanceof Revision.Branch) {\n            Revision.Branch branch = (Revision.Branch) rev;\n\n            List<RefSpec> refSpecs = branchWithHashes\n                .stream()\n                .filter(branchWithHash -> branchWithHash.getBranch().equals(branch.getName()))\n                .filter(branchWithHash -> !branchWithHash.getHashes().contains(branch.getSHA1()))\n                .map(branchWithHash -> new RefSpec(branchWithHash.getHashes(), branch.getSHA1()))\n                .collect(Collectors.toList());\n\n            if (!refSpecs.isEmpty()) {\n                try {\n                    URIish uri = new URIish(cloneLink);\n                    FetchCommand command = git.fetchFrom(uri, refSpecs, remoteName);\n                    command.setProgressMonitor(new TaskListenerProgressMonitor(listener));\n                    command.call();\n                } catch (GitException | URISyntaxException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n        }\n\n        return rev;\n    }", "CodeBleu_score": 50.26453065623976}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        if (!entry.getValue().isEmpty()) {\n            result.put(entry.getKey(), entry.getValue().get(0));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 83.61553853137525}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        if (entry.getValue() != null && !entry.getValue().isEmpty()) {\n            result.put(entry.getKey(), entry.getValue().get(0));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 78.59010366226573}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().get(0));\n    }\n    return Collections.unmodifiableMap(result);\n}", "CodeBleu_score": 68.11563070284988}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t    const selectedResources = await this.getSelectedResources(resourceStates);\n    if (!selectedResources) {\n        return;\n    }\n\n    const repositories = new Map<string, SourceControlResourceState[]>();\n    for (const resource of selectedResources) {\n        const uri = resource.resourceUri.toString();\n        const repository = resource.repository;\n        if (!repositories.has(repository)) {\n            repositories.set(repository, []);\n        }\n        repositories.get(repository)!.push(resource);\n    }\n\n    for (const [repository, resources] of repositories) {\n        const files = resources.map(resource => resource.resourceUri.fsPath);\n        try {\n            await this.addFiles(repository, files);\n        } catch (error) {\n            this.log.error(`Failed to add files to repository '${repository}': ${error}`);\n            window.showErrorMessage(`Failed to add files to repository '${repository}': ${error}`);\n        }\n    }\n}", "CodeBleu_score": 43.414607167905615}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t  const selected = await this.getSelectedResourceStates(resourceStates);\n  if (!selected) {\n    return;\n  }\n\n  const byRepository = new Map<string, SourceControlResourceState[]>();\n  for (const resource of selected) {\n    const uri = resource.resourceUri;\n    if (!uri) {\n      continue;\n    }\n\n    const repository = await this.getRepository(uri);\n    if (!repository) {\n      continue;\n    }\n\n    const resources = byRepository.get(repository);\n    if (!resources) {\n      byRepository.set(repository, [resource]);\n    } else {\n      resources.push(resource);\n    }\n  }\n\n  for (const [repository, resources] of byRepository) {\n    const paths = resources.map(resource => resource.resourceUri.fsPath);\n    try {\n      await this.svn.add(repository, paths);\n    } catch (error) {\n      this.log(error);\n      window.showErrorMessage(`Error adding files to repository: ${repository}`);\n    }\n  }\n}", "CodeBleu_score": 45.32180779644575}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t  const selected = await this.getSelected(resourceStates);\n  if (!selected) {\n    return;\n  }\n  const resources = selected.map(state => state.resourceUri);\n  const repositories = this.getRepositories(resources);\n  const promises = repositories.map(async repository => {\n    const files = resources.filter(resource => repository.isResource(resource));\n    const filePaths = files.map(file => repository.getFilePath(file));\n    const added = await repository.add(filePaths);\n    if (added.length === 0) {\n      return;\n    }\n    const addedFiles = added.map(file => file.filePath);\n    const addedResources = addedFiles.map(file => repository.getResource(file));\n    const addedStates = addedResources.map(resource => new SourceControlResourceState(resource, \\\"added\\\"));\n    const addedStatus = addedStates.map(state => state.resourceUri.fsPath);\n    this.showAdded(addedStatus);\n  });\n  await Promise.all(promises);\n}", "CodeBleu_score": 53.157177019688696}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t  const resourceStates = this.resourceStates;\n  if (resourceStates.length === 0 || !(resourceStates[0] instanceof Uri)) {\n    const resource = await commands.executeCommand(\\\"svn.getResource\\\", this.resourceUri);\n\n    if (resource) {\n      resourceStates = [resource.svnUri];\n    }\n  }\n\n  return resourceStates.filter(resourceState => resourceState instanceof Resource);\n}", "CodeBleu_score": 43.773811737844454}, {"code": "protected async getResourceStates{\n\t    if (resourceStates.length === 0 || !(resourceStates[0] instanceof Uri)) {\n        const resource = await commands.executeCommand('svn.getSourceControlManager', '').then((manager: SourceControlManager) => manager.getResource(resourceStates[0]));\n        if (resource) {\n            resourceStates = [resource.uri];\n        }\n    }\n\n    return resourceStates.filter(resource => resource instanceof Resource);\n}", "CodeBleu_score": 44.716056120278814}, {"code": "protected async getResourceStates{\n\t    if (resourceStates.length === 0 || !resourceStates[0] instanceof Uri) {\n        const scmResource = await commands.executeCommand<SourceControlResourceState>(\"svn.getResource\", resourceStates[0]?.uri);\n        if (scmResource) {\n            resourceStates = [scmResource];\n        }\n    }\n    return resourceStates.filter(resource => resource instanceof Resource);\n}", "CodeBleu_score": 43.835577574938775}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (!uri) {\n      uri = window.activeTextEditor && window.activeTextEditor.document.uri;\n    }\n\n    if (!uri) {\n      return;\n    }\n\n    if (uri.scheme === \\\"svn\\\") {\n      uri = toSvnUri(uri);\n    }\n\n    if (uri.scheme === \\\"file\\\") {\n      const sourceControlManager = (await commands.executeCommand(\\\"svn.getSourceControlManager\\\", \\\"\\\")) as SourceControlManager;\n      const repository = sourceControlManager.getRepository(uri);\n\n      if (!repository) {\n        return;\n      }\n\n      return repository.getResource(uri);\n    }\n\n    return;\n  }", "CodeBleu_score": 46.860878858459735}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (!uri) {\n      const editor = window.activeTextEditor;\n\n      if (!editor) {\n        return undefined;\n      }\n\n      uri = editor.document.uri;\n    }\n\n    if (uri.scheme === \\\"svn\\\") {\n      uri = toSvnUri(uri);\n    }\n\n    const sourceControlManager = (await commands.executeCommand(\n      \\\"svn.getSourceControlManager\\\",\n      \\\"\\\"\n    )) as SourceControlManager;\n    const repository = sourceControlManager.getRepository(uri);\n\n    if (!repository) {\n      return undefined;\n    }\n\n    return repository.getResource(uri);\n  }", "CodeBleu_score": 56.13780847438701}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (!uri) {\n      const editor = window.activeTextEditor;\n\n      if (editor) {\n        uri = editor.document.uri;\n      }\n    }\n\n    if (uri) {\n      if (uri.scheme === \\\"svn\\\") {\n        uri = toSvnUri(uri);\n      }\n\n      if (uri.scheme === \\\"file\\\") {\n        const sourceControlManager = (await commands.executeCommand(\n          \\\"svn.getSourceControlManager\\\",\n          \\\"\\\"\n        )) as SourceControlManager;\n\n        const repository = sourceControlManager.getRepository(uri);\n\n        if (repository) {\n          return new Resource(repository, uri);\n        }\n      }\n    }\n  }", "CodeBleu_score": 42.7806635398331}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\t    const remote = await this.model.getRemote(element.repo);\n    if (remote) {\n      if (element.item === Status.MODIFIED) {\n        openDiff(\n          element.repo,\n          element.oldPath,\n          element.oldRevision,\n          element.newPath,\n          element.newRevision\n        );\n      } else if (element.item === Status.ADDED) {\n        openFileRemote(remote, element.newPath, element.newRevision);\n      }\n    }\n  }", "CodeBleu_score": 58.2849350908469}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t    const repo = await this.model.getRepositoryForPath(element.localPath);\n    if (repo) {\n      if (element.item === Status.MODIFIED) {\n        openDiff(repo, element.oldPath, element.newPath, element.oldRevision, element.newRevision);\n      } else if (element.item === Status.ADDED) {\n        openFileRemote(repo, element.newPath, element.newRevision);\n      }\n    }\n  }", "CodeBleu_score": 64.3784844171856}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t    const repo = await this.model.getRepository(element.repo.fsPath);\n    if (repo) {\n      if (element.item === Status.MODIFIED) {\n        openDiff(repo, element.oldPath.fsPath, element.newPath.fsPath, element.oldRevision, element.newRevision);\n      } else if (element.item === Status.ADDED) {\n        openFileRemote(repo, element.newPath.fsPath, element.newRevision);\n      }\n    }\n  }", "CodeBleu_score": 64.11627824344339}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t  const clipboard = window.createTerminal();\n  const clipboardSupported = clipboard.hasCapability(\\\"copy\\\");\n  if (!clipboardSupported) {\n    window.showErrorMessage(\\\"Clipboard is not supported!\\\");\n    return;\n  }\n\n  const { data } = item;\n  if (data instanceof ISvnLogEntry) {\n    const { message, revision } = data;\n    const msg = what === \\\"message\\\" ? message : revision;\n    clipboard.sendText(msg);\n  } else {\n    window.showErrorMessage(\\\"Copying commit to clipboard is not supported!\\\");\n  }\n}", "CodeBleu_score": 38.966947393024434}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t  const clipboard = window.createTerminal();\n  clipboard.show();\n  clipboard.sendText(what);\n  clipboard.dispose();\n}", "CodeBleu_score": 19.939384564592284}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t  if (!window.activeTextEditor) {\n    return;\n  }\n\n  const clipboard = window.activeTextEditor.document.uri;\n  if (!clipboard) {\n    return;\n  }\n\n  if (what === 'message') {\n    await window.activeTextEditor.edit((editBuilder) => {\n      editBuilder.insert(clipboard, item.data.message);\n    });\n  } else if (what === 'revision') {\n    await window.activeTextEditor.edit((editBuilder) => {\n      editBuilder.insert(clipboard, item.data.revision);\n    });\n  }\n}", "CodeBleu_score": 38.48210613562916}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    GiteaConnectionFactory factory = null;\n    int priority = Integer.MIN_VALUE;\n\n    for (GiteaConnectionFactory f : ServiceLoader.load(GiteaConnectionFactory.class, classLoader)) {\n        if (f.canOpen(serverUrl)) {\n            int p = f.priority();\n            if (p > priority) {\n                factory = f;\n                priority = p;\n            }\n        }\n    }\n\n    if (factory == null) {\n        throw new IOException(\"No suitable GiteaConnectionFactory found\");\n    }\n\n    return factory.open(serverUrl, authentication);\n}", "CodeBleu_score": 47.390159655895665}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    ServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n    GiteaConnectionFactory factory = null;\n    int priority = 0;\n    for (GiteaConnectionFactory f : loader) {\n        if (f.canOpen(serverUrl, authentication)) {\n            if (f.priority() > priority) {\n                factory = f;\n                priority = f.priority();\n            }\n        }\n    }\n    if (factory == null) {\n        throw new IOException(\\\"No suitable GiteaConnectionFactory found.\\\");\n    }\n    return factory.open(serverUrl, authentication);\n}", "CodeBleu_score": 51.467550900805435}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    // Find the most suitable factory based on their ability to open the connection and their priority\n    GiteaConnectionFactory factory = null;\n    for (GiteaConnectionFactory f : ServiceLoader.load(GiteaConnectionFactory.class, classLoader)) {\n        if (f.canOpen(serverUrl)) {\n            if (factory == null || factory.priority() < f.priority()) {\n                factory = f;\n            }\n        }\n    }\n\n    // If no suitable factory is found, throw an IOException\n    if (factory == null) {\n        throw new IOException(\"No suitable GiteaConnectionFactory found\");\n    }\n\n    // Open the connection using the factory\n    return factory.open(serverUrl, authentication);\n}", "CodeBleu_score": 33.89632510180332}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t    if (classLoader == null) {\n        Jenkins jenkins = Jenkins.getInstance();\n        if (jenkins != null) {\n            classLoader = jenkins.getPluginManager().uberClassLoader;\n        } else {\n            classLoader = getClass().getClassLoader();\n        }\n    }\n    return this;\n}", "CodeBleu_score": 49.54818291702253}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t    ClassLoader classLoader = null;\n    Jenkins jenkins = Jenkins.getInstance();\n    if (jenkins != null) {\n        classLoader = jenkins.getPluginManager().uberClassLoader;\n    }\n    if (classLoader == null) {\n        classLoader = this.getClass().getClassLoader();\n    }\n    return classLoader(classLoader);\n}", "CodeBleu_score": 45.4681702001211}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t    if (classLoader == null) {\n            Jenkins jenkins = Jenkins.getInstance();\n            if (jenkins != null) {\n                classLoader = jenkins.getPluginManager().uberClassLoader;\n            } else {\n                classLoader = getClass().getClassLoader();\n            }\n        }\n        return this;\n    }", "CodeBleu_score": 48.03699685220834}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t        this.displayName = displayName;\n        this.serverUrl = normalizeUrl(serverUrl);\n        this.manageHooks = manageHooks || credentialsId != null;\n        this.credentialsId = credentialsId;\n        this.aliasUrl = normalizeUrl(aliasUrl);\n    }", "CodeBleu_score": 33.57117972231736}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = displayName;\n        this.serverUrl = normalizeServerUrl(serverUrl);\n        this.manageHooks = manageHooks;\n        this.credentialsId = manageHooks ? credentialsId : null;\n        this.aliasUrl = normalizeAliasUrl(aliasUrl);\n    }", "CodeBleu_score": 41.581115727826315}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t        this.displayName = displayName;\n        this.serverUrl = normalizeUrl(serverUrl);\n        this.manageHooks = manageHooks;\n        this.credentialsId = manageHooks ? credentialsId : null;\n        this.aliasUrl = normalizeUrl(aliasUrl);\n    }", "CodeBleu_score": 40.98820039609778}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    ListBoxModel items = new ListBoxModel();\n    if (Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        serverUrl = GiteaServers.normalizeServerUrl(serverUrl);\n        for (StandardCredentials cred : CredentialsProvider.lookupCredentials(StandardCredentials.class, Jenkins.get(), ACL.SYSTEM, URIRequirementBuilder.fromUri(serverUrl).build())) {\n            if (AuthenticationTokens.matcher(GiteaAuth.class).matches(cred)) {\n                items.add(cred.getId(), cred.getDisplayName());\n            }\n        }\n    }\n    return items;\n}", "CodeBleu_score": 53.119019926890765}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    ListBoxModel items = new ListBoxModel();\n    if (Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        serverUrl = GiteaServers.normalizeServerUrl(serverUrl);\n        for (StandardCredentials c : CredentialsProvider.lookupCredentials(StandardCredentials.class, Jenkins.get(), ACL.SYSTEM, URIRequirementBuilder.fromUri(serverUrl).build())) {\n            if (AuthenticationTokens.matcher(GiteaAuth.class).apply(c)) {\n                items.add(c.getId(), c.getDisplayName());\n            }\n        }\n    }\n    return items;\n}", "CodeBleu_score": 53.45302110842201}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n    final ListBoxModel items = new ListBoxModel();\n    for (StandardCredentials c : CredentialsProvider.lookupCredentials(\n                StandardCredentials.class,\n                Jenkins.get(),\n                ACL.SYSTEM,\n                URIRequirementBuilder.fromUri(GiteaServers.normalizeServerUrl(serverUrl)).build()\n        )) {\n            if (c instanceof GiteaAuth) {\n                items.add(c.getId(), c.getDisplayName());\n            }\n        }\n        return items;\n    }", "CodeBleu_score": 47.72452656813183}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t", "CodeBleu_score": 1.3346171667831161}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return \"\";\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        int port = uri.getPort();\n        if (port == -1) {\n            port = scheme.equalsIgnoreCase(\"http\") ? 80 : 443;\n        }\n        String authority = uri.getAuthority();\n        String path = uri.getPath();\n        String query = uri.getQuery();\n        String fragment = uri.getFragment();\n        String normalizedServerUrl = scheme + \"://\" + authority + path + query + fragment;\n        return normalizedServerUrl.replaceAll(\"[/]+$\", \"\");\n    } catch (URISyntaxException e) {\n        return \"\";\n    }\n}", "CodeBleu_score": 37.49925023361609}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme().toLowerCase(Locale.ROOT);\n        String host = uri.getHost().toLowerCase(Locale.ROOT);\n        int port = uri.getPort();\n        if (port == -1) {\n            port = scheme.equals(\"https\") ? 443 : 80;\n        }\n        String path = uri.getPath();\n        if (path.endsWith(\"/\")) {\n            path = path.substring(0, path.length() - 1);\n        }\n        return new URI(scheme, null, host, port, path, null, null).toString();\n    } catch (URISyntaxException e) {\n        // Ignore exception and return original server URL\n    }\n    return serverUrl;\n}", "CodeBleu_score": 42.20104042297672}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (StringUtils.isBlank(displayName)) {\n            items.add(server.getServerUrl());\n        } else {\n            items.add(server.getServerUrl(), displayName);\n        }\n    }\n    return items;\n}", "CodeBleu_score": 50.98854217730507}, {"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (StringUtils.isBlank(displayName)) {\n            items.add(server.getServerUrl(), server.getServerUrl());\n        } else {\n            items.add(server.getServerUrl(), displayName);\n        }\n    }\n    return items;\n}", "CodeBleu_score": 50.24269863344961}, {"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (StringUtils.isBlank(displayName)) {\n            items.add(server.getServerUrl(), server.getServerUrl());\n        } else {\n            items.add(server.getServerUrl(), displayName);\n        }\n    }\n    return items;\n}", "CodeBleu_score": 50.24269863344961}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    if (servers == null) {\n        servers = Collections.emptyList();\n    }\n    Set<String> serverUrls = new HashSet<>();\n    List<GiteaServer> validServers = new ArrayList<>();\n    for (GiteaServer server : servers) {\n        String serverUrl = server.getServerUrl();\n        if (serverUrl == null || serverUrl.isEmpty()) {\n            continue;\n        }\n        if (serverUrls.contains(serverUrl)) {\n            continue;\n        }\n        serverUrls.add(serverUrl);\n        validServers.add(server);\n    }\n    this.servers = validServers;\n    save();\n}", "CodeBleu_score": 48.96363744637694}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    if (servers == null) {\n        this.servers = Collections.emptyList();\n    } else {\n        Set<String> uniqueServerUrls = new HashSet<>();\n        List<GiteaServer> nonEmptyServers = new ArrayList<>();\n        for (GiteaServer server : servers) {\n            if (StringUtils.isNotBlank(server.getServerUrl())) {\n                String normalizedServerUrl = normalizeServerUrl(server.getServerUrl());\n                if (!uniqueServerUrls.contains(normalizedServerUrl)) {\n                    uniqueServerUrls.add(normalizedServerUrl);\n                    nonEmptyServers.add(server);\n                }\n            }\n        }\n        this.servers = Collections.unmodifiableList(nonEmptyServers);\n    }\n    save();\n}", "CodeBleu_score": 39.06842583980551}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    if (servers == null) {\n        this.servers = null;\n        save();\n        return;\n    }\n    if (servers.isEmpty()) {\n        this.servers = null;\n        save();\n        return;\n    }\n    Set<GiteaServer> set = new HashSet<>();\n    for (GiteaServer server : servers) {\n        if (server == null) {\n            continue;\n        }\n        String serverUrl = server.getServerUrl();\n        if (StringUtils.isBlank(serverUrl)) {\n            continue;\n        }\n        serverUrl = normalizeServerUrl(serverUrl);\n        if (StringUtils.isBlank(serverUrl)) {\n            continue;\n        }\n        set.add(server);\n    }\n    this.servers = new ArrayList<>(set);\n    save();\n}", "CodeBleu_score": 43.08113809333681}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (StringUtils.isBlank(serverUrl)) {\n        return false;\n    }\n    List<GiteaServer> endpoints = new ArrayList<>(getServers());\n    boolean found = false;\n    for (ListIterator<GiteaServer> iterator = endpoints.listIterator(); iterator.hasNext(); ) {\n        GiteaServer endpoint = iterator.next();\n        if (endpoint.getServerUrl().equals(serverUrl)) {\n            iterator.remove();\n            found = true;\n            break;\n        }\n    }\n    if (found) {\n        setServers(endpoints);\n    }\n    return found;\n}", "CodeBleu_score": 55.25740106963624}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (StringUtils.isBlank(serverUrl)) {\n        return false;\n    }\n    List<GiteaServer> endpoints = new ArrayList<>(getServers());\n    boolean found = false;\n    for (int i = 0; i < endpoints.size(); i++) {\n        GiteaServer ep = endpoints.get(i);\n        if (ep.getServerUrl().equals(serverUrl)) {\n            endpoints.remove(i);\n            found = true;\n            break;\n        }\n    }\n    if (found) {\n        setServers(endpoints);\n    }\n    return found;\n}", "CodeBleu_score": 50.58702687896728}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    List<GiteaServer> endpoints = new ArrayList<>(getServers());\n    serverUrl = normalizeServerUrl(serverUrl);\n    if (StringUtils.isBlank(serverUrl)) {\n        return false;\n    }\n    for (ListIterator<GiteaServer> iterator = endpoints.listIterator(); iterator.hasNext(); ) {\n        GiteaServer endpoint = iterator.next();\n        if (serverUrl.equals(endpoint.getServerUrl())) {\n            iterator.remove();\n            setServers(endpoints);\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 55.66440183164711}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element e : roundEnv.getElementsAnnotatedWith(annotation)) {\n        if (e.getKind() == ElementKind.CLASS) {\n            TypeElement typeElement = (TypeElement) e;\n\n            ConfigValue configValue = typeElement.getAnnotation(ConfigValue.class);\n\n            if (configValue != null) {\n                descriptorElements.add(new ConfigElement(configValue.value(), typeElement.asType().toString()));\n            }\n        }\n    }\n}", "CodeBleu_score": 32.37361049298108}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n        AnnotationMirror annotationMirror = element.getAnnotationMirror().get();\n        Map<String, String> attributes = Maps.newHashMap();\n        for (Map.Entry<String, AnnotationValue> entry : annotationMirror.getElementValues().entrySet()) {\n            String value = entry.getValue().getValue().toString();\n            attributes.put(entry.getKey(), value);\n        }\n        String type = element.asType().toString();\n        descriptorElements.add(new ConfigElement(attributes, type));\n    }\n}", "CodeBleu_score": 43.875021760759196}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element e : roundEnv.getElementsAnnotatedWith(annotation)) {\n        Map<String, String> attributes = Maps.newHashMap();\n        for (VariableElement attr : e.getEnclosedElements()) {\n            if (attr.getKind() == ElementKind.FIELD) {\n                attributes.put(attr.getSimpleName().toString(), attr.asType().toString());\n            }\n        }\n        descriptorElements.add(new ConfigElement(annotation.getSimpleName().toString(), attributes));\n    }\n}", "CodeBleu_score": 37.567223893087856}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    for (TypeElement e : annotations) {\n        if (e.getQualifiedName().toString().replace(\\\"$\\\", \\\".\\\").equals(annotationClass.getName())) {\n            return e;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 36.80309880031694}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    for (TypeElement annotation : annotations) {\n        String qualifiedName = annotation.getQualifiedName().toString();\n        String targetQualifiedName = annotationClass.getName().replace(\\\"$\\\", \\\".\\\");\n        if (qualifiedName.equals(targetQualifiedName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 35.26615112478327}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    for (TypeElement annotation : annotations) {\n        String qualifiedName = annotation.getQualifiedName().toString();\n        String targetQualifiedName = annotationClass.getName().replace(\\\"$\\\", \\\".\\\");\n        if (qualifiedName.equals(targetQqualifiedName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 35.22103174278269}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n\t\t\\\"employee\\\": employee,\n\t\t\\\"docstatus\\\": 1,\n\t\t\\\"status\\\": \\\"Open\\\",\n\t}\n\n\tif approver_id:\n\t\tfilters[\\\"leave_approver\\\"] = approver_id\n\t\tfilters[\\\"status\\\"] = \\\"Open\\\"\n\t\tfilters[\\\"docstatus\\\"] = 1\n\telif for_approval:\n\t\tfilters[\\\"leave_approver\\\"] = frappe.session.user\n\t\tfilters[\\\"status\\\"] = \\\"Open\\\"\n\t\tfilters[\\\"docstatus\\\"] = 1\n\t\tfilters[\\\"owner\\\"] = (\\\"<>\\\", employee)\n\telse:\n\t\tfilters[\\\"status\\\"] = (\\\"<>\\\", \\\"Cancelled\\\")\n\n\tif workflow_state_field := get_workflow_state_field(\\\"Leave Application\\\"):\n\t\tfilters[workflow_state_field] = get_workflow_state_filters(\\\"Leave Application\\\", workflow_state_field)\n\n\treturn filters\n\n", "CodeBleu_score": 28.620172857572264}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\\\"employee\\\": employee, \\\"docstatus\\\": 1, \\\"status\\\": \\\"Open\\\"}\n\n    if for_approval:\n        filters[\\\"leave_approver\\\"] = approver_id or frappe.session.user\n        filters[\\\"status\\\"] = \\\"Approval Pending\\\"\n        filters[\\\"name\\\"] = [\\\"not in\\\", [frappe.db.sql_list(\\\"select name from `tabLeave Application` where employee=%s\\\", employee)]]\n    else:\n        filters[\\\"status\\\"] = [\\\"not in\\\", \\\"Canceled\\\"]\n\n    if workflow_state_field := get_workflow_state_field(\\\"Leave Application\\\"):\n        workflow_state_filters = get_workflow_state_filters(workflow_state_field, \\\"Open\\\")\n        filters.update(workflow_state_filters)\n\n    return filters\n\n", "CodeBleu_score": 29.342267607983263}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\\\"employee\\\": employee, \\\"docstatus\\\": 1}\n\n    if for_approval:\n        filters[\\\"leave_approver\\\"] = approver_id\n        filters[\\\"status\\\"] = \\\"Open\\\"\n\n        if workflow_state_field := get_workflow_state_field(\\\"Leave Application\\\"):\n            filters[workflow_state_field] = \\\"Pending Approval\\\"\n    else:\n        filters[\\\"status\\\"] = (\\\"Open\\\", \\\"Cancelled\\\")\n\n        if workflow_state_field := get_workflow_state_field(\\\"Leave Application\\\"):\n            filters[workflow_state_field] = (\\\"Open\\\", \\\"Cancelled\\\")\n\n    return filters\n\n", "CodeBleu_score": 26.01497958012027}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    from_date = getdate()\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    for leave_type, leave_details in leave_details.items():\n        allocated_leave_details = leave_details.get(\\\"allocated\\\", {})\n        balance_leave_details = leave_details.get(\\\"balance\\\", {})\n        leave_balance_map[leave_type] = {\n            \\\"allocated\\\": allocated_leave_details.get(from_date, 0.0),\n            \\\"balance\\\": balance_leave_details.get(from_date, 0.0),\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 39.830522814903524}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    from frappe.utils import nowdate\n\n    date = nowdate()\n    leave_details = get_leave_details(employee, date)\n\n    leave_balance_map = {}\n    for leave_type, leave_detail in leave_details.items():\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_detail.get(\"allocated\", 0),\n            \"balance\": leave_detail.get(\"balance\", 0),\n        }\n\n    return leave_balance_map\n\n", "CodeBleu_score": 45.98173419519106}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        allocated_leave = leave_details[leave_type]['allocated_leave']\n        balance_leave = leave_details[leave_type]['balance_leave']\n        leave_balance_map[leave_type] = {\n            'allocated_leave': allocated_leave,\n            'balance_leave': balance_leave\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 41.15183282286659}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = frappe.get_list(\\\"Holiday\\\", filters={\n        \\\"parent\\\": holiday_list,\n        \\\"holiday_type\\\": (\\\"not in\\\", [\\\"Weekly Off\\\"]),\n    },\n    fields=[\n        \\\"name\\\",\n        \\\"holiday_date\\\",\n        \\\"description\\\",\n        \\\"half_day\\\",\n        \\\"weekday\\\",\n    ],\n    order_by=\\\"holiday_date\\\",\n    )\n    for holiday in holidays:\n        holiday[\\\"description\\\"] = strip_html(holiday[\\\"description\\\"])\n    return holidays\n\n", "CodeBleu_score": 32.42613470161071}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n\n    holidays = frappe.get_list(\n        \"Holiday\",\n        filters={\n            \"parent\": holiday_list,\n            \"holiday_type\": (\"in\", [\"Public Holiday\", \"Optional Holiday\"]),\n            \"weekly_off\": 0,\n        },\n        fields=[\"holiday_date\", \"description\"],\n        order_by=\"holiday_date\",\n    )\n\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html_tags(holiday[\"description\"])\n\n    return holidays\n\n\n", "CodeBleu_score": 37.66042672290667}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.db.get_value(\\\"Employee Holiday List\\\", {\\\"employee\\\": employee, \\\"is_active\\\": 1},\n\t\t[\\\"name\\\", \\\"holiday_list\\\"],\n\t)\n\n\tif not holiday_list:\n\t\treturn []\n\n\tholidays = frappe.get_list(\n\t\t\\\"Holiday\\\",\n\t\tfields=[\\\"name\\\", \\\"title\\\", \\\"description\\\", \\\"holiday_date\\\", \\\"weekday\\\", \\\"week_off\\\"],\n\t\tfilters={\\\"parent\\\": holiday_list, \\\"week_off\\\": 0, \\\"holiday_date\\\": (\\\"<=\\\", getdate())},\n\t\torder_by=\\\"holiday_date desc\\\",\n\t\tlimit=99999,\n\t)\n\n\tfor holiday in holidays:\n\t\tholiday[\\\"description\\\"] = strip_html(holiday[\\\"description\\\"])\n\n\treturn holidays\n\n", "CodeBleu_score": 39.98733850008851}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n    if (\n        frappe.db.get_single_value(\"HR Settings\", \"send_holiday_reminders\")\n        and frappe.db.get_single_value(\"HR Settings\", \"holiday_reminder_frequency\")\n        == \"Weekly\"\n    ):\n        send_holiday_reminders()\n\n", "CodeBleu_score": 23.61563300556145}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    send_reminders_in_advance_weekly_for_holiday_list(\"Weekly\")\n\n", "CodeBleu_score": 5.873729670851763}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    if not frappe.db.get_value(\"HR Settings\", None, \"send_reminders_in_advance\"):\n        return\n\n    if frappe.db.get_value(\"HR Settings\", None, \"remind_in_advance_frequency\") != \"Weekly\":\n        return\n\n    send_reminders_in_advance()\n\n", "CodeBleu_score": 27.991667473728306}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n    total_weightage, total = 0, 0\n    for entry in self.self_ratings:\n        total_weightage += flt(entry.per_weightage)\n        total += flt(entry.rating) * flt(entry.per_weightage) / 100\n\n    if total_weightage and flt(total_weightage, 2) != 100.0:\n        frappe.throw(\n            _(\"Total weightage for all Self Ratings must add up to 100. Currently, it is {0}%\").format(\n                total_weightage\n            ),\n            title=_(\"Incorrect Weightage Allocation\"),\n        )\n\n    self.self_appraisal_score = flt(total, self.precision(\"self_appraisal_score\"))\n\n", "CodeBleu_score": 34.908583910251316}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    total_weightage, total = 0, 0\n\n    for entry in self.self_ratings:\n        total_weightage += flt(entry.per_weightage)\n        total += flt(entry.rating) * flt(entry.per_weightage) / 100\n\n    if total_weightage and flt(total_weightage, 2) != 100.0:\n        frappe.throw(\n            _(\"Total weightage for all Self Ratings must add up to 100. Currently, it is {}%\").format(\n                total_weightage\n            ),\n            title=_(\"Incorrect Weightage Allocation\"),\n        )\n\n    self.self_appraisal_score = flt(total, self.precision(\"self_appraisal_score\"))\n\n", "CodeBleu_score": 34.921772172768385}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    total_weightage, total = 0, 0\n\n    for entry in self.self_ratings:\n        total_weightage += flt(entry.per_weightage)\n        total += flt(entry.rating) * flt(entry.per_weightage) / 100\n\n    if total_weightage and flt(total_weightage, 2) != 100.0:\n        frappe.throw(\n            _(\"Total weightage for all Self Ratings must add up to 100. Currently, it is {0}%\").format(\n                total_weightage\n            ),\n            title=_(\"Incorrect Weightage Allocation\"),\n        )\n\n    self.self_appraisal_score = flt(total, self.precision(\"self_appraisal_score\"))\n\n", "CodeBleu_score": 34.908583910251316}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle = frappe.get_doc(\\\"Appraisal Cycle\\\", self.appraisal_cycle)\n\n\t\tif appraisal_cycle.calculate_final_score_using_formula:\n\t\t\tformula = appraisal_cycle.final_score_formula\n\n\t\t\tdata = {\n\t\t\t\t\\\"total_score\\\": self.total_score,\n\t\t\t\t\\\"avg_feedback_score\\\": self.avg_feedback_score,\n\t\t\t\t\\\"self_score\\\": self.self_score,\n\t\t\t}\n\n\t\t\tformula = sanitize_formula(formula)\n\t\t\tformula = formula.format(**data)\n\n\t\t\tself.final_score = eval(formula, {}, {})\n\t\telse:\n\t\t\tself.final_score = flt(\n\t\t\t\t(self.total_score + self.avg_feedback_score + self.self_score) / 3,\n\t\t\t\tself.precision(\\\"final_score\\\"),\n\t\t\t)\n\n\tdef validate_total_weightage(self, table, label):\n\t\ttotal_weightage = 0\n\t\tfor entry in self.get(table):\n\t\t\ttotal_weightage += flt(entry.per_weightage)\n\n\t\tif total_weightage and flt(total_weightage, 2) != 100.0:\n\t\t\tfrappe.throw(\n\t\t\t\t_(\\\"Total weightage for all {0} must add up to 100. Currently, it is {1}%\\\").format(\n\t\t\t\t\tlabel, total_weightage\n\t\t\t\t),\n\t\t\t\ttitle=_(\\\"Incorrect Weightage Allocation\\\"),\n\t\t\t)\n\n\tdef set_goal_score(self):\n\t\tself.goal_score = flt(self.goal_score_percentage / 20, self.precision(\\\"goal_score\\\"))\n\n\tdef set_status(self):\n\t\tself.status = \\\"Open\\\"\n\n\t\tif self.start_date and self.end", "CodeBleu_score": 34.892956785082056}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle = frappe.get_doc(\\\"Appraisal Cycle\\\", self.appraisal_cycle)\n\n\t\tif appraisal_cycle.final_score_formula:\n\t\t\tself.final_score = self.get_final_score_from_formula(appraisal_cycle.final_score_formula)\n\t\telse:\n\t\t\tself.final_score = flt(\n\t\t\t\t(self.total_score + self.avg_feedback_score + self.self_score) / 3,\n\t\t\t\tself.precision(\\\"final_score\\\"),\n\t\t\t)\n\n\tdef get_final_score_from_formula(self, formula):\n\t\tfrom frappe.utils.safe_exec import safe_exec\n\n\t\tdata = self.get_data_for_formula(formula)\n\t\tsafe_exec(formula, globals(), data)\n\n\t\treturn data.get(\\\"final_score\\\")\n\n\tdef get_data_for_formula(self, formula):\n\t\tdata = {}\n\n\t\tfor field in frappe.get_meta(\\\"Appraisal\\\").fields:\n\t\t\tif field.fieldtype in [\\\"Float\\\", \\\"Currency\\\", \\\"Int\\\"] and field.fieldname != \\\"final_score\\\":\n\t\t\t\tdata[field.fieldname] = flt(self.get(field.fieldname), self.precision(field.fieldname))\n\n\t\tdata[\\\"employee\\\"] = self.employee\n\t\tdata[\\\"employee_name\\\"] = self.employee_name\n\t\tdata[\\\"appraisal\\\"] = self.name\n\n\t\treturn data\n\n\tdef validate_total_weightage(self, table, label):\n\t\ttotal_weightage = 0\n\n\t\tfor entry in self.get(table):\n\t\t\ttotal_weightage += flt(entry.per_weightage)\n\n\t\tif total_weightage and flt(total_weightage, 2) != 100.", "CodeBleu_score": 32.362110165318725}, {"code": "def calculate_final_score(self)\n\t\n    if not self.appraisal_cycle:\n\t\t\treturn\n\n\t\tappraisal_cycle = frappe.get_doc(\\\"Appraisal Cycle\\\", self.appraisal_cycle)\n\t\tif appraisal_cycle.final_score_method == \\\"Formula\\\":\n\t\t\tself.calculate_final_score_using_formula()\n\t\telse:\n\t\t\tself.calculate_final_score_using_average()\n\n\tdef calculate_final_score_using_formula(self):\n\t\tappraisal_cycle = frappe.get_doc(\\\"Appraisal Cycle\\\", self.appraisal_cycle)\n\t\tself.final_score = self.calculate_formula(\n\t\t\tappraisal_cycle.final_score_formula,\n\t\t\t{\n\t\t\t\t\\\"total_score\\\": self.total_score,\n\t\t\t\t\\\"avg_feedback_score\\\": self.avg_feedback_score,\n\t\t\t\t\\\"self_score\\\": self.self_score,\n\t\t\t},\n\t\t)\n\n\tdef calculate_final_score_using_average(self):\n\t\tself.final_score = flt(\n\t\t\t(self.total_score + self.avg_feedback_score + self.self_score) / 3,\n\t\t\tself.precision(\\\"final_score\\\"),\n\t\t)\n\n\tdef calculate_formula(self, formula, values):\n\t\t\"\"\"\n\t\tCalculate the value of the formula using the provided values.\n\t\t:param formula: The formula to be evaluated.\n\t\t:param values: A dictionary of values to be used in the evaluation.\n\t\t:return: The value of the formula after sanitizing and evaluating it.\n\t\t\"\"\"\n\t\tformula = sanitize_formula(formula)\n\t\ttry:\n\t\t\tformula = frappe.safe_eval(formula, values)\n\t\texcept Exception as e:\n\t\t\tfrappe.throw(_(\\\"Error evaluating formula: {0}\\\").format(e))\n", "CodeBleu_score": 35.01808496516238}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > nowdate():\n        if self.status != \"On Leave\" and not self.leave_application:\n            frappe.throw(_(\"Attendance cannot be marked for future dates\"))\n        elif getdate(self.attendance_date) < getdate(frappe.db.get_value(\"Employee\", self.employee, \"date_of_joining\")):\n            frappe.throw(_(\"Attendance cannot be marked before the employee's date of joining\"))\n\n", "CodeBleu_score": 29.424371827973673}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > nowdate():\n        if self.status != \"On Leave\" and not self.leave_application:\n            frappe.throw(_(\"Attendance cannot be marked for future dates unless the status is 'On Leave'\"))\n        elif self.status == \"On Leave\" and not self.leave_application:\n            frappe.throw(_(\"Attendance cannot be marked for future dates unless there is a leave application\"))\n\n    if self.attendance_date < getdate(self.employee_name):\n        frappe.throw(_(\"Attendance date cannot be earlier than the employee's date of joining\"))\n\n", "CodeBleu_score": 33.422861408997825}, {"code": "def validate_attendance_date(self)\n\t\n    if self.status == \"On Leave\" and not self.leave_application:\n        frappe.throw(_(\"Attendance cannot be marked for future dates if the status is 'On Leave'\"))\n\n    if self.attendance_date > nowdate():\n        frappe.throw(_(\"Attendance cannot be marked for future dates\"))\n\n    if self.attendance_date < getdate(self.employee_name):\n        frappe.throw(_(\"Attendance date cannot be earlier than the employee's date of joining\"))\n\n", "CodeBleu_score": 28.581877388669035}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t\n    if self.docstatus == 1:\n        duplicate_attendance = frappe.db.exists(\n            \"Attendance\",\n            {\n                \"employee\": self.employee,\n                \"attendance_date\": self.attendance_date,\n                \"docstatus\": 1,\n            },\n        )\n        if duplicate_attendance:\n            raise DuplicateAttendanceError(\n                _(\n                    \"Attendance already marked for {0} on {1}.<br>Go to Attendance and edit the record.<br><a href='/app/attendance/{2}'>{2}</a>\".format(\n                        self.employee,\n                        self.attendance_date,\n                        duplicate_attendance,\n                    )\n                )\n            )\n\n", "CodeBleu_score": 29.620964903989066}, {"code": "def validate_duplicate_record(self)\n\t\n    if frappe.db.exists(\n        \"Attendance\",\n        {\n            \"employee\": self.employee,\n            \"attendance_date\": self.attendance_date,\n            \"docstatus\": 1,\n        },\n    ):\n        attendance = frappe.get_doc(\"Attendance\", {\"employee\": self.employee, \"attendance_date\": self.attendance_date})\n        frappe.throw(\n            _(\"Attendance already exists for {0} on {1}. <a href='{2}'>Click here</a> to view.\").format(\n                frappe.bold(self.employee),\n                frappe.bold(self.attendance_date),\n                get_link_to_form(\"Attendance\", attendance.name),\n            )\n        )\n", "CodeBleu_score": 37.53457199716905}, {"code": "def validate_duplicate_record(self)\n\t\n    # Check if there is any other attendance record for the same employee on the same date\n    attendance = frappe.db.exists(\n        \"Attendance\",\n        {\n            \"employee\": self.employee,\n            \"attendance_date\": self.attendance_date,\n            \"name\": (\"not in\", [self.name]),\n        },\n    )\n    if attendance:\n        # Raise an exception if a duplicate attendance record is found\n        attendance_url = get_link_to_form(\"Attendance\", attendance)\n        msg = _(\n            \"Attendance for Employee {0} on {1} already exists. Please check {2}.\"\n        ).format(\n            frappe.bold(self.employee),\n            frappe.bold(format_date(self.attendance_date)),\n            frappe.utils.get_link_to_form(\"Attendance\", attendance),\n        )\n        frappe.throw(msg, title=_(\"Duplicate Attendance Record\"))\n\n", "CodeBleu_score": 45.18545831759615}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n    # Get message details\n    message_details = frappe.get_doc(\"Email Queue\", self.name)\n    message_subject = message_details.subject\n    message_body = message_details.message\n\n    # Get email addresses of users in the specified group\n    group_members = frappe.get_list(\"User\", filters={\"dws_group\": self.dws_group}, fields=[\"email\"])\n    email_addresses = [member.email for member in group_members]\n\n    # Send email with summary using template\n    frappe.sendmail(\n        recipients=email_addresses,\n        subject=message_subject,\n        message=message_body,\n        reference_doctype=self.doctype,\n        reference_name=self.name,\n    )\n\n    # Update status to \"Sent\"\n    self.status = \"Sent\"\n    self.save()\n\n\n", "CodeBleu_score": 37.15905074270736}, {"code": "def send_summary(self)\n\t\n    message_details = frappe.db.get_value(\"Message\", self.message, [\"subject\", \"sender\", \"message\"], as_dict=True)\n    emails = frappe.get_all(\n        \"User\",\n        filters={\"name\": [\"in\", [d.user for d in self.get(\"users\")]}, \"enabled\": 1},\n        fields=[\"name\", \"email\"],\n    )\n    for email in emails:\n        content = frappe.render_template(\n            \"templates/emails/daily_summary.html\",\n            {\n                \"message_details\": message_details,\n                \"user\": email.name,\n                \"email_id\": email.email,\n            },\n        )\n        frappe.sendmail(\n            recipients=email.email,\n            subject=message_details.subject,\n            content=content,\n            reference_doctype=self.doctype,\n            reference_name=self.name,\n        )\n    self.db_set(\"status\", \"Sent\")", "CodeBleu_score": 46.17704589039959}, {"code": "def send_summary(self)\n\t\n    # Get message details\n    message_details = frappe.db.get_value(\n        \"Email Account\", {\"enable_incoming\": 1, \"default_incoming\": 1}, [\"email_id\", \"incoming_email_server\"]\n    )\n    email_id = message_details[0]\n    incoming_email_server = message_details[1]\n\n    # Get email addresses of users in the specified group\n    users = frappe.db.get_list(\n        \"User\", filters={\"enabled\": 1, \"dws_group\": self.dws_group}, fields=[\"name\", \"email\"]\n    )\n    emails = [user[\"email\"] for user in users]\n\n    # Send email with summary using a template\n    frappe.sendmail(\n        recipients=emails,\n        message=self.message,\n        subject=self.subject,\n        reference_doctype=self.doctype,\n        reference_name=self.name,\n        reply_to=email_id,\n    )\n\n    # Update status to \"Sent\"\n    self.db_set(\"status\", \"Sent\")\n", "CodeBleu_score": 38.839789583943336}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    if self.get_doc_before_save() and self.get_doc_before_save().name != self.name:\n        return\n\n    if not self.job_applicant:\n        return\n\n    if not self.interview_round:\n        return\n\n    duplicate_interview = frappe.db.get_all(\n        \"Interview\",\n        filters={\n            \"job_applicant\": self.job_applicant,\n            \"interview_round\": self.interview_round,\n            \"name\": [\"not in\", [self.name]],\n        },\n        fields=[\"name\", \"job_applicant\", \"interview_round\"],\n        limit=1,\n    )\n\n    if duplicate_interview:\n        duplicate_interview = duplicate_interview[0]\n        raise DuplicateInterviewRoundError(\n            _(\n                \"Job Applicant {0} is not allowed to appear twice for the same Interview Round {1}. Please see {2} for details.\"\n            ).format(\n                get_link_to_form(\"Job Applicant\", self.job_applicant),\n                get_link_to_form(\"Interview Round\", self.interview_round),\n                get_link_to_form(\"Interview\", duplicate_interview.name),\n            )\n        )\n\n", "CodeBleu_score": 48.84567042138973}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.job_applicant and self.interview_round:\n        filters = {\n\t\t\t\\\"job_applicant\\\": self.job_applicant,\n\t\t\t\\\"interview_round\\\": self.interview_round,\n\t\t\t\\\"name\\\": (\\\"<>\\\", self.name),\n\t\t}\n        duplicate_interview = frappe.db.exists(\\\"Interview\\\", filters)\n        if duplicate_interview:\n            duplicate_interview_doc = frappe.get_doc(\\\"Interview\\\", duplicate_interview)\n            duplicate_interview_link = get_link_to_form(\\\"Interview\\\", duplicate_interview)\n            job_applicant_link = get_link_to_form(\\\"Job Applicant\\\", self.job_applicant)\n            frappe.throw(\n                _(\\\"Job Applicant {0} is already interviewed for this Interview Round. Please edit the existing interview record {1} or create a new interview record for the Job Applicant.\\\").format(\n                    frappe.bold(duplicate_interview_doc.job_applicant_name),\n                    frappe.utils.get_link_to_form(\\\"Interview\\\", duplicate_interview)\n                ),\n                title=_(\\\"Duplicate Interview\\\"),\n                exc=DuplicateInterviewRoundError,\n            )\n\n\n", "CodeBleu_score": 36.06707878376099}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.job_applicant and self.job_applicant_name != self.job_applicant:\n        existing_interview = frappe.db.get_value(\n            \"Interview\",\n            filters={\n                \"job_applicant\": self.job_applicant,\n                \"interview_round\": self.interview_round,\n                \"docstatus\": 1,\n            },\n            fieldname=[\"name\", \"job_applicant_name\", \"interview_round\"],\n            as_dict=True,\n        )\n\n        if existing_interview:\n            raise DuplicateInterviewRoundError(\n                _(\n                    \"Job Applicant {0} already appeared for Interview Round {1}. Please check {2} for more information.\"\n                ).format(\n                    get_link_to_form(\"Job Applicant\", existing_interview.job_applicant),\n                    get_link_to_form(\"Interview Round\", existing_interview.interview_round),\n                    get_link_to_form(\"Interview\", existing_interview.name),\n                )\n            )\n\n", "CodeBleu_score": 45.25874814852781}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    count = 0\n    for skill in self.skill_assessments:\n        if skill.rating:\n            total_rating += skill.rating\n            count += 1\n\n    self.average_rating = flt(total_rating / count) if count else 0\n\n", "CodeBleu_score": 33.61827610005637}, {"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    count = 0\n\n    for assessment in self.skill_assessment:\n        if assessment.rating:\n            total_rating += assessment.rating\n            count += 1\n\n    if count:\n        self.average_rating = flt(total_rating / count, 2)\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 35.41136734242619}, {"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    total_assessments = 0\n    for skill_assessment in self.skill_assessment:\n        if skill_assessment.rating:\n            total_rating += skill_assessment.rating\n            total_assessments += 1\n    if total_assessments:\n        self.average_rating = flt(total_rating / total_assessments)\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 33.21512941892474}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    interview_details = []\n    if doc.get(\"interviewers\"):\n        for interviewer in doc.interviewers:\n            interview_details.append(\n                {\n                    \"interviewer\": interviewer,\n                    \"interview_type\": \"Round\",\n                    \"interview_round\": doc.interview_round,\n                    \"designation\": doc.designation,\n                }\n            )\n    interview.interview_details = interview_details\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 48.5247517439932}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    interview.interview_details = []\n    if doc.interviewers:\n        for interviewer in doc.interviewers:\n            interview.append(\n                \"interview_details\",\n                {\n                    \"interviewer\": interviewer.interviewer,\n                    \"interviewer_name\": interviewer.interviewer_name,\n                    \"interview_date\": interviewer.interview_date,\n                    \"interview_start_time\": interviewer.interview_start_time,\n                    \"interview_end_time\": interviewer.interview_end_time,\n                },\n            )\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 37.16864093175215}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    interview.interview_details = []\n    if doc.interviewers:\n        for interviewer in json.loads(doc.interviewers):\n            interview.append(\n                \"interview_details\",\n                {\n                    \"interviewer\": interviewer.interviewer,\n                    \"interviewer_name\": frappe.db.get_value(\n                        \"Employee\", interviewer.interviewer, \"employee_name\"\n                    ),\n                },\n            )\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 39.83594028347855}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = frappe.db.sql_list(\n        \"\"\"select name from `tabJob Offer` where designation=%s and company=%s and offer_date between %s and %s and docstatus=1\"\"\",\n        (self.designation, self.company, from_date, to_date),\n    )\n    return job_offers\n\n", "CodeBleu_score": 34.66111842341485}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    return frappe.db.sql_list(\"\"\"select name from `tabJob Offer` where designation = %s and company = %s and status = '1' and offer_date between %s and %s\"\"\", (self.designation, self.company, from_date, to_date))\n", "CodeBleu_score": 27.710635756472396}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    return frappe.db.sql_list(\"\"\"select name from `tabJob Offer`\n        where designation=%s and company=%s and offer_date between %s and %s\n        and docstatus=1\"\"\", (self.designation, self.company, from_date, to_date))\n", "CodeBleu_score": 27.32627580023618}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    filters = {}\n    if company:\n        filters[\"company\"] = company\n    if department:\n        filters[\"department\"] = department\n    total_offers = frappe.db.count(\"Job Offer\", filters=filters)\n    accepted_offers = frappe.db.count(\"Job Offer\", filters=dict(filters, status=\"Accepted\"))\n    if total_offers:\n        acceptance_rate = (accepted_offers / total_offers) * 100\n    else:\n        acceptance_rate = 0\n    return acceptance_rate, \"Percent\"\n\n", "CodeBleu_score": 53.69827357655028}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    filters = {}\n    if company:\n        filters[\"company\"] = company\n    if department:\n        filters[\"department\"] = department\n\n    total_offers = frappe.db.count(\"Job Offer\", filters=filters)\n    accepted_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1, \"status\": \"Accepted\", **filters})\n\n    if total_offers == 0:\n        acceptance_rate = 0\n    else:\n        acceptance_rate = accepted_offers / total_offers * 100\n\n    return acceptance_rate, \"Percent\"\n\n", "CodeBleu_score": 55.13989365276382}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    filters = {}\n    if company:\n        filters[\"company\"] = company\n    if department:\n        filters[\"department\"] = department\n\n    total_offers = frappe.db.count(\n        \"Job Offer\",\n        filters={\n            \"docstatus\": 1,\n            \"status\": [\"in\", [\"Accepted\", \"Rejected\"]],\n            **filters,\n        },\n    )\n    accepted_offers = frappe.db.count(\n        \"Job Offer\",\n        filters={\n            \"docstatus\": 1,\n            \"status\": \"Accepted\",\n            **filters,\n        },\n    )\n\n    if total_offers == 0:\n        return 0\n\n    acceptance_rate = accepted_offers / total_offers * 100\n    return acceptance_rate\n\n", "CodeBleu_score": 45.19959965288304}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    final Result result = employerService.register(employerForRegisterDto);\n\n    if (!result.isSuccess()) {\n        return new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n    }\n\n    return new ResponseEntity<>(result, HttpStatus.OK);\n}", "CodeBleu_score": 74.12127052828261}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    final Result result = employerService.register(employerForRegisterDto);\n\n    if (!result.isSuccess()) {\n        return new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n    }\n\n    return new ResponseEntity<>(result, HttpStatus.OK);\n}", "CodeBleu_score": 74.12127052828261}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    final Result result = employerService.register(employerForRegisterDto);\n\n    if (!result.isSuccess()) {\n        return new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n    }\n\n    return ResponseEntity.ok(result);\n}", "CodeBleu_score": 78.74362042560284}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\t\tfinal Optional<CompanyStaff> staff = companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\t\tif (staff.isEmpty()) {\n\t\t\treturn new ErrorResult(Messages.notFound(this.entityName));\n\t\t}\n\n\t\tfinal CompanyStaff companyStaff = staff.get();\n\n\t\tfinal Result result = BusinessRules.run(\n\t\t\t\t() -> arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaff.getPassword())\n\t\t);\n\n\t\tif (!result.isSuccess()) {\n\t\t\treturn result;\n\t\t}\n\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\n\t\tcompanyStaffDao.save(companyStaff);\n\n\t\treturn new SuccessResult(Messages.updated(this.entityName));\n\t}", "CodeBleu_score": 56.94327902291282}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\tfinal Optional<CompanyStaff> companyStaff = companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\tif (!companyStaff.isPresent()) return new ErrorResult(Messages.notFound(entityName));\n\n\tfinal Result result = BusinessRules.run(arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword()));\n\tif (!result.isSuccess()) return result;\n\n\tcompanyStaff.get().setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.get().setLastName(companyStaffForUpdateDto.getLastName());\n\n\tcompanyStaffDao.save(companyStaff.get());\n\treturn new SuccessResult(Messages.updated(entityName));\n}", "CodeBleu_score": 66.386224075961}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\t\tfinal Optional<CompanyStaff> companyStaff = companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\n\t\tif (!companyStaff.isPresent()) {\n\t\t\treturn new ErrorResult(Messages.notFound(this.entityName));\n\t\t}\n\n\t\tfinal Result result = BusinessRules.run(arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaff.get().getPassword()));\n\n\t\tif (!result.isSuccess()) {\n\t\t\treturn result;\n\t\t}\n\n\t\tcompanyStaff.get().setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.get().setLastName(companyStaffForUpdateDto.getLastName());\n\n\t\tcompanyStaffDao.save(companyStaff.get());\n\n\t\treturn new SuccessResult(Messages.updated(this.entityName));\n\t}", "CodeBleu_score": 67.11069412243367}]}
