{"instance_id": "47ee1dae200b", "generation_result": [{"code": "public static void PreloadDll(string dllName){\n\t    string dllDir = GetDllDirectory();\n    string dllPath = Path.Combine(dllDir, dllName);\n    if (!File.Exists(dllPath)) {\n        throw new FileNotFoundException($\"DLL file not found: {dllPath}\");\n    }\n\n    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n        LoadDllWindows(dllPath);\n    } else {\n        LoadDllPosix(dllPath);\n    }\n}", "CodeBleu_score": 50.82630546315452}, {"code": "public static void PreloadDll(string dllName){\n\t    string dllDirectory = Path.GetDirectoryName(typeof(DllLoader).Assembly.Location);\n    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n        LoadLibrary(Path.Combine(dllDirectory, dllName));\n    } else {\n        LoadLibrary(dllName);\n    }\n}", "CodeBleu_score": 44.42226055249164}, {"code": "public static void PreloadDll(string dllName){\n\t    string dllPath = GetDllPath(dllName);\n    if (dllPath == null) {\n        return;\n    }\n    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n        LoadDllWin32(dllPath);\n    } else {\n        LoadDllPosix(dllPath);\n    }\n}", "CodeBleu_score": 30.398974169952552}]}
{"instance_id": "2073a8291d05", "generation_result": [{"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t    if (!assetsFileListHash.Contains(reader.FileName)) {\n        Logger.Info($\"Loading {reader.FullPath}\");\n        try {\n            var assetsFile = new SerializedFile(reader, this);\n            CheckStrippedVersion(assetsFile);\n            assetsFileList.Add(assetsFile);\n            assetsFileListHash.Add(assetsFile.fileName);\n\n            foreach (var sharedFile in assetsFile.m_Externals) {\n                var sharedFileName = sharedFile.fileName;\n\n                if (!importFilesHash.Contains(sharedFileName)) {\n                    var sharedFilePath = Path.Combine(Path.GetDirectoryName(originalPath), sharedFileName);\n                    if (!noexistFiles.Contains(sharedFilePath)) {\n                        if (!File.Exists(sharedFilePath)) {\n                            var findFiles = Directory.GetFiles(Path.GetDirectoryName(originalPath), sharedFileName, SearchOption.AllDirectories);\n                            if (findFiles.Length > 0) {\n                                sharedFilePath = findFiles[0];\n                            }\n                        }\n                        if (File.Exists(sharedFilePath)) {\n                            importFiles.Add(sharedFilePath);\n                            importFilesHash.Add(sharedFileName);\n                        } else {\n                            noexistFiles.Add(sharedFilePath);\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            Logger.Error($\"Error while reading assets file {reader.FullPath}\", e);\n            reader.Dispose();\n        }\n    } else {\n        Logger.Info($\"Skipping {reader.FullPath}\");\n        reader.Dispose();\n    }\n}", "CodeBleu_score": 57.371788128740874}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t    if (!assetsFileListHash.Contains(reader.FileName)) {\n        Logger.Info($\"Loading {reader.FullPath}\");\n        try {\n            var assetsFile = new SerializedFile(reader, this);\n            CheckStrippedVersion(assetsFile);\n            assetsFileList.Add(assetsFile);\n            assetsFileListHash.Add(assetsFile.fileName);\n\n            foreach (var sharedFile in assetsFile.m_Externals) {\n                var sharedFileName = sharedFile.fileName;\n\n                if (!importFilesHash.Contains(sharedFileName)) {\n                    var sharedFilePath = Path.Combine(Path.GetDirectoryName(originalPath), sharedFileName);\n                    if (!noexistFiles.Contains(sharedFilePath)) {\n                        if (!File.Exists(sharedFilePath)) {\n                            var findFiles = Directory.GetFiles(Path.GetDirectoryName(originalPath), sharedFileName, SearchOption.AllDirectories);\n                            if (findFiles.Length > 0) {\n                                sharedFilePath = findFiles[0];\n                            }\n                        }\n                        if (File.Exists(sharedFilePath)) {\n                            importFiles.Add(sharedFilePath);\n                            importFilesHash.Add(sharedFileName);\n                        } else {\n                            noexistFiles.Add(sharedFilePath);\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            Logger.Error($\"Error while reading assets file {reader.FullPath}\", e);\n            reader.Dispose();\n        }\n    } else {\n        Logger.Info($\"Skipping {reader.FullPath}\");\n        reader.Dispose();\n    }\n}", "CodeBleu_score": 57.371788128740874}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t    if (!assetsFileListHash.Contains(reader.FileName)) {\n        Logger.Info($\"Loading {reader.FullPath}\");\n        try {\n            var assetsFile = new SerializedFile(reader, this);\n            CheckStrippedVersion(assetsFile);\n            assetsFileList.Add(assetsFile);\n            assetsFileListHash.Add(assetsFile.fileName);\n\n            foreach (var sharedFile in assetsFile.m_Externals) {\n                var sharedFileName = sharedFile.fileName;\n\n                if (!importFilesHash.Contains(sharedFileName)) {\n                    var sharedFilePath = Path.Combine(Path.GetDirectoryName(reader.FullPath), sharedFileName);\n                    if (!noexistFiles.Contains(sharedFilePath)) {\n                        if (!File.Exists(sharedFilePath)) {\n                            var findFiles = Directory.GetFiles(Path.GetDirectoryName(reader.FullPath), sharedFileName, SearchOption.AllDirectories);\n                            if (findFiles.Length > 0) {\n                                sharedFilePath = findFiles[0];\n                            }\n                        }\n                        if (File.Exists(sharedFilePath)) {\n                            importFiles.Add(sharedFilePath);\n                            importFilesHash.Add(sharedFileName);\n                        } else {\n                            noexistFiles.Add(sharedFilePath);\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            Logger.Error($\"Error while reading assets file {reader.FullPath}\", e);\n            reader.Dispose();\n        }\n    } else {\n        Logger.Info($\"Skipping {reader.FullPath}\");\n        reader.Dispose();\n    }\n}", "CodeBleu_score": 57.205036197913984}]}
{"instance_id": "5dacc6a26301", "generation_result": [{"code": "public ImportedFrame FindFrameByPath(string path){\n\t    var frame = this;\n    var pathList = path.Split('/');\n    for (var i = 0; i < pathList.Length; i++) {\n        var name = pathList[i];\n        var child = frame.children.Find(x => x.Name == name);\n        if (child == null) {\n            return null;\n        }\n        frame = child;\n    }\n    return frame;\n}", "CodeBleu_score": 42.6106116152403}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\t    var pathSplit = path.Split('/');\n    var frame = this;\n    for (int i = 0; i < pathSplit.Length; i++) {\n        var name = pathSplit[i];\n        for (int j = 0; j < frame.Count; j++) {\n            var child = frame[j];\n            if (child.Name == name) {\n                frame = child;\n                break;\n            }\n        }\n    }\n    return frame;\n}", "CodeBleu_score": 37.8748045360724}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\t    var frame = this;\n    var pathParts = path.Split('/');\n    for (var i = 0; i < pathParts.Length; i++) {\n        var name = pathParts[i];\n        var child = frame.children.Find(x => x.Name == name);\n        if (child == null) {\n            return null;\n        }\n        frame = child;\n    }\n    return frame;\n}", "CodeBleu_score": 42.48486636281938}]}
{"instance_id": "c20b04c4ad37", "generation_result": [{"code": "public static FileReader DecompressGZip(FileReader reader){\n\t    var compressed = reader.ReadAllBytes();\n    using (var compressedStream = new MemoryStream(compressed)) {\n        using (var decompressedStream = new MemoryStream()) {\n            using (var gzipStream = new GZipStream(compressedStream, CompressionMode.Decompress)) {\n                gzipStream.CopyTo(decompressedStream);\n            }\n            return new FileReader(decompressedStream.ToArray());\n        }\n    }\n}", "CodeBleu_score": 29.85552054609613}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\t    // Create a MemoryStream to hold the decompressed data\n    var decompressed = new MemoryStream();\n    // Create a GZipStream to decompress the data\n    using (var gzip = new GZipStream(reader, CompressionMode.Decompress)) {\n        // Copy the decompressed data to the MemoryStream\n        gzip.CopyTo(decompressed);\n    }\n    // Return a new FileReader with the decompressed data\n    return new FileReader(decompressed.ToArray());\n}", "CodeBleu_score": 32.94474282517709}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\t    // Create a new MemoryStream to hold the decompressed data\n    var decompressedData = new MemoryStream();\n    // Create a new GZipStream to decompress the data\n    using (var gzip = new GZipStream(reader, CompressionMode.Decompress)) {\n        // Read the compressed data into the MemoryStream\n        gzip.CopyTo(decompressedData);\n    }\n    // Return a new FileReader with the decompressed data\n    return new FileReader(decompressedData.ToArray());\n}", "CodeBleu_score": 33.35165841559174}]}
{"instance_id": "11ce5c7b009d", "generation_result": [{"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\tforeach (string commandString in commandStrings) {\n\t\tif (commandString == null)\n\t\t\tthrow new ArgumentNullException(\\\"commandString\\\");\n\t}\n\tforeach (SwitchForm switchForm in switchForms) {\n\t\tif (switchForm == null)\n\t\t\tthrow new ArgumentNullException(\\\"switchForm\\\");\n\t}\n\tforeach (string commandString in commandStrings) {\n\t\tif (!ParseString(commandString, switchForms))\n\t\t\tNonSwitchStrings.Add(commandString);\n\t}\n}", "CodeBleu_score": 36.86821312618897}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\tfor (int i = 0; i < commandStrings.Length; i++) {\n\t\tif (!ParseString(commandStrings[i], switchForms))\n\t\t\tNonSwitchStrings.Add(commandStrings[i]);\n\t}\n}", "CodeBleu_score": 27.22989804297607}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\tforeach (string commandString in commandStrings) {\n\t\tif (!ParseString(commandString, switchForms)) {\n\t\t\tNonSwitchStrings.Add(commandString);\n\t\t}\n\t}\n}", "CodeBleu_score": 24.538253189984346}]}
{"instance_id": "b8da2d0a3f76", "generation_result": [{"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t    reader = new ResourceReader(m_Texture2D.m_Data);\n    m_Width = m_Texture2D.m_Width;\n    m_Height = m_Texture2D.m_Height;\n    m_TextureFormat = m_Texture2D.m_TextureFormat;\n    version = m_Texture2D.version;\n    platform = m_Texture2D.platform;\n    outPutSize = m_Texture2D.outPutSize;\n}", "CodeBleu_score": 66.10646391277267}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t    reader = new ResourceReader(m_Texture2D.m_Data);\n    m_Width = m_Texture2D.m_Width;\n    m_Height = m_Texture2D.m_Height;\n    m_TextureFormat = m_Texture2D.m_TextureFormat;\n    version = m_Texture2D.version;\n    platform = m_Texture2D.platform;\n    outPutSize = m_Texture2D.outPutSize;\n}", "CodeBleu_score": 66.10646391277267}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t    reader = m_Texture2D.m_Reader;\n    m_Width = m_Texture2D.m_Width;\n    m_Height = m_Texture2D.m_Height;\n    m_TextureFormat = m_Texture2D.m_TextureFormat;\n    version = m_Texture2D.version;\n    platform = m_Texture2D.platform;\n    outPutSize = m_Texture2D.outPutSize;\n}", "CodeBleu_score": 80.63417976201549}]}
{"instance_id": "4d1412b550a3", "generation_result": [{"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t    result.Clear();\n    for (int i = 0; i < sp.arraySize; i++) {\n        SerializedProperty element = sp.GetArrayElementAtIndex(i);\n        if (!string.IsNullOrEmpty(element.stringValue)) {\n            result.Add(element.stringValue);\n        }\n    }\n    if (result.Count == 0) {\n        return s_ContentNothing.text;\n    }\n    s_Sb.Clear();\n    for (int i = 0; i < result.Count; i++) {\n        if (i > 0) {\n            s_Sb.Append(\", \");\n        }\n        s_Sb.Append(result[i]);\n    }\n    return s_Sb.ToString();\n}", "CodeBleu_score": 51.803665051196624}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t    result.Clear();\n    for (int i = 0; i < sp.arraySize; i++) {\n        SerializedProperty element = sp.GetArrayElementAtIndex(i);\n        if (element.objectReferenceValue != null) {\n            result.Add(element.objectReferenceValue.name);\n        }\n    }\n    if (result.Count == 0) {\n        return s_ContentNothing.text;\n    }\n    s_Sb.Clear();\n    for (int i = 0; i < result.Count; i++) {\n        s_Sb.Append(result[i]);\n        if (i < result.Count - 1) {\n            s_Sb.Append(\\\", \\\");\n        }\n    }\n    return s_Sb.ToString();\n}", "CodeBleu_score": 46.331282464992725}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t    result.Clear();\n    for (int i = 0; i < sp.arraySize; i++) {\n        SerializedProperty element = sp.GetArrayElementAtIndex(i);\n        if (element.objectReferenceValue != null) {\n            result.Add(element.objectReferenceValue.name);\n        }\n    }\n    if (result.Count == 0) {\n        return \\\"Nothing\\\";\n    }\n    s_Sb.Clear();\n    for (int i = 0; i < result.Count; i++) {\n        if (i > 0) {\n            s_Sb.Append(\\\", \\\");\n        }\n        s_Sb.Append(result[i]);\n    }\n    return s_Sb.ToString();\n}", "CodeBleu_score": 48.344288128564}]}
{"instance_id": "5014bde74f8b", "generation_result": [{"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t    if (!add && !s_ActiveNames.Contains(prop.Name)) return;\n    var name = prop.Name;\n    var type = prop.Type;\n    var content = new GUIContent(name);\n    var enabled = s_ActiveNames.Contains(name);\n    var action = (SerializedProperty x) => {\n        var current = (SerializedProperty)x;\n        if (add) {\n            current.InsertArrayElementAtIndex(0);\n            current.GetArrayElementAtIndex(0).FindPropertyRelative(\\\"m_Name\\\").stringValue = name;\n            current.GetArrayElementAtIndex(0).FindPropertyRelative(\\\"m_Type\\\").intValue = (int)type;\n        } else {\n            var index = -1;\n            for (var i = 0; i < current.arraySize; i++) {\n                var p = current.GetArrayElementAtIndex(i);\n                if (p.FindPropertyRelative(\\\"m_Name\\\").stringValue == name) {\n                    index = i;\n                    break;\n                }\n            }\n            if (index != -1) {\n                current.DeleteArrayElementAtIndex(index);\n            }\n        }\n        current.serializedObject.ApplyModifiedProperties();\n    };\n    menu.AddItem(content, enabled, action, sp);\n}", "CodeBleu_score": 34.57682721901528}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t    if (add && s_ActiveNames.Contains(prop.Name)) return;\n\n    var label = prop.Name;\n    var isTexture = prop.Type == AnimatableProperty.ShaderPropertyType.Texture;\n    if (isTexture)\n    {\n        label += \\\" (Texture)\\\";\n    }\n\n    menu.AddItem(new GUIContent(label), add, x =>\n    {\n        var current = (SerializedProperty)x;\n        var index = current.FindPropertyRelative(\\\"m_Properties\\\").arraySize;\n\n            if (add)\n            {\n                current.FindPropertyRelative(\\\"m_Properties\\\").InsertArrayElementAtIndex(index);\n                var p = current.FindPropertyRelative(\\\"m_Properties\\\").GetArrayElementAtIndex(index);\n                p.FindPropertyRelative(\\\"m_Name\\\").stringValue = prop.Name;\n                p.FindPropertyRelative(\\\"m_Type\\\").intValue = (int)prop.Type;\n            }\n            else\n            {\n                for (var i = 0; i < index; i++)\n                {\n                    var p = current.FindPropertyRelative(\\\"m_Properties\\\").GetArrayElementAtIndex(i);\n                    if (p.FindPropertyRelative(\\\"m_Name\\\").stringValue == prop.Name)\n                    {\n                        current.FindPropertyRelative(\\\"m_Properties\\\").DeleteArrayElementAtIndex(i);\n                        break;\n                    }\n                }\n            }\n\n            current.serializedObject.ApplyModifiedProperties();\n    }, sp);\n}", "CodeBleu_score": 39.05515627293638}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t    if (!add && s_ActiveNames.Contains(prop.Name)) return;\n    if (add && s_ActiveNames.Contains(prop.Name)) return;\n\n    var name = prop.Name;\n    var type = prop.Type;\n    var content = new GUIContent(name, $\\\"{name} ({type})\\\");\n    menu.AddItem(content, false, x =>\n    {\n        var current = (SerializedProperty)x;\n            var index = current.FindPropertyRelative(\\\"m_Name\\\").stringValue == name ? current.propertyPath.IndexOf(\\\"m_Name\\\") : -1;\n            if (index == -1) return;\n\n            var spName = current.GetArrayElementAtIndex(index);\n            var spType = spName.FindPropertyRelative(\\\"m_Type\\\");\n            if (add) {\n                spName.stringValue = name;\n                spType.intValue = (int)type;\n            } else {\n                current.DeleteArrayElementAtIndex(index);\n            }\n\n            current.serializedObject.ApplyModifiedProperties();\n        }, sp);\n    }", "CodeBleu_score": 41.3219224032729}]}
{"instance_id": "20e390481814", "generation_result": [{"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t    var x = sp.FindPropertyRelative(\"x\");\n    var y = sp.FindPropertyRelative(\"y\");\n    var z = sp.FindPropertyRelative(\"z\");\n    var w = sp.FindPropertyRelative(\"w\");\n\n    var showYz = y.floatValue != z.floatValue || y.hasMultipleDifferentValues || z.hasMultipleDifferentValues;\n    var showW = w.floatValue != 0f || w.hasMultipleDifferentValues;\n\n    EditorGUI.BeginChangeCheck();\n    showXyz = GUILayout.Toggle(showXyz, s_ContentRandom, EditorStyles.miniButton, GUILayout.Width(60));\n    if (EditorGUI.EndChangeCheck() && !showXyz) {\n        y.floatValue = x.floatValue;\n        z.floatValue = x.floatValue;\n        w.floatValue = 0f;\n    }\n\n    EditorGUI.BeginDisabledGroup(showXyz);\n    EditorGUI.indentLevel++;\n    EditorGUILayout.PropertyField(x);\n    if (showYz) {\n        EditorGUILayout.PropertyField(y);\n        EditorGUILayout.PropertyField(z);\n    }\n    else if (showW) {\n        EditorGUILayout.PropertyField(w);\n    }\n    EditorGUI.indentLevel--;\n    EditorGUI.EndDisabledGroup();\n\n    return showXyz;\n}", "CodeBleu_score": 57.084684688153445}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t    var x = sp.vector3Value.x;\n    var y = sp.vector3Value.y;\n    var z = sp.vector3Value.z;\n    var show = showXyz || x != y || x != z || sp.hasMultipleDifferentValues;\n    var showVector3 = showXyz || !show;\n    var showSingle = show && !showVector3;\n    var showToggle = showSingle || showVector3;\n\n    EditorGUI.BeginChangeCheck();\n    showToggle = EditorGUILayout.Toggle(showToggle, s_ContentRandom, EditorStyles.miniButton, GUILayout.Width(60));\n    if (EditorGUI.EndChangeCheck())\n    {\n        showVector3 = showToggle;\n        showSingle = !showToggle;\n    }\n\n    EditorGUI.BeginDisabledGroup(!showVector3);\n    if (showVector3)\n    {\n        EditorGUILayout.PropertyField(sp);\n    }\n    else\n    {\n        var xyz = new Vector3(x, y, z);\n        EditorGUILayout.PropertyField(sp, s_ContentXYZ, true);\n        if (EditorGUI.EndChangeCheck())\n        {\n            xyz = sp.vector3Value;\n            y = xyz.y;\n            z = xyz.z;\n            sp.vector3Value = new Vector3(x, y, z);\n        }\n    }\n\n    EditorGUI.EndDisabledGroup();\n    return show;\n}", "CodeBleu_score": 47.97248185295686}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t", "CodeBleu_score": 1.5486635295409983}]}
{"instance_id": "c3587cbcda7e", "generation_result": [{"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t    for (int i = 0, count = s_Entries.Count; i < count; ++i) {\n        MatEntry entry = s_Entries[i];\n        if (entry.BaseMat == baseMat && entry.Texture == texture && entry.Id == id && entry.Props == props) {\n            entry.Count++;\n            return entry.Mat;\n        }\n    }\n    MatEntry entry = new MatEntry();\n    entry.BaseMat = baseMat;\n    entry.Texture = texture;\n    entry.Id = id;\n    entry.Props = props;\n    entry.Count = 1;\n    entry.Mat = new Material(baseMat);\n    entry.Mat.SetTexture(\"_MainTex\", texture);\n    entry.Mat.SetFloat(\"_Id\", id);\n    entry.Mat.SetFloat(\"_Props\", props);\n    s_Entries.Add(entry);\n    return entry.Mat;\n}", "CodeBleu_score": 36.38797420590774}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t    var entry = s_Entries.Find(x => x.BaseMat == baseMat && x.Texture == texture && x.Id == id && x.Props == props);\n    if (entry != null) {\n        entry.Count++;\n        return entry.Mat;\n    }\n    var mat = new Material(baseMat);\n    mat.mainTexture = texture;\n    mat.SetFloat(Shader.PropertyToID(\"_Id\"), id);\n    mat.SetFloat(Shader.PropertyToID(\"_Props\"), props);\n    s_Entries.Add(new MatEntry { BaseMat = baseMat, Texture = texture, Id = id, Props = props, Count = 1, Mat = mat });\n    return mat;\n}", "CodeBleu_score": 30.016078859751456}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t    for (int i = 0; i < s_Entries.Count; i++) {\n        MatEntry entry = s_Entries[i];\n        if (entry.m_BaseMat == baseMat && entry.m_Texture == texture && entry.m_Id == id && entry.m_Props == props) {\n            entry.m_Count++;\n            return entry.m_Material;\n        }\n    }\n\n    MatEntry entry = new MatEntry();\n    entry.m_BaseMat = baseMat;\n    entry.m_Texture = texture;\n    entry.m_Id = id;\n    entry.m_Props = props;\n    entry.m_Count = 1;\n    entry.m_Material = new Material(baseMat);\n    entry.m_Material.mainTexture = texture;\n    entry.m_Material.SetFloat(Shader.PropertyToID(\"_Id\"), id);\n    entry.m_Material.SetFloat(Shader.PropertyToID(\"_Props\"), props);\n    s_Entries.Add(entry);\n    return entry.m_Material;\n}", "CodeBleu_score": 36.86388708706025}]}
{"instance_id": "a35149bc8b8b", "generation_result": [{"code": "public static void Remove(Material customMat){\n\t    if (customMat == null) return;\n    for (var i = 0; i < s_Entries.Count; i++) {\n        var e = s_Entries[i];\n        if (e.customMat != customMat) continue;\n        --e.count;\n        if (e.count > 0) return;\n        Object.DestroyImmediate(e.customMat);\n        e.baseMat = null;\n        e.texture = null;\n        e.id = -1;\n        e.props = 0;\n        s_Entries.RemoveAt(i);\n        return;\n    }\n}", "CodeBleu_score": 61.5643652550389}, {"code": "public static void Remove(Material customMat){\n\t    if (customMat == null) return;\n    for (var i = 0; i < s_Entries.Count; i++) {\n        var e = s_Entries[i];\n        if (e.customMat != customMat) continue;\n        --e.count;\n        if (e.count > 0) return;\n        Object.DestroyImmediate(e.customMat);\n        e.baseMat = null;\n        e.texture = null;\n        e.id = -1;\n        e.props = 0;\n        s_Entries.RemoveAt(i);\n        //Debug.LogFormat(\\\">>>> ModifiedMaterial.Remove -> count = count:{0}, mat:{1}\\\", s_Entries.Count, customMat);\n        return;\n    }\n}", "CodeBleu_score": 61.5643652550389}, {"code": "public static void Remove(Material customMat){\n\t    if (customMat == null) return;\n\n    for (var i = 0; i < s_Entries.Count; i++) {\n        var e = s_Entries[i];\n        if (e.customMat != customMat) continue;\n        e.count--;\n        if (e.count == 0) {\n            Object.DestroyImmediate(e.customMat);\n            e.baseMat = null;\n            e.texture = null;\n            e.id = 0;\n            e.props = 0;\n            s_Entries.RemoveAt(i);\n        }\n        return;\n    }\n}", "CodeBleu_score": 62.008620026177475}]}
{"instance_id": "892bbee52ab9", "generation_result": [{"code": "private void RefreshParticles(GameObject root){\n\t    var children = root.GetComponentsInChildren<ParticleSystem>();\n    var particleSystems = new List<ParticleSystem>();\n    for (int i = 0; i < children.Length; i++) {\n        var ps = children[i];\n        if (ps.GetComponent<UIParticleRenderer>() != this) {\n            continue;\n        }\n\n        particleSystems.Add(ps);\n        ps.textureSheetAnimation.enabled = false;\n        ps.textureSheetAnimation.enabled = true;\n    }\n\n    RefreshParticles(particleSystems);\n}", "CodeBleu_score": 36.362174933532806}, {"code": "private void RefreshParticles(GameObject root){\n\t", "CodeBleu_score": 0.8950667016864431}, {"code": "private void RefreshParticles(GameObject root){\n\t", "CodeBleu_score": 0.8950667016864431}]}
{"instance_id": "d6b082e37770", "generation_result": [{"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t    containerBuilder.RegisterAssemblyTypes(currentAssembly)\n        .AssignableTo<IColorSwapManager>()\n        .As<IColorSwapManager>()\n        .AsSelf()\n        .SingleInstance();\n}", "CodeBleu_score": 58.26676170815468}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t    containerBuilder.RegisterAssemblyTypes(currentAssembly)\n        .AssignableTo<IColorSwapManager>()\n        .As<IColorSwapManager>()\n        .AsSelf()\n        .SingleInstance();\n}", "CodeBleu_score": 58.26676170815468}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t    containerBuilder.RegisterAssemblyTypes(currentAssembly)\n        .AssignableTo<IColorSwapManager>()\n        .As<IColorSwapManager>()\n        .AsSelf()\n        .SingleInstance();\n}", "CodeBleu_score": 58.26676170815468}]}
{"instance_id": "2359d72977a4", "generation_result": [{"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t    if (CurrentState.CanConnect()) {\n        IpAddress = ipAddress;\n        ServerPort = port;\n        await initSerializerTask;\n            await ReservationNegotiationAsync();\n    }\n}", "CodeBleu_score": 60.43189264492522}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t    Log.Info(\\\"Connecting to MultiplayerSessionManager...\\\");\n    IpAddress = ipAddress;\n    ServerPort = port;\n    await initSerializerTask;\n            await CurrentState.InitiateReservationNegotiationAsync(this);\n}", "CodeBleu_score": 62.910528953648445}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t    if (CurrentState.IsConnected) {\n        throw new MultiplayerSessionException(\\\"Cannot connect to server, already connected.\\\");\n    }\n\n    IpAddress = ipAddress;\n    ServerPort = port;\n\n    await initSerializerTask;\n            await CurrentState.ReservationNegotiationAsync(this);\n}", "CodeBleu_score": 59.07950775447078}]}
{"instance_id": "151a27d718b1", "generation_result": [{"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t    if (sessionConnectionState == null) {\n        throw new ArgumentNullException(nameof(sessionConnectionState));\n    }\n    if (sessionConnectionState == CurrentState) {\n        return;\n    }\n    Log.Info($\"Transitioning from {CurrentState.CurrentStage} to {sessionConnectionState.CurrentStage}\");\n    CurrentState = sessionConnectionState;\n    if (CurrentState.CurrentStage == MultiplayerSessionConnectionStage.SESSION_RESERVED) {\n        Log.Info($\"Player name: {PlayerSettings.PlayerName}\");\n    }\n    ConnectionStateChanged?.Invoke(this, new MultiplayerSessionConnectionStateChangedEventArgs(sessionConnectionState));\n}", "CodeBleu_score": 43.58951312132472}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t    if (sessionConnectionState == null) {\n        throw new ArgumentNullException(\\\"sessionConnectionState\\\");\n    }\n    if (sessionConnectionState.CurrentStage == MultiplayerSessionConnectionStage.DISCONNECTED) {\n        throw new ArgumentException(\\\"sessionConnectionState must not be DISCONNECTED\\\", \\\"sessionConnectionState\\\");\n    }\n    if (sessionConnectionState.CurrentStage == CurrentState.CurrentStage) {\n        return;\n    }\n    Log.Info(\\\"Transitioning from \\\" + CurrentState.CurrentStage + \\\" to \\\" + sessionConnectionState.CurrentStage + \\\"\\\");\n    ConnectionStateChanged?.Invoke(this, new MultiplayerSessionConnectionStateChangedEventArgs(CurrentState, sessionConnectionState));\n    CurrentState = sessionConnectionState;\n    if (sessionConnectionState.CurrentStage == MultiplayerSessionConnectionStage.SESSION_RESERVED) {\n        Log.Info(\\\"Player name: \\\" + PlayerSettings.PlayerName);\n    }\n}", "CodeBleu_score": 39.31748813620226}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t    if (CurrentState == null) {\n        Log.Error(\\\"Attempted to set null connection state\\\");\n        return;\n    }\n    if (sessionConnectionState == null) {\n        Log.Error(\\\"Attempted to set null connection state\\\");\n        return;\n    }\n    if (CurrentState.CurrentStage == MultiplayerSessionConnectionStage.DISCONNECTED && sessionConnectionState.CurrentStage != MultiplayerSessionConnectionStage.DISCONNECTED) {\n        Log.Info(\\\"Transitioning from DISCONNECTED to \\\" + sessionConnectionState.CurrentStage);\n    } else if (CurrentState.CurrentStage != MultiplayerSessionConnectionStage.DISCONNECTED && sessionConnectionState.CurrentStage == MultiplayerSessionConnectionStage.DISCONNECTED) {\n        Log.Info(\\\"Transitioning from \\\" + CurrentState.CurrentStage + \\\" to DISCONNECTED\\\");\n    } else if (CurrentState.CurrentStage != sessionConnectionState.CurrentStage) {\n        Log.Info(\\\"Transitioning from \\\" + CurrentState.CurrentStage + \\\" to \\\" + sessionConnectionState.CurrentStage);\n    }\n    if (sessionConnectionState.CurrentStage == MultiplayerSessionConnectionStage.SESSION_RESERVED) {\n        Log.Info(\\\"Player name: \\\" + PlayerSettings.PlayerName);\n    }\n    CurrentState = sessionConnectionState;\n    ConnectionStateChanged?.Invoke(this, new MultiplayerSessionConnectionStateChangedEventArgs(CurrentState.CurrentStage));\n}", "CodeBleu_score": 34.89037069909173}]}
{"instance_id": "7f7717307d6a", "generation_result": [{"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t    client.Start();\n    await Task.Run(() =>\n    {\n        NetPeer peer = client.Connect(ipAddress, serverPort, \"Nitrox\");\n        connectedEvent.WaitOne(2000);\n        connectedEvent.Reset();\n    });\n}", "CodeBleu_score": 47.91767381482961}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t    client.Start();\n    await Task.Run(() =>\n    {\n        if (!client.Connect(ipAddress, serverPort, \"\").Wait(2000))\n        {\n            connectedEvent.Reset();\n        }\n    });\n}", "CodeBleu_score": 42.410479565718795}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t    await Task.Run(() => {\n        client.Start();\n        NetPeer server = client.Connect(ipAddress, serverPort, \"\");\n        if (!connectedEvent.WaitOne(2000)) {\n            server.Disconnect();\n            server = null;\n        }\n        connectedEvent.Reset();\n    });\n}", "CodeBleu_score": 42.70653289959967}]}
{"instance_id": "eeb95434f1eb", "generation_result": [{"code": "public void StartFireSuppression(NitroxId id){\n\t    GameObject cyclops = NitroxEntity.RequireObjectFrom(id);\n    CyclopsFireSuppressionButton fireSuppressionButton = cyclops.RequireComponentInChildren<CyclopsFireSuppressionButton>();\n    fireSuppressionButton.StartCooldown();\n    using (PacketSuppressor<EntityMetadataUpdate>.Suppress()) {\n        cyclops.GetComponent<CyclopsFireSuppression>().StartFireSuppression();\n    }\n}", "CodeBleu_score": 43.76433970694579}, {"code": "public void StartFireSuppression(NitroxId id){\n\t    GameObject cyclops = NitroxEntity.RequireObjectFrom(id);\n    CyclopsFireSuppressionButton fireSuppressionButton = cyclops.RequireComponentInChildren<CyclopsFireSuppressionButton>();\n    fireSuppressionButton.StartCooldown();\n    using (PacketSuppressor<EntityMetadataUpdate>.Suppress()) {\n        cyclops.GetComponent<CyclopsFireSuppression>().StartFireSuppression();\n    }\n}", "CodeBleu_score": 43.76433970694579}, {"code": "public void StartFireSuppression(NitroxId id){\n\t    GameObject cyclops = NitroxEntity.RequireObjectFrom(id);\n    CyclopsFireSuppressionButton fireSuppressionButton = cyclops.RequireComponentInChildren<CyclopsFireSuppressionButton>();\n    fireSuppressionButton.StartCooldown();\n    cyclops.BroadcastMessage(\"StartFireSuppression\", SendMessageOptions.DontRequireReceiver);\n}", "CodeBleu_score": 37.753816334631054}]}
{"instance_id": "a23a043559c6", "generation_result": [{"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t    if (subRoot.GetComponent<SubRoot>().id.Equals(damagePoint.GetComponent<CyclopsDamagePoint>().subRoot.id)) {\n        CyclopsDamagePointRepaired packet = new CyclopsDamagePointRepaired(damagePoint.GetComponent<CyclopsDamagePoint>().id, repairAmount);\n        packetSender.Send(packet);\n    }\n}", "CodeBleu_score": 33.196828431015255}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t    NitroxId subRootId = subRoot.GetId();\n    NitroxId damagePointId = damagePoint.GetId();\n    CyclopsDamagePointRepaired packet = new CyclopsDamagePointRepaired(subRootId, damagePointId, repairAmount);\n    packetSender.Send(packet);\n}", "CodeBleu_score": 30.63787511751495}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t    NitroxId subRootId = NitroxEntity.GetId(subRoot.gameObject);\n    NitroxId damagePointId = NitroxEntity.GetId(damagePoint.gameObject);\n    CyclopsDamagePointRepaired packet = new CyclopsDamagePointRepaired(subRootId, damagePointId, repairAmount);\n    packetSender.Send(packet);\n}", "CodeBleu_score": 31.796034661011056}]}
{"instance_id": "dfb3586de856", "generation_result": [{"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t    if (!subRoot.TryGetIdOrWarn(out NitroxId subId)) {\n        return;\n    }\n\n    if (subRoot.health <= 0) {\n        return;\n    }\n\n    CyclopsDamageInfoData cyclopsDamageInfoData = new CyclopsDamageInfoData();\n\n    if (info.IsPresent) {\n        cyclopsDamageInfoData.damageInfo = info.Get();\n    }\n\n    List<CyclopsDamagePoint> activeDamagePoints = new List<CyclopsDamagePoint>();\n\n    foreach (var damagePoint in subRoot.damageManager.damagePoints) {\n        if (damagePoint.IsActive()) {\n            activeDamagePoints.Add(damagePoint);\n        }\n    }\n\n    cyclopsDamageInfoData.activeDamagePoints = activeDamagePoints.ToArray();\n\n    List<CyclopsFireData> fireData = new List<CyclopsFireData>();\n\n    foreach (var fire in subRoot.fireManager.fires) {\n        fireData.Add(new CyclopsFireData(fire.gameObject.GetComponent<SubFire>().fireSuppressionActive, fire.gameObject.GetComponent<SubFire>().fireSuppressionSystemDuration, fire.gameObject.GetComponent<SubFire>().fireSuppressionSystemDuration));\n    }\n\n    cyclopsDamageInfoData.fireData = fireData.ToArray();\n\n    CyclopsDamage packet = new CyclopsDamage(subId, cyclopsDamageInfoData);\n    packetSender.Send(packet);\n}", "CodeBleu_score": 49.69065198236473}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t    if (!subRoot.TryGetIdOrWarn(out NitroxId subId)) {\n        return;\n    }\n\n    if (subRoot.health <= 0) {\n        return;\n    }\n\n    CyclopsDamageInfoData damageInfo = info.HasValue ? new CyclopsDamageInfoData(info.Value) : null;\n\n    List<CyclopsDamagePointData> damagePoints = new List<CyclopsDamagePointData>();\n    List<CyclopsFireData> fireData = new List<CyclopsFireData>();\n\n    foreach (CyclopsDamagePoint damagePoint in subRoot.damageManager.damagePoints) {\n        if (damagePoint.active) {\n            damagePoints.Add(new CyclopsDamagePointData(damagePoint));\n        }\n    }\n\n    foreach (SubFire subFire in subRoot.subFireList) {\n        if (subFire.fireActive) {\n            fireData.Add(new CyclopsFireData(subFire));\n        }\n    }\n\n    CyclopsDamage packet = new CyclopsDamage(subId, damageInfo, damagePoints, fireData);\n    packetSender.Send(packet);\n}", "CodeBleu_score": 40.27974689355714}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t    if (!subRoot.TryGetIdOrWarn(out NitroxId subId)) {\n        return;\n    }\n\n    if (subRoot.health < 0.001f) {\n        return;\n    }\n\n    CyclopsDamageInfoData damageInfoData = new();\n    if (info.IsPresent) {\n        damageInfoData.damageType = info.Value.damageType;\n        damageInfoData.damageAmount = info.Value.damageAmount;\n        damageInfoData.damageSource = info.Value.damageSource;\n        damageInfoData.damageSourceId = info.Value.damageSourceId;\n        damageInfoData.damageSourcePosition = info.Value.damageSourcePosition;\n    }\n\n    List<CyclopsDamagePointData> damagePoints = new();\n    foreach (var damagePoint in subRoot.damageManager.damagePoints) {\n        damagePoints.Add(new CyclopsDamagePointData(damagePoint.GetId(), damagePoint.health, damagePoint.GetPosition()));\n    }\n\n    List<CyclopsFireData> fireData = new();\n    foreach (var fire in subRoot.fireManager.fires) {\n        fireData.Add(new CyclopsFireData(fire.GetId(), fire.GetPosition(), fire.GetExtinguisherPosition(), fire.GetFireIntensity(), fire.GetFireSize()));\n    }\n\n    CyclopsDamage packet = new(subId, damageInfoData, damagePoints, fireData);\n    packetSender.Send(packet);\n}", "CodeBleu_score": 43.71455944100881}]}
{"instance_id": "03223c10109f", "generation_result": [{"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t    foreach (Entity entity in dirtyEntities) {\n        // If the entity is a child, we need to get the parent to remove the child from it\n        if (entity.ParentId != null) {\n            Entity parent = GetEntity(entity.ParentId);\n            if (parent != null) {\n                parent.ChildEntities.Remove(entity);\n            }\n        }\n\n        // Get the GameObject associated with the entity\n        GameObject gameObject = GetGameObject(entity.Id);\n        if (gameObject != null) {\n            // Destroy the GameObject\n            Destroy(gameObject);\n        }\n    }\n}", "CodeBleu_score": 52.08728811101682}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t    List<Entity> dirtyEntitiesCopy = dirtyEntities.ToList();\n    for (int i = 0; i < dirtyEntitiesCopy.Count; i++) {\n        Entity entity = dirtyEntitiesCopy[i];\n        if (entity.ParentId != null) {\n            Entity parentEntity = entity.Parent;\n            if (parentEntity != null) {\n                parentEntity.ChildEntities.Remove(entity);\n            }\n        }\n        GameObject gameObject = GetGameObject(entity.Id);\n        if (gameObject != null) {\n            GameObject.Destroy(gameObject);\n        }\n    }\n}", "CodeBleu_score": 42.16648595499311}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t    List<Entity> entitiesToRemove = new List<Entity>();\n    foreach (Entity entity in dirtyEntities) {\n        entitiesToRemove.Add(entity);\n        if (entity.ParentId != null) {\n            if (entity.ParentId == entity.Id) {\n                continue;\n            }\n            entitiesToRemove.Add(entity.Parent);\n        }\n    }\n    foreach (Entity entity in entitiesToRemove) {\n        if (entity.ParentId != null) {\n            entity.Parent.RemoveChild(entity);\n        }\n        GameObject gameObject = entity.GameObject;\n        if (gameObject != null) {\n            GameObject.Destroy(gameObject);\n        }\n    }\n}", "CodeBleu_score": 49.358497181583104}]}
{"instance_id": "990abe8e473e", "generation_result": [{"code": "private void AddPendingParentEntity(Entity entity){\n\t    if (!pendingParentEntitiesByParentId.TryGetValue(entity.ParentId, out List<Entity> pendingEntities)) {\n        pendingEntities = new List<Entity>();\n        pendingParentEntitiesByParentId.Add(entity.ParentId, pendingEntities);\n    }\n    pendingEntities.Add(entity);\n}", "CodeBleu_score": 72.51236023025237}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t    if (!pendingParentEntitiesByParentId.TryGetValue(entity.ParentId, out List<Entity> pendingEntities)) {\n        pendingEntities = new List<Entity>();\n        pendingParentEntitiesByParentId.Add(entity.ParentId, pendingEntities);\n    }\n    pendingEntities.Add(entity);\n}", "CodeBleu_score": 72.51236023025237}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t    if (!pendingParentEntitiesByParentId.TryGetValue(entity.ParentId, out List<Entity> pendingEntities)) {\n        pendingEntities = new List<Entity>();\n        pendingParentEntitiesByParentId.Add(entity.ParentId, pendingEntities);\n    }\n    pendingEntities.Add(entity);\n}", "CodeBleu_score": 72.51236023025237}]}
{"instance_id": "a885fbb1f085", "generation_result": [{"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t    ExosuitArmAction action = ExosuitArmAction.NONE;\n\n        if (cooldown == clawArm.PickupCooldown) {\n            action = ExosuitArmAction.START_USE_TOOL;\n        } else if (cooldown == clawArm.PunchCooldown) {\n            action = ExosuitArmAction.ALT_HIT;\n        } else {\n            Debug.LogError($\\\"Unable to determine action from claw cooldown: {cooldown}\\\");\n            return;\n        }\n\n        BroadcastArmAction(clawArm.gameObject, action);\n    }", "CodeBleu_score": 49.62445325920465}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t    if (cooldown == clawArm.PickupCooldown) {\n        BroadcastArmAction(clawArm, ExosuitArmAction.START_USE_TOOL);\n    } else if (cooldown == clawArm.PunchCooldown) {\n        BroadcastArmAction(clawArm, ExosuitArmAction.ALT_HIT);\n    } else {\n        NitroxServiceLocator.LocateService<NitroxLogger>().LogError(\\\"ExosuitClawArm: Unknown cooldown: \\\" + cooldown);\n    }\n}", "CodeBleu_score": 32.60407536542865}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t    if (cooldown == clawArm.PickupTime) {\n        BroadcastArmAction(clawArm, ExosuitArmAction.START_USE_TOOL);\n    } else if (cooldown == clawArm.PunchTime) {\n        BroadcastArmAction(clawArm, ExosuitArmAction.ALT_HIT);\n    } else {\n        NitroxServiceLocator.LocateService<NitroxLogger>().Error(\\\"ExosuitClawArm cooldown does not match pickup or punch time.\\\");\n    }\n}", "CodeBleu_score": 33.78866189140395}]}
{"instance_id": "e390441c8dc2", "generation_result": [{"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t    if (!gameObject.TryGetIdOrWarn(out NitroxId id)) {\n        return;\n    }\n\n    if (!parent.TryGetIdOrWarn(out NitroxId parentId)) {\n        return;\n    }\n\n    EntityMetadata metadata = entityMetadataManager.GetEntityMetadata(gameObject);\n\n    InstalledBatteryEntity batteryEntity = new InstalledBatteryEntity(id, parentId, techType, metadata);\n\n    if (packetSender.Send(new EntitySpawnedByClient(batteryEntity))) {\n        Log.Debug($\"Sent: Added battery {batteryEntity.TechType} to {parent.GetFullHierarchyPath()}\");\n    }\n}", "CodeBleu_score": 67.08468318765635}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t    // Retrieve the IDs of the game object and its parent\n    NitroxId gameObjectId = gameObject.GetId();\n    NitroxId parentId = parent.GetId();\n\n    // Extract metadata for the entity\n    EntityMetadata entityMetadata = entityMetadataManager.GetMetadata(gameObject);\n\n    // Create an InstalledBatteryEntity with the collected information\n    InstalledBatteryEntity installedBatteryEntity = new InstalledBatteryEntity(gameObjectId, parentId, techType, entityMetadata);\n\n    // Send an EntitySpawnedByClient packet\n    packetSender.Send(new EntitySpawnedByClient(installedBatteryEntity));\n}", "CodeBleu_score": 40.307667379381954}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t    // Retrieve the IDs of the game object and its parent\n    if (!gameObject.TryGetIdOrWarn(out NitroxId id) || !parent.TryGetIdOrWarn(out NitroxId parentId)) {\n        return;\n    }\n\n    // Extract metadata for the entity\n    EntityMetadata entityMetadata = entityMetadataManager.Get(id);\n\n    // Create an InstalledBatteryEntity with the collected information\n    InstalledBatteryEntity installedBatteryEntity = new InstalledBatteryEntity(id, parentId, techType, entityMetadata);\n\n    // Send an EntitySpawnedByClient packet\n    packetSender.Send(new EntitySpawnedByClient(installedBatteryEntity));\n    Log.Debug($\"Sent: Added battery {techType} to {gameObject.GetFullHierarchyPath()}\");\n}", "CodeBleu_score": 64.57226673189571}]}
{"instance_id": "a87b772a8e5a", "generation_result": [{"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t    PickingUpObject = gameObject;\n    PickingUpObject.GetComponent<RemoteControl>()?.Remove();\n    if (PickingUpObject.GetComponent<NitroxId>() == null) {\n        PickingUpObject.AddComponent<NitroxId>();\n    }\n    entities.StopEntityPositionBroadcasting();\n    InventoryItem inventoryItem = PickingUpObject.ConvertToInventoryItem();\n    inventoryItem.Spawned = true;\n    Log.Info(\\\"Picked up item: \\\" + inventoryItem.TechType);\n    PickupItem pickupItem = new PickupItem(inventoryItem);\n    packetSender.Send(pickupItem);\n    PickingUpObject = null;\n}", "CodeBleu_score": 43.559850993505876}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t    PickingUpObject = gameObject;\n    if (gameObject.GetComponent<RemoteControl>() != null) {\n        gameObject.GetComponent<RemoteControl>().RemoveRemoteControl();\n    }\n    if (gameObject.GetComponent<NitroxId>() == null) {\n        gameObject.AddComponent<NitroxId>();\n    }\n    NitroxId id = gameObject.GetComponent<NitroxId>();\n    if (id == null) {\n        id = gameObject.AddComponent<NitroxId>();\n    }\n    if (!id.HasId) {\n        id.Id = Guid.NewGuid();\n    }\n    entities.StopEntityPositionBroadcasting();\n    InventoryItem inventoryItem = gameObject.GetComponent<InventoryItem>();\n    if (inventoryItem == null) {\n        inventoryItem = gameObject.AddComponent<InventoryItem>();\n    }\n    inventoryItem.Spawned = true;\n    Log.Info($\"Picked up object {gameObject.name} with tech type {techType}\");\n    PickupItem pickupItem = new PickupItem(id.Id, techType, gameObject.transform.position.ToDto(), gameObject.transform.rotation.ToDto(), entityMetadataManager.GetMetadata(gameObject));\n    packetSender.Send(pickupItem);\n    PickingUpObject = null;\n}", "CodeBleu_score": 49.55493665898732}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t    PickingUpObject = gameObject;\n    gameObject.GetComponent<RemoteControl>()?.Remove();\n    NitroxId id = gameObject.GetNitroxId();\n    if (id == null) {\n        id = NitroxId.New();\n        gameObject.SetNitroxId(id);\n    }\n    entities.StopBroadcastingEntityPosition(id);\n    gameObject.ConvertToInventoryItem();\n    gameObject.SetSpawned(true);\n    Log.Info($\"Picked up {id}\");\n    PickupItem pickupItem = new PickupItem(id, techType, gameObject.GetComponent<ItemValue>()?.GetValue() ?? 0);\n    packetSender.Send(pickupItem);\n    PickingUpObject = null;\n}", "CodeBleu_score": 46.05510475095013}]}
{"instance_id": "b6d1e68114e1", "generation_result": [{"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t    NitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\n    Optional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n    string classId = gameObject.GetComponent<PrefabIdentifier>().ClassId;\n    TechTag techTag = gameObject.GetComponent<TechTag>();\n    TechType techType = (techTag) ? techTag.type : TechType.None;\n    List<Entity> childrenEntities = GetPrefabChildren(gameObject, id, entityMetadataManager).ToList();\n    InventoryItemEntity inventoryItemEntity = new InventoryItemEntity(gameObject.transform.ToWorldDto(), 0, classId, false, id, techType.ToDto(), metadata.OrNull(), null, childrenEntities);\n    if (gameObject.TryGetComponent(out Battery battery)) {\n        inventoryItemEntity.batteryData = new BatteryData(battery.charge, battery.maxCharge);\n    }\n    return inventoryItemEntity;\n}", "CodeBleu_score": 56.12437209890855}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t  NitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\n  Optional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n  string classId = gameObject.GetComponent<PrefabIdentifier>().ClassId;\n  List<Entity> childrenEntities = GetPrefabChildren(gameObject, id, entityMetadataManager).ToList();\n  TechType techType = gameObject.GetComponent<TechType>();\n  InventoryItemEntity inventoryItemEntity = new InventoryItemEntity(gameObject.transform.ToWorldDto(), 0, classId, false, id, techType.ToDto(), metadata.OrNull(), null, childrenEntities);\n  if (gameObject.TryGetComponent(out Battery battery)) {\n    inventoryItemEntity.battery = battery.ToDto();\n  }\n\n  return inventoryItemEntity;\n}", "CodeBleu_score": 54.193086026955775}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t\tNitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\n\tOptional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n\tstring classId = gameObject.GetComponent<PrefabIdentifier>().ClassId;\n\tTechType techType = gameObject.GetComponent<TechTag>().type;\n\tList<Entity> childrenEntities = GetPrefabChildren(gameObject, id, entityMetadataManager).ToList();\n\tNitroxId playerId = Player.main.GetNitroxId();\n\tInventoryItemEntity inventoryItemEntity = new InventoryItemEntity(gameObject.transform.ToWorldDto(), 0, classId, false, id, techType.ToDto(), metadata.OrNull(), playerId, childrenEntities);\n\tif (gameObject.TryGetComponent(out Battery battery)) {\n\t\tinventoryItemEntity.SetBattery(battery.charge, battery.maxCharge);\n\t}\n\treturn inventoryItemEntity;\n}", "CodeBleu_score": 57.25387515180178}]}
{"instance_id": "e416d51a7af7", "generation_result": [{"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t    this.multiplayerSession = multiplayerSession;\n    this.packetSender = packetSender;\n    this.throttledPacketSender = throttledPacketSender;\n    body = new Lazy<GameObject>(() => Object.FindObjectOfType<Player>().gameObject);\n    playerModel = new Lazy<GameObject>(() => Object.FindObjectOfType<Player>().gameObject);\n    bodyPrototype = new Lazy<GameObject>(() => Object.FindObjectOfType<Player>().gameObject);\n    Permissions = new Perms();\n}", "CodeBleu_score": 62.47000141531333}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t    this.multiplayerSession = multiplayerSession;\n    this.packetSender = packetSender;\n    this.throttledPacketSender = throttledPacketSender;\n    body = new Lazy<GameObject>(() => multiplayerSession.PlayerSettings.PlayerModel.GetBody());\n    playerModel = new Lazy<GameObject>(() => multiplayerSession.PlayerSettings.PlayerModel.GetPlayerModel());\n    bodyPrototype = new Lazy<GameObject>(() => multiplayerSession.PlayerSettings.PlayerModel.GetBodyPrototype());\n    Permissions = new Perms(multiplayerSession.PlayerSettings.Permissions);\n}", "CodeBleu_score": 61.61554642367667}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t    this.multiplayerSession = multiplayerSession;\n    this.packetSender = packetSender;\n    this.throttledPacketSender = throttledPacketSender;\n    body = new Lazy<GameObject>(() => GameObject.FindGameObjectWithTag(\\\"Player\\\"));\n    playerModel = new Lazy<GameObject>(() => GameObject.FindGameObjectWithTag(\\\"PlayerModel\\\"));\n    bodyPrototype = new Lazy<GameObject>(() => GameObject.FindGameObjectWithTag(\\\"PlayerPrototype\\\"));\n    Permissions = new Perms();\n}", "CodeBleu_score": 66.32312265122036}]}
{"instance_id": "def56af985df", "generation_result": [{"code": "private GameObject CreateBodyPrototype{\n\t    get {\n        if (PlayerModel.GetComponent<PlayerHead>().IsVisible) {\n            GameObject bodyPrototype = Object.Instantiate(Body);\n            bodyPrototype.GetComponent<PlayerHead>().ShadowCastingMode = ShadowCastingMode.Off;\n            bodyPrototype.SetActive(false);\n            bodyPrototype.name = \"RemotePlayerPrototype\";\n            bodyPrototype.GetComponent<PlayerHead>().RemoveHeldItem();\n            return bodyPrototype;\n        }\n        return null;\n    }\n}", "CodeBleu_score": 27.45345391007276}, {"code": "private GameObject CreateBodyPrototype{\n\t    get {\n        // Ensure the player's head is visible\n        Player.main.playerModel.SetHeadVisibility(true);\n\n        // Instantiate a clone of the body prototype\n        GameObject bodyPrototype = GameObject.Instantiate(Body.GetComponent<Player>().playerModel.bodyPrototype);\n\n        // Reset the head's shadow casting mode\n        bodyPrototype.GetComponent<PlayerModel>().head.shadowCastingMode = ShadowCastingMode.Off;\n\n        // Deactivate and rename the clone\n        bodyPrototype.SetActive(false);\n        bodyPrototype.name = \"RemotePlayerPrototype\";\n\n        // Remove items held in hand from the clone\n        bodyPrototype.GetComponent<PlayerModel>().mainHand.RemoveHeldItem();\n        bodyPrototype.GetComponent<PlayerModel>().offHand.RemoveHeldItem();\n\n        return bodyPrototype;\n    }\n}", "CodeBleu_score": 31.559826108862765}, {"code": "private GameObject CreateBodyPrototype{\n\t    get {\n        Player.main.GetComponentInChildren<PlayerHead>().SetVisible(true);\n        GameObject clone = Object.Instantiate(Body);\n        clone.GetComponentInChildren<PlayerHead>().shadowCastingMode = ShadowCastingMode.Off;\n        clone.SetActive(false);\n        clone.name = \"RemotePlayerPrototype\";\n        Player.main.GetComponentInChildren<PlayerHead>().SetVisible(false);\n        Player.main.GetComponentInChildren<PlayerHead>().GetComponentInChildren<ItemDrop>().DropItem();\n        return clone;\n    }\n}", "CodeBleu_score": 32.79137355520416}]}
{"instance_id": "e9bd7f669aed", "generation_result": [{"code": "void ICacheable.Save(BinaryWriter bw){\n\t    bw.Write(TypeName);\n    bw.Write(Location);\n    bw.Write(Metadata);\n    bw.Write(Processes);\n    bw.Write(Dependencies);\n    bw.Write(Incompatibilities);\n    bw.Write(TargettedBepInExVersion);\n}", "CodeBleu_score": 16.60118163566689}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\t    bw.Write(TypeName);\n    bw.Write(Location);\n    Metadata.Save(bw);\n    Processes.Save(bw);\n    Dependencies.Save(bw);\n    Incompatibilities.Save(bw);\n    bw.Write(TargettedBepInExVersion.ToString());\n}", "CodeBleu_score": 20.040951096979903}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\t    bw.Write(TypeName);\n    bw.Write(Location);\n    Metadata.Save(bw);\n    bw.Write(Processes.Count());\n    foreach (var p in Processes) {\n        p.Save(bw);\n    }\n    bw.Write(Dependencies.Count());\n    foreach (var d in Dependencies) {\n        d.Save(bw);\n    }\n    bw.Write(Incompatibilities.Count());\n    foreach (var i in Incompatibilities) {\n        i.Save(bw);\n    }\n    bw.Write(TargettedBepInExVersion.ToString());\n}", "CodeBleu_score": 37.13058983373384}]}
{"instance_id": "a7e51620987d", "generation_result": [{"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t    var pluginType = pluginAssembly.GetTypes().FirstOrDefault(t => typeof(BasePlugin).IsAssignableFrom(t));\n    if (pluginType == null) {\n        Logger.Log(LogLevel.Error, $\"Plugin {pluginInfo.Name} has no valid plugin type\");\n        return null;\n    }\n\n    var plugin = (BasePlugin)Activator.CreateInstance(pluginType);\n    plugin.Info = pluginInfo;\n    plugin.Assembly = pluginAssembly;\n\n    PluginLoad?.Invoke(pluginInfo, pluginAssembly, plugin);\n    plugin.Load();\n\n    return plugin;\n}", "CodeBleu_score": 48.105170124179786}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t    Type pluginType = pluginAssembly.GetType(pluginInfo.TypeName);\n    if (pluginType == null) {\n        throw new InvalidOperationException($\"Plugin type {pluginInfo.TypeName} not found in assembly {pluginAssembly.GetName().Name}\");\n    }\n\n    var plugin = (BasePlugin)Activator.CreateInstance(pluginType);\n    PluginLoad?.Invoke(pluginInfo, pluginAssembly, plugin);\n    plugin.Load();\n    return plugin;\n}", "CodeBleu_score": 55.0598537954199}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t    var pluginType = pluginAssembly.GetType(pluginInfo.TypeName);\n    if (pluginType == null) {\n        Logger.Log(LogLevel.Error, $\"Plugin type {pluginInfo.TypeName} not found in assembly {pluginAssembly.FullName}\");\n        return null;\n    }\n\n    var pluginInstance = (BasePlugin) Activator.CreateInstance(pluginType);\n    pluginInstance.Initialize(pluginInfo, pluginAssembly);\n    PluginLoad?.Invoke(pluginInfo, pluginAssembly, pluginInstance);\n    pluginInstance.Load();\n    return pluginInstance;\n}", "CodeBleu_score": 74.34252697743389}]}
{"instance_id": "0925dc086c01", "generation_result": [{"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t    if (TrampolineMethod == null) {\n        Prepare();\n        TrampolineMethod = NativeDetour.CreateNativeProxy(TrampolinePtr, signature);\n    }\n\n    return TrampolineMethod;\n}", "CodeBleu_score": 92.17717213027977}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t    if (TrampolineMethod != null) return TrampolineMethod;\n\n    Prepare();\n    TrampolineMethod = IL2CPP.GenerateNativeProxy(TrampolinePtr, signature);\n    return TrampolineMethod;\n}", "CodeBleu_score": 60.09535927869734}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t    if (TrampolineMethod != null) return TrampolineMethod;\n\n    Prepare();\n\n    var trampoline = NativeDetour.GenerateTrampoline(TrampolinePtr, signature);\n    TrampolineMethod = trampoline;\n\n    return trampoline;\n}", "CodeBleu_score": 39.934026492974226}]}
{"instance_id": "cfab5c23610e", "generation_result": [{"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t    var fileName = LocalizationFilePrefix + code + \\\".json\\\";\n    var stream = typeof(LocalizationLoader).Assembly.GetManifestResourceStream(fileName);\n    if (stream == null) {\n        throw new NullReferenceException($\\\"Language file {fileName} not found\\\");\n    }\n    try {\n        return JsonSerializer.Deserialize<Dictionary<string, string>>(stream);\n    } catch (JsonException) {\n        throw;\n    }\n}", "CodeBleu_score": 48.06267995876159}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t    string languageFile = $\\\"{LocalizationFilePrefix}{code}.json\\\";\n    Stream? languageStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(languageFile);\n    if (languageStream == null) {\n        throw new NullReferenceException($\\\"Language file {languageFile} not found\\\");\n    }\n\n    try {\n        return JsonSerializer.Deserialize<Dictionary<string, string>>(languageStream) ?? new Dictionary<string, string>();\n    } catch (JsonException) {\n        throw;\n    }\n}", "CodeBleu_score": 43.765725181788476}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t    var assembly = typeof(LocalizationLoader).Assembly;\n    var resourceName = $\"{LocalizationFilePrefix}{code}.json\";\n    using var stream = assembly.GetManifestResourceStream(resourceName);\n    if (stream == null) {\n        throw new NullReferenceException($\"Language file {resourceName} not found in assembly resources.\");\n    }\n\n    try {\n        return JsonSerializer.Deserialize<Dictionary<string, string>>(stream);\n    } catch (JsonException) {\n        throw;\n    }\n}", "CodeBleu_score": 26.194016429338358}]}
{"instance_id": "9978bd31d199", "generation_result": [{"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t    int expressionCount = 0;\n    for (int i = 0; i < nodes.Count; i++) {\n        var node = nodes[i];\n        if (node is ParserRuleContext) {\n            expressionCount += Visit((ParserRuleContext)node);\n        }\n    }\n    return expressionCount;\n}", "CodeBleu_score": 42.587491835889445}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t    int expressionCount = 0;\n    foreach (var node in nodes) {\n        if (node is ParserRuleContext) {\n            expressionCount += Visit((ParserRuleContext)node);\n        }\n    }\n    return expressionCount;\n}", "CodeBleu_score": 52.88445175844139}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t    int expressionCount = 0;\n    for (int i = 0; i < nodes.Count; i++) {\n        if (nodes[i] is ParserRuleContext) {\n            expressionCount += Visit((ParserRuleContext)nodes[i]);\n        }\n    }\n    return expressionCount;\n}", "CodeBleu_score": 39.08680040729992}]}
{"instance_id": "8f9bf9ee575a", "generation_result": [{"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t    var expressionCount = GenerateCodeForExpressionsInFormattedText(context.formatted_text().GetChildren());\n    var lineId = context.line_id_tag()?.GetText();\n\n    if (lineId == null)\n    {\n        throw new InvalidOperationException(\"Line statements must have a line ID tag.\");\n    }\n\n    compiler.Emit(Opcode.RunLine, lineId, expressionCount);\n\n    return 0;\n}", "CodeBleu_score": 43.601143345851824}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t    // first, visit all of the nodes in the formatted text. if they're expressions,\n            // evaluate them, and inject a positional reference into the final string.\n            int expressionCount = GenerateCodeForExpressionsInFormattedText(context.formattedText().GetChild(0).GetChildren());\n    // then, get the line ID tag, if it exists. if it doesn't, throw an error.\n            string lineID = GetLineIDTag(context);\n    // if we're tracking, emit a RunLine opcode with the line ID and expression count.\n            if (trackingEnabled != null)\n            {\n                compiler.Emit(new RunLine(lineID, expressionCount));\n            }\n\n            return 0;\n        }", "CodeBleu_score": 20.323338556944787}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t    // First, visit all of the nodes, which are either terminal text nodes or expressions.\n    // if they're expressions, we evaluate them, and inject a positional reference into the final string.\n    var expressionCount = GenerateCodeForExpressionsInFormattedText(context.formattedText().GetChild(0).GetChildren());\n\n    // Next, we need to get the line ID tag from the line statement.\n    // If there is no line ID tag, we throw an InvalidOperationException.\n    var lineID = context.lineID();\n    if (lineID == null)\n    {\n        throw new InvalidOperationException(\"Line statements must have a line ID tag.\");\n    }\n\n    // We emit a RunLine opcode with the line ID and expression count.\n    compiler.Emit(RunLine(lineID.GetText(), expressionCount));\n\n    return 0;\n}", "CodeBleu_score": 30.91078018622262}]}
{"instance_id": "b70d033fed9c", "generation_result": [{"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t    var results = Enumerable.Empty<Diagnostic>();\n\n    foreach (var command in yarnFile.Commands) {\n        var commandName = command.Name;\n        var commandDefinition = yarnFile.Project.Commands.FirstOrDefault(c => c.Name == commandName);\n        if (commandDefinition == null) {\n            var message = $\"Unknown command: {commandName}\";\n            var severity = DiagnosticSeverity.Warning;\n            var code = \"Yarn001\";\n            var data = new Dictionary<string, object> {\n                { \"commandName\", commandName },\n            };\n            var range = new Range(command.Range.Start, command.Range.End);\n            var diagnostic = new Diagnostic {\n                Message = message,\n                Severity = severity,\n                Code = code,\n                Data = data,\n                Range = range,\n            };\n            results = results.Append(diagnostic);\n        }\n    }\n\n    return results;\n}", "CodeBleu_score": 29.4383326685313}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t    var diagnostics = new List<Diagnostic>();\n\n    foreach (var command in yarnFile.Commands) {\n        var commandDefinition = yarnFile.Project.Commands.FirstOrDefault(c => c.Name == command.Name);\n\n        if (commandDefinition == null) {\n            diagnostics.Add(new Diagnostic {\n                Message = $\"Unknown command '{command.Name}'\",\n                Severity = DiagnosticSeverity.Warning,\n                Code = \"unknown-command\",\n                Range = new Range {\n                    Start = command.Range.Start,\n                    End = command.Range.End\n                },\n                Data = new Dictionary<string, object> {\n                    { \"commandName\", command.Name }\n                }\n            });\n        }\n    }\n\n    return diagnostics;\n}", "CodeBleu_score": 40.59105778264791}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t    // Get a list of all command names in the YarnFileData object\n    var commandNames = yarnFile.Commands.Select(c => c.Name);\n\n    // Get a list of all command references in the YarnFileData object\n    var commandReferences = yarnFile.Commands.SelectMany(c => c.References);\n\n    // Filter out command references that have a corresponding definition in the project's known commands\n    var unknownCommands = commandReferences.Where(r => !commandNames.Contains(r.Name));\n\n    // Generate a diagnostic for each unknown command\n    return unknownCommands.Select(r => new Diagnostic()\n    {\n        Message = $\"Unknown command '{r.Name}'\",\n        Severity = DiagnosticSeverity.Warning,\n        Code = \"Yarn.UnknownCommand\",\n        Range = new Range(r.Position, r.Position + r.Name.Length),\n        Data = new object[] { r.Name }\n    });\n}", "CodeBleu_score": 32.95986671820657}]}
{"instance_id": "9a072876f358", "generation_result": [{"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t", "CodeBleu_score": 6.910749887959125}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t    return new CodeActionRegistrationOptions {\n                DocumentSelector = new DocumentSelector(new DocumentSelectorItem {\n                    Language = \"yarn\"\n                }),\n                ResolveProvider = false,\n                CodeActionKinds = new Container<CodeActionKind>(new[] {\n                    CodeActionKind.QuickFix\n                })\n            };\n}", "CodeBleu_score": 58.097069358549255}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t    var registrationOptions = new CodeActionRegistrationOptions {\n\\t\\t\\t\\t\\t\\t\\t\\tDocumentSelector = new DocumentSelector(new DocumentFilter[] {\n\\t\\t\\t\\t\\t\\t\\t\\t\\tnew DocumentFilter() {\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tLanguage = \\\"yarn\\\",\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t},\n\\t\\t\\t\\t\\t\\t\\t\\t}),\n\\t\\t\\t\\t\\t\\t\\t\\tResolveProvider = false,\n\\t\\t\\t\\t\\t\\t\\t\\tCodeActionKinds = new Container<CodeActionKind>(new CodeActionKind[] {\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tCodeActionKind.QuickFix,\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}),\n\\t\\t\\t\\t\\t\\t\\t};\n    return registrationOptions;\n}", "CodeBleu_score": 27.15489890778396}]}
{"instance_id": "7b61df32aee3", "generation_result": [{"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t    if (variables.TryGetValue(variableName, out var value)) {\n        if (value is T t) {\n            result = t;\n            return true;\n        }\n        throw new ArgumentException($\"Variable {variableName} is of type {value.GetType()}, expected {typeof(T)}\");\n    }\n    result = default;\n    return false;\n}", "CodeBleu_score": 58.259732451868}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t    if (variables.TryGetValue(variableName, out object value)) {\n        if (value is T) {\n            result = (T)value;\n            return true;\n        } else {\n            throw new ArgumentException($\"Variable {variableName} is not of type {typeof(T).Name}\");\n        }\n    } else {\n        result = default(T);\n        return false;\n    }\n}", "CodeBleu_score": 57.54149262458378}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t    object value;\n    if (variables.TryGetValue(variableName, out value)) {\n        if (value is T) {\n            result = (T)value;\n            return true;\n        }\n        else {\n            result = default(T);\n            throw new ArgumentException($\"Variable '{variableName}' is of type '{value.GetType().Name}', not '{typeof(T).Name}'\");\n        }\n    }\n    else {\n        result = default(T);\n        return false;\n    }\n}", "CodeBleu_score": 56.32445990382537}]}
{"instance_id": "7201488347ef", "generation_result": [{"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t", "CodeBleu_score": 2.543243612731241}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t", "CodeBleu_score": 2.543243612731241}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t    this.VariableStorage = variableStorage;\n    this.Library = new Yarn.Library();\n    this.vm = new Yarn.VirtualMachine(this.Library, this.VariableStorage);\n    this.Library.Import(new StandardLibrary());\n    this.vm.RegisterNodeVisitHandler(this.OnNodeVisit);\n    this.vm.RegisterNodeCompleteHandler(this.OnNodeComplete);\n    this.vm.RegisterDialogueCompleteHandler(this.OnDialogueComplete);\n    this.vm.RegisterPrepareForLinesHandler(this.OnPrepareForLines);\n    this.LineParser = new Yarn.LineParser();\n    this.LineParser.RegisterMarkerProcessor(new SelectMarkerProcessor());\n    this.LineParser.RegisterMarkerProcessor(new PluralMarkerProcessor());\n    this.LineParser.RegisterMarkerProcessor(new OrdinalMarkerProcessor());\n}", "CodeBleu_score": 29.218016934870434}]}
{"instance_id": "59b7b5a9c34a", "generation_result": [{"code": "public int FindUniqueID(string UniqueID){\n\t    if (string.IsNullOrEmpty(UniqueID)) {\n        return -1;\n    }\n\n    for (int i = 0; i < m_LoopListBankDataList.Count; i++) {\n        if (m_LoopListBankDataList[i].UniqueID == UniqueID) {\n            return i;\n        }\n    }\n\n    return -1;\n}", "CodeBleu_score": 81.19939038228001}, {"code": "public int FindUniqueID(string UniqueID){\n\t    if (UniqueID == null || UniqueID.Length == 0) {\n        return -1;\n    }\n\n    for (int i = 0; i < m_LoopListBankDataList.Count; ++i) {\n        if (m_LoopListBankDataList[i].UniqueID == UniqueID) {\n            return i;\n        }\n    }\n\n    return -1;\n}", "CodeBleu_score": 84.62393783897357}, {"code": "public int FindUniqueID(string UniqueID){\n\t    for (int i = 0; i < m_LoopListBankDataList.Count; ++i) {\n        if (m_LoopListBankDataList[i].UniqueID == UniqueID) {\n            return i;\n        }\n    }\n    return -1;\n}", "CodeBleu_score": 73.62322442810355}]}
{"instance_id": "2b85606238aa", "generation_result": [{"code": "public void AddContent(object newContent){\n\t    LoopListBankData TempCustomData = new LoopListBankData();\n    TempCustomData.Content = newContent;\n    TempCustomData.UniqueID = System.Guid.NewGuid().ToString();\n    m_LoopListBankDataList.Add(TempCustomData);\n}", "CodeBleu_score": 89.02643750208648}, {"code": "public void AddContent(object newContent){\n\t    LoopListBankData TempCustomData = new LoopListBankData();\n    TempCustomData.Content = newContent;\n    TempCustomData.UniqueID = System.Guid.NewGuid().ToString();\n    m_LoopListBankDataList.Add(TempCustomData);\n}", "CodeBleu_score": 89.02643750208648}, {"code": "public void AddContent(object newContent){\n\t    LoopListBankData TempCustomData = new LoopListBankData();\n    TempCustomData.Content = newContent;\n    TempCustomData.UniqueID = System.Guid.NewGuid().ToString();\n    m_LoopListBankDataList.Add(TempCustomData);\n}", "CodeBleu_score": 89.02643750208648}]}
{"instance_id": "34e593106991", "generation_result": [{"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t    m_IndexID = idx;\n    m_Content = content;\n    m_UniqueID = ClickUniqueID;\n    if (m_IsUpdateGameObjectName) {\n        gameObject.name = m_PrefabName + \"_\" + m_IndexID;\n    }\n}", "CodeBleu_score": 57.60364950259341}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t    m_IndexID = idx;\n    m_Content = content;\n    if (m_IsUpdateGameObjectName) {\n        gameObject.name = m_PrefabName + m_IndexID;\n    }\n}", "CodeBleu_score": 55.38157887634281}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t    m_IndexID = idx;\n    m_Content = content;\n    m_UniqueID = ClickUniqueID;\n    if (m_IsUpdateGameObjectName)\n    {\n        gameObject.name = m_PrefabName + m_IndexID.ToString();\n    }\n}", "CodeBleu_score": 62.10144477889874}]}
{"instance_id": "6b6a6cc329cc", "generation_result": [{"code": "private void OnButtonAddDataClickk(){\n\t    int addCount = 1;\n    if (!int.TryParse(m_InputFieldSrollToCell_AddCount.text, out addCount)) {\n        addCount = 1;\n    }\n    if (addCount < 1) {\n        addCount = 1;\n    }\n\n    for (int i = 0; i < addCount; i++) {\n        m_ListBank.m_Data.Add(Random.Range(0, 10));\n    }\n\n    m_ListBank.m_TotalCount = m_ListBank.m_Data.Count;\n    m_ListBank.RefreshCells();\n}", "CodeBleu_score": 42.43357546171863}, {"code": "private void OnButtonAddDataClickk(){\n\t    int addCount = 1;\n    int.TryParse(m_InputFieldSrollToCell_AddCount.text, out addCount);\n    if (addCount < 1) {\n        addCount = 1;\n    }\n\n    for (int i = 0; i < addCount; i++) {\n        m_ListBank.AddItem(Random.Range(0, 10));\n    }\n\n    m_ListBank.UpdateTotalCount();\n    m_ListBank.RefreshDisplayCells();\n}", "CodeBleu_score": 37.868796368747475}, {"code": "private void OnButtonAddDataClickk(){\n\t    int addCount = int.Parse(m_InputFieldSrollToCell_AddCount.text);\n    if (addCount < 1) {\n        addCount = 1;\n    }\n\n    for (int i = 0; i < addCount; i++) {\n        m_ListBank.AddData(Random.Range(0, 10));\n    }\n\n    m_ListBank.TotalCount = m_ListBank.Count;\n    m_ListBank.RefreshCells();\n}", "CodeBleu_score": 35.90160033697438}]}
{"instance_id": "209961c9eb8e", "generation_result": [{"code": "protected override void ClearTempPool(){\n\t  if (deletedItemTypeStart > 0) {\n    for (int i = 0; i < deletedItemTypeStart; i++) {\n      RectTransform item = m_Content.GetChild(i) as RectTransform;\n      item.SetParent(prefabSource.transform, false);\n      item.gameObject.SetActive(false);\n    }\n    deletedItemTypeStart = 0;\n  }\n  if (deletedItemTypeEnd > 0) {\n    for (int i = m_Content.childCount - 1; i >= m_Content.childCount - deletedItemTypeEnd; i--) {\n      RectTransform item = m_Content.GetChild(i) as RectTransform;\n      item.SetParent(prefabSource.transform, false);\n      item.gameObject.SetActive(false);\n    }\n    deletedItemTypeEnd = 0;\n  }\n}", "CodeBleu_score": 61.32584044195135}, {"code": "protected override void ClearTempPool(){\n\t    if (m_Content.childCount != itemTypeStart + deletedItemTypeStart + deletedItemTypeEnd)\n        throw new UnityException(\"Unexpected number of items in content\");\n    if (deletedItemTypeStart > 0)\n    {\n        for (int i = 0; i < deletedItemTypeStart; i++)\n        {\n            RectTransform item = m_Content.GetChild(i) as RectTransform;\n            prefabSource.ReturnObject(item.gameObject);\n        }\n        deletedItemTypeStart = 0;\n        itemTypeStart += deletedItemTypeStart;\n    }\n    if (deletedItemTypeEnd > 0)\n    {\n        for (int i = m_Content.childCount - 1; i >= m_Content.childCount - deletedItemTypeEnd; i--)\n        {\n            RectTransform item = m_Content.GetChild(i) as RectTransform;\n            prefabSource.ReturnObject(item.gameObject);\n        }\n        deletedItemTypeEnd = 0;\n    }\n}", "CodeBleu_score": 53.42103487522343}, {"code": "protected override void ClearTempPool(){\n\t\t\tif (m_Content.childCount != itemTypeStart + deletedItemTypeStart + deletedItemTypeEnd) {\n\t\t\tthrow new System.Exception(\"The content has an unexpected number of child elements.\");\n\t\t}\n\t\tif (deletedItemTypeStart > 0) {\n\t\t\tfor (int i = 0; i < deletedItemTypeStart; i++) {\n\t\t\t\tRectTransform item = m_Content.GetChild(i) as RectTransform;\n\t\t\t\titem.gameObject.SetActive(false);\n\t\t\t\tprefabSource.ReturnObject(item.gameObject);\n\t\t\t}\n\t\t\tdeletedItemTypeStart = 0;\n\t\t}\n\t\tif (deletedItemTypeEnd > 0) {\n\t\t\tfor (int i = m_Content.childCount - deletedItemTypeEnd; i < m_Content.childCount; i++) {\n\t\t\t\tRectTransform item = m_Content.GetChild(i) as RectTransform;\n\t\t\t\titem.gameObject.SetActive(false);\n\t\t\t\tprefabSource.ReturnObject(item.gameObject);\n\t\t\t}\n\t\t\tdeletedItemTypeEnd = 0;\n\t\t}\n\t}", "CodeBleu_score": 52.49207384267457}]}
{"instance_id": "c6bb290de2b3", "generation_result": [{"code": "public void AnticipateScale(Vector3 newScale){\n\t    if (NetworkManager.ShutdownInProgress || !NetworkManager.IsListening) {\n        return;\n    }\n    transform.localScale = newScale;\n    m_AnticipatedTransform.Scale = newScale;\n    if (CanCommitToTransform) {\n        m_AuthoritativeTransform.Scale = newScale;\n    }\n\n    m_PreviousAnticipatedTransform = m_AnticipatedTransform;\n\n    m_LastAnticipaionCounter = NetworkManager.AnticipationSystem.AnticipationCounter;\n    m_LastAnticipationTime = NetworkManager.LocalTime.Time;\n\n    m_SmoothDuration = 0;\n    m_CurrentSmoothTime = 0;\n}", "CodeBleu_score": 80.63588690868546}, {"code": "public void AnticipateScale(Vector3 newScale){\n\t    if (NetworkManager.ShutdownInProgress || !NetworkManager.IsListening) {\n        return;\n    }\n    transform.localScale = newScale;\n    m_AnticipatedTransform.Scale = newScale;\n    if (CanCommitToTransform) {\n        m_AuthoritativeTransform.Scale = newScale;\n    }\n\n    m_PreviousAnticipatedTransform = m_AnticipatedTransform;\n\n    m_LastAnticipaionCounter = NetworkManager.AnticipationSystem.AnticipationCounter;\n    m_LastAnticipationTime = NetworkManager.LocalTime.Time;\n\n    m_SmoothDuration = 0;\n    m_CurrentSmoothTime = 0;\n}", "CodeBleu_score": 80.63588690868546}, {"code": "public void AnticipateScale(Vector3 newScale){\n\t    if (NetworkManager.ShutdownInProgress || !NetworkManager.IsListening) {\n        return;\n    }\n    transform.localScale = newScale;\n    m_AnticipatedTransform.Scale = newScale;\n    if (CanCommitToTransform) {\n        m_AuthoritativeTransform.Scale = newScale;\n    }\n\n    m_PreviousAnticipatedTransform = m_AnticipatedTransform;\n\n    m_LastAnticipaionCounter = NetworkManager.AnticipationSystem.AnticipationCounter;\n    m_LastAnticipationTime = NetworkManager.LocalTime.Time;\n\n    m_SmoothDuration = 0;\n    m_CurrentSmoothTime = 0;\n}", "CodeBleu_score": 80.63588690868546}]}
{"instance_id": "d67d3c80dd00", "generation_result": [{"code": "private void FlushMessages(){\n\t    if (m_NetworkAnimator == null) {\n        return;\n    }\n\n    if (m_IsServer) {\n        if (m_AnimationStateChangeList.Count > 0) {\n            m_NetworkAnimator.ServerSetAnimationState(m_AnimationStateChangeList);\n            m_AnimationStateChangeList.Clear();\n        }\n\n        if (m_ParameterChangeList.Count > 0) {\n            m_NetworkAnimator.ServerSetAnimatorParameters(m_ParameterChangeList);\n            m_ParameterChangeList.Clear();\n        }\n\n        if (m_TriggerChangeList.Count > 0) {\n            m_NetworkAnimator.ServerSetTrigger(m_TriggerChangeList);\n            m_TriggerChangeList.Clear();\n        }\n    } else {\n        if (m_AnimationStateChangeList.Count > 0) {\n            m_NetworkAnimator.ClientSetAnimationState(m_AnimationStateChangeList);\n            m_AnimationStateChangeList.Clear();\n        }\n\n        if (m_ParameterChangeList.Count > 0) {\n            m_NetworkAnimator.ClientSetAnimatorParameters(m_ParameterChangeList);\n            m_ParameterChangeList.Clear();\n        }\n\n        if (m_TriggerChangeList.Count > 0) {\n            m_NetworkAnimator.ClientSetTrigger(m_TriggerChangeList);\n            m_TriggerChangeList.Clear();\n        }\n    }\n}", "CodeBleu_score": 31.901861159106222}, {"code": "private void FlushMessages(){\n\t", "CodeBleu_score": 0.843141799522195}, {"code": "private void FlushMessages(){\n\t    if (m_NetworkAnimator == null) {\n        return;\n    }\n\n    if (m_IsServer) {\n        // Send animation updates to all clients\n        foreach (var update in m_AnimationUpdates) {\n            m_NetworkAnimator.SendAnimatorUpdate(update.Key, update.Value);\n        }\n        m_AnimationUpdates.Clear();\n\n        // Send parameter updates to all clients\n        foreach (var update in m_ParameterUpdates) {\n            m_NetworkAnimator.SendParameterUpdate(update.Key, update.Value);\n        }\n        m_ParameterUpdates.Clear();\n\n        // Send trigger updates to all clients\n        foreach (var update in m_TriggerUpdates) {\n            m_NetworkAnimator.SendTriggerUpdate(update);\n        }\n        m_TriggerUpdates.Clear();\n    } else {\n        // Send animation updates to the server\n        foreach (var update in m_AnimationUpdates) {\n            m_NetworkAnimator.SendAnimatorUpdateToServer(update.Key, update.Value);\n        }\n        m_AnimationUpdates.Clear();\n\n        // Send parameter updates to the server\n        foreach (var update in m_ParameterUpdates) {\n            m_NetworkAnimator.SendParameterUpdateToServer(update.Key, update.Value);\n        }\n        m_ParameterUpdates.Clear();\n\n        // Send trigger updates to the server\n        foreach (var update in m_TriggerUpdates) {\n            m_NetworkAnimator.SendTriggerUpdateToServer(update);\n        }\n        m_TriggerUpdates.Clear();\n    }\n}", "CodeBleu_score": 58.944462916195526}]}
{"instance_id": "0632b2f27d22", "generation_result": [{"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t    if (updateStage == NetworkUpdateStage.PreUpdate) {\n        if (m_IsServer || m_NetworkAnimator.IsOwner) {\n            FlushMessages();\n        }\n    } else if (updateStage == NetworkUpdateStage.PostUpdate) {\n        if (m_IsServer || m_NetworkAnimator.IsOwner) {\n            if (m_NetworkAnimator.Animator != null) {\n                // Process parameter updates\n                for (int i = 0; i < m_SendParameterUpdates.Count; i++) {\n                    var sendEntry = m_SendParameterUpdates[i];\n                    m_NetworkAnimator.Animator.SetFloat(sendEntry.ParameterHash, sendEntry.ParameterValue);\n                }\n\n                // Check for animator changes\n                if (m_NetworkAnimator.Animator != m_PreviousAnimator) {\n                    m_PreviousAnimator = m_NetworkAnimator.Animator;\n                    m_NetworkAnimator.OnAnimatorChanged?.Invoke(m_NetworkAnimator.Animator);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 57.39972528504873}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t    if (updateStage == NetworkUpdateStage.PreUpdate) {\n        if (m_IsServer || m_NetworkAnimator.IsOwner) {\n            FlushMessages();\n        }\n\n        if (m_NetworkAnimator.IsServerAuthority) {\n            ProcessParameterUpdates();\n            CheckForAnimatorChange();\n        }\n    }\n}", "CodeBleu_score": 12.265185256340882}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t    if (updateStage == NetworkUpdateStage.PreUpdate) {\n        if (m_IsServer || m_NetworkAnimator.IsOwner) {\n            FlushMessages();\n        }\n\n        // Process parameter updates\n        for (int i = 0; i < m_SendParameterUpdates.Count; i++) {\n            var sendEntry = m_SendParameterUpdates[i];\n            if (sendEntry.ParametersUpdateMessage.Parameters.Length == 0) {\n                continue;\n            }\n\n            var parameters = sendEntry.ParametersUpdateMessage.Parameters;\n            for (int j = 0; j < parameters.Length; j++) {\n                var parameter = parameters[j];\n                m_NetworkAnimator.SetParameter(parameter.NameHash, parameter.Value, parameter.ApplyBehaviour);\n            }\n        }\n\n        // Check for animator changes\n        if (m_NetworkAnimator.IsOwner && m_NetworkAnimator.Animator != m_NetworkAnimator.Animator) {\n            m_NetworkAnimator.SendAnimatorChangeServerRpc(m_NetworkAnimator.Animator);\n        }\n    }\n}", "CodeBleu_score": 44.75368803885165}]}
{"instance_id": "d78874b65b32", "generation_result": [{"code": "private void UpdateOwnershipAuthority(){\n\t    m_IsAuthority = m_NetworkTransform.IsAuthority;\n    m_Rigidbody.isKinematic = m_IsAuthority && m_IsServerAuthoritative;\n            m_Rigidbody.interpolation = m_IsAuthority && m_IsServerAuthoritative ? m_OriginalInterpolation : RigidbodyInterpolation.None;\n        }", "CodeBleu_score": 45.17877144180261}, {"code": "private void UpdateOwnershipAuthority(){\n\t    if (m_IsServerAuthoritative) {\n        // Server authoritative, so we are always authority\n        m_IsAuthority = true;\n        m_Rigidbody.isKinematic = false;\n        m_Rigidbody.interpolation = m_OriginalInterpolation;\n    } else {\n        // Owner authoritative, so we are authority if we have ownership\n        m_IsAuthority = m_NetworkTransform.HasAuthority;\n        m_Rigidbody.isKinematic = !m_IsAuthority;\n        m_Rigidbody.interpolation = m_IsAuthority ? m_OriginalInterpolation : RigidbodyInterpolation.None;\n    }\n}", "CodeBleu_score": 57.81827921596195}, {"code": "private void UpdateOwnershipAuthority(){\n\t  if (m_IsServerAuthoritative) {\n    // If server authoritative, set authority state to match server\n            // authority state\n            m_IsAuthority = m_NetworkTransform.IsServerAuthoritative();\n    m_IsAuthority = m_NetworkTransform.IsServerAuthoritative();\n  } else {\n    // If owner authoritative, set authority state to match ownership state\n            m_IsAuthority = m_NetworkTransform.IsMine;\n        }\n\n        /// <summary>\n        /// If the object has authority, then the RigidBody is kinematic\n        /// and interpolation is set to match the NetworkTransform's interpolation\n        /// </summary>\n        private void Update()\n        {\n            if (m_IsAuthority)\n            {\n                m_Rigidbody.isKinematic = true;\n                m_Rigidbody.interpolation = m_NetworkTransform.Interpolate ? m_OriginalInterpolation : RigidbodyInterpolation.None;\n            }\n        }\n    }", "CodeBleu_score": 44.443364758100024}]}
{"instance_id": "304fe1278db9", "generation_result": [{"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t", "CodeBleu_score": 2.8253030377269566}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t", "CodeBleu_score": 2.8253030377269566}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t", "CodeBleu_score": 2.8253030377269566}]}
{"instance_id": "452b860a7dde", "generation_result": [{"code": "static void GenerateCLRBindingByAnalysis(){\n\t    // Get the selected file path\n    string filePath = EditorUtility.OpenFilePanel(\"Select the assembly file to be analyzed\", \"\", \"dll\");\n    if (string.IsNullOrEmpty(filePath)) {\n        return;\n    }\n\n    // Create a new AppDomain\n    AppDomain appDomain = AppDomain.CreateDomain(\"ILRuntimeCLRBindingDomain\");\n\n    // Load the assembly into the AppDomain\n    Assembly assembly = appDomain.Load(File.ReadAllBytes(filePath));\n\n    // Initialize ILRuntime with the AppDomain\n    ILRuntime.Runtime.Enviorment.AppDomain appDomainIL = new ILRuntime.Runtime.Enviorment.AppDomain();\n    appDomainIL.Setup();\n    appDomainIL.Load(assembly);\n\n    // Generate binding code\n    CLRBinding.Generate(appDomainIL.GetAssemblyByName(assembly.GetName().Name), \"CLRBinding.cs\");\n\n    // Refresh the AssetDatabase\n    AssetDatabase.Refresh();\n\n    // Unload the AppDomain\n    AppDomain.Unload(appDomain);\n}", "CodeBleu_score": 21.515639802958233}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t    var assemblyPath = EditorUtility.OpenFilePanel(\"Select assembly to analysis\", Application.dataPath, \"dll\");\n    if (string.IsNullOrEmpty(assemblyPath)) {\n        return;\n    }\n\n    var assembly = Assembly.LoadFile(assemblyPath);\n    if (assembly == null) {\n        return;\n    }\n\n    var domain = new AppDomain();\n    var appDomain = (AppDomain)domain.GetType().GetMethod(\"GetDomain\").Invoke(domain, null);\n    var ilRuntime = (ILRuntime)appDomain.GetType().GetProperty(\"ILRuntime\").GetValue(appDomain, null);\n    ilRuntime.GetType().GetMethod(\"Initialize\").Invoke(ilRuntime, new object[] { appDomain });\n\n    var clrBinding = (CLRBinding)ilRuntime.GetType().GetProperty(\"CLRBinding\").GetValue(ilRuntime, null);\n    clrBinding.GetType().GetMethod(\"GenerateBindingCode\").Invoke(clrBinding, new object[] { assembly });\n\n    EditorUtility.DisplayProgressBar(\"JEngine\", \"Refresh AssetDatabase\", 0.5f);\n    AssetDatabase.Refresh();\n    EditorUtility.ClearProgressBar();\n}", "CodeBleu_score": 23.615660610621283}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t    var assemblyPath = EditorUtility.OpenFilePanel(\"Select assembly\", \"\", \"dll\");\n    if (string.IsNullOrEmpty(assemblyPath))\n        return;\n    var assembly = Assembly.LoadFile(assemblyPath);\n    var domain = AppDomain.CreateDomain(\"ILRuntimeCLRBinding\");\n    var appDomain = domain.GetData(\"AppDomain\") as AppDomain;\n    var env = appDomain.GetILRuntimeService().CreateILRuntimeEnviorment();\n    env.Init();\n    env.LoadAssembly(assembly);\n    var clrBinding = new CLRBinding(env);\n    clrBinding.GenerateCLRBindingCode();\n    clrBinding.RefreshAssetDatabase();\n    AppDomain.Unload(domain);\n}", "CodeBleu_score": 22.15285218943063}]}
{"instance_id": "b8990031b636", "generation_result": [{"code": "public override void OnInspectorGUI(){\n\t    base.OnInspectorGUI();\n\n    serializedObject.Update();\n\n    EditorGUILayout.PropertyField(m_EnableLoadConfigUpdateEvent);\n    EditorGUILayout.PropertyField(m_EnableLoadConfigDependencyAssetEvent);\n\n    if (Application.isPlaying && targetMode == TargetMode.PrefabInstance) {\n        EditorGUILayout.PropertyField(m_CachedBytesSize);\n    }\n\n    serializedObject.ApplyModifiedProperties();\n}", "CodeBleu_score": 31.53539191906582}, {"code": "public override void OnInspectorGUI(){\n\t    serializedObject.Update();\n    EditorGUILayout.PropertyField(m_EnableLoadConfigUpdateEvent);\n    EditorGUILayout.PropertyField(m_EnableLoadConfigDependencyAssetEvent);\n    EditorGUILayout.PropertyField(m_CachedBytesSize);\n    if (Application.isPlaying && target.GetInstanceID() == m_ConfigHelperInfo.TargetInstanceID) {\n        EditorGUILayout.LabelField(\\\"Config Count\\\", m_ConfigHelperInfo.Target.ConfigCount.ToString());\n        EditorGUILayout.LabelField(\\\"Cached Bytes Size\\\", Utility.FormatBytes(m_ConfigHelperInfo.Target.CachedBytesSize));\n    }\n    serializedObject.ApplyModifiedProperties();\n    Repaint();\n}", "CodeBleu_score": 48.5236808049016}, {"code": "public override void OnInspectorGUI(){\n\t    base.OnInspectorGUI();\n    if (Application.isPlaying) {\n        if (m_Target.gameObject.scene.rootCount == 0) {\n            EditorGUILayout.HelpBox(\\\"Prefab should be in the scene.\\\", MessageType.Warning);\n            return;\n        }\n        EditorGUILayout.Space();\n        EditorGUILayout.LabelField(\\\"Config Count\\\", m_ConfigHelperInfo.Helper.Count.ToString());\n        EditorGUILayout.LabelField(\\\"Cached Bytes Size\\\", Utility.FormatBytes(m_CachedBytesSize.longValue));\n    }\n    serializedObject.ApplyModifiedProperties();\n    Repaint();\n}", "CodeBleu_score": 33.75006754962676}]}
{"instance_id": "6453adc2daa8", "generation_result": [{"code": "public static void DefaultScenes(){\n\t    HashSet<string> defaultSceneNames = new HashSet<string>(s_DefaultSceneNames);\n    List<EditorBuildSettingsScene> buildSettingsScenes = new List<EditorBuildSettingsScene>();\n    foreach (EditorBuildSettingsScene buildSettingsScene in EditorBuildSettings.scenes) {\n        if (defaultSceneNames.Contains(buildSettingsScene.path)) {\n            buildSettingsScenes.Add(buildSettingsScene);\n        }\n    }\n    EditorBuildSettings.scenes = buildSettingsScenes.ToArray();\n    Debug.Log(\\\"Build Settings Scenes Set to Default.\\\");\n}", "CodeBleu_score": 43.1440951233559}, {"code": "public static void DefaultScenes(){\n\t    HashSet<string> defaultSceneNames = new HashSet<string>();\n    foreach (string defaultSceneName in s_DefaultSceneNames) {\n        defaultSceneNames.Add(defaultSceneName);\n    }\n\n    List<EditorBuildSettingsScene> editorBuildSettingsScenes = new List<EditorBuildSettingsScene>();\n    foreach (EditorBuildSettingsScene editorBuildSettingsScene in EditorBuildSettings.scenes) {\n        if (defaultSceneNames.Contains(editorBuildSettingsScene.path)) {\n            editorBuildSettingsScenes.Add(editorBuildSettingsScene);\n        }\n    }\n\n    EditorBuildSettings.scenes = editorBuildSettingsScenes.ToArray();\n    Log.Info(\\\"Set scenes to default.\\\");\n}", "CodeBleu_score": 52.77497162330648}, {"code": "public static void DefaultScenes(){\n\t    HashSet<string> defaultSceneNames = new HashSet<string>(s_DefaultSceneNames);\n    List<EditorBuildSettingsScene> editorBuildSettingsScenes = new List<EditorBuildSettingsScene>();\n    foreach (EditorBuildSettingsScene editorBuildSettingsScene in EditorBuildSettings.scenes) {\n        if (defaultSceneNames.Contains(editorBuildSettingsScene.path)) {\n            editorBuildSettingsScenes.Add(editorBuildSettingsScene);\n            defaultSceneNames.Remove(editorBuildSettingsScene.path);\n        }\n    }\n    if (defaultSceneNames.Count > 0) {\n        foreach (string defaultSceneName in defaultSceneNames) {\n            string scenePath = GetScenePath(defaultSceneName);\n            if (string.IsNullOrEmpty(scenePath)) {\n                continue;\n            }\n            EditorBuildSettingsScene editorBuildSettingsScene = new EditorBuildSettingsScene(scenePath, true);\n            editorBuildSettingsScenes.Add(editorBuildSettingsScene);\n        }\n    }\n    EditorBuildSettings.scenes = editorBuildSettingsScenes.ToArray();\n    Debug.Log(\\\"Build settings scenes have been set to the default.\\\");\n}", "CodeBleu_score": 49.40138161027065}]}
{"instance_id": "e199f1a42526", "generation_result": [{"code": "public void Draw(){\n\t    if (m_HelperTypeName == null || m_CustomHelper == null) {\n        return;\n    }\n\n    if (m_HelperTypeNames == null) {\n        m_HelperTypeNames = Utility.Reflection.GetTypeNames<T>();\n    }\n\n    m_HelperTypeNameIndex = m_HelperTypeNames.Length == 0 ? 0 : m_HelperTypeName.stringValue.Equals(CustomOptionName) ? m_HelperTypeNames.Length : System.Array.IndexOf(m_HelperTypeNames, m_HelperTypeName.stringValue);\n\n    m_HelperTypeNameIndex = EditorGUILayout.Popup(m_HelperTypeNameIndex, m_HelperTypeNames);\n    if (m_HelperTypeNameIndex < 0) {\n        m_HelperTypeNameIndex = 0;\n    }\n\n    if (m_HelperTypeNameIndex == m_HelperTypeNames.Length) {\n        EditorGUILayout.PropertyField(m_CustomHelper, true);\n\n        if (m_CustomHelper.objectReferenceValue == null) {\n            EditorGUILayout.HelpBox(\\\"Custom helper is not set.\\\", MessageType.Error);\n        }\n    } else {\n        m_HelperTypeName.stringValue = m_HelperTypeNameIndex == 0 ? CustomOptionName : m_HelperTypeNames[m_HelperTypeNameIndex - 1];\n    }\n}", "CodeBleu_score": 39.47447839456522}, {"code": "public void Draw(){\n\t    if (m_HelperTypeName == null || m_CustomHelper == null) {\n        return;\n    }\n\n    if (m_HelperTypeNames == null) {\n        m_HelperTypeNames = Utility.Helper.GetHelperTypeNames(typeof(T));\n    }\n\n    m_HelperTypeNameIndex = EditorGUILayout.Popup(m_HelperTypeName.stringValue, m_HelperTypeNames);\n    if (m_HelperTypeNameIndex == 0) {\n        m_HelperTypeName.stringValue = CustomOptionName;\n        EditorGUILayout.PropertyField(m_CustomHelper);\n        if (m_CustomHelper.objectReferenceValue == null) {\n            EditorGUILayout.HelpBox(\\\"No helper is set.\\\", MessageType.Error);\n        }\n    } else {\n        m_HelperTypeName.stringValue = m_HelperTypeNames[m_HelperTypeNameIndex - 1];\n    }\n}", "CodeBleu_score": 46.28619269063328}, {"code": "public void Draw(){\n\t    if (m_HelperTypeName == null)\n        return;\n\n    if (m_HelperTypeNames == null)\n        m_HelperTypeNames = GetHelperTypeNames();\n\n    EditorGUILayout.PropertyField(m_HelperTypeName);\n    if (m_HelperTypeName.stringValue == CustomOptionName)\n    {\n        EditorGUI.indentLevel++;\n        EditorGUILayout.PropertyField(m_CustomHelper);\n        EditorGUI.indentLevel--;\n\n        if (m_CustomHelper.objectReferenceValue == null)\n            EditorGUILayout.HelpBox(\\\"Custom helper is not set.\\\", MessageType.Error);\n    }\n    else\n    {\n        m_HelperTypeNameIndex = GetHelperTypeNameIndex();\n        if (m_HelperTypeNameIndex < 0)\n            m_HelperTypeNameIndex = 0;\n    }\n}", "CodeBleu_score": 38.648609443298916}]}
{"instance_id": "957e0aaa6f72", "generation_result": [{"code": "public static void DisableAllLogs(){\n\t    string[] scriptingDefineSymbols = PlayerSettings.GetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup).Split(';');\n    List<string> scriptingDefineSymbolsList = new List<string>();\n    foreach (string scriptingDefineSymbol in scriptingDefineSymbols) {\n        if (!string.IsNullOrEmpty(scriptingDefineSymbol)) {\n            scriptingDefineSymbolsList.Add(scriptingDefineSymbol);\n        }\n    }\n    scriptingDefineSymbolsList.RemoveAll(x => x == EnableLogScriptingDefineSymbol);\n    foreach (string scriptingDefineSymbol in AboveLogScriptingDefineSymbols) {\n        scriptingDefineSymbolsList.RemoveAll(x => x == scriptingDefineSymbol);\n    }\n    foreach (string scriptingDefineSymbol in SpecifyLogScriptingDefineSymbols) {\n        scriptingDefineSymbolsList.RemoveAll(x => x == scriptingDefineSymbol);\n    }\n    PlayerSettings.SetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup, string.Join(\";\", scriptingDefineSymbolsList.ToArray()));\n}", "CodeBleu_score": 55.578519834538696}, {"code": "public static void DisableAllLogs(){\n\t    // Remove general logging symbol.\n    ScriptingDefineSymbols.RemoveScriptingDefineSymbol(EnableLogScriptingDefineSymbol);\n\n    // Remove specific logging symbols.\n    foreach (string scriptingDefineSymbol in SpecifyLogScriptingDefineSymbols) {\n        ScriptingDefineSymbols.RemoveScriptingDefineSymbol(scriptingDefineSymbol);\n    }\n\n    // Remove logging symbols above a certain level.\n    foreach (string scriptingDefineSymbol in AboveLogScriptingDefineSymbols) {\n        ScriptingDefineSymbols.RemoveScriptingDefineSymbol(scriptingDefineSymbol);\n    }\n}", "CodeBleu_score": 79.63730336891447}, {"code": "public static void DisableAllLogs(){\n\t    // Remove general logging symbol\n    ScriptingDefineSymbols.Remove(EnableLogScriptingDefineSymbol);\n\n    // Iterate through and remove specific log symbols\n    foreach (string logScriptingDefineSymbol in SpecifyLogScriptingDefineSymbols) {\n        ScriptingDefineSymbols.Remove(logScriptingDefineSymbol);\n    }\n\n    // Iterate through and remove log symbols above a certain level\n    foreach (string logScriptingDefineSymbol in AboveLogScriptingDefineSymbols) {\n        ScriptingDefineSymbols.Remove(logScriptingDefineSymbol);\n    }\n}", "CodeBleu_score": 72.17863758389062}]}
{"instance_id": "8a544c3d9513", "generation_result": [{"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t    GameFrameworkLinkedListNode<GameFrameworkComponent> current = s_GameFrameworkComponents.GetFirstNode();\n    while (current != null) {\n        if (current.Value.GetType() == type) {\n            return current.Value;\n        }\n        current = current.Next;\n    }\n    return null;\n}", "CodeBleu_score": 85.62633757235668}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t    GameFrameworkLinkedListNode<GameFrameworkComponent> current = s_GameFrameworkComponents.GetFirstNode();\n    while (current != null) {\n        if (current.Element.GetType() == type) {\n            return current.Element;\n        }\n        current = current.Next;\n    }\n    return null;\n}", "CodeBleu_score": 78.5448976571536}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t    if (type == null) {\n        throw new GameFrameworkException(\"Type is invalid.\");\n    }\n\n    if (!typeof(GameFrameworkComponent).IsAssignableFrom(type)) {\n        throw new GameFrameworkException($\"Type '{type.FullName}' is invalid.\");\n    }\n\n    return s_GameFrameworkComponents.Find((GameFrameworkComponent x) => x.GetType() == type);\n}", "CodeBleu_score": 26.167522122177967}]}
{"instance_id": "ec304512c0e4", "generation_result": [{"code": "public static void Shutdown(ShutdownType shutdownType){\n\t  if (shutdownType == ShutdownType.None) {\n    return;\n  }\n\n  Log.Info(\\\"Game Framework is shutting down...\\\");\n  if (BaseComponent.Instance != null) {\n    BaseComponent.Instance.Shutdown();\n  }\n\n  s_GameFrameworkComponents.Clear();\n\n  if (shutdownType == ShutdownType.Restart) {\n    SceneManager.LoadScene(0);\n  }\n  else if (shutdownType == ShutdownType.Quit) {\n    Application.Quit();\n  }\n}", "CodeBleu_score": 37.93714818387173}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t    if (shutdownType == ShutdownType.None) {\n        return;\n    }\n\n    Log.Info(\\\"Game Framework is shutting down...\\\");\n    Log.Flush();\n\n    BaseComponent baseComponent = GetComponent<BaseComponent>();\n    if (baseComponent != null) {\n        baseComponent.Shutdown();\n    }\n\n    LinkedListNode<GameFrameworkComponent> current = s_GameFrameworkComponents.First;\n            while (current != null)\n            {\n                current.Value.Shutdown();\n                current = current.Next;\n            }\n\n            s_GameFrameworkComponents.Clear();\n\n            switch (shutdownType)\n            {\n                case ShutdownType.Restart:\n                    SceneManager.LoadScene(0);\n                    break;\n                case ShutdownType.Quit:\n                    Application.Quit();\n                    break;\n            }\n        }", "CodeBleu_score": 48.95500072442521}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t    Log.Info($\"Shutdown game framework with shutdown type '{shutdownType.ToString()}'.\");\n\n    // Shutdown BaseComponent\n    if (BaseComponent.Instance != null) {\n        BaseComponent.Instance.Shutdown();\n    }\n\n    // Clear game framework components\n    s_GameFrameworkComponents.Clear();\n\n    // Restart game scene\n    if (shutdownType == ShutdownType.Restart) {\n        Log.Info(\"Restart game scene.\");\n        SceneManager.LoadScene(0);\n    }\n\n    // Quit application\n    else if (shutdownType == ShutdownType.Quit) {\n        Log.Info(\"Quit application.\");\n        Application.Quit();\n    }\n}", "CodeBleu_score": 35.66665470711492}]}
{"instance_id": "5c78a1d4f59d", "generation_result": [{"code": "protected override void Awake(){\n\t    base.Awake();\n    m_ConfigManager = GameFrameworkEntry.GetModule<IConfigManager>();\n    if (m_ConfigManager == null) {\n        Log.Fatal(\\\"Config manager is invalid.\\\");\n        return;\n    }\n\n    if (m_EnableLoadConfigUpdateEvent) {\n        m_EventComponent = UnityGameFramework.Runtime.GameEntry.GetComponent<EventComponent>();\n        if (m_EventComponent == null) {\n            Log.Fatal(\\\"Can not find EventComponent.\\\");\n            return;\n        }\n\n        m_EventComponent.AddEvent(LoadConfigSuccessEventArgs.EventId, OnLoadConfigSuccess);\n        m_EventComponent.AddEvent(LoadConfigFailureEventArgs.EventId, OnLoadConfigFailure);\n    }\n\n    if (m_EnableLoadConfigDependencyAssetEvent) {\n        m_EventComponent = UnityGameFramework.Runtime.GameEntry.GetComponent<EventComponent>();\n        if (m_EventComponent == null) {\n            Log.Fatal(\\\"Can not find EventComponent.\\\");\n            return;\n        }\n\n        m_EventComponent.AddEvent(LoadConfigDependencyAssetSuccessEventArgs.EventId, OnLoadConfigDependencyAssetSuccess);\n        m_EventComponent.AddEvent(LoadConfigDependencyAssetFailureEventArgs.EventId, OnLoadConfigDependencyAssetFailure);\n    }\n\n    m_ConfigManager.CachedBytesSize = m_CachedBytesSize;\n\n    if (m_CustomConfigHelper != null) {\n        m_ConfigManager.SetConfigHelper(m_CustomConfigHelper);\n    }\n    else {\n        m_ConfigManager.SetConfigHelper(m_ConfigHelperTypeName);\n    }\n}", "CodeBleu_score": 46.6598674694723}, {"code": "protected override void Awake(){\n\t    base.Awake();\n    m_ConfigManager = GameFrameworkEntry.GetModule<IConfigManager>();\n    if (m_ConfigManager == null) {\n        Log.Fatal(\\\"Config manager is invalid.\\\");\n        return;\n    }\n\n    if (m_EnableLoadConfigUpdateEvent) {\n        m_EventComponent = GetComponent<EventComponent>();\n        if (m_EventComponent == null) {\n            Log.Fatal(\\\"EventComponent is invalid.\\\");\n            return;\n        }\n\n        m_EventComponent.AddEvent(LoadConfigUpdateEventArgs.EventId, OnLoadConfigUpdate);\n    }\n\n    if (m_EnableLoadConfigDependencyAssetEvent) {\n        m_EventComponent = GetComponent<EventComponent>();\n        if (m_EventComponent == null) {\n            Log.Fatal(\\\"EventComponent is invalid.\\\");\n            return;\n        }\n\n        m_EventComponent.AddEvent(LoadConfigDependencyAssetEventArgs.EventId, OnLoadConfigDependencyAsset);\n    }\n\n    m_ConfigManager.LoadConfig(OnLoadConfigSuccess, OnLoadConfigFailure);\n}", "CodeBleu_score": 47.11000696044452}, {"code": "protected override void Awake(){\n\t    base.Awake();\n    m_ConfigManager = GameFrameworkEntry.GetModule<IConfigManager>();\n    if (m_ConfigManager == null) {\n        Log.Fatal(\\\"Config manager is invalid.\\\");\n        return;\n    }\n    m_ConfigManager.ReadDataSuccess += OnReadDataSuccess;\n    m_ConfigManager.ReadDataFailure += OnReadDataFailure;\n    if (m_EnableLoadConfigUpdateEvent) {\n        m_ConfigManager.LoadConfigUpdate += OnLoadConfigUpdate;\n    }\n    if (m_EnableLoadConfigDependencyAssetEvent) {\n        m_ConfigManager.LoadConfigDependencyAsset += OnLoadConfigDependencyAsset;\n    }\n    if (m_CustomConfigHelper == null) {\n        m_ConfigManager.Helper = Utility.Assembly.CreateObject<ConfigHelperBase>(m_ConfigHelperTypeName);\n    } else {\n        m_ConfigManager.Helper = m_CustomConfigHelper;\n    }\n    m_EventComponent = GetComponent<EventComponent>();\n    if (m_EventComponent == null) {\n        Log.Fatal(\\\"Can not find EventComponent.\\\");\n        return;\n    }\n}", "CodeBleu_score": 64.53081703710293}]}
{"instance_id": "fbb36ff9d552", "generation_result": [{"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t", "CodeBleu_score": 18.54045787546793}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t    if (configAsset == null) {\n        Log.Warning(\\\"Config asset is invalid.\\\");\n        return false;\n    }\n\n    TextAsset textAsset = configAsset as TextAsset;\n    if (textAsset == null) {\n        Log.Warning(\\\"Config asset is invalid.\\\");\n        return false;\n    }\n\n    string text = textAsset.text;\n    string extension = Path.GetExtension(configAssetName);\n    if (string.Equals(extension, BytesAssetExtension, StringComparison.OrdinalIgnoreCase)) {\n        return ReadData(configManager, text, userData);\n    }\n\n    return ReadData(configManager, text, userData);\n}", "CodeBleu_score": 55.809175202187845}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t    if (configAsset == null) {\n        Log.Warning(\\\"Can not load config asset from '{0}'.\\\", configAssetName);\n        return false;\n    }\n\n    TextAsset textAsset = configAsset as TextAsset;\n    if (textAsset == null) {\n        Log.Warning(\\\"Can not load config asset from '{0}' as TextAsset.\\\", configAssetName);\n        return false;\n    }\n\n    if (configAssetName.EndsWith(BytesAssetExtension)) {\n        return ReadData(configManager, configAssetName, textAsset.bytes, userData);\n    }\n\n    return ReadData(configManager, configAssetName, textAsset.text, userData);\n}", "CodeBleu_score": 57.105752759093505}]}
{"instance_id": "84d744c480ca", "generation_result": [{"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t    try {\n        int position = 0;\n        using (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length)) {\n            using (BinaryReader binaryReader = new BinaryReader(memoryStream)) {\n                string configLineString = null;\n                while ((configLineString = binaryReader.ReadString()) != null) {\n                    if (configLineString[0] == '#') {\n                        continue;\n                    }\n\n                    string[] splitedLine = configLineString.Split(ColumnSplitSeparator, StringSplitOptions.None);\n                    if (splitedLine.Length != ColumnCount) {\n                        Log.Warning(\"Can not parse config line string '{0}' which column count is invalid.\", configLineString);\n                        return false;\n                    }\n\n                    string configName = splitedLine[1];\n                    string configValue = splitedLine[3];\n                    if (!configManager.AddConfig(configName, configValue)) {\n                        Log.Warning(\"Can not add config with config name '{0}' which may be invalid or duplicate.\", configName);\n                        return false;\n                    }\n                }\n            }\n        }\n\n        return true;\n    }\n    catch (Exception exception) {\n        Log.Warning(\"Can not parse config string with exception '{0}'.\", exception);\n        return false;\n    }\n}", "CodeBleu_score": 69.35604158420394}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t    try {\n        using (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length)) {\n            using (BinaryReader binaryReader = new BinaryReader(memoryStream)) {\n                int position = 0;\n                string configLineString = null;\n                while ((configLineString = binaryReader.ReadLine()) != null) {\n                    if (configLineString[0] == '#') {\n                        continue;\n                    }\n\n                    string[] splitedLine = configLineString.Split(ColumnSplitSeparator, StringSplitOptions.None);\n                    if (splitedLine.Length != ColumnCount) {\n                        Log.Warning(\"Can not parse config line string '{0}' which column count is invalid.\", configLineString);\n                        return false;\n                    }\n\n                    string configName = splitedLine[1];\n                    string configValue = splitedLine[3];\n                    if (!configManager.AddConfig(configName, configValue)) {\n                        Log.Warning(\"Can not add config with config name '{0}' which may be invalid or duplicate.\", configName);\n                        return false;\n                    }\n                }\n            }\n        }\n\n        return true;\n    }\n    catch (Exception exception) {\n        Log.Warning(\"Can not parse config string with exception '{0}'.\", exception);\n        return false;\n    }\n}", "CodeBleu_score": 70.60498401097693}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t    try {\n        MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length);\n        BinaryReader binaryReader = new BinaryReader(memoryStream, Encoding.UTF8);\n        int position = 0;\n        string configLineString = null;\n        while ((configLineString = binaryReader.ReadLine()) != null) {\n            if (configLineString[0] == '#') {\n                continue;\n            }\n\n            string[] splitedLine = configLineString.Split(ColumnSplitSeparator, StringSplitOptions.None);\n            if (splitedLine.Length != ColumnCount) {\n                Log.Warning(\"Can not parse config line string '{0}' which column count is invalid.\", configLineString);\n                return false;\n            }\n\n            string configName = splitedLine[1];\n            string configValue = splitedLine[3];\n            if (!configManager.AddConfig(configName, configValue)) {\n                Log.Warning(\"Can not add config with config name '{0}' which may be invalid or duplicate.\", configName);\n                return false;\n            }\n        }\n\n        return true;\n    } catch (Exception exception) {\n        Log.Warning(\"Can not parse config bytes with exception '{0}'.\", exception);\n        return false;\n    }\n}", "CodeBleu_score": 71.51606408565968}]}
{"instance_id": "298bb6fa19a4", "generation_result": [{"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t    if (m_ResourceComponent == null) {\n        m_ResourceComponent = GameEntry.GetComponent<ResourceComponent>();\n    }\n    if (m_ResourceComponent == null) {\n        Log.Warning(\"Resource component is invalid.\");\n        return;\n    }\n\n    m_ResourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 53.19062959563462}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t    if (configAsset != null) {\n        m_ResourceComponent.UnloadAsset(configAsset);\n    }\n}", "CodeBleu_score": 58.21056538352932}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t    if (m_ResourceComponent == null) {\n        m_ResourceComponent = GameEntry.GetComponent<ResourceComponent>();\n    }\n\n    m_ResourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 49.95512925972503}]}
{"instance_id": "fa2003d95e36", "generation_result": [{"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t            ActiveSceneChangedEventArgs activeSceneChangedEventArgs = ReferencePool.Acquire<ActiveSceneChangedEventArgs>();\n            activeSceneChangedEventArgs.LastActiveScene = lastActiveScene;\n            activeSceneChangedEventArgs.ActiveScene = activeScene;\n            return activeSceneChangedEventArgs;\n        }", "CodeBleu_score": 80.0779520542894}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t    ActiveSceneChangedEventArgs activeSceneChangedEventArgs = ReferencePool.Acquire<ActiveSceneChangedEventArgs>();\n    activeSceneChangedEventArgs.LastActiveScene = lastActiveScene;\n    activeSceneChangedEventArgs.ActiveScene = activeScene;\n    return activeSceneChangedEventArgs;\n}", "CodeBleu_score": 83.13523625026366}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t    ActiveSceneChangedEventArgs activeSceneChangedEventArgs = ReferencePool.Acquire<ActiveSceneChangedEventArgs>();\n    activeSceneChangedEventArgs.LastActiveScene = lastActiveScene;\n    activeSceneChangedEventArgs.ActiveScene = activeScene;\n    return activeSceneChangedEventArgs;\n}", "CodeBleu_score": 83.13523625026366}]}
{"instance_id": "aba13f34251c", "generation_result": [{"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t    if (string.IsNullOrEmpty(sceneAssetName)) {\n        Log.Error(\"Scene asset name is invalid.\");\n        return;\n    }\n\n    if (!sceneAssetName.StartsWith(\"Assets/\", StringComparison.Ordinal) || !sceneAssetName.EndsWith(\".unity\", StringComparison.Ordinal)) {\n        Log.Error(\"Scene asset name '{0}' is invalid.\", sceneAssetName);\n        return;\n    }\n\n    m_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 97.978570139059}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t    if (string.IsNullOrEmpty(sceneAssetName)) {\n        Log.Error(\"Scene asset name is invalid.\");\n        return;\n    }\n\n    if (!sceneAssetName.StartsWith(\"Assets/\", StringComparison.Ordinal) || !sceneAssetName.EndsWith(\".unity\", StringComparison.Ordinal)) {\n        Log.Error(\"Scene asset name '{0}' is invalid.\", sceneAssetName);\n        return;\n    }\n\n    m_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 97.978570139059}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t    if (string.IsNullOrEmpty(sceneAssetName)) {\n        Log.Error(\"Scene asset name is invalid.\");\n        return;\n    }\n\n    if (!sceneAssetName.StartsWith(\"Assets/\", StringComparison.Ordinal) || !sceneAssetName.EndsWith(\".unity\", StringComparison.Ordinal)) {\n        Log.Error(\"Scene asset name '{0}' is invalid.\", sceneAssetName);\n        return;\n    }\n\n    m_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 97.978570139059}]}
{"instance_id": "3fe99fba3ce8", "generation_result": [{"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\tIModularFeatures::Get().OnModularFeatureRegistered().AddStatic(&OnBinariesModularFeatureRegistered);\n\tIModularFeatures::Get().OnModularFeatureUnregistered().AddStatic(&OnBinariesModularFeatureUnRegistered);\n\n\tTArray<FName> ModularFeatures = IModularFeatures::Get().GetModularFeatureImplementations(BINARIES_DIFF_PATCH_FEATURE_NAME);\n\tfor (FName ModularFeature : ModularFeatures) {\n\t\tIBinariesDiffPatchFeature* Feature = static_cast<IBinariesDiffPatchFeature*>(IModularFeatures::Get().GetModularFeatureImplementation(ModularFeature));\n\t\tTHotPatcherTemplateHelper::AppendEnumeraters<EBinariesPatchFeature>(TArray<FString>{Feature->GetFeatureName()});\n\t}\n}", "CodeBleu_score": 60.75253587586623}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\tFModuleManager::Get().OnModularFeatureRegistered().AddStatic(&OnBinariesModularFeatureRegistered);\n\tFModuleManager::Get().OnModularFeatureUnregistered().AddStatic(&OnBinariesModularFeatureUnRegistered);\n\n\tTArray<IModularFeature*> Features;\n\tFModuleManager::Get().GetModularFeatures(BINARIES_DIFF_PATCH_FEATURE_NAME, Features);\n\tfor (IModularFeature* Feature : Features) {\n\t\tIBinariesDiffPatchFeature* BinariesFeature = static_cast<IBinariesDiffPatchFeature*>(Feature);\n\t\tTHotPatcherTemplateHelper::AppendEnumeraters<EBinariesPatchFeature>(TArray<FString>{BinariesFeature->GetFeatureName()});\n\t}\n}", "CodeBleu_score": 64.94408173261611}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\tIModularFeatures::Get().OnModularFeatureRegistered().AddStatic(&OnBinariesModularFeatureRegistered);\n\tIModularFeatures::Get().OnModularFeatureUnregistered().AddStatic(&OnBinariesModularFeatureUnRegistered);\n\tTArray<FName> RegisteredFeatures = IModularFeatures::Get().GetModularFeatureImplementations(BINARIES_DIFF_PATCH_FEATURE_NAME);\n\tfor (FName Feature : RegisteredFeatures) {\n\t\tIBinariesDiffPatchFeature* FeatureImpl = static_cast<IBinariesDiffPatchFeature*>(IModularFeatures::Get().GetModularFeatureImplementation(Feature));\n\t\tTHotPatcherTemplateHelper::AppendEnumeraters<EBinariesPatchFeature>(TArray<FString>{FeatureImpl->GetFeatureName()});\n\t}\n}", "CodeBleu_score": 61.20923082057392}]}
{"instance_id": "c702cc0f74b5", "generation_result": [{"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> PatchConfigs;\n\tTMap<FString, FString> PatchConfigMap;\n\tFlibPatchParserHelper::ParserCommandline(Commandline, PatchConfigMap);\n\tif (PatchConfigMap.Contains(Token)) {\n\t\tFlibPatchParserHelper::ParserStringToArray(PatchConfigMap[Token], PatchConfigs);\n\t}\n\treturn PatchConfigs;\n}", "CodeBleu_score": 48.11473269631712}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTMap<FString,FString> ParserMap;\n\tTArray<FString> ParserArray;\n\tFString ParserStr = Commandline;\n\tParserStr.ParseIntoArray(ParserArray,TEXT(\" \"),true);\n\tfor(int32 i = 0; i < ParserArray.Num(); i++) {\n\t\tFString Key;\n\t\tFString Value;\n\t\tParserArray[i].Split(TEXT(\"=\"),&Key,&Value);\n\t\tParserMap.Add(Key,Value);\n\t}\n\tif(ParserMap.Contains(Token)) {\n\t\tParserMap[Token].ParseIntoArray(ParserArray,TEXT(\",\"),true);\n\t\treturn ParserArray;\n\t}\n\treturn TArray<FString>();\n}", "CodeBleu_score": 51.170264974738714}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTMap<FString, FString> CommandlineMap;\n\tFProcWorkerThread::ParserCommandline(Commandline, CommandlineMap);\n\tTArray<FString> Result;\n\tif (CommandlineMap.Contains(Token)) {\n\t\tFString Value = CommandlineMap[Token];\n\t\tValue.ParseIntoArray(Result, TEXT(\",\"), true);\n\t}\n\treturn Result;\n}", "CodeBleu_score": 56.533429200119166}]}
{"instance_id": "6a6382275b1d", "generation_result": [{"code": "bool CommandletHelper::IsCookCommandlet(){\n\t    FString CommandletName = FCommandLine::Get();\n    if (!CommandletName.IsEmpty()) {\n        CommandletName.ToLower();\n        if (CommandletName.Contains(TEXT(\"cook\"))) {\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 27.18905991152906}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\tFString CommandletName = FCommandLine::Get();\n\tif (!CommandletName.IsEmpty()) {\n\t\tCommandletName.ToLowerInline();\n\t\tif (CommandletName.Find(TEXT(\"cook\")) != INDEX_NONE) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 24.058778348906348}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\tFString CommandletName = FCommandLine::Get();\n\tFString CookCommandletName = TEXT(\"cook\");\n\tFString CookCommandletNameLower = CookCommandletName.ToLower();\n\n\tif (!CommandletName.IsEmpty() && CommandletName.ToLower().Contains(CookCommandletNameLower)) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 36.26989462926141}]}
{"instance_id": "6888ed47b6be", "generation_result": [{"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t    FString CmdletName = FCommandLine::Get();\n    if (CmdletName.IsEmpty()) {\n        CmdletName = GetCmdletName();\n    } else {\n        CmdletName = FPaths::GetBaseFilename(CmdletName);\n    }\n\n    if (FParse::Param(FCommandLine::Get(), TEXT(\"ServerlessCounting\"))) {\n        FServerlessCounter::Get().Init(CmdletName, Params);\n        FServerlessCounter::Get().Process();\n    }\n}", "CodeBleu_score": 28.200145124591625}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t\tFString CommandletName = FCommandLine::Get();\n\tCommandletName = FCommandLine::GetToken(CommandletName, 0);\n\n\tbool bServerlessCountingEnabled = GetDefault<UHotPatcherSettings>()->bServerlessCountingEnabled;\n\tif (bServerlessCountingEnabled) {\n\t\tFString ProjectName = FPaths::GetBaseFilename(FPaths::ProjectFilePath());\n\t\tFString CommandletName = FCommandLine::GetToken(FCommandLine::Get(), 0);\n\t\tFString ProjectNameWithCommandlet = ProjectName + TEXT(\"_\") + CommandletName;\n\t\tFHotPatcherCounter Counter(ProjectNameWithCommandlet);\n\t\tCounter.Process();\n\t}\n}", "CodeBleu_score": 43.839023086576944}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t    // Extract the commandlet name from the command line\n    FString CommandletName = FCommandLine::Get();\n    if (CommandletName.IsEmpty()) {\n        UE_LOG(LogHotPatcherCommandletBase, Error, TEXT(\"Commandlet name is empty\"));\n        return;\n    }\n    FString CmdletName = FString::Printf(TEXT(\"%s.exe\"), *CommandletName);\n    UE_LOG(LogHotPatcherCommandletBase, Display, TEXT(\"Commandlet name: %s\"), *CommandletName);\n\n    // Check if serverless counting is enabled in the settings\n    if (FHotPatcherCore::Get().IsServerlessCountingEnabled()) {\n        // Initialize the counter with server request and project information\n        FServerlessCounter::Get().Initialize(FHotPatcherCore::Get().GetServerRequest(), FHotPatcherCore::Get().GetProjectInfo());\n\n        // Modify the project name to include the commandlet name if applicable\n        FString ProjectName = FHotPatcherCore::Get().GetProjectInfo().ProjectName;\n        if (ProjectName.IsEmpty()) {\n            ProjectName = FPaths::GetBaseFilename(FPaths::GetProjectFilePath());\n        }\n        FString NewProjectName = FString::Printf(TEXT(\"%s-%s\"), *ProjectName, *CommandletName);\n        FHotPatcherCore::Get().GetProjectInfo().ProjectName = NewProjectName;\n\n        // Process the counter\n        FServerlessCounter::Get().Process();\n    }\n}", "CodeBleu_score": 42.38756914180426}]}
{"instance_id": "c467af995f29", "generation_result": [{"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\t// Check if the platform name starts with \"IOS\", \"Mac\", or \"TVOS\" (case-insensitive).\n\tif (TargetPlatform->GetName().StartsWith(\"IOS\", ESearchCase::IgnoreCase) ||\n\t\tTargetPlatform->GetName().StartsWith(\"Mac\", ESearchCase::IgnoreCase) ||\n\t\tTargetPlatform->GetName().StartsWith(\"TVOS\", ESearchCase::IgnoreCase)) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 24.037986267749435}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t  // Scope the named event to the function name\n  SCOPED_NAMED_EVENT_TEXT(\"UFlibHotCookerHelper::IsAppleMetalPlatform\", FColor::Red);\n\n  // Get the name of the target platform\n  FString PlatformName = TargetPlatform->PlatformName();\n\n  // Check if the platform name starts with \"IOS\", \"Mac\", or \"TVOS\" (case-insensitive)\n  if (PlatformName.StartsWith(\"IOS\", ESearchCase::IgnoreCase) || PlatformName.StartsWith(\"Mac\", ESearchCase::IgnoreCase) || PlatformName.StartsWith(\"TVOS\", ESearchCase::IgnoreCase)) {\n    // Return true if a match is found\n    return true;\n  }\n\n  // Return false if no match is found\n  return false;\n}", "CodeBleu_score": 36.795437102269226}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t    FString PlatformName = TargetPlatform->PlatformName();\n    return PlatformName.StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) ||\n           PlatformName.StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) ||\n           PlatformName.StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 37.66158908083444}]}
{"instance_id": "3df342b1c6f8", "generation_result": [{"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\t// Get the outermost package of the object\n\tUPackage* Package = Object->GetOutermost();\n\tif (Package == nullptr) {\n\t\treturn;\n\t}\n\n\t// Check if the package is in the CookerAssetsSet but not in the AllAssetsSet\n\tif (CookerAssetsSet.Contains(Package) && !AllAssetsSet.Contains(Package) && !IsAlwayPostLoadClasses(Package, (UObject*)Object)) {\n\t\t// Add the object to the PackageObjectsMap and FreezeObjects list\n\t\tPackageObjectsMap.FindOrAdd(Package).Add(Object);\n\t\tFreezeObjects.Add(Object);\n\t}\n\n\t// Clear the RF_NeedPostLoad and RF_NeedPostLoadSubobjects flags from the object\n\tObject->ClearFlags(RF_NeedPostLoad);\n\tObject->ClearFlags(RF_NeedPostLoadSubobjects);\n}", "CodeBleu_score": 39.010029414627134}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t    if (Object == nullptr) {\n        return;\n    }\n\n    UPackage* Package = Object->GetOutermost();\n    if (Package == nullptr) {\n        return;\n    }\n\n    if (Package->GetFName() == NAME_None) {\n        return;\n    }\n\n    if (!IsAlwayPostLoadClasses(Package, const_cast<UObject*>(Object))) {\n        if (AllAssetsSet.Contains(Package)) {\n            if (!CookerAssetsSet.Contains(Package)) {\n                PackageObjectsMap.Add(Package, Object);\n                FreezeObjects.Add(Object);\n            }\n        }\n    }\n\n    Object->ClearFlags(RF_NeedPostLoad);\n    Object->ClearFlags(RF_NeedPostLoadSubobjects);\n}", "CodeBleu_score": 43.69767723295508}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t    UObject* ObjectAsUObject = const_cast<UObjectBase*>(Object);\n    UPackage* Package = ObjectAsUObject->GetOutermost();\n    if (Package && !Package->HasAnyFlags(RF_ClassDefaultObject)) {\n        if (AllAssetsSet.Contains(Package) && !CookerAssetsSet.Contains(Package)) {\n            if (!IsAlwayPostLoadClasses(Package, ObjectAsUObject)) {\n                PackageObjectsMap.Add(Package, ObjectAsUObject);\n                FreezeObjects.Add(ObjectAsUObject);\n            }\n        }\n        ObjectAsUObject->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n    }\n}", "CodeBleu_score": 48.82357068743326}]}
{"instance_id": "fac8b2878c3c", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\tTArray<FBulkDataRecord>& BulkDataRecords = Record.BulkDataRecords;\n\tfor (int32 BulkDataIndex = 0; BulkDataIndex < BulkDataRecords.Num(); ++BulkDataIndex)\n\t{\n\t\tFBulkDataRecord& BulkDataRecord = BulkDataRecords[BulkDataIndex];\n\t\tif (BulkDataRecord.BulkDataType == EBulkDataType::BulkDataAppendedToExports)\n\t\t{\n\t\t\tFExportBuffer& ExportBuffer = Context.ExportsBuffers[BulkDataRecord.MultiOutputIndex];\n\t\t\tExportBuffer.Append(BulkDataRecord.Buffer, BulkDataRecord.Regions);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tFOutputFile& OutputFile = Context.OutputFiles.AddDefaulted_GetRef();\n\t\t\tOutputFile.Filename = BulkDataRecord.Filename;\n\t\t\tOutputFile.Buffer = BulkDataRecord.Buffer;\n\t\t\tOutputFile.Regions = BulkDataRecord.Regions;\n\t\t\tOutputFile.bIsSidecar = BulkDataRecord.bIsSidecar;\n\t\t\tOutputFile.bHashContribution = BulkDataRecord.bHashContribution;\n\t\t}\n\t}\n}", "CodeBleu_score": 45.55916613305369}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\tFBulkDataInfo& BulkData = Record.BulkData;\n\tif (BulkData.Type == EBulkDataType::AppendToExports)\n\t{\n\t\tcheck(BulkData.Buffer);\n\t\tcheck(BulkData.Buffer->GetSize() > 0);\n\n\t\tFExportBuffer ExportBuffer;\n\t\tExportBuffer.Buffer = MoveTemp(*BulkData.Buffer);\n\t\tExportBuffer.Regions = MoveTemp(BulkData.Regions);\n\n\t\tFPackageWriterRecords::FWritePackage& Package = Record.Packages[0];\n\t\tContext.ExportsBuffers[Package.Info.MultiOutputIndex].Add(MoveTemp(ExportBuffer));\n\t}\n\telse\n\t{\n\t\tFOutputFile& OutputFile = Context.OutputFiles.AddDefaulted_GetRef();\n\t\tOutputFile.Filename = BulkData.Filename;\n\t\tOutputFile.Buffer = MoveTemp(*BulkData.Buffer);\n\t\tOutputFile.Regions = MoveTemp(BulkData.Regions);\n\t\tOutputFile.Flags = BulkData.Flags;\n\t\tOutputFile.HashContribution = BulkData.HashContribution;\n\t}\n}", "CodeBleu_score": 53.57379599618754}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\tFString ExportsFilename;\n\tFString ExportsFilenameWithoutExtension;\n\tFString ExportsFilenameWithExtension;\n\tFString ExportsFilenameWithExtensionNoHash;\n\tFString ExportsFilenameWithExtensionHash;\n\tFString ExportsFilenameWithExtensionHashNoExtension;\n\tFString ExportsFilenameWithExtensionHashNoExtensionNoHash;\n\n\tfor (FBulkDataRecord& BulkDataRecord : Record.BulkData)\n\t{\n\t\tif (BulkDataRecord.Type == EBulkDataType::BULKDATA_Exports)\n\t\t{\n\t\t\tFExportBuffer& ExportBuffer = Context.ExportsBuffers[BulkDataRecord.MultiOutputIndex];\n\t\t\tExportBuffer.Buffer = MoveTemp(BulkDataRecord.Buffer);\n\t\t\tExportBuffer.Regions = MoveTemp(BulkDataRecord.Regions);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tFOutputFile& OutputFile = Context.OutputFiles.AddDefaulted_GetRef();\n\t\t\tOutputFile.Filename = BulkDataRecord.Filename;\n\t\t\tOutputFile.Buffer = MoveTemp(BulkDataRecord.Buffer);\n\t\t\tOutputFile.Regions = MoveTemp(BulkDataRecord.Regions);\n\t\t\tOutputFile.Flags = BulkDataRecord.Flags;\n\t\t}\n\t}\n}", "CodeBleu_score": 50.171796121883396}]}
{"instance_id": "bf46051105c9", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t", "CodeBleu_score": 4.951469825088823}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t", "CodeBleu_score": 4.951469825088823}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tif (Record.bCompletedExportsArchiveForDiff) {\n\t\t// Already Added in CompleteExportsArchiveForDiff\n\t\treturn;\n\t}\n\n\tFBufferArchive FooterBuffer;\n\tFArchive& FooterAr = FooterBuffer;\n\tFooterAr << Record.PackageFileTag;\n\n\tfor (FPackageWriterRecords::FWritePackage& Package : Record.Packages) {\n\t\tContext.ExportsBuffers[Package.Info.MultiOutputIndex].Add(FExportBuffer{ FooterBuffer, MoveTemp(Package.Regions) });\n\t}\n}", "CodeBleu_score": 65.33014756290444}]}
{"instance_id": "c0966eddf1ee", "generation_result": [{"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n\tUGDCharacterMovementComponent* GDCharacterMovement = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\tif (GDCharacterMovement) {\n\t\tSavedRequestToStartSprinting = GDCharacterMovement->RequestToStartSprinting;\n\t\tSavedRequestToStartADS = GDCharacterMovement->RequestToStartADS;\n\t}\n}", "CodeBleu_score": 83.00658949996622}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n\tUGDCharacterMovementComponent* GDCharacterMovementComponent = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\tif (GDCharacterMovementComponent) {\n\t\tSavedRequestToStartSprinting = GDCharacterMovementComponent->RequestToStartSprinting;\n\t\tSavedRequestToStartADS = GDCharacterMovementComponent->RequestToStartADS;\n\t}\n}", "CodeBleu_score": 80.99715265226592}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\tUGDCharacterMovementComponent* GDCharacterMovement = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\tif (GDCharacterMovement) {\n\t\tSavedRequestToStartSprinting = GDCharacterMovement->RequestToStartSprinting;\n\t\tSavedRequestToStartADS = GDCharacterMovement->RequestToStartADS;\n\t}\n}", "CodeBleu_score": 83.00658949996622}]}
{"instance_id": "f73106356e9d", "generation_result": [{"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t    return nullptr;\n}", "CodeBleu_score": 6.478155136382637}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t    return nullptr;\n}", "CodeBleu_score": 6.478155136382637}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t    return nullptr;\n}", "CodeBleu_score": 6.478155136382637}]}
{"instance_id": "a581424c2b31", "generation_result": [{"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (IsValid(ASC)) {\n\t\tASC->OnActiveGameplayEffectAddedDelegateToSelf.RemoveAll(this);\n\t\tTArray<FGameplayTag> CooldownTags;\n\t\tCooldownTags.Append(CooldownTags);\n\t\tfor (FGameplayTag CooldownTag : CooldownTags) {\n\t\t\tASC->RegisterGameplayTagEvent(CooldownTag, EGameplayTagEventType::NewOrRemoved).RemoveAll(this);\n\t\t}\n\t}\n\tSetReadyToDestroy();\n\tMarkAsGarbage();\n}", "CodeBleu_score": 86.79884303038817}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\t//TODO: Implement this function\n}", "CodeBleu_score": 2.750515142824237}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\t// Check if the ASC is valid and remove all delegates related to gameplay effect additions and cooldown tag events\n\tif (IsValid(ASC)) {\n\t\tASC->OnActiveGameplayEffectAddedDelegateToSelf.RemoveAll(this);\n\n\t\tTArray<FGameplayTag> CooldownTags;\n\t\tCooldownTags.Append(CooldownTags);\n\n\t\tfor (FGameplayTag CooldownTag : CooldownTags) {\n\t\t\tASC->RegisterGameplayTagEvent(CooldownTag, EGameplayTagEventType::NewOrRemoved).RemoveAll(this);\n\t\t}\n\t}\n\n\t// Mark the task as ready to be destroyed and designate it as garbage\n\tSetReadyToDestroy();\n\tMarkAsGarbage();\n}", "CodeBleu_score": 86.79429310585955}]}
{"instance_id": "5029df3a2033", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t    FGameplayTagContainer AssetTags;\n    EffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n    FGameplayTagContainer GrantedTags;\n    EffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n    if (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n        if (IsValid(ASC)) {\n            ASC->OnGameplayEffectStackChangeDelegate(EffectRemoved.Handle)->RemoveAll(this);\n        }\n\n        OnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, 0, EffectRemoved.StackCount);\n        ActiveEffectHandle = FActiveGameplayEffectHandle();\n    }\n}", "CodeBleu_score": 78.07926891475329}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t    FGameplayTagContainer AssetTags;\n    EffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n    FGameplayTagContainer GrantedTags;\n    EffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n    if (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n        OnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, -1, EffectRemoved.StackCount);\n    }\n}", "CodeBleu_score": 85.94338760010054}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\t// This function is triggered when a gameplay effect is removed.\n\t// It retrieves asset and granted tags from the removed effect.\n\t// If either tag container contains the specified EffectGameplayTag, it broadcasts an effect stack change event with the tag, effect handle, and stack change details.\n\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, 0, EffectRemoved.StackCount);\n\t}\n}", "CodeBleu_score": 88.01438298058977}]}
{"instance_id": "cb1d2823d203", "generation_result": [{"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t    return NULL;\n}", "CodeBleu_score": 5.431334758320042}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t    return nullptr;\n}", "CodeBleu_score": 6.179166261243214}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t    return NULL;\n}", "CodeBleu_score": 5.431334758320042}]}
{"instance_id": "6659c2592e93", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t    FGameplayTagContainer AssetTags;\n    EffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n    FGameplayTagContainer GrantedTags;\n    EffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n    if (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n        OnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, 0, EffectRemoved.StackCount);\n    }\n}", "CodeBleu_score": 87.59923636764294}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t    FGameplayTagContainer AssetTags;\n    EffectRemoved.Spec.GetAllAssetTags(AssetTags);\n    FGameplayTagContainer GrantedTags;\n    EffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n    if (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n        OnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, 0, EffectRemoved.StackCount);\n        ActiveEffectHandle = FActiveGameplayEffectHandle();\n    }\n}", "CodeBleu_score": 84.83494846491226}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\t// Retrieve the asset and granted tags from the removed effect\n\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\t// If either tag container has the specified EffectGameplayTag, broadcast a stack change event\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, 0, EffectRemoved.StackCount);\n\t}\n}", "CodeBleu_score": 88.01438298058977}]}
{"instance_id": "a8f7dcc3f1fa", "generation_result": [{"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t    Super::OnAvatarSet(ActorInfo, Spec);\n    if (ActivateAbilityOnGranted) {\n        // Ability is active for the actor for which it is granted immediately,\n        // This is usually done together with giving ability to the actor\n        if (ActorInfo != nullptr && ActorInfo->AbilitySystemComponent.IsValid()) {\n            ActorInfo->AbilitySystemComponent->TryActivateAbility(Spec.Handle);\n        }\n    }\n}", "CodeBleu_score": 70.76556634414109}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t    Super::OnAvatarSet(ActorInfo, Spec);\n    if (ActivateAbilityOnGranted) {\n        // Activate the ability immediately when granted\n        ActorInfo->AbilitySystemComponent->TryActivateAbility(Spec.Handle);\n    }\n}", "CodeBleu_score": 78.75332833715362}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t    Super::OnAvatarSet(ActorInfo, Spec);\n    \n    if (ActivateAbilityOnGranted) {\n        if (ActorInfo->AbilitySystemComponent.IsValid()) {\n            ActorInfo->AbilitySystemComponent->TryActivateAbility(Spec.Handle);\n        }\n    }\n}", "CodeBleu_score": 72.19606972388075}]}
{"instance_id": "72a7ce4b848c", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tif (!bInterrupted) {\n\t\t// We assume that ability system component is notified of montage end by the anim notify\n\t\t// so we don't broadcast end event here\n\t\tif (ShouldBroadcastAbilityTaskDelegates()) {\n\t\t\tOnCompleted.Broadcast(FGameplayTag(), FGameplayEventData());\n\t\t}\n\t}\n\n\tEndTask();\n}", "CodeBleu_score": 95.80947584184304}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t    if (!bInterrupted) {\n        if (ShouldBroadcastAbilityTaskDelegates()) {\n            OnCompleted.Broadcast(FGameplayTag(), FGameplayEventData());\n        }\n    }\n\n    EndTask();\n}", "CodeBleu_score": 95.23936212453167}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\t// TODO: Merge this fix back to engine, it was calling the wrong callback\n\tif (StopPlayingMontage()) {\n\t\t// Let the BP handle the interrupt as well\n\t\tif (ShouldBroadcastAbilityTaskDelegates()) {\n\t\t\tOnCompleted.Broadcast(FGameplayTag(), FGameplayEventData());\n\t\t}\n\t}\n}", "CodeBleu_score": 52.30507788520855}]}
{"instance_id": "cc1cdd579bd4", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tif (Ability) {\n\t\t// Note: Clearing montage end delegate isn't necessary since its not a multicast and will be cleared when the next montage plays\n\t\tAbility->OnGameplayAbilityCancelled.Remove(CancelledHandle);\n\t\tif (AbilityEnded && ShouldBroadcastAbilityTaskDelegates()) {\n\t\t\tOnCancelled.Broadcast(FGameplayTag(), FGameplayEventData());\n\t\t}\n\t}\n\n\tif (AbilitySystemComponent.IsValid()) {\n\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(EventTags, EventHandle);\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 79.80038915517362}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tif (Ability) {\n\t\t// Note: Clearing montage end delegate isn't necessary since its not a multicast and will be cleared when the next montage plays.\n\t\tAbility->OnGameplayAbilityCancelled.Remove(CancelledHandle);\n\t\tif (AbilityEnded && ShouldBroadcastAbilityTaskDelegates()) {\n\t\t\tOnCancelled.Broadcast(FGameplayTag(), FGameplayEventData());\n\t\t}\n\t}\n\n\tif (AbilitySystemComponent.IsValid()) {\n\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(EventTags, EventHandle);\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 79.80038915517362}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tif (Ability) {\n\t\t// Note: Clearing montage end delegate isn't necessary since its not a multicast and will be cleared when the next montage plays\n\n\t\t// Remove event handler\n\t\tif (EventHandle.IsValid())\n\t\t{\n\t\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(EventTags, EventHandle);\n\t\t}\n\n\t\t// Unbind delegates\n\t\tFAnimMontageInstance* MontageInstance = AnimInstance->GetActiveInstanceForMontage(MontageToPlay);\n\t\tif (MontageInstance)\n\t\t{\n\t\t\tMontageInstance->OnMontageBlendingOutStarted.Unbind();\n\t\t\tMontageInstance->OnMontageEnded.Unbind();\n\t\t}\n\n\t\tAbility->OnGameplayAbilityCancelled.Remove(CancelledHandle);\n\n\t\t// Stop the montage\n\t\tif (AbilityEnded && bStopWhenAbilityEnds)\n\t\t{\n\t\t\tStopPlayingMontage();\n\t\t}\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 75.9669155001165}]}
{"instance_id": "5932070df16f", "generation_result": [{"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\treturn false;\n}", "CodeBleu_score": 3.758120540592659}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tFGameplayAbilityActorInfo* ActorInfo = Ability->GetCurrentActorInfo();\n\tUAnimInstance* AnimInstance = ActorInfo->GetAnimInstance();\n\n\tif (AbilitySystemComponent && AbilitySystemComponent->GetAnimatingAbility() == Ability\n\t\t&& AbilitySystemComponent->GetCurrentMontage() == MontageToPlay)\n\t{\n\t\tFAnimMontageInstance* MontageInstance = AnimInstance->GetActiveInstanceForMontage(MontageToPlay);\n\t\tif (MontageInstance)\n\t\t{\n\t\t\tMontageInstance->OnMontageBlendingOutStarted.Unbind();\n\t\t\tMontageInstance->OnMontageEnded.Unbind();\n\n\t\t\tAbilitySystemComponent->CurrentMontageStop();\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 68.38653479024862}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t    UE_LOG(LogTemp, Warning, TEXT(\"UGDAbilityTask_PlayMontageAndWaitForEvent::StopPlayingMontage()\"));\n    FGameplayAbilityActorInfo* ActorInfo = Ability->GetCurrentActorInfo();\n    UAnimInstance* AnimInstance = ActorInfo->GetAnimInstance();\n\n    if (!ActorInfo || !AnimInstance) {\n        return false;\n    }\n\n    if (AbilitySystemComponent.IsValid() && AbilitySystemComponent->GetAnimatingAbility() == Ability\n        && AbilitySystemComponent->GetCurrentMontage() == MontageToPlay) {\n        FAnimMontageInstance* MontageInstance = AnimInstance->GetActiveInstanceForMontage(MontageToPlay);\n        if (MontageInstance) {\n            MontageInstance->OnMontageBlendingOutStarted.Unbind();\n            MontageInstance->OnMontageEnded.Unbind();\n\n            AbilitySystemComponent->CurrentMontageStop();\n            return true;\n        }\n    }\n\n    return false;\n}", "CodeBleu_score": 76.28196947592451}]}
{"instance_id": "7049be7f0c75", "generation_result": [{"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\tUBlackboardComponent* BlackboardComp = OwnerComp.GetBlackboardComponent();\n\tif (ensure(BlackboardComp)) {\n\t\tAActor* TargetActor = Cast<AActor>(BlackboardComp->GetValueAsObject(TargetActorKey.SelectedKeyName));\n\t\tif (TargetActor) {\n\t\t\tAAIController* AIController = OwnerComp.GetAIOwner();\n\t\t\tAPawn* AIPawn = AIController->GetPawn();\n\t\t\tif (ensure(AIPawn)) {\n\t\t\t\tfloat DistanceTo = FVector::Distance(TargetActor->GetActorLocation(), AIPawn->GetActorLocation());\n\n\t\t\t\tbool bWithinRange = DistanceTo <= MaxAttackRange;\n\t\t\t\tbool bHasLineOfSight = false;\n\t\t\t\tif (bWithinRange) {\n\t\t\t\t\tbHasLineOfSight = AIController->LineOfSightTo(TargetActor);\n\t\t\t\t}\n\n\t\t\t\tbool bIsTargetValid = bWithinRange && bHasLineOfSight;\n\t\t\t\tBlackboardComp->SetValueAsBool(AttackRangeKey.SelectedKeyName, bIsTargetValid);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 69.20201871438826}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\tUBlackboardComponent* Blackboard = OwnerComp.GetBlackboardComponent();\n\n\tif (!Blackboard) return;\n\n\tAActor* TargetActor = Cast<AActor>(Blackboard->GetValueAsObject(TargetActorKey.SelectedKeyName));\n\n\tif (!TargetActor) {\n\t\tBlackboard->SetValueAsBool(AttackRangeKey.SelectedKeyName, false);\n\t\treturn;\n\t}\n\n\tAAIController* AIController = OwnerComp.GetAIOwner();\n\n\tif (!AIController) return;\n\n\tAPawn* AIPawn = AIController->GetPawn();\n\n\tif (!AIPawn) return;\n\n\tfloat Distance = FVector::Distance(TargetActor->GetActorLocation(), AIPawn->GetActorLocation());\n\n\tbool bWithinRange = Distance <= MaxAttackRange;\n\n\tbool bHasLOS = false;\n\n\tif (bWithinRange) {\n\t\tbHasLOS = AIController->LineOfSightTo(TargetActor);\n\t}\n\n\tBlackboard->SetValueAsBool(AttackRangeKey.SelectedKeyName, bWithinRange && bHasLOS);\n}", "CodeBleu_score": 68.80829763345045}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\t// Get the target actor from the blackboard\n\tAActor* TargetActor = Cast<AActor>(OwnerComp.GetBlackboardComponent()->GetValueAsObject(TargetActorKey.SelectedKeyName));\n\tif (TargetActor == nullptr) {\n\t\treturn;\n\t}\n\n\t// Get the AI pawn and calculate the distance to the target\n\tAAIController* AIController = OwnerComp.GetAIOwner();\n\tAPawn* AIPawn = AIController->GetPawn();\n\tfloat DistanceToTarget = FVector::Distance(TargetActor->GetActorLocation(), AIPawn->GetActorLocation());\n\n\t// Check if the target is within the maximum attack range\n\tbool bWithinRange = DistanceToTarget <= MaxAttackRange;\n\n\t// If the target is within range, check for line of sight to the target\n\tbool bHasLineOfSight = false;\n\tif (bWithinRange) {\n\t\tbHasLineOfSight = AIController->LineOfSightTo(TargetActor);\n\t}\n\n\t// Store the result in the blackboard\n\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(IsWithinAttackRangeKey.SelectedKeyName, bWithinRange);\n\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(HasLineOfSightKey.SelectedKeyName, bHasLineOfSight);\n}", "CodeBleu_score": 59.7278953151345}]}
{"instance_id": "031bd0ec3e3c", "generation_result": [{"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tAPawn* MyPawn = Cast<APawn>(OwnerComp.GetAIOwner()->GetPawn());\n\tif (MyPawn == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\n\tUSAttributeComponent* AttributeComp = Cast<USAttributeComponent>(MyPawn->GetComponentByClass(USAttributeComponent::StaticClass()));\n\tif (AttributeComp == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\n\tAttributeComp->ApplyHealthChange(this, AttributeComp->GetHealthMax());\n\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 54.79266767544577}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t    Super::ExecuteTask(OwnerComp, NodeMemory);\n\n    // Get the AI pawn and its attribute component\n    AAIController* AIController = OwnerComp.GetAIOwner();\n    APawn* AIPawn = AIController->GetPawn();\n    USAttributeComponent* AttributeComp = USAttributeComponent::GetAttributes(AIPawn);\n\n    // Apply a health change to restore the pawn's health to maximum\n    if (ensure(AttributeComp)) {\n        AttributeComp->ApplyHealthChange(this, AIPawn, AttributeComp->GetHealthMax());\n    }\n\n    return EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 62.42278858558792}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tAPawn* MyPawn = Cast<APawn>(OwnerComp.GetAIOwner()->GetPawn());\n\tif (MyPawn == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\n\tUSAttributeComponent* AttributeComp = USAttributeComponent::GetAttributes(MyPawn);\n\tif (ensure(AttributeComp)) {\n\t\tAttributeComp->ApplyHealthChange(this, AttributeComp->GetHealthMax());\n\t}\n\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 78.98361467337867}]}
{"instance_id": "6cd6e778e91b", "generation_result": [{"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tUSTickablesSubsystem* TickablesSubsystem = GetWorld()->GetSubsystem<USTickablesSubsystem>();\n\tcheck(TickablesSubsystem);\n\tTickablesSubsystem->RegisterTickable(this);\n}", "CodeBleu_score": 64.01099750567546}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tUSTickablesSubsystem::Get(GetWorld())->RegisterTickable(this);\n}", "CodeBleu_score": 31.939693463320403}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tUSTickablesSubsystem* TickablesSubsystem = GetWorld()->GetSubsystem<USTickablesSubsystem>();\n\tif (TickablesSubsystem) {\n\t\tTickablesSubsystem->RegisterTickable(this);\n\t}\n}", "CodeBleu_score": 63.74350737901756}]}
{"instance_id": "e90ff27c7f16", "generation_result": [{"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\tUSTickablesSubsystem* Tickables = GetWorld()->GetSubsystem<USTickablesSubsystem>();\n\tTickables->DeregisterComponent(&PrimaryComponentTick);\n}", "CodeBleu_score": 90.87129679325732}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\tUSTickablesSubsystem* Tickables = GetWorld()->GetSubsystem<USTickablesSubsystem>();\n\tTickables->DeregisterComponent(&PrimaryComponentTick);\n}", "CodeBleu_score": 90.87129679325732}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\tUSTickablesSubsystem* Tickables = GetWorld()->GetSubsystem<USTickablesSubsystem>();\n\tTickables->DeregisterComponent(&PrimaryComponentTick);\n}", "CodeBleu_score": 90.87129679325732}]}
{"instance_id": "be3e542c07ea", "generation_result": [{"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tif (bManageSignificance) {\n\t\tbHasImplementedInterface = GetOwner()->GetClass()->ImplementsInterface(USSignificanceInterface::StaticClass());\n\t\tif (bHasImplementedInterface) {\n\t\t\tRegisterWithManager();\n\t\t}\n\t}\n\n\tif (bManageOwnerParticleSignificance) {\n\t\tTArray<UParticleSystemComponent*> ParticleSystems;\n\t\tGetOwner()->GetComponents<UParticleSystemComponent>(ParticleSystems);\n\t\tfor (UParticleSystemComponent* ParticleSystem : ParticleSystems) {\n\t\t\tParticleSystem->SetSignificanceManager(this);\n\t\t}\n\t}\n\n\tif (bWaitOneFrame) {\n\t\tFTimerHandle TimerHandle;\n\t\tGetOwner()->GetWorld()->GetTimerManager().SetTimerForNextTick(FTimerDelegate::CreateUObject(this, &USSignificanceComponent::RegisterWithManager));\n\t}\n}", "CodeBleu_score": 65.93709569428931}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\t\n\tif (bManageSignificance) {\n\t\tbHasImplementedInterface = GetOwner()->GetClass()->ImplementsInterface(USSignificanceInterface::StaticClass());\n\t\tif (bHasImplementedInterface) {\n\t\t\tISignificanceInterface::Execute_OnSignificanceChanged(GetOwner(), ESignificanceValue::Invalid);\n\t\t}\n\t}\n\n\tif (bWaitOneFrame) {\n\t\tGetOwner()->GetWorld()->GetTimerManager().SetTimerForNextTick(this, &USSignificanceComponent::RegisterWithSignificanceManager);\n\t}\n\telse {\n\t\tRegisterWithSignificanceManager();\n\t}\n\n\tif (bManageOwnerParticleSignificance) {\n\t\tTArray<UParticleSystemComponent*> particleComponents;\n\t\tGetOwner()->GetComponents<UParticleSystemComponent>(particleComponents);\n\n\t\tfor (UParticleSystemComponent* particleSystem : particleComponents) {\n\t\t\tparticleSystem->SetSignificanceManager(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 65.2062861558868}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tif (bManageSignificance) {\n\t\tbHasImplementedInterface = GetOwner()->GetClass()->ImplementsInterface(USSignificanceInterface::StaticClass());\n\t\tif (bHasImplementedInterface) {\n\t\t\tUSignificanceManager::Get().RegisterSignificanceComponent(this);\n\t\t}\n\t}\n\n\tif (bManageOwnerParticleSignificance) {\n\t\tTArray<UParticleSystemComponent*> ParticleSystemComponents;\n\t\tGetOwner()->GetComponents<UParticleSystemComponent>(ParticleSystemComponents);\n\t\tfor (auto& ParticleSystem : ParticleSystemComponents) {\n\t\t\tParticleSystem->SetSignificanceManager(&SignificanceManager);\n\t\t}\n\t}\n\n\tif (bWaitOneFrame) {\n\t\tGetWorld()->GetTimerManager().SetTimerForNextTick(this, &USSignificanceComponent::RegisterSignificanceComponent);\n\t} else {\n\t\tRegisterSignificanceComponent();\n\t}\n}", "CodeBleu_score": 69.37162016881965}]}
{"instance_id": "77824b6415d0", "generation_result": [{"code": "void USSignificanceComponent::RegisterWithManager(){\n\t    if (bManageSignificance) {\n        bHasImplementedInterface = GetOwner()->Implements<USSignificanceInterface>();\n\n        // Optionally wait one frame\n        if (bWaitOneFrame) {\n            GetWorld()->GetTimerManager().SetTimerForNextTick(this, &USSignificanceComponent::RegisterWithManager);\n        } else {\n            RegisterWithManager();\n        }\n\n        // Manage particle components\n        if (bManageOwnerParticleSignificance) {\n            // Cascade (deprecated)\n            TArray<UParticleSystemComponent*> CascadeParticles;\n            GetOwner()->GetComponents<UParticleSystemComponent>(CascadeParticles);\n\n            for (UParticleSystemComponent* Comp : CascadeParticles) {\n                Comp->SetManagingSignificance(true);\n            }\n        }\n    }\n}", "CodeBleu_score": 25.915285216234725}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\tUSignificanceManager* Manager = GetWorld()->GetSignificanceManager();\n\tif (Manager) {\n\t\tFOnCalculateSignificance OnCalculateSignificance;\n\t\tOnCalculateSignificance.BindUObject(this, &USSignificanceComponent::CalculateSignificance);\n\n\t\tFOnSignificanceUpdated OnSignificanceUpdated;\n\t\tOnSignificanceUpdated.BindUObject(this, &USSignificanceComponent::OnSignificanceUpdated);\n\n\t\tManager->RegisterSignificanceComponent(GetOwner(), GetOwner()->GetClass()->GetFName(), OnCalculateSignificance, OnSignificanceUpdated);\n\t}\n}", "CodeBleu_score": 30.345021574813757}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\tUSignificanceManager* SignificanceManager = USignificanceManager::Get(GetWorld());\n\n\tif (!SignificanceManager) {\n\t\tUE_LOG(LogSigMan, Error, TEXT(\"Failed to register %s: SignificanceManager is null.\"), *GetName());\n\t\treturn;\n\t}\n\n\tFOnCalculateSignificance OnCalculateSignificance;\n\tFOnSignificanceUpdated OnSignificanceUpdated;\n\n\tOnCalculateSignificance.BindUObject(this, &USSignificanceComponent::CalculateSignificance);\n\tOnSignificanceUpdated.BindUObject(this, &USSignificanceComponent::OnSignificanceUpdated);\n\n\tFString Tag = GetOwner()->GetClass()->GetName();\n\tSignificanceManager->RegisterSignificanceComponent(Tag, OnCalculateSignificance, OnSignificanceUpdated);\n}", "CodeBleu_score": 36.448841255312956}]}
{"instance_id": "dca342410d64", "generation_result": [{"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t    if (!Actor) {\n        return false;\n    }\n\n    if (Actor->GetClass()->ImplementsInterface(USActorPoolingInterface::StaticClass())) {\n        if (auto* PoolingSubsystem = Actor->GetWorld()->GetSubsystem<USActorPoolingSubsystem>()) {\n            return PoolingSubsystem->ReleaseActorToPool(Actor);\n        }\n    }\n\n    Actor->Destroy();\n    return false;\n}", "CodeBleu_score": 61.96380356258414}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tif (!Actor) {\n\t\treturn false;\n\t}\n\n\tUSActorPoolingInterface* PoolingInterface = Cast<USActorPoolingInterface>(Actor);\n\tif (!PoolingInterface) {\n\t\tActor->Destroy();\n\t\treturn false;\n\t}\n\n\tUWorld* World = Actor->GetWorld();\n\tif (!World) {\n\t\tActor->Destroy();\n\t\treturn false;\n\t}\n\n\tUSActorPoolingSubsystem* PoolingSubsystem = World->GetSubsystem<USActorPoolingSubsystem>();\n\tif (!PoolingSubsystem) {\n\t\tActor->Destroy();\n\t\treturn false;\n\t}\n\n\treturn PoolingSubsystem->ReleaseToPool_Internal(Actor);\n}", "CodeBleu_score": 59.67170787578313}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tif (!Actor) {\n\t\treturn false;\n\t}\n\n\tif (Actor->GetClass()->ImplementsInterface(USActorPoolingInterface::StaticClass())) {\n\t\tauto* PoolingSubsystem = Actor->GetWorld()->GetSubsystem<USActorPoolingSubsystem>();\n\t\tif (PoolingSubsystem) {\n\t\t\treturn PoolingSubsystem->ReleaseToPool_Internal(Actor);\n\t\t}\n\t}\n\n\tActor->Destroy();\n\treturn false;\n}", "CodeBleu_score": 66.12034899961515}]}
{"instance_id": "5c285130f782", "generation_result": [{"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t    SCOPED_NAMED_EVENT(PrimeActorPool, FColor::Red);\n    UE_LOG(LogActorPooling, Log, TEXT(\"Priming actor pool for %s (%d)\"), *ActorClass->GetName(), Amount);\n\n    for (int32 i = 0; i < Amount; ++i) {\n        AActor* Actor = GetWorld()->SpawnActor<AActor>(ActorClass);\n        ReleaseToPool_Internal(Actor);\n    }\n}", "CodeBleu_score": 55.60201894905107}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tSCOPED_NAMED_EVENT_FORMAT(PrimeActorPool, FColor::Red, TEXT(\"PrimeActorPool: %s\"), *ActorClass->GetName());\n\tUE_LOG(LogActorPooling, Log, TEXT(\"Started pooling %d %s actors\"), Amount, *ActorClass->GetName());\n\n\tFActorSpawnParameters SpawnParams;\n\n\tSpawnParams.SpawnCollisionHandlingOverride = ESpawnActorCollisionHandlingMethod::AlwaysSpawn;\n\n\n\tfor (int32 i = 0; i < Amount; i++) {\n\t\tAActor* SpawnedActor = GetWorld()->SpawnActor<AActor>(ActorClass, SpawnParams);\n\t\tReleaseToPool_Internal(SpawnedActor);\n\t}\n}", "CodeBleu_score": 60.91845576738392}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\t// Log the start of the pooling process\n\tUE_LOG(LogActorPooling, Log, TEXT(\"Starting pooling of %s actors\"), *ActorClass->GetName());\n\n\t// Create a scoped event for profiling\n\tSCOPED_NAMED_EVENT(PoolingActors, FColor::Red);\n\n\t// Spawn the specified number of actors using the provided actor class and default spawn parameters\n\tfor (int32 i = 0; i < Amount; i++) {\n\t\tAActor* Actor = GetWorld()->SpawnActor<AActor>(ActorClass);\n\t\tif (Actor) {\n\t\t\t// Release the actor to the pool\n\t\t\tReleaseToPool_Internal(Actor);\n\t\t}\n\t}\n}", "CodeBleu_score": 46.633004129651376}]}
{"instance_id": "43c013653d6d", "generation_result": [{"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t    // Create and initialize loading screen attributes\n    FLoadingScreenAttributes LoadingScreen;\n    LoadingScreen.bAutoCompleteWhenLoadingCompletes = false;\n    LoadingScreen.bMoviesAreSkippable = true;\n    LoadingScreen.bWaitForManualStop = false;\n    LoadingScreen.bAllowEngineTick = true;\n    LoadingScreen.MoviePaths.Add(TEXT(\"/Game/UI/Movies/LoadingScreen.LoadingScreen\"));\n\n    // Load the loading screen widget\n    LoadingScreen.WidgetLoadingScreen = FLoadingScreenAttributes::NewTestLoadingScreenWidget();\n\n    // Set the loading screen\n    GetMoviePlayer()->SetupLoadingScreen(LoadingScreen);\n}", "CodeBleu_score": 73.6884724269562}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t    FLoadingScreenAttributes LoadingScreen;\n    LoadingScreen.bAutoCompleteWhenLoadingCompletes = false;\n    LoadingScreen.bWaitForManualStop = true;\n    LoadingScreen.bMoviesAreSkippable = true;\n    LoadingScreen.bAllowEngineTick = true;\n    LoadingScreen.MinimumLoadingScreenDisplayTime = 5.0f;\n    LoadingScreen.WidgetLoadingScreen = FLoadingScreenAttributes::NewTestLoadingScreenWidget();\n\n    GetMoviePlayer()->SetupLoadingScreen(LoadingScreen);\n}", "CodeBleu_score": 74.30336980946957}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t    // Create and initialize loading screen attributes\n    FLoadingScreenAttributes LoadingScreen;\n    LoadingScreen.bAutoCompleteWhenLoadingCompletes = false;\n    LoadingScreen.bMoviesAreSkippable = true;\n    LoadingScreen.bWaitForManualStop = false;\n    LoadingScreen.bAllowEngineTick = true;\n    LoadingScreen.MinimumLoadingScreenDisplayTime = 5.0f;\n    LoadingScreen.WidgetLoadingScreen = FLoadingScreenAttributes::NewTestLoadingScreenWidget();\n\n    // Load the specified map with the loading screen\n    GetMoviePlayer()->SetupLoadingScreen(LoadingScreen);\n}", "CodeBleu_score": 74.31728100983226}]}
{"instance_id": "a6979eb925a5", "generation_result": [{"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tUE_LOG(LogTemp, Log, TEXT(\"Running: %s\"), *GetNameSafe(this));\n\tUSActionComponent* Comp = GetOwningComponent();\n\tif (Comp) {\n\t\tComp->ActiveGameplayTags.AppendTags(GrantedTags);\n\t\tRepData.bIsRunning = true;\n\t\tRepData.StartTime = GetWorld()->TimeSeconds;\n\t\tGetOwningComponent()->OnActionStarted.Broadcast(this);\n\t}\n\n\tif (GetOwningComponent()->GetOwnerRole() == ROLE_Authority) {\n\t\tTimeStarted = GetWorld()->TimeSeconds;\n\t}\n\n\tGetOwningComponent()->ActionStarted(this);\n}", "CodeBleu_score": 68.90868933734284}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tUE_LOG(LogTemp, Log, TEXT(\"Started: %s\"), *GetNameSafe(this));\n\n\tUSActionComponent* Comp = GetOwningComponent();\n\tif (Comp) {\n\t\tComp->ActiveGameplayTags.AppendTags(GrantedTags);\n\t\tComp->GetOwner()->SetReplicates(true);\n\t\tRepData.bIsRunning = true;\n\t\tRepData.Instigator = Instigator;\n\t\tRepData.StartedTime = GetWorld()->GetTimeSeconds();\n\n\t\tif (GetOwningComponent()->GetOwnerRole() == ROLE_Authority) {\n\t\t\tTimeStarted = GetWorld()->GetTimeSeconds();\n\t\t}\n\n\t\tGetOwningComponent()->OnActionStarted.Broadcast(GetOwningComponent(), this);\n\t}\n}", "CodeBleu_score": 75.29029911050714}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tUE_LOG(LogTemp, Log, TEXT(\"Running: %s\"), *GetNameSafe(this));\n\n\tUSActionComponent* Comp = GetOwningComponent();\n\tif (Comp) {\n\t\tComp->ActiveGameplayTags.AppendTags(GrantedTags);\n\t\tRepData.Started = true;\n\t\tRepData.TimeStarted = GetWorld()->GetTimeSeconds();\n\t}\n\n\tif (GetOwningComponent()->GetOwnerRole() == ROLE_Authority) {\n\t\tTimeStarted = GetWorld()->GetTimeSeconds();\n\t}\n\n\tGetOwningComponent()->OnActionStarted.Broadcast(GetOwningComponent(), this);\n}", "CodeBleu_score": 67.89407741673385}]}
{"instance_id": "bdec7bf3e2d7", "generation_result": [{"code": "float USActionEffect::GetTimeRemaining() const{\n\t\treturn Duration > 0.0f ? FMath::Max(0.0f, GetWorld()->GetTimeSeconds() - StartTime) : Duration;\n}", "CodeBleu_score": 21.987483830371403}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tif (GetWorld()->GetAuthGameMode() == nullptr) {\n\t\treturn Duration;\n\t}\n\n\tconst float ServerWorldTime = GetWorld()->GetAuthGameMode()->GetServerWorldTimeSeconds();\n\tconst float EndTime = GetWorld()->GetTimeSeconds() + Duration;\n\n\tif (ServerWorldTime >= EndTime) {\n\t\treturn 0.0f;\n\t}\n\n\treturn EndTime - ServerWorldTime;\n}", "CodeBleu_score": 47.063712695892654}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t\t// Check if the game state is available\n\tif (UGameStateBase* GS = GetWorld()->GetGameState()) {\n\t\t// Get the current server time\n\t\tfloat ServerWorldTime = GS->GetServerWorldTimeSeconds();\n\t\t// Calculate the time remaining by subtracting the server time from the start time\n\t\tfloat TimeRemaining = TimeStarted + Duration - ServerWorldTime;\n\t\t// Return the time remaining, or the full duration if it is negative\n\t\treturn FMath::Max(TimeRemaining, 0.0f);\n\t}\n\t// If the game state is not available, return the full duration\n\treturn Duration;\n}", "CodeBleu_score": 56.92672054507304}]}
{"instance_id": "db3a7508643b", "generation_result": [{"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (InFocus == nullptr) {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 5.0f, FColor::Red, TEXT(\"Focus Actor is nullptr\"));\n\t\treturn;\n\t}\n\n\tAPawn* MyPawn = Cast<APawn>(GetOwner());\n\tif (MyPawn == nullptr) {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 5.0f, FColor::Red, TEXT(\"Owner is not a pawn\"));\n\t\treturn;\n\t}\n\n\tISGameplayInterface::Execute_Interact(InFocus, MyPawn);\n}", "CodeBleu_score": 69.87940200431538}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t    if (InFocus == nullptr) {\n        GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Red, TEXT(\"Focus Actor is null\"));\n        return;\n    }\n\n    APawn* OwningPawn = Cast<APawn>(GetOwner());\n    if (OwningPawn == nullptr) {\n        GEngine->AddOnScreenDebugMessage(-1, 2.0f, FColor::Red, TEXT(\"Owning Pawn is null\"));\n        return;\n    }\n\n    IInteractable::Execute_Interact(InFocus, OwningPawn);\n}", "CodeBleu_score": 64.55082620444065}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (InFocus == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"Focus Actor is nullptr in ServerInteract.\"));\n\t\treturn;\n\t}\n\tAPawn* MyPawn = Cast<APawn>(GetOwner());\n\tif (MyPawn == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"Owner is not a pawn in ServerInteract.\"));\n\t\treturn;\n\t}\n\tISGameplayInterface::Execute_Interact(InFocus, MyPawn);\n}", "CodeBleu_score": 65.9066448794561}]}
{"instance_id": "e6a5224079e6", "generation_result": [{"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t    return false;\n}", "CodeBleu_score": 12.57845491469045}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t    return false;\n}", "CodeBleu_score": 12.57845491469045}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\treturn false;\n}", "CodeBleu_score": 12.574816984288956}]}
{"instance_id": "084a7501fc08", "generation_result": [{"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\t// Avoid user-error of adding a subtracting negative amount\n\tif (!ensure(NewTime >= 0.0f)) {\n\t\treturn false;\n\t}\n\n\tif (NewTime > PersonalRecord) {\n\t\t// New personal record\n\t\tPersonalRecord = NewTime;\n\n\t\tOnPersonalRecordChanged.Broadcast(this, PersonalRecord);\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 53.90682839901736}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\t// Avoid user-error of adding a subtracting negative amount\n\tif (!ensure(NewTime >= 0.0f)) {\n\t\treturn false;\n\t}\n\n\tif (NewTime > PersonalRecord) {\n\t\t// Not enough credits available\n\t\tPersonalRecord = NewTime;\n\t\tOnPersonalRecordChanged.Broadcast(this, PersonalRecord);\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 53.90682839901736}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\t// Avoid user-error of adding a negative amount\n\tif (!ensure(NewTime >= 0.0f)) {\n\t\treturn false;\n\t}\n\n\tif (NewTime > PersonalRecord) {\n\t\t// Update the record\n\t\tPersonalRecord = NewTime;\n\n\t\t// Broadcast the change\n\t\tOnPersonalRecordChanged.Broadcast(this, PersonalRecord);\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 53.90682839901736}]}
{"instance_id": "8e0ccc856566", "generation_result": [{"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t    if (ensure(InstigatorPawn)) {\n        USAttributeComponent* AttributeComp = Cast<USAttributeComponent>(InstigatorPawn->GetComponentByClass(USAttributeComponent::StaticClass()));\n        if (ensure(AttributeComp) && !AttributeComp->IsFullHealth()) {\n            if (ASPlayerState* PS = InstigatorPawn->GetPlayerState<ASPlayerState>()) {\n                if (PS->RemoveCredits(CreditCost) && AttributeComp->ApplyHealthChange(this, AttributeComp->GetHealthMax())) {\n                    HideAndCoolDownPowerup();\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 80.0723045266497}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (!ensure(InstigatorPawn)) {\n\t\treturn;\n\t}\n\n\tUSAttributeComponent* AttributeComp = USAttributeComponent::GetAttributes(InstigatorPawn);\n\tif (ensure(AttributeComp) && !AttributeComp->IsFullHealth()) {\n\t\tif (ASPlayerState* PS = InstigatorPawn->GetPlayerState<ASPlayerState>()) {\n\t\t\tif (PS->RemoveCredits(CreditCost) && AttributeComp->ApplyHealthChange(this, AttributeComp->GetHealthMax())) {\n\t\t\t\tHideAndCooldownPowerup();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 97.07502623706486}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (ensure(InstigatorPawn)) {\n\t\tUSAttributeComponent* AttributeComp = USAttributeComponent::GetAttributes(InstigatorPawn);\n\t\tif (ensure(AttributeComp) && !AttributeComp->IsFullHealth()) {\n\t\t\tif (ASPlayerState* PS = InstigatorPawn->GetPlayerState<ASPlayerState>()) {\n\t\t\t\tif (PS->RemoveCredits(CreditCost) && AttributeComp->ApplyHealthChange(this, AttributeComp->GetHealthMax())) {\n\t\t\t\t\tHideAndCooldownPowerup();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 89.24275781796148}]}
{"instance_id": "39a680859a89", "generation_result": [{"code": "void ASProjectileBase::Explode_Implementation(){\n\t\tNiagaraLoopComp->Deactivate();\n\tAudioComp->Stop();\n\tUSActorPoolingSubsystem::ReleaseToPool(this);\n}", "CodeBleu_score": 9.830658268338283}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t\t// Spawn impact effect\n\tUGameplayStatics::SpawnEmitterAtLocation(this, ImpactVFX, GetActorLocation());\n\n\t// Play impact sound\n\tUGameplayStatics::PlaySoundAtLocation(this, ImpactSound, GetActorLocation());\n\n\t// Trigger camera shake\n\tAPawn* InstigatorPawn = GetInstigator();\n\tif (InstigatorPawn) {\n\t\tAPlayerController* InstigatorController = InstigatorPawn->GetController<APlayerController>();\n\t\tif (InstigatorController) {\n\t\t\tInstigatorController->ClientPlayCameraShake(ImpactShake);\n\t\t}\n\t}\n\n\t// Release projectile back to pool\n\tUSActorPoolingSubsystem::ReleaseToPool(this);\n}", "CodeBleu_score": 52.62029902956622}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t\tUSActorPoolingSubsystem* PoolingSubsystem = GetWorld()->GetSubsystem<USActorPoolingSubsystem>();\n\tif (!ensure(PoolingSubsystem)) {\n\t\treturn;\n\t}\n\n\t// Spawn impact effect at projectile's location\n\tUGameplayStatics::SpawnEmitterAtLocation(this, ImpactVFX, GetActorLocation());\n\n\t// Play impact sound\n\tUGameplayStatics::PlaySoundAtLocation(this, ImpactSound, GetActorLocation());\n\n\t// Trigger camera shake\n\tAPawn* InstigatorPawn = Cast<APawn>(GetInstigator());\n\tif (InstigatorPawn) {\n\t\tAPlayerController* InstigatorController = InstigatorPawn->GetController<APlayerController>();\n\t\tif (InstigatorController) {\n\t\t\tInstigatorController->ClientPlayCameraShake(ImpactShake);\n\t\t}\n\t}\n\n\t// Release projectile back to actor pool\n\tPoolingSubsystem->ReleaseToPool(this);\n}", "CodeBleu_score": 64.37193577221906}]}
{"instance_id": "a95c41c6d7b5", "generation_result": [{"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t}", "CodeBleu_score": 2.393394606457801}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t    return nullptr;\n}", "CodeBleu_score": 5.682091990020235}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t}", "CodeBleu_score": 2.393394606457801}]}
{"instance_id": "58a03c087c47", "generation_result": [{"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t    if (USSaveGame* CurrentSaveGame = GetCurrentSaveGame()) {\n        if (USPlayerState* PlayerState = Cast<USPlayerState>(NewPlayer->PlayerState)) {\n            if (USPlayerState* LoadedPlayerState = CurrentSaveGame->GetPlayerState(PlayerState->GetPlayerName())) {\n                PlayerState->CopyPropertiesForNetDelta(LoadedPlayerState);\n                PlayerState->Reset();\n            }\n        }\n    }\n}", "CodeBleu_score": 40.943167143628486}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t    if (USSaveGame* SG = LoadGame()) {\n        if (APlayerState* PS = NewPlayer->GetPlayerState<APlayerState>()) {\n            if (SG->PlayerStates.Contains(PS)) {\n                PS->CreditBalance = SG->PlayerStates[PS].CreditBalance;\n            }\n        }\n    }\n}", "CodeBleu_score": 50.285158996067246}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t    if (USSaveGame* SaveGame = GetSaveGame()) {\n        if (USPlayerState* PlayerState = NewPlayer->GetPlayerState<USPlayerState>()) {\n            if (SaveGame->PlayerStateClass) {\n                if (USPlayerState* LoadedPlayerState = Cast<USPlayerState>(UGameplayStatics::CreatePlayerState(this, SaveGame->PlayerStateClass, NewPlayer, ESpawnActorCollisionHandlingMethod::AlwaysSpawn))) {\n                    LoadedPlayerState->LoadPlayerState(SaveGame);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 48.554618214875504}]}
{"instance_id": "c5bd4c059b71", "generation_result": [{"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t", "CodeBleu_score": 0.989701945674575}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\t// Clear existing data\n\tCurrentSaveGame->Clear();\n\n\t// Get game state\n\tAGameStateBase* GS = GetWorld()->GetGameState();\n\tif (GS == nullptr) {\n\t\treturn;\n\t}\n\n\t// Save player data for each player in the game state\n\tfor (APlayerState* PS : GS->PlayerArray) {\n\t\tFPlayerSaveData* PlayerData = CurrentSaveGame->AddPlayerData(PS);\n\t\tif (PlayerData) {\n\t\t\tPlayerData->Location = PS->GetPawn()->GetActorLocation();\n\t\t\tPlayerData->Rotation = PS->GetPawn()->GetActorRotation();\n\t\t}\n\t}\n\n\t// Iterate through all actors in the world\n\tfor (TActorIterator<AActor> It(GetWorld()); It; ++It) {\n\t\tAActor* Actor = *It;\n\n\t\t// Check if the actor implements the SGameplayInterface\n\t\tISGameplayInterface* GameplayInterface = Cast<ISGameplayInterface>(Actor);\n\t\tif (GameplayInterface) {\n\t\t\t// Save actor data\n\t\t\tFSaveGameActorData* ActorData = CurrentSaveGame->AddActorData(Actor);\n\t\t\tif (ActorData) {\n\t\t\t\tActorData->ActorName = Actor->GetName();\n\t\t\t\tActorData->Transform = Actor->GetTransform();\n\t\t\t\tActorData->SerializedData = GameplayInterface->CaptureState();\n\t\t\t}\n\t\t}\n\t}\n\n\t// Write the save game to a slot\n\tUGameplayStatics::SaveGameToSlot(CurrentSaveGame, CurrentSlotName, 0);\n\n\t// Broadcast the save game is complete\n\tOnSaveGameWritten.Broadcast(CurrentSaveGame);\n}", "CodeBleu_score": 59.75171058653201}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\t// Clear existing data\n\tCurrentSaveGame->Clear();\n\n\t// Get the game state\n\tUGameStateBase* GameState = GetWorld()->GetGameState();\n\tif (GameState == nullptr) {\n\t\treturn;\n\t}\n\n\t// Save player data for each player in the game state\n\tfor (APlayerState* PS : GameState->PlayerArray) {\n\t\tCurrentSaveGame->AddPlayerData(PS);\n\t}\n\n\t// Iterate through all actors in the world\n\tfor (TActorIterator<AActor> It(GetWorld()); It; ++It) {\n\t\tAActor* Actor = *It;\n\t\t// Check if the actor implements the SGameplayInterface\n\t\tif (Actor->GetClass()->ImplementsInterface(USGameplayInterface::StaticClass())) {\n\t\t\t// Save the actor data\n\t\t\tCurrentSaveGame->AddActorData(Actor);\n\t\t}\n\t}\n\n\t// Write the save game to a slot\n\tUGameplayStatics::SaveGameToSlot(CurrentSaveGame, CurrentSlotName, 0);\n\n\t// Broadcast the save is complete event\n\tOnSaveGameWritten.Broadcast();\n}", "CodeBleu_score": 38.811889684676146}]}
{"instance_id": "0d7043a0bff0", "generation_result": [{"code": "void FrameworkConfig::draw_themes(){\n\t    m_theme->draw(\"Theme\");\n    ImGui::Separator();\n    m_font_size->draw(\"Font Size\");\n    if (m_font_size->value() != m_current_font_size) {\n        m_current_font_size = m_font_size->value();\n        ImGui::GetIO().FontGlobalScale = m_font_size->value() / 100.0f;\n    }\n}", "CodeBleu_score": 50.01630675548441}, {"code": "void FrameworkConfig::draw_themes(){\n\t    m_theme_selection->draw(\"Theme Selection\");\n    ImGui::SameLine();\n    m_font_size->draw(\"Font Size\");\n\n    if (m_font_size->changed()) {\n        ImGui::GetIO().FontGlobalScale = m_font_size->value();\n    }\n}", "CodeBleu_score": 53.3173167968593}, {"code": "void FrameworkConfig::draw_themes(){\n\t    // Draw the theme selection UI\n    m_theme->draw(\"Theme\");\n\n    // Check if the font size has been changed\n    if (m_font_size->draw(\"Font Size\")) {\n        // Update the font size in the framework\n        Framework::get_font_manager()->set_font_size(m_font_size->value());\n    }\n}", "CodeBleu_score": 67.76271826040218}]}
{"instance_id": "e7f81d1dee95", "generation_result": [{"code": "void FrameworkConfig::draw_main() {\n\t    ImGui::Text(\"Main\");\n    ImGui::Separator();\n\n    ImGui::Checkbox(\"Show Cursor\", &show_cursor);\n    ImGui::Checkbox(\"Remember Menu State\", &remember_menu_state);\n    ImGui::Checkbox(\"Enable L3 + R3 Toggle\", &enable_l3_r3_toggle);\n    ImGui::Checkbox(\"Always Show Cursor\", &always_show_cursor);\n\n    if (ImGui::SliderInt(\"Log Level\", &log_level, 0, 6)) {\n        if (log_level >= 0 && log_level <= 6) {\n            spdlog::set_level(static_cast<spdlog::level::level_enum>(log_level));\n        }\n    }\n\n    ImGui::Separator();\n}", "CodeBleu_score": 38.96873619360441}, {"code": "void FrameworkConfig::draw_main() {\n\t    ImGui::Text(\"Main\");\n    ImGui::Separator();\n\n    ImGui::Checkbox(\"Show cursor\", &show_cursor);\n    ImGui::Checkbox(\"Remember menu state\", &remember_menu_state);\n    ImGui::Checkbox(\"Enable L3 + R3 toggle\", &enable_l3_r3_toggle);\n    ImGui::Checkbox(\"Always show cursor\", &always_show_cursor);\n    ImGui::Checkbox(\"Enable log level\", &enable_log_level);\n\n    if (enable_log_level) {\n        ImGui::SliderInt(\"Log level\", &log_level, 0, 6);\n\n        if (log_level != spdlog::level::off && log_level != spdlog::level::trace && log_level != spdlog::level::debug && log_level != spdlog::level::info && log_level != spdlog::level::warn && log_level != spdlog::level::err && log_level != spdlog::level::critical && log_level != spdlog::level::off) {\n            spdlog::set_level(static_cast<spdlog::level::level_enum>(log_level));\n        }\n    }\n}", "CodeBleu_score": 48.61096637771765}, {"code": "void FrameworkConfig::draw_main() {\n\t    ImGui::PushID(1);\n    ImGui::Begin(\"Main\");\n    ImGui::Text(\"Menu Key:\");\n    ImGui::SameLine();\n    ImGui::InputKey(menu_key, ImGuiInputTextFlags_EnterReturnsTrue);\n    ImGui::Text(\"Show Cursor Key:\");\n    ImGui::SameLine();\n    ImGui::InputKey(show_cursor_key, ImGuiInputTextFlags_EnterReturnsTrue);\n    ImGui::Checkbox(\"Remember Menu State\", &remember_menu_state);\n    ImGui::Checkbox(\"Enable L3 + R3 Toggle\", &enable_l3_r3_toggle);\n    ImGui::Checkbox(\"Always Show Cursor\", &always_show_cursor);\n    ImGui::Text(\"Log Level:\");\n    ImGui::SameLine();\n    ImGui::InputInt(\"##Log Level\", &log_level);\n    if (log_level < 0) {\n        log_level = 0;\n    }\n    if (log_level > 6) {\n        log_level = 6;\n    }\n    if (ImGui::Button(\"Update\")) {\n        spdlog::set_level(static_cast<spdlog::level::level_enum>(log_level));\n    }\n    ImGui::End();\n    ImGui::PopID();\n}", "CodeBleu_score": 42.22899708512259}]}
{"instance_id": "83fa7f401579", "generation_result": [{"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t", "CodeBleu_score": 4.471675108827625}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\t// If the OSMFilePath is not empty, we'll use it as the file path.\n\t// Otherwise, we'll use the OSMFilePath as the text buffer.\n\tif( OSMFilePath.IsEmpty() ) {\n\t\tOSMFilePath = OSMFilePath;\n\t}\n\n\t// Create a new FFastXml parser and set the context.\n\tFFastXml Parser;\n\tParser.SetContext( FeedbackContext );\n\n\t// Parse the file or text buffer.\n\tif( !Parser.Parse( OSMFilePath, bIsFilePathActuallyTextBuffer ) ) {\n\t\treturn false;\n\t}\n\n\t// If the parsing was successful, calculate the average latitude and longitude.\n\tAverageLatitude = CalculateAverageLatitude();\n\tAverageLongitude = CalculateAverageLongitude();\n\n\treturn true;\n}", "CodeBleu_score": 25.91677731838193}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\n\t// Reset the OSMFile\n\tReset();\n\n\t// Create an instance of FFastXml\n\tFFastXml Xml;\n\n\t// Set the feedback context\n\tXml.SetFeedbackContext( FeedbackContext );\n\n\t// Load the OSM file\n\tbool bSuccess = Xml.LoadFile( OSMFilePath, bIsFilePathActuallyTextBuffer );\n\n\t// If loading failed, return false\n\tif( !bSuccess ) {\n\t\tUE_LOG( LogTemp, Error, TEXT( \"Failed to load OSM file: %s\" ), *OSMFilePath );\n\t\treturn false;\n\t}\n\n\t// Process the XML data\n\tProcessXmlData( Xml );\n\n\t// Calculate the average latitude and longitude\n\tCalculateAverageLatitudeLongitude();\n\n\t// Return true if parsing was successful\n\treturn true;\n}", "CodeBleu_score": 29.468294780679074}]}
{"instance_id": "7349d775edf6", "generation_result": [{"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t    Super::PostSpawnActor(Asset, NewActor);\n    if (UStreetMap* StreetMap = Cast<UStreetMap>(Asset)) {\n        if (AStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor)) {\n            if (UStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent()) {\n                StreetMapComponent->SetStreetMap(StreetMap);\n            }\n        }\n    }\n}", "CodeBleu_score": 68.96889743761237}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t    Super::PostSpawnActor(Asset, NewActor);\n    if (UStreetMap* StreetMap = Cast<UStreetMap>(Asset)) {\n        if (AStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor)) {\n            if (UStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent()) {\n                StreetMapComponent->SetStreetMapAsset(StreetMap);\n            }\n        }\n    }\n}", "CodeBleu_score": 68.94493820958641}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t    Super::PostSpawnActor(Asset, NewActor);\n    if (UStreetMap* StreetMap = Cast<UStreetMap>(Asset)) {\n        if (AStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor)) {\n            if (UStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent()) {\n                StreetMapComponent->SetStreetMapAsset(StreetMap);\n            }\n        }\n    }\n}", "CodeBleu_score": 68.94493820958641}]}
{"instance_id": "f160ac6d0353", "generation_result": [{"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tif (SelectedStreetMapComponent != nullptr) {\n\t\tSelectedStreetMapComponent->BuildMesh();\n\t\tRefreshDetailsView();\n\t}\n\n\treturn FReply::Handled();\n}", "CodeBleu_score": 83.07126666428589}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tTSharedPtr<FStreetMapComponent> SelectedStreetMapComponent = StreetMapComponentDetails.GetSelectedStreetMapComponent();\n\tif (SelectedStreetMapComponent != nullptr) {\n\t\tSelectedStreetMapComponent->BuildMesh();\n\t}\n\n\treturn FReply::Handled();\n}", "CodeBleu_score": 66.33102723709627}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\n\n\tTSharedPtr<FStreetMapComponent> SelectedStreetMapComponent = StreetMapComponentDetails.GetSelectedObject();\n\n\tif (SelectedStreetMapComponent != nullptr) {\n\n\t\tSelectedStreetMapComponent->BuildMesh();\n\n\t}\n\n\n\treturn FReply::Handled();\n}", "CodeBleu_score": 67.01240637845616}]}
{"instance_id": "b23f1f2b29fa", "generation_result": [{"code": "void FStreetMapImportingModule::StartupModule(){\n\t\tIAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n\tEAssetTypeCategories::Type StreetMapAssetCategory = AssetTools.RegisterAdvancedAssetCategory(FName(TEXT(\"StreetMap\")), FText::FromString(TEXT(\"StreetMap\")));\n\tStreetMapAssetTypeActions = MakeShareable(new FStreetMapAssetTypeActions(StreetMapAssetCategory));\n\tAssetTools.RegisterAssetTypeActions(StreetMapAssetTypeActions.ToSharedRef());\n\n\tFStreetMapStyle::Initialize();\n\tFStreetMapStyle::ReloadTextures();\n\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout(TEXT(\"StreetMapComponent\"), FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 64.36964341514472}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t\tIAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n\tStreetMapAssetTypeActions = MakeShareable(new FStreetMapAssetTypeActions());\n\tAssetTools.RegisterAssetTypeActions(StreetMapAssetTypeActions.ToSharedRef());\n\tFStreetMapStyle::Initialize();\n\tFStreetMapStyle::ReloadTextures();\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout(UStreetMapComponent::StaticClass()->GetFName(), FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 70.42408726743935}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t\tIAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n\tEAssetTypeCategories::Type StreetMapAssetCategory = AssetTools.RegisterAdvancedAssetCategory(FName(TEXT(\"StreetMap\")), FText::FromString(TEXT(\"StreetMap\")));\n\tStreetMapAssetTypeActions = MakeShareable(new FStreetMapAssetTypeActions(StreetMapAssetCategory));\n\tAssetTools.RegisterAssetTypeActions(StreetMapAssetTypeActions.ToSharedRef());\n\tFStreetMapStyle::Initialize();\n\tFStreetMapStyle::ReloadTextures();\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout(TEXT(\"StreetMapComponent\"), FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 64.36964341514472}]}
{"instance_id": "1da549fe84e3", "generation_result": [{"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\treturn new FStreetMapSceneProxy(this);\n}", "CodeBleu_score": 6.618638463876706}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\treturn new FStreetMapSceneProxy(this);\n}", "CodeBleu_score": 6.618638463876706}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\tif (StreetMap != nullptr) {\n\t\treturn new FStreetMapSceneProxy(this);\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 11.234858895305342}]}
{"instance_id": "d0ee3b2e023e", "generation_result": [{"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\tTArray<uint32> InputIDs;\n\tInputIDs.Add(TestAbility01.AbilityID);\n\tAbilities->NativeBindAbilityToInput(InputIDs, ServerHandle);\n}", "CodeBleu_score": 65.98864030396865}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\n\tTArray<FAFInputID> InputIDs;\n\tInputIDs.Add(FAFInputID::Create<FAFInputID_Ability01>());\n\tAbilities->NativeBindAbilityToInput(InputIDs, TestAbility01Handle);\n}", "CodeBleu_score": 57.37386627207681}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\tTArray<FAFInputID> InputIDs;\n\tInputIDs.Add(FAFInputID::Create(TestAbility01, 0));\n\tAbilities->NativeBindAbilityToInput(TestAbility01Handle, InputIDs);\n}", "CodeBleu_score": 57.343112727729284}]}
{"instance_id": "e62f1b2cd4bd", "generation_result": [{"code": "void AARCharacter::MoveForward(float Value){\n\t\t// find out which way is forward\n\tconst FRotator Rotation = Controller->GetControlRotation();\n\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t// get forward vector\n\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\tAddMovementInput(Direction, Value);\n}", "CodeBleu_score": 70.82772160089708}, {"code": "void AARCharacter::MoveForward(float Value){\n\t\tif ((Controller != NULL) && (Value != 0.0f)) {\n\t\t// find out which way is forward\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// get forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 98.03286112917785}, {"code": "void AARCharacter::MoveForward(float Value){\n\t\t// Find out which way is forward\n\tconst FRotator Rotation = Controller->GetControlRotation();\n\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t// Get forward vector\n\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\tAddMovementInput(Direction, Value);\n}", "CodeBleu_score": 70.82772160089708}]}
{"instance_id": "a77cdc67ee00", "generation_result": [{"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (!GetMainWeaponMesh()) {\n\t\treturn GetMesh()->GetSocketLocation(TEXT(\"headSocket\"));\n\t}\n\treturn GetMainWeaponMesh()->GetSocketLocation(Socket);\n}", "CodeBleu_score": 52.381451342359675}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tUSkeletalMeshComponent* Mesh = GetMesh();\n\tif (!Mesh) {\n\t\treturn GetActorLocation() + GetActorForwardVector() * 200.f;\n\t}\n\n\tUSkeletalMeshComponent* WeaponMesh = GetMainWeaponMesh();\n\tif (!WeaponMesh) {\n\t\treturn GetActorLocation() + GetActorForwardVector() * 200.f;\n\t}\n\n\tFVector Location = WeaponMesh->GetSocketLocation(Socket);\n\tif (Location == FVector::ZeroVector) {\n\t\tLocation = GetActorLocation() + GetActorForwardVector() * 200.f;\n\t}\n\n\treturn Location;\n}", "CodeBleu_score": 45.334171348422906}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (!GetMainWeaponMesh()) {\n\t\treturn GetMesh()->GetSocketLocation(FName(\"headSocket\"));\n\t}\n\n\treturn GetMainWeaponMesh()->GetSocketLocation(Socket);\n}", "CodeBleu_score": 51.121004002586744}]}
{"instance_id": "f021203f736a", "generation_result": [{"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tSpawnedEnemies.Remove(InEnemy);\n\tif (SpawnedEnemies.Num() < MinRespawn) {\n\t\tSetupSpawner();\n\t}\n}", "CodeBleu_score": 65.51318976441756}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tEnemies.Remove(InEnemy);\n\tif (Enemies.Num() < MinRespawn) {\n\t\tSetupSpawner();\n\t}\n}", "CodeBleu_score": 58.17660229827858}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tSpawnedEnemies.Remove(InEnemy);\n\tif (SpawnedEnemies.Num() < MinRespawn) {\n\t\tSetupSpawner();\n\t}\n}", "CodeBleu_score": 65.51318976441756}]}
{"instance_id": "dbab72cb539f", "generation_result": [{"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\tFString Result = Super::ApproveLogin(Options);\n\n\tTArray<FString> Tokens;\n\tOptions.ParseIntoArray(Tokens, TEXT(\";\"), true);\n\n\tFString PlayerId;\n\tfor (int32 i = 0; i < Tokens.Num(); i++) {\n\t\tFString Token = Tokens[i];\n\t\tFString Left, Right;\n\t\tif (Token.Split(TEXT(\"=\"), &Left, &Right, ESearchCase::IgnoreCase, ESearchDir::FromStart)) {\n\t\t\tif (Left == TEXT(\"PlayerId\")) {\n\t\t\t\tPlayerId = Right;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (PlayerId.IsEmpty()) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"PlayerId parameter not found in login options\"));\n\t\treturn Result;\n\t}\n\n\tAARGameInstance* GameInstance = Cast<AARGameInstance>(GetGameInstance());\n\tif (GameInstance) {\n\t\tGameInstance->SetPlayerId(PlayerId);\n\t}\n\n\treturn Result;\n}", "CodeBleu_score": 52.3425674830666}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t", "CodeBleu_score": 4.493996550900141}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t    FString Result = Super::ApproveLogin(Options);\n    TArray<FString> Tokens;\n    Options.ParseIntoArray(Tokens, TEXT(\";\"), true);\n    for (FString& Token : Tokens) {\n        FString Key;\n        FString Value;\n        if (Token.Split(TEXT(\"=\"), &Key, &Value)) {\n            if (Key == TEXT(\"PlayerId\")) {\n                PlayerId = FCString::Atoi(*Value);\n            }\n        }\n    }\n    return Result;\n}", "CodeBleu_score": 56.080207912635196}]}
{"instance_id": "85ea02df92a5", "generation_result": [{"code": "void UARRegisterView::OnRegisterClicked(){\n\t    FString username = UsernameInput->GetText().ToString();\n    FString displayName = DisplayNameInput->GetText().ToString();\n    FString password = PasswordInput->GetText().ToString();\n\n    if (username.IsEmpty()) {\n        DisplayWarningMessage(\"Username cannot be empty.\");\n        return;\n    }\n\n    if (displayName.IsEmpty()) {\n        DisplayWarningMessage(\"Display name cannot be empty.\");\n        return;\n    }\n\n    if (password.IsEmpty()) {\n        DisplayWarningMessage(\"Password cannot be empty.\");\n        return;\n    }\n\n    RegisterButton->SetVisibility(ESlateVisibility::Hidden);\n    GetGameInstance<UARGameInstance>()->RegisterNewPlayer(username, displayName, password);\n}", "CodeBleu_score": 49.08463494723681}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tFString username = UsernameInput->GetText().ToString();\n\tFString displayName = DisplayNameInput->GetText().ToString();\n\tFString password = PasswordInput->GetText().ToString();\n\n\tif (username.IsEmpty() || displayName.IsEmpty() || password.IsEmpty()) {\n\t\tWarningMessage->SetText(FText::FromString(TEXT(\"Please fill in all fields.\")));\n\t\treturn;\n\t}\n\n\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\n\tUARGameInstance* gameInstance = Cast<UARGameInstance>(GetGameInstance());\n\tif (gameInstance) {\n\t\tgameInstance->RegisterNewPlayer(username, displayName, password);\n\t}\n}", "CodeBleu_score": 47.77105323153462}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t    FString Username = UsernameInput->GetText().ToString();\n    FString DisplayName = DisplayNameInput->GetText().ToString();\n    FString Password = PasswordInput->GetText().ToString();\n\n    if (Username.IsEmpty() || DisplayName.IsEmpty() || Password.IsEmpty()) {\n        UE_LOG(LogTemp, Warning, TEXT(\"One or more fields are empty.\"));\n        return;\n    }\n\n    HideRegisterButton();\n\n    UARGameInstance* GameInstance = Cast<UARGameInstance>(GetGameInstance());\n    if (GameInstance) {\n        GameInstance->RegisterNewPlayer(Username, DisplayName, Password);\n    }\n}", "CodeBleu_score": 49.042269541372264}]}
{"instance_id": "b33bb5886dd9", "generation_result": [{"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\tif (EnemyHitResult.GetActor()) {\n\t\tAActor* Target = EnemyHitResult.GetActor();\n\t\tFVector ActorLocation = EnemyHitResult.GetActor()->GetActorLocation();\n\t\tFVector2D ScreeLoc;\n\n\t\tUGameplayStatics::ProjectWorldToScreen(ARPC, ActorLocation, ScreeLoc, false);\n\n\t\tFloatingCombatText->SetText(InMod.AttributeMod.ModValue);\n\t\tFloatingCombatText->SetPositionInViewport(ScreeLoc, true);\n\t}\n}", "CodeBleu_score": 47.56996920556132}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\tif (InMod.Target) {\n\t\tFVector Location = InMod.Target->GetActorLocation();\n\t\tFVector2D ScreenLocation;\n\t\tUGameplayStatics::ProjectWorldToScreen(ARPC, Location, ScreenLocation, false);\n\t\tFloatingCombatText->SetText(FText::FromString(FString::FromInt(InMod.FinalValue)));\n\t\tFloatingCombatText->SetPositionInViewport(ScreenLocation, true);\n\t}\n}", "CodeBleu_score": 36.895967619863846}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\tif (InMod.Target.IsValid() && InMod.Target->GetWorld() == GetWorld()) {\n\t\tFVector2D ScreenLocation;\n\t\tif (UGameplayStatics::ProjectWorldToScreen(ARPC, InMod.Target->GetActorLocation(), ScreenLocation)) {\n\t\t\tFloatingCombatText->SetText(FString::Printf(TEXT(\"-%d\"), InMod.NewValue));\n\t\t\tFloatingCombatText->SetPositionInViewport(ScreenLocation, true);\n\t\t}\n\t}\n}", "CodeBleu_score": 34.119633619725235}]}
{"instance_id": "177d36e7e076", "generation_result": [{"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\t// Check if ability instance is valid\n\tif (AbilityInstance) {\n\t\t// Retrieve weapon component and character owning the weapon\n\t\tUARWeaponInventoryComponent* WeaponComponent = AbilityInstance->GetWeaponInventoryComponent();\n\t\tAARCharacter* Character = WeaponComponent->GetCharacter();\n\n\t\t// Check if character has server authority\n\t\tif (Character && Character->HasAuthority()) {\n\t\t\t// Duplicate magazine upgrade\n\t\t\tUARMagazineUpgradeItem* MagazineUpgrade = DuplicateObject(InMagazineUpgrade, this);\n\n\t\t\t// Update magazine upgrade value\n\t\t\tMagazineUpgrade->SetMagazineUpgradeValue(MagazineUpgrade->GetMagazineUpgradeValue() + MagazineUpgradeValue);\n\n\t\t\t// Apply upgrade effect to ability instance\n\t\t\tAbilityInstance->ApplyMagazineUpgradeEffect(MagazineUpgrade);\n\t\t}\n\t}\n\n\t// Call OnMagazineUpdateAdded function\n\tOnMagazineUpdateAdded(InMagazineUpgrade);\n}", "CodeBleu_score": 41.05193402534748}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t    // Check if the ability instance is valid\n    if (AbilityInstance) {\n        // Retrieve the weapon component and character owning the weapon\n        UARWeaponInventoryComponent* WeaponComponent = GetWeaponComponent();\n        AARCharacter* Character = WeaponComponent->GetCharacter();\n\n        // Check if the character has server authority\n        if (Character && Character->HasAuthority()) {\n            // Duplicate the magazine upgrade\n            UARMagazineUpgradeItem* MagazineUpgrade = DuplicateObject(InMagazineUpgrade, this);\n\n            // Update the magazine upgrade value\n            MagazineUpgrade->SetMagazineUpgradeValue(MagazineUpgrade->GetMagazineUpgradeValue() + 1);\n\n            // Apply the upgrade effect to the ability instance\n            AbilityInstance->ApplyUpgradeEffect(MagazineUpgrade);\n        }\n    }\n\n    // Call the OnMagazineUpdateAdded function\n    OnMagazineUpdateAdded.Broadcast(this);\n}", "CodeBleu_score": 40.79120849194264}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t    if (!AbilityInstance) {\n        return;\n    }\n    UARWeaponInventoryComponent* WeaponComponent = AbilityInstance->GetWeaponComponent();\n    AARCharacter* Character = WeaponComponent->GetCharacter();\n    if (Character && Character->HasAuthority()) {\n        UARMagazineUpgradeItem* MagazineUpgrade = DuplicateObject<UARMagazineUpgradeItem>(InMagazineUpgrade, this);\n        MagazineUpgrade->SetItem(this);\n        MagazineUpgrade->SetWeaponComponent(WeaponComponent);\n        MagazineUpgrade->SetAbilityInstance(AbilityInstance);\n        MagazineUpgrade->SetAbilityHandle(AbilityHandle);\n        MagazineUpgrade->SetMagazineUpgradeValue(InMagazineUpgrade->GetMagazineUpgradeValue());\n        MagazineUpgrade->ApplyUpgradeEffect();\n        MagazineUpgrade->OnMagazineUpdateAdded();\n        MagazineUpgrade->OnMagazineUpdateAdded.AddDynamic(this, &UARItemWeapon::OnMagazineUpdateAdded);\n        MagazineUpgrades.Add(MagazineUpgrade);\n        OnMagazineUpdateAdded.Broadcast(MagazineUpgrade);\n    }\n}", "CodeBleu_score": 53.37239131049864}]}
{"instance_id": "404276da398b", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tif (AARCharacter* Character = Cast<AARCharacter>(POwner)) {\n\t\tUAFAbilityComponent* AbilityComp = Character->GetAbilityComp();\n\t\tif (!AbilityComp)\n\t\t\treturn;\n\t\tFAFAbilitySpec Spec = AbilityComp->GetAbilitySpec(ServerWeaponAbilities[LocalIndex]);\n\t\tUARWeaponAbilityBase* Ability = Cast<UARWeaponAbilityBase>(Spec.Ability);\n\t\tif (!Ability)\n\t\t\treturn;\n\t\tSetAbilityToItem(Ability, LocalIndex);\n\t}\n}", "CodeBleu_score": 64.19150122865098}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tAARCharacter* Character = Cast<AARCharacter>(POwner);\n\tif (!Character) {\n\t\treturn;\n\t}\n\tUAFAbilityComponent* AbilityComp = Character->GetAbilityComp();\n\tif (!AbilityComp) {\n\t\treturn;\n\t}\n\tFAFAbilitySpec Spec = AbilityComp->GetAbilitySpec(ServerWeaponAbilities[LocalIndex]);\n\tif (!Spec.Ability) {\n\t\treturn;\n\t}\n\tUARWeaponAbilityBase* Ability = Cast<UARWeaponAbilityBase>(Spec.Ability);\n\tif (!Ability) {\n\t\treturn;\n\t}\n\tAbility->SetAbilityToItem(Item);\n}", "CodeBleu_score": 68.67008911381818}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tif (AARCharacter* Character = Cast<AARCharacter>(POwner)) {\n\t\tUAFAbilityComponent* AbilityComp = Character->GetAbilityComp();\n\t\tif (!AbilityComp)\n\t\t\treturn;\n\t\tUAFAbilityBase* Ability = AbilityComp->GetAbilityByHandle(ServerWeaponAbilities[LocalIndex]);\n\t\tSetAbilityToItem(InAbilityTag, Ability, LocalIndex);\n\t}\n}", "CodeBleu_score": 66.16615843368078}]}
{"instance_id": "2e97aab98981", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t    AARCharacter* Character = Cast<AARCharacter>(POwner);\n    if (!Character) {\n        return;\n    }\n\n    FAFOnAbilityRemoved Del = FAFOnAbilityRemoved::CreateUObject(this, &UARWeaponInventoryComponent::OnAbilityRemoved);\n    UAFAbilityComponent* AbilityComp = Character->GetAbilityComp();\n    if (!AbilityComp) {\n        return;\n    }\n\n    AbilityComp->AddOnAbilityRemovedDelegate(ServerWeaponAbilities[LocalIndex], Del);\n\n    FARWeaponRPC RPC;\n    RPC.Weapon = TSoftClassPtr<AARWeaponBase>();\n    RPC.Position = FVector::ZeroVector;\n    RPC.Rotation = FRotator::ZeroRotator;\n\n    SetWeapon(RPC, GroupToComponent[LocalIndex]);\n\n    if (LocalIndex == CurrentWeaponIndex) {\n        UGAAbilityBase* Ability = Cast<UGAAbilityBase>(AbilityComp->BP_GetAbilityByHandle(ServerWeaponAbilities[LocalIndex]));\n        if (Ability) {\n            UARWeaponAbilityBase* WeaponAbility = Cast<UARWeaponAbilityBase>(Ability);\n            if (WeaponAbility) {\n                WeaponAbility->UnEquip();\n            }\n        }\n    }\n}", "CodeBleu_score": 53.501097565421695}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tAARCharacter* Character = Cast<AARCharacter>(POwner);\n\tif (!Character)\n\t\treturn;\n\n\tFARWeaponRPC WeaponRPC;\n\tWeaponRPC.Weapon = FSoftClassPath();\n\tWeaponRPC.Position = FVector(0, 0, 0);\n\tWeaponRPC.Rotation = FRotator(0, 0, 0);\n\tSetWeapon(WeaponRPC, GroupToComponent[LocalIndex]);\n\n\tif (LocalIndex == CurrentWeaponIndex) {\n\t\tUARItemWeapon* ItemWeapon = GetItem<UARItemWeapon>(LocalIndex);\n\t\tif (ItemWeapon) {\n\t\t\tItemWeapon->OnUnequip(Character);\n\t\t}\n\t}\n}", "CodeBleu_score": 54.528670594014905}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\t// Cast the owner to an AARCharacter\n\tAARCharacter* Character = Cast<AARCharacter>(POwner);\n\tif (!Character) {\n\t\treturn;\n\t}\n\n\t// Initialize an FARWeaponRPC struct to reset the weapon data\n\tFARWeaponRPC WeaponRPC;\n\tWeaponRPC.Weapon = nullptr;\n\tWeaponRPC.Position = FVector(0, 0, 0);\n\tWeaponRPC.Rotation = FRotator(0, 0, 0);\n\n\t// Set the weapon data and update the corresponding component based on the local index\n\tUChildActorComponent* Component = GroupToComponent[LocalIndex];\n\tif (Component) {\n\t\tSetWeapon(WeaponRPC, Component);\n\t}\n\n\t// If the removed item is the current weapon, trigger the unequip action\n\tif (LocalIndex == CurrentWeaponIndex) {\n\t\tUARPlayerController* Controller = Cast<UARPlayerController>(Character->GetController());\n\t\tif (Controller) {\n\t\t\tController->OnUnEquip();\n\t\t}\n\t}\n}", "CodeBleu_score": 47.142702206426165}]}
{"instance_id": "13cc35e5ecac", "generation_result": [{"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\tif (!IsRunningDedicatedServer() && FSlateApplication::IsInitialized()) {\n\t\tGetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n\t}\n}", "CodeBleu_score": 47.846147355164085}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\tif (!IsRunningDedicatedServer() && FSlateApplication::IsInitialized()) {\n\t\tif (IsMoviePlayerEnabled()) {\n\t\t\tGetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 44.57331292643294}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\tif (!IsRunningDedicatedServer() && FSlateApplication::IsInitialized()) {\n\t\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\t\tif (IsMoviePlayerEnabled()) {\n\t\t\tGetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n\t\t}\n\n\t\t// If PreloadBackgroundImages option is check, unload all background images from memory\n\t\tif (Settings->bPreloadBackgroundImages) {\n\t\t\tUnloadBackgroundImages();\n\t\t}\n\n\t\t// Destroy the startup screen, the PreSetupLoadingScreen callback won't be called\n\t\t// if we've already explicitly setup the loading screen\n\t\tbIsStartupLoadingScreen = true;\n\t\tDestroyLoadingScreen();\n\t}\n}", "CodeBleu_score": 30.86952329645175}]}
{"instance_id": "2ee3ac60a8f3", "generation_result": [{"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogLoading, Log, TEXT(\"Preparing to setup the loading screen...\"));\n\n\tif (GetDefault<ULoadingScreenSettings>()->bEnableLoadingScreen) {\n\t\tbIsStartupLoadingScreen = false;\n\t\tSetupLoadingScreen(GetDefault<ULoadingScreenSettings>()->DefaultLoadingScreen);\n\t}\n}", "CodeBleu_score": 35.40048497959893}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogLoading, Log, TEXT(\"Preparing loading screen...\"));\n\n\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\tif (Settings->bShowLoadingScreen) {\n\t\tbIsStartupLoadingScreen = false;\n\t\tSetupLoadingScreen(Settings->DefaultLoadingScreen);\n\t}\n}", "CodeBleu_score": 51.244101140428754}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"Preparing loading screen...\"));\n\n\tif (IsLoadingScreenEnabled()) {\n\t\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\t\tbIsStartupLoadingScreen = false;\n\t\tSetupLoadingScreen(Settings->DefaultLoadingScreen);\n\t}\n}", "CodeBleu_score": 55.92352655819133}]}
{"instance_id": "c095588f550c", "generation_result": [{"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\tStartupBackgroundImages.Empty();\n\tDefaultBackgroundImages.Empty();\n\n\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\t// Load startup background images\n\tfor (const FString& ImagePath : Settings->StartupLoadingScreen.BackgroundImages) {\n\t\tUTexture2D* Texture = LoadObject<UTexture2D>(nullptr, *ImagePath, nullptr, LOAD_None, nullptr);\n\t\tif (Texture) {\n\t\t\tStartupBackgroundImages.Add(Texture);\n\t\t}\n\t}\n\n\t// Load default background images\n\tfor (const FString& ImagePath : Settings->DefaultLoadingScreen.BackgroundImages) {\n\t\tUTexture2D* Texture = LoadObject<UTexture2D>(nullptr, *ImagePath, nullptr, LOAD_None, nullptr);\n\t\tif (Texture) {\n\t\t\tDefaultBackgroundImages.Add(Texture);\n\t\t}\n\t}\n}", "CodeBleu_score": 52.071846068394635}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\tStartupBackgroundImages.Empty();\n\tDefaultBackgroundImages.Empty();\n\n\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\tif (Settings->StartupLoadingScreen.bShowWidgetOverlay) {\n\t\tStartupBackgroundImages.Add(LoadObject<UTexture2D>(NULL, *Settings->StartupLoadingScreen.BackgroundImage.FilePath, NULL, LOAD_None, NULL));\n\t}\n\n\tif (Settings->DefaultLoadingScreen.bShowWidgetOverlay) {\n\t\tDefaultBackgroundImages.Add(LoadObject<UTexture2D>(NULL, *Settings->DefaultLoadingScreen.BackgroundImage.FilePath, NULL, LOAD_None, NULL));\n\t}\n}", "CodeBleu_score": 48.48947442953562}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\tStartupBackgroundImages.Empty();\n\tDefaultBackgroundImages.Empty();\n\n\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\t// Load startup background images\n\tfor (const FString& ImagePath : Settings->StartupLoadingScreen.BackgroundImagePaths) {\n\t\tUTexture2D* Image = LoadObject<UTexture2D>(NULL, *ImagePath, NULL, LOAD_None, NULL);\n\t\tif (Image) {\n\t\t\tStartupBackgroundImages.Add(Image);\n\t\t}\n\t}\n\n\t// Load default background images\n\tfor (const FString& ImagePath : Settings->DefaultLoadingScreen.BackgroundImagePaths) {\n\t\tUTexture2D* Image = LoadObject<UTexture2D>(NULL, *ImagePath, NULL, LOAD_None, NULL);\n\t\tif (Image) {\n\t\t\tDefaultBackgroundImages.Add(Image);\n\t\t}\n\t}\n}", "CodeBleu_score": 53.44433984205775}]}
{"instance_id": "4ffd56e2a326", "generation_result": [{"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\tfloat Alpha = FMath::FInterpConstantTo(Alpha, CompleteTextAnimationSpeed > 0.f ? 1.f : 0.f, InDeltaTime, CompleteTextAnimationSpeed);\n\tCompleteTextColor.A = Alpha;\n\n\tif (Alpha == 0.f || Alpha == 1.f)\n\t\tCompleteTextAnimationSpeed *= -1.f;\n\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 22.139051140180772}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\tfloat MinAlpha = 0.f;\n\tfloat MaxAlpha = 1.f;\n\tfloat AnimationAlpha = FMath::FInterpConstantTo(AnimationAlpha, MaxAlpha, InDeltaTime, CompleteTextAnimationSpeed);\n\tif (AnimationAlpha >= MaxAlpha) {\n\t\tAnimationAlpha = MaxAlpha;\n\t\tbIsAnimationDirectionReversed = true;\n\t}\n\telse if (AnimationAlpha <= MinAlpha) {\n\t\tAnimationAlpha = MinAlpha;\n\t\tbIsAnimationDirectionReversed = false;\n\t}\n\n\tif (bIsAnimationDirectionReversed) {\n\t\tAnimationAlpha = FMath::FInterpConstantTo(AnimationAlpha, MinAlpha, InDeltaTime, CompleteTextAnimationSpeed);\n\t}\n\n\tCompleteTextColor.A = AnimationAlpha;\n\t\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 53.916276213211376}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\tfloat AnimationAlpha = FMath::FInterpConstantTo(AnimationAlpha, AnimationAlpha == 0.f ? 1.f : 0.f, InDeltaTime, CompleteTextAnimationSpeed);\n\tCompleteTextColor.A = AnimationAlpha;\n\t\n\tRequestRefresh();\n\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 17.46706923842538}]}
{"instance_id": "7420af124c78", "generation_result": [{"code": "bool FRaceAwaiter::await_ready(){\n\t\tcheckf(Data, TEXT(\"Attempting to await moved-from race awaiter\"));\n\tData->Lock.lock();\n\tcheckf(!Data->Promise, TEXT(\"Attempting to reuse race awaiter\"));\n\n\t// Unlock if ready and resume immediately by returning true,\n\t// otherwise carry the lock to await_suspend/Suspend\n\tbool bReady = Data->Index != -1;\n\tif (bReady)\n\t\tData->Lock.unlock();\n\treturn bReady;\n}", "CodeBleu_score": 40.70319741814033}, {"code": "bool FRaceAwaiter::await_ready(){\n\t  checkf(Data, TEXT(\"Attempting to await moved-from race awaiter\"));\n  Data->Lock.lock();\n  checkf(!Data->Promise, TEXT(\"Attempting to reuse race awaiter\"));\n\n  // Unlock if ready and resume immediately by returning true,\n  // otherwise carry the lock to await_suspend/Suspend\n  bool bReady = Data->Index != -1;\n  if (bReady)\n    Data->Lock.unlock();\n  return bReady;\n}", "CodeBleu_score": 41.90779760346993}, {"code": "bool FRaceAwaiter::await_ready(){\n\t\tcheckf(Data, TEXT(\"Attempting to await moved-from race awaiter\"));\n\tData->Lock.lock();\n\tcheckf(!Data->Promise, TEXT(\"Attempting to reuse race awaiter\"));\n\n\t// Unlock if ready and resume immediately by returning true,\n\t// otherwise carry the lock to await_suspend/Suspend\n\tbool bReady = Data->Index != -1;\n\tif (bReady)\n\t\tData->Lock.unlock();\n\treturn bReady;\n}", "CodeBleu_score": 40.70319741814033}]}
{"instance_id": "fab9fe81573a", "generation_result": [{"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tif (!State) {\n\t\treturn true;\n\t}\n\tFFindPathSharedPtr* Ptr = static_cast<FFindPathSharedPtr*>(State);\n\tif (bCleanup && Ptr->Get() && Ptr->Get()->QueryID != INDEX_NONE) {\n\t\tPtr->Get()->NS1->AbortFindPath(Ptr->Get()->QueryID);\n\t\tPtr->Reset();\n\t}\n\treturn !Ptr->Get();\n}", "CodeBleu_score": 35.58935744543618}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tif (bCleanup) {\n\t\tFFindPathSharedPtr* PathState = static_cast<FFindPathSharedPtr*>(State);\n\t\tif (PathState) {\n\t\t\tFFindPathState& State = **PathState;\n\t\t\tif (State.QueryID != INVALID_NAV_QUERY_ID) {\n\t\t\t\tState.NS1->CancelAsyncRequest(State.QueryID);\n\t\t\t\tState.QueryID = INVALID_NAV_QUERY_ID;\n\t\t\t}\n\t\t\tdelete PathState;\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 38.319690909612504}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tif (State == nullptr) {\n\t\treturn true;\n\t}\n\tFFindPathSharedPtr* FindPathStatePtr = (FFindPathSharedPtr*)State;\n\tif (bCleanup) {\n\t\tif (FindPathStatePtr->IsValid()) {\n\t\t\tauto NavSys = FindPathStatePtr->Get()->NS1.Get();\n\t\t\tif (NavSys != nullptr) {\n\t\t\t\tNavSys->AbortFindPath(*FindPathStatePtr);\n\t\t\t}\n\t\t}\n\t\tFindPathStatePtr->Reset();\n\t}\n\treturn !FindPathStatePtr->IsValid();\n}", "CodeBleu_score": 35.49527344005961}]}
{"instance_id": "0656af2cb3eb", "generation_result": [{"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (!is_part_of_edited_scene() && is_current()) {\n\t\t\t\tclear_current();\n\t\t\t}\n\t\t\tif (!is_part_of_edited_scene() && !is_current()) {\n\t\t\t\tmake_current();\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (!is_part_of_edited_scene() && is_current()) {\n\t\t\t\tclear_current();\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 66.35319412621101}, {"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (!is_part_of_edited_scene()) {\n\t\t\t\tAudioServer::get_singleton()->set_current_listener(this);\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (!is_part_of_edited_scene()) {\n\t\t\t\tAudioServer::get_singleton()->set_current_listener(nullptr);\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 56.69040564277621}, {"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (is_inside_tree() && !is_part_of_edited_scene()) {\n\t\t\t\tif (current) {\n\t\t\t\t\tcurrent->clear_current();\n\t\t\t\t}\n\t\t\t\tmake_current();\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (is_inside_tree() && !is_part_of_edited_scene()) {\n\t\t\t\tclear_current();\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 60.75771550283022}]}
{"instance_id": "9aadd2c91e67", "generation_result": [{"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\tmemset(p_buffer, 0, sizeof(int32_t) * p_frames * channels);\n\n\tif (!active.is_set()) {\n\t\treturn;\n\t}\n\n\tif (!use_threads) {\n\t\tlock();\n\t\tstart_counting_ticks();\n\n\t\taudio_server_process(p_frames, p_buffer);\n\n\t\tstop_counting_ticks();\n\t\tunlock();\n\t}\n}", "CodeBleu_score": 19.316698691555565}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\tERR_FAIL_COND(p_frames > buffer_frames);\n\tERR_FAIL_COND(p_frames % 2 != 0);\n\n\tERR_FAIL_COND(mix_rate == -1);\n\tERR_FAIL_COND(!active.is_set());\n\tERR_FAIL_COND(!use_threads);\n\n\tlock();\n\tstart_counting_ticks();\n\n\taudio_server_process(p_frames, p_buffer);\n\n\tstop_counting_ticks();\n\tunlock();\n}", "CodeBleu_score": 23.6674014696875}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\tif (active.is_set()) {\n\t\tlock();\n\t\tstart_counting_ticks();\n\n\t\taudio_server_process(p_frames, p_buffer);\n\n\t\tstop_counting_ticks();\n\t\tunlock();\n\t}\n}", "CodeBleu_score": 14.3554859484924}]}
{"instance_id": "56df08c77b69", "generation_result": [{"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tswitch (gravity_override_mode) {\n\t\tcase PhysicsServer2D::AREA_GRAVITY_OVERRIDE_DISABLED: {\n\t\t\tr_gravity = Vector2();\n\t\t} break;\n\t\tcase PhysicsServer2D::AREA_GRAVITY_OVERRIDE_POINT_AT_COLLISION_POSITION: {\n\t\t\tr_gravity = gravity;\n\t\t} break;\n\t\tcase PhysicsServer2D::AREA_GRAVITY_OVERRIDE_POINT_AT_COLLISION_CENTER: {\n\t\t\tr_gravity = gravity;\n\t\t} break;\n\t\tcase PhysicsServer2D::AREA_GRAVITY_OVERRIDE_VECTOR: {\n\t\t\tr_gravity = gravity_vector;\n\t\t} break;\n\t\tcase PhysicsServer2D::AREA_GRAVITY_OVERRIDE_POINT_AT_BODY_CENTER: {\n\t\t\tr_gravity = (gravity / (p_position - get_transform().get_origin()).length_squared()) * (p_position - get_transform().get_origin());\n\t\t} break;\n\t\tcase PhysicsServer2D::AREA_GRAVITY_OVERRIDE_POINT_AT_AREA_CENTER: {\n\t\t\tr_gravity = (gravity / (p_position - get_transform().get_origin()).length_squared()) * (p_position - get_transform().get_origin());\n\t\t} break;\n\t}\n}", "CodeBleu_score": 35.53349273741412}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tr_gravity = Vector2();\n\n\tif (!monitorable) {\n\t\treturn;\n\t}\n\n\tswitch (gravity_override_mode) {\n\t\tcase PhysicsServer2D::AREA_GRAVITY_OVERRIDE_DISABLED:\n\t\t\treturn;\n\t\tcase PhysicsServer2D::AREA_GRAVITY_OVERRIDE_COMBINE: {\n\t\t\treal_t gravity_len = gravity;\n\t\t\tif (gravity_is_point) {\n\t\t\t\tgravity_len *= p_position.distance_squared_to(gravity_vector);\n\t\t\t}\n\n\t\t\tr_gravity = gravity_vector * gravity_len;\n\t\t} break;\n\t\tcase PhysicsServer2D::AREA_GRAVITY_OVERRIDE_COMBINE_REVERSE: {\n\t\t\treal_t gravity_len = gravity;\n\t\t\tif (gravity_is_point) {\n\t\t\t\tgravity_len *= p_position.distance_squared_to(gravity_vector);\n\t\t\t}\n\n\t\t\tr_gravity = -gravity_vector * gravity_len;\n\t\t} break;\n\t\tcase PhysicsServer2D::AREA_GRAVITY_OVERRIDE_REPLACE:\n\t\t\tr_gravity = gravity_vector * gravity;\n\t\t\tbreak;\n\t\tcase PhysicsServer2D::AREA_GRAVITY_OVERRIDE_REPLACE_REVERSE:\n\t\t\tr_gravity = -gravity_vector * gravity;\n\t\t\tbreak;\n\t}\n}", "CodeBleu_score": 40.38635478797378}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t", "CodeBleu_score": 3.550376443750522}]}
{"instance_id": "f8c60f8d0caa", "generation_result": [{"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tERR_FAIL_NULL(get_space());\n\n\tGodotBody2D *body = NULL;\n\n\tfor (int i = 0; i < constraints.size(); i++) {\n\t\tGodotConstraint2D *c = constraints[i];\n\n\t\tif (c->get_type() == PhysicsServer2D::CONSTRAINT_TYPE_DISTANCE) {\n\t\t\tbody = c->get_body_a();\n\t\t\tif (body && body->get_mode() == PhysicsServer2D::BODY_MODE_RIGID && !body->is_active()) {\n\t\t\t\tbody->set_active(true);\n\t\t\t}\n\n\t\t\tbody = c->get_body_b();\n\t\t\tif (body && body->get_mode() == PhysicsServer2D::BODY_MODE_RIGID && !body->is_active()) {\n\t\t\t\tbody->set_active(true);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 43.23290604485396}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tGodotConstraint2D *c = constraint_list;\n\twhile (c) {\n\t\tGodotBody2D *body_a = c->get_body_a();\n\t\tGodotBody2D *body_b = c->get_body_b();\n\n\t\tif (body_a && body_a->get_mode() == PhysicsServer2D::BODY_MODE_RIGID && !body_a->is_active()) {\n\t\t\tbody_a->set_active(true);\n\t\t}\n\n\t\tif (body_b && body_b->get_mode() == PhysicsServer2D::BODY_MODE_RIGID && !body_b->is_active()) {\n\t\t\tbody_b->set_active(true);\n\t\t}\n\n\t\tc = c->get_next();\n\t}\n}", "CodeBleu_score": 35.25580910680473}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tGodotBody2D *body = this;\n\twhile (body) {\n\t\tbody->set_active(true);\n\t\tbody = body->next_body;\n\t}\n}", "CodeBleu_score": 11.072723811054296}]}
{"instance_id": "0c6f6c00da9a", "generation_result": [{"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (get_space()) {\n\t\tif (!monitor_query_list.in_list()) {\n\t\t\tget_space()->area_add_to_monitor_query_list(&monitor_query_list);\n\t\t}\n\t}\n}", "CodeBleu_score": 82.22793015934249}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (get_space()) {\n\t\tif (!monitor_query_list.in_list()) {\n\t\t\tget_space()->area_add_to_monitor_query_list(&monitor_query_list);\n\t\t}\n\t}\n}", "CodeBleu_score": 82.22793015934249}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (get_space()) {\n\t\tif (!monitor_query_list.in_list()) {\n\t\t\tget_space()->area_add_to_monitor_query_list(&monitor_query_list);\n\t\t}\n\t}\n}", "CodeBleu_score": 82.22793015934249}]}
{"instance_id": "efc39df0e3a3", "generation_result": [{"code": "void GodotBody3D::_update_transform_dependent(){\n\t", "CodeBleu_score": 2.1451046329649315}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t\tTransform3D transform = get_transform();\n\tVector3 scale = transform.basis.get_scale();\n\tTransform3D inv_transform = transform.affine_inverse();\n\tVector3 local_center_of_mass = get_center_of_mass() * scale;\n\tVector3 global_center_of_mass = transform.xform(local_center_of_mass);\n\tBasis inv_principal_inertia_axes = inv_transform.basis.inverse().transposed();\n\tBasis principal_inertia_axes = inv_principal_inertia_axes.transposed();\n\tBasis inertia_tensor = get_inertia_tensor() * scale.x * scale.y * scale.z;\n\tinertia_tensor = principal_inertia_axes.transposed().xform(inertia_tensor).xform(principal_inertia_axes);\n\tset_principal_inertia_axes(principal_inertia_axes);\n\tset_inverse_inertia_tensor(inertia_tensor.inverse());\n\tset_center_of_mass(global_center_of_mass);\n\t_mass_properties_changed();\n}", "CodeBleu_score": 39.759303900012036}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t", "CodeBleu_score": 2.1451046329649315}]}
{"instance_id": "aebafb4094a1", "generation_result": [{"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tAudioServer *audio = AudioServer::get_singleton();\n\tif (!audio) {\n\t\treturn;\n\t}\n\n\taudio->process(p_frames, p_buffer, p_update_mix_time);\n}", "CodeBleu_score": 47.245771619952826}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tAudioServer *audio = AudioServer::get_singleton();\n\tif (audio) {\n\t\tif (p_update_mix_time) {\n\t\t\taudio->update_mix_time(p_frames);\n\t\t}\n\t\taudio->process(p_frames, p_buffer);\n\t}\n}", "CodeBleu_score": 63.97550548007084}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tAudioServer *audio = AudioServer::get_singleton();\n\tif (audio) {\n\t\tif (p_update_mix_time) {\n\t\t\taudio->update_mix_time(p_frames);\n\t\t}\n\t\taudio->process(p_frames, p_buffer);\n\t}\n}", "CodeBleu_score": 63.97550548007084}]}
{"instance_id": "160bb23e8010", "generation_result": [{"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t    ERR_FAIL_COND(p_feed.is_null());\n\n    // find the index of the feed\n    int index = get_feed_index(p_feed->get_id());\n    ERR_FAIL_COND(index == -1);\n\n    // remove the feed\n    feeds.remove_at(index);\n\n    print_verbose(\"CameraServer: Removed camera \" + p_feed->get_name() + \" with ID \" + itos(p_feed->get_id()) + \" and position \" + itos(p_feed->get_position()) + \" at index \" + itos(index));\n\n    // let whomever is interested know\n    emit_signal(\"camera_feed_removed\", p_feed->get_id());\n}", "CodeBleu_score": 56.47980564279028}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\tERR_FAIL_COND(p_feed.is_null());\n\n\t// find and remove our feed\n\tfor (int i = 0; i < feeds.size(); i++) {\n\t\tif (feeds[i] == p_feed) {\n\t\t\tfeeds.remove(i);\n\t\t\tprint_verbose(\"CameraServer: Unregistered camera \" + p_feed->get_name() + \" with ID \" + itos(p_feed->get_id()) + \" and position \" + itos(p_feed->get_position()) + \" at index \" + itos(i));\n\n\t\t\t// let whomever is interested know\n\t\t\temit_signal(\"camera_feed_removed\", p_feed->get_id());\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 71.37629202355281}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\tERR_FAIL_COND(p_feed.is_null());\n\n\t// find the feed\n\tint index = get_feed_index(p_feed->get_id());\n\tERR_FAIL_COND(index == -1);\n\n\t// remove the feed\n\tfeeds.remove_at(index);\n\n\tprint_verbose(\"CameraServer: Unregistered camera \" + p_feed->get_name() + \" with ID \" + itos(p_feed->get_id()) + \" and position \" + itos(p_feed->get_position()) + \" at index \" + itos(index));\n\n\t// let whomever is interested know\n\temit_signal(SNAME(\"camera_feed_removed\"), p_feed->get_id());\n}", "CodeBleu_score": 55.16756277054326}]}
{"instance_id": "bef3cf110c45", "generation_result": [{"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t    EaseRateAction *ret = new (std::nothrow) EaseRateAction();\n    if (ret && ret->initWithAction(action, rate)) {\n        ret->autorelease();\n    } else {\n        CC_SAFE_DELETE(ret);\n    }\n    return ret;\n}", "CodeBleu_score": 54.89582779509713}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t    EaseRateAction* easeRateAction = new (std::nothrow) EaseRateAction();\n    if (easeRateAction && easeRateAction->initWithAction(action, rate)) {\n        easeRateAction->autorelease();\n        return easeRateAction;\n    }\n    CC_SAFE_DELETE(easeRateAction);\n    return nullptr;\n}", "CodeBleu_score": 78.32524651907464}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t    CCASSERT(action != nullptr, \"action couldn't be nullptr!\");\n    EaseRateAction *ret = new (std::nothrow) EaseRateAction();\n    if (ret && ret->initWithAction(action, rate)) {\n        ret->autorelease();\n        return ret;\n    }\n    CC_SAFE_DELETE(ret);\n    return nullptr;\n}", "CodeBleu_score": 76.44633133455979}]}
{"instance_id": "97fc6f86ad54", "generation_result": [{"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t    if (node->getName() == childName) {\n        return node;\n    }\n\n    for (auto child : node->getChildren()) {\n        Node* found = findChildByNameRecursively(child, childName);\n        if (found) {\n            return found;\n        }\n    }\n\n    return nullptr;\n}", "CodeBleu_score": 54.866928970431836}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t    if (node->getName() == childName) {\n        return node;\n    }\n\n    for (auto child : node->getChildren()) {\n        Node* foundNode = findChildByNameRecursively(child, childName);\n        if (foundNode) {\n            return foundNode;\n        }\n    }\n\n    return nullptr;\n}", "CodeBleu_score": 56.11314726419984}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t    if (node == nullptr) {\n        return nullptr;\n    }\n\n    if (node->getName() == childName) {\n        return node;\n    }\n\n    for (const auto& child : node->getChildren()) {\n        Node* foundNode = findChildByNameRecursively(child, childName);\n        if (foundNode != nullptr) {\n            return foundNode;\n        }\n    }\n\n    return nullptr;\n}", "CodeBleu_score": 60.18616893741422}]}
{"instance_id": "5fcbe1fedcd2", "generation_result": [{"code": "void Animate3D::removeFromMap(){\n\t    if (_target == nullptr)\n        return;\n\n    if (_state == Animate3DState::Running) {\n        auto it = s_runningAnimates.find(_target);\n        if (it != s_runningAnimates.end() && it->second == this) {\n            s_runningAnimates.erase(it);\n        }\n    } else if (_state == Animate3DState::FadeIn) {\n        auto it = s_fadeInAnimates.find(_target);\n        if (it != s_fadeInAnimates.end() && it->second == this) {\n            s_fadeInAnimates.erase(it);\n        }\n    } else if (_state == Animate3DState::FadeOut) {\n        auto it = s_fadeOutAnimates.find(_target);\n        if (it != s_fadeOutAnimates.end() && it->second == this) {\n            s_fadeOutAnimates.erase(it);\n        }\n    }\n}", "CodeBleu_score": 73.39305640469588}, {"code": "void Animate3D::removeFromMap(){\n\t", "CodeBleu_score": 1.2077083246914777}, {"code": "void Animate3D::removeFromMap(){\n\t    auto target = _target;\n    if (target) {\n        auto& runningAnimates = Animate3D::s_runningAnimates;\n        auto it = runningAnimates.find(target);\n        if (it != runningAnimates.end()) {\n            if (it->second == this) {\n                runningAnimates.erase(it);\n            }\n        }\n\n        auto& fadeInAnimates = Animate3D::s_fadeInAnimates;\n        it = fadeInAnimates.find(target);\n        if (it != fadeInAnimates.end()) {\n            if (it->second == this) {\n                fadeInAnimates.erase(it);\n            }\n        }\n\n        auto& fadeOutAnimates = Animate3D::s_fadeOutAnimates;\n        it = fadeOutAnimates.find(target);\n        if (it != fadeOutAnimates.end()) {\n            if (it->second == this) {\n                fadeOutAnimates.erase(it);\n            }\n        }\n    }\n}", "CodeBleu_score": 52.78061017860027}]}
{"instance_id": "db8d394f7bc4", "generation_result": [{"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t    std::string key = fileName + animationName;\n    Animation3D* animation = getAnimation(key);\n    if (animation) {\n        return animation;\n    }\n\n    animation = new (std::nothrow) Animation3D();\n    if (animation && animation->initWithFile(fileName, animationName)) {\n        animation->autorelease();\n        addAnimation(key, animation);\n        return animation;\n    }\n    CC_SAFE_DELETE(animation);\n    return nullptr;\n}", "CodeBleu_score": 50.686200720841}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t    Animation3D* ret = nullptr;\n    std::string key = fileName + \"_\" + animationName;\n    auto it = s_animationCache.find(key);\n    if (it != s_animationCache.end()) {\n        ret = it->second;\n    } else {\n        ret = new (std::nothrow) Animation3D();\n        if (ret && ret->initWithFile(fileName, animationName)) {\n            s_animationCache.insert(key, ret);\n        } else {\n            CC_SAFE_DELETE(ret);\n        }\n    }\n    return ret;\n}", "CodeBleu_score": 55.72992870796371}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t    std::string key = fileName + animationName;\n    auto animation = Animation3DCache::getInstance()->getAnimation3D(key);\n    if (animation) {\n        return animation;\n    }\n    animation = new (std::nothrow) Animation3D();\n    if (animation && animation->init(fileName, animationName)) {\n        Animation3DCache::getInstance()->addAnimation3D(key, animation);\n        return animation;\n    }\n    CC_SAFE_DELETE(animation);\n    return nullptr;\n}", "CodeBleu_score": 58.54405034269017}]}
{"instance_id": "cdf28d98d3ff", "generation_result": [{"code": "void Animation3DCache::removeUnusedAnimation(){\n\t    for (auto itor = _animations.begin(); itor != _animations.end();) {\n        Animation3D* animation = itor->second;\n        if (animation->getReferenceCount() == 1) {\n            animation->release();\n            itor = _animations.erase(itor);\n        } else {\n            ++itor;\n        }\n    }\n}", "CodeBleu_score": 71.51494778648177}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t    for (auto itor = _animations.begin(); itor != _animations.end();) {\n        if (itor->second->getReferenceCount() == 1) {\n            CC_SAFE_RELEASE(itor->second);\n            itor = _animations.erase(itor);\n        } else {\n            ++itor;\n        }\n    }\n}", "CodeBleu_score": 83.01259536376315}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t    for (auto itor = _animations.begin(); itor != _animations.end();) {\n        Animation3D* animation = itor->second;\n        if (animation->getReferenceCount() == 1) {\n            CC_SAFE_RELEASE(animation);\n            itor = _animations.erase(itor);\n        } else {\n            ++itor;\n        }\n    }\n}", "CodeBleu_score": 70.35346214404827}]}
{"instance_id": "de7926871eb8", "generation_result": [{"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t    BillBoard *sprite = new (std::nothrow) BillBoard();\n    if (sprite && sprite->initWithTexture(texture)) {\n        sprite->setMode(mode);\n        sprite->autorelease();\n        return sprite;\n    }\n    CC_SAFE_DELETE(sprite);\n    return nullptr;\n}", "CodeBleu_score": 68.90304575553454}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t    BillBoard *pRet = new (std::nothrow) BillBoard();\n    if (pRet && pRet->initWithTexture(texture, mode))\n    {\n        pRet->autorelease();\n        return pRet;\n    }\n    CC_SAFE_DELETE(pRet);\n    return nullptr;\n}", "CodeBleu_score": 63.390757592874934}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t    BillBoard *pRet = new (std::nothrow) BillBoard();\n    if (pRet && pRet->initWithTexture(texture)) {\n        pRet->setMode(mode);\n        pRet->autorelease();\n        return pRet;\n    }\n    CC_SAFE_DELETE(pRet);\n    return nullptr;\n}", "CodeBleu_score": 68.3673983292517}]}
{"instance_id": "eef1c2206d68", "generation_result": [{"code": "bool Bundle3D::load(const std::string& path){\n\t    if (path.empty() || _path == path)\n        return true;\n\n    clear();\n\n    // get extension\n    std::string extension = FileUtils::getInstance()->getFileExtension(path);\n\n    // load binary\n    if (extension == \"c3b\") {\n        // read file\n        Data data = FileUtils::getInstance()->getDataFromFile(path);\n        if (data.isNull()) {\n            CCLOG(\"Bundle3D: Failed to load binary bundle from %s\", path.c_str());\n            return false;\n        }\n\n        // load binary\n        if (!loadBinary(data)) {\n            CCLOG(\"Bundle3D: Failed to load binary bundle from %s\", path.c_str());\n            return false;\n        }\n\n        _isBinary = true;\n    }\n    // load json\n    else if (extension == \"c3t\") {\n        // read file\n        std::string json = FileUtils::getInstance()->getStringFromFile(path);\n        if (json.empty()) {\n            CCLOG(\"Bundle3D: Failed to load json bundle from %s\", path.c_str());\n            return false;\n        }\n\n        // load json\n        if (!loadJSON(json)) {\n            CCLOG(\"Bundle3D: Failed to load json bundle from %s\", path.c_str());\n            return false;\n        }\n\n        _isBinary = false;\n    }\n    // invalid format\n    else {\n        CCLOG(\"Bundle3D: Invalid format %s\", extension.c_str());\n        return false;\n    }\n\n    _path = path;\n    return true;\n}", "CodeBleu_score": 52.118166118226874}, {"code": "bool Bundle3D::load(const std::string& path){\n\t    if (path.empty() || _path == path)\n        return true;\n\n    clear();\n\n    // get extension\n    std::string extension = path.substr(path.find_last_of('.') + 1);\n\n    // load as binary\n    if (extension == \"c3b\")\n    {\n        _isBinary = true;\n        return loadBinary(path);\n    }\n    // load as json\n    else if (extension == \"c3t\")\n    {\n        _isBinary = false;\n        return loadJson(path);\n    }\n    // invalid format\n    else\n    {\n        CCLOG(\"invalid format\");\n        return false;\n    }\n}", "CodeBleu_score": 46.400915300457136}, {"code": "bool Bundle3D::load(const std::string& path){\n\t    if (path.empty()) {\n        CCLOG(\"Bundle3D: path is empty\");\n        return false;\n    }\n    if (_path == path) {\n        CCLOG(\"Bundle3D: path already loaded\");\n        return true;\n    }\n    clear();\n    _path = path;\n    _isBinary = false;\n    _isBinary = (strrchr(path.c_str(), '.') == strrchr(path.c_str(), 'b'));\n    if (_isBinary) {\n        CCLOG(\"Bundle3D: loading binary bundle\");\n        return loadBinary();\n    }\n    else {\n        CCLOG(\"Bundle3D: loading json bundle\");\n        return loadJson();\n    }\n}", "CodeBleu_score": 45.256767539967576}]}
{"instance_id": "37b6acea681e", "generation_result": [{"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t    if (skindata == nullptr) {\n        return false;\n    }\n    skindata->resetData();\n\n    if (_isBinary) {\n        return loadSkinDataBinary(skindata);\n    } else {\n        return loadSkinDataJson(skindata);\n    }\n}", "CodeBleu_score": 89.50217863083232}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t    if (!skindata)\n        return false;\n\n    if (_isBinary)\n        return loadSkinDataBinary(skindata);\n    else\n        return loadSkinDataJson(skindata);\n}", "CodeBleu_score": 62.84695401076481}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t    if (!skindata)\n        return false;\n\n    skindata->resetData();\n\n    if (_isBinary)\n        return loadSkinDataBinary(skindata);\n    else\n        return loadSkinDataJson(skindata);\n}", "CodeBleu_score": 67.96557365026882}]}
{"instance_id": "97449825e4ef", "generation_result": [{"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t    AudioDecoder* decoder = (AudioDecoder*) datasource;\n    if (decoder->_fileSize > 0) {\n        size_t bytesToRead = size * nmemb;\n        if (bytesToRead > decoder->_fileSize) {\n            bytesToRead = decoder->_fileSize;\n        }\n        if (bytesToRead > 0) {\n            memcpy(ptr, decoder->_fileBuffer + decoder->_filePosition, bytesToRead);\n            decoder->_filePosition += bytesToRead;\n        }\n        return bytesToRead;\n    }\n    return 0;\n}", "CodeBleu_score": 51.63131789958821}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t    auto* p = (AudioDecoder*) datasource;\n    size_t bytesToRead = size * nmemb;\n    if (bytesToRead > p->_dataSize) {\n        bytesToRead = p->_dataSize;\n    }\n    if (bytesToRead > 0) {\n        memcpy(ptr, p->_data, bytesToRead);\n        p->_data += bytesToRead;\n        p->_dataSize -= bytesToRead;\n    }\n    return bytesToRead;\n}", "CodeBleu_score": 50.9458285168997}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t    AudioDecoder* decoder = (AudioDecoder*)datasource;\n    uint8_t* buffer = (uint8_t*)ptr;\n    size_t bytesToRead = size * nmemb;\n    size_t bytesRead = 0;\n    while (bytesRead < bytesToRead) {\n        if (decoder->_filePosition >= decoder->_fileSize) {\n            break;\n        }\n        size_t bytesRemaining = decoder->_fileSize - decoder->_filePosition;\n        size_t bytesToCopy = std::min(bytesToRead - bytesRead, bytesRemaining);\n        memcpy(buffer + bytesRead, decoder->_fileData + decoder->_filePosition, bytesToCopy);\n        bytesRead += bytesToCopy;\n        decoder->_filePosition += bytesToCopy;\n    }\n    return bytesRead;\n}", "CodeBleu_score": 42.13253698605074}]}
{"instance_id": "0f4db164ba5d", "generation_result": [{"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t    _pcmBuffer = std::make_shared<std::vector<char>>();\n    _pcmBuffer->reserve(4096);\n}", "CodeBleu_score": 47.51732990244886}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t    _pcmBuffer = std::make_shared<std::vector<unsigned char>>();\n    _pcmBuffer->reserve(4096);\n}", "CodeBleu_score": 40.04189372954228}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t    _pcmBuffer = std::make_shared<std::vector<char>>();\n    _pcmBuffer->reserve(4096);\n}", "CodeBleu_score": 47.51732990244886}]}
{"instance_id": "0f88663615c6", "generation_result": [{"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t    std::lock_guard<std::mutex> guard(sDownloaderMutex);\n    auto it = sDownloaderMap.find(id);\n    if (it != sDownloaderMap.end()) {\n        return it->second;\n    }\n    return nullptr;\n}", "CodeBleu_score": 71.25861199910604}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t    std::lock_guard<std::mutex> guard(sDownloaderMutex);\n    auto it = sDownloaderMap.find(id);\n    if (it != sDownloaderMap.end()) {\n        return it->second;\n    }\n    return nullptr;\n}", "CodeBleu_score": 71.25861199910604}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t    std::lock_guard<std::mutex> guard(sDownloaderMutex);\n    auto it = sDownloaderMap.find(id);\n    if (it != sDownloaderMap.end()) {\n        return it->second;\n    }\n    return nullptr;\n}", "CodeBleu_score": 71.25861199910604}]}
{"instance_id": "a5aafaaa944c", "generation_result": [{"code": "function M.playMusic(filename, isLoop)\n\t    local loopValue = false\n    if nil ~= isLoop then\n        loopValue = isLoop\n    end\n    cc.SimpleAudioEngine:getInstance():playMusic(filename, loopValue)", "CodeBleu_score": 94.93268439705254}, {"code": "function M.playMusic(filename, isLoop)\n\t    local loopValue = false\n    if nil ~= isLoop then\n        loopValue = isLoop\n    end\n    cc.SimpleAudioEngine:getInstance():playMusic(filename, loopValue)", "CodeBleu_score": 94.93268439705254}, {"code": "function M.playMusic(filename, isLoop)\n\t    local loopValue = false\n    if nil ~= isLoop then\n        loopValue = isLoop\n    end\n    cc.SimpleAudioEngine:getInstance():playMusic(filename, loopValue)", "CodeBleu_score": 94.93268439705254}]}
{"instance_id": "16f2ad4bb4e8", "generation_result": [{"code": "function ccs.TriggerObj:detect()\n\t    if not self._enable then\n        return true\n    end\n    if 0 == table.getn(self._cons) then\n        return true\n    end\n    local ret = true\n    for i = 1, table.getn(self._cons) do\n        ret = ret and self._cons[i]:detect()\n    end\n    return ret", "CodeBleu_score": 56.36180582565987}, {"code": "function ccs.TriggerObj:detect()\n\t    if not self._enable then\n        return true\n    end\n    if table.getn(self._cons) == 0 then\n        return true\n    end\n    for i = 1, table.getn(self._cons) do\n        local con = self._cons[i]\n        if not con:detect() then\n            return false\n        end\n    end\n    return true", "CodeBleu_score": 52.052538793111935}, {"code": "function ccs.TriggerObj:detect()\n\t    if self._enable == false then\n        return false\n    end\n    if table.getn(self._cons) == 0 then\n        return true\n    end\n    for i = 1, table.getn(self._cons) do\n        local con = self._cons[i]\n        if con:detect() == false then\n            return false\n        end\n    end\n    return true", "CodeBleu_score": 51.43370930980987}]}
{"instance_id": "e73b10418cb6", "generation_result": [{"code": "function ccs.TriggerObj:removeAll()\n\t    local obj = nil\n    for i = 1, table.getn(self._cons) do\n        obj = self._cons[i]\n        if nil ~= obj and obj.removeAll then\n            obj:removeAll()\n        end\n    end\n    self._cons = {}\n    for i = 1, table.getn(self._acts) do\n        obj = self._acts[i]\n        if nil ~= obj and obj.removeAll then\n            obj:removeAll()\n        end\n    end\n    self._acts = {}", "CodeBleu_score": 86.97198919316845}, {"code": "function ccs.TriggerObj:removeAll()\n\t    local obj = nil\n    for i = 1, table.getn(self._cons) do\n        obj = self._cons[i]\n        if nil ~= obj and obj.removeAll then\n            obj:removeAll()\n        end\n    end\n    for i = 1, table.getn(self._acts) do\n        obj = self._acts[i]\n        if nil ~= obj and obj.removeAll then\n            obj:removeAll()\n        end\n    end\n    self._cons = {}\n    self._acts = {}", "CodeBleu_score": 85.30442219194462}, {"code": "function ccs.TriggerObj:removeAll()\n\t    if nil == self._cons then\n        return\n    end\n\n    local obj = nil\n    for i = 1, table.getn(self._cons) do\n        obj = self._cons[i]\n        if nil ~= obj and nil ~= obj.removeAll then\n            obj:removeAll()\n        end\n    end\n\n    self._cons = {}\n\n    if nil == self._acts then\n        return\n    end\n\n    for i = 1, table.getn(self._acts) do\n        obj = self._acts[i]\n        if nil ~= obj and nil ~= obj.removeAll then\n            obj:removeAll()\n        end\n    end\n\n    self._acts = {}", "CodeBleu_score": 77.38210068945683}]}
{"instance_id": "d5a1333d794d", "generation_result": [{"code": "function BasicCollider:hurtEffect(target)\n\t    local hurtEffect = cc.Sprite3D:create(self.hurtAnimation)\n    hurtEffect:setCameraMask(self.cameraMask)\n    hurtEffect:setPosition(self:getPosition())\n    hurtEffect:setScale(self.scale)\n    hurtEffect:setOpacity(self.opacity)\n    hurtEffect:setRotation3D(self.rotation3D)\n    hurtEffect:setRotation(self.rotation)\n    hurtEffect:setSkewX(self.skewX)\n    hurtEffect:setSkewY(self.skewY)\n    hurtEffect:setAnchorPoint(self.anchorPoint)\n    hurtEffect:setLocalZOrder(self.localZOrder)\n    hurtEffect:setTag(self.tag)\n    hurtEffect:setName(self.name)\n    hurtEffect:setVisible(self.visible)\n    hurtEffect:setOpacityModifyRGB(self.opacityModifyRGB)\n    hurtEffect:setBlendFunc(self.blendFunc)\n    hurtEffect:setFlipX(self.flipX)\n    hurtEffect:setFlipY(self.flipY)\n    hurtEffect:setContentSize(self.contentSize)\n    hurtEffect:setContentSizeInPixels(self.contentSizeInPixels)\n    hurtEffect:setAnchorPointInPoints(self.anchorPointInPoints)\n    hurtEffect:setPositionInPoints(self.positionInPoints)\n    hurtEffect:setScaleX(self.scaleX)\n    hurtEffect:setScaleY(self.scaleY)\n    hurtEffect:setSkewX(self.skewX)\n    hurtEffect:setSkewY(self.skewY)\n    hurtEffect:setLocalZOrder(self.localZOrder)\n    hurtEffect:setOpacity(self.opacity)\n    hurtEffect:setVisible(self.visible)\n    hurtEffect:setOpacityModifyRGB(self.opacityModifyRGB)\n    hurtEffect:setBlendFunc(self.blendFunc)\n    hurtEffect:setFlipX(self.flipX)\n", "CodeBleu_score": 34.968811975935296}, {"code": "function BasicCollider:hurtEffect(target)\n\t    local hurtEffect = cc.Sprite3D:create(CommonAnimations.hurtAnimation)\n    hurtEffect:setCameraMask(EnumCameraMask.HURT)\n    hurtEffect:setScale(0.5)\n    hurtEffect:setPosition(cc.p(0,0))\n    local hurtBillboard = cc.Billboard:create(cc.p(0,0), cc.p(0,0), cc.p(0,0))\n    hurtBillboard:setCameraMask(EnumCameraMask.HURT)\n    hurtBillboard:setScale(0.5)\n    hurtBillboard:setPosition(cc.p(0,0))\n    hurtEffect:addChild(hurtBillboard)\n    target:addChild(hurtEffect)\n    local hurtAction = cc.Sequence:create(cc.ScaleTo:create(0.1, 0.5), cc.ScaleTo:create(0.1, 0.5), cc.ScaleTo:create(0.1, 0.5), cc.ScaleTo:create(0.1, 0.5), cc.ScaleTo:create(0.1, 0.5), cc.RemoveSelf:create())\n    local hurtBillboardAction = cc.Sequence:create(cc.ScaleTo:create(0.1, 0.5), cc.ScaleTo:create(0.1, 0.5), cc.ScaleTo:create(0.1, 0.5), cc.ScaleTo:create(0.1, 0.5), cc.ScaleTo:create(0.1, 0.5), cc.RemoveSelf:create())\n    hurtEffect:runAction(hurtAction)\n    hurtBillboard:runAction(hurtBillboardAction)", "CodeBleu_score": 47.83444882444775}, {"code": "function BasicCollider:hurtEffect(target)\n\t    local hurtAnimation = cc.AnimationCache:getInstance():getAnimation(\"hurtAnimation\")\n    local hurtEffect = cc.Sprite3D:createWithSpriteFrameName(\"hurt.c3t\")\n    hurtEffect:setScale(0.5)\n    hurtEffect:setCameraMask(EnumCameraMask.CAMERA_MASK_UI)\n    hurtEffect:setPosition(cc.p(0,0))\n    local hurtAction = cc.Sequence:create(cc.ScaleTo:create(0.1, 1.5), cc.ScaleTo:create(0.05, 0.5), cc.CallFunc:create(function() hurtEffect:removeFromParent() end))\n    hurtEffect:runAction(hurtAction)\n    local hurtAction2 = cc.RepeatForever:create(cc.Animate:create(hurtAnimation))\n    hurtEffect:runAction(hurtAction2)\n    target:addChild(hurtEffect)", "CodeBleu_score": 53.46437559822934}]}
{"instance_id": "f478d7e70ea6", "generation_result": [{"code": "function MageNormalAttack:onTimeOut()\n\t    self.part1:stopSystem()\n    self.part2:stopSystem()\n    local delay = cc.DelayTime:create(0.5)\n    local remove = cc.RemoveSelf:create()\n    local seq = cc.Sequence:create(delay, remove)\n    self:runAction(seq)\n    local smoke = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\"iceTrail\"))\n    local magicf = cc.SpriteFrameCache:getInstance():getSpriteFrame(\"puff.png\")\n    smoke:setTextureWithRect(magicf:getTexture(), magicf:getRect())\n    smoke:setScale(2)\n    self:addChild(smoke)\n    smoke:setRotation3D({x=90, y=0, z=0})\n    smoke:setGlobalZOrder(0)\n    smoke:setPositionZ(50)\n    local pixi = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\"pixi\"))\n    local pixif = cc.SpriteFrameCache:getInstance():getSpriteFrame(\"particle.png\")\n    pixi:setTextureWithRect(pixif:getTexture(), pixif:getRect())\n    pixi:setScale(2)\n    self:addChild(pixi)\n    pixi:setRotation3D({x=90, y=0, z=0})\n    pixi:setGlobalZOrder(0)\n    pixi:setPositionZ(50)\n    self.part1 = smoke\n    self.part2 = pixi\n    self.sp:setTextureRect(RECTS.iceBolt)\n    local fade = cc.FadeTo:create(0.5, 0)\n    self.sp:runAction(fade)\n    self.sp:setScale(1.5)", "CodeBleu_score": 57.14475947483268}, {"code": "function MageNormalAttack:onTimeOut()\n\t    self.part1:stopSystem()\n    self.part2:stopSystem()\n    local delay = cc.DelayTime:create(0.5)\n    local remove = cc.RemoveSelf:create()\n    local seq = cc.Sequence:create(delay, remove)\n    self:runAction(seq)\n    local trail = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\"iceTrail\"))\n    local magicf = cc.SpriteFrameCache:getInstance():getSpriteFrame(\"puff.png\")\n    trail:setTextureWithRect(magicf:getTexture(), magicf:getRect())\n    trail:setScale(2)\n    self:addChild(trail)\n    trail:setRotation3D({x=90, y=0, z=0})\n    trail:setGlobalZOrder(0)\n    trail:setPositionZ(50)\n    self.part1 = trail\n    local pixi = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\"pixi\"))\n    local pixif = cc.SpriteFrameCache:getInstance():getSpriteFrame(\"particle.png\")\n    pixi:setTextureWithRect(pixif:getTexture(), pixif:getRect())\n    pixi:setScale(2)\n    self:addChild(pixi)\n    pixi:setRotation3D({x=90, y=0, z=0})\n    pixi:setGlobalZOrder(0)\n    pixi:setPositionZ(50)\n    self.part2 = pixi\n    self.sp:setTextureWithRect(magicf:getTexture(), magicf:getRect())\n    local fadeout = cc.FadeTo:create(0.5, 0)\n    self.sp:runAction(fadeout)\n    self.sp:setScale(2)", "CodeBleu_score": 56.18141309071034}, {"code": "function MageNormalAttack:onTimeOut()\n\t    self.part1:stopSystem()\n    self.part2:stopSystem()\n    local delay = cc.DelayTime:create(0.5)\n    local remove = cc.RemoveSelf:create()\n    local seq = cc.Sequence:create(delay, remove)\n    self:runAction(seq)\n    local magicf = cc.SpriteFrameCache:getInstance():getSpriteFrame(\"puff.png\")\n    local pixif = cc.SpriteFrameCache:getInstance():getSpriteFrame(\"particle.png\")\n    local smoke = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\"iceTrail\"))\n    local pixi = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\"pixi\"))\n    self.part1 = smoke\n    self.part2 = pixi\n    self.sp:setTextureWithRect(magicf:getTexture(), magicf:getRect())\n    self.sp:setScale(2)\n    self:addChild(smoke)\n    self:addChild(pixi)\n    smoke:setRotation3D({x=90, y=0, z=0})\n    smoke:setGlobalZOrder(0)\n    smoke:setPositionZ(50)\n    pixi:setRotation3D({x=90, y=0, z=0})\n    pixi:setGlobalZOrder(0)\n    pixi:setPositionZ(50)\n    self.sp:runAction(cc.FadeOut:create(0.5))\n    self.sp:setScale(1.5)", "CodeBleu_score": 58.487259056803545}]}
{"instance_id": "d735c4ea6358", "generation_result": [{"code": "function BattlefieldUI:heroDead(hero)\n\t    local heroActor = self._heroActors[hero]\n    if heroActor then\n        heroActor._avatar:setShaderProgram(cc.ShaderCache:getInstance():getProgram(cc.SHADER_NAME.GRAY))\n        heroActor._avatar:setGLProgramState(cc.GLProgramState:getOrCreateWithGLProgramName(cc.SHADER_NAME.GRAY))\n        heroActor._avatar:setVisible(false)\n        heroActor._avatar:setScale(0.8)\n        heroActor._avatar:setPosition3D(cc.V3(heroActor._avatar:getPosition3D().x, heroActor._avatar:getPosition3D().y, 0))\n        heroActor._avatar:setLocalZOrder(1)\n        heroActor._avatar:setOpacity(128)\n        heroActor._avatar:setScale(0.8)\n        heroActor._avatar:setRotation3D(cc.V3(0, 0, 0))\n        heroActor._avatar:setSkewX(0)\n        heroActor._avatar:setSkewY(0)\n        heroActor._avatar:setAnchorPoint(cc.p(0.5, 0.5))\n        heroActor._avatar:setCascadeOpacityEnabled(true)\n        heroActor._avatar:setCascadeColorEnabled(true)\n        heroActor._avatar:setCascadeSkewEnabled(true)\n        heroActor._avatar:setCascadeScaleEnabled(true)\n        heroActor._avatar:setCascadeRotationEnabled(true)\n        heroActor._avatar:setCascadeOpacityEnabled(true)\n        heroActor._avatar:setCascadeColorEnabled(true)\n        heroActor._avatar:setCascadeSkewEnabled(true)\n        heroActor._avatar:setCascadeScaleEnabled(true)\n        heroActor._avatar:setCascadeRotationEnabled(true)\n        heroActor._avatar:setC", "CodeBleu_score": 35.22790474084082}, {"code": "function BattlefieldUI:heroDead(hero)\n\t    if hero._name == \\\"Knight\\\" then\n        self.KnightPng:setGLProgramState(grey)\n        self.KnightFrame:setGLProgramState(grey)\n        self.KnightAngry:setVisible(false)\n        self.KnightAngryClone:setVisible(false)\n    elseif hero._name == \\\"Mage\\\" then\n        self.MagePng:setGLProgramState(grey)\n        self.MageFrame:setGLProgramState(grey)\n        self.MageAngry:setVisible(false)\n        self.MageAngryClone:setVisible(false)\n    elseif hero._name == \\\"Archer\\\" then\n        self.ArcherPng:setGLProgramState(grey)\n        self.ArcherFrame:setGLProgramState(grey)\n        self.ArcherAngry:setVisible(false)\n        self.ArcherAngryClone:setVisible(false)\n    end", "CodeBleu_score": 27.922414471231793}, {"code": "function BattlefieldUI:heroDead(hero)\n\t    if hero._name == \"Knight\" then\n        hero._knightPng:setGLProgramState(greyState)\n        hero._knightFrame:setGLProgramState(greyState)\n        hero._knightAngryFullSignal:setVisible(false)\n        hero._knightAngryClone:setVisible(false)\n    elseif hero._name == \"Mage\" then\n        hero._magePng:setGLProgramState(greyState)\n        hero._mageFrame:setGLProgramState(greyState)\n        hero._mageAngryFullSignal:setVisible(false)\n        hero._mageAngryClone:setVisible(false)\n    elseif hero._name == \"Archer\" then\n        hero._archerPng:setGLProgramState(greyState)\n        hero._archerFrame:setGLProgramState(greyState)\n        hero._archerAngryFullSignal:setVisible(false)\n        hero._archerAngryClone:setVisible(false)\n    end", "CodeBleu_score": 49.74788148616312}]}
{"instance_id": "009f167d3ab2", "generation_result": [{"code": "local function moveCamera(dt)\n\t    if specialCamera.valid then\n        local cameraPos = specialCamera.position\n        local cameraTarget = cameraPos + cc.p(0, 0)\n        local cameraLookAt = cameraPos + cameraOffset\n        local cameraMoveSpeed = 1000\n        local cameraRotateSpeed = 1\n        local cameraDistance = math.sqrt(math.pow(cameraPos.x - cameraTarget.x, 2) + math.pow(cameraPos.y - cameraTarget.y, 2))\n        local cameraDelta = (cameraMoveSpeed * dt) / cameraDistance\n        local cameraNewPos = cc.p(cameraPos.x + (cameraTarget.x - cameraPos.x) * cameraDelta, cameraPos.y + (cameraTarget.y - cameraPos.y) * cameraDelta)\n        local cameraNewLookAt = cc.p(cameraLookAt.x + (cameraTarget.x - cameraLookAt.x) * cameraDelta, cameraLookAt.y + (cameraTarget.y - cameraLookAt.y) * cameraDelta)\n        local cameraNewPosDelta = cc.p(cameraNewPos.x - cameraPos.x, cameraNewPos.y - cameraPos.y)\n        local cameraNewLookAtDelta = cc.p(cameraNewLookAt.x - cameraLookAt.x, cameraNewLookAt.y - cameraLookAt.y)\n        local cameraNewPosDeltaLength = math.sqrt(math.pow(cameraNewPosDelta.x, 2) + math.pow(cameraNewPosDelta.y, 2))\n        local cameraNewLookAtDeltaLength = math.sqrt(math.pow(cameraNewLookAtDelta.x, 2) + math.pow(cameraNewLookAtDelta.y, 2))\n        local cameraNewPosDeltaRatio = cameraNewPosDeltaLength / cameraDistance\n        local cameraNewLookAtDeltaRatio = cameraNewLookAtDeltaLength / cameraDistance\n        local cameraNewPosDeltaRatioRounded = math.floor(cameraNewPosDeltaRatio * 100) / 100\n        local cameraNewLookAtDeltaRatioRounded = math.floor(cameraNewLookAtDeltaRatio * 1", "CodeBleu_score": 35.35023324220495}, {"code": "local function moveCamera(dt)\n\t    if not specialCamera.valid then\n        if gameMaster.heroCount > 0 then\n            local heroFocus = gameMaster.heroFocus\n            local heroFocusPosition = heroFocus:getPosition()\n            local heroFocusPosition3D = cc.V3(heroFocusPosition.x, heroFocusPosition.y, 0)\n            local cameraPosition = heroFocusPosition3D - cameraOffset\n            local cameraPosition3D = cc.V3(cameraPosition.x, cameraPosition.y, 0)\n            local cameraTargetPosition = cameraPosition3D\n            local cameraTargetPosition3D = cameraTargetPosition\n            local cameraTargetPosition3D = cameraTargetPosition3D + cc.V3(0, 0, 100)\n            local cameraTargetPosition = cc.V2(cameraTargetPosition3D.x, cameraTargetPosition3D.y)\n            local cameraTargetPosition3D = cc.V3(cameraTargetPosition.x, cameraTargetPosition.y, 0)\n            local cameraTargetPosition3D = cameraTargetPosition3D + cameraOffset\n            local cameraTargetPosition = cc.V2(cameraTargetPosition3D.x, cameraTargetPosition3D.y)\n            local cameraTargetPosition3D = cc.V3(cameraTargetPosition.x, cameraTargetPosition.y, 0)\n            local cameraTargetPosition3D = cameraTargetPosition3D + cc.V3(0, 0, 100)\n            local cameraTargetPosition = cc.V2(cameraTargetPosition3D.x, cameraTargetPosition3D.y)\n            local cameraTargetPosition3D = cc.V3(cameraTargetPosition.x, cameraTargetPosition.y, 0)\n            local cameraTargetPosition3D = cameraTargetPosition3D + cameraOffset\n            local cameraTargetPosition = cc.V2(cameraTargetPosition3D.x, cameraTargetPosition3D.y)\n            local cameraTargetPosition3D = cc.V3(cameraTargetPosition.x, cameraTargetPosition.y, 0)\n            local cameraTargetPosition3D = cameraTargetPosition3D + cc.V3(0, 0, 100)\n            local cameraTargetPosition = cc.V2(cameraTarget", "CodeBleu_score": 36.95131869311427}, {"code": "local function moveCamera(dt)\n\t\tif specialCamera.valid then\n\t\tlocal camera = cc.Director:getInstance():getRunningScene():getDefaultCamera()\n\t\tlocal cameraPosition = camera:getPosition()\n\t\tlocal targetPosition = specialCamera.position\n\t\tlocal targetOrientation = specialCamera.orientation\n\t\tlocal cameraPosition = cc.p(cameraPosition.x + (targetPosition.x - cameraPosition.x) * dt * 10, cameraPosition.y + (targetPosition.y - cameraPosition.y) * dt * 10)\n\t\tlocal cameraOrientation = cc.p(targetOrientation.x, targetOrientation.y)\n\t\tcamera:setPosition(cameraPosition)\n\t\tcamera:setLookAt(cameraOrientation)\n\t\tspecialCamera.valid = false\n\tend\n\tlocal camera = cc.Director:getInstance():getRunningScene():getDefaultCamera()\n\tlocal cameraPosition = camera:getPosition()\n\tlocal cameraOrientation = camera:getLookAt()\n\tlocal cameraPosition = cc.p(cameraPosition.x + (targetPosition.x - cameraPosition.x) * dt * 10, cameraPosition.y + (targetPosition.y - cameraPosition.y) * dt * 10)\n\tlocal cameraOrientation = cc.p(targetOrientation.x, targetOrientation.y)\n\tcamera:setPosition(cameraPosition)\n\tcamera:setLookAt(cameraOrientation)", "CodeBleu_score": 38.590694070580255}]}
{"instance_id": "f7f5e7fe1dc2", "generation_result": [{"code": "local function updateParticlePos()\n\t    for i=1, List.getSize(HeroManager) do \n        local hero = List.get(HeroManager, i) \n        if hero.effectNode ~= nil then \n            local pos = getPosTable(hero) \n            hero.effectNode:setPosition(cc.p(pos.x, pos.y)) \n        end \n    end ", "CodeBleu_score": 45.96179979294279}, {"code": "local function updateParticlePos()\n\t    local hero = nil\n    for i = 1, List.getSize(HeroManager) do\n        hero = List.get(HeroManager, i)\n        if hero.effectNode ~= nil then\n            hero.effectNode:setPosition(hero.position)\n        end\n    end", "CodeBleu_score": 45.300414845806856}, {"code": "local function updateParticlePos()\n\t    for i = 1, List.getSize(HeroManager) do\n        local hero = HeroManager:get(i)\n        if hero.effectNode ~= nil then\n            hero.effectNode:setPosition(cc.p(hero.position.x, hero.position.y))\n        end\n    end", "CodeBleu_score": 49.90458614362511}]}
{"instance_id": "77829ef7341e", "generation_result": [{"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t    local hero = self.layer:getChildByTag(sortorder[2])\n    local type = hero:getRaceType()\n    if hero._name == \"Knight\" then\n        AudioEngine.playEffect(\"chooseRole/knight_select.mp3\")\n    elseif hero._name == \"Archer\" then\n        AudioEngine.playEffect(\"chooseRole/archer_select.mp3\")\n    elseif hero._name == \"Mage\" then\n        AudioEngine.playEffect(\"chooseRole/mage_select.mp3\")\n    end", "CodeBleu_score": 71.6364720399741}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\t--get hero type\n\tlocal hero = self.layer:getChildByTag(sortorder[2])\n\tlocal type = hero:getRaceType()\n\t--play audio\n\tif type == \\\"Knight\\\" then\n\t\tcc.SimpleAudioEngine:sharedEngine():playEffect(\\\"chooseRole/knight.wav\\\")\n\telseif type == \\\"Archer\\\" then\n\t\tcc.SimpleAudioEngine:sharedEngine():playEffect(\\\"chooseRole/archer.wav\\\")\n\telseif type == \\\"Mage\\\" then\n\t\tcc.SimpleAudioEngine:sharedEngine():playEffect(\\\"chooseRole/mage.wav\\\")\n\tend", "CodeBleu_score": 40.970936270719385}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\tlocal hero = self.layer:getChildByTag(sortorder[2])\n\tlocal type = hero:getRaceType()\n\tif type == \\\"Knight\\\" then\n\t\tself._audio:playEffect(\\\"knight.mp3\\\")\n\telseif type == \\\"Archer\\\" then\n\t\tself._audio:playEffect(\\\"archer.mp3\\\")\n\telseif type == \\\"Mage\\\" then\n\t\tself._audio:playEffect(\\\"mage.mp3\\\")\n\tend", "CodeBleu_score": 38.54748985341173}]}
{"instance_id": "2b35fdb15a13", "generation_result": [{"code": "function GameMaster:AddHeros()\n\t\tlocal knight = Knight.create()\n\tknight:setPosition(cc.p(200, 300))\n\tself:addChild(knight)\n\tknight:setZOrder(gloableZOrder)\n\tknight:setIdle()\n\tHeroManager:push(knight)\n\t\n\tlocal mage = Mage.create()\n\tmage:setPosition(cc.p(size.width - 200, 300))\n\tself:addChild(mage)\n\tmage:setZOrder(gloableZOrder)\n\tmage:setIdle()\n\tHeroManager:push(mage)\n\t\n\tlocal archer = Archer.create()\n\tarcher:setPosition(cc.p(size.width - 200, 100))\n\tself:addChild(archer)\n\tarcher:setZOrder(gloableZOrder)\n\tarcher:setIdle()\n\tHeroManager:push(archer)", "CodeBleu_score": 52.70464149563915}, {"code": "function GameMaster:AddHeros()\n\t\tlocal knight = Knight.create()\n\tknight:setPosition(cc.p(size.width/2, size.height/2))\n\tself._layer:addChild(knight)\n\tknight:setIdleMode()\n\tHeroManager:push(knight)\n\n\tlocal mage = Mage.create()\n\tmage:setPosition(cc.p(size.width/2, size.height/2))\n\tself._layer:addChild(mage)\n\tmage:setIdleMode()\n\tHeroManager:push(mage)\n\n\tlocal archer = Archer.create()\n\tarcher:setPosition(cc.p(size.width/2, size.height/2))\n\tself._layer:addChild(archer)\n\tarcher:setIdleMode()\n\tHeroManager:push(archer)", "CodeBleu_score": 53.30394692479795}, {"code": "function GameMaster:AddHeros()\n\t\tlocal knight = Knight.create()\n\tknight:setPosition(cc.p(100, 100))\n\tself:addChild(knight)\n\tknight:setIdle()\n\tHeroManager:add(knight)\n\t\n\tlocal mage = Mage.create()\n\tmage:setPosition(cc.p(100, 200))\n\tself:addChild(mage)\n\tmage:setIdle()\n\tHeroManager:add(mage)\n\t\n\tlocal archer = Archer.create()\n\tarcher:setPosition(cc.p(100, 300))\n\tself:addChild(archer)\n\tarcher:setIdle()\n\tHeroManager:add(archer)", "CodeBleu_score": 53.77920920652074}]}
{"instance_id": "cdfbc82ff3cd", "generation_result": [{"code": "function GameMaster:showBoss()\n\t    local boss = Rat:create()\n    boss:setCameraMask(1)\n    currentLayer:addChild(boss)\n    boss:setPosition(battleSiteX[3], 100)\n    boss:setFacing(0)\n    boss:setAIEnabled(false)\n    boss:bounceOut()\n    boss:setAIEnabled(true)\n    List.pushlast(MonsterManager, boss)", "CodeBleu_score": 32.20552979264366}, {"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat:create()\n\tboss:setCameraMask(boss:getCameraMask())\n\tcurrentLayer:addChild(boss)\n\tboss:setPosition(battleSiteX[3], 0)\n\tboss:setFacing(180)\n\tboss:setAIEnabled(false)\n\tboss:bounceOut(1)\n\tboss:setAIEnabled(true)\n\tList.pushlast(MonsterManager, boss)", "CodeBleu_score": 31.567742481396166}, {"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat:create()\n\tboss:setCameraMask(1)\n\tcurrentLayer:addChild(boss)\n\tboss:setPosition(battleSiteX[3], 0)\n\tboss:setFacing(0)\n\tboss:setAIEnabled(false)\n\tboss:bounceOut()\n\tboss:setAIEnabled(true)\n\tList.pushlast(MonsterManager, boss)", "CodeBleu_score": 29.774052286007947}]}
{"instance_id": "fa7b402853bb", "generation_result": [{"code": "function createAnimation(file, begin, finish, speed)\n\t    local animation = cc.Animation3D:create(file) \n    local animate3d = cc.Animate3D:create(animation, begin, finish) \n    animate3d:setSpeed(speed) \n    animate3d:retain() \n    return animate3d ", "CodeBleu_score": 71.68840026743554}, {"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation = Animation3D:create(file)\n\tlocal animate3d = Animate3D:create(animation, begin, finish)\n\tanimate3d:setSpeed(speed)\n\tanimate3d:retain()\n\treturn animate3d", "CodeBleu_score": 51.763237587755995}, {"code": "function createAnimation(file, begin, finish, speed)\n\t    local animation = Animation3D:create(file)\n    local animate = Animate3D:create(animation, begin, finish)\n    animate:setSpeed(speed)\n    animate:retain()\n    return animate", "CodeBleu_score": 47.03972428393147}]}
{"instance_id": "0725f2413b6b", "generation_result": [{"code": "function removeAll(table)\n\t    for k, v in pairs(table) do \n        table[k] = nil \n    end ", "CodeBleu_score": 41.505951478503476}, {"code": "function removeAll(table)\n\t    for k, v in pairs(table) do \n        table[k] = nil \n    end ", "CodeBleu_score": 41.505951478503476}, {"code": "function removeAll(table)\n\t    for k, v in pairs(table) do \n        if type(v) == 'table' then \n            removeAll(v) \n        else \n            table[k] = nil \n        end \n    end ", "CodeBleu_score": 47.02987686871016}]}
{"instance_id": "526d10bb37bb", "generation_result": [{"code": "function delayExecute(target, func, delay)\n\t    local delayAction = cc.DelayTime:create(delay)\n    local callFunc = cc.CallFunc:create(func)\n    local sequence = cc.Sequence:create(delayAction, callFunc)\n    target:runAction(sequence)", "CodeBleu_score": 57.993377903199914}, {"code": "function delayExecute(target, func, delay)\n\t    local delayAction = cc.DelayTime:create(delay)\n    local callFunc = cc.CallFunc:create(func)\n    local sequence = cc.Sequence:create(delayAction, callFunc)\n    target:runAction(sequence)", "CodeBleu_score": 57.993377903199914}, {"code": "function delayExecute(target, func, delay)\n\t    local seq = cc.Sequence:create(cc.DelayTime:create(delay), cc.CallFunc:create(func))\n    target:runAction(seq)", "CodeBleu_score": 61.495930663300754}]}
{"instance_id": "3b277bd3d0d0", "generation_result": [{"code": "function LoadingScene:addLoadingText(layer)\n\t    local font = \"fonts/Marker Felt.ttf\"\n    self._loading = {}\n    for i=1,table.getn(self._loadingText) do\n        local label = cc.Label:createWithTTF(self._loadingText[i],font,32)\n        label:setPosition(self.size.width/2,self.size.height*0.15+i*40)\n        label:setColor(cc.c3b(255,255,255))\n        layer:addChild(label)\n        self._loading[i] = label\n    end", "CodeBleu_score": 44.56163644322342}, {"code": "function LoadingScene:addLoadingText(layer)\n\t    local font = \"fonts/Marker Felt.ttf\"\n    local loadingText = {}\n    for i=1,table.getn(self._loadingText) do\n        local label = cc.Label:createWithTTF(self._loadingText[i], font, 24)\n        label:setPosition(self.size.width/2,self.size.height*0.2+50*i)\n        label:setColor(cc.c3b(0,0,0))\n        label:setOpacity(70)\n        layer:addChild(label)\n        table.insert(loadingText,label)\n    end\n    self._loading = loadingText", "CodeBleu_score": 44.534134981554125}, {"code": "function LoadingScene:addLoadingText(layer)\n\t    local font = cc.LabelTTF:create(\\\"loading\\\",\\\"fonts/Marker Felt.ttf\\\",30)\n    font:setColor(cc.c3b(255,255,255))\n    font:setPosition(self.size.width/2,self.size.height*0.2)\n    font:setPositionZ(100)\n    layer:addChild(font)\n    self._loading = {font}", "CodeBleu_score": 23.146975175701513}]}
{"instance_id": "68250ae97644", "generation_result": [{"code": "function MainMenuScene.create()\n\t    local scene = MainMenuScene.new()\n    local layer = MainMenuLayer.new()\n    layer:setName(\\\"MainMenuLayer\\\")\n    scene:addChild(layer)\n    return scene", "CodeBleu_score": 72.66296464321539}, {"code": "function MainMenuScene.create()\n\t    local scene = MainMenuScene.new()\n    local layer = MainMenuLayer.new()\n    layer:setName(\\\"MainMenuLayer\\\")\n    layer:setPosition(0,0)\n    scene:addChild(layer)\n    return scene", "CodeBleu_score": 70.2869670174274}, {"code": "function MainMenuScene.create()\n\t    --create a scene object\n    local scene = cc.Scene:create()\n    --create a layer object\n    local layer = MainMenuLayer.new()\n    --add layer to scene\n    scene:addChild(layer)\n    --return the scene\n    return scene", "CodeBleu_score": 65.38872873490756}]}
{"instance_id": "81470efbb6ff", "generation_result": [{"code": "local function collision(object)\n\n\t    local objectPool = getPoolByName(object._name)\n    local objectPos = cc.p(object:getPosition())\n    local objectRadius = object._radius\n    local objectMass = object._mass\n    local objectName = object._name\n    local objectSpeed = object._speed\n    local objectDamage = object._damage\n    local objectHp = object._hp\n    local objectHpMax = object._hpMax\n    local objectSpeedMax = object._speedMax\n    local objectSpeedMin = object._speedMin\n    local objectSpeedX = object._speedX\n    local objectSpeedY = object._speedY\n    local objectSpeedXMax = object._speedXMax\n    local objectSpeedYMax = object._speedYMax\n    local objectSpeedXMin = object._speedXMin\n    local objectSpeedYMin = object._speedYMin\n    local objectDirection = object._direction\n    local objectIsDead = object._isDead\n    local objectIsAlive = object._isAlive\n    local objectIsFlying = object._isFlying\n    local objectIsAttacking = object._isAttacking\n    local objectIsDying = object._isDying\n    local objectIsDyingTime = object._isDyingTime\n    local objectIsDyingTimeMax = object._isDyingTimeMax\n    local objectIsDyingTimeMin = object._isDyingTimeMin\n    local objectIsDyingTimeMax = object._isDyingTimeMax\n    local objectIsDyingTimeMin = object._isDyingTimeMin\n    local objectIsDyingTimeMax = object._isDyingTimeMax\n    local objectIsDyingTimeMin = object._isDyingTimeMin\n    local objectIsDyingTimeMax = object._isDyingTimeMax\n    local objectIsDyingTimeMin = object._isDyingTimeMin\n    local objectIsDyingTimeMax = object._isDyingTimeMax\n    local objectIsDyingTimeMin = object._isDyingTimeMin\n    local objectIsDyingTimeMax = object._isDyingTimeMax\n    local objectIsDyingTimeMin = object._isDyingTimeMin\n    local objectIsDyingTimeMax = object._isDyingTimeMax\n    local objectIsD", "CodeBleu_score": 24.762853566716377}, {"code": "local function collision(object)\n\n\t    for i = 1, HeroManager:size() do\n        local hero = HeroManager:get(i)\n        if hero._alive then\n            solveCollision(object, hero)\n        end\n    end\n    for i = 1, MonsterManager:size() do\n        local monster = MonsterManager:get(i)\n        if monster._alive then\n            solveCollision(object, monster)\n        end\n    end", "CodeBleu_score": 41.24785478528522}, {"code": "local function collision(object)\n\n\t    for i = 1, HeroManager:size() do\n        local hero = HeroManager:get(i)\n        if hero:isAlive() and hero ~= object then\n            solveCollision(object, hero)\n        end\n    end\n \n    for i = 1, MonsterManager:size() do\n        local monster = MonsterManager:get(i)\n        if monster:isAlive() and monster ~= object then\n            solveCollision(object, monster)\n        end\n    end", "CodeBleu_score": 42.69332749027443}]}
{"instance_id": "f8915bebdc0e", "generation_result": [{"code": "function collisionDetect(dt)\n\t    for val = HeroManager.last, HeroManager.first, -1 do\n        local sprite = HeroManager[val]\n        if sprite._isalive then\n            collision(sprite)\n            isOutOfBound(sprite)\n        else\n            HeroManager:remove(sprite)\n        end\n    end\n\n    for val = MonsterManager.last, MonsterManager.first, -1 do\n        local sprite = MonsterManager[val]\n        if sprite._isalive then\n            collision(sprite)\n            isOutOfBound(sprite)\n        else\n            MonsterManager:remove(sprite)\n        end\n    end", "CodeBleu_score": 71.94470308626634}, {"code": "function collisionDetect(dt)\n\t    for val = HeroManager.last, HeroManager.first, -1 do\n        local sprite = HeroManager[val]\n        if sprite._isalive == true then\n            collision(sprite)\n            isOutOfBound(sprite)\n        else\n            HeroManager:remove(sprite)\n        end\n    end\n\n    for val = MonsterManager.last, MonsterManager.first, -1 do\n        local sprite = MonsterManager[val]\n        if sprite._isalive == true then\n            collision(sprite)\n            isOutOfBound(sprite)\n        else\n            MonsterManager:remove(sprite)\n        end\n    end", "CodeBleu_score": 77.61383790266356}, {"code": "function collisionDetect(dt)\n\t    for val = HeroManager.last, HeroManager.first, -1 do \n        local sprite = HeroManager[val] \n        if sprite._isalive then \n            collision(sprite) \n            isOutOfBound(sprite) \n        else \n            HeroManager:remove(val) \n        end \n    end \n\n    for val = MonsterManager.last, MonsterManager.first, -1 do \n        local sprite = MonsterManager[val] \n        if sprite._isalive then \n            collision(sprite) \n            isOutOfBound(sprite) \n        else \n            MonsterManager:remove(val) \n        end \n    end ", "CodeBleu_score": 71.1805977161514}]}
{"instance_id": "fc081bb122f5", "generation_result": [{"code": "function Actor:specialAttack()\n\t    BasicCollider.create(self._myPos, self._curFacing, self._specialAttack)\n    self:specialAttackSoundEffects()", "CodeBleu_score": 84.83328024239812}, {"code": "function Actor:specialAttack()\n\t    BasicCollider.create(self._myPos, self._curFacing, self._specialAttack)\n    self:specialAttackSoundEffects()", "CodeBleu_score": 84.83328024239812}, {"code": "function Actor:specialAttack()\n\t    BasicCollider.create(self._myPos, self._curFacing, self._specialAttack)\n    self:specialAttackSoundEffects()", "CodeBleu_score": 84.83328024239812}]}
{"instance_id": "bfc98809aacb", "generation_result": [{"code": "function Slime:angryFace(trueFalse)\n\t    if self._angryFace ~= trueFalse then\n        self._angryFace = trueFalse\n        if self._angryFace then\n            self._sprite3d:setTexture(\"model/slime/baozi.jpg\")\n        else\n            self._sprite3d:setTexture(\"model/slime/slime.jpg\")\n        end\n    end", "CodeBleu_score": 79.55457865240345}, {"code": "function Slime:angryFace(trueFalse)\n\t    if self._angryFace ~= trueFalse then\n        if trueFalse then\n            self._sprite3d:setTexture(\"model/slime/baozi.jpg\")\n        else\n            self._sprite3d:setTexture(\"model/slime/baozi.jpg\")\n        end\n        self._angryFace = trueFalse\n    end", "CodeBleu_score": 79.92907579636437}, {"code": "function Slime:angryFace(trueFalse)\n\t    if self._angryFace ~= trueFalse then\n        self._angryFace = trueFalse\n        if trueFalse then\n            self._sprite3d:setTexture(\"model/slime/baozi.jpg\")\n        else\n            self._sprite3d:setTexture(\"model/slime/slime.jpg\")\n        end\n    end", "CodeBleu_score": 88.62812612021855}]}
{"instance_id": "546a0b8fb77b", "generation_result": [{"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t    val width = paint.measureText(char.toString()).toInt()\n    val height = paint.fontMetricsInt.bottom - paint.fontMetricsInt.top\n\n    // Create bitmap\n    val bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\n\n    // Draw text\n    val canvas = Canvas(bitmap)\n    canvas.drawText(char.toString(), 0f, paint.fontMetricsInt.bottom.toFloat(), paint)\n\n    // Convert bitmap to pixel data\n    val pixels = IntArray(width * height)\n    bitmap.getPixels(pixels, 0, width, 0, 0, width, height)\n\n    // Recycle bitmap\n    bitmap.recycle()\n\n    // Construct Pixmap with pixel data\n    return Pixmap(width, height, Pixmap.Format.RGBA8888, pixels, width * 4)\n}", "CodeBleu_score": 45.696963253578765}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t    val bitmap = Bitmap.createBitmap(1, 1, Bitmap.Config.ARGB_8888)\n    val canvas = Canvas(bitmap)\n    canvas.drawText(char.toString(), 0f, 0f, paint)\n    val pixels = IntArray(1)\n    bitmap.getPixels(pixels, 0, 1, 0, 0, 1, 1)\n    bitmap.recycle()\n    return Pixmap(pixels, 1, 1, Pixmap.Format.RGBA8888)\n}", "CodeBleu_score": 22.15230765289612}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t    val bitmap = Bitmap.createBitmap(1, 1, Bitmap.Config.ARGB_8888)\n    val canvas = Canvas(bitmap)\n    canvas.drawText(char.toString(), 0f, 0f, paint)\n\n    val pixelData = bitmap.lockPixels()\n    val pixmap = Pixmap(bitmap.width, bitmap.height, Pixmap.Format.RGBA8888)\n    pixmap.setPixels(pixelData, 0, bitmap.width, 0, 0, bitmap.width, bitmap.height)\n    bitmap.recycle()\n\n    return pixmap\n}", "CodeBleu_score": 26.97087170349851}]}
{"instance_id": "9c1ce2567ce1", "generation_result": [{"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t        val uri = Uri.parse(suggestedLocation)\n        val filename = uri.lastPathSegment\n        val request = Request(\n            onFileChosen = {\n                try {\n                    val outputStream = contentResolver.openOutputStream(it)\n                    outputStream?.write(data.toByteArray())\n                    outputStream?.close()\n                    onSaved(it.toString())\n                } catch (ex: Exception) {\n                    Log.e(ex.message)\n                    onError(ex)\n                }\n            },\n            onError = onError\n        )\n        requests[requestCode++] = request\n        val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n            addCategory(Intent.CATEGORY_OPENABLE)\n            type = \"application/json\"\n            putExtra(Intent.EXTRA_TITLE, filename)\n        }\n        activity.startActivityForResult(intent, requestCode)\n    }", "CodeBleu_score": 56.40811667187623}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t        val uri = parseUri(suggestedLocation)\n        val filename = uri.lastPathSegment\n        val request = Request(\n            onFileChosen = { chosenUri ->\n                try {\n                    contentResolver.openOutputStream(chosenUri, \"w\")?.use { out ->\n                        out.write(data.toByteArray())\n                    }\n                    onSaved(chosenUri.toString())\n                } catch (ex: Exception) {\n                    onError(ex)\n                }\n            },\n            onError = onError\n        )\n        requests[requestCode] = request\n        val intent = Intent(Intent.ACTION_OPEN_DOCUMENT_TREE).apply {\n            addCategory(Intent.CATEGORY_DEFAULT)\n            putExtra(Intent.EXTRA_TITLE, \"Choose a directory\")\n            putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n        }\n        activity.startActivityForResult(intent, requestCode)\n        requestCode++\n    }", "CodeBleu_score": 57.56999964443699}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t        val uri = parseUri(suggestedLocation)\n        val filename = getFilename(uri)\n        val request = Request(onSaved, onError)\n        requests[requestCode] = request\n        val intent = Intent(Intent.ACTION_OPEN_DOCUMENT_TREE).apply {\n            putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n        }\n        activity.startActivityForResult(intent, requestCode++)\n    }", "CodeBleu_score": 38.17427254714546}]}
{"instance_id": "ea556fe12030", "generation_result": [{"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n        val onFileChosen = { uri: Uri ->\n            var stream: InputStream? = null\n            try {\n                stream = contentResolver.openInputStream(uri)\n                val data = stream!!.reader().use { it.readText() }\n                onLoaded(data, uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openLoadFileChooser(requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 91.47628669154824}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n        // When we loaded, we returned a \\\"content://\\\" URI as file location.\n        val suggestedUri = Uri.parse(PlatformSaverLoader.SAVED_GAMES_DIR)\n        val onFileChosen = { uri: Uri ->\n            var stream: InputStream? = null\n            try {\n                stream = contentResolver.openInputStream(uri)\n                stream!!.reader().use { onLoaded(it.readText(), uri.toString()) }\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openLoadFileChooser(requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 83.64904932379864}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n        // When we loaded, we returned a \\\"content://\\\" URI as file location.\n        val onFileChosen = { uri: Uri ->\n            var stream: InputStream? = null\n            try {\n                stream = contentResolver.openInputStream(uri)\n                val data = stream!!.reader().use { it.readText() }\n                onLoaded(data, uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openLoadFileChooser(requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 91.47628669154824}]}
{"instance_id": "813990d9bb4d", "generation_result": [{"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t    val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n            addCategory(Intent.CATEGORY_OPENABLE)\n            type = \\\"application/json\\\"\n            putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n            putExtra(DocumentsContract.EXTRA_INITIAL_DOCUMENTS, arrayOf(uri))\n            putExtra(DocumentsContract.EXTRA_TITLE, fileName)\n        }\n        activity.startActivityForResult(intent, requestCode)\n    }", "CodeBleu_score": 63.4522950116686}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t    val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n        addCategory(Intent.CATEGORY_OPENABLE)\n        type = \"application/json\"\n        putExtra(DocumentsContract.EXTRA_INITIAL_DOCUMENTS, arrayOf(uri))\n        putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n        putExtra(DocumentsContract.EXTRA_FILE_NAME, fileName)\n    }\n    activity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 65.77261100882303}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t    val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n        addCategory(Intent.CATEGORY_OPENABLE)\n        type = \"application/json\"\n        putExtra(Intent.EXTRA_TITLE, fileName)\n        if (uri.scheme == \"content\") putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n    }\n    activity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 71.32405023330806}]}
{"instance_id": "a423b39ba6fe", "generation_result": [{"code": "fun createNotificationChannelInfo(appContext: Context){\n\t    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n        val name = appContext.getString(R.string.notification_channel_info_name)\n        val descriptionText = appContext.getString(R.string.notification_channel_info_description)\n        val importance = NotificationManager.IMPORTANCE_DEFAULT\n        val channel = NotificationChannel(NOTIFICATION_CHANNEL_ID_INFO, name, importance).apply {\n            description = descriptionText\n        }\n        val notificationManager: NotificationManager = appContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n        notificationManager.createNotificationChannel(channel)\n    }\n}", "CodeBleu_score": 56.783854030415704}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\t    // Create the NotificationChannel, but only on API 26+ because\n    // the NotificationChannel class is new and not in the support library\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n        val name = appContext.getString(R.string.notification_channel_info_name)\n        val descriptionText = appContext.getString(R.string.notification_channel_info_description)\n        val importance = NotificationManager.IMPORTANCE_DEFAULT\n        val channel = NotificationChannel(NOTIFICATION_CHANNEL_ID_INFO, name, importance).apply {\n            description = descriptionText\n        }\n        // Register the channel with the system\n        val notificationManager: NotificationManager =\n            appContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n        notificationManager.createNotificationChannel(channel)\n    }\n}", "CodeBleu_score": 56.77589758165965}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\t    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n        val name = appContext.getString(com.unciv.R.string.notification_channel_info_name)\n        val descriptionText = appContext.getString(com.unciv.R.string.notification_channel_info_description)\n        val importance = NotificationManager.IMPORTANCE_LOW\n        val channel = NotificationChannel(NOTIFICATION_CHANNEL_ID_INFO, name, importance).apply {\n            description = descriptionText\n        }\n        // Register the channel with the system\n        val notificationManager: NotificationManager =\n            appContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n        notificationManager.createNotificationChannel(channel)\n    }\n}", "CodeBleu_score": 60.2240167923059}]}
{"instance_id": "4f3e7f77a567", "generation_result": [{"code": "fun packImages(workingPath: String){\n\t    val settings = getDefaultSettings()\n    val atlas = TexturePacker.process(settings, workingPath, \"../android/assets/\", \"game\")\n\n    // Write the atlas to a json file\n    val json = Json()\n    val jsonFile = File(\"$workingPath/../android/assets/game.json\")\n    jsonFile.parentFile.mkdirs()\n    Files.write(jsonFile.toPath(), json.toJson(atlas).toByteArray())\n\n    // Pack the images into a png file\n    packImages(workingPath, atlas)\n}", "CodeBleu_score": 42.478853314624345}, {"code": "fun packImages(workingPath: String){\n\t    val settings = getDefaultSettings()\n    val atlasName = \"game\"\n    val atlasPath = \"$workingPath/android/assets/$atlasName.atlas\"\n    val atlasJson = \"$workingPath/android/assets/$atlasName.json\"\n    val pngPath = \"$workingPath/android/assets/$atlasName.png\"\n\n    val atlas = TexturePacker.process(settings, \"$workingPath/assets\", \"$workingPath/android/assets\", atlasName)\n\n    // Save atlas to json\n    val json = Json()\n    json.writeValue(File(atlasJson), atlas)\n\n    // Save atlas to png\n    val png = atlas.getTexture()\n    png.save(pngPath)\n\n    // Pack images for mods\n    val modsDir = File(\"$workingPath/mods\")\n    if (modsDir.exists()) {\n        modsDir.listFiles()?.forEach { mod ->\n            if (mod.isDirectory && !mod.name.startsWith(\".\")) {\n                try {\n                    TexturePacker.process(settings, \"$mod/assets\", \"$workingPath/android/assets\", mod.name)\n                } catch (e: Exception) {\n                    println(\"Error packing images for mod ${mod.name}: ${e.message}\")\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 46.22590893214521}, {"code": "fun packImages(workingPath: String){\n\t    val mainAssetsFolder = File(workingPath)\n    val modsFolder = File(workingPath + \"/mods\")\n    val settings = getDefaultSettings()\n\n    // Pack images for the main assets folder\n    println(\\\"Packing images for main assets folder\\\")\n    try {\n        TexturePacker.process(settings, mainAssetsFolder.absolutePath, \\\"atlas\\\", \\\"png\\\")\n    } catch (e: Exception) {\n        println(\\\"Error packing images for main assets folder: \\\" + e.message)\n    }\n\n    // Scan the mods folder and pack images for each mod\n    println(\\\"Packing images for mods\\\")\n    if (modsFolder.exists()) {\n        modsFolder.listFiles()?.forEach { modFolder ->\n            if (!modFolder.isHidden()) {\n                try {\n                    val modName = modFolder.name\n                    val modAssetsFolder = File(modFolder, \\\"assets\\\")\n                    if (modAssetsFolder.exists()) {\n                        println(\\\"Packing images for mod: \\\" + modName)\n                        TexturePacker.process(settings, modAssetsFolder.absolutePath, \\\"atlas\\\", \\\"png\\\")\n                    }\n                } catch (e: Exception) {\n                    println(\\\"Error packing images for mod: \\\" + modName + \\\", \\\" + e.message)\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 47.674989828775885}]}
{"instance_id": "206dbb3c21eb", "generation_result": [{"code": "suspend fun reloadWorldscreen(){\n\t", "CodeBleu_score": 3.349436022099892}, {"code": "suspend fun reloadWorldscreen(){\n\t", "CodeBleu_score": 3.349436022099892}, {"code": "suspend fun reloadWorldscreen(){\n\t    withGLContext {\n        try {\n            ImageGetter.reloadImages()\n            val worldScreen = getScreen() as? WorldScreen\n            worldScreen?.reload()\n        } catch (ex: Exception) {\n            ex.printStackTrace()\n        }\n    }\n}", "CodeBleu_score": 14.675239015292462}]}
{"instance_id": "2d8fdcb5ad6f", "generation_result": [{"code": "fun goToMainMenu(): MainMenuScreen{\n\t    val mainMenu = MainMenuScreen()\n    replaceCurrentScreen(mainMenu)\n    return mainMenu\n}", "CodeBleu_score": 41.80136450231385}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\t    val mainMenu = MainMenuScreen()\n    replaceCurrentScreen(mainMenu)\n    return mainMenu\n}", "CodeBleu_score": 41.80136450231385}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\t    val mainMenu = MainMenuScreen()\n    setAsRootScreen(mainMenu)\n    return mainMenu\n}", "CodeBleu_score": 41.519678436437005}]}
{"instance_id": "df60142d384c", "generation_result": [{"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t    val windowedBounds = getWindowedBounds()\n    val windowedWidth = windowedBounds.width\n    val windowedHeight = windowedBounds.height\n\n    val windowWidth = settings.windowWidth\n    val windowHeight = settings.windowHeight\n    if (windowWidth != windowedWidth || windowHeight != windowedHeight) {\n        val window = getWindow() ?: return false\n        val windowedWidth = windowedBounds.width\n        val windowedHeight = windowedBounds.height\n        val windowedX = windowedBounds.x\n        val windowedY = windowedBounds.y\n        window.setSize(windowedWidth, windowedHeight)\n        window.setLocation(windowedX, windowedY)\n        window.setPosition((windowedX + windowedWidth / 2 - windowWidth / 2).roundToInt(), (windowedY + windowedHeight / 2 - windowHeight / 2).roundToInt())\n    }\n\n    val graphics = Gdx.graphics as Lwjgl3Graphics\n    val graphicsMode = graphics.graphicsMode\n    if (graphicsMode.width != windowWidth || graphicsMode.height != windowHeight) {\n        graphics.graphicsMode = Lwjgl3Graphics.GraphicsMode(windowWidth, windowHeight, graphicsMode.refreshRate)\n    }\n\n    return windowWidth == windowedWidth && windowHeight == windowedHeight\n}", "CodeBleu_score": 40.56993641945912}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t    val maxWindowBounds = getMaxWindowBounds()\n    val windowSize = getWindowSize(settings, maxWindowBounds)\n    val windowConfig = getWindowConfig(windowSize)\n    val graphicsMode = getGraphicsMode(windowConfig)\n    Gdx.graphics.setWindowedMode(windowSize.x, windowSize.y, graphicsMode)\n    return windowSize == maxWindowBounds\n}", "CodeBleu_score": 38.61758283868928}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t    val maxBounds = getMaxWindowBounds()\n    val window = getWindow() ?: return false\n    val width = settings.resolution.width.coerceAtMost(maxBounds.width).roundToInt()\n    val height = settings.resolution.height.coerceAtMost(maxBounds.height).roundToInt()\n    window.setSize(width, height)\n    window.setLocation(\n        (maxBounds.width - width) / 2,\n        (maxBounds.height - height) / 2\n    )\n    val config = Lwjgl3ApplicationConfiguration(\n        width,\n        height,\n        settings.isVsync,\n        settings.isResizable\n    )\n    config.setWindowedMode(width, height)\n    Gdx.graphics.setWindowedMode(width, height)\n    Gdx.graphics.setWindowPosition(\n        (maxBounds.width - width) / 2,\n        (maxBounds.height - height) / 2\n    )\n    Lwjgl3Graphics.updateWindow(config)\n    return Gdx.graphics.width == width && Gdx.graphics.height == height\n}", "CodeBleu_score": 48.796634292743974}]}
{"instance_id": "a8b17234c4e5", "generation_result": [{"code": "private fun getLinuxDistro(): String{\n\t    val osReleaseFile = FileHandle(\"/etc/os-release\")\n    if (!osReleaseFile.exists()) return \"\"\n    val lines = osReleaseFile.readString().split(\"\n\")\n    val entries = lines.mapNotNull {\n        it.split(\"=\").takeIf { it.size == 2 }?.let { (key, value) -> key to value.removePrefix(\"\\\"\") }\n    }.toMap()\n    val name = entries[\"NAME\"] ?: return \"\"\n    return entries[\"PRETTY_NAME\"] ?: \"$name ${entries[\"VERSION\"] ?: \"\"}\"\n}", "CodeBleu_score": 40.839030718706304}, {"code": "private fun getLinuxDistro(): String{\n\t    val osReleaseFile = FileHandle(\"/etc/os-release\")\n    if (!osReleaseFile.exists()) return \"\"\n\n    val osReleaseMap = osReleaseFile.readString().split(\"\n\").map {\n        val parts = it.split(\"=\")\n        if (parts.size == 2) parts[0] to parts[1].removeSurrounding(\"\\\"\") else null\n    }.filterNotNull().toMap()\n\n    return osReleaseMap[\"PRETTY_NAME\"] ?: osReleaseMap[\"NAME\"]?.let { \"$it ${osReleaseMap[\"VERSION\"]}\" } ?: \"\"\n}", "CodeBleu_score": 38.91181546641786}, {"code": "private fun getLinuxDistro(): String{\n\t    val osReleaseFile = FileHandle.getFileHandle(\\\"/etc/os-release\\\").readString()\n    val entries = osReleaseFile.split(\\\"\\\n\\\").mapNotNull { it.removeSuffix(\\\"\\\\r\\\").run { if (startsWith(\\\" \\\") || startsWith(\\\"\\\\t\\\")) trim() else null } }\n            .map { it.split(\\\"=\\\") }\n            .filter { it.size == 2 }\n            .associate { it[0] to it[1].removeSurrounding(\\\"\\\"\\\"\\\"\\\").removeSurrounding(\\\"\\\\\\\"\\\") }\n\n    if (\"NAME\" !in entries) return \"\"\n\n    return entries[\"PRETTY_NAME\"] ?: (entries[\"NAME\"] + (entries[\"VERSION\"]?.run { \" $this\" } ?: \"\"))\n}", "CodeBleu_score": 59.50695845103831}]}
{"instance_id": "36a1d2e56540", "generation_result": [{"code": "private fun flashWindow(){\n\t    try {\n        // Attempt to use the GLFW API to flash the window\n        GLFWNativeWin32.glfwFlashWindow(window?.windowHandle?.getPointer() ?: Pointer.NULL, 1)\n    } catch (e: Exception) {\n        Log.main.error(\"Failed to flash window: ${e.message}\")\n    }\n\n    // If the GLFW API failed, try the Win32 API\n    if (window?.windowHandle?.getPointer() == Pointer.NULL) {\n        try {\n            val hwnd = window?.windowHandle?.getPointer() ?: Pointer.NULL\n            val hwndDummy = Pointer.NULL\n            val uCount = 3\n            val dwTimeout = 0\n            val dwFlags = WinUser.FLASHW_ALL or WinUser.FLASHW_TIMERNOFG\n            val flashInfo = WinUser.FLASHWINFO(hwnd, hwndDummy, uCount, dwTimeout, dwFlags)\n            User32.INSTANCE.FlashWindowEx(flashInfo)\n        } catch (e: Exception) {\n            Log.main.error(\"Failed to flash window: ${e.message}\")\n        }\n    }\n}", "CodeBleu_score": 48.8465410735025}, {"code": "private fun flashWindow(){\n\t    try {\n        // Check if the window is not null and has focus.\n        if (window != null && hasFocus) {\n            // Try to use the GLFW method for flashing the window.\n            GLFWNativeWin32.glfwRequestWindowAttention(window!!.handle)\n        } else {\n            // If the window is null or does not have focus, use the Windows API.\n            val windowHandle = window?.handle ?: return\n            val windowHandlePointer = Pointer(windowHandle)\n            val flashWindowEx = User32.INSTANCE.FlashWindowEx(\n                WinUser.FLASHWINFO(\n                    WinUser.FLASHW_ALLCATCH,\n                    windowHandlePointer,\n                    WinUser.FLASHW_TIMERNOFG,\n                    500,\n                    500\n                )\n            )\n\n            // Check if the flash was successful.\n            if (flashWindowEx == 0) {\n                val lastError = Native.getLastError()\n                Log.main(\"Failed to flash window: $lastError\")\n            }\n        }\n    } catch (e: Exception) {\n        Log.main(\"Failed to flash window: ${e.message}\")\n    }\n}", "CodeBleu_score": 53.59066350640944}, {"code": "private fun flashWindow(){\n\t", "CodeBleu_score": 0.9483643708488229}]}
{"instance_id": "8e3c7096415a", "generation_result": [{"code": "public void onFullBackup(FullBackupDataOutput data){\n\t\tFile prefs = getSharedPreferencesFile();\n\tFileInputStream fis = null;\n\tFileOutputStream fos = null;\n\ttry {\n\t\tfis = new FileInputStream(prefs);\n\t\tfos = data.getFileDescriptor();\n\t\tbyte[] buf = new byte[1024];\n\t\tint len;\n\t\twhile ((len = fis.read(buf)) > 0) {\n\t\t\tfos.write(buf, 0, len);\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttry {\n\t\t\tif (fis != null) fis.close();\n\t\t\tif (fos != null) fos.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\ttry {\n\t\tdata.writeString(Rankings.FILE);\n\t\tRankings.save(data);\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n\n\ttry {\n\t\tdata.writeString(Badges.FILE);\n\t\tBadges.save(data);\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n\n\ttry {\n\t\tdata.writeString(Journal.FILE);\n\t\tJournal.save(data);\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n}", "CodeBleu_score": 22.49762569412742}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t    File sharedPrefs = getSharedPreferencesFile();\n    if (sharedPrefs != null) {\n        addFile(data, sharedPrefs.getName());\n    }\n    if (Rankings.exists()) {\n        addFile(data, Rankings.FILE);\n    }\n    if (Badges.exists()) {\n        addFile(data, Badges.FILE);\n    }\n    if (Journal.exists()) {\n        addFile(data, Journal.FILE);\n    }\n}", "CodeBleu_score": 21.13072653016184}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t\tFile prefs = getFileStreamPath(getPackageName() + \"_preferences\");\n\tif (prefs.exists()) {\n\t\taddFile(getPackageName() + \"_preferences\", prefs);\n\t}\n\n\tFile rankings = getFileStreamPath(Rankings.FILE);\n\tif (rankings.exists()) {\n\t\taddFile(Rankings.FILE, rankings);\n\t}\n\n\tFile badges = getFileStreamPath(Badges.FILE);\n\tif (badges.exists()) {\n\t\taddFile(Badges.FILE, badges);\n\t}\n\n\tFile journal = getFileStreamPath(Journal.FILE);\n\tif (journal.exists()) {\n\t\taddFile(Journal.FILE, journal);\n\t}\n}", "CodeBleu_score": 24.597893444907413}]}
{"instance_id": "583999724a15", "generation_result": [{"code": "public boolean connectedToUnmeteredNetwork(){\n\t    ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        return !connectivityManager.isActiveNetworkMetered();\n    } else {\n        NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();\n        return networkInfo != null && networkInfo.isConnected() && (networkInfo.getType() == ConnectivityManager.TYPE_WIFI || networkInfo.getType() == ConnectivityManager.TYPE_WIMAX || networkInfo.getType() == ConnectivityManager.TYPE_BLUETOOTH || networkInfo.getType() == ConnectivityManager.TYPE_ETHERNET);\n    }\n}", "CodeBleu_score": 63.696887738738084}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t    ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        NetworkInfo activeNetwork = cm.getActiveNetworkInfo();\n        if (activeNetwork != null) {\n            return !activeNetwork.isActiveNetworkMetered();\n        }\n    } else {\n        NetworkInfo activeNetwork = cm.getActiveNetworkInfo();\n        if (activeNetwork != null) {\n            if (activeNetwork.getType() == ConnectivityManager.TYPE_WIFI) {\n                return true;\n            }\n            if (activeNetwork.getType() == ConnectivityManager.TYPE_WIMAX) {\n                return true;\n            }\n            if (activeNetwork.getType() == ConnectivityManager.TYPE_BLUETOOTH) {\n                return true;\n            }\n            if (activeNetwork.getType() == ConnectivityManager.TYPE_ETHERNET) {\n                return true;\n            }\n        }\n    }\n    return false;\n}", "CodeBleu_score": 52.457599463797735}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t    ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        return !cm.isActiveNetworkMetered();\n    } else {\n        NetworkInfo activeNetwork = cm.getActiveNetworkInfo();\n        return activeNetwork != null && activeNetwork.isConnected() && (activeNetwork.getType() == ConnectivityManager.TYPE_WIFI || activeNetwork.getType() == ConnectivityManager.TYPE_WIMAX || activeNetwork.getType() == ConnectivityManager.TYPE_BLUETOOTH || activeNetwork.getType() == ConnectivityManager.TYPE_ETHERNET);\n    }\n}", "CodeBleu_score": 77.0938686869068}]}
{"instance_id": "f8bd6cd4826b", "generation_result": [{"code": "protected boolean affectHero( Hero hero ){\n\t", "CodeBleu_score": 3.251031176819552}, {"code": "protected boolean affectHero( Hero hero ){\n\t", "CodeBleu_score": 3.251031176819552}, {"code": "protected boolean affectHero( Hero hero ){\n\t", "CodeBleu_score": 3.251031176819552}]}
{"instance_id": "3a94f2e84c83", "generation_result": [{"code": "protected Item affectItem( Item item, int pos ){\n\t    if (item instanceof Waterskin) {\n        if (item.full()) {\n            return null;\n        }\n        item.charge( item.HT );\n        return item;\n    }\n    if (item instanceof Ankh) {\n        if (item.blessed()) {\n            return null;\n        }\n        item.bless();\n        return item;\n    }\n    if (item instanceof ScrollOfRemoveCurse) {\n        if (!item.cursed()) {\n            return null;\n        }\n        item.uncurse();\n        return item;\n    }\n    return null;\n}", "CodeBleu_score": 37.13421537248437}, {"code": "protected Item affectItem( Item item, int pos ){\n\t    if (item instanceof Waterskin) {\n        if (!((Waterskin) item).isFull()) {\n            Waterskin waterskin = (Waterskin) item;\n            waterskin.set( waterskin.HT );\n            waterskin.sprite.emitter().burst( ShadowParticle.FACTORY, 2 );\n            waterskin.sprite.showStatus(CharSprite.POSITIVE, Messages.get(this, \"full\"));\n            GLog.p( Messages.get(this, \"full\") );\n            return null;\n        }\n    } else if (item instanceof Ankh) {\n        if (!((Ankh) item).isBlessed()) {\n            Ankh ankh = (Ankh) item;\n            ankh.bless();\n            ankh.sprite.emitter().burst( ShadowParticle.FACTORY, 2 );\n            ankh.sprite.showStatus(CharSprite.POSITIVE, Messages.get(this, \"blessed\"));\n            GLog.p( Messages.get(this, \"blessed\") );\n            return null;\n        }\n    } else if (item instanceof ScrollOfRemoveCurse) {\n        if (!((ScrollOfRemoveCurse) item).cursed) {\n            ScrollOfRemoveCurse scroll = (ScrollOfRemoveCurse) item;\n            scroll.curse();\n            scroll.sprite.emitter().burst( ShadowParticle.FACTORY, 2 );\n            scroll.sprite.showStatus(CharSprite.POSITIVE, Messages.get(this, \"cursed\"));\n            GLog.p( Messages.get(this, \"cursed\") );\n            return null;\n        }\n    }\n\n    return null;\n}", "CodeBleu_score": 35.362454280757305}, {"code": "protected Item affectItem( Item item, int pos ){\n\t    if (item instanceof Waterskin) {\n        if (item.full()) {\n            return null;\n        }\n        item.charge( Math.min(item.HT, hero.HT - item.HT), hero );\n        item.sprite.emitter().start( ShadowParticle.FACTORY, 0.2f, 4 );\n        GLog.p( Messages.get(this, \\\"filled\\\") );\n    } else if (item instanceof Ankh) {\n        if (item.blessed()) {\n            return null;\n        }\n        item.bless();\n        item.sprite.emitter().start( ShadowParticle.FACTORY, 0.2f, 4 );\n        GLog.p( Messages.get(this, \\\"blessed\\\") );\n    } else if (item.cursed()) {\n        item.uncurse();\n        item.sprite.emitter().start( ShadowParticle.FACTORY, 0.2f, 4 );\n        GLog.p( Messages.get(this, \\\"uncursed\\\") );\n    } else {\n        return null;\n    }\n    return item;\n}", "CodeBleu_score": 30.906006112159673}]}
{"instance_id": "d322228d1a3e", "generation_result": [{"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t    if (enemy.alignment == Char.Alignment.ENEMY) {\n        enemy.buff(buffCls);\n        if (hero.heroSubClass == HeroSubClass.MONK) {\n            hero.buff(Energy.class).gain(10);\n        }\n        if (enemy.level > hero.level) {\n            hero.gainExp(enemy.exp() * 1.5f);\n        } else {\n            hero.gainExp(enemy.exp());\n        }\n        if (enemy instanceof Mimic) {\n            hero.gainExp(enemy.exp() * 1.5f);\n        }\n        if (enemy.isDead()) {\n            enemy.drop().forEach(item -> hero.collect(item));\n            Statistics.kill(enemy.getClass());\n            Badges.validateAscensionChallenges(enemy.getClass());\n        }\n    }\n}", "CodeBleu_score": 33.09234428360548}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t", "CodeBleu_score": 4.537406718231222}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t", "CodeBleu_score": 4.537406718231222}]}
{"instance_id": "9ee21c0149f3", "generation_result": [{"code": "public static void processEnemyKill(Char enemy){\n\t    if (Dungeon.hero.buff(AscensionChallenge.class) != null) {\n        if (enemy instanceof Ratmogrify.TransmogRat) {\n            enemy = ((Ratmogrify.TransmogRat) enemy).getOriginal();\n        }\n\n        if (enemy.buff(AscensionBuffBlocker.class) != null) {\n            return;\n        }\n\n        for (Class<? extends Mob> cls : modifiers.keySet()) {\n            if (cls.isAssignableFrom(enemy.getClass())) {\n                if (Dungeon.hero.buff(AscensionChallenge.class).stacks > modifiers.get(cls)) {\n                    Dungeon.hero.buff(AscensionChallenge.class).stacks -= modifiers.get(cls);\n                } else {\n                    Dungeon.hero.buff(AscensionChallenge.class).stacks = 0;\n                }\n\n                if (Dungeon.hero.buff(AscensionChallenge.class).stacks < 2) {\n                    GLog.w(Messages.get(AscensionChallenge.class, \"weakening\"));\n                }\n\n                if (Dungeon.hero.level == Dungeon.hero.maxLevel) {\n                    Dungeon.hero.spendAndNext(Stat.EXP, 1);\n                }\n\n                Dungeon.hero.spendAndUpgrade(AscensionChallenge.class);\n                Dungeon.hero.buffIndicator.update();\n                return;\n            }\n        }\n    }\n}", "CodeBleu_score": 37.241775018715096}, {"code": "public static void processEnemyKill(Char enemy){\n\t", "CodeBleu_score": 0.5739817495090933}, {"code": "public static void processEnemyKill(Char enemy){\n\t", "CodeBleu_score": 0.5739817495090933}]}
{"instance_id": "4fc9c3c1fcce", "generation_result": [{"code": "public static int AscensionCorruptResist(Mob m){\n\t    if (Dungeon.hero.buff(AscensionChallenge.class) == null) {\n        return m.exp();\n    }\n    if (m instanceof Ratmogrify.TransmogRat) {\n        m = ((Ratmogrify.TransmogRat) m).getOriginal();\n    }\n    if (m.buff(AscensionBuffBlocker.class) != null) {\n        return m.exp();\n    }\n    if (m instanceof RipperDemon) {\n        return 10;\n    }\n    if (m instanceof Ghoul) {\n        return 7;\n    }\n    if (m instanceof Golem || m instanceof Warlock || m instanceof Scorpio || m instanceof Succubus || m instanceof Eye) {\n        return Math.max(m.exp(), 13);\n    }\n    return m.exp();\n}", "CodeBleu_score": 59.41013607373965}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t    if (Dungeon.hero.buff(AscensionChallenge.class) != null) {\n        if (m instanceof Ratmogrify.TransmogRat) {\n            m = ((Ratmogrify.TransmogRat) m).getOriginal();\n            if (m == null) {\n                return 0;\n            }\n        }\n        if (m.buff(AscensionBuffBlocker.class) != null) {\n            return m.exp();\n        }\n        if (m instanceof RipperDemon) {\n            return 10;\n        }\n        if (m instanceof Ghoul) {\n            return 7;\n        }\n        if (m instanceof Eye || m instanceof Scorpio || m instanceof Succubus) {\n            return Math.max(13, m.exp());\n        }\n    }\n    return m.exp();\n}", "CodeBleu_score": 50.369603930334016}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t    if (Dungeon.hero.buff(AscensionChallenge.class) != null) {\n        if (m instanceof Ratmogrify.TransmogRat) {\n            m = ((Ratmogrify.TransmogRat) m).getOriginal();\n            if (m == null) {\n                return 0;\n            }\n        }\n        if (m.buff(AscensionBuffBlocker.class) != null) {\n            return m.EXP();\n        }\n        if (m instanceof RipperDemon) {\n            return 10;\n        }\n        if (m instanceof Ghoul) {\n            return 7;\n        }\n        if (m.EXP() > 13) {\n            return m.EXP();\n        }\n    }\n    return m.EXP();\n}", "CodeBleu_score": 53.04811005467087}]}
{"instance_id": "bdc8df5952c7", "generation_result": [{"code": "public void hit( Char enemy ){\n\t    if ( enemy.isDead() || enemy.buff(Corruption.class).isFull() ) {\n        count++;\n        initialComboTime = talent.comboTime( count );\n        comboTime = initialComboTime;\n        updateActionIndicators();\n        validateMasteryCombos();\n        GLog.i( Messages.get( this, \"hit\" ), count );\n        refreshBuffIndicator();\n    }\n}", "CodeBleu_score": 27.406709140787903}, {"code": "public void hit( Char enemy ){\n\t    count++;\n    if (enemy.isDead() || enemy.buff(Corruption.class).isFull()) {\n        comboTime = Math.max(comboTime, initialComboTime + (getHighestMove().cleave * getHero().talent(Talent.CLEAVE)));\n    }\n    updateInitialComboTime();\n    triggerActionIndicators();\n    validateMasteryCombos();\n    logComboCount();\n    refreshBuffIndicator();\n}", "CodeBleu_score": 40.53896462690073}, {"code": "public void hit( Char enemy ){\n\t\tcount++;\n\tcomboTime = initialComboTime;\n\tupdate();\n\tGameScene.updateBuffIndicator(this);\n\tvalidateMasteryCombos();\n\tGLog.i(Messages.get(this, \"combo\"), count);\n\tGameScene.refreshHeroBuffIndicator();\n}", "CodeBleu_score": 19.089979915879017}]}
{"instance_id": "abf7c664b4dd", "generation_result": [{"code": "public int capacity(){\n\t    int capacity = BASE_CAPACITY;\n\n\t\tIterator<Item> it = owner.belongings.iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tItem item = it.next();\n\t\t\tif (item instanceof Bag) {\n\t\t\t\tcapacity += ((Bag) item).capacity();\n\t\t\t}\n\t\t}\n\n\t\tif (owner.weapon != null && owner.weapon instanceof KindOfWeapon) {\n\t\t\tcapacity -= ((KindOfWeapon) owner.weapon).capacity();\n\t\t}\n\n\t\treturn capacity;\n\t}", "CodeBleu_score": 29.232224003506936}, {"code": "public int capacity(){\n\t    int capacity = BACKPACK_CAPACITY;\n\n\t\tIterator<Item> it = owner.inventory.iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tItem item = it.next();\n\t\t\tif (item instanceof Bag) {\n\t\t\t\tcapacity += item.weight();\n\t\t\t}\n\t\t}\n\n\t\tif (owner.weapon != null && owner.weapon.isSecondary()) {\n\t\t\tcapacity -= owner.weapon.weight();\n\t\t}\n\n\t\treturn capacity;\n\t}", "CodeBleu_score": 29.268629811170904}, {"code": "public int capacity(){\n\t\tint capacity = baseCapacity;\n\t\t\tif (owner.isEquipped(EquipableItem.class)) {\n\t\t\t\tcapacity--;\n\t\t\t}\n\t\t\tfor (Item item : owner.belongings.inventory) {\n\t\t\t\tif (item instanceof Bag) {\n\t\t\t\t\tcapacity += ((Bag) item).capacity();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn capacity;\n\t\t}", "CodeBleu_score": 31.92389761822526}]}
{"instance_id": "b97e41e092d2", "generation_result": [{"code": "public void updateHT( boolean boostHP ){\n\t", "CodeBleu_score": 2.218965494326175}, {"code": "public void updateHT( boolean boostHP ){\n\t\tHT = (int) ( ( lvl + 10 ) * 1.5f * ( 1 + ( 0.05f * STR ) ) );\n\tHT += HTBoost;\n\tif ( buff( RingOfMight.class ) != null ) HT += (int) ( HT * 0.1f );\n\tif ( buff( ElixirOfMight.class ) != null ) HT += (int) ( HT * 0.2f );\n\tif ( boostHP ) HP = Math.min( HP + (int) ( HT * 0.2f ), HT );\n\tHP = Math.min( HP, HT );\n}", "CodeBleu_score": 24.88355113818833}, {"code": "public void updateHT( boolean boostHP ){\n\t    HT = (int) ( ( ( ( 1.5f * lvl ) + 2f ) * STR ) * ( 1f + HTBoost ) );\n    if ( RingOfMight.active() ) {\n        HT += RingOfMight.HTBoost();\n    }\n    if ( ElixirOfMight.active() ) {\n        HT += ElixirOfMight.HTBoost();\n    }\n    if ( boostHP ) {\n        HP = Math.min( HP + (int) ( HT * 0.2f ), HT );\n    }\n}", "CodeBleu_score": 25.535725748052247}]}
{"instance_id": "b72bd91544e7", "generation_result": [{"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t    if (enemy.isAlignedAsEnemy() || enemy.isAlignedAsNeutralMimic()) {\n        if (attack( enemy, wep )) {\n            wep.setThrown(this);\n            wep.clearThrown();\n            if (heroClass == HeroClass.GLADIATOR || heroClass == HeroClass.DUELIST) {\n                Buff.affect( this, Combo.class );\n            }\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 21.14431533871015}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t    if (enemy.isAlignedAsEnemy() || enemy.isAlignedAsNeutralMimic()) {\n        if (attack( enemy, wep, true )) {\n            if (enemy instanceof Gladiator || enemy instanceof Duelist) {\n                Buff.affect( enemy, Gladiator.class );\n                Buff.affect( enemy, Duelist.class );\n            }\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 14.616309412498815}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\tboolean hit = false;\n\tboolean aligned = enemy.isAligned( this );\n\tif (aligned) {\n\t\thit = attack( enemy, wep );\n\t}\n\tif (hit && (heroClass == HeroClass.GLADIATOR || heroClass == HeroClass.DUELIST)) {\n\t\tBuff.affect( this, Combo.class );\n\t\tBuff.affect( enemy, Combo.class );\n\t}\n\tbelongings.setThrownWeapon( null );\n\treturn hit;\n}", "CodeBleu_score": 28.719494041464767}]}
{"instance_id": "f265b39b6677", "generation_result": [{"code": "public int attackSkill( Char target ){\n\t    int accuracy = (int) (100 * accuracyMultiplier( target ));\n    int weaponAccuracy = belongings.attackingWeapon().accuracy( this );\n    int accuracyBonus = accuracy - weaponAccuracy;\n    accuracy = GameMath.clamp( accuracy, 0, 100 );\n    accuracyBonus = GameMath.clamp( accuracyBonus, -50, 50 );\n    int attackSkill = (int) (baseAttackSkill() * (1 + accuracyBonus / 100.0));\n    attackSkill = GameMath.clamp( attackSkill, 0, 100 );\n    return attackSkill;\n}", "CodeBleu_score": 31.349944214954505}, {"code": "public int attackSkill( Char target ){\n\t", "CodeBleu_score": 3.516528221576535}, {"code": "public int attackSkill( Char target ){\n\t", "CodeBleu_score": 3.516528221576535}]}
{"instance_id": "9e50c198348d", "generation_result": [{"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t  Gdx.app.log(tag, \"Starting profiling of $name with $repeats repeats...\")\n  start()\n  repeat(repeats) {\n    operation()\n    tick()\n  }\n  stop()\n  if (printResults) Gdx.app.log(tag, \"Profiling of $name complete:\n$this\")\n}", "CodeBleu_score": 53.60947202565309}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t  start()\n  for (i in 0 until repeats) {\n    operation()\n    tick()\n  }\n  stop()\n  if (printResults) print()\n}", "CodeBleu_score": 52.64385087374994}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t  time.reset()\n  for (i in 0 until repeats) {\n    time.tick()\n    operation()\n  }\n  time.stop()\n  if (printResults) {\n    println(this)\n  }\n}", "CodeBleu_score": 58.15646026941368}]}
{"instance_id": "5f6e11998a1f", "generation_result": [{"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t  contract {\n    callsInPlace(init, InvocationKind.EXACTLY_ONCE)\n  }\n\n  val behaviorTree = BehaviorTree(rootTask, blackboard)\n  behaviorTree.init()\n  return behaviorTree\n}", "CodeBleu_score": 98.6098112020633}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t  contract {\n    callsInPlace(init, InvocationKind.EXACTLY_ONCE)\n  }\n  return BehaviorTree<E>(rootTask, blackboard).apply(init)\n}", "CodeBleu_score": 61.137184069834404}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t  contract {\n    callsInPlace(init, InvocationKind.EXACTLY_ONCE)\n  }\n  return BehaviorTree<E>(rootTask, blackboard).apply(init)\n}", "CodeBleu_score": 61.137184069834404}]}
{"instance_id": "cdda12e45fb9", "generation_result": [{"code": "onPointerOver (){\n\t    this.scene.city.map.selectedCell.x = this.x;\n    this.scene.city.map.selectedCell.y = this.y;\n\n    this.scene.city.map.selectedCell.highlight();\n    this.related.highlight();\n\n    if (this.heightmap) {\n      this.heightmap.alpha = 1;\n    }\n  }", "CodeBleu_score": 20.855345473645603}, {"code": "onPointerOver (){\n\t  this.scene.city.map.selectedCell.x = this.x;\n    this.scene.city.map.selectedCell.y = this.y;\n\n    this.scene.city.map.selectedCell.tiles.forEach(tile => {\n      tile.setTintFill(CONST.COLORS.SELECTED_TILE);\n    });\n\n    this.related.forEach(cell => {\n      cell.tiles.forEach(tile => {\n        tile.setTintFill(CONST.COLORS.SELECTED_TILE);\n      });\n    });\n\n    this.tiles.forEach(tile => {\n      if (tile.heightmap) {\n        tile.heightmap.setAlpha(0.3);\n      }\n    });\n  }", "CodeBleu_score": 58.12409336895021}, {"code": "onPointerOver (){\n\t    this.scene.city.map.selectedCell.x = this.x;\n    this.scene.city.map.selectedCell.y = this.y;\n\n    this.scene.city.map.selectedCell.highlight();\n    this.highlight();\n\n    if (this.tiles.heightmap) {\n      this.tiles.heightmap.setAlpha(0.5);\n    }\n  }", "CodeBleu_score": 22.546962055739055}]}
{"instance_id": "850931ce3401", "generation_result": [{"code": "getTrafficDensity (){\n\t    if (this.current > this.lightThreshold && this.current < this.heavyThreshold) {\n        return 'light';\n    }\n    if (this.current >= this.heavyThreshold) {\n        return 'heavy';\n    }\n    return null;\n}", "CodeBleu_score": 50.007220113842166}, {"code": "getTrafficDensity (){\n\t    if (this.current > this.lightThreshold && this.current < this.heavyThreshold) {\n      return 'light';\n    }\n    if (this.current > this.heavyThreshold) {\n      return 'heavy';\n    }\n    return null;\n  }", "CodeBleu_score": 47.69822074932251}, {"code": "getTrafficDensity (){\n\t    if (this.current < this.lightThreshold) {\n        return null;\n    } else if (this.current < this.heavyThreshold) {\n        return 'light';\n    } else {\n        return 'heavy';\n    }\n}", "CodeBleu_score": 41.53063055489694}]}
{"instance_id": "5958478bf873", "generation_result": [{"code": "restart: function (){\n\t    this._frameIndex = this.isReversed ? this._frames.length - 1 : 0;\n    this.updateCurrentFrame(false, true);\n\n    this._parent.events.onAnimationRestart$dispatch(this._parent, this);\n\n    return this;\n}", "CodeBleu_score": 16.709016877066734}, {"code": "restart: function (){\n\t    this.isPlaying = false;\n    this.isFinished = false;\n    this.paused = false;\n    this.loopCount = 0;\n    this._frameIndex = this.isReversed ? this._frames.length - 1 : 0;\n    this.updateCurrentFrame(false, true);\n    this._parent.events.onAnimationRestart$dispatch(this._parent, this);\n    this.onStart.dispatch(this._parent, this);\n    this._parent.animations.currentAnim = this;\n    this._parent.animations.currentFrame = this.currentFrame;\n    return this;\n}", "CodeBleu_score": 45.48817403932712}, {"code": "restart: function (){\n\t    this.isPlaying = true;\n    this.isFinished = false;\n    this.paused = false;\n    this.loopCount = 0;\n\n    this._timeLastFrame = this.game.time.deltaTotal;\n    this._timeNextFrame = this.game.time.deltaTotal + this.delay;\n\n    this._frameIndex = this.isReversed ? this._frames.length - 1 : 0;\n    this.updateCurrentFrame(false, true);\n\n    this._parent.events.onAnimationStart$dispatch(this._parent, this);\n\n    this.onStart.dispatch(this._parent, this);\n\n    this._parent.animations.currentAnim = this;\n    this._parent.animations.currentFrame = this.currentFrame;\n\n    return this;\n}", "CodeBleu_score": 60.10025947908915}]}
{"instance_id": "d2441e586d58", "generation_result": [{"code": "flash: function (color, duration, force, alpha){\n\t    if (color === undefined) { color = 0xffffff; }\n    if (duration === undefined) { duration = 500; }\n    if (force === undefined) { force = false; }\n    if (alpha === undefined) { alpha = 1; }\n\n    if (!force && this._flash.duration > 0) {\n        //  Can't reset an already running flash\n        return false;\n    }\n\n    this._flash.color = color;\n    this._flash.duration = duration;\n    this._flash.alpha = alpha;\n\n    return true;\n}", "CodeBleu_score": 66.48551184054695}, {"code": "flash: function (color, duration, force, alpha){\n\t    if (color === undefined) { color = 0xffffff; }\n    if (duration === undefined) { duration = 500; }\n    if (force === undefined) { force = false; }\n    if (alpha === undefined) { alpha = 1; }\n\n    if (!force && this._flash.duration > 0) {\n        //  Can't reset an already running flash\n        return false;\n    }\n\n    this._flash.color = color;\n    this._flash.alpha = alpha;\n    this._flash.duration = duration;\n\n    return true;\n}", "CodeBleu_score": 66.48551184054695}, {"code": "flash: function (color, duration, force, alpha){\n\t    if (color === undefined) {\n        color = 0xffffff;\n    }\n    if (duration === undefined) {\n        duration = 500;\n    }\n    if (force === undefined) {\n        force = false;\n    }\n    if (alpha === undefined) {\n        alpha = 1;\n    }\n\n    if (!force && this._flash.duration > 0) {\n        //  Can't reset an already running flash\n        return false;\n    }\n\n    this._flash.color = color;\n    this._flash.duration = duration;\n    this._flash.alpha = alpha;\n\n    return true;\n}", "CodeBleu_score": 67.52075162979469}]}
{"instance_id": "48b26381d975", "generation_result": [{"code": "createFluidLayer: function (children, addToWorld){\n\t    if (addToWorld === undefined) { addToWorld = true; }\n\n    this.boundsFluid.width = this.width;\n        this.boundsFluid.height = this.height;\n\n        var layer = new Phaser.FlexLayer(this, this.positionFluid, this.boundsFluid, this.scaleFluid);\n\n        if (addToWorld)\n        {\n            this.game.world.add(layer);\n        }\n\n        this.layers.push(layer);\n\n        if (children)\n        {\n            layer.addMultiple(children);\n        }\n\n        return layer;\n    }", "CodeBleu_score": 81.26054963251198}, {"code": "createFluidLayer: function (children, addToWorld){\n\t    if (addToWorld === undefined) { addToWorld = true; }\n\n    this.boundsFluid.width = this.width;\n        this.boundsFluid.height = this.height;\n\n        var layer = new Phaser.FlexLayer(this, this.positionFluid, this.boundsFluid, this.scaleFluid);\n\n        if (addToWorld)\n        {\n            this.game.world.add(layer);\n        }\n\n        this.layers.push(layer);\n\n        if (children)\n        {\n            layer.addMultiple(children);\n        }\n\n        return layer;\n    }", "CodeBleu_score": 81.26054963251198}, {"code": "createFluidLayer: function (children, addToWorld){\n\t  if (addToWorld === undefined) {\n    addToWorld = true;\n  }\n\n  this.boundsFluid.width = this.width;\n  this.boundsFluid.height = this.height;\n\n  var layer = new Phaser.FlexLayer(this, this.positionFluid, this.boundsFluid, this.scaleFluid);\n\n  if (addToWorld) {\n    this.game.world.add(layer);\n  }\n\n  this.layers.push(layer);\n\n  if (children) {\n    layer.addMultiple(children);\n  }\n\n  return layer;\n}", "CodeBleu_score": 82.92250626156743}]}
{"instance_id": "624c9e2eb19f", "generation_result": [{"code": "createFullLayer: function (children){\n\t    var layer = new Phaser.FlexLayer(this, this.positionFull, this.boundsFull, this.scaleFull);\n\n    this.game.world.add(layer);\n\n    this.layers.push(layer);\n\n    if (children) {\n        layer.addMultiple(children);\n    }\n\n    return layer;\n}", "CodeBleu_score": 72.25360734070705}, {"code": "createFullLayer: function (children){\n\t    var layer = new Phaser.FlexLayer(this, this.positionFull, this.boundsFull, this.scaleFull);\n    this.game.world.add(layer);\n    this.layers.push(layer);\n    if (children) {\n        layer.addMultiple(children);\n    }\n    return layer;\n}", "CodeBleu_score": 72.25360734070705}, {"code": "createFullLayer: function (children){\n\t    var layer = new Phaser.FlexLayer(this, this.positionFull, this.boundsFull, this.scaleFull);\n    this.game.world.add(layer);\n    this.layers.push(layer);\n    if (children) {\n        layer.addMultiple(children);\n    }\n    return layer;\n}", "CodeBleu_score": 72.25360734070705}]}
{"instance_id": "1c7529bca3ce", "generation_result": [{"code": "crop: function (rect, copy){\n\t    if (rect === undefined) {\n        if (this.cropRect !== null) {\n            this.cropRect = null;\n            this.resetFrame();\n        }\n    }\n    else {\n        if (copy === undefined) { copy = false; }\n\n        if (copy) {\n            if (this.cropRect === null) {\n                this.cropRect = new Phaser.Rectangle();\n            }\n\n            this.cropRect.copyFrom(rect);\n        }\n        else {\n            this.cropRect = rect;\n        }\n\n        this.updateCrop();\n    }\n}", "CodeBleu_score": 55.13536128576282}, {"code": "crop: function (rect, copy){\n\t\n    if (rect === undefined)\n    {\n        this.resetFrame();\n    }\n    else\n    {\n        if (copy === undefined || copy === false)\n        {\n            this.cropRect = rect;\n        }\n        else\n        {\n            this.cropRect = new Phaser.Rectangle(rect.x, rect.y, rect.width, rect.height);\n        }\n\n        this.updateCrop();\n    }\n\n}", "CodeBleu_score": 39.541536311869066}, {"code": "crop: function (rect, copy){\n\t    if (rect === undefined) {\n        this.resetFrame();\n        this.cropRect = null;\n    }\n    else {\n        if (copy) {\n            this.cropRect = new Phaser.Rectangle(rect.x, rect.y, rect.width, rect.height);\n        }\n        else {\n            this.cropRect = rect;\n        }\n        this.updateCrop();\n    }\n}", "CodeBleu_score": 43.73472876095882}]}
{"instance_id": "d767b9ea9212", "generation_result": [{"code": "move: function (x, y, wrap){\n\t    if (x !== 0) {\n        this.moveH(x, wrap);\n    }\n    if (y !== 0) {\n        this.moveV(y, wrap);\n    }\n    return this;\n}", "CodeBleu_score": 84.73897543219616}, {"code": "move: function (x, y, wrap){\n\t    if (x !== 0) {\n        this.moveH(x, wrap);\n    }\n    if (y !== 0) {\n        this.moveV(y, wrap);\n    }\n    return this;\n}", "CodeBleu_score": 84.73897543219616}, {"code": "move: function (x, y, wrap){\n\t    if (x !== 0) {\n        this.moveH(x, wrap);\n    }\n    if (y !== 0) {\n        this.moveV(y, wrap);\n    }\n    return this;\n}", "CodeBleu_score": 84.73897543219616}]}
{"instance_id": "c7cf015114f3", "generation_result": [{"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t    var frameKey = '_on' + state + 'Frame';\n\n    if (this.freezeFrames)\n    {\n        return false;\n    }\n\n    if (this[frameKey] !== null)\n    {\n        this.frame = this[frameKey];\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}", "CodeBleu_score": 45.585074074868295}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\n    var frameKey = '_on' + state + 'Frame';\n\n    if (this[frameKey] !== null && !this.freezeFrames)\n    {\n        this.frame = this[frameKey];\n        return true;\n    }\n\n    return false;\n\n}", "CodeBleu_score": 32.318444452559795}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t    var frameKey = '_on' + state + 'Frame';\n\n    if (this[frameKey] !== null && !this.freezeFrames)\n    {\n        this.frame = this[frameKey];\n        return true;\n    }\n\n    return false;\n}", "CodeBleu_score": 32.300674067335756}]}
{"instance_id": "e0294cb83ca3", "generation_result": [{"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t    return this.game.add.weapon(quantity, key, frame, group, bulletClass);\n}", "CodeBleu_score": 18.701576554595505}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n    if (typeof quantity === 'undefined') { quantity = 1; }\n    if (typeof key === 'undefined') { key = null; }\n    if (typeof frame === 'undefined') { frame = null; }\n    if (typeof group === 'undefined') { group = null; }\n    if (typeof bulletClass === 'undefined') { bulletClass = null; }\n\n    var weapon = new Phaser.Weapon(this.game, quantity, key, frame, group, bulletClass);\n\n    if (this.world)\n    {\n        this.world.add(weapon);\n    }\n\n    return weapon;\n\n}", "CodeBleu_score": 37.976890030319964}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t    //  If no quantity is specified, default to 1\n    if (quantity === undefined) { quantity = 1; }\n\n    //  If no group is specified, default to the world group\n    if (group === undefined) { group = this.world; }\n\n    //  If no bulletClass is specified, default to a Phaser.Bullet\n    if (bulletClass === undefined) { bulletClass = Phaser.Bullet; }\n\n    //  Create a new Weapon instance\n    var weapon = new Phaser.Weapon(this.game, bulletClass, quantity, key, frame);\n\n    //  If a group was specified, add the weapon to it\n    if (group)\n    {\n        group.add(weapon);\n    }\n\n    //  Return the weapon\n    return weapon;\n}", "CodeBleu_score": 37.09532996946614}]}
{"instance_id": "2fca91787d6c", "generation_result": [{"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t    if (cull) {\n        var faceNormal = new Phaser.Point(0, 0);\n        faceNormal.x = (points[0].y - points[1].y) * (points[2].x - points[1].x) - (points[2].y - points[1].y) * (points[0].x - points[1].x);\n        faceNormal.y = (points[0].x - points[1].x) * (points[2].y - points[1].y) - (points[2].x - points[1].x) * (points[0].y - points[1].y);\n        if (faceNormal.x * faceNormal.x + faceNormal.y * faceNormal.y < 0) {\n            return;\n        }\n    }\n    this.moveTo(points[0].x, points[0].y);\n    this.lineTo(points[1].x, points[1].y);\n    this.lineTo(points[2].x, points[2].y);\n    this.lineTo(points[0].x, points[0].y);\n}", "CodeBleu_score": 28.97219365535113}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t    if (cull) {\n        var a = points[0];\n        var b = points[1];\n        var c = points[2];\n        var faceNormal = new Phaser.Point(a.x - c.x, a.y - c.y);\n        faceNormal.normalize();\n        var cameraDirection = new Phaser.Point(0, 0);\n        cameraDirection.x = this.camera.x - a.x;\n        cameraDirection.y = this.camera.y - a.y;\n        cameraDirection.normalize();\n        var dot = faceNormal.x * cameraDirection.x + faceNormal.y * cameraDirection.y;\n        if (dot > 0) {\n            this.moveTo(a.x, a.y);\n            this.lineTo(b.x, b.y);\n            this.lineTo(c.x, c.y);\n            this.lineTo(a.x, a.y);\n        }\n    } else {\n        this.moveTo(points[0].x, points[0].y);\n        this.lineTo(points[1].x, points[1].y);\n        this.lineTo(points[2].x, points[2].y);\n        this.lineTo(points[0].x, points[0].y);\n    }\n}", "CodeBleu_score": 36.40842874544094}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t    if (cull) {\n        // Calculate the face normal\n        var v1 = points[1].clone().subtract(points[0]);\n        var v2 = points[2].clone().subtract(points[0]);\n        var normal = v1.cross(v2).normalize();\n\n        // Check if the triangle is facing the camera\n        if (normal.dot(this.camera.position.subtract(points[0])) < 0) {\n            return;\n        }\n    }\n\n    // Draw the triangle\n    this.beginFill(this.fillColor, this.fillAlpha);\n    this.moveTo(points[0].x, points[0].y);\n    this.lineTo(points[1].x, points[1].y);\n    this.lineTo(points[2].x, points[2].y);\n    this.lineTo(points[0].x, points[0].y);\n    this.endFill();\n}", "CodeBleu_score": 33.762741106922675}]}
{"instance_id": "5d227ea7f97b", "generation_result": [{"code": "checkVideoProgress: function (){\n\t", "CodeBleu_score": 5.572246494525378}, {"code": "checkVideoProgress: function (){\n\t", "CodeBleu_score": 5.572246494525378}, {"code": "checkVideoProgress: function (){\n\t    if (this._pendingChangeSource && this.video.readyState >= 1) {\n        this._pendingChangeSource = false;\n\n        this.retry = 0;\n\n        window.clearTimeout(this._retryID);\n\n        this.texture.valid = true;\n\n        this.baseTexture.dirty();\n\n        if (this._autoplay) {\n            this.play();\n        }\n    } else {\n        if (this.retry > 0) {\n            this.retry--;\n\n            if (this.retry === 0) {\n                this.game.log.warn('Video failed to start downloading within the allowed retries.');\n            }\n\n            this._retryID = window.setTimeout(this.checkVideoProgress.bind(this), this.retryInterval);\n        }\n    }\n}", "CodeBleu_score": 65.90981295688509}]}
{"instance_id": "e48c3c53f00a", "generation_result": [{"code": "start: function (event, value){\n\t    if (this.isDown) {\n        return;\n    }\n    this.isDown = true;\n    this.isUp = false;\n    this.timeDown = this.game.time.time;\n    this.timeUp = 0;\n    this.repeats = 0;\n    this.event = event;\n    if (event) {\n        this.altKey = event.altKey;\n        this.shiftKey = event.shiftKey;\n        this.ctrlKey = event.ctrlKey;\n    }\n    this.onDown.dispatch(this, value);\n}", "CodeBleu_score": 79.35337167517265}, {"code": "start: function (event, value){\n\t    if (this.isDown) {\n        return;\n    }\n\n    this.isDown = true;\n    this.isUp = false;\n    this.timeDown = this.game.time.now;\n    this.timeUp = 0;\n    this.repeats = 0;\n    this.event = event;\n    this.value = value;\n\n    if (event) {\n        this.altKey = event.altKey;\n        this.shiftKey = event.shiftKey;\n        this.ctrlKey = event.ctrlKey;\n    }\n\n    this.onDown.dispatch(this, this.value);\n}", "CodeBleu_score": 79.33059183394526}, {"code": "start: function (event, value){\n\t    if (this.isDown) {\n        return;\n    }\n    this.isDown = true;\n    this.isUp = false;\n    this.timeDown = this.game.time.now;\n    this.timeUp = 0;\n    this.event = event;\n    this.value = value;\n    if (event) {\n        this.altKey = event.altKey;\n        this.shiftKey = event.shiftKey;\n        this.ctrlKey = event.ctrlKey;\n    }\n    this.repeats = 0;\n    this.onDown.dispatch(this, this.value);\n}", "CodeBleu_score": 78.64246173993791}]}
{"instance_id": "a2cb3bdacb1e", "generation_result": [{"code": "onMouseDown: function (event){\n\t    this.event = event;\n\n    if (this.capture)\n    {\n        event.preventDefault();\n    }\n\n    if (this.mouseDownCallback)\n    {\n        this.mouseDownCallback(event);\n    }\n\n    if (this.enabled)\n    {\n        this.input.mousePointer.start(event);\n    }\n}", "CodeBleu_score": 56.605213665570794}, {"code": "onMouseDown: function (event){\n\t    if (!this.enabled)\n    {\n        return;\n    }\n\n    this.event = event;\n\n    if (this.capture)\n    {\n        event.preventDefault();\n    }\n\n    if (this.mouseDownCallback)\n    {\n        this.mouseDownCallback.call(this.callbackContext, event);\n    }\n\n    if (this.input.enabled)\n    {\n        this.input.mousePointer.start(event);\n    }\n}", "CodeBleu_score": 70.17013035630612}, {"code": "onMouseDown: function (event){\n\t    if (this.enabled) {\n        this.event = event;\n\n        if (this.capture) {\n            event.preventDefault();\n        }\n\n        if (this.mouseDownCallback !== null) {\n            this.mouseDownCallback.call(this.callbackContext, event);\n        }\n\n        if (this.input.enabled) {\n            this.input.mousePointer.start(event);\n        }\n    }\n}", "CodeBleu_score": 63.02148626823059}]}
{"instance_id": "88538a5b66e8", "generation_result": [{"code": "onMouseUpGlobal: function (event){\n\t    this.event = event;\n\n    if (this.capture) {\n        event.preventDefault();\n    }\n\n    if (this.mouseUpCallback) {\n        this.mouseUpCallback.call(this.callbackContext, event);\n    }\n\n    if (!this.input.enabled || !this.enabled) {\n        return;\n    }\n\n    event.identifier = 0;\n\n    this.input.mousePointer.stop(event);\n}", "CodeBleu_score": 76.497966914911}, {"code": "onMouseUpGlobal: function (event){\n\t\n    this.event = event;\n\n    if (this.capture) {\n        event.preventDefault();\n    }\n\n    if (this.mouseUpCallback) {\n        this.mouseUpCallback.call(this.callbackContext, event);\n    }\n\n    if (!this.input.enabled || !this.enabled) {\n        return;\n    }\n\n    event.identifier = 0;\n\n    this.input.mousePointer.stop(event);\n}", "CodeBleu_score": 76.55036970960441}, {"code": "onMouseUpGlobal: function (event){\n\t    this.event = event;\n\n    if (this.capture) {\n        event.preventDefault();\n    }\n\n    if (this.mouseUpCallback) {\n        this.mouseUpCallback.call(this.callbackContext, event);\n    }\n\n    if (!this.input.enabled || !this.enabled) {\n        return;\n    }\n\n    event.identifier = 0;\n\n    this.input.mousePointer.stop(event);\n}", "CodeBleu_score": 76.497966914911}]}
{"instance_id": "bf8b43ab3487", "generation_result": [{"code": "onTouchEnter: function (event){\n\t    this.event = event;\n\n    if (this.touchEnterCallback) {\n        this.touchEnterCallback.call(this.callbackContext, event);\n    }\n\n    if (!this.game.input.enabled || !this.enabled) {\n        return;\n    }\n\n    if (this.preventDefault) {\n        event.preventDefault();\n    }\n\n    /*\n     *  Touch enter - touches that have entered the target element\n     *  http://www.w3.org/TR/touch-events/#dfn-touchenter\n     */\n    for (var i = 0; i < event.changedTouches.length; i++) {\n        this.game.input.startPointer(event.changedTouches[i]);\n    }\n}", "CodeBleu_score": 88.5186520902425}, {"code": "onTouchEnter: function (event){\n\t    this.event = event;\n\n    if (this.touchEnterCallback) {\n        this.touchEnterCallback.call(this.callbackContext, event);\n    }\n\n    if (!this.game.input.enabled || !this.enabled) {\n        return;\n    }\n\n    if (this.preventDefault) {\n        event.preventDefault();\n    }\n\n    /*\n     *  Touch enter - touches that have entered the target\n     *  http://www.w3.org/TR/touch-events/#dfn-touchenter\n     */\n    for (var i = 0; i < event.changedTouches.length; i++) {\n        this.game.input.startPointer(event.changedTouches[i]);\n    }\n}", "CodeBleu_score": 88.5186520902425}, {"code": "onTouchEnter: function (event){\n\t    this.event = event;\n\n    if (this.touchEnterCallback) {\n        this.touchEnterCallback.call(this.callbackContext, event);\n    }\n\n    if (!this.game.input.enabled || !this.enabled) {\n        return;\n    }\n\n    if (this.preventDefault) {\n        event.preventDefault();\n    }\n\n    /*\n     *  Touch enter - touches that have entered the target element\n     *  http://www.w3.org/TR/touch-events/#dfn-touchenter\n     */\n    for (var i = 0; i < event.changedTouches.length; i++) {\n        this.game.input.startPointer(event.changedTouches[i]);\n    }\n}", "CodeBleu_score": 88.5186520902425}]}
