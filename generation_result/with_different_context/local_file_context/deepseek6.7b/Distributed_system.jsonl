{"instance_id": "ba8707e206f9", "generation_result": [{"code": "def _kazoo_connect(self, *args: Any) -> Tuple[Union[int, float], Union[int, float]]\n\t\n    try:\n        wait, timeout = self._orig_kazoo_connect(*args)\n    except (ConnectionClosedError, socket.timeout) as e:\n        logger.warning('Connection to ZooKeeper failed: %s', e)\n            raise\n        except Exception as e:\n            logger.exception('Connection to ZooKeeper failed: %s', e)\n            raise\n        else:\n            return wait * 1000, timeout * 1000\n\n    def _kazoo_connect(self, *args: Any) -> Tuple[Union[int, float], Union[int, float]]:\n        # This function, _kazoo_connect, calls an original connection method with any given arguments, captures its return value, and then returns a tuple. The tuple consists of a calculated wait time in milliseconds and the second element of the original method's return value. The wait time is determined by subtracting 2 from the loop_wait attribute, ensuring it does not go below 2, and then multiplying by 1000.\n        try:\n            wait, timeout = self._orig_kazoo_connect(*args)\n        except (ConnectionClosedError, socket.timeout) as e:\n            logger.warning('Connection to ZooKeeper failed: %s', e)\n            raise\n        except Exception as e:\n            logger.exception('Connection to ZooKeeper failed: %s', e)\n            raise\n        else:\n            return wait * 1000, timeout * 1000\n\n    def _kazoo_connect(self, *args: Any) -> Tuple[Union[int, float], Union[int, float]]:\n        # This function, _kazoo_connect, calls an original connection method with any given arguments, captures its return value, and then returns a tuple. The tuple consists of a calculated wait time in milliseconds and the second element of the original method's return value. The wait time is determined by subtracting 2 from the loop_wait attribute, ensuring it does not go below 2, and then multiplying by 1000.\n        try:\n            wait, timeout =", "CodeBleu_score": 42.682245177375364}, {"code": "def _kazoo_connect(self, *args: Any) -> Tuple[Union[int, float], Union[int, float]]\n\t\n\n    wait_time, loop_wait = self._orig_kazoo_connect(*args)\n    wait_time = max(2, loop_wait - 2) * 1000\n    return wait_time, loop_wait\n\n", "CodeBleu_score": 45.81290960909602}, {"code": "def _kazoo_connect(self, *args: Any) -> Tuple[Union[int, float], Union[int, float]]\n\t\n\n    loop_wait = self._loop_wait\n    if loop_wait < 2:\n        loop_wait = 2\n    else:\n        loop_wait -= 2\n    loop_wait *= 1000\n\n    try:\n        return (loop_wait, self._orig_kazoo_connect(*args))\n    except ConnectionClosedError as e:\n        raise e\n\n", "CodeBleu_score": 43.412809032893826}]}
{"instance_id": "88e24a7c26a4", "generation_result": [{"code": "def reload_config(self, config: Union['Config', Dict[str, Any]]) -> None\n\t\n    if isinstance(config, Config):\n        config = config.get_dict()\n\n    if config.get('retry_timeout') != self.config.get('retry_timeout'):\n        self.config['retry_timeout'] = config.get('retry_timeout')\n        if isinstance(self.client._connection._handler, PatroniSequentialThreadingHandler):\n            self.client._connection._handler.set_connect_timeout(config.get('retry_timeout'))\n\n    if config.get('loop_wait') != self.config.get('loop_wait'):\n        self.config['loop_wait'] = config.get('loop_wait')\n        if isinstance(self.client._connection._handler, PatroniSequentialThreadingHandler):\n            self.client._connection._handler.set_connect_timeout(config.get('retry_timeout'))\n\n    if config.get('ttl') != self.config.get('ttl'):\n        self.config['ttl'] = config.get('ttl')\n        if self.client._connection._handler is not None:\n            self.client._connection._handler.set_timeout(config.get('ttl'))\n\n        if self.client._connection._sock is not None:\n            try:\n                self.client._connection._sock.settimeout(config.get('ttl'))\n            except socket.error:\n                self.client._connection._sock.close()\n                self.client._connection._sock = None\n\n    if config.get('set_acls') != self.config.get('set_acls'):\n        self.config['set_acls'] = config.get('set_acls')\n        self.client._connection._handler.set_default_acl(config.get('set_acls'))\n\n", "CodeBleu_score": 33.250624342040354}, {"code": "def reload_config(self, config: Union['Config', Dict[str, Any]]) -> None\n\t\n    if isinstance(config, Config):\n        config = config.get_dict()\n\n    if config.get('retry_timeout') != self.retry_timeout:\n            self.retry_timeout = config['retry_timeout']\n            self.client._connection.handler.set_connect_timeout(self.retry_timeout)\n\n    if config.get('loop_wait') != self.loop_wait:\n            self.loop_wait = config['loop_wait']\n            if isinstance(self.client._connection.handler, PatroniSequentialThreadingHandler):\n                self.client._connection.handler.set_connect_timeout(self.loop_wait / 2.0)\n\n    if config.get('ttl') != self.ttl:\n        self.ttl = config['ttl']\n        self.client.timeout = self.ttl\n        self.client.command_retry.deadline = self.ttl\n\n        try:\n            self.client.touch_member()\n        except SessionExpiredError:\n            self.client.close_socket()\n\n    self.config = config\n\n", "CodeBleu_score": 38.53437531374654}, {"code": "def reload_config(self, config: Union['Config', Dict[str, Any]]) -> None\n\t\n    if isinstance(config, dict):\n        config = Config(config)\n    self.retry_timeout = config.get('retry_timeout', self.retry_timeout)\n    self.loop_wait = config.get('loop_wait', self.loop_wait)\n    self.ttl = config.get('ttl', self.ttl)\n    if isinstance(self._client.handler, PatroniSequentialThreadingHandler):\n        self._client.handler.set_connect_timeout(self.loop_wait / 2.0)\n    if self.ttl != self._client.timeout and self._client.state == KeeperState.CONNECTED:\n        try:\n            self._client.set_ttl(self.ttl)\n        except SessionExpiredError:\n            if self.loop_wait != self._client.handler._connect_timeout:\n                self._client.close_socket()\n", "CodeBleu_score": 40.62517151509672}]}
{"instance_id": "2af7d7b3c887", "generation_result": [{"code": "def _postgresql_cluster_loader(self, path: str) -> Cluster\n\t\n    cluster = Cluster()\n    cluster.path = path\n    cluster.name = self.get_node(path + self._NAME)[0]\n\n    cluster.config = self.get_node(path + self._CONFIG)[0]\n\n    cluster.timeline_history = self.get_node(path + self._TIMELINE_HISTORY)[0]\n\n    cluster.synchronization_state = self.get_node(path + self._SYNCHRONIZATION_STATE)[0]\n\n    cluster.members = self.load_members(path)\n\n    cluster.leader = self.get_leader(path)\n\n    cluster.status = self.get_status(path, cluster.leader)\n\n    cluster.failover_state = self.get_node(path + self._FAILOVER_STATE)[0]\n\n    cluster.failsafe_config = self.get_node(path + self._FAILSAFE_CONFIG)[0]\n\n    return cluster\n\n\n\n", "CodeBleu_score": 13.234778352042678}, {"code": "def _postgresql_cluster_loader(self, path: str) -> Cluster\n\t\n    # Check if the cluster is initialized\n    if not self.exists(path + self._INITIALIZED):\n        raise NotInitialized(path + self._INITIALIZED)\n\n    # Load the cluster configuration\n    config = self.get_node(path + self._CONFIG)\n    if config is None:\n        raise NoConfig(path + self._CONFIG)\n    config = Config(config[0])\n\n    # Load the timeline history\n    timeline_history = self.get_node(path + self._TIMELINE_HISTORY)\n    if timeline_history is None:\n        raise NoTimelineHistory(path + self._TIMELINE_HISTORY)\n    timeline_history = TimelineHistory(timeline_history[0])\n\n    # Load the synchronization state\n    synchronization_state = self.get_node(path + self._SYNCHRONIZATION_STATE)\n    if synchronization_state is None:\n        raise NoSynchronizationState(path + self._SYNCHRONIZATION_STATE)\n    synchronization_state = SynchronizationState(synchronization_state[0])\n\n    # Load the members\n    members = self.load_members(path)\n\n    # Load the leader information\n    leader = self.get_node(path + self._LEADER)\n    if leader is not None:\n        leader = Leader.from_node(*leader)\n\n    # Load the cluster status\n    status = self.get_status(path, leader)\n\n    # Load the failover state\n    failover_state = self.get_node(path + self._FAILOVER_STATE)\n    if failover_state is not None:\n        failover_state = FailoverState.from_node(failover_state[0])\n\n    # Load the failsafe configuration\n    failsafe_config = self.get_node(path + self._FAILSAFE_CONFIG)\n    if failsafe_config is not None:\n        failsafe_config = FailsafeConfig.from_node(failsafe_config[0])\n\n    # Create a Cluster object with the loaded components\n    cluster = Cl", "CodeBleu_score": 30.889290389214878}, {"code": "def _postgresql_cluster_loader(self, path: str) -> Cluster\n\t\n    # Check if cluster is initialized\n    if not self.exists(path + self._INITIALIZED):\n        raise NotInitializedError()\n\n    # Load cluster configuration\n    config = self.load_config(path)\n    if not config:\n        raise NoConfigError()\n\n    # Load timeline history\n    timeline_history = self.load_timeline_history(path)\n\n    # Load synchronization state\n    synchronization_state = self.load_synchronization_state(path)\n\n    # Load members\n    members = self.load_members(path)\n\n    # Load leader information\n    leader = self.load_leader(path)\n\n    # Load cluster status\n    status = self.get_status(path, leader)\n\n    # Load failover state\n    failover_state = self.load_failover_state(path)\n\n    # Load failsafe configuration\n    failsafe_config = self.load_failsafe_config(path)\n\n    # Return a Cluster object with all the gathered information\n    return Cluster(config, timeline_history, synchronization_state, members, leader, status, failover_state, failsafe_config)\n\n", "CodeBleu_score": 15.877552984953985}]}
{"instance_id": "43e1bc044d8e", "generation_result": [{"code": "def attempt_to_acquire_leader(self) -> bool\n\t\n    try:\n        return self._client.retry(self._client.create, self._path, b'', makepath=True, ephemeral=True)\n    except Exception as e:\n        if isinstance(e, NodeExistsError):\n            logger.info('Failed to acquire leader lock, another instance has the lock')\n        elif isinstance(e, ConnectionClosed):\n            raise ZooKeeperError('ZooKeeper in not responding properly')\n        else:\n            logger.exception('Failed to acquire leader lock')\n    return False\n\n", "CodeBleu_score": 45.51993678282717}, {"code": "def attempt_to_acquire_leader(self) -> bool\n\t\n    if not self._client.connected:\n            raise ZooKeeperError('ZooKeeper is not connected')\n        try:\n            self._client.retry(self._client.create, self._path, b'', makepath=True, ephemeral=True)\n            return True\n        except Exception as e:\n            if isinstance(e, NodeExistsError):\n                logger.info('Failed to acquire leader lock, another instance has the lock')\n            else:\n                logger.exception('Failed to acquire leader lock')\n            return False\n\n", "CodeBleu_score": 47.35828788290739}, {"code": "def attempt_to_acquire_leader(self) -> bool\n\t\n    try:\n        return self._client.retry(self._client.create, self._path, b'', ephemeral=True)\n    except NodeExistsError:\n        logger.info('Another instance has the lock')\n        return False\n    except Exception:\n        logger.exception('Failed to acquire a leader lock')\n        raise ZooKeeperError('ZooKeeper in not responding properly')\n\n", "CodeBleu_score": 34.57510889388992}]}
{"instance_id": "93d126ab8a22", "generation_result": [{"code": "def _update_leader(self, leader: Leader) -> bool\n\t\n    if self._client.client_id is not None and leader.session != self._client.client_id[0]:\n        logger.warning('Recreating the leader ZNode due to ownership mismatch')\n            try:\n                self._client.delete_async(self.leader_path).get(timeout=1)\n            except NoNodeError:\n                pass\n            except Exception:\n                return False\n            leader = None\n\n    if leader is None:\n        return True\n\n    try:\n        self._client.create_async(self.leader_path, leader.name.encode('utf-8'), makepath=True, ephemeral=True).get(timeout=1)\n        return True\n    except Exception as e:\n        if not isinstance(e, NodeExistsError):\n            logger.exception('Failed to create %s', self.leader_path)\n    return False\n\n", "CodeBleu_score": 48.99886371248772}, {"code": "def _update_leader(self, leader: Leader) -> bool\n\t\n    if self._client.client_id is not None and self._client.client_id[0] != leader.session:\n        logger.warning('Recreating the leader ZNode due to ownership mismatch')\n            try:\n                self._client.delete_async(self.leader_path).get(timeout=1)\n            except NoNodeError:\n                pass\n            except Exception:\n                return False\n\n        try:\n            self._client.create_async(self.leader_path, self._name.encode('utf-8'), makepath=True, ephemeral=True).get(timeout=1)\n            return True\n        except Exception:\n            logger.exception('Failed to create %s', self.leader_path)\n\n    return True\n\n    def _write_sync(self, value: str) -> bool:\n        return self._set_or_create(self.sync_path, value) is not False\n\n    def _write_history(self, value: str) -> bool:\n        return self._set_or_create(self.history_path, value) is not False\n\n    def _write_members(self, value: str) -> bool:\n        return self._set_or_create(self.members_path, value) is not False\n\n    def _write_failsafe(self, value: str) -> bool:\n        return self._set_or_create(self.failsafe_path, value) is not False\n\n    def _write_status(self, value: str) -> bool:\n        return self._set_or_create(self.status_path, value) is not False\n\n    def _write_config(self, value: str) -> bool:\n        return self._set_or_create(self.config_path, value) is not False\n\n    def _write_failover(self, value: str) -> bool:\n        return self._set_or_create(self.failover_path, value) is not False\n\n    def _write_leader_optime(self, value: str)", "CodeBleu_score": 50.33968195471296}, {"code": "def _update_leader(self, leader: Leader) -> bool\n\t\n    if self._client.client_id is not None and leader.session != self._client.client_id[0]:\n        logger.warning('Recreating the leader ZNode due to ownership mismatch')\n        try:\n            self._client.delete_async(self.leader_path).get(timeout=1)\n        except NoNodeError:\n            pass\n        except Exception:\n            return False\n        leader = None\n    if leader is None:\n        try:\n            self._client.create_async(self.leader_path, self._name.encode('utf-8'), makepath=True, ephemeral=True).get(timeout=1)\n            return True\n        except Exception as e:\n            if not isinstance(e, NodeExistsError):\n                logger.exception('Failed to create %s', self.leader_path)\n            return False\n    try:\n        self._client.set_async(self.leader_path, self._name.encode('utf-8')).get(timeout=1)\n        return True\n    except Exception:\n        logger.exception('Failed to update %s', self.leader_path)\n    return False\n\n", "CodeBleu_score": 56.454865065031}]}
{"instance_id": "f68719982812", "generation_result": [{"code": "def poll(self) -> bool\n\t\n    if self._next_poll is not None and time.time() < self._next_poll:\n        return False\n\n    self._next_poll = time.time() + self._poll_interval\n    exhibitors = self._exhibitors\n    for exhibitor in exhibitors:\n        try:\n            response = requests_get(uri.build(scheme='http', host=exhibitor, port=self._exhibitor_port, path=self._uri_path))\n        except Exception as e:\n            logger.debug(f'failed to get exhibitor status: {e}')\n            continue\n\n        if response.status_code != 200:\n            logger.debug(f'failed to get exhibitor status: {response.text}')\n            continue\n\n        try:\n            data = json.loads(response.text)\n        except Exception as e:\n            logger.debug(f'failed to parse exhibitor status: {e}')\n            continue\n\n        if 'servers' not in data or 'port' not in data:\n            logger.debug('exhibitor status did not contain server or port information')\n            continue\n\n        if self._zookeeper_hosts != data['servers']:\n            logger.info(f'exhibitor status changed: {self._zookeeper_hosts} -> {data[\"servers\"]}')\n            self._zookeeper_hosts = data['servers']\n            return True\n\n    return False\n\n", "CodeBleu_score": 37.771017729490026}, {"code": "def poll(self) -> bool\n\t\n    if self._next_poll is not None and time.time() < self._next_poll:\n        return False\n    self._next_poll = time.time() + self._poll_interval\n    exhibitors = []\n    for exhibitor in self._exhibitors:\n        response = requests_get(uri.build_uri(exhibitor, self._exhibitor_port, self._uri_path))\n        if response.status_code != 200:\n            logger.info('exhibitor returned %s', response.status_code)\n            continue\n        try:\n            data = response.json()\n        except json.JSONDecodeError:\n            logger.info('exhibitor returned invalid data')\n            continue\n        if not data.get('servers'):\n            logger.info('exhibitor returned no servers')\n            continue\n        for server in data['servers']:\n            if server['port'] == self._exhibitor_port:\n                exhibitors.append(server['server'])\n    if exhibitors == self._exhibitors:\n        return False\n    self._exhibitors = exhibitors\n    if self._zookeeper_hosts != ','.join(self._exhibitors):\n        logger.info('zookeeper hosts changed from %s to %s', self._zookeeper_hosts, ','.join(self._exhibitors))\n        self._zookeeper_hosts = ','.join(self._exhibitors)\n    return True\n\n", "CodeBleu_score": 36.5977186202695}, {"code": "def poll(self) -> bool\n\t\n    if self._next_poll is not None and time.time() < self._next_poll:\n        return False\n    self._next_poll = time.time() + self._poll_interval\n    exhibitors = self._exhibitors\n    logger.debug('polling exhibitors')\n        self._exhibitors = []\n    for exhibitor in exhibitors:\n        try:\n            response = requests_get(f'http://{exhibitor}:{self._exhibitor_port}{self._uri_path}', timeout=self.TIMEOUT)\n            if response.status_code == 200:\n                data = response.json()\n                servers = data.get('servers', [])\n                if servers:\n                    self._exhibitors.extend([f'{server.get(\"hostname\")}:{server.get(\"port\")}' for server in servers if server.get(\"port\")])\n        except Exception:\n            logger.exception('failed to poll exhibitor')\n    if self._exhibitors != exhibitors:\n            logger.info('exhibitors changed, updating zookeeper hosts')\n            self._zookeeper_hosts = ','.join(self._exhibitors)\n            self._boot_exhibitors = self._exhibitors\n            return True\n    return False\n\n", "CodeBleu_score": 36.131238245729705}]}
{"instance_id": "022ed3721913", "generation_result": [{"code": "def _load_cluster(\n            self, path: str, loader: Callable[[str], Union[Cluster, Dict[int, Cluster]]]\n    ) -> Union[Cluster, Dict[int, Cluster]]\n\t\n    if self._ensemble_provider:\n        if self._ensemble_provider.poll():\n            self._client.hosts = self._ensemble_provider.zookeeper_hosts\n    return super(Exhibitor, self)._load_cluster(path, loader)", "CodeBleu_score": 77.22316116659695}, {"code": "def _load_cluster(\n            self, path: str, loader: Callable[[str], Union[Cluster, Dict[int, Cluster]]]\n    ) -> Union[Cluster, Dict[int, Cluster]]\n\t\n    if self._ensemble_provider:\n        self._ensemble_provider.poll()\n        self._hosts = self._ensemble_provider.zookeeper_hosts\n    return super(Exhibitor, self)._load_cluster(path, loader)", "CodeBleu_score": 77.5414776360031}, {"code": "def _load_cluster(\n            self, path: str, loader: Callable[[str], Union[Cluster, Dict[int, Cluster]]]\n    ) -> Union[Cluster, Dict[int, Cluster]]\n\t\n    if self._ensemble_provider:\n        self._ensemble_provider.poll()\n        self._client.hosts = self._ensemble_provider.zookeeper_hosts\n    return super(Exhibitor, self)._load_cluster(path, loader)", "CodeBleu_score": 77.46961547702666}]}
{"instance_id": "c7d2e1db0cda", "generation_result": [{"code": "public ZookeeperListener(NodeCache nodeCache, NodeCacheListener nodeCacheListener){\n\t    this.nodeCache = nodeCache;\n    this.nodeCacheListener = nodeCacheListener;\n}", "CodeBleu_score": 81.45633845775137}, {"code": "public ZookeeperListener(NodeCache nodeCache, NodeCacheListener nodeCacheListener){\n\t    this.nodeCache = nodeCache;\n    this.nodeCacheListener = nodeCacheListener;\n}", "CodeBleu_score": 81.45633845775137}, {"code": "public ZookeeperListener(NodeCache nodeCache, NodeCacheListener nodeCacheListener){\n\t    this.nodeCache = nodeCache;\n    this.nodeCacheListener = nodeCacheListener;\n}", "CodeBleu_score": 81.45633845775137}]}
{"instance_id": "c779f567d3e2", "generation_result": [{"code": "public void destroy(){\n\t    if (zookeeperListener != null) {\n        String group = getGroup();\n        String dataId = getDataId();\n\n        logUnsubscribeStarted();\n\n        try {\n            zookeeperOperation.unsubscribeConfig(group, dataId, zookeeperListener);\n        } catch (Exception e) {\n            logUnsubscribeFailed(e);\n        }\n    }\n}", "CodeBleu_score": 88.23947003353105}, {"code": "public void destroy(){\n\t    if (zookeeperListener == null) {\n            return;\n        }\n\n        String group = getGroup();\n        String dataId = getDataId();\n\n        logUnsubscribeStarted();\n\n        try {\n            zookeeperOperation.unsubscribeConfig(group, dataId, zookeeperListener);\n        } catch (Exception e) {\n            logUnsubscribeFailed(e);\n        }\n    }", "CodeBleu_score": 96.76463218981625}, {"code": "public void destroy(){\n\t    if (zookeeperListener == null) {\n            return;\n        }\n\n        String group = getGroup();\n        String dataId = getDataId();\n\n        logUnsubscribeStarted();\n\n        try {\n            zookeeperOperation.unsubscribeConfig(group, dataId, zookeeperListener);\n        } catch (Exception e) {\n            logUnsubscribeFailed(e);\n        }\n    }", "CodeBleu_score": 96.76463218981625}]}
{"instance_id": "7f0ce4db487b", "generation_result": [{"code": "public Map<String, String> getServerMetadata(Server server){\n\t    if (server instanceof ZookeeperServer) {\n        ZookeeperServer zookeeperServer = (ZookeeperServer) server;\n\n        return zookeeperServer.getPayload();\n    }\n\n    return null;\n}", "CodeBleu_score": 63.34925891632091}, {"code": "public Map<String, String> getServerMetadata(Server server){\n\t    if (server instanceof ZookeeperServer) {\n            ZookeeperServer zookeeperServer = (ZookeeperServer) server;\n\n            return zookeeperServer.getPayload();\n        }\n\n        return null;\n    }", "CodeBleu_score": 63.67441257555865}, {"code": "public Map<String, String> getServerMetadata(Server server){\n\t    if (server instanceof ZookeeperServer) {\n            ZookeeperServer zookeeperServer = (ZookeeperServer) server;\n\n            return zookeeperServer.getPayload();\n        }\n\n        return null;\n    }", "CodeBleu_score": 63.67441257555865}]}
{"instance_id": "7365d194b7ee", "generation_result": [{"code": "public ZookeeperListener subscribeConfig(String group, String serviceId, ZookeeperSubscribeCallback zookeeperSubscribeCallback) throws Exception{\n\t    String path = getPath(group, serviceId);\n    NodeCache nodeCache = new NodeCache(curatorFramework, path);\n    NodeCacheListener nodeCacheListener = new NodeCacheListener() {\n        @Override\n        public void nodeChanged() throws Exception {\n            ChildData childData = nodeCache.getCurrentData();\n            if (childData == null) {\n                return;\n            }\n\n            String config = convertConfig(childData);\n            if (config == null) {\n                return;\n            }\n\n            zookeeperSubscribeCallback.onReceive(config);\n        }\n    };\n\n    ZookeeperListener zookeeperListener = new ZookeeperListener(nodeCache, nodeCacheListener);\n    nodeCache.getListenable().addListener(nodeCacheListener, Executors.newSingleThreadExecutor());\n    nodeCache.start(true);\n\n    return zookeeperListener;\n}", "CodeBleu_score": 75.2502157009653}, {"code": "public ZookeeperListener subscribeConfig(String group, String serviceId, ZookeeperSubscribeCallback zookeeperSubscribeCallback) throws Exception{\n\t    String path = getPath(group, serviceId);\n    NodeCache nodeCache = new NodeCache(curatorFramework, path);\n    NodeCacheListener nodeCacheListener = new NodeCacheListener() {\n        @Override\n        public void nodeChanged() throws Exception {\n            ChildData childData = nodeCache.getCurrentData();\n            if (childData == null) {\n                return;\n            }\n\n            String config = convertConfig(childData);\n            if (config == null) {\n                return;\n            }\n\n            zookeeperSubscribeCallback.callback(config);\n        }\n    };\n\n    ZookeeperListener zookeeperListener = new ZookeeperListener(nodeCache, nodeCacheListener);\n    nodeCache.getListenable().addListener(nodeCacheListener, Executors.newSingleThreadExecutor());\n    nodeCache.start(true);\n\n    return zookeeperListener;\n}", "CodeBleu_score": 75.60144430152296}, {"code": "public ZookeeperListener subscribeConfig(String group, String serviceId, ZookeeperSubscribeCallback zookeeperSubscribeCallback) throws Exception{\n\t    String path = getPath(group, serviceId);\n    NodeCache nodeCache = new NodeCache(curatorFramework, path);\n    NodeCacheListener nodeCacheListener = new NodeCacheListener() {\n            @Override\n            public void nodeChanged() throws Exception {\n                ChildData childData = nodeCache.getCurrentData();\n                if (childData == null) {\n                    return;\n                }\n\n                String config = convertConfig(childData.getPath());\n                if (config == null) {\n                    return;\n                }\n\n                zookeeperSubscribeCallback.callback(config);\n            }\n        };\n    nodeCache.getListenable().addListener(nodeCacheListener);\n    nodeCache.start();\n\n    ZookeeperListener zookeeperListener = new ZookeeperListener(nodeCache, nodeCacheListener);\n    zookeeperListener.addListener();\n\n    return zookeeperListener;\n}", "CodeBleu_score": 72.03757796649587}]}
{"instance_id": "6f492670162b", "generation_result": [{"code": "public ServerList<?> ribbonServerList(IClientConfig config, ServiceDiscovery<ZookeeperInstance> serviceDiscovery){\n\t    ZookeeperServerListDecorator serverList = new ZookeeperServerListDecorator(serviceDiscovery);\n    serverList.initWithClientConfig(config);\n    serverList.setLoadBalanceListenerExecutor(loadBalanceListenerExecutor);\n    serverList.setServiceId(config.getClientName());\n\n    return serverList;\n}", "CodeBleu_score": 80.23719103196183}, {"code": "public ServerList<?> ribbonServerList(IClientConfig config, ServiceDiscovery<ZookeeperInstance> serviceDiscovery){\n\t    ZookeeperServerListDecorator serverList = new ZookeeperServerListDecorator(serviceDiscovery);\n    serverList.initWithClientConfig(config);\n    serverList.setLoadBalanceListenerExecutor(loadBalanceListenerExecutor);\n    serverList.setServiceId(config.getClientName());\n\n    return serverList;\n}", "CodeBleu_score": 80.23719103196183}, {"code": "public ServerList<?> ribbonServerList(IClientConfig config, ServiceDiscovery<ZookeeperInstance> serviceDiscovery){\n\t    ZookeeperServerListDecorator serverList = new ZookeeperServerListDecorator(serviceDiscovery);\n    serverList.initWithClientConfig(config);\n    serverList.setLoadBalanceListenerExecutor(loadBalanceListenerExecutor);\n    serverList.setServiceId(config.getClientName());\n\n    return serverList;\n}", "CodeBleu_score": 80.23719103196183}]}
{"instance_id": "17c01a5f8ef8", "generation_result": [{"code": "public void register(ZookeeperRegistration registration){\n\t    try {\n            RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n            registerListenerExecutor.onRegister(registration);\n        } catch (BeansException e) {\n            // LOG.error(\\\"Failed to get RegisterListenerExecutor bean, ignore it\\\", e);\n        }\n\n        serviceRegistry.register(registration);\n    }", "CodeBleu_score": 89.48846774440912}, {"code": "public void register(ZookeeperRegistration registration){\n\t    try {\n            RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n            registerListenerExecutor.onRegister(registration);\n        } catch (BeansException e) {\n            // LOG.error(\\\"Failed to get RegisterListenerExecutor bean from application context\\\", e);\n        }\n\n        serviceRegistry.register(registration);\n    }", "CodeBleu_score": 89.48846774440912}, {"code": "public void register(ZookeeperRegistration registration){\n\t    try {\n            RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n    registerListenerExecutor.onRegister(registration);\n} catch (BeansException e) {\n    // LOG.error(\\\"Failed to get RegisterListenerExecutor, ignore it\\\", e);\n} finally {\n            serviceRegistry.register(registration);\n}\n}", "CodeBleu_score": 83.30906562891239}]}
{"instance_id": "99392dfa2335", "generation_result": [{"code": "public void deregister(ZookeeperRegistration registration){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onDeregister(registration);\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.deregister(registration);\n}", "CodeBleu_score": 91.46429325894339}, {"code": "public void deregister(ZookeeperRegistration registration){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onDeregister(registration);\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.deregister(registration);\n}", "CodeBleu_score": 91.46429325894339}, {"code": "public void deregister(ZookeeperRegistration registration){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onDeregister(registration);\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.deregister(registration);\n}", "CodeBleu_score": 91.46429325894339}]}
{"instance_id": "02a835946e90", "generation_result": [{"code": "public void close(){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onClose();\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.close();\n}", "CodeBleu_score": 99.7694205192842}, {"code": "public void close(){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onClose();\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.close();\n}", "CodeBleu_score": 99.7694205192842}, {"code": "public void close(){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onClose();\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.close();\n}", "CodeBleu_score": 99.7694205192842}]}
{"instance_id": "64cf817f5945", "generation_result": [{"code": "private ZookeeperListener subscribeConfig(boolean globalConfig){\n\t    String group = getGroup();\n    String dataId = getDataId();\n    logger.info(\"Subscribe config center config, group: {}, dataId: {}\", group, dataId);\n    try {\n            zookeeperOperation.subscribeConfig(group, dataId, new ZookeeperSubscribeCallback() {\n                @Override\n                public void onConfigChanged(String config) {\n                    if (globalConfig) {\n                        onGlobalConfigChanged(config);\n                    } else {\n                        onPartialConfigChanged(config);\n                    }\n                }\n            });\n            logger.info(\\\"Subscribe config center config success, group: {}, dataId: {}\\\", group, dataId);\n            return new ZookeeperListener(zookeeperOperation);\n        } catch (Exception e) {\n            logger.error(\\\"Subscribe config center config failed, group: {}, dataId: {}\\\", group, dataId, e);\n            return null;\n        }\n    }", "CodeBleu_score": 56.577763454146044}, {"code": "private ZookeeperListener subscribeConfig(boolean globalConfig){\n\t    String group = getGroup();\n    String dataId = getDataId(globalConfig);\n    log.info(\"Subscribe config to zookeeper, group={}, dataId={}\", group, dataId);\n    try {\n            zookeeperOperation.subscribeConfig(group, dataId, new ZookeeperSubscribeCallback() {\n                @Override\n                public void onEvent(String config) {\n                    onConfigChanged(config);\n                }\n            });\n            return new ZookeeperListener(group, dataId, ConfigType.CONFIG_TYPE_CONFIG_CENTER, zookeeperOperation);\n        } catch (Exception e) {\n            log.error(\"Subscribe config to zookeeper failed, group={}, dataId={}\", group, dataId, e);\n        }\n\n        return null;\n    }", "CodeBleu_score": 57.24105217801158}, {"code": "private ZookeeperListener subscribeConfig(boolean globalConfig){\n\t    String group = getGroup();\n    String dataId = getDataId();\n    log.info(\"Zookeeper config center subscribe config, group: {}, dataId: {}, globalConfig: {}\", group, dataId, globalConfig);\n    try {\n        if (globalConfig) {\n            zookeeperOperation.subscribeConfig(group, dataId, new ZookeeperSubscribeCallback() {\n                @Override\n                public void callback(String config) {\n                    ConfigAdapter.super.callback(config, ConfigType.GLOBAL);\n                }\n            });\n        } else {\n            zookeeperOperation.subscribeConfig(group, dataId, new ZookeeperSubscribeCallback() {\n                @Override\n                public void callback(String config) {\n                    ConfigAdapter.super.callback(config, ConfigType.PARTIAL);\n                }\n            });\n        }\n    } catch (Exception e) {\n        log.error(\"Zookeeper config center subscribe config failed, group: {}, dataId: {}, globalConfig: {}\", group, dataId, globalConfig, e);\n        return null;\n    }\n\n    return new ZookeeperListener() {\n        @Override\n        public void onClose() {\n            log.info(\"Zookeeper config center subscribe config onClose, group: {}, dataId: {}, globalConfig: {}\", group, dataId, globalConfig);\n        }\n\n        @Override\n        public void onError(Throwable throwable) {\n            log.error(\"Zookeeper config center subscribe config onError, group: {}, dataId: {}, globalConfig: {}\", group, dataId, globalConfig, throwable);\n        }\n    };\n}", "CodeBleu_score": 54.615942239497606}]}
{"instance_id": "be408acc71f6", "generation_result": [{"code": "public CuratorFramework curatorFramework(){\n\t    String zookeeperConnectionString = environment.getProperty(ZookeeperConstant.ZOOKEEPER_CONNECTION_STRING);\n    if (StringUtils.isEmpty(zookeeperConnectionString)) {\n            throw new DiscoveryException(\\\"[Discovery] Zookeeper connection string is not set, please check your configuration\\\");\n        }\n\n        int retryCount = environment.getProperty(ZookeeperConstant.ZOOKEEPER_RETRY_COUNT, Integer.class, ZookeeperConstant.ZOOKEEPER_RETRY_COUNT_DEFAULT);\n        int sleepTime = environment.getProperty(ZookeeperConstant.ZOOKEEPER_SLEEP_TIME, Integer.class, ZookeeperConstant.ZOOKEEPER_SLEEP_TIME_DEFAULT);\n\n        ExponentialBackoffRetry retryPolicy = new ExponentialBackoffRetry(sleepTime, retryCount);\n        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(zookeeperConnectionString, retryPolicy);\n        curatorFramework.start();\n\n        return curatorFramework;\n    }", "CodeBleu_score": 62.11439943420687}, {"code": "public CuratorFramework curatorFramework(){\n\t    String zookeeperAddress = environment.getProperty(ZookeeperConstant.ZOOKEEPER_ADDRESS);\n    if (StringUtils.isEmpty(zookeeperAddress)) {\n        throw new DiscoveryException(\"Failed to get zookeeper address, please check the configuration\");\n    }\n\n    int retryCount = environment.getProperty(ZookeeperConstant.ZOOKEEPER_RETRY_COUNT, Integer.class, 3);\n    int sleepTimeMs = environment.getProperty(ZookeeperConstant.ZOOKEEPER_SLEEP_TIME_MS, Integer.class, 1000);\n\n    CuratorFramework curatorFramework = CuratorFrameworkFactory.builder()\n                .connectString(zookeeperAddress)\n                .retryPolicy(new ExponentialBackoffRetry(sleepTimeMs, retryCount))\n                .build();\n    curatorFramework.start();\n\n    return curatorFramework;\n}", "CodeBleu_score": 59.94122551773333}, {"code": "public CuratorFramework curatorFramework(){\n\t    String zookeeperAddress = environment.getProperty(ZookeeperConstant.ZOOKEEPER_ADDRESS);\n    if (StringUtils.isEmpty(zookeeperAddress)) {\n        throw new DiscoveryException(\\\"The zookeeper address is empty\\\");\n    }\n\n    int retryCount = environment.getProperty(ZookeeperConstant.ZOOKEEPER_RETRY_COUNT, Integer.class, 3);\n    int sleepTimeMs = environment.getProperty(ZookeeperConstant.ZOOKEEPER_SLEEP_TIME_MS, Integer.class, 1000);\n\n    CuratorFramework curatorFramework = CuratorFrameworkFactory.builder()\n            .connectString(zookeeperAddress)\n            .retryPolicy(new ExponentialBackoffRetry(sleepTimeMs, retryCount))\n            .build();\n\n    curatorFramework.start();\n\n    return curatorFramework;\n}", "CodeBleu_score": 59.251979916927965}]}
{"instance_id": "3628d7b6f0a5", "generation_result": [{"code": "protected static class GatewayRouteZookeeperConfiguration{\n\t    @Bean\n    @ConditionalOnProperty(value = \"spring.cloud.gateway.discovery.locator.enabled\", havingValue = \"false\", matchIfMissing = true)\n    public ZookeeperProcessor gatewayStrategyRouteZookeeperProcessor() {\n        return new GatewayStrategyRouteZookeeperProcessor();\n    }\n}", "CodeBleu_score": 74.80120279114679}, {"code": "protected static class GatewayRouteZookeeperConfiguration{\n\t    @Bean\n    @ConditionalOnProperty(value = \"spring.cloud.gateway.discovery.locator.enabled\", havingValue = \"false\", matchIfMissing = true)\n    public ZookeeperProcessor gatewayStrategyRouteZookeeperProcessor() {\n        return new GatewayStrategyRouteZookeeperProcessor();\n    }\n}", "CodeBleu_score": 74.80120279114679}, {"code": "protected static class GatewayRouteZookeeperConfiguration{\n\t    /**\n     * This method returns a new instance of GatewayStrategyRouteZookeeperProcessor.\nIt is conditional, only executing if the property \"spring.cloud.gateway.discovery.locator.enabled\" is set to \"false\" or is missing.\n     * @return A new instance of GatewayStrategyRouteZookeeperProcessor.\n     */\n    @Bean\n    @ConditionalOnProperty(value = \"spring.cloud.gateway.discovery.locator.enabled\", havingValue = \"false\", matchIfMissing = true)\n    public ZookeeperProcessor gatewayStrategyRouteZookeeperProcessor() {\n        return new GatewayStrategyRouteZookeeperProcessor();\n    }\n}", "CodeBleu_score": 74.91212662841629}]}
{"instance_id": "68a13b54ad7c", "generation_result": [{"code": "public  CuratorFramework createCuratorFramework(){\n\t    RetryPolicy retryPolicy = new ExponentialBackoffRetry(zooKeeperClientProperties.getBaseSleepTimeMs(), zooKeeperClientProperties.getMaxRetries());\n    curatorFramework = CuratorFrameworkFactory.builder()\n            .connectString(zooKeeperClientProperties.getHosts())\n            .sessionTimeoutMs(zooKeeperClientProperties.getSessionTimeoutMs())\n            .connectionTimeoutMs(zooKeeperClientProperties.getConnectionTimeoutMs())\n            .namespace(zooKeeperClientProperties.getNamespace())\n            .retryPolicy(retryPolicy)\n            .build();\n    curatorFramework.start();\n    return curatorFramework;\n}", "CodeBleu_score": 60.574716977962204}, {"code": "public  CuratorFramework createCuratorFramework(){\n\t    RetryPolicy retryPolicy = new ExponentialBackoffRetry(zooKeeperClientProperties.getBaseSleepTimeMs(), zooKeeperClientProperties.getMaxRetries());\n    curatorFramework = CuratorFrameworkFactory.builder()\n            .connectString(zooKeeperClientProperties.getHosts())\n            .sessionTimeoutMs(zooKeeperClientProperties.getSessionTimeoutMs())\n            .connectionTimeoutMs(zooKeeperClientProperties.getConnectionTimeoutMs())\n            .namespace(zooKeeperClientProperties.getNamespace())\n            .retryPolicy(retryPolicy)\n            .build();\n    curatorFramework.start();\n    return curatorFramework;\n}", "CodeBleu_score": 60.574716977962204}, {"code": "public  CuratorFramework createCuratorFramework(){\n\t    // \u91cd\u8bd5\u7b56\u7565\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(zooKeeperClientProperties.getBaseSleepTimeMs(), zooKeeperClientProperties.getMaxRetries());\n    // \u83b7\u53d6 CuratorFramework \u5b9e\u4f8b\n    CuratorFramework curatorFramework = CuratorFrameworkFactory.builder()\n            .connectString(zooKeeperClientProperties.getHosts())\n            .sessionTimeoutMs(zooKeeperClientProperties.getSessionTimeoutMs())\n            .connectionTimeoutMs(zooKeeperClientProperties.getConnectionTimeoutMs())\n            .namespace(zooKeeperClientProperties.getNamespace())\n            .retryPolicy(retryPolicy)\n            .build();\n    curatorFramework.start();\n    return curatorFramework;\n}", "CodeBleu_score": 59.235545181857155}]}
{"instance_id": "018a3d7b5f59", "generation_result": [{"code": "public void lock(String path) throws DistributedLockException{\n\t    InterProcessMutex lock = locksMap.get(Thread.currentThread());\n    if(lock == null) {\n        try {\n            lock = new InterProcessMutex(curatorFrameworkClient.getClient(), path);\n            lock.acquire();\n            locksMap.put(Thread.currentThread(), lock);\n        } catch (Exception e) {\n            throw new DistributedLockException(e.getMessage());\n        }\n    }\n}", "CodeBleu_score": 38.96635242903269}, {"code": "public void lock(String path) throws DistributedLockException{\n\t        try {\n            if(locksMap.get(Thread.currentThread()) == null) {\n                InterProcessMutex mutex = new InterProcessMutex(curatorFrameworkClient.getClient(), path);\n                mutex.acquire();\n                locksMap.put(Thread.currentThread(), mutex);\n            } else {\n                locksMap.get(Thread.currentThread()).acquire();\n            }\n        } catch (Exception e) {\n            throw new DistributedLockException(e.getMessage());\n        }\n    }", "CodeBleu_score": 37.82536768443085}, {"code": "public void lock(String path) throws DistributedLockException{\n\t        try {\n            InterProcessMutex mutex = locksMap.get(Thread.currentThread());\n            if (mutex == null) {\n                mutex = new InterProcessMutex(curatorFrameworkClient.getClient(), path);\n                mutex.acquire();\n                locksMap.put(Thread.currentThread(), mutex);\n            } else {\n                mutex.acquire();\n            }\n        } catch (Exception e) {\n            throw new DistributedLockException(\\\"zk lock acquire error\\\", e);\n        }\n    }", "CodeBleu_score": 44.193232802147406}]}
{"instance_id": "2068af09c973", "generation_result": [{"code": "public static Map<Object, Object> genPropertiesMap(DtpProperties dtpProperties){\n\t    CuratorFramework curatorFramework = getCuratorFramework(dtpProperties);\n    String nodePath = nodePath(dtpProperties);\n    if (dtpProperties.getZookeeper().getConfigType().equals(PROPERTIES)) {\n        return genPropertiesTypeMap(curatorFramework, nodePath);\n    } else {\n        String configKey = dtpProperties.getZookeeper().getConfigKey();\n        String configPath = ZKPaths.makePath(nodePath, configKey);\n        GetDataBuilder getDataBuilder = curatorFramework.getData().forPath(configPath);\n        byte[] bytes = getDataBuilder.get();\n        return ConfigHandler.getPropertiesMap(new String(bytes, StandardCharsets.UTF_8));\n    }\n}", "CodeBleu_score": 50.601266387439956}, {"code": "public static Map<Object, Object> genPropertiesMap(DtpProperties dtpProperties){\n\t    CuratorFramework curatorFramework = getCuratorFramework(dtpProperties);\n    String nodePath = nodePath(dtpProperties);\n    if (PROPERTIES.equals(dtpProperties.getZookeeper().getConfigType())) {\n        return genPropertiesTypeMap(curatorFramework, nodePath);\n    } else if (JSON.equals(dtpProperties.getZookeeper().getConfigType())) {\n        String configKey = dtpProperties.getZookeeper().getConfigKey();\n        String configValue = getConfigValue(curatorFramework, nodePath, configKey);\n        return ConfigHandler.parseProperties(configValue);\n    }\n    return Collections.emptyMap();\n}", "CodeBleu_score": 46.5285758662896}, {"code": "public static Map<Object, Object> genPropertiesMap(DtpProperties dtpProperties){\n\t    if (dtpProperties.getZookeeper().getConfigType() == PROPERTIES) {\n        return genPropertiesTypeMap(dtpProperties);\n    } else {\n        String nodePath = nodePath(dtpProperties);\n        GetDataBuilder getDataBuilder = curatorFramework.getData().forPath(nodePath);\n        byte[] data = getDataBuilder.get();\n        return ConfigHandler.parseConfig(new String(data, StandardCharsets.UTF_8), JSON);\n    }\n}", "CodeBleu_score": 34.17509649952903}]}
{"instance_id": "3d3c9020d299", "generation_result": [{"code": "public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application){\n\t", "CodeBleu_score": 5.918508044412982}, {"code": "public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application){\n\t    DtpProperties dtpProperties = BinderHelper.getDtpProperties(environment);\n    if (dtpProperties == null) {\n            log.info(\\\"[DynamicTp] DtpProperties is null, skip zookeeper config.\\\");\n            return;\n        }\n\n        if (dtpProperties.getZookeeper() == null) {\n            log.info(\\\"[DynamicTp] DtpProperties.zookeeper is null, skip zookeeper config.\\\");\n            return;\n        }\n\n        if (dtpProperties.getZookeeper().getServerLists() == null) {\n            log.info(\\\"[DynamicTp] DtpProperties.zookeeper.serverLists is null, skip zookeeper config.\\\");\n            return;\n        }\n\n        if (dtpProperties.getZookeeper().getServerLists().isEmpty()) {\n            log.info(\\\"[DynamicTp] DtpProperties.zookeeper.serverLists is empty, skip zookeeper config.\\\");\n            return;\n        }\n\n        // 1. bind DtpProperties with current environment\n        BinderHelper.bindDtpProperties(environment, dtpProperties);\n\n        // 2. generate properties map\n        Map<String, Object> properties = CuratorUtil.generateProperties(dtpProperties);\n\n        // 3. check if required property exists in environment\n        if (environment.containsProperty(\\\"dtp.dynamic.enabled\\\")) {\n            log.info(\\\"[DynamicTp] DtpProperties.dynamic.enabled is not null, skip zookeeper config.\\\");\n            return;\n        }\n\n        // 4. create a Zookeeper property source with the generated properties\n        MutablePropertySources propertySources = environment.getPropertySources();\n        propertySources.addFirst(new OriginTrackedMapPropertySource(ZK_PROPERTY_SOURCE_NAME, properties));\n    }", "CodeBleu_score": 46.845786255114476}, {"code": "public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application){\n\t    DtpProperties dtpProperties = BinderHelper.getDtpProperties(environment);\n    if (dtpProperties != null) {\n        // bind dtpProperties to environment\n        BinderHelper.bindDtpProperties(dtpProperties, environment);\n        // generate properties map from dtpProperties\n        Map<String, Object> properties = dtpProperties.getZookeeper().toPropertiesMap();\n        // check if required property exists in environment\n        if (!properties.containsKey(ZookeeperProperties.ZK_ADDRESS)) {\n            log.warn(\\\"Zookeeper address is not configured, DynamicTp will not start.\\\");\n            return;\n        }\n        // create Zookeeper property source\n        MutablePropertySources propertySources = environment.getPropertySources();\n        propertySources.addFirst(new OriginTrackedMapPropertySource(ZK_PROPERTY_SOURCE_NAME, properties));\n    }\n}", "CodeBleu_score": 50.12935166647182}]}
{"instance_id": "0a934e7885be", "generation_result": [{"code": "public ZookeeperModule UseZooKeeperRouteManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t", "CodeBleu_score": 4.435738909874791}, {"code": "public ZookeeperModule UseZooKeeperRouteManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t", "CodeBleu_score": 4.435738909874791}, {"code": "public ZookeeperModule UseZooKeeperRouteManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t", "CodeBleu_score": 4.435738909874791}]}
{"instance_id": "c30a17587331", "generation_result": [{"code": " public ZookeeperModule UseZooKeeperCommandManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t   UseCommandManager(builder, provider => {\n     var result = new ZooKeeperServiceCommandManager(\n       GetConfigInfo(configInfo),\n       provider.GetRequiredService<ISerializer<byte[]>>(),\n       provider.GetRequiredService<ISerializer<string>>(),\n       provider.GetRequiredService<IServiceCommandFactory>(),\n       provider.GetRequiredService<ILogger<ZooKeeperServiceCommandManager>>(),\n       provider.GetRequiredService<IZookeeperClientProvider>()\n     );\n     return result;\n   });\n   return this;\n }", "CodeBleu_score": 73.4190390934885}, {"code": " public ZookeeperModule UseZooKeeperCommandManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t     UseCommandManager(builder, provider =>\n     {\n         var result = new ZooKeeperServiceCommandManager(\n             GetConfigInfo(configInfo),\n             provider.GetRequiredService<ISerializer<byte[]>>(),\n             provider.GetRequiredService<ISerializer<string>>(),\n             provider.GetRequiredService<IServiceCommandFactory>(),\n             provider.GetRequiredService<ILogger<ZooKeeperServiceCommandManager>>(),\n             provider.GetRequiredService<IZookeeperClientProvider>());\n         return result;\n     });\n     return this;\n }", "CodeBleu_score": 76.26029430868407}, {"code": " public ZookeeperModule UseZooKeeperCommandManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t            UseCommandManager(builder, provider => {\n                var result = new ZooKeeperServiceCommandManager(\n                    GetConfigInfo(configInfo),\n                    provider.GetRequiredService<ISerializer<byte[]>>(),\n                    provider.GetRequiredService<ISerializer<string>>(),\n                    provider.GetRequiredService<IServiceCommandFactory>(),\n                    provider.GetRequiredService<ILogger<ZooKeeperServiceCommandManager>>(),\n                    provider.GetRequiredService<IZookeeperClientProvider>());\n                return result;\n            });\n            return this;\n        }", "CodeBleu_score": 74.59766935389194}]}
{"instance_id": "213cc4aa9b19", "generation_result": [{"code": "public static IConfigurationBuilder AddZookeeperFile(this IConfigurationBuilder builder, IFileProvider provider, string path, bool optional, bool reloadOnChange){\n\t    if (builder == null) {\n        throw new ArgumentNullException(nameof(builder));\n    }\n    if (string.IsNullOrEmpty(path)) {\n        throw new ArgumentException(\"File path must be a non-empty string.\", nameof(path));\n    }\n\n    if (path.StartsWith(\"\\\\\") || path.StartsWith(\"/\") || path.StartsWith(\"~/\")) {\n        if (provider == null && new FileInfo(path).Directory != null) {\n            provider = new PhysicalFileProvider(new FileInfo(path).Directory.FullName);\n        }\n    }\n\n    var source = new ZookeeperConfigurationSource() {\n        Path = path,\n        Optional = optional,\n        ReloadOnChange = reloadOnChange,\n        FileProvider = provider,\n    };\n\n    builder.Add(source);\n    builder.Build();\n    return builder;\n}", "CodeBleu_score": 57.34812203664572}, {"code": "public static IConfigurationBuilder AddZookeeperFile(this IConfigurationBuilder builder, IFileProvider provider, string path, bool optional, bool reloadOnChange){\n\t    if (builder == null) {\n        throw new ArgumentNullException(nameof(builder));\n    }\n    if (string.IsNullOrEmpty(path)) {\n        throw new ArgumentException(\"File path must be a non-empty string.\", nameof(path));\n    }\n\n    if (path.StartsWith(\"~\")) {\n        path = Path.GetFullPath(path);\n    }\n\n    if (provider == null && path.StartsWith(\"/\")) {\n        provider = new PhysicalFileProvider(Directory.GetCurrentDirectory());\n    }\n\n    var source = new ZookeeperConfigurationSource {\n        Path = path,\n        Optional = optional,\n        ReloadOnChange = reloadOnChange,\n        FileProvider = provider,\n    };\n\n    builder.Add(source);\n    builder.Build();\n    return builder;\n}", "CodeBleu_score": 61.494960484189534}, {"code": "public static IConfigurationBuilder AddZookeeperFile(this IConfigurationBuilder builder, IFileProvider provider, string path, bool optional, bool reloadOnChange){\n\t    if (builder == null) {\n        throw new ArgumentNullException(nameof(builder));\n    }\n    if (string.IsNullOrEmpty(path)) {\n        throw new ArgumentException(\"File path must be a non-empty string.\", nameof(path));\n    }\n\n    if (path.StartsWith(\"\\\\\") || path.StartsWith(\"/\")) {\n        if (provider == null && !path.StartsWith(\"\\\\\") && !path.StartsWith(\"/\")) {\n            provider = new PhysicalFileProvider(Directory.GetCurrentDirectory());\n        }\n    } else {\n        if (provider == null) {\n            provider = new PhysicalFileProvider(Directory.GetCurrentDirectory());\n        }\n        path = provider.GetFileInfo(path).PhysicalPath;\n    }\n\n    var source = new ZookeeperConfigurationSource {\n        FileProvider = provider,\n        Path = path,\n        Optional = optional,\n        ReloadOnChange = reloadOnChange\n    };\n    builder.Add(source);\n    builder.Build();\n    return builder;\n}", "CodeBleu_score": 61.95830877774938}]}
{"instance_id": "15bbffa82a13", "generation_result": [{"code": "public override async Task RemveAddressAsync(IEnumerable<AddressModel> Address){\n\t    var routes = await GetRoutesAsync();\n    foreach (var route in routes) {\n        route.Addresses = route.Addresses.Where(x => !Address.Contains(x)).ToList();\n    }\n    await SetRoutesAsync(routes.Select(x => new ServiceRouteDescriptor {\n        ServiceDescriptor = x.ServiceDescriptor,\n        Addresses = x.Addresses\n    }));\n}", "CodeBleu_score": 63.23153040662371}, {"code": "public override async Task RemveAddressAsync(IEnumerable<AddressModel> Address){\n\t    var routes = await GetRoutesAsync();\n    routes = routes.Select(route => {\n        route.Addresses = route.Addresses.Where(address => !Address.Contains(address)).ToList();\n        return route;\n    });\n    await SetRoutesAsync(routes.Select(route => new ServiceRouteDescriptor {\n        ServiceDescriptor = route.ServiceDescriptor,\n        Addresses = route.Addresses\n    }));\n}", "CodeBleu_score": 46.18784681086397}, {"code": "public override async Task RemveAddressAsync(IEnumerable<AddressModel> Address){\n\t    var routes = await GetRoutesAsync();\n    var serviceRoutes = routes.ToList();\n    foreach (var route in serviceRoutes) {\n        var addresses = route.Addresses.ToList();\n        foreach (var address in Address) {\n            var addressModel = addresses.FirstOrDefault(p => p.Host == address.Host && p.Port == address.Port);\n            if (addressModel != null) {\n                addresses.Remove(addressModel);\n            }\n        }\n        if (addresses.Count > 0) {\n            route.Addresses = addresses;\n        }\n    }\n    await SetRoutesAsync(serviceRoutes.Select(p => new ServiceRouteDescriptor(p)));\n}", "CodeBleu_score": 41.77433801398616}]}
{"instance_id": "125d23de2a60", "generation_result": [{"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<ServiceRoute> routes, AddressModel hostAddr){\n\t  var routePath = _configInfo.RoutePath;\n  var zooKeepers = await _zookeeperClientProvider.GetZooKeepers();\n  foreach (var zooKeeper in zooKeepers) {\n    var childrens = routePath.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries);\n    var index = 0;\n    while (childrens.Count() > 1) {\n      var nodePath = \"/\" + string.Join(\"/\", childrens);\n      if (await zooKeeper.Item2.existsAsync(nodePath) != null) {\n        var result = await zooKeeper.Item2.getChildrenAsync(nodePath);\n        if (result?.Children != null) {\n          foreach (var child in result.Children) {\n            var childPath = $\"{nodePath}/{child}\";\n            if (_logger.IsEnabled(LogLevel.Debug)) {\n              _logger.LogDebug($\"\u51c6\u5907\u5220\u9664\uff1a{childPath}\u3002\");\n            }\n            await zooKeeper.Item2.deleteAsync(childPath);\n          }\n        }\n        if (_logger.IsEnabled(LogLevel.Debug)) {\n          _logger.LogDebug($\"\u51c6\u5907\u5220\u9664\uff1a{nodePath}\u3002\");\n        }\n        await zooKeeper.Item2.deleteAsync(nodePath);\n      }\n      index++;\n      childrens = childrens.Take(childrens.Length - index).ToArray();\n    }\n  }\n}", "CodeBleu_score": 42.663751125264845}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<ServiceRoute> routes, AddressModel hostAddr){\n\t    var routePath = _configInfo.RoutePath;\n    var zooKeepers = await _zookeeperClientProvider.GetZooKeepers();\n    foreach (var zooKeeper in zooKeepers) {\n        var nodePath = $\"{routePath}/{hostAddr}\";\n        var currentRoutes = await GetRoutes(zooKeeper.Item2);\n        var newRoutes = routes.ToDictionary(p => p.ServiceDescriptor.Id);\n        var routesToDelete = currentRoutes.Where(p => !newRoutes.ContainsKey(p.ServiceDescriptor.Id));\n        foreach (var routeToDelete in routesToDelete) {\n            var nodePath = $\"{routePath}/{routeToDelete.ServiceDescriptor.Id}\";\n            if (await zooKeeper.Item2.existsAsync(nodePath) != null) {\n                var result = await zooKeeper.Item2.getChildrenAsync(nodePath);\n                if (result?.Children != null) {\n                    foreach (var child in result.Children) {\n                        var childPath = $\"{nodePath}/{child}\";\n                        if (_logger.IsEnabled(LogLevel.Debug))\n                            _logger.LogDebug($\"\u51c6\u5907\u5220\u9664\uff1a{childPath}\u3002\");\n                        await zooKeeper.Item2.deleteAsync(childPath);\n                    }\n                }\n                if (_logger.IsEnabled(LogLevel.Debug))\n                    _logger.LogDebug($\"\u51c6\u5907\u5220\u9664\uff1a{nodePath}\u3002\");\n                await zooKeeper.Item2.deleteAsync(nodePath);\n            }\n        }\n    }\n}", "CodeBleu_score": 57.40458688011986}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<ServiceRoute> routes, AddressModel hostAddr){\n\t    var zooKeepers = await _zookeeperClientProvider.GetZooKeepers();\n    foreach (var zooKeeper in zooKeepers) {\n        var path = _configInfo.RoutePath;\n        var childrens = path.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries);\n\n        var index = 0;\n        while (childrens.Count() > 1) {\n            var nodePath = \"/\" + string.Join(\"/\", childrens);\n\n            if (await zooKeeper.Item2.existsAsync(nodePath) != null) {\n                var result = await zooKeeper.Item2.getChildrenAsync(nodePath);\n                if (result?.Children != null) {\n                    foreach (var child in result.Children) {\n                        var childPath = $\"{nodePath}/{child}\";\n                        if (_logger.IsEnabled(LogLevel.Debug))\n                            _logger.LogDebug($\"\u51c6\u5907\u5220\u9664\uff1a{childPath}\u3002\");\n                        await zooKeeper.Item2.deleteAsync(childPath);\n                    }\n                }\n                if (_logger.IsEnabled(LogLevel.Debug))\n                    _logger.LogDebug($\"\u51c6\u5907\u5220\u9664\uff1a{nodePath}\u3002\");\n                await zooKeeper.Item2.deleteAsync(nodePath);\n            }\n            index++;\n            childrens = childrens.Take(childrens.Length - index).ToArray();\n        }\n    }\n}", "CodeBleu_score": 42.94163861547023}]}
{"instance_id": "b020a235d57f", "generation_result": [{"code": "private async Task<ServiceRoute> GetRoute(byte[] data){\n\t  if (_logger.IsEnabled(LogLevel.Debug)) {\n    _logger.LogDebug($\"\u8def\u7531\u6570\u636e\uff1a{Encoding.UTF8.GetString(data)}\");\n  }\n\n  if (data == null) {\n    return null;\n  }\n\n  var serviceRouteDescriptor = _serializer.Deserialize<ServiceRouteDescriptor>(data);\n  var serviceRoute = await _serviceRouteFactory.Create(serviceRouteDescriptor);\n  return serviceRoute;\n}", "CodeBleu_score": 43.978833841370445}, {"code": "private async Task<ServiceRoute> GetRoute(byte[] data){\n\t  if (_logger.IsEnabled(LogLevel.Debug)) {\n    _logger.LogDebug($\"Route data: {Encoding.UTF8.GetString(data)}\");\n  }\n\n  if (data == null) {\n    return null;\n  }\n\n  var routeDescriptor = _serializer.Deserialize<ServiceRouteDescriptor>(data);\n  return _serviceRouteFactory.Create(routeDescriptor);\n}", "CodeBleu_score": 35.64329311117865}, {"code": "private async Task<ServiceRoute> GetRoute(byte[] data){\n\t    if (_logger.IsEnabled(LogLevel.Debug)) {\n        _logger.LogDebug($\"\u51c6\u5907\u83b7\u53d6\u670d\u52a1\u8def\u7531\uff1a{Encoding.UTF8.GetString(data)}\u3002\");\n    }\n\n    if (data == null) {\n        return null;\n    }\n\n    var route = _serializer.Deserialize<ServiceRouteDescriptor>(data);\n    var serviceRoute = await _serviceRouteFactory.Create(route);\n    return serviceRoute;\n}", "CodeBleu_score": 46.62329884376858}]}
{"instance_id": "169ed4cc2ad4", "generation_result": [{"code": "public async Task NodeChange(byte[] oldData, byte[] newData){\n\t    if (DataEquals(oldData, newData))\n    {\n        return;\n    }\n    var newRoute = await GetRoute(newData);\n    var oldRoute = _routes.Where(p => p.ServiceDescriptor.Id == newRoute.ServiceDescriptor.Id).FirstOrDefault();\n    if (oldRoute != null)\n    {\n        var oldRouteAddress = oldRoute.Address;\n        var newRouteAddress = newRoute.Address;\n        var newAddresses = newRouteAddress.Except(oldRouteAddress).ToList();\n        foreach (var address in oldRouteAddress)\n        {\n            newAddresses.Remove(newAddresses.Where(p => p.ToString() == address.ToString()).FirstOrDefault());\n            newAddresses.Add(address);\n        }\n        newRoute.Address = newAddresses;\n    }\n    lock (_lock)\n    {\n        var index = _routes.IndexOf(oldRoute);\n        _routes[index] = newRoute;\n    }\n    OnChanged?.Invoke(oldRoute, newRoute);\n}", "CodeBleu_score": 43.564794006263426}, {"code": "public async Task NodeChange(byte[] oldData, byte[] newData){\n\t    if (DataEquals(oldData, newData))\n        return;\n\n    var newRoute = await GetRoute(newData);\n    var oldRoute = _routes.FirstOrDefault(p => p.ServiceDescriptor.Id == newRoute.ServiceDescriptor.Id);\n    lock (_routes) {\n        if (oldRoute != null)\n            _routes.Remove(oldRoute);\n\n        _routes.Add(newRoute);\n    }\n    OnChanged?.Invoke(oldRoute, newRoute);\n}", "CodeBleu_score": 45.324546778605885}, {"code": "public async Task NodeChange(byte[] oldData, byte[] newData){\n\t    if (DataEquals(oldData, newData))\n        return;\n\n    var newRoute = await GetRoute(newData);\n    var oldRoute = _routes.Where(p => p.ServiceDescriptor.Id == newRoute.ServiceDescriptor.Id).FirstOrDefault();\n    lock (_lock) {\n        _routes.Remove(oldRoute);\n        _routes.Add(newRoute);\n    }\n    await OnChanged(newRoute, oldRoute);\n}", "CodeBleu_score": 41.58789152485802}]}
{"instance_id": "af01261d3199", "generation_result": [{"code": "public override async Task SetSubscribersAsync(IEnumerable<ServiceSubscriber> subscribers){\n\t    var serviceSubscribers = subscribers.ToArray();\n    var existingSubscribers = await GetSubscribersAsync();\n    var existingSubscriberIds = existingSubscribers.Select(i => i.ServiceDescriptor.Id).ToArray();\n    var serviceSubscriberIds = serviceSubscribers.Select(i => i.ServiceDescriptor.Id).ToArray();\n    var deletedSubscriberIds = existingSubscriberIds.Except(serviceSubscriberIds).ToArray();\n    var updatedSubscribers = new List<ServiceSubscriber>();\n    foreach (var serviceSubscriber in serviceSubscribers) {\n        var existingSubscriber = existingSubscribers.FirstOrDefault(i => i.ServiceDescriptor.Id == serviceSubscriber.ServiceDescriptor.Id);\n        if (existingSubscriber == null) {\n            updatedSubscribers.Add(serviceSubscriber);\n        } else {\n            var updatedAddresses = existingSubscriber.Addresses.Union(serviceSubscriber.Addresses).ToArray();\n            updatedSubscribers.Add(new ServiceSubscriber(serviceSubscriber.ServiceDescriptor, updatedAddresses));\n        }\n    }\n    foreach (var deletedSubscriberId in deletedSubscriberIds) {\n        var existingSubscriber = existingSubscribers.FirstOrDefault(i => i.ServiceDescriptor.Id == deletedSubscriberId);\n        if (existingSubscriber != null) {\n            updatedSubscribers.Add(existingSubscriber);\n        }\n    }\n    await base.SetSubscribersAsync(updatedSubscribers);\n}", "CodeBleu_score": 36.378962368389175}, {"code": "public override async Task SetSubscribersAsync(IEnumerable<ServiceSubscriber> subscribers){\n\t    var existingSubscribers = await GetSubscribersAsync();\n    var existingSubscriberIds = existingSubscribers.Select(i => i.ServiceDescriptor.Id).ToArray();\n    var subscribersArray = subscribers.ToArray();\n    var subscribersIds = subscribersArray.Select(i => i.ServiceDescriptor.Id).ToArray();\n    var newSubscribersIds = subscribersIds.Except(existingSubscriberIds).ToArray();\n    var deletedSubscribersIds = existingSubscriberIds.Except(subscribersIds).ToArray();\n    var updatedSubscribers = subscribersArray.Where(i => !newSubscribersIds.Contains(i.ServiceDescriptor.Id)).ToArray();\n    foreach (var deletedSubscriberId in deletedSubscribersIds) {\n        var subscriber = existingSubscribers.FirstOrDefault(i => i.ServiceDescriptor.Id == deletedSubscriberId);\n        if (subscriber == null)\n            continue;\n        subscriber.Addresses.Clear();\n    }\n    foreach (var updatedSubscriber in updatedSubscribers) {\n        var subscriber = existingSubscribers.FirstOrDefault(i => i.ServiceDescriptor.Id == updatedSubscriber.ServiceDescriptor.Id);\n        if (subscriber == null)\n            continue;\n        subscriber.Addresses.AddRange(updatedSubscriber.Addresses);\n    }\n    await base.SetSubscribersAsync(existingSubscribers);\n}", "CodeBleu_score": 33.713219664680786}, {"code": "public override async Task SetSubscribersAsync(IEnumerable<ServiceSubscriber> subscribers){\n\t    var subscribersArray = subscribers.ToArray();\n    var existingSubscribers = await GetSubscribersAsync();\n    var existingSubscribersDict = existingSubscribers.ToDictionary(i => i.ServiceDescriptor.Id);\n    foreach (var subscriber in subscribersArray) {\n        if (existingSubscribersDict.TryGetValue(subscriber.ServiceDescriptor.Id, out var existingSubscriber)) {\n            var existingAddresses = existingSubscriber.Addresses.ToArray();\n            var newAddresses = subscriber.Addresses.ToArray();\n            var mergedAddresses = existingAddresses.Union(newAddresses).ToArray();\n            existingSubscriber.Addresses = mergedAddresses;\n        }\n    }\n    await base.SetSubscribersAsync(subscribersArray);\n}", "CodeBleu_score": 33.58977988358633}]}
{"instance_id": "fda02cec3296", "generation_result": [{"code": "private async Task<ServiceSubscriber[]> GetSubscribers(IEnumerable<string> childrens){\n\t    var rootPath = _configInfo.SubscriberPath;\n    if (!rootPath.EndsWith(\\\"/\\\"))\n        rootPath += \\\"/\\\";\n\n    var subscribers = new List<ServiceSubscriber>();\n    foreach (var children in childrens)\n    {\n        var nodePath = $\\\"{rootPath}{children}\\\";\n        if (_logger.IsEnabled(LogLevel.Debug))\n            _logger.LogDebug($\\\"\u51c6\u5907\u83b7\u53d6\u8282\u70b9\uff1a{nodePath}\u7684\u670d\u52a1\u8ba2\u9605\u8005\u3002\\\");\n\n        var subscriber = await GetSubscriber(nodePath);\n        if (subscriber != null)\n            subscribers.Add(subscriber);\n    }\n    return subscribers.ToArray();\n}", "CodeBleu_score": 68.1102635986886}, {"code": "private async Task<ServiceSubscriber[]> GetSubscribers(IEnumerable<string> childrens){\n\t    var path = _configInfo.SubscriberPath;\n    if (!path.EndsWith(\\\"/\\\")) {\n        path += \\\"/\\\";\n    }\n\n    var subscribers = new List<ServiceSubscriber>();\n    var zooKeeper = await GetZooKeeper();\n    foreach (var children in childrens) {\n        var nodePath = $\\\"{path}{children}\\\";\n        if (_logger.IsEnabled(LogLevel.Debug)) {\n            _logger.LogDebug($\\\"\u51c6\u5907\u83b7\u53d6\u8282\u70b9\uff1a{nodePath}\u7684\u6570\u636e\u3002\\\");\n        }\n\n        var data = (await zooKeeper.Item2.getDataAsync(nodePath)).Data;\n        var subscriber = await GetSubscriber(data);\n        if (subscriber != null) {\n            subscribers.Add(subscriber);\n        }\n    }\n    return subscribers.ToArray();\n}", "CodeBleu_score": 49.57201293887442}, {"code": "private async Task<ServiceSubscriber[]> GetSubscribers(IEnumerable<string> childrens){\n\t    var path = _configInfo.SubscriberPath;\n    if (!path.EndsWith(\\\"/\\\"))\n        path += \\\"/\\\";\n\n    var result = new List<ServiceSubscriber>();\n    foreach (var children in childrens)\n    {\n        var nodePath = $\\\"{path}{children}\\\";\n        if (_logger.IsEnabled(LogLevel.Debug))\n            _logger.LogDebug($\\\"\u51c6\u5907\u83b7\u53d6\u8282\u70b9\uff1a{nodePath}\u7684\u6570\u636e\u3002\\\");\n\n        var data = (await zooKeeper.Item2.getDataAsync(nodePath)).Data;\n        var subscriber = await GetSubscriber(data);\n        if (subscriber != null)\n            result.Add(subscriber);\n    }\n    return result.ToArray();\n}", "CodeBleu_score": 58.75545095361432}]}
{"instance_id": "6c3018ff0c0d", "generation_result": [{"code": "private async Task EnterSubscribers(){\n\t    if (_subscribers != null) {\n        return;\n    }\n\n    var zooKeeper = await GetZooKeeper();\n    if (await zooKeeper.Item2.existsAsync(_configInfo.SubscriberPath) != null) {\n        var childrens = await zooKeeper.Item2.getChildrenAsync(_configInfo.SubscriberPath);\n        if (childrens.Count > 0) {\n            _subscribers = await GetSubscribers(childrens);\n        }\n    }\n    else {\n        if (_logger.IsEnabled(LogLevel.Warning)) {\n            _logger.LogWarning($\"\u8ba2\u9605\u8005\u8def\u5f84\u4e0d\u5b58\u5728\uff0c\u5c06\u8fdb\u884c\u521b\u5efa\u3002\");\n        }\n        _subscribers = new ServiceSubscriber[0];\n    }\n}", "CodeBleu_score": 61.056212959529844}, {"code": "private async Task EnterSubscribers(){\n\t    if (_subscribers != null) {\n        return;\n    }\n    var zooKeeper = await GetZooKeeper();\n    zooKeeper.Item1.WaitOne();\n    var path = _configInfo.SubscriberPath;\n    if (await zooKeeper.Item2.existsAsync(path) == null) {\n        if (_logger.IsEnabled(LogLevel.Warning)) {\n            _logger.LogWarning($\"\u8282\u70b9{path}\u4e0d\u5b58\u5728\uff0c\u5c06\u8fdb\u884c\u521b\u5efa\u3002\");\n        }\n        _subscribers = new ServiceSubscriber[0];\n        return;\n    }\n    var childrens = await zooKeeper.Item2.getChildrenAsync(path);\n    if (_logger.IsEnabled(LogLevel.Debug)) {\n        _logger.LogDebug($\"\u8282\u70b9{path}\u7684\u5b50\u8282\u70b9\u4fe1\u606f\uff1a{string.Join(\\\",\\\", childrens)}\u3002\");\n    }\n    _subscribers = await GetSubscribers(childrens);\n}", "CodeBleu_score": 61.374133639975014}, {"code": "private async Task EnterSubscribers(){\n\t  if (_subscribers != null) {\n    return;\n  }\n  var zooKeeper = await GetZooKeeper();\n  zooKeeper.Item1.WaitOne();\n  if (await zooKeeper.Item2.existsAsync(_configInfo.SubscriberPath) == null) {\n    if (_logger.IsEnabled(LogLevel.Warning)) {\n      _logger.LogWarning($\"The subscriber path does not exist: {_configInfo.SubscriberPath}\");\n    }\n    _subscribers = Array.Empty<ServiceSubscriber>();\n    return;\n  }\n  var childrens = await zooKeeper.Item2.getChildrenAsync(_configInfo.SubscriberPath);\n  _subscribers = await GetSubscribers(childrens);\n}", "CodeBleu_score": 63.66261491946451}]}
{"instance_id": "60ff973ba60a", "generation_result": [{"code": "public void NodeChange(byte[] oldData, byte[] newData){\n\t    //\u5f97\u5230\u65e7\u7684\u670d\u52a1\u547d\u4ee4\u3002\n    var oldCommand = _serviceCommands.FirstOrDefault(i => DataEquals(i.Data, oldData));\n    //\u5982\u679c\u65e7\u7684\u670d\u52a1\u547d\u4ee4\u4e0d\u5b58\u5728\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u3002\n    if (oldCommand == null)\n        return;\n\n    lock (_serviceCommands) {\n        //\u5220\u9664\u65e7\u670d\u52a1\u547d\u4ee4\uff0c\u5e76\u6dfb\u52a0\u4e0a\u65b0\u7684\u670d\u52a1\u547d\u4ee4\u3002\n        _serviceCommands =\n            _serviceCommands\n                .Where(i => !DataEquals(i.Data, oldData))\n                .Concat(new[] { GetServiceCommand(newData) }).ToArray();\n    }\n\n    //\u89e6\u53d1\u670d\u52a1\u547d\u4ee4\u53d8\u66f4\u4e8b\u4ef6\u3002\n    OnChanged(new ServiceCommandChangedEventArgs(GetServiceCommand(newData), oldCommand));\n}", "CodeBleu_score": 60.289488625945374}, {"code": "public void NodeChange(byte[] oldData, byte[] newData){\n\t    //\u5f97\u5230\u65e7\u7684\u670d\u52a1\u547d\u4ee4\u3002\n    var oldCommand = _serviceCommands.FirstOrDefault(i => DataEquals(i.Data, oldData));\n    if (oldCommand == null)\n        return;\n\n    lock (_serviceCommands) {\n        //\u5220\u9664\u65e7\u670d\u52a1\u547d\u4ee4\uff0c\u5e76\u6dfb\u52a0\u4e0a\u65b0\u7684\u670d\u52a1\u547d\u4ee4\u3002\n        _serviceCommands =\n            _serviceCommands\n                .Where(i => !DataEquals(i.Data, oldData))\n                .Concat(new[] { GetServiceCommand(newData) }).ToArray();\n    }\n\n    //\u89e6\u53d1\u670d\u52a1\u547d\u4ee4\u53d8\u66f4\u4e8b\u4ef6\u3002\n    OnChanged(new ServiceCommandChangedEventArgs(GetServiceCommand(newData), oldCommand));\n}", "CodeBleu_score": 60.46691548641979}, {"code": "public void NodeChange(byte[] oldData, byte[] newData){\n\t    //\u5f97\u5230\u65e7\u7684\u670d\u52a1\u547d\u4ee4\u3002\n    var oldCommand = _serviceCommands.FirstOrDefault(i => i.ServiceId == newData.ServiceId);\n\n    lock (_serviceCommands) {\n        //\u5220\u9664\u65e7\u670d\u52a1\u547d\u4ee4\uff0c\u5e76\u6dfb\u52a0\u4e0a\u65b0\u7684\u670d\u52a1\u547d\u4ee4\u3002\n        _serviceCommands =\n            _serviceCommands\n                .Where(i => i.ServiceId != newData.ServiceId)\n                .Concat(new[] { newData }).ToArray();\n    }\n\n        //\u89e6\u53d1\u670d\u52a1\u547d\u4ee4\u53d8\u66f4\u4e8b\u4ef6\u3002\n    OnChanged(new ServiceCommandChangedEventArgs(newData, oldCommand));\n}", "CodeBleu_score": 70.33917007634294}]}
{"instance_id": "4597b75f2b3d", "generation_result": [{"code": "protected override async Task ProcessImpl(WatchedEvent watchedEvent){\n\t    var (resetEvent, zooKeeper) = await _zooKeeperCall();\n    var newData = await zooKeeper.getDataAsync(Path, resetEvent);\n    _action(_currentData, newData);\n    _currentData = newData;\n}", "CodeBleu_score": 44.95138877291822}, {"code": "protected override async Task ProcessImpl(WatchedEvent watchedEvent){\n\t    var zooKeeper = await _zooKeeperCall();\n    var zooKeeperClient = zooKeeper.Item2;\n    var data = await zooKeeperClient.GetDataAsync(Path, null, zooKeeper.Item1);\n    _action(_currentData, data);\n    _currentData = data;\n}", "CodeBleu_score": 51.414519926853494}, {"code": "protected override async Task ProcessImpl(WatchedEvent watchedEvent){\n\t    var (waitHandle, zooKeeper) = await _zooKeeperCall();\n    if (watchedEvent.get_Type() == Watcher.Event.EventType.NodeDataChanged) {\n        var newData = await zooKeeper.getDataAsync(get_Path(), this, waitHandle);\n        _action(_currentData, newData.get_Data());\n        _currentData = newData.get_Data();\n    }\n}", "CodeBleu_score": 50.424397733157576}]}
{"instance_id": "cb4f0e22a0d5", "generation_result": [{"code": "public static IServiceBuilder UseZookeeperClientProvider(this IServiceBuilder builder, ConfigInfo configInfo){\n\t    builder.Services.RegisterType<DefaultZookeeperClientProvider>().As<IZookeeperClientProvider>().SingleInstance();\n    return builder;\n}", "CodeBleu_score": 27.509521631300178}, {"code": "public static IServiceBuilder UseZookeeperClientProvider(this IServiceBuilder builder, ConfigInfo configInfo){\n\t    builder.Services.RegisterType<DefaultZookeeperClientProvider>().As<IZookeeperClientProvider>().SingleInstance();\n    builder.Services.AddSingleton<IZookeeperClientProvider>(provider =>\n    {\n        var result = new DefaultZookeeperClientProvider(\n            GetConfigInfo(configInfo),\n            provider.GetRequiredService<ILogger<DefaultZookeeperClientProvider>>(),\n            provider.GetRequiredService<IHealthCheckService>(),\n            provider.GetRequiredService<IZookeeperAddressSelector>());\n        return result;\n    });\n    return builder;\n}", "CodeBleu_score": 56.74031324191152}, {"code": "public static IServiceBuilder UseZookeeperClientProvider(this IServiceBuilder builder, ConfigInfo configInfo){\n\t    builder.Services.RegisterType<DefaultZookeeperClientProvider>().As<IZookeeperClientProvider>().SingleInstance();\n    return builder;\n}", "CodeBleu_score": 27.509521631300178}]}
{"instance_id": "80709a4b2b69", "generation_result": [{"code": "protected override async Task SetRoutesAsync(IEnumerable<MqttServiceDescriptor> routes){\n\t", "CodeBleu_score": 1.1257247766442258}, {"code": "protected override async Task SetRoutesAsync(IEnumerable<MqttServiceDescriptor> routes){\n\t", "CodeBleu_score": 1.1257247766442258}, {"code": "protected override async Task SetRoutesAsync(IEnumerable<MqttServiceDescriptor> routes){\n\t", "CodeBleu_score": 1.1257247766442258}]}
{"instance_id": "69ff4d3427cd", "generation_result": [{"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<MqttServiceRoute> routes, AddressModel hostAddr){\n\t    var routePath = _configInfo.MqttRoutePath;\n    var zooKeepers = await _zookeeperClientProvider.GetZooKeepers();\n    foreach (var zooKeeper in zooKeepers) {\n        var currentRoutes = await GetRoutes(routes.Select(p => p.MqttDescriptor.Topic));\n        var deleteRoutes = currentRoutes.Except(routes);\n        foreach (var route in deleteRoutes) {\n            var nodePath = $\"{routePath}{route.MqttDescriptor.Topic}\";\n            var nodeData = _serializer.Serialize(route);\n            if (await zooKeeper.Item2.existsAsync(nodePath) != null) {\n                var onlineData = (await zooKeeper.Item2.getDataAsync(nodePath)).Data;\n                if (DataEquals(nodeData, onlineData)) {\n                    if (route.MqttEndpoint.Contains(hostAddr)) {\n                        await zooKeeper.Item2.deleteAsync(nodePath);\n                    }\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 55.81757867089821}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<MqttServiceRoute> routes, AddressModel hostAddr){\n\t    var zooKeepers = await _zookeeperClientProvider.GetZooKeepers();\n    foreach (var zooKeeper in zooKeepers) {\n        var path = _configInfo.MqttRoutePath;\n        var childrens = path.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries);\n\n        var index = 0;\n        while (childrens.Count() > 1) {\n            var nodePath = \\\"/\\\" + string.Join(\\\"/\\\", childrens);\n\n            if (await zooKeeper.Item2.existsAsync(nodePath) != null) {\n                var result = await zooKeeper.Item2.getChildrenAsync(nodePath);\n                if (result?.Children != null) {\n                    foreach (var child in result.Children) {\n                        var childPath = $\\\"{nodePath}/{child}\\\";\n                        if (_logger.IsEnabled(LogLevel.Debug)) {\n                            _logger.LogDebug($\\\"\u51c6\u5907\u5220\u9664\uff1a{childPath}\u3002\\\");\n                        }\n                        await zooKeeper.Item2.deleteAsync(childPath);\n                    }\n                }\n                if (_logger.IsEnabled(LogLevel.Debug)) {\n                    _logger.LogDebug($\\\"\u51c6\u5907\u5220\u9664\uff1a{nodePath}\u3002\\\");\n                }\n                await zooKeeper.Item2.deleteAsync(nodePath);\n            }\n            index++;\n            childrens = childrens.Take(childrens.Length - index).ToArray();\n        }\n        if (_logger.IsEnabled(LogLevel.Information)) {\n            _logger.LogInformation(\\\"\u8def\u7531\u914d\u7f6e\u6e05\u7a7a\u5b8c\u6210\u3002\\\");\n        }\n    }\n}", "CodeBleu_score": 42.36621619014237}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<MqttServiceRoute> routes, AddressModel hostAddr){\n\t    var zooKeepers = await _zookeeperClientProvider.GetZooKeepers();\n    foreach (var zooKeeper in zooKeepers) {\n        var path = _configInfo.MqttRoutePath;\n        var childrens = path.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries);\n\n        var index = 0;\n        while (childrens.Count() > 1) {\n            var nodePath = \\\"/\\\" + string.Join(\\\"/\\\", childrens);\n\n            if (await zooKeeper.Item2.existsAsync(nodePath) != null) {\n                var result = await zooKeeper.Item2.getChildrenAsync(nodePath);\n                if (result?.Children != null) {\n                    foreach (var child in result.Children) {\n                        var childPath = $\\\"{nodePath}/{child}\\\";\n                        if (_logger.IsEnabled(LogLevel.Debug))\n                            _logger.LogDebug($\\\"\u51c6\u5907\u5220\u9664\uff1a{childPath}\u3002\\\");\n                        await zooKeeper.Item2.deleteAsync(childPath);\n                    }\n                }\n                if (_logger.IsEnabled(LogLevel.Debug))\n                    _logger.LogDebug($\\\"\u51c6\u5907\u5220\u9664\uff1a{nodePath}\u3002\\\");\n                await zooKeeper.Item2.deleteAsync(nodePath);\n            }\n            index++;\n            childrens = childrens.Take(childrens.Length - index).ToArray();\n        }\n        if (_logger.IsEnabled(LogLevel.Information))\n            _logger.LogInformation(\\\"\u8def\u7531\u914d\u7f6e\u6e05\u7a7a\u5b8c\u6210\u3002\\\");\n    }\n}", "CodeBleu_score": 42.698492311351515}]}
{"instance_id": "8856055e4872", "generation_result": [{"code": "public override async Task SetCachesAsync(IEnumerable<ServiceCacheDescriptor> cacheDescriptors){\n\t    _logger.LogInformation(\"\u51c6\u5907\u66f4\u65b0\u670d\u52a1\u7f13\u5b58\u914d\u7f6e\u3002\");\n    var zooKeepers = await _zookeeperClientProvider.GetZooKeepers();\n    foreach (var zooKeeper in zooKeepers) {\n        var path = _configInfo.CachePath;\n        var childrens = path.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries);\n\n        var index = 0;\n        while (childrens.Count() > 1) {\n            var nodePath = \"/\" + string.Join(\"/\", childrens);\n\n            if (await zooKeeper.Item2.existsAsync(nodePath) == null) {\n                await zooKeeper.Item2.createAsync(nodePath, null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            }\n            index++;\n            childrens = childrens.Take(childrens.Length - index).ToArray();\n        }\n\n        var cachePath = path + \"/\" + string.Join(\"/\", childrens);\n        foreach (var cacheDescriptor in cacheDescriptors) {\n            var cache = _serviceCacheFactory.Create(cacheDescriptor);\n            var cacheData = _stringSerializer.Serialize(cache);\n            var nodePath = cachePath + \"/\" + cacheDescriptor.Id;\n            if (await zooKeeper.Item2.existsAsync(nodePath) == null) {\n                await zooKeeper.Item2.createAsync(nodePath, cacheData, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            }\n            else {\n                var result = await zooKeeper.Item2.getDataAsync(nodePath);\n                if (result?.Data != null) {\n                    var data = _stringSerializer.Deserialize<ServiceCache>(result.Data);\n                    if (data.CacheDescriptor.Version != cacheDescriptor.Version) {\n                        await zooKeeper.Item2.setDataAsync(nodePath, cacheData);\n                    }\n                }\n            }\n        }\n    }\n    _logger.LogInformation(\"\u670d\u52a1\u7f13\u5b58\u914d\u7f6e\u66f4\u65b0\u5b8c\u6210\u3002\");\n}", "CodeBleu_score": 51.22241505763391}, {"code": "public override async Task SetCachesAsync(IEnumerable<ServiceCacheDescriptor> cacheDescriptors){\n\t    if (_logger.IsEnabled(LogLevel.Information)) {\n        _logger.LogInformation(\"\u51c6\u5907\u66f4\u65b0\u670d\u52a1\u7f13\u5b58\u914d\u7f6e\u3002\");\n    }\n    var zooKeepers = await _zookeeperClientProvider.GetZooKeepers();\n    foreach (var zooKeeper in zooKeepers) {\n        var path = _configInfo.CachePath;\n        var childrens = path.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries);\n\n        var index = 0;\n        while (childrens.Count() > 1) {\n            var nodePath = \"/\" + string.Join(\"/\", childrens);\n\n            if (await zooKeeper.Item2.existsAsync(nodePath) == null) {\n                await zooKeeper.Item2.createAsync(nodePath, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            }\n            index++;\n            childrens = childrens.Take(childrens.Length - index).ToArray();\n        }\n\n        foreach (var cacheDescriptor in cacheDescriptors) {\n            var cachePath = $\"{path}/{cacheDescriptor.Id}\";\n            var data = _serializer.Serialize(cacheDescriptor);\n            if (await zooKeeper.Item2.existsAsync(cachePath) == null) {\n                await zooKeeper.Item2.createAsync(cachePath, data, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            } else {\n                var cacheData = await zooKeeper.Item2.getDataAsync(cachePath);\n                var cacheDescriptorInZooKeeper = _serializer.Deserialize<ServiceCacheDescriptor>(cacheData.Data);\n                if (cacheDescriptorInZooKeeper.Version != cacheDescriptor.Version) {\n                    await zooKeeper.Item2.setDataAsync(cachePath, data);\n                }\n            }\n        }\n    }\n    if (_logger.IsEnabled(LogLevel.Information)) {\n        _logger.LogInformation(\"\u670d\u52a1\u7f13\u5b58\u914d\u7f6e\u66f4\u65b0\u5b8c\u6210\u3002\");\n    }\n}", "CodeBleu_score": 58.637314504045676}, {"code": "public override async Task SetCachesAsync(IEnumerable<ServiceCacheDescriptor> cacheDescriptors){\n\t", "CodeBleu_score": 1.0587007191288007}]}
{"instance_id": "57d92c17de83", "generation_result": [{"code": "private async Task CreateSubdirectory((ManualResetEvent, ZooKeeper) zooKeeper, string path){\n\t    await Task.Run(() => {\n        _waitHandle.WaitOne();\n        if (_logger.IsEnabled(LogLevel.Debug))\n            _logger.LogDebug($\"\u7b49\u5f85zookeeper\u8282\u70b9\u521b\u5efa\u5b8c\u6210\u3002\");\n    });\n\n    var childrens = path.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries);\n    var index = 0;\n    while (childrens.Count() > 1) {\n        var nodePath = \"/\" + string.Join(\"/\", childrens);\n        if (await zooKeeper.Item2.existsAsync(nodePath) == null) {\n            if (_logger.IsEnabled(LogLevel.Debug))\n                _logger.LogDebug($\"\u51c6\u5907\u521b\u5efa\u8282\u70b9\uff1a{nodePath}\u3002\");\n            await zooKeeper.Item2.createAsync(nodePath, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n        index++;\n        childrens = childrens.Take(childrens.Length - index).ToArray();\n    }\n}", "CodeBleu_score": 60.39635050013503}, {"code": "private async Task CreateSubdirectory((ManualResetEvent, ZooKeeper) zooKeeper, string path){\n\t    var childrens = path.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries);\n\n    var index = 0;\n    while (childrens.Count() > 1) {\n        var nodePath = \"/\" + string.Join(\"/\", childrens);\n\n        if (await zooKeeper.Item2.existsAsync(nodePath) == null) {\n            if (_logger.IsEnabled(LogLevel.Debug))\n                _logger.LogDebug($\"\u8282\u70b9\uff1a{nodePath}\u4e0d\u5b58\u5728\u5c06\u8fdb\u884c\u521b\u5efa\u3002\");\n\n            await zooKeeper.Item2.createAsync(nodePath, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n        index++;\n        childrens = childrens.Take(childrens.Length - index).ToArray();\n    }\n}", "CodeBleu_score": 58.54698410238195}, {"code": "private async Task CreateSubdirectory((ManualResetEvent, ZooKeeper) zooKeeper, string path){\n\t    await zooKeeper.Item2.waitForConnectionAsync();\n    if (_logger.IsEnabled(LogLevel.Debug))\n        _logger.LogDebug($\"\u51c6\u5907\u521b\u5efa\u8282\u70b9\uff1a{path}\u3002\");\n    var childrens = path.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries);\n    var index = 0;\n    while (childrens.Count() > 1) {\n        var nodePath = \"/\" + string.Join(\"/\", childrens);\n        if (await zooKeeper.Item2.existsAsync(nodePath) == null) {\n            if (_logger.IsEnabled(LogLevel.Debug))\n                _logger.LogDebug($\"\u8282\u70b9\uff1a{nodePath}\u4e0d\u5b58\u5728\u5c06\u8fdb\u884c\u521b\u5efa\u3002\");\n            await zooKeeper.Item2.createAsync(nodePath, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n        index++;\n        childrens = childrens.Take(childrens.Length - index).ToArray();\n    }\n}", "CodeBleu_score": 68.18213255825889}]}
{"instance_id": "b276a07da453", "generation_result": [{"code": "public async ValueTask<IEnumerable<(ManualResetEvent, ZooKeeper)>> GetZooKeepers(){\n\t    var result = new List<(ManualResetEvent, ZooKeeper)>();\n    foreach (var address in _config.Addresses) {\n        if (!await _healthCheckService.IsHealth(address)) {\n            continue;\n        }\n        var ipAddress = address as IpAddressModel;\n        if (ipAddress == null) {\n            continue;\n        }\n        result.Add(CreateZooKeeper(ipAddress));\n    }\n    return result;\n}", "CodeBleu_score": 84.64572983899566}, {"code": "public async ValueTask<IEnumerable<(ManualResetEvent, ZooKeeper)>> GetZooKeepers(){\n\t    var result = new List<(ManualResetEvent, ZooKeeper)>();\n    foreach (var address in _config.Addresses) {\n        if (!await _healthCheckService.IsHealth(address)) {\n            continue;\n        }\n        var ipAddress = address as IpAddressModel;\n        if (ipAddress == null) {\n            continue;\n        }\n        result.Add(CreateZooKeeper(ipAddress));\n    }\n    return result;\n}", "CodeBleu_score": 84.64572983899566}, {"code": "public async ValueTask<IEnumerable<(ManualResetEvent, ZooKeeper)>> GetZooKeepers(){\n\t    var result = new List<(ManualResetEvent, ZooKeeper)>();\n    foreach (var address in _config.Addresses) {\n        _healthCheckService.Monitor(address);\n        var task = _healthCheckService.IsHealth(address);\n        if (!(task.IsCompletedSuccessfully ? task.Result : await task)) {\n            continue;\n        }\n        var ipAddress = address as IpAddressModel;\n        result.Add(CreateZooKeeper(ipAddress));\n    }\n    return result;\n}", "CodeBleu_score": 80.62175150204698}]}
{"instance_id": "dbb6463e7ee8", "generation_result": [{"code": "ZooKeeper getZooKeeper() throws Exception{\n\t    synchronized (this) {\n                if (data.zookeeper == null) {\n                    data.zookeeper = zookeeperFactory.newZooKeeper(ensembleProvider.getConnectionString(), sessionTimeout, watcher, canBeReadOnly);\n                    data.connectionString = ensembleProvider.getConnectionString();\n                }\n            }\n\n            return data.zookeeper;\n        }", "CodeBleu_score": 50.81323886181085}, {"code": "ZooKeeper getZooKeeper() throws Exception{\n\t", "CodeBleu_score": 1.6721771161767558}, {"code": "ZooKeeper getZooKeeper() throws Exception{\n\t    synchronized (this) {\n        if (zookeeper == null) {\n            zookeeper = zookeeperFactory.newZooKeeper(connectionString, sessionTimeout, new Watcher() {\n                public void process(WatchedEvent event) {\n                    synchronized (HandleHolder.this) {\n                        if (zookeeper != null) {\n                            zookeeper.notifyAll();\n                        }\n                    }\n                }\n            });\n        }\n        return zookeeper;\n    }\n}", "CodeBleu_score": 35.75426548345407}]}
{"instance_id": "0d9f311aa482", "generation_result": [{"code": "private void internalClose(int waitForShutdownTimeoutMs) throws Exception{\n\t    Helper helper = this.helper;\n    if (helper != null) {\n        ZooKeeper zooKeeper = helper.getZooKeeper();\n        if (zooKeeper != null) {\n            if (waitForShutdownTimeoutMs > 0) {\n                zooKeeper.register(new Watcher() {\n                    @Override\n                    public void process(WatchedEvent event) {\n                        // do nothing\n                    }\n                });\n                try {\n                    zooKeeper.close(waitForShutdownTimeoutMs);\n                } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                    throw e;\n                }\n            } else {\n                zooKeeper.close();\n            }\n        }\n    }\n}", "CodeBleu_score": 56.5577362034641}, {"code": "private void internalClose(int waitForShutdownTimeoutMs) throws Exception{\n\t    Helper helper = this.helper;\n    if (helper != null) {\n        ZooKeeper zooKeeper = helper.getZooKeeper();\n        if (zooKeeper != null) {\n            try {\n                zooKeeper.register(new Watcher() {\n                    @Override\n                    public void process(WatchedEvent event) {\n                        // do nothing\n                    }\n                });\n\n                if (waitForShutdownTimeoutMs > 0) {\n                    zooKeeper.close(waitForShutdownTimeoutMs);\n                } else {\n                    zooKeeper.close();\n                }\n            } finally {\n                helper.close();\n            }\n        }\n    }\n}", "CodeBleu_score": 50.85882567722041}, {"code": "private void internalClose(int waitForShutdownTimeoutMs) throws Exception{\n\t    if (helper != null) {\n                synchronized (helper) {\n                    if (helper.getZooKeeper() != null) {\n                        ZooKeeper zooKeeper = helper.getZooKeeper();\n                        zooKeeper.register(new Watcher() {\n                            @Override\n                            public void process(WatchedEvent event) {\n                            }\n                        });\n                        if (waitForShutdownTimeoutMs == 0) {\n                            zooKeeper.close();\n                        } else {\n                            zooKeeper.close(waitForShutdownTimeoutMs);\n                        }\n                    }\n                }\n            }\n        }", "CodeBleu_score": 54.74777327219877}]}
{"instance_id": "d57ef4592303", "generation_result": [{"code": "public boolean blockUntilConnectedOrTimedOut() throws InterruptedException{\n\t    Preconditions.checkState(started.get(), \\\"Client is not started\\\");\n\n    log.info(\\\"Starting connection\\\");\n    OperationTrace trace = tracer.get().start();\n\n    try {\n        return state.blockUntilConnectedOrTimedOut();\n    } finally {\n        tracer.get().end(trace);\n        log.info(\\\"Finished connection\\\");\n    }\n}", "CodeBleu_score": 20.13132263118756}, {"code": "public boolean blockUntilConnectedOrTimedOut() throws InterruptedException{\n\t    Preconditions.checkState(started.get(), \\\"Client is not started\\\");\n    log.debug(\\\"blockUntilConnectedOrTimedOut\\\");\n    TracerDriver tracer = this.tracer.get();\n    OperationTrace trace = tracer.start(\\\"blockUntilConnectedOrTimedOut\\\");\n    try {\n        while (true) {\n            if (state.isConnected()) {\n                tracer.complete(trace, \\\"success\\\");\n                return true;\n            }\n\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n                tracer.complete(trace, \\\"interrupted\\\");\n                throw e;\n            }\n        }\n    } finally {\n        tracer.complete(trace, \\\"failure\\\");\n    }\n}", "CodeBleu_score": 18.15926441913622}, {"code": "public boolean blockUntilConnectedOrTimedOut() throws InterruptedException{\n\t    Preconditions.checkState(started.get(), \\\"Client is not started\\\");\n    log.info(\\\"Waiting for connection to be established\\\");\n    final OperationTrace trace = tracer.get().start();\n    final long start = System.currentTimeMillis();\n    try {\n        final boolean connected = state.blockUntilConnectedOrTimedOut();\n        if (connected) {\n            log.info(\\\"Connection established\\\");\n        } else {\n            log.info(\\\"Connection timed out\\\");\n        }\n        tracer.get().end(trace, connected);\n        return connected;\n    } catch (Exception e) {\n        tracer.get().end(trace, e);\n        throw e;\n    }\n}", "CodeBleu_score": 19.910175945535922}]}
{"instance_id": "d722f6d0beb6", "generation_result": [{"code": "public void close(int waitForShutdownTimeoutMs){\n\t    log.debug(\\\"Shutting down\\\");\n\n    if (!started.compareAndSet(true, false)) {\n            throw new IllegalStateException(\\\"Already stopped\\\");\n        }\n\n        if (waitForShutdownTimeoutMs <= 0) {\n            state.close();\n        } else {\n            state.close(waitForShutdownTimeoutMs);\n        }\n\n        log.debug(\\\"Shutdown complete\\\");\n    }", "CodeBleu_score": 36.16206079184507}, {"code": "public void close(int waitForShutdownTimeoutMs){\n\t    log.debug(\\\"Closing\\\");\n    started.set(false);\n    if (waitForShutdownTimeoutMs > 0) {\n            try {\n                state.close(waitForShutdownTimeoutMs);\n            } catch (IOException e) {\n                if (!Thread.currentThread().isInterrupted()) {\n                    log.warn(\\\"Error closing state\\\", e);\n                }\n            }\n        }\n    }", "CodeBleu_score": 52.04306596530053}, {"code": "public void close(int waitForShutdownTimeoutMs){\n\t    log.debug(\\\"Shutting down\\\");\n    started.set(false);\n\n    try {\n        OperationTrace trace = startAdvancedTracer(\\\"close\\\");\n        state.close(waitForShutdownTimeoutMs);\n        trace.commit();\n    } catch (InterruptedException e) {\n        log.warn(\\\"Interrupted while closing\\\", e);\n        Thread.currentThread().interrupt();\n    } catch (IOException e) {\n        log.warn(\\\"Exception while closing\\\", e);\n    }\n}", "CodeBleu_score": 48.57089882537512}]}
{"instance_id": "8492e37ce46e", "generation_result": [{"code": "public void internalBlockUntilConnectedOrTimedOut() throws InterruptedException {\n\t  Watcher watcher = new Watcher() {\n    @Override\n    public void process(WatchedEvent event) {\n      if (event.getState() == KeeperState.SyncConnected) {\n        latch.countDown();\n      }\n    }\n  };\n\n  state.addParentWatcher(watcher);\n\n  long remaining = connectionTimeoutMs;\n  while (true) {\n    if (state.isConnected()) {\n      break;\n    }\n\n    if (Thread.interrupted()) {\n      throw new InterruptedException();\n    }\n\n    try {\n      latch.await(remaining, TimeUnit.MILLISECONDS);\n    } catch (InterruptedException e) {\n      state.removeParentWatcher(watcher);\n      throw e;\n    }\n\n    if (state.isConnected()) {\n      break;\n    }\n\n    remaining = latch.getCount();\n  }\n\n  state.removeParentWatcher(watcher);\n}", "CodeBleu_score": 41.6044465897433}, {"code": "public void internalBlockUntilConnectedOrTimedOut() throws InterruptedException {\n\t    log.debug(\\\"internalBlockUntilConnectedOrTimedOut() start\\\");\n    CountDownLatch latch = new CountDownLatch(1);\n    Watcher watcher = new Watcher() {\n            @Override\n            public void process(WatchedEvent event) {\n                if (event.getState() == KeeperState.SyncConnected) {\n                    latch.countDown();\n                }\n            }\n        };\n    state.addWatcher(watcher);\n    try {\n        long waitMs = connectionTimeoutMs;\n        while (waitMs > 0) {\n            if (state.isConnected()) {\n                return;\n            }\n\n            latch.await(waitMs, TimeUnit.MILLISECONDS);\n            if (state.isConnected()) {\n                return;\n            }\n\n            waitMs = latch.getCount() * 1000;\n        }\n    } finally {\n        state.removeWatcher(watcher);\n    }\n}", "CodeBleu_score": 46.78612341098696}, {"code": "public void internalBlockUntilConnectedOrTimedOut() throws InterruptedException {\n\t  Watcher watcher = new Watcher() {\n    @Override\n    public void process(WatchedEvent event) {\n      if (event.getState() == KeeperState.SyncConnected) {\n        log.debug(\\\"Connected\\\");\n        latch.countDown();\n      }\n    }\n  };\n  try {\n    log.debug(\\\"Waiting for connection...\\\");\n    latch.await(connectionTimeoutMs, TimeUnit.MILLISECONDS);\n  } catch (InterruptedException e) {\n    log.debug(\\\"Interrupted while waiting for connection\\\");\n    throw e;\n  } catch (Exception e) {\n    log.error(\\\"\\\", e);\n    throw new RuntimeException(\\\"Unexpected exception\\\", e);\n  } finally {\n    state.removeParentWatcher(watcher);\n  }\n  if (!state.isConnected()) {\n    throw new InterruptedException(\\\"Connection timed out\\\");\n  }\n}", "CodeBleu_score": 38.21453300283431}]}
{"instance_id": "4a01f5365731", "generation_result": [{"code": "String validateFoundNode(CuratorFrameworkImpl client, CreateMode createMode, String foundNode) throws Exception{\n\t    if (doProtected() && createMode.isEphemeral() && (sessionId != client.getZooKeeper().getSessionId())) {\n        log.info(\\\"Session ID changed: \\\", sessionId, \\\" -> \\\", client.getZooKeeper().getSessionId());\n        sessionId = client.getZooKeeper().getSessionId();\n        client.getZooKeeper().delete(foundNode, -1);\n        return null;\n    }\n    return foundNode;\n}", "CodeBleu_score": 23.17361815866599}, {"code": "String validateFoundNode(CuratorFrameworkImpl client, CreateMode createMode, String foundNode) throws Exception{\n\t    if (doProtected() && (sessionId != 0) && createMode.isEphemeral()) {\n        long newSessionId = client.getZooKeeper().getSessionId();\n        if (newSessionId != sessionId) {\n            log.warn(\"Session ID changed: {} -> {}\", sessionId, newSessionId);\n            client.delete().forPath(foundNode);\n            resetProtectedId();\n            sessionId = newSessionId;\n        }\n    }\n    return foundNode;\n}", "CodeBleu_score": 43.654040212503894}, {"code": "String validateFoundNode(CuratorFrameworkImpl client, CreateMode createMode, String foundNode) throws Exception{\n\t    if (doProtected() && (sessionId != 0) && createMode.isEphemeral()) {\n        long newSessionId = client.getZooKeeper().getSessionId();\n        if (newSessionId != sessionId) {\n            log.debug(\\\"Session changed during protected mode, deleting old node: \\\" + foundNode);\n            client.delete().forPath(foundNode);\n            sessionId = newSessionId;\n        }\n    }\n    return foundNode;\n}", "CodeBleu_score": 40.32361775837367}]}
{"instance_id": "126d0922a699", "generation_result": [{"code": "private Stat pathInForeground(final String path, final List<ACL> aclList) throws Exception{\n\t    final OperationTrace trace = client.getZookeeperClient().startAdvancedTracer(\"SetACLBuilderImpl-Foreground\");\n    final RetryLoop retryLoop = new RetryLoop(client.getRetryPolicy(), client.getZookeeperClient().getZooKeeper(), client.getZookeeperClient().getZooKeeper().getZooKeeperTransientState());\n    final Stat stat = retryLoop.runWithRetry(new Callable<Stat>() {\n        @Override\n        public Stat call() throws Exception {\n            return client.getZooKeeper().setACL(path, aclList, version, null);\n        }\n    });\n    trace.setReturnCode(stat.getAversion())\n            .setPath(path)\n            .setStat(stat)\n            .commit();\n    return stat;\n}", "CodeBleu_score": 65.4656458876306}, {"code": "private Stat pathInForeground(final String path, final List<ACL> aclList) throws Exception{\n\t    final OperationTrace trace = client.getZookeeperClient().startAdvancedTracer(\"SetACLBuilderImpl-Foreground\");\n    final RetryLoop retryLoop = client.getRetryLoop();\n    final Stat resultStat = retryLoop.execute(new Callable<Stat>() {\n        @Override\n        public Stat call() throws Exception {\n            Stat stat = client.getZooKeeper().setACL(path, aclList, version);\n            trace.setReturnCode(stat.getAversion())\n                    .setPath(path)\n                    .setStat(stat)\n                    .commit();\n            return stat;\n        }\n    });\n    return resultStat;\n}", "CodeBleu_score": 65.51744094052422}, {"code": "private Stat pathInForeground(final String path, final List<ACL> aclList) throws Exception{\n\t    final OperationTrace trace = client.getZookeeperClient().startAdvancedTracer(\"SetACLBuilderImpl-Foreground\");\n    final RetryLoop retryLoop = new RetryLoop(client.getRetryPolicy(), client.getZookeeperClient().getZooKeeper());\n    final Stat result = retryLoop.runWithRetry(() -> {\n        Stat stat = client.getZooKeeper().setACL(path, aclList, version, null);\n        trace.setReturnCode(0).setPath(path).setStat(stat).commit();\n        return stat;\n    });\n    return result;\n}", "CodeBleu_score": 58.049430168244996}]}
{"instance_id": "e07b079ff61f", "generation_result": [{"code": "public GroupMember(CuratorFramework client, String membershipPath, String thisId, byte[] payload){\n\t", "CodeBleu_score": 9.224495547481085}, {"code": "public GroupMember(CuratorFramework client, String membershipPath, String thisId, byte[] payload){\n\t    this.pen = new PersistentNode(client, membershipPath + \\\"/\\\" + thisId, payload);\n    this.membershipPath = membershipPath;\n    this.thisId = thisId;\n    this.cache = new CuratorCache(client, membershipPath, false);\n    this.cache.start();\n}", "CodeBleu_score": 30.088201109134594}, {"code": "public GroupMember(CuratorFramework client, String membershipPath, String thisId, byte[] payload){\n\t    this.pen = new PersistentNode(client, membershipPath, thisId, payload, CreateMode.EPHEMERAL);\n    this.cache = new CuratorCacheBridge(client, membershipPath);\n    this.membershipPath = membershipPath;\n        this.thisId = thisId;\n\n        try {\n            client.getZookeeperClient().blockUntilConnectedOrTimedOut();\n            cache.start();\n            cache.getListenable().addListener(new CacheListener());\n            cache.getListenable().addListener(pen);\n        }\n        catch (Exception e) {\n            Throwables.propagate(e);\n        }\n    }", "CodeBleu_score": 37.133276108136194}]}
{"instance_id": "d11c76b2b912", "generation_result": [{"code": "public static void createThenWatch(CuratorFramework client, String path) {\n\t    AsyncCuratorFramework async =\n            AsyncCuratorFramework.wrap(client); // normally you'd wrap early in your app and reuse the instance\n\n    // create a node at the given path with the given payload asynchronously\n    async.create().forPath(path).whenComplete((name, exception) -> {\n        if (exception != null) {\n            // there was a problem\n            exception.printStackTrace();\n        } else {\n            System.out.println(\"Created node name is: \" + name);\n        }\n    });\n\n    // set up a watch on the node to handle future events\n    async.getChildren().inBackground().forPath(path).whenComplete((children, exception) -> {\n        if (exception != null) {\n            // there was a problem\n            exception.printStackTrace();\n        } else {\n            System.out.println(\"Children of node \" + path + \" are: \" + children);\n        }\n    });\n}", "CodeBleu_score": 77.04318718674699}, {"code": "public static void createThenWatch(CuratorFramework client, String path) {\n\t    AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n\n    // create a node at the given path asynchronously\n    async.create().forPath(path).whenComplete((name, exception) -> {\n        if (exception != null) {\n            // there was a problem\n            exception.printStackTrace();\n        } else {\n            System.out.println(\"Created node name is: \" + name);\n\n            // set up a watch on the node to handle future events\n            async.getData().watched().forPath(path).whenComplete((data, exception) -> {\n                if (exception != null) {\n                    // there was a problem\n                    exception.printStackTrace();\n                } else {\n                    System.out.println(\"Data for node is: \" + new String(data.getData()));\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 77.70626554957246}, {"code": "public static void createThenWatch(CuratorFramework client, String path) {\n\t    AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n\n    // create a node at the given path with the given payload asynchronously\n    async.create().forPath(path).whenComplete((name, exception) -> {\n        if (exception != null) {\n            // there was a problem\n            exception.printStackTrace();\n        } else {\n            System.out.println(\"Created node name is: \" + name);\n            // set up a watch on the node to handle future events\n            async.getData().watched().forPath(name).whenComplete((data, exception2) -> {\n                if (exception2 != null) {\n                    exception2.printStackTrace();\n                } else {\n                    System.out.println(\"Got data: \" + new String(data.getData()));\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 77.6491269515142}]}
{"instance_id": "4571de52ad5d", "generation_result": [{"code": "private List<OpResult> doOperation() throws Exception{\n\t    List<Op> ops = transaction.getOps();\n    List<OpResult> results = client.getZookeeperClient().multi(ops);\n    if (results.size() > 0) {\n        OpResult firstResult = results.get(0);\n        if (firstResult.getType() == ZooDefs.OpCode.error) {\n            OpResult.ErrorResult errorResult = (OpResult.ErrorResult) firstResult;\n            int errorCode = errorResult.getErr();\n            throw KeeperException.create(KeeperException.Code.get(errorCode));\n        }\n    }\n    return results;\n}", "CodeBleu_score": 57.41631470675531}, {"code": "private List<OpResult> doOperation() throws Exception{\n\t    List<Op> ops = transaction.getOps();\n    List<OpResult> results = client.getZookeeperClient().multi(ops);\n    if (results.size() == 0) {\n        throw new IllegalStateException(\"No results returned\");\n    }\n    OpResult firstResult = results.get(0);\n    if (firstResult.getType() == ZooDefs.OpCode.error) {\n        OpResult.ErrorResult errorResult = (OpResult.ErrorResult) firstResult;\n        int errorCode = errorResult.getErr();\n        throw KeeperException.create(KeeperException.Code.get(errorCode), \"\");\n    }\n    return results;\n}", "CodeBleu_score": 55.03093616044197}, {"code": "private List<OpResult> doOperation() throws Exception{\n\t    List<Op> ops = transaction.getOps();\n    List<OpResult> results = client.getZookeeperClient().multi(ops);\n    if (results.size() > 0 && results.get(0).getType() == ZooDefs.OpCode.error) {\n        OpResult.ErrorResult errorResult = (OpResult.ErrorResult) results.get(0);\n        int errorCode = errorResult.getErr();\n        throw KeeperException.create(KeeperException.Code.get(errorCode), \"\");\n    }\n    return results;\n}", "CodeBleu_score": 44.949217467140315}]}
{"instance_id": "99263700ce6d", "generation_result": [{"code": "private static void listInstances(ServiceDiscovery<InstanceDetails> serviceDiscovery) throws Exception{\n\t    Collection<String> serviceNames = serviceDiscovery.queryForNames();\n    for (String serviceName : serviceNames) {\n        Collection<ServiceInstance<InstanceDetails>> instances = serviceDiscovery.queryForInstances(serviceName);\n        if (instances.isEmpty()) {\n            System.out.println(\\\"No instances for \\\" + serviceName);\n        } else {\n            for (ServiceInstance<InstanceDetails> instance : instances) {\n                outputInstance(instance);\n            }\n        }\n    }\n}", "CodeBleu_score": 50.98450107388172}, {"code": "private static void listInstances(ServiceDiscovery<InstanceDetails> serviceDiscovery) throws Exception{\n\t    // this shows how to use a ServiceDiscovery\n\n    // in a real application you'd create the ServiceDiscovery early\n\n    Collection<String> names = serviceDiscovery.queryForNames();\n    if (names.isEmpty()) {\n        System.err.println(\\\"No services currently registered\\\");\n        return;\n\n    }\n\n    for (String name : names) {\n\n        Collection<ServiceInstance<InstanceDetails>> instances = serviceDiscovery.queryForInstances(name);\n\n        System.out.println(\\\"Service: \\\" + name);\n\n        for (ServiceInstance<InstanceDetails> instance : instances) {\n\n            outputInstance(instance);\n\n        }\n\n    }\n\n}", "CodeBleu_score": 47.28615424990112}, {"code": "private static void listInstances(ServiceDiscovery<InstanceDetails> serviceDiscovery) throws Exception{\n\t    Collection<String> serviceNames = serviceDiscovery.queryForNames();\n    for (String serviceName : serviceNames) {\n        Collection<ServiceInstance<InstanceDetails>> instances = serviceDiscovery.queryForInstances(serviceName);\n        for (ServiceInstance<InstanceDetails> instance : instances) {\n            outputInstance(instance);\n        }\n    }\n}", "CodeBleu_score": 44.10574812312259}]}
{"instance_id": "891a390fa04d", "generation_result": [{"code": "private List<String> filterAndSortChildren(List<String> children){\n\t    List<String> filteredChildren = Lists.newArrayList(Iterables.filter(children, new Predicate<String>() {\n        @Override\n        public boolean apply(String input) {\n            return !input.equals(READY_NODE);\n        }\n    }));\n    Collections.sort(filteredChildren);\n    return filteredChildren;\n}", "CodeBleu_score": 67.11837067665275}, {"code": "private List<String> filterAndSortChildren(List<String> children){\n\t    List<String> filteredChildren = new ArrayList<>(children);\n    filteredChildren.removeAll(Collections.singleton(READY_NODE));\n    Collections.sort(filteredChildren);\n    return filteredChildren;\n}", "CodeBleu_score": 24.413292487941018}, {"code": "private List<String> filterAndSortChildren(List<String> children){\n\t    List<String> filteredChildren = Lists.newArrayList(Iterables.filter(children, new Predicate<String>() {\n        @Override\n        public boolean apply(String child) {\n            return !child.equals(READY_NODE);\n        }\n    }));\n    Collections.sort(filteredChildren);\n    return filteredChildren;\n}", "CodeBleu_score": 65.28176752764192}]}
{"instance_id": "f25af95a13b6", "generation_result": [{"code": "protected void connectToZK(String newHost) throws InterruptedException, IOException{\n\t    if (zk != null) {\n        zk.close();\n    }\n    host = newHost;\n    zk = new ZooKeeper(host, timeout, this);\n    if (readOnly) {\n        zk.setReadOnly();\n    }\n}", "CodeBleu_score": 38.19166510159835}, {"code": "protected void connectToZK(String newHost) throws InterruptedException, IOException{\n\t    if (zk != null) {\n        zk.close();\n    }\n    host = newHost;\n    zk = new ZooKeeper(host, timeout, this);\n    if (readOnly) {\n        zk.setReadOnlyMode();\n    }\n}", "CodeBleu_score": 38.454764520823474}, {"code": "protected void connectToZK(String newHost) throws InterruptedException, IOException{\n\t    if (zk != null) {\n        zk.close();\n    }\n    zk = new ZooKeeper(newHost, timeout, this);\n    host = newHost;\n    // set the read only mode if the option is set\n        if (readOnly) {\n            zk.setReadOnly(true);\n        }\n    }", "CodeBleu_score": 34.97807916640577}]}
{"instance_id": "269eaac5cec6", "generation_result": [{"code": "private List<ACL> parseACLs(String aclString) throws IOException{\n\t    List<ACL> aclList = new ArrayList<ACL>();\n    String[] aclSegments = aclString.split(\\\",\\\");\n    for (String aclSegment : aclSegments) {\n        String[] parts = aclSegment.split(\\\":\\\");\n        if (parts.length != 3) {\n            throw new IOException(\\\"Invalid ACL segment: \\\" + aclSegment);\n        }\n        ACL acl = new ACL();\n        acl.setId(parts[0]);\n        acl.setPerms(getPerms(parts[1]));\n        aclList.add(acl);\n    }\n    return aclList;\n}", "CodeBleu_score": 23.085170076515645}, {"code": "private List<ACL> parseACLs(String aclString) throws IOException{\n\t    List<ACL> aclList = new ArrayList<ACL>();\n    String[] aclStrings = aclString.split(\\\",\\\");\n    for (String aclString1 : aclStrings) {\n        String[] aclParts = aclString1.split(\\\":\\\");\n        if (aclParts.length != 3) {\n            throw new IOException(\\\"Invalid ACL: \\\" + aclString1);\n        }\n        String scheme = aclParts[0];\n        String id = aclParts[1];\n        int perms = Integer.parseInt(aclParts[2]);\n        ACL acl = new ACL(perms, scheme, id);\n        aclList.add(acl);\n    }\n    return aclList;\n}", "CodeBleu_score": 23.96021018709348}, {"code": "private List<ACL> parseACLs(String aclString) throws IOException{\n\t    List<ACL> acls = new ArrayList<ACL>();\n    String[] segments = aclString.split(\\\",\\\");\n    for (String segment : segments) {\n        String[] parts = segment.split(\\\":\\\");\n        if (parts.length != 3) {\n            throw new IOException(\\\"Invalid ACL segment: \\\" + segment);\n        }\n        ACL acl = new ACL();\n        acl.setId(parts[0]);\n        acl.setPerms(getPerms(parts[1]));\n        acls.add(acl);\n    }\n    return acls;\n}", "CodeBleu_score": 22.60803186604259}]}
{"instance_id": "c25db637a176", "generation_result": [{"code": "public void delete(String serverId, List<String> pathList) throws Exception{\n\t    if (pathList == null) {\n            throw new IllegalArgumentException(\\\"path list is null\\\");\n        }\n        assertZookeeperExists(serverId);\n        if (pathList.size() < 20) {\n            pathList.forEach(path -> zookeeperMap.get(serverId).delete(path));\n        } else {\n            pathList.forEach(path -> zookeeperMap.get(serverId).deleteAsync(path));\n        }\n    }", "CodeBleu_score": 56.262306879703516}, {"code": "public void delete(String serverId, List<String> pathList) throws Exception{\n\t    assertZookeeperExists(serverId);\n    if (pathList == null || pathList.isEmpty()) {\n        return;\n    }\n    if (pathList.size() < 20) {\n        for (String path : pathList) {\n            zookeeperMap.get(serverId).delete(path);\n        }\n    } else {\n        for (String path : pathList) {\n            zookeeperMap.get(serverId).deleteAsync(path);\n        }\n    }\n}", "CodeBleu_score": 82.0989206037454}, {"code": "public void delete(String serverId, List<String> pathList) throws Exception{\n\t    if (pathList == null) {\n        return;\n    }\n    assertZookeeperExists(serverId);\n    if (pathList.size() < 20) {\n        for (String path : pathList) {\n            zookeeperMap.get(serverId).delete(path);\n        }\n    } else {\n        List<String> paths = new ArrayList<>(pathList);\n        int size = paths.size();\n        for (int i = 0; i < size; i++) {\n            String path = paths.remove(0);\n            zookeeperMap.get(serverId).deleteAsync(path);\n        }\n    }\n}", "CodeBleu_score": 80.50775514948542}]}
{"instance_id": "3ecb1ce78f90", "generation_result": [{"code": "public Terminal createTerminal(String id, String url, StringWriter writer) throws Exception{\n\t    writer.write(\"Connecting to zookeeper...\n\");\n    var factory = new CuratorZookeeperConnectionFactory();\n    var params = ZookeeperParams.builder()\n            .id(id)\n            .url(url)\n            .maxRetries(3)\n            .connectionTimeout(5000)\n            .retryIntervalTime(1000)\n            .sessionTimeout(10000)\n            .build();\n    var connection = factory.createAsync(params, null);\n    writer.write(\"Connected to zookeeper!\n\");\n    var zooKeeperMain = new ZooKeeperMain();\n    return new Terminal(id, url, connection, zooKeeperMain);\n}", "CodeBleu_score": 61.81394480275058}, {"code": "public Terminal createTerminal(String id, String url, StringWriter writer) throws Exception{\n\t    writer.write(\"Connecting to Zookeeper: \" + url + \" ...\");\n    var factory = new CuratorZookeeperConnectionFactory();\n    var params = ZookeeperParams.builder()\n            .id(id)\n            .url(url)\n            .build();\n    var connection = factory.createAsync(params);\n    writer.write(\"Connected to Zookeeper: \" + url);\n    return new Terminal(id, url, connection, new ZooKeeperMain(connection));\n}", "CodeBleu_score": 55.140867789184036}, {"code": "public Terminal createTerminal(String id, String url, StringWriter writer) throws Exception{\n\t    writer.write(\"Connecting to zookeeper...\n\");\n    var factory = new CuratorZookeeperConnectionFactory();\n    var params = ZookeeperParams.builder()\n            .id(id)\n            .url(url)\n            .build();\n    var connection = factory.createAsync(params);\n    writer.write(\"Successfully connected to zookeeper\n\");\n    var zooKeeperMain = new ZooKeeperMain(connection);\n    return new Terminal(id, url, connection, zooKeeperMain);\n}", "CodeBleu_score": 57.282543925903205}]}
{"instance_id": "a3606e777eb5", "generation_result": [{"code": "public void blockUntilConnected(){\n\t    int maxRetries = 6;\n    int retries = 0;\n    while (retries < maxRetries) {\n        try {\n            Thread.sleep(1000);\n            if (sshClient.isConnected()) {\n                log.info(\\\"ssh tunnel connected\\\");\n                return;\n            }\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new IllegalStateException(\\\"SSH tunnel connection interrupted\\\", e);\n        }\n        retries++;\n        log.info(\\\"ssh tunnel connection attempt {}/{}\\\", retries, maxRetries);\n    }\n    close();\n    throw new IllegalStateException(\\\"SSH tunnel connection failed\\\");\n}", "CodeBleu_score": 34.91720368208395}, {"code": "public void blockUntilConnected(){\n\t    int retries = 6;\n    for (int i = 0; i < retries; i++) {\n        try {\n            if (proxySocket.isClosed()) {\n                log.info(\\\"ssh tunnel is closed\\\");\n                break;\n\n            }\n            if (sshClient.isConnected()) {\n                log.info(\\\"ssh tunnel is connected\\\");\n                return;\n            }\n\n            Thread.sleep(1000);\n\n        } catch (IOException | InterruptedException e) {\n            log.error(\\\"ssh tunnel is closed\\\", e);\n            this.close();\n            throw new IllegalStateException(\\\"ssh tunnel is closed\\\", e);\n        }\n    }\n    this.close();\n    throw new IllegalStateException(\\\"ssh tunnel is closed\\\");\n}", "CodeBleu_score": 31.899276507437495}, {"code": "public void blockUntilConnected(){\n\t    int retries = 6;\n    while (retries > 0) {\n        try {\n            Thread.sleep(1000);\n            if (sshClient.isConnected()) {\n                return;\n            }\n        } catch (InterruptedException e) {\n            throw new IllegalStateException(e);\n        }\n        retries--;\n    }\n    throw new IllegalStateException(\\\"SSH tunnel connection failed\\\");\n}", "CodeBleu_score": 40.887733470870984}]}
{"instance_id": "a4e5b886b72b", "generation_result": [{"code": "public void deleteNode(String serverId, List<String> pathList){\n\t    try {\n        zookeeperDomainService.delete(serverId, pathList);\n    } catch (Exception e) {\n        log.error(\"delete node error\", e);\n        throw new IllegalStateException(\"delete node error\", e);\n    }\n}", "CodeBleu_score": 77.66875962593015}, {"code": "public void deleteNode(String serverId, List<String> pathList){\n\t    try {\n            zookeeperDomainService.delete(serverId, pathList);\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n            throw new IllegalStateException(e);\n        }\n    }", "CodeBleu_score": 76.27865646237085}, {"code": "public void deleteNode(String serverId, List<String> pathList){\n\t    try {\n        zookeeperDomainService.delete(serverId, pathList);\n    } catch (Exception e) {\n        log.error(e.getMessage(), e);\n        throw new IllegalStateException(e);\n    }\n}", "CodeBleu_score": 78.07423082716551}]}
{"instance_id": "4fdbc9ec2e75", "generation_result": [{"code": "public void disconnect(String id){\n\t    Platform.runLater(() -> {\n        var serverConfig = configurationDomainService.getById(id).orElseThrow();\n        zookeeperDomainService.disconnect(id);\n        treeItemCache.remove(id);\n    });\n}", "CodeBleu_score": 58.58331985452958}, {"code": "public void disconnect(String id){\n\t    Platform.runLater(() -> {\n        var serverConfig = configurationDomainService.getById(id).orElseThrow();\n        zookeeperDomainService.disconnect(serverConfig);\n        treeItemCache.remove(id);\n    });\n}", "CodeBleu_score": 59.898375371132985}, {"code": "public void disconnect(String id){\n\t    Platform.runLater(() -> {\n        var serverConfig = configurationDomainService.getById(id).orElseThrow();\n        zookeeperDomainService.disconnect(serverConfig.getId());\n        treeItemCache.remove(serverConfig.getId());\n    });\n}", "CodeBleu_score": 63.05877881592002}]}
{"instance_id": "6bf0d7ac9390", "generation_result": [{"code": "public void startTerminal(String serverId, StringWriter stream){\n\t    ServerConfiguration serverConfiguration = getServerConfigurationById(serverId);\n    String connectionUrl = serverConfiguration.isSshTunnelEnabled() ? serverConfiguration.getSshTunnel().getLocalhost() : serverConfiguration.getHost();\n    zookeeperDomainService.startTerminal(serverId, connectionUrl, stream);\n}", "CodeBleu_score": 40.00690265039424}, {"code": "public void startTerminal(String serverId, StringWriter stream){\n\t    final ServerConfiguration serverConfiguration = getServerConfigurationById(serverId);\n    String connectionUrl = serverConfiguration.getSshTunnelEnabled() ? serverConfiguration.getSshTunnel().getConnectionUrl() : serverConfiguration.getConnectionUrl();\n    zookeeperDomainService.startTerminal(serverId, connectionUrl, stream);\n}", "CodeBleu_score": 38.060468875682695}, {"code": "public void startTerminal(String serverId, StringWriter stream){\n\t    ServerConfiguration serverConfiguration = getServerConfigurationById(serverId);\n    String connectionUrl = getConnectionUrl(serverConfiguration);\n    zookeeperDomainService.startTerminal(serverId, connectionUrl, stream);\n}", "CodeBleu_score": 22.80834368644199}]}
{"instance_id": "635dea120e55", "generation_result": [{"code": "public void executeCommand(String id, String command){\n\t    Try.of(() -> zookeeperDomainService.executeCommand(id, command))\n            .onFailure(e -> {\n                LOGGER.error(\\\"Error while executing command: \\\" + command + \\\" on server: \\\" + id);\n                VToast.error(\\\"Error while executing command: \\\" + command + \\\" on server: \\\" + id);\n                VToast.error(\\\"Please retry.\\\");\n            });\n}", "CodeBleu_score": 28.846993716764892}, {"code": "public void executeCommand(String id, String command){\n\t    try {\n        zookeeperDomainService.executeCommand(id, command);\n    } catch (Exception e) {\n        log.error(\\\"Failed to execute command: {}\\\", command, e);\n        VToast.error(\\\"Failed to execute command: \\\" + command + \\\"\\\nPlease retry\\\");\n    }\n}", "CodeBleu_score": 56.644277209574724}, {"code": "public void executeCommand(String id, String command){\n\t    if (StringUtils.isBlank(command)) {\n        return;\n    }\n    if (StringUtils.isBlank(id)) {\n        return;\n    }\n    try {\n        zookeeperDomainService.executeCommand(id, command);\n    } catch (Throwable e) {\n        LOGGER.error(\\\"Failed to execute command on server {}\\\", id, e);\n        VToast.error(\\\"Failed to execute command on server \\\" + id + \\\"\\\");\n    }\n}", "CodeBleu_score": 43.68124594550258}]}
{"instance_id": "8627d161f5fc", "generation_result": [{"code": "public Properties loadZookeeperSystemProperties(){\n\t    var properties = new Properties();\n    var userHome = System.getProperty(\\\"user.home\\\");\n    var path = Paths.get(userHome + \\\"/.prettyZoo/config/zoo.properties\\\");\n    if (Files.exists(path)) {\n        try (var inputStream = Files.newInputStream(path)) {\n            properties.load(inputStream);\n            log.info(\\\"load zookeeper system properties success, properties:{}\\\", properties);\n        } catch (IOException e) {\n            log.error(\\\"load zookeeper system properties failed, msg:{}\\\", e.getMessage(), e);\n        }\n    } else {\n        log.info(\\\"can't find zookeeper system properties file in \\\" + path);\n    }\n    return properties;\n}", "CodeBleu_score": 35.0680701626141}, {"code": "public Properties loadZookeeperSystemProperties(){\n\t    Properties properties = new Properties();\n    try {\n        var userHome = System.getProperty(\\\"user.home\\\");\n        var path = Paths.get(userHome + \\\"/.prettyZoo/config/zookeeper.properties\\\");\n        if (Files.exists(path)) {\n            try (InputStream inputStream = Files.newInputStream(path)) {\n                properties.load(inputStream);\n                log.info(\\\"load zookeeper system properties from \\\" + path);\n            }\n        } else {\n            log.info(\\\"can't find zookeeper.properties file in \\\" + path);\n        }\n    } catch (Exception e) {\n        log.error(\\\"load zookeeper system properties error, msg:{}\\\", e.getMessage(), e);\n    }\n    return properties;\n}", "CodeBleu_score": 32.4427854189973}, {"code": "public Properties loadZookeeperSystemProperties(){\n\t    var properties = new Properties();\n    var file = new File(System.getProperty(\\\"user.home\\\") + \\\"/.prettyZoo/system.properties\\\");\n    if (file.exists()) {\n        try (var inputStream = new FileInputStream(file)) {\n            properties.load(inputStream);\n            log.info(\\\"load zookeeper system properties: \\\" + properties);\n        } catch (Exception e) {\n            log.error(\\\"load zookeeper system properties error: \\\" + e.getMessage(), e);\n        }\n    } else {\n        log.info(\\\"can't find zookeeper system properties\\\");\n    }\n    return properties;\n}", "CodeBleu_score": 28.96935534422756}]}
{"instance_id": "dce20e143e04", "generation_result": [{"code": "public void saveZookeeperSystemProperties(String content){\n\t    try (var reader = new StringReader(content)) {\n        var properties = new Properties();\n        properties.load(reader);\n        log.info(\\\"save system properties success -> {}\\\", properties);\n        try (var outputStream = new FileOutputStream(PrettyZooConfigRepository.SYS_PROP_PATH)) {\n            properties.store(outputStream, null);\n            log.info(\\\"save system properties success\\\");\n            VToast.success(\\\"\\\");\n            }\n        }\n    }", "CodeBleu_score": 26.348785844590424}, {"code": "public void saveZookeeperSystemProperties(String content){\n\t    try {\n        Properties properties = new Properties();\n        properties.load(new StringReader(content));\n        log.info(\"load system properties success ->\n {}\", properties);\n        try {\n            FileOutputStream fileOutputStream = new FileOutputStream(PrettyZooConfigRepository.SYS_PROP_PATH);\n            properties.store(fileOutputStream, null);\n        } catch (IOException e) {\n            log.error(\"save system properties failed\", e);\n            VToast.error(\"\");\n        }\n    } catch (IOException e) {\n        log.error(\"load system properties failed\", e);\n        VToast.error(\"\");\n    }\n}", "CodeBleu_score": 42.594593387291354}, {"code": "public void saveZookeeperSystemProperties(String content){\n\t    try (var reader = new StringReader(content)) {\n        var properties = new Properties();\n        properties.load(reader);\n        log.info(\\\"load system properties success ->\n {}\\\", properties);\n        try (var outputStream = new FileOutputStream(PrettyZooConfigRepository.SYS_PROP_PATH)) {\n            properties.store(outputStream, null);\n        } catch (IOException e) {\n            log.error(\\\"save system properties failed\\\", e);\n            VToast.error(\\\"save system properties failed\\\");\n        }\n    } catch (IOException e) {\n        log.error(\\\"load system properties failed\\\", e);\n        VToast.error(\\\"load system properties failed\\\");\n    }\n}", "CodeBleu_score": 39.875099900975705}]}
{"instance_id": "d89f8e6bfb31", "generation_result": [{"code": "private String response(Socket client){\n\t    try {\n            BufferedReader reader = new BufferedReader(new InputStreamReader(client.getInputStream()));\n            StringBuilder stringBuilder = new StringBuilder();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                stringBuilder.append(line).append(\\\"\\\n\\\");\n            }\n            client.close();\n            return stringBuilder.toString();\n        } catch (IOException e) {\n            throw new IllegalStateException(e);\n        }\n    }", "CodeBleu_score": 57.13489626267234}, {"code": "private String response(Socket client){\n\t    StringBuilder sb = new StringBuilder();\n    try {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(client.getInputStream()));\n        String line;\n        while ((line = reader.readLine()) != null) {\n            sb.append(line);\n        }\n        client.close();\n    } catch (IOException e) {\n        throw new IllegalStateException(e);\n    }\n    return sb.toString();\n}", "CodeBleu_score": 58.94105634995651}, {"code": "private String response(Socket client){\n\t    try (BufferedReader reader = new BufferedReader(new InputStreamReader(client.getInputStream()))) {\n        StringBuilder stringBuilder = new StringBuilder();\n        String line;\n        while ((line = reader.readLine()) != null) {\n            stringBuilder.append(line);\n        }\n        return stringBuilder.toString();\n    } catch (IOException e) {\n        throw new IllegalStateException(e);\n    } finally {\n        try {\n            client.close();\n        } catch (IOException e) {\n            throw new IllegalStateException(e);\n        }\n    }\n}", "CodeBleu_score": 47.597511325384446}]}
{"instance_id": "b0a277c5e3c0", "generation_result": [{"code": "public ZookeeperConnection<CuratorFramework> create(ZookeeperParams params){\n\t    // Create a new CuratorFramework client with the given parameters\n    CuratorFramework client = CuratorFrameworkFactory.builder()\n            .connectString(params.getHosts())\n            .sessionTimeoutMs(params.getSessionTimeout())\n            .connectionTimeoutMs(params.getConnectionTimeout())\n            .retryPolicy(new ExponentialBackoffRetry(params.getRetryInterval(), params.getRetryCount()))\n            .build();\n\n    // Start the client\n    client.start();\n\n    // Wait up to 5 seconds for the connection to be established\n    try {\n        if (!client.blockUntilConnected(5, TimeUnit.SECONDS)) {\n            throw new RuntimeException(\"Failed to connect to ZooKeeper within 5 seconds\");\n        }\n    } catch (InterruptedException e) {\n        throw new RuntimeException(\"Interrupted while waiting for ZooKeeper connection\", e);\n    }\n\n    // Return a new CuratorZookeeperConnection with the provided parameters\n    return new CuratorZookeeperConnection(client, params);\n}", "CodeBleu_score": 58.990165548308504}, {"code": "public ZookeeperConnection<CuratorFramework> create(ZookeeperParams params){\n\t        CuratorFramework client = CuratorFrameworkFactory.builder()\n                .connectString(params.getZkAddress())\n                .connectionTimeoutMs(params.getConnectionTimeout())\n                .sessionTimeoutMs(params.getSessionTimeout())\n                .retryPolicy(new ExponentialBackoffRetry(params.getBaseSleepTimeMs(), params.getMaxRetries()))\n                .namespace(params.getNamespace())\n                .build();\n        client.start();\n        try {\n            if (!client.blockUntilConnected(params.getConnectionTimeout(), TimeUnit.MILLISECONDS)) {\n                throw new RuntimeException(\"Timed out waiting for connection.\");\n            }\n            return new CuratorZookeeperConnection(client, params);\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        }\n    }", "CodeBleu_score": 49.161512106582315}, {"code": "public ZookeeperConnection<CuratorFramework> create(ZookeeperParams params){\n\t    CuratorFramework client = CuratorFrameworkFactory.builder()\n            .connectString(params.getHost())\n            .retryPolicy(new ExponentialBackoffRetry(1000, 3))\n            .build();\n    client.start();\n    try {\n        if (!client.blockUntilConnected(5, TimeUnit.SECONDS)) {\n            throw new RuntimeException(\"Timed out waiting for connection to be established\");\n        }\n    } catch (InterruptedException e) {\n        throw new RuntimeException(\"Interrupted while waiting for connection to be established\", e);\n    }\n    return new CuratorZookeeperConnection(client, params);\n}", "CodeBleu_score": 61.88361726932655}]}
{"instance_id": "b144bcd67462", "generation_result": [{"code": "public void sync(List<ZookeeperNodeListener> listeners){\n\t    if (!isSync.compareAndSet(false, true)) {\n        log.info(\\\"Synchronization is already in progress.\\\");\n        return;\n    }\n    log.info(\\\"Start synchronization.\\\");\n    treeCache.getListenable().addListener(new CuratorTreeCacheListener(listeners));\n    try {\n        treeCache.start();\n    } catch (Exception e) {\n        log.error(\\\"Error during synchronization.\\\", e);\n        treeCache.close();\n    }\n}", "CodeBleu_score": 33.306222292602094}, {"code": "public void sync(List<ZookeeperNodeListener> listeners){\n\t    if (isSync.get()) {\n        log.info(\\\"Sync is already in progress\\\");\n        return;\n    }\n    log.info(\\\"Sync started\\\");\n    isSync.set(true);\n    try {\n        treeCache.getListenable().addListener(new CuratorTreeCacheListener(listeners), treeCache);\n        treeCache.start();\n    } catch (Exception e) {\n        log.error(\\\"Error during sync\\\", e);\n        treeCache.close();\n    }\n}", "CodeBleu_score": 33.422850658793415}, {"code": "public void sync(List<ZookeeperNodeListener> listeners){\n\t    if (!isSync.get()) {\n        log.info(\\\"Start sync zookeeper nodes...\\\");\n        try {\n            final String connectionString = curatorFramework.getZookeeperClient().getCurrentConnectionString();\n            final String[] servers = connectionString.split(\\\",\\\");\n            final List<String> serverList = Arrays.asList(servers);\n            treeCache.getListenable().addListener(new CuratorTreeCacheListener(listeners, serverList));\n            treeCache.start();\n        } catch (Exception e) {\n            log.error(\\\"Error: \\\", e);\n            treeCache.close();\n        }\n    } else {\n        log.info(\\\"Sync zookeeper nodes is already in progress...\\\");\n    }\n}", "CodeBleu_score": 55.02889914330337}]}
{"instance_id": "6452f272f2d7", "generation_result": [{"code": "public void watchPathChildrenNode(String path, PathChildrenCacheListener listener) throws Exception{\n\t    PathChildrenCache pathChildrenCache = new PathChildrenCache(client, path, true);\n    pathChildrenCache.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);\n    pathChildrenCache.getListenable().addListener(listener);\n}", "CodeBleu_score": 92.65728873983663}, {"code": "public void watchPathChildrenNode(String path, PathChildrenCacheListener listener) throws Exception{\n\t    PathChildrenCache pathChildrenCache = new PathChildrenCache(client, path, true);\n    pathChildrenCache.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);\n    pathChildrenCache.getListenable().addListener(listener);\n}", "CodeBleu_score": 92.65728873983663}, {"code": "public void watchPathChildrenNode(String path, PathChildrenCacheListener listener) throws Exception{\n\t    PathChildrenCache pathChildrenCache = new PathChildrenCache(client, path, true);\n    pathChildrenCache.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);\n    pathChildrenCache.getListenable().addListener(listener);\n}", "CodeBleu_score": 92.65728873983663}]}
{"instance_id": "17f786e147c3", "generation_result": [{"code": "public void unregisterService(){\n\t    logger.info(\\\"Unregister service start\\\");\n    for (String path : pathList) {\n        try {\n                curatorClient.deletePath(path);\n            } catch (Exception e) {\n                logger.error(\\\"Unregister service fail, exception: {}\\\", e.getMessage());\n            }\n        }\n        curatorClient.close();\n    }", "CodeBleu_score": 51.20571992355656}, {"code": "public void unregisterService(){\n\t    logger.info(\\\"Unregister all service\\\");\n    for (String path : pathList) {\n        try {\n            curatorClient.deletePath(path);\n        } catch (Exception e) {\n            logger.error(\\\"Unregister service fail, exception: {}\\\", e.getMessage());\n        }\n    }\n    curatorClient.close();\n}", "CodeBleu_score": 61.097296380959406}, {"code": "public void unregisterService(){\n\t    logger.info(\\\"Begin unregister service\\\");\n    for (String path : pathList) {\n        try {\n            curatorClient.deletePath(path);\n        } catch (Exception e) {\n            logger.error(\\\"Unregister service fail, exception: {}\\\", e.getMessage());\n        }\n    }\n    curatorClient.close();\n}", "CodeBleu_score": 60.5066786124441}]}
{"instance_id": "32fec6cfa353", "generation_result": [{"code": "public void addListener(IZkStateListener listener){\n\t    if (client != null) {\n        client.subscribeStateChanges(listener);\n    } else {\n        completableFuture.whenComplete(makeClientReady(listener));\n    }\n}", "CodeBleu_score": 30.426010500105054}, {"code": "public void addListener(IZkStateListener listener){\n\t    if (!started) {\n        completableFuture.whenComplete(client -> client.subscribeStateChanges(listener));\n    } else {\n        client.subscribeStateChanges(listener);\n    }\n}", "CodeBleu_score": 24.546260889380466}, {"code": "public void addListener(IZkStateListener listener){\n\t    if (client == null) {\n        completableFuture.whenComplete(this::makeClientReady);\n    } else {\n        this.client.subscribeStateChanges(listener);\n    }\n}", "CodeBleu_score": 24.642634379142663}]}
{"instance_id": "619d57562a76", "generation_result": [{"code": "public CuratorZookeeperClient(String serverAddr, String authority){\n\t    this.client = CuratorFrameworkFactory.newClient(serverAddr, new RetryNTimes(10, 5000), 10000, 10000, new CuratorWatcher() {\n        @Override\n        public void process(WatchedEvent event) throws Exception {\n            if (event.getType() == WatchedEvent.EventType.NodeChildrenChanged) {\n                String path = event.getPath();\n                if (path != null) {\n                    List<String> children = client.getChildren().forPath(path);\n                    if (children != null) {\n                        Collections.sort(children);\n                        CuratorZookeeperClient.this.getChildListener().childChanged(path, children);\n                    }\n                }\n            }\n        }\n    });\n    if (authority != null) {\n        String[] auth = authority.split(\":\");\n        client.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n            @Override\n            public void stateChanged(CuratorFramework curatorFramework, ConnectionState connectionState) {\n                if (connectionState == ConnectionState.CONNECTED) {\n                    try {\n                        client.getZookeeperClient().addAuthInfo(\"digest\", auth[0].getBytes(), auth[1].getBytes());\n                    } catch (Exception e) {\n                        throw new IllegalStateException(e);\n                    }\n                }\n            }\n        });\n    }\n    client.start();\n    try {\n        client.blockUntilConnected();\n    } catch (Exception e) {\n        throw new IllegalStateException(e);\n    }\n}", "CodeBleu_score": 51.978958858363676}, {"code": "public CuratorZookeeperClient(String serverAddr, String authority){\n\t    RetryNTimes retryPolicy = new RetryNTimes(3, 1000);\n    int sessionTimeoutMs = 5000;\n    client = CuratorFrameworkFactory.builder()\n                .connectString(serverAddr)\n                .retryPolicy(retryPolicy)\n                .sessionTimeoutMs(sessionTimeoutMs)\n                .authority(authority)\n                .build();\n    client.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n                    @Override\n                    public void stateChanged(CuratorFramework client, ConnectionState newState) {\n                        switch (newState) {\n                            case LOST:\n                                CuratorZookeeperClient.this.stateChanged(State.LOST);\n                                break;\n                            case CONNECTED:\n                                CuratorZookeeperClient.this.stateChanged(State.CONNECTED);\n                                break;\n                            case RECONNECTED:\n                                CuratorZookeeperClient.this.stateChanged(State.RECONNECTED);\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                });\n    try {\n                    client.start();\n                } catch (Exception e) {\n                    throw new IllegalStateException(\\\"Failed to connect to zookeeper server\\\", e);\n                }\n            }", "CodeBleu_score": 56.29142494668529}, {"code": "public CuratorZookeeperClient(String serverAddr, String authority){\n\t    RetryNTimes retryPolicy = new RetryNTimes(10, 1000);\n    client = CuratorFrameworkFactory.newClient(serverAddr, retryPolicy);\n    if (authority != null) {\n        client.getZookeeperClient().setZooKeeperFactory(new AuthorizedZooKeeperFactory(authority));\n    }\n    client.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n        @Override\n        public void stateChanged(CuratorFramework client, ConnectionState newState) {\n            switch (newState) {\n                case LOST:\n                    onLost();\n                    break;\n                case CONNECTED:\n                    onConnected();\n                    break;\n                case RECONNECTED:\n                    onReconnected();\n                    break;\n                default:\n                    break;\n            }\n        }\n    });\n    try {\n        client.start();\n    } catch (Exception e) {\n            throw new IllegalStateException(e);\n    }\n}", "CodeBleu_score": 38.600781152949956}]}
{"instance_id": "9e7fb18946e4", "generation_result": [{"code": "public void removeChildListener(String path, ChildListener listener){\n\t    ConcurrentMap<ChildListener, TargetChildListener> listeners = childListeners.get(path);\n    if (listeners == null) {\n        return;\n    }\n    TargetChildListener targetListener = listeners.remove(listener);\n    if (targetListener != null) {\n        removeTargetChildListener(path, targetListener);\n    }\n}", "CodeBleu_score": 82.84256142829346}, {"code": "public void removeChildListener(String path, ChildListener listener){\n\t    ConcurrentMap<ChildListener, TargetChildListener> listeners = childListeners.get(path);\n    if (listeners == null) {\n        return;\n    }\n    TargetChildListener targetListener = listeners.remove(listener);\n    if (targetListener != null) {\n        removeTargetChildListener(path, targetListener);\n    }\n}", "CodeBleu_score": 82.84256142829346}, {"code": "public void removeChildListener(String path, ChildListener listener){\n\t    ConcurrentMap<ChildListener, TargetChildListener> listeners = childListeners.get(path);\n    if (listeners == null) {\n        return;\n    }\n    TargetChildListener targetListener = listeners.remove(listener);\n    if (targetListener != null) {\n        removeTargetChildListener(path, targetListener);\n    }\n}", "CodeBleu_score": 82.84256142829346}]}
{"instance_id": "2c3fae642654", "generation_result": [{"code": "static int watcher_reconnect_to_zookeeper(zhandle_t *zh){\n\t    if (NULL == zh) {\n        LOG_ERR(\"Failed to reconnect to zookeeper. zh is null\");\n        return QCONF_ERR_OTHER;\n    }\n\n    string idc_host, idc, host;\n    unsigned long htkey = reinterpret_cast<unsigned long>(zh);\n    if (QCONF_OK != lock_ht_find(_ht_handle_idchost, _ht_hi_mutex, htkey, idc_host)) {\n        LOG_ERR(\"Failed to reconnect to zookeeper. Failed to get idc_host\");\n        return QCONF_ERR_OTHER;\n    }\n    if (QCONF_OK != lock_ht_remove(_ht_handle_idchost, _ht_hi_mutex, htkey)) {\n        LOG_ERR(\"Failed to reconnect to zookeeper. Failed to remove idc_host\");\n        return QCONF_ERR_OTHER;\n    }\n\n    zookeeper_close(zh);\n\n    deserialize_from_idc_host(idc_host, idc, host);\n    zh = zookeeper_init(host.c_str(), global_watcher, _recv_timeout, NULL, NULL, 0);\n    if (NULL == zh) {\n        LOG_ERR(\"Failed to reconnect to zookeeper. host:%s timeout:%d\", host.c_str(), _recv_timeout);\n        return QCONF_ERR_OTHER;\n    }\n\n    init_env_for_zk(zh, idc_host, idc);\n    // reset the table watcher\n    _finish_process_tbl_sleep_setting = true;\n\n    return QCONF_OK;\n}", "CodeBleu_score": 68.85521893975974}, {"code": "static int watcher_reconnect_to_zookeeper(zhandle_t *zh){\n\t    if (NULL == zh) return QCONF_ERR_PARAM;\n\n    string idc_host, idc, host;\n    unsigned long htkey = reinterpret_cast<unsigned long>(zh);\n    if (QCONF_OK != lock_ht_find(_ht_handle_idchost, _ht_hi_mutex, htkey, idc_host)) return QCONF_ERR_OTHER;\n    if (QCONF_OK != lock_ht_remove(_ht_handle_idchost, _ht_hi_mutex, htkey)) return QCONF_ERR_OTHER;\n    if (QCONF_OK != lock_ht_remove(_ht_idchost_handle, _ht_ih_mutex, idc_host, zh)) return QCONF_ERR_OTHER;\n    if (QCONF_OK != deserialize_from_idc_host(idc_host, idc, host)) return QCONF_ERR_OTHER;\n\n    zookeeper_close(zh);\n    zh = zookeeper_init(host.c_str(), global_watcher, _recv_timeout, NULL, NULL, 0);\n    if (NULL == zh)\n    {\n        LOG_ERR(\"Failed to initial zookeeper. host:%s timeout:%d\", host.c_str(), _recv_timeout);\n        return QCONF_ERR_OTHER;\n    }\n    init_env_for_zk(zh, idc_host, idc);\n\n    // reset the table watcher\n    _finish_process_tbl_sleep_setting = true;\n\n    return QCONF_OK;\n}", "CodeBleu_score": 65.32370613517126}, {"code": "static int watcher_reconnect_to_zookeeper(zhandle_t *zh){\n\t  if (zh == NULL) {\n    LOG_ERR(\"zh is NULL\");\n    return QCONF_ERR_OTHER;\n  }\n\n  string idc_host, idc, host;\n  unsigned long htkey = reinterpret_cast<unsigned long>(zh);\n  if (QCONF_OK != lock_ht_find(_ht_handle_idchost, _ht_hi_mutex, htkey, idc_host)) {\n    LOG_ERR(\"Failed to find idc_host by zh\");\n    return QCONF_ERR_OTHER;\n  }\n  if (QCONF_OK != hash_tbl_remove(_ht_idchost_handle, idc_host)) {\n    LOG_ERR(\"Failed to remove idc_host by zh\");\n    return QCONF_ERR_OTHER;\n  }\n  zookeeper_close(zh);\n  deserialize_from_idc_host(idc_host, idc, host);\n  zh = zookeeper_init(host.c_str(), global_watcher, _recv_timeout, NULL, NULL, 0);\n  if (NULL == zh) {\n    LOG_ERR(\"Failed to initial zookeeper. host:%s timeout:%d\", host.c_str(), _recv_timeout);\n    return QCONF_ERR_OTHER;\n  }\n  init_env_for_zk(zh, idc_host, idc);\n  _finish_process_tbl_sleep_setting = true;\n  LOG_INFO(\"Reconnect to zookeeper success.\");\n  return QCONF_OK;\n}", "CodeBleu_score": 65.5262070477844}]}
{"instance_id": "0b5ab34e1dd9", "generation_result": [{"code": "static void init_env_for_zk(zhandle_t *zh, const string &idc_host, const string &idc){\n\t", "CodeBleu_score": 4.2583564394715525}, {"code": "static void init_env_for_zk(zhandle_t *zh, const string &idc_host, const string &idc){\n\t    if (NULL == zh) return;\n    unsigned long htkey = reinterpret_cast<unsigned long>(zh);\n    lock_ht_add(_ht_handle_idchost, _ht_hi_mutex, htkey, idc_host);\n    lock_ht_add(_ht_idchost_handle, _ht_ih_mutex, idc_host, zh);\n\n    if (ZOO_CONNECTED_STATE != zookeeper_state(zh)) return;\n\n    // register current host on the Zookeeper server\n    string reg_path = get_reg_path_by_idc(idc);\n    if (QCONF_OK != zoo_create_with_mode(zh, reg_path.c_str(), \"\", 0, &_zoo_acl, ZOO_EPHEMERAL | ZOO_SEQUENCE, NULL, 0))\n    {\n        LOG_ERR(\"Failed to register current host on the Zookeeper server. reg_path:%s\", reg_path.c_str());\n        return;\n    }\n\n    // set watcher on the notify node\n    string notify_path = get_notify_path_by_idc(idc);\n    if (QCONF_OK != zoo_wexists(zh, notify_path.c_str(), notify_watcher, NULL, NULL))\n    {\n        LOG_ERR(\"Failed to set watcher on the notify node. notify_path:%s\", notify_path.c_str());\n        return;\n    }\n\n    // add the IDC to a gray list\n    add_gray_idc(idc);\n}", "CodeBleu_score": 57.02801382517622}, {"code": "static void init_env_for_zk(zhandle_t *zh, const string &idc_host, const string &idc){\n\t", "CodeBleu_score": 4.2583564394715525}]}
{"instance_id": "19fc5847a7c5", "generation_result": [{"code": "def make_digest_acl_credential(username, password)\n\t\n    hash = hashlib.sha1()\n    hash.update(username + \\\":\\\" + password)\n    return username + \\\":\\\" + b64encode(hash.digest())\n\n", "CodeBleu_score": 13.997157779624139}, {"code": "def make_digest_acl_credential(username, password)\n\t\n    return \\\"%s:%s\\\" % (username, b64encode(hashlib.sha1(password).digest()).decode(\\\"utf-8\\\"))\n\n", "CodeBleu_score": 8.077464260111642}, {"code": "def make_digest_acl_credential(username, password)\n\t\n    hash = hashlib.sha1(password.encode()).digest()\n    return \\\"{username}:{base64_hash}\\\".format(\n        username=username,\n        base64_hash=b64encode(hash).decode()\n    )\n\n", "CodeBleu_score": 16.643543195225753}]}
{"instance_id": "4a062391deb0", "generation_result": [{"code": "def holds_lock(self)\n\t\n    if self.processing_element is None:\n            return False\n        lock_path = self.processing_element[0]\n        lock_data, lock_stat = self.client.get(lock_path)\n        return lock_data == self.id\n\n    def consume(self):\n        \\\"\\\"\\\"Consumes the current entry.\\\"\\\"\\\"\n        if self.processing_element is None:\n            raise ValueError(\\\"No entry is being processed\\\")\n        self.client.delete(self.processing_element[0])\n        self.processing_element = None\n\n    def _inner_get(self, timeout):\n        if timeout is not None:\n            timeout = timeout + time.time()\n\n        while True:\n            self._ensure_paths()\n            self.processing_element = self.client.retry(\n                self._get_next_entry, timeout=timeout\n            )\n            if self.processing_element is None:\n                return None\n            if self.holds_lock():\n                break\n            self.processing_element = None\n        return self.processing_element[1]\n\n    def _get_next_entry(self):\n        entries = self.client.get_children(self._entries_path)\n        if not entries:\n            return None\n        entry_path = self._entries_path + \\\"/\\\" + entries[0]\n        data, stat = self.client.get(entry_path)\n        self.client.create(self._lock_path, self.id, ephemeral=True)\n        return (self._lock_path, data)\n\n    def _ensure_paths(self):\n        if not self.client.exists(self.path):\n            self.client.ensure_path(self.path)\n        for path in self.structure_paths:\n            if not self.client.exists(path):\n                self.client.ensure_path(path)\n\n    def _check_put_arguments(self, value, priority):\n        if not isinstance(value, bytes):\n            raise TypeError(\\\"value must be a byte", "CodeBleu_score": 40.349416330353804}, {"code": "def holds_lock(self)\n\t\n    if self.processing_element is None:\n        return False\n    lock_path = self.path + self.lock\n    self.client.sync(lock_path)\n    lock_value = self.client.get(lock_path)[0]\n    return lock_value == self.id\n\n", "CodeBleu_score": 43.92204379002927}, {"code": "def holds_lock(self)\n\t\n    if self.processing_element is None:\n        return False\n    else:\n        lock_path = self.processing_element[0]\n        with self.client.sync_context() as sync_context:\n            lock_value = sync_context.get(lock_path)[0]\n            return lock_value == self.id\n\n", "CodeBleu_score": 41.68878279783471}]}
{"instance_id": "aaac7523d2b5", "generation_result": [{"code": "def consume(self)\n\t\n    if self.processing_element is None:\n        return False\n    lock_id, entry_name = self.processing_element\n    lock_path = \\\"{path}/{id}\\\".format(path=self._lock_path, id=lock_id)\n    entries_path = self.path + self.entries\n    with self.client.transaction() as transaction:\n        transaction.delete(lock_path)\n        transaction.delete(entries_path + \\\"/\\\" + entry_name)\n        transaction.delete(self.path + \\\"/\\\" + entry_name)\n    self.processing_element = None\n    return True\n\n", "CodeBleu_score": 54.63061565728267}, {"code": "def consume(self)\n\t\n    if self.processing_element is None:\n        return False\n    lock_id, entry_name = self.processing_element\n    lock_path = \\\"{path}/{id}\\\".format(path=self._lock_path, id=lock_id)\n        entries_path = self.path + self.entries\n        entry_path = entries_path + \\\"/\\\" + entry_name\n        with self.client.transaction() as transaction:\n            transaction.delete(lock_path)\n            transaction.delete(entry_path)\n        self.processing_element = None\n        return True\n\n", "CodeBleu_score": 55.81851001886413}, {"code": "def consume(self)\n\t\n    if self.processing_element is None:\n            return False\n        lock_id, entry_name = self.processing_element\n        lock_path = \\\"{path}/{id}\\\".format(path=self._lock_path, id=lock_id)\n        entry_path = \\\"{path}/{name}\\\".format(path=self._entries_path, name=entry_name)\n        with self.client.transaction() as transaction:\n            transaction.delete(lock_path)\n            transaction.delete(entry_path)\n        self.processing_element = None\n        return True\n\n", "CodeBleu_score": 58.413668241533486}]}
{"instance_id": "bed0c998ac4c", "generation_result": [{"code": "def _read_socket(self, read_timeout)\n\t\n    client = self.client\n    if client._stopped.is_set():\n        raise ConnectionDropped(\\\"client stopped\\\")\n    if self._socket.fileno() == -1:\n        raise ConnectionDropped(\\\"socket connection broken\\\")\n    if self._socket.closed:\n        raise ConnectionDropped(\\\"socket connection closed\\\")\n    try:\n        header, buffer, offset = self._read_header(read_timeout)\n    except (ConnectionDropped, socket.timeout, socket.error) as exc:\n        raise ConnectionDropped(\\\"read error\\\") from exc\n    if header.xid == PING_XID:\n            self.logger.debug(\\\"Received ping\\\")\n            client._outstanding_ping = False\n        elif header.xid == AUTH_XID:\n            if header.zxid > 0:\n                client.last_zxid = header.zxid\n            if header.err:\n                callback_exception = EXCEPTIONS[header.err]()\n                self.logger.debug(\n                    \\\"Received error(xid=%s) %r\\\",\n                    header.xid,\n                    callback_exception,\n                )\n                raise callback_exception\n        elif header.xid == WATCH_XID:\n            self._read_watch_event(buffer, offset)\n        else:\n            self.logger.debug(\\\"Received response(xid=%s): %r\\\", header.xid, header)\n            self._read_response(header, buffer, offset)\n\n    except ConnectionDropped as exc:\n        raise exc\n    except Exception as exc:\n        self.logger.exception(\\\"Exception raised during processing of response\\\")\n        raise ConnectionDropped(\\\"unknown error\\\") from exc\n\n", "CodeBleu_score": 45.145016447193264}, {"code": "def _read_socket(self, read_timeout)\n\t\n    header, buffer, offset = self._read_header(read_timeout)\n    if header.xid == PING_XID:\n            self.logger.log(BLATHER, \\\"Received ping\\\")\n            self.outstanding_ping = False\n        elif header.xid == AUTH_XID:\n            if header.zxid > 0:\n                self.last_zxid = header.zxid\n            if header.err:\n                callback_exception = EXCEPTIONS[header.err]()\n                self.logger.debug(\n                    \\\"Received error(xid=%s) %r\\\", header.xid, callback_exception\n                )\n                raise callback_exception\n            self.logger.log(BLATHER, \\\"Read auth response\\\")\n            self.authenticated = True\n        elif header.xid == WATCH_XID:\n            self._read_watch_event(buffer, offset)\n        else:\n            self.logger.log(BLATHER, \\\"Received response(xid=%s)\\\", header.xid)\n            self._read_response(header, buffer, offset)\n\n\n", "CodeBleu_score": 47.664906771144445}, {"code": "def _read_socket(self, read_timeout)\n\t\n    # Read the header\n        header, buffer, offset = self._read_header(read_timeout)\n        if header.xid == PING_XID:\n            self.logger.debug(\\\"Received ping\\\")\n            self._outstanding_ping = False\n            return\n        if header.xid == AUTH_XID:\n            if header.err:\n                callback_exception = EXCEPTIONS[header.err]()\n                self.logger.debug(\n                    \\\"Received error(xid=%s) %r\\\", header.xid, callback_exception\n                )\n                raise callback_exception\n            self.logger.debug(\\\"Received auth response\\\")\n            self._authenticated = True\n            return\n        if header.xid == WATCH_XID:\n            self._read_watch_event(buffer, offset)\n            return\n        if header.xid:\n            self.logger.debug(\\\"Received response(xid=%s): %s\\\", header.xid, header)\n        return self._read_response(header, buffer, offset)\n\n    def _read_header(self, timeout):\n        \\\"\\\"\\\"Read a header from the socket with a timeout value\\\"\\\"\\\"\n        client = self.client\n        # Read the length of the message\n        msg = self._read(4, timeout)\n        length = int_struct.unpack(msg)[0]\n        # Read the message itself\n        msg = self._read(length, timeout)\n        # Deserialize the header\n        header, offset = Header.deserialize(msg, 0)\n        # Read the buffer\n        buffer = msg[offset:]\n        return header, buffer, offset\n\n    def _read(self, length, timeout):\n        \\\"\\\"\\\"Read a raw message from the socket\\\"\\\"\\\"\n        client = self.client\n        buffer = bytearray()\n        with self._socket_error_handling():\n            while len(buffer) < length:\n                s = self.handler.select([self._socket], [], [], timeout)[0]\n                if not s:  # pragma: nocover\\", "CodeBleu_score": 42.559579483731504}]}
{"instance_id": "b10e2c2c410b", "generation_result": [{"code": "def zk_loop(self)\n\t\n    self.logger.log(BLATHER, \\\"Starting zk_loop\\\")\n    self.connection_stopped.clear()\n    while not self._stopped.is_set():\n        try:\n            self._connect(self.connect_timeout)\n        except Exception as exc:\n            self.logger.exception(\\\"Exception raised during connection: %s\\\", exc)\n            self._session_callback(KeeperState.CLOSED)\n            self._stopped.set()\n            self.connection_stopped.set()\n            self.logger.log(BLATHER, \\\"Connection stopped\\\")\n            return\n        self._session_callback(KeeperState.CONNECTED)\n        self.connection_stopped.set()\n        self.logger.log(BLATHER, \\\"Connection stopped\\\")\n\n    self._session_callback(KeeperState.CLOSED)\n    self.connection_stopped.set()\n    self.logger.log(BLATHER, \\\"Connection stopped\\\")\n\n    return\n\n", "CodeBleu_score": 44.15644257636529}, {"code": "def zk_loop(self)\n\t\n    self.logger.log(BLATHER, \\\"Starting Zookeeper loop\\\")\n    self.connection_stopped.clear()\n    while not self._stopped.is_set():\n        try:\n            self._connect()\n        except Exception:\n            self.logger.exception(\\\"Failed to connect to Zookeeper\\\")\n            self._session_callback(KeeperState.CLOSED)\n            self.connection_stopped.set()\n            return\n        self._session_callback(KeeperState.CONNECTED)\n        self.connection_stopped.set()\n        self.logger.log(BLATHER, \\\"Connection closed\\\")\n        self._session_callback(KeeperState.CLOSED)\n\n    self.logger.log(BLATHER, \\\"Stopping Zookeeper loop\\\")\n    self.connection_stopped.set()\n\n", "CodeBleu_score": 44.27555798601873}, {"code": "def zk_loop(self)\n\t\n    self.logger.log(BLATHER, \\\"Starting ZK Loop\\\")\n    self.connection_stopped.clear()\n    while not self._stopped.is_set():\n        try:\n            self._connect()\n            self._session_callback(KeeperState.CONNECTED)\n            self._zk_loop()\n        except SessionExpiredError:\n            self.logger.debug(\\\"Session expired, reconnecting\\\")\n        except ConnectionDropped as exc:\n            self.logger.debug(\\\"Connection dropped, reconnecting\\\")\n        except Exception as exc:\n            self.logger.exception(\\\"Exception in ZK loop\\\")\n            self.logger.debug(\\\"Exception: %r\\\", exc)\n            self.connection_stopped.set()\n            self._session_callback(KeeperState.CLOSED)\n            self.logger.log(BLATHER, \\\"Stopping ZK Loop\\\")\n            return\n", "CodeBleu_score": 44.638277986846425}]}
{"instance_id": "42b3d26a3540", "generation_result": [{"code": "def _partitioner(self, identifier, members, partitions)\n\t\n    members.sort()\n    partitions.sort()\n    idx = members.index(identifier)\n    return partitions[idx::len(members)]\n\n", "CodeBleu_score": 33.50856907528368}, {"code": "def _partitioner(self, identifier, members, partitions)\n\t\n    partitions.sort()\n    members.sort()\n    idx = members.index(identifier)\n    return partitions[idx::len(members)]\n\n", "CodeBleu_score": 33.50856907528368}, {"code": "def _partitioner(self, identifier, members, partitions)\n\t\n    members.sort()\n    partitions.sort()\n    idx = members.index(identifier)\n    return partitions[idx::len(members)]\n\n", "CodeBleu_score": 33.50856907528368}]}
{"instance_id": "738974d4e9c0", "generation_result": [{"code": "def leave(self)\n\t\n    try:\n        self.client.retry(self._inner_leave)\n        self.participating = False\n    except KazooException:\n        # We failed to leave, best effort cleanup\n        self._best_effort_cleanup()\n        self.participating = True\n\n", "CodeBleu_score": 61.22403003137923}, {"code": "def leave(self)\n\t\n    try:\n        self.client.retry(self._inner_leave)\n        self.participating = False\n    except KazooException:\n        # We failed to leave, best effort cleanup\n        self._best_effort_cleanup()\n        self.participating = False\n", "CodeBleu_score": 62.72456090587766}, {"code": "def leave(self)\n\t\n    try:\n        self.client.retry(self._inner_leave)\n        self.participating = False\n    except KazooException:\n        # We failed to leave, best effort cleanup\n        self._best_effort_cleanup()\n        self.participating = False\n\n", "CodeBleu_score": 62.72456090587766}]}
{"instance_id": "a321fef7d100", "generation_result": [{"code": "public Result start(){\n\t    Map map = new HashMap<>();\n    try {\n        boolean status = hdfsOverFtpServer.statusServer();\n        if (!status) {\n            hdfsOverFtpServer.startServer();\n            map.put(\"is_running\", true);\n            return new Result(true, map, \"FTP \u670d\u52a1\u542f\u52a8\u6210\u529f\");\n        } else {\n            map.put(\"is_running\", true);\n            return new Result(true, map, \"FTP \u670d\u52a1\u5df2\u542f\u52a8\");\n        }\n    } catch (Exception e) {\n        log.error(e);\n        map.put(\"is_running\", false);\n        return new Result(false, map, \"FTP \u670d\u52a1\u542f\u52a8\u5931\u8d25\");\n    }\n}", "CodeBleu_score": 50.080736997529904}, {"code": "public Result start(){\n\t    Map map = new HashMap<>();\n    try {\n        boolean status = hdfsOverFtpServer.statusServer();\n        if (!status) {\n            hdfsOverFtpServer.startServer();\n            map.put(\\\"is_running\\\", true);\n            return new Result(true, map, \\\"FTP \u670d\u52a1\u542f\u52a8\u6210\u529f\\\");\n        }\n        map.put(\\\"is_running\\\", true);\n        return new Result(true, map, \\\"FTP \u670d\u52a1\u5df2\u542f\u52a8\\\");\n    } catch (Exception e) {\n        log.error(e);\n        map.put(\\\"is_running\\\", false);\n        return new Result(false, map, \\\"FTP \u670d\u52a1\u542f\u52a8\u5931\u8d25\\\");\n    }\n}", "CodeBleu_score": 42.868851639381425}, {"code": "public Result start(){\n\t    Map map = new HashMap<>();\n    try {\n        boolean status = hdfsOverFtpServer.startServer();\n        map.put(\"is_running\", status);\n        return new Result(true, map, \"FTP \u670d\u52a1\u542f\u52a8\u6210\u529f\");\n    } catch (Exception e) {\n        log.error(e);\n        map.put(\"is_running\", false);\n        return new Result(false, map, \"FTP \u670d\u52a1\u542f\u52a8\u5931\u8d25\");\n    }\n}", "CodeBleu_score": 51.081726741241205}]}
{"instance_id": "24b088689114", "generation_result": [{"code": "public Result stop(){\n\t    try {\n        boolean status = hdfsOverFtpServer.statusServer();\n        if (status) {\n            hdfsOverFtpServer.stopServer();\n        }\n        return new Result(true, \"FTP \u670d\u52a1\u505c\u6b62\u6210\u529f\");\n    } catch (Exception e) {\n        log.error(e);\n        return new Result(false, \"FTP \u670d\u52a1\u505c\u6b62\u5931\u8d25\");\n    }\n}", "CodeBleu_score": 91.9278134994998}, {"code": "public Result stop(){\n\t    try {\n        boolean status = hdfsOverFtpServer.statusServer();\n        if (status) {\n            hdfsOverFtpServer.stopServer();\n            return new Result(true, \"FTP \u670d\u52a1\u505c\u6b62\u6210\u529f\");\n        }\n        return new Result(true, \"FTP \u670d\u52a1\u672a\u8fd0\u884c\");\n    } catch (Exception e) {\n        log.error(e);\n        return new Result(false, \"FTP \u670d\u52a1\u505c\u6b62\u5931\u8d25\");\n    }\n}", "CodeBleu_score": 83.97210176804263}, {"code": "public Result stop(){\n\t    try {\n        boolean status = hdfsOverFtpServer.statusServer();\n        if(status) {\n            hdfsOverFtpServer.stopServer();\n        }\n        return new Result(true, \"FTP \u670d\u52a1\u505c\u6b62\u6210\u529f\");\n    }catch (Exception e) {\n        log.error(e);\n        return new Result(false, \"FTP \u670d\u52a1\u505c\u6b62\u5931\u8d25\");\n    }\n}", "CodeBleu_score": 97.29754649449434}]}
{"instance_id": "af0884ffda66", "generation_result": [{"code": "public AuthorizationRequest authorize(AuthorizationRequest request){\n\t    if (authorities == null) {\n        return null;\n    }\n    for (Authority authority : authorities) {\n        if (authority.canAuthorize(request)) {\n            request = authority.authorize(request);\n            if (request == null) {\n                return null;\n            }\n        }\n    }\n    return request;\n}", "CodeBleu_score": 46.81522511213571}, {"code": "public AuthorizationRequest authorize(AuthorizationRequest request){\n\t    if (authorities == null) {\n        return null;\n    }\n\n    for (Authority authority : authorities) {\n        if (authority.canAuthorize(request)) {\n            request = authority.authorize(request);\n            if (request == null) {\n                return null;\n            }\n        }\n    }\n    return request;\n}", "CodeBleu_score": 46.81522511213571}, {"code": "public AuthorizationRequest authorize(AuthorizationRequest request){\n\t  if (authorities == null) {\n    return null;\n  }\n  for (Authority authority : authorities) {\n    request = authority.authorize(request);\n    if (request == null) {\n      return null;\n    }\n  }\n  return request;\n}", "CodeBleu_score": 37.3837604630876}]}
{"instance_id": "920d28a0fe76", "generation_result": [{"code": "public boolean mkdir(){\n\t    try {\n        FileSystem dfs = HdfsOverFtpSystem.getDfs();\n        dfs.mkdirs(fullPath);\n        return true;\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 87.40352044915173}, {"code": "public boolean mkdir(){\n\t    try {\n        FileSystem dfs = HdfsOverFtpSystem.getDfs();\n        dfs.mkdirs(fullPath);\n        return true;\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 87.40352044915173}, {"code": "public boolean mkdir(){\n\t    try {\n        FileSystem dfs = HdfsOverFtpSystem.getDfs();\n        dfs.mkdirs(fullPath);\n        return true;\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 87.40352044915173}]}
{"instance_id": "a2b04232d387", "generation_result": [{"code": "public boolean delete(){\n\t    try {\n        FileSystem fs = HdfsOverFtpSystem.getDfs();\n        fs.delete(fullPath, true);\n        return true;\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 88.12709413650218}, {"code": "public boolean delete(){\n\t\ttry {\n\t\tFileSystem fs = HdfsOverFtpSystem.getDfs();\n\t\tfs.delete(fullPath, true);\n\t\treturn true;\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 89.40143081256369}, {"code": "public boolean delete(){\n\t    try {\n        FileSystem fs = HdfsOverFtpSystem.getDfs();\n        fs.delete(fullPath, true);\n        return true;\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 88.12709413650218}]}
{"instance_id": "3407087c9af6", "generation_result": [{"code": "public boolean move(FtpFile ftpFile){\n\t\ttry {\n\t\tFileSystem dfs = HdfsOverFtpSystem.getDfs();\n\t\tPath newPath = new Path(homePath + path.getParent() + \\\"/\\\" + ftpFile.getName());\n\t\tdfs.rename(fullPath, newPath);\n\t\tfullPath = newPath;\n\t\treturn true;\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 56.81607763790099}, {"code": "public boolean move(FtpFile ftpFile){\n\t    try {\n        FileSystem dfs = HdfsOverFtpSystem.getDfs();\n        Path newPath = new Path(ftpFile.getAbsolutePath());\n        dfs.rename(fullPath, newPath);\n        return true;\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 64.48085081309138}, {"code": "public boolean move(FtpFile ftpFile){\n\t\ttry {\n\t\tFileSystem dfs = HdfsOverFtpSystem.getDfs();\n\t\tPath newPath = new Path(ftpFile.getParent().getAbsolutePath() + \"/\" + ftpFile.getName());\n\t\tdfs.rename(fullPath, newPath);\n\t\treturn true;\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 62.824355119417106}]}
{"instance_id": "91227000a139", "generation_result": [{"code": "public List<FtpFile> listFiles(){\n\t    try {\n        FileSystem dfs = HdfsOverFtpSystem.getDfs();\n        FileStatus[] fs = dfs.listStatus(fullPath);\n        List<FtpFile> files = new ArrayList<FtpFile>();\n        for (FileStatus f : fs) {\n            String path = f.getPath().toString();\n            String name = path.substring(homePath.toString().length());\n            HdfsFileObject file = new HdfsFileObject(homePath.toString(), name, user);\n            files.add(new FtpFile(file));\n        }\n        return Collections.unmodifiableList(files);\n    } catch (IOException e) {\n        log.error(\"listFiles(): \" + fullPath, e);\n        return null;\n    }\n}", "CodeBleu_score": 40.254981356533456}, {"code": "public List<FtpFile> listFiles(){\n\t  try {\n    FileSystem dfs = HdfsOverFtpSystem.getDfs();\n    FileStatus[] status = dfs.listStatus(fullPath);\n    List<FtpFile> files = new ArrayList<FtpFile>();\n    for (FileStatus fs : status) {\n      String name = path.toString() + File.separator + fs.getPath().getName();\n      FtpFile f = new FtpFile(homePath, name, user);\n      files.add(f);\n    }\n    return Collections.unmodifiableList(files);\n  } catch (IOException e) {\n    log.debug(e.getMessage(), e);\n    return null;\n  }\n}", "CodeBleu_score": 37.276350398560126}, {"code": "public List<FtpFile> listFiles(){\n\t\ttry {\n\t\t\tFileSystem dfs = HdfsOverFtpSystem.getDfs();\n\t\t\tFileStatus[] status = dfs.listStatus(fullPath);\n\t\t\tFtpFile[] files = new FtpFile[status.length];\n\t\t\tfor (int i = 0; i < status.length; i++) {\n\t\t\t\tfiles[i] = new HdfsFileObject(homePath.toString(), status[i].getPath().getName(), user);\n\t\t\t}\n\t\t\treturn Arrays.asList(files);\n\t\t} catch (IOException e) {\n\t\t\tlog.debug(\\\"IOException in listFiles()\\\", e);\n\t\t\treturn null;\n\t\t}\n\t}", "CodeBleu_score": 40.162103069198366}]}
{"instance_id": "aec4623134b5", "generation_result": [{"code": "public void configure(){\n\t  if (isConfigured) {\n    return;\n  }\n  isConfigured = true;\n  try {\n\n\t\t\tuserDataProp = new BaseProperties();\n\n\t\t\tif (userDataFile.exists()) {\n\t\t\t\tuserDataProp.load(new FileInputStream(userDataFile));\n\n\t\t\t\tconvertDeprecatedProperties();\n\n\t\t\t} else {\n\t\t\t\tuserDataProp.setProperty(\\\"anonymous.enabled\\\", \\\"true\\\");\n\t\t\t\tuserDataProp.setProperty(\\\"anonymous.home\\\", \\\"/\\\");\n\t\t\t\tuserDataProp.setProperty(\\\"anonymous.umask\\\", \\\"022\\\");\n\t\t\t\tuserDataProp.setProperty(\\\"anonymous.maxIdleTime\\\", \\\"10\\\");\n\t\t\t\tuserDataProp.setProperty(\\\"anonymous.writePermission\\\", \\\"false\\\");\n\t\t\t\tuserDataProp.setProperty(\\\"anonymous.idleTimeout\\\", \\\"30\\\");\n\t\t\t\tuserDataProp.setProperty(\\\"anonymous.canonicalizePath\\\", \\\"false\\\");\n\n\t\t\t\tuserDataProp.setProperty(\\\"admin.enabled\\\", \\\"true\\\");\n\t\t\t\tuserDataProp.setProperty(\\\"admin.home\\\", \\\"/\\\");\n\t\t\t\tuserDataProp.setProperty(\\\"admin.umask\\\", \\\"022\\\");\n\t\t\t\tuserDataProp.setProperty(\\\"admin.maxIdleTime\\\", \\\"10\\\");\n\t\t\t\tuserDataProp.setProperty(\\\"admin.writePermission\\\", \\\"true\\\");\n\t\t\t\tuserDataProp.setProperty(\\\"admin.idleTimeout\\\", \\\"30\\\");\n\t\t\t\tuserDataProp.setProperty(\\\"admin.canonicalizePath\\\", \\\"false\\\");\n\t\t\t}\n\n\t\t} catch (IOException e) {\n\t\t\tthrow new FtpServerConfigurationException(\\\"Unable to load users from \\\" + userDataFile.getAbsolutePath() + \\\"\\\", e);\n\t\t}\n\t}", "CodeBleu_score": 34.162800869654546}, {"code": "public void configure(){\n\t    try {\n\t\t\tisConfigured = true;\n\n\t\t\tuserDataProp = new BaseProperties();\n\n\t\t\tif (userDataFile.exists()) {\n\t\t\t\tuserDataProp.load(new FileInputStream(userDataFile));\n\t\t\t}\n\n\t\t\tconvertDeprecatedProperties();\n\n\t\t} catch (IOException e) {\n\t\t\tthrow new FtpServerConfigurationException(\\\"Unable to load user data file: \\\" + userDataFile.getAbsolutePath(), e);\n\t\t}\n\t}", "CodeBleu_score": 43.60310756708459}, {"code": "public void configure(){\n\t    if (isConfigured) {\n        return;\n    }\n    isConfigured = true;\n    userDataProp = new BaseProperties();\n    if (userDataFile.exists()) {\n        try {\n            userDataProp.load(new FileInputStream(userDataFile));\n        } catch (IOException e) {\n            throw new FtpServerConfigurationException(\\\"Failed to load user data from \\\" + userDataFile.getAbsolutePath(), e);\n        }\n    }\n    convertDeprecatedProperties();\n}", "CodeBleu_score": 44.63425770222542}]}
{"instance_id": "b5a2587f14d0", "generation_result": [{"code": "private void saveUserData() throws FtpException{\n\t", "CodeBleu_score": 1.2301868542673244}, {"code": "private void saveUserData() throws FtpException{\n\t    File parentFile = userDataFile.getParentFile();\n    if (parentFile != null && !parentFile.exists() && !parentFile.mkdirs()) {\n        throw new FtpServerConfigurationException(\\\"Error creating parent directory for user data file : \\\"\n                + userDataFile.getAbsolutePath());\n    }\n\n    FileOutputStream fos = null;\n    try {\n        fos = new FileOutputStream(userDataFile);\n        userDataProp.store(fos, null);\n    } catch (IOException e) {\n        LOG.error(\\\"Error saving user data file : \\\" + userDataFile.getAbsolutePath(), e);\n        throw new FtpException(\\\"Error saving user data file : \\\"\n                + userDataFile.getAbsolutePath(), e);\n    } finally {\n        IoUtils.close(fos);\n    }\n}", "CodeBleu_score": 38.69348179939313}, {"code": "private void saveUserData() throws FtpException{\n\t    File parentFile = userDataFile.getParentFile();\n    if (parentFile != null && !parentFile.exists()) {\n        if (!parentFile.mkdirs()) {\n            throw new FtpServerConfigurationException(\\\"Failed to create user data file parent directory\\\");\n        }\n    }\n    FileOutputStream fos = null;\n    try {\n        fos = new FileOutputStream(userDataFile);\n        userDataProp.store(fos, \\\"\\\");\n    } catch (IOException e) {\n        LOG.error(\\\"Failed to save user data\\\", e);\n        throw new FtpException(\\\"Failed to save user data\\\", e);\n    } finally {\n        IoUtils.close(fos);\n    }\n}", "CodeBleu_score": 44.284341869665475}]}
{"instance_id": "5cf2989cf513", "generation_result": [{"code": "public Result delete(@PathVariable(value = \"user\") String user){\n\t    try {\n        HdfsUserManager userManagerFactory = new HdfsUserManager();\n        userManagerFactory.setFile(new File(System.getProperty(\"user.dir\") + File.separator + \"users.properties\"));\n        userManagerFactory.delete(user);\n        return new Result(true, \"\u5220\u9664\u7528\u6237\u6210\u529f\");\n    } catch (Exception e) {\n        log.error(e);\n        return new Result(false, \"\u5220\u9664\u7528\u6237\u5931\u8d25\");\n    }\n}", "CodeBleu_score": 82.52989637751922}, {"code": "public Result delete(@PathVariable(value = \"user\") String user){\n\t    try {\n        HdfsUserManager userManagerFactory = new HdfsUserManager();\n        userManagerFactory.setFile(new File(System.getProperty(\"user.dir\") + File.separator + \"users.properties\"));\n        userManagerFactory.delete(user);\n        return new Result(true, \"\u5220\u9664\u7528\u6237\u6210\u529f\");\n    } catch (Exception e) {\n        log.error(e);\n        return new Result(false, \"\u5220\u9664\u7528\u6237\u5931\u8d25\");\n    }\n}", "CodeBleu_score": 82.52989637751922}, {"code": "public Result delete(@PathVariable(value = \"user\") String user){\n\t    try {\n        HdfsUserManager userManagerFactory = new HdfsUserManager();\n        userManagerFactory.setFile(new File(System.getProperty(\"user.dir\") + File.separator + \"users.properties\"));\n        userManagerFactory.delete(user);\n        return new Result(true, \"\u5220\u9664\u7528\u6237\u6210\u529f\");\n    } catch (Exception e) {\n        log.error(e);\n        return new Result(false, \"\u5220\u9664\u7528\u6237\u5931\u8d25\");\n    }\n}", "CodeBleu_score": 82.52989637751922}]}
{"instance_id": "ce383a9a6497", "generation_result": [{"code": "public FSDataInputStream open(Path path, int bufferSize) throws IOException{\n\t    LOG.info(\\\"Opening file \\\" + path.toString() + \\\" with buffer size \\\" + bufferSize);\n    Path qualifiedPath = qualify(path);\n    FSDataInputStream inputStream = seaweedFileSystemStore.open(qualifiedPath, bufferSize);\n    if (inputStream == null) {\n        LOG.warn(\\\"Failed to open file \\\" + path.toString() + \\\" with buffer size \\\" + bufferSize);\n    }\n    return inputStream;\n}", "CodeBleu_score": 17.002677753315705}, {"code": "public FSDataInputStream open(Path path, int bufferSize) throws IOException{\n\t    LOG.info(\\\"Opening file: \\\" + path.toString());\n    LOG.info(\\\"Buffer size: \\\" + bufferSize);\n\n    // qualify path\n        Path qualifiedPath = qualify(path);\n    Path qualifiedPath = path;\n\n    // attempt to open file using seaweed file system store\n        InputStream inputStream = seaweedFileSystemStore.open(qualifiedPath);\n    InputStream inputStream = seaweedFileSystemStore.open(qualifiedPath);\n\n    // create and return FSDataInputStream with buffered input stream\n        return new FSDataInputStream(inputStream, bufferSize);\n    return new FSDataInputStream(inputStream, bufferSize);\n}", "CodeBleu_score": 21.283353836881943}, {"code": "public FSDataInputStream open(Path path, int bufferSize) throws IOException{\n\t    LOG.debug(\\\"Opening file: \\\" + path);\n\n    // qualify the path\n        Path qualifiedPath = getQualifiedPath(path);\n    Path qualifiedPath = path;\n\n    // open the file using the seaweed file system store\n        InputStream inputStream =\n    seaweedFileSystemStore.open(qualifiedPath, bufferSize);\n\n    // create and return an FSDataInputStream with a buffered input stream\n        return new\n    FSDataInputStream(inputStream);\n}", "CodeBleu_score": 19.39452124443975}]}
{"instance_id": "f0fc12072c02", "generation_result": [{"code": "public boolean rename(Path src, Path dst) throws IOException{\n\t    LOG.debug(\\\"rename src: {} dst:{}\\\", src, dst);\n\n    src = qualify(src);\n    dst = qualify(dst);\n\n    if (src.equals(dst)) {\n        return true;\n    }\n\n    if (src.getName().equals(\\\"/\\\")) {\n        return false;\n    }\n\n    if (dst.getParent() != null && getFileStatus(dst.getParent()).isDirectory()) {\n        dst = new Path(dst.getParent(), src.getName());\n    }\n\n    try {\n        return seaweedFileSystemStore.rename(src, dst);\n    } catch (Exception ex) {\n        LOG.warn(\\\"rename src: {} dst:{}\\\", src, dst, ex);\n        return false;\n    }\n}", "CodeBleu_score": 49.763627303736016}, {"code": "public boolean rename(Path src, Path dst) throws IOException{\n\t    LOG.debug(\\\"rename src: {} dst:{}\\\", src, dst);\n\n    // log the rename operation\n\n    if (src.equals(getWorkingDirectory())) {\n        LOG.info(\\\"cannot rename working directory\\\");\n        return false;\n    }\n\n    if (src.equals(dst)) {\n        LOG.info(\\\"cannot rename to the same path\\\");\n        return true;\n    }\n\n    // look up the destination entry and adjust the destination path if the entry exists and is a directory\n    FileStatus dstStatus = getFileStatus(dst);\n    if (dstStatus != null && dstStatus.isDirectory()) {\n        dst = new Path(dst, src.getName());\n    }\n\n    // qualify both the source and adjusted destination paths\n    src = qualify(src);\n    dst = qualify(dst);\n\n    // perform the rename operation using the file system store\n    seaweedFileSystemStore.rename(src, dst);\n\n    return true;\n}", "CodeBleu_score": 48.61026226163821}, {"code": "public boolean rename(Path src, Path dst) throws IOException{\n\t    LOG.debug(\\\"rename src: {} dst: {}\\\", src, dst);\n\n    src = qualify(src);\n    dst = qualify(dst);\n\n    if (src.equals(dst)) {\n        return true;\n    }\n\n    if (src.isRoot()) {\n        return false;\n    }\n\n    if (dst.isRoot()) {\n        return false;\n    }\n\n    Path dstParent = dst.getParent();\n    if (dstParent != null) {\n        FileStatus dstParentStatus = getFileStatus(dstParent);\n        if (dstParentStatus.isDirectory()) {\n            dst = new Path(dstParent, src.getName());\n        }\n    }\n\n    try {\n        return seaweedFileSystemStore.rename(src, dst);\n    } catch (Exception ex) {\n        LOG.warn(\\\"rename src: {} dst: {}\\\", src, dst, ex);\n        return false;\n    }\n}", "CodeBleu_score": 59.55176114630309}]}
{"instance_id": "5104c071af46", "generation_result": [{"code": "public boolean hasCapability(String capability){\n\t    if (capability != null) {\n        String lcCap = capability.toLowerCase(Locale.ROOT);\n        if (lcCap.equals(\"hsync\")) {\n            return supportFlush;\n        }\n        if (lcCap.equals(\"hflush\")) {\n            return supportFlush;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 39.43245181884662}, {"code": "public boolean hasCapability(String capability){\n\t    if (capability.toLowerCase(Locale.ROOT).equals(\"hsync\")) {\n        return supportFlush;\n    } else if (capability.toLowerCase(Locale.ROOT).equals(\"hflush\")) {\n        return supportFlush;\n    }\n    return false;\n}", "CodeBleu_score": 35.73886177850768}, {"code": "public boolean hasCapability(String capability){\n\t  capability = capability.toLowerCase(Locale.ROOT);\n  if (capability.equals(\"hsync\")) {\n    return supportFlush;\n  }\n  if (capability.equals(\"hflush\")) {\n    return supportFlush;\n  }\n  return false;\n}", "CodeBleu_score": 38.906148189277246}]}
{"instance_id": "6989c860c79b", "generation_result": [{"code": "private synchronized void flushWrittenBytesToServiceInternal(final long offset) throws IOException{\n\t    if (offset > lastFlushOffset) {\n        if (shouldSaveMetadata) {\n            try {\n                filerClient.writeMetadata(entry.build(), path, replication, collection);\n            } catch (Exception e) {\n                throw new IOException(e);\n            }\n        }\n        lastFlushOffset = offset;\n    }\n}", "CodeBleu_score": 45.461154022294124}, {"code": "private synchronized void flushWrittenBytesToServiceInternal(final long offset) throws IOException{\n\t    if (offset > lastFlushOffset) {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\\\"Flushing written bytes to service starting from offset \\\" + offset);\n        }\n        try {\n            filerClient.write(path, buffer, offset, replication, collection);\n            lastFlushOffset = offset;\n        } catch (Exception e) {\n            throw new IOException(\\\"Failed to write to service\\\", e);\n        }\n    }\n}", "CodeBleu_score": 28.961581783843016}, {"code": "private synchronized void flushWrittenBytesToServiceInternal(final long offset) throws IOException{\n\t    if (offset <= lastFlushOffset) {\n            return;\n        }\n        if (offset > position) {\n            throw new IllegalArgumentException(\\\"offset must be less than or equal to current position\\\");\n        }\n\n        if (offset > 0) {\n            if (offset - lastFlushOffset > buffer.remaining()) {\n                flushWrittenBytesToServiceInternal(offset - buffer.remaining());\n            }\n        }\n\n        long startOffset = offset;\n        long endOffset = offset + buffer.position();\n        if (endOffset > lastTotalAppendOffset) {\n            lastTotalAppendOffset = endOffset;\n        }\n\n        if (offset == lastFlushOffset) {\n            return;\n        }\n\n        final ByteBuffer bufferToFlush = ByteBuffer.allocateDirect(endOffset - offset);\n        buffer.position((int) (offset - lastFlushOffset));\n        buffer.limit(buffer.position() + (int) (endOffset - offset));\n        bufferToFlush.put(buffer);\n        buffer.position(0);\n\n        try {\n            filerClient.append(path, bufferToFlush, startOffset, endOffset, replication, collection);\n        } catch (Exception e) {\n            throw new IOException(e);\n        }\n\n        lastFlushOffset = endOffset;\n    }", "CodeBleu_score": 36.29327980307357}]}
{"instance_id": "56e8fb9de5da", "generation_result": [{"code": "private synchronized int submitWriteBufferToService(final ByteBuffer bufferToWrite, final long writePosition) throws IOException {\n\t    if (writeOperations.size() >= maxConcurrentRequestCount) {\n            throw new IOException(\\\"Too many concurrent write operations\\\");\n        }\n\n        final ByteBuffer buffer = bufferToWrite.duplicate();\n        buffer.flip();\n        final int length = buffer.remaining();\n\n        if (length == 0) {\n            return 0;\n        }\n\n        final WriteOperation writeOperation = new WriteOperation(buffer, writePosition, length);\n\n        writeOperations.add(writeOperation);\n\n        threadExecutor.execute(() -> {\n            try {\n                completionService.submit(writeOperation);\n            } catch (Exception ex) {\n                LOG.error(\\\"Exception while submitting write operation\\\", ex);\n            }\n        });\n\n        return length;\n    }", "CodeBleu_score": 35.361478703771056}, {"code": "private synchronized int submitWriteBufferToService(final ByteBuffer bufferToWrite, final long writePosition) throws IOException {\n\t    if (closed) {\n            throw new IOException(\\\"Stream is closed!\\\");\n        }\n\n        if (bufferToWrite.position() == 0) {\n            return 0;\n        }\n\n        bufferToWrite.flip();\n        final int writeLength = bufferToWrite.remaining();\n\n        if (writeOperations.size() >= maxConcurrentRequestCount) {\n            waitForWriteOperationToComplete();\n        }\n\n        final WriteOperation writeOperation = new WriteOperation(writePosition, bufferToWrite, writeLength);\n        writeOperations.add(writeOperation);\n\n        threadExecutor.execute(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    completionService.submit(writeOperation);\n                } catch (Exception ex) {\n                    writeOperation.setError(ex);\n                }\n            }\n        });\n\n        return writeLength;\n    }", "CodeBleu_score": 33.55757603015821}, {"code": "private synchronized int submitWriteBufferToService(final ByteBuffer bufferToWrite, final long writePosition) throws IOException {\n\t    bufferToWrite.flip();\n    int bytesToWrite = bufferToWrite.limit();\n    if (writeOperations.size() >= maxConcurrentRequestCount) {\n            waitForSpaceInQueue();\n        }\n        WriteOperation writeOperation = new WriteOperation(writePosition, bytesToWrite, bufferToWrite);\n        writeOperations.add(writeOperation);\n\n        // System.out.println(path + \\\" write [\\\" + writePosition + \\\",\\\" + (writePosition + bytesToWrite) + \\\")\\\");\n\n        // Submit the write task to the completion service\n        completionService.submit(new WriteTask(writeOperation));\n\n        // Return the number of bytes written\n        return bytesToWrite;\n    }", "CodeBleu_score": 32.577654100098805}]}
{"instance_id": "bf27d955c38b", "generation_result": [{"code": "private void waitForTaskToComplete() throws IOException{\n\t    try {\n        Future<Void> job = completionService.take().get();\n        if (job != null) {\n            job.get();\n        }\n    } catch (InterruptedException e) {\n        throw new IOException(e);\n    } catch (ExecutionException e) {\n        throw new IOException(e);\n    }\n}", "CodeBleu_score": 35.888685206038915}, {"code": "private void waitForTaskToComplete() throws IOException{\n\t    try {\n        while (true) {\n            Future<Void> job = completionService.poll(1, TimeUnit.SECONDS);\n            if (job == null) {\n                return;\n            }\n            try {\n                job.get();\n            } catch (InterruptedException | ExecutionException e) {\n                throw new IOException(e);\n            }\n        }\n    } catch (InterruptedException e) {\n        throw new IOException(e);\n    }\n}", "CodeBleu_score": 32.765289418152825}, {"code": "private void waitForTaskToComplete() throws IOException{\n\t    while (true) {\n        try {\n            Future<Void> job = completionService.take().get();\n            if (job != null) {\n                return;\n            }\n        } catch (InterruptedException e) {\n            throw new IOException(e);\n        } catch (ExecutionException e) {\n            throw new IOException(e);\n        }\n    }\n}", "CodeBleu_score": 32.39937597521478}]}
{"instance_id": "5c7a311273ae", "generation_result": [{"code": "private synchronized void shrinkWriteOperationQueue() throws IOException{\n\t    try {\n        while (!writeOperations.isEmpty()) {\n            WriteOperation writeOperation = writeOperations.peek();\n            if (writeOperation.job.isDone()) {\n                writeOperations.poll();\n                position += writeOperation.length;\n\n                if (position > lastFlushOffset + bufferSize) {\n                    flushWrittenBytesToServiceInternal(position);\n                }\n            } else {\n                break;\n            }\n        }\n    } catch (Exception ex) {\n        throw new IOException(ex);\n    }\n}", "CodeBleu_score": 36.684023679573805}, {"code": "private synchronized void shrinkWriteOperationQueue() throws IOException{\n\t    try {\n        while (!writeOperations.isEmpty()) {\n            WriteOperation writeOperation = writeOperations.peek();\n            if (writeOperation.getJob().isDone()) {\n                writeOperations.remove();\n                position += writeOperation.getLength();\n                if (position > lastFlushOffset) {\n                    flushWrittenBytesToServiceInternal(position);\n                }\n            } else {\n                break;\n            }\n        }\n    } catch (InterruptedException e) {\n        lastError = (IOException) new InterruptedIOException(e.toString()).initCause(e);\n        throw lastError;\n    }\n}", "CodeBleu_score": 39.96523322596658}, {"code": "private synchronized void shrinkWriteOperationQueue() throws IOException{\n\t    maybeThrowLastError();\n\n    while (writeOperations.size() > 0) {\n        WriteOperation writeOperation = writeOperations.peek();\n        if (writeOperation.job.isDone()) {\n            writeOperations.remove();\n            position += writeOperation.length;\n            if (position > lastFlushOffset) {\n                flushWrittenBytesToServiceInternal(position);\n            }\n        } else {\n            break;\n        }\n    }\n}", "CodeBleu_score": 31.25738830078102}]}
{"instance_id": "d8f07e66f690", "generation_result": [{"code": "protected HdfsFileSystemView(User user){\n\t    if (user == null) {\n        throw new IllegalArgumentException(\\\"User must not be null\\\");\n    }\n    if (user.getHomeDirectory() == null) {\n        throw new IllegalArgumentException(\\\"User home directory must not be null\\\");\n    }\n    this.user = user;\n    this.homePath = user.getHomeDirectory();\n}", "CodeBleu_score": 58.56938130379723}, {"code": "protected HdfsFileSystemView(User user){\n\t    if (user == null) {\n        throw new IllegalArgumentException(\\\"User can not be null\\\");\n    }\n    if (user.getHomeDirectory() == null) {\n        throw new IllegalArgumentException(\\\"User home directory can not be null\\\");\n    }\n    this.homePath = user.getHomeDirectory();\n    this.user = user;\n}", "CodeBleu_score": 65.49013558058641}, {"code": "protected HdfsFileSystemView(User user){\n\t    if (user == null) {\n        throw new IllegalArgumentException(\\\"user is null\\\");\n    }\n    if (user.getHomeDirectory() == null) {\n        throw new IllegalArgumentException(\\\"user home directory is null\\\");\n    }\n    this.homePath = user.getHomeDirectory();\n    this.user = user;\n}", "CodeBleu_score": 73.31570018516445}]}
{"instance_id": "27807db0eb0f", "generation_result": [{"code": "public boolean changeWorkingDirectory(String dir){\n\t    if (dir == null) {\n        throw new IllegalArgumentException(\\\"dir can not be null\\\");\n    }\n    if (dir.startsWith(\\\"..\\\")) {\n        throw new IllegalArgumentException(\\\"Cannot change to parent directory\\\");\n    }\n    String newPath = dir;\n\n    if (!dir.startsWith(File.separator)) {\n        newPath = currPath + dir;\n    }\n\n    Path path = new Path(newPath);\n    HdfsFileObject fileObj = new HdfsFileObject(path, user);\n\n    if (fileObj.isDirectory()) {\n        currPath = fileObj.getAbsolutePath();\n        return true;\n    }\n\n    return false;\n}", "CodeBleu_score": 33.08144534272492}, {"code": "public boolean changeWorkingDirectory(String dir){\n\t\tif (dir.equals(File.separator)) {\n\t\tcurrPath = File.separator;\n\t\treturn true;\n\t}\n\tif (dir.startsWith(File.separator)) {\n\t\tPath newPath = new Path(homePath + dir);\n\t\tif (newPath.toUri().getPath().equals(homePath)) {\n\t\t\tcurrPath = File.separator;\n\t\t\treturn true;\n\t\t}\n\t\tcurrPath = dir;\n\t\treturn true;\n\t} else {\n\t\tPath newPath = new Path(homePath + currPath + dir);\n\t\tif (newPath.toUri().getPath().equals(homePath)) {\n\t\t\tcurrPath = File.separator;\n\t\t\treturn true;\n\t\t}\n\t\tcurrPath = currPath + dir;\n\t\treturn true;\n\t}\n}", "CodeBleu_score": 29.699860290350937}, {"code": "public boolean changeWorkingDirectory(String dir){\n\t    // Get the absolute path of the directory\n    Path path = new Path(dir);\n    // Check if the path is absolute\n    if (!path.isAbsolute()) {\n        // If the path is relative, append it to the current path\n        path = new Path(currPath, path);\n    }\n    // Check if the new path is a directory\n    if (path.isDirectory()) {\n        // If the new path is a directory, update the current path and return true\n        currPath = path.toString();\n        return true;\n    } else {\n        // If the new path is not a directory, return false\n        return false;\n    }\n}", "CodeBleu_score": 23.824792708448605}]}
{"instance_id": "be7aba23d184", "generation_result": [{"code": "public SeaweedFileSystemStore(String host, int port, int grpcPort, Configuration conf){\n\t    this.conf = conf;\n    String accessMode = conf.get(ACCESS_MODE);\n    if (accessMode == null || accessMode.isEmpty()) {\n        accessMode = \"direct\";\n    }\n    switch (accessMode) {\n        case \"direct\":\n            this.filerClient = new FilerClient(host, port, grpcPort);\n            break;\n        case \"publicUrl\":\n            this.filerClient = new FilerClient(conf.get(PUBLIC_URL));\n            break;\n        case \"filerProxy\":\n            this.filerClient = new FilerClient(conf.get(FILER_PROXY_URL));\n            break;\n        default:\n            throw new IllegalArgumentException(\"Invalid access mode: \" + accessMode);\n    }\n}", "CodeBleu_score": 45.71521312429253}, {"code": "public SeaweedFileSystemStore(String host, int port, int grpcPort, Configuration conf){\n\t    this.conf = conf;\n    filerClient = new FilerClient(host, port, grpcPort);\n    filerClient.setAccessMode(conf.get(\"seaweedfs.accessMode\"));\n}", "CodeBleu_score": 33.49198265686514}, {"code": "public SeaweedFileSystemStore(String host, int port, int grpcPort, Configuration conf){\n\t    this.conf = conf;\n    String accessMode = conf.get(ACCESS_MODE);\n    if (accessMode == null) {\n        accessMode = \"direct\";\n    }\n    if (accessMode.equals(\"direct\")) {\n        filerClient = new FilerClient(host, port, grpcPort);\n    } else if (accessMode.equals(\"publicUrl\")) {\n        String publicUrl = conf.get(PUBLIC_URL);\n        if (publicUrl == null) {\n            throw new IllegalArgumentException(\"publicUrl is required when accessMode is publicUrl\");\n        }\n        filerClient = new FilerClient(publicUrl);\n    } else if (accessMode.equals(\"filerProxy\")) {\n        String filerProxy = conf.get(FILER_PROXY);\n        if (filerProxy == null) {\n            throw new IllegalArgumentException(\"filerProxy is required when accessMode is filerProxy\");\n        }\n        filerClient = new FilerClient(filerProxy);\n    } else {\n        throw new IllegalArgumentException(\"Unknown accessMode: \" + accessMode);\n    }\n}", "CodeBleu_score": 50.539116394471925}]}
{"instance_id": "7943a1723c23", "generation_result": [{"code": "public FSInputStream openFileForRead(final Path path, FileSystem.Statistics statistics) throws IOException{\n\t    LOG.debug(\\\"openFileForRead path: {}\\\", path);\n\n    FilerProto.Entry entry = lookupEntry(path);\n    if (entry == null) {\n            throw new FileNotFoundException(\\\"File does not exist: \\\" + path);\n        }\n        LOG.debug(\\\"openFileForRead path:{} entry:{}\\\", path, entry);\n\n    return new SeaweedHadoopInputStream(filerClient, path.toString(), entry, statistics);\n}", "CodeBleu_score": 66.59092661461882}, {"code": "public FSInputStream openFileForRead(final Path path, FileSystem.Statistics statistics) throws IOException{\n\t    LOG.debug(\\\"openFileForRead path: {}\\\", path);\n\n    FilerProto.Entry entry = lookupEntry(path);\n    if (entry == null) {\n            throw new FileNotFoundException(\\\"File does not exist: \\\" + path);\n        }\n\n\n    return new SeaweedHadoopInputStream(filerClient, path.toString(), entry, statistics);\n}", "CodeBleu_score": 70.1054758491687}, {"code": "public FSInputStream openFileForRead(final Path path, FileSystem.Statistics statistics) throws IOException{\n\t    LOG.debug(\\\"openFileForRead path: {}\\\", path);\n    FilerProto.Entry entry = lookupEntry(path);\n    if (entry == null) {\n            throw new FileNotFoundException(\\\"File does not exist: \\\" + path);\n        }\n        LOG.debug(\\\"openFileForRead path:{} entry:{}\\\", path, entry);\n\n    return new SeaweedHadoopInputStream(filerClient, entry, statistics);\n}", "CodeBleu_score": 67.1865512298397}]}
{"instance_id": "36634cee9ed3", "generation_result": [{"code": "public void configure(JobConf conf){\n\t    super.configure(conf);\n    try {\n      hostName = InetAddress.getLocalHost().getHostName();\n    } catch (Exception e) {\n      hostName = \\\"localhost\\\";\n    }\n    threadsPerMap = conf.getInt(\\\"io.juicefs.bench.threadsPerMap\\\", 1);\n    filesPerThread = conf.getInt(\\\"io.juicefs.bench.filesPerThread\\\", 1);\n    pool = Executors.newFixedThreadPool(threadsPerMap, r -> {\n      Thread t = new Thread(r);\n      t.setDaemon(true);\n      return t;\n    });\n  }", "CodeBleu_score": 49.80873693066474}, {"code": "public void configure(JobConf conf){\n\t    super.conf = conf;\n    try {\n      hostName = InetAddress.getLocalHost().getHostName();\n    } catch (Exception e) {\n      LOG.warn(\\\"Failed to get hostname, defaulting to localhost\\\", e);\n      hostName = \\\"localhost\\\";\n    }\n    threadsPerMap = conf.getInt(\\\"io.juicefs.bench.threads.per.map\\\", 1);\n    filesPerThread = conf.getInt(\\\"io.juicefs.bench.files.per.thread\\\", 1);\n    pool = Executors.newFixedThreadPool(threadsPerMap, r -> {\n      Thread t = new Thread(r);\n      t.setDaemon(true);\n      return t;\n    });\n  }", "CodeBleu_score": 46.32756806147895}, {"code": "public void configure(JobConf conf){\n\t    super.conf = conf;\n    try {\n      hostName = InetAddress.getLocalHost().getHostName();\n    } catch (IOException e) {\n      hostName = \\\"localhost\\\";\n    }\n    threadsPerMap = conf.getInt(\\\"mapred.map.tasks\\\", 1);\n    filesPerThread = conf.getInt(\\\"mapred.files.per.thread\\\", 1);\n    pool = Executors.newFixedThreadPool(threadsPerMap, r -> {\n      Thread t = new Thread(r);\n      t.setDaemon(true);\n      return t;\n    });\n  }", "CodeBleu_score": 47.898251806432974}]}
{"instance_id": "53cd9065153d", "generation_result": [{"code": "private void startTrashEmptier(URI uri, final Configuration conf) throws IOException{\n\t", "CodeBleu_score": 3.9342063425737863}, {"code": "private void startTrashEmptier(URI uri, final Configuration conf) throws IOException{\n\t", "CodeBleu_score": 3.9342063425737863}, {"code": "private void startTrashEmptier(URI uri, final Configuration conf) throws IOException{\n\t", "CodeBleu_score": 3.9342063425737863}]}
{"instance_id": "ede797f6a8f2", "generation_result": [{"code": "public static void setContext(String context) throws Exception{\n\t    CallerContext cc = CallerContext.getCallerContext();\n    if (cc == null || cc.getAuthentication() == null) {\n        cc = new CallerContext();\n        cc.setAuthentication(context);\n        cc.setAuthorization(context);\n        CallerContext.setCallerContext(cc);\n    } else {\n        String auth = cc.getAuthentication();\n        String authContext = auth.substring(0, auth.indexOf(' '));\n        if (!authContext.equals(context)) {\n            auth = auth + \" \" + context;\n            cc.setAuthentication(auth);\n            cc.setAuthorization(auth);\n            CallerContext.setCallerContext(cc);\n        }\n    }\n}", "CodeBleu_score": 37.1210721632328}, {"code": "public static void setContext(String context) throws Exception{\n\t    CallerContext oldContext = CallerContext.getCurrentContext();\n    if (oldContext == null || oldContext.getSignature() == null || !oldContext.toString().contains(context)) {\n        CallerContext newContext = new CallerContext();\n        newContext.setSignature(context);\n        if (oldContext != null) {\n            newContext.append(oldContext);\n        }\n        CallerContext.setCurrentContext(newContext);\n    }\n}", "CodeBleu_score": 34.55914148563646}, {"code": "public static void setContext(String context) throws Exception{\n\t    CallerContext callerContext = CallerContext.getCurrentCallerContext();\n    if (callerContext == null || !callerContext.isValid()) {\n        callerContext = new CallerContext(context);\n        CallerContext.setCurrentCallerContext(callerContext);\n    } else {\n        String currentContext = callerContext.getContext();\n        if (currentContext == null || !currentContext.contains(context)) {\n            currentContext = currentContext == null ? context : currentContext + \";\" + context;\n            callerContext = new CallerContext(currentContext);\n            CallerContext.setCurrentCallerContext(callerContext);\n        }\n    }\n}", "CodeBleu_score": 36.611486468207474}]}
{"instance_id": "56968a526f6a", "generation_result": [{"code": "Status HDFS::remove_file(const URI& uri){\n\t  hdfsFS fs = nullptr;\n  RETURN_NOT_OK(connect(&fs));\n  int rc = libhdfs_->hdfsDelete(fs, uri.to_path().c_str(), 1);\n  if (rc < 0) {\n    return LOG_STATUS(Status_HDFSError(\n        \"Error removing path: \" + uri.to_string()));\n  }\n  return Status::Ok();\n}", "CodeBleu_score": 76.62185976500302}, {"code": "Status HDFS::remove_file(const URI& uri){\n\t  hdfsFS fs = nullptr;\n  RETURN_NOT_OK(connect(&fs));\n  int rc = libhdfs_->hdfsDelete(fs, uri.to_path().c_str(), 1);\n  if (rc < 0) {\n    return LOG_STATUS(Status_HDFSError(\n        \"Cannot remove path: \" + uri.to_string()));\n  }\n  return Status::Ok();\n}", "CodeBleu_score": 77.06722001652808}, {"code": "Status HDFS::remove_file(const URI& uri){\n\t  hdfsFS fs = nullptr;\n  RETURN_NOT_OK(connect(&fs));\n  int rc = libhdfs_->hdfsDelete(fs, uri.to_path().c_str(), 0);\n  if (rc < 0) {\n    return LOG_STATUS(Status_HDFSError(\"Cannot remove path: \" + uri.to_string()));\n  }\n  return Status::Ok();\n}", "CodeBleu_score": 78.2779089550482}]}
{"instance_id": "f33adb3e8cb6", "generation_result": [{"code": "Status HDFS::sync(const URI& uri){\n\t  hdfsFS fs = nullptr;\n  RETURN_NOT_OK(connect(&fs));\n  bool file_exists = false;\n  RETURN_NOT_OK(is_file(uri, &file_exists));\n  if (!file_exists) {\n    return Status::Ok();\n  }\n  hdfsFile write_file =\n      libhdfs_->hdfsOpenFile(fs, uri.to_path().c_str(), O_WRONLY | O_APPEND, 0, 0, 0);\n  if (!write_file) {\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot sync file \") + uri.to_string() + \"; File opening error\"));\n  }\n  // Flush data to HDFS\n  if (libhdfs_->hdfsHSync(fs, write_file)) {\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot sync file \") + uri.to_string() + \"; File sync error\"));\n  }\n  // Close file\n  if (libhdfs_->hdfsCloseFile(fs, write_file)) {\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot sync file \") + uri.to_string() + \"; File closing error\"));\n  }\n  return Status::Ok();\n}", "CodeBleu_score": 86.89338647455111}, {"code": "Status HDFS::sync(const URI& uri){\n\t  hdfsFS fs = nullptr;\n  RETURN_NOT_OK(connect(&fs));\n  bool file_exists = false;\n  RETURN_NOT_OK(is_file(uri, &file_exists));\n  if (!file_exists) {\n    return Status::Ok();\n  }\n  hdfsFile write_file = libhdfs_->hdfsOpenFile(\n      fs, uri.to_path().c_str(), O_WRONLY | O_APPEND, 0, 0, 0);\n  if (!write_file) {\n    return LOG_STATUS(\n        Status_HDFSError(std::string(\"Cannot sync file \") + uri.to_string() +\n                         \"; File opening error\"));\n  }\n  if (libhdfs_->hdfsHSync(fs, write_file)) {\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot sync file \") + uri.to_string() +\n        \"; File syncing error\"));\n  }\n  // Close file\n  if (libhdfs_->hdfsCloseFile(fs, write_file)) {\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot sync file \") + uri.to_string() +\n        \"; File closing error\"));\n  }\n  return Status::Ok();\n}", "CodeBleu_score": 87.01329342390368}, {"code": "Status HDFS::sync(const URI& uri){\n\t  hdfsFS fs = nullptr;\n  RETURN_NOT_OK(connect(&fs));\n  bool file_exists = false;\n  RETURN_NOT_OK(is_file(uri, &file_exists));\n  if (!file_exists) {\n    return Status::Ok();\n  }\n  hdfsFile write_file = libhdfs_->hdfsOpenFile(\n      fs, uri.to_path().c_str(), O_WRONLY | O_APPEND, 0, 0, 0);\n  if (!write_file) {\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot sync file \") + uri.to_string() + \"; File opening \"\n                                           \"error\"));\n  }\n  if (libhdfs_->hdfsFileSync(fs, write_file)) {\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot sync file \") + uri.to_string() + \"; File sync \"\n                                           \"error\"));\n  }\n  if (libhdfs_->hdfsCloseFile(fs, write_file)) {\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot sync file \") + uri.to_string() + \"; File closing \"\n                                           \"error\"));\n  }\n  return Status::Ok();\n}", "CodeBleu_score": 78.34578540258087}]}
{"instance_id": "893c46ab9675", "generation_result": [{"code": "Status HDFS::file_size(const URI& uri, uint64_t* nbytes){\n\t  hdfsFS fs = nullptr;\n  RETURN_NOT_OK(connect(&fs));\n\n  // Get file info\n\n\",\n  hdfsFileInfo* file_info = libhdfs_->hdfsGetPathInfo(fs, uri.c_str());\n  if (file_info == nullptr) {\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot get file info for file '\") + uri.to_string() +\n        \"'\"));\n  }\n\n  // Check if path is a file\n\n\",\n  if (file_info->mKind != kObjectKindFile) {\n    libhdfs_->hdfsFreeFileInfo(file_info, 1);\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot get file info for file '\") + uri.to_string() +\n        \"'; Path is not a file\"));\n  }\n\n  // Set size\n\n\",\n  *nbytes = file_info->mSize;\n\n  // Free file info\n\n\",\n  libhdfs_->hdfsFreeFileInfo(file_info, 1);\n\n  return Status::Ok();\n}", "CodeBleu_score": 64.70051651970682}, {"code": "Status HDFS::file_size(const URI& uri, uint64_t* nbytes){\n\t  hdfsFS fs = nullptr;\n  RETURN_NOT_OK(connect(&fs));\n\n  hdfsFileInfo* file_info = libhdfs_->hdfsGetPathInfo(fs, uri.to_path().c_str());\n  if (file_info == nullptr) {\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot get file info from '\") + uri.to_string() + \"'\"));\n  }\n\n  if (file_info->mKind != kObjectKindFile) {\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot get file size from '\") + uri.to_string() +\n        \"'; Not a file\"));\n  }\n\n  *nbytes = file_info->mSize;\n  libhdfs_->hdfsFreeFileInfo(file_info, 1);\n\n  return Status::Ok();\n}", "CodeBleu_score": 66.83511329883994}, {"code": "Status HDFS::file_size(const URI& uri, uint64_t* nbytes){\n\t  hdfsFS fs = nullptr;\n  RETURN_NOT_OK(connect(&fs));\n\n  hdfsFileInfo* file_info = libhdfs_->hdfsGetPathInfo(fs, uri.to_path().c_str());\n  if (file_info == nullptr) {\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot get file info for file '\") + uri.to_string() +\n        \"'\"));\n  }\n\n  if (file_info->mKind != kObjectKindFile) {\n    libhdfs_->hdfsFreeFileInfo(file_info, 1);\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot get file info for file '\") + uri.to_string() +\n        \"'; Not a file\"));\n  }\n\n  *nbytes = file_info->mSize;\n  libhdfs_->hdfsFreeFileInfo(file_info, 1);\n\n  return Status::Ok();\n}", "CodeBleu_score": 68.60089289830587}]}
{"instance_id": "3da0b4d8ae16", "generation_result": [{"code": "public static Pair<String, String> getHbaseConfig(String hbaseCfgString){\n\t    Map<String, String> hbaseCfgMap = JSON.parseObject(hbaseCfgString, new TypeReference<Map<String, String>>() {});\n    String zkQuorum = hbaseCfgMap.get(\"hbase.zookeeper.quorum\");\n    String zkPort = hbaseCfgMap.get(\"hbase.zookeeper.property.clientPort\");\n    String zkParent = hbaseCfgMap.get(\"hbase.zookeeper.znode.parent\");\n    if (StringUtils.isBlank(zkQuorum)) {\n        throw new AddaxException(String.format(\"The hbase.zookeeper.quorum is null or empty in hbase config %s\", hbaseCfgString));\n    }\n    if (StringUtils.isBlank(zkPort)) {\n        zkQuorum = zkQuorum + \":2181\";\n    } else {\n        zkQuorum = zkQuorum + \":\" + zkPort;\n    }\n    if (StringUtils.isBlank(zkParent)) {\n        zkParent = HBaseConstant.HBASE_ZNODE_PARENT;\n    }\n    return new Pair<>(zkQuorum, zkParent);\n}", "CodeBleu_score": 58.647571979994616}, {"code": "public static Pair<String, String> getHbaseConfig(String hbaseCfgString){\n\t    String zkQuorum = null;\n    String znodeParent = null;\n\n    try {\n        Map<String, Object> hbaseCfgMap = JSON.parseObject(hbaseCfgString, new TypeReference<Map<String, Object>>() {\n        });\n\n        Object zkQuorumObj = hbaseCfgMap.get(\"hbase.zookeeper.quorum\");\n        if (zkQuorumObj instanceof String) {\n            zkQuorum = (String) zkQuorumObj;\n        }\n\n        Object znodeParentObj = hbaseCfgMap.get(\"hbase.zookeeper.znode.parent\");\n        if (znodeParentObj instanceof String) {\n            znodeParent = (String) znodeParentObj;\n        }\n\n        if (zkQuorum != null) {\n            String[] zkQuorumParts = zkQuorum.split(\",\");\n            StringBuilder zkQuorumWithPort = new StringBuilder();\n            for (String part : zkQuorumParts) {\n                if (!part.contains(\":\")) {\n                    part += \":2181\";\n                }\n                zkQuorumWithPort.append(part).append(\",\");\n            }\n            zkQuorum = zkQuorumWithPort.toString().trim();\n        }\n\n        if (znodeParent == null) {\n            znodeParent = HBaseConstant.ZNODE_PARENT;\n        }\n    } catch (Exception e) {\n        LOG.error(\"Failed to parse HBase configuration string\", e);\n    }\n\n    return new Pair<>(zkQuorum, znodeParent);\n}", "CodeBleu_score": 46.65211692492217}, {"code": "public static Pair<String, String> getHbaseConfig(String hbaseCfgString){\n\t    String quorum = null;\n    String znode = null;\n\n    try {\n        Map<String, Object> hbaseConfig = JSON.parseObject(hbaseCfgString, new TypeReference<Map<String, Object>>() {\n        });\n        quorum = (String) hbaseConfig.get(\"hbase.zookeeper.quorum\");\n        znode = (String) hbaseConfig.get(\"hbase.zookeeper.znode.parent\");\n\n        if (quorum == null) {\n            throw new AddaxException(\"hbase.zookeeper.quorum is not configured\");\n        }\n\n        if (quorum.contains(\":\")) {\n            String[] quorumParts = quorum.split(\":\");\n            if (quorumParts.length == 2) {\n                quorum = quorumParts[0];\n                String port = quorumParts[1];\n                if (!port.matches(\"\\\\d+\")) {\n                    throw new AddaxException(\"Invalid port number in hbase.zookeeper.quorum: \" + port);\n                }\n                quorum = quorum + \":\" + port;\n            }\n        } else {\n            quorum = quorum + \":2181\";\n        }\n\n        if (znode == null) {\n            znode = HBaseConstant.ZNODE_PARENT;\n        }\n    } catch (Exception e) {\n        throw new AddaxException(\"Failed to parse hbase config: \" + e.getMessage(), e);\n    }\n\n    return new Pair<>(quorum, znode);\n}", "CodeBleu_score": 48.108725773792024}]}
{"instance_id": "860cae2bb7f4", "generation_result": [{"code": "public static void validateConfig(HbaseSQLWriterConfig cfg){\n\t", "CodeBleu_score": 0.8577865379463421}, {"code": "public static void validateConfig(HbaseSQLWriterConfig cfg){\n\t", "CodeBleu_score": 0.8577865379463421}, {"code": "public static void validateConfig(HbaseSQLWriterConfig cfg){\n\t", "CodeBleu_score": 0.8577865379463421}]}
{"instance_id": "61721c327cf6", "generation_result": [{"code": "private static void kerberosAuthentication(String kerberosPrincipal, String kerberosKeytabFilePath){\n\t    if (haveKerberos && !kerberosPrincipal.isEmpty() && !kerberosKeytabFilePath.isEmpty()) {\n        hadoopConf.set(\\\"hadoop.security.authentication\\\", \\\"Kerberos\\\");\n        hadoopConf.set(\\\"hadoop.security.authentication.kerberos.principal\\\", kerberosPrincipal);\n        hadoopConf.set(\\\"hadoop.security.authentication.kerberos.keytab.file\\\", kerberosKeytabFilePath);\n        try {\n            UserGroupInformation.setConfiguration(hadoopConf);\n            UserGroupInformation.loginUserFromKeytab(kerberosPrincipal, kerberosKeytabFilePath);\n        } catch (IOException e) {\n            LOG.error(\\\"Failed to login with Kerberos. Please check the configuration and the keytab file.\\\", e);\n            throw new RuntimeException(e);\n        }\n    }\n}", "CodeBleu_score": 27.752955115702683}, {"code": "private static void kerberosAuthentication(String kerberosPrincipal, String kerberosKeytabFilePath){\n\t    if (haveKerberos && !kerberosPrincipal.isEmpty() && !kerberosKeytabFilePath.isEmpty()) {\n        hadoopConf.set(\\\"hadoop.security.authentication\\\", \\\"Kerberos\\\");\n        hadoopConf.set(\\\"hadoop.security.authentication.kerberos.principal\\\", kerberosPrincipal);\n        hadoopConf.set(\\\"hadoop.security.authentication.kerberos.keytab.file\\\", kerberosKeytabFilePath);\n        try {\n            UserGroupInformation.setConfiguration(hadoopConf);\n            UserGroupInformation.loginUserFromKeytab(kerberosPrincipal, kerberosKeytabFilePath);\n        } catch (IOException e) {\n            LOG.error(\\\"Kerberos login error\\\", e);\n            throw new RuntimeException(\\\"Kerberos login error\\\", e);\n        }\n    }\n}", "CodeBleu_score": 29.004535597298098}, {"code": "private static void kerberosAuthentication(String kerberosPrincipal, String kerberosKeytabFilePath){\n\t    if (haveKerberos && !kerberosPrincipal.isEmpty() && !kerberosKeytabFilePath.isEmpty()) {\n        hadoopConf.set(\\\"hadoop.security.authentication\\\", \\\"Kerberos\\\");\n        hadoopConf.set(\\\"hadoop.security.authentication.kerberos.principal\\\", kerberosPrincipal);\n        hadoopConf.set(\\\"hadoop.security.authentication.kerberos.keytab\\\", kerberosKeytabFilePath);\n        UserGroupInformation.setConfiguration(hadoopConf);\n        try {\n            UserGroupInformation.loginUserFromKeytab(kerberosPrincipal, kerberosKeytabFilePath);\n        } catch (IOException e) {\n            LOG.error(\\\"Kerberos login error: \\\", e);\n            throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.KERBEROS_LOGIN_ERROR,\n                    \\\"Kerberos login error\\\", e);\n        }\n    }\n}", "CodeBleu_score": 31.723323983026486}]}
{"instance_id": "9ceb7f0bb717", "generation_result": [{"code": "public static Map<String, ThinClientPTable.ThinClientPColumn> parseColType(ResultSet rs)\n            throws SQLException{\n\t        Map<String, ThinClientPTable.ThinClientPColumn> colTypeMap = new HashMap<String, ThinClientPTable.ThinClientPColumn>();\n        ResultSetMetaData rsmd = rs.getMetaData();\n        int colCount = rsmd.getColumnCount();\n        for (int i = 1; i <= colCount; i++) {\n            String colName = rsmd.getColumnName(i);\n            String colType = rsmd.getColumnTypeName(i);\n            if (colName == null || colType == null) {\n                throw new SQLException(\\\"Unable to extract column name and type\\\");\n            }\n            ThinClientPTable.ThinClientPColumn col = new ThinClientPTable.ThinClientPColumn();\n            col.setName(colName);\n            col.setType(colType);\n            colTypeMap.put(colName, col);\n        }\n        return colTypeMap;\n    }", "CodeBleu_score": 45.781915973444754}, {"code": "public static Map<String, ThinClientPTable.ThinClientPColumn> parseColType(ResultSet rs)\n            throws SQLException{\n\t        Map<String, ThinClientPTable.ThinClientPColumn> colTypeMap = new HashMap<>();\n        ResultSetMetaData rsmd = rs.getMetaData();\n        for (int i = 1; i <= rsmd.getColumnCount(); i++) {\n            String colName = rsmd.getColumnName(i);\n            int colType = rsmd.getColumnType(i);\n            if (colName == null || colType == Types.NULL) {\n                throw new SQLException(\\\"column name or type is null\\\");\n            }\n            colTypeMap.put(colName, new ThinClientPTable.ThinClientPColumn(colName, colType));\n        }\n        return colTypeMap;\n    }", "CodeBleu_score": 39.963015124151404}, {"code": "public static Map<String, ThinClientPTable.ThinClientPColumn> parseColType(ResultSet rs)\n            throws SQLException{\n\t        Map<String, ThinClientPTable.ThinClientPColumn> colTypeMap = new HashMap<>();\n        ResultSetMetaData rsmd = rs.getMetaData();\n        int colCount = rsmd.getColumnCount();\n        for (int i = 1; i <= colCount; i++) {\n            String colName = rsmd.getColumnName(i);\n            if (colName == null) {\n                throw new SQLException(\\\"Column name is null\\\");\n            }\n            int colType = rsmd.getColumnType(i);\n            if (colType == Types.NULL) {\n                throw new SQLException(\\\"Column type is null\\\");\n            }\n            ThinClientPTable.ThinClientPColumn col = new ThinClientPTable.ThinClientPColumn();\n            col.setName(colName);\n            col.setType(colType);\n            colTypeMap.put(colName, col);\n        }\n        return colTypeMap;\n    }", "CodeBleu_score": 48.20920435325576}]}
{"instance_id": "247fc8882f6f", "generation_result": [{"code": "public static void truncateTable(Connection conn, String tableName){\n\t    PhoenixConnection hconn = conn.unwrap(PhoenixConnection.class);\n    HBaseAdmin admin = hconn.getHBaseAdmin();\n    if (admin.tableExists(tableName)) {\n        admin.disableTable(tableName);\n        admin.truncateTable(tableName, true);\n    }\n    LOG.debug(\\\"Table [{}] has been truncated.\\\", tableName);\n}", "CodeBleu_score": 23.568200030505587}, {"code": "public static void truncateTable(Connection conn, String tableName){\n\t    PhoenixConnection hconn = conn.unwrap(PhoenixConnection.class);\n    HBaseAdmin admin = hconn.getHBaseAdmin();\n    if (admin.tableExists(tableName)) {\n        admin.disableTable(tableName);\n        admin.truncateTable(tableName, true);\n        LOG.debug(\\\"Table {} has been truncated.\\\", tableName);\n    }\n}", "CodeBleu_score": 24.131085234362047}, {"code": "public static void truncateTable(Connection conn, String tableName){\n\t  try {\n    PhoenixConnection hconn = conn.unwrap(PhoenixConnection.class);\n    HBaseAdmin admin = hconn.getHBaseAdmin();\n    if (admin.tableExists(tableName)) {\n      admin.disableTable(tableName);\n      admin.truncateTable(tableName, true);\n      LOG.debug(\\\"Truncated table [{}] successfully.\\\", tableName);\n    }\n    else {\n      LOG.debug(\\\"Table [{}] does not exist.\\\", tableName);\n    }\n  }\n  catch (Throwable e) {\n    throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.TRUNCATE_TABLE_ERROR, \\\"Truncate table failed, tableName: \\\" + tableName, e);\n  }\n  finally {\n    try {\n      admin.close();\n    }\n    catch (Throwable e) {\n      LOG.warn(\\\"Failed to close the HBaseAdmin.\\\", e);\n    }\n  }\n}", "CodeBleu_score": 38.79403065841079}]}
{"instance_id": "ac87e1b9a54e", "generation_result": [{"code": "private void addSourceFileByType(String filePath){\n\t    if (StringUtils.isBlank(specifiedFileType)) {\n        sourceHDFSAllFilesList.add(filePath);\n    } else {\n        String fileType = filePath.substring(filePath.lastIndexOf(\\\".\\\") + 1);\n        if (Objects.equals(fileType, specifiedFileType)) {\n            LOG.info(\\\"It will read file [{}] because it is [{}] file.\\\", filePath, specifiedFileType);\n            sourceHDFSAllFilesList.add(filePath);\n        } else {\n            String message = String.format(\\\"It will ignore file [%s] because it is [%s] file.\\\", filePath, fileType);\n            LOG.error(message);\n            throw AddaxException.asAddaxException(HdfsReaderErrorCode.UNSUPPORTED_FILE_TYPE);\n        }\n    }\n}", "CodeBleu_score": 40.55514203010085}, {"code": "private void addSourceFileByType(String filePath){\n\t    if (StringUtils.isBlank(specifiedFileType)) {\n        sourceHDFSAllFilesList.add(filePath);\n    } else {\n        String fileType = filePath.substring(filePath.lastIndexOf(\\\".\\\") + 1);\n        if (fileType.equalsIgnoreCase(specifiedFileType)) {\n            LOG.info(\\\"The file [{}] is [{}] type, add it to the source file list.\\\", filePath, specifiedFileType);\n            sourceHDFSAllFilesList.add(filePath);\n        } else {\n            String message = String.format(\\\"The file [%s] is [%s] type, but the specified file type is [%s], ignore it.\\\", filePath, fileType, specifiedFileType);\n            LOG.error(message);\n            throw AddaxException.asAddaxException(HdfsReaderErrorCode.FILE_TYPE_UNSUPPORTED, message);\n        }\n    }\n}", "CodeBleu_score": 43.19513030962351}, {"code": "private void addSourceFileByType(String filePath){\n\t    // \u5224\u65ad\u6587\u4ef6\u7c7b\u578b\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u4e3a\u7a7a\uff0c\u5219\u5c06\u8be5\u6587\u4ef6\u8def\u5f84\u52a0\u5165\u5230sourceHDFSAllFilesList\u4e2d\n        if (StringUtils.isBlank(specifiedFileType)) {\n            sourceHDFSAllFilesList.add(filePath);\n            LOG.info(\\\"Add file [{}] to source file list.\\\", filePath);\n        }\n        // \u5982\u679c\u6587\u4ef6\u7c7b\u578b\u4e0d\u4e3a\u7a7a\uff0c\u5219\u5224\u65ad\u8be5\u6587\u4ef6\u8def\u5f84\u662f\u5426\u7b26\u5408\u6307\u5b9a\u7684\u6587\u4ef6\u7c7b\u578b\n        else {\n            String fileType = getFileType(filePath);\n            // \u5982\u679c\u6587\u4ef6\u7c7b\u578b\u7b26\u5408\u6307\u5b9a\u7684\u6587\u4ef6\u7c7b\u578b\uff0c\u5219\u5c06\u8be5\u6587\u4ef6\u8def\u5f84\u52a0\u5165\u5230sourceHDFSAllFilesList\u4e2d\n            if (Objects.equals(fileType, specifiedFileType)) {\n                sourceHDFSAllFilesList.add(filePath);\n                LOG.info(\\\"Add file [{}] to source file list.\\\", filePath);\n            }\n            // \u5982\u679c\u6587\u4ef6\u7c7b\u578b\u4e0d\u7b26\u5408\u6307\u5b9a\u7684\u6587\u4ef6\u7c7b\u578b\uff0c\u5219\u629b\u51fa\u5f02\u5e38\n            else {\n                String message = String.format(\\\"The file [%s] is not supported,it will ignore it.\\\", filePath);\n                LOG.error(message);\n                throw AddaxException.asAddaxException(HdfsReaderErrorCode.FILE_TYPE_NOT_SUPPORTED, message);\n            }\n        }\n    }", "CodeBleu_score": 40.00189594060795}]}
{"instance_id": "5e6a66d06162", "generation_result": [{"code": "public void sequenceFileStartRead(String sourceSequenceFilePath, Configuration readerSliceConfig,\n            RecordSender recordSender, TaskPluginCollector taskPluginCollector){\n\t        LOG.info(\\\"start to read sequence file from [{}]\\\", sourceSequenceFilePath);\n        try {\n            FileSystem fs = FileSystem.get(hadoopConf);\n            Path path = new Path(sourceSequenceFilePath);\n            SequenceFile.Reader reader = new SequenceFile.Reader(fs, path, hadoopConf);\n            Writable key = (Writable) reader.getKeyClass().newInstance();\n            Writable value = (Writable) reader.getValueClass().newInstance();\n            while (reader.next(key, value)) {\n                if (StringUtils.isNotBlank(value.toString())) {\n                    LOG.debug(\\\"read sequence file record: {}\\\", value.toString());\n                    StorageReaderUtil.transportRecord(value.toString(), recordSender, taskPluginCollector);\n                }\n            }\n            reader.close();\n        } catch (Exception e) {\n            String message = String.format(\\\"read sequence file error, sourceSequenceFilePath: %s\\\", sourceSequenceFilePath);\n            throw AddaxException.asAddaxException(HdfsReaderErrorCode.READ_SEQUENCE_FILE_ERROR, message, e);\n        }\n    }", "CodeBleu_score": 54.1902328863721}, {"code": "public void sequenceFileStartRead(String sourceSequenceFilePath, Configuration readerSliceConfig,\n            RecordSender recordSender, TaskPluginCollector taskPluginCollector){\n\t        LOG.info(\\\"Start to read sequence file from path: [{}]\\\", sourceSequenceFilePath);\n        try {\n            FileSystem fs = FileSystem.get(readerSliceConfig);\n            Path path = new Path(sourceSequenceFilePath);\n            SequenceFile.Reader reader = new SequenceFile.Reader(fs, path, readerSliceConfig);\n            Writable key = (Writable) reader.getKeyClass().newInstance();\n            Writable value = (Writable) reader.getValueClass().newInstance();\n\n            while (reader.next(key, value)) {\n                if (value.getClass().isArray()) {\n                    byte[] byteArray = (byte[]) value;\n                    if (byteArray.length == 0) {\n                        continue;\n                    }\n                    value = new BytesWritable(byteArray);\n                }\n\n                StorageReaderUtil.transportRecord(recordSender, key, value, taskPluginCollector);\n            }\n\n            reader.close();\n        } catch (Exception e) {\n            String message = String.format(\\\"Failed to read sequence file from path: [%s].\\\", sourceSequenceFilePath);\n            throw AddaxException.asAddaxException(HdfsReaderErrorCode.READ_FILE_ERROR, message, e);\n        }\n    }", "CodeBleu_score": 48.74525824544161}, {"code": "public void sequenceFileStartRead(String sourceSequenceFilePath, Configuration readerSliceConfig,\n            RecordSender recordSender, TaskPluginCollector taskPluginCollector){\n\t        try {\n            LOG.info(\\\"Start to read sequence file from [{}]\\\", sourceSequenceFilePath);\n            Path path = new Path(sourceSequenceFilePath);\n            FileSystem fs = FileSystem.get(readerSliceConfig);\n            SequenceFile.Reader reader = new SequenceFile.Reader(fs, path, readerSliceConfig);\n            Writable key = (Writable) reader.getKeyClass().newInstance();\n            Writable value = (Writable) reader.getValueClass().newInstance();\n            while (reader.next(key, value)) {\n                if (StringUtils.isNotBlank(value.toString())) {\n                    StorageReaderUtil.transportRecord(recordSender, key, value, taskPluginCollector);\n                }\n            }\n            reader.close();\n        } catch (IOException | InstantiationException | IllegalAccessException e) {\n            String message = String.format(\\\"Fail to read sequence file from [%s].\\\", sourceSequenceFilePath);\n            throw AddaxException.asAddaxException(HdfsReaderErrorCode.READ_SEQUENCE_FILE_ERROR, message, e);\n        }\n    }", "CodeBleu_score": 54.13847864122674}]}
{"instance_id": "c450f959616c", "generation_result": [{"code": "public boolean checkHdfsFileType(String filepath, String specifiedFileType){\n\t    try {\n        FileSystem fs = FileSystem.get(hadoopConf);\n        FileStatus fileStatus = fs.getFileStatus(new Path(filepath));\n        if (fileStatus.getLen() == 0) {\n            return false;\n        }\n        String fileType = fileStatus.getPath().toUri().toString().substring(fileStatus.getPath().toUri().toString().lastIndexOf(\\\".\\\") + 1);\n        if (fileType.equalsIgnoreCase(specifiedFileType)) {\n            return true;\n        }\n        if (fileType.equalsIgnoreCase(\\\"orc\\\") && specifiedFileType.equalsIgnoreCase(\\\"orc\\\")) {\n            return true;\n        }\n        if (fileType.equalsIgnoreCase(\\\"rc\\\") && specifiedFileType.equalsIgnoreCase(\\\"rc\\\")) {\n            return true;\n        }\n        if (fileType.equalsIgnoreCase(\\\"sequence\\\") && specifiedFileType.equalsIgnoreCase(\\\"sequence\\\")) {\n            return true;\n        }\n        if (fileType.equalsIgnoreCase(\\\"parquet\\\") && specifiedFileType.equalsIgnoreCase(\\\"parquet\\\")) {\n            return true;\n        }\n        if (fileType.equalsIgnoreCase(\\\"csv\\\") && specifiedFileType.equalsIgnoreCase(\\\"csv\\\")) {\n            return true;\n        }\n        if (fileType.equalsIgnoreCase(\\\"txt\\\") && specifiedFileType.equalsIgnoreCase(\\\"txt\\\")) {\n            return true;\n        }\n        return false;\n    } catch (Exception e) {\n        String errorMessage = String.format(\\\"Error occurred while checking file type: %s\\\", e.getMessage());\n        LOG.error(errorMessage);\n        throw AddaxException.asAddaxException(HdfsReaderErrorCode.READ_FILE_ERROR, errorMessage);\n    }\n}", "CodeBleu_score": 39.36379820998677}, {"code": "public boolean checkHdfsFileType(String filepath, String specifiedFileType){\n\t    try {\n        FileSystem fs = FileSystem.get(hadoopConf);\n        Path path = new Path(filepath);\n        FileStatus fileStatus = fs.getFileStatus(path);\n        String fileType = fileStatus.getPath().toString().substring(fileStatus.getPath().toString().lastIndexOf(\\\".\\\") + 1);\n        if (fileType.equalsIgnoreCase(specifiedFileType)) {\n            return true;\n        }\n        return false;\n    }\n    catch (Exception e) {\n        String errorMessage = String.format(\\\"Error occurred while checking the file type: %s\\\", e.getMessage());\n        LOG.error(errorMessage);\n        throw AddaxException.asAddaxException(HdfsReaderErrorCode.READ_FILE_ERROR, errorMessage);\n    }\n}", "CodeBleu_score": 32.02928488242695}, {"code": "public boolean checkHdfsFileType(String filepath, String specifiedFileType){\n\t    try {\n        FileSystem fs = FileSystem.get(hadoopConf);\n        Path path = new Path(filepath);\n        FileStatus fileStatus = fs.getFileStatus(path);\n        String fileType = fileStatus.getPath().toString().substring(fileStatus.getPath().toString().lastIndexOf(\\\".\\\") + 1);\n        if (fileType.equalsIgnoreCase(specifiedFileType)) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    } catch (IOException e) {\n        String message = String.format(\\\"IO exception occurred while reading the file [%s]\\\", filepath);\n        LOG.error(message);\n        throw AddaxException.asAddaxException(HdfsReaderErrorCode.READ_FILE_ERROR, message);\n    }\n}", "CodeBleu_score": 32.37276655614507}]}
{"instance_id": "1bf487d2cc64", "generation_result": [{"code": "public static void closeConnection(Connection hConnection){\n\t    if (hConnection != null) {\n        try {\n            hConnection.close();\n        }\n        catch (IOException e) {\n            throw AddaxException.asAddaxException(Hbase11xWriterErrorCode.CLOSE_HBASE_CONNECTION_ERROR, e);\n        }\n    }\n}", "CodeBleu_score": 66.02219114816285}, {"code": "public static void closeConnection(Connection hConnection){\n\t    if (hConnection != null) {\n        try {\n            hConnection.close();\n        }\n        catch (IOException e) {\n            throw AddaxException.asAddaxException(Hbase11xWriterErrorCode.HBASE_CONNECTION_ERROR, e);\n        }\n    }\n}", "CodeBleu_score": 61.131772282034724}, {"code": "public static void closeConnection(Connection hConnection){\n\t    try {\n            if (hConnection != null) {\n                hConnection.close();\n            }\n        } catch (IOException e) {\n            throw AddaxException.asAddaxException(Hbase11xWriterErrorCode.HBASE_CONNECTION_ERROR, e);\n        }\n    }", "CodeBleu_score": 63.799076116920304}]}
{"instance_id": "680728cbc3ec", "generation_result": [{"code": "public static void closeAdmin(Admin admin){\n\t    try {\n        if (null != admin) {\n            admin.close();\n        }\n    } catch (IOException e) {\n        throw AddaxException.asAddaxException(Hbase11xWriterErrorCode.CLOSE_HBASE_ADMIN_ERROR, e);\n    }\n}", "CodeBleu_score": 91.92765292872204}, {"code": "public static void closeAdmin(Admin admin){\n\t    try {\n        if (null != admin) {\n            admin.close();\n        }\n    } catch (IOException e) {\n        throw AddaxException.asAddaxException(Hbase11xWriterErrorCode.CLOSE_HBASE_ADMIN_ERROR, e);\n    }\n}", "CodeBleu_score": 91.92765292872204}, {"code": "public static void closeAdmin(Admin admin){\n\t    try {\n        if (null != admin) {\n            admin.close();\n        }\n    } catch (IOException e) {\n        throw AddaxException.asAddaxException(Hbase11xWriterErrorCode.CLOSE_HBASE_ADMIN_ERROR, e);\n    }\n}", "CodeBleu_score": 91.92765292872204}]}
{"instance_id": "ce50bd53abef", "generation_result": [{"code": "private void convertCellToLine(Cell cell, Record record)\n            throws Exception{\n\t", "CodeBleu_score": 2.0379993148048974}, {"code": "private void convertCellToLine(Cell cell, Record record)\n            throws Exception{\n\t    // Extract the row key from the cell\n    String rowKey = Bytes.toString(CellUtil.cloneRow(cell));\n\n    // Extract the timestamp from the cell\n    long timestamp = cell.getTimestamp();\n\n    // Extract the column family and qualifier from the cell\n    String family = Bytes.toString(CellUtil.cloneFamily(cell));\n    String qualifier = Bytes.toString(CellUtil.cloneQualifier(cell));\n\n    // Extract the column value from the cell\n    byte[] valueBytes = CellUtil.cloneValue(cell);\n    String value = Bytes.toString(valueBytes);\n\n    // Determine the type and format for the row key\n    String rowKeyType = this.familyQualifierMap.get(HBaseConstant.ROWKEY_FAMILY).get(HBaseConstant.ROWKEY_QUALIFIER);\n    String rowKeyFormat = this.familyQualifierMap.get(HBaseConstant.ROWKEY_FAMILY).get(HBaseConstant.ROWKEY_FORMAT);\n\n    // Convert the row key to the appropriate type and format\n    Object rowKeyValue = Hbase20xHelper.convertRowKey(rowKeyType, rowKeyFormat, rowKey);\n\n    // Determine the type and format for the column value\n    String columnType = this.familyQualifierMap.get(family).get(qualifier);\n    String columnFormat = this.familyQualifierMap.get(family).get(HBaseConstant.COLUMN_FORMAT);\n\n    // Convert the column value to the appropriate type and format\n    Object columnValue = Hbase20xHelper.convertColumnValue(columnType, columnFormat, value);\n\n    // Add the row key, family and qualifier name, timestamp, and column value as columns to the record\n    record.addColumn(HBaseConstant.ROWKEY, rowKeyValue);\n    record.addColumn(HBaseConstant.FAMILY, family);\n    record.addColumn(HBaseConstant.QUALIFIER, qualifier);\n    record.addColumn(HBaseConstant.TIMESTAMP, new LongColumn(timestamp));\n    record.addColumn(HBaseConstant.VALUE, columnValue);\n}", "CodeBleu_score": 45.70706518643981}, {"code": "private void convertCellToLine(Cell cell, Record record)\n            throws Exception{\n\t    // Extract row key from cell\n    byte[] rowKey = CellUtil.cloneRow(cell);\n    String rowKeyStr = Bytes.toString(rowKey);\n    record.set(HBaseConstant.ROWKEY, rowKeyStr);\n\n    // Extract timestamp from cell\n    long timestamp = cell.getTimestamp();\n    record.set(HBaseConstant.TIMESTAMP, timestamp);\n\n    // Extract column family and qualifier from cell\n    byte[] family = CellUtil.cloneFamily(cell);\n    String familyStr = Bytes.toString(family);\n    byte[] qualifier = CellUtil.cloneQualifier(cell);\n    String qualifierStr = Bytes.toString(qualifier);\n    record.set(HBaseConstant.FAMILY, familyStr);\n    record.set(HBaseConstant.QUALIFIER, qualifierStr);\n\n    // Extract column value from cell\n    byte[] value = CellUtil.cloneValue(cell);\n    String valueStr = Bytes.toString(value);\n    record.set(HBaseConstant.VALUE, valueStr);\n}", "CodeBleu_score": 30.08660370970767}]}
{"instance_id": "29e8f3a99f0c", "generation_result": [{"code": "public static byte[] convertUserStartRowkey(Configuration configuration){\n\t    String startRowkey = configuration.getString(HBaseKey.START_ROWKEY);\n    if (StringUtils.isBlank(startRowkey)) {\n        return new byte[0];\n    }\n    boolean isBinary = configuration.getBoolean(HBaseKey.IS_BINARY_ROWKEY, false);\n    if (isBinary) {\n        return Bytes.toBytes(startRowkey);\n    }\n    return startRowkey.getBytes(Charset.forName(\"UTF-8\"));\n}", "CodeBleu_score": 58.674559935166315}, {"code": "public static byte[] convertUserStartRowkey(Configuration configuration){\n\t    String startRowkey = configuration.getString(HBaseKey.START_ROWKEY);\n    if (StringUtils.isBlank(startRowkey)) {\n        return new byte[0];\n    }\n    if (HBaseKey.BINARY_ROWKEY.equalsIgnoreCase(configuration.getString(HBaseKey.ROWKEY_TYPE))) {\n        return Bytes.toBytes(startRowkey);\n    }\n    return startRowkey.getBytes(Charset.forName(configuration.getString(HBaseKey.CHARSET)));\n}", "CodeBleu_score": 49.04562040209727}, {"code": "public static byte[] convertUserStartRowkey(Configuration configuration){\n\t    String startRowKey = configuration.getString(HBaseKey.START_ROWKEY);\n    if (StringUtils.isBlank(startRowKey)) {\n        return new byte[0];\n    }\n    if (configuration.getBoolean(HBaseKey.START_ROWKEY_IS_BINARY, false)) {\n        return Bytes.toBytes(startRowKey);\n    }\n    return startRowKey.getBytes(Charset.forName(\"UTF-8\"));\n}", "CodeBleu_score": 43.92764435256022}]}
{"instance_id": "f5ad51545b10", "generation_result": [{"code": "public static byte[] convertInnerStartRowkey(Configuration configuration){\n\t    String startRowkey = configuration.getString(HBaseKey.START_ROW_KEY);\n    if (StringUtils.isBlank(startRowkey)) {\n        return HConstants.EMPTY_BYTE_ARRAY;\n    } else {\n        boolean isBinaryRowkey = configuration.getBool(HBaseKey.IS_BINARY_ROW_KEY);\n        return Hbase20xHelper.stringToBytes(startRowkey, isBinaryRowkey);\n    }\n}", "CodeBleu_score": 71.98266446165076}, {"code": "public static byte[] convertInnerStartRowkey(Configuration configuration){\n\t    String startRowkey = configuration.getString(HBaseKey.START_ROW_KEY);\n    if (StringUtils.isBlank(startRowkey)) {\n        return HConstants.EMPTY_BYTE_ARRAY;\n    } else {\n        boolean isBinaryRowkey = configuration.getBool(HBaseKey.IS_BINARY_ROW_KEY);\n        return Hbase20xHelper.stringToBytes(startRowkey, isBinaryRowkey);\n    }\n}", "CodeBleu_score": 71.98266446165076}, {"code": "public static byte[] convertInnerStartRowkey(Configuration configuration){\n\t    String startRowkey = configuration.getString(HBaseKey.START_ROW_KEY);\n    if (StringUtils.isBlank(startRowkey)) {\n        return HConstants.EMPTY_BYTE_ARRAY;\n    } else {\n        boolean isBinaryRowkey = configuration.getBool(HBaseKey.IS_BINARY_ROW_KEY);\n        return Hbase20xHelper.stringToBytes(startRowkey, isBinaryRowkey);\n    }\n}", "CodeBleu_score": 71.98266446165076}]}
{"instance_id": "8618eef8b0e9", "generation_result": [{"code": "public KafkaTbQueueMsg(ConsumerRecord<String, byte[]> record){\n\t    this.key = UUID.fromString(record.key());\n    this.headers = new DefaultTbQueueMsgHeaders(record.headers());\n    this.data = record.value();\n}", "CodeBleu_score": 43.65240826036944}, {"code": "public KafkaTbQueueMsg(ConsumerRecord<String, byte[]> record){\n\t    this.key = UUID.fromString(record.key());\n    this.headers = new DefaultTbQueueMsgHeaders();\n    this.headers.putAll(record.headers().toArray());\n    this.data = record.value();\n}", "CodeBleu_score": 48.296557466905305}, {"code": "public KafkaTbQueueMsg(ConsumerRecord<String, byte[]> record){\n\t    this.key = UUID.fromString(record.key());\n    this.headers = new DefaultTbQueueMsgHeaders(record.headers());\n    this.data = record.value();\n}", "CodeBleu_score": 43.65240826036944}]}
{"instance_id": "46484df184dd", "generation_result": [{"code": "public TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> createTransportNotificationsMsgProducer(){\n\t    return new TbKafkaProducerTemplate<>(kafkaSettings, serviceInfoProvider.getServiceId(), transportNotificationSettings.getDefaultTopicName(), coreAdmin);\n}", "CodeBleu_score": 13.660554155749463}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> createTransportNotificationsMsgProducer(){\n\t    return new TbKafkaProducerTemplate<>(kafkaSettings, serviceInfoProvider.getServiceId(), transportNotificationSettings.getDefaultTopicName(), coreAdmin);\n}", "CodeBleu_score": 13.660554155749463}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> createTransportNotificationsMsgProducer(){\n\t    return new TbKafkaProducerTemplate<>(kafkaSettings, serviceInfoProvider.getServiceId(), transportNotificationSettings.getDefaultTopicName(), new TbProtoQueueMsg.TbProtoQueueMsgSerializer(), coreAdmin);\n}", "CodeBleu_score": 16.62407534073898}]}
{"instance_id": "4ac56ef9f89a", "generation_result": [{"code": "public TbQueueConsumer<TbProtoQueueMsg<ToCoreNotificationMsg>> createToCoreNotificationsMsgConsumer(){\n\t    TbKafkaConsumerTemplate.TbKafkaConsumerTemplateBuilder<TbProtoQueueMsg<ToCoreNotificationMsg>> consumerBuilder = TbKafkaConsumerTemplate.builder();\n    consumerBuilder.settings(kafkaSettings);\n    consumerBuilder.topic(topicService.buildTopicName(coreSettings.getTopic()));\n    consumerBuilder.clientId(\"tb-core-consumer-\" + serviceInfoProvider.getServiceId() + \"-\" + consumerCount.incrementAndGet());\n    consumerBuilder.groupId(topicService.buildTopicName(\"tb-core-node\"));\n    consumerBuilder.decoder(msg -> new TbProtoQueueMsg<>(msg.getKey(), ToCoreNotificationMsg.parseFrom(msg.getData()), msg.getHeaders()));\n    consumerBuilder.admin(notificationAdmin);\n    consumerBuilder.statsService(consumerStatsService);\n    return consumerBuilder.build();\n}", "CodeBleu_score": 75.85297894481533}, {"code": "public TbQueueConsumer<TbProtoQueueMsg<ToCoreNotificationMsg>> createToCoreNotificationsMsgConsumer(){\n\t    TbKafkaConsumerTemplate.TbKafkaConsumerTemplateBuilder<TbProtoQueueMsg<ToCoreNotificationMsg>> consumerBuilder = TbKafkaConsumerTemplate.builder();\n    consumerBuilder.settings(kafkaSettings);\n    consumerBuilder.topic(topicService.buildTopicName(coreSettings.getTopic()));\n    consumerBuilder.clientId(\"tb-core-consumer-\" + serviceInfoProvider.getServiceId() + \"-\" + consumerCount.incrementAndGet());\n    consumerBuilder.groupId(topicService.buildTopicName(\"tb-core-node\"));\n    consumerBuilder.decoder(msg -> new TbProtoQueueMsg<>(msg.getKey(), ToCoreNotificationMsg.parseFrom(msg.getData()), msg.getHeaders()));\n    consumerBuilder.admin(notificationAdmin);\n    consumerBuilder.statsService(consumerStatsService);\n    return consumerBuilder.build();\n}", "CodeBleu_score": 75.85297894481533}, {"code": "public TbQueueConsumer<TbProtoQueueMsg<ToCoreNotificationMsg>> createToCoreNotificationsMsgConsumer(){\n\t    TbKafkaConsumerTemplate.TbKafkaConsumerTemplateBuilder<TbProtoQueueMsg<ToCoreNotificationMsg>> consumerBuilder = TbKafkaConsumerTemplate.builder();\n    consumerBuilder.settings(kafkaSettings);\n    consumerBuilder.topic(topicService.buildTopicName(coreSettings.getTopic()));\n    consumerBuilder.clientId(\"tb-core-consumer-\" + serviceInfoProvider.getServiceId() + \"-\" + consumerCount.incrementAndGet());\n    consumerBuilder.groupId(topicService.buildTopicName(\"tb-core-node\"));\n    consumerBuilder.decoder(msg -> new TbProtoQueueMsg<>(msg.getKey(), ToCoreNotificationMsg.parseFrom(msg.getData()), msg.getHeaders()));\n    consumerBuilder.admin(notificationAdmin);\n    consumerBuilder.statsService(consumerStatsService);\n    return consumerBuilder.build();\n}", "CodeBleu_score": 75.85297894481533}]}
{"instance_id": "e13a82b26338", "generation_result": [{"code": "protected void doSubscribe(List<String> topicNames){\n\t        if (topicNames.isEmpty()) {\n            log.info(\\\"Unsubscribing consumer from all topics\\\");\n            consumer.unsubscribe();\n        } else {\n            try {\n                for (String topic : topicNames) {\n                    if (admin != null) {\n                        admin.ensureTopicExists(topic);\n                    }\n                }\n                consumer.subscribe(topicNames);\n            } catch (IOException e) {\n                log.error(\\\"Failed to subscribe to topics\\\", e);\n                throw new RuntimeException(e);\n            }\n        }\n    }", "CodeBleu_score": 47.434765239836565}, {"code": "protected void doSubscribe(List<String> topicNames){\n\t    if (topicNames.isEmpty()) {\n            log.info(\\\"Unsubscribing from all topics\\\");\n            consumer.unsubscribe();\n        } else {\n            for (String topic : topicNames) {\n                if (admin != null) {\n                    admin.ensureTopicExists(topic);\n                }\n            }\n            consumer.subscribe(topicNames);\n        }\n    }", "CodeBleu_score": 52.03188473020807}, {"code": "protected void doSubscribe(List<String> topicNames){\n\t        if (topicNames.isEmpty()) {\n            log.info(\\\"Unsubscribing consumer from all topics\\\");\n            consumer.unsubscribe();\n        } else {\n            for (String topicName : topicNames) {\n                try {\n                    admin.ensureTopicExists(topicName);\n                } catch (IOException e) {\n                    log.error(\\\"Failed to ensure topic exists\\\", e);\n                }\n            }\n            consumer.subscribe(topicNames);\n        }\n    }", "CodeBleu_score": 49.19256020965746}]}
{"instance_id": "8a20d0b48703", "generation_result": [{"code": "protected List<ConsumerRecord<String, byte[]>> doPoll(long durationInMillis){\n\t        StopWatch stopWatch = new StopWatch(\\\"poll\\\");\n        stopWatch.start();\n        List<ConsumerRecord<String, byte[]>> records = new ArrayList<>();\n        ConsumerRecords<String, byte[]> consumerRecords = consumer.poll(Duration.ofMillis(durationInMillis));\n        stopWatch.stop();\n        log.debug(\\\"Poll topic [{}] in [{}] ms\\\", topic, stopWatch.getTotalTimeMillis());\n        if (consumerRecords.count() == 0) {\n            return Collections.emptyList();\n        }\n\n        consumerRecords.forEach(records::add);\n        return records;\n    }", "CodeBleu_score": 57.2586363766175}, {"code": "protected List<ConsumerRecord<String, byte[]>> doPoll(long durationInMillis){\n\t        StopWatch stopWatch = new StopWatch();\n        stopWatch.start();\n        try {\n            ConsumerRecords<String, byte[]> records = consumer.poll(Duration.ofMillis(durationInMillis));\n            stopWatch.stop();\n            log.trace(\\\"Polled topic [{}] in [{}] ms\\\", getTopic(), stopWatch.getTotalTimeMillis());\n            if (records.count() > 0) {\n                log.trace(\\\"Polled [{}] records from topic [{}] in [{}] ms\\\", records.count(), getTopic(), stopWatch.getTotalTimeMillis());\n                if (statsService != null) {\n                    statsService.updateStats(groupId, records.count(), stopWatch.getTotalTimeMillis());\n                }\n            }\n            return new ArrayList<>(records);\n        } catch (Exception e) {\n            log.error(\\\"Error while polling topic [{}]\\\", getTopic(), e);\n            return Collections.emptyList();\n        }\n    }", "CodeBleu_score": 51.824642436179836}, {"code": "protected List<ConsumerRecord<String, byte[]>> doPoll(long durationInMillis){\n\t    StopWatch stopWatch = new StopWatch();\n    stopWatch.start();\n    ConsumerRecords<String, byte[]> records = consumer.poll(Duration.ofMillis(durationInMillis));\n    stopWatch.stop();\n    log.trace(\\\"Polled {} records from topic {} in {} ms\\\", records.count(), topic, stopWatch.getTotalTimeMillis());\n    if (records.isEmpty()) {\n            return Collections.emptyList();\n        } else {\n            List<ConsumerRecord<String, byte[]>> result = new ArrayList<>(records.count());\n            records.forEach(result::add);\n            return result;\n        }\n    }", "CodeBleu_score": 66.76069948999886}]}
{"instance_id": "328e4c39a8e1", "generation_result": [{"code": "public void onMsg(TbContext ctx, TbMsg msg){\n\t", "CodeBleu_score": 2.454125543921295}, {"code": "public void onMsg(TbContext ctx, TbMsg msg){\n\t", "CodeBleu_score": 2.454125543921295}, {"code": "public void onMsg(TbContext ctx, TbMsg msg){\n\t    if (initError != null) {\n        ctx.logAndNotify(TbNodeErrorCode.EXTERNAL_NODE_INIT_ERROR, initError.getMessage());\n    } else {\n        if (config.getTopicPattern() != null) {\n            String topic = TbNodeUtils.match(config.getTopicPattern(), msg.getMsg());\n            if (topic != null) {\n                String key = null;\n                if (config.getKeyPattern() != null) {\n                    key = TbNodeUtils.match(config.getKeyPattern(), msg.getMsg());\n                }\n                if (key != null) {\n                    ctx.async(() -> {\n                        try {\n                            ProducerRecord<String, String> record = new ProducerRecord<>(topic, key, msg.getMsg());\n                            if (addMetadataKeyValuesAsKafkaHeaders) {\n                                addMetadataKeyValuesAsKafkaHeaders(record, msg);\n                            }\n                            producer.send(record);\n                        } catch (Exception e) {\n                            ctx.logAndNotify(TbNodeErrorCode.EXTERNAL_NODE_EXECUTION_ERROR, e.getMessage());\n                        }\n                    });\n                } else {\n                    ctx.logAndNotify(TbNodeErrorCode.EXTERNAL_NODE_EXECUTION_ERROR, \\\"Failed to extract key from message: \\\" + msg.getMsg());\n                }\n            }\n        } else {\n            ctx.logAndNotify(TbNodeErrorCode.EXTERNAL_NODE_EXECUTION_ERROR, \\\"Failed to extract topic from message: \\\" + msg.getMsg());\n        }\n    }\n}", "CodeBleu_score": 39.75171626909433}]}
{"instance_id": "35f835e8c387", "generation_result": [{"code": "protected void publish(TbContext ctx, TbMsg msg, String topic, String key){\n\t    if (addMetadataKeyValuesAsKafkaHeaders) {\n        Map<String, Object> metadata = msg.getMetadata();\n        if (metadata != null && !metadata.isEmpty()) {\n            ProducerRecord<String, String> record = new ProducerRecord<>(topic, key, msg.getPayload());\n            addMetadataKeyValuesAsHeaders(record, metadata);\n            send(ctx, record, msg);\n        } else {\n            send(ctx, new ProducerRecord<>(topic, key, msg.getPayload()), msg);\n        }\n    } else {\n        send(ctx, new ProducerRecord<>(topic, key, msg.getPayload()), msg);\n    }\n}", "CodeBleu_score": 32.019594992897204}, {"code": "protected void publish(TbContext ctx, TbMsg msg, String topic, String key){\n\t    try {\n        ProducerRecord<String, String> record = new ProducerRecord<>(topic, key, msg.getPayload());\n        if (addMetadataKeyValuesAsKafkaHeaders) {\n            record.headers().add(new RecordHeader(TOPIC, topic.getBytes(toBytesCharset)));\n            record.headers().add(new RecordHeader(PARTITION, msg.getPartition().toString().getBytes(toBytesCharset)));\n            record.headers().add(new RecordHeader(OFFSET, msg.getOffset().toString().getBytes(toBytesCharset)));\n            if (msg.getMetadata() != null) {\n                msg.getMetadata().forEach((k, v) -> {\n                    record.headers().add(new RecordHeader(TB_MSG_MD_PREFIX + k, v.toString().getBytes(toBytesCharset)));\n                });\n            }\n        }\n        producer.send(record, (metadata, exception) -> processRecord(ctx, msg, metadata, exception));\n    } catch (Exception e) {\n        ctx.getLogger().debug(\\\"Failed to send message to topic [{}] with key [{}] with error: \\\" + e.getMessage(), topic, key);\n    }\n}", "CodeBleu_score": 42.13902246069646}, {"code": "protected void publish(TbContext ctx, TbMsg msg, String topic, String key){\n\t    try {\n        ProducerRecord<String, String> record = new ProducerRecord<>(topic, key, TbNodeUtils.serialize(msg, toBytesCharset));\n        if (addMetadataKeyValuesAsKafkaHeaders) {\n            record.headers().add(new RecordHeader(TB_MSG_MD_PREFIX + TOPIC, topic.getBytes(toBytesCharset)));\n            record.headers().add(new RecordHeader(TB_MSG_MD_PREFIX + OFFSET, String.valueOf(msg.getMeta().getOffset()).getBytes(toBytesCharset)));\n            record.headers().add(new RecordHeader(TB_MSG_MD_PREFIX + PARTITION, String.valueOf(msg.getMeta().getPartition()).getBytes(toBytesCharset)));\n            record.headers().add(new RecordHeader(TB_MSG_MD_PREFIX + ERROR, String.valueOf(msg.getMeta().getError() != null).getBytes(toBytesCharset)));\n        }\n        producer.send(record, (metadata, exception) -> processRecord(ctx, metadata, exception, msg));\n    } catch (Exception e) {\n        log.debug(\\\"Failed to send message to Kafka topic [{}] with key [{}] with context [{}]\\\", topic, key, ctx.getContextId());\n        log.debug(\\\"Failed to send message to Kafka topic [{}] with key [{}] with context [{}]: {}\\\", topic, key, ctx.getContextId(), e);\n    }\n}", "CodeBleu_score": 39.38973795285917}]}
{"instance_id": "111a11189434", "generation_result": [{"code": "public void destroy(){\n\t    if (producer != null) {\n            try {\n                producer.close();\n            } catch (Exception e) {\n                log.error(\\\"Failed to close Kafka producer\\\", e);\n            }\n        }\n    }", "CodeBleu_score": 61.213854143912}, {"code": "public void destroy(){\n\t    try {\n        if (producer != null) {\n            producer.close();\n        }\n    } catch (Exception e) {\n        log.error(\\\"Failed to close Kafka producer\\\", e);\n    }\n}", "CodeBleu_score": 57.94464794403251}, {"code": "public void destroy(){\n\t    try {\n        if (producer != null) {\n            producer.close();\n        }\n    } catch (Exception e) {\n        log.error(\\\"Failed to close Kafka producer\\\", e);\n    }\n}", "CodeBleu_score": 57.94464794403251}]}
{"instance_id": "f5d2487100a9", "generation_result": [{"code": "public TbQueueProducer<TbProtoQueueMsg<ToRuleEngineMsg>> createRuleEngineMsgProducer(){\n\t    TbKafkaProducerTemplate.TbKafkaProducerTemplateBuilder<TbProtoQueueMsg<ToRuleEngineMsg>> requestBuilder = TbKafkaProducerTemplate.builder();\n    requestBuilder.settings(kafkaSettings);\n    requestBuilder.clientId(\"monolith-rule-engine-\" + serviceInfoProvider.getServiceId());\n    requestBuilder.defaultTopic(topicService.buildTopicName(ruleEngineSettings.getRuleEngineTopic()));\n    requestBuilder.admin(ruleEngineAdmin);\n    return requestBuilder.build();\n}", "CodeBleu_score": 93.904511951135}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToRuleEngineMsg>> createRuleEngineMsgProducer(){\n\t    TbKafkaProducerTemplate.TbKafkaProducerTemplateBuilder<TbProtoQueueMsg<ToRuleEngineMsg>> requestBuilder = TbKafkaProducerTemplate.builder();\n    requestBuilder.settings(kafkaSettings);\n    requestBuilder.clientId(\"monolith-rule-engine-\" + serviceInfoProvider.getServiceId());\n    requestBuilder.defaultTopic(topicService.buildTopicName(ruleEngineSettings.getRuleEngineTopic()));\n    requestBuilder.admin(ruleEngineAdmin);\n    return requestBuilder.build();\n}", "CodeBleu_score": 93.904511951135}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToRuleEngineMsg>> createRuleEngineMsgProducer(){\n\t    TbKafkaProducerTemplate.TbKafkaProducerTemplateBuilder<TbProtoQueueMsg<ToRuleEngineMsg>> requestBuilder = TbKafkaProducerTemplate.builder();\n    requestBuilder.settings(kafkaSettings);\n    requestBuilder.clientId(\"monolith-rule-engine-\" + serviceInfoProvider.getServiceId());\n    requestBuilder.defaultTopic(topicService.buildTopicName(ruleEngineSettings.getRuleEngineTopic()));\n    requestBuilder.admin(ruleEngineAdmin);\n    return requestBuilder.build();\n}", "CodeBleu_score": 93.904511951135}]}
{"instance_id": "886264f5ca27", "generation_result": [{"code": "private void startLogScheduling(){\n\t    long timeout = kafkaSettings.getConsumerConfigs().get(ConsumerConfig.REQUEST_TIMEOUT_MS_CONFIG, Long.class);\n    statsPrintScheduler.scheduleWithFixedDelay(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    if (statsConfig.getEnabled()) {\n                        logConsumerGroupStats();\n                    }\n                } catch (Exception e) {\n                    log.warn(\\\"Failed to log consumer group stats\\\", e);\n                }\n            }\n        }, 0, timeout, TimeUnit.MILLISECONDS);\n    }", "CodeBleu_score": 16.360259026602918}, {"code": "private void startLogScheduling(){\n\t", "CodeBleu_score": 0.6449045691040067}, {"code": "private void startLogScheduling(){\n\t    long timeoutMs = kafkaSettings.getConsumerConfigs().get(ConsumerConfig.MAX_POLL_RECORDS_CONFIG);\n    long statsPrintPeriodMs = statsConfig.getStatsPrintPeriodMs();\n    statsPrintScheduler.scheduleAtFixedRate(() -> {\n            if (statsConfig.getEnabled()) {\n                try {\n                    Map<String, List<TopicPartition>> groupTopics = consumer.listTopics();\n                    for (String groupId : groupTopics.keySet()) {\n                        if (monitoredGroups.contains(groupId)) {\n                            List<TopicPartition> partitions = groupTopics.get(groupId);\n                            Map<TopicPartition, OffsetAndMetadata> endOffsets = consumer.endOffsets(partitions);\n                            Map<TopicPartition, Long> groupOffsets = consumer.committed(partitions);\n                            for (TopicPartition partition : partitions) {\n                                long endOffset = endOffsets.get(partition).offset();\n                                long groupOffset = groupOffsets.get(partition);\n                                if (endOffset > groupOffset) {\n                                    long lag = endOffset - groupOffset;\n                                    log.warn(\\\"[{}] Topic {} has lag of {} records\\\", groupId, partition.topic(), lag);\n                                }\n                            }\n                        }\n                    }\n                } catch (Exception e) {\n                    log.warn(\\\"[{}] Failed to load consumer stats\\\", groupId, e);\n                }\n            }\n        }, statsPrintPeriodMs, statsPrintPeriodMs, TimeUnit.MILLISECONDS);\n}", "CodeBleu_score": 40.97174960561247}]}
{"instance_id": "81553181cdc8", "generation_result": [{"code": "protected Properties toAdminProps(){\n\t    Properties props = toProps();\n    props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, servers);\n    props.put(AdminClientConfig.RETRIES_CONFIG, retries);\n    return props;\n}", "CodeBleu_score": 99.68740938761323}, {"code": "protected Properties toAdminProps(){\n\t    Properties props = toProps();\n    props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, servers);\n    props.put(AdminClientConfig.RETRIES_CONFIG, retries);\n    return props;\n}", "CodeBleu_score": 99.68740938761323}, {"code": "protected Properties toAdminProps(){\n\t    Properties props = toProps();\n    props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, servers);\n    props.put(AdminClientConfig.RETRIES_CONFIG, retries);\n    return props;\n}", "CodeBleu_score": 99.68740938761323}]}
{"instance_id": "3c8bf3ff31b7", "generation_result": [{"code": "public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group){\n\t\t\tString scopedName = getScopedName(metricName, group);\n\t\tMap<String, String> tags = getTags(metricName, group);\n\t\tif (metric instanceof Counter) {\n\t\t\tMetricEvent event = new MetricEvent(scopedName, tags);\n\t\t\tcounters.put((Counter) metric, event);\n\t\t} else if (metric instanceof Gauge) {\n\t\t\tMetricEvent event = new MetricEvent(scopedName, tags);\n\t\t\tgauges.put((Gauge<?>) metric, event);\n\t\t} else if (metric instanceof Histogram) {\n\t\t\tMetricEvent event = new MetricEvent(scopedName, tags);\n\t\t\thistograms.put((Histogram) metric, event);\n\t\t} else if (metric instanceof Meter) {\n\t\t\tMetricEvent event = new MetricEvent(scopedName, tags);\n\t\t\tmeters.put((Meter) metric, event);\n\t\t} else {\n\t\t\tLOG.warn(\\\"Metric type {} is not supported\\\", metric.getClass().getSimpleName());\n\t\t}\n\t}", "CodeBleu_score": 60.83312680173536}, {"code": "public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group){\n\t\t\tMetricEvent metricEvent = createMetricEvent(metricName, group);\n\t\tif (metric instanceof Counter) {\n\t\t\tCounter counter = (Counter) metric;\n\t\t\tmetricEvent.setValue(counter.getCount());\n\t\t\tcounters.put(counter, metricEvent);\n\t\t} else if (metric instanceof Gauge) {\n\t\t\tGauge<?> gauge = (Gauge<?>) metric;\n\t\t\tmetricEvent.setValue(gauge.getValue());\n\t\t\tgauges.put(gauge, metricEvent);\n\t\t} else if (metric instanceof Histogram) {\n\t\t\tHistogram histogram = (Histogram) metric;\n\t\t\tmetricEvent.setValue(histogram.getCount());\n\t\t\thistograms.put(histogram, metricEvent);\n\t\t} else if (metric instanceof Meter) {\n\t\t\tMeter meter = (Meter) metric;\n\t\t\tmetricEvent.setValue(meter.getCount());\n\t\t\tmeters.put(meter, metricEvent);\n\t\t} else {\n\t\t\tLOG.warn(\\\"Metric type is not supported: {}\\\", metric.getClass().getSimpleName());\n\t\t}\n\t}", "CodeBleu_score": 49.12071611288719}, {"code": "public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group){\n\t\t\tswitch (metric.getType()) {\n\t\t\tcase GAUGE:\n\t\t\t\tGauge<?> gauge = (Gauge<?>) metric;\n\t\t\t\tMetricEvent gaugeEvent = new MetricEvent(metricName, getTags(group), gauge.getValue());\n\t\t\t\tgauges.put(gauge, gaugeEvent);\n\t\t\t\tbreak;\n\t\t\tcase COUNTER:\n\t\t\t\tCounter counter = (Counter) metric;\n\t\t\t\tMetricEvent counterEvent = new MetricEvent(metricName, getTags(group), counter.getCount());\n\t\t\t\tcounters.put(counter, counterEvent);\n\t\t\t\tbreak;\n\t\t\tcase HISTOGRAM:\n\t\t\t\tHistogram histogram = (Histogram) metric;\n\t\t\t\tMetricEvent histogramEvent = new MetricEvent(metricName, getTags(group), histogram.getCount(), histogram.getMin(), histogram.getMax(), histogram.getMean(), histogram.getStdDev(), histogram.getMedian(), histogram.get75thPercentile(), histogram.get95thPercentile(), histogram.get98thPercentile(), histogram.get99thPercentile(), histogram.get999thPercentile());\n\t\t\t\thistograms.put(histogram, histogramEvent);\n\t\t\t\tbreak;\n\t\t\tcase METER:\n\t\t\t\tMeter meter = (Meter) metric;\n\t\t\t\tMetricEvent meterEvent = new MetricEvent(metricName, getTags(group), meter.getCount(), meter.getRate1(), meter.getRate5(), meter.getRate15(), meter.getRateMean());\n\t\t\t\tmeters.put(meter, meterEvent);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tLOG.warn(\\\"Metric type {} is not supported\\\", metric.getType());\n\t\t\t\tbreak;\n\t\t}\n\t}", "CodeBleu_score": 30.614564923574704}]}
{"instance_id": "77c6addc9b99", "generation_result": [{"code": "static MetricEvent addFields(MetricEvent metricEvent, String field, Gauge<?> gauge){\n\t    Object value = gauge.getValue();\n    if (value instanceof Number) {\n        metricEvent.addField(field, (Number) value);\n    } else if (value instanceof Boolean) {\n        metricEvent.addField(field, (Boolean) value);\n    } else if (value instanceof String) {\n        metricEvent.addField(field, (String) value);\n    } else {\n        metricEvent.addField(field, value.toString());\n    }\n    return metricEvent;\n}", "CodeBleu_score": 45.884042877531236}, {"code": "static MetricEvent addFields(MetricEvent metricEvent, String field, Gauge<?> gauge){\n\t    Object value = gauge.getValue();\n    if (value == null) {\n        return metricEvent;\n    }\n    if (metricEvent.getFields().isEmpty()) {\n        metricEvent.setFields(new HashMap<>());\n    }\n    if (value instanceof Number) {\n        metricEvent.getFields().put(field, (Number) value);\n    } else if (value instanceof String) {\n        metricEvent.getFields().put(field, (String) value);\n    } else {\n        metricEvent.getFields().put(field, value.toString());\n    }\n    return metricEvent;\n}", "CodeBleu_score": 47.184992792637985}, {"code": "static MetricEvent addFields(MetricEvent metricEvent, String field, Gauge<?> gauge){\n\t    Object value = gauge.getValue();\n    if (metricEvent.getFields() == null) {\n        metricEvent.setFields(new HashMap<String, Object>());\n    }\n    if (value instanceof Number) {\n        metricEvent.getFields().put(field, (Number) value);\n    } else if (value instanceof Boolean) {\n        metricEvent.getFields().put(field, value);\n    } else {\n        metricEvent.getFields().put(field, value.toString());\n    }\n    return metricEvent;\n}", "CodeBleu_score": 45.185547152467734}]}
{"instance_id": "a48971ffb3e9", "generation_result": [{"code": "static MetricEvent addKafkaLagMetricFields(MetricEvent metricEvent, Long timestamp, Gauge<?> gauge){\n\t", "CodeBleu_score": 2.8929956351891004}, {"code": "static MetricEvent addKafkaLagMetricFields(MetricEvent metricEvent, Long timestamp, Gauge<?> gauge){\n\t\tObject value = gauge.getValue();\n\tMap<String, Object> fields = metricEvent.getFields();\n\tif (fields == null) {\n\t\tfields = new HashMap<>();\n\t\tmetricEvent.setFields(fields);\n\t}\n\tif (value instanceof String) {\n\t\tString[] parts = ((String) value).split(\\\",\\\");\n\t\tMap<String, String> currentOffsets = new HashMap<>();\n\t\tMap<String, String> dataTimestampOffsets = new HashMap<>();\n\t\tMap<String, String> committedOffsets = new HashMap<>();\n\t\tfor (String part : parts) {\n\t\t\tString[] keyValue = part.split(\\\"=\\\");\n\t\t\tif (keyValue.length != 2) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tString key = keyValue[0];\n\t\t\tString value = keyValue[1];\n\t\t\tif (key.contains(\\\"currentOffsets\\\")) {\n\t\t\t\tString[] topicParts = key.split(\\\"_\\\");\n\t\t\t\tString topic = topicParts[topicParts.length - 1];\n\t\t\t\tcurrentOffsets.put(topic, value);\n\t\t\t} else if (key.contains(\\\"dataTimestampOffsets\\\")) {\n\t\t\t\tString[] topicParts = key.split(\\\"_\\\");\n\t\t\t\tString topic = topicParts[topicParts.length - 1];\n\t\t\t\tdataTimestampOffsets.put(topic, value);\n\t\t\t} else if (key.contains(\\\"committedOffsets\\\")) {\n\t\t\t\tString[] topicParts = key.split(\\\"_\\\");\n\t\t\t\tString topic = topicParts[topicParts.length - 1];\n\t\t\t\tcommittedOffsets.put(topic, value);\n\t\t\t}\n\t\t}\n\t\tfields.put(\\\"currentOffsets\\\", currentOffsets);\n\t\tfields.put(\\\"dataTimestampOffsets\\\", dataTimestampOffsets);\n\t\tfields.put(\\\"committedOffsets\\\", committedOffsets);\n\t\tmetricEvent.setTimestamp(timestamp);\n\t\treturn metricEvent;\n\t}\n\treturn null;\n}", "CodeBleu_score": 35.27190216460802}, {"code": "static MetricEvent addKafkaLagMetricFields(MetricEvent metricEvent, Long timestamp, Gauge<?> gauge){\n\t", "CodeBleu_score": 2.8929956351891004}]}
{"instance_id": "c2080c299bb0", "generation_result": [{"code": "public static DataStreamSource<MetricEvent> buildSource(StreamExecutionEnvironment env, String topic, Long time) throws IllegalAccessException{\n\t    ParameterTool parameter = (ParameterTool) env.getConfig().getGlobalJobParameters();\n    Properties props = buildKafkaProps(parameter);\n    FlinkKafkaConsumer<MetricEvent> consumer = new FlinkKafkaConsumer<>(topic, new MetricSchema(), props);\n    if (time > 0) {\n        Map<TopicPartition, Long> specificStartingOffsets = getSpecificStartingOffsets(topic, time);\n        consumer.setStartingOffsets(specificStartingOffsets);\n    }\n    return env.addSource(consumer);\n}", "CodeBleu_score": 69.38246946465665}, {"code": "public static DataStreamSource<MetricEvent> buildSource(StreamExecutionEnvironment env, String topic, Long time) throws IllegalAccessException{\n\t    ParameterTool parameter = (ParameterTool) env.getConfig().getGlobalJobParameters();\n    Properties props = buildKafkaProps(parameter);\n    FlinkKafkaConsumer<MetricEvent> consumer = new FlinkKafkaConsumer<>(topic, new MetricSchema(), props);\n    if (time > 0) {\n        consumer.setStartFromSpecificOffsets(getOffsets(props, topic, time));\n    }\n    return env.addSource(consumer);\n}", "CodeBleu_score": 64.60734967718777}, {"code": "public static DataStreamSource<MetricEvent> buildSource(StreamExecutionEnvironment env, String topic, Long time) throws IllegalAccessException{\n\t    ParameterTool parameter = (ParameterTool) env.getConfig().getGlobalJobParameters();\n    Properties props = buildKafkaProps(parameter);\n    FlinkKafkaConsumer<MetricEvent> consumer = new FlinkKafkaConsumer<>(topic, new MetricSchema(), props);\n    if (time > 0) {\n        Map<TopicPartition, Long> offsets = getOffsets(props, topic, time);\n        consumer.setStartFromSpecificOffsets(offsets);\n    }\n    return env.addSource(consumer);\n}", "CodeBleu_score": 75.09926413021792}]}
{"instance_id": "5e828afbe8e4", "generation_result": [{"code": "private static Map<KafkaTopicPartition, Long> buildOffsetByTime(Properties props, ParameterTool parameterTool, Long time){\n\t    String groupId = parameterTool.get(PropertiesConstants.KAFKA_GROUP_ID, DEFAULT_KAFKA_GROUP_ID);\n    props.put(\\\"group.id\\\", groupId + \\\"-\\\" + time);\n    KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n    List<PartitionInfo> partitions = consumer.partitionsFor(\\\"metrics\\\");\n    Map<TopicPartition, OffsetAndTimestamp> offsets = new HashMap<>();\n    for (PartitionInfo partition : partitions) {\n            offsets.put(new TopicPartition(partition.topic(), partition.partition()), new OffsetAndTimestamp(time, time));\n        }\n        Map<TopicPartition, OffsetAndTimestamp> offsets = consumer.offsetsForTimes(offsets);\n        Map<KafkaTopicPartition, Long> partitionOffset = new HashMap<>();\n        for (TopicPartition topicPartition : offsets.keySet()) {\n            partitionOffset.put(new KafkaTopicPartition(topicPartition.topic(), topicPartition.partition()), offsets.get(topicPartition).offset());\n        }\n        consumer.close();\n        return partitionOffset;\n    }", "CodeBleu_score": 33.17511074163874}, {"code": "private static Map<KafkaTopicPartition, Long> buildOffsetByTime(Properties props, ParameterTool parameterTool, Long time){\n\t    props.put(\\\"group.id\\\", \\\"zhisheng-flink-consumer-offset-reset-\\\" + time);\n    KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n    List<PartitionInfo> partitionInfos = consumer.partitionsFor(parameterTool.getRequired(PropertiesConstants.METRICS_TOPIC));\n    Map<TopicPartition, Long> partitionTimeMap = new HashMap<>();\n    partitionInfos.forEach(partitionInfo -> partitionTimeMap.put(new TopicPartition(partitionInfo.topic(), partitionInfo.partition()), time));\n    Map<TopicPartition, OffsetAndTimestamp> offsets = consumer.offsetsForTimes(partitionTimeMap);\n    Map<KafkaTopicPartition, Long> partitionOffset = new HashMap<>();\n    offsets.forEach((key, value) -> partitionOffset.put(new KafkaTopicPartition(key.topic(), key.partition()), value.offset()));\n    consumer.close();\n    return partitionOffset;\n}", "CodeBleu_score": 37.18090120561346}, {"code": "private static Map<KafkaTopicPartition, Long> buildOffsetByTime(Properties props, ParameterTool parameterTool, Long time){\n\t    String groupId = parameterTool.get(PropertiesConstants.KAFKA_GROUP_ID, DEFAULT_KAFKA_GROUP_ID);\n    props.put(\\\"group.id\\\", groupId + \\\"-\\\" + time);\n    KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n    List<PartitionInfo> partitionInfos = consumer.partitionsFor(parameterTool.get(PropertiesConstants.METRICS_TOPIC));\n    Map<TopicPartition, Long> partitionTimeMap = new HashMap<>();\n    partitionInfos.forEach(partitionInfo -> partitionTimeMap.put(new TopicPartition(partitionInfo.topic(), partitionInfo.partition()), time));\n    Map<TopicPartition, OffsetAndTimestamp> offsets = consumer.offsetsForTimes(partitionTimeMap);\n    Map<KafkaTopicPartition, Long> partitionOffset = new HashMap<>();\n    offsets.forEach((topicPartition, offsetAndTimestamp) -> partitionOffset.put(new KafkaTopicPartition(topicPartition.topic(), topicPartition.partition()), offsetAndTimestamp.offset()));\n    consumer.close();\n    return partitionOffset;\n}", "CodeBleu_score": 33.66707918722505}]}
{"instance_id": "28da89f56f67", "generation_result": [{"code": "public static void writeToKafka() throws InterruptedException{\n\t    Properties props = new Properties();\n    props.put(\\\"bootstrap.servers\\\", broker_list);\n    props.put(\\\"key.serializer\\\", \\\"org.apache.kafka.common.serialization.StringSerializer\\\");\n    props.put(\\\"value.serializer\\\", \\\"org.apache.kafka.common.serialization.StringSerializer\\\");\n    KafkaProducer producer = new KafkaProducer<String, String>(props);\n    MetricEvent event = new MetricEvent();\n    event.setTimestamp(System.currentTimeMillis());\n    event.setName(\\\"mem\\\");\n    Map<String, String> tags = new HashMap<>();\n    tags.put(\\\"cluster\\\", \\\"zhisheng\\\");\n    tags.put(\\\"host_ip\\\", \\\"127.0.0.1\\\");\n    event.setTags(tags);\n    Map<String, Object> fields = new HashMap<>();\n    fields.put(\\\"used_percent\\\", 90D);\n    fields.put(\\\"max\\\", 20000L);\n    fields.put(\\\"used\\\", 10000L);\n    event.setFields(fields);\n    ProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, null, null, GsonUtil.toJson(event));\n    producer.send(record);\n    System.out.println(\\\"\u53d1\u9001\u6570\u636e: \\\" + GsonUtil.toJson(event));\n    producer.flush();\n}", "CodeBleu_score": 37.20848789872203}, {"code": "public static void writeToKafka() throws InterruptedException{\n\t    Properties props = new Properties();\n    props.setProperty(\\\"bootstrap.servers\\\", broker_list);\n    props.setProperty(\\\"key.serializer\\\", \\\"org.apache.kafka.common.serialization.StringSerializer\\\");\n    props.setProperty(\\\"value.serializer\\\", \\\"org.apache.kafka.common.serialization.StringSerializer\\\");\n    KafkaProducer<String, String> producer = new KafkaProducer<>(props);\n\n    MetricEvent metricEvent = new MetricEvent();\n    metricEvent.setTimestamp(System.currentTimeMillis());\n    metricEvent.setName(\\\"mem\\\");\n    Map<String, String> tags = new HashMap<>();\n    tags.put(\\\"cluster\\\", \\\"daily\\\");\n    tags.put(\\\"host_ip\\\", \\\"192.168.10.100\\\");\n    metricEvent.setTags(tags);\n    Map<String, Object> fields = new HashMap<>();\n    fields.put(\\\"used_percent\\\", 90D);\n    fields.put(\\\"max\\\", 2734016k);\n    fields.put(\\\"used\\\", 1720704k);\n    fields.put(\\\"init\\\", 2867148k);\n    fields.put(\\\"used_percent\\\", 93D);\n    metricEvent.setFields(fields);\n    ProducerRecord<String, String> record = new ProducerRecord<>(topic, null, null, GsonUtil.toJson(metricEvent));\n    producer.send(record);\n    System.out.println(\\\"\u53d1\u9001\u6570\u636e: \\\" + GsonUtil.toJson(metricEvent));\n    producer.flush();\n}", "CodeBleu_score": 33.61097065600118}, {"code": "public static void writeToKafka() throws InterruptedException{\n\t    Properties properties = new Properties();\n    properties.setProperty(\\\"bootstrap.servers\\\", broker_list);\n    properties.setProperty(\\\"key.serializer\\\", \\\"org.apache.kafka.common.serialization.StringSerializer\\\");\n    properties.setProperty(\\\"value.serializer\\\", \\\"org.apache.kafka.common.serialization.StringSerializer\\\");\n    KafkaProducer<String, String> producer = new KafkaProducer<>(properties);\n\n\n    MetricEvent metricEvent = new MetricEvent();\n    metricEvent.setTimestamp(System.currentTimeMillis());\n    metricEvent.setName(\\\"mem\\\");\n    Map<String, String> tags = new HashMap<>();\n    tags.put(\\\"cluster\\\", \\\"zhisheng\\\");\n    tags.put(\\\"host_ip\\\", \\\"127.0.0.1\\\");\n    metricEvent.setTags(tags);\n    Map<String, Object> fields = new HashMap<>();\n    fields.put(\\\"used_percent\\\", 90D);\n    fields.put(\\\"max\\\", 2734016k);\n    fields.put(\\\"used\\\", 1720448k);\n    fields.put(\\\"init\\\", 2867148k);\n    fields.put(\\\"free\\\", 913568k);\n    metricEvent.setFields(fields);\n\n    ProducerRecord<String, String> record = new ProducerRecord<>(topic, null, null, GsonUtil.toJson(metricEvent));\n    producer.send(record);\n    System.out.println(\\\"\u53d1\u9001\u6570\u636e: \\\" + GsonUtil.toJson(metricEvent));\n    producer.flush();\n}", "CodeBleu_score": 32.03048592136062}]}
{"instance_id": "14bffe09c25a", "generation_result": [{"code": "public void append(org.apache.logging.log4j.core.LogEvent event){\n\t    try {\n        if (level != null && !level.equalsIgnoreCase(event.getLevel().toString()) || event.getLoggerName().contains(\\\"xxx\\\")) {\n            return;\n        }\n\n        LogEvent logEvent = new LogEvent();\n        logEvent.setAppId(appId);\n        logEvent.setContainerId(containerId);\n        logEvent.setContainerType(containerType);\n        logEvent.setTaskName(taskName);\n        logEvent.setTaskId(taskId);\n        logEvent.setNodeIp(nodeIp);\n        logEvent.setSource(source);\n        logEvent.setLevel(event.getLevel().toString());\n        logEvent.setLoggerName(event.getLoggerName());\n        logEvent.setThreadName(event.getThreadName());\n        logEvent.setMessage(event.getMessage().getFormattedMessage());\n        logEvent.setTimestamp(event.getTimeMillis());\n\n        Map<String, String> mdc = new HashMap<>();\n        for (Map.Entry<String, String> entry : event.getContextData().toMap().entrySet()) {\n            mdc.put(entry.getKey(), entry.getValue().getValue());\n        }\n        logEvent.setMdc(mdc);\n        logEvent.setStackTrace(ExceptionUtil.getStackTrace(event.getThrown()));\n\n        String value = JacksonUtil.writeValueAsString(logEvent);\n        producer.send(new ProducerRecord<>(topic, value));\n    } catch (JsonProcessingException e) {\n        log.warn(\\\"Failed to process log event: {}\\\", e.getMessage());\n    }\n}", "CodeBleu_score": 42.3417234503986}, {"code": "public void append(org.apache.logging.log4j.core.LogEvent event){\n\t        if (event == null || event.getMessage() == null) {\n            return;\n        }\n\n        String log = new String(getLayout().toByteArray(event));\n        if (level != null) {\n            if (!level.contains(event.getLevel().toString())) {\n                return;\n            }\n        }\n\n        if (source != null) {\n            if (log.contains(source)) {\n                return;\n            }\n        }\n\n        try {\n            LogEvent logEvent = new LogEvent();\n            logEvent.setAppId(appId);\n            logEvent.setContainerId(containerId);\n            logEvent.setContainerType(containerType);\n            logEvent.setTaskName(taskName);\n            logEvent.setTaskId(taskId);\n            logEvent.setNodeIp(nodeIp);\n            logEvent.setLog(log);\n            logEvent.setLevel(event.getLevel().toString());\n            logEvent.setThreadName(event.getThreadName());\n            logEvent.setLoggerName(event.getLoggerName());\n            logEvent.setSourceClassName(event.getSource().getClassName());\n            logEvent.setSourceMethodName(event.getSource().getMethodName());\n            logEvent.setTimeStamp(event.getTimeMillis());\n            logEvent.setThreadId(event.getThreadId());\n            logEvent.setThreadPriority(event.getThreadPriority());\n            logEvent.setThreadDaemon(event.getThreadDaemon());\n\n            String value = JacksonUtil.writeValueAsString(logEvent);\n            producer.send(new ProducerRecord<>(topic, UUID.randomUUID().toString(), value));\n        } catch (JsonProcessingException e) {\n            log.warn(\\\"Failed to serialize log event to json\\\", e);\n        } catch (Exception e) {\n            log.warn(\\\"Failed to send log event to kafka topic\\\", e);\n        }\n    }", "CodeBleu_score": 31.540042816248853}, {"code": "public void append(org.apache.logging.log4j.core.LogEvent event){\n\t    if (isFiltered(event)) {\n            return;\n        }\n\n        if (event.getLevel().isLessSpecificThan(org.apache.logging.log4j.Level.toLevel(level))) {\n            return;\n        }\n\n        if (event.getLoggerName().contains(\\\"xxx\\\")) {\n            return;\n        }\n\n        String log = new String(getLayout().toByteArray(event));\n\n        LogEvent logEvent = new LogEvent();\n        logEvent.setAppId(appId);\n        logEvent.setContainerId(containerId);\n        logEvent.setContainerType(containerType);\n        logEvent.setTaskName(taskName);\n        logEvent.setTaskId(taskId);\n        logEvent.setNodeIp(nodeIp);\n        logEvent.setSource(source);\n        logEvent.setLevel(event.getLevel().toString());\n        logEvent.setLoggerName(event.getLoggerName());\n        logEvent.setThreadName(event.getThreadName());\n        logEvent.setMessage(log);\n        logEvent.setTimestamp(event.getTimeMillis());\n\n        try {\n            String value = JacksonUtil.toJson(logEvent);\n            producer.send(new ProducerRecord<>(topic, UUID.randomUUID().toString(), value));\n        } catch (JsonProcessingException e) {\n            log.warn(\\\"JsonProcessingException: {}\\\", ExceptionUtil.getStackTrace(e));\n        } catch (Exception e) {\n            log.warn(\\\"Exception: {}\\\", ExceptionUtil.getStackTrace(e));\n        }\n    }", "CodeBleu_score": 43.426528385770425}]}
{"instance_id": "a9e0786fb5c1", "generation_result": [{"code": "func ValidateTopicSuffixMethod(method string) error{\n\t\tfor _, m := range ValidTopicSuffixMethods {\n\t\tif m == method {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn fmt.Errorf(\\\"unknown topic suffix method: %s\\\", method)\n}", "CodeBleu_score": 66.07011377774516}, {"code": "func ValidateTopicSuffixMethod(method string) error{\n\t\tfor _, validMethod := range ValidTopicSuffixMethods {\n\t\tif method == validMethod {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn fmt.Errorf(\\\"unknown topic suffix method: %s\\\", method)\n}", "CodeBleu_score": 77.74117126722744}, {"code": "func ValidateTopicSuffixMethod(method string) error{\n\t\tfor _, m := range ValidTopicSuffixMethods {\n\t\tif m == method {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn fmt.Errorf(\\\"unknown topic suffix method: %s\\\", method)\n}", "CodeBleu_score": 66.07011377774516}]}
{"instance_id": "9b88d720d48a", "generation_result": [{"code": "func (k *Kafka) routingKey(metric telegraf.Metric) (string, error) {\n\t\tif k.RoutingTag != \"\" {\n\t\tif t, ok := metric.GetTag(k.RoutingTag); ok {\n\t\t\treturn t, nil\n\t\t}\n\t}\n\n\tif k.RoutingKey == \"random\" {\n\t\tuuid, err := uuid.NewV4()\n\t\tif err != nil {\n\t\t\treturn \"\", fmt.Errorf(\"generating UUID for routing key failed: %w\", err)\n\t\t}\n\t\treturn uuid.String(), nil\n\t}\n\n\treturn k.RoutingKey, nil\n}", "CodeBleu_score": 75.97873810914969}, {"code": "func (k *Kafka) routingKey(metric telegraf.Metric) (string, error) {\n\t\tif k.RoutingTag != \"\" {\n\t\tif t, ok := metric.GetTag(k.RoutingTag); ok {\n\t\t\treturn t, nil\n\t\t}\n\t}\n\n\tif k.RoutingKey == \"random\" {\n\t\tid, err := uuid.NewV4()\n\t\tif err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\treturn id.String(), nil\n\t}\n\n\treturn k.RoutingKey, nil\n}", "CodeBleu_score": 83.44061307812487}, {"code": "func (k *Kafka) routingKey(metric telegraf.Metric) (string, error) {\n\t\tif k.RoutingTag != \"\" {\n\t\tif v, ok := metric.GetTag(k.RoutingTag); ok {\n\t\t\treturn v, nil\n\t\t}\n\t}\n\tif k.RoutingKey == \"random\" {\n\t\tid, err := uuid.NewV4()\n\t\tif err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\treturn id.String(), nil\n\t}\n\treturn k.RoutingKey, nil\n}", "CodeBleu_score": 83.44061307812487}]}
{"instance_id": "dc35e80e7f8d", "generation_result": [{"code": "func (k *KafkaConsumer) compileTopicRegexps() error{\n\t\tk.regexps = make([]regexp.Regexp, len(k.TopicRegexps))\n\tfor i, topicRegexp := range k.TopicRegexps {\n\t\tr, err := regexp.Compile(topicRegexp)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"error compiling topic regexp %q: %w\", topicRegexp, err)\n\t\t}\n\t\tk.regexps[i] = *r\n\t}\n\treturn nil\n}", "CodeBleu_score": 57.51987191541157}, {"code": "func (k *KafkaConsumer) compileTopicRegexps() error{\n\t\tk.regexps = make([]regexp.Regexp, len(k.TopicRegexps))\n\tfor i, topicRegexp := range k.TopicRegexps {\n\t\tregexp, err := regexp.Compile(topicRegexp)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"invalid regexp %q: %w\", topicRegexp, err)\n\t\t}\n\t\tk.regexps[i] = *regexp\n\t}\n\treturn nil\n}", "CodeBleu_score": 57.21620302148017}, {"code": "func (k *KafkaConsumer) compileTopicRegexps() error{\n\t\tk.regexps = make([]regexp.Regexp, len(k.TopicRegexps))\n\tfor i, regexpStr := range k.TopicRegexps {\n\t\tr, err := regexp.Compile(regexpStr)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"invalid regexp %q: %w\", regexpStr, err)\n\t\t}\n\t\tk.regexps[i] = *r\n\t}\n\treturn nil\n}", "CodeBleu_score": 57.604770752451074}]}
{"instance_id": "daf09ba144b2", "generation_result": [{"code": "func (h *ConsumerGroupHandler) onDelivery(track telegraf.DeliveryInfo){\n\t\th.mu.Lock()\n\tdefer h.mu.Unlock()\n\tmsg, ok := h.undelivered[track.DeliveryID]\n\tif !ok {\n\t\treturn\n\t}\n\tmsg.session.MarkMessage(msg.message, \\\"\\\")\n\tdelete(h.undelivered, track.DeliveryID)\n\th.sem <- empty{}\n}", "CodeBleu_score": 51.024591260383254}, {"code": "func (h *ConsumerGroupHandler) onDelivery(track telegraf.DeliveryInfo){\n\t\th.mu.Lock()\n\tdefer h.mu.Unlock()\n\n\tmsg, ok := h.undelivered[track.ID]\n\tif !ok {\n\t\th.log.Errorf(\\\"delivery: %v: message not found\\\", track.ID)\n\t\treturn\n\t}\n\tdelete(h.undelivered, track.ID)\n\n\tmsg.session.MarkMessage(msg.message, \\\"\\\", track.Err)\n\th.sem <- empty{}\n}", "CodeBleu_score": 63.59564833501338}, {"code": "func (h *ConsumerGroupHandler) onDelivery(track telegraf.DeliveryInfo){\n\t\th.mu.Lock()\n\tdefer h.mu.Unlock()\n\n\tmsg, ok := h.undelivered[track.DeliveryID]\n\tif !ok {\n\t\th.log.Errorf(\\\"could not find message with delivery ID %v\\\", track.DeliveryID)\n\t\treturn\n\t}\n\tif track.Delivered {\n\t\tmsg.session.MarkMessage(msg.message, \\\"\\\") //nolint:errcheck // ignore returned error as we cannot do anything about it anyway\n\t}\n\tdelete(h.undelivered, track.DeliveryID)\n\th.sem <- empty{}\n}", "CodeBleu_score": 60.670146470581464}]}
{"instance_id": "8ecf2a1efead", "generation_result": [{"code": "func (h *ConsumerGroupHandler) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error{\n\t", "CodeBleu_score": 3.1071579261949545}, {"code": "func (h *ConsumerGroupHandler) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error{\n\t", "CodeBleu_score": 3.1071579261949545}, {"code": "func (h *ConsumerGroupHandler) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error{\n\t", "CodeBleu_score": 3.1071579261949545}]}
{"instance_id": "eba9dafa99ab", "generation_result": [{"code": "def validateLogkafkaId(logkafka_id: String){\n\t  checkCondition(logkafka_id.length > 0, LogkafkaIdEmpty)\n    checkCondition(!logkafka_id.equals(\\\".\\\"), InvalidLogkafkaId)\n    checkCondition(!logkafka_id.equals(\\\"..\\\"), InvalidLogkafkaId)\n    checkCondition(logkafka_id.length <= maxNameLength, InvalidLogkafkaIdLength)\n    rgx.findFirstIn(logkafka_id) match {\n      case Some(t) =>\n        checkCondition(t.equals(logkafka_id), IllegalCharacterInLogkafkaId(logkafka_id))\n      case None =>\n        checkCondition(false, IllegalCharacterInLogkafkaId(logkafka_id))\n    }\n  }", "CodeBleu_score": 81.90319135069231}, {"code": "def validateLogkafkaId(logkafka_id: String){\n\t  checkCondition(logkafka_id.length > 0, LogkafkaIdEmpty)\n  checkCondition(logkafka_id != \".\", LogkafkaIdDot)\n  checkCondition(logkafka_id != \"..\", LogkafkaIdDotDot)\n  checkCondition(logkafka_id.length <= maxNameLength, InvalidLogkafkaIdLength)\n  checkCondition(!illRgxPath.findFirstIn(logkafka_id).isDefined, IllegalCharacterInLogkafkaId(logkafka_id))\n}", "CodeBleu_score": 54.35689159609897}, {"code": "def validateLogkafkaId(logkafka_id: String){\n\t  checkCondition(logkafka_id != null, LogkafkaIdNull)\n    checkCondition(logkafka_id.length > 0, LogkafkaIdEmpty)\n    checkCondition(logkafka_id != \\\".\\\", LogkafkaIdDot)\n    checkCondition(logkafka_id != \\\"..\\\", LogkafkaIdDotDot)\n    checkCondition(logkafka_id.length <= maxNameLength, LogkafkaIdTooLong)\n    checkCondition(!illRgxPath.findFirstIn(logkafka_id).isDefined, IllegalCharacterInLogkafkaId(logkafka_id))\n  }", "CodeBleu_score": 54.93988182085475}]}
{"instance_id": "45d5aefd3f6c", "generation_result": [{"code": "  private[this] def tryWithKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => FOutput)\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    val future = kafkaManagerActor ? msg\n    future.mapTo[ApiError \\/ Output]\n      .recoverWith { case NonFatal(ex) =>\n        warn(s\\\"Failed to process message ${msg.toString} : ${ex.getMessage}\\\")\n        Future.successful(ApiError(s\\\"Failed to process message ${msg.toString} : ${ex.getMessage}\\\"))\n      }\n      .map(_.fold(err => {\n        warn(s\\\"Failed to process message ${msg.toString} : ${err.message}\\\")\n        err\n      }, fn))\n  }", "CodeBleu_score": 16.962273015577626}, {"code": "  private[this] def tryWithKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => FOutput)\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    implicit val timeout: Timeout = apiTimeout\n    implicit val ec: ExecutionContext = apiExecutionContext\n    kafkaManagerActor ? msg map {\n      case response: ApiError =>\n        error(s\\\"Failed to process message ${tag.runtimeClass.getSimpleName} : ${response.message}\\\")\n        response\n      case response: Output =>\n        try {\n          fn(response)\n        } catch {\n          case e: Exception =>\n            error(s\\\"Failed to process message ${tag.runtimeClass.getSimpleName} : ${e.getMessage}\\\")\n            ApiError.InternalServerError(e.getMessage)\n        }\n    }\n  }", "CodeBleu_score": 38.75296941003419}, {"code": "  private[this] def tryWithKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => FOutput)\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    val future = system.actorSelection(kafkaManagerActor).ask(msg, kafkaManagerConfig.clusterActorsAskTimeoutMillis)\n    future.mapTo[ApiError \\/ Output].recoverWith { case NonFatal(e) =>\n      warn(\\\"Error while processing request\\\", e)\n      Future.successful(ApiError(500, e.getMessage, e))\n    }.map { result =>\n      result.fold(\n        err => err,\n        output =>\n          try {\n            fn(output)\n          } catch {\n            case NonFatal(e) =>\n              warn(\\\"Error while processing request\\\", e)\n              ApiError(500, e.getMessage, e)\n          }\n      )\n    }\n  }", "CodeBleu_score": 24.49536518686749}]}
{"instance_id": "a535ce861222", "generation_result": [{"code": "  private[this] def withKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => Future[ApiError \\/ FOutput])\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    implicit val ec = apiExecutionContext\n    system.actorSelection(kafkaManagerActor).ask(msg).map {\n      case err: ActorErrorResponse =>\n        error(s\"Failed on input : $msg\")\n        -\\/(ApiError.from(err))\n      case o: Output =>\n        fn(o)\n    }.recover { case t: Throwable =>\n      error(s\"Failed on input : $msg\", t)\n      -\\/(ApiError.fromThrowable(t))\n    }\n  }", "CodeBleu_score": 78.83398078166512}, {"code": "  private[this] def withKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => Future[ApiError \\/ FOutput])\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    implicit val ec = apiExecutionContext\n    system.actorSelection(kafkaManagerActor).ask(msg).map {\n      case err: ActorErrorResponse =>\n        error(s\"Failed on input : $msg\")\n        -\\/(ApiError.from(err))\n      case o: Output =>\n        fn(o)\n    }.recover { case t: Throwable =>\n      error(s\"Failed on input : $msg\", t)\n      -\\/(ApiError.fromThrowable(t))\n    }\n  }", "CodeBleu_score": 78.83398078166512}, {"code": "  private[this] def withKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => Future[ApiError \\/ FOutput])\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    implicit val ec = apiExecutionContext\n    system.actorSelection(kafkaManagerActor).ask(msg).map {\n      case err: ActorErrorResponse =>\n        error(s\"Failed on input : $msg\")\n        -\\/(ApiError.from(err))\n      case o: Output =>\n        fn(o)\n    }.recover { case t: Throwable =>\n      error(s\"Failed on input : $msg\", t)\n      -\\/(ApiError.fromThrowable(t))\n    }\n  }", "CodeBleu_score": 78.83398078166512}]}
{"instance_id": "ad37d3914acc", "generation_result": [{"code": "  def runPreferredLeaderElection(clusterName: String, topics: Set[String]): Future[ApiError \\/ ClusterContext] ={\n\t    tryWithKafkaManagerActor(KMClusterCommandRequest(clusterName, topics, KMCommand.RunPreferredLeaderElection)) { result: KMCommandResult =>\n      result.result.map(_.asInstanceOf[ClusterContext]).get\n    }\n  }", "CodeBleu_score": 28.05028429769752}, {"code": "  def runPreferredLeaderElection(clusterName: String, topics: Set[String]): Future[ApiError \\/ ClusterContext] ={\n\t    tryWithKafkaManagerActor(KMClusterCommandRequest(clusterName, topics)) { result: KMCommandResult =>\n      result.result.get\n    }\n  }", "CodeBleu_score": 22.174945273583646}, {"code": "  def runPreferredLeaderElection(clusterName: String, topics: Set[String]): Future[ApiError \\/ ClusterContext] ={\n\t    tryWithKafkaManagerActor(KMClusterCommandRequest(clusterName, KMCommand.PreferredLeaderElection, topics)) { result: KMCommandResult =>\n      result.result.get\n    }\n  }", "CodeBleu_score": 25.71301426366569}]}
{"instance_id": "3ecdb2c1534f", "generation_result": [{"code": "private def runPreferredLeaderElectionWithAllTopics(clusterName: String) ={\n\t  implicit val ec = apiExecutionContext\n  withKafkaManagerActor(KMClusterCommandRequest(clusterName, CMRunPreferredLeaderElection(Set.empty))) { result =>\n    result.map(cmr => toDisjunction(cmr.result))\n  }\n}", "CodeBleu_score": 49.20264688205375}, {"code": "private def runPreferredLeaderElectionWithAllTopics(clusterName: String) ={\n\t  implicit val ec = apiExecutionContext\n  withKafkaManagerActor(KMClusterCommandRequest(clusterName, CMRunPreferredLeaderElection(Set.empty[String]))) { result: Future[CMCommandResult] =>\n    result.map(cmr => toDisjunction(cmr.result))\n  }\n}", "CodeBleu_score": 49.9550394555064}, {"code": "private def runPreferredLeaderElectionWithAllTopics(clusterName: String) ={\n\t  implicit val ec = apiExecutionContext\n  withKafkaManagerActor(KMClusterCommandRequest(clusterName, CMRunPreferredLeaderElection(Set.empty))) { result: Future[CMCommandResult] =>\n    result.map(cmr => toDisjunction(cmr.result))\n  }\n}", "CodeBleu_score": 49.868196712724114}]}
{"instance_id": "5955ade118b9", "generation_result": [{"code": "def manualPartitionAssignments(clusterName: String,\n                                 assignments: List[(String, List[(Int, List[Int])])]) = {\n\t  implicit val ec = apiExecutionContext\n\n  withKafkaManagerActor(KMClusterCommandRequest(clusterName, CMManualPartitionAssignments(assignments))) { result: Future[CMCommandResult] =>\n    result.map(cmr => toDisjunction(cmr.result))\n  }\n}", "CodeBleu_score": 20.184609069945495}, {"code": "def manualPartitionAssignments(clusterName: String,\n                                 assignments: List[(String, List[(Int, List[Int])])]) = {\n\t  implicit val ec = apiExecutionContext\n  withKafkaManagerActor(\n    KMClusterCommandRequest(\n      clusterName,\n      CMManualPartitionAssignments(assignments)\n    )\n  ) { result: CMCommandResult =>\n    result.result.get\n  }\n}", "CodeBleu_score": 31.272589322284905}, {"code": "def manualPartitionAssignments(clusterName: String,\n                                 assignments: List[(String, List[(Int, List[Int])])]) = {\n\t  implicit val ec = apiExecutionContext\n  withKafkaManagerActor(KMClusterCommandRequest(clusterName, CMManualPartitionAssignments(assignments))) { result: Future[CMCommandResult] =>\n    result.map(cmr => toDisjunction(cmr.result))\n  }\n}", "CodeBleu_score": 20.184609069945495}]}
{"instance_id": "26fbc2ba1d28", "generation_result": [{"code": "private Config getKafkaBrokerConfig(AdminClient admin) throws Exception{\n\t    DescribeClusterResult describeClusterResult = admin.describeCluster();\n    Collection<Node> nodes = describeClusterResult.nodes().get(kafkaDescribeClusterTimeout.toMillis(), TimeUnit.MILLISECONDS);\n    if (nodes.isEmpty()) {\n        throw new ConnectException(\\\"Unable to describe cluster within timeout\\\");\n    }\n    Node node = nodes.iterator().next();\n    DescribeConfigsResult describeConfigsResult = admin.describeConfigs(Collections.singleton(node.id()));\n    Config config = describeConfigsResult.all().get(kafkaDescribeConfigsTimeout.toMillis(), TimeUnit.MILLISECONDS).get(node.id());\n    if (config == null) {\n        throw new ConnectException(\\\"Unable to describe broker configuration\\\");\n    }\n    return config;\n}", "CodeBleu_score": 51.67329141322525}, {"code": "private Config getKafkaBrokerConfig(AdminClient admin) throws Exception{\n\t    DescribeClusterResult describeClusterResult = admin.describeCluster();\n    List<Node> nodes = describeClusterResult.nodes().get();\n    if (nodes.isEmpty()) {\n        throw new ConnectException(\\\"Could not get Kafka cluster metadata from brokers at \\\" + producerConfig.getString(BOOTSTRAP_SERVERS));\n    }\n\n    Node node = nodes.get(0);\n    DescribeConfigsResult describeConfigsResult = admin.describeConfigs(Collections.singleton(node.id()));\n    Map<ConfigResource, Config> configs = describeConfigsResult.all().get(kafkaCreateTimeout.toMillis(), TimeUnit.MILLISECONDS);\n    Config brokerConfig = configs.get(new ConfigResource(ConfigResource.Type.BROKER, node.id()));\n    if (brokerConfig == null) {\n        throw new ConnectException(\\\"Could not get Kafka broker configuration from brokers at \\\" + producerConfig.getString(BOOTSTRAP_SERVERS));\n    }\n    return brokerConfig;\n}", "CodeBleu_score": 34.95386132980298}, {"code": "private Config getKafkaBrokerConfig(AdminClient admin) throws Exception{\n\t    DescribeClusterResult describeClusterResult = admin.describeCluster();\n    Set<Node> nodes = describeClusterResult.nodes().get(kafkaDescribeClusterTimeout.toMillis(), TimeUnit.MILLISECONDS);\n    if (nodes == null || nodes.isEmpty()) {\n        throw new ConnectException(\\\"Could not retrieve a list of nodes from the Kafka cluster\\\");\n    }\n    Node firstNode = nodes.iterator().next();\n    NodeConfig nodeConfig = admin.describeConfigs(Collections.singleton(firstNode.id())).all().get(kafkaDescribeConfigsTimeout.toMillis(), TimeUnit.MILLISECONDS);\n    if (nodeConfig == null) {\n        throw new ConnectException(\\\"Could not retrieve the configuration of the Kafka broker\\\");\n    }\n    return nodeConfig.get(firstNode.id());\n}", "CodeBleu_score": 47.76397017141279}]}
{"instance_id": "adf40b68c93e", "generation_result": [{"code": "private static Validator forKafka(final Validator validator){\n\t    return new Validator() {\n        @Override\n        public int validate(Config config, List<ValidationError> errors) {\n            final String schemaHistory = config.getString(SchemaHistory.SCHEMA_HISTORY_CONFIG);\n            if (SchemaHistory.KafkaSchemaHistory.name().equalsIgnoreCase(schemaHistory)) {\n                return validator.validate(config, errors);\n            }\n            return 0;\n        }\n    };\n}", "CodeBleu_score": 39.412572531748886}, {"code": "private static Validator forKafka(final Validator validator){\n\t    return new Validator() {\n        @Override\n        public int validate(Config config) {\n            if (isKafkaSchemaHistory(config)) {\n                return validator.validate(config);\n            }\n            return 0;\n        }\n    };\n}", "CodeBleu_score": 23.168325985982626}, {"code": "private static Validator forKafka(final Validator validator){\n\t    return (configuration) -> {\n        if (configuration.getBoolean(KAFKA_SCHEMA_HISTORY)) {\n            return validator.validate(configuration);\n        } else {\n            return 0;\n        }\n    };\n}", "CodeBleu_score": 19.312319691834343}]}
{"instance_id": "07ff1ca41c93", "generation_result": [{"code": "private synchronized Boolean isTopicCreationEnabled(Map<String, ?> config){\n\t    if (null == config) {\n            return true;\n        }\n        final Version version = AppInfoParser.getVersion();\n        if (null == version) {\n            return true;\n        }\n        if (version.compareTo(TOPIC_CREATION_KAFKA_VERSION) < 0) {\n            return false;\n        }\n        final Boolean topicCreationEnabled = (Boolean) config.getOrDefault(\\\"topic.creation.enable\\\", true);\n        return topicCreationEnabled;\n    }", "CodeBleu_score": 48.0756162651636}, {"code": "private synchronized Boolean isTopicCreationEnabled(Map<String, ?> config){\n\t    Version kafkaConnectVersion = AppInfoParser.getVersion();\n    if (kafkaConnectVersion.compareTo(TOPIC_CREATION_KAFKA_VERSION) >= 0) {\n        Boolean topicCreationEnabled = (Boolean) config.getOrDefault(\\\"topic.creation.enable\\\", true);\n        return topicCreationEnabled;\n    }\n    return false;\n}", "CodeBleu_score": 44.90806111131284}, {"code": "private synchronized Boolean isTopicCreationEnabled(Map<String, ?> config){\n\t    String connectVersion = AppInfoParser.getVersion();\n    Version kafkaConnectVersion = parseVersion(connectVersion);\n    Boolean topicCreationEnabled = true;\n    if (null != config && config.containsKey(\\\"topic.creation.enable\\\")) {\n            topicCreationEnabled = (Boolean) config.get(\\\"topic.creation.enable\\\");\n        }\n        return kafkaConnectVersion.compareTo(TOPIC_CREATION_KAFKA_VERSION) >= 0 && topicCreationEnabled;\n    }", "CodeBleu_score": 38.21015452844498}]}
{"instance_id": "e2cc420e1e63", "generation_result": [{"code": "public static final KafkaOffsetBackingStore kafkaOffsetBackingStore(Map<String, String> config){\n\t    String clientId = config.get(CLIENT_ID_CONFIG);\n    if (clientId == null) {\n            throw new DebeziumException(\\\"Missing mandatory configuration option \\'\\\" + CLIENT_ID_CONFIG + \\\"'\\\");\n        }\n\n        Map<String, String> adminProps = new HashMap<>(config);\n        adminProps.remove(CLIENT_ID_CONFIG);\n\n        SharedTopicAdmin admin = new SharedTopicAdmin(adminProps);\n        return new KafkaOffsetBackingStore(admin, clientId, converterForOffsetStore());\n    }", "CodeBleu_score": 34.27152141677114}, {"code": "public static final KafkaOffsetBackingStore kafkaOffsetBackingStore(Map<String, String> config){\n\t    final String clientId = config.get(CLIENT_ID_CONFIG);\n    if (clientId == null) {\n            throw new DebeziumException(\\\"Kafka client ID is not configured\\\");\n        }\n\n        final Map<String, String> adminProperties = new HashMap<>(config);\n        adminProperties.remove(CLIENT_ID_CONFIG);\n\n        final SharedTopicAdmin sharedAdmin = new SharedTopicAdmin(adminProperties);\n\n        return new KafkaOffsetBackingStore(sharedAdmin, clientId, converterForOffsetStore());\n    }", "CodeBleu_score": 34.75514733340746}, {"code": "public static final KafkaOffsetBackingStore kafkaOffsetBackingStore(Map<String, String> config){\n\t    if (!config.containsKey(CLIENT_ID_CONFIG)) {\n            throw new DebeziumException(\\\"Missing 'client.id' configuration property\\\")\n        }\n\n        final String clientId = config.get(CLIENT_ID_CONFIG);\n\n        final Map<String, Object> adminProps = new HashMap<>();\n        adminProps.put(CLIENT_ID_CONFIG, clientId + \\\"-admin\\\")\n        adminProps.putAll(config);\n\n        final SharedTopicAdmin admin = new SharedTopicAdmin(adminProps);\n\n        return new KafkaOffsetBackingStore(admin, clientId, converterForOffsetStore());\n    }", "CodeBleu_score": 35.577565506496605}]}
{"instance_id": "4ecb2279231e", "generation_result": [{"code": "private T readKey(JsonNode node) throws IOException{\n\t    if (node.isObject()) {\n        JsonNode payload = node.get(PAYLOAD_FIELD);\n        if (payload != null) {\n            node = payload;\n        }\n    }\n\n    Iterator<String> fieldNames = node.fieldNames();\n    if (fieldNames.hasNext()) {\n        String fieldName = fieldNames.next();\n        if (fieldNames.hasNext()) {\n            return reader.readValue(node);\n        }\n        else {\n            return reader.readValue(node.get(fieldName));\n        }\n    }\n    else {\n        return null;\n    }\n}", "CodeBleu_score": 48.86457239955795}, {"code": "private T readKey(JsonNode node) throws IOException{\n\t    // Schema + payload format\n            if (node.has(PAYLOAD_FIELD)) {\n                node = node.get(PAYLOAD_FIELD);\n            }\n            // Debezium envelope\n            if (config.asEnvelope()) {\n                return reader.readValue(node.get(Envelope.FieldName.KEY));\n            }\n            // Extracted format\n            else {\n                if (node.has(Envelope.FieldName.KEY)) {\n                    node = node.get(Envelope.FieldName.KEY);\n                }\n\n                if (node.isObject()) {\n                    Iterator<String> fieldNames = node.fieldNames();\n\n                    if (fieldNames.hasNext()) {\n                        String fieldName = fieldNames.next();\n\n                        if (fieldNames.hasNext()) {\n                            // composite key\n                            return reader.readValue(node);\n                        }\n                        else {\n                            // simple key\n                            return reader.readValue(node.get(fieldName));\n                        }\n                    }\n                }\n\n                return reader.readValue(node);\n            }\n        }", "CodeBleu_score": 47.71684372089812}, {"code": "private T readKey(JsonNode node) throws IOException{\n\t    if (node.isObject()) {\n        JsonNode payload = node.get(PAYLOAD_FIELD);\n\n        // Schema + payload format\n        if (payload != null) {\n            node = payload;\n        }\n        // Debezium envelope\n        if (config.asEnvelope()) {\n            return reader.readValue(node);\n        }\n        else if (node.has(Envelope.FieldName.SOURCE) && node.has(config.sourceField())) {\n            return reader.readValue(node.get(config.sourceField()));\n        }\n        // Extracted format\n        else {\n            if (node.has(Envelope.FieldName.KEY)) {\n                node = node.get(Envelope.FieldName.KEY);\n            }\n            if (node.isObject()) {\n                if (node.size() == 1) {\n                    Iterator<Map.Entry<String, JsonNode>> fields = node.fields();\n                    if (fields.hasNext()) {\n                        return reader.readValue(fields.next().getValue());\n                    }\n                }\n                else {\n                    return reader.readValue(node);\n                }\n            }\n            else {\n                return reader.readValue(node);\n            }\n        }\n    }\n    else {\n        return reader.readValue(node);\n    }\n    return null;\n}", "CodeBleu_score": 42.326198719844754}]}
{"instance_id": "b8ba1bfc7b5e", "generation_result": [{"code": "public String topicNameFor(I id, String prefix, String delimiter){\n\t    String topicName = delegate.topicNameFor(id, prefix, delimiter);\n    String sanitizedTopicName = sanitizeTopicName(topicName);\n    if (!topicName.equals(sanitizedTopicName)) {\n            LOGGER.warn(\\\"Invalid topic name '{}' for data collection {}. Using sanitized name '{}'.\\\", topicName, id, sanitizedTopicName);\n        }\n        return sanitizedTopicName;\n    }", "CodeBleu_score": 25.976311052074504}, {"code": "public String topicNameFor(I id, String prefix, String delimiter){\n\t    String topicName = delegate.topicNameFor(id, prefix, delimiter);\n    StringBuilder sanitized = new StringBuilder();\n    boolean replaced = false;\n\n        for (int i = 0; i < topicName.length(); i++) {\n            char c = topicName.charAt(i);\n\n            if (Character.isJavaIdentifierPart(c)) {\n                sanitized.append(c);\n            } else {\n                replaced = true;\n                sanitized.append(REPLACEMENT_CHAR);\n            }\n        }\n\n        if (replaced) {\n            LOGGER.warn(\\\"Invalid characters in topic name '{}', replacing with '{}'.\\\", topicName, REPLACEMENT_CHAR);\n        }\n\n        return sanitized.toString();\n    }", "CodeBleu_score": 53.392305868626345}, {"code": "public String topicNameFor(I id, String prefix, String delimiter){\n\t    String topicName = delegate.topicNameFor(id, prefix, delimiter);\n    if (topicName.isEmpty()) {\n            return topicName;\n        }\n\n        StringBuilder builder = new StringBuilder();\n        for (char ch : topicName.toCharArray()) {\n            if (isValidTopicChar(ch)) {\n                builder.append(ch);\n            }\n            else {\n                builder.append(REPLACEMENT_CHAR);\n            }\n        }\n\n        String sanitizedTopicName = builder.toString();\n        if (!sanitizedTopicName.equals(topicName)) {\n            LOGGER.warn(\\\"Topic name \\\" + topicName + \\\" contains invalid characters and has been sanitized to \\\" + sanitizedTopicName);\n        }\n        return sanitizedTopicName;\n    }", "CodeBleu_score": 47.29919393115043}]}
{"instance_id": "9cf0d74c098d", "generation_result": [{"code": "public ErrorHandler(Class<? extends SourceConnector> connectorType, CommonConnectorConfig connectorConfig,\n                        ChangeEventQueue<?> queue, ErrorHandler replacedErrorHandler) {\n\t        this.connectorConfig = connectorConfig;\n        this.queue = queue;\n        this.producerThrowable = new AtomicReference<>();\n\n        this.maxRetries = replacedErrorHandler != null ? replacedErrorHandler.retries : getMaxRetries(connectorConfig);\n        this.retries = replacedErrorHandler != null ? replacedErrorHandler.retries : 0;\n    }", "CodeBleu_score": 60.60859690684286}, {"code": "public ErrorHandler(Class<? extends SourceConnector> connectorType, CommonConnectorConfig connectorConfig,\n                        ChangeEventQueue<?> queue, ErrorHandler replacedErrorHandler) {\n\t    this.connectorConfig = connectorConfig;\n        this.queue = queue;\n        this.producerThrowable = new AtomicReference<>();\n\n        if (replacedErrorHandler != null) {\n            this.retries = replacedErrorHandler.retries;\n        } else {\n            this.retries = 0;\n        }\n\n        if (connectorConfig.getMaxRetries() != null) {\n            this.maxRetries = connectorConfig.getMaxRetries();\n        } else {\n            this.maxRetries = RETRIES_UNLIMITED;\n        }\n    }", "CodeBleu_score": 78.78778101547192}, {"code": "public ErrorHandler(Class<? extends SourceConnector> connectorType, CommonConnectorConfig connectorConfig,\n                        ChangeEventQueue<?> queue, ErrorHandler replacedErrorHandler) {\n\t    this.connectorConfig = connectorConfig;\n        this.queue = queue;\n        this.producerThrowable = new AtomicReference<>();\n\n        if (replacedErrorHandler != null) {\n            this.retries = replacedErrorHandler.retries;\n        } else {\n            this.retries = 0;\n        }\n\n        if (connectorConfig.getMaxRetries() > 0) {\n            this.maxRetries = connectorConfig.getMaxRetries();\n        } else {\n            this.maxRetries = RETRIES_UNLIMITED;\n        }\n    }", "CodeBleu_score": 77.14426986737233}]}
{"instance_id": "8ab4bf3a4dd8", "generation_result": [{"code": "public void validate(Configuration configuration, Field.Set fields){\n\t    Map<String, String> validationResults = configuration.validate(fields);\n    for (Map.Entry<String, String> validationResult : validationResults.entrySet()) {\n        if (validationResult.getValue() != null) {\n            throw new ConfigException(validationResult.getValue(), new ConfigValue(validationResult.getKey()));\n        }\n    }\n}", "CodeBleu_score": 43.88697337297196}, {"code": "public void validate(Configuration configuration, Field.Set fields){\n\t    Map<String, ConfigValue> validationResult = configuration.validate(fields);\n    for (Map.Entry<String, ConfigValue> entry : validationResult.entrySet()) {\n        if (entry.getValue().errorMessages().size() > 0) {\n            throw new ConfigException(entry.getKey(), entry.getValue().errorMessages().get(0));\n        }\n    }\n}", "CodeBleu_score": 52.91252826143242}, {"code": "public void validate(Configuration configuration, Field.Set fields){\n\t    Map<String, ConfigValue> validationResult = configuration.validate(fields);\n    for (Map.Entry<String, ConfigValue> entry : validationResult.entrySet()) {\n        if (!entry.getValue().errorMessages().isEmpty()) {\n            throw new ConfigException(entry.getKey(), entry.getValue().errorMessages().get(0));\n        }\n    }\n}", "CodeBleu_score": 56.00125799328154}]}
{"instance_id": "860405dc9abb", "generation_result": [{"code": "private Schema buildNewSchema(String fieldName, Schema oldSchema, Map<String, Header> headerToProcess, List<String> nestedFields, int level){\n\t    SchemaBuilder schemaBuilder = SchemaBuilder.struct();\n    for (org.apache.kafka.connect.data.Field field : oldSchema.fields()) {\n        if (oldSchema.isPrimitive()) {\n            return oldSchema;\n        }\n        if (oldSchema.isStruct()) {\n            Struct originalValue = requireStruct(oldSchema.get(field), \\\"Nested field\\\");\n            if (isContainedIn(field.name(), nestedFields)) {\n                schemaBuilder.field(field.name(), buildNewSchema(field.name(), originalValue.schema(), headerToProcess, nestedFields, ++level));\n            }\n            else {\n                schemaBuilder.field(field.name(), originalValue.schema());\n            }\n        }\n        else {\n            schemaBuilder.field(field.name(), oldSchema.field(field.name()).schema());\n        }\n    }\n    for (int i = 0; i < headers.size(); i++) {\n        Header currentHeader = headerToProcess.get(headers.get(i));\n        if (currentHeader != null) {\n            Optional<String> fieldNameToAdd = getFieldName(fields.get(i), fieldName, level);\n            fieldNameToAdd.ifPresent(s -> schemaBuilder.field(s, SchemaBuilder.STRING_SCHEMA));\n        }\n    }\n    Schema newSchema = schemaBuilder.build();\n    LOGGER.debug(\\\"Fields copied: {}\\\", newSchema.fields());\n    LOGGER.debug(\\\"Fields added: {}\\\", newSchema.fields().stream().filter(f -> f.schema().type() == Schema.Type.STRING).collect(Collectors.toList()));\n    return newSchema;\n}", "CodeBleu_score": 42.9738554538956}, {"code": "private Schema buildNewSchema(String fieldName, Schema oldSchema, Map<String, Header> headerToProcess, List<String> nestedFields, int level){\n\t\n    SchemaBuilder schemaBuilder = SchemaBuilder.struct().name(oldSchema.name());\n\n    for (org.apache.kafka.connect.data.Field field : oldSchema.fields()) {\n\n        if (isContainedIn(field.name(), nestedFields)) {\n\n            Struct nestedField = requireStruct(oldSchema.field(field.name()).schema(), \"Nested field\");\n\n            schemaBuilder.field(field.name(), buildNewSchema(field.name(), nestedField, headerToProcess, nestedFields, ++level));\n\n        } else {\n\n            schemaBuilder.field(field.name(), oldSchema.field(field.name()).schema());\n\n        }\n\n    }\n\n    for (int i = 0; i < headers.size(); i++) {\n\n        Header currentHeader = headerToProcess.get(headers.get(i));\n\n        if (currentHeader != null) {\n\n            Optional<String> fieldNameToAdd = getFieldName(fields.get(i), fieldName, level);\n\n            fieldNameToAdd.ifPresent(s -> schemaBuilder.field(s, SchemaBuilder.STRING_SCHEMA));\n\n        }\n\n    }\n\n    Schema updatedSchema = schemaBuilder.build();\n\n    LOGGER.debug(\\\"Fields copied from old schema: {}\\\", updatedSchema.fields());\n\n    return updatedSchema;\n\n}", "CodeBleu_score": 53.5217290142743}, {"code": "private Schema buildNewSchema(String fieldName, Schema oldSchema, Map<String, Header> headerToProcess, List<String> nestedFields, int level){\n\t    SchemaBuilder schemaBuilder = SchemaBuilder.struct();\n    for (Field field : oldSchema.fields()) {\n        if (field.schema().type() == Schema.Type.STRUCT) {\n            schemaBuilder.field(field.name(), buildNewSchema(field.name(), field.schema(), headerToProcess, nestedFields, ++level));\n        } else {\n            schemaBuilder.field(field.name(), field.schema());\n        }\n    }\n    for (int i = 0; i < headers.size(); i++) {\n        Header currentHeader = headerToProcess.get(headers.get(i));\n        if (currentHeader != null) {\n            Optional<String> fieldNameToAdd = getFieldName(fields.get(i), fieldName, level);\n            fieldNameToAdd.ifPresent(s -> schemaBuilder.field(s, Schema.OPTIONAL_STRING_SCHEMA));\n        }\n    }\n    Schema newSchema = schemaBuilder.build();\n    if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\\\"Fields copied from old schema: {}\\\", oldSchema.fields());\n        LOGGER.debug(\\\"Fields added to new schema: {}\\\", newSchema.fields());\n    }\n    return newSchema;\n}", "CodeBleu_score": 53.25083616516581}]}
{"instance_id": "681a0415df83", "generation_result": [{"code": "public static SnapshotRecord fromSource(Struct source){\n\t    if (source.schema().field(SNAPSHOT_KEY) == null) {\n        return null;\n    }\n    String snapshotString = source.get(SNAPSHOT_KEY).toString();\n    if (snapshotString == null) {\n        return null;\n    }\n    return SnapshotRecord.valueOf(snapshotString.toUpperCase());\n}", "CodeBleu_score": 37.69209161970003}, {"code": "public static SnapshotRecord fromSource(Struct source){\n\t    if (source.schema().fields().containsKey(SnapshotRecord.SNAPSHOT_KEY)) {\n        String snapshotString = source.getString(SnapshotRecord.SNAPSHOT_KEY);\n        if (snapshotString != null) {\n            return SnapshotRecord.valueOf(snapshotString.toUpperCase());\n        }\n    }\n    return null;\n}", "CodeBleu_score": 54.21661109802778}, {"code": "public static SnapshotRecord fromSource(Struct source){\n\t    if (source == null) {\n        return null;\n    }\n    String snapshotString = source.getString(SnapshotRecord.SNAPSHOT_KEY);\n    if (snapshotString != null) {\n        return SnapshotRecord.valueOf(snapshotString.toUpperCase());\n    }\n    return null;\n}", "CodeBleu_score": 46.808729228979914}]}
{"instance_id": "85ef1162e38a", "generation_result": [{"code": "public static Optional<Float> parse(String version) throws NumberFormatException{\n\t  if (version == null) {\n    return Optional.empty();\n  }\n  String[] parts = version.split(\"\\\\.\");\n  if (parts.length > 2) {\n    version = parts[0] + \".\" + parts[1];\n  }\n  parts = version.split(\"-\");\n  try {\n    return Optional.of(Float.parseFloat(parts[0]));\n  } catch (NumberFormatException e) {\n    return Optional.empty();\n  }\n}", "CodeBleu_score": 70.35270986784128}, {"code": "public static Optional<Float> parse(String version) throws NumberFormatException{\n\t  String[] parts = version.split(\"\\\\.\");\n  if (parts.length > 2) {\n    parts = new String[] { parts[0], parts[1] };\n  }\n  String[] versionParts = parts[1].split(\"-\");\n  return Optional.of(Float.parseFloat(versionParts[0]));\n}", "CodeBleu_score": 54.65749258203184}, {"code": "public static Optional<Float> parse(String version) throws NumberFormatException{\n\t  if (version == null) {\n    return Optional.empty();\n  }\n\n  String[] parts = version.split(\"\\\\.\");\n  if (parts.length > 2) {\n    parts = new String[] { parts[0], parts[1] };\n  }\n\n  String[] versionParts = parts[0].split(\"-\");\n  if (versionParts.length > 1) {\n    parts[0] = versionParts[0];\n  }\n\n  try {\n    return Optional.of(Float.parseFloat(parts[0]));\n  } catch (NumberFormatException e) {\n    return Optional.empty();\n  }\n}", "CodeBleu_score": 55.87004951056047}]}
{"instance_id": "64346d69eba0", "generation_result": [{"code": "public Mono<ResponseEntity<ConnectorDTO>> createConnector(String clusterName, String connectName,\n                                                            @Valid Mono<NewConnectorDTO> connector,\n                                                            ServerWebExchange exchange){\n\t\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.CREATE)\n        .operationName(\"createConnector\")\n        .build();\n\n    return validateAccess(context)\n        .then(connector.flatMap(dto -> kafkaConnectService.createConnector(getCluster(clusterName), connectName, dto))\n            .map(ResponseEntity::ok))\n        .doOnEach(sig -> audit(context, sig));\n}", "CodeBleu_score": 70.68574196928255}, {"code": "public Mono<ResponseEntity<ConnectorDTO>> createConnector(String clusterName, String connectName,\n                                                            @Valid Mono<NewConnectorDTO> connector,\n                                                            ServerWebExchange exchange){\n\t\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.CREATE)\n        .operationName(\"createConnector\")\n        .build();\n\n    return validateAccess(context)\n        .then(connector.flatMap(c -> kafkaConnectService.createConnector(getCluster(clusterName), connectName, c)))\n        .map(ResponseEntity::ok)\n        .doOnEach(sig -> audit(context, sig));\n}", "CodeBleu_score": 71.29534514679288}, {"code": "public Mono<ResponseEntity<ConnectorDTO>> createConnector(String clusterName, String connectName,\n                                                            @Valid Mono<NewConnectorDTO> connector,\n                                                            ServerWebExchange exchange){\n\t\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.CREATE)\n        .operationName(\"createConnector\")\n        .build();\n\n    return validateAccess(context)\n        .then(connector.flatMap(dto -> kafkaConnectService.createConnector(getCluster(clusterName), connectName, dto)))\n        .map(ResponseEntity::ok)\n        .doOnEach(sig -> audit(context, sig));\n  }", "CodeBleu_score": 70.92318848346699}]}
{"instance_id": "4c446fd64db6", "generation_result": [{"code": "public Mono<ResponseEntity<Void>> deleteConnector(String clusterName, String connectName,\n                                                    String connectorName,\n                                                    ServerWebExchange exchange){\n\t\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.VIEW, ConnectAction.DELETE)\n        .connector(connectorName)\n        .operationName(\"deleteConnector\")\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService.deleteConnector(getCluster(clusterName), connectName, connectorName)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n}", "CodeBleu_score": 81.18392395928973}, {"code": "public Mono<ResponseEntity<Void>> deleteConnector(String clusterName, String connectName,\n                                                    String connectorName,\n                                                    ServerWebExchange exchange){\n\t\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.VIEW, ConnectAction.DELETE)\n        .connector(connectorName)\n        .operationName(\"deleteConnector\")\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService.deleteConnector(getCluster(clusterName), connectName, connectorName)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n  }", "CodeBleu_score": 81.09787625425007}, {"code": "public Mono<ResponseEntity<Void>> deleteConnector(String clusterName, String connectName,\n                                                    String connectorName,\n                                                    ServerWebExchange exchange){\n\t\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.VIEW, ConnectAction.DELETE)\n        .connector(connectorName)\n        .operationName(\"deleteConnector\")\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService.deleteConnector(getCluster(clusterName), connectName, connectorName)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n  }", "CodeBleu_score": 81.09787625425007}]}
{"instance_id": "d34a49f3ca1b", "generation_result": [{"code": "public Mono<ResponseEntity<Void>> updateConnectorState(String clusterName, String connectName,\n                                                         String connectorName,\n                                                         ConnectorActionDTO action,\n                                                         ServerWebExchange exchange) {\n\t\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.VIEW, ConnectAction.EDIT)\n        .operationName(\"updateConnectorState\")\n        .operationParams(Map.of(CONNECTOR_NAME, connectorName))\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService.updateConnectorState(getCluster(clusterName), connectName, connectorName, action)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n}", "CodeBleu_score": 57.899352792452}, {"code": "public Mono<ResponseEntity<Void>> updateConnectorState(String clusterName, String connectName,\n                                                         String connectorName,\n                                                         ConnectorActionDTO action,\n                                                         ServerWebExchange exchange) {\n\t\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.VIEW, ConnectAction.EDIT)\n        .operationName(\"updateConnectorState\")\n        .operationParams(Map.of(CONNECTOR_NAME, connectorName))\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService.updateConnectorState(getCluster(clusterName), connectName, connectorName, action)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n  }", "CodeBleu_score": 57.971122108154546}, {"code": "public Mono<ResponseEntity<Void>> updateConnectorState(String clusterName, String connectName,\n                                                         String connectorName,\n                                                         ConnectorActionDTO action,\n                                                         ServerWebExchange exchange) {\n\t\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.VIEW, ConnectAction.EDIT)\n        .operationName(\"updateConnectorState\")\n        .operationParams(Map.of(CONNECTOR_NAME, connectorName))\n        .build();\n\n    return validateAccess(context).then(\n            kafkaConnectService.updateConnectorState(getCluster(clusterName), connectName, connectorName, action)\n                .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n  }", "CodeBleu_score": 58.12827595264805}]}
{"instance_id": "199cfe41b374", "generation_result": [{"code": "public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig{\n\t\n  public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig(\n      String clusterName,\n      String connectName,\n      String pluginName,\n      Mono<Map<String, Object>> requestBody,\n      ServerWebExchange exchange\n  ) {\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.VIEW, ConnectAction.EDIT)\n        .operationName(\"validateConnectorPluginConfig\")\n        .operationParams(Map.of(CONNECTOR_NAME, pluginName))\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService\n            .validateConnectorPluginConfig(getCluster(clusterName), connectName, pluginName, requestBody)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n  }\n}", "CodeBleu_score": 57.88732682027041}, {"code": "public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig{\n\t", "CodeBleu_score": 7.1690436822820445}, {"code": "public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig{\n\t\n  @Override\n  public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig(\n      String clusterName,\n      String connectName,\n      String pluginName,\n      Mono<Map<String, Object>> requestBody,\n      ServerWebExchange exchange) {\n\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.VIEW)\n        .operationName(\"validateConnectorPluginConfig\")\n        .operationParams(Map.of(CONNECTOR_NAME, pluginName))\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService\n            .validateConnectorPluginConfig(\n                getCluster(clusterName), connectName, pluginName, requestBody)\n            .map(ResponseEntity::ok))\n        .doOnEach(sig -> audit(context, sig));\n  }\n}", "CodeBleu_score": 66.88314004675341}]}
{"instance_id": "88380ae300c4", "generation_result": [{"code": "public static ConfigurableApplicationContext startApplication(String[] args){\n\t    return new SpringApplicationBuilder()\n        .sources(KafkaUiApplication.class)\n        .initializers(new DynamicConfigOperations())\n        .run(args);\n  }", "CodeBleu_score": 35.80976514933475}, {"code": "public static ConfigurableApplicationContext startApplication(String[] args){\n\t    return new SpringApplicationBuilder(KafkaUiApplication.class)\n            .initializers(new DynamicConfigOperations())\n            .run(args);\n}", "CodeBleu_score": 42.2027160385366}, {"code": "public static ConfigurableApplicationContext startApplication(String[] args){\n\t    return new SpringApplicationBuilder(KafkaUiApplication.class)\n        .initializers(new DynamicConfigOperations())\n        .run(args);\n  }", "CodeBleu_score": 42.004638368253325}]}
{"instance_id": "3f022876f737", "generation_result": [{"code": "private Predicate<FullConnectorInfoDTO> matchesSearchTerm(@Nullable final String search){\n\t    if (search == null) {\n        return (connector) -> true;\n    }\n    return (connector) -> connector.getConnector().getName().toLowerCase().contains(search.toLowerCase())\n            || connector.getConnector().getConnectorClass().toLowerCase().contains(search.toLowerCase())\n            || connector.getConnector().getTasksMax().toString().contains(search)\n            || connector.getConnector().getTasksRunning().toString().contains(search)\n            || connector.getConnector().getTasks().stream().anyMatch(task -> task.getState().toString().contains(search))\n            || connector.getConnector().getState().toString().contains(search)\n            || connector.getConnector().getType().toLowerCase().contains(search.toLowerCase())\n            || connector.getConnector().getTopics().stream().anyMatch(topic -> topic.getName().toLowerCase().contains(search.toLowerCase()))\n            || connector.getConnector().getConfig().stream().anyMatch(config -> config.getKey().toLowerCase().contains(search.toLowerCase())\n                    || config.getValue().toLowerCase().contains(search.toLowerCase()))\n            || connector.getConnector().getErrors().stream().anyMatch(error -> error.getErrorCode().toLowerCase().contains(search.toLowerCase())\n                    || error.getErrorMessage().toLowerCase().contains(search.toLowerCase())\n                    || error.getTimestamp().toString().contains(search.toLowerCase()));\n}", "CodeBleu_score": 48.96552317532341}, {"code": "private Predicate<FullConnectorInfoDTO> matchesSearchTerm(@Nullable final String search){\n\t    return search == null || StringUtils.isBlank(search)\n        ? fullConnectorInfoDTO -> true\n        : fullConnectorInfoDTO -> fullConnectorInfoDTO.getConnector().getConnector().getName().toLowerCase().contains(search.toLowerCase());\n}", "CodeBleu_score": 37.70638976887848}, {"code": "private Predicate<FullConnectorInfoDTO> matchesSearchTerm(@Nullable final String search){\n\t    if (StringUtils.isBlank(search)) {\n        return fullConnectorInfoDTO -> true;\n    }\n    return fullConnectorInfoDTO -> {\n        String connectorName = fullConnectorInfoDTO.getConnector().getName();\n        String connectorType = fullConnectorInfoDTO.getConnector().getType();\n        String connectorState = fullConnectorInfoDTO.getConnector().getState();\n        String connectorConfig = fullConnectorInfoDTO.getConfig().getConnectorConfig().getConfig();\n        String connectorTasks = fullConnectorInfoDTO.getTasks().stream().map(TaskDTO::getState).toList().toString();\n        String connectorTopics = fullConnectorInfoDTO.getTopics().toString();\n        return connectorName.toLowerCase().contains(search.toLowerCase()) ||\n                connectorType.toLowerCase().contains(search.toLowerCase()) ||\n                connectorState.toLowerCase().contains(search.toLowerCase()) ||\n                connectorConfig.toLowerCase().contains(search.toLowerCase()) ||\n                connectorTasks.toLowerCase().contains(search.toLowerCase()) ||\n                connectorTopics.toLowerCase().contains(search.toLowerCase());\n    };\n}", "CodeBleu_score": 35.17834977793712}]}
{"instance_id": "9754aa1ec96c", "generation_result": [{"code": "  private Map<String, Object> flattenClusterProperties(@Nullable String prefix,\n                                                       @Nullable Map<String, Object> propertiesMap){\n\t    Map<String, Object> result = new HashMap<>();\n    if (propertiesMap == null) return result;\n\n    for (Map.Entry<String, Object> entry : propertiesMap.entrySet()) {\n      String key = prefix == null ? entry.getKey() : prefix + \\\".\\\" + entry.getKey();\n      Object value = entry.getValue();\n\n      if (value instanceof Map) {\n        result.putAll(flattenClusterProperties(key, (Map<String, Object>) value));\n      } else {\n        result.put(key, value);\n      }\n    }\n\n    return result;\n  }", "CodeBleu_score": 44.13901135600595}, {"code": "  private Map<String, Object> flattenClusterProperties(@Nullable String prefix,\n                                                       @Nullable Map<String, Object> propertiesMap){\n\t    Map<String, Object> flattened = new HashMap<>();\n    if (propertiesMap != null) {\n      for (Map.Entry<String, Object> entry : propertiesMap.entrySet()) {\n        String key = entry.getKey();\n        Object value = entry.getValue();\n        if (value instanceof Map) {\n          flattened.putAll(flattenClusterProperties(prefix == null ? key : prefix + \\\".\\\" + key, (Map<String, Object>) value));\n        } else {\n          flattened.put(prefix == null ? key : prefix + \\\".\\\" + key, value);\n        }\n      }\n    }\n    return flattened;\n  }", "CodeBleu_score": 47.185495059494464}, {"code": "  private Map<String, Object> flattenClusterProperties(@Nullable String prefix,\n                                                       @Nullable Map<String, Object> propertiesMap){\n\t    Map<String, Object> flattenedMap = new HashMap<>();\n    if (propertiesMap != null) {\n      for (Map.Entry<String, Object> entry : propertiesMap.entrySet()) {\n        String key = entry.getKey();\n        Object value = entry.getValue();\n        if (value instanceof Map) {\n          flattenClusterProperties(prefix != null ? prefix + \\\".\\\" + key : key, (Map<String, Object>) value)\n              .forEach((k, v) -> flattenedMap.put(k, v));\n        } else {\n          flattenedMap.put(prefix != null ? prefix + \\\".\\\" + key : key, value);\n        }\n      }\n    }\n    return flattenedMap;\n  }", "CodeBleu_score": 47.419023006381046}]}
{"instance_id": "99266677c846", "generation_result": [{"code": " private static Set<String> kafkaConfigKeysToSanitize(){\n\t", "CodeBleu_score": 2.9334771606863974}, {"code": " private static Set<String> kafkaConfigKeysToSanitize(){\n\t", "CodeBleu_score": 2.9334771606863974}, {"code": " private static Set<String> kafkaConfigKeysToSanitize(){\n\t", "CodeBleu_score": 2.9334771606863974}]}
{"instance_id": "deebb6fcb0a8", "generation_result": [{"code": "private Mono<ClusterFeature> aclEdit(ReactiveAdminClient adminClient, ClusterDescription clusterDescription){\n\t    Set<AclOperation> authorizedOperations = clusterDescription.getAuthorizedOperations();\n    boolean aclViewEnabled = clusterDescription.getAclViewEnabled();\n    boolean hasAlterPermission = authorizedOperations.contains(AclOperation.ALTER);\n    boolean hasAllPermission = authorizedOperations.contains(AclOperation.ALL);\n    if (aclViewEnabled && (hasAlterPermission || hasAllPermission)) {\n        return Mono.just(ClusterFeature.KAFKA_ACL_EDIT);\n    }\n    return Mono.empty();\n}", "CodeBleu_score": 38.662856174516676}, {"code": "private Mono<ClusterFeature> aclEdit(ReactiveAdminClient adminClient, ClusterDescription clusterDescription){\n\t    return adminClient.getAuthorizedOperations(clusterDescription)\n        .filter(operations -> operations.containsAll(Set.of(AclOperation.DESCRIBE, AclOperation.ALTER)))\n        .map(operations -> ClusterFeature.KAFKA_ACL_EDIT)\n        .switchIfEmpty(Mono.empty());\n}", "CodeBleu_score": 27.380192109539696}, {"code": "private Mono<ClusterFeature> aclEdit(ReactiveAdminClient adminClient, ClusterDescription clusterDescription){\n\t    return adminClient.getAuthorizedOperations(clusterDescription)\n            .filter(operations -> operations.contains(AclOperation.DESCRIBE) || operations.contains(AclOperation.ALTER))\n            .map(operations -> ClusterFeature.KAFKA_ACL_EDIT)\n            .defaultIfEmpty(ClusterFeature.KAFKA_ACL_EDIT);\n}", "CodeBleu_score": 29.53710497800124}]}
{"instance_id": "a5d8cc77955f", "generation_result": [{"code": "protected TreeMap<TopicPartition, FromToOffset> nextPollingRange(TreeMap<TopicPartition, FromToOffset> prevRange,\n                                                                   SeekOperations seekOperations){\n\t    TreeMap<TopicPartition, FromToOffset> offsets = new TreeMap<>(Comparator.comparing(TopicPartition::topic)\n        .thenComparing(TopicPartition::partition));\n    if (prevRange.isEmpty()) {\n        for (Map.Entry<TopicPartition, Long> entry : seekOperations.getSeekOffsets().entrySet()) {\n            offsets.put(entry.getKey(), new FromToOffset(entry.getValue(), entry.getValue()));\n        }\n    } else {\n        for (Map.Entry<TopicPartition, FromToOffset> entry : prevRange.entrySet()) {\n            long startOffset = Math.max(entry.getValue().getFrom() - messagesPerPage, 0);\n            offsets.put(entry.getKey(), new FromToOffset(startOffset, entry.getValue().getTo()));\n        }\n    }\n    return offsets;\n}", "CodeBleu_score": 38.231354815353626}, {"code": "protected TreeMap<TopicPartition, FromToOffset> nextPollingRange(TreeMap<TopicPartition, FromToOffset> prevRange,\n                                                                   SeekOperations seekOperations){\n\t    TreeMap<TopicPartition, FromToOffset> offsetsToReadFrom = new TreeMap<>(Comparator.comparing(TopicPartition::topic));\n    if (prevRange.isEmpty()) {\n      for (Map.Entry<TopicPartition, Long> entry : seekOperations.getSeekOperations().entrySet()) {\n        offsetsToReadFrom.put(entry.getKey(), new FromToOffset(entry.getValue(), entry.getValue()));\n      }\n    } else {\n      offsetsToReadFrom = prevRange;\n    }\n\n    int messagesToRead = messagesPerPage;\n    for (Map.Entry<TopicPartition, FromToOffset> entry : offsetsToReadFrom.entrySet()) {\n      long startOffset = entry.getValue().from();\n      long endOffset = entry.getValue().to();\n      long messagesToReadPerPartition = messagesToRead;\n      if (startOffset - endOffset + 1 < messagesToReadPerPartition) {\n        messagesToReadPerPartition = startOffset - endOffset + 1;\n      }\n      long newStartOffset = startOffset - messagesToReadPerPartition + 1;\n      if (newStartOffset < endOffset) {\n        newStartOffset = endOffset;\n      }\n      entry.setValue(new FromToOffset(newStartOffset, endOffset));\n    }\n    return offsetsToReadFrom;\n  }", "CodeBleu_score": 38.48022331711554}, {"code": "protected TreeMap<TopicPartition, FromToOffset> nextPollingRange(TreeMap<TopicPartition, FromToOffset> prevRange,\n                                                                   SeekOperations seekOperations){\n\t    TreeMap<TopicPartition, FromToOffset> offsetsToReadFrom = new TreeMap<>(Comparator.comparing(TopicPartition::topic).thenComparing(TopicPartition::partition));\n    if (prevRange.isEmpty()) {\n      offsetsToReadFrom.putAll(seekOperations.getSeekOperations());\n    } else {\n      offsetsToReadFrom.putAll(prevRange);\n    }\n\n    Map<TopicPartition, Long> offsetsPerPartition = offsetsToReadFrom.entrySet().stream()\n        .collect(Collectors.toMap(Map.Entry::getKey, entry -> entry.getValue().from()));\n\n    int messagesPerPartition = (int) Math.ceil((double) messagesPerPage / offsetsPerPartition.size());\n\n    offsetsPerPartition.forEach((topicPartition, offset) -> {\n      long startOffset = offset - messagesPerPartition;\n      long endOffset = offset - 1;\n      if (startOffset < topicPartition.beginningOffset()) {\n        startOffset = topicPartition.beginningOffset();\n      }\n      if (endOffset < startOffset) {\n        endOffset = startOffset;\n      }\n      offsetsToReadFrom.put(topicPartition, new FromToOffset(startOffset, endOffset));\n    });\n\n    return offsetsToReadFrom;\n  }", "CodeBleu_score": 51.33498241315804}]}
{"instance_id": "c4c657caeba5", "generation_result": [{"code": "public void doLaunch(final MessageInput input){\n\t    if (configuration.getBoolean(CK_LEGACY)) {\n        LOG.info(\\\"Launching legacy Kafka input\\\");\n        final LegacyKafkaInput legacyKafkaInput = new LegacyKafkaInput(input, configuration, localRegistry, nodeId, serverEventBus, serverStatus, metricRegistry, executor, scheduler);\n        legacyKafkaInput.launch();\n    } else {\n        LOG.info(\\\"Launching Kafka input\\\");\n        final ConsumerInput consumerInput = new ConsumerInput(input, configuration, localRegistry, nodeId, serverEventBus, serverStatus, metricRegistry, executor, scheduler);\n        consumerInput.launch();\n    }\n\n    serverEventBus.register(this);\n    serverStatus.register(this);\n\n    scheduler.scheduleAtFixedRate(new Runnable() {\n            @Override\n            public void run() {\n                lastSecBytesRead.set(lastSecBytesReadTmp.get());\n                lastSecBytesReadTmp.set(0);\n            }\n        }, 1, 1, TimeUnit.SECONDS);\n}", "CodeBleu_score": 41.13682697448318}, {"code": "public void doLaunch(final MessageInput input){\n\t", "CodeBleu_score": 2.3542208163979508}, {"code": "public void doLaunch(final MessageInput input){\n\t    final boolean legacyMode = configuration.getBoolean(CK_LEGACY);\n    final String zookeeper = configuration.getString(CK_ZOOKEEPER);\n    final String bootstrapServers = configuration.getString(CK_BOOTSTRAP);\n\n    if (legacyMode) {\n        if (zookeeper == null || zookeeper.isEmpty()) {\n            throw new IllegalArgumentException(\\\"ZooKeeper is required for legacy mode\\\");\n        }\n\n        final LegacyConsumer legacyConsumer = new LegacyConsumer(input, configuration, metricRegistry, localRegistry, nodeId, serverEventBus, serverStatus, scheduler, executor, cc);\n        legacyConsumer.start();\n    } else {\n        if (bootstrapServers == null || bootstrapServers.isEmpty()) {\n            throw new IllegalArgumentException(\\\"Bootstrap servers are required for non-legacy mode\\\");\n        }\n\n        final Consumer consumer = new Consumer(input, configuration, metricRegistry, localRegistry, nodeId, serverEventBus, serverStatus, scheduler, executor, cc);\n        consumer.start();\n    }\n\n    scheduler.scheduleAtFixedRate(new Runnable() {\n            @Override\n            public void run() {\n                lastSecBytesRead.set(lastSecBytesReadTmp.get());\n                lastSecBytesReadTmp.set(0L);\n            }\n        }, 1, 1, TimeUnit.SECONDS);\n\n    serverEventBus.register(this);\n}", "CodeBleu_score": 44.936440030639034}]}
{"instance_id": "dffe85dbb47b", "generation_result": [{"code": "private void insertCustomProperties(Properties props){\n\t    final String customProperties = configuration.getString(CK_CUSTOM_PROPERTIES);\n    if (customProperties != null) {\n        final Properties customProps = new Properties();\n        try {\n            customProps.load(new StringReader(customProperties));\n            props.putAll(customProps);\n        } catch (IOException e) {\n            LOG.error(\"Failed to load custom properties: \" + e.getMessage());\n        }\n    }\n}", "CodeBleu_score": 47.84661398321197}, {"code": "private void insertCustomProperties(Properties props){\n\t    final String customProperties = configuration.getString(CK_CUSTOM_PROPERTIES);\n    if (customProperties != null && !customProperties.isEmpty()) {\n        final Properties customProps = new Properties();\n        try {\n            customProps.load(new StringReader(customProperties));\n            props.putAll(customProps);\n        } catch (IOException e) {\n            LOG.error(\\\"Error loading custom properties\\\", e);\n        }\n    }\n}", "CodeBleu_score": 44.0000849079621}, {"code": "private void insertCustomProperties(Properties props){\n\t    final String customProps = configuration.getString(CK_CUSTOM_PROPS);\n    if (customProps != null && !customProps.isEmpty()) {\n        final Properties custom = new Properties();\n        try {\n            custom.load(new StringReader(customProps));\n            props.putAll(custom);\n        } catch (IOException e) {\n            LOG.error(\"Failed to load custom properties\", e);\n        }\n    }\n}", "CodeBleu_score": 53.61260041104339}]}
{"instance_id": "ea146a7bc30c", "generation_result": [{"code": "public void write(List<RawMessageEvent> entries) throws MessageQueueException{\n\t    final AtomicLong messageBytes = new AtomicLong();\n    final List<Journal.Entry> journalEntries = entries.stream()\n                .filter(Objects::nonNull)\n                .map(entry -> new Journal.Entry(entry.getTimestamp(), entry.getMessage()) {\n                    @Override\n                    public String getMessage() {\n                        messageBytes.addAndGet(entry.getMessage().length);\n                        return entry.getMessage();\n                    }\n                })\n                .collect(Collectors.toList());\n\n    try {\n        writeRetryer.call(() -> {\n            kafkaJournal.write(journalEntries);\n            return null;\n        });\n    } catch (RetryException e) {\n        throw new MessageQueueException(\\\"Unable to write to journal\\\", e);\n    } catch (ExecutionException e) {\n        throw new MessageQueueException(\\\"Unable to write to journal\\\", e);\n    } catch (InterruptedException e) {\n        throw new MessageQueueException(\\\"Unable to write to journal\\\", e);\n    }\n\n    metrics.writtenMessages().add(journalEntries.size());\n    metrics.writtenBytes().add(messageBytes.get());\n}", "CodeBleu_score": 58.85767878203559}, {"code": "public void write(List<RawMessageEvent> entries) throws MessageQueueException{\n\t    if (entries == null || entries.isEmpty()) {\n            return;\n        }\n\n        final List<Journal.Entry> journalEntries = entries.stream()\n                .filter(Objects::nonNull)\n                .map(this::toJournalEntry)\n                .collect(Collectors.toList());\n\n        final AtomicLong totalMessageBytes = new AtomicLong();\n        journalEntries.forEach(entry -> totalMessageBytes.addAndGet(entry.getBytes().length));\n\n        try {\n            writeRetryer.call(() -> {\n                kafkaJournal.write(journalEntries);\n                return null;\n            });\n        } catch (ExecutionException | RetryException e) {\n            throw new MessageQueueException(\\\"Unable to write to journal\\\", e);\n        }\n\n        metrics.writtenMessages().addAndGet(entries.size());\n        metrics.writtenBytes().addAndGet(totalMessageBytes.get());\n    }", "CodeBleu_score": 52.62482630632854}, {"code": "public void write(List<RawMessageEvent> entries) throws MessageQueueException{\n\t    // Filter out null entries\n    List<RawMessageEvent> filteredEntries = entries.stream().filter(Objects::nonNull).collect(Collectors.toList());\n    if (filteredEntries.isEmpty()) {\n        return;\n    }\n\n    // Calculate the total message bytes\n    long totalMessageBytes = filteredEntries.stream().mapToLong(RawMessageEvent::getBytes).sum();\n\n    // Write the entries to the journal\n    try {\n        writeRetryer.call(() -> {\n            kafkaJournal.write(filteredEntries);\n            return null;\n        });\n    } catch (ExecutionException | RetryException e) {\n        throw new MessageQueueException(\\\"Unable to write to journal\\\", e);\n    }\n\n    // Update the written messages and bytes metrics\n    metrics.writtenMessages().addAndGet(filteredEntries.size());\n    metrics.writtenBytes().addAndGet(totalMessageBytes);\n}", "CodeBleu_score": 42.750382773079785}]}
{"instance_id": "944e77614042", "generation_result": [{"code": "public void acknowledge(List<Message> messages){\n\t    final Optional<Long> maxId = messages.stream()\n                .map(Message::getQueueId)\n                .filter(id -> id != null)\n                .map(Long::valueOf)\n                .max(Long::compareTo);\n    if (maxId.isPresent()) {\n            kafkaJournal.acknowledge(maxId.get());\n        }\n        metrics.acknowledged(messages.size());\n    }", "CodeBleu_score": 49.40512311614652}, {"code": "public void acknowledge(List<Message> messages){\n\t        final Optional<Long> maxMessageQueueId = messages.stream()\n                .map(Message::getQueueId)\n                .filter(Optional::isPresent)\n                .map(Optional::get)\n                .max(Long::compareTo);\n        maxMessageQueueId.ifPresent(kafkaJournal::acknowledge);\n        markAcknowledged(maxMessageQueueId.map(id -> id + 1).orElse(0));\n    }", "CodeBleu_score": 49.07600274444994}, {"code": "public void acknowledge(List<Message> messages){\n\t        final Optional<Long> maxMessageQueueId = messages.stream()\n                .map(Message::getMessageQueueId)\n                .max(Long::compareTo);\n        if (maxMessageQueueId.isPresent()) {\n            kafkaJournal.acknowledge(maxMessageQueueId.get());\n            metrics.acknowledged(messages.size());\n        }\n    }", "CodeBleu_score": 43.09789244858313}]}
{"instance_id": "981280879490", "generation_result": [{"code": "private void registerLegacyMetrics(){\n\t    final Set<String> metrics = metricRegistry.getMetrics().keySet();\n    for (final String metric : metrics) {\n        if (metric.startsWith(LocalKafkaJournal.class.getName())) {\n            final String legacyMetricName = metric.replace(LocalKafkaJournal.class.getName(), \\\"org.graylog2.storage.journal.local.LocalKafkaJournal\\\");\n            if (!metricRegistry.getMetrics().containsKey(legacyMetricName)) {\n                metricRegistry.register(legacyMetricName, metricRegistry.getMetrics().get(metric));\n                LOG.warn(\\\"Registering legacy metric {}. This is a temporary measure and will be removed in a future release.\\\", legacyMetricName);\n            }\n        }\n    }\n}", "CodeBleu_score": 30.928435618029336}, {"code": "private void registerLegacyMetrics(){\n\t    final List<Metric> metrics = metricRegistry.getMetrics();\n    for (final Metric metric : metrics) {\n        final String metricName = metric.getMetricName();\n        if (metricName.startsWith(LocalKafkaJournal.class.getName())) {\n            final String legacyMetricName = metricName.replace(LocalKafkaJournal.class.getName(), \\\"org.graylog2.journal.kafka.LocalKafkaJournal\\\");\n            if (metricRegistry.getMetrics().stream().noneMatch(m -> m.getMetricName().equals(legacyMetricName))) {\n                metricRegistry.register(legacyMetricName, metric);\n                LOG.warn(\\\"Registered legacy metric {} for metric {}\\\", legacyMetricName, metricName);\n            }\n        }\n    }\n}", "CodeBleu_score": 30.857669120486932}, {"code": "private void registerLegacyMetrics(){\n\t    final List<String> legacyMetrics = metricRegistry.getMetrics().stream().map(Metric::getName).filter(name -> name.startsWith(LocalKafkaJournal.class.getName())).collect(Collectors.toList());\n    for (String metricName : legacyMetrics) {\n        final String legacyMetricName = metricName.replace(LocalKafkaJournal.class.getName(), \\\"\\\");\n        try {\n            metricRegistry.register(legacyMetricName, metricRegistry.getMetric(metricName));\n        } catch (IllegalArgumentException e) {\n            LOG.warn(\\\"Could not register legacy metric {}. Original metric name: {}\\\", legacyMetricName, metricName);\n        }\n    }\n}", "CodeBleu_score": 42.43434338688961}]}
{"instance_id": "3ca34bfd2d64", "generation_result": [{"code": "private Timer registerHdrTimer(MetricRegistry metricRegistry, final String metricName){\n\t    Timer timer = metricRegistry.timer(metricName);\n    try {\n            metricRegistry.register(metricName, timer);\n        } catch (IllegalArgumentException e) {\n            // metric already registered, retrieve it\n            timer = metricRegistry.getTimers().get(metricName);\n        }\n        return timer;\n    }", "CodeBleu_score": 37.67752317919506}, {"code": "private Timer registerHdrTimer(MetricRegistry metricRegistry, final String metricName){\n\t    try {\n            return metricRegistry.register(metricName, new HdrHistogramRecorder());\n        } catch (IllegalArgumentException e) {\n            return metricRegistry.getTimers().get(metricName);\n        }\n    }", "CodeBleu_score": 25.175182226596675}, {"code": "private Timer registerHdrTimer(MetricRegistry metricRegistry, final String metricName){\n\t    try {\n        return metricRegistry.timer(metricName);\n    } catch (IllegalArgumentException e) {\n        return metricRegistry.getTimers().get(metricName);\n    }\n}", "CodeBleu_score": 21.97987496955459}]}
{"instance_id": "e1d07a1fa986", "generation_result": [{"code": "private void registerUncommittedGauge(MetricRegistry metricRegistry, String name){\n\t    try {\n        metricRegistry.register(name, new Gauge<Long>() {\n            @Override\n            public Long getValue() {\n                long uncommittedMessages = kafkaLog.logEndOffset() - committedOffset.get();\n                if (uncommittedMessages < 0) {\n                    uncommittedMessages = 0;\n                }\n                return uncommittedMessages;\n            }\n        });\n    } catch (IllegalArgumentException e) {\n        // ignore\n    }\n}", "CodeBleu_score": 44.054998843080874}, {"code": "private void registerUncommittedGauge(MetricRegistry metricRegistry, String name){\n\t    try {\n        metricRegistry.register(name, (Gauge<Long>) () -> {\n            if (committedOffset.get() == DEFAULT_COMMITTED_OFFSET) {\n                return kafkaLog.logEndOffset() - kafkaLog.logStartOffset();\n            }\n            return kafkaLog.logEndOffset() - committedOffset.get();\n        });\n    } catch (IllegalArgumentException e) {\n        LOG.warn(\"Unable to register uncommitted message count metric: {}\", e.getMessage());\n    }\n}", "CodeBleu_score": 61.091775944686}, {"code": "private void registerUncommittedGauge(MetricRegistry metricRegistry, String name){\n\t    try {\n        metricRegistry.register(name, (Gauge<Long>) () -> {\n            if (kafkaLog.size() == 0) {\n                return 0L;\n            }\n\n            if (committedOffset.get() == DEFAULT_COMMITTED_OFFSET) {\n                return kafkaLog.logEndOffset() - kafkaLog.logStartOffset();\n            }\n\n            return kafkaLog.logEndOffset() - committedOffset.get();\n        });\n    } catch (IllegalArgumentException e) {\n        LOG.warn(\"Unable to register metric <{}>: {}\", name, e.getMessage());\n    }\n}", "CodeBleu_score": 69.51286866571671}]}
{"instance_id": "8b30a387069f", "generation_result": [{"code": "private long flushMessages(List<Message> messages, long payloadSize){\n\t    if (messages.size() == 0) {\n        LOG.debug(\\\"No messages to flush\\\");\n        return 0L;\n    }\n\n    ByteBufferMessageSet messageSet = new ByteBufferMessageSet(messages);\n    if (LOG.isDebugEnabled()) {\n        LOG.debug(\\\"Writing {} messages to log\\\", messages.size());\n    }\n\n    long lastWriteOffset = appendMessages(messageSet);\n\n    if (LOG.isDebugEnabled()) {\n        LOG.debug(\\\"Wrote {} bytes to log at offset {}\\\", payloadSize, lastWriteOffset);\n    }\n\n    writtenMessages.mark();\n\n    return lastWriteOffset;\n}", "CodeBleu_score": 36.005574001657436}, {"code": "private long flushMessages(List<Message> messages, long payloadSize){\n\t    if (messages.isEmpty()) {\n        LOG.debug(\\\"Flushing empty message set to avoid MessageSetSizeTooLargeException\\\");\n        return 0L;\n    }\n    ByteBufferMessageSet messageSet = new ByteBufferMessageSet(messages);\n    LOG.debug(\\\"Flushing {} messages with {} bytes payload to Kafka log\\\", messages.size(), payloadSize);\n    long lastWriteOffset = append(messageSet);\n    LOG.debug(\\\"Wrote {} messages to Kafka log at offset {}\\\", messages.size(), lastWriteOffset);\n    writtenMessages.mark(messages.size());\n    return lastWriteOffset;\n}", "CodeBleu_score": 39.41205465341377}, {"code": "private long flushMessages(List<Message> messages, long payloadSize){\n\t    if (messages.isEmpty()) {\n        LOG.debug(\\\"No messages to flush\\\");\n        return 0L;\n    }\n\n    final ByteBufferMessageSet messageSet = new ByteBufferMessageSet(messages);\n    LOG.debug(\\\"Writing {} messages to log\\\", messages.size());\n    if (LOG.isTraceEnabled()) {\n        LOG.trace(\\\"Writing message set of size {} to log\\\", messageSet.size());\n    }\n\n    long lastWriteOffset = appendToLog(messageSet);\n    writeMessages.mark(messages.size());\n    LOG.debug(\\\"Wrote {} messages to log, last write offset: {}\\\", messages.size(), lastWriteOffset);\n    return lastWriteOffset;\n}", "CodeBleu_score": 43.00449876202045}]}
{"instance_id": "ee338b61e75d", "generation_result": [{"code": "private void closeKafkaAdminClient(Long clusterPhyId) {\n\t    synchronized (KAFKA_ADMIN_CLIENT_MAP) {\n        List<AdminClient> adminClientList = KAFKA_ADMIN_CLIENT_MAP.get(clusterPhyId);\n        if (adminClientList == null) {\n            return;\n        }\n\n        LOGGER.info(\\\"start to close kafka admin-client, clusterPhyId: \\\" + clusterPhyId);\n        for (AdminClient adminClient : adminClientList) {\n            try {\n                adminClient.close(Duration.ofSeconds(1));\n            } catch (Exception e) {\n                LOGGER.error(\\\"close kafka admin-client failed, clusterPhyId: \\\" + clusterPhyId, e);\n            }\n        }\n        LOGGER.info(\\\"close kafka admin-client success, clusterPhyId: \\\" + clusterPhyId);\n    }\n}", "CodeBleu_score": 34.23296971818331}, {"code": "private void closeKafkaAdminClient(Long clusterPhyId) {\n\t    // \u52a0\u9501\uff0c\u9632\u6b62\u5e76\u53d1\u4fee\u6539\n    synchronized (KAFKA_ADMIN_CLIENT_MAP) {\n        List<AdminClient> adminClientList = KAFKA_ADMIN_CLIENT_MAP.get(clusterPhyId);\n        if (adminClientList == null) {\n            return;\n        }\n\n        LOGGER.info(\\\"close kafka admin-client, clusterPhyId: \\\" + clusterPhyId);\n\n        try {\n            for (AdminClient adminClient : adminClientList) {\n                adminClient.close();\n            }\n        } catch (Exception e) {\n            LOGGER.error(\\\"close kafka admin-client failed, clusterPhyId: \\\" + clusterPhyId, e);\n        }\n\n        adminClientList.clear();\n    }\n}", "CodeBleu_score": 32.06554517203527}, {"code": "private void closeKafkaAdminClient(Long clusterPhyId) {\n\t    synchronized (KAFKA_ADMIN_CLIENT_MAP) {\n        List<AdminClient> adminClientList = KAFKA_ADMIN_CLIENT_MAP.get(clusterPhyId);\n        if (adminClientList == null) {\n            return;\n        }\n\n        LOGGER.info(\\\"close kafka admin-client, clusterPhyId: \\\" + clusterPhyId);\n        try {\n            for (AdminClient adminClient : adminClientList) {\n                adminClient.close(Duration.ofSeconds(3));\n            }\n        } catch (Exception e) {\n            LOGGER.error(\\\"close kafka admin-client failed, clusterPhyId: \\\" + clusterPhyId + \\\", exception: \\\" + e.getMessage(), e);\n        }\n\n        LOGGER.info(\\\"close kafka admin-client success, clusterPhyId: \\\" + clusterPhyId);\n    }\n}", "CodeBleu_score": 34.28866572547901}]}
{"instance_id": "6f0b935b971c", "generation_result": [{"code": "private boolean closeAdminClientList(Long clusterPhyId, List<AdminClient> adminClientList){\n\t    if (adminClientList == null) {\n        return true;\n    }\n\n    boolean allSuccess = true;\n    for (AdminClient adminClient : adminClientList) {\n        try {\n            adminClient.close(Duration.ofSeconds(30));\n        } catch (Exception e) {\n            LOGGER.error(\"close kafka AdminClient failed, clusterPhyId:{}\", clusterPhyId, e);\n            allSuccess = false;\n        }\n    }\n\n    return allSuccess;\n}", "CodeBleu_score": 92.36226478029923}, {"code": "private boolean closeAdminClientList(Long clusterPhyId, List<AdminClient> adminClientList){\n\t    boolean allSuccess = true;\n    if (adminClientList == null) {\n        return true;\n    }\n\n    for (AdminClient adminClient : adminClientList) {\n        try {\n            adminClient.close(Duration.ofSeconds(30));\n        } catch (Exception e) {\n            LOGGER.error(\"close kafka AdminClient failed, clusterPhyId:{}\", clusterPhyId, e);\n            allSuccess = false;\n        }\n    }\n\n    return allSuccess;\n}", "CodeBleu_score": 87.90257588635917}, {"code": "private boolean closeAdminClientList(Long clusterPhyId, List<AdminClient> adminClientList){\n\t    if (adminClientList == null) {\n        return true;\n    }\n\n    boolean allSuccess = true;\n    for (AdminClient adminClient : adminClientList) {\n        try {\n            adminClient.close(Duration.ofSeconds(30));\n        } catch (Exception e) {\n            LOGGER.error(\"close kafka AdminClient failed, clusterPhyId:{}\", clusterPhyId, e);\n            allSuccess = false;\n        }\n    }\n\n    return allSuccess;\n}", "CodeBleu_score": 92.36226478029923}]}
{"instance_id": "b5475aa94c1a", "generation_result": [{"code": "public void stop() {\n\t\tif (app != null) {\n\t\tapp.stop();\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tif (!app.isRunning()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\tthrow new IllegalStateException(e);\n\t\t\t}\n\t\t}\n\t\tapp = null;\n\t}\n}", "CodeBleu_score": 54.33989502686871}, {"code": "public void stop() {\n\t\tif (app != null) {\n\t\tapp.stop();\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tif (!app.isRunning()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\tthrow new IllegalStateException(e);\n\t\t\t}\n\t\t}\n\t\tapp = null;\n\t}\n}", "CodeBleu_score": 54.33989502686871}, {"code": "public void stop() {\n\t\tif (app != null) {\n\t\tapp.stop();\n\t\tint count = 0;\n\n\t\twhile (app.isRunning()) {\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\tthrow new IllegalStateException(\\\"Interrupted while waiting for application to stop\\\", e);\n\t\t\t}\n\n\t\t\tcount++;\n\t\t\tif (count > 5) {\n\t\t\t\tthrow new IllegalStateException(\\\"Application failed to stop within 5 seconds\\\");\n\t\t\t}\n\t\t}\n\n\t\tapp = null;\n\t}\n}", "CodeBleu_score": 53.60179418423934}]}
{"instance_id": "5da405de9e3d", "generation_result": [{"code": "static EurekaServerRunner startEurekaServer(Class config){\n\t\treturn startEurekaServer(config, () -> null);\n}", "CodeBleu_score": 7.228944250337438}, {"code": "static EurekaServerRunner startEurekaServer(Class config){\n\t\t\tEurekaServerRunner eurekaServerRunner = new EurekaServerRunner(config);\n\t\teurekaServerRunner.enableTls();\n\t\teurekaServerRunner.setKeystore(caCert.getAbsolutePath(), KEY_STORE_PASSWORD, KEY_PASSWORD);\n\t\teurekaServerRunner.setTruststore(caCert.getAbsolutePath(), KEY_STORE_PASSWORD);\n\t\teurekaServerRunner.start();\n\t\treturn eurekaServerRunner;\n\t}", "CodeBleu_score": 45.95536837925393}, {"code": "static EurekaServerRunner startEurekaServer(Class config){\n\t\tEurekaServerRunner runner = new EurekaServerRunner(config);\n\trunner.enableTls();\n\trunner.setKeyStore(getKeyStore(caCert, KEY_STORE_PASSWORD, KEY_PASSWORD));\n\trunner.setTrustStore(getKeyStore(caCert, KEY_STORE_PASSWORD, KEY_PASSWORD));\n\trunner.start();\n\treturn runner;\n}", "CodeBleu_score": 48.9853249299038}]}
{"instance_id": "19cbf70751b2", "generation_result": [{"code": "static EurekaClientRunner startService(EurekaServerRunner server, Class config){\n\t\t\tEurekaClientRunner client = new EurekaClientRunner(config);\n\t\tclient.enableTls();\n\t\tclient.startService(\\\"testservice\\\", server);\n\t\treturn client;\n\t}", "CodeBleu_score": 41.099345692153165}, {"code": "static EurekaClientRunner startService(EurekaServerRunner server, Class config){\n\t\tEurekaClientRunner service = new EurekaClientRunner(config);\n\tservice.enableTls();\n\tservice.setKeyStore(clientCert, KEY_STORE_PASSWORD, \\\"client\\\", KEY_PASSWORD);\n\tservice.setTrustStore(caCert, KEY_STORE_PASSWORD);\n\tservice.setServiceName(\\\"testservice\\\");\n\tservice.start();\n\treturn service;\n}", "CodeBleu_score": 45.279095011621386}, {"code": "static EurekaClientRunner startService(EurekaServerRunner server, Class config){\n\t\t\tEurekaClientRunner service = new EurekaClientRunner(config);\n\t\tservice.enableTls();\n\t\tservice.setKeyStore(clientCert, KEY_STORE_PASSWORD, \\\"client\\\", KEY_PASSWORD);\n\t\tservice.setTrustStore(caCert, KEY_STORE_PASSWORD);\n\t\tservice.startService(\\\"testservice\\\");\n\t\treturn service;\n\t}", "CodeBleu_score": 43.150085025532626}]}
{"instance_id": "d6ccff5c0536", "generation_result": [{"code": "static void createCertificates() throws Exception{\n\t\t\tKeyTool keyTool = new KeyTool();\n\t\tkeyTool.createCa();\n\t\tkeyTool.createServer();\n\t\tkeyTool.createClient();\n\t\tcaCert = saveCert(keyTool.getCaCert());\n\t\tserverCert = saveCert(keyTool.getServerCert());\n\t\tclientCert = saveCert(keyTool.getClientCert());\n\t\twrongCaCert = saveCert(keyTool.getWrongCaCert());\n\t\twrongClientCert = saveCert(keyTool.getWrongClientCert());\n\t}", "CodeBleu_score": 25.248520835963394}, {"code": "static void createCertificates() throws Exception{\n\t", "CodeBleu_score": 1.403125619965593}, {"code": "static void createCertificates() throws Exception{\n\t\t\tlog.info(\\\"Creating certificates...\\\");\n\t\tKeyTool keyTool = new KeyTool();\n\t\tkeyTool.createCaKeyStore(KEY_STORE_PASSWORD);\n\t\tkeyTool.createCaKey(KEY_PASSWORD);\n\t\tkeyTool.createCaCertificate(\\\"ca\\\");\n\t\tkeyTool.createServerKeyStore(KEY_STORE_PASSWORD);\n\t\tkeyTool.createServerKey(KEY_PASSWORD);\n\t\tkeyTool.createServerCertificate(\\\"server\\\");\n\t\tkeyTool.createClientKeyStore(KEY_STORE_PASSWORD);\n\t\tkeyTool.createClientKey(KEY_PASSWORD);\n\t\tkeyTool.createClientCertificate(\\\"client\\\");\n\t\tcaCert = saveCert(\\\"ca.crt\\\");\n\t\tserverCert = saveCert(\\\"server.crt\\\");\n\t\tclientCert = saveCert(\\\"client.crt\\\");\n\t\twrongCaCert = saveCert(\\\"wrong-ca.crt\\\");\n\t\twrongClientCert = saveCert(\\\"wrong-client.crt\\\");\n\t}", "CodeBleu_score": 20.037893193941052}]}
{"instance_id": "d2eeaa6a6bbe", "generation_result": [{"code": "private void assertInSeconds(BooleanSupplier assertion, int seconds){\n\t    long start = System.currentTimeMillis();\n    long end = start + seconds * 1000;\n    while (System.currentTimeMillis() < end) {\n        if (assertion.getAsBoolean()) {\n            return;\n        }\n        sleep(100);\n    }\n    throw new RuntimeException(String.format(\\\"Assertion failed after %s seconds\\\", seconds));\n}", "CodeBleu_score": 52.189656323860156}, {"code": "private void assertInSeconds(BooleanSupplier assertion, int seconds){\n\t    long start = System.currentTimeMillis();\n    long limit = start + seconds * 1000;\n    while (System.currentTimeMillis() < limit) {\n        if (assertion.getAsBoolean()) {\n            return;\n        }\n        sleep(100);\n    }\n    throw new RuntimeException(\\\"Assertion failed after \\\" + seconds + \\\" seconds\\\");\n}", "CodeBleu_score": 49.43863117068011}, {"code": "private void assertInSeconds(BooleanSupplier assertion, int seconds){\n\t    long startTime = System.currentTimeMillis();\n    long timeLimit = startTime + seconds * 1000;\n\n    while (System.currentTimeMillis() < timeLimit) {\n        if (assertion.getAsBoolean()) {\n            return;\n        }\n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    throw new RuntimeException(\\\"Timed out waiting for assertion\\\");\n}", "CodeBleu_score": 41.81694836214027}]}
{"instance_id": "6bb261b0e4e1", "generation_result": [{"code": "public X509Certificate createCert(KeyPair keyPair, String ca) throws Exception{\n\t    return createCert(keyPair.getPublic(), keyPair.getPrivate(), ca);\n}", "CodeBleu_score": 13.760118438637964}, {"code": "public X509Certificate createCert(KeyPair keyPair, String ca) throws Exception{\n\t    return createCert(keyPair.getPublic(), keyPair.getPrivate(), ca, ca);\n}", "CodeBleu_score": 15.390103428580987}, {"code": "public X509Certificate createCert(KeyPair keyPair, String ca) throws Exception{\n\t    return createCert(keyPair.getPublic(), keyPair.getPrivate(), ca, ca);\n}", "CodeBleu_score": 15.390103428580987}]}
{"instance_id": "e4f9c32a7c9e", "generation_result": [{"code": "EurekaHttpClient getEurekaHttpClient(){\n\t    EurekaHttpClient eurekaHttpClient = this.eurekaHttpClient.get();\n    if (eurekaHttpClient == null) {\n        try {\n\n\t\t\tObject eurekaTransport = eurekaTransportField.get(this);\n\n\t\t\tField registrationClientField = ReflectionUtils.findField(eurekaTransport.getClass(), \\\"registrationClient\\\");\n\n\t\t\tReflectionUtils.makeAccessible(registrationClientField);\n\n\t\t\teurekaHttpClient = (EurekaHttpClient) registrationClientField.get(eurekaTransport);\n\n\t\t\tthis.eurekaHttpClient.set(eurekaHttpClient);\n\n\t\t} catch (IllegalAccessException e) {\n\t\t\tlog.error(\\\"Could not access EurekaHttpClient\\\", e);\n\t\t}\n\t}\n\n\treturn eurekaHttpClient;\n\n}", "CodeBleu_score": 45.10413583884769}, {"code": "EurekaHttpClient getEurekaHttpClient(){\n\t    if (eurekaHttpClient.get() == null) {\n\t\t\ttry {\n\t\t\t\tObject eurekaTransport = eurekaTransportField.get(this);\n\t\t\t\tField registrationClientField = eurekaTransport.getClass().getDeclaredField(\\\"registrationClient\\\");\n\t\t\t\tReflectionUtils.makeAccessible(registrationClientField);\n\t\t\t\teurekaHttpClient.set((EurekaHttpClient) registrationClientField.get(eurekaTransport));\n\t\t\t} catch (IllegalAccessException e) {\n\t\t\t\tlog.error(\\\"Failed to access EurekaHttpClient\\\", e);\n\t\t\t}\n\t\t}\n\t\treturn eurekaHttpClient.get();\n\t}", "CodeBleu_score": 55.23903500889325}, {"code": "EurekaHttpClient getEurekaHttpClient(){\n\t\tEurekaHttpClient client = eurekaHttpClient.get();\n\tif (client == null) {\n\t\t\ttry {\n\t\t\t\tObject eurekaTransport = eurekaTransportField.get(this);\n\t\t\t\tField registrationClientField = ReflectionUtils.findField(eurekaTransport.getClass(), \\\"registrationClient\\\");\n\t\t\t\tReflectionUtils.makeAccessible(registrationClientField);\n\t\t\t\tclient = (EurekaHttpClient) registrationClientField.get(eurekaTransport);\n\t\t\t\teurekaHttpClient.set(client);\n\t\t\t} catch (IllegalAccessException e) {\n\t\t\t\tlog.error(\\\"Failed to access EurekaHttpClient\\\", e);\n\t\t\t}\n\t\t}\n\t\treturn client;\n\t}", "CodeBleu_score": 40.922619705736565}]}
{"instance_id": "5c404f04e34c", "generation_result": [{"code": "public List<String> getServices(){\n\t\tApplications applications = eurekaClient.getApplications();\n\tif (applications == null) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\tList<String> services = new ArrayList<>();\n\t\tfor (Application application : applications.getRegisteredApplications()) {\n\t\t\tif (application.getInstances().size() > 0) {\n\t\t\t\tservices.add(application.getName().toLowerCase());\n\t\t\t}\n\t\t}\n\t\treturn services;\n\t}", "CodeBleu_score": 57.9604191784719}, {"code": "public List<String> getServices(){\n\t\tApplications applications = this.eurekaClient.getApplications();\n\tif (applications == null) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\tList<String> services = new ArrayList<>();\n\t\tfor (Application application : applications.getRegisteredApplications()) {\n\t\t\tif (application.getInstances() != null && !application.getInstances().isEmpty()) {\n\t\t\t\tservices.add(application.getName().toLowerCase());\n\t\t\t}\n\t\t}\n\t\treturn services;\n\t}", "CodeBleu_score": 68.58334126288533}, {"code": "public List<String> getServices(){\n\t    Applications applications = eurekaClient.getApplications();\n    if (applications == null) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\tList<String> services = new ArrayList<>();\n\t\tfor (Application application : applications.getRegisteredApplications()) {\n\t\t\tif (application.getInstances().size() > 0) {\n\t\t\t\tservices.add(application.getName().toLowerCase());\n\t\t\t}\n\t\t}\n\t\treturn services;\n\t}", "CodeBleu_score": 58.415762681306205}]}
{"instance_id": "a21251337ade", "generation_result": [{"code": "void populateHealthContributors(Map<String, HealthContributor> healthContributors){\n\t    for (Map.Entry<String, HealthContributor> entry : healthContributors.entrySet()) {\n\n\t\t\tif (entry.getValue() instanceof DiscoveryCompositeHealthContributor) {\n\t\t\t\tDiscoveryCompositeHealthContributor discoveryCompositeHealthContributor = (DiscoveryCompositeHealthContributor) entry.getValue();\n\t\t\t\tfor (NamedContributor<HealthContributor> namedContributor : discoveryCompositeHealthContributor.getContributors()) {\n\t\t\t\t\tHealthContributor healthContributor = namedContributor.getContributor();\n\t\t\t\t\tif (!(healthContributor instanceof EurekaHealthIndicator)) {\n\t\t\t\t\t\tthis.healthContributors.put(namedContributor.getName(), healthContributor);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.healthContributors.put(entry.getKey(), entry.getValue());\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 47.67152205601019}, {"code": "void populateHealthContributors(Map<String, HealthContributor> healthContributors){\n\t    for (Map.Entry<String, HealthContributor> entry : healthContributors.entrySet()) {\n\t\t\tHealthContributor healthContributor = entry.getValue();\n\t\t\tif (healthContributor instanceof DiscoveryCompositeHealthContributor) {\n\t\t\t\tDiscoveryCompositeHealthContributor discoveryCompositeHealthContributor = (DiscoveryCompositeHealthContributor) healthContributor;\n\t\t\t\tfor (NamedContributor<HealthContributor> namedContributor : discoveryCompositeHealthContributor.getContributors()) {\n\t\t\t\t\tHealthContributor contributor = namedContributor.getContributor();\n\t\t\t\t\tif (!(contributor instanceof EurekaHealthIndicator)) {\n\t\t\t\t\t\tthis.healthContributors.put(namedContributor.getName(), contributor);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.healthContributors.put(entry.getKey(), healthContributor);\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 40.96177493023265}, {"code": "void populateHealthContributors(Map<String, HealthContributor> healthContributors){\n\t    for (Map.Entry<String, HealthContributor> entry : healthContributors.entrySet()) {\n\t\t\tHealthContributor healthContributor = entry.getValue();\n\t\t\tif (healthContributor instanceof DiscoveryCompositeHealthContributor) {\n\t\t\t\tDiscoveryCompositeHealthContributor discoveryCompositeHealthContributor = (DiscoveryCompositeHealthContributor) healthContributor;\n\t\t\t\tMap<String, HealthContributor> indicators = discoveryCompositeHealthContributor.getContributors();\n\t\t\t\tfor (Map.Entry<String, HealthContributor> indicator : indicators.entrySet()) {\n\t\t\t\t\tif (!(indicator.getValue() instanceof EurekaHealthIndicator)) {\n\t\t\t\t\t\tthis.healthContributors.put(indicator.getKey(), indicator.getValue());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.healthContributors.put(entry.getKey(), entry.getValue());\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 46.43579905076278}]}
{"instance_id": "998fee829929", "generation_result": [{"code": "public String hello(){\n\t    List<ServiceInstance> instances = discoveryClient.getInstances(\"provider-application\");\n    if (instances.isEmpty()) {\n        throw new RuntimeException(\"No service instance found for provider-application\");\n    }\n    ServiceInstance instance = instances.get(0);\n    URI uri = instance.getUri();\n    String response = restTemplate.postForObject(uri + \"/echo\", \"Hello, world\", String.class);\n    return response;\n}", "CodeBleu_score": 64.59590805086339}, {"code": "public String hello(){\n\t    List<ServiceInstance> instances = discoveryClient.getInstances(\"provider-application\");\n    if (instances.isEmpty()) {\n        throw new RuntimeException(\"No service instance for provider-application\");\n    }\n    ServiceInstance instance = instances.get(0);\n    URI uri = instance.getUri();\n    String result = restTemplate.postForObject(uri + \"/echo\", \"Hello, world\", String.class);\n    return result;\n}", "CodeBleu_score": 62.79496143304358}, {"code": "public String hello(){\n\t    List<ServiceInstance> instances = discoveryClient.getInstances(\"provider-application\");\n    if (instances.isEmpty()) {\n        throw new RuntimeException(\"no service instance for provider-application\");\n    }\n    ServiceInstance instance = instances.get(0);\n    URI uri = instance.getUri();\n    String result = restTemplate.postForObject(uri + \"/echo\", \"Hello, world\", String.class);\n    return result;\n}", "CodeBleu_score": 58.638961965485194}]}
{"instance_id": "31166ae7d3dc", "generation_result": [{"code": "public String world(){\n\t    ServiceInstance serviceInstance = loadBalancerClient.choose(\\\"provider-application\\\");\n    URI uri = serviceInstance.getUri();\n    String response = loadBalancedRestTemplate.postForObject(uri.toString() + \\\"/echo\\\", null, String.class);\n    return response;\n}", "CodeBleu_score": 38.54769371595136}, {"code": "public String world(){\n\t    ServiceInstance serviceInstance = loadBalancerClient.choose(\\\"provider-application\\\");\n    URI uri = serviceInstance.getUri();\n    String response = loadBalancedRestTemplate.postForObject(uri.toString() + \\\"/echo\\\", null, String.class);\n    return response;\n}", "CodeBleu_score": 38.54769371595136}, {"code": "public String world(){\n\t    ServiceInstance serviceInstance = loadBalancerClient.choose(\\\"provider-application\\\");\n    URI uri = serviceInstance.getUri();\n    String response = loadBalancedRestTemplate.postForObject(uri.toString() + \\\"/echo\\\", null, String.class);\n    return response;\n}", "CodeBleu_score": 38.54769371595136}]}
{"instance_id": "d7714f9cf0e9", "generation_result": [{"code": "public boolean register(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    logger.info(\\\"register serviceName:{},ip:{},port:{}\\\", serviceName, ip, port);\n    Set<Server> servers = serverMap.get(serviceName);\n    if (servers == null) {\n        synchronized (serverMap) {\n            servers = serverMap.get(serviceName);\n            if (servers == null) {\n                servers = Collections.synchronizedSet(new HashSet<>());\n                serverMap.put(serviceName, servers);\n            }\n        }\n    }\n    servers.add(new Server(ip, port));\n    return true;\n}", "CodeBleu_score": 53.58480897848435}, {"code": "public boolean register(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    logger.info(\\\"\u670d\u52a1\u6ce8\u518c: serviceName={}, ip={}, port={}\\\", serviceName, ip, port);\n    Set<Server> servers = serverMap.get(serviceName);\n    if (servers == null) {\n        servers = Collections.synchronizedSet(new HashSet<>());\n        serverMap.put(serviceName, servers);\n    }\n    servers.add(new Server(ip, port));\n    return true;\n}", "CodeBleu_score": 55.7517191334562}, {"code": "public boolean register(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    logger.info(\\\"register serviceName={}, ip={}, port={}\\\", serviceName, ip, port);\n    Set<Server> servers = serverMap.get(serviceName);\n    if (servers == null) {\n        synchronized (this) {\n            servers = serverMap.get(serviceName);\n            if (servers == null) {\n                servers = Collections.synchronizedSet(new HashSet<>());\n                serverMap.put(serviceName, servers);\n            }\n        }\n    }\n    servers.add(new Server(ip, port));\n    return true;\n}", "CodeBleu_score": 53.7411221379061}]}
{"instance_id": "45f91ed1c560", "generation_result": [{"code": "public boolean deregister(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    logger.info(\"deregister service, serviceName: {}, ip: {}, port: {}\", serviceName, ip, port);\n    serverMap.get(serviceName).remove(new Server(ip, port));\n    return true;\n}", "CodeBleu_score": 48.10978917089148}, {"code": "public boolean deregister(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    logger.info(\"deregister service, serviceName: {}, ip: {}, port: {}\", serviceName, ip, port);\n    serverMap.get(serviceName).remove(new Server(ip, port));\n    return true;\n}", "CodeBleu_score": 48.10978917089148}, {"code": "public boolean deregister(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    logger.info(\"deregister service, serviceName: {}, ip: {}, port: {}\", serviceName, ip, port);\n    serverMap.get(serviceName.toLowerCase()).remove(new Server(ip, port));\n    return true;\n}", "CodeBleu_score": 50.895078207705716}]}
{"instance_id": "f671d9564e40", "generation_result": [{"code": "public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry){\n\t    Map<String, Object> attributes = metadata.getAnnotationAttributes(RibbonClients.class.getName());\n    if (attributes == null) {\n        return;\n    }\n\n    String defaultConfiguration = (String) attributes.get(\\\"defaultConfiguration\\\");\n    if (defaultConfiguration != null) {\n        String name = \\\"ribbonClientConfiguration\\\";\n        BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(RibbonClientConfiguration.class);\n        builder.addPropertyValue(\\\"name\\\", name);\n        builder.addPropertyValue(\\\"configuration\\\", defaultConfiguration);\n        registry.registerBeanDefinition(name, builder.getBeanDefinition());\n    }\n}", "CodeBleu_score": 40.4098556955723}, {"code": "public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry){\n\t    Map<String, Object> attributes = metadata.getAnnotationAttributes(RibbonClients.class.getName());\n    if (attributes != null && attributes.containsKey(\"defaultConfiguration\")) {\n        String defaultConfiguration = (String) attributes.get(\"defaultConfiguration\");\n        String name = \"ribbonClientConfiguration\" + defaultConfiguration.hashCode();\n        BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(RibbonClientConfiguration.class);\n        builder.addPropertyValue(\"name\", defaultConfiguration);\n        registry.registerBeanDefinition(name, builder.getBeanDefinition());\n    }\n}", "CodeBleu_score": 49.496321475831365}, {"code": "public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry){\n\t    Map<String, Object> attributes = metadata.getAnnotationAttributes(RibbonClients.class.getName());\n    if (attributes != null) {\n        String[] basePackages = (String[]) attributes.get(\"basePackages\");\n        String[] basePackageClasses = (String[]) attributes.get(\"basePackageClasses\");\n        if (basePackages != null || basePackageClasses != null) {\n            String defaultConfiguration = (String) attributes.get(\"defaultConfiguration\");\n            if (defaultConfiguration != null) {\n                String name = defaultConfiguration + \"RibbonClientConfiguration\";\n                BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(RibbonClientConfiguration.class);\n                builder.addPropertyValue(\"basePackages\", basePackages);\n                builder.addPropertyValue(\"basePackageClasses\", basePackageClasses);\n                builder.addPropertyValue(\"name\", name);\n                registry.registerBeanDefinition(name, builder.getBeanDefinition());\n            }\n        }\n    }\n}", "CodeBleu_score": 42.802050526134515}]}
{"instance_id": "dbc92d8f146f", "generation_result": [{"code": "public <T> ServiceInstance choose(String serviceId, Request<T> request) {\n\t    ILoadBalancer loadBalancer = clientFactory.getLoadBalancer(serviceId);\n    if (loadBalancer == null) {\n        return null;\n    }\n\n    Server server = loadBalancer.chooseServer(null);\n    if (server == null) {\n        return null;\n    }\n\n    String host = server.getHost();\n    int port = server.getPort();\n    return new TutuServiceInstance(serviceId, host, port);\n}", "CodeBleu_score": 53.706448404953164}, {"code": "public <T> ServiceInstance choose(String serviceId, Request<T> request) {\n\t    ILoadBalancer loadBalancer = clientFactory.getLoadBalancer(serviceId);\n    if (loadBalancer == null) {\n            return null;\n        }\n\n        Server server = loadBalancer.chooseServer(serviceId);\n        if (server == null) {\n            return null;\n        }\n\n        return new TutuServiceInstance(serviceId, server.getHost(), server.getPort());\n    }", "CodeBleu_score": 57.62981930332794}, {"code": "public <T> ServiceInstance choose(String serviceId, Request<T> request) {\n\t    ILoadBalancer loadBalancer = clientFactory.getLoadBalancer(serviceId);\n    if (loadBalancer == null) {\n        return null;\n    }\n    Server server = loadBalancer.chooseServer(null);\n    if (server == null) {\n        return null;\n    }\n    return new TutuServiceInstance(serviceId, server.getHost(), server.getPort());\n}", "CodeBleu_score": 61.54363980252142}]}
{"instance_id": "362eadbd3c5e", "generation_result": [{"code": "public URI reconstructURI(ServiceInstance server, URI original) {\n\t    String originalUri = original.toString();\n    String serviceName = server.getServiceId();\n    String scheme = original.getScheme();\n    String host = server.getHost();\n    int port = server.getPort();\n\n    // Construct the new URI with the IP address and port of the service instance\n    String reconstructedUri = originalUri.replace(serviceName, host + \":\" + port);\n\n    // Append the query string to the reconstructed URI if it exists\n    if (original.getQuery() != null) {\n            reconstructedUri += \"?\" + original.getQuery();\n        }\n\n        // Create a new URI object from the reconstructed URI\n        try {\n            return new URI(scheme, reconstructedUri, null);\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n    }", "CodeBleu_score": 43.887172235473436}, {"code": "public URI reconstructURI(ServiceInstance server, URI original) {\n\t    String scheme = original.getScheme();\n    String host = server.getHost();\n    int port = server.getPort();\n    String path = original.getPath();\n    String query = original.getQuery();\n\n    try {\n        URI uri = new URI(scheme, null, host, port, path, query, null);\n        return uri;\n    } catch (URISyntaxException e) {\n        throw new RuntimeException(e);\n    }\n}", "CodeBleu_score": 38.638808087072974}, {"code": "public URI reconstructURI(ServiceInstance server, URI original) {\n\t    String uriStr = original.toString();\n    String scheme = original.getScheme();\n    String host = server.getHost();\n    int port = server.getPort();\n    String query = original.getQuery();\n    String path = original.getPath();\n    if (StrUtil.isBlank(scheme)) {\n            scheme = \\\"http\\\";\n        }\n\n        StringBuilder uriBuilder = new StringBuilder(scheme).append(\\\"://\\\").append(host).append(\\\":\\\").append(port);\n        if (StrUtil.isNotBlank(path)) {\n            uriBuilder.append(path);\n        }\n\n        if (StrUtil.isNotBlank(query)) {\n            uriBuilder.append(\\\"\\\").append(query);\n        }\n\n        try {\n            return new URI(uriBuilder.toString());\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n    }", "CodeBleu_score": 43.331500939837866}]}
{"instance_id": "6801d2b2e4c8", "generation_result": [{"code": "private List<TutuServer> getServer(){\n\t    Map<String, Object> params = new HashMap<>();\n    params.put(\"serviceName\", serviceId);\n    String response = HttpUtil.get(discoveryProperties.getServerAddress() + \"/list\", params);\n    List<Map<String, Object>> list = JSON.parseArray(response, Map.class);\n    return list.stream().map(map -> new TutuServer((String) map.get(\"ip\"), (Integer) map.get(\"port\"))).collect(Collectors.toList());\n}", "CodeBleu_score": 47.32516945730656}, {"code": "private List<TutuServer> getServer(){\n\t    Map<String, Object> param = new HashMap<>();\n    param.put(\"serviceName\", serviceId);\n    String response = HttpUtil.get(discoveryProperties.getServerAddress() + \"/list\", param);\n    List<JSONObject> jsonList = JSON.parseArray(response, JSONObject.class);\n    List<TutuServer> serverList = jsonList.stream().map(json -> new TutuServer(json.getString(\"ip\"), json.getIntValue(\"port\"))).collect(Collectors.toList());\n    logger.info(\"TutuServerList getServer response:{}\", JSON.toJSONString(serverList));\n    return serverList;\n}", "CodeBleu_score": 59.030546137978405}, {"code": "private List<TutuServer> getServer(){\n\t    // Construct the parameters for the request\n    Map<String, Object> params = new HashMap<>();\n    params.put(\"serviceName\", serviceId);\n\n    // Send the request to the discovery service\n    String response = HttpUtil.get(discoveryProperties.getServerAddress() + \"/list\", params);\n\n    // Parse the response into a list of TutuServer objects\n    List<TutuServer> serverList = JSON.parseArray(response, TutuServer.class);\n\n    // Return the list of TutuServer objects\n    return serverList;\n}", "CodeBleu_score": 40.82706271280582}]}
{"instance_id": "ab2fb77484fd", "generation_result": [{"code": "public Route getMatchingRoute(String path){\n\t\tMap<String, ZuulProperties.ZuulRoute> routes = zuulProperties.getRoutes();\n\tfor (Map.Entry<String, ZuulProperties.ZuulRoute> entry : routes.entrySet()) {\n\t\tZuulProperties.ZuulRoute zuulRoute = entry.getValue();\n\t\tif (pathMatcher.match(zuulRoute.getPath(), path)) {\n\t\t\tString targetPath = path.substring(zuulRoute.getPath().length());\n\t\t\treturn new Route(targetPath, zuulRoute.getServiceId());\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 54.82931400719176}, {"code": "public Route getMatchingRoute(String path){\n\t    for (Map.Entry<String, ZuulRoute> entry : zuulProperties.getRoutes().entrySet()) {\n        ZuulRoute route = entry.getValue();\n        if (pathMatcher.match(route.getPath(), path)) {\n            String serviceId = route.getServiceId();\n            String targetPath = path.substring(route.getPath().length());\n            return new Route(serviceId, targetPath);\n        }\n    }\n    return null;\n}", "CodeBleu_score": 54.18491800281442}, {"code": "public Route getMatchingRoute(String path){\n\t    for (Map.Entry<String, ZuulProperties.ZuulRoute> entry : zuulProperties.getRoutes().entrySet()) {\n        ZuulProperties.ZuulRoute zuulRoute = entry.getValue();\n        if (pathMatcher.match(zuulRoute.getPath(), path)) {\n            String targetPath = path.substring(zuulRoute.getPath().length());\n            return new Route(zuulRoute.getServiceId(), zuulRoute.getPath(), targetPath);\n        }\n    }\n    return null;\n}", "CodeBleu_score": 58.67423502599423}]}
{"instance_id": "822071925513", "generation_result": [{"code": "public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry){\n\t    // Get the package name of the importing class\n    String packageName = importingClassMetadata.getClassName().substring(0, importingClassMetadata.getClassName().lastIndexOf(\".\"));\n\n    // Scan for classes with the @FeignClient annotation within the package\n    Set<Class<?>> feignClientClasses = ClassUtil.scanPackageByAnnotation(packageName, FeignClient.class);\n\n    // Create GenericBeanDefinition instances for each annotated class\n    for (Class<?> feignClientClass : feignClientClasses) {\n        GenericBeanDefinition beanDefinition = new GenericBeanDefinition();\n        beanDefinition.setBeanClass(FeignClientFactoryBean.class);\n        beanDefinition.getPropertyValues().addPropertyValue(\"type\", feignClientClass);\n        beanDefinition.getPropertyValues().addPropertyValue(\"contextId\", feignClientClass.getSimpleName());\n\n        // Register the bean definition with the BeanDefinitionRegistry using the class name as the bean name\n        registry.registerBeanDefinition(feignClientClass.getSimpleName(), beanDefinition);\n    }\n}", "CodeBleu_score": 53.24681107255979}, {"code": "public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry){\n\t    Set<String> feignClientClassNames = ClassUtil.scanPackageByAnnotation(importingClassMetadata.getClassName(), FeignClient.class);\n    for (String feignClientClassName : feignClientClassNames) {\n        Class<?> feignClientClass = ClassUtils.resolveClassName(feignClientClassName, ClassUtils.getDefaultClassLoader());\n        GenericBeanDefinition beanDefinition = new GenericBeanDefinition();\n        beanDefinition.setBeanClass(FeignClientFactoryBean.class);\n        beanDefinition.getPropertyValues().addPropertyValue(\"type\", feignClientClass);\n        beanDefinition.getPropertyValues().addPropertyValue(\"contextId\", feignClientClass.getSimpleName());\n        registry.registerBeanDefinition(feignClientClass.getSimpleName(), beanDefinition);\n    }\n}", "CodeBleu_score": 45.33956970744716}, {"code": "public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry){\n\t    Set<String> feignClients = ClassUtil.scanPackageByAnnotation(importingClassMetadata.getClassName(), FeignClient.class);\n    for (String feignClient : feignClients) {\n        GenericBeanDefinition beanDefinition = new GenericBeanDefinition();\n        beanDefinition.setBeanClass(FeignClientFactoryBean.class);\n        beanDefinition.getPropertyValues().add(\"type\", ClassUtils.resolveClassName(feignClient, null));\n        beanDefinition.getPropertyValues().add(\"contextId\", feignClient);\n        registry.registerBeanDefinition(feignClient, beanDefinition);\n    }\n}", "CodeBleu_score": 38.595670056950404}]}
{"instance_id": "3d678e3bf3c8", "generation_result": [{"code": "public TutuDiscoveryClient tutuDiscoveryClient(TutuDiscoveryProperties tutuDiscoveryProperties){\n\t    return new TutuDiscoveryClient(tutuDiscoveryProperties);\n}", "CodeBleu_score": 74.10612186004828}, {"code": "public TutuDiscoveryClient tutuDiscoveryClient(TutuDiscoveryProperties tutuDiscoveryProperties){\n\t    return new TutuDiscoveryClient(tutuDiscoveryProperties);\n}", "CodeBleu_score": 74.10612186004828}, {"code": "public TutuDiscoveryClient tutuDiscoveryClient(TutuDiscoveryProperties tutuDiscoveryProperties){\n\t    return new TutuDiscoveryClient(tutuDiscoveryProperties);\n}", "CodeBleu_score": 74.10612186004828}]}
