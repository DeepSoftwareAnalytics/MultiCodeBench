{"instance_id": "a6e254b7b855", "generation_result": [{"code": "translateTemplate(template, keystrokesByCommand){\n\t  for (let item of template) {\n    if (!item.metadata)\n      item.metadata = {};\n\n    if (item.command) {\n      const keystrokes = keystrokesByCommand[item.command];\n      if (keystrokes) {\n        item.accelerator = keystrokes[0];\n        if (item.accelerator.includes(' '))\n          item.label = keystrokes[0];\n      }\n\n      item.click = () => atomApplication.sendCommand(item.command);\n      if (!item.command.startsWith('application:'))\n        item.metadata.windowSpecific = true;\n    }\n\n    if (item.submenu)\n      this.translateTemplate(item.submenu, keystrokesByCommand);\n  }\n}", "CodeBleu_score": 46.34976747063176}, {"code": "translateTemplate(template, keystrokesByCommand){\n\t  const object = template.items || {};\n  for (let index in object) {\n    const item = object[index];\n    if (!item.metadata) item.metadata = {};\n    if (item.command) {\n      const keystrokes = keystrokesByCommand[item.command];\n      if (keystrokes) {\n        if (keystrokes.length > 0) {\n          item.accelerator = keystrokes[0];\n          if (item.accelerator.indexOf(' ') >= 0) {\n            item.label = item.accelerator;\n            item.accelerator = null;\n          }\n        }\n        item.metadata.autoUpdate = true;\n      }\n      item.click = () => atomApplication.send(item.command);\n      if (!item.command.startsWith('application:')) {\n        item.metadata.windowSpecific = true;\n      }\n      if (item.submenu) this.translateTemplate(item.submenu, keystrokesByCommand);\n    }\n  }\n  return template;\n}", "CodeBleu_score": 53.20034210999345}, {"code": "translateTemplate(template, keystrokesByCommand){\n\t    for (let item of template) {\n      if (!item.metadata) item.metadata = {};\n      if (item.command) {\n        const keystrokes = keystrokesByCommand[item.command];\n        if (keystrokes && keystrokes.length) {\n          const keystroke = keystrokes[0];\n          if (keystroke.includes(' ')) item.label = keystroke;\n          else item.accelerator = keystroke;\n        }\n        item.metadata.autoUpdate = !item.command.startsWith('application:');\n        item.metadata.windowSpecific = !item.command.startsWith('application:');\n        if (item.click) throw new Error('Menu item already has a click handler');\n        item.click = () => global.atomApplication.sendCommand(item.command);\n      }\n      if (item.submenu) this.translateTemplate(item.submenu, keystrokesByCommand);\n    }\n  }", "CodeBleu_score": 55.702135604384885}]}
{"instance_id": "c4ff073b485f", "generation_result": [{"code": "flattenMenuItems(menu){\n\t    const items = [];\n    for (let item of menu.items) {\n        items.push(item);\n        if (item.submenu) {\n            items.push(...this.flattenMenuItems(item.submenu));\n        }\n    }\n    return items;\n}", "CodeBleu_score": 41.05098987266844}, {"code": "flattenMenuItems(menu){\n\t  const items = [];\n\n  for (const item of menu.items) {\n    if (item.submenu) {\n      items.push(...this.flattenMenuItems(item.submenu));\n    } else {\n      items.push(item);\n    }\n  }\n\n  return items;\n}", "CodeBleu_score": 39.590948807315016}, {"code": "flattenMenuItems(menu){\n\t  const items = [];\n  for (const item of menu.items) {\n    if (item.submenu) {\n      items.push(...this.flattenMenuItems(item.submenu));\n    } else {\n      items.push(item);\n    }\n  }\n  return items;\n}", "CodeBleu_score": 39.590948807315016}]}
{"instance_id": "dba487230999", "generation_result": [{"code": "const encryptOptions = (options, secret) =>{\n\t  const iv = crypto.randomBytes(16);\n  const cipher = crypto.createCipheriv('aes-256-gcm', secret, iv);\n  const encrypted = Buffer.concat([cipher.update(JSON.stringify(options)), cipher.final()]);\n  const tag = cipher.getAuthTag();\n\n  return JSON.stringify({\n    tag: tag.toString('hex'),\n    content: encrypted.toString('hex'),\n    iv: iv.toString('hex')\n  });\n}", "CodeBleu_score": 52.0672933051886}, {"code": "const encryptOptions = (options, secret) =>{\n\t  const iv = crypto.randomBytes(16);\n  const cipher = crypto.createCipheriv('aes-256-gcm', secret, iv);\n  const encrypted = Buffer.concat([cipher.update(JSON.stringify(options), 'utf8'), cipher.final()]);\n  const tag = cipher.getAuthTag();\n\n  return JSON.stringify({\n    iv: iv.toString('hex'),\n    encrypted: encrypted.toString('hex'),\n    tag: tag.toString('hex')\n  });\n}", "CodeBleu_score": 52.20417047773777}, {"code": "const encryptOptions = (options, secret) =>{\n\t  const iv = crypto.randomBytes(16);\n  const cipher = crypto.createCipheriv('aes-256-gcm', secret, iv);\n  const encrypted = cipher.update(JSON.stringify(options), 'utf8', 'hex');\n  const authTag = cipher.final();\n  return JSON.stringify({\n    authTag,\n    encrypted: encrypted + authTag,\n    iv: iv.toString('hex')\n  });\n}", "CodeBleu_score": 50.14616527124398}]}
{"instance_id": "7efe3d7cee0f", "generation_result": [{"code": "createClickHandlers(template){\n\t  for (const item of template) {\n    if (item.command) {\n      item.commandDetail = item.command;\n      item.contextCommand = true;\n      item.click = () => {\n        this.atomWindow.send(item.command, item.commandDetail);\n      };\n    } else if (item.submenu) {\n      this.createClickHandlers(item.submenu);\n    }\n  }\n}", "CodeBleu_score": 62.96487993321729}, {"code": "createClickHandlers(template){\n\t  template.forEach((item) => {\n    if (item.command) {\n      item.commandDetail = item.commandDetail || {};\n      item.commandDetail.contextCommand = true;\n      item.click = () => {\n        this.atomWindow.sendCommand(item.command, item.commandDetail);\n      };\n    }\n\n    if (item.submenu) {\n      this.createClickHandlers(item.submenu);\n    }\n  });\n}", "CodeBleu_score": 59.89141735920387}, {"code": "createClickHandlers(template){\n\t  for (const item of template) {\n    if (item.command) {\n      item.commandDetail = item.commandDetail || {};\n      item.commandDetail.contextCommand = true;\n      item.click = () => {\n        this.atomWindow.sendCommand(item.command, item.commandDetail);\n      };\n    } else if (item.submenu) {\n      this.createClickHandlers(item.submenu);\n    }\n  }\n}", "CodeBleu_score": 69.13943254433858}]}
{"instance_id": "851df56cc3b9", "generation_result": [{"code": "async didSavePath(window, path){\n\t    const recoveryFile = this.recoveryFilesByFilePath.get(path);\n    if (!recoveryFile) return;\n\n    try {\n      await recoveryFile.release();\n    } catch (err) {\n      console.log(\n        `Couldn't release ${recoveryFile.recoveryPath}. Code: ${\n          err.code\n        }. Message: ${err.message}`\n      );\n      return;\n    }\n\n    this.recoveryFilesByFilePath.delete(path);\n    this.recoveryFilesByWindow.get(window).delete(recoveryFile);\n    this.windowsByRecoveryFile.get(recoveryFile).delete(window);\n    if (this.recoveryFilesByWindow.get(window).size === 0) {\n      this.recoveryFilesByWindow.delete(window);\n    }\n    if (this.windowsByRecoveryFile.get(recoveryFile).size === 0) {\n      this.windowsByRecoveryFile.delete(recoveryFile);\n    }\n  }", "CodeBleu_score": 76.84500097732632}, {"code": "async didSavePath(window, path){\n\t  const recoveryFile = this.recoveryFilesByFilePath.get(path);\n  if (!recoveryFile) return;\n    this.recoveryFilesByFilePath.delete(path);\n    this.recoveryFilesByWindow.get(window).delete(recoveryFile);\n    this.windowsByRecoveryFile.get(recoveryFile).delete(window);\n    if (this.recoveryFilesByWindow.get(window).size === 0) {\n      this.recoveryFilesByWindow.delete(window);\n    }\n    if (this.windowsByRecoveryFile.get(recoveryFile).size === 0) {\n      this.windowsByRecoveryFile.delete(recoveryFile);\n    }\n\n    try {\n      await recoveryFile.release();\n    } catch (err) {\n      console.log(\n        `Couldn't release ${recoveryFile.recoveryPath}. Code: ${\n          err.code\n        }. Message: ${err.message}`\n      );\n      return;\n    }\n  }", "CodeBleu_score": 76.94297395524589}, {"code": "async didSavePath(window, path){\n\t  const recoveryFile = this.recoveryFilesByFilePath.get(path);\n  if (!recoveryFile) return;\n\n    try {\n      await recoveryFile.release();\n    } catch (err) {\n      console.log(\n        `Couldn't release ${recoveryFile.recoveryPath}. Code: ${\n          err.code\n        }. Message: ${err.message}`\n      );\n      return;\n    }\n\n    this.recoveryFilesByFilePath.delete(path);\n    this.recoveryFilesByWindow.get(window).delete(recoveryFile);\n    this.windowsByRecoveryFile.get(recoveryFile).delete(window);\n  }", "CodeBleu_score": 82.56596557012845}]}
{"instance_id": "37d777933a87", "generation_result": [{"code": "async didCrashWindow(window){\n\t  const recoveryFiles = this.recoveryFilesByWindow.get(window);\n  if (!recoveryFiles) return;\n\n  for (const recoveryFile of recoveryFiles) {\n    try {\n      await recoveryFile.recover();\n    } catch (err) {\n      console.log(\n        `Couldn't recover ${recoveryFile.path}. Code: ${\n          err.code\n        }. Message: ${err.message}`\n      );\n      const message = `${recoveryFile.path} was corrupted. Please fix it at ${recoveryFile.recoveryPath}.`;\n      dialog.showErrorBox(\n        'Corrupted File',\n        message\n      );\n    }\n  }\n\n  for (const recoveryFile of recoveryFiles) {\n    this.recoveryFilesByFilePath.delete(recoveryFile.path);\n    this.windowsByRecoveryFile.get(recoveryFile).delete(window);\n    this.recoveryFilesByWindow.get(window).delete(recoveryFile);\n    recoveryFile.destroy();\n  }\n}", "CodeBleu_score": 42.38011019896773}, {"code": "async didCrashWindow(window){\n\t  const recoveryFiles = this.recoveryFilesByWindow.get(window);\n  if (!recoveryFiles) return;\n\n  await Promise.all(\n    Array.from(recoveryFiles).map(async recoveryFile => {\n      try {\n        await recoveryFile.recover();\n      } catch (err) {\n        console.log(\n          `Couldn't recover ${recoveryFile.path}. Code: ${err.code}. Message: ${err.message}`\n        );\n        dialog.showMessageBox({\n          message: `Couldn't recover ${recoveryFile.path}. Code: ${err.code}. Message: ${err.message}`,\n          detail: `Recovery file: ${recoveryFile.recoveryPath}`\n        });\n      } finally {\n        this.recoveryFilesByFilePath.delete(recoveryFile.path);\n        this.recoveryFilesByWindow.get(window).delete(recoveryFile);\n        this.windowsByRecoveryFile.get(recoveryFile).delete(window);\n      }\n    })\n  );\n}", "CodeBleu_score": 33.265768764974126}, {"code": "async didCrashWindow(window){\n\t", "CodeBleu_score": 2.7930095370516357}]}
{"instance_id": "935916bc7ea0", "generation_result": [{"code": "async function copyFile(source, destination, mode){\n\t  return new Promise((resolve, reject) => {\n    mkdirp(Path.dirname(destination), error => {\n      if (error) return reject(error);\n      const readStream = fs.createReadStream(source);\n      const writeStream = fs.createWriteStream(destination, { mode });\n      readStream.on('error', reject);\n      writeStream.on('error', reject);\n      readStream.on('end', resolve);\n      readStream.pipe(writeStream);\n    });\n  });\n}", "CodeBleu_score": 62.27047306227812}, {"code": "async function copyFile(source, destination, mode){\n\t  return new Promise((resolve, reject) => {\n    mkdirp(Path.dirname(destination), error => {\n      if (error) return reject(error);\n      const readStream = fs.createReadStream(source);\n      const writeStream = fs.createWriteStream(destination);\n      readStream.on('error', reject);\n      writeStream.on('error', reject);\n      writeStream.on('finish', resolve);\n      readStream.pipe(writeStream);\n    });\n  });\n}", "CodeBleu_score": 59.24576018686773}, {"code": "async function copyFile(source, destination, mode){\n\t  const dir = Path.dirname(destination);\n  await mkdirp(dir);\n  return new Promise((resolve, reject) => {\n    const readStream = fs.createReadStream(source);\n    const writeStream = fs.createWriteStream(destination);\n    readStream.on('error', reject);\n    writeStream.on('error', reject);\n    writeStream.on('close', resolve);\n    readStream.pipe(writeStream);\n    fs.chmod(destination, mode, err => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n}", "CodeBleu_score": 52.181242795066794}]}
{"instance_id": "5410353afedd", "generation_result": [{"code": "function handleStartupEventWithSquirrel(){\n\t  if (process.platform !== 'win32') {\n    return false;\n  }\n\n  const SquirrelUpdate = require('squirrel-update');\n  const squirrelCommand = process.argv[1];\n  return SquirrelUpdate.handleStartupEvent(squirrelCommand);\n}", "CodeBleu_score": 95.7979186165728}, {"code": "function handleStartupEventWithSquirrel(){\n\t  if (process.platform !== 'win32') {\n    return false;\n  }\n\n  const SquirrelUpdate = require('squirrel-update');\n  const squirrelCommand = process.argv.slice(1).find(arg => /^--squirrel-/.test(arg));\n\n  if (squirrelCommand) {\n    return SquirrelUpdate.handleStartupEvent(squirrelCommand);\n  }\n\n  return false;\n}", "CodeBleu_score": 76.884721787467}, {"code": "function handleStartupEventWithSquirrel(){\n\t  if (process.platform !== 'win32') {\n    return false;\n  }\n\n  const SquirrelUpdate = require('squirrel-update');\n  const command = process.argv[1];\n  return SquirrelUpdate.handleStartupEvent(command);\n}", "CodeBleu_score": 88.58771711735137}]}
{"instance_id": "5fb2d4f077cb", "generation_result": [{"code": "function normalizeDriveLetterName(filePath){\n\t  if (process.platform === 'win32' && filePath) {\n    const driveLetter = filePath.match(/^[a-z]:/);\n    if (driveLetter) {\n      const uppercaseDriveLetter = driveLetter[0].toUpperCase();\n      filePath = filePath.replace(driveLetter[0], uppercaseDriveLetter);\n    }\n  }\n  return filePath;\n}", "CodeBleu_score": 58.71003123443626}, {"code": "function normalizeDriveLetterName(filePath){\n\t  if (process.platform !== 'win32' || !filePath) {\n    return filePath;\n  }\n  const driveLetter = filePath.match(/^[a-z]:/);\n  if (!driveLetter) {\n    return filePath;\n  }\n  return filePath.replace(driveLetter[0], driveLetter[0].toUpperCase());\n}", "CodeBleu_score": 54.637840932822456}, {"code": "function normalizeDriveLetterName(filePath){\n\t  if (process.platform !== 'win32') {\n    return filePath;\n  }\n\n  if (filePath == null) {\n    return filePath;\n  }\n\n  const driveLetter = filePath.match(/^[a-z]:/);\n  if (driveLetter == null) {\n    return filePath;\n  }\n\n  return filePath.replace(driveLetter[0], driveLetter[0].toUpperCase());\n}", "CodeBleu_score": 52.70422699222783}]}
{"instance_id": "e61a087ae10f", "generation_result": [{"code": "register(callback){\n\t", "CodeBleu_score": 0.9438691534805712}, {"code": "register(callback){\n\t  const self = this;\n    const parts = this.parts;\n    const key = this.key;\n    const length = parts.length;\n    let i = 0;\n    const cb = (err) => {\n      if (err) {\n        return callback(err);\n      }\n      if (i === length) {\n        return callback(null);\n      }\n      i++;\n      const part = parts[i];\n      new Registry({\n        hive: 'HKCU',\n        key: `${key}\\\\${part.key}`\n      }).set(part.name, Registry.REG_SZ, part.value, () => {\n        cb(null);\n      });\n    };\n    cb(null);\n  }", "CodeBleu_score": 43.588638730036045}, {"code": "register(callback){\n\t    const self = this;\n    const parts = this.parts;\n    const key = this.key;\n    const length = parts.length;\n    let i = 0;\n    function next() {\n        if (i < length) {\n            const part = parts[i];\n            const registry = new Registry({\n                hive: 'HKCU',\n                key: `${key}\\\\${part.key}`\n            });\n            registry.set(part.name, Registry.REG_SZ, part.value, (err) => {\n                if (err) {\n                    callback(err);\n                } else {\n                    i++;\n                    next();\n                }\n            });\n        } else {\n            callback(null);\n        }\n    }\n    next();\n}", "CodeBleu_score": 40.12401996144694}]}
{"instance_id": "35b1a1ac391a", "generation_result": [{"code": "showSaveDialog(options, callback){\n\t  if (typeof callback === 'function') {\n    // Async version: pass options directly to Electron but set sane defaults\n    options = Object.assign(\n      { title: 'Save File', buttonLabel: 'Save', defaultPath: '' },\n      options\n    );\n    remote.dialog\n      .showSaveDialog(remote.getCurrentWindow(), options)\n      .then(result => {\n        callback(result.filePath);\n      });\n  } else {\n    // Legacy sync version: options can only have `title`, `message`, `defaultPath`, `buttonLabel`, and `filters`\n    if (typeof options === 'string') {\n      options = { defaultPath: options };\n    }\n    options = Object.assign(\n      {\n        title: 'Save File',\n        buttonLabel: 'Save',\n        filters: [{ name: 'All Files', extensions: ['*'] }]\n      },\n      options\n    );\n    return remote.dialog.showSaveDialogSync(\n      remote.getCurrentWindow(),\n      options\n    );\n  }\n}", "CodeBleu_score": 66.557867940232}, {"code": "showSaveDialog(options, callback){\n\t  if (typeof callback === 'function') {\n    // Async version: pass options directly to Electron but set sane defaults\n    options = Object.assign(\n      {\n        defaultPath: '',\n        title: '',\n        message: '',\n        buttonLabel: 'Save',\n        showsHiddenFiles: false,\n        properties: ['createDirectory', 'showHiddenFiles', 'openFile'],\n      },\n      options,\n    );\n    remote.dialog\n      .showSaveDialog(remote.getCurrentWindow(), options)\n      .then(result => {\n        callback(result);\n      });\n  } else {\n    // Legacy sync version: options can only have `defaultPath`, `title`, `message`, and `buttonLabel`\n    const { defaultPath, title, message, buttonLabel } = options;\n    const result = remote.dialog.showSaveDialogSync(\n      remote.getCurrentWindow(),\n      {\n        defaultPath,\n        title,\n        message,\n        buttonLabel,\n      },\n    );\n    if (result) {\n      return result;\n    }\n  }\n}", "CodeBleu_score": 47.57349533024479}, {"code": "showSaveDialog(options, callback){\n\t  if (typeof callback === 'function') {\n    // Async version: pass options directly to Electron but set sane defaults\n    options = Object.assign(\n      { title: 'Save File', message: 'Save file as...' },\n      options\n    );\n    remote.dialog\n      .showSaveDialog(remote.getCurrentWindow(), options)\n      .then(result => {\n        callback(result);\n      });\n  } else {\n    // Legacy sync version: options can only have `title`, `message`, `defaultPath`, `buttonLabel`, and `filters`\n    let {\n      title = 'Save File',\n      message = 'Save file as...',\n      defaultPath,\n      buttonLabel = 'Save',\n      filters\n    } = options;\n    if (typeof options === 'string') {\n      defaultPath = options;\n    }\n    return remote.dialog.showSaveDialogSync(\n      remote.getCurrentWindow(),\n      { title, message, defaultPath, buttonLabel, filters }\n    );\n  }\n}", "CodeBleu_score": 52.94346303594192}]}
{"instance_id": "a7e394aca19e", "generation_result": [{"code": "async restoreWindowDimensions(){\n\t  const windowDimensions = this.getWindowDimensions();\n  if (this.isValidDimensions(windowDimensions)) {\n    return windowDimensions;\n  }\n  const defaultWindowDimensions = this.getDefaultWindowDimensions();\n  await this.setWindowDimensions(defaultWindowDimensions);\n  return defaultWindowDimensions;\n}", "CodeBleu_score": 28.955366675238487}, {"code": "async restoreWindowDimensions(){\n\t  const {\n    x,\n    y,\n    width,\n    height,\n    maximized,\n    fullScreen\n  } = this.getDefaultWindowDimensions();\n  await this.setWindowDimensions({\n    x,\n    y,\n    width,\n    height\n  });\n  if (maximized) this.maximize();\n  if (fullScreen) this.setFullScreen(true);\n  return {\n    x,\n    y,\n    width,\n    height\n  };\n}", "CodeBleu_score": 21.578871237110313}, {"code": "async restoreWindowDimensions(){\n\t  const dimensions = this.getWindowDimensions();\n  if (this.isValidDimensions(dimensions)) return dimensions;\n  const defaultDimensions = this.getDefaultWindowDimensions();\n  await this.setWindowDimensions(defaultDimensions);\n  return defaultDimensions;\n}", "CodeBleu_score": 28.91233604954949}]}
{"instance_id": "c39fbfaa6502", "generation_result": [{"code": "installShellCommandsInteractively(){\n\t  const {\n    app,\n    dialog,\n    shell,\n    shellCommands,\n    shellCommandsInstaller\n  } = require('electron');\n\n  const {\n    appVersion\n  } = this;\n\n  const appName = app.getName();\n\n  const installCommand = (commandName, command) => {\n    const installDirectory = this.getInstallDirectory();\n    const resourcesDirectory = this.getResourcesDirectory();\n    const executablePath = path.join(resourcesDirectory, 'app', 'apm', 'bin', commandName);\n    const destinationPath = path.join(installDirectory, commandName);\n    const commandOptions = {\n      executablePath,\n      destinationPath,\n      command,\n      appName,\n      appVersion\n    };\n\n    return shellCommandsInstaller.installCommand(commandOptions).then(() => {\n      shell.moveItemToTrash(executablePath);\n      return commandName;\n    }).catch(error => {\n      dialog.showErrorBox(`Failed to install ${commandName}`, error.message);\n      throw error;\n    });\n  };\n\n  const installAtomCommand = () => {\n    const command = shellCommands.atom;\n    const commandName = 'atom';\n    return installCommand(commandName, command);\n  };\n\n  const installApmCommand = () => {\n    const command = shellCommands.apm;\n    const commandName = 'apm';\n    return installCommand(commandName, command);\n  };\n\n  const onError = error => {\n    dialog.showErrorBox('Failed to install shell commands', error.message);\n  };\n\n  const onSuccess = () => {\n    dialog.showMessageBox({\n      type: 'info',\n      message: 'Shell commands installed',\n      detail: 'The Atom and APM commands have been installed. You may need to restart your terminal for the changes to take effect.'\n    });\n  };\n\n  installAtomCommand().then(installApmCommand).then(onSuccess).catch(onError);\n}", "CodeBleu_score": 28.589166701827416}, {"code": "installShellCommandsInteractively(){\n\t", "CodeBleu_score": 0.844498191678412}, {"code": "installShellCommandsInteractively(){\n\t    const installCommand = (commandName, commandPath) => {\n        const installPath = path.join(this.getInstallDirectory(), commandName);\n        const commandExists = fs.existsSync(installPath);\n        if (!commandExists) {\n            fs.writeFileSync(installPath, `#!/bin/sh\n${commandPath} \"$@\"`, {\n                mode: 0o755,\n            });\n        }\n        return commandExists;\n    };\n\n    const showErrorDialog = (title, message) => {\n        this.applicationDelegate.getCurrentWindow().showErrorMessage(title, {\n            detail: message,\n        });\n    };\n\n    const atomCommandInstalled = installCommand(\n        'atom',\n        path.join(this.getResourcesDirectory(), 'app', 'atom.sh'),\n    );\n\n    const apmCommandInstalled = installCommand(\n        'apm',\n        path.join(this.getResourcesDirectory(), 'apm', 'node_modules', 'atom-package-manager', 'bin', 'apm'),\n    );\n\n    if (atomCommandInstalled && apmCommandInstalled) {\n        this.applicationDelegate.getCurrentWindow().showMessage(\n            'Installation Complete',\n            {\n                detail: 'The Atom shell commands have been installed.',\n            },\n        );\n    } else {\n        const errorTitle = atomCommandInstalled\n            ? 'APM command failed to install'\n            : 'Atom command failed to install';\n        const errorMessage = atomCommandInstalled\n            ? 'The APM shell command failed to install. Please try again.'\n            : 'The Atom shell command failed to install. Please try again.';\n        showErrorDialog(errorTitle, errorMessage);\n    }\n}", "CodeBleu_score": 31.853256211674346}]}
{"instance_id": "09d527496128", "generation_result": [{"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\t    if (process.platform !== 'darwin') return callback(null);\n\n    let commandDestinationPath = path.join(this.getInstallDirectory(), commandName);\n    let commandDestinationPathExists = fs.existsSync(commandDestinationPath);\n    let commandDestinationPathIsSymlink = commandDestinationPathExists && fs.lstatSync(commandDestinationPath).isSymbolicLink();\n    let commandDestinationPathIsCorrect = commandDestinationPathIsSymlink && fs.readlinkSync(commandDestinationPath) === commandPath;\n\n    if (commandDestinationPathIsCorrect) return callback(null);\n\n    if (commandDestinationPathExists && !commandDestinationPathIsSymlink) {\n      fs.unlinkSync(commandDestinationPath);\n    }\n\n    if (!commandDestinationPathExists) {\n      fs.symlinkSync(commandPath, commandDestinationPath);\n      return callback(null);\n    }\n\n    if (askForPrivilege && !commandDestinationPathIsCorrect) {\n      let sudo = require('sudo-prompt');\n      let sudoOptions = {\n        name: 'Atom',\n        icns: path.join(this.getResourcesDirectory(), 'app', 'resources', 'app', 'atom.icns')\n      };\n\n      sudo.exec(`ln -sf \"${commandPath}\" \"${commandDestinationPath}\"`, sudoOptions, (error) => {\n        if (error) return callback(error);\n        callback(null);\n      });\n    } else {\n      callback(new Error('Permission denied'));\n    }\n  }", "CodeBleu_score": 41.979980846260204}, {"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\t    if (process.platform !== 'darwin') return callback();\n\n    const destinationPath = path.join(this.getInstallDirectory(), commandName);\n    const symlinkExists = fs.isSymbolicLinkSync(destinationPath);\n    const symlinkTarget = symlinkExists ? fs.readlinkSync(destinationPath) : null;\n\n    if (symlinkTarget === commandPath) {\n      return callback();\n    }\n\n    fs.symlink(commandPath, destinationPath, 'file', (error) => {\n      if (error && error.code === 'EPERM' && askForPrivilege) {\n        this.applicationDelegate.confirm({\n          message: 'Permission Denied',\n          detail: `You need to allow Atom to install the \\`${commandName}\\` command.`,\n        }, () => {\n          fs.symlink(commandPath, destinationPath, 'file', (error) => {\n            if (error) return callback(error);\n            return callback();\n          });\n        });\n      } else if (error) {\n        return callback(error);\n      }\n\n      return callback();\n    });\n  }", "CodeBleu_score": 52.90676094461908}, {"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\t    if (process.platform !== 'darwin') return callback(null, null);\n\n    let destinationPath = path.join(this.getInstallDirectory(), commandName);\n    fs.readlink(destinationPath, (error, symlinkPath) => {\n        if (error) return callback(error, null);\n\n        if (symlinkPath === commandPath || !symlinkPath) {\n            return callback(null, commandName);\n        }\n\n        if (error.code === 'EACCES' && askForPrivilege) {\n            this.applicationDelegate.promptToElevatePrivileges(\n                {\n                    message: `Installing ${commandName} requires administrator privileges`,\n                    detail: `${commandName} needs to be installed in order to be used from the command line.`\n                },\n                () => {\n                    this.installCommand(commandPath, commandName, false, callback);\n                }\n            );\n            return;\n        }\n\n        callback(error, null);\n    });\n}", "CodeBleu_score": 43.94721837047245}]}
{"instance_id": "4807d5d43396", "generation_result": [{"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\t    let goalColumn = this.getScreenColumn();\n    if (moveToEndOfSelection) {\n        const selection = this.editor.getSelectedBufferRange();\n        if (selection) {\n            const start = selection.start;\n            if (start.row === this.getBufferRow()) {\n                goalColumn = Math.min(goalColumn, selection.start.column);\n            }\n        }\n    }\n    const newScreenPosition = this.getScreenPosition().translate([-rowCount, 0]);\n    const row = newScreenPosition.row;\n    const column = this.editor.getSoftWrappedColumn(newScreenPosition.column, row);\n    this.setScreenPosition([row, column], { autoscroll: false });\n    goalColumn = column;\n}", "CodeBleu_score": 32.07751710155261}, {"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\t  const { row, column } = this.getScreenPosition();\n  const newRow = row - rowCount;\n  const goalColumn = moveToEndOfSelection && this.editor.getLastCursor().getScreenColumn();\n  const newColumn = goalColumn || column;\n  const newScreenPosition = this.editor.clipScreenPosition([newRow, newColumn]);\n  this.setScreenPosition(newScreenPosition, { autoscroll: false });\n  this.goalColumn = newColumn;\n}", "CodeBleu_score": 35.930131403328126}, {"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\t  if (moveToEndOfSelection) {\n    const selection = this.editor.getSelectedBufferRange();\n    if (selection) {\n      const [startRow, startColumn] = selection.start;\n      const [endRow, endColumn] = selection.end;\n      if (startRow === endRow) {\n        this.setScreenPosition([startRow - rowCount, startColumn]);\n        return;\n      }\n    }\n  }\n\n  const goalColumn = this.getScreenColumn();\n  this.setScreenPosition([this.getScreenRow() - rowCount, goalColumn]);\n}", "CodeBleu_score": 35.36239143731209}]}
{"instance_id": "a18da78a3351", "generation_result": [{"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\t    const decorationsByMarker = new Map();\n\n    this.decorationCountsByLayer.forEach((count, markerLayer) => {\n      const markers = markerLayer.findMarkers({\n        intersectsScreenRowRange: [startScreenRow, endScreenRow - 1]\n      });\n      const layerDecorations = this.layerDecorationsByMarkerLayer.get(\n        markerLayer\n      );\n      const hasMarkerDecorations =\n        this.markerDecorationCountsByLayer.get(markerLayer) > 0;\n\n      for (let i = 0; i < markers.length; i++) {\n        const marker = markers[i];\n        if (!marker.isValid()) continue;\n\n        let decorationsForMarker = decorationsByMarker.get(marker.id);\n        if (decorationsForMarker == null) {\n          decorationsForMarker = [];\n          decorationsByMarker.set(marker.id, decorationsForMarker);\n        }\n\n        if (layerDecorations) {\n          layerDecorations.forEach(layerDecoration => {\n            const decoration = layerDecoration.getDecorationForMarker(marker);\n            if (decoration) decorationsForMarker.push(decoration);\n          });\n        }\n\n        if (hasMarkerDecorations) {\n          const decorationsForMarker = this.decorationsByMarker.get(marker);\n          if (decorationsForMarker) {\n            decorationsForMarker.forEach(decoration => {\n              decorationsForMarker.push(decoration);\n            });\n          }\n        }\n      }\n    });\n\n    return decorationsByMarker;\n  }", "CodeBleu_score": 37.315245830236506}, {"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\t    const decorationsByMarker = new Map();\n\n    this.decorationCountsByLayer.forEach((count, markerLayer) => {\n      const markers = markerLayer.findMarkers({\n        intersectsScreenRowRange: [startScreenRow, endScreenRow - 1]\n      });\n      const layerDecorations = this.layerDecorationsByMarkerLayer.get(\n        markerLayer\n      );\n      const hasMarkerDecorations =\n        this.markerDecorationCountsByLayer.get(markerLayer) > 0;\n\n      for (let i = 0; i < markers.length; i++) {\n        const marker = markers[i];\n        if (!marker.isValid()) continue;\n\n        let decorationsForMarker = decorationsByMarker.get(marker.id);\n        if (decorationsForMarker == null) {\n          decorationsForMarker = [];\n          decorationsByMarker.set(marker.id, decorationsForMarker);\n        }\n\n        if (layerDecorations) {\n          layerDecorations.forEach(layerDecoration => {\n            const properties =\n              layerDecoration.getPropertiesForMarker(marker) ||\n              layerDecoration.getProperties();\n            decorationsForMarker.push(\n              new Decoration({\n                markerLayer: markerLayer,\n                marker: marker,\n                properties: properties\n              })\n            );\n          });\n        }\n\n        if (hasMarkerDecorations) {\n          const decorationsForMarker = this.decorationsByMarker.get(marker);\n          if (decorationsForMarker) {\n            decorationsForMarker.forEach(decoration => {\n              decorationsForMarker.push(\n                new Decoration({\n                  markerLayer: markerLayer,\n                  marker: marker,\n                  properties: decoration.getProperties()\n                })\n              );\n            });\n          }\n        }\n      }\n    });\n\n    return decorationsByMarker;\n  }", "CodeBleu_score": 35.81404041528877}, {"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\t    const decorationsByMarker = new Map();\n\n    this.decorationCountsByLayer.forEach((count, markerLayer) => {\n        const markers = markerLayer.findMarkers({\n            intersectsScreenRowRange: [startScreenRow, endScreenRow - 1]\n        });\n        const layerDecorations = this.layerDecorationsByMarkerLayer.get(\n            markerLayer\n        );\n        const hasMarkerDecorations =\n            this.markerDecorationCountsByLayer.get(markerLayer) > 0;\n\n        for (let i = 0; i < markers.length; i++) {\n            const marker = markers[i];\n            if (!marker.isValid()) continue;\n\n            let decorationsForMarker = decorationsByMarker.get(marker.id);\n            if (decorationsForMarker == null) {\n                decorationsForMarker = [];\n                decorationsByMarker.set(marker.id, decorationsForMarker);\n            }\n\n            if (layerDecorations) {\n                layerDecorations.forEach(layerDecoration => {\n                    const decoration = layerDecoration.getDecorationForMarker(marker);\n                    if (decoration) decorationsForMarker.push(decoration);\n                });\n            }\n\n            if (hasMarkerDecorations) {\n                const decorationsForMarker = this.decorationsByMarker.get(marker);\n                if (decorationsForMarker) {\n                    decorationsForMarker.forEach(decoration => {\n                        decorationsForMarker.push(decoration);\n                    });\n                }\n            }\n        }\n    });\n\n    return decorationsByMarker;\n}", "CodeBleu_score": 36.688307154982226}]}
{"instance_id": "950f6b74f379", "generation_result": [{"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\t    if (markerLayer.isDestroyed()) {\n        const error = new Error('Cannot decorate a destroyed marker layer');\n        error.metadata = { markerLayerIsDestroyed: markerLayer.isDestroyed() };\n        if (markerLayer.destroyStackTrace != null) {\n            error.metadata.destroyStackTrace = markerLayer.destroyStackTrace;\n        }\n        throw error;\n    }\n    markerLayer = this.displayLayer.getMarkerLayer(markerLayer.id);\n    const decoration = new LayerDecoration(markerLayer, this, decorationParams);\n    let decorationsForMarkerLayer = this.layerDecorationsByMarkerLayer.get(markerLayer);\n    if (!decorationsForMarkerLayer) {\n        decorationsForMarkerLayer = new Set();\n        this.layerDecorationsByMarkerLayer.set(markerLayer, decorationsForMarkerLayer);\n    }\n    decorationsForMarkerLayer.add(decoration);\n    this.observeDecoratedLayer(markerLayer, true);\n    this.editor.didAddDecoration(decoration);\n    this.emitDidUpdateDecorations();\n    this.emitter.emit('did-add-decoration', decoration);\n    return decoration;\n}", "CodeBleu_score": 66.52460862035805}, {"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\t    if (markerLayer.isDestroyed()) {\n        const error = new Error('Cannot decorate a destroyed marker layer');\n        error.metadata = { markerLayerIsDestroyed: markerLayer.isDestroyed() };\n        if (markerLayer.destroyStackTrace != null) {\n            error.metadata.destroyStackTrace = markerLayer.destroyStackTrace;\n        }\n        throw error;\n    }\n    markerLayer = this.displayLayer.getMarkerLayer(markerLayer.id);\n    const decoration = new LayerDecoration(markerLayer, this, decorationParams);\n    let decorationsForMarkerLayer = this.layerDecorationsByMarkerLayer.get(markerLayer);\n    if (!decorationsForMarkerLayer) {\n        decorationsForMarkerLayer = new Set();\n        this.layerDecorationsByMarkerLayer.set(markerLayer, decorationsForMarkerLayer);\n    }\n    decorationsForMarkerLayer.add(decoration);\n    this.observeDecoratedLayer(markerLayer, true);\n    this.editor.didAddDecoration(decoration);\n    this.emitDidUpdateDecorations();\n    this.emitter.emit('did-add-decoration', decoration);\n    return decoration;\n}", "CodeBleu_score": 66.52460862035805}, {"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\t  if (markerLayer.isDestroyed()) {\n    const error = new Error('Cannot decorate a destroyed marker layer');\n    error.metadata = { markerLayerIsDestroyed: true };\n    throw error;\n  }\n  markerLayer = this.displayLayer.getMarkerLayer(markerLayer.id);\n  const decoration = new LayerDecoration(markerLayer, this, decorationParams);\n  let decorationsForMarkerLayer = this.layerDecorationsByMarkerLayer.get(\n    markerLayer\n  );\n  if (!decorationsForMarkerLayer) {\n    decorationsForMarkerLayer = new Set();\n    this.layerDecorationsByMarkerLayer.set(markerLayer, decorationsForMarkerLayer);\n  }\n  decorationsForMarkerLayer.add(decoration);\n  this.observeDecoratedLayer(markerLayer, true);\n  this.editor.didAddDecoration(decoration);\n  this.emitDidUpdateDecorations();\n  this.emitter.emit('did-add-decoration', decoration);\n  return decoration;\n}", "CodeBleu_score": 69.00781509476921}]}
{"instance_id": "ab015a5cc75d", "generation_result": [{"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\t  const {\n    markerDecorationCountsByLayer,\n    markerDecorationsByLayer\n  } = this;\n  const layerDecorationCount = markerDecorationCountsByLayer.get(layer) || 0;\n  markerDecorationCountsByLayer.set(layer, layerDecorationCount + 1);\n  if (isMarkerDecoration) {\n    const markerDecorationCount = markerDecorationsByLayer.get(layer) || 0;\n    markerDecorationsByLayer.set(layer, markerDecorationCount + 1);\n  }\n  const disposable = layer.onDidChangeDecorations(() => {\n    this.emitDidUpdateDecorations();\n  });\n  this.decorationDisposables.set(layer, disposable);\n}", "CodeBleu_score": 41.23177528602614}, {"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\t  let decorationCount = this.decorationCountsByLayer.get(layer);\n  if (decorationCount == null) {\n    decorationCount = 0;\n    this.decorationCountsByLayer.set(layer, decorationCount);\n  }\n  decorationCount++;\n\n  if (isMarkerDecoration) {\n    let markerDecorationCount = this.markerDecorationCountsByLayer.get(layer);\n    if (markerDecorationCount == null) {\n      markerDecorationCount = 0;\n      this.markerDecorationCountsByLayer.set(layer, markerDecorationCount);\n    }\n    markerDecorationCount++;\n  }\n\n  let disposable = this.decoratedLayers.get(layer);\n  if (disposable == null) {\n    disposable = layer.onDidUpdate(() => {\n      this.emitDidUpdateDecorations();\n    });\n    this.decoratedLayers.set(layer, disposable);\n  }\n}", "CodeBleu_score": 41.487754528943235}, {"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\t  const decorationCountsByLayer = this.decorationCountsByLayer;\n  const markerDecorationCountsByLayer = this.markerDecorationCountsByLayer;\n  const disposablesByLayer = this.disposablesByLayer;\n  let decorationCount = decorationCountsByLayer.get(layer);\n  if (decorationCount == null) {\n    decorationCount = 0;\n    decorationCountsByLayer.set(layer, decorationCount);\n    const disposable = layer.onDidChangeDecorations(() => this.emitDidUpdateDecorations());\n    disposablesByLayer.set(layer, disposable);\n  }\n  decorationCount++;\n  decorationCountsByLayer.set(layer, decorationCount);\n  if (isMarkerDecoration) {\n    let markerDecorationCount = markerDecorationCountsByLayer.get(layer);\n    if (markerDecorationCount == null) {\n      markerDecorationCount = 0;\n      markerDecorationCountsByLayer.set(layer, markerDecorationCount);\n    }\n    markerDecorationCount++;\n    markerDecorationCountsByLayer.set(layer, markerDecorationCount);\n  }\n}", "CodeBleu_score": 32.461884469171345}]}
{"instance_id": "9d7f091a1b67", "generation_result": [{"code": "finishLoading(){\n\t    this.measure('loadTime', () => {\n      this.path = path.join(this.packageManager.resourcePath, this.path);\n      this.moduleCache = new ModuleCache(this.path, this.metadata);\n      this.moduleCache.load();\n      this.loadStylesheets();\n      this.loadMainModulePath();\n    });\n  }", "CodeBleu_score": 52.707400499775694}, {"code": "finishLoading(){\n\t    this.measure('loadTime', () => {\n      this.path = path.join(this.packageManager.resourcePath, this.path);\n      this.moduleCache.add(this.path, this.metadata);\n      this.loadStylesheets();\n      this.mainModulePath = this.getMainModulePath();\n    });\n  }", "CodeBleu_score": 56.69934025062267}, {"code": "finishLoading(){\n\t    if (this.bundledPackage) {\n      this.path = this.packageManager.resourcePathForPackagePath(this.path);\n    }\n    this.measure('loadingTime', () => {\n      this.moduleCache = new ModuleCache(this.path, this.metadata);\n      this.styleManager.add(this.path, this.getStyleSheetPriority());\n      this.mainModulePath = this.getMainModulePath();\n    });\n  }", "CodeBleu_score": 30.89813046238623}]}
{"instance_id": "a06630788868", "generation_result": [{"code": "dblclickHandler(){\n\t    const userDefault = this.applicationDelegate.getUserDefault();\n    const doubleClickAction = userDefault.get('window.doubleClickAction');\n    if (doubleClickAction === 'Minimize') {\n        this.workspace.minimize();\n    }\n    else if (doubleClickAction === 'Maximize') {\n        if (this.workspace.isMaximized()) {\n            this.workspace.unmaximize();\n        }\n        else {\n            this.workspace.maximize();\n        }\n    }\n}", "CodeBleu_score": 35.52168402629643}, {"code": "dblclickHandler(){\n\t    const doubleClickAction = this.applicationDelegate.getUserDefault('window.doubleClickAction');\n    if (doubleClickAction === 'Minimize') {\n        this.workspace.minimize();\n    } else if (doubleClickAction === 'Maximize') {\n        this.workspace.toggleMaximize();\n    }\n}", "CodeBleu_score": 27.31915211835335}, {"code": "dblclickHandler(){\n\t    const doubleClickAction = this.applicationDelegate.getUserDefault('window.doubleClickAction');\n    if (doubleClickAction === 'Minimize') {\n        this.workspace.getActivePane().minimize();\n    } else if (doubleClickAction === 'Maximize') {\n        const isMaximized = this.workspace.getActivePane().isMaximized();\n        if (isMaximized) {\n            this.workspace.getActivePane().unmaximize();\n        } else {\n            this.workspace.getActivePane().maximize();\n        }\n    }\n}", "CodeBleu_score": 29.220374747842836}]}
{"instance_id": "fd29bc5fd921", "generation_result": [{"code": "_openSettingsWindow (category){\n\t    const { _windowManager } = this\n    const window = _windowManager.findByType(WindowType.SETTING)\n    if (window) {\n      window.send('mt::change-tab', category)\n      if (process.platform === 'darwin') {\n        window.focus()\n      } else {\n        window.moveToTop()\n      }\n      return\n    }\n    this._createSettingWindow(category)\n  }", "CodeBleu_score": 44.63880761252358}, {"code": "_openSettingsWindow (category){\n\t    const { _windowManager } = this\n    const setting = _windowManager.getSettingsWindow()\n    if (setting) {\n      setting.send('mt::change-tab', category)\n      if (process.platform === 'darwin') {\n        setting.focus()\n      } else {\n        setting.moveToTop()\n      }\n    } else {\n      this._createSettingWindow(category)\n    }\n  }", "CodeBleu_score": 36.33101108200512}, {"code": "_openSettingsWindow (category){\n\t    const { _windowManager } = this\n    const settingWindow = _windowManager.getSettingWindow()\n    if (settingWindow) {\n      if (settingWindow.isVisible()) {\n        settingWindow.send('mt::change-tab', category)\n        if (process.platform === 'darwin') {\n          settingWindow.focus()\n        } else {\n          settingWindow.moveToTop()\n        }\n        return\n      }\n      settingWindow.show()\n      return\n    }\n    this._createSettingWindow(category)\n  }", "CodeBleu_score": 42.25716939600821}]}
{"instance_id": "b9c797e2b719", "generation_result": [{"code": "findBestWindowToOpenIn (fileList){\n\t  const { _windows } = this\n  if (!fileList || !fileList.length) {\n    return []\n  }\n  const activeWindowId = this.getActiveWindowId()\n  const windows = Array.from(_windows.values())\n  const windowCount = windows.length\n  if (windowCount <= 1) {\n    return [{\n      windowId: activeWindowId,\n      fileList\n    }]\n  }\n  const scores = {}\n  const fileCount = fileList.length\n  for (let i = 0; i < fileCount; i++) {\n    const file = fileList[i]\n    const fileScore = {}\n    for (let j = 0; j < windowCount; j++) {\n      const window = windows[j]\n      const { id: windowId } = window\n      if (windowId === activeWindowId) {\n        continue\n      }\n      const windowFileList = window.getFileList()\n      if (windowFileList.includes(file)) {\n        continue\n      }\n      const windowScore = window.getFileScore(file)\n      if (windowScore != null) {\n        fileScore[windowId] = windowScore\n      }\n    }\n    scores[file] = fileScore\n  }\n  const result = []\n  for (let i = 0; i < fileCount; i++) {\n    const file = fileList[i]\n    const fileScore = scores[file]\n    if (Object.keys(fileScore).length === 0) {\n      result.push({\n        windowId: activeWindowId,\n        fileList: [file]\n      })\n      continue\n    }\n    let bestWindowId = null\n    let bestScore = -1\n    for (const [windowId, score] of Object.entries(fileScore)) {\n      if (score > bestScore) {\n        bestWindowId = windowId\n        bestScore = score\n      }\n    }\n    result.push({\n      windowId: bestWindowId,\n      fileList: [file]\n    })\n  }\n  return result\n}", "CodeBleu_score": 41.408104649603914}, {"code": "findBestWindowToOpenIn (fileList){\n\t  if (!fileList || !fileList.length) {\n    return []\n  }\n\n  const activeEditorId = this.getActiveEditorId()\n  const editorWindows = this.getWindowsByType(WindowType.EDITOR)\n\n  if (editorWindows.length <= 1) {\n    return [{\n      windowId: activeEditorId,\n      fileList\n    }]\n  }\n\n  const scores = []\n\n  for (const file of fileList) {\n    const bestWindow = editorWindows.reduce((acc, { id, win }) => {\n      const isOpen = win.isFileOpen(file)\n      if (isOpen) {\n        return acc\n      }\n      const score = win.getFileScore(file)\n      if (score > acc.score) {\n        return {\n          score,\n          id\n        }\n      }\n      return acc\n    }, {\n      id: null,\n      score: -1\n    })\n    scores.push(bestWindow)\n  }\n\n  const result = []\n\n  for (const { id, score } of scores) {\n    if (id != null) {\n      result.push({\n        windowId: id,\n        fileList: [fileList[scores.indexOf(score)]]\n      })\n    } else {\n      result.push({\n        windowId: activeEditorId,\n        fileList: [fileList[scores.indexOf(score)]]\n      })\n    }\n  }\n\n  return result\n}", "CodeBleu_score": 35.909217095526714}, {"code": "findBestWindowToOpenIn (fileList){\n\t", "CodeBleu_score": 0.8594805444068438}]}
{"instance_id": "bcd3eb76bbac", "generation_result": [{"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\t  let encoding = 'utf8'\n  let isBom = false\n  if (autoGuessEncoding) {\n    encoding = ced.guess(buffer)\n    encoding = CED_ICONV_ENCODINGS[encoding] || encoding.toLowerCase()\n  }\n  for (const [bomEncoding, sequence] of Object.entries(BOM_ENCODINGS)) {\n    if (checkSequence(buffer, sequence)) {\n      encoding = bomEncoding\n      isBom = true\n      break\n    }\n  }\n  return { encoding, isBom }\n}", "CodeBleu_score": 50.93925769521099}, {"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\t  let encoding = 'utf8'\n  let isBom = false\n  for (const [bomEncoding, bomSequence] of Object.entries(BOM_ENCODINGS)) {\n    if (checkSequence(buffer, bomSequence)) {\n      encoding = bomEncoding\n      isBom = true\n      break\n    }\n  }\n  if (autoGuessEncoding) {\n    encoding = CED_ICONV_ENCODINGS[encoding] || encoding\n    encoding = encoding.toLowerCase()\n  }\n  return { encoding, isBom }\n}", "CodeBleu_score": 49.094804665935534}, {"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\t  let encoding = 'utf8'\n  let isBom = false\n  if (buffer.length >= 3) {\n    for (const [bomEncoding, sequence] of Object.entries(BOM_ENCODINGS)) {\n      if (checkSequence(buffer, sequence)) {\n        encoding = bomEncoding\n        isBom = true\n        break\n      }\n    }\n  }\n  if (autoGuessEncoding) {\n    const guessedEncoding = ced.detect(buffer)\n    encoding = CED_ICONV_ENCODINGS[guessedEncoding] || guessedEncoding.toLowerCase()\n  }\n  return { encoding, isBom }\n}", "CodeBleu_score": 51.117969335358694}]}
{"instance_id": "a2525337ad24", "generation_result": [{"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\t  const { encoding, lineEnding, bom } = options\n  const ext = path.extname(pathname)\n  const encodingOptions = encoding === 'auto' ? guessEncoding(content) : { encoding }\n  const lineEndingOptions = lineEnding === 'auto' ? { lineEnding: detectLineEnding(content) } : { lineEnding }\n  const buffer = iconv.encode(convertLineEndings(content, lineEndingOptions.lineEnding), encodingOptions)\n  if (bom) {\n    buffer.write('\\uFEFF')\n  }\n  return writeFile(pathname, buffer, { encoding: encodingOptions.encoding, flag: 'w' })\n}", "CodeBleu_score": 35.8573654350902}, {"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\t  const { lineEnding, encoding, bom } = options\n  const buffer = iconv.encode(convertLineEndings(content, lineEnding), encoding)\n  if (bom) {\n    buffer.write('\\uFEFF', 0, 'utf8')\n  }\n  return writeFile(pathname, buffer)\n}", "CodeBleu_score": 28.627735344884396}, {"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\t  const { encoding, bom, lineEnding } = options\n  const ext = path.extname(pathname)\n  const isMarkdownFile = ext === '.md' || ext === '.markdown'\n  const isMarkdownFileWithoutExt = path.extname(pathname) === '' && isMarkdownFile\n\n  // If the file has no extension, assume it's markdown file.\n\n  if (isMarkdownFileWithoutExt) {\n    pathname = path.join(pathname, 'index.md')\n  }\n\n  if (lineEnding) {\n    content = convertLineEndings(content, lineEnding)\n  }\n\n  const buffer = iconv.encode(content, encoding, { addBOM: bom })\n\n  return writeFile(pathname, buffer)\n}", "CodeBleu_score": 50.03801626471842}]}
{"instance_id": "1c01cc82b2d4", "generation_result": [{"code": "export const registerKeyboardListeners = () =>{\n\t  ipcMain.on('getKeyboardInfo', (event) => {\n    event.returnValue = getKeyboardInfo()\n  })\n  ipcMain.on('dumpKeyboardInfo', async (event, filePath) => {\n    const keyboardInfo = getKeyboardInfo()\n    const data = JSON.stringify(keyboardInfo, null, 2)\n    try {\n      await fsPromises.writeFile(filePath, data)\n      shell.openPath(filePath)\n    } catch (error) {\n      log.error('Failed to write keyboard info to file:', error)\n    }\n  })\n}", "CodeBleu_score": 35.312813252210184}, {"code": "export const registerKeyboardListeners = () =>{\n\t  ipcMain.handle('getKeyboardInfo', () => {\n    return getKeyboardInfo()\n  })\n  ipcMain.handle('dumpKeyboardInfo', async (event, data) => {\n    const { path } = data\n    try {\n      const filePath = path.join(os.tmpdir(), 'keyboard-info.json')\n      await fsPromises.writeFile(filePath, JSON.stringify(getKeyboardInfo(), null, 2))\n      await shell.openPath(filePath)\n    } catch (error) {\n      log.error(error)\n    }\n  })\n}", "CodeBleu_score": 43.92612415098048}, {"code": "export const registerKeyboardListeners = () =>{\n\t  ipcMain.handle('getKeyboardInfo', () => getKeyboardInfo())\n  ipcMain.on('dumpKeyboardInfo', async (event, arg) => {\n    try {\n      const keyboardInfo = getKeyboardInfo()\n      const tempFilePath = path.join(os.tmpdir(), 'keyboard-info.json')\n      await fsPromises.writeFile(tempFilePath, JSON.stringify(keyboardInfo, null, 2))\n      shell.openPath(tempFilePath)\n    } catch (error) {\n      log.error(error)\n    }\n  })\n}", "CodeBleu_score": 37.97533019359125}]}
{"instance_id": "fa0bb388c99d", "generation_result": [{"code": "_prepareKeyMapper (){\n\t    const { isDevMode } = this.appEnvironment\n    const keyboardInfo = getKeyboardInfo()\n    const { layout, keymap } = keyboardInfo\n    if (isDevMode) {\n      log.debug(`[DEBUG] Keyboard layout=\"${layout}\" keymap=\"${keymap}\".`)\n    }\n\n    // Set keyboard layout and keymap\n    electronLocalshortcut.setLayout(layout)\n    electronLocalshortcut.setKeymap(keymap)\n\n    // Listen to keyboard layout changes\n    keyboardLayoutMonitor.on('change', ({ layout, keymap }) => {\n      if (isDevMode) {\n        log.debug(`[DEBUG] Keyboard layout=\"${layout}\" keymap=\"${keymap}\".`)\n      }\n      electronLocalshortcut.setLayout(layout)\n      electronLocalshortcut.setKeymap(keymap)\n    })\n  }", "CodeBleu_score": 41.62306085453733}, {"code": "_prepareKeyMapper (){\n\t  const { isDevMode } = this.commandManager.appEnvironment\n  const keyboardInfo = getKeyboardInfo()\n  if (keyboardInfo) {\n    const { layout, keymap } = keyboardInfo\n    if (isDevMode) {\n      log.info(`[DEBUG] Setting keyboard layout to \"${layout}\"`)\n      log.info(`[DEBUG] Setting keyboard keymap to \"${keymap}\"`)\n    }\n    electronLocalshortcut.setLayout(layout)\n    electronLocalshortcut.setKeymap(keymap)\n  }\n\n  keyboardLayoutMonitor.on('change', ({ layout, keymap }) => {\n    if (isDevMode) {\n      log.info(`[DEBUG] Keyboard layout changed to \"${layout}\"`)\n      log.info(`[DEBUG] Keyboard keymap changed to \"${keymap}\"`)\n    }\n    electronLocalshortcut.setLayout(layout)\n    electronLocalshortcut.setKeymap(keymap)\n  })\n}", "CodeBleu_score": 36.01234366487316}, {"code": "_prepareKeyMapper (){\n\t    const { isDevMode } = this.appEnvironment\n    const keyboardInfo = getKeyboardInfo()\n    const { layout, keymap } = keyboardInfo\n\n    // Update key mapper\n    electronLocalshortcut.setLayout(layout)\n    electronLocalshortcut.setKeymap(keymap)\n\n    // Listen for keyboard layout changes\n    keyboardLayoutMonitor.on('change', ({ layout: newLayout }) => {\n      if (isDevMode) {\n        log.debug(`[DEBUG] Keyboard layout changed to ${newLayout}.`)\n      }\n      electronLocalshortcut.setLayout(newLayout)\n      electronLocalshortcut.setKeymap(keymap)\n    })\n  }", "CodeBleu_score": 40.16870636099147}]}
{"instance_id": "0438f43329c9", "generation_result": [{"code": "fixSystemConfig (){\n\t", "CodeBleu_score": 0.6435209714972053}, {"code": "fixSystemConfig (){\n\t    const systemConfig = this.systemConfig.store\n    const userConfig = this.userConfig.store\n\n    // remove unrecognized options\n    const keys = Object.keys(systemConfig)\n    keys.forEach(key => {\n      if (!this.systemConfig.schema[key]) {\n        delete systemConfig[key]\n      }\n    })\n\n    // check user proxy config\n    const proxy = userConfig.proxy\n    if (proxy.enable && proxy.server && proxy.bypass) {\n      systemConfig['all-proxy'] = proxy.server\n      systemConfig['no-proxy'] = proxy.bypass\n    } else {\n      systemConfig['all-proxy'] = EMPTY_STRING\n      systemConfig['no-proxy'] = EMPTY_STRING\n    }\n\n    // fix spawn ENAMETOOLONG issue on windows\n    const tracker = systemConfig['bt-tracker']\n    if (tracker && tracker.length > 1024) {\n      systemConfig['bt-tracker'] = reduceTrackerString(tracker)\n    }\n  }", "CodeBleu_score": 32.27840578246902}, {"code": "fixSystemConfig (){\n\t  const systemConfig = this.systemConfig\n  const userConfig = this.userConfig\n\n  // Remove unrecognized options from system config\n  const systemConfigKeys = Object.keys(systemConfig.store)\n  const systemConfigDefaultKeys = Object.keys(systemConfig.defaults)\n  systemConfigKeys.forEach((key) => {\n    if (!systemConfigDefaultKeys.includes(key)) {\n      systemConfig.delete(key)\n    }\n  })\n\n  // Update system config with proxy server and bypass settings\n  if (userConfig.get('proxy.enable') && userConfig.get('proxy.server') && userConfig.get('proxy.bypass')) {\n    const proxyServer = userConfig.get('proxy.server')\n    const proxyBypass = userConfig.get('proxy.bypass')\n    systemConfig.set('all-proxy', `${proxyServer};${proxyBypass}`)\n  }\n\n  // Fix 'spawn ENAMETOOLONG' issue on Windows\n  const tracker = systemConfig.get('bt-tracker')\n  if (tracker) {\n    const reducedTracker = reduceTrackerString(tracker)\n    systemConfig.set('bt-tracker', reducedTracker)\n  }\n}", "CodeBleu_score": 34.110992049577185}]}
{"instance_id": "6d6fef58cde3", "generation_result": [{"code": "closeClient (){\n\t  if (client) {\n    client.destroy((err) => {\n      if (err) {\n        logger.warn('[Motrix] UPnPManager close client failed, error: ', err)\n      }\n\n      client = null\n    })\n  }\n}", "CodeBleu_score": 60.8070944311198}, {"code": "closeClient (){\n\t  if (client) {\n    try {\n      client.destroy()\n      client = null\n    } catch (err) {\n      logger.warn('[Motrix] UPnPManager close client failed, error: ', err)\n    }\n  }\n}", "CodeBleu_score": 63.77124078981271}, {"code": "closeClient (){\n\t  if (client) {\n    try {\n      client.destroy(() => {\n        client = null\n      })\n    } catch (err) {\n      logger.warn('[Motrix] UPnPManager close failed, error: ', err)\n    }\n  }\n}", "CodeBleu_score": 78.50096015233112}]}
{"instance_id": "b32ad6f9757b", "generation_result": [{"code": "getTouchBarByPage (page){\n\t  if (this.bars[page]) {\n    return this.bars[page]\n  }\n  try {\n    const template = this.template[page]\n    const items = this.build(template)\n    const bar = new TouchBar({ items })\n    this.bars[page] = bar\n    return bar\n  } catch (err) {\n    logger.error(`[TouchBarManager] getTouchBarByPage error: ${err}`)\n  }\n}", "CodeBleu_score": 48.14576159016093}, {"code": "getTouchBarByPage (page){\n\t  const { bars } = this\n  if (bars[page]) {\n    return bars[page]\n  }\n\n  const template = this.template[page]\n  if (!template) {\n    return\n  }\n\n  try {\n    const bar = new TouchBar(this.build(template))\n    bars[page] = bar\n    return bar\n  } catch (error) {\n    logger.error(error)\n  }\n}", "CodeBleu_score": 37.3998226240499}, {"code": "getTouchBarByPage (page){\n\t  let touchBar = this.bars[page]\n  if (!touchBar) {\n    try {\n      touchBar = new TouchBar(this.build(this.template[page]))\n      this.bars[page] = touchBar\n      page.setTouchBar(touchBar)\n    } catch (e) {\n      logger.error(e)\n    }\n  }\n  return touchBar\n}", "CodeBleu_score": 37.186989286014786}]}
{"instance_id": "f860bf9bf687", "generation_result": [{"code": "handleWindowClose (pageOptions, page, window){\n\t  const { bindCloseToHide } = pageOptions\n  if (bindCloseToHide && !this.willQuit) {\n    window.on('close', (event) => {\n      event.preventDefault()\n      window.hide()\n      if (window.isFullScreen()) {\n        window.setFullScreen(false)\n      }\n\n      const bounds = window.getBounds()\n      this.emit('window-closed', { page, bounds })\n    })\n  }\n}", "CodeBleu_score": 59.613973037136745}, {"code": "handleWindowClose (pageOptions, page, window){\n\t  const bindCloseToHide = pageOptions.bindCloseToHide\n  if (bindCloseToHide && !this.willQuit) {\n    window.on('close', (event) => {\n      event.preventDefault()\n      window.hide()\n      if (window.isFullScreen()) {\n        window.setFullScreen(false)\n      }\n      const bounds = window.getBounds()\n      this.emit('window-closed', { page, bounds })\n    })\n  }\n}", "CodeBleu_score": 62.8244363964719}, {"code": "handleWindowClose (pageOptions, page, window){\n\t    const { bindCloseToHide } = pageOptions\n    if (bindCloseToHide) {\n      window.on('close', (event) => {\n        if (!this.willQuit) {\n          event.preventDefault()\n          window.hide()\n        }\n      })\n    }\n\n    window.on('enter-full-screen', () => {\n      window.webContents.send('window-enter-full-screen')\n    })\n\n    window.on('leave-full-screen', () => {\n      window.webContents.send('window-leave-full-screen')\n    })\n  }", "CodeBleu_score": 41.964344360078286}]}
{"instance_id": "ae062f5e98e3", "generation_result": [{"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\t  return new Promise((resolve, reject) => {\n    try {\n      if (isRunningInDmg()) {\n        const appPath = app.getAppPath()\n        const appName = app.getName()\n        const targetPath = `/Applications/${appName}.app`\n        const targetDir = targetPath.substring(0, targetPath.lastIndexOf('/'))\n\n        if (!existsSync(targetDir)) {\n          shell.moveItemToTrash(appPath)\n          shell.moveItem(appPath, targetPath)\n          resolve()\n        } else {\n          reject(new Error('The application is already in the Applications folder.'))\n        }\n      } else {\n        reject(new Error('The application is not running in a DMG file.'))\n      }\n    } catch (error) {\n      reject(error)\n    }\n  })\n}", "CodeBleu_score": 47.4635284103281}, {"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\t", "CodeBleu_score": 2.5174730172744924}, {"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\t  return new Promise((resolve, reject) => {\n    try {\n      const appPath = app.getAppPath()\n      const appName = app.getName()\n      const targetPath = `/Applications/${appName}.app`\n      const move = shell.moveItemToTrash(appPath)\n      move\n        .then(() => {\n          shell.moveItem(appPath, targetPath)\n          shell.openPath(targetPath)\n          resolve()\n        })\n        .catch((err) => {\n          logger.error(err)\n          reject(errorMsg)\n        })\n    } catch (err) {\n      logger.error(err)\n      reject(errorMsg)\n    }\n  })\n}", "CodeBleu_score": 47.580214960083815}]}
{"instance_id": "294de13d4a02", "generation_result": [{"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\t  log.info('Copying icons if necessary');\n\n  if (!options.icon) {\n    log.info('No icon specified, skipping');\n    return;\n  }\n\n  if (options.tray !== false && (options.platform === 'darwin' || options.platform === 'mas')) {\n    log.info('Copying tray icon to app');\n    const trayIconPath = path.join(appPath, 'trayIcon.png');\n    await fs.copy(options.icon, trayIconPath);\n  }\n\n  if (options.platform === 'win32') {\n    log.info('Copying icon to app');\n    const iconPath = path.join(appPath, 'icon.ico');\n    await fs.copy(options.icon, iconPath);\n  }\n\n  if (options.platform === 'linux') {\n    log.info('Copying icon to app');\n    const iconPath = path.join(appPath, 'icon.png');\n    await fs.copy(options.icon, iconPath);\n  }\n}", "CodeBleu_score": 39.89895478385929}, {"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\t  log.info('Copying icons if necessary');\n\n  if (!options.icon) {\n    log.info('No icon specified, exiting');\n    return;\n  }\n\n  if (options.tray !== false) {\n    const trayIcon = path.join(appPath, 'tray.png');\n    await convertIconIfNecessary(options.icon, trayIcon);\n  }\n\n  if (isWindows) {\n    const iconPath = path.join(appPath, 'resources', 'app', 'icon.ico');\n    await convertIconIfNecessary(options.icon, iconPath);\n  }\n}", "CodeBleu_score": 29.840992518236}, {"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\t  log.info('Copying icons if necessary');\n\n  if (!options.icon) {\n    log.info('No icon specified, skipping icon copy');\n    return;\n  }\n\n  if (options.platform === 'darwin' && options.tray !== false) {\n    log.info('Copying tray icon');\n    const trayIconPath = path.join(\n      appPath,\n      'Contents/Resources/app.icns',\n    );\n    await fs.copy(options.icon, trayIconPath);\n    return;\n  }\n\n  if (options.platform === 'mas') {\n    log.info('Copying tray icon');\n    const trayIconPath = path.join(appPath, 'Contents/Resources/tray.png');\n    await fs.copy(options.icon, trayIconPath);\n    return;\n  }\n\n  if (options.platform === 'win32') {\n    log.info('Copying icon');\n    const iconPath = path.join(appPath, 'resources/app/icon.ico');\n    await convertIconIfNecessary(options.icon, iconPath);\n    return;\n  }\n\n  if (options.platform === 'linux') {\n    log.info('Copying icon');\n    const iconPath = path.join(appPath, 'resources/app/icon.png');\n    await fs.copy(options.icon, iconPath);\n    return;\n  }\n}", "CodeBleu_score": 43.50180858277321}]}
{"instance_id": "af06dceb6a2f", "generation_result": [{"code": "export function normalizeAppName(appName: string, url: string): string{\n\t  const hash = crypto.createHash('md5').update(url).digest('hex');\n  const hashSubstring = hash.substring(0, 6);\n  const normalizedAppName = appName.toLowerCase().replace(/[^a-z0-9]/g, '').replace(/[-_]/g, '-').replace(/ /g, '-');\n  return `${normalizedAppName}-nativefier-${hashSubstring}`;\n}", "CodeBleu_score": 60.626718600306106}, {"code": "export function normalizeAppName(appName: string, url: string): string{\n\t  const hash = crypto.createHash('md5').update(url).digest('hex');\n  const hashSubstring = hash.substring(0, 6);\n  const normalizedAppName = appName.toLowerCase().replace(/[^a-z0-9]/g, '').replace(/[ _]/g, '-');\n  return `${normalizedAppName}-nativefier-${hashSubstring}`;\n}", "CodeBleu_score": 62.17117287710503}, {"code": "export function normalizeAppName(appName: string, url: string): string{\n\t  const hash = crypto.createHash('md5').update(url).digest('hex');\n  const hashSubstring = hash.substring(0, 6);\n  const normalizedAppName = appName.toLowerCase().replace(/[^a-z0-9]/g, '').replace(/[-_\\s]+/g, '-');\n  return `${normalizedAppName}-nativefier-${hashSubstring}`;\n}", "CodeBleu_score": 62.00103712379044}]}
{"instance_id": "3728778a6e34", "generation_result": [{"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\t  log.debug(`Copying Electron app from ${src} to ${dest}`);\n  try {\n    await fs.copy(src, dest);\n  } catch (error) {\n    log.error(`Error copying Electron app from ${src} to ${dest}`, error);\n    throw error;\n  }\n\n  // Write the app configuration to a JSON file at the destination\n  const appConfigPath = path.join(dest, 'appConfig.json');\n  log.debug(`Writing app configuration to ${appConfigPath}`);\n  await fs.writeFile(appConfigPath, JSON.stringify(options, null, 2));\n\n  // Copy the bookmarks menu if specified in the options\n  if (options.nativefier.bookmarks) {\n    log.debug(`Copying bookmarks menu to ${dest}`);\n    try {\n      await fs.copy(options.nativefier.bookmarks, dest);\n    } catch (error) {\n      log.error(`Error copying bookmarks menu to ${dest}`, error);\n      throw error;\n    }\n  }\n\n  // Try to copy injection scripts\n  try {\n    await maybeCopyScripts(options.nativefier.inject, dest);\n  } catch (error) {\n    log.error('Error copying injection scripts', error);\n    throw error;\n  }\n\n  // Change the app's package JSON name and set the app bundle ID using the normalized app name\n  const normalizedAppName = changeAppPackageJsonName(dest, options.packager.name, options.packager.targetUrl);\n  const appId = options.packager.helperBundleId ?? `${normalizedAppName}.helper`;\n  await setAppBundleId(dest, appId);\n}", "CodeBleu_score": 61.5548780193439}, {"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\t  const appPath = path.join(dest, 'app');\n  const appConfigPath = path.join(dest, 'app.json');\n  const appConfig = await readAppConfig(appConfigPath);\n\n  // Copy the app from the source to the destination\n  log.debug(`Copying app from ${src} to ${appPath}`);\n  await fs.copy(src, appPath);\n\n  // Add the bookmarks menu if specified in the options\n  if (options.nativefier.bookmarks) {\n    try {\n      await copyBookmarksMenu(appPath, options.nativefier.bookmarks);\n    } catch (err) {\n      log.error(`Error copying bookmarks menu: ${err.message}`);\n    }\n  }\n\n  // Write the app configuration to a JSON file at the destination\n  log.debug(`Writing app configuration to ${appConfigPath}`);\n  await writeAppConfig(appConfigPath, appConfig);\n\n  // Copy injection scripts if specified in the options\n  try {\n    await maybeCopyScripts(options.nativefier.inject, appPath);\n  } catch (err) {\n    log.error(`Error copying injection scripts: ${err.message}`);\n  }\n\n  // Change the app's package JSON name and set the app bundle ID using the normalized app name\n  const normalizedAppName = changeAppPackageJsonName(\n    appPath,\n    options.packager.name,\n    options.packager.targetUrl,\n  );\n  await setAppBundleId(appPath, normalizedAppName);\n}", "CodeBleu_score": 47.04770930869764}, {"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\t  log.debug(`Copying Electron app from ${src} to ${dest}`);\n  try {\n    await fs.copy(src, dest);\n  } catch (err) {\n    throw new Error(`Could not copy Electron app from ${src} to ${dest}`);\n  }\n\n  log.debug(`Writing app configuration to ${dest}/app.json`);\n  fs.writeFileSync(path.join(dest, 'app.json'), JSON.stringify(options, null, 2));\n\n  if (options.nativefier.bookmarks) {\n    try {\n      log.debug(`Copying bookmarks menu from ${options.nativefier.bookmarks} to ${dest}/bookmarks`);\n      await fs.copy(options.nativefier.bookmarks, path.join(dest, 'bookmarks'));\n    } catch (err) {\n      log.error(`Could not copy bookmarks menu from ${options.nativefier.bookmarks} to ${dest}/bookmarks`);\n    }\n  }\n\n  await maybeCopyScripts(options.nativefier.inject, dest);\n\n  const normalizedAppName = changeAppPackageJsonName(dest, options.packager.name, options.packager.targetUrl);\n\n  const packageJsonPath = path.join(dest, '/package.json');\n  const packageJson = parseJson<PackageJSON>(fs.readFileSync(packageJsonPath).toString());\n  if (!packageJson) {\n    throw new Error(`Could not load package.json from ${packageJsonPath}`);\n  }\n\n  packageJson.productName = options.packager.name;\n  packageJson.appId = getAppId(normalizedAppName);\n  fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));\n}", "CodeBleu_score": 54.89853977505403}]}
{"instance_id": "281c20f209ba", "generation_result": [{"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\t  log.debug(`Downloading ${fileUrl}`);\n  return axios\n    .get(fileUrl, { responseType: 'arraybuffer' })\n    .then((response) => {\n      if (!response.data) {\n        return undefined;\n      }\n\n      return {\n        data: Buffer.from(response.data),\n        ext: path.extname(fileUrl).substring(1),\n      };\n    });\n}", "CodeBleu_score": 80.36212218161796}, {"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\t  log.debug(`Downloading ${fileUrl}`);\n\n  return axios\n    .get(fileUrl, { responseType: 'arraybuffer' })\n    .then((response) => {\n      if (!response.data) {\n        return undefined;\n      }\n\n      const ext = path.extname(fileUrl);\n      return {\n        data: Buffer.from(response.data),\n        ext,\n      };\n    });\n}", "CodeBleu_score": 78.33482172607748}, {"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\t  log.info(`Downloading ${fileUrl}`);\n  return axios\n    .get(fileUrl, {\n      responseType: 'arraybuffer',\n    })\n    .then((response) => {\n      if (!response.data) {\n        return undefined;\n      }\n      const ext = path.extname(fileUrl);\n      return { data: response.data, ext };\n    })\n    .catch((err) => {\n      log.error(`Failed to download ${fileUrl}: ${err.message}`);\n    });\n}", "CodeBleu_score": 75.73585532660775}]}
{"instance_id": "e71c0b9dab4a", "generation_result": [{"code": "export function camelCased(str: string): string{\n\t  return str\n    .split('-')\n    .filter((s) => s)\n    .map((s, i) => (i ? s.charAt(0).toUpperCase() + s.slice(1) : s))\n    .join('');\n}", "CodeBleu_score": 53.92574896700839}, {"code": "export function camelCased(str: string): string{\n\t  return str\n    .split(\"-\")\n    .filter((x) => x)\n    .map((word, index) => {\n      if (index === 0) {\n        return word;\n      }\n      return word[0].toUpperCase() + word.slice(1);\n    })\n    .join(\"\");\n}", "CodeBleu_score": 60.454968607412866}, {"code": "export function camelCased(str: string): string{\n\t  return str\n    .split(\"-\")\n    .filter((word) => word !== \"\")\n    .map((word, index) => {\n      if (index === 0) {\n        return word;\n      }\n      return word.charAt(0).toUpperCase() + word.slice(1);\n    })\n    .join(\"\");\n}", "CodeBleu_score": 56.97275301219982}]}
{"instance_id": "c93f0f7bfa03", "generation_result": [{"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\t  const sanitizedFilename = sanitize(filenameToSanitize);\n\n  if (platform === 'linux') {\n    return sanitizedFilename\n      .replace(/[^\\w\\s-]/g, '')\n      .replace(/[\\s-]+/g, '-')\n      .replace(/^-+|-+$/g, '');\n  }\n\n  if (sanitizedFilename.length === 0) {\n    log.warn(`Filename '${filenameToSanitize}' is empty.`);\n    return DEFAULT_APP_NAME;\n  }\n\n  log.info(`Sanitized filename: ${sanitizedFilename}`);\n  return sanitizedFilename;\n}", "CodeBleu_score": 53.43909480914364}, {"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\t  const sanitizedFilename = sanitize(filenameToSanitize);\n\n  if (platform === 'linux') {\n    // Remove spaces and certain Unicode characters\n    const sanitizedFilenameWithoutSpaces = sanitizedFilename\n      .replace(/ /g, '-')\n      .replace(/[^\\w\\s-]/g, '');\n\n    // If the resulting filename is empty, assign a default application name\n    if (sanitizedFilenameWithoutSpaces.length === 0) {\n      sanitizedFilenameWithoutSpaces = DEFAULT_APP_NAME;\n      log.warn(\n        'The sanitized filename is empty. Assigning a default application name.',\n      );\n    }\n\n    return sanitizedFilenameWithoutSpaces;\n  }\n\n  // If the platform is not Linux, return the original sanitized filename\n  return sanitizedFilename;\n}", "CodeBleu_score": 50.71526944971683}, {"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\t  const sanitizedFilename = sanitize(filenameToSanitize);\n\n  if (platform === 'linux') {\n    const sanitizedFilenameWithoutSpaces = sanitizedFilename.replace(/\\s/g, '');\n    const sanitizedFilenameWithoutUnicode = sanitizedFilenameWithoutSpaces.replace(\n      /[^\\x00-\\x7F]/g,\n      '',\n    );\n    return sanitizedFilenameWithoutUnicode;\n  }\n\n  return sanitizedFilename;\n}", "CodeBleu_score": 45.619910952142696}]}
{"instance_id": "ac4bf3ef1fa8", "generation_result": [{"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\t    const duration = parseInt(savedCache.duration)\n    const cacheTime = parseInt(savedCache.time)\n    const currentTime = Date.now()\n    return cacheTime + duration < currentTime\n}", "CodeBleu_score": 31.224683914725503}, {"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\t    const duration = parseInt(savedCache.duration)\n    const cacheTime = savedCache.time\n    const currentTime = new Date().getTime()\n    return (cacheTime + duration) < currentTime\n}", "CodeBleu_score": 30.407509099201153}, {"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\t    const duration = parseInt(savedCache.duration)\n    const cacheTime = parseInt(savedCache.time)\n    const currentTime = Date.now()\n    return (cacheTime + duration) < currentTime\n}", "CodeBleu_score": 29.30942919274245}]}
{"instance_id": "6b8f5c8fc4ec", "generation_result": [{"code": "static getTimestamp(timestampOptionArgument: any): number{\n\t    if (timestampOptionArgument) {\n        if (typeof timestampOptionArgument === \"number\") {\n            if (timestampOptionArgument < 0) {\n                throw new TypeORMError(`Timestamp must be positive number`);\n            }\n            return timestampOptionArgument;\n        }\n        throw new TypeORMError(`Timestamp must be a number`);\n    }\n    return Date.now();\n}", "CodeBleu_score": 39.7214740978871}, {"code": "static getTimestamp(timestampOptionArgument: any): number{\n\t    if (timestampOptionArgument === undefined) {\n        return Date.now();\n    }\n    if (typeof timestampOptionArgument !== \"number\") {\n        throw new TypeORMError(`Timestamp is not valid number: ${timestampOptionArgument}`);\n    }\n    if (timestampOptionArgument < 0) {\n        throw new TypeORMError(`Timestamp can not be negative: ${timestampOptionArgument}`);\n    }\n    return timestampOptionArgument;\n}", "CodeBleu_score": 55.61740405417097}, {"code": "static getTimestamp(timestampOptionArgument: any): number{\n\t    if (timestampOptionArgument === undefined) {\n        return Date.now();\n    }\n    const timestamp = Number(timestampOptionArgument);\n    if (isNaN(timestamp) || timestamp < 0) {\n        throw new TypeORMError(`Timestamp must be a positive number.`);\n    }\n    return timestamp;\n}", "CodeBleu_score": 36.986075111280414}]}
{"instance_id": "747bea9d7ad9", "generation_result": [{"code": " async dropDatabase(): Promise<void>{\n\t        if (!this.isInitialized)\n            throw new CannotExecuteNotConnectedError(this.name)\n\n        const queryRunner = this.driver.createQueryRunner()\n\n        const databases = this.driver.getDatabases()\n\n        if (databases.length > 0) {\n            for (const database of databases) {\n                await queryRunner.clearDatabase(database)\n            }\n        } else {\n            await queryRunner.clearDatabase(this.driver.database)\n        }\n\n        await queryRunner.release()\n    }", "CodeBleu_score": 37.16671764696486}, {"code": " async dropDatabase(): Promise<void>{\n\t        if (!this.isInitialized)\n            throw new CannotExecuteNotConnectedError(this.name)\n\n        const queryRunner = this.driver.createQueryRunner()\n        const databaseNames = this.getUniqueDatabaseNames()\n\n        if (databaseNames.length > 1) {\n            await Promise.all(databaseNames.map(async (databaseName) => {\n                await queryRunner.clearDatabase(databaseName)\n            }))\n        } else {\n            await queryRunner.clearDatabase(databaseNames[0])\n        }\n\n        await queryRunner.release()\n    }", "CodeBleu_score": 33.93300050243631}, {"code": " async dropDatabase(): Promise<void>{\n\t    if (!this.isInitialized)\n      throw new CannotExecuteNotConnectedError(this.name);\n\n    const queryRunner = this.driver.createQueryRunner();\n\n    const uniqueDatabases = this.getUniqueDatabases();\n\n    if (uniqueDatabases.length > 0) {\n      for (const database of uniqueDatabases) {\n        await queryRunner.clearDatabase(database);\n      }\n    } else {\n      await queryRunner.clearDatabase(this.driver.database);\n    }\n\n    await queryRunner.release();\n  }", "CodeBleu_score": 33.84295748579043}]}
{"instance_id": "7dce3d050d72", "generation_result": [{"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\t        if (InstanceChecker.isMongoEntityManager(this.manager))\n            throw new TypeORMError(`Queries aren't supported by MongoDB.`)\n\n        if (queryRunner && queryRunner.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError()\n\n        const usedQueryRunner = queryRunner || this.createQueryRunner()\n\n        try {\n            if (entityOrRunner instanceof QueryRunner)\n                return usedQueryRunner.createQueryBuilder()\n\n            if (alias) {\n                const metadata = this.getMetadata(entityOrRunner as any)\n                return usedQueryRunner.createQueryBuilder(metadata, alias)\n            }\n\n            return usedQueryRunner.createQueryBuilder(entityOrRunner)\n        } finally {\n            if (!queryRunner) await usedQueryRunner.release()\n        }\n    }", "CodeBleu_score": 47.11803885583732}, {"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\t        if (InstanceChecker.isMongoEntityManager(this.manager))\n            throw new TypeORMError(`Queries aren't supported by MongoDB.`);\n\n        if (queryRunner && queryRunner.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError();\n\n        const usedQueryRunner = queryRunner || this.createQueryRunner();\n\n        try {\n            if (entityOrRunner) {\n                const entity = entityOrRunner as EntityTarget<Entity>;\n                const metadata = this.getMetadata(entity);\n                const queryBuilder = new SelectQueryBuilder<Entity>(\n                    this,\n                    metadata,\n                    alias,\n                );\n                queryBuilder.setQueryRunner(usedQueryRunner);\n                return queryBuilder;\n            } else {\n                const queryBuilder = new SelectQueryBuilder<any>(\n                    this,\n                    undefined,\n                    undefined,\n                );\n                queryBuilder.setQueryRunner(usedQueryRunner);\n                return queryBuilder;\n            }\n        } finally {\n            if (!queryRunner) await usedQueryRunner.release();\n        }\n    }", "CodeBleu_score": 46.49079577753553}, {"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\t        if (InstanceChecker.isMongoEntityManager(this.manager))\n            throw new TypeORMError(`Queries aren't supported by MongoDB.`);\n\n        if (queryRunner && queryRunner.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError();\n\n        const usedQueryRunner = queryRunner || this.createQueryRunner();\n\n        try {\n            if (alias) {\n                const metadata = this.getMetadata(entityOrRunner as EntityTarget<Entity>);\n                return usedQueryRunner.createEntityManager().createQueryBuilder(metadata, alias);\n            } else {\n                return usedQueryRunner.createEntityManager().createQueryBuilder(\n                    entityOrRunner as EntityTarget<Entity> | QueryRunner,\n                );\n            }\n        } finally {\n            if (!queryRunner) await usedQueryRunner.release();\n        }\n    }", "CodeBleu_score": 37.64746488564389}]}
{"instance_id": "4413268e1791", "generation_result": [{"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\t        const metadata = this.connection.getMetadata(entityClass);\n        const entity = await this.plainObjectToEntityTransformer.transform(entityLike, metadata);\n        if (!entity) return;\n        return this.merge(entityClass, entity, entityLike);\n    }", "CodeBleu_score": 39.045895669052136}, {"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\t        // todo: throw exception if entity manager is released\n        const metadata = this.connection.getMetadata(entityClass);\n        const entity = this.create(entityClass, entityLike);\n        const result = await this.connection.findOne(entityClass, entity);\n        if (result) {\n            this.plainObjectToEntityTransformer.transform(entity, result, metadata, true);\n        }\n        return result;\n    }", "CodeBleu_score": 47.639152507716254}, {"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\t        const metadata = this.connection.getMetadata(entityClass);\n        const entity = await this.findOne(entityClass, entityLike);\n        if (!entity) return undefined;\n        const transformedEntity = this.plainObjectToEntityTransformer.transform(\n            entity,\n            entityLike,\n            metadata,\n            true,\n        );\n        return { ...entity, ...transformedEntity };\n    }", "CodeBleu_score": 50.04624574546577}]}
{"instance_id": "c635d2b9bbdf", "generation_result": [{"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\t  return (\n    <>\n      <label htmlFor=\"compression\">Compression</label>\n      <input\n        type=\"range\"\n        id=\"compression\"\n        name=\"compression\"\n        min=\"0\"\n        max=\"100\"\n        value={compression}\n        onChange={handleCompressionChange}\n      />\n      <p>\n        {compression > 0 && (\n          <>\n            Note: PNG, JPG, and WebP compression are lossy. This means that\n            compression settings above 0 will result in a loss of quality.\n          </>\n        )}\n      </p>\n    </>\n  );\n}", "CodeBleu_score": 31.69819293307204}, {"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\t  return (\n    <div className=\"compression-input\">\n      <div className=\"compression-input__container\">\n        <label htmlFor=\"compression\">Compression</label>\n        <div className=\"compression-input__slider-container\">\n          <input\n            className=\"compression-input__slider\"\n            type=\"range\"\n            min=\"0\"\n            max=\"100\"\n            value={compression}\n            onChange={handleCompressionChange}\n          />\n        </div>\n        <div className=\"compression-input__percentage\">{compression}%</div>\n      </div>\n      {compression > 0 && (\n        <div className=\"compression-input__note\">\n          Note: PNG, JPG, and WebP compression can reduce the quality of the image\n          and can make it larger.\n        </div>\n      )}\n    </div>\n  );\n}", "CodeBleu_score": 56.28972902988599}, {"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\t  return (\n    <div className=\"compression-input\">\n      <div className=\"compression-input__label\">Compression</div>\n      <div className=\"compression-input__value\">{compression}%</div>\n      <input\n        className=\"compression-input__range\"\n        type=\"range\"\n        min=\"0\"\n        max=\"100\"\n        value={compression}\n        onChange={handleCompressionChange}\n      />\n      {compression > 0 && (\n        <div className=\"compression-input__note\">\n          Note: PNG, JPG, and WebP compression can reduce the quality of the\n          image.\n        </div>\n      )}\n    </div>\n  );\n}", "CodeBleu_score": 47.38435279612722}]}
{"instance_id": "636802ba89ba", "generation_result": [{"code": "findAttributesWithPrefix(type, name){\n\t    name = name.trim().toLowerCase();\n\n    if (name.startsWith('#') || name.startsWith('~')) {\n        name = name.substr(1);\n    }\n\n    let result = [];\n    for (let key in this.attributeIndex) {\n        if (key.startsWith(`${type}-${name}`)) {\n            result = result.concat(this.attributeIndex[key]);\n        }\n    }\n    return result;\n}", "CodeBleu_score": 39.308716554956334}, {"code": "findAttributesWithPrefix(type, name){\n\t    name = name.trim().toLowerCase();\n\n    if (name.startsWith('#') || name.startsWith('~')) {\n        name = name.substr(1);\n    }\n\n    const key = `${type}-${name}`;\n    const result = [];\n\n    for (const [k, attributes] of Object.entries(this.attributeIndex)) {\n        if (k.startsWith(key)) {\n            result.push(...attributes);\n        }\n    }\n\n    return result;\n}", "CodeBleu_score": 52.668111693130406}, {"code": "findAttributesWithPrefix(type, name){\n\t        name = name.trim().toLowerCase();\n\n        if (name.startsWith('#') || name.startsWith('~')) {\n            name = name.substr(1);\n        }\n\n        let result = [];\n        for (const key in this.attributeIndex) {\n            if (key.startsWith(`${type}-${name}`)) {\n                result.push(...this.attributeIndex[key]);\n            }\n        }\n\n        return result;\n    }", "CodeBleu_score": 36.81267780772088}]}
{"instance_id": "5fafa24f5463", "generation_result": [{"code": "function branchUpdated(branchRow){\n\t  const childNote = becca.notes[branchRow.noteId];\n\n  if (childNote) {\n    // type / mime could have been changed, and they are present in flatTextCache\n    childNote.flatTextCache = null;\n    childNote.sortParents();\n    childNote.invalidateSubTree();\n  }\n\n  const parentNote = becca.notes[branchRow.parentNoteId];\n\n  if (parentNote) {\n    parentNote.children.sort((a, b) => a.position - b.position);\n  }\n}", "CodeBleu_score": 90.71672472754678}, {"code": "function branchUpdated(branchRow){\n\t    const childNote = becca.notes[branchRow.noteId];\n    if (childNote) {\n        childNote.flatTextCache = null;\n        childNote.sortParents();\n        childNote.invalidateSubTree();\n    }\n    const parentNote = becca.notes[branchRow.parentNoteId];\n    if (parentNote) {\n        parentNote.children.sort((a, b) => a.position - b.position);\n    }\n}", "CodeBleu_score": 91.05000598075476}, {"code": "function branchUpdated(branchRow){\n\t    const childNote = becca.notes[branchRow.noteId];\n    if (childNote) {\n        childNote.flatTextCache = null;\n        childNote.sortParents();\n        childNote.invalidateSubTree();\n    }\n    const parentNote = becca.notes[branchRow.parentNoteId];\n    if (parentNote) {\n        parentNote.children.sort((a, b) => a.notePosition - b.notePosition);\n    }\n}", "CodeBleu_score": 90.55828088402966}]}
{"instance_id": "80b2322b7b29", "generation_result": [{"code": "function trimMime(mime){\n\t    if (mime === null || mime === 'text/html') {\n        return mime;\n    }\n\n    if (mimeCache[mime]) {\n        return mimeCache[mime];\n    }\n\n    const parts = mime.split('/');\n    const result = [];\n\n    for (let i = 0; i < parts.length; i++) {\n        const part = parts[i];\n\n        if (i === 0 && part.startsWith('text')) {\n            continue;\n        }\n\n        if (i === 0 && part.startsWith('application')) {\n            continue;\n        }\n\n        if (part.startsWith('-')) {\n            continue;\n        }\n\n        result.push(part);\n    }\n\n    mimeCache[mime] = result.join('/');\n    return mimeCache[mime];\n}", "CodeBleu_score": 39.79040094851642}, {"code": "function trimMime(mime){\n\t    if (mime === null || mime === 'text/html') {\n        return mime;\n    }\n\n    if (!mimeCache[mime]) {\n        const parts = mime.split('/');\n\n        if (parts.length > 1) {\n            const mimeType = parts[0];\n            const mimeSubtype = parts[1];\n\n            if (mimeType === 'text') {\n                mimeCache[mime] = mime;\n            } else if (mimeType === 'application') {\n                mimeCache[mime] = mime;\n            } else {\n                mimeCache[mime] = mimeType + '/' + mimeSubtype.replace(/^-x/, '');\n            }\n        } else {\n            mimeCache[mime] = mime;\n        }\n    }\n\n    return mimeCache[mime];\n}", "CodeBleu_score": 44.85915358905848}, {"code": "function trimMime(mime){\n\t    if (!mime) {\n        return mime;\n    }\n\n    if (mime === 'text/html') {\n        return mime;\n    }\n\n    if (mimeCache[mime]) {\n        return mimeCache[mime];\n    }\n\n    const parts = mime.split('/');\n\n    for (let i = 0; i < parts.length; i++) {\n        const part = parts[i];\n\n        if (part.startsWith('text') || part.startsWith('application')) {\n            parts.splice(0, i + 1);\n            break;\n        }\n    }\n\n    for (let i = 0; i < parts.length; i++) {\n        const part = parts[i];\n\n        if (part.startsWith('-x')) {\n            parts.splice(i, 1);\n            break;\n        }\n    }\n\n    mimeCache[mime] = parts.join('/');\n    return mimeCache[mime];\n}", "CodeBleu_score": 38.36947744648545}]}
{"instance_id": "5d211ed69fed", "generation_result": [{"code": "function buildDateLimits(baseNote){\n\t    const creationDate = baseNote.creationDate;\n    const creationTimestamp = dateUtils.parseDate(creationDate).getTime();\n\n    const minDate = dateUtils.formatDate(new Date(creationTimestamp - 1000 * 60 * 60 * 24 * 30 * 6));\n    const minExcludedDate = dateUtils.formatDate(new Date(creationTimestamp - 1000 * 60 * 60 * 24 * 30 * 3));\n    const maxExcludedDate = dateUtils.formatDate(new Date(creationTimestamp + 1000 * 60 * 60 * 24 * 30 * 3));\n    const maxDate = dateUtils.formatDate(new Date(creationTimestamp + 1000 * 60 * 60 * 24 * 30 * 6));\n\n    return {\n        minDate,\n        minExcludedDate,\n        maxExcludedDate,\n        maxDate\n    };\n}", "CodeBleu_score": 30.628869801294922}, {"code": "function buildDateLimits(baseNote){\n\t    const creationDate = baseNote.creationDate;\n    const creationDateTimestamp = dateUtils.parseDate(creationDate).getTime();\n\n    const minDate = new Date(creationDateTimestamp - 30 * 24 * 60 * 60 * 1000);\n    const minExcludedDate = new Date(creationDateTimestamp - 1 * 24 * 60 * 60 * 1000);\n    const maxExcludedDate = new Date(creationDateTimestamp + 1 * 24 * 60 * 60 * 1000);\n    const maxDate = new Date(creationDateTimestamp + 30 * 24 * 60 * 60 * 1000);\n\n    return {\n        minDate: minDate.toISOString(),\n        minExcludedDate: minExcludedDate.toISOString(),\n        maxExcludedDate: maxExcludedDate.toISOString(),\n        maxDate: maxDate.toISOString()\n    };\n}", "CodeBleu_score": 30.86296206850914}, {"code": "function buildDateLimits(baseNote){\n\t    const baseNoteDate = baseNote.creationDate;\n    const baseNoteTimestamp = dateUtils.parseDate(baseNoteDate);\n\n    const minDate = dateUtils.formatDate(baseNoteTimestamp - 365 * 24 * 60 * 60 * 1000);\n    const minExcludedDate = dateUtils.formatDate(baseNoteTimestamp - 1 * 24 * 60 * 60 * 1000);\n    const maxExcludedDate = dateUtils.formatDate(baseNoteTimestamp + 1 * 24 * 60 * 60 * 1000);\n    const maxDate = dateUtils.formatDate(baseNoteTimestamp + 365 * 24 * 60 * 60 * 1000);\n\n    return {\n        minDate,\n        minExcludedDate,\n        maxExcludedDate,\n        maxDate\n    };\n}", "CodeBleu_score": 37.58515696213011}]}
{"instance_id": "5ef14ada992c", "generation_result": [{"code": "_setContent(content, opts = {}){\n\t    if (content === null || content === undefined) {\n        return;\n    }\n\n    if (typeof content === 'string' || Buffer.isBuffer(content)) {\n        content = content.toString();\n    }\n\n    const contentHash = utils.hash(content);\n\n    if (this.isProtected && protectedSessionService.isProtectedSessionAvailable()) {\n        content = protectedSessionService.encrypt(content);\n    }\n\n    const blobId = blobService.upsertBlob(content, contentHash);\n\n    if (blobId === this.blobId) {\n        if (opts.forceSave) {\n            this.save(opts);\n        }\n\n        return;\n    }\n\n    this.blobId = blobId;\n\n    if (opts.forceSave) {\n        this.save(opts);\n    }\n\n    if (opts.forceFrontendReload) {\n        eventService.emit(eventService.FRONTEND_RELOAD);\n    }\n}", "CodeBleu_score": 36.69787211580668}, {"code": "_setContent(content, opts = {}){\n\t    if (content === null || content === undefined) {\n        throw new Error(\"Content cannot be null or undefined\");\n    }\n\n    const blobId = this.blobId;\n\n    if (typeof content === \"string\") {\n        content = Buffer.from(content);\n    }\n\n    const contentHash = utils.hash(content);\n\n    if (this.constructor.isProtected && protectedSessionService.isAvailable()) {\n        content = protectedSessionService.encrypt(content);\n    }\n\n    const newBlobId = blobService.saveBlob(content, contentHash);\n\n    if (newBlobId !== blobId || opts.forceSave) {\n        this.blobId = newBlobId;\n\n        this.save(opts);\n\n        if (opts.forceFrontendReload) {\n            eventService.emit(eventService.FRONTEND_RELOAD_REQUESTED);\n        }\n    }\n}", "CodeBleu_score": 40.69411907008447}, {"code": "_setContent(content, opts = {}){\n\t    if (content === null || content === undefined) {\n        throw new Error(`Can't set content to null or undefined`);\n    }\n\n    if (typeof content === 'string') {\n        content = Buffer.from(content, 'utf8');\n    }\n\n    const contentHash = utils.hash(content);\n\n    if (this.isProtected && protectedSessionService.isAvailable()) {\n        content = protectedSessionService.encrypt(content);\n    }\n\n    const blobId = blobService.saveBlob(content, contentHash);\n\n    if (this.blobId !== blobId) {\n        if (this.blobId) {\n            blobService.deleteBlob(this.blobId);\n        }\n\n        this.blobId = blobId;\n    }\n\n    if (opts.forceSave || opts.forceFrontendReload) {\n        this.save(opts);\n    }\n}", "CodeBleu_score": 36.72060916424577}]}
{"instance_id": "6f76c3417cdb", "generation_result": [{"code": "async createNoteIntoInboxCommand(){\n\t    const inboxNote = await dateNoteService.getInboxNote();\n    const note = await server.post(`/api/notes/${inboxNote.id}/children`, {\n        content: 'New note',\n        type: 'text',\n        protection: {\n            status: 'public'\n        }\n    });\n    if (note.isEntityChangeKnown()) {\n        const tab = await appContext.openNote(note, {\n            hoist: true\n        });\n        tab.focusTitle();\n    }\n}", "CodeBleu_score": 55.502155428457336}, {"code": "async createNoteIntoInboxCommand(){\n\t    const inboxNote = await dateNoteService.getInboxNote();\n    const note = await server.post(`/notes/${inboxNote.id}/children`, {\n        content: 'New note',\n        type: 'text',\n        protection: false,\n        entityChange: true,\n    });\n    await ws.send('openNote', note.id);\n    appContext.getTab(note.id).focusTitle();\n    toastService.info('Note created');\n}", "CodeBleu_score": 51.042397865704146}, {"code": "async createNoteIntoInboxCommand(){\n\t    const inboxNote = await dateNoteService.getInboxNote();\n    const newNote = await server.post(`/notes/${inboxNote.id}/children`, {\n        content: 'New note',\n        type: 'text',\n        protection: 'private'\n    });\n    await appContext.openNote(newNote.id, { hoist: true });\n    await appContext.focusAndSelectTitle(newNote.id);\n}", "CodeBleu_score": 53.26101913099022}]}
{"instance_id": "2b91c618a874", "generation_result": [{"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\t    const note = await server.get(`notes/${noteId}`);\n    const activeNoteContext = appContext.tabManager.getActiveContextNoteId();\n\n    if (note.isHoisted) {\n        await server.post(`notes/${note.noteId}/unhoist`);\n        await ws.waitForMaxKnownEntityChangeId();\n    } else {\n        if (note.type !== 'search') {\n            await server.post(`notes/${note.noteId}/hoist`);\n            await ws.waitForMaxKnownEntityChangeId();\n        }\n    }\n\n    if (activeNoteContext !== note.noteId) {\n        appContext.tabManager.openTabWithNoteWithHoisting(note.noteId, {activate: true});\n    }\n}", "CodeBleu_score": 47.826542662492955}, {"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\t    const note = await server.get(`notes/${noteId}`);\n    const activeNoteContext = appContext.tabManager.getActiveContextNote();\n    if (note.isHoisted) {\n        await server.delete(`notes/${note.noteId}/hoist`);\n        appContext.tabManager.setHoistedNote(null);\n        appContext.triggerEvent('updateNoteHoistingState', {noteId: note.noteId, isHoisted: false});\n        appContext.triggerEvent('updateNoteHoistingState', {noteId: activeNoteContext.noteId, isHoisted: false});\n        appContext.triggerEvent('updateNoteHoistingState', {noteId: appContext.tabManager.getActiveContextNoteId(), isHoisted: false});\n    } else {\n        await server.post(`notes/${note.noteId}/hoist`);\n        appContext.tabManager.setHoistedNote(note);\n        appContext.triggerEvent('updateNoteHoistingState', {noteId: note.noteId, isHoisted: true});\n        appContext.triggerEvent('updateNoteHoistingState', {noteId: activeNoteContext.noteId, isHoisted: true});\n        appContext.triggerEvent('updateNoteHoistingState', {noteId: appContext.tabManager.getActiveContextNoteId(), isHoisted: true});\n    }\n}", "CodeBleu_score": 37.912148371262575}, {"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\t  const note = await server.get(`notes/${noteId}`);\n  const activeNoteContext = appContext.tabManager.getActiveNoteContext();\n\n  if (note.isHoisted) {\n    await server.post(`notes/${noteId}/unhoist`);\n    appContext.tabManager.setHoistedNoteId(null);\n  } else {\n    if (activeNoteContext.noteType !== 'search') {\n      await server.post(`notes/${noteId}/hoist`);\n      appContext.tabManager.setHoistedNoteId(noteId);\n    } else {\n      toastService.error(bundleService.get('noteIsSearchType'));\n    }\n  }\n}", "CodeBleu_score": 49.895529123205165}]}
{"instance_id": "8df5414bda15", "generation_result": [{"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\t    const hash = await utils.generateHashFromParams({\n        notePath,\n        hoistedNoteId,\n        viewScope\n    });\n\n    if (utils.isElectron()) {\n        utils.dynamicRequire('@electron/remote').ipcRenderer.send('open-window', hash);\n    } else {\n        const url = new URL(window.location.href);\n        url.hash = hash;\n        window.open(url.toString(), '_blank', 'width=800,height=600');\n    }\n}", "CodeBleu_score": 41.99791703669837}, {"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\t    const hash = utils.generateHash(notePath, hoistedNoteId, viewScope);\n\n    if (utils.isElectron()) {\n        utils.dynamicRequire('@electron/remote').ipcRenderer.send('open-window', hash);\n    } else {\n        const url = utils.getBaseUrl() + `/#/${hash}`;\n        const width = 1024;\n        const height = 768;\n        const options = {\n            width,\n            height,\n            left: (screen.width - width) / 2,\n            top: (screen.height - height) / 2,\n            resizable: false,\n            alwaysOnTop: true,\n            webPreferences: {\n                devTools: false\n            }\n        };\n\n        const win = new BrowserWindow(options);\n        win.loadURL(url);\n    }\n}", "CodeBleu_score": 43.51769452236562}, {"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\t    const hash = await utils.generateHash(notePath, hoistedNoteId, viewScope);\n\n    if (utils.isElectron()) {\n        utils.dynamicRequire('@electron/remote').ipcRenderer.send('open-window', {hash});\n    } else {\n        const url = new URL(window.location.href);\n        url.hash = hash;\n\n        const win = window.open(url.toString(), 'trilium', 'width=1024,height=768');\n        win.focus();\n    }\n}", "CodeBleu_score": 48.80528977571312}]}
{"instance_id": "bd6dc0a79a5b", "generation_result": [{"code": "async runActiveNoteCommand(){\n\t", "CodeBleu_score": 0.8131870016062366}, {"code": "async runActiveNoteCommand(){\n\t", "CodeBleu_score": 0.8131870016062366}, {"code": "async runActiveNoteCommand(){\n\t", "CodeBleu_score": 0.8131870016062366}]}
{"instance_id": "233cf4163968", "generation_result": [{"code": "async isReadOnly(){\n\t    if (this.isTemporarilyDisableReadOnlyMode()) {\n        return false;\n    }\n\n    if (this.isType('text') || this.isType('code')) {\n        return this.hasLabel('readOnly') || this.viewScope.viewMode === 'source';\n    }\n\n    const blob = await this.getBlob();\n    const contentLength = blob.length;\n\n    if (contentLength > this.getReadOnlyLimit()) {\n        return !this.hasLabel('autoReadOnlyDisabled');\n    }\n\n    return false;\n}", "CodeBleu_score": 37.45316205743918}, {"code": "async isReadOnly(){\n\t    if (this.note.isLabelTruthy('readOnlyDisabled')) {\n        return false;\n    }\n\n    if (this.viewScope.viewMode === 'source') {\n        return true;\n    }\n\n    if (!this.note.isText() && !this.note.isCode()) {\n        return true;\n    }\n\n    if (this.note.isLabelTruthy('readOnly')) {\n        return true;\n    }\n\n    const blob = await this.note.getBlob();\n    const contentLength = blob.content.length;\n\n    if (contentLength === 0) {\n        return false;\n    }\n\n    if (this.note.isLabelTruthy('autoReadOnlyDisabled')) {\n        return false;\n    }\n\n    if (this.note.isText()) {\n        return contentLength > config.textNoteSizeLimit;\n    }\n\n    return contentLength > config.codeNoteSizeLimit;\n}", "CodeBleu_score": 60.26882382969424}, {"code": "async isReadOnly(){\n\t    if (this.note.isLabelTruthy('readOnlyDisabled')) {\n        return false;\n    }\n\n    if (this.viewScope.viewMode === 'source') {\n        return true;\n    }\n\n    if (this.note.isLabelTruthy('readOnly')) {\n        return true;\n    }\n\n    if (!this.note.isText()) {\n        return true;\n    }\n\n    const blob = await this.note.getBlob();\n\n    if (blob.length === 0) {\n        return false;\n    }\n\n    if (this.note.isLabelTruthy('autoReadOnlyDisabled')) {\n        return false;\n    }\n\n    const maxSize = this.note.isText() ? 1000000 : 10000000;\n    return blob.length > maxSize;\n}", "CodeBleu_score": 65.57424181431212}]}
{"instance_id": "bca77fc5e32c", "generation_result": [{"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\t    // if ntxId is not provided, generate a new one\n    if (!ntxId) {\n        ntxId = NoteContext.generateNtxId();\n    }\n\n    // if mainNtxId is not provided, use the active context\n    if (!mainNtxId) {\n        mainNtxId = this.getActiveContext()?.ntxId;\n    }\n\n    // check if a similar note context already exists\n    const existingNoteContext = this.noteContexts.find(noteContext => noteContext.ntxId === ntxId);\n    if (existingNoteContext) {\n        // update the hoistedNoteId and return the existing context\n        await existingNoteContext.setHoistedNoteId(hoistedNoteId);\n        return existingNoteContext;\n    }\n\n    // create a new note context\n    const noteContext = new NoteContext(ntxId, mainNtxId, this.appContext);\n    await noteContext.setHoistedNoteId(hoistedNoteId);\n\n    // add the new note context as a child\n    this.noteContexts.push(noteContext);\n\n    // trigger a 'newNoteContextCreated' event\n    this.triggerEvent('newNoteContextCreated', { noteContext });\n\n    return noteContext;\n}", "CodeBleu_score": 56.56394088685859}, {"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\t    const activeNoteContext = this.getActiveContext();\n    const existingNoteContext = this.noteContexts.find(nc => nc.ntxId === ntxId);\n\n    if (existingNoteContext) {\n        if (activeNoteContext && activeNoteContext.ntxId === ntxId) {\n            // if the active context is the same as the existing one, don't do anything\n            return existingNoteContext;\n        }\n\n        // update hoistedNoteId and return existing context\n        await existingNoteContext.setHoistedNoteId(hoistedNoteId);\n        return existingNoteContext;\n    }\n\n    const newNoteContext = new NoteContext(ntxId, hoistedNoteId, mainNtxId);\n\n    // add new context to the list\n    this.noteContexts.push(newNoteContext);\n\n    // trigger newNoteContextCreated event\n    this.triggerEvent('newNoteContextCreated', { noteContext: newNoteContext });\n\n    return newNoteContext;\n}", "CodeBleu_score": 51.929517073293894}, {"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\t    const activeContext = this.getActiveContext();\n    if (activeContext) {\n        await activeContext.setHoistedNoteId(hoistedNoteId);\n        return activeContext;\n    }\n\n    const existingContext = this.noteContexts.find((context) => {\n        const isSimilar =\n            context.notePath === 'root' &&\n            context.hoistedNoteId === hoistedNoteId &&\n            context.mainNtxId === mainNtxId;\n        return isSimilar;\n    });\n\n    if (existingContext) {\n        await existingContext.setHoistedNoteId(hoistedNoteId);\n        return existingContext;\n    }\n\n    const newContext = new NoteContext(ntxId, 'root', hoistedNoteId, mainNtxId);\n    this.noteContexts.push(newContext);\n    this.triggerEvent('newNoteContextCreated', newContext);\n    return newContext;\n}", "CodeBleu_score": 39.572736292463}]}
{"instance_id": "fa8b5627c077", "generation_result": [{"code": "sortChildren(){\n\t    const branchPositions = {};\n    for (const branchId of Object.values(this.childToBranch)) {\n        if (!(branchId in branchPositions)) {\n            branchPositions[branchId] = this.froca.getNotePosition(branchId);\n        }\n    }\n\n    this.children.sort((a, b) => {\n        const aPos = branchPositions[this.childToBranch[a]] || 0;\n        const bPos = branchPositions[this.childToBranch[b]] || 0;\n        return aPos - bPos;\n    });\n}", "CodeBleu_score": 68.37687986198773}, {"code": "sortChildren(){\n\t    const branchPositions = {};\n    for (const childNoteId in this.childToBranch) {\n        const branchId = this.childToBranch[childNoteId];\n        if (!(branchId in branchPositions)) {\n            branchPositions[branchId] = this.froca.getNotePosition(branchId);\n        }\n    }\n    this.children.sort((a, b) => {\n        const aPos = branchPositions[this.childToBranch[a]];\n        const bPos = branchPositions[this.childToBranch[b]];\n        return aPos - bPos;\n    });\n}", "CodeBleu_score": 49.727921074902056}, {"code": "sortChildren(){\n\t    const branchPositions = {};\n\n    for (const childNoteId of this.children) {\n        const branchId = this.childToBranch[childNoteId];\n        const notePos = this.froca.notePositionCache.getNotePosition(childNoteId);\n        branchPositions[branchId] = notePos;\n    }\n\n    this.children.sort((a, b) => {\n        const aPos = branchPositions[this.childToBranch[a]];\n        const bPos = branchPositions[this.childToBranch[b]];\n\n        if (aPos === undefined || bPos === undefined) {\n            return 0;\n        }\n\n        return aPos - bPos;\n    });\n}", "CodeBleu_score": 46.9436395828432}]}
{"instance_id": "51a1ff6e218f", "generation_result": [{"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\t    branchIdsToMove = filterRootNote(branchIdsToMove);\n    branchIdsToMove = filterSearchBranches(branchIdsToMove);\n\n    const newParentBranch = froca.getBranch(newParentBranchId);\n\n    if (['root', '_lbRoot', '_lbAvailableLaunchers', '_lbVisibleLaunchers'].includes(newParentBranch.noteId)) {\n        toastService.showError('Cannot move notes here.');\n        return;\n    }\n\n    for (const branchIdToMove of branchIdsToMove) {\n        const branchToMove = froca.getBranch(branchIdToMove);\n\n        if (branchToMove.getNote().noteId === hoistedNoteService.getHoistedNoteId() || branchToMove.getParentNote().noteId === 'search') {\n            continue;\n        }\n\n        const resp = await server.put(`branches/${branchIdToMove}/move-to-parent/${newParentBranchId}`);\n\n        if (!resp.success) {\n            toastService.showError(resp.message);\n            return;\n        }\n    }\n}", "CodeBleu_score": 76.13835571037495}, {"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\t    branchIdsToMove = filterRootNote(branchIdsToMove);\n    branchIdsToMove = filterSearchBranches(branchIdsToMove);\n\n    const newParentBranch = froca.getBranch(newParentBranchId);\n\n    if (['root', '_lbRoot', '_lbAvailableLaunchers', '_lbVisibleLaunchers'].includes(newParentBranch.noteId)) {\n        toastService.showError('Cannot move notes here.');\n        return;\n    }\n\n    for (const branchIdToMove of branchIdsToMove) {\n        const branchToMove = froca.getBranch(branchIdToMove);\n\n        if (branchToMove.noteId === hoistedNoteService.getHoistedNoteId() || branchToMove.getParentNote().type === 'search') {\n            continue;\n        }\n\n        const resp = await server.put(`branches/${branchIdToMove}/move-to-parent/${newParentBranchId}`);\n\n        if (!resp.success) {\n            toastService.showError(resp.message);\n            return;\n        }\n    }\n}", "CodeBleu_score": 78.18590473261094}, {"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\t    branchIdsToMove = filterRootNote(branchIdsToMove);\n    branchIdsToMove = filterSearchBranches(branchIdsToMove);\n\n    const newParentBranch = froca.getBranch(newParentBranchId);\n\n    if (['root', '_lbRoot', '_lbAvailableLaunchers', '_lbVisibleLaunchers'].includes(newParentBranch.noteId)) {\n        toastService.showError('Cannot move notes here.');\n        return;\n    }\n\n    for (const branchIdToMove of branchIdsToMove) {\n        const resp = await server.put(`branches/${branchIdToMove}/move-to-parent/${newParentBranchId}`);\n\n        if (!resp.success) {\n            toastService.showError(resp.message);\n            return;\n        }\n    }\n}", "CodeBleu_score": 63.77479044136515}]}
{"instance_id": "2ffcc8140af6", "generation_result": [{"code": "async function activateParentNotePath(){\n\t  const activeContext = froca.getActiveContext();\n  const parentNotePath = activeContext.notePath.slice(0, -1);\n\n  if (parentNotePath.length > 0) {\n    froca.setActiveNotePath(parentNotePath);\n  }\n}", "CodeBleu_score": 52.47991605696408}, {"code": "async function activateParentNotePath(){\n\t    const activeContext = froca.getActiveContext();\n    const parentNotePath = activeContext.notePath.slice(0, -1);\n    if (parentNotePath.length > 0) {\n        froca.setActiveNotePath(parentNotePath);\n    }\n}", "CodeBleu_score": 53.957266594332154}, {"code": "async function activateParentNotePath(){\n\t    const activeContext = appContext.getActiveContext();\n    const parentNotePath = activeContext.notePath.slice(0, activeContext.notePath.length - 1);\n    if (parentNotePath.length > 0) {\n        appContext.setActiveContext({ notePath: parentNotePath });\n    }\n}", "CodeBleu_score": 51.606248649297726}]}
{"instance_id": "04b13e7ad9f6", "generation_result": [{"code": "async function copy(branchIds){\n\t    if (isClipboardEmpty()) {\n        const branchIdsHtml = branchIds.map(branchId => `<a href=\\\"${linkService.getBranchLink(branchId)}\\\">${branchId}</a>`).join(' ');\n\n        clipboardBranchIds = branchIds;\n        clipboardMode = 'copy';\n\n        await utils.copyToClipboard(branchIdsHtml);\n\n        toastService.showToast(`Copied branches ${branchIdsHtml} to clipboard`);\n    }\n    else {\n        toastService.throwError('Clipboard is not empty');\n    }\n}", "CodeBleu_score": 44.8038035104976}, {"code": "async function copy(branchIds){\n\t    if (isClipboardEmpty()) {\n        clipboardBranchIds = branchIds;\n        clipboardMode = 'copy';\n\n        const branchLinks = await Promise.all(branchIds.map(branchId => linkService.createBranchLink(branchId)));\n        const branchLinkHtmls = branchLinks.map(branchLink => branchLink.getHtml());\n\n        if (utils.isElectron()) {\n            const clipboard = require('electron').clipboard;\n\n            clipboard.writeText(branchLinkHtmls.join('\n'));\n        }\n        else {\n            navigator.clipboard.writeText(branchLinkHtmls.join('\n'));\n        }\n\n        toastService.showSuccess('Copied branches to the clipboard');\n    }\n    else {\n        toastService.showWarning('Clipboard is not empty');\n    }\n}", "CodeBleu_score": 49.96035151248351}, {"code": "async function copy(branchIds){\n\t    if (branchIds.length === 0) {\n        return;\n    }\n\n    clipboardBranchIds = branchIds;\n    clipboardMode = 'copy';\n\n    const clipboardBranches = clipboardBranchIds.map(branchId => froca.getBranch(branchId));\n\n    const clipboardLinks = [];\n    for (const clipboardBranch of clipboardBranches) {\n        const clipboardLink = await linkService.createBranchLink(clipboardBranch);\n        clipboardLinks.push(clipboardLink);\n    }\n\n    const clipboardHtml = clipboardLinks.map(link => link.getHtml()).join('\n');\n\n    await utils.writeClipboard(clipboardHtml);\n\n    toastService.showMessage('Branches copied to clipboard');\n}", "CodeBleu_score": 50.47029935282983}]}
{"instance_id": "b3a6cce6e5ce", "generation_result": [{"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\t  const list = flatten(data.list)\n\n  list.map((item) => {\n    if (item.type === 'folder') {\n      item.children = item.children || []\n    }\n\n    if (item.type === 'group') {\n      item.include = item.include || []\n    }\n\n    if (item.type === 'folder' || item.type === 'group') {\n      item.content = ''\n    }\n  })\n\n  return { ...data, list }\n}", "CodeBleu_score": 59.15028525661601}, {"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\t  const flattened = flatten(data.list)\n\n  flattened.map((item) => {\n    if (item.type === 'folder') {\n      item.children = item.children || []\n    } else if (item.type === 'group') {\n      item.include = item.include || []\n    }\n\n    item.content = ''\n  })\n\n  return {\n    list: flattened,\n    mode: data.mode,\n    root: data.root,\n  }\n}", "CodeBleu_score": 45.94437178153032}, {"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\t  let new_list: IHostsListObject[] = []\n\n  if (data.list) {\n    new_list = flatten(data.list)\n  }\n\n  const new_data: IHostsBasicData = {\n    ...data,\n    list: new_list.map((item) => {\n      if (item.type === 'folder') {\n        item.children = item.children || []\n      } else if (item.type === 'group') {\n        item.include = item.include || []\n      }\n\n      if (item.type === 'folder' || item.type === 'group') {\n        item.content = ''\n      }\n\n      return item\n    }),\n  }\n\n  return new_data\n}", "CodeBleu_score": 56.460509529834326}]}
{"instance_id": "a494fe11a98c", "generation_result": [{"code": "const addHistory = async (content: string) =>{\n\t  const historyLimit = await configGet('history_limit')\n  if (historyLimit && historyLimit > 0) {\n    const historyList = await getHistoryList()\n    if (historyList.length > historyLimit) {\n      const deleteCount = historyList.length - historyLimit\n      await deleteHistory(deleteCount)\n    }\n  }\n  await swhdb.history.insertOne({\n    id: uuid4(),\n    content,\n    time: new Date().getTime()\n  })\n}", "CodeBleu_score": 35.59382489630812}, {"code": "const addHistory = async (content: string) =>{\n\t  const historyLimit = await configGet('historyLimit')\n  if (historyLimit > 0) {\n    const historyList = await getHistoryList()\n    if (historyList.length >= historyLimit) {\n      const deleteCount = historyList.length - historyLimit + 1\n      await deleteHistory(deleteCount)\n    }\n  }\n  const id = uuid4()\n  const timestamp = new Date().getTime()\n  await swhdb.history.insert({\n    id,\n    content,\n    timestamp,\n  })\n}", "CodeBleu_score": 31.74085215013808}, {"code": "const addHistory = async (content: string) =>{\n\t  const historyLimit = await configGet('history_limit')\n  if (historyLimit && typeof historyLimit === 'number' && historyLimit > 0) {\n    const historyList = await getHistoryList()\n    if (historyList.length >= historyLimit) {\n      await deleteHistory(historyList[0].id)\n    }\n  }\n  const id = uuid4()\n  await swhdb.history.insert({ id, content, time: Date.now() })\n}", "CodeBleu_score": 32.32652127283289}]}
{"instance_id": "bd1413e33a8a", "generation_result": [{"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\t  const dataFolder = getDataFolder()\n  const filePath = path.join(dataFolder, 'hosts.json')\n  const defaultData: IHostsBasicData = {\n    version: 'v3',\n    hosts: []\n  }\n\n  if (!fs.existsSync(filePath)) return defaultData\n\n  const content = fs.readFileSync(filePath, 'utf8')\n\n  try {\n    const data = JSON.parse(content)\n    return cleanHostsList(data)\n  } catch (error) {\n    console.error('Error parsing old data:', error)\n    return defaultData\n  }\n}", "CodeBleu_score": 47.94765648702282}, {"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\t  const dataFolder = getDataFolder()\n  const filePath = path.join(dataFolder, 'hosts.json')\n  const defaultData: IHostsBasicData = {\n    version: VersionType.V3,\n    hosts: []\n  }\n\n  if (!fs.existsSync(filePath)) {\n    return defaultData\n  }\n\n  const fileContent = fs.readFileSync(filePath, 'utf8')\n  try {\n    const data = JSON.parse(fileContent)\n    return cleanHostsList(data)\n  } catch (error) {\n    console.error(`Error parsing old data: ${error}`)\n    return defaultData\n  }\n}", "CodeBleu_score": 50.82632726853837}, {"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\t  const dataFolder = getDataFolder()\n  const filePath = path.join(dataFolder, 'data.json')\n  const defaultData: IHostsBasicData = {\n    version: VersionType.V3,\n    hosts: [],\n    hostsList: [],\n  }\n\n  if (!fs.existsSync(filePath)) {\n    return defaultData\n  }\n\n  const fileContent = fs.readFileSync(filePath, 'utf-8')\n  const parsedData = JSON.parse(fileContent)\n\n  if (parsedData) {\n    return cleanHostsList(parsedData)\n  } else {\n    console.error('[migrateData] readOldData: parse data.json failed')\n    return defaultData\n  }\n}", "CodeBleu_score": 47.08149441419293}]}
{"instance_id": "1a746af7c945", "generation_result": [{"code": "async function getSwhDb(): Promise<PotDb>{\n\t  if (!global.swhdb) {\n    let data_dir: string = await getDataFolder()\n    global.data_dir = data_dir\n    let db_dir: string = path.join(data_dir, 'swh_db')\n    swhdb = new PotDb(db_dir)\n    console.log(`swh db: ${swhdb.dir}`)\n    global.swhdb = swhdb\n  } else {\n    swhdb = global.swhdb\n  }\n  return swhdb\n}", "CodeBleu_score": 60.88634403156979}, {"code": "async function getSwhDb(): Promise<PotDb>{\n\t  if (!global.swhdb) {\n    let data_dir: string = await localdb.get('data_dir')\n    if (!data_dir) {\n      data_dir = path.join(getDataFolder(), 'swh')\n      await localdb.set('data_dir', data_dir)\n    }\n    global.data_dir = data_dir\n    let db_dir: string = path.join(data_dir, 'swh.db')\n    swhdb = new PotDb(db_dir)\n    console.log(`swh db: ${swhdb.dir}`)\n    global.swhdb = swhdb\n  } else {\n    swhdb = global.swhdb\n  }\n  return swhdb\n}", "CodeBleu_score": 61.11296520377007}, {"code": "async function getSwhDb(): Promise<PotDb>{\n\t  if (!global.swhdb) {\n    const data_dir: string = await localdb.get('data_dir')\n    if (!data_dir) {\n      const default_dir = path.join(getDataFolder(), 'swh')\n      await localdb.set('data_dir', default_dir)\n    }\n    const db_dir: string = path.join(data_dir, 'swh')\n    swhdb = new PotDb(db_dir)\n    console.log(`swh db: ${swhdb.dir}`)\n    global.swhdb = swhdb\n  } else {\n    swhdb = global.swhdb\n  }\n  return swhdb\n}", "CodeBleu_score": 59.86571448641862}]}
{"instance_id": "375d71e6f391", "generation_result": [{"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\t    const config = configGet()\n    const refreshInterval = config.refreshInterval\n    const url = config.url\n    const lastRefresh = config.lastRefresh\n    const now = Date.now()\n    const elapsed = now - lastRefresh\n    return !(refreshInterval > 0 && url && url.startsWith('http') && lastRefresh > 0 && elapsed >= refreshInterval)\n}", "CodeBleu_score": 24.65553734652313}, {"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\t    if (!hosts.refresh_interval || !hosts.url) {\n        return false\n    }\n    if (!hosts.last_refresh) {\n        return true\n    }\n    const now = Date.now()\n    const elapsed = now - hosts.last_refresh\n    if (elapsed >= hosts.refresh_interval * 1000) {\n        return true\n    }\n    return false\n}", "CodeBleu_score": 32.09918704686152}, {"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\t  const { refreshInterval, url } = configGet()\n  if (!url || !refreshInterval) return false\n  if (!ts_last_server_check) return true\n  const timeElapsed = Date.now() - ts_last_server_check\n  return timeElapsed > refreshInterval * 1000\n}", "CodeBleu_score": 28.703405431413533}]}
{"instance_id": "e9824782738b", "generation_result": [{"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\t    const callbackId = `${action}-${x_get_idx++}`\n    ipcRenderer.send(`action-${action}`, { callbackId, params })\n    return new Promise((resolve, reject) => {\n        ipcRenderer.once(`action-${action}-response-${callbackId}`, (event, response) => {\n            if (response.success) {\n                resolve(response.data)\n            } else {\n                reject(response.error)\n            }\n        })\n    })\n}", "CodeBleu_score": 46.36672619816828}, {"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\t  return new Promise((resolve, reject) => {\n    const callbackId = `${action}-${x_get_idx++}`\n    ipcRenderer.send(action, callbackId, ...params)\n    ipcRenderer.once(`${callbackId}-response`, (event, response) => {\n      if (response.success) {\n        resolve(response.data)\n      } else {\n        reject(response.data)\n      }\n    })\n  })\n}", "CodeBleu_score": 47.67636523282505}, {"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\t  const id = x_get_idx++\n  return new Promise<any>((resolve, reject) => {\n    ipcRenderer.once(`response:${id}`, (event, data) => {\n      if (data.error) {\n        reject(data.error)\n      } else {\n        resolve(data.result)\n      }\n    })\n    ipcRenderer.send('action', { id, action, params })\n  })\n}", "CodeBleu_score": 43.15506930838927}]}
{"instance_id": "027bc2903865", "generation_result": [{"code": "const loadContent = async (is_new = false) =>{\n\t  if (ref_cm.current) {\n    const content = await agent.hosts.getContent(hosts_id)\n    if (is_new) {\n      ref_cm.current.clearHistory()\n    }\n    ref_cm.current.setValue(content)\n  } else {\n    await wait(100)\n    await loadContent(is_new)\n  }\n}", "CodeBleu_score": 38.0681687943412}, {"code": "const loadContent = async (is_new = false) =>{\n\t  if (!ref_cm.current) {\n    await wait(100)\n    loadContent()\n    return\n  }\n\n  let content = ''\n  if (hosts_id === '0') {\n    content = hosts_data.system\n  } else {\n    content = hosts_data.data.find((i) => i.id === hosts_id)?.content || ''\n  }\n\n  if (is_new) {\n    ref_cm.current.setValue('')\n  }\n\n  ref_cm.current.setValue(content)\n}", "CodeBleu_score": 44.218060064493024}, {"code": "const loadContent = async (is_new = false) =>{\n\t  if (ref_cm.current) {\n    if (is_new) {\n      ref_cm.current.setValue('')\n      ref_cm.current.clearHistory()\n    }\n    let content = ''\n    if (hosts_id === '0') {\n      content = await agent.getSystemHosts()\n    } else {\n      content = await agent.getHostsContent(hosts_id)\n    }\n    ref_cm.current.setValue(content)\n    ref_cm.current.focus()\n  } else {\n    await wait(100)\n    await loadContent(is_new)\n  }\n}", "CodeBleu_score": 46.609869019065506}]}
{"instance_id": "199f8fb90016", "generation_result": [{"code": "const onGutterClick = (n: number) =>{\n\t  let cm_editor = ref_cm.current\n  if (is_read_only || !cm_editor) return\n  let line = cm_editor.getLine(n)\n  if (line.length === 0 || line.trim() === '') return\n  if (line.startsWith('#')) {\n    line = line.slice(1)\n  } else {\n    line = '# ' + line\n  }\n  cm_editor.replaceRange(line, { line: n, ch: 0 })\n}", "CodeBleu_score": 47.766176690983556}, {"code": "const onGutterClick = (n: number) =>{\n\t  let cm_editor = ref_cm.current\n  if (is_read_only || !cm_editor) return\n  let line = cm_editor.getLine(n)\n  if (line.length === 0 || /^\\s+$/.test(line)) return\n  if (line.startsWith('#')) {\n    line = line.slice(1)\n  } else {\n    line = '#' + line\n  }\n  cm_editor.replaceRange(line, { line: n, ch: 0 })\n}", "CodeBleu_score": 49.03495678381688}, {"code": "const onGutterClick = (n: number) =>{\n\t  let cm_editor = ref_cm.current\n  if (is_read_only || !cm_editor) return\n  let line = cm_editor.getLine(n)\n  if (!line || /^\\s*$/.test(line)) return\n  if (line.startsWith('#')) {\n    line = line.slice(1)\n  } else {\n    line = '#' + line\n  }\n  cm_editor.replaceRange(line, { line: n, ch: 0 })\n}", "CodeBleu_score": 48.517365052656366}]}
{"instance_id": "000e8aa4c16c", "generation_result": [{"code": "bool CommandLineParser::parse(const QStringList& args){\n\t  m_foundArgs.clear();\n  m_foundOptions.clear();\n  bool ok = true;\n  QStringList::const_iterator actualIt = args.cbegin();\n  Node* actualNode = &m_rootNode;\n  // check version option\n  if (m_versionOption) {\n    ok = processIfOptionIsVersion(args, actualIt, actualNode);\n    if (!ok) {\n      return ok;\n    }\n  }\n  // check help option\n  ok = processIfOptionIsHelp(args, actualIt, actualNode);\n  if (!ok) {\n    return ok;\n  }\n  // process other arguments\n  for (; actualIt != args.cend(); ++actualIt) {\n    QString argument = *actualIt;\n    // check if is option\n    if (argument.startsWith(QLatin1String(\"-\"))) {\n      ok = processOptions(args, actualIt, actualNode);\n    } else {\n      ok = processArgs(args, actualIt, actualNode);\n    }\n    if (!ok) {\n      err << QStringLiteral(\"Error parsing the arguments\");\n      return ok;\n    }\n  }\n  return ok;\n}", "CodeBleu_score": 47.501677626021376}, {"code": "bool CommandLineParser::parse(const QStringList& args){\n\t  m_foundArgs.clear();\n  m_foundOptions.clear();\n  bool ok = true;\n  // check version\n  if (m_foundOptions.contains(versionOption)) {\n    out << qApp->applicationName() << QStringLiteral(\" %1\").arg(APP_VERSION);\n    if (args.size() == 1) {\n      exit(0);\n    }\n    err << QStringLiteral(\\\"Expected no arguments after the option '--version'.\\\");\n    ok = false;\n    return ok;\n  }\n  // check help\n  if (m_foundOptions.contains(helpOption)) {\n    out << optionsToString(m_options, m_subcommands);\n    if (args.size() == 1) {\n      exit(0);\n    }\n    err << QStringLiteral(\\\"Expected no arguments after the option '--help'.\\\");\n    ok = false;\n    return ok;\n  }\n  // check other args\n  QStringList::const_iterator actualIt = args.cbegin();\n  Node* actualNode = &m_root;\n  ++actualIt;\n  while (actualIt != args.cend()) {\n    QString arg = *actualIt;\n    if (arg.startsWith(QLatin1String(\\\"-\\\"))) {\n      ok = processOptions(args, actualIt, actualNode);\n    } else {\n      ok = processArgs(args, actualIt, actualNode);\n    }\n    if (!ok) {\n      err << QStringLiteral(\\\"Error while parsing the arguments.\\\");\n      return ok;\n    }\n    ++actualIt;\n  }\n  return ok;\n}", "CodeBleu_score": 57.51370876525006}, {"code": "bool CommandLineParser::parse(const QStringList& args){\n\t    m_foundArgs.clear();\n    m_foundOptions.clear();\n    m_error = false;\n    // check version option\n    if (m_rootNode.options.contains(versionOption)) {\n        if (args.size() == 1) {\n            out << QStringLiteral(\"Version %1\").arg(QString::fromLatin1(GIT_VERSION));\n            return true;\n        } else {\n            err << QStringLiteral(\"Unexpected arguments after the version option.\");\n            return false;\n        }\n    }\n    // check help option\n    if (m_rootNode.options.contains(helpOption)) {\n        QStringList::const_iterator actualIt = args.cbegin();\n        Node* actualNode = &m_rootNode;\n        bool ok = processIfOptionIsHelp(args, actualIt, actualNode);\n        if (!ok) {\n            return false;\n        }\n        if (actualIt != args.cend()) {\n            err << QStringLiteral(\"Unexpected arguments after the help option.\");\n            return false;\n        }\n        return true;\n    }\n    // check other arguments\n    QStringList::const_iterator actualIt = args.cbegin();\n    Node* actualNode = &m_rootNode;\n    while (actualIt != args.cend()) {\n        QString argument = *actualIt;\n        bool ok = false;\n        if (argument.startsWith(QLatin1String(\"-\"))) {\n            ok = processOptions(args, actualIt, actualNode);\n        } else {\n            ok = processArgs(args, actualIt, actualNode);\n        }\n        if (!ok) {\n            m_error = true;\n            return false;\n        }\n        ++actualIt;\n    }\n    return true;\n}", "CodeBleu_score": 53.01460445289923}]}
{"instance_id": "2f02436b366f", "generation_result": [{"code": "void ButtonListView::updateComponents(){\n\t    m_listButtons = ConfigHandler().getButtons();\n    auto listTypes = CaptureToolButton::getIterableButtonTypes();\n    for (const CaptureTool::Type t : listTypes) {\n        auto it = std::find(m_listButtons.begin(), m_listButtons.end(), t);\n        if (it != m_listButtons.end()) {\n            QListWidgetItem* item = this->item(t);\n            item->setCheckState(Qt::Checked);\n        } else {\n            QListWidgetItem* item = this->item(t);\n            item->setCheckState(Qt::Unchecked);\n        }\n    }\n}", "CodeBleu_score": 63.02863600636254}, {"code": "void ButtonListView::updateComponents(){\n\t    m_listButtons = ConfigHandler().getButtons();\n    auto listTypes = CaptureToolButton::getIterableButtonTypes();\n    for (int i = 0; i < this->count(); ++i) {\n        QListWidgetItem* item = this->item(i);\n        CaptureTool::Type bType = m_buttonTypeByName[item->text()];\n        if (m_listButtons.contains(bType)) {\n            item->setCheckState(Qt::Checked);\n        } else {\n            item->setCheckState(Qt::Unchecked);\n        }\n    }\n}", "CodeBleu_score": 79.00369753757558}, {"code": "void ButtonListView::updateComponents(){\n\t    m_listButtons = ConfigHandler().buttons();\n    auto listTypes = CaptureToolButton::getIterableButtonTypes();\n\n    for (int i = 0; i < this->count(); ++i) {\n        QListWidgetItem* item = this->item(i);\n        CaptureTool::Type bType = m_buttonTypeByName[item->text()];\n        if (m_listButtons.contains(bType)) {\n            item->setCheckState(Qt::Checked);\n        } else {\n            item->setCheckState(Qt::Unchecked);\n        }\n    }\n}", "CodeBleu_score": 81.038906781796}]}
{"instance_id": "578e98634572", "generation_result": [{"code": "void ColorPickerEditor::addPreset(){\n\t    if (m_colorList.contains(m_color)) {\n        return;\n    }\n\n    if (m_colorList.size() >= 17) {\n        QMessageBox::warning(this, tr(\"Error\"), tr(\"Maximum presets reached\"));\n        return;\n    }\n\n    m_colorList.append(m_color);\n    m_config.setUserColors(m_colorList);\n    m_colorpicker->setPresets(m_colorList);\n}", "CodeBleu_score": 60.31290066422652}, {"code": "void ColorPickerEditor::addPreset(){\n\t    if (m_colorList.contains(m_color)) {\n        return;\n    }\n    if (m_colorList.size() == 17) {\n        QMessageBox::warning(this, tr(\"Maximum presets reached\"),\n                             tr(\"Maximum presets reached. Please delete a preset to add a new one.\"));\n        return;\n    }\n    m_colorList.append(m_color);\n    m_config.setUserColors(m_colorList);\n}", "CodeBleu_score": 62.3118317431453}, {"code": "void ColorPickerEditor::addPreset(){\n\t    if (m_colorList.contains(m_color)) {\n        return;\n    }\n\n    if (m_colorList.size() == 17) {\n        QMessageBox::warning(this, tr(\"Error\"), tr(\"Maximum presets reached\"));\n        return;\n    }\n\n    m_colorList.append(m_color);\n    m_config.setUserColors(m_colorList);\n}", "CodeBleu_score": 58.1389989522995}]}
{"instance_id": "3f8c1770cd2e", "generation_result": [{"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\t\n  setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);\n\n  QHBoxLayout* hLayout = new QHBoxLayout(this);\n  QVBoxLayout* vLayout = new QVBoxLayout();\n  vLayout->setAlignment(Qt::AlignCenter);\n  vLayout->setSpacing(0);\n\n  // Initialize buttons\n  m_okButton = new QPushButton(tr(\"OK\"), this);\n  m_cancelButton = new QPushButton(tr(\"Cancel\"), this);\n\n  // Initialize color wheel\n  m_colorWheel = new ClickableLabel(this);\n  m_colorWheel->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);\n  m_colorWheel->setMinimumSize(QSize(200, 200));\n\n  // Add spacing to the vertical layout\n  vLayout->addSpacing(10);\n\n  // Integrate the vertical layout into the horizontal layout\n  hLayout->addLayout(vLayout);\n\n  // Set the main layout for the widget\n  setLayout(hLayout);\n\n  // Update components\n  updateComponents();\n}", "CodeBleu_score": 52.42519628853268}, {"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\t\n  setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);\n\n  QHBoxLayout* hLayout = new QHBoxLayout(this);\n  QVBoxLayout* vLayout = new QVBoxLayout();\n\n  QFontMetrics fontMetrics(QApplication::font());\n  int spacing = fontMetrics.height();\n\n  vLayout->setAlignment(Qt::AlignVCenter);\n\n  // Buttons\n  QMap<QString, QString> colorMap = GlobalValues::colorMap();\n  for (auto it = colorMap.begin(); it != colorMap.end(); ++it) {\n    ClickableLabel* button = new ClickableLabel(this);\n    button->setStyleSheet(\n      \"background-color: \" + it.value() + \"; border: 1px solid black;\");\n    button->setToolTip(it.key());\n    connect(button, &ClickableLabel::clicked, this, &UIcolorEditor::onColor);\n    vLayout->addWidget(button);\n  }\n\n  vLayout->addSpacing(spacing);\n\n  // Color wheel\n  m_colorWheel = new ColorWheel(this);\n  m_colorWheel->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);\n  connect(m_colorWheel, &ColorWheel::colorChanged, this, &UIcolorEditor::onColor);\n  vLayout->addWidget(m_colorWheel);\n\n  vLayout->addSpacing(spacing);\n\n  // Integrate vertical layout into horizontal layout\n  hLayout->addLayout(vLayout);\n\n  // Set main layout\n  setLayout(hLayout);\n\n  // Update components\n  updateComponents();\n}", "CodeBleu_score": 43.63133644487764}, {"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\t", "CodeBleu_score": 8.500866798722518}]}
{"instance_id": "ad86ef280917", "generation_result": [{"code": "void Flameshot::full(const CaptureRequest& req){\n\t    if (!resolveAnyConfigErrors()) {\n        return;\n    }\n\n    bool ok = true;\n    QPixmap p(ScreenGrabber().grabScreen(ok));\n    if (ok) {\n        QRect geometry = ScreenGrabber().screenGeometry();\n        QRect region = req.initialSelection();\n        if (region.isNull()) {\n            region = ScreenGrabber().screenGeometry();\n        } else {\n            QRect screenGeom = ScreenGrabber().screenGeometry();\n            screenGeom.moveTopLeft({0, 0});\n            region = region.intersected(screenGeom);\n            p = p.copy(region);\n        }\n        if (req.tasks() & CaptureRequest::PIN) {\n            // change geometry for pin task\n            req.addPinTask(region);\n        }\n        exportCapture(p, geometry, req);\n    } else {\n        emit captureFailed();\n    }\n}", "CodeBleu_score": 76.0329931772602}, {"code": "void Flameshot::full(const CaptureRequest& req){\n\t    if (!resolveAnyConfigErrors()) {\n        return;\n    }\n\n    bool ok = true;\n    QPixmap p(ScreenGrabber().grabScreen(ok));\n    if (ok) {\n        QRect geometry = ScreenGrabber().screenGeometry();\n        QRect region = req.initialSelection();\n        if (region.isNull()) {\n            region = ScreenGrabber().screenGeometry();\n        } else {\n            QRect screenGeom = ScreenGrabber().screenGeometry();\n            screenGeom.moveTopLeft({ 0, 0 });\n            region = region.intersected(screenGeom);\n            p = p.copy(region);\n        }\n        if (req.tasks() & CaptureRequest::PIN) {\n            // change geometry for pin task\n            req.addPinTask(region);\n        }\n        exportCapture(p, geometry, req);\n    } else {\n        emit captureFailed();\n    }\n}", "CodeBleu_score": 75.99733708423577}, {"code": "void Flameshot::full(const CaptureRequest& req){\n\t    if (!resolveAnyConfigErrors()) {\n        return;\n    }\n\n    bool ok = true;\n    QPixmap p(ScreenGrabber().grabScreen(ok));\n    if (ok) {\n        QRect geometry = ScreenGrabber().screenGeometry();\n        QRect region = req.initialSelection();\n        if (region.isNull()) {\n            region = ScreenGrabber().screenGeometry();\n        } else {\n            QRect screenGeom = ScreenGrabber().screenGeometry();\n            screenGeom.moveTopLeft({0, 0});\n            region = region.intersected(screenGeom);\n            p = p.copy(region);\n        }\n        if (req.tasks() & CaptureRequest::PIN) {\n            // change geometry for pin task\n            req.addPinTask(region);\n        }\n        exportCapture(p, geometry, req);\n    } else {\n        emit captureFailed();\n    }\n}", "CodeBleu_score": 76.0329931772602}]}
{"instance_id": "42abe47d0da0", "generation_result": [{"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\t    if (instance()) {\n        instance()->attachScreenshotToClipboard(capture);\n        return;\n    }\n\n    QByteArray data;\n    QDataStream stream(&data, QIODevice::WriteOnly);\n    stream << capture;\n    QDBusMessage m = createMethodCall(QStringLiteral(\"attachScreenshotToClipboard\"));\n    m << data;\n    call(m);\n}", "CodeBleu_score": 89.64146214592199}, {"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\t    if (instance()) {\n        instance()->attachScreenshotToClipboard(capture);\n        return;\n    }\n\n    QByteArray data;\n    QDataStream stream(&data, QIODevice::WriteOnly);\n    stream << capture;\n    QDBusMessage m = createMethodCall(QStringLiteral(\"attachScreenshotToClipboard\"));\n    m << data;\n    call(m);\n}", "CodeBleu_score": 89.64146214592199}, {"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\t    if (instance()) {\n        instance()->attachScreenshotToClipboard(capture);\n        return;\n    }\n\n    QByteArray data;\n    QDataStream stream(&data, QIODevice::WriteOnly);\n    stream << capture;\n    QDBusMessage m = createMethodCall(QStringLiteral(\"attachScreenshotToClipboard\"));\n    m << data;\n    call(m);\n}", "CodeBleu_score": 89.64146214592199}]}
{"instance_id": "4276c0025e1f", "generation_result": [{"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\t    m_hostingClipboard = true;\n    QClipboard* clipboard = QApplication::clipboard();\n    clipboard->blockSignals(true);\n    // This variable is necessary because the signal doesn't get blocked on\n    // windows for some reason\n    m_clipboardSignalBlocked = true;\n    if (!notification.isEmpty()) {\n        QDBusMessage m = createMethodCall(QStringLiteral(\"logNotification\"));\n        m << notification;\n        QDBusConnection sessionBus = QDBusConnection::sessionBus();\n        checkDBusConnection(sessionBus);\n        sessionBus.call(m);\n    }\n    clipboard->setText(text);\n    clipboard->blockSignals(false);\n}", "CodeBleu_score": 76.69380436725824}, {"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\t  m_hostingClipboard = true;\n  QClipboard* clipboard = QApplication::clipboard();\n  clipboard->blockSignals(true);\n  // This variable is necessary because the signal doesn't get blocked on\n  // windows for some reason\n  m_clipboardSignalBlocked = true;\n  if (!notification.isEmpty()) {\n    qDebug() << notification;\n  }\n  clipboard->setText(text);\n  clipboard->blockSignals(false);\n}", "CodeBleu_score": 83.76031927188659}, {"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\t    m_hostingClipboard = true;\n    if (!notification.isEmpty()) {\n        qDebug() << notification;\n    }\n    QClipboard* clipboard = QApplication::clipboard();\n    clipboard->blockSignals(true);\n    m_clipboardSignalBlocked = true;\n    clipboard->setText(text);\n    clipboard->blockSignals(false);\n}", "CodeBleu_score": 85.59727908593261}]}
{"instance_id": "ef69a941bff6", "generation_result": [{"code": "void AcceptTool::pressed(CaptureContext& context){\n\t    Q_UNUSED(context)\n    emit requestClose();\n}", "CodeBleu_score": 8.618389699268462}, {"code": "void AcceptTool::pressed(CaptureContext& context){\n\t    Q_UNUSED(context)\n    emit requestClose();\n    emit requestCapture(context.request());\n}", "CodeBleu_score": 17.5920005604975}, {"code": "void AcceptTool::pressed(CaptureContext& context){\n\t    if (context.request().hasPinTask()) {\n        context.setSelectionGeometry(context.widget->geometry());\n        context.request().addTask(context.request().pinTask());\n    }\n\n    emit requestDone(context.request());\n    emit closeRequest();\n}", "CodeBleu_score": 35.00662987683071}]}
{"instance_id": "954477282486", "generation_result": [{"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\t    QStringList desktopFiles = dir.entryList(QStringList() << QStringLiteral(\"*.desktop\"), QDir::Files);\n    int initialSize = m_applications.size();\n    for (const QString& desktopFile : desktopFiles) {\n        bool ok = false;\n        DesktopAppData appData = parseDesktopFile(dir.absoluteFilePath(desktopFile), ok);\n        if (ok) {\n            m_applications.append(appData);\n        }\n    }\n    return m_applications.size() - initialSize;\n}", "CodeBleu_score": 59.97404421592396}, {"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\t    QStringList desktopFiles = dir.entryList(QStringList() << QStringLiteral(\"*.desktop\"),\n                                            QDir::Files | QDir::NoDotAndDotDot);\n    int initialCount = m_applications.size();\n    for (const QString& desktopFile : desktopFiles) {\n        bool ok;\n        DesktopAppData data = parseDesktopFile(dir.absoluteFilePath(desktopFile), ok);\n        if (ok) {\n            m_applications.append(data);\n        }\n    }\n    return m_applications.size() - initialCount;\n}", "CodeBleu_score": 60.05708127708067}, {"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\t    int newEntries = 0;\n    QStringList desktopFiles = dir.entryList(QStringList() << QStringLiteral(\"*.desktop\"),\n                                            QDir::Files | QDir::NoDotAndDotDot);\n    int initialSize = m_apps.size();\n    for (const QString& fileName : desktopFiles) {\n        bool ok = false;\n        DesktopAppData app = parseDesktopFile(dir.absoluteFilePath(fileName), ok);\n        if (ok) {\n            m_apps.append(app);\n            newEntries++;\n        }\n    }\n    return m_apps.size() - initialSize;\n}", "CodeBleu_score": 58.72459592318258}]}
{"instance_id": "e17fc5c9d6d0", "generation_result": [{"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\t  QMap<QString, QVector<DesktopAppData>> res;\n  for (const DesktopAppData& app : qAsConst(m_appList)) {\n    for (const QString& category : categories) {\n      if (app.categories.contains(category)) {\n        res[category].append(app);\n      }\n    }\n  }\n  return res;\n}", "CodeBleu_score": 96.64527421307066}, {"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\t  QMap<QString, QVector<DesktopAppData>> res;\n  for (const DesktopAppData& app : qAsConst(m_appList)) {\n    for (const QString& category : categories) {\n      if (app.categories.contains(category)) {\n        res[category].append(app);\n      }\n    }\n  }\n  return res;\n}", "CodeBleu_score": 96.64527421307066}, {"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\t  QMap<QString, QVector<DesktopAppData>> res;\n  for (const DesktopAppData& app : qAsConst(m_appList)) {\n    for (const QString& category : categories) {\n      if (app.categories.contains(category)) {\n        res[category].append(app);\n      }\n    }\n  }\n  return res;\n}", "CodeBleu_score": 96.64527421307066}]}
{"instance_id": "1e9cb2fcafe5", "generation_result": [{"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\t  QString filePath = path;\n  if (filePath.isEmpty()) {\n    filePath = properScreenshotPath();\n  }\n  if (filePath.isEmpty()) {\n    return false;\n  }\n  QString fileExtension = fileExtensionForPath(filePath);\n  if (fileExtension.isEmpty()) {\n    return false;\n  }\n  QImageWriter writer;\n  writer.setQuality(ConfigHandler().imageQuality());\n  writer.setFileName(filePath);\n  writer.setFormat(fileExtension);\n  if (writer.write(capture.toImage())) {\n    QString message = messagePrefix + tr(\"Saved to \") + filePath;\n    LOG_INFO(message);\n    return true;\n  } else {\n    QString message = messagePrefix + tr(\"Error saving to \") + filePath;\n    LOG_ERROR(message + \": \" + writer.errorString());\n    return false;\n  }\n}", "CodeBleu_score": 34.566552283696495}, {"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\t  QString filePath = path;\n  if (filePath.isEmpty()) {\n    filePath =\n        properScreenshotPath(Flameshot::instance()->config->lastScreenshotPath(),\n                             Flameshot::instance()->config->lastScreenshotName(),\n                             Flameshot::instance()->config->lastScreenshotFormat());\n  }\n  if (filePath.isEmpty()) {\n    return false;\n  }\n  QString extension =\n      QMimeDatabase().suffixForFileNameAndData(filePath, capture.toImage());\n  if (extension.isEmpty()) {\n    extension = Flameshot::instance()->config->lastScreenshotFormat();\n  }\n  filePath = filePath + '.' + extension;\n\n  QString saveMessage = messagePrefix + filePath;\n  if (capture.save(filePath, extension.toStdString().c_str(),\n                   Flameshot::instance()->config->jpegQuality())) {\n    saveMessage += tr(\" saved successfully.\");\n    Flameshot::instance()->config->setLastScreenshotPath(filePath);\n    Flameshot::instance()->config->setLastScreenshotName(\n        QFileInfo(filePath).baseName());\n    Flameshot::instance()->config->setLastScreenshotFormat(extension);\n    AbstractLogger::info(saveMessage);\n    return true;\n  } else {\n    saveMessage += tr(\" failed to save.\");\n    AbstractLogger::error(saveMessage);\n    return false;\n  }\n}", "CodeBleu_score": 43.689142276200485}, {"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\t  QString filePath = properScreenshotPath(path);\n  QString fileExtension = fileExtensionFromPath(filePath);\n  QImageWriter writer(filePath, fileExtension.toUpper().toLatin1());\n  writer.setQuality(ConfigHandler().saveFormatJpegQuality());\n  bool success = writer.write(capture.toImage());\n  QString saveMessage =\n      messagePrefix + \" \" + filePath + \" \" + (success ? \"OK\" : \"ERROR\");\n  if (success) {\n    AbstractLogger::info(saveMessage);\n  } else {\n    AbstractLogger::error(saveMessage + \" \" + writer.errorString());\n  }\n  return success;\n}", "CodeBleu_score": 29.85012248095906}]}
{"instance_id": "ba67f6b4e974", "generation_result": [{"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\t\t// Clear any currently active modpacks\n\tthis->active.clear();\n\n\t// Iterate through the provided load order\n\tfor (const auto &id : load_order) {\n\t\t// Retrieve the corresponding modpack from the available modpacks\n\t\tconst auto &modpack = this->available.at(id);\n\n\t\t// Activate the modpack by adding it to the active modpacks\n\t\tthis->active.emplace(id, modpack);\n\n\t\t// Log a message for the activated modpack\n\t\tlog::log(MSG(dbg) << \"Activated modpack: \" << id);\n\t}\n}", "CodeBleu_score": 62.49777816151183}, {"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\t\t// clear any currently active modpacks\n\tthis->active.clear();\n\n\t// iterate through the provided load order\n\tfor (const auto &modpack_id : load_order) {\n\t\t// retrieve the corresponding modpack from the available modpacks\n\t\tauto modpack = this->available.find(modpack_id);\n\t\tif (modpack == this->available.end()) {\n\t\t\tthrow Error(MSG(err) << \"Modpack \" << modpack_id << \" not found.\");\n\t\t}\n\n\t\t// activate the modpack by adding it to the active modpacks\n\t\tthis->active.emplace(modpack_id, modpack->second);\n\n\t\t// log a message for the activated modpack\n\t\tlog::log(MSG(dbg) << \"Activating modpack \" << modpack_id);\n\t}\n}", "CodeBleu_score": 67.61418255646232}, {"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\t    this->active.clear();\n    for (const auto &modpack_id : load_order) {\n        auto it = this->available.find(modpack_id);\n        if (it != this->available.end()) {\n            this->active.emplace_back(it->second);\n            log::log(MSG(info) << \"Activated modpack: \" << modpack_id);\n        }\n    }\n}", "CodeBleu_score": 70.17079331725101}]}
{"instance_id": "da92dbc3907b", "generation_result": [{"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\t\tstd::unordered_set<std::string> requested_modpacks{load_order.begin(), load_order.end()};\n\n\t// Check if each modpack in the load order is available\n\tfor (const auto &modpack_id : load_order) {\n\t\tif (this->available.find(modpack_id) == this->available.end()) {\n\t\t\tthrow Error{MSG(err) << \"Modpack \" << modpack_id << \" not found.\"};\n\t\t}\n\t}\n\n\t// Verify that all dependencies are satisfied and no conflicts exist\n\tfor (const auto &modpack_id : load_order) {\n\t\tconst auto &modpack = this->available.at(modpack_id);\n\n\t\t// Check if all dependencies are satisfied\n\t\tfor (const auto &dependency : modpack.dependencies) {\n\t\t\tif (requested_modpacks.find(dependency) == requested_modpacks.end()) {\n\t\t\t\tthrow Error{MSG(err) << \"Modpack \" << modpack_id << \" depends on \" << dependency << \", but it is not requested.\"};\n\t\t\t}\n\t\t}\n\n\t\t// Check for conflicts\n\t\tfor (const auto &conflict : modpack.conflicts) {\n\t\t\tif (requested_modpacks.find(conflict) != requested_modpacks.end()) {\n\t\t\t\tthrow Error{MSG(err) << \"Modpack \" << modpack_id << \" conflicts with \" << conflict << \", but it is requested.\"};\n\t\t\t}\n\t\t}\n\t}\n\n\t// Update the load order\n\tthis->load_order = load_order;\n}", "CodeBleu_score": 73.6324735275937}, {"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\t\tstd::unordered_set<std::string> requested_modpacks{load_order.begin(), load_order.end()};\n\n\tfor (const auto &modpack_id : load_order) {\n\t\tif (!this->available.count(modpack_id)) {\n\t\t\tthrow Error{MSG(err) << \"Modpack \" << modpack_id << \" not available\"};\n\t\t}\n\n\t\tauto &modpack = this->available.at(modpack_id);\n\n\t\t// Check if all dependencies are satisfied\n\t\tfor (const auto &dep_id : modpack.dependencies) {\n\t\t\tif (!requested_modpacks.count(dep_id)) {\n\t\t\t\tthrow Error{MSG(err) << \"Modpack \" << modpack_id << \" depends on \" << dep_id << \" which is not requested\"};\n\t\t\t}\n\t\t}\n\n\t\t// Check if there are no conflicts\n\t\tfor (const auto &conflict_id : modpack.conflicts) {\n\t\t\tif (requested_modpacks.count(conflict_id)) {\n\t\t\t\tthrow Error{MSG(err) << \"Modpack \" << modpack_id << \" conflicts with \" << conflict_id};\n\t\t\t}\n\t\t}\n\t}\n\n\tthis->load_order = load_order;\n}", "CodeBleu_score": 74.98345527189306}, {"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\t\t// Create a set of requested modpacks from the load order\n\tstd::unordered_set<std::string> requested_modpacks(load_order.begin(), load_order.end());\n\n\t// Check if each modpack in the load order is available and verify that all dependencies are satisfied and no conflicts exist\n\tfor (const auto &modpack_id : load_order) {\n\t\tauto &modpack = this->available.at(modpack_id);\n\n\t\t// Check if modpack is available\n\t\tif (modpack.available) {\n\t\t\tlog::log(MSG(dbg) << \"Modpack is available: \" << modpack_id);\n\t\t}\n\t\telse {\n\t\t\tthrow Error(MSG(err) << \"Modpack is not available: \" << modpack_id);\n\t\t}\n\n\t\t// Check if all dependencies are satisfied\n\t\tfor (const auto &dependency : modpack.dependencies) {\n\t\t\tif (requested_modpacks.find(dependency) == requested_modpacks.end()) {\n\t\t\t\tthrow Error(MSG(err) << \"Modpack \" << modpack_id << \" has unsatisfied dependency: \" << dependency);\n\t\t\t}\n\t\t}\n\n\t\t// Check if no conflicts exist\n\t\tfor (const auto &conflict : modpack.conflicts) {\n\t\t\tif (requested_modpacks.find(conflict) != requested_modpacks.end()) {\n\t\t\t\tthrow Error(MSG(err) << \"Modpack \" << modpack_id << \" conflicts with: \" << conflict);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Update the load order with the provided list\n\tthis->load_order = load_order;\n}", "CodeBleu_score": 66.69775722709419}]}
{"instance_id": "103e298ff430", "generation_result": [{"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\t\tif (not this->available) {\n\t\tlog::log(MSG(err) << \"AudioManager is not available\");\n\t\treturn;\n\t}\n\n\tfor (const auto &sound_file : sound_files) {\n\t\tstd::string key = sound_file.category + std::to_string(sound_file.id);\n\n\t\tif (this->resources.find(key) != this->resources.end()) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tauto resource = std::make_shared<SoundImpl>(sound_file.path, sound_file.category, sound_file.id);\n\n\t\tthis->resources.insert({key, resource});\n\t}\n}", "CodeBleu_score": 68.0897076911198}, {"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\t\tif (not this->available) {\n\t\tlog::log(MSG(warn) << \\\"AudioManager is not available, cannot load resources\\\");\n\t\treturn;\n\t}\n\n\t// create unique keys for each sound file\n\tstd::vector<std::string> keys;\n\tfor (const auto &sound_file : sound_files) {\n\t\tstd::stringstream key;\n\t\tkey << sound_file.category << \\\"_\\\" << sound_file.id;\n\t\tkeys.push_back(key.str());\n\t}\n\n\t// check if the sound is already loaded\n\tfor (size_t i = 0; i < keys.size(); i++) {\n\t\tconst std::string &key = keys[i];\n\t\tif (this->resources.find(key) != this->resources.end()) {\n\t\t\tlog::log(MSG(info) << \\\"Sound already loaded: \\\" << sound_files[i].filename);\n\t\t\tcontinue;\n\t\t}\n\n\t\t// create the resource\n\t\tstd::shared_ptr<SoundImpl> sound = std::make_shared<SoundImpl>(sound_files[i].filename);\n\t\tif (not sound->is_valid()) {\n\t\t\tlog::log(MSG(err) << \\\"Failed to load sound: \\\" << sound_files[i].filename);\n\t\t\tcontinue;\n\t\t}\n\n\t\t// insert the resource into the map\n\t\tthis->resources.insert({key, sound});\n\t}\n}", "CodeBleu_score": 53.99426358247831}, {"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\t\tif (not this->available) {\n\t\tlog::log(MSG(err) << \"AudioManager is not available, cannot load resources.\");\n\t\treturn;\n\t}\n\n\tfor (auto &sound_file : sound_files) {\n\t\tauto key = sound_file.category * 1000 + sound_file.id;\n\t\tif (this->resources.find(key) != this->resources.end()) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tauto sound = std::make_shared<SoundImpl>(sound_file.path);\n\t\tif (not sound->is_valid()) {\n\t\t\tlog::log(MSG(err) << \"Could not load sound file: \" << sound_file.path);\n\t\t\tcontinue;\n\t\t}\n\n\t\tthis->resources.insert({key, sound});\n\t}\n}", "CodeBleu_score": 62.44946091405068}]}
{"instance_id": "700caeffaaac", "generation_result": [{"code": "Sound AudioManager::get_sound(category_t category, int id){\n\t\tif (not this->available) {\n\t\tthrow Error{MSG(err) << \"AudioManager is not available\"};\n\t}\n\n\tauto key = std::make_tuple(category, id);\n\n\tif (this->resources.find(key) == std::end(this->resources)) {\n\t\tthrow Error{MSG(err) << \"Sound resource does not exist\"};\n\t}\n\n\tauto sound_impl = std::make_shared<SoundImpl>(this->resources.at(key));\n\treturn Sound{this, sound_impl};\n}", "CodeBleu_score": 51.373396811874606}, {"code": "Sound AudioManager::get_sound(category_t category, int id){\n\t\tif (not this->available) {\n\t\tthrow Error{MSG(err) << \"Audio manager is not available\"};\n\t}\n\n\tauto key = std::make_tuple(category, id);\n\tauto it = this->resources.find(key);\n\tif (it == std::end(this->resources)) {\n\t\tthrow Error{MSG(err) << \"Sound resource does not exist\"};\n\t}\n\n\tauto sound_impl = std::make_shared<SoundImpl>(this, it->second);\n\treturn Sound{this, sound_impl};\n}", "CodeBleu_score": 54.013008926486094}, {"code": "Sound AudioManager::get_sound(category_t category, int id){\n\t\tif (not this->available) {\n\t\tthrow Error{MSG(err) << \"AudioManager is not available.\"};\n\t}\n\n\tauto key = std::make_tuple(category, id);\n\tauto it = this->resources.find(key);\n\n\tif (it == std::end(this->resources)) {\n\t\tthrow Error{MSG(err) << \"Sound resource does not exist.\"};\n\t}\n\n\tauto sound_impl = std::make_shared<SoundImpl>(this, it->second);\n\treturn Sound{this, sound_impl};\n}", "CodeBleu_score": 53.8377407880029}]}
{"instance_id": "2a0c1f0acd9f", "generation_result": [{"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\t\tauto &playing_list = this->playing_sounds.at(sound->category);\n\tplaying_list.push_back(sound);\n}", "CodeBleu_score": 51.84886799614515}, {"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\t\tauto &playing_list = this->playing_sounds.at(sound->category);\n\tplaying_list.push_back(sound);\n}", "CodeBleu_score": 51.84886799614515}, {"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\t\t// TODO: check if sound already exists in playing list\n\tauto category = sound->get_category();\n\tauto &playing_list = this->playing_sounds.at(category);\n\tplaying_list.push_back(sound);\n}", "CodeBleu_score": 84.91299099038511}]}
{"instance_id": "2c5f1f9b99b3", "generation_result": [{"code": "void Clock::update_time(){\n\t\tif (this->state == ClockState::RUNNING) {\n\t\tstd::unique_lock lock{this->mutex};\n\n\t\t// Sleep if no time has passed\n\t\tauto now = simclock_t::now();\n\t\tauto elapsed = std::chrono::duration_cast<simclock_t::duration>(now - this->last_check);\n\t\tif (elapsed.count() == 0) {\n\t\t\tstd::this_thread::sleep_for(std::chrono::milliseconds(1));\n\t\t\treturn;\n\n\t\telapsed = std::chrono::duration_cast<simclock_t::duration>(simclock_t::now() - this->last_check);\n\n\t\t// Update the simulated time if the elapsed time exceeds the maximum tick time\n\t\tif (elapsed > this->max_tick_time) {\n\t\t\tthis->sim_time += this->max_tick_time * this->speed;\n\t\t\tthis->sim_real_time += this->max_tick_time.count() * this->speed;\n\t\t} else {\n\t\t\tthis->sim_time += elapsed * this->speed;\n\t\t\tthis->sim_real_time += elapsed.count() * this->speed;\n\t\t}\n\n\t\tthis->last_check = now;\n\t}\n\t}\n}", "CodeBleu_score": 72.07553897076382}, {"code": "void Clock::update_time(){\n\t\tstd::unique_lock lock{this->mutex};\n\n\t// sleep briefly to prevent stalling\n\tstd::this_thread::sleep_for(std::chrono::milliseconds(1));\n\n\t// get the time since the last check\n\tsimclock_t now = simclock_t::now();\n\tstd::chrono::milliseconds elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(now - this->last_check);\n\n\t// update the time if enough time has passed\n\tif (elapsed.count() > this->max_tick_time) {\n\t\tthis->sim_time += this->max_tick_time * this->speed;\n\t\tthis->sim_real_time += this->max_tick_time * this->speed;\n\t\tthis->last_check = now;\n\t} else {\n\t\tthis->sim_time += elapsed.count() * this->speed;\n\t\tthis->sim_real_time += elapsed.count() * this->speed;\n\t\tthis->last_check = now;\n\t}\n}", "CodeBleu_score": 66.09269096682875}, {"code": "void Clock::update_time(){\n\t\tstd::unique_lock lock{this->mutex};\n\n\tsimclock_t now = simclock_t::now();\n\tsimclock_t::duration elapsed = now - this->last_check;\n\n\tif (elapsed < simclock_t::duration{0}) {\n\t\tstd::this_thread::sleep_for(simclock_t::duration{1});\n\t\treturn;\n\t}\n\n\tfloat delta = elapsed.count() * this->speed;\n\n\tif (delta > this->max_tick_time) {\n\t\tdelta = this->max_tick_time;\n\t}\n\n\tthis->sim_time += delta;\n\tthis->sim_real_time += delta;\n\tthis->last_check = now;\n}", "CodeBleu_score": 46.7038800037202}]}
{"instance_id": "c660f2541c89", "generation_result": [{"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\t\tfloat y_delta = scene_pos[1] - this->scene_pos[1];\n\tfloat xz_distance = std::sqrt(std::pow(scene_pos[0] - this->scene_pos[0], 2) + std::pow(scene_pos[2] - this->scene_pos[2], 2));\n\tfloat new_x = scene_pos[0] - xz_distance * std::cos(std::atan2(y_delta, xz_distance));\n\tfloat new_z = scene_pos[2] - xz_distance * std::sin(std::atan2(y_delta, xz_distance));\n\n\tthis->move_to(Eigen::Vector3f(new_x, this->scene_pos[1], new_z));\n}", "CodeBleu_score": 47.41882707086243}, {"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\t\tfloat y_delta = this->scene_pos[1] - scene_pos[1];\n\tfloat xz_distance = std::sqrt(std::pow(scene_pos[0] - this->scene_pos[0], 2) + std::pow(scene_pos[2] - this->scene_pos[2], 2));\n\n\tfloat new_x = scene_pos[0] + xz_distance * std::cos(std::atan(y_delta / xz_distance));\n\tfloat new_z = scene_pos[2] + xz_distance * std::sin(std::atan(y_delta / xz_distance));\n\n\tthis->move_to_scene(Eigen::Vector3f(new_x, this->scene_pos[1], new_z));\n}", "CodeBleu_score": 51.45710095355367}, {"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\t\tthis->scene_pos[0] = scene_pos[0];\n\tthis->scene_pos[1] = scene_pos[1];\n\tthis->scene_pos[2] = scene_pos[2];\n\n\tthis->move_to_scene(this->scene_pos);\n}", "CodeBleu_score": 25.590535805452152}]}
{"instance_id": "3b2d44963495", "generation_result": [{"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\t    if (projectFilesController()->isUrlSupported(url)) {\n        return DragTarget::ProjectFile;\n    }\n\n    if (url.isLocalFile()) {\n        const QString& filePath = url.toLocalFile();\n        const io::path_t path = filePath.toStdString();\n\n        if (io::is_exist(path)) {\n            const io::path_t ext = io::extension(path);\n\n            if (ext == soundfont::sfzExt) {\n                return DragTarget::SoundFont;\n            }\n\n            if (extensionInstaller()->isSupported(ext)) {\n                return DragTarget::Extension;\n            }\n        }\n    }\n\n    return DragTarget::Unknown;\n}", "CodeBleu_score": 69.85157520632403}, {"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\t    if (projectFilesController()->isUrlSupported(url)) {\n        return DragTarget::ProjectFile;\n    }\n\n    if (url.isLocalFile()) {\n        const io::path_t filePath = url.toLocalFile();\n\n        if (io::is_sf2_file(filePath)) {\n            return DragTarget::SoundFont;\n        }\n\n        if (extensionInstaller()->isSupportedFile(filePath)) {\n            return DragTarget::Extension;\n        }\n    }\n\n    return DragTarget::Unknown;\n}", "CodeBleu_score": 80.13297070554964}, {"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\t    if (projectFilesController()->isUrlSupported(url)) {\n        return DragTarget::ProjectFile;\n    }\n\n    if (url.isLocalFile()) {\n        const io::path_t path = url.toLocalFile();\n        const io::path_t ext = io::filename_to_extension(path);\n\n        if (ext == \\\"sf2\\\") {\n            return DragTarget::SoundFont;\n        }\n\n        if (extensionInstaller()->isSupported(ext)) {\n            return DragTarget::Extension;\n        }\n    }\n\n    return DragTarget::Unknown;\n}", "CodeBleu_score": 73.21432385865133}]}
{"instance_id": "81a3cd2e265e", "generation_result": [{"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\t    io::paths_t projects = configuration()->sessionProjectsPaths();\n    if (projects.empty()) {\n        return;\n    }\n\n    projects.removeOne(projectPath);\n    configuration()->setSessionProjectsPaths(projects);\n}", "CodeBleu_score": 73.1469037798093}, {"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\t    io::paths_t projects = configuration()->sessionProjectsPaths();\n    if (!projects.empty()) {\n        projects.removeAll(projectPath);\n        configuration()->setSessionProjectsPaths(projects);\n    }\n}", "CodeBleu_score": 63.10897946798262}, {"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\t    io::paths_t projects = configuration()->sessionProjectsPaths();\n\n    if (projects.empty()) {\n        return;\n    }\n\n    auto it = std::find(projects.begin(), projects.end(), projectPath);\n    if (it != projects.end()) {\n        projects.erase(it);\n        configuration()->setSessionProjectsPaths(projects);\n    }\n}", "CodeBleu_score": 83.45156502747236}]}
{"instance_id": "98a514c0b62f", "generation_result": [{"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\t    QVariantList result;\n\n    for (const ThemeInfo& theme: allThemes()) {\n        if (theme.codeKey == HIGH_CONTRAST_WHITE_THEME_CODE || theme.codeKey == HIGH_CONTRAST_BLACK_THEME_CODE) {\n            result << ThemeConverter::toMap(theme);\n        }\n    }\n\n    return result;\n}", "CodeBleu_score": 96.00312735625933}, {"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\t    QVariantList result;\n\n    for (const ThemeInfo& theme: allThemes()) {\n        if (theme.codeKey == HIGH_CONTRAST_WHITE_THEME_CODE || theme.codeKey == HIGH_CONTRAST_BLACK_THEME_CODE) {\n            result << ThemeConverter::toMap(theme);\n        }\n    }\n\n    return result;\n}", "CodeBleu_score": 96.00312735625933}, {"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\t    QVariantList result;\n\n    for (const ThemeInfo& theme: allThemes()) {\n        if (theme.codeKey == HIGH_CONTRAST_WHITE_THEME_CODE || theme.codeKey == HIGH_CONTRAST_BLACK_THEME_CODE) {\n            result << ThemeConverter::toMap(theme);\n        }\\\n    }\\\n\n    return result;\n}", "CodeBleu_score": 92.20853162338149}]}
{"instance_id": "ceff09bc116b", "generation_result": [{"code": "QVariantList PreferencesModel::availablePages() const{\n\t    QVariantList result;\n\n    auto childPages = [&result](PreferencePageItem* parentItem) {\n        for (PreferencePageItem* childItem : parentItem->childrenItems()) {\n            QVariantMap page;\n            page[\"id\"] = childItem->id();\n            page[\"path\"] = childItem->path();\n            result.append(page);\n\n            childPages(childItem);\n        }\n    };\n\n    childPages(m_rootItem);\n\n    return result;\n}", "CodeBleu_score": 40.72649175145826}, {"code": "QVariantList PreferencesModel::availablePages() const{\n\t    QVariantList result;\n\n\n    // Recursive lambda function to traverse through the child items of a preference page item\n\n    auto childPages = [&result](PreferencePageItem* parent) {\n\n        for (PreferencePageItem* child : parent->childrenItems()) {\n\n            QVariantMap page;\n\n            page[\\\"id\\\"] = child->id();\n\n            page[\\\"path\\\"] = child->path();\n\n            result << page;\n\n            childPages(child);\n\n        }\n\n    };\n\n\n    // Call the recursive function on the root item\n\n    childPages(m_rootItem);\n\n\n    return result;\n\n}", "CodeBleu_score": 36.41360905990159}, {"code": "QVariantList PreferencesModel::availablePages() const{\n\t    QVariantList result;\n\n    auto childPages = [&result](PreferencePageItem* item) {\n        for (PreferencePageItem* child: item->childrenItems()) {\n            QVariantMap page;\n            page[\\\"id\\\"] = child->id();\n            page[\\\"path\\\"] = child->path();\n            result << page;\n            childPages(child);\n        }\n    };\n\n    childPages(m_rootItem);\n    return result;\n}", "CodeBleu_score": 36.553478442304495}]}
{"instance_id": "88e5ca72d3e0", "generation_result": [{"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\t    MenuItemList items;\n    QStringList recentFiles = recentScores()->recentFiles();\n    for (const QString& file : recentFiles) {\n        MenuItem* item = new MenuItem;\n        item->actionCode = ActionCode::FILE_OPEN;\n        item->displayName = recentScores()->displayName(file);\n        item->id = item->displayName.toLower().replace(QRegularExpression(QStringLiteral(\"[^a-zA-Z0-9]\")), QStringLiteral(\"-\")) + QStringLiteral(\"-recent-score\");\n        item->enabled = true;\n        item->selectable = true;\n        item->setArgs({ file, recentScores()->displayName(file) });\n        if (recentScores()->isCloudProject(file)) {\n            item->icon = QStringLiteral(\":/icons/cloud.svg\");\n        }\n        items << item;\n    }\n    return items;\n}", "CodeBleu_score": 50.67309428563185}, {"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\t    MenuItemList items;\n    QStringList recentFiles = recentScores();\n\n    for (const QString& file : recentFiles) {\n        QString displayName = QFileInfo(file).fileName();\n\n        MenuItem* item = new MenuItem(MenuItemRole::FileOpenRole, displayName, \"file-open\", \"\");\n        item->setId(QString(\"recent-%1\").arg(file));\n        item->setEnabled(true);\n        item->setSelectable(true);\n        item->setArguments({ file, displayName });\n\n        if (isCloudProject(file)) {\n            item->setIcon(IconCode::Cloud);\n        }\n\n        items.push_back(item);\n    }\n\n    return items;\n}", "CodeBleu_score": 39.92635053234227}, {"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\t    MenuItemList recentScoresItems;\n\n    RecentFilesList recentFiles = recentFilesManager()->recentFiles();\n    for (const RecentFile& recentFile : recentFiles) {\n        MenuItem* recentScoreItem = makeMenuItem(\"file-open\");\n        recentScoreItem->setActionCode(\"file-open\");\n        recentScoreItem->setDisplayName(recentFile.displayName);\n        recentScoreItem->setId(recentFile.url);\n        recentScoreItem->setSelectable(true);\n        recentScoreItem->setEnabled(true);\n        recentScoreItem->setArgs({ recentFile.url, recentFile.displayName });\n\n        if (recentFile.isCloud) {\n            recentScoreItem->setIcon(IconCode::fromTheme(QString(\"cloud\")));\n        }\n\n        recentScoresItems << recentScoreItem;\n    }\n\n    return recentScoresItems;\n}", "CodeBleu_score": 35.72642695415749}]}
{"instance_id": "855288a783a5", "generation_result": [{"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\t    if (navigationController()->isNavigationStarted()) {\n        if (menuId != navigationController()->highlightedMenuId()) {\n            navigationController()->setHighlightedMenuId(menuId);\n        }\n    } else {\n        if (!isMenuOpened()) {\n            if (byHover) {\n                saveMUNavigationSystemState();\n            } else {\n                restoreMUNavigationSystemState();\n            }\n        }\n    }\n\n    emit openMenuRequested(menuId, byHover);\n}", "CodeBleu_score": 60.72192200196665}, {"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\t    if (navigationController()->isStarted()) {\n        if (!isMenuOpened()) {\n            if (byHover) {\n                navigationController()->setHighlight(menuId);\n            } else {\n                saveMUNavigationSystemState();\n            }\n        }\n    } else {\n        if (!isMenuOpened()) {\n            restoreMUNavigationSystemState();\n        }\n    }\n\n    emit requestOpenMenu(menuId, byHover);\n}", "CodeBleu_score": 54.92089578722077}, {"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\t    if (navigationController()->isStarted() && !isMenuOpened()) {\n        if (!byHover) {\n            saveMUNavigationSystemState();\n        }\n        navigationController()->setHighlight(menuId);\n    }\n\n    emit openMenuRequested(menuId, byHover);\n}", "CodeBleu_score": 42.91668560569939}]}
{"instance_id": "d31bdc9d40b6", "generation_result": [{"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\t    ViewMode currentViewMode = notation() ? notation()->interaction()->viewMode() : ViewMode::PAGE;\n\n    QList<ViewMode> availableViewModes = { ViewMode::PAGE, ViewMode::LINE, ViewMode::SYSTEM, ViewMode::FLOAT };\n\n    for (ViewMode viewMode : availableViewModes) {\n        MenuItem* item = makeMenuItem(ALL_MODE_MAP[viewMode]);\n        UiActionState state;\n        state.enabled = notation() ? true : false;\n        state.checked = currentViewMode == viewMode;\n        item->setState(state);\n\n        if (currentViewMode == viewMode && (viewMode == ViewMode::LINE || viewMode == ViewMode::SYSTEM)) {\n            item->setAction(UiAction(TranslatableString::untranslatable(\"Continuous view\"), QString()));\n        }\n\n        if (state.checked) {\n            return QVariant::fromValue(item);\n        }\n    }\n\n    return QVariant();\n}", "CodeBleu_score": 53.54978017969941}, {"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\t    ViewMode currentViewMode = notation() ? notation()->interaction()->viewMode() : ViewMode::PAGE;\n    QList<ViewMode> availableViewModes = notation() ? notation()->interaction()->availableViewModes() : QList<ViewMode>();\n    for (ViewMode mode : availableViewModes) {\n        MenuItem* item = makeMenuItem(ALL_MODE_MAP.value(mode));\n        UiActionState state;\n        state.enabled = notation() ? true : false;\n        state.checked = currentViewMode == mode;\n        item->setState(state);\n        if (mode == ViewMode::LINE || mode == ViewMode::SYSTEM) {\n            item->setTitle(muse::TranslatableString::untranslatable(\"Continuous view\"));\n        }\n        if (item->state().checked) {\n            return QVariant::fromValue(item);\n        }\n    }\n    return QVariant();\n}", "CodeBleu_score": 53.75355274814155}, {"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\t    ViewMode viewMode = notation() ? notation()->interaction()->viewMode() : ViewMode::PAGE;\n\n    for (const ViewMode& mode : ALL_MODE_MAP.keys()) {\n        if (viewMode == mode) {\n            MenuItem* item = makeMenuItem(ALL_MODE_MAP[mode]);\n            UiAction action = item->action();\n            action.title = TranslatableString::untranslatable(viewMode == ViewMode::LINE || viewMode == ViewMode::SYSTEM ?\n                                                             QString(\"%1 %2\").arg(TranslatableString(\"view-mode\", \"View mode:\"),\n                                                                                 TranslatableString(\"continuous\", \"Continuous\")) :\n                                                             action.title);\n            item->setAction(action);\n            return QVariant::fromValue(item);\n        }\n    }\n\n    return QVariant();\n}", "CodeBleu_score": 58.00113001035058}]}
{"instance_id": "f161c1b938c8", "generation_result": [{"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\t    if (!notation || !notation->score()) {\n        return make_ret(Ret::Code::UnknownError);\n    }\n\n    QBuffer buffer;\n    buffer.open(QIODevice::WriteOnly);\n\n    if (!Braille::write(notation->score(), buffer)) {\n        return make_ret(Ret::Code::UnknownError);\n    }\n\n    QByteArray data = buffer.data();\n    if (destinationDevice.write(data) != data.size()) {\n        return make_ret(Ret::Code::UnknownError);\n    }\n\n    return Ret(Ret::Code::Ok);\n}", "CodeBleu_score": 52.04141526488466}, {"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\t    if (!notation) {\n        LOGE() << \"BrailleWriter::write: Notation is null\";\n        return make_ret(Ret::Code::UnknownError);\n    }\n\n    if (!notation->score()) {\n        LOGE() << \"BrailleWriter::write: Score is null\";\n        return make_ret(Ret::Code::UnknownError);\n    }\n\n    QBuffer buffer;\n    buffer.open(QIODevice::WriteOnly);\n\n    if (!Braille::writeToBuffer(notation->score(), buffer)) {\n        LOGE() << \"BrailleWriter::write: Failed to write Braille to buffer\";\n        return make_ret(Ret::Code::UnknownError);\n    }\n\n    if (!destinationDevice.write(buffer.data())) {\n        LOGE() << \"BrailleWriter::write: Failed to write to device\";\n        return make_ret(Ret::Code::UnknownError);\n    }\n\n    return make_ret(Ret::Code::Ok);\n}", "CodeBleu_score": 38.63747899274489}, {"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\t    IF_ASSERT_FAILED(notation) {\n        return make_ret(Ret::Code::UnknownError);\n    }\n\n    IF_ASSERT_FAILED(notation->isValid()) {\n        return make_ret(Ret::Code::UnknownError);\n    }\n\n    IF_ASSERT_FAILED(notation->score()->isValid()) {\n        return make_ret(Ret::Code::UnknownError);\n    }\n\n    QBuffer buffer;\n    buffer.open(QIODevice::WriteOnly);\n\n    if (!Braille::write(&buffer, notation->score())) {\n        return make_ret(Ret::Code::UnknownError);\n    }\n\n    QByteArray data = buffer.data();\n    if (destinationDevice.write(data) != data.size()) {\n        return make_ret(Ret::Code::UnknownError);\n    }\n\n    return make_ret(Ret::Code::Ok);\n}", "CodeBleu_score": 57.41854953231904}]}
{"instance_id": "192825616947", "generation_result": [{"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\t    std::string ret = braille_translate(table_name, txt.substr(0, 256));\n    if (ret.empty()) {\n        return ret;\n    }\n    for (int i = 256; i < txt.length(); i += 256) {\n        std::string line = txt.substr(i, 256);\n        ret += \\\" \\\";\n        ret += braille_translate(table_name, line);\n    }\n    return ret;\n}", "CodeBleu_score": 46.696086190172295}, {"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\t    std::vector<std::string> lines = split_string(txt, 256);\n    if (lines.empty()) {\n        return std::string();\n    }\n\n    std::string ret = braille_translate(table_name, lines[0]);\n    for (int i = 1; i < lines.size(); i++) {\n        ret += \\\" \\\";\n        ret += braille_translate(table_name, lines[i]);\n    }\n\n    return ret;\n}", "CodeBleu_score": 65.10651442173625}, {"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\t  uint8_t* outputbuf = nullptr;\n  size_t outlen = 0;\n  widechar inbuf[MAXSTRING];\n  widechar transbuf[MAXSTRING];\n  int inlen = 0;\n  int translen = 0;\n\n  inlen = _lou_extParseChars(txt.c_str(), inbuf);\n\n  translen = MAXSTRING;\n  lou_translateString(table_name, inbuf, &inlen, transbuf, &translen, NULL, NULL, 0);\n\n#ifdef WIDECHARS_ARE_UCS4\n  //outputbuf = (uint8_t *) malloc (translen * sizeof(widechar) * sizeof (uint8_t));\n  outputbuf = u32_to_u8(transbuf, translen, NULL, &outlen);\n#else\n  outputbuf = u16_to_u8(transbuf, translen, NULL, &outlen);\n#endif\n\n  if (!outputbuf) {\n    return std::string();\n  }\n\n  std::string ret = std::string(outputbuf, outputbuf + outlen);\n  free(outputbuf);\n\n  return ret;\n}", "CodeBleu_score": 39.98620634496459}]}
{"instance_id": "9cfd1739fffa", "generation_result": [{"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\t    auto ent = std::make_shared<ProxyEntity>();\n    if (!ent->Load(jsonPath)) {\n        return nullptr;\n    }\n    if (!ent->bean || ent->bean->type == \\\"\\\") {\n        return nullptr;\n    }\n    if (ent->bean->version == -114514) {\n        return nullptr;\n    }\n    ent->loadControl = true;\n    ent->fn = jsonPath;\n    ent->Load();\n    return ent;\n}", "CodeBleu_score": 41.23345955618853}, {"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\t    auto ent = std::make_shared<ProxyEntity>();\n    ent->fn = jsonPath;\n    if (!ent->Load()) return nullptr;\n    if (ent->bean == nullptr) return nullptr;\n    if (ent->bean->version == -114514) return nullptr;\n    ent->loadControl = true;\n    return ent;\n}", "CodeBleu_score": 31.411230848900733}, {"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\t    auto ent = std::make_shared<ProxyEntity>();\n    if (!ent->Load(jsonPath)) {\n        return nullptr;\n    }\n    if (ent->bean == nullptr) {\n        return nullptr;\n    }\n    if (ent->bean->type != EntityType::Proxy) {\n        return nullptr;\n    }\n    if (ent->bean->version != ProfileManager::entity_version) {\n        return nullptr;\n    }\n    ent->fn = jsonPath;\n    ent->Load();\n    return ent;\n}", "CodeBleu_score": 39.35100842831922}]}
{"instance_id": "d2d7a08c10d4", "generation_result": [{"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\t", "CodeBleu_score": 2.248987845934587}, {"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\t    auto url = QUrl(link);\n    if (!url.isValid()) return false;\n\n    name = url.fragment(QUrl::FullyDecoded);\n    serverAddress = url.host();\n    serverPort = url.port();\n    username = url.userName();\n    password = url.password();\n\n    return !(username.isEmpty() || password.isEmpty() || serverAddress.isEmpty());\n}", "CodeBleu_score": 73.01448511145645}, {"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\t    auto url = QUrl(link);\n    if (!url.isValid()) return false;\n    auto protocol = url.scheme();\n    if (protocol != \\\"https\\\" && protocol != \\\"quic\\\") return false;\n    name = url.fragment(QUrl::FullyDecoded);\n    serverAddress = url.host();\n    serverPort = url.port();\n    username = url.userName();\n    password = url.password();\n    return !(username.isEmpty() || password.isEmpty() || serverAddress.isEmpty());\n}", "CodeBleu_score": 85.73806167921946}]}
{"instance_id": "2f666eafb5f4", "generation_result": [{"code": "bool JsonStore::Save(){\n\t    if (callback_before_save != nullptr) callback_before_save();\n    if (!save_control_enabled) return false;\n\n    QByteArray bytes = ToJsonBytes();\n    if (last_saved_content == bytes) return false;\n\n    QFile file(save_control_file);\n    if (!file.open(QIODevice::WriteOnly)) return false;\n    file.write(bytes);\n    file.close();\n\n    last_saved_content = bytes;\n    return true;\n}", "CodeBleu_score": 56.08044114565367}, {"code": "bool JsonStore::Save(){\n\t    if (callback_before_save != nullptr) callback_before_save();\n    if (!save_control_enabled) return false;\n\n    auto json = ToJsonBytes();\n    if (last_saved_content == json) return false;\n\n    QFile file(save_control_file);\n    if (!file.open(QFile::WriteOnly)) return false;\n    file.write(json);\n    file.close();\n\n    last_saved_content = json;\n    return true;\n}", "CodeBleu_score": 58.069139050990024}, {"code": "bool JsonStore::Save(){\n\t    if (callback_before_save != nullptr && !callback_before_save()) return false;\n    auto bytes = ToJsonBytes();\n    if (last_saved_content == bytes) return false;\n    last_saved_content = bytes;\n\n    QFile file(path);\n    if (!file.open(QIODevice::WriteOnly)) return false;\n    file.write(bytes);\n    file.close();\n\n    return true;\n}", "CodeBleu_score": 51.84957672758566}]}
{"instance_id": "1fb63372333c", "generation_result": [{"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\t    auto *timer = new QTimer();\n    timer->setSingleShot(true);\n    QObject::connect(timer, &QTimer::timeout, [=]() {\n        callback();\n        timer->deleteLater();\n    });\n    timer->moveToThread(obj == nullptr ? mainwindow->thread() : obj->thread());\n    timer->setInterval(timeout);\n    timer->start();\n}", "CodeBleu_score": 61.46556852874557}, {"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\t    auto *timer = new QTimer();\n    timer->setSingleShot(true);\n    QObject::connect(timer, &QTimer::timeout, [=]() {\n        callback();\n        timer->deleteLater();\n    });\n    timer->moveToThread(obj == nullptr ? mainwindow->thread() : obj->thread());\n    timer->start(timeout);\n}", "CodeBleu_score": 61.81237954818477}, {"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\t    auto *timer = new QTimer();\n    timer->moveToThread(obj == nullptr ? mainwindow->thread() : obj->thread());\n    timer->setSingleShot(true);\n    QObject::connect(timer, &QTimer::timeout, [=]() {\n        // main thread\n        callback();\n        timer->deleteLater();\n    });\n    QMetaObject::invokeMethod(timer, \"start\", Qt::QueuedConnection, Q_ARG(int, timeout));\n}", "CodeBleu_score": 57.335438310097665}]}
{"instance_id": "150b7aeeeb35", "generation_result": [{"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\t    statusCode = networkReply->error();\n    if (statusCode != QNetworkReply::NoError) {\n        return {};\n    }\n\n    QByteArray data = networkReply->readAll();\n    if (data.size() < GrpcMessageSizeHeaderSize) {\n        statusCode = QNetworkReply::ProtocolUnknownError;\n        return {};\n    }\n\n    int msgSize = qFromBigEndian(*reinterpret_cast<const int *>(data.data() + 1));\n    if (data.size() < GrpcMessageSizeHeaderSize + msgSize) {\n        statusCode = QNetworkReply::ProtocolUnknownError;\n        return {};\n    }\n\n    data = data.mid(GrpcMessageSizeHeaderSize, msgSize);\n\n    if (networkReply->hasRawHeader(GrpcStatusHeader)) {\n        QByteArray statusHeader = networkReply->rawHeader(GrpcStatusHeader);\n        if (statusHeader == QByteArray{\\\"0\\\"}) {\n            statusCode = QNetworkReply::NoError;\n        } else {\n            QByteArray statusMessage = networkReply->rawHeader(GrpcStatusMessage);\n            qWarning() << \\\"gRPC error: \\\" << statusMessage;\n            statusCode = QNetworkReply::ProtocolUnknownError;\n            return {};\n        }\n    }\n\n    return data;\n}", "CodeBleu_score": 52.306261091040305}, {"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\t    statusCode = networkReply->error();\n    if (statusCode != QNetworkReply::NoError) {\n        return {};\n    }\n\n    QByteArray data = networkReply->readAll();\n    if (data.size() < GrpcMessageSizeHeaderSize) {\n        return {};\n    }\n\n    int msgSize = qFromBigEndian(*reinterpret_cast<const int *>(data.data() + 1));\n    if (data.size() < msgSize + GrpcMessageSizeHeaderSize) {\n        return {};\n    }\n\n    QByteArray msg = data.mid(GrpcMessageSizeHeaderSize, msgSize);\n    if (networkReply->hasRawHeader(GrpcStatusHeader)) {\n        QString statusStr = networkReply->rawHeader(GrpcStatusHeader);\n        int status = statusStr.toInt();\n        if (status != 0) {\n            QString statusMessage = networkReply->rawHeader(GrpcStatusMessage);\n            qWarning() << \"gRPC error: \" << status << \" - \" << statusMessage;\n            statusCode = QNetworkReply::ProtocolUnknownError;\n            return {};\n        }\n    }\n\n    statusCode = QNetworkReply::NoError;\n    return msg;\n}", "CodeBleu_score": 55.78830343856788}, {"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\t    statusCode = networkReply->error();\n    if (statusCode != QNetworkReply::NoError) {\n        return {};\n    }\n\n    // check for gRPC errors\n    QByteArray grpcStatus = networkReply->rawHeader(GrpcStatusHeader);\n    QByteArray grpcMessage = networkReply->rawHeader(GrpcStatusMessage);\n    if (!grpcStatus.isEmpty()) {\n        qWarning() << \"gRPC error:\" << grpcStatus << grpcMessage;\n        statusCode = QNetworkReply::ProtocolUnknownError;\n        return {};\n    }\n\n    // read response data\n    QByteArray data = networkReply->readAll();\n    if (data.size() < GrpcMessageSizeHeaderSize) {\n        qWarning() << \"gRPC error: invalid response size:\" << data.size();\n        statusCode = QNetworkReply::ProtocolUnknownError;\n        return {};\n    }\n\n    int size = qFromBigEndian(*reinterpret_cast<const int *>(data.data() + 1));\n    if (data.size() < size + GrpcMessageSizeHeaderSize) {\n        qWarning() << \"gRPC error: invalid response size:\" << data.size() << size;\n        statusCode = QNetworkReply::ProtocolUnknownError;\n        return {};\n    }\n\n    statusCode = QNetworkReply::NoError;\n    return data.mid(GrpcMessageSizeHeaderSize, size);\n}", "CodeBleu_score": 52.18158717507326}]}
{"instance_id": "ecaaeadcf213", "generation_result": [{"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t    libcore::LoadConfigResp reply;\n    auto status = default_grpc_channel->Call(\"Start\", request, &reply, 500);\n    if (status == QNetworkReply::NetworkError::NoError) {\n        *rpcOK = true;\n        return reply.error();\n    }\n    NOT_OK\n}", "CodeBleu_score": 67.24077336282656}, {"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t    libcore::StartResp reply;\n    auto status = default_grpc_channel->Call(\"Start\", request, &reply, 500);\n    if (status == QNetworkReply::NetworkError::NoError) {\n        *rpcOK = true;\n        return QString::fromStdString(reply.error());\n    }\n    NOT_OK\n}", "CodeBleu_score": 67.39141727597138}, {"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t    libcore::LoadConfigResp reply;\n    auto status = default_grpc_channel->Call(\"Start\", request, &reply, 500);\n    if (status != QNetworkReply::NetworkError::NoError) {\n        NOT_OK\n    }\n    *rpcOK = true;\n    return QString::fromStdString(reply.error());\n}", "CodeBleu_score": 65.44111285242754}]}
{"instance_id": "7f3365d1207f", "generation_result": [{"code": "void DialogBasicSettings::refresh_auth(){\n\t    ui->inbound_auth->clear();\n    if (NekoGui::dataStore->inbound_auth.isEmpty()) {\n        ui->inbound_auth->setIcon(QIcon(\":/res/unlock.png\"));\n    } else {\n        ui->inbound_auth->setIcon(QIcon(\":/res/lock.png\"));\n    }\n}", "CodeBleu_score": 58.02466809118425}, {"code": "void DialogBasicSettings::refresh_auth(){\n\t    ui->inbound_auth->setText(\\\"\\\");\n    if (NekoGui::dataStore->inbound_auth) {\n        ui->inbound_auth->setPixmap(QPixmap(\\\":/icons/lock.svg\\\").scaled(16, 16));\n    } else {\n        ui->inbound_auth->setPixmap(QPixmap(\\\":/icons/unlock.svg\\\").scaled(16, 16));\n    }\n}", "CodeBleu_score": 52.124134059493834}, {"code": "void DialogBasicSettings::refresh_auth(){\n\t    ui->inbound_auth->setText(\\\"\\\");\n    if (NekoGui::dataStore->inbound_auth) {\n        ui->inbound_auth->setPixmap(QPixmap(\\\":/icons/lock.png\\\").scaled(20, 20));\n    } else {\n        ui->inbound_auth->setPixmap(QPixmap(\\\":/icons/unlock.png\\\").scaled(20, 20));\n    }\n}", "CodeBleu_score": 52.161808442931154}]}
{"instance_id": "34f643ad7662", "generation_result": [{"code": "void DialogManageGroups::on_add_clicked(){\n\t    auto g = new Group();\n    DialogEditGroup *dialog = new DialogEditGroup(g, this);\n    dialog->exec();\n    delete dialog;\n    if (dialog->result() == QDialog::Accepted) {\n        NekoGui::profileManager->groupsTabOrder.push_back(g->id);\n        NekoGui::profileManager->groups.insert(g->id, g);\n        NekoGui::profileManager->Save();\n        auto wI = new QListWidgetItem();\n        auto w = new GroupItem(this, g, wI);\n        wI->setData(114514, g->id);\n        ui->listWidget->addItem(wI);\n        ui->listWidget->setItemWidget(wI, w);\n        emit NekoGui::profileManager->refresh_groups();\n    }\n}", "CodeBleu_score": 50.02160010474728}, {"code": "void DialogManageGroups::on_add_clicked(){\n\t    auto g = NekoGui::profileManager->CreateGroup();\n    auto d = new DialogEditGroup(g, this);\n    connect(d, &DialogEditGroup::accepted, this, [=]() {\n        NekoGui::profileManager->groupsTabOrder.push_back(g->id);\n        AddGroupToListIfExist(g->id)\n        NekoGui::profileManager->UpdateGroup(g);\n        emit refresh();\n    });\n    connect(d, &DialogEditGroup::rejected, this, [=]() {\n        NekoGui::profileManager->DeleteGroup(g->id);\n    });\n    d->exec();\n    delete d;\n}", "CodeBleu_score": 53.787445613291936}, {"code": "void DialogManageGroups::on_add_clicked(){\n\t    auto w = new DialogEditGroup(this, nullptr);\n    if (w->exec() == QDialog::Accepted) {\n        auto group = w->group;\n        NekoGui::profileManager->AddGroup(group);\n        NekoGui::profileManager->groupsTabOrder.push_back(group->GetId());\n        AddGroupToListIfExist(group->GetId())\n        NekoGui::groupUpdater->UpdateGroup(group);\n        emit refresh();\n    }\n    delete w;\n}", "CodeBleu_score": 53.24769294262306}]}
{"instance_id": "bfac51f6c4a7", "generation_result": [{"code": "void DialogManageRoutes::accept(){\n\t    // save custom route settings\n    if (ui->custom_route->isChecked()) {\n        NekoGui::dataStore->routing->custom_route = ui->custom_route_edit->toPlainText();\n    }\n    if (ui->custom_route_global->isChecked()) {\n        NekoGui::dataStore->routing->custom_route_global = ui->custom_route_global_edit->toPlainText();\n    }\n    // check if active routing has changed\n    if (NekoGui::dataStore->active_routing != active_routing) {\n        UpdateDisplayRouting(NekoGui::dataStore->routing.get(), false);\n        NekoGui::dataStore->active_routing = active_routing;\n    }\n    // save routing function name with a prefix\n    NekoGui::dataStore->routing->routing_function_name = \\\"neko_\\\" + active_routing;\n    // save routing configuration\n    NekoGui::dataStore->routing->Save();\n    // update info message to indicate a route change\n    if (NekoGui::dataStore->routing->routing_function_name != \\\"neko_builtin\\\") {\n        NekoGui::dataStore->info = \\\"route changed\\\";\n    }\n    // send message to update data store\n    NekoGui::dataStore->SendMessage(MessageType::Routing);\n    // close dialog with acceptance\n    QDialog::accept();\n}", "CodeBleu_score": 47.284079967364995}, {"code": "void DialogManageRoutes::accept(){\n\t    // Save custom route settings\n    NekoGui::dataStore->routing->custom_routes = custom_route;\n    NekoGui::dataStore->routing->custom_routes_global = custom_route_global;\n    // Check if active routing has changed\n    if (NekoGui::dataStore->active_routing != active_routing) {\n        UpdateDisplayRouting(NekoGui::dataStore->routing.get(), true);\n        NekoGui::dataStore->active_routing = active_routing;\n        NekoGui::dataStore->routing->routing_function_name = \\\"nekoray_routing_\\\" + NekoGui::dataStore->active_routing;\n\n        NekoGui::dataStore->routing->save();\n        // Update info message to indicate a route change\n        NekoGui::info_message = \\\"Route changed, please reload the config\\\";\n        // Send message to update data store\n        NekoGui::sendMessage(MessageType::UpdateDataStore);\n    }\n    // Close dialog with acceptance\n    QDialog::accept();\n}", "CodeBleu_score": 42.654073166101725}, {"code": "void DialogManageRoutes::accept(){\n\t    NekoGui::dataStore->routing = NekoGui::dataStore->routing.get();\n    //\n    if (active_routing != NekoGui::dataStore->active_routing) {\n        NekoGui::dataStore->active_routing = active_routing;\n        NekoGui::dataStore->routing.get().routing_function_name = \\\"neko_\\\" + NekoGui::dataStore->active_routing;\n\n        NekoGui::dataStore->routing.get().save();\n\n        //\n        infoMessage = \\\"route changed\\\";\n\n    }\n\n    //\n\n    UpdateDisplayRouting(NekoGui::dataStore->routing.get(), true);\n\n    //\n\n    NekoGui::dataStore->sendMessage(MessageType::RoutingUpdated);\n\n    //\n\n    QDialog::accept();\n\n}", "CodeBleu_score": 42.38718655487804}]}
{"instance_id": "ce56331f659f", "generation_result": [{"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\t    mError.clear();\n    mPath.setPath(path);\n    SharedTileset tileset;\n\n    xml.setDevice(device);\n\n    mReadingExternalTileset = true;\n    if (xml.readNextStartElement() && xml.name() == QLatin1String(\"tileset\")) {\n        tileset = readTileset();\n    } else {\n        xml.raiseError(tr(\"Not a tileset file.\"));\n    }\n    mReadingExternalTileset = false;\n\n    return tileset;\n}", "CodeBleu_score": 84.0205729506749}, {"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\t    mError.clear();\n    mPath.setPath(path);\n    SharedTileset tileset;\n\n    xml.setDevice(device);\n\n    mReadingExternalTileset = true;\n\n    if (xml.readNextStartElement() && xml.name() == QLatin1String(\"tileset\")) {\n        tileset = readTileset();\n    } else {\n        xml.raiseError(tr(\"Not a tileset file.\"));\n    }\n\n    mReadingExternalTileset = false;\n\n    return tileset;\n}", "CodeBleu_score": 84.0205729506749}, {"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\t    mError.clear();\n    mPath.setPath(path);\n    SharedTileset tileset;\n\n    xml.setDevice(device);\n    mReadingExternalTileset = true;\n    if (xml.readNextStartElement() && xml.name() == QLatin1String(\"tileset\")) {\n        tileset = readTileset();\n    } else {\n        xml.raiseError(tr(\"Not a tileset file.\"));\n    }\n\n    mReadingExternalTileset = false;\n    return tileset;\n}", "CodeBleu_score": 84.0205729506749}]}
{"instance_id": "c4502706d0af", "generation_result": [{"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\t    if (lpLibFileName && isImageBlacklistedW(lpLibFileName)) {\n        SetLastError(ERROR_ACCESS_DISABLED_BY_POLICY);\n        return nullptr;\n    }\n\n    return s_RealLoadLibraryExW(lpLibFileName, hFile, dwFlags);\n}", "CodeBleu_score": 99.73708748859264}, {"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\t    if (lpLibFileName && isImageBlacklistedW(lpLibFileName)) {\n        SetLastError(ERROR_ACCESS_DISABLED_BY_POLICY);\n        return nullptr;\n    }\n\n    return s_RealLoadLibraryExW(lpLibFileName, hFile, dwFlags);\n}", "CodeBleu_score": 99.73708748859264}, {"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\t    if (lpLibFileName && isImageBlacklistedW(lpLibFileName)) {\n        SetLastError(ERROR_ACCESS_DISABLED_BY_POLICY);\n        return nullptr;\n    }\n\n    return s_RealLoadLibraryExW(lpLibFileName, hFile, dwFlags);\n}", "CodeBleu_score": 99.73708748859264}]}
{"instance_id": "d8b05a05cfe6", "generation_result": [{"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\t    QNetworkAccessManager* httpClient = new QNetworkAccessManager(this);\n    QString cachePath = getFilePathForBoxArt(computer, appId);\n    QNetworkReply* reply = httpClient->get(QNetworkRequest(QUrl(computer->boxArtUrl + QString::number(appId) + \\\".png\\\")));\n    QEventLoop loop;\n    connect(reply, &QNetworkReply::finished, &loop, &QEventLoop::quit);\n    loop.exec();\n    QByteArray imageData = reply->readAll();\n    QFile cacheFile(cachePath);\n    if (!imageData.isNull() && cacheFile.open(QIODevice::WriteOnly)) {\n        cacheFile.write(imageData);\n        cacheFile.close();\n        return QUrl::fromLocalFile(cachePath);\n    } else {\n        if (cacheFile.size() == 0) {\n            cacheFile.remove();\n        }\n        return QUrl();\n    }\n}", "CodeBleu_score": 52.02741410368721}, {"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\t    QUrl url = QUrl(QString(computer->ip) + QString(\"/app/%1/icon\").arg(appId));\n    QFile cacheFile(getFilePathForBoxArt(computer, appId));\n    QNetworkAccessManager* client = new QNetworkAccessManager(this);\n    QNetworkReply* reply = client->get(QNetworkRequest(url));\n    QEventLoop loop;\n    connect(reply, &QNetworkReply::finished, &loop, &QEventLoop::quit);\n    loop.exec();\n    QByteArray data = reply->readAll();\n    if (data.length() > 0) {\n        QImage image;\n        image.loadFromData(data);\n        if (image.save(cacheFile.fileName())) {\n            return QUrl::fromLocalFile(cacheFile.fileName());\n        } else {\n            if (cacheFile.size() == 0) {\n                cacheFile.remove();\n            }\n        }\n    }\n    return QUrl();\n}", "CodeBleu_score": 44.596060146467785}, {"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\t    QUrl url = computer->getBoxArtUrl(appId);\n    QString cachePath = getFilePathForBoxArt(computer, appId);\n\n    QNetworkAccessManager* network = new QNetworkAccessManager(this);\n    QNetworkReply* reply = network->get(QNetworkRequest(url));\n\n    QEventLoop loop;\n    QObject::connect(reply, &QNetworkReply::finished, &loop, &QEventLoop::quit);\n    loop.exec();\n\n    QByteArray imageData = reply->readAll();\n    reply->deleteLater();\n\n    if (!imageData.isEmpty()) {\n        QFile cacheFile(cachePath);\n        if (cacheFile.open(QIODevice::WriteOnly)) {\n            cacheFile.write(imageData);\n            cacheFile.close();\n\n            return QUrl::fromLocalFile(cachePath);\n        } else {\n            if (cacheFile.size() == 0) {\n                cacheFile.remove();\n            }\n        }\n    }\n\n    return QUrl();\n}", "CodeBleu_score": 52.89995022693604}]}
{"instance_id": "40201ad62fc4", "generation_result": [{"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\t    QHostAddress bestGlobalAddressV6 = getBestGlobalAddressV6(addresses);\n    if (!bestGlobalAddressV6.isNull()) {\n        qInfo() << \\\"Discovered host at\\\" << bestGlobalAddressV6;\n\n        // Try to add the host using an IPv4 address\n        bool foundIpv4 = false;\n        for (const QHostAddress& address : addresses) {\n            if (address.protocol() == QAbstractSocket::IPv4Protocol) {\n                foundIpv4 = true;\n                break;\n            }\n        }\n\n        if (foundIpv4) {\n            addHost(computer->service().hostname(), bestGlobalAddressV6.toString(), true);\n        }\n        else {\n            // Fall back to using an IPv6 address\n            addHost(computer->service().hostname(), bestGlobalAddressV6.toString(), false);\n        }\n    }\n    else {\n        qWarning() << \\\"No global IPv6 address found for\\\" << computer->service().hostname();\n    }\n\n    // Remove the computer from the pending resolution list and schedule it for deletion\n    m_PendingResolution.removeOne(computer);\n    computer->deleteLater();\n}", "CodeBleu_score": 49.305609929615855}, {"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\t", "CodeBleu_score": 3.2626930800247504}, {"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\t    qInfo() << \\\"Discovered mDNS host:\\\" << computer->service().hostname();\n\n    QHostAddress bestGlobalAddress = getBestGlobalAddressV6(addresses);\n    if (bestGlobalAddress.isNull()) {\n        qWarning() << \\\"No global IPv6 addresses found for mDNS host\\\";\n        return;\n    }\n\n    bool ipv4Found = false;\n    for (const QHostAddress& address : addresses) {\n        if (address.protocol() == QAbstractSocket::IPv4Protocol) {\n            ipv4Found = true;\n            break;\n        }\n    }\n\n    if (ipv4Found) {\n        qInfo() << \\\"Using IPv4 address for mDNS host\\\";\n        addHost(computer->service().hostname(), bestGlobalAddress.toString(), true);\n    }\n    else {\n        qInfo() << \\\"Using IPv6 address for mDNS host\\\";\n        addHost(computer->service().hostname(), bestGlobalAddress.toString(), false);\n    }\n\n    m_PendingResolution.removeOne(computer);\n    computer->deleteLater();\n}", "CodeBleu_score": 52.52566986016905}]}
{"instance_id": "6a765d35d3a7", "generation_result": [{"code": "void ComputerManager::saveHost(NvComputer *computer){\n\t    QWriteLocker locker(&m_Lock);\n    QSettings settings;\n\n    // Read the current serialized data\n    QString serialized = computer->serialize();\n\n    // Check if the data has changed\n    if (m_LastSavedData[computer->uuid] != serialized) {\n        // Unlock the mutexes and queue a request to save the hosts\n        locker.unlock();\n        saveHosts();\n    }\n\n    // Store the current serialized data\n    m_LastSavedData[computer->uuid] = serialized;\n}", "CodeBleu_score": 53.610658261251864}, {"code": "void ComputerManager::saveHost(NvComputer *computer){\n\t    QMutexLocker locker(&m_Lock);\n    if (computer->isDirty()) {\n        if (m_DelayedFlushThread == nullptr || !m_DelayedFlushThread->isRunning()) {\n            m_DelayedFlushThread = new DelayedFlushThread(this);\n            m_DelayedFlushThread->start();\n        }\n\n        if (!m_NeedsDelayedFlush) {\n            m_NeedsDelayedFlush = true;\n            m_DelayedFlushCondition.wakeOne();\n        }\n    }\n}", "CodeBleu_score": 43.05918433077959}, {"code": "void ComputerManager::saveHost(NvComputer *computer){\n\t    QMutexLocker locker(&m_Lock);\n\n    // Check if the current serialized data differs from the last saved state\n    if (computer->getSerializedData() == m_SavedHosts[computer->uuid]) {\n        return;\n    }\n\n    // Unlock the mutexes and queue a request to save the hosts to QSettings\n    m_Lock.unlock();\n    saveHosts();\n\n    // Update the saved data\n    m_SavedHosts[computer->uuid] = computer->getSerializedData();\n}", "CodeBleu_score": 54.46070453682768}]}
{"instance_id": "01df52cf216b", "generation_result": [{"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\t    QWriteLocker writeLocker(&lock);\n\n    if (appList == newAppList) {\n        return false;\n    }\n\n    // Propagate client-side attributes such as hidden and directLaunch from the existing apps to the corresponding new apps based on their IDs\n    for (int i = 0; i < appList.size(); i++) {\n        for (int j = 0; j < newAppList.size(); j++) {\n            if (appList[i].id == newAppList[j].id) {\n                newAppList[j].hidden = appList[i].hidden;\n                newAppList[j].directLaunch = appList[i].directLaunch;\n                break;\n            }\n        }\n    }\n\n    appList = newAppList;\n    std::sort(appList.begin(), appList.end(), [](const NvApp& a, const NvApp& b) {\n        return a.name < b.name;\n    });\n\n    return true;\n}", "CodeBleu_score": 64.3809029535003}, {"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\t    QWriteLocker writeLocker(&lock);\n\n    if (newAppList == appList) {\n        return false;\n    }\n\n    // Propagate client-side attributes such as hidden and directLaunch from the existing apps to the corresponding new apps based on their IDs\n    for (int i = 0; i < appList.size(); i++) {\n        for (int j = 0; j < newAppList.size(); j++) {\n            if (appList[i].id() == newAppList[j].id()) {\n                newAppList[j].setHidden(appList[i].hidden());\n                newAppList[j].setDirectLaunch(appList[i].directLaunch());\n            }\n        }\n    }\n\n    // Update the app list with the new list\n    appList = newAppList;\n\n    // Sort the app list\n    std::sort(appList.begin(), appList.end(), [](const NvApp& a, const NvApp& b) {\n        return a.name() < b.name();\n    });\n\n    return true;\n}", "CodeBleu_score": 60.88756844314076}, {"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\t    QWriteLocker writeLocker(&lock);\n\n    if (appList == newAppList) {\n        return false;\n    }\n\n    // Propagate client-side attributes such as hidden and directLaunch from the existing apps to the corresponding new apps based on their IDs\n    for (const NvApp& app : appList) {\n        for (NvApp& newApp : newAppList) {\n            if (app.id() == newApp.id()) {\n                newApp.setHidden(app.hidden());\n                newApp.setDirectLaunch(app.directLaunch());\n            }\n        }\n    }\n\n    // Update the app list with the new list, sort the app list, and return true\n    appList = newAppList;\n    std::sort(appList.begin(), appList.end(), [](const NvApp& a, const NvApp& b) {\n        return a.name().compare(b.name(), Qt::CaseInsensitive) < 0;\n    });\n    return true;\n}", "CodeBleu_score": 70.51485453238115}]}
{"instance_id": "527d363b3a18", "generation_result": [{"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\t", "CodeBleu_score": 1.8585893029976277}, {"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\t    CommandLineParser parser;\n    parser.setupCommonOptions();\n    parser.setApplicationDescription(\n        \"Quit an app on a specified host.\n\"\n        \"\");\n    parser.addPositionalArgument(\"host\", \"Host to quit the app on\", \"<host>\");\n    parser.parse(args);\n    parser.handleHelpAndVersionOptions();\n    parser.handleUnknownOptions();\n    if (!parser.isSet(\"host\")) {\n        parser.showError(\"Missing host argument\");\n    }\n    m_Host = parser.value(\"host\");\n}", "CodeBleu_score": 51.13206984619264}, {"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\t    CommandLineParser parser;\n    parser.setupCommonOptions();\n    parser.setApplicationDescription(\n        \"\n\n\"\n        \"Quits the currently running app on a host.\n\"\n        \"\n\"\n        \"Usage: moonlight quit [options] <host>\n\"\n        \"\n\"\n        \"Options:\n\"\n        \"  --help     Show this help message and exit.\n\"\n        \"  --version  Show version information and exit.\n\"\n    );\n    parser.addPositionalArgument(\"host\", \"Host to connect to\", \"<host>\");\n    parser.parse(args);\n    parser.handleHelpAndVersionOptions();\n    parser.handleUnknownOptions();\n    if (!parser.isSet(\"host\")) {\n        parser.showError(\"Host is required\");\n    }\n    m_Host = parser.value(\"host\");\n}", "CodeBleu_score": 56.52041247039886}]}
{"instance_id": "dca3348795d4", "generation_result": [{"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  int nyears = info[0].As<Napi::Number>().Int32Value();\n  QDate date = this->instance->addYears(nyears);\n  auto instance = QDateWrap::constructor.New({Napi::External<QDate>::New(\n      env, new QDate(date.year(), date.month(), date.day()))});\n  return instance;\n}", "CodeBleu_score": 99.8086421681636}, {"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n\n  int nyears = info[0].As<Napi::Number>().Int32Value();\n  QDate date = this->instance->addYears(nyears);\n  auto instance = QDateWrap::constructor.New({Napi::External<QDate>::New(\n      env, new QDate(date.year(), date.month(), date.day()))});\n  return instance;\n}", "CodeBleu_score": 99.8086421681636}, {"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n\n  int nyears = info[0].As<Napi::Number>().Int32Value();\n  QDate date = this->instance->addYears(nyears);\n  auto instance = QDateWrap::constructor.New({Napi::External<QDate>::New(\n      env, new QDate(date.year(), date.month(), date.day()))});\n  return instance;\n}", "CodeBleu_score": 99.8086421681636}]}
{"instance_id": "3f8f791368dc", "generation_result": [{"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\t  Napi::Env env = info.Env();\n  QDate date = QDate::currentDate();\n  auto instance = QDateWrap::constructor.New({Napi::External<QDate>::New(env, new QDate(date.year(), date.month(), date.day()))});\n  return instance;\n}", "CodeBleu_score": 94.44835087500087}, {"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\t  Napi::Env env = info.Env();\n  QDate date = QDate::currentDate();\n  auto instance = QDateWrap::constructor.New({Napi::External<QDate>::New(env, new QDate(date.year(), date.month(), date.day()))});\n  return instance;\n}", "CodeBleu_score": 94.44835087500087}, {"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\t  Napi::Env env = info.Env();\n  QDate date = QDate::currentDate();\n  auto instance = QDateWrap::constructor.New({Napi::External<QDate>::New(\n      env, new QDate(date.year(), date.month(), date.day()))});\n  return instance;\n}", "CodeBleu_score": 99.75105108378361}]}
{"instance_id": "64d1b8308f8f", "generation_result": [{"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  int year = info[0].As<Napi::Number>().Int32Value();\n  bool result = QDate::isLeapYear(year);\n  return Napi::Value::From(env, result);\n}", "CodeBleu_score": 85.09442921362546}, {"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  int year = info[0].As<Napi::Number>().Int32Value();\n  bool result = QDate::isLeapYear(year);\n  return Napi::Value::From(env, result);\n}", "CodeBleu_score": 85.09442921362546}, {"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  int year = info[0].As<Napi::Number>().Int32Value();\n  bool result = QDate::isLeapYear(year);\n  return Napi::Value::From(env, result);\n}", "CodeBleu_score": 85.09442921362546}]}
{"instance_id": "aef23b7ae456", "generation_result": [{"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  QDateTimeWrap* otherDateTimeWrap =\n      Napi::ObjectWrap<QDateTimeWrap>::Unwrap(info[0].As<Napi::Object>());\n  qint64 result = this->instance->daysTo(*otherDateTimeWrap->getInternalInstance());\n  return Napi::Number::New(env, result);\n}", "CodeBleu_score": 68.83458191059457}, {"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  QDateTimeWrap* other = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(info[0].As<Napi::Object>());\n  int result = this->instance->daysTo(*other->getInternalInstance());\n  return Napi::Number::New(env, result);\n}", "CodeBleu_score": 65.31490814984643}, {"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  QDateTimeWrap* other =\n      Napi::ObjectWrap<QDateTimeWrap>::Unwrap(info[0].As<Napi::Object>());\n  int result = this->instance->daysTo(*other->getInternalInstance());\n  return Napi::Number::New(env, result);\n}", "CodeBleu_score": 65.9776040066132}]}
{"instance_id": "6acfa242f879", "generation_result": [{"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::Object otherObject = info[0].As<Napi::Object>();\n  QDateTimeWrap* otherWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherObject);\n  qint64 result = this->instance->msecsTo(*otherWrap->getInternalInstance());\n  return Napi::Value::From(env, result);\n}", "CodeBleu_score": 99.17700545527862}, {"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::Object otherObject = info[0].As<Napi::Object>();\n  QDateTimeWrap* otherWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherObject);\n  qint64 result = this->instance->msecsTo(*otherWrap->getInternalInstance());\n  return Napi::Value::From(env, result);\n}", "CodeBleu_score": 99.17700545527862}, {"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::Object otherObject = info[0].As<Napi::Object>();\n  QDateTimeWrap* otherWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherObject);\n  qint64 result = this->instance->msecsTo(*otherWrap->getInternalInstance());\n  return Napi::Value::From(env, result);\n}", "CodeBleu_score": 99.17700545527862}]}
{"instance_id": "fd6c4b070349", "generation_result": [{"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\t  Napi::Env env = info.Env();\n  int row = info[0].As<Napi::Number>().Int32Value();\n  QModelIndexWrap* parentWrap = Napi::ObjectWrap<QModelIndexWrap>::Unwrap(info[1].As<Napi::Object>());\n  QModelIndex* parent = parentWrap->getInternalInstance();\n  bool result = this->instance->rowIntersectsSelection(row, *parent);\n  return Napi::Boolean::New(env, result);\n}", "CodeBleu_score": 87.49128889841448}, {"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\t  Napi::Env env = info.Env();\n  int row = info[0].As<Napi::Number>().Int32Value();\n  QModelIndexWrap* parentWrap = Napi::ObjectWrap<QModelIndexWrap>::Unwrap(info[1].As<Napi::Object>());\n  QModelIndex* parent = parentWrap->getInternalInstance();\n  bool result = this->instance->rowIntersectsSelection(row, *parent);\n  return Napi::Boolean::New(env, result);\n}", "CodeBleu_score": 87.49128889841448}, {"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\t  Napi::Env env = info.Env();\n  int row = info[0].As<Napi::Number>().Int32Value();\n  QModelIndexWrap* parentWrap = Napi::ObjectWrap<QModelIndexWrap>::Unwrap(info[1].As<Napi::Object>());\n  QModelIndex* parent = parentWrap->getInternalInstance();\n  bool result = this->instance->rowIntersectsSelection(row, *parent);\n  return Napi::Boolean::New(env, result);\n}", "CodeBleu_score": 87.49128889841448}]}
{"instance_id": "05bc5ac254cf", "generation_result": [{"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  QSizeWrap* otherSizeWrap = Napi::ObjectWrap<QSizeWrap>::Unwrap(info[0].As<Napi::Object>());\n  QSize* otherSize = otherSizeWrap->getInternalInstance();\n  QSize result = this->instance->expandedTo(*otherSize);\n  auto resultInstance = QSizeWrap::constructor.New({Napi::External<QSize>::New(env, new QSize(result))});\n  return resultInstance;\n}", "CodeBleu_score": 95.4155370605109}, {"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  QSizeWrap* otherSizeWrap =\n      Napi::ObjectWrap<QSizeWrap>::Unwrap(info[0].As<Napi::Object>());\n  QSize* otherSize = otherSizeWrap->getInternalInstance();\n  QSize result = this->instance->expandedTo(*otherSize);\n  auto resultInstance = QSizeWrap::constructor.New(\n      {Napi::External<QSize>::New(env, new QSize(result))});\n  return resultInstance;\n}", "CodeBleu_score": 99.85425703292626}, {"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  QSizeWrap* otherSizeWrap =\n      Napi::ObjectWrap<QSizeWrap>::Unwrap(info[0].As<Napi::Object>());\n  QSize* otherSize = otherSizeWrap->getInternalInstance();\n  QSize result = this->instance->expandedTo(*otherSize);\n  auto resultInstance = QSizeWrap::constructor.New(\n      {Napi::External<QSize>::New(env, new QSize(result))});\n  return resultInstance;\n}", "CodeBleu_score": 99.85425703292626}]}
{"instance_id": "1efa69400994", "generation_result": [{"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\t  get: [](const Napi::CallbackInfo& info) -> Napi::Value {\n    Napi::Env env = info.Env();\n    std::string result = QApplication::desktopFileName().toStdString();\n    return Napi::String::New(env, result);\n  }\n}", "CodeBleu_score": 69.45295908116364}, {"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\t  Napi::String::New(env, QApplication::desktopFileName().toStdString())\n}", "CodeBleu_score": 21.77574719177242}, {"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\t    get: QApplicationWrap::desktopFileName\n}", "CodeBleu_score": 12.65746502307612}]}
{"instance_id": "1f5a560eaaa6", "generation_result": [{"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::Number mode = info[0].As<Napi::Number>();\n  QMimeData* mimeData = this->instance->mimeData(static_cast<QClipboard::Mode>(mode.Int32Value()));\n  QMimeData* mimeDataClone = new QMimeData();\n  // QMimeData has no copy constructor so I do this\n  QMimeDataWrap::cloneFromMimeDataToData(mimeData, mimeDataClone);\n  auto instance = QMimeDataWrap::constructor.New(\n      {Napi::External<QMimeData>::New(env, mimeDataClone)});\n  return instance;\n}", "CodeBleu_score": 91.17734570832637}, {"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::Number mode = info[0].As<Napi::Number>();\n  QMimeData* mimeData = this->instance->mimeData(static_cast<QClipboard::Mode>(mode.Int32Value()));\n  QMimeData* mimeDataClone = new QMimeData();\n  // QMimeData has no copy constructor so I do this\n  QMimeDataWrap::cloneFromMimeDataToData(mimeData, mimeDataClone);\n\n  auto instance = QMimeDataWrap::constructor.New(\n      {Napi::External<QMimeData>::New(env, mimeDataClone)});\n  return instance;\n}", "CodeBleu_score": 91.17734570832637}, {"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::Number mode = info[0].As<Napi::Number>();\n  QMimeData* mimeData =\n      this->instance->mimeData(static_cast<QClipboard::Mode>(mode.Int32Value()));\n  auto instance = QMimeDataWrap::constructor.New(\n      {Napi::External<QMimeData>::New(env, mimeData)});\n  return instance;\n}", "CodeBleu_score": 68.67447689367847}]}
{"instance_id": "2c6dfc2d7eec", "generation_result": [{"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  QObject* sourceObject = this->instance->source();\n  auto instance = QObjectWrap::constructor.New({Napi::External<QObject>::New(env, sourceObject)});\n  return instance;\n}", "CodeBleu_score": 83.93362400528952}, {"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  QObject* source = this->instance->source();\n  auto instance = QObjectWrap::constructor.New({Napi::External<QObject>::New(env, source)});\n  return instance;\n}", "CodeBleu_score": 98.75113206510076}, {"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  QObject* sourceObject = this->instance->source();\n  auto instance = QObjectWrap::constructor.New({Napi::External<QObject>::New(env, sourceObject)});\n  return instance;\n}", "CodeBleu_score": 83.93362400528952}]}
{"instance_id": "29908bfd3b4b", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t", "CodeBleu_score": 0.5376086127673959}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t", "CodeBleu_score": 0.5376086127673959}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    base.OnMouseMove(e);\n    try {\n        if (Option.ToolTip != null) {\n            Point p = new Point(e.X, e.Y);\n            if (DrawRect.Contains(p)) {\n                int index = -1;\n                if (Option.XAxis.Data.Count > 0) {\n                    index = (int)Math.Floor((p.X - DrawOrigin.X) / DrawBarWidth);\n                }\n                if (index >= 0 && index < Option.XAxis.Data.Count) {\n                    if (Bars.TryGetValue(0, out var bars)) {\n                        if (bars.Count > index) {\n                            if (bars[index].Tips != null) {\n                                tip.Text = bars[index].Tips;\n                                tip.Size = tip.GetPreferredSize(this.Size);\n                                tip.Visible = true;\n                                int w = tip.Size.Width;\n                                int h = tip.Size.Height;\n                                int x = p.X;\n                                int y = p.Y;\n                                if (x + w > this.Width) {\n                                    x -= w;\n                                }\n                                if (y + h > this.Height) {\n                                    y -= h;\n                                }\n                                tip.Location = new Point(x, y);\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                tip.Visible = false;\n            }\n        }\n    }\n    catch (Exception ex) {\n        Console.WriteLine(ex);\n    }\n}", "CodeBleu_score": 35.54727827757415}]}
{"instance_id": "c04d17af6942", "generation_result": [{"code": "protected override void DrawOption(Graphics g){\n\t  if (Option == null || !Drawing) {\n    return;\n  }\n\n  if (Option.ToolTip != null && Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Shadow) {\n    DrawToolTip(g);\n  }\n\n  DrawSeries(g);\n  DrawAxis(g);\n  DrawTitle(g);\n\n  if (Option.ToolTip != null && Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Line) {\n    DrawToolTip(g);\n  }\n\n  DrawLegend(g);\n  DrawAxisScale(g);\n}", "CodeBleu_score": 65.21819663552442}, {"code": "protected override void DrawOption(Graphics g){\n\t    if (Option == null || !DrawChart) return;\n    if (Option.ToolTip != null && Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Shadow) {\n        DrawToolTip(g);\n    }\n    DrawSeries(g);\n    DrawAxis(g);\n    DrawTitle(g);\n    if (Option.ToolTip != null && Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Line) {\n        DrawToolTip(g);\n    }\n    DrawLegend(g);\n    DrawAxisScales(g);\n}", "CodeBleu_score": 66.98764935531939}, {"code": "protected override void DrawOption(Graphics g){\n\t    if (Option == null || !Drawing)\n        return;\n\n    if (Option.ToolTip != null && Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Shadow) {\n        DrawToolTip(g);\n    }\n\n    DrawSeries(g);\n    DrawAxis(g);\n    DrawTitle(g);\n\n    if (Option.ToolTip != null && Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Line) {\n        DrawToolTip(g);\n    }\n\n    DrawLegend(g);\n    DrawAxisScale(g);\n}", "CodeBleu_score": 66.5953966701889}]}
{"instance_id": "1f16e1f824d0", "generation_result": [{"code": "protected virtual void DrawToolTip(Graphics g){\n\t    if (SelectIndex < 0) return;\n    if (Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Line) {\n        PointF p1 = new PointF(DrawOrigin.X + DrawBarWidth * SelectIndex, DrawOrigin.Y);\n        PointF p2 = new PointF(DrawOrigin.X + DrawBarWidth * SelectIndex, DrawOrigin.Y + DrawSize.Height);\n        g.DrawLine(Option.ToolTip.AxisPointer.LineStyle.Pen, p1, p2);\n    } else if (Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Shadow) {\n        PointF p1 = new PointF(DrawOrigin.X + DrawBarWidth * SelectIndex, DrawOrigin.Y);\n        PointF p2 = new PointF(DrawOrigin.X + DrawBarWidth * SelectIndex, DrawOrigin.Y + DrawSize.Height);\n        g.FillRectangle(Option.ToolTip.AxisPointer.ShadowStyle.Brush, new RectangleF(p1, new SizeF(1, DrawSize.Height)));\n    }\n}", "CodeBleu_score": 42.68342820360668}, {"code": "protected virtual void DrawToolTip(Graphics g){\n\t    if (SelectIndex < 0) return;\n\n    if (Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Line) {\n        float xx = DrawOrigin.X + DrawBarWidth * SelectIndex;\n        g.DrawLine(Option.ToolTip.AxisPointer.LineStyle, xx, DrawOrigin.Y, xx, Height - Option.Grid.Bottom);\n    }\n    else if (Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Shadow) {\n        float xx = DrawOrigin.X + DrawBarWidth * SelectIndex;\n        g.FillRectangle(Option.ToolTip.AxisPointer.ShadowStyle, xx, DrawOrigin.Y, Option.ToolTip.AxisPointer.ShadowBlur, Height - Option.Grid.Bottom);\n    }\n}", "CodeBleu_score": 53.33248549800446}, {"code": "protected virtual void DrawToolTip(Graphics g){\n\t    if (selectIndex < 0) return;\n    if (Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Line) {\n        PointF pos = new PointF(DrawOrigin.X + selectIndex * DrawBarWidth, DrawOrigin.Y);\n        PointF end = new PointF(DrawOrigin.X + selectIndex * DrawBarWidth, DrawOrigin.Y + DrawSize.Height);\n        g.DrawLine(Option.ToolTip.AxisPointer.LineStyle.GetPen(), pos, end);\n    }\n    else if (Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Shadow) {\n        PointF pos = new PointF(DrawOrigin.X + selectIndex * DrawBarWidth, DrawOrigin.Y + DrawSize.Height);\n        PointF end = new PointF(DrawOrigin.X + selectIndex * DrawBarWidth + DrawBarWidth, DrawOrigin.Y + DrawSize.Height);\n        g.FillRectangle(Option.ToolTip.AxisPointer.ShadowStyle.GetBrush(), new RectangleF(pos, end));\n    }\n}", "CodeBleu_score": 44.086212449086766}]}
{"instance_id": "63eac2c0afaa", "generation_result": [{"code": " protected void DrawTitle(Graphics g, UITitle title){\n\t            if (title == null || string.IsNullOrEmpty(title.Text)) return;\n            if (title.Font == null) title.Font = SubFont;\n            SizeF size = g.MeasureString(title.Text, title.Font);\n            RectangleF rect = new RectangleF(0, 0, size.Width, size.Height);\n            if (title.Alignment == UITitleAlignment.Left) {\n                rect.X = 0;\n                rect.Y = 0;\n            }\n            else if (title.Alignment == UITitleAlignment.Center) {\n                rect.X = (Width - size.Width) / 2;\n                rect.Y = 0;\n            }\n            else if (title.Alignment == UITitleAlignment.Right) {\n                rect.X = Width - size.Width;\n                rect.Y = 0;\n            }\n            g.DrawString(title.Text, title.Font, new SolidBrush(title.ForeColor), rect);\n\n            if (!string.IsNullOrEmpty(title.SubText)) {\n                if (title.SubFont == null) title.SubFont = SubFont;\n                SizeF subSize = g.MeasureString(title.SubText, title.SubFont);\n                RectangleF subRect = new RectangleF(0, 0, subSize.Width, subSize.Height);\n                if (title.Alignment == UITitleAlignment.Left) {\n                    subRect.X = 0;\n                    subRect.Y = size.Height + 5;\n                }\n                else if (title.Alignment == UITitleAlignment.Center) {\n                    subRect.X = (Width - subSize.Width) / 2;\n                    subRect.Y = size.Height + 5;\n                }\n                else if (title.Alignment == UITitleAlignment.Right) {\n                    subRect.X = Width - subSize.Width;\n                    subRect.Y = size.Height + 5;\n                }\n                g.DrawString(title.SubText, title.SubFont, new SolidBrush(title.ForeColor), subRect);\n            }\n        }", "CodeBleu_score": 30.72468714903805}, {"code": " protected void DrawTitle(Graphics g, UITitle title){\n\t    if (title == null || title.Text == null) {\n        return;\n    }\n\n    SizeF titleSize = g.MeasureString(title.Text, SubFont);\n\n    // Draw the title text\n    g.DrawString(title.Text, SubFont, new SolidBrush(title.ForeColor), title.Left, title.Top, StringFormat.GenericDefault);\n\n    // Draw the subtitle text\n    if (title.SubTitle != null && title.SubTitle.Text != null) {\n        SizeF subTitleSize = g.MeasureString(title.SubTitle.Text, SubFont);\n\n        // Create a temporary scaled font for the subtitle text\n        Font subTitleFont = new Font(SubFont.FontFamily, SubFont.Size * title.SubTitle.FontScale, SubFont.Style, SubFont.Unit);\n\n        // Draw the subtitle text below the main title\n        switch (title.SubTitle.Alignment) {\n            case UITitleSubAlignment.Left:\n                g.DrawString(title.SubTitle.Text, subTitleFont, new SolidBrush(title.ForeColor), title.Left, title.Top + titleSize.Height + title.SubTitle.Margin, StringFormat.GenericDefault);\n                break;\n            case UITitleSubAlignment.Right:\n                g.DrawString(title.SubTitle.Text, subTitleFont, new SolidBrush(title.ForeColor), title.Left + title.Width - subTitleSize.Width, title.Top + titleSize.Height + title.SubTitle.Margin, StringFormat.GenericDefault);\n                break;\n            case UITitleSubAlignment.Center:\n                g.DrawString(title.SubTitle.Text, subTitleFont, new SolidBrush(title.ForeColor), title.Left + (title.Width - subTitleSize.Width) / 2, title.Top + titleSize.Height + title.SubTitle.Margin, StringFormat.GenericDefault);\n                break;\n        }\n    }\n}", "CodeBleu_score": 43.4881768964656}, {"code": " protected void DrawTitle(Graphics g, UITitle title){\n\t  if (title == null || title.Text == null) {\n   return;\n  }\n  SizeF textSize = g.MeasureString(title.Text, title.Font);\n  RectangleF textRect = new RectangleF(title.Left, title.Top, textSize.Width, textSize.Height);\n  if (title.Alignment == UITextAlign.Center) {\n   textRect.X = (Width - textSize.Width) / 2;\n  } else if (title.Alignment == UITextAlign.Right) {\n   textRect.X = Width - textSize.Width - title.Right;\n  }\n  g.DrawString(title.Text, title.Font, new SolidBrush(title.ForeColor), textRect);\n  if (title.SubText != null) {\n   Font subFont = new Font(title.Font.FontFamily, title.Font.Size * 0.8f, FontStyle.Regular);\n   SizeF subTextSize = g.MeasureString(title.SubText, subFont);\n   RectangleF subTextRect = new RectangleF(title.Left, title.Top + textSize.Height + 5, subTextSize.Width, subTextSize.Height);\n   if (title.Alignment == UITextAlign.Center) {\n    subTextRect.X = (Width - subTextSize.Width) / 2;\n   } else if (title.Alignment == UITextAlign.Right) {\n    subTextRect.X = Width - subTextSize.Width - title.Right;\n   }\n   g.DrawString(title.SubText, subFont, new SolidBrush(title.ForeColor), subTextRect);\n  }\n }", "CodeBleu_score": 36.81264429206864}]}
{"instance_id": "fcb55d34cb20", "generation_result": [{"code": "protected override void CreateEmptyOption(){\n\t", "CodeBleu_score": 0.9614019344726461}, {"code": "protected override void CreateEmptyOption(){\n\t    emptyOption = new DoughnutChartOption();\n    emptyOption.Title = new ChartTitleOption();\n    emptyOption.Title.Text = \\\"Doughnut Chart\\\";\n    emptyOption.Subtitle = new ChartTitleOption();\n    emptyOption.Subtitle.Text = \\\"Doughnut Chart Subtitle\\\";\n    var series = new DoughnutSeriesOption();\n    series.Name = \\\"Doughnut Series\\\";\n    series.Center = new List<int>() { 50, 50 };\n    series.Radius = \\\"75%\\\";\n    series.Data = new List<DoughnutDataOption>();\n    series.Data.Add(new DoughnutDataOption() { Name = \\\"A\\\", Value = 20 });\n    series.Data.Add(new DoughnutDataOption() { Name = \\\"B\\\", Value = 50 });\n    series.Data.Add(new DoughnutDataOption() { Name = \\\"C\\\", Value = 30 });\n    series.Data.Add(new DoughnutDataOption() { Name = \\\"D\\\", Value = 40 });\n    series.Data.Add(new DoughnutDataOption() { Name = \\\"E\\\", Value = 10 });\n    emptyOption.Series.Add(series);\n}", "CodeBleu_score": 28.406197220705643}, {"code": "protected override void CreateEmptyOption(){\n\t    if (emptyOption != null) {\n        return;\n    }\n    emptyOption = new DoughnutChartOption();\n    emptyOption.Title = new ChartTitle();\n    emptyOption.Title.Text = \"Doughnut Chart\";\n    emptyOption.Subtitle = new ChartTitle();\n    emptyOption.Subtitle.Text = \"Doughnut Chart\";\n    DoughnutSeries series = new DoughnutSeries();\n    series.Name = \"Doughnut Series\";\n    series.Center = new List<double> { 0.5, 0.5 };\n    series.Radius = \"70%\";\n    series.Data = new List<DoughnutData>();\n    for (int i = 0; i < 5; i++) {\n        series.Data.Add(new DoughnutData { Value = 0 });\n    }\n    emptyOption.Series.Add(series);\n}", "CodeBleu_score": 42.606052152006775}]}
{"instance_id": "7c0a5f0b8f45", "generation_result": [{"code": "public double[] LabelValues(){\n\t    double[] values = new double[Count + 1];\n    values[0] = Start;\n    if (AxisType == UIAxisType.DateTime) {\n        for (int i = 1; i <= Count; i++) {\n            values[i] = new DateTimeInt64(values[i - 1] + IntervalMilliseconds);\n        }\n    } else {\n        for (int i = 1; i <= Count; i++) {\n            values[i] = values[i - 1] + Interval;\n        }\n    }\n    return values;\n}", "CodeBleu_score": 51.546067528125505}, {"code": "public double[] LabelValues(){\n\t    double[] values = new double[Count + 1];\n    for (int i = 0; i < Count + 1; i++) {\n        if (AxisType == UIAxisType.DateTime) {\n            values[i] = new DateTimeInt64(Start).AddMilliseconds(IntervalMilliseconds * i).ToInt64();\n        } else {\n            values[i] = Start + Interval * i;\n        }\n    }\n    return values;\n}", "CodeBleu_score": 61.54874029692113}, {"code": "public double[] LabelValues(){\n\t    double[] values = new double[Count + 1];\n    for (int i = 0; i < values.Length; i++) {\n        if (AxisType == UIAxisType.DateTime) {\n            values[i] = new DateTimeInt64(Start).AddMilliseconds(IntervalMilliseconds * i);\n        } else {\n            values[i] = Start + Interval * i;\n        }\n    }\n    return values;\n}", "CodeBleu_score": 60.34755390595791}]}
{"instance_id": "dfdbaee67b59", "generation_result": [{"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\t    Pen pen = new Pen(color, width);\n    IntPtr hdc = m.Hwnd;\n    if (hdc != IntPtr.Zero) {\n        using (Graphics g = Graphics.FromHdc(hdc)) {\n            g.SmoothingMode = SmoothingMode.AntiAlias;\n            g.DrawRectangle(pen, 0, 0, control.Width - 1, control.Height - 1);\n        }\n    }\n}", "CodeBleu_score": 47.55738012789973}, {"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\t    Pen pen = new Pen(color, width);\n    IntPtr hdc = m.Hwnd;\n    if (hdc != IntPtr.Zero) {\n        using (Graphics g = Graphics.FromHdc(hdc)) {\n            g.SmoothingMode = SmoothingMode.AntiAlias;\n            g.DrawRectangle(pen, 0, 0, control.Width - 1, control.Height - 1);\n        }\n    }\n}", "CodeBleu_score": 47.55738012789973}, {"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\t    Pen pen = new Pen(color, width);\n    IntPtr hdc = m.Hwnd;\n    if (hdc != IntPtr.Zero) {\n        Graphics g = Graphics.FromHdc(hdc);\n        g.SmoothingMode = SmoothingMode.AntiAlias;\n        g.DrawRectangle(pen, control.ClientRectangle);\n        g.Dispose();\n    }\n}", "CodeBleu_score": 43.098525771739354}]}
{"instance_id": "aec16c2608df", "generation_result": [{"code": "public static Bitmap SaveToImage(this Control ctrl){\n\t    IntPtr hDC = (IntPtr)Win32.User.GetWindowDC(ctrl.Handle);\n    if (hDC.ToInt32() == 0) {\n        return null;\n    }\n\n    IntPtr hBitmap = Win32.Gdi.CreateCompatibleBitmap(hDC, ctrl.Width, ctrl.Height);\n    IntPtr hOldBitmap = Win32.Gdi.SelectObject(hDC, hBitmap);\n    Graphics g = Graphics.FromHdc(hDC);\n    g.SmoothingMode = SmoothingMode.AntiAlias;\n    g.InterpolationMode = InterpolationMode.HighQualityBicubic;\n    g.PixelOffsetMode = PixelOffsetMode.HighQuality;\n    g.CompositingQuality = CompositingQuality.HighQuality;\n    g.DrawRectangle(new Pen(Color.White, 1), 0, 0, ctrl.Width, ctrl.Height);\n    g.FillRectangle(new SolidBrush(ctrl.BackColor), 0, 0, ctrl.Width, ctrl.Height);\n    ctrl.DrawToBitmap(g.GetHdc(), new Rectangle(0, 0, ctrl.Width, ctrl.Height));\n    g.Dispose();\n    Win32.Gdi.SelectObject(hDC, hOldBitmap);\n    Win32.Gdi.DeleteObject(hBitmap);\n    Win32.User.ReleaseDC(ctrl.Handle, hDC);\n    return Bitmap.FromHbitmap(hBitmap);\n}", "CodeBleu_score": 40.22491021980098}, {"code": "public static Bitmap SaveToImage(this Control ctrl){\n\t    IntPtr hDC = Win32.User.GetWindowDC(ctrl.Handle);\n    IntPtr hBitmap = Win32.Gdi.CreateCompatibleBitmap(hDC, ctrl.Width, ctrl.Height);\n    IntPtr hOldBitmap = Win32.Gdi.SelectObject(hDC, hBitmap);\n    Win32.Gdi.PrintWindow(ctrl.Handle, hDC, 0);\n    Bitmap bmp = Bitmap.FromHbitmap(hBitmap);\n    Win32.Gdi.SelectObject(hDC, hOldBitmap);\n    Win32.User.ReleaseDC(ctrl.Handle, hDC);\n    Win32.Gdi.DeleteObject(hBitmap);\n    return bmp;\n}", "CodeBleu_score": 57.296398172126615}, {"code": "public static Bitmap SaveToImage(this Control ctrl){\n\t    IntPtr hDC = (IntPtr)Win32.User.GetWindowDC(ctrl.Handle);\n    if (hDC.ToInt32() == 0) {\n        return null;\n    }\n    IntPtr hBitmap = Win32.Gdi.CreateCompatibleBitmap(hDC, ctrl.Width, ctrl.Height);\n    if (hBitmap.ToInt32() == 0) {\n        Win32.User.ReleaseDC(ctrl.Handle, hDC);\n        return null;\n    }\n    IntPtr hOldBitmap = Win32.Gdi.SelectObject(hDC, hBitmap);\n    Win32.Gdi.PrintWindow(ctrl.Handle, hDC, 0);\n    Bitmap bitmap = Bitmap.FromHbitmap(hBitmap);\n    Win32.Gdi.SelectObject(hDC, hOldBitmap);\n    Win32.Gdi.DeleteObject(hBitmap);\n    Win32.User.ReleaseDC(ctrl.Handle, hDC);\n    return bitmap;\n}", "CodeBleu_score": 57.99990140606551}]}
{"instance_id": "8cbc60785194", "generation_result": [{"code": "public static void RemoveClickEvent(this Button button){\n\t    var eventClickField = typeof(Control).GetField(\"EventClick\", BindingFlags.NonPublic | BindingFlags.Instance);\n    if (eventClickField != null) {\n        var eventClick = (EventHandler)eventClickField.GetValue(button);\n        if (eventClick != null) {\n            var key = eventClick.GetHashCode();\n            var events = button.Events;\n            if (events != null && events.ContainsKey(key)) {\n                events.Remove(key);\n            }\n        }\n    }\n}", "CodeBleu_score": 55.39232390303073}, {"code": "public static void RemoveClickEvent(this Button button){\n\t    var eventClick = typeof(Control).GetField(\"EventClick\", BindingFlags.NonPublic | BindingFlags.Instance);\n    if (eventClick != null) {\n        var key = eventClick.GetValue(button);\n        if (key != null) {\n            var events = button.Events;\n            if (events != null) {\n                events.RemoveHandler(key, null);\n            }\n        }\n    }\n}", "CodeBleu_score": 29.043138819908243}, {"code": "public static void RemoveClickEvent(this Button button){\n\t    var field = typeof(Control).GetField(\"EventClick\", BindingFlags.Instance | BindingFlags.NonPublic);\n    if (field != null) {\n        var key = field.GetValue(button);\n        if (key != null && button.Events != null) {\n            button.Events.RemoveHandler(key, button.Click);\n        }\n    }\n}", "CodeBleu_score": 37.78521704893767}]}
{"instance_id": "107200db7c81", "generation_result": [{"code": "public static string CheckVersion(){\n\t    try {\n        using (var ndpKey = Microsoft.Win32.RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(@\"SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full\\\")) {\n            if (ndpKey != null && ndpKey.GetValue(\"Release\") != null) {\n                return CheckFor45PlusVersion((int)ndpKey.GetValue(\"Release\"));\n            }\n        }\n    } catch (Exception ex) {\n        return \"Error: \" + ex.Message;\n    }\n    return \".NET Framework 4.5 or later is not detected.\";\n}", "CodeBleu_score": 72.20672793684375}, {"code": "public static string CheckVersion(){\n\t    const string subkey = @\"SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full\\\";\n    using (var ndpKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(subkey)) {\n        if (ndpKey != null && ndpKey.GetValue(\"Release\") != null) {\n            return CheckFor45PlusVersion((int)ndpKey.GetValue(\"Release\"));\n        }\n        else {\n            return \".NET Framework 4.5 or later is not detected.\";\n        }\n    }\n}", "CodeBleu_score": 86.87556698332925}, {"code": "public static string CheckVersion(){\n\t    try {\n        using (var ndpKey = Microsoft.Win32.RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(@\"SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full\\\")) {\n            if (ndpKey != null && ndpKey.GetValue(\"Release\") != null) {\n                return CheckFor45PlusVersion((int)ndpKey.GetValue(\"Release\"));\n            }\n            else {\n                return \".NET Framework 4.5 or later is not detected.\";\n            }\n        }\n    }\n    catch (Exception ex) {\n        return ex.Message;\n    }\n}", "CodeBleu_score": 74.13172904594994}]}
{"instance_id": "0078e6ce17ce", "generation_result": [{"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t    if (source == target) {\n        throw new ArgumentException(\"Source and target bitmaps are the same.\");\n    }\n    if (source.Width != target.Width || source.Height != target.Height || source.PixelFormat != target.PixelFormat) {\n        return false;\n    }\n    using (var sourceFastBitmap = source.FastLock()) {\n        using (var targetFastBitmap = target.FastLock()) {\n            unsafe {\n                int bytesPerPixel = Image.GetPixelFormatSize(source.PixelFormat) / 8;\n                int width = source.Width;\n                int height = source.Height;\n                int stride = source.Width * bytesPerPixel;\n                byte* sourceScan0 = (byte*)sourceFastBitmap._scan0;\n                byte* targetScan0 = (byte*)targetFastBitmap._scan0;\n                for (int y = 0; y < height; y++) {\n                    memcpy(targetScan0 + y * targetFastBitmap.Stride, sourceScan0 + y * stride, stride);\n                }\n            }\n        }\n    }\n    return true;\n}", "CodeBleu_score": 60.316194385741326}, {"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t    if (source == target) {\n        throw new ArgumentException(\"Source and target bitmaps cannot be the same.\");\n    }\n\n    if (source.Width != target.Width || source.Height != target.Height || source.PixelFormat != target.PixelFormat) {\n        return false;\n    }\n\n    using (var fastSource = source.FastLock()) {\n        using (var fastTarget = target.FastLock()) {\n            ulong strideWidth = (ulong)source.Width * fastSource.BytesPerPixel;\n            for (int y = 0; y < source.Height; y++) {\n                long offsetSrc = (y * fastSource.Stride);\n                long offsetDest = (y * fastTarget.Stride);\n                memcpy(fastTarget._scan0 + offsetDest, fastSource._scan0 + offsetSrc, strideWidth);\n            }\n        }\n    }\n\n    return true;\n}", "CodeBleu_score": 61.62743315788413}, {"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t    // Throw exception when trying to copy same bitmap over\n    if (source == target) {\n        throw new ArgumentException(\"Copying same bitmaps is not supported\", nameof(source));\n    }\n\n    // Check if the dimensions and pixel format of the source and target bitmaps match\n    if (source.Width != target.Width || source.Height != target.Height || source.PixelFormat != target.PixelFormat) {\n        return false;\n    }\n\n    // Lock the source and target bitmaps for fast memory access\n    using (var fastSource = source.FastLock()) {\n        using (var fastTarget = target.FastLock()) {\n            // Copy the pixel data from the source to the target using memcpy\n            memcpy(fastTarget._scan0, fastSource._scan0, (ulong)fastSource.Stride * fastSource.Height);\n        }\n    }\n\n    // Return true to indicate a successful copy\n    return true;\n}", "CodeBleu_score": 75.16814404915338}]}
{"instance_id": "b554f6ffc7b1", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    base.OnMouseMove(e);\n    PointF pt = e.Location;\n            if (e.Button == MouseButtons.Left)\n            {\n                SetPercent(pt);\n            }\n        }", "CodeBleu_score": 36.93248758877024}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    base.OnMouseMove(e);\n    if (e.Button == MouseButtons.Left) {\n        PointF pt = new PointF(e.X, e.Y);\n        SetPercent(pt);\n    }\n}", "CodeBleu_score": 52.15974185444945}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    base.OnMouseMove(e);\n    if (e.Button == MouseButtons.Left) {\n        PointF pt = new PointF(e.X, e.Y);\n        SetPercent(pt);\n    }\n}", "CodeBleu_score": 52.15974185444945}]}
{"instance_id": "67a92ed0480f", "generation_result": [{"code": "protected void DrawColorBar(Graphics dc){\n\t    RectangleF r = BarRectangle;\n    int numColors = ColorCount;\n    if (numColors == 2) {\n        dc.FillRectangle(new SolidBrush(Color1), r);\n        dc.FillRectangle(new SolidBrush(Color2), r);\n    }\n    if (numColors == 3) {\n        dc.FillRectangle(new SolidBrush(Color1), r);\n        dc.FillRectangle(new SolidBrush(Color2), r);\n        dc.FillRectangle(new SolidBrush(Color3), r);\n    }\n    DrawSelector(dc, r, Orientation, Percent);\n}", "CodeBleu_score": 44.35726097975458}, {"code": "protected void DrawColorBar(Graphics dc){\n\t", "CodeBleu_score": 1.937489352683406}, {"code": "protected void DrawColorBar(Graphics dc){\n\t  RectangleF r = BarRectangle;\n  if (Color1.Equals(Color.Empty))\n    return;\n  if (Color2.Equals(Color.Empty))\n    return;\n  if (Color3.Equals(Color.Empty))\n    return;\n  if (r.Width == 0)\n    return;\n  if (r.Height == 0)\n    return;\n  using (SolidBrush brush = new SolidBrush(Color.Empty)) {\n    brush.Color = Color1;\n    dc.FillRectangle(brush, r);\n  }\n  using (SolidBrush brush = new SolidBrush(Color.Empty)) {\n    brush.Color = Color2;\n    if (Color3.Equals(Color.Empty))\n      dc.FillRectangle(brush, r.X, r.Y, r.Width * Percent, r.Height);\n    else {\n      dc.FillRectangle(brush, r.X, r.Y, r.Width * Percent, r.Height);\n      brush.Color = Color3;\n      dc.FillRectangle(brush, r.X + r.Width * Percent, r.Y, r.Width * (1 - Percent), r.Height);\n    }\n  }\n  DrawSelector(dc, r, Orientation, Percent * 100);\n}", "CodeBleu_score": 36.534898546741644}]}
{"instance_id": "eb7915323235", "generation_result": [{"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\t    dropSymbol = SymbolNormal;\n\n    if (itemForm.Visible) {\n        dropSymbol = SymbolDropDown;\n    }\n\n    Invalidate();\n}", "CodeBleu_score": 67.7187706141255}, {"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\t    dropSymbol = SymbolNormal;\n    if (itemForm.Visible) {\n        dropSymbol = SymbolDropDown;\n    }\n\n    Invalidate();\n}", "CodeBleu_score": 67.7187706141255}, {"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\t    dropSymbol = SymbolNormal;\n    if (itemForm.Visible) {\n        dropSymbol = SymbolDropDown;\n    }\n    Invalidate();\n}", "CodeBleu_score": 67.7187706141255}]}
{"instance_id": "f39e3f212069", "generation_result": [{"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\t    SizeChange();\n    if (!edit.Visible) {\n        if (string.IsNullOrEmpty(Text)) {\n            if (!string.IsNullOrEmpty(Watermark)) {\n                g.DrawString(Watermark, WatermarkFont, WatermarkBrush, new RectangleF(edit.Left, edit.Top, edit.Width, edit.Height), StringFormat.GenericTypographic);\n            }\n        }\n        else {\n            g.DrawString(Text, TextFont, TextBrush, new RectangleF(edit.Left, edit.Top, edit.Width, edit.Height), StringFormat.GenericTypographic);\n        }\n    }\n    else {\n        g.FillRectangle(new SolidBrush(BackColor), edit.Left + edit.Width, edit.Top, RectSize, edit.Height);\n        if (clearBtn != null) {\n            if (clearBtn.Visible) {\n                g.DrawImage(UIResource.GetImage(clearBtn.Symbol), new Rectangle(edit.Left + edit.Width, edit.Top, RectSize, edit.Height));\n            }\n        }\n        else {\n            g.DrawImage(UIResource.GetImage(dropSymbol), new Rectangle(edit.Left + edit.Width, edit.Top, RectSize, edit.Height));\n        }\n    }\n}", "CodeBleu_score": 43.821125452073204}, {"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\t  SizeChange();\n  if (!edit.Visible) {\n    if (string.IsNullOrEmpty(Text)) {\n      g.DrawString(Watermark, Font, new SolidBrush(WatermarkColor), new RectangleF(edit.Left, edit.Top, edit.Width, edit.Height), StringFormat.GenericDefault);\n    }\n    else {\n      g.DrawString(Text, Font, new SolidBrush(ForeColor), new RectangleF(edit.Left, edit.Top, edit.Width, edit.Height), StringFormat.GenericDefault);\n    }\n  }\n  else {\n    g.FillRectangle(new SolidBrush(BackColor), new Rectangle(edit.Left + edit.Width - RectSize, edit.Top, RectSize, edit.Height));\n    if (tipsBtn != null) {\n      if (tipsBtn.Visible) {\n        if (tipsBtn.Image != null) {\n          g.DrawImage(tipsBtn.Image, new Rectangle(Width - 8, 2, 16, 16));\n        }\n        else {\n          g.DrawString(tipsBtn.Text, Font, new SolidBrush(tipsBtn.ForeColor), new RectangleF(Width - 8, 2, 16, 16), StringFormat.GenericDefault);\n        }\n      }\n    }\n    if (dropSymbol == 61703) {\n      g.DrawString(SymbolNormal.ToChar().ToString(), Font, new SolidBrush(ForeColor), new RectangleF(edit.Left + edit.Width - RectSize - 2, edit.Top + 1, RectSize, edit.Height - 2), StringFormat.GenericDefault);\n    }\n    else {\n      g.DrawString(SymbolDropDown.ToChar().ToString(), Font, new SolidBrush(ForeColor), new RectangleF(edit.Left + edit.Width - RectSize - 2, edit.Top + 1, RectSize, edit.Height - 2), StringFormat.GenericDefault);\n    }\n  }\n}", "CodeBleu_score": 48.61432419279769}, {"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\t    SizeChange();\n\n    if (!edit.Visible) {\n        if (string.IsNullOrEmpty(Text)) {\n            if (!string.IsNullOrEmpty(Watermark)) {\n                g.DrawString(Watermark, WatermarkFont, new SolidBrush(WatermarkColor), new RectangleF(0, 0, Width, Height), WatermarkFormat);\n            }\n        }\n        else {\n            g.DrawString(Text, Font, new SolidBrush(ForeColor), new RectangleF(0, 0, Width, Height), StringFormat.GenericDefault);\n        }\n    }\n    else {\n        g.FillRectangle(new SolidBrush(BackColor), new Rectangle(Width - RectSize, 0, RectSize, Height));\n\n        if (clearBtn) {\n            g.DrawImage(Image.FromHicon(Icon.ExtractAssociatedIcon(Assembly.GetExecutingAssembly().Location)), new Rectangle(Width - RectSize, 0, RectSize, Height), 0, 0, RectSize, RectSize, GraphicsUnit.Pixel);\n        }\n        else {\n            g.DrawImage(Image.FromHicon(Icon.ExtractAssociatedIcon(Assembly.GetExecutingAssembly().Location)), new Rectangle(Width - RectSize, 0, RectSize, Height), 0, dropSymbol, RectSize, RectSize, GraphicsUnit.Pixel);\n        }\n    }\n}", "CodeBleu_score": 43.46192730190124}]}
{"instance_id": "c2f43d45d92d", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    base.OnMouseMove(e);\n    if (!NeedDrawClearButton) return;\n    if (e.X < Width - Padding.Right) {\n        NeedDrawClearButton = false;\n        Invalidate();\n        return;\n    }\n    if (NeedDrawClearButton != edit.Text.IsValid()) {\n        NeedDrawClearButton = edit.Text.IsValid();\n        Invalidate();\n    }\n}", "CodeBleu_score": 50.93101623133144}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    base.OnMouseMove(e);\n    if (!NeedDrawClearButton) {\n        return;\n    }\n    if (e.X >= Width - Padding.Right) {\n        if (NeedDrawClearButton != true) {\n            NeedDrawClearButton = true;\n            Invalidate();\n        }\n    } else {\n        if (NeedDrawClearButton != false) {\n            NeedDrawClearButton = false;\n            Invalidate();\n        }\n    }\n}", "CodeBleu_score": 37.648560554651475}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    base.OnMouseMove(e);\n    if (!NeedDrawClearButton) {\n        return;\n    }\n\n    if (e.X > Width - Padding.Right) {\n        if (NeedDrawClearButton) {\n            NeedDrawClearButton = false;\n            Invalidate();\n        }\n    }\n    else {\n        if (!NeedDrawClearButton) {\n            NeedDrawClearButton = true;\n            Invalidate();\n        }\n    }\n}", "CodeBleu_score": 54.01997279037101}]}
{"instance_id": "ecd71145bba0", "generation_result": [{"code": "protected override void OnLayout(LayoutEventArgs e){\n\t    // Calculate the preferred size of the component\n    Size preferredSize = GetPreferredSize(Size.Empty);\n\n    // Adjust the size if AutoSize is enabled and the suggested size differs from the current size\n    if (AutoSize && preferredSize != Size) {\n        Size = preferredSize;\n    }\n\n    // Set the items to be displayed\n    SetItemsToDisplay();\n\n    // Trigger the layout completed event\n    OnLayoutComplete(e);\n\n    // Invalidate the component to refresh its display\n    Invalidate();\n}", "CodeBleu_score": 67.16862863852722}, {"code": "protected override void OnLayout(LayoutEventArgs e){\n\t    base.OnLayout(e);\n    if (Item != null) {\n        Item.MinimumSize = Size;\n        Item.MaximumSize = Size;\n        Item.Size = Size;\n        Item.Location = Point.Empty;\n    }\n}", "CodeBleu_score": 20.870450951357554}, {"code": "protected override void OnLayout(LayoutEventArgs e){\n\t    base.OnLayout(e);\n\n    if (Item != null) {\n        Item.MinimumSize = Size;\n        Item.MaximumSize = Size;\n        Item.Size = Size;\n        Item.Location = Point.Empty;\n    }\n}", "CodeBleu_score": 20.870450951357554}]}
{"instance_id": "670ec0154771", "generation_result": [{"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\t    base.SetStyleColor(uiColor);\n    this.FillColor = Color.White;\n    this.ForeColor = uiColor.DropDownPanelForeColor;\n    this.RectColor = uiColor.RectColor;\n    foreach (UISymbolButton btn in this.Controls) {\n        btn.SetStyleColor(uiColor);\n    }\n}", "CodeBleu_score": 47.92598124152742}, {"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\t    base.SetStyleColor(uiColor);\n    this.FillColor = Color.White;\n    this.ForeColor = uiColor.DropDownPanelForeColor;\n    this.RectColor = uiColor.RectColor;\n    foreach (UISymbolButton btn in this.Controls) {\n        btn.SetStyleColor(uiColor);\n    }\n}", "CodeBleu_score": 47.92598124152742}, {"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\t    base.SetStyleColor(uiColor);\n    this.FillColor = Color.White;\n    this.ForeColor = uiColor.DropDownPanelForeColor;\n    this.RectColor = uiColor.RectColor;\n    foreach (UISymbolButton control in this.Controls) {\n        control.SetStyleColor(uiColor);\n    }\n}", "CodeBleu_score": 47.75649595331497}]}
{"instance_id": "248c24f4cf62", "generation_result": [{"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\t    if (this.AnalogMeter == null)\n        return false;\n\n    Color bodyColor = this.AnalogMeter.BodyColor;\n    Color bodyDarkColor = Color.FromArgb(bodyColor.R - 25, bodyColor.G - 25, bodyColor.B - 25);\n\n    using (LinearGradientBrush bodyBrush = new LinearGradientBrush(rc, bodyColor, bodyDarkColor, LinearGradientMode.Vertical)) {\n        Gr.FillEllipse(bodyBrush, rc);\n    }\n\n    rc.Inflate(-this.AnalogMeter.DrawRatio, -this.AnalogMeter.DrawRatio);\n\n    using (LinearGradientBrush bodyBrush = new LinearGradientBrush(rc, bodyColor, bodyDarkColor, LinearGradientMode.Vertical)) {\n        Gr.FillEllipse(bodyBrush, rc);\n    }\n\n    return true;\n}", "CodeBleu_score": 45.71373236983416}, {"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\t    if (this.AnalogMeter == null)\n        return false;\n\n    Color bodyColor = this.AnalogMeter.BodyColor;\n    Color bodyDarkColor = Color.FromArgb(bodyColor.R - 30, bodyColor.G - 30, bodyColor.B - 30);\n\n    using (LinearGradientBrush bodyBrush = new LinearGradientBrush(rc, bodyColor, bodyDarkColor, LinearGradientMode.Vertical)) {\n        Gr.FillEllipse(bodyBrush, rc);\n    }\n\n    RectangleF rc2 = new RectangleF(rc.X, rc.Y, rc.Width * this.AnalogMeter.DrawRatio, rc.Height);\n    using (LinearGradientBrush bodyBrush = new LinearGradientBrush(rc2, bodyDarkColor, bodyColor, LinearGradientMode.Vertical)) {\n        Gr.FillEllipse(bodyBrush, rc2);\n    }\n\n    return true;\n}", "CodeBleu_score": 45.94062710085139}, {"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\t    if (this.AnalogMeter == null)\n        return false;\n\n    Color bodyColor = this.AnalogMeter.BodyColor;\n    Color darkerColor = Color.FromArgb(bodyColor.R - 25, bodyColor.G - 25, bodyColor.B - 25);\n\n    using (LinearGradientBrush lgb = new LinearGradientBrush(rc, bodyColor, darkerColor, 90f)) {\n        Gr.FillEllipse(lgb, rc);\n    }\n\n    rc.Width = rc.Width * this.AnalogMeter.DrawRatio;\n    rc.Height = rc.Height * this.AnalogMeter.DrawRatio;\n    rc.X = rc.X + (rc.Width - rc.Width * this.AnalogMeter.DrawRatio) / 2;\n    rc.Y = rc.Y + (rc.Height - rc.Height * this.AnalogMeter.DrawRatio) / 2;\n\n    using (LinearGradientBrush lgb = new LinearGradientBrush(rc, darkerColor, bodyColor, 90f)) {\n        Gr.FillEllipse(lgb, rc);\n    }\n\n    return true;\n}", "CodeBleu_score": 47.57916763343288}]}
{"instance_id": "be7c41ba9985", "generation_result": [{"code": "protected override void OnMouseEnter(EventArgs e){\n\t    base.OnMouseEnter(e);\n    IsHover = true;\n    Invalidate();\n}", "CodeBleu_score": 80.39681508653204}, {"code": "protected override void OnMouseEnter(EventArgs e){\n\t    base.OnMouseEnter(e);\n    IsHover = true;\n    Invalidate();\n}", "CodeBleu_score": 80.39681508653204}, {"code": "protected override void OnMouseEnter(EventArgs e){\n\t    base.OnMouseEnter(e);\n    IsHover = true;\n    Invalidate();\n}", "CodeBleu_score": 80.39681508653204}]}
{"instance_id": "1d476b416b5a", "generation_result": [{"code": "public static void Load(){\n\t    lock (_stateLock) {\n        LoadAddresses();\n        LoadOverrides();\n\n        IsProxyEnabled = (_proxyKey.GetValue(\"ProxyEnable\", 0) == 1);\n    }\n}", "CodeBleu_score": 65.69502098847533}, {"code": "public static void Load(){\n\t    lock (_stateLock) {\n        LoadAddresses();\n        LoadOverrides();\n        IsProxyEnabled = (_proxyKey.GetValue(\"ProxyEnable\", 0) as int? ?? 0) != 0;\n    }\n}", "CodeBleu_score": 65.29250422596236}, {"code": "public static void Load(){\n\t    lock (_stateLock) {\n        LoadAddresses();\n        LoadOverrides();\n\n        IsProxyEnabled = _proxyKey.GetValue(\"ProxyEnable\", 0) == 1;\n    }\n}", "CodeBleu_score": 61.80748432325738}]}
{"instance_id": "298075fa5494", "generation_result": [{"code": "private static void LoadOverrides(){\n\t    string proxyOverride = _proxyKey.GetValue(\"ProxyOverride\")?.ToString();\n    if (!string.IsNullOrEmpty(proxyOverride)) {\n        string[] overrides = proxyOverride.Split(',');\n        foreach (string override in overrides) {\n            if (override.Trim().ToLower() == \"<local>\") {\n                IsIgnoringLocalTraffic = true;\n            } else if (!Overrides.Contains(override)) {\n                Overrides.Add(override);\n            }\n        }\n    }\n}", "CodeBleu_score": 80.5174763361308}, {"code": "private static void LoadOverrides(){\n\t    string overrideString = _proxyKey.GetValue(\"ProxyOverride\")?.ToString();\n    if (!string.IsNullOrEmpty(overrideString)) {\n        string[] overrides = overrideString.Split(',');\n        foreach (string overrideItem in overrides) {\n            if (overrideItem.Equals(\"<local>\")) {\n                IsIgnoringLocalTraffic = true;\n            } else {\n                if (!Overrides.Contains(overrideItem)) {\n                    Overrides.Add(overrideItem);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 72.32921081124935}, {"code": "private static void LoadOverrides(){\n\t    string overrideString = _proxyKey.GetValue(\"ProxyOverride\")?.ToString();\n    if (!string.IsNullOrEmpty(overrideString)) {\n        string[] overrides = overrideString.Split(';');\n        foreach (string overrideItem in overrides) {\n            if (overrideItem.StartsWith(\"<local>\")) {\n                IsIgnoringLocalTraffic = true;\n            }\n            else {\n                if (!Overrides.Contains(overrideItem)) {\n                    Overrides.Add(overrideItem);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 72.01637023024809}]}
{"instance_id": "c6c7ed2cfa51", "generation_result": [{"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\t", "CodeBleu_score": 1.1717521256739678}, {"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\t    // Initialize the method, headers list, and request URL based on the provided base URI\n    string method = null;\n    string path = null;\n    var headers = new Dictionary<string, string>();\n    if (baseUri == null) {\n        // Read the first command line and split it to extract the HTTP method and request path\n        var line = await ReadLineAsync();\n        var parts = line.Split(' ');\n        method = parts[0].ToUpperInvariant();\n        path = parts[1];\n    } else {\n        // Update the base URI and send an OK response\n        baseUri = new Uri(baseUri, path);\n        await WriteLineAsync($\"HTTP/1.1 200 OK\");\n    }\n\n    // Read HTTP headers until the empty line is reached\n    string line;\n    while ((line = await ReadLineAsync()) != string.Empty) {\n        var parts = line.Split(new[] { ':' }, 2);\n        headers[parts[0].Trim()] = parts[1].Trim();\n    }\n\n    // If the method is \"CONNECT\", establish a secure tunnel and recursively read the next request\n    if (method == \"CONNECT\") {\n        // Update the base URI and send an OK response\n        baseUri = new Uri(baseUri, path);\n        await WriteLineAsync($\"HTTP/1.1 200 OK\");\n\n        // Establish a secure tunnel\n        await _secureStream.AuthenticateAsClientAsync(baseUri.Host);\n\n        // Recursively read the next request\n        return await ReadRequestAsync(baseUri);\n    }\n\n    // Create and return an HttpWebRequest with the specified method, headers, and request URL\n    return new HttpWebRequest(baseUri, method, headers);\n}", "CodeBleu_score": 46.007028334227876}, {"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\t", "CodeBleu_score": 1.1717521256739678}]}
{"instance_id": "6ed63f3b7a68", "generation_result": [{"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\t  if (response is HttpWebResponse httpResponse) {\n    return SendResponseAsync(httpResponse.StatusCode, httpResponse.StatusDescription, response.Headers, content);\n  }\n  else {\n    return SendResponseAsync(HttpStatusCode.OK, \"OK\", response.Headers, content);\n  }\n}", "CodeBleu_score": 44.61618676915716}, {"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\t    var status = HttpStatusCode.OK;\n    var description = \"OK\";\n\n    if (response is HttpWebResponse webResponse) {\n        status = webResponse.StatusCode;\n        description = webResponse.StatusDescription;\n    }\n\n    return SendResponseAsync(status, description, response.Headers, content);\n}", "CodeBleu_score": 77.49809215053226}, {"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\t    return SendResponseAsync(HttpStatusCode.OK, \\\"\\\", response, content);\n}", "CodeBleu_score": 18.02670496465453}]}
{"instance_id": "32d978074585", "generation_result": [{"code": "private bool SecureTunnel(string host){\n\t    try {\n        var certificate = _certifier.GenerateCertificate(host);\n        _secureStream = new SslStream(_client.GetStream(), false, (sender, certificate, chain, errors) => {\n            return true;\n        });\n        _secureStream.AuthenticateAsServer(certificate, false, SslProtocols.Tls12, true);\n        return true;\n    }\n    catch (Exception) {\n        return false;\n    }\n}", "CodeBleu_score": 58.66919440381956}, {"code": "private bool SecureTunnel(string host){\n\t    try {\n        var certificate = _certifier.GenerateCertificate(host);\n        var stream = new SslStream(_client.GetStream(), false, (sender, certificate, chain, errors) => true, null);\n        stream.AuthenticateAsServer(certificate, false, SslProtocols.Tls12, true);\n        _secureStream = stream;\n        return true;\n    } catch (Exception e) {\n        Console.WriteLine(e);\n        return false;\n    }\n}", "CodeBleu_score": 39.922200297921776}, {"code": "private bool SecureTunnel(string host){\n\t    try {\n        var cert = _certifier.GenerateCertificate(host);\n        _secureStream = new SslStream(_client.GetStream(), false, (sender, certificate, chain, errors) => {\n            return true;\n        });\n        _secureStream.AuthenticateAsServer(cert, false, SslProtocols.Tls, true);\n        return true;\n    } catch (Exception) {\n        return false;\n    }\n}", "CodeBleu_score": 57.310334656479334}]}
{"instance_id": "67d773149e9b", "generation_result": [{"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\t    if (response.ContentLength == 0) {\n        response.GetResponseStream().Dispose();\n        return null;\n    }\n    return new StreamContent(response.GetResponseStream(), response.ContentLength > 0 ? (int)response.ContentLength : 4096);\n}", "CodeBleu_score": 80.6875171955802}, {"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\t    if (response.ContentLength == 0) {\n        response.GetResponseStream().Dispose();\n        return null;\n    }\n    var bufferSize = response.ContentLength > 0 ? (int)response.ContentLength : 4096;\n    return new StreamContent(response.GetResponseStream(), bufferSize);\n}", "CodeBleu_score": 68.65495520935214}, {"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\t    if (response.ContentLength == 0) {\n        response.GetResponseStream().Dispose();\n        return null;\n    }\n    return new StreamContent(response.GetResponseStream()) {\n        Headers = { ContentLength = response.ContentLength }\n    };\n}", "CodeBleu_score": 67.2932888635222}]}
{"instance_id": "45d3c11325cf", "generation_result": [{"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t    try {\n        var path = ActivityConfigJsonPath.Text.Trim();\n        if (string.IsNullOrEmpty(path)) {\n            var fileDialog = new OpenFileDialog {\n                Filter = \"JSON files (*.json)|*.json\",\n                Multiselect = false\n            };\n            if (fileDialog.ShowDialog() == DialogResult.OK) {\n                path = fileDialog.FileName;\n                ActivityConfigJsonPath.Text = path;\n            }\n        }\n\n        if (!string.IsNullOrEmpty(path) && File.Exists(path)) {\n            LoadActivityConfig(path);\n            MessageBox.Show($\"\u52a0\u8f7d\u6210\u529f\", Resources.Info, MessageBoxButtons.OK, MessageBoxIcon.Information);\n        }\n    } catch (Exception ex) {\n        MessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n}", "CodeBleu_score": 60.39589651722882}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t    var path = ActivityConfigJsonPath.Text.Trim();\n    if (string.IsNullOrEmpty(path))\n    {\n        var dialog = new OpenFileDialog\n        {\n            Filter = \"JSON files (*.json)|*.json|All files (*.*)|*.*\",\n            FilterIndex = 1\n        };\n        if (dialog.ShowDialog() == DialogResult.OK)\n        {\n            path = dialog.FileName;\n            ActivityConfigJsonPath.Text = path;\n        }\n        else\n        {\n            return;\n        }\n    }\n\n    try\n    {\n        LoadActivityConfig(path);\n        MessageBox.Show(Resources.LoadActivityConfigSuccess, Resources.Information, MessageBoxButtons.OK, MessageBoxIcon.Information);\n    }\n    catch (Exception ex)\n    {\n        MessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n}", "CodeBleu_score": 65.33201178285701}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t    var path = ActivityConfigJsonPath.Text.Trim();\n    if (string.IsNullOrEmpty(path))\n    {\n        var dialog = new OpenFileDialog()\n        {\n            Filter = \"JSON Files|*.json\",\n            Title = \"Select JSON File\",\n            Multiselect = false\n        };\n        if (dialog.ShowDialog() == DialogResult.OK)\n        {\n            path = dialog.FileName;\n            ActivityConfigJsonPath.Text = path;\n        }\n    }\n\n    if (string.IsNullOrEmpty(path))\n        return;\n\n    try\n    {\n        LoadActivityConfig(path);\n        MessageBox.Show(\"Loaded successfully\", \"Success\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n    }\n    catch (Exception ex)\n    {\n        MessageBox.Show(ex.ToString(), \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n}", "CodeBleu_score": 61.461184000571166}]}
{"instance_id": "f97d2ba1a807", "generation_result": [{"code": "private void LoadActivityConfig(string path){\n\t    ActivityConfigItems = JsonConvert.DeserializeObject<List<ActivityConfigItem>>(File.ReadAllText(path));\n    ListActivityConfigItems.BeginUpdate();\n    ListActivityConfigItems.Items.Clear();\n    ListActivityConfigItems.Items.AddRange(ActivityConfigItems.Select(x => new ListViewItem(new[] { x.ActivityId.ToString(), x.ActivityType.ToString(), x.Name, x.BeginTime.ToString(), x.EndTime.ToString(), x.RewardId.ToString() })).ToArray());\n    ListActivityConfigItems.EndUpdate();\n}", "CodeBleu_score": 53.90745522541165}, {"code": "private void LoadActivityConfig(string path){\n\t    ActivityConfigItems = JsonConvert.DeserializeObject<List<ActivityConfigItem>>(File.ReadAllText(path));\n    ListActivityConfigItems.BeginUpdate();\n    ListActivityConfigItems.Items.Clear();\n    foreach (var item in ActivityConfigItems) {\n        ListActivityConfigItems.Items.Add(item);\n    }\n    ListActivityConfigItems.EndUpdate();\n}", "CodeBleu_score": 55.81895027865893}, {"code": "private void LoadActivityConfig(string path){\n\t    ActivityConfigItems = JsonConvert.DeserializeObject<List<ActivityConfigItem>>(File.ReadAllText(path));\n    ListActivityConfigItems.BeginUpdate();\n    ListActivityConfigItems.Items.Clear();\n    ListActivityConfigItems.Items.AddRange(ActivityConfigItems.ToArray());\n    ListActivityConfigItems.EndUpdate();\n}", "CodeBleu_score": 56.26566340166062}]}
{"instance_id": "8531cab08f38", "generation_result": [{"code": "private void BtnSave_Click(object sender, EventArgs e){\n\t    try {\n        var path = ActivityConfigJsonPath.Text.Trim();\n        if (path == string.Empty) {\n            var dialog = new SaveFileDialog {\n                FileName = \"ActivityConfig.json\",\n                Filter = \"ActivityConfig.Json (*.json)|*.json|All files (*.*)|*.*\",\n            };\n            var result = dialog.ShowDialog();\n            if (result == DialogResult.OK)\n                path = ActivityConfigJsonPath.Text = dialog.FileName;\n            else\n                return;\n        }\n\n        // Serialize\n        File.WriteAllText(path, JsonConvert.SerializeObject(ActivityConfigItems));\n        MessageBox.Show(\"OK\", Resources.Tips, MessageBoxButtons.OK);\n    }\n    catch (Exception ex) {\n        MessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n}", "CodeBleu_score": 81.90140725431074}, {"code": "private void BtnSave_Click(object sender, EventArgs e){\n\t    try {\n        var path = ActivityConfigJsonPath.Text.Trim();\n        if (path == string.Empty) {\n            var dialog = new SaveFileDialog {\n                FileName = \"ActivityConfig.json\",\n                Filter = \"ActivityConfig.Json (*.json)|*.json|All files (*.*)|*.*\"\n            };\n            var result = dialog.ShowDialog();\n            if (result == DialogResult.OK)\n                path = ActivityConfigJsonPath.Text = dialog.FileName;\n            else\n                return;\n        }\n\n        // Serialize and write to file\n        File.WriteAllText(path, JsonConvert.SerializeObject(ActivityConfigItems));\n        MessageBox.Show(\"OK\", Resources.Tips, MessageBoxButtons.OK);\n    }\n    catch (Exception ex) {\n        MessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n}", "CodeBleu_score": 80.88706412836535}, {"code": "private void BtnSave_Click(object sender, EventArgs e){\n\t    try {\n        var path = ActivityConfigJsonPath.Text.Trim();\n        if (path == string.Empty) {\n            var dialog = new SaveFileDialog() {\n                FileName = \"ActivityConfig.json\",\n                Filter = \"ActivityConfig.Json (*.json)|*.json|All files (*.*)|*.*\",\n            };\n            var result = dialog.ShowDialog();\n            if (result == DialogResult.OK)\n                path = ActivityConfigJsonPath.Text = dialog.FileName;\n            else\n                return;\n        }\n\n        // Serialize the ActivityConfigItems to JSON and write it to the specified file path.\n        File.WriteAllText(path, JsonConvert.SerializeObject(ActivityConfigItems));\n        MessageBox.Show(\"OK\", Resources.Tips, MessageBoxButtons.OK);\n    } catch (Exception ex) {\n        MessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n}", "CodeBleu_score": 78.95615472257586}]}
{"instance_id": "424111434149", "generation_result": [{"code": "private void LoadAllActivity(){\n\t    ListActivityConfigItems.BeginUpdate();\n    ListActivityConfigItems.Items.Clear();\n    foreach (var group in GameData.Activity) {\n        var groupControl = new ListViewGroup(group.Key.ToString());\n        ListActivityConfigItems.Groups.Add(groupControl);\n        foreach (var item in group.Value) {\n            var listViewItem = new ListViewItem(item.Key.ToString());\n            listViewItem.Group = groupControl;\n            ListActivityConfigItems.Items.Add(listViewItem);\n        }\n    }\n    ListActivityConfigItems.EndUpdate();\n}", "CodeBleu_score": 43.927892168339675}, {"code": "private void LoadAllActivity(){\n\t    ListActivity.BeginUpdate();\n    ListActivity.Items.Clear();\n    foreach (var group in GameData.Activity) {\n        var groupItem = new ListViewGroup(group.Key.ToString());\n        ListActivity.Groups.Add(groupItem);\n        foreach (var item in group.Value) {\n            ListActivity.Items.Add(new ListViewItem(new[] { item.Key.ToString(), item.Value }, groupItem));\n        }\n    }\n    ListActivity.EndUpdate();\n}", "CodeBleu_score": 46.5944166847037}, {"code": "private void LoadAllActivity(){\n\t    ListActivityConfigItems.BeginUpdate();\n    ListActivityConfigItems.Items.Clear();\n\n    foreach (var group in GameData.Activity) {\n        var groupControl = new ListViewGroup(group.Key.ToString());\n        ListActivityConfigItems.Groups.Add(groupControl);\n\n        foreach (var activityId in group.Value) {\n            ListActivityConfigItems.Items.Add(new ListViewItem(activityId.ToString(), groupControl));\n        }\n    }\n\n    ListActivityConfigItems.EndUpdate();\n}", "CodeBleu_score": 41.46491208574896}]}
{"instance_id": "51c5d7f71cb3", "generation_result": [{"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\t    try {\n        if (ListAllActivity.SelectedItems.Count == 0)\n            return;\n        NUDActivityId.Text = ListAllActivity.SelectedItems[0].Text;\n    } catch (Exception ex) {\n        MessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n}", "CodeBleu_score": 88.13795190336167}, {"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\t    try {\n        if (ListAllActivity.SelectedItems.Count == 0)\n            return;\n\n        NUDActivityId.Text = ListAllActivity.SelectedItems[0].Text;\n    }\n    catch (Exception ex) {\n        MessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n}", "CodeBleu_score": 88.60318924969829}, {"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\t    try {\n        if (ListAllActivity.SelectedItems.Count == 0)\n            return;\n\n        NUDActivityId.Text = ListAllActivity.SelectedItems[0].Text;\n    }\n    catch (Exception ex) {\n        MessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n}", "CodeBleu_score": 88.60318924969829}]}
{"instance_id": "8bed5c7884dc", "generation_result": [{"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t    try {\n        var path = TxtDropJsonPath.Text;\n        if (string.IsNullOrEmpty(path)) {\n            var dialog = new OpenFileDialog {\n                Filter = \"JSON files (*.json)|*.json|All files (*.*)|*.*\",\n                Title = \"Select a JSON file\"\n            };\n            if (dialog.ShowDialog() == DialogResult.OK) {\n                path = dialog.FileName;\n                TxtDropJsonPath.Text = path;\n            }\n            else {\n                return;\n            }\n        }\n        LoadBanners(path);\n        MessageBox.Show(\"Loaded successfully.\", \"Success\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n    }\n    catch (Exception ex) {\n        MessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n}", "CodeBleu_score": 66.34436154173733}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t    try {\n        var path = TxtDropJsonPath.Text;\n        if (string.IsNullOrEmpty(path)) {\n            var dialog = new OpenFileDialog() {\n                Title = \"\u9009\u62e9 Drop.json \u6587\u4ef6\",\n                Filter = \"JSON \u6587\u4ef6 (*.json)|*.json|\u6240\u6709\u6587\u4ef6 (*.*)|*.*\",\n                RestoreDirectory = true,\n                CheckFileExists = true,\n                CheckPathExists = true\n            };\n            if (dialog.ShowDialog() == DialogResult.OK) {\n                path = dialog.FileName;\n                TxtDropJsonPath.Text = path;\n            }\n        }\n\n        if (!string.IsNullOrEmpty(path)) {\n            LoadBanners(path);\n        }\n    }\n    catch (Exception ex) {\n        MessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n}", "CodeBleu_score": 54.04466409079928}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t    try {\n        // \u83b7\u53d6\u6587\u4ef6\u8def\u5f84\n        var path = TxtDropJsonPath.Text;\n        if (string.IsNullOrEmpty(path)) {\n            // \u6253\u5f00\u6587\u4ef6\u5bf9\u8bdd\u6846\n            var dialog = new OpenFileDialog {\n                Filter = \"JSON\u6587\u4ef6 (*.json)|*.json\",\n                Title = \"\u9009\u62e9Drop.json\u6587\u4ef6\"\n            };\n            if (dialog.ShowDialog() == DialogResult.OK) {\n                // \u66f4\u65b0\u6587\u4ef6\u8def\u5f84\n                path = dialog.FileName;\n                TxtDropJsonPath.Text = path;\n            }\n            else {\n                return;\n            }\n        }\n\n        // \u52a0\u8f7d\u6389\u843d\u6c60\n        LoadBanners(path);\n\n        // \u663e\u793a\u6210\u529f\u6d88\u606f\n        MessageBox.Show(\"\u52a0\u8f7d\u6210\u529f\", Resources.Success, MessageBoxButtons.OK, MessageBoxIcon.Information);\n    }\n    catch (Exception ex) {\n        MessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n}", "CodeBleu_score": 56.91631277678086}]}
{"instance_id": "0e39a56d211b", "generation_result": [{"code": "private void ShowDropList(List<DropData> dropList){\n\t    ListDrop.BeginUpdate();\n    ListDrop.Items.Clear();\n    if (dropList.Count > 0)\n    {\n        ListDrop.Items.AddRange(dropList.ToArray());\n        ListDrop.SelectedItem = ListDrop.Items[0];\n    }\n    ListDrop.EndUpdate();\n}", "CodeBleu_score": 52.984953965268076}, {"code": "private void ShowDropList(List<DropData> dropList){\n\t    // \u66f4\u65b0\u5217\u8868\n    ListDrop.BeginUpdate();\n    ListDrop.Items.Clear();\n    if (dropList.Count > 0) {\n        // \u6dfb\u52a0\u5217\u8868\u9879\n        ListDrop.Items.AddRange(dropList.Select(x => ItemMap.ToName(x.ItemId)).ToArray());\n        // \u8bbe\u7f6e\u7b2c\u4e00\u4e2a\u4e3a\u9009\u4e2d\u9879\n        ListDrop.SetSelected(0, true);\n    }\n    // \u7ed3\u675f\u66f4\u65b0\n    ListDrop.EndUpdate();\n}", "CodeBleu_score": 48.55906957352945}, {"code": "private void ShowDropList(List<DropData> dropList){\n\t    // \u66f4\u65b0\u5217\u8868\n    ListDrop.BeginUpdate();\n    // \u6e05\u7a7a\u73b0\u6709\u9879\n    ListDrop.Items.Clear();\n    // \u68c0\u67e5\u6389\u843d\u5217\u8868\u662f\u5426\u5305\u542b\u5143\u7d20\n    if (dropList.Count > 0) {\n        // \u6dfb\u52a0\u5143\u7d20\u5230\u5217\u8868\n        ListDrop.Items.AddRange(dropList.Select(item => item.ToString()).ToArray());\n        // \u8bbe\u7f6e\u7b2c\u4e00\u4e2a\u9879\u4e3a\u9009\u4e2d\n        ListDrop.SetSelected(0, true);\n    }\n    // \u7ed3\u675f\u5217\u8868\u66f4\u65b0\n    ListDrop.EndUpdate();\n}", "CodeBleu_score": 51.84930152480409}]}
{"instance_id": "60fd5605c44e", "generation_result": [{"code": "private void RemoveDrop(DropData data){\n\t    if (ListMonsters.SelectedItems.Count == 0)\n        return;\n\n    foreach (var monsterId in SelectedMonsterIds()) {\n        if (!Banners.TryGetValue(monsterId, out List<DropData> dropList))\n            continue;\n\n        RemoveDrop(dropList, data);\n    }\n\n    RemoveDrop(SelectedDropList, data);\n}", "CodeBleu_score": 50.7304711945124}, {"code": "private void RemoveDrop(DropData data){\n\t    if (ListMonsters.SelectedItems.Count == 0)\n        return;\n\n    foreach (var monsterId in SelectedMonsterIds()) {\n        if (!Banners.TryGetValue(monsterId, out List<DropData> dropList)) {\n            continue;\n        }\n\n        RemoveDrop(dropList, data);\n    }\n\n    RemoveDrop(SelectedDropList, data);\n}", "CodeBleu_score": 52.47885583783943}, {"code": "private void RemoveDrop(DropData data){\n\t    if (ListMonsters.SelectedItems.Count == 0)\n        return;\n\n    foreach (var monsterId in SelectedMonsterIds()) {\n        if (!Banners.TryGetValue(monsterId, out List<DropData> dropList))\n            continue;\n\n        RemoveDrop(dropList, data);\n    }\n\n    RemoveDrop(SelectedDropList, data);\n}", "CodeBleu_score": 50.7304711945124}]}
{"instance_id": "475581af77bf", "generation_result": [{"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\t    Logger.I(TAG, \"FormMain_FormClosed enter\");\n    foreach (var page in Pages.Values) {\n        Logger.I(TAG, $\"{page.Name} OnClosed enter\");\n        page.OnClosed();\n        Logger.I(TAG, $\"{page.Name} OnClosed completed\");\n    }\n    Settings.Default.MainFormLocation = Location;\n            Settings.Default.MainFormSize = Size;\n            Settings.Default.NavContainerSplitterDistance = NavContainer.SplitterDistance;\n            Settings.Default.WindowOpacity = (int) (Opacity * 100);\n            Settings.Default.Save();\n    Logger.I(TAG, \"FormMain_FormClosed completed\");\n}", "CodeBleu_score": 76.05357396003951}, {"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\t    Logger.I(TAG, \"FormMain_FormClosed enter\");\n    // Iterate through each page and log the start and completion of their OnClosed method\n    foreach (var page in Pages.Values) {\n        Logger.I(TAG, $\"{page.Name} OnClosed enter\");\n        page.OnClosed();\n        Logger.I(TAG, $\"{page.Name} OnClosed completed\");\n    }\n    // Save the current settings\n    Settings.Default.Save();\n    Logger.I(TAG, \"FormMain_FormClosed completed\");\n}", "CodeBleu_score": 78.025892295688}, {"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\t    Logger.I(TAG, \"FormMain_FormClosed enter\");\n    // \u904d\u5386\u6bcf\u4e00\u4e2a\u9875\u9762\u6267\u884c\u5173\u95ed\u4e8b\u4ef6\n    foreach (var page in Pages.Values) {\n        Logger.I(TAG, $\"{page.Name} OnClosed enter\");\n        page.OnClosed();\n        Logger.I(TAG, $\"{page.Name} OnClosed completed\");\n    }\n\n    // \u4fdd\u5b58\u8bbe\u7f6e\n    Settings.Default.MainFormLocation = Location;\n            Settings.Default.MainFormSize = Size;\n            Settings.Default.NavContainerSplitterDistance = NavContainer.SplitterDistance;\n            Settings.Default.WindowOpacity = (int) (Opacity * 100);\n            Settings.Default.Save();\n\n    Logger.I(TAG, \"FormMain_FormClosed completed\");\n}", "CodeBleu_score": 75.60061907418586}]}
{"instance_id": "afd99ce2de2b", "generation_result": [{"code": " private void SaveSettings(){\n\t     try {\n         // \u4fdd\u5b58\u7a97\u53e3\u4f4d\u7f6e\n         if (WindowState == FormWindowState.Normal) {\n             Settings.Default.MainFormLocation = Location;\n         }\n\n         // \u4fdd\u5b58\u7a97\u53e3\u5927\u5c0f\n         Settings.Default.MainFormSize = Size;\n\n         // \u4fdd\u5b58\u5bfc\u822a\u5bb9\u5668\u95f4\u9694\u4f4d\u7f6e\n         Settings.Default.NavContainerSplitterDistance = NavContainer.SplitterDistance;\n\n         // \u4fdd\u5b58\u7a97\u53e3\u7684\u4e0d\u900f\u660e\u5ea6\n         Settings.Default.WindowOpacity = (int) (Opacity * 100);\n\n         // \u4fdd\u5b58\u81ea\u52a8\u590d\u5236\u9009\u9879\u72b6\u6001\n         Settings.Default.AutoCopy = ChkAutoCopy.Checked;\n\n         // \u4fdd\u5b58\u8bbe\u7f6e\n         Settings.Default.Save();\n     }\n     catch (Exception ex) {\n         Logger.E(TAG, \"Saving settings error\", ex);\n         MessageBox.Show(Resources.SettingSaveError + ex.Message, Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n     }\n }", "CodeBleu_score": 57.430464117849844}, {"code": " private void SaveSettings(){\n\t            try {\n                Settings.Default.MainFormLocation = Location;\n                Settings.Default.MainFormSize = Size;\n                Settings.Default.NavContainerSplitterDistance = NavContainer.SplitterDistance;\n                Settings.Default.AutoCopy = ChkAutoCopy.Checked;\n                Settings.Default.Save();\n            } catch (Exception ex) {\n                Logger.E(TAG, \"Save settings error\", ex);\n                MessageBox.Show(Resources.SettingSaveError + ex.Message, Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n            }\n        }", "CodeBleu_score": 49.4340408592653}, {"code": " private void SaveSettings(){\n\t            Logger.I(TAG, \"SaveSettings enter\");\n            try {\n                // \u8bb0\u5f55\u5f53\u524d\u7a97\u53e3\u4f4d\u7f6e\n                if (WindowState == FormWindowState.Normal) {\n                    Settings.Default.MainFormLocation = Location;\n                    Logger.I(TAG, \"Save MainFormLocation: \" + Settings.Default.MainFormLocation);\n                }\n\n                // \u8bb0\u5f55\u5f53\u524d\u7a97\u53e3\u5927\u5c0f\n                Settings.Default.MainFormSize = Size;\n                Logger.I(TAG, \"Save MainFormSize: \" + Settings.Default.MainFormSize);\n\n                // \u8bb0\u5f55\u5bfc\u822a\u5bb9\u5668\u95f4\u9694\u4f4d\u7f6e\n                Settings.Default.NavContainerSplitterDistance = NavContainer.SplitterDistance;\n                Logger.I(TAG, \"Save NavContainer SplitterDistance: \" + Settings.Default.NavContainerSplitterDistance);\n\n                // \u8bb0\u5f55\u7a97\u53e3\u7684\u4e0d\u900f\u660e\u5ea6\n                Settings.Default.WindowOpacity = (int)(Opacity * 100);\n                Logger.I(TAG, \"Save window opacity: \" + Settings.Default.WindowOpacity);\n\n                // \u8bb0\u5f55\u81ea\u52a8\u590d\u5236\u9009\u9879\u72b6\u6001\n                Settings.Default.AutoCopy = ChkAutoCopy.Checked;\n                Logger.I(TAG, \"Save AutoCopy: \" + Settings.Default.AutoCopy);\n\n                // \u4fdd\u5b58\u8bbe\u7f6e\n                Settings.Default.Save();\n            } catch (Exception ex) {\n                Logger.E(TAG, \"Save settings failed.\", ex);\n                MessageBox.Show(Resources.SettingSaveError + ex.Message, Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n            }\n            Logger.I(TAG, \"SaveSettings completed\");\n        }", "CodeBleu_score": 57.98204295332021}]}
{"instance_id": "597cf3c3cb9f", "generation_result": [{"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\t    if (PageTabOrders != null) return PageTabOrders;\n    PageTabOrders = new List<Tuple<string, bool>>();\n    if (Settings.Default.PageTabOrders == null) {\n        foreach (var page in Pages) {\n            PageTabOrders.Add(new Tuple<string, bool>(page.Key, true));\n        }\n        return PageTabOrders;\n    }\n    var orders = Settings.Default.PageTabOrders.Split(';');\n    foreach (var order in orders) {\n        var items = order.Split(',');\n        if (items.Length != 2) continue;\n        var name = items[0];\n        var visible = bool.Parse(items[1]);\n        PageTabOrders.Add(new Tuple<string, bool>(name, visible));\n    }\n    return PageTabOrders;\n}", "CodeBleu_score": 41.319204018828636}, {"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\t  if (PageTabOrders != null) {\n    return PageTabOrders;\n  }\n  List<Tuple<string, bool>> tabOrders = new List<Tuple<string, bool>>();\n  if (Settings.Default.PageTabOrders == null) {\n    foreach (var page in Pages) {\n      tabOrders.Add(new Tuple<string, bool>(page.Key, true));\n    }\n  } else {\n    string[] orders = Settings.Default.PageTabOrders.Split(',');\n    foreach (string order in orders) {\n      string[] items = order.Split(':');\n      string name = items[0];\n      bool isVisible = bool.Parse(items[1]);\n      tabOrders.Add(new Tuple<string, bool>(name, isVisible));\n    }\n  }\n  return tabOrders;\n}", "CodeBleu_score": 35.92569782957701}, {"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\t  if (PageTabOrders != null) {\n    return PageTabOrders;\n  }\n  var tabOrders = new List<Tuple<string, bool>>();\n  if (Settings.Default.PageTabOrders == null) {\n    // \u5982\u679c\u6ca1\u6709\u9875\u9762\u9009\u9879\u5361\u987a\u5e8f\uff0c\u5219\u521b\u5efa\u9ed8\u8ba4\u7684\u9009\u9879\u5361\u987a\u5e8f\n    foreach (var page in Pages.Values) {\n      tabOrders.Add(new Tuple<string, bool>(page.Name, true));\n    }\n  } else {\n    // \u5982\u679c\u6709\u9875\u9762\u9009\u9879\u5361\u987a\u5e8f\uff0c\u5219\u8bfb\u53d6\u6bcf\u4e2a\u9009\u9879\u5361\u987a\u5e8f\n    var pageOrders = Settings.Default.PageTabOrders.Split(';');\n    foreach (var pageOrder in pageOrders) {\n      var parts = pageOrder.Split(':');\n      if (parts.Length == 2) {\n        var pageName = parts[0];\n        var isVisible = bool.Parse(parts[1]);\n        tabOrders.Add(new Tuple<string, bool>(pageName, isVisible));\n      }\n    }\n  }\n  return tabOrders;\n}", "CodeBleu_score": 39.52111800713357}]}
{"instance_id": "952af4cba521", "generation_result": [{"code": "public override void Save(FrameInfo info){\n\t    LogWriter.Log($\\\"Saving frame {info.Path}...\\\");\n    LogWriter.Log($\\\"Frame data length: {info.DataLength}\\\");\n    LogWriter.Log($\\\"Current file stream length: {FileStream.Length}\\\");\n\n    CompressionStream.Write(info.Data, 0, info.DataLength);\n    CompressionStream.Flush();\n\n    info.Data = null;\n\n    Project.Frames.Add(info);\n}", "CodeBleu_score": 48.52011545226267}, {"code": "public override void Save(FrameInfo info){\n\t    LogWriter.Log($\\\"Saving frame {FrameCount} with length {info.DataLength} and current stream length {Stream.Length}\\\");\n    CompressionStream.Write(info.Data, 0, info.DataLength);\n    CompressionStream.Flush();\n    info.Data = null;\n    Project.Frames.Add(info);\n}", "CodeBleu_score": 44.68607989677673}, {"code": "public override void Save(FrameInfo info){\n\t    LogWriter.Log($\\\"Frame data length: {info.DataLength}, current file stream length: {FileStream.Length}\\\");\n    CompressionStream.Write(info.Data, 0, info.DataLength);\n    CompressionStream.Flush();\n    info.Data = null;\n    Project.Frames.Add(info);\n}", "CodeBleu_score": 45.65786433747652}]}
{"instance_id": "f9417f7056c0", "generation_result": [{"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\t    // Get the surface description of the texture.\n    var desc = texture.Description;\n\n    // Create a surface interface for CPU access.\n    var surface = new DataRectangle(buffer, cursorWidth, cursorHeight, desc.Width * 4);\n    var mappedRect = surface.MapMode(MapMode.ReadWrite);\n\n    // Draw the cursor based on the cursor type.\n    switch (info.Type) {\n        case 0: // Monochrome\n            DrawMonochromeCursor(mappedRect, cursorWidth, cursorHeight, info.Pitch, leftCut, topCut);\n            break;\n        case 1: // Color\n            DrawColorCursor(mappedRect, cursorWidth, cursorHeight, info.Pitch, leftCut, topCut);\n            break;\n        case 2: // Masked color\n            DrawMaskedColorCursor(mappedRect, cursorWidth, cursorHeight, info.Pitch, leftCut, topCut);\n            break;\n    }\n\n    // Unmap the surface to release the CPU access.\n    surface.Unmap();\n}", "CodeBleu_score": 50.0294216102667}, {"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\t", "CodeBleu_score": 8.160576900365587}, {"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\t", "CodeBleu_score": 8.160576900365587}]}
{"instance_id": "3eb27d345e3c", "generation_result": [{"code": "public static IUploader CreateCloud(UploadDestinations service){\n\t\nswitch (service) {\n\ncase UploadDestinations.Imgur:\nreturn new ImgurUploader();\n\ncase UploadDestinations.Yandex:\nreturn new YandexDiskUploader();\n\ndefault:\nthrow new NotImplementedException();\n\n}\n\n}", "CodeBleu_score": 72.17433914424835}, {"code": "public static IUploader CreateCloud(UploadDestinations service){\n\t    switch (service) {\n        case UploadDestinations.Imgur:\n            return new ImgurUploader();\n        case UploadDestinations.Yandex:\n            return new YandexDiskUploader();\n        default:\n            throw new NotImplementedException();\n    }\n}", "CodeBleu_score": 75.95094417286296}, {"code": "public static IUploader CreateCloud(UploadDestinations service){\n\t    switch (service) {\n        case UploadDestinations.Imgur:\n            return new Imgur();\n        case UploadDestinations.Yandex:\n            return new YandexDisk();\n        default:\n            throw new NotImplementedException();\n    }\n}", "CodeBleu_score": 82.78994661271675}]}
{"instance_id": "8e8c5ad2d18c", "generation_result": [{"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\t        if (preset is not YandexDiskUploadPreset yandexDiskUploadPreset)\n        {\n            throw new Exception($\"Invalid preset type {preset.GetType().Name}\");\n        }\n\n        if (!File.Exists(path))\n        {\n            throw new Exception($\"File not found: {path}\");\n        }\n\n        var uploadLink = await GetUploadLinkAsync(yandexDiskUploadPreset, cancellationToken);\n\n        if (uploadLink is null)\n        {\n            throw new Exception(\"Upload link is invalid\");\n        }\n\n        await using var stream = File.OpenRead(path);\n        await UploadFileAsync(uploadLink, stream, cancellationToken, progressCallback);\n\n        var downloadLink = await GetDownloadLinkAsync(yandexDiskUploadPreset, cancellationToken);\n\n        if (downloadLink is null)\n        {\n            throw new Exception(\"Download link is invalid\");\n        }\n\n        var history = new YandexDiskHistory\n        {\n            Name = Path.GetFileName(path),\n            Path = path,\n            Url = downloadLink,\n            UploadDate = DateTime.Now,\n            Uploader = nameof(YandexDisk),\n            UploaderName = yandexDiskUploadPreset.Name\n        };\n\n        return history;\n    }", "CodeBleu_score": 54.25305950722008}, {"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\t        if (!File.Exists(path))\n        {\n            throw new UploadException(\"File not found\");\n        }\n\n        var uploadLink = await GetUploadLinkAsync(preset, cancellationToken);\n\n        if (string.IsNullOrEmpty(uploadLink))\n        {\n            throw new UploadException(\"Upload link is invalid\");\n        }\n\n        var fileName = Path.GetFileName(path);\n        var fileSize = new FileInfo(path).Length;\n\n        using var fileStream = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.Read);\n        using var httpClient = new HttpClient();\n        using var content = new StreamContent(fileStream);\n\n        content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(\"application/octet-stream\");\n\n        var response = await httpClient.PutAsync(uploadLink, content, cancellationToken);\n\n        if (!response.IsSuccessStatusCode)\n        {\n            throw new UploadException(\"Upload failed\");\n        }\n\n        var downloadLink = await GetDownloadLinkAsync(preset, fileName, cancellationToken);\n\n        if (string.IsNullOrEmpty(downloadLink))\n        {\n            throw new UploadException(\"Download link is invalid\");\n        }\n\n        var historyRecord = new HistoryRecord\n        {\n            Name = fileName,\n            Size = fileSize,\n            UploadTime = DateTime.Now,\n            Url = downloadLink,\n            Uploader = nameof(YandexDisk)\n        };\n\n        return historyRecord;\n    }", "CodeBleu_score": 51.89938836671099}, {"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\t        if (!File.Exists(path))\n        {\n            throw new UploadException(\"File not found\");\n        }\n\n        var uploadLink = await GetUploadLinkAsync(preset, cancellationToken);\n\n        if (string.IsNullOrEmpty(uploadLink))\n        {\n            throw new UploadException(\"Invalid upload link\");\n        }\n\n        using var fileStream = File.OpenRead(path);\n\n        var fileSize = fileStream.Length;\n        var uploadProgress = 0.0;\n\n        var request = new HttpRequestMessage(HttpMethod.Put, uploadLink)\n        {\n            Content = new StreamContent(fileStream)\n        };\n\n        using var client = new HttpClient();\n        using var response = await client.SendAsync(request, HttpCompletionOption.ResponseHeadersRead, cancellationToken);\n\n        if (response.StatusCode != HttpStatusCode.Created)\n        {\n            throw new UploadException(\"Failed to upload file\");\n        }\n\n        var downloadLink = await GetDownloadLinkAsync(preset, cancellationToken);\n\n        if (string.IsNullOrEmpty(downloadLink))\n        {\n            throw new UploadException(\"Invalid download link\");\n        }\n\n        var history = new HistoryRecord\n        {\n            Name = Path.GetFileName(path),\n            Size = fileSize,\n            UploadDate = DateTime.Now,\n            Uploader = \"Yandex Disk\",\n            UploaderId = \"Yandex Disk\",\n            UploaderUrl = \"https://disk.yandex.com/\",\n            UploaderIconUrl = \"https://disk.yandex.com/favicon.ico\",\n            UploaderFileUrl = downloadLink\n        };\n\n        return history;\n    }", "CodeBleu_score": 49.99932389077686}]}
{"instance_id": "0c0b742bf9e6", "generation_result": [{"code": "internal virtual void StartCapture(){\n\t    if (UserSettings.All.UseGarbageCollection) {\n        GarbageTimer.Start();\n    }\n\n    UserSettings.Lock();\n    _captureToken = new CancellationTokenSource();\n    Capture = GetDirectCapture();\n    Task.Run(() => CaptureLoop(_captureToken.Token, GetCaptureInterval()), _captureToken.Token);\n}", "CodeBleu_score": 46.14036791001786}, {"code": "internal virtual void StartCapture(){\n\t    //Start the frame rate with either a fixed or variable delay and set HasImpreciseCapture to false.\n    if (HasFixedDelay())\n    {\n        //Start the fixed delay timer.\n        DelayTimer.Interval = GetFixedDelay();\n        DelayTimer.Tick += DelayTimer_Tick;\n        DelayTimer.Start();\n\n        HasImpreciseCapture = false;\n    }\n    else\n    {\n        //Start the variable delay timer.\n        DelayTimer.Interval = 1000 / UserSettings.All.LatestFps;\n        DelayTimer.Tick += DelayTimer_Tick;\n        DelayTimer.Start();\n\n        HasImpreciseCapture = true;\n    }\n\n    //If forced garbage collection is enabled in the user settings, start the garbage collection timer.\n    if (UserSettings.All.UseGarbageCollection)\n        GarbageTimer.Start();\n\n    //Lock the user settings.\n    UserSettings.Lock();\n\n    //Create a cancellation token for the capture process.\n    _captureToken = new CancellationTokenSource();\n\n    //Run the capture loop in a new task using the specified capture interval.\n    Task.Factory.StartNew(CaptureLoop, _captureToken.Token, TaskCreationOptions.LongRunning, TaskScheduler.Default);\n}", "CodeBleu_score": 41.29427482930302}, {"code": "internal virtual void StartCapture(){\n\t    if (UserSettings.All.CaptureFrequency == CaptureFrequencies.PerSecond && !HasFixedDelay()) {\n        UserSettings.All.LatestFps = GetLatestFps();\n    }\n\n    if (UserSettings.All.UseForcedGarbageCollection) {\n        GarbageTimer.Start();\n    }\n\n    UserSettings.Lock();\n\n    _captureToken = new CancellationTokenSource();\n    Task.Run(async () => {\n        await CaptureLoop(_captureToken.Token, GetCaptureInterval());\n    });\n}", "CodeBleu_score": 44.61528502706415}]}
{"instance_id": "8f8be335465f", "generation_result": [{"code": "private void CaptureWithCursor(int interval){\n\t    var stopwatch = new Stopwatch();\n\n    while (!_captureToken.IsCancellationRequested) {\n        stopwatch.Restart();\n\n        var frame = new FrameWithCursor(Capture.CaptureFrame());\n        KeyList.Clear();\n        Capture.CaptureFrame(frame);\n        FrameCount++;\n\n        if (stopwatch.ElapsedMilliseconds < interval) {\n            Thread.Sleep(interval - (int)stopwatch.ElapsedMilliseconds);\n        }\n\n        stopwatch.Stop();\n    }\n}", "CodeBleu_score": 51.401339185863584}, {"code": "private void CaptureWithCursor(int interval){\n\t    var stopwatch = new Stopwatch();\n    stopwatch.Start();\n\n    while (!_captureToken.IsCancellationRequested) {\n        stopwatch.Restart();\n        var frame = new Frame(UserSettings.All.LatestFps);\n        frame.Cursor = Capture.CaptureCursor();\n        KeyList.Clear();\n        Capture.CaptureFrame(frame);\n        FrameCount++;\n\n        if (stopwatch.ElapsedMilliseconds < interval) {\n            Thread.Sleep(interval - (int)stopwatch.ElapsedMilliseconds);\n        }\n    }\n\n    stopwatch.Stop();\n}", "CodeBleu_score": 47.93034612837182}, {"code": "private void CaptureWithCursor(int interval){\n\t    var stopwatch = new Stopwatch();\n    stopwatch.Start();\n\n    while (!_captureToken.IsCancellationRequested) {\n        stopwatch.Restart();\n\n        var frame = new Frame(GetFrameCount());\n        KeyList.Clear();\n\n        Capture.CaptureFrame(frame);\n\n        UpdateFrameCount();\n\n        var elapsed = stopwatch.ElapsedMilliseconds;\n        if (elapsed < interval) {\n            Thread.Sleep(interval - (int)elapsed);\n        }\n\n        stopwatch.Stop();\n    }\n}", "CodeBleu_score": 51.1137452009096}]}
{"instance_id": "8ad9c7b2a317", "generation_result": [{"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\t    if (UsingBorderImplementation) {\n        return base.ArrangeOverride(arrangeSize);\n    }\n\n    var child = Child;\n    if (child == null) {\n        return arrangeSize;\n    }\n\n    // Use the public Padding property if it's set\n    var padding = Padding;\n    if (padding.Equals(new Thickness())) {\n        padding = DefaultPadding;\n    }\n\n    var childWidth = arrangeSize.Width;\n    var childHeight = arrangeSize.Height;\n\n    // If there is an actual constraint, then reserve space for the chrome\n    if (!double.IsInfinity(childWidth)) {\n        childWidth = Math.Max(0.0, childWidth - padding.Left - padding.Right);\n    }\n\n    if (!double.IsInfinity(childHeight)) {\n        childHeight = Math.Max(0.0, childHeight - padding.Top - padding.Bottom);\n    }\n\n    child.Arrange(new Rect(padding.Left, padding.Top, childWidth, childHeight));\n    return arrangeSize;\n}", "CodeBleu_score": 79.90912519874645}, {"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\t    if (UsingBorderImplementation) {\n        return base.ArrangeOverride(arrangeSize);\n    }\n\n    var child = Child;\n    if (child == null) {\n        return arrangeSize;\n    }\n\n    var padding = Padding;\n    if (padding.Equals(new Thickness())) {\n        padding = DefaultPadding;\n    }\n\n    var childWidth = arrangeSize.Width;\n    var childHeight = arrangeSize.Height;\n\n    if (!double.IsInfinity(childWidth)) {\n        childWidth = Math.Max(0.0, childWidth - padding.Left - padding.Right);\n    }\n\n    if (!double.IsInfinity(childHeight)) {\n        childHeight = Math.Max(0.0, childHeight - padding.Top - padding.Bottom);\n    }\n\n    child.Arrange(new Rect(padding.Left, padding.Top, childWidth, childHeight));\n\n    return arrangeSize;\n}", "CodeBleu_score": 79.90912519874645}, {"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\t    if (UsingBorderImplementation) {\n        // Revert to the Border implementation\n        return base.ArrangeOverride(arrangeSize);\n    }\n\n    var child = Child;\n    if (child == null) {\n        return arrangeSize;\n    }\n\n    // Use the public Padding property if it's set\n    var padding = Padding;\n    if (padding.Equals(new Thickness())) {\n        padding = DefaultPadding;\n    }\n\n    var childWidth = arrangeSize.Width;\n    var childHeight = arrangeSize.Height;\n\n    // If there is an actual constraint, then reserve space for the chrome\n    if (!double.IsInfinity(childWidth)) {\n        childWidth = Math.Max(0.0, childWidth - padding.Left - padding.Right);\n    }\n\n    if (!double.IsInfinity(childHeight)) {\n        childHeight = Math.Max(0.0, childHeight - padding.Top - padding.Bottom);\n    }\n\n    child.Arrange(new Rect(padding.Left, padding.Top, childWidth, childHeight));\n\n    // Add on the reserved space for the chrome\n    return arrangeSize;\n}", "CodeBleu_score": 79.90912519874645}]}
{"instance_id": "719b23bc4229", "generation_result": [{"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\t    base.OnLostFocus(e);\n\n    if (!UpdateOnInput)\n    {\n        if (string.IsNullOrEmpty(Text) || !IsTextAllowed(Text))\n        {\n            Value = DefaultValueIfEmpty;\n            return;\n        }\n    }\n\n    _ignore = true;\n\n    if (!UpdateOnInput)\n    {\n        Value = Math.Round(Convert.ToDecimal(Text, CultureInfo.CurrentCulture) / Scale, Decimals);\n        _ignore = false;\n    }\n\n    Text = Value == EmptyIfValue ? \"\" : string.Format(CultureInfo.CurrentCulture, _format, Value * Scale);\n}", "CodeBleu_score": 67.71972030640421}, {"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\t    base.OnLostFocus(e);\n\n    if (!UpdateOnInput)\n    {\n        if (string.IsNullOrEmpty(Text) || !IsTextAllowed(Text))\n        {\n            Value = DefaultValueIfEmpty;\n            return;\n        }\n    }\n\n    _ignore = true;\n\n    Value = Math.Round(Convert.ToDecimal(Text, CultureInfo.CurrentCulture) / Scale, Decimals);\n\n    _ignore = false;\n\n    if (UpdateOnInput)\n        Text = Value == EmptyIfValue ? \"\" : string.Format(CultureInfo.CurrentCulture, _format, Value * Scale);\n}", "CodeBleu_score": 63.72585728396574}, {"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\t    base.OnLostFocus(e);\n\n    if (!UpdateOnInput) {\n        if (string.IsNullOrEmpty(Text) || !IsTextAllowed(Text)) {\n            Value = DefaultValueIfEmpty;\n            return;\n        }\n    }\n\n    _ignore = true;\n\n    Value = Math.Round(Convert.ToDecimal(Text, CultureInfo.CurrentCulture) / Scale, Decimals);\n\n    _ignore = false;\n\n    if (UpdateOnInput) {\n        Text = Value == EmptyIfValue ? \"\" : string.Format(CultureInfo.CurrentCulture, _format, Value * Scale);\n    }\n}", "CodeBleu_score": 63.21854926671158}]}
{"instance_id": "4bdfdcf8e5ea", "generation_result": [{"code": "protected override void OnKeyDown(KeyEventArgs e){\n\t    if (e.Key == Key.Enter || e.Key == Key.Return) {\n        e.Handled = true;\n        MoveFocus(new TraversalRequest(FocusNavigationDirection.Next));\n    }\n    base.OnKeyDown(e);\n}", "CodeBleu_score": 86.4567462503703}, {"code": "protected override void OnKeyDown(KeyEventArgs e){\n\t    if (e.Key == Key.Return || e.Key == Key.Enter) {\n        e.Handled = true;\n        TraversalRequest request = new TraversalRequest(FocusNavigationDirection.Next);\n        UIElement element = FocusManager.GetFocusedElement(this);\n        if (element is FrameworkElement) {\n            (element as FrameworkElement).MoveFocus(request);\n        }\n    }\n    base.OnKeyDown(e);\n}", "CodeBleu_score": 51.624824325883246}, {"code": "protected override void OnKeyDown(KeyEventArgs e){\n\t    if (e.Key == Key.Enter) {\n        e.Handled = true;\n        MoveFocus(new TraversalRequest(FocusNavigationDirection.Next));\n    }\n    base.OnKeyDown(e);\n}", "CodeBleu_score": 58.67508040637824}]}
{"instance_id": "e9d822d22392", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    if (IsMouseCaptured && e.LeftButton == MouseButtonState.Pressed) {\n        switch (DrawingMode) {\n            case DrawingModes.Select:\n                if (_selectedShapes.Count == 0 || (Keyboard.Modifiers & ModifierKeys.Control) != 0) {\n                    Selection = new Rect(new Point(_startPoint.X, _startPoint.Y), new Point(e.GetPosition(this).X, e.GetPosition(this).Y));\n                }\n                break;\n            case DrawingModes.Shape:\n                CalculateOrientation(_startPoint, e.GetPosition(this));\n                RenderShape();\n                break;\n        }\n    }\n\n    base.OnMouseMove(e);\n}", "CodeBleu_score": 34.70355067388316}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    if (IsMouseCaptured) {\n        switch (DrawingMode) {\n            case DrawingModes.Select:\n                if ((Keyboard.Modifiers & ModifierKeys.Control) == 0) {\n                    RemoveAllAdorners();\n                    _selectedShapes.Clear();\n                }\n\n                //When the user clicks exactly on top of a shape, it will be selected.\n                var hitTest = _mainCanvas.Children.OfType<Shape>().Where(w => w.Tag == null).FirstOrDefault(f => f.RenderedGeometry.FillContains(e.GetPosition(f)));\n\n                if (hitTest != null) {\n                    SelectShape(hitTest);\n                } else {\n                    //Starts drawing selection retangle.\n                    Selection = new Rect(_startPoint, new Size(e.GetPosition(this).X - _startPoint.X, e.GetPosition(this).Y - _startPoint.Y));\n                }\n\n                break;\n            case DrawingModes.Shape:\n                CalculateOrientation(_startPoint, e.GetPosition(this));\n                RenderShape();\n                break;\n        }\n    }\n\n    e.Handled = true;\n    base.OnMouseMove(e);\n}", "CodeBleu_score": 30.851837356667254}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    if (IsMouseCaptured) {\n        if (DrawingMode == DrawingModes.Select) {\n            if (_selectedShapes.Count == 0 || (Keyboard.Modifiers & ModifierKeys.Control) != 0) {\n                Selection = new Rect(new Point(_startPoint.X, _startPoint.Y), new Point(e.GetPosition(this).X, e.GetPosition(this).Y));\n            }\n        } else if (DrawingMode == DrawingModes.Shape) {\n            CalculateOrientation(_startPoint, e.GetPosition(this));\n            RenderRegion = new Rect(new Point(_startPoint.X, _startPoint.Y), new Point(e.GetPosition(this).X, e.GetPosition(this).Y));\n            RenderShape();\n        }\n    }\n    base.OnMouseMove(e);\n}", "CodeBleu_score": 42.51071926166875}]}
{"instance_id": "b853f670928a", "generation_result": [{"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\t    if (!(sender is Thumb)) return;\n\n    e.Handled = true;\n\n    //Change the size by the amount the user drags the cursor.\n    var width = Math.Max(_adornedElement.DesiredSize.Width + e.HorizontalChange, 10);\n    var height = Math.Max(_adornedElement.DesiredSize.Height + e.VerticalChange, 10);\n\n    if (Canvas.GetLeft(_adornedElement) + width > _parent.ActualWidth)\n        width = _parent.ActualWidth - Canvas.GetLeft(_adornedElement);\n\n    if (Canvas.GetTop(_adornedElement) + height > _parent.ActualHeight)\n        height = _parent.ActualHeight - Canvas.GetTop(_adornedElement);\n\n    RaiseManipulatedEvent(width - _adornedElement.Width, height - _adornedElement.Height);\n\n    _adornedElement.Height = height;\n    _adornedElement.Width = width;\n\n    AfterManipulation();\n}", "CodeBleu_score": 71.64379102002044}, {"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\t    if (!(sender is Thumb)) return;\n\n    e.Handled = true;\n\n    //Change the size by the amount the user drags the cursor.\n    var width = Math.Max(_adornedElement.DesiredSize.Width + e.HorizontalChange, 10);\n    var height = Math.Max(_adornedElement.DesiredSize.Height + e.VerticalChange, 10);\n\n    if (Canvas.GetLeft(_adornedElement) + width > _parent.ActualWidth)\n        width = _parent.ActualWidth - Canvas.GetLeft(_adornedElement);\n\n    if (Canvas.GetTop(_adornedElement) + height > _parent.ActualHeight)\n        height = _parent.ActualHeight - Canvas.GetTop(_adornedElement);\n\n    RaiseManipulatedEvent(width - _adornedElement.Width, height - _adornedElement.Height);\n\n    _adornedElement.Height = height;\n    _adornedElement.Width = width;\n\n    AfterManipulation();\n}", "CodeBleu_score": 71.64379102002044}, {"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\t    if (!(sender is Thumb)) return;\n\n    e.Handled = true;\n\n    //Change the size by the amount the user drags the cursor.\n    var width = Math.Max(_adornedElement.DesiredSize.Width + e.HorizontalChange, 10);\n    var height = Math.Max(_adornedElement.DesiredSize.Height + e.VerticalChange, 10);\n\n    if (Canvas.GetLeft(_adornedElement) + width > _parent.ActualWidth)\n        width = _parent.ActualWidth - Canvas.GetLeft(_adornedElement);\n\n    if (Canvas.GetTop(_adornedElement) + height > _parent.ActualHeight)\n        height = _parent.ActualHeight - Canvas.GetTop(_adornedElement);\n\n    RaiseManipulatedEvent(width - _adornedElement.Width, height - _adornedElement.Height);\n\n    _adornedElement.Height = height;\n    _adornedElement.Width = width;\n\n    AfterManipulation();\n}", "CodeBleu_score": 71.64379102002044}]}
{"instance_id": "4f79040b5f53", "generation_result": [{"code": "public ComboBoxesViewModel(){\n\t    List<int> integerList = new List<int>();\n    for (int i = 0; i < 1000; i++) {\n        integerList.Add(i);\n    }\n    IntegerList = integerList;\n\n    List<string> stringList = new List<string>() {\n        \"Item One\",\n        \"Item Two\",\n        \"Item Three\",\n        \"Item Four\",\n        \"Item Five\"\n    };\n    StringList = stringList;\n\n    SelectedValueOne = 0;\n\n    List<string> longStringList = new List<string>();\n    for (int i = 0; i < 1000; i++) {\n        longStringList.Add(Path.GetRandomFileName());\n    }\n    LongStringList = longStringList;\n}", "CodeBleu_score": 40.121969415698715}, {"code": "public ComboBoxesViewModel(){\n\t    ValueOne = Enumerable.Range(0, 1000).ToList();\n    TextTwo = new List<string> { \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\" };\n    ValidationOutlined = new List<string> { \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\" };\n    ValidationFilled = new List<string> { \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\" };\n    SelectedValueOne = ValueOne.First();\n    SelectedTextTwo = null;\n    Random rand = new Random();\n    for (int i = 0; i < 1000; i++) {\n        ValidationOutlined.Add(Path.GetRandomFileName());\n        ValidationFilled.Add(Path.GetRandomFileName());\n    }\n}", "CodeBleu_score": 51.764259679362134}, {"code": "public ComboBoxesViewModel(){\n\t    // Create a list of integers from 0 to 999\n    var integerList = new List<int>();\n    for (int i = 0; i < 1000; i++) {\n        integerList.Add(i);\n    }\n\n    // Create a list of string items\n    var stringList = new List<string>() {\n        \"Item 1\",\n        \"Item 2\",\n        \"Item 3\",\n        \"Item 4\",\n        \"Item 5\",\n        \"Item 6\",\n        \"Item 7\",\n        \"Item 8\",\n        \"Item 9\",\n        \"Item 10\",\n    };\n\n    // Set the selected value from the integer list\n    SelectedValueOne = integerList[0];\n\n    // Initialize the selected text to null\n    SelectedTextTwo = null;\n\n    // Create a long list of random string values\n    var random = new Random();\n    var randomStringList = new List<string>();\n    for (int i = 0; i < 1000; i++) {\n        var fileName = Path.GetRandomFileName().Replace(\".\", \"\");\n        randomStringList.Add(fileName);\n    }\n\n    // Set the selected value from the random string list\n    SelectedValidationOutlined = randomStringList[0];\n\n    // Set the selected value from the random string list\n    SelectedValidationFilled = randomStringList[0];\n}", "CodeBleu_score": 40.766909157930414}]}
{"instance_id": "ca40ae89e1a2", "generation_result": [{"code": "private async Task RunDialog() {\n\t    var sampleDialog = new SampleDialog();\n    var sampleDialogViewModel = new SampleDialogViewModel();\n    sampleDialog.DataContext = sampleDialogViewModel;\n    var result = await DialogHost.Show(sampleDialog, \"RootDialog\", (sender, args) =>\n    {\n        Debug.WriteLine($\"Dialog closed: {args.Parameter}\");\n    });\n    Debug.WriteLine($\"Dialog result: {result}\");\n}", "CodeBleu_score": 23.442710488091954}, {"code": "private async Task RunDialog() {\n\t    var dialog = new SampleDialog();\n    var vm = new SampleDialogViewModel();\n    dialog.DataContext = vm;\n    var result = await DialogHost.Show(dialog, \"RootDialog\", (sender, args) =>\n    {\n        Debug.WriteLine($\"Dialog closed: {args.Parameter}\");\n    });\n    Debug.WriteLine($\"Dialog result: {result}\");\n}", "CodeBleu_score": 25.172695240352315}, {"code": "private async Task RunDialog() {\n\t\n    var dialog = new SampleDialog();\n    var dialogVm = new SampleDialogViewModel();\n    dialog.DataContext = dialogVm;\n\n    // Show the dialog\n    var result = await DialogHost.Show(dialog, \"RootDialog\", (sender, args) =>\n    {\n        Debug.WriteLine($\"Dialog closed with result: {args.Parameter}\");\n    });\n\n    // Log the result\n    Debug.WriteLine($\"Dialog closed with result: {result}\");\n}", "CodeBleu_score": 24.588601572615516}]}
{"instance_id": "d82f32ed6e43", "generation_result": [{"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\t    var paletteHelper = new PaletteHelper();\n    var theme = paletteHelper.GetTheme();\n    modificationAction?.Invoke(theme);\n    paletteHelper.SetTheme(theme);\n}", "CodeBleu_score": 75.80807886702394}, {"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\t    PaletteHelper paletteHelper = new PaletteHelper();\n    ITheme theme = paletteHelper.GetTheme();\n    modificationAction?.Invoke(theme);\n    paletteHelper.SetTheme(theme);\n}", "CodeBleu_score": 68.8323481082376}, {"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\t    var paletteHelper = new PaletteHelper();\n    var theme = paletteHelper.GetTheme();\n    modificationAction?.Invoke(theme);\n    paletteHelper.SetTheme(theme);\n}", "CodeBleu_score": 75.80807886702394}]}
{"instance_id": "8cf8182d763e", "generation_result": [{"code": "private object? CreateContent(){\n\t    var content = Activator.CreateInstance(_contentType);\n    if (_dataContext != null && content is FrameworkElement element) {\n        element.DataContext = _dataContext;\n    }\n    return content;\n}", "CodeBleu_score": 99.0535775150352}, {"code": "private object? CreateContent(){\n\t    var content = Activator.CreateInstance(_contentType);\n    if (_dataContext != null && content is FrameworkElement element) element.DataContext = _dataContext;\n    return content;\n}", "CodeBleu_score": 84.69851814078122}, {"code": "private object? CreateContent(){\n\t    var content = Activator.CreateInstance(_contentType);\n    if (_dataContext != null && content is FrameworkElement element) element.DataContext = _dataContext;\n    return content;\n}", "CodeBleu_score": 84.69851814078122}]}
{"instance_id": "96cb26c3eacc", "generation_result": [{"code": "private void AcceptSample4Dialog(object? _){\n\t    Sample4Content = new SampleProgressDialog();\n    Task.Delay(TimeSpan.FromSeconds(3))\n        .ContinueWith((t, _) => IsSample4DialogOpen = false, null,\n            TaskScheduler.FromCurrentSynchronizationContext());\n}", "CodeBleu_score": 97.24656433391617}, {"code": "private void AcceptSample4Dialog(object? _){\n\t    Sample4Content = new SampleProgressDialog();\n    Task.Delay(TimeSpan.FromSeconds(3)).ContinueWith((t, _) => IsSample4DialogOpen = false, null, TaskScheduler.FromCurrentSynchronizationContext());\n}", "CodeBleu_score": 87.69994983767101}, {"code": "private void AcceptSample4Dialog(object? _){\n\t    Sample4Content = new SampleProgressDialog();\n    Task.Delay(TimeSpan.FromSeconds(3))\n        .ContinueWith((t, _) => IsSample4DialogOpen = false, null,\n            TaskScheduler.FromCurrentSynchronizationContext());\n}", "CodeBleu_score": 97.24656433391617}]}
{"instance_id": "7afa49e4a449", "generation_result": [{"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\t    foreach (var trigger in _deviceTriggers) {\n        if (trigger.Device.Id == device.Id && trigger.Option == option) {\n            Triggered?.Invoke(trigger);\n        }\n    }\n}", "CodeBleu_score": 71.49536281106852}, {"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\t    foreach (var trigger in _deviceTriggers) {\n        if (trigger.Device.Id == device.Id && trigger.Option == option) {\n            Triggered?.Invoke(trigger);\n        }\n    }\n}", "CodeBleu_score": 71.49536281106852}, {"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\t    foreach (var trigger in _deviceTriggers) {\n        if (trigger.Device.Id == device.Id && trigger.Option == option) {\n            Triggered?.Invoke(trigger);\n        }\n    }\n}", "CodeBleu_score": 71.49536281106852}]}
{"instance_id": "50c38fc69dac", "generation_result": [{"code": "private void LoadAndRegister(){\n\t  _triggerManager.Clear();\n  _actions = Settings.Get<EarTrumpetAction[]>(c_actionsSettingKey) ?? new EarTrumpetAction[] { };\n  foreach (var action in _actions) {\n    foreach (var trigger in action.Triggers) {\n      _triggerManager.Register(trigger);\n    }\n  }\n}", "CodeBleu_score": 54.584847088440426}, {"code": "private void LoadAndRegister(){\n\t    _triggerManager.Clear();\n    var actions = Settings.Get<EarTrumpetAction[]>(c_actionsSettingKey);\n    if (actions != null)\n    {\n        foreach (var action in actions)\n        {\n            foreach (var trigger in action.Triggers)\n            {\n                _triggerManager.Register(trigger);\n            }\n        }\n    }\n}", "CodeBleu_score": 27.796644608425964}, {"code": "private void LoadAndRegister(){\n\t    _triggerManager.Clear();\n    var actions = Settings.Get<EarTrumpetAction[]>(c_actionsSettingKey);\n    if (actions == null)\n        actions = new EarTrumpetAction[] { };\n\n    foreach (var action in actions)\n    {\n        foreach (var trigger in action.Triggers)\n        {\n            _triggerManager.RegisterTrigger(trigger);\n        }\n    }\n}", "CodeBleu_score": 37.873747566052096}]}
{"instance_id": "ab8051e72909", "generation_result": [{"code": "private void OnTriggered(BaseTrigger trigger){\n\t    var action = Actions.FirstOrDefault(a => a.Triggers.Contains(trigger));\n    if (action != null) {\n        if (action.Conditions.All(c => c.Evaluate(LocalVariables))) {\n            TriggerAction(action);\n        }\n    }\n}", "CodeBleu_score": 80.68031143862896}, {"code": "private void OnTriggered(BaseTrigger trigger){\n\t    var action = Actions.FirstOrDefault(a => a.Triggers.Contains(trigger));\n    if (action == null) {\n        return;\n    }\n    if (!action.Conditions.All(c => c.IsMet())) {\n        return;\n    }\n    TriggerAction(action);\n}", "CodeBleu_score": 48.58865481654911}, {"code": "private void OnTriggered(BaseTrigger trigger){\n\t    if (trigger == null)\n        return;\n\n    var action = Actions.FirstOrDefault(a => a.Triggers.Contains(trigger));\n    if (action == null)\n        return;\n\n    if (!action.Conditions.All(c => c.Check()))\n        return;\n\n    TriggerAction(action);\n}", "CodeBleu_score": 44.5073139543807}]}
{"instance_id": "2f85d28001cf", "generation_result": [{"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\t    let variables_mentioning_name = self.scope_graph.borrow_mut().variables_mentioning(name);\n    let script_variables = variables_mentioning_name\n        .iter()\n        .filter(|(_, v)| v.is_script_variable())\n        .map(|(_, v)| v.as_script_variable().unwrap())\n        .collect::<Vec<_>>();\n    for script_variable in script_variables {\n        let poll_variable = script_variable.poll_variable.as_ref().unwrap();\n        let script_variable_name = script_variable.name.clone();\n        let script_variable_id = script_variable.id.clone();\n        let run_while_expression = script_variable.run_while_expression.clone();\n\n        let result = self.scope_graph.borrow_mut().evaluate_expression_in_scope(&poll_variable.expression, &poll_variable.scope);\n        match result {\n            Ok(result) => {\n                if result.is_true() {\n                    self.script_var_handler.add_script_variable(script_variable_id, script_variable_name, run_while_expression);\n                } else {\n                    self.script_var_handler.stop_script_variable(script_variable_id);\n                }\n            }\n            Err(err) => {\n                error_handling_ctx::print_error(err);\n            }\n        }\n    }\n}", "CodeBleu_score": 34.12879146058601}, {"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\t    let mut vars = self.scope_graph.borrow_mut().get_vars_mentioning(name);\n    vars = vars.into_iter().filter(|v| v.is_poll()).collect::<Vec<_>>();\n    for var in vars {\n        let result = self.script_var_handler.try_evaluate_run_while(&var);\n        if let Err(err) = result {\n            error_handling_ctx::print_error(err);\n        } else if result.is_ok() {\n            self.script_var_handler.add_poll_var(&var);\n        } else {\n            self.script_var_handler.remove_poll_var(&var);\n        }\n    }\n}", "CodeBleu_score": 28.078793713765744}, {"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\t    let variables = self.scope_graph.borrow().variables_mentioning(name);\n    for variable in variables.iter() {\n        if let ScriptVariable::Poll(poll_variable) = variable {\n            let scope_graph = self.scope_graph.borrow_mut();\n            let run_while_expression = poll_variable.run_while.clone();\n            let result = scope_graph.evaluate_expression(run_while_expression, &poll_variable.name);\n            if let Err(err) = result {\n                error_handling_ctx::print_error(err);\n            } else if let Ok(true) = result {\n                self.script_var_handler.add_variable(&poll_variable);\n            } else {\n                self.script_var_handler.stop_variable(&poll_variable);\n            }\n        }\n    }\n}", "CodeBleu_score": 33.45168327280605}]}
{"instance_id": "56f67ae91214", "generation_result": [{"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\t    let window = self.open_windows.remove(instance_id).ok_or_else(|| anyhow::anyhow(format_err(\\\"Window not found: {}\\\", instance_id)))?;\n    window.close();\n    let scope_graph = self.scope_graph.borrow_mut();\n    let scope_index = scope_graph.remove_scope(instance_id)?;\n    let used_globals = scope_graph.currently_used_globals();\n    let unused_globals = scope_graph.unused_globals_in_scope(scope_index);\n    for global_name in unused_globals {\n        let _ = self.script_var_handler.stop_for_variable(global_name);\n    }\n    self.script_var_handler.remove_all_for_scope(scope_index)?;\n    self.arguments.remove(instance_id);\n    Ok(())\n}", "CodeBleu_score": 42.353631574893534}, {"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\t    let window = self.open_windows.remove(instance_id).ok_or_else(|| anyhow::anyhow(format_err(format_err(\\\"Window not found: {}\\\", instance_id))))?;\n    let scope_graph = &*self.scope_graph.borrow();\n    let scope = scope_graph.get_scope_by_instance_id(instance_id);\n    if let Some(scope) = scope {\n        let scope_graph = self.scope_graph.borrow_mut();\n        let scope_graph = scope_graph.remove_scope(scope.index)?;\n        let used_globals_names = scope_graph.currently_used_globals();\n        let unused_globals = scope_graph\n            .global_scope()\n            .data\n            .iter()\n            .filter(|(key, _)| !used_globals_names.contains(*key))\n            .map(|(key, _)| key.clone())\n            .collect::<Vec<VarName>>();\n        for global in unused_globals {\n            self.script_var_handler.stop_for_variable(global)?;\n        }\n    }\n\n    self.open_windows_arguments.remove(instance_id);\n    Ok(())\n}", "CodeBleu_score": 41.28494450535744}, {"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\t", "CodeBleu_score": 14.586088025188115}]}
{"instance_id": "a496c83ce944", "generation_result": [{"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\t    log::info(\\\"Reloading config\\\");\n    self.script_var_handler.stop_all();\n\n    // replace script_var_handler with a new one\n    let new_script_var_handler = ScriptVarHandler::new(config.clone(), &self.scope_graph.borrow_mut());\n    let old_script_var_handler = self.script_var_handler.replace(new_script_var_handler);\n    let _ = old_script_var_handler.wait_for_termination();\n\n    log::info(\\\"Loaded config\\\");\n    self.eww_config = config;\n    self.scope_graph.borrow_mut().clear_with_initial_state(config.get_initial_state());\n\n    let open_windows = self.open_windows.clone();\n    let failed_windows = self.failed_windows.clone();\n    self.open_windows.clear();\n    self.failed_windows.clear();\n\n    for (instance_id, window_args) in open_windows {\n        self.open_window(window_args)?;\n    }\n\n    for instance_id in failed_windows {\n        if let Some(window_args) = self.instance_id_to_args.remove(&instance_id) {\n            self.open_window(window_args)?;\n        }\n    }\n\n    Ok(())\n}", "CodeBleu_score": 56.79940459390659}, {"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\t    log::info(\\\"Loading new config\\\");\n    self.script_var_handler.stop_all();\n    let old_handler = self.script_var_handler.replace(ScriptVarHandler::new());\n    old_handler.wait_for_termination()?;\n    log::info(\\\"New config: {}\\\", config);\n    self.eww_config = config;\n    self.scope_graph.borrow_mut().clear_with_initial_state(config.get_widget_definitions());\n    let open_windows = self.open_windows.keys().cloned().collect::<Vec<String>>();\n    let failed_windows = self.failed_windows.keys().cloned().collect::<Vec<String>>();\n    for instance_id in open_windows.into_iter().chain(failed_windows.into_iter()) {\n        if let Some(window_args) = self.instance_id_to_args.remove(&instance_id) {\n            self.open_window(&window_args)?;\n        } else {\n            log::warn(\\\"Failed to find window arguments for window with id '{}'\\\", instance_id);\n        }\n    }\n    Ok(())\n}", "CodeBleu_score": 61.54148233437107}, {"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\t    log::info(\\\"Reloading config\\\");\n    self.script_var_handler.stop();\n    let new_script_var_handler = ScriptVarHandler::new();\n    self.script_var_handler = new_script_var_handler;\n    let old_script_var_handler = self.script_var_handler.await;\n    log::info(\\\"Loaded new config\\\");\n    let mut old_script_var_handler_wait = old_script_var_handler.wait();\n    let open_window_ids = self.open_windows.keys().cloned().collect::<Vec<String>>();\n    let failed_window_ids = self.failed_windows.keys().cloned().collect::<Vec<String>>();\n    self.eww_config = config;\n    self.scope_graph.borrow_mut().clear_and_set_root_scope(config.get_root_scope());\n    for window_id in open_window_ids {\n        let window_args = self.instance_id_to_args.get(&window_id).unwrap();\n        self.open_window(window_args)?;\n    }\n    for window_id in failed_window_ids {\n        let window_args = self.instance_id_to_args.get(&window_id).unwrap();\n        self.open_window(window_args)?;\n    }\n    old_script_var_handler_wait.await;\n    Ok(())\n}", "CodeBleu_score": 55.53459301312464}]}
{"instance_id": "939eb758c6a2", "generation_result": [{"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\t", "CodeBleu_score": 8.294229199741606}, {"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\t    let css_provider = self.css_providers.get_mut(file_id).ok_or_else(|| {\n        let provider = gtk::CssProvider::new();\n        self.css_providers.insert(file_id, provider);\n        provider\n    })?;\n\n    let (line, message) = if let Err(err) = css_provider.load_from_data(css, gtk::CssProviderLoadFlags::NONE) {\n        let regex = Regex::new(r#\"\\((\\d+):(\\d+)-(\\d+):(\\d+)\\)\"#).unwrap();\n        let captures = regex.captures(err.message()).unwrap();\n        let start_line = captures[1].parse::<usize>().unwrap();\n        let start_col = captures[2].parse::<usize>().unwrap();\n        let end_line = captures[3].parse::<usize>().unwrap();\n        let end_col = captures[4].parse::<usize>().unwrap();\n        (start_line, message)\n    } else {\n        (0, \"\")\n    };\n\n    let start_offset = self.css_files.get(file_id).map(|file| file.start_offset).unwrap_or(0);\n    let end_offset = self.css_files.get(file_id).map(|file| file.end_offset).unwrap_or(0);\n\n    let span = if line > 0 {\n        let start = start_offset + (line - 1) * 1000000 + start_col;\n        let end = start_offset + (line - 1) * 1000000 + end_col;\n        Some(Span::new(start, end))\n    } else {\n        None\n    };\n\n    if let Some(span) = span {\n        let diag_error = DiagError::new(span, message);\n        Err(Error::CssError(diag_error))\n    } else {\n        Ok(())\n    }\n}", "CodeBleu_score": 32.35891155277318}, {"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\t    let mut css_provider = Gtk::CssProvider::new();\n    let load_result = css_provider.load_from_data(css.as_bytes());\n    if let Err(err) = load_result {\n        let message = err.message().to_string();\n        let (line, column) = match LINE_COLUMN_PATTERN.captures(&message) {\n            Some(captures) => (\n                captures.get(1).map(|m| m.as_str().parse().unwrap_or(1)),\n                captures.get(2).map(|m| m.as_str().parse().unwrap_or(1)),\n            ),\n            None => (None, None),\n        };\n\n        let span = if let (Some(line), Some(column)) = (line, column) {\n            let file_range = self.file_ranges.get(&file_id).unwrap_or(&Vec::new());\n            let line_start = file_range.iter().position(|r| r.line >= line).unwrap_or(0);\n            let line_end = file_range.iter().position(|r| r.line > line).unwrap_or(file_range.len());\n            let column_start = file_range[line_start].column;\n            let column_end = file_range[line_end - 1].column;\n            Some(Span::new(line_start, line_end, column_start, column_end))\n        } else {\n            None\n        };\n\n        Err(DiagError::new(message, span))\n    } else {\n        self.css_providers.insert(file_id, css_provider);\n        Ok(())\n    }\n}", "CodeBleu_score": 35.17441619593179}]}
{"instance_id": "4a881d16b9af", "generation_result": [{"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\t    let display = gdk::Display::get_default().context(\\\"Failed to get default display\\\")?;\n    let monitors = display.get_monitors().context(\\\"Failed to get monitors\\\")?;\n\n    let monitor = match identifier {\n        Some(identifier) => {\n        let monitor = monitors\n            .iter()\n            .find(|monitor| monitor.get_monitor_name() == identifier.name)\n            .context(\\\"Monitor not found\\\")?;\n        monitor\n    }\n        _ => monitors\n        .iter()\n        .find(|monitor| monitor.get_monitor_name() == \\\"primary\\\")\n        .context(\\\"Monitor not found\\\")?,\n    };\n\n    Ok(Monitor(monitor))\n}", "CodeBleu_score": 22.978825569895644}, {"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\t    let default_display = gdk::Display::get_default().context(\\\"Failed to get default display\\\")?;\n    let monitors = default_display.get_n_monitors()?;\n    let default_monitor = default_display.get_monitor_at_point(0, 0)?;\n    let monitor = match identifier {\n        Some(MonitorIdentifier::Default) => default_monitor,\n        Some(MonitorIdentifier::Index(index)) => {\n            if index < monitors as usize {\n                default_display.get_monitor(index)?\n            } else {\n                Err(anyhow::anyhow(format_err(\\\"Monitor index out of bounds, got {}, expected [0, {}]\\\", index, monitors - 1)))\n            }\n        }\n        _ => default_monitor,\n    };\n    Ok(Monitor(monitor))\n}", "CodeBleu_score": 22.40497355551532}, {"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\t    let display = gdk::Display::get_default().context(\\\"Failed to get default display\\\")?;\n    let monitors = display.get_monitors();\n    let monitor = match identifier {\n        Some(identifier) => {\n            monitors\n                .iter()\n                .find(|monitor| monitor.get_model().unwrap_or(\\\"\\\").contains(&identifier))\n                .ok_or_else(|| anyhow::anyhow(\\\"Could not find monitor with identifier {identifier}\\\"))\n        }\n        None => {\n            monitors\n                .iter()\n                .find(|monitor| monitor.is_primary())?\n                .context(\\\"Failed to find primary monitor\\\")?\n        }\n    };\n    Ok(Monitor(monitor))\n}", "CodeBleu_score": 26.90914183152594}]}
{"instance_id": "0d4bd8476c3b", "generation_result": [{"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\t", "CodeBleu_score": 11.441865677098976}, {"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\t    let offset = Coords::from_pixels(geometry.offset);\n    let size = Coords::from_pixels(geometry.size);\n    let x = match geometry.anchor_point.x {\\\n        AnchorPoint::Left => screen_rect.x() + offset.x,\\\n        AnchorPoint::Center => screen_rect.x() + (screen_rect.width() / 2) - (size.x / 2) + offset.x,\\\n        AnchorPoint::Right => screen_rect.x() + screen_rect.width() - size.x + offset.x,\\\n    };\n    let y = match geometry.anchor_point.y {\\\n        AnchorPoint::Top => screen_rect.y() + offset.y,\\\n        AnchorPoint::Center => screen_rect.y() + (screen_rect.height() / 2) - (size.y / 2) + offset.y,\\\n        AnchorPoint::Bottom => screen_rect.y() + screen_rect.height() - size.y + offset.y,\\\n    };\n    gdk::Rectangle::new(x, y, size.x, size.y)\n}", "CodeBleu_score": 48.96078609748269}, {"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\t    let x = match geometry.offset.x {\n        Some(x) => x,\n        None => screen_rect.x(),\n    };\n    let y = match geometry.offset.y {\n        Some(y) => y,\n        None => screen_rect.y(),\n    };\n    let width = match geometry.size.width {\n        Some(width) => width,\n        None => screen_rect.width(),\n    };\n    let height = match geometry.size.height {\n        Some(height) => height,\n        None => screen_rect.height(),\n    };\n\n    let x = match geometry.anchor.x {\n        Anchor::Left => x,\n        Anchor::Center => x + (screen_rect.width() - width) / 2,\n        Anchor::Right => x + screen_rect.width() - width,\n    };\n    let y = match geometry.anchor.y {\n        Anchor::Top => y,\n        Anchor::Center => y + (screen_rect.height() - height) / 2,\n        Anchor::Bottom => y + screen_rect.height() - height,\n    };\n\n    gdk::Rectangle::new(x, y, width, height)\n}", "CodeBleu_score": 57.15775592609167}]}
{"instance_id": "588081b260d0", "generation_result": [{"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\t", "CodeBleu_score": 12.877215628915417}, {"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\t", "CodeBleu_score": 12.877215628915417}, {"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\t    let window = Window::new(gtk::WindowType::Toplevel, x, y);\n    if window_init.backend_options.x11.window_type == X11WindowType::Dialog {\n        window.set_decorated(false);\n    }\n    window.set_resizable(window_init.resizable);\n    match window_init.stacking {\n        WindowStacking::Foreground => {\n            window.set_keep_above(true);\n            window.set_keep_below(false);\n        }\n        WindowStacking::Background => {\n            window.set_keep_above(false);\n            window.set_keep_below(true);\n        }\n        WindowStacking::Bottom => {\n            window.set_keep_above(false);\n            window.set_keep_below(true);\n        }\n        WindowStacking::Overlay => {\n            window.set_keep_above(true);\n            window.set_keep_below(false);\n        }\n    }\n    if window_init.backend_options.x11.sticky {\n        window.set_skip_taskbar_hint(true);\n        window.set_skip_pager_hint(true);\n    }\n    Some(window)\n}", "CodeBleu_score": 49.09437584200736}]}
{"instance_id": "bbe996b92d6e", "generation_result": [{"code": "pub fn print_error(err: anyhow::Error){\n\t    let mut diag = match err.downcast_ref::<DiagError>() {\n        Ok(err) => err.diagnostic,\n        Err(err) => Diagnostic::new(\n            err.span(),\n            \"Internal error\",\n            \"An internal error occurred.\",\n            Diagnostic::Level::Error,\n            vec![],\n        ),\n    };\n\n    if let Ok(diag) = diag.to_diagnostic() {\n        if let Ok(diag) = diag.stringify(term::Term::new(term::TermWidth::Auto, term::TermHeight::Auto)) {\n            eprintln(diag);\n        }\n    } else {\n        log::error(\"{}\", err);\n    }\n}", "CodeBleu_score": 40.93683770262751}, {"code": "pub fn print_error(err: anyhow::Error){\n\t    let diag = match err.downcast_ref::<ToDiagnostic>() {\n        Ok(diag) => diag.to_diagnostic(),\n        Err(err) => {\n            log::error(\"{}\", err);\n            return;\n        }\n    };\n\n    let message = match diag.message.stringify(term::Term::stderr()) {\n        Ok(message) => message,\n        Err(err) => {\n            log::error(\"{}\", err);\n            return;\n        }\n    };\n\n    eprintln::eprintln(\"{}\", message);\n}", "CodeBleu_score": 20.927780026099853}, {"code": "pub fn print_error(err: anyhow::Error){\n\t    let diag = match err.downcast_ref::<ToDiagnostic>() {\n        Ok(d) => d.diagnostic(),\n        Err(_) => match err.downcast_ref::<DiagError>() {\n            Ok(d) => d.diagnostic(),\n            Err(_) => match err.downcast_ref::<EvalError>() {\n                Ok(e) => e.to_diagnostic(),\n                Err(_) => match err.downcast_ref::<ConversionError>() {\n                    Ok(e) => e.to_diagnostic(),\n                    Err(_) => match err.downcast_ref::<ValidationError>() {\n                        Ok(e) => e.to_diagnostic(),\n                        Err(_) => match err.downcast_ref::<term::Error>() {\n                            Ok(e) => e.to_diagnostic(),\n                            Err(_) => Diagnostic::new(Span::default(), \"unknown error\"),\n                        },\n                    },\n                },\n            },\n        },\n    };\n    let diag_str = diag.stringify().unwrap_or_else(|_| \"error converting to string\".to_string());\n    eprintln::error(diag_str);\n    log::error(\"{}\", err);\n}", "CodeBleu_score": 21.378772515103698}]}
{"instance_id": "d5e9c17aaa4d", "generation_result": [{"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\t    let listener = std::net::UnixListener::bind(socket_path.as_ref()).context(\"failed to bind listener\")?;\n    log::info(\"listener bound to {}\", socket_path.as_ref());\n    loop {\n        let (stream, _) = listener.accept().await.context(\"failed to accept connection\")?;\n        tokio::spawn(async move {\n            let mut stream = stream;\n            let evt_send = evt_send.clone();\n            let mut buf = [0u8; 1024];\n            let mut msg = String::new();\n            while let Ok(n) = stream.read(&mut buf).await {\n                msg.push_str(&std::str::from_utf8(&buf[..n]).unwrap());\n                if msg.ends_with(\"\n\") {\n                    let cmd = app::parse_cmd(&msg).context(\"failed to parse command\")?;\n                    evt_send.send(cmd).context(\"failed to send command\")?;\n                    msg.clear();\n                }\n            }\n        });\n    }\n}", "CodeBleu_score": 44.05341671625821}, {"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\t    let listener = std::net::UnixListener::bind(socket_path).context(\"failed to bind listener\")?;\n    log::info(\"IPC server initialized at {}\", socket_path.as_ref().display());\n\n    loop {\n        let (stream, _) = listener.accept().await.context(\"failed to accept connection\")?;\n        let evt_send = evt_send.clone();\n        tokio::spawn(async move {\n            let mut stream = stream;\n            if let Err(err) = handle_connection(stream.take(), evt_send).await {\n                log::error(\"error handling connection: {}\", err);\n            }\n        });\n    }\n}", "CodeBleu_score": 41.39427753529275}, {"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\t    let listener = std::net::UnixListener::bind(socket_path.as_ref()).context(\"failed to bind listener\")?;\n    log::info(\"started server at {}\", socket_path.as_ref().display());\n\n    loop {\n        let (stream, _) = listener.accept().await.context(\"failed to accept connection\")?;\n        let evt_send_clone = evt_send.clone();\n        tokio::spawn(async move {\n            let mut stream = stream;\n            let mut buf = [0u8; 1024];\n            let mut n_read = stream.read(&mut buf).await.context(\"failed to read\")?;\n            let mut msg = String::new();\n            while n_read > 0 {\n                msg.push_str(&std::str::from_utf8(&buf[..n_read]).context(\"failed to decode\")?);\n                n_read = stream.read(&mut buf).await.context(\"failed to read\")?;\n            }\n            let cmd = app::DaemonCommand::from_str(msg.as_str())\n                .context(\"failed to parse command\")?;\n            evt_send_clone.send(cmd).await.context(\"failed to send command\")?;\n        });\n    }\n}", "CodeBleu_score": 42.7340796450513}]}
{"instance_id": "4af744d13f02", "generation_result": [{"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\t    let (mut read, mut write) = stream.split();\n    let action = serde_json::from_reader::<_, app::Action>(&mut read).context(\"Failed to read action from IPC connection\")?;\n    log::info(\\\"Received IPC action: {}\\\", action);\n    evt_send.send(app::DaemonCommand::Action(action)).await?;\n    if action.response_expected {\n        let response = tokio::time::timeout(Duration::from_millis(100), evt_send.recv()).await?;\n        serde_json::to_writer(&mut write, &response).context(\"Failed to write response to IPC connection\")?;\n    }\n    write.shutdown().await?;\n    Ok(())\n}", "CodeBleu_score": 38.724098911521104}, {"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\t    let (mut read_stream, mut write_stream) = stream.split();\n    let mut buf = [0; 1024];\n    let read_result = read_stream.read_exact(&mut buf).await.context(\"Failed to read IPC message\")?;\n    let action: app::Action = bincode::deserialize(&buf[..read_result]).context(\"Failed to deserialize IPC message\")?;\n    log::info(\\\"Received IPC message: {:?}\\\", action);\n    let cmd = action.into_cmd();\n    evt_send.send(cmd).await.context(\"Failed to send IPC message\")?;\n    if cmd.expects_response() {\n        let (mut response, _) = evt_send.recv_timeout(Duration::from_millis(100)).await.context(\"Failed to receive IPC response\")?;\n        let response_buf = bincode::serialize(&response).context(\"Failed to serialize IPC response\")?;\n        write_stream.write_all(&response_buf).await.context(\"Failed to write IPC response\")?;\n    }\n    write_stream.shutdown().await.context(\"Failed to shutdown IPC connection\")?;\n    Ok(())\n}", "CodeBleu_score": 44.08433332675028}, {"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\t    let (mut read, mut write) = stream.split();\n    let action = read.read_u8().await?;\n    log::info(\\\"Received IPC command: {}\\\", action);\n    let cmd = match action {\n        b's' => app::DaemonCommand::Start,\n        b'r' => app::DaemonCommand::Restart,\n        b'e' => app::DaemonCommand::Exit,\n        b'p' => app::DaemonCommand::Pause,\n        b'c' => app::DaemonCommand::Continue,\n        _ => return Err(anyhow::anyhow(\\\"Invalid action\\\")),\n    };\n    evt_send.send(cmd).await?;\n    if cmd == app::DaemonCommand::Exit {\n        return Ok(());\n    }\n    let response = match cmd {\n        app::DaemonCommand::Start => app::DaemonResponse::Started,\n        app::DaemonCommand::Restart => app::DaemonResponse::Restarted,\n        app::DaemonCommand::Pause => app::DaemonResponse::Paused,\n        app::DaemonCommand::Continue => app::DaemonResponse::Continued,\n        app::DaemonCommand::Exit => app::DaemonResponse::Exited,\n    };\n    let response = bincode::serialize(&response).context(\\\"Failed to serialize response\\\")?;\n    write.write_all(&response).await?;\n    write.shutdown().await?;\n    Ok(())\n}", "CodeBleu_score": 40.12733417769475}]}
{"instance_id": "8475be269e09", "generation_result": [{"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\t    let mut msg_size_buf = [0u8; 4];\n    stream_read.read_exact(&mut msg_size_buf).await?;\n    let msg_size = u32::from_be_bytes(msg_size_buf);\n    let mut msg_buf = vec![0u8; msg_size as usize];\n    let mut total_read = 0;\n    while total_read < msg_size {\n        let read = stream_read.read(&mut msg_buf[total_read as usize..]).await?;\n        total_read += read as u32;\n    }\n    bincode::deserialize(&msg_buf).context(\"failed to deserialize message\")\n}", "CodeBleu_score": 46.453309975204824}, {"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\t    let mut header = [0u8; 4];\n    stream_read.read_exact(&mut header).await?;\n    let size = u32::from_be_bytes(header);\n    let mut buf = vec![0u8; size as usize];\n    let mut pos = 0;\n    loop {\n        let result = stream_read.read_exact(&mut buf[pos..]).await;\n        match result {\n            Ok(0) => break,\n            Ok(n) => pos += n,\n            Err(e) => return Err(e.context(\\\"failed to read from stream\\\")),\n        }\n    }\n    let action = bincode::deserialize(&buf)?;\n    Ok(action)\n}", "CodeBleu_score": 46.689444383168336}, {"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\t    let mut message_size_header = [0u8; 4];\n    let result = &stream_read.read_exact(&mut message_size_header).await;\n    crate::print_result_err(\\\"reading message size header\\\", &result)?;\n    let message_size = u32::from_be_bytes(message_size_header);\n\n    let mut raw_message = vec![0u8; message_size as usize];\n    let mut offset = 0;\n    while offset < message_size as usize {\n        let result = &stream_read.read_exact(&mut raw_message[offset..]).await;\n        crate::print_result_err(\\\"reading raw message\\\", &result)?;\n        offset += raw_message.len() - offset;\n    }\n\n    let action: opts::ActionWithServer = bincode::deserialize(&raw_message).context(\\\"failed to deserialize action\\\")?;\n    Ok(action)\n}", "CodeBleu_score": 56.74965698030514}]}
{"instance_id": "5f7bde448666", "generation_result": [{"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\t    let dbus = zbus::fdo::DBusProxy::new(con).await?;\n    let mut exit_event = std::sync::mpsc::channel();\n    let (tx, rx) = exit_event.clone();\n    let mut watcher = zbus::fdo::DBusWatcher::new(con);\n    watcher.add_name_owner_changed_handler(move |name, old_owner, new_owner| {\n        if name == service {\n            if new_owner.is_none() {\n                tx.send(()).unwrap();\n            }\n        }\n        Ok(())\n    });\n    watcher.start().await?;\n    let _ = rx.recv().await?;\n    watcher.stop().await?;\n    Ok(())\n}", "CodeBleu_score": 56.34115435844501}, {"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\t    let dbus = zbus::fdo::DBusProxy::new(con).await?;\n    let mut owner_changed = false;\n    let mut owner = None;\n    let mut watcher = zbus::fdo::Watcher::new();\n    watcher.add_match_rule(service.into_owned(), zbus::fdo::MatchRule::OwnerChanged).await?;\n    watcher.on_signal(move |sig| async move {\n        let hdr = sig.header();\n        if let zbus::fdo::Signal::NameOwnerChanged(_, old_owner, new_owner) = sig {\n            if let Some(old_owner) = old_owner {\n                if old_owner == service {\n                    owner_changed = true;\n                    owner = new_owner;\n                }\n            }\n        }\n    }).await;\n    watcher.run(con).await?;\n    if owner_changed {\n        match owner {\n            Some(owner) => {\n                let dbus = zbus::fdo::DBusProxy::new(con).await?;\n                let owner = zbus::names::BusName::Unique(owner);\n                if let Ok(()) = dbus.request_name(owner, zbus::fdo::RequestNameFlags::AllowReplacement).await {\n                    return Ok(())\n                }\n            }\n            None => (),\n        }\n    }\n\n    Ok(())\n}", "CodeBleu_score": 54.15181171830886}, {"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\t    let dbus = zbus::fdo::DBusProxy::new(con).await?;\n\n    let mut monitor = dbus.monitor_name_owner_changes().await?;\n    let mut service = service.into_inner();\n\n    while let Some(msg) = monitor.recv().await {\n        if let zbus::fdo::NameOwnerChanged::NewOwner(_, Some(name)) = msg {\n            if name == service {\n                // the service is gone\n                return Ok(())\n            }\n        }\n    }\n    \n    Ok(())\n}", "CodeBleu_score": 64.64270831211965}]}
{"instance_id": "d5149dd17f39", "generation_result": [{"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\t    match format {\n        \"svg\" => Ok(DocExportFormat::Svg),\n        \"xopp\" => Ok(DocExportFormat::Xopp),\n        \"pdf\" => Ok(DocExportFormat::Pdf),\n        _ => Err(anyhow::anyhow(format_args(\"Unsupported format: {}\", format))),\n    }\n}", "CodeBleu_score": 70.09653947110681}, {"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\t    match format {\n        \"svg\" => Ok(DocExportFormat::Svg),\n        \"xopp\" => Ok(DocExportFormat::Xopp),\n        \"pdf\" => Ok(DocExportFormat::Pdf),\n        _ => Err(anyhow::anyhow(format_err_msg(format))),\n    }\n}", "CodeBleu_score": 68.78901217171612}, {"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\t    match format {\n        \"svg\" => Ok(DocExportFormat::Svg),\n        \"xopp\" => Ok(DocExportFormat::Xopp),\n        \"pdf\" => Ok(DocExportFormat::Pdf),\n        _ => Err(anyhow::anyhow(format_args(\"Unsupported format: {}\", format))),\n    }\n}", "CodeBleu_score": 70.09653947110681}]}
{"instance_id": "47c741fa1cf0", "generation_result": [{"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\t    path_is_file(path)?;\n    let ext = path.extension().unwrap_or_default().to_str().unwrap_or_default();\n    if ext != expected_ext {\n        return Err(anyhow::anyhow(format_args(\n            \"Expected file with extension \\\"{}\\\", found file with extension \\\"{}\\\"\",\n            expected_ext,\n            ext,\n        )));\n    }\n    Ok(())\n}", "CodeBleu_score": 35.80700553907464}, {"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\t    path_is_file(path)?;\n    let ext = path.extension().map(|ext| ext.to_str().unwrap());\n    if let Some(ext) = ext {\n        if ext != expected_ext {\n            return Err(anyhow::anyhow(format_err_msg(\n                \"Expected extension\",\n                expected_ext,\n                \"Found extension\",\n                ext,\n            )));\n        }\n    } else {\n        return Err(anyhow::anyhow(format_err_msg(\n            \"Expected extension\",\n            expected_ext,\n            \"Found no extension\",\n            \"\",\n        )));\n    }\n    Ok(())\n}", "CodeBleu_score": 39.52265905505827}, {"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\t    path_is_file(path)?;\n    let ext = path.extension().ok_or_else(|| anyhow::anyhow(\"Expected file with extension\"))?;\n    if ext.to_str().unwrap() != expected_ext {\n        return Err(anyhow::anyhow(format_args(\n            \"Expected file with extension {}, found {}\",\n            expected_ext,\n            ext.to_str().unwrap(),\n        )));\n    }\n    Ok(())\n}", "CodeBleu_score": 35.62492376494003}]}
{"instance_id": "cde4fa8386cb", "generation_result": [{"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\t  // Initialize label\n  ALabel::ABuilder builder;\n  builder.id(id);\n  builder.name(config[\"name\"].asString());\n  builder.format(config[\"format\"].asString());\n  builder.interval(config[\"interval\"].asInt());\n  label = builder.build();\n\n  // Start the thread\n  thread = [this] {\n    auto cpu_usage = get_cpu_usage();\n    auto formatted = fmt::format(label->format(), cpu_usage);\n    label->set_text(formatted);\n  };\n  thread();\n}", "CodeBleu_score": 49.29342219428583}, {"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\t  // Initialize ALabel with the specified configuration, name, ID, format, and interval\n  ALabel::ABuilder builder{config, id, \"cpu_usage\"};\n  builder.format->add(R\"(<span color=\"{color}\">{usage}%</span>)\");\n  builder.interval(5000);\n  builder.build(modules_, label_);\n\n  // Start the thread that emits a data point and then sleeps for the specified interval\n  thread_ = std::thread([this] {\n    while (running_) {\n      try {\n        // Get the current CPU usage\n        auto usage = get_cpu_usage();\n\n        // Format the data point and emit it\n        label_->set_text(fmt::format(label_->get_format(), fmt::arg(\"color\", get_color(usage)), fmt::arg(\"usage\", usage)));\n\n        // Sleep for the specified interval\n        sleep();\n      } catch (const std::exception& e) {\n        // Log any errors that occur\n        spdlog::error(\"CpuUsage: {}\", e.what());\n      }\n    }\n  });\n}", "CodeBleu_score": 46.12634446147352}, {"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\t  label_.name = id;\n  label_.id = id;\n  label_.instance = this;\n\n  if (config.isMember(\"format\")) {\n    format_ = config[\"format\"].asString();\n  }\n\n  if (config.isMember(\"interval\")) {\n    interval_ = config[\"interval\"].asInt();\n  }\n\n  if (config.isMember(\"interval-ms\")) {\n    interval_ = config[\"interval-ms\"].asInt();\n  }\n\n  if (config.isMember(\"interval-us\")) {\n    interval_ = config[\"interval-us\"].asInt();\n  }\n\n  if (config.isMember(\"interval-ns\")) {\n    interval_ = config[\"interval-ns\"].asInt();\n  }\n\n  if (config.isMember(\"interval-s\")) {\n    interval_ = config[\"interval-s\"].asInt();\n  }\n\n  if (config.isMember(\"interval-m\")) {\n    interval_ = config[\"interval-m\"].asInt();\n  }\n\n  if (config.isMember(\"interval-h\")) {\n    interval_ = config[\"interval-h\"].asInt();\n  }\n\n  if (config.isMember(\"interval-d\")) {\n    interval_ = config[\"interval-d\"].asInt();\n  }\n\n  thread_ = std::thread([this] {\n    dp.emit();\n    thread_.sleep_for(std::chrono::milliseconds(interval_));\n  });\n}", "CodeBleu_score": 44.61317674870905}]}
{"instance_id": "da58b589c5e8", "generation_result": [{"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\t  auto tags = static_cast<Tags *>(data);\n  try {\n    if (strcmp(interface, zdwl_ipc_manager_v2_interface.name) == 0) {\n      tags->status_manager_ = static_cast<zdwl_ipc_manager_v2 *>(\n          wl_registry_bind(registry, name, &zdwl_ipc_manager_v2_interface,\n                           std::min(version, 2U)));\n    } else if (strcmp(interface, wl_seat_interface.name) == 0) {\n      tags->seat_ = static_cast<wl_seat *>(\n          wl_registry_bind(registry, name, &wl_seat_interface, 1));\n    }\n  } catch (const std::exception &e) {\n    spdlog::error(\"Failed to bind interface: {}\", e.what());\n  }\n}", "CodeBleu_score": 57.82787296397714}, {"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\t  auto tags = static_cast<Tags *>(data);\n\n  if (strcmp(interface, zdwl_ipc_manager_v2_interface.name) == 0) {\n    tags->status_manager_ = static_cast<zdwl_ipc_manager_v2 *>(\n        wl_registry_bind(registry, name, &zdwl_ipc_manager_v2_interface,\n                         std::min(version, 1)));\n  } else if (strcmp(interface, wl_seat_interface.name) == 0) {\n    tags->seat_ = static_cast<wl_seat *>(wl_registry_bind(\n        registry, name, &wl_seat_interface, std::min(version, 1)));\n  }\n}", "CodeBleu_score": 58.97941692512326}, {"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\t  auto *self = static_cast<Tags *>(data);\n  if (strcmp(interface, zdwl_ipc_manager_v2_interface.name) == 0) {\n    self->status_manager_ = static_cast<zdwl_ipc_manager_v2 *>(\n        wl_registry_bind(registry, name, &zdwl_ipc_manager_v2_interface, 1));\n    if (self->status_manager_) {\n      zdwl_ipc_manager_v2_add_listener(self->status_manager_, &self->manager_listener, self);\n    }\n  } else if (strcmp(interface, wl_seat_interface.name) == 0) {\n    self->seat_ = static_cast<wl_seat *>(\n        wl_registry_bind(registry, name, &wl_seat_interface, 1));\n  }\n}", "CodeBleu_score": 59.92497148964343}]}
{"instance_id": "22230d419d69", "generation_result": [{"code": "void IPC::parseIPC(const std::string& ev){\n\t  std::unique_lock<std::mutex> lock(callbackMutex_);\n\n  auto requestType = ev.substr(0, ev.find_first_of('>'));\n\n  for (auto& callback : callbacks_) {\n    if (callback.first == requestType) {\n      callback.second->onEvent(ev);\n    }\n  }\n}", "CodeBleu_score": 58.86088440518691}, {"code": "void IPC::parseIPC(const std::string& ev){\n\t  std::string requestType = ev.substr(0, ev.find_first_of('>'));\n  std::unique_lock lock(callbackMutex_);\n  for (auto& cb : callbacks_) {\n    if (cb.first == requestType) {\n      cb.second->onEvent(ev);\n    }\n  }\n}", "CodeBleu_score": 67.52326682063428}, {"code": "void IPC::parseIPC(const std::string& ev){\n\t  std::unique_lock lock(callbackMutex_);\n\n  auto requestType = ev.substr(0, ev.find_first_of('>'));\n\n  for (auto& callback : callbacks_) {\n    if (callback.first == requestType) {\n      callback.second->onEvent(ev);\n    }\n  }\n}", "CodeBleu_score": 60.40419546602824}]}
{"instance_id": "5d195fbd6417", "generation_result": [{"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\t  if (ev_handler == nullptr) {\n    return;\n  }\n\n  std::unique_lock lock(callbackMutex_);\n  callbacks_.erase(std::remove_if(callbacks_.begin(), callbacks_.end(), [&](auto& callback) {\n    return callback.second == ev_handler;\n  }), callbacks_.end());\n}", "CodeBleu_score": 51.07837825910775}, {"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\t  if (ev_handler == nullptr) {\n    return;\n  }\n\n  std::unique_lock lock(callbackMutex_);\n  callbacks_.erase(std::remove_if(callbacks_.begin(), callbacks_.end(),\n                                  [&](auto& callback) {\n                                    return callback.second == ev_handler;\n                                  }),\n                   callbacks_.end());\n}", "CodeBleu_score": 49.60161890830203}, {"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\t  if (ev_handler == nullptr) {\n    return;\n  }\n\n  std::unique_lock lock(callbackMutex_);\n  callbacks_.erase(std::remove_if(callbacks_.begin(), callbacks_.end(),\n                                  [&](const auto& callback) {\n                                    return callback.second == ev_handler;\n                                  }),\n                   callbacks_.end());\n}", "CodeBleu_score": 49.51501484879579}]}
{"instance_id": "2bb5ef8b3cf3", "generation_result": [{"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\t  if (config[\"always-on\"].isBool()) {\n    always_on_ = config[\"always-on\"].asBool();\n  }\n  if (config[\"default-submap\"].isString()) {\n    default_submap_ = config[\"default-submap\"].asString();\n  }\n}", "CodeBleu_score": 38.45278493345283}, {"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\t  if (config[\"always-on\"].isBool()) {\n    always_on_ = config[\"always-on\"].asBool();\n  }\n  if (config[\"default-submap\"].isString()) {\n    default_submap_ = config[\"default-submap\"].asString();\n  }\n}", "CodeBleu_score": 38.45278493345283}, {"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\t  if (config[\"always-on\"].isBool()) {\n    always_on_ = config[\"always-on\"].asBool();\n  }\n\n  if (config[\"default-submap\"].isString()) {\n    default_submap_ = config[\"default-submap\"].asString();\n  }\n}", "CodeBleu_score": 38.45278493345283}]}
{"instance_id": "c60aa24ddc6f", "generation_result": [{"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\t  if (std::holds_alternative<Repr>(m_window)) {\n    return std::get<Repr>(m_window);\n  }\n  if (std::holds_alternative<ClassAndTitle>(m_window)) {\n    auto [window_class, window_title] = std::get<ClassAndTitle>(m_window);\n    return workspace_manager.rewriteWindowTitle(window_class, window_title);\n  }\n  // Unreachable\n  spdlog::error(\"WorkspaceWindow::repr: Unreachable\");\n  throw std::runtime_error(\"WorkspaceWindow::repr: Unreachable\");\n}", "CodeBleu_score": 96.40931525158798}, {"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\t  if (std::holds_alternative<Repr>(m_window)) {\n    return std::get<Repr>(m_window);\n  }\n  if (std::holds_alternative<ClassAndTitle>(m_window)) {\n    auto [window_class, window_title] = std::get<ClassAndTitle>(m_window);\n    return workspace_manager.rewrite(window_class, window_title);\n  }\n  // Unreachable\n  spdlog::error(\"WorkspaceWindow::repr: Unreachable\");\n  throw std::runtime_error(\"WorkspaceWindow::repr: Unreachable\");\n}", "CodeBleu_score": 96.88610015615237}, {"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\t  if (std::holds_alternative<Repr>(m_window)) {\n    return std::get<Repr>(m_window);\n  }\n  if (std::holds_alternative<ClassAndTitle>(m_window)) {\n    auto [window_class, window_title] = std::get<ClassAndTitle>(m_window);\n    return workspace_manager.rewriteWindow(window_class, window_title);\n  }\n  // Unreachable\n  spdlog::error(\"WorkspaceWindow::repr: Unreachable\");\n  throw std::runtime_error(\"WorkspaceWindow::repr: Unreachable\");\n}", "CodeBleu_score": 96.62128846868293}]}
{"instance_id": "b9160180960d", "generation_result": [{"code": "void Workspaces::createWorkspacesToCreate(){\n\t  if (m_workspacesToCreate.empty()) {\n    return;\n  }\n\n  for (auto const &workspace_data : m_workspacesToCreate) {\n    auto clients_data = gIPC->getSocket1JsonReply(\\\"workspaceclients\\\" + workspace_data[\\\"name\\\"].asString());\n    createWorkspace(workspace_data, clients_data);\n  }\n\n  updateWindowCount();\n  sortWorkspaces();\n  m_workspacesToCreate.clear();\n}", "CodeBleu_score": 55.072763020145906}, {"code": "void Workspaces::createWorkspacesToCreate(){\n\t  for (const auto &workspace_data : m_workspacesToCreate) {\n    createWorkspace(workspace_data, m_clientsToCreate);\n  }\n\n  if (!m_workspacesToCreate.empty()) {\n    updateWindowCount();\n    sortWorkspaces();\n  }\n\n  m_workspacesToCreate.clear();\n}", "CodeBleu_score": 71.67411707930367}, {"code": "void Workspaces::createWorkspacesToCreate(){\n\t  auto workspacesToCreate = gIPC->getSocket1JsonReply(\\\"workspacesToCreate\\\");\n  for (auto &workspace : workspacesToCreate) {\n    auto clients_data = gIPC->getSocket1JsonReply(\\\"workspaceclients\\\" + workspace[\\\"name\\\"].asString());\n    createWorkspace(workspace, clients_data);\n  }\n  if (!m_workspaces.empty()) {\n    updateWindowCount();\n    sortWorkspaces();\n  }\n}", "CodeBleu_score": 55.768262098309485}]}
{"instance_id": "07260cd3fead", "generation_result": [{"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\t  auto* mpris = static_cast<Mpris*>(data);\n  if (!mpris) return;\n\n  spdlog::debug(\"mpris: name-vanished callback: {}\", player_name->name);\n\n  if (std::string(player_name->name) != mpris->player_) {\n    return;\n  }\n\n  mpris->player = nullptr;\n  mpris->event_box->hide();\n  mpris->dp.emit();\n}", "CodeBleu_score": 82.69329513742663}, {"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\t  auto* mpris = static_cast<Mpris*>(data);\n  if (!mpris) return;\n\n  spdlog::debug(\"mpris: name-vanished callback: {}\", player_name->name);\n\n  if (std::string(player_name->name) != mpris->player_) {\n    return;\n  }\n\n  mpris->player = nullptr;\n  mpris->event_box->hide();\n  mpris->dp.emit();\n}", "CodeBleu_score": 82.69329513742663}, {"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\t  auto* mpris = static_cast<Mpris*>(data);\n  if (!mpris) return;\n\n  spdlog::debug(\"mpris: name-vanished callback: {}\", player_name->name);\n\n  if (std::string(player_name->name) != mpris->player_) {\n    return;\n  }\n\n  mpris->player = nullptr;\n  mpris->event_box->hide();\n  mpris->dp.emit();\n}", "CodeBleu_score": 82.69329513742663}]}
{"instance_id": "94a47eddc505", "generation_result": [{"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\t  auto* mpris = static_cast<Mpris*>(data);\n  if (!mpris) return;\n\n  spdlog::debug(\"mpris: player-pause callback\");\n  // update widget\n  mpris->dp.emit();\n}", "CodeBleu_score": 99.36235025282969}, {"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\t  auto* mpris = static_cast<Mpris*>(data);\n  if (!mpris) return;\n\n  spdlog::debug(\"mpris: player-pause callback\");\n  // update widget\n  mpris->dp.emit();\n}", "CodeBleu_score": 99.36235025282969}, {"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\t  auto* mpris = static_cast<Mpris*>(data);\n  if (!mpris) return;\n\n  spdlog::debug(\"mpris: player-pause callback\");\n  // update widget\n  mpris->dp.emit();\n}", "CodeBleu_score": 99.36235025282969}]}
{"instance_id": "716955fc6ff5", "generation_result": [{"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\t  if (!res.payload[\\\"success\\\"].asBool()) {\n    throw std::runtime_error(res.payload[\\\"error\\\"].asString());\n  }\n  auto config = parseConfig(res.payload[\\\"config\\\"]);\n  onConfigUpdate(config);\n}", "CodeBleu_score": 32.891347867460084}, {"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\t  if (!res.payload[\\\"success\\\"].asBool()) {\n    throw std::runtime_error(res.payload[\\\"error\\\"].asString());\n  }\n  auto config = parseConfig(res.payload);\n  onConfigUpdate(config);\n}", "CodeBleu_score": 31.1853272788468}, {"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\t  if (!res.payload.isObject()) {\n    throw std::runtime_error(\\\"Invalid payload\\\");\n  }\n  if (const auto& success = res.payload[\\\"success\\\"]; success.isBool() && !success.asBool()) {\n    if (const auto& err = res.payload[\\\"error\\\"]; err.isString()) {\n      throw std::runtime_error(err.asString());\n    }\n  }\n  onConfigUpdate(parseConfig(res.payload));\n}", "CodeBleu_score": 41.803980931888745}]}
{"instance_id": "e8aa483d1693", "generation_result": [{"code": "auto CFFI::doAction(const std::string& name) -> void{\n\t  assert(cffi_instance_ != nullptr);\n  if (!name.empty()) {\n    hooks_.doAction(cffi_instance_, name.c_str());\n  }\n}", "CodeBleu_score": 99.5189928273473}, {"code": "auto CFFI::doAction(const std::string& name) -> void{\n\t  assert(cffi_instance_ != nullptr);\n  if (!name.empty()) {\n    hooks_.doAction(cffi_instance_, name.c_str());\n  }\n}", "CodeBleu_score": 99.5189928273473}, {"code": "auto CFFI::doAction(const std::string& name) -> void{\n\t  assert(cffi_instance_ != nullptr);\n  if (!name.empty()) {\n    hooks_.doAction(cffi_instance_, name.c_str());\n  }\n}", "CodeBleu_score": 99.5189928273473}]}
