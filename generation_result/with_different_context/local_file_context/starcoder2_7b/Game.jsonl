{"instance_id": "47ee1dae200b", "generation_result": [{"code": "public static void PreloadDll(string dllName){\n\t\nif (Environment.OSVersion.Platform == PlatformID.Win32NT) {\n\nstring dllDirectory = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System), \"dllcache\");\n\nif (!Directory.Exists(dllDirectory)) {\nDirectory.CreateDirectory(dllDirectory);\n}\n\nstring dllPath = Path.Combine(dllDirectory, dllName);\n\nif (!File.Exists(dllPath)) {\nFile.Copy(dllName, dllPath);\n}\n\nWin32.LoadLibrary(dllPath);\n\n} else {\n\nstring dllDirectory = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System), \"lib\");\n\nif (!Directory.Exists(dllDirectory)) {\nDirectory.CreateDirectory(dllDirectory);\n}\n\nstring dllPath = Path.Combine(dllDirectory, dllName);\n\nif (!File.Exists(dllPath)) {\nFile.Copy(dllName, dllPath);\n}\n\nPosix.dlopen(dllPath, Posix.RTLD_NOW);\n\n}\n\n}", "CodeBleu_score": 40.08844231194421}, {"code": "public static void PreloadDll(string dllName){\n\t#if WINDOWS\nstring directory = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);\nstring dllPath = Path.Combine(directory, dllName);\n\nif (File.Exists(dllPath)) {\nIntPtr module = LoadLibrary(dllPath);\n\nif (module == IntPtr.Zero) {\nthrow new Win32Exception(Marshal.GetLastWin32Error());\n}\n} else {\nthrow new FileNotFoundException(dllPath);\n}\n#else\nstring directory = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);\nstring dllPath = Path.Combine(directory, dllName);\n\nif (File.Exists(dllPath)) {\nIntPtr module = dlopen(dllPath, RTLD_NOW);\n\nif (module == IntPtr.Zero) {\nthrow new PosixException(dlerror());\n}\n} else {\nthrow new FileNotFoundException(dllPath);\n}\n#endif\n}", "CodeBleu_score": 31.28309442998487}, {"code": "public static void PreloadDll(string dllName){\n\t\n// Get the DLL directory.\nstring dllDirectory = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);\n\n// Get the current operating system.\nOSPlatform osPlatform = OSPlatform.Create(\"Windows\");\n\n// Check the operating system.\nif (osPlatform == OSPlatform.Windows)\n{\n// Load the DLL using the Win32 method.\nWin32.LoadLibrary(dllDirectory + \"\\\\\" + dllName);\n}\nelse\n{\n// Load the DLL using the Posix method.\nPosix.LoadLibrary(dllDirectory + \"\\\\\" + dllName);\n}\n}", "CodeBleu_score": 41.283476863358715}]}
{"instance_id": "2073a8291d05", "generation_result": [{"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\tif (!assetsFileListHash.Contains(reader.FileName)) {\nLogger.Info($\"Loading {reader.FullPath}\");\ntry {\nvar assetsFile = new SerializedFile(reader, this);\nCheckStrippedVersion(assetsFile);\nassetsFileList.Add(assetsFile);\nassetsFileListHash.Add(assetsFile.fileName);\n\nforeach (var sharedFile in assetsFile.m_Externals) {\nvar sharedFileName = sharedFile.fileName;\n\nif (!importFilesHash.Contains(sharedFileName)) {\nvar sharedFilePath = Path.Combine(Path.GetDirectoryName(reader.FullPath), sharedFileName);\nif (!noexistFiles.Contains(sharedFilePath)) {\nif (!File.Exists(sharedFilePath)) {\nvar findFiles = Directory.GetFiles(Path.GetDirectoryName(reader.FullPath), sharedFileName, SearchOption.AllDirectories);\nif (findFiles.Length > 0) {\nsharedFilePath = findFiles[0];\n}\n}\nif (File.Exists(sharedFilePath)) {\nimportFiles.Add(sharedFilePath);\nimportFilesHash.Add(sharedFileName);\n}\nelse {\nnoexistFiles.Add(sharedFilePath);\n}\n}\n}\n}\n}\ncatch (Exception e) {\nLogger.Error($\"Error while reading assets file {reader.FullPath}\", e);\nreader.Dispose();\n}\n}\nelse {\nLogger.Info($\"Skipping {reader.FullPath}\");\nreader.Dispose();\n}\n}", "CodeBleu_score": 57.68636205503507}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\tif (reader.FileType == FileType.AssetsFile) {\nif (!assetsFileListHash.Contains(reader.FileName)) {\nLogger.Info($\"Loading {reader.FullPath}\");\ntry {\nvar assetsFile = new SerializedFile(reader, this);\nCheckStrippedVersion(assetsFile);\nassetsFileList.Add(assetsFile);\nassetsFileListHash.Add(assetsFile.fileName);\nforeach (var sharedFile in assetsFile.m_Externals) {\nvar sharedFileName = sharedFile.fileName;\nif (!importFilesHash.Contains(sharedFileName)) {\nvar sharedFilePath = Path.Combine(Path.GetDirectoryName(originalPath), sharedFileName);\nif (!noexistFiles.Contains(sharedFilePath)) {\nif (!File.Exists(sharedFilePath)) {\nvar findFiles = Directory.GetFiles(Path.GetDirectoryName(originalPath), sharedFileName, SearchOption.AllDirectories);\nif (findFiles.Length > 0) {\nsharedFilePath = findFiles[0];\n}\n}\nif (File.Exists(sharedFilePath)) {\nimportFiles.Add(sharedFilePath);\nimportFilesHash.Add(sharedFileName);\n} else {\nnoexistFiles.Add(sharedFilePath);\n}\n}\n}\n}\n} catch (Exception e) {\nLogger.Error($\"Error while reading assets file {reader.FullPath}\", e);\nreader.Dispose();\n}\n} else {\nLogger.Info($\"Skipping {reader.FullPath}\");\nreader.Dispose();\n}\n}\n}", "CodeBleu_score": 57.721243124892915}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\tif (!assetsFileListHash.Contains(reader.FileName)) {\nLogger.Info($\\\"Loading {reader.FullPath}\\\");\ntry {\nvar assetsFile = new SerializedFile(reader, this);\nCheckStrippedVersion(assetsFile);\nassetsFileList.Add(assetsFile);\nassetsFileListHash.Add(assetsFile.fileName);\nforeach (var sharedFile in assetsFile.m_Externals) {\nvar sharedFileName = sharedFile.fileName;\nif (!importFilesHash.Contains(sharedFileName)) {\nvar sharedFilePath = Path.Combine(Path.GetDirectoryName(reader.FullPath), sharedFileName);\nif (!noexistFiles.Contains(sharedFilePath)) {\nif (!File.Exists(sharedFilePath)) {\nvar findFiles = Directory.GetFiles(Path.GetDirectoryName(reader.FullPath), sharedFileName, SearchOption.AllDirectories);\nif (findFiles.Length > 0) {\nsharedFilePath = findFiles[0];\n}\n}\nif (File.Exists(sharedFilePath)) {\nimportFiles.Add(sharedFilePath);\nimportFilesHash.Add(sharedFileName);\n}\nelse {\nnoexistFiles.Add(sharedFilePath);\n}\n}\n}\n}\n}\ncatch (Exception e) {\nLogger.Error($\\\"Error while reading assets file {reader.FullPath}\\\", e);\nreader.Dispose();\n}\n}\nelse {\nLogger.Info($\\\"Skipping {reader.FullPath}\\\");\nreader.Dispose();\n}\n}", "CodeBleu_score": 55.29810715500303}]}
{"instance_id": "5dacc6a26301", "generation_result": [{"code": "public ImportedFrame FindFrameByPath(string path){\n\tar frame = this;\nvar pathParts = path.Split('/');\nvar name = pathParts[pathParts.Length - 1];\nforeach (var child in frame.children) {\nif (child.Name == name) {\nif (child.Path == path) {\nreturn child;\n}\nelse {\nvar result = child.FindFrameByPath(path);\nif (result!= null) {\nreturn result;\n}\n}\n}\n}\nreturn null;\n}", "CodeBleu_score": 53.13921544834825}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\tar frame = this;\nvar frameName = Path.GetFileName(path);\nwhile (frame!= null) {\nforeach (var child in frame.children) {\nif (child.Name == frameName) {\npath = Path.GetDirectoryName(path);\nif (string.IsNullOrEmpty(path)) {\nreturn child;\n}\nframe = child;\nframeName = Path.GetFileName(path);\nbreak;\n}\n}\nframe = frame.Parent;\n}\nreturn null;\n}", "CodeBleu_score": 34.384994676279426}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\tvar frame = this;\n\nwhile (frame!= null) {\n\nif (frame.Path == path) {\n\nreturn frame;\n\n}\n\nframe = frame.Parent;\n\n}\n\nreturn null;\n\n}", "CodeBleu_score": 38.109243550715654}]}
{"instance_id": "c20b04c4ad37", "generation_result": [{"code": "public static FileReader DecompressGZip(FileReader reader){\n\tng (var compressedStream = new MemoryStream(reader.Data)) {\n\t\tusing (var gzipStream = new GZipStream(compressedStream, CompressionMode.Decompress)) {\n\t\t\tvar decompressed = new MemoryStream();\n\t\t\tgzipStream.CopyTo(decompressed);\n\t\t\treturn new FileReader(decompressed.ToArray());\n\t\t}\n\t}\n}", "CodeBleu_score": 29.676764620907075}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\tRead the compressed data into a MemoryStream.\nMemoryStream compressedStream = new MemoryStream();\nreader.Read(compressedStream);\n\n// Decompress the data.\nMemoryStream decompressedStream = new MemoryStream();\nusing (GZipStream decompressor = new GZipStream(compressedStream, CompressionMode.Decompress)) {\ndecompressor.CopyTo(decompressedStream);\n}\n\n// Return the decompressed data.\nreturn new FileReader(decompressedStream.ToArray());\n}", "CodeBleu_score": 37.151155701462606}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\toryStream ms = new MemoryStream();\n\tGZipStream decompressionStream = new GZipStream(reader.stream, CompressionMode.Decompress);\n\tdecompressionStream.CopyTo(ms);\n\tdecompressionStream.Dispose();\n\treturn new FileReader(new MemoryStream(ms.ToArray()));\n}", "CodeBleu_score": 34.30809980930779}]}
{"instance_id": "11ce5c7b009d", "generation_result": [{"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\tfor (int i = 0; i < commandStrings.Length; i++) {\n\t\tstring srcString = commandStrings[i];\n\t\tif (srcString.Length == 0)\n\t\t\tcontinue;\n\t\tif (srcString[0]!= kSwitchChar)\n\t\t\tNonSwitchStrings.Add(srcString);\n\t\telse {\n\t\t\tif (ParseString(srcString, switchForms))\n\t\t\t\tbreak;\n\t\t}\n\t}\n}", "CodeBleu_score": 40.18597469684179}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\tfor (int i = 0; i < commandStrings.Length; i++) {\n\t\tif (commandStrings[i] == kStopToken)\n\t\t\tbreak;\n\t\tif (!ParseString(commandStrings[i], switchForms))\n\t\t\tNonSwitchStrings.Add(commandStrings[i]);\n\t}\n}", "CodeBleu_score": 34.38003358225989}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\tfor (int i = 0; i < commandStrings.Length; i++) {\n\t\tstring srcString = commandStrings[i];\n\t\tif (srcString.Length == 0)\n\t\t\tcontinue;\n\t\tif (srcString[0] == kStopToken) {\n\t\t\tif (srcString.Length == 1)\n\t\t\t\treturn;\n\t\t\tif (srcString[1] == kStopToken)\n\t\t\t\treturn;\n\t\t\tthrow new Exception(\"kStopToken must be single\");\n\t\t}\n\t\tif (ParseString(srcString, switchForms))\n\t\t\tcontinue;\n\t\tNonSwitchStrings.Add(srcString);\n\t}\n}", "CodeBleu_score": 44.248715933352884}]}
{"instance_id": "b8da2d0a3f76", "generation_result": [{"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\treader = new ResourceReader(m_Texture2D.asset);\nm_Width = m_Texture2D.width;\nm_Height = m_Texture2D.height;\nm_TextureFormat = m_Texture2D.format;\nversion = m_Texture2D.version;\nplatform = m_Texture2D.platform;\noutPutSize = m_Texture2D.outPutSize;\n}", "CodeBleu_score": 54.8667079264081}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\treader = new ResourceReader(m_Texture2D.assetBundle);\nm_Width = m_Texture2D.width;\nm_Height = m_Texture2D.height;\nm_TextureFormat = m_Texture2D.format;\nversion = new int[2];\nversion[0] = m_Texture2D.version;\nversion[1] = m_Texture2D.version;\nplatform = m_Texture2D.platform;\noutPutSize = m_Texture2D.outPutSize;\n}", "CodeBleu_score": 53.14627773347752}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\treader = new ResourceReader(m_Texture2D);\nm_Width = reader.ReadInt32();\nm_Height = reader.ReadInt32();\nm_TextureFormat = (TextureFormat)reader.ReadInt32();\nversion = new int[4];\nversion[0] = reader.ReadInt32();\nversion[1] = reader.ReadInt32();\nversion[2] = reader.ReadInt32();\nversion[3] = reader.ReadInt32();\nplatform = (BuildTarget)reader.ReadInt32();\noutPutSize = reader.ReadInt32();\n}", "CodeBleu_score": 30.760399503460196}]}
{"instance_id": "4d1412b550a3", "generation_result": [{"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\tresult.Clear();\n\nfor (int i = 0; i < sp.arraySize; i++) {\nvar element = sp.GetArrayElementAtIndex(i);\nif (element.objectReferenceValue!= null) {\nresult.Add(element.objectReferenceValue.name);\n}\n}\n\nif (result.Count == 0) {\nreturn s_ContentNothing.text;\n}\n\ns_Sb.Length = 0;\nforeach (var name in result) {\ns_Sb.Append(name);\ns_Sb.Append(',');\n}\ns_Sb.Remove(s_Sb.Length - 1, 1);\nreturn s_Sb.ToString();\n}", "CodeBleu_score": 45.450694560684134}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\tresult.Clear();\n\nfor (int i = 0; i < sp.arraySize; i++) {\nSerializedProperty element = sp.GetArrayElementAtIndex(i);\nif (element.objectReferenceValue!= null) {\nresult.Add(element.objectReferenceValue.name);\n}\n}\n\nif (result.Count == 0) {\nreturn s_ContentNothing.text;\n}\n\ns_Sb.Length = 0;\nfor (int i = 0; i < result.Count; i++) {\nif (i > 0) s_Sb.Append(\\\", \\\");\ns_Sb.Append(result[i]);\n}\nreturn s_Sb.ToString();\n}", "CodeBleu_score": 45.7887730469337}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\tresult.Clear();\n\nfor (int i = 0; i < sp.arraySize; i++) {\nSerializedProperty child = sp.GetArrayElementAtIndex(i);\n\nif (child.objectReferenceValue!= null) {\nresult.Add(child.objectReferenceValue.name);\n}\n}\n\nif (result.Count == 0) {\nreturn s_ContentNothing.text;\n}\n\ns_Sb.Length = 0;\n\nfor (int i = 0; i < result.Count; i++) {\nif (i > 0) {\ns_Sb.Append(\\\", \\\");\n}\n\ns_Sb.Append(result[i]);\n}\n\nreturn s_Sb.ToString();\n}", "CodeBleu_score": 45.67741497792458}]}
{"instance_id": "5014bde74f8b", "generation_result": [{"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t (!add && s_ActiveNames.Contains(prop.name)) return;\n\tif (add &&!s_ActiveNames.Contains(prop.name)) return;\n\n\tvar name = prop.name;\n\tvar type = prop.type;\n\tvar spName = sp.FindPropertyRelative(\\\"m_Name\\\");\n\tvar spType = sp.FindPropertyRelative(\\\"m_Type\\\");\n\n\tmenu.AddItem(new GUIContent(name), s_ActiveNames.Contains(name), x => {\n\t\tvar current = (SerializedProperty)x;\n\t\tcurrent.FindPropertyRelative(\\\"m_Name\\\").stringValue = name;\n\t\tcurrent.FindPropertyRelative(\\\"m_Type\\\").intValue = (int)type;\n\t\tif (add) {\n\t\t\tcurrent.serializedObject.ApplyModifiedProperties();\n\t\t\tsp.InsertArrayElementAtIndex(sp.arraySize);\n\t\t\tsp.serializedObject.ApplyModifiedProperties();\n\t\t} else {\n\t\t\tcurrent.serializedObject.ApplyModifiedProperties();\n\t\t\tsp.DeleteArrayElementAtIndex(sp.arraySize - 1);\n\t\t\tsp.serializedObject.ApplyModifiedProperties();\n\t\t}\n\t}, sp);\n}", "CodeBleu_score": 41.60514798079275}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t (!add && s_ActiveNames.Contains(prop.name)) return;\n\tif (add && s_ActiveNames.Contains(prop.name)) return;\n\n\tmenu.AddItem(new GUIContent(prop.name), false, x => {\n\t\tvar current = (SerializedProperty)x;\n\t\tvar index = current.arraySize;\n\t\tcurrent.InsertArrayElementAtIndex(index);\n\t\tvar p = current.GetArrayElementAtIndex(index);\n\t\tp.FindPropertyRelative(\\\"m_Name\\\").stringValue = prop.name;\n\t\tp.FindPropertyRelative(\\\"m_Type\\\").intValue = (int)prop.type;\n\t\tcurrent.serializedObject.ApplyModifiedProperties();\n\t}, sp);\n}", "CodeBleu_score": 47.32030383730213}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t (!add && s_ActiveNames.Contains(prop.name)) return;\n\tif (add && s_ActiveNames.Contains(prop.name)) return;\n\tvar p = new SerializedProperty(sp.arraySize);\n\tsp.InsertArrayElementAtIndex(sp.arraySize);\n\tp.FindPropertyRelative(\\\"m_Name\\\").stringValue = prop.name;\n\tp.FindPropertyRelative(\\\"m_Type\\\").intValue = (int)prop.type;\n\tmenu.AddItem(new GUIContent(prop.name), false, x => {\n\t\tvar current = (SerializedProperty)x;\n\t\tif (add) s_ActiveNames.Add(prop.name);\n\t\telse s_ActiveNames.Remove(prop.name);\n\t\tcurrent.serializedObject.ApplyModifiedProperties();\n\t}, p);\n}", "CodeBleu_score": 45.58281486599214}]}
{"instance_id": "20e390481814", "generation_result": [{"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t\tif (sp.propertyType == SerializedPropertyType.Vector3) {\n\t\tEditorGUI.BeginChangeCheck();\n\t\tshowXyz = GUILayout.Toggle(showXyz, s_ContentXyz, EditorStyles.miniButton, GUILayout.Width(60));\n\t\tif (EditorGUI.EndChangeCheck()) {\n\t\t\tif (showXyz) {\n\t\t\t\tsp.vector3Value = new Vector3(sp.vector3Value.x, sp.vector3Value.x, sp.vector3Value.x);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsp.vector3Value = new Vector3(sp.vector3Value.x, sp.vector3Value.y, sp.vector3Value.z);\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tEditorGUI.BeginChangeCheck();\n\t\tshowXyz = GUILayout.Toggle(showXyz, s_ContentSingle, EditorStyles.miniButton, GUILayout.Width(60));\n\t\tif (EditorGUI.EndChangeCheck()) {\n\t\t\tif (showXyz) {\n\t\t\t\tsp.vector3Value = new Vector3(sp.vector3Value.x, sp.vector3Value.x, sp.vector3Value.x);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsp.floatValue = sp.vector3Value.x;\n\t\t\t}\n\t\t}\n\t}\n\n\tEditorGUI.BeginDisabledGroup(showXyz);\n\tEditorGUI.indentLevel++;\n\tEditorGUI.PropertyField(EditorGUILayout.GetControlRect(true, EditorGUIUtility.singleLineHeight), sp);\n\tEditorGUI.indentLevel--;\n\tEditorGUI.EndDisabledGroup();\n\n\treturn showXyz;\n}", "CodeBleu_score": 43.51857985227946}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\tEditorGUILayout.PropertyField(sp);\n\nEditorGUI.BeginChangeCheck();\nshowXyz = GUILayout.Toggle(showXyz, s_ContentXyz, EditorStyles.miniButton, GUILayout.Width(60));\nif (EditorGUI.EndChangeCheck() &&!showXyz) {\nsp.vector3Value = new Vector3(sp.floatValue, sp.floatValue, sp.floatValue);\n}\n\nEditorGUI.BeginDisabledGroup(showXyz);\nEditorGUILayout.PropertyField(sp, s_ContentX, GUILayout.Width(30));\nEditorGUILayout.PropertyField(sp, s_ContentY, GUILayout.Width(30));\nEditorGUILayout.PropertyField(sp, s_ContentZ, GUILayout.Width(30));\nEditorGUI.EndDisabledGroup();\n\nreturn showXyz;\n}", "CodeBleu_score": 35.13679206448046}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t\n#if UNITY_2018_3_OR_NEWER\nEditorGUI.BeginChangeCheck();\n#endif\n\nvar x = sp.FindPropertyRelative(\"x\");\nvar y = sp.FindPropertyRelative(\"y\");\nvar z = sp.FindPropertyRelative(\"z\");\n\n// Check if all x, y, and z values are approximately equal.\nbool allEqual = Mathf.Approximately(x.floatValue, y.floatValue) && Mathf.Approximately(y.floatValue, z.floatValue);\n\n// Check if x, y, and z have multiple different values.\nbool allDifferent = x.hasMultipleDifferentValues || y.hasMultipleDifferentValues || z.hasMultipleDifferentValues;\n\n// If x, y, and z are all approximately equal or have multiple different values, display them as a Vector3.\nif (showXyz || allEqual || allDifferent) {\nEditorGUILayout.PropertyField(sp, showXyz);\n}\n// Otherwise, display the x value and sync y and z to x.\nelse {\nEditorGUILayout.PropertyField(x, showXyz);\ny.floatValue = x.floatValue;\nz.floatValue = x.floatValue;\n}\n\n#if UNITY_2018_3_OR_NEWER\nif (EditorGUI.EndChangeCheck()) {\nsp.serializedObject.ApplyModifiedProperties();\n}\n#endif\n\nreturn allEqual || allDifferent;\n}", "CodeBleu_score": 42.4123439798465}]}
{"instance_id": "c3587cbcda7e", "generation_result": [{"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t", "CodeBleu_score": 4.0916924613467}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t", "CodeBleu_score": 4.0916924613467}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\n    // Search for an existing entry\n    foreach (var entry in s_Entries) {\n        if (entry.baseMat == baseMat && entry.texture == texture && entry.id == id && entry.props == props) {\n            entry.count++;\n            return entry.mat;\n        }\n    }\n\n    // Create a new entry\n    var entry = new MatEntry();\n    entry.baseMat = baseMat;\n    entry.texture = texture;\n    entry.id = id;\n    entry.props = props;\n    entry.count = 1;\n    entry.mat = new Material(baseMat);\n    entry.mat.mainTexture = texture;\n    s_Entries.Add(entry);\n    return entry.mat;\n\n}", "CodeBleu_score": 30.454064407496084}]}
{"instance_id": "a35149bc8b8b", "generation_result": [{"code": "public static void Remove(Material customMat){\n\tvar i = 0; i < s_Entries.Count; i++) {\nvar e = s_Entries[i];\nif (e.customMat!= customMat) continue;\n--e.count;\nif (e.count > 0) continue;\n//Debug.LogFormat(\\\"<<<< ModifiedMaterial.Remove -> count = count:{0}, mat:{1}, tex:{2}, id:{3}\\\", s_Entries.Count, e.baseMat, e.texture, e.id);\nObject.Destroy(e.customMat);\ns_Entries.RemoveAt(i);\nbreak;\n}\n}", "CodeBleu_score": 39.798504713109175}, {"code": "public static void Remove(Material customMat){\n\tvar i = 0; i < s_Entries.Count; i++) {\nvar e = s_Entries[i];\nif (e.customMat!= customMat) continue;\n--e.count;\n//Debug.LogFormat(\\\"<<<< ModifiedMaterial.Remove -> count = count:{0}, mat:{1}, tex:{2}, id:{3}\\\", s_Entries.Count, e.baseMat, e.texture, e.id);\nif (e.count <= 0) {\nObject.Destroy(e.customMat);\ns_Entries.RemoveAt(i);\n--i;\n}\nreturn;\n}\n}", "CodeBleu_score": 40.72710196799204}, {"code": "public static void Remove(Material customMat){\n\t(var i = 0; i < s_Entries.Count; i++) {\nvar e = s_Entries[i];\nif (e.customMat!= customMat) continue;\nif (--e.count == 0) {\nObject.Destroy(e.customMat);\ns_Entries.RemoveAt(i);\n--i;\n}\n//Debug.LogFormat(\\\"<<<< ModifiedMaterial.Remove -> count = count:{0}, mat:{1}, tex:{2}, id:{3}\\\", s_Entries.Count, e.baseMat, e.texture, e.id);\nreturn;\n}\n\nDebug.LogWarningFormat(\\\"ModifiedMaterial.Remove -> Could not find customMat:{0}\\\", customMat);\n}", "CodeBleu_score": 44.95363326826152}]}
{"instance_id": "892bbee52ab9", "generation_result": [{"code": "private void RefreshParticles(GameObject root){\n\t\n}", "CodeBleu_score": 0.9463577382409512}, {"code": "private void RefreshParticles(GameObject root){\n\t", "CodeBleu_score": 0.8950667016864431}, {"code": "private void RefreshParticles(GameObject root){\n\t\n// Collect all particle systems in the hierarchy.\nvar particles = new List<ParticleSystem>();\nroot.GetComponentsInChildren(true, particles);\n\n// Remove those not associated with this UIParticle.\nparticles.RemoveAll(p => p.gameObject!= root);\n\n// Update the particle systems' texture sheet animation settings if necessary.\nfor (var i = 0; i < particles.Count; i++) {\nvar ps = particles[i];\nif (ps.main.startFrame!= 0) {\nps.main.startFrame = 0;\n}\n}\n\nRefreshParticles(particles);\n}", "CodeBleu_score": 36.31497735052271}]}
{"instance_id": "d6b082e37770", "generation_result": [{"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\temblyTypes(currentAssembly)\n.Where(t => t.GetInterfaces().Contains(typeof(IColorSwapManager)))\n.As<IColorSwapManager>()\n.AsSelf()\n.SingleInstance();\n}", "CodeBleu_score": 28.84840789572003}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\temblyTypes(currentAssembly)\n.AssignableTo<IColorSwapManager>()\n.As<IColorSwapManager>()\n.AsSelf()\n.SingleInstance();\n}", "CodeBleu_score": 40.95320400566395}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\te current assembly that implement the IColorSwapManager interface\n// with a container builder. Configure these types to be treated as single-instance components.\ncontainerBuilder.RegisterAssemblyTypes(currentAssembly)\n.Where(t => t.GetInterfaces().Contains(typeof(IColorSwapManager)))\n.As<IColorSwapManager>()\n.AsSelf()\n.SingleInstance();\n}", "CodeBleu_score": 25.25980681604345}]}
{"instance_id": "2359d72977a4", "generation_result": [{"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t", "CodeBleu_score": 10.25692062020006}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t Log.Info(\\\"Connecting to {0}:{1}...\\\");\n IpAddress = ipAddress;\n ServerPort = port;\n\n await initSerializerTask;\n\n await CurrentState.NegotiateReservationAsync(this);\n }", "CodeBleu_score": 69.81158547969495}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t", "CodeBleu_score": 10.25692062020006}]}
{"instance_id": "151a27d718b1", "generation_result": [{"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\tsessionConnectionState == null) {\n\t\tthrow new ArgumentNullException(nameof(sessionConnectionState));\n\t}\n\n\tif (CurrentState == sessionConnectionState) {\n\t\treturn;\n\t}\n\n\tLog.Info($\"Transitioning from {CurrentState.CurrentStage} to {sessionConnectionState.CurrentStage}\");\n\tCurrentState = sessionConnectionState;\n\n\tif (CurrentState.CurrentStage == MultiplayerSessionConnectionStage.SESSION_RESERVED) {\n\t\tLog.Info($\"Player name: {PlayerSettings.Name}\");\n\t}\n\n\tConnectionStateChanged?.Invoke(this, CurrentState.CurrentStage);\n}", "CodeBleu_score": 40.88416162806744}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\turrentState == sessionConnectionState) {\nreturn;\n}\n\nLog.Info($\"Transitioning from {CurrentState.CurrentStage} to {sessionConnectionState.CurrentStage}\");\n\nCurrentState = sessionConnectionState;\n\nif (CurrentState.CurrentStage == MultiplayerSessionConnectionStage.SESSION_RESERVED) {\nLog.Info($\"Player name: {PlayerSettings.PlayerName}\");\n}\n\nConnectionStateChanged?.Invoke(this, CurrentState.CurrentStage);\n}", "CodeBleu_score": 35.96092765172505}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\tsessionConnectionState == null) {\n\t\tthrow new ArgumentNullException(nameof(sessionConnectionState));\n\t}\n\n\tif (CurrentState == sessionConnectionState) {\n\t\treturn;\n\t}\n\n\tLog.Info($\"Transitioning from {CurrentState.CurrentStage} to {sessionConnectionState.CurrentStage}\");\n\tCurrentState = sessionConnectionState;\n\n\tif (sessionConnectionState.CurrentStage == MultiplayerSessionConnectionStage.SESSION_RESERVED) {\n\t\tLog.Info($\"Connected to server as {PlayerSettings.PlayerName}\");\n\t}\n\n\tConnectionStateChanged?.Invoke(this, new MultiplayerSessionConnectionStateChangedEventArgs(CurrentState));\n}", "CodeBleu_score": 43.21475645595866}]}
{"instance_id": "7f7717307d6a", "generation_result": [{"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\tif (IsConnected) {\nthrow new InvalidOperationException(\"Client is already connected\");\n}\n\nclient.Start();\n\nDebug.Log($\"Connecting to {ipAddress}:{serverPort}\");\n\nclient.Connect(ipAddress, serverPort, \"Test\");\n\nconnectedEvent.Reset();\n\nawait Task.WhenAny(Task.Delay(2000), connectedEvent.AsTask());\n\nif (!connectedEvent.IsSet) {\nDebug.LogWarning(\"Connection timed out\");\nclient.Stop();\n}\n\nIsConnected = connectedEvent.IsSet;\n}", "CodeBleu_score": 50.63706599224441}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t\tif (IsConnected) {\n\t\treturn;\n\t}\n\n\t//Start the client\n\tclient.Start();\n\n\t//Attempt to connect to the server\n\tclient.Connect(ipAddress, serverPort, \"Nitrox Client\");\n\n\t//Wait for the connection event for up to 2000 milliseconds\n\tconnectedEvent.WaitOne(2000);\n\n\t//Reset the event\n\tconnectedEvent.Reset();\n\n\t//If the event was set, the connection was successful\n\tIsConnected = true;\n}", "CodeBleu_score": 52.11138495355261}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t\n#if DEBUG\n    if (networkDebugger!= null) {\n        networkDebugger.Log(\"Client\", \"Connecting to \" + ipAddress + \":\" + serverPort);\n    }\n#endif\n    client.Start();\n    client.Connect(ipAddress, serverPort, \"NitroxClient\");\n    connectedEvent.Reset();\n    await Task.Run(() => connectedEvent.WaitOne(2000));\n    if (connectedEvent.IsSet) {\n        IsConnected = true;\n    } else {\n        client.Stop();\n        IsConnected = false;\n        if (networkDebugger!= null) {\n            networkDebugger.Log(\"Client\", \"Failed to connect to server!\");\n        }\n    }\n}", "CodeBleu_score": 52.80771609768479}]}
{"instance_id": "eeb95434f1eb", "generation_result": [{"code": "public void StartFireSuppression(NitroxId id){\n\tGameObject cyclops = NitroxEntity.RequireObjectFrom(id);\nCyclopsFireSuppressionButton fireSuppressionButton = cyclops.RequireComponentInChildren<CyclopsFireSuppressionButton>();\nusing (PacketSuppressor<EntityMetadataUpdate>.Suppress()) {\nfireSuppressionButton.StartCooldown();\n}\n}", "CodeBleu_score": 38.31702643242764}, {"code": "public void StartFireSuppression(NitroxId id){\n\tGameObject cyclops = NitroxEntity.RequireObjectFrom(id);\nCyclopsFireSuppressionButton fireSuppressionButton = cyclops.RequireComponentInChildren<CyclopsFireSuppressionButton>();\nusing (PacketSuppressor<EntityMetadataUpdate>.Suppress()) {\nfireSuppressionButton.StartCooldown();\nCyclopsFireSuppression fireSuppression = new CyclopsFireSuppression(id);\npacketSender.Send(fireSuppression);\n}\n}", "CodeBleu_score": 42.204097021451226}, {"code": "public void StartFireSuppression(NitroxId id){\n\tGameObject cyclops = NitroxEntity.RequireObjectFrom(id);\nCyclopsFireSuppressionButton fireSuppressionButton = cyclops.RequireComponentInChildren<CyclopsFireSuppressionButton>();\nusing (PacketSuppressor<EntityMetadataUpdate>.Suppress()) {\nfireSuppressionButton.StartCooldown();\n}\n}", "CodeBleu_score": 38.31702643242764}]}
{"instance_id": "a23a043559c6", "generation_result": [{"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t\nCyclopsDamagePointRepaired packet = new CyclopsDamagePointRepaired(subRoot.id, damagePoint.id, repairAmount);\npacketSender.Send(packet);\n\n}", "CodeBleu_score": 21.124265342210638}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t", "CodeBleu_score": 9.740564948536866}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t", "CodeBleu_score": 9.740564948536866}]}
{"instance_id": "dfb3586de856", "generation_result": [{"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\tif (!subRoot.TryGetIdOrWarn(out NitroxId subId)) {\nreturn;\n}\n\n// Create a CyclopsDamageInfoData object.\nCyclopsDamageInfoData infoData = new();\n\n// Gather active damage points and fire data.\ninfoData.activeDamagePoints = subRoot.damageManager.GetActiveDamagePoints();\ninfoData.activeFire = subRoot.fireManager.GetActiveFire();\n\n// Construct a CyclopsDamage packet with the collected information.\nCyclopsDamage packet = new(subId, infoData);\n\n// Send the packet.\npacketSender.Send(packet);\n}", "CodeBleu_score": 29.720643379343585}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\tif (!subRoot.TryGetIdOrWarn(out NitroxId subId)) {\nreturn;\n}\n\nif (subRoot.health.health <= 0f) {\nreturn;\n}\n\nList<CyclopsDamagePoint> activeDamagePoints = new();\nList<CyclopsDamagePoint> inactiveDamagePoints = new();\n\nforeach (CyclopsDamagePoint damagePoint in subRoot.damageManager.damagePoints) {\nif (damagePoint.active) {\nactiveDamagePoints.Add(damagePoint);\n} else {\ninactiveDamagePoints.Add(damagePoint);\n}\n}\n\nif (info.HasValue) {\nCyclopsDamageInfoData damageInfoData = new(subId, activeDamagePoints.Count, inactiveDamagePoints.Count, info.Value);\nCyclopsDamage packet = new(subId, damageInfoData);\npacketSender.Send(packet);\n}\n}", "CodeBleu_score": 32.186553520320786}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\tif (!subRoot.TryGetIdOrWarn(out NitroxId subId)) {\nreturn;\n}\n\n// Check if the SubRoot has sufficient health.\nif (subRoot.health.health <= 0f) {\nreturn;\n}\n\n// Create a CyclopsDamageInfoData object to store damage information.\nCyclopsDamageInfoData damageInfo = new();\n\n// Get active damage points.\nforeach (CyclopsDamagePoint damagePoint in subRoot.damageManager.damagePoints) {\nif (damagePoint.IsDamaged()) {\ndamageInfo.damagePoints.Add(damagePoint.damagePointType);\n}\n}\n\n// Get active fire data.\nif (subRoot.fireManager.fireActive) {\ndamageInfo.fireActive = true;\n}\n\n// If damage information is provided, add it to the CyclopsDamageInfoData object.\nif (info.HasValue) {\ndamageInfo.damageInfo = info.Value;\n}\n\n// Create a CyclopsDamage packet with the collected information.\nCyclopsDamage packet = new(subId, damageInfo);\n\n// Send the packet.\npacketSender.Send(packet);\n}", "CodeBleu_score": 35.37259132964359}]}
{"instance_id": "03223c10109f", "generation_result": [{"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t", "CodeBleu_score": 5.082859966051124}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t", "CodeBleu_score": 5.082859966051124}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t\tforeach (Entity entity in dirtyEntities) {\n\t\tif (entity.ParentId!= null) {\n\t\t\tRemoveParentEntity(entity);\n\t\t}\n\t\tif (entity.ChildEntities.Count > 0) {\n\t\t\tRemoveChildrenEntities(entity);\n\t\t}\n\t\tif (entity.Id!= null) {\n\t\t\tRemoveEntity(entity);\n\t\t}\n\t}\n}", "CodeBleu_score": 51.7370517022253}]}
{"instance_id": "990abe8e473e", "generation_result": [{"code": "private void AddPendingParentEntity(Entity entity){\n\tif (!pendingParentEntitiesByParentId.ContainsKey(entity.ParentId)) {\npendingParentEntitiesByParentId[entity.ParentId] = new List<Entity>();\n}\npendingParentEntitiesByParentId[entity.ParentId].Add(entity);\n}", "CodeBleu_score": 38.50978591796109}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t\tif (!pendingParentEntitiesByParentId.TryGetValue(entity.ParentId, out List<Entity> pendingEntities)) {\n\t\tpendingEntities = new List<Entity>();\n\t\tpendingParentEntitiesByParentId.Add(entity.ParentId, pendingEntities);\n\t}\n\tpendingEntities.Add(entity);\n}", "CodeBleu_score": 69.38442483761939}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t\nif (!pendingParentEntitiesByParentId.TryGetValue(entity.ParentId, out List<Entity> pendingEntities)) {\npendingEntities = new List<Entity>();\npendingParentEntitiesByParentId[entity.ParentId] = pendingEntities;\n}\n\npendingEntities.Add(entity);\n}", "CodeBleu_score": 81.57377657515748}]}
{"instance_id": "a885fbb1f085", "generation_result": [{"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t\nif (cooldown < 0.0f) {\nDebug.LogError(\\\"ClawArm \\\" + clawArm.name + \\\" received a negative cooldown!\\\");\nreturn;\n}\n\nif (cooldown < clawArm.pickupCooldown) {\nBroadcastArmAction(clawArm, ArmAction.START_USE_TOOL);\n} else if (cooldown < clawArm.punchCooldown) {\nBroadcastArmAction(clawArm, ArmAction.ALT_HIT);\n} else {\nDebug.LogError(\\\"ClawArm \\\" + clawArm.name + \\\" received a cooldown of \\\" + cooldown + \\\", which is not a valid cooldown!\\\");\n}\n}", "CodeBleu_score": 35.84151088707993}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t\tif (cooldown == clawArm.pickupCooldown) {\n\t\tBroadcastArmAction(clawArm, ArmAction.START_USE_TOOL);\n\t} else if (cooldown == clawArm.punchCooldown) {\n\t\tBroadcastArmAction(clawArm, ArmAction.ALT_HIT);\n\t} else {\n\t\tDebug.LogError(string.Format(\"ClawArm {0} has a cooldown of {1}, which is neither pickup nor punch cooldown.\", clawArm.name, cooldown));\n\t}\n}", "CodeBleu_score": 31.55101943719243}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t\nif (cooldown <= clawArm.pickupCooldown) {\n\nclawArm.action = ExosuitArmAction.START_USE_TOOL;\n\n} else if (cooldown <= clawArm.punchCooldown) {\n\nclawArm.action = ExosuitArmAction.ALT_HIT;\n\n} else {\n\nDebug.LogError(\\\"Claw arm action cooldown is out of range.\\\");\n\n}\n\nBroadcastArmAction(clawArm);\n\n}", "CodeBleu_score": 32.00746224969741}]}
{"instance_id": "e390441c8dc2", "generation_result": [{"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t\t// We don't want to broadcast that event if it's from another player's inventory\n\tif (parent.GetComponentInParent<RemotePlayerIdentifier>(true)) {\n\t\treturn;\n\t}\n\n\tif (!gameObject.TryGetIdOrWarn(out NitroxId itemId)) {\n\t\treturn;\n\t}\n\n\tif (!InventoryContainerHelper.TryGetOwnerId(parent, out NitroxId ownerId)) {\n\t\t// Error logging is done in the function\n\t\treturn;\n\t}\n\n\tif (packetSender.Send(new EntitySpawnedByClient(new InstalledBatteryEntity(itemId, ownerId, techType)))) {\n\t\tLog.Debug($\"Sent: Added battery {techType} to container {parent.GetFullHierarchyPath()}\");\n\t}\n}", "CodeBleu_score": 55.07509006105934}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t\n// We don't want to broadcast that event if it's from another player's inventory\nif (parent.GetComponentInParent<RemotePlayerIdentifier>(true)) {\nreturn;\n}\n\nif (!gameObject.TryGetIdOrWarn(out NitroxId itemId)) {\nreturn;\n}\n\nif (!InventoryContainerHelper.TryGetOwnerId(parent, out NitroxId ownerId)) {\n// Error logging is done in the function\nreturn;\n}\n\nif (packetSender.Send(new EntitySpawnedByClient(new InstalledBatteryEntity(itemId, ownerId, techType)))) {\nLog.Debug($\\\"Sent: Added battery {techType} to container {parent.GetFullHierarchyPath()}\\\");\n}\n}", "CodeBleu_score": 55.07264294581269}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t\n}", "CodeBleu_score": 12.073998608536533}]}
{"instance_id": "a87b772a8e5a", "generation_result": [{"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t", "CodeBleu_score": 3.750387938056593}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\tPickingUpObject = gameObject;\ngameObject.GetComponent<RemoteControl>().enabled = false;\nif (gameObject.GetComponent<NitroxId>() == null) {\nNitroxId nitroxId = gameObject.AddComponent<NitroxId>();\nnitroxId.Id = NitroxId.Generate();\n}\nif (gameObject.GetComponent<NitroxId>().Id == null) {\nDebug.LogWarning(\"Item picked up without an ID\");\n}\nif (gameObject.GetComponent<NitroxId>().Id!= null) {\nentities.RemovePositionBroadcasting(gameObject.GetComponent<NitroxId>().Id);\n}\ngameObject.GetComponent<NitroxId>().IsSpawned = true;\nDebug.Log(\"Picked up \" + gameObject.GetComponent<NitroxId>().Id);\nPickupItem pickupItem = new PickupItem(gameObject.GetComponent<NitroxId>().Id);\npacketSender.Send(pickupItem);\nPickingUpObject = null;\n}", "CodeBleu_score": 36.4370034784776}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t\tPickingUpObject = gameObject;\n\tgameObject.GetComponent<RemoteControl>().enabled = false;\n\tNitroxId id = gameObject.GetComponent<NitroxId>();\n\tif (id == null) {\n\t\tid = new NitroxId();\n\t\tgameObject.AddComponent<NitroxId>();\n\t}\n\tentities.StopBroadcastingPosition();\n\tgameObject.AddComponent<InventoryItem>();\n\tgameObject.GetComponent<InventoryItem>().IsSpawned = true;\n\tLog.Info($\"Picked up {techType} with ID {id}\");\n\tPickupItem pickupItem = new PickupItem(id.Id, techType.ToDto());\n\tpacketSender.Send(pickupItem);\n\tPickingUpObject = null;\n}", "CodeBleu_score": 37.480733705894465}]}
{"instance_id": "b6d1e68114e1", "generation_result": [{"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t\t// If the item is dropped in a WaterPark we need to handle it differently\n\tNitroxId parentId = null;\n\tif (IsGlobalRootObject(gameObject) || (gameObject.GetComponent<Pickupable>() && TryGetCurrentWaterParkId(out parentId))) {\n\t\t// We cast it to an entity type that is always seeable by clients\n\t\t// therefore, the packet will be redirected to everyone\n\t\tInventoryItemEntity inventoryItemEntity = new(gameObject.transform.ToLocalDto(), 0, gameObject.GetComponent<PrefabIdentifier>().ClassId, true, NitroxEntity.GetIdOrGenerateNew(gameObject), TechType.None.ToDto(), entityMetadataManager.Extract(gameObject).OrNull(), parentId, GetPrefabChildren(gameObject, NitroxEntity.GetIdOrGenerateNew(gameObject), entityMetadataManager).ToList());\n\n\t\t// If the object is a battery, we need to add battery data\n\t\tif (gameObject.GetComponent<Battery>()) {\n\t\t\tinventoryItemEntity.battery = gameObject.GetComponent<Battery>().GetBatteryDto();\n\t\t}\n\n\t\treturn inventoryItemEntity;\n\t}\n\n\t// Generic case\n\tInventoryItemEntity inventoryItemEntity = new(gameObject.transform.ToWorldDto(), 0, gameObject.GetComponent<PrefabIdentifier>().ClassId, false, NitroxEntity.GetIdOrGenerateNew(gameObject), TechType.None.ToDto(), entityMetadataManager.Extract(gameObject).OrNull(), null, GetPrefabChildren(gameObject, NitroxEntity.GetIdOrGenerateNew(gameObject), entityMetadataManager).ToList());\n\n\t// If the object is a battery, we need to add battery data\n\tif (gameObject.GetComponent<Battery>()) {\n\t\tinventoryItemEntity.battery = gameObject.GetComponent<Battery>().GetBatteryDto();\n\t}\n\n\treturn inventoryItemEntity;\n}", "CodeBleu_score": 48.75043202051535}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t\tNitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\n\tstring classId = gameObject.GetComponent<PrefabIdentifier>().ClassId;\n\tTechType techType = CraftData.GetTechType(gameObject);\n\tOptional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n\tInventoryItemEntity inventoryItemEntity = new(id, classId, techType.ToDto(), metadata.OrNull());\n\tinventoryItemEntity.playerId = Player.main.GetNitroxId();\n\tinventoryItemEntity.battery = gameObject.GetComponent<Battery>()?.GetBatteryDto();\n\treturn inventoryItemEntity;\n}", "CodeBleu_score": 47.51364072916636}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\tNitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\nOptional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\nstring classId = gameObject.GetComponent<PrefabIdentifier>().ClassId;\nTechType techType = CraftData.GetTechType(gameObject);\n\nList<Entity> childrenEntities = GetPrefabChildren(gameObject, id, entityMetadataManager).ToList();\n\n// If the item is a battery, we need to extract its charge level\nif (techType == TechType.Battery) {\nBattery battery = gameObject.GetComponent<Battery>();\nif (battery!= null) {\nmetadata = metadata.Or(new EntityMetadata(new Dictionary<string, object> { { \"charge\", battery.charge } }));\n}\n}\n\nreturn new InventoryItemEntity(id, classId, techType.ToDto(), metadata.OrNull(), childrenEntities);\n}", "CodeBleu_score": 45.71173543442733}]}
{"instance_id": "e416d51a7af7", "generation_result": [{"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\tthis.multiplayerSession = multiplayerSession;\nthis.packetSender = packetSender;\nthis.throttledPacketSender = throttledPacketSender;\nthis.body = new Lazy<GameObject>(() => GameObject.Find(\"Body\"));\nthis.playerModel = new Lazy<GameObject>(() => GameObject.Find(\"PlayerModel\"));\nthis.bodyPrototype = new Lazy<GameObject>(() => GameObject.Find(\"BodyPrototype\"));\nthis.Permissions = new Perms();\n}", "CodeBleu_score": 65.39570249725774}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\tthis.multiplayerSession = multiplayerSession;\nthis.packetSender = packetSender;\nthis.throttledPacketSender = throttledPacketSender;\nthis.body = new Lazy<GameObject>(() => Object.Instantiate(multiplayerSession.PlayerSettings.BodyPrefab));\nthis.playerModel = new Lazy<GameObject>(() => Object.Instantiate(multiplayerSession.PlayerSettings.PlayerModelPrefab));\nthis.bodyPrototype = new Lazy<GameObject>(() => Object.Instantiate(multiplayerSession.PlayerSettings.BodyPrototypePrefab));\nthis.Permissions = new Perms();\n}", "CodeBleu_score": 57.161283268467365}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t", "CodeBleu_score": 2.6268543678398504}]}
{"instance_id": "def56af985df", "generation_result": [{"code": "private GameObject CreateBodyPrototype{\n\tget {\nif (!Player.main.gameObject.activeInHierarchy) {\nreturn null;\n}\n\nPlayer.main.RequireGameObject(\"head\").SetActive(true);\nGameObject body = Object.Instantiate(Player.main.RequireGameObject(\"body\"));\n\nbody.RequireComponent<Renderer>().shadowCastingMode = ShadowCastingMode.Off;\nbody.SetActive(false);\nbody.name = \"RemotePlayerPrototype\";\n\n// Remove items held in hand from the clone.\nforeach (GameObject item in body.RequireGameObject(\"hand_l\").GetComponentsInChildren<Item>()) {\nitem.transform.parent = null;\nObject.Destroy(item.gameObject);\n}\n\nforeach (GameObject item in body.RequireGameObject(\"hand_r\").GetComponentsInChildren<Item>()) {\nitem.transform.parent = null;\nObject.Destroy(item.gameObject);\n}\n\nreturn body;\n}\n}", "CodeBleu_score": 34.752205765473}, {"code": "private GameObject CreateBodyPrototype{\n\t\tget {\n\t\tif (Player.main.GetComponentInChildren<Head>().shadowCastingMode!= ShadowCastingMode.On) {\n\t\t\tPlayer.main.GetComponentInChildren<Head>().shadowCastingMode = ShadowCastingMode.On;\n\t\t}\n\n\t\tvar body = Object.Instantiate(BodyPrototype, Vector3.zero, Quaternion.identity);\n\t\tbody.name = \\\"RemotePlayerPrototype\\\";\n\t\tbody.SetActive(false);\n\n\t\tforeach (var item in body.GetComponentsInChildren<Item>()) {\n\t\t\tObject.Destroy(item.gameObject);\n\t\t}\n\n\t\treturn body;\n\t}\n}", "CodeBleu_score": 26.378025836091368}, {"code": "private GameObject CreateBodyPrototype{\n\t{\n    // Ensure the player's head is visible\n    Player.main.head.GetComponent<Renderer>().enabled = true;\n    // Instantiate a clone of the body prototype\n    GameObject bodyPrototype = Object.Instantiate(Player.main.body.gameObject, Player.main.transform);\n    // Reset the head's shadow casting mode\n    bodyPrototype.RequireComponent<SkinnedMeshRenderer>().shadowCastingMode = ShadowCastingMode.On;\n    // Deactivate the clone and rename it to \"RemotePlayerPrototype\"\n    bodyPrototype.SetActive(false);\n    bodyPrototype.name = \\\"RemotePlayerPrototype\\\";\n    // Remove items held in hand from the clone\n    foreach (var item in bodyPrototype.GetComponentsInChildren<Item>())\n    {\n        Object.Destroy(item.gameObject);\n    }\n    // Return the clone\n    return bodyPrototype;\n}\n}", "CodeBleu_score": 30.467081119507828}]}
{"instance_id": "e9bd7f669aed", "generation_result": [{"code": "void ICacheable.Save(BinaryWriter bw){\n\tbw.Write(this.TypeName);\nbw.Write(this.Location);\nthis.Metadata.Save(bw);\nbw.Write(this.Processes.Count());\nforeach (BepInProcess process in this.Processes) {\nprocess.Save(bw);\n}\nbw.Write(this.Dependencies.Count());\nforeach (BepInDependency dependency in this.Dependencies) {\ndependency.Save(bw);\n}\nbw.Write(this.Incompatibilities.Count());\nforeach (BepInIncompatibility incompatibility in this.Incompatibilities) {\nincompatibility.Save(bw);\n}\nbw.Write(this.TargettedBepInExVersion.ToString());\n}", "CodeBleu_score": 31.016101693291937}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\tbw.Write(TypeName);\nbw.Write(Location);\nMetadata.Save(bw);\nbw.Write(Processes.Count());\nforeach (BepInProcess process in Processes)\nprocess.Save(bw);\nbw.Write(Dependencies.Count());\nforeach (BepInDependency dependency in Dependencies)\ndependency.Save(bw);\nbw.Write(Incompatibilities.Count());\nforeach (BepInIncompatibility incompatibility in Incompatibilities)\nincompatibility.Save(bw);\nbw.Write(TargettedBepInExVersion.ToString());\n}", "CodeBleu_score": 34.805342421847165}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\t", "CodeBleu_score": 1.8398687168104124}]}
{"instance_id": "a7e51620987d", "generation_result": [{"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t\tvar pluginType = pluginAssembly.GetType(pluginInfo.PluginType);\n\tvar plugin = (BasePlugin) Activator.CreateInstance(pluginType);\n\tPluginLoad?.Invoke(pluginInfo, pluginAssembly, plugin);\n\tplugin.Load();\n\treturn plugin;\n}", "CodeBleu_score": 63.02866193245732}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t", "CodeBleu_score": 8.773123625332863}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t\tvar pluginType = pluginAssembly.GetType(pluginInfo.PluginType);\n\tvar pluginInstance = (BasePlugin)Activator.CreateInstance(pluginType);\n\n\tPluginLoad?.Invoke(pluginInfo, pluginAssembly, pluginInstance);\n\n\tpluginInstance.Load();\n\n\treturn pluginInstance;\n}", "CodeBleu_score": 77.49321929319764}]}
{"instance_id": "0925dc086c01", "generation_result": [{"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\tif (TrampolineMethod == null) {\nPrepare();\nTrampolineMethod = GenerateTrampolineImpl(signature);\n}\nreturn TrampolineMethod;\n}", "CodeBleu_score": 55.237870558698354}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\tif (TrampolineMethod!= null) return TrampolineMethod;\nPrepare();\nTrampolineMethod = GenerateTrampolineImpl(signature);\nreturn TrampolineMethod;\n}", "CodeBleu_score": 40.92631138356302}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\tif (TrampolineMethod == null) {\nPrepare();\nTrampolineMethod = GenerateTrampolineImpl(TrampolinePtr, signature);\n}\nreturn TrampolineMethod;\n}", "CodeBleu_score": 64.43470571405221}]}
{"instance_id": "cfab5c23610e", "generation_result": [{"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\tusing Stream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(LocalizationFilePrefix + code + \\\".json\\\");\n\tif (stream == null) throw new NullReferenceException(\\\"Language file not found.\\\");\n\treturn JsonSerializer.Deserialize<Dictionary<string, string>>(stream);\n}", "CodeBleu_score": 22.87958121378982}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\tstring resourceName = LocalizationFilePrefix + code + \\\".json\\\";\n\tusing Stream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(resourceName);\n\tif (stream is null) {\n\t\tthrow new NullReferenceException(\\\"Could not find language file \\\" + resourceName + \\\".\\\");\n\t}\n\ttry {\n\t\treturn JsonSerializer.Deserialize<Dictionary<string, string>>(stream);\n\t} catch (JsonException e) {\n\t\tthrow new JsonException(\\\"Failed to deserialize language file \\\" + resourceName + \\\".\\\", e);\n\t}\n}", "CodeBleu_score": 48.58408713858232}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\tstring json = null;\n\n\tusing (Stream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(LocalizationFilePrefix + code)) {\n\t\tusing (StreamReader reader = new StreamReader(stream)) {\n\t\t\tjson = reader.ReadToEnd();\n\t\t}\n\t}\n\n\treturn JsonSerializer.Deserialize<Dictionary<string, string>>(json);\n}", "CodeBleu_score": 29.62512057216255}]}
{"instance_id": "9978bd31d199", "generation_result": [{"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\tint expressionCount = 0;\nforeach (var node in nodes) {\nif (node is ParserRuleContext) {\nexpressionCount += this.Visit(node);\n}\n}\nreturn expressionCount;\n}", "CodeBleu_score": 50.276120531907175}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\tint expressionCount = 0;\nforeach (IParseTree node in nodes) {\nif (node is ParserRuleContext) {\nexpressionCount += Visit(node);\n}\n}\nreturn expressionCount;\n}", "CodeBleu_score": 46.57163572211944}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\tint expressionCount = 0;\nforeach (IParseTree node in nodes) {\nif (node is ParserRuleContext) {\nexpressionCount++;\n}\n}\nreturn expressionCount;\n}", "CodeBleu_score": 37.18993696569159}]}
{"instance_id": "8f9bf9ee575a", "generation_result": [{"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t\n// First, visit all of the nodes, which are either terminal text\n// nodes or expressions. if they're expressions, we evaluate them,\n// and inject a positional reference into the final string.\nint expressionCount = GenerateCodeForExpressionsInFormattedText(context.children);\n\n// Now, retrieve the line ID tag from the line statement\nstring lineIDTag = null;\nfor (int i = 0; i < context.children.Count; i++) {\nvar child = context.children[i];\nif (child is TerminalNodeImpl) {\n// This is a terminal node.\nvar terminal = (TerminalNodeImpl)child;\nif (terminal.Symbol.Type == YarnSpinnerLexer.TAG) {\n// This is a tag.\nlineIDTag = terminal.Symbol.Text;\nbreak;\n}\n}\n}\n\nif (lineIDTag == null) {\nthrow new InvalidOperationException(\"No line ID tag found in line statement.\");\n}\n\n// Emit the RunLine opcode with the line ID and expression count\ncompiler.Emit(Opcode.RunLine, lineIDTag, expressionCount);\n\n// We don't return anything; we don't care about the return value of the line statement.\nreturn 0;\n}", "CodeBleu_score": 42.83621445411387}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t\nvar lineID = context.lineID().GetText();\n\n// if we don't have a line ID, throw an error\nif (lineID == null) {\nthrow new InvalidOperationException(\"Line statements must have a line ID\");\n}\n\n// generate code for the expressions in the formatted text\nvar expressionCount = GenerateCodeForExpressionsInFormattedText(context.formatted_text());\n\n// emit a RunLine instruction\ncompiler.AddInstruction(new RunLine(lineID, expressionCount));\n\nreturn 0;\n}", "CodeBleu_score": 27.114481904670928}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t\nvar lineID = context.LINE_ID().GetText();\nvar lineIDTag = compiler.stringTable.GetTag(lineID);\n\nif (lineIDTag == -1) {\nthrow new InvalidOperationException(\"Line ID \" + lineID + \" not found in string table\");\n}\n\nvar expressionCount = GenerateCodeForExpressionsInFormattedText(context.formatted_text());\n\n// emit the RunLine opcode\ncompiler.Emit(OpCode.RunLine, lineIDTag, expressionCount);\n\nreturn 0;\n}", "CodeBleu_score": 52.28917605716929}]}
{"instance_id": "b70d033fed9c", "generation_result": [{"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t", "CodeBleu_score": 1.9737119786745916}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t\nvar results = Enumerable.Empty<Diagnostic>();\n\nforeach (var command in yarnFile.Commands) {\nvar commandName = command.Key;\nvar commandDefinition = yarnFile.Commands[commandName];\nif (!commandDefinition.HasDefinition) {\nvar diagnostic = new Diagnostic {\nSeverity = DiagnosticSeverity.Warning,\nCode = \"unknown-command\",\nMessage = $\"Command \\\"{commandName}\\\" is not defined in the project's known commands.\",\nRange = new Range {\nStart = new Position {\nLine = commandDefinition.LineNumber,\nCharacter = commandDefinition.StartColumn,\n},\nEnd = new Position {\nLine = commandDefinition.LineNumber,\nCharacter = commandDefinition.EndColumn,\n},\n},\n};\n\nresults = results.Append(diagnostic);\n}\n}\n\nreturn results;\n}", "CodeBleu_score": 22.533293383204736}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\tvar results = Enumerable.Empty<Diagnostic>();\n\nforeach (var command in yarnFile.Commands) {\nvar definition = yarnFile.Definitions.FirstOrDefault(d => d.Name == command.Name);\nif (definition == null) {\nvar diagnostic = new Diagnostic {\nSeverity = DiagnosticSeverity.Warning,\nCode = \"unknown-command\",\nMessage = $\"Unknown command '{command.Name}'.\",\nRange = new Range {\nStart = new Position {\nLine = command.NameLine - 1,\nCharacter = command.NameStart,\n},\nEnd = new Position {\nLine = command.NameLine - 1,\nCharacter = command.NameEnd,\n},\n},\n};\n\nresults = results.Append(diagnostic);\n}\n}\n\nreturn results;\n}", "CodeBleu_score": 23.95844045737119}]}
{"instance_id": "9a072876f358", "generation_result": [{"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\tar options = new CodeActionRegistrationOptions() {\nDocumentSelector = new DocumentSelector(new DocumentFilter() {\nLanguage = LanguageNames.Yarn,\nPattern = \"**/*.yarn\"\n}),\nCodeActionKinds = new Container<CodeActionKind>(new[] {\nCodeActionKind.QuickFix\n})\n};\n\nreturn options;\n}", "CodeBleu_score": 32.049666568373915}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\teturn new CodeActionRegistrationOptions()\n{\nDocumentSelector = new DocumentSelector(new List<DocumentFilter>()\n{\nnew DocumentFilter()\n{\nLanguage = \"yarn\",\nPattern = \"**/*.yarn\"\n}\n}),\nCodeActionKinds = new Container<CodeActionKind>(new List<CodeActionKind>()\n{\nCodeActionKind.QuickFix\n})\n};\n}", "CodeBleu_score": 41.16981617434297}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\tvar codeActionOptions = new CodeActionOptions();\n\tvar codeActionKindOptions = new CodeActionKindOptions();\n\tcodeActionKindOptions.ValueSet.Add(CodeActionKind.QuickFix);\n\tcodeActionOptions.CodeActionKinds = codeActionKindOptions;\n\tvar documentSelector = new DocumentSelector();\n\tdocumentSelector.Add(new DocumentFilter() {\n\t\tLanguage = \"yarn\",\n\t\tScheme = \"file\",\n\t});\n\tvar registrationOptions = new CodeActionRegistrationOptions();\n\tregistrationOptions.DocumentSelector = documentSelector;\n\tregistrationOptions.CodeActionOptions = codeActionOptions;\n\treturn registrationOptions;\n}", "CodeBleu_score": 25.668135530447223}]}
{"instance_id": "7b61df32aee3", "generation_result": [{"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t", "CodeBleu_score": 6.712467208693234}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t\tif (variables.TryGetValue(variableName, out object value)) {\n\t\tif (value is T) {\n\t\t\tresult = (T)value;\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthrow new ArgumentException($\"Variable {variableName} is not of type {typeof(T).Name}.\");\n\t\t}\n\t} else {\n\t\tresult = default;\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 54.32133248821233}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\tresult = default;\nif (variables.TryGetValue(variableName, out var value)) {\nif (value is T t) {\nresult = t;\nreturn true;\n} else {\nthrow new ArgumentException($\"The variable {variableName} is of type {value.GetType().Name}, which is not compatible with {typeof(T).Name}\");\n}\n}\nreturn false;\n}", "CodeBleu_score": 48.11142172195295}]}
{"instance_id": "7201488347ef", "generation_result": [{"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t", "CodeBleu_score": 2.543243612731241}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t\nVariableStorage = variableStorage;\n\nLibrary = new Library();\n\nvm = new VirtualMachine(Library);\n\nLibrary.Import(new StandardLibrary());\n\nLibrary.RegisterFunction(\"nodeVisited\", new Library.Function(NodeVisited));\nLibrary.RegisterFunction(\"nodeNotVisited\", new Library.Function(NodeNotVisited));\nLibrary.RegisterFunction(\"nodeVisitedCount\", new Library.Function(NodeVisitedCount));\nLibrary.RegisterFunction(\"nodeNotVisitedCount\", new Library.Function(NodeNotVisitedCount));\n\nLineParser = new LineParser();\nLineParser.RegisterMarkerProcessor(new SelectMarkerProcessor());\nLineParser.RegisterMarkerProcessor(new PluralMarkerProcessor());\nLineParser.RegisterMarkerProcessor(new OrdinalMarkerProcessor());\n\n}", "CodeBleu_score": 36.46700270502262}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t", "CodeBleu_score": 2.543243612731241}]}
{"instance_id": "59b7b5a9c34a", "generation_result": [{"code": "public int FindUniqueID(string UniqueID){\n\t\tif (UniqueID == null || UniqueID.Length == 0) {\n\t\treturn -1;\n\t}\n\n\tfor (int i = 0; i < m_LoopListBankDataList.Count; ++i) {\n\t\tif (m_LoopListBankDataList[i].UniqueID == UniqueID) {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\treturn -1;\n}", "CodeBleu_score": 77.8144304115653}, {"code": "public int FindUniqueID(string UniqueID){\n\tif (string.IsNullOrEmpty(UniqueID)) {\nreturn -1;\n}\nfor (int i = 0; i < m_LoopListBankDataList.Count; ++i) {\nif (m_LoopListBankDataList[i].UniqueID == UniqueID) {\nreturn i;\n}\n}\nreturn -1;\n}", "CodeBleu_score": 87.34893803914657}, {"code": "public int FindUniqueID(string UniqueID){\n\t\tif (string.IsNullOrEmpty(UniqueID)) {\n\t\treturn -1;\n\t}\n\tfor (int i = 0; i < m_LoopListBankDataList.Count; ++i) {\n\t\tif (m_LoopListBankDataList[i].UniqueID == UniqueID) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}", "CodeBleu_score": 87.70511946502874}]}
{"instance_id": "2b85606238aa", "generation_result": [{"code": "public void AddContent(object newContent){\n\t\tLoopListBankData TempCustomData = new LoopListBankData();\n\tTempCustomData.Content = newContent;\n\tTempCustomData.UniqueID = System.Guid.NewGuid().ToString();\n\tm_LoopListBankDataList.Add(TempCustomData);\n}", "CodeBleu_score": 86.63570189947525}, {"code": "public void AddContent(object newContent){\n\tLoopListBankData TempCustomData = new LoopListBankData();\nTempCustomData.Content = newContent;\nTempCustomData.UniqueID = System.Guid.NewGuid().ToString();\nm_LoopListBankDataList.Add(TempCustomData);\n}", "CodeBleu_score": 86.60913298611337}, {"code": "public void AddContent(object newContent){\n\t\nLoopListBankData TempCustomData = new LoopListBankData();\nTempCustomData.Content = newContent;\nTempCustomData.UniqueID = System.Guid.NewGuid().ToString();\nm_LoopListBankDataList.Add(TempCustomData);\n\n}", "CodeBleu_score": 86.60097764915304}]}
{"instance_id": "34e593106991", "generation_result": [{"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t\n}", "CodeBleu_score": 10.443922501031333}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t\tm_IndexID = idx;\n\tm_Content = content;\n\tif (m_IsUpdateGameObjectName) {\n\t\tstring name = m_PrefabName + idx.ToString();\n\t\tgameObject.name = name;\n\t}\n\tif (ClickUniqueID!= \"\") {\n\t\tm_Button.onClick.RemoveAllListeners();\n\t\tm_Button.onClick.AddListener(() => {\n\t\t\tif (ClickObject!= null) {\n\t\t\t\tClickObject.SendMessage(\"OnButtonClickCallBack\", ClickUniqueID);\n\t\t\t} else {\n\t\t\t\tOnButtonClickCallBack(ClickUniqueID);\n\t\t\t}\n\t\t});\n\t}\n}", "CodeBleu_score": 49.48247939577506}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t", "CodeBleu_score": 10.244596408321145}]}
{"instance_id": "6b6a6cc329cc", "generation_result": [{"code": "private void OnButtonAddDataClickk(){\n\tint newCount = 0;\nif (int.TryParse(m_InputFieldAddCount.text, out newCount)) {\nif (newCount > 0) {\nfor (int i = 0; i < newCount; i++) {\nm_ListBank.Add(Random.Range(0, 10));\n}\nm_ListBank.UpdateTotalCount();\nm_ListBank.RefreshCells();\n}\n}\n}", "CodeBleu_score": 32.785768034343455}, {"code": "private void OnButtonAddDataClickk(){\n\t\nint count = 0;\nif (int.TryParse(m_InputFieldAddCount.text, out count)) {\nif (count <= 0) {\ncount = 1;\n}\n}\n\nm_ListBank.AddData(count);\nm_ScrollRect.totalCount = m_ListBank.Count;\nm_ScrollRect.RefreshCells();\n}", "CodeBleu_score": 25.152314915206375}, {"code": "private void OnButtonAddDataClickk(){\n\t\tint count = 0;\n\tif (int.TryParse(m_InputFieldAddData.text, out count)) {\n\t\tif (count > 0) {\n\t\t\tfor (int i = 0; i < count; i++) {\n\t\t\t\tm_ListBank.Add(Random.Range(0, 10));\n\t\t\t}\n\t\t\tm_ScrollRect.totalCount = m_ListBank.Count;\n\t\t\tm_ScrollRect.RefreshCells();\n\t\t}\n\t}\n}", "CodeBleu_score": 36.63879707397347}]}
{"instance_id": "209961c9eb8e", "generation_result": [{"code": "protected override void ClearTempPool(){\n\t\tint childCount = m_Content.childCount;\n\tif (childCount > 0) {\n\t\tif (deletedItemTypeStart > 0) {\n\t\t\tfor (int i = 0; i < deletedItemTypeStart; i++) {\n\t\t\t\tRectTransform nextItem = m_Content.GetChild(0) as RectTransform;\n\t\t\t\tnextItem.SetParent(prefabSource.transform, false);\n\t\t\t\tprefabSource.ReturnObject(nextItem);\n\t\t\t}\n\t\t\tdeletedItemTypeStart = 0;\n\t\t}\n\t\tif (deletedItemTypeEnd > 0) {\n\t\t\tfor (int i = 0; i < deletedItemTypeEnd; i++) {\n\t\t\t\tRectTransform nextItem = m_Content.GetChild(m_Content.childCount - 1) as RectTransform;\n\t\t\t\tnextItem.SetParent(prefabSource.transform, false);\n\t\t\t\tprefabSource.ReturnObject(nextItem);\n\t\t\t}\n\t\t\tdeletedItemTypeEnd = 0;\n\t\t}\n\t}\n}", "CodeBleu_score": 56.257773721543856}, {"code": "protected override void ClearTempPool(){\n\t", "CodeBleu_score": 1.2169225583577994}, {"code": "protected override void ClearTempPool(){\n\t\tif (deletedItemTypeStart > 0) {\n\t\tdeletedItemTypeStart = 0;\n\t}\n\tif (deletedItemTypeEnd > 0) {\n\t\tdeletedItemTypeEnd = 0;\n\t}\n}", "CodeBleu_score": 12.218912852541925}]}
{"instance_id": "c6bb290de2b3", "generation_result": [{"code": "public void AnticipateScale(Vector3 newScale){\n\tif (NetworkManager.ShutdownInProgress ||!NetworkManager.IsListening) {\nreturn;\n}\ntransform.localScale = newScale;\nm_AnticipatedTransform.Scale = newScale;\nif (CanCommitToTransform) {\nm_AuthoritativeTransform.Scale = newScale;\n}\n\nm_PreviousAnticipatedTransform = m_AnticipatedTransform;\n\nm_LastAnticipaionCounter = NetworkManager.AnticipationSystem.AnticipationCounter;\nm_LastAnticipationTime = NetworkManager.LocalTime.Time;\n\nm_SmoothDuration = 0;\nm_CurrentSmoothTime = 0;\n}", "CodeBleu_score": 74.28561478402996}, {"code": "public void AnticipateScale(Vector3 newScale){\n\tif (NetworkManager.ShutdownInProgress ||!NetworkManager.IsListening) {\nreturn;\n}\ntransform.localScale = newScale;\nm_AnticipatedTransform.Scale = newScale;\nif (CanCommitToTransform) {\nm_AuthoritativeTransform.Scale = newScale;\n}\n\nm_PreviousAnticipatedTransform = m_AnticipatedTransform;\n\nm_LastAnticipaionCounter = NetworkManager.AnticipationSystem.AnticipationCounter;\nm_LastAnticipationTime = NetworkManager.LocalTime.Time;\n\nm_SmoothDuration = 0;\nm_CurrentSmoothTime = 0;\n}", "CodeBleu_score": 74.28561478402996}, {"code": "public void AnticipateScale(Vector3 newScale){\n\tif (NetworkManager.ShutdownInProgress ||!NetworkManager.IsListening) {\nreturn;\n}\ntransform.localScale = newScale;\nm_AnticipatedTransform.Scale = newScale;\nif (CanCommitToTransform) {\nm_AuthoritativeTransform.Scale = newScale;\n}\n\nm_PreviousAnticipatedTransform = m_AnticipatedTransform;\n\nm_LastAnticipaionCounter = NetworkManager.AnticipationSystem.AnticipationCounter;\nm_LastAnticipationTime = NetworkManager.LocalTime.Time;\n\nm_SmoothDuration = 0;\nm_CurrentSmoothTime = 0;\n}", "CodeBleu_score": 74.28561478402996}]}
{"instance_id": "d67d3c80dd00", "generation_result": [{"code": "private void FlushMessages(){\n\t", "CodeBleu_score": 0.843141799522195}, {"code": "private void FlushMessages(){\n\t#if COM_UNITY_MODULES_ANIMATION\n#if UNITY_EDITOR\nif (m_NetworkAnimator.Animator == null)\n{\nreturn;\n}\n#endif\n\nif (m_NetworkAnimator.Animator.isHuman)\n{\nreturn;\n}\n\nif (m_IsServer)\n{\nfor (int i = 0; i < m_NetworkAnimator.m_AnimationUpdateQueue.Count; i++)\n{\nm_NetworkAnimator.SendAnimationMessage(m_NetworkAnimator.m_AnimationUpdateQueue[i]);\n}\n\nfor (int i = 0; i < m_NetworkAnimator.m_ParameterUpdateQueue.Count; i++)\n{\nm_NetworkAnimator.SendParameterMessage(m_NetworkAnimator.m_ParameterUpdateQueue[i]);\n}\n\nfor (int i = 0; i < m_NetworkAnimator.m_TriggerUpdateQueue.Count; i++)\n{\nm_NetworkAnimator.SendTriggerMessage(m_NetworkAnimator.m_TriggerUpdateQueue[i]);\n}\n}\nelse\n{\nfor (int i = 0; i < m_NetworkAnimator.m_AnimationUpdateQueue.Count; i++)\n{\nm_NetworkAnimator.SendAnimationMessageToServer(m_NetworkAnimator.m_AnimationUpdateQueue[i]);\n}\n\nfor (int i = 0; i < m_NetworkAnimator.m_ParameterUpdateQueue.Count; i++)\n{\nm_NetworkAnimator.SendParameterMessageToServer(m_NetworkAnimator.m_ParameterUpdateQueue[i]);\n}\n\nfor (int i = 0; i < m_NetworkAnimator.m_TriggerUpdateQueue.Count; i++)\n{\nm_NetworkAnimator.SendTriggerMessageToServer(m_NetworkAnimator.m_TriggerUpdateQueue[i]);\n}\n}\n\nm_NetworkAnimator.m_AnimationUpdateQueue.Clear();\nm_NetworkAnimator.m_ParameterUpdateQueue.Clear();\nm_NetworkAnimator.m_TriggerUpdateQueue.Clear();\n#endif\n}", "CodeBleu_score": 35.754508127670995}, {"code": "private void FlushMessages(){\n\t", "CodeBleu_score": 0.843141799522195}]}
{"instance_id": "0632b2f27d22", "generation_result": [{"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t\nif (updateStage == NetworkUpdateStage.PreUpdate) {\n\nif (m_NetworkAnimator.IsOwner || m_IsServer) {\n\nFlushMessages();\n\n}\n\nif (m_NetworkAnimator.IsOwner) {\n\nProcessParameterUpdates();\n\n}\n\nif (m_NetworkAnimator.IsOwner || m_IsServer) {\n\nProcessAnimatorChanges();\n\n}\n\n}\n\n}", "CodeBleu_score": 26.63962042686037}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t", "CodeBleu_score": 1.1834696916787755}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t\n#if COM_UNITY_MODULES_ANIMATION\n    if (m_NetworkAnimator == null)\n    {\n        return;\n    }\n\n    if (updateStage == NetworkUpdateStage.PreUpdate)\n    {\n        if (m_IsServer)\n        {\n            FlushMessages();\n        }\n\n        if (m_NetworkAnimator.IsOwner)\n        {\n            ProcessParameterUpdates();\n            ProcessAnimationUpdates();\n        }\n    }\n    else if (updateStage == NetworkUpdateStage.PostUpdate)\n    {\n        if (m_NetworkAnimator.IsOwner)\n        {\n            ProcessAnimationChanges();\n        }\n    }\n#endif\n}", "CodeBleu_score": 24.42084562809244}]}
{"instance_id": "d78874b65b32", "generation_result": [{"code": "private void UpdateOwnershipAuthority(){\n\t", "CodeBleu_score": 2.2389150259391823}, {"code": "private void UpdateOwnershipAuthority(){\n\tf (m_NetworkTransform.IsServerAuthoritative()) {\n\n// Server authority\nm_Rigidbody.isKinematic = false;\nm_Rigidbody.interpolation = m_OriginalInterpolation;\nm_IsAuthority = true;\n} else {\n\n// Owner authority\nm_Rigidbody.isKinematic = true;\nm_Rigidbody.interpolation = m_NetworkTransform.Interpolate? RigidbodyInterpolation.None : m_OriginalInterpolation;\nm_IsAuthority = false;\n}\n}", "CodeBleu_score": 30.824679938908915}, {"code": "private void UpdateOwnershipAuthority(){\n\t_IsAuthority = m_NetworkTransform.IsServerAuthoritative();\n\tm_Rigidbody.isKinematic = m_IsAuthority;\n\tm_Rigidbody.interpolation = m_IsAuthority? m_OriginalInterpolation : (m_NetworkTransform.Interpolate? RigidbodyInterpolation.None : m_OriginalInterpolation);\n}", "CodeBleu_score": 33.85999469472946}]}
{"instance_id": "304fe1278db9", "generation_result": [{"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t", "CodeBleu_score": 2.8253030377269566}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t", "CodeBleu_score": 2.8253030377269566}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t", "CodeBleu_score": 2.8253030377269566}]}
{"instance_id": "452b860a7dde", "generation_result": [{"code": "static void GenerateCLRBindingByAnalysis(){\n\t", "CodeBleu_score": 1.092067877948932}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\tvar domain = new ILRuntime.Runtime.Enviorment.AppDomain();\nvar assembly = Assembly.LoadFile(Application.dataPath + \"/../Library/ScriptAssemblies/Assembly-CSharp.dll\");\ndomain.LoadAssembly(assembly);\nInitILRuntime(domain);\nGenerateCLRBinding(domain);\nAssetDatabase.Refresh();\n}", "CodeBleu_score": 20.53795637054}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t", "CodeBleu_score": 1.092067877948932}]}
{"instance_id": "b8990031b636", "generation_result": [{"code": "public override void OnInspectorGUI(){\n\t\nif (Application.isPlaying) {\n\nif (EditorApplication.isPlaying && Selection.activeGameObject == null) {\n\nEditorGUILayout.LabelField(\\\"Config Count\\\");\nEditorGUILayout.LabelField(m_CachedBytesSize.intValue.ToString());\n\n}\n\n}\n\nbase.OnInspectorGUI();\n\nif (m_ConfigHelperInfo.Helper == null) {\n\nm_ConfigHelperInfo.Helper = Helper.GetHelper<ConfigHelperBase>();\n\n}\n\nif (m_ConfigHelperInfo.Helper == null) {\n\nEditorGUILayout.HelpBox(\\\"Can not find ConfigHelperBase.\\\", MessageType.Error);\n\n} else {\n\nm_ConfigHelperInfo.Helper.OnInspectorGUI(m_ConfigHelperInfo.HelperData, m_ConfigHelperInfo.HelperType);\n\n}\n\nserializedObject.ApplyModifiedProperties();\n\nRepaint();\n\n}", "CodeBleu_score": 44.20372765452516}, {"code": "public override void OnInspectorGUI(){\n\tif (Application.isPlaying && Selection.activeGameObject!= null && Selection.activeGameObject.scene.isLoaded) {\nEditorGUILayout.LabelField(\\\"Config Count: \\\", ConfigComponent.Instance.ConfigCount.ToString());\nEditorGUILayout.LabelField(\\\"Cached Bytes Size: \\\", ConfigComponent.Instance.CachedBytesSize.ToString());\n}\n\nbase.OnInspectorGUI();\n\nif (m_ConfigHelperInfo.Helper!= null) {\nm_ConfigHelperInfo.Helper.OnInspectorGUI();\n}\n\nserializedObject.ApplyModifiedProperties();\nRepaint();\n}", "CodeBleu_score": 44.55384805061697}, {"code": "public override void OnInspectorGUI(){\n\tif (Application.isPlaying) {\nif (target.GetType() == typeof(ConfigComponent)) {\nif (EditorApplication.isPlayingOrWillChangePlaymode &&!EditorApplication.isPlaying) {\nEditorGUILayout.HelpBox(\\\"The game is playing, and the target is a prefab in the hierarchy.\\\", MessageType.Info);\n} else {\nEditorGUILayout.HelpBox(\\\"The game is playing, and the target is not a prefab in the hierarchy.\\\", MessageType.Info);\n}\n}\n}\nbase.OnInspectorGUI();\nif (m_EnableLoadConfigUpdateEvent == null) {\nm_EnableLoadConfigUpdateEvent = serializedObject.FindProperty(\\\"m_EnableLoadConfigUpdateEvent\\\");\n}\nif (m_EnableLoadConfigDependencyAssetEvent == null) {\nm_EnableLoadConfigDependencyAssetEvent = serializedObject.FindProperty(\\\"m_EnableLoadConfigDependencyAssetEvent\\\");\n}\nif (m_CachedBytesSize == null) {\nm_CachedBytesSize = serializedObject.FindProperty(\\\"m_CachedBytesSize\\\");\n}\nEditorGUILayout.PropertyField(m_EnableLoadConfigUpdateEvent);\nEditorGUILayout.PropertyField(m_EnableLoadConfigDependencyAssetEvent);\nEditorGUILayout.PropertyField(m_CachedBytesSize);\nif (m_ConfigHelperInfo.IsShowHelper) {\nEditorGUILayout.Space();\nm_ConfigHelperInfo.HelperGUI();\n}\nserializedObject.ApplyModifiedProperties();\nRepaint();\n}", "CodeBleu_score": 49.57650304799566}]}
{"instance_id": "6453adc2daa8", "generation_result": [{"code": "public static void DefaultScenes(){\n\t defaultScenes = new HashSet<string>();\nforeach (var defaultSceneName in s_DefaultSceneNames) {\ndefaultScenes.Add(defaultSceneName);\n}\nvar editorBuildSettingsScenes = new List<EditorBuildSettingsScene>();\nforeach (var defaultSceneName in defaultScenes) {\nvar editorBuildSettingsScene = new EditorBuildSettingsScene(defaultSceneName, true);\neditorBuildSettingsScenes.Add(editorBuildSettingsScene);\n}\nEditorBuildSettings.scenes = editorBuildSettingsScenes.ToArray();\nDebug.Log(\\\"Default scenes in build settings.\\\");\n}", "CodeBleu_score": 46.482242788528985}, {"code": "public static void DefaultScenes(){\n\t (s_DefaultSceneNames == null) {\n\t\treturn;\n\t}\n\n\tHashSet<string> defaultSceneNames = new HashSet<string>(s_DefaultSceneNames);\n\tList<EditorBuildSettingsScene> editorBuildSettingsScenes = new List<EditorBuildSettingsScene>();\n\tforeach (string sceneName in defaultSceneNames) {\n\t\tEditorBuildSettingsScene editorBuildSettingsScene = new EditorBuildSettingsScene(sceneName, true);\n\t\teditorBuildSettingsScenes.Add(editorBuildSettingsScene);\n\t}\n\n\tEditorBuildSettings.scenes = editorBuildSettingsScenes.ToArray();\n\tDebug.LogFormat(\"Scenes in Build Settings have been set to default.\");\n}", "CodeBleu_score": 50.00445017754005}, {"code": "public static void DefaultScenes(){\n\tshSet<string> defaultSceneNames = new HashSet<string>();\n\nforeach (string defaultSceneName in s_DefaultSceneNames) {\ndefaultSceneNames.Add(defaultSceneName);\n}\n\nList<EditorBuildSettingsScene> buildSettingsScenes = new List<EditorBuildSettingsScene>();\n\nforeach (string defaultSceneName in defaultSceneNames) {\nbuildSettingsScenes.Add(new EditorBuildSettingsScene(defaultSceneName, true));\n}\n\nEditorBuildSettings.scenes = buildSettingsScenes.ToArray();\n\nDebug.Log(string.Format(\\\"Build settings scenes set to default. {0} scenes have been set to default.\\\", buildSettingsScenes.Count));\n}", "CodeBleu_score": 65.15831662542946}]}
{"instance_id": "e199f1a42526", "generation_result": [{"code": "public void Draw(){\n\t\n            if (m_HelperTypeNames == null) {\n\n                m_HelperTypeNames = new string[m_HelperTypeName.arraySize + 1];\n\n                for (int i = 0; i < m_HelperTypeNames.Length; i++) {\n\n                    m_HelperTypeNames[i] = m_HelperTypeName.GetArrayElementAtIndex(i).stringValue;\n\n                }\n\n            }\n\n            if (m_HelperTypeNames.Length == 0) {\n\n                EditorGUILayout.HelpBox(Utility.Text.Format(\\\"Helper type of {0} is not set.\\\", m_Name), MessageType.Error);\n\n            }\n\n            else {\n\n                m_HelperTypeNameIndex = EditorGUILayout.Popup(Utility.Text.Format(\\\"{0} Helper Type\\\", m_Name), m_HelperTypeNameIndex, m_HelperTypeNames);\n\n                if (m_HelperTypeNameIndex == m_HelperTypeNames.Length - 1) {\n\n                    EditorGUILayout.PropertyField(m_CustomHelper, new GUIContent(CustomOptionName));\n\n                }\n\n            }\n\n        }", "CodeBleu_score": 36.51007735676984}, {"code": "public void Draw(){\n\t", "CodeBleu_score": 0.774837219396175}, {"code": "public void Draw(){\n\t\n            if (m_HelperTypeName == null) {\n\n                return;\n\n            }\n\n            if (m_HelperTypeNames == null) {\n\n                m_HelperTypeNames = new string[m_HelperTypeName.arraySize + 1];\n\n                for (int i = 0; i < m_HelperTypeNames.Length; i++) {\n\n                    m_HelperTypeNames[i] = m_HelperTypeName.GetArrayElementAtIndex(i).stringValue;\n\n                }\n\n            }\n\n            m_HelperTypeNameIndex = EditorGUILayout.Popup(m_HelperTypeNameIndex, m_HelperTypeNames, EditorStyles.popup);\n\n            if (m_HelperTypeNameIndex == m_HelperTypeNames.Length - 1) {\n\n                EditorGUILayout.PropertyField(m_CustomHelper, new GUIContent(CustomOptionName));\n\n                if (m_CustomHelper.objectReferenceValue == null) {\n\n                    EditorGUILayout.HelpBox(Utility.Text.Format(\\\"{0}Helper is not set.\\\", m_Name), MessageType.Error);\n\n                }\n\n            } else {\n\n                m_HelperTypeName.GetArrayElementAtIndex(m_HelperTypeNameIndex).stringValue = m_HelperTypeNames[m_HelperTypeNameIndex];\n\n            }\n\n        }", "CodeBleu_score": 35.2317272214401}]}
{"instance_id": "957e0aaa6f72", "generation_result": [{"code": "public static void DisableAllLogs(){\n\tRemoveScriptingDefineSymbol(EnableLogScriptingDefineSymbol);\nforeach (var scriptingDefineSymbol in AboveLogScriptingDefineSymbols) {\nRemoveScriptingDefineSymbol(scriptingDefineSymbol);\n}\nforeach (var scriptingDefineSymbol in SpecifyLogScriptingDefineSymbols) {\nRemoveScriptingDefineSymbol(scriptingDefineSymbol);\n}\n}", "CodeBleu_score": 48.11673623261785}, {"code": "public static void DisableAllLogs(){\n\t\tRemoveScriptingDefineSymbol(EnableLogScriptingDefineSymbol);\n\tforeach (string symbol in AboveLogScriptingDefineSymbols) {\n\t\tRemoveScriptingDefineSymbol(symbol);\n\t}\n\tforeach (string symbol in SpecifyLogScriptingDefineSymbols) {\n\t\tRemoveScriptingDefineSymbol(symbol);\n\t}\n}", "CodeBleu_score": 45.41088302706625}, {"code": "public static void DisableAllLogs(){\n\t#if UNITY_EDITOR\n    PlayerSettings.SetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup, string.Empty);\n#endif\n}", "CodeBleu_score": 6.887221855042935}]}
{"instance_id": "8a544c3d9513", "generation_result": [{"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t", "CodeBleu_score": 3.394901911304207}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\tforeach (GameFrameworkComponent component in s_GameFrameworkComponents) {\nif (component.GetType() == type) {\nreturn component;\n}\n}\nreturn null;\n}", "CodeBleu_score": 29.053890304985195}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\tGameFrameworkComponent component = null;\n\tGameFrameworkLinkedListNode<GameFrameworkComponent> node = s_GameFrameworkComponents.First;\n\twhile (node!= null) {\n\t\tif (node.Value.GetType() == type) {\n\t\t\tcomponent = node.Value;\n\t\t\tbreak;\n\t\t}\n\t\tnode = node.Next;\n\t}\n\treturn component;\n}", "CodeBleu_score": 50.17141510805896}]}
{"instance_id": "ec304512c0e4", "generation_result": [{"code": "public static void Shutdown(ShutdownType shutdownType){\n\t", "CodeBleu_score": 1.5693307115311088}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t", "CodeBleu_score": 1.5693307115311088}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t", "CodeBleu_score": 1.5693307115311088}]}
{"instance_id": "5c78a1d4f59d", "generation_result": [{"code": "protected override void Awake(){\n\tbase.Awake();\n\nm_ConfigManager = GameFrameworkEntry.GetModule<IConfigManager>();\nif (m_ConfigManager == null) {\nLog.Fatal(\\\"Config manager is invalid.\\\");\nreturn;\n}\n\nif (m_EnableLoadConfigUpdateEvent) {\nm_EventComponent.Subscribe(LoadConfigUpdateEventArgs.EventId, OnLoadConfigUpdate);\n}\n\nif (m_EnableLoadConfigDependencyAssetEvent) {\nm_EventComponent.Subscribe(LoadConfigDependencyAssetEventArgs.EventId, OnLoadConfigDependencyAsset);\n}\n\nif (m_CustomConfigHelper == null) {\nType configHelperType = Type.GetType(m_ConfigHelperTypeName);\nif (configHelperType == null) {\nLog.Fatal(\\\"Config helper type '{0}' is invalid.\\\", m_ConfigHelperTypeName);\nreturn;\n}\n\nm_CustomConfigHelper = (ConfigHelperBase)Activator.CreateInstance(configHelperType);\nif (m_CustomConfigHelper == null) {\nLog.Fatal(\\\"Config helper type '{0}' is invalid.\\\", m_ConfigHelperTypeName);\nreturn;\n}\n}\n\nm_CustomConfigHelper.Initialize(this);\n}", "CodeBleu_score": 45.74112153516532}, {"code": "protected override void Awake(){\n\tbase.Awake();\nm_ConfigManager = GameFrameworkEntry.GetModule<IConfigManager>();\nif (m_ConfigManager == null) {\nLog.Fatal(\\\"Config manager is invalid.\\\");\nenabled = false;\nreturn;\n}\nm_EventComponent = GameFrameworkEntry.GetModule<EventComponent>();\nif (m_EventComponent == null) {\nLog.Fatal(\\\"Event component is invalid.\\\");\nenabled = false;\nreturn;\n}\nm_ConfigManager.LoadConfigSuccess += OnLoadConfigSuccess;\nm_ConfigManager.LoadConfigFailure += OnLoadConfigFailure;\nif (m_EnableLoadConfigUpdateEvent) {\nm_ConfigManager.LoadConfigUpdate += OnLoadConfigUpdate;\n}\nif (m_EnableLoadConfigDependencyAssetEvent) {\nm_ConfigManager.LoadConfigDependencyAsset += OnLoadConfigDependencyAsset;\n}\n}", "CodeBleu_score": 54.457964100125444}, {"code": "protected override void Awake(){\n\tbase.Awake();\n\n// Get the configuration manager from the game framework entry.\nm_ConfigManager = GameFrameworkEntry.GetModule<IConfigManager>();\nif (m_ConfigManager == null) {\nLog.Fatal(\\\"Config manager is invalid.\\\");\nreturn;\n}\n\n// Subscribe to events for reading data success and failure.\nm_ConfigManager.ConfigUpdate += OnConfigUpdate;\nm_ConfigManager.ConfigLoadFailure += OnConfigLoadFailure;\n\n// Subscribe to update and dependency asset events based on specific flags.\nif (m_EnableLoadConfigUpdateEvent) {\nm_ConfigManager.ConfigUpdate += OnConfigUpdate;\n}\nif (m_EnableLoadConfigDependencyAssetEvent) {\nm_ConfigManager.ConfigDependencyAsset += OnConfigDependencyAsset;\n}\n\n// Initialize the custom config helper.\nif (m_CustomConfigHelper == null) {\nm_CustomConfigHelper = (ConfigHelperBase)System.Activator.CreateInstance(System.Type.GetType(m_ConfigHelperTypeName));\n}\nm_CustomConfigHelper.Initialize(this);\n}", "CodeBleu_score": 52.33156081288691}]}
{"instance_id": "fbb36ff9d552", "generation_result": [{"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t\tif (configAsset == null) {\n\t\tLog.Warning(\\\"Config asset '{0}' is invalid.\\\", configAssetName);\n\t\treturn false;\n\t}\n\n\tif (configAsset is TextAsset) {\n\t\tTextAsset textAsset = (TextAsset)configAsset;\n\t\tif (textAsset.name.EndsWith(BytesAssetExtension)) {\n\t\t\treturn ReadData(configManager, configAssetName, textAsset.bytes, userData);\n\t\t}\n\n\t\treturn ReadData(configManager, configAssetName, Encoding.UTF8.GetBytes(textAsset.text), userData);\n\t}\n\n\tif (configAsset is byte[]) {\n\t\treturn ReadData(configManager, configAssetName, (byte[])configAsset, userData);\n\t}\n\n\tLog.Warning(\\\"Config asset '{0}' is invalid.\\\", configAssetName);\n\treturn false;\n}", "CodeBleu_score": 50.90676550113784}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\tif (configAsset == null) {\nLog.Warning(\\\"Config asset '{0}' is invalid.\\\", configAssetName);\nreturn false;\n}\n\nif (configAsset is TextAsset textAsset) {\nreturn ReadTextAsset(configManager, configAssetName, textAsset, userData);\n} else if (configAsset is byte[] bytes) {\nreturn ReadBytes(configManager, configAssetName, bytes, userData);\n} else {\nLog.Warning(\\\"Config asset '{0}' is invalid.\\\", configAssetName);\nreturn false;\n}\n}", "CodeBleu_score": 52.6888594968006}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t\tif (configAsset is TextAsset) {\n\t\tTextAsset textAsset = configAsset as TextAsset;\n\t\tif (textAsset.name.EndsWith(BytesAssetExtension)) {\n\t\t\treturn ReadBytesData(configManager, configAssetName, textAsset.bytes, userData);\n\t\t}\n\t\telse {\n\t\t\treturn ReadTextData(configManager, configAssetName, textAsset.text, userData);\n\t\t}\n\t}\n\telse if (configAsset is byte[]) {\n\t\treturn ReadBytesData(configManager, configAssetName, configAsset as byte[], userData);\n\t}\n\telse {\n\t\tLog.Warning(\\\"Invalid config asset '{0}', it should be a TextAsset or byte[].\\\", configAssetName);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 60.691331742694054}]}
{"instance_id": "84d744c480ca", "generation_result": [{"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\ty {\n\t\tusing (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length)) {\n\t\t\tusing (BinaryReader binaryReader = new BinaryReader(memoryStream)) {\n\t\t\t\tstring configName = null;\n\t\t\t\tstring configValue = null;\n\t\t\t\twhile (binaryReader.BaseStream.Position < binaryReader.BaseStream.Length) {\n\t\t\t\t\tconfigName = binaryReader.ReadString();\n\t\t\t\t\tconfigValue = binaryReader.ReadString();\n\t\t\t\t\tif (!configManager.AddConfig(configName, configValue)) {\n\t\t\t\t\t\tLog.Warning(\"Can not add config with config name '{0}' which may be invalid or duplicate.\", configName);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tcatch (Exception exception) {\n\t\tLog.Warning(\"Can not parse config bytes with exception '{0}'.\", exception);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 67.6041832743912}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\ty {\n\t\tusing (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length)) {\n\t\t\tusing (BinaryReader binaryReader = new BinaryReader(memoryStream)) {\n\t\t\t\twhile (binaryReader.BaseStream.Position < binaryReader.BaseStream.Length) {\n\t\t\t\t\tstring configName = binaryReader.ReadString();\n\t\t\t\t\tstring configValue = binaryReader.ReadString();\n\t\t\t\t\tif (!configManager.AddConfig(configName, configValue)) {\n\t\t\t\t\t\tLog.Warning(\"Can not add config with config name '{0}' which may be invalid or duplicate.\", configName);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t} catch (Exception exception) {\n\t\tLog.Warning(\"Can not parse config bytes with exception '{0}'.\", exception);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 75.47680690238488}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t {\nint position = 0;\nstring configLineString = null;\nwhile ((configLineString = Utility.Converter.GetString(configBytes, startIndex + position, length).ReadLine(ref position))!= null) {\nif (configLineString[0] == '#') {\ncontinue;\n}\n\nstring[] splitedLine = configLineString.Split(ColumnSplitSeparator, StringSplitOptions.None);\nif (splitedLine.Length!= ColumnCount) {\nLog.Warning(\"Can not parse config line string '{0}' which column count is invalid.\", configLineString);\nreturn false;\n}\n\nstring configName = splitedLine[1];\nstring configValue = splitedLine[3];\nif (!configManager.AddConfig(configName, configValue)) {\nLog.Warning(\"Can not add config with config name '{0}' which may be invalid or duplicate.\", configName);\nreturn false;\n}\n}\n\nreturn true;\n}\ncatch (Exception exception) {\nLog.Warning(\"Can not parse config bytes with exception '{0}'.\", exception);\nreturn false;\n}\n}", "CodeBleu_score": 56.229389941716654}]}
{"instance_id": "298bb6fa19a4", "generation_result": [{"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\txtAsset configTextAsset = configAsset as TextAsset;\n\tif (configTextAsset!= null) {\n\t\tif (configAssetName.EndsWith(BytesAssetExtension, StringComparison.Ordinal)) {\n\t\t\tm_ResourceComponent.UnloadAsset(configTextAsset.bytes);\n\t\t} else {\n\t\t\tm_ResourceComponent.UnloadAsset(configTextAsset.text);\n\t\t}\n\t}\n}", "CodeBleu_score": 31.78667505697945}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\txtAsset configTextAsset = configAsset as TextAsset;\n\tif (configTextAsset!= null) {\n\t\tif (configAssetName.EndsWith(BytesAssetExtension, StringComparison.Ordinal)) {\n\t\t\tm_ResourceComponent.UnloadAsset(configTextAsset.bytes);\n\t\t} else {\n\t\t\tm_ResourceComponent.UnloadAsset(configTextAsset.text);\n\t\t}\n\t}\n}", "CodeBleu_score": 31.78667505697945}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t (m_ResourceComponent == null) {\n\t\tm_ResourceComponent = GameEntry.GetComponent<ResourceComponent>();\n\t}\n\tm_ResourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 50.119481036838174}]}
{"instance_id": "fa2003d95e36", "generation_result": [{"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t\tActiveSceneChangedEventArgs activeSceneChangedEventArgs = ReferencePool.Acquire<ActiveSceneChangedEventArgs>();\n\tactiveSceneChangedEventArgs.LastActiveScene = lastActiveScene;\n\tactiveSceneChangedEventArgs.ActiveScene = activeScene;\n\treturn activeSceneChangedEventArgs;\n}", "CodeBleu_score": 81.39767247683956}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t ActiveSceneChangedEventArgs activeSceneChangedEventArgs = ReferencePool.Acquire<ActiveSceneChangedEventArgs>();\n activeSceneChangedEventArgs.LastActiveScene = lastActiveScene;\n activeSceneChangedEventArgs.ActiveScene = activeScene;\n return activeSceneChangedEventArgs;\n }", "CodeBleu_score": 81.92971101685804}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\tActiveSceneChangedEventArgs activeSceneChangedEventArgs = ReferencePool.Acquire<ActiveSceneChangedEventArgs>();\nactiveSceneChangedEventArgs.LastActiveScene = lastActiveScene;\nactiveSceneChangedEventArgs.ActiveScene = activeScene;\nreturn activeSceneChangedEventArgs;\n}", "CodeBleu_score": 81.38333973878372}]}
{"instance_id": "aba13f34251c", "generation_result": [{"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\tif (string.IsNullOrEmpty(sceneAssetName)) {\nLog.Error(\"Scene asset name is invalid.\");\nreturn;\n}\n\nif (!sceneAssetName.StartsWith(\"Assets/\", StringComparison.Ordinal) ||!sceneAssetName.EndsWith(\".unity\", StringComparison.Ordinal)) {\nLog.Error(\"Scene asset name '{0}' is invalid.\", sceneAssetName);\nreturn;\n}\n\nm_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 91.00467600943793}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t\tif (string.IsNullOrEmpty(sceneAssetName)) {\n\t\tLog.Error(\"Scene asset name is invalid.\");\n\t\treturn;\n\t}\n\n\tif (!sceneAssetName.StartsWith(\"Assets/\", StringComparison.Ordinal) ||!sceneAssetName.EndsWith(\".unity\", StringComparison.Ordinal)) {\n\t\tLog.Error(\"Scene asset name '{0}' is invalid.\", sceneAssetName);\n\t\treturn;\n\t}\n\n\tm_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 91.10200990674686}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\tif (string.IsNullOrEmpty(sceneAssetName)) {\nLog.Error(\"Scene asset name is invalid.\");\nreturn;\n}\n\nif (!sceneAssetName.StartsWith(\"Assets/\", StringComparison.Ordinal) ||!sceneAssetName.EndsWith(\".unity\", StringComparison.Ordinal)) {\nLog.Error(\"Scene asset name '{0}' is invalid.\", sceneAssetName);\nreturn;\n}\n\nm_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 91.00467600943793}]}
{"instance_id": "3fe99fba3ce8", "generation_result": [{"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t", "CodeBleu_score": 2.5123187502257656}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\tIModularFeatures::Get().RegisterModularFeature(BINARIES_DIFF_PATCH_FEATURE_NAME, this);\n\tFCoreDelegates::OnModularFeatureRegistered.AddStatic(&OnBinariesModularFeatureRegistered);\n\tFCoreDelegates::OnModularFeatureUnregistered.AddStatic(&OnBinariesModularFeatureUnRegistered);\n}", "CodeBleu_score": 17.000725229527124}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\t// This code will execute after your module is loaded into memory; the exact timing is specified in the.uplugin file per-module\n\tIModularFeatures::Get().RegisterModularFeature(BINARIES_DIFF_PATCH_FEATURE_NAME, BinariesDiffPatchFeature.Get());\n\tIModularFeatures::Get().OnModularFeatureRegistered().AddStatic(&OnBinariesModularFeatureRegistered);\n\tIModularFeatures::Get().OnModularFeatureUnregistered().AddStatic(&OnBinariesModularFeatureUnRegistered);\n}", "CodeBleu_score": 33.22693808399397}]}
{"instance_id": "c702cc0f74b5", "generation_result": [{"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\t// Parse the command line into a map of key-value pairs\n\tTMap<FString, FString> CommandlineMap;\n\tTArray<FString> CommandlineArray;\n\tCommandline.ParseIntoArray(CommandlineArray, TEXT(\\\" \\\"), true);\n\tfor (const FString& CommandlinePair : CommandlineArray) {\n\t\t// Split the key-value pair by the '=' character\n\t\tTArray<FString> KeyValue;\n\t\tCommandlinePair.ParseIntoArray(KeyValue, TEXT(\\\"=\\\"));\n\t\tif (KeyValue.Num() == 2) {\n\t\t\t// Add the key-value pair to the map\n\t\t\tCommandlineMap.Add(KeyValue[0], KeyValue[1]);\n\t\t}\n\t}\n\t// Check for the presence of the specified token\n\tif (CommandlineMap.Contains(Token)) {\n\t\t// Split the associated value by commas into an array\n\t\tTArray<FString> ValueArray;\n\t\tCommandlineMap[Token].ParseIntoArray(ValueArray, TEXT(\\\",\\\"));\n\t\treturn ValueArray;\n\t}\n\telse {\n\t\t// Return an empty array if the token is not found\n\t\treturn TArray<FString>();\n\t}\n}", "CodeBleu_score": 47.812401436970546}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> Result;\n\tTMap<FString, FString> Map;\n\tFString Temp;\n\tFString::ParseIntoArray(Commandline, Map, TEXT(\\\" \\\"));\n\tif (Map.Contains(Token)) {\n\t\tTemp = Map[Token];\n\t\tFString::ParseIntoArray(Temp, Result, TEXT(\\\",\\\"));\n\t}\n\treturn Result;\n}", "CodeBleu_score": 52.582657752160024}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTMap<FString, FString> CommandlineMap;\n\tTArray<FString> Tokens;\n\tTArray<FString> Values;\n\n\t// Parse the command line into a map of key-value pairs\n\tCommandline.ParseIntoArray(Tokens, TEXT(\\\" \\\"), true);\n\tfor (int32 i = 0; i < Tokens.Num(); ++i) {\n\t\tif (Tokens[i].Contains(TEXT(\\\"=\\\"))) {\n\t\t\tTokens[i].Split(TEXT(\\\"=\\\"), &CommandlineMap.FindOrAdd(Tokens[i].LeftChop(1)), &CommandlineMap.FindOrAdd(Tokens[i].RightChop(1)));\n\t\t}\n\t\telse {\n\t\t\tCommandlineMap.FindOrAdd(Tokens[i]) = TEXT(\\\"\\\");\n\t\t}\n\t}\n\n\t// Check for the presence of the specified token\n\tif (CommandlineMap.Contains(Token)) {\n\t\t// Split the associated value by commas into an array\n\t\tCommandlineMap[Token].ParseIntoArray(Values, TEXT(\\\",\\\")), true);\n\t}\n\n\treturn Values;\n}", "CodeBleu_score": 47.73550473193602}]}
{"instance_id": "6a6382275b1d", "generation_result": [{"code": "bool CommandletHelper::IsCookCommandlet(){\n\ting CommandletName;\n\tif (FParse::Value(FCommandLine::Get(), TEXT(\"commandlet=\"), CommandletName) &&!CommandletName.IsEmpty()) {\n\t\treturn CommandletName.Equals(TEXT(\"cook\"), ESearchCase::CaseInsensitive);\n\t}\n\treturn false;\n}", "CodeBleu_score": 31.323576037848955}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\ting CommandletName;\n\tif (FParse::Value(FCommandLine::Get(), TEXT(\"Commandlet\"), CommandletName)) {\n\t\treturn CommandletName.Equals(TEXT(\"cook\"), ESearchCase::CaseSensitive);\n\t}\n\treturn false;\n}", "CodeBleu_score": 28.065041674697934}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\ting CommandletName;\n\tif (GIsRunning && FParse::Command(&CommandletName, TEXT(\"Cook\"))) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 13.88780895809824}]}
{"instance_id": "6888ed47b6be", "generation_result": [{"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t", "CodeBleu_score": 3.891263254644365}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\tFString CmdletName;\n\tif (Params.Split(TEXT(\\\" \\\"), &CmdletName, nullptr, ESearchCase::CaseSensitive, ESearchDir::FromEnd)) {\n\t\tif (FHotPatcherCore::Get()->IsEnableServerlessCounting()) {\n\t\t\tFString ProjectName = FPackageName::GetLongPackageAssetName(FApp::GetProjectName());\n\t\t\tif (!FPackageName::IsShortPackageName(ProjectName)) {\n\t\t\t\tProjectName = ProjectName.Replace(TEXT(\\\".\\\"\"), TEXT(\\\"_\\\")) + TEXT(\\\"_\\\" + CmdletName);\n\t\t\t}\n\t\t\tFHotPatcherCore::Get()->InitializeCounter(ProjectName);\n\t\t}\n\t}\n}", "CodeBleu_score": 27.32799440107845}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t", "CodeBleu_score": 3.891263254644365}]}
{"instance_id": "c467af995f29", "generation_result": [{"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tif (TargetPlatform == nullptr) {\n\t\treturn false;\n\t}\n\tFString PlatformName = TargetPlatform->PlatformName();\n\treturn PlatformName.StartsWith(TEXT(\"IOS\")) || PlatformName.StartsWith(TEXT(\"Mac\")) || PlatformName.StartsWith(TEXT(\"TVOS\"));\n}", "CodeBleu_score": 32.03197804499247}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tFString PlatformName = TargetPlatform->PlatformName();\n\treturn PlatformName.StartsWith(TEXT(\\\"IOS\\\")) || PlatformName.StartsWith(TEXT(\\\"Mac\\\")) || PlatformName.StartsWith(TEXT(\\\"TVOS\\\"));\n}", "CodeBleu_score": 18.62741728287437}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tconst FString PlatformName = TargetPlatform->PlatformName();\n\treturn PlatformName.StartsWith(TEXT(\\\"IOS\\\")) || PlatformName.StartsWith(TEXT(\\\"Mac\\\")) || PlatformName.StartsWith(TEXT(\\\"TVOS\\\"));\n}", "CodeBleu_score": 19.541468313867597}]}
{"instance_id": "3df342b1c6f8", "generation_result": [{"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\tif (Object == nullptr) {\n\t\treturn;\n\t}\n\n\t// Retrieve the outermost package of the object\n\tUPackage* Package = Object->GetOutermost();\n\tif (Package == nullptr) {\n\t\treturn;\n\t}\n\n\t// Check if the package is in the CookerAssetsSet\n\tif (CookerAssetsSet.Contains(Package)) {\n\t\treturn;\n\t}\n\n\t// Check if the package is in the AllAssetsSet and does not always require post-load processing\n\tif (AllAssetsSet.Contains(Package) &&!AlwaysPostLoadClasses.Contains(Package)) {\n\t\t// Add the object to the PackageObjectsMap\n\t\tPackageObjectsMap.Add(Package, TArray<UObject*>());\n\n\t\t// Add the object to the FreezeObjects list\n\t\tFreezeObjects.Add(Object);\n\n\t\t// Clear the RF_NeedPostLoad and RF_NeedPostLoadSubobjects flags from the object\n\t\tObject->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n\t}\n}", "CodeBleu_score": 37.72136667513095}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\tif (Object->HasAnyFlags(RF_NeedPostLoad)) {\n\t\tif (Object->HasAnyFlags(RF_NeedPostLoadSubobjects)) {\n\t\t\t// We only care about the root object here.\n\t\t\treturn;\n\t\t}\n\n\t\t// We only care about the root object here.\n\t\treturn;\n\t}\n\n\t// We only care about the root object here.\n\treturn;\n}", "CodeBleu_score": 13.432124635204252}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t", "CodeBleu_score": 2.897072745291081}]}
{"instance_id": "fac8b2878c3c", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\tfor (FPackageWriterRecords::FBulkData& BulkData : Record.BulkData)\n\t{\n\t\tif (BulkData.Type == EBulkDataType::Exports)\n\t\t{\n\t\t\tContext.ExportsBuffers[BulkData.Info.MultiOutputIndex].Add(FExportBuffer{ BulkData.Buffer, MoveTemp(BulkData.Regions) });\n\t\t}\n\t\telse\n\t\t{\n\t\t\tFHotPatcherOutputFiles::FOutputFile& OutputFile = Context.OutputFiles.AddDefaulted_GetRef(BulkData.Info.MultiOutputIndex);\n\t\t\tOutputFile.Filename = BulkData.Info.Filename;\n\t\t\tOutputFile.Buffer = BulkData.Buffer;\n\t\t\tOutputFile.Regions = MoveTemp(BulkData.Regions);\n\t\t\tOutputFile.Flags |= BulkData.Info.Flags;\n\t\t\tOutputFile.HashContribution = BulkData.Info.HashContribution;\n\t\t}\n\t}\n}", "CodeBleu_score": 57.8517086932621}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\tfor (FPackageWriterRecords::FWriteBulkData& BulkData : Record.BulkData)\n\t{\n\t\tif (BulkData.Type == EBulkDataType::Exports)\n\t\t{\n\t\t\tContext.ExportsBuffers[BulkData.Info.MultiOutputIndex].Add(FExportBuffer{ BulkData.Buffer, MoveTemp(BulkData.Regions) });\n\t\t}\n\t\telse\n\t\t{\n\t\t\tFString Filename = BulkData.Info.Filename;\n\t\t\tif (BulkData.Info.IsSidecar)\n\t\t\t{\n\t\t\t\tFilename += TEXT(\".uasset\");\n\t\t\t}\n\t\t\tContext.OutputFiles.Add(FPackageWriterOutputFiles::FOutputFile{\n\t\t\t\tFilename,\n\t\t\t\tMoveTemp(BulkData.Buffer),\n\t\t\t\tMoveTemp(BulkData.Regions),\n\t\t\t\tBulkData.Info.IsSidecar? EOutputFileFlags::Sidecar : EOutputFileFlags::None,\n\t\t\t\tBulkData.Info.HashContribution\n\t\t\t});\n\t\t}\n\t}\n}", "CodeBleu_score": 51.62570914493811}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\tfor (FPackageWriterRecords::FWriteBulkData& BulkData : Record.BulkData)\n\t{\n\t\tif (BulkData.Type == EBulkDataType::Exports)\n\t\t{\n\t\t\tContext.ExportsBuffers[BulkData.Info.MultiOutputIndex].Add(FExportBuffer{ BulkData.Buffer, MoveTemp(BulkData.Regions) });\n\t\t}\n\t\telse\n\t\t{\n\t\t\tFString Filename;\n\t\t\tif (BulkData.Info.PackagePath.IsEmpty())\n\t\t\t{\n\t\t\t\tFilename = BulkData.Info.Filename;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tFilename = BulkData.Info.PackagePath / BulkData.Info.Filename;\n\t\t\t}\n\t\t\tFString OutputFilename = Context.OutputFiles.Add(Filename);\n\t\t\tFFileEntry& FileEntry = Context.OutputFiles[OutputFilename];\n\t\t\tFileEntry.Buffer = MoveTemp(BulkData.Buffer);\n\t\t\tFileEntry.Regions = MoveTemp(BulkData.Regions);\n\t\t\tFileEntry.Flags = BulkData.Info.Flags;\n\t\t\tFileEntry.bHasHashContribution = BulkData.Info.bHasHashContribution;\n\t\t\tFileEntry.bIsSidecar = BulkData.Info.bIsSidecar;\n\t\t}\n\t}\n}", "CodeBleu_score": 55.85350639149489}]}
{"instance_id": "bf46051105c9", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\tif (Record.bCompletedExportsArchiveForDiff) {\n\t\t// Already Added in CompleteExportsArchiveForDiff\n\t\treturn;\n\t}\n\t// Create a footer buffer with the package file tag\n\tFPackageFileTag FooterTag;\n\tFooterTag.PackageFileTag = Record.PackageFileTag;\n\tFMemoryWriter Ar(FooterTag, /*bIsPersistent=*/ true);\n\tFExportBuffer FooterBuffer = { Ar.GetBuffer(), { Ar.GetBuffer().GetData(), Ar.GetBuffer().Num() } };\n\t// Add the footer buffer to each package's export buffers in the context\n\tfor (FPackageWriterRecords::FWritePackage& Package : Record.Packages) {\n\t\tContext.ExportsBuffers[Package.Info.MultiOutputIndex].Add(FooterBuffer);\n\t}\n}", "CodeBleu_score": 59.378771012764595}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\tif (Record.bCompletedExportsArchiveForDiff) {\n\t\t// Already Added in CompleteExportsArchiveForDiff\n\t\treturn;\n\t}\n\tfor (FPackageWriterRecords::FWritePackage& Package : Record.Packages) {\n\t\tif (Package.Info.PackageFileTag.IsValid()) {\n\t\t\tPackage.Buffer.Add(Package.Info.PackageFileTag.GetTagBuffer());\n\t\t}\n\t}\n}", "CodeBleu_score": 40.91256612813266}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\tif (Record.bCompletedExportsArchiveForDiff) {\n\t\t// Already Added in CompleteExportsArchiveForDiff\n\t\treturn;\n\t}\n\n\tFPackageInfo& Info = Record.Packages[0].Info;\n\tif (Info.bIsCooked) {\n\t\t// Cooked packages don't have a footer.\n\t\treturn;\n\t}\n\n\tFWriteFileData& OutputFile = Context.OutputFiles.Emplace_GetRef();\n\tOutputFile.Filename = Info.ExportArchiveName;\n\tOutputFile.Buffer = FCompositeBuffer(Record.ExportsArchiveFooterBuffer);\n\tOutputFile.bIsSidecar = true;\n\tOutputFile.bContributeToHash = Info.MultiOutputIndex == 0; // Only calculate the main package output hash\n}", "CodeBleu_score": 45.688063448191585}]}
{"instance_id": "c0966eddf1ee", "generation_result": [{"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\tr::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n\tUGDCharacterMovementComponent* GDCharacterMovementComponent = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\tif (GDCharacterMovementComponent) {\n\t\tSavedRequestToStartSprinting = GDCharacterMovementComponent->RequestToStartSprinting;\n\t\tSavedRequestToStartADS = GDCharacterMovementComponent->RequestToStartADS;\n\t}\n}", "CodeBleu_score": 77.38949399211434}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\tr::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n\tUGDCharacterMovementComponent* GDCharacterMovementComponent = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\tif (GDCharacterMovementComponent) {\n\t\tSavedRequestToStartSprinting = GDCharacterMovementComponent->RequestToStartSprinting;\n\t\tSavedRequestToStartADS = GDCharacterMovementComponent->RequestToStartADS;\n\t}\n}", "CodeBleu_score": 77.38949399211434}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\tr::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n\t//Cast the character's movement component to UGDCharacterMovementComponent.\n\tUGDCharacterMovementComponent* GDCharacterMovementComponent = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\n\t//If the cast was successful, save the character's sprinting and aiming down sights (ADS) requests into the move.\n\tif (GDCharacterMovementComponent) {\n\t\tSavedRequestToStartSprinting = GDCharacterMovementComponent->RequestToStartSprinting;\n\t\tSavedRequestToStartADS = GDCharacterMovementComponent->RequestToStartADS;\n\t}\n}", "CodeBleu_score": 77.38949399211434}]}
{"instance_id": "f73106356e9d", "generation_result": [{"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\tif (!AbilitySystemComponent ||!AbilitySystemComponent->AbilitySystem) {\n\t\treturn nullptr;\n\t}\n\n\tUAsyncTaskAttributeChanged* Task = NewObject<UAsyncTaskAttributeChanged>();\n\tTask->AbilitySystemComponent = AbilitySystemComponent;\n\tTask->Attribute = Attribute;\n\tTask->OnAttributeChangedDelegate.BindUObject(this, &UAsyncTaskAttributeChanged::OnAttributeChanged);\n\n\tTask->RegisterWithRoot();\n\n\treturn Task;\n}", "CodeBleu_score": 51.73921594884946}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\tif (AbilitySystemComponent == nullptr) {\n\t\treturn nullptr;\n\t}\n\tif (!Attribute.IsValid()) {\n\t\treturn nullptr;\n\t}\n\tUAsyncTaskAttributeChanged* NewTask = NewObject<UAsyncTaskAttributeChanged>();\n\tNewTask->AttributeSystem = AbilitySystemComponent;\n\tNewTask->Attribute = Attribute;\n\tNewTask->ListenForAttributeChangeDelegate.BindUObject(NewTask, &UAsyncTaskAttributeChanged::HandleAttributeChange);\n\treturn NewTask;\n}", "CodeBleu_score": 52.5335862022136}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\tUAsyncTaskAttributeChanged* ListenForAttributeChangeTask = NewObject<UAsyncTaskAttributeChanged>();\n\tListenForAttributeChangeTask->AbilitySystemComponent = AbilitySystemComponent;\n\tListenForAttributeChangeTask->Attribute = Attribute;\n\tListenForAttributeChangeTask->OnAttributeChangeDelegate.BindUObject(ListenForAttributeChangeTask, &UAsyncTaskAttributeChanged::HandleAttributeChange);\n\tListenForAttributeChangeTask->OnFailDelegate.BindUObject(ListenForAttributeChangeTask, &UAsyncTaskAttributeChanged::HandleAttributeChangeFailed);\n\tListenForAttributeChangeTask->OnSuccessDelegate.BindUObject(ListenForAttributeChangeTask, &UAsyncTaskAttributeChanged::HandleAttributeChangeSucceeded);\n\tListenForAttributeChangeTask->StartNewTask();\n\treturn ListenForAttributeChangeTask;\n}", "CodeBleu_score": 48.518665085284894}]}
{"instance_id": "a581424c2b31", "generation_result": [{"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (IsValid(ASC)) {\n\t\tASC->OnActiveGameplayEffectAddedDelegateToSelf.RemoveAll(this);\n\t\tTArray<FGameplayTag> CooldownTagArray;\n\t\tCooldownTags.GetGameplayTagArray(CooldownTagArray);\n\t\tfor (FGameplayTag CooldownTag : CooldownTagArray) {\n\t\t\tASC->UnregisterGameplayTagEvent(CooldownTag, EGameplayTagEventType::NewOrRemoved).RemoveAll(this);\n\t\t}\n\t}\n\n\tReadyForDestruction = true;\n\tMarkAsGarbage();\n}", "CodeBleu_score": 88.15621450500177}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (IsValid(ASC)) {\n\t\tASC->OnActiveGameplayEffectAddedDelegateToSelf.RemoveAll(this);\n\t\tTArray<FGameplayTag> CooldownTagArray;\n\t\tCooldownTags.GetGameplayTagArray(CooldownTagArray);\n\t\tfor (FGameplayTag CooldownTag : CooldownTagArray) {\n\t\t\tASC->UnregisterGameplayTagEvent(CooldownTag, EGameplayTagEventType::NewOrRemoved).RemoveAll(this);\n\t\t}\n\t}\n\tReadyToDestroy = true;\n\tMarkAsGarbage();\n}", "CodeBleu_score": 88.64575367524077}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (IsValid(ASC)) {\n\t\tASC->OnActiveGameplayEffectAddedDelegateToSelf.RemoveAll(this);\n\t\tASC->UnregisterGameplayTagEvent(CooldownTags, EGameplayTagEventType::NewOrRemoved).RemoveAll(this);\n\t}\n\n\tReadyToDestroy = true;\n\tMarkAsGarbage();\n}", "CodeBleu_score": 43.033094612423305}]}
{"instance_id": "5029df3a2033", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, 0, 1);\n\t}\n}", "CodeBleu_score": 98.34760594920219}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, 0, 1);\n\t}\n}", "CodeBleu_score": 98.34760594920219}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, 0, 1);\n\t}\n}", "CodeBleu_score": 98.34760594920219}]}
{"instance_id": "cb1d2823d203", "generation_result": [{"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tUAsyncTaskEffectStackChanged * AsyncTaskEffectStackChanged = NewObject<UAsyncTaskEffectStackChanged>();\n\n\tAsyncTaskEffectStackChanged->AbilitySystemComponent = AbilitySystemComponent;\n\tAsyncTaskEffectStackChanged->EffectGameplayTag = InEffectGameplayTag;\n\n\tif (AsyncTaskEffectStackChanged->AbilitySystemComponent && AsyncTaskEffectStackChanged->EffectGameplayTag.IsValid()) {\n\t\tAsyncTaskEffectStackChanged->RegisterCallbacks();\n\t}\n\telse {\n\t\tAsyncTaskEffectStackChanged->ConditionalEndTask();\n\t\tAsyncTaskEffectStackChanged = nullptr;\n\t}\n\n\treturn AsyncTaskEffectStackChanged;\n}", "CodeBleu_score": 42.56654030325858}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tUAsyncTaskEffectStackChanged * Task = NewObject<UAsyncTaskEffectStackChanged>();\n\tTask->AbilitySystemComponent = AbilitySystemComponent;\n\tTask->EffectGameplayTag = InEffectGameplayTag;\n\n\tif (Task->AbilitySystemComponent && Task->AbilitySystemComponent->IsValidLowLevel()) {\n\t\tTask->AbilitySystemComponent->OnGameplayEffectAdded().AddDynamic(Task, &UAsyncTaskEffectStackChanged::HandleGameplayEffectAdded);\n\t\tTask->AbilitySystemComponent->OnGameplayEffectRemoved().AddDynamic(Task, &UAsyncTaskEffectStackChanged::HandleGameplayEffectRemoved);\n\t\treturn Task;\n\t}\n\telse {\n\t\tTask->EndTask();\n\t\treturn nullptr;\n\t}\n}", "CodeBleu_score": 50.07272032919434}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tUAsyncTaskEffectStackChanged * Task = NewObject<UAsyncTaskEffectStackChanged>();\n\tif (Task->Register(AbilitySystemComponent, InEffectGameplayTag)) {\n\t\treturn Task;\n\t}\n\telse {\n\t\tTask->ConditionalBeginDestroy();\n\t\treturn nullptr;\n\t}\n}", "CodeBleu_score": 27.349487400098365}]}
{"instance_id": "6659c2592e93", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, 0, 1);\n\t}\n}", "CodeBleu_score": 98.34760594920219}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, 0, 1);\n\t}\n}", "CodeBleu_score": 98.34760594920219}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, 0, 1);\n\t}\n}", "CodeBleu_score": 98.34760594920219}]}
{"instance_id": "a8f7dcc3f1fa", "generation_result": [{"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\n\tif (ActivateAbilityOnGranted) {\n\t\tUAbilitySystemComponent * AbilitySystemComponent = ActorInfo->AbilitySystemComponent.Get();\n\t\tif (AbilitySystemComponent) {\n\t\t\tFGameplayEffectSpecHandle EffectSpecHandle = MakeEffectSpec(Spec, ActorInfo->Actor.Get(), ActorInfo->Actor.Get());\n\t\t\tAbilitySystemComponent->GiveAbility(Spec.Handle, ActorInfo->AbilitySystemComponent.Get(), EffectSpecHandle);\n\t\t}\n\t}\n}", "CodeBleu_score": 64.20770021219334}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\n\tif (ActivateAbilityOnGranted) {\n\t\tUAbilitySystemComponent * AbilitySystemComponent = ActorInfo->AbilitySystemComponent.Get();\n\t\tif (AbilitySystemComponent) {\n\t\t\tAbilitySystemComponent->TryActivateAbilityByClass(this->GetClass(), true);\n\t\t}\n\t}\n}", "CodeBleu_score": 64.7837649158755}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\n\tif (ActivateAbilityOnGranted) {\n\t\tUAbilitySystemComponent * ASC = ActorInfo->AbilitySystemComponent.Get();\n\t\tif (ASC) {\n\t\t\tASC->TryActivateAbilityByClass(this->GetClass(), true);\n\t\t}\n\t}\n}", "CodeBleu_score": 67.38961695528396}]}
{"instance_id": "72a7ce4b848c", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tif (Ability && Ability->GetCurrentMontage() == MontageToPlay) {\n\t\tif (Montage == MontageToPlay) {\n\t\t\tAbilitySystemComponent->ClearAnimatingAbility(Ability);\n\n\t\t\t// Reset AnimRootMotionTranslationScale\n\t\t\tACharacter* Character = Cast<ACharacter>(GetAvatarActor());\n\t\t\tif (Character && (Character->GetLocalRole() == ROLE_Authority ||\n\t\t\t\t(Character->GetLocalRole() == ROLE_AutonomousProxy && Ability->GetNetExecutionPolicy() == EGameplayAbilityNetExecutionPolicy::LocalPredicted))) {\n\t\t\t\tCharacter->SetAnimRootMotionTranslationScale(1.f);\n\t\t\t}\n\n\t\t}\n\t}\n\n\tif (bInterrupted) {\n\t\tif (ShouldBroadcastAbilityTaskDelegates()) {\n\t\t\tOnInterrupted.Broadcast(FGameplayTag(), FGameplayEventData());\n\t\t}\n\t}\n\telse {\n\t\tif (ShouldBroadcastAbilityTaskDelegates()) {\n\t\t\tOnCompleted.Broadcast(FGameplayTag(), FGameplayEventData());\n\t\t}\n\t}\n\n\tEndTask();\n}", "CodeBleu_score": 68.97657472236615}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tif (Ability && Ability->GetCurrentMontage() == MontageToPlay) {\n\t\tif (Montage == MontageToPlay) {\n\t\t\tAbilitySystemComponent->ClearAnimatingAbility(Ability);\n\n\t\t\t// Reset AnimRootMotionTranslationScale\n\t\t\tACharacter* Character = Cast<ACharacter>(GetAvatarActor());\n\t\t\tif (Character && (Character->GetLocalRole() == ROLE_Authority ||\n\t\t\t\t(Character->GetLocalRole() == ROLE_AutonomousProxy && Ability->GetNetExecutionPolicy() == EGameplayAbilityNetExecutionPolicy::LocalPredicted))) {\n\t\t\t\tCharacter->SetAnimRootMotionTranslationScale(1.f);\n\t\t\t}\n\n\t\t}\n\t}\n\n\tif (bInterrupted) {\n\t\tif (ShouldBroadcastAbilityTaskDelegates()) {\n\t\t\tOnInterrupted.Broadcast(FGameplayTag(), FGameplayEventData());\n\t\t}\n\t}\n\telse {\n\t\tif (ShouldBroadcastAbilityTaskDelegates()) {\n\t\t\tOnCompleted.Broadcast(FGameplayTag(), FGameplayEventData());\n\t\t}\n\t}\n\n\tEndTask();\n}", "CodeBleu_score": 68.97657472236615}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tif (StopPlayingMontage()) {\n\t\t// Let the BP handle the interrupt as well\n\t\tif (ShouldBroadcastAbilityTaskDelegates()) {\n\t\t\tOnCompleted.Broadcast(FGameplayTag(), FGameplayEventData());\n\t\t}\n\t}\n}", "CodeBleu_score": 52.311213710153105}]}
{"instance_id": "cc1cdd579bd4", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\tif (AbilitySystemComponent.IsValid()) {\n\t\tAbilitySystemComponent->OnGameplayEventTagContainerChanged().Remove(EventHandle);\n\t\tAbilitySystemComponent->OnGameplayAbilityCancelled().Remove(CancelledHandle);\n\t}\n\n\tif (Ability && Ability->GetCurrentMontage() == MontageToPlay) {\n\t\tif (MontageToPlay) {\n\t\t\tAbilitySystemComponent->ClearAnimatingAbility(Ability);\n\n\t\t\t// Reset AnimRootMotionTranslationScale\n\t\t\tACharacter* Character = Cast<ACharacter>(GetAvatarActor());\n\t\t\tif (Character && (Character->GetLocalRole() == ROLE_Authority ||\n\t\t\t\t(Character->GetLocalRole() == ROLE_AutonomousProxy && Ability->GetNetExecutionPolicy() == EGameplayAbilityNetExecutionPolicy::LocalPredicted))) {\n\t\t\t\tCharacter->SetAnimRootMotionTranslationScale(1.f);\n\t\t\t}\n\t\t}\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 46.06872890333643}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\tif (AbilitySystemComponent.IsValid()) {\n\t\tAbilitySystemComponent->OnGameplayEventTagContainerDelegate(EventHandle).RemoveAll(this);\n\n\t\tif (AbilityEnded && bStopWhenAbilityEnds) {\n\t\t\tStopPlayingMontage();\n\t\t}\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 61.27647206706426}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\tif (AbilitySystemComponent.IsValid()) {\n\t\tif (AbilityEnded && bStopWhenAbilityEnds) {\n\t\t\tStopPlayingMontage();\n\t\t}\n\n\t\tif (EventHandle.IsValid()) {\n\t\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(EventTags, EventHandle);\n\t\t\tEventHandle.Reset();\n\t\t}\n\n\t\tif (CancelledHandle.IsValid()) {\n\t\t\tAbility->OnGameplayAbilityCancelled.Remove(CancelledHandle);\n\t\t\tCancelledHandle.Reset();\n\t\t}\n\n\t\tif (AbilitySystemComponent->GetAnimInstance()) {\n\t\t\tAbilitySystemComponent->GetAnimInstance()->Montage_SetEndDelegate(MontageEndedDelegate, MontageToPlay);\n\t\t\tAbilitySystemComponent->GetAnimInstance()->Montage_SetBlendingOutDelegate(BlendingOutDelegate, MontageToPlay);\n\t\t}\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 67.7038726381867}]}
{"instance_id": "5932070df16f", "generation_result": [{"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tif (AbilitySystemComponent.IsValid()) {\n\t\tconst FGameplayAbilityActorInfo* ActorInfo = Ability->GetCurrentActorInfo();\n\t\tUAnimInstance* AnimInstance = ActorInfo->GetAnimInstance();\n\t\tif (AnimInstance!= nullptr) {\n\t\t\t// Unbind to event callback\n\t\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(EventTags, EventHandle);\n\n\t\t\t// Clear montage delegates\n\t\t\tAnimInstance->Montage_SetEndDelegate(MontageEndedDelegate, MontageToPlay);\n\t\t\tAnimInstance->Montage_SetBlendingOutDelegate(BlendingOutDelegate, MontageToPlay);\n\n\t\t\tACharacter* Character = Cast<ACharacter>(GetAvatarActor());\n\t\t\tif (Character && (Character->GetLocalRole() == ROLE_Authority ||\n\t\t\t\t(Character->GetLocalRole() == ROLE_AutonomousProxy && Ability->GetNetExecutionPolicy() == EGameplayAbilityNetExecutionPolicy::LocalPredicted))) {\n\t\t\t\tCharacter->SetAnimRootMotionTranslationScale(1.f);\n\t\t\t}\n\n\t\t\tAbilitySystemComponent->ClearAnimatingAbility(Ability);\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 59.48743355795618}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tif (AbilitySystemComponent.IsValid()) {\n\t\tconst FGameplayAbilityActorInfo* ActorInfo = Ability->GetCurrentActorInfo();\n\t\tUAnimInstance* AnimInstance = ActorInfo->GetAnimInstance();\n\t\tif (AnimInstance!= nullptr) {\n\t\t\t// Unbind the delegates\n\t\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(EventTags, EventHandle);\n\t\t\tAnimInstance->Montage_SetEndDelegate(MontageEndedDelegate, MontageToPlay);\n\t\t\tAnimInstance->Montage_SetBlendingOutDelegate(BlendingOutDelegate, MontageToPlay);\n\n\t\t\t// Stop the montage\n\t\t\tAbilitySystemComponent->ClearAnimatingAbility(Ability);\n\n\t\t\t// Reset AnimRootMotionTranslationScale\n\t\t\tACharacter* Character = Cast<ACharacter>(GetAvatarActor());\n\t\t\tif (Character && (Character->GetLocalRole() == ROLE_Authority ||\n\t\t\t\t(Character->GetLocalRole() == ROLE_AutonomousProxy && Ability->GetNetExecutionPolicy() == EGameplayAbilityNetExecutionPolicy::LocalPredicted))) {\n\t\t\t\tCharacter->SetAnimRootMotionTranslationScale(1.f);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 59.48743355795618}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tif (AbilitySystemComponent.IsValid()) {\n\t\tconst FGameplayAbilityActorInfo* ActorInfo = Ability->GetCurrentActorInfo();\n\t\tUAnimInstance* AnimInstance = ActorInfo->GetAnimInstance();\n\t\tif (AnimInstance!= nullptr) {\n\t\t\t// Unbind to event callback\n\t\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(EventTags, EventHandle);\n\n\t\t\t// Unbind to montage delegates\n\t\t\tAnimInstance->Montage_SetEndDelegate(FDelegate::EmptyDelegate, MontageToPlay);\n\t\t\tAnimInstance->Montage_SetBlendingOutDelegate(FDelegate::EmptyDelegate, MontageToPlay);\n\n\t\t\tAbilitySystemComponent->ClearAnimatingAbility(Ability);\n\n\t\t\t// Reset AnimRootMotionTranslationScale\n\t\t\tACharacter* Character = Cast<ACharacter>(GetAvatarActor());\n\t\t\tif (Character && (Character->GetLocalRole() == ROLE_Authority ||\n\t\t\t\t(Character->GetLocalRole() == ROLE_AutonomousProxy && Ability->GetNetExecutionPolicy() == EGameplayAbilityNetExecutionPolicy::LocalPredicted))) {\n\t\t\t\tCharacter->SetAnimRootMotionTranslationScale(1.f);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 56.46276631979911}]}
{"instance_id": "7049be7f0c75", "generation_result": [{"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\t// Retrieve the target actor from the blackboard\n\tAActor* TargetActor = Cast<AActor>(OwnerComp.GetBlackboardComponent()->GetValueAsObject(TargetActorKey.SelectedKeyName));\n\n\t// Calculate the distance to the target\n\tfloat DistanceToTarget = (TargetActor->GetActorLocation() - OwnerComp.GetAIOwner()->GetPawn()->GetActorLocation()).Size();\n\n\t// Check if the target is within range\n\tif (DistanceToTarget <= MaxAttackRange) {\n\t\t// Check for line of sight to the target\n\t\tbool bCanSeeTarget = OwnerComp.GetAIOwner()->GetPawn()->LineOfSightTo(TargetActor);\n\n\t\t// Store the result in the blackboard\n\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(bWithinRangeKey.SelectedKeyName, bCanSeeTarget);\n\t}\n\telse {\n\t\t// Store the result in the blackboard\n\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(bWithinRangeKey.SelectedKeyName, false);\n\t}\n}", "CodeBleu_score": 35.567833751712314}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\tauto BlackboardComp = OwnerComp.GetBlackboardComponent();\n\n\tif (BlackboardComp == nullptr) {\n\t\treturn;\n\t}\n\n\tauto TargetActor = Cast<AActor>(BlackboardComp->GetValueAsObject(TargetActorKey.SelectedKeyName));\n\n\tif (TargetActor == nullptr) {\n\t\treturn;\n\t}\n\n\tauto AIController = Cast<AAIController>(OwnerComp.GetAIOwner());\n\n\tif (AIController == nullptr) {\n\t\treturn;\n\t}\n\n\tauto AIActor = Cast<APawn>(AIController->GetPawn());\n\n\tif (AIActor == nullptr) {\n\t\treturn;\n\t}\n\n\tauto Distance = FVector::Dist(AIActor->GetActorLocation(), TargetActor->GetActorLocation());\n\n\tif (Distance <= MaxAttackRange) {\n\t\tFHitResult HitResult;\n\t\tFCollisionQueryParams CollisionParams;\n\t\tCollisionParams.AddIgnoredActor(AIActor);\n\n\t\tif (AIActor->GetWorld()->LineTraceSingleByChannel(HitResult, AIActor->GetActorLocation(), TargetActor->GetActorLocation(), ECC_Visibility, CollisionParams)) {\n\t\t\tBlackboardComp->SetValueAsBool(WithinAttackRangeKey.SelectedKeyName, true);\n\t\t\tBlackboardComp->SetValueAsBool(TargetVisibleKey.SelectedKeyName, true);\n\t\t}\n\t\telse {\n\t\t\tBlackboardComp->SetValueAsBool(WithinAttackRangeKey.SelectedKeyName, true);\n\t\t\tBlackboardComp->SetValueAsBool(TargetVisibleKey.SelectedKeyName, false);\n\t\t}\n\t}\n\telse {\n\t\tBlackboardComp->SetValueAsBool(WithinAttackRangeKey.SelectedKeyName, false);\n\t\tBlackboardComp->SetValueAsBool(TargetVisibleKey.SelectedKeyName, false);\n\t}\n}", "CodeBleu_score": 48.089287756183005}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tAAIController* AIController = OwnerComp.GetAIOwner();\n\tif (!AIController) {\n\t\treturn;\n\t}\n\n\tAPawn* TargetPawn = Cast<APawn>(OwnerComp.GetBlackboardComponent()->GetValueAsObject(TargetActorKey.SelectedKeyName));\n\tif (!TargetPawn) {\n\t\treturn;\n\t}\n\n\tfloat Distance = FVector::Dist(AIController->GetPawn()->GetActorLocation(), TargetPawn->GetActorLocation());\n\tbool bWithinRange = Distance <= MaxAttackRange;\n\tbool bLineOfSight = AIController->GetPawn()->LineOfSightTo(TargetPawn);\n\n\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(WithinRangeKey.SelectedKeyName, bWithinRange);\n\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(LineOfSightKey.SelectedKeyName, bLineOfSight);\n}", "CodeBleu_score": 41.40605336021515}]}
{"instance_id": "031bd0ec3e3c", "generation_result": [{"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\t// Retrieve the pawn from the AI owner.\n\tAPawn* Pawn = OwnerComp.GetAIOwner()->GetPawn();\n\n\t// Retrieve the attribute component from the pawn.\n\tUSAttributeComponent* AttributeComponent = Pawn->FindComponentByClass<USAttributeComponent>();\n\n\t// If the attribute component is valid, restore the health to maximum.\n\tif (AttributeComponent) {\n\t\tAttributeComponent->RestoreHealthToMaximum();\n\t}\n\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 57.09838099051526}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tAActor* pawn = OwnerComp.GetAIOwner()->GetPawn();\n\tif (pawn) {\n\t\tUSAttributeComponent* attributeComponent = Cast<USAttributeComponent>(pawn->GetComponentByClass(USAttributeComponent::StaticClass()));\n\t\tif (attributeComponent) {\n\t\t\tattributeComponent->ModifyHealth(attributeComponent->GetMaxHealth());\n\t\t\treturn EBTNodeResult::Succeeded;\n\t\t}\n\t}\n\treturn EBTNodeResult::Failed;\n}", "CodeBleu_score": 56.27722747035849}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\t// Retrieve the pawn from the AI owner.\n\tAPawn* pawn = Cast<APawn>(OwnerComp.GetAIOwner()->GetPawn());\n\t// If the pawn is valid, get its attribute component.\n\tUSAttributeComponent* attributeComponent = pawn->FindComponentByClass<USAttributeComponent>();\n\tif (attributeComponent) {\n\t\t// Apply a health change to restore the pawn's health to maximum.\n\t\tattributeComponent->ApplyHealthChange(pawn->GetMaxHealth());\n\t}\n\t// Return success.\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 58.45440203966563}]}
{"instance_id": "6cd6e778e91b", "generation_result": [{"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\tUSTickablesSubsystem::Get(GetWorld()).RegisterTickable(this);\n}", "CodeBleu_score": 31.5541117571706}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\tUSTickablesSubsystem::Get().RegisterTickable(this);\n}", "CodeBleu_score": 28.846854152094814}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tif (GetWorld()) {\n\t\tGetWorld()->GetSubsystem<USTickablesSubsystem>()->RegisterTickable(this);\n\t}\n}", "CodeBleu_score": 53.645687720978216}]}
{"instance_id": "e90ff27c7f16", "generation_result": [{"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\n\tUSTickablesSubsystem* Tickables = GetWorld()->GetSubsystem<USTickablesSubsystem>();\n\tTickables->DeregisterComponent(&PrimaryComponentTick);\n}", "CodeBleu_score": 90.87129679325732}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\n\tUSTickablesSubsystem* Tickables = GetWorld()->GetSubsystem<USTickablesSubsystem>();\n\tTickables->DeregisterComponent(&PrimaryComponentTick);\n}", "CodeBleu_score": 90.87129679325732}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\n\tUSTickablesSubsystem* Tickables = GetWorld()->GetSubsystem<USTickablesSubsystem>();\n\tTickables->DeregisterComponent(&PrimaryComponentTick);\n}", "CodeBleu_score": 90.87129679325732}]}
{"instance_id": "be3e542c07ea", "generation_result": [{"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tif (bManageSignificance) {\n\t\t// Check if the owner implements the interface\n\t\tif (Owner) {\n\t\t\tbHasImplementedInterface = Owner->GetClass()->ImplementsInterface(USignificanceInterface::StaticClass());\n\t\t}\n\n\t\t// If the owner implements the interface, register the component with the manager\n\t\tif (bHasImplementedInterface) {\n\t\t\tif (bWaitOneFrame) {\n\t\t\t\t// Schedule for the next frame to register the component\n\t\t\t\tbWaitOneFrame = false;\n\t\t\t\tGetWorld()->GetTimerManager().SetTimerForNextTick(this, &USSignificanceComponent::RegisterWithManager);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Register the component immediately\n\t\t\t\tRegisterWithManager();\n\t\t\t}\n\t\t}\n\t}\n\n\t// If the owner is a particle system, manage its significance\n\tif (bManageOwnerParticleSignificance && Owner && Owner->GetClass()->ImplementsInterface(UParticleSystemComponent::StaticClass())) {\n\t\tUParticleSystemComponent* ParticleSystem = Cast<UParticleSystemComponent>(Owner);\n\t\tif (ParticleSystem) {\n\t\t\t// Set the particle system's initial significance\n\t\t\tSetParticleSystemSignificance(ParticleSystem);\n\n\t\t\t// Listen for changes to the owner's visibility\n\t\t\tOwner->OnActorHiddenInGame.AddDynamic(this, &USSignificanceComponent::OnOwnerHidden);\n\t\t\tOwner->OnActorUnhidden.AddDynamic(this, &USSignificanceComponent::OnOwnerUnhidden);\n\t\t}\n\t}\n}", "CodeBleu_score": 59.632216234781346}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tif (bManageSignificance) {\n\t\tif (bManageOwnerParticleSignificance) {\n\t\t\t// Find all particle system components owned by the actor\n\t\t\tTArray<UParticleSystemComponent*> ParticleSystemComponents;\n\t\t\tGetOwner()->GetComponents<UParticleSystemComponent>(ParticleSystemComponents);\n\n\t\t\tfor (UParticleSystemComponent* ParticleSystemComponent : ParticleSystemComponents) {\n\t\t\t\tif (ParticleSystemComponent) {\n\t\t\t\t\t// Set the particle system component's owner as the owner of this component\n\t\t\t\t\tParticleSystemComponent->SetOwner(GetOwner());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If the owner implements the significance interface\n\t\tif (GetOwner()->GetClass()->ImplementsInterface(USSignificanceInterface::StaticClass())) {\n\t\t\tbHasImplementedInterface = true;\n\t\t}\n\n\t\tif (bWaitOneFrame) {\n\t\t\t// Register the component with the manager\n\t\t\tGSignificanceManager.RegisterComponent(this);\n\t\t}\n\t\telse {\n\t\t\t// Schedule the component for the next tick\n\t\t\tGetWorld()->GetTimerManager().SetTimerForNextTick(this, &USSignificanceComponent::RegisterComponent);\n\t\t}\n\t}\n}", "CodeBleu_score": 61.67140052199812}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tif (bManageSignificance) {\n\t\t// If the owner implements the interface, we can manage its significance\n\t\tif (AActor* Owner = GetOwner()) {\n\t\t\tbHasImplementedInterface = Cast<ISignificanceInterface>(Owner)!= nullptr;\n\t\t}\n\n\t\t// If we are managing significance, we need to register the component with the manager\n\t\tif (bHasImplementedInterface) {\n\t\t\t// Register the component with the manager\n\t\t\tif (bWaitOneFrame) {\n\t\t\t\t// If we are waiting for the next frame, we can register the component immediately\n\t\t\t\tRegisterWithManager();\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// If we are not waiting for the next frame, we need to schedule the registration\n\t\t\t\t// We schedule it to the next frame so that the owner can set up the component\n\t\t\t\t// before we register it\n\t\t\t\tGetWorld()->GetTimerManager().SetTimerForNextTick(this, &USSignificanceComponent::RegisterWithManager);\n\t\t\t}\n\t\t}\n\t}\n\n\t// If we are managing particle significance, we need to check if the owner has particle system components\n\tif (bManageOwnerParticleSignificance) {\n\t\t// Loop through all components owned by the owner\n\t\tfor (UActorComponent* Component : GetOwner()->GetComponents()) {\n\t\t\t// If the component is a particle system component\n\t\t\tif (UParticleSystemComponent* ParticleSystemComponent = Cast<UParticleSystemComponent>(Component)) {\n\t\t\t\t// We can manage the particle system component\n\t\t\t\tManageParticleSystemComponent(ParticleSystemComponent);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 63.94352076483758}]}
{"instance_id": "77824b6415d0", "generation_result": [{"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\t// Get the world and the manager\n\tUWorld* World = GetWorld();\n\tUSSignificanceManager* Manager = World->GetSignificanceManager();\n\n\t// Define the lambda functions\n\tFSignificanceFunction CalculateSignificance = [this](const FVector& Location) -> float {\n\t\treturn CalculateSignificance(Location);\n\t};\n\n\tFPostSignificanceUpdateFunction UpdateSignificance = [this](const FVector& Location, float NewSignificance) {\n\t\tUpdateSignificance(Location, NewSignificance);\n\t};\n\n\t// Register the component with the manager\n\tManager->RegisterComponent(GetOwner()->GetClass()->GetFName(), CalculateSignificance, UpdateSignificance);\n}", "CodeBleu_score": 38.81868425549778}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\tif (bManageSignificance) {\n\t\tUSSignificanceManager* SignificanceManager = GetWorld()->GetSignificanceManager();\n\t\tif (SignificanceManager) {\n\t\t\t// Lambda functions for calculating and handling significance\n\t\t\tauto CalculateSignificance = [this](AActor* Owner) {\n\t\t\t\treturn CalculateSignificanceValue(Owner);\n\t\t\t};\n\t\t\tauto HandleSignificanceUpdate = [this](AActor* Owner) {\n\t\t\t\tHandleSignificanceUpdate(Owner);\n\t\t\t};\n\n\t\t\t// Register\n\t\t\tSignificanceManager->RegisterSignificanceComponent(GetOwner()->GetClass()->GetName(), this, CalculateSignificance, HandleSignificanceUpdate);\n\t\t}\n\t}\n}", "CodeBleu_score": 31.130745189765797}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\t// Retrieve the significance manager from the world\n\tUSSignificanceManager* SigMan = GetWorld()->GetSignificanceManager();\n\n\t// Define the lambda functions for calculating significance and handling post-significance updates\n\tauto CalcSignificance = [this](const FVector& Location, float& OutSignificance) {\n\t\tOutSignificance = CalculateSignificance(Location);\n\t};\n\n\tauto PostSignificanceUpdate = [this](const FVector& Location, float NewSignificance, float OldSignificance) {\n\t\tPostSignificanceUpdate(Location, NewSignificance, OldSignificance);\n\t};\n\n\t// Register the component with the manager using the owner's class name as the tag and specify the lambda functions for significance calculation and updates\n\tSigMan->RegisterComponent(GetOwner()->GetClass()->GetName(), this, CalcSignificance, PostSignificanceUpdate);\n}", "CodeBleu_score": 41.563823525739984}]}
{"instance_id": "dca342410d64", "generation_result": [{"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tif (Actor->IsActorPoolable()) {\n\t\tauto PoolingSubsystem = GetPoolingSubsystem(Actor);\n\t\tif (PoolingSubsystem) {\n\t\t\treturn PoolingSubsystem->ReleaseToPool(Actor);\n\t\t}\n\t}\n\n\tActor->Destroy();\n\treturn false;\n}", "CodeBleu_score": 46.719473533020235}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tif (Actor == nullptr) {\n\t\treturn false;\n\t}\n\n\tif (Actor->GetClass()->ImplementsInterface(USActorPoolingInterface::StaticClass())) {\n\t\tauto PoolingSubsystem = IWorldContext::GetWorldContextFromWorldObject(Actor->GetWorld())->GetSubsystem<USActorPoolingSubsystem>();\n\t\tif (PoolingSubsystem!= nullptr) {\n\t\t\treturn PoolingSubsystem->ReleaseToPool(Actor);\n\t\t}\n\t}\n\n\tActor->Destroy();\n\treturn false;\n}", "CodeBleu_score": 48.783327123280245}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tif (Actor->IsActorPoolable()) {\n\t\tUSActorPoolingSubsystem* PoolingSubsystem = Actor->GetWorld()->GetSubsystem<USActorPoolingSubsystem>();\n\t\tif (PoolingSubsystem!= nullptr) {\n\t\t\tPoolingSubsystem->ReleaseToPool(Actor);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tActor->Destroy();\n\treturn false;\n}", "CodeBleu_score": 60.19213358874267}]}
{"instance_id": "5c285130f782", "generation_result": [{"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tSCOPED_NAMED_EVENT(PrimeActorPool, FColor::Red);\n\t// Spawn the actors and immediately release them to the pool\n\tfor (int32 i = 0; i < Amount; ++i) {\n\t\tAActor* Actor = AcquireFromPool(this, ActorClass, FTransform::Identity, FActorSpawnParameters());\n\t\tReleaseToPool_Internal(Actor);\n\t}\n}", "CodeBleu_score": 44.596583731069494}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tSCOPED_NAMED_EVENT(PrimeActorPool, FColor::Yellow);\n\tfor (int32 i = 0; i < Amount; ++i) {\n\t\tAActor* Actor = SpawnActorPooled(GetWorld(), ActorClass, FTransform::Identity, ESpawnActorCollisionHandlingMethod::AlwaysSpawn);\n\t\tReleaseToPool(Actor);\n\t}\n}", "CodeBleu_score": 47.07344836612163}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tSCOPED_NAMED_EVENT(PrimeActorPool, FColor::Red);\n\n\tFActorSpawnParameters Params;\n\tParams.SpawnCollisionHandlingOverride = ESpawnActorCollisionHandlingMethod::AlwaysSpawn;\n\n\tfor (int32 i = 0; i < Amount; ++i) {\n\t\tAActor* Actor = AcquireFromPool_Internal(ActorClass, FTransform::Identity, Params);\n\t\tReleaseToPool_Internal(Actor);\n\t}\n}", "CodeBleu_score": 60.95837903873404}]}
{"instance_id": "43c013653d6d", "generation_result": [{"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\tif (IsRunningDedicatedServer()) {\n\t\treturn;\n\t}\n\n\t// Create a new loading screen widget and assign it to the loading screen attributes\n\tFLoadingScreenAttributes LoadingScreen;\n\tLoadingScreen.WidgetLoadingScreen = CreateWidget<ULoadingScreenWidget>(GetWorld(), LoadingScreenWidgetClass);\n\n\t// Set up the loading screen using the movie player\n\tFMoviePlayerSettings MoviePlayerSettings;\n\tMoviePlayerSettings.bWaitForMoviesToComplete = true;\n\tMoviePlayerSettings.StartupMovies.Add(MapName);\n\tMoviePlayerSettings.StartupMovies.Add(TEXT(\"DefaultLoadingScreen\"));\n\tGetMoviePlayer()->Setup(LoadingScreen, MoviePlayerSettings);\n\tGetMoviePlayer()->Play();\n}", "CodeBleu_score": 50.04565130021275}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\t// Create a new loading screen attributes object\n\tFLoadingScreenAttributes LoadingScreen;\n\n\t// Assign a new loading screen widget to it\n\tLoadingScreen.WidgetLoadingScreen = CreateWidget<UUserWidget>(GetGameInstance(), LoadingScreenWidgetClass);\n\n\t// Set up the loading screen using the movie player\n\tFMovieSceneSequencePlaybackSettings PlaybackSettings;\n\tPlaybackSettings.bAutoPlay = true;\n\tPlaybackSettings.bLoop = true;\n\tPlaybackSettings.bRestoreState = true;\n\n\tLoadingScreen.MovieSceneSequence = MovieSceneSequence.FindOrAdd(MapName, FMovieSceneSequence(LoadingScreen.WidgetLoadingScreen->TakeWidget(), PlaybackSettings));\n\n\t// Play the loading screen\n\tMoviePlayer.PlaySequence(LoadingScreen.MovieSceneSequence);\n}", "CodeBleu_score": 50.99779520291193}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t", "CodeBleu_score": 8.21000268905031}]}
{"instance_id": "a6979eb925a5", "generation_result": [{"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tif (!CanStart(Instigator)) {\n\t\treturn;\n\t}\n\n\tUSActionComponent* Comp = GetOwningComponent();\n\n\tComp->ActiveGameplayTags.AppendTags(GrantedTags, true);\n\n\tif (Comp->GetOwnerRole() == ROLE_Authority) {\n\t\tComp->StartTime = GetWorld()->GetTimeSeconds();\n\t}\n\n\tOnActionStarted.Broadcast(Instigator, this);\n}", "CodeBleu_score": 42.113960094524586}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t", "CodeBleu_score": 2.8878179675041573}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tif (!CanStart(Instigator)) {\n\t\treturn;\n\t}\n\n\tUSActionComponent* Comp = GetOwningComponent();\n\n\t// Log the start of the action\n\tUE_LOG(LogTemp, Log, TEXT(\"Action %s started by %s\"), *GetName(), *GetNameSafe(Instigator));\n\n\t// Append granted tags to the owning component's active gameplay tags\n\tComp->ActiveGameplayTags.AppendTags(GrantedTags);\n\n\t// Update the replication data\n\tif (Comp->Role == ROLE_Authority) {\n\t\tComp->ReplicatedData.bIsActionActive = true;\n\t\tComp->ReplicatedData.ActiveActionName = GetName();\n\t\tComp->ReplicatedData.ActiveActionInstigator = Instigator;\n\t\tComp->ReplicatedData.ActiveActionStartTime = GetWorld()->GetTimeSeconds();\n\t}\n\n\t// Broadcast an action started event from the owning component\n\tComp->BroadcastActionStartedEvent();\n}", "CodeBleu_score": 48.33138769001633}]}
{"instance_id": "bdec7bf3e2d7", "generation_result": [{"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tif (GetWorld()->GetGameState<AGameStateBase>()) {\n\t\treturn Duration - GetWorld()->GetGameState<AGameStateBase>()->GetServerWorldTimeSeconds();\n\t}\n\n\treturn Duration;\n}", "CodeBleu_score": 49.196275798096366}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tif (GetWorld()->GetGameState()!= nullptr) {\n\t\treturn Duration - GetWorld()->GetGameState()->GetServerWorldTimeSeconds();\n\t}\n\n\treturn Duration;\n}", "CodeBleu_score": 41.07998023141407}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tif (GetWorld()->GetGameState()!= nullptr) {\n\t\treturn FMath::Max(Duration - GetWorld()->GetGameState()->GetServerWorldTimeSeconds(), 0.0f);\n\t}\n\n\treturn Duration;\n}", "CodeBleu_score": 41.353350868079666}]}
{"instance_id": "db3a7508643b", "generation_result": [{"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\tif (InFocus == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"Interacting with nullptr\"));\n\t}\n\telse {\n\t\tAPawn* OwnerPawn = Cast<APawn>(GetOwner());\n\t\tif (OwnerPawn!= nullptr) {\n\t\t\tif (InFocus->Implements<USGameplayInterface>()) {\n\t\t\t\tInFocus->GetInterface<USGameplayInterface>()->Interact(OwnerPawn);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 56.06545547316588}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\tif (!InFocus) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"No Actor to interact with!\"));\n\t\treturn;\n\t}\n\n\tAPawn* MyPawn = Cast<APawn>(GetOwner());\n\tif (!MyPawn) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"No Pawn to interact with!\"));\n\t\treturn;\n\t}\n\n\tInFocus->GetInterface<USGameplayInterface>()->Interact(MyPawn);\n}", "CodeBleu_score": 55.09080245196258}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\tif (InFocus == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"ServerInteract_Implementation called with null focus actor!\"));\n\t} else {\n\t\tAPawn* OwningPawn = GetOwner();\n\t\tif (OwningPawn) {\n\t\t\tif (InFocus->Implements<USGameplayInterface>()) {\n\t\t\t\tInFocus->GetInterface<USGameplayInterface>()->Interact(OwningPawn);\n\t\t\t} else {\n\t\t\t\tUE_LOG(LogTemp, Warning, TEXT(\"ServerInteract_Implementation called with actor that does not implement USGameplayInterface!\"));\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 49.15496071496464}]}
{"instance_id": "e6a5224079e6", "generation_result": [{"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\t// Check if the target actor has an attribute component\n\tUSAttributeComponent* TargetAttributeComponent = TargetActor->FindComponentByClass<USAttributeComponent>();\n\tif (TargetAttributeComponent) {\n\t\t// Apply a negative health change equal to the damage amount\n\t\tTargetAttributeComponent->ChangeHealth(-DamageAmount);\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 51.13632887541581}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tif (TargetActor == nullptr) {\n\t\treturn false;\n\t}\n\n\t// Retrieve the target actor's attribute component\n\tUSAttributeComponent* TargetAttributeComponent = TargetActor->FindComponentByClass<USAttributeComponent>();\n\n\t// If the target actor has an attribute component, apply the damage\n\tif (TargetAttributeComponent!= nullptr) {\n\t\tTargetAttributeComponent->ApplyDamage(DamageCauser, DamageAmount);\n\t\treturn true;\n\t}\n\n\t// If the target actor does not have an attribute component, return false\n\treturn false;\n}", "CodeBleu_score": 52.068827913585395}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tUSAttributeComponent* AttributeComponent = Cast<USAttributeComponent>(TargetActor->GetComponentByClass(USAttributeComponent::StaticClass()));\n\tif (AttributeComponent) {\n\t\tAttributeComponent->ApplyHealthChange(-DamageAmount);\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 51.36589185037357}]}
{"instance_id": "084a7501fc08", "generation_result": [{"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\tif (NewTime > PersonalRecordTime) {\n\t\tPersonalRecordTime = NewTime;\n\t\tOnPersonalRecordChanged.Broadcast(this, PersonalRecordTime);\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 57.68374511046637}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\tif (NewTime > PersonalRecordTime) {\n\t\tPersonalRecordTime = NewTime;\n\t\tOnPersonalRecordChanged.Broadcast(this, PersonalRecordTime);\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 57.68374511046637}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\t// Avoid user-error of adding a subtracting negative amount\n\tif (!ensure(NewTime >= 0.0f)) {\n\t\treturn false;\n\t}\n\n\tif (PersonalRecord < NewTime) {\n\t\t// Not enough credits available\n\t\treturn false;\n\t}\n\n\tPersonalRecord = NewTime;\n\n\tOnPersonalRecordChanged.Broadcast(this, PersonalRecord, -NewTime);\n\n\treturn true;\n}", "CodeBleu_score": 48.03771858836221}]}
{"instance_id": "8e0ccc856566", "generation_result": [{"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (InstigatorPawn == nullptr) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"Instigator pawn is null\"));\n\t\treturn;\n\t}\n\n\tUAttributeComponent* AttributeComponent = InstigatorPawn->FindComponentByClass<UAttributeComponent>();\n\tif (AttributeComponent == nullptr) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"Instigator pawn does not have an attribute component\"));\n\t\treturn;\n\t}\n\n\tASPlayerState* PlayerState = InstigatorPawn->GetPlayerState<ASPlayerState>();\n\tif (PlayerState == nullptr) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"Instigator pawn does not have a player state\"));\n\t\treturn;\n\t}\n\n\tif (!PlayerState->RemoveCredits(CreditCost)) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"Player state does not have enough credits to purchase power-up\"));\n\t\treturn;\n\t}\n\n\tif (AttributeComponent->GetHealth() == AttributeComponent->GetMaxHealth()) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"Instigator pawn is already at full health\"));\n\t\treturn;\n\t}\n\n\tAttributeComponent->ChangeHealth(HealthChange);\n\tOnPowerupCooldown();\n}", "CodeBleu_score": 47.36251865650396}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (InstigatorPawn) {\n\t\tauto AttributeComponent = InstigatorPawn->FindComponentByClass<USAttributeComponent>();\n\t\tif (AttributeComponent) {\n\t\t\tif (AttributeComponent->GetHealth() < AttributeComponent->GetMaxHealth()) {\n\t\t\t\tauto PlayerState = Cast<ASPlayerState>(InstigatorPawn->GetPlayerState());\n\t\t\t\tif (PlayerState) {\n\t\t\t\t\tif (PlayerState->RemoveCredits(CreditCost)) {\n\t\t\t\t\t\tAttributeComponent->ChangeHealth(HealthChange);\n\t\t\t\t\t\tPowerupCooldown();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 48.22002907363871}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tSuper::Interact_Implementation(InstigatorPawn);\n\n\tif (InstigatorPawn && InstigatorPawn->GetInstigatorController()) {\n\t\tASAttributeComponent* AttributeComponent = InstigatorPawn->FindComponentByClass<ASAttributeComponent>();\n\n\t\tif (AttributeComponent &&!AttributeComponent->IsAtFullHealth()) {\n\t\t\tASPlayerState* PlayerState = Cast<ASPlayerState>(InstigatorPawn->GetInstigatorController()->PlayerState);\n\n\t\t\tif (PlayerState && PlayerState->RemoveCredits(CreditCost)) {\n\t\t\t\tAttributeComponent->ApplyHealthChange(HealthChange);\n\t\t\t\tTriggerCooldown();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 48.82024429434455}]}
{"instance_id": "39a680859a89", "generation_result": [{"code": "void ASProjectileBase::Explode_Implementation(){\n\t\t// Spawn impact FX at location\n\tUNiagaraFunctionLibrary::SpawnSystemAtLocation(GetWorld(), NiagaraLoopComp, GetActorLocation());\n\n\t// Play impact sound\n\tUGameplayStatics::PlaySoundAtLocation(GetWorld(), ImpactSound, GetActorLocation());\n\n\t// Trigger camera shake\n\tAPlayerController* PlayerController = UGameplayStatics::GetPlayerController(GetWorld(), 0);\n\tPlayerController->ClientPlayCameraShake(ImpactCameraShake, 1.0f);\n\n\t// Release to pool\n\tUSActorPoolingSubsystem::ReleaseToPool(this);\n}", "CodeBleu_score": 51.28798353668705}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t\t// Spawn an impact visual effect at the projectile's location\n\tUNiagaraSystem* ImpactEffect = UNiagaraFunctionLibrary::SpawnSystemAtLocation(GetWorld(), ImpactEffectTemplate, GetActorLocation());\n\tif (ImpactEffect) {\n\t\tImpactEffect->SetPaused(false);\n\t}\n\n\t// Play an impact sound at the projectile's location\n\tUGameplayStatics::PlaySoundAtLocation(this, ImpactSound, GetActorLocation());\n\n\t// Trigger a camera shake\n\tAPlayerController* PlayerController = UGameplayStatics::GetPlayerController(this, 0);\n\tif (PlayerController) {\n\t\tPlayerController->ClientPlayCameraShake(CameraShake);\n\t}\n\n\t// Release the projectile back to the actor pool using the actor pooling subsystem\n\tUSActorPoolingSubsystem::ReleaseToPool(this);\n}", "CodeBleu_score": 55.55070161676916}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t\t// Spawn an impact effect at the projectile's location\n\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ImpactEffect, GetActorLocation());\n\n\t// Play an impact sound\n\tUGameplayStatics::PlaySoundAtLocation(this, ImpactSound, GetActorLocation());\n\n\t// Trigger a camera shake\n\tAPlayerController* PlayerController = UGameplayStatics::GetPlayerController(this, 0);\n\tif (PlayerController) {\n\t\tPlayerController->ClientPlayCameraShake(ImpactCameraShake);\n\t}\n\n\t// Release the projectile back to the actor pool\n\tUSActorPoolingSubsystem::ReleaseToPool(this);\n}", "CodeBleu_score": 49.69859268347208}]}
{"instance_id": "a95c41c6d7b5", "generation_result": [{"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USSaveGame::GetPlayerData: PlayerState is null.\"));\n\t\treturn nullptr;\n\t}\n\n\tFString PlayerID = PlayerState->GetPlayerId();\n\tFPlayerSaveData* PlayerData = nullptr;\n\tif (PlayerID.IsEmpty()) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USSaveGame::GetPlayerData: PlayerState does not have a PlayerID.\"));\n\t\treturn nullptr;\n\t}\n\n\tif (PlayerData == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USSaveGame::GetPlayerData: PlayerState does not have a saved player data.\"));\n\t\treturn nullptr;\n\t}\n\n\treturn PlayerData;\n}", "CodeBleu_score": 50.122444741680596}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"GetPlayerData: PlayerState is null.\"));\n\t\treturn nullptr;\n\t}\n\n\tFPlayerSaveData* PlayerData = nullptr;\n\tif (GEngine->GetNetMode(PlayerState->GetWorld()) == ENetMode::NM_Standalone) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"GetPlayerData: In PIE mode. Returning first player entry.\"));\n\t\tfor (FPlayerSaveData& Entry : PlayerEntries) {\n\t\t\tPlayerData = &Entry;\n\t\t\tbreak;\n\t\t}\n\t} else {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"GetPlayerData: In PIE mode. Returning first player entry.\"));\n\t\tfor (FPlayerSaveData& Entry : PlayerEntries) {\n\t\t\tif (Entry.PlayerID == PlayerState->GetPlayerId()) {\n\t\t\t\tPlayerData = &Entry;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn PlayerData;\n}", "CodeBleu_score": 47.93067548575126}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USSaveGame::GetPlayerData: PlayerState is null.\"));\n\t\treturn nullptr;\n\t}\n\n\tif (GEngine->IsPlayInEditor(GWorld)) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USSaveGame::GetPlayerData: Play-In-Editor mode.\"));\n\n\t\tif (SavedPlayerData.Num() > 0) {\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(\"USSaveGame::GetPlayerData: Returning first saved player data.\"));\n\t\t\treturn SavedPlayerData[0];\n\t\t}\n\n\t\treturn nullptr;\n\t}\n\n\tFString PlayerID = PlayerState->GetPlayerId();\n\tint32 PlayerIndex = SavedPlayerData.IndexOfByPredicate([PlayerID](FPlayerSaveData* Data) { return Data->PlayerID == PlayerID; });\n\n\tif (PlayerIndex == INDEX_NONE) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USSaveGame::GetPlayerData: PlayerID %s not found.\"), *PlayerID);\n\t\treturn nullptr;\n\t}\n\n\treturn SavedPlayerData[PlayerIndex];\n}", "CodeBleu_score": 52.349557505558394}]}
{"instance_id": "58a03c087c47", "generation_result": [{"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t// Get the player state\n\tASPlayerState* PlayerState = Cast<ASPlayerState>(NewPlayer->PlayerState);\n\tif (!PlayerState) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"HandleStartingNewPlayer: PlayerState is null\"));\n\t\treturn;\n\t}\n\n\t// Ensure it is valid\n\tif (!PlayerState->IsValidLowLevel()) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"HandleStartingNewPlayer: PlayerState is invalid\"));\n\t\treturn;\n\t}\n\n\t// Load the save game\n\tif (!LoadGame(CurrentSlotName, PlayerState)) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"HandleStartingNewPlayer: Failed to load save game\"));\n\t\treturn;\n\t}\n}", "CodeBleu_score": 40.97463020787316}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t// Get the player's state\n\tAPlayerState* PlayerState = NewPlayer->GetPlayerState<APlayerState>();\n\t// Check if the state is valid\n\tif (PlayerState!= nullptr) {\n\t\t// Load the player's state from the save game\n\t\tLoadPlayerState(PlayerState);\n\t}\n}", "CodeBleu_score": 57.637014772554565}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\tASPlayerState* SPState = Cast<ASPlayerState>(NewPlayer->PlayerState);\n\tif (SPState) {\n\t\t// Check if the player's state is valid\n\t\tif (SPState->IsValidState()) {\n\t\t\t// Load the player's state from the current save game\n\t\t\tLoadPlayerState(SPState);\n\t\t}\n\t\telse {\n\t\t\t// The player's state is invalid, so create a new one\n\t\t\tSPState->CreateNewState();\n\t\t}\n\t}\n}", "CodeBleu_score": 49.124507024512894}]}
{"instance_id": "c5bd4c059b71", "generation_result": [{"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t", "CodeBleu_score": 0.989701945674575}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t// Clear any existing save game data\n\tCurrentSaveGame->PlayerData.Empty();\n\n\t// Get the game state\n\tAGameStateBase* GameState = UGameplayStatics::GetGameState(GetWorld());\n\tif (IsValid(GameState)) {\n\t\t// Iterate through each player in the game state\n\t\tfor (int32 i = 0; i < GameState->PlayerArray.Num(); i++) {\n\t\t\tAPlayerState* PlayerState = GameState->PlayerArray[i];\n\t\t\tif (IsValid(PlayerState)) {\n\t\t\t\t// Save player data for each player in the game state\n\t\t\t\tFPlayerSaveData* PlayerData = NewObject<FPlayerSaveData>();\n\t\t\t\tPlayerData->PlayerState = PlayerState;\n\t\t\t\tPlayerData->bResumeAtTransform = false;\n\t\t\t\tPlayerData->Location = PlayerState->GetPawn()->GetActorLocation();\n\t\t\t\tPlayerData->Rotation = PlayerState->GetPawn()->GetActorRotation();\n\t\t\t\tCurrentSaveGame->PlayerData.Add(PlayerState, PlayerData);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Iterate through all actors in the world\n\tfor (TActorIterator<AActor> ActorItr(GetWorld()); ActorItr; ++ActorItr) {\n\t\tAActor* Actor = *ActorItr;\n\t\tif (IsValid(Actor)) {\n\t\t\t// Check if the actor implements the SGameplayInterface interface\n\t\t\tif (Actor->Implements<USGameplayInterface>()) {\n\t\t\t\t// Save actor data for each actor that implements the SGameplayInterface interface\n\t\t\t\tFActorSaveData* ActorData = NewObject<FActorSaveData>();\n\t\t\t\tActorData->Actor = Actor;\n\t\t\t\tActorData->Name = Actor->GetName();\n\t\t\t\tActorData->Transform = Actor->GetActorTransform();\n\t\t\t\tActorData->SerializedData = Actor->Serialize();\n\t\t\t\tCurrentSaveGame->ActorData.Add(ActorData);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Write the save game to a slot\n\tif (UGameplayStatics::SaveGameToSlot(CurrentSaveGame, CurrentSlotName, 0)) {\n\t\t// Broadcast the SaveGameComplete event\n\t\tOnSaveGameComplete.Broadcast(CurrentSlotName, true);\n\t} else {\n\t\t// Broadcast the SaveGameComplete event with an error\n\t\tOnSaveGameComplete.Broadcast(CurrentSlotName, false);\n\t}\n}", "CodeBleu_score": 52.772133811117506}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t", "CodeBleu_score": 0.989701945674575}]}
{"instance_id": "0d7043a0bff0", "generation_result": [{"code": "void FrameworkConfig::draw_themes(){\n\t\tif (m_theme->draw(\\\"Theme\\\")) {\n\t\tif (m_theme->value() >= 0 && m_theme->value() <= 1) {\n\t\t\tImGui::StyleColorsDark();\n\t\t\tImGui::StyleColorsClassic();\n\t\t}\n\t}\n\n\tif (m_font_size->draw(\\\"Font Size\\\")) {\n\t\tif (m_font_size->value() >= 1 && m_font_size->value() <= 100) {\n\t\t\tImGui::GetStyle().ScaleAllSizes(m_font_size->value() / 100.0f);\n\t\t}\n\t}\n}", "CodeBleu_score": 41.46370984208239}, {"code": "void FrameworkConfig::draw_themes(){\n\t\t// Draw the theme selection UI\n\tif (ImGui::BeginCombo(\\\"Theme\\\", m_current_theme->value().c_str())) {\n\t\tfor (auto& theme : m_themes) {\n\t\t\tbool is_selected = (m_current_theme->value() == theme.first);\n\t\t\tif (ImGui::Selectable(theme.first.c_str(), is_selected)) {\n\t\t\t\tm_current_theme->set(theme.first);\n\t\t\t}\n\n\t\t\tif (is_selected) {\n\t\t\t\tImGui::SetItemDefaultFocus();\n\t\t\t}\n\t\t}\n\t\tImGui::EndCombo();\n\t}\n\n\t// Check if the font size has been changed\n\tif (m_font_size->draw(\\\"Font Size\\\")) {\n\t\t// Update the font size in the framework\n\t\tm_font_size->set(m_font_size->value());\n\t}\n}", "CodeBleu_score": 41.77998085354804}, {"code": "void FrameworkConfig::draw_themes(){\n\t\tImGui::Text(\\\"Theme\\\");\n\tImGui::Separator();\n\tImGui::PushItemWidth(120);\n\tif (ImGui::BeginCombo(\\\"\\\", m_theme->value().c_str())) {\n\t\tfor (auto& theme : m_themes) {\n\t\t\tbool is_selected = (theme == m_theme->value());\n\t\t\tif (ImGui::Selectable(theme.c_str(), is_selected)) {\n\t\t\t\tm_theme->set(theme);\n\t\t\t}\n\n\t\t\tif (is_selected) {\n\t\t\t\tImGui::SetItemDefaultFocus();\n\t\t\t}\n\t\t}\n\t\tImGui::EndCombo();\n\t}\n\tImGui::PopItemWidth();\n\n\tImGui::Text(\\\"Font Size\\\");\n\tImGui::SameLine();\n\tif (ImGui::DragFloat(\\\"\\\", &m_font_size->value(), 0.1f, 6.0f, 24.0f)) {\n\t\tm_font_size->set(m_font_size->value());\n\t}\n\n\tImGui::PushItemWidth(120);\n\tif (ImGui::BeginCombo(\\\"\\\", m_font_family->value().c_str())) {\n\t\tfor (auto& font_family : m_font_families) {\n\t\t\tbool is_selected = (font_family == m_font_family->value());\n\t\t\tif (ImGui::Selectable(font_family.c_str(), is_selected)) {\n\t\t\t\tm_font_family->set(font_family);\n\t\t\t}\n\n\t\t\tif (is_selected) {\n\t\t\t\tImGui::SetItemDefaultFocus();\n\t\t\t}\n\t\t}\n\t\tImGui::EndCombo();\n\t}\n\tImGui::PopItemWidth();\n}", "CodeBleu_score": 39.7217859475712}]}
{"instance_id": "e7f81d1dee95", "generation_result": [{"code": "void FrameworkConfig::draw_main() {\n\t", "CodeBleu_score": 2.3096479186355663}, {"code": "void FrameworkConfig::draw_main() {\n\t\tImGui::Text(\"Main\");\n\tImGui::Checkbox(\"Menu Key\", &menu_key);\n\tImGui::Checkbox(\"Show Cursor\", &show_cursor);\n\tImGui::Checkbox(\"Remember Menu State\", &remember_menu_state);\n\tImGui::Checkbox(\"L3 + R3 Toggle\", &l3_r3_toggle);\n\tImGui::Checkbox(\"Always Show Cursor\", &always_show_cursor);\n\tImGui::Checkbox(\"Log Level\", &log_level);\n\tif (log_level) {\n\t\tImGui::SameLine();\n\t\tImGui::InputInt(\"##log_level\", &log_level_int);\n\t\tif (log_level_int >= 0 && log_level_int < 5) {\n\t\t\tspdlog::set_level(static_cast<spdlog::level::level_enum>(log_level_int));\n\t\t}\n\t}\n}", "CodeBleu_score": 49.0420624932456}, {"code": "void FrameworkConfig::draw_main() {\n\t\tImGui::SetNextWindowSize(ImVec2(200, 150), ImGuiCond_FirstUseEver);\n\tif (ImGui::Begin(\"Framework Config\", &m_show_framework_config, ImGuiWindowFlags_NoCollapse)) {\n\t\tif (ImGui::CollapsingHeader(\"Main Settings\")) {\n\t\t\tImGui::Text(\"Menu Key\");\n\t\t\tImGui::SameLine();\n\t\t\tImGui::PushItemWidth(100);\n\t\t\tImGui::Combo(\"##menu_key\", &m_menu_key, \"F1\\0F2\\0F3\\0F4\\0F5\\0F6\\0F7\\0F8\\0F9\\0F10\\0F11\\0F12\\0~\");\n\t\t\tImGui::PopItemWidth();\n\t\t\tImGui::Text(\"Show Cursor Key\");\n\t\t\tImGui::SameLine();\n\t\t\tImGui::PushItemWidth(100);\n\t\t\tImGui::Combo(\"##show_cursor_key\", &m_show_cursor_key, \"F1\\0F2\\0F3\\0F4\\0F5\\0F6\\0F7\\0F8\\0F9\\0F10\\0F11\\0F12\\0~\");\n\t\t\tImGui::PopItemWidth();\n\t\t\tImGui::Text(\"Remember Menu State\");\n\t\t\tImGui::SameLine();\n\t\t\tImGui::Checkbox(\"##remember_menu_state\", &m_remember_menu_state);\n\t\t\tImGui::Text(\"L3 + R3 Toggle\");\n\t\t\tImGui::SameLine();\n\t\t\tImGui::Checkbox(\"##l3_r3_toggle\", &m_l3_r3_toggle);\n\t\t\tImGui::Text(\"Always Show Cursor\");\n\t\t\tImGui::SameLine();\n\t\t\tImGui::Checkbox(\"##always_show_cursor\", &m_always_show_cursor);\n\t\t\tImGui::Text(\"Log Level\");\n\t\t\tImGui::SameLine();\n\t\t\tImGui::PushItemWidth(100);\n\t\t\tImGui::Combo(\"##log_level\", &m_log_level, \"Trace\\0Debug\\0Info\\0Warn\\0Error\\0Critical\\0Off\");\n\t\t\tImGui::PopItemWidth();\n\t\t}\n\t\tImGui::End();\n\t}\n}", "CodeBleu_score": 43.246328627682026}]}
{"instance_id": "83fa7f401579", "generation_result": [{"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\t// Check if the file exists\n\tif(!FPaths::FileExists( OSMFilePath ) ) {\n\t\tUE_LOG( LogOpenStreetMap, Error, TEXT( \"File does not exist: %s\" ), *OSMFilePath );\n\t\treturn false;\n\t}\n\n\t// If we're not using a text buffer, load the file\n\tif(!bIsFilePathActuallyTextBuffer ) {\n\t\t// Open the file\n\t\tTSharedPtr<IFileHandle> FileHandle = IFileManager::Get().OpenRead(*OSMFilePath);\n\t\tif(!FileHandle.IsValid() ) {\n\t\t\tUE_LOG( LogOpenStreetMap, Error, TEXT( \"Failed to open file: %s\" ), *OSMFilePath );\n\t\t\treturn false;\n\t\t}\n\n\t\t// Read the file\n\t\tTArray<uint8> FileContents;\n\t\tint32 BytesRead = FileHandle->Read( FileContents );\n\t\tif( BytesRead <= 0 ) {\n\t\t\tUE_LOG( LogOpenStreetMap, Error, TEXT( \"Failed to read file: %s\" ), *OSMFilePath );\n\t\t\treturn false;\n\t\t}\n\n\t\t// Parse the file\n\t\treturn ParseOpenStreetMapFile( FileContents, FeedbackContext );\n\t}\n\n\t// If we're using a text buffer, parse the text\n\telse {\n\t\t// Parse the text\n\t\treturn ParseOpenStreetMapFile( OSMFilePath, FeedbackContext );\n\t}\n}", "CodeBleu_score": 44.69810623727247}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\t// Open the file\n\tif(!bIsFilePathActuallyTextBuffer ) {\n\t\tif(!FPlatformFileManager::Get().GetPlatformFile().FileExists(*OSMFilePath) ) {\n\t\t\tUE_LOG( LogOSM, Error, TEXT(\"Could not find file %s\"), *OSMFilePath );\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// Open the file\n\tFFileHandle* FileHandle = nullptr;\n\tif( bIsFilePathActuallyTextBuffer ) {\n\t\tFileHandle = new FFileHandle( OSMFilePath );\n\t} else {\n\t\tFileHandle = new FFileHandle( *OSMFilePath );\n\t}\n\n\t// Read the file\n\tint64 FileSize = 0;\n\tif( FileHandle->Size( FileSize ) ) {\n\t\tTArray<uint8> FileData;\n\t\tFileData.AddUninitialized( FileSize );\n\t\tFileHandle->Read( FileData.GetData(), FileSize );\n\n\t\t// Parse the file\n\t\tif( ParseOpenStreetMapFile( FileData, FeedbackContext ) ) {\n\t\t\t// Calculate the average latitude and longitude\n\t\t\tCalculateAverageLatitudeAndLongitude();\n\n\t\t\t// Clean up\n\t\t\tdelete FileHandle;\n\t\t\treturn true;\n\t\t} else {\n\t\t\t// Clean up\n\t\t\tdelete FileHandle;\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\t// Clean up\n\t\tdelete FileHandle;\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 39.41604115817244}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t", "CodeBleu_score": 4.471675108827625}]}
{"instance_id": "7349d775edf6", "generation_result": [{"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tAStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor);\n\tif (StreetMapActor!= nullptr) {\n\t\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\t\tif (StreetMapComponent!= nullptr) {\n\t\t\tStreetMapComponent->SetStreetMapAsset(Cast<UStreetMap>(Asset));\n\t\t}\n\t}\n}", "CodeBleu_score": 69.67298888234819}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tAStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor);\n\tif (StreetMapActor) {\n\t\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\t\tif (StreetMapComponent) {\n\t\t\tStreetMapComponent->SetStreetMapAsset(CastChecked<UStreetMap>(Asset));\n\t\t}\n\t}\n}", "CodeBleu_score": 66.75321373078108}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\tif (NewActor && Asset && Asset->IsA(UStreetMap::StaticClass())) {\n\t\tAStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor);\n\t\tif (StreetMapActor) {\n\t\t\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\t\t\tif (StreetMapComponent) {\n\t\t\t\tStreetMapComponent->SetStreetMapAsset(Cast<UStreetMap>(Asset));\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 70.75436081472955}]}
{"instance_id": "f160ac6d0353", "generation_result": [{"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tif (SelectedStreetMapComponent!= nullptr) {\n\t\tSelectedStreetMapComponent->BuildMesh();\n\t}\n\n\treturn FReply::Handled();\n}", "CodeBleu_score": 68.84149225122962}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tif (SelectedStreetMapComponent!= nullptr) {\n\t\tSelectedStreetMapComponent->BuildMesh();\n\t\tRefreshDetails();\n\t}\n\n\treturn FReply::Handled();\n}", "CodeBleu_score": 88.65636254352843}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tif (SelectedStreetMapComponent!= nullptr) {\n\t\tSelectedStreetMapComponent->BuildMesh();\n\t\tRefreshDetails();\n\t}\n\n\treturn FReply::Handled();\n}", "CodeBleu_score": 88.65636254352843}]}
{"instance_id": "b23f1f2b29fa", "generation_result": [{"code": "void FStreetMapImportingModule::StartupModule(){\n\t\t// Register the StreetMap asset type with the asset tools\n\tFAssetToolsModule& AssetToolsModule = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\");\n\tStreetMapAssetTypeActions = MakeShareable(new FStreetMapAssetTypeActions(AssetToolsModule));\n\tAssetToolsModule.RegisterAssetTypeActions(StreetMapAssetTypeActions.ToSharedRef());\n\n\t// Initialize the StreetMap style\n\tFStreetMapStyle::Initialize();\n\n\t// Register a custom class layout for the StreetMapComponent in the property editor module\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout(UStreetMapComponent::StaticClass()->GetFName(), FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n\n\t// Notify the property editor module that the customization module has changed\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 65.75894536241904}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t\tFAssetToolsModule& AssetToolsModule = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\");\n\tStreetMapAssetTypeActions = MakeShareable(new FStreetMapAssetTypeActions());\n\tAssetToolsModule.Get().RegisterAssetTypeActions(StreetMapAssetTypeActions.ToSharedRef());\n\n\tFStreetMapStyle::Initialize();\n\tFModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\").RegisterCustomClassLayout(\"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n}", "CodeBleu_score": 59.12303140844679}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t\tFStreetMapStyle::Initialize();\n\n\tStreetMapAssetTypeActions = MakeShareable(new FStreetMapAssetTypeActions);\n\tFAssetToolsModule& AssetToolsModule = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\");\n\tAssetToolsModule.RegisterAssetTypeActions(StreetMapAssetTypeActions.ToSharedRef());\n\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout(\"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 65.45218237445037}]}
{"instance_id": "1da549fe84e3", "generation_result": [{"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\t// If the mesh is not valid, return nullptr.\n\tif (!IsValid(StreetMap)) {\n\t\treturn nullptr;\n\t}\n\n\t// Create a new scene proxy.\n\tFStreetMapSceneProxy* SceneProxy = new FStreetMapSceneProxy(this);\n\n\t// Initialize the scene proxy with the component's vertices and indices.\n\tSceneProxy->InitResources();\n\n\t// Return the scene proxy.\n\treturn SceneProxy;\n}", "CodeBleu_score": 43.22927424292111}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\t// We don't want to create a scene proxy for a component that doesn't have a valid mesh.\n\n\tif (!IsValid(StreetMap)) {\n\t\treturn nullptr;\n\t}\n\n\t// Create a new scene proxy for the street map component.\n\n\tFStreetMapSceneProxy* StreetMapSceneProxy = new FStreetMapSceneProxy(this);\n\n\t// Initialize the scene proxy with the component's vertices and indices.\n\n\tStreetMapSceneProxy->InitResources();\n\n\treturn StreetMapSceneProxy;\n}", "CodeBleu_score": 48.44735427208039}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\t// Make sure the component has a valid mesh.\n\tif (!Mesh) {\n\t\treturn nullptr;\n\t}\n\n\t// Create a new scene proxy.\n\tFStreetMapSceneProxy* SceneProxy = new FStreetMapSceneProxy(this);\n\n\t// Initialize the scene proxy with the component's vertices and indices.\n\tSceneProxy->InitResources();\n\n\t// Return the scene proxy.\n\treturn SceneProxy;\n}", "CodeBleu_score": 41.78082839948598}]}
{"instance_id": "d0ee3b2e023e", "generation_result": [{"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\n\tTArray<FInputActionKeyMapping> InputIDs;\n\tInputIDs.Add(FInputActionKeyMapping(\"Ability01\", EKeys::LeftMouseButton));\n\tAbilities->BindAbilityActivationToInputIDs(ServerHandle, InputIDs);\n}", "CodeBleu_score": 63.63064337464077}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\n\tTArray<FInputActionKeyMapping> InputIDs;\n\tInputIDs.Add(FInputActionKeyMapping(\"Ability01\", EKeys::LeftMouseButton));\n\tInputIDs.Add(FInputActionKeyMapping(\"Ability01\", EKeys::Gamepad_FaceButton_Bottom));\n\tInputIDs.Add(FInputActionKeyMapping(\"Ability01\", EKeys::Gamepad_RightTrigger));\n\tInputIDs.Add(FInputActionKeyMapping(\"Ability01\", EKeys::Gamepad_LeftTrigger));\n\tInputIDs.Add(FInputActionKeyMapping(\"Ability01\", EKeys::Gamepad_LeftShoulder));\n\tInputIDs.Add(FInputActionKeyMapping(\"Ability01\", EKeys::Gamepad_RightShoulder));\n\tInputIDs.Add(FInputActionKeyMapping(\"Ability01\", EKeys::Gamepad_LeftStick_Up));\n\tInputIDs.Add(FInputActionKeyMapping(\"Ability01\", EKeys::Gamepad_LeftStick_Down));\n\tInputIDs.Add(FInputActionKeyMapping(\"Ability01\", EKeys::Gamepad_LeftStick_Right));\n\tInputIDs.Add(FInputActionKeyMapping(\"Ability01\", EKeys::Gamepad_LeftStick_Left));\n\tInputIDs.Add(FInputActionKeyMapping(\"Ability01\", EKeys::Gamepad_RightStick_Up));\n\tInputIDs.Add(FInputActionKeyMapping(\"Ability01\", EKeys::Gamepad_RightStick_Down));\n\tInputIDs.Add(FInputActionKeyMapping(\"Ability01\", EKeys::Gamepad_RightStick_Right));\n\tInputIDs.Add(FInputActionKeyMapping(\"Ability01\", EKeys::Gamepad_RightStick_Left));\n\n\tAbilities->BindAbility(ServerHandle, InputIDs);\n}", "CodeBleu_score": 51.790062561820015}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t", "CodeBleu_score": 6.2285882815553455}]}
{"instance_id": "e62f1b2cd4bd", "generation_result": [{"code": "void AARCharacter::MoveForward(float Value){\n\t\tif ((Controller!= NULL) && (Value!= 0.0f)) {\n\t\t// find out which way is forward\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// get forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 91.7974804621021}, {"code": "void AARCharacter::MoveForward(float Value){\n\t\tif ((Controller!= NULL) && (Value!= 0.0f)) {\n\t\t// find out which way is forward\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// get forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 91.7974804621021}, {"code": "void AARCharacter::MoveForward(float Value){\n\t\tif ((Controller!= NULL) && (Value!= 0.0f)) {\n\t\t// find out which way is forward\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// get forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 91.7974804621021}]}
{"instance_id": "a77cdc67ee00", "generation_result": [{"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (!GetEquipedMainWeapon()->GetChildActor())\n\t\treturn GetMesh()->GetSocketLocation(Socket);\n\n\treturn GetMainWeapon<AARWeaponBase>()->GetMesh()->GetSocketLocation(Socket);\n}", "CodeBleu_score": 45.4177862619207}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (!GetEquipedMainWeapon()->GetChildActor()) {\n\t\treturn GetMesh()->GetSocketLocation(Socket);\n\t}\n\n\treturn GetMainWeapon<AARWeaponBase>()->GetMesh()->GetSocketLocation(Socket);\n}", "CodeBleu_score": 45.44626169601245}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (!GetEquipedMainWeapon()->GetChildActor())\n\t\treturn GetMesh()->GetSocketLocation(Socket);\n\n\treturn GetMainWeapon<AARWeaponBase>()->GetMesh()->GetSocketLocation(Socket);\n}", "CodeBleu_score": 45.4177862619207}]}
{"instance_id": "f021203f736a", "generation_result": [{"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tSpawnedEnemies.Remove(InEnemy);\n\n\tif (SpawnedEnemies.Num() < MinRespawn) {\n\t\tFTimerDelegate Delegate = FTimerDelegate::CreateUObject(this, &AAREnemySpawner::HandleSpawn);\n\t\tFTimerManager& Timer = GetWorld()->GetTimerManager();\n\t\tTimer.SetTimer(SpawnerHandle, Delegate, TimeBetweenSpawns, true);\n\t}\n}", "CodeBleu_score": 51.5000385270179}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tSpawnedEnemies.Remove(InEnemy);\n\n\tif (SpawnedEnemies.Num() < MinRespawn) {\n\t\tFTimerDelegate Delegate = FTimerDelegate::CreateUObject(this, &AAREnemySpawner::HandleSpawn);\n\n\t\tFTimerManager& Timer = GetWorld()->GetTimerManager();\n\t\tTimer.SetTimer(SpawnerHandle, Delegate, TimeBetweenSpawns, true);\n\t}\n}", "CodeBleu_score": 51.5000385270179}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tSpawnedEnemies.Remove(InEnemy);\n\n\tif (SpawnedEnemies.Num() < MinRespawn) {\n\t\tSetupSpawner();\n\t}\n}", "CodeBleu_score": 65.51318976441756}]}
{"instance_id": "dbab72cb539f", "generation_result": [{"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\tFString Result = Super::ApproveLogin(Options);\n\tTArray<FString> Params;\n\tOptions.ParseIntoArray(&Params, TEXT(\"&\"), true);\n\tfor (FString& Param : Params) {\n\t\tif (Param.StartsWith(TEXT(\"PlayerId=\"))) {\n\t\t\tPlayerId = Param.RightChop(9);\n\t\t}\n\t}\n\treturn Result;\n}", "CodeBleu_score": 52.2502038483106}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\tFString Result = Super::ApproveLogin(Options);\n\tTArray<FString> Params;\n\tUGameplayStatics::ParseURL(Options, nullptr, &Params);\n\tFString PlayerId;\n\tfor (FString& Param : Params) {\n\t\tif (Param.StartsWith(\"PlayerId=\")) {\n\t\t\tPlayerId = Param.RightChop(9);\n\t\t}\n\t}\n\tif (PlayerId.Len() > 0) {\n\t\tUARGameInstance* GameInstance = Cast<UARGameInstance>(GetGameInstance());\n\t\tif (GameInstance) {\n\t\t\tGameInstance->SetPlayerId(PlayerId);\n\t\t}\n\t}\n\treturn Result;\n}", "CodeBleu_score": 55.647398037141585}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t", "CodeBleu_score": 4.493996550900141}]}
{"instance_id": "85ea02df92a5", "generation_result": [{"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tFString username = UsernameInput->GetText().ToString();\n\tFString displayName = DisplayNameInput->GetText().ToString();\n\tFString password = PasswordInput->GetText().ToString();\n\n\tif (username.IsEmpty()) {\n\t\tUARGameInstance::GetInstance()->ShowMessage(\"Username is empty\");\n\t\treturn;\n\t}\n\tif (displayName.IsEmpty()) {\n\t\tUARGameInstance::GetInstance()->ShowMessage(\"Display name is empty\");\n\t\treturn;\n\t}\n\tif (password.IsEmpty()) {\n\t\tUARGameInstance::GetInstance()->ShowMessage(\"Password is empty\");\n\t\treturn;\n\t}\n\n\tRegisterButton->SetIsEnabled(false);\n\tUARGameInstance::GetInstance()->RegisterNewPlayer(username, displayName, password);\n}", "CodeBleu_score": 45.21268332732776}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tFString username = UsernameField->GetText().ToString();\n\tFString displayName = DisplayNameField->GetText().ToString();\n\tFString password = PasswordField->GetText().ToString();\n\n\tif (username.IsEmpty() || displayName.IsEmpty() || password.IsEmpty()) {\n\t\tFText message = FText::FromString(\"Please fill out all fields.\");\n\t\tFText title = FText::FromString(\"Invalid Fields\");\n\t\tFText buttonText = FText::FromString(\"OK\");\n\n\t\tFMessageDialog::Open(EAppMsgType::Ok, message, &title, &buttonText);\n\t} else {\n\t\tRegisterButton->SetIsEnabled(false);\n\t\tRegisterButton->SetVisibility(ESlateVisibility::Collapsed);\n\n\t\tUARGameInstance* gameInstance = Cast<UARGameInstance>(GetGameInstance());\n\t\tgameInstance->RegisterNewPlayer(username, displayName, password);\n\t}\n}", "CodeBleu_score": 54.88136433796564}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tFString username = UsernameField->GetText().ToString();\n\tFString displayName = DisplayNameField->GetText().ToString();\n\tFString password = PasswordField->GetText().ToString();\n\n\tif (username.IsEmpty()) {\n\t\tFMessageDialog::Open(EAppMsgType::Ok, FText::FromString(\"Please enter a username.\"));\n\t\treturn;\n\t}\n\tif (displayName.IsEmpty()) {\n\t\tFMessageDialog::Open(EAppMsgType::Ok, FText::FromString(\"Please enter a display name.\"));\n\t\treturn;\n\t}\n\tif (password.IsEmpty()) {\n\t\tFMessageDialog::Open(EAppMsgType::Ok, FText::FromString(\"Please enter a password.\"));\n\t\treturn;\n\t}\n\n\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\tRegisterButton->SetIsEnabled(false);\n\n\tUARGameInstance* gameInstance = Cast<UARGameInstance>(GetWorld()->GetGameInstance());\n\tgameInstance->RegisterNewPlayer(username, displayName, password);\n}", "CodeBleu_score": 58.41604346333838}]}
{"instance_id": "b33bb5886dd9", "generation_result": [{"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\tif (InMod.Target) {\n\t\tFVector2D ScreenLoc;\n\t\tUGameplayStatics::ProjectWorldToScreen(ARPC, InMod.Target->GetActorLocation(), ScreenLoc, false);\n\t\tFloatingCombatText->SetPositionInViewport(ScreenLoc, true);\n\t\tFloatingCombatText->SetText(FString::FromInt(InMod.Delta));\n\t}\n}", "CodeBleu_score": 32.55964917190412}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\tif (EnemyHitResult.GetActor()) {\n\t\tAActor* Target = EnemyHitResult.GetActor();\n\t\tFVector ActorLocation = EnemyHitResult.GetActor()->GetActorLocation();\n\t\tFVector2D ScreeLoc;\n\t\tUGameplayStatics::ProjectWorldToScreen(ARPC, ActorLocation, ScreeLoc, false);\n\n\t\tfloat Distance = FVector::Dist(ActorLocation, ARCharacter->GetActorLocation());\n\t\tDistance = DistanceScaleEnemyBar / Distance;\n\t\tDistance = FMath::Clamp<float>(Distance, 0.7, 1);\n\n\t\tfloat ScreenSize = ComputeBoundsScreenSize(Target);\n\t\tFVector Extent = Target->GetComponentsBoundingBox().GetExtent();\n\n\t\tfloat OffsetY = (Extent.Z * 7) * ScreenSize;\n\t\tScreeLoc.Y = ScreeLoc.Y - OffsetY;\n\n\t\tFloatingCombatText->SetPositionInViewport(ScreeLoc, true);\n\t\tFloatingCombatText->SetRenderScale(FVector2D(Distance, Distance));\n\t\tFloatingCombatText->SetText(FString::FromInt(InMod.NewValue));\n\t\tFloatingCombatText->SetVisibility(ESlateVisibility::HitTestInvisible);\n\t\tFloatingCombatText->Play();\n\t}\n}", "CodeBleu_score": 44.02409049430546}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\tif (EnemyHitResult.GetActor()) {\n\t\tAActor* Target = EnemyHitResult.GetActor();\n\t\tFVector ActorLocation = EnemyHitResult.GetActor()->GetActorLocation();\n\t\tFVector2D ScreeLoc;\n\n\t\tUGameplayStatics::ProjectWorldToScreen(ARPC, ActorLocation, ScreeLoc, false);\n\n\t\tfloat Distance = FVector::Dist(ActorLocation, ARCharacter->GetActorLocation());\n\t\tDistance = DistanceScaleEnemyBar / Distance;\n\t\tDistance = FMath::Clamp<float>(Distance, 0.7, 1);\n\n\t\tfloat ScreenSize = ComputeBoundsScreenSize(Target);\n\t\tFVector Extent = Target->GetComponentsBoundingBox().GetExtent();\n\n\t\tfloat OffsetY = (Extent.Z * 7) * ScreenSize;\n\t\tScreeLoc.Y = ScreeLoc.Y - OffsetY;\n\n\t\tFloatingCombatText->SetPositionInViewport(ScreeLoc, true);\n\n\t\tFVector2D NewScale(Distance, Distance);\n\t\tFloatingCombatText->SetRenderScale(NewScale);\n\n\t\tif (IAFAbilityInterface* TargetInt = Cast<IAFAbilityInterface>(Target)) {\n\t\t\tUARCharacterAttributes* Attributes = TargetInt->GetAttributesTyped<UARCharacterAttributes>();\n\t\t\tif (Attributes) {\n\t\t\t\tfloat Percent = Attributes->Health.GetCurrentValue() / Attributes->Health.GetFinalValue();\n\t\t\t\tFloatingCombatText->UpdateHealth(Percent);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 48.36970874038011}]}
{"instance_id": "177d36e7e076", "generation_result": [{"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (AbilityInstance.IsValid()) {\n\t\tUARWeaponInventoryComponent* WeaponInventoryComponent = Cast<UARWeaponInventoryComponent>(AbilityInstance->GetOwningComponent());\n\t\tif (WeaponInventoryComponent.IsValid()) {\n\t\t\tUARCharacter* Character = WeaponInventoryComponent->GetCharacter();\n\t\t\tif (Character && Character->HasAuthority()) {\n\t\t\t\tUARMagazineUpgradeEffect* MagazineUpgradeEffect = NewObject<UARMagazineUpgradeEffect>();\n\t\t\t\tMagazineUpgradeEffect->CopyFrom(InMagazineUpgrade->GetUpgradeEffect());\n\t\t\t\tMagazineUpgradeEffect->SetUpgradeValue(InMagazineUpgrade->GetUpgradeValue());\n\t\t\t\tAbilityInstance->AddMagazineUpgrade(MagazineUpgradeEffect);\n\t\t\t}\n\t\t}\n\t}\n\n\tOnMagazineUpdateAdded();\n}", "CodeBleu_score": 49.34126331190931}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (AbilityInstance) {\n\t\tUARWeaponInventoryComponent* WeaponComponent = Cast<UARWeaponInventoryComponent>(AbilityInstance->GetInventoryComponent());\n\t\tif (WeaponComponent) {\n\t\t\tAARCharacter* Character = WeaponComponent->GetCharacterOwner();\n\t\t\tif (Character) {\n\t\t\t\tif (Character->HasAuthority()) {\n\t\t\t\t\tUARMagazineUpgradeEffect* MagazineUpgradeEffect = NewObject<UARMagazineUpgradeEffect>(this, InMagazineUpgrade->GetMagazineUpgradeEffect());\n\t\t\t\t\tMagazineUpgradeEffect->SetMagazineUpgradeItem(InMagazineUpgrade);\n\t\t\t\t\tMagazineUpgradeEffect->SetMagazineUpgradeValue(InMagazineUpgrade->GetMagazineUpgradeValue());\n\t\t\t\t\tAbilityInstance->AddEffect(MagazineUpgradeEffect);\n\t\t\t\t}\n\n\t\t\t\tUARMagazineUpgradeItem* DuplicateMagazineUpgrade = Cast<UARMagazineUpgradeItem>(InMagazineUpgrade->Duplicate());\n\t\t\t\tDuplicateMagazineUpgrade->SetMagazineUpgradeValue(InMagazineUpgrade->GetMagazineUpgradeValue());\n\t\t\t\tMagazineUpgrades.Add(DuplicateMagazineUpgrade);\n\t\t\t}\n\t\t}\n\t}\n\n\tOnMagazineUpdateAdded.Broadcast(InMagazineUpgrade);\n}", "CodeBleu_score": 47.10219513232735}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (!AbilityInstance) {\n\t\treturn;\n\t}\n\n\tUARWeaponInventoryComponent* WeaponInventoryComponent = Cast<UARWeaponInventoryComponent>(AbilityInstance->GetOwningComponent());\n\tif (!WeaponInventoryComponent) {\n\t\treturn;\n\t}\n\n\tUARCharacter* OwningCharacter = Cast<UARCharacter>(WeaponInventoryComponent->GetOwner());\n\tif (!OwningCharacter) {\n\t\treturn;\n\t}\n\n\tUARMagazineUpgradeItem* DuplicatedMagazineUpgrade = Cast<UARMagazineUpgradeItem>(InMagazineUpgrade->Duplicate());\n\tif (!DuplicatedMagazineUpgrade) {\n\t\treturn;\n\t}\n\n\tif (OwningCharacter->HasAuthority()) {\n\t\tDuplicatedMagazineUpgrade->SetMagazineUpgradeValue(GeneratedAttributes.MagazineUpgradeValue);\n\t\tDuplicatedMagazineUpgrade->ApplyUpgradeEffect(AbilityInstance);\n\t}\n\n\tMagazineUpgrades.Add(DuplicatedMagazineUpgrade);\n\tOnMagazineUpdateAdded.Broadcast(DuplicatedMagazineUpgrade);\n}", "CodeBleu_score": 54.77889973938333}]}
{"instance_id": "404276da398b", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t (AARCharacter* Character = Cast<AARCharacter>(POwner)) {\n\t\tUAFAbilityComponent* AbilityComp = Character->GetAbilityComp();\n\t\tif (!AbilityComp)\n\t\t\treturn;\n\n\t\tTSubclassOf<UARWeaponAbilityBase> AbilityClass = InAbilityTag.LoadSynchronous();\n\t\tUARWeaponAbilityBase* Ability = Cast<UARWeaponAbilityBase>(AbilityClass->GetDefaultObject());\n\t\tif (Ability) {\n\t\t\tAbility->SetAbilityToItem(ServerWeaponAbilities[LocalIndex]);\n\t\t\tAbilityComp->NativeAddAbility(Ability, ServerWeaponAbilities[LocalIndex]);\n\t\t}\n\t}\n}", "CodeBleu_score": 59.07935464189459}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t (AARCharacter* Character = Cast<AARCharacter>(POwner)) {\n\t\tUAFAbilityComponent* AbilityComp = Character->GetAbilityComp();\n\t\tif (!AbilityComp)\n\t\t\treturn;\n\t\tFAFAbilitySpecHandle AbilityHandle = ServerWeaponAbilities[LocalIndex];\n\t\tif (!AbilityHandle.IsValid())\n\t\t\treturn;\n\t\tFAFAbilitySpec Ability = AbilityComp->GetAbility(AbilityHandle);\n\t\tif (!Ability.IsValid())\n\t\t\treturn;\n\t\tUARWeaponAbilityBase* AbilityBase = Cast<UARWeaponAbilityBase>(Ability.Ability);\n\t\tif (!AbilityBase)\n\t\t\treturn;\n\t\tAbilityBase->SetAbilityToItem(InAbilityTag);\n\t}\n}", "CodeBleu_score": 54.868643818868165}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t (AARCharacter* Character = Cast<AARCharacter>(POwner)) {\n\t\tUAFAbilityComponent* AbilityComp = Character->GetAbilityComp();\n\t\tif (!AbilityComp)\n\t\t\treturn;\n\t\tFAFOnAbilityReady Del = FAFOnAbilityReady::CreateUObject(this, &UARWeaponInventoryComponent::OnAbilityAdded);\n\t\tAbilityComp->AddOnAbilityReadyDelegate(InAbilityTag->AbilityHandle, Del);\n\t\tAbilityComp->NativeAddAbility(InAbilityTag, InAbilityTag->AbilityHandle);\n\t\tClientWeaponAbilities[LocalIndex] = InAbilityTag->AbilityHandle;\n\t}\n}", "CodeBleu_score": 55.86078432904279}]}
{"instance_id": "2e97aab98981", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t (AARCharacter* Character = Cast<AARCharacter>(POwner)) {\n\t\tFARWeaponRPC RPC;\n\t\tRPC.Weapon = nullptr;\n\t\tRPC.Position = FVector(0, 0, 0);\n\t\tRPC.Rotation = FRotator(0, 0, 0);\n\t\tRPC.bIsEquipped = false;\n\t\tRPC.bIsEquipping = false;\n\t\tRPC.bIsEquippedOnServer = false;\n\t\tRPC.bIsEquippedOnClient = false;\n\n\t\tSetWeapon(RPC, GroupToComponent[LocalIndex]);\n\n\t\tif (LocalIndex == CurrentWeaponIndex) {\n\t\t\tCharacter->UnequipWeapon(CurrentWeaponIndex);\n\t\t}\n\t}\n}", "CodeBleu_score": 44.57053041329192}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t (AARCharacter* Character = Cast<AARCharacter>(POwner)) {\n\t\tFARWeaponRPC RPC;\n\t\tRPC.Weapon = nullptr;\n\t\tRPC.Position = FVector(0, 0, 0);\n\t\tRPC.Rotation = FRotator(0, 0, 0);\n\n\t\tRPC.NetIndex = LocalIndex;\n\t\tRPC.NetOwner = Character->GetNetGUID();\n\t\tRPC.NetOwnerController = Character->GetController()->GetNetGUID();\n\n\t\tCharacter->Server_OnWeaponRemoved(RPC);\n\t}\n\n\tif (LocalIndex == CurrentWeaponIndex) {\n\t\t//Character->Server_OnUnequipWeapon();\n\t}\n\n\tSetWeapon(RPC, GroupToComponent[LocalIndex]);\n}", "CodeBleu_score": 46.06011193476731}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t", "CodeBleu_score": 3.123243374748474}]}
{"instance_id": "13cc35e5ecac", "generation_result": [{"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\tif (!IsRunningDedicatedServer() && FSlateApplication::IsInitialized()) {\n\t\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\t\tif (IsMoviePlayerEnabled()) {\n\t\t\tGetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n\t\t}\n\n\t\t// If PreloadBackgroundImages option is check, unload all background images from memory\n\t\tif (Settings->bPreloadBackgroundImages) {\n\t\t\tUnloadBackgroundImages();\n\t\t}\n\n\t\t// Reset the startup screen, the PreSetupLoadingScreen callback will be called\n\t\tbIsStartupLoadingScreen = false;\n\t\tSetupLoadingScreen(Settings->StartupLoadingScreen);\n\t}\n}", "CodeBleu_score": 30.47664210806068}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t// This function may be called during shutdown to clean up your module.  For modules that support dynamic reloading,\n\t// we call this function before unloading the module.\n\tif (!IsRunningDedicatedServer() && FSlateApplication::IsInitialized()) {\n\t\tGetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n\t}\n}", "CodeBleu_score": 47.96284027596869}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\tif (!IsRunningDedicatedServer() && FSlateApplication::IsInitialized()) {\n\t\tif (IsMoviePlayerEnabled()) {\n\t\t\tGetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 44.64723971823005}]}
{"instance_id": "2ee3ac60a8f3", "generation_result": [{"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\tE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"PreSetupLoadingScreen\"));\n\n\tif (IsMoviePlayerEnabled()) {\n\t\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\t\tbIsStartupLoadingScreen = false;\n\t\tSetupLoadingScreen(Settings->DefaultLoadingScreen);\n\t}\n}", "CodeBleu_score": 64.09592359943353}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\tE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"PreSetupLoadingScreen\"));\n\n\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\tif (Settings->bEnabled) {\n\t\tbIsStartupLoadingScreen = false;\n\t\tSetupLoadingScreen(Settings->DefaultLoadingScreen);\n\t}\n}", "CodeBleu_score": 60.42910180842759}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\tE_LOG(LogTemp, Warning, TEXT(\"PreSetupLoadingScreen\"));\n\tif (GetDefault<ULoadingScreenSettings>()->bEnableLoadingScreen) {\n\t\tbIsStartupLoadingScreen = false;\n\t\tSetupLoadingScreen(GetDefault<ULoadingScreenSettings>()->DefaultLoadingScreen);\n\t}\n}", "CodeBleu_score": 44.121069619385636}]}
{"instance_id": "c095588f550c", "generation_result": [{"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t Remove all existing background images\n\tStartupBackgroundImages.Empty();\n\tDefaultBackgroundImages.Empty();\n\n\t// Retrieve the loading screen settings\n\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\t// Load and add images for both the startup and default loading screens\n\tfor (int32 i = 0; i < Settings->StartupBackgroundImages.Num(); ++i) {\n\t\tUTexture2D* Texture = LoadObject<UTexture2D>(nullptr, *Settings->StartupBackgroundImages[i].FilePath);\n\t\tif (Texture) {\n\t\t\tStartupBackgroundImages.Add(Texture);\n\t\t}\n\t}\n\n\tfor (int32 i = 0; i < Settings->DefaultBackgroundImages.Num(); ++i) {\n\t\tUTexture2D* Texture = LoadObject<UTexture2D>(nullptr, *Settings->DefaultBackgroundImages[i].FilePath);\n\t\tif (Texture) {\n\t\t\tDefaultBackgroundImages.Add(Texture);\n\t\t}\n\t}\n}", "CodeBleu_score": 52.957066786245}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t Remove existing background images\n\tStartupBackgroundImages.Empty();\n\tDefaultBackgroundImages.Empty();\n\n\t// Get the loading screen settings\n\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\t// Load and add images for the startup loading screen\n\tfor (const FString& ImagePath : Settings->StartupLoadingScreen.BackgroundImages) {\n\t\tUTexture2D* Texture = LoadObject<UTexture2D>(NULL, *ImagePath);\n\t\tif (Texture) {\n\t\t\tStartupBackgroundImages.Add(Texture);\n\t\t}\n\t}\n\n\t// Load and add images for the default loading screen\n\tfor (const FString& ImagePath : Settings->DefaultLoadingScreen.BackgroundImages) {\n\t\tUTexture2D* Texture = LoadObject<UTexture2D>(NULL, *ImagePath);\n\t\tif (Texture) {\n\t\t\tDefaultBackgroundImages.Add(Texture);\n\t\t}\n\t}\n}", "CodeBleu_score": 51.375856477815454}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t Remove all existing background images\n\tStartupBackgroundImages.Empty();\n\tDefaultBackgroundImages.Empty();\n\n\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\t// Load startup background images\n\tfor (const FString& Path : Settings->StartupBackgroundImages) {\n\t\tUTexture2D* Texture = LoadTexture2D(Path);\n\t\tif (Texture) {\n\t\t\tStartupBackgroundImages.Add(Texture);\n\t\t}\n\t}\n\n\t// Load default background images\n\tfor (const FString& Path : Settings->DefaultBackgroundImages) {\n\t\tUTexture2D* Texture = LoadTexture2D(Path);\n\t\tif (Texture) {\n\t\t\tDefaultBackgroundImages.Add(Texture);\n\t\t}\n\t}\n}", "CodeBleu_score": 53.70717369036969}]}
{"instance_id": "4ffd56e2a326", "generation_result": [{"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t/ Calculate the current alpha value based on elapsed time and animation speed\n\tfloat Alpha = FMath::Clamp(FMath::Sin(CompleteTextAnimationSpeed * InCurrentTime) * 0.5f + 0.5f, 0.0f, 1.0f);\n\n\t// Reverse animation direction when alpha reaches either extreme\n\tif (Alpha <= 0.0f || Alpha >= 1.0f) {\n\t\tCompleteTextAnimationSpeed *= -1.0f;\n\t}\n\n\t// Update the text's alpha value\n\tCompleteTextColor.A = Alpha;\n\n\t// Return Continue to continue the animation\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 25.49830938572929}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t/ Get the current alpha value of the text\n\tfloat CurrentAlpha = CompleteTextColor.GetSpecifiedColor().A;\n\n\t// Calculate the new alpha value based on the animation speed and elapsed time\n\tfloat NewAlpha = CurrentAlpha + (CompleteTextAnimationSpeed * InDeltaTime);\n\n\t// Clamp the alpha value to a range between 0 and 1\n\tNewAlpha = FMath::Clamp(NewAlpha, 0.0f, 1.0f);\n\n\t// Reverse the animation direction when the alpha reaches the minimum or maximum range\n\tif (NewAlpha <= 0.0f || NewAlpha >= 1.0f) {\n\t\tCompleteTextAnimationSpeed *= -1.0f;\n\t}\n\n\t// Set the new alpha value as the text color\n\tCompleteTextColor.SetColor(FSlateColor(CompleteTextColor.GetSpecifiedColor(), NewAlpha));\n\n\t// Return Continue to continue the animation\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 39.05473753177539}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t/ Calculate the current alpha value based on the elapsed time and animation speed\n\tfloat CurrentAlpha = FMath::Lerp(CompleteTextMinAlpha, CompleteTextMaxAlpha, FMath::Fmod(InCurrentTime * CompleteTextAnimationSpeed, 1.f));\n\n\t// Reverse the animation direction when the alpha reaches the minimum or maximum value\n\tif (CurrentAlpha <= CompleteTextMinAlpha || CurrentAlpha >= CompleteTextMaxAlpha) {\n\t\tCompleteTextAnimationSpeed *= -1;\n\t}\n\n\t// Update the text's alpha value\n\tCompleteTextColor.A = CurrentAlpha;\n\n\t// Return Continue to indicate the animation should continue\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 37.03753883893551}]}
{"instance_id": "7420af124c78", "generation_result": [{"code": "bool FRaceAwaiter::await_ready(){\n\tf(Data, TEXT(\"Attempting to await moved-from race awaiter\"));\n\tData->Lock.lock();\n\tcheckf(!Data->Promise, TEXT(\"Attempting to reuse race awaiter\"));\n\n\t// Unlock if ready and resume immediately by returning true,\n\t// otherwise carry the lock to await_suspend/Suspend\n\tbool bReady = Data->Index!= -1;\n\tif (bReady)\n\t\tData->Lock.unlock();\n\treturn bReady;\n}", "CodeBleu_score": 48.935950804047955}, {"code": "bool FRaceAwaiter::await_ready(){\n\tf(Data, TEXT(\"Attempting to await moved-from race awaiter\"));\n\tData->Lock.lock();\n\tcheckf(Data->Index!= -1, TEXT(\"Attempting to reuse race awaiter\"));\n\n\t// Unlock if ready and resume immediately by returning true,\n\t// otherwise carry the lock to await_suspend/Suspend\n\tbool bReady = Data->Index!= -1;\n\tif (bReady)\n\t\tData->Lock.unlock();\n\treturn bReady;\n}", "CodeBleu_score": 48.84907226840935}, {"code": "bool FRaceAwaiter::await_ready(){\n\tf(Data, TEXT(\"Attempting to await moved-from race awaiter\"));\n\tData->Lock.lock();\n\tcheckf(Data->Index == -1, TEXT(\"Attempting to reuse race awaiter\"));\n\n\t// Unlock if ready and resume immediately by returning true,\n\t// otherwise carry the lock to await_suspend/Suspend\n\tbool bReady = Data->Index!= -1;\n\tif (bReady)\n\t\tData->Lock.unlock();\n\treturn bReady;\n}", "CodeBleu_score": 48.92716297478209}]}
{"instance_id": "fab9fe81573a", "generation_result": [{"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tFFindPathSharedPtr StatePtr = static_cast<FFindPathSharedPtr>(State);\n\tif (StatePtr.IsValid()) {\n\t\tif (bCleanup && StatePtr->QueryID!= 0) {\n\t\t\tStatePtr->NS1->CancelAsyncPathFindingRequest(StatePtr->QueryID);\n\t\t\tStatePtr->QueryID = 0;\n\t\t}\n\t\treturn StatePtr->QueryID == 0;\n\t}\n\treturn true;\n}", "CodeBleu_score": 32.13347967754207}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tFFindPathState* StatePtr = static_cast<FFindPathState*>(State);\n\tUNavigationSystemV1* NavSys = StatePtr->NS1.Get();\n\tif (bCleanup && NavSys && StatePtr->QueryID!= 0) {\n\t\tNavSys->CancelAsyncPathFindingRequest(StatePtr->QueryID);\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 35.2844580403842}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tFFindPathSharedPtr* FindPathState = static_cast<FFindPathSharedPtr*>(State);\n\tif (FindPathState == nullptr) {\n\t\treturn true;\n\t}\n\tif (bCleanup && FindPathState->IsValid()) {\n\t\tif (UNavigationSystemV1* NavSys = FindPathState->Get()->NS1.Get()) {\n\t\t\tNavSys->CancelAsyncPathfinding(FindPathState->Get()->QueryID);\n\t\t}\n\t\tFindPathState->Reset();\n\t}\n\treturn!FindPathState->IsValid();\n}", "CodeBleu_score": 36.19236909483286}]}
{"instance_id": "0656af2cb3eb", "generation_result": [{"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (!is_part_of_edited_scene() && current) {\n\t\t\t\tmake_current();\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (!is_part_of_edited_scene()) {\n\t\t\t\tclear_current();\n\t\t\t}\n\t\t} break;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n}", "CodeBleu_score": 58.2872599839941}, {"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (is_part_of_edited_scene() &&!current) {\n\t\t\t\tmake_current();\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (is_part_of_edited_scene()) {\n\t\t\t\tclear_current();\n\t\t\t}\n\t\t} break;\n\t\tdefault: {\n\t\t} break;\n\t}\n}", "CodeBleu_score": 50.671845143799054}, {"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (!is_part_of_edited_scene() && current) {\n\t\t\t\tmake_current();\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (!is_part_of_edited_scene()) {\n\t\t\t\tclear_current();\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 58.23462858443913}]}
{"instance_id": "9aadd2c91e67", "generation_result": [{"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\tERR_FAIL_COND(!active.is_set());\n\tERR_FAIL_COND(use_threads);\n\n\tint frames_to_mix = p_frames;\n\n\twhile (frames_to_mix > 0) {\n\t\tint frames_to_mix_in_chunk = MIN(frames_to_mix, buffer_frames);\n\t\tlock();\n\t\tstart_counting_ticks();\n\t\taudio_server_process(frames_to_mix_in_chunk, samples_in);\n\t\tstop_counting_ticks();\n\t\tunlock();\n\n\t\tfor (int i = 0; i < frames_to_mix_in_chunk * channels; i++) {\n\t\t\tp_buffer[i] = samples_in[i];\n\t\t}\n\n\t\tframes_to_mix -= frames_to_mix_in_chunk;\n\t\tp_buffer += frames_to_mix_in_chunk * channels;\n\t}\n}", "CodeBleu_score": 60.126912342592306}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\tERR_FAIL_COND(active.is_clear());\n\tERR_FAIL_COND(use_threads);\n\n\tint frames = p_frames;\n\tint32_t *buffer = p_buffer;\n\n\twhile (frames > 0) {\n\t\tint chunk = MIN(frames, buffer_frames);\n\n\t\tlock();\n\t\tstart_counting_ticks();\n\n\t\taudio_server_process(chunk, samples_in);\n\n\t\tstop_counting_ticks();\n\t\tunlock();\n\n\t\tfor (int i = 0; i < channels; i++) {\n\t\t\tfor (int j = 0; j < chunk; j++) {\n\t\t\t\tbuffer[i * chunk + j] += samples_in[i * buffer_frames + j];\n\t\t\t}\n\t\t}\n\n\t\tframes -= chunk;\n\t\tbuffer += chunk * channels;\n\t}\n}", "CodeBleu_score": 48.70730238870589}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\tERR_FAIL_COND(use_threads);\n\tERR_FAIL_COND(active.is_clear());\n\n\tlock();\n\tstart_counting_ticks();\n\n\taudio_server_process(p_frames, p_buffer);\n\n\tstop_counting_ticks();\n\tunlock();\n}", "CodeBleu_score": 17.635292938197278}]}
{"instance_id": "56df08c77b69", "generation_result": [{"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tif (gravity_is_point) {\n\t\tr_gravity = gravity_vector * (1.0 / (gravity_point_unit_distance * gravity_point_unit_distance));\n\t\tr_gravity *= (1.0 / (1.0 + (p_position - gravity_point_position).length_squared()));\n\t} else {\n\t\tr_gravity = gravity_vector;\n\t}\n}", "CodeBleu_score": 23.958548697718758}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tif (gravity_is_point) {\n\t\tfloat dist = p_position.distance_to(gravity_point);\n\t\tr_gravity = gravity_vector * (1.0 - (dist * dist) / (gravity_point_unit_distance * gravity_point_unit_distance));\n\t} else {\n\t\tr_gravity = gravity_vector;\n\t}\n}", "CodeBleu_score": 22.40913724651271}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tif (gravity_is_point) {\n\t\tVector2 diff = p_position - gravity_point;\n\t\tfloat dist_squared = diff.length_squared();\n\t\tfloat dist = Math::sqrt(dist_squared);\n\t\tfloat strength = gravity_point_unit_distance / dist;\n\t\tr_gravity = diff.normalized() * strength;\n\t} else {\n\t\tr_gravity = gravity_vector;\n\t}\n}", "CodeBleu_score": 32.303393150638286}]}
{"instance_id": "f8c60f8d0caa", "generation_result": [{"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tERR_FAIL_NULL(get_space());\n\n\tif (fi_callback_data || body_state_callback.is_valid()) {\n\t\tget_space()->body_add_to_state_query_list(&direct_state_query_list);\n\t}\n\n\tif (mode == PhysicsServer2D::BODY_MODE_STATIC) {\n\t\treturn;\n\t}\n\n\tfor (int i = 0; i < constraints.size(); i++) {\n\t\tGodotConstraint2D *constraint = constraints[i];\n\n\t\tif (constraint->is_active()) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tfor (int j = 0; j < 2; j++) {\n\t\t\tGodotBody2D *body = constraint->get_body(j);\n\t\t\tif (!body || body->is_active() || body->mode!= PhysicsServer2D::BODY_MODE_RIGID) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tbody->set_active(true);\n\t\t}\n\t}\n}", "CodeBleu_score": 49.07220230250239}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tif (mode == PhysicsServer2D::BODY_MODE_STATIC) {\n\t\treturn;\n\t}\n\n\tERR_FAIL_NULL(get_space());\n\n\tfor (int i = 0; i < constraints.size(); i++) {\n\t\tGodotConstraint2D *constraint = constraints[i];\n\t\tERR_FAIL_NULL(constraint);\n\n\t\tGodotBody2D *body_a = constraint->get_body_a();\n\t\tGodotBody2D *body_b = constraint->get_body_b();\n\n\t\tif (body_a!= this && body_a->is_active()) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (body_b!= this && body_b->is_active()) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (body_a == this && body_b!= this) {\n\t\t\tif (body_b->mode == PhysicsServer2D::BODY_MODE_STATIC) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!body_b->is_active()) {\n\t\t\t\tbody_b->set_active(true);\n\t\t\t}\n\t\t} else if (body_b == this && body_a!= this) {\n\t\t\tif (body_a->mode == PhysicsServer2D::BODY_MODE_STATIC) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!body_a->is_active()) {\n\t\t\t\tbody_a->set_active(true);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 50.10493159827523}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tif (mode == PhysicsServer2D::BODY_MODE_STATIC) {\n\t\treturn;\n\t}\n\n\tfor (int i = 0; i < constraints.size(); i++) {\n\t\tGodotConstraint2D *c = constraints[i];\n\n\t\tif (c->is_active() && c->is_one_way_collision_enabled()) {\n\t\t\tGodotBody2D *body = c->get_body_b();\n\t\t\tif (body->get_mode() == PhysicsServer2D::BODY_MODE_RIGID &&!body->is_active()) {\n\t\t\t\tbody->set_active(true);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 41.48640471480601}]}
{"instance_id": "0c6f6c00da9a", "generation_result": [{"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (get_space()) {\n\t\tif (!monitor_query_list.in_list()) {\n\t\t\tget_space()->area_add_to_monitor_query_list(&monitor_query_list);\n\t\t}\n\t}\n}", "CodeBleu_score": 82.22793015934249}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (get_space() &&!monitor_query_list.in_list()) {\n\t\tget_space()->area_add_to_monitor_query_list(&monitor_query_list);\n\t}\n}", "CodeBleu_score": 71.48136898721782}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (get_space()) {\n\t\tif (!monitor_query_list.in_list()) {\n\t\t\tget_space()->area_add_to_monitor_query_list(&monitor_query_list);\n\t\t}\n\t}\n}", "CodeBleu_score": 82.22793015934249}]}
{"instance_id": "efc39df0e3a3", "generation_result": [{"code": "void GodotBody3D::_update_transform_dependent(){\n\t", "CodeBleu_score": 2.1451046329649315}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t// Update center of mass.\n\tVector3 new_center_of_mass = transform.xform(center_of_mass);\n\n\t// Update principal inertia axes.\n\tVector3 new_principal_inertia_axes[3];\n\tfor (int i = 0; i < 3; i++) {\n\t\tnew_principal_inertia_axes[i] = transform.basis.xform(principal_inertia_axes[i]);\n\t}\n\n\t// Update inertia tensor.\n\tMatrix3 new_inertia_tensor = inertia_tensor;\n\tfor (int i = 0; i < 3; i++) {\n\t\tfor (int j = 0; j < 3; j++) {\n\t\t\tnew_inertia_tensor[i][j] = transform.basis.get_inverse().xform_affine(inertia_tensor[i][j]);\n\t\t}\n\t}\n\n\t// Update center of mass and principal inertia axes.\n\tcenter_of_mass = new_center_of_mass;\n\tfor (int i = 0; i < 3; i++) {\n\t\tprincipal_inertia_axes[i] = new_principal_inertia_axes[i];\n\t}\n\n\t// Update inertia tensor.\n\tinertia_tensor = new_inertia_tensor;\n}", "CodeBleu_score": 40.19482837217726}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t// Update center of mass.\n\tVector3 center_of_mass = get_transform().xform(center_of_mass_local);\n\t// Update principal inertia axes.\n\tVector3 inertia_local[3];\n\tinertia_local[0] = inertia_local_axis[0];\n\tinertia_local[1] = inertia_local_axis[1];\n\tinertia_local[2] = inertia_local_axis[2];\n\tfor (int i = 0; i < 3; i++) {\n\t\tinertia_local[i] = get_transform().basis.xform(inertia_local[i]);\n\t}\n\t// Update inertia tensor.\n\tinertia_tensor = Matrix3x3(inertia_local[0], inertia_local[1], inertia_local[2]).inverse();\n\tinertia_tensor = get_transform().basis.inverse().xform(inertia_tensor);\n\t// Update center of mass and principal inertia axes.\n\tinertia_local_axis[0] = inertia_tensor.get_axis(0);\n\tinertia_local_axis[1] = inertia_tensor.get_axis(1);\n\tinertia_local_axis[2] = inertia_tensor.get_axis(2);\n\tcenter_of_mass_local = inertia_local_axis[0].cross(inertia_local_axis[1]).cross(inertia_local_axis[2]);\n\tcenter_of_mass_local = center_of_mass_local.normalized();\n\tcenter_of_mass_local *= inertia_tensor.get_axis(0).dot(center_of_mass_local);\n\tcenter_of_mass_local = get_transform().basis.xform(center_of_mass_local);\n}", "CodeBleu_score": 43.51451476104158}]}
{"instance_id": "aebafb4094a1", "generation_result": [{"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tERR_FAIL_COND(!singleton);\n\tsingleton->process(p_frames, p_buffer, p_update_mix_time);\n}", "CodeBleu_score": 37.55264028179065}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tERR_FAIL_COND(!singleton);\n\tsingleton->process_audio(p_frames, p_buffer, p_update_mix_time);\n}", "CodeBleu_score": 38.039180679624806}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tERR_FAIL_COND(p_frames < 1);\n\n\tif (p_update_mix_time) {\n\t\t// Update mix time.\n\t\tmix_time += p_frames;\n\t}\n\n\tif (AudioServer::get_singleton()) {\n\t\tAudioServer::get_singleton()->audio_server_process(p_frames, p_buffer);\n\t}\n}", "CodeBleu_score": 67.04134107580329}]}
{"instance_id": "160bb23e8010", "generation_result": [{"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\tERR_FAIL_COND(p_feed.is_null());\n\n\t// remove our feed\n\tint index = get_feed_index(p_feed->get_id());\n\tfeeds.remove(index);\n\n\tprint_verbose(\\\"CameraServer: Unregistered camera \\\" + p_feed->get_name() + \\\" with ID \\\" + itos(p_feed->get_id()) + \\\" and position \\\" + itos(p_feed->get_position()) + \\\" at index \\\" + itos(index));\n\n\t// let whomever is interested know\n\temit_signal(SNAME(\\\"camera_feed_removed\\\"), p_feed->get_id());\n}", "CodeBleu_score": 33.522841085859625}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\tERR_FAIL_COND(p_feed.is_null());\n\n\t// remove our feed\n\tint index = get_feed_index(p_feed->get_id());\n\tERR_FAIL_COND(index == -1);\n\tfeeds.remove(index);\n\n\tprint_verbose(\\\"CameraServer: Unregistered camera \\\" + p_feed->get_name() + \\\" with ID \\\" + itos(p_feed->get_id()) + \\\" and position \\\" + itos(p_feed->get_position()) + \\\" at index \\\" + itos(index));\n\n\t// let whomever is interested know\n\temit_signal(SNAME(\\\"camera_feed_removed\\\"), p_feed->get_id());\n}", "CodeBleu_score": 36.78469857397537}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\tERR_FAIL_COND(p_feed.is_null());\n\n\t// remove our feed\n\tint index = get_feed_index(p_feed->get_id());\n\tfeeds.remove(index);\n\n\tprint_verbose(\"CameraServer: Removed camera \" + p_feed->get_name() + \" with ID \" + itos(p_feed->get_id()) + \" and position \" + itos(p_feed->get_position()) + \" at index \" + itos(index));\n\n\t// let whomever is interested know\n\temit_signal(SNAME(\"camera_feed_removed\"), p_feed->get_id());\n}", "CodeBleu_score": 54.69331751488171}]}
{"instance_id": "bef3cf110c45", "generation_result": [{"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\tEaseRateAction* ret = new (std::nothrow) EaseRateAction();\n\tif (ret && ret->initWithAction(action, rate)) {\n\t\tret->autorelease();\n\t} else {\n\t\tCC_SAFE_DELETE(ret);\n\t}\n\treturn ret;\n}", "CodeBleu_score": 51.29439596741923}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\tEaseRateAction* ret = new (std::nothrow) EaseRateAction();\n\tif (ret && ret->initWithAction(action, rate)) {\n\t\tret->autorelease();\n\t\treturn ret;\n\t}\n\tCC_SAFE_DELETE(ret);\n\treturn nullptr;\n}", "CodeBleu_score": 56.33568890846973}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t}", "CodeBleu_score": 5.803346691947942}]}
{"instance_id": "97fc6f86ad54", "generation_result": [{"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\tif (node->getName() == childName) {\n\t\treturn node;\n\t}\n\tfor (auto child : node->getChildren()) {\n\t\tNode* childNode = findChildByNameRecursively(child, childName);\n\t\tif (childNode!= nullptr) {\n\t\t\treturn childNode;\n\t\t}\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 50.205431298218585}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\tif (node->getName() == childName) {\n\t\treturn node;\n\t}\n\tfor (const auto &child : node->getChildren()) {\n\t\tNode* ret = findChildByNameRecursively(child, childName);\n\t\tif (ret!= nullptr) {\n\t\t\treturn ret;\n\t\t}\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 49.278396676918454}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\tif (node->getName() == childName) {\n\t\treturn node;\n\t}\n\n\tfor (auto &child : node->getChildren()) {\n\t\tNode *foundNode = findChildByNameRecursively(child, childName);\n\t\tif (foundNode) {\n\t\t\treturn foundNode;\n\t\t}\n\t}\n\n\treturn nullptr;\n}", "CodeBleu_score": 49.80876491123932}]}
{"instance_id": "5fcbe1fedcd2", "generation_result": [{"code": "void Animate3D::removeFromMap(){\n\t\n}", "CodeBleu_score": 1.2877098086580057}, {"code": "void Animate3D::removeFromMap(){\n\t\tif (_target) {\n\t\tif (_state == Animate3D::Animate3DState::FadeIn && _lastTime > 0.f) {\n\t\t\ts_fadeInAnimates.erase(_target);\n\t\t\ts_runningAnimates[_target] = nullptr;\n\t\t}\n\t\telse if (_state == Animate3D::Animate3DState::FadeOut && _lastTime > 0.f) {\n\t\t\ts_fadeOutAnimates.erase(_target);\n\t\t}\n\t\telse {\n\t\t\ts_runningAnimates.erase(_target);\n\t\t}\n\t}\n}", "CodeBleu_score": 32.5476434788651}, {"code": "void Animate3D::removeFromMap(){\n\t", "CodeBleu_score": 1.2077083246914777}]}
{"instance_id": "db8d394f7bc4", "generation_result": [{"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t#if CC_USE_3D_BATCH\n    std::string key = fileName + animationName;\n    Animation3D* animation = Animation3DCache::getInstance()->getAnimation(key);\n    if (animation) {\n        return animation;\n    }\n    animation = new (std::nothrow) Animation3D();\n    if (animation && animation->init(fileName, animationName)) {\n        Animation3DCache::getInstance()->addAnimation(key, animation);\n        return animation;\n    }\n    CC_SAFE_DELETE(animation);\n    return nullptr;\n#else\n    return new (std::nothrow) Animation3D();\n#endif\n}", "CodeBleu_score": 58.66666396439641}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t\tAnimation3D* animation = nullptr;\n\tstd::string key = fileName + animationName;\n\tauto iter = Animation3DCache::getInstance()->getAnimation(key);\n\tif (iter == nullptr) {\n\t\tanimation = new (std::nothrow) Animation3D();\n\t\tif (animation && animation->initWithFile(fileName, animationName)) {\n\t\t\tAnimation3DCache::getInstance()->addAnimation(key, animation);\n\t\t}\n\t\telse {\n\t\t\tCC_SAFE_DELETE(animation);\n\t\t}\n\t}\n\telse {\n\t\tanimation = iter;\n\t}\n\treturn animation;\n}", "CodeBleu_score": 61.32537780054157}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t\tAnimation3D* ret = nullptr;\n\tstd::string key = fileName + animationName;\n\tauto animation3D = Animation3D::getOrCreate(key);\n\tif (animation3D) {\n\t\tret = animation3D;\n\t} else {\n\t\tret = new (std::nothrow) Animation3D();\n\t\tif (ret && ret->init(fileName, animationName)) {\n\t\t\tAnimation3D::addAnimation(key, ret);\n\t\t} else {\n\t\t\tCC_SAFE_DELETE(ret);\n\t\t}\n\t}\n\treturn ret;\n}", "CodeBleu_score": 45.052807181531385}]}
{"instance_id": "cdf28d98d3ff", "generation_result": [{"code": "void Animation3DCache::removeUnusedAnimation(){\n\t#if CC_ENABLE_CACHE_TEXTURE_DATA\n    for (auto itor : _animations) {\n        Animation3D* animation = itor.second;\n        if (animation->getReferenceCount() == 1) {\n            animation->release();\n            _animations.erase(itor.first);\n        }\n    }\n#endif\n}", "CodeBleu_score": 40.65443582010191}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t#if CC_ENABLE_CACHE_TEXTURE_DATA\n    for (auto itor : _animations) {\n        if (itor.second->getReferenceCount() == 1) {\n            CC_SAFE_RELEASE(itor.second);\n            _animations.erase(itor.first);\n        }\n    }\n#endif\n}", "CodeBleu_score": 43.811779708873146}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t\tfor (auto itor : _animations) {\n\t\tif (itor.second->getReferenceCount() == 1) {\n\t\t\tCC_SAFE_RELEASE(itor.second);\n\t\t\t_animations.erase(itor.first);\n\t\t}\n\t}\n}", "CodeBleu_score": 39.460851472218664}]}
{"instance_id": "de7926871eb8", "generation_result": [{"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\tauto ret = new (std::nothrow) BillBoard();\nif (ret && ret->initWithTexture(texture, mode)) {\nret->autorelease();\nreturn ret;\n}\nCC_SAFE_DELETE(ret);\nreturn nullptr;\n}", "CodeBleu_score": 55.63815190821677}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t\tBillBoard *ret = new (std::nothrow) BillBoard();\n\tif (ret && ret->initWithTexture(texture, mode)) {\n\t\tret->autorelease();\n\t\treturn ret;\n\t}\n\tCC_SAFE_DELETE(ret);\n\treturn nullptr;\n}", "CodeBleu_score": 58.506668946381794}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\tBillBoard *billBoard = new (std::nothrow) BillBoard();\nif (billBoard && billBoard->initWithTexture(texture, mode)) {\nbillBoard->autorelease();\nreturn billBoard;\n}\nCC_SAFE_DELETE(billBoard);\nreturn nullptr;\n}", "CodeBleu_score": 62.9146647813146}]}
{"instance_id": "eef1c2206d68", "generation_result": [{"code": "bool Bundle3D::load(const std::string& path){\n\tf (path.empty() || _path == path) {\n\t\treturn true;\n\t}\n\n\tif (FileUtils::getInstance()->isFileExist(path)) {\n\t\t// load file\n\t\tstd::string fullPath = FileUtils::getInstance()->fullPathForFilename(path);\n\t\tstd::string ext = FileUtils::getInstance()->getFileExtension(fullPath);\n\t\tif (ext == \"c3t\") {\n\t\t\t// load as json\n\t\t\t_isBinary = false;\n\t\t\t_path = fullPath;\n\t\t\t_jsonBuffer = FileUtils::getInstance()->getStringFromFile(fullPath);\n\t\t\treturn true;\n\t\t}\n\t\telse if (ext == \"c3b\") {\n\t\t\t// load as binary\n\t\t\t_isBinary = true;\n\t\t\t_path = fullPath;\n\t\t\t_binaryBuffer = FileUtils::getInstance()->getDataFromFile(fullPath);\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\tCCLOG(\"Invalid file format: %s\", path.c_str());\n\t\t}\n\t}\n\n\t// clear\n\t_path.clear();\n\t_isBinary = false;\n\t_jsonBuffer.clear();\n\t_binaryBuffer.clear();\n\treturn false;\n}", "CodeBleu_score": 53.00866168567525}, {"code": "bool Bundle3D::load(const std::string& path){\n\tf CC_ENABLE_CACHE_TEXTURE_DATA\n    if (path.empty()) {\n        return false;\n    }\n    if (_path == path) {\n        return true;\n    }\n    _path = path;\n\n    // get file extension\n    auto ext = FileUtils::getInstance()->getFileExtension(_path);\n    if (ext == \".c3t\") {\n        _isBinary = false;\n    } else if (ext == \".c3b\") {\n        _isBinary = true;\n    } else {\n        CCLOG(\"cocos2d: Bundle3D: load: Invalid file extension.\");\n        return false;\n    }\n\n    // load file\n    if (_isBinary) {\n        _binaryBuffer = FileUtils::getInstance()->getDataFromFile(_path);\n        if (_binaryBuffer.getSize() == 0) {\n            CCLOG(\"cocos2d: Bundle3D: load: Failed to load binary file.\");\n            return false;\n        }\n    } else {\n        _jsonBuffer = FileUtils::getInstance()->getStringFromFile(_path);\n        if (_jsonBuffer.empty()) {\n            CCLOG(\"cocos2d: Bundle3D: load: Failed to load json file.\");\n            return false;\n        }\n    }\n    return true;\n#else\n    CC_UNUSED_PARAM(path);\n    return false;\n#endif\n}", "CodeBleu_score": 53.955040316486404}, {"code": "bool Bundle3D::load(const std::string& path){\n\t/ Check if the path is empty or already loaded.\n\tif (path.empty() || _path == path) {\n\t\treturn false;\n\t}\n\n\t// Determine the file extension to decide the loading method.\n\tstd::string extension = FileUtils::getInstance()->getFileExtension(path);\n\tif (extension == \"c3t\") {\n\t\t// Load the file as JSON.\n\t\treturn loadJson(path);\n\t} else if (extension == \"c3b\") {\n\t\t// Load the file as binary.\n\t\treturn loadBinary(path);\n\t} else {\n\t\t// Log a warning for invalid formats.\n\t\tCCLOG(\"cocos2d: Bundle3D: Invalid format: %s\", path.c_str());\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 44.42413264155203}]}
{"instance_id": "37b6acea681e", "generation_result": [{"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t\tif (skindata == nullptr)\n\t\treturn false;\n\n\tskindata->resetData();\n\n\tif (_isBinary)\n\t\treturn loadSkinDataBinary(skindata);\n\telse\n\t\treturn loadSkinDataJson(skindata);\n}", "CodeBleu_score": 63.3784071505993}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t\tif (skindata == nullptr)\n\t\treturn false;\n\n\t// reset skin data\n\tskindata->resetData();\n\n\t// load skin data\n\tif (_isBinary)\n\t\treturn loadSkinDataBinary(skindata);\n\telse\n\t\treturn loadSkinDataJson(skindata);\n}", "CodeBleu_score": 63.3784071505993}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t\tskindata->resetData();\n\tif (_isBinary) {\n\t\treturn loadSkinDataBinary(skindata);\n\t}\n\telse {\n\t\treturn loadSkinDataJson(skindata);\n\t}\n}", "CodeBleu_score": 90.83479861409403}]}
{"instance_id": "97449825e4ef", "generation_result": [{"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\tAudioDecoder* audioDecoder = (AudioDecoder*)datasource;\n\treturn audioDecoder->read(ptr, size, nmemb);\n}", "CodeBleu_score": 24.551781560311873}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\tAudioDecoder* decoder = (AudioDecoder*)datasource;\n\treturn decoder->read(ptr, size, nmemb);\n}", "CodeBleu_score": 24.237519956892218}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\tAudioDecoder* decoder = (AudioDecoder*)datasource;\n\treturn decoder->read(ptr, size, nmemb);\n}", "CodeBleu_score": 24.237519956892218}]}
{"instance_id": "0f4db164ba5d", "generation_result": [{"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t}", "CodeBleu_score": 7.8349078318895735}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t\n}", "CodeBleu_score": 7.8349078318894465}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t}", "CodeBleu_score": 7.8349078318895735}]}
{"instance_id": "0f88663615c6", "generation_result": [{"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t\tstd::lock_guard<std::mutex> guard(sDownloaderMutex);\n\tauto it = sDownloaderMap.find(id);\n\tif (it!= sDownloaderMap.end()) {\n\t\treturn it->second;\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 66.81003030479799}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t\tstd::lock_guard<std::mutex> guard(sDownloaderMutex);\n\tauto iter = sDownloaderMap.find(id);\n\tif (iter!= sDownloaderMap.end()) {\n\t\treturn iter->second;\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 74.9123618198829}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t\tstd::lock_guard<std::mutex> guard(sDownloaderMutex);\n\tauto it = sDownloaderMap.find(id);\n\tif (it!= sDownloaderMap.end()) {\n\t\treturn it->second;\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 66.81003030479799}]}
{"instance_id": "a5aafaaa944c", "generation_result": [{"code": "function M.playMusic(filename, isLoop)\n\t\tlocal loopValue = false\n\tif nil ~= isLoop then\n\t\tloopValue = isLoop\n\tend\n\tcc.SimpleAudioEngine:getInstance():playMusic(filename,loopValue)", "CodeBleu_score": 86.7106847330985}, {"code": "function M.playMusic(filename, isLoop)\n\t\tlocal loopValue = false\n\tif nil ~= isLoop then\n\t\tloopValue = isLoop\n\tend\n\tcc.SimpleAudioEngine:getInstance():playMusic(filename, loopValue)", "CodeBleu_score": 90.10072137492988}, {"code": "function M.playMusic(filename, isLoop)\n\t\tlocal loopValue = false\n\tif nil ~= isLoop then\n\t\tloopValue = isLoop\n\tend\n\tcc.SimpleAudioEngine:getInstance():playMusic(filename, loopValue)", "CodeBleu_score": 90.10072137492988}]}
{"instance_id": "16f2ad4bb4e8", "generation_result": [{"code": "function ccs.TriggerObj:detect()\n\t\tlocal r = false\n\tif self._enable then\n\t\tfor i = 1, table.getn(self._cons) do\n\t\t\tlocal con = self._cons[i]\n\t\t\tif nil ~= con then\n\t\t\t\tr = r or con:detect()\n\t\t\tend\n\t\tend\n\tend\n\treturn r", "CodeBleu_score": 40.771952433956606}, {"code": "function ccs.TriggerObj:detect()\n\t\tlocal bRet = false\n\tif self._enable then\n\t\tif 0 == table.getn(self._cons) then\n\t\t\tbRet = true\n\t\telse\n\t\t\tfor i = 1, table.getn(self._cons) do\n\t\t\t\tlocal cons = self._cons[i]\n\t\t\t\tif cons:detect() then\n\t\t\t\t\tbRet = true\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn bRet", "CodeBleu_score": 44.896169993670554}, {"code": "function ccs.TriggerObj:detect()\n\t\tlocal ret = false\n\tif not self._enable then\n\t\treturn false\n\tend\n\n\tfor i,v in ipairs(self._cons) do\n\t\tif v:detect() then\n\t\t\tret = true\n\t\tend\n\tend\n\treturn ret", "CodeBleu_score": 28.33923315604936}]}
{"instance_id": "e73b10418cb6", "generation_result": [{"code": "function ccs.TriggerObj:removeAll()\n\tif (not self._enable) or (table.getn(self._cons) == 0) then\n\t\treturn\n\tend\n\n\tlocal obj = nil\n\tfor i = 1, table.getn(self._cons) do\n\t\tobj = self._cons[i]\n\t\tif nil ~= obj and nil ~= obj.removeAll then\n\t\t\tobj:removeAll()\n\t\tend\n\tend\n\tself._cons = {}\n\n\tfor i = 1, table.getn(self._acts) do\n\t\tobj = self._acts[i]\n\t\tif nil ~= obj and obj.removeAll then\n\t\t\tobj:removeAll()\n\t\tend\n\tend\n\tself._acts = {}", "CodeBleu_score": 78.62191003505264}, {"code": "function ccs.TriggerObj:removeAll()\n\tself._cons = {}\n\tself._acts = {}", "CodeBleu_score": 10.884810577361657}, {"code": "function ccs.TriggerObj:removeAll()\n\tif (not self._enable) or (table.getn(self._cons) == 0) then\n\t\treturn\n\tend\n\n\tlocal obj = nil\n\tfor i = 1, table.getn(self._cons) do\n\t\tobj = self._cons[i]\n\t\tif nil ~= obj and nil ~= obj.removeAll then\n\t\t\tobj:removeAll()\n\t\tend\n\tend\n\tself._cons = {}\n\n\tfor i = 1, table.getn(self._acts) do\n\t\tobj = self._acts[i]\n\t\tif nil ~= obj and obj.removeAll then\n\t\t\tobj:removeAll()\n\t\tend\n\tend\n\tself._acts = {}", "CodeBleu_score": 78.62191003505264}]}
{"instance_id": "d5a1333d794d", "generation_result": [{"code": "function BasicCollider:hurtEffect(target)\n\t--create the hurt animation\n\tlocal hurtAnimation = cc.Animation3D:createWithJsonFile(Common3D.hurtAnimation)\n\tlocal hurtSprite = cc.Sprite3D:create(Common3D.hurtSprite)\n\thurtSprite:setScale(1.5)\n\thurtSprite:setCameraMask(cc.CameraFlag.USER1)\n\tlocal hurtBillboard = cc.BillBoard:create()\n\thurtBillboard:setCameraMask(cc.CameraFlag.USER1)\n\thurtBillboard:addChild(hurtSprite)\n\thurtBillboard:setScale(0.5)\n\thurtBillboard:setCameraMask(cc.CameraFlag.USER1)\n\thurtBillboard:setPosition(cc.p(0,10,0))\n\thurtBillboard:setZOrder(1000)\n\thurtBillboard:runAction(cc.Sequence:create(cc.Animate3D:create(hurtAnimation), cc.RemoveSelf:create()))\n\ttarget:addChild(hurtBillboard)", "CodeBleu_score": 43.51859454058042}, {"code": "function BasicCollider:hurtEffect(target)\n\t--create an animation from the cache\n\tlocal hurtAnimation = cc.Animation3D:create(CommonAnimations.hurtAnimation)\n\tlocal hurtEffect = cc.Sprite3D:create(CommonAnimations.hurtEffect)\n\thurtEffect:setScale(0.5)\n\thurtEffect:setCameraMask(cc.CameraFlag.USER1)\n\thurtEffect:setGlobalZOrder(10000)\n\thurtEffect:setCascadeColorEnabled(true)\n\t--set the position of the effect to the target's position\n\tlocal targetPos = target:getPosition3D()\n\thurtEffect:setPosition3D(cc.p(targetPos.x, targetPos.y, targetPos.z))\n\t--run the animation and remove the effect after the animation is done\n\thurtEffect:runAction(cc.Sequence:create(cc.Animate3D:create(hurtAnimation), cc.RemoveSelf:create()))\n\t--add the effect to the target\n\ttarget:addChild(hurtEffect)", "CodeBleu_score": 54.36289329428574}, {"code": "function BasicCollider:hurtEffect(target)\n\tlocal hurtAnimation = cc.Animation3D:create(CommonAnimations.hurtAnimation)\n\tlocal hurtBillboard = cc.BillBoard:create()\n\thurtBillboard:setTexture(CommonAnimations.hurtTexture)\n\thurtBillboard:setCameraMask(cc.CameraFlag.USER1)\n\thurtBillboard:setScale(0.01)\n\thurtBillboard:setPosition(0,0,0)\n\thurtBillboard:runAction(cc.Sequence:create(cc.Animate3D:create(hurtAnimation),cc.RemoveSelf:create()))\n\ttarget:addChild(hurtBillboard)", "CodeBleu_score": 47.3379720375429}]}
{"instance_id": "f478d7e70ea6", "generation_result": [{"code": "function MageNormalAttack:onTimeOut()\n\tself.part1:stopSystem()\n\tself.part2:stopSystem()\n\tlocal seq = cc.Sequence:create(cc.DelayTime:create(0.2), cc.CallFunc:create(function() self:removeFromParent() end))\n\tself:runAction(seq)\n\tlocal magic = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\\\"magic\\\"))\n\tmagic:setScale(2)\n\tself:addChild(magic)\n\tmagic:setRotation3D({x=90, y=0, z=0})\n\tmagic:setGlobalZOrder(0)\n\tmagic:setPositionZ(50)\n\tmagic:setTextureWithRect(cc.SpriteFrameCache:getInstance():getSpriteFrame(\\\"magic.png\\\"):getTexture(), cc.SpriteFrameCache:getInstance():getSpriteFrame(\\\"magic.png\\\"):getRect())\n\tmagic:setPosition3D(cc.V3(0,0,50))\n\tmagic:runAction(cc.Sequence:create(cc.FadeOut:create(0.2), cc.RemoveSelf:create()))\n\tself.sp:setScale(2)", "CodeBleu_score": 59.690446800358444}, {"code": "function MageNormalAttack:onTimeOut()\n\tself.part1:stopSystem()\n\tself.part2:stopSystem()\n\tlocal seq = cc.Sequence:create(cc.DelayTime:create(0.1), cc.CallFunc:create(function() self:removeFromParent() end))\n\tself:runAction(seq)\n\tlocal magicf = cc.SpriteFrameCache:getInstance():getSpriteFrame(\\\"puff.png\\\")\n\tlocal magic = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\\\"iceBolt\\\"))\n\tmagic:setTextureWithRect(magicf:getTexture(), magicf:getRect())\n\tmagic:setScale(2)\n\tself:addChild(magic)\n\tmagic:setRotation3D({x=90, y=0, z=0})\n\tmagic:setGlobalZOrder(0)\n\tmagic:setPositionZ(50)\n\tmagic:setCameraMask(UserCameraFlagMask)\n\tmagic:runAction(cc.FadeOut:create(0.5))\n\tself.sp:setSpriteFrame(cc.SpriteFrameCache:getInstance():getSpriteFrame(\\\"iceBolt.png\\\"))\n\tself.sp:runAction(cc.ScaleTo:create(0.5, 0.01))", "CodeBleu_score": 59.580193293718175}, {"code": "function MageNormalAttack:onTimeOut()\n\tself.part1:stopSystem()\n\tself.part2:stopSystem()\n\tself:runAction(cc.Sequence:create(cc.DelayTime:create(0.2), cc.RemoveSelf:create(), cc.CallFunc:create(function()\n\t\tlocal magicf = cc.SpriteFrameCache:getInstance():getSpriteFrame(\\\"puff.png\\\")\n\t\tlocal pixif = cc.SpriteFrameCache:getInstance():getSpriteFrame(\\\"particle.png\\\")\n\t\tlocal smoke = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\\\"iceTrail\\\"))\n\t\tsmoke:setTextureWithRect(magicf:getTexture(), magicf:getRect())\n\t\tsmoke:setScale(2)\n\t\tself:addChild(smoke)\n\t\tsmoke:setRotation3D({x=90, y=0, z=0})\n\t\tsmoke:setGlobalZOrder(0)\n\t\tsmoke:setPositionZ(50)\n\t\tsmoke:setPosition3D(cc.V3(0,0,50))\n\t\tlocal pixi = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\\\"pixi\\\"))\n\t\tpixi:setTextureWithRect(pixif:getTexture(), pixif:getRect())\n\t\tpixi:setScale(2)\n\t\tself:addChild(pixi)\n\t\tpixi:setRotation3D({x=90, y=0, z=0})\n\t\tpixi:setGlobalZOrder(0)\n\t\tpixi:setPositionZ(50)\n\t\tpixi:setPosition3D(cc.V3(0,0,50))\n\t\tself.part1 = smoke\n\t\tself.part2 = pixi\n\t\tself.sp:setSpriteFrame(cc.SpriteFrameCache:getInstance():getSpriteFrame(\\\"iceBolt.png\\\"))\n\t\tself.sp:runAction(cc.FadeOut:create(0.5))\n\t\tself.sp:setScale(0.5)\n\tend)))", "CodeBleu_score": 52.793973562127306}]}
{"instance_id": "d735c4ea6358", "generation_result": [{"code": "function BattlefieldUI:heroDead(hero)\n\t\tlocal heroName = hero._name\n\tlocal heroPng = nil\n\tlocal heroAngryFullSignal = nil\n\tlocal heroAngryClone = nil\n\tif heroName == \\\"Knight\\\" then\n\t\theroPng = self.KnightPng\n\t\theroAngryFullSignal = self.KnightAngryFullSignal\n\t\theroAngryClone = self.KnightAngryClone\n\telseif heroName == \\\"Archer\\\" then\n\t\theroPng = self.ArcherPng\n\t\theroAngryFullSignal = self.ArcherAngryFullSignal\n\t\theroAngryClone = self.ArcherAngryClone\n\telseif heroName == \\\"Mage\\\" then\n\t\theroPng = self.MagePng\n\t\theroAngryFullSignal = self.MageAngryFullSignal\n\t\theroAngryClone = self.MageAngryClone\n\tend\n\n\tif heroPng then\n\t\theroPng:setShaderProgram(cc.GLProgramCache:getInstance():getGLProgram(\\\"greyShader\\\"))\n\t\theroAngryFullSignal:setVisible(false)\n\t\theroAngryClone:setVisible(false)\n\tend", "CodeBleu_score": 21.93494798700285}, {"code": "function BattlefieldUI:heroDead(hero)\n\t\tif hero._name == \\\"Knight\\\" then\n        self.KnightPng:setShaderProgram(greyShader)\n        self.KnightAngryFullSignal:setVisible(false)\n        self.KnightAngryClone:setVisible(false)\n    elseif hero._name == \\\"Archer\\\" then\n        self.ArcherPng:setShaderProgram(greyShader)\n        self.ArcherAngryFullSignal:setVisible(false)\n        self.ArcherAngryClone:setVisible(false)\n    elseif hero._name == \\\"Mage\\\" then\n        self.MagePng:setShaderProgram(greyShader)\n        self.MageAngryFullSignal:setVisible(false)\n        self.MageAngryClone:setVisible(false)\n    end", "CodeBleu_score": 29.041003347968896}, {"code": "function BattlefieldUI:heroDead(hero)\n\t\tlocal heroName = hero._name\n\tif heroName == \\\"Knight\\\" then\n\t\tself.KnightPng:setShaderProgram(cc.GLProgram:createWithFilenames(\\\"shader/grey.vsh\\\", \\\"shader/grey.fsh\\\"))\n\t\tself.KnightAngryFullSignal:setVisible(false)\n\t\tself.KnightAngryClone:setVisible(false)\n\telseif heroName == \\\"Archer\\\" then\n\t\tself.ArcherPng:setShaderProgram(cc.GLProgram:createWithFilenames(\\\"shader/grey.vsh\\\", \\\"shader/grey.fsh\\\"))\n\t\tself.ArcherAngryFullSignal:setVisible(false)\n\t\tself.ArcherAngryClone:setVisible(false)\n\telseif heroName == \\\"Mage\\\" then\n\t\tself.MagePng:setShaderProgram(cc.GLProgram:createWithFilenames(\\\"shader/grey.vsh\\\", \\\"shader/grey.fsh\\\"))\n\t\tself.MageAngryFullSignal:setVisible(false)\n\t\tself.MageAngryClone:setVisible(false)\n\tend", "CodeBleu_score": 26.142739942225703}]}
{"instance_id": "009f167d3ab2", "generation_result": [{"code": "local function moveCamera(dt)\n\t\tif specialCamera.valid then\n\t\tlocal target = specialCamera.position\n\t\tlocal camera = cc.Director:getInstance():getRunningScene():getChildByName(\\\"Camera\\\"):getPosition()\n\t\tlocal cameraOffset = cc.V3(camera.x, camera.y, 0)\n\t\tlocal cameraOffsetTarget = cc.V3(target.x, target.y, 0)\n\t\tlocal cameraOffsetMin = cc.V3(cameraOffsetMin.x, cameraOffsetMin.y, 0)\n\t\tlocal cameraOffsetMax = cc.V3(cameraOffsetMax.x, cameraOffsetMax.y, 0)\n\t\tlocal cameraOffset = cameraOffset + (cameraOffsetTarget - cameraOffset) * dt * 2\n\t\tcameraOffset = cc.clampf(cameraOffset.x, cameraOffsetMin.x, cameraOffsetMax.x)\n\t\tcameraOffset = cc.clampf(cameraOffset.y, cameraOffsetMin.y, cameraOffsetMax.y)\n\t\tcc.Director:getInstance():getRunningScene():getChildByName(\\\"Camera\\\"):setPosition(cc.p(cameraOffset.x, cameraOffset.y))\n\t\tcc.Director:getInstance():getRunningScene():getChildByName(\\\"Camera\\\"):lookAt(target)\n\telseif #gameMaster.heroes > 0 then\n\t\tlocal focus = cc.p(0, 0)\n\t\tfor i, hero in ipairs(gameMaster.heroes) do\n\t\t\tfocus = focus + hero.focus\n\t\tend\n\t\tfocus = focus / #gameMaster.heroes\n\t\tlocal camera = cc.Director:getInstance():getRunningScene():getChildByName(\\\"Camera\\\"):getPosition()\n\t\tlocal cameraOffset = cc.V3(camera.x, camera.y, 0)\n\t\tlocal cameraOffsetTarget = cc.V3(focus.x, focus.y, 0)\n\t\tlocal cameraOffsetMin = cc.V3(cameraOffsetMin.x, cameraOffsetMin.y, 0)\n\t\tlocal cameraOffsetMax = cc.V3(cameraOffsetMax.x, cameraOffsetMax.y, 0)\n\t\tlocal cameraOffset = cameraOffset + (cameraOffsetTarget - cameraOffset) * dt * 2\n\t\tcameraOffset = cc.clampf(cameraOffset.x, cameraOffsetMin.x, cameraOffsetMax.x)\n\t\tcamera", "CodeBleu_score": 35.991803118453134}, {"code": "local function moveCamera(dt)\n\t\tlocal camera = cc.Camera:getInstance()\n\tlocal focusPoint = cc.p(0,0)\n\tlocal cameraPosition = camera:getPosition3D()\n\tlocal cameraLookAt = camera:getLookAt()\n\tlocal cameraTarget = cc.p(0,0)\n\tlocal cameraTargetPosition = cc.p(0,0)\n\tlocal cameraTargetLookAt = cc.p(0,0)\n\tlocal cameraTargetPosition3D = cc.V3(0,0,0)\n\tlocal cameraTargetLookAt3D = cc.V3(0,0,0)\n\tlocal cameraPosition3D = cc.V3(0,0,0)\n\tlocal cameraLookAt3D = cc.V3(0,0,0)\n\tlocal cameraTargetPosition3D = cc.V3(0,0,0)\n\tlocal cameraTargetLookAt3D = cc.V3(0,0,0)\n\tlocal cameraTargetPosition3D = cc.V3(0,0,0)\n\tlocal cameraTargetLookAt3D = cc.V3(0,0,0)\n\tlocal cameraTargetPosition3D = cc.V3(0,0,0)\n\tlocal cameraTargetLookAt3D = cc.V3(0,0,0)\n\tlocal cameraTargetPosition3D = cc.V3(0,0,0)\n\tlocal cameraTargetLookAt3D = cc.V3(0,0,0)\n\tlocal cameraTargetPosition3D = cc.V3(0,0,0)\n\tlocal cameraTargetLookAt3D = cc.V3(0,0,0)\n\tlocal cameraTargetPosition3D = cc.V3(0,0,0)\n\tlocal cameraTargetLookAt3D = cc.V3(0,0,0)\n\tlocal cameraTargetPosition3D = cc.V3(0,0,0)\n\tlocal cameraTargetLookAt3D = cc.V3(0,0,0)\n\tlocal cameraTargetPosition3D = cc.V3(0,0,0)\n\tlocal cameraTargetLookAt3D = cc.V3(0,0,0)\n\tlocal cameraTargetPosition3D = cc", "CodeBleu_score": 26.42749753307313}, {"code": "local function moveCamera(dt)\n\t\tif specialCamera.valid then\n\t\tlocal camera = cc.Director:getInstance():getRunningScene():getChildByTag(10000):getCamera()\n\t\tlocal cameraPos = camera:getPosition3D()\n\t\tlocal cameraTarget = specialCamera.position\n\t\tlocal cameraTargetPos = cc.p(cameraTarget.x, cameraTarget.y)\n\t\tlocal cameraTargetPos3D = cc.p(cameraTarget.x, cameraTarget.y, 0)\n\t\tlocal cameraTargetPos3D2 = cc.p(cameraTarget.x, cameraTarget.y, 0)\n\t\tlocal cameraPos3D = cc.p(cameraPos.x, cameraPos.y, 0)\n\t\tlocal cameraPos3D2 = cc.p(cameraPos.x, cameraPos.y, 0)\n\t\tlocal cameraPos3D3 = cc.p(cameraPos.x, cameraPos.y, 0)\n\t\tlocal cameraPos3D4 = cc.p(cameraPos.x, cameraPos.y, 0)\n\t\tlocal cameraPos3D5 = cc.p(cameraPos.x, cameraPos.y, 0)\n\t\tlocal cameraPos3D6 = cc.p(cameraPos.x, cameraPos.y, 0)\n\t\tlocal cameraPos3D7 = cc.p(cameraPos.x, cameraPos.y, 0)\n\t\tlocal cameraPos3D8 = cc.p(cameraPos.x, cameraPos.y, 0)\n\t\tlocal cameraPos3D9 = cc.p(cameraPos.x, cameraPos.y, 0)\n\t\tlocal cameraPos3D10 = cc.p(cameraPos.x, cameraPos.y, 0)\n\t\tlocal cameraPos3D11 = cc.p(cameraPos.x, cameraPos.y, 0)\n\t\tlocal cameraPos3D12 = cc.p(cameraPos.x, cameraPos.y, 0)\n\t\tlocal cameraPos3D13 = cc.p(cameraPos.x, cameraPos.y, 0)\n\t\tlocal cameraPos3D14 = cc.p(cameraPos.x, cameraPos.y, 0)\n\t\tlocal cameraPos3D15 = cc.p", "CodeBleu_score": 26.91488801591482}]}
{"instance_id": "f7f5e7fe1dc2", "generation_result": [{"code": "local function updateParticlePos()\n\t\tlocal heroes = HeroManager.heroes\n\tfor i, hero in ipairs(heroes) do\n\t\tlocal effect = hero.effect\n\t\tif effect ~= nil then\n\t\t\teffect:setPosition(getPosTable(hero))\n\t\tend\n\tend", "CodeBleu_score": 41.07246412313513}, {"code": "local function updateParticlePos()\n\t\tif HeroManager == nil then return end\n\tlocal heroes = HeroManager.getHeroes()\n\tfor i, hero in ipairs(heroes) do\n\t\tif hero.effectNode ~= nil then\n\t\t\thero.effectNode:setPosition(hero.position)\n\t\tend\n\tend", "CodeBleu_score": 46.086935152847715}, {"code": "local function updateParticlePos()\n\t\tfor i, hero in ipairs(HeroManager) do\n\t\tlocal node = hero.particleNode\n\t\tif node ~= nil then\n\t\t\tlocal pos = getPosTable(hero.sprite)\n\t\t\tnode:setPosition(pos)\n\t\tend\n\tend", "CodeBleu_score": 35.22187676196295}]}
{"instance_id": "77829ef7341e", "generation_result": [{"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\tlocal hero = self.layer:getChildByTag(sortorder[2])\n\tlocal type = hero:getRaceType()\n\tif hero._name == \"Knight\" then --warriors\n\t\tAudioEngine.playEffect(\\\"audio/warrior.mp3\\\")\n\telseif hero._name == \"Archer\" then --archer\n\t\tAudioEngine.playEffect(\\\"audio/archer.mp3\\\")\n\telseif hero._name == \"Mage\" then --sorceress\n\t\tAudioEngine.playEffect(\\\"audio/sorceress.mp3\\\")\n\tend", "CodeBleu_score": 73.96149580135987}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\t--get hero type\n\tlocal hero = self.layer:getChildByTag(sortorder[2])\n\tlocal type = hero:getRaceType()\n\t--play audio\n\tif hero._name == \\\"Knight\\\" then --warriors\n\t\taudio.playMusic(audio.chooseRole_warrior, true)\n\telseif hero._name == \\\"Archer\\\" then --archer\n\t\taudio.playMusic(audio.chooseRole_archer, true)\n\telseif hero._name == \\\"Mage\\\" then --sorceress\n\t\taudio.playMusic(audio.chooseRole_mage, true)\n\tend", "CodeBleu_score": 42.7641307638548}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\tlocal hero = self.layer:getChildByTag(sortorder[2])\n\tlocal type = hero:getRaceType()\n\tif type == 1 then\n\t\taudio.playSound(\\\"chooseRole/audio/knight.mp3\\\",false)\n\telseif type == 2 then\n\t\taudio.playSound(\\\"chooseRole/audio/archer.mp3\\\",false)\n\telseif type == 3 then\n\t\taudio.playSound(\\\"chooseRole/audio/mage.mp3\\\",false)\n\tend", "CodeBleu_score": 53.156746871695894}]}
{"instance_id": "2b35fdb15a13", "generation_result": [{"code": "function GameMaster:AddHeros()\n\t\tlocal knight = Knight.create()\n\tknight:setPosition(cc.p(100, 100))\n\tknight:setIdle()\n\tself:addChild(knight)\n\tHeroManager:push(knight)\n\tlocal mage = Mage.create()\n\tmage:setPosition(cc.p(100, 100))\n\tmage:setIdle()\n\tself:addChild(mage)\n\tHeroManager:push(mage)\n\tlocal archer = Archer.create()\n\tarcher:setPosition(cc.p(100, 100))\n\tarcher:setIdle()\n\tself:addChild(archer)\n\tHeroManager:push(archer)", "CodeBleu_score": 53.981033891770124}, {"code": "function GameMaster:AddHeros()\n\t\tlocal knight = Knight.create()\n    knight:setPosition(cc.p(100, 200))\n    knight:setScale(1.5)\n    knight:setZOrder(gloableZOrder)\n    knight._goRight = true\n    knight:setIdle()\n    knight:setHP(100)\n    knight:setMP(100)\n    knight:setAttack(10)\n    knight:setDefence(10)\n    knight:setSpeed(10)\n    knight:setSkill(10)\n    knight:setAttackRange(100)\n    knight:setAttackInterval(10)\n    knight:setAttackDamage(10)\n    knight:setAttackSpeed(10)\n    knight:setAttackRange(100)\n    knight:setAttackDamage(10)\n    knight:setAttackSpeed(10)\n    knight:setAttackRange(100)\n    knight:setAttackDamage(10)\n    knight:setAttackSpeed(10)\n    knight:setAttackRange(100)\n    knight:setAttackDamage(10)\n    knight:setAttackSpeed(10)\n    knight:setAttackRange(100)\n    knight:setAttackDamage(10)\n    knight:setAttackSpeed(10)\n    knight:setAttackRange(100)\n    knight:setAttackDamage(10)\n    knight:setAttackSpeed(10)\n    knight:setAttackRange(100)\n    knight:setAttackDamage(10)\n    knight:setAttackSpeed(10)\n    knight:setAttackRange(100)\n    knight:setAttackDamage(10)\n    knight:setAttackSpeed(10)\n    knight:setAttackRange(100)\n    knight:setAttackDamage(10)\n    knight:setAttackSpeed(10)\n    knight:setAttackRange(100)\n    knight:setAttackDamage(1", "CodeBleu_score": 27.66411188291624}, {"code": "function GameMaster:AddHeros()\n\t\tlocal knight = Knight.create(KnightodeBleu_score": 11.73941901250324}]}
{"instance_id": "cdfbc82ff3cd", "generation_result": [{"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat:create()\n    currentLayer:addChild(boss)\n    boss:setVisible(false)\n    boss:setAIEnabled(false)\n    List.pushlast(MonsterManager,boss)\n    boss._myPos = getFocusPointOfHeros()\n    boss._myPos.x = boss._myPos.x + 150\n    boss:setPosition(boss._myPos)\n    boss:setFacing(0)\n    boss:bounceOut()\n    boss:setAIEnabled(true)", "CodeBleu_score": 41.549674167301}, {"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat:create()\n    currentLayer:addChild(boss)\n    boss:setCameraMask(1)\n    boss:setPosition(battleSiteX[3], 0)\n    boss:setFacing(0)\n    boss:setVisible(true)\n    boss:setAIEnabled(false)\n    boss:bounceOut()\n    List.pushlast(MonsterManager, boss)", "CodeBleu_score": 30.217146269448147}, {"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat:create()\n    currentLayer:addChild(boss)\n    boss:setVisible(false)\n    boss:setAIEnabled(false)\n    List.pushlast(MonsterManager,boss)\n    boss._myPos = {x = 0, y = 0}\n    boss:setPosition(0,0)\n    boss:setFacing(0)\n    boss:bounceOut()\n    boss:setAIEnabled(true)", "CodeBleu_score": 35.80910424632308}]}
{"instance_id": "fa7b402853bb", "generation_result": [{"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation = cc.Animation3D:create(file)\n\tlocal animate3d = cc.Animate3D:create(animation, begin, finish)\n\tanimate3d:setSpeed(speed)\n\tanimate3d:retain()\n\treturn animate3d", "CodeBleu_score": 68.98312526571402}, {"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation = cc.Animation3D:create(file)\n\tlocal animate = cc.Animate3D:create(animation, begin, finish)\n\tanimate:setSpeed(speed)\n\treturn animate", "CodeBleu_score": 53.113735341379844}, {"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation = cc.Animation3D:create(file)\n\tlocal animate = cc.Animate3D:create(animation, begin, finish)\n\tanimate:setSpeed(speed)\n\tanimate:retain()\n\treturn animate", "CodeBleu_score": 58.106581541073375}]}
{"instance_id": "0725f2413b6b", "generation_result": [{"code": "function removeAll(table)\n\t\tfor i,v in ipairs(table) do \n\t\ttable[i] = nil \n\tend ", "CodeBleu_score": 34.89124039286149}, {"code": "function removeAll(table)\n\t\tfor k, v in pairs(table) do \n\t\ttable[k] = nil \n\tend ", "CodeBleu_score": 37.61883259750955}, {"code": "function removeAll(table)\n\t\tfor k,v in pairs(table) do \n\t\ttable[k] = nil \n\tend ", "CodeBleu_score": 37.5225396286282}]}
{"instance_id": "526d10bb37bb", "generation_result": [{"code": "function delayExecute(target, func, delay)\n\t\tlocal delay = cc.DelayTime:create(delay)\n\tlocal sequence = cc.Sequence:create(delay, cc.CallFunc:create(func))\n\ttarget:runAction(sequence)", "CodeBleu_score": 61.69422515061702}, {"code": "function delayExecute(target, func, delay)\n\t\tlocal delay = cc.DelayTime:create(delay)\n\tlocal func = cc.CallFunc:create(func)\n\tlocal sequence = cc.Sequence:create(delay, func)\n\ttarget:runAction(sequence)", "CodeBleu_score": 57.33536164299168}, {"code": "function delayExecute(target, func, delay)\n\t\tlocal delayAction = cc.DelayTime:create(delay)\n\tlocal callFunc = cc.CallFunc:create(func)\n\tlocal sequence = cc.Sequence:create(delayAction, callFunc)\n\ttarget:runAction(sequence)", "CodeBleu_score": 57.61998106460733}]}
{"instance_id": "3b277bd3d0d0", "generation_result": [{"code": "function LoadingScene:addLoadingText(layer)\n\t\tself._loading = {}\n\tlocal loading = {\"loading\",\"loading.\",\"loading..\",\"loading...\"}\n\tlocal loadingText = {}\n\tfor i=1,table.getn(loading) do\n\t\tloadingText[i] = cc.Label:createWithSystemFont(loading[i],\"Arial\",30)\n\t\tloadingText[i]:setPosition(self.size.width/2,self.size.height*0.4)\n\t\tlayer:addChild(loadingText[i])\n\t\tself._loading[i] = loadingText[i]\n\tend", "CodeBleu_score": 41.33890358233563}, {"code": "function LoadingScene:addLoadingText(layer)\n\t\tself._loading = {}\n\tfor i=1,3 do\n\t\tlocal loading = cc.Label:createWithTTF(\\\"loading...\\\",\\\"fonts/Marker Felt.ttf\\\",40)\n\t\tloading:setPosition(self.size.width/2,self.size.height*0.1)\n\t\tloading:setColor(cc.c3b(0,0,0))\n\t\tloading:setOpacity(70)\n\t\tloading:setGlobalZOrder(1)\n\t\tlayer:addChild(loading)\n\t\ttable.insert(self._loading,loading)\n\tend", "CodeBleu_score": 32.791956538031656}, {"code": "function LoadingScene:addLoadingText(layer)\n\t\tself._loading = {}\n\tfor i=1,table.getn(self._loading) do\n\t\tlocal loading = cc.Label:createWithBMFont(\\\"loadingscene/loading.fnt\\\",\\\"loading\\\")\n\t\tloading:setPosition(self.size.width/2,self.size.height*0.3)\n\t\tloading:setGlobalZOrder(1)\n\t\tlayer:addChild(loading)\n\t\ttable.insert(self._loading,loading)\n\tend", "CodeBleu_score": 28.396666914521205}]}
{"instance_id": "68250ae97644", "generation_result": [{"code": "function MainMenuScene.create()\n\t\tlocal scene = MainMenuScene.new()\n\tscene:addChild(scene:createLayer())\n\treturn scene", "CodeBleu_score": 55.37164418584136}, {"code": "function MainMenuScene.create()\n\t\tlocal scene = MainMenuScene.new()\n\tscene:addChild(scene:createLayer())\n\treturn scene", "CodeBleu_score": 55.37164418584136}, {"code": "function MainMenuScene.create()\n\t\tlocal scene = MainMenuScene.new()\n\tscene:addChild(scene:createLayer())\n\treturn scene", "CodeBleu_score": 55.37164418584136}]}
{"instance_id": "81470efbb6ff", "generation_result": [{"code": "local function collision(object)\n\n\t\tfor i = 1, HeroManager.length do\n\t\tif HeroManager[i].alive then\n\t\t\tsolveCollision(object, HeroManager[i])\n\t\tend\n\tend\n\tfor i = 1, MonsterManager.length do\n\t\tif MonsterManager[i].alive then\n\t\t\tsolveCollision(object, MonsterManager[i])\n\t\tend\n\tend", "CodeBleu_score": 28.06421380305002}, {"code": "local function collision(object)\n\n\t\tif object._mass == nil then\n\t\tobject._mass = 1\n\tend\n\tif object._radius == nil then\n\t\tobject._radius = 1\n\tend\n\n\tfor i = 1, HeroManager.size do\n\t\tlocal hero = HeroManager:get(i)\n\t\tif hero:isAlive() then\n\t\t\tsolveCollision(object, hero)\n\t\tend\n\tend\n\n\tfor i = 1, MonsterManager.size do\n\t\tlocal monster = MonsterManager:get(i)\n\t\tif monster:isAlive() then\n\t\t\tsolveCollision(object, monster)\n\t\tend\n\tend", "CodeBleu_score": 37.23313810990564}, {"code": "local function collision(object)\n\n\t\tlocal heroes = HeroManager:getAlive()\n\tlocal monsters = MonsterManager:getAlive()\n\tlocal heroesCount = HeroManager:countAlive()\n\tlocal monstersCount = MonsterManager:countAlive()\n\tlocal i, j\n\tlocal obj1Pos = cc.p(object:getPosition())\n\n\tfor i = 1, heroesCount do\n\t\tlocal obj2 = heroes[i]\n\t\tlocal obj2Pos = cc.p(obj2:getPosition())\n\t\tlocal tempDistance = cc.pGetDistance(obj1Pos, obj2Pos)\n\t\tif tempDistance < object._radius + obj2._radius then\n\t\t\tsolveCollision(object, obj2)\n\t\tend\n\tend\n\n\tfor i = 1, monstersCount do\n\t\tlocal obj2 = monsters[i]\n\t\tlocal obj2Pos = cc.p(obj2:getPosition())\n\t\tlocal tempDistance = cc.pGetDistance(obj1Pos, obj2Pos)\n\t\tif tempDistance < object._radius + obj2._radius then\n\t\t\tsolveCollision(object, obj2)\n\t\tend\n\tend", "CodeBleu_score": 39.471789100035224}]}
{"instance_id": "f8915bebdc0e", "generation_result": [{"code": "function collisionDetect(dt)\n\t\tfor val = HeroManager.last, HeroManager.first, -1 do\n\t\tlocal sprite = HeroManager[val]\n\t\tif sprite._isalive == true then\n\t\t\tcollision(sprite)\n\t\t\tisOutOfBound(sprite)\n\t\telse\n\t\t\tHeroManager:remove(val)\n\t\tend\n\tend\n\n\tfor val = MonsterManager.last, MonsterManager.first, -1 do\n\t\tlocal sprite = MonsterManager[val]\n\t\tif sprite._isalive == true then\n\t\t\tcollision(sprite)\n\t\t\tisOutOfBound(sprite)\n\t\telse\n\t\t\tMonsterManager:remove(val)\n\t\tend\n\tend", "CodeBleu_score": 69.7532605784581}, {"code": "function collisionDetect(dt)\n\t\tfor val = HeroManager.last, HeroManager.first, -1 do\n\t\tlocal sprite = HeroManager[val]\n\t\tif sprite._isalive == true then\n\t\t\tcollision(sprite)\n\t\t\tisOutOfBound(sprite)\n\t\telse\n\t\t\tHeroManager:remove(val)\n\t\tend\n\tend\n\n\tfor val = MonsterManager.last, MonsterManager.first, -1 do\n\t\tlocal sprite = MonsterManager[val]\n\t\tif sprite._isalive == true then\n\t\t\tcollision(sprite)\n\t\t\tisOutOfBound(sprite)\n\t\telse\n\t\t\tMonsterManager:remove(val)\n\t\tend\n\tend", "CodeBleu_score": 69.7532605784581}, {"code": "function collisionDetect(dt)\n\t\tfor val = HeroManager.last, HeroManager.first, -1 do\n\t\tlocal sprite = HeroManager[val]\n\t\tif sprite._isalive == true then\n\t\t\tcollision(sprite)\n\t\t\tisOutOfBound(sprite)\n\t\telse\n\t\t\tHeroManager:remove(sprite)\n\t\tend\n\tend\n\n\tfor val = MonsterManager.last, MonsterManager.first, -1 do\n\t\tlocal sprite = MonsterManager[val]\n\t\tif sprite._isalive == true then\n\t\t\tcollision(sprite)\n\t\t\tisOutOfBound(sprite)\n\t\telse\n\t\t\tMonsterManager:remove(sprite)\n\t\tend\n\tend", "CodeBleu_score": 69.9843700863334}]}
{"instance_id": "fc081bb122f5", "generation_result": [{"code": "function Actor:specialAttack()\n\t\tBasicCollider.create(self._myPos, self._curFacing, self._specialAttack)\n\tself:specialAttackSoundEffects()", "CodeBleu_score": 82.72368000825026}, {"code": "function Actor:specialAttack()\n\t\tBasicCollider.create(self._myPos, self._curFacing, self._specialAttack)\n\tself:specialAttackSoundEffects()", "CodeBleu_score": 82.72368000825026}, {"code": "function Actor:specialAttack()\n\t\tBasicCollider.create(self._myPos, self._curFacing, self._specialAttack)\n\tself:specialAttackSoundEffects()", "CodeBleu_score": 82.72368000825026}]}
{"instance_id": "bfc98809aacb", "generation_result": [{"code": "function Slime:angryFace(trueFalse)\n\t\tif self._angryFace ~= trueFalse then\n\t\tself._angryFace = trueFalse\n\t\tif self._angryFace then\n\t\t\tself._sprite3d:setTexture(\"model/slime/baozi.jpg\")\n\t\telse\n\t\t\tself._sprite3d:setTexture(\"model/slime/slime.jpg\")\n\t\tend\n\tend", "CodeBleu_score": 72.31809466733338}, {"code": "function Slime:angryFace(trueFalse)\n\t\tif self._angryFace ~= trueFalse then\n\t\tif trueFalse then\n\t\t\tself._sprite3d:setTexture(\"model/slime/baozi.jpg\")\n\t\telse\n\t\t\tself._sprite3d:setTexture(\"model/slime/slime.jpg\")\n\t\tend\n\t\tself._angryFace = trueFalse\n\tend", "CodeBleu_score": 71.09629115921989}, {"code": "function Slime:angryFace(trueFalse)\n\t\tif self._angryFace ~= trueFalse then\n\t\tif trueFalse then\n\t\t\tself._sprite3d:setTexture(\"model/slime/baozi.jpg\")\n\t\telse\n\t\t\tself._sprite3d:setTexture(\"model/slime/baozi2.jpg\")\n\t\tend\n\t\tself._angryFace = trueFalse\n\tend", "CodeBleu_score": 71.815046257706}]}
{"instance_id": "546a0b8fb77b", "generation_result": [{"code": "override fun getCharPixmap(char: Char): Pixmap{\n\tsymbolString = char.toString()\nval textWidth = paint.measureText(symbolString)\nval textHeight = paint.fontMetrics.descent - paint.fontMetrics.ascent\nval bitmapWidth = ceil(textWidth).toInt()\nval bitmapHeight = ceil(textHeight).toInt()\nval bitmap = Bitmap.createBitmap(bitmapWidth, bitmapHeight, Bitmap.Config.ARGB_8888)\nval canvas = Canvas(bitmap)\ncanvas.drawText(symbolString, 0f, -paint.fontMetrics.ascent, paint)\nval pixmap = Pixmap(bitmap.width, bitmap.height, Pixmap.Format.RGBA8888)\npixmap.drawPixels(bitmap.pixels, 0, bitmap.width, 0, 0, bitmap.width, bitmap.height)\nbitmap.recycle()\nreturn pixmap\n}", "CodeBleu_score": 41.97430747461832}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\tbitmap = Bitmap.createBitmap(\nceil(paint.measureText(char.toString())).toInt(),\npaint.textSize.toInt(),\nBitmap.Config.ARGB_8888\n)\nval canvas = Canvas(bitmap)\ncanvas.drawText(char.toString(), 0f, 0f, paint)\nval pixmap = Pixmap(bitmap.width, bitmap.height, Pixmap.Format.RGBA8888)\npixmap.drawPixmap(bitmap, 0, 0)\nbitmap.recycle()\nreturn pixmap\n}", "CodeBleu_score": 26.975000076090026}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\ttext = char.toString()\nval textWidth = paint.measureText(text)\nval textHeight = paint.textSize\nval bitmap = Bitmap.createBitmap(ceil(textWidth).toInt(), ceil(textHeight).toInt(), Bitmap.Config.ARGB_8888)\nval canvas = Canvas(bitmap)\ncanvas.drawText(text, 0f, textHeight, paint)\nval pixmap = Pixmap(bitmap.width, bitmap.height, Pixmap.Format.RGBA8888)\npixmap.drawPixmap(bitmap, 0, 0)\nbitmap.recycle()\nreturn pixmap\n}", "CodeBleu_score": 29.77015204970874}]}
{"instance_id": "9c1ce2567ce1", "generation_result": [{"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n\n        val uri = Uri.parse(suggestedLocation)\n        val fileName = uri.lastPathSegment\n        if (fileName == null) {\n            onError(PlatformSaverLoader.InvalidLocation())\n            return\n        }\n        val request = Request(onFileChosen = {\n            contentResolver.openOutputStream(it).use { outputStream ->\n                try {\n                    outputStream.write(data.toByteArray())\n                    onSaved(it.toString())\n                } catch (ex: Exception) {\n                    onError(ex)\n                }\n            }\n        }, onError = { onError(it) })\n        val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n            addCategory(Intent.CATEGORY_OPENABLE)\n            type = \\\"text/plain\\\"\n            putExtra(Intent.EXTRA_TITLE, fileName)\n        }\n        activity.startActivityForResult(intent, requestCode)\n        requests[requestCode] = request\n        requestCode++\n    }", "CodeBleu_score": 59.32563810133063}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\tval uri = Uri.parse(suggestedLocation)\n        if (uri.scheme == \"content\") {\n            val takeFlags = Intent.FLAG_GRANT_READ_URI_PERMISSION or Intent.FLAG_GRANT_WRITE_URI_PERMISSION\n            val takeIntent = Intent(Intent.ACTION_OPEN_DOCUMENT).apply {\n                addCategory(Intent.CATEGORY_OPENABLE)\n                type = \"*/*\"\n                putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n                addFlags(takeFlags)\n            }\n            activity.startActivityForResult(takeIntent, requestCode)\n            requests[requestCode] = Request({\n                val outputStream = contentResolver.openOutputStream(it)\n                outputStream?.use {\n                    outputStream.write(data.toByteArray())\n                    outputStream.flush()\n                    outputStream.close()\n                    onSaved(it.toString())\n                }\n            }, onError)\n            requestCode++\n        } else {\n            onError(PlatformSaverLoader.Unsupported())\n        }\n    }", "CodeBleu_score": 52.92850455469469}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\tval uri = Uri.parse(suggestedLocation)\n        val filename = uri.lastPathSegment\n        if (filename == null) {\n            onError(PlatformSaverLoader.InvalidLocation())\n            return\n        }\n        val request = Request({\n            val outputStream = contentResolver.openOutputStream(it)?: return@Request onError(PlatformSaverLoader.FileNotFound())\n            outputStream.write(data.toByteArray())\n            outputStream.close()\n            onSaved(it.toString())\n        }, onError)\n        requests[requestCode] = request\n        val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n            addCategory(Intent.CATEGORY_OPENABLE)\n            type = \"text/plain\"\n            putExtra(Intent.EXTRA_TITLE, filename)\n        }\n        activity.startActivityForResult(intent, requestCode)\n        requestCode++\n    }", "CodeBleu_score": 54.36511677585013}]}
{"instance_id": "ea556fe12030", "generation_result": [{"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n// When we loaded, we returned a \"content://\" URI as file location.\nval suggestedUri = Uri.parse(suggestedLocation)\nval fileName = getFilename(suggestedUri, suggestedLocation)\n\nval onFileChosen = { uri: Uri ->\n    var stream: InputStream? = null\n    try {\n        stream = contentResolver.openInputStream(uri)\n        val reader = stream.bufferedReader()\n        val data = reader.readText()\n        onLoaded(data, uri.toString())\n    } catch (ex: Exception) {\n        onError(ex)\n    } finally {\n        stream?.close()\n    }\n}\n\nrequests[requestCode] = Request(onFileChosen, onError)\nopenLoadFileChooser(fileName, suggestedUri, requestCode)\nrequestCode += 1\n}", "CodeBleu_score": 80.10737677800861}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n//        val onFileChosen = { uri: Uri ->\n//            var stream: InputStream? = null\n//            try {\n//                stream = contentResolver.openInputStream(uri)\n//                val data = stream.bufferedReader().use { it.readText() }\n//                onLoaded(data, uri.toString())\n//            } catch (ex: Exception) {\n//                onError(ex)\n//            } finally {\n//                stream?.close()\n//            }\n//        }\n//\n//        requests[requestCode] = Request(onFileChosen, onError)\n//        openLoadFileChooser(requestCode)\n//        requestCode += 1\n    }", "CodeBleu_score": 19.45536830701614}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n// When we loaded, we returned a \"content://\" URI as file location.\nval suggestedUri = Uri.parse(suggestedLocation)\nval fileName = getFilename(suggestedUri, suggestedLocation)\n\nval onFileChosen = { uri: Uri ->\n    var stream: InputStream? = null\n    try {\n        stream = contentResolver.openInputStream(uri)\n        val data = stream!!.bufferedReader().use { it.readText() }\n        onLoaded(data, uri.toString())\n    } catch (ex: Exception) {\n        onError(ex)\n    } finally {\n        stream?.close()\n    }\n}\n\nrequests[requestCode] = Request(onFileChosen, onError)\nopenLoadFileChooser(fileName, suggestedUri, requestCode)\nrequestCode += 1\n}", "CodeBleu_score": 84.76644819275427}]}
{"instance_id": "813990d9bb4d", "generation_result": [{"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\tl intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\naddCategory(Intent.CATEGORY_OPENABLE)\ntype = \\\"application/json\\\"\nputExtra(Intent.EXTRA_TITLE, fileName)\nif (uri.scheme == \\\"content\\\") {\nputExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n}\n}\nactivity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 63.63798294654297}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\tl intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\naddCategory(Intent.CATEGORY_OPENABLE)\ntype = \\\"application/json\\\"\nputExtra(Intent.EXTRA_TITLE, fileName)\nif (uri.scheme == \\\"content\\\") {\nputExtra(Intent.EXTRA_INITIAL_URI, uri)\n}\n}\nactivity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 62.88155323517082}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\tl intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\naddCategory(Intent.CATEGORY_OPENABLE)\ntype = \"application/json\"\nputExtra(Intent.EXTRA_TITLE, fileName)\nif (uri.scheme == \\\"content\\\") {\nputExtra(Intent.EXTRA_INITIAL_URI, uri)\n}\n}\nactivity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 64.32851467561265}]}
{"instance_id": "a423b39ba6fe", "generation_result": [{"code": "fun createNotificationChannelInfo(appContext: Context){\n\tificationManager = appContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\nval notificationChannel = NotificationChannel(\nNOTIFICATION_CHANNEL_ID_INFO,\nappContext.getString(R.string.notification_channel_info_name),\nNotificationManager.IMPORTANCE_DEFAULT\n)\nnotificationChannel.description = appContext.getString(R.string.notification_channel_info_description)\nnotificationChannel.enableLights(true)\nnotificationChannel.lightColor = Color.BLUE\nnotificationChannel.enableVibration(true)\nnotificationChannel.vibrationPattern = longArrayOf(100, 200, 300, 400, 500, 400, 300, 200, 400)\nnotificationChannel.setShowBadge(false)\nnotificationManager.createNotificationChannel(notificationChannel)\n}", "CodeBleu_score": 53.17417960333029}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\ttificationChannel = NotificationChannel(\n\t\tNOTIFICATION_CHANNEL_ID_INFO,\n\t\tappContext.getString(R.string.notification_channel_info_name),\n\t\tNotificationManager.IMPORTANCE_DEFAULT\n\t)\n\tnotificationChannel.description = appContext.getString(R.string.notification_channel_info_description)\n\tnotificationChannel.enableLights(true)\n\tnotificationChannel.lightColor = Color.RED\n\tnotificationChannel.enableVibration(true)\n\tnotificationChannel.vibrationPattern = longArrayOf(100, 200, 300, 400, 500, 400, 300, 200, 400)\n\n\tval notificationManager = appContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n\tnotificationManager.createNotificationChannel(notificationChannel)\n}", "CodeBleu_score": 52.30988356438526}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\ttificationManager = appContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n\tval notificationChannelInfo = NotificationChannel(NOTIFICATION_CHANNEL_ID_INFO, \"Unciv Info\", NotificationManager.IMPORTANCE_DEFAULT)\n\tnotificationChannelInfo.description = \"Unciv Info\"\n\tnotificationChannelInfo.enableLights(true)\n\tnotificationChannelInfo.lightColor = Color.BLUE\n\tnotificationChannelInfo.enableVibration(true)\n\tnotificationChannelInfo.vibrationPattern = longArrayOf(100, 200, 300, 400, 500, 400, 300, 200, 400)\n\tnotificationChannelInfo.setShowBadge(false)\n\tnotificationChannelInfo.lockscreenVisibility = Notification.VISIBILITY_PUBLIC\n\tnotificationManager.createNotificationChannel(notificationChannelInfo)\n}", "CodeBleu_score": 35.57564318174835}]}
{"instance_id": "4f3e7f77a567", "generation_result": [{"code": "fun packImages(workingPath: String){\n\tval settings = getDefaultSettings()\n\nval assetsFolder = File(workingPath)\nval modsFolder = File(workingPath + \"/mods\")\n\ntry {\nval assets = packImages(assetsFolder, settings)\nval mods = packImages(modsFolder, settings)\n\n// Write the JSON file\nval json = Json()\nval jsonFile = File(workingPath + \"/assets/data/packed.json\")\njson.prettyPrint = true\njson.write(jsonFile, assets)\n\n// Copy the JSON file to the main assets folder\nval mainAssetsFolder = File(workingPath + \"/assets/data\")\nif (!mainAssetsFolder.exists()) {\nmainAssetsFolder.mkdir()\n}\nFiles.copy(jsonFile.toPath(), mainAssetsFolder.toPath())\n\n// Copy the JSON file to the mods folder\nval modsJsonFile = File(workingPath + \"/mods/data/packed.json\")\nFiles.copy(jsonFile.toPath(), modsJsonFile.toPath())\n\n// Copy the JSON file to the main assets folder\nval mainModsFolder = File(workingPath + \"/mods/data\")\nif (!mainModsFolder.exists()) {\nmainModsFolder.mkdir()\n}\nFiles.copy(modsJsonFile.toPath(), mainModsFolder.toPath())\n\n} catch (e: Exception) {\nprintln(e)\n}\n}", "CodeBleu_score": 45.73117149243778}, {"code": "fun packImages(workingPath: String){\n\tval settings = getDefaultSettings()\nval assetsDir = File(workingPath)\nval modsDir = File(workingPath, \"mods\")\nval mods = modsDir.listFiles()\n\n// Pack main assets\nval assets = assetsDir.listFiles { file -> file.isFile && file.name.endsWith(\".png\") }\nval assetsAtlas = File(assetsDir, \"assets.atlas\")\nval assetsAtlasJson = File(assetsDir, \"assets.atlas.json\")\nval assetsAtlasPng = File(assetsDir, \"assets.png\")\n\nval assetsAtlasFiles = packImages(settings, assets, assetsAtlas, assetsAtlasJson, assetsAtlasPng)\n\n// Pack mods\nmods?.forEach { mod ->\nif (mod.isDirectory &&!mod.isHidden) {\nval modAtlas = File(mod, \"mod.atlas\")\nval modAtlasJson = File(mod, \"mod.atlas.json\")\nval modAtlasPng = File(mod, \"mod.png\")\nval modAtlasFiles = packImages(settings, mod.listFiles { file -> file.isFile && file.name.endsWith(\".png\") }, modAtlas, modAtlasJson, modAtlasPng)\n\nval modJson = File(mod, \"mod.json\")\nval modJsonString = Json().prettyPrint(modAtlasFiles)\nFiles.write(modJson.toPath(), modJsonString.toByteArray())\n}\n}\n}", "CodeBleu_score": 45.82482740989816}, {"code": "fun packImages(workingPath: String){\n\t", "CodeBleu_score": 1.4349816505955142}]}
{"instance_id": "206dbb3c21eb", "generation_result": [{"code": "suspend fun reloadWorldscreen(){\n\tif (worldScreen!= null) {\nworldScreen!!.dispose()\nworldScreen = null\n}\n\nval gameInfo = gameInfo?: return\n\nval worldScreen = loadGame(gameInfo)\nworldScreen.getRestoreState()?.restore()\n}", "CodeBleu_score": 40.74066303524289}, {"code": "suspend fun reloadWorldscreen(){\n\t", "CodeBleu_score": 3.349436022099892}, {"code": "suspend fun reloadWorldscreen(){\n\twithThreadPoolContext {\n// Reload the world screen, if it is already loaded.\n// Otherwise, we would have to load the game again, which is not what we want.\nif (worldScreen!= null) {\nval worldScreenRestoreState = worldScreen!!.getRestoreState()\nval newWorldScreen = WorldScreen(gameInfo!!, worldScreenRestoreState)\nworldScreen = newWorldScreen\nval moreThanOnePlayer = gameInfo!!.civilizations.count { it.playerType == PlayerType.Human } > 1\nval isSingleplayer =!gameInfo!!.gameParameters.isOnlineMultiplayer\nval screenToShow = if (moreThanOnePlayer && isSingleplayer) {\nPlayerReadyScreen(newWorldScreen)\n} else {\nnewWorldScreen\n}\nscreenStack.addLast(screenToShow)\nsetScreen(screenToShow)\n}\n}\n}", "CodeBleu_score": 43.83940657303809}]}
{"instance_id": "2d8fdcb5ad6f", "generation_result": [{"code": "fun goToMainMenu(): MainMenuScreen{\n\t//    val mainMenu = MainMenuScreen()\n//    setScreen(mainMenu)\n//    return mainMenu\n}", "CodeBleu_score": 1.8487999365766887}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\t//    val mainMenu = MainMenuScreen()\n//    setAsRootScreen(mainMenu)\n//    return mainMenu\n}", "CodeBleu_score": 1.8487999365766887}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\t", "CodeBleu_score": 1.6510664568825009}]}
{"instance_id": "df60142d384c", "generation_result": [{"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t val window = getWindow()\n val graphics = Gdx.graphics\n val monitor = graphics.monitor\n val screenBounds = graphics.screenBounds\n val windowBounds = graphics.windowBounds\n val windowWidth = settings.windowWidth\n val windowHeight = settings.windowHeight\n val windowX = settings.windowX\n val windowY = settings.windowY\n val windowMode = settings.windowMode\n val screenWidth = screenBounds.width\n val screenHeight = screenBounds.height\n val isFillingDesktop = windowWidth == screenWidth && windowHeight == screenHeight\n val isFullscreen = windowMode == ScreenMode.Fullscreen\n val isBorderless = windowMode == ScreenMode.Borderless\n if (isFullscreen) {\n graphics.setFullscreenMode(Gdx.graphics.displayMode)\n } else {\n graphics.setWindowedMode(windowWidth, windowHeight)\n }\n if (isBorderless) {\n window.restoreWindow()\n }\n if (isFillingDesktop) {\n window.maximizeWindow()\n } else {\n val maxX = screenWidth - windowWidth\n val maxY = screenHeight - windowHeight\n val newWindowX = maxX.coerceAtLeast(windowX)\n val newWindowY = maxY.coerceAtLeast(windowY)\n window.setLocation(newWindowX, newWindowY)\n }\n return isFillingDesktop\n }", "CodeBleu_score": 36.0136425706192}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t val window = getWindow()?: return false\n val bounds = Toolkit.getDefaultToolkit().screenSize\n val width = settings.windowWidth.coerceAtMost(bounds.width)\n val height = settings.windowHeight.coerceAtMost(bounds.height)\n val x = (bounds.width - width) / 2\n val y = (bounds.height - height) / 2\n window.setBounds(x, y, width, height)\n val config = Lwjgl3ApplicationConfiguration()\n config.setWindowedMode(width.roundToInt(), height.roundToInt())\n config.apply {\n val monitor = Gdx.graphics.monitor\n if (monitor!= null) {\n val graphics = Lwjgl3Graphics(config)\n graphics.setMonitor(monitor)\n }\n }\n Gdx.graphics.apply {\n setWindowedMode(config.windowedMode)\n setWindowIcon(config.windowIcon)\n setVSync(config.vSync)\n setContinuousRendering(config.continuousRendering)\n setDepthSize(config.depthSize)\n setStencilSize(config.stencilSize)\n setSamples(config.samples)\n setBufferFormat(config.bufferFormat)\n }\n return width == bounds.width && height == bounds.height\n }", "CodeBleu_score": 45.277341357147634}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t val display = PlatformDisplay.get()\n val graphicsConfig = Lwjgl3Graphics.newGraphicsConfiguration(display)\n val window = getWindow()\n val monitor = display.getMonitor()\n val bounds = monitor.bounds\n val windowWidth = settings.windowWidth\n val windowHeight = settings.windowHeight\n val windowX = bounds.x + (bounds.width - windowWidth) / 2\n val windowY = bounds.y + (bounds.height - windowHeight) / 2\n val windowed = window.windowed\n if (windowed) {\n window.restoreWindow()\n }\n window.setBounds(windowX, windowY, windowWidth, windowHeight)\n graphicsConfig.windowBounds = window.bounds\n graphicsConfig.windowed =!windowed\n Gdx.graphics.setGraphicsMode(graphicsConfig)\n return window.bounds.width == bounds.width && window.bounds.height == bounds.height\n }", "CodeBleu_score": 40.73810782638897}]}
{"instance_id": "a8b17234c4e5", "generation_result": [{"code": "private fun getLinuxDistro(): String{\n\teFile = FileHandle(\"/etc/os-release\")\nif (!osReleaseFile.exists()) return \"\"\n\nval osReleaseLines = osReleaseFile.readString().split('\n').map { it.trim() }\nval osReleaseEntries = osReleaseLines.associate { it.split(\"=\", limit = 2) }\n\nif (\"NAME\"!in osReleaseEntries) return \"\"\n\nval name = osReleaseEntries[\"NAME\"]!!\nval version = osReleaseEntries[\"VERSION\"]\n\nreturn if (version == null) name else \"$name $version\"\n}", "CodeBleu_score": 38.041584351523696}, {"code": "private fun getLinuxDistro(): String{\n\teFile = FileHandle(\"etc/os-release\")\nif (!osReleaseFile.exists()) return \"\"\n\nval osRelease = osReleaseFile.readString().split(\"\n\")\nval osReleaseMap = osRelease.associate { it.split(\"=\", limit = 2) }\n\nif (\"NAME\"!in osReleaseMap) return \"\"\n\nval name = osReleaseMap[\"NAME\"]\nval version = osReleaseMap[\"VERSION\"]\n\nreturn name?.run { \"$this ${version?: \"\"}\" }?: version?: \"\"\n}", "CodeBleu_score": 35.79012311588919}, {"code": "private fun getLinuxDistro(): String{\n\te = FileHandle(Gdx.files.local(\"etc/os-release\"))\nif (!osRelease.exists()) return \"\"\n\nval entries: Map<String, String> = try {\nval lines = osRelease.readString().split('\n').map { it.trim() }\nlines.map { it.split(\"=\") }.filter { it.size == 2 }.associate { it[0] to it[1] }\n} catch (_: Throwable) { mapOf() }\n\nif (\"NAME\"!in entries) return \"\"\n\nreturn entries[\"PRETTY_NAME\"]?: entries[\"NAME\"] + \" \" + entries[\"VERSION\"]\n}", "CodeBleu_score": 59.913824348134106}]}
{"instance_id": "36a1d2e56540", "generation_result": [{"code": "private fun flashWindow(){\n\t", "CodeBleu_score": 0.9483643708488229}, {"code": "private fun flashWindow(){\n\t\n//    val window = window?: return Log.warn(\"Tried to flash window but window was null\")\n//\n//    // On Windows, we use the Win32 API directly.\n//    if (Platform.isWindows) {\n//        flashWindowOnWindows(window)\n//        return\n//    }\n//\n//    // On macOS, we use the GLFW API directly.\n//    if (Platform.isMac) {\n//        flashWindowOnMac(window)\n//        return\n//    }\n//\n//    // On Linux, we use the GLFW API directly.\n//    if (Platform.isLinux) {\n//        flashWindowOnLinux(window)\n//        return\n//    }\n//\n//    // On other platforms, we use the GLFW API directly.\n//    flashWindowOnOther(window)\n}", "CodeBleu_score": 1.0236704731529351}, {"code": "private fun flashWindow(){\n\t\n// 1. Try the GLFW method\ntry {\nwindow?.requestAttention()\n} catch (e: Exception) {\nLog.error(\"Failed to request window attention using GLFW: ${e.message}\")\n}\n\n// 2. Try the platform-specific method\ntry {\nval hwnd = window?.handle?: return\nval hwndPtr = Pointer.createConstant(hwnd)\nval hwndPtrPtr = Pointer.createConstant(hwndPtr)\nval flash = WinUser.FLASHWINFO()\nflash.hwnd = hwndPtrPtr\nflash.dwFlags = WinUser.FLASHWINFO.FLASHW_ALL\nflash.uCount = 3\nflash.dwTimeout = 0\nval result = User32.INSTANCE.FlashWindowEx(flash)\nif (!result) {\nLog.error(\"Failed to request window attention using platform-specific API: ${WinNT.INSTANCE.GetLastError()}\")\n}\n} catch (e: Exception) {\nLog.error(\"Failed to request window attention using platform-specific API: ${e.message}\")\n}\n\n}", "CodeBleu_score": 45.847265751820764}]}
{"instance_id": "8e3c7096415a", "generation_result": [{"code": "public void onFullBackup(FullBackupDataOutput data){\n\t\t//backup shared preferences\n\tFile prefs = getApplicationContext().getSharedPreferences(AndroidLauncher.PREFS_FILE, 0).getFile();\n\tif (prefs.exists()) {\n\t\ttry {\n\t\t\tdata.writeEntityHeader(AndroidLauncher.PREFS_FILE, 0, prefs.length());\n\t\t\tdata.writeEntityData(prefs, prefs.length());\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t//backup rankings\n\tFile rankings = new File(AndroidLauncher.getExternalStorage(), AndroidLauncher.RANKINGS_FILE);\n\tif (rankings.exists()) {\n\t\ttry {\n\t\t\tdata.writeEntityHeader(AndroidLauncher.RANKINGS_FILE, 0, rankings.length());\n\t\t\tdata.writeEntityData(rankings, rankings.length());\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t//backup badges\n\tFile badges = new File(AndroidLauncher.getExternalStorage(), AndroidLauncher.BADGES_FILE);\n\tif (badges.exists()) {\n\t\ttry {\n\t\t\tdata.writeEntityHeader(AndroidLauncher.BADGES_FILE, 0, badges.length());\n\t\t\tdata.writeEntityData(badges, badges.length());\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t//backup journal entries\n\tFile journal = new File(AndroidLauncher.getExternalStorage(), AndroidLauncher.JOURNAL_FILE);\n\tif (journal.exists()) {\n\t\ttry {\n\t\t\tdata.writeEntityHeader(AndroidLauncher.JOURNAL_FILE, 0, journal.length());\n\t\t\tdata.writeEntityData(journal, journal.length());\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "CodeBleu_score": 18.220455180674627}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t\t//backup shared preferences\n\tFile prefs = getFilesDir();\n\tif (prefs.exists()) {\n\t\tdata.writeEntityHeader(prefs.getName(), 0, prefs.length());\n\t\ttry {\n\t\t\tdata.writeEntityData(prefs, true);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t//backup rankings\n\tif (Rankings.entries.size() > 0) {\n\t\tdata.writeEntityHeader(\"rankings\", 0, Rankings.entries.size());\n\t\tfor (Rankings.Entry e : Rankings.entries) {\n\t\t\ttry {\n\t\t\t\tdata.writeEntityHeader(e.name, 0, e.size());\n\t\t\t\tdata.writeEntityData(e.file, true);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tex.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\t//backup badges\n\tif (Badges.entries.size() > 0) {\n\t\tdata.writeEntityHeader(\"badges\", 0, Badges.entries.size());\n\t\tfor (Badges.Entry e : Badges.entries) {\n\t\t\ttry {\n\t\t\t\tdata.writeEntityHeader(e.name, 0, e.size());\n\t\t\t\tdata.writeEntityData(e.file, true);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tex.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\n\t//backup journal\n\tif (Journal.entries.size() > 0) {\n\t\tdata.writeEntityHeader(\"journal\", 0, Journal.entries.size());\n\t\tfor (Journal.Entry e : Journal.entries) {\n\t\t\ttry {\n\t\t\t\tdata.writeEntityHeader(e.name, 0, e.size());\n\t\t\t\tdata.writeEntityData(e.file, true);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tex.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 20.934762805143038}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t\t//back up shared preferences file\n\tFile file = new File(getContext().getFilesDir(), \"preferences.xml\");\n\tif (file.exists()) {\n\t\tdata.writeEntityHeader(1, 0);\n\t\tdata.writeEntityData(file, file.length());\n\t}\n\n\t//back up rankings\n\tif (Rankings.exists()) {\n\t\tdata.writeEntityHeader(2, 0);\n\t\tdata.writeEntityData(Rankings.file(), Rankings.file().length());\n\t}\n\n\t//back up badges\n\tif (Badges.exists()) {\n\t\tdata.writeEntityHeader(3, 0);\n\t\tdata.writeEntityData(Badges.file(), Badges.file().length());\n\t}\n\n\t//back up journal entries\n\tif (Journal.exists()) {\n\t\tdata.writeEntityHeader(4, 0);\n\t\tdata.writeEntityData(Journal.file(), Journal.file().length());\n\t}\n}", "CodeBleu_score": 21.401223385691598}]}
{"instance_id": "583999724a15", "generation_result": [{"code": "public boolean connectedToUnmeteredNetwork(){\n\tityManager connectivityManager = (ConnectivityManager) Gdx.app.getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);\n\tNetworkInfo activeNetwork = connectivityManager.getActiveNetworkInfo();\n\tif (activeNetwork!= null && activeNetwork.isConnected()) {\n\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\t\t\treturn!activeNetwork.isActiveNetworkMetered();\n\t\t} else {\n\t\t\treturn activeNetwork.getType() == ConnectivityManager.TYPE_WIFI || activeNetwork.getType() == ConnectivityManager.TYPE_WIMAX || activeNetwork.getType() == ConnectivityManager.TYPE_BLUETOOTH || activeNetwork.getType() == ConnectivityManager.TYPE_ETHERNET;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 65.79791786612059}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\tityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\t\tNetworkInfo activeNetwork = connectivityManager.getActiveNetworkInfo();\n\t\treturn activeNetwork!= null &&!activeNetwork.isMetered();\n\t} else {\n\t\tNetworkInfo activeNetwork = connectivityManager.getActiveNetworkInfo();\n\t\treturn activeNetwork!= null && activeNetwork.isConnected() && (activeNetwork.getType() == ConnectivityManager.TYPE_WIFI || activeNetwork.getType() == ConnectivityManager.TYPE_WIMAX || activeNetwork.getType() == ConnectivityManager.TYPE_BLUETOOTH || activeNetwork.getType() == ConnectivityManager.TYPE_ETHERNET);\n\t}\n}", "CodeBleu_score": 73.6037251034597}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\tityManager connectivityManager = (ConnectivityManager) AndroidLauncher.instance.getSystemService(Context.CONNECTIVITY_SERVICE);\n\tNetworkInfo activeNetwork = connectivityManager.getActiveNetworkInfo();\n\tif (activeNetwork!= null && activeNetwork.isConnected()) {\n\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\t\t\treturn!activeNetwork.isMetered();\n\t\t} else {\n\t\t\treturn activeNetwork.getType() == ConnectivityManager.TYPE_WIFI || activeNetwork.getType() == ConnectivityManager.TYPE_WIMAX || activeNetwork.getType() == ConnectivityManager.TYPE_BLUETOOTH || activeNetwork.getType() == ConnectivityManager.TYPE_ETHERNET;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 78.27115400720062}]}
{"instance_id": "f8bd6cd4826b", "generation_result": [{"code": "protected boolean affectHero( Hero hero ){\n\t", "CodeBleu_score": 3.251031176819552}, {"code": "protected boolean affectHero( Hero hero ){\n\t", "CodeBleu_score": 3.251031176819552}, {"code": "protected boolean affectHero( Hero hero ){\n\t", "CodeBleu_score": 3.251031176819552}]}
{"instance_id": "3a94f2e84c83", "generation_result": [{"code": "protected Item affectItem( Item item, int pos ){\n\t\tif (item instanceof Waterskin) {\n\t\tif (((Waterskin) item).isFull()) return null;\n\t\tSample.INSTANCE.play( Assets.Sounds.DRINK );\n\t\titem.sprite.emitter().start( Speck.factory( Speck.HEALING ), 0.4f, 4 );\n\t\titem.sprite.showStatusWithIcon(CharSprite.POSITIVE, Integer.toString(item.HT), FloatingText.HEALING);\n\t\t((Waterskin) item).fill();\n\t\tCellEmitter.get( pos ).start( ShaftParticle.FACTORY, 0.2f, 3 );\n\t\treturn item;\n\t}\n\tif (item instanceof Ankh) {\n\t\tif (((Ankh) item).isBlessed()) return null;\n\t\tSample.INSTANCE.play( Assets.Sounds.DRINK );\n\t\titem.sprite.emitter().start( Speck.factory( Speck.HEALING ), 0.4f, 4 );\n\t\titem.sprite.showStatusWithIcon(CharSprite.POSITIVE, Integer.toString(item.HT), FloatingText.HEALING);\n\t\t((Ankh) item).bless();\n\t\tCellEmitter.get( pos ).start( ShaftParticle.FACTORY, 0.2f, 3 );\n\t\treturn item;\n\t}\n\tif (item.isUncurseable()) {\n\t\tif (item instanceof ScrollOfRemoveCurse) {\n\t\t\tSample.INSTANCE.play( Assets.Sounds.DRINK );\n\t\t\titem.sprite.emitter().start( Speck.factory( Speck.HEALING ), 0.4f, 4 );\n\t\t\titem.sprite.showStatusWithIcon(CharSprite.POSITIVE, Integer.toString(item.HT), FloatingText.HEALING);\n\t\t\titem.belongings.uncurseEquipped();\n\t\t\tCellEmitter.get( pos ).start( ShaftParticle.FACTORY, 0.2f, 3 );\n\t\t\treturn item;\n\t\t}\n\t\treturn null;\n\t}\n\treturn null;\n}", "CodeBleu_score": 60.44431548473672}, {"code": "protected Item affectItem( Item item, int pos ){\n\t\tif (item instanceof Waterskin) {\n\t\tif (item.isFull()) {\n\t\t\tGLog.n( Messages.get(this, \"full\") );\n\t\t\treturn null;\n\t\t}\n\t\tGLog.p( Messages.get(this, \"fill\") );\n\t\titem.fill();\n\t\treturn item;\n\t}\n\tif (item instanceof Ankh) {\n\t\tif (item.isBlessed()) {\n\t\t\tGLog.n( Messages.get(this, \"blessed\") );\n\t\t\treturn null;\n\t\t}\n\t\tGLog.p( Messages.get(this, \"bless\") );\n\t\titem.bless();\n\t\treturn item;\n\t}\n\tif (item instanceof ScrollOfRemoveCurse) {\n\t\tif (item.isCursed()) {\n\t\t\tGLog.p( Messages.get(this, \"remove\") );\n\t\t\titem.removeCurse();\n\t\t\treturn item;\n\t\t}\n\t\tGLog.n( Messages.get(this, \"not_cursed\") );\n\t\treturn null;\n\t}\n\treturn null;\n}", "CodeBleu_score": 38.79471040271045}, {"code": "protected Item affectItem( Item item, int pos ){\n\t\tif (item instanceof Waterskin) {\n\t\tWaterskin skin = (Waterskin)item;\n\t\tif (skin.isFull()) return null;\n\t\tSample.INSTANCE.play( Assets.Sounds.DRINK );\n\t\tskin.fill();\n\t\tBlobEmitter.get( pos ).start( Speck.factory( Speck.HEALING ), 0.4f, 4 );\n\t\tDungeon.hero.interrupt();\n\t\tGLog.p( Messages.get(this, \"fill\") );\n\t\treturn item;\n\t}\n\tif (item instanceof Ankh) {\n\t\tAnkh ankh = (Ankh)item;\n\t\tif (ankh.isBlessed()) return null;\n\t\tSample.INSTANCE.play( Assets.Sounds.DRINK );\n\t\tankh.blessed();\n\t\tBlobEmitter.get( pos ).start( Speck.factory( Speck.HEALING ), 0.4f, 4 );\n\t\tDungeon.hero.interrupt();\n\t\tGLog.p( Messages.get(this, \"blessed\") );\n\t\treturn item;\n\t}\n\tif (item.isCursed() &&!item.isUncurseable()) {\n\t\tSample.INSTANCE.play( Assets.Sounds.DRINK );\n\t\tScrollOfRemoveCurse.removeCurse( item );\n\t\tBlobEmitter.get( pos ).start( Speck.factory( Speck.HEALING ), 0.4f, 4 );\n\t\tDungeon.hero.interrupt();\n\t\tGLog.p( Messages.get(this, \"removed\") );\n\t\treturn item;\n\t}\n\treturn null;\n}", "CodeBleu_score": 53.742768132758336}]}
{"instance_id": "d322228d1a3e", "generation_result": [{"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t//apply the buff\n\thero.buff(buffCls).attachTo(enemy);\n\t//check if the enemy was aligned as an enemy\n\tif (enemy.alignment == Char.Alignment.ENEMY) {\n\t\t//roll for loot\n\t\tenemy.loot(hero, enemy.lootChance(hero));\n\t\t//update kill statistics\n\t\tStatistics.kills(enemy.getClass());\n\t\t//process ascension challenges\n\t\tAscensionChallenge.process(enemy.getClass());\n\t}\n\t//if the hero is a Monk subclass, grant experience based on level comparison and buff the hero with additional energy\n\tif (hero.subclass == HeroSubClass.MONK) {\n\t\thero.gainExp(enemy.level() - hero.level());\n\t\thero.buff(EnergyBuff.class).add(1);\n\t}\n}", "CodeBleu_score": 25.97817470235015}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\tif (enemy.alignment == Char.Alignment.ENEMY) {\n\t\tenemy.alignment = Char.Alignment.ALLY;\n\t\tenemy.buff(buffCls);\n\t\tenemy.loot(hero);\n\t\tStatistics.kills++;\n\t\tif (hero.level > enemy.level) {\n\t\t\thero.exp += enemy.level - hero.level + 1;\n\t\t\tif (hero.subclass == HeroSubClass.MONK) {\n\t\t\t\thero.buff(EnergyBuff.class).apply(1);\n\t\t\t}\n\t\t}\n\t\tAscensionChallenge.check(hero, enemy.level);\n\t}\n}", "CodeBleu_score": 26.237239333793056}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\tif (enemy.alignment == Char.Alignment.ENEMY) {\n\t\tenemy.alignment = Char.Alignment.ALLY;\n\t\tif (enemy.buff(PinCushion.class)!= null) {\n\t\t\tenemy.buff(PinCushion.class).detach();\n\t\t}\n\t\tif (enemy.buff(buffCls) == null) {\n\t\t\tenemy.buff(buffCls);\n\t\t}\n\t\tif (enemy.isAlive()) {\n\t\t\tenemy.die(null);\n\t\t\thero.gainExp(enemy.level - hero.level, enemy.level);\n\t\t\thero.gainExp(enemy.level - hero.level, enemy.level);\n\t\t\tif (hero.subClass == HeroSubClass.MONK) {\n\t\t\t\thero.buff(new MonkEnergyBuff());\n\t\t\t}\n\t\t}\n\t\tStatistics.kills.add(enemy.getClass());\n\t\tif (hero.level > enemy.level) {\n\t\t\thero.ascend();\n\t\t}\n\t\tif (enemy.getClass() == Mimic.class) {\n\t\t\thero.ascend();\n\t\t}\n\t\tif (hero.level > enemy.level) {\n\t\t\thero.ascend();\n\t\t}\n\t\tif (enemy.getClass() == Mimic.class) {\n\t\t\thero.ascend();\n\t\t}\n\t}\n}", "CodeBleu_score": 34.944831165429875}]}
{"instance_id": "9ee21c0149f3", "generation_result": [{"code": "public static void processEnemyKill(Char enemy){\n\t\tif (Dungeon.hero.buff(AscensionChallenge.class)!= null) {\n\t\tif (enemy instanceof Ratmogrify.TransmogRat) {\n\t\t\tenemy = ((Ratmogrify.TransmogRat) enemy).getOriginal();\n\t\t}\n\n\t\tif (enemy.buff(AscensionBuffBlocker.class)!= null) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (Class<? extends Mob> cls : modifiers.keySet()) {\n\t\t\tif (cls.isAssignableFrom(enemy.getClass())) {\n\t\t\t\tDungeon.hero.buff(AscensionChallenge.class).stacks -= modifiers.get(cls);\n\t\t\t\tif (Dungeon.hero.buff(AscensionChallenge.class).stacks < 1) {\n\t\t\t\t\tDungeon.hero.buff(AscensionChallenge.class).stacks = 1;\n\t\t\t\t}\n\t\t\t\tif (Dungeon.hero.buff(AscensionChallenge.class).stacks < 5) {\n\t\t\t\t\tMessages.instance.msg(Messages.WEAKENING, Dungeon.hero.color(), Dungeon.hero.name());\n\t\t\t\t}\n\t\t\t\tif (Dungeon.hero.level.maxLevel() && Dungeon.hero.buff(AscensionChallenge.class).stacks == 1) {\n\t\t\t\t\tDungeon.hero.exp += enemy.exp;\n\t\t\t\t}\n\t\t\t\tBuffIndicator.updateBuffs();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 36.498148754914254}, {"code": "public static void processEnemyKill(Char enemy){\n\t", "CodeBleu_score": 0.5739817495090933}, {"code": "public static void processEnemyKill(Char enemy){\n\t\tif (Dungeon.hero.buff(AscensionChallenge.class)!= null) {\n\t\tif (enemy instanceof Ratmogrify.TransmogRat) {\n\t\t\tenemy = ((Ratmogrify.TransmogRat) enemy).getOriginal();\n\t\t}\n\n\t\tif (enemy.buff(AscensionBuffBlocker.class)!= null) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (Class<?extends Mob> cls : modifiers.keySet()) {\n\t\t\tif (cls.isAssignableFrom(enemy.getClass())) {\n\t\t\t\tDungeon.hero.buff(AscensionChallenge.class).stacks -= modifiers.get(cls);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (Dungeon.hero.buff(AscensionChallenge.class).stacks < 1) {\n\t\t\tGLog.w(Messages.get(AscensionChallenge.class, \"weaken\"));\n\t\t\tDungeon.hero.buff(AscensionChallenge.class).stacks = 0;\n\t\t}\n\n\t\tif (Dungeon.hero.level == Dungeon.hero.maxLevel) {\n\t\t\tDungeon.hero.giveXP(enemy.xp / 2);\n\t\t}\n\n\t\tDungeon.hero.buff(AscensionChallenge.class).refreshIndicators();\n\t}\n}", "CodeBleu_score": 36.67026052360697}]}
{"instance_id": "4fc9c3c1fcce", "generation_result": [{"code": "public static int AscensionCorruptResist(Mob m){\n\t\tif (Dungeon.hero.buff(AscensionChallenge.class)!= null) {\n\t\tif (m instanceof Ratmogrify.TransmogRat) {\n\t\t\tm = ((Ratmogrify.TransmogRat) m).getOriginal();\n\t\t}\n\t\tif (m.buff(AscensionBuffBlocker.class)!= null) {\n\t\t\treturn m.exp;\n\t\t}\n\t\tif (m instanceof RipperDemon) {\n\t\t\treturn 10;\n\t\t} else if (m instanceof Ghoul) {\n\t\t\treturn 7;\n\t\t} else {\n\t\t\tint resist = m.exp;\n\t\t\tif (m instanceof Skeleton || m instanceof Thief || m instanceof DM100 || m instanceof Guard || m instanceof Necromancer || m instanceof Bat || m instanceof Brute || m instanceof Shaman || m instanceof Spinner || m instanceof DM200 || m instanceof Ghoul || m instanceof Elemental || m instanceof Warlock || m instanceof Monk || m instanceof Golem || m instanceof RipperDemon || m instanceof Succubus || m instanceof Eye || m instanceof Scorpio) {\n\t\t\t\tresist = Math.max(resist, 13);\n\t\t\t}\n\t\t\treturn resist;\n\t\t}\n\t}\n\treturn m.exp;\n}", "CodeBleu_score": 50.048248662921324}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t", "CodeBleu_score": 1.4729374628756662}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t\tif (m instanceof Ratmogrify.TransmogRat) {\n\t\tm = ((Ratmogrify.TransmogRat) m).getOriginal();\n\t}\n\tif (m.buff(AscensionBuffBlocker.class)!= null) {\n\t\treturn m.EXP;\n\t}\n\tif (m instanceof RipperDemon) {\n\t\treturn 10;\n\t}\n\tif (m instanceof Ghoul) {\n\t\treturn 7;\n\t}\n\tif (m instanceof Skeleton || m instanceof Thief || m instanceof DM100 || m instanceof Guard || m instanceof Necromancer || m instanceof Bat || m instanceof Brute || m instanceof Shaman || m instanceof Spinner || m instanceof DM200 || m instanceof Ghoul || m instanceof Elemental || m instanceof Warlock || m instanceof Monk || m instanceof Golem || m instanceof RipperDemon || m instanceof Succubus || m instanceof Eye || m instanceof Scorpio) {\n\t\treturn Math.max(13, m.EXP);\n\t}\n\treturn m.EXP;\n}", "CodeBleu_score": 46.00689608573865}]}
{"instance_id": "bdc8df5952c7", "generation_result": [{"code": "public void hit( Char enemy ){\n\tif (enemy.isDead() || enemy.buff(Corruption.class)!= null && enemy.hp() == enemy.hpMax()) {\n\t\treturn;\n\t}\n\tcomboTime = initialComboTime;\n\tcount++;\n\tif (enemy.isPlayer()) {\n\t\tfinal int talent = hero.talentLevel(Talent.Cleave);\n\t\tif (talent > 0) {\n\t\t\tcomboTime += talent * 0.2f;\n\t\t}\n\t\tActionIndicator.add(this);\n\t\tAttackIndicator.add(this);\n\t\tBuffIndicator.refresh();\n\t\tif (count >= 10) {\n\t\t\tBadges.combo.trigger();\n\t\t}\n\t\tGLog.n(Messages.get(Combo.class, \"combo\", count));\n\t}\n\tif (count >= 10) {\n\t\tvalidateMastery();\n\t}\n}", "CodeBleu_score": 34.582548748700184}, {"code": "public void hit( Char enemy ){\n\tcount++;\n\tcomboTime = initialComboTime;\n\tif ( enemy.isDead() || enemy.buff(Corruption.class)!= null && enemy.hp() == enemy.hpMax() ) {\n\t\tcomboTime += (float)Dungeon.hero.talent(Talent.Cleave) * 0.5f;\n\t}\n\tif ( enemy.isDead() ) {\n\t\tGLog.i(Messages.get(COMBO_HIT_KILL, enemy.name()));\n\t} else {\n\t\tGLog.i(Messages.get(COMBO_HIT, enemy.name()));\n\t}\n\tif ( Dungeon.hero.buff(Mastery.class)!= null ) {\n\t\tMastery mastery = Dungeon.hero.buff(Mastery.class);\n\t\tmastery.combo(count);\n\t}\n\tDungeon.hero.buff(BuffIndicator.class).refresh();\n\tDungeon.hero.buff(ActionIndicator.class).refresh();\n\tDungeon.hero.buff(AttackIndicator.class).refresh();\n\tDungeon.hero.buff(HeroIcon.class).refresh();\n\tif ( Dungeon.hero.buff(Mastery.class)!= null ) {\n\t\tMastery mastery = Dungeon.hero.buff(Mastery.class);\n\t\tmastery.combo(count);\n\t}\n}", "CodeBleu_score": 40.49281818819084}, {"code": "public void hit( Char enemy ){\n\tcount++;\n\tcomboTime = initialComboTime;\n\tif (enemy.dead() || enemy.buff(Corruption.class)!= null && enemy.hp() == enemy.hpMax()) {\n\t\tcomboTime += hero.talents.cleave.level * 0.5f;\n\t}\n\tActionIndicator.instance.add(this);\n\tBuffIndicator.instance.refresh();\n\tif (hero.talents.cleave.level > 0 && count >= hero.talents.cleave.level) {\n\t\tMessages.toast(Messages.COMBO);\n\t\tGLog.n(Messages.COMBO_MASTERY);\n\t}\n\tGLog.n(Messages.HIT, enemy.name(), count);\n}", "CodeBleu_score": 36.702380514658245}]}
{"instance_id": "abf7c664b4dd", "generation_result": [{"code": "public int capacity(){\n\t\tint capacity = baseCapacity();\n\tfor (Item item : inventory) {\n\t\tif (item instanceof Bag) {\n\t\t\tcapacity += ((Bag) item).capacity();\n\t\t}\n\t}\n\tif (owner.weapon() instanceof Wand) {\n\t\tcapacity -= ((Wand) owner.weapon()).capacity();\n\t}\n\treturn capacity;\n}", "CodeBleu_score": 31.07550715425137}, {"code": "public int capacity(){\n\t\tint capacity = baseCapacity();\n\tfor (Item item : owner.belongings.inventory) {\n\t\tcapacity += item.capacity();\n\t}\n\tif (owner.belongings.secondary!= null) {\n\t\tcapacity -= owner.belongings.secondary.capacity();\n\t}\n\treturn capacity;\n}", "CodeBleu_score": 27.806513249873564}, {"code": "public int capacity(){\n\t\tint capacity = baseCapacity();\n\tfor (Item item : inventory) {\n\t\tif (item instanceof Bag) {\n\t\t\tcapacity += ((Bag) item).capacity();\n\t\t}\n\t}\n\tif (owner.weapon() == null) {\n\t\treturn capacity;\n\t} else {\n\t\treturn capacity - owner.weapon().capacity();\n\t}\n}", "CodeBleu_score": 31.43330830410026}]}
{"instance_id": "b97e41e092d2", "generation_result": [{"code": "public void updateHT( boolean boostHP ){\n\t\tHT = (int) (10 + (1.5 * lvl) + (0.5 * lvl * (lvl - 1)) + (0.5 * lvl * (lvl - 1) * (lvl - 2)) + HTBoost);\n\tif (boostHP) {\n\t\tHP = Math.min(HT, HP);\n\t}\n}", "CodeBleu_score": 17.698193080107096}, {"code": "public void updateHT( boolean boostHP ){\n\t\tint base = 10 + ( ( lvl - 1 ) * 2 );\n\tint ringBoost = 0;\n\tint elixirBoost = 0;\n\t\tif ( boostHP ) {\n\t\t\tHP = Math.min( HT, HP + ( ( HT - HP ) * 0.5f ) );\n\t\t}\n\t\tfor ( RingOfMight ring : belongings.rings ) {\n\t\t\tif ( ring.active ) {\n\t\t\t\tringBoost += ring.boost;\n\t\t\t}\n\t\t}\n\t\tfor ( ElixirOfMight elixir : belongings.elixirs ) {\n\t\t\tif ( elixir.active ) {\n\t\t\t\telixirBoost += elixir.boost;\n\t\t\t}\n\t\t}\n\t\tHT = base + ringBoost + elixirBoost + HTBoost;\n\t\tHP = Math.min( HT, HP );\n\t}", "CodeBleu_score": 22.574275327280784}, {"code": "public void updateHT( boolean boostHP ){\n\t", "CodeBleu_score": 2.218965494326175}]}
{"instance_id": "b72bd91544e7", "generation_result": [{"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t", "CodeBleu_score": 3.535682149288207}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\tif (enemy.isMimic() &&!enemy.isEnemy(this)) {\n\t\tenemy.mimic(this);\n\t}\n\tif (wep.shoot(this, enemy)) {\n\t\tif (isGladiator()) {\n\t\t\tenemy.buff(new GladiatorCombo(this));\n\t\t}\n\t\tif (isDuelist()) {\n\t\t\tenemy.buff(new DuelistCombo(this));\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 9.336979213828172}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t", "CodeBleu_score": 3.535682149288207}]}
{"instance_id": "f265b39b6677", "generation_result": [{"code": "public int attackSkill( Char target ){\n\t", "CodeBleu_score": 3.516528221576535}, {"code": "public int attackSkill( Char target ){\n\t", "CodeBleu_score": 3.516528221576535}, {"code": "public int attackSkill( Char target ){\n\t", "CodeBleu_score": 3.516528221576535}]}
{"instance_id": "9e50c198348d", "generation_result": [{"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\tval start = Gdx.graphics.framesPerSecond\n\tval startTime = Gdx.graphics.framesSinceRendered\n\tval startNanoTime = Gdx.graphics.nanosSinceLastRender\n\tval startDelta = Gdx.graphics.deltaTime\n\tfor (i in 0 until repeats) {\n\t\ttick()\n\t\toperation()\n\t}\n\ttime.stop()\n\tval end = Gdx.graphics.framesPerSecond\n\tval endTime = Gdx.graphics.framesSinceRendered\n\tval endNanoTime = Gdx.graphics.nanosSinceLastRender\n\tval endDelta = Gdx.graphics.deltaTime\n\tif (printResults) {\n\t\tprintln(this)\n\t}\n\ttime.start()\n\ttime.framesPerSecond = end - start\n\ttime.framesSinceRendered = endTime - startTime\n\ttime.nanosSinceLastRender = endNanoTime - startNanoTime\n\ttime.deltaTime = endDelta - startDelta\n}", "CodeBleu_score": 45.84296479699815}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\tval time = this\n\tval start = System.nanoTime()\n\tfor (i in 0 until repeats) {\n\t\toperation()\n\t\ttime.tick()\n\t}\n\tval elapsed = System.nanoTime() - start\n\ttime.mean.addValue(elapsed / repeats)\n\ttime.min.addValue(elapsed / repeats)\n\ttime.max.addValue(elapsed / repeats)\n\tif (printResults) {\n\t\tprintln(this)\n\t}\n}", "CodeBleu_score": 49.612147201283044}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\treset()\n\ttick()\n\tfor (i in 0 until repeats) {\n\t\toperation()\n\t\ttick()\n\t}\n\tif (printResults) {\n\t\tprintln(toString())\n\t}\n}", "CodeBleu_score": 52.903077371468484}]}
{"instance_id": "5f6e11998a1f", "generation_result": [{"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\tcontract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }\n  val behaviorTree = BehaviorTree(rootTask, blackboard)\n  behaviorTree.init()\n  return behaviorTree\n}", "CodeBleu_score": 99.35775302985722}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\tcontract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }\n  return BehaviorTree(rootTask, blackboard).apply(init)\n}", "CodeBleu_score": 61.503399940646034}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\tcontract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }\nreturn BehaviorTree(rootTask, blackboard).apply(init)\n}", "CodeBleu_score": 60.89806252952372}]}
{"instance_id": "cdda12e45fb9", "generation_result": [{"code": "onPointerOver (){\n\tthis.scene.city.map.selectedCell.x = this.x;\nthis.scene.city.map.selectedCell.y = this.y;\n\nthis.tiles.highlight();\nthis.surrounding.highlight();\n\nthis.scene.city.map.selectedCell.tint = CONST.CELL_SELECTED_COLOR;\n\nif (this.heightmap) {\nthis.heightmap.alpha = CONST.CELL_HIGHLIGHT_ALPHA;\n}\n}", "CodeBleu_score": 30.77107625315178}, {"code": "onPointerOver (){\n\tthis.scene.city.map.selectedCell.x = this.x;\nthis.scene.city.map.selectedCell.y = this.y;\n\nthis.related.highlight();\nthis.tiles.highlight();\n\nif (this.heightmap) {\nthis.heightmap.alpha = 0.5;\n}\n}", "CodeBleu_score": 19.357350564608456}, {"code": "onPointerOver (){\n\t\n}", "CodeBleu_score": 0.9163461821476669}]}
{"instance_id": "850931ce3401", "generation_result": [{"code": "getTrafficDensity (){\n\tif (this.current < this.lightThreshold)\nreturn null;\nelse if (this.current < this.heavyThreshold)\nreturn 'light';\nelse\nreturn 'heavy';\n}", "CodeBleu_score": 41.48077249162584}, {"code": "getTrafficDensity (){\n\tif (this.current < this.lightThreshold) {\nreturn null;\n} else if (this.current < this.heavyThreshold) {\nreturn 'light';\n} else {\nreturn 'heavy';\n}\n}", "CodeBleu_score": 38.16703605552948}, {"code": "getTrafficDensity (){\n\t\tif (this.current >= this.heavyThreshold) {\n\t\treturn 'heavy';\n\t} else if (this.current >= this.lightThreshold) {\n\t\treturn 'light';\n\t} else {\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 37.98092369178042}]}
{"instance_id": "5958478bf873", "generation_result": [{"code": "restart: function (){\n\t", "CodeBleu_score": 25.419227090064833}, {"code": "restart: function (){\n\t", "CodeBleu_score": 25.419227090064833}, {"code": "restart: function (){\n\tthis._frameIndex = this.isReversed? this._frames.length - 1 : 0;\nthis.updateCurrentFrame(false, true);\n}", "CodeBleu_score": 11.426964251395642}]}
{"instance_id": "d2441e586d58", "generation_result": [{"code": "flash: function (color, duration, force, alpha){\n\t\n}", "CodeBleu_score": 8.102085899177318}, {"code": "flash: function (color, duration, force, alpha){\n\t\nif (color === undefined) { color = 0xffffff; }\nif (duration === undefined) { duration = 500; }\nif (force === undefined) { force = false; }\nif (alpha === undefined) { alpha = 1; }\n\nif (!force && this._flash.duration > 0)\n{\n    //  Can't reset an already running flash\n    return false;\n}\n\nthis._flash.color = color;\nthis._flash.duration = duration;\nthis._flash.alpha = alpha;\n\nthis._flash.x = 0;\nthis._flash.y = 0;\n\nreturn true;\n\n}", "CodeBleu_score": 65.60858502620323}, {"code": "flash: function (color, duration, force, alpha){\n\t\nif (color === undefined) { color = 0xffffff; }\nif (duration === undefined) { duration = 500; }\nif (force === undefined) { force = false; }\nif (alpha === undefined) { alpha = 1; }\n\nif (!force && this._flash.duration > 0)\n{\n//  Can't reset an already running flash\nreturn false;\n}\n\nthis._flash.color = color;\nthis._flash.duration = duration;\nthis._flash.alpha = alpha;\n\nthis.view.clear();\n\nthis.view.context.fillStyle = 'rgba(' + (color >> 16 & 0xff) + ',' + (color >> 8 & 0xff) + ',' + (color & 0xff) + ',' + alpha + ')';\nthis.view.context.fillRect(0, 0, this.width, this.height);\n\nreturn true;\n\n}", "CodeBleu_score": 73.18230161222026}]}
{"instance_id": "48b26381d975", "generation_result": [{"code": "createFluidLayer: function (children, addToWorld){\n\tif (addToWorld === undefined) { addToWorld = true; }\n\nthis.boundsFluid.width = this.width;\nthis.boundsFluid.height = this.height;\n\nvar layer = new Phaser.FlexLayer(this, this.positionFluid, this.boundsFluid, this.scaleFluid);\n\nif (addToWorld)\n{\n    this.game.world.add(layer);\n}\n\nthis.layers.push(layer);\n\nif (children)\n{\n    layer.addMultiple(children);\n}\n\nreturn layer;\n}", "CodeBleu_score": 82.47875717057642}, {"code": "createFluidLayer: function (children, addToWorld){\n\tif (addToWorld === undefined) { addToWorld = true; }\n\nthis.boundsFluid.width = this.width;\nthis.boundsFluid.height = this.height;\n\nvar layer = new Phaser.FlexLayer(this, this.positionFluid, this.boundsFluid, this.scaleFluid);\n\nif (addToWorld) {\nthis.game.world.add(layer);\n}\n\nthis.layers.push(layer);\n\nif (children) {\nlayer.addMultiple(children);\n}\n\nreturn layer;\n}", "CodeBleu_score": 82.14465012980186}, {"code": "createFluidLayer: function (children, addToWorld){\n\t\tif (addToWorld === undefined) { addToWorld = true; }\n\n\tvar layer = new Phaser.FlexLayer(this, this.positionFluid, this.boundsFluid, this.scaleFluid);\n\n\tif (addToWorld)\n\t{\n\t\tthis.game.world.add(layer);\n\t}\n\n\tthis.layers.push(layer);\n\n\tif (children)\n\t{\n\t\tlayer.addMultiple(children);\n\t}\n\n\treturn layer;\n}", "CodeBleu_score": 85.34669235615848}]}
{"instance_id": "624c9e2eb19f", "generation_result": [{"code": "createFullLayer: function (children){\n\t", "CodeBleu_score": 2.6358321300141316}, {"code": "createFullLayer: function (children){\n\tif (addToWorld === undefined) { addToWorld = true; }\n\nvar layer = new Phaser.FlexLayer(this, this.positionFull, this.boundsFull, this.scaleFull);\n\nif (addToWorld)\n{\nthis.game.world.add(layer);\n}\n\nthis.layers.push(layer);\n\nif (children)\n{\nlayer.addMultiple(children);\n}\n\nreturn layer;\n}", "CodeBleu_score": 72.83972167213119}, {"code": "createFullLayer: function (children){\n\t\n}", "CodeBleu_score": 0.9395803678143386}]}
{"instance_id": "1c7529bca3ce", "generation_result": [{"code": "crop: function (rect, copy){\n\t\tif (rect)\n\t{\n\t\tif (copy)\n\t\t{\n\t\t\tthis.cropRect = new Phaser.Rectangle(rect.x, rect.y, rect.width, rect.height);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.cropRect = rect;\n\t\t}\n\n\t\tthis.updateCrop();\n\t}\n\telse\n\t{\n\t\tthis.resetFrame();\n\t}\n}", "CodeBleu_score": 34.2992935385404}, {"code": "crop: function (rect, copy){\n\t\n}", "CodeBleu_score": 0.45436346467247823}, {"code": "crop: function (rect, copy){\n\t\nif (rect === undefined || rect === null)\n{\n    this._crop = null;\n\n    this.resetFrame();\n}\nelse\n{\n    if (copy)\n    {\n        this._crop = new Phaser.Rectangle(rect.x, rect.y, rect.width, rect.height);\n    }\n    else\n    {\n        this._crop = rect;\n    }\n\n    this.updateCrop();\n}\n\n}", "CodeBleu_score": 39.945913365796436}]}
{"instance_id": "d767b9ea9212", "generation_result": [{"code": "move: function (x, y, wrap){\n\t\nif (x!== 0)\n{\n    this.moveH(x, wrap);\n}\n\nif (y!== 0)\n{\n    this.moveV(y, wrap);\n}\n\nreturn this;\n\n}", "CodeBleu_score": 67.48133783114399}, {"code": "move: function (x, y, wrap){\n\t\nif (x === 0 && y === 0)\n{\n    return this;\n}\n\nif (x!== 0)\n{\n    this.moveH(x, wrap);\n}\n\nif (y!== 0)\n{\n    this.moveV(y, wrap);\n}\n\nreturn this;\n\n}", "CodeBleu_score": 72.41522191804738}, {"code": "move: function (x, y, wrap){\n\t\nif (x!== 0)\n{\n    this.moveH(x, wrap);\n}\n\nif (y!== 0)\n{\n    this.moveV(y, wrap);\n}\n\nreturn this;\n\n}", "CodeBleu_score": 67.48133783114399}]}
{"instance_id": "c7cf015114f3", "generation_result": [{"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\tif (this.freezeFrames) { return false; }\n\n\tvar frameKey = '_on' + state + 'Frame';\n\n\tif (this[frameKey]!== null)\n\t{\n\t\tthis.frame = this[frameKey];\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 36.722248224610006}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\n}", "CodeBleu_score": 2.220777169396903}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\tvar frameKey = '_on' + state + 'Frame';\n\tvar frame = this[frameKey];\n\n\tif (frame!== null) // not null or undefined\n\t{\n\t\tthis.frame = frame;\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 48.79695650538673}]}
{"instance_id": "e0294cb83ca3", "generation_result": [{"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t", "CodeBleu_score": 6.680082188273345}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n}", "CodeBleu_score": 5.476186467129299}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\nPhaser.Utils.mixinPrototype(this, Phaser.Weapon.prototype);\n\nthis.bullets = new Phaser.Group(this.game, this.game.world, 'Weapon Bullets', false, true, quantity, bulletClass);\n\nif (group)\n{\n    group.add(this.bullets);\n}\nelse\n{\n    this.game.world.add(this.bullets);\n}\n\nthis.bulletClass = bulletClass;\n\nif (key)\n{\n    this.bullets.createMultiple(quantity, key, frame, true);\n}\nelse\n{\n    this.bullets.createMultiple(quantity, null, null, true);\n}\n\nreturn this;\n\n}", "CodeBleu_score": 28.9185840504603}]}
{"instance_id": "2fca91787d6c", "generation_result": [{"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\tif (cull === undefined) { cull = false; }\n\n\tif (points.length < 3)\n\t{\n\t\tthrow new Error('Phaser.Graphics.drawTriangle: Must be passed at least 3 points');\n\t}\n\n\tif (this.currentPath)\n\t{\n\t\tthis.currentPath.closePath();\n\t}\n\n\tthis.dirty = true;\n\n\tthis.currentPath = new PIXI.Graphics();\n\n\tthis.currentPath.moveTo(points[0].x, points[0].y);\n\n\tfor (var i = 1; i < points.length - 1; i++)\n\t{\n\t\tthis.currentPath.lineTo(points[i].x, points[i].y);\n\t}\n\n\tthis.currentPath.lineTo(points[points.length - 1].x, points[points.length - 1].y);\n\n\tif (cull)\n\t{\n\t\tvar normal = this.currentPath.calculateNormal();\n\n\t\tif (normal.x * this.game.camera.x + normal.y * this.game.camera.y + normal.z * this.game.camera.z < 0)\n\t\t{\n\t\t\tthis.currentPath.closePath();\n\t\t\tthis.dirty = true;\n\t\t}\n\t}\n\n\tthis.currentPath.closePath();\n\n\tthis.addChild(this.currentPath);\n}", "CodeBleu_score": 30.433536192449314}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\tif (cull === undefined) { cull = false; }\n\n\tvar x1 = points[0].x;\n\tvar y1 = points[0].y;\n\tvar x2 = points[1].x;\n\tvar y2 = points[1].y;\n\tvar x3 = points[2].x;\n\tvar y3 = points[2].y;\n\n\tvar ux = x2 - x1;\n\tvar uy = y2 - y1;\n\tvar vx = x3 - x1;\n\tvar vy = y3 - y1;\n\n\tvar len = Math.sqrt(ux * ux + uy * uy);\n\tvar nx = ux / len;\n\tvar ny = uy / len;\n\n\tlen = Math.sqrt(vx * vx + vy * vy);\n\tvar cx = vx / len;\n\tvar cy = vy / len;\n\n\tvar dot = nx * cx + ny * cy;\n\n\tif (dot > 0 ||!cull)\n\t{\n\t\tthis.moveTo(x1, y1);\n\t\tthis.lineTo(x2, y2);\n\t\tthis.lineTo(x3, y3);\n\t\tthis.lineTo(x1, y1);\n\t}\n}", "CodeBleu_score": 30.882834661734947}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\tif (cull === undefined) { cull = false; }\n\n\tif (points.length < 3)\n\t{\n\t\treturn;\n\t}\n\n\tvar a = points[0];\n\tvar b = points[1];\n\tvar c = points[2];\n\n\tvar x1 = b.x - a.x;\n\tvar y1 = b.y - a.y;\n\tvar x2 = c.x - a.x;\n\tvar y2 = c.y - a.y;\n\n\tvar normalX = y1;\n\tvar normalY = -x1;\n\tvar normalLength = Math.sqrt(normalX * normalX + normalY * normalY);\n\n\tif (normalLength === 0)\n\t{\n\t\treturn;\n\t}\n\n\tnormalX /= normalLength;\n\tnormalY /= normalLength;\n\n\tvar dot = normalX * x2 + normalY * y2;\n\n\tif (cull && dot < 0)\n\t{\n\t\treturn;\n\t}\n\n\tthis.moveTo(a.x, a.y);\n\tthis.lineTo(b.x, b.y);\n\tthis.lineTo(c.x, c.y);\n\tthis.lineTo(a.x, a.y);\n}", "CodeBleu_score": 30.06003108966485}]}
{"instance_id": "5d227ea7f97b", "generation_result": [{"code": "checkVideoProgress: function (){\n\t\nif (this._pendingChangeSource)\n{\nif (this.video.readyState === 4)\n{\nthis._pendingChangeSource = false;\\\n\nthis.retry = this.retryLimit;\\\n\nwindow.clearTimeout(this._retryID);\\\n\nthis.texture.source = this.video;\\\n\nthis.texture.valid = true;\\\n\nthis.video.play();\n\nif (this._autoplay)\n{\nthis.play();\n}\n}\nelse\n{\nthis.retry--;\\\n\nif (this.retry <= 0)\n{\nthis.retry = this.retryLimit;\\\n\nwindow.clearTimeout(this._retryID);\\\n\nthis.video.pause();\\\n\nthis.emit('changeSource', this, false);\\\n}\nelse\n{\nthis._retryID = window.setTimeout(this.checkVideoProgress.bind(this), this.retryInterval);\\\n}\n}\n}\n}", "CodeBleu_score": 61.41083370636971}, {"code": "checkVideoProgress: function (){\n\t\n//  If the video is ready, we can stop any pending source changes and update the texture for playback\nif (this.video.readyState === 4)\n{\n    this.retry = this.retryLimit;\\\n\n    this._pendingChangeSource = false;\\\n\n    this.video.play();\n\n    if (this._autoplay)\n    {\n        this.paused = false;\\\n    }\n\n    this.texture.update();\n\n    this.onChangeSource.dispatch(this);\\\n}\nelse\n{\n    //  If the video is not ready, we decrement a retry counter and set a timeout to check progress again\n    if (this.retry > 0)\n    {\n        this.retry--;\\\n\n        this._retryID = window.setTimeout(this.checkVideoProgress.bind(this), this.retryInterval);\\\n    }\n    else\n    {\n        this.retry = this.retryLimit;\\\n\n        this._pendingChangeSource = false;\\\n\n        this.video.pause();\n\n        this.texture.update();\n\n        this.onVideoError.dispatch(this);\\\n    }\n}\n\n}", "CodeBleu_score": 40.83299200518471}, {"code": "checkVideoProgress: function (){\n\t\nif (this._pendingChangeSource)\n{\nif (this.video.readyState === 4)\n{\nthis._pendingChangeSource = false;\\\n\nthis.retry = this.retryLimit;\\\n\nthis.texture.valid = true;\\\n\nif (this._autoplay)\\\n{\nthis.video.play();\\\n}\n\nif (this.touchLocked)\\\n{\nthis._pending = false;\\\n}\n\nthis.onChangeSource.dispatch(this);\\\n}\nelse if (this.retry > 0)\\\n{\nthis.retry--;\\\n\nthis._retryID = window.setTimeout(this.checkVideoProgress.bind(this), this.retryInterval);\\\n}\nelse\n{\nthis.onVideoError.dispatch(this);\\\n}\n}\n\n}", "CodeBleu_score": 38.17863860218503}]}
{"instance_id": "e48c3c53f00a", "generation_result": [{"code": "start: function (event, value){\n\tif (this.isUp)\n{\nthis.isDown = true;\nthis.isUp = false;\nthis.timeDown = this.game.time.now;\nthis.timeUp = 0;\nthis.repeats = 0;\n\nif (event)\n{\nthis.event = event;\nthis.altKey = event.altKey;\nthis.shiftKey = event.shiftKey;\nthis.ctrlKey = event.ctrlKey;\n}\n\nif (this.parent.isGamepad)\n{\nthis.value = value;\n}\n\nthis.onDown.dispatch(this, this.value);\n}\n\n}", "CodeBleu_score": 64.57412867915548}, {"code": "start: function (event, value){\n\tif (this.isDown)\n{\nreturn;\n}\n\nthis.isDown = true;\nthis.isUp = false;\nthis.timeDown = this.game.time.now;\nthis.repeats = 0;\n\nif (event!== null)\n{\nthis.event = event;\nthis.altKey = event.altKey;\nthis.shiftKey = event.shiftKey;\nthis.ctrlKey = event.ctrlKey;\n}\n\nthis.value = value;\n\nthis.onDown.dispatch(this, this.value);\n\nif (this.parent.type === Phaser.SINGLE_PAD)\n{\nthis.parent.onPadDown.dispatch(this, this.value);\n}\n\nif (this.parent.type === Phaser.POINTER)\n{\nthis.parent.onPointerDown.dispatch(this, this.value);\n}\n\n}", "CodeBleu_score": 68.9253631268385}, {"code": "start: function (event, value){\n\tthis.isDown = true;\nthis.isUp = false;\n\nthis.timeDown = this.game.time.time;\nthis.timeUp = 0;\n\nthis.repeats = 0;\n\nthis.altKey = event.altKey;\nthis.shiftKey = event.shiftKey;\nthis.ctrlKey = event.ctrlKey;\n\nthis.event = event;\nthis.value = value;\n\nthis.onDown.dispatch(this, value);\n\n}", "CodeBleu_score": 66.7662356051924}]}
{"instance_id": "a2cb3bdacb1e", "generation_result": [{"code": "onMouseDown: function (event){\n\t\nthis.event = event;\n\nif (this.capture)\n{\nevent.preventDefault();\n}\n\nif (this.enabled)\n{\nthis.input.startPointer(event, Phaser.Input.MOUSE_POINTER);\n}\n\nif (this.mouseDownCallback)\n{\nthis.mouseDownCallback.call(this.callbackContext, event);\n}\n\n}", "CodeBleu_score": 49.01856881862182}, {"code": "onMouseDown: function (event){\n\t\nif (this.capture)\n{\nevent.preventDefault();\n}\n\nthis.event = event;\n\nif (this.enabled)\n{\nthis.game.input.mousePointer.start(event, true);\n}\n\nif (this.mouseDownCallback)\n{\nthis.mouseDownCallback.call(this.callbackContext, event);\n}\n\n}", "CodeBleu_score": 46.89589803700618}, {"code": "onMouseDown: function (event){\n\t\nif (this.game.input.enabled)\n{\nthis.game.input.mousePointer.start(event, this.capture);\n}\n\nif (this.mouseDownCallback!== null)\n{\nthis.mouseDownCallback.call(this.callbackContext, event);\n}\n\nthis.event = event;\n\nif (this.capture)\n{\nevent.preventDefault();\n}\n\n}", "CodeBleu_score": 46.12786600535842}]}
{"instance_id": "88538a5b66e8", "generation_result": [{"code": "onMouseUpGlobal: function (event){\n\t\nthis.event = event;\n\nif (this.capture)\n{\nevent.preventDefault();\n}\n\nif (this.mouseUpCallback)\n{\nthis.mouseUpCallback.call(this.callbackContext, event);\n}\n\nif (!this.input.enabled ||!this.enabled)\n{\nreturn;\n}\n\nevent.identifier = 0;\n\nthis.input.mousePointer.stop(event);\n}", "CodeBleu_score": 74.59717318296815}, {"code": "onMouseUpGlobal: function (event){\n\t\n}", "CodeBleu_score": 1.1369003035626581}, {"code": "onMouseUpGlobal: function (event){\n\t\nthis.event = event;\n\nif (this.capture)\n{\nevent.preventDefault();\n}\n\nif (this.mouseUpCallback)\n{\nthis.mouseUpCallback.call(this.callbackContext, event);\n}\n\nif (!this.input.enabled ||!this.enabled)\n{\nreturn;\n}\n\nevent.identifier = 0;\n\nthis.input.mousePointer.stop(event);\n}", "CodeBleu_score": 74.59717318296815}]}
{"instance_id": "bf8b43ab3487", "generation_result": [{"code": "onTouchEnter: function (event){\n\t\nthis.event = event;\n\nif (this.touchEnterCallback) {\nthis.touchEnterCallback.call(this.callbackContext, event);\n}\n\nif (this.preventDefault) {\nevent.preventDefault();\n}\n\n/*\n *  event.targetTouches = list of all touches on the TARGET ELEMENT (i.e. game dom element)\n *  event.touches = list of all touches on the ENTIRE DOCUMENT, not just the target element\n *  event.changedTouches = the touches that CHANGED in this event, not the total number of them\n */\nfor (var i = 0; i < event.changedTouches.length; i++) {\nthis.game.input.startPointer(event.changedTouches[i]);\n}\n}", "CodeBleu_score": 73.76348939274595}, {"code": "onTouchEnter: function (event){\n\t\nthis.event = event;\n\nif (this.touchEnterCallback)\n{\nthis.touchEnterCallback.call(this.callbackContext, event);\n}\n\nif (this.preventDefault)\n{\nevent.preventDefault();\n}\n\n/*\n *  Touch enter and leave events are not supported by most browsers on a canvas element yet.\n *  http://www.w3.org/TR/touch-events/#dfn-touchenter\n */\nfor (var i = 0; i < event.changedTouches.length; i++)\n{\nthis.game.input.startPointer(event.changedTouches[i]);\n}\n}", "CodeBleu_score": 73.83416991760471}, {"code": "onTouchEnter: function (event){\n\t\nthis.event = event;\n\nif (this.touchEnterCallback)\n{\nthis.touchEnterCallback.call(this.callbackContext, event);\n}\n\nif (this.preventDefault)\n{\nevent.preventDefault();\n}\n\n}", "CodeBleu_score": 55.9143658496753}]}
