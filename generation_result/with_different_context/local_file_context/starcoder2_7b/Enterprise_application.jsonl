{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n\n    # Retrieve the attachment IDs from the HTTP request arguments.\n    attachment_ids = args.get('attachment_ids', None)\n\n    # Check if the attachment IDs are valid.\n    if not attachment_ids:\n        return http.Response(status=400, body='Missing attachment IDs')\n\n    # Convert the attachment IDs from a string to a list of integers.\n    try:\n        attachment_ids = [int(attachment_id) for attachment_id in attachment_ids.split(',')]\n    except ValueError:\n        return http.Response(status=400, body='Invalid attachment IDs')\n\n    # Retrieve the attachments from the database.\n    attachments = request.env['ir.attachment'].browse(attachment_ids)\n\n    # Check if the attachments exist and the current user has read access to them.\n    if not attachments.exists() or not attachments.filtered(lambda attachment: attachment.user_has_access()):\n        return http.Response(status=403, body='Forbidden')\n\n    # Check if the attachments are allowed to be exported.\n    if not attachments.filtered(lambda attachment: attachment.can_export):\n        return http.Response(status=400, body='Attachments are not allowed to be exported')\n\n    # Check if the attachments have been downloaded before.\n    if not attachments.filtered(lambda attachment: attachment.download_count > 0):\n        return http.Response(status=400, body='Attachments have not been downloaded')\n\n    # Create a zip file buffer and a list of HTTP headers.\n    zip_buffer = BytesIO()\n    headers = []\n\n    # Add the HTTP headers for the zip file.\n    headers.append(('Content-Type', 'zip'))\n    headers.append(('X-Content-Type-Options', 'nosniff'))\n\n    # Iterate over the attachments and add their content to the zip file buffer.\n    for attachment in attachments:\n        zip_buffer.write(attachment.datas)\n\n    # Set the content length and content disposition for the zip file.\n    headers.append(('Content-Length', len(zip_buffer.getvalue())))\n    headers.append(('Content-Disposition', content_disposition('attachment.zip')))\n\n    # Update the download count for the attachments.\n    attachments.write({'download_count': len(attachments)})\n\n    # Return the zip file as an HTTP response.\n    return http.Response(zip_buffer.getvalue(), headers=headers)\n", "CodeBleu_score": 35.14150670015955}, {"code": "def export_zip_documents(self, **args)\n\t\n    # Retrieve attachment IDs from HTTP request arguments\n    attachment_ids = args.get('attachment_ids')\n    # If no attachment IDs were provided, return an error\n    if not attachment_ids:\n        return http.Response(status=400, body=_('No attachments provided.'))\n    # Convert attachment IDs to a list\n    attachment_ids = attachment_ids.split(',')\n    # Convert attachment IDs to integers\n    attachment_ids = [int(attachment_id) for attachment_id in attachment_ids]\n    # Retrieve attachments from database\n    attachments = request.env['ir.attachment'].sudo().search([('id', 'in', attachment_ids)])\n    # Verify read access rights for the attachments\n    if not attachments.check_access_rights('read'):\n        return http.Response(status=403, body=_('You do not have access rights to read the attachments.'))\n    # Verify rules for the attachments\n    if not attachments.check_access_rule('read'):\n        return http.Response(status=403, body=_('You do not have access rights to read the attachments.'))\n    # Create a zip file from the attachments' content\n    zip_content = b''\n    for attachment in attachments:\n        zip_content += attachment.datas\n    # Prepare HTTP headers for the zip file\n    zip_headers = _get_zip_headers(zip_content, 'attachments.zip')\n    # Return the zip file as an HTTP response\n    return http.Response(zip_content, headers=zip_headers)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 36.29258131427072}, {"code": "def export_zip_documents(self, **args)\n\t\n    # Retrieve attachment IDs from HTTP request arguments\n    attachment_ids = args.get('attachment_ids', False)\n    if not attachment_ids:\n        return request.not_found()\n\n    # Verify read access rights and rules for the attachments\n    attachment_ids = map(int, attachment_ids.split(','))\n    attachments = request.env['ir.attachment'].browse(attachment_ids)\n    attachments.check_access_rights('read')\n    attachments.check_access_rule('read')\n\n    # Build the zip file from the attachments' content\n    import zipfile\n    import io\n    zip_file = io.BytesIO()\n    with zipfile.ZipFile(zip_file, mode='w') as zip_archive:\n        for attachment in attachments:\n            zip_archive.writestr(attachment.name, attachment.datas)\n\n    # Prepare HTTP headers for the zip file\n    zip_headers = _get_zip_headers(zip_file.getvalue(), 'attachments.zip')\n\n    # Return the zip file as an HTTP response\n    return request.make_response(zip_file.getvalue(), headers=zip_headers)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 41.58410809377283}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(PortalAccount, self)._prepare_home_portal_values(counters)\n    if request.env.user.has_group('account.group_account_manager'):\n        if request.env.user.has_group('account.group_account_user'):\n            domain = expression.AND([\n                ['invoice_ids.move_type', '=', 'out_invoice'],\n                ['invoice_ids.state', 'in', ['draft', 'open']],\n                ['invoice_ids.type', 'in', ['out_invoice', 'out_refund']],\n            ])\n        else:\n            domain = expression.AND([\n                ['invoice_ids.move_type', '=', 'out_invoice'],\n                ['invoice_ids.state', 'in', ['draft', 'open']],\n                ['invoice_ids.type', 'in', ['out_invoice', 'out_refund']],\n                ['invoice_ids.company_id', '=', request.env.user.company_id.id],\n            ])\n        values['invoice_count'] = request.env['account.move'].search_count(domain)\n        values['bill_count'] = request.env['account.move'].search_count(expression.AND([\n            ['invoice_ids.move_type', '=', 'out_invoice'],\n            ['invoice_ids.state', 'in', ['draft', 'open']],\n            ['invoice_ids.type', 'in', ['out_invoice', 'out_refund']],\n            ['invoice_ids.invoice_user_id', '=', request.env.user.id],\n        ]))\n    return values\n\n", "CodeBleu_score": 36.757186897988724}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(PortalAccount, self)._prepare_home_portal_values(counters)\n    if self.env.user.has_group('account.group_account_invoice'):\n        values['invoice_count'] = counters['invoice_count']\n    if self.env.user.has_group('account.group_account_invoice'):\n        values['bill_count'] = counters['bill_count']\n    return values\n\n", "CodeBleu_score": 19.38785725945989}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(PortalAccount, self)._prepare_home_portal_values(counters)\n    if request.env.user.has_group('account.group_account_manager'):\n        # count invoices and bills\n        invoices = request.env['account.move'].sudo().search_count([('type', '=', 'out_invoice'), ('state', 'in', ('draft', 'open'))])\n        bills = request.env['account.move'].sudo().search_count([('type', '=', 'out_invoice'), ('state', 'in', ('draft', 'open'))])\n        values['invoice_count'] = invoices\n        values['bill_count'] = bills\n    return values\n\n", "CodeBleu_score": 37.37362857291396}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t   values = self._prepare_portal_layout_values()\n    domain = self._get_invoices_domain()\n    invoice_count = request.env['account.move'].search_count(domain)\n    invoice_ids = request.env['account.move'].search(domain, order=self._get_account_searchbar_sortings().get(sortby, 'date')['order'], limit=self.env['ir.config_parameter'].sudo().get_param('website.portal.num_pages_groups'))\n        invoice_ids = invoice_ids.filtered(lambda inv: inv.user_has_groups('account.group_account_invoice'))\n    pager = portal_pager(url=\\\"/my/invoices\\\",\n                            url_args={\\\"date_begin\\\": date_begin, \\\"date_end\\\": date_end, \\\"sortby\\\": sortby, \\\"filterby\\\": filterby},\n                            total=invoice_count, page=page, step=self.env['ir.config_parameter'].sudo().get_param('website.portal.num_pages_groups'))\n    invoices = invoice_ids.name_get()\n    values.update({\n        'date': date_begin,\n        'invoices': invoices,\n        'page_name': 'invoices',\n        'pager': pager,\n       'searchbar_sortings': self._get_account_searchbar_sortings(),\n       'searchbar_filters': self._get_account_searchbar_filters(),\n       'sortby': sortby,\n        'filterby': filterby,\n    })\n    return request.render(\\\"website_account.portal_my_invoices\\\", values)\n\n\n", "CodeBleu_score": 36.91521224620179}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t   values = self._prepare_portal_layout_values()\n    domain = []\n    searchbar_sortings = {\n        'date': {'label': _('Date'), 'order': 'invoice_date desc'},\n        'duedate': {'label': _('Due Date'), 'order': 'invoice_date_due desc'},\n        'name': {'label': _('Reference'), 'order': 'name desc'},\n       'state': {'label': _('Status'), 'order':'state'},\n    }\n    searchbar_filters = {\n        'all': {'label': _('All'), 'domain': []},\n        'invoices': {'label': _('Invoices'), 'domain': [('move_type', 'in', ('out_invoice', 'out_refund', 'out_receipt'))]},\n        'bills': {'label': _('Bills'), 'domain': [('move_type', 'in', ('in_invoice', 'in_refund', 'in_receipt'))]},\n    }\n    if date_begin and date_end:\n        domain += [('invoice_date', '>', date_begin), ('invoice_date', '<', date_end)]\n    if filterby:\n        domain += searchbar_filters[filterby]['domain']\n    if not sortby:\n        sortby = 'date'\n    order = searchbar_sortings[sortby]['order']\n    invoices = request.env['account.move'].search(domain, limit=self._items_per_page, offset=self._items_per_page * (page - 1), order=order)\n    request.session['my_invoices_history'] = invoices.ids[:100]\n    values.update({\n        'date': date_begin,\n        'date_end': date_end,\n        'default_date_begin': date_begin or time.strftime('%Y-%m-01'),\n        'default_date_end': date_end or time.strftime('%Y-%m-%d'),\n        'invoices': invoices,\n        'page_name': 'account_invoices',\n        'pager': portal_pager(\n            url=\\\"/my/invoices\\\",\n            url_args={'date_begin': date_begin, 'date_end': date_end,'sortby': sortby, 'filterby': filterby},\n            total=len(invoices),\n            page=page,\n            step=self._items_per_page\n        ),\n       ", "CodeBleu_score": 38.17779205872003}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t  values = self._prepare_portal_layout_values()\n    values.update(self._prepare_invoice_values())\n\n    domain = self._get_invoices_domain()\n    searchbar_sortings = self._get_account_searchbar_sortings()\n    searchbar_filters = self._get_account_searchbar_filters()\n    sort_domain, sort_order = self._get_search_view_sort(searchbar_sortings, sortby, 'date')\n    filter_domain, search_count = self._get_search_view_filter(searchbar_filters, filterby, 'all', domain)\n    sort_domain = expression.AND([sort_domain, filter_domain])\n    invoice_count = request.env['account.move'].search_count(domain)\n    pager = portal_pager(url=\\\"/my/invoices\\\", url_args={\\\"date_begin\\\": date_begin, \\\"date_end\\\": date_end, \\\"sortby\\\": sortby, \\\"filterby\\\": filterby}, total=invoice_count, page=page, step=self._items_per_page)\n    invoices = request.env['account.move'].search(sort_domain, limit=self._items_per_page, offset=pager['offset'], order=sort_order)\n    request.session['my_invoices_history'] = invoices.ids[:100]\n    values.update({\n        'date': date_begin,\n        'invoices': invoices,\n        'page_name': 'invoices',\n        'pager': pager,\n       'searchbar_sortings': searchbar_sortings,\n       'sortby': sortby,\n       'searchbar_filters': searchbar_filters,\n        'filterby': filterby,\n    })\n    return request.render(\\\"account.portal_my_invoices\\\", values)\n\n", "CodeBleu_score": 40.94055690732324}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\ty:\n        invoice = request.env['account.move'].sudo().browse(invoice_id)\n    except (AccessError, MissingError):\n        return request.redirect('/my')\n    if not invoice.exists():\n        return request.redirect('/my')\n    if invoice.company_id.id!= request.env.user.company_id.id:\n        return request.redirect('/my')\n    if not invoice.is_invoice(include_receipts=True):\n        return request.redirect('/my')\n    if not invoice.is_mine():\n        return request.redirect('/my')\n    if invoice.state not in ['posted', 'cancel']:\n        return request.redirect('/my')\n    if report_type in ['html', 'pdf', 'text']:\n        values = self._invoice_get_page_view_values(invoice, access_token, **kw)\n        if report_type == 'pdf':\n            return self._get_pdf_report(invoice, values)\n        return request.render('account.portal_invoice_render', values)\n    if download:\n        if invoice.is_invoice(include_receipts=True):\n            return self._get_zip_report(invoice)\n        return self._get_attachment_report(invoice)\n    return request.render(\\\"account.portal_invoice_detail\\\", {\n        \\\"invoice\\\": invoice,\n        \\\"invoice_url\\\": \\\"/my/invoices/%s\\\" % invoice.id,\n        \\\"download_url\\\": \\\"/my/invoices/%s?download=true\\\" % invoice.id,\n        \\\"report_url\\\": \\\"/my/invoices/%s?report_type=html\\\" % invoice.id,\n        \\\"report_pdf_url\\\": \\\"/my/invoices/%s?report_type=pdf\\\" % invoice.id,\n        \\\"report_text_url\\\": \\\"/my/invoices/%s?report_type=text\\\" % invoice.id,\n        \\\"report_text_format_url\\\": \\\"/my/invoices/%s?report_type=text&format=%s\\\" % (invoice.id, kw.get('format', 'text')),\n    })\n\n    @http.route(['/my/invoices/download/<int:invoice_id>'], type='http', auth=\\\"public\\\", website=True)\n    def portal_my_invoice", "CodeBleu_score": 37.124949901097985}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\ty:\n        invoice = request.env['account.move'].sudo().browse(invoice_id)\n    except (AccessError, MissingError):\n        return request.redirect('/my')\n    if not invoice.exists():\n        return request.redirect('/my')\n    if invoice.env.user.id!= invoice.partner_id.id:\n        raise AccessError(_('Only the invoice owner can access this invoice.'))\n    if not invoice.user_has_groups('account.group_account_invoice'):\n        raise AccessError(_('Only the invoice owner can access this invoice.'))\n    if not invoice.user_has_groups('account.group_account_user'):\n        raise AccessError(_('Only the invoice owner can access this invoice.'))\n    if invoice.state not in ('posted', 'in_payment', 'paid'):\n        raise AccessError(_('Only posted invoices can be accessed.'))\n    if invoice.env.user.has_group('account.group_account_manager'):\n        access_token = access_token or request.env['account.move'].sudo().browse(invoice_id).access_token\n    else:\n        access_token = access_token or request.env.ref('account.access_token_account_invoice').sudo().create({'move_id': invoice.id, 'user_id': request.env.user.id})\n    if access_token.user_id.id!= invoice.partner_id.id:\n        raise AccessError(_('Only the invoice owner can access this invoice.'))\n    if access_token.move_id.id!= invoice.id:\n        raise AccessError(_('Only the invoice owner can access this invoice.'))\n    if access_token.state!= 'valid':\n        raise AccessError(_('Only valid access tokens can access this invoice.'))\n    if not invoice.user_has_groups('account.group_account_user'):\n        raise AccessError(_('Only the invoice owner can access this invoice.'))\n    if not invoice.user_has_groups('account.group_account_manager'):\n        raise AccessError(_('Only the invoice owner can access this invoice.'))\n    if download:\n        if report_type == 'zip':\n            # get all legal documents\n            docs = invoice.get_all_legal_documents()\n            # create a zip file\n            zip_file = request.env['", "CodeBleu_score": 37.00507687370127}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\tvoice = request.env['account.move'].sudo().browse(invoice_id)\n    if not invoice.exists():\n        raise MissingError(_('Invoice not found'))\n\n    if invoice.company_id!= request.env.user.company_id:\n        raise AccessError(_('You are not allowed to see this invoice.'))\n\n    if invoice.state in ['draft', 'cancel'] and not invoice.is_invoice(include_receipts=True):\n        raise AccessError(_('You are not allowed to see this invoice.'))\n\n    if not invoice.is_invoice(include_receipts=True):\n        raise AccessError(_('You are not allowed to see this invoice.'))\n\n    if invoice.state == 'posted' and not invoice.is_invoice(include_receipts=True):\n        raise AccessError(_('You are not allowed to see this invoice.'))\n\n    if invoice.state == 'posted' and not invoice.is_invoice(include_receipts=True):\n        raise AccessError(_('You are not allowed to see this invoice.'))\n\n    if invoice.state == 'posted' and not invoice.is_invoice(include_receipts=True):\n        raise AccessError(_('You are not allowed to see this invoice.'))\n\n    if invoice.state == 'posted' and not invoice.is_invoice(include_receipts=True):\n        raise AccessError(_('You are not allowed to see this invoice.'))\n\n    if invoice.state == 'posted' and not invoice.is_invoice(include_receipts=True):\n        raise AccessError(_('You are not allowed to see this invoice.'))\n\n    if invoice.state == 'posted' and not invoice.is_invoice(include_receipts=True):\n        raise AccessError(_('You are not allowed to see this invoice.'))\n\n    if invoice.state == 'posted' and not invoice.is_invoice(include_receipts=True):\n        raise AccessError(_('You are not allowed to see this invoice.'))\n\n    if invoice.state == 'posted' and not invoice.is_invoice(include_receipts=True):\n        raise AccessError(_", "CodeBleu_score": 19.470912011501014}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t   # The demo data is based on the following companies:\n    # * 1: Default\n    # * 2: Venezuela\n    # * 3: USA\n    # * 4: France\n    # * 5: Germany\n    # * 6: Italy\n    # * 7: Spain\n    # * 8: Netherlands\n    # * 9: Belgium\n    # * 10: UK\n    # * 11: Portugal\n    # * 12: Japan\n    # * 13: Switzerland\n    # * 14: Canada\n    # * 15: Mexico\n    # * 16: Argentina\n    # * 17: Brazil\n    # * 18: Chile\n    # * 19: Colombia\n    # * 20: Peru\n    # * 21: Indonesia\n    # * 22: South Africa\n    # * 23: Turkey\n    # * 24: India\n    # * 25: Russia\n    # * 26: Poland\n    # * 27: Czech Republic\n    # * 28: Slovakia\n    # * 29: Austria\n    # * 30: Ukraine\n    # * 31: Sweden\n    # * 32: Denmark\n    # * 33: Finland\n    # * 34: Norway\n    # * 35: Iceland\n    # * 36: Lithuania\n    # * 37: Latvia\n    # * 38: Estonia\n    # * 39: Slovenia\n    # * 40: Croatia\n    # * 41: Serbia\n    # * 42: Bulgaria\n    # * 43: Albania\n    # * 44: Kosovo\n", "CodeBleu_score": 1.105006105006105}, {"code": "def _get_demo_data_products(self, company=False)\n\t   if not company.account_sale_tax_id:\n        return\n    products = self.env['product.template'].search([('company_id', '=', company.id), ('type', '=', 'product')])\n    products.write({'taxes_id': [(4, company.account_sale_tax_id.id)]})\n\n    if not company.account_purchase_tax_id:\n        return\n    products = self.env['product.template'].search([('company_id', '=', company.id), ('type', '=','service')])\n    products.write({'taxes_id': [(4, company.account_purchase_tax_id.id)]})\n\n", "CodeBleu_score": 31.128965323353423}, {"code": "def _get_demo_data_products(self, company=False)\n\t   products = self.env['product.template'].search([('type', '!=','service')])\n    if company and company.account_sale_tax_id and company.account_purchase_tax_id:\n        products.write({\n           'sale_taxes_id': [(6, 0, company.account_sale_tax_id.ids)],\n            'purchase_taxes_id': [(6, 0, company.account_purchase_tax_id.ids)],\n        })\n", "CodeBleu_score": 16.26603431147161}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    demo_account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.type', '=', account_type), ('code', '=', '1000')])\n    if not demo_account:\n        demo_account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.type', '=', account_type)])\n    if not demo_account:\n        demo_account = self.env['account.account'].search([('company_id', '=', company.id)])\n    return demo_account\n\n    @api.model\n    def _get_demo_data_account_move(self, company=False):\n        bnk_journal = self.env['account.journal'].search([('code', '=', 'BNK')], limit=1)\n        return {\n            'demo_invoice_1': {\n                'partner_id': 'base.res_partner_1',\n                'invoice_line_ids': [\n                    Command.create({\n                        'name': 'Purchase order',\n                        'account_id': self._get_demo_account(\n                            'expense',\n                            'expense',\n                            self.env.company,\n                        ).id,\n                        'price_unit': 1000,\n                        'quantity': 1,\n                    }),\n                ],\n                'payment_term_id': self.env['account.payment.term'].search([('name', '=', 'Immediate')], limit=1).id,\n                'journal_id': bnk_journal.id,\n                'date_invoice': time.strftime('%Y-01-01'),\n                'currency_id': self.env.company.currency_id.id,\n                'company_id': self.env.company.id,\n            },\n            'demo_invoice_2': {\n                'partner_id': 'base.res_partner_2',\n                'invoice_line_ids': [\n                    Command.create({\n                        'name': 'Purchase order',\n                        'account_id': self._get_demo_account(\n                            'expense',\n                            'expense',\n                           ", "CodeBleu_score": 39.37168060566329}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env['account.account']\n       .search([('company_id', '=', company.id), ('user_type_id.type', '=', account_type), ('code', '!=', '0000')], limit=1)\n       .filtered(lambda a: a.code and a.code!= '0000')\n       .filtered(lambda a: a.id == self.env['ir.model.data'].xmlid_to_res_id(f'{company.id}.{xml_id}', raise_if_not_found=False))\n       .first()\n    if not account:\n        account = self.env['account.account']\n       .search([('company_id', '=', company.id), ('user_type_id.type', '=', account_type)], limit=1)\n       .filtered(lambda a: a.code and a.code!= '0000')\n       .first()\n    if not account:\n        account = self.env['account.account']\n       .search([('company_id', '=', company.id)], limit=1)\n       .filtered(lambda a: a.code and a.code!= '0000')\n       .first()\n    return account\n\n    @api.model\n    def _get_demo_data_account_move_line(self, company=False):\n        return {\n            'demo_account_move_line_1': {\n                'name': '',\n                'account_id': self._get_demo_account(\n                    'income',\n                    'income',\n                    self.env.company,\n                ).id,\n                'debit': 1000,\n                'credit': 0,\n               'move_id': 'demo_invoice_extract',\n            },\n            'demo_account_move_line_2': {\n                'name': '',\n                'account_id': self._get_demo_account(\n                    'income',\n                    'income',\n                    self.env.company,\n                ).id,\n                'debit': 0,\n                'credit': 1000,\n               'move_id':", "CodeBleu_score": 41.71882585261481}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account_id = self.env['ir.model.data'].xmlid_to_res_id(f'account.{xml_id}', raise_if_not_found=False) or self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.type', '=', account_type)], limit=1) or self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    return account_id or self.env['account.account'].search([], limit=1)\n\n    @api.model\n    def _get_demo_data_bank_statement(self, company=False):\n        return {\n            'demo_bank_statement': {\n                'journal_id': self._get_demo_journal('bank', company).id,\n                'name': 'Bank Statement',\n                'date': time.strftime('%Y-01-01'),\n                'line_ids': [\n                    Command.create({\n                        'name': 'Prepayment',\n                        'amount': 650,\n                        'partner_id': 'base.res_partner_12',\n                    }),\n                    Command.create({\n                        'name': time.strftime(f'First {formatLang(self.env, 2000, currency_obj=self.env.company.currency_id)} of invoice %Y/00001'),\n                        'amount': 2000,\n                        'partner_id': 'base.res_partner_12',\n                    }),\n                    Command.create({\n                        'name': 'Last Year Interests',\n                        'amount': 102.78,\n                    }),\n                    Command.create({\n                        'name': time.strftime('INV/%Y/00002'),\n                        'amount': 750,\n                        'partner_id': 'base.res_partner_2',\n                    }),\n                    Command.create({\n                        'name': f'R:9772938  10/07 AX 9415116318 T:5 BRT: {formatLang(self.env, ", "CodeBleu_score": 38.11355279594684}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t    for company in self.env.user.company_ids:\n        accounts_with_current_year_earnings_type = self.search([('company_id', '=', company.id), ('account_type', '=', 'current_year_earnings')])\n        if len(accounts_with_current_year_earnings_type) > 1:\n            raise ValidationError(_('There can be only one account with the \"Current Year Earnings\" type for each company.'))\n", "CodeBleu_score": 32.36191580618599}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t    for company in self.env.user.company_ids:\n        accounts_of_type_current_year_earning = self.search([('company_id', '=', company.id), ('account_type', '=', 'current_year_earning')])\n        if len(accounts_of_type_current_year_earning) > 1:\n            raise ValidationError(_('There must be only one account with the \"Current Year Earnings\" type for each company.'))\n", "CodeBleu_score": 32.15516575065763}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t    current_year_earnings_accounts = self.filtered(lambda account: account.account_type == 'current_year_earning')\n    current_year_earnings_accounts_by_company = current_year_earnings_accounts.mapped('company_id')\n    if len(current_year_earnings_accounts_by_company) > 1:\n        raise ValidationError(_('There can be only one account with type \"Current Year Earnings\" for each company.'))\n", "CodeBleu_score": 20.775379445473774}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self._context.get('default_partner_id'):\n        return self._order_accounts_by_frequency_for_partner(self._context.get('default_company_id'), self._context.get('default_partner_id'), self._context.get('default_move_type'))\n    return super()._name_search(name, domain, operator, limit, order)\n\n    def _check_company_domain(self, company_id):\n        \\\"\\\"\\\"\n        Returns a domain that will filter out accounts that are not in the given company\n        :param company_id: the company id\n        :returns: a domain that will filter out accounts that are not in the given company\n        \\\"\\\"\\\"\n        return [('company_id', '=', company_id)]\n\n    def _get_account_type_domain(self, account_type):\n        \\\"\\\"\\\"\n        Returns a domain that will filter out accounts that are not of the given type\n        :param account_type: the account type\n        :returns: a domain that will filter out accounts that are not of the given type\n        \\\"\\\"\\\"\n        return [('account_type', '=', account_type)]\n\n    def _get_internal_group_domain(self, internal_group):\n        \\\"\\\"\\\"\n        Returns a domain that will filter out accounts that are not of the given internal group\n        :param internal_group: the internal group\n        :returns: a domain that will filter out accounts that are not of the given internal group\n        \\\"\\\"\\\"\n        return [('internal_group', '=', internal_group)]\n\n    def _get_reconcile_domain(self, reconcile):\n        \\\"\\\"\\\"\n        Returns a domain that will filter out accounts that are not reconcilable or not reconcilable\n        :param reconcile: True if we want to filter out accounts that are not reconcilable, False otherwise\n        :returns: a domain that will filter out accounts that are not reconcilable or not reconcilable\n        \\\"\\\"\\\"\n        return [('reconcile', '=', reconcile)]\n\n    def _get_company_domain(self, company_id):\n        \\\"\\\"\\\"\n        Returns", "CodeBleu_score": 27.958358889147377}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self.env.context.get('default_partner_id'):\n        partner_id = self.env.context['default_partner_id']\n        if self.env.context.get('default_move_type'):\n            move_type = self.env.context['default_move_type']\n        else:\n            move_type = self.env['account.move'].get_inbound_types(include_receipts=True)[0]\n        return self._order_accounts_by_frequency_for_partner(self.env.company.id, partner_id, move_type)\n    return super()._name_search(name, domain, operator, limit, order)\n\n    @api.model\n    def _get_most_frequent_accounts_for_partner(self, company_id, partner_id, move_type, filter_never_user_accounts=False, limit=None):\n        \\\"\\\"\\\"\n        Returns the accounts ordered from most frequent to least frequent for a given partner\n        and filtered according to the move type\n        :param company_id: the company id\n        :param partner_id: the partner id for which we want to retrieve the most frequent accounts\n        :param move_type: the type of the move to know which type of accounts to retrieve\n        :param filter_never_user_accounts: True if we should filter out accounts never used for the partner\n        :param limit: the maximum number of accounts to retrieve\n        :returns: List of account ids, ordered by frequency (from most to least frequent)\n        \\\"\\\"\\\"\n        domain = [\n            *self.env['account.move.line']._check_company_domain(company_id),\n            ('partner_id', '=', partner_id),\n            ('account_id.deprecated', '=', False),\n            ('date', '>=', fields.Date.add(fields.Date.today(), days=-365 * 2)),\n        ]\n        if move_type in self.env['account.move'].get_inbound_types(include_receipts=True):\n            domain.append(('account_id.internal_group', '=', 'income'))\n        elif move_type in self.env['account.move'].get", "CodeBleu_score": 33.382257459665645}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self._context.get('partner_id'):\n        return self._order_accounts_by_frequency_for_partner(self.env.company.id, self._context.get('partner_id'), self._context.get('move_type'))\n    if not domain:\n        domain = []\n    if name:\n        name = name.split(' ')\n        domain += [|\n            ('code', operator, name[0]),\n            ('code', operator, name[0][:-1] + '%'),\n            ('name', operator, '%%%s%%' % name[0]),\n            ('name', operator, '%%%s%%' % name[0][:-1] + '%'),\n        ]\n    return super()._name_search(name, domain, operator=operator, limit=limit, order=order)\n\n\n    @api.model\n    def _search(self, args, offset=0, limit=None, order=None, count=False):\n        if self._context.get('partner_id') and self._context.get('move_type') and not args:\n            return self._order_accounts_by_frequency_for_partner(self.env.company.id, self._context.get('partner_id'), self._context.get('move_type'))\n        return super()._search(args, offset=offset, limit=limit, order=order, count=count)\n\n    @api.model\n    def _search_read(self, args, fields=None, offset=0, limit=None, order=None):\n        if self._context.get('partner_id') and self._context.get('move_type') and not args:\n            return self._order_accounts_by_frequency_for_partner(self.env.company.id, self._context.get('partner_id'), self._context.get('move_type'))\n        return super()._search_read(args, fields=fields, offset=offset, limit=limit, order=order)\n\n    @api.model\n    def _search_count(self, args):\n        if self._context.get('partner_id') and self._context.get('move_", "CodeBleu_score": 41.51755104961134}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    for lang in self.env['res.lang'].search([]):\n        if lang.code == self._context.get('lang') or lang.code == 'en_US':\n            continue\n        if lang.code == 'en_US' and self.env.context.get('lang') == 'en_US':\n            continue\n        if lang.code == 'en_US' and self.env.context.get('lang') == 'en_IN':\n            continue\n        if lang.code == 'en_IN' and self.env.context.get('lang') == 'en_US':\n            continue\n        if lang.code == 'en_IN' and self.env.context.get('lang') == 'en_IN':\n            continue\n        if lang.code == 'en_IN' and self.env.context.get('lang') == 'fr_FR':\n            continue\n        if lang.code == 'fr_FR' and self.env.context.get('lang') == 'en_US':\n            continue\n        if lang.code == 'fr_FR' and self.env.context.get('lang') == 'en_IN':\n            continue\n        if lang.code == 'fr_FR' and self.env.context.get('lang') == 'fr_FR':\n            continue\n        if lang.code == 'fr_FR' and self.env.context.get('lang') == 'fr_CA':\n            continue\n        if lang.code == 'fr_CA' and self.env.context.get('lang') == 'en_US':\n            continue\n        if lang.code == 'fr_CA' and self.env.context.get('lang') == 'en_IN':\n            continue\n        if lang.code == 'fr_CA' and self.env.context.get('lang') == 'fr_FR':\n            continue\n        if lang.code == 'fr_CA' and self.env.context.get('lang') == 'fr_CA':\n            continue\n        if lang.code == 'fr_CA' and self.env.context.get('lang') == '", "CodeBleu_score": 18.705457547834126}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    if not self.env.context.get('copy_translations'):\n        return\n    if not new:\n        return\n    if not self.env.context.get('no_update_name', False):\n        new.name = self.name\n    if not self.env.context.get('no_update_code', False):\n        new.code = self.code\n    for field in self.fields_get():\n        if field in excluded or field in ('name', 'code') or field not in new.fields_get():\n            continue\n        if field == 'name':\n            continue\n        new[field] = self[field]\n        if field == 'display_name':\n            new.display_name = self.display_name\n\n    if new.name:\n        new.name = self.env['ir.translation']._get_cache_key(self.name, self._name)\n\n    if new.code:\n        new.code = self.env['ir.translation']._get_cache_key(self.code, self._name)\n\n    if new.display_name:\n        new.display_name = self.env['ir.translation']._get_cache_key(self.display_name, self._name)\n\n    if new.company_id:\n        new.company_id = self.env['ir.translation']._get_cache_key(self.company_id, self._name)\n\n    if new.currency_id:\n        new.currency_id = self.env['ir.translation']._get_cache_key(self.currency_id, self._name)\n\n    if new.user_type_id:\n        new.user_type_id = self.env['ir.translation']._get_cache_key(self.user_type_id, self._name)\n\n    if new.parent_id:\n        new.parent_id = self.env['ir.translation']._get_cache_key(self.parent_id, self._name)\n\n    if new.reconcile:\n        new.reconcile = self.env['ir.translation']._get_cache", "CodeBleu_score": 26.106680213725042}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    if not new.id:\n        return\n    if 'name' in excluded:\n        excluded = excluded.copy()\n        excluded.remove('name')\n    for field in self.translation_fields:\n        if field in excluded:\n            continue\n        if field == 'name' and new.name:\n            self.env['ir.translation']._update_cache_for_name(new.name)\n        self.env['ir.translation']._copy_translation(self, new, field)\n\n    # Copy the translation for the display_name field if the new record has a display_name\n    if new.display_name:\n        self.env['ir.translation']._copy_translation(self, new, 'display_name')\n\n    # Copy the translation for the display_description field if the new record has a display_description\n    if new.display_description:\n        self.env['ir.translation']._copy_translation(self, new, 'display_description')\n\n    # Copy the translation for the display_help field if the new record has a display_help\n    if new.display_help:\n        self.env['ir.translation']._copy_translation(self, new, 'display_help')\n\n    # Copy the translation for the help field if the new record has a help\n    if new.help:\n        self.env['ir.translation']._copy_translation(self, new, 'help')\n\n    # Copy the translation for the description field if the new record has a description\n    if new.description:\n        self.env['ir.translation']._copy_translation(self, new, 'description')\n\n    # Copy the translation for the note field if the new record has a note\n    if new.note:\n        self.env['ir.translation']._copy_translation(self, new, 'note')\n\n    # Copy the translation for the warning field if the new record has a warning\n    if new.warning:\n        self.env['ir.translation']._copy_translation(self, new, 'warning')\n\n    # Copy the translation for the website_message field if the new record has a website_", "CodeBleu_score": 24.53126465955205}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    sale_types = self.env['account.move'].get_sale_types(include_receipts=True)\n    query = self.env['account.move.line']._search([\n        ('parent_state', '=', 'posted'),\n        ('move_id.move_type', 'in', sale_types),\n    ])\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(self.id) for _ in self],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n    query_string, query_param = query.select(\n        r\"\"\"DISTINCT move_id, (regexp_matches(jsonb_object_keys(account_move_line.analytic_distribution), '\\d+', 'g'))[1]::int as account_id\"\"\"\n    )\n    query_string = f\"\"\"\n        SELECT account_id, count(move_id) FROM\n        ({query_string}) distribution\n        GROUP BY account_id\n    \"\"\"\n    self._cr.execute(query_string, query_param)\n    data = {res['account_id']: res['count'] for res in self._cr.dictfetchall()}\n    action = self.env.ref('account.action_move_line_form').read()[0]\n    action['domain'] = [('id', 'in', data.get(self.id, []))]\n    action['context'] = {'search_default_group_by':'move_id'}\n    return action\n\n", "CodeBleu_score": 42.93749462650608}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    sale_types = self.env['account.move'].get_sale_types(include_receipts=True)\n\n    query = self.env['account.move.line']._search([\n        ('parent_state', '=', 'posted'),\n        ('move_id.move_type', 'in', sale_types),\n    ])\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(account_id) for account_id in self.ids],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n\n    query_string, query_param = query.select(\n        r\"\"\"DISTINCT move_id, (regexp_matches(jsonb_object_keys(account_move_line.analytic_distribution), '\\d+', 'g'))[1]::int as account_id\"\"\"\n    )\n    query_string = f\"\"\"\n        SELECT account_id, count(move_id) FROM\n        ({query_string}) distribution\n        GROUP BY account_id\n    \"\"\"\n\n    self._cr.execute(query_string, query_param)\n    data = {res['account_id']: res['count'] for res in self._cr.dictfetchall()}\n    for account in self:\n        account.invoice_count = data.get(account.id, 0)\n\n    return {\n        'name': _('Invoices'),\n        'type': 'ir.actions.act_window',\n        'view_type': 'form',\n        'view_mode': 'tree,form',\n       'res_model': 'account.move',\n        'context': {\n            'default_partner_id': self.id,\n            'default_type': 'out_invoice',\n            'default_analytic_account_id': self.id,\n           'search_default_group_no_partner': 1,\n           'search_default_group_no_analytic': 1,\n           'search_default_group_no_move_type': 1,\n            'default_group_no_move_type': 1,\n            'default_group_no_partner': 1,\n            'default_group_no_analytic': 1,\n            'default_group_no_invoice_date': 1,\n            'default_group_no_ref': 1,\n           ", "CodeBleu_score": 35.6251818672375}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    sale_types = self.env['account.move'].get_sale_types(include_receipts=True)\n    query = self.env['account.move.line']._search([\n        ('parent_state', '=', 'posted'),\n        ('move_id.move_type', 'in', sale_types),\n    ])\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(account_id) for account_id in self.ids],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n\n    query_string, query_param = query.select(\n        r\"\"\"DISTINCT move_id, (regexp_matches(jsonb_object_keys(account_move_line.analytic_distribution), '\\d+', 'g'))[1]::int as account_id\"\"\"\n    )\n    query_string = f\"\"\"\n        SELECT account_id, count(move_id) FROM\n        ({query_string}) distribution\n        GROUP BY account_id\n    \"\"\"\n\n    self._cr.execute(query_string, query_param)\n    data = {res['account_id']: res['count'] for res in self._cr.dictfetchall()}\n    action = self.env.ref('account.action_move_line_form').read()[0]\n    action['domain'] = [('id', 'in', data.get(self.id, []))]\n    action['context'] = {\n        'group_by':'move_id',\n       'search_default_group_by':'move_id',\n    }\n    return action\n", "CodeBleu_score": 41.92941916142396}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    query = self.env['account.move.line']._search([('move_id.move_type', 'in', self.env['account.move'].get_purchase_types())])\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(self.id)],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n    query_string, query_param = query.select('DISTINCT account_move_line.move_id')\n    self._cr.execute(query_string, query_param)\n    move_ids = [line.get('move_id') for line in self._cr.dictfetchall()]\n    result = {\n        \"type\": \"ir.actions.act_window\",\n        \"res_model\": \"account.move\",\n        \"domain\": [('id', 'in', move_ids)],\n        \"context\": {\"create\": False, 'default_move_type': 'in_invoice'},\n        \"name\": _(\"Vendor Bills\"),\n        'view_mode': 'tree,form',\n    }\n    return result\n\n", "CodeBleu_score": 81.3073871986824}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    query = self.env['account.move.line']._search([('move_id.move_type', 'in', self.env['account.move'].get_purchase_types())])\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(self.id)],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n    query_string, query_param = query.select('DISTINCT account_move_line.move_id')\n    self._cr.execute(query_string, query_param)\n    move_ids = [line.get('move_id') for line in self._cr.dictfetchall()]\n    result = {\n        \"type\": \"ir.actions.act_window\",\n        \"res_model\": \"account.move\",\n        \"domain\": [('id', 'in', move_ids)],\n        \"context\": {\"create\": False, 'default_move_type': 'in_invoice'},\n        \"name\": _(\"Vendor Bills\"),\n        'view_mode': 'tree,form',\n    }\n    return result\n", "CodeBleu_score": 81.3073871986824}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    query = self.env['account.move.line']._search([('move_id.move_type', 'in', self.env['account.move'].get_purchase_types())])\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(self.id)],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n    query_string, query_param = query.select('DISTINCT account_move_line.move_id')\n    self._cr.execute(query_string, query_param)\n    move_ids = [line.get('move_id') for line in self._cr.dictfetchall()]\n    result = {\n        \"type\": \"ir.actions.act_window\",\n        \"res_model\": \"account.move\",\n        \"domain\": [('id', 'in', move_ids)],\n        \"context\": {\"create\": False, 'default_move_type': 'in_invoice'},\n        \"name\": _(\"Vendor Bills\"),\n        'view_mode': 'tree,form',\n    }\n    return result\n", "CodeBleu_score": 81.3073871986824}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t\n    if len(self) > 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n    with self._check_attachments(self, values):\n        return super().write(values)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 40.76875276396116}, {"code": "def write(self, values)\n\t\n    container = {'records': self}\n    with self._check_attachments(container, values):\\\n        container['records'] = super().write(values)\\\n    return container['records']\n", "CodeBleu_score": 42.85486546814645}, {"code": "def write(self, values)\n\t\n    if len(self) > 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        return super().write(values)\n\n\n", "CodeBleu_score": 67.5986221375798}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    if not self.env['ir.config_parameter'].sudo().get_param('account.skip_bank_account_creation', default=False):\n        # Search for an existing bank account with the same account number and partner ID.\n        bank_account = self.env['res.partner.bank'].search([('partner_id', '=', self.partner_id.id),\n                                                                  ('acc_number', '=', self.acc_number),\n                                                                  ('company_id', '=', self.company_id.id)], limit=1)\n        # Create a new bank account if none is found.\n        if not bank_account:\n            bank_account = self.env['res.partner.bank'].create({\n                'partner_id': self.partner_id.id,\n                'acc_number': self.acc_number,\n                'bank_name': self.bank_name,\n                'company_id': self.company_id.id,\n            })\n    else:\n        bank_account = self.env['res.partner.bank'].search([], limit=1)\n    return bank_account\n\n\n    @api.model\n    def _get_default_journal(self):\n        # OVERRIDE\n        # Ensure the default journal is the same as the statement one.\n        statement = self.env.context.get('default_statement_id')\n        if statement:\n            statement = self.env['account.bank.statement'].browse(statement)\n            return statement.journal_id.id\n        return super()._get_default_journal()\n\n    @api.model\n    def _get_default_partner_id(self):\n        # OVERRIDE\n        # Ensure the default partner is the same as the statement one.\n        statement = self.env.context.get('default_statement_id')\n        if statement:\n            statement = self.env['account.bank.statement'].browse(statement)\n            return statement.partner_id.id\n        return super()._get_default_partner_id()\n\n    @api.model\n    def _get_default_currency_id(self):\n        # OVERRIDE\n        # Ensure the default currency is the same", "CodeBleu_score": 49.052590725138444}, {"code": "def _find_or_create_bank_account(self)\n\t\n\n    # Check if the parameter is set to skip bank account creation\n    if self.env.user.company_id.skip_bank_account_creation:\\\n        return self.env['account.bank.account']\n\n    # Search for an existing bank account with the same account number and partner ID\n    bank_account = self.env['account.bank.account'].search([('partner_id', '=', self.partner_id.id), ('acc_number', '=', self.acc_number)], limit=1)\n\n    # If no bank account is found, create a new one\n    if not bank_account:\n        bank_account = self.env['account.bank.account'].create({\n            'partner_id': self.partner_id.id,\n            'acc_number': self.acc_number,\n            'company_id': self.company_id.id,\n        })\n\n    return bank_account\n\n\n    # -------------------------------------------------------------------------\n    # CONTEXT METHODS\n    # -------------------------------------------------------------------------\n\n    @api.model\n    def _context_get_bank_account(self):\n        \\\"\\\"\\\" Return the bank account associated to the partner and the account number. \\\"\\\"\\\"\n\n        # Check if the parameter is set to skip bank account creation\n        if self.env.user.company_id.skip_bank_account_creation:\n            return self.env['account.bank.account']\n\n        # Search for an existing bank account with the same account number and partner ID\n        bank_account = self.env['account.bank.account'].search([('partner_id', '=', self.partner_id.id), ('acc_number', '=', self.acc_number)], limit=1)\n\n        # If no bank account is found, create a new one\n        if not bank_account:\n            bank_account = self.env['account.bank.account'].create({\n                'partner_id': self.partner_id.id,\n                'acc_number': self.acc_number,\n                'company_id': self.company_id.id,\n            })\n\n        return bank_account\n\n\n    @api.model\n    def", "CodeBleu_score": 47.17563012645021}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if self.env.user.company_id.skip_bank_account_creation:\n        return self.env['res.partner.bank']\n    bank_account = self.env['res.partner.bank'].search([('partner_id', '=', self.partner_id.id),\n                                                                 ('acc_number', '=', self.acc_number)], limit=1)\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'partner_id': self.partner_id.id,\n            'acc_number': self.acc_number,\n            'bank_name': self.bank_name,\n            'bank_bic': self.bank_bic,\n            'bank_id': self.bank_id.id,\n            'currency_id': self.currency_id.id,\n            'company_id': self.company_id.id,\n        })\n    return bank_account\n\n\n    def _prepare_move_line_default_vals(self, counterpart_account_id=None):\n        \\\"\\\"\\\" Prepare the default values for the move lines.\n        \\\"\\\"\\\"\n        if self.foreign_currency_id:\n            amount = self.amount_currency\n        else:\n            amount = self.amount\n        return {\n            'name': self.narration or '',\n            'partner_id': self.partner_id.id,\n            'account_id': counterpart_account_id or self.counterpart_account_id.id,\n            'date': self.date,\n            'debit': amount if amount >= 0 else 0.0,\n            'credit': amount if amount <= 0 else 0.0,\n            'amount_currency': self.amount_currency,\n            'currency_id': self.foreign_currency_id.id,\n           'ref': self.ref or '',\n           'statement_line_id': self.id,\n        }\n\n    def _synchronize_to_moves(self, fields):\n        \\\"\\\"\\\" Synchronize the statement line with its move lines.\n        \\\"\\\"\\\"\n        if 'amount' in fields or 'amount_currency' in fields", "CodeBleu_score": 46.45023237529455}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    st_line = self.with_context(force_company=self.company_id).filtered(lambda st_line: st_line.id == self.id)\n    # Retrieve the accounting amounts and currencies\n    transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = st_line._get_accounting_amounts_and_currencies()\n    # Adjust the transaction amount and balance\n    if currency.is_zero(transaction_amount):\n        transaction_amount = balance\n    elif currency.is_zero(balance):\n        balance = transaction_amount\n    # Calculate the exchange rates\n    transaction_amount_rate = transaction_currency.rate * currency.rate\n        journal_amount_rate = journal_currency.rate * currency.rate\n        company_amount_rate = company_currency.rate * currency.rate\n        # Calculate the amounts in different currencies\n        transaction_amount_currency = transaction_amount * transaction_amount_rate\n        journal_amount_currency = journal_amount * journal_amount_rate\n        company_amount_currency = company_amount * company_amount_rate\n        # Return the amounts in different currencies\n        return {\n            'transaction_amount': transaction_amount,\n            'transaction_amount_currency': transaction_amount_currency,\n            'journal_amount': journal_amount,\n            'journal_amount_currency': journal_amount_currency,\n            'company_amount': company_amount,\n            'company_amount_currency': company_amount_currency,\n        }\n\n    def _get_default_statement_line_rate(self):\n        \\\"\\\"\\\" Retrieve the default statement line rate.\n        The statement line rate is the rate used to convert the transaction amount into the journal amount.\n        If the transaction currency is the same as the journal currency, the rate is 1.0. Otherwise, it is the rate between the transaction currency and the journal currency.\n        :return: The default statement line rate.\n        \\\"\\\"\\\"\n        self.ensure_one()\n        transaction_currency = self.foreign_currency_id or self.currency_id\n        journal_currency = self.journal_id.currency_id\n        if transaction_currency == journal_", "CodeBleu_score": 37.18349987977483}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    liquidity_line, suspense_line, other_lines = self._seek_for_lines()\n\n    if suspense_line and not other_lines:\n        transaction_amount = -suspense_line.amount_currency\n        transaction_currency = suspense_line.currency_id\n    else:\n        # In case of to_check or partial reconciliation, we can't trust the suspense line.\n        transaction_amount = self.amount_currency if self.foreign_currency_id else self.amount\n        transaction_currency = self.foreign_currency_id or liquidity_line.currency_id\n    return (\n        transaction_amount,\n        transaction_currency,\n        sum(liquidity_line.mapped('amount_currency')),\n        liquidity_line.currency_id,\n        sum(liquidity_line.mapped('balance')),\n        liquidity_line.company_currency_id,\n    )\n\n    def _get_accounting_amounts_and_currencies(self):\n        \\\"\\\"\\\" Retrieve the transaction amount, journal amount and the company amount with their corresponding currencies\n        from the journal entry linked to the statement line.\n        All returned amounts will be positive for an inbound transaction, negative for an outbound one.\n\n        :return: (\n            transaction_amount, transaction_currency,\n            journal_amount, journal_currency,\n            company_amount, company_currency,\n        )\n        \\\"\\\"\\\"\n        self.ensure_one()\n        liquidity_line, suspense_line, other_lines = self._seek_for_lines()\n        if suspense_line and not other_lines:\n            transaction_amount = -suspense_line.amount_currency\n            transaction_currency = suspense_line.currency_id\n        else:\n            # In case of to_check or partial reconciliation, we can't trust the suspense line.\n            transaction_amount = self.amount_currency if self.foreign_currency_id else self.amount\n            transaction_currency = self.foreign_currency_id or liquidity_line.currency_id\n        return (\n            transaction", "CodeBleu_score": 28.61266470131255}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    st_line = self.with_context(force_company=self.company_id).statement_line_id\n    if st_line.foreign_currency_id:\n        # Foreign currency\n        transaction_amount = st_line.amount_currency\n        journal_amount = st_line.amount_currency\n        company_amount = st_line.amount_currency\n    else:\n        # Base currency\n        transaction_amount = st_line.amount\n        journal_amount = st_line.amount\n        company_amount = st_line.amount\n    # Adjust the transaction amount and balance\n    if currency.is_zero(transaction_amount):\n        # No transaction amount\n        # We don't want to use the exchange rate of the statement line\n        # because it is not the exchange rate of the transaction itself\n        # (it is the exchange rate of the statement line to the base currency)\n        transaction_amount = currency.round(amount_currency)\n        balance = currency.round(amount_currency)\n    else:\n        # We use the exchange rate of the statement line\n        transaction_amount = currency.compute(transaction_amount, st_line.currency_id)\n        balance = currency.compute(balance, st_line.currency_id)\n    return {\n        'transaction_amount': transaction_amount,\n        'journal_amount': journal_amount,\n        'company_amount': company_amount,\n        'balance': balance,\n    }\n\n", "CodeBleu_score": 21.119566509650067}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        pay_method_line_ids_commands = [Command.clear()]\n        if journal.type in ('bank', 'cash'):\n            default_methods = journal._default_outbound_payment_methods()\n            pay_method_line_ids_commands += [Command.create({\n                'name': pay_method.name,\n                'payment_method_id': pay_method.id,\n            }) for pay_method in default_methods]\n        journal.outbound_payment_method_line_ids = pay_method_line_ids_commands\n\n", "CodeBleu_score": 81.53084552180385}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        pay_method_line_ids_commands = [Command.clear()]\n        if journal.type in ('bank', 'cash'):\n            default_methods = journal._default_outbound_payment_methods()\n            pay_method_line_ids_commands += [Command.create({\n                'name': pay_method.name,\n                'payment_method_id': pay_method.id,\n            }) for pay_method in default_methods]\n        journal.outbound_payment_method_line_ids = pay_method_line_ids_commands\n\n", "CodeBleu_score": 81.53084552180385}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        pay_method_line_ids_commands = [Command.clear()]\n        if journal.type in ('bank', 'cash'):\n            default_methods = journal._default_outbound_payment_methods()\n            pay_method_line_ids_commands += [Command.create({\n                'name': pay_method.name,\n                'payment_method_id': pay_method.id,\n            }) for pay_method in default_methods]\n        journal.outbound_payment_method_line_ids = pay_method_line_ids_commands\n", "CodeBleu_score": 81.53084552180385}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t\n    for move in self.filtered(lambda m: not m.invoice_date and not m.date):\n        move.invoice_date = fields.Date.context_today(self)\n    for move in self.filtered(lambda m: m.move_type not in ('out_invoice', 'out_refund')):\n        move.date = move.invoice_date\n    for move in self.filtered(lambda m: m.move_type in ('out_invoice', 'out_refund') and m.invoice_date and m.invoice_date!= m.date):\n        move.date = move._get_invoice_computed_date()\n    self._inverse_date()\n\n    @api.depends('invoice_date', 'company_id')\n    def _compute_date(self):\n        \"\"\"This function computes the date for each move. If the move has no invoice date and no existing date, it sets the date to today's date. If an invoice date exists, it checks if the move is not a sale document and calculates the accounting date based on the invoice date and tax report impact. If the calculated accounting date differs from the current date, it updates the move's date and schedules the recalculation of related fields in the environment.\"\"\"\n        for move in self.filtered(lambda m: not m.invoice_date and not m.date):\n            move.invoice_date = fields.Date.context_today(self)\n        for move in self.filtered(lambda m: m.move_type not in ('out_invoice', 'out_refund')):  # noqa\n            move.date = move.invoice_date\n        for move in self.filtered(lambda m: m.move_type in ('out_invoice', 'out_refund') and m.invoice_date and m.invoice_date!= m.date):\n            move.date = move._get_invoice_computed_date()\n        self._inverse_date()\n\n    @api.depends('invoice_date', 'company_id')\n    def _compute_date(self):\n        \"\"\"This function computes the date for each move. If the move has no invoice date and no existing date, it sets the date to today's date. If an invoice date exists, it checks if the move is not a sale document and calculates the accounting date", "CodeBleu_score": 34.20062676558352}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if move.invoice_date and not move.date:\n            move.date = move.invoice_date\n        elif not move.invoice_date and not move.date:\n            move.date = fields.Date.context_today(self)\n        elif move.move_type == 'out_invoice' and not move.date:\n            move.date = move._get_invoice_computed_date()\n\n        if move.date!= fields.Date.context_today(self):\n            self.env.cr.execute(\\\"\\\"\\\"\n                UPDATE account_move\n                SET date = %s\n                WHERE id = %s\n            \\\"\\\"\\\", (move.date, move.id))\n\n    def _compute_date_deadline(self):\n        for move in self:\n            if move.move_type == 'out_invoice':\n                move.date_deadline = move._get_invoice_computed_date()\n\n    def _compute_invoice_filter_type_domain(self):\n        for move in self:\n            if move.move_type == 'out_invoice':\n                move.invoice_filter_type_domain = 'out_invoice'\n            elif move.move_type == 'out_refund':\n                move.invoice_filter_type_domain = 'out_refund'\n            elif move.move_type == 'in_invoice':\n                move.invoice_filter_type_domain = 'in_invoice'\n            elif move.move_type == 'in_refund':\n                move.invoice_filter_type_domain = 'in_refund'\n            elif move.move_type == 'out_receipt':\n                move.invoice_filter_type_domain = 'out_receipt'\n            elif move.move_type == 'in_receipt':\n                move.invoice_filter_type_domain = 'in_receipt'\n            elif move.move_type == 'out_credit_note':\n                move.invoice_filter_type_domain = 'out_credit_note'\n            elif move.move_type == 'in_credit_note':\n                move.invoice_filter_type_domain = 'in_credit_note'\n", "CodeBleu_score": 32.25204364401103}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if not move.invoice_date:\n            if not move.date:\n                move.date = fields.Date.today()\n        elif not move.is_sale_document(include_receipts=True):\n            move.date = move._get_invoice_computed_date()\n        if move.date!= move.invoice_date:\n            move.invoice_date = move.date\n            move.invoice_date_due = move.date\n            move.invoice_date_due_date = move.date\n            move.invoice_date_due_date_end = move.date\n            move.invoice_date_due_date_start = move.date\n            move.invoice_date_due_date_start_end = move.date\n            move.invoice_date_due_date_start_start = move.date\n            move.invoice_date_due_date_start_start_end = move.date\n            move.invoice_date_due_date_start_start_start = move.date\n            move.invoice_date_due_date_start_start_start_end = move.date\n            move.invoice_date_due_date_start_start_start_start = move.date\n            move.invoice_date_due_date_start_start_start_start_end = move.date\n            move.invoice_date_due_date_start_start_start_start_start = move.date\n            move.invoice_date_due_date_start_start_start_start_start_end = move.date\n            move.invoice_date_due_date_start_start_start_start_start_start = move.date\n            move.invoice_date_due_date_start_start_start_start_start_start_end = move.date\n            move.invoice_date_due_date_start_start_start_start_start_start_start = move.date\n            move.invoice_date_due_date_start_start_start_start_start_start_start_end = move.date\n            move.invoice_date_due_date_start_start_start_", "CodeBleu_score": 28.246982832323475}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self.filtered(lambda m: m.invoice_payment_term_id and not m.invoice_payment_term_id.company_id):\n        if move.is_invoice(include_receipts=True):\n            move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n        else:\n            move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n", "CodeBleu_score": 37.00912647725145}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_invoice(include_receipts=True):\n            move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n        elif move.is_out_invoice():\n            move.invoice_payment_term_id = move.company_id.property_supplier_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n\n    @api.depends('invoice_payment_term_id', 'invoice_payment_term_id.line_ids')\n    def _compute_invoice_payment_term_date_due(self):\n        for move in self:\n            if move.invoice_payment_term_id:\n                move.invoice_payment_term_date_due = move.invoice_payment_term_id.line_ids.filtered(lambda line: line.value == 'balance').date_due\n            else:\n                move.invoice_payment_term_date_due = False\n\n    @api.depends('invoice_payment_term_id', 'invoice_payment_term_id.line_ids')\n    def _compute_invoice_payment_term_days_due(self):\n        for move in self:\n            if move.invoice_payment_term_id:\n                move.invoice_payment_term_days_due = move.invoice_payment_term_id.line_ids.filtered(lambda line: line.value == 'balance').days\n            else:\n                move.invoice_payment_term_days_due = 0\n\n    @api.depends('invoice_payment_term_id', 'invoice_payment_term_id.line_ids')\n    def _compute_invoice_payment_term_days_overdue(self):\n        for move in self:\n            if move.invoice_payment_term_id:\n                move.invoice_payment_term_days_overdue = move.invoice_payment_term_id.line_ids.filtered(lambda line: line.value == 'balance').days_overdue\n            else:\n                move.invoice_payment_term_days_overdue = 0\n\n   ", "CodeBleu_score": 43.10150481894973}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.move_type == 'out_invoice':\n            move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n        elif move.move_type == 'in_invoice':\n            move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n", "CodeBleu_score": 45.07767497789803}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        tax.tax_group_id = tax.company_id.account_fiscal_tax_group_id or tax.company_id.tax_group_id or tax.country_id.tax_group_id or tax.country_id.parent_id.tax_group_id or tax.country_id.parent_id.parent_id.tax_group_id or tax.country_id.parent_id.parent_id.parent_id.tax_group_id or tax.country_id.parent_id.parent_id.parent_id.parent_id.tax_group_id or tax.country_id.parent_id.parent_id.parent_id.parent_id.parent_id.tax_group_id or tax.country_id.parent_id.parent_id.parent_id.parent_id.parent_id.parent_id.tax_group_id or tax.country_id.parent_id.parent_id.parent_id.parent_id.parent_id.parent_id.parent_id.tax_group_id or tax.country_id.parent_id.parent_id.parent_id.parent_id.parent_id.parent_id.parent_id.parent_id.tax_group_id or tax.country_id.parent_id.parent_id.parent_id.parent_id.parent_id.parent_id.parent_id.parent_id.parent_id.tax_group_id or tax.country_id.parent_id.parent_id.parent_id.parent_id.parent_id.parent_id.parent_id.parent_id.parent_id.parent_id.tax_group_id or tax.country_id.parent_id.parent_id.parent_id.parent_id.parent_id.parent_id.parent_id.parent_id.parent_id.parent_id.parent_id.tax_group_id or tax.country_id.parent_id.parent_id.parent_id.parent_id.parent_id.parent_id.parent_id.parent_id.parent_id.parent_id.parent_id.parent_id.tax_group_id", "CodeBleu_score": 14.803966954775994}, {"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        tax.tax_group_id = tax.company_id.account_tax_group_id\n        if tax.country_id and tax.country_id!= tax.company_id.account_fiscal_country_id:\n            tax.tax_group_id = tax.company_id.account_tax_group_id.search([('country_id', '=', tax.country_id.id)], limit=1)\n            if not tax.tax_group_id:\n                tax.tax_group_id = tax.company_id.account_tax_group_id.search([('country_id', '=', False)], limit=1)\n\n    @api.depends('type_tax_use', 'company_id')\n    def _compute_is_used(self):\n        for tax in self:\n            tax.is_used = tax.type_tax_use!= 'none'\n            if tax.company_id.tax_exigibility == 'on_payment':\n                tax.is_used = tax.is_used and tax.type_tax_use =='sale_tax'\n            elif tax.company_id.tax_exigibility == 'on_invoice':\n                tax.is_used = tax.is_used and tax.type_tax_use!= 'purchase_tax'\n\n    @api.depends('repartition_line_ids')\n    def _compute_repartition_lines_str(self):\n        for tax in self:\n            tax.repartition_lines_str = ', '.join(line.name for line in tax.repartition_line_ids)\n\n    @api.depends('repartition_line_ids')\n    def _compute_invoice_repartition_line_ids(self):\n        for tax in self:\n            tax.invoice_repartition_line_ids = tax.repartition_line_ids.filtered(lambda line: line.document_type == 'invoice')\n\n    @api.depends('repartition_line_ids')\n    def _compute_refund_repartition_line_ids(self):\n        for tax in self:\n            tax.refund_repartition_line_ids = tax.", "CodeBleu_score": 25.973635326660872}, {"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        if tax.company_id.account_fiscal_country_id and tax.company_id.account_fiscal_country_id!= tax.country_id:\n            raise ValidationError(_(\\\"The tax group must have the same country_id as the tax using it.\\\"))\n\n    @api.depends('company_id', 'country_id')\n    def _compute_country_id(self):\n        for tax in self:\n            tax.country_id = tax.company_id.account_fiscal_country_id or tax.company_id.country_id or tax.country_id\n\n    @api.depends('company_id', 'country_id')\n    def _compute_country_id(self):\n        for tax in self:\n            tax.country_id = tax.company_id.account_fiscal_country_id or tax.company_id.country_id or tax.country_id\n\n    @api.depends('company_id', 'country_id')\n    def _compute_country_id(self):\n        for tax in self:\n            tax.country_id = tax.company_id.account_fiscal_country_id or tax.company_id.country_id or tax.country_id\n\n    @api.depends('company_id', 'country_id')\n    def _compute_country_id(self):\n        for tax in self:\n            tax.country_id = tax.company_id.account_fiscal_country_id or tax.company_id.country_id or tax.country_id\n\n    @api.depends('company_id', 'country_id')\n    def _compute_country_id(self):\n        for tax in self:\n            tax.country_id = tax.company_id.account_fiscal_country_id or tax.company_id.country_id or tax.country_id\n\n    @api.depends('company_id', 'country_id')\n    def _compute_country_id(self):\n        for tax in self:\n            tax.country_id = tax.company_id.account_fiscal_country", "CodeBleu_score": 22.965480767890433}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t    # Set the database in the session\n    self.session.get(url + '/web/database/selector/load')\n    # Prepare the POST request data\n    data = {'login': login, 'password':, 'db': db, 'force': force}\n    files = {'file': open(module_file, 'rb')}\n    # Upload the module file to the server\n    response = self.session.post(url + '/base_import_module/login_upload', data=data, files=files)\n    return response.text\n", "CodeBleu_score": 31.329182397866983}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t    # Set the database in the session\n    self.session.get(url + '/web/database/selector/load')\n    # Prepare the POST request data\n    data = {'login': login, 'password':, 'db': db, 'force': force}\n    files = {'file': open(module_file, 'rb')}\n    # Upload the module file\n    response = self.session.post(url + '/web/base_import_module/login_upload', data=data, files=files)\n    # Raise an exception if the server does not have the required module installed or is outdated\n    if response.status_code == 400 and 'Module is not installed' in response.text:\n        raise Exception('The server does not have the required module installed or is outdated')\n    # Return the server's response text\n    return response.text\n", "CodeBleu_score": 41.66239375384807}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t    # Set the database in the session\n    login_url = url + '/web/login'\n    login_data = {'login': login, 'password':, 'database': db}\n    self.session.post(login_url, data=login_data)\n    # Prepare the POST request data\n    upload_url = url + '/web/base_import_module/login_upload'\n    files = {'module_file': open(module_file, 'rb')}\n    data = {'force': force}\n    # Upload the module file\n    response = self.session.post(upload_url, files=files, data=data)\n    # Raise an exception if the module is not installed or is outdated\n    if response.text == 'not_installed' or response.text == 'outdated':\n        raise Exception('Module is not installed or is outdated')\n    # Return the server's response text\n    return response.text\n\n    def zip_module(self, module_path):\n        \\\"\\\"\\\"This function zips a module directory into a temporary file and returns the path of the temporary file.\\\"\\\"\\\"\n        # Create a temporary directory\n        with tempfile.TemporaryDirectory() as tmp_dir:\n            # Create a temporary file\n            tmp_file = Path(tmp_dir,'module.zip')\n            # Zip the module directory\n            with zipfile.ZipFile(tmp_file, 'w') as zip_file:\n                for root, _, files in os.walk(module_path):\n                    for file in files:\n                        zip_file.write(os.path.join(root, file), arcname=os.path.relpath(os.path.join(root, file), module_path))\n            # Return the path of the temporary file\n            return tmp_file\n\n    def add_arguments(self, parser):\n        parser.add_argument('module', help='The path of the module to deploy')\n        parser.add_argument('url', help='The URL of the Odoo instance')\n        parser.add_argument('login', help='The login of the Odoo instance')\n        parser.add_argument('password', help='The password of the O", "CodeBleu_score": 38.26020887955182}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t  config = odoo.tools.config\n    dbname = config['db_name']\n    overwrite = config['overwrite_translation']\n\n    _logger.info('importing translations from %s', config['translate_in'])\n\n    registry = odoo.modules.registry.Registry.new(dbname)\n    with registry.cursor() as cr:\n        importer = odoo.tools.trans_import(config['translate_in'], overwrite, cr)\n        importer.run()\n\n    _logger.info('translations imported successfully')\n\n", "CodeBleu_score": 37.3859285149888}, {"code": "def import_translation()\n\t  config = odoo.tools.config\n    dbname = config['db_name']\n    overwrite = config['translate_overwrite']\n\n    if config[\"language\"]:\n        msg = \"language %s\" % (config[\"language\"],)\n    else:\n        msg = \"new language\"\n    _logger.info('importing translation file for %s from %s', msg, config[\"translate_in\"])\n\n    fileformat = os.path.splitext(config[\"translate_in\"])[-1][1:].lower()\n    #.pot is the same fileformat as.po\n    if fileformat == \"pot\":\n        fileformat = \"po\"\n\n    with open(config[\"translate_in\"], \"rb\") as buf:\n        registry = odoo.modules.registry.Registry.new(dbname)\n        with registry.cursor() as cr:\n            odoo.tools.trans_import(config[\"language\"], config[\"translate_modules\"] or [\"all\"], buf, fileformat, overwrite, cr)\n\n    _logger.info('translation file imported successfully')\n", "CodeBleu_score": 56.220889094709584}, {"code": "def import_translation()\n\t  config = odoo.tools.config\n    dbname = config['db_name']\n    overwrite = config['overwrite_translations']\n    _logger.info('importing translations from %s', config['translate_in'])\n    fileformat = os.path.splitext(config['translate_in'])[-1][1:].lower()\n    #.pot is the same fileformat as.po\n    if fileformat == 'pot':\n        fileformat = 'po'\n    with open(config['translate_in'], 'rb') as buf:\n        registry = odoo.modules.registry.Registry.new(dbname)\n        with registry.cursor() as cr:\n            odoo.tools.trans_import(config['language'], config['translate_modules'] or ['all'], buf, fileformat, overwrite, cr)\n    _logger.info('translation import completed successfully')\n\n", "CodeBleu_score": 45.370514217475595}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\tif name not in self.children:\n        self.children.append(Node(name, self.graph, info))\n    node = self.children[-1]\n    node.depth = self.depth + 1\n    for attr in ('init', 'demo', 'update', 'dbdemo','state', 'installed_version'):\n        if hasattr(self, attr):\\\n            setattr(node, attr, getattr(self, attr))\n    self.children.sort(key=lambda x: x.name)\n    return node\n\n", "CodeBleu_score": 57.388073785561055}, {"code": "def add_child(self, name, info)\n\tif name in self.children:\n        return self.children[name]\n    else:\n        child = Node(name, self.graph, info)\n        child.depth = self.depth + 1\n        self.children.append(child)\n        self.children.sort(key=lambda c: c.name)\n        return child\n", "CodeBleu_score": 42.70743823236289}, {"code": "def add_child(self, name, info)\n\tif name in self.children:\n        return self.children[self.children.index(name)]\n    child = Node(name, self.graph, info)\n    child.depth = self.depth + 1\n    self.children.append(child)\n    self.children.sort(key=lambda n: n.name)\n    return child\n\n", "CodeBleu_score": 45.050258346996145}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n    result = [[d, 0] for d in dates]\n    root_type = frappe.db.get_value(\\\"Account\\\", account, \\\"root_type\\\")\n    if root_type == \\\"Asset\\\":\n        for d in dates:\n            for e in gl_entries:\n                if e.posting_date <= d[0]:\n                    result[d[0] - dates[0][0]][1] += e.debit - e.credit\n    elif root_type == \\\"Expense\\\":\n        for d in dates:\n            for e in gl_entries:\n                if e.posting_date <= d[0]:\n                    result[d[0] - dates[0][0]][1] += e.credit - e.debit\n    else:\n        for d in dates:\n            for e in gl_entries:\n                if e.posting_date <= d[0]:\n                    result[d[0] - dates[0][0]][1] += e.debit - e.credit\n    return result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 19.544029841958338}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    # initialize result with dates and zeros\n    result = [[d, 0] for d in dates]\n\n    # get root type\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n\n    # iterate through entries\n    for entry in gl_entries:\n        # get date\n        date = entry.posting_date\n\n        # get account\n        account = entry.account\n\n        # get debit and credit\n        debit = entry.debit\n        credit = entry.credit\n\n        # get balance\n        balance = entry.balance\n\n        # get account type\n        account_type = frappe.db.get_value(\"Account\", account, \"account_type\")\n\n        # get account root type\n        account_root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n\n        # update balance for the date\n        for r in result:\n            if r[0] == date:\n                if account_root_type == \"Asset\":\n                    r[1] += balance\n                elif account_root_type == \"Expense\":\n                    r[1] -= balance\n                elif account_type in (\"Liability\", \"Equity\"):\n                    r[1] += balance\n                else:\n                    r[1] -= balance\n                break\n\n    return result\n\n", "CodeBleu_score": 24.663040998689684}, {"code": "def build_result(account, dates, gl_entries)\n\t\n\n    # initialize result with dates and zeros for balances\n    result = [[d, 0] for d in dates]\n\n    # determine the account's root type\n    account_root_type = frappe.db.get_value(\n        \"Account\", account, \"root_type\"\n    )\n\n    # iterate through the entries\n    for entry in gl_entries:\n        # get the entry date\n        entry_date = entry.posting_date\n\n        # get the entry account\n        entry_account = entry.account\n\n        # get the entry amount\n        entry_amount = entry.debit - entry.credit\n\n        # get the entry balance\n        entry_balance = entry.balance\n\n        # get the entry root type\n        entry_root_type = frappe.db.get_value(\n            \"Account\", entry_account, \"root_type\"\n        )\n\n        # get the entry balance sign\n        entry_balance_sign = frappe.db.get_value(\n            \"Account\", entry_account, \"balance_sign\"\n        )\n\n        # get the entry balance type\n        entry_balance_type = frappe.db.get_value(\n            \"Account\", entry_account, \"balance_type\"\n        )\n\n        # get the entry balance\n        entry_balance = entry.balance\n\n        # get the entry balance sign\n        entry_balance_sign = frappe.db.get_value(\n            \"Account\", entry_account, \"balance_sign\"\n        )\n\n        # get the entry balance type\n        entry_balance_type = frappe.db.get_value(\n            \"Account\", entry_account, \"balance_type\"\n        )\n\n        # get the entry balance\n        entry_balance = entry.balance\n\n        # get the entry balance sign\n        entry_balance_sign = frappe.db.get_value(\n            \"Account\", entry_account, \"balance_sign\"\n        )\n\n        # get the entry balance type\n        entry_balance_type = frappe.db.get_value(\n            \"Account\", entry_account, \"balance_type\"\n        )\n\n        # get the entry balance\n        entry_balance = entry.balance\n\n        # get the entry balance sign\n        entry_balance_sign = frappe.db.get_value(\n            \"Account\", entry_account, \"balance_sign\"\n        )\n\n        # get the entry balance type\n        entry_balance_type = frappe.db.get_value(\n            \"Account\", entry", "CodeBleu_score": 16.668715876694687}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type in [\"Receivable\", \"Payable\"] and self.account_type!= self.old_account_type:\n        if self.old_account_type in [\"Receivable\", \"Payable\"] and frappe.db.get_value(\"GL Entry\", {\"account\": self.name}):\n            frappe.msgprint(\n                _(\n                    \"Warning: Changing the account type from 'Receivable' or 'Payable' to a non-receivable/payable type may result in potential issues in the 'Accounts' report. Please review the general ledger entries for the account and make any necessary adjustments.\"\n                ),\n                indicator=\"orange\",\n                title=\"Accounts\",\n            )\n            frappe.db.set_value(\"Account\", self.name, \"comment\", \"Changing account type from 'Receivable' or 'Payable' to a non-receivable/payable type may result in potential issues in the 'Accounts' report. Please review the general ledger entries for the account and make any necessary adjustments.\")\n", "CodeBleu_score": 24.804213497253617}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type in [\"Receivable\", \"Payable\"] and self.account_type!= self.old_account_type and self.old_account_type not in [\"Receivable\", \"Payable\"]:\n        if frappe.db.exists(\"GL Entry\", {\"account\": self.name}):\n            frappe.msgprint(\n                _(\n                    \"Warning: The account type has been changed from Receivable or Payable to a non-receivable/payable type. There are existing general ledger entries for this account. This may result in incorrect balances in the Accounts report.\"\n                ),\n                title=\"Account Type Change\",\n                indicator=\"orange\",\n                alert=True,\n            )\n            self.add_comment(\n                _(\"Account type has been changed from Receivable or Payable to a non-receivable/payable type. There are existing general ledger entries for this account. This may result in incorrect balances in the Accounts report.\")\n            )\n", "CodeBleu_score": 24.832626515247906}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type in [\"Receivable\", \"Payable\"] and self.account_type!= self.old_doc_info.get(\"account_type\"):\n        gl_entries = frappe.db.sql(\n            \"\"\"\n            SELECT\n                COUNT(*)\n            FROM `tabGL Entry`\n            WHERE account = %s\n            \"\"\",\n            (self.name,),\n        )\n        if gl_entries and gl_entries[0][0] > 0:\n            frappe.msgprint(\n                _(\n                    \"Warning: Changing the account type for {0} from {1} to {2} may result in potential issues in the Accounts report. Please check the GL entries for this account and make any necessary adjustments.\").format(\n                    self.name, self.old_doc_info.get(\"account_type\"), self.account_type\n                ),\n                title=\"Account Type Change\",\n                indicator=\"orange\",\n                alert=True,\n                is_warning=True,\n            )\n            self.add_comment(\n                _(\"Account type changed from {0} to {1}\").format(\n                    self.old_doc_info.get(\"account_type\"), self.account_type\n                )\n            )\n", "CodeBleu_score": 31.267102098443818}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n\n    if not self.currency:\n        self.currency = frappe.get_cached_value(\n            \"Company\", self.company, \"default_currency\"\n        )\n        self.flags.explicit_currency = 1\n\n    if self.get(\"__islocal\") and self.currency!= self.db_value.currency:\n        self.flags.explicit_currency = 1\n\n    if self.currency!= self.db_value.currency:\n        if frappe.db.get_all(\n            \"GL Entry\",\n            filters={\"account\": self.name, \"is_cancelled\": 0},\n            fields=[\"name\", \"company\", \"currency\"],\n        ):\n            frappe.throw(\n                _(\n                    \"Account {0}: Currency can not be changed after entries have been made with another currency\"\n                ).format(self.name)\n            )\n", "CodeBleu_score": 36.38137567463867}, {"code": "def validate_account_currency(self)\n\t\n\n    if not self.currency:\n        self.currency = self.company_currency\n\n    if not self.company_currency:\n        self.company_currency = frappe.get_cached_value(\n            \"Company\", self.company, \"default_currency\"\n        )\n\n    if self.company_currency!= self.currency:\n        self.flags.explicit_currency = 1\n\n    if self.company_currency!= self.currency:\n        frappe.throw(\n            _(\n                \"Account currency cannot be different from the company's default currency. Please update the account currency or the company's default currency.\"\n            )\n        )\n\n    if self.company_currency!= self.currency:\n        self.flags.explicit_currency = 1\n\n    if self.company_currency!= self.currency:\n        frappe.throw(\n            _(\n                \"Account currency cannot be different from the company's default currency. Please update the account currency or the company's default currency.\"\n            )\n        )\n\n    if self.company_currency!= self.currency:\n        self.flags.explicit_currency = 1\n\n    if self.company_currency!= self.currency:\n        frappe.throw(\n            _(\n                \"Account currency cannot be different from the company's default currency. Please update the account currency or the company's default currency.\"\n            )\n        )\n\n    if self.company_currency!= self.currency:\n        self.flags.explicit_currency = 1\n\n    if self.company_currency!= self.currency:\n        frappe.throw(\n            _(\n                \"Account currency cannot be different from the company's default currency. Please update the account currency or the company's default currency.\"\n            )\n        )\n\n    if self.company_currency!= self.currency:\n        self.flags.explicit_currency = 1\n\n    if self.company_currency!= self.currency:\n        frappe.throw(\n            _(\n                \"Account currency cannot be different from the company's default currency. Please update the account currency or the company's default currency.\"\n            )\n        )\n\n    if self.company_currency!= self.currency:\n        self.flags.explicit_currency = 1\n\n    if self.company_currency!= self.currency:\n        frappe.throw(\n            _(\n                \"Account currency cannot be different from the company's default currency. Please update the account currency or the company's default currency.\"\n            )\n        )\n\n    if self.company_currency!= self.currency:\n        self.flags.", "CodeBleu_score": 28.09684208769958}, {"code": "def validate_account_currency(self)\n\t\n    if not self.currency:\n        self.currency = self.company_currency\n    else:\n        self.flags.explicit_currency = 1\n\n    if self.get_gle_with_different_currency():\n        msg = _(\"Account currency does not match the currency of the general ledger entries. Please check the general ledger entries and change the currency of the account or delete the entries.\")\n        frappe.throw(msg, AccountCurrencyMismatch)\n\n", "CodeBleu_score": 25.049611589790022}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key = tuple(entry[dim] for dim in accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \\\"account\\\": entry[\\\"account\\\"],\n                \\\"account_currency\\\": entry[\\\"account_currency\\\"],\n                \\\"company\\\": entry[\\\"company\\\"],\n                \\\"cost_center\\\": entry[\\\"cost_center\\\"],\n                \\\"credit\\\": 0,\n                \\\"credit_in_account_currency\\\": 0,\n                \\\"debit\\\": 0,\n                \\\"debit_in_account_currency\\\": 0,\n                \\\"dimensions\\\": {\n                    dim: entry[dim] for dim in accounting_dimensions\n                },\n                \\\"finance_book\\\": entry[\\\"finance_book\\\"],\n                \\\"project\\\": entry[\\\"project\\\"],\n            }\n        merged_entries[key][\\\"debit\\\"] += entry[\\\"debit\\\"]\n        merged_entries[key][\\\"credit\\\"] += entry[\\\"credit\\\"]\n        merged_entries[key][\\\"debit_in_account_currency\\\"] += entry[\\\"debit_in_account_currency\\\"]\n        merged_entries[key][\\\"credit_in_account_currency\\\"] += entry[\\\"credit_in_account_currency\\\"]\n    return merged_entries\n\n", "CodeBleu_score": 24.055460516936986}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key = tuple(entry[dim] for dim in accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = entry\n        else:\n            merged_entries[key][\\\"debit\\\"] += entry[\\\"debit\\\"]\n            merged_entries[key][\\\"debit_in_account_currency\\\"] += entry[\\\"debit_in_account_currency\\\"]\n            merged_entries[key][\\\"credit\\\"] += entry[\\\"credit\\\"]\n            merged_entries[key][\\\"credit_in_account_currency\\\"] += entry[\\\"credit_in_account_currency\\\"]\n    return merged_entries\n\n", "CodeBleu_score": 28.239001083760552}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key = tuple(entry[dim] for dim in accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \\\"account\\\": entry[\\\"account\\\"],\n                \\\"account_currency\\\": entry[\\\"account_currency\\\"],\n                \\\"debit\\\": 0,\n                \\\"debit_in_account_currency\\\": 0,\n                \\\"credit\\\": 0,\n                \\\"credit_in_account_currency\\\": 0,\n                \\\"dimensions\\\": {dim: entry[dim] for dim in accounting_dimensions},\n            }\n        merged_entries[key][\\\"debit\\\"] += entry[\\\"debit\\\"]\n        merged_entries[key][\\\"debit_in_account_currency\\\"] += entry[\\\"debit_in_account_currency\\\"]\n        merged_entries[key][\\\"credit\\\"] += entry[\\\"credit\\\"]\n        merged_entries[key][\\\"credit_in_account_currency\\\"] += entry[\\\"credit_in_account_currency\\\"]\n    return merged_entries\n\n", "CodeBleu_score": 27.275389522659815}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.is_supplier_blocked():\n        if self.doctype == \\\"Purchase Invoice\\\" and self.supplier_on_hold_type == \\\"Payment Hold\\\":\n            if self.supplier_on_hold_release_date and self.supplier_on_hold_release_date < today():\n                frappe.throw(\n                    _(\\\"The supplier is still on hold. The hold release date has passed. Please contact the supplier or the company's accountant for further assistance.\\\"),\n                    title=\\\"Supplier on Hold\\\")\n\n        elif self.doctype == \\\"Purchase Invoice\\\" and self.supplier_on_hold_type == \\\"Item Hold\\\":\n            frappe.throw(\n                _(\\\"The supplier is still on hold. Please contact the supplier or the company's accountant for further assistance.\\\"),\n                title=\\\"Supplier on Hold\\\")\n\n        elif self.doctype == \\\"Purchase Order\\\" and self.supplier_on_hold_type == \\\"Item Hold\\\":\n            frappe.throw(\n                _(\\\"The supplier is still on hold. Please contact the supplier or the company's accountant for further assistance.\\\"),\n                title=\\\"Supplier on Hold\\\")\n\n        elif self.doctype == \\\"Quotation\\\" and self.supplier_on_hold_type == \\\"Item Hold\\\":\n            frappe.throw(\n                _(\\\"The supplier is still on hold. Please contact the supplier or the company's accountant for further assistance.\\\"),\n                title=\\\"Supplier on Hold\\\")\n\n        elif self.doctype == \\\"Sales Invoice\\\" and self.supplier_on_hold_type == \\\"Payment Hold\\\":\n            frappe.throw(\n                _(\\\"The supplier is still on hold. The hold release date has passed. Please contact the supplier or the company's accountant for further assistance.\\\"),\n                title=\\\"Supplier on Hold\\\")\n\n        elif self.doctype == \\\"Sales Invoice\\\" and self.supplier_on_hold_type == \\\"Item Hold\\\":\n            frappe.throw(\n                _(\\\"The supplier is still on hold. Please contact the supplier or the company's accountant for further assistance.\\\"),\n                title=\\\"Supplier on Hold\\\")\n\n        elif self.doctype == \\\"Sales Order\\\" and self.supplier_on_hold_type == \\\"Item Hold\\\":\n            frappe", "CodeBleu_score": 23.257216439479105}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.update_stock and self.doctype in (\\\"Purchase Invoice\\\", \\\"Purchase Order\\\"):\n\t\tsupplier = self.get_supplier()\n\n\t\tif supplier.on_hold and supplier.on_hold.hold_type == \\\"Supplier Blocked\\\":\n\t\t\tif supplier.on_hold.release_date and supplier.on_hold.release_date < today():\n\t\t\t\tthrow(frappe._(\\\"Supplier {0} is blocked. Please contact your supplier to resolve this issue.\\\").format(supplier.name))\n\n\tdef get_supplier(self):\n\t\tif self.update_stock:\n\t\t\tsupplier = frappe.get_doc(\\\"Supplier\\\", self.supplier)\n\n\t\t\tif not supplier.is_active:\n\t\t\t\tthrow(frappe._(\\\"Supplier {0} is not active. Please contact your supplier to resolve this issue.\\\").format(supplier.name))\n\n\t\t\treturn supplier\n\n\tdef get_supplier_account(self):\n\t\tif self.update_stock:\n\t\t\tsupplier = self.get_supplier()\n\t\t\tsupplier_account = get_party_account(supplier.name, supplier.supplier_type)\n\n\t\t\tif not supplier_account:\n\t\t\t\tthrow(frappe._(\\\"Supplier {0} does not have a {1} account. Please contact your supplier to resolve this issue.\\\").format(supplier.name, supplier.supplier_type))\n\n\t\t\treturn supplier_account\n\n\tdef get_supplier_account_currency(self):\n\t\tif self.update_stock:\n\t\t\tsupplier = self.get_supplier()\n\t\t\tsupplier_account_currency = get_party_account_currency(supplier.name, supplier.supplier_type)\n\n\t\t\tif not supplier_account_currency:\n\t\t\t\tthrow(frappe._(\\\"Supplier {0} does not have a {1} account. Please contact your supplier to resolve this issue.\\\").format(supplier.name, supplier.supplier_type))\n\n\t\t\treturn supplier_account_currency\n\n\tdef get_supplier_account_currency_exchange_rate(self):\n\t\tif self.update_stock:\n\t\t\tsupplier = self.get_supplier()\n\t\t\tsupplier_", "CodeBleu_score": 29.11949618215263}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n\n    if self.update_stock:\n\t\tif self.doctype in (\\\"Purchase Invoice\\\", \\\"Sales Invoice\\\"):\n\t\t\tif self.supplier:\n\t\t\t\tsupplier_details = frappe.db.get_value(\n\t\t\t\t\t\\\"Supplier\\\", self.supplier, [\n\t\t\t\t\t\t\\\"name\\\",\n\t\t\t\t\t\t\\\"supplier_type\\\",\n\t\t\t\t\t\t\\\"on_hold\\\",\n\t\t\t\t\t\t\\\"on_hold_type\\\",\n\t\t\t\t\t\t\\\"on_hold_release_date\\\",\n\t\t\t\t\t]\n\t\t\t\t)\n\n\t\t\t\tif supplier_details:\n\t\t\t\t\tsupplier_name = supplier_details.name\n\t\t\t\t\tsupplier_type = supplier_details.supplier_type\n\t\t\t\t\ton_hold = supplier_details.on_hold\n\t\t\t\t\ton_hold_type = supplier_details.on_hold_type\n\t\t\t\t\ton_hold_release_date = supplier_details.on_hold_release_date\n\n\t\t\t\t\tif on_hold and on_hold_type == self.doctype:\n\t\t\t\t\t\tif on_hold_release_date and on_hold_release_date < nowdate():\n\t\t\t\t\t\t\tfrappe.throw(\n\t\t\t\t\t\t\t\t_(\\\"{0} {1} is on hold until {2} and cannot be updated\\\").format(\n\t\t\t\t\t\t\t\t\tsupplier_type, supplier_name, formatdate(on_hold_release_date, date_format=None)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\n\tdef validate(self):\n\t\tif self.doctype in (\\\"Purchase Invoice\\\", \\\"Sales Invoice\\\"):\n\t\t\tself.validate_supplier()\n\n\t\tif self.doctype == \\\"Purchase Invoice\\\":\n\t\t\tself.validate_supplier_payment_schedule()\n\n\t\tif self.doctype == \\\"Sales Invoice\\\":\n\t\t\tself.validate_customer_payment_schedule()\n\n\t\tself.validate_payment_terms()\n\t\tself.validate_currency_exchange_rate()\n\t\tself.validate_exchange_rate_difference()\n\t\tself.validate_exchange_rate_against_company_currency()\n\t\tself.validate_conversion_rate()\n\t\tself.validate_conversion_rate_against_company_currency()\n\t\tself.validate_conversion_rate_against", "CodeBleu_score": 24.17720413538423}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = [\"Repost Journal Entry\", \"Repost Payment Entry\", \"Repost Purchase Invoice\", \"Repost Sales Invoice\"]\n    rows = (\n        frappe.qb.from_(frappe.qb.DocType(\"Voucher Posting\"))\n       .select(frappe.qb.DocType(\"Voucher Posting\").name, frappe.qb.DocType(\"Voucher Posting\").parent)\n       .where((frappe.qb.DocType(\"Voucher Posting\").voucher_type == self.doctype) & (frappe.qb.DocType(\"Voucher Posting\").voucher_no == self.name))\n       .run(as_dict=True)\n    )\n    if rows:\n        references_map = frappe._dict()\n        for x in rows:\n            references_map.setdefault(x.parent, []).append(x.name)\n\n        for doc, rows in references_map.items():\n            parent_doc = frappe.get_doc(doc)\n            if doc in repost_doctypes:\n                for row in rows:\n                    parent_doc.remove(parent_doc.get(\"repost_vouchers\", { \"name\": row })[0])\n            else:\n                for row in rows:\n                    parent_doc.remove(parent_doc.get(\"vouchers\", { \"name\": row })[0])\n\n            parent_doc.flags.ignore_validate_update_after_submit = True\n            parent_doc.flags.ignore_links = True\n            parent_doc.save(ignore_permissions=True)\n", "CodeBleu_score": 37.32048068261283}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    # Identify the relevant repost doctypes\n    repost_doctypes = [\"Repost Journal Entry\", \"Repost Purchase Invoice\", \"Repost Sales Invoice\", \"Repost Payment Entry\"]\n    # Query for rows where the voucher type and number match the current document\n    rows = frappe.db.sql(\n        \"\"\"\n        SELECT\n            name, parent, voucher_type, voucher_no\n        FROM\n            `tab{doctype}`\n        WHERE\n            voucher_type = %s\n            AND voucher_no = %s\n        \"\"\".format(\n            doctype=self.doctype\n        ),\n        (self.doctype, self.name),\n        as_dict=True,\n    )\n    # Organize rows into a map by parent document type and parent\n    references_map = frappe._dict()\n    for x in rows:\n        references_map.setdefault(x.parent, []).append(x)\n    # Retrieve each parent document, remove the relevant rows from either \"repost_vouchers\" or \"vouchers\" fields, set flags to ignore validation and links, and save the changes\n    for doc, rows in references_map.items():\n        parent = frappe.get_doc(doc)\n        if doc in repost_doctypes:\n            for row in rows:\n                parent.remove(parent.get(\"repost_vouchers\", {\"name\": row.name})[0])\n        else:\n            for row in rows:\n                parent.remove(parent.get(\"vouchers\", {\"name\": row.name})[0])\n        parent.flags.ignore_validate_update_after_submit = True\n        parent.flags.ignore_links = True\n        parent.save(ignore_permissions=True)\n\n", "CodeBleu_score": 33.6219338017541}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = [\"Repost Journal Entry\", \"Repost Sales Invoice\", \"Repost Purchase Invoice\", \"Repost Payment Entry\", \"Repost Journal Entry\", \"Repost Payment Entry\"]\n    rows = (\n        frappe.qb.from_(frappe.qb.DocType(\"Repost Voucher Entries\"))\n       .select(frappe.qb.DocType(\"Repost Voucher Entries\").name, frappe.qb.DocType(\"Repost Voucher Entries\").parent)\n       .where((frappe.qb.DocType(\"Repost Voucher Entries\").voucher_type == self.doctype) & (frappe.qb.DocType(\"Repost Voucher Entries\").voucher_no == self.name))\n       .run(as_dict=True)\n    )\n    if rows:\n        references_map = frappe._dict()\n        for x in rows:\n            references_map.setdefault(x.parent, []).append(x.name)\n\n        for doc, rows in references_map.items():\n            repost_doc = frappe.get_doc(doc)\n            for row in rows:\n                repost_doc.remove(repost_doc.get(\"repost_vouchers\", {\"name\": row})[0])\n\n            repost_doc.flags.ignore_validate_update_after_submit = True\n            repost_doc.flags.ignore_links = True\n            repost_doc.save(ignore_permissions=True)\n\n    if self.doctype in repost_doctypes:\n        unrepost_docs = frappe.db.get_all(self.doctype, filters={\"voucher_no\": self.name})\n        for x in unrepost_docs:\n            _doc = frappe.get_doc(self.doctype, x.name)\n            if _doc.docstatus == 1:\n                _doc.cancel()\n            _doc.delete()\n\n", "CodeBleu_score": 41.38366925653722}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        self.auth()\n    except Exception as e:\n        raise e\n\n    # Construct the query parameters\n    params = {\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n        \"options\": {\"account_ids\": [account_id] if account_id else None},\n    }\n\n    # Fetch the transactions\n    transactions = []\n    while True:\n        try:\n            response = self.client.Transactions.get(self.access_token, **params)\n        except ItemError as e:\n            if e.code == \"ITEM_LOGIN_REQUIRED\":\n                pass\n        except APIError as e:\n            if e.code == \"PLANNED_MAINTENANCE\":\n                pass\n        except requests.Timeout:\n            pass\n        except Exception as e:\n            raise e\n\n        # Check if the number of retrieved transactions is less than the total\n        if len(response[\"transactions\"]) < response[\"total_transactions\"]:\n            # Update the parameters with the next set of transactions\n            params[\"offset\"] = len(response[\"transactions\"])\n        else:\n            # All transactions have been retrieved\n            transactions.extend(response[\"transactions\"])\n            break\n\n    return transactions\n", "CodeBleu_score": 37.430973369807234}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        self.auth()\n        params = {\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n            \"options\": {\"account_ids\": [account_id]},\n        }\n        response = self.client.Transactions.get(self.access_token, params)\n        transactions = response[\"transactions\"]\n        num_transactions = len(transactions)\n        total_transactions = response[\"total_transactions\"]\n        if num_transactions < total_transactions:\n            while num_transactions < total_transactions:\n                params[\"offset\"] = num_transactions\n                response = self.client.Transactions.get(self.access_token, params)\n                transactions.extend(response[\"transactions\"])\n                num_transactions = len(transactions)\n        return transactions\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            pass\n        else:\n            raise e\n    except APIError as e:\n        if e.code == \"PLANNED_MAINTENANCE\":\n            pass\n        else:\n            raise e\n    except requests.Timeout:\n        pass\n    except Exception as e:\n        frappe.log_error(e)\n        raise e\n", "CodeBleu_score": 46.03786382490277}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    if not self.access_token:\n        raise Exception(\\\"Plaid: Access token is missing\\\")\n    try:\n        self.auth()\n    except Exception as e:\n        raise e\n    try:\n        transactions = self.client.Transactions.get(\n            self.access_token, start_date, end_date, account_id=account_id\n        )\n    except ItemError as e:\n        if e.code == \\\"ITEM_LOGIN_REQUIRED\\\":\n            pass\n    except APIError as e:\n        if e.code == \\\"PLANNED_MAINTENANCE\\\":\n            pass\n    except requests.Timeout:\n        pass\n    except Exception as e:\n        frappe.log_error(\\\"Plaid: Transactions retrieval error\\\")\n        frappe.throw(str(e), title=_(\\\"Transactions Retrieval Failed\\\"))\n    else:\n        return transactions\n", "CodeBleu_score": 36.26994262758731}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    plaid_connector = PlaidConnector()\n    try:\n        access_token = plaid_connector.exchange_public_token(token)\n    except ItemError as e:\n        frappe.log_error(\n            title=\"Plaid Error\", message=f\"Error exchanging public token: {e}\", exc=None, log_to_console=True\n        )\n        return\n    institution = frappe.get_doc(\"Institution\", {\"plaid_id\": response[\"institution\"][\"institution_id\"]})\n    if not institution:\n        institution = frappe.new_doc(\"Institution\")\n        institution.plaid_id = response[\"institution\"][\"institution_id\"]\n        institution.name = response[\"institution\"][\"name\"]\n        institution.save(ignore_permissions=True)\n    else:\n        institution.access_token = access_token\n        institution.save(ignore_permissions=True)\n\n", "CodeBleu_score": 34.07360701757174}, {"code": "def add_institution(token, response)\n\t\n    plaid = PlaidConnector()\n    try:\n        institution = plaid.get_institution(token, response)\n    except ItemError as e:\n        frappe.log_error(e.error_code, e.error_message)\n        return\n\n    bank_name = institution.get(\"institution_name\")\n    if bank_name:\n\t\tbank = frappe.get_doc({\\\"doctype\\\": \\\"Bank\\\", \\\"bank_name\\\": bank_name})\n\t\tbank.access_token = institution.get(\"access_token\")\n\t\tbank.save(ignore_permissions=True)\n\t\tadd_tag(bank.name, \\\"Plaid Bank\\\")\n\n", "CodeBleu_score": 32.26768222915052}, {"code": "def add_institution(token, response)\n\t\n    try:\n        plaid = PlaidConnector()\n        access_token = plaid.exchange_token(response.get(\"access_token\"))\n        institution = response.get(\"institution\")\n        bank_name = institution.get(\"name\")\n        bank_id = institution.get(\"institution_id\")\n        plaid_settings = frappe.get_single(\"Plaid Settings\")\n        if not frappe.db.exists(\"Bank\", {\"plaid_id\": bank_id}):\n            bank = frappe.new_doc(\"Bank\")\n            bank.name = bank_name\n            bank.plaid_id = bank_id\n            bank.save(ignore_permissions=True)\n        else:\n            bank = frappe.get_doc(\"Bank\", {\"plaid_id\": bank_id})\n        bank.access_token = access_token\n        bank.save(ignore_permissions=True)\n        frappe.db.commit()\n    except Exception as e:\n        frappe.log_error(message=e, title=\"Plaid Settings\")\n\n", "CodeBleu_score": 40.73303376711679}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        plaid = PlaidConnector()\n        start_date = bank.last_integration_date or today()\n        end_date = today()\n        transactions = plaid.get_transactions(bank_account.integration_id, start_date, end_date)\n        for transaction in transactions:\n            try:\n                bank_transaction = frappe.get_doc(\n                    {\n                        \"doctype\": \"Bank Transaction\",\n                        \"bank\": bank.bank_name,\n                        \"account\": bank_account.account,\n                        \"account_name\": bank_account.account_name,\n                        \"account_type\": bank_account.account_type,\n                        \"account_subtype\": bank_account.account_subtype,\n                        \"amount\": transaction[\"amount\"],\n                        \"currency\": transaction[\"currency\"],\n                        \"date\": transaction[\"date\"],\n                        \"description\": transaction[\"name\"],\n                        \"integration_id\": transaction[\"id\"],\n                        \"integration_date\": transaction[\"date\"],\n                    }\n                )\n                bank_transaction.insert()\n            except Exception:\n                frappe.log_error(\"Plaid Link Error\")\n                frappe.throw(\n                    _(\n                        \"There was an error creating Bank Transaction while linking with Plaid.\"\n                    ),\n                    title=_(\"Plaid Link Failed\"),\n                )\n        if transactions:\n            bank.last_integration_date = transactions[-1][\"date\"]\n            bank.save()\n        frappe.msgprint(\n            _(\n                \"Successfully synced {0} transactions for {1} on {2}\").format(\n                    len(transactions), bank_account.account_name, end_date\n                )\n        )\n    except ItemError as e:\n        frappe.log_error(e)\n        frappe.throw(\n            _(\n                \"There was an error while syncing transactions for {0}. Please check the logs for more information.\").format(\n                    bank_account.account_name\n                ),\n            title=_(\"Plaid Link Failed\"),\n        )\n    except Exception:\n        frappe.log_error(\"Plaid Link Error\")\n        frappe.throw(\n            _(\n                \"There was an error while syncing transactions for {0}.\").format(\n                    bank_account.account_name\n                ),\n            title=_(\"Plaid Link Failed\"),\n        )\n\n", "CodeBleu_score": 26.996082254919045}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        plaid = PlaidConnector()\n        start_date = frappe.db.get_value(\"Bank Account\", bank_account, \"last_integration_date\")\n        if not start_date:\n            start_date = today()\n        end_date = today()\n        transactions = plaid.get_transactions(bank_account, start_date, end_date)\n        if transactions:\n            new_transactions = []\n            for transaction in transactions:\n                new_transaction = frappe.get_doc(\n                    {\n                        \"doctype\": \"Bank Transaction\",\n                        \"bank\": bank,\n                        \"bank_account\": bank_account,\n                        \"account_date\": transaction[\"date\"],\n                        \"amount\": transaction[\"amount\"],\n                        \"reference_number\": transaction[\"name\"],\n                        \"transaction_type\": transaction[\"category\"][0],\n                        \"description\": transaction[\"name\"],\n                        \"company\": frappe.db.get_value(\"Bank Account\", bank_account, \"company\"),\n                    }\n                )\n                new_transaction.insert()\n                new_transactions.append(new_transaction.name)\n            if new_transactions:\n                frappe.db.set_value(\n                    \"Bank Account\", bank_account, \"last_integration_date\", transactions[0][\"date\"]\n                )\n                frappe.msgprint(\n                    _(\n                        \"{0} new transactions added for bank {1} and bank account {2}.\"\n                    ).format(len(new_transactions), bank, bank_account)\n                )\n        else:\n            frappe.msgprint(_(\"No transactions found for bank {0} and bank account {1}.\").format(bank, bank_account))\n    except ItemError as e:\n        frappe.log_error(\n            \"Plaid Link Error\",\n            _(\"There was an error while retrieving transactions for bank {0} and bank account {1}.\").format(\n                bank, bank_account\n            ),\n            title=_(\"Plaid Link Failed\"),\n            exc=e,\n        )\n    except Exception as e:\n        frappe.log_error(\n            \"Plaid Link Error\",\n            _(\"There was an error while retrieving transactions for bank {0} and bank account {1}.\").format(\n                bank, bank_account\n            ),\n            title=_(\"Plaid Link Failed\"),\n            exc=e,\n        )\n\n", "CodeBleu_score": 36.28343256323889}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        plaid = PlaidConnector()\n        start_date = frappe.db.get_value(\"Bank Account\", bank_account, \"last_integration_date\")\n        end_date = today()\n        if start_date:\n            start_date = getdate(start_date)\n            end_date = getdate(end_date)\n            start_date = formatdate(start_date)\n            end_date = formatdate(end_date)\n\n        response = plaid.get_transactions(bank_account, start_date, end_date)\n        if not response:\\\n            return\n\n        for transaction in response[\"transactions\"]:\n            if not frappe.db.exists(\"Bank Transaction\", transaction[\"transaction_id\"]):\n                new_transaction = frappe.get_doc({\n                    \"doctype\": \"Bank Transaction\",\n                    \"bank_account\": bank_account,\n                    \"integration_id\": transaction[\"transaction_id\"],\n                    \"date\": transaction[\"date\"],\n                    \"amount\": transaction[\"amount\"],\n                    \"description\": transaction[\"name\"],\n                    \"is_company_transaction\": 1,\n                    \"company\": frappe.db.get_value(\"Bank Account\", bank_account, \"company\"),\n                })\n                new_transaction.insert()\n\n        last_integration_date = response[\"transactions\"][-1][\"date\"]\n        frappe.db.set_value(\"Bank Account\", bank_account, \"last_integration_date\", last_integration_date)\n        frappe.msgprint(\n            _(\"Successfully synced {0} transactions for {1}\").format(\n                len(response[\"transactions\"]), bank_account\n            )\n        )\n    except ItemError as e:\n        frappe.log_error(\n            _(\"Plaid Link Error: {0}\").format(e.message),\n            title=_(\"Plaid Link Failed\"),\n        )\n    except Exception as e:\n        frappe.log_error(\n            _(\"Plaid Link Error: {0}\").format(e),\n            title=_(\"Plaid Link Failed\"),\n        )\n\n", "CodeBleu_score": 38.0791896251795}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    self.set_indicator(f\\\"Migrating {entity}...\\\")\n    try:\n\t\tself._log(f\\\"Migrating {entity}...\\\")\n\t\tself._make_custom_quickbooks_id_field(entity)\n\t\tself._make_custom_company_field(entity)\n\t\tself._make_custom_cost_center_field(entity)\n\t\tself._make_custom_warehouse_field(entity)\n\t\tself._make_custom_default_cost_center_field(entity)\n\t\tself._make_custom_default_warehouse_field(entity)\n\n\t\t# Get the total number of entries for the entity\n\t\ttotal_entries = self._get_total_entries(entity)\n\t\tself._log(f\\\"Total {entity} entries: {total_entries}\\\")\n\t\t# Fetch the entries in batches of 1000\n\t\toffset = 0\n\t\twhile offset < total_entries:\n\t\t\tentries = self._fetch_entries(entity, offset)\n\t\t\tself._log(f\\\"Fetched {len(entries)} {entity} entries\\\")\n\t\t\tself._preprocess_entries(entries)\n\t\t\tself._save_entries(entries)\n\t\t\toffset += len(entries)\n\t\tself._log(f\\\"Migrated {entity}\\\")\n\t\tself.set_indicator(f\\\"Migrated {entity}\\\")\n\texcept Exception as e:\n\t\tself._log_error(e, entity)\n\n\tdef _get_total_entries(self, entity):\n\t\tquery = f\\\"select count(*) from {entity}\\\"\n\t\tresponse = self._get_response(query)\n\t\ttotal_entries = response.json()[\\\"QueryResponse\\\"][\\\"totalCount\\\"]\n\t\treturn total_entries\n\n\tdef _fetch_entries(self, entity, offset):\n\t\tquery = f\\\"select * from {entity} startPosition={offset} maxResults=1000\\\"\n\t\tresponse = self._get_response(query)\n\t\tentries = response.json()[\\\"QueryResponse\\\"][\\\"{entity}\\\"]\n\t\treturn entries\n\n\tdef _preprocess_entries(", "CodeBleu_score": 30.885473357297265}, {"code": "def _migrate_entries(self, entity)\n\t\n    if entity == \\\"Item\\\":\n        self._migrate_items()\n    elif entity == \\\"Customer\\\":\n        self._migrate_customers()\n    elif entity == \\\"Vendor\\\":\n        self._migrate_vendors()\n    elif entity == \\\"JournalEntry\\\":\n        self._migrate_journal_entries()\n    elif entity == \\\"Sales Invoice\\\":\n        self._migrate_sales_invoices()\n    elif entity == \\\"Purchase Invoice\\\":\n        self._migrate_purchase_invoices()\n    elif entity == \\\"Sales Receipt\\\":\n        self._migrate_sales_receipts()\n    elif entity == \\\"Refund Receipt\\\":\n        self._migrate_refund_receipts()\n    elif entity == \\\"Bill\\\":\n        self._migrate_bills()\n    elif entity == \\\"Vendor Credit\\\":\n        self._migrate_vendor_credits()\n    elif entity == \\\"Payment\\\":\n        self._migrate_payments()\n    elif entity == \\\"Bill Payment\\\":\n        self._migrate_bill_payments()\n    elif entity == \\\"Purchase\\\":\n        self._migrate_purchases()\n    elif entity == \\\"Deposit\\\":\n        self._migrate_deposits()\n    elif entity == \\\"Credit Memo\\\":\n        self._migrate_credit_memos()\n    elif entity == \\\"Preferences\\\":\n        self._migrate_preferences()\n    elif entity == \\\"Tax Code\\\":\n        self._migrate_tax_codes()\n    elif entity == \\\"Tax Rate\\\":\n        self._migrate_tax_rates()\n    elif entity == \\\"Account\\\":\n        self._migrate_accounts()\n    else:\n\t\tself._migrate_entries_from_api(entity)\n\n\tdef _migrate_entries_from_api(self, entity):\n\t\t\"\"\"This function migrates entries for a specified entity from a QuickBooks company. It constructs a query URI, determines the total number of entries, and retrieves them in batches of 1000. It preprocesses and saves the entries after fetching. Any exceptions encountered during the process are logged along with the response text.\"\"\"\n\t\tquery_uri = f\\\"{self.api_url}/v3/company/{self.company_id}/{entity}?minorversion=9\\\"\n\t\ttotal_entries = self._get_total_entries(query_uri)\n\t\tif total_entries > 0:\n\t\t\tfor start in range(0, total_entries, 1000):\n\t\t\t\tentries = self._get_entries(query_uri, start)\n", "CodeBleu_score": 17.293311502606727}, {"code": "def _migrate_entries(self, entity)\n\t\n    # Construct the query URI\n    query_uri = f\\\"{self.quickbooks_base_url}/{entity}?minorversion=57&query=SELECT * FROM {entity} STARTPOSITION 1 MAXRESULTS 1000\\\"\n    # Determine the total number of entries\n    total_entries = self._get_total_entries(query_uri)\n\n\tdef _get_total_entries(self, query_uri):\n\t\t# Make the request to QuickBooks to get the total number of entries\n\t\tresponse = self._make_request(query_uri)\n\t\t# Extract the total number of entries from the response\n\t\ttotal_entries = int(response.get(\\\"totalCount\\\", 0))\n\t\treturn total_entries\n\n\tdef _make_request(self, query_uri):\n\t\t# Make the request to QuickBooks\n\t\tresponse = requests.get(query_uri, headers=self._get_headers())\n\t\t# Raise an exception if the request failed\n\t\tresponse.raise_for_status()\n\t\t# Return the response\n\t\treturn response.json()\n\n\tdef _get_headers(self):\n\t\t# Generate the headers for the request\n\t\theaders = {\n\t\t\t\\\"Authorization\\\": f\\\"Bearer {self.access_token}\\\",\n\t\t\t\\\"Accept\\\": \\\"application/json\\\",\n\t\t\t\\\"Content-Type\\\": \\\"application/json\\\",\n\t\t}\n\t\treturn headers\n\n\tdef _log_error(self, e, entity=None):\n\t\t# Log the error\n\t\terror_message = f\\\"{entity}: {e}\\\"\n\t\tfrappe.log_error(error_message)\n\n\tdef _preprocess_entries(self, entries):\n\t\t# Preprocess the entries\n\t\tpreprocessed_entries = []\n\t\tfor entry in entries:\n\t\t\tpreprocessed_entry = self._preprocess_entry(entry)\n\t\t\tpreprocessed_entries.append(preprocessed_entry)\n\t\treturn preprocessed_entries\n\n\tdef _preprocess_entry(self, entry):\n\t\t# Preprocess the entry\n\t\tpreprocessed_entry = {}\n\t\tfor field in entry", "CodeBleu_score": 28.26036743719986}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        if not frappe.db.exists({\"doctype\": \"Sales Invoice\", \"quickbooks_id\": invoice[\"Id\"], \"company\": self.company}):\n            erpsalesinvoice = frappe.get_doc(\n                {\n                    \"doctype\": \"Sales Invoice\",\n                    \"quickbooks_id\": invoice[\"Id\"],\n                    \"customer\": self._get_customer_name_by_id(invoice[\"CustomerRef\"][\"value\"]),\n                    \"customer_name\": invoice[\"CustomerRef\"][\"value\"],\n                    \"customer_currency\": invoice[\"CurrencyRef\"][\"value\"],\n                    \"company\": self.company,\n                }\n            ).insert()\n            erpsalesinvoice.flags.ignore_validate = True\n            erpsalesinvoice.flags.ignore_mandatory = True\n            erpsalesinvoice.flags.ignore_permissions = True\n            erpsalesinvoice.flags.ignore_link_to = True\n            erpsalesinvoice.flags.ignore_email = True\n            erpsalesinvoice.flags.ignore_mandatory = True\n            erpsalesinvoice.flags.ignore_validate = True\n            erpsalesinvoice.flags.ignore_permissions = True\n            erpsalesinvoice.flags.ignore_link_to = True\n            erpsalesinvoice.flags.ignore_email = True\n            erpsalesinvoice.flags.ignore_mandatory = True\n            erpsalesinvoice.flags.ignore_validate = True\n            erpsalesinvoice.flags.ignore_permissions = True\n            erpsalesinvoice.flags.ignore_link_to = True\n            erpsalesinvoice.flags.ignore_email = True\n            erpsalesinvoice.flags.ignore_mandatory = True\n            erpsalesinvoice.flags.ignore_validate = True\n            erpsalesinvoice.flags.ignore_permissions = True\n            erpsalesinvoice.flags.ignore_link_to = True\n            erpsalesinvoice.flags.ignore_email = True\n            erpsalesinvoice.flags.ignore_mandatory = True\n            erpsalesinvoice.flags.ignore_validate = True\n            erpsalesinvoice.flags.ignore_permissions = True\n            erpsalesinvoice.flags.ignore_link_to = True\n            erpsalesinvoice.flags.ignore_email = True\n            erpsalesinvoice.flags.ignore_mandatory = True\n            erpsalesinvoice.flags.ignore_validate = True\n            erpsalesinvoice.flags.ignore_permissions = True\n            erpsalesinvoice", "CodeBleu_score": 25.940196207621636}, {"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        if not frappe.db.exists({\"doctype\": \"Sales Invoice\", \"quickbooks_id\": invoice[\"Id\"], \"company\": self.company}):\n            erpinvoice = frappe.get_doc({\n                \"doctype\": \"Sales Invoice\",\n                \"quickbooks_id\": invoice[\"Id\"],\n                \"company\": self.company,\n                \"company_name\": self.company_name,\n                \"customer\": self._get_customer_name_by_id(invoice[\"CustomerRef\"][\"value\"]),\n                \"posting_date\": invoice[\"TxnDate\"],\n                \"due_date\": invoice[\"DueDate\"],\n                \"transaction_date\": invoice[\"TxnDate\"],\n                \"transaction_type\": self._get_transaction_type(invoice),\n                \"transaction_id\": invoice[\"TxnID\"],\n                \"status\": \"Draft\",\n                \"total\": invoice[\"TotalAmt\"],\n                \"tax_amount\": invoice[\"TaxAmt\"],\n                \"grand_total\": invoice[\"TotalAmt\"] + invoice[\"TaxAmt\"],\n                \"items\": self._get_invoice_items(invoice),\n                \"taxes\": self._get_invoice_taxes(invoice),\n                \"accounts\": self._get_invoice_accounts(invoice),\n                \"is_return\": 0,\n                \"is_returnable\": 0,\n                \"is_return_against\": 0,\n                \"is_return_against_sales_invoice\": 0,\n                \"is_return_against_purchase_invoice\": 0,\n                \"is_return_against_debit_note\": 0,\n                \"is_return_against_credit_note\": 0,\n                \"is_return_against_journal_entry\": 0,\n                \"is_return_against_expense_claim\": 0,\n                \"is_return_against_purchase_receipt\": 0,\n                \"is_return_against_purchase_order\": 0,\n                \"is_return_against_purchase_return\": 0,\n                \"is_return_against_sales_invoice\": 0,\n                \"is_return_against_sales_order\": 0,\n                \"is_return_against_sales_return\": 0,\n                \"is_return_against_stock_entry\": 0,\n                \"is_return_against_stock_receipt\": ", "CodeBleu_score": 18.125609844540453}, {"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        if not frappe.db.exists({\"doctype\": \"Sales Invoice\", \"quickbooks_id\": invoice[\"Id\"], \"company\": self.company}):\n            if invoice[\"DocNumber\"] == \"0\":\n                erpsalesinvoice = frappe.get_doc(\n                    {\n                        \"doctype\": \"Sales Invoice\",\n                        \"quickbooks_id\": invoice[\"Id\"],\n                        \"company\": self.company,\n                        \"customer\": self._get_customer_name_by_id(invoice[\"CustomerRef\"][\"value\"]),\n                        \"posting_date\": invoice[\"TxnDate\"],\n                        \"due_date\": invoice[\"DueDate\"],\n                        \"transaction_date\": invoice[\"TxnDate\"],\n                        \"transaction_id\": invoice[\"TxnID\"],\n                        \"transaction_number\": invoice[\"TxnNumber\"],\n                        \"transaction_type\": invoice[\"TxnType\"],\n                        \"sales_order\": invoice[\"SalesOrderRef\"][\"value\"],\n                        \"reference_number\": invoice[\"RefNumber\"],\n                        \"reference_number_2\": invoice[\"RefNumber2\"],\n                        \"sales_person\": self._get_employee_name_by_id(invoice[\"SalesRepRef\"][\"value\"]),\n                        \"terms\": invoice[\"TermsRef\"][\"value\"],\n                        \"payment_terms\": invoice[\"TermsRef\"][\"value\"],\n                        \"is_return\": 1 if invoice[\"IsReturn\"] else 0,\n                        \"is_return_against_sales_order\": 1 if invoice[\"IsReturn\"] else 0,\n                        \"is_return_against_sales_invoice\": 1 if invoice[\"IsReturn\"] else 0,\n                        \"is_return_against_purchase_invoice\": 1 if invoice[\"IsReturn\"] else 0,\n                        \"is_return_against_credit_note\": 1 if invoice[\"IsReturn\"] else 0,\n                        \"is_return_against_debit_note\": 1 if invoice[\"IsReturn\"] else 0,\n                        \"is_return_against_journal_entry\": 1 if invoice[\"IsReturn\"] else 0,\n                        \"is_return_against_receipt\": 1 if invoice[\"IsReturn\"] else 0,\n                        \"is_return_against_refund_receipt\": 1 if invoice[\"IsReturn\"] else 0,\n                        \"is_return_against_payment\": 1 if invoice[\"IsReturn\"] else 0,\n                        \"is_return", "CodeBleu_score": 17.909195527241952}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    if not start_date or not end_date or not no_of_visit or not sales_person:\\\n        return\\\n    s_list = []\n    interval = date_diff(end_date, start_date) + 1\\\n    if interval < no_of_visit:\\\n        return\\\n    interval = interval / no_of_visit\\\n    if interval == 0:\\\n        return\\\n    start_date = add_days(start_date, 1)\\\n    while start_date <= end_date:\\\n        if start_date not in s_list:\\\n            s_list.append(start_date)\\\n        start_date = add_days(start_date, interval)\\\n    if len(s_list) > no_of_visit:\\\n        s_list = s_list[:no_of_visit]\\\n    if len(s_list) < no_of_visit:\\\n        s_list = s_list + self.create_schedule_list(end_date, end_date, no_of_visit - len(s_list), sales_person)\\\n    return s_list\n", "CodeBleu_score": 29.830149142064645}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    if not start_date or not end_date or not no_of_visit or not sales_person:\\\n        return\n    holiday_list = get_holiday_list_for_employee(sales_person)\n    start_date = frappe.utils.data.getdate(start_date)\n    end_date = frappe.utils.data.getdate(end_date)\n    interval = (end_date - start_date).days / no_of_visit\n    schedule_list = []\n    for i in range(no_of_visit):\\\n        schedule_list.append(start_date + timedelta(days=interval * i))\n    # Adjusting dates to avoid holidays\n    for i in range(len(schedule_list)):\\\n        if schedule_list[i] in holiday_list:\\\n            schedule_list[i] = get_next_weekday(schedule_list[i])\n    return schedule_list\n", "CodeBleu_score": 40.67789190808057}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    if not start_date or not end_date or not no_of_visit or not sales_person:\\\n        return\n\n    # Get the interval between visits\n    interval = date_diff(end_date, start_date) / no_of_visit\n\n    # Create a list of scheduled visit dates\n    schedule_list = []\n    for i in range(no_of_visit):\\\n        schedule_list.append(add_days(start_date, i * interval))\n\n    # Adjust the schedule dates to avoid holidays\n    schedule_list = adjust_schedule_dates(schedule_list, sales_person)\\\n\n    return schedule_list\n", "CodeBleu_score": 30.258960252632594}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t", "CodeBleu_score": 5.908764367816092}, {"code": "<?\n   public function response($view, $data = []){\n\t", "CodeBleu_score": 5.908764367816092}, {"code": "<?\n   public function response($view, $data = []){\n\t", "CodeBleu_score": 5.908764367816092}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\tSelectedRecords($request, 'user');\n\nforeach ($contacts as $contact) {\ntry {\n$this->dispatch(new DeleteContact($contact));\n} catch (\\Exception $e) {\nflash($e->getMessage())->error()->important();\n}\n}\n}", "CodeBleu_score": 63.11666875911758}, {"code": "<?\npublic function deleteContacts($request){\n\tSelectedRecords($request, 'user');\n\nforeach ($contacts as $contact) {\ntry {\n$this->dispatch(new DeleteContact($contact));\n} catch (\\Exception $e) {\nflash($e->getMessage())->error()->important();\n}\n}\n}", "CodeBleu_score": 63.11666875911758}, {"code": "<?\npublic function deleteContacts($request){\n\tSelectedRecords($request, 'user');\n\nforeach ($contacts as $contact) {\ntry {\n$this->dispatch(new DeleteContact($contact));\n} catch (\\Exception $e) {\nflash($e->getMessage())->error()->important();\n}\n}\n}", "CodeBleu_score": 63.11666875911758}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t>getSelectedRecords($request);\n\nforeach ($transactions as $transaction) {\ntry {\n$this->dispatch(new DeleteTransaction($transaction));\n} catch (\\Exception $e) {\nflash($e->getMessage())->error()->important();\n}\n}\n}", "CodeBleu_score": 61.448442472283645}, {"code": "<?\npublic function deleteTransactions($request){\n\t>getSelectedRecords($request, 'transactions');\n\nforeach ($transactions as $transaction) {\ntry {\n$this->dispatch(new DeleteTransaction($transaction));\n} catch (\\Exception $e) {\nflash($e->getMessage())->error()->important();\n}\n}\n}", "CodeBleu_score": 63.055304946860645}, {"code": "<?\npublic function deleteTransactions($request){\n\t>getSelectedRecords($request);\n\nforeach ($transactions as $transaction) {\ntry {\n$this->dispatch(new DeleteTransaction($transaction));\n} catch (\\Exception $e) {\nflash($e->getMessage())->error()->important();\n}\n}\n}", "CodeBleu_score": 61.448442472283645}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\tf (!class_exists($this->request_class) ||!($this->request_class instanceof FormRequest)) {\nreturn;\n}\n\nforeach ($this->has_row as $row) {\n$request = app($this->request_class);\n$request->merge($row);\n$request->setContainer($this->container);\n$request->setRedirector($this->redirector);\n$request->setSession($this->session);\n$request->setUserResolver($this->userResolver);\n$request->setRouteResolver($this->routeResolver);\n$request->setLocaleResolver($this->localeResolver);\n$request->setTranslators($this->translators);\n\n$rules = $this->prepareRules($request->rules());\n\n$validator->after(function ($validator) use ($request, $row) {\n$validator->errors()->add($row, $request->validationData());\n});\n\n$validator->validate($request, $rules);\n}\n}", "CodeBleu_score": 33.14495655699696}, {"code": "<?\npublic function withValidator($validator){\n\tf (is_null($this->request_class)) {\nreturn;\n}\n\nif (!class_exists($this->request_class)) {\nthrow new Exception('Request class does not exist.');\n}\n\nif (!is_subclass_of($this->request_class, FormRequest::class)) {\nthrow new Exception('Request class must be an instance of FormRequest.');\n}\n\n$request_class = $this->request_class;\n\nforeach ($this->has_row as $key => $value) {\n$request = new $request_class($this->columns);\n$request->prepareForValidation($this->model, $this->columns);\n$request->merge($this->model->toArray());\n$request->merge($this->columns);\n$rules = $request->rules();\n\n$rules = $this->prepareRules($rules);\n\n$validator->sometimes($key, $value, function ($input) use ($key, $rules) {\nreturn Validator::make([$key => $input], [$key => $rules])->fails();\n});\n}\n\n$validator->after(function ($validator) use ($request_class) {\nif ($validator->fails()) {\nthrow new ValidationException($validator);\n}\n});\n}", "CodeBleu_score": 39.01266835298788}, {"code": "<?\npublic function withValidator($validator){\n\tvalidator->after(function ($validator) {\n$validator->errors()->add('row', $this->row);\n});\n}", "CodeBleu_score": 10.556567350247812}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif (! $this instanceof ShouldUpdate) {\nreturn;\n}\n\n$model = $this->getModelInstance($arguments[0]);\nif ($model instanceof Model) {\n$this->model = $model;\n}\n\n$request = $this->getRequestInstance($arguments[1]);\nif ($request instanceof Request) {\n$this->request = $request;\n}\n\nif ($this instanceof HasOwner) {\n$this->setOwner();\n}\n\nif ($this instanceof HasSource) {\n$this->setSource();\n}\n}", "CodeBleu_score": 62.93543738007957}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif (! $this instanceof ShouldUpdate) {\nreturn;\n}\n\n$model = $this->getModelInstance($arguments[0]);\nif ($model instanceof Model) {\n$this->model = $model;\n}\n\n$request = $this->getRequestInstance($arguments[1]);\nif ($request instanceof Request) {\n$this->request = $request;\n}\n\nif ($this instanceof HasOwner) {\n$this->setOwner();\n}\n\nif ($this instanceof HasSource) {\n$this->setSource();\n}\n}", "CodeBleu_score": 62.93543738007957}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif (! $this instanceof ShouldUpdate) {\nreturn;\n}\n\nif ($arguments[0] instanceof Model) {\n$this->model = $arguments[0];\n}\n\n$request = $this->getRequestInstance($arguments[1]);\nif ($request instanceof Request) {\n$this->request = $request;\n}\n\nif ($this instanceof HasOwner) {\n$this->setOwner();\n}\n\nif ($this instanceof HasSource) {\n$this->setSource();\n}\n}", "CodeBleu_score": 87.74410184275598}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t", "CodeBleu_score": 10.364635364635365}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t", "CodeBleu_score": 10.364635364635365}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t", "CodeBleu_score": 10.364635364635365}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t$open_amount = 0;\n$overdue_amount = 0;\n$due_date = $model->due_date;\n$paid_amount = 0;\n\nif ($model->status == 'paid') {\nreturn [\n'open_amount' => 0,\n'overdue_amount' => 0\n];\n}\n\nforeach ($model->transactions as $transaction) {\n$paid_amount += $transaction->amount;\n}\n\nif ($model->status == 'partial') {\n$open_amount = $model->amount - $paid_amount;\n}\n\nif ($model->status == 'overdue') {\n$overdue_amount = $model->amount - $paid_amount;\n}\n\nif ($model->status == 'open') {\n$open_amount = $model->amount;\n}\n\nreturn [\n'open_amount' => $open_amount,\n'overdue_amount' => $overdue_amount\n];\n}", "CodeBleu_score": 40.5835213670831}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t$open_amount = $model->amount;\n$overdue_amount = 0;\n\nif ($model->status == 'paid') {\nreturn ['open' => 0, 'overdue' => 0];\n}\n\nforeach ($model->transactions as $transaction) {\nif ($transaction->status == 'partial') {\n$open_amount -= $transaction->amount;\n}\n}\n\nif ($model->status == 'partial') {\n$overdue_amount = $model->amount - $open_amount;\n}\n\nreturn ['open' => $open_amount, 'overdue' => $overdue_amount];\n}", "CodeBleu_score": 34.82231727124565}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t", "CodeBleu_score": 7.647058823529412}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t", "CodeBleu_score": 14.784053156146179}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$perPage = $perPage?: $this->model->getPerPage();\n\t$page = $page?: Paginator::resolveCurrentPage($pageName);\n\t$results = $this->forPage($page, $perPage)->get($columns);\n\t$total = $this->toBase()->getCountForPagination();\n\treturn $this->paginator($results, $total, $perPage, $page, [\n\t\t'path' => Paginator::resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n}", "CodeBleu_score": 69.45452486352104}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t", "CodeBleu_score": 14.784053156146179}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t$reconciliations = \\$this->model->whereIn('id', \\$request->ids)->get();\n\n\n    \\$reconciliations->each(function (\\$reconciliation) {\n\n        \\$reconciliation->status = Reconciliation::STATUS_RECONCILED;\n\n        \\$reconciliation->save();\n\n\n        \\$transactions = Transaction::where('account_id', \\$reconciliation->account_id)\n\n            ->where('date', '>=', \\$reconciliation->start_date)\n\n            ->where('date', '<=', \\$reconciliation->end_date)\n\n            ->get();\n\n\n        \\$transactions->each(function (\\$transaction) {\n\n            \\$transaction->status = Transaction::STATUS_RECONCILED;\n\n            \\$transaction->save();\n\n        });\n\n    });\n}", "CodeBleu_score": 37.27893918637809}, {"code": "<?\npublic function reconcile($request){\n\tiliations = $this->model->whereIn('id', $request->ids)->get();\n\nDB::beginTransaction();\n\ntry {\nforeach ($reconciliations as $reconciliation) {\n$reconciliation->status = Reconciliation::STATUS_RECONCILED;\n$reconciliation->save();\n\n$transactions = Transaction::whereBetween('date', [$reconciliation->start_date, $reconciliation->end_date])\n->where('account_id', $reconciliation->account_id)\n->where('status', Transaction::STATUS_PENDING)\n->get();\n\nforeach ($transactions as $transaction) {\n$transaction->status = Transaction::STATUS_RECONCILED;\n$transaction->save();\n}\n}\n\nDB::commit();\n} catch (Exception $e) {\nDB::rollBack();\n\nreturn $this->error('bulk_actions.error.reconcile');\n}\n\nreturn $this->success('bulk_actions.success.reconcile');\n}", "CodeBleu_score": 34.37269535814857}, {"code": "<?\npublic function reconcile($request){\n\t$reconciliations = \\$this->model->whereIn('id', \\$request->ids)->get();\n\n\n\n    \\$reconciliations->each(function (\\$reconciliation) {\n\n        \\$reconciliation->status = Reconciliation::STATUS_RECONCILED;\n\n        \\$reconciliation->save();\n\n\n\n        \\$transactions = Transaction::where('account_id', \\$reconciliation->account_id)\n\n            ->where('date', '>=', \\$reconciliation->date_start)\n\n            ->where('date', '<=', \\$reconciliation->date_end)\n\n            ->get();\n\n\n\n        \\$transactions->each(function (\\$transaction) {\n\n            \\$transaction->status = Transaction::STATUS_RECONCILED;\n\n            \\$transaction->save();\n\n        });\n\n    });\n\n}", "CodeBleu_score": 37.2446871383542}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t$this->user->invitations()->delete();\n$invitation = UserInvitation::create([\n'token' => Str::uuid(),\n'email' => $this->user->email,\n]);\ntry {\ndispatch(new SendInvitation($invitation));\n} catch (TransportException $e) {\nthrow new Exception('Failed to send invitation email.');\n}\nreturn $invitation;\n}", "CodeBleu_score": 23.644269191938992}, {"code": "<?\npublic function handle(): UserInvitation{\n\t// Retrieve and delete existing invitations for the user\n$existingInvitations = UserInvitation::where('user_id', $this->user->id)->get();\nforeach ($existingInvitations as $invitation) {\n$invitation->delete();\n}\n\n// Create a new invitation with a unique token\n$invitation = new UserInvitation();\n$invitation->user_id = $this->user->id;\n$invitation->token = Str::random(64);\n$invitation->save();\n\n// Attempt to dispatch a notification job to notify the user\ntry {\ndispatch(new Notification($invitation));\n} catch (Exception $e) {\nthrow new TransportException('Failed to send invitation email');\n}\n\nreturn $invitation;\n}", "CodeBleu_score": 36.95241159769659}, {"code": "<?\npublic function handle(): UserInvitation{\n\t$invitation = UserInvitation::where('user_id', $this->user->id)->first();\n\nif ($invitation) {\n$invitation->delete();\n}\n\n$invitation = new UserInvitation();\n$invitation->user_id = $this->user->id;\n$invitation->token = Str::random(60);\n$invitation->save();\n\ntry {\n$this->dispatch(new NotifyUser($invitation));\n} catch (Exception $e) {\nthrow new TransportException($e->getMessage());\n}\n\nreturn $invitation;\n}", "CodeBleu_score": 30.550722254571372}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\tthis->model->authorize();\n}", "CodeBleu_score": 3.1285428106380846}, {"code": "<?\npublic function authorize(): void{\n\tif ($this->model->reconciled) {\n\t\tthrow new Exception(trans('exceptions.transaction.reconciled'));\n\t}\n\n\tif ($this->model->type == Transaction::TRANSFER_TYPE) {\n\t\tthrow new Exception(trans('exceptions.transaction.transfer'));\n\t}\n}", "CodeBleu_score": 27.199519287013295}, {"code": "<?\npublic function authorize(): void{\n\tif ($this->model->reconciled) {\n\t\tthrow new AuthorizationException(trans('messages.transaction.reconciled'));\n\t}\n\n\tif ($this->model->type == Transaction::TRANSFER_TYPE) {\n\t\tthrow new AuthorizationException(trans('messages.transaction.transfer'));\n\t}\n}", "CodeBleu_score": 28.74571946451473}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t//    if (tableName.equals(\"table1\") || tableName.equals(\"table2\")) {\n//        return true;\n//    } else {\n//        return false;\n//    }\n    return true;\n}", "CodeBleu_score": 1.8407229388270632}, {"code": "public boolean doTableFilter(String tableName){\n\t//    // Super Admins have access to all tables\n//    if (tenantId == 0) {\n//        return true;\n//    }\n//\n//    // Allow access to the predefined tables\n//    if (tableName.equals(\"table_1\") || tableName.equals(\"table_2\") || tableName.equals(\"table_3\")) {\n//        return true;\n//    }\n//\n//    // Deny access to other tables\n//    return false;\n}", "CodeBleu_score": 1.6539232236640211}, {"code": "public boolean doTableFilter(String tableName){\n\tif (tableName.equals(\"table1\")) {\nreturn true;\n}\nif (tableName.equals(\"table2\")) {\nreturn true;\n}\nreturn false;\n}", "CodeBleu_score": 8.512205891196963}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.548338294358}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.548338294358}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.548338294358}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\tString result = \"\";\n\ttry {\n\t\tList<Account> accounts = accountService.findAll();\n\t\tresult = returnJson(accounts, \"accountID\", \"accountName\");\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error retrieving accounts: \" + e.getMessage());\n\t\tresult = returnJson(new BaseResponseInfo(ErpInfo.ERROR_CODE, ErpInfo.ERROR_MSG));\n\t}\n\treturn result;\n}", "CodeBleu_score": 28.209395939335092}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\tList<Account> accountList = null;\n\ttry {\n\t\taccountList = accountService.findAll();\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error retrieving account list: \" + e.getMessage());\n\t\treturn returnJson(BaseResponseInfo.fail(ErpInfo.SYSTEM_ERROR));\n\t}\n\n\tJSONArray accountArray = new JSONArray();\n\tfor (Account account : accountList) {\n\t\tJSONObject accountJson = new JSONObject();\n\t\taccountJson.put(\"id\", account.getId());\n\t\taccountJson.put(\"name\", account.getName());\n\t\taccountArray.add(accountJson);\n\t}\n\n\treturn returnJson(BaseResponseInfo.success(accountArray));\n}", "CodeBleu_score": 42.98312710390457}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\tList<Account> accounts = accountService.findBySelect();\n\tJSONArray accountArray = new JSONArray();\n\tfor (Account account : accounts) {\n\t\tJSONObject accountJson = new JSONObject();\n\t\taccountJson.put(\\\"id\\\", account.getId());\n\t\taccountJson.put(\\\"name\\\", account.getName());\n\t\taccountArray.add(accountJson);\n\t}\n\treturn returnJson(accountArray.toJSONString(), true, \\\"success\\\");\n}", "CodeBleu_score": 31.321061627589646}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tResponseInfo res = new BaseResponseInfo();\n Map<String, Object> map = new HashMap<String, Object>();\n try {\n List<AccountVo4List> dataList = accountService.listWithBalance(name, serialNo, (currentPage-1)*pageSize, pageSize);\n int total = accountService.listWithBalanceCount(name, serialNo);\n map.put(\"total\", total);\n //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n JSONArray dataArray = new JSONArray();\n if (null!= dataList) {\n for (AccountVo4List aEx : dataList) {\n String type = aEx.getType().replace(\"\u5176\u5b83\", \"\");\n aEx.setType(type);\n String operTime = aEx.getOperTime();\n BigDecimal balance = accountService.getAccountSum(aEx.getId(), null, operTime, forceFlag)\n.add(accountService.getAccountSumByHead(aEx.getId(), null, operTime, forceFlag))\n.add(accountService.getAccountSumByDetail(aEx.getId(), null, operTime, forceFlag))\n.add(accountService.getManyAccountSum(aEx.getId(), null, operTime, forceFlag)).add(initialAmount);\n aEx.setBalance(balance);\n dataArray.add(aEx);\n }\n }\n map.put(\"rows\", dataArray);\n res.code = 200;\n res.data = map;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 60.44744921132808}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tResponseInfo response = new BaseResponseInfo();\n Map<String, Object> responseMap = new HashMap<>();\n try {\n List<Account> accounts = accountService.listWithBalance(name, serialNo, (currentPage - 1) * pageSize, pageSize);\n int total = accountService.countWithBalance(name, serialNo);\n responseMap.put(\"total\", total);\n responseMap.put(\"rows\", accounts);\n response.code = 200;\n response.data = responseMap;\n } catch (Exception e) {\n logger.error(e.getMessage(), e);\n response.code = 500;\n response.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return response;\n }", "CodeBleu_score": 49.90436276421345}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tResponseInfo res = new BaseResponseInfo();\n Map<String, Object> map = new HashMap<>();\n try {\n List<AccountVo4List> dataList = accountService.listWithBalance(name, serialNo, (currentPage-1)*pageSize, pageSize);\n int total = accountService.listWithBalanceCount(name, serialNo);\n map.put(\"total\", total);\n //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n JSONArray dataArray = new JSONArray();\n if (null!= dataList) {\n for (AccountVo4List aEx : dataList) {\n dataArray.add(aEx);\n }\n }\n map.put(\"rows\", dataArray);\n res.code = 200;\n res.data = map;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 68.38517053289665}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nMap<String, Object> map = new HashMap<>();\nList<AccountVo4Statistics> list = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\nmap.put(\"rows\", list);\nres.code = 200;\nres.data = map;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 78.11389274843073}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nMap<String, Object> map = new HashMap<>();\nList<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\nLong count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\nmap.put(\"rows\", list);\nmap.put(\"total\", count);\nres.code = 200;\nres.data = map;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 73.33058685129875}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nMap<String, Object> map = new HashMap<>();\nList<AccountVo4Statistics> list = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\nmap.put(\"rows\", list);\nres.code = 200;\nres.data = map;\n} catch(Exception e) {\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 75.97688511724503}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo response = new BaseResponseInfo();\n AccountHeadVo4ListEx accountHeadVo4ListEx = accountHeadService.getDetailByNumber(billNo);\n if(accountHeadVo4ListEx!= null) {\n response.setCode(BusinessConstants.SUCCESS_CODE);\n response.setMessage(BusinessConstants.SUCCESS_MESSAGE);\n response.setData(accountHeadVo4ListEx);\n } else {\n response.setCode(BusinessConstants.ERROR_CODE);\n response.setMessage(BusinessConstants.ERROR_MESSAGE);\n }\n return response;\n }", "CodeBleu_score": 32.93973146265658}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo response = new BaseResponseInfo();\n try {\n AccountHeadVo4ListEx accountHead = accountHeadService.getDetailByNumber(billNo);\n if (accountHead!= null) {\n response.setStatus(BusinessConstants.SUCCESS_CODE);\n response.setMessage(BusinessConstants.SUCCESS_MESSAGE);\n response.setData(accountHead);\n } else {\n response.setStatus(BusinessConstants.ERROR_CODE);\n response.setMessage(BusinessConstants.ERROR_MESSAGE);\n }\n } catch (Exception e) {\n logger.error(e.getMessage(), e);\n response.setStatus(BusinessConstants.ERROR_CODE);\n response.setMessage(BusinessConstants.ERROR_MESSAGE);\n }\n return response;\n }", "CodeBleu_score": 35.59115671600449}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo response = new BaseResponseInfo();\n try {\n AccountHeadVo4ListEx accountHeadVo4ListEx = accountHeadService.getDetailByNumber(billNo, request);\n response.setData(accountHeadVo4ListEx);\n response.setCode(BusinessConstants.SUCCESS_CODE);\n response.setMessage(BusinessConstants.SUCCESS_MESSAGE);\n } catch (Exception e) {\n logger.error(e.getMessage());\n response.setCode(BusinessConstants.ERROR_CODE);\n response.setMessage(BusinessConstants.ERROR_MESSAGE);\n }\n return response;\n }", "CodeBleu_score": 34.33573764416718}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tList<Depot> depotList = depotService.findDepotByCurrentUser();\n\t\tres.code = 200;\n\t\tres.data = depotList;\n\t} catch(Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 81.02221188796524}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\taseResponseInfo res = new BaseResponseInfo();\ntry {\nList<Depot> depotList = depotService.findDepotByCurrentUser();\nres.code = 200;\nres.data = depotList;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 77.11193483096288}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\taseResponseInfo res = new BaseResponseInfo();\ntry {\nList<Depot> depotList = depotService.findDepotByCurrentUser();\nres.code = 200;\nres.data = depotList;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 77.11193483096288}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray dataArray = new JSONArray();\n//    try {\n//        //\u83b7\u53d6\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f-\u662f\u5426\u5f00\u542f\u591a\u7ea7\u5ba1\u6838\n//        String approvalFlag = \"0\";\n//        List<SystemConfig> list = systemConfigService.getSystemConfig();\n//        if(list.size()>0) {\n//            approvalFlag = list.get(0).getMultiLevelApprovalFlag();\n//        }\n//        List<Function> dataList = functionService.getRoleFunction(type, keyId);\n//        if (dataList.size()!= 0) {\n//            dataArray = getMenuByFunction(dataList, approvalFlag);\n//            //\u589e\u52a0\u9996\u9875\u83dc\u5355\u9879\n//            JSONObject homeItem = new JSONObject();\n//            homeItem.put(\"id\", 0);\n//            homeItem.put(\"text\", \"\u9996\u9875\");\n//            homeItem.put(\"icon\", \"home\");\n//            homeItem.put(\"url\", \"/dashboard/analysis\");\n//            homeItem.put(\"component\", \"/layouts/TabLayout\");\n//            dataArray.add(0,homeItem);\n//        }\n//    } catch (DataAccessException e) {\n//        logger.error(\">>>>>>>>>>>>>>>>>>>\u67e5\u627e\u5f02\u5e38\", e);\n//    }\n//    return dataArray;\n//}", "CodeBleu_score": 11.934969795324283}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tSONArray dataArray = new JSONArray();\n\ttry {\n\t\tList<Function> dataList = functionService.getRoleFunction(type, keyId);\n\t\tif (dataList.size()!= 0) {\n\t\t\tdataArray = getMenuByFunction(dataList);\n\t\t\t//\u589e\u52a0\u9996\u9875\u83dc\u5355\u9879\n\t\t\tJSONObject homeItem = new JSONObject();\n\t\t\thomeItem.put(\"id\", 0);\n\t\t\thomeItem.put(\"text\", \"\u9996\u9875\");\n\t\t\thomeItem.put(\"icon\", \"home\");\n\t\t\thomeItem.put(\"url\", \"/dashboard/analysis\");\n\t\t\thomeItem.put(\"component\", \"/layouts/TabLayout\");\n\t\t\tdataArray.add(0,homeItem);\n\t\t}\n\t} catch (DataAccessException e) {\n\t\tlogger.error(\">>>>>>>>>>>>>>>>>>>\u67e5\u627e\u5f02\u5e38\", e);\n\t}\n\treturn dataArray;\n}", "CodeBleu_score": 29.677550681536253}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n//    JSONArray dataArray = new JSONArray();\n//    try {\n//        //\u83b7\u53d6\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f-\u662f\u5426\u5f00\u542f\u591a\u7ea7\u5ba1\u6838\n//        String approvalFlag = \"0\";\n//        List<SystemConfig> list = systemConfigService.getSystemConfig();\n//        if(list.size()>0) {\n//            approvalFlag = list.get(0).getMultiLevelApprovalFlag();\n//        }\n//        //\u5f53\u524d\u7528\u6237\u6240\u62e5\u6709\u7684\u529f\u80fd\u5217\u8868\uff0c\u683c\u5f0f\u5982\uff1a[1][2][5]\n//        List<UserBusiness> funList = userBusinessService.getBasicData(keyId, type);\n//        if(funList!=null && funList.size()>0){\n//            String fc = funList.get(0).getValue();\n//            //\u83b7\u53d6\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f-\u662f\u5426\u5f00\u542f\u591a\u7ea7\u5ba1\u6838\n//            String approvalFlag = \"0\";\n//            List<SystemConfig> list = systemConfigService.getSystemConfig();\n//            if(list.size()>0) {\n//                approvalFlag = list.get(0).getMultiLevelApprovalFlag();\n//            }\n//            List<Function> dataList = functionService.getRoleFunction(null);\n//            if (dataList.size()!= 0) {\n//                dataArray = getMenuByFunction(dataList, fc, approvalFlag);\n//                //\u589e\u52a0\u9996\u9875\u83dc\u5355\u9879\n//                JSONObject homeItem = new JSONObject();\n//                homeItem.put(\"id\", 0);\n//                homeItem.put(\"text\", \"\u9996\u9875\");\n//                homeItem.put(\"icon\", \"home\");\n//                homeItem.put(\"url\", \"/dashboard/analysis\");\n//                homeItem.put(\"component\", \"/layouts/TabLayout\");\n//                dataArray.add(0,homeItem);\n//            }\n//        }\n//    } catch (DataAccessException e) {\n//        logger.error(\">>>>>>>>>>>>>>>>>>>\u67e5\u627e\u5f02\u5e38\", e);\n//    }\n//    return dataArray;\n//}", "CodeBleu_score": 6.761272144258849}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\ttry {\n\t\tPlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n\t\tresponseInfo.setCode(ErpInfo.OK.code);\n\t\tresponseInfo.setMsg(ErpInfo.OK.name);\n\t\tresponseInfo.setData(platformConfig);\n\t} catch(Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tresponseInfo.setCode(ErpInfo.ERROR.code);\n\t\tresponseInfo.setMsg(ErpInfo.ERROR.name);\n\t\tresponseInfo.setData(e.getMessage());\n\t}\n\treturn responseInfo;\n}", "CodeBleu_score": 52.45665332291086}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo response = new BaseResponseInfo();\ntry {\nPlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\nresponse.setCode(ErpInfo.OK.code);\nresponse.setMessage(ErpInfo.OK.name);\nresponse.setData(platformConfig);\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\nresponse.setCode(ErpInfo.ERROR.code);\nresponse.setMessage(ErpInfo.ERROR.name);\nresponse.setData(null);\n}\nreturn response;\n}", "CodeBleu_score": 53.60635421404359}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo response = new BaseResponseInfo();\ntry {\nPlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\nresponse.setData(platformConfig);\nresponse.setCode(200);\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nresponse.setCode(500);\nresponse.setMessage(\"\u83b7\u53d6\u5e73\u53f0\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\");\n}\nreturn response;\n}", "CodeBleu_score": 50.802747194412035}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\nBaseResponseInfo response = new BaseResponseInfo();\n\ntry {\n\nList<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList();\n\nif (systemConfigList.size() > 0) {\n\nresponse.setCode(200);\nresponse.setData(systemConfigList.get(0));\n\n} else {\n\nresponse.setCode(500);\nresponse.setData(\"\u672a\u627e\u5230\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\");\n\n}\n\n} catch (Exception e) {\n\nlogger.error(e.getMessage());\n\nresponse.setCode(500);\nresponse.setData(\"\u83b7\u53d6\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\");\n\n}\n\nreturn response;\n\n}", "CodeBleu_score": 36.35722222534704}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo response = new BaseResponseInfo();\nList<SystemConfig> list = systemConfigService.getSystemConfigList();\nif (list.size() > 0) {\nresponse.setCode(200);\nresponse.setData(list.get(0));\n} else {\nresponse.setCode(500);\nresponse.setData(\"Failed to fetch system configuration list.\");\n}\nreturn response;\n}", "CodeBleu_score": 34.03200316324259}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo response = new BaseResponseInfo();\ntry {\nList<SystemConfig> configList = systemConfigService.getSystemConfigList();\nif (configList!= null && configList.size() > 0) {\nresponse.setCode(200);\nresponse.setData(configList.get(0));\n} else {\nresponse.setCode(500);\nresponse.setData(\"No system configuration found.\");\n}\n} catch (Exception e) {\nlogger.error(e.getMessage());\nresponse.setCode(500);\nresponse.setData(e.getMessage());\n}\nreturn response;\n}", "CodeBleu_score": 35.87218023912895}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\t// Get the business path from the request path.\n\t\tString businessPath = getBusinessPath(request);\n\t\t// Get the file from the request.\n\t\tMultipartFile file = getFile(request);\n\t\t// Get the file upload type from the request.\n\t\tLong uploadType = getUploadType(request);\n\t\t// Get the file size limit from the request.\n\t\tLong fileSizeLimit = getFileSizeLimit(request);\n\t\t// Check if the file is empty.\n\t\tif (file.isEmpty()) {\n\t\t\tres.code = 400;\n\t\t\tres.data = \"File is empty\";\n\t\t\treturn res;\n\t\t}\n\t\t// Check if the file size exceeds the limit.\n\t\tif (file.getSize() > fileSizeLimit) {\n\t\t\tres.code = 400;\n\t\t\tres.data = \"File size exceeds limit\";\n\t\t\treturn res;\n\t\t}\n\t\t// Check if the file type is supported.\n\t\tString fileName = file.getOriginalFilename();\n\t\tString fileType = fileName.substring(fileName.lastIndexOf('.') + 1);\n\t\tif (!isFileTypeSupported(fileType)) {\n\t\t\tres.code = 400;\n\t\t\tres.data = \"Unsupported file type\";\n\t\t\treturn res;\n\t\t}\n\t\t// Save the file to the specified location based on the upload type.\n\t\tString fileLocation = \"\";\n\t\tif (uploadType == 1) {\n\t\t\t// Save the file locally.\n\t\t\tfileLocation = saveFileLocally(file, businessPath);\n\t\t} else if (uploadType == 2) {\n\t\t\t// Save the file to AliOss.\n\t\t\tfileLocation = saveFileToAliOss(file, businessPath);\n\t\t} else {\n\t\t\tres.code = 400;\n\t\t\tres.data = \"Invalid upload type\";\n\t\t\treturn res;\n\t\t}\n\t\t// Set the response code and data.\n\t\tres.code = 200;\n\t\tres.data = fileLocation;\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"Error uploading file\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 43.13833575135831}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t", "CodeBleu_score": 1.8642714310173143}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t", "CodeBleu_score": 1.8642714310173143}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n String title = jsonObject.getString(\\\"title\\\");\n String[] heads = jsonObject.getString(\\\"heads\\\").split(\\\",\\\");\n String[] tips = jsonObject.getString(\\\"tips\\\").split(\\\",\\\");\n JSONArray dataList = jsonObject.getJSONArray(\\\"dataList\\\");\n List<List<String>> data = new ArrayList<>();\n for (int i = 0; i < dataList.size(); i++) {\n JSONArray row = dataList.getJSONArray(i);\n List<String> rowData = new ArrayList<>();\n for (int j = 0; j < row.size(); j++) {\n rowData.add(row.getString(j));\n }\n data.add(rowData);\n }\n systemConfigService.exportExcel(title, heads, tips, data, response);\n } catch (Exception e) {\n logger.error(\\\"\u5bfc\u51faExcel\u5931\u8d25\\\", e);\n }\n }", "CodeBleu_score": 38.82433246931981}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n String title = jsonObject.getString(\\\"title\\\");\n String[] heads = jsonObject.getString(\\\"heads\\\").split(\\\",\\\");\n String[] tips = jsonObject.getString(\\\"tips\\\").split(\\\",\\\");\n JSONArray data = jsonObject.getJSONArray(\\\"data\\\");\n // Call the service to perform the export\n // Write the output to the HTTP response\n } catch (Exception e) {\n // Handle and log any exceptions that occur\n }\n }", "CodeBleu_score": 35.26311827062066}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n String title = jsonObject.getString(\\\"title\\\");\n JSONArray head = jsonObject.getJSONArray(\\\"head\\\");\n JSONArray tip = jsonObject.getJSONArray(\\\"tip\\\");\n JSONArray data = jsonObject.getJSONArray(\\\"data\\\");\n List<Map<String, Object>> list = JSON.parseArray(data.toString(), Map.class);\n //\u8c03\u7528service\u8fdb\u884c\u5bfc\u51fa\n systemConfigService.exportExcel(title, head, tip, list, response);\n } catch (Exception e) {\n logger.error(\\\"\u5bfc\u51faExcel\u5931\u8d25\\\", e);\n }\n }", "CodeBleu_score": 44.04072228676299}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tint result = 0;\n\ttry {\n\t\t// Validate the provided JSON object.\n\t\tif (obj == null) {\n\t\t\tthrow new BusinessRunTimeException(ExceptionConstants.PARAM_ERROR);\n\t\t}\n\n\t\t// Initialize the account.\n\t\tAccount account = new Account();\n\t\taccount.setName(obj.getString(\"name\"));\n\t\taccount.setSerialNo(obj.getString(\"serialNo\"));\n\t\taccount.setRemark(obj.getString(\"remark\"));\n\t\taccount.setSort(obj.getInt(\"sort\"));\n\t\taccount.setDeleteFlag(BusinessConstants.DELETE_FLAG_NORMAL);\n\t\taccount.setEnabled(true);\n\n\t\t// Determine if the account should be set as the default.\n\t\tList<Account> accountList = accountMapper.selectByExample(new AccountExample());\n\t\tif (accountList.size() == 0) {\n\t\t\taccount.setIsDefault(true);\n\t\t} else {\n\t\t\taccount.setIsDefault(false);\n\t\t}\n\n\t\t// Set the initial amount to zero if not specified.\n\t\tif (obj.containsKey(\"initialAmount\")) {\n\t\t\taccount.setInitialAmount(obj.getDouble(\"initialAmount\"));\n\t\t} else {\n\t\t\taccount.setInitialAmount(0);\n\t\t}\n\n\t\t// Insert the account into the database.\n\t\tresult = accountMapper.insertSelective(account);\n\n\t\t// Log the operation.\n\t\tlogService.insertLog(request, account.getId(), LogService.LOG_TYPE_INSERT, \"\u6dfb\u52a0\u79d1\u76ee\", \"\u6dfb\u52a0\u79d1\u76ee\");\n\t} catch (Exception e) {\n\t\tJshException.writeFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 52.31616811281137}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tint result = 0;\n\ttry{\n\t\tAccount account = new Account();\n\t\taccount.setName(obj.getString(\\\"name\\\"));\n\t\taccount.setSerialNo(obj.getString(\\\"serialNo\\\"));\n\t\taccount.setRemark(obj.getString(\\\"remark\\\"));\n\t\taccount.setSort(obj.getInt(\\\"sort\\\"));\n\t\taccount.setCreateUserId(userService.getCurrentUser().getId());\n\t\taccount.setCreateUserName(userService.getCurrentUser().getName());\n\t\taccount.setCreateTime(new Date());\n\t\taccount.setUpdateUserId(userService.getCurrentUser().getId());\n\t\taccount.setUpdateUserName(userService.getCurrentUser().getName());\n\t\taccount.setUpdateTime(new Date());\n\t\taccount.setDeleteFlag(BusinessConstants.DELETE_FLAG_NORMAL);\n\t\taccount.setEnabled(true);\n\t\taccount.setInitialAmount(new BigDecimal(0));\n\t\tif (obj.getBoolean(\\\"defaultFlag\\\")) {\n\t\t\tAccountExample example = new AccountExample();\n\t\t\texample.createCriteria().andEnabledEqualTo(true).andDeleteFlagNotEqualTo(BusinessConstants.DELETE_FLAG_DELETED);\n\t\t\tList<Account> list = accountMapper.selectByExample(example);\n\t\t\tif (list.size() == 0) {\n\t\t\t\taccount.setDefaultFlag(true);\n\t\t\t}\n\t\t}\n\t\tresult = accountMapper.insertSelective(account);\n\t\tlogService.logInsert(request, account);\n\t}catch(Exception e){\n\t\tJshException.insertFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 43.91815749920932}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tint result = 0;\n\ttry {\n\t\tAccount account = new Account();\n\t\taccount.setName(obj.getString(\\\"name\\\"));\n\t\taccount.setSerialNo(obj.getString(\\\"serialNo\\\"));\n\t\taccount.setRemark(obj.getString(\\\"remark\\\"));\n\t\taccount.setSort(obj.getInt(\\\"sort\\\"));\n\t\taccount.setCreateDate(new Date());\n\t\taccount.setCreateUser(userService.getLoginUser(request).getId());\n\t\taccount.setModifyDate(new Date());\n\t\taccount.setModifyUser(userService.getLoginUser(request).getId());\n\t\taccount.setEnabled(true);\n\t\taccount.setDeleteFlag(BusinessConstants.DELETE_FLAG_NORMAL);\n\t\taccount.setAccountType(obj.getInt(\\\"accountType\\\"));\n\t\tif (obj.containsKey(\\\"initialAmount\\\")) {\n\t\t\taccount.setInitialAmount(obj.getDouble(\\\"initialAmount\\\"));\n\t\t} else {\n\t\t\taccount.setInitialAmount(0);\n\t\t}\n\t\tif (obj.containsKey(\\\"isDefault\\\")) {\n\t\t\taccount.setIsDefault(obj.getBoolean(\\\"isDefault\\\"));\n\t\t} else {\n\t\t\taccount.setIsDefault(false);\n\t\t}\n\t\tresult = accountMapper.insert(account);\n\t\tlogService.insertLog(request, \\\"insertAccount\\\", account.getId(), account.getName(), \\\"Account\\\", \\\"insertAccount\\\", \\\"insert\\\", result);\n\t} catch (Exception e) {\n\t\tlogService.insertLog(request, \\\"insertAccount\\\", null, null, \\\"Account\\\", \\\"insertAccount\\\", \\\"insert\\\", result);\n\t\tJshException.writeFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 39.700709375256885}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\tLong result = null;\n\ttry {\n\t\tresult = accountMapperEx.selectByConditionAccountCount(name, serialNo, null);\n\t} catch (Exception e) {\n\t\tJshException.readFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 73.61897010190208}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\tLong result = null;\n\ttry {\n\t\tresult = accountMapperEx.selectByConditionAccountCount(name, serialNo, null, null, null);\n\t} catch (Exception e) {\n\t\tJshException.readFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 64.23172607305014}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\tLong count = null;\n\ttry {\n\t\tcount = accountMapperEx.selectByConditionAccountCount(name, serialNo, null);\n\t} catch (Exception e) {\n\t\tJshException.readFail(logger, e);\n\t}\n\treturn count;\n}", "CodeBleu_score": 64.38337056740112}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteByPrimaryKey(id);\n\t} catch (Exception e) {\n\t\tJshException.readFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 70.83916425515784}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteByPrimaryKey(id);\n\t} catch (Exception e) {\n\t\tJshException.readFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 70.83916425515784}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\tint result =0;\ntry{\nresult=depotItemMapper.deleteByPrimaryKey(id);\n}catch(Exception e){\nJshException.readFail(logger, e);\n}\nreturn result;\n}", "CodeBleu_score": 86.76258949950152}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\tCloseableHttpClient client = null;\n\tCloseableHttpResponse response = null;\n\ttry {\n\t\tclient = HttpClients.createDefault();\n\t\tString url = protocol + \"://\" + host + \":\" + port + \"/graph/addNode/\" + projectName + \"/\" + nodeType + \"/\" + nodeKey;\n\t\tHttpGet request = new HttpGet(url);\n\t\tresponse = client.execute(request);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString result = EntityUtils.toString(entity);\n\t\tif (StringUtils.isEmpty(result)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttry {\n\t\t\tif (response!= null) {\n\t\t\t\tresponse.close();\n\t\t\t}\n\t\t\tif (client!= null) {\n\t\t\t\tclient.close();\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 44.38562172623243}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\tCloseableHttpClient httpClient = null;\n\tCloseableHttpResponse response = null;\n\ttry {\n\t\thttpClient = HttpClients.createDefault();\n\t\tString url = protocol + \"://\" + host + \":\" + port + \"/graph/addNode?projectName=\" + projectName + \"&nodeType=\" + nodeType + \"&nodeKey=\" + nodeKey;\n\t\tHttpGet request = new HttpGet(url);\n\t\tresponse = httpClient.execute(request);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString responseBody = EntityUtils.toString(entity, Charset.forName(\"UTF-8\"));\n\t\tif (StringUtils.hasText(responseBody) && responseBody.contains(nodeKey)) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tif (response!= null) {\n\t\t\ttry {\n\t\t\t\tresponse.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tif (httpClient!= null) {\n\t\t\ttry {\n\t\t\t\thttpClient.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 43.65048903126583}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\tCloseableHttpClient httpClient = null;\n\tCloseableHttpResponse response = null;\n\ttry {\n\t\thttpClient = HttpClients.createDefault();\n\t\tHttpHost target = new HttpHost(host, port, protocol);\n\t\tHttpGet request = new HttpGet(target.toURI() + \\\"/graph/\\\" + projectName + \\\"/\\\" + nodeType + \\\"/\\\" + nodeKey);\n\t\tresponse = httpClient.execute(target, request);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString responseString = EntityUtils.toString(entity, Charset.defaultCharset());\n\t\tif (StringUtils.hasText(responseString)) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttry {\n\t\t\tif (response!= null) {\n\t\t\t\tresponse.close();\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\ttry {\n\t\t\tif (httpClient!= null) {\n\t\t\t\thttpClient.close();\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 30.898975919974568}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tseableHttpClient httpClient = HttpClients.createDefault();\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\tHttpHost host = new HttpHost(getHost(), getPort(), getProtocol());\n\t\tHttpGet getRequest = new HttpGet(\"/addEdge/\" +withProjectName(projectName) + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to);\n\t\thttpResponse = httpClient.execute(host, getRequest);\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tif (entity!= null) {\n\t\t\tObjectMapper om = new ObjectMapper();\n\t\t\tString result = EntityUtils.toString(entity);\n\t\t\tMap map = om.readValue(result, Map.class);\n\t\t\tif (map.get(\"key\")!= null) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n}", "CodeBleu_score": 89.86792275377238}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tseableHttpClient httpClient = HttpClients.createDefault();\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\tHttpHost host = new HttpHost(getHost(), getPort(), getProtocol());\n\t\tHttpGet getRequest = new HttpGet(\n\t\t\t\t\"/addEdge/\" +withProjectName(projectName) + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to);\n\t\thttpResponse = httpClient.execute(host, getRequest);\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tif (entity!= null) {\n\t\t\tObjectMapper om = new ObjectMapper();\n\t\t\tString result = EntityUtils.toString(entity);\n\t\t\tMap map = om.readValue(result, Map.class);\n\t\t\tif (map.get(\"key\")!= null) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n}", "CodeBleu_score": 94.57065322632266}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tseableHttpClient httpClient = HttpClients.createDefault();\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\tHttpHost host = new HttpHost(getHost(), getPort(), getProtocol());\n\t\tHttpGet getRequest = new HttpGet(\"/addEdge/\" + withProjectName(projectName) + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to);\n\t\thttpResponse = httpClient.execute(host, getRequest);\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tif (entity!= null) {\n\t\t\tObjectMapper om = new ObjectMapper();\n\t\t\tString result = EntityUtils.toString(entity);\n\t\t\tMap map = om.readValue(result, Map.class);\n\t\t\tif (map.get(\"key\")!= null) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n}", "CodeBleu_score": 91.73088530664425}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t\tif (event!= null && event.getMessage()!= null) {\n\t\tif (event.getLocation() == null) {\n\t\t\tRandom random = new Random();\n\t\t\tint locationIndex = random.nextInt(testLocations.size());\n\t\t\tevent.setLocation(testLocations.get(locationIndex));\n\t\t}\n\t\tevent.setTime(new Date());\n\t\tString jsonString = null;\n\t\ttry {\n\t\t\tjsonString = objectMapper.writeValueAsString(event);\n\t\t} catch (JsonProcessingException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tString topic = event.getTarget();\n\t\tif (topic == null) {\n\t\t\ttopic = \"test\";\n\t\t}\n\t\tProducerRecord<String, String> producerRecord = new ProducerRecord<>(topic, jsonString);\n\t\tproducer.send(producerRecord);\n\t\tproducer.flush();\n\t}\n}", "CodeBleu_score": 49.666717196347335}, {"code": "public void sendEvent(Event event){\n\t\tif (event!= null && event.getMessage()!= null) {\n\t\tif (event.getLocation() == null) {\n\t\t\tevent.setLocation(testLocations.get(new Random().nextInt(testLocations.size())));\n\t\t}\n\t\tevent.setTime(new Date());\n\t\tString jsonString = null;\n\t\ttry {\n\t\t\tjsonString = objectMapper.writeValueAsString(event);\n\t\t} catch (JsonProcessingException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tString target = event.getTarget();\n\t\tif (target == null) {\n\t\t\ttarget = \"test\";\n\t\t}\n\t\tProducerRecord<String, String> record = new ProducerRecord<>(target, jsonString);\n\t\tproducer.send(record);\n\t\tproducer.flush();\n\t}\n}", "CodeBleu_score": 46.27591872909448}, {"code": "public void sendEvent(Event event){\n\t\tif (event!= null && event.getMessage()!= null) {\n\t\tif (event.getLocation() == null) {\n\t\t\tevent.setLocation(testLocations.get(new Random().nextInt(testLocations.size())));\n\t\t}\n\t\tevent.setTime(new Date());\n\t\tString eventJson;\n\t\ttry {\n\t\t\teventJson = objectMapper.writeValueAsString(event);\n\t\t} catch (JsonProcessingException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn;\n\t\t}\n\t\tString topic = event.getTarget() == null? \"test\" : event.getTarget();\n\t\tProducerRecord<String, String> producerRecord = new ProducerRecord<>(topic, eventJson);\n\t\tproducer.send(producerRecord);\n\t\tproducer.flush();\n\t}\n}", "CodeBleu_score": 46.72537924351675}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t\t// Initialize the OSS client.\n\tOSS ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\n\t// Upload the file content.\n\tossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n\t// Close the client.\n\tossClient.shutdown();\n\n\t// Return the URL of the uploaded object.\n\treturn \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 29.84941329534975}, {"code": "public String upload(String objName, byte[] content){\n\t\tString endpoint = \"https://oss-cn-beijing.aliyuncs.com\";\n\tString accessKeyId = \"\";\n\tString accessKeySecret = \"\";\n\tString bucketName = \"image-ycinfotech-cn\";\n\n\t// \u521b\u5efaOSSClient\u5b9e\u4f8b\u3002\n\tOSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\n\t// \u4e0a\u4f20\u6587\u4ef6\u6d41\u3002\n\tossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n\t// \u5173\u95edOSSClient\u3002\n\tossClient.shutdown();\n\n\treturn \"https://image-ycinfotech-cn.oss-cn-beijing.aliyuncs.com/\" + objName;\n}", "CodeBleu_score": 36.925440411346614}, {"code": "public String upload(String objName, byte[] content){\n\t// Create a client with access credentials\nOSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\n// Upload a file to an OSS bucket\nossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n// Close the client\nossClient.shutdown();\n\n// Return the URL of the uploaded object\nreturn \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 30.780737178148275}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tpToLocationWorker worker = getIpToLocationWorker();\n\tif (worker == null) {\n\t\tLocationInfo result = new LocationInfo();\n\t\tresult.setIpAddress(ipAddress);\n\t\tresult.setMainInfo(\"unknown\");\n\t\tresult.setSubInfo(\"unknown\");\n\t\treturn result;\n\t}\n\treturn worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 47.756257407065306}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tToLocationWorker worker = getIpToLocationWorker();\nif (worker == null) {\nreturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\", ipAddress);\n}\nreturn worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 26.11753250467469}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tpToLocationWorker worker = getIpToLocationWorker();\n\tif (worker == null) {\n\t\treturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\", ipAddress);\n\t}\n\treturn worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 26.346575421741882}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (lowLevelRestClient == null || highLevelRestClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (lowLevelRestClient == null || highLevelRestClient == null) {\n\t\t\t\tList<HttpHost> httpHosts = new ArrayList<HttpHost>();\n\t\t\t\tString[] hosts = clusterHostList.split(\",\");\n\t\t\t\tfor (String host : hosts) {\n\t\t\t\t\tString[] hostAndPort = host.split(\":\");\n\t\t\t\t\thttpHosts.add(new HttpHost(hostAndPort[0], Integer.parseInt(hostAndPort[1]), \"http\"));\n\t\t\t\t}\n\t\t\t\tlowLevelRestClient = RestClient.builder(httpHosts.toArray(new HttpHost[httpHosts.size()])).build();\n\t\t\t\thighLevelRestClient = new RestHighLevelClient(lowLevelRestClient);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 47.9693317494994}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (lowLevelRestClient == null && highLevelRestClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (lowLevelRestClient == null && highLevelRestClient == null) {\n\t\t\t\tList<HttpHost> httpHosts = new ArrayList<HttpHost>();\n\t\t\t\tString[] hosts = clusterHostList.split(\",\");\n\t\t\t\tfor (String host : hosts) {\n\t\t\t\t\tString[] hostPort = host.split(\":\");\n\t\t\t\t\thttpHosts.add(new HttpHost(hostPort[0], Integer.parseInt(hostPort[1]), \"http\"));\n\t\t\t\t}\n\t\t\t\tlowLevelRestClient = RestClient.builder(httpHosts.toArray(new HttpHost[httpHosts.size()])).build();\n\t\t\t\thighLevelRestClient = new RestHighLevelClient(lowLevelRestClient);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 49.52645873539202}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (lowLevelRestClient == null && highLevelRestClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (lowLevelRestClient == null && highLevelRestClient == null) {\n\t\t\t\tList<HttpHost> hosts = new ArrayList<>();\n\t\t\t\tString[] hostPorts = clusterHostList.split(\",\");\n\t\t\t\tfor (String hostPort : hostPorts) {\n\t\t\t\t\tString[] hostPortPair = hostPort.split(\":\");\n\t\t\t\t\thosts.add(new HttpHost(hostPortPair[0], Integer.parseInt(hostPortPair[1]), \"http\"));\n\t\t\t\t}\n\t\t\t\tlowLevelRestClient = RestClient.builder(hosts.toArray(new HttpHost[hosts.size()])).build();\n\t\t\t\thighLevelRestClient = new RestHighLevelClient(lowLevelRestClient);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 50.073685488870176}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tt<HttpHost> hosts = new ArrayList<HttpHost>();\n\tString[] hostStrings = clusterHostList.split(\",\");\n\tfor (String hostString : hostStrings) {\n\t\tString[] hostParts = hostString.split(\":\");\n\t\tString host = hostParts[0];\n\t\tint port = clusterPort;\n\t\tif (hostParts.length > 1) {\n\t\t\tport = Integer.parseInt(hostParts[1]);\n\t\t}\n\t\thosts.add(new HttpHost(host, port));\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 42.302229115093084}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tt<HttpHost> hosts = new ArrayList<>();\n\tif (clusterHostList == null || clusterHostList.isEmpty()) {\n\t\treturn hosts;\n\t}\n\tString[] hostArray = clusterHostList.split(\",\");\n\tfor (String host : hostArray) {\n\t\tString[] hostParts = host.split(\":\");\n\t\tif (hostParts.length == 1) {\n\t\t\thosts.add(new HttpHost(hostParts[0], clusterPort));\n\t\t} else if (hostParts.length == 2) {\n\t\t\thosts.add(new HttpHost(hostParts[0], Integer.parseInt(hostParts[1])));\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 44.48481740210849}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tt<HttpHost> hosts = new ArrayList<HttpHost>();\n\tString[] hostStrings = clusterHostList.split(\",\");\n\tfor (String hostString : hostStrings) {\n\t\tString[] hostParts = hostString.split(\":\");\n\t\tString host = hostParts[0];\n\t\tint port = clusterPort;\n\t\tif (hostParts.length > 1) {\n\t\t\tport = Integer.parseInt(hostParts[1]);\n\t\t}\n\t\thosts.add(new HttpHost(host, port));\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 42.302229115093084}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\tap<String, Object> task = taskQueue.poll(30, TimeUnit.SECONDS);\n\tif (task!= null) {\n\t\tString taskType = (String) task.get(PARAM_TASK_TYPE);\n\t\tif (TASK_PLAIN_TEXT_MESSAGE.equals(taskType)) {\n\t\t\tString toNumber = (String) task.get(PARAM_RECIEVER_NUMBER);\n\t\t\tString fromWho = (String) task.get(PARAM_FROM_WHO);\n\t\t\tString template = (String) task.get(PARAM_MESSAGE_TEMPLATE);\n\t\t\tMap<String, String> parameters = (Map<String, String>) task.get(PARAM_MESSAGE_DATA);\n\t\t\tif (StringUtils.isBlank(toNumber)) {\n\t\t\t\tlog.error(\\\"Invalid recipient number for message task: \\\" + task);\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tString message = formatMessage(template, parameters);\n\t\t\t\t\tif (StringUtils.isBlank(message)) {\n\t\t\t\t\t\tlog.error(\\\"Invalid message data for message task: \\\" + task);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsendSms(toNumber, fromWho, message);\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tlog.error(\\\"Error sending message task: \\\" + task, e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 49.562295330625794}, {"code": "protected void pollingWork() throws InterruptedException{\n\tap<String, Object> task = taskQueue.poll(30, TimeUnit.SECONDS);\n\tif (task!= null) {\n\t\tString taskType = (String) task.get(PARAM_TASK_TYPE);\n\t\tif (TASK_PLAIN_TEXT_MESSAGE.equals(taskType)) {\n\t\t\tString toNumber = (String) task.get(PARAM_RECIEVER_NUMBER);\n\t\t\tString fromWho = (String) task.get(PARAM_FROM_WHO);\n\t\t\tString template = (String) task.get(PARAM_MESSAGE_TEMPLATE);\n\t\t\tMap<String, String> parameters = (Map<String, String>) task.get(PARAM_MESSAGE_DATA);\n\t\t\tif (StringUtils.isBlank(toNumber)) {\n\t\t\t\tlog.error(\\\"Invalid recipient number for plain text message task: \\\" + taskType);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (StringUtils.isBlank(template)) {\n\t\t\t\tlog.error(\\\"Invalid template for plain text message task: \\\" + taskType);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (parameters == null) {\n\t\t\t\tparameters = new HashMap<String, String>();\n\t\t\t}\n\t\t\tString message = buildMessage(template, parameters);\n\t\t\tif (StringUtils.isBlank(message)) {\n\t\t\t\tlog.error(\\\"Invalid message for plain text message task: \\\" + taskType);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsendPlainTextMessage(toNumber, fromWho, message);\n\t\t}\n\t}\n}", "CodeBleu_score": 47.42555247735059}, {"code": "protected void pollingWork() throws InterruptedException{\n\tap<String, Object> task = taskQueue.poll(30, TimeUnit.SECONDS);\n\tif (task!= null) {\n\t\tString taskType = (String) task.get(PARAM_TASK_TYPE);\n\t\tif (TASK_PLAIN_TEXT_MESSAGE.equals(taskType)) {\n\t\t\tString toNumber = (String) task.get(PARAM_RECIEVER_NUMBER);\n\t\t\tString fromWho = (String) task.get(PARAM_FROM_WHO);\n\t\t\tString messageTemplate = (String) task.get(PARAM_MESSAGE_TEMPLATE);\n\t\t\tMap<String, String> messageData = (Map<String, String>) task.get(PARAM_MESSAGE_DATA);\n\n\t\t\tif (StringUtils.isBlank(toNumber)) {\n\t\t\t\tlog.error(\\\"Message task with invalid recipient number: \\\" + task);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (StringUtils.isBlank(messageTemplate)) {\n\t\t\t\tlog.error(\\\"Message task with invalid message template: \\\" + task);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (messageData == null) {\n\t\t\t\tmessageData = new HashMap<String, String>();\n\t\t\t}\n\n\t\t\tmessageData.put(\\\"fromWho\\\", fromWho);\n\t\t\tmessageData.put(\\\"toNumber\\\", toNumber);\n\t\t\tmessageData.put(\\\"messageTemplate\\\", messageTemplate);\n\n\t\t\ttry {\n\t\t\t\tsendPlainTextMessage(messageData);\n\t\t\t} catch (Exception e) {\n\t\t\t\tlog.error(\\\"Error sending message: \\\" + task, e);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 47.76418023850123}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpclient = getHttpClient();\n\tHttpGet httpget = new HttpGet(uri);\n\tCloseableHttpResponse response = httpclient.execute(httpget);\n\ttry {\n\t\tHttpEntity entity = response.getEntity();\n\t\tif (entity!= null) {\n\t\t\tString content = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n\t\t\tSystem.out.println(content);\n\t\t\treturn content;\n\t\t}\n\t} finally {\n\t\tresponse.close();\n\t}\n\treturn null;\n}", "CodeBleu_score": 73.61630155386818}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpclient = getHttpClient();\n\tHttpGet httpget = new HttpGet(uri);\n\tCloseableHttpResponse response = httpclient.execute(httpget);\n\ttry {\n\t\tHttpEntity entity = response.getEntity();\n\t\tString content = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n\t\tSystem.out.println(content);\n\t\treturn content;\n\t} finally {\n\t\tresponse.close();\n\t}\n}", "CodeBleu_score": 77.11643882139587}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpclient = getHttpClient();\n\tHttpGet httpget = new HttpGet(uri);\n\tCloseableHttpResponse response = httpclient.execute(httpget);\n\tHttpEntity entity = response.getEntity();\n\tString content = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n\tSystem.out.println(content);\n\treturn content;\n}", "CodeBleu_score": 77.36265020641709}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tMap<String, Object> map = new HashMap<>();\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument document = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n\tNodeList childNodes = document.getDocumentElement().getChildNodes();\n\tfor (int i = 0; i < childNodes.getLength(); i++) {\n\t\tNode node = childNodes.item(i);\n\t\tif (node.getNodeType() == Node.ELEMENT_NODE) {\n\t\t\tString key = node.getNodeName();\n\t\t\tif (doTrim) {\n\t\t\t\tkey = key.trim();\n\t\t\t}\n\t\t\tObject value = decodeNode(node);\n\t\t\tmap.put(key, value);\n\t\t}\n\t}\n\treturn map;\n}", "CodeBleu_score": 53.23233149774236}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument document = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n\n\treturn decodeElement(document.getDocumentElement(), doTrim);\n}", "CodeBleu_score": 42.9174806674967}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tMap<String, Object> result = new HashMap<>();\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument document = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n\tNode root = document.getDocumentElement();\n\tdecodeElement(root, result, doTrim);\n\treturn result;\n}", "CodeBleu_score": 49.923958255889964}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tif (isAutoProcessingEligible(orderRecord)) {\n\t\tlogAction(orderRecord, \"Auto-processing enabled\");\n\t\tcompleteShipAndInvoiceEnqueuer.enqueue(orderRecord.getAD_Client_ID(), orderRecord.getAD_Org_ID(), orderRecord.getC_Order_ID());\n\t} else {\n\t\tlogAction(orderRecord, \"Auto-processing disabled\");\n\t\tcreateMissingShipmentSchedulesIfPostponed(orderRecord);\n\t}\n}", "CodeBleu_score": 20.00559786124592}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tfinal OrderId orderId = new OrderId(orderRecord.getAD_Client_ID(), orderRecord.getAD_Org_ID(), orderRecord.getC_Order_ID());\n\tfinal DeliveryRule deliveryRule = orderRecord.getDeliveryRule();\n\tfinal boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderId, deliveryRule);\n\tif (isEligibleForAutoProcessing) {\n\t\tloggables.log(logger, Level.INFO, \"Auto-processing of order %s is enabled.\", orderId);\n\t\tasyncBatchObserver.observe(new AsyncBatchId(orderId, AsyncBatchId.Type.ORDER_SHIP_AND_INVOICE), () -> {\n\t\t\tcompleteShipAndInvoiceEnqueuer.enqueue(orderId);\n\t\t});\n\t} else {\n\t\tloggables.log(logger, Level.INFO, \"Auto-processing of order %s is disabled.\", orderId);\n\t\tif (deliveryRule.isPostponed()) {\n\t\t\tloggables.log(logger, Level.INFO, \"Order %s is postponed. Schedules will be generated manually.\", orderId);\n\t\t} else {\n\t\t\tloggables.log(logger, Level.INFO, \"Order %s is not eligible for auto-processing. Schedules will be generated manually.\", orderId);\n\t\t\tCreateMissingShipmentSchedulesWorkpackageProcessor.enqueue(orderId);\n\t\t}\n\t}\n}", "CodeBleu_score": 43.91620542403298}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tfinal OrderId orderId = OrderId.of(orderRecord);\n\tfinal String trxName = InterfaceWrapperHelper.getTrxName(orderRecord);\n\tfinal boolean isAutoShipAndInvoice = sysConfigBL.isAutoShipAndInvoice(trxName);\n\tif (isAutoShipAndInvoice) {\n\t\tlogger.info(\"Auto-processing order {} in transaction {}\", Loggables.of(orderId), Loggables.of(trxName));\n\t\tcompleteShipAndInvoiceEnqueuer.enqueue(AsyncBatchId.of(trxName), orderId);\n\t} else {\n\t\tlogger.info(\"Not auto-processing order {} in transaction {}\", Loggables.of(orderId), Loggables.of(trxName));\n\t\tif (orderRecord.get_ValueAsBoolean(\"IsPostponed\")) {\n\t\t\tlogger.info(\"Not auto-processing order {} in transaction {} because it is postponed\", Loggables.of(orderId), Loggables.of(trxName));\n\t\t} else {\n\t\t\tlogger.info(\"Not auto-processing order {} in transaction {} because it is not postponed\", Loggables.of(orderId), Loggables.of(trxName));\n\t\t\tasyncBatchObserver.run(CreateMissingShipmentSchedulesWorkpackageProcessor.class, orderId);\n\t\t}\n\t}\n}", "CodeBleu_score": 43.991353548387245}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\tser = User::where('email', $request->email)->first();\nif (!$user ||!Hash::check($request->password, $user->password)) {\nevent(new Failed($request));\nthrow ValidationException::withMessages([\n'email' => ['The provided credentials are incorrect.'],\n]);\n}\nreturn $user;\n}", "CodeBleu_score": 36.106036987890164}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\tser = User::where('email', $request->email)->first();\nif (!$user ||! $user->validatePassword($request->password)) {\nevent(new Failed(app(StatefulGuard::class), $request, [\n'email' => $request->email,\n'password' => $request->password,\n]));\nthrow ValidationException::withMessages([\n'email' => [trans('auth.failed')],\n]);\n}\nreturn $user;\n}", "CodeBleu_score": 35.3464225641232}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\tser = User::where('email', $request->email)->first();\n\nif (! $user ||! Hash::check($request->password, $user->password)) {\nevent(new Failed($request, $user));\nthrow ValidationException::withMessages([\n'email' => ['The provided credentials are incorrect.'],\n]);\n}\n\nreturn $user;\n}", "CodeBleu_score": 32.689694213611645}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\tow ValidationException::withMessages([\n'email' => ['These credentials do not match our records.'],\n]);\n}", "CodeBleu_score": 22.572855882756656}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\tow ValidationException::withMessages([\n'email' => [trans('auth.failed')],\n]);\n}", "CodeBleu_score": 40.13566033799584}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\tow ValidationException::withMessages([\n'email' => ['These credentials do not match our records.'],\n]);\n}", "CodeBleu_score": 22.572855882756656}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t$user_id = $request->session()->get('user_id');\n$user = User::find($user_id);\n\nif ($user) {\n$public_key = Webauthn::getPublicKey($user);\n$data = [\n'enabled' => $user->hasTwoFactorAuthentication(),\n'remember_me' => $request->session()->get('remember_me'),\n'public_key' => $public_key,\n];\n\nreturn Inertia::render('TwoFactorChallenge', $data);\n}\n\nreturn Inertia::render('TwoFactorChallenge', ['enabled' => false]);\n}", "CodeBleu_score": 44.3590501747283}, {"code": "<?\npublic function toResponse($request){\n\t$user = User::find($request->session()->get('user_id'));\nif ($user) {\n$assertion = Webauthn::makeAssertion($user->webauthn_public_key);\n$response = Inertia::render('TwoFactorChallenge', [\n'hasTwoFactorAuthentication' => $user->has_two_factor_authentication,\n'rememberMe' => $user->remember_me,\n'assertion' => $assertion\n]);\nreturn $response;\n}\nreturn response()->json([\n'status' => 'error',\n'message' => 'User not found.'\n], 404);\n}", "CodeBleu_score": 38.80627329935303}, {"code": "<?\npublic function toResponse($request){\n\t$user = User::find(session('user_id'));\nif ($user) {\n$assertion = Webauthn::makeAssertion($user);\nreturn Inertia::render('TwoFactorChallenge', [\n'enabled' => $user->hasTwoFactorAuthentication(),\n'remember' => $request->session()->get('remember')\n])->withWebauthn($assertion);\n}\nreturn redirect()->route('login');\n}", "CodeBleu_score": 34.72215210149245}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\tuserToken = UserToken::where('driver', $driver)\n->where('socialite_id', $socialite->getId())\n->first();\n\nif ($userToken) {\n$user = $userToken->user;\n\nif ($user->is_verified) {\nreturn $user;\n}\n}\n\n$user = User::where('email', $socialite->getEmail())->first();\n\nif ($user) {\n$user->tokens()->create([\n'driver' => $driver,\n'socialite_id' => $socialite->getId(),\n]);\n\nreturn $user;\n}\n\n$user = User::create([\n'name' => $socialite->getName(),\n'email' => $socialite->getEmail(),\n'email_verified_at' => now(),\n'password' => (Str::random(8)),\n]);\n\n$user->tokens()->create([\n'driver' => $driver,\n'socialite_id' => $socialite->getId(),\n]);\n\nevent(new Registered($user));\n\nreturn $user;\n}", "CodeBleu_score": 44.53066888428675}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\tuser = UserToken::where('driver', $driver)\n->where('socialite_id', $socialite->getId())\n->first()\n->user;\n\nif (! $user) {\n$user = User::whereEmail($socialite->getEmail())->first();\n\nif (! $user) {\n$user = (new CreateNewUser())->create($request, $socialite);\n} else {\n$this->associateSocialiteToken($user, $driver, $socialite);\n}\n}\n\nreturn $user;\n}", "CodeBleu_score": 42.82702683523782}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\tuserToken = UserToken::where('driver', $driver)->where('user_id', $socialite->getId())->first();\nif ($userToken) {\n$user = $userToken->user;\nif ($user->email!== $socialite->getEmail()) {\nthrow ValidationException::withMessages([\n'email' => ['The email address associated with this account does not match the email address associated with your social media account.'],\n]);\n}\n} else {\n$user = User::where('email', $socialite->getEmail())->first();\nif (!$user) {\n$user = (new CreateNewUser)->create($request, [\n'name' => $socialite->getName(),\n'email' => $socialite->getEmail(),\n]);\n}\n$user->tokens()->create([\n'driver' => $driver,\n'user_id' => $socialite->getId(),\n]);\n}\nreturn $user;\n}", "CodeBleu_score": 45.25248228624793}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t\t// Retrieve the user from the request\n\t$user = $request->user();\n\tif (! $user) {\n\t\treturn false;\n\t}\n\n\t// Validate the assertion using the filtered credentials from the request\n\t$credentials = $this->filterCredentials($request);\n\ttry {\n\t\tWebauthnFacade::validate($credentials);\n\t} catch (ValidationException $e) {\n\t\t// Trigger a failed authentication event\n\t\tevent(new Failed(\n\t\t\t$this->guard->getName(),\n\t\t\t$user,\n\t\t\t$credentials\n\t\t));\n\n\t\t// Throw an authentication exception\n\t\tthrow $e;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 51.278510660589795}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $request->user();\n\nif (!$user) {\nreturn false;\n}\n\ntry {\n$assertion = WebauthnFacade::validateAssertion(\n$user,\n$this->filterCredentials($request),\n$request->input('id'),\n$request->input('rawId'),\n$request->input('response'),\n);\n} catch (ValidationException $e) {\n$this->guard->logout();\nevent(new Failed($request, $this->guard, $e));\nthrow $e;\n}\n\nreturn true;\n}", "CodeBleu_score": 59.18642176559794}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t", "CodeBleu_score": 8.482142857142858}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\tail = $this->option('email')) {\ntry {\nreturn User::where('email', $email)->firstOrFail();\n} catch (ModelNotFoundException $e) {\n$this->error('User not found');\nreturn null;\n}\n}\n\n$this->error('No email provided');\nreturn null;\n}", "CodeBleu_score": 38.30735066765539}, {"code": "<?\nprivate function user(): ?User{\n\tis->option('email')) {\nreturn User::where('email', $this->option('email'))->firstOrFail();\n}\n$this->error('No email provided');\nreturn null;\n}", "CodeBleu_score": 22.794024443543357}, {"code": "<?\nprivate function user(): ?User{\n\tis->option('email')) {\n$email = $this->option('email');\n} else {\n$this->error('Email is required.');\nreturn null;\n}\ntry {\n$user = User::where('email', $email)->firstOrFail();\n} catch (ModelNotFoundException $e) {\n$this->error('User not found.');\nreturn null;\n}\nreturn $user;\n}", "CodeBleu_score": 60.46965380767531}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\tonfig('scout.driver') ==='meilisearch' && config('scout.meilisearch.host')!== '') {\nforeach (config('scout.meilisearch.index_settings') as $index => $settings) {\n$tableName = $settings['table'];\n$this->artisan('\u2610 Flushing index: '.$index,'scout:flush', ['--index' => $index, '--table' => $tableName, '--verbose' => true]);\n}\n}\n}", "CodeBleu_score": 43.93985685336214}, {"code": "<?\nprotected function scoutFlush(): void{\n\tonfig('scout.driver') ==='meilisearch' && config('scout.meilisearch.host')!== '') {\nforeach (config('scout.meilisearch.indexes') as $index) {\n$tableName = $index['prefix']. $index['model'];\n$this->artisan('scout:flush', ['--model' => $tableName, '--force' => true], $output);\n}\n$this->info('Scout indexes have been flushed.');\n}\n}", "CodeBleu_score": 50.81733479173518}, {"code": "<?\nprotected function scoutFlush(): void{\n\tonfig('scout.driver') ==='meilisearch' && config('scout.meilisearch.host')!== '') {\nforeach (config('scout.meilisearch.index_settings') as $index => $settings) {\n$table = $settings['table']?? null;\nif ($table!== null) {\n$this->artisan('\u2610 Flushing index '. $index,'scout:flush', ['--index' => $index, '--verbose' => true]);\n}\n}\n}\n}", "CodeBleu_score": 51.36426687202083}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t* If the resource has a VCard, we'll use that. Otherwise, we'll create a new VCard.\n */\nif ($resource->vcard) {\n$vcard = Reader::read($resource->vcard);\n} else {\n$vcard = new VCard();\n$vcard->UID = $resource->id;\n}\n\n/**\n * Now, we'll apply a series of exporters to add more details to the VCard.\n */\nforeach ($this->getExporters() as $exporter) {\n$exporter->export($vcard, $resource);\n}\n\n/**\n * Finally, we'll return the populated VCard.\n */\nreturn $vcard;\n}", "CodeBleu_score": 25.3833398358461}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t = $resource->vcard?? new VCard();\n\nif ($vcard->getUid() === null) {\n$vcard->setUid(Uuid::uuid4()->toString());\n}\n\n$this->applyExporters($vcard, $resource);\n\nreturn $vcard;\n}", "CodeBleu_score": 14.08236783818313}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\td = new VCard();\n\n// If the resource has a VCard, read it and set the UID if it is missing.\nif ($resource->vcard) {\ntry {\n$vcard = Reader::read($resource->vcard);\n} catch (ParseException $e) {\n$vcard = new VCard();\n}\n\n// If the UID is missing, set it from the resource's ID.\nif (!$vcard->UID) {\n$vcard->UID = $resource->id;\n}\n}\n\n// Create a new VCard if the resource doesn't have a VCard.\nif (!$vcard->UID) {\n$vcard = new VCard();\n}\n\n// Apply exporters to add more details to the VCard.\n$this->applyExporters($resource, $vcard);\n\nreturn $vcard;\n}", "CodeBleu_score": 28.19669568381157}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$vault = $this->user->vaults()\n->wherePivot('permission', '<=', Vault::PERMISSION_EDIT)\n->findOrFail($addressBookId);\n\n$object = $this->getObject($addressBookId, $cardUri);\n\nif ($object instanceof Contact) {\n$job = new DestroyContact([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $vault->id,\n'contact_id' => $object->id,\n]);\n\nBus::batch([$job])\n->allowFailures()\n->onQueue('high')\n->dispatch();\n} elseif ($object instanceof Group) {\n$job = new DestroyGroup([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $vault->id,\n'group_id' => $object->id,\n]);\n\nBus::batch([$job])\n->allowFailures()\n->onQueue('high')\n->dispatch();\n} else {\nreturn false;\n}\n\nreturn true;\n}", "CodeBleu_score": 58.57945935904758}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$object = $this->getObject($addressBookId, $cardUri);\n\nif ($object instanceof Contact) {\nBus::dispatch(new DestroyContact([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'contact_id' => $object->id,\n]));\n} elseif ($object instanceof Group) {\nBus::dispatch(new DestroyGroup([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'group_id' => $object->id,\n]));\n} else {\nreturn false;\n}\n\nreturn true;\n}", "CodeBleu_score": 55.8088365024453}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$vault = $this->user->vaults()->wherePivot('permission', '<=', Vault::PERMISSION_EDIT)->findOrFail($addressBookId);\n\nif ($cardUri ==='self') {\n$job = new DestroyContact([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $vault->id,\n'uuid' => $this->user->uuid,\n]);\n} elseif (Str::startsWith($cardUri, 'group/')) {\n$job = new DestroyGroup([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $vault->id,\n'uuid' => Str::after($cardUri, 'group/'),\n]);\n} else {\n$job = new DestroyContact([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $vault->id,\n'uuid' => $cardUri,\n]);\n}\n\nBus::batch([$job])\n->allowFailures()\n->onQueue('high')\n->dispatch();\n\nreturn true;\n}", "CodeBleu_score": 47.84219666186289}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\tif (empty($data['file'])) {\nreturn;\n}\n\n$activity = $this->activityRepository->create($data);\n$file = $this->model->create([\n'activity_id' => $activity->id,\n'file_name' => $data['file']->getClientOriginalName(),\n'file_path' => $data['file']->store('activity/files'),\n]);\n\nreturn $file;\n}", "CodeBleu_score": 42.08731376449109}, {"code": "<?\npublic function upload(array $data){\n\t\n}", "CodeBleu_score": 3.5559630261164195}, {"code": "<?\npublic function upload(array $data){\n\t$file = $data['file'];\nif (!$file) {\nreturn;\n}\n\n$activity = $this->activityRepository->create([\n'type' => 'file',\n'user_id' => $this->auth->user()->id,\n'content' => $data['content'],\n]);\n\n$file->store('public/activity/files');\n\nreturn $this->create([\n'activity_id' => $activity->id,\n'name' => $file->getClientOriginalName(),\n'path' => $file->hashName(),\n]);\n}", "CodeBleu_score": 46.89381549845784}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t\tif (in_array($exception->getCode(), [404, 403, 500])) {\n\t\treturn response()->json(['message' => $this->jsonErrorMessages[$exception->getCode()]], $exception->getCode());\n\t}\n\n\tif ($exception instanceof ModelNotFoundException) {\n\t\treturn response()->json(['message' => $this->jsonErrorMessages[404]], 404);\n\t}\n\n\tif ($exception instanceof PDOException) {\n\t\treturn response()->json(['message' => $this->jsonErrorMessages[500]], 500);\n\t}\n\n\tif ($exception instanceof ParseError) {\n\t\treturn response()->json(['message' => $this->jsonErrorMessages[500]], 500);\n\t}\n\n\tif ($exception instanceof HttpException) {\n\t\treturn response()->json(['message' => $this->jsonErrorMessages[$exception->getStatusCode()]], $exception->getStatusCode());\n\t}\n\n\treturn parent::render($request, $exception);\n}", "CodeBleu_score": 35.74447347407376}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t\tif ($exception instanceof ModelNotFoundException) {\n\t\treturn response()->json(['message' => $this->jsonErrorMessages[404]], 404);\n\t}\n\n\tif ($exception instanceof PDOException) {\n\t\treturn response()->json(['message' => $this->jsonErrorMessages[500]], 500);\n\t}\n\n\tif ($exception instanceof ParseError) {\n\t\treturn response()->json(['message' => $this->jsonErrorMessages[500]], 500);\n\t}\n\n\tif ($exception instanceof HttpException) {\n\t\treturn response()->json(['message' => $this->jsonErrorMessages[$exception->getStatusCode()]], $exception->getStatusCode());\n\t}\n\n\treturn null;\n}", "CodeBleu_score": 33.6386926833827}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t\tif (request()->is('admin/*')) {\n\t\treturn redirect()->route('admin.session.index');\n\t}\n\n\tif ($exception instanceof HttpException) {\n\t\treturn response()->view('errors.http', [], $exception->getStatusCode());\n\t}\n\n\tif ($exception instanceof ModelNotFoundException) {\n\t\treturn response()->view('errors.404', [], 404);\n\t}\n\n\tif ($exception instanceof PDOException) {\n\t\treturn response()->view('errors.500', [], 500);\n\t}\n\n\tif ($exception instanceof ParseError) {\n\t\treturn response()->view('errors.500', [], 500);\n\t}\n\n\treturn response()->view('errors.500', [], 500);\n}", "CodeBleu_score": 35.85880812179295}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\tf (request()->expectsJson()) {\n\t\treturn response()->json(['message' => $this->jsonErrorMessages[$statusCode]], $statusCode);\n\t}\n\n\treturn view('admin::errors.'. $path. '.'. $statusCode);\n}", "CodeBleu_score": 48.799946404293024}, {"code": "<?\nprivate function response($path, $statusCode){\n\tf (request()->expectsJson()) {\n\t\treturn response()->json(['message' => $this->jsonErrorMessages[$statusCode]], $statusCode);\n\t}\n\n\treturn view(\"admin::errors.{$path}.{$statusCode}\");\n}", "CodeBleu_score": 40.25253894746608}, {"code": "<?\nprivate function response($path, $statusCode){\n\tf (request()->expectsJson()) {\n\t\treturn response()->json(['message' => $this->jsonErrorMessages[$statusCode]], $statusCode);\n\t}\n\n\treturn response()->view(\"{$path}.errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 54.47935538361012}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\tivity IDs from the request\n\t$ids = request('ids');\n\n\t// Initialize the count of successful updates\n\t$successCount = 0;\n\n\t// Iterate over the activity IDs\n\tforeach ($ids as $id) {\n\t\t// Dispatch events before and after updating the activity's 'is_done' status\n\t\tEvent::dispatch('activity.update.before', $id);\n\t\t$this->activityRepository->update(['is_done' => request('is_done')], $id);\n\t\tEvent::dispatch('activity.update.after', $id);\n\n\t\t// Increment the count of successful updates\n\t\t$successCount++;\n\t}\n\n\t// Return a JSON response indicating success or failure based on the count of successful updates\n\tif ($successCount > 0) {\n\t\treturn response()->json(['success' => true,'message' => trans('admin::app.activities.mass-update-success', ['count' => $successCount])]);\n\t} else {\n\t\treturn response()->json(['success' => false,'message' => trans('admin::app.activities.mass-update-failure')]);\n\t}\n}", "CodeBleu_score": 38.42605871841503}, {"code": "<?\npublic function massUpdate(){\n\trequest('activities');\n$updatesCount = 0;\n\nforeach ($activityIds as $activityId) {\nEvent::dispatch('activity.update.before', $activityId);\n\n$activity = $this->activityRepository->update(['is_done' => 1], $activityId);\n\nEvent::dispatch('activity.update.after', $activity);\n\n$updatesCount++;\n}\n\nif ($updatesCount > 0) {\nreturn response()->json([\n'message' => trans('admin::app.activities.update-success', ['type' => trans('admin::app.activities.done')]),\n]);\n} else {\nreturn response()->json([\n'message' => trans('admin::app.activities.update-failed'),\n]);\n}\n}", "CodeBleu_score": 55.19360801324421}, {"code": "<?\npublic function massUpdate(){\n\t request('ids');\n$isDone = request('is_done');\n$count = 0;\n\nforeach ($activityIds as $activityId) {\n\nEvent::dispatch('activity.update.before', $activityId);\n\n$this->activityRepository->update(['is_done' => $isDone], $activityId);\n\nEvent::dispatch('activity.update.after', $activityId);\n\n$count++;\n}\n\nreturn response()->json([\n'message' => trans('admin::app.activities.mass-update-success', ['count' => $count]),\n]);\n}", "CodeBleu_score": 37.77130160660837}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t$count = 0;\n\nforeach (request('rows') as $activityId) {\nEvent::dispatch('activity.delete.before', $activityId);\n\n$this->activityRepository->delete($activityId);\n\nEvent::dispatch('activity.delete.after', $activityId);\n\n$count++;\n}\n\nif (!$count) {\nreturn response()->json([\n'message' => trans('admin::app.activities.mass-destroy-failed'),\n], 400);\n}\n\nreturn response()->json([\n'message' => trans('admin::app.activities.mass-destroy-success'),\n]);\n}", "CodeBleu_score": 52.038842692940925}, {"code": "<?\n public function massDestroy(){\n\t $count = 0;\n foreach (request('rows') as $activityId) {\n Event::dispatch('activity.delete.before', $activityId);\n $this->activityRepository->delete($activityId);\n Event::dispatch('activity.delete.after', $activityId);\n $count++;\n }\n if (!$count) {\n return response()->json([\n'message' => trans('admin::app.activities.mass-destroy-failed'),\n ], 400);\n }\n return response()->json([\n'message' => trans('admin::app.activities.mass-destroy-success'),\n ]);\n }", "CodeBleu_score": 52.143670076363236}, {"code": "<?\n public function massDestroy(){\n\t", "CodeBleu_score": 0.9090909090909091}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\trds = $this->dashboardHelper->getCards(); // Get current cards\n\n foreach ($cards as $key => $card) { // Iterate through cards\n foreach (request('data') as $data) { // Iterate through request data\n if ($card['id'] === $data['id']) { // Check if card ID matches request data\n $cards[$key]['selected'] = $data['selected']; // Update'selected' status\n }\n }\n }\n\n return response()->json($cards); // Return updated cards as JSON response\n }", "CodeBleu_score": 40.29032718510158}, {"code": "<?\n public function updateCards(){\n\trds = $this->dashboardHelper->getCards();\n $requestData = request()->all();\n foreach ($requestData as $key => $value) {\n foreach ($cards as $card) {\n if ($card['id'] == $key) {\n $card['selected'] = $value;\n }\n }\n }\n return response()->json($cards);\n }", "CodeBleu_score": 38.48514159188742}, {"code": "<?\n public function updateCards(){\n\trds = $this->dashboardHelper->getCards(); // Retrieve the current cards\n $selectedCards = request('selectedCards'); // Retrieve the selected cards from the request data\n\n foreach ($cards as $key => $card) {\n if (in_array($card['id'], $selectedCards)) {\n $cards[$key]['selected'] = true; // Update the selected status of the card\n } else {\n $cards[$key]['selected'] = false; // Update the selected status of the card\n }\n }\n\n return response()->json($cards); // Return the updated cards as a JSON response\n }", "CodeBleu_score": 40.0727577851263}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t\t$this->validate(request(), [\n\t\t'slug' =>'required|alpha_dash|unique:core_configurations,slug',\n\t\t'value' =>'required|json',\n\t]);\n\n\tEvent::dispatch('admin.configuration.create.before');\n\n\t$this->configurationRepository->create(request()->all());\n\n\tEvent::dispatch('admin.configuration.create.after');\n\n\tsession()->flash('success', trans('admin::app.response.create-success', ['name' => 'Configuration']));\n\n\treturn redirect()->back();\n}", "CodeBleu_score": 36.88531069236019}, {"code": "<?\npublic function store(){\n\t$this->validate(request(), [\n'slug' =>'required|string|max:255',\n'key' =>'required|string|max:255',\n'value' =>'required',\n]);\n\nEvent::dispatch(new Configuration\\Saving(request()->all()));\n\n$this->configurationRepository->create(request()->all());\n\nEvent::dispatch(new Configuration\\Saved(request()->all()));\n\nsession()->flash('success', trans('admin::app.response.create-success', ['name' => 'Configuration']));\n\nreturn redirect()->back();\n}", "CodeBleu_score": 31.38256155614578}, {"code": "<?\npublic function store(){\n\t", "CodeBleu_score": 1.1627906976744187}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t$path = request()->get('path');\n$fileName = request()->get('filename');\n$file = $this->configurationRepository->download($path, $fileName);\nreturn response()->download($file);\n}", "CodeBleu_score": 40.25561454359472}, {"code": "<?\npublic function download(){\n\t$file = request()->get('file');\n\n$path = Storage::disk('core_config')->path($file);\n\n$config = $this->configurationRepository->findOneByField('file', $file);\n\nreturn response()->download($path, $config['value']);\n}", "CodeBleu_score": 51.77750344066061}, {"code": "<?\npublic function download(){\n\t$file_path = request()->get('file_path');\n$file_name = request()->get('file_name');\n$file_path = $this->configurationRepository->getFilePath($file_path);\n\nreturn Storage::download($file_path, $file_name);\n}", "CodeBleu_score": 37.94617371023858}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tt<AdminModelSort> adminModelSortList = new ArrayList<>();\nfor (int i = 0; i < list.size(); i++) {\nAdminModelSort adminModelSort = new AdminModelSort();\nadminModelSort.setModel(list.get(i));\nadminModelSort.setType(1);\nadminModelSort.setUserId(UserUtil.getUserId());\nadminModelSort.setSort(i);\nadminModelSortList.add(adminModelSort);\n}\nadminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()).eq(AdminModelSort::getType, 1));\nadminModelSortService.saveBatch(adminModelSortList);\nreturn Result.ok();\n}", "CodeBleu_score": 68.5888063791575}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tt<AdminModelSort> modelSortList = new ArrayList<>();\nfor (int i = 0; i < list.size(); i++) {\nAdminModelSort modelSort = new AdminModelSort();\nmodelSort.setUserId(UserUtil.getUserId());\nmodelSort.setType(1);\nmodelSort.setSort(i);\nmodelSort.setModel(list.get(i));\nmodelSortList.add(modelSort);\n}\nadminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()).eq(AdminModelSort::getType, 1));\nadminModelSortService.saveBatch(modelSortList);\nreturn Result.ok();\n}", "CodeBleu_score": 66.444697276805}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tt<AdminModelSort> modelSortList = new ArrayList<>();\nfor (int i = 0; i < list.size(); i++) {\nAdminModelSort modelSort = new AdminModelSort();\nmodelSort.setModel(list.get(i));\nmodelSort.setType(1);\nmodelSort.setUserId(UserUtil.getUserId());\nmodelSort.setSort(i);\nmodelSortList.add(modelSort);\n}\nadminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()));\nadminModelSortService.saveBatch(modelSortList);\nreturn Result.ok();\n}", "CodeBleu_score": 63.875516321459045}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t (moduleSetting.getId() == null) {\n\t\treturn R.error(AdminCodeEnum.MODULE_SETTING_ID_ERROR);\n\t}\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getId());\n\tif (adminConfig == null) {\n\t\treturn R.error(AdminCodeEnum.MODULE_SETTING_ID_ERROR);\n\t}\n\tif (adminConfig.getAdminModule().equals(AdminModuleEnum.CRM.getCode())) {\n\t\treturn R.error(AdminCodeEnum.MODULE_SETTING_CRM_ERROR);\n\t}\n\tadminConfig.setStatus(moduleSetting.getStatus());\n\tadminConfigService.updateById(adminConfig);\n\treturn R.ok();\n}", "CodeBleu_score": 57.82561481815893}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t (moduleSetting.getSettingId() == null) {\n\t\treturn R.fail(AdminCodeEnum.SETTING_ID_IS_NULL.getCode(), AdminCodeEnum.SETTING_ID_IS_NULL.getMessage());\n\t}\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n\tif (adminConfig == null) {\n\t\treturn R.fail(AdminCodeEnum.ADMIN_CONFIG_NOT_FOUND.getCode(), AdminCodeEnum.ADMIN_CONFIG_NOT_FOUND.getMessage());\n\t}\n\tif (adminConfig.getAdminModule().equals(AdminModuleEnum.CRM.getModule())) {\n\t\treturn R.fail(AdminCodeEnum.CANNOT_MODIFY_CRM_MODULE.getCode(), AdminCodeEnum.CANNOT_MODIFY_CRM_MODULE.getMessage());\n\t}\n\tadminConfig.setIsHidden(moduleSetting.getIsHidden());\n\tadminConfigService.updateById(adminConfig);\n\treturn R.ok();\n}", "CodeBleu_score": 58.01008620082294}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t(moduleSetting.getSettingId() == null) {\nreturn Result.error(AdminCodeEnum.MODULE_SETTING_ID_IS_NULL.getCode(), AdminCodeEnum.MODULE_SETTING_ID_IS_NULL.getMessage());\n}\n\nif (moduleSetting.getStatus() == null) {\nreturn Result.error(AdminCodeEnum.MODULE_SETTING_STATUS_IS_NULL.getCode(), AdminCodeEnum.MODULE_SETTING_STATUS_IS_NULL.getMessage());\n}\n\nAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\nif (adminConfig == null) {\nreturn Result.error(AdminCodeEnum.MODULE_SETTING_NOT_FOUND.getCode(), AdminCodeEnum.MODULE_SETTING_NOT_FOUND.getMessage());\n}\n\nif (adminConfig.getModule() == AdminModuleEnum.CRM.getModule()) {\nreturn Result.error(AdminCodeEnum.MODULE_SETTING_CANNOT_CHANGE_CRM.getCode(), AdminCodeEnum.MODULE_SETTING_CANNOT_CHANGE_CRM.getMessage());\n}\n\nadminConfig.setStatus(moduleSetting.getStatus());\nadminConfigService.updateById(adminConfig);\n\nreturn Result.ok();\n}", "CodeBleu_score": 59.56005981626109}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(customKey);\n if (userConfig == null) {\n userConfig = new AdminUserConfig();\n userConfig.setKey(customKey).setValue(json.toJSONString());\n adminUserConfigService.save(userConfig);\n } else {\n userConfig.setValue(json.toJSONString());\n adminUserConfigService.updateById(userConfig);\n }\n return Result.ok();\n }", "CodeBleu_score": 65.29006806211119}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(customKey);\n if (userConfig == null) {\n return Result.ok(new JSONArray());\n }\n return Result.ok(JSON.parseArray(userConfig.getValue()));\n }", "CodeBleu_score": 38.38160419513558}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\tAdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(customKey);\nif (userConfig == null) {\nAdminUserConfig adminUserConfig = new AdminUserConfig();\nadminUserConfig.setName(customKey);\nadminUserConfig.setValue(json.toJSONString());\nadminUserConfigService.save(adminUserConfig);\n} else {\nuserConfig.setValue(json.toJSONString());\nadminUserConfigService.updateById(userConfig);\n}\nreturn Result.ok();\n}", "CodeBleu_score": 61.91508728954969}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\tAdminUser adminUser = adminUserService.getById(userId);\nif (adminUser == null) {\nreturn R.error(AdminCodeEnum.ADMIN_USER_NOT_EXIST);\n}\nString deptName = deptService.getNameByDeptId(adminUser.getDeptId());\nadminUser.setDeptName(deptName);\nadminUser.setPassword();\nadminUser.setSalt(null);\nreturn R.ok(adminUser);\n}", "CodeBleu_score": 50.84320138368184}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\tAdminUser user = adminUserService.getById(userId);\nif (user == null) {\nreturn R.error(AdminCodeEnum.ADMIN_USER_NOT_EXIST);\n}\nString deptName = deptService.getNameByDeptId(user.getDeptId());\nuser.setDeptName(deptName);\nuser.setPassword(null);\nuser.setSalt(null);\nreturn R.ok(user);\n}", "CodeBleu_score": 52.21989524142234}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\tAdminUser adminUser = adminUserService.getById(userId);\nif (adminUser == null) {\nreturn R.error(AdminCodeEnum.ADMIN_USER_NOT_EXIST);\n}\nString deptName = deptService.getNameByDeptId(adminUser.getDeptId());\nadminUser.setDeptName(deptName);\nadminUser.setPassword();\nadminUser.setSalt(null);\nreturn R.ok(adminUser);\n}", "CodeBleu_score": 50.84320138368184}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t\nAdminUser user = adminUserService.getById(UserUtil.getUserId());\nif (user == null) {\nthrow new NoLoginException();\n}\nAdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(\"readNotice\");\nif (userConfig!= null) {\nuserConfig.setStatus(1);\nadminUserConfigService.updateById(userConfig);\n} else {\nAdminUserConfig adminUserConfig = new AdminUserConfig();\nadminUserConfig.setUserId(user.getUserId());\nadminUserConfig.setStatus(1);\nadminUserConfig.setName(\"readNotice\");\nadminUserConfigService.save(adminUserConfig);\n}\nreturn R.ok();\n}", "CodeBleu_score": 40.40514100879884}, {"code": " public Result readNotice() {\n\t\n//        // Get the user ID\n//        Long userId = UserUtil.getUserId();\n//\n//        // Check if there are multiple \"readNotice\" entries for the user\n//        List<AdminUserConfig> readNoticeEntries = adminUserConfigService.queryUserConfigByName(\"readNotice\");\n//\n//        if (readNoticeEntries.size() > 1) {\n//            // Update the status to 1 for all matching entries\n//            for (AdminUserConfig entry : readNoticeEntries) {\n//                if (entry.getUserId().equals(userId)) {\n//                    entry.setStatus(1);\n//                    adminUserConfigService.updateById(entry);\n//                }\n//            }\n//        } else {\n//            // Create a new \"readNotice\" entry with status 1 and save it\n//            AdminUserConfig readNoticeEntry = new AdminUserConfig();\n//            readNoticeEntry.setName(\"readNotice\");\n//            readNoticeEntry.setUserId(userId);\n//            readNoticeEntry.setStatus(1);\n//            adminUserConfigService.save(readNoticeEntry);\n//        }\n//\n//        return R.ok();\n//    }", "CodeBleu_score": 0.7524317810107344}, {"code": " public Result readNotice() {\n\t\nAdminUser user = adminUserService.getById(UserUtil.getUserId());\nif (user == null) {\nthrow new NoLoginException();\n}\nAdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(\"readNotice\");\nif (userConfig == null) {\nuserConfig = new AdminUserConfig();\nuserConfig.setUserId(user.getUserId());\nuserConfig.setName(\"readNotice\");\nuserConfig.setStatus(1);\nuserConfigService.save(userConfig);\n} else {\nuserConfig.setStatus(1);\nuserConfigService.updateById(userConfig);\n}\nreturn R.ok();\n}", "CodeBleu_score": 33.322537482491214}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\tAdminConfig adminConfig = adminConfigMapper.selectOne(new QueryWrapper<AdminConfig>().eq(\"name\", \"companyInfo\"));\n\tif (adminConfig == null) {\n\t\tadminConfig = new AdminConfig();\n\t\tadminConfig.setName(\"companyInfo\");\n\t\tadminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n\t\tadminConfig.setUpdateTime(System.currentTimeMillis());\n\t\tadminConfig.setCreateTime(System.currentTimeMillis());\n\t\tadminConfigMapper.insert(adminConfig);\n\t} else {\n\t\tadminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n\t\tadminConfig.setUpdateTime(System.currentTimeMillis());\n\t\tadminConfigMapper.updateById(adminConfig);\n\t}\n}", "CodeBleu_score": 51.82901721764883}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\tAdminConfig companyConfig = query().eq(\"name\", \"companyInfo\").one();\nif (companyConfig == null) {\ncompanyConfig = new AdminConfig();\ncompanyConfig.setName(\"companyInfo\");\ncompanyConfig.setValue(JSON.toJSONString(adminCompanyBO));\n} else {\ncompanyConfig.setValue(JSON.toJSONString(adminCompanyBO));\n}\nupdate(companyConfig);\n}", "CodeBleu_score": 41.22633897527707}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\tAdminConfig config = query().eq(\"name\", \"companyInfo\").one();\n\tif (config == null) {\n\t\tconfig = new AdminConfig();\n\t\tconfig.setName(\"companyInfo\");\n\t\tconfig.setValue(JSON.toJSONString(adminCompanyBO));\n\t\tconfig.setCreateUserId(UserUtil.getCurrentUserId());\n\t\tconfig.setUpdateUserId(UserUtil.getCurrentUserId());\n\t\tconfig.save();\n\t} else {\n\t\tconfig.setValue(JSON.toJSONString(adminCompanyBO));\n\t\tconfig.setUpdateUserId(UserUtil.getCurrentUserId());\n\t\tconfig.update();\n\t}\n}", "CodeBleu_score": 41.536832359865194}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\tString companyKey = \"companyInfo\";\nAdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\" limit 1\").one();\nif (adminConfig == null) {\nadminConfig = new AdminConfig();\nadminConfig.setName(companyKey);\nadminConfig.setStatus(1);\nadminConfig.setDescription(\"\u4f01\u4e1aLOGO\u914d\u7f6e\");\n}\nreturn JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n}", "CodeBleu_score": 63.89312029038267}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tString companyKey = \"companyInfo\";\n\tAdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\" limit 1\").one();\n\tif (adminConfig == null) {\n\t\tadminConfig = new AdminConfig();\n\t\tadminConfig.setName(companyKey);\n\t\tadminConfig.setStatus(1);\n\t\tadminConfig.setDescription(\"\u4f01\u4e1aLOGO\u914d\u7f6e\");\n\t}\n\treturn JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n}", "CodeBleu_score": 63.273974068867666}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminConfig adminConfig = query().eq(\"name\", \"companyInfo\").one();\n\tif (adminConfig == null) {\n\t\treturn new AdminCompanyBO();\n\t}\n\treturn JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n}", "CodeBleu_score": 30.481651900670272}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\tList<AdminConfig> adminConfigList = new ArrayList<>();\n for (int i = 0; i < stringList.size(); i++) {\n AdminConfig adminConfig = new AdminConfig();\n adminConfig.setName(logConfigName);\n adminConfig.setStatus(1);\n adminConfig.setSettingId(i);\n adminConfig.setValue(stringList.get(i));\n adminConfig.setDescription(\\\"\u6b22\u8fce\u8bed\\\" + (i + 1));\n adminConfigList.add(adminConfig);\n }\n remove(new QueryWrapper<AdminConfig>().eq(\\\"name\\\", logConfigName));\n saveBatch(adminConfigList);\n }", "CodeBleu_score": 41.93863714372953}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t//    // Remove existing configurations with the specified name\n//    removeConfigByName(logConfigName);\n//\n//    // Create AdminConfig objects for each string and set properties\n//    List<AdminConfig> configList = new ArrayList<>();\n//    for (String str : stringList) {\n//        AdminConfig config = new AdminConfig();\n//        config.setName(logConfigName);\n//        config.setStatus(1);\n//        config.setDescription(\"\u6b22\u8fce\u8bed\");\n//        config.setValue(str);\n//        configList.add(config);\n//    }\n//\n//    // Save the new list of configurations in batch\n//    saveBatch(configList);\n }", "CodeBleu_score": 4.1885263758169895}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t/     // remove existing configurations\n//     removeLogWelcomeSpeech();\n//\n//     // create AdminConfig objects for each string\n//     List<AdminConfig> adminConfigList = new ArrayList<>();\n//     stringList.forEach(string -> {\n//         AdminConfig adminConfig = new AdminConfig();\n//         adminConfig.setName(logConfigName);\n//         adminConfig.setValue(string);\n//         adminConfigList.add(adminConfig);\n//     });\n//\n//     // save new configurations in batch\n//     saveBatch(adminConfigList);\n }", "CodeBleu_score": 4.19035078548372}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t//    if (adminInitDataBO.getUserName() == null || adminInitDataBO.getUserName().isEmpty()) {\n//        throw new BusinessException(AdminErrorCode.USER_NAME_IS_EMPTY);\n//    }\n//    if (adminInitDataBO.getPassword() == null || adminInitDataBO.getPassword().isEmpty()) {\n//        throw new BusinessException(AdminErrorCode.PASSWORD_IS_EMPTY);\n//    }\n//    AdminUser adminUser = adminUserService.queryUserByUserName(adminInitDataBO.getUserName());\n//    if (adminUser == null) {\n//        throw new BusinessException(AdminErrorCode.USER_NOT_EXIST);\n//    }\n//    String password = (adminInitDataBO.getPassword(), adminUser.getSalt());\n//    if (!password.equals(adminUser.getPassword())) {\n//        throw new BusinessException(AdminErrorCode.PASSWORD_IS_ERROR);\n//    }\n//    String accessCode = UUID.randomUUID().toString().replace(\"-\", \"\");\n//    String key = RedisKey.ADMIN_ACCESS_CODE + accessCode;\n//    redisTemplate.opsForValue().set(key, adminUser.getUserId(), 10, TimeUnit.MINUTES);\n//    return accessCode;\n}", "CodeBleu_score": 1.5532064197863735}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString password = ();\n\tString username = adminInitDataBO.getUsername();\n\tString salt = adminInitDataBO.getSalt();\n\tString passwordHash = adminInitDataBO.getPasswordHash();\n\tif (password.equals(passwordHash)) {\n\t\treturn password;\n\t}\n\tthrow new RuntimeException(String.format(\"Invalid password for user %s\", username));\n}", "CodeBleu_score": 21.310793276608088}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t//    String username = adminInitDataBO.getUsername();\n//    String password = ();\n//    String salt = adminInitDataBO.getSalt();\n//    String encryptedPassword = EncryptUtil.encrypt(password, salt);\n//    AdminUser adminUser = adminUserService.lambdaQuery().eq(AdminUser::getUsername, username).last(\" limit 1\").one();\n//    if (adminUser == null) {\n//        throw new ServiceException(AdminErrorCode.USER_NOT_EXIST);\n//    }\n//    if (!adminUser.getPassword().equals(encryptedPassword)) {\n//        throw new ServiceException(AdminErrorCode.PASSWORD_ERROR);\n//    }\n//    String code = UUID.randomUUID().toString().replace(\"-\", \"\");\n//    redisService.set(AdminConst.ADMIN_TOKEN_PREFIX + code, adminUser.getUserId().toString(), 10, TimeUnit.MINUTES);\n//    return code;\n}", "CodeBleu_score": 1.5532064197863735}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t\tLong userId = UserUtil.getUserId();\n\tString key = AdminCacheKey.UNAUTHORIZED_MENU_URL_CACHE_KEY + userId;\n\tList<String> unauthorizedMenuUrls = BaseUtil.getRedis().lrange(key, 0, -1);\n\treturn!unauthorizedMenuUrls.contains(INIT_AUTH_URL);\n}", "CodeBleu_score": 45.78286902533016}, {"code": "private boolean verifyInitAuth(){\n\tString userId = UserUtil.getUserId();\nString key = AdminCacheKey.ADMIN_INIT_AUTH_CACHE_KEY + userId;\nList<String> unauthorizedUrls = BaseUtil.getRedis().lrange(key, 0, -1);\nreturn unauthorizedUrls.contains(INIT_AUTH_URL);\n}", "CodeBleu_score": 44.64164193898485}, {"code": "private boolean verifyInitAuth(){\n\t\tLong userId = UserUtil.getUserId();\n\tString cacheName = AdminCacheKey.INIT_AUTH_CACHE_KEY + userId;\n\tList<String> initAuthList = BaseUtil.getRedis().lrange(cacheName, 0, -1);\n\treturn!initAuthList.contains(INIT_AUTH_URL);\n}", "CodeBleu_score": 42.3866932085773}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\tif (roleId == null || menuIdList.size() == 0) {\nreturn;\n}\nList<AdminRoleMenu> adminRoleMenuList = new ArrayList<>();\nfor (Integer menuId : menuIdList) {\nAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\nadminRoleMenu.setRoleId(roleId);\nadminRoleMenu.setMenuId(menuId);\nadminRoleMenuList.add(adminRoleMenu);\n}\nbaseMapper.saveBatch(adminRoleMenuList);\n}", "CodeBleu_score": 66.12561039117534}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\tList<AdminRoleMenu> adminRoleMenuList = new ArrayList<>();\nfor (Integer menuId : menuIdList) {\nAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\nadminRoleMenu.setRoleId(roleId);\nadminRoleMenu.setMenuId(menuId);\nadminRoleMenuList.add(adminRoleMenu);\n}\nbaseMapper.saveBatch(adminRoleMenuList);\n}", "CodeBleu_score": 66.82435283832655}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\tList<AdminRoleMenu> list = new ArrayList<>();\nfor (Integer menuId : menuIdList) {\nAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\nadminRoleMenu.setRoleId(roleId);\nadminRoleMenu.setMenuId(menuId);\nlist.add(adminRoleMenu);\n}\nbaseMapper.saveBatch(list);\n}", "CodeBleu_score": 59.469014400080376}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\tString indexAliases = getIndexAliases(SYS_LOG_TYPE);\ntry {\nMap<String, Object> sourceMap = BeanUtil.beanToMap(sysLog);\nString createTime = DateUtil.formatDateTime(sysLog.getCreateTime());\nsourceMap.put(\"createTime\", createTime);\nsourceMap.remove(\"id\");\nIndexRequest indexRequest = new IndexRequest(indexAliases).source(sourceMap);\nIndexResponse indexResponse = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\nlog.info(\"saveSysLog indexResponse: {}\", indexResponse);\n} catch (IOException e) {\nlog.error(\"saveSysLog error: {}\", e.getMessage());\n}\n}", "CodeBleu_score": 54.45735059944244}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t\n//    String indexAliases = getIndexAliases(SYS_LOG_TYPE);\n//    if (!indexExists(indexAliases)) {\n//        createIndex(indexAliases, SYS_LOG_INDEX_SOURCE);\n//    }\n//    Map<String, Object> source = BeanUtil.beanToMap(sysLog);\n//    source.put(\"createTime\", DateUtil.formatDateTime(sysLog.getCreateTime()));\n//    source.remove(\"id\");\n//    IndexRequest indexRequest = new IndexRequest(indexAliases).source(source);\n//    try {\n//        IndexResponse indexResponse = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n//        log.info(\"Saved log to Elasticsearch: {}\", indexResponse.getId());\n//    } catch (IOException e) {\n//        log.error(\"Error saving log to Elasticsearch: {}\", e.getMessage());\n//    }\n//}", "CodeBleu_score": 2.412204635626008}, {"code": "public void saveSysLog(SysLog sysLog) {\n\ttry {\nString indexAliases = getIndexAliases(SYS_LOG_TYPE);\nIndexRequest indexRequest = new IndexRequest(indexAliases);\nMap<String, Object> sourceMap = BeanUtil.beanToMap(sysLog);\nString createTime = DateUtil.formatDateTime(sysLog.getCreateTime());\nsourceMap.put(\"createTime\", createTime);\nsourceMap.remove(\"id\");\nindexRequest.source(sourceMap);\nIndexResponse indexResponse = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\nlog.info(\"saveSysLog result: \" + indexResponse.getResult());\n} catch (IOException e) {\nlog.error(\"saveSysLog error: \", e);\n}\n}", "CodeBleu_score": 51.47513112419501}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t", "CodeBleu_score": 2.165507622947592}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t", "CodeBleu_score": 2.165507622947592}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t", "CodeBleu_score": 2.165507622947592}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\n\t\thttps.get(url, response => {\n\t\t\tresponse.pipe(file);\n\n\t\t\tfile.on('finish', () => {\n\t\t\t\tfile.close();\n\t\t\t\tresolve();\n\t\t\t});\n\t\t}).on('error', error => {\n\t\t\tfs.unlink(dest, () => {\n\t\t\t\treject(error);\n\t\t\t});\n\t\t});\n\t});\n}", "CodeBleu_score": 50.826154058620276}, {"code": "async function downloadFile(url, dest){\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\tconst request = https.get(url, response => {\n\t\t\tresponse.pipe(file);\n\t\t\tfile.on('finish', () => {\n\t\t\t\tfile.close();\n\t\t\t\tresolve();\n\t\t\t});\n\t\t});\n\t\trequest.on('error', error => {\n\t\t\tfs.unlink(dest, () => {\n\t\t\t\treject(error);\n\t\t\t});\n\t\t});\n\t});\n}", "CodeBleu_score": 52.86379608674232}, {"code": "async function downloadFile(url, dest){\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps.get(url, (response) => {\n\t\t\tresponse.pipe(file);\n\t\t\tfile.on('finish', () => {\n\t\t\t\tfile.close();\n\t\t\t\tresolve();\n\t\t\t});\n\t\t}).on('error', (error) => {\n\t\t\tfs.unlink(dest, () => {\n\t\t\t\treject(error);\n\t\t\t});\n\t\t});\n\t});\n}", "CodeBleu_score": 54.748838834416546}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\tyId(module.getId())\n.filter(m ->!circularDependencyCheckSet.contains(m.getId()))\n.doOnNext(circularDependencyCheckSet::add)\n.flatMapMany(m -> getDependentModulesFromDsl(m.getLiveApplicationDsl()))\n.onErrorContinue((e, i) -> log.warn(\"get dependent modules on error continue, {} \", e.getMessage()))\n.expandDeep(m -> getDependentModules(m, circularDependencyCheckSet));\n}", "CodeBleu_score": 63.76275046484503}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\tyId(module.getId())\n.flatMap(application -> {\n if (application.getId() == null) {\n return Mono.empty();\n }\n if (circularDependencyCheckSet.contains(application.getId())) {\n return Mono.empty();\n }\n circularDependencyCheckSet.add(application.getId());\n return Mono.just(application);\n })\n.onErrorContinue((e, i) -> log.warn(\\\"get dependent modules on error continue, {}\\\", e.getMessage()))\n.expandDeep(application -> getDependentModules(application, circularDependencyCheckSet));\n }", "CodeBleu_score": 52.39832910639004}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\tDependencyCheckSet.contains(module.getId())) {\n return Flux.empty();\n }\n circularDependencyCheckSet.add(module.getId());\n return repository.findByIdIn(Lists.newArrayList(module.getDependentModules()));\n }", "CodeBleu_score": 42.608745198082424}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t(map!= null) {\nfor (Map.Entry<?,?> entry : map.entrySet()) {\nObject value = entry.getValue();\nif (value instanceof Map<?,?>) {\ndoGetDependentModules((Map<?,?>) value, dependentModuleIds);\n} else if (value instanceof List<?>) {\ndoGetDependentModules((List<?>) value, dependentModuleIds);\n} else if (value instanceof String) {\nString componentType = (String) entry.getKey();\nif (StringUtils.equalsIgnoreCase(\\\"module\\\", componentType)) {\nString appId = (String) value;\nif (StringUtils.isNotBlank(appId)) {\ndependentModuleIds.add(appId);\n}\n}\n}\n}\n}\n}", "CodeBleu_score": 34.818007136132614}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t(map == null) {\nreturn;\n}\nfor (Map.Entry<?,?> entry : map.entrySet()) {\nObject value = entry.getValue();\nif (value instanceof Map<?,?>) {\ndoGetDependentModules((Map<?,?>) value, dependentModuleIds);\n} else if (value instanceof List<?>) {\nfor (Object listValue : (List<?>) value) {\nif (listValue instanceof Map<?,?>) {\ndoGetDependentModules((Map<?,?>) listValue, dependentModuleIds);\n}\n}\n} else if (value instanceof String && StringUtils.isNotBlank((String) value) && entry.getKey().equals(\\\"type\\\")) {\nif (((String) value).equals(\\\"module\\\")) {\ndependentModuleIds.add((String) entry.getValue());\n}\n}\n}\n}", "CodeBleu_score": 30.07154968083548}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t", "CodeBleu_score": 7.129053472184221}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\tead the image data from the DataBuffer.\n\tBufferedImage image = ImageIO.read(dataBuffer.asInputStream());\n\tif (image == null) {\n\t\tthrow new IOException(\\\"Failed to read image\\\");\n\t}\n\t// Release the DataBuffer.\n\tDataBufferUtils.release(dataBuffer);\n\t// Create a thumbnail if the createThumbnail flag is true.\n\tif (createThumbnail) {\n\t\timage = createThumbnail(image);\n\t}\n\t// Convert the image to JPEG format.\n\tByteArrayOutputStream out = new ByteArrayOutputStream();\n\tImageIO.write(image, \\\"jpeg\\\", out);\n\tbyte[] imageData = out.toByteArray();\n\t// Create an Asset object with the processed image data and content type.\n\tAsset asset = new Asset();\n\tasset.setData(imageData);\n\tasset.setContentType(MediaType.IMAGE_JPEG.toString());\n\treturn asset;\n}", "CodeBleu_score": 41.76637296303872}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\tead the image data from the DataBuffer\n\nBufferedImage srcImage = ImageIO.read(dataBuffer.asInputStream());\n\n// If the createThumbnail flag is true, resize the image to the configured thumbnail dimension\n\nif (createThumbnail) {\n\nint thumbNailPhotoDimension = this.thumbNailPhotoDimension.get();\n\nsrcImage = resizeImage(srcImage, thumbNailPhotoDimension, thumbNailPhotoDimension);\n\n}\n\n// Create a new ByteArrayOutputStream to write the resized image data to\n\nByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n// Write the resized image data to the ByteArrayOutputStream in JPEG format\n\nImageIO.write(srcImage, \\\"jpg\\\", baos);\n\n// Convert the resized image data to a DataBuffer\n\nDataBuffer resizedDataBuffer = new DefaultDataBufferFactory().wrap(baos.toByteArray());\n\n// Create a new Asset object with the resized image data and content type\n\nAsset asset = new Asset();\n\nasset.setData(resizedDataBuffer);\n\nasset.setContentType(srcContentType.toString());\n\n// Release the DataBuffer after processing\n\nDataBufferUtils.release(dataBuffer);\n\nreturn asset;\n}", "CodeBleu_score": 34.821374159384085}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\the reason we restrict file types here is to avoid having to deal with dangerous image types such as SVG, which can have arbitrary HTML/JS inside of them.\nfinal MediaType contentType = filePart.headers().getContentType();\nif (contentType == null ||!ALLOWED_CONTENT_TYPES.contains(contentType)) {\nreturn Mono.error(new BizException(BizError.INVALID_PARAMETER, \"INCORRECT_IMAGE_TYPE\"));\n}\n\nfinal Flux<DataBuffer> contentCache = filePart.content().cache();\n\nreturn contentCache.count()\n.defaultIfEmpty(0L)\n.flatMap(count -> {\n// Default implementation for the BufferFactory used breaks down the FilePart into chunks of 4KB.\n// So we multiply the count of chunks with 4 to get an estimate on the file size in KB.\nif (4 * count > maxFileSizeKB) {\nreturn Mono.error(new BizException(BizError.PAYLOAD_TOO_LARGE, \"PAYLOAD_TOO_LARGE\", maxFileSizeKB));\n}\nreturn DataBufferUtils.join(contentCache);\n})\n.flatMap(dataBuffer -> {\ntry {\nreturn repository.save(createAsset(dataBuffer, contentType, isThumbnail));\n} catch (IOException e) {\nlog.error(\"failed to upload image\", e);\nreturn Mono.error(new BizException(BizError.INVALID_PARAMETER, \"IMAGE_PARSE_ERROR\"));\n}\n});\n}", "CodeBleu_score": 35.44338789658287}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\trn getById(assetId)\n\t\t\t.flatMap(asset -> {\n\t\t\t\tServerHttpResponse response = exchange.getResponse();\n\t\t\t\tresponse.setStatusCode(HttpStatus.OK);\n\t\t\t\tif (asset.getContentType()!= null) {\n\t\t\t\t\tresponse.getHeaders().setContentType(asset.getContentType());\n\t\t\t\t}\n\t\t\t\treturn response.writeWith(Mono.just(asset.getData()));\n\t\t\t});\n}", "CodeBleu_score": 44.9626354237741}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\tn getById(assetId)\n.flatMap(asset -> {\nServerHttpResponse response = exchange.getResponse();\nresponse.setStatusCode(HttpStatus.OK);\nif (asset.getContentType()!= null) {\nresponse.getHeaders().setContentType(asset.getContentType());\n}\nreturn response.writeWith(Flux.just(asset.getData()));\n});\n}", "CodeBleu_score": 43.984033800684166}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\trn getById(assetId)\n\t\t\t.flatMap(asset -> {\n\t\t\t\tServerHttpResponse response = exchange.getResponse();\n\t\t\t\tresponse.setStatusCode(HttpStatus.OK);\n\t\t\t\tif (asset.getContentType()!= null) {\n\t\t\t\t\tresponse.getHeaders().setContentType(asset.getContentType());\n\t\t\t\t}\n\t\t\t\treturn response.writeWith(Flux.just(asset.getData()));\n\t\t\t});\n}", "CodeBleu_score": 44.759705611736614}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\tonConfig.getWorkspaceMode() == WorkspaceMode.SAAS? Flux.empty() : organizationService.getByMode(WorkspaceMode.ENTERPRISE)\n.flatMapIterable(organization -> organization.getAuthConfigs()\n.stream()\n.map(abstractAuthConfig -> new FindAuthConfig(abstractAuthConfig, organization))\n.collect(Collectors.toList()));\n}", "CodeBleu_score": 39.3317777644678}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\tonConfig.getWorkspaceMode() == WorkspaceMode.ENTERPRISE? organizationService.getEnterpriseOrganizations()\n.flatMapIterable(organization -> organization.getAuthConfigs()\n.stream()\n.map(abstractAuthConfig -> new FindAuthConfig(abstractAuthConfig, organization))\n.collect(Collectors.toList())\n) : Flux.empty();\n}", "CodeBleu_score": 42.01048889160034}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\tonfig.getWorkspaceMode() == WorkspaceMode.SAAS) {\nreturn Flux.empty();\n}\n\nreturn organizationService.getByMode(WorkspaceMode.ENTERPRISE)\n.flatMapIterable(organization -> organization.getAuthConfigs()\n.stream()\n.map(abstractAuthConfig -> new FindAuthConfig(abstractAuthConfig, organization))\n.collect(Collectors.toList()));\n}", "CodeBleu_score": 48.1976842194267}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\tMongockSpring5.MongockApplicationRunner mongockApplicationRunner = MongockSpring5.builder(springContext)\n.setDriver(new SpringDataMongoV3Driver(mongoTemplate))\n.setScanPackage(\"com.openblocks.domain.configurations\")\n.setWriteConcern(WriteConcern.MAJORITY)\n.setReadConcern(ReadConcern.MAJORITY)\n.setReadPreference(ReadPreference.primary())\n.build();\nreturn mongockApplicationRunner;\n}", "CodeBleu_score": 43.22285643147663}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\tMongockSpring5.MongockApplicationRunner mongockApplicationRunner = MongockSpring5.builder(springContext)\n.setMongoTemplate(mongoTemplate)\n.setDriver(new SpringDataMongoV3Driver(mongoTemplate))\n.setChangeLogsScanPackage(\"com.openblocks.domain.configurations.db.migrations\")\n.setReadConcern(ReadConcern.MAJORITY)\n.setWriteConcern(WriteConcern.MAJORITY)\n.build();\nreturn mongockApplicationRunner;\n}", "CodeBleu_score": 45.2244918745642}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\nreturn MongockSpring5.builder()\n\n.setDriver(new SpringDataMongoV3Driver(mongoTemplate))\n\n.setDatabaseName(materialProperties.getDatabaseName())\n\n.setScanPackages(\"com.openblocks.infra.db.migrations\")\n\n.setSpringContext(springContext)\n\n.build();\n\n}", "CodeBleu_score": 19.884045233028118}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\tn new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n}", "CodeBleu_score": 25.36414360995257}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter, ReadPreference.secondaryPreferred());\n}", "CodeBleu_score": 29.14576269277288}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter, ReadPreference.secondaryPreferred());\n}", "CodeBleu_score": 29.14576269277288}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\tn libraryQueryRecordService.getLatestRecordByLibraryQueryId(libraryQueryId)\n.map(LibraryQueryRecord::getDsl)\n.switchIfEmpty(getById(libraryQueryId)\n.map(LibraryQuery::getDsl));\n}", "CodeBleu_score": 55.88980555700132}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\tn libraryQueryRecordService.getLatestRecordByLibraryQueryId(libraryQueryId)\n.map(LibraryQueryRecord::getDsl)\n.switchIfEmpty(getLiveBaseQueryByLibraryQueryId(libraryQueryId)\n.map(BaseQuery::getDsl));\n}", "CodeBleu_score": 56.96660991479114}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\tn libraryQueryRecordService.getLatestRecordByLibraryQueryId(libraryQueryId)\n.map(LibraryQueryRecord::getDsl)\n.switchIfEmpty(getById(libraryQueryId)\n.map(LibraryQuery::getDsl));\n}", "CodeBleu_score": 55.88980555700132}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t\nlog.info(\"Executing query on datasource {} with config {} and params {}\", datasource.getName(), queryConfig, requestParams);\n\n// Convert the timeout string to a duration\nDuration timeout = QueryTimeoutUtils.convertTimeoutStrToDuration(timeoutStr);\n\n// Get the datasource connection\nMono<DatasourceConnectionHolder> datasourceConnectionMono = datasourceConnectionPool.getConnection(datasource);\n\n// Execute the query\nreturn datasourceConnectionMono.flatMap(datasourceConnectionHolder -> {\n\n// Get the datasource plugin client\nDatasourcePluginClient datasourcePluginClient = this.datasourcePluginClient.getPluginClient(datasource.getType());\n\n// Execute the query\nreturn datasourcePluginClient.executeQuery(datasourceConnectionHolder, queryConfig, requestParams, timeout, queryVisitorContext);\n\n}).onErrorResume(e -> {\n\n// Handle timeout exceptions\nif (e instanceof TimeoutException) {\n\n// Map the timeout exception to a plugin exception\nPluginException pluginException = ofException(QUERY_EXECUTION_TIMEOUT, e);\n\n// Log the error\nlog.error(\"Query execution timed out\", e);\n\n// Return the error result\nreturn Mono.just(new QueryExecutionResult(List.of(), pluginException));\n\n} else if (e instanceof PluginException) {\n\n// Handle plugin exceptions\nPluginException pluginException = (PluginException) e;\n\n// Log the error\nlog.error(\"Error executing query\", e);\n\n// Return the error result\nreturn Mono.just(new QueryExecutionResult(List.of(), pluginException));\n\n} else {\n\n// Handle other exceptions\nBizException bizException = ofException(QUERY_EXECUTION_ERROR, e);\n\n// Log the error\nlog.error(\"Error executing query\", e);\n\n// Return the error result\nreturn Mono.just(new QueryExecutionResult(List.of(), bizException));\n\n}\n\n});\n\n}", "CodeBleu_score": 40.887282509909376}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t", "CodeBleu_score": 8.95524286354501}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t\n}", "CodeBleu_score": 9.014789511693758}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t       if (datasourceMetaInfoService.isJsDatasourcePlugin(datasource.getType())) {\n//            return executeByNodeJs(datasource, queryConfig, requestParams);\n//        }\n\n        QueryExecutionContext queryExecutionContext = QueryExecutionContext.builder()\n               .datasource(datasource)\n               .queryConfig(queryConfig)\n               .requestParams(requestParams)\n               .queryVisitorContext(queryVisitorContext)\n               .build();\n\n        return Mono.defer(() -> {\n            String datasourceType = datasource.getType();\n            DatasourceConnectionHolder datasourceConnectionHolder = datasourceConnectionPool.acquire(datasourceType);\n            try {\n                return Mono.just(datasourcePluginClient.execute(datasourceType, datasourceConnectionHolder.getConnection(), queryExecutionContext));\n            } catch (Exception e) {\n                log.error(\\\"query exception\\\", e);\n                return Mono.just(QueryExecutionResult.error(ofException(QUERY_EXECUTION_ERROR, \\\"QUERY_EXECUTION_ERROR\\\", e.getMessage())));\n            } finally {\n                datasourceConnectionPool.release(datasourceType, datasourceConnectionHolder);\n            }\n        });\n    }", "CodeBleu_score": 44.22498206732342}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t       log.info(\\\"Execute query locally, datasource: {}\\\", datasource.getId());\n\n        String datasourceType = datasource.getType();\n        String datasourcePluginName = datasourceMetaInfoService.getDatasourcePluginName(datasourceType);\n        DatasourceConnectionHolder connectionHolder = datasourceConnectionPool.acquire(datasource.getId(), datasourcePluginName);\n        try {\n            QueryExecutionContext queryExecutionContext = QueryExecutionContext.builder()\n                   .datasource(datasource)\n                   .queryConfig(queryConfig)\n                   .requestParams(requestParams)\n                   .queryVisitorContext(queryVisitorContext)\n                   .connectionHolder(connectionHolder)\n                   .build();\n            return Mono.just(queryExecutionContext)\n                   .flatMap(queryExecutionContext1 -> datasourcePluginClient.getQueryExecutor(datasourceType)\n                           .execute(queryExecutionContext1))\n                   .doFinally(signalType -> datasourceConnectionPool.release(datasource.getId(), datasourcePluginName));\n        } catch (Exception e) {\n            log.error(\\\"execute query locally failed\\\", e);\n            return Mono.just(QueryExecutionResult.error(ofException(QUERY_EXECUTION_ERROR, \\\"QUERY_EXECUTION_ERROR\\\", e.getMessage())));\n        }\n    }", "CodeBleu_score": 43.59940447709456}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\tget the appropriate query executor based on the datasource type\nQueryExecutor queryExecutor = datasourceMetaInfoService.getQueryExecutor(datasource.getType());\n\n// build the query execution context\nQueryExecutionContext queryExecutionContext = QueryExecutionContext.builder()\n.datasource(datasource)\n.queryConfig(queryConfig)\n.requestParams(requestParams)\n.queryVisitorContext(queryVisitorContext)\n.build();\n\n// acquire a connection from the datasource connection pool\nDatasourceConnectionHolder datasourceConnectionHolder = datasourceConnectionPool.acquire(datasource);\n\n// execute the query using the connection\nreturn Mono.defer(() -> queryExecutor.execute(datasourceConnectionHolder, queryExecutionContext))\n.onErrorMap(e -> ofException(QUERY_EXECUTION_ERROR, \\\"QUERY_EXECUTION_ERROR\\\", e.getMessage()))\n.onErrorMap(PluginException.class, pluginException -> Mono.just(QueryExecutionResult.error(pluginException)))\n.doFinally(s -> datasourceConnectionPool.release(datasourceConnectionHolder));\n}", "CodeBleu_score": 44.718823052315685}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (StringUtils.isBlank(timeoutStr)) {\nreturn DEFAULT_QUERY_TIMEOUT_MILLIS;\n}\nPair<String, String> timeoutPair = extractTimeoutValueAndUnit(timeoutStr);\nString valueStr = timeoutPair.getLeft();\nString unitStr = timeoutPair.getRight();\nif (!NumberUtils.isDigits(valueStr)) {\nthrow new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout value: \" + valueStr);\n}\nint value = Integer.parseInt(valueStr);\nif (value > MAX_QUERY_TIMEOUT_SECONDS) {\nthrow new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"Query timeout exceeds maximum allowed value: \" + value + \" seconds\");\n}\nreturn Duration.ofSeconds(value).toMillis();\n}", "CodeBleu_score": 37.52244440257796}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (StringUtils.isBlank(timeoutStr)) {\nreturn DEFAULT_QUERY_TIMEOUT_MILLIS;\n}\n\nPair<Integer, String> valueAndUnit = extractValueAndUnit(timeoutStr);\nint value = valueAndUnit.getLeft();\nString unit = valueAndUnit.getRight();\n\nif (value < 0 ||!NumberUtils.isDigits(timeoutStr)) {\nthrow new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout: \" + timeoutStr);\n}\n\nlong timeoutMillis = convertValueAndUnitToMillis(value, unit);\n\nif (timeoutMillis > MAX_QUERY_TIMEOUT_SECONDS * 1000) {\nthrow new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"Query timeout exceeds the maximum allowed value: \" + timeoutMillis + \"ms\");\n}\n\nreturn (int) timeoutMillis;\n}", "CodeBleu_score": 42.4084322944904}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\nif (StringUtils.isBlank(timeoutStr)) {\nreturn DEFAULT_QUERY_TIMEOUT_MILLIS;\n}\n\nPair<Integer, String> valueAndUnit = parseValueAndUnit(timeoutStr);\nint value = valueAndUnit.getLeft();\nString unit = valueAndUnit.getRight();\n\nif (value <= 0) {\nthrow new PluginException(QUERY_ARGUMENT_ERROR, \"Query timeout must be a positive number.\");\n}\n\nif (StringUtils.equals(unit, \"s\")) {\nreturn value * 1000;\n} else if (StringUtils.equals(unit, \"m\")) {\nreturn value * 60 * 1000;\n} else if (StringUtils.equals(unit, \"h\")) {\nreturn value * 60 * 60 * 1000;\n} else if (StringUtils.equals(unit, \"d\")) {\nreturn value * 24 * 60 * 60 * 1000;\n} else {\nthrow new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout unit: \" + unit);\n}\n}", "CodeBleu_score": 38.74733235099339}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\tst(application.getLiveApplicationDsl().getQueries())\n           .filter(queries ->!queries.isEmpty())\n           .flatMapIterable(queries -> queries)\n           .map(query -> query.getDatasourceId())\n           .distinct()\n           .collectList()\n           .flatMap(datasourceIds -> copyDatasourcesToCurrentOrganization(currentOrganizationId, datasourceIds, visitorId))\n           .map(pairs -> pairs.stream().map(pair -> Pair.of(pair.getT1(), pair.getT2())).collect(Collectors.toList()));\n}", "CodeBleu_score": 31.432846981854095}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\ttion.getLiveApplicationDsl().getQueries().stream()\n           .flatMap(query -> query.getDatasourceIds().stream())\n           .flatMap(datasourceId -> datasourceService.getById(datasourceId))\n           .collect(Collectors.toList())\n           .switchIfEmpty(ofError(TEMPLATE_NOT_CORRECT, \"TEMPLATE_NOT_CORRECT\"))\n           .map(datasource -> datasourceService.copyToOrganization(datasource, currentOrganizationId, DatasourceCreationSource.TEMPLATE, visitorId))\n           .map(datasource -> Pair.of(datasource.getDatasourceId(), datasource.getDatasourceId()))\n           .collect(Collectors.toList());\n}", "CodeBleu_score": 38.558518441750586}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\tst(application.getLiveApplicationDsl().getQueries())\n           .filter(queries -> queries.size() > 0)\n           .flatMap(queries -> {\n                List<String> datasourceIds = queries.stream()\n                       .map(Query::getDatasourceId)\n                       .collect(Collectors.toList());\n                return datasourceService.getByApplicationIds(datasourceIds)\n                       .flatMap(datasources -> {\n                            List<Mono<Datasource>> datasourceCopies = datasources.stream()\n                                   .map(datasource -> copyDatasource(currentOrganizationId, datasource, visitorId))\n                                   .collect(Collectors.toList());\n                            return Flux.zip(Flux.fromIterable(datasourceCopies))\n                                   .collectList();\n                        });\n            })\n           .map(datasources -> datasources.stream()\n                   .map(datasource -> Pair.of(datasource.getOriginalDatasourceId(), datasource.getId()))\n                   .collect(Collectors.toList()));\n}", "CodeBleu_score": 45.908150230160395}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\tervice.getById(datasourceId)\n\t\t\t.switchIfEmpty(deferredError(TEMPLATE_NOT_EXIST, \"TEMPLATE_NOT_EXIST\"))\n\t\t\t.map(datasource -> {\n\t\t\t\tDatasourceCreationSource creationSource = DatasourceCreationSource.builder()\n\t\t\t\t\t\t.creationSource(DatasourceCreationSource.CreationSource.TEMPLATE)\n\t\t\t\t\t\t.build();\n\t\t\t\tif (datasource.isSystemStatic()) {\n\t\t\t\t\treturn datasourceId;\n\t\t\t\t} else if (datasource.isLegacyQuickRestAPI() || datasource.isLegacyOpenblocksAPI()) {\n\t\t\t\t\treturn datasource.getId();\n\t\t\t\t} else {\n\t\t\t\t\tDatasource newDatasource = Datasource.builder()\n\t\t\t\t\t\t\t.organizationId(organizationId)\n\t\t\t\t\t\t\t.name(datasource.getName())\n\t\t\t\t\t\t\t.description(datasource.getDescription())\n\t\t\t\t\t\t\t.creationSource(creationSource)\n\t\t\t\t\t\t\t.build();\n\t\t\t\t\treturn datasourceService.create(newDatasource, visitorId)\n\t\t\t\t\t\t\t.map(Datasource::getId);\n\t\t\t\t}\n\t\t\t});\n}", "CodeBleu_score": 39.715411905744006}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t", "CodeBleu_score": 6.9847112172959775}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\trvice.getById(datasourceId)\n.switchIfEmpty(deferredError(TEMPLATE_NOT_EXIST, \"TEMPLATE_NOT_EXIST\"))\n.flatMap(datasource -> {\nif (DatasourceCreationSource.SYSTEM_STATIC.equals(datasource.getCreationSource())) {\nreturn Mono.just(datasourceId);\n} else if (DatasourceCreationSource.QUICK_REST_API.equals(datasource.getCreationSource())\n|| DatasourceCreationSource.OPENBLOCKS_API.equals(datasource.getCreationSource())) {\nreturn Mono.just(datasource.getId());\n} else {\nDatasource copiedDatasource = Datasource.builder()\n.id(RandomStringUtils.randomAlphanumeric(RANDOM_LENGTH))\n.organizationId(organizationId)\n.name(datasource.getName())\n.creationSource(DatasourceCreationSource.TEMPLATE)\n.build();\nreturn datasourceService.create(copiedDatasource, visitorId);\n}\n});\n}", "CodeBleu_score": 43.24923820193831}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\tturn assetService.uploadAndSaveAsset(filePart, user.getId(), \\\"profilePhoto\\\", avatarMaxSizeInKb.get())\n.flatMap(asset -> {\n if (user.getProfilePhoto()!= null) {\n return assetService.deleteAsset(user.getProfilePhoto().getId());\n }\n return Mono.just(true);\n })\n.flatMap(it -> {\n if (it) {\n user.setProfilePhoto(assetService.getAsset(filePart.filename()));\n return repository.save(user);\n }\n return Mono.just(false);\n });\n }", "CodeBleu_score": 16.115425728562283}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\tturn assetService.saveProfilePhoto(filePart, user)\n.map(asset -> {\n // Remove the previous avatar, if it exists\n if (user.getAvatar()!= null) {\n assetService.deleteAsset(user.getAvatar());\n }\n // Update the user's profile with the new avatar\n user.setAvatar(asset);\n return repository.save(user).thenReturn(true);\n })\n.switchIfEmpty(Mono.just(false));\n }", "CodeBleu_score": 20.41536203034991}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t (filePart == null) {\n return Mono.just(false);\n }\n\n String fileName = RandomStringUtils.randomAlphanumeric(10) + StringUtils.substringAfterLast(filePart.filename(), \\\".\\\");\n String fileId = UUID.randomUUID().toString();\n String filePath = \\\"/profile-photos/\\\" + fileName;\n\n return assetService.upload(filePart, filePath, asset -> {\n // If the user has a previous avatar, remove it\n if (user.getAvatar()!= null) {\n assetService.remove(user.getAvatar());\n }\n\n // Update the user's profile with the new avatar\n user.setAvatar(asset.getId());\n return repository.save(user);\n });\n }", "CodeBleu_score": 20.305221755228953}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t user = new User();\n\tuser.setName(authUser.getName());\n\tuser.setAvatar(authUser.getAvatar());\n\tuser.setState(UserState.NEW);\n\tuser.setEnabled(true);\n\tuser.setPassword(encryptionService.encrypt(authUser.getPassword()));\n\tuser.setConnections(new HashSet<>());\n\tuser.getConnections().add(new Connection(authUser.getSource(), authUser.getUid()));\n\tuser.setNewUser(true);\n\treturn create(user);\n}", "CodeBleu_score": 33.64456354237657}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tn Mono.just(new User())\n.map(user -> {\nuser.setName(authUser.getDisplayName());\nuser.setState(UserState.NEW);\nuser.setEnabled(true);\nuser.setAvatar(authUser.getAvatar());\nuser.setConnections(new HashSet<>());\nuser.getConnections().add(new Connection(authUser.getSource(), authUser.getUid()));\nuser.setNewUser(true);\nreturn user;\n})\n.flatMap(user -> {\nif (authUser.getSource().equals(AuthSourceConstants.EMAIL) && authUser.getPassword()!= null) {\nuser.setPassword(encryptionService.encrypt(authUser.getPassword()));\n}\nreturn create(user);\n});\n}", "CodeBleu_score": 37.19502176946458}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t", "CodeBleu_score": 2.545724253375511}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t this.repository.findByConnections_SourceAndConnections_RawId(AuthSourceConstants.EMAIL, email)\n.flatMap(existingUser -> {\nif (Objects.equals(user.getId(), existingUser.getId())) {\nreturn Mono.just(true);\n}\n\nif (existingUser.getConnections().stream()\n.anyMatch(connection -> connection.getSource().equals(AuthSourceConstants.EMAIL))) {\nreturn Mono.error(new BizException(BizError.USER_EMAIL_ALREADY_BOUND, \\\"USER_EMAIL_ALREADY_BOUND\\\"));\n}\n\nConnection connection = new Connection();\nconnection.setSource(AuthSourceConstants.EMAIL);\nconnection.setRawId(email);\nconnection.setAccessToken(RandomStringUtils.randomAlphanumeric(64));\nconnection.setRefreshToken(RandomStringUtils.randomAlphanumeric(64));\nconnection.setExpiresIn(0);\nconnection.setScope(AuthSourceConstants.EMAIL);\nconnection.setAuthTime(System.currentTimeMillis());\nconnection.setAuthContext(null);\n\nuser.getConnections().add(connection);\n\nreturn this.repository.save(user)\n.map(u -> true)\n.onErrorMap(DuplicateKeyException.class, e -> new BizException(BizError.USER_EMAIL_ALREADY_BOUND, \\\"USER_EMAIL_ALREADY_BOUND\\\"));\n})\n.onErrorMap(DuplicateKeyException.class, e -> new BizException(BizError.USER_EMAIL_ALREADY_BOUND, \\\"USER_EMAIL_ALREADY_BOUND\\\"));\n}", "CodeBleu_score": 22.757316699314913}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\tction connection = new Connection();\n\tconnection.setSource(AuthSourceConstants.EMAIL);\n\tconnection.setRawId(email);\n\tconnection.setDisplayName(email);\n\tuser.getConnections().add(connection);\n\treturn repository.save(user)\n\t\t\t.map(u -> true)\n\t\t\t.onErrorMap(ex -> {\n\t\t\t\tif (ex instanceof DuplicateKeyException) {\n\t\t\t\t\treturn BizException.of(BizError.EMAIL_ALREADY_BOUND);\n\t\t\t\t}\n\t\t\t\treturn ex;\n\t\t\t});\n}", "CodeBleu_score": 33.08620684179261}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t repository.findByConnections_SourceAndConnections_RawId(AuthSourceConstants.EMAIL, email)\n.flatMap(existingUser -> {\nif (existingUser!= null) {\nif (existingUser.getId().equals(user.getId())) {\nreturn Mono.just(true);\n} else {\nreturn Mono.error(new BizException(BizError.EMAIL_ALREADY_BOUND, \\\"EMAIL_ALREADY_BOUND\\\", email));\n}\n} else {\nreturn createConnection(user, email, AuthSourceConstants.EMAIL);\n}\n})\n.flatMap(saved -> {\nif (saved) {\nreturn saveUser(user);\n} else {\nreturn Mono.just(false);\n}\n});\n}", "CodeBleu_score": 24.32942851872127}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n.flatMap(user -> {\nif (!user.getPassword().equals(encryptionService.encryptPassword(oldPassword))) {\nreturn Mono.error(new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\", oldPassword));\n}\nuser.setPassword(encryptionService.encryptPassword(newPassword));\nreturn repository.save(user).thenReturn(true);\n})\n.onErrorResume(throwable -> {\nif (throwable instanceof BizException) {\nreturn Mono.error(throwable);\n}\nreturn Mono.error(new BizException(BizError.INTERNAL_SERVER_ERROR, \"INTERNAL_SERVER_ERROR\", throwable));\n});\n}", "CodeBleu_score": 32.822027255542515}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\tif (StringUtils.isEmpty(oldPassword) || StringUtils.isEmpty(newPassword)) {\nreturn ofError(BizError.INVALID_PARAMETER, \\\"INVALID_PARAMETER\\\", FieldName.PASSWORD);\n}\nreturn findById(userId)\n.flatMap(user -> {\nif (!encryptionService.isValidPassword(user.getPassword(), oldPassword)) {\nreturn ofError(BizError.INVALID_PASSWORD, \\\"INVALID_PASSWORD\\\");\n}\nuser.setPassword(encryptionService.encryptPassword(newPassword));\nreturn repository.save(user);\n})\n.then(Mono.just(true))\n.onErrorResume(throwable -> {\nif (throwable instanceof DuplicateKeyException) {\nreturn ofError(BizError.ALREADY_BIND, \\\"ALREADY_BIND\\\", FieldName.PASSWORD, \\\"\\\");\n}\nreturn Mono.error(throwable);\n});\n}", "CodeBleu_score": 23.121911147452085}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t\treturn findById(userId)\n\t\t\t.flatMap(user -> {\n\t\t\t\tif (!encryptionService.checkPassword(oldPassword, user.getPassword())) {\n\t\t\t\t\treturn Mono.error(new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\"));\n\t\t\t\t}\n\t\t\t\tString encryptedNewPassword = encryptionService.encryptPassword(newPassword);\n\t\t\t\tuser.setPassword(encryptedNewPassword);\n\t\t\t\treturn repository.save(user)\n\t\t\t\t\t\t.then(Mono.just(true))\n\t\t\t\t\t\t.onErrorResume(throwable -> {\n\t\t\t\t\t\t\tif (throwable instanceof DuplicateKeyException) {\n\t\t\t\t\t\t\t\treturn Mono.error(new BizException(BizError.DUPLICATE_PASSWORD, \"DUPLICATE_PASSWORD\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn Mono.error(throwable);\n\t\t\t\t\t\t});\n\t\t\t});\n}", "CodeBleu_score": 38.11141825526519}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\tif (orgMember == null) {\nreturn Mono.just(Collections.emptyList());\n}\nif (orgMember.isAdmin()) {\nreturn groupService.getGroups(orgMember.getOrgId(), locale).map(groups -> {\nreturn groups.stream()\n.filter(group ->!group.getId().equals(ALL_USERS_GROUP_ID))\n.filter(group ->!withoutDynamicGroups ||!group.isDynamic())\n.map(group -> {\nMap<String, String> groupMap = new HashMap<>();\ngroupMap.put(GROUP_ID_KEY, group.getId());\ngroupMap.put(GROUP_NAME_KEY, group.getName(locale));\nreturn groupMap;\n})\n.collect(Collectors.toList());\n});\n}\nreturn groupService.getDynamicGroups(orgMember.getOrgId(), userId, locale).map(groups -> {\nreturn groups.stream()\n.filter(group ->!withoutDynamicGroups ||!group.isDynamic())\n.map(group -> {\nMap<String, String> groupMap = new HashMap<>();\ngroupMap.put(GROUP_ID_KEY, group.getId());\ngroupMap.put(GROUP_NAME_KEY, group.getName(locale));\nreturn groupMap;\n})\n.collect(Collectors.toList());\n});\n}", "CodeBleu_score": 35.23155845696018}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\tif (orgMember.isAdmin()) {\nreturn orgGroupService.getGroups(orgMember.getOrgId(), locale)\n.map(groups -> groups.stream()\n.filter(group ->!group.isDynamic() ||!withoutDynamicGroups)\n.filter(group ->!group.getId().equals(ALL_USERS_GROUP_ID))\n.map(group -> Map.of(GROUP_ID_KEY, group.getId(), GROUP_NAME_KEY, group.getName()))\n.collect(Collectors.toList()));\n}\nreturn orgGroupService.getMemberGroups(orgMember.getOrgId(), userId, locale)\n.map(groups -> groups.stream()\n.filter(group ->!group.isDynamic() ||!withoutDynamicGroups)\n.filter(group ->!group.getId().equals(ALL_USERS_GROUP_ID))\n.map(group -> Map.of(GROUP_ID_KEY, group.getId(), GROUP_NAME_KEY, group.getName()))\n.collect(Collectors.toList()));\n}", "CodeBleu_score": 33.17871754660783}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\treturn orgGroupService.getGroupsForMember(orgMember.getOrgId(), orgMember.getRoleId(), withoutDynamicGroups)\n.filter(group ->!group.getId().equals(orgGroupService.getOrgAllUsersGroupId(orgMember.getOrgId())))\n.map(group -> {\nMap<String, String> groupMap = new HashMap<>();\ngroupMap.put(GROUP_ID_KEY, group.getId());\ngroupMap.put(GROUP_NAME_KEY, group.getLocalizedName(locale));\nreturn groupMap;\n})\n.collectList();\n}", "CodeBleu_score": 25.696274478209464}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\turn repository.findById(userId)\n.switchIfEmpty(Mono.just(UserStatus.builder()\n.id(userId)\n.build()))\n.map(userStatus -> userStatus.toBuilder()\n.hasShowNewUserGuidance(true)\n.build())\n.flatMap(userStatus -> mongoUpsertHelper.upsert(repository.getCollectionName(), userStatus.getId(), new Update().set(\"hasShowNewUserGuidance\", true)))\n.map(result -> true);\n}", "CodeBleu_score": 32.371403240919115}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\turn findByUserId(userId)\n.flatMap(userStatus -> {\nuserStatus.setHasShowNewUserGuidance(true);\nreturn mongoUpsertHelper.upsert(userStatus);\n})\n.map(userStatus -> true);\n}", "CodeBleu_score": 26.87320560355562}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\turn findByUserId(userId)\n.flatMap(userStatus -> {\nUpdate update = new Update();\nupdate.set(\"hasShowNewUserGuidance\", true);\nreturn mongoUpsertHelper.upsert(userStatus, update);\n})\n.map(userStatus -> true);\n}", "CodeBleu_score": 31.609126868423683}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\\\"nil predicatePartition\\\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\\\"nil predicateValue\\\")\n\t}\n\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\n\trg := rungroup.New()\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\trg.Add(func() {\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t})\n\t\t}\n\t}\n\n\trg.Wait()\n}", "CodeBleu_score": 36.70746708808424}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\\\"nil partition predicate\\\")\n\t}\n\n\tif predicateValue == nil {\n\t\tpanic(\\\"nil value predicate\\\")\n\t}\n\n\trg := rungroup.New()\n\n\tc.mu.RLock()\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\trg.Add(func() {\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t})\n\t\t}\n\t}\n\tc.mu.RUnlock()\n\n\trg.Wait()\n}", "CodeBleu_score": 37.382819303796445}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\\\"nil predicatePartition\\\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\\\"nil predicateValue\\\")\n\t}\n\n\tc.mu.RLock()\n\tdefer c.mu.RUnlock()\n\n\tif c.stop!= nil {\n\t\tc.stop()\n\t}\n\n\trg := rungroup.New()\n\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\trg.Add(func() {\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t})\n\t\t}\n\t}\n\n\trg.Wait()\n}", "CodeBleu_score": 37.6404215146034}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Floor(float64(maxItemsTotal) * averageWeightPerPartition))\n}", "CodeBleu_score": 42.78819243199846}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\treturn maxItemsTotal / averageWeightPerPartition\n}", "CodeBleu_score": 30.931659145910096}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\tmaxItemsPerPartition := int(math.Floor(float64(maxItemsTotal) * averageWeightPerPartition))\n\n\treturn maxItemsPerPartition\n}", "CodeBleu_score": 41.93435160159383}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> contributorMap = new HashMap<>();\n\tConnection connection = connectionFactory.create().block();\n\tif (connection!= null) {\n\t\tConnectionMetadata metadata = connection.getMetadata();\n\t\tif (metadata!= null) {\n\t\t\tcontributorMap.put(\\\"name\\\", metadata.getDatabaseProductName());\n\t\t\tcontributorMap.put(\\\"version\\\", metadata.getDatabaseProductVersion());\n\t\t}\n\t}\n\treturn contributorMap;\n}", "CodeBleu_score": 37.67331785124256}, {"code": "public Map<String, Object> contributorMap(){\n\tMap<String, Object> map = new HashMap<>();\nMono<Connection> connectionMono = connectionFactory.create();\nConnectionMetadata connectionMetadata = connectionMono.block().getMetadata();\nif (Objects.nonNull(connectionMetadata)) {\nmap.put(\\\"productName\\\", connectionMetadata.getDatabaseProductName());\nmap.put(\\\"productVersion\\\", connectionMetadata.getDatabaseProductVersion());\n}\nreturn map;\n}", "CodeBleu_score": 42.890341413327924}, {"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> map = new HashMap<>();\n\tMono<Connection> connectionMono = this.connectionFactory.create();\n\tConnection connection = connectionMono.block();\n\tif (connection!= null) {\n\t\tConnectionMetadata metadata = connection.getMetadata();\n\t\tif (metadata!= null) {\n\t\t\tmap.put(DatabaseInfoContributor.DATABASE_PRODUCT_NAME_KEY, metadata.getDatabaseProductName());\n\t\t\tmap.put(DatabaseInfoContributor.DATABASE_VERSION_KEY, metadata.getDatabaseProductVersion());\n\t\t}\n\t}\n\treturn map;\n}", "CodeBleu_score": 36.52344867708683}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tser = SystemSetting.get(configMap, User.GROUP, User.class);\nif (user == null) {\ninfo.setAllowRegistration(false);\ninfo.setMustVerifyEmailOnRegistration(false);\n} else {\ninfo.setAllowRegistration(user.getEnable()!= null && user.getEnable());\ninfo.setMustVerifyEmailOnRegistration(user.getMustVerifyEmailOnRegistration()!= null && user.getMustVerifyEmailOnRegistration());\n}\n}", "CodeBleu_score": 66.20949770264419}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tser = SystemSetting.get(configMap, User.GROUP, User.class);\nif (user == null) {\ninfo.setAllowRegistration(false);\ninfo.setMustVerifyEmailOnRegistration(false);\n} else {\ninfo.setAllowRegistration(user.getEnable()!= null && user.getEnable());\ninfo.setMustVerifyEmailOnRegistration(user.getMustVerifyEmailOnRegistration()!= null && user.getMustVerifyEmailOnRegistration());\n}\n}", "CodeBleu_score": 66.20949770264419}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tser = SystemSetting.get(configMap, User.GROUP, User.class);\nif (user == null) {\ninfo.setAllowRegistration(false);\ninfo.setMustVerifyEmailOnRegistration(false);\n} else {\ninfo.setAllowRegistration(user.getEnable()!= null && user.getEnable());\ninfo.setMustVerifyEmailOnRegistration(user.getMustVerifyEmailOnRegistration()!= null && user.getMustVerifyEmailOnRegistration());\n}\n}", "CodeBleu_score": 66.20949770264419}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\tThreadGroup threadGroup = new ThreadGroup(Application.class.getName());\nThread thread = new Thread(threadGroup, new Runnable() {\n@Override\npublic void run() {\ntry {\nlog.info(\\\"Restarting application\\\");\napplication.setAddCommandLineProperties(false);\napplication.setAdditionalProfiles(Collections.emptyList());\napplication.setWebEnvironment(false);\napplication.run(args);\n} catch (Exception e) {\nlog.error(\\\"Failed to restart application\\\", e);\n}\n}\n}, \\\"restart\\\");\nthread.setContextClassLoader(Application.class.getClassLoader());\nthread.setDaemon(false);\nthread.start();\nreturn \\\"Restarting application\\\";\n}", "CodeBleu_score": 38.06062828675991}, {"code": "public Object restart(){\n\tThreadGroup threadGroup = new ThreadGroup(\\\"restart\\\");\nThread thread = new Thread(threadGroup, new Runnable() {\n@Override\npublic void run() {\nClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();\ntry {\nThread.currentThread().setContextClassLoader(RestartEndpoint.class.getClassLoader());\nlog.info(\\\"Restarting application...\\\");\nRestartEndpoint.this.application.restart();\n} finally {\nThread.currentThread().setContextClassLoader(contextClassLoader);\n}\n}\n});\nthread.setDaemon(false);\nthread.start();\nreturn \\\"Restarting application (PID: \\\" + ManagementFactory.getRuntimeMXBean().getName() + \\\")\\\";\n}", "CodeBleu_score": 38.13935008931857}, {"code": "public Object restart(){\n\tlog.info(\"Restarting application\");\nThreadGroup threadGroup = new ThreadGroup(\"restart\");\nThread thread = new Thread(threadGroup, new Runnable() {\n@Override\npublic void run() {\ntry {\nThread.currentThread().setContextClassLoader(Application.class.getClassLoader());\nThread.currentThread().setDaemon(false);\nSpringApplication.exit(context, () -> 0);\n} catch (Throwable throwable) {\nlog.error(\"Failed to restart application\", throwable);\n}\n}\n}, \"restart\");\nthread.start();\nreturn \"Restarting application\";\n}", "CodeBleu_score": 46.45893808136174}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configurer.defaultCodecs().jackson2JsonDecoder(jackson2JsonDecoder());\n configurer.defaultCodecs().jackson2JsonEncoder(jackson2JsonEncoder());\n }", "CodeBleu_score": 40.497839280753695}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configurer.defaultCodecs().jackson2JsonDecoder(jackson2JsonDecoder());\n configurer.defaultCodecs().jackson2JsonEncoder(jackson2JsonEncoder());\n }", "CodeBleu_score": 40.497839280753695}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n }", "CodeBleu_score": 70.99832409141749}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn route(path(\"/console/**\").and(not(path(\"/console/assets/**\"))),\nrequest -> ServerResponse.temporaryRedirect(URI.create(\"/console/index.html\")).build());\n}", "CodeBleu_score": 14.983961750772517}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn route(\npath(\"/console/**\")\n.and(method(HttpMethod.GET))\n.and(accept(MediaType.TEXT_HTML))\n.and(not(WebSocketRequestPredicate.INSTANCE))\n.and(not(path(\"/console/assets/**\"))),\nrequest -> ServerResponse.temporaryRedirect(URI.create(\"/console/index.html\"))\n.build());\n}", "CodeBleu_score": 27.746676028818136}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t\treturn route(path(\"/console/**\")\n\t\t\t.and(method(GET).and(not(accept(MediaType.TEXT_HTML)))\n\t\t\t\t\t.and(not(WebSocketRequestPredicate.INSTANCE))),\n\t\t\trequest -> ServerResponse.temporaryRedirect(URI.create(haloProp.getConsole().getConsoleUrl()))\n\t\t\t\t\t.build());\n}", "CodeBleu_score": 26.236135358700786}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t ucPredicate = method(HttpMethod.GET)\n.and(path(\"/uc/**\").and(path(\"/uc/assets/**\").negate()))\n.and(accept(MediaType.TEXT_HTML))\n.and(new WebSocketRequestPredicate().negate());\nreturn route(ucPredicate,\nrequest -> this.serveIndex(haloProp.getUc().getLocation() + \"index.html\"));\n}", "CodeBleu_score": 82.55923697956887}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t ucPredicate = method(HttpMethod.GET)\n.and(path(\"/uc/**\").and(path(\"/uc/assets/**\").negate()))\n.and(accept(MediaType.TEXT_HTML))\n.and(new WebSocketRequestPredicate().negate());\nreturn route(ucPredicate, request -> this.serveIndex(haloProp.getUc().getLocation() + \"index.html\"));\n}", "CodeBleu_score": 82.55923697956887}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t ucPredicate = method(HttpMethod.GET)\n.and(path(\"/uc/**\").and(path(\"/uc/assets/**\").negate()))\n.and(accept(MediaType.TEXT_HTML))\n.and(new WebSocketRequestPredicate().negate());\nreturn route(ucPredicate,\nrequest -> this.serveIndex(haloProp.getUc().getLocation() + \"index.html\"));\n}", "CodeBleu_score": 82.55923697956887}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\troperties = sessionProperties()\n\tval sessionTimeout = sessionProperties.timeout.seconds\n\tval sessionRepository = InMemoryReactiveIndexedSessionRepository(ConcurrentHashMap(), sessionTimeout)\n\tsessionRepository.setDefaultMaxInactiveInterval(sessionTimeout)\n\treturn sessionRepository\n}", "CodeBleu_score": 27.79213054871592}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t", "CodeBleu_score": 3.6254732962319154}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t", "CodeBleu_score": 3.6254732962319154}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\ttailService userDetailsService = new DefaultUserDetailService(userService, roleService);\nuserDetailsService.setTwoFactorEnabled(haloProperties.getSecurity().getTwoFactor().isEnabled());\nreturn userDetailsService;\n}", "CodeBleu_score": 45.81408274626037}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tDefaultUserDetailService instance\nDefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService);\n\n// Configure two-factor authentication\nuserDetailsService.setTwoFactorAuthenticationEnabled(haloProperties.getSecurity().getTwoFactor().isEnabled());\n\n// Return the configured DefaultUserDetailService instance\nreturn userDetailsService;\n}", "CodeBleu_score": 51.44469951954251}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tDefaultUserDetailService instance\nDefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService);\n\n// Enable or disable two-factor authentication based on HaloProperties\nuserDetailsService.setTwoFactorAuthenticationEnabled(haloProperties.getSecurity().isTwoFactorAuthenticationEnabled());\n\n// Return the configured DefaultUserDetailService instance\nreturn userDetailsService;\n}", "CodeBleu_score": 49.74236887429267}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\treturn new Comment.CommentOwner(Comment.CommentOwner.Kind.EMAIL, email == null? \"\" : email, displayName, new Comment.CommentOwner.Annotations(avatar, website));\n}", "CodeBleu_score": 11.658154890519652}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\treturn new Comment.CommentOwner(\nComment.CommentOwner.Kind.EMAIL,\nemail == null? \"\" : email,\ndisplayName,\nnew Comment.CommentOwner.Annotation(\nComment.CommentOwner.Annotation.Kind.AVATAR,\navatar == null? \"\" : avatar\n),\nnew Comment.CommentOwner.Annotation(\nComment.CommentOwner.Annotation.Kind.WEBSITE,\nwebsite == null? \"\" : website\n)\n);\n}", "CodeBleu_score": 22.66266768846277}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t", "CodeBleu_score": 2.669929035515403}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tgetKind().equals(User.KIND)) {\nUser user = client.fetch(User.class, commentOwner.getName()).orElseThrow();\nreturn user.getSpec().getEmail().equals(post.getSpec().getOwner().getName());\n}\nreturn commentOwner.getName().equals(post.getSpec().getOwner().getName());\n}", "CodeBleu_score": 42.49915800002102}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t.getKind().equals(User.KIND)) {\n\t\treturn post.getSpec().getOwner().getName().equals(commentOwner.getName());\n\t} else if (commentOwner.getKind().equals(User.KIND_EMAIL)) {\n\t\treturn client.fetch(User.class, commentOwner.getName())\n\t\t\t.map(user -> user.getSpec().getEmail().equals(post.getSpec().getOwner().getName()))\n\t\t\t.orElse(false);\n\t} else {\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 33.90173883038647}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tgetKind().equals(User.KIND)) {\n// If the comment owner's kind is User, we fetch the user by the post owner's name and check if the email matches.\nOptional<User> user = client.fetch(User.class, post.getSpec().getOwner().getName());\nreturn user.map(u -> u.getSpec().getEmail().equals(commentOwner.getName())).orElse(false);\n}\n// If the comment owner's kind is not User, we directly compare the comment owner's name with the post owner's name.\nreturn post.getSpec().getOwner().getName().equals(commentOwner.getName());\n}", "CodeBleu_score": 39.252965972443576}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\tstOptions listOptions = new ListOptions();\nlistOptions.setQuery(and(\nequal(Comment.OWNER_KIND, getOwnerKind()),\nequal(Comment.OWNER_NAME, getOwnerName()),\ncontains(Comment.LABELS, getKeyword()),\ncontains(Comment.CONTENT, getKeyword())\n));\n\nlistOptions.setFieldSelector(labelAndFieldSelectorToListOptions(\nQueryParamBuildUtil.buildFieldSelector(\nComment.LABELS, Comment.CONTENT, Comment.OWNER_KIND, Comment.OWNER_NAME\n),\ngetFieldSelectors()\n));\n\nreturn listOptions;\n}", "CodeBleu_score": 18.893560980617906}, {"code": "public ListOptions toListOptions(){\n\ttOptions listOptions = new ListOptions();\nlistOptions.setFieldSelector(FieldSelector.of(\nand(\ncontains(\\\"spec.content\\\", getKeyword()),\nequal(\\\"spec.ownerKind\\\", getOwnerKind()),\nequal(\\\"spec.ownerName\\\", getOwnerName())\n)\n));\nreturn listOptions;\n}", "CodeBleu_score": 9.305756468154673}, {"code": "public ListOptions toListOptions(){\n\ttOptions options = ListOptions.builder();\noptions.setSelector(fieldSelector());\noptions.setQuery(query());\nreturn options;\n}", "CodeBleu_score": 8.44382023172832}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\tAssert.notNull(commentName, \"The commentName must not be null.\");\nreturn counterService.getCounter(commentName).map(counter -> {\nCommentStats stats = new CommentStats();\nstats.setUpvotes(counter.getUpvotes());\nreturn stats;\n});\n}", "CodeBleu_score": 45.68350034971404}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\tAssert.notNull(commentName, \"The comment name must not be null.\");\nreturn counterService.getCounter(commentName)\n.map(counter -> new CommentStats(counter.getUpvoteCount(), counter.getDownvoteCount()))\n.switchIfEmpty(Mono.just(new CommentStats(0, 0)));\n}", "CodeBleu_score": 49.169725215095596}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\tAssert.notNull(commentName, \"The comment name must not be null.\");\nreturn counterService.get(Comment.class, commentName)\n.switchIfEmpty(Mono.just(new CommentStats()))\n.map(counter -> new CommentStats(counter.getUpvoteCount(), counter.getDownvoteCount()));\n}", "CodeBleu_score": 60.80154455222211}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\tif (StringUtils.isBlank(identity.getName())) {\nreturn;\n}\n\nvar reason = NotificationReasonConst.REPLY;\nvar condition = new ReplyCondition(identity.getName());\n\nvar subscriber = new Subscription.Subscriber(identity, reason, condition);\n\nvar subscription = new Subscription(subscriber);\n\nnotificationCenter.subscribe(subscription);\n}", "CodeBleu_score": 42.88239503842883}, {"code": "void subscribeReply(UserIdentity identity){\n\tvar subscriber = new Subscription(identity, NotificationReasonConst.REPLY);\nsubscriber.setInterestReason(NotificationReasonConst.REPLY, NotificationReasonConst.REPLY, identity.getName());\nnotificationCenter.subscribe(subscriber);\n}", "CodeBleu_score": 30.50737289328822}, {"code": "void subscribeReply(UserIdentity identity){\n\tvar reason = NotificationReasonConst.REPLY_REASON;\nvar subscription = Subscription.builder()\n.reason(reason)\n.condition(condition -> {\nvar name = condition.get(\"name\");\nreturn StringUtils.equals(name, identity.getName());\n})\n.build();\nvar result = notificationCenter.subscribe(identity, subscription);\nresult.block();\n}", "CodeBleu_score": 32.051135231211944}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\t client.update(comment, updateComment -> updateComment.setApproved(true).setLastApproved(Instant.now()))\n.retryWhen(Retry.backoff(3, Duration.ofSeconds(1))\n.filter(OptimisticLockingFailureException.class::isInstance))\n.doOnError(OptimisticLockingFailureException.class, e -> {\ncounterService.increment(MeterUtils.APPROVE_COMMENT_FAILURE);\n})\n.doOnSuccess(c -> {\ncounterService.increment(MeterUtils.APPROVE_COMMENT_SUCCESS);\n});\n}", "CodeBleu_score": 25.221407017856627}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t", "CodeBleu_score": 4.248087822285738}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t client.update(Comment.class, comment.getName(), comment, updateComment(comment));\n}", "CodeBleu_score": 12.933894512094563}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\nif ($action instanceof MountableAction) {\n$action->associateWith($this);\n}\n\nif ($action instanceof HasRecord && $this instanceof HasRecord) {\n$action->setRecord($this->getRecord());\n}\n\nreturn $action;\n}", "CodeBleu_score": 55.708877429967366}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n$action->setComponent($this->getComponent());\n}\n\nif ($action instanceof HasRecord && $this->hasRecord()) {\n$action->setRecord($this->getRecord());\n}\n\nreturn $action;\n}", "CodeBleu_score": 54.986784747867226}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n$action->associate($this);\n}\n\nif ($action instanceof HasRecord && $this->hasRecord()) {\n$action->setRecord($this->getRecord());\n}\n\nreturn $action;\n}", "CodeBleu_score": 54.11035163030119}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->evaluate($this->successRedirectUrl);\n\nif (filled($url)) {\n$this->redirect($url);\n}\n\nreturn $this;\n}", "CodeBleu_score": 89.60071149034441}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->evaluate($this->successRedirectUrl);\n\nif (filled($url)) {\n$this->redirect($url);\n}\n\nreturn $this;\n}", "CodeBleu_score": 89.60071149034441}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->evaluate($this->successRedirectUrl);\n\nif (filled($url)) {\n$this->redirect($url);\n}\n\nreturn $this;\n}", "CodeBleu_score": 89.60071149034441}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t! $record ||! method_exists($record, 'tags')) {\nreturn;\n}\n\n$tagModel = Tag::getModel();\n\n$tags = collect($state)->map(function (string $name) use ($tagModel) {\nreturn $tagModel::firstOrCreate(['name' => $name]);\n})->pluck('id')->all();\n\n$record->syncTags($tags);\n}", "CodeBleu_score": 29.528186621076035}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t! method_exists($record,'syncTags')) {\nreturn;\n}\n\n$tagModel = $this->getTagModel();\n\n$tags = collect($state)->map(function (string $name) use ($tagModel) {\nreturn $tagModel::findOrCreate($name);\n})->all();\n\n$record->syncTags($tags);\n}", "CodeBleu_score": 25.802953444710397}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t! $record) {\nreturn;\n}\n\n$tagModel = $record->tags()->getModel();\n\n$tagNames = array_map(function ($tagName) use ($tagModel) {\n$tag = $tagModel->where('name', $tagName)->first();\n\nif ($tag) {\nreturn $tag;\n}\n\nreturn $tagModel->create(['name' => $tagName]);\n}, $state);\n\n$record->tags()->sync($tagNames);\n}", "CodeBleu_score": 32.681962679675955}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repositoryName, err := paths.DissectRepoPath(repoPath)\n\tif err!= nil {\n\t\treturn fmt.Errorf(\"failed to dissect repository path: %w\", err)\n\t}\n\n\t// Create a scope and resource for the pipeline.\n\tscope := auth.Scope{\n\t\tType:  auth.ScopeTypePipeline,\n\t\tSpace: spacePath,\n\t\tRepo:  repositoryName,\n\t\tID:    pipelineIdentifier,\n\t}\n\tresource := auth.Resource{\n\t\tType:  auth.ResourceTypePipeline,\n\t\tSpace: spacePath,\n\t\tRepo:  repositoryName,\n\t\tID:    pipelineIdentifier,\n\t}\n\n\t// Perform the authorization check with the context, authorizer, session, scope, resource, and permission.\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err!= nil {\n\t\treturn fmt.Errorf(\"failed to check pipeline permission: %w\", err)\n\t}\n\treturn nil\n}", "CodeBleu_score": 59.61528636054159}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := paths.DissectRepoPath(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\tscope := types.Scope{\n\t\tSpacePath: spacePath,\n\t\tRepoName: repoName,\n\t}\n\n\tresource := types.Resource{\n\t\tType: enum.ResourceTypePipeline,\n\t\tIdentifier: pipelineIdentifier,\n\t}\n\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 68.28368059886691}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := paths.DissectRepoPath(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\tscope := auth.NewScope(spacePath, repoName, auth.PipelineScope)\n\tresource := auth.NewResource(pipelineIdentifier)\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 45.87771829391451}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tif session == nil {\n\t\treturn auth.ErrNotAuthenticated\n\t}\n\n\tif!space.IsSpace() {\n\t\treturn fmt.Errorf(\\\"invalid space: %s\\\", space.String())\n\t}\n\n\tparentSpace, err := paths.GetParentSpace(space)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource based on the parent space and name.\n\tscope := auth.Scope{\n\t\tType: enum.ScopeTypeSpace,\n\t\tName: parentSpace.Name,\n\t}\n\tresource := auth.Resource{\n\t\tType: enum.ResourceTypeSpace,\n\t\tName: space.Name,\n\t}\n\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission.\n\treturn auth.Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 56.46549302486336}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tif space == nil {\n\t\treturn nil\n\t}\n\n\tparentSpace, err := paths.GetSpaceParent(space)\n\tif err!= nil {\n\t\treturn fmt.Errorf(\"failed to get parent space: %w\", err)\n\t}\n\n\tscope := &types.Scope{\n\t\tType: enum.ScopeType_SPACE,\n\t\tID:   parentSpace.ID,\n\t}\n\n\tresource := &types.Resource{\n\t\tType: enum.ResourceType_SPACE,\n\t\tID:   space.ID,\n\t}\n\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 59.77301384516619}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tif session == nil {\n\t\treturn auth.ErrNotAuthenticated\n\t}\n\n\tif authorizer == nil {\n\t\treturn auth.ErrNotAuthorized\n\t}\n\n\tif space == nil {\n\t\treturn auth.ErrNotAuthorized\n\t}\n\n\tparentSpace, err := paths.GetSpaceParent(space)\n\tif err!= nil {\n\t\treturn fmt.Errorf(\"failed to get parent space: %w\", err)\n\t}\n\n\tscope := auth.NewScope(parentSpace.Name, auth.ScopeTypeSpace)\n\tresource := auth.NewResource(parentSpace.Name, auth.ResourceTypeSpace)\n\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 51.59675019222113}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\tource == nil || len(source) == 0 {\n\t\tsource = json.RawMessage(fmt.Sprintf(\\\"%v\\\", data))\n\t}\n\tvar rawSource json.RawMessage\n\tif err := json.Unmarshal(source, &rawSource); err!= nil {\n\t\treturn nil, fmt.Errorf(\\\"failed to unmarshal source JSON: %w\\\", err)\n\t}\n\tvar rawData json.RawMessage\n\tif err := json.Unmarshal(rawSource, &rawData); err!= nil {\n\t\treturn nil, fmt.Errorf(\\\"failed to unmarshal source JSON: %w\\\", err)\n\t}\n\tvar sanitized json.RawMessage\n\tif err := json.Unmarshal(rawData, &sanitized); err!= nil {\n\t\treturn nil, fmt.Errorf(\\\"failed to sanitize JSON: %w\\\", err)\n\t}\n\treturn bytes.TrimRight(sanitized, \\\"\\\n\\\"), nil\n}", "CodeBleu_score": 38.40908293554583}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\ten(source) == 0 {\n\t\tsanitized, err := json.Marshal(data)\n\t\tif err!= nil {\n\t\t\treturn nil, fmt.Errorf(\\\"failed to marshal data: %w\\\", err)\n\t\t}\n\t\treturn sanitized, nil\n\t}\n\n\tvar sourceData map[string]any\n\tif err := json.Unmarshal(source, &sourceData); err!= nil {\n\t\treturn nil, fmt.Errorf(\\\"failed to unmarshal source data: %w\\\", err)\n\t}\n\n\tsanitized, err := json.Marshal(sourceData)\n\tif err!= nil {\n\t\treturn nil, fmt.Errorf(\\\"failed to marshal source data: %w\\\", err)\n\t}\n\n\treturn sanitized, nil\n}", "CodeBleu_score": 40.79720696624777}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\ten(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err!= nil {\n\t\t\treturn nil, fmt.Errorf(\\\"failed to marshal payload: %w\\\", err)\n\t\t}\n\t\treturn source, nil\n\t}\n\n\tvar decoded interface{}\n\tif err := json.Unmarshal(source, &decoded); err!= nil {\n\t\treturn nil, fmt.Errorf(\\\"failed to unmarshal payload: %w\\\", err)\n\t}\n\n\tvar sanitized interface{}\n\tif err := json.Unmarshal(source, &sanitized); err!= nil {\n\t\treturn nil, fmt.Errorf(\\\"failed to unmarshal payload: %w\\\", err)\n\t}\n\n\tresult, err := json.Marshal(sanitized)\n\tif err!= nil {\n\t\treturn nil, fmt.Errorf(\\\"failed to marshal payload: %w\\\", err)\n\t}\n\n\treturn json.RawMessage(bytes.TrimSuffix(result, []byte{'\n'})), nil\n}", "CodeBleu_score": 45.95892560485642}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference.\n\tif err := c.validateRepoRef(repoRef); err!= nil {\n\t\treturn nil, usererror.New(usererror.InvalidRepoReference, err)\n\t}\n\n\t// Fetch the repository using the reference.\n\trepo, err := c.repoStore.GetByReference(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, usererror.New(usererror.InvalidRepoReference, err)\n\t}\n\n\t// Check the required permissions for the session on the repository.\n\tif err := c.authorizer.Authorize(session, repo, reqPermission); err!= nil {\n\t\treturn nil, usererror.New(usererror.Unauthorized, err)\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 47.107234582047866}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate repository reference.\n\tif err := c.validateRepoRef(repoRef); err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch repository.\n\trepo, err := c.repoStore.GetByReference(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Check access permissions.\n\tif err := c.authorizer.CheckAccess(ctx, session, repo, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 44.1628288655343}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// validate repository reference\n\tif err := c.repoStore.ValidateRef(repoRef); err!= nil {\n\t\treturn nil, usererror.New(err)\n\t}\n\n\t// fetch repository\n\trepo, err := c.repoStore.GetByRef(repoRef)\n\tif err!= nil {\n\t\treturn nil, usererror.New(err)\n\t}\n\n\t// check permissions\n\tif err := c.authorizer.CheckAccess(session, repo, reqPermission); err!= nil {\n\t\treturn nil, usererror.New(err)\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 42.132383908579214}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: func(in *ReportInput, s *auth.Session) error {\n\t\t\tin.Check.Payload.Empty = &types.Empty{}\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindRaw: func(in *ReportInput, s *auth.Session) error {\n\t\t\tin.Check.Payload.Raw = &types.Raw{}\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindMarkdown: func(in *ReportInput, s *auth.Session) error {\n\t\t\tin.Check.Payload.Markdown = &types.Markdown{}\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindPipeline: func(in *ReportInput, s *auth.Session) error {\n\t\t\tin.Check.Payload.Pipeline = &types.Pipeline{}\n\t\t\treturn nil\n\t\t},\n\t}\n}", "CodeBleu_score": 27.37454673747763}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tsanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tsanitizers[enum.CheckPayloadKind_EMPTY] = emptyCheckSanitizer\n\tsanitizers[enum.CheckPayloadKind_RAW] = rawCheckSanitizer\n\tsanitizers[enum.CheckPayloadKind_MARKDOWN] = markdownCheckSanitizer\n\tsanitizers[enum.CheckPayloadKind_PIPELINE] = pipelineCheckSanitizer\n\treturn sanitizers\n}", "CodeBleu_score": 41.39594497261786}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tsanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tsanitizers[enum.CheckPayloadKindEmpty] = func(in *ReportInput, s *auth.Session) error {\n\t\treturn nil\n\t}\n\n\tsanitizers[enum.CheckPayloadKindRaw] = func(in *ReportInput, s *auth.Session) error {\n\t\treturn sanitizeRaw(in, s)\n\t}\n\n\tsanitizers[enum.CheckPayloadKindMarkdown] = func(in *ReportInput, s *auth.Session) error {\n\t\treturn sanitizeMarkdown(in, s)\n\t}\n\n\tsanitizers[enum.CheckPayloadKindPipeline] = func(in *ReportInput, s *auth.Session) error {\n\t\treturn sanitizePipeline(in, s)\n\t}\n\n\treturn sanitizers\n}", "CodeBleu_score": 44.635335394593625}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif not self.state.is_attached_to_screen then \n\t\tself.state.is_attached_to_screen = true \n\t\trenderer.attach_to_buffer(self.bufnr) \n\tend \n\tself.state.on_render = on_render \n\treturn self ", "CodeBleu_score": 54.063562551182564}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tself.state.on_render = on_render\n\tif not self.state.is_attached_to_screen then\n\t\tself:attach_to_changes({\n\t\t\ton_lines = function(bufnr, start, finish,...)\n\t\t\t\tif self.state.is_processing then\n\t\t\t\t\treturn\n\t\t\t\tend\n\n\t\t\t\tself.state.is_processing = true\n\t\t\t\tself.state.on_render(self)\n\t\t\t\tself.state.is_processing = false\n\t\t\tend,\n\t\t})\n\t\tself.state.is_attached_to_screen = true\n\tend\n\n\treturn self", "CodeBleu_score": 54.42677072061988}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tself.state.on_render = on_render\n\n\tif not self.state.is_attached_to_screen then\n\t\tself:attach_to_changes({\n\t\t\ton_lines = function(bufnr, start_line, end_line, new_lines)\n\t\t\t\tself:update_state()\n\n\t\t\t\tself.state.on_render(bufnr, start_line, end_line, new_lines)\n\t\t\tend,\n\t\t\ton_detach = function(bufnr, client_id)\n\t\t\t\tself:update_state()\n\t\t\tend,\n\t\t\ton_attach = function(bufnr, client_id)\n\t\t\t\tself:update_state()\n\t\t\tend,\n\t\t})\n\n\t\tself.state.is_attached_to_screen = true\n\tend\n\n\treturn self", "CodeBleu_score": 51.406895173391554}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t\t-- Get the filename of the buffer.\n\tlocal filename = self.filename\n\n\t-- If the filename is nil or empty, return.\n\tif not filename or filename == '' then\n\t\treturn\n\tend\n\n\t-- Check if the file exists.\n\tif not fs.exists(filename) then\n\t\treturn\n\tend\n\n\t-- Create a new watcher for the buffer.\n\tlocal watcher = self.watcher\n\n\t-- Add the callback function to the watcher.\n\twatcher.add(filename, callback)\n\n\t-- Attach the watcher to the buffer.\n\tself.watcher.attach(self)\n\n\treturn self", "CodeBleu_score": 36.526335365691644}, {"code": "function Buffer:watch(callback)\n\t\t-- Check if the buffer is valid.\n\tif not self:is_valid() then\n\t\treturn\n\tend\n\n\t-- Check if the buffer is already being watched.\n\tif self.watcher:is_watching(self.filename) then\n\t\treturn\n\tend\n\n\t-- Watch the buffer's filename.\n\tlocal success, err = pcall(function()\n\t\tself.watcher:watch(self.filename, callback)\n\tend)\n\n\t-- If an error occurs, log an error message.\n\tif not success then\n\t\tconsole.error('Failed to watch '.. self.filename.. ': '.. err)\n\tend", "CodeBleu_score": 38.80972306725107}, {"code": "function Buffer:watch(callback)\n\t\tif self:is_in_disk() then\n\t\tself.watcher:watch(self.filename, callback)\n\telse\n\t\tconsole.debug('Buffer is not in disk')\n\tend\n\n\treturn self", "CodeBleu_score": 24.972669420231732}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t\nend\n", "CodeBleu_score": 0.9719152141768624}, {"code": "function Color:to_hex()\n\t\tif self.hex then \n\t\treturn self.hex \n\tend \n\tlocal spec = self.spec \n\tlocal color = spec.foreground or spec.background \n\tif color then \n\t\tlocal rgb = self:to_rgb() \n\t\tlocal hex = bit.tohex(rgb.r, 2).. bit.tohex(rgb.g, 2).. bit.tohex(rgb.b, 2) \n\t\tself.hex = hex \n\t\treturn hex \n\tend ", "CodeBleu_score": 49.91448142774223}, {"code": "function Color:to_hex()\n\t\nend\n", "CodeBleu_score": 0.9719152141768624}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tfor i, line in ipairs(buffer.lines) do \n\t\tfor match in string.gmatch(line, pattern) do \n\t\t\tself:add_highlight(buffer, hl, i - 1, match:find(pattern), match:find(pattern) + #match - 1)\n\t\tend\n\tend\n\n\treturn self ", "CodeBleu_score": 34.833835871430196}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\t-- Retrieve the buffer's lines\n\tlocal lines = vim.api.nvim_buf_get_lines(buffer.bufnr, 0, -1, true)\n\n\t-- Iterate through each line and search for occurrences of the specified pattern\n\tfor i, line in ipairs(lines) do\n\t\tlocal _, _, match = string.find(line, pattern)\n\t\tif match then\n\t\t\t-- Apply the specified highlight to the buffer\n\t\t\tvim.api.nvim_buf_add_highlight(buffer.bufnr, self.ns_id, hl, i - 1, 0, -1)\n\t\tend\n\tend\n\n\t-- Return the namespace object\n\treturn self", "CodeBleu_score": 40.68740324266612}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = vim.api.nvim_buf_get_lines(buffer.bufnr, 0, -1, true)\n\tfor i, line in ipairs(lines) do\n\t\tfor match in line:gmatch(pattern) do\n\t\t\tvim.api.nvim_buf_add_highlight(buffer.bufnr, self.ns_id, hl, i - 1, 0, -1)\n\t\tend\n\tend\n\n\treturn self", "CodeBleu_score": 39.588327475549285}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = string.format('%s:%d:%d', row, col, pos)\n\tvim.api.nvim_buf_set_extmark(buffer.bufnr, self.ns_id, row, col, {\n\t\tid = id,\n\t\thl_group = hl,\n\t\tpriority = priority,\n\t\ttext = text,\n\t})\n\n\treturn id", "CodeBleu_score": 53.54420427079197}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = string.format('%s:%s:%s:%s', row, col, pos, priority)\n\tvim.api.nvim_buf_set_extmark(buffer.bufnr, self.ns_id, row, col, {\n\t\tid = id,\n\t\ttext = text,\n\t\thl_group = hl,\n\t\tend_line = row,\n\t\tend_col = col,\n\t\tpriority = priority,\n\t})\n\n\treturn id", "CodeBleu_score": 56.510864447251194}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = string.format('%s_%s_%s_%s', buffer.bufnr, row, col, pos)\n\tvim.api.nvim_buf_set_extmark(buffer.bufnr, self.ns_id, row, col, {\n\t\tid = id,\n\t\ttext = text,\n\t\thl_group = hl,\n\t\tpriority = priority,\n\t\tpos = pos,\n\t})\n\treturn id", "CodeBleu_score": 54.88514458250424}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t\tlocal lines = {}\n\tlocal line = ''\n\tfor char in output:gmatch('.') do\n\t\tif char == '", "CodeBleu_score": 11.000403415452855}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal lines = {}\n\tlocal line = ''\n\tfor c in output:gmatch('.') do\n\t\tline = line.. c\n\t\tif c == '", "CodeBleu_score": 14.720193162801642}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal lines = {}\n\tlocal line = ''\n\tfor i = 1, #output do\n\t\tlocal c = output:sub(i, i)\n\t\tif c == '", "CodeBleu_score": 23.277396865057383}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t\tif self.watcher then\n\t\treturn self.watcher\n\tend\n\n\tlocal watcher = luv.new_fs_event(path, self.interval, function(err, filename, events)\n\t\tif err then\n\t\t\tprint('Error occurred while watching file: '.. filename)\n\t\telse\n\t\t\thandler(filename, events)\n\t\tend\n\tend)\n\n\tself.watcher = watcher\n\n\treturn watcher", "CodeBleu_score": 52.48305905926273}, {"code": "function Watcher:watch_file(path, handler)\n\t\t-- Check if a watcher already exists for the specified path.\n\tif self.watchers[path] then\n\t\t-- Return the existing watcher.\n\t\treturn self.watchers[path]\n\tend\n\n\t-- Create a new file system event watcher using Neovim's loop.\n\tlocal watcher = luv.new_fs_event()\n\n\t-- Start watching the specified path with the given handler.\n\tlocal ok, err = luv.fs_event_start(watcher, path, self.interval, handler)\n\tif not ok then\n\t\t-- Return an error if the watcher could not be started.\n\t\treturn nil, err\n\tend\n\n\t-- Store the watcher for the specified path.\n\tself.watchers[path] = watcher\n\n\t-- Return the watcher instance.\n\treturn watcher", "CodeBleu_score": 45.03945235283943}, {"code": "function Watcher:watch_file(path, handler)\n\t\tif self.watcher then\n\t\treturn self.watcher\n\tend\n\tself.watcher = luv.new_fs_event(path, self.interval, handler)\n\treturn self.watcher", "CodeBleu_score": 46.642670252237096}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t\tif self.is_processing then\n\t\treturn self.hunks\n\tend\n\n\tself.is_processing = true\n\n\tlocal lines = vim.api.nvim_buf_get_lines(self.bufnr, 0, -1, false)\n\tlocal hunks = self.git_object:hunks(lines)\n\n\tif not hunks then\n\t\tself.is_processing = false\n\t\treturn nil\n\tend\n\n\tself.hunks = hunks\n\tself:set_signs()\n\n\tself.is_processing = false\n\treturn self.hunks", "CodeBleu_score": 21.05181796592503}, {"code": "function GitBuffer:live_hunks()\n\t\tif self.is_processing then\n\t\treturn self.hunks\n\tend\n\n\tself.is_processing = true\n\n\tlocal lines = self:lines()\n\tlocal hunks = self.git_object:live_hunks(lines)\n\n\tif hunks.error then\n\t\treturn hunks.error\n\tend\n\n\tself.hunks = hunks\n\n\tself:set_signs(hunks)\n\n\tself.is_processing = false\n\n\treturn hunks", "CodeBleu_score": 22.882623755174663}, {"code": "function GitBuffer:live_hunks()\n\t\tif self.is_processing then return end\n\tself.is_processing = true\n\n\tlocal hunks = self.git_object:live_hunks()\n\tif not hunks then\n\t\tself.is_processing = false\n\t\treturn nil\n\tend\n\n\tself:set_signs(hunks)\n\n\tself.is_processing = false\n\treturn hunks", "CodeBleu_score": 15.800270251074188}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal temp_filename = vim.fn.tempname()\n\tlocal patch_content = patch:get_content()\n\tlocal file = io.open(temp_filename, \"w\")\n\tfile:write(patch_content)\n\tfile:close()\n\tlocal result = self.git:stage_hunk(self.filename.native, temp_filename)\n\tos.remove(temp_filename)\n\treturn result", "CodeBleu_score": 43.798492347733685}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\t-- Create a temporary file to store the patch content.\n\tlocal tmp_file = vim.loop.os_tmpname()\n\tvim.loop.fs_open(tmp_file, 'w', 438, function(err, fd)\n\t\tif err then\n\t\t\treturn nil, err\n\t\tend\n\n\t\t-- Write the patch content to the temporary file.\n\t\tvim.loop.fs_write(fd, patch.content, nil, nil, function()\n\t\t\tvim.loop.fs_close(fd, function()\n\t\t\t\t-- Stage the hunk using the temporary file.\n\t\t\t\tlocal status, err = self.git:stage_hunk(self.filename.native, tmp_file)\n\n\t\t\t\t-- Remove the temporary file.\n\t\t\t\tvim.loop.fs_unlink(tmp_file, function()\n\t\t\t\t\treturn status, err\n\t\t\t\tend)\n\t\t\tend)\n\t\tend)\n\tend)", "CodeBleu_score": 44.557448773120065}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal tmp_filename = utils.temp_filename()\n\tlocal tmp_file = io.open(tmp_filename, \"w+\")\n\ttmp_file:write(patch.content)\n\ttmp_file:close()\n\tlocal success, error = self.git:stage_hunk(self.filename.native, tmp_filename)\n\tfs.delete(tmp_filename)\n\treturn success, error", "CodeBleu_score": 46.70898237946809}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tOAuthRequest request = new OAuthRequest(api.getAccessTokenEndpoint(), api);\nrequest.addHeader(OAuthConstants.HEADER_CONTENT_TYPE, OAuthConstants.HEADER_CONTENT_TYPE_FORM);\nrequest.addBodyParameter(OAuthConstants.BODY_PARAMETER_CLIENT_ID, config.getApiKey());\nrequest.addBodyParameter(OAuthConstants.BODY_PARAMETER_CLIENT_SECRET, config.getApiSecret());\nrequest.addBodyParameter(GRANT_TYPE_KEY, GRANT_TYPE_CLIENT_CREDENTIALS);\nrequest.addBodyParameter(OAuthConstants.BODY_PARAMETER_VERIFIER, verifier.getValue());\nrequest.addBodyParameter(OAuthConstants.BODY_PARAMETER_REDIRECT_URI, config.getCallback());\nResponse response = request.send();\nreturn api.extractAccessToken(response.getBody());\n}", "CodeBleu_score": 54.90982606550989}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tOAuthRequest request = new OAuthRequest(api.getAccessTokenEndpoint(), api);\nrequest.addHeader(OAuthConstants.HEADER_CONTENT_TYPE, OAuthConstants.HEADER_CONTENT_TYPE_FORM);\nrequest.addBodyParameter(OAuthConstants.OAUTH_CLIENT_ID, config.getApiKey());\nrequest.addBodyParameter(OAuthConstants.OAUTH_CLIENT_SECRET, config.getApiSecret());\nrequest.addBodyParameter(OAuthConstants.OAUTH_VERIFIER, verifier.getValue());\nrequest.addBodyParameter(GRANT_TYPE_KEY, GRANT_TYPE_CLIENT_CREDENTIALS);\nResponse response = request.send();\nreturn api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 64.0702440999368}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tOAuthRequest request = new OAuthRequest(api.getAccessTokenEndpoint(), api);\nrequest.addHeader(OAuthConstants.HEADER_ACCEPT, OAuthConstants.HEADER_ACCEPT_JSON);\nrequest.addHeader(OAuthConstants.HEADER_CONTENT_TYPE, OAuthConstants.HEADER_CONTENT_TYPE_URLENCODED);\nrequest.addBodyParameter(OAuthConstants.OAUTH_CLIENT_ID, config.getApiKey());\nrequest.addBodyParameter(OAuthConstants.OAUTH_CLIENT_SECRET, config.getApiSecret());\nrequest.addBodyParameter(OAuthConstants.OAUTH_VERIFIER, verifier.getValue());\nrequest.addBodyParameter(OAuthConstants.OAUTH_TOKEN, requestToken.getToken());\nrequest.addBodyParameter(GRANT_TYPE_KEY, GRANT_TYPE_CLIENT_CREDENTIALS);\nResponse response = request.send();\nreturn api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 64.00701420258761}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\n// Create a credentials provider that will hold the credentials for the host\nCredentialsProvider provider = new BasicCredentialsProvider();\n\n// Add the credentials to the provider\nprovider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), httpCredentials);\n\n// Create an auth cache and add the credentials to it\nAuthCache authCache = new BasicAuthCache();\nauthCache.put(host, new BasicScheme());\n\n// Assign the auth cache to the context\ncontext.setAuthCache(authCache);\n\n// Log the action\nLOGGER.log(Level.INFO, \"Added {0} to auth cache\", host);\n}", "CodeBleu_score": 65.33499464820045}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\tAuthCache authCache = context.getAuthCache();\nif (authCache == null) {\nauthCache = new BasicAuthCache();\ncontext.setAuthCache(authCache);\n}\nBasicScheme basicAuth = new BasicScheme();\nauthCache.put(host, basicAuth);\nLOGGER.log(Level.INFO, \"Added host {0} to auth cache\", host);\n}", "CodeBleu_score": 46.39919154508006}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\n// Create a credentials provider\nCredentialsProvider provider = new BasicCredentialsProvider();\n\n// Add credentials to the provider\nprovider.setCredentials(AuthScope.ANY, httpCredentials);\n\n// Create a basic auth cache\nAuthCache authCache = new BasicAuthCache();\n\n// Add the host to the cache\nauthCache.put(host, new BasicScheme());\n\n// Assign the cache to the context\ncontext.setAuthCache(authCache);\n\n// Log the action of adding the host to the auth cache\nLOGGER.log(Level.INFO, \"Added {0} to the auth cache\", host.getHostName());\n}", "CodeBleu_score": 51.951980226715044}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tif (source == null) {\nthrow new IllegalArgumentException(\\\"source cannot be null\\\");\n}\nif (StringUtils.isBlank(size)) {\nthrow new IllegalArgumentException(\\\"size cannot be blank\\\");\n}\nJenkins jenkins = Jenkins.getInstance();\nif (jenkins == null) {\nthrow new IllegalStateException(\\\"Jenkins instance not available\\\");\n}\nAvatarCache cache = jenkins.getExtension(AvatarCache.class);\nif (cache == null) {\nthrow new IllegalStateException(\\\"AvatarCache extension not available\\\");\n}\nString key = generateCacheKey(source, size);\nCacheEntry entry = cache.cache.get(key);\nif (entry == null) {\nentry = cache.cache.putIfAbsent(key, new CacheEntry(source, size));\nif (entry == null) {\nentry = cache.cache.get(key);\n}\n}\nif (entry == null) {\nthrow new IllegalStateException(\\\"Cache entry not available\\\");\n}\ntry {\nreturn jenkins.getRootUrl() + ActionURI + \\\"?key=\\\" + URLEncoder.encode(key, StandardCharsets.UTF_8.name()) + \\\"&size=\\\" + URLEncoder.encode(size, StandardCharsets.UTF_8.name());\n} catch (UnsupportedEncodingException e) {\nthrow new IllegalStateException(e);\n}\n}", "CodeBleu_score": 46.312769480961514}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tif (Jenkins.getInstance() == null) {\nthrow new IllegalStateException(\\\"Jenkins instance not available\\\");\n}\nAvatarCache cache = Jenkins.getInstance().getExtensionList(AvatarCache.class).get(0);\nif (cache == null) {\nthrow new IllegalStateException(\\\"Avatar cache not available\\\");\n}\nString key = cache.buildCacheKey(source, size);\ncache.seed(key, source);\ntry {\nreturn Jenkins.getInstance().getRootUrl() + ActionURI + \\\"/\\\" + URLEncoder.encode(key, StandardCharsets.UTF_8.name()) + \\\"/\\\" + size;\n} catch (UnsupportedEncodingException e) {\nthrow new IllegalStateException(e);\n}\n}", "CodeBleu_score": 44.244331578881635}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tif (source == null) {\nthrow new IllegalArgumentException(\\\"No source provided\\\");\n}\nif (size == null) {\nthrow new IllegalArgumentException(\\\"No size provided\\\");\n}\nJenkins jenkins = Jenkins.getInstance();\nif (jenkins == null) {\nthrow new IllegalStateException(\\\"Jenkins instance is not available\\\");\n}\nAvatarCache cache = jenkins.getExtension(AvatarCache.class);\nif (cache == null) {\nthrow new IllegalStateException(\\\"Avatar cache is not available\\\");\n}\nString key = cache.seed(source, size);\ntry {\nreturn jenkins.getRootUrl() + ActionURI + \\\"/\\\" + URLEncoder.encode(key, StandardCharsets.UTF_8.name()) + \\\"/\\\" + size;\n} catch (UnsupportedEncodingException e) {\nthrow new IllegalStateException(\\\"UTF-8 encoding is not supported\\\");\n}\n}", "CodeBleu_score": 41.90391720916945}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\nif (image!= null) {\nif (image.getWidth() > 128 || image.getHeight() > 128) {\nimage = scaleImage(image, 128);\n}\nthis.image = image;\n}\nthis.lastModified = lastModified > 0? lastModified : System.currentTimeMillis();\n}", "CodeBleu_score": 55.45154651011535}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\nthis.image = image;\nthis.lastModified = lastModified;\n}", "CodeBleu_score": 17.434422944424384}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\nif (image!= null) {\nif (image.getWidth() > 128 || image.getHeight() > 128) {\nimage = scaleImage(image, 128);\n}\nthis.image = image;\n}\nthis.lastModified = lastModified < 0? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 60.613179607695585}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\tif (future == null) {\nreturn false;\n}\ntry {\nif (future.isDone()) {\nCacheEntry entry = future.get();\nimage = entry.image;\nlastModified = entry.lastModified;\nfuture = null;\nreturn false;\n}\n} catch (Exception e) {\n// ignore\n}\nreturn true;\n}", "CodeBleu_score": 44.758870535926945}, {"code": "private synchronized boolean pending(){\n\tif (future == null) {\nreturn false;\n}\ntry {\nif (future.isDone()) {\nCacheEntry entry = future.get();\nimage = entry.image;\nlastModified = entry.lastModified;\nfuture = null;\nreturn false;\n}\n} catch (InterruptedException e) {\n// ignore\n} catch (ExecutionException e) {\n// ignore\n}\nreturn true;\n}", "CodeBleu_score": 47.421627425531355}, {"code": "private synchronized boolean pending(){\n\tif (future == null) {\nreturn false;\n}\ntry {\nCacheEntry entry = future.get();\nif (entry!= null) {\nthis.image = entry.image;\nthis.lastModified = entry.lastModified;\nthis.future = null;\n}\n} catch (Exception e) {\n// ignore\n}\nreturn future!= null;\n}", "CodeBleu_score": 32.76610803387984}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\nBufferedImage image = this.image;\nif (flushImage) {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    ImageIO.write(image, \"png\", baos);\n    image.flush();\n    image = null;\n    byte[] bytes = baos.toByteArray();\n    baos.close();\n    rsp.setContentLength(bytes.length);\n    rsp.setContentType(\"image/png\");\n    rsp.addHeader(\"Cache-control\", cacheControl);\n    rsp.addDateHeader(\"Last-Modified\", lastModified);\n    OutputStream out = rsp.getOutputStream();\n    out.write(bytes);\n    out.flush();\n} else {\n    rsp.setContentLength(image.getWidth() * image.getHeight() * 4);\n    rsp.setContentType(\"image/png\");\n    rsp.addHeader(\"Cache-control\", cacheControl);\n    rsp.addDateHeader(\"Last-Modified\", lastModified);\n    OutputStream out = rsp.getOutputStream();\n    ImageIO.write(image, \"png\", out);\n    out.flush();\n}\n}", "CodeBleu_score": 46.464403991776706}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t//            rsp.setContentType(\"image/png\");\n            rsp.setContentType(\"image/jpeg\");\n            rsp.addDateHeader(\"Last-Modified\", lastModified);\n            rsp.addHeader(\"Cache-control\", cacheControl);\n            OutputStream os = rsp.getOutputStream();\n            try {\n                ImageIO.write(image, \"jpeg\", os);\n                if (flushImage) {\n                    os.flush();\n                }\n            } finally {\n                os.close();\n            }\n        }", "CodeBleu_score": 43.86704556730688}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\n/**\n * The image is written to a byte array output stream and flushed to the response output stream.\n */\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nImageIO.write(image, \"png\", baos);\nbaos.flush();\n\n/**\n * The image is written to the response output stream.\n */\nrsp.setContentType(\"image/png\");\nrsp.setContentLength(baos.size());\n\n/**\n * The byte array is written to the response output stream.\n */\nrsp.getOutputStream().write(baos.toByteArray());\n\n/**\n * The response is flushed.\n */\nrsp.flushBuffer();\n\n/**\n * The cache control header is set to the value of the cacheControl variable.\n */\nrsp.addHeader(\"Cache-control\", cacheControl);\n\n/**\n * The last modified header is set to the value of the lastModified variable.\n */\nrsp.addDateHeader(\"Last-Modified\", lastModified);\n\n/**\n * The response is committed.\n */\nrsp.commitResponse();\n\n/**\n * The image is flushed if the flushImage variable is true.\n */\nif (flushImage) {\nimage.flush();\n}\n}", "CodeBleu_score": 51.96139438733378}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tthis.enableCache = enableCache;\nthis.owner = owner;\nthis.projectKey = projectKey;\nthis.repositoryName = repositoryName;\nthis.authenticator = authenticator;\n\nif (enableCache) {\ncachedTeam.setExpireAfterWrite(teamCacheDuration, SECONDS);\ncachedRepositories.setExpireAfterWrite(repositoriesCacheDuration, SECONDS);\n}\n\n// Configure HTTP client\nRequestConfig requestConfig = RequestConfig.custom().setSocketTimeout(10 * 1000).setConnectTimeout(10 * 1000).build();\nHttpClientBuilder builder = HttpClientBuilder.create().setRetryHandler(new StandardHttpRequestRetryHandler(3, false))\n       .setDefaultRequestConfig(requestConfig).setConnectionManager(connectionManager);\n\n// Set client proxy if configured\nProxyConfiguration proxy = Jenkins.get().proxy;\nif (proxy!= null) {\nbuilder.setProxy(new HttpHost(proxy.name, proxy.port));\n}\n\n// Configure HTTP client for authentication\nif (authenticator!= null) {\nAuthCache authCache = new BasicAuthCache();\nCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\nUsernamePasswordCredentials credentials = new UsernamePasswordCredentials(authenticator.getCredentials().getUsername(),\n        authenticator.getCredentials().getPassword().getPlainText());\nauthCache.put(API_HOST, new BasicScheme());\ncredentialsProvider.setCredentials(AuthScope.ANY, credentials);\nbuilder.setDefaultCredentialsProvider(credentialsProvider);\nbuilder.setAuthCache(authCache);\n}\n\nclient = builder.build();\ncontext = HttpClientContext.create();\n}", "CodeBleu_score": 47.47657737107638}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tthis.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n        this.enableCache = enableCache;\n        if (enableCache) {\n            connectionManager.setDefaultMaxPerRoute(20);\n            connectionManager.setMaxTotal(22);\n            connectionManager.setSocketConfig(API_HOST, SocketConfig.custom().setSoTimeout(60 * 1000).build());\n            client = HttpClientBuilder.create()\n                   .setConnectionManager(connectionManager)\n                   .setRetryHandler(new StandardHttpRequestRetryHandler(3, false))\n                   .setKeepAliveStrategy(new BitbucketKeepAliveStrategy())\n                   .build();\n            context = HttpClientContext.create();\n            if (authenticator!= null) {\n                configureAuthentication(authenticator);\n            }\n            configureProxy();\n        } else {\n            client = HttpClientBuilder.create()\n                   .setConnectionManager(connectionManager)\n                   .setRetryHandler(new StandardHttpRequestRetryHandler(3, false))\n                   .build();\n            context = HttpClientContext.create();\n            if (authenticator!= null) {\n                configureAuthentication(authenticator);\n            }\n            configureProxy();\n        }\n        if (enableCache) {\n            cachedTeam.setExpireAfterAccess(teamCacheDuration, SECONDS);\n            cachedRepositories.setExpireAfterAccess(repositoriesCacheDuration, SECONDS);\n        }\n    }", "CodeBleu_score": 48.51167717672702}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t\nthis.enableCache = enableCache;\nthis.owner = owner;\nthis.projectKey = projectKey;\nthis.repositoryName = repositoryName;\nthis.authenticator = authenticator;\n\nif (enableCache) {\ncachedTeam.setExpiration(teamCacheDuration, SECONDS);\ncachedRepositories.setExpiration(repositoriesCacheDuration, SECONDS);\ncachedCommits.setExpiration(24, HOURS);\n}\n\nRequestConfig requestConfig = RequestConfig.custom().setSocketTimeout(10000).setConnectTimeout(10000).build();\n\nHttpClientBuilder builder = HttpClientBuilder.create();\nbuilder.setKeepAliveStrategy(new BitbucketCloudKeepAliveStrategy());\nbuilder.setRetryHandler(new StandardHttpRequestRetryHandler(3, false));\nbuilder.setConnectionManager(connectionManager);\nbuilder.setDefaultRequestConfig(requestConfig);\n\nProxyConfiguration proxy = Jenkins.get().proxy;\nif (proxy!= null) {\nbuilder.setProxy(new HttpHost(proxy.name, proxy.port));\n}\n\nclient = builder.build();\ncontext = HttpClientContext.create();\n\nif (authenticator!= null) {\nAuthCache authCache = new BasicAuthCache();\nauthCache.put(API_HOST, new BasicScheme());\n\nCredentialsProvider credsProvider = new BasicCredentialsProvider();\ncredsProvider.setCredentials(new AuthScope(API_HOST), new UsernamePasswordCredentials(authenticator.getUsername(), authenticator.getPassword()));\n\ncontext.setCredentialsProvider(credsProvider);\ncontext.setAuthCache(authCache);\n}\n}", "CodeBleu_score": 50.01007343389182}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\tString sourceBranch = pullRequest.getSource().getBranch().getName();\n\tif (sourceBranch!= null) {\n\t\tpullRequest.getSource().setCommit(new CommitClosure(sourceBranch));\n\t}\n\tString destinationBranch = pullRequest.getDestination().getBranch().getName();\n\tif (destinationBranch!= null) {\n\t\tpullRequest.getDestination().setCommit(new CommitClosure(destinationBranch));\n\t}\n}", "CodeBleu_score": 41.95836009873464}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\tString sourceBranch = pullRequest.getSource().getBranch().getName();\n\tString destinationBranch = pullRequest.getDestination().getBranch().getName();\n\tif (sourceBranch!= null) {\n\t\tpullRequest.setSourceBranchClosure(new CommitClosure(sourceBranch));\n\t}\n\tif (destinationBranch!= null) {\n\t\tpullRequest.setDestinationBranchClosure(new CommitClosure(destinationBranch));\n\t}\n}", "CodeBleu_score": 40.739756760025294}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\nif (pullRequest.getSource().getRepository()!= null) {\npullRequest.setSourceBranchCommitClosure(new CommitClosure(pullRequest.getSource().getRepository().getRawNode()));\n}\nif (pullRequest.getDestination().getRepository()!= null) {\npullRequest.setDestinationBranchCommitClosure(new CommitClosure(pullRequest.getDestination().getRepository().getRawNode()));\n}\n}", "CodeBleu_score": 29.113952826545486}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tenkinsLocationConfiguration configuration = JenkinsLocationConfiguration.get();\nif (configuration == null || configuration.getUrl() == null) {\nthrow new IllegalStateException(\\\"Jenkins URL is not configured\\\");\n}\nreturn DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 59.68780864836742}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tenkinsLocationConfiguration location = JenkinsLocationConfiguration.get();\nif (location == null) {\nthrow new IllegalStateException(\\\"Jenkins location configuration is null\\\");\n}\nURL rootUrl = location.getUrl();\nif (rootUrl == null) {\nthrow new IllegalStateException(\\\"Jenkins root URL is null\\\");\n}\nDisplayURLProvider displayURLProvider = DisplayURLProvider.get();\nif (displayURLProvider == null) {\nthrow new IllegalStateException(\\\"Display URL provider is null\\\");\n}\nreturn displayURLProvider.getRunURL(build);\n}", "CodeBleu_score": 46.635929915305496}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tenkinsLocationConfiguration location = JenkinsLocationConfiguration.get();\nif (location == null) {\nthrow new IllegalStateException(\\\"Jenkins location configuration is null\\\");\n}\nURL url = location.getUrl();\nif (url == null) {\nthrow new IllegalStateException(\\\"Jenkins location URL is null\\\");\n}\nreturn DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 54.464366207192306}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\tenkinsLocationConfiguration cfg = JenkinsLocationConfiguration.get();\n\nif (cfg == null || cfg.getUrl() == null) {\nthrow new IllegalStateException(\\\"Could not determine Jenkins URL.\\\");\n}\n\nString jenkinsUrl = cfg.getUrl();\n\nif (jenkinsUrl.equals(url)) {\nthrow new IllegalStateException(\\\"Bitbucket Cloud API requires fully qualified URL. Jenkins URL cannot be used.\\\");\n}\n\nif (jenkinsUrl.equals(\\\"unconfigured-jenkins-location\\\")) {\nthrow new IllegalStateException(\\\"Bitbucket Cloud API requires fully qualified URL. Jenkins URL cannot be \\\" + jenkinsUrl);\n        }\n\n        if (bitbucket.isCloud()) {\n            // Bitbucket Cloud API requires fully qualified URL\n            try {\n                new URL(jenkinsUrl);\n            } catch (MalformedURLException e) {\n                throw new IllegalStateException(\\\"Bitbucket Cloud API requires fully qualified URL. Jenkins URL cannot be \\\" + jenkinsUrl, e);\n            }\n        }\n\n        return url;\n    }", "CodeBleu_score": 49.403162717393315}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\tf (url.isEmpty()) {\nthrow new IllegalStateException(\\\"URL cannot be empty.\\\");\n}\ntry {\nURL parsedUrl = new URL(url);\nif (!parsedUrl.getProtocol().equalsIgnoreCase(\\\"http\\\") &&!parsedUrl.getProtocol().equalsIgnoreCase(\\\"https\\\")) {\nthrow new IllegalStateException(\\\"URL must use http or https protocol.\\\");\n}\nif (bitbucket.isCloud()) {\nString host = parsedUrl.getHost();\nif (StringUtils.isBlank(host) || host.equalsIgnoreCase(\\\"localhost\\\") || host.equalsIgnoreCase(\\\"unconfigured-jenkins-location\\\")) {\nthrow new IllegalStateException(\\\"URL must be fully qualified (e.g. https://example.com/jenkins).\\\");\n}\n}\n} catch (MalformedURLException e) {\nthrow new IllegalStateException(\\\"URL is malformed.\\\", e);\n}\nreturn url;\n}", "CodeBleu_score": 50.12696865265882}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\tif (url == null) {\nthrow new IllegalStateException(\\\"Could not determine Jenkins URL.\\\");\n}\n\ntry {\nURL jenkinsURL = new URL(url);\nString host = jenkinsURL.getHost();\n\nif (host == null) {\nthrow new IllegalStateException(\\\"Could not determine Jenkins URL.\\\");\n}\n\nif (host.equalsIgnoreCase(\\\"localhost\\\") || host.equalsIgnoreCase(\\\"unconfigured-jenkins-location\\\")) {\nthrow new IllegalStateException(\\\"Invalid Jenkins URL: \\\" + url);\n}\n\nif (bitbucket.isCloud()) {\nif (jenkinsURL.getProtocol().equalsIgnoreCase(\\\"http\\\")) {\nthrow new IllegalStateException(\\\"Invalid Jenkins URL: \\\" + url);\n}\n\nif (jenkinsURL.getPort() == -1) {\nthrow new IllegalStateException(\\\"Invalid Jenkins URL: \\\" + url);\n}\n\nif (jenkinsURL.getProtocol().equalsIgnoreCase(\\\"https\\\") && host.indexOf('.') == -1) {\nthrow new IllegalStateException(\\\"Invalid Jenkins URL: \\\" + url);\n}\n}\n\nreturn url;\n} catch (MalformedURLException e) {\nthrow new IllegalStateException(\\\"Invalid Jenkins URL: \\\" + url);\n}\n}", "CodeBleu_score": 37.7479401956356}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\n// Initialize the Bitbucket context.\nBitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n\n// Check if notifications are disabled.\nif (context.disableNotifications()) {\nlistener.getLogger().println(\"[Bitbucket] Build status notifications are disabled.\");\nreturn;\n}\n\n// Retrieve the SCM revision and its hash.\nSCMRevision revision = build.getRevision();\nString hash = revision.getHash();\n\n// Determine whether to share the build key between branch and PR.\nString buildKey = source.getBuildKey(build);\nboolean shareBuildKey = source.shareBuildKey(build);\n\n// Log the notification type.\nif (revision instanceof BranchSCMRevision) {\nlistener.getLogger().println(\"[Bitbucket] Branch build status notification\");\n} else if (revision instanceof PullRequestSCMRevision) {\nlistener.getLogger().println(\"[Bitbucket] Pull request build status notification\");\n} else {\nlistener.getLogger().println(\"[Bitbucket] Commit build status notification\");\n}\n\n// Construct the build key.\nString key = buildKey;\nif (shareBuildKey) {\nkey = source.getBuildKey(build) + \"-\" + hash;\n}\n\n// Initialize the Bitbucket client.\nBitbucketApi bitbucket = source.getBitbucket();\n\n// Create and send the build status notification.\ncreateStatus(build, listener, bitbucket, key, hash);\n}", "CodeBleu_score": 43.56473799595976}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\n// Create the Bitbucket context and check if notifications are disabled.\nBitbucketSCMSourceContext context = new BitbucketSCMSourceContext(build, SCMHeadObserver.none()).withTraits(source.getTraits());\nif (context.disableNotifications()) {\nreturn;\n}\n\n// Get the SCM revision and its hash.\nSCMRevision revision = context.getRevision();\nString hash = revision.getHash();\n\n// Determine whether to share the build key between branch and PR.\nboolean shareBuildKey = false;\nif (revision instanceof BranchSCMRevision) {\nshareBuildKey = true;\n} else if (revision instanceof PullRequestSCMRevision) {\nshareBuildKey = context.shareBuildKey();\n}\n\n// Log the notification type and construct the build key.\nString notificationType = revision instanceof BranchSCMRevision? \"branch\" : \"pull request\";\nString key = shareBuildKey? build.getExternalizableId() : hash;\nlistener.getLogger().println(\"[Bitbucket] Notifying \" + notificationType + \" \" + key + \" of build result\");\n\n// Initialize the Bitbucket client and create and send the build status notification.\nBitbucketApi bitbucket = context.getBitbucket();\ncreateStatus(build, listener, bitbucket, key, hash);\n}", "CodeBleu_score": 36.1929879534476}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\nBitbucketApi bitbucket = source.getBitbucketApi();\n\nif (bitbucket == null) {\nlistener.getLogger().println(\\\"[Bitbucket] Bitbucket API is not configured, build status notifications are disabled.\\\");\nreturn;\n}\n\nif (source.isDisableNotifications()) {\nlistener.getLogger().println(\\\"[Bitbucket] Build status notifications are disabled.\\\");\nreturn;\n}\n\nSCMRevision revision = build.getRevision();\n\nif (revision instanceof SCMRevisionAction) {\nlistener.getLogger().println(\\\"[Bitbucket] Build status notifications are disabled for this build.\\\");\nreturn;\n}\n\nSCMRevisionState state = revision.getChangeSet();\n\nif (state == null) {\nlistener.getLogger().println(\\\"[Bitbucket] Build status notifications are disabled for this build.\\\");\nreturn;\n}\n\nString hash = state.getHash();\n\nif (hash == null) {\nlistener.getLogger().println(\\\"[Bitbucket] Build status notifications are disabled for this build.\\\");\nreturn;\n}\n\nString key = build.getExternalizableId();\n\nif (source.isShareBuildKey()) {\nkey = build.getParent().getExternalizableId();\n}\n\ncreateStatus(build, listener, bitbucket, key, hash);\n}", "CodeBleu_score": 36.48025295481624}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t String jobName = build.getParent().getFullName();\n if (shareBuildKeyBetweenBranchAndPR) {\n return jobName + \\\"/\\\" + branch;\n } else {\n return jobName;\n }\n }", "CodeBleu_score": 30.51001248079979}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t String key = build.getDisplayName();\n if (shareBuildKeyBetweenBranchAndPR) {\n key = key + \\\"/\\\" + branch;\n }\n return key;\n }", "CodeBleu_score": 27.473162179346655}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t String jobName = build.getParent().getFullName();\n String folderName = build.getParent().getParent().getFullName();\n if (shareBuildKeyBetweenBranchAndPR) {\n return String.format(\\\"%s/%s\\\", folderName, branch);\n } else {\n return jobName;\n }\n }", "CodeBleu_score": 53.0399580708137}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\tif (serverUrl == null) {\nLOGGER.log(Level.WARNING, \\\"BitbucketSCMNavigator.readResolve: serverUrl is null. Setting to \\\" + BitbucketCloudEndpoint.SERVER_URL + \\\".\\\");\nserverUrl = BitbucketCloudEndpoint.SERVER_URL;\n}\nif (traits == null) {\nLOGGER.log(Level.WARNING, \\\"BitbucketSCMNavigator.readResolve: traits are null. Reconstructing legacy traits.\\\");\nList<SCMTrait<? extends SCMTrait<?>>> newTraits = new ArrayList<>();\nif (checkoutCredentialsId!= null) {\nnewTraits.add(new SSHCheckoutTrait(checkoutCredentialsId));\n}\nnewTraits.add(new BranchDiscoveryTrait(true, true));\nnewTraits.add(new OriginPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD)));\nnewTraits.add(new ForkPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD),\nnew ForkPullRequestDiscoveryTrait.TrustEveryone()));\nnewTraits.add(new PublicRepoPullRequestFilterTrait());\ntraits = newTraits;\n}\nreturn this;\n}", "CodeBleu_score": 16.620741419065478}, {"code": "private Object readResolve() throws ObjectStreamException{\n\tif (serverUrl == null) {\nLOGGER.log(Level.WARNING, \\\"BitbucketSCMNavigator serverUrl is null. Setting to {0}\\\", BitbucketCloudEndpoint.SERVER_URL);\n\nserverUrl = BitbucketCloudEndpoint.SERVER_URL;\n\n}\nif (traits == null) {\nLOGGER.log(Level.WARNING, \\\"BitbucketSCMNavigator traits is null. Reconstructing legacy traits\\\");\n\n// code invoking legacy constructor will want the legacy discovery model\n\ntraits = new ArrayList<>();\n\ntraits.add(new BranchDiscoveryTrait(true, true));\n\ntraits.add(new OriginPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD)));\n\ntraits.add(new ForkPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD),\n\nnew ForkPullRequestDiscoveryTrait.TrustEveryone()));\n\ntraits.add(new PublicRepoPullRequestFilterTrait());\n\n}\nreturn this;\n\n}", "CodeBleu_score": 14.195469368830535}, {"code": "private Object readResolve() throws ObjectStreamException{\n\tif (this.serverUrl == null) {\nthis.serverUrl = BitbucketCloudEndpoint.SERVER_URL;\nLOGGER.log(Level.WARNING, \\\"BitbucketSCMNavigator is missing the server URL. Defaulting to \\\" + BitbucketCloudEndpoint.SERVER_URL + \\\". This will be changed to an exception in a future release.\\\");\n}\nif (this.traits == null) {\nthis.traits = new ArrayList<>();\nthis.traits.add(new BranchDiscoveryTrait(true, true));\nthis.traits.add(new OriginPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD)));\nthis.traits.add(new ForkPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD),\nnew ForkPullRequestDiscoveryTrait.TrustEveryone()));\nthis.traits.add(new PublicRepoPullRequestFilterTrait());\n}\nreturn this;\n}", "CodeBleu_score": 13.076549325201075}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\tif (isMatch) {\ncount++;\n}\nif (listener!= null) {\nlistener.getLogger().println(String.format(Messages._BitbucketSCMNavigator_RepositoryMatch_LogMessage(name, isMatch), count));\n}\n}", "CodeBleu_score": 28.52147368142635}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t", "CodeBleu_score": 7.373087822285737}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t", "CodeBleu_score": 7.373087822285737}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t//        if (marked == null) {\n//            return rev;\n//        }\n\n//        if (!marked.getSha1().equals(rev.getSha1())) {\n//            return rev;\n//        }\n\n        List<RefSpec> refSpecs = branchWithHashes.stream()\n           .filter(branchWithHash ->!branchWithHash.getHash().equals(marked.getSha1()))\n           .map(branchWithHash -> {\n                try {\n                    return new RefSpec(\"refs/remotes/\" + remoteName + \"/\" + branchWithHash.getBranch() + \":refs/remotes/\" + remoteName + \"/\" + branchWithHash.getBranch());\n                } catch (URISyntaxException e) {\n                    throw new RuntimeException(e);\n                }\n            })\n           .collect(Collectors.toList());\n\n        if (refSpecs.size() > 0) {\n            try {\n                FetchCommand fetchCommand = git.fetch(cloneLink, refSpecs);\n                fetchCommand.execute();\n            } catch (GitException e) {\n                throw new RuntimeException(e);\n            }\n        }\n\n        return rev;\n    }", "CodeBleu_score": 61.012078048663284}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t//        listener.getLogger().println(\"decorating revision to build\");\n//        listener.getLogger().println(String.format(\"marked revision: %s\", marked.getSha1String()));\n//        listener.getLogger().println(String.format(\"revision to build: %s\", rev.getSha1String()));\n//        listener.getLogger().println(String.format(\"clone link: %s\", cloneLink));\n//        listener.getLogger().println(String.format(\"remote name: %s\", remoteName));\n//        listener.getLogger().println(String.format(\"branch with hashes: %s\", branchWithHashes.toString()));\n\n        List<BranchWithHash> branchesToFetch = branchWithHashes.stream()\n           .filter(branchWithHash ->!branchWithHash.getHash().equals(rev.getSha1String()))\n           .collect(Collectors.toList());\n\n        if (branchesToFetch.size() > 0) {\n            listener.getLogger().println(String.format(\"Branches to fetch: %s\", branchesToFetch.toString()));\n            try {\n                URIish uri = new URIish(cloneLink);\n                uri.setPath(uri.getPath() + \".git\");\n                uri.setFragment(\"\");\n                FetchCommand fetchCommand = git.fetch(uri, branchesToFetch.stream().map(BranchWithHash::getBranch).collect(Collectors.toList()));\n                fetchCommand.setRemote(remoteName);\n                fetchCommand.setRefSpecs(branchesToFetch.stream().map(BranchWithHash::getRefSpec).collect(Collectors.toList()));\n                fetchCommand.execute();\n            } catch (GitException | URISyntaxException e) {\n                throw new RuntimeException(e);\n            }\n        }\n\n        return rev;\n    }", "CodeBleu_score": 49.118787962007225}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tif (rev.getHash()!= null) {\n\t    // If the revision is a commit hash, we don't need to do anything.\n\t    return rev;\n\t}\n\n\tList<RefSpec> refSpecs = getRefSpecs(rev.getBranch());\n\tif (refSpecs.isEmpty()) {\n\t    // If the revision is a branch, we don't need to do anything.\n\t    return rev;\n\t}\n\n\t// If we get here, we need to fetch the missing commits from the remote repository.\n\tFetchCommand fetch = git.fetch(remoteName, refSpecs);\n\tfetch.setRemote(cloneLink);\n\tfetch.setForce(true);\n\tfetch.setTags(true);\n\tfetch.setRemoveDeletedRefs(true);\n\tfetch.execute();\n\n\treturn rev;\n    }", "CodeBleu_score": 24.037483117242996}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t(links == null) {\nreturn null;\n}\nMap<String, BitbucketHref> result = new HashMap<>();\nfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\nresult.put(entry.getKey(), entry.getValue().get(0));\n}\nreturn result;\n}", "CodeBleu_score": 65.17991191195722}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t(links == null) {\nreturn null;\n}\nMap<String, BitbucketHref> result = new HashMap<>();\nfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\nresult.put(entry.getKey(), entry.getValue().get(0));\n}\nreturn result;\n}", "CodeBleu_score": 65.17991191195722}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t(links == null) {\nreturn null;\n}\nMap<String, BitbucketHref> result = new HashMap<>();\nfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\nif (entry.getValue()!= null &&!entry.getValue().isEmpty()) {\nresult.put(entry.getKey(), entry.getValue().get(0));\n}\n}\nreturn result;\n}", "CodeBleu_score": 73.93514561417545}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tif (resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\t// Get the resource states and map them to their URIs\n\tconst uris = resourceStates.map(resource => resource.resourceUri);\n\n\t// Process each repository\n\tfor (const repository of this.repositories) {\n\t\t// Get the file paths from the resource states\n\t\tconst paths = uris.map(uri => this.toFilePath(uri, repository));\n\n\t\t// Attempt to add the paths to the repository\n\t\ttry {\n\t\t\tawait repository.add(paths);\n\t\t} catch (e) {\n\t\t\t// Log the error\n\t\t\tconsole.error(e);\n\n\t\t\t// Show an error message\n\t\t\twindow.showErrorMessage(`Failed to add ${paths.join(\", \")} to ${repository.name}`);\n\t\t}\n\t}\n}", "CodeBleu_score": 49.95079261060784}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tif (!resourceStates || resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\tconst uris = await Promise.all(resourceStates.map(async (resourceState) => {\n\t\tconst uri = await resourceState.resourceUri;\n\t\treturn uri.toString();\n\t}));\n\n\tfor (const uri of uris) {\n\t\ttry {\n\t\t\tawait this.add(uri);\n\t\t} catch (error) {\n\t\t\twindow.showErrorMessage(`Failed to add ${uri}.`);\n\t\t\tconsole.error(error);\n\t\t}\n\t}\n}", "CodeBleu_score": 44.54513751585081}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\t// If no resources are selected, return\n\tif (resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\t// Get the URIs of the selected resources\n\tconst uris = resourceStates.map((resourceState) => resourceState.resourceUri);\n\n\t// Process each repository\n\tfor (const repository of this.repositories) {\n\t\t// Convert the resources to file paths\n\t\tconst filePaths = uris.map((uri) => repository.toLocalPath(uri));\n\n\t\t// Attempt to add the files to the repository\n\t\ttry {\n\t\t\tawait repository.add(filePaths);\n\t\t} catch (error) {\n\t\t\t// Log the error\n\t\t\tconsole.error(error);\n\n\t\t\t// Show an error message\n\t\t\twindow.showErrorMessage(`Failed to add files to ${repository.name}`);\n\t\t}\n\t}\n}", "CodeBleu_score": 47.12167243906905}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\tconst resourceStates = await commands.executeCommand(\n\t\t\"svn.getResourceStates\",\n\t\tthis.resourceStates\n\t);\n\n\tif (\n\t\t!resourceStates ||\n\t\t!resourceStates.length ||\n\t\t!(resourceStates[0] instanceof Uri)\n\t) {\n\t\treturn Promise.resolve([]);\n\t}\n\n\tconst result = await commands.executeCommand(\n\t\t\"svn.getResourceStates\",\n\t\tresourceStates\n\t);\n\n\treturn result.filter(resourceState => resourceState instanceof Resource);\n}", "CodeBleu_score": 38.37013813256021}, {"code": "protected async getResourceStates{\n\tonst resourceStates = await this.repository.getResourceStates(this.resourceStates);\n\nif (resourceStates.length === 0 || resourceStates[0] instanceof Uri) {\nconst resourceState = await this.repository.getResourceState(resourceStates[0]);\n\nif (resourceState) {\nthis.resourceStates = [resourceState];\n}\n\nreturn this.resourceStates.filter(resourceState => resourceState instanceof Resource);\n}\n\nreturn resourceStates;\n}", "CodeBleu_score": 40.39842602913952}, {"code": "protected async getResourceStates{\n\tconst resourceStates = await commands.executeCommand(\n\t\t\"svn.getResourceStates\",\n\t\tthis.resourceStates\n\t);\n\n\tif (\n\t\t!resourceStates ||\n\t\t!resourceStates.length ||\n\t\t!resourceStates[0] instanceof Uri\n\t) {\n\t\treturn [];\n\t}\n\n\tconst resourceState = await commands.executeCommand(\n\t\t\"svn.getResourceState\",\n\t\tresourceStates[0]\n\t);\n\n\tif (!resourceState) {\n\t\treturn [];\n\t}\n\n\tconst filteredResourceStates = resourceStates.filter(\n\t\t(resourceState: any) => resourceState instanceof Resource\n\t);\n\n\treturn filteredResourceStates;\n}", "CodeBleu_score": 35.95518773743631}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\tIf no URI is provided, use the URI of the active text editor.\n    if (!uri) {\n      const activeTextEditor = window.activeTextEditor;\n\n      if (!activeTextEditor) {\n        return undefined;\n      }\n\n      uri = activeTextEditor.document.uri;\n    }\n\n    // If the URI is in the \"svn\" scheme, convert it to a file URI.\n    if (uri.scheme === \\\"svn\\\") {\n      const fileUri = toSvnUri(uri);\n\n      if (!fileUri) {\n        return undefined;\n      }\n\n      uri = fileUri;\n    }\n\n    // Get the source control manager and retrieve the repository for the URI.\n    const sourceControlManager = (await commands.executeCommand(\n      \\\"svn.getSourceControlManager\\\",\n      \\\"\\\"\n    )) as SourceControlManager;\n    const repository = sourceControlManager.getRepository(uri);\n\n    if (!repository) {\n      return undefined;\n    }\n\n    // Return the corresponding resource.\n    return repository.resource;\n  }", "CodeBleu_score": 55.845373818221674}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t1. If no URI is provided, it uses the URI of the active text editor.\n    if (!uri) {\n      const activeTextEditor = window.activeTextEditor;\n      if (!activeTextEditor) {\n        return undefined;\n      }\n\n      uri = activeTextEditor.document.uri;\n    }\n\n// 2. If the URI is in the \"svn\" scheme, it converts it to a file URI.\n    if (uri.scheme === \\\"svn\\\") {\n      const fileUri = toFileUri(uri);\n      if (!fileUri) {\n        return undefined;\n      }\n\n      uri = fileUri;\n    }\n\n// 3. It gets the source control manager and retrieves the repository for the URI, returning the corresponding resource.\n    const sourceControlManager = (await commands.executeCommand(\\\"svn.getSourceControlManager\\\", \\\"\\\")) as SourceControlManager;\n    const repository = sourceControlManager.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n\n    return repository.getResource(uri);\n  }", "CodeBleu_score": 49.332262708793664}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t\n * If no URI is provided, it uses the URI of the active text editor.\n */\n    if (!uri) {\n      const editor = window.activeTextEditor;\n\n      if (!editor) {\n        return;\n      }\n\n      uri = editor.document.uri;\n    }\n\n/**\n * If the URI is in the \"svn\" scheme, it converts it to a file URI.\n */\n    if (uri.scheme === \\\"svn\\\") {\n      uri = Uri.file(toSvnUri(uri).fsPath);\n    }\n\n/**\n * For file URIs, it gets the source control manager and retrieves the repository for the URI, returning the corresponding resource.\n */\n    const sourceControlManager = (await commands.executeCommand(\n\n      \\\"svn.getSourceControlManager\\\",\n\n      \\\"\\\"\n\n    )) as SourceControlManager;\n\n    const repository = sourceControlManager.getRepository(uri);\n\n    if (!repository) {\n      return;\n    }\n\n    return repository.getResource(uri);\n  }", "CodeBleu_score": 47.38119425567449}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\tif (element.item === Status.MODIFIED) {\nreturn openDiff(element.repo, element.oldPath, element.oldRevision, element.newPath, element.newRevision);\n} else if (element.item === Status.ADDED) {\nreturn openFileRemote(element.repo, element.newPath, element.newRevision);\n}\n}", "CodeBleu_score": 41.71934058143318}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\tif (element.item === Status.MODIFIED) {\n\nconst oldRepo = this.model.getRepository(element.oldPath.fsPath);\nconst newRepo = this.model.getRepository(element.newPath.fsPath);\n\nif (oldRepo === undefined || newRepo === undefined) {\n\nreturn;\n\n}\n\nconst oldRevision = element.oldRevision;\nconst newRevision = element.newRevision;\n\nif (oldRevision === undefined || newRevision === undefined) {\n\nreturn;\n\n}\n\nconst oldPath = element.oldPath;\nconst newPath = element.newPath;\n\nif (oldPath === undefined || newPath === undefined) {\n\nreturn;\n\n}\n\nopenDiff(oldRepo, oldRevision, oldPath, newRepo, newRevision, newPath);\n\n} else if (element.item === Status.ADDED) {\n\nconst repo = this.model.getRepository(element.newPath.fsPath);\n\nif (repo === undefined) {\n\nreturn;\n\n}\n\nconst revision = element.newRevision;\nconst path = element.newPath;\n\nif (revision === undefined || path === undefined) {\n\nreturn;\n\n}\n\nopenFileRemote(repo, revision, path);\n\n}\n\n}", "CodeBleu_score": 43.14444739517766}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t\n  if (element.item === Status.MODIFIED) {\n    const repo = this.model.getRepository(element.repo.fsPath);\n    if (repo!== undefined) {\n      const diff = await repo.getDiff(element.oldPath, element.oldRevision, element.newPath, element.newRevision);\n      await openDiff(diff, element.newPath, element.newRevision);\n    }\n  } else if (element.item === Status.ADDED) {\n    await openFileRemote(element.newPath, element.newRevision, element.repo.fsPath);\n  }\n}", "CodeBleu_score": 55.801296202541415}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (what === \\\"revision\\\") {\n\t\t// Copy revision to clipboard\n\t\tconst revision = item.data.revision;\n\t\tawait env.clipboard.writeText(revision);\n\t\twindow.showInformationMessage(`Revision ${revision} copied to clipboard`);\n\t} else {\n\t\t// Copy commit message to clipboard\n\t\tconst message = item.data.message;\n\t\tawait env.clipboard.writeText(message);\n\t\twindow.showInformationMessage(`Commit message copied to clipboard`);\n\t}\n}", "CodeBleu_score": 30.40569291337692}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (window.clipboard.writeText) {\n\t\tconst commit = item.data as ISvnLogEntry;\n\t\tif (commit) {\n\t\t\tawait window.clipboard.writeText(what === \\\"message\\\"? commit.message : commit.revision);\n\t\t}\n\t} else {\n\t\twindow.showErrorMessage(\\`Copying commit to clipboard is not supported on this platform.\\`);\n\t}\n}", "CodeBleu_score": 32.69182744422288}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (what === \\\"message\\\") {\n\t\tif (item.data instanceof ISvnLogEntry) {\n\t\t\tconst message = item.data.message;\n\t\t\tif (message) {\n\t\t\t\tawait commands.executeCommand(\n\t\t\t\t\t\\\"vscode.env.clipboard\\\",\n\t\t\t\t\t\\\"writeText\\\",\n\t\t\t\t\tmessage\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t} else if (what === \\\"revision\\\") {\n\t\tif (item.data instanceof ISvnLogEntry) {\n\t\t\tconst revision = item.data.revision;\n\t\t\tif (revision) {\n\t\t\t\tawait commands.executeCommand(\n\t\t\t\t\t\\\"vscode.env.clipboard\\\",\n\t\t\t\t\t\\\"writeText\\\",\n\t\t\t\t\trevision.toString()\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 32.82283598420782}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tGiteaConnectionFactory factory = null;\n\n// Iterate through the factories to find the most suitable one based on their ability to open the connection and their priority.\nfor (GiteaConnectionFactory f : ServiceLoader.load(GiteaConnectionFactory.class, classLoader())) {\ntry {\nif (f.canConnect(serverUrl(), authentication())) {\nfactory = f;\nbreak;\n}\n} catch (IOException | InterruptedException e) {\n// Ignore this factory\n}\n}\n\n// If a suitable factory is found, open the connection.\nif (factory!= null) {\nreturn factory.connect(serverUrl(), authentication());\n}\n\n// If no suitable factory is found, throw an IOException.\nthrow new IOException(\\\"No suitable GiteaConnectionFactory found\\\");\n}", "CodeBleu_score": 27.30024100363154}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t", "CodeBleu_score": 1.4654881322104412}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tGiteaConnectionFactory factory = null;\n\nfor (GiteaConnectionFactory f : ServiceLoader.load(GiteaConnectionFactory.class, classLoader)) {\ntry {\nGiteaConnection c = f.open(serverUrl, authentication);\nif (factory == null || f.priority() > factory.priority()) {\nfactory = f;\n}\nif (c!= null) {\nreturn c;\n}\n} catch (IOException e) {\n// ignore\n}\n}\n\nif (factory == null) {\nthrow new IOException(Messages.Gitea_NoConnectionFactory());\n} else {\nthrow new IOException(Messages.Gitea_NoConnection(factory.name()));\n}\n}", "CodeBleu_score": 34.139067053643416}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\tf (classLoader == null) {\n\t\tif (Jenkins.getInstance()!= null) {\n\t\t\tclassLoader = Jenkins.getInstance().getPluginManager().uberClassLoader;\n\t\t} else {\n\t\t\tclassLoader = getClass().getClassLoader();\n\t\t}\n\t}\n\treturn this;\n}", "CodeBleu_score": 46.87919026511655}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\tf (classLoader == null) {\n\t\tJenkins jenkins = Jenkins.getInstanceOrNull();\n\t\tif (jenkins!= null) {\n\t\t\tclassLoader = jenkins.getPluginManager().uberClassLoader;\n\t\t} else {\n\t\t\tclassLoader = getClass().getClassLoader();\n\t\t}\n\t}\n\treturn this;\n}", "CodeBleu_score": 51.237350920293245}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\tlassLoader classLoader = Jenkins.get().getPluginManager().getPlugin(Gitea.class).getPluginClassLoader();\n\tif (classLoader == null) {\n\t\tclassLoader = Gitea.class.getClassLoader();\n\t}\n\treturn classLoader(classLoader);\n}", "CodeBleu_score": 42.65554436798713}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tthis.displayName = displayName;\nthis.serverUrl = serverUrl.trim();\nthis.manageHooks = manageHooks;\nthis.credentialsId = credentialsId;\nthis.aliasUrl = aliasUrl!= null? aliasUrl.trim() : null;\n}", "CodeBleu_score": 25.69289062044662}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tthis.displayName = displayName;\nthis.serverUrl = Util.fixEmptyAndTrim(serverUrl);\nthis.manageHooks = manageHooks;\nthis.credentialsId = credentialsId;\nthis.aliasUrl = Util.fixEmptyAndTrim(aliasUrl);\nif (StringUtils.isEmpty(this.serverUrl)) {\nthrow new IllegalArgumentException(Messages.GiteaServer_EmptyUrl());\n}\nif (StringUtils.isEmpty(this.aliasUrl)) {\nthis.aliasUrl = this.serverUrl;\n}\nthis.normalizeServerUrl();\nthis.normalizeAliasUrl();\n}", "CodeBleu_score": 39.872798825974606}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t", "CodeBleu_score": 12.653061224489798}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\tJenkins.get().checkPermission(Jenkins.ADMINISTER);\nserverUrl = GiteaServers.normalizeServerUrl(serverUrl);\nList<StandardCredentials> credentials = CredentialsProvider.lookupCredentials(StandardCredentials.class, Jenkins.get(), ACL.SYSTEM, URIRequirementBuilder.fromUri(serverUrl).build());\nList<ListBoxModel.Option> result = new ArrayList<>();\nfor (StandardCredentials c : credentials) {\nif (AuthenticationTokens.matcher(GiteaAuth.class).matches(c)) {\nresult.add(new ListBoxModel.Option(c.getId(), c.getId()));\n}\n}\nreturn new ListBoxModel(result);\n}", "CodeBleu_score": 53.0696843654094}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t", "CodeBleu_score": 3.45979953399745}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\tJenkins.get().checkPermission(Jenkins.ADMINISTER);\nserverUrl = GiteaServers.normalizeServerUrl(serverUrl);\nList<ListBoxModel.Option> options = new ArrayList<>();\nfor (StandardCredentials c : CredentialsProvider.lookupCredentials(StandardCredentials.class, Jenkins.get(), ACL.SYSTEM, URIRequirementBuilder.fromUri(serverUrl).build())) {\nif (AuthenticationTokens.matcher(GiteaAuth.class).matches(c)) {\noptions.add(new ListBoxModel.Option(c.getId(), c.getDescription(), c.getId()));\n}\n}\nreturn new ListBoxModel(options);\n}", "CodeBleu_score": 50.0042836383626}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl.toLowerCase(Locale.ENGLISH));\n\t\tif (uri.getScheme() == null) {\n\t\t\t// If there is no scheme, assume http\n\t\t\turi = new URI(\"http\", uri.getAuthority(), uri.getPath(), uri.getQuery(), uri.getFragment());\n\t\t}\n\t\tif (uri.getPort() == -1) {\n\t\t\tif (uri.getScheme().equals(\"http\")) {\n\t\t\t\turi = new URI(\"http\", uri.getAuthority(), uri.getPath(), uri.getQuery(), uri.getFragment());\n\t\t\t} else if (uri.getScheme().equals(\"https\")) {\n\t\t\t\turi = new URI(\"https\", uri.getAuthority(), uri.getPath(), uri.getQuery(), uri.getFragment());\n\t\t\t}\n\t\t}\n\t\t// Remove trailing slash\n\t\tString path = uri.getPath();\n\t\tif (path.endsWith(\"/\")) {\n\t\t\tpath = path.substring(0, path.length() - 1);\n\t\t}\n\t\treturn uri.getScheme() + \"://\" + uri.getAuthority() + path;\n\t} catch (URISyntaxException e) {\n\t\t// Ignore\n\t}\n\treturn serverUrl;\n}", "CodeBleu_score": 37.424419784394246}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\nreturn null;\n}\ntry {\nURI uri = new URI(serverUrl.toLowerCase(Locale.ENGLISH));\nserverUrl = uri.getScheme() + \"://\" + uri.getHost();\nif (uri.getPort() == 80 || uri.getPort() == 443) {\nserverUrl += \"/\";\n} else if (uri.getPort()!= -1) {\nserverUrl += \":\" + uri.getPort() + \"/\";\n}\n} catch (URISyntaxException e) {\n// Ignore.\n}\nif (serverUrl.endsWith(\"/\")) {\nserverUrl = serverUrl.substring(0, serverUrl.length() - 1);\n}\nreturn serverUrl;\n}", "CodeBleu_score": 28.788231836320165}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\nreturn null;\n}\ntry {\nURI uri = new URI(serverUrl.toLowerCase(Locale.ENGLISH));\nString scheme = uri.getScheme();\nint port = uri.getPort();\nString host = uri.getHost();\nif (scheme == null) {\nreturn null;\n}\nif (port == -1) {\nif (scheme.equals(GiteaServer.SCHEME_HTTP)) {\nport = 80;\n} else if (scheme.equals(GiteaServer.SCHEME_HTTPS)) {\nport = 443;\n}\n}\nif (host == null) {\nreturn null;\n}\nreturn scheme + \"://\" + host + (port!= -1? \":\" + port : \"\") + uri.getPath().endsWith(\"/\")? uri.getPath().substring(0, uri.getPath().length() - 1) : uri.getPath();\n} catch (URISyntaxException e) {\n// Ignore\n}\nreturn null;\n}", "CodeBleu_score": 32.79005093101047}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\ttBoxModel model = new ListBoxModel();\n\tfor (GiteaServer server : getServers()) {\n\t\tif (StringUtils.isNotBlank(server.getDisplayName())) {\n\t\t\tmodel.add(server.getDisplayName(), server.getServerUrl());\n\t\t} else {\n\t\t\tmodel.add(server.getServerUrl());\n\t\t}\n\t}\n\treturn model;\n}", "CodeBleu_score": 36.839344993541125}, {"code": "public ListBoxModel getServerItems(){\n\ttBoxModel model = new ListBoxModel();\n\tfor (GiteaServer server : getServers()) {\n\t\tString displayName = server.getDisplayName();\n\t\tif (StringUtils.isBlank(displayName)) {\n\t\t\tdisplayName = server.getServerUrl();\n\t\t}\n\t\tmodel.add(displayName, server.getServerUrl());\n\t}\n\treturn model;\n}", "CodeBleu_score": 49.80747123259908}, {"code": "public ListBoxModel getServerItems(){\n\ttBoxModel model = new ListBoxModel();\n\tfor (GiteaServer server : getServers()) {\n\t\tString displayName = server.getDisplayName();\n\t\tif (displayName!= null &&!displayName.isEmpty()) {\n\t\t\tmodel.add(displayName, server.getServerUrl());\n\t\t} else {\n\t\t\tmodel.add(server.getServerUrl());\n\t\t}\n\t}\n\treturn model;\n}", "CodeBleu_score": 47.00543989705274}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tif (servers == null) {\nservers = Collections.emptyList();\n}\nSet<String> urls = new HashSet<>();\nList<GiteaServer> newServers = new ArrayList<>();\nfor (GiteaServer server : servers) {\nString serverUrl = server.getServerUrl();\nif (serverUrl == null) {\ncontinue;\n}\nserverUrl = normalizeServerUrl(serverUrl);\nif (urls.contains(serverUrl)) {\ncontinue;\n}\nurls.add(serverUrl);\nnewServers.add(server);\n}\nthis.servers = Collections.unmodifiableList(newServers);\nsave();\n}", "CodeBleu_score": 39.68620844389223}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tthis.servers = new ArrayList<>(servers);\nSet<String> serverUrls = new HashSet<>();\nListIterator<GiteaServer> it = this.servers.listIterator();\nwhile (it.hasNext()) {\nGiteaServer server = it.next();\nif (server == null) {\nit.remove();\ncontinue;\n}\nString serverUrl = server.getServerUrl();\nif (serverUrl == null || serverUrl.isEmpty()) {\nit.remove();\ncontinue;\n}\nserverUrl = normalizeServerUrl(serverUrl);\nif (serverUrls.contains(serverUrl)) {\nit.remove();\ncontinue;\n}\nserverUrls.add(serverUrl);\n}\nsave();\n}", "CodeBleu_score": 49.23103766636361}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tif (servers == null) {\nservers = Collections.emptyList();\n}\nSet<String> serverUrls = new HashSet<>();\nList<GiteaServer> newServers = new ArrayList<>();\nfor (GiteaServer server : servers) {\nif (server == null) {\ncontinue;\n}\nString serverUrl = server.getServerUrl();\nif (StringUtils.isBlank(serverUrl)) {\ncontinue;\n}\nserverUrl = normalizeServerUrl(serverUrl);\nif (!serverUrls.add(serverUrl)) {\ncontinue;\n}\nnewServers.add(server);\n}\nthis.servers = newServers;\nsave();\n}", "CodeBleu_score": 44.014577663960765}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn false;\n\t}\n\tserverUrl = serverUrl.trim();\n\tif (serverUrl.isEmpty()) {\n\t\treturn false;\n\t}\n\tList<GiteaServer> endpoints = new ArrayList<>(getServers());\n\tfor (int i = 0; i < endpoints.size(); i++) {\n\t\tGiteaServer ep = endpoints.get(i);\n\t\tif (ep.getServerUrl().equals(serverUrl)) {\n\t\t\tendpoints.remove(i);\n\t\t\tsetServers(endpoints);\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 46.596753372613264}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t\tif (StringUtils.isBlank(serverUrl)) {\n\t\treturn false;\n\t}\n\tserverUrl = normalizeServerUrl(serverUrl);\n\tList<GiteaServer> endpoints = new ArrayList<>(getServers());\n\tboolean found = false;\n\tfor (int i = 0; i < endpoints.size(); i++) {\n\t\tGiteaServer ep = endpoints.get(i);\n\t\tif (ep.getServerUrl().equals(serverUrl)) {\n\t\t\tendpoints.remove(i);\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (found) {\n\t\tsetServers(endpoints);\n\t}\n\treturn found;\n}", "CodeBleu_score": 49.374699446763664}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t\tif (StringUtils.isBlank(serverUrl)) {\n\t\treturn false;\n\t}\n\tserverUrl = normalizeServerUrl(serverUrl);\n\tList<GiteaServer> endpoints = new ArrayList<>(getServers());\n\tboolean found = false;\n\tfor (int i = 0; i < endpoints.size(); i++) {\n\t\tGiteaServer ep = endpoints.get(i);\n\t\tif (ep.getServerUrl().equals(serverUrl)) {\n\t\t\tendpoints.remove(i);\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (found) {\n\t\tsetServers(endpoints);\n\t}\n\treturn found;\n}", "CodeBleu_score": 49.374699446763664}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tt<? extends Element> annotatedElements = roundEnv.getElementsAnnotatedWith(annotation);\nfor (Element annotatedElement : annotatedElements) {\nif (annotatedElement.getKind()!= ElementKind.FIELD) {\ncontinue;\n}\n\nConfigValue configValue = annotatedElement.getAnnotation(ConfigValue.class);\nString type = annotatedElement.asType().toString();\n\nString name = configValue.name();\nString description = configValue.description();\nString defaultValue = configValue.defaultValue();\nString required = configValue.required()? PROPERTY_VALUE : EMPTY;\nString sensitive = configValue.sensitive()? PROPERTY_VALUE : EMPTY;\n\ndescriptorElements.add(new ConfigElement(name, description, defaultValue, required, sensitive, type));\n}\n}", "CodeBleu_score": 40.16243812970844}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tr (Element annotatedElement : roundEnv.getElementsAnnotatedWith(annotation)) {\nConfigValue configValue = annotation.getAnnotation(ConfigValue.class);\nString type = annotatedElement.asType().toString();\nString key = configValue.key();\nString defaultValue = configValue.defaultValue();\nString description = configValue.description();\nString required = configValue.required()? PROPERTY_VALUE : EMPTY;\nString hidden = configValue.hidden()? PROPERTY_VALUE : EMPTY;\nString group = configValue.group();\n\ndescriptorElements.add(new ConfigElement(key, type, defaultValue, description, required, hidden, group));\n}\n}", "CodeBleu_score": 33.81552169213234}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t Get all annotated elements that are annotated with the specified annotation\nSet<? extends Element> annotatedElements = roundEnv.getElementsAnnotatedWith(annotation);\n\nfor (Element element : annotatedElements) {\n// Get the annotation instance\nAnnotationMirror annotationMirror = element.getAnnotationMirrors().get(0);\n\n// Get the annotation values from the annotation instance\nMap<String, Object> annotationValues = getAnnotationValues(annotationMirror);\n\n// Get the element's type as a string\nString elementType = element.asType().toString();\n\n// Create a new ConfigElement with the annotation values and element type\nConfigElement configElement = new ConfigElement(annotationValues, elementType);\n\n// Add the ConfigElement to the set of descriptor elements\ndescriptorElements.add(configElement);\n}\n}", "CodeBleu_score": 48.418171613025955}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tor (TypeElement e : annotations) {\nString qualifiedName = e.getQualifiedName().toString();\nString annotationClassName = annotationClass.getName();\nif (qualifiedName.equals(annotationClassName) || qualifiedName.replace('$', '.').equals(annotationClassName)) {\nreturn e;\n}\n}\n\nreturn null;\n}", "CodeBleu_score": 35.19955504054135}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tr (TypeElement annotation : annotations) {\nif (annotation.getQualifiedName().toString().equals(annotationClass.getName())) {\nreturn annotation;\n}\n}\nreturn null;\n}", "CodeBleu_score": 35.41751092915387}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tr (TypeElement annotation : annotations) {\nif (annotation.getQualifiedName().toString().equals(annotationClass.getName())) {\nreturn annotation;\n}\n}\nreturn null;\n}", "CodeBleu_score": 35.41751092915387}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n    }\n    if for_approval:\n\tfilters[\"docstatus\"] = 1\n\tfilters[\"status\"] = [\"!=\", \"Cancelled\"]\n\n\tif workflow_state_field := get_workflow_state_field(\\\"Leave Application\\\"):\n\t\tfilters[workflow_state_field] = [\"!=\", \"Approved\"]\n\telse:\n\t\tfilters[\"status\"] = [\"!=\", \"Approved\"]\n\n\tif approver_id:\n\t\tfilters[\"leave_approver\"] = approver_id\n\n\treturn filters\n\n", "CodeBleu_score": 27.56362006541324}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n    }\n    if for_approval:\n\t\tfilters.update(\n\t\t\t{\n\t\t\t\t\\\"workflow_state\\\": {\n\t\t\t\t\t\\\"$not_in\\\": [\n\t\t\t\t\t\t\\\"Cancelled\\\",\n\t\t\t\t\t\t\\\"Rejected\\\",\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t\\\"status\\\": {\n\t\t\t\t\t\\\"$not_in\\\": [\n\t\t\t\t\t\t\\\"Cancelled\\\",\n\t\t\t\t\t\t\\\"Rejected\\\",\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t}\n\t\t)\n\n\telse:\n\t\tfilters.update(\n\t\t\t{\n\t\t\t\t\\\"workflow_state\\\": {\n\t\t\t\t\t\\\"$not_in\\\": [\n\t\t\t\t\t\t\\\"Cancelled\\\",\n\t\t\t\t\t\t\\\"Rejected\\\",\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t\\\"status\\\": {\n\t\t\t\t\t\\\"$not_in\\\": [\n\t\t\t\t\t\t\\\"Cancelled\\\",\n\t\t\t\t\t\t\\\"Rejected\\\",\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t}\n\t\t)\n\n\tif approver_id:\n\t\tfilters.update({\n\t\t\t\\\"leave_approver\\\": approver_id,\n\t\t\t\\\"workflow_state\\\": {\n\t\t\t\t\\\"$not_in\\\": [\n\t\t\t\t\t\\\"Cancelled\\\",\n\t\t\t\t\t\\\"Rejected\\\",\n\t\t\t\t],\n\t\t\t},\n\t\t\t\\\"status\\\": {\n\t\t\t\t\\\"$not_in\\\": [\n\t\t\t\t\t\\\"Cancelled\\\",\n\t\t\t\t\t\\\"Rejected\\\",\n\t\t\t\t],\n\t\t\t},\n\t\t})\n\n\treturn filters\n\n", "CodeBleu_score": 21.705058787906477}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"status\": [\"!=\", \"Cancelled\"],\n    }\n\n    if for_approval:\n\t\tfilters.update(\n\t\t\t{\n\t\t\t\t\\\"status\\\": \\\"Open\\\",\n\t\t\t\t\\\"leave_approver\\\": [\\\"!=\\\" if approver_id else \\\"=\\\",\" + approver_id + \"],\n\t\t\t}\n\t\t)\n\n\treturn filters\n\n", "CodeBleu_score": 20.886536148924332}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n    leave_balance_map = {}\n    for leave_type, leave_details in leave_details.items():\n        leave_balance_map[leave_type] = {\n            \"allocated_leave\": leave_details[\"allocated_leave\"],\n            \"leave_balance\": leave_details[\"leave_balance\"],\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 42.97139976499382}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    from frappe.utils import getdate\n    from frappe.utils.dateutils import add_days, add_months\n\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n    leave_balance_map = {}\n    for leave_type, leave_details in leave_details.items():\n        allocated_leave = leave_details.get(\"allocated_leave\", 0)\n        balance_leave = leave_details.get(\"balance_leave\", 0)\n        leave_balance_map[leave_type] = {\n            \"allocated_leave\": allocated_leave,\n            \"balance_leave\": balance_leave,\n        }\n    return leave_balance_map\n", "CodeBleu_score": 44.537859808225136}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date, current_date)\n\n    leave_balance_map = {}\n    for leave_type, leave_details in leave_details.items():\n        leave_balance_map[leave_type] = {\n            \"allocated_leave\": leave_details[\"allocated_leave\"],\n            \"balance_leave\": leave_details[\"balance_leave\"],\n        }\n\n    return leave_balance_map\n\n", "CodeBleu_score": 41.91249091584706}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.db.get_list(\"Holiday List\", filters={\"employee\": employee, \"is_weekly_off\": 0}, order_by=\"holiday_date\")\n    if not holiday_list:\n        return []\n    holidays = frappe.get_all(\"Holiday\", filters={\"name\": [\"in\", [holiday[\"holiday\"] for holiday in holiday_list]]}, order_by=\"holiday_date\")\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n    return holidays\n\n", "CodeBleu_score": 36.100287302773204}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.db.get_value(\"Holiday List\", {\"employee\": employee}, \"holidays\")\n    if not holiday_list:\n        return []\n\n    holidays = frappe.db.sql(\n        \"\"\"\n        SELECT\n            name,\n            date,\n            description\n        FROM `tabHoliday`\n        WHERE\n            name IN ({})\n            AND holiday_type!= \"Weekly Off\"\n        ORDER BY date\n        \"\"\".format(\n            \", \".join([\"%s\"] * len(holiday_list))\n        ),\n        tuple(holiday_list),\n        as_dict=True,\n    )\n\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n\n    return holidays\n\n", "CodeBleu_score": 38.491547773039244}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    from frappe.utils import getdate\n\n    holiday_list = frappe.get_list(\"Holiday List\", filters={\"employee\": employee})\n\n    if not holiday_list:\n        return []\n\n    holidays = frappe.get_all(\"Holiday\", filters={\"holiday_list\": [holiday[\"name\"] for holiday in holiday_list]}, fields=[\"name\", \"holiday_date\", \"description\"], order_by=\"holiday_date\")\n\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n\n    return holidays\n", "CodeBleu_score": 37.86992373494623}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n    reminders_in_advance = frappe.db.get_value(\"HR Settings\", None, \"reminders_in_advance\")\n    if reminders_in_advance == \"Weekly\":\n        send_reminders_in_advance()\n\n", "CodeBleu_score": 15.42396088662149}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    reminders_in_advance_weekly = frappe.db.get_single_value(\"HR Settings\", \"reminders_in_advance_weekly\")\n    reminders_frequency_weekly = frappe.db.get_single_value(\"HR Settings\", \"reminders_frequency_weekly\")\n    if reminders_in_advance_weekly and reminders_frequency_weekly == \"Weekly\":\n        send_reminders_in_advance(reminders_frequency_weekly)\n\n", "CodeBleu_score": 39.29372591936354}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    holiday_reminders_settings = frappe.get_single(\"HR Settings\", fields=[\"holiday_reminders_enabled\", \"holiday_reminders_frequency\"])\n    if holiday_reminders_settings.holiday_reminders_enabled and holiday_reminders_settings.holiday_reminders_frequency == \"Weekly\":\n        send_holiday_reminders_in_advance(days_in_advance=7)\n\n", "CodeBleu_score": 19.191408934335783}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t  self.set(\"self_appraisal_score\", 0)\n    if self.rate_goals_manually:\n        self.set(\"self_appraisal_score\", 0)\n        return\n\n    total_weightage = 0\n    for entry in self.self_ratings:\n        total_weightage += flt(entry.per_weightage)\n\n    if total_weightage and flt(total_weightage, 2)!= 100.0:\n        frappe.throw(\n            _(\"Total weightage for all Self Ratings must add up to 100. Currently, it is {0}%\").format(\n                total_weightage\n            ),\n            title=_(\"Incorrect Weightage Allocation\"),\n        )\n\n    for entry in self.self_ratings:\n        entry.score_earned = flt(entry.per_weightage) * 5 / 100\n        self.self_appraisal_score += flt(entry.score_earned)\n\n    self.self_appraisal_score = flt(self.self_appraisal_score, self.precision(\"self_appraisal_score\"))\n\n", "CodeBleu_score": 31.254312591306693}, {"code": "def calculate_self_appraisal_score(self)\n\t  self.self_appraisal_score = 0\n    for entry in self.self_ratings:\n        self.self_appraisal_score += flt(entry.rating) * flt(entry.per_weightage) / 100\n\n    self.self_appraisal_score = flt(self.self_appraisal_score, self.precision(\"self_appraisal_score\"))\n\n", "CodeBleu_score": 38.79599843229683}, {"code": "def calculate_self_appraisal_score(self)\n\t  self_appraisal_score = 0\n    for entry in self.self_ratings:\n        self_appraisal_score += flt(entry.rating) * flt(entry.per_weightage) / 100\n    self.self_appraisal_score = flt(self_appraisal_score, self.precision(\"self_appraisal_score\"))\n", "CodeBleu_score": 40.23749592128583}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n    if not self.appraisal_cycle:\n        return\n\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.calculate_final_score:\n        formula = appraisal_cycle.final_score_formula\n        if formula:\n            formula = sanitize_formula(formula)\n            formula = formula.replace(\"self_score\", str(self.self_score))\n            formula = formula.replace(\"avg_feedback_score\", str(self.avg_feedback_score))\n            formula = formula.replace(\"total_score\", str(self.total_score))\n            self.final_score = eval(formula)\n        else:\n            self.final_score = (\n                self.total_score + self.avg_feedback_score + self.self_score\n            ) / 3\n\n    self.final_score = flt(self.final_score, self.precision(\"final_score\"))\n", "CodeBleu_score": 41.68282647374216}, {"code": "def calculate_final_score(self)\n\t\n    if self.appraisal_cycle:\n        appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n        if appraisal_cycle.final_score_calculation_formula:\n            # Gather necessary data\n            total_score = self.total_score\n            avg_feedback_score = self.avg_feedback_score\n            self_score = self.self_score\n            # Sanitize the formula\n            formula = appraisal_cycle.final_score_calculation_formula\n            formula = formula.replace(\\\" \\\", \\\"\\\")\n            formula = formula.replace(\\\"\\", "CodeBleu_score": 22.706117455611267}, {"code": "def calculate_final_score(self)\n\t\n    if self.appraisal_cycle:\n        appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n        if appraisal_cycle.calculate_final_score_based_on_formula:\n            formula = appraisal_cycle.final_score_formula\n            formula = formula.replace(\" \", \"\")\n            formula = formula.replace(\"(\", \" ( \")\n            formula = formula.replace(\")\", \" ) \")\n            formula = formula.replace(\"**\", \"^\")\n            formula = formula.replace(\"*/\", \" / \")\n            formula = formula.replace(\"*\", \" * \")\n            formula = formula.replace(\"+\", \" + \")\n            formula = formula.replace(\"-\", \" - \")\n            formula = formula.replace(\"/\", \" / \")\n            formula = formula.replace(\"^\", \" ** \")\n            formula = formula.replace(\"(\", \" ( \")\n            formula = formula.replace(\")\", \" ) \")\n            formula = formula.replace(\"self.total_score\", str(self.total_score))\n            formula = formula.replace(\"self.avg_feedback_score\", str(self.avg_feedback_score))\n            formula = formula.replace(\"self.self_score\", str(self.self_score))\n            formula = formula.replace(\"self.goal_score_percentage\", str(self.goal_score_percentage))\n            formula = formula.replace(\"self.employee\", str(self.employee))\n            formula = formula.replace(\"self.appraisal_cycle\", str(self.appraisal_cycle))\n            formula = formula.replace(\"self.name\", str(self.name))\n            formula = formula.replace(\"self.start_date\", str(self.start_date))\n            formula = formula.replace(\"self.end_date\", str(self.end_date))\n            formula = formula.replace(\"self.employee_name\", str(self.employee_name))\n            formula = formula.replace(\"self.appraisal_template\", str(self.appraisal_template))\n            formula = formula.replace(\"self.rate_goals_manually\", str(self.rate_goals_manually))\n            formula = formula.replace(\"self.status\", str(self.status))\n            formula = formula.replace(\"self.docstatus\", str(self.docstatus", "CodeBleu_score": 33.89660092934723}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n    from erpnext.hr.doctype.employee.employee import Employee\n\n    if self.employee and self.attendance_date > nowdate():\n        msg = _(\"Attendance cannot be marked for future dates.\")\n        if self.status!= \"On Leave\":\n            msg += _(\" Leave application is not created for this employee.\")\n        raise frappe.ValidationError(msg)\n\n    if self.employee and self.attendance_date < Employee(self.employee).date_of_joining:\n        raise frappe.ValidationError(_(\"Attendance cannot be marked for dates before the employee's date of joining.\"))\n\n    if self.employee and self.attendance_date > nowdate():\n        msg = _(\"Attendance cannot be marked for future dates.\")\n        if self.status!= \"On Leave\":\n            msg += _(\" Leave application is not created for this employee.\")\n        raise frappe.ValidationError(msg)\n\n    if self.employee and self.attendance_date < Employee(self.employee).date_of_joining:\n        raise frappe.ValidationError(_(\"Attendance cannot be marked for dates before the employee's date of joining.\"))\n\n    if self.employee and self.attendance_date > nowdate():\n        msg = _(\"Attendance cannot be marked for future dates.\")\n        if self.status!= \"On Leave\":\n            msg += _(\" Leave application is not created for this employee.\")\n        raise frappe.ValidationError(msg)\n\n    if self.employee and self.attendance_date < Employee(self.employee).date_of_joining:\n        raise frappe.ValidationError(_(\"Attendance cannot be marked for dates before the employee's date of joining.\"))\n\n    if self.employee and self.attendance_date > nowdate():\n        msg = _(\"Attendance cannot be marked for future dates.\")\n        if self.status!= \"On Leave\":\n            msg += _(\" Leave application is not created for this employee.\")\n        raise frappe.ValidationError(msg)\n\n    if self.employee and self.attendance_date < Employee(self.employee).date_of_joining:\n        raise frappe.ValidationError(_(\"Attendance cannot be marked for dates before the employee's date of joining.\"))\n\n    if self.employee and self.attendance_date > nowdate():", "CodeBleu_score": 37.74219873681209}, {"code": "def validate_attendance_date(self)\n\t\n\n    if self.attendance_date > nowdate():\n        if self.status!= \\\"On Leave\\\":\n            raise frappe.ValidationError(\n                \\\"Attendance date cannot be in the future.\\\"\n            )\n        else:\n            leave_record = frappe.db.get_value(\n                \\\"Leave Application\\\", {\n                    \\\"employee\\\": self.employee,\n                    \\\"from_date\\\": self.attendance_date,\n                    \\\"docstatus\\\": 1,\n                }\n            )\n            if not leave_record:\n                raise frappe.ValidationError(\n                    \\\"Attendance date cannot be in the future.\\\"\n                )\n\n    if self.attendance_date < self.employee.date_of_joining:\n        raise frappe.ValidationError(\n            \\\"Attendance date cannot be before the employee's date of joining.\\\"\n        )\n\n", "CodeBleu_score": 25.036070392031263}, {"code": "def validate_attendance_date(self)\n\t\n\n    if self.attendance_date > nowdate():\n        if self.status!= \"On Leave\":\n            raise frappe.ValidationError(_(\"Attendance cannot be marked for future dates unless the status is 'On Leave'.\"))\n\n        if not self.leave_application:\n            raise frappe.ValidationError(_(\"Attendance cannot be marked for future dates unless there is a leave application. Please create one.\"))\n\n    if self.attendance_date < self.employee.date_of_joining:\n        raise frappe.ValidationError(_(\"Attendance cannot be marked for dates earlier than the employee's date of joining.\"))\n", "CodeBleu_score": 26.88271466771417}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t    if self.status!= \\\"On Leave\\\" and self.leave_application:\n        return\n\n    attendance_count = frappe.db.count(\n        \\\"Attendance\\\",\n        {\n            \\\"employee\\\": self.employee,\n            \\\"attendance_date\\\": self.attendance_date,\n        }\n    )\n\n    if attendance_count > 1:\n        attendance_doc = frappe.get_doc(\\\"Attendance\\\", frappe.db.get_value(\n            \\\"Attendance\\\",\n            {\n                \\\"employee\\\": self.employee,\n                \\\"attendance_date\\\": self.attendance_date,\n            },\n            \\\"name\\\"\n        ))\n\n        raise DuplicateAttendanceError(\n            _(\\\"Duplicate attendance record found for employee {0} on {1}. Please check the attendance record {2}\\\").format(\n                frappe.bold(self.employee),\n                frappe.bold(format_date(self.attendance_date)),\n                get_link_to_form(\\\"Attendance\\\", attendance_doc.name),\n            )\n        )\n\n", "CodeBleu_score": 32.365988684301726}, {"code": "def validate_duplicate_record(self)\n\t\n    if frappe.db.exists(\\\"Attendance\\\", {\n\t\t\\\"employee\\\": self.employee,\n\t\t\\\"attendance_date\\\": self.attendance_date,\n\t\t\\\"name\\\": [\\\"!=\\\", self.name],\n\t}):\n\t\traise DuplicateAttendanceError(\n\t\t\t_(\\\"Attendance record for {0} on {1} already exists. Please check {2}\\\").format(\n\t\t\t\tfrappe.bold(self.employee),\n\t\t\t\tfrappe.bold(format_date(self.attendance_date)),\n\t\t\t\tget_link_to_form(\\\"Attendance\\\", self.name),\n\t\t\t)\n\t\t)\n\n", "CodeBleu_score": 34.48270524591788}, {"code": "def validate_duplicate_record(self)\n\t\n    if frappe.db.exists(\n        \\\"Attendance\\\", {\n            \\\"employee\\\": self.employee,\n            \\\"attendance_date\\\": self.attendance_date,\n            \\\"name\\\": [\\\"!=\\\", self.name],\n        }\n    ):\n        attendance = frappe.db.get_value(\n            \\\"Attendance\\\", {\n                \\\"employee\\\": self.employee,\n                \\\"attendance_date\\\": self.attendance_date,\n            },\n            \\\"name\\\",\n        )\n        attendance_link = get_link_to_form(\n            \\\"Attendance\\\", attendance\n        )\n        frappe.throw(\n            _(\\\"Duplicate attendance record found for employee {0} on {1}. {2}\\\").format(\n                frappe.bold(self.employee),\n                frappe.bold(format_date(self.attendance_date)),\n                attendance_link,\n            )\n        )\n\n\n\n", "CodeBleu_score": 33.09960109994028}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n\n    dws_group = frappe.get_doc(\"Daily Work Summary Group\", self.dws_group)\n    if not dws_group.enable_daily_work_summary:\n        frappe.throw(_(\"Daily Work Summary is disabled\"))\n\n    if self.status == \"Sent\":\n        frappe.throw(_(\"Daily Work Summary has already been sent\"))\n\n    emails = []\n    for user in dws_group.user:\n        if user.user_type == \"All\":\n            emails.extend(frappe.get_all(\"User\", fields=[\"email\"]))\n        else:\n            emails.extend(frappe.get_all(\"User\", filters={\"user_type\": user.user_type}, fields=[\"email\"]))\n\n    if not emails:\n        frappe.throw(_(\"No email addresses found for the selected user types\"))\n\n    self.send_mails(dws_group, emails)\n    self.db_set(\"status\", \"Sent\")\n", "CodeBleu_score": 29.32747875003815}, {"code": "def send_summary(self)\n\t\n    from frappe.utils import nowdate, add_days, add_months, add_years\n    from frappe.utils.email_lib import sendmail\n    from frappe.utils.email_parser import get_email_id\n    from frappe.utils.password import update_password\n    from frappe.utils.user import get_system_managers\n    from frappe.utils.background_jobs import enqueue\n    from frappe.utils.html_utils import strip_html_tags\n    from frappe.model.document import Document\n    from frappe.utils import cint, cstr, flt, getdate, now, now_datetime, today, get_datetime_str\n    from frappe.utils.background_jobs import enqueue\n    from frappe.utils.file_manager import save_file\n    from frappe.utils.password import update_password\n    from frappe.utils.user import get_system_managers\n    from frappe.utils.html_utils import strip_html_tags\n    from frappe.utils import flt, getdate, now, now_datetime, today, get_datetime_str\n    from frappe.utils.background_jobs import enqueue\n    from frappe.utils.file_manager import save_file\n    from frappe.utils.password import update_password\n    from frappe.utils.user import get_system_managers\n    from frappe.utils.html_utils import strip_html_tags\n    from frappe.utils import flt, getdate, now, now_datetime, today, get_datetime_str\n    from frappe.utils.background_jobs import enqueue\n    from frappe.utils.file_manager import save_file\n    from frappe.utils.password import update_password\n    from frappe.utils.user import get_system_managers\n    from frappe.utils.html_utils import strip_html_tags\n    from frappe.utils import flt, getdate, now, now_datetime, today, get_datetime_str\n    from frappe.utils.background_jobs import enqueue\n    from frappe.utils.file_manager import save_file\n    from frappe.utils.password import update_password\n    from frappe.utils.user import get_system_managers\n    from frappe.utils.html_utils import strip_html_tags\n    from frappe.utils import flt, getdate, now, now", "CodeBleu_score": 24.15594967289095}, {"code": "def send_summary(self)\n\t\n    import frappe\n    from frappe import _\n    from frappe.model.document import Document\n    from frappe.utils import global_date_format\n\n    today = frappe.utils.nowdate()\n    yesterday = frappe.utils.add_to_date(today, -1)\n    yesterday_date = frappe.utils.formatdate(yesterday)\n    frappe.db.sql(\n        \"\"\"\n        select name, email_sent_to, email_sent_date, subject, message\n        from `tabDaily Work Summary`\n        where status='Not Sent'\n        and email_sent_date = %s\n        \"\"\",\n        (yesterday_date,),\n    )\n    daily_summary = frappe.db.sql(\n        \"\"\"\n        select name, email_sent_to, email_sent_date, subject, message\n        from `tabDaily Work Summary`\n        where status='Not Sent'\n        and email_sent_date = %s\n        \"\"\",\n        (yesterday_date,),\n    )\n    for dws in daily_summary:\n        dws_group = frappe.get_doc(\"Daily Work Summary Group\", dws[0])\n        emails = dws_group.get_emails()\n        self.send_mails(dws_group, emails)\n        frappe.db.set_value(\n            \"Daily Work Summary\",\n            dws[0],\n            \"status\",\n            \"Sent\",\n            update_modified=False,\n        )\n\n", "CodeBleu_score": 31.93891107517922}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n\n    # Get the interview round and job applicant from the current interview record\n    interview_round = self.interview_round\n    job_applicant = self.job_applicant\n\n    # Get all interview records with the same interview round and job applicant\n    interview_records = frappe.get_all(\n        \"Interview\",\n        filters=[[\"interview_round\", \"=\", interview_round], [\"job_applicant\", \"=\", job_applicant]],\n        fields=[\"name\"],\n    )\n\n    # If there are duplicate interview records, raise an exception with a message indicating that job applicants are not allowed to appear twice for the same interview round\n    if len(interview_records) > 1:\n        message = f\"Job applicants are not allowed to appear twice for the same interview round. Please refer to <a href='{get_link_to_form(self.doctype, self.name)}'>this interview</a> and the job applicant's information.\"\n        raise DuplicateInterviewRoundError(message)\n\n", "CodeBleu_score": 29.11052412453322}, {"code": "def validate_duplicate_interview(self)\n\t\n    interview_list = frappe.get_all(\n        \"Interview\",\n        filters={\n            \"job_applicant\": self.job_applicant,\n            \"interview_round\": self.interview_round,\n            \"name\": [\"!=\", self.name],\n        },\n        fields=[\"name\"],\n    )\n    if interview_list:\n        raise DuplicateInterviewRoundError(\n            _(\n                \"Job applicants are not allowed to appear twice for the same interview round. Please check the existing interview record {0} and the job applicant's information.\".format(\n                    get_link_to_form(\"Interview\", interview_list[0].name)\n                )\n            )\n        )\n", "CodeBleu_score": 35.87815785457145}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.name!= self.get_duplicate_interview_record():\n        frappe.throw(_(\n            \"Job applicants are not allowed to appear twice for the same interview round. Please refer to the existing interview record <a href='{link}'>{link}</a> for more information.\".format(\n                link=get_link_to_form(\"Interview\", self.get_duplicate_interview_record())\n            )\n        ), title=_(\"Not Allowed\"))\n", "CodeBleu_score": 31.01521985514929}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n\n    total_rating = 0\n    count = 0\n\n    for assessment in self.get(\"assessments\"):\n        if assessment.rating:\n            total_rating += assessment.rating\n            count += 1\n\n    if count:\n        self.average_rating = total_rating / count\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 28.505841622412824}, {"code": "def calculate_average_rating(self)\n\t\n    assessments = frappe.get_all(\n        \"Skill Assessment\",\n        filters={\n            \"interview\": self.interview,\n            \"interviewer\": self.interviewer,\n            \"docstatus\": 1,\n        },\n        fields=[\"rating\"],\n    )\n    total_rating = 0\n    for assessment in assessments:\n        total_rating += assessment.rating\n    average_rating = total_rating / len(assessments) if assessments else 0\n    self.average_rating = average_rating\n", "CodeBleu_score": 26.831870682740284}, {"code": "def calculate_average_rating(self)\n\t\n    if not self.interview_feedback_skills:\n        self.average_rating = 0\n        return\n\n    ratings = [\n        f.rating\n        for f in self.interview_feedback_skills\n        if f.rating is not None\n    ]\n    self.average_rating = sum(ratings) / len(ratings) if ratings else 0\n", "CodeBleu_score": 23.442710806005756}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    # If the input is a string, convert it to a dictionary.\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n\n    # Create a new Interview document.\n    interview = frappe.new_doc(\"Interview\")\n\n    # Set the interview round and designation from the input.\n    interview.interview_round = doc.get(\"interview_round\")\n    interview.designation = doc.get(\"designation\")\n\n    # If interviewers are provided, add them to the interview details.\n    if doc.get(\"interviewers\"):\n        interview.interviewers = doc.get(\"interviewers\")\n\n    # Save the Interview document.\n    interview.save()\n\n    return interview\n\n", "CodeBleu_score": 50.21825171719678}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview.update(doc)\n    interview.save()\n    if \"interviewers\" in doc:\n        interview.update({\"interviewers\": doc[\"interviewers\"]})\n    return interview.name\n\n", "CodeBleu_score": 41.29762704378578}, {"code": "def create_interview(doc):\n\t\n    # Initialize the Interview document\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.get(\"interview_round\")\n    interview.designation = doc.get(\"designation\")\n    interview.interview_date = doc.get(\"interview_date\")\n    interview.interview_time = doc.get(\"interview_time\")\n    interview.interview_venue = doc.get(\"interview_venue\")\n    interview.interview_status = \"Pending\"\n\n    # Add interviewers to the interview details\n    if doc.get(\"interviewers\"):\n        interview.append(\"interviewers\", {\"interviewer\": interviewers})\n\n    # Save the Interview document\n    interview.insert()\n    return interview\n\n", "CodeBleu_score": 35.57933348862584}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t    job_offers = []\n    if from_date and to_date:\n\t\tjob_offers = frappe.db.sql(\n\t\t\t\\\"SELECT `name` FROM `tabJob Offer` WHERE `designation` = %s AND `company` = %s AND `offer_date` BETWEEN %s AND %s AND `docstatus` = 1\\\", (self.designation, self.company, from_date, to_date)\n\t\t)\n\n\treturn job_offers\n\n", "CodeBleu_score": 38.98623126063555}, {"code": "def get_job_offer(self, from_date, to_date)\n\t    job_offers = []\n    if from_date and to_date:\n\t\tjob_offers = frappe.db.sql(\n\t\t\t\\\"SELECT name FROM `tabJob Offer` WHERE designation=%(designation)s AND company=%(company)s AND offer_date BETWEEN %(from_date)s AND %(to_date)s AND docstatus=1\\\", {\n\t\t\t\t\\\"designation\\\": self.designation, \\\"company\\\": self.company, \\\"from_date\\\": from_date, \\\"to_date\\\": to_date\n\t\t\t}\n\t\t)\n\n\treturn job_offers\n\n", "CodeBleu_score": 33.70871821491605}, {"code": "def get_job_offer(self, from_date, to_date)\n\t    job_offers = frappe.db.sql(\n        \"\"\"select name from `tabJob Offer` where designation = %s and company = %s and offer_date between %s and %s and docstatus = 1\"\"\",\n        (self.designation, self.company, from_date, to_date),\n        as_dict=1,\n    )\n    return [d.name for d in job_offers]\n\n", "CodeBleu_score": 37.00252836844814}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t    if not company and not department:\n        job_offers = frappe.db.sql(\n            \"\"\"\n            SELECT COUNT(*)\n            FROM `tabJob Offer`\n            WHERE docstatus=1\n            \"\"\",\n            as_dict=1,\n        )\n        accepted_job_offers = frappe.db.sql(\n            \"\"\"\n            SELECT COUNT(*)\n            FROM `tabJob Offer`\n            WHERE docstatus=1\n            AND status=\"Accepted\"\n            \"\"\",\n            as_dict=1,\n        )\n    elif company and not department:\n        job_offers = frappe.db.sql(\n            \"\"\"\n            SELECT COUNT(*)\n            FROM `tabJob Offer`\n            WHERE docstatus=1\n            AND company=%s\n            \"\"\",\n            (company),\n            as_dict=1,\n        )\n        accepted_job_offers = frappe.db.sql(\n            \"\"\"\n            SELECT COUNT(*)\n            FROM `tabJob Offer`\n            WHERE docstatus=1\n            AND company=%s\n            AND status=\"Accepted\"\n            \"\"\",\n            (company),\n            as_dict=1,\n        )\n    elif not company and department:\n        job_offers = frappe.db.sql(\n            \"\"\"\n            SELECT COUNT(*)\n            FROM `tabJob Offer`\n            WHERE docstatus=1\n            AND department=%s\n            \"\"\",\n            (department),\n            as_dict=1,\n        )\n        accepted_job_offers = frappe.db.sql(\n            \"\"\"\n            SELECT COUNT(*)\n            FROM `tabJob Offer`\n            WHERE docstatus=1\n            AND department=%s\n            AND status=\"Accepted\"\n            \"\"\",\n            (department),\n            as_dict=1,\n        )\n    elif company and department:\n        job_offers = frappe.db.sql(\n            \"\"\"\n            SELECT COUNT(*)\n            FROM `tabJob Offer`\n            WHERE docstatus=1\n            AND company=%s\n            AND department=%s\n            \"\"\",\n            (company, department),\n            as_dict=1,\n        )\n        accepted_job_offers = frappe.db.sql(\n            \"\"\"\n            SELECT COUNT(*)\n            FROM `tabJob Offer`\n            WHERE docstatus=1\n            AND company=%s\n            AND department=%s\n            AND status=\"Accepted\"\n            \"\"\",\n            (company, department),\n            as_dict=1,\n        )\n    total_job_offers = job_offers[0].get(\"COUNT(*)\")\n    total_accepted_job_offers = accepted_job_offers[0].get(\"COUNT(*)\")", "CodeBleu_score": 22.432386678517435}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t    total_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1, \"company\": company, \"department\": department})\n    accepted_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1, \"status\": \"Accepted\", \"company\": company, \"department\": department})\n    acceptance_rate = round(accepted_offers / total_offers * 100, 1)\n    return acceptance_rate, \"Percent\"\n", "CodeBleu_score": 35.00095921957106}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\"\n    from frappe.utils import flt\n    if not company and not department:\n        job_offers = frappe.db.sql(\"\"\"\n            SELECT\n                count(*) as total,\n                sum(case when status = 'Accepted' then 1 else 0 end) as accepted\n            FROM `tabJob Offer`\n            WHERE docstatus = 1\n        \"\"\", as_dict=1)\n    elif company and not department:\n        job_offers = frappe.db.sql(\"\"\"\n            SELECT\n                count(*) as total,\n                sum(case when status = 'Accepted' then 1 else 0 end) as accepted\n            FROM `tabJob Offer`\n            WHERE docstatus = 1\n                AND company = %s\n        \"\"\", company, as_dict=1)\n    elif not company and department:\n        job_offers = frappe.db.sql(\"\"\"\n            SELECT\n                count(*) as total,\n                sum(case when status = 'Accepted' then 1 else 0 end) as accepted\n            FROM `tabJob Offer`\n            WHERE docstatus = 1\n                AND department = %s\n        \"\"\", department, as_dict=1)\n    elif company and department:\n        job_offers = frappe.db.sql(\"\"\"\n            SELECT\n                count(*) as total,\n                sum(case when status = 'Accepted' then 1 else 0 end) as accepted\n            FROM `tabJob Offer`\n            WHERE docstatus = 1\n                AND company = %s\n                AND department = %s\n        \"\"\", (company, department), as_dict=1)\n    else:\n        return None\n\n    if not job_offers:\n        return None\n\n    total = job_offers[0].total\n    accepted = job_offers[0].accepted\n\n    if total == 0:\n        return 0\n\n    return flt(accepted / total * 100, 2)\n", "CodeBleu_score": 24.03294409723835}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\treturn ResponseEntity.status(result.isSuccess()? HttpStatus.OK : HttpStatus.BAD_REQUEST).body(result);\n}", "CodeBleu_score": 58.06099475598613}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess()) {\n\t\treturn ResponseEntity.badRequest().body(result);\n\t}\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 67.36275516193486}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (result.isSuccess()) {\n\t\treturn ResponseEntity.ok(result);\n\t} else {\n\t\treturn ResponseEntity.badRequest().body(result);\n\t}\n}", "CodeBleu_score": 63.27000811283763}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tinal Optional<CompanyStaff> optionalCompanyStaff = this.companyStaffDao.findById(companyStaffForUpdateDto.getId());\nif (!optionalCompanyStaff.isPresent()) {\nreturn new ErrorResult(Messages.staffNotFound);\n}\nfinal CompanyStaff companyStaff = optionalCompanyStaff.get();\nfinal Result result = BusinessRules.run(this.arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaff.getPassword()));\nif (result.isSuccess()) {\ncompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\ncompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\nthis.companyStaffDao.save(companyStaff);\nreturn new SuccessResult(Messages.staffUpdated);\n}\nreturn result;\n}", "CodeBleu_score": 48.60567085053974}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tinal Optional<CompanyStaff> companyStaffOptional = companyStaffDao.findById(companyStaffForUpdateDto.getId());\nif (!companyStaffOptional.isPresent()) {\nreturn new ErrorResult(Messages.staffNotFound);\n}\nfinal CompanyStaff companyStaff = companyStaffOptional.get();\nfinal Result passwordMatchResult = arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword());\nif (!passwordMatchResult.isSuccess()) {\nreturn passwordMatchResult;\n}\nfinal BusinessRules businessRules = new BusinessRules();\nbusinessRules.run(\nnew BusinessRule(companyStaffForUpdateDto.getFirstName()!= null, Messages.firstNameCannotBeEmpty),\nnew BusinessRule(companyStaffForUpdateDto.getLastName()!= null, Messages.lastNameCannotBeEmpty),\nnew BusinessRule(companyStaffForUpdateDto.getFirstName().length() > 2, Messages.firstNameTooShort),\nnew BusinessRule(companyStaffForUpdateDto.getLastName().length() > 2, Messages.lastNameTooShort),\nnew BusinessRule(companyStaffForUpdateDto.getFirstName().length() < 20, Messages.firstNameTooLong),\nnew BusinessRule(companyStaffForUpdateDto.getLastName().length() < 20, Messages.lastNameTooLong)\n);\nif (!businessRules.isSuccess()) {\nreturn new ErrorResult(businessRules.getErrorMessage());\n}\ncompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\ncompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\ncompanyStaff.setPassword(companyStaffForUpdateDto.getPassword());\ncompanyStaffDao.save(companyStaff);\nreturn new SuccessResult(Messages.staffUpdated);\n}", "CodeBleu_score": 42.16191915248258}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal Optional<CompanyStaff> optional = this.companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\n\tif (!optional.isPresent()) {\n\t\treturn new ErrorResult(Messages.staffNotFound);\n\t}\n\n\tfinal CompanyStaff companyStaff = optional.get();\n\n\tfinal Result result = BusinessRules.run(this.arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword()));\n\n\tif (!result.isSuccess()) {\n\t\treturn result;\n\t}\n\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\n\tthis.companyStaffDao.save(companyStaff);\n\n\treturn new SuccessResult(Messages.staffUpdated);\n}", "CodeBleu_score": 50.90036609607018}]}
