{"instance_id": "ba8707e206f9", "generation_result": [{"code": "def _kazoo_connect(self, *args: Any) -> Tuple[Union[int, float], Union[int, float]]\n\t\n    result = self.original_connect(*args)\n    return (max(2, self.loop_wait - 2) * 1000, result[1])\n\n", "CodeBleu_score": 51.93176490289573}, {"code": "def _kazoo_connect(self, *args: Any) -> Tuple[Union[int, float], Union[int, float]]\n\t\n    result = self._connection(*args)\n    return (max(self._loop_wait - 2, 2) * 1000, result[1])\n\n", "CodeBleu_score": 59.2650503877182}, {"code": "def _kazoo_connect(self, *args: Any) -> Tuple[Union[int, float], Union[int, float]]\n\t\n    result = self._original_connect(*args)\n    return (max(2, self.loop_wait - 2) * 1000, result[1])\n\n", "CodeBleu_score": 52.405550575370974}]}
{"instance_id": "88e24a7c26a4", "generation_result": [{"code": "def reload_config(self, config: Union['Config', Dict[str, Any]]) -> None\n\t\n    if isinstance(config, dict):\n        config = Config(config)\n    self.retry = KazooRetry(max_tries=None, delay=config.loop_wait, max_delay=config.loop_wait, sleep_func=time.sleep)\n    if self.handler is not None and self.handler.timeout != config.loop_wait:\n        self.handler.timeout = config.loop_wait\n        if isinstance(self.handler, PatroniSequentialThreadingHandler):\n            self.handler.connect_timeout = config.loop_wait\n    if self.client_id is not None:\n        self._session_timeout = config.ttl\n        try:\n            self.client.set_acl(self.client_path, make_acl(self.client_id, self.client_id, all=True))\n        except Exception:\n            logging.warning('Failed to update TTL value, closing the connection')\n            self.handler.close()\n\n", "CodeBleu_score": 32.80227117942504}, {"code": "def reload_config(self, config: Union['Config', Dict[str, Any]]) -> None\n\t\n\n    if isinstance(config, dict):\n        config = Config(config)\n\n    if self._retry.deadline != config.retry_timeout:\n        self._retry = KazooRetry(max_tries=None, deadline=config.retry_timeout, max_delay=config.retry_timeout,\n                                 sleep_func=time.sleep, backoff=self._retry.backoff)\n\n    if self._retry.max_delay != config.loop_wait:\n        if isinstance(self._handler, PatroniSequentialThreadingHandler):\n            self._handler.set_connect_timeout(config.loop_wait)\n        if self._retry.max_delay != config.loop_wait:\n            self._retry.max_delay = config.loop_wait\n\n    if self._session_timeout != config.ttl:\n        try:\n            self._session_timeout = config.ttl\n            self.add_auth('digest', b'patroni:' + self._session_password)\n        except ConnectionClosedError:\n            if isinstance(self._handler, PatroniSequentialThreadingHandler):\n                self._handler.close_socket()\n\n", "CodeBleu_score": 33.60421626105763}, {"code": "def reload_config(self, config: Union['Config', Dict[str, Any]]) -> None\n\t\n    if isinstance(config, dict):\n        config = Config(config)\n    if self.retry_timeout != config.retry_timeout:\n        self.retry_timeout = config.retry_timeout\n        self._retry = KazooRetry(max_tries=None, delay=self.retry_timeout, max_delay=self.retry_timeout * 10,\n                                 backoff=1, sleep_func=time.sleep)\n    if self.loop_wait != config.loop_wait:\n        self.loop_wait = config.loop_wait\n        if isinstance(self._handler, PatroniSequentialThreadingHandler):\n            self._handler.timeout = self.loop_wait\n            self._handler.connect_timeout = self.loop_wait\n    if self.ttl != config.ttl:\n        self.ttl = config.ttl\n        try:\n            self.set_ttl(self.ttl)\n        except (ConnectionClosedError, SessionExpiredError):\n            self._session_expired = True\n            self._session_id = None\n            self._session_passwd = None\n            self._state = KazooState.LOST\n            self._live.clear()\n            self._failed.clear()\n            if self._session_callback:\n                self._session_callback(KazooState.LOST)\n            self._session_callback = None\n            self._session_expire_time = None\n            self._session_read_time = None\n            self._session_write_time = None\n            self._session_id = None\n            self._session_passwd = None\n            self._session_expire_time = None\n            self._session_read_time = None\n            self._session_write_time = None\n            self._session_expire_time = None\n            self._session_read_time = None\n            self._session_write_time = None\n            self._session_id = None\n            self._session_passwd = None\n            self._session_expire_time = None\n            self._session_read_time = None\n            self._session_write_time = None\n            self._session_id", "CodeBleu_score": 28.071463540251873}]}
{"instance_id": "2af7d7b3c887", "generation_result": [{"code": "def _postgresql_cluster_loader(self, path: str) -> Cluster\n\t\n    try:\n        cluster = Cluster(self, path)\n        cluster.initialize()\n        return cluster\n    except Exception:\n        logging.exception('Failed to load cluster configuration from %s', path)\n        return None\n\n", "CodeBleu_score": 5.849359163426151}, {"code": "def _postgresql_cluster_loader(self, path: str) -> Cluster\n\t\n\n    # The initialization state is a JSON file that contains the current cluster initialization state.\n    # The initialization state is used to determine whether the cluster is initialized or not.\n    # The initialization state is a JSON file that contains the following information:\n    # - The cluster initialization state\n    # - The cluster initialization state modification time\n    # - The cluster initialization state version\n    # - The cluster initialization state revision\n    # - The cluster initialization state owner\n    # - The cluster initialization state status\n    # - The cluster initialization state creation time\n    # - The cluster initialization state creation time in seconds\n    # - The cluster initialization state creation time in milliseconds\n    # - The cluster initialization state creation time in microseconds\n    # - The cluster initialization state creation time in nanoseconds\n    # - The cluster initialization state creation time in picoseconds\n    # - The cluster initialization state creation time in femtoseconds\n    # - The cluster initialization state creation time in attoseconds\n    # - The cluster initialization state creation time in zeptoseconds\n    # - The cluster initialization state creation time in yoctoseconds\n    # - The cluster initialization state creation time in planck time\n    # - The cluster initialization state creation time in shake\n    # - The cluster initialization state creation time in heartbeat\n    # - The cluster initialization state creation time in year\n    # - The cluster initialization state creation time in century\n    # - The cluster initialization state creation time in millennium\n    # - The cluster initialization state creation time in age\n    # - The cluster initialization state creation time in epoch\n    # - The cluster initialization state creation time in eon\n    # - The cluster initialization state creation time in eon year\n    # - The cluster initialization state creation time in eon century\n    # - The cluster initialization state creation time in eon millennium\n    # - The cluster initialization state creation time in eon age\n    # - The cluster initialization state creation time in eon epoch\n    # - The cluster initialization state creation time in eon eon\n    # - The cluster initialization state creation time in eon eon year\n    # - The cluster initialization state creation time in eon eon century\n    # - The cluster initialization state creation time in eon eon millennium\n    # - The cluster initialization state creation", "CodeBleu_score": 0.8139927031915872}, {"code": "def _postgresql_cluster_loader(self, path: str) -> Cluster\n\t\n    try:\n        self.get(path)\n    except NoNodeError:\n        raise NoNodeError(f\"{path} does not exist\")\n\n    cluster = Cluster(self, path)\n\n    try:\n        cluster.initialize(self.get(f\"{path}/initialize\"))\n    except NoNodeError:\n        pass\n\n    try:\n        cluster.config(self.get(f\"{path}/config\"))\n    except NoNodeError:\n        pass\n\n    try:\n        cluster.timeline_history(self.get(f\"{path}/timeline_history\"))\n    except NoNodeError:\n        pass\n\n    try:\n        cluster.sync_state(self.get(f\"{path}/sync_state\"))\n    except NoNodeError:\n        pass\n\n    try:\n        cluster.members(self.get(f\"{path}/members\"))\n    except NoNodeError:\n        pass\n\n    try:\n        cluster.leader(self.get(f\"{path}/leader\"))\n    except NoNodeError:\n        pass\n\n    try:\n        cluster.status(self.get(f\"{path}/status\"))\n    except NoNodeError:\n        pass\n\n    try:\n        cluster.failover(self.get(f\"{path}/failover\"))\n    except NoNodeError:\n        pass\n\n    try:\n        cluster.failsafe(self.get(f\"{path}/failsafe\"))\n    except NoNodeError:\n        pass\n\n    return cluster\n\n", "CodeBleu_score": 13.81824626682959}]}
{"instance_id": "43e1bc044d8e", "generation_result": [{"code": "def attempt_to_acquire_leader(self) -> bool\n\t\n    try:\n        self._zk.create(self._lock_path, self._lock_data, makepath=True, ephemeral=True, acl=self._lock_acl)\n        return True\n    except NodeExistsError:\n        return False\n    except KazooException:\n        raise ZooKeeperError('Failed to acquire leader lock.')\n\n", "CodeBleu_score": 27.640263914606017}, {"code": "def attempt_to_acquire_leader(self) -> bool\n\t\n\n    if self.is_connected:\n        try:\n            self.client.create(self.lock_path, self.lock_data, makepath=True, ephemeral=True, acl=self.lock_acl)\n            self.is_leader = True\n            self.logger.info(f\"{self.name} acquired leader lock at {self.lock_path}\")\n            return True\n        except ConnectionClosedError as e:\n            self.logger.error(f\"{self.name} could not acquire leader lock at {self.lock_path} because the connection to ZooKeeper was closed\")\n            raise e\n        except RetryFailedError as e:\n            self.logger.error(f\"{self.name} could not acquire leader lock at {self.lock_path} after {self.retry_count} retries\")\n            raise e\n        except NodeExistsError as e:\n            self.logger.info(f\"{self.name} could not acquire leader lock at {self.lock_path} because another instance has the lock\")\n            return False\n        except Exception as e:\n            self.logger.error(f\"{self.name} could not acquire leader lock at {self.lock_path}\")\n            raise e\n    else:\n        self.logger.error(f\"{self.name} could not acquire leader lock at {self.lock_path} because it is not connected to ZooKeeper\")\n        raise ZooKeeperError(f\"{self.name} could not acquire leader lock at {self.lock_path} because it is not connected to ZooKeeper\")\n\n", "CodeBleu_score": 33.63592743497114}, {"code": "def attempt_to_acquire_leader(self) -> bool\n\t\n    try:\n        self.create(self.path, self.data, acl=self.acl, ephemeral=True, sequence=False, makepath=True)\n        self.is_acquired = True\n        self.logger.info(f\"Acquired lock {self.path}\")\n        return True\n    except ConnectionClosedError:\n        self.logger.error(f\"Connection to ZooKeeper was closed while attempting to acquire lock {self.path}\")\n        raise ZooKeeperError(\"Connection to ZooKeeper was closed while attempting to acquire lock\")\n    except RetryFailedError:\n        self.logger.error(f\"Failed to acquire lock {self.path} after {self.max_retries} retries\")\n        raise ZooKeeperError(f\"Failed to acquire lock {self.path} after {self.max_retries} retries\")\n    except NodeExistsError:\n        self.logger.info(f\"Failed to acquire lock {self.path} because it is already acquired\")\n        return False\n    except Exception as e:\n        self.logger.error(f\"Unexpected exception while attempting to acquire lock {self.path}: {e}\")\n        raise ZooKeeperError(f\"Unexpected exception while attempting to acquire lock {self.path}: {e}\")\n\n", "CodeBleu_score": 39.213745910064354}]}
{"instance_id": "93d126ab8a22", "generation_result": [{"code": "def _update_leader(self, leader: Leader) -> bool\n\t\n    if leader.session_id != self.client_id[0]:\n        logging.warning(f\"Leader's session ID ({leader.session_id}) does not match the current client's session ID ({self.client_id[0]}).\")\n        try:\n            self.delete(leader.path, version=leader.version)\n        except (NoNodeError, ConnectionClosedError, RetryFailedError) as e:\n            logging.warning(f\"Failed to delete leader ZNode: {e}\")\n        else:\n            logging.info(f\"Deleted leader ZNode at {leader.path}\")\n    try:\n        self.create(self.leader_path, self.client_id[1].encode(), acl=[make_acl(self.client_id[1], \"rwcda\")], ephemeral=True, sequence=True)\n    except (ConnectionClosedError, RetryFailedError) as e:\n        logging.error(f\"Failed to create leader ZNode: {e}\")\n        return False\n    else:\n        logging.info(f\"Created leader ZNode at {self.leader_path}\")\n        return True\n\n", "CodeBleu_score": 38.84204097622823}, {"code": "def _update_leader(self, leader: Leader) -> bool\n\t\n    if leader.client_id != self.client_id:\n        logging.warning(\"Leader mismatch: %s != %s\", leader.client_id, self.client_id)\n        try:\n            self.delete(leader.path, version=leader.version)\n        except (NoNodeError, ConnectionClosedError, RetryFailedError):\n            pass\n        except Exception as e:\n            raise ZooKeeperError(f\"Failed to delete leader {leader.path}: {e}\")\n\n    try:\n        self.create(leader.path, self.client_id.encode(\"utf-8\"), make_path=True, ephemeral=True)\n    except Exception as e:\n        logging.warning(\"Failed to create leader %s: %s\", leader.path, e)\n        return False\n    return True\n\n", "CodeBleu_score": 44.45796731778935}, {"code": "def _update_leader(self, leader: Leader) -> bool\n\t\n    if leader.session_id != self.client_id[0]:\n        logging.warning(f\"Leader mismatch: {leader.session_id} != {self.client_id[0]}\")\n        try:\n            self.delete(leader.path, version=leader.version)\n        except (NoNodeError, ConnectionClosedError, RetryFailedError):\n            pass\n    try:\n        self.create(leader.path, self.client_id[1].encode(\"utf-8\"), make_path=True, ephemeral=True)\n    except (ConnectionClosedError, RetryFailedError):\n        logging.warning(f\"Failed to create leader node {leader.path}\")\n        return False\n    return True\n\n", "CodeBleu_score": 29.764130176901816}]}
{"instance_id": "f68719982812", "generation_result": [{"code": "def poll(self) -> bool\n\t\n    if time.time() < self.next_poll:\n        return False\n    self.next_poll = time.time() + self.poll_interval\n    data = self.get_exhibitors()\n    if data is None:\n        return False\n    self.update_connection_string(data)\n    return True\n\n", "CodeBleu_score": 14.849082436337346}, {"code": "def poll(self) -> bool\n\t\n    if self.poll_time is None:\n        self.poll_time = time.time()\n        return False\n\n    if time.time() - self.poll_time < self.poll_interval:\n        return False\n\n    self.poll_time = time.time()\n\n    try:\n        exhibitors = self.exhibitor_client.get_exhibitors()\n    except Exception as e:\n        logging.warning(f\"Error while polling exhibitors: {e}\")\n        return False\n\n    if not exhibitors:\n        return False\n\n    if exhibitors == self.exhibitors:\n        return False\n\n    self.exhibitors = exhibitors\n    self.zk_hosts = \",\".join(\n        f\"{exhibitor['hostname']}:{exhibitor['port']}\"\n        for exhibitor in exhibitors\n    )\n    logging.info(f\"Updated ZooKeeper connection string: {self.zk_hosts}\")\n\n    return True\n\n", "CodeBleu_score": 31.18071860946565}, {"code": "def poll(self) -> bool\n\t\n    if self.last_poll is None:\n        self.last_poll = time.time()\n\n    if time.time() - self.last_poll > self.poll_interval:\n        self.last_poll = time.time()\n\n        if self.debug:\n            logging.debug(\"Polling ZooKeeper for exhibitors\")\n\n        try:\n            exhibitors = self.get_exhibitors()\n        except Exception as e:\n            logging.warning(f\"Failed to get exhibitors: {e}\")\n            return False\n\n        if exhibitors is None:\n            logging.warning(\"Failed to get exhibitors\")\n            return False\n\n        if self.debug:\n            logging.debug(f\"Got exhibitors: {exhibitors}\")\n\n        if exhibitors != self.exhibitors:\n            self.exhibitors = exhibitors\n            self.update_connection_string()\n            return True\n\n        return False\n\n", "CodeBleu_score": 28.830633685480763}]}
{"instance_id": "022ed3721913", "generation_result": [{"code": "def _load_cluster(\n            self, path: str, loader: Callable[[str], Union[Cluster, Dict[int, Cluster]]]\n    ) -> Union[Cluster, Dict[int, Cluster]]\n\t\n    if self.ensemble_provider:\n        self.hosts = self.ensemble_provider.get_ensemble()\n\n    return super()._load_cluster(path, loader)\n\n", "CodeBleu_score": 59.43654785889818}, {"code": "def _load_cluster(\n            self, path: str, loader: Callable[[str], Union[Cluster, Dict[int, Cluster]]]\n    ) -> Union[Cluster, Dict[int, Cluster]]\n\t\n    if not self._ensemble_provider:\n        self._ensemble_provider = self._get_ensemble_provider()\n    if self._ensemble_provider:\n        self._update_hosts_with_zookeeper()\n    return super()._load_cluster(path, loader)\n\n", "CodeBleu_score": 56.56044021567968}, {"code": "def _load_cluster(\n            self, path: str, loader: Callable[[str], Union[Cluster, Dict[int, Cluster]]]\n    ) -> Union[Cluster, Dict[int, Cluster]]\n\t\n    if self.ensemble_provider is not None:\n        self.ensemble_provider.update_hosts(self.hosts)\n    return super()._load_cluster(path, loader)\n\n", "CodeBleu_score": 59.94592107019485}]}
{"instance_id": "c7d2e1db0cda", "generation_result": [{"code": "public ZookeeperListener(NodeCache nodeCache, NodeCacheListener nodeCacheListener){\n\t    this.nodeCache = nodeCache;\n    this.nodeCacheListener = nodeCacheListener;\n}", "CodeBleu_score": 81.45633845775137}, {"code": "public ZookeeperListener(NodeCache nodeCache, NodeCacheListener nodeCacheListener){\n\t\tthis.nodeCache = nodeCache;\n\tthis.nodeCacheListener = nodeCacheListener;\n}", "CodeBleu_score": 78.53464624293271}, {"code": "public ZookeeperListener(NodeCache nodeCache, NodeCacheListener nodeCacheListener){\n\t    this.nodeCache = nodeCache;\n    this.nodeCacheListener = nodeCacheListener;\n}", "CodeBleu_score": 81.45633845775137}]}
{"instance_id": "c779f567d3e2", "generation_result": [{"code": "public void destroy(){\n\t    if (zookeeperListener == null) {\n        return;\n    }\n\n    LOG.info(\"Unsubscribe from {} {} started\", ConfigType.ZOOKEEPER, zookeeperListener.getConfigType());\n\n    try {\n        zookeeperOperation.unsubscribeConfig(zookeeperListener);\n    } catch (Exception e) {\n        LOG.error(\"Unsubscribe from {} {} failed\", ConfigType.ZOOKEEPER, zookeeperListener.getConfigType(), e);\n    }\n\n    LOG.info(\"Unsubscribe from {} {} finished\", ConfigType.ZOOKEEPER, zookeeperListener.getConfigType());\n}", "CodeBleu_score": 41.81486993330035}, {"code": "public void destroy(){\n\t    if (zookeeperListener == null) {\n        return;\n    }\n\n    LOG.info(\"Unsubscribing from Zookeeper config server\");\n    try {\n        zookeeperOperation.unsubscribeConfig(zookeeperListener);\n    } catch (Exception e) {\n        LOG.error(\"Unsubscribe from Zookeeper config server failed\", e);\n    }\n}", "CodeBleu_score": 39.05962753641729}, {"code": "public void destroy(){\n\t    if (zookeeperListener == null) {\n        return;\n    }\n\n    LOG.info(\"Unsubscribing from Zookeeper for {}\", getConfigType().toString().toLowerCase());\n\n    try {\n        zookeeperOperation.unsubscribeConfig(zookeeperListener);\n    } catch (Exception e) {\n        LOG.warn(\"Failed to unsubscribe from Zookeeper for {}\", getConfigType().toString().toLowerCase(), e);\n    }\n}", "CodeBleu_score": 45.8582784770701}]}
{"instance_id": "7f0ce4db487b", "generation_result": [{"code": "public Map<String, String> getServerMetadata(Server server){\n\t    if (server instanceof ZookeeperServer) {\n        ZookeeperServer zookeeperServer = (ZookeeperServer) server;\n        ZookeeperRegistration registration = zookeeperServer.getRegistration();\n        return registration.getMetadata();\n    } else {\n        return null;\n    }\n}", "CodeBleu_score": 61.139261513042655}, {"code": "public Map<String, String> getServerMetadata(Server server){\n\t    if (server instanceof ZookeeperServer) {\n        ZookeeperServer zookeeperServer = (ZookeeperServer) server;\n        ZookeeperRegistration registration = zookeeperServer.getPayload();\n        return registration.getMetadata();\n    } else {\n        return null;\n    }\n}", "CodeBleu_score": 62.142678266315045}, {"code": "public Map<String, String> getServerMetadata(Server server){\n\t        if (server instanceof ZookeeperServer) {\n            ZookeeperServer zookeeperServer = (ZookeeperServer) server;\n            ZookeeperRegistration registration = zookeeperServer.getRegistration();\n            return registration.getMetadata();\n        } else {\n            return null;\n        }\n}", "CodeBleu_score": 59.61579466392668}]}
{"instance_id": "7365d194b7ee", "generation_result": [{"code": "public ZookeeperListener subscribeConfig(String group, String serviceId, ZookeeperSubscribeCallback zookeeperSubscribeCallback) throws Exception{\n\t    String path = \"/\" + group + \"/config/\" + serviceId;\n    NodeCache nodeCache = new NodeCache(curatorFramework, path);\n    NodeCacheListener nodeCacheListener = new NodeCacheListener() {\n        @Override\n        public void nodeChanged() throws Exception {\n            ChildData currentData = nodeCache.getCurrentData();\n            if (currentData == null) {\n                return;\n            }\n            String config = new String(currentData.getData());\n            zookeeperSubscribeCallback.callback(config);\n        }\n    };\n    nodeCache.getListenable().addListener(nodeCacheListener);\n    nodeCache.start();\n    return new ZookeeperListener(nodeCache, nodeCacheListener);\n}", "CodeBleu_score": 64.02301072197871}, {"code": "public ZookeeperListener subscribeConfig(String group, String serviceId, ZookeeperSubscribeCallback zookeeperSubscribeCallback) throws Exception{\n\t    String path = getConfigPath(group, serviceId);\n    NodeCache nodeCache = new NodeCache(client, path);\n    nodeCache.start();\n    NodeCacheListener listener = new NodeCacheListener() {\n        @Override\n        public void nodeChanged() throws Exception {\n            ChildData data = nodeCache.getCurrentData();\n            if (data != null) {\n                String config = new String(data.getData());\n                zookeeperSubscribeCallback.callback(config);\n            }\n        }\n    };\n    nodeCache.getListenable().addListener(listener);\n    ZookeeperListener zookeeperListener = new ZookeeperListener(nodeCache, listener);\n    zookeeperListeners.put(path, zookeeperListener);\n    return zookeeperListener;\n}", "CodeBleu_score": 67.37247552706623}, {"code": "public ZookeeperListener subscribeConfig(String group, String serviceId, ZookeeperSubscribeCallback zookeeperSubscribeCallback) throws Exception{\n\t    String path = \"/\" + group + \"/\" + serviceId + \"/config\";\n    NodeCache nodeCache = new NodeCache(client, path);\n    NodeCacheListener nodeCacheListener = new NodeCacheListener() {\n        @Override\n        public void nodeChanged() throws Exception {\n            ChildData currentData = nodeCache.getCurrentData();\n            if (currentData != null) {\n                String config = new String(currentData.getData());\n                zookeeperSubscribeCallback.callback(config);\n            }\n        }\n    };\n    nodeCache.getListenable().addListener(nodeCacheListener);\n    nodeCache.start();\n    ZookeeperListener zookeeperListener = new ZookeeperListener(nodeCache, nodeCacheListener);\n    listeners.add(zookeeperListener);\n    return zookeeperListener;\n}", "CodeBleu_score": 65.90703500661152}]}
{"instance_id": "6f492670162b", "generation_result": [{"code": "public ServerList<?> ribbonServerList(IClientConfig config, ServiceDiscovery<ZookeeperInstance> serviceDiscovery){\n\t    ZookeeperServerListDecorator serverList = new ZookeeperServerListDecorator(config, serviceDiscovery);\n    serverList.setLoadBalanceListenerExecutor(loadBalanceListenerExecutor());\n    serverList.setServiceId(config.getClientName());\n    return serverList;\n}", "CodeBleu_score": 69.86326906983626}, {"code": "public ServerList<?> ribbonServerList(IClientConfig config, ServiceDiscovery<ZookeeperInstance> serviceDiscovery){\n\t    ZookeeperServerListDecorator serverList = new ZookeeperServerListDecorator(config, serviceDiscovery);\n    serverList.setLoadBalanceListenerExecutor(loadBalanceListenerExecutor());\n    serverList.setServiceId(config.getClientName());\n\n    return serverList;\n}", "CodeBleu_score": 69.86326906983626}, {"code": "public ServerList<?> ribbonServerList(IClientConfig config, ServiceDiscovery<ZookeeperInstance> serviceDiscovery){\n\t    ZookeeperServerListDecorator serverListDecorator = new ZookeeperServerListDecorator(config, serviceDiscovery);\n    serverListDecorator.initWithNiwsConfig(config);\n\n    LoadBalanceListenerExecutor loadBalanceListenerExecutor = new LoadBalanceListenerExecutor();\n    serverListDecorator.setLoadBalanceListenerExecutor(loadBalanceListenerExecutor);\n\n    String serviceId = config.getClientName();\n    serverListDecorator.setServiceId(serviceId);\n\n    return serverListDecorator;\n}", "CodeBleu_score": 54.710482595551035}]}
{"instance_id": "17c01a5f8ef8", "generation_result": [{"code": "public void register(ZookeeperRegistration registration){\n\t    try {\n        ConfigurableApplicationContext applicationContext = (ConfigurableApplicationContext) getApplicationContext();\n        if (applicationContext != null) {\n            RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n            if (registerListenerExecutor != null) {\n                registerListenerExecutor.onRegister(registration);\n            }\n        }\n    } catch (BeansException e) {\n        // Ignore\n    }\n\n    ZookeeperServiceRegistry serviceRegistry = (ZookeeperServiceRegistry) getDelegate();\n    serviceRegistry.register(registration);\n}", "CodeBleu_score": 63.970035243937396}, {"code": "public void register(ZookeeperRegistration registration){\n\t    try {\n        ConfigurableApplicationContext applicationContext = (ConfigurableApplicationContext) getApplicationContext();\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onRegister(registration);\n    } catch (BeansException e) {\n        // Ignore\n    }\n\n    ZookeeperServiceRegistry serviceRegistry = (ZookeeperServiceRegistry) getDelegate();\n    serviceRegistry.register(registration);\n}", "CodeBleu_score": 70.05974005782699}, {"code": "public void register(ZookeeperRegistration registration){\n\t    try {\n        ConfigurableApplicationContext applicationContext = (ConfigurableApplicationContext) getApplicationContext();\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onRegister(registration);\n    } catch (BeansException e) {\n        // Ignore\n    }\n\n    super.register(registration);\n}", "CodeBleu_score": 72.31628120398514}]}
{"instance_id": "99392dfa2335", "generation_result": [{"code": "public void deregister(ZookeeperRegistration registration){\n\t    try {\n        ConfigurableApplicationContext applicationContext = (ConfigurableApplicationContext) registration.getServiceRegistry().getApplicationContext();\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onDeregister(registration);\n    } catch (BeansException e) {\n\n    }\n\n    ZookeeperServiceRegistry serviceRegistry = registration.getServiceRegistry();\n    serviceRegistry.deregister(registration);\n}", "CodeBleu_score": 72.73004837269342}, {"code": "public void deregister(ZookeeperRegistration registration){\n\t    try {\n        ConfigurableApplicationContext applicationContext = (ConfigurableApplicationContext) getApplicationContext();\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onDeregister(registration);\n    } catch (BeansException e) {\n\n    }\n\n    ZookeeperServiceRegistry serviceRegistry = getServiceRegistry();\n    serviceRegistry.deregister(registration);\n}", "CodeBleu_score": 70.76220617817897}, {"code": "public void deregister(ZookeeperRegistration registration){\n\t    try {\n        ConfigurableApplicationContext applicationContext = (ConfigurableApplicationContext) registration.getServiceRegistry().getApplicationContext();\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onDeregister(registration);\n    } catch (BeansException e) {\n        // Ignore\n    }\n\n    ZookeeperServiceRegistry serviceRegistry = registration.getServiceRegistry();\n    serviceRegistry.deregister(registration);\n}", "CodeBleu_score": 72.73004837269342}]}
{"instance_id": "02a835946e90", "generation_result": [{"code": "public void close(){\n\t    try {\n        ConfigurableApplicationContext applicationContext = (ConfigurableApplicationContext) getApplicationContext();\n        if (applicationContext != null && applicationContext.isActive()) {\n            RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n            registerListenerExecutor.onClose();\n        }\n    } catch (BeansException e) {\n        // Ignore\n    }\n\n    serviceRegistry.close();\n}", "CodeBleu_score": 73.99767866927837}, {"code": "public void close(){\n\t    try {\n        ConfigurableApplicationContext applicationContext = (ConfigurableApplicationContext) getApplicationContext();\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onClose(this);\n    } catch (BeansException e) {\n        // Ignore\n    }\n\n    ZookeeperRegistration registration = (ZookeeperRegistration) getRegistration();\n    ZookeeperServiceRegistry serviceRegistry = (ZookeeperServiceRegistry) getServiceRegistry();\n    serviceRegistry.close(registration);\n}", "CodeBleu_score": 57.61820016087342}, {"code": "public void close(){\n\t    try {\n        ConfigurableApplicationContext applicationContext = (ConfigurableApplicationContext) getApplicationContext();\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onClose(this);\n    } catch (BeansException e) {\n        // Ignore\n    }\n\n    ZookeeperRegistration registration = (ZookeeperRegistration) getRegistration();\n    ZookeeperServiceRegistry serviceRegistry = (ZookeeperServiceRegistry) getServiceRegistry();\n    serviceRegistry.close(registration);\n}", "CodeBleu_score": 57.61820016087342}]}
{"instance_id": "64cf817f5945", "generation_result": [{"code": "private ZookeeperListener subscribeConfig(boolean globalConfig){\n\t    String group = getGroup();\n    String dataId = getDataId(globalConfig);\n    LOG.info(\"Subscribe {} config from {} server, group={}, dataId={}\", getConfigType(), getConfigType(), group, dataId);\n\n    try {\n        return zookeeperOperation.subscribeConfig(group, dataId, new ZookeeperSubscribeCallback() {\n            @Override\n            public void callback(String config) {\n                LOG.info(\"Get {} config updated event from {} server, group={}, dataId={}, config={}\", getConfigType(), getConfigType(), group, dataId, config);\n\n                callbackConfig(config, globalConfig);\n            }\n        });\n    } catch (Exception e) {\n        LOG.error(\"Subscribe {} config from {} server failed, group={}, dataId={}\", getConfigType(), getConfigType(), group, dataId, e);\n\n        return null;\n    }\n}", "CodeBleu_score": 70.2162480211744}, {"code": "private ZookeeperListener subscribeConfig(boolean globalConfig){\n\t    String group = globalConfig ? properties.getConfig().getGroup() : properties.getGroup();\n    String dataId = globalConfig ? properties.getConfig().getDataId() : properties.getServiceId();\n    String description = \"Config\";\n\n    LOG.info(\"{} subscribe started, group={}, dataId={}\", description, group, dataId);\n\n    try {\n        return zookeeperOperation.subscribeConfig(group, dataId, new ZookeeperSubscribeCallback() {\n            @Override\n            public void callback(String config) {\n                LOG.info(\"{} subscribe succeeded, group={}, dataId={}, config={}\", description, group, dataId, config);\n\n                callbackConfig(config, globalConfig);\n            }\n        });\n    } catch (Exception e) {\n        LOG.error(\"{} subscribe failed, group={}, dataId={}\", description, group, dataId, e);\n\n        return null;\n    }\n}", "CodeBleu_score": 55.716816184801196}, {"code": "private ZookeeperListener subscribeConfig(boolean globalConfig){\n\t    String group = pluginAdapter.getGroup();\n    String serviceId = pluginAdapter.getServiceId();\n    String dataId = globalConfig ? pluginAdapter.getGroup() : serviceId;\n\n    LOG.info(\"Subscribe {} config from zookeeper, group={}, dataId={}\", configType, group, dataId);\n\n    try {\n        return zookeeperOperation.subscribeConfig(group, dataId, new ZookeeperSubscribeCallback() {\n            @Override\n            public void callback(String config) {\n                try {\n                    callbackConfig(configType, config);\n                } catch (Exception e) {\n                    LOG.error(\"Callback \" + configType + \" config failed from zookeeper\", e);\n                }\n            }\n        });\n    } catch (Exception e) {\n        LOG.error(\"Subscribe \" + configType + \" config from zookeeper failed\", e);\n\n        return null;\n    }\n}", "CodeBleu_score": 52.58940702554722}]}
{"instance_id": "be408acc71f6", "generation_result": [{"code": "public CuratorFramework curatorFramework(){\n\t    String zookeeperConnection = environment.getProperty(ZookeeperConstant.ZOOKEEPER_CONNECTION);\n    if (StringUtils.isEmpty(zookeeperConnection)) {\n        throw new DiscoveryException(\"The Zookeeper connection string is missing\");\n    }\n\n    String zookeeperRetryCount = environment.getProperty(ZookeeperConstant.ZOOKEEPER_RETRY_COUNT);\n    if (StringUtils.isEmpty(zookeeperRetryCount)) {\n        zookeeperRetryCount = ZookeeperConstant.ZOOKEEPER_DEFAULT_RETRY_COUNT;\n    }\n\n    String zookeeperRetrySleep = environment.getProperty(ZookeeperConstant.ZOOKEEPER_RETRY_SLEEP);\n    if (StringUtils.isEmpty(zookeeperRetrySleep)) {\n        zookeeperRetrySleep = ZookeeperConstant.ZOOKEEPER_DEFAULT_RETRY_SLEEP;\n    }\n\n    ExponentialBackoffRetry retryPolicy = new ExponentialBackoffRetry(Integer.valueOf(zookeeperRetrySleep), Integer.valueOf(zookeeperRetryCount));\n\n    CuratorFramework curatorFramework = CuratorFrameworkFactory.builder().connectString(zookeeperConnection).retryPolicy(retryPolicy).build();\n    curatorFramework.start();\n\n    return curatorFramework;\n}", "CodeBleu_score": 49.69263807030728}, {"code": "public CuratorFramework curatorFramework(){\n\t    String zookeeperConnection = environment.getProperty(ZookeeperConstant.ZOOKEEPER_CONNECTION);\n    if (StringUtils.isEmpty(zookeeperConnection)) {\n        throw new DiscoveryException(\"Zookeeper connection is null or empty\");\n    }\n\n    int zookeeperRetryCount = environment.getProperty(ZookeeperConstant.ZOOKEEPER_RETRY_COUNT, Integer.class, ZookeeperConstant.ZOOKEEPER_DEFAULT_RETRY_COUNT);\n    int zookeeperRetrySleep = environment.getProperty(ZookeeperConstant.ZOOKEEPER_RETRY_SLEEP, Integer.class, ZookeeperConstant.ZOOKEEPER_DEFAULT_RETRY_SLEEP);\n\n    CuratorFramework curatorFramework = CuratorFrameworkFactory.builder().connectString(zookeeperConnection).retryPolicy(new ExponentialBackoffRetry(zookeeperRetrySleep, zookeeperRetryCount)).build();\n    curatorFramework.start();\n\n    return curatorFramework;\n}", "CodeBleu_score": 69.9717626712111}, {"code": "public CuratorFramework curatorFramework(){\n\t    String zookeeperConnection = environment.getProperty(ZookeeperConstant.ZOOKEEPER_CONNECTION);\n    if (StringUtils.isEmpty(zookeeperConnection)) {\n        throw new DiscoveryException(\"The Zookeeper connection string is null or empty\");\n    }\n\n    Integer zookeeperRetryTimes = environment.getProperty(ZookeeperConstant.ZOOKEEPER_RETRY_TIMES, Integer.class);\n    Integer zookeeperRetryInterval = environment.getProperty(ZookeeperConstant.ZOOKEEPER_RETRY_INTERVAL, Integer.class);\n\n    CuratorFramework curatorFramework = CuratorFrameworkFactory.builder().connectString(zookeeperConnection).retryPolicy(new ExponentialBackoffRetry(zookeeperRetryInterval, zookeeperRetryTimes)).build();\n    curatorFramework.start();\n\n    return curatorFramework;\n}", "CodeBleu_score": 57.158386608152576}]}
{"instance_id": "3628d7b6f0a5", "generation_result": [{"code": "protected static class GatewayRouteZookeeperConfiguration{\n\t    @Bean\n    @ConditionalOnMissingBean\n    @ConditionalOnProperty(value = \"spring.cloud.gateway.discovery.locator.enabled\", matchIfMissing = true)\n    public GatewayStrategyRouteZookeeperProcessor gatewayStrategyRouteZookeeperProcessor(ConfigurableEnvironment environment, ZookeeperProcessor zookeeperProcessor, TracingContext tracingContext) {\n        return new GatewayStrategyRouteZookeeperProcessor(environment, zookeeperProcessor, tracingContext);\n    }\n}", "CodeBleu_score": 30.05280651591371}, {"code": "protected static class GatewayRouteZookeeperConfiguration{\n\t    @Bean\n    @ConditionalOnProperty(value = \"spring.cloud.gateway.discovery.locator.enabled\", matchIfMissing = true)\n    public GatewayStrategyRouteZookeeperProcessor gatewayStrategyRouteZookeeperProcessor(ConfigurableEnvironment environment, ZookeeperProcessor zookeeperProcessor, GatewayStrategyContextListener gatewayStrategyContextListener, TracingContext tracingContext) {\n        return new GatewayStrategyRouteZookeeperProcessor(environment, zookeeperProcessor, gatewayStrategyContextListener, tracingContext);\n    }\n}", "CodeBleu_score": 31.58290573370986}, {"code": "protected static class GatewayRouteZookeeperConfiguration{\n\t    @Bean\n    @ConditionalOnMissingBean\n    @ConditionalOnProperty(value = \"spring.cloud.gateway.discovery.locator.enabled\", matchIfMissing = true)\n    public GatewayStrategyRouteZookeeperProcessor gatewayStrategyRouteZookeeperProcessor(ConfigurableEnvironment environment, TracingContext tracingContext, ZookeeperProcessor zookeeperProcessor) {\n        return new GatewayStrategyRouteZookeeperProcessor(environment, tracingContext, zookeeperProcessor);\n    }\n}", "CodeBleu_score": 30.05280651591371}]}
{"instance_id": "68a13b54ad7c", "generation_result": [{"code": "public  CuratorFramework createCuratorFramework(){\n\t\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    CuratorFramework client = CuratorFrameworkFactory.builder()\n            .connectString(zookeeperHosts)\n            .sessionTimeoutMs(sessionTimeout)\n            .retryPolicy(retryPolicy)\n            .namespace(namespace)\n            .build();\n    client.start();\n    return client;\n}", "CodeBleu_score": 49.60241845822671}, {"code": "public  CuratorFramework createCuratorFramework(){\n\t\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n\n    CuratorFramework client = CuratorFrameworkFactory.builder()\n            .connectString(this.zookeeperHosts)\n            .sessionTimeoutMs(this.zookeeperSessionTimeout)\n            .retryPolicy(retryPolicy)\n            .namespace(this.zookeeperNamespace)\n            .build();\n\n    client.start();\n\n    return client;\n}", "CodeBleu_score": 53.02082493422133}, {"code": "public  CuratorFramework createCuratorFramework(){\n\t    String zooKeeperHosts = zooKeeperProperties.getHosts();\n    int sessionTimeout = zooKeeperProperties.getSessionTimeout();\n    String namespace = zooKeeperProperties.getNamespace();\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    CuratorFramework curatorFramework = CuratorFrameworkFactory.builder()\n            .connectString(zooKeeperHosts)\n            .sessionTimeoutMs(sessionTimeout)\n            .namespace(namespace)\n            .retryPolicy(retryPolicy)\n            .build();\n    curatorFramework.start();\n    return curatorFramework;\n}", "CodeBleu_score": 54.42969733281837}]}
{"instance_id": "018a3d7b5f59", "generation_result": [{"code": "public void lock(String path) throws DistributedLockException{\n\t    try {\n        InterProcessLock lock = locksMap.get(path);\n        if (lock == null) {\n            lock = new InterProcessMutex(curatorFrameworkClient.getClient(), path);\n            locksMap.put(path, lock);\n        }\n        lock.acquire();\n    } catch (Exception e) {\n        throw new DistributedLockException(e);\n    }\n}", "CodeBleu_score": 28.08368339125749}, {"code": "public void lock(String path) throws DistributedLockException{\n\t    if (locksMap.containsKey(path)) {\n        relock(path);\n        return;\n    }\n\n    InterProcessLock lock = new InterProcessMutex(curatorFrameworkClient.getCuratorFramework(), path);\n    try {\n        lock.acquire(lockTimeOut, TimeUnit.MILLISECONDS);\n        locksMap.put(path, lock);\n    } catch (Exception e) {\n        throw new DistributedLockException(e);\n    }\n}", "CodeBleu_score": 27.22371880109005}, {"code": "public void lock(String path) throws DistributedLockException{\n\t    InterProcessLock lock = null;\n    try {\n        lock = getLock(path);\n        lock.acquire();\n    } catch (Exception e) {\n        throw new DistributedLockException(e);\n    }\n}", "CodeBleu_score": 18.32844985083305}]}
{"instance_id": "2068af09c973", "generation_result": [{"code": "public static Map<Object, Object> genPropertiesMap(DtpProperties dtpProperties){\n\t    val latch = new CountDownLatch(1);\n    val propertiesMap = Maps.newConcurrentMap();\n    val curatorFramework = genCuratorFramework(dtpProperties, latch);\n    val configFileType = dtpProperties.getConfigFileType();\n    if (PROPERTIES == configFileType) {\n        genPropertiesTypeMap(dtpProperties, curatorFramework, propertiesMap);\n    } else if (JSON == configFileType) {\n        val configKey = dtpProperties.getConfigKey();\n        val configPath = ZKPaths.makePath(dtpProperties.getRootPath(), configKey);\n        val configHandler = new ConfigHandler(dtpProperties.getConfigHandlerType());\n        try {\n            val data = curatorFramework.getData().forPath(configPath);\n            propertiesMap.putAll(configHandler.parse(new String(data, StandardCharsets.UTF_8)));\n        } catch (Exception e) {\n            log.error(\"Failed to get data from zookeeper node: {}\", configPath, e);\n        }\n    }\n    return propertiesMap;\n}", "CodeBleu_score": 42.370935492446804}, {"code": "public static Map<Object, Object> genPropertiesMap(DtpProperties dtpProperties){\n\t    val propertiesMap = Maps.newHashMap();\n    val zkProperties = dtpProperties.getZookeeper();\n    val connectString = zkProperties.getConnectString();\n    val sessionTimeout = zkProperties.getSessionTimeout();\n    val connectionTimeout = zkProperties.getConnectionTimeout();\n    val retryTimes = zkProperties.getRetryTimes();\n    val sleepMsBetweenRetries = zkProperties.getSleepMsBetweenRetries();\n    val configType = dtpProperties.getConfigType();\n    val configKey = dtpProperties.getConfigKey();\n    val latch = new CountDownLatch(1);\n    val curatorFramework = CuratorFrameworkFactory.newClient(connectString, sessionTimeout, connectionTimeout, new ExponentialBackoffRetry(sleepMsBetweenRetries, retryTimes));\n    curatorFramework.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n        @Override\n        public void stateChanged(CuratorFramework client, ConnectionState newState) {\n            if (newState == ConnectionState.CONNECTED) {\n                latch.countDown();\n            }\n        }\n    });\n    curatorFramework.start();\n    try {\n        latch.await();\n        if (configType == PROPERTIES) {\n            propertiesMap.putAll(genPropertiesTypeMap(curatorFramework, zkProperties.getRootPath()));\n        } else if (configType == JSON) {\n            val configPath = ZKPaths.makePath(zkProperties.getRootPath(), configKey);\n            val configHandler = ConfigHandler.getInstance();\n            val data = curatorFramework.getData().forPath(configPath);\n            val config = new String(data, StandardCharsets.UTF_8);\n            propertiesMap.putAll(configHandler.parse(config));\n        }\n    } catch (Exception e) {\n        log.error(\"Failed to get data from zookeeper.\", e);\n    } finally {\n        curatorFramework.close();\n    }\n    return propertiesMap;\n}", "CodeBleu_score": 33.79960226122175}, {"code": "public static Map<Object, Object> genPropertiesMap(DtpProperties dtpProperties){\n\t    val propertiesMap = Maps.newHashMap();\n    val zkUrl = dtpProperties.getZookeeperUrl();\n    val zkPath = dtpProperties.getZookeeperPath();\n    val configFileType = dtpProperties.getConfigFileType();\n    val retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    val curatorFramework = CuratorFrameworkFactory.newClient(zkUrl, retryPolicy);\n    curatorFramework.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n        @Override\n        public void stateChanged(CuratorFramework client, ConnectionState newState) {\n            if (newState == ConnectionState.LOST) {\n                log.error(\"zk connection lost\");\n            }\n        }\n    });\n    curatorFramework.start();\n    val latch = new CountDownLatch(1);\n    curatorFramework.getConnectionStateListenable().addListener((client, newState) -> {\n        if (newState == ConnectionState.CONNECTED) {\n            latch.countDown();\n        }\n    });\n    try {\n        latch.await();\n    } catch (InterruptedException e) {\n        log.error(\"zk connection error\", e);\n        Thread.currentThread().interrupt();\n    }\n    try {\n        if (PROPERTIES == configFileType) {\n            genPropertiesTypeMap(dtpProperties, curatorFramework, propertiesMap);\n        } else if (JSON == configFileType) {\n            val configKey = dtpProperties.getConfigKey();\n            val path = ZKPaths.makePath(zkPath, configKey);\n            val data = curatorFramework.getData().forPath(path);\n            val json = new String(data, StandardCharsets.UTF_8);\n            propertiesMap.putAll(ConfigHandler.parseConfig(json));\n        }\n    } catch (Exception e) {\n        log.error(\"gen properties map error\", e);\n    }\n    curatorFramework.close();\n    return propertiesMap;\n}", "CodeBleu_score": 36.62309269831915}]}
{"instance_id": "3d3c9020d299", "generation_result": [{"code": "public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application){\n\t    DtpProperties dtpProperties = BinderHelper.bindDtpProperties(environment);\n    Map<String, Object> dtpPropertiesMap = BinderHelper.bindDtpPropertiesMap(dtpProperties);\n    MutablePropertySources propertySources = environment.getPropertySources();\n    if (!propertySources.contains(CuratorUtil.ZK_PROPERTY_SOURCE_NAME)) {\n        OriginTrackedMapPropertySource propertySource = new OriginTrackedMapPropertySource(CuratorUtil.ZK_PROPERTY_SOURCE_NAME, dtpPropertiesMap);\n        propertySources.addFirst(propertySource);\n    }\n}", "CodeBleu_score": 46.03897309781474}, {"code": "public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application){\n\t    MutablePropertySources propertySources = environment.getPropertySources();\n    DtpProperties dtpProperties = BinderHelper.bindDtpProperties(environment);\n    Map<String, Object> properties = CuratorUtil.generateProperties(dtpProperties);\n    OriginTrackedMapPropertySource propertySource = new OriginTrackedMapPropertySource(\"zookeeper\", properties);\n    if (!propertySources.contains(propertySource.getName())) {\n        propertySources.addFirst(propertySource);\n    }\n}", "CodeBleu_score": 44.50665517749234}, {"code": "public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application){\n\t    DtpProperties dtpProperties = BinderHelper.bindDtpProperties(environment);\n    Map<String, Object> properties = BinderHelper.bindToMap(dtpProperties);\n    if (!checkPropertyExist(environment, properties)) {\n        MutablePropertySources propertySources = environment.getPropertySources();\n        propertySources.addFirst(CuratorUtil.createZookeeperPropertySource(dtpProperties));\n    }\n}", "CodeBleu_score": 56.301552443592925}]}
{"instance_id": "0a934e7885be", "generation_result": [{"code": "public ZookeeperModule UseZooKeeperRouteManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t\tbuilder.Register(provider => {\n\t\t\tvar serviceRouteFactory = provider.Resolve<IServiceRouteFactory>();\n\t\t\tvar serviceCommandManager = provider.Resolve<IServiceCommandManager>();\n\t\t\tvar serializer = provider.Resolve<ISerializer<byte[]>>();\n\t\t\tvar logger = provider.Resolve<ILogger<ZooKeeperServiceRouteManager>>();\n\t\t\tvar configInfo = provider.Resolve<ConfigInfo>();\n\t\t\treturn new ZooKeeperServiceRouteManager(configInfo.RoutePath, serviceRouteFactory, serviceCommandManager, serializer, logger);\n\t\t})\n\t\t.SingleInstance();\n\treturn this;\n}", "CodeBleu_score": 40.12172800837295}, {"code": "public ZookeeperModule UseZooKeeperRouteManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t\tif (configInfo.RoutePath == null) {\n\t\tthrow new ArgumentNullException(\"RoutePath\");\n\t}\n\n\tif (configInfo.SubscriberPath == null) {\n\t\tthrow new ArgumentNullException(\"SubscriberPath\");\n\t}\n\n\tif (configInfo.CachePath == null) {\n\t\tthrow new ArgumentNullException(\"CachePath\");\n\t}\n\n\tif (configInfo.MqttRoutePath == null) {\n\t\tthrow new ArgumentNullException(\"MqttRoutePath\");\n\t}\n\n\tif (configInfo.ChRoot == null) {\n\t\tthrow new ArgumentNullException(\"ChRoot\");\n\t}\n\n\tif (configInfo.ReloadOnChange) {\n\t\tbuilder.Register(provider => new ConfigurationWatch(\n\t\t\tprovider.Resolve<IConfiguration>(),\n\t\t\tprovider.Resolve<ILogger<ConfigurationWatch>>(),\n\t\t\tconfigInfo.RoutePath,\n\t\t\tconfigInfo.SubscriberPath,\n\t\t\tconfigInfo.CachePath,\n\t\t\tconfigInfo.MqttRoutePath\n\t\t)).SingleInstance();\n\t}\n\n\tbuilder.Register(provider => new ZookeeperServiceRouteFactory(\n\t\tconfigInfo,\n\t\tprovider.Resolve<ISerializer<byte[]>>(),\n\t\tprovider.Resolve<ISerializer<string>>(),\n\t\tprovider.Resolve<IServiceRouteFactory>()\n\t)).SingleInstance();\n\n\tbuilder.Register(provider => {\n\t\tvar zooKeeperClientProvider = GetZooKeeperClientProvider(configInfo, provider);\n\t\treturn new ZookeeperServiceRouteManager(\n\t\t\tconfigInfo,\n\t\t\tzooKeeperClientProvider,\n\t\t\tprovider.Resolve<ISerializer<byte[]>>(),\n\t\t\tprovider.Resolve<ISerializer<string>>(),\n\t\t\tprovider.Resolve<IServiceRouteFactory>(),\n\t\t\tprovider.Resolve<ILogger<ZookeeperServiceRouteManager>>(),\n\t\t\tprovider.Resolve<IServiceHeartbeatManager>(),\n\t\t\tprovider.Resolve<IServiceCacheManager>(),\n\t\t\tprovider.Resolve<IEventBus", "CodeBleu_score": 41.99998737265963}, {"code": "public ZookeeperModule UseZooKeeperRouteManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t\treturn builder.Register(provider => {\n\t\tvar serviceRouteFactory = provider.Resolve<IServiceRouteFactory>();\n\t\tvar serviceCommandManager = provider.Resolve<IServiceCommandManager>();\n\t\tvar configInfo = provider.Resolve<ConfigInfo>();\n\t\tvar serviceRouteProvider = new ZookeeperServiceRouteProvider(\n\t\t\tconfigInfo, serviceRouteFactory, serviceCommandManager, provider.Resolve<ISerializer<byte[]>>(),\n\t\t\tprovider.Resolve<ISerializer<string>>(), provider.Resolve<IServiceRouteManager>(),\n\t\t\tprovider.Resolve<ILogger<ZookeeperServiceRouteProvider>>(), provider.Resolve<IServiceHeartbeatManager>(),\n\t\t\tprovider.Resolve<IServiceCacheManager>(), provider.Resolve<IServiceSubscriberFactory>(),\n\t\t\tprovider.Resolve<IServiceSubscriptionFactory>(), provider.Resolve<ISerializer<string>>(),\n\t\t\tprovider.Resolve<ISerializer<byte[]>>(), provider.Resolve<IServiceEntryManager>(),\n\t\t\tprovider.Resolve<IServiceMetadataManager>(), provider.Resolve<IServiceCommandManager>(),\n\t\t\tprovider.Resolve<IServiceInvokeManager>(), provider.Resolve<IServiceSubscriberManager>(),\n\t\t\tprovider.Resolve<IServiceProxyManager>(), provider.Resolve<IServiceHeartbeatManager>(),\n\t\t\tprovider.Resolve<IServiceEntryProvider>(), provider.Resolve<IServiceProviderManager>(),\n\t\t\tprovider.Resolve<IAuthorizationServiceProvider>(), provider.Resolve<ILogger<ZookeeperServiceRouteProvider>>(),\n\t\t\tprovider.Resolve<IServiceAuthenticationManager>());\n\t\treturn serviceRouteProvider;\n\t}).As(typeof(IServiceRouteProvider)).SingleInstance().Build();\n}", "CodeBleu_score": 29.633949480237487}]}
{"instance_id": "c30a17587331", "generation_result": [{"code": " public ZookeeperModule UseZooKeeperCommandManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t\t\t\t\treturn new ZookeeperModule(provider => {\n\t\t\t\t\treturn new DefaultServiceCommandManager(\n\t\t\t\t\t\tprovider.GetService<IServiceRouteManager>(),\n\t\t\t\t\t\tprovider.GetService<ISerializer<byte[]>>(),\n\t\t\t\t\t\tprovider.GetService<ISerializer<string>>(),\n\t\t\t\t\t\tprovider.GetService<IServiceCommandProvider>(),\n\t\t\t\t\t\tprovider.GetService<ILogger<DefaultServiceCommandManager>>(),\n\t\t\t\t\t\tconfigInfo\n\t\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}", "CodeBleu_score": 51.11374423021721}, {"code": " public ZookeeperModule UseZooKeeperCommandManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t\t\tvar config = new CPlatformContainer().GetInstances<ZookeeperOption>(configInfo.ZookeeperSection);\n\t\tbuilder.Register(provider => {\n\t\t\treturn new ZookeeperServiceCommandManager(\n\t\t\t\tprovider.Resolve<ISerializer<byte[]>>(),\n\t\t\t\tprovider.Resolve<IServiceRouteManager>(),\n\t\t\t\tprovider.Resolve<ILogger<ZookeeperServiceCommandManager>>(),\n\t\t\t\tconfigInfo,\n\t\t\t\tprovider.Resolve<IZookeeperClientProvider>(),\n\t\t\t\tprovider.Resolve<IServiceHeartbeatManager>(),\n\t\t\t\tprovider.Resolve<IServiceCommandManager>(),\n\t\t\t\tprovider.Resolve<IServiceEntryManager>(),\n\t\t\t\tprovider.Resolve<IClientWatchManager>(),\n\t\t\t\tprovider.Resolve<IServiceSubscriberFactory>(),\n\t\t\t\tprovider.Resolve<IServiceSubscriptionFactory>(),\n\t\t\t\tprovider.Resolve<IServiceRouteFactory>(),\n\t\t\t\tprovider.Resolve<IServiceCacheManager>(),\n\t\t\t\tprovider.Resolve<IServiceCommandFactory>(),\n\t\t\t\tprovider.Resolve<ISerializer<string>>(),\n\t\t\t\tprovider.Resolve<IServiceSubscriptionManager>(),\n\t\t\t\tprovider.Resolve<IEventBus>(),\n\t\t\t\tprovider.Resolve<IServiceCommandProvider>(),\n\t\t\t\tprovider.Resolve<IServiceExecutor>(),\n\t\t\t\tprovider.Resolve<IConfigurationWatchProvider>(),\n\t\t\t\tprovider.Resolve<IConfigurationParser>(),\n\t\t\t\tprovider.Resolve<IRemoteInvokeService>(),\n\t\t\t\tprovider.Resolve<IConfigurationProvider>(),\n\t\t\t\tprovider.Resolve<ILogger<ZookeeperServiceCacheManager>>(),\n\t\t\t\tprovider.Resolve<ILogger<ZookeeperServiceEntryManager>>(),\n\t\t\t\tprovider.Resolve<ILogger<ZookeeperServiceSubscriptionManager>>(),\n\t\t\t\tprovider.Resolve<ILogger<ZookeeperServiceCommandManager>>(),\n\t\t\t\tprovider.", "CodeBleu_score": 46.366558536460154}, {"code": " public ZookeeperModule UseZooKeeperCommandManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t\tif (configInfo == null)\n\t{\n\t\tthrow new ArgumentNullException(nameof(configInfo));\n\t}\n\tbuilder.Register(provider => {\n\t\treturn new CommandManager(\n\t\t\tprovider.Resolve<IServiceCommandProvider>(),\n\t\t\tprovider.Resolve<ISerializer<byte[]>>(),\n\t\t\tprovider.Resolve<ISerializer<string>>(),\n\t\t\tprovider.Resolve<IServiceRouteManager>(),\n\t\t\tprovider.Resolve<ILogger<CommandManager>>(),\n\t\t\tconfigInfo\n\t\t);\n\t}).SingleInstance();\n\treturn this;\n}", "CodeBleu_score": 52.63735352231272}]}
{"instance_id": "213cc4aa9b19", "generation_result": [{"code": "public static IConfigurationBuilder AddZookeeperFile(this IConfigurationBuilder builder, IFileProvider provider, string path, bool optional, bool reloadOnChange){\n\t    if (builder == null) {\n        throw new ArgumentNullException(nameof(builder))\n    }\n\n    if (string.IsNullOrEmpty(path)) {\n        throw new ArgumentException(\"File path must be a non-empty string.\", nameof(path))\n    }\n\n    if (provider == null && Path.IsPathRooted(path)) {\n        provider = new PhysicalFileProvider(Path.GetDirectoryName(path))\n    }\n\n    var source = new ZookeeperConfigurationSource {\n        FileProvider = provider,\n        Path = path,\n        Optional = optional,\n        ReloadOnChange = reloadOnChange,\n        ReloadDelay = TimeSpan.FromSeconds(10)\n    }\n\n    builder.Add(source)\n    return builder\n}", "CodeBleu_score": 58.81797506170696}, {"code": "public static IConfigurationBuilder AddZookeeperFile(this IConfigurationBuilder builder, IFileProvider provider, string path, bool optional, bool reloadOnChange){\n\t    if (builder == null) {\n        throw new ArgumentNullException(nameof(builder))\n    }\n    if (string.IsNullOrEmpty(path)) {\n        throw new ArgumentException(Resources.FormatError_InvalidFilePath(), nameof(path))\n    }\n    if (provider == null && Path.IsPathRooted(path)) {\n        provider = new PhysicalFileProvider(Path.GetDirectoryName(path))\n    }\n    var source = new ZookeeperConfigurationSource {\n        FileProvider = provider,\n        Path = path,\n        Optional = optional,\n        ReloadOnChange = reloadOnChange,\n        ReloadDelay = TimeSpan.FromSeconds(5)\n    }\n    builder.Add(source)\n    return builder\n}", "CodeBleu_score": 58.04245934117871}, {"code": "public static IConfigurationBuilder AddZookeeperFile(this IConfigurationBuilder builder, IFileProvider provider, string path, bool optional, bool reloadOnChange){\n\t    if (builder == null) {\n        throw new ArgumentNullException(nameof(builder))\n    }\n    if (string.IsNullOrEmpty(path)) {\n        throw new ArgumentException(Resources.FormatError_InvalidFilePath(), nameof(path))\n    }\n\n    if (provider == null && Path.IsPathRooted(path)) {\n        provider = new PhysicalFileProvider(Path.GetDirectoryName(path))\n    }\n\n    var source = new ZookeeperConfigurationSource {\n        FileProvider = provider,\n        Path = path,\n        Optional = optional,\n        ReloadOnChange = reloadOnChange\n    }\n\n    builder.Add(source)\n    return builder\n}", "CodeBleu_score": 60.45103760473203}]}
{"instance_id": "15bbffa82a13", "generation_result": [{"code": "public override async Task RemveAddressAsync(IEnumerable<AddressModel> Address){\n\t    var routes = await GetRoutesAsync();\n    var addresses = Address.ToArray();\n    foreach (var route in routes) {\n        route.Address = route.Address.Except(addresses).ToArray();\n    }\n    await base.SetRoutesAsync(routes);\n}", "CodeBleu_score": 75.56169094540238}, {"code": "public override async Task RemveAddressAsync(IEnumerable<AddressModel> Address){\n\t    var routes = await GetRoutesAsync().ConfigureAwait(false);\n    var route = routes.SingleOrDefault(p => p.ServiceDescriptor.Id == Address.ServiceDescriptor.Id);\n    if (route == null)\n        return;\n    route.Address = route.Address.Except(Address).ToList();\n    await SetRoutesAsync(routes).ConfigureAwait(false);\n}", "CodeBleu_score": 48.523971756886084}, {"code": "public override async Task RemveAddressAsync(IEnumerable<AddressModel> Address){\n\t    if (Address == null)\n        throw new ArgumentNullException(nameof(Address));\n\n    var routes = await GetRoutesAsync().ConfigureAwait(false);\n    foreach (var route in routes) {\n        route.Address = route.Address?.Where(i => !Address.Any(j => j.Equals(i)))?.ToList();\n    }\n    await SetRoutesAsync(routes).ConfigureAwait(false);\n}", "CodeBleu_score": 57.10555396117278}]}
{"instance_id": "125d23de2a60", "generation_result": [{"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<ServiceRoute> routes, AddressModel hostAddr){\n\t\tvar path = _zookeeperConfig.RoutePath;\n\tvar zookeeperClients = await _zookeeperClientProvider.GetZooKeeperClients();\n\tforeach (var zookeeperClient in zookeeperClients) {\n\t\tvar currentRoutes = (await zookeeperClient.GetChildrenAsync(path)).Where(p => p.StartsWith(zookeeperClient.Name)).Select(p => p.Substring(p.IndexOf(zookeeperClient.Name) + zookeeperClient.Name.Length + 1)).ToList();\n\t\tvar removeRouteIds = currentRoutes.Where(p => !routes.Any(n => n.ServiceDescriptor.Id == p)).ToList();\n\t\tforeach (var routeId in removeRouteIds) {\n\t\t\tvar routePath = $\"{path}{ zookeeperClient.Name}/{routeId}\";\n\t\t\tvar addresses = (await zookeeperClient.GetDataAsync(routePath)).ToObject<IEnumerable<AddressModel>>();\n\t\t\tif (addresses.Any(p => p.ToString() == hostAddr.ToString())) {\n\t\t\t\tawait zookeeperClient.DeleteAsync(routePath);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 33.87053002845188}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<ServiceRoute> routes, AddressModel hostAddr){\n\t    var path = _zookeeperConfig.RoutePath;\n    var zooKeeperClients = await _zookeeperClientProvider.GetZooKeeperClientsAsync();\n    foreach (var zooKeeperClient in zooKeeperClients) {\n        var currentRoutes = (await zooKeeperClient.GetChildrenAsync(path)).Where(p => p.StartsWith(zooKeeperClient.ListenAddress)).Select(p => p.Substring(0, p.LastIndexOf(\"-\")));\n        var deleteRoutePaths = currentRoutes.Except(routes.Select(p => p.ServiceDescriptor.Id)).Select(p => $\"{path}/{zooKeeperClient.ListenAddress}{p}\");\n        var addresses = routes.SelectMany(p => p.Address).Select(p => p.ToString());\n        foreach (var deleteRoutePath in deleteRoutePaths) {\n            var route = await zooKeeperClient.GetDataAsync<byte[]>(deleteRoutePath);\n            var routeAddresses = _serializer.Deserialize<IEnumerable<AddressModel>>(route).Select(p => p.ToString());\n            if (addresses.Any(p => routeAddresses.Contains(p)) && (hostAddr == null || routeAddresses.Contains(hostAddr.ToString()))) {\n                await zooKeeperClient.DeleteAsync(deleteRoutePath);\n            }\n        }\n    }\n}", "CodeBleu_score": 41.459914167941314}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<ServiceRoute> routes, AddressModel hostAddr){\n\t\tif (routes == null || !routes.Any()) return;\n\tvar path = _zookeeperConfig.RoutePath;\n\tvar zooKeeperClients = await _zooKeeperClientProvider.GetZooKeeperClients();\n\tforeach (var zooKeeperClient in zooKeeperClients) {\n\t\tvar currentRoutes = (await zooKeeperClient.GetChildrenAsync(path)).ToList();\n\t\tvar deleteRouteIds = currentRoutes.Except(routes.Select(p => p.ServiceDescriptor.Id));\n\t\tforeach (var deleteRouteId in deleteRouteIds) {\n\t\t\tvar addressPath = $\"{path}{deleteRouteId}\";\n\t\t\tvar addresses = (await zooKeeperClient.GetChildrenAsync(addressPath)).ToList();\n\t\t\tvar deleteAddresses = addresses.Where(address => address.Equals(hostAddr.ToString(), StringComparison.OrdinalIgnoreCase));\n\t\t\tforeach (var deleteAddress in deleteAddresses) {\n\t\t\t\tvar addressNodePath = $\"{addressPath}{ZookeeperPath.KeyValueSeparatorChar}{deleteAddress}\";\n\t\t\t\tawait zooKeeperClient.DeleteAsync(addressNodePath);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 36.19910920818806}]}
{"instance_id": "b020a235d57f", "generation_result": [{"code": "private async Task<ServiceRoute> GetRoute(byte[] data){\n\t\tif (data == null) return null;\n\tif (_logger.IsEnabled(LogLevel.Debug))\n\t{\n\t\t_logger.LogDebug($\"\u51c6\u5907\u8f6c\u6362\u670d\u52a1\u8def\u7531\uff0c\u914d\u7f6e\u5185\u5bb9\uff1a{Encoding.UTF8.GetString(data)}\u3002\");\n\t}\n\tvar descriptor = await _serializer.DeserializeAsync<byte[], ServiceRouteDescriptor>(data);\n\treturn (await _serviceRouteFactory.CreateServiceRoutesAsync(new ServiceRouteDescriptor[] { descriptor })).First();\n}", "CodeBleu_score": 57.62397332402487}, {"code": "private async Task<ServiceRoute> GetRoute(byte[] data){\n\t    if (data == null)\n        return null;\n\n    if (_logger.IsEnabled(LogLevel.Debug))\n        _logger.LogDebug($\"\u83b7\u53d6\u8def\u7531\u6570\u636e\uff1a{Encoding.UTF8.GetString(data)}\u3002\");\n\n    var descriptor = await _serializer.DeserializeAsync<ServiceRouteDescriptor>(data);\n\n    return (await _serviceRouteFactory.CreateServiceRoutesAsync(descriptor)).First();\n}", "CodeBleu_score": 50.37452166859576}, {"code": "private async Task<ServiceRoute> GetRoute(byte[] data){\n\t    if (data == null)\n        return null;\n    if (_logger.IsEnabled(LogLevel.Debug))\n        _logger.LogDebug($\"\u83b7\u53d6\u8def\u7531\u4fe1\u606f\uff0cinfo\uff1a{Encoding.UTF8.GetString(data)}\u3002\");\n    var descriptor = await _serializer.DeserializeAsync<byte[], ServiceRouteDescriptor>(data);\n    return (await _serviceRouteFactory.CreateServiceRoutesAsync(new ServiceRouteDescriptor[] { descriptor })).First();\n}", "CodeBleu_score": 58.65531962900472}]}
{"instance_id": "169ed4cc2ad4", "generation_result": [{"code": "public async Task NodeChange(byte[] oldData, byte[] newData){\n\t    if (oldData == null && newData == null)\n        return;\n    if (oldData != null && newData != null && oldData.SequenceEqual(newData))\n        return;\n    var newRoute = _serializer.Deserialize<ServiceRoute>(Encoding.UTF8.GetString(newData));\n    var oldRoute = _routes.Values.SingleOrDefault(i => i.ServiceDescriptor.Id == newRoute.ServiceDescriptor.Id);\n    await UpdateRoutesAsync(newRoute, oldRoute);\n}", "CodeBleu_score": 33.02261636268798}, {"code": "public async Task NodeChange(byte[] oldData, byte[] newData){\n\t    if (oldData == null && newData == null)\n        return;\n    if (oldData != null && newData != null && Encoding.UTF8.GetString(oldData) == Encoding.UTF8.GetString(newData))\n        return;\n    var newRoute = await GetRoute(newData).ConfigureAwait(false);\n    if (newRoute == null)\n        return;\n    var oldRoute = await GetRoute(oldData).ConfigureAwait(false);\n    if (oldRoute == null)\n        return;\n    lock (_routes) {\n        var index = _routes.FindIndex(p => p.ServiceDescriptor.Id == oldRoute.ServiceDescriptor.Id);\n        if (index > -1) {\n            _routes[index] = newRoute;\n        }\n    }\n    OnChanged(new ServiceRouteChangedEventArgs(newRoute, oldRoute));\n}", "CodeBleu_score": 45.96944341235989}, {"code": "public async Task NodeChange(byte[] oldData, byte[] newData){\n\t    if (oldData == null || newData == null || oldData.SequenceEqual(newData))\n        return;\n\n    var newRoutes = await GetRoutes(newData).ConfigureAwait(false);\n    var oldRoutes = await GetRoutes(oldData).ConfigureAwait(false);\n\n    var newRoute = newRoutes.FirstOrDefault();\n    var oldRoute = oldRoutes.FirstOrDefault();\n\n    if (newRoute != null && oldRoute != null) {\n        lock (_routes) {\n            var index = _routes.FindIndex(p => p.Address.Equals(oldRoute.Address));\n            if (index != -1) {\n                _routes[index] = newRoute;\n            }\n        }\n    }\n    else if (newRoute != null) {\n        lock (_routes) {\n            _routes.Add(newRoute);\n        }\n    }\n    else if (oldRoute != null) {\n        lock (_routes) {\n            _routes.Remove(oldRoute);\n        }\n    }\n\n    OnChanged(new RoutingEventArgs(newRoutes, oldRoutes));\n}", "CodeBleu_score": 31.11534388930267}]}
{"instance_id": "af01261d3199", "generation_result": [{"code": "public override async Task SetSubscribersAsync(IEnumerable<ServiceSubscriber> subscribers){\n\t    var path = _zookeeperConfig.SubscriberPath;\n    var serviceSubscribers = await base.GetSubscribersAsync();\n    var serviceSubscribersDictionary = serviceSubscribers.ToDictionary(p => p.ServiceDescriptor.Id, p => p);\n    var subscriberNodes = (await _zookeeperClient.GetChildrenAsync(path)).ToList();\n    foreach (var subscriber in subscribers) {\n        var node = subscriberNodes.SingleOrDefault(p => p == subscriber.ServiceDescriptor.Id);\n        if (node.IsNotNullOrEmpty()) {\n            var subscriberPath = $\"{path}{node}\";\n            var addresses = (await _zookeeperClient.GetDataAsync(subscriberPath)).ToArray();\n            var addressArray = _serializer.Deserialize<string[]>(addresses);\n            var addressList = subscriber.Address.Concat(addressArray.Except(subscriber.Address)).Distinct().ToList();\n            var serviceSubscriber = serviceSubscribersDictionary[subscriber.ServiceDescriptor.Id];\n            serviceSubscriber.Address = addressList;\n            serviceSubscribersDictionary[subscriber.ServiceDescriptor.Id] = serviceSubscriber;\n        }\n    }\n    await base.SetSubscribersAsync(serviceSubscribersDictionary.Values);\n}", "CodeBleu_score": 36.90052730935979}, {"code": "public override async Task SetSubscribersAsync(IEnumerable<ServiceSubscriber> subscribers){\n\t    var path = _pathProvider.GetSubscriberPath(subscribers.First().ServiceDescriptor.Id);\n    var newSubscribers = await ConvertPathsToSubscribersAsync(path);\n    newSubscribers = subscribers.Union(newSubscribers, new ServiceSubscriberComparer()).ToList();\n    await base.SetSubscribersAsync(newSubscribers);\n}", "CodeBleu_score": 32.91610703587878}, {"code": "public override async Task SetSubscribersAsync(IEnumerable<ServiceSubscriber> subscribers){\n\t    var path = _pathProvider.GetSubscribersPath();\n    var newSubscribers = await GetSubscribers(subscribers, path);\n    await base.SetSubscribersAsync(newSubscribers);\n}", "CodeBleu_score": 12.260999070087804}]}
{"instance_id": "fda02cec3296", "generation_result": [{"code": "private async Task<ServiceSubscriber[]> GetSubscribers(IEnumerable<string> childrens){\n\t    var rootPath = _zookeeperClient.ServicePath;\n    var subscribers = new List<ServiceSubscriber>();\n    foreach (var children in childrens) {\n        _logger.LogDebug($\"\u51c6\u5907\u4ece\u8282\u70b9\uff1a{children}\u4e2d\u83b7\u53d6\u8ba2\u9605\u8005\u4fe1\u606f\u3002\");\n        var path = $\"{rootPath}{children}\";\n        var data = await _zookeeperClient.GetDataAsync(path);\n        var subscriber = _serializer.Deserialize<byte[], ServiceSubscriber>(data);\n        subscribers.Add(subscriber);\n    }\n    return subscribers.ToArray();\n}", "CodeBleu_score": 46.40049540724871}, {"code": "private async Task<ServiceSubscriber[]> GetSubscribers(IEnumerable<string> childrens){\n\t    var rootPath = _zookeeperClient.ServicePath;\n    var subscribers = new List<ServiceSubscriber>();\n    foreach (var children in childrens) {\n        var path = $\"{rootPath}{ZookeeperPath.PathSeparator}{children}\";\n        var node = await _zookeeperClient.GetDataAsync(path);\n        if (node == null) continue;\n        var subscriber = _serializer.Deserialize<byte[], ServiceSubscriber>(node.Data);\n        subscribers.Add(subscriber);\n    }\n    return subscribers.ToArray();\n}", "CodeBleu_score": 43.60106977191744}, {"code": "private async Task<ServiceSubscriber[]> GetSubscribers(IEnumerable<string> childrens){\n\t    var rootPath = _zookeeperClient.ServiceRouteManager.GetSubscriberRootPath();\n    var subscribers = new List<ServiceSubscriber>();\n    foreach (var children in childrens) {\n        if (_logger.IsEnabled(LogLevel.Debug)) {\n            _logger.LogDebug($\"\u51c6\u5907\u4ece\u8282\u70b9\uff1a{children}\u4e2d\u83b7\u53d6\u8ba2\u9605\u8005\u4fe1\u606f\u3002\");\n        }\n        var path = $\"{rootPath}{children}\";\n        var nodeData = await _zookeeperClient.GetDataAsync(path);\n        var subscriber = _serializer.Deserialize<byte[], ServiceSubscriber>(nodeData);\n        subscribers.Add(subscriber);\n    }\n    return subscribers.ToArray();\n}", "CodeBleu_score": 51.178447940229546}]}
{"instance_id": "6c3018ff0c0d", "generation_result": [{"code": "private async Task EnterSubscribers(){\n\t    if (_subscribers != null)\n        return;\n\n    var zooKeeper = await _zooKeeperClientProvider.GetZooKeeperAsync();\n    var watcher = new ChildrenMonitorWatcher(_zooKeeperClientProvider, _path, async (oldChildrens, newChildrens) => await SubscribersChange(oldChildrens, newChildrens));\n    var path = _path;\n    var pathCreated = await zooKeeper.existsAsync(path, watcher);\n    if (pathCreated == null) {\n        if (await zooKeeper.existsAsync(path, false) == null) {\n            await zooKoeper.createAsync(path, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n        await zooKeeper.existsAsync(path, watcher);\n    }\n\n    var children = await zooKeeper.getChildrenAsync(path, false);\n    var childrens = children.Children.ToArray();\n    await SubscribersChange(Array.Empty<string>(), childrens);\n}", "CodeBleu_score": 35.55235093143656}, {"code": "private async Task EnterSubscribers(){\n\t    if (_subscribers != null)\n        return;\n    _subscribers = new List<ServiceSubscriber>();\n    var client = await _zookeeperClientProvider.GetZooKeeperAsync();\n    var path = _zookeeperConfig.SubscriberPath;\n    if (await client.existsAsync(path) == null) {\n        _logger.LogWarning($\"\u65e0\u6cd5\u83b7\u53d6\u8ba2\u9605\u8005\u4fe1\u606f\uff0c\u56e0\u4e3a\u8282\u70b9{path}\u4e0d\u5b58\u5728\u3002\");\n        return;\n    }\n    var children = await client.getChildrenAsync(path);\n    if (children != null) {\n        foreach (var child in children) {\n            var childPath = $\"{path}/{child}\";\n            if (await client.existsAsync(childPath) != null) {\n                var data = await client.getDataAsync(childPath);\n                if (data != null) {\n                    var descriptor = _serializer.Deserialize<byte[], ServiceSubscriberDescriptor>(data);\n                    _subscribers.Add(new ServiceSubscriber {\n                        Address = descriptor.Address,\n                        ServiceDescriptor = descriptor.ServiceDescriptor\n                    });\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 38.17308535045068}, {"code": "private async Task EnterSubscribers(){\n\t    if (_subscribers != null) {\n        return;\n    }\n    var client = await _zookeeperClientProvider.GetZooKeeperAsync();\n    var path = _zookeeperConfig.SubscriberPath;\n    if (await client.existsAsync(path) == null) {\n        _logger.LogWarning($\"\u65e0\u6cd5\u83b7\u53d6\u8ba2\u9605\u8005\u4fe1\u606f\uff0c\u56e0\u4e3a\u8282\u70b9\uff1a{path}\uff0c\u4e0d\u5b58\u5728\u3002\");\n        _subscribers = new Dictionary<string, HashSet<ServiceSubscriber>>();\n        return;\n    }\n    var subscriberDatas = (await client.getChildrenAsync(path)).Children;\n    var subscribers = new Dictionary<string, HashSet<ServiceSubscriber>>();\n    foreach (var subscriberData in subscriberDatas) {\n        var path1 = $\"{path}/{subscriberData}\";\n        var data = (await client.getDataAsync(path1)).Data;\n        var subscriber = _serializer.Deserialize<ServiceSubscriber>(Encoding.UTF8.GetString(data));\n        if (subscribers.ContainsKey(subscriber.ServiceDescriptor.Id)) {\n            subscribers[subscriber.ServiceDescriptor.Id].Add(subscriber);\n        }\n        else {\n            subscribers.Add(subscriber.ServiceDescriptor.Id, new HashSet<ServiceSubscriber> { subscriber });\n        }\n    }\n    _subscribers = subscribers;\n}", "CodeBleu_score": 41.44627919988749}]}
{"instance_id": "60ff973ba60a", "generation_result": [{"code": "public void NodeChange(byte[] oldData, byte[] newData){\n\t    if (oldData != null && newData != null && !oldData.SequenceEqual(newData)) {\n        var newCommand = _serializer.Deserialize<ServiceCommand>(Encoding.UTF8.GetString(newData));\n        var oldCommand = _serializer.Deserialize<ServiceCommand>(Encoding.UTF8.GetString(oldData));\n        var command = _serviceCommandManager.GetCommand(oldCommand.ServiceId);\n        if (command != null) {\n            _serviceCommandManager.SetCommand(newCommand);\n        }\n        _logger.LogDebug($\"{oldCommand.ServiceId} service command changed.\");\n        OnChanged(new CommandChangedEventArgs(newCommand, oldCommand));\n    }\n}", "CodeBleu_score": 28.326332772243944}, {"code": "public void NodeChange(byte[] oldData, byte[] newData){\n\t    var oldServiceCommand = _serializer.Deserialize<ServiceCommand>(Encoding.UTF8.GetString(oldData));\n    var newServiceCommand = _serializer.Deserialize<ServiceCommand>(Encoding.UTF8.GetString(newData));\n    if (!Equals(oldServiceCommand, newServiceCommand))\n    {\n        var serviceCommand = _serviceCommandManager.GetOrCreate(oldServiceCommand.ServiceId, () => newServiceCommand);\n        serviceCommand.Address = newServiceCommand.Address;\n        serviceCommand.ServiceId = newServiceCommand.ServiceId;\n        serviceCommand.ServiceKey = newServiceCommand.ServiceKey;\n        serviceCommand.Timeout = newServiceCommand.Timeout;\n        serviceCommand.ServiceType = newServiceCommand.ServiceType;\n        serviceCommand.ServiceRoutePath = newServiceCommand.ServiceRoutePath;\n        serviceCommand.ServiceDescriptor = newServiceCommand.ServiceDescriptor;\n        serviceCommand.ServiceMetadata = newServiceCommand.ServiceMetadata;\n        serviceCommand.ServiceParameters = newServiceCommand.ServiceParameters;\n        serviceCommand.ServiceMetadata = newServiceCommand.ServiceMetadata;\n        serviceCommand.ServiceMethod = newServiceCommand.ServiceMethod;\n        serviceCommand.ServiceMethods = newServiceCommand.ServiceMethods;\n        serviceCommand.ServiceRoute = newServiceCommand.ServiceRoute;\n        serviceCommand.ServiceRoutePath = newServiceCommand.ServiceRoutePath;\n        serviceCommand.ServiceRoutePattern = newServiceCommand.ServiceRoutePattern;\n        serviceCommand.ServiceRouteType = newServiceCommand.ServiceRouteType;\n        serviceCommand.ServiceRouteValue = newServiceCommand.ServiceRouteValue;\n        serviceCommand.ServiceRouteAttribute = newServiceCommand.ServiceRouteAttribute;\n        serviceCommand.ServiceRouteAttribute.ServiceRoute = newServiceCommand.ServiceRouteAttribute.ServiceRoute;\n        serviceCommand.ServiceRouteAttribute.ServiceRoutePattern = newServiceCommand.ServiceRouteAttribute.ServiceRoutePattern;\n        serviceCommand.ServiceRouteAttribute.ServiceRouteType = newServiceCommand.ServiceRouteAttribute.ServiceRouteType;\n        serviceCommand.ServiceRouteAttribute.ServiceRouteValue = newServiceCommand.ServiceRouteAttribute.ServiceRouteValue;\n        serviceCommand.ServiceRouteAttribute.ServiceRouteAttribute = newServiceCommand.ServiceRouteAttribute.ServiceRouteAttribute;\n        serviceCommand.ServiceRouteAttribute.", "CodeBleu_score": 28.14686257075016}, {"code": "public void NodeChange(byte[] oldData, byte[] newData){\n\t    var oldServiceCommand = _serializer.Deserialize<ServiceCommand>(Encoding.UTF8.GetString(oldData));\n    var newServiceCommand = _serializer.Deserialize<ServiceCommand>(Encoding.UTF8.GetString(newData));\n    if (oldServiceCommand.ServiceId != newServiceCommand.ServiceId)\n    {\n        return;\n    }\n    var serviceCommand = _serviceCommandManager.Get(newServiceCommand.ServiceId);\n    if (serviceCommand != null)\n    {\n        _serviceCommandManager.Set(newServiceCommand);\n    }\n    else\n    {\n        _serviceCommandManager.Add(newServiceCommand);\n    }\n    _logger.LogInformation($\"{newServiceCommand.ServiceId} service command has been changed.\");\n    ServiceCommandChanged?.Invoke(this, new ServiceCommandChangedEventArgs(newServiceCommand, oldServiceCommand));\n}", "CodeBleu_score": 24.809579941734928}]}
{"instance_id": "4597b75f2b3d", "generation_result": [{"code": "protected override async Task ProcessImpl(WatchedEvent watchedEvent){\n\t    if (watchedEvent.getType() == Event.EventType.NodeDataChanged) {\n        try {\n            var data = await this.client.getDataAsync(watchedEvent.getPath(), true).ConfigureAwait(false);\n            var currentData = this.Data;\n            this.Data = data;\n            this.Action(currentData, data);\n        } catch (KeeperException.NoNodeException) {\n            // Node has been deleted\n        }\n    }\n}", "CodeBleu_score": 51.93633024492589}, {"code": "protected override async Task ProcessImpl(WatchedEvent watchedEvent){\n\t    if (watchedEvent.get_Type() == EventType.NodeDataChanged) {\n        var newData = await _zooKeeperClient.getDataAsync(watchedEvent.get_Path(), true);\n        _action(newData, _data);\n        _data = newData;\n    }\n}", "CodeBleu_score": 44.267208875312626}, {"code": "protected override async Task ProcessImpl(WatchedEvent watchedEvent){\n\t    if (watchedEvent.get_Type() == EventType.NodeDataChanged) {\n        var data = await _zooKeeperClient.getDataAsync(watchedEvent.get_Path(), true);\n        var currentData = _watcher.get_Data();\n        _watcher.set_Data(data);\n        _action(currentData, data);\n    }\n}", "CodeBleu_score": 24.727453698365505}]}
{"instance_id": "cb4f0e22a0d5", "generation_result": [{"code": "public static IServiceBuilder UseZookeeperClientProvider(this IServiceBuilder builder, ConfigInfo configInfo){\n\t\tif (configInfo == null)\n\t\tthrow new ArgumentNullException(nameof(configInfo));\n\tbuilder.Services.AddSingleton<IHealthCheckService>(p =>\n\t{\n\t\tvar section = CPlatform.AppConfig.GetSection(\"HealthCheck\");\n\t\tvar healthCheck = new HealthCheckService(\n\t\t\t\t\t\t\t\tsection.GetValue<int>(\"Interval\", 5),\n\t\t\t\t\t\t\t\tsection.GetValue<int>(\"Fails\", 5),\n\t\t\t\t\t\t\t\tsection.GetValue<int>(\"Recover\", 5),\n\t\t\t\t\t\t\t\tsection.GetValue<bool>(\"Enabled\", true));\n\t\treturn healthCheck;\n\t});\n\tbuilder.Services.AddSingleton<IAddressSelector, AddressSelector>();\n\tbuilder.Services.AddSingleton<IClientWatchManager, ClientWatchManager>();\n\tbuilder.Services.AddSingleton<IServiceRouteManager, ServiceRouteManager>();\n\tbuilder.Services.AddSingleton<IClientManager, ClientManager>();\n\tbuilder.Services.AddSingleton<IServiceHeartbeatManager, ServiceHeartbeatManager>();\n\tbuilder.Services.AddSingleton<ISerializer<byte[]>, ProtoBufferSerializer>();\n\tbuilder.Services.AddSingleton<ISerializer<string>, ProtoBufferSerializer>();\n\tbuilder.Services.AddSingleton<IServiceCommandManager, ServiceCommandManager>();\n\tbuilder.Services.AddSingleton<IServiceCacheManager, ServiceCacheManager>();\n\tbuilder.Services.AddSingleton<IServiceSubscriberFactory, ZookeeperServiceSubscriberFactory>();\n\tbuilder.Services.AddSingleton<IServiceSubscriberManager, ServiceSubscriberManager>();\n\tbuilder.Services.AddSingleton<IServiceRouteFactory, ServiceRouteFactory>();\n\tbuilder.Services.AddSingleton<IServiceRouteManager, ServiceRouteManager>();\n\tbuilder.Services.AddSingleton<IServiceEntryManager, ServiceEntryManager>();\n\tbuilder.Services.AddSingleton<IServiceSubscriberFactory, ZookeeperServiceSubscriberFactory>();\n\tbuilder.Services.AddSingleton<IServiceSubscriberManager, ServiceSubscriberManager>();\n\tbuilder.Services.Add", "CodeBleu_score": 38.93356138855528}, {"code": "public static IServiceBuilder UseZookeeperClientProvider(this IServiceBuilder builder, ConfigInfo configInfo){\n\t\tif (builder == null)\n\t\tthrow new ArgumentNullException(nameof(builder));\n\tif (configInfo == null)\n\t\tthrow new ArgumentNullException(nameof(configInfo));\n\treturn builder.UseZookeeperClientProvider(provider => {\n\t\tprovider.AddZookeeperClient(configInfo);\n\t});\n}", "CodeBleu_score": 29.900960202771188}, {"code": "public static IServiceBuilder UseZookeeperClientProvider(this IServiceBuilder builder, ConfigInfo configInfo){\n\t\tif (configInfo == null) {\n\t\tthrow new ArgumentNullException(nameof(configInfo));\n\t}\n\tbuilder.Services.Register(provider => {\n\t\tvar addressSelector = provider.GetRequiredService<IAddressSelector>();\n\t\tvar healthCheckService = provider.GetRequiredService<IHealthCheckService>();\n\t\tvar logger = provider.GetRequiredService<ILogger<DefaultZookeeperClientProvider>>();\n\t\tvar serviceRouteManager = provider.GetRequiredService<IServiceRouteManager>();\n\t\tvar serviceCacheManager = provider.GetRequiredService<IServiceCacheManager>();\n\t\tvar serializer = provider.GetRequiredService<ISerializer<byte[]>>();\n\t\tvar mqttServiceFactory = provider.GetRequiredService<IMqttServiceFactory>();\n\t\tvar config = new ZookeeperClientProviderConfig();\n\t\treturn new DefaultZookeeperClientProvider(configInfo, config, addressSelector, healthCheckService, logger, serviceRouteManager, serviceCacheManager, serializer, mqttServiceFactory);\n\t}).As(typeof(IZookeeperClientProvider)).SingleInstance();\n\treturn builder;\n}", "CodeBleu_score": 48.11327205052508}]}
{"instance_id": "80709a4b2b69", "generation_result": [{"code": "protected override async Task SetRoutesAsync(IEnumerable<MqttServiceDescriptor> routes){\n\t\tif (_zookeeperClientProvider == null) {\n\t\treturn;\n\t}\n\tvar path = _zookeeperConfiguration.RoutePath;\n\tvar zooKeeperClients = await _zookeeperClientProvider.GetZooKeeperClients();\n\tvar nodePath = $\"{path}{ZookeeperPathUtils.ZKSeparatorChar}mqtt\";\n\tvar parameters = routes.Select(route => new ServiceRoute {\n\t\tAddress = route.Address,\n\t\tServiceDescriptor = route\n\t}).ToArray();\n\tif (parameters.Length > 0) {\n\t\tawait zooKeeperClients.ForEach(async client => {\n\t\t\tvar exists = await client.ExistsAsync(nodePath);\n\t\t\tif (exists == null) {\n\t\t\t\tawait client.CreateAsync(nodePath, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\t\t\t}\n\t\t\tforeach (var parameter in parameters) {\n\t\t\t\tvar node = $\"{nodePath}{ZookeeperPathUtils.ZKSeparatorChar}{parameter.ServiceDescriptor.Id}\";\n\t\t\t\tvar data = _serializer.Serialize(parameter);\n\t\t\t\tvar result = await client.CreateAsync(node, Encoding.UTF8.GetBytes(data), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n\t\t\t\t_logger.LogInformation($\"\u521b\u5efa\u8def\u7531\u8282\u70b9\uff1a{node}\");\n\t\t\t}\n\t\t});\n\t}\n\t_logger.LogInformation($\"\u8def\u7531\u8282\u70b9\u521b\u5efa\u6210\u529f\u3002\");\n}", "CodeBleu_score": 31.003815553433018}, {"code": "protected override async Task SetRoutesAsync(IEnumerable<MqttServiceDescriptor> routes){\n\t\tvar path = _zookeeperConfig.RoutePath;\n\tvar data = _serviceRouteFactory.CreateServiceRoutes(routes);\n\tvar nodePath = $\"{path}{MqttServiceRoute.MqttRouteNodeName}\";\n\tif (await _zookeeperClientProvider.ExistsAsync(path))\n\t\tawait _zookeeperClientProvider.DeleteAsync(path);\n\tif (!await _zookeeperClientProvider.ExistsAsync(nodePath)) {\n\t\tawait _zookeeperClientProvider.CreateAsync(nodePath, data, CreateMode.PERSISTENT);\n\t\tif (_logger.IsEnabled(LogLevel.Debug)) {\n\t\t\t_logger.LogDebug($\"\u521b\u5efa{nodePath}\u8282\u70b9\u6210\u529f\u3002\");\n\t\t}\n\t} else {\n\t\tvar onlineData = (await _zookeeperClientProvider.GetDataAsync(nodePath)).ToArray();\n\t\tif (!DataEquals(data, onlineData)) {\n\t\t\tawait _zookeeperClientProvider.SetDataAsync(nodePath, data);\n\t\t\tif (_logger.IsEnabled(LogLevel.Debug)) {\n\t\t\t\t_logger.LogDebug($\"\u66f4\u65b0{nodePath}\u8282\u70b9\u6210\u529f\u3002\");\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 31.912879734468113}, {"code": "protected override async Task SetRoutesAsync(IEnumerable<MqttServiceDescriptor> routes){\n\t\tvar path = _zookeeperConfig.RoutePath;\n\tvar data = _serviceRouteFactory.CreateServiceRoutes(routes);\n\tvar nodePath = _zookeeperConfig.ChRoot + path;\n\tvar zookeeperClients = await _zookeeperClientProvider.GetZooKeeperClients();\n\tif (zookeeperClients.Any()) {\n\t\tawait zookeeperClients.ForEachAsync(async client => {\n\t\t\tif (await client.ExistsAsync(nodePath))\n\t\t\t\tawait client.SetDataAsync(nodePath, data);\n\t\t\telse {\n\t\t\t\tvar pathList = nodePath.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries).ToList();\n\t\t\t\tvar index = 0;\n\t\t\t\tvar length = pathList.Count;\n\t\t\t\twhile (index < length) {\n\t\t\t\t\tvar currentPath = \"/\" + string.Join(\"/\", pathList.Take(index + 1));\n\t\t\t\t\tif (!await client.ExistsAsync(currentPath)) {\n\t\t\t\t\t\tawait client.CreateAsync(currentPath, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\t\t\t\t\t}\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\t\t\tawait client.CreateAsync(nodePath, data, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\t\t\t}\n\t\t});\n\t\t_logger.LogInformation($\"\u8bbe\u7f6emqtt\u8def\u7531\u4fe1\u606f\u3002\");\n\t}\n}", "CodeBleu_score": 33.34558999688967}]}
{"instance_id": "69ff4d3427cd", "generation_result": [{"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<MqttServiceRoute> routes, AddressModel hostAddr){\n\t    var path = _zookeeperConfig.RoutePath;\n    var zooKeeperClients = await _zookeeperClientProvider.GetZooKeeperClients();\n    foreach (var zooKeeperClient in zooKeeperClients) {\n        var currentRoutes = await zooKeeperClient.GetChildrenAsync(path);\n        var deleteRouteIds = currentRoutes.Where(p => !routes.Any(r => r.ServiceDescriptor.Id == p));\n        foreach (var routeId in deleteRouteIds) {\n            var routeNodePath = $\"{path}{IServiceRouteFactory.PATH_SEPARATOR}{routeId}\";\n            var nodes = (await zooKeeperClient.GetChildrenAsync(routeNodePath)).Where(p => p.EndsWith(hostAddr.ToString()));\n            foreach (var node in nodes) {\n                var nodePath = $\"{routeNodePath}{IServiceRouteFactory.PATH_SEPARATOR}{node}\";\n                await zooKeeperClient.DeleteAsync(nodePath);\n            }\n        }\n    }\n}", "CodeBleu_score": 41.60881015729881}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<MqttServiceRoute> routes, AddressModel hostAddr){\n\t\tvar path = _zookeeperConfig.MqttRoutePath;\n\tvar zooKeeperClients = await _zookeeperClientProvider.GetZooKeeperClients();\n\tforeach (var zooKeeperClient in zooKeeperClients) {\n\t\tvar currentRoutes = await zooKeeperClient.GetChildrenAsync(path);\n\t\tvar deleteRouteIds = currentRoutes.Except(routes.Select(p => p.MqttDescriptor.Topic));\n\t\tforeach (var deleteRouteId in deleteRouteIds) {\n\t\t\tvar addressModels = (await zooKeeperClient.GetDataAsync($\"{path}/{deleteRouteId}\")).ToArray().ParseTo<IEnumerable<AddressModel>>();\n\t\t\tif (addressModels.Any(p => p.ToString() == hostAddr.ToString())) {\n\t\t\t\tawait zooKeeperClient.DeleteAsync($\"{path}/{deleteRouteId}\");\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 36.94400828227656}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<MqttServiceRoute> routes, AddressModel hostAddr){\n\t    if (routes == null)\n        throw new ArgumentNullException(nameof(routes));\n\n    var path = _configInfo.RoutePath;\n    var zookeeperClients = await _zookeeperClientProvider.GetZooKeeperClients();\n    foreach (var zookeeperClient in zookeeperClients)\n    {\n        var currentRoutes = await GetRoutes(zookeeperClient);\n        var removeRoutes = currentRoutes.Where(i => !routes.Any(route => i.ServiceDescriptor.Id == route.ServiceDescriptor.Id)).ToArray();\n        foreach (var route in removeRoutes)\n        {\n            if (route.Address.Any(address => address.ToString() == hostAddr.ToString()))\n            {\n                var nodePath = $\"{path}{route.MqttDescriptor.Topic}\";\n                await zookeeperClient.DeleteAsync(nodePath);\n            }\n        }\n    }\n}", "CodeBleu_score": 41.12735175265491}]}
{"instance_id": "8856055e4872", "generation_result": [{"code": "public override async Task SetCachesAsync(IEnumerable<ServiceCacheDescriptor> cacheDescriptors){\n\t\tif (_zookeeperClientProvider == null) {\n\t\tthrow new ArgumentNullException(nameof(_zookeeperClientProvider));\n\t}\n\n\tvar zooKeeperClients = _zookeeperClientProvider.GetZooKeeperClients();\n\tif (zooKeeperClients == null || zooKeeperClients.Count() == 0) {\n\t\tthrow new ArgumentException(\"No zookeeper client found.\", nameof(_zookeeperClientProvider));\n\t}\n\n\tvar path = _zookeeperConfig.CachePath;\n\tvar data = cacheDescriptors.ToArray();\n\tvar needUpdate = false;\n\tvar oldData = new List<ServiceCacheDescriptor>();\n\tforeach (var zooKeeperClient in zooKeeperClients) {\n\t\tif (await zooKeeperClient.ExistsAsync(path)) {\n\t\t\toldData = (await zooKeeperClient.GetDataAsync(path)).ToObject<ServiceCacheDescriptor[]>();\n\t\t\tif (!data.SequenceEqual(oldData)) {\n\t\t\t\tneedUpdate = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tneedUpdate = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (needUpdate) {\n\t\t_logger.LogInformation($\"\u51c6\u5907\u66f4\u65b0\u670d\u52a1\u7f13\u5b58\u3002\");\n\t\tvar onlineData = data.Where(p => p.Online).ToArray();\n\t\tvar offlineData = data.Where(p => !p.Online).ToArray();\n\t\tawait _zookeeperClientProvider.GetZooKeeperClients().UpdateDataAsync(path, onlineData.ToArray());\n\t\tif (offlineData.Any()) {\n\t\t\tvar offlinePath = $\"{path}{_zookeeperConfig.CacheNode}\";\n\t\t\tforeach (var zooKeeperClient in zooKeeperClients) {\n\t\t\t\tif (await zooKeeperClient.ExistsAsync(offlinePath)) {\n\t\t\t\t\tawait zooKeeperClient.SetDataAsync(off", "CodeBleu_score": 38.38990633259298}, {"code": "public override async Task SetCachesAsync(IEnumerable<ServiceCacheDescriptor> cacheDescriptors){\n\t    var path = _zookeeperConfig.CachePath;\n    var data = cacheDescriptors.ToArray();\n    if (!data.Any()) {\n        await _zookeeperClientProvider.GetZooKeeper().deleteAsync(path);\n        return;\n    }\n    var logger = _logger.CreateScope(\"\u670d\u52a1\u7f13\u5b58\u66f4\u65b0\u3002\");\n    logger.LogInformation(\"\u5f00\u59cb\u66f4\u65b0\u670d\u52a1\u7f13\u5b58\u3002\");\n    var childrens = (await _zookeeperClientProvider.GetZooKeeper().getChildrenAsync(path)).Children.ToArray();\n    var pathList = data.Select(p => $\"{path}{p.CacheDescriptor.Id}\").ToArray();\n    foreach (var path in pathList.Except(childrens)) {\n        await _zookeeperClientProvider.GetZooKeeper().createAsync(path, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n    }\n\n    foreach (var serviceCache in data) {\n        var nodePath = $\"{path}{serviceCache.CacheDescriptor.Id}\";\n        var nodeData = _serializer.Serialize(serviceCache);\n        var update = await _zookeeperClientProvider.GetZooKeeper().existsAsync(nodePath);\n        if (update == null) {\n            await _zookeeperClientProvider.GetZooKeeper().createAsync(nodePath, nodeData, ZooDefs.Ids.OPEN_ACL_UNSAFE,\n                CreateMode.PERSISTENT);\n        }\n        else {\n            var existData = (await _zookeeperClientProvider.GetZooKeeper().getDataAsync(nodePath)).Data;\n            if (!nodeData.SequenceEqual(existData)) {\n                await _zookeeperClientProvider.GetZooKeeper().setDataAsync(nodePath, nodeData);\n            }\n        }\n    }\n\n    foreach (var child in childrens.Except(pathList)) {\n        await _zookeeperClientProvider.GetZooKeeper().deleteAsync($\"{path}{child}\");\n    }\n", "CodeBleu_score": 49.784468337731994}, {"code": "public override async Task SetCachesAsync(IEnumerable<ServiceCacheDescriptor> cacheDescriptors){\n\t    var path = _zookeeperConfig.CachePath;\n    if (!path.EndsWith(\"/\"))\n        path += \"/\";\n    var data = cacheDescriptors.ToArray();\n    var logger = _serviceCacheManager.CreateLogger(typeof(ZookeeperServiceCacheManager));\n    logger.LogInformation($\"\u51c6\u5907\u6dfb\u52a0{data.Length}\u4e2a\u670d\u52a1\u8def\u7531\u5230\u670d\u52a1\u547d\u540d\u3002\");\n    using (var client = await _zookeeperClientProvider.GetClientAsync())\n    {\n        await client.CreateNodeAsync(path, null, CreateMode.PERSISTENT);\n        var onlineData = (await client.GetChildrenAsync(path)).ToArray();\n        var onlineCaches = onlineData.Select(p => p.Substring(0, p.IndexOf(\"-\"))).ToArray();\n        foreach (var cache in data)\n        {\n            var node = $\"{cache.CacheDescriptor.Id}-{cache.CacheDescriptor.Address}\";\n            if (!onlineCaches.Contains(node))\n            {\n                var nodePath = $\"{path}{node}\";\n                var nodeData = _serializer.Serialize(cache.CacheDescriptor, typeof(AppConfig));\n                if (await client.ExistsAsync(nodePath))\n                    await client.SetDataAsync(nodePath, nodeData);\n                else\n                    await client.CreateNodeAsync(nodePath, nodeData);\n            }\n        }\n        var offlineCaches = onlineCaches.Where(p => !data.Select(i => $\"{i.CacheDescriptor.Id}-{i.CacheDescriptor.Address}\").Contains(p)).ToArray();\n        foreach (var offlineCache in offlineCaches)\n        {\n            var nodePath = $\"{path}{offlineCache}\";\n            if (await client.ExistsAsync(nodePath))\n                await client.DeleteAsync(nodePath);\n        }\n    }\n    logger.LogInformation($\"\u670d\u52a1\u8def\u7531\u6dfb\u52a0\u6210\u529f\u3002\");\n}", "CodeBleu_score": 44.41651701352688}]}
{"instance_id": "57d92c17de83", "generation_result": [{"code": "private async Task CreateSubdirectory((ManualResetEvent, ZooKeeper) zooKeeper, string path){\n\t    var (event, client) = zooKeeper;\n    event.WaitOne();\n    if (await client.existsAsync(path) == null) {\n        if (_logger.IsEnabled(LogLevel.Debug))\n            _logger.LogDebug($\"\u51c6\u5907\u521b\u5efa{path}\u8282\u70b9\u3002\");\n        var pathParts = path.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries);\n        var builder = new StringBuilder();\n        foreach (var pathPart in pathParts) {\n            builder.Append($\"/{pathPart}\");\n            if (await client.existsAsync(builder.ToString()) == null) {\n                await client.createAsync(builder.ToString(), null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            }\n        }\n        if (_logger.IsEnabled(LogLevel.Debug))\n            _logger.LogDebug($\"\u521b\u5efa{path}\u8282\u70b9\u6210\u529f\u3002\");\n    }\n}", "CodeBleu_score": 58.02625741597538}, {"code": "private async Task CreateSubdirectory((ManualResetEvent, ZooKeeper) zooKeeper, string path){\n\t\tawait zooKeeper.Item1.WaitOneAsync();\n\tif (await zooKeeper.Item2.existsAsync(path) == null) {\n\t\tif (_logger.IsEnabled(LogLevel.Debug))\n\t\t{\n\t\t\t_logger.LogDebug($\"\u51c6\u5907\u521b\u5efa\u7f13\u5b58\u8282\u70b9\uff1a{path}\u3002\");\n\t\t}\n\n\t\tvar childrens = path.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries);\n\t\tvar nodePath = \"/\";\n\t\tforeach (var children in childrens) {\n\t\t\tnodePath += children;\n\t\t\tif (await zooKeeper.Item2.existsAsync(nodePath) == null) {\n\t\t\t\tvar result = await zooKeeper.Item2.createAsync(nodePath, Encoding.UTF8.GetBytes(\"\"), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\t\t\t\tif (_logger.IsEnabled(LogLevel.Debug))\n\t\t\t\t{\n\t\t\t\t\t_logger.LogDebug($\"\u521b\u5efa\u7f13\u5b58\u8282\u70b9\uff1a{path}\u3002\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tnodePath += \"/\";\n\t\t}\n\t}\n}", "CodeBleu_score": 74.15078074851175}, {"code": "private async Task CreateSubdirectory((ManualResetEvent, ZooKeeper) zooKeeper, string path){\n\t\tvar (manualResetEvent, client) = zooKeeper;\n\tmanualResetEvent.WaitOne();\n\tif (await client.existsAsync(path) == null) {\n\t\tif (path.IndexOf('/') != -1) {\n\t\t\tvar subdirectory = path.Substring(0, path.LastIndexOf('/'));\n\t\t\tawait CreateSubdirectory(zooKeeper, subdirectory);\n\t\t}\n\t\tawait client.createAsync(path, Encoding.UTF8.GetBytes(string.Empty), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\t}\n}", "CodeBleu_score": 31.69501158853314}]}
{"instance_id": "b276a07da453", "generation_result": [{"code": "public async ValueTask<IEnumerable<(ManualResetEvent, ZooKeeper)>> GetZooKeepers(){\n\t\tvar zooKeepers = new ConcurrentBag<(ManualResetEvent, ZooKeeper)>();\n\tvar zookeeperAddresses = _zookeeperConfig.Addresses;\n\tvar zookeeperConnectionTimeout = _zookeeperConfig.ConnectionTimeout;\n\tvar zookeeperSessionTimeout = _zookeeperConfig.SessionTimeout;\n\tvar zookeeperSessionId = _zookeeperConfig.SessionId;\n\tvar zookeeperSessionPasswd = _zookeeperConfig.SessionPasswd;\n\tvar zookeeperWatcher = _zookeeperWatcherProvider.Get();\n\n\tvar tasks = new List<Task>();\n\tforeach (var zookeeperAddress in zookeeperAddresses) {\n\t\ttasks.Add(Task.Run(async () => {\n\t\t\tvar zooKeeper = new ZooKeeper(zookeeperAddress, zookeeperSessionTimeout, zookeeperWatcher, zookeeperSessionId, zookeeperSessionPasswd);\n\t\t\tvar resetEvent = new ManualResetEvent(false);\n\t\t\ttry {\n\t\t\t\tawait zooKeeper.existsAsync($\"/health/check/{zookeeperAddress}\", false).ContinueWith(t => {\n\t\t\t\t\tif (t.IsCompletedSuccessfully) {\n\t\t\t\t\t\tresetEvent.Set();\n\t\t\t\t\t\tzooKeepers.Add((resetEvent, zooKeeper));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} catch (Exception ex) {\n\t\t\t\t_logger.LogError(ex, $\"\u4e0eZookeeper:{zookeeperAddress}\u5efa\u7acb\u8fde\u63a5\u5931\u8d25\");\n\t\t\t}\n\t\t}));\n\t}\n\tawait Task.WhenAll(tasks);\n\treturn zooKeepers;\n}", "CodeBleu_score": 46.35220953097555}, {"code": "public async ValueTask<IEnumerable<(ManualResetEvent, ZooKeeper)>> GetZooKeepers(){\n\t\tvar zooKeepers = new List<(ManualResetEvent, ZooKeeper)>();\n\tforeach (var address in _addresses) {\n\t\tvar healthChecker = _healthCheckService.GetHealthChecker(address);\n\t\tvar manualResetEvent = new ManualResetEvent(healthChecker.IsHealthy);\n\t\tvar zooKeeper = await CreateZooKeeper(address, manualResetEvent);\n\t\tzooKeepers.Add((manualResetEvent, zooKeeper));\n\t}\n\treturn zooKeepers;\n}", "CodeBleu_score": 60.022366420668675}, {"code": "public async ValueTask<IEnumerable<(ManualResetEvent, ZooKeeper)>> GetZooKeepers(){\n\t\tvar zooKeepers = new List<(ManualResetEvent, ZooKeeper)>();\n\tforeach (var address in _addresses) {\n\t\tvar healthCheck = await _healthCheckService.IsHealth(address);\n\t\tif (healthCheck) {\n\t\t\tvar resetEvent = new ManualResetEvent(false);\n\t\t\tvar zooKeeper = new ZooKeeper(address.ToIpAddress(), (int)_zookeeperOption.SessionTimeout.TotalMilliseconds, new ReconnectionWatcher(resetEvent));\n\t\t\tzooKeepers.Add((resetEvent, zooKeeper));\n\t\t}\n\t}\n\n\treturn zooKeepers;\n}", "CodeBleu_score": 60.47227590676329}]}
{"instance_id": "dbb6463e7ee8", "generation_result": [{"code": "ZooKeeper getZooKeeper() throws Exception{\n\t    ZooKeeper zk = null;\n    synchronized (this) {\n        if (this.zk == null) {\n            EnsembleProvider ensembleProvider = this.zookeeperFactory.getEnsembleProvider();\n            this.zk = new ZooKeeper(ensembleProvider.getConnectionString(), this.sessionTimeoutMs, this.watcher, this.canBeReadOnly);\n        }\n        zk = this.zk;\n    }\n    return zk;\n}", "CodeBleu_score": 41.034822344519014}, {"code": "ZooKeeper getZooKeeper() throws Exception{\n\t    synchronized (this) {\n        if (zk == null) {\n            zk = new ZooKeeper(ensembleProvider.getConnectionString(), sessionTimeoutMs, watcher, canBeReadOnly);\n        }\n        return zk;\n    }\n}", "CodeBleu_score": 38.03547314476461}, {"code": "ZooKeeper getZooKeeper() throws Exception{\n\t    synchronized (this) {\n        if (zooKeeper == null) {\n            zooKeeper = new ZooKeeper(\n                ensembleProvider.getConnectionString(),\n                sessionTimeoutMs,\n                watcher,\n                canBeReadOnly,\n                zookeeperFactory\n            );\n        }\n        return zooKeeper;\n    }\n}", "CodeBleu_score": 43.347742819947634}]}
{"instance_id": "0d9f311aa482", "generation_result": [{"code": "private void internalClose(int waitForShutdownTimeoutMs) throws Exception{\n\t    ZooKeeper zooKeeper = null;\n    try {\n        zooKeeper = getHelper().getZooKeeper();\n        if (zooKeeper != null) {\n            zooKeeper.register(new Watcher() {\n                @Override\n                public void process(WatchedEvent event) {\n                }\n            });\n            if (waitForShutdownTimeoutMs < 0) {\n                zooKeeper.close();\n            } else {\n                zooKeeper.close(waitForShutdownTimeoutMs);\n            }\n        }\n    } finally {\n        if (zooKeeper != null) {\n            getHelper().setZooKeeper(null);\n        }\n    }\n}", "CodeBleu_score": 50.87256760367544}, {"code": "private void internalClose(int waitForShutdownTimeoutMs) throws Exception{\n\t    ZooKeeper zooKeeper = null;\n    try {\n        zooKeeper = zooKeeperHelper.getZooKeeper();\n        if (zooKeeper == null) {\n            return;\n        }\n        zooKeeper.register(new Watcher() {\n            @Override\n            public void process(WatchedEvent watchedEvent) {\n            }\n        });\n        if (waitForShutdownTimeoutMs > 0) {\n            Thread.sleep(waitForShutdownTimeoutMs);\n        }\n    } finally {\n        if (zooKeeper != null) {\n            zooKeeper.close();\n        }\n    }\n}", "CodeBleu_score": 44.14553126605192}, {"code": "private void internalClose(int waitForShutdownTimeoutMs) throws Exception{\n\t    if (zookeeper != null) {\n        Watcher dummyWatcher = new Watcher() {\n            @Override\n            public void process(WatchedEvent event) {\n            }\n        };\n        zookeeper.register(dummyWatcher);\n        zookeeper.register(null);\n        if (waitForShutdownTimeoutMs == 0) {\n            zookeeper.close();\n        } else {\n            final ZooKeeper zk = zookeeper;\n            Thread t = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        Thread.sleep(waitForShutdownTimeoutMs);\n                        zk.close();\n                    } catch (InterruptedException e) {\n                        Thread.currentThread().interrupt();\n                    }\n                }\n            };\n            t.setDaemon(true);\n            t.start();\n        }\n    }\n}", "CodeBleu_score": 64.66372223835529}]}
{"instance_id": "d57ef4592303", "generation_result": [{"code": "public boolean blockUntilConnectedOrTimedOut() throws InterruptedException{\n\t    Preconditions.checkState(this.state.get() == CuratorFrameworkState.STARTED, \"instance must be started before calling this method\");\n    final CountDownLatch latch = new CountDownLatch(1);\n    Watcher watcher = new Watcher() {\n        @Override\n        public void process(WatchedEvent event) {\n            if (event.getState() == Event.KeeperState.SyncConnected) {\n                latch.countDown();\n            }\n        }\n    };\n    try {\n        this.zooKeeper.register(watcher);\n        boolean result = latch.await(this.connectionTimeoutMs, TimeUnit.MILLISECONDS);\n        if (result) {\n            return true;\n        }\n        return this.zooKeeper.getState().isConnected();\n    } finally {\n        this.zooKeeper.unregister(watcher);\n    }\n}", "CodeBleu_score": 33.362895537332}, {"code": "public boolean blockUntilConnectedOrTimedOut() throws InterruptedException{\n\t    return true;\n}", "CodeBleu_score": 2.293048322173449}, {"code": "public boolean blockUntilConnectedOrTimedOut() throws InterruptedException{\n\t    return false;\n}", "CodeBleu_score": 2.293048360981537}]}
{"instance_id": "d722f6d0beb6", "generation_result": [{"code": "public void close(int waitForShutdownTimeoutMs){\n\t    Preconditions.checkArgument(waitForShutdownTimeoutMs >= 0, \"waitForShutdownTimeoutMs cannot be negative\");\n\n    LOG.info(\"Closing\");\n\n    started.set(false);\n    try {\n        if ( !ThreadUtils.closeQuietly(zooKeeper) ) {\n            LOG.error(\"An error occurred while closing the ZooKeeper client instance.\");\n        }\n    } catch ( InterruptedException e ) {\n        Thread.currentThread().interrupt();\n    }\n    if ( !ThreadUtils.closeQuietly(ensembleProvider) ) {\n        LOG.error(\"An error occurred while closing the EnsembleProvider.\");\n    }\n    if ( !ThreadUtils.closeQuietly(zookeeperFactory) ) {\n        LOG.error(\"An error occurred while closing the ZookeeperFactory.\");\n    }\n    if ( !ThreadUtils.closeQuietly(tracerDriver) ) {\n        LOG.error(\"An error occurred while closing the TracerDriver.\");\n    }\n}", "CodeBleu_score": 45.09222814259141}, {"code": "public void close(int waitForShutdownTimeoutMs){\n\t    Preconditions.checkArgument(waitForShutdownTimeoutMs >= 0, \"waitForShutdownTimeoutMs cannot be negative\");\n    Preconditions.checkState(started.get(), \"not started\");\n    LOG.info(\"Closing\");\n    started.set(false);\n    try {\n        CloseableUtils.closeQuietly(client);\n    } catch ( IOException e ) {\n        ThreadUtils.checkInterrupted(e);\n        LOG.error(\"\", e);\n    }\n    try {\n        CloseableUtils.closeQuietly(zookeeperFactory);\n    } catch ( IOException e ) {\n        ThreadUtils.checkInterrupted(e);\n        LOG.error(\"\", e);\n    }\n    try {\n        CloseableUtils.closeQuietly(ensembleProvider);\n    } catch ( IOException e ) {\n        ThreadUtils.checkInterrupted(e);\n        LOG.error(\"\", e);\n    }\n    try {\n        CloseableUtils.closeQuietly(tracer);\n    } catch ( IOException e ) {\n        ThreadUtils.checkInterrupted(e);\n        LOG.error(\"\", e);\n    }\n    try {\n        CloseableUtils.closeQuietly(authProvider);\n    } catch ( IOException e ) {\n        ThreadUtils.checkInterrupted(e);\n        LOG.error(\"\", e);\n    }\n    try {\n        CloseableUtils.closeQuietly(listeners);\n    } catch ( IOException e ) {\n        ThreadUtils.checkInterrupted(e);\n        LOG.error(\"\", e);\n    }\n    try {\n        CloseableUtils.closeQuietly(namespaceFacade);\n    } catch ( IOException e ) {\n        ThreadUtils.checkInterrupted(e);\n        LOG.error(\"\", e);\n    }\n    try {\n        CloseableUtils.closeQuietly(namespaceWatcher);\n    } catch ( IOException e ) {\n        ThreadUtils.checkInterrupted(e);\n        LOG.error(\"\", e);\n    }\n    try {\n        CloseableUtils.closeQuietly(namespaceProvider);\n    } catch ( IOException e ) {\n       ", "CodeBleu_score": 47.54921454182636}, {"code": "public void close(int waitForShutdownTimeoutMs){\n\t    Preconditions.checkState(this.started.compareAndSet(true, false), \"Already closed or has not been started\");\n    LOG.info(\"Closing\");\n    try {\n        this.closeable.close(waitForShutdownTimeoutMs, TimeUnit.MILLISECONDS);\n    } catch (IOException e) {\n        if (Thread.currentThread().isInterrupted()) {\n            LOG.warn(\"Interrupted while closing\", e);\n        } else {\n            LOG.error(\"Error while closing\", e);\n        }\n    }\n}", "CodeBleu_score": 42.17673635404439}]}
{"instance_id": "8492e37ce46e", "generation_result": [{"code": "public void internalBlockUntilConnectedOrTimedOut() throws InterruptedException {\n\t    final CountDownLatch latch = new CountDownLatch(1);\n    Watcher watcher = new Watcher() {\n        @Override\n        public void process(WatchedEvent event) {\n            if (event.getState() == Event.KeeperState.SyncConnected) {\n                latch.countDown();\n            }\n        }\n    };\n    long start = System.currentTimeMillis();\n    long timeout = 10000;\n    while (!client.getZookeeperClient().isConnected()) {\n        client.getZookeeperClient().getZooKeeper().register(watcher);\n        if (!latch.await(timeout, TimeUnit.MILLISECONDS)) {\n            throw new IllegalStateException(\"timed out\");\n        }\n        long elapsed = System.currentTimeMillis() - start;\n        timeout = timeout - elapsed;\n        if (timeout <= 0) {\n            throw new IllegalStateException(\"timed out\");\n        }\n        client.getZookeeperClient().getZooKeeper().unregister(watcher);\n    }\n}", "CodeBleu_score": 49.61999040251488}, {"code": "public void internalBlockUntilConnectedOrTimedOut() throws InterruptedException {\n\t    final CountDownLatch latch = new CountDownLatch(1);\n    Watcher watcher = new Watcher() {\n        @Override\n        public void process(WatchedEvent event) {\n            if (event.getState() == Event.KeeperState.SyncConnected) {\n                latch.countDown();\n            }\n        }\n    };\n    long start = System.currentTimeMillis();\n    long waitTime = getConnectionTimeoutMs();\n    while (true) {\n        try {\n            getZooKeeper().exists(\"/\", watcher);\n            if (latch.await(waitTime, TimeUnit.MILLISECONDS)) {\n                return;\n            }\n        } catch (KeeperException.ConnectionLossException e) {\n            // ignore\n        } catch (KeeperException.SessionExpiredException e) {\n            // ignore\n        } catch (KeeperException e) {\n            throw e;\n        } catch (InterruptedException e) {\n            throw e;\n        }\n        long elapsed = System.currentTimeMillis() - start;\n        waitTime = getConnectionTimeoutMs() - elapsed;\n        if (waitTime <= 0) {\n            break;\n        }\n    }\n    throw new KeeperException.ConnectionTimeoutException();\n}", "CodeBleu_score": 45.907631871371024}, {"code": "public void internalBlockUntilConnectedOrTimedOut() throws InterruptedException {\n\t    final CountDownLatch latch = new CountDownLatch(1);\n    Watcher watcher = new Watcher() {\n        @Override\n        public void process(WatchedEvent event) {\n            if (event.getState() == Watcher.Event.KeeperState.SyncConnected) {\n                latch.countDown();\n            }\n        }\n    };\n    try {\n        zk.getZooKeeper().register(watcher);\n        long startMs = System.currentTimeMillis();\n        long waitMs = connectionTimeoutMs;\n        while (!latch.await(waitMs, TimeUnit.MILLISECONDS)) {\n            waitMs = connectionTimeoutMs - (System.currentTimeMillis() - startMs);\n            if (waitMs <= 0) {\n                break;\n            }\n        }\n    } finally {\n        try {\n            zk.getZooKeeper().unregister(watcher);\n        } catch (Exception e) {\n            LOG.debug(\"Unable to remove connection watcher\", e);\n        }\n    }\n}", "CodeBleu_score": 50.18039103964138}]}
{"instance_id": "4a01f5365731", "generation_result": [{"code": "String validateFoundNode(CuratorFrameworkImpl client, CreateMode createMode, String foundNode) throws Exception{\n\t    Logger logger = LoggerFactory.getLogger(getClass());\n    UUID clientSessionId = client.getZookeeperClient().getZooKeeper().getSessionId();\n    if (createMode.isEphemeral()) {\n        if (!clientSessionId.equals(client.getSessionId())) {\n            logger.info(\"Client's session ID has changed since the initial session. Deleting the old node associated with the previous session.\");\n            client.delete().forPath(foundNode);\n            client.setSessionId(clientSessionId);\n        }\n    }\n    return foundNode;\n}", "CodeBleu_score": 39.61380400211881}, {"code": "String validateFoundNode(CuratorFrameworkImpl client, CreateMode createMode, String foundNode) throws Exception{\n\t    if (createMode.isEphemeral()) {\n        String sessionId = client.getZookeeperClient().getZooKeeper().getSessionId().toString();\n        if (!sessionId.equals(client.getSessionId())) {\n            Logger logger = LoggerFactory.getLogger(getClass());\n            logger.info(\"Session ID has changed during protected mode operation. Previous session ID: {}. New session ID: {}.\", client.getSessionId(), sessionId);\n            client.delete().forPath(foundNode);\n            client.setSessionId(sessionId);\n        }\n    }\n    return foundNode;\n}", "CodeBleu_score": 41.942008279278944}, {"code": "String validateFoundNode(CuratorFrameworkImpl client, CreateMode createMode, String foundNode) throws Exception{\n\t    Logger logger = LoggerFactory.getLogger(CuratorFrameworkImpl.class);\n    if (createMode.isEphemeral()) {\n        UUID clientId = client.getZookeeperClient().getSessionId();\n        UUID foundClientId = UUID.fromString(foundNode.substring(foundNode.lastIndexOf(\"-\") + 1));\n        if (!clientId.equals(foundClientId)) {\n            logger.info(\"Session has changed. Deleting old node \" + foundNode + \" and creating new node.\");\n            client.delete().forPath(foundNode);\n            client.create().creatingParentsIfNeeded().withMode(createMode).forPath(foundNode);\n        }\n    }\n    return foundNode;\n}", "CodeBleu_score": 38.886217338639206}]}
{"instance_id": "126d0922a699", "generation_result": [{"code": "private Stat pathInForeground(final String path, final List<ACL> aclList) throws Exception{\n\t    final OperationTrace trace = client.getZookeeperClient().startAdvancedTracer(\"setACL\");\n    trace.setPath(path);\n    Stat stat = RetryLoop.callWithRetry(client.getZookeeperClient(), new Callable<Stat>() {\n        @Override\n        public Stat call() throws Exception {\n            return client.getZooKeeper().setACL(path, aclList, -1);\n        }\n    });\n    trace.setReturnValue(stat);\n    trace.setResult(CuratorEventType.SET_ACL);\n    trace.commit();\n    return stat;\n}", "CodeBleu_score": 71.55379906042586}, {"code": "private Stat pathInForeground(final String path, final List<ACL> aclList) throws Exception{\n\t    OperationTrace trace = client.getZookeeperClient().startAdvancedTracer(\"setACLBuilderImpl-Foreground\");\n    Stat returnStat = RetryLoop.callWithRetry(client.getZookeeperClient(), new Callable<Stat>() {\n        @Override\n        public Stat call() throws Exception {\n            return client.getZooKeeper().setACL(path, aclList, -1);\n        }\n    });\n    trace.setPath(path).setReturnStat(returnStat).commit();\n    return returnStat;\n}", "CodeBleu_score": 76.80991132038663}, {"code": "private Stat pathInForeground(final String path, final List<ACL> aclList) throws Exception{\n\t    OperationTrace trace = client.getZookeeperClient().startAdvancedTracer(\"setACLBuilderImpl-Foreground\");\n    Stat returnStat = RetryLoop.callWithRetry(client.getZookeeperClient(), new Callable<Stat>() {\n        @Override\n        public Stat call() throws Exception {\n            return client.getZooKeeper().setACL(path, aclList, -1);\n        }\n    });\n    trace.setPath(path).setReturnStat(returnStat).commit();\n    return returnStat;\n}", "CodeBleu_score": 76.80991132038663}]}
{"instance_id": "e07b079ff61f", "generation_result": [{"code": "public GroupMember(CuratorFramework client, String membershipPath, String thisId, byte[] payload){\n\t    this.client = Preconditions.checkNotNull(client, \"client cannot be null\");\n    this.membershipPath = Preconditions.checkNotNull(membershipPath, \"membershipPath cannot be null\");\n    this.thisId = Preconditions.checkNotNull(thisId, \"thisId cannot be null\");\n    this.payload = Preconditions.checkNotNull(payload, \"payload cannot be null\");\n\n    Preconditions.checkArgument(thisId.length() <= 255, \"thisId length cannot be greater than 255\");\n    Preconditions.checkArgument(payload.length <= 1048575, \"payload length cannot be greater than 1048575\");\n\n    try {\n        this.cache = CuratorCache.build(client, membershipPath);\n        this.cache.listenable().addListener(this);\n        this.cache.start();\n    } catch (Exception e) {\n        throw Throwables.propagate(e);\n    }\n\n    try {\n        this.node = new PersistentNode(client, CreateMode.EPHEMERAL, false, membershipPath + \"/\" + thisId, payload);\n        this.node.start();\n    } catch (Exception e) {\n        CloseableUtils.closeQuietly(this.cache);\n        throw Throwables.propagate(e);\n    }\n}", "CodeBleu_score": 46.430700139966305}, {"code": "public GroupMember(CuratorFramework client, String membershipPath, String thisId, byte[] payload){\n\t    Preconditions.checkNotNull(client, \"client cannot be null\");\n    Preconditions.checkNotNull(membershipPath, \"membershipPath cannot be null\");\n    Preconditions.checkNotNull(thisId, \"thisId cannot be null\");\n    Preconditions.checkNotNull(payload, \"payload cannot be null\");\n\n    this.client = client;\n    this.membershipPath = membershipPath;\n    this.thisId = thisId;\n    this.payload = payload;\n\n    // check that the member ID is valid\n    Preconditions.checkArgument(ZKPaths.isValidPath(thisId), \"thisId must be a valid path\");\n\n    // set up the CuratorCache\n    cache = CuratorCache.bridgeBuilder(client, membershipPath).\n        withDataNotCached().\n        withOptions(CuratorCache.Options.SINGLE_NODE_CACHE).\n        build();\n\n    // create the PersistentNode\n    node = new PersistentNode(client, CreateMode.EPHEMERAL, true, membershipPath, payload);\n}", "CodeBleu_score": 53.15766773985315}, {"code": "public GroupMember(CuratorFramework client, String membershipPath, String thisId, byte[] payload){\n\t    this.client = client;\n    this.membershipPath = membershipPath;\n    this.thisId = thisId;\n    this.payload = payload;\n\n    Preconditions.checkArgument(this.thisId != null, \"thisId cannot be null\");\n    Preconditions.checkArgument(this.thisId.length() <= 255, \"thisId is too long (max length = 255)\");\n    Preconditions.checkArgument(this.thisId.matches(\"[\\\\p{Alnum}_-]+\"), \"thisId must only contain alphanumeric characters, underscores, and hyphens\");\n\n    try {\n        client.create().creatingParentsIfNeeded().forPath(membershipPath);\n    } catch (Exception e) {\n        throw Throwables.propagate(e);\n    }\n\n    cache = CuratorCache.bridgeBuilder(client, membershipPath).withDataNotCached().build();\n    cache.listenable().addListener(this);\n    cache.start();\n\n    try {\n        node = new PersistentNode(client, CreateMode.EPHEMERAL, true, membershipPath + \"/\" + thisId, payload);\n        node.start();\n        node.waitForInitialCreate(30, TimeUnit.SECONDS);\n    } catch (Exception e) {\n        throw Throwables.propagate(e);\n    }\n}", "CodeBleu_score": 48.634512816258436}]}
{"instance_id": "d11c76b2b912", "generation_result": [{"code": "public static void createThenWatch(CuratorFramework client, String path) {\n\t    try {\n        AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n        CompletionStage<String> stage = async.create().forPath(path);\n        stage.thenAccept(path1 -> {\n            try {\n                async.watched().getData().withMode(WatchMode.stateChange()).forPath(path1).thenAccept(event -> {\n                    System.out.println(\"Event received: \" + event);\n                    WatchedEvent watchedEvent = event.getWatchedEvent();\n                    System.out.println(\"Event type: \" + watchedEvent.getType());\n                    System.out.println(\"Event path: \" + watchedEvent.getPath());\n                    System.out.println(\"Event state: \" + watchedEvent.getState());\n                });\n            } catch (AsyncEventException e) {\n                e.printStackTrace();\n            }\n        });\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}", "CodeBleu_score": 49.859610247986225}, {"code": "public static void createThenWatch(CuratorFramework client, String path) {\n\t    try {\n        AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n        CompletionStage<String> createResult = async.create().forPath(path);\n        createResult.whenComplete((result, exception) -> {\n            if (exception != null) {\n                exception.printStackTrace();\n            } else {\n                try {\n                    async.watched().getData().forPath(path).whenComplete((dataResult, dataException) -> {\n                        if (dataException != null) {\n                            dataException.printStackTrace();\n                        } else {\n                            System.out.println(new String(dataResult));\n                        }\n                    });\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    } catch (AsyncEventException e) {\n        e.printStackTrace();\n    }\n}", "CodeBleu_score": 67.07672883032177}, {"code": "public static void createThenWatch(CuratorFramework client, String path) {\n\t    try {\n        AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n        CompletionStage<String> future = async.create().forPath(path);\n        future.whenComplete((s, e) -> {\n            if (e != null) {\n                e.printStackTrace();\n            } else {\n                async.watched().getChildren().watched().forPath(path).thenAccept(children -> {\n                    System.out.println(\"Children: \" + children);\n                }).exceptionally(ex -> {\n                    System.err.println(\"Error getting children: \" + ex);\n                    return null;\n                });\n            }\n        });\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}", "CodeBleu_score": 59.84953953854173}]}
{"instance_id": "4571de52ad5d", "generation_result": [{"code": "private List<OpResult> doOperation() throws Exception{\n\t    List<OpResult> results = client.multi(operations);\n    Preconditions.checkState(results.size() == operations.size(), \"Unexpected number of results from ZooKeeper\");\n    OpResult firstResult = results.get(0);\n    if (firstResult instanceof OpResult.ErrorResult) {\n        OpResult.ErrorResult errorResult = (OpResult.ErrorResult) firstResult;\n        throw KeeperException.create(KeeperException.Code.get(errorResult.getErr()));\n    }\n    return results;\n}", "CodeBleu_score": 39.910602644187186}, {"code": "private List<OpResult> doOperation() throws Exception{\n\t    List<OpResult> results = client.multi(operations);\n    Preconditions.checkNotNull(results, \"results cannot be null\");\n    Preconditions.checkState(!results.isEmpty(), \"results cannot be empty\");\n    OpResult firstResult = results.get(0);\n    Preconditions.checkNotNull(firstResult, \"firstResult cannot be null\");\n    if (firstResult.getType() == ZooDefs.OpCode.error) {\n        KeeperException.Code code = KeeperException.Code.get((int) firstResult.getErr());\n        Preconditions.checkNotNull(code, \"code cannot be null\");\n        throw KeeperException.create(code);\n    }\n    return results;\n}", "CodeBleu_score": 47.67626425150597}, {"code": "private List<OpResult> doOperation() throws Exception{\n\t    List<OpResult> results = null;\n    try {\n        results = client.multi(ops);\n    } catch (Exception e) {\n        throw e;\n    }\n    if (results.isEmpty()) {\n        return results;\n    }\n    OpResult result = results.get(0);\n    KeeperException.Code code = KeeperException.Code.get(result.getErr());\n    if (code != KeeperException.Code.OK) {\n        throw KeeperException.create(code);\n    }\n    return results;\n}", "CodeBleu_score": 44.543312756013385}]}
{"instance_id": "99263700ce6d", "generation_result": [{"code": "private static void listInstances(ServiceDiscovery<InstanceDetails> serviceDiscovery) throws Exception{\n\t    Collection<String> serviceNames = serviceDiscovery.queryForNames();\n    for (String serviceName : serviceNames) {\n        System.out.println(\"Service: \" + serviceName);\n        Collection<ServiceInstance<InstanceDetails>> instances = serviceDiscovery.queryForInstances(serviceName);\n        for (ServiceInstance<InstanceDetails> instance : instances) {\n            System.out.println(\"  \" + instance.getId() + \"\\t\" + instance.getAddress() + \":\" + instance.getPort() + \"\\t\" + instance.getPayload());\n        }\n    }\n    serviceDiscovery.close();\n}", "CodeBleu_score": 50.553983211094774}, {"code": "private static void listInstances(ServiceDiscovery<InstanceDetails> serviceDiscovery) throws Exception{\n\t    try {\n        Collection<String> serviceNames = serviceDiscovery.queryForNames();\n        for (String serviceName : serviceNames) {\n            System.out.println(serviceName);\n            Collection<ServiceInstance<InstanceDetails>> instances = serviceDiscovery.queryForInstances(serviceName);\n            for (ServiceInstance<InstanceDetails> instance : instances) {\n                System.out.println(\"  \" + instance);\n            }\n        }\n    } catch (KeeperException.NoNodeException e) {\n        System.out.println(\"No services registered\");\n    } finally {\n        CloseableUtils.closeQuietly(serviceDiscovery);\n    }\n}", "CodeBleu_score": 70.66860015890241}, {"code": "private static void listInstances(ServiceDiscovery<InstanceDetails> serviceDiscovery) throws Exception{\n\t    try {\n        Collection<String> serviceNames = serviceDiscovery.queryForNames();\n        for (String serviceName : serviceNames) {\n            Collection<ServiceInstance<InstanceDetails>> serviceInstances = serviceDiscovery.queryForInstances(serviceName);\n            System.out.println(serviceName + \" \" + serviceInstances);\n        }\n    } catch (KeeperException.NoNodeException e) {\n        System.out.println(\"No service instances registered.\");\n    }\n    CloseableUtils.closeQuietly(serviceDiscovery);\n}", "CodeBleu_score": 54.40150751043799}]}
{"instance_id": "891a390fa04d", "generation_result": [{"code": "private List<String> filterAndSortChildren(List<String> children){\n\t    return Lists.newArrayList(Iterables.filter(children, new Predicate<String>() {\n        @Override\n        public boolean apply(String child) {\n            return !child.equals(READY_NODE);\n        }\n    }));\n}", "CodeBleu_score": 40.74977729543319}, {"code": "private List<String> filterAndSortChildren(List<String> children){\n\t    Iterable<String> filtered = Iterables.filter(children, new Predicate<String>() {\n        @Override\n        public boolean apply(String child) {\n            return !child.equals(READY_NODE);\n        }\n    });\n\n    List<String> filteredList = Lists.newArrayList(filtered);\n    Collections.sort(filteredList);\n\n    return filteredList;\n}", "CodeBleu_score": 84.0988054150772}, {"code": "private List<String> filterAndSortChildren(List<String> children){\n\t  Iterable<String> filteredChildren = Iterables.filter(children, new Predicate<String>() {\n    @Override\n    public boolean apply(String s) {\n      return !s.equals(READY_NODE);\n    }\n  });\n  List<String> filteredList = Lists.newArrayList(filteredChildren);\n  Collections.sort(filteredList);\n  return filteredList;\n}", "CodeBleu_score": 77.74260922223189}]}
{"instance_id": "f25af95a13b6", "generation_result": [{"code": "protected void connectToZK(String newHost) throws InterruptedException, IOException{\n\t    close();\n    zk = new ZooKeeper(newHost, 3000, this);\n}", "CodeBleu_score": 12.053681976341176}, {"code": "protected void connectToZK(String newHost) throws InterruptedException, IOException{\n\t    closeZK();\n    zk = new ZooKeeper(newHost, timeout, this);\n}", "CodeBleu_score": 12.931288409185242}, {"code": "protected void connectToZK(String newHost) throws InterruptedException, IOException{\n\t    if (zk != null) {\n        zk.close();\n    }\n\n    String hostPort = newHost;\n    if (!hostPort.startsWith(\"localhost:\")) {\n        hostPort = \"localhost:\" + hostPort;\n    }\n\n    zk = new ZooKeeper(hostPort, 3000, this);\n}", "CodeBleu_score": 35.29853084407546}]}
{"instance_id": "269eaac5cec6", "generation_result": [{"code": "private List<ACL> parseACLs(String aclString) throws IOException{\n\t    ArrayList<ACL> acl;\n    if (aclString.equals(\"\")) {\n        throw new IOException(\"Unable to parse empty ACL string\");\n    }\n    acl = new ArrayList<ACL>();\n    StringTokenizer tokens = new StringTokenizer(aclString, \",\");\n    while (tokens.hasMoreTokens()) {\n        String token = tokens.nextToken().trim();\n        int firstColon = token.indexOf(':');\n        int lastColon = token.lastIndexOf(':');\n        if (firstColon == -1 || lastColon == -1 || firstColon == lastColon) {\n            LOG.error(\"Invalid ACL: \" + token);\n            continue;\n        }\n        ACL newAcl = new ACL();\n        newAcl.setId(new Id(token.substring(0, firstColon), token.substring(firstColon + 1, lastColon)));\n        newAcl.setPerms(getPermFromString(token.substring(lastColon + 1)));\n        acl.add(newAcl);\n    }\n    return acl;\n}", "CodeBleu_score": 61.97173488001925}, {"code": "private List<ACL> parseACLs(String aclString) throws IOException{\n\t    ArrayList<ACL> acl;\n    if (aclString.trim().equals(\"\")) {\n        throw new IllegalArgumentException(\"ACL cannot be empty\");\n    }\n    acl = new ArrayList<ACL>();\n    String aclItems[] = aclString.split(\",\");\n    for (String aclItem : aclItems) {\n        int firstColon = aclItem.indexOf(':');\n        int lastColon = aclItem.lastIndexOf(':');\n        if (firstColon == -1 || lastColon == -1 || firstColon == lastColon) {\n            System.err.println(aclItem + \" does not have the form scheme:id:perm\");\n        } else {\n            ACL newAcl = new ACL();\n            newAcl.setId(new Id(aclItem.substring(0, firstColon), aclItem.substring(firstColon + 1, lastColon)));\n            newAcl.setPerms(getPermFromString(aclItem.substring(lastColon + 1)));\n            acl.add(newAcl);\n        }\n    }\n    return acl;\n}", "CodeBleu_score": 73.97301425091098}, {"code": "private List<ACL> parseACLs(String aclString) throws IOException{\n\t    List<ACL> acl;\n    if (aclString.equals(\"\")) {\n        acl = Ids.OPEN_ACL_UNSAFE;\n    } else {\n        acl = new ArrayList<ACL>();\n        StringTokenizer st = new StringTokenizer(aclString, \",\");\n        while (st.hasMoreTokens()) {\n            String aclEntry = st.nextToken().trim();\n            int firstColon = aclEntry.indexOf(':');\n            int lastColon = aclEntry.lastIndexOf(':');\n            if (firstColon == -1 || lastColon == -1 || firstColon == lastColon) {\n                LOG.error(\"Invalid ACL entry \" + aclEntry);\n            } else {\n                String scheme = aclEntry.substring(0, firstColon);\n                Id id = new Id(scheme, aclEntry.substring(firstColon + 1, lastColon));\n                int lastColon2 = aclEntry.lastIndexOf(':');\n                Perms perm = Perms.parse(aclEntry.substring(lastColon2 + 1));\n                acl.add(new ACL(perm, id));\n            }\n        }\n    }\n    return acl;\n}", "CodeBleu_score": 50.17453610090967}]}
{"instance_id": "c25db637a176", "generation_result": [{"code": "public void delete(String serverId, List<String> pathList) throws Exception{\n\t    if (pathList == null || pathList.isEmpty()) {\n        return;\n    }\n    ZookeeperFactory zookeeperFactory = ZookeeperFactory.getInstance();\n    Zookeeper zookeeper = zookeeperFactory.get(serverId);\n    if (zookeeper == null) {\n        throw new IllegalArgumentException(\"serverId is not exist\");\n    }\n    if (pathList.size() < 20) {\n        for (String path : pathList) {\n            zookeeper.delete(path);\n        }\n    } else {\n        pathList.parallelStream().forEach(path -> {\n            try {\n                zookeeper.delete(path);\n            } catch (Exception e) {\n                log.error(\"delete failed, path={}\", path, e);\n            }\n        });\n    }\n}", "CodeBleu_score": 54.15995907322577}, {"code": "public void delete(String serverId, List<String> pathList) throws Exception{\n\t    Zookeeper zookeeper = ZookeeperFactory.newZookeeper(serverId);\n    if (pathList == null) {\n        throw new IllegalArgumentException(\"pathList must not be null\");\n    }\n    if (pathList.size() == 0) {\n        return;\n    }\n    if (pathList.size() < 20) {\n        for (String path : pathList) {\n            zookeeper.delete(path);\n        }\n    } else {\n        for (String path : pathList) {\n            zookeeper.deleteAsync(path);\n        }\n    }\n}", "CodeBleu_score": 54.659391439146155}, {"code": "public void delete(String serverId, List<String> pathList) throws Exception{\n\t    // Check that the path list is not null\n    if (pathList == null) {\n        throw new IllegalArgumentException(\"Path list cannot be null\");\n    }\n\n    // Verify the Zookeeper connection\n    verifyZookeeperConnection(serverId);\n\n    // Delete the nodes\n    if (pathList.size() < 20) {\n        deleteNodesSync(serverId, pathList);\n    } else {\n        deleteNodesAsync(serverId, pathList);\n    }\n}", "CodeBleu_score": 47.8105083888774}]}
{"instance_id": "3ecb1ce78f90", "generation_result": [{"code": "public Terminal createTerminal(String id, String url, StringWriter writer) throws Exception{\n\t    // write connecting message\n    writer.write(\"Connecting to \" + url);\n\n    // create connection\n    ZookeeperParams params = new ZookeeperParams(url);\n    CuratorZookeeperConnectionFactory factory = new CuratorZookeeperConnectionFactory();\n    Zookeeper zookeeper = factory.create(params);\n\n    // write success message\n    writer.write(\"Connected to \" + url);\n\n    // create terminal\n    return new Terminal(id, url, zookeeper, new ZooKeeperMain(zookeeper));\n}", "CodeBleu_score": 35.53786706607689}, {"code": "public Terminal createTerminal(String id, String url, StringWriter writer) throws Exception{\n\t    writer.write(\"Connecting to \" + url + \"...\");\n    ZookeeperParams params = new ZookeeperParams(url);\n    CuratorZookeeperConnectionFactory factory = new CuratorZookeeperConnectionFactory();\n    factory.create(params);\n    writer.write(\"Connected to \" + url + \".\");\n    ZooKeeperMain main = new ZooKeeperMain(factory.getClient());\n    return new Terminal(id, url, factory.getClient(), main);\n}", "CodeBleu_score": 40.7337311679358}, {"code": "public Terminal createTerminal(String id, String url, StringWriter writer) throws Exception{\n\t    ServerConfiguration serverConfiguration = new ServerConfiguration();\n    serverConfiguration.setUrl(url);\n    serverConfiguration.setAcl(false);\n    serverConfiguration.setReadOnly(false);\n    serverConfiguration.setSshTunnelEnabled(false);\n    serverConfiguration.setSshTunnel(new SSHTunnelConfiguration());\n    serverConfiguration.setSslEnabled(false);\n    serverConfiguration.setSslConfiguration(null);\n\n    ZookeeperParams params = new ZookeeperParams();\n    params.setServerConfiguration(serverConfiguration);\n    params.setServerListener(new ServerListener() {\n        @Override\n        public void onClose() {\n            System.out.println(\"onClose\");\n        }\n\n        @Override\n        public void onConnected() {\n            System.out.println(\"onConnected\");\n        }\n\n        @Override\n        public void onReconnected() {\n            System.out.println(\"onReconnected\");\n        }\n    });\n    params.setNodeListener(new ZookeeperNodeListener() {\n        @Override\n        public void onNodeAdded(String path) {\n            System.out.println(\"onNodeAdded\");\n        }\n\n        @Override\n        public void onNodeDeleted(String path) {\n            System.out.println(\"onNodeDeleted\");\n        }\n\n        @Override\n        public void onNodeUpdated(String path) {\n            System.out.println(\"onNodeUpdated\");\n        }\n    });\n\n    CuratorZookeeperConnectionFactory factory = new CuratorZookeeperConnectionFactory();\n    Zookeeper client = factory.create(params);\n    writer.write(\"Connecting to \" + url + \"...\n\");\n    client.connect();\n    writer.write(\"Connected to \" + url + \"\n\");\n    ZooKeeperMain main = new ZooKeeperMain(client);\n    return new Terminal(id, url, client, main);\n}", "CodeBleu_score": 36.32323841337029}]}
{"instance_id": "a3606e777eb5", "generation_result": [{"code": "public void blockUntilConnected(){\n\t    int attempts = 0;\n    while (attempts < 6) {\n        try {\n            sshClient.connect(new InetSocketAddress(host, port));\n            sshClient.authPassword(user, password);\n            sshClient.getConnection().openSession().exec(\"true\");\n            return;\n        } catch (IOException e) {\n            log.error(\"Failed to connect to SSH tunnel\", e);\n        }\n        attempts++;\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            log.error(\"Interrupted while waiting to retry SSH connection\", e);\n        }\n    }\n    sshClient.close();\n    throw new IllegalStateException(\"Failed to connect to SSH tunnel after 6 attempts\");\n}", "CodeBleu_score": 39.45620976369438}, {"code": "public void blockUntilConnected(){\n\t    int attempts = 0;\n    while (attempts < 6) {\n        try {\n            if (this.sshClient.isConnected()) {\n                return;\n            }\n            this.sshClient.connect();\n            this.sshClient.authPassword(this.username, this.password);\n            this.sshClient.startSession().exec(\"true\");\n            return;\n        } catch (IOException e) {\n            log.warn(\"Failed to connect to SSH server, retrying...\");\n            attempts++;\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e1) {\n                log.warn(\"Interrupted while waiting to retry connection\", e1);\n            }\n        }\n    }\n    try {\n        this.sshClient.close();\n    } catch (IOException e) {\n        log.warn(\"Failed to close SSH client\", e);\n    }\n    throw new IllegalStateException(\"Failed to connect to SSH server after 6 attempts\");\n}", "CodeBleu_score": 37.17318356987783}, {"code": "public void blockUntilConnected(){\n\t    int retries = 0;\n    while (retries < 6) {\n        try {\n            log.info(\"Attempting to connect to SSH tunnel.\");\n            connect();\n            log.info(\"Connection to SSH tunnel successful.\");\n            return;\n        } catch (IOException e) {\n            log.info(\"Unable to connect to SSH tunnel. Retrying...\");\n            retries++;\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException ex) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }\n    log.error(\"Unable to connect to SSH tunnel after 6 attempts.\");\n    throw new IllegalStateException(\"Unable to connect to SSH tunnel after 6 attempts.\");\n}", "CodeBleu_score": 43.31562992293391}]}
{"instance_id": "a4e5b886b72b", "generation_result": [{"code": "public void deleteNode(String serverId, List<String> pathList){\n\t    try {\n        zookeeperDomainService.deleteNode(serverId, pathList);\n    } catch (Exception e) {\n        logger.error(\"delete node failed\", e);\n        throw new IllegalStateException(\"delete node failed\");\n    }\n}", "CodeBleu_score": 73.19053894780562}, {"code": "public void deleteNode(String serverId, List<String> pathList){\n\t    try {\n        zookeeperDomainService.deleteNode(serverId, pathList);\n    } catch (Exception e) {\n        LOGGER.error(\"delete node error\", e);\n        throw new IllegalStateException(e);\n    }\n}", "CodeBleu_score": 84.41755236224664}, {"code": "public void deleteNode(String serverId, List<String> pathList){\n\t    try {\n        zookeeperDomainService.deleteNode(serverId, pathList);\n    } catch (Exception e) {\n        LOGGER.error(\"delete node error\", e);\n        throw new IllegalStateException(e);\n    }\n}", "CodeBleu_score": 84.41755236224664}]}
{"instance_id": "4fdbc9ec2e75", "generation_result": [{"code": "public void disconnect(String id){\n\t    Platform.runLater(() -> {\n        Optional<ServerConfiguration> serverConfigurationOptional = getServerConfigurationById(id);\n        if (serverConfigurationOptional.isPresent()) {\n            ServerConfiguration serverConfiguration = serverConfigurationOptional.get();\n            ZookeeperDomainService zookeeperDomainService = getZookeeperDomainService(serverConfiguration.getServer());\n            zookeeperDomainService.disconnect();\n            TreeItemCache.getInstance().removeServerConfiguration(id);\n        }\n    });\n}", "CodeBleu_score": 47.57951541980715}, {"code": "public void disconnect(String id){\n\t    CompletableFuture.runAsync(() -> {\n        try {\n            Configuration configuration = configurationDomainService.getConfiguration();\n            ServerConfiguration serverConfiguration = configuration.getServerConfigurations().stream()\n                    .filter(e -> e.getServerId().equals(id))\n                    .findFirst().orElseThrow(RuntimeException::new);\n            zookeeperDomainService.disconnect(serverConfiguration.getServerId());\n            configurationDomainService.removeServerConfiguration(id);\n            Platform.runLater(() -> {\n                TreeItemCache.getInstance().remove(id);\n                updateServerTree();\n            });\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    });\n}", "CodeBleu_score": 44.45030437714653}, {"code": "public void disconnect(String id){\n\t    CompletableFuture.runAsync(() -> {\n        var serverConfiguration = getServerConfigurationById(id);\n        if (serverConfiguration == null) {\n            return;\n        }\n        disconnect(serverConfiguration);\n        removeServerFromTreeItemCache(id);\n    }).whenComplete((unused, throwable) -> {\n        if (throwable != null) {\n            throwable.printStackTrace();\n        }\n    });\n}", "CodeBleu_score": 33.90492612242688}]}
{"instance_id": "6bf0d7ac9390", "generation_result": [{"code": "public void startTerminal(String serverId, StringWriter stream){\n\t    ConnectionConfigurationVO connectionConfigurationVO = getConnectionConfiguration(serverId);\n    String url = connectionConfigurationVO.getUrl();\n    if (connectionConfigurationVO.getSshConfiguration() != null) {\n        SSHTunnelConfiguration sshTunnelConfiguration = connectionConfigurationVO.getSshConfiguration();\n        url = sshTunnelConfiguration.getLocalHost() + \":\" + sshTunnelConfiguration.getLocalPort();\n    }\n    zookeeperDomainService.startTerminal(serverId, url, stream);\n}", "CodeBleu_score": 43.55848886630541}, {"code": "public void startTerminal(String serverId, StringWriter stream){\n\t    ServerConfiguration serverConfiguration = getServerConfiguration(serverId);\n    String connectionUrl = getConnectionUrl(serverConfiguration);\n    zookeeperDomainService.startTerminal(serverId, connectionUrl, stream);\n}", "CodeBleu_score": 22.4759454109074}, {"code": "public void startTerminal(String serverId, StringWriter stream){\n\t    ConfigurationVOTransfer configurationVOTransfer = ConfigurationVOTransfer.getInstance();\n    Optional<ServerConfigurationVO> serverConfigurationVO = configurationVOTransfer.getServerConfigurationVO(serverId);\n    if (serverConfigurationVO.isPresent()) {\n        String url = serverConfigurationVO.get().getUrl();\n        if (serverConfigurationVO.get().isSshTunnelEnabled()) {\n            Optional<ConnectionConfigurationVO> connectionConfigurationVO = configurationVOTransfer.getConnectionConfigurationVO(serverConfigurationVO.get().getConnectionId());\n            if (connectionConfigurationVO.isPresent()) {\n                SSHTunnelConfiguration sshTunnelConfiguration = connectionConfigurationVO.get().getSshTunnelConfiguration();\n                url = sshTunnelConfiguration.getSshHost() + \":\" + sshTunnelConfiguration.getSshPort();\n            }\n        }\n        zookeeperDomainService.startTerminal(serverId, url, stream);\n    } else {\n        stream.println(\"Server not found!\");\n    }\n}", "CodeBleu_score": 42.43732125260285}]}
{"instance_id": "635dea120e55", "generation_result": [{"code": "public void executeCommand(String id, String command){\n\t    // TODO: Implement this function\n    Asserts.notNull(id, \"id\");\n    Asserts.notNull(command, \"command\");\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this function\n    // TODO: Implement this", "CodeBleu_score": 24.714624067513334}, {"code": "public void executeCommand(String id, String command){\n\t    if (Strings.isNullOrEmpty(command)) {\n        return;\n    }\n    try {\n        if (command.startsWith(\"add\")) {\n            String[] args = command.split(\" \");\n            String path = args[1];\n            String data = args[2];\n            String mode = args[3];\n            if (mode.equals(\"persistent\")) {\n                ZookeeperDomainService.add(path, data, false);\n            } else if (mode.equals(\"ephemeral\")) {\n                ZookeeperDomainService.add(path, data, true);\n            } else {\n                VToast.error(\"Mode must be persistent or ephemeral\");\n            }\n        } else if (command.startsWith(\"delete\")) {\n            String[] args = command.split(\" \");\n            String path = args[1];\n            ZookeeperDomainService.delete(path);\n        } else if (command.startsWith(\"set\")) {\n            String[] args = command.split(\" \");\n            String path = args[1];\n            String data = args[2];\n            ZookeeperDomainService.set(path, data);\n        } else if (command.startsWith(\"get\")) {\n            String[] args = command.split(\" \");\n            String path = args[1];\n            Stat stat = new Stat();\n            byte[] data = ZookeeperDomainService.get(path, stat);\n            StringWriter writer = new StringWriter();\n            writer.append(\"path: \").append(path).append(\"", "CodeBleu_score": 35.94295914092637}, {"code": "public void executeCommand(String id, String command){\n\t    try {\n        ZookeeperDomainService zookeeperDomainService = ZookeeperDomainServiceFactory.getInstance().get(id);\n        zookeeperDomainService.execute(command);\n    } catch (Exception e) {\n        log.error(\"Command execution failed: {}\", command, e);\n        VToast.error(\"Command execution failed, please retry\");\n    }\n}", "CodeBleu_score": 41.13283162309761}]}
{"instance_id": "8627d161f5fc", "generation_result": [{"code": "public Properties loadZookeeperSystemProperties(){\n\t    final String filePath = System.getProperty(\"prettyZoo.properties.filePath\");\n    if (Strings.isNullOrEmpty(filePath)) {\n        return new Properties();\n    }\n    final File file = new File(filePath);\n    if (!file.exists()) {\n        return new Properties();\n    }\n    final Properties properties = new Properties();\n    try (final InputStream inputStream = new FileInputStream(file)) {\n        properties.load(inputStream);\n        properties.forEach((k, v) -> LOGGER.info(\"{}={}\", k, v));\n        return properties;\n    } catch (IOException e) {\n        LOGGER.error(\"failed to load properties from {}\", filePath, e);\n        return new Properties();\n    }\n}", "CodeBleu_score": 44.01902322489894}, {"code": "public Properties loadZookeeperSystemProperties(){\n\t    String zkSysPropertiesPath = System.getProperty(\"prettyzoo.system.properties\");\n    Properties properties = new Properties();\n    if (zkSysPropertiesPath == null) {\n        return properties;\n    }\n    File file = new File(zkSysPropertiesPath);\n    if (!file.exists()) {\n        return properties;\n    }\n    try (InputStream inputStream = new FileInputStream(file)) {\n        properties.load(inputStream);\n        return properties;\n    } catch (IOException e) {\n        e.printStackTrace();\n        return properties;\n    }\n}", "CodeBleu_score": 44.01271579487381}, {"code": "public Properties loadZookeeperSystemProperties(){\n\t    Properties properties = new Properties();\n    try {\n        File file = new File(\"zookeeper.properties\");\n        if (file.exists()) {\n            properties.load(new FileInputStream(file));\n            log.info(\"Loaded zookeeper properties from zookeeper.properties: {}\", properties);\n        } else {\n            log.info(\"No zookeeper.properties found on classpath\");\n        }\n    } catch (IOException e) {\n        log.warn(\"Error loading properties from zookeeper.properties\", e);\n    }\n    return properties;\n}", "CodeBleu_score": 49.33340890509963}]}
{"instance_id": "dce20e143e04", "generation_result": [{"code": "public void saveZookeeperSystemProperties(String content){\n\t    Properties properties = new Properties();\n    try {\n        properties.load(new StringReader(content));\n    } catch (IOException e) {\n        LOGGER.error(\"load properties failed\", e);\n        VToast.error(\"load properties failed\");\n    }\n    try (OutputStream outputStream = new FileOutputStream(SYS_PROP_PATH)) {\n        properties.store(outputStream, \"\");\n    } catch (IOException e) {\n        LOGGER.error(\"store properties failed\", e);\n        VToast.error(\"store properties failed\");\n    }\n}", "CodeBleu_score": 34.456011840857144}, {"code": "public void saveZookeeperSystemProperties(String content){\n\t    Properties properties = new Properties();\n    try {\n        properties.load(new StringReader(content));\n    } catch (IOException e) {\n        LOGGER.error(\"load properties failed\", e);\n        VToast.error(\"load properties failed\");\n        return;\n    }\n    try {\n        properties.store(new FileOutputStream(SYS_PROP_PATH), \"\");\n    } catch (IOException e) {\n        LOGGER.error(\"save properties failed\", e);\n        VToast.error(\"save properties failed\");\n        return;\n    }\n    VToast.info(\"save properties successfully\");\n}", "CodeBleu_score": 33.46882712080453}, {"code": "public void saveZookeeperSystemProperties(String content){\n\t    Properties properties = new Properties();\n    try {\n        properties.load(new StringReader(content));\n    } catch (IOException e) {\n        LOGGER.error(\"load properties error\", e);\n        VToast.error(\"\u52a0\u8f7d\u7cfb\u7edf\u914d\u7f6e\u5931\u8d25\");\n        return;\n    }\n    try {\n        properties.store(new FileOutputStream(SYS_PROP_PATH), \"\");\n    } catch (IOException e) {\n        LOGGER.error(\"save properties error\", e);\n        VToast.error(\"\u4fdd\u5b58\u7cfb\u7edf\u914d\u7f6e\u5931\u8d25\");\n        return;\n    }\n    VToast.info(\"\u4fdd\u5b58\u7cfb\u7edf\u914d\u7f6e\u6210\u529f\");\n}", "CodeBleu_score": 31.35824698096136}]}
{"instance_id": "d89f8e6bfb31", "generation_result": [{"code": "private String response(Socket client){\n\t    try {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(client.getInputStream()));\n        StringBuilder builder = new StringBuilder();\n        String line;\n        while ((line = reader.readLine()) != null) {\n            builder.append(line);\n        }\n        client.close();\n        return builder.toString();\n    } catch (IOException e) {\n        throw new IllegalStateException(e);\n    }\n}", "CodeBleu_score": 62.57848685607442}, {"code": "private String response(Socket client){\n\t    try {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(client.getInputStream()));\n        StringBuilder builder = new StringBuilder();\n        String line;\n        while ((line = reader.readLine()) != null) {\n            builder.append(line);\n        }\n        reader.close();\n        client.close();\n        return builder.toString();\n    } catch (IOException e) {\n        throw new IllegalStateException(e);\n    }\n}", "CodeBleu_score": 62.248557747586084}, {"code": "private String response(Socket client){\n\t    StringBuilder response = new StringBuilder();\n    BufferedReader in;\n    try {\n        in = new BufferedReader(new InputStreamReader(client.getInputStream()));\n        String line;\n        while ((line = in.readLine()) != null) {\n            response.append(line);\n        }\n        in.close();\n        client.close();\n    } catch (IOException e) {\n        throw new IllegalStateException(e);\n    }\n    return response.toString();\n}", "CodeBleu_score": 57.24679180710199}]}
{"instance_id": "b0a277c5e3c0", "generation_result": [{"code": "public ZookeeperConnection<CuratorFramework> create(ZookeeperParams params){\n\t    try {\n        CuratorFramework client = CuratorFrameworkFactory.builder()\n                .connectString(params.getServer())\n                .sessionTimeoutMs(params.getTimeout())\n                .retryPolicy(new ExponentialBackoffRetry(1000, 3))\n                .authorization(params.getAuthInfo().stream().map(authInfo -> new AuthInfo(authInfo.getScheme(), authInfo.getAuth().getBytes())).toArray(AuthInfo[]::new))\n                .aclProvider(new ACLProvider() {\n                    @Override\n                    public List<ACL> getDefaultAcl() {\n                        return ZooDefs.Ids.OPEN_ACL_UNSAFE;\n                    }\n\n                    @Override\n                    public List<ACL> getAclForPath(String path) {\n                        return ZooDefs.Ids.OPEN_ACL_UNSAFE;\n                    }\n                })\n                .build();\n        client.start();\n        boolean connected = client.blockUntilConnected(5, TimeUnit.SECONDS);\n        if (!connected) {\n            client.close();\n            throw new RuntimeException(\"Unable to connect to Zookeeper server \" + params.getServer());\n        }\n        client.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState newState) {\n                if (newState == ConnectionState.SUSPENDED) {\n                    params.getServerListener().onServerStateChanged(ServerListener.ServerState.SUSPENDED);\n                } else if (newState == ConnectionState.LOST) {\n                    params.getServerListener().onServerStateChanged(ServerListener.ServerState.LOST);\n                } else if (newState == ConnectionState.RECONNECTED) {\n                    params.getServerListener().onServerStateChanged(ServerListener.ServerState.RECONNECTED);\n                }\n            }\n        });\n        client.getCuratorListenable().addListener((client1, event) -> {\n            if (event.getType() == CuratorEventType", "CodeBleu_score": 33.08092295909073}, {"code": "public ZookeeperConnection<CuratorFramework> create(ZookeeperParams params){\n\t    CuratorFramework client = createClient(params);\n    try {\n        client.start();\n        client.blockUntilConnected(5, TimeUnit.SECONDS);\n    } catch (Exception e) {\n        client.close();\n        throw new RuntimeException(e);\n    }\n    return new CuratorZookeeperConnection(client, params);\n}", "CodeBleu_score": 53.685169862170945}, {"code": "public ZookeeperConnection<CuratorFramework> create(ZookeeperParams params){\n\t    final Logger log = LoggerFactory.getLogger(ZookeeperConnectionFactory.class);\n\n    CuratorFramework client = CuratorFrameworkFactory.builder()\n            .connectString(params.getHost())\n            .namespace(params.getNamespace())\n            .retryPolicy(new ExponentialBackoffRetry(1000, 3))\n            .aclProvider(new ACLProvider() {\n                @Override\n                public List<ACL> getDefaultAcl() {\n                    return ZooDefs.Ids.OPEN_ACL_UNSAFE;\n                }\n\n                @Override\n                public List<ACL> getAclForPath(String path) {\n                    return ZooDefs.Ids.OPEN_ACL_UNSAFE;\n                }\n            })\n            .authorization(params.getAuthInfo().stream().map(authInfo -> new AuthInfo(authInfo.getScheme(), authInfo.getAuth().getBytes())).toArray(AuthInfo[]::new))\n            .build();\n\n    client.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n        @Override\n        public void stateChanged(CuratorFramework client, ConnectionState newState) {\n            log.info(\"state changed: \" + newState);\n            if (newState == ConnectionState.CONNECTED) {\n                log.info(\"connected\");\n                params.getServerListener().onConnected();\n            } else if (newState == ConnectionState.SUSPENDED) {\n                log.info(\"suspended\");\n                params.getServerListener().onSuspended();\n            } else if (newState == ConnectionState.LOST) {\n                log.info(\"lost\");\n                params.getServerListener().onDisconnected();\n            } else if (newState == ConnectionState.RECONNECTED) {\n                log.info(\"reconnected\");\n                params.getServerListener().onReconnected();\n            }\n        }\n    });\n\n    client.getCuratorListenable().addListener((client1, event) -> {\n        if (event.getType() == CuratorEventType.WATCHED) {\n            log.info(\"watched event", "CodeBleu_score": 28.763020088097445}]}
{"instance_id": "b144bcd67462", "generation_result": [{"code": "public void sync(List<ZookeeperNodeListener> listeners){\n\t    Logger logger = LoggerFactory.getLogger(ZookeeperConnection.class);\n    logger.info(\"Starting synchronization\");\n    if (isSyncing.get()) {\n        logger.info(\"Synchronization already in progress\");\n        return;\n    }\n    isSyncing.set(true);\n    try {\n        treeCache.getListenable().addListener(new CuratorTreeCacheListener(listeners));\n        treeCache.start();\n    } catch (Exception e) {\n        logger.error(\"Failed to start synchronization\", e);\n        try {\n            treeCache.close();\n        } catch (Exception e1) {\n            logger.error(\"Failed to close synchronization\", e1);\n        }\n    }\n}", "CodeBleu_score": 53.81963184328076}, {"code": "public void sync(List<ZookeeperNodeListener> listeners){\n\t    final Logger log = LoggerFactory.getLogger(ZookeeperConnection.class);\n    final AtomicBoolean isSyncing = new AtomicBoolean(false);\n\n    if (isSyncing.get()) {\n        log.info(\"syncing already in progress\");\n        return;\n    }\n\n    isSyncing.set(true);\n    log.info(\"start syncing\");\n\n    try {\n        TreeCache treeCache = new TreeCache(client, path);\n        treeCache.getListenable().addListener(new CuratorTreeCacheListener(listeners));\n        treeCache.start();\n    } catch (Exception e) {\n        log.error(\"sync error\", e);\n        close();\n    } finally {\n        isSyncing.set(false);\n        log.info(\"finish syncing\");\n    }\n}", "CodeBleu_score": 48.632823758137924}, {"code": "public void sync(List<ZookeeperNodeListener> listeners){\n\t    if (listeners.isEmpty()) {\n        return;\n    }\n\n    if (synchronizing.get()) {\n        logger.info(\"synchronization is already in progress\");\n        return;\n    }\n\n    try {\n        logger.info(\"start synchronization\");\n        synchronizing.set(true);\n\n        listeners.forEach(listener -> {\n            try {\n                listener.onStart(connection);\n            } catch (Exception e) {\n                logger.error(\"failed to start synchronization\", e);\n            }\n        });\n\n        treeCache.getListenable().addListener(new CuratorTreeCacheListener(listeners));\n        treeCache.start();\n    } catch (Exception e) {\n        logger.error(\"failed to synchronize\", e);\n        close();\n    }\n}", "CodeBleu_score": 39.396646468388816}]}
{"instance_id": "6452f272f2d7", "generation_result": [{"code": "public void watchPathChildrenNode(String path, PathChildrenCacheListener listener) throws Exception{\n\t    CuratorFramework client = CuratorFrameworkFactory.newClient(\n            \"localhost:2181\", new ExponentialBackoffRetry(1000, 3));\n    client.start();\n    PathChildrenCache cache = new PathChildrenCache(client, path, true);\n    cache.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);\n    cache.getListenable().addListener(listener);\n}", "CodeBleu_score": 68.255144392121}, {"code": "public void watchPathChildrenNode(String path, PathChildrenCacheListener listener) throws Exception{\n\t    CuratorFramework client = CuratorFrameworkFactory.newClient(Constant.ZK_CLUSTER, new ExponentialBackoffRetry(1000, 3));\n    client.start();\n    PathChildrenCache cache = new PathChildrenCache(client, path, true);\n    cache.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);\n    cache.getListenable().addListener(listener);\n}", "CodeBleu_score": 67.93553458002324}, {"code": "public void watchPathChildrenNode(String path, PathChildrenCacheListener listener) throws Exception{\n\t    CuratorFramework client = CuratorFrameworkFactory.newClient(Constant.ZK_CONNECTION_STRING, new ExponentialBackoffRetry(1000, 3));\n    client.start();\n    PathChildrenCache cache = new PathChildrenCache(client, path, true);\n    cache.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);\n    cache.getListenable().addListener(listener);\n}", "CodeBleu_score": 67.52786692669889}]}
{"instance_id": "17f786e147c3", "generation_result": [{"code": "public void unregisterService(){\n\t    Logger LOG = LoggerFactory.getLogger(this.getClass());\n    LOG.info(\"unregisterService start\");\n    // \u83b7\u53d6\u670d\u52a1\u5217\u8868\n    Map<String, RpcProtocol> serviceList = ServiceUtil.getServiceList();\n    List<String> servicePathList = new ArrayList<String>();\n    for (Map.Entry<String, RpcProtocol> entry : serviceList.entrySet()) {\n        RpcProtocol rpcProtocol = entry.getValue();\n        RpcServiceInfo rpcServiceInfo = rpcProtocol.getRpcServiceInfo();\n        String servicePath = Constant.ZK_REGISTRY_PATH + Constant.ZK_SEPARATOR + rpcServiceInfo.getServiceName();\n        servicePathList.add(servicePath);\n    }\n    CuratorFramework curator = CuratorClient.getCurator();\n    curator.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n        @Override\n        public void stateChanged(CuratorFramework curatorFramework, ConnectionState connectionState) {\n            if (connectionState == ConnectionState.LOST) {\n                LOG.info(\"zookeeper connectionState = LOST\");\n            } else if (connectionState == ConnectionState.CONNECTED) {\n                LOG.info(\"zookeeper connectionState = CONNECTED\");\n            } else if (connectionState == ConnectionState.RECONNECTED) {\n                LOG.info(\"zookeeper connectionState = RECONNECTED\");\n            }\n        }\n    });\n    try {\n        for (String servicePath : servicePathList) {\n            try {\n                curator.delete().deletingChildrenIfNeeded().forPath(servicePath);\n            } catch (Exception e) {\n                LOG.error(\"delete path error:\" + e.getMessage());\n            }\n        }\n    } catch (Exception e) {\n        LOG.error(\"unregisterService error:\" + e.getMessage());\n    } finally {\n        curator.close();\n    }\n    LOG.info(\"unregisterService end\");\n}", "CodeBleu_score": 22.338321787349933}, {"code": "public void unregisterService(){\n\t    logger.info(\"Unregistering service...\");\n    List<String> serviceList = new ArrayList<String>();\n    for (Map.Entry<String, RpcServiceInfo> entry : serviceMetaData.entrySet()) {\n        serviceList.add(entry.getValue().getServiceName());\n    }\n    try {\n        for (String serviceName : serviceList) {\n            String servicePath = Constant.ZK_REGISTRY_PATH + Constant.ZK_SEPARATOR + serviceName;\n            curatorClient.deleteRecursive(servicePath);\n        }\n    } catch (Exception e) {\n        logger.error(\"Failed to unregister service \" + e.getMessage());\n    } finally {\n        curatorClient.close();\n    }\n}", "CodeBleu_score": 30.422167945334888}, {"code": "public void unregisterService(){\n\t    Logger LOG = LoggerFactory.getLogger(this.getClass());\n    LOG.info(\"Unregistering service...\");\n    List<String> serviceList = new ArrayList<String>();\n    Map<String, RpcProtocol> protocolMap = ServiceUtil.serviceMap;\n    for (String serviceName : protocolMap.keySet()) {\n        RpcProtocol protocol = protocolMap.get(serviceName);\n        RpcServiceInfo serviceInfo = protocol.getServiceInfo();\n        String servicePath = Constant.ZK_REGISTER_ROOT_PATH + \"/\" + serviceName + Constant.ZK_SERVICE_ADDRESS_DELIMITER + serviceInfo.getServiceAddress() + Constant.ZK_SERVICE_ADDRESS_DELIMITER + serviceInfo.getServicePort();\n        serviceList.add(servicePath);\n    }\n    CuratorClient curatorClient = new CuratorClient();\n    CuratorFramework client = curatorClient.getClient();\n    client.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n        @Override\n        public void stateChanged(CuratorFramework client, ConnectionState state) {\n            if (state == ConnectionState.LOST) {\n                LOG.error(\"Connection lost from Zookeeper, current state is LOST!\");\n            } else if (state == ConnectionState.CONNECTED) {\n                LOG.info(\"Connection established from Zookeeper, current state is CONNECTED!\");\n            } else if (state == ConnectionState.RECONNECTED) {\n                LOG.info(\"Connection reconnected from Zookeeper, current state is RECONNECTED!\");\n            }\n        }\n    });\n    for (String servicePath : serviceList) {\n        try {\n            client.delete().forPath(servicePath);\n            LOG.info(\"Delete path \" + servicePath + \" OK!\");\n        } catch (Exception e) {\n            LOG.error(\"Delete path \" + servicePath + \" failed!\");\n            LOG.error(e.getMessage(), e);\n        }\n    }\n    curatorClient.close();\n    LOG.info(\"Unregister service OK!\");\n}", "CodeBleu_score": 17.76382674118367}]}
{"instance_id": "32fec6cfa353", "generation_result": [{"code": "public void addListener(IZkStateListener listener){\n\t    CompletableFuture.runAsync(() -> makeClientReady())\n        .exceptionally(e -> {\n            logger.error(\"Failed to make client ready\", e);\n            return null;\n        })\n        .thenRun(() -> {\n            zkClient.subscribeStateChanges(listener);\n        });\n}", "CodeBleu_score": 22.652578265841917}, {"code": "public void addListener(IZkStateListener listener){\n\t    CompletableFuture.runAsync(() -> {\n        makeClientReady();\n    }).thenRun(() -> {\n        zkClient.subscribeStateChanges(listener);\n    }).exceptionally(ex -> {\n        logger.error(\"Exception while adding listener to Zookeeper client\", ex);\n    });\n}", "CodeBleu_score": 23.819325709487}, {"code": "public void addListener(IZkStateListener listener){\n\t    CompletableFuture.runAsync(this::makeClientReady)\n        .thenAccept(v -> zkClient.subscribeStateChanges(listener))\n        .exceptionally(ex -> {\n            logger.error(\"Failed to add listener\", ex);\n            return null;\n        });\n}", "CodeBleu_score": 21.57769219848335}]}
{"instance_id": "619d57562a76", "generation_result": [{"code": "public CuratorZookeeperClient(String serverAddr, String authority){\n\t    // \u521b\u5efa CuratorFramework \u5ba2\u6237\u7aef\n    client = CuratorFrameworkFactory.builder()\n            .connectString(serverAddr)\n            .sessionTimeoutMs(60000)\n            .connectionTimeoutMs(3000)\n            .retryPolicy(new RetryNTimes(Integer.MAX_VALUE, 1000))\n            .authorization(\"digest\", authority.getBytes())\n            .build();\n    // \u6dfb\u52a0\u8fde\u63a5\u72b6\u6001\u76d1\u542c\u5668\n    client.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n        @Override\n        public void stateChanged(CuratorFramework client, ConnectionState state) {\n            if (state == ConnectionState.LOST) {\n                CuratorZookeeperClient.this.state = StateListener.DISCONNECTED;\n            } else if (state == ConnectionState.CONNECTED) {\n                CuratorZookeeperClient.this.state = StateListener.CONNECTED;\n            } else if (state == ConnectionState.RECONNECTED) {\n                CuratorZookeeperClient.this.state = StateListener.RECONNECTED;\n            }\n            if (stateListener != null) {\n                stateListener.stateChanged(state);\n            }\n        }\n    });\n    // \u542f\u52a8\u5ba2\u6237\u7aef\n    client.start();\n    try {\n        // \u7b49\u5f85\u8fde\u63a5\u6210\u529f\n        client.blockUntilConnected(10000, TimeUnit.MILLISECONDS);\n    } catch (InterruptedException e) {\n        throw new IllegalStateException(e.getMessage(), e);\n    }\n}", "CodeBleu_score": 67.5855628019928}, {"code": "public CuratorZookeeperClient(String serverAddr, String authority){\n\t    try {\n        int timeout = Integer.getInteger(ZK_SESSION_TIMEOUT, DEFAULT_ZK_SESSION_TIMEOUT);\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder()\n                .connectString(serverAddr)\n                .retryPolicy(new RetryNTimes(Integer.MAX_VALUE, 1000))\n                .connectionTimeoutMs(timeout);\n        if (authority != null && authority.length() > 0) {\n            builder = builder.authorization(\"digest\", authority.getBytes());\n        }\n        client = builder.build();\n        client.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n            public void stateChanged(CuratorFramework client, ConnectionState state) {\n                if (state == ConnectionState.LOST) {\n                    try {\n                        client.close();\n                    } catch (Exception e) {\n                        logger.warn(e.getMessage(), e);\n                    }\n                    CuratorZookeeperClient.this.stateChanged(StateListener.DISCONNECTED);\n                } else if (state == ConnectionState.CONNECTED) {\n                    CuratorZookeeperClient.this.stateChanged(StateListener.CONNECTED);\n                } else if (state == ConnectionState.RECONNECTED) {\n                    CuratorZookeeperClient.this.stateChanged(StateListener.RECONNECTED);\n                }\n            }\n        });\n        client.start();\n        client.blockUntilConnected();\n        if (client.getZookeeperClient().isConnected()) {\n            stateChanged(StateListener.CONNECTED);\n        }\n    } catch (Exception e) {\n        throw new IllegalStateException(e.getMessage(), e);\n    }\n}", "CodeBleu_score": 78.55170957366865}, {"code": "public CuratorZookeeperClient(String serverAddr, String authority){\n\t    try {\n        // \u521b\u5efaCuratorFramework\u5ba2\u6237\u7aef\n        CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder()\n                .connectString(serverAddr)\n                .retryPolicy(new RetryNTimes(1000, 3))\n                .connectionTimeoutMs(5000);\n        if (authority != null) {\n            builder = builder.authorization(\"digest\", authority.getBytes());\n        }\n        client = builder.build();\n        // \u6dfb\u52a0\u8fde\u63a5\u72b6\u6001\u76d1\u542c\u5668\n        client.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n            @Override\n            public void stateChanged(CuratorFramework client, ConnectionState state) {\n                if (state == ConnectionState.LOST) {\n                    // \u8fde\u63a5\u4e22\u5931\n                    CuratorZookeeperClient.this.state = StateListener.DISCONNECTED;\n                } else if (state == ConnectionState.CONNECTED) {\n                    // \u8fde\u63a5\u5efa\u7acb\n                    CuratorZookeeperClient.this.state = StateListener.CONNECTED;\n                } else if (state == ConnectionState.RECONNECTED) {\n                    // \u91cd\u65b0\u8fde\u63a5\n                    CuratorZookeeperClient.this.state = StateListener.RECONNECTED;\n                }\n                // \u56de\u8c03\u76d1\u542c\u5668\n                if (CuratorZookeeperClient.this.stateListener != null) {\n                    CuratorZookeeperClient.this.stateListener.stateChanged(state);\n                }\n            }\n        });\n        // \u542f\u52a8\u5ba2\u6237\u7aef\n        client.start();\n    } catch (Exception e) {\n        throw new IllegalStateException(e.getMessage(), e);\n    }\n}", "CodeBleu_score": 74.72649765454992}]}
{"instance_id": "9e7fb18946e4", "generation_result": [{"code": "public void removeChildListener(String path, ChildListener listener){\n\t    ConcurrentMap<ChildListener, TargetChildListener> listeners = childListeners.get(path);\n    if (listeners == null) {\n        return;\n    }\n    TargetChildListener targetListener = listeners.remove(listener);\n    if (targetListener != null) {\n        zkClient.removeChildListener(path, targetListener);\n    }\n    if (listeners.size() == 0) {\n        childListeners.remove(path);\n    }\n}", "CodeBleu_score": 75.33030005571365}, {"code": "public void removeChildListener(String path, ChildListener listener){\n\t    ConcurrentMap<ChildListener, TargetChildListener> listeners = childListeners.get(path);\n    if (listeners != null) {\n        TargetChildListener targetListener = listeners.remove(listener);\n        zkClient.removeChildListener(path, targetListener);\n    }\n}", "CodeBleu_score": 70.630914850498}, {"code": "public void removeChildListener(String path, ChildListener listener){\n\t    ConcurrentMap<ChildListener, TargetChildListener> listeners = childListeners.get(path);\n    if (listeners == null) {\n        return;\n    }\n    TargetChildListener targetListener = listeners.remove(listener);\n    if (targetListener != null) {\n        zkClient.removeChildListener(path, targetListener);\n    }\n    if (listeners.isEmpty()) {\n        childListeners.remove(path);\n    }\n}", "CodeBleu_score": 75.42964554578884}]}
{"instance_id": "2c3fae642654", "generation_result": [{"code": "static int watcher_reconnect_to_zookeeper(zhandle_t *zh){\n\t    if (NULL == zh) {\n        LOG_FATAL_ERR(\"ZooKeeper handle is null!\");\n        return QCONF_ERR_OTHER;\n    }\n\n    // Delete the idc and host information associated with the handle\n    string idc, host;\n    idc = QConf::Zoo::get_idc(zh);\n    host = QConf::Zoo::get_host(zh);\n    QConf::Zoo::delete_idc(zh);\n    QConf::Zoo::delete_host(zh);\n\n    // Close the old handle\n    zookeeper_close(zh);\n\n    // Initialize the new handle\n    zh = zookeeper_init(host.c_str(), NULL, 10000, 0, NULL, 0);\n    if (NULL == zh) {\n        LOG_FATAL_ERR(\"Failed to reconnect to ZooKeeper!\");\n        return QCONF_ERR_OTHER;\n    }\n\n    // Initialize the environment for the new handle\n    QConf::Zoo::set_idc(zh, idc);\n    QConf::Zoo::set_host(zh, host);\n    QConf::Zoo::set_watcher(zh, QConf::watcher_callback, NULL);\n\n    // Reset the table watcher\n    int ret = QConf::watcher_reset(zh);\n    if (QCONF_OK != ret) {\n        LOG_FATAL_ERR(\"Failed to reset table watcher!\");\n        return ret;\n    }\n\n    return QCONF_OK;\n}", "CodeBleu_score": 37.41167802576477}, {"code": "static int watcher_reconnect_to_zookeeper(zhandle_t *zh){\n\t    int ret = QCONF_OK;\n    int idc_count = 0;\n    idc_info_t *idcs = NULL;\n    char *host = NULL;\n    int host_len = 0;\n    int idc_index = 0;\n    int idc_seq = 0;\n\n    // Check if zh is NULL\n    if (NULL == zh) {\n        LOG_FATAL_ERR(\"ZooKeeper handle is NULL!\");\n        return QCONF_ERR_OTHER;\n    }\n\n    // Get the IDC information associated with the handle\n    idc_count = qconf_get_idc_count(zh);\n    if (idc_count <= 0) {\n        LOG_FATAL_ERR(\"Failed to get IDC count!\");\n        return QCONF_ERR_OTHER;\n    }\n    idcs = (idc_info_t *)malloc(sizeof(idc_info_t) * idc_count);\n    if (NULL == idcs) {\n        LOG_FATAL_ERR(\"Failed to allocate memory for idc_info_t!\");\n        return QCONF_ERR_OTHER;\n    }\n    memset(idcs, 0, sizeof(idc_info_t) * idc_count);\n    ret = qconf_get_idcs(zh, idcs, idc_count);\n    if (QCONF_OK != ret) {\n        LOG_FATAL_ERR(\"Failed to get IDC information!\");\n        free(idcs);\n        return ret;\n    }\n\n    // Get the host information associated with the handle\n    host_len = qconf_get_host_len(zh);\n    if (host_len <= 0) {\n        LOG_FATAL_ERR(\"Failed to get host length!\");\n        free(idcs);\n        return QCONF_ERR_OTHER;\n    }\n    host = (char *)malloc(sizeof(char) * host_len);\n    if (NULL == host) {\n        LOG_FATAL_ERR(\"Failed to allocate memory for host!\");\n        free(idcs);\n        return QCONF", "CodeBleu_score": 47.047794283842244}, {"code": "static int watcher_reconnect_to_zookeeper(zhandle_t *zh){\n\t    // Check if the handle is null\n    if (NULL == zh) {\n        LOG_ERR(\"Failed to reconnect to zookeeper, zh is null!\");\n        return QCONF_ERR_OTHER;\n    }\n\n    // Get and delete the IDC host information associated with the handle\n    string idc, host;\n    int ret = qconf_get_idc_host_from_env(zh, idc, host);\n    if (QCONF_OK != ret) {\n        LOG_ERR(\"Failed to get idc and host from zh!\");\n        return QCONF_ERR_OTHER;\n    }\n    ret = qconf_del_idc_host_from_env(zh);\n    if (QCONF_OK != ret) {\n        LOG_ERR(\"Failed to delete idc and host from zh!\");\n        return QCONF_ERR_OTHER;\n    }\n\n    // Close the old handle\n    zookeeper_close(zh);\n\n    // Deserialize the IDC and host information\n    char *idc_c = NULL;\n    char *host_c = NULL;\n    ret = string_to_char(idc, idc_c);\n    if (QCONF_OK != ret) {\n        LOG_ERR(\"Failed to convert idc to char!\");\n        return QCONF_ERR_OTHER;\n    }\n    ret = string_to_char(host, host_c);\n    if (QCONF_OK != ret) {\n        LOG_ERR(\"Failed to convert host to char!\");\n        free(idc_c);\n        return QCONF_ERR_OTHER;\n    }\n\n    // Initialize a new ZooKeeper handle with this information\n    zh = zookeeper_init(host_c, watcher_process, ZOO_DEFAULT_SESSION_TIMEOUT, 0, NULL, 0);\n    free(idc_c);\n    free(host_c);\n    if (NULL == zh) {\n        LOG_ERR(\"Failed to reconnect to zookeeper!\");\n        return QCONF_ERR_OTHER;\n    }\n\n    // Initialize the environment for the new handle\n   ", "CodeBleu_score": 48.614022365791456}]}
{"instance_id": "0b5ab34e1dd9", "generation_result": [{"code": "static void init_env_for_zk(zhandle_t *zh, const string &idc_host, const string &idc){\n\t    if (NULL == zh) return;\n    // Update the zk_handle_map\n    qconf_update_zk_handle_map(zh, idc_host, idc);\n    // Check the connection state of the Zookeeper handle\n    if (ZOO_CONNECTED_STATE != zoo_state(zh)) {\n        LOG_ERR(\"Zookeeper handle is not connected!\");\n        return;\n    }\n    // Register the current host on the Zookeeper server\n    int ret = zoo_register(zh, idc_host.c_str());\n    if (QCONF_OK != ret) {\n        LOG_ERR(\"Failed to register host:%s to zookeeper!\", idc_host.c_str());\n        return;\n    }\n    // Set a watcher on the notify node\n    ret = zoo_set_watcher(zh, QCONF_NOTIFY_NODE, notify_watcher);\n    if (QCONF_OK != ret) {\n        LOG_ERR(\"Failed to set watcher on notify node!\");\n        return;\n    }\n    // Add the IDC to gray list if the watcher is not set successfully\n    if (QCONF_OK != ret) {\n        qconf_gray_add_idc(idc);\n        LOG_ERR(\"Failed to set watcher on notify node!\");\n    }\n}", "CodeBleu_score": 52.61718950928369}, {"code": "static void init_env_for_zk(zhandle_t *zh, const string &idc_host, const string &idc){\n\t    // Update the zk handle table\n    LOG_INFO(\"Update zk handle table with zh:%p\", zh);\n    zk_handle_map_[idc_host] = zh;\n\n    // Update the zk idc table\n    LOG_INFO(\"Update zk idc table with idc_host:%s\", idc_host.c_str());\n    zk_idc_map_[zh] = idc_host;\n\n    // Check the connection state of the Zookeeper handle\n    LOG_INFO(\"Check the connection state of the Zookeeper handle\");\n    if (!is_connected(zh)) {\n        LOG_ERR(\"Zookeeper handle is not connected, zh:%p\", zh);\n        return;\n    }\n\n    // Register the current host on the Zookeeper server\n    LOG_INFO(\"Register the current host on the Zookeeper server\");\n    int ret = zk_register_host(zh, idc_host);\n    if (QCONF_OK != ret) {\n        LOG_ERR(\"Failed to register host:%s\", idc_host.c_str());\n        return;\n    }\n\n    // Set a watcher on the notify node\n    LOG_INFO(\"Set a watcher on the notify node\");\n    ret = zk_set_watcher(zh, idc_host);\n    if (QCONF_OK != ret) {\n        LOG_ERR(\"Failed to set watcher for host:%s\", idc_host.c_str());\n        // Add the IDC to a gray list\n        LOG_ERR(\"Add the IDC:%s to a gray list\", idc.c_str());\n        gray_idc_set_.insert(idc);\n        return;\n    }\n}", "CodeBleu_score": 50.216300272574934}, {"code": "static void init_env_for_zk(zhandle_t *zh, const string &idc_host, const string &idc){\n\t    if (NULL == zh) return;\n    // Update the internal tables\n    zk_handle_map_[idc_host] = zh;\n    zk_host_idc_map_[idc_host] = idc;\n    // Check the connection state\n    if (ZOO_CONNECTED_STATE != zoo_state(zh)) {\n        LOG_ERR(\"Zookeeper handle for %s is not connected!\", idc_host.c_str());\n        return;\n    }\n    // Register the current host on the Zookeeper server\n    string reg_path(QCONF_ZK_REG_PATH);\n    reg_path += idc_host;\n    string reg_node(QCONF_ZK_REG_NODE);\n    reg_node += idc_host;\n    string reg_val(QCONF_ZK_REG_VAL);\n    reg_val += idc_host;\n    string reg_path_node(reg_path);\n    reg_path_node += \"/\";\n    reg_path_node += reg_node;\n    int ret = zoo_exists(zh, reg_path_node.c_str(), 0, NULL);\n    if (ZOK == ret) {\n        ret = zoo_set(zh, reg_path_node.c_str(), reg_val.c_str(), reg_val.size(), -1);\n        if (ZOK != ret) {\n            LOG_FATAL_ERR(\"Failed to set %s, ret:%d!\", reg_path_node.c_str(), ret);\n            return;\n        }\n    } else if (ZNONODE == ret) {\n        ret = zoo_create(zh, reg_path.c_str(), reg_val.c_str(), reg_val.size(), &ZOO_OPEN_ACL_UNSAFE, 0, NULL, 0);\n        if (ZOK != ret) {\n            LOG_FATAL_ERR(\"Failed to create %s, ret:%d!\", reg_path.c_str(), ret);\n            return;\n        }\n    } else {\n        LOG_FATAL_", "CodeBleu_score": 44.32484366838956}]}
{"instance_id": "19fc5847a7c5", "generation_result": [{"code": "def make_digest_acl_credential(username, password)\n\t\n    credential = b64encode(hashlib.sha1(username + \":\" + password).digest()).decode()\n    return username + \":\" + credential\n\n", "CodeBleu_score": 27.16285931568057}, {"code": "def make_digest_acl_credential(username, password)\n\t\n    hashed_credential = hashlib.sha1(username + ':' + password).digest()\n    return username + ':' + b64encode(hashed_credential).decode('utf-8')\n\n", "CodeBleu_score": 25.07346781654702}, {"code": "def make_digest_acl_credential(username, password)\n\t\n    username_password = \"%s:%s\" % (username, password)\n    hashed = hashlib.sha1(username_password.encode()).digest()\n    encoded = b64encode(hashed).decode()\n    return \"%s:%s\" % (username, encoded)\n\n", "CodeBleu_score": 40.111684280973115}]}
{"instance_id": "4a062391deb0", "generation_result": [{"code": "def holds_lock(self)\n\t\n    if not self.processing_element:\n        return False\n    lock_path = self.processing_element.lock_path\n    self.zk.sync(lock_path)\n    lock_value = self.zk.get(lock_path)[0]\n    return self.processing_element.id == lock_value\n\n", "CodeBleu_score": 35.62219843139116}, {"code": "def holds_lock(self)\n\t\n    if self._processing_element is None:\n        return False\n    lock_path = self._lock_path\n    try:\n        self._client.sync(lock_path)\n        lock_value = self._client.get(lock_path)[0]\n    except NoNodeError:\n        return False\n    return lock_value == self._processing_element.id\n\n", "CodeBleu_score": 42.06218422146859}, {"code": "def holds_lock(self)\n\t\n    if not self.processing_element:\n        return False\n    lock_path = self.processing_element.path + \"/\" + self.processing_element.lock_name\n    try:\n        lock_value = self.client.get(lock_path)[0]\n        return lock_value == self.processing_element.id\n    except NoNodeError:\n        return False\n\n", "CodeBleu_score": 39.412234404616065}]}
{"instance_id": "aaac7523d2b5", "generation_result": [{"code": "def consume(self)\n\t\n    if self.processing_element is None or self.lock is None:\n        return False\n    else:\n        try:\n            self.client.retry(self.client.delete, self.processing_element)\n            self.client.retry(self.client.delete, self.lock)\n        except NoNodeError:\n            return False\n        self.processing_element = None\n        self.lock = None\n        return True\n\n", "CodeBleu_score": 33.34821334729018}, {"code": "def consume(self)\n\t\n    if self.processing is None or not self.is_acquired:\n        return False\n    try:\n        self.client.retry(self._inner_consume)\n        return True\n    except (NoNodeError, ForceRetryError):\n        return False\n\n", "CodeBleu_score": 14.181168718636043}, {"code": "def consume(self)\n\t\n    if self.processing_element is None or not self.is_acquired:\n        return False\n\n    def _consume():\n        try:\n            self.client.delete(self.processing_element, version=-1)\n        except NoNodeError:\n            pass\n        self.processing_element = None\n        self.is_acquired = False\n        return True\n\n    return self.client.retry(_consume)\n\n", "CodeBleu_score": 28.01884286719229}]}
{"instance_id": "bed0c998ac4c", "generation_result": [{"code": "def _read_socket(self, read_timeout)\n\t\n    if not self.connected:\n        raise ConnectionDropped(\"Connection dropped\")\n\n    # Read the length\n    length_buffer = self._read_buffer[:4]\n    bytes_read = self._socket.recv_into(length_buffer, 4)\n    if bytes_read == 0:\n        raise ConnectionDropped(\"Connection dropped\")\n    if bytes_read < 4:\n        return\n\n    # Read the rest of the message\n    length, = int_struct.unpack(length_buffer)\n    if length < 17:\n        raise Exception(\"Too short\")\n    message_buffer = self._read_buffer[4:length]\n    bytes_read = self._socket.recv_into(message_buffer, length - 4)\n    if bytes_read == 0:\n        raise ConnectionDropped(\"Connection dropped\")\n    if bytes_read < length - 4:\n        return\n\n    # Process the message\n    header = ReplyHeader()\n    header.deserialize(length_buffer + message_buffer[:16])\n    if header.xid == PING_XID:\n        self.last_zxid = header.zxid\n        self.last_response_time = time.time()\n        self.outstanding_pings -= 1\n        self.logger.log(BLATHER, \"Received ping response\")\n        return\n    elif header.xid == AUTH_XID:\n        if header.err == 0:\n            self.auth_data = message_buffer[16:]\n            self.logger.log(BLATHER, \"Authentication successful\")\n        else:\n            self.auth_data = None\n            self.logger.log(BLATHER, \"Authentication failed\")\n        self.auth_event.set()\n        return\n    elif header.xid == WATCH_XID:\n        self._process_watch_event(header, message_buffer[16:])\n        return\n    elif header.xid == SET_WATCHES_XID:\n        self.logger.log(BLATHER, \"Watches re-established\")\n        self.last_zxid = header.zxid", "CodeBleu_score": 40.58802677328573}, {"code": "def _read_socket(self, read_timeout)\n\t\n    if self.socket is None:\n        raise ConnectionDropped(\"Socket is None\")\n\n    if self.socket.gettimeout() != read_timeout:\n        self.socket.settimeout(read_timeout)\n\n    try:\n        buffer = self.socket.recv(4)\n    except socket.timeout:\n        raise ConnectionDropped(\"Socket timed out\")\n    except ssl.SSLError as err:\n        if err.errno == ssl.SSL_ERROR_WANT_READ:\n            raise ConnectionDropped(\"Socket timed out\")\n        else:\n            raise\n    except socket.error as err:\n        if err.args[0] == errno.EBADF:\n            raise ConnectionDropped(\"Socket is closed\")\n        else:\n            raise\n\n    if not buffer:\n        raise ConnectionDropped(\"Socket closed\")\n\n    length = int_struct.unpack(buffer)[0]\n    if length < 4:\n        raise ValueError(\"Invalid length: %d\" % length)\n\n    buffer = self.socket.recv(length - 4)\n    if not buffer:\n        raise ConnectionDropped(\"Socket closed\")\n\n    header = ReplyHeader()\n    header.deserialize(buffer)\n\n    if header.xid == PING_XID:\n        self.log_debug(\"Received ping response\")\n        self.outstanding_pings.clear()\n    elif header.xid == AUTH_XID:\n        self.auth_in_progress.clear()\n        if header.err == 0:\n            self.log_debug(\"Authentication successful\")\n        else:\n            self.log_debug(\"Authentication failed: %s\", header.zerror)\n            self.auth_failed = True\n    elif header.xid == WATCH_XID:\n        self.process_watch_event(buffer)\n    elif header.xid == SESSION_XID:\n        self.session_id = header.zxid\n        self.session_passwd = header.passwd\n        self.state = KeeperState.CONNECTED\n        self.log_debug(\"Session established: %s\", self.session_id)", "CodeBleu_score": 39.211278541886465}, {"code": "def _read_socket(self, read_timeout)\n\t\n    if not self._socket:\n        raise ConnectionDropped(\"No open connection\")\n    try:\n        # Read the length\n        length_bytes = self._socket.recv(4)\n        if not length_bytes:\n            raise socket.error(\"Connection closed\")\n        length = int_struct.unpack(length_bytes)[0]\n        if length < 0:\n            raise socket.error(\"Negative length\")\n\n        # Read the rest\n        buff = bytearray(length)\n        view = memoryview(buff)\n        while length:\n            try:\n                nbytes = self._socket.recv_into(view, length, 0)\n            except socket.error as e:\n                if e.args[0] == errno.EINTR:\n                    continue\n                raise\n            if not nbytes:\n                raise socket.error(\"Connection closed\")\n            view = view[nbytes:]  # slicing views is cheap\n            length -= nbytes\n\n        # Process the message\n        header = ReplyHeader()\n        header.deserialize(buff, 0)\n        if header.xid == PING_XID:\n            self._logger.log(BLATHER, \"Received ping response\")\n            self._outstanding_pings.clear()\n        elif header.xid == AUTH_XID:\n            if header.err == 0:\n                self._logger.log(BLATHER, \"Authentication successful\")\n                self._auth_data = None\n            else:\n                self._logger.log(BLATHER, \"Authentication unsuccessful\")\n                self._auth_data = None\n                raise AuthFailedError(header.err)\n        elif header.xid == WATCH_XID:\n            event = WatchedEvent.from_header(header, buff, read_timeout)\n            self._event_queue.put(event)\n        elif header.xid == SET_WATCHES_XID:\n            self._logger.log(BLATHER, \"Watches re-established\")\n        else:\n            if header.xid in self._pending:\n                callback = self._pending[header.xid]\n                callback.response = buff", "CodeBleu_score": 40.26726514481237}]}
{"instance_id": "b10e2c2c410b", "generation_result": [{"code": "def zk_loop(self)\n\t\n    self.logger.log(BLATHER, \"starting zk event loop\")\n    self.connection_stopped.clear()\n    try:\n        self.connect()\n    except Exception as exc:\n        self.logger.warning(\"Could not connect to Zookeeper, \"\n                            \"retrying in %s seconds: %s\",\n                            self.retry.delay(self.retry_attempts), exc)\n    finally:\n        self.connection_stopped.set()\n        self.state = KeeperState.CLOSED\n        self.event_object.set()\n        self.event_object = None\n        self.session_callback(KeeperState.CLOSED)\n        self.logger.log(BLATHER, \"stopped zk event loop\")\n\n", "CodeBleu_score": 48.456401294063255}, {"code": "def zk_loop(self)\n\t\n    self.logger.log(BLATHER, \"starting zk event loop\")\n    self.connection_stopped.clear()\n    try:\n        self._connect()\n    except Exception as exc:\n        self.logger.warning(\n            \"Exception while starting connection to Zookeeper: %s\", exc\n        )\n    finally:\n        self.connection_stopped.set()\n        self._session_callback(KeeperState.CLOSED)\n        self.logger.log(BLATHER, \"stopped zk event loop\")\n\n", "CodeBleu_score": 41.02149693262598}, {"code": "def zk_loop(self)\n\t\n\n    self.logger.log(BLATHER, \"starting event thread\")\n    self.connection_stopped.clear()\n    try:\n        self._connect()\n    except Exception as exc:\n        self.logger.warning(\"Connection attempt unsuccessful: %s\", exc)\n    self.connection_stopped.set()\n    self.logger.log(BLATHER, \"stopping event thread\")\n    self._trigger_session_event(KeeperState.CLOSED)\n\n", "CodeBleu_score": 37.17016565723602}]}
{"instance_id": "42b3d26a3540", "generation_result": [{"code": "def _partitioner(self, identifier, members, partitions)\n\t\n    members.sort()\n    partitions.sort()\n    index = members.index(identifier)\n    return partitions[index::len(members)]\n\n", "CodeBleu_score": 33.6805163744097}, {"code": "def _partitioner(self, identifier, members, partitions)\n\t\n    members = sorted(members)\n    partitions = sorted(partitions)\n    index = members.index(identifier)\n    for i in range(index, len(members)):\n        yield partitions[i]\n\n", "CodeBleu_score": 28.51324648911114}, {"code": "def _partitioner(self, identifier, members, partitions)\n\t\n    sorted_partitions = sorted(partitions)\n    sorted_members = sorted(members)\n    identifier_index = sorted_members.index(identifier)\n    partitions_per_worker = len(partitions) // len(members)\n    start = identifier_index * partitions_per_worker\n    end = start + partitions_per_worker\n    return sorted_partitions[start:end]\n\n", "CodeBleu_score": 26.819136244139507}]}
{"instance_id": "738974d4e9c0", "generation_result": [{"code": "def leave(self)\n\t\n    self.participating = False\n    try:\n        self._leave()\n    except Exception as e:\n        self.logger.warning(\n            \"Exception while leaving barrier: %s. Best-effort cleanup will be performed.\",\n            e,\n        )\n        self._cleanup()\n        raise\n\n", "CodeBleu_score": 43.38103181514214}, {"code": "def leave(self)\n\t\n    try:\n        self.zk.retry(self._leave)\n    except KazooException:\n        self.logger.warning(\"Failed to leave the barrier. Cleaning up...\")\n        try:\n            self.zk.delete(self.path)\n        except KazooException:\n            pass\n    self.participating = False\n\n", "CodeBleu_score": 46.366238164023095}, {"code": "def leave(self)\n\t\n    self.logger.info('Leaving barrier')\n    try:\n        self.zk.delete(self.path)\n    except KazooException:\n        self.logger.error('Failed to leave barrier')\n        self.logger.debug('Cleaning up')\n        try:\n            self.zk.delete(self.path)\n        except KazooException:\n            self.logger.error('Failed to clean up')\n    self.participating = False\n\n", "CodeBleu_score": 42.83461179082262}]}
{"instance_id": "a321fef7d100", "generation_result": [{"code": "public Result start(){\n\t    if (HFtpService.getStatus()) {\n        return new Result(400, \"HFtpService is running\");\n    }\n    try {\n        HFtpService.start();\n        return new Result(200, \"HFtpService start success\");\n    } catch (Exception e) {\n        return new Result(400, e.getMessage());\n    }\n}", "CodeBleu_score": 27.28661437227617}, {"code": "public Result start(){\n\t    Map<String, Object> data = new HashMap<>();\n    try {\n        if (!hftpService.isRunning()) {\n            hftpService.start();\n        }\n        data.put(\"status\", hftpService.isRunning());\n        return Result.success(data);\n    } catch (Exception e) {\n        return Result.error(e);\n    }\n}", "CodeBleu_score": 41.38942302724779}, {"code": "public Result start(){\n\t    try {\n        if (!hFtpService.isRunning()) {\n            hFtpService.start();\n        }\n        return Result.success();\n    } catch (Exception e) {\n        LOG.error(e.getMessage());\n        return Result.error(e.getMessage());\n    }\n}", "CodeBleu_score": 39.64257836197233}]}
{"instance_id": "24b088689114", "generation_result": [{"code": "public Result stop(){\n\t    try {\n        if (hftpService.isRunning()) {\n            hftpService.stop();\n            return new Result(\"Success\", \"FTP Server is stopped\");\n        }\n        return new Result(\"Success\", \"FTP Server is not running\");\n    } catch (Exception e) {\n        logger.error(e);\n        return new Result(\"Failure\", e.getMessage());\n    }\n}", "CodeBleu_score": 31.5359444457186}, {"code": "public Result stop(){\n\t    try {\n        if (ftpService.isRunning()) {\n            ftpService.stop();\n            return new Result(true, \"FTP server stopped\");\n        } else {\n            return new Result(false, \"FTP server is not running\");\n        }\n    } catch (Exception e) {\n        logger.error(e);\n        return new Result(false, e.getMessage());\n    }\n}", "CodeBleu_score": 41.18166718840564}, {"code": "public Result stop(){\n\t    try {\n        if (ftpServer.isRunning()) {\n            ftpServer.stop();\n            return new Result(true, \"FTP server stopped successfully\");\n        } else {\n            return new Result(false, \"FTP server is not running\");\n        }\n    } catch (Exception e) {\n        logger.error(\"FTP server could not be stopped\", e);\n        return new Result(false, \"FTP server could not be stopped\");\n    }\n}", "CodeBleu_score": 36.71278271691826}]}
{"instance_id": "af0884ffda66", "generation_result": [{"code": "public AuthorizationRequest authorize(AuthorizationRequest request){\n\t    // If no authorities are available, return null\n    if (authorities == null || authorities.size() == 0) {\n        return null;\n    }\n\n    // Iterate through each authority to see if they can authorize the request\n    for (Authority authority : authorities) {\n        // If authorization fails at any point, return null\n        if (!authority.canAuthorize(request)) {\n            return null;\n        }\n    }\n\n    // Iterate through each authority to see if they can authorize the request\n    for (Authority authority : authorities) {\n        // If at least one authority successfully processes the request, return the updated request\n        if (authority.authorize(request)) {\n            return request;\n        }\n    }\n\n    // If no authorities successfully processed the request, return null\n    return null;\n}", "CodeBleu_score": 36.91561154761465}, {"code": "public AuthorizationRequest authorize(AuthorizationRequest request){\n\t    if (authorities == null) {\n        return null;\n    }\n\n    AuthorizationRequest updatedRequest = null;\n    for (Authority authority : authorities) {\n        updatedRequest = authority.authorize(request);\n        if (updatedRequest == null) {\n            break;\n        }\n    }\n\n    return updatedRequest;\n}", "CodeBleu_score": 35.44770330293817}, {"code": "public AuthorizationRequest authorize(AuthorizationRequest request){\n\t    List<Authority> authorities = getAuthorities();\n    if (authorities.isEmpty()) {\n        return null;\n    }\n    for (Authority authority : authorities) {\n        try {\n            request = authority.authorize(request);\n        } catch (Exception ex) {\n            Logger.getLogger(getClass()).warn(\"Exception during authorization\", ex);\n            return null;\n        }\n        if (request == null) {\n            return null;\n        }\n    }\n    return request;\n}", "CodeBleu_score": 50.2330209643742}]}
{"instance_id": "920d28a0fe76", "generation_result": [{"code": "public boolean mkdir(){\n\t    boolean success = false;\n    try {\n        FileSystem fileSystem = FileSystem.get(getHdfsUser().getConfiguration());\n        Path fullPath = new Path(getAbsolutePath());\n        success = fileSystem.mkdirs(fullPath);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return success;\n}", "CodeBleu_score": 46.546263394289355}, {"code": "public boolean mkdir(){\n\t    try {\n        fileSystem.mkdirs(fullPath);\n        return true;\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 55.40944697904687}, {"code": "public boolean mkdir(){\n\t    boolean success = false;\n    try {\n        FileSystem fs = FileSystem.get(conf);\n        fs.mkdirs(fullPath);\n        success = true;\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return success;\n}", "CodeBleu_score": 56.25859742472811}]}
{"instance_id": "a2b04232d387", "generation_result": [{"code": "public boolean delete(){\n\t    try {\n        FileSystem fs = getFileSystem();\n        fs.delete(fullPath, true);\n        return true;\n    } catch (IOException ex) {\n        LoggerFactory.getLogger(HdfsFile.class).error(\"IOException: {}\", ex);\n        return false;\n    }\n}", "CodeBleu_score": 49.75755340644534}, {"code": "public boolean delete(){\n\t    boolean success = false;\n    try {\n        FileSystem fs = getHdfsFileSystem();\n        Path fullPath = new Path(hdfsPath);\n        success = fs.delete(fullPath, true);\n    } catch (IOException ex) {\n        ex.printStackTrace();\n    }\n    return success;\n}", "CodeBleu_score": 42.39592701379975}, {"code": "public boolean delete(){\n\t    try {\n        FileSystem fs = FileSystem.get(conf);\n        fs.delete(new Path(fullPath), true);\n        return true;\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 64.78442384000007}]}
{"instance_id": "3407087c9af6", "generation_result": [{"code": "public boolean move(FtpFile ftpFile){\n\t    boolean retVal = true;\n    String oldPath = ftpFile.getAbsolutePath();\n    String newPath = ftpFile.getParentFile().getAbsolutePath() + \"/\" + ftpFile.getName();\n    Path oldFile = new Path(oldPath);\n    Path newFile = new Path(newPath);\n    FileSystem fs = getFileSystem((HdfsUser) ftpFile.getUser());\n    try {\n        fs.rename(oldFile, newFile);\n    } catch (IOException e) {\n        e.printStackTrace();\n        retVal = false;\n    }\n    return retVal;\n}", "CodeBleu_score": 40.79748853932301}, {"code": "public boolean move(FtpFile ftpFile){\n\t    boolean success = false;\n    try {\n        FileSystem fs = ((HdfsUser)ftpFile.getUser()).getFileSystem();\n        Path parentPath = new Path(ftpFile.getParentFile().getAbsolutePath());\n        Path newPath = new Path(parentPath, ftpFile.getName());\n        fs.rename(new Path(ftpFile.getAbsolutePath()), newPath);\n        success = true;\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return success;\n}", "CodeBleu_score": 43.78115785888761}, {"code": "public boolean move(FtpFile ftpFile){\n\t    FileSystem fs = null;\n    try {\n        fs = getFileSystem((HdfsUser) ftpFile.getUser());\n        Path path = new Path(ftpFile.getAbsolutePath());\n        Path newPath = new Path(ftpFile.getParentFile().getAbsolutePath() + \"/\" + ftpFile.getName());\n        fs.rename(path, newPath);\n        return true;\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 53.481217248748216}]}
{"instance_id": "91227000a139", "generation_result": [{"code": "public List<FtpFile> listFiles(){\n\t    Logger log = LoggerFactory.getLogger(HdfsFile.class);\n    User user = getUser();\n    HdfsUser hdfsUser = (HdfsUser) user;\n    FileSystem fs = hdfsUser.getHdfsFileSystem();\n    Path baseDir = hdfsUser.getBaseDir();\n    Path path = getAbsolutePath();\n    FileStatus[] fileStatuses;\n    try {\n        fileStatuses = fs.listStatus(path);\n    } catch (IOException e) {\n        log.error(\"IOException\", e);\n        return null;\n    }\n    if (fileStatuses == null) {\n        return Collections.emptyList();\n    }\n    List<FtpFile> files = Arrays.asList(new HdfsFile[fileStatuses.length]);\n    for (int i = 0; i < fileStatuses.length; i++) {\n        files.set(i, new HdfsFile(fileStatuses[i], baseDir, fs, hdfsUser));\n    }\n    return files;\n}", "CodeBleu_score": 42.49731799753897}, {"code": "public List<FtpFile> listFiles(){\n\t    Logger log = LoggerFactory.getLogger(HdfsFile.class);\n    User user = getUser();\n    String dir = getAbsolutePath();\n    HdfsUser hdfsUser = (HdfsUser) user;\n    FileSystem fs = hdfsUser.getFileSystem();\n    Path path = new Path(dir);\n    FileStatus[] status = null;\n    try {\n        status = fs.listStatus(path);\n    } catch (IOException e) {\n        log.error(\"Could not list files in directory \" + dir, e);\n        return null;\n    }\n    List<FtpFile> files = Arrays.asList(new HdfsFile[status.length]);\n    for (int i = 0; i < status.length; i++) {\n        files.set(i, new HdfsFile(status[i], hdfsUser));\n    }\n    return Collections.unmodifiableList(files);\n}", "CodeBleu_score": 44.31577101523723}, {"code": "public List<FtpFile> listFiles(){\n\t    try {\n        FileSystem fs = getHdfs();\n        FileStatus[] files = fs.listStatus(new Path(getAbsolutePath()));\n        List<FtpFile> ftpFiles = Arrays.asList(files).stream().map(file -> new HdfsFile(file.getPath().toString(), this, fs)).collect(java.util.stream.Collectors.toList());\n        return Collections.unmodifiableList(ftpFiles);\n    } catch (IOException ex) {\n        LOG.error(ex.getMessage(), ex);\n        return null;\n    }\n}", "CodeBleu_score": 33.08871254229796}]}
{"instance_id": "aec4623134b5", "generation_result": [{"code": "public void configure(){\n\t    this.configured = true;\n    this.userData = new BaseProperties();\n    if (userDataFile.exists()) {\n        try {\n            userData.load(new FileInputStream(userDataFile));\n        } catch (IOException ex) {\n            throw new FtpServerConfigurationException(\"Failed to load user data file: \" + userDataFile.getAbsolutePath(), ex);\n        }\n    }\n    convertDeprecatedProperties();\n}", "CodeBleu_score": 36.84557981937088}, {"code": "public void configure(){\n\t    if (configured) {\n        return;\n    }\n    configured = true;\n\n    File file = new File(userDataFilePath);\n    if (file.exists()) {\n        try {\n            FileInputStream in = new FileInputStream(file);\n            userData.load(in);\n            in.close();\n        } catch (IOException ex) {\n            throw new FtpServerConfigurationException(\n                    \"Failed to load user data file: \" + file.getAbsolutePath(),\n                    ex);\n        }\n    }\n\n    // convert any deprecated property names\n    convertDeprecatedProperty(\"adminName\", \"admin\");\n    convertDeprecatedProperty(\"adminPassword\", \"admin\");\n    convertDeprecatedProperty(\"adminEnabled\", \"admin\");\n    convertDeprecatedProperty(\"anonymousEnabled\", \"anonymous\");\n    convertDeprecatedProperty(\"maxAnonymousLogins\", \"anonymous\");\n    convertDeprecatedProperty(\"maxLoginFailures\", \"login\");\n    convertDeprecatedProperty(\"maxLoginPerIP\", \"login\");\n    convertDeprecatedProperty(\"maxThreads\", \"connection\");\n    convertDeprecatedProperty(\"timeout\", \"connection\");\n    convertDeprecatedProperty(\"maxIdleTime\", \"connection\");\n    convertDeprecatedProperty(\"port\", \"connection\");\n    convertDeprecatedProperty(\"passivePorts\", \"connection\");\n    convertDeprecatedProperty(\"implicitSsl\", \"connection\");\n    convertDeprecatedProperty(\"sslControlChannel\", \"connection\");\n    convertDeprecatedProperty(\"sslEnabled\", \"connection\");\n    convertDeprecatedProperty(\"sslProtocols\", \"connection\");\n    convertDeprecatedProperty(\"sslCipherSuites\", \"connection\");\n    convertDeprecatedProperty(\"sslKeyAlias\", \"connection\");\n    convertDeprecatedProperty(\"sslKeyPassword\", \"connection\");\n    convertDeprecatedProperty(\"sslKeystoreAlgorithm\", \"connection\");\n    convertDeprecatedProperty(\"sslKeystoreFile\", \"connection\");\n    convertDeprecatedProperty(\"sslKeystoreKeyPassword\", \"connection\");\n    convertDeprecatedProperty(\"sslKeystorePassword\", \"connection\");\n    convertDeprecatedProperty(\"sslKeystoreType\", \"connection\");\n    convertDep", "CodeBleu_score": 37.13853146114954}, {"code": "public void configure(){\n\t    if (configured) {\n        throw new IllegalStateException(\"Already configured\");\n    }\n    configured = true;\n\n    if (userDataFile == null) {\n        throw new FtpServerConfigurationException(\"User data file not set\");\n    }\n\n    if (userDataFile.exists()) {\n        if (userDataFile.isDirectory()) {\n            throw new FtpServerConfigurationException(\"User data file \" + userDataFile + \" is a directory\");\n        }\n\n        if (!userDataFile.canRead()) {\n            throw new FtpServerConfigurationException(\"User data file \" + userDataFile + \" is not readable\");\n        }\n\n        if (!userDataFile.canWrite()) {\n            throw new FtpServerConfigurationException(\"User data file \" + userDataFile + \" is not writable\");\n        }\n\n        FileInputStream in = null;\n        try {\n            in = new FileInputStream(userDataFile);\n            userData.load(in);\n        } catch (IOException ex) {\n            throw new FtpServerConfigurationException(\"Failed to load user data file \" + userDataFile, ex);\n        } finally {\n            IoUtils.close(in);\n        }\n    }\n\n    convertDeprecatedProperties();\n}", "CodeBleu_score": 44.379802482545315}]}
{"instance_id": "b5a2587f14d0", "generation_result": [{"code": "private void saveUserData() throws FtpException{\n\t    File userDataFile = new File(userDataFilePath);\n    File parentDir = userDataFile.getParentFile();\n\n    if (!parentDir.exists()) {\n        if (!parentDir.mkdirs()) {\n            throw new FtpServerConfigurationException(\"Failed to create user data directory: \" + parentDir.getAbsolutePath());\n        }\n    }\n\n    FileOutputStream fos = null;\n    try {\n        fos = new FileOutputStream(userDataFile);\n        BaseProperties.save(userData, fos);\n    } catch (IOException e) {\n        LOG.error(\"Failed to save user data\", e);\n        throw new FtpException(\"Failed to save user data\", e);\n    } finally {\n        IoUtils.close(fos);\n    }\n}", "CodeBleu_score": 52.40929020026807}, {"code": "private void saveUserData() throws FtpException{\n\t    File userDataFile = new File(userDataFilePath);\n    File userDataDir = userDataFile.getParentFile();\n    if (!userDataDir.exists()) {\n        if (!userDataDir.mkdirs()) {\n            throw new FtpServerConfigurationException(\"Cannot create user data directory: \" + userDataDir.getAbsolutePath());\n        }\n    }\n    FileOutputStream fos = null;\n    try {\n        fos = new FileOutputStream(userDataFile);\n        saveUserData(fos);\n    } catch (IOException e) {\n        LOG.error(\"Failed to save user data\", e);\n        throw new FtpException(\"Failed to save user data\", e);\n    } finally {\n        IoUtils.close(fos);\n    }\n}", "CodeBleu_score": 55.29798216903288}, {"code": "private void saveUserData() throws FtpException{\n\t    File userDataFile = new File(userDataFilePath);\n    File parentDir = userDataFile.getParentFile();\n    if (!parentDir.exists()) {\n        if (!parentDir.mkdirs()) {\n            throw new FtpServerConfigurationException(\"Failed to create parent directory for user data file: \" + userDataFilePath);\n        }\n    }\n\n    FileOutputStream fos = null;\n    try {\n        fos = new FileOutputStream(userDataFile);\n        saveUserData(fos);\n    } catch (IOException e) {\n        LOG.error(\"Failed to save user data to file: \" + userDataFilePath, e);\n        throw new FtpException(\"Failed to save user data to file: \" + userDataFilePath, e);\n    } finally {\n        IoUtils.close(fos);\n    }\n}", "CodeBleu_score": 52.395858601173394}]}
{"instance_id": "5cf2989cf513", "generation_result": [{"code": "public Result delete(@PathVariable(value = \"user\") String user){\n\t    HdfsUserManager hdfsUserManager = new HdfsUserManager();\n    hdfsUserManager.setFile(new File(\"users.properties\"));\n    try {\n        hdfsUserManager.delete(user);\n        return new Result(true, \"Successfully deleted user \" + user);\n    } catch (Exception e) {\n        Logger.getLogger(FtpController.class.getName()).error(\"Error deleting user \" + user, e);\n        return new Result(false, \"Error deleting user \" + user);\n    }\n}", "CodeBleu_score": 57.75410864587115}, {"code": "public Result delete(@PathVariable(value = \"user\") String user){\n\t\n    HdfsUserManager hdfsUserManager = new HdfsUserManager();\n    hdfsUserManager.setFile(new File(\"users.properties\"));\n\n    try {\n        hdfsUserManager.delete(user);\n        return new Result(true, \"Delete Successful\");\n    } catch (Exception e) {\n        logger.error(e.getMessage());\n        return new Result(false, \"Delete Failed\");\n    }\n}", "CodeBleu_score": 50.06970821339378}, {"code": "public Result delete(@PathVariable(value = \"user\") String user){\n\t\n    HdfsUserManager userManager = new HdfsUserManager();\n    userManager.setFile(new File(\"users.properties\"));\n\n    try {\n        userManager.delete(user);\n        return new Result(\"Successfully deleted user \" + user, true);\n    } catch (Exception e) {\n        Logger.getLogger(FtpController.class).error(\"Failed to delete user \" + user, e);\n        return new Result(\"Failed to delete user \" + user, false);\n    }\n}", "CodeBleu_score": 50.279688505465536}]}
{"instance_id": "ce383a9a6497", "generation_result": [{"code": "public FSDataInputStream open(Path path, int bufferSize) throws IOException{\n\t    logger.debug(\"open({}, {})\", path, bufferSize);\n    Path qualifiedPath = makeQualified(path);\n    logger.debug(\"open qualifiedPath: {}\", qualifiedPath);\n    return new FSDataInputStream(new BufferedFSInputStream(new SeaweedInputStream(qualifiedPath), bufferSize));\n}", "CodeBleu_score": 22.08199061246199}, {"code": "public FSDataInputStream open(Path path, int bufferSize) throws IOException{\n\t    return open(path, bufferSize, null);\n}", "CodeBleu_score": 8.694814627531294}, {"code": "public FSDataInputStream open(Path path, int bufferSize) throws IOException{\n\t\n    Path absolutePath = makeAbsolute(path);\n    LOG.debug(\"open: path: {} bufferSize: {}\", absolutePath, bufferSize);\n\n    // Check if the path exists.\n    if (!exists(absolutePath)) {\n        throw new FileNotFoundException(\"File \" + absolutePath + \" not found.\");\n    }\n\n    // Check if the path is a directory.\n    if (getFileStatus(absolutePath).isDirectory()) {\n        throw new FileNotFoundException(\"File \" + absolutePath + \" is a directory.\");\n    }\n\n    // Open the file and return the input stream.\n    return new FSDataInputStream(new BufferedFSInputStream(new SeaweedInputStream(absolutePath), bufferSize));\n}", "CodeBleu_score": 26.858232534325676}]}
{"instance_id": "f0fc12072c02", "generation_result": [{"code": "public boolean rename(Path src, Path dst) throws IOException{\n\t    LOG.debug(\"rename source {} to destination {}\", src, dst);\n    if (src.isRoot()) {\n        return false;\n    }\n    if (src.equals(dst)) {\n        return true;\n    }\n    final Path absSrc = fixRelativePart(src);\n    final Path absDst = fixRelativePart(dst);\n    Path parentDst = absDst.getParent();\n    FileStatus dstFileStatus;\n    try {\n        dstFileStatus = getFileStatus(absDst);\n    } catch (FileNotFoundException e) {\n        dstFileStatus = null;\n    }\n    if (dstFileStatus != null) {\n        if (dstFileStatus.isDirectory()) {\n            absDst = new Path(absDst, absSrc.getName());\n            parentDst = absDst;\n        } else {\n            throw new FileAlreadyExistsException(String.format(\n                    \"Rename destination %s is a file\", absDst));\n        }\n    }\n    FileStatus srcStatus = getFileStatus(absSrc);\n    if (srcStatus.isDirectory()) {\n        FileStatus dstStatus = null;\n        try {\n            dstStatus = getFileStatus(absDst);\n        } catch (FileNotFoundException e) {\n            // OK\n        }\n        if (dstStatus != null && !dstStatus.isDirectory()) {\n            throw new IOException(String.format(\n                    \"Failed to rename %s to %s, destination is a file\", src,\n                    dst));\n        }\n    }\n    Path parentDstStatus = getFileStatus(parentDst).getPath();\n    if (!src.getParent().equals(parentDstStatus)) {\n        throw new IOException(String.format(\n                \"Failed to rename %s to %s, source and destination are in different directories\",\n                src, dst));\n    }\n    store.rename(src, dst);\n    return true;\n}", "CodeBleu_score": 53.831160374637456}, {"code": "public boolean rename(Path src, Path dst) throws IOException{\n\t\n    // TODO: check if the src and dst are in the same directory\n    // TODO: check if the src and dst are the same\n    // TODO: check if the dst parent is a directory\n\n    // TODO: check if the src parent is a directory\n\n    // TODO: check if the src is a directory\n\n    // TODO: check if the dst is a directory\n\n    // TODO: check if the src exists\n\n    // TODO: check if the dst exists\n\n    // TODO: check if the dst is a directory\n\n    // TODO: check if the dst parent is a directory\n\n    // TODO: check if the src parent is a directory\n\n    // TODO: check if the src and dst are the same\n\n    // TODO: check if the src is the root\n\n    // TODO: check if the dst is the root\n\n    // TODO: check if the src is a directory\n\n    // TODO: check if the dst is a directory\n\n    // TODO: check if the src exists\n\n    // TODO: check if the dst exists\n\n    // TODO: check if the dst is a directory\n\n    // TODO: check if the dst parent is a directory\n\n    // TODO: check if the src parent is a directory\n\n    // TODO: check if the src and dst are the same\n\n    // TODO: check if the src is the root\n\n    // TODO: check if the dst is the root\n\n    // TODO: check if the src is a directory\n\n    // TODO: check if the dst is a directory\n\n    // TODO: check if the src exists\n\n    // TODO: check if the dst exists\n\n    // TODO: check if the dst is a directory\n\n    // TODO: check if the dst parent is a directory\n\n    // TODO: check if the src parent is a directory\n\n    // TODO: check if the src and dst are the same\n\n    // TODO: check if the src is the root\n\n    // TODO: check if the dst is the root\n\n    // TODO: check if the src is a directory\n\n    // TODO: check if the dst is a directory\n\n    // TODO: check if the src exists\n\n    // TODO: check if the dst exists\n\n    // TODO: check if the dst is a directory\n\n    //", "CodeBleu_score": 3.957500776646815}, {"code": "public boolean rename(Path src, Path dst) throws IOException{\n\t    if (src.isRoot()) {\n        return false;\n    }\n    if (src.equals(dst)) {\n        return true;\n    }\n    Path absSrc = fixRelativePart(src);\n    Path absDst = fixRelativePart(dst);\n    String srcParent = src.getParent().toString();\n    String srcName = src.getName();\n    String dstParent = dst.getParent().toString();\n    String dstName = dst.getName();\n    FileStatus dstStatus = null;\n    try {\n        dstStatus = getFileStatus(dst);\n    } catch (FileNotFoundException e) {\n        // ignore\n    }\n    if (dstStatus != null) {\n        if (dstStatus.isDirectory()) {\n            if (!srcName.isEmpty()) {\n                dstParent = dst.toString();\n                dstName = srcName;\n            } else {\n                throw new IOException(\"cannot overwrite non empty destination directory \" + dst + \" with \" + src);\n            }\n        } else {\n            throw new IOException(\"cannot overwrite non directory \" + dst + \" with \" + src);\n        }\n    }\n    if (srcParent.equals(dstParent) && srcName.equals(dstName)) {\n        return true;\n    }\n    if (!srcParent.equals(dstParent)) {\n        rename(srcParent, srcName, dstParent, dstName, false);\n    } else {\n        rename(srcParent, srcName, dstParent, dstName, true);\n    }\n    return true;\n}", "CodeBleu_score": 49.153724580582065}]}
{"instance_id": "5104c071af46", "generation_result": [{"code": "public boolean hasCapability(String capability){\n\t    return capability.toLowerCase(Locale.ENGLISH).equals(\"hsync\") || capability.toLowerCase(Locale.ENGLISH).equals(\"hflush\");\n}", "CodeBleu_score": 41.15343444291876}, {"code": "public boolean hasCapability(String capability){\n\t    switch (capability.toLowerCase(Locale.ENGLISH)) {\n        case StreamCapabilities.HSYNC:\n        case StreamCapabilities.HFLUSH:\n            return supportFlush;\n        default:\n            return false;\n    }\n}", "CodeBleu_score": 91.40738988303885}, {"code": "public boolean hasCapability(String capability){\n\t    return capability.toLowerCase(Locale.ENGLISH).equals(\"hsync\") ||\n            capability.toLowerCase(Locale.ENGLISH).equals(\"hflush\");\n}", "CodeBleu_score": 42.79837388552728}]}
{"instance_id": "6989c860c79b", "generation_result": [{"code": "private synchronized void flushWrittenBytesToServiceInternal(final long offset) throws IOException{\n\t    try {\n        // If the last flush offset is less than the current offset, flush the data to the service.\n        if (this.lastFlushOffset < offset) {\n            // The buffer contains the data from the last flush offset to the current offset.\n            final ByteBuffer buffer = this.data.slice();\n            // Set the position and limit of the buffer to the current offset.\n            buffer.position((int) (this.lastFlushOffset - this.data.position()));\n            buffer.limit((int) (offset - this.data.position()));\n            // Write the data to the service.\n            this.writeToServiceInternal(buffer);\n            // Update the last flush offset.\n            this.lastFlushOffset = offset;\n        }\n    } catch (final IOException e) {\n        // If an exception occurs, throw an exception.\n        throw new IOException(\"An error occurred while flushing the data to the service.\", e);\n    }\n}", "CodeBleu_score": 39.264648553508515}, {"code": "private synchronized void flushWrittenBytesToServiceInternal(final long offset) throws IOException{\n\t    try {\n        if (offset == this.lastFlushOffset) {\n            return;\n        }\n        final long len = this.lastOffset - offset;\n        if (len == 0) {\n            return;\n        }\n        final int bufLen = (int) Math.min(len, this.bufferSize);\n        final ByteBuffer buf = ByteBuffer.allocate(bufLen);\n        this.buffer.get(offset, buf.array(), 0, bufLen);\n        final Future<Void> future = this.executorService.submit(new Callable<Void>() {\n            @Override\n            public Void call() throws IOException {\n                try {\n                    final OutputStream out = AbstractFilerOutputStream.this.outputStream;\n                    out.write(buf.array(), 0, bufLen);\n                    out.flush();\n                    return null;\n                } catch (final IOException e) {\n                    throw e;\n                } catch (final Exception e) {\n                    throw new IOException(e);\n                }\n            }\n        });\n        try {\n            future.get();\n        } catch (final ExecutionException e) {\n            throw new IOException(e.getCause());\n        }\n        this.lastFlushOffset = offset + bufLen;\n    } catch (final InterruptedException e) {\n        throw new InterruptedIOException();\n    }\n}", "CodeBleu_score": 32.75332009042319}, {"code": "private synchronized void flushWrittenBytesToServiceInternal(final long offset) throws IOException{\n\t    if (offset == lastFlushOffset) {\n        return;\n    }\n\n    final int bytesToFlush = (int) (offset - lastFlushOffset);\n    final ByteBuffer bufferToFlush = ByteBuffer.allocate(bytesToFlush);\n    ((Buffer) bufferToFlush).position(bytesToFlush);\n    ((Buffer) bufferToFlush).flip();\n\n    int retryCount = 0;\n    while (true) {\n        try {\n            final long start = System.nanoTime();\n            final Future<Void> future = executorService.submit(new Callable<Void>() {\n                @Override\n                public Void call() throws Exception {\n                    try {\n                        final OutputStream outputStream = client.getOutputStream(fileId, lastFlushOffset);\n                        outputStream.write(bufferToFlush.array(), bufferToFlush.arrayOffset() + bufferToFlush.position(), bufferToFlush.remaining());\n                        outputStream.close();\n                    } catch (final IOException e) {\n                        throw new IOException(\"Failed to write to the file \" + fileId + \" at offset \" + lastFlushOffset, e);\n                    }\n                    return null;\n                }\n            });\n            future.get(writeTimeout, TimeUnit.MILLISECONDS);\n            final long end = System.nanoTime();\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Flushed {} bytes to the file {} at offset {} in {} milliseconds.\", bytesToFlush, fileId, lastFlushOffset, TimeUnit.NANOSECONDS.toMillis(end - start));\n            }\n            break;\n        } catch (final TimeoutException e) {\n            LOG.warn(\"Timed out while flushing {} bytes to the file {} at offset {} after {} retries.\", bytesToFlush, fileId, lastFlushOffset, retryCount, e);\n            retryCount++;\n            if (retryCount > writeRetryCount) {\n                throw new IOException(\"Timed out while flushing \" + bytesToFlush + \" bytes to the file \" + fileId + \" at offset \" + lastFlushOffset + \" after", "CodeBleu_score": 30.008206789265625}]}
{"instance_id": "56e8fb9de5da", "generation_result": [{"code": "private synchronized int submitWriteBufferToService(final ByteBuffer bufferToWrite, final long writePosition) throws IOException {\n\t    if (!bufferToWrite.hasRemaining()) {\n        throw new IOException(\"Buffer to write has no remaining data\");\n    }\n    bufferToWrite.flip();\n    final int byteLength = bufferToWrite.remaining();\n    if (byteLength == 0) {\n        throw new IOException(\"Buffer to write has no remaining data\");\n    }\n    if (writeTaskQueue.size() > MAX_TASK_QUEUE_SIZE) {\n        throw new IOException(\"Too many write tasks queued\");\n    }\n    final WriteTask writeTask = new WriteTask(bufferToWrite, writePosition);\n    writeTaskQueue.add(writeTask);\n    writeCompletionService.submit(writeTask);\n    return byteLength;\n}", "CodeBleu_score": 29.871251913833348}, {"code": "private synchronized int submitWriteBufferToService(final ByteBuffer bufferToWrite, final long writePosition) throws IOException {\n\t    if (!bufferToWrite.hasRemaining()) {\n        return 0;\n    }\n    if (writePosition < 0) {\n        throw new IOException(\"Invalid write position: \" + writePosition);\n    }\n    final int byteLength = bufferToWrite.remaining();\n    bufferToWrite.flip();\n    final long writeOperationNumber = writeOperationNumber.getAndIncrement();\n    if (writeOperationNumber >= Long.MAX_VALUE) {\n        writeOperationNumber.set(0);\n    }\n    if (writeOperationNumber == 0) {\n        writeOperationNumber.set(1);\n    }\n    final CompletionService<Integer> completionService = new ExecutorCompletionService<Integer>(executorService);\n    final Future<Integer> future = completionService.submit(new Callable<Integer>() {\n        @Override\n        public Integer call() throws Exception {\n            return writeBuffer(bufferToWrite, writePosition);\n        }\n    });\n    writeOperations.put(writeOperationNumber, future);\n    if (writeOperations.size() > writeOperationsMax) {\n        final long sleepTime = 100;\n        try {\n            Thread.sleep(sleepTime);\n        } catch (InterruptedException e) {\n            throw new InterruptedIOException(e.getMessage());\n        }\n    }\n    return byteLength;\n}", "CodeBleu_score": 36.55327354874295}, {"code": "private synchronized int submitWriteBufferToService(final ByteBuffer bufferToWrite, final long writePosition) throws IOException {\n\t    // Check if the buffer is flipped, if not flip it\n    if (!bufferToWrite.isReadOnly()) {\n        bufferToWrite.flip();\n    }\n\n    // Check if the buffer is empty, if so return\n    if (bufferToWrite.remaining() == 0) {\n        return 0;\n    }\n\n    // Check if the queue is full, if so throw an exception\n    if (writeTaskQueue.size() >= MAX_QUEUE_SIZE) {\n        throw new IOException(\"Write task queue is full\");\n    }\n\n    // Check if the task queue is full, if so throw an exception\n    if (writeTaskQueue.size() >= MAX_QUEUE_SIZE) {\n        throw new IOException(\"Write task queue is full\");\n    }\n\n    // Create a new write task and submit it to the completion service\n    final Future<Integer> writeTask = writeCompletionService.submit(new Callable<Integer>() {\n        @Override\n        public Integer call() throws Exception {\n            // Write the buffer to the service\n            int bytesWritten = writeBufferToService(bufferToWrite, writePosition);\n\n            // Release the buffer\n            bufferToWrite.clear();\n            bufferPool.releaseBuffer(bufferToWrite);\n\n            // Return the number of bytes written\n            return bytesWritten;\n        }\n    });\n\n    // Add the write task to the queue\n    writeTaskQueue.add(writeTask);\n\n    // Return the number of bytes written\n    return bufferToWrite.remaining();\n}", "CodeBleu_score": 39.19908236342705}]}
{"instance_id": "bf27d955c38b", "generation_result": [{"code": "private void waitForTaskToComplete() throws IOException{\n\t    Future<Integer> future = null;\n    try {\n        while ((future = completionService.poll()) != null) {\n            try {\n                future.get();\n            } catch (InterruptedException e) {\n                throw new InterruptedIOException(e.getMessage());\n            } catch (ExecutionException e) {\n                throw new IOException(e.getCause().getMessage(), e.getCause());\n            }\n        }\n    } finally {\n        if (future != null) {\n            future.cancel(true);\n        }\n    }\n}", "CodeBleu_score": 29.85173042255058}, {"code": "private void waitForTaskToComplete() throws IOException{\n\t    Future<Integer> future = null;\n    try {\n        future = this.completionService.take();\n    } catch (InterruptedException e) {\n        throw new IOException(e);\n    }\n\n    try {\n        future.get();\n    } catch (ExecutionException e) {\n        throw new IOException(e);\n    } catch (InterruptedException e) {\n        throw new IOException(e);\n    }\n}", "CodeBleu_score": 35.09628010276784}, {"code": "private void waitForTaskToComplete() throws IOException{\n\t    Future<Integer> future = null;\n    try {\n        while (true) {\n            future = completionService.poll(5, TimeUnit.SECONDS);\n            if (future == null) {\n                // No data, continue polling\n                continue;\n            }\n            future.get();\n            break;\n        }\n    } catch (InterruptedException e) {\n        throw new IOException(e);\n    } catch (ExecutionException e) {\n        throw new IOException(e.getCause());\n    }\n}", "CodeBleu_score": 36.234702088559544}]}
{"instance_id": "5c7a311273ae", "generation_result": [{"code": "private synchronized void shrinkWriteOperationQueue() throws IOException{\n\t    if (writeOperationQueue.isEmpty()) {\n        return;\n    }\n\n    long currentAppendOffset = appendOffset;\n    while (!writeOperationQueue.isEmpty()) {\n        WriteOperation writeOperation = writeOperationQueue.peek();\n        if (writeOperation.isDone()) {\n            writeOperationQueue.poll();\n            try {\n                writeOperation.get();\n            } catch (InterruptedException | ExecutionException e) {\n                throw new IOException(e);\n            }\n            currentAppendOffset += writeOperation.getLength();\n        } else {\n            break;\n        }\n    }\n\n    appendOffset = currentAppendOffset;\n}", "CodeBleu_score": 31.008329996044687}, {"code": "private synchronized void shrinkWriteOperationQueue() throws IOException{\n\t    int count = 0;\n    while (!writeOperations.isEmpty() && writeOperations.peek().isDone()) {\n        WriteOperation op = writeOperations.remove();\n        try {\n            op.get();\n        } catch (ExecutionException e) {\n            throw new IOException(e.getCause());\n        } catch (InterruptedException e) {\n            throw new InterruptedIOException();\n        }\n        count++;\n    }\n    totalAppendOffset += count;\n}", "CodeBleu_score": 36.05105884742719}, {"code": "private synchronized void shrinkWriteOperationQueue() throws IOException{\n\t    while (!writeOperations.isEmpty()) {\n        WriteOperation writeOperation = writeOperations.peek();\n        if (writeOperation.isDone()) {\n            try {\n                writeOperation.get();\n                totalAppendOffset += writeOperation.getLength();\n            } catch (InterruptedException | ExecutionException e) {\n                throw new IOException(e);\n            }\n            writeOperations.remove();\n        } else {\n            break;\n        }\n    }\n}", "CodeBleu_score": 32.75768603775008}]}
{"instance_id": "d8f07e66f690", "generation_result": [{"code": "protected HdfsFileSystemView(User user){\n\t    if (user == null) {\n        throw new IllegalArgumentException(\"user can not be null\");\n    }\n    if (user.getHomeDirectory() == null) {\n        throw new IllegalArgumentException(\"home directory can not be null\");\n    }\n    homePath = new Path(user.getHomeDirectory());\n    this.user = user;\n}", "CodeBleu_score": 75.0246038504486}, {"code": "protected HdfsFileSystemView(User user){\n\t  if (user == null) {\n    throw new IllegalArgumentException(\"user can not be null\");\n  }\n\n  String homeDir = user.getHomeDirectory();\n  if (homeDir == null) {\n    throw new IllegalArgumentException(\"homeDir can not be null\");\n  }\n\n  this.homePath = new Path(homeDir);\n  this.user = user;\n}", "CodeBleu_score": 64.52889531051717}, {"code": "protected HdfsFileSystemView(User user){\n\t    if (user == null) {\n        throw new IllegalArgumentException(\"user can not be null\");\n    }\n\n    File homeDir = user.getHomeDirectory();\n    if (homeDir == null) {\n        throw new IllegalArgumentException(\"user home directory can not be null\");\n    }\n\n    homePath = new Path(homeDir.getAbsolutePath());\n    this.user = user;\n}", "CodeBleu_score": 62.76085553023114}]}
{"instance_id": "27807db0eb0f", "generation_result": [{"code": "public boolean changeWorkingDirectory(String dir){\n\t    FileSystemView fsView = session.getFileSystemView();\n    User user = session.getUser();\n    Path newPath = fsView.getWorkingDirectory().getFileSystemView().getHomeDirectory().toPath();\n    if(dir.startsWith(\"/\")){\n        newPath = newPath.getFileSystem().getPath(dir);\n    }\n    else{\n        newPath = newPath.resolve(dir);\n    }\n    if(newPath.getParent().equals(newPath)){\n        return false;\n    }\n    else{\n        FtpFile file = fsView.getFile(newPath.toString());\n        if(file.isDirectory()){\n            session.getFileSystemView().changeWorkingDirectory(newPath.toString());\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n}", "CodeBleu_score": 32.92749539253168}, {"code": "public boolean changeWorkingDirectory(String dir){\n\t    // If the user tries to change to the parent directory of the root, return false\n    if (dir.equals(\"..\") && this.currentPath.toString().equals(this.root.toString())) {\n        return false;\n    }\n    // If the user tries to change to the parent directory of the current directory, return false\n    if (dir.equals(\"..\") && this.currentPath.toString().equals(this.root.toString() + \"/\" + this.userName)) {\n        return false;\n    }\n    // If the user tries to change to the parent directory of the current directory, return false\n    if (dir.equals(\"..\") && this.currentPath.toString().equals(this.root.toString() + \"/\" + this.userName + \"/\" + this.currentPath.getName())) {\n        return false;\n    }\n    // If the user tries to change to the parent directory of the current directory, return false\n    if (dir.equals(\"..\") && this.currentPath.toString().equals(this.root.toString() + \"/\" + this.userName + \"/\" + this.currentPath.getParent().getName() + \"/\" + this.currentPath.getName())) {\n        return false;\n    }\n    // If the user tries to change to the parent directory of the current directory, return false\n    if (dir.equals(\"..\") && this.currentPath.toString().equals(this.root.toString() + \"/\" + this.userName + \"/\" + this.currentPath.getParent().getName() + \"/\" + this.currentPath.getName() + \"/\" + this.currentPath.getName())) {\n        return false;\n    }\n    // If the user tries to change to the parent directory of the current directory, return false\n    if (dir.equals(\"..\") && this.currentPath.toString().equals(this.root.toString() + \"/\" + this.userName + \"/\" + this.currentPath.getParent().getName() + \"/\" + this.currentPath.getName() + \"/\" + this.currentPath.getName() + \"/\" + this.currentPath.getName())) {\n        return false;\n    }\n    // If the user tries to change to the parent directory of the current directory, return false\n    if (", "CodeBleu_score": 17.96241655625865}, {"code": "public boolean changeWorkingDirectory(String dir){\n\t    // Check if the input is a relative or absolute path\n    boolean isAbsolute = dir.startsWith(\"/\");\n\n    // Check if the input is a valid path\n    if (isAbsolute) {\n        if (dir.length() == 1) {\n            // If the input is just \"/\", then the new path is the root\n            this.currentPath = this.root;\n            return true;\n        }\n        else {\n            // If the input is an absolute path, then the new path is the input\n            this.currentPath = new Path(dir);\n        }\n    }\n    else {\n        // If the input is a relative path, then the new path is the current path + the input\n        this.currentPath = new Path(this.currentPath, dir);\n    }\n\n    // Check if the new path is a directory\n    if (this.fs.isDirectory(this.currentPath)) {\n        // If the new path is a directory, then update the current path and return true\n        return true;\n    }\n    else {\n        // If the new path is not a directory, then return false\n        return false;\n    }\n}", "CodeBleu_score": 31.537396759197822}]}
{"instance_id": "be7aba23d184", "generation_result": [{"code": "public SeaweedFileSystemStore(String host, int port, int grpcPort, Configuration conf){\n\t    filerClient = new FilerClient(host, port, grpcPort, conf.getBoolean(USE_HTTPS, false));\n    filerClient.setAccessMode(conf.get(ACCESS_MODE, \"direct\"));\n    filerClient.setPublicUrl(conf.get(PUBLIC_URL, \"\"));\n}", "CodeBleu_score": 33.2636291768546}, {"code": "public SeaweedFileSystemStore(String host, int port, int grpcPort, Configuration conf){\n\t    filerClient = new FilerClient(host, port, grpcPort);\n    filerClient.setAccessMode(conf.get(ACCESS_MODE, ACCESS_MODE_DIRECT));\n    filerClient.setReplication(conf.getInt(REPLICATION, REPLICATION_DEFAULT));\n    filerClient.setDataCenter(conf.get(DATA_CENTER, DATA_CENTER_DEFAULT));\n    filerClient.setDataNode(conf.get(DATA_NODE, DATA_NODE_DEFAULT));\n    filerClient.setRack(conf.get(RACK, RACK_DEFAULT));\n    filerClient.setDataNode(conf.get(DATA_NODE, DATA_NODE_DEFAULT));\n    filerClient.setDataNode(conf.get(DATA_NODE, DATA_NODE_DEFAULT));\n    filerClient.setDataNode(conf.get(DATA_NODE, DATA_NODE_DEFAULT));\n    filerClient.setDataNode(conf.get(DATA_NODE, DATA_NODE_DEFAULT));\n    filerClient.setDataNode(conf.get(DATA_NODE, DATA_NODE_DEFAULT));\n    filerClient.setDataNode(conf.get(DATA_NODE, DATA_NODE_DEFAULT));\n    filerClient.setDataNode(conf.get(DATA_NODE, DATA_NODE_DEFAULT));\n    filerClient.setDataNode(conf.get(DATA_NODE, DATA_NODE_DEFAULT));\n    filerClient.setDataNode(conf.get(DATA_NODE, DATA_NODE_DEFAULT));\n    filerClient.setDataNode(conf.get(DATA_NODE, DATA_NODE_DEFAULT));\n    filerClient.setDataNode(conf.get(DATA_NODE, DATA_NODE_DEFAULT));\n    filerClient.setDataNode(conf.get(DATA_NODE, DATA_NODE_DEFAULT));\n    filerClient.setDataNode(conf.get(DATA_NODE, DATA_NODE_DEFAULT));\n    filerClient.setDataNode(conf.get", "CodeBleu_score": 30.4523461086478}, {"code": "public SeaweedFileSystemStore(String host, int port, int grpcPort, Configuration conf){\n\t    _conf = conf;\n    _filerClient = new FilerClient(host, port, grpcPort, conf);\n    _accessMode = conf.get(ACCESS_MODE_PROPERTY, ACCESS_MODE_PROPERTY_DEFAULT);\n}", "CodeBleu_score": 26.32869960455892}]}
{"instance_id": "7943a1723c23", "generation_result": [{"code": "public FSInputStream openFileForRead(final Path path, FileSystem.Statistics statistics) throws IOException{\n\t    LOG.debug(\"openFileForRead: {}\", path);\n\n    FilerProto.LookupEntryResponse.Builder lookupResponse = filerClient.lookup(filerAddress, path.toUri().getPath());\n\n    if (!lookupResponse.getEntry().getIsDirectory()) {\n        return new SeaweedHadoopInputStream(filerClient, statistics, lookupResponse.getEntry());\n    }\n\n    throw new FileNotFoundException(\"File \" + path + \" not found.\");\n}", "CodeBleu_score": 51.08273717987545}, {"code": "public FSInputStream openFileForRead(final Path path, FileSystem.Statistics statistics) throws IOException{\n\t    LOG.debug(\"openFileForRead: {}\", path);\n\n    FilerProto.LookupEntryResponse lookupEntryResponse = lookupEntry(filerClient, path);\n\n    if (lookupEntryResponse == null) {\n        throw new FileNotFoundException(\"File does not exist: \" + path);\n    }\n\n    return new SeaweedHadoopInputStream(filerClient, statistics, path, lookupEntryResponse);\n}", "CodeBleu_score": 61.97762764734719}, {"code": "public FSInputStream openFileForRead(final Path path, FileSystem.Statistics statistics) throws IOException{\n\t    String pathString = path.toString();\n    logger.debug(\"Opening file for read: {}\", pathString);\n    FilerProto.Entry entry = filerClient.lookupEntry(filerClient.getFullPath(path));\n    if (entry == null) {\n        throw new FileNotFoundException(\"File \" + pathString + \" not found.\");\n    }\n    return new SeaweedHadoopInputStream(filerClient, statistics, pathString);\n}", "CodeBleu_score": 62.45240051385039}]}
{"instance_id": "36634cee9ed3", "generation_result": [{"code": "public void configure(JobConf conf){\n\t    this.conf = conf;\n    try {\n        hostName = InetAddress.getLocalHost().getHostName();\n    } catch (Exception e) {\n        hostName = \"localhost\";\n    }\n    numThreads = conf.getInt(\"stream.num.map.output.key.fields\", 1);\n    filesPerThread = conf.getInt(\"stream.map.output.key.field.per.thread\", 1);\n    executor = Executors.newFixedThreadPool(numThreads);\n    for (int i = 0; i < numThreads; i++) {\n        executor.execute(new Thread());\n    }\n}", "CodeBleu_score": 51.74311972546584}, {"code": "public void configure(JobConf conf){\n\t    this.conf = conf;\n    try {\n        hostName = InetAddress.getLocalHost().getHostName();\n    } catch (Exception e) {\n        hostName = \"localhost\";\n    }\n    numThreads = conf.getInt(\"mapred.map.multithread.threadspermap\", 1);\n    filesPerThread = conf.getInt(\"mapred.map.multithread.filesperthread\", 1);\n    executor = Executors.newFixedThreadPool(numThreads);\n    for (int i = 0; i < numThreads; i++) {\n        executor.execute(new DaemonThread());\n    }\n}", "CodeBleu_score": 51.88472147034632}, {"code": "public void configure(JobConf conf){\n\t    this.conf = conf;\n    try {\n        localHostName = InetAddress.getLocalHost().getHostName();\n    } catch (IOException e) {\n        localHostName = \"localhost\";\n    }\n    numThreads = conf.getInt(\"multithread.threads.per.map\", 10);\n    filesPerThread = conf.getInt(\"multithread.files.per.thread\", 10);\n    executor = Executors.newFixedThreadPool(numThreads);\n    for (int i = 0; i < numThreads; i++) {\n        executor.execute(new Runnable() {\n            public void run() {\n                while (true) {\n                    try {\n                        Runnable task = taskQueue.take();\n                        task.run();\n                    } catch (InterruptedException e) {\n                        return;\n                    }\n                }\n            }\n        });\n    }\n}", "CodeBleu_score": 40.028589895665355}]}
{"instance_id": "53cd9065153d", "generation_result": [{"code": "private void startTrashEmptier(URI uri, final Configuration conf) throws IOException{\n\t    String host = uri.getHost();\n    if (host == null) {\n        throw new IOException(\"Cannot initialize Trash for URI \" + uri + \" with a null hostname.\");\n    }\n    if (emptierTask == null) {\n        UserGroupInformation ugi = UserGroupInformation.getBestUGI(null, conf);\n        final UserGroupInformation superUser = UserGroupInformation.createRemoteUser(host);\n        superUser.addToken(ugi.getCredentials().getToken(new Text(uri.getScheme())));\n        try {\n            emptierTask = superUser.doAs(new PrivilegedExceptionAction<BgTaskUtil.BgTask>() {\n                public BgTaskUtil.BgTask run() throws IOException {\n                    return new BgTaskUtil.BgTask(new Trash(conf).getEmptier(), 10, TimeUnit.MINUTES);\n                }\n            });\n        } catch (InterruptedException e) {\n            throw new IOException(\"Interrupted while creating background trash emptier thread\", e);\n        }\n    }\n}", "CodeBleu_score": 41.930273181977384}, {"code": "private void startTrashEmptier(URI uri, final Configuration conf) throws IOException{\n\t    String host = uri.getHost();\n    if (host == null) {\n        return;\n    }\n    if (emptier.get(host) != null) {\n        return;\n    }\n    final UserGroupInformation ugi = UserGroupInformation.getCurrentUser();\n    UserGroupInformation superuser = UserGroupInformation.createRemoteUser(\n            conf.get(JuiceFileSystem.SUPERUSER_NAME_KEY, JuiceFileSystem.SUPERUSER_NAME_DEFAULT));\n    superuser.doAs(new PrivilegedExceptionAction<Object>() {\n        @Override\n        public Object run() throws Exception {\n            final FileSystem fs = FileSystem.get(uri, conf);\n            if (!(fs instanceof JuiceFileSystemImpl)) {\n                return null;\n            }\n            emptier.put(host, BgTaskUtil.runBg(new BgTaskUtil.BgTask<Void>() {\n                @Override\n                public Void call() throws Exception {\n                    try {\n                        while (true) {\n                            fs.deleteOnExit(new Path(JuiceFileSystem.TRASH_PREFIX));\n                            TimeUnit.MINUTES.sleep(10);\n                        }\n                    } catch (InterruptedException e) {\n                        LOG.info(\"Trash emptier for {} is interrupted.\", host);\n                    }\n                    return null;\n                }\n            }, \"Trash Emptier for \" + host));\n            return null;\n        }\n    });\n}", "CodeBleu_score": 36.452469657378785}, {"code": "private void startTrashEmptier(URI uri, final Configuration conf) throws IOException{\n\t    if (emptierTask != null) {\n        return;\n    }\n    UserGroupInformation ugi;\n    try {\n        ugi = UserGroupInformation.getCurrentUser();\n    } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n    }\n    String hostname = ugi.getShortUserName() + \"@\" + uri.getHost();\n    if (emptierTaskMap.containsKey(hostname)) {\n        return;\n    }\n    final UserGroupInformation superuser = UserGroupInformation.createRemoteUser(uri.getUserInfo());\n    emptierTask = new BgTaskUtil.BgTask<Void>() {\n        @Override\n        public Void call() throws Exception {\n            superuser.doAs(new PrivilegedExceptionAction<Void>() {\n                @Override\n                public Void run() throws Exception {\n                    final FileSystem fs = new JuiceFileSystemImpl();\n                    fs.initialize(uri, conf);\n                    final TrashPolicy tp = TrashPolicy.getInstance(fs.getConf(), fs);\n                    while (true) {\n                        try {\n                            tp.emitTrash(fs);\n                        } catch (Exception e) {\n                            LOG.error(\"Error occurred when emitTrash: \", e);\n                        }\n                        TimeUnit.MINUTES.sleep(10);\n                    }\n                }\n            });\n            return null;\n        }\n    };\n    emptierTaskMap.put(hostname, emptierTask);\n    BgTaskUtil.getInstance().execute(emptierTask);\n}", "CodeBleu_score": 45.460241416391675}]}
{"instance_id": "ede797f6a8f2", "generation_result": [{"code": "public static void setContext(String context) throws Exception{\n\t  CallerContext currentContext = CallerContext.getCurrent();\n  if (currentContext == null || !currentContext.isValid()) {\n    CallerContext.setCurrent(new CallerContext.Builder(context).build());\n  } else {\n    if (!currentContext.getSignature() && !currentContext.getContext().contains(context)) {\n      CallerContext.setCurrent(new CallerContext.Builder(currentContext.getContext() + \" \" + context).build());\n    }\n  }\n}", "CodeBleu_score": 45.82056890647061}, {"code": "public static void setContext(String context) throws Exception{\n\t  CallerContext callerContext = CallerContext.getCurrent();\n  if (callerContext == null || !callerContext.isContextValid()) {\n    callerContext = new CallerContext.Builder().setSignature(context).build();\n    CallerContext.setCurrent(callerContext);\n  } else if (!callerContext.getContext().contains(context)) {\n    callerContext = new CallerContext.Builder(callerContext).setSignature(context).build();\n    CallerContext.setCurrent(callerContext);\n  }\n}", "CodeBleu_score": 49.959901976657406}, {"code": "public static void setContext(String context) throws Exception{\n\t  CallerContext.setCurrent(context);\n}", "CodeBleu_score": 3.559987956411688}]}
{"instance_id": "56968a526f6a", "generation_result": [{"code": "Status HDFS::remove_file(const URI& uri){\n\t  if (uri.is_hdfs()) {\n    // Connect\n    hdfsFS fs = hdfsConnect(uri.host().c_str(), uri.port());\n    if (fs == nullptr) {\n      return LOG_STATUS(Status::HDFSError(\n          std::string(\"Cannot connect to HDFS URI \" + uri.to_string())));\n    }\n\n    // Delete file\n    int error = hdfsDelete(fs, uri.last_path_part().c_str(), 0);\n    if (error != 0) {\n      hdfsDisconnect(fs);\n      return LOG_STATUS(Status::HDFSError(\n          std::string(\"Cannot delete file at URI \" + uri.to_string())));\n    }\n\n    // Disconnect\n    if (hdfsDisconnect(fs) != 0) {\n      return LOG_STATUS(Status::HDFSError(\n          std::string(\"Cannot disconnect from HDFS URI \" + uri.to_string())));\n    }\n  }\n\n  return Status::Ok();\n}", "CodeBleu_score": 52.742965928445074}, {"code": "Status HDFS::remove_file(const URI& uri){\n\t    if (uri.protocol() != \"hdfs\") {\n        return Status::IOError(\"URI protocol must be 'hdfs'\");\n    }\n\n    if (uri.authority().empty()) {\n        return Status::IOError(\"URI authority cannot be empty\");\n    }\n\n    if (uri.path().empty()) {\n        return Status::IOError(\"URI path cannot be empty\");\n    }\n\n    std::string path = uri.path();\n    if (path[0] != '/') {\n        return Status::IOError(\"URI path must be an absolute path\");\n    }\n\n    // Get the file name from the path\n    const std::string filename = uri.last_path_part();\n\n    // Get the parent path from the path\n    const std::string parent_path = parent_path(path);\n\n    // Connect to the HDFS file system\n    hdfsFS fs = connect(uri);\n\n    // Delete the file\n    if (hdfsDelete(fs, path.c_str(), 0) == -1) {\n        LOG_ERROR(\"Cannot delete file; %s\", path.c_str());\n        return Status::IOError(\"Cannot delete file\");\n    }\n\n    // Close the connection to the HDFS file system\n    hdfsDisconnect(fs);\n\n    return Status::Ok();\n}", "CodeBleu_score": 44.80763429000548}, {"code": "Status HDFS::remove_file(const URI& uri){\n\t  if (uri.protocol() != \"hdfs\") {\n    return LOG_STATUS(Status::HDFSError(\n        \"Cannot delete HDFS file; URI protocol must be 'hdfs'\"));\n  }\n\n  // Get config\n  Config& config = storage_manager_->config();\n\n  // Get params\n  ThreadPool* const thread_pool = storage_manager_->thread_pool();\n  const std::string& hdfs_temp_dir = config.get(\"vfs.hdfs.temp_dir\");\n  const uint64_t& hdfs_max_parallel_ops =\n      config.get(\"vfs.hdfs.max_parallel_ops\", uint64_t(1000));\n  const uint64_t& hdfs_num_parallel_ops =\n      config.get(\"vfs.hdfs.num_parallel_ops\", uint64_t(100));\n  const uint64_t& hdfs_max_parallel_files =\n      config.get(\"vfs.hdfs.max_parallel_files\", uint64_t(100));\n  const uint64_t& hdfs_num_parallel_files =\n      config.get(\"vfs.hdfs.num_parallel_files\", uint64_t(100));\n  const uint64_t& hdfs_max_concurrency =\n      config.get(\"vfs.hdfs.max_concurrency\", uint64_t(100));\n  const uint64_t& hdfs_num_concurrency =\n      config.get(\"vfs.hdfs.num_concurrency\", uint64_t(100));\n  const uint64_t& hdfs_max_total_parallel_ops =\n      config.get(\"vfs.hdfs.max_total_parallel_ops\", uint64_t(10000));\n  const uint64_t& hdfs_num_total_parallel_ops =\n      config.get(\"vfs.hdfs.num_total_parallel_ops\", uint64_t(1000));\n  const uint64_t& hdfs_max_total_", "CodeBleu_score": 35.43515887649101}]}
{"instance_id": "f33adb3e8cb6", "generation_result": [{"code": "Status HDFS::sync(const URI& uri){\n\t  if (uri.get_scheme() != \"hdfs\")\n    return LOG_STATUS(Status::HDFSError(\n        \"Cannot sync to non-hdfs URI; URI must have 'hdfs://' \"\n        \"scheme.\"));\n\n  // Get config\n  Config& config = storage_manager_->config();\n\n  // Connect\n  hdfsBuilder* builder = hdfsNewBuilder();\n  hdfsBuilderSetNameNode(builder, uri.get_host().c_str());\n  hdfsBuilderSetNameNodePort(builder, uri.get_port());\n  if (config.has(\"vfs.hdfs.kerb_ticket_cache_path\"))\n    hdfsBuilderSetKerbTicketCachePath(\n        builder,\n        config.get(\"vfs.hdfs.kerb_ticket_cache_path\").c_str());\n  hdfsFS fs = hdfsBuilderConnect(builder);\n  if (fs == nullptr)\n    return LOG_STATUS(Status::HDFSError(\n        std::string(\"Cannot sync to file; File URI cannot be connected: \" +\n                    uri.to_string())));\n\n  // Sync\n  int success = hdfsSync(fs, uri.get_path().c_str());\n\n  // Close and disconnect\n  hdfsCloseFile(fs, nullptr);\n  hdfsDisconnect(fs);\n\n  if (success != 0)\n    return LOG_STATUS(Status::HDFSError(\n        std::string(\"Cannot sync to file; File URI cannot be synced: \" +\n                    uri.to_string())));\n\n  return Status::Ok();\n}", "CodeBleu_score": 40.563485565317535}, {"code": "Status HDFS::sync(const URI& uri){\n\t  // Initialize a HDFS file system\n  hdfsFS fs = getFileSystem(uri);\n\n  // Exit if file system was not initialized successfully\n  if(fs == NULL)\n    return LOG_STATUS(Status::HDFSError(\"Cannot initialize HDFS file system; File '\" + uri.to_string() + \"'\"));\n\n  // Check if file exists\n  if(!is_file(uri))\n    return Status::Ok();\n\n  // Open file for writing and appending\n  hdfsFile file = hdfsOpenFile(fs, uri.c_str(), O_WRONLY|O_APPEND, 0, 0, 0);\n  if(file == NULL) {\n    std::string errmsg = \"Cannot open HDFS file; File '\" + uri.c_str() + \"'\";\n    LOG_STATUS(Status::HDFSError(errmsg));\n    hdfsCloseFile(fs, file);\n    return Status::Err(errmsg);\n  }\n\n  // Flush file\n  int rc = hdfsSync(fs, file);\n  if(rc != 0) {\n    std::string errmsg = \"Cannot sync HDFS file; File '\" + uri.c_str() + \"'\";\n    LOG_STATUS(Status::HDFSError(errmsg));\n    hdfsCloseFile(fs, file);\n    return Status::Err(errmsg);\n  }\n\n  // Close file\n  rc = hdfsCloseFile(fs, file);\n  if(rc != 0) {\n    std::string errmsg = \"Cannot close HDFS file; File '\" + uri.c_str() + \"'\";\n    LOG_STATUS(Status::HDFSError(errmsg));\n    return Status::Err(errmsg);\n  }\n\n  // Success\n  return Status::Ok();\n}", "CodeBleu_score": 53.61735841908466}, {"code": "Status HDFS::sync(const URI& uri){\n\t  // TODO(nicholas): implement this\n  return Status::Ok;\n}", "CodeBleu_score": 2.6463238959212694}]}
{"instance_id": "893c46ab9675", "generation_result": [{"code": "Status HDFS::file_size(const URI& uri, uint64_t* nbytes){\n\t  // Connect to the HDFS file system\n  hdfsFS fs = Hdfs::connect(uri);\n  if (fs == nullptr)\n    return LOG_STATUS(Status::HDFSError(\n        \"Cannot retrieve file size; File opening error\"));\n\n  // Get file info\n  HdfsFileInfo* hdfsFileInfo = Hdfs::file_info(fs, uri.c_str());\n  if (hdfsFileInfo == nullptr) {\n    Hdfs::disconnect(fs);\n    return LOG_STATUS(Status::HDFSError(\n        \"Cannot retrieve file size; File opening error\"));\n  }\n\n  // Set nbytes\n  *nbytes = hdfsFileInfo->mSize;\n\n  // Free hdfsFileInfo\n  Hdfs::file_info_free(hdfsFileInfo);\n\n  // Disconnect from the HDFS file system\n  Hdfs::disconnect(fs);\n\n  return Status::Ok();\n}", "CodeBleu_score": 44.55097354193918}, {"code": "Status HDFS::file_size(const URI& uri, uint64_t* nbytes){\n\t  // Connect\n  if (!connect_hdfs(uri))\n    return LOG_STATUS(Status::HDFSError(\"Cannot connect to HDFS\"));\n\n  // Get file info\n  hdfsFileInfo* file_info = hdfsGetPathInfo(hdfs_fs_, uri.c_str());\n  if (file_info == nullptr)\n    return LOG_STATUS(Status::HDFSError(\"Cannot retrieve HDFS file info\"));\n\n  // Check if the path is a file\n  if (!file_info->mKind) {\n    hdfsFreeFileInfo(file_info, 1);\n    return LOG_STATUS(Status::HDFSError(\"Path is not a file\"));\n  }\n\n  // Set file size\n  *nbytes = file_info->mSize;\n\n  // Free file info\n  hdfsFreeFileInfo(file_info, 1);\n\n  // Disconnect\n  disconnect();\n\n  return Status::Ok();\n}", "CodeBleu_score": 44.04406573438157}, {"code": "Status HDFS::file_size(const URI& uri, uint64_t* nbytes){\n\t  // Connect\n  hdfsFS fs = connect(uri);\n  if (fs == nullptr)\n    return LOG_STATUS(Status::HDFSError(\"Cannot connect to HDFS\"));\n\n  // Get file info\n  hdfsFileInfo* info = hdfsGetPathInfo(fs, uri.c_str());\n  if (info == nullptr) {\n    disconnect(fs);\n    return LOG_STATUS(Status::HDFSError(\"Cannot retrieve HDFS file info\"));\n  }\n\n  // Check if it is a file\n  if (info->mKind != kObjectKindFile) {\n    disconnect(fs);\n    return LOG_STATUS(Status::HDFSError(\n        std::string(\"URI is not a file; URI: \" + uri.to_string())));\n  }\n\n  // Set nbytes\n  *nbytes = info->mSize;\n\n  // Free file info\n  hdfsFreeFileInfo(info, 1);\n\n  // Disconnect\n  disconnect(fs);\n\n  return Status::Ok();\n}", "CodeBleu_score": 50.535427038579314}]}
{"instance_id": "3da0b4d8ae16", "generation_result": [{"code": "public static Pair<String, String> getHbaseConfig(String hbaseCfgString){\n\t    String zkQuorum = \"\";\n    String znode = \"\";\n    if (StringUtils.isNotBlank(hbaseCfgString)) {\n        Map<String, String> hbaseConfigMap = JSON.parseObject(hbaseCfgString, new TypeReference<Map<String, String>>() {\n        });\n        if (hbaseConfigMap != null) {\n            if (hbaseConfigMap.containsKey(HBaseKey.HBASE_ZOOKEEPER_QUORUM)) {\n                zkQuorum = hbaseConfigMap.get(HBaseKey.HBASE_ZOOKEEPER_QUORUM);\n                if (StringUtils.isNotBlank(zkQuorum)) {\n                    String[] zkQuorumArray = zkQuorum.split(\",\");\n                    for (int i = 0; i < zkQuorumArray.length; i++) {\n                        String zk = zkQuorumArray[i];\n                        if (!zk.contains(\":\")) {\n                            zkQuorumArray[i] = zk + \":\" + HBaseConstant.DEFAULT_ZK_CLIENT_PORT;\n                        }\n                    }\n                    zkQuorum = StringUtils.join(zkQuorumArray, \",\");\n                }\n            }\n            if (hbaseConfigMap.containsKey(HBaseKey.HBASE_ZNODE_PARENT)) {\n                znode = hbaseConfigMap.get(HBaseKey.HBASE_ZNODE_PARENT);\n                if (StringUtils.isBlank(znode)) {\n                    znode = HBaseConstant.DEFAULT_ZNODE_PARENT;\n                }\n            }\n        }\n    }\n    return new Pair<>(zkQuorum, znode);\n}", "CodeBleu_score": 54.69918812190803}, {"code": "public static Pair<String, String> getHbaseConfig(String hbaseCfgString){\n\t    String[] hbaseCfg = hbaseCfgString.split(\",\");\n    String quorum = \"\";\n    String znode = \"\";\n    for (String cfg : hbaseCfg) {\n        if (cfg.startsWith(\"hbase.zookeeper.quorum\")) {\n            String[] quorumCfg = cfg.split(\"=\");\n            quorum = quorumCfg[1];\n            if (!quorum.contains(\":\")) {\n                quorum = quorum + \":2181\";\n            }\n        } else if (cfg.startsWith(\"zookeeper.znode.parent\")) {\n            String[] znodeCfg = cfg.split(\"=\");\n            znode = znodeCfg[1];\n        }\n    }\n    if (StringUtils.isBlank(znode)) {\n        znode = HBaseConstant.DEFAULT_ZNODE_PARENT;\n    }\n    return new Pair<>(quorum, znode);\n}", "CodeBleu_score": 37.711956566542064}, {"code": "public static Pair<String, String> getHbaseConfig(String hbaseCfgString){\n\t    if (StringUtils.isBlank(hbaseCfgString)) {\n        throw AddaxException.asAddaxException(HBase20xSQLWriterErrorCode.REQUIRED_VALUE, \"The hbaseConfig is not set\");\n    }\n    Configuration hbaseConfig = Configuration.from(hbaseCfgString);\n    String quorum = hbaseConfig.getString(HBaseKey.HBASE_ZOOKEEPER_QUORUM);\n    String znode = hbaseConfig.getString(HBaseKey.HBASE_ZNODE_PARENT);\n    if (StringUtils.isBlank(quorum)) {\n        throw AddaxException.asAddaxException(HBase20xSQLWriterErrorCode.REQUIRED_VALUE, \"The hbaseConfig[\" + HBaseKey.HBASE_ZOOKEEPER_QUORUM + \"] is not set\");\n    }\n    if (StringUtils.isBlank(znode)) {\n        throw AddaxException.asAddaxException(HBase20xSQLWriterErrorCode.REQUIRED_VALUE, \"The hbaseConfig[\" + HBaseKey.HBASE_ZNODE_PARENT + \"] is not set\");\n    }\n    String[] quorumArray = quorum.split(\",\");\n    for (int i = 0; i < quorumArray.length; i++) {\n        String[] zk = quorumArray[i].split(\":\");\n        if (zk.length == 1) {\n            quorumArray[i] = quorumArray[i] + \":2181\";\n        }\n    }\n    return new Pair<>(StringUtils.join(quorumArray, \",\"), znode);\n}", "CodeBleu_score": 37.51094268416426}]}
{"instance_id": "860cae2bb7f4", "generation_result": [{"code": "public static void validateConfig(HbaseSQLWriterConfig cfg){\n\t    String hbaseConfig = cfg.getHbaseConfig();\n    Configuration hbaseConfigMap = Configuration.from(hbaseConfig);\n\n    // check for the existence of the specified table\n    String tableName = cfg.getTableName();\n    String namespace = cfg.getNamespace();\n    String zkQuorum = hbaseConfigMap.getString(HBaseKey.HBASE_ZK_QUORUM);\n    String zkClientPort = hbaseConfigMap.getString(HBaseKey.HBASE_ZK_PORT);\n    String zkZnodeParent = hbaseConfigMap.getString(HBaseKey.HBASE_ZNODE_PARENT);\n    String kerberosKeytab = hbaseConfigMap.getString(HBaseKey.KEYTAB);\n    String kerberosPrincipal = hbaseConfigMap.getString(HBaseKey.PRINCIPAL);\n    String hadoopSecurityAuthentication = hbaseConfigMap.getString(HBaseKey.HADOOP_SECURITY_AUTHENTICATION);\n\n    try {\n        if (StringUtils.isNotBlank(hadoopSecurityAuthentication) && hadoopSecurityAuthentication.equals(HBaseConstant.KERBEROS)) {\n            if (StringUtils.isBlank(kerberosPrincipal) || StringUtils.isBlank(kerberosKeytab)) {\n                throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.REQUIRED_VALUE, \"You need to specify kerberosPrincipal and kerberosKeytab when using kerberos authentication.\");\n            }\n            UserGroupInformation.setConfiguration(hbaseConfigMap);\n            UserGroupInformation.loginUserFromKeytab(kerberosPrincipal, kerberosKeytab);\n        }\n\n        String connectionString = \"jdbc:phoenix:\" + zkQuorum + \":\" + zkClientPort + \":\" + zkZnodeParent;\n        Class.forName(\"org.apache.phoenix.jdbc.PhoenixDriver\");\n        Connection conn = DriverManager.getConnection(connectionString);\n\n        String fullTableName = SchemaUtil.getEscapedTableName(namespace, tableName);\n        PTable pTable = PhoenixConnection.getTable(conn,", "CodeBleu_score": 29.854303126719454}, {"code": "public static void validateConfig(HbaseSQLWriterConfig cfg){\n\t    String connStr = cfg.getJdbcUrl();\n    String tableName = cfg.getTableName();\n    String namespace = cfg.getNamespace();\n    String username = cfg.getUsername();\n    String password = cfg.getPassword();\n    String keytab = cfg.getKeytab();\n    String principal = cfg.getPrincipal();\n    String krb5conf = cfg.getKrb5conf();\n\n    if (StringUtils.isNotBlank(keytab) && StringUtils.isNotBlank(principal)) {\n        try {\n            UserGroupInformation ugi = UserGroupInformation.loginUserFromKeytabAndReturnUGI(principal, keytab);\n            ugi.doAs(new HbaseSQLWriterConfig.KerberosAction(connStr, username, password));\n        } catch (Exception e) {\n            throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.GET_HBASE_CONNECTION_ERROR, \"\u83b7\u53d6hbase\u8fde\u63a5\u5931\u8d25\uff0c\u8bf7\u68c0\u67e5kerberos\u914d\u7f6e\", e);\n        }\n    } else {\n        try (Connection conn = DriverManager.getConnection(connStr, username, password)) {\n            try (Statement stmt = conn.createStatement()) {\n                stmt.execute(\"select count(1) from \" + tableName);\n            }\n        } catch (SQLException e) {\n            throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.GET_HBASE_CONNECTION_ERROR, \"\u83b7\u53d6hbase\u8fde\u63a5\u5931\u8d25\uff0c\u8bf7\u68c0\u67e5\u914d\u7f6e\", e);\n        }\n    }\n\n    try (Connection conn = DriverManager.getConnection(connStr, username, password)) {\n        try (Statement stmt = conn.createStatement()) {\n            String sql = \"SELECT COLUMN_NAME,DATA_TYPE FROM SYSTEM.CATALOG WHERE TABLE_SCHEM = '\" + namespace + \"' AND TABLE_NAME = '\" + tableName + \"'\";\n            try (ResultSet rs = stmt.executeQuery(sql)) {\n                Map<String, String> columnMeta = new HashMap<>();\n                while (rs.next()) {\n                    columnMeta.", "CodeBleu_score": 37.1511098826801}, {"code": "public static void validateConfig(HbaseSQLWriterConfig cfg){\n\t    // 1. check whether the specified namespace exists\n    try (Connection conn = getConnection(cfg)) {\n        // 2. check whether the specified table exists in the given namespace\n        try (Statement stmt = conn.createStatement()) {\n            String query = \"SELECT * FROM \" + cfg.getTableName();\n            try (ResultSet rs = stmt.executeQuery(query)) {\n                // 3. check whether the configured columns exist in the target table\n                ResultSetMetaData rsmd = rs.getMetaData();\n                List<String> configuredColumns = cfg.getColumns();\n                for (String column : configuredColumns) {\n                    try {\n                        int columnType = rsmd.getColumnType(rsmd.getColumnIndex(column));\n                    } catch (SQLException e) {\n                        throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.ILLEGAL_VALUE,\n                                \"The column '\" + column + \"' does not exist in the target table.\");\n                    }\n                }\n            }\n        }\n    } catch (SQLException e) {\n        throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.ILLEGAL_VALUE,\n                \"The specified table does not exist in the given namespace.\");\n    } catch (Exception e) {\n        throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.CONNECT_HBASE_FAIL,\n                \"Failed to connect to HBase cluster with the given configuration.\");\n    }\n}", "CodeBleu_score": 43.78219477478089}]}
{"instance_id": "61721c327cf6", "generation_result": [{"code": "private static void kerberosAuthentication(String kerberosPrincipal, String kerberosKeytabFilePath){\n\t    if (StringUtils.isNotBlank(kerberosPrincipal) && StringUtils.isNotBlank(kerberosKeytabFilePath)) {\n        Configuration hadoopConf = new Configuration();\n        hadoopConf.set(HConstants.ZOOKEEPER_QUORUM, kerberosPrincipal);\n        hadoopConf.set(HConstants.ZOOKEEPER_CLIENT_PORT, kerberosKeytabFilePath);\n        UserGroupInformation.setConfiguration(hadoopConf);\n        try {\n            UserGroupInformation.loginUserFromKeytab(kerberosPrincipal, kerberosKeytabFilePath);\n        } catch (IOException e) {\n            LOG.error(\"kerberos authentication failed, please check your principal or keytab file path\", e);\n            throw AddaxException.asAddaxException(HBaseSQLWriterErrorCode.KERBEROS_LOGIN_ERROR, e);\n        }\n    }\n}", "CodeBleu_score": 58.57683424272273}, {"code": "private static void kerberosAuthentication(String kerberosPrincipal, String kerberosKeytabFilePath){\n\t    if (StringUtils.isNotBlank(kerberosPrincipal) && StringUtils.isNotBlank(kerberosKeytabFilePath)) {\n        LOG.info(\"Kerberos is enabled, attempting login with principal [{}] and keytab file [{}]\", kerberosPrincipal, kerberosKeytabFilePath);\n        try {\n            Configuration configuration = new Configuration();\n            configuration.set(HConstants.ZOOKEEPER_QUORUM, HBaseConstant.HBASE_CONFIG.get(HConstants.ZOOKEEPER_QUORUM));\n            configuration.set(HConstants.ZOOKEEPER_ZNODE_PARENT, HBaseConstant.HBASE_CONFIG.get(HConstants.ZOOKEEPER_ZNODE_PARENT));\n            UserGroupInformation.setConfiguration(configuration);\n            UserGroupInformation.loginUserFromKeytab(kerberosPrincipal, kerberosKeytabFilePath);\n        } catch (Exception e) {\n            LOG.error(\"Kerberos login failed. Please check if the principal [{}] and the keytab file [{}] are correct.\", kerberosPrincipal, kerberosKeytabFilePath);\n            throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.KERBEROS_LOGIN_ERROR, e);\n        }\n    }\n}", "CodeBleu_score": 58.445825170885115}, {"code": "private static void kerberosAuthentication(String kerberosPrincipal, String kerberosKeytabFilePath){\n\t    if (StringUtils.isNotBlank(kerberosPrincipal) && StringUtils.isNotBlank(kerberosKeytabFilePath)) {\n        Configuration hadoopConf = new Configuration();\n        hadoopConf.set(HConstants.ZOOKEEPER_QUORUM, kerberosPrincipal);\n        hadoopConf.set(HConstants.ZOOKEEPER_CLIENT_PORT, kerberosKeytabFilePath);\n        try {\n            UserGroupInformation.setConfiguration(hadoopConf);\n            UserGroupInformation.loginUserFromKeytab(kerberosPrincipal, kerberosKeytabFilePath);\n        } catch (IOException e) {\n            LOG.error(\"Kerberos login error, please check if the kerberosPrincipal: [{}] and kerberosKeytabFilePath: [{}] are correct.\", kerberosPrincipal, kerberosKeytabFilePath);\n            throw AddaxException.asAddaxException(HBaseSQLWriterErrorCode.KERBEROS_LOGIN_ERROR, e);\n        }\n    }\n}", "CodeBleu_score": 55.99648369975808}]}
{"instance_id": "9ceb7f0bb717", "generation_result": [{"code": "public static Map<String, ThinClientPTable.ThinClientPColumn> parseColType(ResultSet rs)\n            throws SQLException{\n\t    Map<String, ThinClientPTable.ThinClientPColumn> columnMap = new HashMap<>();\n    ResultSetMetaData rsmd = rs.getMetaData();\n    int numColumns = rsmd.getColumnCount();\n    for (int i = 1; i <= numColumns; i++) {\n        String columnName = rsmd.getColumnLabel(i);\n        if (columnName == null || columnName.isEmpty()) {\n            throw new SQLException(\"Column name should not be null or empty\");\n        }\n        String columnTypeName = rsmd.getColumnTypeName(i);\n        if (columnTypeName == null || columnTypeName.isEmpty()) {\n            throw new SQLException(\"Column type should not be null or empty\");\n        }\n        columnMap.put(columnName, new ThinClientPTable.ThinClientPColumn(columnName, PDataType.fromSqlTypeName(columnTypeName)));\n    }\n    return columnMap;\n}", "CodeBleu_score": 44.02410908821463}, {"code": "public static Map<String, ThinClientPTable.ThinClientPColumn> parseColType(ResultSet rs)\n            throws SQLException{\n\t    Map<String, ThinClientPTable.ThinClientPColumn> columnMap = new HashMap<>();\n    ResultSetMetaData rsmd = rs.getMetaData();\n    for (int i = 1; i <= rsmd.getColumnCount(); i++) {\n        String columnName = rsmd.getColumnLabel(i);\n        if (columnName == null) {\n            throw new SQLException(\"Null column name returned from getColumnLabel\");\n        }\n        String typeName = rsmd.getColumnTypeName(i);\n        if (typeName == null) {\n            throw new SQLException(\"Null type name returned from getColumnTypeName\");\n        }\n        PDataType dataType = PDataType.fromSqlTypeName(typeName);\n        if (dataType == null) {\n            throw new SQLException(\"Unrecognized SQL type name: \" + typeName);\n        }\n        columnMap.put(columnName, new ThinClientPTable.ThinClientPColumn(columnName, dataType));\n    }\n    return columnMap;\n}", "CodeBleu_score": 44.263392090175344}, {"code": "public static Map<String, ThinClientPTable.ThinClientPColumn> parseColType(ResultSet rs)\n            throws SQLException{\n\t    ResultSetMetaData rsmd = rs.getMetaData();\n    Map<String, ThinClientPTable.ThinClientPColumn> colTypeMap = new HashMap<>();\n    for (int i = 1; i <= rsmd.getColumnCount(); i++) {\n        String colName = rsmd.getColumnLabel(i);\n        String colType = rsmd.getColumnTypeName(i);\n        if (colName == null || colType == null) {\n            throw new SQLException(\"Column name or type is null.\");\n        }\n        colTypeMap.put(colName, new ThinClientPTable.ThinClientPColumn(colName, PDataType.fromSqlTypeName(colType)));\n    }\n    return colTypeMap;\n}", "CodeBleu_score": 36.218050903728994}]}
{"instance_id": "247fc8882f6f", "generation_result": [{"code": "public static void truncateTable(Connection conn, String tableName){\n\t    try {\n        PhoenixConnection pConn = conn.unwrap(PhoenixConnection.class);\n        Admin admin = pConn.getQueryServices().getAdmin();\n        if (!admin.tableExists(TableName.valueOf(tableName))) {\n            throw AddaxException.asAddaxException(HBaseSQLWriterErrorCode.ILLEGAL_VALUE,\n                    String.format(\"table %s does not exist.\", tableName));\n        }\n        admin.disableTable(TableName.valueOf(tableName));\n        admin.truncateTable(TableName.valueOf(tableName), false);\n        LOG.debug(\"table {} truncated successfully.\", tableName);\n    } catch (IOException e) {\n        throw AddaxException.asAddaxException(HBaseSQLWriterErrorCode.ILLEGAL_VALUE, e);\n    }\n}", "CodeBleu_score": 46.70252197924351}, {"code": "public static void truncateTable(Connection conn, String tableName){\n\t    if (conn == null || StringUtils.isBlank(tableName)) {\n        throw AddaxException.asAddaxException(HBaseSQLWriterErrorCode.REQUIRED_VALUE, \"The parameter of truncateTable cannot be null.\");\n    }\n\n    PhoenixConnection pConn = conn.unwrap(PhoenixConnection.class);\n    Admin admin = null;\n    try {\n        admin = pConn.getQueryServices().getAdmin();\n        TableName hTableName = TableName.valueOf(tableName);\n        if (!admin.tableExists(hTableName)) {\n            throw AddaxException.asAddaxException(HBaseSQLWriterErrorCode.ILLEGAL_VALUE, \"The table \" + tableName + \" does not exist.\");\n        }\n        if (admin.isTableEnabled(hTableName)) {\n            admin.disableTable(hTableName);\n        }\n        admin.truncateTable(hTableName, false);\n        LOG.debug(\"The table \" + tableName + \" has been truncated.\");\n    } catch (IOException e) {\n        throw AddaxException.asAddaxException(HBaseSQLWriterErrorCode.CONNECT_HBASE_ERROR, e);\n    } finally {\n        if (null != admin) {\n            try {\n                admin.close();\n            } catch (IOException e) {\n                LOG.warn(\"The admin connection cannot be closed.\", e);\n            }\n        }\n    }\n}", "CodeBleu_score": 52.916723783769605}, {"code": "public static void truncateTable(Connection conn, String tableName){\n\t    try {\n        // Unwrap the connection to get the PhoenixConnection\n        PhoenixConnection pConn = conn.unwrap(PhoenixConnection.class);\n        // Retrieve the HBase Admin instance\n        Admin admin = pConn.getQueryServices().getAdmin();\n        // Check if the table exists\n        if (admin.tableExists(TableName.valueOf(tableName))) {\n            // Disable the table\n            admin.disableTable(TableName.valueOf(tableName));\n            // Truncate the table\n            admin.truncateTable(TableName.valueOf(tableName), false);\n            LOG.debug(\"Truncated table {}\", tableName);\n        } else {\n            LOG.debug(\"Table {} does not exist\", tableName);\n        }\n    } catch (Exception e) {\n        LOG.error(\"An error occurred while truncating table {}.\", tableName, e);\n        throw AddaxException.asAddaxException(HBaseSQLWriterErrorCode.TRUNCATE_ERROR, e);\n    }\n}", "CodeBleu_score": 44.489329826194236}]}
{"instance_id": "ac87e1b9a54e", "generation_result": [{"code": "private void addSourceFileByType(String filePath){\n\t    String fileType = StorageReaderUtil.getFileType(filePath, this.readerSplit.getSuffix());\n    if (Objects.equals(fileType, this.readerSplit.getSuffix())) {\n        LOG.info(String.format(\"add file [%s] as a candidate to be read.\", filePath));\n        this.sourceFiles.add(new Path(filePath));\n    } else {\n        LOG.error(String.format(\"the file type of [%s] is [%s] which does not match the configured file type [%s], will skip it.\", filePath, fileType, this.readerSplit.getSuffix()));\n        throw AddaxException.asAddaxException(StorageReaderErrorCode.FILE_TYPE_UNSUPPORT,\n                String.format(\"the file type of [%s] is [%s] which does not match the configured file type [%s], will skip it.\", filePath, fileType, this.readerSplit.getSuffix()));\n    }\n}", "CodeBleu_score": 35.46272008862941}, {"code": "private void addSourceFileByType(String filePath){\n\t    String fileType = this.defaultFS.getFileType(new Path(filePath));\n    if (fileType.equals(this.fileType)) {\n        this.sourceFiles.add(filePath);\n        LOG.info(String.format(\"Added [%s] to the source files list. File type: [%s].\", filePath, fileType));\n    } else {\n        LOG.error(String.format(\"Unsupported file type [%s] for file [%s].\", fileType, filePath));\n        throw AddaxException.asAddaxException(StorageReaderErrorCode.ILLEGAL_VALUE,\n                String.format(\"Unsupported file type [%s] for file [%s].\", fileType, filePath));\n    }\n}", "CodeBleu_score": 36.51793592758346}, {"code": "private void addSourceFileByType(String filePath){\n\t    String fileType = StorageReaderUtil.getFileType(filePath);\n    if (Objects.equals(fileType, this.fileType)) {\n        this.sourceFiles.add(filePath);\n        LOG.info(\"Added file [{}].\", filePath);\n    } else {\n        LOG.error(\"Unsupported file type [{}].\", fileType);\n        throw AddaxException.asAddaxException(StorageReaderErrorCode.ILLEGAL_VALUE,\n                String.format(\"\u60a8\u7684\u6587\u4ef6\u683c\u5f0f\u914d\u7f6e\u4fe1\u606f\u6709\u8bef. \u56e0\u4e3a\u60a8\u914d\u7f6e\u7684\u6587\u4ef6\u7c7b\u578b\u662f[%s] \u4f46\u662f\u6587\u4ef6 [%s] \u7684\u6587\u4ef6\u7c7b\u578b\u662f[%s]. \u8bf7\u68c0\u67e5\u60a8\u7684\u914d\u7f6e\u5e76\u4f5c\u51fa\u4fee\u6539.\", this.fileType, filePath, fileType));\n    }\n}", "CodeBleu_score": 31.36491351454008}]}
{"instance_id": "5e6a66d06162", "generation_result": [{"code": "public void sequenceFileStartRead(String sourceSequenceFilePath, Configuration readerSliceConfig,\n            RecordSender recordSender, TaskPluginCollector taskPluginCollector){\n\t    String encoding = readerSliceConfig.getString(Key.ENCODING, \"UTF-8\");\n    String nullFormat = readerSliceConfig.getString(Key.NULL_FORMAT);\n    String compress = readerSliceConfig.getString(Key.COMPRESS, \"NONE\").toUpperCase().trim();\n    // handle blank encoding\n    if (StringUtils.isBlank(encoding)) {\n        LOG.warn(\"\u60a8\u914d\u7f6e\u7684encoding\u4e3a[{}], \u4f7f\u7528\u9ed8\u8ba4\u503c[{}]\", encoding, \"UTF-8\");\n        encoding = \"UTF-8\";\n    }\n    // handle blank compress\n    if (StringUtils.isBlank(compress)) {\n        LOG.warn(\"\u60a8\u914d\u7f6e\u7684compress\u4e3a[{}], \u4f7f\u7528\u9ed8\u8ba4\u503c[{}]\", compress, \"NONE\");\n        compress = \"NONE\";\n    }\n    compress = compress.toUpperCase().trim();\n    // handle nullFormat\n    if (nullFormat == null) {\n        LOG.warn(\"\u60a8\u914d\u7f6e\u7684nullFormat\u4e3a\u7a7a, \u4f7f\u7528\u9ed8\u8ba4\u503c[{}]\", nullFormat);\n        nullFormat = \"null\";\n    }\n    List<Configuration> column = readerSliceConfig.getListConfiguration(COLUMN);\n    List<String> columnTypes = new ArrayList<>();\n    List<String> columnNames = new ArrayList<>();\n    List<String> columnValues = new ArrayList<>();\n    for (Configuration eachColumnConf : column) {\n        columnTypes.add(eachColumnConf.getString(Key.TYPE).toUpperCase());\n        columnNames.add(eachColumnConf.getString(Key.NAME));\n        columnValues.add(eachColumnConf.getString(Key.VALUE));\n    }\n    LOG.info(\"begin read sequenceFile {}\", sourceSequenceFilePath);\n    Path seqFilePath = new Path(sourceSequenceFilePath);\n    Configuration hadoopSiteParams = this.getHadoopSiteParams(readerSliceConfig);\n    JobConf conf = new JobConf(hadoopSiteParams);\n    FileSystem fs = null;\n    try {\n        fs = FileSystem.get(conf);\n        FileStatus status = fs.getFileStatus(seqFilePath);\n        if (status.isDir()) {\n           ", "CodeBleu_score": 35.26368161134813}, {"code": "public void sequenceFileStartRead(String sourceSequenceFilePath, Configuration readerSliceConfig,\n            RecordSender recordSender, TaskPluginCollector taskPluginCollector){\n\t    JobConf jobConf = new JobConf();\n    jobConf.set(\"fs.defaultFS\", this.defaultFS);\n    jobConf.set(\"mapreduce.job.user.name\", this.user);\n    jobConf.set(\"mapreduce.job.credentials.binary\", this.kerberosKeytabContent);\n    jobConf.set(\"hadoop.security.authentication\", \"kerberos\");\n    jobConf.set(\"dfs.namenode.kerberos.principal\", this.kerberosPrincipal);\n    jobConf.set(\"hadoop.security.authorization\", \"true\");\n    jobConf.set(\"hadoop.security.authentication\", \"kerberos\");\n    jobConf.set(\"hbase.security.authentication\", \"kerberos\");\n    jobConf.set(\"hbase.security.authorization\", \"true\");\n    jobConf.set(\"hbase.master.kerberos.principal\", this.kerberosPrincipal);\n    jobConf.set(\"hbase.regionserver.kerberos.principal\", this.kerberosPrincipal);\n    jobConf.set(\"hbase.security.authentication\", \"kerberos\");\n    jobConf.set(\"hbase.security.authorization\", \"true\");\n    jobConf.set(\"hbase.master.kerberos.principal\", this.kerberosPrincipal);\n    jobConf.set(\"hbase.regionserver.kerberos.principal\", this.kerberosPrincipal);\n    jobConf.set(\"hbase.zookeeper.quorum\", this.kerberosKrb5Conf);\n    jobConf.set(\"hbase.zookeeper.property.clientPort\", \"2181\");\n    jobConf.set(\"hbase.security.authentication\", \"kerberos\");\n    jobConf.set(\"hbase.master.kerberos.principal\", this.kerberosPrincipal);\n    jobConf.set(\"hbase.regionserver.kerberos.principal\", this.kerberosPrincipal);\n    jobConf.set(\"hbase.zookeeper.quorum\", this.kerberosKrb5Conf);\n    jobConf.set(\"hbase.zookeeper.property.clientPort\", \"2", "CodeBleu_score": 13.784249054696138}, {"code": "public void sequenceFileStartRead(String sourceSequenceFilePath, Configuration readerSliceConfig,\n            RecordSender recordSender, TaskPluginCollector taskPluginCollector){\n\t        LOG.info(\"Start reading sequenceFile [{}]...\", sourceSequenceFilePath);\n        org.apache.hadoop.conf.Configuration conf = new org.apache.hadoop.conf.Configuration();\n        Path seqFilePath = new Path(sourceSequenceFilePath);\n        FileSplit split = new FileSplit(seqFilePath, 0, Long.MAX_VALUE, null);\n        try {\n            SequenceFile.Reader reader = new SequenceFile.Reader(conf, SequenceFile.Reader.file(split.getPath()));\n            Writable key = (Writable) ReflectionUtils.newInstance(reader.getKeyClass(), conf);\n            Text value = new Text();\n            while (reader.next(key, value)) {\n                if (StringUtils.isBlank(value.toString())) {\n                    continue;\n                }\n                StorageReaderUtil.transportOneRecord(recordSender,\n                        readerSliceConfig,\n                        taskPluginCollector,\n                        value.toString());\n            }\n            recordSender.flush();\n        } catch (Exception e) {\n            String message = String.format(\"SequenceFileReader read source file[%s] error\", sourceSequenceFilePath);\n            LOG.error(message);\n            throw AddaxException.asAddaxException(StorageReaderErrorCode.READ_FILE_ERROR, message, e);\n        }\n    }", "CodeBleu_score": 63.26208887911593}]}
{"instance_id": "c450f959616c", "generation_result": [{"code": "public boolean checkHdfsFileType(String filepath, String specifiedFileType){\n\t    if (StringUtils.isBlank(specifiedFileType)) {\n        return false;\n    }\n    specifiedFileType = specifiedFileType.toLowerCase().trim();\n    if (\"orc\".equals(specifiedFileType)) {\n        return checkOrcFileType(filepath);\n    } else if (\"rc\".equals(specifiedFileType)) {\n        return checkRcFileType(filepath);\n    } else if (\"sequence\".equals(specifiedFileType)) {\n        return checkSequenceFileType(filepath);\n    } else if (\"parquet\".equals(specifiedFileType)) {\n        return checkParquetFileType(filepath);\n    } else if (\"csv\".equals(specifiedFileType)) {\n        return checkCsvFileType(filepath);\n    } else if (\"text\".equals(specifiedFileType)) {\n        return checkTextFileType(filepath);\n    } else {\n        return false;\n    }\n}", "CodeBleu_score": 21.67419615919811}, {"code": "public boolean checkHdfsFileType(String filepath, String specifiedFileType){\n\t\n    String fileType = \"\";\n\n    try {\n        FileSystem fs = FileSystem.get(new JobConf());\n        Path path = new Path(filepath);\n        if (fs.isFile(path)) {\n            fileType = fs.getFileStatus(path).getPath().getName().substring(fs.getFileStatus(path).getPath().getName().lastIndexOf(\".\") + 1);\n        } else {\n            fileType = fs.getFileStatus(path).getPath().getName().substring(fs.getFileStatus(path).getPath().getName().lastIndexOf(\".\") + 1);\n        }\n    } catch (Exception e) {\n        LOG.error(\"Failed to get the file type: {}\", e.getMessage());\n        throw AddaxException.asAddaxException(StorageReaderErrorCode.ILLEGAL_VALUE, \"Failed to get the file type: \" + e.getMessage());\n    }\n\n    if (specifiedFileType.equals(fileType)) {\n        return true;\n    } else {\n        return false;\n    }\n}", "CodeBleu_score": 32.62909888286878}, {"code": "public boolean checkHdfsFileType(String filepath, String specifiedFileType){\n\t    FileSystem fs = null;\n    try {\n        Configuration conf = new Configuration();\n        conf.set(\"fs.defaultFS\", \"hdfs://nameservice1\");\n        conf.set(\"dfs.nameservices\", \"nameservice1\");\n        conf.set(\"dfs.ha.namenodes.nameservice1\", \"nn1,nn2\");\n        conf.set(\"dfs.namenode.rpc-address.nameservice1.nn1\", \"10.232.24.122:8020\");\n        conf.set(\"dfs.namenode.rpc-address.nameservice1.nn2\", \"10.232.24.123:8020\");\n        conf.set(\"dfs.client.failover.proxy.provider.nameservice1\", \"org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider\");\n        conf.set(\"dfs.ha.automatic-failover.enabled\", \"true\");\n        conf.set(\"dfs.client.use.datanode.hostname\", \"true\");\n        conf.set(\"dfs.namenode.datanode.registration.ip-hostname-check\", \"false\");\n        conf.set(\"dfs.client.use.legacy.blockreader.local\", \"true\");\n        conf.set(\"dfs.client.read.shortcircuit\", \"true\");\n        conf.set(\"dfs.domain.socket.path\", \"/var/lib/hadoop-hdfs/dn_socket\");\n        conf.set(\"dfs.client.read.shortcircuit.streams.cache.size\", \"1024\");\n        conf.set(\"dfs.client.read.shortcircuit.streams.cache.size.expiry.ms\", \"30000\");\n        UserGroupInformation.setConfiguration(conf);\n        UserGroupInformation.loginUserFromKeytab(\"hive/cdh1@HADOOP.COM\", \"/etc/security/keytabs/hive.service.keytab\");\n        fs = FileSystem.get(conf);\n        Path path = new Path(filepath);\n        if (!fs.exists(path)) {\n           ", "CodeBleu_score": 27.28271163683511}]}
{"instance_id": "1bf487d2cc64", "generation_result": [{"code": "public static void closeConnection(Connection hConnection){\n\t    if (hConnection != null) {\n        try {\n            hConnection.close();\n        } catch (IOException e) {\n            throw AddaxException.asAddaxException(HBase20xWriterErrorCode.CLOSE_HBASE_CONNECTION_ERROR, e);\n        }\n    }\n}", "CodeBleu_score": 61.125634395920805}, {"code": "public static void closeConnection(Connection hConnection){\n\t    if (hConnection != null) {\n        try {\n            hConnection.close();\n        } catch (IOException e) {\n            throw AddaxException.asAddaxException(HBase20xSQLWriterErrorCode.CLOSE_HBASE_CONNECTION_ERROR, e);\n        }\n    }\n}", "CodeBleu_score": 60.76398734923561}, {"code": "public static void closeConnection(Connection hConnection){\n\t    if (hConnection != null) {\n        try {\n            hConnection.close();\n        } catch (IOException e) {\n            throw AddaxException.asAddaxException(HBase20xSQLWriterErrorCode.CLOSE_HBASE_CONNECTION_ERROR, e);\n        }\n    }\n}", "CodeBleu_score": 60.76398734923561}]}
{"instance_id": "680728cbc3ec", "generation_result": [{"code": "public static void closeAdmin(Admin admin){\n\t    if (null != admin) {\n        try {\n            admin.close();\n        } catch (IOException e) {\n            throw AddaxException.asAddaxException(HBase11xWriterErrorCode.CLOSE_HBASE_ADMIN_ERROR, e);\n        }\n    }\n}", "CodeBleu_score": 79.71420245922396}, {"code": "public static void closeAdmin(Admin admin){\n\t    if (admin != null) {\n        try {\n            admin.close();\n        } catch (IOException e) {\n            throw AddaxException.asAddaxException(HBase20xSQLWriterErrorCode.CLOSE_HBASE_CONNECTION_ERROR, e);\n        }\n    }\n}", "CodeBleu_score": 59.49646796019129}, {"code": "public static void closeAdmin(Admin admin){\n\t    if (admin != null) {\n        try {\n            admin.close();\n        } catch (IOException e) {\n            throw AddaxException.asAddaxException(HBaseWriterErrorCode.CLOSE_HBASE_CONNECTION_ERROR, e);\n        }\n    }\n}", "CodeBleu_score": 60.03696944021233}]}
{"instance_id": "ce50bd53abef", "generation_result": [{"code": "private void convertCellToLine(Cell cell, Record record)\n            throws Exception{\n\t        Map<String, Object> map = new HashMap<>();\n        byte[] rowkey = cell.getRowArray();\n        String rowkeyName = this.userConfig.getString(Key.ROWKEY_COLUMN);\n        if (StringUtils.isNotBlank(rowkeyName)) {\n            map.put(rowkeyName, new String(rowkey, StandardCharsets.UTF_8));\n        } else {\n            map.put(HBaseConstant.DEFAULT_ROWKEY_NAME, new String(rowkey, StandardCharsets.UTF_8));\n        }\n        // \u6dfb\u52a0\u65f6\u95f4\u6233\n        if (this.userConfig.getBool(Key.IS_ADD_ROWKEY_TIMESTAMP, true)) {\n            map.put(HBaseConstant.DEFAULT_TIMESTAMP_NAME, cell.getTimestamp());\n        }\n        // \u6dfb\u52a0\u5217\u65cf\n        String familyName = Bytes.toString(CellUtil.cloneFamily(cell));\n        map.put(HBaseConstant.DEFAULT_FAMILY_NAME, familyName);\n        // \u6dfb\u52a0\u5217\u540d\n        String qualifierName = Bytes.toString(CellUtil.cloneQualifier(cell));\n        map.put(HBaseConstant.DEFAULT_QUALIFIER_NAME, qualifierName);\n        // \u6dfb\u52a0\u503c\n        String valueName = this.userConfig.getString(Key.VALUE_COLUMN);\n        if (StringUtils.isNotBlank(valueName)) {\n            map.put(valueName, new String(CellUtil.cloneValue(cell), StandardCharsets.UTF_8));\n        } else {\n            map.put(HBaseConstant.DEFAULT_VALUE_NAME, new String(CellUtil.cloneValue(cell), StandardCharsets.UTF_8));\n        }\n        // \u6dfb\u52a0\u5176\u4ed6\u5217\n        List<String> userColumn = this.userConfig.getList(Key.USER_COLUMN, String.class);\n        if (userColumn != null && !userColumn.isEmpty()) {\n            for (String column : userColumn) {\n                String[] columnInfo = column.split(\":\");\n                String type = columnInfo[1];\n                String name = columnInfo[2];\n               ", "CodeBleu_score": 34.04282426141504}, {"code": "private void convertCellToLine(Cell cell, Record record)\n            throws Exception{\n\t        Map<String, Object> row = new HashMap<String, Object>();\n        // \u8bbe\u7f6erowkey\n        String rowkeyColumnType = this.hbaseConfig.getString(HBaseKey.ROWKEY_COLUMN_TYPE);\n        String rowkeyColumnValue = this.hbaseConfig.getString(HBaseKey.ROWKEY_COLUMN_VALUE);\n        if (StringUtils.isBlank(rowkeyColumnType)) {\n            rowkeyColumnType = HBaseConstant.DEFAULT_ROWKEY_COLUMN_TYPE;\n        }\n        if (StringUtils.isBlank(rowkeyColumnValue)) {\n            rowkeyColumnValue = HBaseConstant.DEFAULT_ROWKEY_COLUMN_VALUE;\n        }\n        byte[] rowkeyBytes = CellUtil.cloneRow(cell);\n        Object rowkeyCellValue = HbaseUtil.convertBytesToAssignType(rowkeyBytes, rowkeyColumnType, rowkeyColumnValue);\n        record.addColumn(new LongColumn(rowkeyCellValue));\n        // \u8bbe\u7f6e\u5217\u65cf\n        String family = Bytes.toString(CellUtil.cloneFamily(cell));\n        record.addColumn(new LongColumn(family));\n        // \u8bbe\u7f6e\u5217\u540d\n        String qualifier = Bytes.toString(CellUtil.cloneQualifier(cell));\n        record.addColumn(new LongColumn(qualifier));\n        // \u8bbe\u7f6e\u65f6\u95f4\u6233\n        long timestamp = cell.getTimestamp();\n        record.addColumn(new LongColumn(timestamp));\n        // \u8bbe\u7f6e\u503c\n        String columnValueType = this.hbaseConfig.getString(HBaseKey.COLUMN_VALUE_TYPE);\n        if (StringUtils.isBlank(columnValueType)) {\n            columnValueType = HBaseConstant.DEFAULT_COLUMN_VALUE_TYPE;\n        }\n        byte[] valueBytes = CellUtil.cloneValue(cell);\n        Object columnValue = HbaseUtil.convertBytesToAssignType(valueBytes, columnValueType, null);\n        record.addColumn(new LongColumn(columnValue));\n    }", "CodeBleu_score": 45.20155337230292}, {"code": "private void convertCellToLine(Cell cell, Record record)\n            throws Exception{\n\t        Map<String, Object> row = new HashMap<String, Object>();\n        // row key\n        byte[] rowKey = cell.getRowArray();\n        int rowKeyOffset = cell.getRowOffset();\n        int rowKeyLength = cell.getRowLength();\n        String rowKeyType = this.configuration.getString(HBaseKey.ROWKEY_TYPE);\n        if (HBaseConstant.STRING_TYPE.equals(rowKeyType)) {\n            row.put(HBaseConstant.ROWKEY_FLAG, new String(rowKey, rowKeyOffset, rowKeyLength, StandardCharsets.UTF_8));\n        } else if (HBaseConstant.LONG_TYPE.equals(rowKeyType)) {\n            row.put(HBaseConstant.ROWKEY_FLAG, Bytes.toLong(rowKey, rowKeyOffset, rowKeyLength));\n        } else {\n            throw DataXException.asDataXException(HBaseWriterErrorCode.ILLEGAL_VALUE,\n                    String.format(\"Hbasereader \u4e0d\u652f\u6301 rowkey \u7c7b\u578b: [%s]\", rowKeyType));\n        }\n        // timestamp\n        long timestamp = cell.getTimestamp();\n        row.put(HBaseConstant.TIMESTAMP_FLAG, new LongColumn(timestamp));\n        // family\n        String family = Bytes.toString(cell.getFamilyArray(), cell.getFamilyOffset(), cell.getFamilyLength());\n        row.put(HBaseConstant.FAMILY_FLAG, family);\n        // qualifier\n        String qualifier = Bytes.toString(cell.getQualifierArray(), cell.getQualifierOffset(), cell.getQualifierLength());\n        row.put(HBaseConstant.QUALIFIER_FLAG, qualifier);\n        // value\n        String value = Bytes.toString(cell.getValueArray(), cell.getValueOffset(), cell.getValueLength());\n        row.put(HBaseConstant.VALUE_FLAG, value);\n\n        // \u6dfb\u52a0\u5230line\u4e2d\n        for (Map.Entry<String, Object> entry : row.entrySet()) {\n            record.addColumn(new StringColumn(entry.getValue().toString()));\n        }\n    }", "CodeBleu_score": 36.425483347789935}]}
{"instance_id": "29e8f3a99f0c", "generation_result": [{"code": "public static byte[] convertUserStartRowkey(Configuration configuration){\n\t    String startRowKey = configuration.getString(HBaseKey.START_ROW_KEY, \"\");\n    if (StringUtils.isBlank(startRowKey)) {\n        return HConstants.EMPTY_START_ROW;\n    }\n    boolean isBinaryRowkey = configuration.getBool(HBaseKey.IS_BINARY_ROWKEY, false);\n    return isBinaryRowkey ? Bytes.toBytesBinary(startRowKey) : Bytes.toBytes(startRowKey);\n}", "CodeBleu_score": 50.722161716109035}, {"code": "public static byte[] convertUserStartRowkey(Configuration configuration){\n\t    String startRowkey = configuration.getString(HBaseKey.START_ROWKEY);\n    if (StringUtils.isBlank(startRowkey)) {\n        return HConstants.EMPTY_START_ROW;\n    }\n    return convertRowKey(configuration, startRowkey);\n}", "CodeBleu_score": 47.199684460613526}, {"code": "public static byte[] convertUserStartRowkey(Configuration configuration){\n\t    String startRowkey = configuration.getString(HBaseKey.START_ROW_KEY);\n    if (StringUtils.isBlank(startRowkey)) {\n        return HConstants.EMPTY_START_ROW;\n    }\n    return convertRowKey(startRowkey, configuration);\n}", "CodeBleu_score": 55.03837940311236}]}
{"instance_id": "f5ad51545b10", "generation_result": [{"code": "public static byte[] convertInnerStartRowkey(Configuration configuration){\n\t    String startRowkey = configuration.getString(HBaseKey.START_ROWKEY);\n    if (StringUtils.isBlank(startRowkey)) {\n        return HConstants.EMPTY_START_ROW;\n    }\n    return Bytes.toBytes(startRowkey);\n}", "CodeBleu_score": 73.08344165592572}, {"code": "public static byte[] convertInnerStartRowkey(Configuration configuration){\n\t    String startRowkey = configuration.getString(HBaseKey.START_ROWKEY);\n    if (StringUtils.isBlank(startRowkey)) {\n        return HConstants.EMPTY_START_ROW;\n    }\n    return Bytes.toBytes(startRowkey);\n}", "CodeBleu_score": 73.08344165592572}, {"code": "public static byte[] convertInnerStartRowkey(Configuration configuration){\n\t    String startRowkey = configuration.getString(HBaseKey.START_ROW_KEY);\n    if (StringUtils.isBlank(startRowkey)) {\n        return HConstants.EMPTY_START_ROW;\n    } else {\n        return Bytes.toBytes(startRowkey);\n    }\n}", "CodeBleu_score": 74.23544294375095}]}
{"instance_id": "8618eef8b0e9", "generation_result": [{"code": "public KafkaTbQueueMsg(ConsumerRecord<String, byte[]> record){\n\t    this.key = UUID.fromString(record.key());\n    this.data = record.value();\n    this.headers = new DefaultTbQueueMsgHeaders(record.headers());\n}", "CodeBleu_score": 42.781297148070884}, {"code": "public KafkaTbQueueMsg(ConsumerRecord<String, byte[]> record){\n\t    id = new UUID(record.key().getMostSignificantBits(), record.key().getLeastSignificantBits());\n    headers = new DefaultTbQueueMsgHeaders(record.headers());\n    data = record.value();\n}", "CodeBleu_score": 37.048840194769475}, {"code": "public KafkaTbQueueMsg(ConsumerRecord<String, byte[]> record){\n\t    id = new UUID(record.key().getBytes(), 0);\n    headers = new DefaultTbQueueMsgHeaders(record.headers());\n    data = record.value();\n}", "CodeBleu_score": 33.42743558446246}]}
{"instance_id": "46484df184dd", "generation_result": [{"code": "public TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> createTransportNotificationsMsgProducer(){\n\t    TbKafkaProducerTemplate.TbKafkaProducerTemplateBuilder<TbProtoQueueMsg<ToTransportMsg>> templateBuilder = TbKafkaProducerTemplate.builder();\n    templateBuilder.settings(tbQueueTransportNotificationSettings.getProducerSettings());\n    templateBuilder.clientId(\"tb-transport-notifications-\" + serviceInfoProvider.getServiceId());\n    templateBuilder.defaultTopic(tbQueueTransportNotificationSettings.getNotificationsTopic());\n    templateBuilder.admin(kafkaAdmin);\n    return templateBuilder.build();\n}", "CodeBleu_score": 67.83935979352495}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> createTransportNotificationsMsgProducer(){\n\t    TbKafkaProducerTemplate.TbKafkaProducerTemplateBuilder<TbProtoQueueMsg<ToTransportMsg>> requestBuilder = TbKafkaProducerTemplate.builder();\n    requestBuilder.settings(kafkaSettings);\n    requestBuilder.clientId(\"tb-transport-\" + serviceInfoProvider.getServiceId());\n    requestBuilder.defaultTopic(transportNotificationSettings.getNotificationsTopic());\n    requestBuilder.admin(kafkaAdmin);\n    return requestBuilder.build();\n}", "CodeBleu_score": 80.1523183140709}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> createTransportNotificationsMsgProducer(){\n\t    TbKafkaProducerTemplate.TbKafkaProducerTemplateBuilder<TbProtoQueueMsg<ToTransportMsg>> builder = TbKafkaProducerTemplate.builder();\n    builder.settings(kafkaSettings);\n    builder.clientId(\"tb-core-\" + serviceInfoProvider.getServiceId());\n    builder.defaultTopic(coreSettings.getTransportNotificationTopic());\n    builder.admin(admin);\n    return builder.build();\n}", "CodeBleu_score": 64.7928327163475}]}
{"instance_id": "4ac56ef9f89a", "generation_result": [{"code": "public TbQueueConsumer<TbProtoQueueMsg<ToCoreNotificationMsg>> createToCoreNotificationsMsgConsumer(){\n\t    TbKafkaConsumerTemplate.TbKafkaConsumerTemplateBuilder<TbProtoQueueMsg<ToCoreNotificationMsg>> consumerTemplateBuilder = TbKafkaConsumerTemplate.builder();\n    consumerTemplateBuilder.settings(tbQueueCoreSettings.getCoreSettings());\n    consumerTemplateBuilder.topic(TopicPartitionInfo.CORE_TOPIC);\n    consumerTemplateBuilder.clientId(\"tb-core-to-core-notifications\");\n    consumerTemplateBuilder.groupId(\"tb-core-to-core-notifications\");\n    consumerTemplateBuilder.decoder(msg -> new TbProtoQueueMsg<>(msg.getKey(), ToCoreNotificationMsg.parseFrom(msg.getData())));\n    consumerTemplateBuilder.admin(coreAdmin);\n    consumerTemplateBuilder.statsService(coreStatsService);\n    return consumerTemplateBuilder.build();\n}", "CodeBleu_score": 51.726868301387796}, {"code": "public TbQueueConsumer<TbProtoQueueMsg<ToCoreNotificationMsg>> createToCoreNotificationsMsgConsumer(){\n\t    TbKafkaConsumerTemplate.TbKafkaConsumerTemplateBuilder<TbProtoQueueMsg<ToCoreNotificationMsg>> consumerBuilder = TbKafkaConsumerTemplate.builder();\n    consumerBuilder.settings(tbQueueCoreSettings.getQueueProperties()).topic(TopicPartitionInfo.CORE_NOTIFICATION_TOPIC);\n    consumerBuilder.clientId(\"tb-core-to-core-notifications\");\n    consumerBuilder.groupId(\"tb-core-to-core-notifications\");\n    consumerBuilder.decoder(msg -> new TbProtoQueueMsg<>(msg.getKey(), ToCoreNotificationMsg.parseFrom(msg.getData())));\n    consumerBuilder.admin(coreAdmin);\n    consumerBuilder.statsService(coreStatsService);\n    return consumerBuilder.build();\n}", "CodeBleu_score": 55.748718992419874}, {"code": "public TbQueueConsumer<TbProtoQueueMsg<ToCoreNotificationMsg>> createToCoreNotificationsMsgConsumer(){\n\t    TbKafkaConsumerTemplate.TbKafkaConsumerTemplateBuilder<TbProtoQueueMsg<ToCoreNotificationMsg>> consumerTemplateBuilder = TbKafkaConsumerTemplate.builder();\n    consumerTemplateBuilder.settings(tbQueueCoreSettings.getCoreSettings());\n    consumerTemplateBuilder.topic(TopicPartitionInfo.getNotificationsTopic(ServiceType.TB_CORE, serviceInfoProvider, tbQueueCoreSettings));\n    consumerTemplateBuilder.clientId(\"tb-core-to-core-notifications-consumer\");\n    consumerTemplateBuilder.groupId(\"tb-core-to-core-notifications-consumer\");\n    consumerTemplateBuilder.decoder(msg -> new TbProtoQueueMsg<>(msg.getKey(), ToCoreNotificationMsg.parseFrom(msg.getData())));\n    consumerTemplateBuilder.admin(admin);\n    consumerTemplateBuilder.statsService(statsService);\n    return consumerTemplateBuilder.build();\n}", "CodeBleu_score": 56.08380798367799}]}
{"instance_id": "e13a82b26338", "generation_result": [{"code": "protected void doSubscribe(List<String> topicNames){\n\t    if (!topicNames.isEmpty()) {\n        // Create topics if necessary.\n        for (String topic : topicNames) {\n            try {\n                // Create topic if necessary.\n                if (admin.topicExists(topic)) {\n                    log.info(\"Topic [{}] already exists.\", topic);\n                } else {\n                    admin.createTopic(topic);\n                    log.info(\"Topic [{}] has been successfully created.\", topic);\n                }\n            } catch (IOException e) {\n                log.error(\"Failed to create topic [{}]\", topic, e);\n            }\n        }\n        // Subscribe consumer to the list of topics.\n        consumer.subscribe(topicNames);\n    } else {\n        // Unsubscribe consumer from all topics.\n        consumer.unsubscribe();\n        log.info(\"Consumer has been unsubscribed from all topics\");\n    }\n}", "CodeBleu_score": 57.3984875136792}, {"code": "protected void doSubscribe(List<String> topicNames){\n\t    if (topicNames.isEmpty()) {\n        log.info(\"No topic names were provided. Unsubscribing consumer {} from all topics.\", getConsumerGroup());\n        consumer.unsubscribe();\n    } else {\n        log.info(\"Subscribing consumer {} to topics {}\", getConsumerGroup(), topicNames);\n        consumer.subscribe(topicNames);\n    }\n}", "CodeBleu_score": 54.01391658257656}, {"code": "protected void doSubscribe(List<String> topicNames){\n\t    if (topicNames.isEmpty()) {\n        log.info(\"No topics provided to subscribe to. Unsubscribing from all topics.\");\n        consumer.unsubscribe();\n    } else {\n        log.info(\"Subscribing to topics: {}\", topicNames);\n        consumer.subscribe(topicNames);\n    }\n}", "CodeBleu_score": 60.511663638401714}]}
{"instance_id": "8a20d0b48703", "generation_result": [{"code": "protected List<ConsumerRecord<String, byte[]>> doPoll(long durationInMillis){\n\t    StopWatch stopWatch = new StopWatch();\n    stopWatch.start();\n    log.trace(\"[{}] Polling for max [{}] messages\", topic, durationInMillis);\n    consumer.poll(Duration.ofMillis(durationInMillis));\n    stopWatch.stop();\n    log.trace(\"[{}] Polling duration: [{}]\", topic, stopWatch.getTotalTimeMillis());\n    ConsumerRecords<String, byte[]> records = consumer.poll(Duration.ofMillis(durationInMillis));\n    if (records.isEmpty()) {\n        return Collections.emptyList();\n    }\n    List<ConsumerRecord<String, byte[]>> recordList = new ArrayList<>();\n    records.forEach(recordList::add);\n    return recordList;\n}", "CodeBleu_score": 72.36120306589076}, {"code": "protected List<ConsumerRecord<String, byte[]>> doPoll(long durationInMillis){\n\t    StopWatch stopWatch = new StopWatch();\n    stopWatch.start();\n    log.trace(\"[{}] Polling for max {} ms [{}]\", getTopic(), durationInMillis, getId());\n    List<ConsumerRecord<String, byte[]>> data = new ArrayList<>();\n    ConsumerRecords<String, byte[]> records = consumer.poll(Duration.ofMillis(durationInMillis));\n    stopWatch.stop();\n    if (records.isEmpty()) {\n        log.trace(\"[{}] No records found [{}]\", getTopic(), getId());\n    } else {\n        records.forEach(record -> {\n            log.trace(\"[{}] Received: {}\", getTopic(), record.value().length);\n            data.add(record);\n        });\n    }\n    if (log.isTraceEnabled()) {\n        log.trace(\"[{}] Polling took {} ms [{}]\", getTopic(), stopWatch.getTotalTimeMillis(), getId());\n    }\n    return data;\n}", "CodeBleu_score": 61.12879999018751}, {"code": "protected List<ConsumerRecord<String, byte[]>> doPoll(long durationInMillis){\n\t    StopWatch stopWatch = new StopWatch();\n    stopWatch.start();\n    log.trace(\"Executing kafka consumer poll using duration {} ms for topic {}\", durationInMillis, getTopic());\n    ConsumerRecords<String, byte[]> records = consumer.poll(Duration.ofMillis(durationInMillis));\n    stopWatch.stop();\n    log.trace(\"Kafka consumer poll for topic {} took {} ms\", getTopic(), stopWatch.getTotalTimeMillis());\n    if (records.isEmpty()) {\n        return Collections.emptyList();\n    }\n    List<ConsumerRecord<String, byte[]>> recordsList = new ArrayList<>(records.count());\n    records.forEach(recordsList::add);\n    return recordsList;\n}", "CodeBleu_score": 73.67171335718437}]}
{"instance_id": "328e4c39a8e1", "generation_result": [{"code": "public void onMsg(TbContext ctx, TbMsg msg){\n\t    if (this.isInitialized) {\n        String topic = this.getTopic(msg);\n        String key = this.getKey(msg);\n        byte[] value = this.getValue(msg);\n        Headers headers = this.getHeaders(msg);\n        this.publish(ctx, msg, topic, key, value, headers);\n    } else {\n        ctx.tellFailure(msg, new TbNodeException(\"Kafka node is not initialized!\"));\n    }\n}", "CodeBleu_score": 18.14811407169532}, {"code": "public void onMsg(TbContext ctx, TbMsg msg){\n\t    if (kafkaProducer == null) {\n        ctx.tellFailure(msg, new ThingsboardKafkaClientError(\"Kafka client is not initialized!\"));\n    } else {\n        String topic = TbNodeUtils.processPattern(topicPattern, msg.getMetadata());\n        String key = TbNodeUtils.processPattern(keyPattern, msg.getMetadata());\n        String msgBody = msg.getData();\n        if (msg.getData().getClass().isAssignableFrom(String.class)) {\n            msgBody = msg.getData().toString();\n        } else {\n            msgBody = new String(msg.getData().getBytes(), StandardCharsets.UTF_8);\n        }\n        ProducerRecord<String, String> record = new ProducerRecord<>(topic, key, msgBody);\n        Headers headers = new RecordHeaders();\n        TbMsgMetaData metaData = msg.getMetaData().getData();\n        for (String key : metaData.keySet()) {\n            RecordHeader header = new RecordHeader(key, metaData.get(key).toString().getBytes(Charset.forName(\"UTF-8\")));\n            headers.add(header);\n        }\n        record.headers(headers);\n        kafkaProducer.send(record, (RecordMetadata metadata, Exception exception) -> {\n            if (exception == null) {\n                log.trace(\"Kafka record sent to topic {} with offset {}\", metadata.topic(), metadata.offset());\n                ctx.tellSuccess(msg);\n            } else {\n                log.error(\"Failed to send kafka record to topic {}\", topic, exception);\n                ctx.tellFailure(msg, exception);\n            }\n        });\n    }\n}", "CodeBleu_score": 37.61232901493473}, {"code": "public void onMsg(TbContext ctx, TbMsg msg){\n\t    if (this.error != null) {\n        ctx.tellFailure(msg, this.error);\n    } else {\n        String topic = this.topicPattern.matcher(msg.getMetaData().getValue(\"topic\")).replaceAll(\"\");\n        String key = this.keyPattern.matcher(msg.getMetaData().getValue(\"key\")).replaceAll(\"\");\n        ProducerRecord<String, String> record = new ProducerRecord<>(topic, key, msg.getData());\n        Headers headers = new RecordHeaders();\n        TbMsgMetaData metaData = msg.getMetaData();\n        metaData.getData().forEach((k, v) -> {\n            headers.add(new RecordHeader(k, v.getBytes(StandardCharsets.UTF_8)));\n        });\n        record.headers(headers);\n        this.producer.send(record, (metadata, exception) -> {\n            if (exception == null) {\n                ctx.tellSuccess(msg);\n            } else {\n                ctx.tellFailure(msg, exception);\n            }\n\n        });\n    }\n}", "CodeBleu_score": 39.23915141974816}]}
{"instance_id": "35f835e8c387", "generation_result": [{"code": "protected void publish(TbContext ctx, TbMsg msg, String topic, String key){\n\t    Properties props = new Properties();\n    props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, brokers);\n    props.put(ProducerConfig.CLIENT_ID_CONFIG, clientId);\n    props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n    props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n    props.put(ProducerConfig.ACKS_CONFIG, acks);\n    props.put(ProducerConfig.RETRIES_CONFIG, retries);\n    props.put(ProducerConfig.BATCH_SIZE_CONFIG, batchSize);\n    props.put(ProducerConfig.LINGER_MS_CONFIG, linger);\n    props.put(ProducerConfig.BUFFER_MEMORY_CONFIG, bufferMemory);\n    props.put(ProducerConfig.COMPRESSION_TYPE_CONFIG, compressionType);\n    if (BooleanUtils.isTrue(useConfluent)) {\n        props.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, truststoreLocation);\n        props.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, truststorePassword);\n        props.put(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG, truststoreType);\n        props.put(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, keystoreLocation);\n        props.put(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, keystorePassword);\n        props.put(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG, keystoreType);\n        props.put(SslConfigs.SSL_KEY_PASSWORD_CONFIG, keyPassword);\n        props.put(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG, endpointIdentificationAlgorithm);\n        props.put(SslConfigs.SSL_SECURE_RANDOM_IMPLEMENTATION_CONFIG, secureRandomImplementation);\n    }\n   ", "CodeBleu_score": 17.838706023809422}, {"code": "protected void publish(TbContext ctx, TbMsg msg, String topic, String key){\n\t    try {\n        Properties props = new Properties();\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaServer);\n        props.put(ProducerConfig.CLIENT_ID_CONFIG, clientId);\n        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        props.put(ProducerConfig.ACKS_CONFIG, acks);\n        props.put(ProducerConfig.RETRIES_CONFIG, retries);\n        props.put(ProducerConfig.BATCH_SIZE_CONFIG, batchSize);\n        props.put(ProducerConfig.LINGER_MS_CONFIG, lingerMs);\n        props.put(ProducerConfig.BUFFER_MEMORY_CONFIG, bufferMemory);\n        props.put(ProducerConfig.MAX_BLOCK_MS_CONFIG, maxBlockMs);\n        props.put(ProducerConfig.COMPRESSION_TYPE_CONFIG, compressionType);\n        props.put(ProducerConfig.MAX_REQUEST_SIZE_CONFIG, maxRequestSize);\n        props.put(ProducerConfig.RECEIVE_BUFFER_CONFIG, receiveBufferBytes);\n        props.put(ProducerConfig.SEND_BUFFER_CONFIG, sendBufferBytes);\n        props.put(ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION, maxInFlightRequestsPerConnection);\n        props.put(ProducerConfig.METADATA_MAX_AGE_CONFIG, metadataMaxAge);\n        props.put(ProducerConfig.METADATA_MAX_IDLE_CONFIG, metadataMaxIdle);\n        props.put(ProducerConfig.PARTITIONER_CLASS_CONFIG, partitioner);\n        props.put(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, interceptorClasses);\n        props.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG, enableIdempotence);\n        props.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, transactionalId);", "CodeBleu_score": 16.720684961721865}, {"code": "protected void publish(TbContext ctx, TbMsg msg, String topic, String key){\n\t    String message = msg.getData().toString();\n    String metadata = msg.getMetaData().getData().toString();\n    String bootstrapServers = TbNodeUtils.processPattern(bootstrapServersPattern, metadata);\n    String acks = TbNodeUtils.processPattern(acksPattern, metadata);\n    String retries = TbNodeUtils.processPattern(retriesPattern, metadata);\n    String keySerializer = TbNodeUtils.processPattern(keySerializerPattern, metadata);\n    String valueSerializer = TbNodeUtils.processPattern(valueSerializerPattern, metadata);\n    String topicPattern = TbNodeUtils.processPattern(topicPattern, metadata);\n    String metadataPattern = TbNodeUtils.processPattern(metadataPattern, metadata);\n    String headersPattern = TbNodeUtils.processPattern(headersPattern, metadata);\n    String clientIdPattern = TbNodeUtils.processPattern(clientIdPattern, metadata);\n    String sslTruststoreLocationPattern = TbNodeUtils.processPattern(sslTruststoreLocationPattern, metadata);\n    String sslTruststorePasswordPattern = TbNodeUtils.processPattern(sslTruststorePasswordPattern, metadata);\n    String sslKeystoreLocationPattern = TbNodeUtils.processPattern(sslKeystoreLocationPattern, metadata);\n    String sslKeystorePasswordPattern = TbNodeUtils.processPattern(sslKeystorePasswordPattern, metadata);\n    String sslKeyPasswordPattern = TbNodeUtils.processPattern(sslKeyPasswordPattern, metadata);\n    String securityProtocolPattern = TbNodeUtils.processPattern(securityProtocolPattern, metadata);\n    String saslMechanismPattern = TbNodeUtils.processPattern(saslMechanismPattern, metadata);\n    String saslJaasConfigPattern = TbNodeUtils.processPattern(saslJaasConfigPattern, metadata);\n    String saslKerberosServiceNamePattern = TbNodeUtils.processPattern(saslKerberosServiceNamePattern, metadata);\n    String saslKerberosKinitCmdPattern = TbNodeUtils.processPattern(saslKerberosKinitCmdPattern, metadata);\n    String saslKerberosMinTimeBeforeReloginPattern = TbNodeUtils", "CodeBleu_score": 19.734749356049587}]}
{"instance_id": "111a11189434", "generation_result": [{"code": "public void destroy(){\n\t    if (producer != null) {\n        try {\n            producer.close();\n        } catch (Exception e) {\n            log.error(\"Failed to close the Kafka producer. Reason: {}\", e.getMessage(), e);\n        }\n    }\n}", "CodeBleu_score": 65.86381527637155}, {"code": "public void destroy(){\n\t    if (producer != null) {\n        try {\n            producer.close();\n        } catch (Exception e) {\n            log.error(\"Failed to close the Kafka producer!\", e);\n        }\n    }\n}", "CodeBleu_score": 71.68339435666181}, {"code": "public void destroy(){\n\t    if (producer != null) {\n        try {\n            producer.close();\n        } catch (Exception e) {\n            log.error(\"Failed to close the Kafka producer!\", e);\n        }\n    }\n}", "CodeBleu_score": 71.68339435666181}]}
{"instance_id": "f5d2487100a9", "generation_result": [{"code": "public TbQueueProducer<TbProtoQueueMsg<ToRuleEngineMsg>> createRuleEngineMsgProducer(){\n\t    TbKafkaProducerTemplate.TbKafkaProducerTemplateBuilder<TbProtoQueueMsg<ToRuleEngineMsg>> ruleEngineMsgProducerBuilder = TbKafkaProducerTemplate.builder();\n    ruleEngineMsgProducerBuilder.settings(kafkaSettings);\n    ruleEngineMsgProducerBuilder.clientId(\"TB_QUEUE_RULE_ENGINE_MSG_PRODUCER\");\n    ruleEngineMsgProducerBuilder.defaultTopic(coreSettings.getTopic());\n    ruleEngineMsgProducerBuilder.admin(admin);\n    return ruleEngineMsgProducerBuilder.build();\n}", "CodeBleu_score": 62.92026879899382}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToRuleEngineMsg>> createRuleEngineMsgProducer(){\n\t    TbKafkaProducerTemplate.TbKafkaProducerTemplateBuilder<TbProtoQueueMsg<ToRuleEngineMsg>> ruleEngineProducerTemplateBuilder = TbKafkaProducerTemplate.builder();\n    ruleEngineProducerTemplateBuilder.settings(kafkaSettings);\n    ruleEngineProducerTemplateBuilder.clientId(\"TB_RULE_ENGINE_PRODUCER\");\n    ruleEngineProducerTemplateBuilder.defaultTopic(coreSettings.getTopic());\n    ruleEngineProducerTemplateBuilder.admin(kafkaAdmin);\n    return ruleEngineProducerTemplateBuilder.build();\n}", "CodeBleu_score": 62.206045326129114}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToRuleEngineMsg>> createRuleEngineMsgProducer(){\n\t    TbKafkaProducerTemplate.TbKafkaProducerTemplateBuilder<TbProtoQueueMsg<ToRuleEngineMsg>> ruleEngineMsgProducerBuilder = TbKafkaProducerTemplate.builder();\n    ruleEngineMsgProducerBuilder.settings(kafkaSettings);\n    ruleEngineMsgProducerBuilder.clientId(\"producer-rule-engine-\" + serviceInfoProvider.getServiceId());\n    ruleEngineMsgProducerBuilder.defaultTopic(coreSettings.getTopic());\n    ruleEngineMsgProducerBuilder.admin(kafkaAdmin);\n    return ruleEngineMsgProducerBuilder.build();\n}", "CodeBleu_score": 66.55544656689585}]}
{"instance_id": "886264f5ca27", "generation_result": [{"code": "private void startLogScheduling(){\n\t    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(ThingsBoardThreadFactory.forName(\"kafka-consumer-monitor\"));\n    executor.scheduleAtFixedRate(() -> {\n        try {\n            if (System.currentTimeMillis() - lastLogTs > printInterval) {\n                for (String groupId : groupIds) {\n                    try {\n                        ConsumerGroupInfo groupInfo = getConsumerGroupInfo(groupId);\n                        if (groupInfo != null) {\n                            Map<TopicPartition, OffsetAndMetadata> groupOffsets = groupInfo.getOffsets();\n                            Map<TopicPartition, Long> endOffsets = groupInfo.getEndOffsets();\n                            List<TopicPartition> laggingTopics = new ArrayList<>();\n                            for (TopicPartition topic : groupOffsets.keySet()) {\n                                if (endOffsets.containsKey(topic)) {\n                                    long endOffset = endOffsets.get(topic);\n                                    long groupOffset = groupOffsets.get(topic).offset();\n                                    if (groupOffset < endOffset) {\n                                        laggingTopics.add(topic);\n                                    }\n                                }\n                            }\n                            if (!laggingTopics.isEmpty()) {\n                                log.info(\"[{}] Consumer group has {} lagging topics: {}\", groupId, laggingTopics.size(), laggingTopics);\n                            }\n                        }\n                    } catch (Exception e) {\n                        log.warn(\"[{}] Failed to get consumer group info: {}\", groupId, e.getMessage());\n                        log.trace(\"[{}] Failed to get consumer group info\", e);\n                    }\n                }\n                lastLogTs = System.currentTimeMillis();\n            }\n        } catch (Exception e) {\n            log.warn(\"Failed to get consumer group statistics: {}\", e.getMessage());\n            log.trace(\"Failed to get consumer group statistics\", e);\n        }\n    }, 0, printInterval, TimeUnit.MILLISECONDS);\n}", "CodeBleu_score": 43.651753115903865}, {"code": "private void startLogScheduling(){\n\t    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(ThingsBoardThreadFactory.forName(\"kafka-consumer-monitor-scheduler\"));\n    executor.scheduleAtFixedRate(() -> {\n        try {\n            if (System.currentTimeMillis() - lastLogTs > logInterval) {\n                printStats();\n                lastLogTs = System.currentTimeMillis();\n            }\n        } catch (Exception e) {\n            log.warn(\"Failed to print statistics for consumer group: {}\", groupId, e);\n        }\n    }, 0, logInterval, TimeUnit.MILLISECONDS);\n}", "CodeBleu_score": 16.9659341056996}, {"code": "private void startLogScheduling(){\n\t        ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(ThingsBoardThreadFactory.forName(\"kafka-consumer-monitor\"));\n        executor.scheduleAtFixedRate(() -> {\n            try {\n                if (System.currentTimeMillis() - lastLogTs > printInterval) {\n                    printStats();\n                    lastLogTs = System.currentTimeMillis();\n                }\n            } catch (Exception e) {\n                log.warn(\"Failed to print consumer group statistics for groupId: [{}]\", groupId, e);\n            }\n        }, 0, printInterval, TimeUnit.MILLISECONDS);\n    }", "CodeBleu_score": 17.95760992637701}]}
{"instance_id": "81553181cdc8", "generation_result": [{"code": "protected Properties toAdminProps(){\n\t    Properties props = toProps();\n    props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n    props.put(AdminClientConfig.RETRIES_CONFIG, retries);\n    return props;\n}", "CodeBleu_score": 91.69084212730418}, {"code": "protected Properties toAdminProps(){\n\t    Properties props = toProps();\n    props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n    props.put(AdminClientConfig.RETRIES_CONFIG, retries);\n    return props;\n}", "CodeBleu_score": 91.69084212730418}, {"code": "protected Properties toAdminProps(){\n\t    Properties props = toProps();\n    props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n    props.put(AdminClientConfig.RETRIES_CONFIG, retries);\n    return props;\n}", "CodeBleu_score": 91.69084212730418}]}
{"instance_id": "3c8bf3ff31b7", "generation_result": [{"code": "public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group){\n\t    if (metric instanceof Counter) {\n        addCounter(metricName, (Counter) metric, group);\n    } else if (metric instanceof Gauge) {\n        addGauge(metricName, (Gauge) metric, group);\n    } else if (metric instanceof Histogram) {\n        addHistogram(metricName, (Histogram) metric, group);\n    } else if (metric instanceof Meter) {\n        addMeter(metricName, (Meter) metric, group);\n    } else {\n        LOG.warn(\"Unknown metric type: {}\", metric.getClass().getName());\n    }\n}", "CodeBleu_score": 45.269817804469945}, {"code": "public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group){\n\t    // Create a scoped name for the metric\n    String name = createName(metricName, group);\n    // Create tags for the metric\n    Map<String, String> tags = createTags(metricName, group);\n    // Create a MetricEvent for the metric\n    MetricEvent event = new MetricEvent(name, metric, tags);\n    // Add the metric and its event to the corresponding collection\n    if (metric instanceof Counter) {\n        this.counters.put(name, event);\n    } else if (metric instanceof Gauge) {\n        this.gauges.put(name, event);\n    } else if (metric instanceof Histogram) {\n        this.histograms.put(name, event);\n    } else if (metric instanceof Meter) {\n        this.meters.put(name, event);\n    } else {\n        LOG.warn(\"Metric type {} not supported\", metric.getClass().getName());\n    }\n}", "CodeBleu_score": 50.79859155925769}, {"code": "public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group){\n\t    if (metric instanceof Counter) {\n        this.counters.put(metricName, new MetricEvent(metricName, metric, group));\n    } else if (metric instanceof Gauge) {\n        this.gauges.put(metricName, new MetricEvent(metricName, metric, group));\n    } else if (metric instanceof Histogram) {\n        this.histograms.put(metricName, new MetricEvent(metricName, metric, group));\n    } else if (metric instanceof Meter) {\n        this.meters.put(metricName, new MetricEvent(metricName, metric, group));\n    } else {\n        LOG.warn(\"Unknown metric type: {}\", metric.getClass().getName());\n    }\n}", "CodeBleu_score": 48.05806898748739}]}
{"instance_id": "77c6addc9b99", "generation_result": [{"code": "static MetricEvent addFields(MetricEvent metricEvent, String field, Gauge<?> gauge){\n\t    Object value = gauge.getValue();\n    if (value instanceof Number || value instanceof String) {\n        if (metricEvent.getFields() != null) {\n            metricEvent.getFields().put(field, value);\n        } else {\n            Map<String, Object> fields = new HashMap<>();\n            fields.put(field, value);\n            metricEvent.setFields(fields);\n        }\n    }\n    return metricEvent;\n}", "CodeBleu_score": 47.078716074871416}, {"code": "static MetricEvent addFields(MetricEvent metricEvent, String field, Gauge<?> gauge){\n\t    Object value = gauge.getValue();\n    if (value instanceof Number) {\n        Number number = (Number) value;\n        if (metricEvent.getFields() != null) {\n            metricEvent.getFields().put(field, number);\n        } else {\n            Map<String, Number> fields = new HashMap<>();\n            fields.put(field, number);\n            metricEvent.setFields(fields);\n        }\n    } else if (value instanceof String) {\n        String string = (String) value;\n        if (metricEvent.getFields() != null) {\n            metricEvent.getFields().put(field, string);\n        } else {\n            Map<String, String> fields = new HashMap<>();\n            fields.put(field, string);\n            metricEvent.setFields(fields);\n        }\n    }\n    return metricEvent;\n}", "CodeBleu_score": 53.15185523983622}, {"code": "static MetricEvent addFields(MetricEvent metricEvent, String field, Gauge<?> gauge){\n\t    Number value = (Number) gauge.getValue();\n    if (metricEvent.getFields() != null) {\n        metricEvent.getFields().put(field, value);\n    } else {\n        Map<String, Object> fields = new HashMap<>();\n        fields.put(field, value);\n        metricEvent.setFields(fields);\n    }\n    return metricEvent;\n}", "CodeBleu_score": 40.172956957729994}]}
{"instance_id": "a48971ffb3e9", "generation_result": [{"code": "static MetricEvent addKafkaLagMetricFields(MetricEvent metricEvent, Long timestamp, Gauge<?> gauge){\n\t    String[] metricComponents = gauge.getName().split(Pattern.quote(\".\"));\n    String topic = metricComponents[2];\n    String partition = metricComponents[3];\n    String group = metricComponents[4];\n    String metricName = metricComponents[5];\n    if (metricName.equals(\"current-offset\")) {\n        currentOffsets.put(topic + \"-\" + partition + \"-\" + group, gauge.getValue().toString());\n    }\n    else if (metricName.equals(\"committed-offset\")) {\n        committedOffsets.put(topic + \"-\" + partition + \"-\" + group, gauge.getValue().toString());\n    }\n    else if (metricName.equals(\"data-timestamp\")) {\n        dataTimestamps.put(topic + \"-\" + partition + \"-\" + group, gauge.getValue().toString());\n    }\n    if (kafkaLagTimes.get(topic + \"-\" + partition + \"-\" + group) == null) {\n        kafkaLagTimes.put(topic + \"-\" + partition + \"-\" + group, timestamp);\n    }\n    metricEvent.setTimestamp(kafkaLagTimes.get(topic + \"-\" + partition + \"-\" + group));\n    return metricEvent;\n}", "CodeBleu_score": 30.587594222966203}, {"code": "static MetricEvent addKafkaLagMetricFields(MetricEvent metricEvent, Long timestamp, Gauge<?> gauge){\n\t    String[] metricNameComponents = metricEvent.getName().split(Pattern.quote(\".\"));\n    String kafkaGroup = metricNameComponents[0];\n    String kafkaTopic = metricNameComponents[1];\n    String kafkaPartition = metricNameComponents[2];\n    String kafkaLagType = metricNameComponents[3];\n    String kafkaLagMetric = metricNameComponents[4];\n    String kafkaLagMetricName = kafkaLagMetric.substring(0, kafkaLagMetric.length() - 1);\n    String kafkaLagMetricValue = String.valueOf(gauge.getValue());\n    String kafkaLagMetricTimestamp = String.valueOf(timestamp);\n    String kafkaLagMetricKey = kafkaGroup + \".\" + kafkaTopic + \".\" + kafkaPartition + \".\" + kafkaLagType + \".\" + kafkaLagMetricName;\n\n    if (!kafkaLagTimes.containsKey(kafkaLagMetricKey)) {\n        kafkaLagTimes.put(kafkaLagMetricKey, kafkaLagMetricTimestamp);\n    }\n\n    if (!kafkaLagTimes.get(kafkaLagMetricKey).equals(kafkaLagMetricTimestamp)) {\n        kafkaLagTimes.put(kafkaLagMetricKey, kafkaLagMetricTimestamp);\n        metricEvent.setField(kafkaLagMetricName, kafkaLagMetricValue);\n        metricEvent.setField(\"timestamp\", kafkaLagMetricTimestamp);\n        metricEvent.setTimestamp(timestamp);\n    }\n    return metricEvent;\n}", "CodeBleu_score": 35.02474017296335}, {"code": "static MetricEvent addKafkaLagMetricFields(MetricEvent metricEvent, Long timestamp, Gauge<?> gauge){\n\t    // Get the metric value from the gauge\n    String value = gauge.getValue().toString();\n\n    // Split the metric value into components\n    String[] components = value.split(\",\");\n\n    // Check for changes in the Kafka lag metrics to avoid duplicates\n    String metricName = metricEvent.getName();\n    Long lastTimestamp = kafkaLagTimes.get(metricName);\n    if (lastTimestamp != null && lastTimestamp.equals(timestamp)) {\n        return metricEvent;\n    }\n\n    // Update the kafkaLagTimes map\n    kafkaLagTimes.put(metricName, timestamp);\n\n    // Set the event's timestamp\n    metricEvent.setTimestamp(timestamp);\n\n    // Update the MetricEvent's fields with current offsets, data timestamp, and committed offsets\n    metricEvent.setField(\"currentOffset\", components[0].split(\":\")[1]);\n    metricEvent.setField(\"dataTimestamp\", components[1].split(\":\")[1]);\n    metricEvent.setField(\"committedOffset\", components[2].split(\":\")[1]);\n\n    return metricEvent;\n}", "CodeBleu_score": 37.15978774149941}]}
{"instance_id": "c2080c299bb0", "generation_result": [{"code": "public static DataStreamSource<MetricEvent> buildSource(StreamExecutionEnvironment env, String topic, Long time) throws IllegalAccessException{\n\t    // get the global properties\n    ParameterTool parameter = (ParameterTool) env.getConfig().getGlobalJobParameters();\n    Properties kafkaProps = new Properties();\n    kafkaProps.setProperty(\"bootstrap.servers\", parameter.get(KAFKA_SERVERS));\n    kafkaProps.setProperty(\"group.id\", parameter.get(KAFKA_GROUP_ID));\n    kafkaProps.setProperty(\"flink.partition-discovery.interval-millis\", \"5000\");\n    kafkaProps.setProperty(\"enable.auto.commit\", \"false\");\n    kafkaProps.setProperty(\"auto.offset.reset\", \"none\");\n    kafkaProps.setProperty(\"auto.commit.interval.ms\", \"1000\");\n    kafkaProps.setProperty(\"session.timeout.ms\", \"30000\");\n    kafkaProps.setProperty(\"max.poll.records\", \"500\");\n    kafkaProps.setProperty(\"key.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n    kafkaProps.setProperty(\"value.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n    kafkaProps.setProperty(\"flink.partition-discovery.interval-millis\", \"5000\");\n    kafkaProps.setProperty(\"flink.starting-offsets.timestamp-millis\", String.valueOf(time));\n    kafkaProps.setProperty(\"flink.partition-discovery.interval-millis\", \"5000\");\n    kafkaProps.setProperty(\"flink.partition-discovery.interval-millis\", \"5000\");\n    kafkaProps.setProperty(\"flink.partition-discovery.interval-millis\", \"5000\");\n    kafkaProps.setProperty(\"flink.partition-discovery.interval-millis\", \"5000\");\n    kafkaProps.setProperty(\"flink.partition-discovery.interval-millis\", \"5000\");\n    kafkaProps.setProperty(\"flink.partition-discovery.interval-mill", "CodeBleu_score": 32.42083347154702}, {"code": "public static DataStreamSource<MetricEvent> buildSource(StreamExecutionEnvironment env, String topic, Long time) throws IllegalAccessException{\n\t    // get the global properties\n    ParameterTool parameterTool = env.getConfig().getGlobalJobParameters();\n    Properties kafkaProps = new Properties();\n    kafkaProps.setProperty(\"bootstrap.servers\", parameterTool.getRequired(KAFKA_SERVERS));\n    kafkaProps.setProperty(\"group.id\", parameterTool.getRequired(KAFKA_GROUP_ID));\n    kafkaProps.setProperty(\"auto.offset.reset\", \"earliest\");\n    kafkaProps.setProperty(\"flink.partition-discovery.interval-millis\", \"10000\");\n\n    // set the start time for consumer\n    if (time != null) {\n        // get the partitions for the topic\n        List<PartitionInfo> partitionInfos = getPartitionsForTopic(parameterTool, topic);\n        // get the offset for each partition\n        Map<TopicPartition, Long> partitionOffsetMap = getOffsetForTime(parameterTool, partitionInfos, time);\n        // create a FlinkKafkaConsumer for each partition and set the start time\n        FlinkKafkaConsumer<MetricEvent>[] metricEventFlinkKafkaConsumers = new FlinkKafkaConsumer[partitionInfos.size()];\n        for (int i = 0; i < partitionInfos.size(); i++) {\n            metricEventFlinkKafkaConsumers[i] = new FlinkKafkaConsumer<>(topic, new MetricSchema(), kafkaProps);\n            metricEventFlinkKafkaConsumers[i].setStartFromTimestamp(time);\n            metricEventFlinkKafkaConsumers[i].setStartFromSpecificOffsets(partitionOffsetMap);\n        }\n        // create a union data stream source\n        return env.addSource(metricEventFlinkKafkaConsumers).name(\"Metric Source\");\n    } else {\n        // create a FlinkKafkaConsumer for the topic and set the start time\n        FlinkKafkaConsumer<MetricEvent> metricEventFlinkKafkaConsumer = new FlinkKafkaConsumer<>(topic, new MetricSchema(), kafkaProps);\n        metricEventFlinkKafkaConsumer.setStartFromEarliest();\n        return", "CodeBleu_score": 49.337953999102915}, {"code": "public static DataStreamSource<MetricEvent> buildSource(StreamExecutionEnvironment env, String topic, Long time) throws IllegalAccessException{\n\t    ParameterTool parameterTool = env.getConfig().getGlobalJobParameters();\n    Properties kafkaProperties = buildKafkaProperties(parameterTool);\n    FlinkKafkaConsumer<MetricEvent> consumer = new FlinkKafkaConsumer<>(topic, new MetricSchema(), kafkaProperties);\n    if (time != null) {\n        consumer.setStartFromTimestamp(time);\n    }\n    return env.addSource(consumer);\n}", "CodeBleu_score": 52.59129992690965}]}
{"instance_id": "5e828afbe8e4", "generation_result": [{"code": "private static Map<KafkaTopicPartition, Long> buildOffsetByTime(Properties props, ParameterTool parameterTool, Long time){\n\t    String topic = parameterTool.get(PropertiesConstants.METRIC_TOPIC);\n    String group = parameterTool.get(PropertiesConstants.METRIC_GROUP_ID) + \"-\" + time;\n    props.setProperty(\"group.id\", group);\n    KafkaConsumer<String, MetricEvent> consumer = new KafkaConsumer<>(props);\n    List<PartitionInfo> partitionInfos = consumer.partitionsFor(topic);\n    Map<Integer, Long> partitionTimes = new HashMap<>();\n    for (PartitionInfo partition : partitionInfos) {\n        partitionTimes.put(partition.partition(), time);\n    }\n    Map<TopicPartition, Long> partitionOffsets = consumer.offsetsForTimes(partitionTimes);\n    Map<KafkaTopicPartition, Long> offsets = new HashMap<>();\n    for (Map.Entry<TopicPartition, Long> partitionOffset : partitionOffsets.entrySet()) {\n        offsets.put(new KafkaTopicPartition(partitionOffset.getKey().topic(), partitionOffset.getKey().partition()), partitionOffset.getValue());\n    }\n    consumer.close();\n    return offsets;\n}", "CodeBleu_score": 49.19443889433398}, {"code": "private static Map<KafkaTopicPartition, Long> buildOffsetByTime(Properties props, ParameterTool parameterTool, Long time){\n\t    Map<KafkaTopicPartition, Long> offsetMap = new HashMap<>();\n    props.setProperty(\"group.id\", parameterTool.get(PROP_GROUP_ID, PROP_GROUP_ID_DEFAULT) + \"-\" + time);\n    try (KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props)) {\n        List<PartitionInfo> partitionInfos = consumer.partitionsFor(parameterTool.getRequired(PROP_KAFKA_TOPIC));\n        Map<TopicPartition, Long> partitionTimes = new HashMap<>();\n        for (PartitionInfo partitionInfo : partitionInfos) {\n            TopicPartition topicPartition = new TopicPartition(partitionInfo.topic(), partitionInfo.partition());\n            partitionTimes.put(topicPartition, time);\n        }\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap = consumer.offsetsForTimes(partitionTimes);\n        for (Map.Entry<TopicPartition, OffsetAndTimestamp> entry : offsetAndTimestampMap.entrySet()) {\n            if (entry.getValue() != null) {\n                offsetMap.put(new KafkaTopicPartition(entry.getKey().topic(), entry.getKey().partition()), entry.getValue().offset());\n            }\n        }\n    }\n    return offsetMap;\n}", "CodeBleu_score": 50.71608112424647}, {"code": "private static Map<KafkaTopicPartition, Long> buildOffsetByTime(Properties props, ParameterTool parameterTool, Long time){\n\t    // set the consumer group ID\n    props.setProperty(\"group.id\", parameterTool.getRequired(PROP_GROUP_ID) + \"-\" + time);\n\n    // create a consumer with the properties\n    KafkaConsumer<byte[], byte[]> consumer = new KafkaConsumer<>(props);\n\n    // retrieve partition information for the specified topic\n    List<PartitionInfo> partitions = consumer.partitionsFor(parameterTool.getRequired(PROP_KAFKA_TOPIC));\n\n    // create a map associating each partition with the timestamp\n    Map<TopicPartition, Long> partitionTimes = new HashMap<>();\n    for (PartitionInfo partition : partitions) {\n        partitionTimes.put(new TopicPartition(partition.topic(), partition.partition()), time);\n    }\n\n    // fetch offsets for the given times\n    Map<TopicPartition, OffsetAndTimestamp> offsets = consumer.offsetsForTimes(partitionTimes);\n\n    // build a map of KafkaTopicPartition to offsets\n    Map<KafkaTopicPartition, Long> result = new HashMap<>();\n    for (Map.Entry<TopicPartition, OffsetAndTimestamp> entry : offsets.entrySet()) {\n        result.put(new KafkaTopicPartition(entry.getKey().topic(), entry.getKey().partition()), entry.getValue().offset());\n    }\n\n    // close the consumer\n    consumer.close();\n\n    // return the map of partition offsets\n    return result;\n}", "CodeBleu_score": 59.22267996669366}]}
{"instance_id": "28da89f56f67", "generation_result": [{"code": "public static void writeToKafka() throws InterruptedException{\n\t\n    // set up Kafka properties\n    Properties props = new Properties();\n    props.put(\"bootstrap.servers\", \"localhost:9092\");\n    props.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n    props.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n\n    // create a Kafka producer\n    KafkaProducer<String, String> producer = new KafkaProducer<>(props);\n\n    // create a MetricEvent\n    Map<String, String> tags = new HashMap<>();\n    tags.put(\"region\", \"us-west\");\n    tags.put(\"host\", \"server1\");\n    tags.put(\"datacenter\", \"dc1\");\n\n    Map<String, Object> fields = new HashMap<>();\n    fields.put(\"int_field\", 1);\n    fields.put(\"long_field\", 1L);\n    fields.put(\"string_field\", \"string\");\n    fields.put(\"float_field\", 0.1f);\n    fields.put(\"double_field\", 0.1d);\n    fields.put(\"bool_field\", true);\n\n    MetricEvent event = new MetricEvent();\n    event.setName(\"metric\");\n    event.setTimestamp(System.currentTimeMillis());\n    event.setTags(tags);\n    event.setFields(fields);\n\n    // send the MetricEvent to the \"metrics\" topic\n    producer.send(new ProducerRecord<String, String>(\"metrics\", GsonUtil.toJson(event)));\n    System.out.println(\"Sent data: \" + GsonUtil.toJson(event));\n\n    // flush the producer to ensure all events are written\n    producer.flush();\n}", "CodeBleu_score": 62.70315509753341}, {"code": "public static void writeToKafka() throws InterruptedException{\n\t    // kafka \u76f8\u5173\u914d\u7f6e\n    Properties props = new Properties();\n    props.put(\"bootstrap.servers\", \"localhost:9092\");\n    props.put(\"acks\", \"all\");\n    props.put(\"retries\", 0);\n    props.put(\"batch.size\", 16384);\n    props.put(\"linger.ms\", 1);\n    props.put(\"buffer.memory\", 33554432);\n    props.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n    props.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n\n    KafkaProducer<String, String> producer = new KafkaProducer<>(props);\n\n    Map<String, String> map = new HashMap<>();\n    map.put(\"tag1\", \"value1\");\n    map.put(\"tag2\", \"value2\");\n\n    MetricEvent event = new MetricEvent();\n    event.setTimestamp(System.currentTimeMillis());\n    event.setName(\"zhisheng\");\n    event.setTags(map);\n    event.setFields(map);\n\n    ProducerRecord<String, String> record = new ProducerRecord<>(\"zhisheng\", GsonUtil.toJson(event));\n    producer.send(record);\n\n    System.out.println(record.value());\n    producer.flush();\n}", "CodeBleu_score": 56.138173872999545}, {"code": "public static void writeToKafka() throws InterruptedException{\n\t    Properties props = new Properties();\n    props.put(\"bootstrap.servers\", \"localhost:9092\");\n    props.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n    props.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n\n    KafkaProducer<String, String> producer = new KafkaProducer<String, String>(props);\n\n    MetricEvent event = new MetricEvent();\n    event.setTimestamp(System.currentTimeMillis());\n    event.setName(\"cpu\");\n    Map<String, String> tags = new HashMap<String, String>();\n    tags.put(\"host\", \"10.1.2.3\");\n    event.setTags(tags);\n    Map<String, Object> fields = new HashMap<String, Object>();\n    fields.put(\"value\", 10.0);\n    event.setFields(fields);\n\n    ProducerRecord<String, String> record = new ProducerRecord<String, String>(\"metrics\", GsonUtil.toJson(event));\n    producer.send(record);\n\n    producer.flush();\n    System.out.println(record.value());\n}", "CodeBleu_score": 65.00049856827712}]}
{"instance_id": "14bffe09c25a", "generation_result": [{"code": "public void append(org.apache.logging.log4j.core.LogEvent event){\n\t    if (this.filter.filter(event) == Filter.Result.DENY) {\n        return;\n    }\n\n    try {\n        LogEvent logEvent = LogEvent.builder()\n                .timeStamp(event.getTimeMillis())\n                .level(event.getLevel().toString())\n                .threadName(event.getThreadName())\n                .loggerName(event.getLoggerName())\n                .message(event.getMessage().getFormattedMessage())\n                .build();\n\n        String log = JacksonUtil.toJson(logEvent);\n        this.producer.send(new ProducerRecord<>(this.topic, log));\n    } catch (Exception e) {\n        log.warn(\"Error processing log event {}\", event, e);\n    }\n}", "CodeBleu_score": 41.266844359185974}, {"code": "public void append(org.apache.logging.log4j.core.LogEvent event){\n\t    if (event.getLevel().isMoreSpecificThan(Level.ERROR)) {\n        if (event.getLoggerName().contains(\"xxx\")) {\n            try {\n                producer.send(new ProducerRecord<>(topic, event.getMessage().getFormattedMessage()));\n            } catch (Exception e) {\n                LOGGER.warn(\"Could not send log event to Kafka: \" + e.getMessage());\n            }\n        }\n    }\n}", "CodeBleu_score": 53.81570571363432}, {"code": "public void append(org.apache.logging.log4j.core.LogEvent event){\n\t    if (event.getLevel().intLevel() >= this.level.intLevel() &&\n            !event.getLoggerName().contains(\"xxx\")) {\n        try {\n            this.producer.send(new ProducerRecord<>(this.topic, event.getMessage().getFormattedMessage()));\n        } catch (Exception e) {\n            LOGGER.warn(\"Unable to send log event to Kafka: \" + e.getMessage());\n        }\n    }\n}", "CodeBleu_score": 53.86533383767835}]}
{"instance_id": "a9e0786fb5c1", "generation_result": [{"code": "func ValidateTopicSuffixMethod(method string) error{\n\t\tvalidMethods := []string{\"static\", \"measurement\", \"tags\"}\n\tfor _, m := range validMethods {\n\t\tif method == m {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn fmt.Errorf(\"Unknown topic suffix method: %s\", method)\n}", "CodeBleu_score": 71.42565221873546}, {"code": "func ValidateTopicSuffixMethod(method string) error{\n\t\tvalidMethods := []string{\"static\", \"measurement\", \"tags\", \"tag\", \"uuid\"}\n\tfor _, validMethod := range validMethods {\n\t\tif method == validMethod {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn fmt.Errorf(\"unknown topic suffix method provided: %s\", method)\n}", "CodeBleu_score": 83.0737607259489}, {"code": "func ValidateTopicSuffixMethod(method string) error{\n\t\tvalidMethods := []string{\"static\", \"measurement\", \"tags\"}\n\tfor _, m := range validMethods {\n\t\tif m == method {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn fmt.Errorf(\"unknown topic suffix method: %s\", method)\n}", "CodeBleu_score": 73.19894693866583}]}
{"instance_id": "9b88d720d48a", "generation_result": [{"code": "func (k *Kafka) routingKey(metric telegraf.Metric) (string, error) {\n\t\tif k.RoutingTag != \"\" {\n\t\tif tagValue, ok := metric.GetTag(k.RoutingTag); ok {\n\t\t\treturn tagValue, nil\n\t\t}\n\t\treturn \"\", errors.New(\"unable to find RoutingTag\")\n\t}\n\n\tif k.RoutingKey == \"random\" {\n\t\tu, err := uuid.NewV4()\n\t\tif err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\treturn u.String(), nil\n\t}\n\n\treturn k.RoutingKey, nil\n}", "CodeBleu_score": 82.51454247519784}, {"code": "func (k *Kafka) routingKey(metric telegraf.Metric) (string, error) {\n\t\tif k.RoutingTag != \"\" {\n\t\tif v, ok := metric.GetTag(k.RoutingTag); ok {\n\t\t\treturn v, nil\n\t\t}\n\t}\n\n\tif k.RoutingKey == \"random\" {\n\t\tu, err := uuid.NewV4()\n\t\tif err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\treturn u.String(), nil\n\t}\n\n\treturn k.RoutingKey, nil\n}", "CodeBleu_score": 86.92270400846459}, {"code": "func (k *Kafka) routingKey(metric telegraf.Metric) (string, error) {\n\t\tif k.RoutingTag != \"\" {\n\t\tif value, ok := metric.GetTag(k.RoutingTag); ok {\n\t\t\treturn value, nil\n\t\t}\n\t}\n\tif k.RoutingKey == \"random\" {\n\t\tu, err := uuid.NewV4()\n\t\tif err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\treturn u.String(), nil\n\t}\n\treturn k.RoutingKey, nil\n}", "CodeBleu_score": 86.81718172017558}]}
{"instance_id": "dc35e80e7f8d", "generation_result": [{"code": "func (k *KafkaConsumer) compileTopicRegexps() error{\n\t\tk.regexps = make([]*regexp.Regexp, len(k.TopicRegexps))\n\tfor i, pattern := range k.TopicRegexps {\n\t\tregexp, err := regexp.Compile(pattern)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"could not compile topic regexp %q: %v\", pattern, err)\n\t\t}\n\t\tk.regexps[i] = regexp\n\t}\n\treturn nil\n}", "CodeBleu_score": 59.693644306636884}, {"code": "func (k *KafkaConsumer) compileTopicRegexps() error{\n\t\tk.regexps = make([]*regexp.Regexp, len(k.TopicRegexps))\n\tfor i, regexpStr := range k.TopicRegexps {\n\t\tregexp, err := regexp.Compile(regexpStr)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to compile regexp %s: %v\", regexpStr, err)\n\t\t}\n\t\tk.regexps[i] = regexp\n\t}\n\treturn nil\n}", "CodeBleu_score": 59.5971395762062}, {"code": "func (k *KafkaConsumer) compileTopicRegexps() error{\n\t\tk.regexps = make([]*regexp.Regexp, len(k.TopicRegexps))\n\tfor i, regexpStr := range k.TopicRegexps {\n\t\tregexp, err := regexp.Compile(regexpStr)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"topic regexp %s failed to compile, %s\", regexpStr, err.Error())\n\t\t}\n\t\tk.regexps[i] = regexp\n\t}\n\treturn nil\n}", "CodeBleu_score": 55.55636856512063}]}
{"instance_id": "daf09ba144b2", "generation_result": [{"code": "func (h *ConsumerGroupHandler) onDelivery(track telegraf.DeliveryInfo){\n\t\th.Lock()\n\tdefer h.Unlock()\n\n\tmsg, ok := h.undelivered[track.ID()]\n\tif !ok {\n\t\treturn\n\t}\n\n\tmsg.MarkDelivered()\n\th.session.MarkDelivered(msg)\n\tdelete(h.undelivered, track.ID())\n\th.sem.Release(1)\n}", "CodeBleu_score": 51.58276084315302}, {"code": "func (h *ConsumerGroupHandler) onDelivery(track telegraf.DeliveryInfo){\n\t\th.Lock()\n\tdefer h.Unlock()\n\n\tmsg, ok := h.undelivered[track.DeliveryTag]\n\tif !ok {\n\t\th.Log.Errorf(\"Delivery notification for unknown message: %v\", track)\n\t\treturn\n\t}\n\n\tif track.Delivered() {\n\t\th.session.MarkMessage(msg, true)\n\t} else {\n\t\th.session.MarkMessage(msg, false)\n\t}\n\n\tdelete(h.undelivered, track.DeliveryTag)\n\th.sem.Release(1)\n}", "CodeBleu_score": 56.79783970880295}, {"code": "func (h *ConsumerGroupHandler) onDelivery(track telegraf.DeliveryInfo){\n\t\th.Lock()\n\tdefer h.Unlock()\n\tmsg, ok := h.undelivered[track.ID()]\n\tif !ok {\n\t\treturn\n\t}\n\tmsg.MarkDelivered()\n\th.session.MarkDelivered(msg)\n\tdelete(h.undelivered, track.ID())\n\th.sem.Release(1)\n}", "CodeBleu_score": 51.58276084315302}]}
{"instance_id": "8ecf2a1efead", "generation_result": [{"code": "func (h *ConsumerGroupHandler) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error{\n\t\tfor message := range claim.Messages() {\n\t\tif h.Log != nil {\n\t\t\th.Log.Debugf(\"Message topic:%q partition:%d offset:%d\n\", message.Topic, message.Partition, message.Offset)\n\t\t}\n\t\tif h.MetricHandler != nil {\n\t\t\tmetrics, err := h.MetricHandler(message)\n\t\t\tif err != nil && h.Log != nil {\n\t\t\t\th.Log.Errorf(\"Handler error: %s\n\", err)\n\t\t\t}\n\t\t\tfor _, metric := range metrics {\n\t\t\t\th.acc.AddFields(metric.Name(), metric.Fields(), metric.Tags(), metric.Time())\n\t\t\t}\n\t\t}\n\t\tsession.MarkMessage(message, \"\")\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 46.34655061404692}, {"code": "func (h *ConsumerGroupHandler) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error{\n\t\tfor message := range claim.Messages() {\n\t\t// \u5904\u7406\u6d88\u606f\n\t\tif err := h.HandleMessage(message); err != nil {\n\t\t\th.Log.Errorf(\"Error handling message: %v\", err)\n\t\t}\n\t\tsession.MarkMessage(message, \"\")\n\t}\n\treturn nil\n}", "CodeBleu_score": 33.03371794137201}, {"code": "func (h *ConsumerGroupHandler) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error{\n\t\tfor message := range claim.Messages() {\n\t\tif h.Log != nil {\n\t\t\th.Log.Debugf(\"Message topic:%q partition:%d offset:%d\n\", message.Topic, message.Partition, message.Offset)\n\t\t}\n\n\t\tmetrics, err := h.parser.Parse(message.Value)\n\t\tif err != nil {\n\t\t\th.Log.Debugf(\"Could not parse message: %s\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tfor _, metric := range metrics {\n\t\t\tmetric.AddTag(\"topic\", message.Topic)\n\t\t\tmetric.AddTag(\"partition\", fmt.Sprintf(\"%d\", message.Partition))\n\t\t\tmetric.AddTag(\"offset\", fmt.Sprintf(\"%d\", message.Offset))\n\n\t\t\th.acc.AddFields(metric.Name(), metric.Fields(), metric.Tags(), metric.Time())\n\t\t}\n\n\t\tsession.MarkMessage(message, \"\")\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 43.322041717579}]}
{"instance_id": "eba9dafa99ab", "generation_result": [{"code": "def validateLogkafkaId(logkafka_id: String){\n\t\n    if (logkafka_id.isEmpty()) {\n        throw new IllegalArgumentException(\"Logkafka ID cannot be empty.\")\n    }\n\n    if (logkafka_id == \".\" || logkafka_id == \"..\") {\n        throw new IllegalArgumentException(\"Logkafka ID cannot be equal to \\\".\\\" or \\\"..\\\".\")\n    }\n\n    if (logkafka_id.length() > 255) {\n        throw new IllegalArgumentException(\"Logkafka ID cannot exceed 255 characters.\")\n    }\n\n    if (!logkafka_id.matches(\"^[a-zA-Z0-9_-]+$\")) {\n        throw new IllegalArgumentException(\"Logkafka ID can only contain alphanumeric characters, underscores, and hyphens.\")\n    }\n\n}", "CodeBleu_score": 20.350557070500297}, {"code": "def validateLogkafkaId(logkafka_id: String){\n\t    if (logkafka_id == null || logkafka_id.isEmpty) {\n        throw new IllegalArgumentException(\"Logkafka ID cannot be empty\")\n    }\n    if (logkafka_id == \".\" || logkafka_id == \"..\") {\n        throw new IllegalArgumentException(\"Logkafka ID cannot be '.' or '..'\")\n    }\n    if (logkafka_id.length > 255) {\n        throw new IllegalArgumentException(\"Logkafka ID cannot be longer than 255 characters\")\n    }\n    val pattern = \"\"\"^[a-zA-Z0-9_-]+$\"\"\".r\n    if (!pattern.pattern.matcher(logkafka_id).matches()) {\n        throw new IllegalArgumentException(\"Logkafka ID can only contain alphanumeric characters, underscores, and dashes\")\n    }\n}", "CodeBleu_score": 21.6723134460017}, {"code": "def validateLogkafkaId(logkafka_id: String){\n\t  if (logkafka_id.isEmpty) {\n    throw new IllegalArgumentException(\"Logkafka ID must not be empty\")\n  } else if (logkafka_id == \".\" || logkafka_id == \"..\") {\n    throw new IllegalArgumentException(\"Logkafka ID must not be \\\".\\\" or \\\"..\\\"\")\n  } else if (logkafka_id.length > 255) {\n    throw new IllegalArgumentException(\"Logkafka ID must not exceed 255 characters\")\n  } else if (!logkafka_id.matches(\"^[a-zA-Z0-9-_.]+$\")) {\n    throw new IllegalArgumentException(\"Logkafka ID must only contain alphanumeric characters, dashes, underscores, and periods\")\n  }\n}", "CodeBleu_score": 21.14529627393034}]}
{"instance_id": "45d5aefd3f6c", "generation_result": [{"code": "  private[this] def tryWithKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => FOutput)\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    (kafkaManagerActor ? msg) (10 seconds)\n      .mapTo[Output]\n      .map(fn)\n      .recover {\n        case e: ClassCastException =>\n          val msg = s\"Unexpected response from kafka manager actor : ${e.getMessage}\"\n          logger.error(msg)\n          -\\/(ApiError(msg))\n        case e: AskTimeoutException =>\n          val msg = s\"Timeout in getting response from kafka manager actor : ${e.getMessage}\"\n          logger.error(msg)\n          -\\/(ApiError(msg))\n        case e: Exception =>\n          val msg = s\"Unknown error while getting response from kafka manager actor : ${e.getMessage}\"\n          logger.error(msg, e)\n          -\\/(ApiError(msg))\n      }\n  }", "CodeBleu_score": 27.563309240766927}, {"code": "  private[this] def tryWithKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => FOutput)\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    import akka.pattern.ask\n    import scala.concurrent.duration._\n    import scala.language.postfixOps\n    import scalaz.Scalaz._\n\n    implicit val ec: ExecutionContext = longRunningExecutionContext\n    (kafkaManagerActor ? msg)(2 seconds).mapTo[ApiError \\/ Output].recover {\n      case e: Exception =>\n        val apiError = ApiError(s\"Unknown error : ${e.getMessage}\")\n        logger.error(apiError.msg, e)\n        apiError.left\n    }.flatMap {\n      case -\\/(error) => Future.successful(error.left)\n      case \\/-(output) =>\n        try {\n          Future.successful(fn(output).right)\n        } catch {\n          case e: Exception =>\n            val apiError = ApiError(s\"Unknown error : ${e.getMessage}\")\n            logger.error(apiError.msg, e)\n            Future.successful(apiError.left)\n        }\n    }\n  }", "CodeBleu_score": 24.16079127932886}, {"code": "  private[this] def tryWithKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => FOutput)\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    kafkaManagerActor ? msg map {\n      case akka.actor.Status.Failure(ex) =>\n        val errorMsg = \"Kafka manager actor failed with exception : \" + ex.getMessage\n        logger.error(errorMsg, ex)\n        -\\/(ApiError(errorMsg))\n      case result: Output =>\n        try {\n          \\/-(fn(result))\n        } catch {\n          case e: Throwable =>\n            val errorMsg = \"Failed to process kafka manager actor output : \" + e.getMessage\n            logger.error(errorMsg, e)\n            -\\/(ApiError(errorMsg))\n        }\n      case unknown =>\n        val errorMsg = \"Unknown response from kafka manager actor : \" + unknown\n        logger.error(errorMsg)\n        -\\/(ApiError(errorMsg))\n    } recover {\n      case e: Throwable =>\n        val errorMsg = \"Failed to process response from kafka manager actor : \" + e.getMessage\n        logger.error(errorMsg, e)\n        -\\/(ApiError(errorMsg))\n    }\n  }", "CodeBleu_score": 34.8803732377159}]}
{"instance_id": "a535ce861222", "generation_result": [{"code": "  private[this] def withKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => Future[ApiError \\/ FOutput])\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    kafkaManagerActor ? msg map {\n      case o: Output => fn(o)\n      case a: ActorErrorResponse => {\n        Future.successful(-\\/(ApiError(a.msg)))\n      }\n      case t: Throwable => {\n        Future.successful(-\\/(ApiError(t.getMessage)))\n      }\n    } flatMap {\n      identity\n    }\n  }", "CodeBleu_score": 59.2886191644872}, {"code": "  private[this] def withKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => Future[ApiError \\/ FOutput])\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    (kafkaManagerActor ? msg)(longTimeout).map {\n      case o: Output =>\n        fn(o)\n      case a: ActorErrorResponse =>\n        Future.successful(-\\/(ApiError(a.msg)))\n      case t: Throwable =>\n        Future.successful(-\\/(ApiError(t.getMessage)))\n    }.flatten\n  }", "CodeBleu_score": 59.502352432842976}, {"code": "  private[this] def withKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => Future[ApiError \\/ FOutput])\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    kafkaManagerActor ? msg map {\n      case err: ActorErrorResponse =>\n        val apiError = ApiError(err.error.getMessage)\n        -\\/(apiError)\n      case o: Output =>\n        fn(o)\n      case unknown =>\n        val apiError = ApiError(s\"Unknown response : ${unknown}\")\n        -\\/(apiError)\n    } recover {\n      case e: Throwable =>\n        val apiError = ApiError(e.getMessage)\n        -\\/(apiError)\n    }\n  }", "CodeBleu_score": 33.85591765036715}]}
{"instance_id": "ad37d3914acc", "generation_result": [{"code": "  def runPreferredLeaderElection(clusterName: String, topics: Set[String]): Future[ApiError \\/ ClusterContext] ={\n\t    val cc = ClusterContext(clusterName)\n    val command = KMClusterCommandRequest(cc, TopicList(topics), RunPreferredLeaderElection)\n    kafkaManager.ask(command).mapTo[KMClusterCommandResults].map {\n      case KMClusterCommandSuccess(_, _, results) =>\n        \\/-(results.getOrElse(cc, ClusterContext.from(cc.cluster)))\n      case KMClusterCommandError(_, _, error) =>\n        -\\/(ApiError(error.toString))\n    }\n  }", "CodeBleu_score": 20.157689230662086}, {"code": "  def runPreferredLeaderElection(clusterName: String, topics: Set[String]): Future[ApiError \\/ ClusterContext] ={\n\t    val cc = ClusterContext(clusterName)\n    val kccr = KMClusterCommandRequest(cc, PreferredReplicaLeaderElection(topics))\n    val result = ask(kafkaManager, kccr).mapTo[KMClusterCommandResult]\n    result.map {\n      case result: KMClusterCommandSuccess =>\n        \\/-(result.result.asInstanceOf[ClusterContext])\n      case result: KMClusterCommandError =>\n        -\\/(ApiError(result.result.toString))\n    }\n  }", "CodeBleu_score": 22.579343322029438}, {"code": "  def runPreferredLeaderElection(clusterName: String, topics: Set[String]): Future[ApiError \\/ ClusterContext] ={\n\t    val command = KMClusterCommandRequest(clusterName, CMRunPreferredLeaderElection(topics))\n    sendClusterCommand(command)\n  }", "CodeBleu_score": 18.60256962554091}]}
{"instance_id": "3ecdb2c1534f", "generation_result": [{"code": "private def runPreferredLeaderElectionWithAllTopics(clusterName: String) ={\n\t  val topicList = getTopicList(clusterName)\n  if (topicList.isFailure) {\n    topicList\n  } else {\n    runPreferredLeaderElection(clusterName, topicList.get)\n  }\n}", "CodeBleu_score": 18.940846947222763}, {"code": "private def runPreferredLeaderElectionWithAllTopics(clusterName: String) ={\n\t  for {\n    topics <- getTopics(clusterName)\n    result <- runPreferredLeaderElection(clusterName, topics)\n  } yield result\n}", "CodeBleu_score": 11.404798838578577}, {"code": "private def runPreferredLeaderElectionWithAllTopics(clusterName: String) ={\n\t  val topicsFuture = adminClient.listTopics(clusterName)\n  topicsFuture.map(topics => {\n    val topicNames = topics.getTopics.asScala.map(topic => topic.getName).toSet\n    runPreferredLeaderElection(clusterName, topicNames)\n  }).recover {\n    case e => e.printStackTrace()\n  }\n}", "CodeBleu_score": 21.000516363267064}]}
{"instance_id": "5955ade118b9", "generation_result": [{"code": "def manualPartitionAssignments(clusterName: String,\n                                 assignments: List[(String, List[(Int, List[Int])])]) = {\n\t  implicit val ec = ExecutionContext.global\n  val future = KafkaManager.getClusterView(clusterName)\n  val future2 = future.flatMap { errorOrClusterView =>\n    errorOrClusterView.fold(Future.successful[ErrorOr[Unit]](Left(_)), { clusterView =>\n      val brokers = clusterView.brokers\n      val brokerIds = brokers.map(_.id).toSet\n      val errorOrAssignments = assignments.map { case (topic, assignment) =>\n        assignment.map { case (partition, brokerIds) =>\n          if(brokerIds.forall(brokerIds.contains))\n            Right(TopicAndPartition(topic, partition) -> brokerIds)\n          else\n            Left(s\"Invalid broker ids : $brokerIds\")\n        }.foldLeft[ErrorOr[List[(TopicAndPartition, List[Int])]]](Right(List.empty)) { case (errorOrAssignments, errorOrAssignment) =>\n          errorOrAssignments.zip(errorOrAssignment) { (assignments, assignment) =>\n            assignment :: assignments\n          }\n        }\n      }.foldLeft[ErrorOr[List[(TopicAndPartition, List[Int])]]](Right(List.empty)) { case (errorOrAssignments, errorOrAssignment) =>\n        errorOrAssignments.zip(errorOrAssignment) { (assignments, assignment) =>\n          assignment ::: assignments\n        }\n      }\n      errorOrAssignments.fold(\n        error => Future.successful[ErrorOr[Unit]](Left(error)),\n        assignments => {\n          val future = KafkaManager.sendCommandRequest(KMClusterCommandRequest(clusterName, CMManualPartitionAssignments(assignments)))\n          future.map[ErrorOr[Unit]] { errorOrResult =>\n            errorOrResult.fold(\n              error => Left(error),\n              result => result.result.fold(error => Left(error), _ => Right({}))\n            )\n          }\n        }\n      )\n    })\n  }\n  Await.result(future2, 30.seconds", "CodeBleu_score": 20.263778681785418}, {"code": "def manualPartitionAssignments(clusterName: String,\n                                 assignments: List[(String, List[(Int, List[Int])])]) = {\n\t  implicit val ec = ExecutionContext.Implicits.global\n  val future = KafkaManager.getClusterView(clusterName)\n  future.flatMap { errorOrClusterView =>\n    errorOrClusterView.fold(Future.successful(_), { clusterView =>\n      val brokers = clusterView.brokers\n      val currentAssignments = clusterView.topicPartitionsIdentityMap\n      val errorOrAssignments = assignments.map { case (topic, partitionAssignments) =>\n        val errorOrTopicIdentity = currentAssignments.get(topic)\n        errorOrTopicIdentity.fold(\n          error => Left(error),\n          topicIdentity => {\n            val partitionErrors = partitionAssignments.map { case (partition, replicas) =>\n              val errorOrPartitionIdentity = topicIdentity.partitionStateMap.get(partition)\n              errorOrPartitionIdentity.fold(\n                error => Left(error),\n                partitionIdentity => {\n                  val replicaErrors = replicas.map { replica =>\n                    if (brokers.exists(_.id == replica)) {\n                      Right(replica)\n                    } else {\n                      val msg = s\"Replica $replica is not in the broker list $brokers!\"\n                      Left(msg)\n                    }\n                  }\n                  if (replicaErrors.forall(_.isRight)) {\n                    Right(partitionIdentity.copy(replicas = replicas))\n                  } else {\n                    val msg = replicaErrors.collect { case Left(error) => error }.mkString(\",\")\n                    Left(msg)\n                  }\n                }\n              )\n            }\n            if (partitionErrors.forall(_.isRight)) {\n              val partitionIdentities = partitionErrors.collect { case Right(partitionIdentity) => partitionIdentity }\n              Right(topicIdentity.copy(partitionStateMap = partitionIdentities.map(p => p.partition -> p).toMap))\n            } else {\n              val msg = partitionErrors.collect { case Left(error) => error }.mkString(\",\")\n              Left(msg)\n            }\n          }\n        )\n      }\n", "CodeBleu_score": 17.308959274585717}, {"code": "def manualPartitionAssignments(clusterName: String,\n                                 assignments: List[(String, List[(Int, List[Int])])]) = {\n\t  implicit val ec = ExecutionContext.global\n  val future = KMClusterManagerActor ? KMClusterCommandRequest(clusterName, CMManualPartitionAssignments(assignments))\n  future.mapTo[KMCommandResult].map { result =>\n    result.result.getOrElse(List.empty[String])\n  }\n}", "CodeBleu_score": 21.048652366738473}]}
{"instance_id": "26fbc2ba1d28", "generation_result": [{"code": "private Config getKafkaBrokerConfig(AdminClient admin) throws Exception{\n\t    Collection<Node> nodes = admin.describeCluster().nodes().get(KAFKA_ADMIN_CLIENT_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n    if (nodes.isEmpty()) {\n        throw new ConnectException(\"No nodes found for describing the cluster\");\n    }\n    Node broker = nodes.iterator().next();\n    ConfigResource resource = new ConfigResource(ConfigResource.Type.BROKER, broker.idString());\n    Map<ConfigResource, Config> configs = admin.describeConfigs(Collections.singleton(resource)).all().get(KAFKA_ADMIN_CLIENT_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n    if (configs.isEmpty()) {\n        throw new ConnectException(\"No configs found for describing the broker\");\n    }\n    return configs.get(resource);\n}", "CodeBleu_score": 61.84760330953167}, {"code": "private Config getKafkaBrokerConfig(AdminClient admin) throws Exception{\n\t    try {\n        // Get the cluster nodes\n        Collection<Node> nodes = admin.describeCluster().nodes().get(KAFKA_TIMEOUT, TimeUnit.MILLISECONDS);\n        if (nodes.isEmpty()) {\n            throw new ConnectException(\"No Kafka nodes found\");\n        }\n        // Select the first node's ID\n        int nodeId = nodes.iterator().next().id();\n        // Get the node's configuration\n        ConfigResource resource = new ConfigResource(ConfigResource.Type.BROKER, Integer.toString(nodeId));\n        Map<ConfigResource, Config> configs = admin.describeConfigs(Collections.singleton(resource)).all().get(KAFKA_TIMEOUT, TimeUnit.MILLISECONDS);\n        if (configs.isEmpty()) {\n            throw new ConnectException(\"No Kafka configuration found\");\n        }\n        return configs.get(resource);\n    } catch (InterruptedException e) {\n        Thread.interrupted();\n        throw new ConnectException(\"Interrupted while trying to get Kafka broker configuration\", e);\n    } catch (ExecutionException e) {\n        throw new ConnectException(\"Failed to get Kafka broker configuration\", e);\n    }\n}", "CodeBleu_score": 59.26201781632494}, {"code": "private Config getKafkaBrokerConfig(AdminClient admin) throws Exception{\n\t    final DescribeTopicsResult result = admin.describeCluster();\n    final Collection<Node> nodes = result.nodes().get(KAFKA_CLUSTER_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n    if (nodes.isEmpty()) {\n        throw new ConnectException(\"Unable to retrieve any nodes in Kafka cluster within the timeout period \" + KAFKA_CLUSTER_TIMEOUT_MS + \"ms\");\n    }\n    final Node node = nodes.iterator().next();\n    final ConfigResource resource = new ConfigResource(ConfigResource.Type.BROKER, node.idString());\n    final Collection<Config> configs = admin.describeConfigs(Collections.singleton(resource)).values().get(KAFKA_CLUSTER_TIMEOUT_MS, TimeUnit.MILLISECONDS).values();\n    if (configs.isEmpty()) {\n        throw new ConnectException(\"Unable to retrieve any configuration for node \" + node.idString() + \" within the timeout period \" + KAFKA_CLUSTER_TIMEOUT_MS + \"ms\");\n    }\n    return configs.iterator().next();\n}", "CodeBleu_score": 53.92238206912199}]}
{"instance_id": "adf40b68c93e", "generation_result": [{"code": "private static Validator forKafka(final Validator validator){\n\t    return (config, field, value) -> {\n        if (config.getString(HistorizedRelationalDatabaseConnectorConfig.SCHEMA_HISTORY_STORAGE).equals(SchemaStorage.KAFKA.name())) {\n            return validator.validate(config, field, value);\n        }\n        return 0;\n    };\n}", "CodeBleu_score": 42.88168446342365}, {"code": "private static Validator forKafka(final Validator validator){\n\t    return (config, field, value) -> {\n        if (config.getString(HistorizedRelationalDatabaseConnectorConfig.SCHEMA_HISTORY_STORAGE).equals(KafkaSchemaHistory.class.getName())) {\n            return validator.validate(config, field, value);\n        }\n        return Collections.emptyList();\n    };\n}", "CodeBleu_score": 44.48085442394774}, {"code": "private static Validator forKafka(final Validator validator){\n\t    return (config, field, value) -> {\n        if (config.getString(HistorizedRelationalDatabaseConnectorConfig.SCHEMA_HISTORY_CLASS_NAME).equals(KafkaDatabaseSchemaHistory.class.getName())) {\n            return validator.validate(config, field, value);\n        }\n        return 0;\n    };\n}", "CodeBleu_score": 45.600702738528014}]}
{"instance_id": "07ff1ca41c93", "generation_result": [{"code": "private synchronized Boolean isTopicCreationEnabled(Map<String, ?> config){\n\t    Boolean topicCreationEnabled = true;\n    String kafkaConnectVersion = getKafkaConnectVersion();\n    if (kafkaConnectVersion != null) {\n        String topicCreationEnable = (String) config.get(\"topic.creation.enable\");\n        if (topicCreationEnable == null) {\n            topicCreationEnabled = true;\n        } else {\n            topicCreationEnabled = Boolean.valueOf(topicCreationEnable);\n        }\n        Matcher matcher = Pattern.compile(\"(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\").matcher(kafkaConnectVersion);\n        if (matcher.find()) {\n            int major = Integer.parseInt(matcher.group(1));\n            int minor = Integer.parseInt(matcher.group(2));\n            int patch = Integer.parseInt(matcher.group(3));\n            if (major == 1 && minor < 1) {\n                topicCreationEnabled = false;\n            }\n        }\n    }\n    return topicCreationEnabled;\n}", "CodeBleu_score": 43.50757925455477}, {"code": "private synchronized Boolean isTopicCreationEnabled(Map<String, ?> config){\n\t    try {\n        String version = AppInfoParser.getVersion();\n        Matcher matcher = Pattern.compile(\"(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(?:-(.*))?\").matcher(version);\n        if (!matcher.find()) {\n            throw new DebeziumException(\"Unable to parse Kafka Connect version: \" + version);\n        }\n        int major = Integer.parseInt(matcher.group(1));\n        int minor = Integer.parseInt(matcher.group(2));\n        int patch = Integer.parseInt(matcher.group(3));\n        String topicCreationEnable = config.getOrDefault(\"topic.creation.enable\", \"true\").toString();\n        return (major > 1 || (major == 1 && minor >= 1)) && topicCreationEnable.equalsIgnoreCase(\"true\");\n    } catch (Exception e) {\n        throw new DebeziumException(\"Unable to determine if topic creation is enabled\", e);\n    }\n}", "CodeBleu_score": 38.36957952406039}, {"code": "private synchronized Boolean isTopicCreationEnabled(Map<String, ?> config){\n\t    // Topic creation is only supported starting from 5.4.0\n    final String version = Version.parseVersion().toString();\n    final Pattern pattern = Pattern.compile(\"(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\");\n    final Matcher matcher = pattern.matcher(version);\n    if (!matcher.find()) {\n        throw new DebeziumException(\"Could not parse Kafka Connect version\");\n    }\n    final Integer major = Integer.parseInt(matcher.group(1));\n    final Integer minor = Integer.parseInt(matcher.group(2));\n    final Integer patch = Integer.parseInt(matcher.group(3));\n    final boolean topicCreationEnabled = Boolean.parseBoolean(config.getOrDefault(\"topic.creation.enable\", \"true\").toString());\n    return topicCreationEnabled && (major > 5 || (major == 5 && (minor > 4 || (minor == 4 && patch >= 0))));\n}", "CodeBleu_score": 38.709265831380314}]}
{"instance_id": "e2cc420e1e63", "generation_result": [{"code": "public static final KafkaOffsetBackingStore kafkaOffsetBackingStore(Map<String, String> config){\n\t    final String clientId = config.get(CLIENT_ID_CONFIG);\n    if (clientId == null) {\n        throw new DebeziumException(String.format(\"The configuration does not contain a value for the mandatory '%s' property\", CLIENT_ID_CONFIG));\n    }\n    final Map<String, Object> adminProps = adminProperties(config);\n    final SharedTopicAdmin admin = new SharedTopicAdmin(adminProps);\n    final Converter offsetStoreConverter = converter(config);\n    return new KafkaOffsetBackingStore(admin, clientId, offsetStoreConverter);\n}", "CodeBleu_score": 35.84638934466883}, {"code": "public static final KafkaOffsetBackingStore kafkaOffsetBackingStore(Map<String, String> config){\n\t    String clientId = config.get(CLIENT_ID_CONFIG);\n    if (clientId == null) {\n        throw new DebeziumException(String.format(\"The '%s' configuration option is required for the Kafka offset backing store\", CLIENT_ID_CONFIG));\n    }\n    Map<String, Object> adminProps = adminProperties(config);\n    SharedTopicAdmin admin = new SharedTopicAdmin(adminProps);\n    Converter offsetStoreConverter = offsetStoreConverter(config);\n    return new KafkaOffsetBackingStore(admin, clientId, offsetStoreConverter);\n}", "CodeBleu_score": 33.90261854679119}, {"code": "public static final KafkaOffsetBackingStore kafkaOffsetBackingStore(Map<String, String> config){\n\t    String clientId = config.get(CLIENT_ID_CONFIG);\n    if (clientId == null) {\n        throw new DebeziumException(String.format(\"The '%s' configuration property must be specified\", CLIENT_ID_CONFIG));\n    }\n    Map<String, Object> adminProps = adminProperties(config);\n    SharedTopicAdmin admin = new SharedTopicAdmin(adminProps);\n    Converter converter = converter(config);\n    return new KafkaOffsetBackingStore(admin, converter, clientId);\n}", "CodeBleu_score": 31.972907966698383}]}
{"instance_id": "4ecb2279231e", "generation_result": [{"code": "private T readKey(JsonNode node) throws IOException{\n\t    if (!node.isObject()) {\n        throw new IOException(\"Key is not a Json object. It is of type \" + node.getNodeType());\n    }\n    JsonNode payload = node.get(\"payload\");\n    if (payload == null) {\n        payload = node;\n    }\n    if (payload.isObject()) {\n        Iterator<String> iterator = payload.fieldNames();\n        if (iterator.hasNext()) {\n            String fieldName = iterator.next();\n            if (iterator.hasNext()) {\n                return readCompositeKey(payload);\n            } else {\n                return readSimpleKey(payload, fieldName);\n            }\n        }\n        throw new IOException(\"Key is not a simple or composite key.\");\n    } else {\n        throw new IOException(\"Key is not a Json object. It is of type \" + node.getNodeType());\n    }\n}", "CodeBleu_score": 38.84405733352017}, {"code": "private T readKey(JsonNode node) throws IOException{\n\t    if (!node.isObject()) {\n        throw new IllegalArgumentException(\"Key must be a JSON object\");\n    }\n    JsonNode payload = node.get(\"payload\");\n    if (payload == null) {\n        payload = node;\n    }\n    final ObjectReader reader = objectMapper.readerFor(keyClass);\n    if (payload.fieldNames().hasNext()) {\n        Iterator<String> fieldNames = payload.fieldNames();\n        String fieldName = fieldNames.next();\n        if (fieldNames.hasNext()) {\n            return reader.readValue(payload);\n        } else {\n            return reader.readValue(payload.get(fieldName));\n        }\n    } else {\n        return reader.readValue(payload);\n    }\n}", "CodeBleu_score": 49.511289340988924}, {"code": "private T readKey(JsonNode node) throws IOException{\n\t    if (node.isObject()) {\n        node = node.get(\"payload\");\n    }\n    Iterator<String> fieldNames = node.fieldNames();\n    if (!fieldNames.hasNext()) {\n        throw new IOException(\"Could not read key. The key is empty.\");\n    }\n    String fieldName = fieldNames.next();\n    if (fieldNames.hasNext()) {\n        return deserializer.deserialize(fieldName, node.toString().getBytes());\n    } else {\n        return deserializer.deserialize(fieldName, node.get(fieldName).toString().getBytes());\n    }\n}", "CodeBleu_score": 39.02423545682428}]}
{"instance_id": "b8ba1bfc7b5e", "generation_result": [{"code": "public String topicNameFor(I id, String prefix, String delimiter){\n\t    String topicName = topicNameFor(id, prefix, delimiter);\n    StringBuilder sb = new StringBuilder();\n    boolean changed = false;\n    for (int i = 0; i < topicName.length(); i++) {\n        char ch = topicName.charAt(i);\n        if (isValidTopicChar(ch)) {\n            sb.append(ch);\n        } else {\n            sb.append(replacementChar);\n            changed = true;\n        }\n    }\n    if (changed) {\n        logger.warn(\"The topic name '{}' contains invalid characters, so it was replaced with '{}'\", topicName, sb.toString());\n        return sb.toString();\n    }\n    return topicName;\n}", "CodeBleu_score": 53.12670264527255}, {"code": "public String topicNameFor(I id, String prefix, String delimiter){\n\t    String topicName = delegate.topicNameFor(id);\n    StringBuilder sanitizedTopicName = new StringBuilder();\n    boolean topicNameWasSanitized = false;\n    for (char c : topicName.toCharArray()) {\n        if (isValidTopicNameCharacter(c)) {\n            sanitizedTopicName.append(c);\n        } else {\n            sanitizedTopicName.append(replacementCharacter);\n            topicNameWasSanitized = true;\n        }\n    }\n    if (topicNameWasSanitized) {\n        logger.warn(\"The topic name {} for {} was sanitized to {}\", topicName, id, sanitizedTopicName);\n    }\n    return sanitizedTopicName.toString();\n}", "CodeBleu_score": 40.605730217405686}, {"code": "public String topicNameFor(I id, String prefix, String delimiter){\n\t    String topicName = topicNameFor(id, prefix, delimiter);\n    StringBuilder sb = new StringBuilder();\n    boolean changed = false;\n    for (int i = 0; i != topicName.length(); ++i) {\n        char ch = topicName.charAt(i);\n        if (isValidTopicNameCharacter(ch)) {\n            sb.append(ch);\n        } else {\n            sb.append(replacementCharacter);\n            changed = true;\n        }\n    }\n    if (changed) {\n        logger.warn(\"The topic name '{}' contains invalid characters, so it was replaced with '{}'\", topicName, sb.toString());\n        return sb.toString();\n    }\n    return topicName;\n}", "CodeBleu_score": 51.62320116607042}]}
{"instance_id": "9cf0d74c098d", "generation_result": [{"code": "public ErrorHandler(Class<? extends SourceConnector> connectorType, CommonConnectorConfig connectorConfig,\n                        ChangeEventQueue<?> queue, ErrorHandler replacedErrorHandler) {\n\t\n    this.connectorType = connectorType;\n    this.connectorConfig = connectorConfig;\n    this.queue = queue;\n    this.producerThrowable = new AtomicReference<>();\n    this.maxRetries = connectorConfig.getMaxRetries();\n    if (replacedErrorHandler != null) {\n        this.retries = replacedErrorHandler.retries;\n    }\n}", "CodeBleu_score": 63.93701085525264}, {"code": "public ErrorHandler(Class<? extends SourceConnector> connectorType, CommonConnectorConfig connectorConfig,\n                        ChangeEventQueue<?> queue, ErrorHandler replacedErrorHandler) {\n\t    this.connectorType = connectorType;\n    this.connectorConfig = connectorConfig;\n    this.queue = queue;\n    this.producerThrowable = new AtomicReference<>();\n    this.maxRetries = connectorConfig.getLong(CommonConnectorConfig.MAX_RETRIES);\n    if (replacedErrorHandler != null) {\n        this.retries = replacedErrorHandler.retries;\n    }\n}", "CodeBleu_score": 62.216948486580606}, {"code": "public ErrorHandler(Class<? extends SourceConnector> connectorType, CommonConnectorConfig connectorConfig,\n                        ChangeEventQueue<?> queue, ErrorHandler replacedErrorHandler) {\n\t    this.connectorType = connectorType;\n    this.connectorConfig = connectorConfig;\n    this.queue = queue;\n    this.producerThrowable = new AtomicReference<>();\n    this.maxRetries = connectorConfig.getInteger(CommonConnectorConfig.MAX_RETRIES);\n    if (maxRetries == null) {\n        this.maxRetries = Integer.MAX_VALUE;\n    }\n    if (replacedErrorHandler != null) {\n        this.retries = replacedErrorHandler.retries;\n    }\n}", "CodeBleu_score": 66.32914544984503}]}
{"instance_id": "8ab4bf3a4dd8", "generation_result": [{"code": "public void validate(Configuration configuration, Field.Set fields){\n\t    final ConfigValue configValue = configuration.validateAndRecord(fields, (Field field, Validator validator, Object currentValue) -> {\n        if (validator.isValid(currentValue)) {\n            return true;\n        }\n        return false;\n    });\n    if (configValue != null && configValue.errorMessages().size() > 0) {\n        throw new ConfigException(configValue.name(), configValue.errorMessages().get(0));\n    }\n}", "CodeBleu_score": 40.696329269209116}, {"code": "public void validate(Configuration configuration, Field.Set fields){\n\t    final Map<String, ConfigValue> results = configuration.validate(fields);\n    for (ConfigValue value : results.values()) {\n        if (value.errorMessages().size() > 0) {\n            throw new ConfigException(value.name(), value.errorMessages().get(0));\n        }\n    }\n}", "CodeBleu_score": 43.88942024795903}, {"code": "public void validate(Configuration configuration, Field.Set fields){\n\t    final Map<String, ConfigValue> results = configuration.validate(fields);\n    final StringBuilder messages = new StringBuilder();\n    for (final ConfigValue result : results.values()) {\n        if (result.errorMessages().size() > 0) {\n            messages.append(result.errorMessages().get(0));\n            break;\n        }\n    }\n    if (messages.length() > 0) {\n        throw new ConfigException(messages.toString());\n    }\n}", "CodeBleu_score": 41.81345484024482}]}
{"instance_id": "860405dc9abb", "generation_result": [{"code": "private Schema buildNewSchema(String fieldName, Schema oldSchema, Map<String, Header> headerToProcess, List<String> nestedFields, int level){\n\t    if (oldSchema == null) {\n        return null;\n    }\n\n    if (oldSchema.type() == Schema.Type.STRUCT) {\n        SchemaBuilder newSchemaBuilder = SchemaBuilder.struct();\n        newSchemaBuilder.name(oldSchema.name());\n        newSchemaBuilder.version(oldSchema.version());\n        newSchemaBuilder.doc(oldSchema.doc());\n        newSchemaBuilder.parameters(oldSchema.parameters());\n\n        for (Field field : oldSchema.fields()) {\n            if (nestedFields.contains(field.name())) {\n                SchemaBuilder nestedSchemaBuilder = SchemaBuilder.struct();\n                nestedSchemaBuilder.name(field.schema().name());\n                nestedSchemaBuilder.version(field.schema().version());\n                nestedSchemaBuilder.doc(field.schema().doc());\n                nestedSchemaBuilder.parameters(field.schema().parameters());\n\n                for (Field nestedField : field.schema().fields()) {\n                    if (headerToProcess.containsKey(nestedField.name())) {\n                        Header header = headerToProcess.get(nestedField.name());\n                        SchemaBuilder headerSchemaBuilder = SchemaBuilder.struct();\n                        headerSchemaBuilder.name(header.schema().name());\n                        headerSchemaBuilder.version(header.schema().version());\n                        headerSchemaBuilder.doc(header.schema().doc());\n                        headerSchemaBuilder.parameters(header.schema().parameters());\n                        headerSchemaBuilder.field(header.schema().name(), header.schema());\n                        nestedSchemaBuilder.field(nestedField.name(), headerSchemaBuilder.build());\n                        headerToProcess.remove(nestedField.name());\n                        logger.debug(format(\"Added field %s to schema %s at level %s\", nestedField.name(), nestedSchemaBuilder.name(), level));\n                    } else {\n                        nestedSchemaBuilder.field(nestedField.name(), buildNewSchema(nestedField.name(), nestedField.schema(), headerToProcess, nestedFields, level + 1));\n                    }\n                }\n                newSchemaBuilder.field(field.name(), nestedSchemaBuilder.build());\n                logger.debug(format(\"Added field %s to schema %s at level %s", "CodeBleu_score": 32.03352107978914}, {"code": "private Schema buildNewSchema(String fieldName, Schema oldSchema, Map<String, Header> headerToProcess, List<String> nestedFields, int level){\n\t    if (oldSchema == null) {\n        return null;\n    }\n    if (oldSchema.type() == Schema.Type.STRUCT) {\n        SchemaBuilder builder = SchemaUtil.copySchemaBasics(oldSchema, SchemaBuilder.struct());\n        for (Field field : oldSchema.fields()) {\n            if (nestedFields != null && nestedFields.contains(field.name())) {\n                Schema newSchema = buildNewSchema(field.name(), field.schema(), headerToProcess, nestedFields, level + 1);\n                builder.field(field.name(), newSchema);\n            } else {\n                builder.field(field.name(), field.schema());\n            }\n        }\n        for (Map.Entry<String, Header> entry : headerToProcess.entrySet()) {\n            builder.field(entry.getKey(), entry.getValue().schema());\n        }\n        return builder.build();\n    } else {\n        return oldSchema;\n    }\n}", "CodeBleu_score": 40.74555066469438}, {"code": "private Schema buildNewSchema(String fieldName, Schema oldSchema, Map<String, Header> headerToProcess, List<String> nestedFields, int level){\n\t    if (oldSchema == null) {\n        return null;\n    }\n    if (oldSchema.type() == Schema.Type.STRUCT) {\n        SchemaBuilder newSchemaBuilder = SchemaBuilder.struct();\n        newSchemaBuilder.name(oldSchema.name());\n        newSchemaBuilder.doc(oldSchema.doc());\n        newSchemaBuilder.version(oldSchema.version());\n        if (oldSchema.isOptional()) {\n            newSchemaBuilder.optional();\n        }\n        for (Field field : oldSchema.fields()) {\n            String fieldName = field.name();\n            if (nestedFields.contains(fieldName)) {\n                newSchemaBuilder.field(fieldName, buildNewSchema(fieldName, field.schema(), headerToProcess, nestedFields, level + 1));\n            } else {\n                newSchemaBuilder.field(fieldName, field.schema());\n            }\n        }\n        for (String headerName : headerToProcess.keySet()) {\n            if (nestedFields.contains(headerName)) {\n                newSchemaBuilder.field(headerName, buildNewSchema(headerName, headerToProcess.get(headerName).schema(), headerToProcess, nestedFields, level + 1));\n            } else {\n                newSchemaBuilder.field(headerName, headerToProcess.get(headerName).schema());\n            }\n        }\n        return newSchemaBuilder.build();\n    } else {\n        return oldSchema;\n    }\n}", "CodeBleu_score": 40.40214237834911}]}
{"instance_id": "681a0415df83", "generation_result": [{"code": "public static SnapshotRecord fromSource(Struct source){\n\t    if (source.schema().field(SNAPSHOT_KEY) != null) {\n        String snapshotString = source.getString(SNAPSHOT_KEY);\n        if (snapshotString != null) {\n            return SnapshotRecord.valueOf(snapshotString.toUpperCase());\n        }\n    }\n    return null;\n}", "CodeBleu_score": 44.94405568600424}, {"code": "public static SnapshotRecord fromSource(Struct source){\n\t    if (source == null) {\n        return null;\n    }\n\n    final String snapshotString = (String) source.get(SNAPSHOT_KEY);\n    if (snapshotString == null) {\n        return null;\n    }\n\n    try {\n        return SnapshotRecord.valueOf(snapshotString.toUpperCase());\n    } catch (IllegalArgumentException e) {\n        return null;\n    }\n}", "CodeBleu_score": 43.1924755689427}, {"code": "public static SnapshotRecord fromSource(Struct source){\n\t    if (source == null) {\n        return null;\n    }\n    if (source.schema().field(SNAPSHOT_KEY) == null) {\n        return null;\n    }\n    String snapshotString = source.getString(SNAPSHOT_KEY);\n    if (snapshotString == null) {\n        return null;\n    }\n    return SnapshotRecord.valueOf(snapshotString.toUpperCase());\n}", "CodeBleu_score": 37.663397123426506}]}
{"instance_id": "85ef1162e38a", "generation_result": [{"code": "public static Optional<Float> parse(String version) throws NumberFormatException{\n\t    String[] parts = version.split(\"\\\\.\");\n    String[] firstParts = parts[0].split(\"-\");\n    return Optional.of(Float.parseFloat(firstParts[0]));\n}", "CodeBleu_score": 37.15623411853842}, {"code": "public static Optional<Float> parse(String version) throws NumberFormatException{\n\t    return Optional.of(version.split(\"\\\\.\")[0].split(\"-\")[0]).map(Float::parseFloat);\n}", "CodeBleu_score": 13.407156835510193}, {"code": "public static Optional<Float> parse(String version) throws NumberFormatException{\n\t    String[] parts = version.split(\"\\\\.\");\n    if (parts.length > 2) {\n        parts = new String[] { parts[0], parts[1] };\n    }\n    String[] hyphenParts = parts[0].split(\"-\");\n    return Optional.of(Float.parseFloat(hyphenParts[0]));\n}", "CodeBleu_score": 53.94307444974649}]}
{"instance_id": "64346d69eba0", "generation_result": [{"code": "public Mono<ResponseEntity<ConnectorDTO>> createConnector(String clusterName, String connectName,\n                                                            @Valid Mono<NewConnectorDTO> connector,\n                                                            ServerWebExchange exchange){\n\t\n    return clusterConnectService.getClusterByName(clusterName)\n        .flatMap(cluster -> connectService.getConnectByName(cluster, connectName)\n            .flatMap(connect -> {\n                AccessContext context = accessContextFactory.buildContext(exchange, cluster, connect);\n                return accessValidator.validateAccess(context, ConnectAction.CREATE)\n                    .then(connectService.createConnector(cluster, connect, connector)\n                        .map(connectorDTO -> ResponseEntity.ok(connectorDTO))\n                        .doOnSuccess(response -> auditService.sendEvent(\n                            context,\n                            AuditOperation.CREATE_CONNECTOR,\n                            response.getBody()\n                        ))\n                    );\n            })\n        );\n}", "CodeBleu_score": 33.56195812786098}, {"code": "public Mono<ResponseEntity<ConnectorDTO>> createConnector(String clusterName, String connectName,\n                                                            @Valid Mono<NewConnectorDTO> connector,\n                                                            ServerWebExchange exchange){\n\t    return kafkaConnectService.createConnector(clusterName, connectName, connector)\n        .map(ResponseEntity::ok)\n        .switchIfEmpty(Mono.just(ResponseEntity.notFound().build()));\n}", "CodeBleu_score": 21.494640734546763}, {"code": "public Mono<ResponseEntity<ConnectorDTO>> createConnector(String clusterName, String connectName,\n                                                            @Valid Mono<NewConnectorDTO> connector,\n                                                            ServerWebExchange exchange){\n\t    return kafkaConnectService.createConnector(clusterName, connectName, connector)\n        .map(connectorDTO -> ResponseEntity.ok(connectorDTO))\n        .switchIfEmpty(Mono.just(ResponseEntity.notFound().build()));\n}", "CodeBleu_score": 23.201213619546518}]}
{"instance_id": "4c446fd64db6", "generation_result": [{"code": "public Mono<ResponseEntity<Void>> deleteConnector(String clusterName, String connectName,\n                                                    String connectorName,\n                                                    ServerWebExchange exchange){\n\t  AccessContext accessContext = AccessContext.builder()\n      .action(ConnectAction.DELETE)\n      .clusterId(clusterName)\n      .connectId(connectName)\n      .connectorId(connectorName)\n      .build();\n\n  return aclService.validateAccess(accessContext, exchange.getPrincipal())\n      .flatMap(aclValidationResult -> {\n        if (!aclValidationResult.isAllowed()) {\n          return Mono.just(ResponseEntity.status(aclValidationResult.getHttpStatus()).build());\n        }\n\n        return kafkaConnectService.deleteConnector(clusterName, connectName, connectorName)\n            .map(o -> ResponseEntity.ok().<Void>build())\n            .doOnSuccess(r -> auditService.sendEvent(\n                exchange.getPrincipal(),\n                accessContext,\n                AuditEventType.DELETE_CONNECTOR,\n                Map.of(\"connectorName\", connectorName)\n            ));\n      });\n}", "CodeBleu_score": 38.76701207695593}, {"code": "public Mono<ResponseEntity<Void>> deleteConnector(String clusterName, String connectName,\n                                                    String connectorName,\n                                                    ServerWebExchange exchange){\n\t\n    AccessContext context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connector(connectorName)\n        .action(ConnectAction.DELETE)\n        .build();\n\n    return rbacService.validate(context)\n        .flatMap(\n            isAllowed -> isAllowed\n                ? kafkaConnectService.deleteConnector(clusterName, connectName, connectorName)\n                .doOnSuccess(ignored -> auditService.sendAuditEvent(\n                    context.toBuilder().operation(\"delete\").build(),\n                    exchange)\n                )\n                .thenReturn(ResponseEntity.ok().build())\n                : Mono.just(ResponseEntity.status(403).build())\n        );\n}", "CodeBleu_score": 47.188437434677546}, {"code": "public Mono<ResponseEntity<Void>> deleteConnector(String clusterName, String connectName,\n                                                    String connectorName,\n                                                    ServerWebExchange exchange){\n\t\n    AccessContext accessContext =\n        AccessContext.builder()\n            .clusterName(clusterName)\n            .connectName(connectName)\n            .connectorName(connectorName)\n            .requiredActions(Set.of(ConnectAction.DELETE_CONNECT))\n            .build();\n\n    return validateAccess(accessContext, exchange)\n        .flatMap(\n            ctx -> kafkaConnectService.deleteConnector(clusterName, connectName, connectorName)\n                .then(audit(accessContext, exchange, \"deleteConnector\"))\n                .thenReturn(ResponseEntity.ok().build())\n        );\n}", "CodeBleu_score": 48.66429623835021}]}
{"instance_id": "d34a49f3ca1b", "generation_result": [{"code": "public Mono<ResponseEntity<Void>> updateConnectorState(String clusterName, String connectName,\n                                                         String connectorName,\n                                                         ConnectorActionDTO action,\n                                                         ServerWebExchange exchange) {\n\t    return accessContextFactory.buildContext(\n        exchange,\n        clusterName,\n        connectName,\n        action,\n        connectorName,\n        null\n    )\n        .flatMap(context ->\n            accessValidator.validate(context)\n                .flatMap(result -> {\n                    if (result.isAllowed()) {\n                        return kafkaConnectService.updateConnectorState(\n                            clusterName,\n                            connectName,\n                            connectorName,\n                            action\n                        )\n                            .doOnEach(\n                                Sinks.empty()\n                                    .asMono()\n                                    .doOnEach(\n                                        signal -> auditLogService.sendEvent(\n                                            context,\n                                            result,\n                                            signal.isOnComplete()\n                                        )\n                                    )\n                            );\n                    } else {\n                        return Mono.error(new AccessDeniedException(result.getReason()));\n                    }\n                })\n        );\n}", "CodeBleu_score": 21.17923644829751}, {"code": "public Mono<ResponseEntity<Void>> updateConnectorState(String clusterName, String connectName,\n                                                         String connectorName,\n                                                         ConnectorActionDTO action,\n                                                         ServerWebExchange exchange) {\n\t    final AccessContext accessContext =\n        AccessContext.builder()\n            .cluster(clusterName)\n            .connect(connectName)\n            .connector(connectorName)\n            .action(ConnectAction.UPDATE)\n            .operation(action.getValue())\n            .build();\n\n    return kafkaConnectService.updateConnectorState(clusterName, connectName, connectorName, action)\n        .doOnNext(\n            __ -> auditLogService.sendAuditLog(\n                accessContext,\n                exchange.getRequest().getHeaders().getOrigin())\n        )\n        .doOnError(\n            error -> auditLogService.sendAuditLog(\n                accessContext,\n                exchange.getRequest().getHeaders().getOrigin(),\n                error)\n        )\n        .map(ResponseEntity::ok);\n}", "CodeBleu_score": 42.53942679076614}, {"code": "public Mono<ResponseEntity<Void>> updateConnectorState(String clusterName, String connectName,\n                                                         String connectorName,\n                                                         ConnectorActionDTO action,\n                                                         ServerWebExchange exchange) {\n\t\n    return getConnect(clusterName, connectName)\n        .flatMap(connect ->\n            getConnector(connect, connectorName)\n                .flatMap(connector ->\n                    kafkaConnectService.updateConnectorState(\n                        connect,\n                        connector,\n                        action,\n                        AccessContext.builder()\n                            .cluster(clusterName)\n                            .connect(connectName)\n                            .connector(connectorName)\n                            .operation(action.toString())\n                            .parameters(Map.of())\n                            .build()\n                    )\n                    .doOnEach(kafkaConnectService.withAuditEvent(\n                        action.toString(),\n                        connector,\n                        exchange\n                    ))\n                    .map(it -> ResponseEntity.noContent().build())\n                )\n        );\n}", "CodeBleu_score": 25.93370450410196}]}
{"instance_id": "199cfe41b374", "generation_result": [{"code": "public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig{\n\t  @Override\n  public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig(\n      String clusterName, String connectName, String pluginName,\n      @Valid Mono<ConnectorPluginConfigValidationResponseDTO> connectorPluginConfigValidationResponseDTO,\n      ServerWebExchange exchange) {\n    return kafkaConnectService.validateConnectorPluginConfig(\n        clusterName, connectName, pluginName, connectorPluginConfigValidationResponseDTO)\n        .map(ResponseEntity::ok);\n  }\n}", "CodeBleu_score": 59.767302842402316}, {"code": "public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig{\n\t  KafkaConnectService kafkaConnectService;\n  public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig(String clusterName, String connectName, String pluginName, @Valid Mono<Object> requestBody, ServerWebExchange exchange) {\n    return kafkaConnectService.validateConnectorPluginConfig(clusterName, connectName, pluginName, requestBody)\n        .map(response -> ResponseEntity.ok(response));\n  }\n}", "CodeBleu_score": 57.4396164728179}, {"code": "public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig{\n\t  private final KafkaConnectService kafkaConnectService;\n\n  public validateConnectorPluginConfig(KafkaConnectService kafkaConnectService) {\n    this.kafkaConnectService = kafkaConnectService;\n  }\n\n  public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> apply(\n      String clusterName, String connectName, String pluginName,\n      @Valid Mono<ConnectorPluginConfigValidationResponseDTO> requestBody,\n      ServerWebExchange exchange) {\n    return requestBody\n        .flatMap(\n            body ->\n                kafkaConnectService\n                    .validateConnectorPluginConfig(clusterName, connectName, pluginName, body)\n                    .map(ResponseEntity::ok));\n  }\n}", "CodeBleu_score": 45.079079297040664}]}
{"instance_id": "88380ae300c4", "generation_result": [{"code": "public static ConfigurableApplicationContext startApplication(String[] args){\n\t    return new SpringApplicationBuilder(KafkaUiApplication.class)\n        .initializers(new DynamicConfigOperations())\n        .run(args);\n}", "CodeBleu_score": 41.97670580114618}, {"code": "public static ConfigurableApplicationContext startApplication(String[] args){\n\t    return new SpringApplicationBuilder(KafkaUiApplication.class)\n        .properties(\n            \"spring.config.additional-location=\" + DynamicConfigOperations.getConfigFilePath(),\n            \"spring.config.import=optional:configserver:\"\n                + DynamicConfigOperations.getConfigServerUrl()\n        )\n        .initializers(DynamicConfigOperations.getDynamicConfigInitializer())\n        .run(args);\n}", "CodeBleu_score": 62.10660279768827}, {"code": "public static ConfigurableApplicationContext startApplication(String[] args){\n\t    return new SpringApplicationBuilder(KafkaUiApplication.class)\n        .initializers(new DynamicConfigOperations())\n        .run(args);\n}", "CodeBleu_score": 41.97670580114618}]}
{"instance_id": "3f022876f737", "generation_result": [{"code": "private Predicate<FullConnectorInfoDTO> matchesSearchTerm(@Nullable final String search){\n\t  return Optional.ofNullable(search)\n      .map(String::toLowerCase)\n      .map(term -> connector -> connector.getConnector().getName().toLowerCase().contains(term)\n          || connector.getConnector().getConfig().keySet().stream().anyMatch(key -> key.toLowerCase().contains(term))\n          || connector.getTasks().stream().anyMatch(task -> task.getId().toLowerCase().contains(term))\n      ).orElse(connector -> true);\n}", "CodeBleu_score": 32.4718080205155}, {"code": "private Predicate<FullConnectorInfoDTO> matchesSearchTerm(@Nullable final String search){\n\t    if (search == null) {\n        return (connector) -> true;\n    }\n    final String lowerCaseSearch = search.toLowerCase();\n    return connector -> connector.getConnector().getName().toLowerCase().contains(lowerCaseSearch)\n        || connector.getConnector().getConfig().entrySet().stream().anyMatch(\n        entry -> entry.getKey().toLowerCase().contains(lowerCaseSearch)\n            || String.valueOf(entry.getValue()).toLowerCase().contains(lowerCaseSearch)\n    );\n}", "CodeBleu_score": 53.58847083180534}, {"code": "private Predicate<FullConnectorInfoDTO> matchesSearchTerm(@Nullable final String search){\n\t  if (search == null) {\n    return connector -> true;\n  }\n  return connector -> {\n    final String lowerCaseSearchTerm = search.toLowerCase();\n    return connector.getName().toLowerCase().contains(lowerCaseSearchTerm)\n        || connector.getConnector().getState().toLowerCase().contains(lowerCaseSearchTerm)\n        || connector.getType().toLowerCase().contains(lowerCaseSearchTerm)\n        || connector.getConnector().getWorkerId().toLowerCase().contains(lowerCaseSearchTerm);\n  };\n}", "CodeBleu_score": 51.19725603699361}]}
{"instance_id": "9754aa1ec96c", "generation_result": [{"code": "  private Map<String, Object> flattenClusterProperties(@Nullable String prefix,\n                                                       @Nullable Map<String, Object> propertiesMap){\n\t    Map<String, Object> flattenedMap = new HashMap<>();\n    if (propertiesMap == null) {\n      return flattenedMap;\n    }\n    for (Map.Entry<String, Object> entry : propertiesMap.entrySet()) {\n      String key = entry.getKey();\n      if (prefix != null) {\n        key = prefix + \".\" + key;\n      }\n      if (entry.getValue() instanceof Map) {\n        flattenedMap.putAll(flattenClusterProperties(key, (Map<String, Object>) entry.getValue()));\n      } else {\n        flattenedMap.put(key, entry.getValue());\n      }\n    }\n    return flattenedMap;\n  }", "CodeBleu_score": 48.48560508894148}, {"code": "  private Map<String, Object> flattenClusterProperties(@Nullable String prefix,\n                                                       @Nullable Map<String, Object> propertiesMap){\n\t    Map<String, Object> flattened = new HashMap<>();\n    if (propertiesMap == null) {\n      return flattened;\n    }\n    for (Map.Entry<String, Object> entry : propertiesMap.entrySet()) {\n      String key = entry.getKey();\n      Object value = entry.getValue();\n      if (prefix != null) {\n        key = prefix + \".\" + key;\n      }\n      if (value instanceof Map) {\n        flattened.putAll(flattenClusterProperties(key, (Map) value));\n      } else {\n        flattened.put(key, value);\n      }\n    }\n    return flattened;\n  }", "CodeBleu_score": 54.267426313515074}, {"code": "  private Map<String, Object> flattenClusterProperties(@Nullable String prefix,\n                                                       @Nullable Map<String, Object> propertiesMap){\n\t    Map<String, Object> flattenedMap = new HashMap<>();\n    if (propertiesMap == null) {\n      return flattenedMap;\n    }\n\n    for (Map.Entry<String, Object> entry : propertiesMap.entrySet()) {\n      String key = entry.getKey();\n      Object value = entry.getValue();\n      if (prefix != null) {\n        key = prefix + \".\" + key;\n      }\n      if (value instanceof Map) {\n        flattenedMap.putAll(flattenClusterProperties(key, (Map<String, Object>) value));\n      } else {\n        flattenedMap.put(key, value);\n      }\n    }\n    return flattenedMap;\n  }", "CodeBleu_score": 52.98652521218163}]}
{"instance_id": "99266677c846", "generation_result": [{"code": " private static Set<String> kafkaConfigKeysToSanitize(){\n\t    ConfigDef configDef = new ConfigDef();\n    configDef.define(SslConfigs.SSL_KEY_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, \"SSL key password\");\n    configDef.define(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, \"SSL keystore password\");\n    configDef.define(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, \"SSL truststore password\");\n    configDef.define(SaslConfigs.SASL_JAAS_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, \"SASL JAAS config\");\n    return configDef.names().stream().filter(key -> configDef.type(key) == ConfigDef.Type.PASSWORD).collect(Collectors.toSet());\n}", "CodeBleu_score": 54.27986562800678}, {"code": " private static Set<String> kafkaConfigKeysToSanitize(){\n\t    final ConfigDef configDef = new ConfigDef();\n    configDef.define(SslConfigs.SSL_KEY_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, \"The password of the private key in the key store file. This is required for client-authentication in SSL.\");\n    configDef.define(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, \"The store password for the keystore file. This is required for client-authentication in SSL.\");\n    configDef.define(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, \"The password for the trust store file.\");\n    configDef.define(SaslConfigs.SASL_JAAS_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, \"JAAS login file. This may be a relative path.\");\n    configDef.define(SaslConfigs.SASL_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, \"Password for SASL/PLAIN, SASL/SCRAM, SASL/DIGEST-MD5, or SASL/CRAM-MD5 mechanisms.\");\n    return configDef.values().stream()\n        .filter(configDefValue -> configDefValue.type == ConfigDef.Type.PASSWORD)\n        .map(configDefValue -> configDefValue.name)\n        .collect(Collectors.toSet());\n}", "CodeBleu_score": 54.457903226352045}, {"code": " private static Set<String> kafkaConfigKeysToSanitize(){\n\t    ConfigDef configDef = new ConfigDef();\n    configDef.define(SslConfigs.SSL_KEY_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, \"SSL private key password\");\n    configDef.define(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, \"SSL keystore password\");\n    configDef.define(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, \"SSL truststore password\");\n    configDef.define(SaslConfigs.SASL_JAAS_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, \"SASL JAAS config\");\n    return configDef.names().stream().filter(name -> configDef.type(name) == ConfigDef.Type.PASSWORD).collect(Collectors.toSet());\n}", "CodeBleu_score": 54.145751390171306}]}
{"instance_id": "deebb6fcb0a8", "generation_result": [{"code": "private Mono<ClusterFeature> aclEdit(ReactiveAdminClient adminClient, ClusterDescription clusterDescription){\n\t  return adminClient.describeCluster().map(cluster -> {\n    final Set<AclOperation> authorizedOperations = clusterDescription.getAuthorizedOperations();\n    final boolean aclViewEnabled = authorizedOperations.contains(AclOperation.DESCRIBE);\n    final boolean aclEditEnabled = authorizedOperations.contains(AclOperation.ALTER);\n    if (aclViewEnabled && aclEditEnabled) {\n      return ClusterFeature.KAFKA_ACL_EDIT;\n    }\n    return null;\n  }).defaultIfEmpty(null);\n}", "CodeBleu_score": 36.60134542756934}, {"code": "private Mono<ClusterFeature> aclEdit(ReactiveAdminClient adminClient, ClusterDescription clusterDescription){\n\t    return adminClient.describeAcls()\n        .map(acl -> acl.getAuthorizedOperations())\n        .collectList()\n        .map(operations -> operations.stream()\n            .filter(Predicate.isEqual(AclOperation.ALTER))\n            .findAny())\n        .map(acl -> acl.isPresent() ? ClusterFeature.KAFKA_ACL_EDIT : ClusterFeature.KAFKA_ACL_READ);\n}", "CodeBleu_score": 29.218627814620323}, {"code": "private Mono<ClusterFeature> aclEdit(ReactiveAdminClient adminClient, ClusterDescription clusterDescription){\n\t    return Mono.justOrEmpty(clusterDescription)\n        .flatMapIterable(ClusterDescription::getBrokerConfig)\n        .filter(brokerConfig -> brokerConfig.getName().equals(\"authorizer.class.name\"))\n        .filter(brokerConfig -> brokerConfig.getValue().contains(\"AclAuthorizer\"))\n        .switchIfEmpty(Mono.error(new IllegalStateException(\"Can't find authorizer.class.name\")))\n        .flatMap(brokerConfig -> adminClient.describeAcls(AclOperation.ALTER, AclOperation.ALL))\n        .map(aclBinding -> aclBinding.getResourcePattern().name())\n        .filter(Predicate.isEqual(\"CLUSTER\"))\n        .switchIfEmpty(Mono.error(new IllegalStateException(\"Can't find ACL for CLUSTER\")))\n        .then(Mono.just(ClusterFeature.KAFKA_ACL_EDIT));\n}", "CodeBleu_score": 26.79545044038149}]}
{"instance_id": "a5d8cc77955f", "generation_result": [{"code": "protected TreeMap<TopicPartition, FromToOffset> nextPollingRange(TreeMap<TopicPartition, FromToOffset> prevRange,\n                                                                   SeekOperations seekOperations){\n\t    Map<TopicPartition, Long> fromOffsets =\n        prevRange.isEmpty() ? seekOperations.getSeekToOffsets() :\n            prevRange.entrySet().stream()\n                .collect(Collectors.toMap(Map.Entry::getKey, e -> e.getValue().getTo()));\n\n    int messagesToPoll = getMessagesToPoll();\n\n    return fromOffsets.entrySet().stream()\n        .collect(Collectors.toMap(Map.Entry::getKey,\n            e -> {\n                TopicPartition tp = e.getKey();\n                long fromOffset = e.getValue();\n                long toOffset = fromOffset + messagesToPoll;\n                return new FromToOffset(fromOffset, toOffset);\n            },\n            (a, b) -> b,\n            TreeMap::new));\n}", "CodeBleu_score": 39.7383274312748}, {"code": "protected TreeMap<TopicPartition, FromToOffset> nextPollingRange(TreeMap<TopicPartition, FromToOffset> prevRange,\n                                                                   SeekOperations seekOperations){\n\t    TreeMap<TopicPartition, FromToOffset> nextRange = new TreeMap<>();\n    seekOperations.getSeekTo().forEach((topicPartition, offset) -> nextRange.put(topicPartition,\n        new FromToOffset(offset, offset)));\n    prevRange.forEach((topicPartition, fromToOffset) -> {\n        long startOffset = fromToOffset.getFrom();\n        long endOffset = fromToOffset.getTo();\n        if (startOffset == endOffset) {\n            startOffset = seekOperations.getSeekTo().getOrDefault(topicPartition, startOffset);\n        }\n        long numMessages = seekOperations.getSeekTo().getOrDefault(topicPartition, endOffset) - startOffset;\n        numMessages = Math.max(numMessages, 0);\n        if (numMessages == 0) {\n            numMessages = seekOperations.getMaxMessages();\n        }\n        startOffset = Math.max(startOffset - numMessages, 0);\n        nextRange.put(topicPartition, new FromToOffset(startOffset, endOffset));\n    });\n    return nextRange;\n}", "CodeBleu_score": 40.42424622157118}, {"code": "protected TreeMap<TopicPartition, FromToOffset> nextPollingRange(TreeMap<TopicPartition, FromToOffset> prevRange,\n                                                                   SeekOperations seekOperations){\n\t    TreeMap<TopicPartition, FromToOffset> newRange = new TreeMap<>();\n\n    for (Map.Entry<TopicPartition, FromToOffset> entry : prevRange.entrySet()) {\n        TopicPartition topicPartition = entry.getKey();\n        FromToOffset range = entry.getValue();\n        FromToOffset seekRange = seekOperations.get(topicPartition);\n        long offset = seekRange != null ? seekRange.getFrom() : range.getFrom();\n        long to = seekRange != null ? seekRange.getTo() : range.getTo();\n        long newFrom = offset;\n        long newTo = Math.max(newFrom, to - getMessagesPerPartition());\n        newRange.put(topicPartition, new FromToOffset(newFrom, newTo));\n    }\n\n    return newRange;\n}", "CodeBleu_score": 30.96871214018078}]}
{"instance_id": "c4c657caeba5", "generation_result": [{"code": "public void doLaunch(final MessageInput input){\n\t    final Configuration configuration = input.getConfiguration();\n    final Logger log = LoggerFactory.getLogger(KafkaTransport.class);\n\n    final boolean legacyMode = configuration.getBoolean(CKafkaTransportConfiguration.CKafkaTransportConfiguration.LEGACY_MODE);\n    final boolean useZooKeeper = configuration.getBoolean(CKafkaTransportConfiguration.CKafkaTransportConfiguration.USE_ZOOKEEPER);\n    final boolean useSASL = configuration.getBoolean(CKafkaTransportConfiguration.CKafkaTransportConfiguration.USE_SASL);\n    final boolean useSSL = configuration.getBoolean(CKafkaTransportConfiguration.CKafkaTransportConfiguration.USE_SSL);\n    final String groupId = configuration.getString(CKafkaTransportConfiguration.CKafkaTransportConfiguration.GROUP_ID);\n    final String topic = configuration.getString(CKafkaTransportConfiguration.CKafkaTransportConfiguration.TOPIC);\n    final String zooKeeperConnect = configuration.getString(CKafkaTransportConfiguration.CKafkaTransportConfiguration.ZOOKEEPER_CONNECT);\n    final String bootstrapServers = configuration.getString(CKafkaTransportConfiguration.CKafkaTransportConfiguration.BOOTSTRAP_SERVERS);\n    final String keyDeserializer = configuration.getString(CKafkaTransportConfiguration.CKafkaTransportConfiguration.KEY_DESERIALIZER);\n    final String valueDeserializer = configuration.getString(CKafkaTransportConfiguration.CKafkaTransportConfiguration.VALUE_DESERIALIZER);\n    final String consumerId = configuration.getString(CKafkaTransportConfiguration.CKafkaTransportConfiguration.CONSUMER_ID);\n    final String clientId = configuration.getString(CKafkaTransportConfiguration.CKafkaTransportConfiguration.CLIENT_ID);\n    final String saslMechanism = configuration.getString(CKafkaTransportConfiguration.CKafkaTransportConfiguration.SASL_MECHANISM);\n    final String securityProtocol = configuration.getString(CKafkaTransportConfiguration.CKafkaTransportConfiguration.SECURITY_PROTOCOL);\n    final String saslJaasConfig = configuration.getString(CKafkaTransportConfiguration.CKafkaTransportConfiguration.SASL_JAAS_CONFIG);\n    final String sslTruststoreLocation = configuration.getString(CKafkaTransportConfiguration.CKafkaTransportConfiguration.SSL_TRUSTSTORE_", "CodeBleu_score": 24.98668899801891}, {"code": "public void doLaunch(final MessageInput input){\n\t    final Configuration configuration = input.getConfiguration();\n    final String mode = configuration.getString(\"mode\");\n    final String zookeeperConnect = configuration.getString(\"zookeeper_connect\");\n    final String bootstrapServers = configuration.getString(\"bootstrap_servers\");\n    final boolean legacyMode = \"legacy\".equals(mode);\n    final boolean isZookeeperConfigured = !Strings.isNullOrEmpty(zookeeperConnect);\n    final boolean isBootstrapServersConfigured = !Strings.isNullOrEmpty(bootstrapServers);\n\n    if (legacyMode && !isZookeeperConfigured) {\n        throw new IllegalStateException(\"ZooKeeper connect string must be set in legacy mode.\");\n    }\n\n    if (!legacyMode && !isBootstrapServersConfigured) {\n        throw new IllegalStateException(\"Bootstrap servers must be set in new mode.\");\n    }\n\n    if (legacyMode) {\n        LOG.info(\"Launching Kafka input in legacy mode.\");\n        final String topicFilter = configuration.getString(\"topic_filter\");\n        final String groupId = configuration.getString(\"group_id\");\n        final String clientId = configuration.getString(\"client_id\");\n        final int consumerStreams = configuration.getInt(\"consumer_streams\");\n        final boolean useOldConsumer = configuration.getBoolean(\"use_old_consumer\");\n        final boolean useSsl = configuration.getBoolean(\"use_ssl\");\n        final boolean useSasl = configuration.getBoolean(\"use_sasl\");\n        final boolean useSaslPlaintext = configuration.getBoolean(\"use_sasl_plaintext\");\n        final boolean useSaslGssapi = configuration.getBoolean(\"use_sasl_gssapi\");\n        final String saslGssapiServiceName = configuration.getString(\"sasl_gssapi_service_name\");\n        final String saslGssapiKerberosPrincipal = configuration.getString(\"sasl_gssapi_kerberos_principal\");\n        final String saslGssapiKeyTab = configuration.getString(\"sasl_gssapi_key_tab\");\n        final boolean useSaslScram = configuration.", "CodeBleu_score": 37.9435393157511}, {"code": "public void doLaunch(final MessageInput input){\n\t    final KafkaTransport transport = (KafkaTransport) input.getTransport();\n    final KafkaMessageInput kafkaInput = (KafkaMessageInput) input;\n    final Configuration configuration = input.getConfiguration();\n    final EventBus serverEventBus = injector.getInstance(EventBus.class);\n    final ServerStatus serverStatus = injector.getInstance(ServerStatus.class);\n    final NodeId nodeId = injector.getInstance(NodeId.class);\n    final LocalMetricRegistry localRegistry = injector.getInstance(LocalMetricRegistry.class);\n\n    final String groupId = configuration.getString(CKafkaTransport.CKafkaTransportConfiguration.GROUP_ID);\n    final String clientId = configuration.getString(CKafkaTransport.CKafkaTransportConfiguration.CLIENT_ID);\n    final String topic = configuration.getString(CKafkaTransport.CKafkaTransportConfiguration.TOPIC);\n    final String zkConnect = configuration.getString(CKafkaTransport.CKafkaTransportConfiguration.ZOOKEEPER);\n    final String brokers = configuration.getString(CKafkaTransport.CKafkaTransportConfiguration.BOOTSTRAP_SERVERS);\n    final String keyDeserializer = configuration.getString(CKafkaTransport.CKafkaTransportConfiguration.KEY_DESERIALIZER);\n    final String valueDeserializer = configuration.getString(CKafkaTransport.CKafkaTransportConfiguration.VALUE_DESERIALIZER);\n    final String securityProtocol = configuration.getString(CKafkaTransport.CKafkaTransportConfiguration.SECURITY_PROTOCOL);\n    final String saslMechanism = configuration.getString(CKafkaTransport.CKafkaTransportConfiguration.SASL_MECHANISM);\n    final String saslJaasConfig = configuration.getString(CKafkaTransport.CKafkaTransportConfiguration.SASL_JAAS_CONFIG);\n    final String sslTruststoreLocation = configuration.getString(CKafkaTransport.CKafkaTransportConfiguration.SSL_TRUSTSTORE_LOCATION);\n    final String sslTruststorePassword = configuration.getString(CKafkaTransport.CKafkaTransportConfiguration.SSL_TRUSTSTORE_PASSWORD);\n    final String sslKeystoreLocation = configuration.getString(CKafkaTransport.CKafkaTransportConfiguration.SSL_KEYSTORE_LOC", "CodeBleu_score": 23.209136743564816}]}
{"instance_id": "dffe85dbb47b", "generation_result": [{"code": "private void insertCustomProperties(Properties props){\n\t    if (customProperties != null) {\n        try {\n            Properties customProps = new Properties();\n            customProps.load(new ByteArrayInputStream(customProperties.getBytes(StandardCharsets.UTF_8)));\n            props.putAll(customProps);\n        } catch (IOException e) {\n            LOG.error(\"Failed to load custom properties: {}\", e.getMessage());\n        }\n    }\n}", "CodeBleu_score": 43.867884356789844}, {"code": "private void insertCustomProperties(Properties props){\n\t    try {\n        String customProperties = configuration.getString(\"custom_properties\");\n        if (!Strings.isNullOrEmpty(customProperties)) {\n            Properties customProps = new Properties();\n            customProps.load(new ByteArrayInputStream(customProperties.getBytes(StandardCharsets.UTF_8)));\n            props.putAll(customProps);\n        }\n    } catch (IOException e) {\n        LOG.error(\"Could not load custom properties: {}\", e.getMessage());\n    }\n}", "CodeBleu_score": 44.726714656744434}, {"code": "private void insertCustomProperties(Properties props){\n\t    try {\n        Properties customProperties = new Properties();\n        customProperties.load(new ByteArrayInputStream(config.getString(CKafkaTransport.CKF_CUSTOM_PROPERTIES).getBytes(StandardCharsets.UTF_8)));\n        props.putAll(customProperties);\n    } catch (IOException e) {\n        log.error(\"Failed to load custom properties.\", e);\n    }\n}", "CodeBleu_score": 54.10690959850489}]}
{"instance_id": "ea146a7bc30c", "generation_result": [{"code": "public void write(List<RawMessageEvent> entries) throws MessageQueueException{\n\t    if (entries == null || entries.isEmpty()) {\n        return;\n    }\n    final List<Journal.Entry> journalEntries = entries.stream()\n        .filter(Objects::nonNull)\n        .map(entry -> new Journal.Entry(entry.getEvent(), entry.getTimestamp()))\n        .collect(Collectors.toList());\n    final long messageBytes = journalEntries.stream()\n        .mapToLong(entry -> entry.getEvent().length)\n        .sum();\n    final Retryer<Void> retryer = RetryerBuilder.<Void>newBuilder()\n        .retryIfExceptionOfType(MessageQueueException.class)\n        .withWaitStrategy(WaitStrategies.exponentialWait(100, 1000, TimeUnit.MILLISECONDS))\n        .withStopStrategy(StopStrategies.stopAfterDelay(5, TimeUnit.SECONDS))\n        .build();\n    try {\n        retryer.call(() -> {\n            journal.write(journalEntries);\n            return null;\n        });\n        messagesWritten.addAndGet(journalEntries.size());\n        bytesWritten.addAndGet(messageBytes);\n    } catch (ExecutionException e) {\n        throw new MessageQueueException(\"Could not write to journal.\", e);\n    } catch (RetryException e) {\n        throw new MessageQueueException(\"Could not write to journal.\", e.getCause());\n    }\n}", "CodeBleu_score": 54.21957859454808}, {"code": "public void write(List<RawMessageEvent> entries) throws MessageQueueException{\n\t    List<Journal.Entry> journalEntries = entries.stream()\n            .filter(Objects::nonNull)\n            .map(entry -> new Journal.Entry(entry.getMessage(), entry.getTimestamp()))\n            .collect(Collectors.toList());\n\n    if (journalEntries.isEmpty()) {\n        return;\n    }\n\n    final long totalMessageBytes = journalEntries.stream()\n            .mapToLong(entry -> entry.message.length)\n            .sum();\n\n    try {\n        final Retryer<Void> retryer = RetryerBuilder.<Void>newBuilder()\n                .withWaitStrategy(WaitStrategies.exponentialWait(100, 1000, TimeUnit.MILLISECONDS))\n                .withStopStrategy(StopStrategies.stopAfterDelay(5, TimeUnit.SECONDS))\n                .retryIfExceptionOfType(MessageQueueException.class)\n                .build();\n\n        retryer.call(() -> {\n            journal.write(journalEntries);\n            return null;\n        });\n\n        messagesWritten.addAndGet(journalEntries.size());\n        messageBytesWritten.addAndGet(totalMessageBytes);\n    } catch (ExecutionException | RetryException e) {\n        throw new MessageQueueException(\"Failed to write messages to journal\", e);\n    }\n}", "CodeBleu_score": 54.887003912539576}, {"code": "public void write(List<RawMessageEvent> entries) throws MessageQueueException{\n\t    final List<Journal.Entry> journalEntries = entries.stream()\n        .filter(Objects::nonNull)\n        .map(entry -> new Journal.Entry(entry.getSource(), entry.getTimestamp(), entry.getMessage()))\n        .collect(Collectors.toList());\n\n    if (journalEntries.isEmpty()) {\n        return;\n    }\n\n    final long messageBytes = journalEntries.stream()\n        .mapToLong(entry -> entry.getMessage().length)\n        .sum();\n\n    try {\n        final Retryer<Void> retryer = RetryerBuilder.<Void>newBuilder()\n            .retryIfExceptionOfType(MessageQueueException.class)\n            .withWaitStrategy(WaitStrategies.exponentialWait(10, TimeUnit.MILLISECONDS, 100, TimeUnit.MILLISECONDS))\n            .withStopStrategy(StopStrategies.stopAfterDelay(5, TimeUnit.SECONDS))\n            .build();\n\n        retryer.call(() -> {\n            journal.write(journalEntries);\n            return null;\n        });\n    } catch (RetryException | ExecutionException e) {\n        throw new MessageQueueException(e);\n    }\n\n    writtenMessages.addAndGet(journalEntries.size());\n    writtenBytes.addAndGet(messageBytes);\n}", "CodeBleu_score": 52.26762571473949}]}
{"instance_id": "944e77614042", "generation_result": [{"code": "public void acknowledge(List<Message> messages){\n\t    Optional<Long> maxMessageQueueID = messages.stream()\n            .map(Message::getId)\n            .max(Long::compareTo);\n\n    if (maxMessageQueueID.isPresent()) {\n        messageQueueAcknowledger.acknowledge(maxMessageQueueID.get());\n    }\n\n    metrics.incrementMessagesAcknowledged(messages.size());\n}", "CodeBleu_score": 38.71053091969407}, {"code": "public void acknowledge(List<Message> messages){\n\t    if (messages == null || messages.isEmpty()) {\n        return;\n    }\n\n    final long maxMessageQueueId = messages.stream()\n            .map(Message::getMessageQueueId)\n            .filter(Optional::isPresent)\n            .map(Optional::get)\n            .max(Long::compareTo)\n            .orElse(0L);\n\n    if (maxMessageQueueId > 0) {\n        final MessageQueueAcknowledger messageQueueAcknowledger = new AbstractMessageQueueAcknowledger(kafkaJournal) {\n            @Override\n            public void acknowledge(long messageQueueId) {\n                kafkaJournal.markJournalOffsetCommitted(messageQueueId);\n            }\n        };\n        messageQueueAcknowledger.acknowledge(maxMessageQueueId);\n    }\n}", "CodeBleu_score": 46.72574082872233}, {"code": "public void acknowledge(List<Message> messages){\n\t    if (messages.isEmpty()) {\n        return;\n    }\n\n    final MessageQueueAcknowledger acknowledger = new AbstractMessageQueueAcknowledger(messageQueue) {\n        @Override\n        protected void acknowledge(long maxValidMessageQueueId) {\n            messageQueue.acknowledge(maxValidMessageQueueId);\n        }\n    };\n\n    acknowledger.acknowledge(messages);\n}", "CodeBleu_score": 32.164772069939765}]}
{"instance_id": "981280879490", "generation_result": [{"code": "private void registerLegacyMetrics(){\n\t    final MetricRegistry metricRegistry = injector.getInstance(MetricRegistry.class);\n    final String className = getClass().getSimpleName();\n    final ImmutableMap<String, String> metrics = ImmutableMap.of(\n            \"journalSize\", \"org.graylog2.journal.journal_size\",\n            \"journalSizeInBytes\", \"org.graylog2.journal.journal_size_in_bytes\",\n            \"journalAge\", \"org.graylog2.journal.journal_age\",\n            \"journalAgeInMillis\", \"org.graylog2.journal.journal_age_in_millis\",\n            \"journalAgeInMinutes\", \"org.graylog2.journal.journal_age_in_minutes\",\n            \"journalAgeInHours\", \"org.graylog2.journal.journal_age_in_hours\",\n            \"journalAgeInDays\", \"org.graylog2.journal.journal_age_in_days\",\n            \"journalFiles\", \"org.graylog2.journal.journal_files\",\n            \"journalFilesCompressed\", \"org.graylog2.journal.journal_files_compressed\",\n            \"journalFilesDeleted\", \"org.graylog2.journal.journal_files_deleted\",\n            \"journalFilesCorrupt\", \"org.graylog2.journal.journal_files_corrupt\",\n            \"journalFilesBeingDeleted\", \"org.graylog2.journal.journal_files_being_deleted\",\n            \"journalReadMessageCounter\", \"org.graylog2.journal.journal_read_message_counter\",\n            \"journalReadMessageRate\", \"org.graylog2.journal.journal_read_message_rate\",\n            \"journalWriteMessageCounter\", \"org.graylog2.journal.journal_write_message_counter\",\n            \"journalWriteMessageRate\", \"org.graylog2.journal.journal_write_message_rate\",\n            \"journalWriteMessageSize\", \"org.graylog2.journal.journal_write_", "CodeBleu_score": 22.517360531807864}, {"code": "private void registerLegacyMetrics(){\n\t    final MetricRegistry metricRegistry = getMetricRegistry();\n    final String prefix = LocalKafkaJournal.class.getName() + \".\";\n    final MetricFilter filter = (name, metric) -> name.startsWith(prefix);\n    final SortedMap<String, Gauge> gauges = metricRegistry.getGauges(filter);\n    final SortedMap<String, Meter> meters = metricRegistry.getMeters(filter);\n    final SortedMap<String, Timer> timers = metricRegistry.getTimers(filter);\n    for (final Map.Entry<String, Gauge> entry : gauges.entrySet()) {\n        final String name = entry.getKey().substring(prefix.length());\n        try {\n            metricRegistry.register(name, entry.getValue());\n        } catch (final IllegalArgumentException e) {\n            LOG.warn(\"Couldn't register legacy metric {}: {}\", name, e.getMessage());\n        }\n    }\n    for (final Map.Entry<String, Meter> entry : meters.entrySet()) {\n        final String name = entry.getKey().substring(prefix.length());\n        try {\n            metricRegistry.register(name, entry.getValue());\n        } catch (final IllegalArgumentException e) {\n            LOG.warn(\"Couldn't register legacy metric {}: {}\", name, e.getMessage());\n        }\n    }\n    for (final Map.Entry<String, Timer> entry : timers.entrySet()) {\n        final String name = entry.getKey().substring(prefix.length());\n        try {\n            metricRegistry.register(name, entry.getValue());\n        } catch (final IllegalArgumentException e) {\n            LOG.warn(\"Couldn't register legacy metric {}: {}\", name, e.getMessage());\n        }\n    }\n}", "CodeBleu_score": 34.037074875887775}, {"code": "private void registerLegacyMetrics(){\n\t    // TODO: Remove this function once the metrics are migrated to the new metrics system\n    final MetricRegistry metricRegistry = this.metricRegistry;\n    final String className = getClass().getSimpleName();\n    final Set<String> metricNames = metricRegistry.getMetrics().keySet();\n    final Iterable<String> legacyMetricNames = Iterables.filter(metricNames, metricName -> metricName.startsWith(className));\n    for (String metricName : legacyMetricNames) {\n        final String legacyMetricName = metricName.replace(className, \"org.graylog2.journal.kafka.KafkaJournal\");\n        try {\n            metricRegistry.register(legacyMetricName, metricRegistry.getMetrics().get(metricName));\n        } catch (IllegalArgumentException e) {\n            LOG.warn(\"Failed to register legacy metric name <{}> for <{}>.\", legacyMetricName, metricName, e);\n        }\n    }\n}", "CodeBleu_score": 37.591143449612744}]}
{"instance_id": "3ca34bfd2d64", "generation_result": [{"code": "private Timer registerHdrTimer(MetricRegistry metricRegistry, final String metricName){\n\t    try {\n        return metricRegistry.register(metricName, new HdrTimer());\n    } catch (IllegalArgumentException e) {\n        return metricRegistry.timer(metricName);\n    }\n}", "CodeBleu_score": 22.284874817707774}, {"code": "private Timer registerHdrTimer(MetricRegistry metricRegistry, final String metricName){\n\t    try {\n        return metricRegistry.register(metricName, new HdrTimer(new TimeImpl()));\n    } catch (IllegalArgumentException e) {\n        return metricRegistry.timer(metricName);\n    }\n}", "CodeBleu_score": 23.190423430508}, {"code": "private Timer registerHdrTimer(MetricRegistry metricRegistry, final String metricName){\n\t    try {\n        return metricRegistry.register(metricName, new HdrTimer());\n    } catch (IllegalArgumentException e) {\n        return metricRegistry.getTimers().get(metricName);\n    }\n}", "CodeBleu_score": 23.262864146954193}]}
{"instance_id": "e1d07a1fa986", "generation_result": [{"code": "private void registerUncommittedGauge(MetricRegistry metricRegistry, String name){\n\t    try {\n        metricRegistry.register(name, new Gauge<Long>() {\n            @Override\n            public Long getValue() {\n                if (logEndOffset.get() == 0) {\n                    return 0L;\n                }\n                if (committedOffset.get() == 0) {\n                    return logEndOffset.get() - logStartOffset.get();\n                }\n                return logEndOffset.get() - committedOffset.get();\n            }\n        });\n    } catch (IllegalArgumentException e) {\n        // Ignore.\n    }\n}", "CodeBleu_score": 57.61422780693161}, {"code": "private void registerUncommittedGauge(MetricRegistry metricRegistry, String name){\n\t    try {\n        metricRegistry.register(name, new Gauge<Integer>() {\n            @Override\n            public Integer getValue() {\n                long uncommittedMessages = 0;\n                for (Map.Entry<TopicAndPartition, Partition> entry : partitionMap.entrySet()) {\n                    TopicAndPartition topicAndPartition = entry.getKey();\n                    Partition partition = entry.getValue();\n                    if (partition.getCommittedOffset() == 0) {\n                        uncommittedMessages += partition.getLogEndOffset() - partition.getLogStartOffset();\n                    } else {\n                        uncommittedMessages += partition.getLogEndOffset() - partition.getCommittedOffset();\n                    }\n                }\n                return (int) uncommittedMessages;\n            }\n        });\n    } catch (IllegalArgumentException e) {\n        logger.debug(\"Unable to register uncommitted gauge metric\", e);\n    }\n}", "CodeBleu_score": 36.597652487441465}, {"code": "private void registerUncommittedGauge(MetricRegistry metricRegistry, String name){\n\t    try {\n        metricRegistry.register(name, (Gauge<Integer>) () -> {\n            if (this.log == null) {\n                return 0;\n            }\n            long logStartOffset = this.log.logStartOffset();\n            long logEndOffset = this.log.logEndOffset();\n            long committedOffset = this.committedOffset.get();\n            if (committedOffset == LogOffsetMetadata.InvalidOffset) {\n                return (int) (logEndOffset - logStartOffset);\n            } else {\n                return (int) (logEndOffset - committedOffset);\n            }\n        });\n    } catch (IllegalArgumentException ignored) {\n    }\n}", "CodeBleu_score": 51.02115253319093}]}
{"instance_id": "8b30a387069f", "generation_result": [{"code": "private long flushMessages(List<Message> messages, long payloadSize){\n\t    if (messages.isEmpty()) {\n        debug(\"No messages to flush. Payload size: \" + payloadSize);\n        return -1;\n    }\n\n    final ByteBufferMessageSet messageSet = new ByteBufferMessageSet(JavaConversions.asScalaBuffer(messages).toList());\n    debug(\"Flushing message set of size \" + messageSet.sizeInBytes() + \" bytes\");\n\n    final LogAppendInfo appendInfo = log.append(messageSet);\n    debug(\"Flushed message set with offset \" + appendInfo.firstOffset() + \" and size \" + messageSet.sizeInBytes());\n\n    messagesWritten.mark(messages.size());\n    return appendInfo.lastOffset();\n}", "CodeBleu_score": 47.17750176559367}, {"code": "private long flushMessages(List<Message> messages, long payloadSize){\n\t    if (messages.isEmpty()) {\n        log.debug(\"Flushing empty message set\");\n        return 0;\n    }\n\n    final ByteBufferMessageSet messageSet = new ByteBufferMessageSet(JavaConversions.asScalaBuffer(messages).toList());\n    log.debug(\"Flushing {} messages of size {} to log\", messages.size(), payloadSize);\n\n    final long start = System.nanoTime();\n    final LogAppendInfo appendInfo = log.append(messageSet);\n    final long end = System.nanoTime();\n\n    log.debug(\"Flushed {} messages of size {} to log in {} ms\", messages.size(), payloadSize, NANOSECONDS.toMillis(end - start));\n    messageSetMetrics.mark(messages.size());\n    return appendInfo.lastOffset();\n}", "CodeBleu_score": 53.68305642711907}, {"code": "private long flushMessages(List<Message> messages, long payloadSize){\n\t    if (messages.isEmpty()) {\n        LOG.debug(\"Empty message set\");\n        return 0;\n    }\n\n    ByteBufferMessageSet messageSet = new ByteBufferMessageSet(JavaConversions.asScalaBuffer(messages).toList());\n    long start = System.currentTimeMillis();\n    long lastOffset = log.append(messageSet, false).getFirstOffset();\n    long end = System.currentTimeMillis();\n\n    if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Flushed {} messages of size {} to log {} in {} ms\",\n                messages.size(),\n                payloadSize,\n                log.name(),\n                end - start);\n    }\n\n    return lastOffset;\n}", "CodeBleu_score": 47.11188200216023}]}
{"instance_id": "ee338b61e75d", "generation_result": [{"code": "private void closeKafkaAdminClient(Long clusterPhyId) {\n\t    if (adminClientMap.get(clusterPhyId) == null) {\n        return;\n    }\n\n    List<AdminClient> adminClientList = adminClientMap.get(clusterPhyId);\n    log.info(\"Closing Kafka AdminClient instances for cluster {}\", clusterPhyId);\n    for (AdminClient adminClient : adminClientList) {\n        try {\n            adminClient.close(Duration.ofSeconds(3));\n        } catch (Exception e) {\n            log.error(\"Failed to close Kafka AdminClient instance for cluster {}\", clusterPhyId, e);\n        }\n    }\n    log.info(\"Successfully closed Kafka AdminClient instances for cluster {}\", clusterPhyId);\n}", "CodeBleu_score": 42.80509274373269}, {"code": "private void closeKafkaAdminClient(Long clusterPhyId) {\n\t    // 1. \u83b7\u53d6\u6240\u6709\u7684adminClient\n    List<AdminClient> adminClientList = new ArrayList<>();\n    for (Map.Entry<Long, AdminClient> entry : adminClientMap.entrySet()) {\n        if (entry.getKey().equals(clusterPhyId)) {\n            adminClientList.add(entry.getValue());\n        }\n    }\n    if (adminClientList.isEmpty()) {\n        return;\n    }\n\n    // 2. \u5173\u95ed\u6240\u6709\u7684adminClient\n    for (AdminClient adminClient : adminClientList) {\n        try {\n            adminClient.close();\n            LOGGER.info(\"close adminClient success, clusterPhyId:{}\", clusterPhyId);\n        } catch (Exception e) {\n            LOGGER.error(\"close adminClient error, clusterPhyId:{}\", clusterPhyId, e);\n        }\n    }\n\n    // 3. \u5220\u9664\u6240\u6709\u7684adminClient\n    adminClientMap.remove(clusterPhyId);\n}", "CodeBleu_score": 47.09369955303578}, {"code": "private void closeKafkaAdminClient(Long clusterPhyId) {\n\t    // \u83b7\u53d6\u6240\u6709\u7684client\n    List<AdminClient> adminClients = getAllKafkaAdminClient(clusterPhyId);\n    if (adminClients.isEmpty()) {\n        return;\n    }\n\n    LOG.info(\"start to close admin client for clusterPhyId={}\", clusterPhyId);\n    for (AdminClient adminClient : adminClients) {\n        try {\n            adminClient.close(Duration.ofSeconds(10));\n        } catch (Exception e) {\n            LOG.error(\"close admin client for clusterPhyId={} error\", clusterPhyId, e);\n        }\n    }\n    LOG.info(\"close admin client for clusterPhyId={} success\", clusterPhyId);\n}", "CodeBleu_score": 38.15375160893029}]}
{"instance_id": "6f0b935b971c", "generation_result": [{"code": "private boolean closeAdminClientList(Long clusterPhyId, List<AdminClient> adminClientList){\n\t    if (adminClientList == null) {\n        return true;\n    }\n\n    boolean success = true;\n    for (AdminClient adminClient : adminClientList) {\n        try {\n            adminClient.close(Duration.ofSeconds(30));\n        } catch (Exception e) {\n            success = false;\n            LOGGER.error(\"Failed to close AdminClient for cluster ID {}\", clusterPhyId, e);\n        }\n    }\n    return success;\n}", "CodeBleu_score": 73.68157522727918}, {"code": "private boolean closeAdminClientList(Long clusterPhyId, List<AdminClient> adminClientList){\n\t    if (adminClientList == null) {\n        return true;\n    }\n    boolean success = true;\n    for (AdminClient adminClient : adminClientList) {\n        try {\n            adminClient.close(Duration.ofSeconds(30));\n        } catch (Exception e) {\n            LOG.error(\"close admin client failed, clusterPhyId: \" + clusterPhyId, e);\n            success = false;\n        }\n    }\n    return success;\n}", "CodeBleu_score": 75.68599432249718}, {"code": "private boolean closeAdminClientList(Long clusterPhyId, List<AdminClient> adminClientList){\n\t    if (adminClientList == null) {\n        return true;\n    }\n    boolean success = true;\n    for (AdminClient adminClient : adminClientList) {\n        try {\n            adminClient.close(Duration.ofSeconds(30));\n        } catch (Exception e) {\n            LOG.error(\"Failed to close AdminClient for cluster {}\", clusterPhyId, e);\n            success = false;\n        }\n    }\n    return success;\n}", "CodeBleu_score": 83.13958881400308}]}
{"instance_id": "b5475aa94c1a", "generation_result": [{"code": "public void stop() {\n\t    if (this.app != null) {\n        this.app.stop();\n        this.app = null;\n    }\n}", "CodeBleu_score": 8.602558386670875}, {"code": "public void stop() {\n\t    if (app != null) {\n        app.stop();\n        int count = 0;\n        while (app.isRunning() && count < 5) {\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                throw new IllegalStateException(\"Thread interrupted while waiting for app to stop\", e);\n            }\n            count++;\n        }\n        app = null;\n    }\n}", "CodeBleu_score": 54.908139913664655}, {"code": "public void stop() {\n\t    if (this.app != null) {\n        this.app.stop();\n        for (int i = 0; i < 5; i++) {\n            if (!this.app.isRunning()) {\n                break;\n            }\n\n            try {\n                Thread.sleep(1000L);\n            } catch (InterruptedException var3) {\n                throw new IllegalStateException(var3);\n            }\n        }\n\n        if (this.app.isRunning()) {\n            throw new IllegalStateException(\"Application is still running\");\n        } else {\n            this.app = null;\n        }\n    }\n}", "CodeBleu_score": 38.73885178632672}]}
{"instance_id": "5da405de9e3d", "generation_result": [{"code": "static EurekaServerRunner startEurekaServer(Class config){\n\t    EurekaServerRunner eurekaServerRunner = new EurekaServerRunner(config);\n    eurekaServerRunner.enableTls();\n    eurekaServerRunner.setKeyStore(keyStore, keyStorePassword);\n    eurekaServerRunner.setTrustStore(trustStore, trustStorePassword);\n    eurekaServerRunner.start();\n    return eurekaServerRunner;\n}", "CodeBleu_score": 42.12869409119485}, {"code": "static EurekaServerRunner startEurekaServer(Class config){\n\t    EurekaServerRunner server = new EurekaServerRunner(config);\n    server.enableTls();\n    server.setKeyStore(getKeyStoreSupplier(server.getKeyStoreFile(), server.getKeyStorePassword()), server.getKeyStorePassword());\n    server.setTrustStore(getKeyStoreSupplier(server.getTrustStoreFile(), server.getTrustStorePassword()), server.getTrustStorePassword());\n    server.startServer();\n    return server;\n}", "CodeBleu_score": 53.161505709617195}, {"code": "static EurekaServerRunner startEurekaServer(Class config){\n\t\tEurekaServerRunner server = new EurekaServerRunner(config);\n\tserver.enableTls();\n\tserver.setKeyStore(getKeyStore(certificate, key, password), password);\n\tserver.setTrustStore(getKeyStore(certificate, key, password), password);\n\tserver.start();\n\treturn server;\n}", "CodeBleu_score": 59.04684611739547}]}
{"instance_id": "19cbf70751b2", "generation_result": [{"code": "static EurekaClientRunner startService(EurekaServerRunner server, Class config){\n\t    EurekaClientRunner client = new EurekaClientRunner(config, server, \"testservice\");\n    client.start();\n    return client;\n}", "CodeBleu_score": 59.549842166196086}, {"code": "static EurekaClientRunner startService(EurekaServerRunner server, Class config){\n\t    EurekaClientRunner client = new EurekaClientRunner(config, server, \"testservice\");\n    client.start();\n    return client;\n}", "CodeBleu_score": 59.549842166196086}, {"code": "static EurekaClientRunner startService(EurekaServerRunner server, Class config){\n\t\tEurekaClientRunner runner = new EurekaClientRunner(config, server, \"testservice\");\n\trunner.start();\n\treturn runner;\n}", "CodeBleu_score": 58.16015107247986}]}
{"instance_id": "d6ccff5c0536", "generation_result": [{"code": "static void createCertificates() throws Exception{\n\t    KeyTool keyTool = new KeyTool();\n    keyTool.createAndSaveCACertificate();\n    keyTool.createAndSaveServerCertificate();\n    keyTool.createAndSaveClientCertificate();\n    keyTool.createAndSaveSecondCACertificate();\n    keyTool.createAndSaveSecondClientCertificate();\n}", "CodeBleu_score": 12.136082643607304}, {"code": "static void createCertificates() throws Exception{\n\t\tKeyTool keyTool = new KeyTool();\n\tkeyTool.createKeyStore();\n\n\tkeyTool.createKey(\"ca\", \"ca\", \"ca\");\n\tkeyTool.createKey(\"server\", \"server\", \"server\");\n\tkeyTool.createKey(\"client\", \"client\", \"client\");\n\tkeyTool.createKey(\"ca2\", \"ca2\", \"ca2\");\n\tkeyTool.createKey(\"client2\", \"client2\", \"client2\");\n\n\tkeyTool.signKey(\"ca\", \"ca\", \"ca\", \"ca\");\n\tkeyTool.signKey(\"server\", \"server\", \"ca\", \"ca\");\n\tkeyTool.signKey(\"client\", \"client\", \"ca\", \"client\");\n\tkeyTool.signKey(\"ca2\", \"ca2\", \"ca2\", \"ca2\");\n\tkeyTool.signKey(\"client2\", \"client2\", \"ca2\", \"client2\");\n\n\tkeyTool.saveCert(\"ca\", \"ca\", \"ca\");\n\tkeyTool.saveCert(\"server\", \"server\", \"server\");\n\tkeyTool.saveCert(\"client\", \"client\", \"client\");\n\tkeyTool.saveCert(\"ca2\", \"ca2\", \"ca2\");\n\tkeyTool.saveCert(\"client2\", \"client2\", \"client2\");\n\n\tkeyTool.saveKeyAndCert(\"server\", \"server\", \"server\");\n\tkeyTool.saveKeyAndCert(\"client\", \"client\", \"client\");\n\tkeyTool.saveKeyAndCert(\"ca2\", \"ca2\", \"ca2\");\n\tkeyTool.saveKeyAndCert(\"client2\", \"client2\", \"client2\");\n}", "CodeBleu_score": 16.408481259136774}, {"code": "static void createCertificates() throws Exception{\n\t    KeyTool keyTool = new KeyTool(new File(\"target/test-classes/test.jks\"));\n    keyTool.createSelfSignedCertificate(\"ca\", \"ca\", \"ca\");\n    keyTool.createCertificate(\"server\", \"ca\", \"ca\", \"server\");\n    keyTool.createCertificate(\"client\", \"ca\", \"ca\", \"client\");\n    keyTool.createSelfSignedCertificate(\"ca2\", \"ca2\", \"ca2\");\n    keyTool.createCertificate(\"client2\", \"ca2\", \"ca2\", \"client2\");\n}", "CodeBleu_score": 17.90482706411791}]}
{"instance_id": "d2eeaa6a6bbe", "generation_result": [{"code": "private void assertInSeconds(BooleanSupplier assertion, int seconds){\n\t    long timeLimit = System.currentTimeMillis() + seconds * 1000;\n    while (System.currentTimeMillis() < timeLimit) {\n        if (assertion.getAsBoolean()) {\n            return;\n        }\n    }\n    throw new RuntimeException(\"Assertion failed\");\n}", "CodeBleu_score": 44.96138134434368}, {"code": "private void assertInSeconds(BooleanSupplier assertion, int seconds){\n\t    long timeLimit = System.currentTimeMillis() + (seconds * 1000);\n    while (System.currentTimeMillis() < timeLimit) {\n        if (assertion.getAsBoolean()) {\n            return;\n        }\n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n    throw new RuntimeException(\"Assertion failed\");\n}", "CodeBleu_score": 43.43476887406882}, {"code": "private void assertInSeconds(BooleanSupplier assertion, int seconds){\n\t    long timeLimit = System.currentTimeMillis() + (seconds * 1000);\n    while (System.currentTimeMillis() < timeLimit) {\n        if (assertion.getAsBoolean()) {\n            return;\n        }\n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        }\n    }\n    throw new RuntimeException(\"Assertion failed\");\n}", "CodeBleu_score": 42.5195148274718}]}
{"instance_id": "6bb261b0e4e1", "generation_result": [{"code": "public X509Certificate createCert(KeyPair keyPair, String ca) throws Exception{\n\t    // Generate a certificate builder with the public key and CA information\n    JcaX509v3CertificateBuilder builder = new JcaX509v3CertificateBuilder(\n        new X500Name(ca),\n        BigInteger.valueOf(new SecureRandom().nextInt()),\n        new Date(System.currentTimeMillis() - 1000L * 60 * 60 * 24 * 30),\n        new Date(System.currentTimeMillis() + (1000L * 60 * 60 * 24 * 30)),\n        new X500Name(ca),\n        keyPair.getPublic()\n    );\n\n    // Add key usage and basic constraints extensions to the certificate\n    builder.addExtension(Extension.keyUsage, true, new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyEncipherment));\n    builder.addExtension(Extension.basicConstraints, true, new BasicConstraints(0));\n\n    // Sign the certificate with the private key\n    ContentSigner contentSigner = new JcaContentSignerBuilder(\"SHA256WithRSAEncryption\").build(keyPair.getPrivate());\n    X509CertificateHolder certificateHolder = builder.build(contentSigner);\n    return new JcaX509CertificateConverter().getCertificate(certificateHolder);\n}", "CodeBleu_score": 40.179237326470826}, {"code": "public X509Certificate createCert(KeyPair keyPair, String ca) throws Exception{\n\t    // Generate the certificate\n    X509CertificateHolder certHolder = createCertHolder(keyPair, ca);\n    // Sign the certificate\n    ContentSigner signer = new JcaContentSignerBuilder(\"SHA256withRSA\").build(keyPair.getPrivate());\n    X509Certificate cert = new JcaX509CertificateConverter().getCertificate(certHolder.toASN1Structure().getEncoded());\n    cert.verify(keyPair.getPublic());\n    return cert;\n}", "CodeBleu_score": 36.61257438341237}, {"code": "public X509Certificate createCert(KeyPair keyPair, String ca) throws Exception{\n\t    PublicKey publicKey = keyPair.getPublic();\n    PrivateKey privateKey = keyPair.getPrivate();\n\n    // Set the certificate validity period.\n    Date startDate = new Date();\n    Date endDate = new Date(startDate.getTime() + 1000 * 60 * 60 * 24 * 365);\n\n    // Generate the certificate using the certificate builder.\n    JcaX509v3CertificateBuilder certificateBuilder = new JcaX509v3CertificateBuilder(\n            new X500Name(ca),\n            BigInteger.valueOf(System.currentTimeMillis()),\n            startDate,\n            endDate,\n            new X500Name(ca),\n            publicKey);\n\n    // Add the key usage extension.\n    certificateBuilder.addExtension(Extension.keyUsage, true, new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyEncipherment));\n\n    // Add the basic constraints extension.\n    certificateBuilder.addExtension(Extension.basicConstraints, true, new BasicConstraints(false));\n\n    // Create the certificate signer.\n    ContentSigner contentSigner = new JcaContentSignerBuilder(\"SHA256withRSA\").setProvider(\"BC\").build(privateKey);\n\n    // Generate the certificate holder.\n    X509CertificateHolder certificateHolder = certificateBuilder.build(contentSigner);\n\n    // Convert the certificate holder to an X509 certificate.\n    X509Certificate certificate = new JcaX509CertificateConverter().setProvider(\"BC\").getCertificate(certificateHolder);\n\n    return certificate;\n}", "CodeBleu_score": 30.63639113871789}]}
{"instance_id": "e4f9c32a7c9e", "generation_result": [{"code": "EurekaHttpClient getEurekaHttpClient(){\n\t    EurekaHttpClient eurekaHttpClient = null;\n    try {\n        Field registrationClient = ReflectionUtils.findField(this.eurekaTransport.getClass(), \"registrationClient\");\n        ReflectionUtils.makeAccessible(registrationClient);\n        eurekaHttpClient = (EurekaHttpClient) ReflectionUtils.getField(registrationClient, this.eurekaTransport);\n    } catch (IllegalAccessException e) {\n        log.error(\"Cannot access registrationClient field\", e);\n    }\n    return eurekaHttpClient;\n}", "CodeBleu_score": 50.50994403911901}, {"code": "EurekaHttpClient getEurekaHttpClient(){\n\t    try {\n        Field field = ReflectionUtils.findField(eurekaTransport.getClass(), \"registrationClient\");\n        ReflectionUtils.makeAccessible(field);\n        return (EurekaHttpClient) field.get(eurekaTransport);\n    } catch (IllegalAccessException e) {\n        log.error(\"Unable to access registrationClient field.\", e);\n    }\n    return null;\n}", "CodeBleu_score": 39.139444583227736}, {"code": "EurekaHttpClient getEurekaHttpClient(){\n\t    if (eurekaHttpClient == null) {\n        try {\n            Field registrationClientField = ReflectionUtils.findField(eurekaTransport.getClass(), \"registrationClient\");\n            ReflectionUtils.makeAccessible(registrationClientField);\n            eurekaHttpClient = (EurekaHttpClient) ReflectionUtils.getField(registrationClientField, eurekaTransport);\n        } catch (IllegalAccessException e) {\n            log.error(\"Could not access registrationClient field from EurekaTransport\", e);\n        }\n    }\n    return eurekaHttpClient;\n}", "CodeBleu_score": 57.94661599692734}]}
{"instance_id": "5c404f04e34c", "generation_result": [{"code": "public List<String> getServices(){\n\t    EurekaClient eurekaClient = getEurekaClient();\n    Applications applications = eurekaClient.getApplications();\n    if (applications == null || applications.getRegisteredApplications().isEmpty()) {\n        return Collections.emptyList();\n    }\n    List<String> services = new ArrayList<>();\n    for (Application application : applications.getRegisteredApplications()) {\n        if (!application.getInstances().isEmpty()) {\n            services.add(application.getName().toLowerCase());\n        }\n    }\n    return services;\n}", "CodeBleu_score": 56.22879574824749}, {"code": "public List<String> getServices(){\n\t    List<String> services = new ArrayList<>();\n    Applications applications = eurekaClient.getApplications();\n    if (applications.getRegisteredApplications().size() == 0) {\n        return services;\n    }\n    for (Application application : applications.getRegisteredApplications()) {\n        if (application.getInstances().size() > 0) {\n            services.add(application.getName().toLowerCase());\n        }\n    }\n    return services;\n}", "CodeBleu_score": 47.26592124844479}, {"code": "public List<String> getServices(){\n\t    List<String> services = new ArrayList<>();\n    EurekaClient client = getEurekaClient();\n    Applications apps = client.getApplications();\n    if (apps == null) {\n        return Collections.emptyList();\n    }\n    for (Application app : apps.getRegisteredApplications()) {\n        if (!app.getInstances().isEmpty()) {\n            services.add(app.getName().toLowerCase());\n        }\n    }\n    return services;\n}", "CodeBleu_score": 58.11108321114863}]}
{"instance_id": "a21251337ade", "generation_result": [{"code": "void populateHealthContributors(Map<String, HealthContributor> healthContributors){\n\t    for (Map.Entry<String, HealthContributor> entry : healthContributors.entrySet()) {\n        String name = entry.getKey();\n        HealthContributor value = entry.getValue();\n        if (value instanceof DiscoveryCompositeHealthContributor) {\n            for (NamedContributor<HealthContributor> indicator : ((DiscoveryCompositeHealthContributor) value).getContributors()) {\n                if (!(indicator.getContributor() instanceof EurekaHealthIndicator)) {\n                    healthContributors.put(name, indicator.getContributor());\n                }\n            }\n        } else {\n            healthContributors.put(name, value);\n        }\n    }\n}", "CodeBleu_score": 43.081632561249265}, {"code": "void populateHealthContributors(Map<String, HealthContributor> healthContributors){\n\t    for (Map.Entry<String, HealthContributor> entry : healthContributors.entrySet()) {\n        String name = entry.getKey();\n        HealthContributor value = entry.getValue();\n        if (value instanceof DiscoveryCompositeHealthContributor) {\n            for (NamedContributor<HealthContributor> indicator : ((DiscoveryCompositeHealthContributor) value).getContributors()) {\n                if (!(indicator.getContributor() instanceof EurekaHealthIndicator)) {\n                    healthContributors.put(name, indicator.getContributor());\n                }\n            }\n        } else {\n            healthContributors.put(name, value);\n        }\n    }\n}", "CodeBleu_score": 43.081632561249265}, {"code": "void populateHealthContributors(Map<String, HealthContributor> healthContributors){\n\t    for (Map.Entry<String, HealthContributor> entry : healthContributors.entrySet()) {\n        String name = entry.getKey();\n        HealthContributor value = entry.getValue();\n        if (value instanceof DiscoveryCompositeHealthContributor) {\n            for (NamedContributor<HealthContributor> indicator : ((DiscoveryCompositeHealthContributor) value).getContributors()) {\n                if (!(indicator.getContributor() instanceof EurekaHealthIndicator)) {\n                    healthContributors.put(name, indicator.getContributor());\n                }\n            }\n        } else {\n            healthContributors.put(name, value);\n        }\n    }\n}", "CodeBleu_score": 43.081632561249265}]}
{"instance_id": "998fee829929", "generation_result": [{"code": "public String hello(){\n\t    List<ServiceInstance> instances = discoveryClient.getInstances(\"provider-application\");\n    if (instances.size() == 0) {\n        throw new RuntimeException(\"No instance available for provider-application\");\n    }\n    URI uri = instances.get(0).getUri();\n    return restTemplate.postForObject(uri + \"/echo\", null, String.class);\n}", "CodeBleu_score": 45.42891279446772}, {"code": "public String hello(){\n\t    List<ServiceInstance> instances = discoveryClient.getInstances(\"provider-application\");\n    if (instances.isEmpty()) {\n        throw new RuntimeException(\"No instances available for provider-application\");\n    }\n    ServiceInstance instance = instances.get(0);\n    URI uri = instance.getUri();\n\n    return restTemplate.postForObject(uri + \"/echo\", null, String.class);\n}", "CodeBleu_score": 51.1998506729211}, {"code": "public String hello(){\n\t    List<ServiceInstance> instances = discoveryClient.getInstances(\"provider-application\");\n    if (instances.isEmpty()) {\n        throw new RuntimeException(\"No instances available for provider-application\");\n    }\n    ServiceInstance instance = instances.get(0);\n    URI uri = instance.getUri();\n    return restTemplate.postForObject(uri + \"/echo\", null, String.class);\n}", "CodeBleu_score": 51.1998506729211}]}
{"instance_id": "31166ae7d3dc", "generation_result": [{"code": "public String world(){\n\t    ServiceInstance instance = loadBalancerClient.choose(\"provider-application\");\n    if (instance == null) {\n        throw new RuntimeException(\"No instance available for provider-application\");\n    }\n    URI uri = URI.create(String.format(\"http://%s:%s/echo\", instance.getHost(), instance.getPort()));\n    return restTemplate.postForObject(uri, \"World\", String.class);\n}", "CodeBleu_score": 56.0337347500536}, {"code": "public String world(){\n\t    ServiceInstance instance = loadBalancerClient.choose(\"provider-application\");\n    if (instance == null) {\n        throw new RuntimeException(\"No instance available for provider-application\");\n    }\n    URI uri = URI.create(String.format(\"http://%s:%s/echo\", instance.getHost(), instance.getPort()));\n    return restTemplate.postForObject(uri, \"world\", String.class);\n}", "CodeBleu_score": 56.0337347500536}, {"code": "public String world(){\n\t    ServiceInstance serviceInstance = loadBalancerClient.choose(\"provider-application\");\n    if (serviceInstance == null) {\n        throw new RuntimeException(\"No instance available for provider-application\");\n    }\n    URI uri = serviceInstance.getUri();\n    return restTemplate.postForObject(uri + \"/echo\", null, String.class);\n}", "CodeBleu_score": 56.11058558745212}]}
{"instance_id": "d7714f9cf0e9", "generation_result": [{"code": "public boolean register(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    if (!serverMap.containsKey(serviceName)) {\n        serverMap.put(serviceName, Collections.synchronizedSet(new HashSet<>()));\n    }\n    Set<Server> serverSet = serverMap.get(serviceName);\n    Server server = new Server(ip, port);\n    serverSet.add(server);\n    logger.info(\"Registered \" + server.toString() + \" for \" + serviceName);\n    return true;\n}", "CodeBleu_score": 61.26189910020054}, {"code": "public boolean register(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    Logger logger = LoggerFactory.getLogger(this.getClass());\n    if (!serverMap.containsKey(serviceName)) {\n        Set<Server> servers = Collections.synchronizedSet(new HashSet<Server>());\n        serverMap.put(serviceName, servers);\n    }\n    serverMap.get(serviceName).add(new Server(ip, port));\n    logger.info(String.format(\"Registered service %s with IP %s and port %s\", serviceName, ip, port));\n    return true;\n}", "CodeBleu_score": 53.422780457066146}, {"code": "public boolean register(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    logger.info(\"Registering \" + serviceName + \" \" + ip + \":\" + port);\n    if (!serverMap.containsKey(serviceName)) {\n        serverMap.put(serviceName, Collections.synchronizedSet(new HashSet<>()));\n    }\n    serverMap.get(serviceName).add(new Server(ip, port));\n    return true;\n}", "CodeBleu_score": 52.93461886377673}]}
{"instance_id": "45f91ed1c560", "generation_result": [{"code": "public boolean deregister(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    log.info(\"Deregistering service {} with ip {} and port {}\", serviceName, ip, port);\n    Server server = new Server(ip, port);\n    Set<Server> serverSet = serverMap.get(serviceName);\n    if (serverSet == null) {\n        log.error(\"Service {} does not exist\", serviceName);\n        return false;\n    }\n    if (!serverSet.contains(server)) {\n        log.error(\"Service {} with ip {} and port {} does not exist\", serviceName, ip, port);\n        return false;\n    }\n    serverSet.remove(server);\n    return true;\n}", "CodeBleu_score": 62.25846705318738}, {"code": "public boolean deregister(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    Server server = new Server(ip, port);\n    Set<Server> serverSet = serverMap.get(serviceName);\n    if (serverSet == null) {\n        return false;\n    }\n    serverSet.remove(server);\n    LOGGER.info(\"Deregistering server {} from service {}\", server, serviceName);\n    return true;\n}", "CodeBleu_score": 60.78764443916217}, {"code": "public boolean deregister(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    logger.info(\"Deregistering server with serviceName: \" + serviceName + \", ip: \" + ip + \", port: \" + port);\n    Set<Server> serverSet = serverMap.get(serviceName);\n    if (serverSet != null) {\n        Server server = new Server(ip, port);\n        boolean removed = serverSet.remove(server);\n        if (removed) {\n            logger.info(\"Successfully deregistered server with serviceName: \" + serviceName + \", ip: \" + ip + \", port: \" + port);\n            return true;\n        } else {\n            logger.error(\"Failed to deregister server with serviceName: \" + serviceName + \", ip: \" + ip + \", port: \" + port);\n            return false;\n        }\n    } else {\n        logger.error(\"Failed to deregister server with serviceName: \" + serviceName + \", ip: \" + ip + \", port: \" + port + \". No servers found with the serviceName: \" + serviceName);\n        return false;\n    }\n}", "CodeBleu_score": 57.111081614265466}]}
{"instance_id": "f671d9564e40", "generation_result": [{"code": "public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry){\n\t    Map<String, Object> attributes = metadata.getAnnotationAttributes(RibbonClients.class.getName());\n    AnnotationAttributes annotation = AnnotationAttributes.fromMap(attributes);\n    registerDefaultConfiguration(registry, annotation);\n    registerClientConfigurations(registry, annotation);\n}", "CodeBleu_score": 39.26764739963385}, {"code": "public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry){\n\t    Map<String, Object> attributes = metadata.getAnnotationAttributes(EnableRibbonClients.class.getName());\n    AnnotationAttributes annotation = AnnotationAttributes.fromMap(attributes);\n    registerClientConfiguration(registry, annotation.get(\"defaultConfiguration\"));\n    registerRibbonClientBeans(registry, annotation.get(\"clients\"));\n}", "CodeBleu_score": 45.61005510301908}, {"code": "public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry){\n\t    Map<String, Object> attributes = metadata.getAnnotationAttributes(this.annotationClass().getName());\n    if (attributes == null) {\n        return;\n    }\n    if (attributes.containsKey(\"defaultConfiguration\")) {\n        String name = \"default\";\n        BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(RibbonClientConfiguration.class);\n        builder.addPropertyValue(\"name\", name);\n        builder.addPropertyValue(\"configuration\", attributes.get(\"defaultConfiguration\"));\n        registry.registerBeanDefinition(this.getConfigurationName(name), builder.getBeanDefinition());\n    }\n\n}", "CodeBleu_score": 47.36622950421173}]}
{"instance_id": "dbc92d8f146f", "generation_result": [{"code": "public <T> ServiceInstance choose(String serviceId, Request<T> request) {\n\t    LoadBalancerClient loadBalancerClient = TutuContext.getBean(LoadBalancerClient.class);\n    if (StrUtil.isBlank(serviceId)) {\n        throw new RuntimeException(\"serviceId is null\");\n    }\n    if (request == null) {\n        throw new RuntimeException(\"request is null\");\n    }\n    URI uri = null;\n    try {\n        uri = new URI(serviceId);\n    } catch (URISyntaxException e) {\n        throw new RuntimeException(\"serviceId is not a URI\");\n    }\n    String serviceName = uri.getHost();\n    ILoadBalancer loadBalancer = loadBalancerClient.getLoadBalancer();\n    if (loadBalancer == null) {\n        throw new RuntimeException(\"loadBalancer is null\");\n    }\n    Server server = loadBalancer.chooseServer(serviceName);\n    if (server == null) {\n        return null;\n    }\n    String host = server.getHost();\n    int port = server.getPort();\n    return new TutuServiceInstance(serviceName, host, port);\n}", "CodeBleu_score": 40.27380916981574}, {"code": "public <T> ServiceInstance choose(String serviceId, Request<T> request) {\n\t    LoadBalancerClient loadBalancerClient = TutuContext.getInstance().getLoadBalancerClient();\n    ILoadBalancer loadBalancer = loadBalancerClient.getLoadBalancer(serviceId);\n    if (loadBalancer == null) {\n        return null;\n    }\n    Server server = loadBalancer.chooseServer(serviceId);\n    if (server == null) {\n        return null;\n    }\n    return new TutuServiceInstance(serviceId, server.getHost(), server.getPort());\n}", "CodeBleu_score": 60.073552964665666}, {"code": "public <T> ServiceInstance choose(String serviceId, Request<T> request) {\n\t    LoadBalancerClient loadBalancer = LoadBalancerClient.getClient(serviceId, request.getContext());\n    URI originalUri = request.getUri();\n    ILoadBalancer lb = loadBalancer.getLoadBalancer();\n    Server server = lb.chooseServer(serviceId);\n    if (server == null) {\n        return null;\n    }\n    String host = server.getHost();\n    int port = server.getPort();\n    String path = originalUri.getPath();\n    if (StrUtil.isBlank(path)) {\n        path = \"/\";\n    }\n    try {\n        return new TutuServiceInstance(serviceId, new URI(originalUri.getScheme(), null, host, port, path, originalUri.getQuery(), originalUri.getFragment()));\n    } catch (URISyntaxException e) {\n        throw new IllegalStateException(\"Invalid URI\", e);\n    }\n}", "CodeBleu_score": 47.11111091012795}]}
{"instance_id": "362eadbd3c5e", "generation_result": [{"code": "public URI reconstructURI(ServiceInstance server, URI original) {\n\t    try {\n        String serviceName = original.getHost();\n        if (server instanceof TutuServiceInstance) {\n            serviceName = ((TutuServiceInstance) server).getServiceId();\n        }\n        String scheme = original.getScheme();\n        if (StrUtil.isBlank(scheme)) {\n            scheme = \"http\";\n        }\n        return new URI(scheme, null, server.getHost(), server.getPort(), original.getPath(), original.getQuery(), original.getFragment());\n    } catch (URISyntaxException e) {\n        throw new RuntimeException(\"Invalid URI\", e);\n    }\n}", "CodeBleu_score": 41.80097773193623}, {"code": "public URI reconstructURI(ServiceInstance server, URI original) {\n\t    try {\n        String host = server.getHost();\n        int port = server.getPort();\n        String scheme = original.getScheme();\n        String query = original.getQuery();\n        String path = original.getPath();\n        if (StrUtil.isBlank(path)) {\n            path = \"/\";\n        }\n        if (StrUtil.isNotBlank(query)) {\n            return new URI(scheme, null, host, port, path, query, null);\n        }\n        return new URI(scheme, null, host, port, path, null, null);\n    } catch (URISyntaxException e) {\n        throw new RuntimeException(e);\n    }\n}", "CodeBleu_score": 44.93184010026986}, {"code": "public URI reconstructURI(ServiceInstance server, URI original) {\n\t    try {\n        return LoadBalancerClient.reconstructURI(server, original);\n    } catch (URISyntaxException e) {\n        throw new RuntimeException(e);\n    }\n}", "CodeBleu_score": 16.063268892126338}]}
{"instance_id": "6801d2b2e4c8", "generation_result": [{"code": "private List<TutuServer> getServer(){\n\t    String url = this.properties.getServer() + \"/list?serviceName=\" + this.serviceName;\n    String response = HttpUtil.get(url);\n    JSONObject jsonObject = JSON.parseObject(response);\n    List<JSONObject> serverList = jsonObject.getJSONArray(\"serverList\").toJavaList(JSONObject.class);\n    return serverList.stream().map(server -> {\n        TutuServer tutuServer = new TutuServer();\n        tutuServer.setHost(server.getString(\"host\"));\n        tutuServer.setPort(server.getInteger(\"port\"));\n        return tutuServer;\n    }).collect(Collectors.toList());\n}", "CodeBleu_score": 40.79429122200687}, {"code": "private List<TutuServer> getServer(){\n\t    String url = \"http://\" + tutuDiscoveryProperties.getAddress() + \"/list?serviceName=\" + serviceName;\n    String response = HttpUtil.get(url);\n    JSONObject jsonObject = JSON.parseObject(response);\n    List<TutuServer> tutuServers = jsonObject.getJSONArray(\"data\").stream().map(data -> {\n        JSONObject server = (JSONObject) data;\n        TutuServer tutuServer = new TutuServer();\n        tutuServer.setHost(server.getString(\"host\"));\n        tutuServer.setPort(server.getInteger(\"port\"));\n        return tutuServer;\n    }).collect(Collectors.toList());\n    return tutuServers;\n}", "CodeBleu_score": 40.06301750341678}, {"code": "private List<TutuServer> getServer(){\n\t    List<TutuServer> tutuServerList = null;\n    try {\n        String url = \"http://\" + tutuDiscoveryProperties.getServer() + \"/list\";\n        String body = HttpUtil.get(url);\n        JSONObject jsonObject = JSON.parseObject(body);\n        if (jsonObject.getInteger(\"code\") == 0) {\n            List<JSONObject> data = jsonObject.getJSONArray(\"data\").toJavaList(JSONObject.class);\n            tutuServerList = data.stream().map(item -> {\n                TutuServer tutuServer = new TutuServer();\n                tutuServer.setHost(item.getString(\"host\"));\n                tutuServer.setPort(item.getInteger(\"port\"));\n                return tutuServer;\n            }).collect(Collectors.toList());\n        }\n    } catch (Exception e) {\n        log.error(\"get server list error\", e);\n    }\n    return tutuServerList;\n}", "CodeBleu_score": 36.18960718573716}]}
{"instance_id": "ab2fb77484fd", "generation_result": [{"code": "public Route getMatchingRoute(String path){\n\t    for (Map.Entry<String, String> entry : routes.entrySet()) {\n        String pattern = entry.getKey();\n        String serviceId = entry.getValue();\n        PathMatcher pathMatcher = new AntPathMatcher();\n        if (pathMatcher.match(pattern, path)) {\n            String targetPath = pathMatcher.extractPathWithinPattern(pattern, path);\n            return new Route(targetPath, serviceId);\n        }\n    }\n    return null;\n}", "CodeBleu_score": 45.867964978648935}, {"code": "public Route getMatchingRoute(String path){\n\t    for (Map.Entry<String, String> entry : routes.entrySet()) {\n        String pattern = entry.getKey();\n        String serviceId = entry.getValue();\n        PathMatcher pathMatcher = new AntPathMatcher();\n        if (pathMatcher.match(pattern, path)) {\n            String targetPath = pathMatcher.extractPathWithinPattern(pattern, path);\n            return new Route(serviceId, targetPath);\n        }\n    }\n    return null;\n}", "CodeBleu_score": 45.25462776060441}, {"code": "public Route getMatchingRoute(String path){\n\t    for (Map.Entry<String, String> entry : routes.entrySet()) {\n        String pattern = entry.getKey();\n        String serviceId = entry.getValue();\n        PathMatcher pathMatcher = new AntPathMatcher();\n        if (pathMatcher.match(pattern, path)) {\n            String newPath = path.replaceFirst(pattern, \"\");\n            return new Route(serviceId, newPath);\n        }\n    }\n    return null;\n}", "CodeBleu_score": 43.74496187931468}]}
{"instance_id": "822071925513", "generation_result": [{"code": "public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry){\n\t    Set<String> annotationTypes = importingClassMetadata.getAnnotationTypes();\n    Set<String> basePackages = getBasePackages(importingClassMetadata);\n    ClassLoader classLoader = this.getClass().getClassLoader();\n    for (String basePackage : basePackages) {\n        Set<Class<?>> classes = ClassUtil.scanPackageByAnnotation(basePackage, FeignClient.class);\n        for (Class clazz : classes) {\n            GenericBeanDefinition beanDefinition = new GenericBeanDefinition();\n            beanDefinition.setBeanClass(FeignClientFactoryBean.class);\n            beanDefinition.getPropertyValues().add(\"type\", clazz);\n            beanDefinition.getPropertyValues().add(\"contextId\", clazz.getName());\n            beanDefinition.setAutowireMode(GenericBeanDefinition.AUTOWIRE_BY_TYPE);\n            registry.registerBeanDefinition(clazz.getName(), beanDefinition);\n        }\n    }\n}", "CodeBleu_score": 55.325926146741914}, {"code": "public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry){\n\t    String packageName = ClassUtils.getPackageName(importingClassMetadata.getClassName());\n    Set<Class<?>> classes = ClassUtil.scanPackageByAnnotation(packageName, FeignClient.class);\n    for (Class<?> clazz : classes) {\n        GenericBeanDefinition beanDefinition = new GenericBeanDefinition();\n        beanDefinition.setBeanClass(FeignClientFactoryBean.class);\n        beanDefinition.getPropertyValues().add(\"type\", clazz);\n        beanDefinition.getPropertyValues().add(\"contextId\", clazz.getSimpleName());\n        registry.registerBeanDefinition(clazz.getSimpleName(), beanDefinition);\n    }\n}", "CodeBleu_score": 58.84158938927432}, {"code": "public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry){\n\t    Set<Class<?>> classes = ClassUtil.scanPackageByAnnotation(importingClassMetadata.getClassName(), FeignClient.class);\n    GenericBeanDefinition definition;\n    for (Class<?> clazz : classes) {\n        definition = new GenericBeanDefinition();\n        definition.setBeanClass(FeignClientFactoryBean.class);\n        definition.getPropertyValues().add(\"contextId\", \"\");\n        definition.getPropertyValues().add(\"type\", ClassUtils.resolveClassName(clazz.getName(), null));\n        registry.registerBeanDefinition(clazz.getName(), definition);\n    }\n}", "CodeBleu_score": 37.96115529461237}]}
{"instance_id": "3d678e3bf3c8", "generation_result": [{"code": "public TutuDiscoveryClient tutuDiscoveryClient(TutuDiscoveryProperties tutuDiscoveryProperties){\n\t    return new TutuDiscoveryClient(tutuDiscoveryProperties);\n}", "CodeBleu_score": 74.10612186004828}, {"code": "public TutuDiscoveryClient tutuDiscoveryClient(TutuDiscoveryProperties tutuDiscoveryProperties){\n\t    return new TutuDiscoveryClient(tutuDiscoveryProperties);\n}", "CodeBleu_score": 74.10612186004828}, {"code": "public TutuDiscoveryClient tutuDiscoveryClient(TutuDiscoveryProperties tutuDiscoveryProperties){\n\t    return new TutuDiscoveryClient(tutuDiscoveryProperties);\n}", "CodeBleu_score": 74.10612186004828}]}
