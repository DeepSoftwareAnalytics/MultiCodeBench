{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    # retrieve attachment IDs from HTTP request arguments\n    attachment_ids = request.params.get('attachment_ids', '').split(',')\n    attachment_ids = filter(None, attachment_ids)\n    # verify read access rights and rules for the attachments\n    attachments = self.env['ir.attachment'].sudo().search([('id', 'in', attachment_ids)])\n    if not attachments:\n        return request.not_found()\n    # build a zip file from the attachments' content\n    from io import BytesIO\n    import zipfile\n    zip_buffer = BytesIO()\n    with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n        for attachment in attachments:\n            zip_file.writestr(attachment.name, attachment.datas)\n    # prepare HTTP headers for the zip file\n    response = request.make_response(zip_buffer.getvalue(), headers=[\n        ('Content-Type', 'application/zip'),\n        ('Content-Disposition', content_disposition(attachments[0].name + '.zip'))\n    ])\n    return response\n\n", "CodeBleu_score": 33.80521705984301}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = request.httprequest.args.getlist('attachment_ids')\n    attachment_ids = [int(attachment_id) for attachment_id in attachment_ids]\n    attachments = self.env['ir.attachment'].browse(attachment_ids)\n    if not attachments:\n        return request.not_found()\n\n    if not self.env['ir.attachment'].check_access_rights('read', raise_exception=False):\n        return request.not_found()\n\n    if not all(attachment.check_access_rule('read') for attachment in attachments):\n        return request.not_found()\n\n    zip_file = self.env['ir.attachment']._zip_attachments(attachments)\n    if not zip_file:\n        return request.not_found()\n\n    response = request.make_response(zip_file.getvalue(), headers=content_disposition(_('Attachments.zip')))\n    response.headers['Content-Type'] = 'application/zip'\n    return response\n\n", "CodeBleu_score": 38.52455372440727}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = request.params.get('attachment_ids', '').split(',')\n    attachment_ids = [int(attachment_id) for attachment_id in attachment_ids if attachment_id]\n    if not attachment_ids:\n        return request.not_found()\n    attachments = request.env['ir.attachment'].browse(attachment_ids)\n    if not request.env.user.has_group('base.group_user'):\n        attachments = attachments.filtered(lambda attachment: attachment.public)\n    if not attachments:\n        return request.not_found()\n    for attachment in attachments:\n        attachment.check_access_rights('read')\n        attachment.check_access_rule('read')\n\n    # build zip file\n    from io import BytesIO\n    from zipfile import ZipFile, ZIP_DEFLATED\n    zip_buffer = BytesIO()\n    zip_file = ZipFile(zip_buffer, 'w', ZIP_DEFLATED)\n    for attachment in attachments:\n        zip_file.writestr(attachment.name, attachment.datas)\n    zip_file.close()\n\n    # prepare response\n    zip_buffer.seek(0)\n    response = request.make_response(zip_buffer.read(), headers=[\n        ('Content-Type', 'application/zip'),\n        ('Content-Disposition', content_disposition('attachments.zip'))\n    ])\n    return response\n\n", "CodeBleu_score": 38.82569615963576}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(CustomerPortal, self)._prepare_home_portal_values(counters)\n    if request.env['account.move'].check_access_rights('read', raise_exception=False):\n        values['invoice_count'] = counters['invoice_count']\n        values['bill_count'] = counters['bill_count']\n    return values\n\n", "CodeBleu_score": 15.087118872261929}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(CustomerPortal, self)._prepare_home_portal_values(counters)\n    if request.env['account.move'].check_access_rights('read', raise_exception=False):\n        values.update({\n            'invoice_count': counters['invoice'],\n            'bill_count': counters['bill'],\n        })\n    return values\n\n", "CodeBleu_score": 16.411730502773924}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(CustomerPortal, self)._prepare_home_portal_values(counters)\n    if request.env['account.move'].check_access_rights('read'):\n        values.update({\n            'invoice_count': counters['invoice_count'],\n            'bill_count': counters['bill_count'],\n        })\n    return values\n\n", "CodeBleu_score": 15.721929280661767}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    # pylint: disable=too-many-locals, too-many-statements, too-many-branches\n    if not request.env.user.has_group('account.group_account_invoice'):\n        raise AccessError(_(\"The requested operation cannot be completed due to security restrictions. Please contact your system administrator.\"))\n\n    # Defaults\n    sortings = {\n        'invoice_date desc': _('Newest First'),\n        'invoice_date': _('Oldest First'),\n        'invoice_number desc': _('Invoice No. (Z to A)'),\n        'invoice_number': _('Invoice No. (A to Z)'),\n        'amount_total desc': _('Highest Total'),\n        'amount_total': _('Lowest Total'),\n    }\n    filters = {\n        'all': _('All'),\n        'not_paid': _('Not Paid'),\n        'paid': _('Paid'),\n    }\n    default_sortby = 'invoice_date desc'\n    default_filterby = 'all'\n    searchbar_sortings = {\n        'invoice_date desc': _('Newest First'),\n        'invoice_date': _('Oldest First'),\n        'invoice_number desc': _('Invoice No. (Z to A)'),\n        'invoice_number': _('Invoice No. (A to Z)'),\n    }\n\n    # Defaults for the search bar\n    searchbar_inputs = OrderedDict([\n        ('date_begin', {'label': _('From:'), 'default': date_begin}),\n        ('date_end', {'label': _('To:'), 'default': date_end}),\n        ('sortby', {'label': _('Sort By:'), 'default': sortby, 'options': searchbar_sortings}),\n        ('filterby', {'label': _('Filter By:'), 'default': filterby, 'options': filters}),\n    ])\n\n    # Retrieve the invoice IDs from the session history\n    invoice_ids = request.session.get('my_invoices_history', [])\n\n    # Update the session history with the", "CodeBleu_score": 30.782724812330887}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    self.invoice_ids = self.invoice_ids.filtered(lambda x: x.state in ('open', 'paid'))\n    self.invoice_count = len(self.invoice_ids)\n    self.invoice_history = self.get_history_invoices()\n    self.invoice_history_ids = self.invoice_history['history_invoice_ids']\n    self.invoice_history_date_begin = self.invoice_history['history_date_begin']\n    self.invoice_history_date_end = self.invoice_history['history_date_end']\n    self.invoice_history_sortby = self.invoice_history['history_sortby']\n    self.invoice_history_filterby = self.invoice_history['history_filterby']\n    self.invoice_history_page = self.invoice_history['history_page']\n    self.invoice_history_invoice_ids = self.invoice_history['history_invoice_ids']\n    self.invoice_history_count = self.invoice_history['history_count']\n    self.invoice_history_invoice_count = self.invoice_history['history_invoice_count']\n    self.invoice_history_invoice_begin = self.invoice_history['history_invoice_begin']\n    self.invoice_history_invoice_end = self.invoice_history['history_invoice_end']\n    self.invoice_history_invoice_sortby = self.invoice_history['history_invoice_sortby']\n    self.invoice_history_invoice_filterby = self.invoice_history['history_invoice_filterby']\n    self.invoice_history_invoice_page = self.invoice_history['history_invoice_page']\n    self.invoice_history_invoice_limit = self.invoice_history['history_invoice_limit']\n    self.invoice_history_invoice_offset = self.invoice_history['history_invoice_offset']\n    self.invoice_history_invoice_previous_page = self", "CodeBleu_score": 25.384059823438964}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    if not request.env.user.partner_id.id:\n        return request.redirect('/my')\n    if not request.env.user.has_group('account.group_account_invoice'):\n        raise AccessError(_(\"The user must have the right to see invoices\"))\n    domain = [('partner_id', '=', request.env.user.partner_id.id), ('type', 'in', ['out_invoice', 'out_refund']), ('state', 'in', ['open', 'paid'])]\n    if date_begin and date_end:\n        domain += [('date_invoice', '>', date_begin), ('date_invoice', '<=', date_end)]\n    if filterby == 'not_paid':\n        domain += [('state', '=', 'open')]\n    elif filterby == 'paid':\n        domain += [('state', '=', 'paid')]\n    if sortby == 'date':\n        inv_sort = 'date_invoice desc'\n    elif sortby == 'amount_total':\n        inv_sort = 'amount_total desc'\n    else:\n        inv_sort = 'date_invoice desc'\n    inv_obj = request.env['account.move']\n    invoices = inv_obj.search(domain, order=inv_sort)\n    if not invoices:\n        return request.redirect('/my/invoices')\n    if not request.env.user.has_group('account.group_account_invoice'):\n        raise AccessError(_(\"The user must have the right to see invoices\"))\n\n    # pager\n    pager = portal_pager(url=\"/my/invoices\", total=len(invoices), page=page, step=self._items_per_page)\n    # content according to pager and sort\n    invoices = invoices[pager['offset']:pager['offset'] + self._items_per_page]\n\n    # update session history\n    history = request.session.get('my_invoices_history', [])\n    history = [x for x in history if x != request.env.", "CodeBleu_score": 34.894618734239046}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice = request.env['account.move'].sudo().browse(int(invoice_id))\n    if not invoice:\n        raise MissingError(_(\"Invoice not found\"))\n    if not invoice.can_view_invoice():\n        raise AccessError(_(\"You do not have access to this invoice\"))\n    if download:\n        if invoice.state != 'posted':\n            raise AccessError(_(\"Only posted invoices can be downloaded\"))\n        if report_type == 'pdf':\n            return _get_zip_headers(invoice.with_context(lang=invoice.partner_id.lang).sudo().get_pdf_archive())\n        elif report_type == 'html':\n            return request.env['report'].get_pdf(invoice, report_type='account.report_invoice')\n        elif report_type == 'text':\n            return request.env['report'].get_pdf(invoice, report_type='account.report_invoice_document')\n        else:\n            raise AccessError(_(\"Invalid report type\"))\n    return request.render(\"account.portal_my_invoices_detail\", {'invoice': invoice})\n\n", "CodeBleu_score": 27.325163266319556}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice = self.env['account.invoice'].sudo().browse(invoice_id)\n    if not invoice.exists():\n        raise MissingError(_('Invoice not found'))\n    if invoice.state == 'draft' and not invoice.company_id.invoice_is_email:\n        raise AccessError(_('Only invoices that are confirmed or paid can be viewed.'))\n    if invoice.state == 'cancel':\n        raise AccessError(_('Only invoices that are confirmed or paid can be viewed.'))\n    if invoice.company_id.invoice_is_email and invoice.state == 'draft':\n        raise AccessError(_('Only invoices that are confirmed or paid can be viewed.'))\n    if invoice.company_id.invoice_is_email and invoice.state == 'proforma':\n        raise AccessError(_('Only invoices that are confirmed or paid can be viewed.'))\n    if invoice.company_id.invoice_is_email and invoice.state == 'proforma2':\n        raise AccessError(_('Only invoices that are confirmed or paid can be viewed.'))\n    if invoice.company_id.invoice_is_email and invoice.state == 'paid':\n        raise AccessError(_('Only invoices that are confirmed or paid can be viewed.'))\n    if invoice.company_id.invoice_is_email and invoice.state == 'open':\n        raise AccessError(_('Only invoices that are confirmed or paid can be viewed.'))\n    if invoice.company_id.invoice_is_email and invoice.state == 'in_payment':\n        raise AccessError(_('Only invoices that are confirmed or paid can be viewed.'))\n    if invoice.company_id.invoice_is_email and invoice.state == 'overdue':\n        raise AccessError(_('Only invoices that are confirmed or paid can be viewed.'))\n    if invoice.company_id.invoice_is_email and invoice.state == 'unreconciled':\n        raise AccessError(_('Only invoices that are confirmed or paid can be viewed.'))\n    if", "CodeBleu_score": 18.979442431271735}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice = self.env['account.move'].browse(int(invoice_id))\n    if not invoice.exists():\n        raise MissingError(_(\"Invoice not found.\"))\n    if invoice.state == 'draft':\n        raise AccessError(_(\"You cannot access a draft invoice.\"))\n    if invoice.state != 'posted':\n        raise AccessError(_(\"You cannot access a non-posted invoice.\"))\n    if not request.env.user.has_group('base.group_user'):\n        raise AccessError(_(\"You are not allowed to access this document.\"))\n    if access_token:\n        if not self._check_access_token(invoice, access_token):\n            raise AccessError(_(\"You are not allowed to access this document.\"))\n    if download:\n        if report_type == 'pdf':\n            return self._download_invoice_pdf(invoice)\n        else:\n            return self._show_invoice_report(invoice, report_type)\n    else:\n        return self._show_invoice_page(invoice)\n\n", "CodeBleu_score": 23.886845234562117}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    if company:\n        company_id = company.id\n    else:\n        company_id = self.env.company.id\n    product_template_obj = self.env['product.template']\n    product_templates = product_template_obj.search([('company_id', '=', company_id), ('type', '=', 'product')])\n    if not product_templates:\n        product_templates = product_template_obj.search([('company_id', '=', False), ('type', '=', 'product')])\n    if product_templates:\n        if company and company.account_sale_tax_id:\n            product_templates.write({'taxes_id': [(6, 0, [company.account_sale_tax_id.id])]})\n        if company and company.account_purchase_tax_id:\n            product_templates.write({'taxes_id': [(6, 0, [company.account_purchase_tax_id.id])]})\n    return product_templates\n\n", "CodeBleu_score": 38.34491063478922}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    product_tmpl_obj = self.env['product.template']\n    if company:\n        product_tmpl_obj = product_tmpl_obj.with_context(allowed_company_ids=[company.id])\n    product_tmpl_ids = product_tmpl_obj.search([('website_published', '=', True)])\n    if company:\n        company_taxes = company.account_sale_tax_id | company.account_purchase_tax_id\n        if company_taxes:\n            product_tmpl_ids.with_context(allowed_company_ids=[company.id]).write({'taxes_id': [(6, 0, company_taxes.ids)]})\n    return product_tmpl_ids\n\n", "CodeBleu_score": 22.644217299960836}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    domain = [('company_id', '=', company.id)] if company else []\n    products = self.env['product.template'].search(domain)\n    if company and company.account_sale_tax_id:\n        products.write({'taxes_id': [(6, 0, [company.account_sale_tax_id.id])]})\n    if company and company.account_purchase_tax_id:\n        products.write({'taxes_id': [(6, 0, [company.account_purchase_tax_id.id])]})\n    return products\n\n", "CodeBleu_score": 22.520407950944932}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    demo_account = self.env.ref(xml_id, False)\n    if not demo_account:\n        domain = [('company_id', '=', company.id), ('internal_type', '=', account_type)]\n        demo_account = self.search(domain, limit=1)\n    return demo_account\n\n", "CodeBleu_score": 28.563398205986335}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env.ref(xml_id, False, raise_if_not_found=False)\n    if account:\n        return account\n    else:\n        account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id', '=', account_type.id)], limit=1)\n        if account:\n            return account\n        else:\n            account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n            return account\n\n", "CodeBleu_score": 44.15108788088753}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env.ref(xml_id, False)\n    if not account:\n        domain = [('company_id', '=', company.id), ('internal_type', '=', account_type)]\n        account = self.env['account.account'].search(domain, limit=1)\n    return account\n\n", "CodeBleu_score": 33.12868855842013}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    self.ensure_one()\n    if self.account_type == 'current_year_earning':\n        accounts = self.env['account.account'].search([('account_type', '=', 'current_year_earning'), ('company_id', '=', self.company_id.id)])\n        if len(accounts) > 1:\n            raise ValidationError(_(\"There should be only one account with the type 'Current Year Earnings' per company.\"))\n\n", "CodeBleu_score": 34.48360464492271}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    accounts = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_unaffected_earnings').id)])\n    accounts_by_company = accounts.read_group(\n        ['company_id'],\n        ['company_id'],\n        ['company_id']\n    )\n    for account in accounts_by_company:\n        if account['company_id_count'] > 1:\n            raise ValidationError(_('There can be only one account with the \"Current Year Earnings\" type per company.'))\n\n", "CodeBleu_score": 23.96697084627344}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    self.ensure_one()\n    if self.account_type == 'current_year_earning':\n        current_year_earning_accounts = self.env['account.account'].search([('account_type', '=', 'current_year_earning'), ('company_id', '=', self.company_id.id)])\n        if len(current_year_earning_accounts) > 1:\n            raise ValidationError(_(\"There can be only one account of type 'Current Year Earnings' per company.\"))\n\n", "CodeBleu_score": 33.96818829122428}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self._context.get('partner_id') and self._context.get('account_journal_id'):\n        # search by frequency for a partner\n        query = \"\"\"\n            SELECT a.id, a.name, a.code, a.account_number, a.balance, a.debit, a.credit, a.parent_id, a.currency_id, a.company_id, a.tag_ids, a.internal_type, a.internal_group, a.reconcile, a.tax_ids, a.user_type_id, a.complete_tax_set, a.tax_ids, a.tax_code_id, a.tax_line_id, a.deprecated, a.active\n            FROM account_account a\n            JOIN (\n                SELECT line.account_id, COUNT(*)\n                FROM account_move_line line\n                JOIN account_account account ON account.id = line.account_id\n                WHERE line.partner_id = %s AND line.journal_id = %s AND line.account_id IN %s\n                GROUP BY line.account_id\n                ORDER BY COUNT(*) DESC\n                LIMIT 10\n            ) AS freq ON freq.account_id = a.id\n            WHERE a.active AND a.company_id = %s\n        \"\"\"\n        self.env.cr.execute(query, (self._context['partner_id'], self._context['account_journal_id'], tuple(self.search([]).ids), self._context['company_id']))\n        result = self.env['account.account'].browse([row[0] for row in self.env.cr.fetchall()])\n    else:\n        # regular search\n        domain = expression.AND([domain, [('name', operator, name)]]) if domain else [('name', operator, name)]\n        result = self.search(domain, limit=limit, order=order)\n    return result._name_get()\n\n", "CodeBleu_score": 41.1273576967497}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self._context.get('partner_id'):\n        if self._context.get('partner_id') == self.env.ref('base.partner_root').id:\n            return []\n        if self._context.get('partner_id') == self.env.ref('base.res_partner_1').id:\n            return []\n        if self._context.get('partner_id') == self.env.ref('base.res_partner_2').id:\n            return []\n        if self._context.get('partner_id') == self.env.ref('base.res_partner_3').id:\n            return []\n        if self._context.get('partner_id') == self.env.ref('base.res_partner_4').id:\n            return []\n        if self._context.get('partner_id') == self.env.ref('base.res_partner_5').id:\n            return []\n        if self._context.get('partner_id') == self.env.ref('base.res_partner_6').id:\n            return []\n        if self._context.get('partner_id') == self.env.ref('base.res_partner_7').id:\n            return []\n        if self._context.get('partner_id') == self.env.ref('base.res_partner_8').id:\n            return []\n        if self._context.get('partner_id') == self.env.ref('base.res_partner_9').id:\n            return []\n        if self._context.get('partner_id') == self.env.ref('base.res_partner_10').id:\n            return []\n        if self._context.get('partner_id') == self.env.ref('base.res_partner_11').id:\n            return []\n        if self._context.get('partner_id') == self.env.ref('base.res_partner_12').id:\n            return []\n        if self._context.get('partner_id') == self.env.ref('base.res_part", "CodeBleu_score": 25.748886405994035}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self._context.get('partner_id'):\n        domain = expression.AND([domain, [('partner_id', '=', self._context['partner_id'])]])\n        # get the most used accounts\n        self = self.with_context(active_test=False)\n        query = \"\"\"\n            SELECT a.id, a.name, a.internal_type, a.internal_group, a.tag_ids, a.company_id, a.currency_id, a.user_type_id,\n                a.reconcile, a.tax_ids, a.tax_line_id, a.debit_min, a.debit_max, a.credit_min, a.credit_max,\n                a.tax_code_id, a.chart_template_id, a.tag_ids, a.reconcile_auto_closing, a.reconcile_partially,\n                a.auto_reconcile, a.reconcile_partially_id, a.reconcile_model_id,\n                SUM(l.debit-l.credit) AS debit_credit\n            FROM account_account a\n            LEFT JOIN account_move_line l ON a.id = l.account_id\n            WHERE a.active AND a.company_id = %s AND l.company_id = %s AND l.partner_id = %s AND l.account_id = a.id\n            GROUP BY a.id, a.name, a.internal_type, a.internal_group, a.tag_ids, a.company_id, a.currency_id, a.user_type_id,\n                a.reconcile, a.tax_ids, a.tax_line_id, a.debit_min, a.debit_max, a.credit_min, a.credit_max,\n                a.tax_code_id, a.chart_template_id, a.tag_ids, a.reconcile_auto_closing, a.reconcile_partially,\n                a.auto_reconcile, a.reconcile_partially_id, a.reconcile", "CodeBleu_score": 23.906014204474967}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    if not new:\n        return\n    excluded = set(excluded)\n    excluded.add('name')\n    for field in self._fields.values():\n        if field.translate and field.name not in excluded:\n            new_value = getattr(new, field.name)\n            if new_value:\n                self._fields[field.name].translate_update(self, new, field.name)\n\n", "CodeBleu_score": 33.04601736940126}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    excluded = set(excluded + ['name'])\n    if new.name.startswith('/'):\n        new_name = new.name\n    else:\n        new_name = new._get_default_name()\n    if new_name and new_name != new.name:\n        new._fields['name'].translate = True\n        new.name = new_name\n    for field in self._fields:\n        if field not in excluded:\n            if field in self and field in new:\n                new._fields[field].copy(self, new)\n            elif field in self:\n                new._fields[field].copy(self, new)\n\n", "CodeBleu_score": 26.37179205595433}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    excluded = set(excluded).union({'name'})\n    for field in self._fields:\n        if field in excluded:\n            continue\n        if field in new:\n            # Do not copy value if field is a computed field\n            if self._fields[field].compute:\n                continue\n            if self._fields[field].translate:\n                self.env['ir.translation']._update_translations_for_field(self, field, new[field])\n\n", "CodeBleu_score": 24.171845525010134}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    if self.type in ('out_invoice', 'in_invoice', 'out_refund', 'in_refund'):\n        return {\n            'name': _('Customer Invoices'),\n            'domain': [('id', 'in', self.env['account.move'].search([('line_ids.sale_line_ids', 'in', self.ids), ('state', 'in', ['open', 'paid'])], context=self._context).mapped('id'))],\n            'context': {\n                'default_type': 'out_invoice',\n                'default_journal_id': self.env['account.journal'].search([('type', '=', 'sale')], limit=1).id,\n                'default_invoice_date': self.date_order,\n                'default_invoice_line_ids': [[0, 0, {\n                    'name': self.name,\n                    'quantity': 1.0,\n                    'price_unit': self.price_total,\n                    'account_id': self.product_id.property_account_income_id.id,\n                    'analytic_account_id': self.order_id.analytic_account_id.id,\n                    'analytic_tag_ids': [(6, 0, self.order_id.analytic_tag_ids.ids)],\n                }]],\n                'default_partner_id': self.partner_id.id,\n                'default_fiscal_position_id': self.fiscal_position_id.id,\n                'default_payment_term_id': self.payment_term_id.id,\n                'default_currency_id': self.currency_id.id,\n                'default_invoice_origin': self.name,\n                'default_team_id': self.team_id.id,\n            },\n            'view_mode': 'tree,form',\n            'res_model': 'account.move',\n            'type': 'ir.actions.act_window',\n            'view_id': False,\n            'search_view_id", "CodeBleu_score": 24.784622157367153}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    invoice_ids = self.env['account.move'].search([\n        ('type', '=', 'out_invoice'),\n        ('state', 'in', ['posted', 'all']),\n        ('line_ids.sale_line_ids.order_id', '=', self.id),\n        ('line_ids.analytic_account_id', '=', self.analytic_account_id.id),\n    ]).ids\n    return {\n        'name': _('Customer Invoices'),\n        'domain': [('id', 'in', invoice_ids)],\n        'res_model': 'account.move',\n        'type': 'ir.actions.act_window',\n        'view_mode': 'tree,form',\n        'context': {\n            'create': False,\n            'edit': False,\n            'view_no_maturity': True,\n            'view_no_payment': True,\n        },\n    }\n\n", "CodeBleu_score": 27.341278491547}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    action = self.env.ref('account.action_move_out_invoice').read()[0]\n    aml_obj = self.env['account.move.line']\n    domain = [\n        ('move_id', 'in', aml_obj.search([\n            ('account_id', '=', self.property_account_income_id.id),\n            ('partner_id', '=', self.partner_id.id),\n            ('analytic_account_id', 'in', self.analytic_account_id.ids)\n        ]).mapped('move_id').ids),\n        ('state', '=', 'posted'),\n        ('reconciled', '=', False)\n    ]\n    action['domain'] = domain\n    action['context'] = {\n        'default_type': 'out_invoice',\n        'default_partner_id': self.partner_id.id,\n        'default_invoice_date': self.date_invoice,\n        'default_date': self.date_invoice,\n        'default_journal_id': self.journal_id.id,\n        'default_invoice_origin': self.name,\n        'default_invoice_line_ids': [[0, 0, {\n            'name': self.name,\n            'product_id': self.product_id.id,\n            'quantity': 1,\n            'price_unit': self.price_unit,\n            'analytic_account_id': self.analytic_account_id.id,\n            'analytic_tag_ids': [(6, 0, self.analytic_tag_ids.ids)],\n        }]],\n    }\n    return action\n\n", "CodeBleu_score": 40.07036494669561}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    domain = [('move_id.state', 'in', ['draft', 'posted']), ('purchase_line_id', '=', self.id)]\n    move_lines = self.env['account.move.line'].search(domain)\n    move_ids = move_lines.mapped('move_id').ids\n    action = {\n        'name': _('Vendor Bills'),\n        'domain': [('id', 'in', move_ids)],\n        'context': {'default_type': 'in_invoice', 'default_purchase_id': self.id, 'default_purchase_line_id': self.id, 'create': False},\n        'res_model': 'account.move',\n        'type': 'ir.actions.act_window',\n        'view_mode': 'tree,form',\n        'view_type': 'form',\n        'view_id': False,\n        'search_view_id': self.env.ref('purchase.view_move_search').id,\n        'target': 'current',\n    }\n    return action\n\n", "CodeBleu_score": 39.775137359329634}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    move_lines = self.env['account.move.line'].search([\n        ('account_id.user_type_id.type', '=', 'purchase'),\n        ('purchase_line_id', '=', self.id),\n    ])\n    move_ids = move_lines.mapped('move_id').ids\n    action = self.env.ref('purchase.action_view_vendor_bill').read()[0]\n    action['context'] = {'default_move_type': 'in_invoice', 'search_default_posted': 0, 'default_type': 'in_invoice'}\n    action['domain'] = [('id', 'in', move_ids)]\n    return action\n\n", "CodeBleu_score": 28.98839500223696}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    domain = [('move_id.type', 'in', ['in_invoice', 'in_refund']), ('move_id.state', '!=', 'cancel')]\n    if self.purchase_type == 'purchase':\n        domain += [('purchase_line_id', '=', self.id)]\n    elif self.purchase_type == 'service':\n        domain += [('service_line_id', '=', self.id)]\n    elif self.purchase_type == 'membership':\n        domain += [('membership_line_id', '=', self.id)]\n    elif self.purchase_type == 'product':\n        domain += [('product_id', '=', self.id)]\n    elif self.purchase_type == 'timesheet':\n        domain += [('timesheet_line_id', '=', self.id)]\n    elif self.purchase_type == 'service_timesheet':\n        domain += [('service_timesheet_line_id', '=', self.id)]\n    else:\n        domain += [('id', '=', False)]\n    move_lines = self.env['account.move.line'].search(domain)\n    move_ids = move_lines.mapped('move_id').ids\n    action = {\n        'type': 'ir.actions.act_window',\n        'name': _('Vendor Bills'),\n        'domain': [('id', 'in', move_ids)],\n        'res_model': 'account.move',\n        'view_mode': 'tree,form',\n        'view_type': 'form',\n        'context': {\n            'default_type': 'in_invoice',\n            'default_purchase_id': self.id,\n            'create': False,\n        },\n    }\n    return action\n\n", "CodeBleu_score": 38.39432361239192}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t\n    if values.get('attachment_ids'):\n        values.pop('attachment_ids')\n    with self.with_context(attachments_m2m=True):\n        return super(models.Model, self).write(values)\n\n", "CodeBleu_score": 26.581065834872696}, {"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values and len(self) > 1:\n        del values['attachment_ids']\n    with self.env.context(detach_attachments=True):\n        self.env['ir.attachment']._detach_pre_write(self)\n    res = super(models.Model, self).write(values)\n    self.env['ir.attachment']._attach_post_write(self)\n    return res\n\n", "CodeBleu_score": 41.58892958526004}, {"code": "def write(self, values)\n\t\n    if self.ids and 'attachment_ids' in values:\n        values = dict(values)\n        del values['attachment_ids']\n    with self.env.context(bin_size=False):\n        return super(models.Model, self).write(values)\n\n", "CodeBleu_score": 37.57682712686926}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    self = self.with_context(mail_notrack=True)\n    if self.env.company.bank_account_on_partner:\n        return self.env['res.partner.bank'].search([('acc_number', '=', self.acc_number), ('partner_id', '=', self.partner_id.id)], limit=1)\n    return self.env['res.partner.bank'].search([('acc_number', '=', self.acc_number), ('company_id', '=', self.company_id.id)], limit=1)\n\n", "CodeBleu_score": 24.3267070239363}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if self.env.context.get('skip_bank_account_creation'):\n        return self.env['res.partner.bank']\n\n    bank_account = self.env['res.partner.bank'].search([\n        ('acc_number', '=', self.acc_number),\n        ('partner_id', '=', self.partner_id.id),\n        ('company_id', '=', self.company_id.id)\n    ], limit=1)\n\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'acc_number': self.acc_number,\n            'partner_id': self.partner_id.id,\n            'company_id': self.company_id.id,\n        })\n\n    return bank_account\n\n", "CodeBleu_score": 56.17434236179173}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if self.env.context.get('skip_bank_account_creation'):\n        return self.env['res.partner.bank']\n\n    bank_account = self.env['res.partner.bank'].search([\n        ('acc_number', '=', self.acc_number),\n        ('partner_id', '=', self.partner_id.id),\n        ('company_id', '=', self.company_id.id)\n    ], limit=1)\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'acc_number': self.acc_number,\n            'partner_id': self.partner_id.id,\n            'bank_id': self.bank_id.id,\n            'bank_bic': self.bank_bic,\n            'company_id': self.company_id.id,\n        })\n    return bank_account\n\n", "CodeBleu_score": 57.9029575390245}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    # Retrieve the relevant amounts and currencies\n    amount = self.amount_currency\n    company_currency = self.company_id.currency_id\n    amount_company = amount_currency\n    if self.currency_id == company_currency:\n        amount_company = self.amount\n    # Compute the transaction amount and journal amount\n    if currency == self.currency_id:\n        amount_transaction = amount\n        amount_journal = amount\n    elif currency == company_currency:\n        amount_transaction = amount_company\n        amount_journal = amount_company\n    else:\n        amount_transaction = self.currency_id._convert(amount, company_currency, self.company_id, self.date)\n        amount_journal = currency._convert(amount, company_currency, self.company_id, self.date)\n    # Adjust the transaction amount and balance according to the currency type\n    if currency.is_zero(amount_transaction):\n        amount_transaction = 0.0\n    if currency.is_zero(balance):\n        balance = 0.0\n    # Return the computed amounts\n    return {\n        'amount_transaction': amount_transaction,\n        'amount_journal': amount_journal,\n        'amount_company': amount_company,\n        'balance': balance,\n    }\n\n", "CodeBleu_score": 26.539037236455925}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    if not self.currency_id:\n        return {}\n\n    # Ensure a single record context\n    if self.env.in_test_mode():\n        self.env = self.env(context=dict(self._context or {}, active_test=True))\n\n    # Retrieve relevant accounting amounts and currencies\n    amount_company_currency = self.currency_id._convert(\n        amount_currency, currency, currency.company_id, self.date\n    )\n    amount_account_currency = self.currency_id._convert(\n        amount_currency, self.account_id.currency_id, self.company_id, self.date\n    )\n    amount_account_company_currency = self.currency_id._convert(\n        amount_currency, currency, self.company_id, self.date\n    )\n\n    # Compute the transaction amount, journal amount, and company amount using various exchange rates\n    amount_transaction = amount_currency\n    if currency.is_zero(amount_transaction):\n        amount_transaction = 0.0\n    amount_journal = amount_account_currency\n    if self.account_id.currency_id.is_zero(amount_journal):\n        amount_journal = 0.0\n    amount_company = amount_account_company_currency\n    if currency.is_zero(amount_company):\n        amount_company = 0.0\n\n    # Adjust the transaction amount and balance accordingly\n    if self.account_id.reconcile:\n        if self.account_id.internal_type in (\"receivable\", \"payable\"):\n            amount_transaction = amount_journal\n            balance = amount_journal\n        else:\n            amount_transaction = amount_company\n            balance = amount_company\n    return {\n        \"amount_currency\": amount_currency,\n        \"amount_company_currency\": amount_company_currency,\n        \"amount_account_currency\": amount_account_currency,\n        \"amount_account_company_currency\": amount_account_company_currency,\n        \"amount_transaction\": amount_transaction,\n        \"amount_journal\": amount_journal,\n        \"amount_company\": amount_company,", "CodeBleu_score": 34.56608044647293}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    # TODO: refactor this function to make it more readable\n    # TODO: remove the use of the 'company' field on the 'account.move' model\n    # TODO: remove the use of the 'amount_currency' field on the 'account.move' model\n    # TODO: remove the use of the 'currency_id' field on the 'account.move' model\n    # TODO: remove the use of the 'amount_residual' field on the 'account.move' model\n    # TODO: remove the use of the 'amount_residual_currency' field on the 'account.move' model\n    # TODO: remove the use of the 'amount_residual_company' field on the 'account.move' model\n    # TODO: remove the use of the 'amount_residual_company_currency' field on the 'account.move' model\n    # TODO: remove the use of the 'amount_residual_company_signed' field on the 'account.move' model\n    # TODO: remove the use of the 'amount_residual_signed' field on the 'account.move' model\n    # TODO: remove the use of the 'amount_company' field on the 'account.move' model\n    # TODO: remove the use of the 'amount_company_signed' field on the 'account.move' model\n    # TODO: remove the use of the 'amount_signed' field on the 'account.move' model\n    # TODO: remove the use of the 'amount_currency_tax_excluded' field on the 'account.move' model\n    # TODO: remove the use of the 'amount_tax_excluded' field on the 'account.move' model\n    # TODO: remove the use of the 'amount_tax' field on the 'account.move' model\n    # TODO: remove the use of the 'amount_untaxed' field on the 'account.move' model\n    # TODO: remove the use of the 'amount_total' field on the 'account.move' model\n    # TODO: remove the use of the 'amount_total_currency' field on the 'account.move' model\n    # TODO: remove the use of the 'amount_total_company' field on the 'account.move' model\n    #", "CodeBleu_score": 1.5725316675342702}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_ids = [(5, 0, 0)]\n        if journal.type in ('bank', 'cash'):\n            payment_methods = self.env['account.payment.method'].search([('payment_type', '=', 'outbound'), ('payment_method_code', '!=', 'manual')])\n            for payment_method in payment_methods:\n                journal.outbound_payment_method_ids.append((0, 0, {'payment_method_id': payment_method.id}))\n    return True\n\n", "CodeBleu_score": 41.9628403621381}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    self.env.cr.execute(\"\"\"\n        DELETE FROM account_payment_method_line WHERE journal_id = ANY(%s)\n    \"\"\", (tuple(self.ids),))\n\n    default_outbound_payment_methods = self.env['account.payment.method'].search([('payment_type', '=', 'outbound')])\n    payment_method_lines = []\n    for journal in self:\n        if journal.type in ('bank', 'cash'):\n            for payment_method in default_outbound_payment_methods:\n                payment_method_lines.append((0, 0, {\n                    'journal_id': journal.id,\n                    'payment_method_id': payment_method.id,\n                }))\n\n    if payment_method_lines:\n        self.env['account.payment.method.line'].create(payment_method_lines)\n\n", "CodeBleu_score": 33.051802837895394}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids = [(5, 0, 0)]\n        if journal.type in ('bank', 'cash'):\n            payment_method_line_vals = []\n            for payment_method in journal.payment_method_ids:\n                if payment_method.payment_method_code == 'manual_in':\n                    continue\n                payment_method_line_vals.append((0, 0, {\n                    'journal_id': journal.id,\n                    'payment_method_id': payment_method.id,\n                }))\n            journal.outbound_payment_method_line_ids = payment_method_line_vals\n\n", "CodeBleu_score": 39.120185086556596}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t\n    # if the move is a sale document, it is not possible to change the date\n    if self.is_sale_document():\n        return\n    # if the move has no invoice date, the date is today's date\n    if not self.invoice_date:\n        self.date = date.today()\n        return\n    # if the move has an invoice date and no date, the date is the invoice date\n    if not self.date:\n        self.date = self.invoice_date\n        return\n    # if the move has an invoice date and a date, the accounting date is computed\n    accounting_date = self.invoice_date + relativedelta(days=self.tax_report_accounting_date_diff)\n    if self.date == accounting_date:\n        return\n    # if the date is different from the accounting date, the date is updated and the environment is scheduled for recalculation\n    self.date = accounting_date\n    self.env.add_to_compute(self, [\"date\"])\n\n", "CodeBleu_score": 27.997298749189582}, {"code": "def _compute_date(self)\n\t\n    if not self.invoice_date:\n        self.date = fields.Date.today()\n        return\n    if self.journal_id.type in ('sale', 'sale_refund'):\n        self.date = self.invoice_date\n        return\n    if not self.date:\n        self.date = self.invoice_date\n    date_acc = self.date\n    if self.tax_report_date_from:\n        date_acc = self.tax_report_date_from\n    elif self.tax_report_date_to:\n        date_acc = self.tax_report_date_to\n    if date_acc != self.date:\n        self.date = date_acc\n        self.with_context(invoice_date=date_acc)._onchange_invoice_date()\n\n", "CodeBleu_score": 27.96711125155065}, {"code": "def _compute_date(self)\n\t\n    if self.invoice_date:\n        if self.invoice_date.year < 2018:\n            self.date = self.invoice_date\n            return\n        if self.tax_report_entry_ids:\n            self.date = self.invoice_date + relativedelta(days=self.tax_report_entry_ids[0].tax_report_period_id.tax_report_period_id.tax_report_period_id.days_to_due)\n        else:\n            self.date = self.invoice_date\n    else:\n        self.date = date.today()\n\n", "CodeBleu_score": 24.727376982811673}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    if self.type in (\"out_invoice\", \"out_refund\"):\n        self.payment_term_id = self.partner_id.with_company(self.company_id).property_supplier_payment_term_id.id\n    elif self.type in (\"in_invoice\", \"in_refund\"):\n        self.payment_term_id = self.partner_id.with_company(self.company_id).property_supplier_payment_term_id.id\n    else:\n        self.payment_term_id = False\n\n", "CodeBleu_score": 28.345717080273463}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    if self.type in (\"out_invoice\", \"out_refund\"):\n        self.payment_term_id = (\n            self.partner_id.with_company(self.company_id).property_supplier_payment_term_id\n            or self.payment_term_id\n        )\n    elif self.type in (\"in_invoice\", \"in_refund\"):\n        self.payment_term_id = (\n            self.partner_id.with_company(self.company_id).property_payment_term_id\n            or self.payment_term_id\n        )\n    else:\n        self.payment_term_id = False\n\n", "CodeBleu_score": 32.49873959478064}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    if self.type in (\"out_invoice\", \"out_refund\"):\n        self.invoice_payment_term_id = (\n            self.partner_id.with_company(self.company_id).property_supplier_payment_term_id.id\n        )\n    elif self.type in (\"in_invoice\", \"in_refund\"):\n        self.invoice_payment_term_id = (\n            self.partner_id.with_company(self.company_id).property_supplier_payment_term_id.id\n        )\n    else:\n        self.invoice_payment_term_id = False\n\n", "CodeBleu_score": 33.257652586722806}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    tax_groups = self.env['account.tax.group']\n    for group, taxes in groupby(self, lambda tax: (tax.tax_group_id.country_id, tax.tax_group_id.company_id)):\n        taxes = list(taxes)\n        tax_group = tax_groups.search([('country_id', '=', group[0]), ('company_id', '=', group[1])], limit=1)\n        if not tax_group:\n            tax_group = tax_groups.search([('country_id', '=', False), ('company_id', '=', group[1])], limit=1)\n        for tax in taxes:\n            tax.tax_group_id = tax_group\n\n", "CodeBleu_score": 23.887615110554364}, {"code": " def _compute_tax_group_id(self)\n\t\n    tax_groups = self.env['account.tax.group']\n    for group_key, taxes in groupby(self, key=lambda x: (x.tax_group_id.country_id, x.tax_group_id.company_id)):\n        tax_group_id = tax_groups.search([('country_id', '=', group_key[0]), ('company_id', '=', group_key[1])], limit=1)\n        if not tax_group_id:\n            tax_group_id = tax_groups.search([('country_id', '=', False), ('company_id', '=', group_key[1])], limit=1)\n        if tax_group_id:\n            taxes.write({'tax_group_id': tax_group_id.id})\n\n", "CodeBleu_score": 24.368936329471808}, {"code": " def _compute_tax_group_id(self)\n\t\n    tax_group_map = self.env['account.tax.group'].search_read([('tax_ids', 'in', self.ids)], ['tax_ids', 'company_id', 'country_id'])\n    tax_group_map = {tg['tax_ids'][0]: tg for tg in tax_group_map}\n    tax_groups = self.env['account.tax.group']\n    for tax in self:\n        tax_group_id = tax_group_map.get(tax.id)\n        if tax_group_id:\n            tax_group = tax_groups | self.env['account.tax.group'].browse(tax_group_id['id'])\n        else:\n            tax_group = tax_groups\n        tax_group = tax_group.search([('company_id', '=', tax.company_id.id), ('country_id', '=', tax.country_id.id)], limit=1)\n        if not tax_group:\n            tax_group = tax_groups.search([('company_id', '=', tax.company_id.id), ('country_id', '=', False)], limit=1)\n        tax.tax_group_id = tax_group\n\n", "CodeBleu_score": 36.57309062921722}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n\n    # Set database in session\n    r = requests.get(url + '/web/database/manager')\n    if r.status_code != 200:\n        raise Exception('Unable to set database in session.')\n\n    # Prepare login data\n    login_data = {\n        'jsonrpc': '2.0',\n        'params': {\n            'db': db,\n            'login': login,\n            'password': password\n        },\n        'id': '0'\n    }\n\n    # Prepare upload data\n    upload_data = {\n        'force': 'true' if force else 'false',\n        'session_id': r.cookies.get('session_id')\n    }\n\n    # Upload module\n    with open(module_file, 'rb') as f:\n        r = requests.post(url + '/web/base_import_module/login_upload', data=upload_data, files={'module_file': f}, json=login_data)\n        if r.status_code != 200:\n            raise Exception('Unable to upload module.')\n\n    return r.text\n\n", "CodeBleu_score": 52.20830707671278}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    session = requests.Session()\n    session.get(url + \"/web/database/manager\")\n    data = {\n        \"login\": login,\n        \"password\": password,\n        \"db\": db,\n    }\n    if force:\n        data[\"force\"] = \"1\"\n    with open(module_file, \"rb\") as f:\n        files = {\"file\": f}\n        r = session.post(url + \"/web/database/manager/login_upload\", data=data, files=files)\n    if \"The module is already installed\" in r.text:\n        raise Exception(\"The module is already installed\")\n    if \"The module is outdated\" in r.text:\n        raise Exception(\"The module is outdated\")\n    return r.text\n\n", "CodeBleu_score": 41.46056160660197}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set database in session\n    session = requests.Session()\n    session.get(url)\n    session.post(url, data={'db': db})\n\n    # Prepare POST request data\n    data = {'login': login, 'password': password, 'db': db}\n    if force:\n        data['force'] = '1'\n    files = {'file': module_file}\n\n    # Upload module file\n    response = session.post(url + '/base_import_module/login_upload', data=data, files=files)\n    response.raise_for_status()\n    return response.text\n\n", "CodeBleu_score": 33.63914675114184}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n    config = get_config()\n    if config['database'] is None:\n        print('No database name specified. Please use the -d argument to specify the database name.')\n        sys.exit(1)\n\n    registry = odoo.modules.registry.Registry(config['database'])\n    with registry.cursor() as cr:\n        importer = TranslationImporter(cr, config)\n        importer.import_translations()\n\n", "CodeBleu_score": 38.782045075976804}, {"code": "def import_translation()\n\t\n\n    # Get configuration settings\n    config = get_config()\n    db_name = config[\"db_name\"]\n    overwrite = config[\"overwrite\"]\n\n    # Create database registry\n    registry = odoo.modules.registry.Registry(db_name)\n\n    # Create cursor\n    with registry.cursor() as cr:\n\n        # Create TranslationImporter\n        importer = TranslationImporter(cr)\n\n        # Load translation files\n        importer.load_translation_files()\n\n        # Save translations\n        importer.save_translations(overwrite)\n\n", "CodeBleu_score": 30.75878686135798}, {"code": "def import_translation()\n\t\n    # Get configuration settings\n    config = get_config()\n    db_name = config['db_name']\n    overwrite = config['overwrite']\n\n    # Create a new registry\n    registry = odoo.modules.registry.Registry(db_name)\n    with registry.cursor() as cr:\n        # Create a TranslationImporter\n        importer = TranslationImporter(cr, db_name, overwrite)\n        importer.load_translations()\n        importer.save_translations()\n\n", "CodeBleu_score": 31.556019092295173}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    if not isinstance(name, str):\n        raise TypeError(\"Node name must be a string\")\n    if not isinstance(info, dict):\n        raise TypeError(\"Node info must be a dict\")\n    if name in self.children:\n        raise ValueError(\"Node with name '%s' already exists\" % name)\n\n    # Create the new node\n    new_node = Node(name, info)\n\n    # Inherit certain attributes from the parent\n    new_node.depth = self.depth + 1\n    if self.parent:\n        new_node.parent = self\n        new_node.root = self.root\n        new_node.path = self.path + '/' + name\n        new_node.full_name = self.full_name + '/' + name\n    else:\n        new_node.root = new_node\n        new_node.path = name\n        new_node.full_name = name\n\n    # Add the new node to the children list\n    self.children.append(new_node)\n\n    # Sort the children by name\n    self.children.sort(key=lambda node: node.name)\n\n    return new_node\n\n", "CodeBleu_score": 45.407422886354894}, {"code": "def add_child(self, name, info)\n\t\n    child = self.env['ir.ui.view'].create(info)\n    child.name = name\n    child.depth = self.depth + 1\n    child.inherit_id = self.id\n    child.inherit_parent = self.id\n    child.inherit_children = self.inherit_children\n    child.inherit_mode = self.inherit_mode\n    child.inherit_branding = self.inherit_branding\n    child.inherit_id = self.inherit_id\n    child.inherit_parent_id = self.inherit_parent_id\n    child.inherit_branding_parent_id = self.inherit_branding_parent_id\n    child.inherit_branding_parent_xmlid = self.inherit_branding_parent_xmlid\n    child.inherit_branding_parent_name = self.inherit_branding_parent_name\n    child.inherit_branding_parent_depth = self.inherit_branding_parent_depth\n    child.inherit_branding_parent_version = self.inherit_branding_parent_version\n    child.inherit_branding_parent_install_mode = self.inherit_branding_parent_install_mode\n    child.inherit_branding_parent_active = self.inherit_branding_parent_active\n    child.inherit_branding_parent_website_id = self.inherit_branding_parent_website_id\n    child.inherit_branding_parent_website_meta_title = self.inherit_branding_parent_website_meta_title\n    child.inherit_branding_parent_website_meta_description = self.inherit_branding_parent_website_meta_description\n    child.inherit_branding_parent_website_meta_keywords = self.inherit_branding_parent_website_meta_keywords\n    child.inherit_branding_parent_website_header = self.inherit_branding_parent_website_header\n    child.inherit_branding_parent_website_footer = self.inherit_branding_parent_website_footer\n", "CodeBleu_score": 21.425562873809877}, {"code": "def add_child(self, name, info)\n\t\n    if name in self.children:\n        return self.children[name]\n    else:\n        child = Node(name, info, self.depth + 1)\n        if self.depth == 0:\n            child.parent = self\n        else:\n            child.parent = self.parent\n        if self.depth == 0:\n            child.root = self\n        else:\n            child.root = self.root\n        if self.depth == 0:\n            child.parent_id = self.id\n        else:\n            child.parent_id = self.parent_id\n        if self.depth == 0:\n            child.root_id = self.id\n        else:\n            child.root_id = self.root_id\n        if self.depth == 0:\n            child.parent_path = self.path\n        else:\n            child.parent_path = self.parent_path\n        if self.depth == 0:\n            child.root_path = self.path\n        else:\n            child.root_path = self.root_path\n        if self.depth == 0:\n            child.parent_name = self.name\n        else:\n            child.parent_name = self.parent_name\n        if self.depth == 0:\n            child.root_name = self.name\n        else:\n            child.root_name = self.root_name\n        if self.depth == 0:\n            child.parent_complete_name = self.complete_name\n        else:\n            child.parent_complete_name = self.parent_complete_name\n        if self.depth == 0:\n            child.root_complete_name = self.complete_name\n        else:\n            child.root_complete_name = self.root_complete_name\n        if self.depth == 0:\n            child.parent_complete_path = self.complete_path\n        else:\n            child.parent_complete_path = self.parent_complete_path\n        if self.depth == 0:\n            child.root_complete_path = self.complete_path\n        else:\n            child.root_complete_path = self.root_complete_path\n", "CodeBleu_score": 20.555321112144515}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n\n    result = {\n        \"account_name\": account.account_name,\n        \"account\": account.name,\n        \"warn_if_negative\": account.warn_if_negative,\n        \"account_type\": account.account_type,\n        \"is_group\": account.is_group,\n        \"opening_balance\": 0.0,\n        \"closing_balance\": 0.0,\n        \"currency\": account.account_currency,\n        \"root_type\": frappe.db.get_value(\"Account\", account.name, \"root_type\"),\n        \"company_name\": frappe.get_cached_value(\"Company\", account.company, \"company_name\"),\n    }\n    for end_date in dates:\n        result.update({end_date: 0.0})\n\n    if result[\"root_type\"] not in [\"Asset\", \"Expense\"]:\n        for end_date in dates:\n            result[end_date] *= -1\n\n    for entry in gl_entries:\n        if entry.posting_date <= dates[0]:\n            result[\"opening_balance\"] += entry.debit - entry.credit\n        if entry.posting_date <= dates[-1]:\n            result[entry.posting_date] += entry.debit - entry.credit\n        if result[\"root_type\"] in [\"Asset\", \"Liability\", \"Equity\"]:\n            result[\"closing_balance\"] += entry.debit - entry.credit\n\n    return result\n\n", "CodeBleu_score": 21.220229876146412}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"account_name\": account.account_name,\n        \"account\": account.name,\n        \"warn_if_negative\": account.warn_if_negative,\n        \"currency\": account.account_currency,\n        \"report_type\": \"Balance Sheet\",\n        \"account_type\": account.root_type,\n        \"opening_balance\": 0.0,\n        \"closing_balance\": 0.0,\n        \"total_debit\": 0.0,\n        \"total_credit\": 0.0,\n        \"entries\": [],\n        \"date_wise_entry\": {},\n    }\n    for end_date in dates:\n        result[\"date_wise_entry\"][end_date] = {\n            \"debit\": 0.0,\n            \"credit\": 0.0,\n            \"balance\": 0.0,\n        }\n\n    if account.root_type in (\"Asset\", \"Expense\"):\n        result[\"opening_balance\"] = -account.opening_balance\n        result[\"closing_balance\"] = -account.opening_balance\n    else:\n        result[\"opening_balance\"] = account.opening_balance\n        result[\"closing_balance\"] = account.opening_balance\n\n    for entry in gl_entries:\n        if entry.posting_date <= dates[0]:\n            result[\"opening_balance\"] += entry.debit - entry.credit\n\n        if entry.posting_date <= dates[-1]:\n            result[\"date_wise_entry\"][entry.posting_date][\"debit\"] += entry.debit\n            result[\"date_wise_entry\"][entry.posting_date][\"credit\"] += entry.credit\n            result[\"total_debit\"] += entry.debit\n            result[\"total_credit\"] += entry.credit\n            result[\"entries\"].append(entry)\n\n        if entry.posting_date <= getdate(nowdate()):\n            result[\"closing_balance\"] += entry.debit - entry.credit\n\n    if account.root_type in (\"", "CodeBleu_score": 22.212238701836554}, {"code": "def build_result(account, dates, gl_entries)\n\t\n\n    result = {\n        \"account\": account,\n        \"account_name\": frappe.db.get_value(\"Account\", account, \"account_name\"),\n        \"account_type\": frappe.db.get_value(\"Account\", account, \"account_type\"),\n        \"currency\": frappe.db.get_value(\"Account\", account, \"account_currency\"),\n        \"opening_balance\": frappe.db.get_value(\"Account\", account, \"opening_balance\"),\n        \"balances\": [0 for d in dates],\n        \"dates\": dates,\n    }\n\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n\n    for entry in gl_entries:\n        date = entry.posting_date\n        if date in dates:\n            idx = dates.index(date)\n            result[\"balances\"][idx] += entry.debit - entry.credit\n\n    if root_type not in [\"Asset\", \"Expense\"]:\n        result[\"balances\"] = [-x for x in result[\"balances\"]]\n\n    if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n        result[\"balances\"] = [\n            sum(result[\"balances\"][:i + 1]) for i in range(len(result[\"balances\"]))\n        ]\n\n    return result\n\n", "CodeBleu_score": 29.135324872898394}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n\n    if not self.is_new() and self.account_type in [\"Receivable\", \"Payable\"]:\n        old_doc = frappe.get_doc(\"Account\", self.name)\n        if old_doc.account_type != self.account_type:\n            if self.account_type not in [\"Receivable\", \"Payable\"]:\n                if frappe.db.get_value(\"GL Entry\", {\"account\": self.name}):\n                    frappe.msgprint(_(\"There are existing general ledger entries for this account. Please note that changing the account type to a non-receivable/payable type may cause errors in the Accounts report.\"), alert=True)\n                    self.add_comment(\"Account Type\", _(\"This account has been changed from a receivable/payable type to a non-receivable/payable type. This may cause errors in the Accounts report. Please check the Accounts report to ensure that all entries are in order.\"))\n\n", "CodeBleu_score": 31.099135834796108}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n\n    if self.is_new():\n        return\n\n    if self.account_type in (\"Receivable\", \"Payable\") and self.account_type != self.old_account_type:\n        if self.account_type == \"Receivable\":\n            account_type = \"Receivable\"\n        else:\n            account_type = \"Payable\"\n\n        if frappe.db.count(\n            \"GL Entry\",\n            filters={\n                \"account\": self.name,\n                \"party_type\": account_type,\n                \"party\": self.account_name,\n            },\n        ):\n            frappe.msgprint(\n                _(\n                    \"Warning: You have changed the account type of {0} from {1} to {2}. Please note that existing {1} entries for this account will now show up in the Accounts report.\"\n                ).format(self.name, self.old_account_type, self.account_type)\n            )\n            self.add_comment(\n                \"Edit\",\n                _(\n                    \"Changed account type from {0} to {1}.\"\n                ).format(self.old_account_type, self.account_type),\n            )\n\n", "CodeBleu_score": 29.03957214869049}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if not self.is_new():\n        old_account_type = frappe.db.get_value(\"Account\", self.name, \"account_type\")\n        if (\n            old_account_type == \"Receivable\"\n            and self.account_type != \"Receivable\"\n            and self.account_type != \"Payable\"\n            and self.account_type != \"Payroll Payable\"\n        ):\n            if frappe.db.sql(\n                \"\"\"select name from `tabGL Entry` where account = %s\"\"\", self.name\n            ):\n                frappe.msgprint(\n                    _(\n                        \"Warning: Account Type has been changed from Receivable to {0}. This may cause issues in the Accounts Receivable report.\".format(\n                            self.account_type\n                        )\n                    ),\n                    title=_(\"Warning\"),\n                    indicator=\"orange\",\n                )\n                self.add_comment(\n                    \"Account Type\",\n                    _(\n                        \"Account Type has been changed from Receivable to {0}\".format(\n                            self.account_type\n                        )\n                    ),\n                )\n        elif (\n            old_account_type == \"Payable\"\n            and self.account_type != \"Receivable\"\n            and self.account_type != \"Payable\"\n            and self.account_type != \"Payroll Payable\"\n        ):\n            if frappe.db.sql(\n                \"\"\"select name from `tabGL Entry` where account = %s\"\"\", self.name\n            ):\n                frappe.msgprint(\n                    _(\n                        \"Warning: Account Type has been changed from Payable to {0}. This may cause issues in the Accounts Payable report.\".format(\n                            self.account_type\n                        )\n                    ),\n                    title=_(\"Warning\"),\n                    indicator=\"orange\",\n                )\n                self.add_comment(\n                    \"Account Type\",\n                    _(\n                        \"Account Type has been changed from Payable to {0}\".format(\n                            self.account_type\n                        )\n                    ),\n                )", "CodeBleu_score": 30.16515668116625}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n    if self.account_currency and not self.account_currency_explicitly_set:\n        self.account_currency_explicitly_set = 1\n    if not self.account_currency:\n        if self.company:\n            self.account_currency = erpnext.get_company_currency(self.company)\n        else:\n            self.account_currency = frappe.db.get_single_value(\"Global Defaults\", \"default_currency\")\n\n    if self.account_currency != self.account_currency_explicitly_set:\n        throw(_(\"You must specify an account currency explicitly.\"))\n\n    if self.account_currency != frappe.db.get_value(\"Account\", self.name, \"account_currency\"):\n        if frappe.db.sql(\"\"\"select name from `tabGL Entry` where account=%s and docstatus<2\"\"\", self.name):\n            throw(_(\"Cannot change account currency because ledger entries exist. You can reset account currency by deleting all ledger entries against this account.\"))\n        else:\n            self.account_currency_explicitly_set = 1\n\n", "CodeBleu_score": 34.63455428775125}, {"code": "def validate_account_currency(self)\n\t\n    if self.currency:\n        self.currency = erpnext.get_default_currency()\n    else:\n        self.currency = erpnext.get_default_currency()\n\n", "CodeBleu_score": 7.835168134995701}, {"code": "def validate_account_currency(self)\n\t\n    if not self.parent_account and not self.ignore_account_currency_validation:\n        if not self.account_currency:\n            self.account_currency = erpnext.get_company_currency(self.company)\n        self.account_currency_explicitly_specified = 1\n\n        if self.currency_strictly_for_accounting:\n            self.account_currency = self.company_currency\n\n        if self.currency_strictly_for_accounting and self.account_currency != self.company_currency:\n            frappe.throw(_(\"Account Currency must be same as Company Currency as 'Currency Strictly For Accounting' is checked\"))\n\n        if self.is_new():\n            self.check_if_account_currency_is_set_to_company_currency()\n        else:\n            self.check_if_account_currency_is_changed()\n\n", "CodeBleu_score": 30.038368597632157}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    aggregated_entries = {}\n    for entry in entries:\n        key = generate_key(entry, accounting_dimensions)\n        if key not in aggregated_entries:\n            aggregated_entries[key] = frappe._dict({\n                'debit': 0,\n                'credit': 0,\n                'debit_in_account_currency': 0,\n                'credit_in_account_currency': 0,\n                'account_currency': entry.account_currency,\n                'account_type': entry.account_type,\n                'account': entry.account,\n                'party_type': entry.party_type,\n                'party': entry.party,\n                'is_opening': entry.is_opening,\n                'is_closing': entry.is_closing,\n                'accounting_dimensions': entry.accounting_dimensions,\n            })\n        aggregated_entries[key].debit += entry.debit\n        aggregated_entries[key].credit += entry.credit\n        aggregated_entries[key].debit_in_account_currency += entry.debit_in_account_currency\n        aggregated_entries[key].credit_in_account_currency += entry.credit_in_account_currency\n    return aggregated_entries\n\n", "CodeBleu_score": 30.460927756257757}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n\n    # Initialize a dictionary to merge entries\n    aggregated_entries = {}\n\n    # Iterate through each entry\n    for entry in entries:\n        # Generate a unique key for each entry based on accounting dimensions\n        key = generate_unique_key(entry, accounting_dimensions)\n\n        # Initialize the dictionary with the key if it does not exist\n        if key not in aggregated_entries:\n            aggregated_entries[key] = {\n                \"debit\": 0.0,\n                \"credit\": 0.0,\n                \"debit_in_account_currency\": 0.0,\n                \"credit_in_account_currency\": 0.0,\n            }\n\n        # Update the debit and credit amounts\n        aggregated_entries[key][\"debit\"] += entry.debit\n        aggregated_entries[key][\"credit\"] += entry.credit\n        aggregated_entries[key][\"debit_in_account_currency\"] += entry.debit_in_account_currency\n        aggregated_entries[key][\"credit_in_account_currency\"] += entry.credit_in_account_currency\n\n    # Return the dictionary containing the aggregated entries\n    return aggregated_entries\n\n", "CodeBleu_score": 37.55810940963896}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    aggregated_entries = {}\n    for entry in entries:\n        entry_key = generate_aggregation_key(entry, accounting_dimensions)\n        if entry_key not in aggregated_entries:\n            aggregated_entries[entry_key] = {\n                \"debit\": entry.debit,\n                \"credit\": entry.credit,\n                \"debit_in_account_currency\": entry.debit_in_account_currency,\n                \"credit_in_account_currency\": entry.credit_in_account_currency,\n            }\n        else:\n            aggregated_entries[entry_key][\"debit\"] += entry.debit\n            aggregated_entries[entry_key][\"credit\"] += entry.credit\n            aggregated_entries[entry_key][\"debit_in_account_currency\"] += entry.debit_in_account_currency\n            aggregated_entries[entry_key][\"credit_in_account_currency\"] += entry.credit_in_account_currency\n    return aggregated_entries\n\n", "CodeBleu_score": 32.95747038142885}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype in (\"Purchase Invoice\", \"Purchase Receipt\", \"Purchase Order\"):\n        supplier_status = frappe.db.get_value(\n            \"Supplier\", self.supplier, \"on_hold\", cache=True\n        )\n        release_date = frappe.db.get_value(\n            \"Supplier\", self.supplier, \"release_date\", cache=True\n        )\n        if supplier_status == 1 and getdate(release_date) > getdate(nowdate()):\n            frappe.throw(\n                _(\n                    \"Supplier {0} is on hold till {1}. Transaction cannot proceed\"\n                ).format(self.supplier, release_date)\n            )\n\n", "CodeBleu_score": 27.73252397359296}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype in (\"Payment Entry\", \"Purchase Invoice\"):\n        supplier_type = \"Supplier\"\n    elif self.doctype in (\"Sales Invoice\", \"Journal Entry\"):\n        supplier_type = \"Customer\"\n    else:\n        return\n\n    supplier = frappe.db.get_value(\n        supplier_type, self.get(supplier_type.lower()), [\"on_hold\", \"hold_type\", \"release_date\"]\n    )\n    if supplier and supplier[0]:\n        if supplier[1] == self.doctype:\n            if getdate(nowdate()) < getdate(supplier[2]):\n                frappe.throw(\n                    _(\"{0} {1} is on hold till {2}\").format(supplier_type, self.get(supplier_type.lower()), supplier[2])\n                )\n        else:\n            frappe.throw(\n                _(\"{0} {1} is on hold and the hold type does not match the transaction type.\").format(\n                    supplier_type, self.get(supplier_type.lower())\n                )\n            )\n\n", "CodeBleu_score": 28.489077569650778}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype in [\"Purchase Invoice\", \"Payment Entry\"]:\n        if self.doctype == \"Purchase Invoice\":\n            supplier_type = \"Supplier\"\n        else:\n            supplier_type = \"Payee\"\n        supplier = self.get(supplier_type)\n        supplier_status = frappe.db.get_value(\n            \"Supplier\", supplier, \"on_hold\", cache=True\n        )\n        if supplier_status:\n            hold_type = frappe.db.get_value(\"Supplier\", supplier, \"hold_type\")\n            release_date = frappe.db.get_value(\"Supplier\", supplier, \"release_date\")\n            if release_date:\n                if getdate(release_date) < getdate(nowdate()):\n                    frappe.throw(\n                        _(\n                            \"Supplier {0} is on hold. Transaction cannot proceed.\"\n                        ).format(supplier)\n                    )\n            else:\n                frappe.throw(\n                    _(\"Supplier {0} is on hold. Transaction cannot proceed.\").format(\n                        supplier\n                    )\n                )\n\n", "CodeBleu_score": 35.6272072953595}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    if self.docstatus == 2:\n        repost_doctypes = frappe.get_all(\n            \"Repost Item Valuation\",\n            filters={\"voucher_type\": self.doctype},\n            fields=[\"name\", \"parent_doctype\", \"parent_field\"],\n        )\n        repost_doctypes = {\n            x.name: {\"parent_doctype\": x.parent_doctype, \"parent_field\": x.parent_field}\n            for x in repost_doctypes\n        }\n        if repost_doctypes:\n            filters = [\n                (x, \"voucher_type\", \"=\", self.doctype),\n                (x, \"voucher_no\", \"=\", self.name),\n            ]\n            for doctype, filter in filters:\n                rows = frappe.get_all(\n                    doctype,\n                    filters=filter,\n                    fields=[\"name\", \"parent\", \"parenttype\", \"parentfield\"],\n                )\n                rows_by_parent = defaultdict(list)\n                for row in rows:\n                    rows_by_parent[row.parenttype].append(row)\n                for parenttype, rows in rows_by_parent.items():\n                    parent = frappe.get_doc(parenttype, rows[0].parent)\n                    parent.flags.ignore_validate_update_after_submit = True\n                    parent.flags.ignore_links = True\n                    if parenttype in repost_doctypes:\n                        parent.set(\n                            repost_doctypes[parenttype][\"parent_field\"],\n                            [x for x in parent.get(repost_doctypes[parenttype][\"parent_field\"]) if x.get(\"voucher_type\") != self.doctype or x.get(\"voucher_no\") != self.name],\n                        )\n                    else:\n                        parent.set(\n                            \"repost_vouchers\",\n                            [x for x in parent.get(\"repost_vouchers\") if x.get(\"voucher_type\") != self.", "CodeBleu_score": 28.42884651760405}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    if self.docstatus == 2:\n        repost_doctypes = frappe.get_all(\n            \"Repost Item Valuation\",\n            filters={\"voucher_type\": self.doctype},\n            fields=[\"parent\", \"parenttype\"],\n        )\n        if repost_doctypes:\n            repost_doctypes_map = defaultdict(list)\n            for doctype in repost_doctypes:\n                repost_doctypes_map[doctype.parenttype].append(doctype.parent)\n\n            for parenttype, parents in repost_doctypes_map.items():\n                parent_doctype = frappe.get_meta(parenttype)\n                parent_names = \", \".join([f'\"{parent}\"' for parent in parents])\n                filters = {\n                    parent_doctype.get_link_field(self.doctype): self.name,\n                    \"docstatus\": 1,\n                }\n                parent_rows = frappe.db.sql(\n                    f\"\"\"\n                        SELECT\n                            name,\n                            {parent_doctype.get_link_field(self.doctype)} AS voucher_no,\n                            {parent_doctype.get_link_field(self.doctype)} AS voucher_type\n                        FROM `tab{parenttype}`\n                        WHERE {parent_doctype.get_link_field(self.doctype)} IN ({parent_names})\n                        AND docstatus = 1\n                    \"\"\",\n                    filters,\n                    as_dict=1,\n                )\n                for parent_row in parent_rows:\n                    parent = frappe.get_doc(parenttype, parent_row.name)\n                    if parenttype == \"Stock Reconciliation\":\n                        parent.vouchers = [\n                            row\n                            for row in parent.vouchers\n                            if row.voucher_no != self.name\n                        ]\n                    else:\n                        parent.repost_vouchers = [\n                            row\n                            for row in parent", "CodeBleu_score": 26.2313503524775}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = frappe.get_all(\n        \"Repost Item Valuation\",\n        filters={\n            \"voucher_type\": self.doctype,\n            \"repost_on_cancel\": 1,\n            \"repost_on_delete\": 1,\n        },\n        fields=[\"parent\", \"parenttype\"],\n    )\n    if not repost_doctypes:\n        return\n    repost_map = defaultdict(lambda: defaultdict(list))\n    for row in repost_doctypes:\n        repost_map[row.parenttype][row.parent].append(row.name)\n    for parenttype, parent_map in repost_map.items():\n        for parent, rows in parent_map.items():\n            parent_doc = frappe.get_doc(parenttype, parent)\n            if parenttype == \"Stock Reconciliation\":\n                parent_doc.set(\"repost_vouchers\", [])\n                for row in rows:\n                    parent_doc.append(\"repost_vouchers\", {\"voucher_type\": self.doctype, \"voucher_no\": self.name})\n            elif parenttype == \"Item Valuation\":\n                parent_doc.set(\"vouchers\", [])\n                for row in rows:\n                    parent_doc.append(\"vouchers\", {\"voucher_type\": self.doctype, \"voucher_no\": self.name})\n            parent_doc.flags.ignore_validate = True\n            parent_doc.flags.ignore_links = True\n            parent_doc.save()\n\n", "CodeBleu_score": 27.191952386812595}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n\n    # Authenticate the client\n    client = self.get_plaid_client()\n\n    # Construct the query parameters\n    access_token = self.get_access_token()\n    options = {\n        \"access_token\": access_token,\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n    }\n    if account_id:\n        options[\"account_ids\"] = [account_id]\n\n    # Fetch the transactions\n    transactions = []\n    total_transactions = 0\n    try:\n        response = client.Transactions.get(options)\n        transactions = response[\"transactions\"]\n        total_transactions = response[\"total_transactions\"]\n    except (APIError, InvalidRequestError, ItemError) as e:\n        frappe.log_error(message=frappe.get_traceback(), title=e.__class__)\n        raise e\n    except Exception:\n        frappe.log_error(\n            message=frappe.get_traceback(),\n            title=_(\"Unhandled exception in Plaid Transactions\"),\n        )\n        raise\n\n    # Continue fetching if the number of transactions is less than the total\n    while len(transactions) < total_transactions:\n        try:\n            response = client.Transactions.get(\n                {\n                    \"access_token\": access_token,\n                    \"start_date\": start_date,\n                    \"end_date\": end_date,\n                    \"options\": {\"count\": 200, \"offset\": len(transactions)},\n                }\n            )\n            transactions += response[\"transactions\"]\n        except (APIError, InvalidRequestError, ItemError) as e:\n            frappe.log_error(message=frappe.get_traceback(), title=e.__class__)\n            raise e\n        except Exception:\n            frappe.log_error(\n                message=frappe.get_traceback(),\n                title=_(\"Unhandled exception in Plaid Transactions\"),\n            )\n            raise\n\n    return transactions\n\n", "CodeBleu_score": 39.028985960361695}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n\n    # Authenticate the client\n    try:\n        client = self.get_client()\n    except Exception as e:\n        frappe.log_error(title=_('Plaid API Error'), message=frappe.get_traceback())\n        raise e\n\n    # Construct the query parameters\n    try:\n        options = {\n            'start_date': start_date,\n            'end_date': end_date,\n        }\n        if account_id:\n            options['account_ids'] = [account_id]\n        else:\n            options['options'] = {'count': 250}\n    except Exception as e:\n        frappe.log_error(title=_('Plaid API Error'), message=frappe.get_traceback())\n        raise e\n\n    # Fetch the transactions\n    try:\n        response = client.Transactions.get(self.access_token, **options)\n        transactions = response['transactions']\n        total_transactions = response['total_transactions']\n    except APIError as e:\n        frappe.log_error(title=_('Plaid API Error'), message=frappe.get_traceback())\n        raise e\n    except InvalidRequestError as e:\n        frappe.log_error(title=_('Plaid API Error'), message=frappe.get_traceback())\n        raise e\n    except ItemError as e:\n        frappe.log_error(title=_('Plaid API Error'), message=frappe.get_traceback())\n        raise e\n    except Exception as e:\n        frappe.log_error(title=_('Plaid API Error'), message=frappe.get_traceback())\n        raise e\n\n    # Continue fetching if the number of transactions retrieved is less than the total\n    while len(transactions) < total_transactions:\n        try:\n            response = client.Transactions.get(self.access_token, **options)\n            transactions.extend(response['transactions'])\n            options['options'] = {'count': 250, 'offset': len(transactions)}\n        except APIError as e:\n            frappe.log_error", "CodeBleu_score": 38.10611393601684}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        client = get_client(self)\n        access_token = get_access_token(self)\n        transactions = []\n        total_transactions = 1\n        offset = 0\n        while len(transactions) < total_transactions:\n            try:\n                response = client.Transactions.get(\n                    access_token, start_date, end_date, account_ids=account_id, count=100, offset=offset\n                )\n                transactions.extend(response[\"transactions\"])\n                total_transactions = response[\"total_transactions\"]\n                offset += 100\n            except InvalidRequestError as e:\n                frappe.throw(_(f\"Plaid: {e.message}\"))\n            except APIError as e:\n                frappe.throw(_(f\"Plaid: {e.message}\"))\n            except Exception as e:\n                frappe.log_error(\n                    title=\"Plaid Transactions Error\",\n                    message=frappe.get_traceback()\n                )\n                frappe.throw(_(\"There was an error retrieving your transactions. Please try again.\"))\n        return transactions\n    except Exception as e:\n        frappe.log_error(\n            title=\"Plaid Transactions Error\",\n            message=frappe.get_traceback()\n        )\n        frappe.throw(_(\"There was an error retrieving your transactions. Please try again.\"))\n\n", "CodeBleu_score": 34.740474800746284}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    try:\n        institution_id = response.get(\"institution_id\")\n        institution_name = response.get(\"institution_name\")\n        access_token = PlaidConnector().get_access_token(token)\n        if frappe.db.exists(\"Bank\", {\"plaid_institution_id\": institution_id}):\n            bank = frappe.get_doc(\"Bank\", {\"plaid_institution_id\": institution_id})\n            bank.update({\"plaid_access_token\": access_token})\n            bank.save()\n        else:\n            bank = frappe.new_doc(\"Bank\")\n            bank.update(\n                {\n                    \"plaid_institution_id\": institution_id,\n                    \"bank_name\": institution_name,\n                    \"plaid_access_token\": access_token,\n                }\n            )\n            bank.insert()\n    except Exception as e:\n        frappe.log_error(title=_(\"Plaid Error\"), message=frappe.get_traceback())\n\n", "CodeBleu_score": 42.9061185352925}, {"code": "def add_institution(token, response)\n\t\n\n    institution = response[\"institution\"]\n    access_token = PlaidConnector().get_access_token(token)\n    bank = frappe.db.get(\"Bank\", {\"name\": institution[\"institution_id\"]})\n\n    if not bank:\n        try:\n            bank = frappe.get_doc({\n                \"doctype\": \"Bank\",\n                \"name\": institution[\"institution_id\"],\n                \"bank_name\": institution[\"name\"],\n                \"access_token\": access_token,\n                \"country_code\": institution[\"country_codes\"][0],\n                \"primary_color\": institution[\"primary_color\"],\n                \"url\": institution[\"url\"],\n                \"logo\": institution[\"logo\"],\n                \"is_plaid_supported\": True\n            })\n            bank.insert()\n        except Exception as e:\n            frappe.log_error(message=frappe.get_traceback(), title=f\"Plaid Error: {e}\")\n    else:\n        try:\n            bank.access_token = access_token\n            bank.save()\n        except Exception as e:\n            frappe.log_error(message=frappe.get_traceback(), title=f\"Plaid Error: {e}\")\n\n", "CodeBleu_score": 36.09701754408845}, {"code": "def add_institution(token, response)\n\t\n    try:\n        institution = response[\"institution\"]\n        access_token = PlaidConnector().get_access_token(token)\n        if not frappe.db.exists(\n            \"Bank\", {\"plaid_institution_id\": institution[\"institution_id\"]}\n        ):\n            bank = frappe.new_doc(\"Bank\")\n            bank.update(\n                {\n                    \"plaid_institution_id\": institution[\"institution_id\"],\n                    \"plaid_institution_name\": institution[\"name\"],\n                    \"plaid_access_token\": access_token,\n                }\n            )\n            bank.insert()\n            frappe.db.commit()\n        else:\n            bank = frappe.get_doc(\n                \"Bank\", {\"plaid_institution_id\": institution[\"institution_id\"]}\n            )\n            bank.update({\"plaid_access_token\": access_token})\n            bank.save()\n            frappe.db.commit()\n    except Exception as e:\n        frappe.log_error(frappe.get_traceback(), \"Plaid Integration\")\n        frappe.throw(\n            _(\"Something went wrong while adding the bank. Please try again.\")\n        )\n\n", "CodeBleu_score": 38.73024521322168}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n    plaid_settings = frappe.get_doc(\"Plaid Settings\")\n    plaid_connector = PlaidConnector(plaid_settings.client_id, plaid_settings.secret)\n\n    # Determine the start and end dates for the transaction retrieval.\n    # If the bank account has not been integrated before, use the current date as the start date.\n    # Otherwise, use the last integration date as the start date.\n    # The end date is the current date.\n    if not bank_account.last_integration_date:\n        start_date = today()\n    else:\n        start_date = bank_account.last_integration_date\n    end_date = today()\n\n    # Attempt to fetch the transactions.\n    try:\n        transactions = plaid_connector.get_transactions(\n            bank.access_token, start_date, end_date\n        )\n    except ItemError as e:\n        frappe.log_error(\n            f\"Error fetching transactions for bank account {bank_account.name}: {e}\",\n            \"Plaid Integration\",\n        )\n        return\n\n    # Process the transactions into new bank transactions.\n    new_transactions = 0\n    for transaction in transactions:\n        # Check if the transaction already exists in the system.\n        # If it does, skip it.\n        if frappe.db.exists(\n            \"Bank Transaction\",\n            {\n                \"transaction_id\": transaction.transaction_id,\n                \"bank_account\": bank_account.name,\n            },\n        ):\n            continue\n\n        # Create a new bank transaction for the transaction.\n        bank_transaction = frappe.new_doc(\"Bank Transaction\")\n        bank_transaction.transaction_id = transaction.transaction_id\n        bank_transaction.transaction_date = transaction.date\n        bank_transaction.description = transaction.name\n        bank_transaction.amount = transaction.amount\n        bank_transaction.bank_account = bank_account.name\n        bank_transaction.save()\n\n        # If the transaction has a category, add the category tag to the bank transaction.\n        if transaction.category:\n            add_tag(\n                \"B", "CodeBleu_score": 27.55755164473845}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    last_integration_date = get_last_integration_date(bank, bank_account)\n    start_date = last_integration_date or add_months(today(), -1)\n    end_date = today()\n    try:\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n    except ItemError as e:\n        frappe.log_error(e.message, \"Plaid Transactions Sync\")\n        return\n    except Exception as e:\n        frappe.log_error(e, \"Plaid Transactions Sync\")\n        return\n    new_transactions = 0\n    for transaction in transactions:\n        if not frappe.db.exists(\"Bank Transaction\", {\"transaction_id\": transaction.transaction_id}):\n            new_transactions += 1\n            create_bank_transaction(transaction, bank, bank_account)\n    if new_transactions:\n        update_last_integration_date(bank, bank_account, transactions[0].date)\n    frappe.msgprint(_(\"{0} new transactions added\").format(new_transactions))\n\n", "CodeBleu_score": 27.591264505012603}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    bank_name = bank.get(\"bank_name\")\n    bank_account_name = bank_account.get(\"bank_account_name\")\n    last_integration_date = bank_account.get(\"last_integration_date\")\n    start_date = last_integration_date or add_months(today(), -1)\n    end_date = today()\n    try:\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n        if transactions:\n            transactions = process_transactions(bank, bank_account, transactions)\n            last_integration_date = min(\n                [getdate(transaction.get(\"transaction_date\")) for transaction in transactions]\n            )\n            bank_account.set(\"last_integration_date\", last_integration_date)\n            bank_account.save()\n            frappe.db.commit()\n            frappe.msgprint(\n                _(\"{0} transactions added from {1} to {2}.\").format(\n                    len(transactions), bank_name, bank_account_name\n                )\n            )\n    except Exception as e:\n        frappe.msgprint(\n            _(\"Error syncing transactions from {0} to {1}: {2}\").format(\n                bank_name, bank_account_name, e\n            )\n        )\n\n", "CodeBleu_score": 37.106382765321285}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    if not self.quickbooks_company_id:\n        frappe.throw(_(\"Please set the QuickBooks Company ID in the Integration Settings.\"))\n\n    if not self.quickbooks_access_token:\n        frappe.throw(_(\"Please set the QuickBooks Access Token in the Integration Settings.\"))\n\n    if not self.quickbooks_realm_id:\n        frappe.throw(_(\"Please set the QuickBooks Realm ID in the Integration Settings.\"))\n\n    if not self.quickbooks_base_url:\n        frappe.throw(_(\"Please set the QuickBooks Base URL in the Integration Settings.\"))\n\n    if not self.quickbooks_consumer_key:\n        frappe.throw(_(\"Please set the QuickBooks Consumer Key in the Integration Settings.\"))\n\n    if not self.quickbooks_consumer_secret:\n        frappe.throw(_(\"Please set the QuickBooks Consumer Secret in the Integration Settings.\"))\n\n    if not self.quickbooks_start_date:\n        frappe.throw(_(\"Please set the QuickBooks Start Date in the Integration Settings.\"))\n\n    if not self.quickbooks_end_date:\n        frappe.throw(_(\"Please set the QuickBooks End Date in the Integration Settings.\"))\n\n    if not self.quickbooks_start_date < self.quickbooks_end_date:\n        frappe.throw(_(\"The QuickBooks Start Date must be less than the QuickBooks End Date.\"))\n\n    if not self.quickbooks_start_date >= self.quickbooks_start_date_override:\n        frappe.throw(_(\"The QuickBooks Start Date Override must be less than the QuickBooks Start Date.\"))\n\n    if not self.quickbooks_end_date <= self.quickbooks_end_date_override:\n        frappe.throw(_(\"The QuickBooks End Date Override must be greater than the QuickBooks End Date.\"))\n\n    if not self.quickbooks_start_date_override < self.quickbooks_end_date_override:\n        frappe.throw(_(\"The QuickBooks Start Date Override must be less than the QuickBooks End Date Override.\"", "CodeBleu_score": 11.961427442927224}, {"code": "def _migrate_entries(self, entity)\n\t\n\n    # Construct the query URI\n    url = f\"https://sandbox-quickbooks.api.intuit.com/v3/company/{self.realm_id}/query?query=select * from {entity} maxresults 1\"\n\n    # Get the total number of entries\n    response = requests.get(url, headers=self.auth_headers)\n    total = int(response.json()[\"QueryResponse\"][\"totalCount\"])\n\n    # Get the entries in batches of 1000\n    for start in range(0, total, 1000):\n        url = f\"https://sandbox-quickbooks.api.intuit.com/v3/company/{self.realm_id}/query?query=select * from {entity} startposition {start} maxresults 1000\"\n        response = requests.get(url, headers=self.auth_headers)\n\n        # Preprocess and save the entries\n        try:\n            entries = response.json()[\"QueryResponse\"][f\"{entity}\"]\n            for entry in entries:\n                self._preprocess_and_save(entry, entity)\n        except Exception:\n            frappe.log_error(\n                title=f\"QuickBooks Migration Error\",\n                message=f\"{traceback.format_exc()}\n", "CodeBleu_score": 29.079898297856943}, {"code": "def _migrate_entries(self, entity)\n\t\n    # Construct the query URI\n    query = f'select * from {entity}'\n    uri = f'{self.qb_base_url}/v3/company/{self.realm_id}/query?query={query}'\n\n    # Get the total number of entries\n    response = self.get(uri)\n    total = response.get('totalCount')\n    if total:\n        # Get the entries in batches of 1000\n        for offset in range(0, total, 1000):\n            uri = f'{self.qb_base_url}/v3/company/{self.realm_id}/query?query={query}&minorversion=59&page=1&minorversion=59&startposition={offset}&maxresults=1000'\n            response = self.get(uri)\n            if response.get('QueryResponse'):\n                # Preprocess and save the entries\n                for entry in response['QueryResponse'][entity]:\n                    self.preprocess_entry(entry)\n                    self.save_entry(entry)\n\n", "CodeBleu_score": 23.19818476379284}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    if invoice.get(\"Id\"):\n        qb_id = invoice[\"Id\"]\n    else:\n        qb_id = frappe.generate_hash(length=15)\n    if invoice[\"Line\"]:\n        line = invoice[\"Line\"][0]\n    else:\n        line = {}\n    if line.get(\"DetailType\") == \"ItemBasedExpenseLineDetail\":\n        if line.get(\"ItemBasedExpenseLineDetail\"):\n            if line[\"ItemBasedExpenseLineDetail\"].get(\"ItemRef\"):\n                if line[\"ItemBasedExpenseLineDetail\"][\"ItemRef\"].get(\"value\"):\n                    item = line[\"ItemBasedExpenseLineDetail\"][\"ItemRef\"][\"value\"]\n                    if item == \"Reimbursement\":\n                        invoice[\"Type\"] = \"JournalEntry\"\n                        invoice[\"Line\"][0][\"DetailType\"] = \"JournalEntryLineDetail\"\n                        invoice[\"Line\"][0][\"JournalEntryLineDetail\"] = {\n                            \"PostingType\": \"Debit\",\n                            \"AccountRef\": {\n                                \"value\": self.get_account_id(\n                                    self.get_account_name(\n                                        \"Reimbursement\", invoice[\"CustomerRef\"][\"value\"]\n                                    )\n                                )\n                            },\n                        }\n                        invoice[\"Line\"][0][\"Amount\"] = line[\"Amount\"]\n                        invoice[\"Line\"][0][\"Description\"] = line[\"Description\"]\n                        invoice[\"Line\"][0][\"Id\"] = line[\"Id\"]\n                        invoice[\"Line\"][0][\"LineNum\"] = line[\"LineNum\"]\n                        invoice[\"Line\"][0][\"LinkedTxn\"] = line[\"LinkedTxn\"]\n                        invoice[\"Line\"][0][\"JournalEntryLineDetail\"][\n                            \"TaxCodeRef\"\n                        ] = line[\"ItemBasedExpenseLineDetail\"][\"TaxCodeRef\"]\n                        invoice[\"Line\"][0][\"JournalEntryLineDetail\"][\n                            \"BillableStatus\"\n                        ]", "CodeBleu_score": 28.81689315210322}, {"code": "def _save_invoice(self, invoice)\n\t\n\n    # Save the invoice as a journal entry if it has a linked transaction of type \"StatementCharge\" or \"ReimburseCharge\"\n    statement_charge = False\n    reimburse_charge = False\n    for line in invoice.get(\"Line\", []):\n        if line.get(\"LinkedTxn\"):\n            for linked_txn in line.get(\"LinkedTxn\"):\n                if linked_txn.get(\"TxnType\") == \"StatementCharge\":\n                    statement_charge = True\n                if linked_txn.get(\"TxnType\") == \"ReimburseCharge\":\n                    reimburse_charge = True\n\n    if statement_charge or reimburse_charge:\n        self.save_journal_entry(invoice)\n    else:\n        self.save_sales_invoice(invoice)\n\n", "CodeBleu_score": 27.84932922728344}, {"code": "def _save_invoice(self, invoice)\n\t\n    if invoice['InvoiceType'] == 'StatementCharge':\n        invoice_type = 'Journal Entry'\n    elif invoice['InvoiceType'] == 'ReimburseCharge':\n        invoice_type = 'Journal Entry'\n    else:\n        invoice_type = 'Sales Invoice'\n\n    invoice_id = self.get_quickbooks_id(invoice['Id'])\n    if invoice_id:\n        self.update_invoice(invoice_id, invoice_type, invoice)\n    else:\n        self.create_invoice(invoice_type, invoice)\n\n", "CodeBleu_score": 33.18631275923434}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    # get the holiday list for the salesperson\n    holiday_list = get_holiday_list_for_employee(sales_person)\n\n    # calculate the number of days between each visit\n    days_between_visits = date_diff(end_date, start_date) / (no_of_visit + 1)\n\n    # create a list of dates for each visit\n    visit_dates = []\n    for i in range(1, no_of_visit + 1):\n        visit_date = add_days(start_date, days_between_visits * i)\n        visit_dates.append(visit_date)\n\n    # adjust the dates to avoid holidays\n    adjusted_visit_dates = []\n    for visit_date in visit_dates:\n        while visit_date in holiday_list:\n            visit_date = add_days(visit_date, 1)\n        adjusted_visit_dates.append(visit_date)\n\n    return adjusted_visit_dates\n\n", "CodeBleu_score": 23.01802790473924}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    # Set up the date variables\n    start_date = getdate(start_date)\n    end_date = getdate(end_date)\n    interval = date_diff(end_date, start_date) / no_of_visit\n\n    # Get the holiday list for the salesperson\n    holiday_list = get_holiday_list_for_employee(sales_person)\n\n    # Create a list of dates to iterate over\n    date_list = [start_date]\n    for i in range(no_of_visit):\n        date_list.append(add_days(start_date, (i + 1) * interval))\n\n    # Create a list of dates to iterate over, skipping weekends\n    schedule_list = []\n    for date in date_list:\n        if date.weekday() < 5:\n            schedule_list.append(date)\n\n    # Adjust dates to avoid holidays\n    for i in range(len(schedule_list)):\n        if schedule_list[i] in holiday_list:\n            schedule_list[i] = add_days(schedule_list[i], 1)\n\n    return schedule_list\n\n", "CodeBleu_score": 35.35775438984014}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    if not start_date or not end_date or not no_of_visit:\n        return\n    if not sales_person:\n        sales_person = frappe.get_value(\"Sales Person\", {\"is_default\": 1})\n    if not sales_person:\n        throw(_(\"Please set a default Sales Person in Sales Settings\"))\n    sales_person = frappe.get_doc(\"Sales Person\", sales_person)\n    if not sales_person.holiday_list:\n        throw(_(\"Please set a Holiday List in the Sales Person master\"))\n    sales_person_holiday_list = sales_person.holiday_list\n\n    if no_of_visit == 1:\n        return [start_date]\n\n    interval = date_diff(end_date, start_date) / (no_of_visit - 1)\n    interval = cint(interval)\n    if interval == 0:\n        return [start_date]\n\n    date = start_date\n    schedule_list = [date]\n    for i in range(1, no_of_visit):\n        date = add_days(date, interval)\n        while date in sales_person_holiday_list:\n            date = add_days(date, 1)\n        schedule_list.append(date)\n\n    return schedule_list\n\n", "CodeBleu_score": 35.45747234069899}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t        $response = [];\n\n        if (request()->ajax()) {\n            $response = $this->ajaxResponse($view, $data);\n        } else {\n            $response = $this->htmlResponse($view, $data);\n        }\n\n        return response()->json($response);\n    }", "CodeBleu_score": 16.67764888205109}, {"code": "<?\n   public function response($view, $data = []){\n\t        $request = request();\n\n        $data = array_merge($data, [\n            'url' => $request->url(),\n            'method' => $request->method(),\n            'title' => $data['title'] ?? null,\n            'path' => $data['path'] ?? null,\n            'handle' => $data['handle'] ?? null,\n        ]);\n\n        if ($request->expectsJson()) {\n            return response()->json(array_merge($data, [\n                'success' => true,\n                'message' => $data['message'] ?? null,\n            ]));\n        }\n\n        $data['html'] = view($view, $data)->render();\n\n        return response()->json(array_merge($data, [\n            'success' => true,\n            'message' => $data['message'] ?? null,\n        ]));\n    }", "CodeBleu_score": 41.97489795815762}, {"code": "<?\n   public function response($view, $data = []){\n\t    $request = request();\n    $method = $request->getMethod();\n    $message = $request->get('message');\n    $status = $request->get('status');\n    $title = $request->get('title');\n    $path = $request->get('path');\n    $handle = $request->get('handle');\n    $html = $request->get('html');\n    $data = $request->get('data');\n    $url = $request->get('url');\n    $bulk_url = $request->get('bulk_url');\n\n    if ($request->isMethod('post') && !$request->ajax()) {\n        if (empty($status)) {\n            $status = 'success';\n        }\n\n        if (empty($message)) {\n            $message = trans('messages.success');\n        }\n\n        if (empty($title)) {\n            $title = trans('messages.success');\n        }\n\n        if (empty($html)) {\n            $html = view($view, $data)->render();\n        }\n\n        if (empty($data)) {\n            $data = [];\n        }\n\n        if (empty($url)) {\n            $url = url()->previous();\n        }\n\n        if (empty($bulk_url)) {\n            $bulk_url = url()->previous();\n        }\n\n        return redirect($url)->with('status', $status)->with('message', $message)->with('title', $title)->with('path', $path)->with('handle', $handle)->with('html', $html)->with('data', $data)->with('url', $url)->with('bulk_url', $bulk_url);\n    } else {\n        if (empty($status)) {\n            $status = 'success';\n        }\n\n        if (empty($message)) {\n            $message = trans('messages.success');\n        }\n\n        if (empty($title)) {\n            $title = trans('messages.success');\n        }\n\n        if (empty($html)) {\n            $html = view($view, $data)->render();\n        }\n\n        if (empty($data)) {\n            $data = [];\n        }\n", "CodeBleu_score": 33.38219654650905}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t    $contacts = $request->get('contacts', []);\n\n    foreach ($contacts as $contact) {\n        try {\n            Bus::chain([\n                new DeleteContact($contact),\n                new DeleteTransaction($contact->transaction),\n            ])->dispatch();\n        } catch (Throwable $e) {\n            flash($e->getMessage())->error();\n        }\n    }\n}", "CodeBleu_score": 60.005042019910434}, {"code": "<?\npublic function deleteContacts($request){\n\t    // Get the selected contacts\n    $contacts = $request->get('contacts', []);\n\n    // If there are no contacts selected, display an error message\n    if (empty($contacts)) {\n        return redirect()->back()->with('error', trans('messages.error.no_contacts'));\n    }\n\n    // For each contact, attempt to dispatch a delete operation\n    foreach ($contacts as $contact_id) {\n        try {\n            Bus::chain([\n                new DeleteContact($contact_id),\n                new DeleteTransaction($contact_id, 'contact'),\n            ])->dispatch();\n        } catch (Throwable $e) {\n            // Display an error message\n            return redirect()->back()->with('error', $e->getMessage());\n        }\n    }\n\n    // Display a success message\n    return redirect()->back()->with('success', trans_choice('messages.success.contacts_deleted', count($contacts), ['count' => count($contacts)]));\n}", "CodeBleu_score": 44.778334731027606}, {"code": "<?\npublic function deleteContacts($request){\n\t\n    // Get the selected contacts\n    $contacts = $request->input('contacts');\n\n    // Attempt to delete each contact\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (Throwable $e) {\n            // Display error message\n            flash($e->getMessage())->error();\n        }\n    }\n\n}", "CodeBleu_score": 62.420906887442385}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t\n    $transactions = Transaction::find($request->input('transactions'));\n\n    foreach ($transactions as $transaction) {\n        try {\n            dispatch(new DeleteTransaction($transaction))->onQueue('high');\n        } catch (Throwable $e) {\n            flash($e->getMessage())->error();\n        }\n    }\n}", "CodeBleu_score": 60.775318781178065}, {"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = Transaction::find($request->input('transactions'));\n\n    foreach ($transactions as $transaction) {\n        try {\n            $this->dispatch(new DeleteTransaction($transaction));\n        } catch (Throwable $e) {\n            flash($e->getMessage(), 'error');\n        }\n    }\n}", "CodeBleu_score": 64.98408186417404}, {"code": "<?\npublic function deleteTransactions($request){\n\t\n    // Get the selected transactions\n    $transactions = $request->transactions;\n\n    // Loop through each transaction\n    foreach ($transactions as $transaction) {\n\n        // Dispatch a job to delete the transaction\n        try {\n            Bus::chain([\n                new DeleteTransaction($transaction),\n                new DeleteTransaction($transaction, true)\n            ])->dispatch();\n        } catch (Throwable $e) {\n\n            // Flash error message\n            flash($e->getMessage())->error();\n        }\n    }\n}", "CodeBleu_score": 45.90260496831201}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t    if (! $this->request instanceof FormRequest) {\n        return;\n    }\n\n    $this->request->validator = $validator;\n\n    $this->request->prepareValidationRules();\n\n    try {\n        $this->request->validateResolved();\n    } catch (ValidationException $e) {\n        $this->failures = $this->failures->merge($e->validator->failures());\n\n        $this->throwValidationException($this->getReader()->getActiveSheet()->getTitle(), $e);\n    }\n}", "CodeBleu_score": 29.340708021759156}, {"code": "<?\npublic function withValidator($validator){\n\t    $validator->after(function ($validator) {\n        $this->prepareForValidation();\n\n        $request = $this->getImportRequest();\n\n        if (!$request instanceof FormRequest) {\n            return;\n        }\n\n        $this->rules = $request->container->call([$request, 'rules']);\n\n        $this->customAttributes = $request->attributes();\n\n        $rules = $this->rules();\n\n        $this->prepareRules($rules);\n\n        $this->addRules($rules);\n\n        try {\n            $this->validateResolved();\n        } catch (ValidationException $e) {\n            $this->addValidationFailures($e->validator);\n\n            throw $e;\n        }\n    });\n}", "CodeBleu_score": 41.23761228942885}, {"code": "<?\npublic function withValidator($validator){\n\t    $validator->after(function ($validator) {\n        $this->prepareForValidation();\n\n        $this->validate($validator);\n    });\n}", "CodeBleu_score": 13.518959297332836}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if ($this instanceof ShouldUpdate) {\n        if (isset($arguments[0]) && $arguments[0] instanceof Model) {\n            $this->setModel($arguments[0]);\n        }\n        if (isset($arguments[1]) && $arguments[1] instanceof Request) {\n            $this->setRequest($arguments[1]);\n        }\n    }\n}", "CodeBleu_score": 33.96140458743068}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    $this->bootUpdateFromModel($arguments[0] ?? null);\n    $this->bootUpdateFromRequest($arguments[1] ?? null);\n}", "CodeBleu_score": 13.581618472882573}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if ($this instanceof ShouldUpdate) {\n        if (isset($arguments[0]) && $arguments[0] instanceof Model) {\n            $this->setModel($arguments[0]);\n        }\n        if (isset($arguments[1]) && $arguments[1] instanceof Request) {\n            $this->setRequest($arguments[1]);\n        }\n    }\n}", "CodeBleu_score": 33.96140458743068}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    $request = request();\n\n    $limit = $request->get('limit', setting('default.list_limit', '25'));\n\n    $query = $query->when($sort, function ($query, $sort) {\n        return $query->orderBy($sort);\n    });\n\n    return $request->expectsJson() && !$request->is('api/*') ? $query->get() : $query->paginate($limit);\n}", "CodeBleu_score": 53.112429997621916}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    $request = request();\n    $limit = $request->get('limit', setting('default.list_limit', '25'));\n    $sort = $request->get('sort', $sort);\n    $order = $request->get('order', 'asc');\n\n    $query = $query->with(['company', 'status', 'category', 'parent', 'contact', 'assigned', 'recurring', 'transactions', 'documents', 'expenses', 'invoices', 'payments', 'quotes', 'bills', 'credits', 'deals', 'projects', 'tasks', 'leads', 'purchases', 'vendors', 'sources', 'activities', 'comments', 'notes', 'events', 'files', 'tags']);\n\n    // Apply search query\n    if ($request->filled('search')) {\n        $query->search($request->get('search'));\n    }\n\n    // Apply sort order\n    if ($request->filled('sort')) {\n        $query->orderBy($sort, $order);\n    }\n\n    // Check if request is an API call\n    if ($request->expectsJson() && !$request->is('api/*')) {\n        return $query->get();\n    }\n\n    // Paginate results\n    return $query->paginate($limit);\n}", "CodeBleu_score": 53.12622268874999}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    $request = request();\n\n    // Check if the request expects JSON\n    $expects_json = $request->expectsJson();\n\n    // Check if the request is an API request\n    $is_api = $request->is('api*');\n\n    // Check if the request is a search string\n    $search_string = $request->input('search');\n\n    // Check if the request is for a specific id\n    $id = $request->input('id');\n\n    // Check if the request is for a specific number\n    $number = $request->input('number');\n\n    // Check if the request is for a specific status\n    $status = $request->input('status');\n\n    // Check if the request is for a specific number\n    $paid = $request->input('paid');\n\n    // Check if the request is for a specific number\n    $amount = $request->input('amount');\n\n    // Check if the request is for a specific number\n    $contact_id = $request->input('contact_id');\n\n    // Check if the request is for a specific number\n    $vendor_id = $request->input('vendor_id');\n\n    // Check if the request is for a specific number\n    $category_id = $request->input('category_id');\n\n    // Check if the request is for a specific number\n    $currency_code = $request->input('currency_code');\n\n    // Check if the request is for a specific number\n    $start_date = $request->input('start_date');\n\n    // Check if the request is for a specific number\n    $end_date = $request->input('end_date');\n\n    // Check if the request is for a specific number\n    $expense_id = $request->input('expense_id');\n\n    // Check if the request is for a specific number\n    $bill_id = $request->input('bill_id');\n\n    // Check if the request is for a specific number\n    $invoice_id = $request->input('invoice_id');\n\n    // Check if the request is for a specific number\n    $payment_id = $request->input('payment_id');\n\n    // Check", "CodeBleu_score": 38.96366020932419}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t    // Initialize amounts\n    $open = 0;\n    $overdue = 0;\n\n    // Check if the document is paid\n    if ($model->status == 'paid') {\n        return [\n            'open' => $open,\n            'overdue' => $overdue\n        ];\n    }\n\n    // Check if the document is partially paid\n    if ($model->status == 'partial') {\n        foreach ($model->transactions as $transaction) {\n            $open += $transaction->amount;\n        }\n    }\n\n    // Check if the document is open or overdue\n    if ($model->status == 'open') {\n        $open += $model->amount;\n    }\n\n    if ($model->status == 'overdue') {\n        $overdue += $model->amount;\n    }\n\n    return [\n        'open' => $open,\n        'overdue' => $overdue\n    ];\n}", "CodeBleu_score": 46.467405730705856}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\n    $open = $overdue = 0;\n\n    if ($model->status == 'paid') {\n        return [0, 0];\n    }\n\n    if ($model->status == 'partial') {\n        $open = $model->transactions->sum('amount');\n    } else {\n        $open = $model->amount;\n    }\n\n    if (Date::parse($model->due_at)->isPast()) {\n        $overdue = $open;\n        $open = 0;\n    }\n\n    return [$open, $overdue];\n}", "CodeBleu_score": 47.451729883569946}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $open = 0;\n    $overdue = 0;\n\n    if ($model->status == 'paid') {\n        return [$open, $overdue];\n    }\n\n    $now = Date::now();\n\n    if ($model->status == 'partial') {\n        $open = $model->transactions()->where('type', 'income')->where('reconciled', 0)->sum('amount');\n    } else {\n        $open = $model->amount;\n    }\n\n    if ($model->due_at < $now) {\n        $overdue = $open;\n        $open = 0;\n    }\n\n    return [$open, $overdue];\n}", "CodeBleu_score": 55.7925407731305}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $results = ($total = $this->toBase()->getCountForPagination()) ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 92.3658227905632}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\n    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $results = ($total = $this->toBase()->getCountForPagination())\n        ? $this->forPage($page, $perPage)->get($columns)\n        : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 93.0700488512937}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $results = ($total = $this->toBase()->getCountForPagination()) ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 92.3658227905632}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t\n    $reconciliations = $this->getSelectedRecords($request);\n\n    foreach ($reconciliations as $reconciliation) {\n        $this->reconcileReconciliation($reconciliation);\n    }\n\n    return true;\n}", "CodeBleu_score": 28.46210729984978}, {"code": "<?\npublic function reconcile($request){\n\t    $reconciliations = Reconciliation::find($request->get('selected'));\n\n    foreach ($reconciliations as $reconciliation) {\n        $reconciliation->status = 'reconciled';\n        $reconciliation->save();\n\n        Transaction::where('account_id', $reconciliation->account_id)->where('reconciled', 0)->whereBetween('transactions.date', [$reconciliation->started_at, $reconciliation->ended_at])->update(['transactions.reconciled' => 1]);\n    }\n}", "CodeBleu_score": 40.372254127855825}, {"code": "<?\npublic function reconcile($request){\n\t    $reconciliations = $this->getReconciliations($request);\n\n    foreach ($reconciliations as $reconciliation) {\n        $this->reconcileReconciliation($reconciliation);\n    }\n}", "CodeBleu_score": 24.476889760115668}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t    $user = $this->user;\n    $invitations = UserInvitation::where('user_id', $user->id)->get();\n    $invitations->each(function($invitation) {\n        $invitation->delete();\n    });\n    $token = Str::random(60);\n    $invitation = UserInvitation::create([\n        'user_id' => $user->id,\n        'token' => $token,\n    ]);\n    try {\n        $user->notify(new Notification($invitation));\n    } catch (TransportException $e) {\n        throw new Exception('Unable to send invitation email. Please try again later.');\n    }\n    return $invitation;\n}", "CodeBleu_score": 39.64564311404926}, {"code": "<?\npublic function handle(): UserInvitation{\n\t    try {\n        // Begin a database transaction\n        DB::beginTransaction();\n\n        // Retrieve existing invitations for the user\n        $invitations = UserInvitation::where('email', $this->email)->get();\n\n        // Delete existing invitations\n        foreach ($invitations as $invitation) {\n            $invitation->delete();\n        }\n\n        // Create a new invitation\n        $invitation = UserInvitation::create([\n            'email' => $this->email,\n            'token' => Str::random(32),\n        ]);\n\n        // Attempt to dispatch a notification job\n        try {\n            Notification::dispatch($invitation);\n        } catch (TransportException $e) {\n            throw new Exception('Failed to send invitation email.');\n        }\n\n        // Commit the database transaction\n        DB::commit();\n\n        return $invitation;\n    } catch (Exception $e) {\n        // Rollback the database transaction\n        DB::rollBack();\n\n        // Throw the exception\n        throw $e;\n    }\n}", "CodeBleu_score": 43.64166603111727}, {"code": "<?\npublic function handle(): UserInvitation{\n\t    try {\n        $this->beginDatabaseTransaction();\n\n        $this->deleteExistingInvitations();\n\n        $invitation = $this->createInvitation();\n\n        $this->dispatchNotification($invitation);\n\n        $this->commitDatabaseTransaction();\n\n        return $invitation;\n    } catch (TransportException $e) {\n        $this->rollbackDatabaseTransaction();\n\n        throw new Exception('Unable to send invitation email: ' . $e->getMessage());\n    } catch (Exception $e) {\n        $this->rollbackDatabaseTransaction();\n\n        throw new Exception('Unable to create invitation: ' . $e->getMessage());\n    }\n}", "CodeBleu_score": 25.846075090480568}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\t    if ($this->transaction->reconciled) {\n        throw new \\Exception(trans('messages.warning.reconciled', ['name' => $this->transaction->name]));\n    }\n\n    if ($this->transaction->type == 'transfer') {\n        throw new \\Exception(trans('messages.error.unauthorized', ['name' => $this->transaction->name]));\n    }\n}", "CodeBleu_score": 29.162818330148323}, {"code": "<?\npublic function authorize(): void{\n\t    if ($this->transaction->reconciled) {\n        throw new Exception(trans('messages.warning.reconciled', ['name' => $this->transaction->name]));\n    }\n\n    if ($this->transaction->type == 'transfer') {\n        throw new Exception(trans('messages.error.unauthorized'));\n    }\n}", "CodeBleu_score": 30.25533708277336}, {"code": "<?\npublic function authorize(): void{\n\t    if ($this->transaction->reconciled) {\n        throw new Exception(trans('messages.warning.reconciled', ['type' => $this->transaction->type]));\n    }\n\n    if ($this->transaction->transfer) {\n        throw new Exception(trans('messages.error.unauthorized', ['type' => $this->transaction->type]));\n    }\n}", "CodeBleu_score": 26.815385481992493}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t    //TODO\n    //if (tableName.equals(\"user\") || tableName.equals(\"sequence\") || tableName.equals(\"tenant\")) {\n    //    return true;\n    //}\n    //return false;\n    return true;\n}", "CodeBleu_score": 1.8407229388270632}, {"code": "public boolean doTableFilter(String tableName){\n\t    List<String> tableList = new ArrayList<>();\n    tableList.add(\"material\");\n    tableList.add(\"material_category\");\n    tableList.add(\"serial_number\");\n    tableList.add(\"basicdata\");\n    tableList.add(\"basicdata_detail\");\n    tableList.add(\"basicdata_type\");\n    tableList.add(\"unit\");\n    tableList.add(\"depot\");\n    tableList.add(\"depot_head\");\n    tableList.add(\"depot_item\");\n    tableList.add(\"account\");\n    tableList.add(\"account_head\");\n    tableList.add(\"account_item\");\n    tableList.add(\"supplier\");\n    tableList.add(\"supplier_type\");\n    tableList.add(\"organ\");\n    tableList.add(\"organ_user\");\n    tableList.add(\"user\");\n    tableList.add(\"user_business\");\n    tableList.add(\"role\");\n    tableList.add(\"role_permission\");\n    tableList.add(\"permission\");\n    tableList.add(\"app\");\n    tableList.add(\"app_role\");\n    tableList.add(\"app_user\");\n    tableList.add(\"app_version\");\n    tableList.add(\"depot_head_id\");\n    tableList.add(\"depot_item_id\");\n    tableList.add(\"account_head_id\");\n    tableList.add(\"account_item_id\");\n    tableList.add(\"serial_number_id\");\n    tableList.add(\"basicdata_id\");\n    tableList.add(\"basicdata_detail_id\");\n    tableList.add(\"basicdata_type_id\");\n    tableList.add(\"material_id\");\n    tableList.add(\"material_category_id\");\n    tableList.add(\"unit_id\");\n    tableList.add(\"depot_id\");\n    tableList.add(\"supplier_id\");\n    tableList.add(\"supplier_type_id\");\n    tableList.add(\"organ_id\");\n    tableList.add(\"organ_user_id\");\n    tableList.add(\"user_id\");\n    tableList.add(\"user_business_id", "CodeBleu_score": 12.940591777690159}, {"code": "public boolean doTableFilter(String tableName){\n\t    List<String> tableList = new ArrayList<>();\n    tableList.add(\"user\");\n    tableList.add(\"sequence\");\n    tableList.add(\"function\");\n    tableList.add(\"role\");\n    tableList.add(\"user_business\");\n    tableList.add(\"depot\");\n    tableList.add(\"depot_item\");\n    tableList.add(\"basicdata\");\n    tableList.add(\"basicdata_item\");\n    tableList.add(\"material_property\");\n    tableList.add(\"material_property_item\");\n    tableList.add(\"serial_number\");\n    tableList.add(\"serial_number_item\");\n    tableList.add(\"unit\");\n    tableList.add(\"unit_item\");\n    tableList.add(\"material_category\");\n    tableList.add(\"material_category_item\");\n    tableList.add(\"supplier\");\n    tableList.add(\"supplier_item\");\n    tableList.add(\"supplier_type\");\n    tableList.add(\"supplier_type_item\");\n    tableList.add(\"material\");\n    tableList.add(\"material_item\");\n    tableList.add(\"material_extended_property\");\n    tableList.add(\"material_extended_property_item\");\n    tableList.add(\"material_extended_property_field\");\n    tableList.add(\"material_extended_property_field_item\");\n    tableList.add(\"material_extended_property_value\");\n    tableList.add(\"material_extended_property_value_item\");\n    tableList.add(\"depot_head\");\n    tableList.add(\"depot_head_item\");\n    tableList.add(\"depot_head_approval\");\n    tableList.add(\"depot_head_approval_item\");\n    tableList.add(\"depot_item_approval\");\n    tableList.add(\"depot_item_approval_item\");\n    tableList.add(\"material_inventory\");\n    tableList.add(\"material_inventory_item\");\n    tableList.add(\"material_inventory_approval\");\n    tableList.add(\"material_inventory_approval_item\");\n    table", "CodeBleu_score": 12.958447868707951}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 64.03882826107017}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 64.03882826107017}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 64.03882826107017}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    String res = null;\n    List<AccountVo4List> dataList = accountService.findBySelect();\n    //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n    JSONArray dataArray = new JSONArray();\n    if (null != dataList) {\n        for (AccountVo4List account : dataList) {\n            JSONObject item = new JSONObject();\n            item.put(\"id\", account.getId());\n            //\u7ed3\u7b97\u8d26\u6237\n            item.put(\"accountId\", account.getAccountId());\n            item.put(\"accountName\", account.getAccountName());\n            item.put(\"accountNumber\", account.getAccountNumber());\n            item.put(\"accountType\", account.getAccountType());\n            item.put(\"accountTypeName\", account.getAccountTypeName());\n            item.put(\"accountState\", account.getAccountState());\n            item.put(\"accountStateName\", account.getAccountStateName());\n            item.put(\"isDefault\", account.getIsDefault());\n            item.put(\"remark\", account.getRemark());\n            item.put(\"isDefaultName\", account.getIsDefaultName());\n            item.put(\"isDefaultTip\", account.getIsDefaultTip());\n            item.put(\"serialNo\", account.getSerialNo());\n            item.put(\"acountMoney\", account.getAcountMoney());\n            item.put(\"acountMoneyForFifteen\", account.getAcountMoneyForFifteen());\n            item.put(\"acountMoneyForThirty\", account.getAcountMoneyForThirty());\n            item.put(\"acountMoneyForSixty\", account.getAcountMoneyForSixty());\n            item.put(\"acountMoneyForNinety\", account.getAcountMoneyForNinety());\n            item.put(\"acountMoneyForMore\", account.getAcountMoneyForMore());\n            item.put(\"acountMoneyForLess\", account.getAcountMoneyForLess());\n            item.put(\"acountMoneyForAll\", account.getAcountMoneyForAll());\n            dataArray.add(item);\n        }\n    }\n    res = dataArray.toJSONString", "CodeBleu_score": 57.08138425737559}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    String res = null;\n    List<Account> dataList = accountService.findBySelect();\n    //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n    JSONArray dataArray = new JSONArray();\n    if (null != dataList) {\n        for (Account account : dataList) {\n            JSONObject item = new JSONObject();\n            item.put(\"id\", account.getId());\n            //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n            item.put(\"accountName\", account.getName());\n            dataArray.add(item);\n        }\n    }\n    res = dataArray.toJSONString();\n    return res;\n}", "CodeBleu_score": 76.565724699382}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    String res = null;\n    List<Account> dataList = accountService.findBySelect();\n    //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n    JSONArray dataArray = new JSONArray();\n    if (null != dataList) {\n        for (Account account : dataList) {\n            JSONObject item = new JSONObject();\n            item.put(\"id\", account.getId());\n            //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n            item.put(\"name\", account.getName());\n            dataArray.add(item);\n        }\n    }\n    res = dataArray.toJSONString();\n    return res;\n}", "CodeBleu_score": 76.23626974180635}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        Map<String, Object> map = new HashMap<String, Object>();\n        try {\n            List<AccountVo4List> dataList = accountService.findAccountWithBalance(name, serialNo, (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.findAccountWithBalanceCount(name, serialNo);\n            map.put(\"rows\", dataList);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            e.printStackTrace();\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 63.17951773133741}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        Map<String, Object> map = new HashMap<String, Object>();\n        try {\n            List<AccountVo4List> dataList = accountService.findAccountWithBalance(name, serialNo, currentPage, pageSize);\n            Integer count = accountService.findAccountWithBalanceCount(name, serialNo);\n            map.put(\"rows\", dataList);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            e.printStackTrace();\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 60.168039947498606}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        Map<String, Object> map = new HashMap<String, Object>();\n        try {\n            List<AccountVo4List> dataList = accountService.findBySelect(name, serialNo);\n            if (null != dataList) {\n                //\u83b7\u53d6\u603b\u8bb0\u5f55\u6570\n                Integer dataCount = accountService.findBySelectCount(name, serialNo);\n                //\u8fd4\u56de\u7ed3\u679c\n                map.put(\"rows\", dataList);\n                map.put(\"total\", dataCount);\n            }\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            e.printStackTrace();\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 54.99933634979573}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    Map<String, Object> map = new HashMap<String, Object>();\n    try {\n        List<Account> dataList = accountService.getAccount(name, serialNo);\n        String depotHeadStr = JSONArray.toJSONString(dataList);\n        map.put(\"accountList\", depotHeadStr);\n        res.code = 200;\n        res.data = map;\n    } catch(Exception e){\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 65.24552818447408}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    Map<String, Object> map = new HashMap<String, Object>();\n    try {\n        List<Account> dataList = accountService.getStatistics(name, serialNo);\n        String beginTime = request.getParameter(\"beginTime\");\n        String endTime = request.getParameter(\"endTime\");\n        BigDecimal allPrice = accountService.findAllPrice(name, serialNo, beginTime, endTime);\n        map.put(\"accountList\", dataList);\n        map.put(\"allPrice\", allPrice);\n        res.code = 200;\n        res.data = map;\n    } catch(Exception e){\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 60.5022785445517}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<AccountVo4List> dataList = accountService.getAccount(name, serialNo);\n        String listStr = JSONArray.toJSONString(dataList);\n        res.code = 200;\n        res.data = listStr;\n        List<AccountVo4InOutList> dataListInOut = accountService.getAccountInOutList(name, serialNo);\n        String listStrInOut = JSONArray.toJSONString(dataListInOut);\n        res.dataInOut = listStrInOut;\n    } catch(Exception e){\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 57.79650101711851}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        Map<String, Object> map = new HashMap<String, Object>();\n        try {\n            List<AccountHeadVo4ListEx> dataList = accountHeadService.getDetailByNumber(billNo);\n            String orderId = accountHeadService.getIdByBillNo(billNo);\n            map.put(\"orderId\", orderId);\n            if (null != dataList) {\n                map.put(\"state\", \"0\");\n                map.put(\"rows\", dataList);\n            } else {\n                map.put(\"state\", \"1\");\n                map.put(\"msg\", \"\u5355\u636e\u4e0d\u5b58\u5728\");\n            }\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            e.printStackTrace();\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 55.373616676888425}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            List<AccountHeadVo4ListEx> dataList = accountHeadService.getDetailByNumber(billNo);\n            res.code = 200;\n            res.data = dataList;\n        } catch(Exception e){\n            e.printStackTrace();\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 55.526652192741224}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            List<AccountHead> dataList = accountHeadService.getDetailByNumber(billNo);\n            res.code = 200;\n            res.data = dataList;\n        } catch(Exception e){\n            e.printStackTrace();\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 54.52396209986845}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<Depot> dataList = new ArrayList<Depot>();\n        String loginName = jshService.getLoginUser(request).getLoginName();\n        List<Long> depotList = new ArrayList<>();\n        UserBusinessService userBusinessService = (UserBusinessService) SpringContextUtil.getBean(\"userBusinessService\");\n        List<UserBusiness> list = userBusinessService.findUserBusinessListByTypeAndName(BusinessConstants.DEPOT_BUSINESS_TYPE, loginName);\n        if(list.size() > 0) {\n            for(UserBusiness ub : list) {\n                depotList.add(ub.getKeyId());\n            }\n        }\n        if(depotList.size() > 0) {\n            dataList = depotService.findByIds(depotList);\n        }\n        if(dataList.size() > 0) {\n            res.code = 200;\n            res.data = dataList;\n        } else {\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n    } catch(Exception e){\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 49.03046981410778}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<Depot> dataList = new ArrayList<Depot>();\n        String loginName = request.getParameter(\"loginName\");\n        if (StringUtil.isEmpty(loginName)) {\n            loginName = request.getSession().getAttribute(\"loginName\").toString();\n        }\n        List<Long> depotIds = new ArrayList<Long>();\n        //\u5224\u65ad\u662f\u5426\u662f\u7ba1\u7406\u5458\uff0c\u5982\u679c\u662f\u7ba1\u7406\u5458\uff0c\u5219\u663e\u793a\u6240\u6709\u4ed3\u5e93\n        if (loginName.equals(\"admin\")) {\n            depotIds = depotService.findDepotIds();\n        } else {\n            //\u67e5\u8be2\u5f53\u524d\u7528\u6237\u6240\u62e5\u6709\u7684\u4ed3\u5e93\u6743\u9650\n            List<String> depotNames = userBusinessService.findDepotNamesByUserId(Long.parseLong(request.getParameter(\"userId\")));\n            for (String depotName : depotNames) {\n                Depot depot = depotService.findDepotByName(depotName);\n                if (depot != null) {\n                    depotIds.add(depot.getId());\n                }\n            }\n        }\n        //\u67e5\u8be2\u5f53\u524d\u7528\u6237\u6240\u62e5\u6709\u7684\u4ed3\u5e93\u6743\u9650\n        List<Depot> list = depotService.findDepotByDepotIds(depotIds);\n        if (list != null) {\n            for (Depot depot : list) {\n                if (depot.getName().equals(\"\u4ed3\u5e93\")) {\n                    dataList.add(depot);\n                }\n            }\n        }\n        res.code = 200;\n        res.data = dataList;\n    } catch(Exception e){\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 47.896528883232534}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<Depot> dataList = new ArrayList<Depot>();\n        String loginName = request.getParameter(\"loginName\");\n        List<Depot> depotList = depotService.findDepotByUserId(getUserId(request));\n        if (depotList != null) {\n            for (Depot depot : depotList) {\n                if (depot.getName().equals(loginName)) {\n                    dataList.add(depot);\n                }\n            }\n        }\n        res.code = 200;\n        res.data = dataList;\n    } catch(Exception e){\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 52.91352917694425}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray arr = new JSONArray();\n    try {\n        List<Function> dataList = new ArrayList<>();\n        if((\"User\").equals(type)){\n            dataList = functionService.findRoleFunctionByUserId(Long.parseLong(keyId));\n        } else if((\"Role\").equals(type)){\n            dataList = functionService.findRoleFunctionByRoleId(Long.parseLong(keyId));\n        }\n        JSONObject outer = new JSONObject();\n        outer.put(\"id\", 0);\n        outer.put(\"text\", \"\u7cfb\u7edf\u7ba1\u7406\");\n        outer.put(\"state\", \"open\");\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Function function : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"id\", function.getId());\n                item.put(\"text\", function.getName());\n                //\u52fe\u9009\u5224\u65ad1\n                Boolean flag = false;\n                try {\n                    flag = userBusinessService.checkIsUserBusinessExist(type, keyId, \"[\" + function.getId().toString() + \"]\");\n                } catch (Exception e) {\n                    logger.error(\">>>>>>>>>>>>>>>>>\u8bbe\u7f6e\u89d2\u8272\u5bf9\u5e94\u7684\u529f\u80fd\uff1a\u7c7b\u578b\" + type + \" KeyId\u4e3a\uff1a \" + keyId + \" \u5b58\u5728\u5f02\u5e38\uff01\");\n                }\n                if (flag == true) {\n                    item.put(\"checked\", true);\n                }\n                //\u7ed3\u675f\n                dataArray.add(item);\n            }\n        }\n        outer.put(\"children\", dataArray);\n        arr.add(outer);\n    } catch (Exception e) {\n        e.printStackTrace();\n        logger.error(\">>>>>>>>>>>>>>>>>\u8bbe\u7f6e\u89d2\u8272\u5bf9\u5e94\u7684\u529f\u80fd\uff1a\u7c7b\u578b\" + type + \" KeyId\u4e3a\uff1a \" + keyId + \" \u5b58\u5728\u5f02\u5e38\uff01\");\n    }\n    return arr;\n}", "CodeBleu_score": 56.7301018054964}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray arr = new JSONArray();\n    try {\n        List<Function> dataList = functionService.findRoleFunction(type, keyId);\n        JSONObject outer = new JSONObject();\n        outer.put(\"id\", 0);\n        outer.put(\"text\", \"\u529f\u80fd\u5217\u8868\");\n        outer.put(\"state\", \"open\");\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Function function : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"id\", function.getId());\n                item.put(\"text\", function.getName());\n                //\u52fe\u9009\u5224\u65ad1\n                Boolean flag = false;\n                try {\n                    flag = userBusinessService.checkIsUserBusinessExist(type, keyId, \"[\" + function.getId().toString() + \"]\");\n                } catch (DataAccessException e) {\n                    logger.error(\">>>>>>>>>>>>>>>>>\u67e5\u8be2\u529f\u80fd\uff1a\" + function.getId() + \"\u662f\u5426\u5df2\u7ecf\u5b58\u5728\u4e8e\u89d2\u8272\u529f\u80fd\u5217\u8868\uff1a\" + e.getMessage());\n                }\n                if (flag == true) {\n                    item.put(\"checked\", true);\n                }\n                //\u7ed3\u675f\n                dataArray.add(item);\n            }\n        }\n        outer.put(\"children\", dataArray);\n        arr.add(outer);\n    } catch (Exception e) {\n        e.printStackTrace();\n        logger.error(\">>>>>>>>>>>>>>>>>\u67e5\u627e\u529f\u80fd\u5f02\u5e38\", e);\n    }\n    return arr;\n}", "CodeBleu_score": 57.136957299567484}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray arr = new JSONArray();\n    try {\n        List<Function> dataList = functionService.findRoleFunction(type, keyId);\n        //\u68c0\u67e5\u662f\u5426\u662f\u6f14\u793a\u7248\u672c\n        if(isDemo(request)){\n            List<Function> dataListNew = new ArrayList<Function>();\n            for(Function f:dataList){\n                if(f.getId()!=118 && f.getId()!=119 && f.getId()!=120 && f.getId()!=121 && f.getId()!=122 && f.getId()!=123 && f.getId()!=124 && f.getId()!=125 && f.getId()!=126 && f.getId()!=127 && f.getId()!=128 && f.getId()!=129 && f.getId()!=130 && f.getId()!=131 && f.getId()!=132 && f.getId()!=133 && f.getId()!=134 && f.getId()!=135 && f.getId()!=136 && f.getId()!=137 && f.getId()!=138 && f.getId()!=139 && f.getId()!=140 && f.getId()!=141 && f.getId()!=142 && f.getId()!=143 && f.getId()!=144 && f.getId()!=145 && f.getId()!=146 && f.getId()!=147 && f.getId()!=148 && f.getId()!=149 && f.getId()!=150 && f.getId()!=151 && f.getId()!=152 && f.getId()!=153 && f.getId()!=154 && f.getId()!=155 && f.getId()!=156 && f.getId()!=157 && f.getId()!=158 && f.getId()!=159 && f.getId", "CodeBleu_score": 26.29700451314612}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t        logger.info(\"\u5f00\u59cb\u8fdb\u884c\u5e73\u53f0\u914d\u7f6e\u4fe1\u606f\u7684\u67e5\u8be2\");\n        Map<String, Object> objectMap = new HashMap<String, Object>();\n        try {\n            objectMap = platformConfigService.getInfoByKey(platformKey);\n            logger.info(\"\u5e73\u53f0\u914d\u7f6e\u4fe1\u606f\u7684\u67e5\u8be2\u6210\u529f\");\n            return returnJson(objectMap, ErpInfo.OK.name, ErpInfo.OK.code);\n        } catch (Exception e) {\n            e.printStackTrace();\n            logger.error(\"\u5e73\u53f0\u914d\u7f6e\u4fe1\u606f\u7684\u67e5\u8be2\u5931\u8d25\" + e.getMessage());\n            return returnJson(null, ErpInfo.ERROR.name, ErpInfo.ERROR.code);\n        }\n    }", "CodeBleu_score": 36.25955014625507}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        Map<String, Object> map = new HashMap<String, Object>();\n        map.put(\"platformKey\", platformKey);\n        PlatformConfig platformConfig = platformConfigService.getPlatformConfig(map);\n        if(platformConfig!=null) {\n            res.code = 200;\n            res.data = platformConfig;\n        } else {\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u5931\u8d25\";\n        }\n    } catch(Exception e){\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 58.83661760402178}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t        String res = null;\n        Map<String, Object> map = new HashMap<String, Object>();\n        try {\n            User userInfo = userService.getCurrentUser();\n            map.put(\"userInfo\", userInfo);\n            if (userInfo != null) {\n                String platformValue = platformConfigService.getPlatformValueByKey(platformKey);\n                map.put(\"platformValue\", platformValue);\n                res = JSONObject.toJSONString(new BaseResponseInfo(200, \"success\", map));\n            } else {\n                res = JSONObject.toJSONString(new BaseResponseInfo(500, \"\u7528\u6237\u672a\u767b\u5f55\", map));\n            }\n        } catch(Exception e){\n            e.printStackTrace();\n            res = JSONObject.toJSONString(new BaseResponseInfo(500, \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\", map));\n        }\n        return new BaseResponseInfo(200, \"success\", map);\n    }", "CodeBleu_score": 30.450585170573607}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<SystemConfig> dataList = ((SystemConfigService) SpringContextUtils.getBean(\"systemConfigService\")).getSystemConfig();\n        if (dataList.size() > 0) {\n            res.code = 200;\n            res.data = dataList.get(0);\n        } else {\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u5931\u8d25\";\n        }\n    } catch(Exception e){\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 57.98212020411384}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<SystemConfig> dataList = systemConfigService.getSystemConfig();\n        if (dataList.size() > 0) {\n            res.code = 200;\n            res.data = dataList.get(0);\n        } else {\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u5931\u8d25\";\n        }\n    } catch(Exception e){\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 67.86983701493068}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        UserService userService = (UserService) SpringContextUtil.getBean(\"userService\");\n        UserBusinessService userBusinessService = (UserBusinessService) SpringContextUtil.getBean(\"userBusinessService\");\n        List<SystemConfig> dataList = userBusinessService.getBasicData(BaseContextHandler.getUser().getId());\n        if(dataList.size()>0) {\n            res.code = 200;\n            res.data = dataList.get(0);\n        } else {\n            res.code = 200;\n            res.data = userService.getSystemConfig();\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 54.939703510396065}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    String path = request.getSession().getServletContext().getRealPath(\"/\");\n    String basePath = path + \"upload\";\n    String result = \"\";\n    String msgTip = \"fail\";\n    String businessPath = request.getParameter(\"businessPath\");\n    String type = request.getParameter(\"type\");\n    MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n    MultipartFile file = multipartRequest.getFile(\"file\");\n    String originalFilename = file.getOriginalFilename();\n    String fileType = originalFilename.substring(originalFilename.lastIndexOf(\".\") + 1);\n    String fileName = System.currentTimeMillis() + \".\" + fileType;\n    String filePath = \"\";\n    String fileUrl = \"\";\n    try {\n        if (type.equals(\"local\")) {\n            //\u4fdd\u5b58\u6587\u4ef6\u5230\u672c\u5730\n            filePath = basePath + \"/\" + businessPath;\n            FileUtils.createDirectory(filePath);\n            fileUrl = request.getContextPath() + \"/upload/\" + businessPath + \"/\" + fileName;\n            file.transferTo(new File(filePath + \"/\" + fileName));\n        } else if (type.equals(\"alioss\")) {\n            //\u4fdd\u5b58\u6587\u4ef6\u5230\u963f\u91cc\u4e91OSS\n            String endpoint = request.getSession().getServletContext().getInitParameter(\"endpoint\");\n            String accessKeyId = request.getSession().getServletContext().getInitParameter(\"accessKeyId\");\n            String accessKeySecret = request.getSession().getServletContext().getInitParameter(\"accessKeySecret\");\n            String bucketName = request.getSession().getServletContext().getInitParameter(\"bucketName\");\n            String url = request.getSession().getServletContext().getInitParameter(\"url\");\n            String objectName = businessPath + \"/\" + fileName;\n            fileUrl = url + \"/\" + objectName;\n            FileUtils.upload(endpoint, accessKeyId, accessKeySecret, bucketName, objectName, file.getInputStream());\n        } else {\n            //\u4fdd\u5b58\u6587\u4ef6\u5230FastDFS\n            String trackerUrl = request.getSession().getServletContext().getInitParameter(\"trackerUrl\");\n            String trackerPort", "CodeBleu_score": 30.38833484368027}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    String path = request.getSession().getServletContext().getRealPath(\"/\");\n    String basePath = path;\n    String module = request.getParameter(\"module\");\n    if(StringUtil.isNotEmpty(module)) {\n        basePath += module + \"/\";\n    }\n    String filePath = basePath + \"upload/\";\n    String fileSealPath = basePath + \"upload/seal/\";\n    String tempPath = filePath + \"temp/\";\n    String tempSealPath = fileSealPath + \"temp/\";\n    String targetFileName = \"\";\n    String targetSealFileName = \"\";\n    String type = request.getParameter(\"type\");\n    String prefix = request.getParameter(\"prefix\");\n    String name = request.getParameter(\"name\");\n    String suffix = request.getParameter(\"suffix\");\n    String object = request.getParameter(\"object\");\n    String objectSeal = request.getParameter(\"objectSeal\");\n    String depotIds = request.getParameter(\"depotIds\");\n    String isSingle = request.getParameter(\"isSingle\");\n    String isSeal = request.getParameter(\"isSeal\");\n    String isLocal = request.getParameter(\"isLocal\");\n    String isOss = request.getParameter(\"isOss\");\n    String isServer = request.getParameter(\"isServer\");\n    String isDatabase = request.getParameter(\"isDatabase\");\n    String isImg = request.getParameter(\"isImg\");\n    String isSign = request.getParameter(\"isSign\");\n    String isUpdateSupport = request.getParameter(\"isUpdateSupport\");\n    String isDelete = request.getParameter(\"isDelete\");\n    String isExpire = request.getParameter(\"isExpire\");\n    String isSize = request.getParameter(\"isSize\");\n    String size = request.getParameter(\"size\");\n    String isNet = request.getParameter(\"isNet\");\n    String isNetUrl = request.getParameter(\"isNetUrl\");\n    String isNetUrlSeal = request.getParameter(\"isNetUrlSeal\");\n    String isNetUrlOss = request.getParameter(\"isNetUrlOss\");\n    String isNetUrlOssSeal = request.getParameter(\"isNetUrl", "CodeBleu_score": 22.1626550829039}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    String path = request.getSession().getServletContext().getRealPath(\"/\");\n    String basePath = path.substring(0, path.lastIndexOf(\"/\"));\n    String filePath = basePath + \"/upload\";\n    File file = new File(filePath);\n    if (!file.exists()) {\n        file.mkdirs();\n    }\n    MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n    MultipartFile multipartFile = multipartRequest.getFile(\"file\");\n    String fileName = multipartFile.getOriginalFilename();\n    String suffix = fileName.substring(fileName.lastIndexOf(\".\") + 1);\n    String newFileName = System.currentTimeMillis() + \".\" + suffix;\n    File newFile = new File(filePath + \"/\" + newFileName);\n    try {\n        multipartFile.transferTo(newFile);\n        return new BaseResponseInfo(200, \"success\", \"/upload/\" + newFileName);\n    } catch (IOException e) {\n        return new BaseResponseInfo(500, \"error\", e.getMessage());\n    }\n}", "CodeBleu_score": 35.07724031945745}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t        try {\n            // Get the parameters from the JSON object.\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray dataArray = jsonObject.getJSONArray(\"data\");\n            // Call the export service to export the data to an Excel file.\n            byte[] bytes = exportService.exportExcel(title, head, tip, dataArray);\n            // Write the data to the HTTP response.\n            response.setContentType(\"application/octet-stream\");\n            response.setHeader(\"Content-Disposition\", \"attachment;filename=export.xls\");\n            response.setContentLength(bytes.length);\n            OutputStream outputStream = response.getOutputStream();\n            outputStream.write(bytes);\n            outputStream.flush();\n            outputStream.close();\n        } catch (Exception e) {\n            // Log the exception.\n            logger.error(e.getMessage(), e);\n            // Return an error message to the client.\n            response.setContentType(\"application/json\");\n            response.setCharacterEncoding(\"utf-8\");\n            try {\n                JSONObject error = new JSONObject();\n                error.put(\"error\", e.getMessage());\n                response.getWriter().write(error.toJSONString());\n            } catch (IOException e1) {\n                logger.error(e1.getMessage(), e1);\n            }\n        }\n    }", "CodeBleu_score": 55.690252856475894}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t        try {\n            String title = jsonObject.getString(\"title\");\n            String headStr = jsonObject.getString(\"headStr\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray dataArray = jsonObject.getJSONArray(\"data\");\n            List<String> headList = JSONArray.parseArray(headStr, String.class);\n            List<String[]> dataList = JSONArray.parseArray(dataArray.toJSONString(), String[].class);\n            String fileName = title + \"\u4fe1\u606f\u8868\";\n            response.setCharacterEncoding(\"utf-8\");\n            response.setHeader(\"content-disposition\", \"attachment;filename=\" + new String(fileName.getBytes(\"gb2312\"), \"iso-8859-1\") + \".xls\");\n            response.setContentType(\"application/msexcel;charset=UTF-8\");\n            OutputStream outputStream = response.getOutputStream();\n            ExcelUtils.exportExcel(outputStream, headList, dataList, tip);\n            outputStream.flush();\n            outputStream.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }", "CodeBleu_score": 47.80029212112444}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t        try {\n            String title = jsonObject.getString(\"title\");\n            String headStr = jsonObject.getString(\"headStr\");\n            String tip = jsonObject.getString(\"tip\");\n            List<String> headList = JSONArray.parseArray(headStr, String.class);\n            List<List<Object>> dataList = (List<List<Object>>) jsonObject.get(\"dataList\");\n            String fileName = jsonObject.getString(\"fileName\");\n            if (StringUtil.isNotEmpty(fileName)) {\n                fileName = fileName + \".xls\";\n            } else {\n                fileName = \"\u5bfc\u51fa\u6570\u636e.xls\";\n            }\n            if (dataList != null && dataList.size() > 0) {\n                ExportExcelUtils.exportExcel(response, fileName, title, headList, dataList, tip);\n            } else {\n                throw new Exception(\"\u5bfc\u51fa\u6570\u636e\u4e3a\u7a7a\uff01\");\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            try {\n                response.reset();\n                response.setContentType(\"application/json\");\n                response.setCharacterEncoding(\"utf-8\");\n                Map<String, String> map = new HashMap<>();\n                map.put(\"status\", \"0\");\n                map.put(\"msg\", e.getMessage());\n                JSONObject result = new JSONObject(map);\n                response.getWriter().append(result.toJSONString());\n            } catch (IOException e1) {\n                e1.printStackTrace();\n            }\n        }\n    }", "CodeBleu_score": 44.86669590904574}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    Account account = JSONObject.parseObject(obj.toJSONString(), Account.class);\n    //\u521d\u59cb\u5316\u503c\n    account.setIsDefault(false);\n    account.setEnabled(true);\n    account.setAdvanceIn(BigDecimal.ZERO);\n    account.setBeginBalance(BigDecimal.ZERO);\n    account.setAllBalance(BigDecimal.ZERO);\n    account.setCurrentAmount(BigDecimal.ZERO);\n    account.setIsDefault(false);\n    account.setIsChange(false);\n    account.setChangeAmount(BigDecimal.ZERO);\n    account.setChangeBalance(BigDecimal.ZERO);\n    account.setChangeBeginBalance(BigDecimal.ZERO);\n    account.setChangeAllBalance(BigDecimal.ZERO);\n    //\u83b7\u53d6\u9ed8\u8ba4\u503c\n    String initialAmount = obj.getString(\"initialAmount\");\n    if(StringUtil.isNotEmpty(initialAmount)){\n        account.setInitialAmount(new BigDecimal(initialAmount));\n    } else {\n        account.setInitialAmount(BigDecimal.ZERO);\n    }\n    //\u5224\u65ad\u662f\u5426\u6709\u521d\u59cb\u91d1\u989d\n    if(account.getInitialAmount().compareTo(BigDecimal.ZERO) > 0){\n        account.setCurrentAmount(account.getInitialAmount());\n        account.setBeginBalance(account.getInitialAmount());\n        account.setAllBalance(account.getInitialAmount());\n    }\n    //\u5224\u65ad\u662f\u5426\u6709\u521d\u59cb\u91d1\u989d\n    if(account.getInitialAmount().compareTo(BigDecimal.ZERO) > 0){\n        account.setCurrentAmount(account.getInitialAmount());\n        account.setBeginBalance(account.getInitialAmount());\n        account.setAllBalance(account.getInitialAmount());\n    }\n    //\u5224\u65ad\u662f\u5426\u6709\u521d\u59cb\u91d1\u989d\n    if(account.getInitialAmount().compareTo(BigDecimal.ZERO) > 0){\n        account.setCurrentAmount(account.getInitialAmount());\n        account.setBeginBalance(account.getInitialAmount());\n        account.setAllBal", "CodeBleu_score": 43.35682307349852}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    Account account = JSONObject.parseObject(obj.toJSONString(), Account.class);\n    account.setIsDefault(false);\n    if(account.getInitialAmount()==null){\n        account.setInitialAmount(BigDecimal.ZERO);\n    }\n    account.setStatus(true);\n    account.setCreateTime(new Date());\n    account.setUpdateTime(new Date());\n    //\u5224\u65ad\u662f\u5426\u5b58\u5728\u9ed8\u8ba4\u8d26\u6237\n    List<Account> accountList= findDefaultAccount();\n    if(accountList.size()<=0) {\n        account.setIsDefault(true);\n    }\n    int result=0;\n    try{\n        result = accountMapperEx.addAccount(account);\n    }catch(Exception e){\n        JshException.writeFail(logger, e);\n    }\n    return result;\n}", "CodeBleu_score": 62.48037581338974}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    Account account = JSONObject.parseObject(obj.toJSONString(), Account.class);\n    return insertAccount(account, request);\n}", "CodeBleu_score": 20.01542630685108}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    try {\n        return accountMapper.countWithNameAndSerialNo(name, serialNo);\n    } catch (Exception e) {\n        logger.error(\">>>>>>>>>>>>>>>>>\u67e5\u8be2\u8d26\u6237\u4fe1\u606f\u5f02\u5e38\", e);\n        return null;\n    }\n}", "CodeBleu_score": 31.098667200342234}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    Long result = null;\n    try {\n        result = accountMapperEx.countByNameAndSerialNo(name, serialNo);\n    } catch (Exception e) {\n        logger.error(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\" +\n                \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\" +\n                \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\" +\n                \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\" +\n                \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\" +\n                \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\" +\n                \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\" +\n                \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\" +\n                \">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "CodeBleu_score": 35.44180648742845}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    Long resultCount = null;\n    try {\n        resultCount = mapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        logger.error(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\" + e.getMessage());\n    }\n    return resultCount;\n}", "CodeBleu_score": 43.675693902126476}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    DepotItemMapper depotItemMapper = (DepotItemMapper) Context.getBean(\"DepotItemMapper\");\n    DepotItem depotItem = depotItemMapper.selectByPrimaryKey(id);\n    if(depotItem==null){\n        return 0;\n    }\n    //\u5220\u9664\u76f8\u5e94\u7684\u6279\u6b21\u4fe1\u606f\n    try{\n        deleteBatch(depotItem.getMaterialId(),depotItem.getDepotId(),request);\n    }catch(Exception e){\n        logger.error(\"\u5f02\u5e38\u7801[{}],\u5f02\u5e38\u63d0\u793a[{}],\u5f02\u5e38[{}]\",\n                ExceptionConstants.DELETE_DEPOTITEM_FAILED_CODE, ExceptionConstants.DELETE_DEPOTITEM_FAILED_MSG, e);\n        throw new BusinessRunTimeException(ExceptionConstants.DELETE_DEPOTITEM_FAILED_CODE,\n                ExceptionConstants.DELETE_DEPOTITEM_FAILED_MSG);\n    }\n    return depotItemMapper.deleteByPrimaryKey(id);\n}", "CodeBleu_score": 33.337760551089616}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    DepotItemMapper depotItemMapper = (DepotItemMapper) Context.getBean(\"DepotItemMapper\");\n    DepotItem depotItem = depotItemMapper.selectByPrimaryKey(id);\n    if(depotItem==null) {\n        return 0;\n    }\n    //\u5220\u9664\u5355\u636e\u660e\u7ec6\u65f6\uff0c\u5982\u679c\u662f\u4ee5\u5355\u4ef7\u6a21\u5f0f\u8fdb\u884c\u51fa\u5165\u5e93\u7684\uff0c\u5219\u5c06\u5bf9\u5e94\u7684\u6279\u6b21\u4fe1\u606f\u5220\u9664\n    if(depotItem.getPrice()!=null) {\n        DepotBatchMapper depotBatchMapper = (DepotBatchMapper) Context.getBean(\"DepotBatchMapper\");\n        DepotBatch depotBatch = new DepotBatch();\n        depotBatch.setMaterialId(depotItem.getMaterialId());\n        depotBatch.setDepotId(depotItem.getDepotId());\n        depotBatch.setBatchNumber(depotItem.getBatchNumber());\n        depotBatchMapper.deleteByDepotItem(depotBatch);\n    }\n    return depotItemMapper.deleteByPrimaryKey(id);\n}", "CodeBleu_score": 29.81018565906004}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    DepotItemMapper depotItemMapper = getDepotItemMapper();\n    int result=0;\n    try {\n        result=depotItemMapper.deleteByPrimaryKey(id);\n    } catch(Exception e) {\n        JshException.writeFail(logger, e);\n    }\n    return result;\n}", "CodeBleu_score": 65.06593698762181}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t    try (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n        HttpGet httpGet = new HttpGet(String.format(\"http://localhost:8080/api/v1/projects/%s/nodes/%s/%s\", projectName, nodeType, nodeKey));\n        try (CloseableHttpResponse response = httpClient.execute(httpGet)) {\n            HttpEntity entity = response.getEntity();\n            String json = EntityUtils.toString(entity, Charset.forName(\"UTF-8\"));\n            Map<String, Object> map = new ObjectMapper().readValue(json, Map.class);\n            return map.containsKey(nodeKey);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return false;\n}", "CodeBleu_score": 40.101950708448975}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t    boolean result = false;\n    try (CloseableHttpClient client = HttpClients.createDefault()) {\n        HttpGet request = new HttpGet(\"http://localhost:8080/\" + projectName + \"/\" + nodeType + \"/\" + nodeKey);\n        CloseableHttpResponse response = client.execute(request);\n        HttpEntity entity = response.getEntity();\n        if (entity != null) {\n            String responseString = EntityUtils.toString(entity);\n            if (responseString.contains(\"key\")) {\n                result = true;\n            }\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return result;\n}", "CodeBleu_score": 37.7273873800305}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t    String url = \"http://localhost:8080/api/project/\" + projectName + \"/nodes/\" + nodeType + \"/\" + nodeKey;\n    CloseableHttpClient httpClient = HttpClients.createDefault();\n    HttpGet httpGet = new HttpGet(url);\n    try (CloseableHttpResponse httpResponse = httpClient.execute(httpGet)) {\n        HttpEntity httpEntity = httpResponse.getEntity();\n        String response = EntityUtils.toString(httpEntity);\n        return response.contains(\"key\");\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return false;\n}", "CodeBleu_score": 35.22204110890407}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t    CloseableHttpClient httpClient = HttpClients.createDefault();\n    CloseableHttpResponse response = null;\n    try {\n        HttpHost target = new HttpHost(\"localhost\", 7474, \"http\");\n        HttpPost request = new HttpPost(\"/db/data/transaction/commit\");\n        String payload = \"{\\\"statements\\\":[{\\\"statement\\\":\\\"MATCH (n:\" + fromType + \" {\" + fromType + \"Id:'\" + from + \"'}), (m:\" + toType + \" {\" + toType + \"Id:'\" + to + \"'}) MERGE (n)-[:\" + edgeType + \"]->(m)\\\"}]}\";\n        request.addHeader(\"Content-Type\", \"application/json\");\n        StringEntity entity = new StringEntity(payload, Charset.forName(\"UTF-8\"));\n        request.setEntity(entity);\n        response = httpClient.execute(target, request);\n        HttpEntity responseEntity = response.getEntity();\n        String json = EntityUtils.toString(responseEntity);\n        ObjectMapper mapper = new ObjectMapper();\n        Map<String, Object> result = mapper.readValue(json, Map.class);\n        List<Map<String, Object>> results = (List<Map<String, Object>>) result.get(\"results\");\n        List<Map<String, Object>> data = (List<Map<String, Object>>) results.get(0).get(\"data\");\n        if (data.isEmpty()) {\n            return false;\n        }\n        Map<String, Object> row = data.get(0);\n        Map<String, Object> rest = (Map<String, Object>) row.get(\"rest\");\n        List<Object> column = (List<Object>) rest.get(\"columns\");\n        List<Object> data1 = (List<Object>) rest.get(\"data\");\n        Map<String, Object> row1 = (Map<String, Object>) data1.get(0);\n        List<Object> list = (List<Object>) row1.get(\"row\");\n        Map<String, Object> map = (Map<String, Object>) list.get(0);\n        String key = (String) map.get(\"key\");\n        return !", "CodeBleu_score": 43.380134072913094}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t    //String url = \"http://localhost:8080/graph/edge/add\";\n    String url = \"http://localhost:8080/graph/edge/add\";\n    //String url = \"http://localhost:8080/graph/edge/add\";\n    String payload = \"{\\\"projectName\\\":\\\"\"+projectName+\"\\\",\\\"edgeType\\\":\\\"\"+edgeType+\"\\\",\\\"fromType\\\":\\\"\"+fromType+\"\\\",\\\"toType\\\":\\\"\"+toType+\"\\\",\\\"from\\\":\\\"\"+from+\"\\\",\\\"to\\\":\\\"\"+to+\"\\\"}\";\n    CloseableHttpClient httpClient = HttpClients.createDefault();\n    HttpPost httpPost = new HttpPost(url);\n    try {\n        httpPost.setEntity(new StringEntity(payload, Charset.forName(\"UTF-8\")));\n        httpPost.setHeader(\"Content-type\", \"application/json\");\n        CloseableHttpResponse httpResponse = httpClient.execute(httpPost);\n        try {\n            HttpEntity httpEntity = httpResponse.getEntity();\n            String response = EntityUtils.toString(httpEntity);\n            ObjectMapper mapper = new ObjectMapper();\n            Map<String, Object> map = mapper.readValue(response, Map.class);\n            if (map.containsKey(\"key\")) {\n                return true;\n            }\n        } finally {\n            httpResponse.close();\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        try {\n            httpClient.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return false;\n}", "CodeBleu_score": 46.3678335757572}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t    boolean success = false;\n    CloseableHttpClient client = HttpClients.createDefault();\n    try {\n        HttpGet request = new HttpGet(String.format(\"http://localhost:8080/api/project/%s/edge/%s/%s/%s/%s/%s\", projectName, edgeType, fromType, toType, from, to));\n        CloseableHttpResponse response = client.execute(request);\n        HttpEntity entity = response.getEntity();\n        String responseString = EntityUtils.toString(entity);\n        ObjectMapper mapper = new ObjectMapper();\n        Map<String, Object> map = mapper.readValue(responseString, Map.class);\n        if (map.containsKey(\"key\")) {\n            success = true;\n        }\n        response.close();\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        try {\n            client.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return success;\n}", "CodeBleu_score": 42.9386030748816}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t    if (event == null || event.getMessage() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(new Location(\"testing\", \"testing\", \"testing\"));\n    }\n    event.setTime(new Date());\n    String jsonString = null;\n    try {\n        jsonString = new ObjectMapper().writeValueAsString(event);\n    } catch (JsonProcessingException e) {\n        e.printStackTrace();\n    }\n    if (jsonString == null) {\n        return;\n    }\n    String topic = \"test\";\n    if (event.getTarget() != null) {\n        topic = event.getTarget();\n    }\n    ProducerRecord<String, String> record = new ProducerRecord<>(topic, jsonString);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 59.38596814191271}, {"code": "public void sendEvent(Event event){\n\t    if (event == null) {\n        throw new RuntimeException(\"Event is null\");\n    }\n    if (event.getMessage() == null) {\n        throw new RuntimeException(\"Event message is null\");\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(new Location(\"test\", \"test\"));\n    }\n    event.setEventTime(new Date());\n    String json;\n    try {\n        json = new ObjectMapper().writeValueAsString(event);\n    } catch (JsonProcessingException e) {\n        throw new RuntimeException(e);\n    }\n    String topic = \"test\";\n    if (event.getTarget() != null) {\n        topic = event.getTarget();\n    }\n    ProducerRecord<String, String> record = new ProducerRecord<>(topic, json);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 56.005887592823576}, {"code": "public void sendEvent(Event event){\n\t    if (event == null || event.getMessage() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(new Location(\"test\", \"test\", \"test\"));\n    }\n    event.setEventTime(new Date());\n    String eventJson;\n    try {\n        eventJson = new ObjectMapper().writeValueAsString(event);\n    } catch (JsonProcessingException e) {\n        e.printStackTrace();\n        return;\n    }\n    String topic = \"test\";\n    if (event.getTarget() != null) {\n        topic = event.getTarget();\n    }\n    ProducerRecord<String, String> record = new ProducerRecord<>(topic, eventJson);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 57.86056386434756}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t\n    String endpoint = \"http://oss-cn-shanghai.aliyuncs.com\";\n    String accessKeyId = \"LTAI4G9wJZ1x9R7328YF522\";\n    String accessKeySecret = \"8QNp00WXaEw8f37pZYq5jr05X3UXKn\";\n    String bucketName = \"test-bucket-1\";\n\n    // Initialize the OSS client.\n    OSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\n    // Upload the file content as an object with the specified name.\n    ossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n    // Shut down the OSS client.\n    ossClient.shutdown();\n\n    // Return the URL of the uploaded object.\n    return \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 39.9082990890259}, {"code": "public String upload(String objName, byte[] content){\n\t    // The endpoint of the China (Hangzhou) region is used in this example. Specify the actual endpoint.\n    String endpoint = \"oss-cn-hangzhou.aliyuncs.com\";\n\n    // Security risks may arise if you use the AccessKey pair of an Alibaba Cloud account to log on to OSS because the account has permissions on all API operations. We recommend that you use your RAM user's credentials to call API operations or perform routine operations and maintenance. To create a RAM user, log on to the RAM console.\n    String accessKeyId = \"<yourAccessKeyId>\";\n    String accessKeySecret = \"<yourAccessKeySecret>\";\n\n    // Create an OSSClient instance.\n    OSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\n    // Upload the object.\n    ossClient.putObject(\"<yourBucketName>\", objName, new ByteArrayInputStream(content));\n\n    // Shut down the OSSClient instance.\n    ossClient.shutdown();\n\n    // Return the URL of the uploaded object.\n    return \"https://\" + \"<yourBucketName>\" + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 39.12244244538944}, {"code": "public String upload(String objName, byte[] content){\n\t    String endpoint = \"oss-cn-hangzhou.aliyuncs.com\";\n    String accessKeyId = \"LTAI4G6t7s69kj6Qw2qLrkV\";\n    String accessKeySecret = \"aDQ0ZZ7YlK5dE8NXpzV7Vo2X0221Qe\";\n    String bucketName = \"serverless-gallery\";\n    String stsRoleArn = \"acs:ram::1557703130644660:role/aliyunfcgeneratedrole-fc\";\n    String stsRegionId = \"cn-hangzhou\";\n    String stsEndpoint = \"sts.cn-hangzhou.aliyuncs.com\";\n    String stsApiVersion = \"2015-04-01\";\n\n    // Initialize the OSS client.\n    OSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\n    // Upload the object.\n    ossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n    // Shut down the OSS client.\n    ossClient.shutdown();\n\n    // Get the URL of the uploaded object.\n    String url = getUrl(objName, stsRoleArn, stsRegionId, stsEndpoint, stsApiVersion);\n\n    return url;\n}", "CodeBleu_score": 39.05594481275625}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\tIpToLocationWorker worker = getIpToLocationWorker();\n\tif (worker == null) {\n\t\treturn new LocationInfo(ipAddress, \"unknown\", \"unknown\", \"unknown\", \"unknown\");\n\t}\n\treturn worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 27.57299489713932}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\tIpToLocationWorker worker = getIpToLocationWorker();\n\tif (worker == null) {\n\t\treturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\");\n\t}\n\treturn worker.getLocationInfo(ipAddress);\n}", "CodeBleu_score": 27.638580241262105}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo(\"unknown\", \"unknown\", \"unknown\");\n    }\n    return worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 28.085942788851852}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t    if (lowLevelClient == null || highLevelClient == null) {\n        synchronized (this) {\n            if (lowLevelClient == null || highLevelClient == null) {\n                List<HttpHost> hosts = new ArrayList<>();\n                String[] hostPorts = config.getElasticsearchHosts().split(\",\");\n                for (String hostPort : hostPorts) {\n                    String[] hostPortPair = hostPort.split(\":\");\n                    hosts.add(new HttpHost(hostPortPair[0], Integer.parseInt(hostPortPair[1]), \"http\"));\n                }\n                lowLevelClient = RestClient.builder(hosts.toArray(new HttpHost[0])).build();\n                highLevelClient = new RestHighLevelClient(lowLevelClient);\n            }\n        }\n    }\n}", "CodeBleu_score": 46.722249761150394}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t  if (this.esClient == null) {\n    synchronized (this) {\n      if (this.esClient == null) {\n        List<HttpHost> hosts = new ArrayList<>();\n        for (String host : this.esHosts.split(\",\")) {\n          String[] hostPort = host.split(\":\");\n          hosts.add(new HttpHost(hostPort[0], Integer.parseInt(hostPort[1]), \"http\"));\n        }\n        this.esClient = RestClient.builder(hosts.toArray(new HttpHost[0])).build();\n        this.esHighLevelClient = new RestHighLevelClient(this.esClient);\n      }\n    }\n  }\n}", "CodeBleu_score": 39.68999627499166}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t    if (this.lowLevelClient == null && this.highLevelClient == null) {\n        synchronized (this) {\n            if (this.lowLevelClient == null && this.highLevelClient == null) {\n                List<HttpHost> hosts = new ArrayList<>();\n                for (String host : this.clusterHosts.split(\",\")) {\n                    String[] hostParts = host.split(\":\");\n                    String hostname = hostParts[0];\n                    int port = Integer.parseInt(hostParts[1]);\n                    hosts.add(new HttpHost(hostname, port, \"http\"));\n                }\n                RestClient lowLevelClient = RestClient.builder(hosts.toArray(new HttpHost[0])).build();\n                this.highLevelClient = new RestHighLevelClient(lowLevelClient);\n                this.lowLevelClient = lowLevelClient;\n            }\n        }\n    }\n}", "CodeBleu_score": 38.842353059620514}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<>();\n    String[] hostsList = clusterHostList.split(\",\");\n    for (String host : hostsList) {\n        String[] hostPort = host.split(\":\");\n        String hostname = hostPort[0];\n        int port = clusterPort;\n        if (hostPort.length > 1) {\n            port = Integer.parseInt(hostPort[1]);\n        }\n        hosts.add(new HttpHost(hostname, port, \"http\"));\n    }\n    return hosts;\n}", "CodeBleu_score": 39.98721307600657}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<>();\n    String[] hostList = clusterHostList.split(\",\");\n    for (String host : hostList) {\n        String[] hostAndPort = host.split(\":\");\n        if (hostAndPort.length == 2) {\n            hosts.add(new HttpHost(hostAndPort[0], Integer.parseInt(hostAndPort[1])));\n        } else {\n            hosts.add(new HttpHost(host, clusterPort));\n        }\n    }\n    return hosts;\n}", "CodeBleu_score": 48.3952106182859}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hostList = new ArrayList<>();\n    String[] hosts = clusterHostList.split(\",\");\n    for (String host : hosts) {\n        hostList.add(new HttpHost(host, clusterPort));\n    }\n    return hostList;\n}", "CodeBleu_score": 35.934989518737964}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\t    CloseableHttpClient httpClient = HttpClients.createDefault();\n    while (!isShutdown) {\n        Task task = queue.poll(30, TimeUnit.SECONDS);\n        if (task != null) {\n            try {\n                if (task instanceof PlainTextMessageTask) {\n                    PlainTextMessageTask messageTask = (PlainTextMessageTask) task;\n                    sendMessage(httpClient, messageTask.getNumber(), messageTask.getMessage());\n                }\n            } catch (Exception e) {\n                logger.error(\"Error processing task \" + task.getClass().getName(), e);\n            }\n        }\n    }\n    httpClient.close();\n}", "CodeBleu_score": 26.32172932004696}, {"code": "protected void pollingWork() throws InterruptedException{\n\t    CloseableHttpClient httpClient = HttpClients.createDefault();\n    while (!stopPolling.get()) {\n        String task = queue.poll(30, TimeUnit.SECONDS);\n        if (task == null) {\n            continue;\n        }\n        try {\n            processTask(httpClient, task);\n        } catch (Exception e) {\n            LOGGER.error(\"Exception processing task: \" + task, e);\n        }\n    }\n    httpClient.close();\n}", "CodeBleu_score": 21.255579984582546}, {"code": "protected void pollingWork() throws InterruptedException{\n\t    String taskType;\n    String taskData;\n    String recipientNumber;\n    String message;\n    String messageId;\n    String logMessage;\n    String logMessageId;\n    String logMessageData;\n    String logMessageRecipientNumber;\n    String logMessageRecipientNumberCountryCode;\n    String logMessageRecipientNumberPhoneNumber;\n    String logMessageRecipientNumberE164;\n    String logMessageRecipientNumberE164CountryCode;\n    String logMessageRecipientNumberE164PhoneNumber;\n    String logMessageRecipientNumberRFC3966;\n    String logMessageRecipientNumberRFC3966CountryCode;\n    String logMessageRecipientNumberRFC3966PhoneNumber;\n    String logMessageRecipientNumberRFC3966E164;\n    String logMessageRecipientNumberRFC3966E164CountryCode;\n    String logMessageRecipientNumberRFC3966E164PhoneNumber;\n    String logMessageRecipientNumberRFC3966IDD;\n    String logMessageRecipientNumberRFC3966IDDCountryCode;\n    String logMessageRecipientNumberRFC3966IDDPhoneNumber;\n    String logMessageRecipientNumberRFC3966IDDE164;\n    String logMessageRecipientNumberRFC3966IDDE164CountryCode;\n    String logMessageRecipientNumberRFC3966IDDE164PhoneNumber;\n    String logMessageRecipientNumberRFC3966National;\n    String logMessageRecipientNumberRFC3966NationalCountryCode;\n    String logMessageRecipientNumberRFC3966NationalPhoneNumber;\n    String logMessageRecipientNumberRFC3966NationalE164;\n    String logMessageRecipientNumberRFC3966NationalE164CountryCode;\n    String logMessageRecipientNumberRFC3966NationalE164PhoneNumber;\n    String logMessageRecipientNumberRFC3966Service;\n    String", "CodeBleu_score": 17.96210981385722}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    CloseableHttpClient httpClient = HttpClients.createDefault();\n    HttpGet httpGet = new HttpGet(uri);\n    try (CloseableHttpResponse httpResponse = httpClient.execute(httpGet)) {\n        HttpEntity entity = httpResponse.getEntity();\n        return EntityUtils.toString(entity, StandardCharsets.UTF_8);\n    }\n}", "CodeBleu_score": 39.704530319447045}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    String result = \"\";\n    CloseableHttpClient httpClient = HttpClients.createDefault();\n    HttpGet httpGet = new HttpGet(uri);\n    CloseableHttpResponse response = httpClient.execute(httpGet);\n    try {\n        HttpEntity entity = response.getEntity();\n        if (entity != null) {\n            result = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        }\n    } finally {\n        response.close();\n    }\n    return result;\n}", "CodeBleu_score": 53.05130277549116}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    CloseableHttpClient httpClient = HttpClients.createDefault();\n    HttpGet httpGet = new HttpGet(uri);\n    CloseableHttpResponse httpResponse = httpClient.execute(httpGet);\n    HttpEntity entity = httpResponse.getEntity();\n    String content = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n    httpClient.close();\n    return content;\n}", "CodeBleu_score": 59.00465918982582}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document document = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n    NodeList root = document.getChildNodes();\n    Map<String, Object> rootMap = new HashMap<>();\n    for (int i = 0; i < root.getLength(); i++) {\n        Node node = root.item(i);\n        if (node.getNodeType() == Node.ELEMENT_NODE) {\n            rootMap = decodeNode(node, doTrim);\n        }\n    }\n    return rootMap;\n}", "CodeBleu_score": 56.74048581835599}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();\n    Document doc = dBuilder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n    doc.getDocumentElement().normalize();\n    Map<String, Object> result = new HashMap<>();\n    NodeList nList = doc.getChildNodes();\n    for (int i = 0; i < nList.getLength(); i++) {\n        Node nNode = nList.item(i);\n        if (nNode.getNodeType() == Node.ELEMENT_NODE) {\n            result.putAll(decodeElement(nNode, doTrim));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 53.778427002860376}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    Map<String, Object> result = null;\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n    NodeList rootNodes = doc.getChildNodes();\n    if (rootNodes.getLength() == 1) {\n        result = decodeNodeToMap(rootNodes.item(0), doTrim);\n    }\n    return result;\n}", "CodeBleu_score": 55.65910251267378}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\n\tfinal ISysConfigBL sysConfigBL = Services.get(ISysConfigBL.class);\n\tfinal ITrxManager trxManager = Services.get(ITrxManager.class);\n\n\tfinal DeliveryRule deliveryRule = DeliveryRule.ofCode(orderRecord.getDeliveryRule());\n\n\tfinal boolean isAutoProcess = deliveryRule.isAutoProcess();\n\tfinal boolean isCompleteShipAndInvoice = sysConfigBL.getBooleanValue(CompleteShipAndInvoiceEnqueuer.SYSCONFIG_CompleteShipAndInvoice, false);\n\n\tif (isAutoProcess) {\n\t\tLoggables.withLogger(logger, Level.INFO).addLog(\"Enqueuing order {} for auto-shipping and auto-invoicing\", orderRecord.getC_Order_ID());\n\t\ttrxManager.getTrxListenerManager(ITrx.TRXNAME_ThreadInherited)\n\t\t\t\t.newEventListener(TrxEventTiming.AFTER_COMMIT)\n\t\t\t\t.registerHandlingMethod(trx -> enqueueOrderForCompleteShipAndInvoice(orderRecord));\n\t} else {\n\t\tLoggables.withLogger(logger, Level.INFO).addLog(\"Enqueuing order {} for schedule creation\", orderRecord.getC_Order_ID());\n\t\ttrxManager.getTrxListenerManager(ITrx.TRXNAME_ThreadInherited)\n\t\t\t\t.newEventListener(TrxEventTiming.AFTER_COMMIT)\n\t\t\t\t.registerHandlingMethod(trx -> enqueueOrderForScheduleCreation(orderRecord));\n\t}\n}", "CodeBleu_score": 42.858259603332385}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tfinal OrderId orderId = OrderId.ofRepoId(orderRecord.getC_Order_ID());\n\tfinal AsyncBatchId asyncBatchId = Services.get(ISysConfigBL.class).getAsyncBatchId(CompleteShipAndInvoiceEnqueuer.SYSCONFIG_CompleteShipAndInvoiceEnqueuer_AsyncBatchConfig);\n\tfinal boolean postponeSchedulesCreation = Services.get(ISysConfigBL.class).getBooleanValue(CompleteShipAndInvoiceEnqueuer.SYSCONFIG_CompleteShipAndInvoiceEnqueuer_PostponeSchedulesCreation, false);\n\tfinal boolean isEligible = Services.get(CompleteShipAndInvoiceEnqueuer.class).isEligibleForCompleteShipAndInvoice(orderRecord);\n\n\tif (isEligible) {\n\t\tLoggables.addLog(\"Enqueuing order \" + orderId + \" for CompleteShipAndInvoice\");\n\t\tServices.get(ITrxManager.class).runInNewTrx(\n\t\t\t\t(TrxRunnable)trxName -> Services.get(CompleteShipAndInvoiceEnqueuer.class).enqueueCompleteShipAndInvoice(orderId, asyncBatchId, trxName));\n\t} else {\n\t\tLoggables.addLog(\"Order \" + orderId + \" is not eligible for CompleteShipAndInvoice\");\n\t\tif (postponeSchedulesCreation) {\n\t\t\tLoggables.addLog(\"Postponing schedules creation for order \" + orderId);\n\t\t} else {\n\t\t\tLoggables.addLog(\"Enqueuing order \" + orderId + \" for schedules creation\");\n\t\t\tServices.get(ITrxManager.class).runInNewTrx(\n\t\t\t\t\t(TrxRunnable)trxName -> Services.get(CreateMissingShipmentSchedulesWorkpackageProcessor.class).scheduleForOrderId(orderId, asyncBatchId, trxName));\n\t\t}\n\t}\n}", "CodeBleu_score": 42.07014406991657}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tfinal ITrxManager trxManager = Services.get(ITrxManager.class);\n\ttrxManager.runAfterCommit(() -> {\n\t\tfinal ISysConfigBL sysConfigBL = Services.get(ISysConfigBL.class);\n\t\tfinal boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\t\tfinal boolean postponeScheduleCreation = sysConfigBL.getBooleanValue(CompleteShipAndInvoiceEnqueuer.SYSCONFIG_PostponeScheduleCreation, false, orderRecord.getAD_Client_ID(), orderRecord.getAD_Org_ID());\n\t\tfinal String transactionName = isEligibleForAutoProcessing ? CompleteShipAndInvoiceEnqueuer.TRANSACTION_NAME : CreateMissingShipmentSchedulesWorkpackageProcessor.TRANSACTION_NAME;\n\n\t\tfinal OrderId orderId = OrderId.ofRepoId(orderRecord.getC_Order_ID());\n\t\tfinal AsyncBatchId asyncBatchId = Services.get(CompleteShipAndInvoiceEnqueuer.class).enqueue(orderId, transactionName);\n\n\t\tif (isEligibleForAutoProcessing)\n\t\t{\n\t\t\tLoggables.addLog(\"Enqueued C_Order_ID={} for auto-processing using transactionName={} and asyncBatchId={}\", orderId, transactionName, asyncBatchId);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (postponeScheduleCreation)\n\t\t\t{\n\t\t\t\tLoggables.addLog(\"Enqueued C_Order_ID={} for schedule creation using transactionName={} and asyncBatchId={}\", orderId, transactionName, asyncBatchId);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tLoggables.addLog(\"Enqueued C_Order_ID={} for schedule creation using transactionName={} and asyncBatchId={}. The schedules will be created after the order is processed.\", orderId, transactionName, asyncBatchId);\n\t\t\t}\n\t\t}\n\t});\n}", "CodeBleu_score": 40.18316651129048}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $model = config('fortify.username');\n    $username = $request->input($this->username());\n    $guard = $this->guard();\n\n    /** @var \\Illuminate\\Database\\Eloquent\\Model|null $user */\n    $user = $guard->getProvider()->retrieveByCredentials([\n        $model => $username,\n    ]);\n\n    if (is_null($user) || !$guard->getProvider()->validateCredentials($user, ['password' => $request->input('password')])) {\n        event(new Failed($guard, $user, [$this->username() => $username, 'password' => $request->input('password')]));\n\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return $user;\n}", "CodeBleu_score": 42.73370282632566}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n\n    if (is_null($user) || !$this->guard()->validate([\n        'email' => $request->email,\n        'password' => $request->password,\n    ])) {\n        event(new Failed($this->guard()->name(), $user, [\n            'email' => $request->email,\n            'password' => $request->password,\n        ]));\n\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return $user;\n}", "CodeBleu_score": 48.846707579283425}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $model = $this->guard->getProvider()->getModel();\n\n    return $this->guard->validate(\n        array_merge($this->credentials($request), ['active' => true]),\n        function ($user, $password) use ($request, $model) {\n            $this->ensureActiveUser($user, $model);\n\n            return $this->confirmPassword($user, $password, $request);\n        }\n    );\n}", "CodeBleu_score": 47.68394271737547}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        Fortify::username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 72.95533593440727}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter()->increment($request);\n\n    throw ValidationException::withMessages([\n        Fortify::username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 68.40137477109548}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        Fortify::username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 72.95533593440727}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t    $user = User::find(\n        $request->session()->get('login.id')\n    );\n\n    $publicKey = Webauthn::prepareAssertion($user, $request->session()->get('webauthn.publicKey'));\n\n    return Inertia::render('TwoFactorChallenge', [\n        'enabled' => $user->two_factor_enabled,\n        'remember' => $request->session()->get('webauthn.remember'),\n        'publicKey' => $publicKey,\n    ]);\n}", "CodeBleu_score": 41.1072953843545}, {"code": "<?\npublic function toResponse($request){\n\t    $user = $request->user();\n\n    $webauthn = Webauthn::prepareAssertion($user);\n\n    return Inertia::render('TwoFactorChallenge', [\n        'twoFactorEnabled' => $user->two_factor_enabled,\n        'webauthn' => $webauthn,\n        'remember' => $request->session()->get('login.remember'),\n    ]);\n}", "CodeBleu_score": 34.48181539596498}, {"code": "<?\npublic function toResponse($request){\n\t    $user = $request->user();\n\n    $webauthnPublicKey = Webauthn::prepareAssertion($user);\n\n    return Inertia::render('TwoFactorChallenge', [\n        'twoFactorEnabled' => $user->two_factor_enabled,\n        'user' => $user,\n        'webauthnPublicKey' => $webauthnPublicKey,\n        'remember' => $request->session()->get('login.remember'),\n    ]);\n}", "CodeBleu_score": 36.538924839258634}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    $user_token = UserToken::where('driver', $driver)->where('socialite_user_id', $socialite->getId())->first();\n    if ($user_token) {\n        $user = $user_token->user;\n        if (!$user->hasVerifiedEmail()) {\n            throw ValidationException::withMessages([\n                'email' => [__('auth.social_email_not_verified')],\n            ]);\n        }\n        $user->markEmailAsVerified();\n        return $user;\n    }\n\n    $user = User::where('email', $socialite->getEmail())->first();\n    if ($user) {\n        $user->tokens()->create([\n            'driver' => $driver,\n            'socialite_user_id' => $socialite->getId(),\n        ]);\n        return $user;\n    }\n\n    $user = User::create([\n        'name' => $socialite->getName(),\n        'email' => $socialite->getEmail(),\n    ]);\n    $user->tokens()->create([\n        'driver' => $driver,\n        'socialite_user_id' => $socialite->getId(),\n    ]);\n    $user->markEmailAsVerified();\n    return $user;\n}", "CodeBleu_score": 42.569875934941216}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    $user_token = UserToken::where('driver', $driver)->where('driver_id', $socialite->getId())->first();\n\n    if ($user_token) {\n        $user = $user_token->user;\n\n        if (!$user->hasVerifiedEmail()) {\n            $user->markEmailAsVerified();\n        }\n\n        $user->save();\n\n        return $user;\n    }\n\n    $user = $this->createUser($request, $driver, $socialite);\n\n    $user_token = $this->createUserToken($user, $driver, $socialite);\n\n    return $user;\n}", "CodeBleu_score": 52.0493416583965}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    $userToken = UserToken::where('driver', $driver)->where('socialite_user_id', $socialite->getId())->first();\n\n    if ($userToken) {\n        $user = $userToken->user;\n\n        if (!$user->hasVerifiedEmail()) {\n            throw ValidationException::withMessages(['email' => __('auth.email_not_verified')]);\n        }\n\n        $user->markEmailAsVerified();\n    } else {\n        $user = User::where('email', $socialite->getEmail())->first();\n\n        if ($user) {\n            $user->tokens()->create([\n                'driver' => $driver,\n                'socialite_user_id' => $socialite->getId()\n            ]);\n        } else {\n            $user = (new CreateNewUser)->create([\n                'name' => $socialite->getName(),\n                'email' => $socialite->getEmail(),\n                'email_verified_at' => now(),\n                'password' => Str::random(32)\n            ]);\n\n            $user->tokens()->create([\n                'driver' => $driver,\n                'socialite_user_id' => $socialite->getId()\n            ]);\n\n            event(new Registered($user));\n        }\n    }\n\n    return $user;\n}", "CodeBleu_score": 47.95651095619314}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $this->guard()->user();\n    if (!$user) {\n        return false;\n    }\n\n    $credentials = $this->credentials($request);\n\n    $credentials = array_merge($credentials, $this->webauthnCredentials($request));\n\n    $remember = $request->filled('remember');\n\n    if (!$this->guard()->validate($credentials)) {\n        $this->incrementLoginAttempts($request);\n\n        event(new Failed(\n            $this->guard()->getProvider(),\n            $user,\n            ['webauthn' => $credentials['webauthn']]\n        ));\n\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    $this->clearLoginAttempts($request);\n\n    return $this->guard()->login($user, $remember);\n}", "CodeBleu_score": 50.751085258987885}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $this->guard()->user();\n\n    if (!$user) {\n        return false;\n    }\n\n    $credentials = $this->credentials($request);\n\n    try {\n        $webauthn = WebauthnFacade::login($user, $credentials['webauthn']);\n    } catch (ValidationException $e) {\n        $this->fireFailedEvent($user, $credentials);\n\n        throw $e;\n    }\n\n    if (!$webauthn) {\n        $this->fireFailedEvent($user, $credentials);\n\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 57.85423949907311}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $credentials = $this->credentials($request);\n\n    $user = $this->retrieveByCredentials($credentials);\n\n    if (is_null($user)) {\n        return false;\n    }\n\n    $webauthn = $this->webauthn();\n\n    try {\n        $webauthn->validateAssertion($user, $request->input('assertion'));\n    } catch (Exception $e) {\n        $this->limiter()->increment($request);\n\n        event(new Failed($this, $user, [\n            'credentials' => $credentials,\n            'exception' => $e,\n        ]));\n\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    $this->clearLoginAttempts($request);\n\n    return true;\n}", "CodeBleu_score": 49.75702581404704}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\t    $email = $this->argument('email');\n    if (!$email) {\n        $this->error('No email address provided.');\n        return null;\n    }\n\n    try {\n        return User::where('email', $email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error('No user found with email: ' . $email);\n        return null;\n    }\n}", "CodeBleu_score": 70.14391911861281}, {"code": "<?\nprivate function user(): ?User{\n\t    if (!$email = $this->argument('email')) {\n        $this->error('No email address provided.');\n        return null;\n    }\n\n    try {\n        return User::whereEmail($email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error(\"User with email {$email} not found.\");\n        return null;\n    }\n}", "CodeBleu_score": 67.41245894899265}, {"code": "<?\nprivate function user(): ?User{\n\t    $email = $this->argument('email');\n    if (!$email) {\n        $this->error('No email address provided.');\n        return null;\n    }\n\n    try {\n        return User::where('email', $email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error('No user found for the provided email address.');\n        return null;\n    }\n}", "CodeBleu_score": 69.71191667992885}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\t    if (config('scout.driver') && $this->option('flush')) {\n        $this->call('scout:flush', ['model' => '*']);\n        $this->line('');\n        $this->line('<info>All Scout indexes flushed.</info>');\n    }\n}", "CodeBleu_score": 24.618290357711548}, {"code": "<?\nprotected function scoutFlush(): void{\n\t    if (config('scout.driver') && $this->option('flush')) {\n        $indexes = config('scout.meilisearch.indexes');\n\n        foreach ($indexes as $index => $settings) {\n            $this->call('scout:flush', [\n                'model' => $settings['model'],\n            ]);\n        }\n\n        $this->info('Scout indexes flushed.');\n    }\n}", "CodeBleu_score": 46.22174878677699}, {"code": "<?\nprotected function scoutFlush(): void{\n\t    if (config('scout.driver') === 'meilisearch' && $this->option('flush')) {\n        $indexes = config('scout.meilisearch.indexes');\n\n        foreach ($indexes as $key => $value) {\n            $indexName = $key;\n            $indexClass = $value;\n            $index = app($indexClass);\n            $tableName = $index->searchableAs();\n\n            $this->call('scout:flush', [\n                'model' => $tableName,\n                '--index' => $indexName,\n            ]);\n        }\n\n        $this->info('Scout indexes flushed.');\n    }\n}", "CodeBleu_score": 43.40559857640153}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    try {\n        $vcard = Reader::read($resource->get());\n    } catch (ParseException $e) {\n        $vcard = new VCard();\n    }\n\n    $vcard->UID = $vcard->UID ?? $resource->getUID();\n\n    $vcard->FN = $vcard->FN ?? $resource->getDisplayName();\n\n    $vcard->N = $vcard->N ?? $resource->getVCardName();\n\n    $vcard->BDAY = $vcard->BDAY ?? $resource->getBirthday();\n\n    $vcard->TEL = $vcard->TEL ?? $resource->getVCardTelephones();\n\n    $vcard->EMAIL = $vcard->EMAIL ?? $resource->getVCardEmails();\n\n    $vcard->ADR = $vcard->ADR ?? $resource->getVCardAddresses();\n\n    $vcard->ORG = $vcard->ORG ?? $resource->getVCardOrganization();\n\n    $vcard->TITLE = $vcard->TITLE ?? $resource->getVCardTitle();\n\n    $vcard->PHOTO = $vcard->PHOTO ?? $resource->getVCardPhoto();\n\n    $vcard->NOTE = $vcard->NOTE ?? $resource->getVCardNote();\n\n    return $vcard;\n}", "CodeBleu_score": 39.82484754269186}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    $vcard = null;\n    try {\n        $vcard = Reader::read($resource->get());\n    } catch (ParseException $e) {\n        //\n    }\n\n    if (!$vcard) {\n        $vcard = new VCard();\n        $vcard->add('UID', $resource->getUID());\n    }\n\n    $exporters = [\n        ExportVCardResource::class,\n    ];\n\n    foreach ($exporters as $exporter) {\n        $exporter = new $exporter();\n        $exporter->export($resource, $vcard);\n    }\n\n    return $vcard;\n}", "CodeBleu_score": 36.63282451892249}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    $vCard = null;\n\n    try {\n        $vCard = Reader::read($resource->get());\n    } catch (ParseException $e) {\n        // Ignore parse errors and create a new vCard\n    }\n\n    if ($vCard === null) {\n        $vCard = new VCard();\n    }\n\n    if (!$vCard->UID) {\n        $vCard->UID = $resource->getUID();\n    }\n\n    foreach (config('contact.dav.exporters') as $exporter) {\n        $exporter = new $exporter($resource);\n        $exporter->run($vCard);\n    }\n\n    return $vCard;\n}", "CodeBleu_score": 33.149080598339104}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $object = $this->getObject($addressBookId, $cardUri);\n    if ($object instanceof Contact) {\n        Bus::dispatch(new DestroyContact($object))->onQueue('high');\n    } else if ($object instanceof Group) {\n        Bus::dispatch(new DestroyGroup($object))->onQueue('high');\n    } else {\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 40.32817071558379}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $object = $this->getObject($addressBookId, $cardUri);\n    if ($object instanceof Contact) {\n        Bus::dispatch(new DestroyContact($object));\n        return true;\n    } else if ($object instanceof Group) {\n        Bus::dispatch(new DestroyGroup($object));\n        return true;\n    } else {\n        return false;\n    }\n}", "CodeBleu_score": 36.456996409920706}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $object = $this->getObject($addressBookId, $cardUri);\n    if ($object instanceof Contact) {\n        Bus::dispatch(new DestroyContact($object));\n        return true;\n    } else if ($object instanceof Group) {\n        Bus::dispatch(new DestroyGroup($object));\n        return true;\n    } else {\n        return false;\n    }\n}", "CodeBleu_score": 36.456996409920706}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\t\n    $file = request()->file('file');\n\n    if (! $file) {\n        return;\n    }\n\n    $leadActivity = $this->create($data);\n\n    $uploadedFile = $this->uploader->upload($file, 'lead_activities');\n\n    $leadActivity->attachments()->create([\n        'name'          => $uploadedFile->name,\n        'path'          => $uploadedFile->path,\n        'extension'     => $uploadedFile->extension,\n        'size'          => $uploadedFile->size,\n        'original_name' => $uploadedFile->original_name,\n    ]);\n\n    return $leadActivity;\n}", "CodeBleu_score": 48.01114153042448}, {"code": "<?\npublic function upload(array $data){\n\t    $lead = $this->findOrFail($data['lead_id']);\n\n    $file = $data['file'];\n\n    if (! $file) {\n        return;\n    }\n\n    $uploadedFile = $file->store('files');\n\n    $leadActivity = $lead->activities()->create([\n        'type'      => 'file',\n        'comment'   => $data['comment'],\n        'file_name' => $file->getClientOriginalName(),\n        'path'      => $uploadedFile,\n        'user_id'   => auth()->guard('user')->user()->id,\n    ]);\n\n    return $leadActivity->files()->create([\n        'name'      => $file->getClientOriginalName(),\n        'path'      => $uploadedFile,\n    ]);\n}", "CodeBleu_score": 57.748309056532236}, {"code": "<?\npublic function upload(array $data){\n\t    if (!request()->hasFile('file')) {\n        return;\n    }\n\n    $data['user_id'] = auth()->user()->id;\n\n    $activity = $this->create($data);\n\n    $path = request()->file('file')->store('lead_activities');\n\n    return $this->uploads()->create([\n        'path'      => $path,\n        'size'      => request()->file('file')->getSize(),\n        'mime_type' => request()->file('file')->getMimeType(),\n        'activity_id' => $activity->id,\n    ]);\n}", "CodeBleu_score": 51.274871097987294}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t\n    $request = Container::getInstance()->make('request');\n\n    if ($exception instanceof ModelNotFoundException && $request->is('admin/*')) {\n        return response()->view('errors.custom', [], 404);\n    } else if ($exception instanceof PDOException && $request->is('admin/*')) {\n        return response()->view('errors.custom', [], 500);\n    } else if ($exception instanceof ParseError && $request->is('admin/*')) {\n        return response()->view('errors.custom', [], 500);\n    } else if ($exception instanceof AuthenticationException && $request->is('admin/*')) {\n        return response()->view('errors.custom', [], 401);\n    } else if ($exception instanceof HttpException && $request->is('admin/*')) {\n        return response()->view('errors.custom', [], $exception->getStatusCode());\n    }\n\n    return false;\n}", "CodeBleu_score": 34.5771193222837}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if ($exception instanceof ModelNotFoundException) {\n        return response()->json(['error' => 'Resource not found'], 404);\n    } elseif ($exception instanceof PDOException) {\n        return response()->json(['error' => 'Database error'], 500);\n    } elseif ($exception instanceof ParseError) {\n        return response()->json(['error' => 'Parse error'], 500);\n    } elseif ($exception instanceof AuthenticationException) {\n        return response()->json(['error' => 'Unauthenticated'], 401);\n    } elseif ($exception instanceof HttpException) {\n        return response()->json(['error' => $exception->getMessage()], $exception->getStatusCode());\n    }\n}", "CodeBleu_score": 36.23147311323059}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    $request = request();\n    $exceptionType = get_class($exception);\n\n    if ($exceptionType === 'Illuminate\\Auth\\AuthenticationException') {\n        return redirect()->route('admin.login');\n    } elseif ($exceptionType === 'Illuminate\\Database\\Eloquent\\ModelNotFoundException') {\n        return response()->json(['message' => 'Resource not found'], 404);\n    } elseif ($exceptionType === 'PDOException') {\n        return response()->json(['message' => 'Database error'], 500);\n    } elseif ($exceptionType === 'ParseError') {\n        return response()->json(['message' => 'Parse error'], 500);\n    } elseif ($exceptionType === 'Symfony\\Component\\HttpKernel\\Exception\\HttpException') {\n        $statusCode = $exception->getStatusCode();\n        return response()->json(['message' => 'Error'], $statusCode);\n    } else {\n        return response()->json(['message' => 'Error'], 500);\n    }\n}", "CodeBleu_score": 32.85663765684573}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json(['error' => 'Resource not found'], $statusCode);\n    }\n\n    return response()->view($path, [], $statusCode);\n}", "CodeBleu_score": 42.62098788720151}, {"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json(['error' => $path], $statusCode);\n    }\n\n    return response()->view('errors.' . $statusCode, ['path' => $path], $statusCode);\n}", "CodeBleu_score": 50.79499450252918}, {"code": "<?\nprivate function response($path, $statusCode){\n\t    $request = app('request');\n\n    if ($request->expectsJson()) {\n        return response()->json([\n            'error' => $statusCode,\n            'message' => trans('errors.'.$path)\n        ], $statusCode);\n    }\n\n    return response()->view('errors.'.$path, [], $statusCode);\n}", "CodeBleu_score": 54.472068985945}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t    $data = request()->all();\n\n    $activities = $this->activityRepository->findWhereIn('id', $data['rows']);\n\n    $count = 0;\n\n    foreach ($activities as $activity) {\n        Event::dispatch('activity.before.update', $activity->id);\n\n        $activity->update([\n            'is_done' => $data['value']\n        ]);\n\n        Event::dispatch('activity.after.update', $activity->id);\n\n        $count++;\n    }\n\n    return response()->json([\n        'success' => true,\n        'message' => __('admin::app.activities.mass-update-success', ['count' => $count]),\n    ]);\n}", "CodeBleu_score": 45.34313333542318}, {"code": "<?\npublic function massUpdate(){\n\t    $activities = $this->activityRepository->findWhereIn('id', request()->input('ids'));\n\n    $count = 0;\n\n    foreach ($activities as $activity) {\n        Event::dispatch('activity.before.update.status', $activity);\n\n        $activity->update(['is_done' => request()->input('is_done')]);\n\n        Event::dispatch('activity.after.update.status', $activity);\n\n        $count++;\n    }\n\n    if ($count) {\n        session()->flash('success', trans('admin::app.activities.mass-update-success'));\n    } else {\n        session()->flash('error', trans('admin::app.activities.mass-update-failed'));\n    }\n\n    return response()->json(['count' => $count]);\n}", "CodeBleu_score": 49.22805368048546}, {"code": "<?\npublic function massUpdate(){\n\t    $activityIds = request()->get('activityIds');\n    $done = request()->get('done');\n    $count = 0;\n\n    foreach ($activityIds as $id) {\n        $activity = $this->activityRepository->findOrFail($id);\n\n        Event::dispatch('activities.before_update', $id);\n\n        $activity->update([\n            'is_done' => $done,\n        ]);\n\n        Event::dispatch('activities.after_update', $activity);\n\n        $count++;\n    }\n\n    return response()->json([\n        'success' => true,\n        'message' => __('admin::app.activities.mass-update-success', [\n            'count' => $count,\n        ]),\n    ]);\n}", "CodeBleu_score": 47.90987636452403}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t    $activities = request('rows');\n\n    foreach ($activities as $activityId) {\n        $activity = $this->activityRepository->findOrFail($activityId);\n\n        Event::dispatch('activity.deleting', $activity);\n\n        $this->activityRepository->delete($activityId);\n\n        Event::dispatch('activity.deleted', $activity);\n    }\n\n    return response()->json([\n        'message' => trans('admin::app.response.destroy-success', ['name' => trans('admin::app.activities.title')]),\n    ]);\n}", "CodeBleu_score": 52.091298174143716}, {"code": "<?\n public function massDestroy(){\n\t        $activities = explode(',', request()->input('indexes'));\n\n        foreach ($activities as $activityId) {\n            $activity = $this->activityRepository->find($activityId);\n\n            if (isset($activity)) {\n                Event::dispatch('activity.delete.before', $activityId);\n\n                $this->activityRepository->delete($activityId);\n\n                Event::dispatch('activity.delete.after', $activityId);\n            }\n        }\n\n        return response()->json([\n            'message' => trans('admin::app.response.destroy-success', ['name' => trans('admin::app.activities.title')]),\n        ]);\n    }", "CodeBleu_score": 54.572111359809426}, {"code": "<?\n public function massDestroy(){\n\t    $activities = explode(',', request()->input('indexes'));\n\n    foreach ($activities as $activityId) {\n        $activity = $this->activityRepository->find($activityId);\n\n        if (isset($activity)) {\n            Event::dispatch('activity.deleting', $activity);\n\n            $this->activityRepository->delete($activityId);\n\n            Event::dispatch('activity.deleted', $activity);\n        }\n    }\n\n    return response()->json([\n        'message' => trans('admin::app.response.destroy-success', ['name' => trans('admin::app.activities.title')]),\n    ]);\n}", "CodeBleu_score": 49.964133381202515}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t    $dashboard = app(DashboardHelper::class);\n    $cards = $dashboard->getCards();\n\n    $request = request()->all();\n\n    foreach ($cards as $card) {\n        if (isset($request[$card->id])) {\n            $card->selected = true;\n        } else {\n            $card->selected = false;\n        }\n    }\n\n    return response()->json($cards);\n}", "CodeBleu_score": 36.82588842457213}, {"code": "<?\n public function updateCards(){\n\t\n    $data = request()->all();\n    $cards = DashboardHelper::getCards();\n\n    foreach ($cards as $card) {\n        if (isset($data[$card['key']])) {\n            $card['selected'] = true;\n        } else {\n            $card['selected'] = false;\n        }\n    }\n\n    return response()->json($cards);\n}", "CodeBleu_score": 42.82695557425518}, {"code": "<?\n public function updateCards(){\n\t    $cards = DashboardHelper::getCards();\n\n    $request = request()->all();\n\n    foreach ($cards as $index => $card) {\n        if (isset($request[$card['key']])) {\n            $cards[$index]['selected'] = true;\n        } else {\n            $cards[$index]['selected'] = false;\n        }\n    }\n\n    return response()->json($cards);\n}", "CodeBleu_score": 41.270706809071996}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t    Event::dispatch('core.configuration.create.before');\n\n    $configuration = $this->configurationRepository->create(request()->all());\n\n    Event::dispatch('core.configuration.create.after', $configuration);\n\n    session()->flash('success', trans('admin::app.configuration.create-success'));\n\n    return redirect()->route($this->_config['redirect']);\n}", "CodeBleu_score": 41.14442588561648}, {"code": "<?\npublic function store(){\n\t    Event::dispatch('core.configuration.create.before');\n\n    $this->validate(request(), [\n        'code' => ['required', 'unique:core_config,code', new \\Webkul\\Core\\Contracts\\Validations\\Code],\n        'value' => 'required',\n    ]);\n\n    $configuration = $this->configurationRepository->create(request()->all());\n\n    Event::dispatch('core.configuration.create.after', $configuration);\n\n    session()->flash('success', trans('admin::app.response.create-success', ['name' => 'Configuration']));\n\n    return redirect()->route($this->_config['redirect']);\n}", "CodeBleu_score": 31.69351311345293}, {"code": "<?\npublic function store(){\n\t    Event::dispatch('core.configuration.create.before');\n\n    $this->config->create(request()->all());\n\n    Event::dispatch('core.configuration.create.after');\n\n    session()->flash('success', trans('admin::app.response.create-success', ['name' => 'Configuration']));\n\n    return redirect()->route($this->_config['redirect']);\n}", "CodeBleu_score": 39.08752622004427}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t    $path = request()->route()->parameters()['path'];\n    $fileName = request()->route()->parameters()['file_name'];\n    $config = $this->configurationRepository->findOneByField('value', $path);\n    $file = Storage::download($config['value'] . '/' . $fileName);\n    return $file;\n}", "CodeBleu_score": 66.1796144859744}, {"code": "<?\npublic function download(){\n\t    $fileName = request()->get('fileName');\n    $filePath = request()->get('filePath');\n    $file = Storage::get($filePath . $fileName);\n    $fileType = Storage::mimeType($filePath . $fileName);\n    $fileSize = Storage::size($filePath . $fileName);\n\n    return response($file, 200, [\n        'Content-Type' => $fileType,\n        'Content-Length' => $fileSize,\n        'Content-Disposition' => 'attachment; filename=\"' . $fileName . '\"',\n    ]);\n}", "CodeBleu_score": 34.187518025402454}, {"code": "<?\npublic function download(){\n\t    $code = request()->get('code');\n    $type = request()->get('type');\n\n    $config = $this->configurationRepository->findOneByField('code', $code);\n\n    $file = $type . '.' . $config[$type];\n\n    return Storage::download($this->config->get($type));\n}", "CodeBleu_score": 47.46030083521469}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> adminModelSortList = new ArrayList<>();\n    for (String s : list) {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        BeanUtil.copyProperties(s, adminModelSort);\n        adminModelSort.setUserId(UserUtil.getUserId());\n        adminModelSort.setSortId(s);\n        adminModelSortList.add(adminModelSort);\n    }\n    adminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()));\n    adminModelSortService.saveBatch(adminModelSortList);\n    return Result.success();\n}", "CodeBleu_score": 49.657292769975705}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> adminModelSortList = new ArrayList<>();\n    for (String s : list) {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setUserId(UserUtil.getUserId());\n        adminModelSort.setModel(s);\n        adminModelSort.setSort(list.indexOf(s));\n        adminModelSortList.add(adminModelSort);\n    }\n    adminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()));\n    adminModelSortService.saveBatch(adminModelSortList);\n    return Result.success();\n}", "CodeBleu_score": 49.64362283977282}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> sortList = new ArrayList<>();\n    for (String sort : list) {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setModelCode(sort);\n        adminModelSort.setUserCode(UserUtil.getUserCode());\n        sortList.add(adminModelSort);\n    }\n    adminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserCode, UserUtil.getUserCode()));\n    adminModelSortService.saveBatch(sortList);\n    return Result.ok();\n}", "CodeBleu_score": 45.73519300061752}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    if (moduleSetting.getModule().equals(AdminModuleEnum.CRM.getCode())) {\n        return Result.error(AdminCodeEnum.CRM_MODULE_CANNOT_BE_MODIFIED);\n    }\n    AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getId());\n    if (adminConfig == null) {\n        return Result.error(AdminCodeEnum.MODULE_SETTING_NOT_FOUND);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.updateById(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 62.09719288817208}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getId());\n    if (adminConfig.getModule().equals(AdminModuleEnum.CRM.getValue())) {\n        return Result.fail(AdminCodeEnum.ADMIN_MODULE_SETTING_CRM_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.updateById(adminConfig);\n    return Result.success();\n}", "CodeBleu_score": 65.6108234685837}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getId());\n    if (AdminModuleEnum.CRM.getCode().equals(adminConfig.getModule())) {\n        return Result.failure(AdminCodeEnum.MODULE_SETTING_CRM_NOT_ALLOWED);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.updateById(adminConfig);\n    return Result.success();\n}", "CodeBleu_score": 68.38482549142206}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t    //TODO: 1. \u67e5\u8be2\u662f\u5426\u5b58\u5728\n    //TODO: 2. \u4e0d\u5b58\u5728\u5219\u521b\u5efa\n    //TODO: 3. \u5b58\u5728\u5219\u66f4\u65b0\n    return Result.success();\n }", "CodeBleu_score": 11.903787207569717}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t    String userId = UserUtil.getUserId();\n    AdminUserConfig userConfig = adminUserConfigService.getOne(new LambdaQueryWrapper<AdminUserConfig>().eq(AdminUserConfig::getUserId,userId).eq(AdminUserConfig::getCustomKey,customKey));\n    if(userConfig==null){\n        userConfig = new AdminUserConfig();\n        userConfig.setUserId(userId);\n        userConfig.setCustomKey(customKey);\n        userConfig.setCustomValue(json.toJSONString());\n        adminUserConfigService.save(userConfig);\n    }else{\n        userConfig.setCustomValue(json.toJSONString());\n        adminUserConfigService.updateById(userConfig);\n    }\n    return Result.success();\n}", "CodeBleu_score": 55.41842785055605}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 7.0194569965130595}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser user = adminUserService.getById(userId);\n    if (user != null) {\n        AdminConfig config = adminConfigService.getById(user.getConfigId());\n        if (config != null) {\n            user.setConfig(config);\n        }\n        user.setSalt(null);\n        user.setPassword(null);\n    }\n    return Result.success(user);\n}", "CodeBleu_score": 47.59595879604763}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser user = adminUserService.getById(userId);\n    if (user != null) {\n        // \u8bbe\u7f6e\u90e8\u95e8\u540d\u79f0\n        if (user.getDeptId() != null) {\n            AdminDept dept = adminDeptService.getById(user.getDeptId());\n            user.setDept(dept);\n        }\n        user.setPassword(null);\n        user.setSalt(null);\n        return Result.ok(user);\n    }\n    return Result.error(AdminCodeEnum.USER_NOT_EXIST);\n}", "CodeBleu_score": 48.58952250572077}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser user = this.getById(userId);\n    if (user != null) {\n        user.setDept(this.adminDeptService.getById(user.getDeptId()));\n        user.setPassword(null);\n        user.setSalt(null);\n    }\n    return Result.ok(user);\n}", "CodeBleu_score": 38.93684040014089}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t    // TODO: implement this method\n    return null;\n}", "CodeBleu_score": 0.8829483007523554}, {"code": " public Result readNotice() {\n\t    //TODO\n    return Result.ok();\n}", "CodeBleu_score": 5.168662586491311}, {"code": " public Result readNotice() {\n\t     return Result.success();\n }", "CodeBleu_score": 5.168662598080622}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\n}", "CodeBleu_score": 1.7832668431601406}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    AdminConfig adminConfig = adminConfigMapper.selectOne(new QueryWrapper<AdminConfig>().eq(\"name\", \"companyInfo\"));\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(\"companyInfo\");\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        adminConfigMapper.insert(adminConfig);\n    } else {\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        adminConfigMapper.updateById(adminConfig);\n    }\n}", "CodeBleu_score": 56.33121941753959}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\n    // \u83b7\u53d6\u516c\u53f8\u4fe1\u606f\n    String companyInfo = adminConfigService.getConfigValue(AdminConst.ADMIN_COMPANY_INFO);\n    if (StrUtil.isEmpty(companyInfo)) {\n        // \u521b\u5efa\u516c\u53f8\u4fe1\u606f\n        AdminConfig adminConfig = new AdminConfig();\n        adminConfig.setConfigKey(AdminConst.ADMIN_COMPANY_INFO);\n        adminConfig.setConfigValue(JSON.toJSONString(adminCompanyBO));\n        adminConfig.setConfigType(AdminConst.ADMIN_COMPANY_INFO);\n        adminConfig.setConfigName(AdminConst.ADMIN_COMPANY_INFO);\n        adminConfigService.save(adminConfig);\n    } else {\n        // \u66f4\u65b0\u516c\u53f8\u4fe1\u606f\n        AdminConfig adminConfig = new AdminConfig();\n        adminConfig.setConfigKey(AdminConst.ADMIN_COMPANY_INFO);\n        adminConfig.setConfigValue(JSON.toJSONString(adminCompanyBO));\n        adminConfigService.updateById(adminConfig);\n    }\n}", "CodeBleu_score": 30.414461522802156}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\t    String configValue = adminConfigMapper.queryConfigValue(AdminConst.ADMIN_CONFIG_KEY);\n    if (StrUtil.isNotEmpty(configValue)) {\n        return JSON.parseObject(configValue, AdminCompanyBO.class);\n    }\n    return new AdminCompanyBO();\n}", "CodeBleu_score": 21.24242828432771}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t    AdminConfig adminConfig = adminConfigMapper.selectOne(new QueryWrapper<AdminConfig>().eq(\"config_key\", AdminCacheKey.ADMIN_CONFIG.getKey()));\n    if (adminConfig != null) {\n        return JSON.parseObject(adminConfig.getConfigValue(), AdminCompanyBO.class);\n    }\n    return new AdminCompanyBO();\n}", "CodeBleu_score": 43.86500817297464}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t    String configKey = AdminCacheKey.getAdminConfigKey();\n    String configValue = cacheService.get(configKey);\n    if (StrUtil.isNotEmpty(configValue)) {\n        return JSON.parseObject(configValue, AdminCompanyBO.class);\n    }\n    AdminConfig config = adminConfigMapper.selectOne(new QueryWrapper<AdminConfig>().eq(\"config_key\", configKey));\n    if (config != null) {\n        return JSON.parseObject(config.getConfigValue(), AdminCompanyBO.class);\n    }\n    return new AdminCompanyBO();\n}", "CodeBleu_score": 40.485015404676155}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t    List<AdminConfig> adminConfigList = new ArrayList<>();\n    for (String string : stringList) {\n        AdminConfig adminConfig = new AdminConfig();\n        adminConfig.setConfigName(AdminConst.LOG_WELCOME_SPEECH);\n        adminConfig.setConfigValue(string);\n        adminConfigList.add(adminConfig);\n    }\n    adminConfigMapper.delete(new QueryWrapper<AdminConfig>().eq(\"config_name\", AdminConst.LOG_WELCOME_SPEECH));\n    adminConfigMapper.insertBatch(adminConfigList);\n}", "CodeBleu_score": 45.83927792465564}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t    List<AdminConfig> configList = new ArrayList<>();\n    stringList.forEach(s -> {\n        AdminConfig config = new AdminConfig();\n        config.setConfigName(AdminConst.LOG_WELCOME_SPEECH);\n        config.setConfigValue(s);\n        config.setCreateBy(UserUtil.getCurrentUser().getUsername());\n        config.setCreateTime(BaseUtil.getCurrentDate());\n        config.setUpdateBy(UserUtil.getCurrentUser().getUsername());\n        config.setUpdateTime(BaseUtil.getCurrentDate());\n        configList.add(config);\n    });\n    adminConfigService.remove(new QueryWrapper<AdminConfig>().eq(\"config_name\", AdminConst.LOG_WELCOME_SPEECH));\n    adminConfigService.saveBatch(configList);\n}", "CodeBleu_score": 51.15542376883578}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t     // \u6e05\u9664\u539f\u6709\u6570\u636e\n     QueryWrapper<AdminConfig> queryWrapper = new QueryWrapper<>();\n     queryWrapper.eq(\"config_name\", AdminConst.LOG_WELCOME_SPEECH);\n     adminConfigMapper.delete(queryWrapper);\n     // \u6279\u91cf\u4fdd\u5b58\n     List<AdminConfig> configList = stringList.stream().map(item -> {\n         AdminConfig config = new AdminConfig();\n         config.setConfigName(AdminConst.LOG_WELCOME_SPEECH);\n         config.setConfigValue(item);\n         return config;\n     }).collect(Collectors.toList());\n     adminConfigMapper.insertBatch(configList);\n }", "CodeBleu_score": 54.887875979066706}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    AdminUserVO adminUserVO = adminInitDataBO.getAdminUserVO();\n    String username = adminUserVO.getUsername();\n    String password = adminUserVO.getPassword();\n    AdminUser adminUser = adminUserService.getOne(new QueryWrapper<AdminUser>().eq(\"username\", username));\n    if (adminUser == null) {\n        throw new CrmException(AdminCodeEnum.ADMIN_USER_NOT_EXIST);\n    }\n    if (adminUser.getStatus() == 0) {\n        throw new CrmException(AdminCodeEnum.ADMIN_USER_DISABLED);\n    }\n    String salt = adminUser.getSalt();\n    String md5 = AuthPasswordUtil.md5(password, salt);\n    if (!Objects.equals(md5, adminUser.getPassword())) {\n        throw new CrmException(AdminCodeEnum.ADMIN_USER_PASSWORD_ERROR);\n    }\n    String accessCode = BaseUtil.getUUID();\n    redisUtil.set(AdminCacheKey.ADMIN_USER_ACCESS_CODE_KEY.getKey() + accessCode, adminUser.getId(), 600);\n    return accessCode;\n}", "CodeBleu_score": 41.610198592063405}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    // \u68c0\u67e5\u7528\u6237\u540d\u662f\u5426\u5b58\u5728\n    AdminUser adminUser = adminUserMapper.selectOne(new QueryWrapper<AdminUser>().eq(\"username\", adminInitDataBO.getUsername()));\n    if (adminUser == null) {\n        throw new CrmException(AdminCodeEnum.USER_NOT_EXIST);\n    }\n    // \u68c0\u67e5\u7528\u6237\u662f\u5426\u88ab\u7981\u7528\n    if (adminUser.getStatus() == 0) {\n        throw new CrmException(AdminCodeEnum.USER_DISABLED);\n    }\n    // \u68c0\u67e5\u5bc6\u7801\u662f\u5426\u6b63\u786e\n    if (!AuthPasswordUtil.checkPassword(adminInitDataBO.getPassword(), adminUser.getPassword())) {\n        throw new CrmException(AdminCodeEnum.PASSWORD_ERROR);\n    }\n    // \u751f\u6210\u4e34\u65f6\u7684\u8bbf\u95ee\u4ee4\u724c\n    String accessCode = RandomUtil.randomString(32);\n    // \u5c06\u8bbf\u95ee\u4ee4\u724c\u5b58\u5165Redis\uff0c\u5e76\u8bbe\u7f6e10\u5206\u949f\u8fc7\u671f\n    redisService.set(AdminCacheKey.ADMIN_ACCESS_CODE + accessCode, adminUser.getId(), 60 * 10);\n    return accessCode;\n}", "CodeBleu_score": 33.4267222698036}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    String userId = adminInitDataBO.getUserId();\n    AdminUser adminUser = adminUserService.getById(userId);\n    if (adminUser == null) {\n        throw new CrmException(SystemCodeEnum.USER_NOT_EXIST);\n    }\n    String salt = adminUser.getSalt();\n    String password = adminUser.getPassword();\n    String passwordInDB = AuthPasswordUtil.encryptPassword(adminInitDataBO.getPassword(), salt);\n    if (!passwordInDB.equals(password)) {\n        throw new CrmException(SystemCodeEnum.PASSWORD_ERROR);\n    }\n    String accessCode = RandomUtil.randomString(10);\n    redisService.set(AdminCacheKey.ACCESS_CODE, accessCode, 600);\n    return accessCode;\n}", "CodeBleu_score": 42.137789606826715}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t    String userId = UserUtil.getUserId();\n    String key = AdminCacheKey.getAdminInitAuthKey(userId);\n    List<String> initAuthList = redisTemplate.opsForList().range(key, 0, -1);\n    if (CollUtil.isNotEmpty(initAuthList)) {\n        for (String auth : initAuthList) {\n            if (StrUtil.equals(auth, getInitAuthUrl())) {\n                return true;\n            }\n        }\n    }\n    return false;\n}", "CodeBleu_score": 47.5519864004335}, {"code": "private boolean verifyInitAuth(){\n\t    String userId = UserUtil.getUserId();\n    String key = AdminCacheKey.INIT_AUTH_KEY.getKey(userId);\n    List<String> authUrls = redisService.getList(key);\n    return authUrls.contains(getInitAuthUrl());\n}", "CodeBleu_score": 42.1272964327812}, {"code": "private boolean verifyInitAuth(){\n\t    String userId = UserUtil.getUserId();\n    if (StrUtil.isBlank(userId)) {\n        return true;\n    }\n    String key = AdminCacheKey.getInitAuthKey(userId);\n    List<String> initAuthList = redisService.getList(key);\n    if (CollUtil.isEmpty(initAuthList)) {\n        return true;\n    }\n    String initAuthUrl = request.getRequestURI();\n    return initAuthList.stream().anyMatch(url -> initAuthUrl.contains(url));\n}", "CodeBleu_score": 41.85304333855473}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    String message = Const.SUCCESS;\n    List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    int result = adminRoleMenuMapper.batchSave(roleMenuList);\n    if (result < 1) {\n        message = Const.FAIL;\n    }\n}", "CodeBleu_score": 52.73608205344339}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    adminRoleMenuMapper.delete(new LambdaQueryWrapper<AdminRoleMenu>().eq(AdminRoleMenu::getRoleId, roleId));\n    this.saveBatch(roleMenuList);\n}", "CodeBleu_score": 56.41133544453898}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    adminRoleMenuService.saveBatch(roleMenuList);\n}", "CodeBleu_score": 57.98803074896871}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\t    try {\n        // \u83b7\u53d6\u65e5\u5fd7\u7d22\u5f15\n        String index = getIndex(sysLog.getCreateTime());\n        // \u5c06\u65e5\u5fd7\u5bf9\u8c61\u8f6c\u6362\u4e3amap\n        Map<String, Object> map = BeanUtil.beanToMap(sysLog);\n        // \u683c\u5f0f\u5316\u521b\u5efa\u65f6\u95f4\n        map.put(\"createTime\", DateUtil.formatDateTime(sysLog.getCreateTime()));\n        // \u79fb\u9664ID\n        map.remove(\"id\");\n        // \u521b\u5efa\u7d22\u5f15\u8bf7\u6c42\n        IndexRequest request = new IndexRequest(index);\n        // \u8bbe\u7f6e\u7d22\u5f15\u7c7b\u578b\n        request.type(\"_doc\");\n        // \u8bbe\u7f6e\u7d22\u5f15\u6570\u636e\n        request.source(map);\n        // \u6267\u884c\u8bf7\u6c42\n        IndexResponse response = restHighLevelClient.index(request, RequestOptions.DEFAULT);\n        // \u6253\u5370\u54cd\u5e94\u4fe1\u606f\n        System.out.println(response);\n    } catch (IOException e) {\n        // \u6253\u5370\u9519\u8bef\u4fe1\u606f\n        log.error(\"Save log failed, log: {}\", sysLog, e);\n    }\n}", "CodeBleu_score": 51.538476081294824}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t    try {\n        // \u83b7\u53d6\u7d22\u5f15\n        String index = \"syslog-\" + DateUtil.format(sysLog.getCreateTime(), \"yyyy.MM.dd\");\n        // \u521b\u5efa\u7d22\u5f15\n        createIndexRequest(index);\n        // \u5bf9\u8c61\u8f6cmap\n        Map<String, Object> jsonMap = BeanUtil.beanToMap(sysLog);\n        // \u683c\u5f0f\u5316\u65f6\u95f4\n        jsonMap.put(\"createTime\", DateUtil.format(sysLog.getCreateTime(), \"yyyy-MM-dd HH:mm:ss\"));\n        // \u79fb\u9664id\n        jsonMap.remove(\"id\");\n        // \u521b\u5efa\u7d22\u5f15\u8bf7\u6c42\n        IndexRequest request = new IndexRequest(index);\n        request.source(jsonMap, XContentType.JSON);\n        // \u63d0\u4ea4\u8bf7\u6c42\n        IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        log.error(\"\u65e5\u5fd7\u8bb0\u5f55\u5f02\u5e38\uff1a{}\", e.getMessage());\n    }\n}", "CodeBleu_score": 51.30667321907867}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t\n    //get the log index\n    String index = \"sys_log_index\";\n\n    //convert the log object to a map\n    Map<String, Object> map = BeanUtil.beanToMap(sysLog);\n\n    //format the creation time\n    map.put(\"createTime\", DateUtil.format(sysLog.getCreateTime(),\"yyyy-MM-dd HH:mm:ss\"));\n\n    //remove the ID\n    map.remove(\"id\");\n\n    //create an index request\n    IndexRequest indexRequest = new IndexRequest(index);\n\n    //set the index request source\n    indexRequest.source(map, XContentType.JSON);\n\n    //submit the index request to the Elasticsearch client\n    try {\n        IndexResponse indexResponse = client.index(indexRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        //log the error message\n        log.error(\"save sys log error: {}\", e.getMessage());\n    }\n}", "CodeBleu_score": 50.24285218572404}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t\n    // \u521d\u59cb\u5316\u641c\u7d22\u6761\u4ef6\n    SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n    // \u521b\u5efa\u65f6\u95f4\u8303\u56f4\u641c\u7d22\n    if (StrUtil.isNotBlank(querySysLogBO.getStartDate()) && StrUtil.isNotBlank(querySysLogBO.getEndDate())) {\n        boolQueryBuilder.must(QueryBuilders.rangeQuery(\"createTime\").gte(querySysLogBO.getStartDate()).lte(querySysLogBO.getEndDate()));\n    }\n    // \u641c\u7d22\u6761\u4ef6\u641c\u7d22\n    if (StrUtil.isNotBlank(querySysLogBO.getSearchKey())) {\n        boolQueryBuilder.must(QueryBuilders.queryStringQuery(querySysLogBO.getSearchKey()));\n    }\n    // \u64cd\u4f5c\u7c7b\u578b\u641c\u7d22\n    if (StrUtil.isNotBlank(querySysLogBO.getOperateType())) {\n        boolQueryBuilder.must(QueryBuilders.termQuery(\"operateType\", querySysLogBO.getOperateType()));\n    }\n    // \u64cd\u4f5c\u4eba\u641c\u7d22\n    if (StrUtil.isNotBlank(querySysLogBO.getOperateUser())) {\n        boolQueryBuilder.must(QueryBuilders.termQuery(\"operateUser\", querySysLogBO.getOperateUser()));\n    }\n    // \u64cd\u4f5c\u72b6\u6001\u641c\u7d22\n    if (StrUtil.isNotBlank(querySysLogBO.getOperateStatus())) {\n        boolQueryBuilder.must(QueryBuilders.termQuery(\"operateStatus\", querySysLogBO.getOperateStatus()));\n    }\n    // \u641c\u7d22\u6761\u4ef6\n    searchSourceBuilder.query(boolQueryBuilder);\n    // \u6392\u5e8f\u6761\u4ef6\n    searchSourceBuilder.sort(\"createTime\", SortOrder.DESC);\n    // \u5206\u9875\u6761\u4ef6\n    searchSourceBuilder.from((querySysLogBO.getPageNum() - 1) * querySysLogBO.getPageSize());", "CodeBleu_score": 27.753915166492288}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t    BasePage<SysLog> basePage = new BasePage<>();\n    try {\n        // \u521d\u59cb\u5316\u67e5\u8be2\u6761\u4ef6\n        QueryBuilder queryBuilder = QueryBuilders.boolQuery()\n                .must(QueryBuilders.rangeQuery(\"createTime\").gte(querySysLogBO.getStartTime()).lte(querySysLogBO.getEndTime()))\n                .must(QueryBuilders.termQuery(\"type\", querySysLogBO.getType()));\n        if (StrUtil.isNotBlank(querySysLogBO.getUserId())) {\n            queryBuilder = QueryBuilders.boolQuery().must(queryBuilder).must(QueryBuilders.termQuery(\"userId\", querySysLogBO.getUserId()));\n        }\n        if (StrUtil.isNotBlank(querySysLogBO.getUsername())) {\n            queryBuilder = QueryBuilders.boolQuery().must(queryBuilder).must(QueryBuilders.termQuery(\"username\", querySysLogBO.getUsername()));\n        }\n        if (StrUtil.isNotBlank(querySysLogBO.getOperation())) {\n            queryBuilder = QueryBuilders.boolQuery().must(queryBuilder).must(QueryBuilders.termQuery(\"operation\", querySysLogBO.getOperation()));\n        }\n        if (StrUtil.isNotBlank(querySysLogBO.getIp())) {\n            queryBuilder = QueryBuilders.boolQuery().must(queryBuilder).must(QueryBuilders.termQuery(\"ip\", querySysLogBO.getIp()));\n        }\n        // \u6392\u5e8f\u6761\u4ef6\n        SortOrder sortOrder = SortOrder.DESC;\n        if (StrUtil.isNotBlank(querySysLogBO.getSortOrder()) && querySysLogBO.getSortOrder().equals(\"asc\")) {\n            sortOrder = SortOrder.ASC;\n        }\n        // \u521d\u59cb\u5316\u641c\u7d22\u6e90\u6784\u5efa\u5668\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchSourceBuilder.query(queryBuilder).sort(\"createTime\", sortOrder);\n        // \u6392\u9664\u5b57\u6bb5\n        String[] excludeFields = {\"sort\", \"type\", \"keyword\", \"highlight", "CodeBleu_score": 37.352411376950975}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t    BasePage<SysLog> page = new BasePage<>();\n    // 1. Initialize search criteria\n    SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n    // 2. Set search criteria\n    if (StrUtil.isNotBlank(querySysLogBO.getUsername())) {\n        boolQueryBuilder.must(QueryBuilders.matchQuery(\"username\", querySysLogBO.getUsername()));\n    }\n    if (StrUtil.isNotBlank(querySysLogBO.getOperation())) {\n        boolQueryBuilder.must(QueryBuilders.matchQuery(\"operation\", querySysLogBO.getOperation()));\n    }\n    if (StrUtil.isNotBlank(querySysLogBO.getStartTime())) {\n        boolQueryBuilder.must(QueryBuilders.rangeQuery(\"createTime\").from(querySysLogBO.getStartTime(), false));\n    }\n    if (StrUtil.isNotBlank(querySysLogBO.getEndTime())) {\n        boolQueryBuilder.must(QueryBuilders.rangeQuery(\"createTime\").to(querySysLogBO.getEndTime()));\n    }\n    sourceBuilder.query(boolQueryBuilder);\n    // 3. Sort results by creation time in descending order\n    sourceBuilder.sort(\"createTime\", SortOrder.DESC);\n    // 4. Exclude specific fields from the response\n    String[] includeFields = new String[]{\"username\", \"operation\", \"method\", \"params\", \"time\", \"ip\", \"createTime\"};\n    sourceBuilder.fetchSource(includeFields, null);\n    // 5. Set page number and size\n    int pageNo = querySysLogBO.getPageNo();\n    int pageSize = querySysLogBO.getPageSize();\n    sourceBuilder.from((pageNo - 1) * pageSize);\n    sourceBuilder.size(pageSize);\n    // 6. Execute the search request\n    SearchRequest searchRequest = new SearchRequest(\"sys_log_index\");\n    searchRequest.source(sourceBuilder);\n    SearchResponse searchResponse = null;\n    try {\n        searchResponse = restHighLevelClient.search(search", "CodeBleu_score": 42.80907034872917}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\t  const file = fs.createWriteStream(dest);\n  const response = await axios({\n    url,\n    method: 'GET',\n    responseType: 'stream',\n  });\n\n  response.data.pipe(file);\n\n  return new Promise((resolve, reject) => {\n    file.on('finish', () => {\n      file.close();\n      resolve();\n    });\n    file.on('error', (err) => {\n      file.close();\n      fs.unlink(dest, () => {});\n      reject(err);\n    });\n  });\n}", "CodeBleu_score": 49.78289767581484}, {"code": "async function downloadFile(url, dest){\n\t  const file = fs.createWriteStream(dest, { encoding: 'binary' });\n  const response = await axios({\n    url,\n    method: 'GET',\n    responseType: 'stream'\n  });\n\n  response.data.pipe(file);\n\n  return new Promise((resolve, reject) => {\n    file.on('finish', () => {\n      file.close();\n      resolve();\n    });\n    file.on('error', err => {\n      file.close();\n      fs.unlink(dest, () => {});\n      reject(err);\n    });\n  });\n}", "CodeBleu_score": 46.296942166690904}, {"code": "async function downloadFile(url, dest){\n\t  const file = fs.createWriteStream(dest, {\n    flags: 'wx',\n  })\n\n  const response = await axios({\n    url,\n    method: 'GET',\n    responseType: 'stream',\n  })\n\n  response.data.pipe(file)\n\n  return new Promise((resolve, reject) => {\n    file.on('finish', () => {\n      file.close()\n      resolve()\n    })\n\n    file.on('error', (error) => {\n      file.close()\n      fs.unlink(dest, () => {\n        reject(error)\n      })\n    })\n  })\n}", "CodeBleu_score": 47.64542934028476}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t    return getDependentModulesFromDsl(module.getDsl())\n        .filter(id -> !circularDependencyCheckSet.contains(id))\n        .doOnNext(id -> circularDependencyCheckSet.add(id))\n        .flatMap(id -> getApplicationById(id))\n        .doOnError(error -> log.warn(\"Error retrieving dependent module: {}\", error.getMessage()));\n}", "CodeBleu_score": 55.18952764495464}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t    return Flux.fromIterable(getDependentModulesFromDsl(module.getDsl()))\n        .filter(dependentModuleId -> !circularDependencyCheckSet.contains(dependentModuleId))\n        .doOnNext(circularDependencyCheckSet::add)\n        .flatMap(applicationRepository::findById)\n        .doOnError(e -> log.warn(\"Failed to retrieve dependent module for module \" + module.getId(), e))\n        .onErrorResume(e -> Mono.empty());\n}", "CodeBleu_score": 47.97527178904222}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t  return Flux.fromIterable(getDependentModulesFromDsl(module.getDsl()))\n      .filter(dependentModuleId -> !circularDependencyCheckSet.contains(dependentModuleId))\n      .doOnNext(circularDependencyCheckSet::add)\n      .flatMap(dependentModuleId -> findById(dependentModuleId))\n      .doOnError(e -> log.warn(\"Failed to retrieve dependent module for module ID: \" + module.getId() + \", with error: \" + e.getMessage()));\n}", "CodeBleu_score": 55.575245848023755}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        Object value = entry.getValue();\n        if (value instanceof Map) {\n            Map<?, ?> nestedMap = (Map<?, ?>) value;\n            if (nestedMap.containsKey(\"componentType\") && StringUtils.equals(nestedMap.get(\"componentType\"), \"module\")) {\n                if (nestedMap.containsKey(\"appId\") && StringUtils.isNotBlank(nestedMap.get(\"appId\").toString())) {\n                    dependentModuleIds.add(nestedMap.get(\"appId\").toString());\n                }\n            }\n            doGetDependentModules(nestedMap, dependentModuleIds);\n        } else if (value instanceof List) {\n            List<?> list = (List<?>) value;\n            for (Object object : list) {\n                if (object instanceof Map) {\n                    doGetDependentModules((Map<?, ?>) object, dependentModuleIds);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 42.56381062185621}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        if (entry.getKey().toString().equals(\"componentType\") && entry.getValue().toString().equals(\"module\")) {\n            if (StringUtils.isNotBlank(map.get(\"appId\").toString())) {\n                dependentModuleIds.add(map.get(\"appId\").toString());\n            }\n        }\n        if (entry.getValue() instanceof Map) {\n            doGetDependentModules((Map<?, ?>) entry.getValue(), dependentModuleIds);\n        } else if (entry.getValue() instanceof List) {\n            for (Object item : (List<?>) entry.getValue()) {\n                if (item instanceof Map) {\n                    doGetDependentModules((Map<?, ?>) item, dependentModuleIds);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 37.59810981409021}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        if (entry.getKey().equals(\"componentType\") && entry.getValue().equals(\"module\")) {\n            String appId = (String) map.get(\"appId\");\n            if (StringUtils.isNotBlank(appId)) {\n                dependentModuleIds.add(appId);\n            }\n        } else if (entry.getValue() instanceof Map<?, ?>) {\n            doGetDependentModules((Map<?, ?>) entry.getValue(), dependentModuleIds);\n        } else if (entry.getValue() instanceof List<?>) {\n            for (Object listEntry : (List<?>) entry.getValue()) {\n                if (listEntry instanceof Map<?, ?>) {\n                    doGetDependentModules((Map<?, ?>) listEntry, dependentModuleIds);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 46.93345971004445}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t    Image image = ImageIO.read(dataBuffer.asInputStream());\n    if (image == null) {\n        throw new BizException(BizError.INVALID_IMAGE);\n    }\n    if (createThumbnail) {\n        image = image.getScaledInstance(128, 128, Image.SCALE_SMOOTH);\n    }\n    BufferedImage bufferedImage = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_RGB);\n    bufferedImage.createGraphics().drawImage(image, 0, 0, Color.WHITE, null);\n    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n    ImageIO.write(bufferedImage, \"jpg\", byteArrayOutputStream);\n    DataBufferUtils.release(dataBuffer);\n    Asset asset = new Asset();\n    asset.setContentType(MediaType.IMAGE_JPEG);\n    asset.setData(byteArrayOutputStream.toByteArray());\n    return asset;\n}", "CodeBleu_score": 38.43327013757026}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t    Image image = ImageIO.read(dataBuffer.asInputStream());\n    if (image == null) {\n        throw new BizException(BizError.ASSET_INVALID_IMAGE);\n    }\n    if (createThumbnail) {\n        BufferedImage bufferedImage = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_RGB);\n        bufferedImage.createGraphics().drawImage(image, 0, 0, Color.WHITE, null);\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        ImageIO.write(bufferedImage, \"jpg\", baos);\n        dataBuffer = DefaultDataBufferFactory.sharedInstance.wrap(baos.toByteArray());\n        srcContentType = MediaType.IMAGE_JPEG;\n    }\n    DataBufferUtils.release(dataBuffer);\n    return Asset.builder().contentType(srcContentType).data(dataBuffer).build();\n}", "CodeBleu_score": 41.63439694293672}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t    BufferedImage srcImage = ImageIO.read(dataBuffer.asInputStream());\n    int width = srcImage.getWidth();\n    int height = srcImage.getHeight();\n    int resizeWidth = width;\n    int resizeHeight = height;\n    if (createThumbnail) {\n        if (width > height) {\n            resizeWidth = 128;\n            resizeHeight = height * 128 / width;\n        } else {\n            resizeHeight = 128;\n            resizeWidth = width * 128 / height;\n        }\n    }\n    BufferedImage resizedImage = new BufferedImage(resizeWidth, resizeHeight, BufferedImage.TYPE_INT_RGB);\n    resizedImage.getGraphics().drawImage(srcImage.getScaledInstance(resizeWidth, resizeHeight, Image.SCALE_SMOOTH), 0, 0, null);\n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n    ImageIO.write(resizedImage, \"jpeg\", os);\n    byte[] imageData = os.toByteArray();\n    Asset asset = new Asset();\n    asset.setContentType(MediaType.IMAGE_JPEG);\n    asset.setContent(imageData);\n    return asset;\n}", "CodeBleu_score": 38.97817167056751}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t  return Mono.just(assetId)\n      .flatMap(assetId -> assetService.getAsset(assetId))\n      .doOnNext(asset -> {\n        ServerHttpResponse response = exchange.getResponse();\n        response.setStatusCode(HttpStatus.OK);\n        response.getHeaders().add(HttpHeaders.CONTENT_TYPE, asset.getContentType());\n      })\n      .flatMap(asset -> DataBufferUtils.write(exchange.getResponse().bufferFactory().wrap(asset.getData()), exchange.getResponse()))\n      .doOnError(e -> {\n        ServerHttpResponse response = exchange.getResponse();\n        response.setStatusCode(HttpStatus.NOT_FOUND);\n      });\n}", "CodeBleu_score": 49.9060651579304}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return Mono.just(assetId).flatMap(id -> {\n        Asset asset = AssetService.getAssetById(id);\n        if (asset == null) {\n            return Mono.error(new BizException(BizError.ASSET_NOT_FOUND));\n        }\n        ServerHttpResponse response = exchange.getResponse();\n        response.setStatusCode(HttpStatus.OK);\n        response.getHeaders().set(HttpHeaders.CONTENT_TYPE, asset.getContentType());\n        return DataBufferUtils.write(response.bufferFactory().allocateBuffer(), response, asset.getData());\n    });\n}", "CodeBleu_score": 52.18524148729308}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return Mono.just(assetId)\n        .flatMap(id -> assetService.getAsset(id))\n        .switchIfEmpty(Mono.error(new BizException(BizError.ASSET_NOT_FOUND)))\n        .flatMap(asset -> {\n            ServerHttpResponse response = exchange.getResponse();\n            response.setStatusCode(HttpStatus.OK);\n            if (asset.getContentType() != null) {\n                response.getHeaders().set(HttpHeaders.CONTENT_TYPE, asset.getContentType());\n            }\n            DataBufferFactory dataBufferFactory = new DefaultDataBufferFactory();\n            DataBuffer dataBuffer = dataBufferFactory.wrap(asset.getData());\n            return response.writeWith(Mono.just(dataBuffer));\n        });\n}", "CodeBleu_score": 55.41263136838741}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    if(commonConfig.getWorkspaceMode() == WorkspaceMode.SAAS) {\n        return Flux.empty();\n    }\n    return organizationService.findAll()\n        .flatMapIterable(organizations -> organizations)\n        .map(organization -> new FindAuthConfig(organization.getId(), organization.getName()));\n}", "CodeBleu_score": 31.588253102018005}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    if (this.workspaceMode == WorkspaceMode.SAAS) {\n        return Flux.empty();\n    }\n    return this.organizationService.findAll().flatMap(organization -> {\n        return this.authProperties.getConfigs().stream()\n            .filter(authConfig -> Objects.equals(authConfig.getOrganizationId(), organization.getId()))\n            .map(authConfig -> {\n                return new FindAuthConfig(organization.getId(), authConfig.getId(), authConfig.getName());\n            })\n            .collect(Collectors.toList());\n    });\n}", "CodeBleu_score": 38.57988373607474}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    if (this.workspaceMode == WorkspaceMode.SAAS) {\n        return Flux.empty();\n    }\n    return organizationService.findAll().flatMap(organization -> {\n        return authConfigService.findAll(organization.getId()).map(authConfig -> {\n            return new FindAuthConfig(authConfig, organization);\n        });\n    });\n}", "CodeBleu_score": 34.47058082523741}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n        .setDriver(SpringDataMongoV3Driver.withLockStrategy(\n            SpringDataMongoV3Driver.LockStrategy.NONE,\n            mongoTemplate\n        ))\n        .setSpringContext(springContext)\n        .addChangeLogsScanPackage(\"com.openblocks.module.moneylover.changelog\")\n        .buildApplicationRunner();\n}", "CodeBleu_score": 28.345500189908368}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    SpringDataMongoV3Driver driver = SpringDataMongoV3Driver.withDefaultLock(mongoTemplate);\n    driver.setWriteConcern(WriteConcern.MAJORITY.withJournal(true));\n    driver.setReadConcern(ReadConcern.MAJORITY);\n    driver.setReadPreference(ReadPreference.primary());\n\n    return MongockSpring5.builder()\n        .setDriver(driver)\n        .addChangeLogsScanPackage(\"com.openblocks.mongock.changelogs\")\n        .setSpringContext(springContext)\n        .buildApplicationRunner();\n}", "CodeBleu_score": 52.30377015665459}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n        .setDriver(SpringDataMongoV3Driver.withDefaultLock(mongoTemplate))\n        .addChangeLogsScanPackage(\"com.openblocks.module.mongock\")\n        .setSpringContext(springContext)\n        .buildApplicationRunner();\n}", "CodeBleu_score": 24.59651390101504}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t    ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n    reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n    return reactiveMongoTemplate;\n}", "CodeBleu_score": 77.17711848849393}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate mongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        mongoTemplate.setWriteConcern(WriteConcern.W1);\n        mongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        mongoTemplate.setReadConcern(ReadConcern.LOCAL);\n        return mongoTemplate;\n}", "CodeBleu_score": 75.94250158183753}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t    ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n    reactiveMongoTemplate.setWriteConcern(WriteConcern.ACKNOWLEDGED);\n    reactiveMongoTemplate.setReadConcern(ReadConcern.MAJORITY);\n    reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n    return reactiveMongoTemplate;\n}", "CodeBleu_score": 65.08525066890908}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return libraryQueryRepository.findTopByLibraryQueryIdOrderByCreatedAtDesc(libraryQueryId)\n        .flatMap(libraryQueryRecord -> {\n            return Mono.just(libraryQueryRecord.getDsl());\n        })\n        .switchIfEmpty(\n            libraryQueryRepository.findById(libraryQueryId)\n                .flatMap(libraryQuery -> {\n                    return Mono.just(libraryQuery.getDsl());\n                })\n                .switchIfEmpty(deferredError(LIBRARY_QUERY_NOT_FOUND))\n        );\n}", "CodeBleu_score": 46.86188188997475}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return libraryQueryRepository.findFirstByLibraryQueryIdOrderByVersionDesc(libraryQueryId)\n        .switchIfEmpty(\n            Mono.error(deferredError(LIBRARY_QUERY_NOT_FOUND, \"libraryQueryId\", libraryQueryId)))\n        .map(LibraryQueryRecord::getDsl);\n}", "CodeBleu_score": 40.60222586829135}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return libraryQueryRepository.findFirstByLibraryQueryIdOrderByVersionDesc(libraryQueryId)\n        .switchIfEmpty(Mono.defer(() -> libraryQueryRepository.findById(libraryQueryId)\n            .switchIfEmpty(deferredError(LIBRARY_QUERY_NOT_FOUND))))\n        .map(LibraryQueryRecord::getDsl);\n}", "CodeBleu_score": 55.54606794844954}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        return Mono.fromCallable(() -> {\n            Duration timeoutDuration = QueryTimeoutUtils.getTimeoutDuration(timeoutStr);\n            return datasource.getType().equals(\"node\") ?\n                    executeQueryOnNode(datasource, queryConfig, requestParams, timeoutDuration, queryVisitorContext) :\n                    executeQueryLocally(datasource, queryConfig, requestParams, timeoutDuration, queryVisitorContext);\n        })\n                .onErrorMap(TimeoutException.class, e -> ofException(QUERY_EXECUTION_TIMEOUT, e))\n                .onErrorMap(PluginException.class, e -> ofException(QUERY_EXECUTION_ERROR, e))\n                .onErrorMap(Exception.class, e -> ofException(QUERY_EXECUTION_ERROR, e))\n                .doOnError(e -> log.error(\"Error executing query\", e));\n    }", "CodeBleu_score": 47.64005540981473}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        log.info(\"Executing query {}\", queryVisitorContext.getQueryId());\n        // Get the datasource type and determine the timeout duration\n        String datasourceType = datasource.getType();\n        Duration timeoutDuration = QueryTimeoutUtils.getTimeoutDuration(timeoutStr);\n        // Get the datasource connection\n        DatasourceConnectionHolder connectionHolder = datasourceConnectionPool.getConnection(datasource.getId());\n        if (connectionHolder == null) {\n            log.error(\"Failed to get connection for datasource {}\", datasource.getId());\n            return Mono.just(QueryExecutionResult.builder().queryId(queryVisitorContext.getQueryId())\n                    .error(ofException(new BizException(QUERY_EXECUTION_ERROR, \"Failed to get connection for datasource \" + datasource.getId()))).build());\n        }\n        // Execute the query\n        Mono<QueryExecutionResult> queryExecutionResultMono = datasourceType.equals(\"js\") ? executeQueryUsingNode(datasource, queryConfig, requestParams,\n                connectionHolder, queryVisitorContext) : executeQueryLocally(datasource, queryConfig, requestParams,\n                        connectionHolder, queryVisitorContext);\n        // Handle the timeout exception\n        return queryExecutionResultMono.timeout(timeoutDuration, Mono.error(new TimeoutException()))\n                .onErrorResume(TimeoutException.class, e -> Mono.just(QueryExecutionResult.builder().queryId(queryVisitorContext.getQueryId())\n                        .error(ofException(new PluginException(QUERY_EXECUTION_TIMEOUT, \"Query execution timeout\"))).build()))\n                .onErrorResume(PluginException.class, e -> Mono.just(QueryExecutionResult.builder().queryId(queryVisitorContext.getQueryId())\n                        .error(ofException(e)).build()))\n                .onErrorResume(BizException.class, e -> Mono.just(QueryExecutionResult.builder().queryId(queryVisitorContext.getQueryId())\n                        .error(ofException(e)).build()))\n                .onErrorResume(Exception.class, e -> {\n                    log.error(\"Failed to execute query {}\",", "CodeBleu_score": 39.97137884652333}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t    Duration timeout = QueryTimeoutUtils.parseTimeout(timeoutStr);\n    if (timeout == null) {\n        return Mono.just(QueryExecutionResult.error(QUERY_EXECUTION_ERROR, \"Invalid timeout value\"));\n    }\n    return Mono.just(datasource)\n            .flatMap(ds -> {\n                DatasourceConnectionHolder connectionHolder = datasourceConnectionPool.getConnectionHolder(ds);\n                if (connectionHolder == null) {\n                    return Mono.error(new BizException(QUERY_EXECUTION_ERROR, \"Datasource connection not found\"));\n                }\n                return Mono.just(connectionHolder);\n            })\n            .flatMap(connectionHolder -> {\n                QueryExecutionContext context = new QueryExecutionContext(queryConfig, requestParams, connectionHolder,\n                        queryVisitorContext);\n                return datasourcePluginClient.executeQuery(context)\n                        .timeout(timeout)\n                        .onErrorResume(TimeoutException.class, e -> Mono.just(QueryExecutionResult.error(QUERY_EXECUTION_TIMEOUT, \"Query execution timed out\")))\n                        .onErrorResume(PluginException.class, e -> Mono.just(QueryExecutionResult.error(e.getErrorCode(), e.getMessage())))\n                        .onErrorResume(Exception.class, e -> {\n                            log.error(\"Error while executing query\", e);\n                            return Mono.just(QueryExecutionResult.error(QUERY_EXECUTION_ERROR, ofException(e)));\n                        });\n            });\n}", "CodeBleu_score": 41.892473108421314}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t    return Mono.fromSupplier(() -> {\n        DatasourceConnectionHolder connectionHolder = datasourceConnectionPool.getConnection(datasource);\n        DatasourcePluginClient datasourcePluginClient = datasourceMetaInfoService.getDatasourcePluginClient(datasource.getType());\n        QueryExecutionContext queryExecutionContext = datasourcePluginClient.buildQueryExecutionContext(queryConfig, requestParams,\n                queryVisitorContext);\n        try {\n            return datasourcePluginClient.executeQuery(queryExecutionContext, connectionHolder.getConnection());\n        } catch (Exception e) {\n            throw new BizException(QUERY_EXECUTION_ERROR, ofException(e));\n        }\n    }).timeout(Duration.ofMillis(datasource.getQueryTimeout()))\n            .onErrorMap(TimeoutException.class, e -> new PluginException(QUERY_EXECUTION_TIMEOUT, ofException(e)));\n}", "CodeBleu_score": 47.780311358962116}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t    log.debug(\"Executing query locally\");\n    String datasourceType = datasource.getDatasourceType();\n    DatasourcePluginClient datasourcePluginClient = datasourcePluginClientMap.get(datasourceType);\n    if (datasourcePluginClient == null) {\n        log.error(\"Datasource plugin client not found for datasource type {}\", datasourceType);\n        return Mono.error(new BizException(QUERY_EXECUTION_ERROR, \"Datasource plugin client not found for datasource type \" + datasourceType));\n    }\n    DatasourceConnectionHolder datasourceConnectionHolder = datasourceConnectionPool.getConnection(datasource.getDatasourceId());\n    if (datasourceConnectionHolder == null) {\n        log.error(\"Datasource connection not found for datasource {}\", datasource.getDatasourceId());\n        return Mono.error(new BizException(QUERY_EXECUTION_ERROR, \"Datasource connection not found for datasource \" + datasource.getDatasourceId()));\n    }\n    QueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, datasourceConnectionHolder, queryConfig, requestParams, queryVisitorContext);\n    return datasourcePluginClient.executeQuery(queryExecutionContext)\n            .timeout(Duration.ofSeconds(queryTimeout))\n            .onErrorMap(TimeoutException.class, e -> ofException(QUERY_EXECUTION_TIMEOUT, e))\n            .onErrorMap(PluginException.class, e -> ofException(QUERY_EXECUTION_ERROR, e))\n            .doFinally(signalType -> datasourceConnectionPool.releaseConnection(datasource.getDatasourceId(), datasourceConnectionHolder));\n}", "CodeBleu_score": 45.005692273445014}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\n        // Retrieve the appropriate query executor for the datasource type\n        DatasourcePluginClient datasourcePluginClient = datasourceMetaInfoService.getDatasourcePluginClient(datasource.getType());\n        if (datasourcePluginClient == null) {\n            return Mono.error(new BizException(QUERY_EXECUTION_ERROR, \"Unable to find datasource plugin for type \" + datasource.getType()));\n        }\n\n        // Build the query execution context\n        QueryExecutionContext queryExecutionContext = QueryExecutionContext.builder()\n                .datasource(datasource)\n                .queryConfig(queryConfig)\n                .requestParams(requestParams)\n                .queryVisitorContext(queryVisitorContext)\n                .build();\n\n        // Acquire a connection from the datasource connection pool\n        Mono<DatasourceConnectionHolder> datasourceConnectionHolderMono = datasourceConnectionPool.acquire(datasource);\n\n        // Execute the query using the connection and handle any errors that occur during execution\n        return datasourceConnectionHolderMono\n                .flatMap(datasourceConnectionHolder -> {\n                    try {\n                        return datasourcePluginClient.executeQuery(datasourceConnectionHolder.getConnection(), queryExecutionContext)\n                                .doFinally(signalType -> datasourceConnectionPool.release(datasourceConnectionHolder));\n                    } catch (Exception e) {\n                        datasourceConnectionPool.release(datasourceConnectionHolder);\n                        return Mono.error(e);\n                    }\n                })\n                .timeout(Duration.ofMillis(queryVisitorContext.getQueryExecutionTimeoutMs()))\n                .onErrorMap(TimeoutException.class, e -> ofException(QUERY_EXECUTION_TIMEOUT, e))\n                .onErrorMap(PluginException.class, e -> ofException(QUERY_EXECUTION_ERROR, e));\n    }", "CodeBleu_score": 42.82769049709493}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t  if (StringUtils.isBlank(timeoutStr)) {\n    return DEFAULT_QUERY_TIMEOUT_MS;\n  }\n\n  Pair<String, String> valueAndUnit = parseValueAndUnit(timeoutStr);\n  int value = NumberUtils.toInt(valueAndUnit.getLeft());\n  String unit = valueAndUnit.getRight();\n  if (value <= 0 || !TIMEOUT_UNIT_MAP.containsKey(unit)) {\n    throw new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout: \" + timeoutStr);\n  }\n\n  int timeoutMs = value * TIMEOUT_UNIT_MAP.get(unit);\n  if (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n    throw new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"Query timeout exceeds maximum allowed timeout: \" + timeoutStr);\n  }\n\n  return timeoutMs;\n}", "CodeBleu_score": 43.44441139929332}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t    if (StringUtils.isBlank(timeoutStr)) {\n        return 1000;\n    }\n    Pair<Long, String> valueAndUnit = parseValueAndUnit(timeoutStr);\n    long value = valueAndUnit.getLeft();\n    String unit = valueAndUnit.getRight();\n    if (value < 0) {\n        throw new PluginException(QUERY_ARGUMENT_ERROR, \"Query timeout cannot be negative.\");\n    }\n    long timeoutMs = convertToMs(value, unit);\n    if (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n        throw new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"Query timeout cannot exceed 10 minutes.\");\n    }\n    return (int) timeoutMs;\n}", "CodeBleu_score": 37.9629514542847}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t    // If the timeout string is blank, use the default timeout.\n    if (StringUtils.isBlank(timeoutStr)) {\n        return Duration.ofSeconds(5).toMillis();\n    }\n\n    // If the timeout string is not blank, parse the numeric value and unit.\n    Pair<Integer, String> valueAndUnit = parseTimeoutValueAndUnit(timeoutStr);\n    int value = valueAndUnit.getLeft();\n    String unit = valueAndUnit.getRight();\n\n    // If the unit is blank, use the default unit.\n    if (StringUtils.isBlank(unit)) {\n        unit = \"s\";\n    }\n\n    // Convert the numeric value to milliseconds.\n    int timeoutMs = convertValueToMs(value, unit);\n\n    // If the timeout exceeds the maximum allowed timeout, throw an exception.\n    if (timeoutMs > Duration.ofMinutes(5).toMillis()) {\n        throw new PluginException(EXCEED_MAX_QUERY_TIMEOUT);\n    }\n\n    return timeoutMs;\n}", "CodeBleu_score": 35.73400739202006}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t        return Mono.just(application.getQueries())\n                .filter(queries -> !queries.isEmpty())\n                .flatMapMany(Flux::fromIterable)\n                .map(ApplicationQuery::getDatasourceId)\n                .distinct()\n                .flatMap(datasourceId -> datasourceService.getDatasourceById(datasourceId)\n                        .flatMap(datasource -> datasourceService.createDatasource(currentOrganizationId,\n                                new Datasource(datasource.getName(), datasource.getType(), DatasourceCreationSource.TEMPLATE),\n                                visitorId))\n                        .map(newDatasource -> Pair.of(datasourceId, newDatasource.getId())))\n                .collectList();\n}", "CodeBleu_score": 29.76737056297731}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t    return Mono.zip(\n            Mono.just(application),\n            Mono.just(currentOrganizationId),\n            Mono.just(visitorId)\n        )\n        .flatMap(tuple -> {\n            Application application = tuple.getT1();\n            String currentOrganizationId = tuple.getT2();\n            String visitorId = tuple.getT3();\n\n            return Mono.zip(\n                Mono.just(application),\n                Mono.just(currentOrganizationId),\n                Mono.just(visitorId),\n                applicationService.getApplicationLiveQueries(application.getId(), visitorId)\n            );\n        })\n        .flatMap(tuple -> {\n            Application application = tuple.getT1();\n            String currentOrganizationId = tuple.getT2();\n            String visitorId = tuple.getT3();\n            List<ApplicationQuery> liveQueries = tuple.getT4();\n\n            if (liveQueries.isEmpty()) {\n                return Mono.error(ofError(TEMPLATE_NOT_CORRECT, \"Cannot find live queries for application \" + application.getName()));\n            }\n\n            Set<String> datasourceIds = liveQueries.stream()\n                .map(query -> query.getDatasourceId())\n                .collect(Collectors.toSet());\n\n            return Flux.fromIterable(datasourceIds)\n                .flatMap(datasourceId -> {\n                    return datasourceService.getDatasourceById(datasourceId, visitorId)\n                        .flatMap(datasource -> {\n                            return datasourceService.copyDatasource(datasource, currentOrganizationId, visitorId)\n                                .map(copiedDatasource -> Pair.of(datasource.getId(), copiedDatasource.getId()));\n                        });\n                })\n                .collectList();\n        });\n}", "CodeBleu_score": 47.813527827902604}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t        return applicationService.getApplicationQueries(application.getId(), visitorId)\n                .flatMap(queries -> {\n                    if (queries.isEmpty()) {\n                        return deferredError(TEMPLATE_NOT_CORRECT);\n                    }\n                    Set<String> datasourceIds = queries.stream().map(ApplicationQuery::getDatasourceId).collect(Collectors.toSet());\n                    return datasourceService.getDatasources(datasourceIds, visitorId)\n                            .flatMapIterable(datasources -> datasources)\n                            .flatMap(datasource -> datasourceService.copyDatasource(currentOrganizationId, datasource, visitorId))\n                            .map(TupleUtils::toPair)\n                            .collectList();\n                });\n    }", "CodeBleu_score": 47.71430143299244}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.findById(datasourceId)\n        .flatMap(datasource -> {\n            if (datasource.getCreationSource() == DatasourceCreationSource.SYSTEM_STATIC) {\n                return Mono.just(datasource.getId());\n            }\n            else if (datasource.getCreationSource() == DatasourceCreationSource.LEGACY_QUICK_API || datasource.getCreationSource() == DatasourceCreationSource.LEGACY_OPENBLOCKS_API) {\n                return Mono.just(datasource.getId());\n            }\n            else {\n                Datasource newDatasource = new Datasource();\n                newDatasource.setName(datasource.getName());\n                newDatasource.setDescription(datasource.getDescription());\n                newDatasource.setOrganizationId(organizationId);\n                newDatasource.setVisitorId(visitorId);\n                newDatasource.setCreationSource(DatasourceCreationSource.OPENBLOCKS_API);\n                newDatasource.setApiKey(RandomStringUtils.randomAlphanumeric(32));\n                newDatasource.setApiSecret(RandomStringUtils.randomAlphanumeric(32));\n                newDatasource.setApiUrl(datasource.getApiUrl());\n                newDatasource.setApiType(datasource.getApiType());\n                newDatasource.setApiVersion(datasource.getApiVersion());\n                newDatasource.setApiDescription(datasource.getApiDescription());\n                newDatasource.setApiStatus(datasource.getApiStatus());\n                newDatasource.setApiStatusDescription(datasource.getApiStatusDescription());\n                newDatasource.setApiDocumentationUrl(datasource.getApiDocumentationUrl());\n                newDatasource.setApiSampleQuery(datasource.getApiSampleQuery());\n                newDatasource.setApiSampleResponse(datasource.getApiSampleResponse());\n                return datasourceService.create(newDatasource)\n                    .map(datasource1 -> datasource1.getId());\n            }\n        });\n", "CodeBleu_score": 41.917325061348855}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.findById(datasourceId)\n        .flatMap(ds -> {\n            if (DatasourceCreationSource.SYSTEM_STATIC.equals(ds.getCreationSource())) {\n                return Mono.just(ds.getId());\n            } else if (DatasourceCreationSource.LEGACY_OPENBLOCKS_API.equals(ds.getCreationSource())) {\n                return Mono.just(ds.getId());\n            } else if (DatasourceCreationSource.LEGACY_QUICK_REST_API.equals(ds.getCreationSource())) {\n                return Mono.just(ds.getId());\n            } else {\n                Datasource newDs = new Datasource();\n                newDs.setOrganizationId(organizationId);\n                newDs.setVisitorId(visitorId);\n                newDs.setCreationSource(DatasourceCreationSource.CUSTOM);\n                newDs.setName(ds.getName());\n                newDs.setDescription(ds.getDescription());\n                newDs.setType(ds.getType());\n                newDs.setConfiguration(ds.getConfiguration());\n                return datasourceService.create(newDs);\n            }\n        });\n}", "CodeBleu_score": 39.51563734453782}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.findById(datasourceId)\n        .flatMap(datasource -> {\n            if (datasource.getCreationSource() == DatasourceCreationSource.SYSTEM_STATIC) {\n                return Mono.just(datasourceId);\n            } else if (datasource.getCreationSource() == DatasourceCreationSource.LEGACY_OPENBLOCKS_API) {\n                return Mono.just(datasource.getId());\n            } else if (datasource.getCreationSource() == DatasourceCreationSource.LEGACY_REST_API) {\n                return Mono.just(datasource.getId());\n            } else {\n                return datasourceService.create(organizationId, visitorId, datasource.getName(), datasource.getDescription(), datasource.getType(), datasource.getConfig());\n            }\n        });\n}", "CodeBleu_score": 52.36703570604242}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t    return assetService.upload(filePart)\n        .flatMap(asset -> {\n            user.setAvatar(asset);\n            return userRepository.save(user);\n        })\n        .map(u -> {\n            if (u.getAvatar() != null) {\n                assetService.delete(u.getAvatar().getId());\n            }\n            return true;\n        })\n        .onErrorResume(err -> {\n            if (err instanceof BizException) {\n                return Mono.error(err);\n            }\n            return Mono.error(ofException(err));\n        });\n}", "CodeBleu_score": 31.235437226228534}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t    return assetService.upload(filePart, user.getId())\n        .flatMap(asset -> {\n            user.setProfilePhoto(asset);\n            return userService.update(user);\n        })\n        .flatMap(user -> {\n            if (user.getProfilePhoto() != null) {\n                return assetService.delete(user.getProfilePhoto().getId())\n                    .then(Mono.just(true));\n            }\n            return Mono.just(true);\n        })\n        .onErrorResume(throwable -> {\n            log.error(\"Failed to save profile photo\", throwable);\n            return Mono.just(false);\n        });\n}", "CodeBleu_score": 31.94401242853778}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t    return Flux.fromIterable(user.getConnections())\n        .flatMap(connection -> {\n            if (connection.getSource().equals(AuthSourceConstants.FORM_AUTH)) {\n                return Mono.just(connection);\n            }\n            return Mono.empty();\n        })\n        .next()\n        .flatMap(connection -> {\n            return assetService.saveAsset(filePart, user.getId(), \"avatar\")\n                .flatMap(asset -> {\n                    connection.setAvatar(asset.getId());\n                    return userRepository.save(user);\n                });\n        })\n        .map(u -> true);\n}", "CodeBleu_score": 28.40244650784981}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    return Mono.fromCallable(() -> {\n        User user = new User();\n        user.setName(authUser.getName());\n        user.setState(UserState.NEW);\n        user.setEnabled(true);\n        user.setAvatarLink(authUser.getAvatarLink());\n        if (authUser.getSource().equals(AuthSourceConstants.EMAIL)) {\n            user.setPassword(encryptionService.encrypt(authUser.getContext().get(FieldName.PASSWORD)));\n        }\n        user.setConnections(authUser.getConnections());\n        user.setNew(true);\n        return user;\n    }).flatMap(userRepository::insert);\n}", "CodeBleu_score": 39.28129455993859}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t  return Mono.just(authUser)\n      .flatMap(this::createNewUserByAuthUser)\n      .doOnNext(user -> user.setNew(true));\n}", "CodeBleu_score": 7.755735988865925}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    return Mono.fromCallable(() -> {\n        // create new user\n        User newUser = new User();\n\n        // set user's name, state, enabled status, and avatar link based on the AuthUser\n        newUser.setName(authUser.getName());\n        newUser.setState(UserState.ACTIVE);\n        newUser.setEnabled(true);\n        newUser.setAvatarLink(authUser.getAvatarLink());\n\n        // if the auth source is email and the auth context contains a password, encrypt the password and set it for the user\n        if (authUser.getSource().equals(AuthSourceConstants.EMAIL) && authUser.getContext().containsKey(FormAuthRequestContext.PASSWORD_KEY)) {\n            String password = (String) authUser.getContext().get(FormAuthRequestContext.PASSWORD_KEY);\n            newUser.setPassword(encryptionService.encrypt(password));\n        }\n\n        // establish user connections from the AuthUser\n        newUser.setConnections(authUser.getConnections());\n\n        // mark the user as new\n        newUser.setNew(true);\n\n        // create and return the new user\n        return userRepository.insert(newUser);\n    });\n}", "CodeBleu_score": 55.772626780796756}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t  return Mono.just(user)\n      .flatMap(u -> {\n        Connection conn = new Connection(AuthSourceConstants.EMAIL, email);\n        u.getConnections().add(conn);\n        return Mono.just(u);\n      })\n      .flatMap(userRepository::save)\n      .map(u -> true)\n      .onErrorResume(DuplicateKeyException.class, e -> {\n        log.info(\"Duplicate email {}\", email);\n        return Mono.error(ofError(BizError.DUPLICATE_EMAIL, email));\n      });\n}", "CodeBleu_score": 36.208372056986946}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return Mono.just(user.getConnections().stream()\n        .anyMatch(connection -> connection.getSource().equals(AuthSourceConstants.EMAIL) && connection.getSourceId().equals(email)))\n        .flatMap(exists -> {\n            if (exists) {\n                return Mono.error(new BizException(BizError.EMAIL_ALREADY_EXISTS));\n            }\n            Connection connection = new Connection();\n            connection.setSource(AuthSourceConstants.EMAIL);\n            connection.setSourceId(email);\n            user.getConnections().add(connection);\n            return userService.save(user);\n        });\n}", "CodeBleu_score": 38.76968628647971}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t  return Mono.just(true);\n}", "CodeBleu_score": 5.397259648522601}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return findUserById(userId).flatMap(user -> {\n        if (user.getPassword().equals(oldPassword)) {\n            user.setPassword(newPassword);\n            return updateUser(user).then(Mono.just(true));\n        } else {\n            return Mono.error(BizException.ofError(BizError.INVALID_PASSWORD));\n        }\n    });\n}", "CodeBleu_score": 18.45332578745041}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t  return Mono.just(userId)\n      .flatMap(id -> this.findById(id))\n      .flatMap(user -> {\n        if (user.getPassword().equals(oldPassword)) {\n          return this.encryptionService.encrypt(newPassword)\n              .flatMap(encryptedPassword -> {\n                user.setPassword(encryptedPassword);\n                return this.save(user);\n              });\n        } else {\n          return Mono.error(BizException.of(BizError.INVALID_PASSWORD));\n        }\n      });\n}", "CodeBleu_score": 27.470545211014354}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return userService.findUserById(userId)\n        .flatMap(user -> {\n            if (user.getPassword().equals(oldPassword)) {\n                return userService.updateUser(userId, user.toBuilder().password(newPassword).build());\n            } else {\n                return Mono.error(ofError(BizError.INVALID_PASSWORD));\n            }\n        });\n}", "CodeBleu_score": 19.75965862868523}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t    return groupService.findAllGroups(orgMember.getOrganizationId())\n            .flatMapMany(Flux::fromIterable)\n            .filter(group -> !group.isAllUsersGroup())\n            .filter(group -> !withoutDynamicGroups || !group.isDynamic())\n            .map(group -> {\n                Map<String, String> groupMap = Map.of(\n                        FieldName.ID, group.getId(),\n                        FieldName.NAME, group.getName()\n                );\n                return groupMap;\n            })\n            .collectList();\n}", "CodeBleu_score": 31.385331869864768}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t    return groupService.findGroupsByOrgMember(orgMember)\n            .flatMap(groups -> {\n                if (withoutDynamicGroups) {\n                    return Mono.just(groups.stream()\n                            .filter(group -> !group.getDynamic())\n                            .collect(Collectors.toList()));\n                } else {\n                    return Mono.just(groups);\n                }\n            })\n            .flatMap(groups -> {\n                if (groups.isEmpty()) {\n                    return Mono.just(List.of());\n                }\n                return groupMemberService.findGroupMembersByUserId(userId)\n                        .map(groupMembers -> {\n                            return groups.stream()\n                                    .filter(group -> groupMembers.stream()\n                                            .anyMatch(groupMember -> groupMember.getGroupId().equals(group.getId())))\n                                    .map(group -> {\n                                        Map<String, String> groupMap = Map.of(\n                                                FieldName.GROUP_ID, group.getId(),\n                                                FieldName.GROUP_NAME, LocaleUtils.getLocalizedGroupName(group, locale));\n                                        return groupMap;\n                                    })\n                                    .collect(Collectors.toList());\n                        });\n            });\n}", "CodeBleu_score": 39.31080131057172}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t    return groupService.findGroupsByUser(userId, withoutDynamicGroups)\n            .collectList()\n            .flatMap(groups -> {\n                List<Map<String, String>> groupDetails = groups.stream()\n                        .filter(group -> !group.getId().equals(Group.ALL_USERS_GROUP_ID))\n                        .map(group -> {\n                            Map<String, String> groupDetail = new HashMap<>();\n                            groupDetail.put(\"id\", group.getId());\n                            groupDetail.put(\"name\", LocaleUtils.getLocalizedGroupName(group, locale));\n                            return groupDetail;\n                        })\n                        .collect(Collectors.toList());\n                return Mono.just(groupDetails);\n            });\n}", "CodeBleu_score": 40.36930026598192}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    UserStatus userStatus = new UserStatus();\n    userStatus.setUserId(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n\n    Update update = MongoUpsertHelper.getUpdateObject(userStatus);\n    return mongoUpsertHelper.upsert(userStatus, update);\n}", "CodeBleu_score": 41.480641882524395}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    UserStatus userStatus = new UserStatus();\n    userStatus.setUserId(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n    Update update = MongoUpsertHelper.getUpsertUpdate(userStatus);\n    return mongoUpsertHelper.upsert(userStatus, update, UserStatus.class);\n}", "CodeBleu_score": 41.714504464481486}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    UserStatus userStatus = new UserStatus(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n    Update update = MongoUpsertHelper.generateUpdateFromObject(userStatus);\n    return mongoUpsertHelper.upsert(userStatus, update);\n}", "CodeBleu_score": 39.53705570662826}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"partition predicate cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"value predicate cannot be nil\")\n\t}\n\tvar wg sync.WaitGroup\n\twg.Add(len(c.partitions))\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\tgo func(k string, p PartitionManager) {\n\t\t\t\tdefer wg.Done()\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t}(k, p)\n\t\t}\n\t}\n\twg.Wait()\n}", "CodeBleu_score": 42.895129940998714}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"partition predicate cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"value predicate cannot be nil\")\n\t}\n\n\tvar g rungroup.Group\n\tvar mu sync.Mutex\n\tvar wg sync.WaitGroup\n\n\t// Enqueue partitions for processing\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.name, p) {\n\t\t\twg.Add(1)\n\t\t\tg.Add(func() error {\n\t\t\t\tdefer wg.Done()\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t\tmu.Lock()\n\t\t\t\tdefer mu.Unlock()\n\t\t\t\tc.stats.clearCount++\n\t\t\t\treturn nil\n\t\t\t}, nil)\n\t\t}\n\t}\n\n\t// Wait for all partitions to be cleared\n\twg.Wait()\n}", "CodeBleu_score": 39.790758555694865}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"partition predicate must not be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"value predicate must not be nil\")\n\t}\n\tvar wg sync.WaitGroup\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\twg.Add(1)\n\t\t\tgo func(p PartitionManager) {\n\t\t\t\tdefer wg.Done()\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t}(p)\n\t\t}\n\t}\n\twg.Wait()\n}", "CodeBleu_score": 38.48722031626931}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn maxItemsTotal\n\t}\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\tmaxSizePerPartition := int(math.Floor(avgWeightPerPartition * 1.5))\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 45.570835326552924}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\tavgWeightPerPartition := totalWeightQuantity / numPartitions\n\treturn int(math.Ceil(float64(maxItemsTotal) * (float64(avgWeightPerPartition) / float64(totalWeightQuantity))))\n}", "CodeBleu_score": 48.21410233073832}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\treturn int(math.Ceil(math.Sqrt(float64(averageWeightPerPartition))))\n}", "CodeBleu_score": 41.94280629789051}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t    Map<String, Object> map = new HashMap<>();\n\n    ConnectionFactory connectionFactory = ConnectionFactories.get(\"r2dbc:h2:mem:///test\");\n    Mono<Connection> connectionMono = connectionFactory.create();\n\n    connectionMono.flatMap(connection -> {\n        ConnectionMetadata metadata = connection.getMetadata();\n        if (metadata != null) {\n            map.put(\"databaseProductName\", metadata.getDatabaseProductName());\n            map.put(\"databaseVersion\", metadata.getDatabaseVersion());\n        }\n        return Mono.empty();\n    }).block();\n\n    return map;\n}", "CodeBleu_score": 42.82417879820668}, {"code": "public Map<String, Object> contributorMap(){\n\t    Map<String, Object> map = new HashMap<>();\n    try {\n        ConnectionFactory connectionFactory = ConnectionFactories.get(System.getenv(\"SPRING_DATASOURCE_URL\"));\n        Mono<Connection> connectionMono = connectionFactory.create();\n        Connection connection = connectionMono.block();\n        ConnectionMetadata metadata = connection.getMetadata();\n        if (metadata != null) {\n            map.put(\"database.productName\", metadata.getDatabaseProductName());\n            map.put(\"database.version\", metadata.getDatabaseVersion());\n        }\n    } catch (Exception e) {\n        // Do nothing\n    }\n    return map;\n}", "CodeBleu_score": 42.6617828741388}, {"code": "public Map<String, Object> contributorMap(){\n\t    Map<String, Object> map = new HashMap<>();\n    ConnectionFactory connectionFactory = ConnectionFactory.create(\"r2dbc:postgresql://localhost:5432/postgres\");\n    Mono<Connection> connectionMono = connectionFactory.create();\n    connectionMono.flatMap(connection -> connection.getMetadata()).subscribe(metadata -> {\n        if (Objects.nonNull(metadata)) {\n            map.put(\"databaseProductName\", metadata.getDatabaseProductName());\n            map.put(\"databaseVersion\", metadata.getDatabaseVersion());\n        }\n    });\n    return map;\n}", "CodeBleu_score": 47.80823108214408}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    User userSetting = configMap.getUserSetting();\n    if (userSetting == null) {\n        info.setEnableRegistration(false);\n        info.setEnableEmailVerification(false);\n    } else {\n        info.setEnableRegistration(userSetting.isEnableRegistration());\n        info.setEnableEmailVerification(userSetting.isEnableEmailVerification());\n    }\n}", "CodeBleu_score": 44.48994522747468}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    User userSetting = configMap.getObject(\"user\", User.class);\n    if (userSetting == null) {\n        info.setRegistrationEnabled(false);\n        info.setEmailVerificationEnabled(false);\n    } else {\n        info.setRegistrationEnabled(userSetting.isRegistrationEnabled());\n        info.setEmailVerificationEnabled(userSetting.isEmailVerificationEnabled());\n    }\n}", "CodeBleu_score": 50.11122339464311}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    User userSetting = configMap.get(User.class);\n    if (userSetting == null) {\n        info.setRegistration(false);\n        info.setEmailVerification(false);\n    } else {\n        info.setRegistration(userSetting.isRegistration());\n        info.setEmailVerification(userSetting.isEmailVerification());\n    }\n}", "CodeBleu_score": 46.226054934618446}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t    final Thread restartThread = new Thread(new Runnable() {\n        @Override\n        public void run() {\n            try {\n                log.info(\"Restarting...\");\n                Thread.sleep(1000);\n                Runtime.getRuntime().exec(\"java -jar \" + Application.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath());\n            } catch (Exception e) {\n                log.error(\"Failed to restart\", e);\n            } finally {\n                System.exit(0);\n            }\n        }\n    });\n    restartThread.setName(\"restart-thread\");\n    restartThread.setContextClassLoader(Application.class.getClassLoader());\n    restartThread.setDaemon(false);\n    restartThread.start();\n    return \"Restarting...\";\n}", "CodeBleu_score": 38.63473980695955}, {"code": "public Object restart(){\n\t    ThreadGroup threadGroup = new ThreadGroup(\"restart-thread-group\");\n    Thread thread = new Thread(threadGroup, \"restart-thread\", () -> {\n        try {\n            // Restart application\n            Application.restart();\n        } catch (Exception e) {\n            log.error(\"Restart failed.\", e);\n        }\n    });\n    thread.setContextClassLoader(Application.class.getClassLoader());\n    thread.setDaemon(false);\n    thread.start();\n    return Collections.singletonMap(\"message\", \"Restarting...\");\n}", "CodeBleu_score": 57.45548515703911}, {"code": "public Object restart(){\n\t    ThreadGroup threadGroup = new ThreadGroup(\"restart-thread-group\");\n    Thread thread = new Thread(threadGroup, new RestartThread(), \"restart-thread\");\n    thread.setContextClassLoader(Application.class.getClassLoader());\n    thread.setDaemon(false);\n    thread.start();\n    return \"Restarting...\";\n}", "CodeBleu_score": 65.56385217080259}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t    configurer.customCodecs().register(new Jackson2JsonDecoder(new ObjectMapper(), MediaType.APPLICATION_JSON));\n    configurer.customCodecs().register(new Jackson2JsonEncoder(new ObjectMapper(), MediaType.APPLICATION_JSON));\n}", "CodeBleu_score": 48.59234384163271}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t    configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper,\n        MediaType.APPLICATION_JSON));\n    configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper,\n        MediaType.APPLICATION_JSON));\n}", "CodeBleu_score": 52.73347533822324}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t  configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(new ObjectMapper(),\n      MediaType.APPLICATION_JSON));\n  configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(new ObjectMapper(),\n      MediaType.APPLICATION_JSON));\n}", "CodeBleu_score": 51.92766031248439}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return route(\n        path(\"/console/**\")\n            .and(accept(MediaType.TEXT_HTML))\n            .and(method(HttpMethod.GET))\n            .and(path(\"/console/assets/**\").negate())\n            .and(WebSocketRequestPredicate.negate()),\n        request -> ServerResponse.permanentRedirect(request.uri().replacePath(\"/console/index.html\")).build());\n}", "CodeBleu_score": 34.128736808112066}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return route(\n        path(\"/console/**\")\n            .and(accept(MediaType.TEXT_HTML))\n            .and(method(HttpMethod.GET))\n            .and(path(\"/console/assets/**\").negate())\n            .and(WebSocketRequestPredicate.not()),\n        request -> {\n            // Get the console index file path from the request\n            String consoleIndexFilePath = request.exchange()\n                .getRequest()\n                .getAttribute(\"consoleIndexFilePath\", String.class);\n\n            // Return the console index file\n            return ServerResponse.ok()\n                .cacheControl(CacheControl.noCache())\n                .body(BodyInserters.fromResource(consoleIndexFilePath));\n        });\n}", "CodeBleu_score": 36.13769159496393}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return route(\n        path(\"/console/**\").and(accept(MediaType.TEXT_HTML).and(method(HttpMethod.GET))\n            .and(WebSocketRequestPredicate.not())),\n        request -> ServerResponse.temporaryRedirect(request.uri().replacePath(\"/console/index.html\"))\n            .build());\n}", "CodeBleu_score": 29.387782253775406}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    return route(\n        path(\"/uc\").and(accept(MediaType.TEXT_HTML)).and(method(HttpMethod.GET))\n            .and(path(\"/assets\").negate()).and(WebSocketRequestPredicate.negate()),\n        request -> ServerResponse.permanentRedirect(request.uri().replacePath(\"/uc/index.html\"))\n            .build());\n}", "CodeBleu_score": 32.93997711916113}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    return route(\n        accept(MediaType.TEXT_HTML).and(path(\"/uc/**\")).and(method(HttpMethod.GET)).and(\n            path(\"/uc/assets/**\").negate()).and(WebSocketRequestPredicate.negate()),\n        request -> ServerResponse.ok().body(BodyInserters.fromResource(\n            request.getContextPath() + \"/uc/index.html\")));\n}", "CodeBleu_score": 33.69183543312405}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    return route(\n        path(\"/uc/**\").and(accept(MediaType.TEXT_HTML)).and(method(HttpMethod.GET))\n            .and(path(\"/uc/assets/**\").negate()).and(WebSocketRequestPredicate.negate()),\n        request -> {\n            final var ucLocation = request.attributes().get(WebSocketHandlerMapping.UC_LOCATION);\n            return ServerResponse.ok()\n                .cacheControl(CacheControl.noStore())\n                .body(BodyInserters.fromResource(ucLocation + \"/index.html\"));\n        });\n}", "CodeBleu_score": 35.56311193956194}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    return new InMemoryReactiveIndexedSessionRepository(\n        new ConcurrentHashMap<>(1000),\n        new SessionProperties().getStoreType(),\n        new ServerProperties().getServlet().getSession().getTimeout().toSeconds()\n    );\n}", "CodeBleu_score": 18.557006645111972}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\n    @Bean\n    public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository(\n        SessionProperties sessionProperties, ServerProperties serverProperties) {\n        return new InMemoryReactiveIndexedSessionRepository(\n            new ConcurrentHashMap<>(),\n            sessionProperties.getTimeout().toMillis(),\n            serverProperties.getServlet().getSession().getTrackingModes());\n    }\n}", "CodeBleu_score": 38.87920709885663}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\n    // 1. Create a new concurrent hash map.\n    ConcurrentHashMap<String, MapSession> sessions = new ConcurrentHashMap<>();\n\n    // 2. Create a new reactive indexed session repository.\n    InMemoryReactiveIndexedSessionRepository<MapSession> repository =\n        new InMemoryReactiveIndexedSessionRepository<>(sessions);\n\n    // 3. Set the default session timeout.\n    SessionProperties sessionProperties = new SessionProperties();\n    ServerProperties serverProperties = new ServerProperties();\n    repository.setDefaultMaxInactiveInterval(\n        sessionProperties.getTimeout().getSeconds(serverProperties.getServlet().getSession().getTimeout()));\n\n    // 4. Return the configured repository.\n    return repository;\n}", "CodeBleu_score": 39.62017763639164}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService defaultUserDetailService = new DefaultUserDetailService(\n        userService, roleService);\n    defaultUserDetailService.setTwoFactorEnabled(haloProperties.getSecurity().isTwoFactor());\n    return defaultUserDetailService;\n}", "CodeBleu_score": 41.272045991945575}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService userDetailsService =\n        new DefaultUserDetailService(userService, roleService);\n    userDetailsService.setEnableTwoFactorAuthentication(\n        haloProperties.getSecurity().getTwoFactor().isEnable());\n    return userDetailsService;\n}", "CodeBleu_score": 48.59285914602137}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService userDetailService = new DefaultUserDetailService(userService, roleService);\n    userDetailService.setTwoFactorEnabled(haloProperties.getSecurity().getTwoFactor().isEnabled());\n    return userDetailService;\n}", "CodeBleu_score": 52.62999562269815}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Comment.CommentOwner commentOwner = new Comment.CommentOwner();\n    commentOwner.setKind(\"email\");\n    commentOwner.setEmail(this.getEmail());\n    commentOwner.setDisplayName(this.getDisplayName());\n    commentOwner.setAvatar(this.getAvatar());\n    commentOwner.setWebsite(this.getWebsite());\n    return commentOwner;\n}", "CodeBleu_score": 33.7397081184877}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Assert.notNull(this, \"Comment owner must not be null\");\n    Comment.CommentOwner commentOwner = new Comment.CommentOwner();\n    commentOwner.setKind(Comment.CommentOwner.Kind.EMAIL);\n    commentOwner.setEmail(StringUtils.defaultIfBlank(getEmail(), StringUtils.EMPTY));\n    commentOwner.setDisplayName(StringUtils.defaultIfBlank(getDisplayName(), StringUtils.EMPTY));\n    Map<String, String> annotations = new LinkedHashMap<>();\n    annotations.put(\"avatar\", StringUtils.defaultIfBlank(getAvatar(), StringUtils.EMPTY));\n    annotations.put(\"website\", StringUtils.defaultIfBlank(getWebsite(), StringUtils.EMPTY));\n    commentOwner.setAnnotations(annotations);\n    return commentOwner;\n}", "CodeBleu_score": 63.214820984971865}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Assert.notNull(this, \"Source must not be null\");\n    Map<String, Object> annotations = new LinkedHashMap<>();\n    annotations.put(\"email\", StringUtils.defaultString(this.getEmail()));\n    annotations.put(\"avatar\", this.getAvatar());\n    annotations.put(\"website\", this.getWebsite());\n    return new Comment.CommentOwner(this.getKind(), this.getId(), this.getDisplayName(), annotations);\n}", "CodeBleu_score": 32.84409632424099}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    if (commentOwner.getKind() == User.Kind.EMAIL) {\n        Optional<User> user = post.getOwner();\n        return user.map(u -> u.getEmail().equals(commentOwner.getName())).orElse(false);\n    } else {\n        return post.getOwner().map(u -> u.getUsername().equals(commentOwner.getName())).orElse(false);\n    }\n}", "CodeBleu_score": 32.08315119428195}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    if (post.getOwner() == null) {\n        return false;\n    }\n    if (commentOwner.getKind().equals(User.class.getSimpleName())) {\n        if (post.getOwner().getKind().equals(User.class.getSimpleName())) {\n            return post.getOwner().getName().equals(commentOwner.getName());\n        }\n        return false;\n    }\n    if (post.getOwner().getKind().equals(User.class.getSimpleName())) {\n        return post.getOwner().getName().equals(commentOwner.getName());\n    }\n    if (!post.getOwner().getKind().equals(commentOwner.getKind())) {\n        return false;\n    }\n    return post.getOwner().getName().equals(commentOwner.getName());\n}", "CodeBleu_score": 28.373269178792082}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    Assert.notNull(post, \"Post must not be null\");\n    Assert.notNull(commentOwner, \"Comment owner must not be null\");\n\n    if (commentOwner.getKind() == Comment.CommentOwner.Kind.EMAIL) {\n        return post.getAuthor().getEmail().equals(commentOwner.getName());\n    }\n\n    return post.getAuthor().getUsername().equals(commentOwner.getName());\n}", "CodeBleu_score": 32.26020830676634}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\t    return (ServerRequest request) -> {\n        var listOptions = new ListOptions();\n        var fieldSelector = labelAndFieldSelectorToListOptions(request);\n        listOptions.setFieldSelector(fieldSelector);\n        var query = and(fieldSelector.getQuery(),\n            equal(\"type\", fieldSelector.getLabel()),\n            contains(\"content\", request.queryParam(\"keyword\").orElse(\"\")),\n            equal(\"user.username\", request.queryParam(\"owner\").orElse(\"\"))\n        );\n        listOptions.setQuery(query);\n        return listOptions;\n    };\n}", "CodeBleu_score": 34.84906554842755}, {"code": "public ListOptions toListOptions(){\n\t    return toListOptions(null);\n}", "CodeBleu_score": 1.2045463868472637}, {"code": "public ListOptions toListOptions(){\n\t    return (ServerRequest request) -> {\n        // Get the current user\n        User currentUser = request.attribute(\"currentUser\").orElse(null);\n        // Get the current exchange\n        ServerWebExchange exchange = request.exchange();\n        // Get the current page\n        Integer currentPage = request.queryParam(\"page\").map(Integer::parseInt).orElse(1);\n        // Get the current size\n        Integer currentSize = request.queryParam(\"size\").map(Integer::parseInt).orElse(10);\n        // Get the current sort\n        Sort currentSort = SortResolver.resolve(request);\n        // Get the current keyword\n        String currentKeyword = request.queryParam(\"keyword\").orElse(\"\");\n        // Get the current owner\n        String currentOwner = request.queryParam(\"owner\").orElse(\"\");\n        // Get the current labels\n        String currentLabels = request.queryParam(\"labels\").orElse(\"\");\n        // Get the current fields\n        String currentFields = request.queryParam(\"fields\").orElse(\"\");\n        // Get the current query\n        String currentQuery = request.queryParam(\"query\").orElse(\"\");\n\n        // Build the list options\n        ListOptions listOptions = new ListOptions();\n        // Set the current page\n        listOptions.setPage(currentPage);\n        // Set the current size\n        listOptions.setSize(currentSize);\n        // Set the current sort\n        listOptions.setSort(currentSort);\n        // Set the current keyword\n        listOptions.setKeyword(currentKeyword);\n        // Set the current owner\n        listOptions.setOwner(currentOwner);\n        // Set the current labels\n        listOptions.setLabels(currentLabels);\n        // Set the current fields\n        listOptions.setFields(currentFields);\n        // Set the current query\n        listOptions.setQuery(currentQuery);\n\n        // Build the field selector\n        FieldSelector fieldSelector = labelAndFieldSelectorToListOptions(listOptions);\n        // Set the field selector\n        listOptions.setFieldSelector(fieldSelector);\n\n        // Build the query\n        QueryParamBuildUtil.buildQuery(listOptions, currentUser, currentKeyword, currentOwner);\n\n        // Return the list options\n        return listOptions", "CodeBleu_score": 30.04019550447993}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return Mono.justOrEmpty(commentName)\n        .flatMap(name -> CounterService.fetch(name))\n        .map(count -> new CommentStats(commentName, count))\n        .switchIfEmpty(Mono.just(new CommentStats(commentName, 0)));\n}", "CodeBleu_score": 31.47024293136702}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return Mono.justOrEmpty(commentName)\n        .flatMap(name -> CounterService.fetch(name))\n        .map(count -> new CommentStats(commentName, count))\n        .switchIfEmpty(Mono.just(new CommentStats(commentName, 0)));\n}", "CodeBleu_score": 31.47024293136702}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    Assert.notNull(commentName, \"commentName must not be null\");\n    return Mono.justOrEmpty(CounterService.get(commentName))\n        .map(CounterService::getCount)\n        .map(CommentStats::new)\n        .defaultIfEmpty(new CommentStats());\n}", "CodeBleu_score": 42.34979041633857}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t    // create a subscriber from the given user identity\n    Subscription subscriber = Subscription.of(identity);\n    // set up an interest reason for the subscription\n    subscriber.addInterestReason(NotificationReasonConst.REPLIED_TO_YOU,\n        (notification) -> {\n            // get the notification data\n            Reply reply = notification.getData();\n            // check if the replied owner matches the user's name\n            return StringUtils.equals(reply.getOwner(), identity.getName());\n        });\n    // subscribe the user to the notification center and block until the subscription is completed\n    notificationCenter.subscribe(subscriber);\n}", "CodeBleu_score": 35.08036047759761}, {"code": "void subscribeReply(UserIdentity identity){\n\t    Subscription subscription = Subscription.builder()\n        .identity(identity)\n        .reason(NotificationReasonConst.SOMEONE_REPLIED_TO_YOU)\n        .condition(reply -> {\n            Reply reply1 = (Reply) reply;\n            return reply1.getOwner().equals(identity.getName());\n        })\n        .build();\n    notificationCenter.subscribe(subscription);\n}", "CodeBleu_score": 40.40556523887441}, {"code": "void subscribeReply(UserIdentity identity){\n\t    var subscriber = Subscription.of(identity);\n    subscriber.addInterest(NotificationReasonConst.SOMEONE_REPLIED_TO_YOU,\n        (notification) -> {\n            Reply reply = notification.getSource();\n            return reply.getOwner().equals(identity.getName());\n        });\n    notificationCenter.subscribe(subscriber);\n}", "CodeBleu_score": 37.68482874723883}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return Mono.just(comment)\n        .map(c -> c.setApproved(true).setApprovedTime(Instant.now()))\n        .flatMap(c -> client.update(c, c.getId(), c.getVersion()))\n        .retryWhen(Retry.backoff(5, Duration.ofMillis(100)).maxBackoff(Duration.ofSeconds(5)).filter(e -> e instanceof OptimisticLockingFailureException));\n}", "CodeBleu_score": 25.62395486281111}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return Mono.just(comment)\n        .map(c -> c.setApproved(true).setApprovedTime(Instant.now()))\n        .flatMap(c -> client.update(c, comment, Comment.class))\n        .retryWhen(Retry.backoff(5, Duration.ofSeconds(1)));\n}", "CodeBleu_score": 22.94905537834591}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return commentClient.update(comment.getId(), comment -> {\n        comment.setApproved(true);\n        comment.setApprovedTime(Instant.now());\n        return comment;\n    });\n}", "CodeBleu_score": 20.1537576801723}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->mountUsing(fn () => $this);\n    }\n\n    if ($this instanceof HasRecord && $action instanceof HasRecord) {\n        $action->record($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 66.77236441542921}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->mountUsing(fn (): void => $this->callMountedAction($action));\n    }\n\n    if ($action instanceof HasRecord && $this instanceof HasRecord) {\n        $action->record($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 64.21390829829612}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->mount($this);\n    }\n\n    if ($this instanceof HasRecord && $action instanceof HasRecord) {\n        $action->record($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 66.30909265410877}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    if ($this->successRedirectUrl !== null) {\n        $this->redirect($this->successRedirectUrl);\n    }\n\n    return $this;\n}", "CodeBleu_score": 36.424083922110064}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    $successRedirectUrl = $this->getSuccessRedirectUrl();\n    if (is_app_url($successRedirectUrl)) {\n        return redirect()->to($successRedirectUrl);\n    }\n\n    return $this;\n}", "CodeBleu_score": 46.455861694924316}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    if (is_null($this->successRedirectUrl)) {\n        return $this;\n    }\n\n    $successRedirectUrl = $this->evaluate($this->successRedirectUrl);\n\n    if (is_string($successRedirectUrl)) {\n        if (is_app_url($successRedirectUrl)) {\n            $this->redirect($successRedirectUrl);\n        } else {\n            $this->redirectTo($successRedirectUrl);\n        }\n    } elseif ($successRedirectUrl instanceof Closure) {\n        $successRedirectUrl();\n    }\n\n    return $this;\n}", "CodeBleu_score": 61.0912450607896}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if (! $record) {\n        return;\n    }\n\n    $record->tags()->sync(\n        Tag::query()\n            ->whereIn('name', $state['tags'])\n            ->get()\n            ->pluck('id')\n            ->toArray()\n    );\n}", "CodeBleu_score": 16.632118751291724}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if (! $record) {\n        return;\n    }\n\n    if (! method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagModelClass = $record->tags()->getRelated();\n\n    $tags = collect($state)\n        ->map(fn (array $tagState) => $this->getTag($tagModelClass, $tagState))\n        ->filter()\n        ->map->id\n        ->toArray();\n\n    $record->tags()->sync($tags);\n}", "CodeBleu_score": 35.393150143873555}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if (! $record) {\n        return;\n    }\n\n    if (! method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagModelClass = $record->tags()->getRelated();\n\n    $tags = collect($state)->map(function (string $tagName) use ($tagModelClass): Tag {\n        return $tagModelClass::findOrCreate($tagName, config('tags.type'));\n    })->toArray();\n\n    $record->tags()->sync($tags);\n}", "CodeBleu_score": 37.74082698943809}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\n\tspacePath, repoName, err := paths.SplitPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope := types.Scope{\n\t\tSpacePath: spacePath,\n\t\tType:      types.ScopeTypePipeline,\n\t}\n\n\tresource := types.Resource{\n\t\tType: types.ResourceTypePipeline,\n\t\tName: pipelineIdentifier,\n\t}\n\n\tif !authorizer.Check(ctx, session, scope, resource, permission) {\n\t\treturn fmt.Errorf(\"unauthorized\")\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 66.59285005580611}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\n\tspacePath, repoName, err := paths.SplitRepositoryPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope := types.Scope{\n\t\tKind: types.KindSpace,\n\t\tPath: spacePath,\n\t}\n\n\tresource := types.Resource{\n\t\tKind: types.KindPipeline,\n\t\tIdentifier: pipelineIdentifier,\n\t}\n\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err != nil {\n\t\treturn fmt.Errorf(\"user %s does not have permission %s for pipeline %s in space %s\", session.User.Name, permission, pipelineIdentifier, spacePath)\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 62.52359320934969}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\n\tspacePath, repoName, err := paths.SplitRepoPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope := types.Scope{\n\t\tSpace: spacePath,\n\t\tRepo:  repoName,\n\t}\n\n\tresource := types.Resource{\n\t\tPipeline: pipelineIdentifier,\n\t}\n\n\terr = authorizer.Check(ctx, session, scope, resource, permission)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to check permission for pipeline %s: %w\", pipelineIdentifier, err)\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 66.87073331613068}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparent, name := paths.Split(space.Path)\n\tscope := authz.ScopeSpace\n\tif parent == \"\" {\n\t\tscope = authz.ScopeGlobal\n\t}\n\tresource := authz.ResourceSpace(parent, name)\n\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 40.72824494413426}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparentSpace, spaceName := paths.Split(space.Path)\n\tif parentSpace == \"\" {\n\t\treturn fmt.Errorf(\"Could not get parent space for space %s\", space.Path)\n\t}\n\tscope := authz.Scope(parentSpace)\n\tresource := authz.Resource(spaceName)\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 41.63009748837085}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\t// get the parent space\n\tparentSpace := space.Parent\n\tif parentSpace == nil {\n\t\tparentSpace = space\n\t}\n\n\t// get the parent space path\n\tparentSpacePath := paths.SpacePath(parentSpace)\n\n\t// get the space name\n\tspaceName := space.Name\n\n\t// create a scope\n\tscope := authz.NewScope(parentSpacePath)\n\n\t// create a resource\n\tresource := authz.NewResource(spaceName)\n\n\t// call the check function\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 43.140002365393705}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tvar err error\n\tsource, err = SanitizeJSON(source, data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Remove trailing newline\n\tif len(source) > 0 && source[len(source)-1] == '\n' {\n\t\tsource = source[:len(source)-1]\n\t}\n\n\treturn source, nil\n}", "CodeBleu_score": 44.11324528863766}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\treturn json.Marshal(data)\n\t}\n\tvar payload json.RawMessage\n\tif err := json.Unmarshal(source, &payload); err != nil {\n\t\treturn nil, err\n\t}\n\tif err := json.Unmarshal(payload, data); err != nil {\n\t\treturn nil, err\n\t}\n\tpayload, err := json.Marshal(data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn bytes.TrimRight(payload, \"\n\"), nil\n}", "CodeBleu_score": 35.2300906824698}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\t// If the source is empty, marshal the data and return it.\n\t\tsanitized, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn sanitized, nil\n\t}\n\n\t// Decode the source JSON, disallowing unknown fields.\n\terr := json.Unmarshal(source, data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Encode the data to ensure it conforms to the required format.\n\tsanitized, err := json.Marshal(data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Remove any trailing newline.\n\treturn bytes.TrimRight(sanitized, \"\n\"), nil\n}", "CodeBleu_score": 33.39888132552451}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\tvar err error\n\n\t// Validate the repository reference.\n\tif repoRef, err = c.validateRepoRef(repoRef); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch the repository using the reference.\n\trepo, err := c.fetchRepo(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the required permissions for the session on the repository.\n\tif err := c.checkAccess(session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 41.03419806803678}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference\n\tif repoRef == \"\" {\n\t\treturn nil, usererror.New(400, \"Repository reference cannot be empty\")\n\t}\n\n\t// Fetch the repository\n\trepo, err := c.getRepo(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the session's permissions on the repository\n\tif err := c.checkAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 53.22727227265433}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repoRef\n\tif err := types.ValidateRepoRef(repoRef); err != nil {\n\t\treturn nil, usererror.Wrapm(err, \"invalid repository reference\")\n\t}\n\n\t// Fetch the repository\n\trepo, err := c.GetRepo(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, usererror.Wrapm(err, \"failed to get repository\")\n\t}\n\n\t// Check the permissions\n\tif err := c.CheckAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, usererror.Wrapm(err, \"permission denied\")\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 51.51865205969456}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tcheckSanitizers := map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{}\n\tcheckSanitizers[enum.CheckPayloadKindEmpty] = sanitizeEmptyPayload\n\tcheckSanitizers[enum.CheckPayloadKindRaw] = sanitizeRawPayload\n\tcheckSanitizers[enum.CheckPayloadKindMarkdown] = sanitizeRawPayload\n\tcheckSanitizers[enum.CheckPayloadKindPipeline] = sanitizePipelinePayload\n\treturn checkSanitizers\n}", "CodeBleu_score": 37.36416133783354}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tm := map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindMarkdown: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindRaw: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindPipeline: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t}\n\tm[enum.CheckPayloadKindMarkdown] = m[enum.CheckPayloadKindRaw]\n\treturn m\n}", "CodeBleu_score": 33.76915298170407}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tcheckSanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tcheckSanitizers[enum.EmptyPayloadKind] = SanitizeEmpty\n\tcheckSanitizers[enum.RawPayloadKind] = SanitizeRaw\n\tcheckSanitizers[enum.MarkdownPayloadKind] = SanitizeRaw\n\tcheckSanitizers[enum.PipelinePayloadKind] = SanitizePipeline\n\treturn checkSanitizers\n}", "CodeBleu_score": 41.01190187708188}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t  if not self.is_attached then\n    self.renderer:attach(self.bufnr)\n    self.is_attached = true\n  end\n  self.state.on_render = on_render\n  return self", "CodeBleu_score": 51.11526714617197}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t  self.state.on_render = on_render\n  if not self.state.is_attached then\n    self.state.is_attached = true\n    self.renderer:attach(self)\n  end\n  return self", "CodeBleu_score": 58.958257565051085}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t  self.state.on_render = on_render\n  if not self.state.is_attached then\n    self.renderer:attach(self)\n    self.state.is_attached = true\n  end\n  return self", "CodeBleu_score": 62.04047864053705}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t  if not self.is_valid then\n    return\n  end\n  if callback then\n    self.watcher = Watcher:new(self.filename, callback)\n    self.watcher:start()\n  end", "CodeBleu_score": 30.119590743806867}, {"code": "function Buffer:watch(callback)\n\t  if not self:is_valid() then\n    return\n  end\n  if callback then\n    self.watcher:watch(callback)\n  end", "CodeBleu_score": 24.46389158308181}, {"code": "function Buffer:watch(callback)\n\t  if not self:is_valid() then\n    return\n  end\n  if not callback then\n    return\n  end\n  self.watcher = Watcher:new(self.filename, callback)\n  self.watcher:start()", "CodeBleu_score": 31.81717058720135}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t  if self.hex then\n    return self.hex\n  end\n  local gui = self.gui\n  local guifg = self.guifg\n  local guibg = self.guibg\n  local ctermfg = self.ctermfg\n  local ctermbg = self.ctermbg\n  local cterm = self.cterm\n  local rgb = self.rgb\n  local name = self.name\n  local hex = self.hex\n  if gui then\n    if gui:find('reverse') then\n      local background = vim.api.nvim_get_hl_by_name(name, true).background\n      if background then\n        hex = Rgb.from_rgb(background):to_hex()\n        self.hex = hex\n        return hex\n      end\n    end\n    if gui:find('italic') then\n      local foreground = vim.api.nvim_get_hl_by_name(name, true).foreground\n      if foreground then\n        hex = Rgb.from_rgb(foreground):to_hex()\n        self.hex = hex\n        return hex\n      end\n    end\n    if gui:find('bold') then\n      local foreground = vim.api.nvim_get_hl_by_name(name, true).foreground\n      if foreground then\n        hex = Rgb.from_rgb(foreground):to_hex()\n        self.hex = hex\n        return hex\n      end\n    end\n    if gui:find('underline') then\n      local foreground = vim.api.nvim_get_hl_by_name(name, true).foreground\n      if foreground then\n        hex = Rgb.from_rgb(foreground):to_hex()\n        self.hex = hex\n        return hex\n      end\n    end\n    if gui:find('undercurl') then\n      local foreground = vim.api.nvim_get_hl_by_name(name, true).foreground\n      if foreground then\n        hex = Rgb.from_rgb(foreground):to_hex()\n        self.hex = hex\n        return hex\n      end\n    end", "CodeBleu_score": 44.155550446176456}, {"code": "function Color:to_hex()\n\t  if self.hex then\n    return self.hex\n  end\n  local color = self.color\n  local attribute = self.attribute\n  local gui = vim.api.nvim_get_hl_by_name(color, true)\n  local hex = gui[attribute]\n  if hex == nil then\n    hex = gui.background\n  end\n  if hex == nil then\n    hex = gui.foreground\n  end\n  if hex == nil then\n    hex = gui.fg\n  end\n  if hex == nil then\n    hex = gui.bg\n  end\n  if hex == nil then\n    hex = '#000000'\n  end\n  self.hex = hex\n  return hex", "CodeBleu_score": 49.91374742585802}, {"code": "function Color:to_hex()\n\t  if self.hex then\n    return self.hex\n  end\n  local spec = self:to_spec()\n  local attribute = spec.attribute\n  local color = vim.api.nvim_get_hl_by_name(spec.name, true)[attribute]\n  if not color then\n    return\n  end\n  local hex = Rgb:from_rgb(color):to_hex()\n  self.hex = hex\n  return hex", "CodeBleu_score": 53.26449671940794}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  local lines = vim.api.nvim_buf_get_lines(buffer, 0, -1, false)\n  local namespace = self:get_namespace(buffer)\n  local matches = {}\n  for _, line in ipairs(lines) do\n    local start_pos, end_pos = string.find(line, pattern)\n    if start_pos then\n      table.insert(matches, { start_pos, end_pos })\n    end\n  end\n  if #matches > 0 then\n    vim.api.nvim_buf_add_highlight(\n      buffer,\n      namespace,\n      hl,\n      0,\n      matches[1][1] - 1,\n      matches[1][2]\n    )\n  end\n  return namespace", "CodeBleu_score": 41.90469867784897}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  local buffer_lines = vim.api.nvim_buf_get_lines(buffer, 0, -1, true)\n  for i, line in ipairs(buffer_lines) do\n    local start_index, end_index = string.find(line, pattern)\n    if start_index then\n      vim.api.nvim_buf_add_highlight(buffer, self.namespace, hl, i - 1, start_index - 1, end_index)\n    end\n  end", "CodeBleu_score": 40.79162844428402}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  local namespace = self:get_namespace(buffer)\n  local lines = vim.api.nvim_buf_get_lines(buffer, 0, -1, false)\n  for i, line in ipairs(lines) do\n    local start_index, end_index = string.find(line, pattern)\n    if start_index then\n      vim.api.nvim_buf_add_highlight(buffer, namespace, hl, i - 1, start_index - 1, end_index)\n    end\n  end\n  return namespace", "CodeBleu_score": 43.87563598329785}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t  local id = self:get_unique_id(buffer, row, col)\n  local opts = {\n    id = id,\n    hl_group = hl,\n    virt_text = { { text, hl } },\n    virt_text_pos = pos,\n    priority = priority,\n  }\n  vim.api.nvim_buf_set_extmark(buffer, self.namespace, row - 1, col - 1, opts)\n  return id", "CodeBleu_score": 65.72375388379288}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t  local id = string.format('%s_%s_%s_%s', buffer, row, col, text)\n  vim.api.nvim_buf_set_extmark(\n    buffer,\n    self.namespace,\n    row,\n    col,\n    {\n      virt_text = { { text, hl } },\n      virt_text_pos = pos,\n      priority = priority,\n    }\n  )\n  return id", "CodeBleu_score": 62.757262567801256}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t  local id = row .. ':' .. col\n  local ns_id = self.namespace\n  local opts = {\n    id = id,\n    virt_text = { { text, hl } },\n    virt_text_pos = pos,\n    priority = priority,\n  }\n  vim.api.nvim_buf_set_extmark(buffer, ns_id, row, col, opts)\n  return id", "CodeBleu_score": 69.6684454932276}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t  local line = ''\n  for char in output:gmatch('.') do\n    if char == '", "CodeBleu_score": 7.702562043923199}, {"code": "function Spawn:parse_result(output, callback)\n\t  local line = ''\n  local function process_line(line)\n    callback(line)\n  end\n  for char in output:gmatch('.') do\n    if char == '", "CodeBleu_score": 16.67476637639072}, {"code": "function Spawn:parse_result(output, callback)\n\t  local line = ''\n  for i = 1, #output do\n    local char = output:sub(i, i)\n    if char == '", "CodeBleu_score": 22.71344380346867}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t  local watcher = self:get_watcher(path)\n  if watcher then\n    return watcher\n  end\n  watcher = self:new({\n    path = path,\n    handler = handler,\n  })\n  watcher:start()\n  self.watchers[path] = watcher\n  return watcher", "CodeBleu_score": 40.66140339058899}, {"code": "function Watcher:watch_file(path, handler)\n\t  if self.watchers[path] then\n    return self.watchers[path]\n  end\n  local watcher = self.loop:new_fs_watcher(path, handler)\n  watcher:start()\n  self.watchers[path] = watcher\n  return watcher", "CodeBleu_score": 41.93217699551744}, {"code": "function Watcher:watch_file(path, handler)\n\t  if self.file_watcher then\n    return self.file_watcher\n  end\n  self.file_watcher = vim.loop.new_fs_event()\n  self.file_watcher:start(path, {\n    interval = 50,\n    recrawl = 1000,\n  }, handler)\n  return self.file_watcher", "CodeBleu_score": 53.26460089696644}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t  local buffer_lines = self.lines\n  local git_object = GitObject:new(self.file)\n  local hunks = git_object:hunks(buffer_lines)\n  if type(hunks) == 'string' then\n    return hunks\n  end\n  local signs = {}\n  for i, hunk in ipairs(hunks) do\n    local line_number = hunk.top\n    local sign = {\n      lnum = line_number,\n      name = hunk.type,\n    }\n    table.insert(signs, sign)\n  end\n  self:set_signs(signs)\n  return hunks", "CodeBleu_score": 29.76158349620946}, {"code": "function GitBuffer:live_hunks()\n\t  local buffer = self.buffer\n  local lines = buffer:get_lines()\n  local git_object = GitObject:new(buffer.file)\n  local hunks = git_object:hunks()\n  if not vim.tbl_isempty(hunks) then\n    local signs = {}\n    for _, hunk in ipairs(hunks) do\n      local start = hunk.start\n      local length = hunk.length\n      local type = hunk.type\n      for i = start, start + length - 1 do\n        local line = lines[i]\n        local sign = {\n          buffer = buffer.number,\n          lnum = i,\n          id = type,\n        }\n        table.insert(signs, sign)\n      end\n    end\n    buffer:set_signs(signs)\n  end\n  return hunks", "CodeBleu_score": 38.757173563617144}, {"code": "function GitBuffer:live_hunks()\n\t  local buffer = self:buffer()\n  local lines = buffer:lines()\n  local hunks = self.git_object:hunks(lines)\n  if not hunks then\n    return self.git_object.error\n  end\n  local signs = {}\n  for _, hunk in ipairs(hunks) do\n    for _, line in ipairs(hunk.lines) do\n      table.insert(signs, {\n        lnum = line.top,\n        name = line.type,\n        priority = vgit.settings.signs.priority.hunk,\n      })\n    end\n  end\n  buffer:set_signs(signs)\n  return hunks", "CodeBleu_score": 36.0147162732922}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t  local tmp_file = vim.fn.tempname()\n  local file_handle = io.open(tmp_file, 'w')\n  file_handle:write(patch:to_string())\n  file_handle:close()\n  local command = string.format(\n    'apply -v --cached --unidiff-zero --whitespace=nowarn --recount %s',\n    tmp_file\n  )\n  local success, err = self.git:command(command)\n  vim.fn.delete(tmp_file)\n  return success, err", "CodeBleu_score": 44.17932728506474}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t  local file = fs.tmpname()\n  fs.write(file, patch.content)\n  local result = self.git:stage_hunk(file)\n  fs.delete(file)\n  return result", "CodeBleu_score": 41.90997772634145}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t  local tmp_file = vim.fn.tempname()\n  vim.fn.writefile(patch.lines, tmp_file)\n  local command = string.format(\n    'apply --cached --unidiff-zero - --exclude=%s',\n    patch.filename\n  )\n  local result = self.git:run_command(command, {\n    stdin = tmp_file,\n    args = {\n      '--',\n      patch.filename,\n    },\n  })\n  vim.fn.delete(tmp_file)\n  return result", "CodeBleu_score": 43.97315738954518}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    OAuthConfig config = this.service.getConfig();\n    OAuthRequest request = new OAuthRequest(this.service.getApi().getAccessTokenVerb(), this.service.getApi().getAccessTokenEndpoint());\n    switch (this.service.getApi().getAccessTokenVerb()) {\n        case POST:\n            request.addBodyParameter(OAuthConstants.TOKEN, requestToken.getToken());\n            request.addBodyParameter(OAuthConstants.VERIFIER, verifier.getValue());\n            break;\n        case GET:\n        default:\n            request.addQuerystringParameter(OAuthConstants.TOKEN, requestToken.getToken());\n            request.addQuerystringParameter(OAuthConstants.VERIFIER, verifier.getValue());\n    }\n\n    this.service.signRequest(requestToken, request);\n    Response response = request.send();\n    return this.getApi().getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 53.59226374127986}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    OAuthConfig config = this.service.getConfig();\n    OAuthRequest request = new OAuthRequest(this.getAccessTokenVerb, this.getAccessTokenEndpoint);\n    String authHeader = getAuthorizationHeader(config, requestToken, verifier);\n    request.addHeader(OAuthConstants.HEADER, authHeader);\n    request.addBodyParameter(OAuthConstants.CLIENT_ID, config.getApiKey());\n    request.addBodyParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret());\n    request.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n    Response response = request.send();\n    return this.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 53.92611862132182}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    OAuthConfig config = this.getConfig();\n    OAuth20ServiceImpl impl = new OAuth20ServiceImpl(this, config);\n    DefaultApi20 api = (DefaultApi20) impl.getApi();\n    String accessTokenEndpoint = api.getAccessTokenEndpoint();\n    OAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), accessTokenEndpoint);\n    request.addBodyParameter(OAuthConstants.TOKEN, requestToken.getToken());\n    request.addBodyParameter(OAuthConstants.VERIFIER, verifier.getValue());\n    request.addBodyParameter(OAuthConstants.CONSUMER_KEY, config.getApiKey());\n    request.addBodyParameter(OAuthConstants.CONSUMER_SECRET, config.getApiSecret());\n    request.addBodyParameter(OAuthConstants.SCOPE, config.getScope());\n    Response response = impl.execute(request);\n    return api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 50.73919748916277}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    CredentialsProvider provider = new BasicCredentialsProvider();\n    StandardUsernamePasswordCredentials credentials = getCredentials();\n    if (credentials == null) {\n        return;\n    }\n    UsernamePasswordCredentials basicCredentials = new UsernamePasswordCredentials(credentials.getUsername(), credentials.getPassword().getPlainText());\n    provider.setCredentials(new AuthScope(host), basicCredentials);\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n    context.setCredentialsProvider(provider);\n    context.setAuthCache(authCache);\n    LOGGER.log(Level.FINE, \"Added host {0} to authentication cache\", host);\n}", "CodeBleu_score": 64.2960679584546}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    BitbucketAuthenticator authenticator = BitbucketAuthenticator.getAuthenticator();\n    if (authenticator == null) {\n        return;\n    }\n    StandardUsernamePasswordCredentials credentials = authenticator.getCredentials(host.getHostName());\n    if (credentials == null) {\n        return;\n    }\n    CredentialsScope scope = credentials.getScope();\n    if (scope == null) {\n        return;\n    }\n    String username = credentials.getUsername();\n    String password = credentials.getPassword().getPlainText();\n    if (username == null || password == null) {\n        return;\n    }\n    UsernamePasswordCredentials upc = new UsernamePasswordCredentials(username, password);\n    CredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(AuthScope.ANY, upc);\n    context.setCredentialsProvider(credsProvider);\n    AuthCache authCache = new BasicAuthCache();\n    BasicScheme basicAuth = new BasicScheme();\n    authCache.put(host, basicAuth);\n    context.setAuthCache(authCache);\n    Logger logger = Logger.getLogger(getClass().getName());\n    if (logger.isLoggable(Level.FINE)) {\n        logger.fine(\"Added \" + host + \" to authentication cache for \" + username + \" with scope \" + scope);\n    }\n}", "CodeBleu_score": 45.83721359337477}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    try {\n        String credentialsId = getCredentialsId();\n        StandardUsernamePasswordCredentials credentials = getCredentials(credentialsId);\n        if (credentials == null) {\n            throw new IllegalStateException(\"No credentials found for id \" + credentialsId);\n        }\n        context.setCredentialsProvider(createCredentialsProvider(credentials));\n        context.setAuthCache(createAuthCache(host, credentials));\n        LOGGER.log(Level.FINE, \"Added {0} to authentication cache for {1}\", new Object[]{credentialsId, host});\n    } catch (Exception e) {\n        LOGGER.log(Level.WARNING, \"Failed to configure authentication for \" + host, e);\n    }\n}", "CodeBleu_score": 33.94867136962048}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins jenkins = Jenkins.getInstanceOrNull();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins has not been started, or was already shut down\");\n    }\n    AvatarCache cache = ExtensionList.lookup(AvatarCache.class).get(AvatarCache.class);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache has not been initialized\");\n    }\n    String key = cache.getCacheKey(source);\n    try {\n        cache.seed(key, source);\n    } catch (IOException | InterruptedException e) {\n        // ignore\n    }\n    String url = jenkins.getRootUrl() + \"avatar/\" + URLEncoder.encode(key, StandardCharsets.UTF_8.name()) + \"/\" + size;\n    return url;\n}", "CodeBleu_score": 54.80255498005201}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins jenkins = Jenkins.getInstanceOrNull();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins instance is null\");\n    }\n    AvatarCache cache = ExtensionList.lookupSingleton(AvatarCache.class);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache instance is null\");\n    }\n    String key = cache.buildKey(source);\n    cache.seed(key, source);\n    try {\n        return jenkins.getRootUrl() + \"avatar/\" + URLEncoder.encode(key, StandardCharsets.UTF_8.name()) + \"/\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding is not supported\", e);\n    }\n}", "CodeBleu_score": 53.7591188765942}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins jenkins = Jenkins.getInstanceOrNull();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins instance not available\");\n    }\n    AvatarCache cache = ExtensionList.lookup(AvatarCache.class).get(AvatarCache.class);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache not available\");\n    }\n    String key = cache.buildKey(source, size);\n    String url = jenkins.getRootUrlFromRequest() + \"avatar/\" + key + \"/\" + size;\n    try {\n        return URLEncoder.encode(url, StandardCharsets.UTF_8.name());\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding not supported\", e);\n    }\n}", "CodeBleu_score": 59.701785305059374}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.image = image;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        BufferedImage scaled = new BufferedImage(128, 128, BufferedImage.TYPE_INT_ARGB);\n        Graphics2D g = scaled.createGraphics();\n        g.setRenderingHint(KEY_INTERPOLATION, VALUE_INTERPOLATION_BICUBIC);\n        g.setRenderingHint(KEY_ALPHA_INTERPOLATION, VALUE_ALPHA_INTERPOLATION_QUALITY);\n        g.drawImage(image, 0, 0, 128, 128, null);\n        g.dispose();\n        this.image = scaled;\n    }\n    if (lastModified < 0) {\n        this.lastModified = System.currentTimeMillis();\n    } else {\n        this.lastModified = lastModified;\n    }\n}", "CodeBleu_score": 43.97296734051925}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.image = image;\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        BufferedImage scaledImage = new BufferedImage(128, 128, BufferedImage.TYPE_INT_ARGB);\n        Graphics2D g2d = scaledImage.createGraphics();\n        g2d.setRenderingHint(KEY_INTERPOLATION, VALUE_INTERPOLATION_BICUBIC);\n        g2d.setRenderingHint(KEY_ALPHA_INTERPOLATION, VALUE_ALPHA_INTERPOLATION_QUALITY);\n        g2d.drawImage(image, 0, 0, 128, 128, null);\n        g2d.dispose();\n        this.image = scaledImage;\n    }\n}", "CodeBleu_score": 49.619125043742976}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.image = image;\n    this.lastModified = lastModified;\n    if (image.getWidth() > MAX_SIZE || image.getHeight() > MAX_SIZE) {\n        image = scaleImage(image, MAX_SIZE);\n    }\n}", "CodeBleu_score": 37.98993367688237}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    try {\n        AvatarImage image = future.get();\n        this.image = image.getImage();\n        this.lastModified = image.getLastModified();\n    } catch (InterruptedException | ExecutionException e) {\n        LOGGER.log(Level.WARNING, \"Failed to get avatar image from future\", e);\n    }\n    future = null;\n    return true;\n}", "CodeBleu_score": 47.14850276067523}, {"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    try {\n        AvatarImage image = future.get();\n        this.image = image.getImage();\n        this.lastModified = image.getLastModified();\n    } catch (InterruptedException | ExecutionException e) {\n        LOGGER.log(Level.WARNING, \"Failed to retrieve avatar image\", e);\n    }\n    future = null;\n    return true;\n}", "CodeBleu_score": 46.86443295960713}, {"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            AvatarImage image = future.get();\n            this.image = image;\n            this.lastModified = System.currentTimeMillis();\n        } catch (InterruptedException | ExecutionException e) {\n            LOGGER.log(Level.WARNING, \"Failed to retrieve image\", e);\n        }\n        future = null;\n    }\n    return true;\n}", "CodeBleu_score": 53.65079494904991}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t    String size = req.getParameter(\"s\");\n    if (size == null) {\n        size = \"32\";\n    }\n    String.format(\"%d\", Integer.parseInt(size)); // make sure 'size' is a number\n\n    rsp.setContentType(\"image/png\");\n    // use the email address as the cache key\n    String cacheKey = req.getRestOfPath();\n    if (cacheKey.startsWith(\"/\")) {\n        cacheKey = cacheKey.substring(1);\n    }\n    if (cacheKey.endsWith(\"/\")) {\n        cacheKey = cacheKey.substring(0, cacheKey.length() - 1);\n    }\n    byte[] image = getImage(cacheKey, size);\n    rsp.setHeader(\"Cache-Control\", \"max-age=3600,public\");\n    rsp.setHeader(\"Expires\", rfc2822DateFormat(new Date(new Date().getTime() + 3600 * 1000)));\n    rsp.getOutputStream().write(image);\n}", "CodeBleu_score": 38.64541349625597}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t    rsp.setContentType(\"image/png\");\n    rsp.addHeader(\"Cache-Control\", \"max-age=3600,public\");\n    rsp.addHeader(\"Expires\", String.format(\"%tc\", System.currentTimeMillis() + TimeUnit.HOURS.toMillis(1)));\n    rsp.addHeader(\"Last-Modified\", String.format(\"%tc\", System.currentTimeMillis() - TimeUnit.HOURS.toMillis(1)));\n    rsp.addHeader(\"ETag\", String.format(\"\\\"%s\\\"\", getETag(node)));\n    if (req.getDateHeader(\"If-Modified-Since\") != -1 || req.getHeader(\"If-None-Match\") != null) {\n        rsp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n        return;\n    }\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    try {\n        ImageIO.write(getImage(node), \"png\", baos);\n        baos.flush();\n        rsp.setContentLength(baos.size());\n        baos.writeTo(rsp.getOutputStream());\n    } finally {\n        baos.close();\n    }\n}", "CodeBleu_score": 45.82335039406446}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    node.writeImage(baos, req);\n    baos.flush();\n    rsp.setHeader(\"Expires\", \"Thu, 01 Dec 1994 16:00:00 GMT\");\n    rsp.setHeader(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n    rsp.setHeader(\"Pragma\", \"no-cache\");\n    rsp.setContentType(\"image/png\");\n    baos.writeTo(rsp.getOutputStream());\n}", "CodeBleu_score": 37.98283342599759}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t    this.enableCache = enableCache;\n    this.teamCacheDuration = teamCacheDuration;\n    this.repositoriesCacheDuration = repositoriesCacheDuration;\n    this.owner = owner;\n    this.projectKey = projectKey;\n    this.repositoryName = repositoryName;\n    this.authenticator = authenticator;\n    this.httpClient = buildHttpClient();\n}", "CodeBleu_score": 23.261080105891192}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t\n    this.enableCache = enableCache;\n    this.teamCacheDuration = teamCacheDuration;\n    this.repositoriesCacheDuration = repositoriesCacheDuration;\n    this.owner = owner;\n    this.projectKey = projectKey;\n    this.repositoryName = repositoryName;\n    this.authenticator = authenticator;\n\n    // Set up cache expiration\n    if (enableCache) {\n        this.teamCacheExpiration = System.currentTimeMillis() + SECONDS.toMillis(teamCacheDuration);\n        this.repositoriesCacheExpiration = System.currentTimeMillis() + SECONDS.toMillis(repositoriesCacheDuration);\n    }\n\n    // Set up HTTP client\n    HttpClientBuilder httpClientBuilder = HttpClientBuilder.create();\n\n    // Set up keep-alive strategy\n    httpClientBuilder.setKeepAliveStrategy((response, context) -> {\n        HeaderElementIterator it = new BasicHeaderElementIterator(response.headerIterator(HTTP.CONN_KEEP_ALIVE));\n        while (it.hasNext()) {\n            HeaderElement he = it.nextElement();\n            String param = he.getName();\n            String value = he.getValue();\n            if (value != null && param.equalsIgnoreCase(\"timeout\")) {\n                return SECONDS.toMillis(Integer.parseInt(value));\n            }\n        }\n        return 0;\n    });\n\n    // Set up connection manager\n    PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();\n    connectionManager.setDefaultMaxPerRoute(20);\n    connectionManager.setMaxTotal(200);\n    connectionManager.setDefaultSocketConfig(SocketConfig.custom().setSoTimeout(MILLISECONDS.toMillis(5 * SECONDS)).build());\n    httpClientBuilder.setConnectionManager(connectionManager);\n\n    // Set up retry handler\n    httpClientBuilder.setRetryHandler(new StandardHttpRequestRetryHandler(3, true));\n\n    // Set up authentication\n    if (authenticator != null) {\n        if (authenticator instanceof BitbucketUsernamePasswordAuthenticator) {\n            CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n            Username", "CodeBleu_score": 44.45878952452513}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t    this.enableCache = enableCache;\n    this.teamCacheDuration = teamCacheDuration;\n    this.repositoriesCacheDuration = repositoriesCacheDuration;\n    this.owner = owner;\n    this.projectKey = projectKey;\n    this.repositoryName = repositoryName;\n    this.authenticator = authenticator;\n\n    // Set up cache expiration for team and repositories if caching is enabled\n    if (enableCache) {\n        teamExpiration = System.currentTimeMillis() + MILLISECONDS.convert(teamCacheDuration, HOURS);\n        repositoriesExpiration = System.currentTimeMillis() + MILLISECONDS.convert(repositoriesCacheDuration, HOURS);\n    }\n\n    // Configure an HTTP client with a keep-alive strategy, connection manager, and retry handler\n    PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();\n    connectionManager.setDefaultMaxPerRoute(20);\n    connectionManager.setMaxTotal(200);\n    connectionManager.setDefaultSocketConfig(SocketConfig.custom().setSoTimeout(SECONDS.toMillis(30)).build());\n    httpClient = HttpClientBuilder.create()\n            .setKeepAliveStrategy(new BitbucketCloudKeepAliveStrategy())\n            .setConnectionManager(connectionManager)\n            .setRetryHandler(new StandardHttpRequestRetryHandler(3, true))\n            .build();\n\n    // Configure the HTTP client and context for authentication if an authenticator is provided\n    if (authenticator != null) {\n        httpClient = authenticator.configure(httpClient);\n        httpContext = authenticator.configure(HttpClientContext.create());\n    }\n\n    // Set client proxy parameters before building the HTTP client\n    ProxyConfiguration proxyConfig = Jenkins.get().proxy;\n    if (proxyConfig != null) {\n        Proxy proxy = proxyConfig.createProxy(URI.create(BITBUCKET_URL).getHost());\n        if (proxy.type() == Proxy.Type.HTTP) {\n            InetSocketAddress proxyAddr = (InetSocketAddress) proxy.address();\n            httpClient = HttpClientBuilder.create()\n                    .setProxy(new", "CodeBleu_score": 44.81864980610757}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    try {\n        String sourceBranch = pullRequest.getSource().getBranch().getName();\n        String sourceBranchRawNode = getBranchRawNode(sourceBranch);\n        String destinationBranch = pullRequest.getDestination().getBranch().getName();\n        String destinationBranchRawNode = getBranchRawNode(destinationBranch);\n        if (sourceBranchRawNode != null) {\n            CommitClosure sourceBranchClosure = new CommitClosure(sourceBranchRawNode);\n            closures.put(sourceBranch, sourceBranchClosure);\n        }\n        if (destinationBranchRawNode != null) {\n            CommitClosure destinationBranchClosure = new CommitClosure(destinationBranchRawNode);\n            closures.put(destinationBranch, destinationBranchClosure);\n        }\n    } catch (Exception e) {\n        LOGGER.log(Level.WARNING, \"Failed to set up closures for pull request \" + pullRequest.getId(), e);\n    }\n}", "CodeBleu_score": 36.95653502429961}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    // Get the source branch and set up a CommitClosure for it\n    BitbucketCloudBranch sourceBranch = pullRequest.getSource().getBranch();\n    if (sourceBranch != null) {\n        CommitClosure sourceClosure = new CommitClosure(sourceBranch.getRawNode());\n        sourceBranch.setCommitClosure(sourceClosure);\n    }\n\n    // Get the destination branch and set up a CommitClosure for it\n    BitbucketCloudBranch destinationBranch = pullRequest.getDestination().getBranch();\n    if (destinationBranch != null) {\n        CommitClosure destinationClosure = new CommitClosure(destinationBranch.getRawNode());\n        destinationBranch.setCommitClosure(destinationClosure);\n    }\n}", "CodeBleu_score": 46.81235905096593}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    def sourceBranch = pullRequest.source.branch.displayId\n    def destinationBranch = pullRequest.destination.branch.displayId\n    def sourceCommitClosure = closures.get(sourceBranch)\n    def destinationCommitClosure = closures.get(destinationBranch)\n    if (sourceCommitClosure == null) {\n        sourceCommitClosure = new CommitClosure(sourceBranch)\n        closures.put(sourceBranch, sourceCommitClosure)\n    }\n    if (destinationCommitClosure == null) {\n        destinationCommitClosure = new CommitClosure(destinationBranch)\n        closures.put(destinationBranch, destinationCommitClosure)\n    }\n}", "CodeBleu_score": 21.354041162168663}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration config = JenkinsLocationConfiguration.get();\n    if (config == null) {\n        throw new IllegalStateException(\"JenkinsLocationConfiguration is null\");\n    }\n    URL url = config.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\"Jenkins URL is null\");\n    }\n    return DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 57.25800433528016}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration config = JenkinsLocationConfiguration.get();\n    if (config == null) {\n        throw new IllegalStateException(\"JenkinsLocationConfiguration is null\");\n    }\n    URL url = config.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\"Jenkins URL is null\");\n    }\n    return DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 57.25800433528016}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration jenkinsLocationConfiguration = JenkinsLocationConfiguration.get();\n    if (jenkinsLocationConfiguration == null) {\n        throw new IllegalStateException(\"Jenkins location configuration is null\");\n    }\n\n    String rootURL = jenkinsLocationConfiguration.getUrl();\n    if (rootURL == null) {\n        throw new IllegalStateException(\"Jenkins root URL is null\");\n    }\n\n    return rootURL;\n}", "CodeBleu_score": 49.03374676861807}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    URL jenkinsURL = null;\n    try {\n        jenkinsURL = new URL(url);\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"Jenkins URL is malformed: \" + e.getMessage());\n    }\n    if (jenkinsURL.getHost().equals(\"localhost\") || jenkinsURL.getHost().equals(\"unconfigured-jenkins-location\")) {\n        throw new IllegalStateException(\"Jenkins URL is invalid: \" + jenkinsURL.getHost());\n    }\n    if (bitbucket instanceof BitbucketCloudApiClient) {\n        if (!jenkinsURL.getHost().contains(\".\")) {\n            throw new IllegalStateException(\"Jenkins URL is invalid: \" + jenkinsURL.getHost());\n        }\n    }\n    return jenkinsURL.toString();\n}", "CodeBleu_score": 54.81864142538482}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    try {\n        URL u = new URL(url);\n        String host = u.getHost();\n        if (host.equals(\"localhost\") || host.equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"Jenkins URL must not use localhost or unconfigured-jenkins-location as the host\");\n        }\n        if (bitbucket instanceof BitbucketCloudApiClient && !host.contains(\".\")) {\n            throw new IllegalStateException(\"Bitbucket Cloud API clients must use a fully qualified hostname\");\n        }\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"Jenkins URL is malformed\");\n    }\n    return url;\n}", "CodeBleu_score": 60.693196052675134}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    if (url == null) {\n        throw new IllegalStateException(\"The Jenkins URL is not configured. Please configure it in the Jenkins system settings.\");\n    }\n    try {\n        URL u = new URL(url);\n        String host = u.getHost();\n        if (host == null || host.equals(\"localhost\") || host.equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"The Jenkins URL is not configured. Please configure it in the Jenkins system settings.\");\n        }\n        if (bitbucket instanceof BitbucketCloudApiClient) {\n            if (host.endsWith(\"bitbucket.org\")) {\n                throw new IllegalStateException(\"The Jenkins URL is not configured. Please configure it in the Jenkins system settings.\");\n            }\n        }\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"The Jenkins URL is malformed. Please configure it in the Jenkins system settings.\");\n    }\n    return url;\n}", "CodeBleu_score": 57.26978803434288}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\n    if (build.getResult() == null) {\n        return;\n    }\n\n    if (build.getAction(BitbucketBuildStatusNotificationAction.class) != null) {\n        listener.getLogger().println(\"Bitbucket build status notification already sent\");\n        return;\n    }\n\n    BitbucketSCMSourceContext sourceContext = new BitbucketSCMSourceContext(null, SCMHeadObserver.none());\n    source.validate(sourceContext);\n    if (!sourceContext.wantNotifications()) {\n        return;\n    }\n\n    SCMRevision revision = SCMRevisionAction.getRevision(source, build);\n    if (revision == null) {\n        listener.getLogger().println(\"Cannot determine revision, skipping Bitbucket notification\");\n        return;\n    }\n\n    String hash = revision.getHash();\n    if (hash == null) {\n        listener.getLogger().println(\"Cannot determine revision hash, skipping Bitbucket notification\");\n        return;\n    }\n\n    String key = build.getExternalizableId();\n    if (sourceContext.isDisableBranchBuilds() && revision instanceof SCMHead) {\n        SCMHead head = (SCMHead) revision;\n        if (head.getName().startsWith(\"PR-\")) {\n            key = head.getName();\n        }\n    }\n\n    listener.getLogger().println(\"Notifying Bitbucket of \" + build.getResult() + \" build for revision \" + hash);\n\n    BitbucketApi api = new BitbucketCloudApiClient(source.getServerUrl(), source.getCredentialsId());\n    BitbucketBuildStatus status = new BitbucketBuildStatus(build.getResult() == Result.SUCCESS,\n            build.getAbsoluteUrl(), key);\n    api.setBuildStatus(source.getRepoOwner(), source.getRepository(), hash, status);\n\n    build.addAction(new BitbucketBuildStatusNotificationAction(source, revision));\n}", "CodeBleu_score": 48.050776172775464}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t    BitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n    if (context.notificationsDisabled()) {\n        return;\n    }\n\n    SCMRevision revision = SCMRevisionAction.getRevision(build, source);\n    String sha1 = revision != null ? revision.getHash() : null;\n    if (sha1 == null) {\n        listener.getLogger().println(\"[Bitbucket] Unable to determine SCM revision, cannot send build status notification\");\n        return;\n    }\n\n    boolean shareKeyBetweenBranchAndPR = context.shareBuildStatusBetweenBranchAndPullRequest();\n    String key = build.getParent().getFullName();\n    if (!shareKeyBetweenBranchAndPR) {\n        SCMHead scmHead = revision.getHead();\n        if (scmHead instanceof BranchSCMHead) {\n            key += \"/\" + scmHead.getName();\n        } else if (scmHead instanceof PullRequestSCMHead) {\n            key += \"/PR-\" + scmHead.getName();\n        }\n    }\n\n    listener.getLogger().format(\"[Bitbucket] Sending build status notification (%s)%n\", key);\n\n    String url = getBuildUrl(build);\n    if (url == null) {\n        listener.getLogger().println(\"[Bitbucket] Unable to determine build URL, cannot send build status notification\");\n        return;\n    }\n\n    BitbucketApi api = new BitbucketCloudApiClient(source.getServerUrl(), source.getCredentialsId());\n    BitbucketBuildStatus status = new BitbucketBuildStatus(key, sha1, url);\n    status.setName(build.getParent().getDisplayName());\n    status.setDescription(build.getDisplayName());\n    status.setState(getBuildState(build.getResult()));\n    api.setBuildStatus(source.getRepoOwner(), source.getRepository(), status);\n}", "CodeBleu_score": 52.229103321999304}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t    BitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(\n            source.getTraits());\n    if (!context.notificationsDisabled()) {\n        SCMRevision revision = SCMRevisionAction.getRevision(build, source);\n        if (revision != null) {\n            String revisionType = revision.getClass().getSimpleName();\n            listener.getLogger().format(\"Sending Bitbucket build status notification (%s)%n\", revisionType);\n            String hash = revision.getHead().getName();\n            String buildKey = getBuildKey(source, build, revision, hash);\n            BitbucketApi baseClient = getBitbucketClient(context, build, listener);\n            if (baseClient != null) {\n                BitbucketBuildStatus status = getBuildStatus(build);\n                baseClient.setBuildStatus(buildKey, hash, status);\n            }\n        }\n    }\n}", "CodeBleu_score": 39.38021272051589}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String buildKey;\n    if (shareBuildKeyBetweenBranchAndPR) {\n        buildKey = build.getParent().getFullName() + \"-\" + branch;\n    } else {\n        buildKey = build.getParent().getFullName();\n    }\n    return buildKey;\n}", "CodeBleu_score": 50.443523379978714}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String buildKey = null;\n    if (shareBuildKeyBetweenBranchAndPR) {\n        buildKey = build.getParent().getFullName() + \"-\" + branch;\n    } else {\n        buildKey = build.getParent().getFullName();\n    }\n    return buildKey;\n}", "CodeBleu_score": 48.88850612340611}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String buildKey = \"\";\n    if (shareBuildKeyBetweenBranchAndPR) {\n        buildKey = build.getParent().getFullName().replaceAll(\"/\", \"-\").replaceAll(\" \", \"-\") + \"-\" + branch;\n    } else {\n        buildKey = build.getParent().getFullName().replaceAll(\"/\", \"-\").replaceAll(\" \", \"-\");\n    }\n    return buildKey;\n}", "CodeBleu_score": 49.09984932649481}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = BitbucketEndpointConfiguration.get().getServerUrl();\n    }\n    if (traits == null) {\n        traits = new ArrayList<>();\n        if (credentialsId != null) {\n            traits.add(new BitbucketSCMSourceTrait(credentialsId, null, null, null, null));\n        }\n        if (projectName != null) {\n            traits.add(new BitbucketSCMNavigatorTrait(projectName, null, null, null, null, null));\n        }\n        if (repositoryName != null) {\n            traits.add(new BitbucketSCMNavigatorTrait(null, repositoryName, null, null, null, null));\n        }\n        if (repositoryOwner != null) {\n            traits.add(new BitbucketSCMNavigatorTrait(null, null, repositoryOwner, null, null, null));\n        }\n        if (serverUrl != null) {\n            traits.add(new BitbucketSCMNavigatorTrait(null, null, null, serverUrl, null, null));\n        }\n        if (traits.isEmpty()) {\n            traits.add(new BitbucketSCMNavigatorTrait(null, null, null, null, null, null));\n        }\n    }\n    return this;\n}", "CodeBleu_score": 31.973647001354955}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = BitbucketEndpointConfiguration.get().getServerUrl();\n        LOGGER.log(Level.WARNING, \"BitbucketSCMNavigator ''{0}'' did not specify a Bitbucket server URL, defaulting to ''{1}''.\", new Object[]{getDisplayName(), serverUrl});\n    }\n    if (traits == null) {\n        LOGGER.log(Level.WARNING, \"BitbucketSCMNavigator ''{0}'' did not specify any traits, defaulting to ''{1}''.\", new Object[]{getDisplayName(), Arrays.toString(BitbucketSCMNavigator.traitsDefaults())});\n        traits = Arrays.asList(BitbucketSCMNavigator.traitsDefaults());\n    }\n    return this;\n}", "CodeBleu_score": 21.488981783397175}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = BitbucketEndpointConfiguration.get().getServerUrl();\n        if (serverUrl == null) {\n            serverUrl = BitbucketCloudEndpoint.SERVER_URL;\n        }\n        LOGGER.log(Level.WARNING, \"BitbucketSCMNavigator {0} did not specify a server URL. Using {1}.\", new Object[]{getId(), serverUrl});\n    }\n    if (traits == null) {\n        traits = new ArrayList<>();\n        if (credentialsId != null) {\n            traits.add(new BitbucketSCMSourceTrait.CredentialsTrait(credentialsId));\n        }\n        if (traitSSHCheckout != null && traitSSHCheckout) {\n            traits.add(new BitbucketSCMSourceTrait.SSHCheckoutTrait());\n        }\n        if (traitMirror != null && traitMirror) {\n            traits.add(new BitbucketSCMSourceTrait.MirrorTrait());\n        }\n        if (traitDiscoverPRFromForks != null && traitDiscoverPRFromForks) {\n            traits.add(new BitbucketSCMSourceTrait.DiscoverPRFromForksTrait());\n        }\n        if (traitDiscoverPRFromOrigin != null && traitDiscoverPRFromOrigin) {\n            traits.add(new BitbucketSCMSourceTrait.DiscoverPRFromOriginTrait());\n        }\n        if (traitDiscoverBranches != null && !traitDiscoverBranches) {\n            traits.add(new WildcardSCMHeadFilterTrait(\"\", EnumSet.of(SCMHeadOrigin.BRANCH)));\n        }\n        if (traitDiscoverTags != null && !traitDiscoverTags) {\n            traits.add(new WildcardSCMHeadFilterTrait(\"\", EnumSet.of(SCMHeadOrigin.TAG)));\n        }\n        if (traitDiscoverPRFromOrigin != null && !traitDiscoverPRFromOrigin) {\n            traits.add(new WildcardSCMHeadFilterTrait(\"\", EnumSet.of(SCMHead", "CodeBleu_score": 51.58785351348655}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t    BitbucketRepository repository = getFromBitbucket(getRepositories(), name);\n    if (repository != null) {\n        if (isMatch) {\n            listener.getLogger().format(\"    Met criteria%n\");\n            count++;\n        } else {\n            listener.getLogger().format(\"    Ignored, does not meet criteria%n\");\n        }\n    }\n}", "CodeBleu_score": 61.63268829884762}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t    if (isMatch) {\n        LOGGER.log(Level.FINE, \"Proposing {0}\", name);\n        count++;\n    } else {\n        LOGGER.log(Level.FINE, \"Ignoring {0}\", name);\n    }\n}", "CodeBleu_score": 26.483768874762646}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t    if (isMatch) {\n        listener.getLogger().format(\"    Met criteria%n\");\n        count++;\n    } else {\n        listener.getLogger().format(\"    Does not meet criteria%n\");\n    }\n}", "CodeBleu_score": 35.57034588076179}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t        List<RefSpec> refspecs = scm.getExtensions().stream()\n            .filter(ext -> ext instanceof RefSpecsSCMExtension)\n            .map(ext -> (RefSpecsSCMExtension) ext)\n            .flatMap(ext -> ext.getRefSpecs().stream())\n            .collect(Collectors.toList());\n\n        if (refspecs.isEmpty()) {\n            return rev;\n        }\n\n        try {\n            URIish remoteURI = new URIish(scm.getUserRemoteConfigs().get(0).getUrl());\n            FetchCommand fetch = git.fetch_().from(remoteURI, refspecs);\n            fetch.execute();\n        } catch (URISyntaxException | GitException e) {\n            listener.getLogger().println(\"Failed to fetch refspecs: \" + e.getMessage());\n        }\n\n        return rev;\n    }", "CodeBleu_score": 47.94262013776634}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t\n    List<RefSpec> refSpecs = scm.getExtensions().stream()\n        .filter(GitSCMExtension::isRequiresWorkspace)\n        .map(ext -> ext.decorateRevisionToBuild(scm, build, git, listener, marked, rev))\n        .filter(r -> r != null)\n        .collect(Collectors.toList());\n\n    if (refSpecs.isEmpty()) {\n        return rev;\n    }\n\n    try {\n        String remote = scm.getUserRemoteConfigs().get(0).getUrl();\n        URIish uri = new URIish(remote);\n        FetchCommand fetch = git.fetch_().from(uri, refSpecs);\n        fetch.execute();\n    } catch (GitException | URISyntaxException e) {\n        listener.getLogger().println(\"Failed to fetch commits from remote repository: \" + e.getMessage());\n    }\n\n    return rev;\n}", "CodeBleu_score": 47.97786338262463}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t    List<RefSpec> refSpecs = getRefSpecs(scm, rev);\n    if (!refSpecs.isEmpty()) {\n        fetchMissingCommits(scm, git, listener, refSpecs);\n    }\n    return rev;\n}", "CodeBleu_score": 17.230297822097537}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        if (entry.getValue() != null && !entry.getValue().isEmpty()) {\n            result.put(entry.getKey(), entry.getValue().get(0));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 82.43625750841957}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        if (entry.getValue() != null && !entry.getValue().isEmpty()) {\n            result.put(entry.getKey(), entry.getValue().get(0));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 82.43625750841957}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        if (!entry.getValue().isEmpty()) {\n            result.put(entry.getKey(), entry.getValue().get(0));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 87.46169237752909}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t    if (resourceStates.length === 0) {\n        return;\n    }\n\n    const resourcesByRepository = this.mapResourcesToRepositories(resourceStates);\n\n    for (const [repository, resources] of resourcesByRepository) {\n        const paths = resources.map(resource => resource.resourceUri.fsPath);\n\n        try {\n            await repository.add(paths);\n        } catch (error) {\n            this.logger.error(error);\n            window.showErrorMessage(`Unable to add: ${error.stderr}`);\n        }\n    }\n}", "CodeBleu_score": 49.520940670742384}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t    const selection = await this.getSelectedResources(resourceStates);\n    if (selection.length === 0) {\n        return;\n    }\n\n    const groups = this.groupResourcesByRepository(selection);\n    for (const [repository, resources] of groups) {\n        const paths = resources.map(resource => resource.resourceUri.fsPath);\n        try {\n            await repository.add(paths);\n        } catch (err) {\n            this.logger.error(err);\n            window.showErrorMessage(`Unable to add files to ${repository.rootUri.fsPath}: ${err.message}`);\n        }\n    }\n}", "CodeBleu_score": 57.48846137664418}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t    const selection = this.getSCMResourceStates(resourceStates);\n    if (selection.length === 0) {\n        return;\n    }\n\n    const resourceGroups = this.groupSCMResourceStates(selection);\n    for (const resourceGroup of resourceGroups) {\n        const uris = resourceGroup.resources.map(resource => resource.resourceUri);\n        const paths = uris.map(uri => this.git.getRelativePath(uri));\n        try {\n            await this.git.add(...paths);\n        } catch (err) {\n            this.logger.error(err);\n            window.showErrorMessage(`Unable to add: ${err.stderr || err.message}`);\n        }\n    }\n}", "CodeBleu_score": 49.27797100899747}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t  if (this.resourceStates.length === 0 || !(this.resourceStates[0].resourceUri instanceof Uri)) {\n    const scmResourceStates = await commands.executeCommand<SourceControlResourceState[]>(\"svn.getResourceState\", this.resourceUri);\n\n    if (scmResourceStates) {\n      this.resourceStates = scmResourceStates;\n    }\n  }\n\n  return this.resourceStates.filter(s => s instanceof Resource);\n}", "CodeBleu_score": 42.03765864183191}, {"code": "protected async getResourceStates{\n\t  if (this.resourceStates.length === 0 || !(this.resourceStates[0].resourceUri instanceof Uri)) {\n    this.resourceStates = (await commands.executeCommand(\"svn.getResourceState\", this.resourceUri)) as Resource[];\n  }\n\n  return this.resourceStates.filter(s => s instanceof Resource) as Resource[];\n}", "CodeBleu_score": 30.531480369292076}, {"code": "protected async getResourceStates{\n\t  const resourceStates = this.resourceStates;\n  if (!resourceStates || resourceStates.length === 0 || !(resourceStates[0].resourceUri instanceof Uri)) {\n    const scmResource = await this.getSCMResourceState(resourceStates);\n    if (scmResource) {\n      resourceStates[0] = scmResource;\n    }\n  }\n  return resourceStates.filter(r => r instanceof Resource) as Resource[];\n}", "CodeBleu_score": 50.307482961274054}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (!uri) {\n      const editor = window.activeTextEditor;\n\n      if (!editor) {\n        return;\n      }\n\n      uri = editor.document.uri;\n    }\n\n    uri = fromSvnUri(uri);\n\n    const repository = this.getRepository(uri);\n\n    if (!repository) {\n      return;\n    }\n\n    const resource = repository.getResourceFromFile(uri);\n\n    if (!resource) {\n      return;\n    }\n\n    return resource;\n  }", "CodeBleu_score": 30.259271544577782}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (!uri) {\n      const editor = window.activeTextEditor;\n      if (!editor) {\n        return undefined;\n      }\n      uri = editor.document.uri;\n    }\n\n    if (uri.scheme === \"svn\") {\n      uri = uri.with({ scheme: \"file\" });\n    }\n\n    if (uri.scheme !== \"file\") {\n      return undefined;\n    }\n\n    const repository = this.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n\n    const manager = this.getSourceControlManager(repository);\n    if (!manager) {\n      return undefined;\n    }\n\n    return manager.getResourceFromFile(uri);\n  }", "CodeBleu_score": 50.200625588482254}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    uri = uri || window.activeTextEditor?.document.uri;\n    if (!uri) {\n      return undefined;\n    }\n    if (uri.scheme === \"svn\") {\n      uri = uri.with({ scheme: \"file\" });\n    }\n    const repository = this.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n    return repository.getResourceFromFile(uri.fsPath);\n  }", "CodeBleu_score": 38.72734605892799}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\t  const repo = await this.sourceControlManager.getRepository(element.repositoryRoot);\n  if (repo) {\n    if (element.status === Status.MODIFIED) {\n      openDiff(repo, element.path, element.oldRevision, element.newRevision);\n    } else if (element.status === Status.ADDED) {\n      openFileRemote(repo, element.path, element.newRevision);\n    }\n  }\n}", "CodeBleu_score": 55.58889618434415}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t  if (element.status === Status.Modified) {\n    return openDiff(element.oldPath, element.oldRevision, element.path, element.revision);\n  } else if (element.status === Status.Added) {\n    return openFileRemote(element.path, element.revision);\n  }\n}", "CodeBleu_score": 29.27091467266824}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t  try {\n    const remote = await this.sourceControlManager.getRemoteRepository(element);\n    if (element.status === Status.modified) {\n      openDiff(element, remote);\n    } else if (element.status === Status.added) {\n      openFileRemote(element, remote);\n    }\n  } catch (error) {\n    window.showErrorMessage(error.message);\n  }\n}", "CodeBleu_score": 38.51727843750366}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t  const clipboardSupported = await env.clipboard.writeText(what);\n  if (!clipboardSupported) {\n    window.showErrorMessage(\n      \"Copying to the clipboard is currently not supported in the browser.\"\n    );\n    return;\n  }\n  if (item.logEntry) {\n    const copyText = what === \"revision\" ? item.logEntry.revision : what;\n    await env.clipboard.writeText(copyText);\n    window.showInformationMessage(`Copied ${what} to clipboard.`);\n  }\n}", "CodeBleu_score": 41.412981950599146}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t  if (what === \"revision\") {\n    await env.clipboard.writeText(item.logEntry.revision.toString());\n  } else if (what === \"message\") {\n    await env.clipboard.writeText(item.logEntry.msg);\n  }\n}", "CodeBleu_score": 20.934589628363025}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t  if (env.clipboard.available) {\n    if (what === \"revision\") {\n      await env.clipboard.writeText(item.logEntry.revision.toString());\n    } else {\n      await env.clipboard.writeText(item.logEntry.msg);\n    }\n  } else {\n    window.showErrorMessage(\"Clipboard is not supported.\");\n  }\n}", "CodeBleu_score": 27.46590571493348}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    return open(null);\n}", "CodeBleu_score": 2.26559305229704}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    for (GiteaConnectionFactory factory : ServiceLoader.load(GiteaConnectionFactory.class)) {\n        if (factory.canOpen(this)) {\n            return factory.open(this);\n        }\n    }\n    throw new IOException(\"No suitable GiteaConnectionFactory implementation found\");\n}", "CodeBleu_score": 21.14712847035567}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    for (GiteaConnectionFactory factory : ServiceLoader.load(GiteaConnectionFactory.class, Jenkins.get().pluginManager.uberClassLoader)) {\n        try {\n            GiteaConnection connection = factory.create(this);\n            if (connection != null) {\n                return connection;\n            }\n        } catch (Exception e) {\n            throw new IOException(e);\n        }\n    }\n    throw new IOException(\"No suitable Gitea connection factory found\");\n}", "CodeBleu_score": 37.70884278726555}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t    Jenkins jenkinsInstance = Jenkins.getInstanceOrNull();\n    if (jenkinsInstance != null) {\n        return jenkinsInstance.getPluginManager().uberClassLoader;\n    }\n    return Gitea.class.getClassLoader();\n}", "CodeBleu_score": 39.24267261901716}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t    Jenkins jenkins = Jenkins.getInstanceOrNull();\n    ClassLoader classLoader = jenkins != null ? jenkins.getPluginManager().uberClassLoader : Gitea.class.getClassLoader();\n    return new Gitea(classLoader);\n}", "CodeBleu_score": 51.90688979536371}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t    Jenkins jenkins = Jenkins.getInstance();\n    if (jenkins != null) {\n        return jenkins.getPluginManager().uberClassLoader.loadClass(Gitea.class).newInstance();\n    }\n    return new Gitea();\n}", "CodeBleu_score": 36.17399878570952}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = displayName;\n    this.serverUrl = serverUrl;\n    this.manageHooks = manageHooks;\n    this.credentialsId = credentialsId;\n    this.aliasUrl = aliasUrl;\n    this.displayName = StringUtils.isBlank(displayName) ? SCMName.fromUrl(serverUrl).getName() : displayName;\n    this.aliasUrl = StringUtils.isBlank(aliasUrl) ? serverUrl : aliasUrl;\n}", "CodeBleu_score": 49.11026643090587}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = StringUtils.isBlank(displayName) ? SCMName.fromUrl(serverUrl) : displayName;\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    this.credentialsId = manageHooks ? credentialsId : null;\n    this.aliasUrl = normalizeAliasUrl(aliasUrl);\n}", "CodeBleu_score": 51.60560980326022}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = displayName;\n    this.serverUrl = serverUrl;\n    this.manageHooks = manageHooks;\n    this.credentialsId = credentialsId;\n    this.aliasUrl = aliasUrl;\n    if (StringUtils.isBlank(displayName)) {\n        this.displayName = SCMName.fromUrl(serverUrl, null);\n    }\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    if (manageHooks && StringUtils.isBlank(credentialsId)) {\n        this.credentialsId = \"\";\n    }\n    this.aliasUrl = normalizeAliasUrl(aliasUrl);\n}", "CodeBleu_score": 46.086689397112416}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    ListBoxModel result = new ListBoxModel();\n    if (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        return result;\n    }\n    serverUrl = Util.fixEmptyAndTrim(serverUrl);\n    if (serverUrl == null) {\n        return result;\n    }\n    URI serverUri;\n    try {\n        serverUri = new URI(serverUrl);\n    } catch (URISyntaxException e) {\n        return result;\n    }\n    URIRequirementBuilder b = URIRequirementBuilder.fromUri(serverUri);\n    for (StandardCredentials c : CredentialsProvider.lookupCredentials(StandardCredentials.class, Jenkins.get(), ACL.SYSTEM, b.build())) {\n        if (c instanceof StandardUsernamePasswordCredentials) {\n            result.add(c.getId(), c.getId());\n        }\n    }\n    return result;\n}", "CodeBleu_score": 46.65320327637071}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    if (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        return new StandardListBoxModel().includeCurrentValue(serverUrl);\n    }\n    try {\n        serverUrl = Util.fixEmptyAndTrim(serverUrl);\n        if (serverUrl == null) {\n            return new StandardListBoxModel().includeEmptyValue();\n        }\n        return new StandardListBoxModel()\n                .includeEmptyValue()\n                .includeMatchingAs(\n                        ACL.SYSTEM,\n                        Jenkins.get(),\n                        StandardCredentials.class,\n                        URIRequirementBuilder.fromUri(serverUrl).build(),\n                        AuthenticationTokens.matcher(GiteaAuth.class)\n                );\n    } catch (Exception e) {\n        return new StandardListBoxModel().includeCurrentValue(serverUrl);\n    }\n}", "CodeBleu_score": 52.47734615519415}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    if (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        return new StandardListBoxModel().includeCurrentValue(serverUrl);\n    }\n    if (StringUtils.isBlank(serverUrl)) {\n        return new StandardListBoxModel();\n    }\n    try {\n        serverUrl = normalizeServerUrl(serverUrl);\n        return new StandardListBoxModel()\n                .includeEmptyValue()\n                .includeMatchingAs(\n                        ACL.SYSTEM,\n                        Jenkins.get(),\n                        StandardCredentials.class,\n                        URIRequirementBuilder.fromUri(serverUrl).build(),\n                        AuthenticationTokens.matcher(GiteaAuth.class));\n    } catch (URISyntaxException | MalformedURLException e) {\n        return new StandardListBoxModel();\n    }\n}", "CodeBleu_score": 43.836546112939764}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme().toLowerCase(Locale.ENGLISH);\n        if (scheme.equals(\"http\")) {\n            if (uri.getPort() == 80) {\n                uri = new URI(scheme, uri.getUserInfo(), uri.getHost(), -1, uri.getPath(), uri.getQuery(), uri.getFragment());\n            }\n        } else if (scheme.equals(\"https\")) {\n            if (uri.getPort() == 443) {\n                uri = new URI(scheme, uri.getUserInfo(), uri.getHost(), -1, uri.getPath(), uri.getQuery(), uri.getFragment());\n            }\n        }\n        return uri.toString();\n    } catch (URISyntaxException e) {\n        return serverUrl;\n    }\n}", "CodeBleu_score": 40.2426144826443}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n\n    try {\n        URI uri = new URI(serverUrl);\n        if (uri.getHost() != null) {\n            // normalize scheme\n            String scheme = uri.getScheme();\n            if (scheme == null) {\n                scheme = \"http\";\n            } else {\n                scheme = scheme.toLowerCase(Locale.ENGLISH);\n            }\n\n            // normalize port\n            int port = uri.getPort();\n            if (port == -1) {\n                port = scheme.equals(\"http\") ? 80 : 443;\n            }\n\n            // build new URL\n            uri = new URI(scheme, uri.getUserInfo(), uri.getHost(), port, uri.getPath(), uri.getQuery(), uri.getFragment());\n        }\n\n        return uri.toString().replaceFirst(\"/$\", \"\");\n    } catch (URISyntaxException e) {\n        return serverUrl;\n    }\n}", "CodeBleu_score": 47.62290794928497}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (StringUtils.isBlank(serverUrl)) {\n        return \"\";\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        if (uri.getHost() != null) {\n            uri = new URI(uri.getScheme(), null, uri.getHost(), uri.getPort(), null, null, null);\n            return uri.toString().toLowerCase(Locale.ENGLISH);\n        }\n    } catch (URISyntaxException e) {\n        // ignore\n    }\n    return serverUrl.toLowerCase(Locale.ENGLISH);\n}", "CodeBleu_score": 26.08947635685736}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel model = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (StringUtils.isBlank(displayName)) {\n            model.add(server.getServerUrl());\n        } else {\n            model.add(displayName, server.getServerUrl());\n        }\n    }\n    return model;\n}", "CodeBleu_score": 52.682607059051435}, {"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel model = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (StringUtils.isBlank(displayName)) {\n            model.add(server.getServerUrl());\n        } else {\n            model.add(displayName, server.getServerUrl());\n        }\n    }\n    return model;\n}", "CodeBleu_score": 52.682607059051435}, {"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel model = new ListBoxModel();\n    for (GiteaServers giteaServers : GiteaServers.get().getServers()) {\n        String displayName = giteaServers.getDisplayName();\n        if (StringUtils.isBlank(displayName)) {\n            model.add(giteaServers.getServerUrl());\n        } else {\n            model.add(displayName, giteaServers.getServerUrl());\n        }\n    }\n    return model;\n}", "CodeBleu_score": 46.3701948625541}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);\n\n    List<GiteaServer> oldServers = new ArrayList<>(getServers());\n\n    // Remove duplicates and empty URLs\n    Set<String> urls = new HashSet<>();\n    Iterator<? extends GiteaServer> it = servers.iterator();\n    while (it.hasNext()) {\n        GiteaServer server = it.next();\n        if (StringUtils.isBlank(server.getServerUrl())) {\n            it.remove();\n        } else if (!urls.add(server.getServerUrl())) {\n            it.remove();\n        }\n    }\n\n    // Remove deleted servers\n    ListIterator<GiteaServer> oldIt = oldServers.listIterator();\n    while (oldIt.hasNext()) {\n        GiteaServer oldServer = oldIt.next();\n        if (!servers.contains(oldServer)) {\n            oldIt.remove();\n        }\n    }\n\n    // Update servers\n    for (GiteaServer server : servers) {\n        GiteaServer oldServer = getServer(server.getServerUrl());\n        if (oldServer != null) {\n            oldServer.setManageHooks(server.isManageHooks());\n        }\n    }\n\n    // Add new servers\n    for (GiteaServer server : servers) {\n        if (!oldServers.contains(server)) {\n            oldServers.add(server);\n        }\n    }\n\n    // Save configuration\n    this.servers = oldServers;\n    save();\n}", "CodeBleu_score": 43.596575183329215}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n\n    List<GiteaServer> newServers = new ArrayList<>();\n    if (servers != null) {\n        Set<String> urls = new HashSet<>();\n        for (GiteaServer server : servers) {\n            String url = Util.fixEmptyAndTrim(server.getServerUrl());\n            if (url != null && !urls.contains(url)) {\n                urls.add(url);\n                newServers.add(new GiteaServer(url));\n            }\n        }\n    }\n    this.servers = newServers;\n    save();\n}", "CodeBleu_score": 45.337795699834324}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n    List<GiteaServer> newServers = new ArrayList<>();\n    if (servers != null) {\n        for (GiteaServer server : servers) {\n            if (StringUtils.isNotBlank(server.getServerUrl())) {\n                newServers.add(server);\n            }\n        }\n    }\n    this.servers = newServers;\n    save();\n}", "CodeBleu_score": 34.754391192687756}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return false;\n    }\n    String normalizedUrl = normalizeServerUrl(serverUrl);\n    if (normalizedUrl == null) {\n        return false;\n    }\n    ListIterator<GiteaServer> it = getServers().listIterator();\n    while (it.hasNext()) {\n        GiteaServer server = it.next();\n        if (normalizedUrl.equals(server.getServerUrl())) {\n            it.remove();\n            save();\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 38.74969821200532}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return false;\n    }\n    String normalizedServerUrl = normalizeServerUrl(serverUrl);\n    if (normalizedServerUrl == null) {\n        return false;\n    }\n    ListIterator<GiteaServer> serverIterator = getServers().listIterator();\n    boolean found = false;\n    while (serverIterator.hasNext()) {\n        GiteaServer server = serverIterator.next();\n        if (StringUtils.equals(normalizedServerUrl, server.getServerUrl())) {\n            serverIterator.remove();\n            found = true;\n            break;\n        }\n    }\n    if (found) {\n        save();\n    }\n    return found;\n}", "CodeBleu_score": 39.93670033393322}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return false;\n    }\n\n    serverUrl = serverUrl.trim();\n\n    if (serverUrl.endsWith(\"/\")) {\n        serverUrl = serverUrl.substring(0, serverUrl.length() - 1);\n    }\n\n    ListIterator<GiteaServer> it = getServers().listIterator();\n    boolean removed = false;\n    while (it.hasNext()) {\n        GiteaServer server = it.next();\n        if (server.getServerUrl().equals(serverUrl)) {\n            it.remove();\n            removed = true;\n        }\n    }\n\n    if (removed) {\n        save();\n    }\n\n    return removed;\n}", "CodeBleu_score": 47.719399022977}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element annotatedElement : roundEnv.getElementsAnnotatedWith(annotation)) {\n        if (annotatedElement.getKind() != ElementKind.FIELD) {\n            processingEnv.getMessager().printMessage(Kind.ERROR, \"Only fields can be annotated with \" + annotation.getSimpleName(), annotatedElement);\n        }\n\n        // get annotation attributes\n        String key = annotatedElement.getAnnotation(annotation).key();\n        String label = annotatedElement.getAnnotation(annotation).label();\n        String description = annotatedElement.getAnnotation(annotation).description();\n        String link = annotatedElement.getAnnotation(annotation).link();\n\n        // get element type\n        String type = annotatedElement.asType().toString();\n\n        // add new ConfigElement to set of descriptor elements\n        descriptorElements.add(new ConfigElement(key, label, description, link, type));\n    }\n}", "CodeBleu_score": 30.087912813006273}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element annotatedElement : roundEnv.getElementsAnnotatedWith(annotation)) {\n        if (annotatedElement.getKind() != ElementKind.CLASS) {\n            processingEnv.getMessager().printMessage(Kind.ERROR, \"Only classes can be annotated with \" + annotation.getSimpleName() + \".\", annotatedElement);\n            continue;\n        }\n        TypeElement annotatedClass = (TypeElement) annotatedElement;\n        AnnotationMirror annotationMirror = getAnnotationMirror(annotatedElement, annotation);\n        Map<String, Object> annotationAttributes = getAnnotationAttributes(annotationMirror);\n        String type = annotatedClass.getQualifiedName().toString();\n        descriptorElements.add(new DescriptorElement(type, annotationAttributes));\n    }\n}", "CodeBleu_score": 41.23604683871014}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n        if (element.getKind() != ElementKind.FIELD) {\n            processingEnv.getMessager().printMessage(Kind.ERROR, \"Only fields can be annotated with \" + annotation.getSimpleName() + \".\");\n            continue;\n        }\n\n        VariableElement field = (VariableElement) element;\n\n        String key = field.getSimpleName().toString();\n        String type = field.asType().toString();\n        String defaultValue = null;\n        String label = null;\n        String description = null;\n\n        for (AnnotationMirror mirror : field.getAnnotationMirrors()) {\n            for (Map.Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : mirror.getElementValues().entrySet()) {\n                String name = entry.getKey().getSimpleName().toString();\n                if (name.equals(\"value\")) {\n                    key = entry.getValue().getValue().toString();\n                } else if (name.equals(\"defaultValue\")) {\n                    defaultValue = entry.getValue().getValue().toString();\n                } else if (name.equals(\"label\")) {\n                    label = entry.getValue().getValue().toString();\n                } else if (name.equals(\"description\")) {\n                    description = entry.getValue().getValue().toString();\n                }\n            }\n        }\n\n        descriptorElements.add(new ConfigDescriptorElement(key, type, defaultValue, label, description));\n    }\n}", "CodeBleu_score": 30.548607720690068}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    for (TypeElement annotation : annotations) {\n        String qualifiedName = annotation.getQualifiedName().toString();\n        if (qualifiedName.replace('$', '.').equals(annotationClass.getName())) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 41.21397114313453}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    for (TypeElement annotation : annotations) {\n        if (annotationClass.getName().replace('$', '.').equals(annotation.getQualifiedName().toString())) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 48.8451543513446}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    for (TypeElement annotation : annotations) {\n        if (annotationClass.getName().replace('$', '.')\n                .equals(annotation.getQualifiedName().toString())) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 48.99609862547192}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n\n    filters = {\n        \"employee\": employee,\n        \"status\": \"Open\",\n        \"docstatus\": 0,\n        \"workflow_state\": (\"!=\", \"Rejected\"),\n    }\n\n    if for_approval:\n        filters[\"workflow_state\"] = (\"in\", [\"Approved\", \"Pending\"])\n        filters[\"owner\"] = (\"!=\", employee)\n        if approver_id:\n            filters[\"approver\"] = approver_id\n    else:\n        filters[\"status\"] = (\"!=\", \"Cancelled\")\n\n    return filters\n\n", "CodeBleu_score": 31.026293141127226}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n\n    filters = {\n        \"employee\": employee,\n        \"status\": \"Open\",\n    }\n\n    if for_approval:\n        filters.update({\n            \"workflow_state\": [\"not in\", [\"Approved\", \"Rejected\"]],\n            \"docstatus\": 1,\n        })\n\n        if approver_id:\n            filters.update({\n                \"approver_id\": approver_id,\n            })\n        else:\n            filters.update({\n                \"approver_id\": [\"!=\", employee],\n            })\n    else:\n        filters.update({\n            \"docstatus\": 0,\n        })\n\n    workflow_name = get_workflow_name(\n        doctype=\"Leave Application\",\n        docname=employee,\n    )\n\n    if workflow_name:\n        filters.update({\n            \"workflow_state\": [\"not in\", [\"Approved\", \"Rejected\"]],\n        })\n\n    return filters\n\n", "CodeBleu_score": 27.106802240101857}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"status\": \"Open\",\n    }\n    if for_approval:\n        filters.update(\n            {\n                \"status\": [\n                    \"=\",\n                    \"Open\",\n                ],\n                \"docstatus\": 1,\n                \"owner\": [\n                    \"!=\",\n                    employee,\n                ],\n            }\n        )\n    else:\n        filters.update(\n            {\n                \"status\": [\n                    \"!=\",\n                    \"Canceled\",\n                ],\n            }\n        )\n    if approver_id:\n        filters.update(\n            {\n                \"approver\": approver_id,\n            }\n        )\n    return filters\n\n", "CodeBleu_score": 22.73824437749879}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n\n    today = getdate()\n    leave_details = get_leave_details(employee, today)\n\n    leave_balance_map = {}\n    for leave in leave_details:\n        leave_balance_map[leave.leave_type] = {\n            \"allocated_leaves\": leave.total_leaves_allocated,\n            \"leaves_taken\": leave.total_leaves_taken,\n            \"leaves_balance\": leave.remaining_leaves,\n        }\n\n    return leave_balance_map\n\n", "CodeBleu_score": 41.96830353304004}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n\n    leave_balance_map = {}\n    today = getdate()\n    leave_details = get_leave_details(employee, today)\n\n    for leave_detail in leave_details:\n        leave_balance_map[leave_detail.leave_type] = {\n            \"allocated_leaves\": leave_detail.total_leaves_allocated,\n            \"leaves_taken\": leave_detail.total_leaves_taken,\n            \"remaining_leaves\": leave_detail.remaining_leaves,\n        }\n\n    return leave_balance_map\n\n", "CodeBleu_score": 43.26209127968418}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    date = getdate()\n    leave_details = get_leave_details(employee, date)\n    leave_balance_map = {}\n    for leave_detail in leave_details:\n        leave_balance_map[leave_detail.leave_type] = {\n            \"allocated_leaves\": leave_detail.total_leaves_allocated,\n            \"leave_taken\": leave_detail.total_leaves_taken,\n            \"pending_approval\": leave_detail.total_leaves_pending_approval,\n            \"leaves_availed\": leave_detail.total_leaves_availed,\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 43.552904535072166}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n\n    holiday_list = frappe.db.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n\n    holidays = frappe.db.sql(\n        \"\"\"\n            SELECT\n                hd.holiday_date AS date,\n                hd.description AS description\n            FROM `tabHoliday` AS h\n            INNER JOIN `tabHoliday List` AS hl\n                ON hl.name = h.parent\n            INNER JOIN `tabHoliday Date` AS hd\n                ON hd.parent = h.name\n            WHERE\n                hl.name = %(holiday_list)s\n                AND hd.weekly_off IS NULL\n            ORDER BY\n                hd.holiday_date\n        \"\"\",\n        values={\"holiday_list\": holiday_list},\n        as_dict=True,\n    )\n\n    for holiday in holidays:\n        holiday.description = strip_html(holiday.description)\n\n    return holidays\n\n", "CodeBleu_score": 31.40348382842998}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n\n    holiday_list = frappe.db.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n\n    holidays = frappe.get_all(\n        \"Holiday\",\n        filters={\"parent\": holiday_list, \"weekly_off\": 0},\n        fields=[\"holiday_date\", \"description\"],\n        order_by=Order(\"holiday_date\"),\n    )\n\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n\n    return holidays\n\n", "CodeBleu_score": 37.25225065988977}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n\n    holiday_list = frappe.db.get_value(\n        \"Employee\", employee, [\"holiday_list\"], as_dict=True\n    )\n    if not holiday_list:\n        return []\n\n    holidays = frappe.db.sql(\n        \"\"\"\n            SELECT\n                name,\n                description,\n                holiday_date\n            FROM `tabHoliday`\n            WHERE\n                parent = %(holiday_list)s\n                AND weekly_off IS NULL\n            ORDER BY\n                holiday_date\n        \"\"\",\n        values={\"holiday_list\": holiday_list[\"holiday_list\"]},\n        as_dict=True,\n    )\n\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n\n    return holidays\n\n", "CodeBleu_score": 35.60689012182186}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n    if frappe.db.get_single_value(\"HR Settings\", \"send_holiday_reminder_in_advance\"):\n        frequency = frappe.db.get_single_value(\"HR Settings\", \"holiday_reminder_frequency\")\n        if frequency == \"Weekly\":\n            send_reminders(frequency)\n\n", "CodeBleu_score": 43.11979093935605}, {"code": "def send_reminders_in_advance_weekly()\n\t\n\n    if frappe.db.get_single_value(\"HR Settings\", \"send_holiday_reminders_in_advance\"):\n        frequency = frappe.db.get_single_value(\"HR Settings\", \"holiday_reminder_frequency\")\n        if frequency == \"Weekly\":\n            send_reminders_in_advance(frequency)\n\n", "CodeBleu_score": 44.05572264312215}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    if frappe.db.get_single_value(\"HR Settings\", \"send_holiday_reminder_in_advance\"):\n        if frappe.db.get_single_value(\"HR Settings\", \"holiday_reminder_frequency\") == \"Weekly\":\n            send_reminders_in_advance(frequency=\"Weekly\")\n\n", "CodeBleu_score": 31.073845517593718}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n\n    score = 0\n    for entry in self.self_ratings:\n        score += entry.rating * entry.percentage_weightage\n    self.self_appraisal_score = flt(score, self.score_precision)\n\n", "CodeBleu_score": 32.85128653580442}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    score = 0\n    for rating in self.self_ratings:\n        score += rating.rating * rating.percentage_weightage / 100\n    self.self_appraisal_score = flt(score, self.precision)\n\n", "CodeBleu_score": 26.721970929071542}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self_ratings = self.get(\"self_ratings\")\n    self_appraisal_score = 0\n    for self_rating in self_ratings:\n        self_appraisal_score += (self_rating.rating * 5) * (self_rating.percentage_weightage / 100)\n    self.self_appraisal_score = flt(self_appraisal_score, self.precision)\n\n", "CodeBleu_score": 26.81322858321093}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.calculate_final_score:\n        self.final_score = sanitize_expression(appraisal_cycle.final_score_formula)\n        self.final_score = frappe.safe_eval(\n            self.final_score,\n            {\n                \"total_score\": self.total_score,\n                \"average_feedback_score\": self.average_feedback_score,\n                \"self_appraisal_score\": self.self_appraisal_score,\n            },\n        )\n    else:\n        self.final_score = (\n            self.total_score + self.average_feedback_score + self.self_appraisal_score\n        ) / 3\n    self.final_score = flt(self.final_score, self.precision)\n\n", "CodeBleu_score": 32.159235462644}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle = frappe.get_doc(\n        \"Appraisal Cycle\", self.appraisal_cycle\n    )\n    if appraisal_cycle.calculate_final_score:\n        data = frappe.db.sql(\n            \"\"\"\n                SELECT\n                    SUM(score) AS total_score,\n                    AVG(score) AS average_score,\n                    SUM(self_score) AS self_score,\n                    AVG(self_score) AS average_self_score,\n                    SUM(feedback_score) AS feedback_score,\n                    AVG(feedback_score) AS average_feedback_score\n                FROM `tabAppraisal Goal`\n                WHERE parent = %(appraisal)s\n            \"\"\",\n            values={\"appraisal\": self.name},\n            as_dict=1,\n        )\n        if data:\n            data = data[0]\n            formula = sanitize_expression(appraisal_cycle.final_score_formula)\n            self.final_score = eval(formula)\n            self.final_score = flt(self.final_score, self.precision)\n    else:\n        self.final_score = (\n            self.total_score\n            + self.average_self_score\n            + self.average_feedback_score\n        ) / 3\n        self.final_score = flt(self.final_score, self.precision)\n\n", "CodeBleu_score": 32.88935849856346}, {"code": "def calculate_final_score(self)\n\t\n\n    # Get the appraisal cycle\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n\n    # Check if the final score should be calculated\n    if appraisal_cycle.calculate_final_score:\n        # Gather the necessary data\n        appraisal_cycle_data = frappe.get_all(\n            \"Appraisal Cycle Data\",\n            fields=[\"data_type\", \"data_value\"],\n            filters={\"parent\": self.appraisal_cycle},\n        )\n        appraisal_data = frappe.get_all(\n            \"Appraisal Data\",\n            fields=[\"data_type\", \"data_value\"],\n            filters={\"parent\": self.name},\n        )\n\n        # Create a dictionary of the data\n        appraisal_cycle_data_dict = {\n            d.data_type: d.data_value for d in appraisal_cycle_data\n        }\n        appraisal_data_dict = {d.data_type: d.data_value for d in appraisal_data}\n\n        # Sanitize the formula\n        formula = sanitize_expression(appraisal_cycle.final_score_formula)\n\n        # Evaluate the formula\n        try:\n            self.final_score = flt(\n                eval(formula, appraisal_cycle_data_dict, appraisal_data_dict)\n            )\n        except Exception as e:\n            frappe.throw(\n                _(\"Error while evaluating the final score formula: {0}\").format(e)\n            )\n\n    else:\n        # Calculate the final score as the average of the total score, average feedback score, and self-appraisal score\n        self.final_score = flt(\n            (\n                self.total_score + self.average_feedback_score + self.self_appraisal_score\n            )\n            / 3,\n            2,\n        )\n\n    # Set the final score with the appropriate precision\n    self.final_score = flt(self.final_score, appraisal_cycle.final", "CodeBleu_score": 33.27573229636153}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n    if self.status == \"On Leave\" and not self.leave_application:\n        frappe.throw(_(\"Leave Application is mandatory for On Leave\"))\n\n    if self.status == \"Present\" and not self.in_time:\n        frappe.throw(_(\"In Time is mandatory for Present\"))\n\n    if self.status == \"Present\" and not self.out_time:\n        frappe.throw(_(\"Out Time is mandatory for Present\"))\n\n    if self.status == \"Present\" and not self.employee_name:\n        frappe.throw(_(\"Employee Name is mandatory for Present\"))\n\n    if self.status == \"Present\" and not self.company:\n        frappe.throw(_(\"Company is mandatory for Present\"))\n\n    if self.status == \"Present\" and not self.attendance_date:\n        frappe.throw(_(\"Attendance Date is mandatory for Present\"))\n\n    if self.status == \"Absent\" and not self.employee_name:\n        frappe.throw(_(\"Employee Name is mandatory for Absent\"))\n\n    if self.status == \"Absent\" and not self.company:\n        frappe.throw(_(\"Company is mandatory for Absent\"))\n\n    if self.status == \"Absent\" and not self.attendance_date:\n        frappe.throw(_(\"Attendance Date is mandatory for Absent\"))\n\n    if self.status == \"Half Day\" and not self.in_time:\n        frappe.throw(_(\"In Time is mandatory for Half Day\"))\n\n    if self.status == \"Half Day\" and not self.out_time:\n        frappe.throw(_(\"Out Time is mandatory for Half Day\"))\n\n    if self.status == \"Half Day\" and not self.employee_name:\n        frappe.throw(_(\"Employee Name is mandatory for Half Day\"))\n\n    if self.status == \"Half Day\" and not self.company:\n        frappe.throw(_(\"Company is mandatory for Half Day\"))\n\n    if self.status == \"Half Day\" and not self.attendance_date:\n        frappe.throw(_", "CodeBleu_score": 26.132253898347336}, {"code": "def validate_attendance_date(self)\n\t\n    if self.status == \"On Leave\" and self.leave_application:\n        return\n    if getdate(self.attendance_date) > getdate(nowdate()):\n        frappe.throw(_(\"Attendance can not be marked for future dates\"))\n    if getdate(self.attendance_date) < getdate(self.employee_doj):\n        frappe.throw(_(\"Attendance can not be marked before employee's date of joining\"))\n\n", "CodeBleu_score": 29.072615208418323}, {"code": "def validate_attendance_date(self)\n\t\n    if self.status == \"On Leave\":\n        if not self.leave_application:\n            frappe.throw(_(\"Leave Application is mandatory for the selected status\"))\n    elif getdate(self.attendance_date) > getdate(nowdate()):\n        frappe.throw(_(\"Attendance can not be marked for future dates\"))\n    elif getdate(self.attendance_date) < getdate(self.employee_doj):\n        frappe.throw(_(\"Attendance can not be marked before the employee's date of joining\"))\n\n", "CodeBleu_score": 31.521802644171554}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t\n    attendance_records = frappe.db.sql(\n        \"\"\"\n            SELECT\n                name\n            FROM\n                `tabAttendance`\n            WHERE\n                employee = %(employee)s AND\n                attendance_date = %(attendance_date)s AND\n                docstatus < 2\n        \"\"\",\n        {\n            \"employee\": self.employee,\n            \"attendance_date\": self.attendance_date,\n        },\n        as_dict=True,\n    )\n    if attendance_records:\n        frappe.throw(\n            _(\n                \"Attendance for employee {0} on date {1} already exists. Please check {2}.\"\n            ).format(\n                get_link_to_form(\"Employee\", self.employee),\n                format_date(self.attendance_date),\n                get_link_to_form(\"Attendance\", attendance_records[0].name),\n            )\n        )\n\n", "CodeBleu_score": 33.75101662439797}, {"code": "def validate_duplicate_record(self)\n\t\n    if not self.employee:\n        return\n\n    attendance_record = frappe.db.sql(\n        \"\"\"\n            SELECT\n                name\n            FROM `tabAttendance`\n            WHERE\n                employee=%(employee)s AND\n                attendance_date=%(attendance_date)s AND\n                docstatus < 2 AND\n                name != %(name)s\n            LIMIT 1\n        \"\"\",\n        values={\n            \"employee\": self.employee,\n            \"attendance_date\": self.attendance_date,\n            \"name\": self.name,\n        },\n        as_dict=True,\n    )\n\n    if attendance_record:\n        frappe.throw(\n            _(\n                \"Attendance record already exists for employee {0} on {1}. See {2}.\".format(\n                    get_link_to_form(\"Employee\", self.employee),\n                    format_date(self.attendance_date),\n                    get_link_to_form(\"Attendance\", attendance_record[0].name),\n                )\n            )\n        )\n\n", "CodeBleu_score": 31.34795671526298}, {"code": "def validate_duplicate_record(self)\n\t\n    attendance = frappe.db.sql(\n        \"\"\"select name, employee, attendance_date\n        from `tabAttendance`\n        where employee = %s and attendance_date = %s and docstatus < 2\n        and name != %s\"\"\",\n        (self.employee, self.attendance_date, self.name),\n    )\n\n    if attendance:\n        attendance = attendance[0]\n        frappe.throw(\n            _(\n                \"Attendance for employee {0} is already marked on {1} in attendance record {2}.<br> Please update that record if this is a new entry.\"\n            ).format(\n                get_link_to_form(\"Employee\", self.employee),\n                format_date(self.attendance_date),\n                get_link_to_form(\"Attendance\", attendance[0]),\n            )\n        )\n\n", "CodeBleu_score": 40.69653999311539}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n\n    # Get the message details\n    message_details = frappe.db.sql(\"\"\"SELECT name, message_title, message_text, creation, status\n        FROM `tabMessage`\n        WHERE creation BETWEEN %s AND %s\n        AND status = 'Sent'\n        ORDER BY creation DESC\"\"\", (self.start_date, self.end_date), as_dict=True)\n\n    # Get the email addresses of users in the specified group\n    email_addresses = frappe.db.sql(\"\"\"SELECT email\n        FROM `tabUser`\n        WHERE enabled = 1\n        AND email IS NOT NULL\n        AND email != ''\n        AND user_type = 'System User'\n        AND name IN (\n            SELECT DISTINCT user\n            FROM `tabUser Group User`\n            WHERE parent = %s\n        )\"\"\", self.group, as_dict=True)\n\n    # Send an email to each user with the summary\n    for email_address in email_addresses:\n        email_args = {\n            'recipients': email_address.email,\n            'sender': frappe.get_value('Message Settings', None, 'sender_email'),\n            'subject': _('Message Summary for {0}').format(self.group),\n            'message': frappe.render_template('templates/emails/message_summary.html', {\n                'message_details': message_details,\n                'start_date': global_date_format(self.start_date),\n                'end_date': global_date_format(self.end_date),\n            }),\n            'delayed': True,\n            'reference_doctype': self.doctype,\n            'reference_name': self.name,\n        }\n        enqueue(method=frappe.sendmail, queue='short', timeout=300, event=None, is_async=True, **email_args)\n\n    # Update the status to \"Sent\"\n    self.status = 'Sent'\n    self.save()\n\n", "CodeBleu_score": 34.75300977947748}, {"code": "def send_summary(self)\n\t\n    # get all messages that have not been sent\n    messages = frappe.get_all(\n        \"Message\",\n        filters={\"status\": \"Open\", \"send_summary\": 1},\n        fields=[\"name\", \"subject\", \"date\", \"reply_by\", \"reply_summary\"],\n    )\n    if messages:\n        # get email addresses of users in the specified group\n        group = frappe.get_doc(\"Message Group\", self.name)\n        email_addresses = [\n            user.email\n            for user in frappe.get_all(\"User\", filters={\"message_group\": self.name})\n        ]\n        # send email\n        frappe.sendmail(\n            recipients=email_addresses,\n            subject=_(\"Daily Summary of Messages\"),\n            template=\"daily_message_summary\",\n            args={\n                \"messages\": messages,\n                \"group_name\": group.group_name,\n                \"group_description\": group.group_description,\n            },\n        )\n        # update status to \"Sent\"\n        for message in messages:\n            frappe.db.set_value(\n                \"Message\", message.name, \"status\", \"Sent\", update_modified=False\n            )\n\n", "CodeBleu_score": 35.344757359828414}, {"code": "def send_summary(self)\n\t\n    # Get all messages that are not sent\n    messages = frappe.get_all(\"Message\", filters={\"status\": \"Not Sent\"})\n\n    # If there are messages to send, continue\n    if messages:\n        # Get the email addresses of users in the specified group\n        group_email_addresses = frappe.get_all(\n            \"User\",\n            filters={\"email_signature\": self.email_group},\n            fields=[\"email\"],\n        )\n        # Get the email addresses of users in the specified group\n        group_email_addresses = [\n            email_address[\"email\"] for email_address in group_email_addresses\n        ]\n\n        # Get the email addresses of users in the specified group\n        group_email_addresses = \", \".join(group_email_addresses)\n\n        # Get the message details\n        message_details = frappe.get_all(\n            \"Message\",\n            filters={\"status\": \"Not Sent\"},\n            fields=[\"name\", \"message\", \"date\"],\n        )\n\n        # Create the message summary\n        message_summary = \"\"\n        for message_detail in message_details:\n            message_summary += \"\"\"\n            <div style=\"border: 1px solid #eee; padding: 10px; margin-bottom: 10px;\">\n                <h3 style=\"margin: 0;\">{message_name}</h3>\n                <p style=\"margin: 0;\">{message_date}</p>\n                <p style=\"margin: 0;\">{message_content}</p>\n            </div>\n            \"\"\".format(\n                message_name=message_detail[\"name\"],\n                message_date=global_date_format(message_detail[\"date\"]),\n                message_content=message_detail[\"message\"],\n            )\n\n        # Send the email\n        frappe.sendmail(\n            recipients=group_email_addresses,\n            subject=self.email_subject,\n            message=message_summary,\n            delayed=False,\n        )\n\n        # Update the status of the messages to \"Sent\"\n        for message in messages:\n            frappe.db.set_value(\"Message\", message[\"name", "CodeBleu_score": 32.122760985924}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n\n    if self.job_applicant:\n        job_applicant = frappe.get_doc(\"Job Applicant\", self.job_applicant)\n        if job_applicant.status == \"Rejected\":\n            frappe.throw(\n                _(\n                    \"Job Applicant {0} is Rejected. You can't create an Interview for a Rejected Applicant.\".format(\n                        get_link_to_form(\"Job Applicant\", self.job_applicant)\n                    )\n                )\n            )\n        if self.job_applicant_interview:\n            job_applicant_interview = frappe.get_doc(\n                \"Job Applicant Interview\", self.job_applicant_interview\n            )\n            if (\n                job_applicant_interview.interview_round\n                == self.interview_round\n                and job_applicant_interview.status != \"Rejected\"\n            ):\n                frappe.throw(\n                    _(\n                        \"Job Applicant {0} has already appeared for Interview Round {1}. You can't create a duplicate Interview for the same Interview Round.\".format(\n                            get_link_to_form(\"Job Applicant\", self.job_applicant),\n                            self.interview_round,\n                        )\n                    )\n                )\n\n", "CodeBleu_score": 35.18771686660917}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.job_applicant:\n        if frappe.db.exists(\n            \"Interview\",\n            {\n                \"job_applicant\": self.job_applicant,\n                \"interview_round\": self.interview_round,\n                \"name\": (\"!=\", self.name),\n            },\n        ):\n            job_applicant = frappe.get_doc(\"Job Applicant\", self.job_applicant)\n            frappe.throw(\n                _(\n                    \"Job Applicant {0} already has an interview scheduled for Interview Round {1} on {2}. Please check {3}.\"\n                ).format(\n                    get_link_to_form(job_applicant.doctype, job_applicant.name),\n                    self.interview_round,\n                    self.scheduled_on,\n                    get_link_to_form(\n                        \"Interview\",\n                        frappe.db.get_value(\n                            \"Interview\",\n                            {\n                                \"job_applicant\": self.job_applicant,\n                                \"interview_round\": self.interview_round,\n                                \"name\": (\"!=\", self.name),\n                            },\n                        ),\n                    ),\n                )\n            )\n\n", "CodeBleu_score": 34.11286740159032}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.job_applicant and self.interview_round:\n        duplicate_interview = frappe.db.exists(\n            \"Interview\",\n            {\n                \"job_applicant\": self.job_applicant,\n                \"interview_round\": self.interview_round,\n                \"name\": [\"!=\", self.name],\n            },\n        )\n        if duplicate_interview:\n            job_applicant = frappe.get_doc(\"Job Applicant\", self.job_applicant)\n            frappe.throw(\n                _(\n                    \"Job Applicant {0} is already scheduled for interview round {1} on {2} at {3}.\n", "CodeBleu_score": 47.00171786476312}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n\n    # Get a list of all skill assessments for the employee\n    assessments = frappe.get_all(\n        \"Skill Assessment\",\n        filters={\"employee\": self.employee},\n        fields=[\"rating\"],\n        order_by=\"creation\",\n    )\n\n    # Sum the ratings of all skill assessments\n    total_ratings = sum(assessment.rating for assessment in assessments)\n\n    # Calculate the average rating\n    average_rating = 0 if len(assessments) == 0 else total_ratings / len(assessments)\n\n    # Store the average rating in the document\n    self.average_rating = average_rating\n\n", "CodeBleu_score": 21.114896709175966}, {"code": "def calculate_average_rating(self)\n\t\n    total_ratings = 0\n    total_assessments = 0\n    for assessment in self.skill_assessments:\n        if assessment.rating:\n            total_ratings += assessment.rating\n            total_assessments += 1\n    if total_assessments > 0:\n        self.average_rating = total_ratings / total_assessments\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 24.031299092995965}, {"code": "def calculate_average_rating(self)\n\t\n    if not self.skill_assessments:\n        self.average_rating = 0\n        return\n\n    total = sum([assessment.rating for assessment in self.skill_assessments if assessment.rating])\n    self.average_rating = total / len(self.skill_assessments)\n\n", "CodeBleu_score": 34.26261020409612}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.interviewers:\n        for interviewer in doc.interviewers:\n            interview.append(\"interview_details\", {\n                \"interviewer\": interviewer\n            })\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 45.05002298196738}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.get_doc({\n        \"doctype\": \"Interview\",\n        \"interview_round\": doc.interview_round,\n        \"designation\": doc.designation\n    })\n    interview.insert()\n    if doc.interviewers:\n        for interviewer in doc.interviewers:\n            interview.append(\"interview_details\", {\n                \"interviewer\": interviewer.interviewer,\n                \"interview_time\": interviewer.interview_time,\n                \"interview_date\": interviewer.interview_date,\n                \"interview_mode\": interviewer.interview_mode\n            })\n        interview.save()\n    return interview\n\n", "CodeBleu_score": 31.21946300285994}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.get(\"interview_round\")\n    interview.designation = doc.get(\"designation\")\n    interview.interviewers = doc.get(\"interviewers\")\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 33.30205848612486}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n\n    job_offer_list = frappe.db.sql(\n        \"\"\"\n        SELECT\n            name\n        FROM `tabJob Offer`\n        WHERE\n            status = 1\n            AND designation = %(designation)s\n            AND company = %(company)s\n            AND (\n                (\n                    DATE(from_date) BETWEEN %(from_date)s AND %(to_date)s\n                    AND DATE(to_date) BETWEEN %(from_date)s AND %(to_date)s\n                )\n                OR (\n                    DATE(from_date) BETWEEN %(from_date)s AND %(to_date)s\n                    AND DATE(to_date) > %(to_date)s\n                )\n                OR (\n                    DATE(from_date) < %(from_date)s\n                    AND DATE(to_date) BETWEEN %(from_date)s AND %(to_date)s\n                )\n            )\n    \"\"\",\n        {\n            \"designation\": self.designation,\n            \"company\": self.company,\n            \"from_date\": from_date,\n            \"to_date\": to_date,\n        },\n        as_dict=1,\n    )\n\n    return job_offer_list\n\n", "CodeBleu_score": 44.3613012194309}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n\n    return frappe.db.sql(\n        \"\"\"\n            SELECT\n                name\n            FROM `tabJob Offer`\n            WHERE\n                designation = %(designation)s AND\n                company = %(company)s AND\n                docstatus = 1 AND\n                date >= %(from_date)s AND\n                date <= %(to_date)s\n        \"\"\",\n        values={\n            \"designation\": self.designation,\n            \"company\": self.company,\n            \"from_date\": from_date,\n            \"to_date\": to_date,\n        },\n        as_dict=1,\n    )\n\n", "CodeBleu_score": 47.04019792762813}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    return frappe.db.sql(\"\"\"\n        SELECT\n            name\n        FROM `tabJob Offer`\n        WHERE\n            designation = %(designation)s AND\n            company = %(company)s AND\n            docstatus = 1 AND\n            date_of_offer BETWEEN %(from_date)s AND %(to_date)s\n    \"\"\", {\n        \"designation\": self.designation,\n        \"company\": self.company,\n        \"from_date\": from_date,\n        \"to_date\": to_date\n    }, as_dict=1)\n\n", "CodeBleu_score": 47.75694057066745}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    filters = {\"docstatus\": 1}\n    if company:\n        filters[\"company\"] = company\n    if department:\n        filters[\"department\"] = department\n    total_job_offers = frappe.db.count(\n        \"Job Offer\", filters=filters, debug=False, as_list=True\n    )\n    accepted_job_offers = frappe.db.count(\n        \"Job Offer\",\n        filters={\"docstatus\": 1, \"status\": \"Accepted\"},\n        debug=False,\n        as_list=True,\n    )\n    if total_job_offers[0] > 0:\n        offer_acceptance_rate = (\n            accepted_job_offers[0] / total_job_offers[0] * 100\n        )\n    else:\n        offer_acceptance_rate = 0\n    return {\n        \"offer_acceptance_rate\": offer_acceptance_rate,\n        \"offer_acceptance_rate_type\": \"Percent\",\n    }\n\n", "CodeBleu_score": 45.611441039947515}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    filters = {}\n    if company:\n        filters.update({\"company\": company})\n    if department:\n        filters.update({\"department\": department})\n    total_job_offers = frappe.db.count(\n        \"Job Offer\",\n        filters={\"docstatus\": 1, **filters},\n    )\n    accepted_job_offers = frappe.db.count(\n        \"Job Offer\",\n        filters={\"docstatus\": 1, \"status\": \"Accepted\", **filters},\n    )\n    if total_job_offers == 0:\n        return 0, \"Percent\"\n    return (accepted_job_offers / total_job_offers) * 100, \"Percent\"\n\n", "CodeBleu_score": 34.94626476343038}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    filters = {}\n    if company:\n        filters.update({\"company\": company})\n    if department:\n        filters.update({\"department\": department})\n    job_offers = frappe.get_all(\"Job Offer\", filters=filters, fields=[\"name\", \"docstatus\"])\n    total_job_offers = len(job_offers)\n    accepted_job_offers = len(\n        [job_offer for job_offer in job_offers if job_offer.docstatus == 1]\n    )\n    if total_job_offers == 0:\n        return None\n    else:\n        return {\"value\": accepted_job_offers / total_job_offers * 100, \"type\": \"Percent\"}\n\n", "CodeBleu_score": 34.018220990542126}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = this.employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn new ResponseEntity<>(result, HttpStatus.OK);\n}", "CodeBleu_score": 74.86454793718032}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    final Result result = this.employerService.register(employerForRegisterDto);\n\n    if (!result.isSuccess())\n        return new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n    return new ResponseEntity<>(result, HttpStatus.OK);\n}", "CodeBleu_score": 74.38770856601839}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tResult result = this.employerService.register(employerForRegisterDto);\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\treturn new ResponseEntity<>(result, HttpStatus.OK);\n}", "CodeBleu_score": 70.81702125526857}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t  final var companyStaff = this.getById(companyStaffForUpdateDto.getId());\n  if (!companyStaff.isPresent())\n    return new ErrorResult(Messages.companyStaffNotFound);\n\n  final var newCompanyStaff = companyStaff.get();\n\n  if (!this.checkPassword(newCompanyStaff, companyStaffForUpdateDto.getPassword()))\n    return new ErrorResult(Messages.wrongPassword);\n\n  newCompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n  newCompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\n  this.save(newCompanyStaff);\n\n  return new SuccessResult(Messages.companyStaffUpdated);\n}", "CodeBleu_score": 41.84206886262102}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\tfinal var companyStaff = companyStaffDao.findById(companyStaffForUpdateDto.getId()).orElse(null);\n\n\tif (companyStaff == null) {\n\t\treturn new ErrorResult(Messages.noSuchCompanyStaff);\n\t}\n\n\tif (!companyStaff.getPassword().equals(companyStaffForUpdateDto.getPassword())) {\n\t\treturn new ErrorResult(Messages.wrongPassword);\n\t}\n\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\tcompanyStaffDao.save(companyStaff);\n\n\treturn new SuccessResult(Messages.companyStaffUpdated);\n}", "CodeBleu_score": 39.95762889107647}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\tfinal Optional<CompanyStaff> optionalCompanyStaff = this.companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\n\tif (!optionalCompanyStaff.isPresent())\n\t\treturn new ErrorResult(Messages.CompanyStaff.NOT_FOUND);\n\n\tfinal CompanyStaff companyStaff = optionalCompanyStaff.get();\n\n\tif (!companyStaff.getPassword().equals(companyStaffForUpdateDto.getPassword()))\n\t\treturn new ErrorResult(Messages.CompanyStaff.WRONG_PASSWORD);\n\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\n\tthis.companyStaffDao.save(companyStaff);\n\n\treturn new SuccessResult(Messages.CompanyStaff.UPDATED);\n}", "CodeBleu_score": 45.39793081452621}]}
