{"instance_id": "47ee1dae200b", "generation_result": [{"code": "public static void PreloadDll(string dllName){\n\t    string dllDirectory = Path.GetDirectoryName(Process.GetCurrentProcess().MainModule.FileName) + \"/\";\n    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n        // Windows\n        Win32LoadLibrary(dllDirectory + dllName);\n    } else if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux)) {\n        // Linux\n        PosixDlopen(dllDirectory + dllName);\n    } else {\n        throw new PlatformNotSupportedException(\"This operating system is not supported.\");\n    }\n}", "CodeBleu_score": 43.960939909290325}, {"code": "public static void PreloadDll(string dllName){\n\t    string dllDirectory = Path.Combine(Path.GetDirectoryName(Process.GetCurrentProcess().MainModule.FileName), \"dll\");\n    string dllPath = Path.Combine(dllDirectory, dllName);\n    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n        LoadLibrary(dllPath);\n    } else {\n        dlopen(dllPath, RTLD_NOW);\n    }\n}", "CodeBleu_score": 29.863573278031087}, {"code": "public static void PreloadDll(string dllName){\n\t    string dllDirectory = Directory.GetCurrentDirectory();\n    string dllPath = dllDirectory + \"\\\\\" + dllName;\n    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n        Win32PreloadDll(dllPath);\n    } else {\n        PosixPreloadDll(dllPath);\n    }\n}", "CodeBleu_score": 30.913269401889075}]}
{"instance_id": "2073a8291d05", "generation_result": [{"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t\tif (!loadedAssetsFiles.ContainsKey(originalPath)) {\n\t\tvar assetsFile = new SerializedFile(reader, originalPath);\n\t\tif (unityVersion != null) {\n\t\t\tassetsFile.SetVersion(unityVersion);\n\t\t}\n\t\tloadedAssetsFiles.Add(originalPath, assetsFile);\n\t\tloadedFileAssets.Add(assetsFile);\n\t\tif (assetsFile.m_Version < 0x0D) {\n\t\t\tvar assetsManager = new AssetsManager();\n\t\t\tassetsManager.LoadFiles(new[] { assetsFile });\n\t\t\tassetsManager.LoadClassDatabaseFromPackage(assetsFile.filePath + \".xml\");\n\t\t}\n\t}\n}", "CodeBleu_score": 31.42354522368717}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t\tvar fileName = Path.GetFileName(originalPath);\n\tvar filePath = Path.Combine(Path.GetDirectoryName(originalPath), fileName);\n\tif (loadedFiles.ContainsKey(filePath)) {\n\t\treturn;\n\t}\n\ttry {\n\t\tvar assetsFile = new SerializedFile(reader, originalPath);\n\t\tif (assetsFile.header.format < 0x0E) {\n\t\t\tassetsFile.SetVersion(unityVersion);\n\t\t}\n\t\tloadedFiles.Add(filePath, assetsFile);\n\t} catch (Exception e) {\n\t\tLogger.Error($\"{fileName} {e}\");\n\t}\n}", "CodeBleu_score": 30.389125377290167}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t\tvar fileName = Path.GetFileName(originalPath);\n\tif (File.Exists(Path.Combine(Settings.Default.gameFolder, fileName))) {\n\t\treturn;\n\t}\n\tvar assetsFile = new SerializedFile(reader, originalPath);\n\tif (assetsFile.header.format > 0x14) {\n\t\tvar resourceFileName = Path.Combine(Settings.Default.gameFolder, fileName);\n\t\tvar resourceReader = new FileReader(resourceFileName);\n\t\tif (resourceReader.ReadUInt32() == 0x52454745) {\n\t\t\tvar resourceAsset = new SerializedFile(resourceReader);\n\t\t\tif (resourceAsset.header.format == assetsFile.header.format) {\n\t\t\t\tassetsFile.SetVersion(resourceAsset.header.version);\n\t\t\t}\n\t\t}\n\t\tresourceReader.Dispose();\n\t}\n\tif (unityVersion != null) {\n\t\tassetsFile.SetVersion(unityVersion);\n\t}\n\tassetsFileList.Add(assetsFile);\n}", "CodeBleu_score": 35.039126689727716}]}
{"instance_id": "5dacc6a26301", "generation_result": [{"code": "public ImportedFrame FindFrameByPath(string path){\n\t\tstring name = Path.GetFileName(path)\n\tforeach (ImportedFrame frame in this.Frames) {\n\t\tif (frame.Name == name && frame.Path == path) {\n\t\t\treturn frame\n\t\t}\n\t}\n\treturn null\n}", "CodeBleu_score": 41.69530740307516}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\t    var frameName = Path.GetFileName(path)\n    foreach (var childFrame in this.childFrames) {\n        if (childFrame.name == frameName) {\n            if (childFrame.path == path) {\n                return childFrame\n            }\n        }\n    }\n    return null\n}", "CodeBleu_score": 49.01570950779526}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\t\tstring[] pathParts = path.Split('/')\n\tstring frameName = pathParts[pathParts.Length - 1]\n\tList<ImportedFrame> frames = new List<ImportedFrame>()\n\tframes.Add(this)\n\twhile (frames.Count > 0) {\n\t\tImportedFrame frame = frames[0]\n\t\tframes.RemoveAt(0)\n\t\tif (frame.Name == frameName && frame.Path == path) {\n\t\t\treturn frame\n\t\t}\n\t\tfor (int i = 0; i < frame.Children.Count; i++) {\n\t\t\tframes.Add(frame.Children[i])\n\t\t}\n\t}\n\treturn null\n}", "CodeBleu_score": 28.718504990225796}]}
{"instance_id": "c20b04c4ad37", "generation_result": [{"code": "public static FileReader DecompressGZip(FileReader reader){\n\t\tusing (MemoryStream compressedStream = new MemoryStream(reader.ReadToEnd()))\n\tusing (GZipStream decompressionStream = new GZipStream(compressedStream, CompressionMode.Decompress))\n\tusing (MemoryStream decompressedStream = new MemoryStream()) {\n\t\tdecompressionStream.CopyTo(decompressedStream);\n\t\treturn new FileReader(decompressedStream.ToArray());\n\t}\n}", "CodeBleu_score": 34.69204994851584}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\t\tMemoryStream memStream = new MemoryStream()\n\treader.BaseStream.CopyTo(memStream)\n\tmemStream.Position = 0\n\tMemoryStream output = new MemoryStream()\n\tusing (GZipStream decompressionStream = new GZipStream(memStream, CompressionMode.Decompress)) {\n\t\tdecompressionStream.CopyTo(output)\n\t}\n\treturn new FileReader(output.ToArray())\n}", "CodeBleu_score": 23.815554249263858}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\t\tMemoryStream memStream = new MemoryStream()\n\treader.BaseStream.CopyTo(memStream)\n\tmemStream.Position = 0\n\tMemoryStream decompressedStream = new MemoryStream()\n\tusing (GZipStream decompressionStream = new GZipStream(memStream, CompressionMode.Decompress)) {\n\t\tdecompressionStream.CopyTo(decompressedStream)\n\t}\n\tdecompressedStream.Position = 0\n\treturn new FileReader(decompressedStream)\n}", "CodeBleu_score": 22.09108152754058}]}
{"instance_id": "11ce5c7b009d", "generation_result": [{"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\t\n\t// Initialize the switches collection.\n\tSwitches = new Hashtable();\n\t\n\t// Initialize the non-switch strings collection.\n\tNonSwitches = new ArrayList();\n\t\n\t// Initialize the current switch form.\n\tSwitchForm currentSwitchForm = null;\n\t\n\t// Iterate through the command strings.\n\tfor (int i = 0; i < commandStrings.Length; i++) {\n\t\t\n\t\t// Get the current command string.\n\t\tstring commandString = commandStrings[i];\n\t\t\n\t\t// Check if the command string is a switch.\n\t\tif (commandString.StartsWith(\"/\")) {\n\t\t\t\n\t\t\t// Check if the command string is a stop token.\n\t\t\tif (commandString == \"/\") {\n\t\t\t\t\n\t\t\t\t// Set the current switch form to null.\n\t\t\t\tcurrentSwitchForm = null;\n\t\t\t\t\n\t\t\t}\n\t\t\telse {\n\t\t\t\t\n\t\t\t\t// Check if the current switch form is null.\n\t\t\t\tif (currentSwitchForm == null) {\n\t\t\t\t\t\n\t\t\t\t\t// Iterate through the switch forms.\n\t\t\t\t\tfor (int j = 0; j < switchForms.Length; j++) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Get the current switch form.\n\t\t\t\t\t\tSwitchForm switchForm = switchForms[j];\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Check if the switch form is the current switch form.\n\t\t\t\t\t\tif (commandString == switchForm.Switch) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Set the current switch form.\n\t\t\t\t\t\t\tcurrentSwitchForm = switchForm;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Break out of the loop.\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t", "CodeBleu_score": 37.97466804804976}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\t// The array of non-switch strings.\n\tArrayList nonSwitchStrings = new ArrayList();\n\t\n\t// Iterate through the command strings.\n\tfor(int i = 0; i < commandStrings.Length; i++) {\n\t\t// Get the current command string.\n\t\tstring commandString = commandStrings[i];\n\t\t\n\t\t// Check if the current command string is a switch.\n\t\tif(commandString.StartsWith(\"-\")) {\n\t\t\t// Get the switch name.\n\t\t\tstring switchName = commandString.Substring(1);\n\t\t\t\n\t\t\t// Check if the switch name is a stop token.\n\t\t\tif(switchName == \"stop\") {\n\t\t\t\t// Stop parsing switches.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\t// Check if the switch name is valid.\n\t\t\tif(IsSwitchNameValid(switchName, switchForms)) {\n\t\t\t\t// Get the index of the switch.\n\t\t\t\tint switchIndex = GetSwitchIndex(switchName, switchForms);\n\t\t\t\t\n\t\t\t\t// Check if the switch has a value.\n\t\t\t\tif(switchForms[switchIndex].HasValue) {\n\t\t\t\t\t// Check if the next command string is a value.\n\t\t\t\t\tif(i < commandStrings.Length - 1 && !commandStrings[i + 1].StartsWith(\"-\")) {\n\t\t\t\t\t\t// Get the value of the switch.\n\t\t\t\t\t\tstring switchValue = commandStrings[i + 1];\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Set the value of the switch.\n\t\t\t\t\t\tswitchForms[switchIndex].Value = switchValue;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Increment the index.\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// Throw an exception.\n\t\t\t\t\t\tthrow new Exception(\"The switch \\\"\" + switchName + \"\\\" requires a value.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t", "CodeBleu_score": 40.4441736897376}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\tstring switchToken = \"-\";\n\tstring stopToken = \"--\";\n\t\n\t// Create a collection of non-switch strings\n\tArrayList nonSwitchStrings = new ArrayList();\n\t\n\t// Iterate through the command strings\n\tforeach (string commandString in commandStrings) {\n\t\t// If the command string is a stop token, stop parsing switches\n\t\tif (commandString == stopToken) {\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\t// If the command string is a switch token, parse the switch\n\t\tif (commandString.StartsWith(switchToken)) {\n\t\t\t// Get the switch name\n\t\t\tstring switchName = commandString.Substring(switchToken.Length);\n\t\t\t\n\t\t\t// Iterate through the switch forms\n\t\t\tforeach (SwitchForm switchForm in switchForms) {\n\t\t\t\t// If the switch form's switch name matches the switch name, parse the switch\n\t\t\t\tif (switchForm.SwitchName == switchName) {\n\t\t\t\t\t// Add the switch form to the collection of parsed switch forms\n\t\t\t\t\tswitchForm.Parsed = true;\n\t\t\t\t\t\n\t\t\t\t\t// If the switch form's switch type is boolean, set the switch form's switch value to true\n\t\t\t\t\tif (switchForm.SwitchType == SwitchType.Boolean) {\n\t\t\t\t\t\tswitchForm.SwitchValue = \"true\";\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// If the switch form's switch type is not boolean, set the switch form's switch value to the next command string\n\t\t\t\t\telse {\n\t\t\t\t\t\t// If there is no next command string, throw an exception\n\t\t\t\t\t\tif (commandStrings.Length == 0) {\n\t\t\t\t\t\t\tthrow new Exception(\"Switch \" + switchName + \" requires a value.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Get the next command string\n\t\t\t\t\t\tstring nextCommandString = commandStrings[0];\n\t\t\t\t\t\t\n\t\t\t\t\t\t// If the next", "CodeBleu_score": 37.99748224680505}]}
{"instance_id": "b8da2d0a3f76", "generation_result": [{"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\tthis.m_Texture2D = m_Texture2D;\n\tthis.m_ImageData = this.m_Texture2D.GetRawTextureData();\n\tthis.m_Width = this.m_Texture2D.width;\n\tthis.m_Height = this.m_Texture2D.height;\n\tthis.m_TextureFormat = this.m_Texture2D.format;\n\tthis.m_Version = this.m_Texture2D.version;\n\tthis.m_Platform = this.m_Texture2D.platform;\n\tthis.m_OutputSize = this.m_ImageData.Length;\n}", "CodeBleu_score": 27.73571147829099}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\tm_ImageData = m_Texture2D.image_data\n\tm_Width = m_Texture2D.width\n\tm_Height = m_Texture2D.height\n\tm_TextureFormat = m_Texture2D.m_TextureFormat\n\tm_Version = m_Texture2D.version\n\tm_Platform = m_Texture2D.platform\n\tm_OutputSize = m_Texture2D.m_StreamData.size\n}", "CodeBleu_score": 32.651565517451814}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\tthis.m_Texture2D = m_Texture2D\n\tthis.m_TextureFormat = m_Texture2D.format\n\tthis.m_Texture2D.GetPixelData(this.m_TextureData)\n\tthis.m_Width = m_Texture2D.width\n\tthis.m_Height = m_Texture2D.height\n\tthis.m_Version = m_Texture2D.version\n\tthis.m_Platform = m_Texture2D.platform\n\tthis.m_OutputSize = m_Texture2D.outputSize\n}", "CodeBleu_score": 29.02716690323447}]}
{"instance_id": "4d1412b550a3", "generation_result": [{"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear()\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tif (sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"active\").boolValue) {\n\t\t\tresult.Add(sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"name\").stringValue)\n\t\t}\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\"\n\t}\n\telse {\n\t\treturn string.Join(\", \", result.ToArray())\n\t}\n}", "CodeBleu_score": 35.45943794073022}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear()\n\tfor (var i = 0; i < sp.arraySize; i++) {\n\t\tif (sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"active\").boolValue) {\n\t\t\tresult.Add(sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"name\").stringValue)\n\t\t}\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\"\n\t} else {\n\t\treturn string.Join(\", \", result.ToArray())\n\t}\n}", "CodeBleu_score": 37.54983705621648}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear()\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tif (sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"active\").boolValue) {\n\t\t\tresult.Add(sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"name\").stringValue)\n\t\t}\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\"\n\t} else {\n\t\treturn string.Join(\", \", result.ToArray())\n\t}\n}", "CodeBleu_score": 35.4796334257218}]}
{"instance_id": "5014bde74f8b", "generation_result": [{"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t    if (prop.isAllowed && !sp.arrayContains(prop.name)) {\n        menu.AddItem(new GUIContent(prop.name), false, delegate {\n            if (add) {\n                sp.arrayAdd(prop.name)\n            } else {\n                sp.arrayRemove(prop.name)\n            }\n            sp.serializedObject.ApplyModifiedProperties()\n        })\n    }\n}", "CodeBleu_score": 25.621309586769776}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t\tif (prop.canAdd && !sp.arrayContains(prop.name)) {\n\t\tmenu.AddItem(new GUIContent(prop.name + \" (\" + prop.type + \")\"), false, () => {\n\t\t\tif (add) {\n\t\t\t\tsp.arrayAdd(prop.name);\n\t\t\t} else {\n\t\t\t\tsp.arrayRemove(prop.name);\n\t\t\t}\n\t\t\tsp.serializedObject.ApplyModifiedProperties();\n\t\t});\n\t}\n}", "CodeBleu_score": 25.269772214900645}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t\tvar name = prop.displayName\n\tvar isActive = sp.arraySize > 0 && sp.GetArrayElementAtIndex(0).stringValue == name\n\tif (add && !isActive) {\n\t\tmenu.AddItem(new GUIContent(name), false, () => {\n\t\t\tsp.InsertArrayElementAtIndex(0)\n\t\t\tsp.GetArrayElementAtIndex(0).stringValue = name\n\t\t\tsp.serializedObject.ApplyModifiedProperties()\n\t\t})\n\t} else if (!add && isActive) {\n\t\tmenu.AddItem(new GUIContent(name), false, () => {\n\t\t\tsp.DeleteArrayElementAtIndex(0)\n\t\t\tsp.serializedObject.ApplyModifiedProperties()\n\t\t})\n\t}\n}", "CodeBleu_score": 23.16811708055121}]}
{"instance_id": "20e390481814", "generation_result": [{"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t    float x = sp.vector3Value.x;\n    float y = sp.vector3Value.y;\n    float z = sp.vector3Value.z;\n\n    bool allEqual = Mathf.Approximately(x, y) && Mathf.Approximately(x, z);\n    bool anyDifferent = !Mathf.Approximately(x, y) || !Mathf.Approximately(x, z);\n\n    if (allEqual || !anyDifferent) {\n        x = EditorGUILayout.FloatField(sp.displayName, x);\n    } else if (showXyz) {\n        Vector3 v = EditorGUILayout.Vector3Field(sp.displayName, sp.vector3Value);\n        x = v.x;\n        y = v.y;\n        z = v.z;\n    } else {\n        EditorGUILayout.BeginHorizontal();\n        EditorGUILayout.PrefixLabel(sp.displayName);\n        x = EditorGUILayout.FloatField(x);\n        EditorGUILayout.EndHorizontal();\n    }\n\n    if (showXyz) {\n        if (allEqual || !anyDifferent) {\n            y = x;\n            z = x;\n        }\n    } else {\n        if (allEqual || !anyDifferent) {\n            y = x;\n            z = x;\n        }\n\n        EditorGUILayout.BeginHorizontal();\n        EditorGUILayout.PrefixLabel(\" \");\n        bool showXyzNew = EditorGUILayout.Toggle(showXyz, EditorStyles.radioButton, GUILayout.Width(14));\n        EditorGUILayout.EndHorizontal();\n\n        if (showXyzNew != showXyz) {\n            showXyz = showXyzNew;\n        }\n    }\n\n    if (sp.vector3Value.x != x || sp.vector3Value.y != y || sp.vector3Value.z != z) {\n        sp.vector3Value = new Vector3(x, y, z);\n        return true;\n    }\n\n    return false;\n}", "CodeBleu_score": 42.99437468616824}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t    if (sp.propertyType != SerializedPropertyType.Vector3)\n        return false;\n\n    // Get the x, y, and z values from the Vector3.\n    float x = sp.vector3Value.x;\n    float y = sp.vector3Value.y;\n    float z = sp.vector3Value.z;\n\n    // Check if the x, y, and z values are approximately equal.\n    bool isSingleValue = Mathf.Approximately(x, y) && Mathf.Approximately(x, z);\n\n    // Check if the x, y, and z values are different.\n    bool isMultipleValues = !Mathf.Approximately(x, y) || !Mathf.Approximately(x, z) || !Mathf.Approximately(y, z);\n\n    // If the x, y, and z values are approximately equal, display the property as a single float.\n    if (isSingleValue) {\n        EditorGUILayout.PropertyField(sp, showXyz ? new GUIContent(\"X\") : sp.displayName);\n    }\n    // If the x, y, and z values are different, display the property as a Vector3.\n    else if (isMultipleValues) {\n        if (showXyz) {\n            EditorGUILayout.PropertyField(sp, sp.displayName);\n        }\n        else {\n            EditorGUILayout.BeginHorizontal();\n            EditorGUILayout.PropertyField(sp, new GUIContent(\"X\"), GUILayout.MinWidth(EditorGUIUtility.labelWidth));\n            EditorGUILayout.PropertyField(sp, new GUIContent(\"Y\"), GUILayout.MinWidth(EditorGUIUtility.labelWidth));\n            EditorGUILayout.PropertyField(sp, new GUIContent(\"Z\"), GUILayout.MinWidth(EditorGUIUtility.labelWidth));\n            EditorGUILayout.EndHorizontal();\n        }\n    }\n    // If the x, y, and z values are neither approximately equal nor different, display the property as a single float.\n    else {\n        EditorGUILayout.PropertyField(sp, showXyz ? new GUIContent(\"X\") : sp.displayName);\n   ", "CodeBleu_score": 33.09392889272666}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t\tvar value = sp.vector3Value;\n\tvar isMultiple = !Mathf.Approximately(value.x, value.y) || !Mathf.Approximately(value.x, value.z);\n\tvar isMultipleX = !Mathf.Approximately(value.x, value.y) || !Mathf.Approximately(value.x, value.z);\n\tvar isMultipleY = !Mathf.Approximately(value.y, value.x) || !Mathf.Approximately(value.y, value.z);\n\tvar isMultipleZ = !Mathf.Approximately(value.z, value.x) || !Mathf.Approximately(value.z, value.y);\n\n\tEditorGUI.BeginChangeCheck();\n\tEditorGUI.showMixedValue = isMultiple;\n\tvar newValue = EditorGUILayout.FloatField(sp.displayName, value.x);\n\tEditorGUI.showMixedValue = false;\n\tif (EditorGUI.EndChangeCheck()) {\n\t\tif (showXyz) {\n\t\t\tif (isMultipleX) value.x = newValue;\n\t\t\tif (isMultipleY) value.y = newValue;\n\t\t\tif (isMultipleZ) value.z = newValue;\n\t\t} else {\n\t\t\tvalue.x = newValue;\n\t\t\tvalue.y = newValue;\n\t\t\tvalue.z = newValue;\n\t\t}\n\t\tsp.vector3Value = value;\n\t}\n\n\tif (showXyz) {\n\t\tEditorGUI.BeginChangeCheck();\n\t\tEditorGUI.showMixedValue = isMultipleY;\n\t\tnewValue = EditorGUILayout.FloatField(\"Y\", value.y);\n\t\tEditorGUI.showMixedValue = false;\n\t\tif (EditorGUI.EndChangeCheck()) {\n\t\t\tvalue.y = newValue;\n\t\t\tsp.vector3Value = value;\n\t\t}\n\n\t\tEditorGUI.BeginChangeCheck();\n\t\tEditorGUI.showMixed", "CodeBleu_score": 29.53840625926573}]}
{"instance_id": "c3587cbcda7e", "generation_result": [{"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\t\n\t// Check if a matching entry already exists\n\tfor (int i = 0; i < list.Count; i++) {\n\t\tif (list[i].baseMat == baseMat && list[i].texture == texture && list[i].id == id && list[i].props == props) {\n\t\t\tlist[i].count++\n\t\t\treturn list[i].customMat\n\t\t}\n\t}\n\t\n\t// Create a new entry\n\tvar entry = new Entry()\n\tentry.baseMat = baseMat\n\tentry.texture = texture\n\tentry.id = id\n\tentry.props = props\n\tentry.count = 1\n\tentry.customMat = new Material(baseMat)\n\tentry.customMat.SetTexture(\"_MainTex\", texture)\n\tentry.customMat.SetInt(\"_ID\", id)\n\tentry.customMat.SetInt(\"_Props\", props)\n\tlist.Add(entry)\n\t\n\treturn entry.customMat\n}", "CodeBleu_score": 25.942375927052485}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\t// If the base material is null, return null\n\tif (!baseMat) return null\n\n\t// If the texture is null, return the base material\n\tif (!texture) return baseMat\n\n\t// If the id is 0, return the base material\n\tif (id == 0) return baseMat\n\n\t// If the properties are 0, return the base material\n\tif (props == 0) return baseMat\n\n\t// If the list is null, create it\n\tif (!_list) _list = new List<MaterialEntry>()\n\n\t// If the list is empty, add the first entry\n\tif (_list.Count == 0) {\n\t\tvar entry = new MaterialEntry(baseMat, texture, id, props)\n\t\t_list.Add(entry)\n\t\treturn entry.mat\n\t}\n\n\t// Search the list for an existing entry\n\tfor (var i = 0; i < _list.Count; i++) {\n\t\t// If the entry's base material, texture, id, and properties match, increment the entry's count and return its material\n\t\tif (_list[i].baseMat == baseMat && _list[i].texture == texture && _list[i].id == id && _list[i].props == props) {\n\t\t\t_list[i].count++\n\t\t\treturn _list[i].mat\n\t\t}\n\t}\n\n\t// Create a new entry\n\tvar entry = new MaterialEntry(baseMat, texture, id, props)\n\n\t// Add the new entry to the list and return its material\n\t_list.Add(entry)\n\treturn entry.mat\n}", "CodeBleu_score": 24.415381904303036}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\t// Get the list of custom materials from the base material\n\tList<CustomMaterial> customMats = baseMat.GetFloat(\"_CustomMaterials\") > 0 ? baseMat.GetFloat(\"_CustomMaterials\") : new List<CustomMaterial>();\n\n\t// Check if there is a matching custom material in the list\n\tfor (int i = 0; i < customMats.Count; i++) {\n\t\tCustomMaterial customMat = customMats[i];\n\t\tif (customMat.texture == texture && customMat.id == id && customMat.props == props) {\n\t\t\t// Increment the count of the existing custom material\n\t\t\tcustomMat.count++;\n\t\t\t// Update the custom material\n\t\t\tcustomMats[i] = customMat;\n\t\t\t// Update the base material\n\t\t\tbaseMat.SetFloat(\"_CustomMaterials\", customMats);\n\t\t\t// Return the custom material\n\t\t\treturn customMat.mat;\n\t\t}\n\t}\n\n\t// Create a new custom material\n\tCustomMaterial customMat = new CustomMaterial();\n\t// Create a new material\n\tcustomMat.mat = new Material(baseMat);\n\t// Set the new material's texture\n\tcustomMat.mat.SetTexture(\"_MainTex\", texture);\n\t// Set the new material's id\n\tcustomMat.mat.SetFloat(\"_Id\", id);\n\t// Set the new material's properties\n\tcustomMat.mat.SetFloat(\"_Props\", props);\n\t// Set the new material's count to 1\n\tcustomMat.count = 1;\n\t// Set the new material's texture\n\tcustomMat.texture = texture;\n\t// Set the new material's id\n\tcustomMat.id = id;\n\t// Set the new material's properties\n\tcustomMat.props = props;\n\t// Add the new custom material to the list\n\tcustomMats.Add(customMat);\n\t// Update the base material\n\tbaseMat.SetFloat(\"_CustomMaterials\", customMats);\n\t// Return the new custom material\n\treturn customMat.mat;\n}", "CodeBleu_score": 30.09601362594465}]}
{"instance_id": "a35149bc8b8b", "generation_result": [{"code": "public static void Remove(Material customMat){\n\t\tif (!customMat) {\n\t\tDebug.LogError(\"The material provided was invalid.\")\n\t\treturn\n\t}\n\n\tfor (int i = 0; i < entries.Count; i++) {\n\t\tif (entries[i].material == customMat) {\n\t\t\tentries[i].count--\n\t\t\tif (entries[i].count <= 0) {\n\t\t\t\tDestroy(entries[i].material)\n\t\t\t\tentries[i].material = null\n\t\t\t\tentries[i].texture = null\n\t\t\t\tentries[i].color = Color.clear\n\t\t\t\tentries.RemoveAt(i)\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t}\n\n\tDebug.LogError(\"The material provided was not found in the list.\")\n}", "CodeBleu_score": 32.68799285060747}, {"code": "public static void Remove(Material customMat){\n\t\tif (customMat == null) {\n\t\tDebug.LogError(\"[CustomMaterial] Remove: Custom material is null.\");\n\t\treturn;\n\t}\n\n\tfor (int i = 0; i < entries.Count; i++) {\n\t\tif (entries[i].material == customMat) {\n\t\t\tentries[i].count--;\n\t\t\tif (entries[i].count == 0) {\n\t\t\t\tentries[i].material.Destroy();\n\t\t\t\tentries[i].material = null;\n\t\t\t\tentries[i].data = null;\n\t\t\t\tentries.RemoveAt(i);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 31.9767079600244}, {"code": "public static void Remove(Material customMat){\n\t\tif (!customMat) {\n\t\treturn;\n\t}\n\n\tvar entries = CustomMaterials.GetEntries();\n\tfor (var i = 0; i < entries.Length; i++) {\n\t\tvar entry = entries[i];\n\t\tif (entry.Material == customMat) {\n\t\t\tentry.Count--;\n\t\t\tif (entry.Count <= 0) {\n\t\t\t\tCustomMaterials.RemoveEntry(i);\n\t\t\t\tObject.Destroy(entry.Material);\n\t\t\t\tObject.Destroy(entry.Data);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 38.61621734259513}]}
{"instance_id": "892bbee52ab9", "generation_result": [{"code": "private void RefreshParticles(GameObject root){\n\t\tvar systems = root.GetComponentsInChildren<ParticleSystem>(true);\n\tvar mySystems = new List<ParticleSystem>();\n\tforeach (var system in systems) {\n\t\tvar main = system.main;\n\t\tif (main.maxParticles > 0) {\n\t\t\tvar sheet = main.GetComponent<UIParticle>();\n\t\t\tif (sheet != null && sheet.enabled) {\n\t\t\t\tmySystems.Add(system);\n\t\t\t}\n\t\t}\n\t}\n\tUIParticle.RefreshParticles(mySystems);\n}", "CodeBleu_score": 21.081340405599004}, {"code": "private void RefreshParticles(GameObject root){\n\t    List<ParticleSystem> systems = new List<ParticleSystem>()\n    List<ParticleSystem> toRemove = new List<ParticleSystem>()\n    List<ParticleSystem> toAdd = new List<ParticleSystem>()\n\n    // Collect all child particle systems\n    foreach (ParticleSystem system in root.GetComponentsInChildren<ParticleSystem>()) {\n        // Check if particle system is associated with this UIParticle instance\n        UIParticle uiParticle = system.GetComponent<UIParticle>()\n        if (uiParticle == null || uiParticle != this) {\n            toRemove.Add(system)\n        } else {\n            systems.Add(system)\n        }\n    }\n\n    // Remove particle systems not associated with this UIParticle instance\n    foreach (ParticleSystem system in toRemove) {\n        systems.Remove(system)\n    }\n\n    // Add particle systems associated with this UIParticle instance\n    foreach (ParticleSystem system in toAdd) {\n        systems.Add(system)\n    }\n\n    // Update texture sheet animation settings if necessary\n    if (textureSheetAnimation) {\n        foreach (ParticleSystem system in systems) {\n            ParticleSystem.MainModule main = system.main\n            main.startLifetime = textureSheetAnimation.lifetime\n            main.startSpeed = textureSheetAnimation.speed\n\n            ParticleSystem.TextureSheetAnimationModule textureSheet = system.textureSheetAnimation\n            textureSheet.enabled = true\n            textureSheet.mode = ParticleSystemAnimationMode.Sprites\n            textureSheet.fps = textureSheetAnimation.fps\n            textureSheet.frameOverTime = new ParticleSystem.MinMaxCurve(0, textureSheetAnimation.frameOverTime)\n            textureSheet.rowIndex = textureSheetAnimation.rowIndex\n            textureSheet.startFrame = textureSheetAnimation.startFrame\n        }\n    }\n\n    // Refresh particle systems\n    UIParticleUtility.RefreshParticles(systems)\n}", "CodeBleu_score": 29.75501556689128}, {"code": "private void RefreshParticles(GameObject root){\n\t    var particleSystems = root.GetComponentsInChildren<ParticleSystem>(true);\n    var filteredParticleSystems = new List<ParticleSystem>();\n    foreach (var particleSystem in particleSystems) {\n        var particleSystemRenderer = particleSystem.GetComponent<ParticleSystemRenderer>();\n        if (particleSystemRenderer.material.shader.name == \"UIParticle/Particles/Alpha Blended\" &&\n            particleSystemRenderer.material.GetTexture(ShaderUtilities.ID_MainTex) == mainTexture.texture) {\n            filteredParticleSystems.Add(particleSystem);\n        }\n    }\n\n    if (filteredParticleSystems.Count == 0) {\n        return;\n    }\n\n    var main = filteredParticleSystems[0];\n    if (main.main.maxParticles != maxParticles) {\n        main.main.maxParticles = maxParticles;\n    }\n\n    if (main.main.startLifetime.constant != particleLifetime) {\n        main.main.startLifetime = particleLifetime;\n    }\n\n    if (main.main.startSpeed.constant != particleSpeed) {\n        main.main.startSpeed = particleSpeed;\n    }\n\n    if (main.main.startSize.constant != particleSize) {\n        main.main.startSize = particleSize;\n    }\n\n    if (main.main.startRotation.constant != particleRotation) {\n        main.main.startRotation = particleRotation;\n    }\n\n    if (main.textureSheetAnimation.enabled != true) {\n        main.textureSheetAnimation.enabled = true;\n    }\n\n    if (main.textureSheetAnimation.mode != ParticleSystemAnimationMode.Sprites) {\n        main.textureSheetAnimation.mode = ParticleSystemAnimationMode.Sprites;\n    }\n\n    if (main.textureSheetAnimation.flipBook.enabled != true) {\n        main.textureSheetAnimation.flipBook.enabled = true;\n    }\n\n    if (main.textureSheetAnimation.flipBook.flipType != ParticleSystemAnimationFlipType.", "CodeBleu_score": 29.60335337600377}]}
{"instance_id": "d6b082e37770", "generation_result": [{"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t    var assembly = Assembly.GetExecutingAssembly();\n    var types = assembly.GetTypes().Where(x => x.GetInterface(nameof(IColorSwapManager)) != null);\n    foreach (var type in types) {\n        containerBuilder.RegisterType(type).AsImplementedInterfaces().SingleInstance();\n    }\n}", "CodeBleu_score": 33.12708139819301}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t    var assembly = Assembly.GetExecutingAssembly();\n    var types = assembly.GetTypes();\n    var colorSwapManagerType = typeof(IColorSwapManager);\n    foreach (var type in types) {\n        if (!colorSwapManagerType.IsAssignableFrom(type)) continue;\n        containerBuilder.RegisterType(type).As<IColorSwapManager>().SingleInstance();\n    }\n}", "CodeBleu_score": 52.152086609145385}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t    var assembly = Assembly.GetExecutingAssembly();\n    var types = assembly.GetTypes();\n\n    foreach (var type in types) {\n        if (type.GetInterfaces().Contains(typeof(IColorSwapManager))) {\n            containerBuilder.RegisterType(type).As<IColorSwapManager>().SingleInstance();\n        }\n    }\n}", "CodeBleu_score": 40.763969802448926}]}
{"instance_id": "2359d72977a4", "generation_result": [{"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t    this.ipAddress = ipAddress;\n    this.port = port;\n    this.serializer = new Serializer(this);\n    await this.serializer.InitializeAsync();\n    this.state = new ReservationNegotiation(this);\n    await this.state.ProcessAsync();\n}", "CodeBleu_score": 31.55995231817601}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t    if (this.connectionState != null) {\n        throw new InvalidOperationException(\"Already connected.\");\n    }\n\n    this.ipAddress = ipAddress;\n    this.port = port;\n\n    this.connectionState = new ConnectionState(this);\n    this.connectionState.Serializer = await this.serializerInitializationTask;\n\n    await this.connectionState.ReservationNegotiation.NegotiateAsync();\n}", "CodeBleu_score": 27.747636522464663}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t    this.ipAddress = ipAddress;\n    this.port = port;\n\n    await this.serializer.InitializeAsync();\n\n    this.negotiateTask = this.NegotiateAsync();\n}", "CodeBleu_score": 33.64392663893803}]}
{"instance_id": "151a27d718b1", "generation_result": [{"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t    if (sessionConnectionState == null) {\n        throw new ArgumentNullException(nameof(sessionConnectionState));\n    }\n    if (sessionConnectionState.State == ConnectionState.SESSION_RESERVED) {\n        this.PlayerName = sessionConnectionState.PlayerName;\n    }\n    this.Log.Info($\"Connection state changed from {this.CurrentConnectionState.State} to {sessionConnectionState.State}\");\n    this.CurrentConnectionState = sessionConnectionState;\n    this.ConnectionStateChanged?.Invoke(this, sessionConnectionState);\n}", "CodeBleu_score": 36.378506868814455}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t    if (sessionConnectionState == null) {\n        throw new ArgumentNullException(nameof(sessionConnectionState));\n    }\n\n    if (sessionConnectionState == this.sessionConnectionState) {\n        return;\n    }\n\n    if (this.sessionConnectionState != null) {\n        this.sessionConnectionState.OnLeave(this);\n    }\n\n    this.sessionConnectionState = sessionConnectionState;\n    this.sessionConnectionState.OnEnter(this);\n\n    this.Log.LogInformation($\"Session connection state changed to {this.sessionConnectionState.GetType().Name}\");\n\n    this.ConnectionStateChanged?.Invoke(this, this.sessionConnectionState);\n\n    if (this.sessionConnectionState is SessionReservedState) {\n        this.Log.LogInformation($\"Session reserved for player {this.PlayerName}\");\n    }\n}", "CodeBleu_score": 31.424408591131947}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t    var previousState = this.SessionConnectionState;\n    this.SessionConnectionState = sessionConnectionState;\n    this.SessionConnectionState.OnConnectionStateChanged += this.OnConnectionStateChanged;\n    this.SessionConnectionState.OnConnectionStateChanged += this.OnConnectionStateChanged;\n    this.SessionConnectionState.OnConnectionStateChanged += this.OnConnectionStateChanged;\n    this.SessionConnectionState.OnConnectionStateChanged += this.OnConnectionStateChanged;\n    this.SessionConnectionState.OnConnectionStateChanged += this.OnConnectionStateChanged;\n    this.SessionConnectionState.OnConnectionStateChanged += this.OnConnectionStateChanged;\n    this.SessionConnectionState.OnConnectionStateChanged += this.OnConnectionStateChanged;\n    this.SessionConnectionState.OnConnectionStateChanged += this.OnConnectionStateChanged;\n    this.SessionConnectionState.OnConnectionStateChanged += this.OnConnectionStateChanged;\n    this.SessionConnectionState.OnConnectionStateChanged += this.OnConnectionStateChanged;\n    this.SessionConnectionState.OnConnectionStateChanged += this.OnConnectionStateChanged;\n    this.SessionConnectionState.OnConnectionStateChanged += this.OnConnectionStateChanged;\n    this.SessionConnectionState.OnConnectionStateChanged += this.OnConnectionStateChanged;\n    this.SessionConnectionState.OnConnectionStateChanged += this.OnConnectionStateChanged;\n    this.SessionConnectionState.OnConnectionStateChanged += this.OnConnectionStateChanged;\n    this.SessionConnectionState.OnConnectionStateChanged += this.OnConnectionStateChanged;\n    this.SessionConnectionState.OnConnectionStateChanged += this.OnConnectionStateChanged;\n    this.SessionConnectionState.OnConnectionStateChanged += this.OnConnectionStateChanged;\n    this.SessionConnectionState.OnConnectionStateChanged += this.OnConnectionStateChanged;\n    this.SessionConnectionState.OnConnectionStateChanged += this.OnConnectionStateChanged;\n    this.SessionConnectionState.OnConnectionStateChanged += this.OnConnectionStateChanged;\n    this.SessionConnectionState.OnConnectionStateChanged += this.OnConnectionStateChanged;\n    this.SessionConnectionState.OnConnectionStateChanged += this.OnConnectionStateChanged;\n    this.SessionConnectionState.OnConnectionStateChanged += this.OnConnectionStateChanged;\n    this.SessionConnectionState.On", "CodeBleu_score": 11.847900233871105}]}
{"instance_id": "7f7717307d6a", "generation_result": [{"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t\t// Initialize the client\n\tclient = new LiteNetLibClient(this);\n\n\t// Attempt to connect to the server\n\tclient.Connect(ipAddress, serverPort);\n\n\t// Wait for a connection event for up to 2000 milliseconds\n\tif (!client.ConnectionEvent.WaitOne(2000)) {\n\t\t// If a connection event did not occur, reset the event\n\t\tclient.ConnectionEvent.Reset();\n\t}\n}", "CodeBleu_score": 36.79369049075119}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t    // Initialize the client\n    client = new LiteNetLibClient(this);\n\n    // Start the client\n    await client.StartAsync();\n\n    // Connect to the server\n    await client.ConnectAsync(ipAddress, serverPort);\n}", "CodeBleu_score": 34.055279560953586}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t    if (!await InitializeAsync()) {\n        Debug.LogError(\"Failed to initialize the client.\");\n        return;\n    }\n\n    if (!await ConnectAsync(ipAddress, serverPort)) {\n        Debug.LogError(\"Failed to connect to the server.\");\n        return;\n    }\n\n    // Wait for up to 2000 milliseconds for a connection event.\n    if (!await _connectionEvent.WaitAsync(2000)) {\n        Debug.LogError(\"Failed to connect to the server.\");\n        return;\n    }\n\n    // Reset the event.\n    _connectionEvent.Reset();\n}", "CodeBleu_score": 49.21864596369668}]}
{"instance_id": "eeb95434f1eb", "generation_result": [{"code": "public void StartFireSuppression(NitroxId id){\n\t    var cyclops = GetCyclops(id);\n    var fireSuppressionButton = cyclops.GetComponentInChildren<FireSuppressionButton>();\n    StartCoroutine(FireSuppressionSystem(cyclops, fireSuppressionButton));\n    StartCoroutine(ButtonCooldown(fireSuppressionButton));\n}", "CodeBleu_score": 33.270375847506514}, {"code": "public void StartFireSuppression(NitroxId id){\n\t    var cyclops = FindObjectOfType<Cyclops>();\n    if (cyclops != null) {\n        var button = cyclops.GetComponentInChildren<FireSuppressionButton>();\n        if (button != null) {\n            StartCoroutine(FireSuppression(cyclops, button));\n            StartCoroutine(ButtonCooldown(button));\n        }\n    }\n}", "CodeBleu_score": 33.85570349244493}, {"code": "public void StartFireSuppression(NitroxId id){\n\t    var cyclops = GetCyclops(id);\n    var fireSuppressionButton = cyclops.GetComponentInChildren<FireSuppressionButton>();\n    StartCoroutine(FireSuppression(cyclops, fireSuppressionButton));\n    StartCoroutine(ButtonCooldown(fireSuppressionButton));\n}", "CodeBleu_score": 32.74841325597766}]}
{"instance_id": "a23a043559c6", "generation_result": [{"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t\t// Verify that the sub is a Cyclops\n\tif (subRoot.GetType() == typeof(Cyclops)) {\n\t\t// Get the Cyclops\n\t\tvar cyclops = (Cyclops)subRoot;\n\t\t// Get the Cyclops's ID\n\t\tvar cyclopsId = cyclops.GetInstanceID();\n\t\t// Get the Cyclops's damage points\n\t\tvar damagePoints = GetDamagePoints(cyclops);\n\t\t// Get the Cyclops's health\n\t\tvar health = GetHealth(cyclops);\n\t\t// Get the Cyclops's max health\n\t\tvar maxHealth = GetMaxHealth(cyclops);\n\t\t// Get the Cyclops's health fraction\n\t\tvar healthFraction = GetHealthFraction(cyclops);\n\t\t// Get the Cyclops's health percentage\n\t\tvar healthPercentage = GetHealthPercentage(cyclops);\n\t\t// Get the Cyclops's health fraction\n\t\tvar healthFraction = GetHealthFraction(cyclops);\n\t\t// Get the Cyclops's health percentage\n\t\tvar healthPercentage = GetHealthPercentage(cyclops);\n\t\t// Get the Cyclops's health fraction\n\t\tvar healthFraction = GetHealthFraction(cyclops);\n\t\t// Get the Cyclops's health percentage\n\t\tvar healthPercentage = GetHealthPercentage(cyclops);\n\t\t// Get the Cyclops's health fraction\n\t\tvar healthFraction = GetHealthFraction(cyclops);\n\t\t// Get the Cyclops's health percentage\n\t\tvar healthPercentage = GetHealthPercentage(cyclops);\n\t\t// Get the Cyclops's health fraction\n\t\tvar healthFraction = GetHealthFraction(cyclops);\n\t\t// Get the Cyclops's health percentage\n\t\tvar healthPercentage = GetHealthPercentage(cyclops);\n\t\t// Get the Cyclops's health fraction\n\t\tvar healthFraction = GetHealthFraction(cyclops", "CodeBleu_score": 25.045175333364416}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t    if (subRoot.GetInstanceID() != cyclopsInstanceId) {\n        return;\n    }\n\n    var damagePointType = damagePoint.GetType();\n    var damagePointId = damagePoint.GetInstanceID();\n    var repairPacket = new RepairDamagePointPacket(damagePointType, damagePointId, repairAmount);\n    packetSender.SendPacket(repairPacket);\n}", "CodeBleu_score": 34.30193738829327}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t    if (subRoot.GetInstanceID() != subRootId) {\n        return;\n    }\n\n    var damagePointId = damagePoint.GetInstanceID();\n    var damagePointType = damagePoint.GetType();\n\n    var repairPacket = new RepairPacket(subRootId, damagePointId, damagePointType, repairAmount);\n    packetSender.SendPacket(repairPacket);\n}", "CodeBleu_score": 34.141263713740834}]}
{"instance_id": "dfb3586de856", "generation_result": [{"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t    if (subRoot == null) {\n        return;\n    }\n\n    var id = subRoot.GetInstanceID();\n    var health = subRoot.health;\n\n    if (id <= 0 || health <= 0) {\n        return;\n    }\n\n    var damageInfo = info.HasValue ? new CyclopsDamageInfoData(info.Value) : null;\n\n    var damagePoints = new List<CyclopsDamagePointData>();\n    var firePoints = new List<CyclopsFireData>();\n\n    var damagePointsCount = subRoot.cyclopsDamagePoints.Count;\n    var firePointsCount = subRoot.cyclopsFirePoints.Count;\n\n    for (var i = 0; i < damagePointsCount; i++) {\n        var damagePoint = subRoot.cyclopsDamagePoints[i];\n        damagePoints.Add(new CyclopsDamagePointData(damagePoint));\n    }\n\n    for (var i = 0; i < firePointsCount; i++) {\n        var firePoint = subRoot.cyclopsFirePoints[i];\n        firePoints.Add(new CyclopsFireData(firePoint));\n    }\n\n    var packet = new CyclopsDamage(id, health, damageInfo, damagePoints, firePoints);\n    SendPacket(packet);\n}", "CodeBleu_score": 35.12728438946122}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t\tif (subRoot.GetInstanceID() == 0) {\n\t\treturn;\n\t}\n\n\tif (subRoot.health <= 0) {\n\t\treturn;\n\t}\n\n\tvar damageInfo = new CyclopsDamageInfoData();\n\n\tif (info.HasValue) {\n\t\tdamageInfo.damage = info.Value.damage;\n\t\tdamageInfo.hitPosition = info.Value.hitPosition;\n\t\tdamageInfo.hitNormal = info.Value.hitNormal;\n\t\tdamageInfo.hitType = info.Value.hitType;\n\t}\n\n\tdamageInfo.health = subRoot.health;\n\tdamageInfo.maxHealth = subRoot.maxHealth;\n\tdamageInfo.healthPercentage = subRoot.healthPercentage;\n\tdamageInfo.maxHealthPercentage = subRoot.maxHealthPercentage;\n\tdamageInfo.isDamaged = subRoot.isDamaged;\n\n\tvar damagePoints = new List<CyclopsDamagePointData>();\n\tforeach (var damagePoint in subRoot.damagePoints) {\n\t\tif (damagePoint.isActive) {\n\t\t\tvar point = new CyclopsDamagePointData();\n\t\t\tpoint.damageType = damagePoint.damageType;\n\t\t\tpoint.damage = damagePoint.damage;\n\t\t\tpoint.maxDamage = damagePoint.maxDamage;\n\t\t\tpoint.healthPercentage = damagePoint.healthPercentage;\n\t\t\tpoint.maxHealthPercentage = damagePoint.maxHealthPercentage;\n\t\t\tpoint.isDamaged = damagePoint.isDamaged;\n\t\t\tpoint.isDestroyed = damagePoint.isDestroyed;\n\t\t\tdamagePoints.Add(point);\n\t\t}\n\t}\n\n\tdamageInfo.damagePoints = damagePoints.ToArray();\n\n\tvar fireData = new List<CyclopsFireData>();\n\tforeach (var fire in subRoot.fire) {\n\t\tif (fire.isActive) {\n\t\t", "CodeBleu_score": 38.2915888924876}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t    if (!subRoot.isActiveAndEnabled) {\n        return;\n    }\n\n    if (!subRoot.isCyclops) {\n        return;\n    }\n\n    if (subRoot.GetInstanceID() != subRoot.GetInstanceID()) {\n        return;\n    }\n\n    if (subRoot.health <= 0) {\n        return;\n    }\n\n    var damageInfo = new CyclopsDamageInfoData();\n    if (info.HasValue) {\n        damageInfo.damage = info.Value.damage;\n        damageInfo.damageType = info.Value.damageType;\n        damageInfo.hitPosition = info.Value.hitPosition;\n        damageInfo.hitNormal = info.Value.hitNormal;\n        damageInfo.hitPoint = info.Value.hitPoint;\n        damageInfo.hitCollider = info.Value.hitCollider;\n        damageInfo.hitTransform = info.Value.hitTransform;\n        damageInfo.hitRigidbody = info.Value.hitRigidbody;\n    }\n\n    var damagePoints = subRoot.gameObject.GetComponentsInChildren<CyclopsDamagePoint>().ToList();\n    var fire = subRoot.gameObject.GetComponentInChildren<CyclopsFire>();\n\n    var cyclopsDamage = new CyclopsDamage(subRoot.GetInstanceID(), damageInfo, damagePoints, fire);\n    var packet = new Packet(cyclopsDamage);\n    packet.Send();\n}", "CodeBleu_score": 43.10202199541613}]}
{"instance_id": "03223c10109f", "generation_result": [{"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t    foreach (Entity entity in dirtyEntities) {\n        if (entity.IsAlive()) {\n            if (entity.IsAlive()) {\n                if (entity.GameObject != null) {\n                    GameObject.Destroy(entity.GameObject);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 58.48043649629605}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t\tfor (int i = 0; i < dirtyEntities.Count; i++) {\n\t\tEntity entity = dirtyEntities[i];\n\t\tif (entity.EntityHierarchy == null) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (entity.EntityHierarchy.GameObject != null) {\n\t\t\tGameObject.Destroy(entity.EntityHierarchy.GameObject);\n\t\t}\n\t\tentity.EntityHierarchy.Destroy();\n\t}\n}", "CodeBleu_score": 29.289345515634054}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t    foreach (Entity dirtyEntity in dirtyEntities) {\n        // Remove the entity hierarchy\n        dirtyEntity.RemoveHierarchy();\n        // Attempt to get the GameObject associated with the entity\n        GameObject dirtyGameObject = dirtyEntity.GetGameObject();\n        if (dirtyGameObject != null) {\n            // Destroy the GameObject\n            UnityEngine.Object.Destroy(dirtyGameObject);\n        }\n    }\n}", "CodeBleu_score": 43.90268149791148}]}
{"instance_id": "990abe8e473e", "generation_result": [{"code": "private void AddPendingParentEntity(Entity entity){\n\t\tif (!pendingParentEntities.ContainsKey(entity.ParentId)) {\n\t\tpendingParentEntities.Add(entity.ParentId, new List<Entity>());\n\t}\n\tpendingParentEntities[entity.ParentId].Add(entity);\n}", "CodeBleu_score": 31.21589252548035}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t    if (!_pendingParentEntities.ContainsKey(entity.ParentID))\n        _pendingParentEntities.Add(entity.ParentID, new List<Entity>());\n    _pendingParentEntities[entity.ParentID].Add(entity);\n}", "CodeBleu_score": 32.14120483126807}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t    if (!PendingParentEntities.ContainsKey(entity.ParentId)) {\n        PendingParentEntities.Add(entity.ParentId, new List<Entity>());\n    }\n\n    PendingParentEntities[entity.ParentId].Add(entity);\n}", "CodeBleu_score": 33.063644227494635}]}
{"instance_id": "a885fbb1f085", "generation_result": [{"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t    if (cooldown == clawArm.pickupCooldown) {\n        BroadcastArmAction(clawArm, ArmAction.START_USE_TOOL);\n    } else if (cooldown == clawArm.punchCooldown) {\n        BroadcastArmAction(clawArm, ArmAction.ALT_HIT);\n    } else {\n        Debug.LogError(\"Unknown claw action\");\n    }\n}", "CodeBleu_score": 29.94030708128099}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t    var action = ExosuitArmAction.START_USE_TOOL;\n    if (cooldown == 0.5f) {\n        action = ExosuitArmAction.START_USE_TOOL;\n    } else if (cooldown == 0.25f) {\n        action = ExosuitArmAction.ALT_HIT;\n    } else {\n        Debug.LogError(\"Unknown claw action: \" + cooldown);\n    }\n\n    BroadcastArmAction(clawArm, action);\n}", "CodeBleu_score": 44.14849445318337}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t    if (cooldown == 0.15f) {\n        BroadcastArmAction(clawArm, ArmActionType.START_USE_TOOL);\n    }\n    else if (cooldown == 0.5f) {\n        BroadcastArmAction(clawArm, ArmActionType.ALT_HIT);\n    }\n    else {\n        Debug.LogError(\"Unknown claw arm action type!\");\n    }\n}", "CodeBleu_score": 27.882004104768278}]}
{"instance_id": "e390441c8dc2", "generation_result": [{"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t\tvar entityId = gameObject.GetEntityId();\n\tvar parentId = parent.GetEntityId();\n\n\tif (entityId == 0 || parentId == 0) {\n\t\treturn;\n\t}\n\n\tvar entity = new InstalledBatteryEntity(entityId, parentId, techType);\n\tvar packet = new EntitySpawnedByClient(entity);\n\tpacket.Send();\n}", "CodeBleu_score": 34.666807777410945}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t    var entityID = gameObject.GetEntityID();\n    var parentID = parent.GetEntityID();\n    if (entityID == null || parentID == null) {\n        return;\n    }\n\n    var metadata = gameObject.GetComponent<EntityMetadata>();\n    if (metadata == null) {\n        return;\n    }\n\n    var installedBatteryEntity = new InstalledBatteryEntity(entityID.Value, parentID.Value, techType, metadata.Position, metadata.Rotation);\n    var packet = new EntitySpawnedByClient(installedBatteryEntity);\n    Client.SendPacket(packet);\n}", "CodeBleu_score": 46.0595984557731}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t    var gameObjectID = gameObject.GetInstanceID();\n    var parentID = parent.GetInstanceID();\n    if (gameObjectID == 0 || parentID == 0) {\n        return;\n    }\n    var gameObjectMetadata = gameObject.GetComponent<EntityMetadata>();\n    var parentMetadata = parent.GetComponent<EntityMetadata>();\n    if (gameObjectMetadata == null || parentMetadata == null) {\n        return;\n    }\n    var gameObjectEntity = gameObjectMetadata.Entity;\n    var parentEntity = parentMetadata.Entity;\n    if (gameObjectEntity == null || parentEntity == null) {\n        return;\n    }\n    var installedBatteryEntity = new InstalledBatteryEntity(gameObjectEntity.Id, parentEntity.Id, techType);\n    var entitySpawnedByClient = new EntitySpawnedByClient(installedBatteryEntity);\n    var entitySpawnedByClientPacket = new Packet(entitySpawnedByClient);\n    SendPacket(entitySpawnedByClientPacket);\n}", "CodeBleu_score": 48.97328361972127}]}
{"instance_id": "a87b772a8e5a", "generation_result": [{"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t\tPickingUpObject = gameObject;\n\tRemoveRemoteControl(gameObject);\n\tif (gameObject.GetComponent<PrefabIdentifier>() == null) {\n\t\tgameObject.AddComponent<PrefabIdentifier>().ClassId = techType;\n\t}\n\tStopEntityPositionBroadcasting(gameObject);\n\tConvertToInventoryItem(gameObject);\n\tMarkAsSpawned(gameObject);\n\tLogPickupEvent(gameObject);\n\tvar pickupItem = CreatePickupItem(gameObject);\n\tSendPacket(pickupItem);\n\tPickingUpObject = null;\n}", "CodeBleu_score": 27.692530471974464}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t    if (gameObject == null) {\n        return;\n    }\n\n    if (gameObject.GetComponent<RemoteControl>() != null) {\n        gameObject.GetComponent<RemoteControl>().RemoveRemoteControl();\n    }\n\n    var nitroxId = gameObject.GetComponent<NitroxId>();\n    if (nitroxId == null) {\n        nitroxId = gameObject.AddComponent<NitroxId>();\n        nitroxId.GenerateId();\n    }\n\n    if (gameObject.GetComponent<Entity>() == null) {\n        gameObject.AddComponent<Entity>();\n    }\n\n    gameObject.GetComponent<Entity>().IsSpawned = true;\n\n    StopBroadcastingEntityPosition(gameObject.GetComponent<Entity>());\n\n    gameObject.AddComponent<InventoryItem>();\n\n    var pickupItem = new PickupItem();\n    pickupItem.NitroxId = nitroxId.NitroxId;\n    pickupItem.TechType = techType;\n    pickupItem.Position = gameObject.transform.position;\n    pickupItem.Rotation = gameObject.transform.rotation;\n\n    Send(pickupItem);\n\n    PickingUpObject = null;\n}", "CodeBleu_score": 41.78387263232961}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t    PickingUpObject = gameObject;\n    RemoveRemoteControl();\n\n    var nitroxId = gameObject.GetComponent<NitroxId>();\n    if (nitroxId == null) {\n        nitroxId = gameObject.AddComponent<NitroxId>();\n        nitroxId.Id = GenerateId();\n    }\n\n    StopEntityPositionBroadcasting();\n    var inventoryItem = gameObject.ConvertToInventoryItem();\n    inventoryItem.Pickupable.IsPickedUp = true;\n    inventoryItem.Pickupable.PickupAllowed = false;\n    inventoryItem.Pickupable.IsPickupable = false;\n    inventoryItem.Pickupable.IsPickupAllowed = false;\n\n    var pickupItem = new PickupItem(nitroxId.Id, techType);\n    pickupItem.Send();\n\n    PickingUpObject = null;\n}", "CodeBleu_score": 40.89310043940025}]}
{"instance_id": "b6d1e68114e1", "generation_result": [{"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t    // Get the NitroxId of the GameObject.\n    NitroxId nitroxId = gameObject.GetComponent<NitroxId>()\n    if (nitroxId == null) {\n        // If the GameObject does not have a NitroxId, assign it one.\n        nitroxId = gameObject.AddComponent<NitroxId>()\n    }\n\n    // Get the class ID of the GameObject.\n    ClassId classId = gameObject.GetComponent<ClassId>()\n\n    // Get the TechType of the GameObject.\n    TechType techType = gameObject.GetComponent<TechType>()\n\n    // Get the metadata of the GameObject.\n    EntityMetadata entityMetadata = entityMetadataManager.GetEntityMetadata(classId)\n\n    // Get the player's NitroxId.\n    NitroxId playerNitroxId = GameObject.Find(\"Player\").GetComponent<NitroxId>()\n\n    // Construct an InventoryItemEntity from the gathered data.\n    InventoryItemEntity inventoryItemEntity = new InventoryItemEntity(nitroxId.Id, classId, techType, entityMetadata, playerNitroxId.Id)\n\n    // If the GameObject is a battery, populate the InventoryItemEntity with battery data.\n    if (techType == TechType.Battery) {\n        inventoryItemEntity.BatteryCharge = gameObject.GetComponent<Battery>().charge\n    }\n\n    // Get the child entities of the GameObject.\n    List<GameObject> childEntities = gameObject.GetComponentsInChildren<NitroxId>().Select(nitroxId => nitroxId.gameObject).ToList()\n\n    // Add each child entity to the InventoryItemEntity.\n    foreach (GameObject childEntity in childEntities) {\n        // If the child entity is not the GameObject itself, add it to the InventoryItemEntity.\n        if (childEntity != gameObject) {\n            inventoryItemEntity.AddChildEntity(ConvertToInventoryItemEntity(childEntity, entityMetadataManager))\n        }\n    }\n\n    return inventoryItem", "CodeBleu_score": 49.02642802754769}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t\tvar techType = gameObject.GetComponent<TechTag>().type;\n\tvar nitroxId = GetOrGenerateNitroxId(gameObject);\n\tvar classId = GetOrGenerateClassId(gameObject);\n\tvar metadata = entityMetadataManager.GetEntityMetadata(classId);\n\tvar childEntities = GetChildEntities(gameObject, entityMetadataManager);\n\tvar playerId = GetPlayerId();\n\tvar inventoryItemEntity = new InventoryItemEntity(nitroxId, techType, classId, playerId, metadata, childEntities);\n\tif (gameObject.GetComponent<Battery>() != null) {\n\t\tinventoryItemEntity.Battery = new BatteryEntity(gameObject.GetComponent<Battery>().capacity, gameObject.GetComponent<Battery>().charge);\n\t}\n\treturn inventoryItemEntity;\n}", "CodeBleu_score": 46.796877602835295}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t    // Generate or retrieve a NitroxId for the GameObject.\n    NitroxId nitroxId = gameObject.GetComponent<NitroxId>()\n    if (nitroxId == null) {\n        nitroxId = gameObject.AddComponent<NitroxId>()\n        nitroxId.Id = NitroxId.GenerateId()\n    }\n\n    // Extract the class ID and TechType from the GameObject.\n    ClassId classId = gameObject.GetComponent<ClassId>()\n    if (classId == null) {\n        throw new Exception(\"GameObject does not have a ClassId component.\")\n    }\n\n    TechType techType = gameObject.GetComponent<TechType>()\n    if (techType == null) {\n        throw new Exception(\"GameObject does not have a TechType component.\")\n    }\n\n    // Gather the GameObject's metadata and child entities.\n    EntityMetadata metadata = entityMetadataManager.GetEntityMetadata(gameObject)\n    List<InventoryItemEntity> children = new List<InventoryItemEntity>()\n    foreach (GameObject child in gameObject.GetChildren()) {\n        children.Add(ConvertToInventoryItemEntity(child, entityMetadataManager))\n    }\n\n    // Retrieve the player's ID.\n    PlayerId playerId = Player.main.GetComponent<PlayerId>()\n    if (playerId == null) {\n        throw new Exception(\"Player does not have a PlayerId component.\")\n    }\n\n    // Construct an InventoryItemEntity using the gathered information.\n    InventoryItemEntity entity = new InventoryItemEntity()\n    entity.NitroxId = nitroxId.Id\n    entity.ClassId = classId.ClassId\n    entity.TechType = techType.TechType\n    entity.Metadata = metadata\n    entity.Children = children\n    entity.PlayerId = playerId.Id\n\n    // If applicable, populate the entity with battery data.\n    Battery battery = gameObject.GetComponent<Battery>()\n    if (battery != null) {\n        entity.BatteryCharge = battery.charge\n        entity.B", "CodeBleu_score": 41.011481757457055}]}
{"instance_id": "e416d51a7af7", "generation_result": [{"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t    this.multiplayerSession = multiplayerSession;\n    this.packetSender = packetSender;\n    this.throttledPacketSender = throttledPacketSender;\n    this.playerBody = new Lazy<PlayerBody>(() => GameObject.Find(\"Player\").GetComponent<PlayerBody>());\n    this.playerModel = new Lazy<PlayerModel>(() => playerBody.Value.model);\n    this.bodyPrototype = new Lazy<BodyPrototype>(() => playerBody.Value.bodyPrototype);\n    this.playerPermissions = new PlayerPermissions(PermissionLevel.Default);\n}", "CodeBleu_score": 57.76830182148732}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t    this.multiplayerSession = multiplayerSession;\n    this.packetSender = packetSender;\n    this.throttledPacketSender = throttledPacketSender;\n\n    this.body = new Lazy<Body>(this.GetBody);\n    this.playerModel = new Lazy<PlayerModel>(this.GetPlayerModel);\n    this.bodyPrototype = new Lazy<BodyPrototype>(this.GetBodyPrototype);\n\n    this.playerPermissions = new PlayerPermissions(this);\n}", "CodeBleu_score": 51.50544481664651}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t    _multiplayerSession = multiplayerSession;\n    _packetSender = packetSender;\n    _throttledPacketSender = throttledPacketSender;\n\n    _body = new Lazy<Body>(() => _playerModel.Body);\n    _playerModel = new Lazy<PlayerModel>(() => _body.Value.PlayerModel);\n    _bodyPrototype = new Lazy<BodyPrototype>(() => _playerModel.Value.BodyPrototype);\n\n    _permissions = new Permissions(\n        canUsePower: true,\n        canUseTools: true,\n        canUseVehicles: true,\n        canUseTeleporters: true,\n        canUseScanner: true,\n        canUseSonar: true,\n        canUseDiveComputer: true,\n        canUsePowerCells: true,\n        canUseUpgradeConsole: true,\n        canUseSeamoth: true,\n        canUseBase: true,\n        canUseConstructor: true,\n        canUseProbe: true,\n        canUseCyclops: true,\n        canUseFlamethrower: true,\n        canUseTorpedo: true,\n        canUseDefenseSystem: true,\n        canUseBreaker: true,\n        canUseVehicleStorage: true,\n        canUseNetworkLink: true,\n        canUseDeepDriller: true,\n        canUseSeamothUpgrades: true,\n        canUseExosuit: true,\n        canUseExosuitUpgrades: true,\n        canUseFabricator: true,\n        canUseConstructorUpgrades: true,\n        canUseMapRoom: true,\n        canUseVehicleUpgrades: true,\n        canUseFabricatorUpgrades: true,\n        canUseBaseUpgrades: true,\n        canUseVehicleArmour: true,\n        canUseVehicleWeapons: true,\n        canUseVehicleStorageUpgrades: true,\n        canUseVehicleTeleporters: true,\n        canUseVehicleComputers: true,\n        canUseVehicleScanners: true,\n        canUseV", "CodeBleu_score": 25.6283678443349}]}
{"instance_id": "def56af985df", "generation_result": [{"code": "private GameObject CreateBodyPrototype{\n\t    get {\n        var player = Player.main\n        if (player.head.gameObject.activeSelf == false) {\n            player.head.gameObject.SetActive(true)\n        }\n        var bodyPrototype = Object.Instantiate(player.gameObject)\n        bodyPrototype.name = \"RemotePlayerPrototype\"\n        bodyPrototype.SetActive(false)\n        bodyPrototype.GetComponent<ShadowCastingMode>().mode = ShadowCastingMode.On\n        bodyPrototype.GetComponent<Player>().RemoveAllItemsInHand()\n        return bodyPrototype\n    }\n}", "CodeBleu_score": 21.709419933225284}, {"code": "private GameObject CreateBodyPrototype{\n\t\tget {\n\t\tif(Player.main.head.gameObject.activeSelf == false) {\n\t\t\tPlayer.main.head.gameObject.SetActive(true);\n\t\t}\n\t\tvar body = GameObject.Instantiate(Player.main.gameObject, Vector3.zero, Quaternion.identity);\n\t\tbody.name = \"RemotePlayerPrototype\";\n\t\tbody.SetActive(false);\n\t\tbody.GetComponentInChildren<ShadowCaster>().shadowCastingMode = ShadowCastingMode.Off;\n\t\tvar heldItems = body.GetComponentsInChildren<HeldItem>();\n\t\tfor(int i = 0; i < heldItems.Length; i++) {\n\t\t\tGameObject.Destroy(heldItems[i].gameObject);\n\t\t}\n\t\treturn body;\n\t}\n}", "CodeBleu_score": 29.334489848056766}, {"code": "private GameObject CreateBodyPrototype{\n\t    get {\n        // Ensure the player's head is visible\n        var head = GetComponentInChildren<Head>();\n        head.GetComponent<SkinnedMeshRenderer>().shadowCastingMode = ShadowCastingMode.On;\n\n        // Instantiate a clone of the body prototype\n        var prototype = Instantiate(GetComponent<Player>().bodyPrototype);\n        prototype.SetActive(false);\n        prototype.name = \"RemotePlayerPrototype\";\n\n        // Reset the head's shadow casting mode\n        head.GetComponent<SkinnedMeshRenderer>().shadowCastingMode = ShadowCastingMode.Off;\n\n        // Remove the items held in hand\n        var leftHand = prototype.GetComponentInChildren<LeftHand>();\n        var rightHand = prototype.GetComponentInChildren<RightHand>();\n        leftHand.GetComponent<SkinnedMeshRenderer>().enabled = false;\n        rightHand.GetComponent<SkinnedMeshRenderer>().enabled = false;\n\n        // Return the prototype\n        return prototype;\n    }\n}", "CodeBleu_score": 36.7175100248251}]}
{"instance_id": "e9bd7f669aed", "generation_result": [{"code": "void ICacheable.Save(BinaryWriter bw){\n\t    bw.Write(this.GetType().AssemblyQualifiedName)\n    bw.Write(this.Location)\n    bw.Write(this.Metadata)\n    bw.Write(this.Processes)\n    bw.Write(this.Dependencies.Count)\n    foreach(dependency in this.Dependencies) {\n        dependency.Save(bw)\n    }\n    bw.Write(this.Incompatibilities.Count)\n    foreach(incompatibility in this.Incompatibilities) {\n        incompatibility.Save(bw)\n    }\n    bw.Write(this.TargetVersion)\n}", "CodeBleu_score": 27.632578579174734}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\t    bw.Write(GetType().FullName)\n    bw.Write(Location)\n    bw.Write(Metadata)\n    bw.Write(Processes.Count)\n    foreach(var process in Processes) {\n        bw.Write(process.Key)\n        bw.Write(process.Value.Count)\n        foreach(var dependency in process.Value) {\n            dependency.Save(bw)\n        }\n    }\n    bw.Write(Dependencies.Count)\n    foreach(var dependency in Dependencies) {\n        dependency.Save(bw)\n    }\n    bw.Write(Incompatibilities.Count)\n    foreach(var incompatibility in Incompatibilities) {\n        incompatibility.Save(bw)\n    }\n    bw.Write(TargetVersion)\n}", "CodeBleu_score": 49.25224586231332}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\t    bw.Write(Type.AssemblyQualifiedName)\n    bw.Write(Location)\n    bw.Write(Metadata)\n    bw.Write(Processes.Count)\n    foreach(var process in Processes) {\n        bw.Write(process.Key)\n        bw.Write(process.Value)\n    }\n    bw.Write(Dependencies.Count)\n    foreach(var dependency in Dependencies) {\n        dependency.Save(bw)\n    }\n    bw.Write(Incompatibilities.Count)\n    foreach(var incompatibility in Incompatibilities) {\n        incompatibility.Save(bw)\n    }\n    bw.Write(TargetVersion)\n}", "CodeBleu_score": 44.42432729421621}]}
{"instance_id": "a7e51620987d", "generation_result": [{"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t    var pluginType = pluginAssembly.GetType(pluginInfo.TypeName);\n    if (pluginType == null) {\n        Logger.Log(LogLevel.Error, $\"Plugin {pluginInfo.Metadata.GUID} does not contain a type named {pluginInfo.TypeName}\");\n        return null;\n    }\n\n    BasePlugin plugin = null;\n    try {\n        plugin = (BasePlugin) Activator.CreateInstance(pluginType);\n    }\n    catch (Exception ex) {\n        Logger.Log(LogLevel.Error, $\"Failed to create instance of {pluginInfo.Metadata.GUID}: {ex}\");\n        return null;\n    }\n\n    plugin.Metadata = pluginInfo.Metadata;\n    plugin.Config = pluginInfo.Config;\n\n    plugin.LogSource = new LogSource(plugin.Metadata.GUID);\n    plugin.Logger = new Logger(plugin.LogSource);\n\n    plugin.Patcher = new Patcher(plugin.Metadata.GUID, plugin.Logger);\n    plugin.Patcher.Patch(pluginAssembly);\n\n    PluginLoad(plugin);\n\n    try {\n        plugin.Load();\n    }\n    catch (Exception ex) {\n        Logger.Log(LogLevel.Error, $\"Failed to load {pluginInfo.Metadata.GUID}: {ex}\");\n        return null;\n    }\n\n    return plugin;\n}", "CodeBleu_score": 46.16043503516589}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t\tType pluginType = pluginAssembly.GetType(pluginInfo.TypeName);\n\tif (pluginType == null) {\n\t\tLogger.Log(LogLevel.Error, $\"Unable to find plugin type {pluginInfo.TypeName} in assembly {pluginInfo.Metadata.GUID}\");\n\t\treturn null;\n\t}\n\n\tBasePlugin plugin = (BasePlugin)Activator.CreateInstance(pluginType);\n\tplugin.Metadata = pluginInfo.Metadata;\n\tplugin.Config = pluginInfo.Config;\n\tplugin.IsChainedLoader = pluginInfo.IsChainedLoader;\n\tplugin.IsPatcherPlugin = pluginInfo.IsPatcherPlugin;\n\tplugin.PluginDirectory = pluginInfo.PluginDirectory;\n\tplugin.ResourceManager = pluginInfo.ResourceManager;\n\tplugin.Chainloader = this;\n\n\tif (plugin.IsChainedLoader) {\n\t\tplugin.Preloader = this;\n\t}\n\n\tif (plugin.Config == null) {\n\t\tplugin.Config = new ConfigFile(Path.Combine(Paths.ConfigPath, $\"{plugin.Metadata.GUID}.cfg\"), false, plugin.Metadata);\n\t}\n\n\tif (plugin.Config.Enabled) {\n\t\tif (!plugin.Load()) {\n\t\t\tLogger.Log(LogLevel.Error, $\"Failed to load plugin {plugin.Metadata.GUID}\");\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn plugin;\n}", "CodeBleu_score": 42.55386230834518}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t    if (pluginInfo.Metadata.Type == PluginType.Native) {\n        return null;\n    }\n\n    Type pluginType = pluginAssembly.GetType(pluginInfo.Metadata.PluginType);\n    if (pluginType == null) {\n        Logger.LogError($\"Plugin {pluginInfo.Metadata.GUID} does not contain a type {pluginInfo.Metadata.PluginType}\");\n        return null;\n    }\n\n    BasePlugin pluginInstance = (BasePlugin)Activator.CreateInstance(pluginType);\n    if (pluginInstance == null) {\n        Logger.LogError($\"Could not create an instance of type {pluginType}\");\n        return null;\n    }\n\n    pluginInstance.Metadata = pluginInfo.Metadata;\n    pluginInstance.Config = pluginInfo.Config;\n    pluginInstance.Log = pluginInfo.Logger;\n    pluginInstance.LogSource = pluginInfo.LogSource;\n\n    pluginInstance.Load();\n\n    return pluginInstance;\n}", "CodeBleu_score": 46.434677682953584}]}
{"instance_id": "0925dc086c01", "generation_result": [{"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t\tif (TrampolineMethod == null) {\n\t\tPrepare();\n\t\tif (TrampolinePtr == IntPtr.Zero)\n\t\t\tthrow new Exception(\"TrampolinePtr is null!\");\n\t\tTrampolineMethod = GenerateNativeProxy(TrampolinePtr, signature);\n\t}\n\treturn TrampolineMethod;\n}", "CodeBleu_score": 61.84812834756326}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t    if (TrampolineMethod == null) {\n        Prepare();\n        TrampolineMethod = GenerateNativeProxy(TrampolinePtr, signature);\n    }\n    return TrampolineMethod;\n}", "CodeBleu_score": 71.01034234139325}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t    if (TrampolineMethod == null) {\n        Prepare();\n        TrampolineMethod = GenerateNativeProxy(TrampolinePtr, signature);\n    }\n    return TrampolineMethod;\n}", "CodeBleu_score": 71.01034234139325}]}
{"instance_id": "cfab5c23610e", "generation_result": [{"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t    var assembly = Assembly.GetExecutingAssembly();\n    var resourceName = \"Scribble.Language.\" + code + \".json\";\n\n    using Stream stream = assembly.GetManifestResourceStream(resourceName);\n    using StreamReader reader = new StreamReader(stream);\n    string json = reader.ReadToEnd();\n    var result = JsonSerializer.Deserialize<Dictionary<string, string>>(json);\n    if (result == null) {\n        throw new JsonException();\n    }\n    return result;\n}", "CodeBleu_score": 45.3288644312557}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t    var assembly = Assembly.GetExecutingAssembly();\n    var resourceName = $\"{assembly.GetName().Name}.Languages.{code}.json\";\n    using Stream stream = assembly.GetManifestResourceStream(resourceName);\n    if (stream is null) {\n        throw new NullReferenceException($\"The language file {code}.json was not found in the assembly's resources.\");\n    }\n\n    try {\n        var language = JsonSerializer.Deserialize<Dictionary<string, string>>(stream);\n        if (language is null) {\n            throw new JsonException(\"Deserialization of language file failed.\");\n        }\n        return language;\n    }\n    catch (JsonException e) {\n        throw new JsonException($\"Deserialization of language file {code}.json failed.\", e);\n    }\n}", "CodeBleu_score": 49.38903933825507}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t    var assembly = Assembly.GetExecutingAssembly();\n    var resourceName = \"Languages.\" + code + \".json\";\n    using var stream = assembly.GetManifestResourceStream(resourceName);\n    if (stream == null)\n        throw new NullReferenceException($\"Language file '{resourceName}' not found.\");\n\n    return JsonSerializer.Deserialize<Dictionary<string, string>>(stream) ?? throw new JsonException(\"Failed to deserialize language file.\");\n}", "CodeBleu_score": 27.50135201327045}]}
{"instance_id": "9978bd31d199", "generation_result": [{"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t    int expressionCount = 0;\n    foreach (var node in nodes) {\n        if (node is ParserRuleContext) {\n            Visit(node);\n            expressionCount++;\n        }\n    }\n    return expressionCount;\n}", "CodeBleu_score": 48.301936091866665}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t    int count = 0;\n    foreach (IParseTree node in nodes) {\n        if (node is ParserRuleContext) {\n            Visit((ParserRuleContext)node);\n            count++;\n        }\n    }\n    return count;\n}", "CodeBleu_score": 37.473180880659804}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t    int count = 0;\n    foreach (var node in nodes) {\n        if (node is ParserRuleContext) {\n            Visit((ParserRuleContext)node);\n            count++;\n        }\n    }\n    return count;\n}", "CodeBleu_score": 39.505021716637394}]}
{"instance_id": "8f9bf9ee575a", "generation_result": [{"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t    var lineID = context.line_id_tag()?.GetText();\n\n    if (string.IsNullOrEmpty(lineID)) {\n        throw new InvalidOperationException($\"Line {context.Start.Line} doesn't have an ID tag\");\n    }\n\n    var expressionCount = 0;\n\n    foreach (var expression in context.expression()) {\n        expressionCount++;\n        Visit(expression);\n    }\n\n    var instruction = new Instruction(OpCode.RunLine, lineID, expressionCount);\n\n    AddInstruction(instruction);\n\n    return 0;\n}", "CodeBleu_score": 26.274364563169062}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t    var expressionCount = 0;\n\n    // get the text of the line\n    var text = context.line_text().GetText();\n\n    // get the line ID\n    var lineID = context.line_id().GetText();\n\n    // get the line tags\n    var tags = context.line_tags();\n\n    // get the line metadata\n    var metadata = context.line_metadata();\n\n    // get the line's expression list\n    var expressions = context.expression();\n\n    // generate code for each expression\n    foreach (var expression in expressions) {\n        expressionCount++;\n        Visit(expression);\n    }\n\n    // get the line's metadata\n    var metadataCount = 0;\n    if (metadata != null) {\n        metadataCount = metadata.Length;\n    }\n\n    // get the line's tags\n    var tagCount = 0;\n    if (tags != null) {\n        tagCount = tags.Length;\n    }\n\n    // create a line command\n    var command = new LineCommand {\n        text = text,\n        lineID = lineID,\n        expressionCount = expressionCount,\n        metadataCount = metadataCount,\n        tagCount = tagCount,\n    };\n\n    // add it to the current node\n    currentNode.AddCommand(command);\n\n    return 0;\n}", "CodeBleu_score": 33.793624110884835}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t    // This is the text of the line, minus any formatting tags.\n    string lineText = context.formatted_text().GetText();\n\n    // This is the text of the line, with formatting tags.\n    string lineRawText = context.formatted_text().GetTextWithTrivia();\n\n    // This is the number of expressions in the line.\n    int expressionCount = context.formatted_text().expression().Length;\n\n    // This is the line ID.\n    string lineID = null;\n\n    // This is the line's metadata.\n    Dictionary<string, string> metadata = new Dictionary<string, string>();\n\n    // This is the line's tags.\n    List<string> tags = new List<string>();\n\n    // This is the line's node name.\n    string nodeName = null;\n\n    // This is the line's position in the source file.\n    IToken linePosition = null;\n\n    // If the line has metadata, process it.\n    if (context.metadata_key_value_pair() != null) {\n        foreach (var pair in context.metadata_key_value_pair()) {\n            var key = pair.metadata_key().GetText();\n            var value = pair.metadata_value().GetText();\n\n            // If the key is 'id', this is the line ID.\n            if (key == \"id\") {\n                lineID = value;\n            } else if (key == \"node\") {\n                nodeName = value;\n            } else {\n                // Otherwise, this is just a regular metadata key-value pair.\n                metadata.Add(key, value);\n            }\n        }\n    }\n\n    // If the line has tags, process them.\n    if (context.tag() != null) {\n        foreach (var tag in context.tag()) {\n            var tagText = tag.GetText();\n            tags.Add(tagText);\n        }\n    }\n\n    // If the line doesn't have an ID, throw an error.\n    if (lineID == null) {\n        throw new InvalidOperationException($\"Line {lineRawText} doesn't have a line ID tag.\");\n    }\n\n    // If the line", "CodeBleu_score": 44.86161428693867}]}
{"instance_id": "b70d033fed9c", "generation_result": [{"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t    var diagnostics = new List<Diagnostic>();\n    var unknownCommands = yarnFile.CommandReferences.Where(cmd => !yarnFile.KnownCommands.Contains(cmd));\n\n    foreach (var command in unknownCommands) {\n        var diagnostic = new Diagnostic {\n            Range = new Range {\n                Start = new Position {\n                    Line = command.Line,\n                    Character = command.Column\n                },\n                End = new Position {\n                    Line = command.Line,\n                    Character = command.Column + command.Length\n                }\n            },\n            Severity = DiagnosticSeverity.Warning,\n            Code = \"YarnSpinner.UnknownCommand\",\n            Message = $\"Unknown command '{command.Name}'\",\n            Source = \"YarnSpinner\",\n            Tags = new Container<DiagnosticTag> {\n                DiagnosticTag.Unnecessary\n            },\n            Data = JToken.FromObject(new {\n                command = command.Name\n            })\n        };\n\n        diagnostics.Add(diagnostic);\n    }\n\n    return diagnostics;\n}", "CodeBleu_score": 24.939718435473836}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t    var diagnostics = new List<Diagnostic>();\n\n    // For each command in the file...\n    foreach (var command in yarnFile.Commands) {\n        // If the command is a shortcut command, skip it.\n        if (command.IsShortcut) {\n            continue;\n        }\n\n        // If the command is a built-in command, skip it.\n        if (command.IsBuiltIn) {\n            continue;\n        }\n\n        // If the command is a valid command, skip it.\n        if (yarnFile.Project.Commands.Contains(command.Name)) {\n            continue;\n        }\n\n        // If the command is not a valid command, add a diagnostic to the list.\n        diagnostics.Add(new Diagnostic {\n            Message = $\"Unknown command '{command.Name}'\",\n            Severity = DiagnosticSeverity.Warning,\n            Code = \"YarnSpinner.UnknownCommand\",\n            Source = \"YarnSpinner\",\n            Range = new Range(\n                new Position(command.LineNumber, command.ColumnNumber),\n                new Position(command.LineNumber, command.ColumnNumber + command.Name.Length)\n            ),\n            Data = new {\n                command = command.Name,\n            }\n        });\n    }\n\n    return diagnostics;\n}", "CodeBleu_score": 40.40736659059077}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t    var diagnostics = new List<Diagnostic>();\n\n    // Find all commands in the file\n    var commandReferences = yarnFile.GetCommandReferences();\n\n    // For each command, check if it has a definition\n    foreach (var commandReference in commandReferences) {\n        var commandName = commandReference.Key;\n        var commandReferenceLocation = commandReference.Value;\n\n        if (yarnFile.ProjectData.Commands.ContainsKey(commandName)) {\n            // The command has a definition, so we don't need to report it\n            continue;\n        }\n\n        // The command does not have a definition, so report it\n        var diagnostic = new Diagnostic {\n            Range = commandReferenceLocation,\n            Message = $\"No definition found for command '{commandName}'\",\n            Severity = DiagnosticSeverity.Warning,\n            Code = \"YarnSpinner:UnknownCommand\",\n            Data = commandName,\n        };\n\n        diagnostics.Add(diagnostic);\n    }\n\n    return diagnostics;\n}", "CodeBleu_score": 31.380985320475002}]}
{"instance_id": "9a072876f358", "generation_result": [{"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t    return new CodeActionRegistrationOptions {\n        DocumentSelector = Utils.YarnDocumentSelector,\n        ResolveProvider = false,\n        CodeActionKinds = new Container<CodeActionKind>(\n            CodeActionKind.QuickFix\n        )\n    };\n}", "CodeBleu_score": 83.55450822352523}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t    return new CodeActionRegistrationOptions {\n        DocumentSelector = DocumentSelector.ForLanguage(\"yarn\"),\n        ResolveProvider = false,\n        CodeActionKinds = new Container<CodeActionKind>(\n            CodeActionKind.QuickFix\n        )\n    };\n}", "CodeBleu_score": 71.54091310251644}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t    return new CodeActionRegistrationOptions {\n        DocumentSelector = DocumentSelector.ForLanguage(\"yarnspinner\"),\n        ResolveProvider = false,\n        CodeActionKinds = new Container<CodeActionKind>(\n            CodeActionKind.QuickFix\n        )\n    };\n}", "CodeBleu_score": 71.04167957664743}]}
{"instance_id": "7b61df32aee3", "generation_result": [{"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t    result = default;\n    if (this.variables.TryGetValue(variableName, out var value)) {\n        if (value is T) {\n            result = (T)value;\n            return true;\n        }\n        throw new ArgumentException($\"Variable \\\"{variableName}\\\" is of type \\\"{value.GetType().Name}\\\" and cannot be converted to type \\\"{typeof(T).Name}\\\".\");\n    }\n    return false;\n}", "CodeBleu_score": 54.01687944838696}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t\tif (TryGetValue(variableName, out var value)) {\n\t\tif (value is T t) {\n\t\t\tresult = t;\n\t\t\treturn true;\n\t\t}\n\t\tthrow new ArgumentException($\"Variable \\\"{variableName}\\\" is of type {value.GetType().Name} but was accessed as type {typeof(T).Name}.\");\n\t}\n\tresult = default;\n\treturn false;\n}", "CodeBleu_score": 48.84845641010544}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t\tif (this.variables.TryGetValue(variableName, out object value)) {\n\t\tif (value is T) {\n\t\t\tresult = (T)value;\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\tthrow new ArgumentException(\"The value of the variable \\\"\" + variableName + \"\\\" is of type \" + value.GetType() + \" and not of type \" + typeof(T) + \".\");\n\t\t}\n\t}\n\telse {\n\t\tresult = default(T);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 52.0074343161547}]}
{"instance_id": "7201488347ef", "generation_result": [{"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t    this.variableStorage = variableStorage;\n\n    library = new Yarn.Library();\n\n    virtualMachine = new Yarn.VirtualMachine(library);\n\n    // Register all of the functions that we support in the\n    // standard library\n    Yarn.StandardLibrary.Register(virtualMachine);\n\n    // Register all of our node-related functions\n    virtualMachine.RegisterFunction(\"visitNode\", (string nodeName) => {\n        visitedNodes.Add(nodeName);\n    });\n\n    virtualMachine.RegisterFunction(\"visitedNode\", (string nodeName) => {\n        return visitedNodes.Contains(nodeName);\n    });\n\n    // Register the line parser\n    lineParser = new Yarn.LineParser();\n\n    // Register the marker processors\n    lineParser.AddFunction(\"select\", (string[] parameters) => {\n        return parameters[int.Parse(parameters[0])];\n    });\n\n    lineParser.AddFunction(\"plural\", (string[] parameters) => {\n        var count = int.Parse(parameters[0]);\n\n        if (count == 1) {\n            return parameters[1];\n        } else {\n            return parameters[2];\n        }\n    });\n\n    lineParser.AddFunction(\"ordinal\", (string[] parameters) => {\n        var count = int.Parse(parameters[0]);\n\n        if (count == 1) {\n            return parameters[1];\n        } else if (count == 2) {\n            return parameters[2];\n        } else {\n            return parameters[3];\n        }\n    });\n}", "CodeBleu_score": 33.40289929482859}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t    library = new Yarn.Library();\n    virtualMachine = new Yarn.VirtualMachine(library);\n\n    // Register functions for node visit tracking\n    virtualMachine.NodeStartHandler = OnNodeStart;\n    virtualMachine.NodeCompleteHandler = OnNodeComplete;\n\n    // Register a function for when a line is delivered\n    virtualMachine.LineHandler = OnLine;\n\n    // Register a function for when the options are changed\n    virtualMachine.OptionsHandler = OnOptions;\n\n    // Register a function for when the command handler is called\n    virtualMachine.CommandHandler = OnCommand;\n\n    // Register a function for when the node complete handler is called\n    virtualMachine.NodeCompleteHandler = OnNodeComplete;\n\n    // Register a function for when the dialogue is complete\n    virtualMachine.DialogueCompleteHandler = OnDialogueComplete;\n\n    // Register a function for when a line is marked as delivered\n    virtualMachine.LineMarkupDidRunHandler = OnLineMarkupComplete;\n\n    // Register a function for when a node is marked as delivered\n    virtualMachine.NodeMarkupDidRunHandler = OnNodeMarkupComplete;\n\n    // Register a function for when a command is marked as delivered\n    virtualMachine.CommandMarkupDidRunHandler = OnCommandMarkupComplete;\n\n    // Register a function for when a dialogue is marked as delivered\n    virtualMachine.DialogueMarkupDidRunHandler = OnDialogueMarkupComplete;\n\n    // Register a function for when a node starts\n    virtualMachine.NodeStartHandler = OnNodeStart;\n\n    // Register a function for when a node is complete\n    virtualMachine.NodeCompleteHandler = OnNodeComplete;\n\n    // Register a function for when a dialogue is complete\n    virtualMachine.DialogueCompleteHandler = OnDialogueComplete;\n\n    // Register a function for when a dialogue is ready to start\n    virtualMachine.DialogueReadyHandler = OnDialogueReady;\n\n    // Register a function for when a dialogue error occurs\n    virtualMachine.ErrorHandler = OnError;\n\n    // Register a function for when a node is complete\n    virtualMachine.NodeCompleteHandler = OnNodeComplete;\n\n    // Register a function for when a dialogue is complete\n    virtualMachine.DialogueCompleteHandler = OnDialog", "CodeBleu_score": 20.35055701177846}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t    this.variableStorage = variableStorage;\n\n    library = new Library();\n    library.RegisterFunction(\"visit\", 1, delegate(Value[] parameters) {\n        return Value.Create(VisitNode(parameters[0].AsString));\n    });\n    library.RegisterFunction(\"visited\", 1, delegate(Value[] parameters) {\n        return Value.Create(NodeVisited(parameters[0].AsString));\n    });\n\n    virtualMachine = new VirtualMachine(library);\n    virtualMachine.SetNodeStartHandler(OnNodeStart);\n    virtualMachine.SetNodeCompleteHandler(OnNodeComplete);\n    virtualMachine.SetDialogueCompleteHandler(OnDialogueComplete);\n\n    StandardLibrary.ImportLibrary(library);\n\n    lineParser = new LineParser();\n    lineParser.AddMarkupCommand(new Markup.MarkupCommand.SelectCommand(SelectMarkupProcessor));\n    lineParser.AddMarkupCommand(new Markup.MarkupCommand.PluralCommand(PluralMarkupProcessor));\n    lineParser.AddMarkupCommand(new Markup.MarkupCommand.OrdinalCommand(OrdinalMarkupProcessor));\n}", "CodeBleu_score": 37.22875670104441}]}
{"instance_id": "59b7b5a9c34a", "generation_result": [{"code": "public int FindUniqueID(string UniqueID){\n\t\tint i = 0;\n\tforeach (LoopListBankData data in LoopListBank.BankData) {\n\t\tif (data.UniqueID == UniqueID) {\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn -1;\n}", "CodeBleu_score": 39.70962542082152}, {"code": "public int FindUniqueID(string UniqueID){\n\t\tif (string.IsNullOrEmpty(UniqueID)) {\n\t\treturn -1;\n\t}\n\tfor (int i = 0; i < BankData.Count; i++) {\n\t\tif (BankData[i].UniqueID == UniqueID) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}", "CodeBleu_score": 67.49691412706795}, {"code": "public int FindUniqueID(string UniqueID){\n\t\tif (string.IsNullOrEmpty(UniqueID)) {\n\t\treturn -1;\n\t}\n\n\tfor (int i = 0; i < LoopListBankData.Count; i++) {\n\t\tif (LoopListBankData[i].UniqueID == UniqueID) {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\treturn -1;\n}", "CodeBleu_score": 69.39193480181972}]}
{"instance_id": "2b85606238aa", "generation_result": [{"code": "public void AddContent(object newContent){\n\t    LoopListBankData newBankData = new LoopListBankData();\n    newBankData.m_Content = newContent;\n    newBankData.m_ID = m_NextID;\n    m_LoopListBankDataList.Add(newBankData);\n    m_NextID++;\n}", "CodeBleu_score": 36.91643329901543}, {"code": "public void AddContent(object newContent){\n\t\tLoopListBankData newLoopListBankData = new LoopListBankData();\n\tnewLoopListBankData.content = newContent;\n\tnewLoopListBankData.id = m_LoopListBankDataList.Count;\n\tm_LoopListBankDataList.Add(newLoopListBankData);\n}", "CodeBleu_score": 37.683764182846225}, {"code": "public void AddContent(object newContent){\n\t\tLoopListBankData newLoopListBankData = new LoopListBankData();\n\tnewLoopListBankData.content = newContent;\n\tnewLoopListBankData.id = GetUniqueID();\n\tm_LoopListBankDataList.Add(newLoopListBankData);\n}", "CodeBleu_score": 38.21898178934561}]}
{"instance_id": "34e593106991", "generation_result": [{"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t\tm_IndexID = idx;\n\tm_Content = content;\n\tm_ClickUniqueID = ClickUniqueID;\n\tm_ClickObject = ClickObject;\n\tif (m_IsUpdateGameObjectName) {\n\t\tname = string.Format(\"{0}_{1}\", m_PrefabName, m_IndexID);\n\t}\n}", "CodeBleu_score": 57.7620075859956}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t\tm_IndexID = idx;\n\tm_Content = content;\n\tm_ClickUniqueID = ClickUniqueID;\n\tm_ClickObject = ClickObject;\n\n\tif (m_IsUpdateGameObjectName) {\n\t\tgameObject.name = m_PrefabName + \" \" + idx;\n\t}\n}", "CodeBleu_score": 52.01300582534672}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t\tm_IndexID = idx;\n\tm_Content = content;\n\tm_ClickUniqueID = ClickUniqueID;\n\tm_ClickObject = ClickObject;\n\tif (m_IsUpdateGameObjectName) {\n\t\tgameObject.name = string.Format(\"{0}_{1}\", m_PrefabName, idx);\n\t}\n}", "CodeBleu_score": 63.77880405944296}]}
{"instance_id": "6b6a6cc329cc", "generation_result": [{"code": "private void OnButtonAddDataClickk(){\n\t    int numToAdd = Mathf.Max(1, int.Parse(InputField.text));\n    for (int i = 0; i < numToAdd; i++) {\n        Bank.Add(Random.Range(0, 10));\n    }\n    TotalCount = Bank.Count;\n    Refresh();\n}", "CodeBleu_score": 30.447023022771674}, {"code": "private void OnButtonAddDataClickk(){\n\t\tint numItems = 0\n\tif (int.TryParse(inputField.text, out numItems)) {\n\t\tif (numItems <= 0) {\n\t\t\tnumItems = 1\n\t\t}\n\t} else {\n\t\tnumItems = 1\n\t}\n\n\tfor (int i = 0; i < numItems; i++) {\n\t\tbank.Add(Random.Range(0, 10))\n\t}\n\n\tscrollRect.totalCount = bank.Count\n\tscrollRect.RefreshCells()\n}", "CodeBleu_score": 32.44930321187683}, {"code": "private void OnButtonAddDataClickk(){\n\t\tint count = 0\n\tint.TryParse(InputFieldAddData.text, out count)\n\tif (count < 1) {\n\t\tcount = 1\n\t}\n\tfor (int i = 0; i < count; i++) {\n\t\tListBank.Add(Random.Range(0, 10))\n\t}\n\tScrollRect.totalCount = ListBank.Count\n\tScrollRect.RefreshCells()\n}", "CodeBleu_score": 31.841328525223766}]}
{"instance_id": "209961c9eb8e", "generation_result": [{"code": "protected override void ClearTempPool(){\n\t\tif (contentPool.transform.childCount != contentPool.transform.parent.childCount) {\n\t\tDebug.LogError(\"The content pool has a different number of child objects than the prefab source.\nThis is likely due to a script error in the prefab's child objects.\nThe content pool has been reset to match the prefab source.\");\n\t\tcontentPool.transform.DestroyAllChildren();\n\t\tcontentPool.transform.parent.DestroyAllChildren();\n\t\tcontentPool.transform.parent.gameObject.SetActive(false);\n\t\tcontentPool.transform.parent.gameObject.SetActive(true);\n\t\treturn;\n\t}\n\tif (startIndex > 0) {\n\t\tfor (int i = 0; i < startIndex; i++) {\n\t\t\tcontentPool.transform.parent.GetChild(i).SetParent(contentPool.transform, false);\n\t\t}\n\t\tstartIndex = 0;\n\t}\n\tif (endIndex < contentPool.transform.parent.childCount) {\n\t\tfor (int i = endIndex; i < contentPool.transform.parent.childCount; i++) {\n\t\t\tcontentPool.transform.parent.GetChild(i).SetParent(contentPool.transform, false);\n\t\t}\n\t\tendIndex = contentPool.transform.parent.childCount;\n\t}\n}", "CodeBleu_score": 37.89975443629528}, {"code": "protected override void ClearTempPool(){\n\t\t//verify that the content has the expected number of child elements\n\tint expectedNumChildren = endIndex - startIndex + 1;\n\tif (content.childCount != expectedNumChildren) {\n\t\tDebug.LogError(\"Content has \" + content.childCount + \" children, but expected \" + expectedNumChildren + \" children.\");\n\t\treturn;\n\t}\n\n\t//if there are items marked for deletion at the start, return them to the prefab source and reset the start index\n\tif (startIndex > 0) {\n\t\tfor (int i = 0; i < startIndex; i++) {\n\t\t\tTransform child = content.GetChild(0);\n\t\t\tchild.SetParent(prefabSource, false);\n\t\t\tchild.gameObject.SetActive(false);\n\t\t}\n\t\tstartIndex = 0;\n\t}\n\n\t//if there are items marked for deletion at the end, return them to the prefab source and reset the end index\n\tif (endIndex < content.childCount - 1) {\n\t\tfor (int i = content.childCount - 1; i > endIndex; i--) {\n\t\t\tTransform child = content.GetChild(i);\n\t\t\tchild.SetParent(prefabSource, false);\n\t\t\tchild.gameObject.SetActive(false);\n\t\t}\n\t\tendIndex = content.childCount - 1;\n\t}\n}", "CodeBleu_score": 40.40722537795932}, {"code": "protected override void ClearTempPool(){\n\t\tif (Content.childCount != ContentSize) {\n\t\tDebug.LogWarning(\"The content size of \" + gameObject.name + \" has changed. The content size is now \" + Content.childCount + \", but the expected size is \" + ContentSize + \". The content pool will be cleared.\");\n\t\tfor (int i = 0; i < Content.childCount; i++) {\n\t\t\tif (Content.GetChild(i).GetComponent<ScrollPoolItem>() != null) {\n\t\t\t\tContent.GetChild(i).GetComponent<ScrollPoolItem>().ReturnToSource();\n\t\t\t}\n\t\t}\n\t\tStartIndex = 0;\n\t\tEndIndex = 0;\n\t}\n\tif (StartIndex > 0) {\n\t\tfor (int i = 0; i < StartIndex; i++) {\n\t\t\tif (Content.GetChild(i).GetComponent<ScrollPoolItem>() != null) {\n\t\t\t\tContent.GetChild(i).GetComponent<ScrollPoolItem>().ReturnToSource();\n\t\t\t}\n\t\t}\n\t\tStartIndex = 0;\n\t}\n\tif (EndIndex > 0) {\n\t\tfor (int i = Content.childCount - 1; i > Content.childCount - 1 - EndIndex; i--) {\n\t\t\tif (Content.GetChild(i).GetComponent<ScrollPoolItem>() != null) {\n\t\t\t\tContent.GetChild(i).GetComponent<ScrollPoolItem>().ReturnToSource();\n\t\t\t}\n\t\t}\n\t\tEndIndex = 0;\n\t}\n}", "CodeBleu_score": 40.12130791222221}]}
{"instance_id": "c6bb290de2b3", "generation_result": [{"code": "public void AnticipateScale(Vector3 newScale){\n\t\tif (Network.isActiveAndListening) {\n\t\ttransform.localScale = newScale;\n\t\ttransform.GetComponent<NetworkTransform>().anticipatedScale = newScale;\n\n\t\tif (NetworkTransform.allowAuthoritativeUpdates) {\n\t\t\ttransform.GetComponent<NetworkTransform>().authoritativeScale = newScale;\n\t\t}\n\n\t\ttransform.GetComponent<NetworkTransform>().RecordAnticipatedTransform();\n\t\ttransform.GetComponent<NetworkTransform>().UpdateAnticipationCounters();\n\t\ttransform.GetComponent<NetworkTransform>().UpdateAnticipationTimes();\n\n\t\ttransform.GetComponent<NetworkTransform>().smoothTransitionDuration = 0f;\n\t\ttransform.GetComponent<NetworkTransform>().currentSmoothTime = 0f;\n\t}\n}", "CodeBleu_score": 27.53977333192551}, {"code": "public void AnticipateScale(Vector3 newScale){\n\t    if (Network.isActiveAndListening) {\n        localScale = newScale;\n        anticipatedScale = newScale;\n        if (authoritative) {\n            transform.localScale = newScale;\n        }\n        RecordAnticipatedTransform();\n        anticipationCounter++;\n        anticipationTime = Time.time;\n        smoothTransitionDuration = 0;\n        smoothTime = 0;\n    }\n}", "CodeBleu_score": 32.39011554630989}, {"code": "public void AnticipateScale(Vector3 newScale){\n\t\tif (isActiveAndEnabled && network.IsConnectedAndListening) {\n\t\tlocalScale = newScale;\n\t\tauthoritativeScale = newScale;\n\t\tanticipatedScale = newScale;\n\t\tRecordAnticipatedTransform();\n\t\tUpdateAnticipationCounters();\n\t\tUpdateAnticipationTimes();\n\t\tResetSmoothTransitionDuration();\n\t\tResetSmoothTime();\n\t}\n}", "CodeBleu_score": 16.811491685022233}]}
{"instance_id": "d67d3c80dd00", "generation_result": [{"code": "private void FlushMessages(){\n\t\tif (m_AnimUpdates.Count > 0) {\n\t\tfor (int i = 0; i < m_AnimUpdates.Count; i++) {\n\t\t\tSendAnimUpdate(m_AnimUpdates[i]);\n\t\t}\n\t\tm_AnimUpdates.Clear();\n\t}\n\tif (m_ParamUpdates.Count > 0) {\n\t\tfor (int i = 0; i < m_ParamUpdates.Count; i++) {\n\t\t\tSendParamUpdate(m_ParamUpdates[i]);\n\t\t}\n\t\tm_ParamUpdates.Clear();\n\t}\n\tif (m_TriggerUpdates.Count > 0) {\n\t\tfor (int i = 0; i < m_TriggerUpdates.Count; i++) {\n\t\t\tSendTriggerUpdate(m_TriggerUpdates[i]);\n\t\t}\n\t\tm_TriggerUpdates.Clear();\n\t}\n}", "CodeBleu_score": 35.66957596889363}, {"code": "private void FlushMessages(){\n\t    // Send animation updates\n    if (m_AnimationUpdateList.Count > 0) {\n        foreach (var update in m_AnimationUpdateList) {\n            SendAnimationUpdate(update);\n        }\n        m_AnimationUpdateList.Clear();\n    }\n\n    // Send parameter updates\n    if (m_ParameterUpdateList.Count > 0) {\n        foreach (var update in m_ParameterUpdateList) {\n            SendParameterUpdate(update);\n        }\n        m_ParameterUpdateList.Clear();\n    }\n\n    // Send trigger updates\n    if (m_TriggerUpdateList.Count > 0) {\n        foreach (var update in m_TriggerUpdateList) {\n            SendTriggerUpdate(update);\n        }\n        m_TriggerUpdateList.Clear();\n    }\n}", "CodeBleu_score": 41.850771885397045}, {"code": "private void FlushMessages(){\n\t\t// Send animation updates\n\tforeach (AnimationUpdate update in animationUpdates) {\n\t\tSendAnimationUpdate(update);\n\t}\n\tanimationUpdates.Clear();\n\n\t// Send parameter updates\n\tforeach (ParameterUpdate update in parameterUpdates) {\n\t\tSendParameterUpdate(update);\n\t}\n\tparameterUpdates.Clear();\n\n\t// Send trigger updates\n\tforeach (TriggerUpdate update in triggerUpdates) {\n\t\tSendTriggerUpdate(update);\n\t}\n\ttriggerUpdates.Clear();\n}", "CodeBleu_score": 30.330752354723632}]}
{"instance_id": "0632b2f27d22", "generation_result": [{"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t    if (updateStage == NetworkUpdateStage.PreUpdate) {\n        FlushPendingMessages();\n    }\n    else if (updateStage == NetworkUpdateStage.PostLateUpdate) {\n        if (isServer) {\n            ProcessAnimatorUpdates();\n        }\n        else {\n            ProcessAnimatorUpdatesClient();\n        }\n    }\n}", "CodeBleu_score": 11.812322488555898}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t    if (updateStage == NetworkUpdateStage.PreUpdate) {\n        if (isServer || isOwner) {\n            FlushMessages();\n        }\n    }\n\n    if (updateStage == NetworkUpdateStage.PostUpdate) {\n        ProcessParameters();\n        CheckAnimatorChanges();\n    }\n}", "CodeBleu_score": 22.49153502787739}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t    if (updateStage == NetworkUpdateStage.PreUpdate) {\n        // Flush pending messages if the animator is the owner or the server.\n        if (hasAuthority || isServer) {\n            FlushPendingMessages();\n        }\n    }\n\n    // Process parameter updates and check for animator changes, depending on server authority and ownership.\n    if (updateStage == NetworkUpdateStage.PostLateUpdate) {\n        // If the animator is the owner or the server, process parameter updates.\n        if (hasAuthority || isServer) {\n            ProcessParameterUpdates();\n        }\n\n        // If the animator is the server, check for animator changes.\n        if (isServer) {\n            CheckForAnimatorChanges();\n        }\n    }\n}", "CodeBleu_score": 29.174347481118843}]}
{"instance_id": "d78874b65b32", "generation_result": [{"code": "private void UpdateOwnershipAuthority(){\n\t    if (IsOwnedByLocalPlayer()) {\n        // If the object is owned by the local player, it is the authoritative owner.\n        // Set the object's authority state to authoritative.\n        // Set the Rigidbody's interpolation and kinematic properties to the object's authoritative values.\n        // Set the object's ownership status to owned.\n    } else if (IsOwnedByServer()) {\n        // If the object is owned by the server, it is the authoritative owner.\n        // Set the object's authority state to authoritative.\n        // Set the Rigidbody's interpolation and kinematic properties to the object's authoritative values.\n        // Set the object's ownership status to owned.\n    } else {\n        // If the object is not owned by the local player or the server, it is not the authoritative owner.\n        // Set the object's authority state to not authoritative.\n        // Set the Rigidbody's interpolation and kinematic properties to the object's non-authoritative values.\n        // Set the object's ownership status to not owned.\n    }\n}", "CodeBleu_score": 4.898841110781058}, {"code": "private void UpdateOwnershipAuthority(){\n\t    if (AuthorityManager.Instance.IsServer) {\n        if (AuthorityManager.Instance.IsMine(gameObject)) {\n            OwnershipAuthority = OwnershipAuthority.Mine;\n        } else {\n            OwnershipAuthority = OwnershipAuthority.Others;\n        }\n    } else {\n        if (AuthorityManager.Instance.IsMine(gameObject)) {\n            OwnershipAuthority = OwnershipAuthority.Mine;\n        } else {\n            OwnershipAuthority = OwnershipAuthority.Others;\n        }\n    }\n}", "CodeBleu_score": 25.435152697684682}, {"code": "private void UpdateOwnershipAuthority(){\n\t\n    // If the object is owned by the local player, set it to be kinematic and interpolated.\n    if (OwnershipStatus == OwnershipStatus.OwnedByLocalPlayer) {\n        GetComponent<Rigidbody>().isKinematic = true;\n        GetComponent<Rigidbody>().interpolation = RigidbodyInterpolation.Interpolate;\n        AuthorityState = AuthorityState.Authoritative;\n    }\n\n    // If the object is owned by the server, set it to be non-kinematic and extrapolated.\n    else if (OwnershipStatus == OwnershipStatus.OwnedByServer) {\n        GetComponent<Rigidbody>().isKinematic = false;\n        GetComponent<Rigidbody>().interpolation = RigidbodyInterpolation.Extrapolate;\n        AuthorityState = AuthorityState.Authoritative;\n    }\n\n    // If the object is not owned by the local player or the server, set it to be non-kinematic and interpolated.\n    else {\n        GetComponent<Rigidbody>().isKinematic = false;\n        GetComponent<Rigidbody>().interpolation = RigidbodyInterpolation.Interpolate;\n        AuthorityState = AuthorityState.AuthorityLost;\n    }\n}", "CodeBleu_score": 22.235015061695794}]}
{"instance_id": "304fe1278db9", "generation_result": [{"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t\tfloat a = 0\n\tfloat b = 0\n\tfloat c = 0\n\tfloat d = 0\n\t\n\tswitch (compressed >> 30) {\n\t\tcase 0:\n\t\t\ta = 1 - 2 * (compressed & 0x3fff) / 16383\n\t\t\tb = 2 * (compressed >> 14 & 0x3fff) / 16383\n\t\t\tc = 2 * (compressed >> 28 & 0x3) / 3\n\t\t\td = 2 * (compressed >> 26 & 0x3fff) / 16383\n\t\t\tbreak\n\t\tcase 1:\n\t\t\ta = 2 * (compressed >> 14 & 0x3fff) / 16383\n\t\t\tb = 1 - 2 * (compressed & 0x3fff) / 16383\n\t\t\tc = 2 * (compressed >> 28 & 0x3) / 3\n\t\t\td = 2 * (compressed >> 26 & 0x3fff) / 16383\n\t\t\tbreak\n\t\tcase 2:\n\t\t\ta = 2 * (compressed >> 14 & 0x3fff) / 16383\n\t\t\tb = 2 * (compressed >> 26 & 0x3fff) / 16383\n\t\t\tc = 1 - 2 * (compressed & 0x3fff) / 16383\n\t\t\td = 2 * (compressed >> 28 & 0x3) / 3\n\t\t\tbreak\n\t\tcase 3:\n\t\t\ta = 2 * (compressed >> 26 & 0x3fff) / 16383\n\t\t\tb = 2 * (compressed >> 14 & 0x3fff) / 16383\n\t\t\tc = 2 * (compressed >> 28 & 0x3) / 3\n", "CodeBleu_score": 13.444688875298318}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t\t// Determine which component to skip based on the highest two bits\n\tvar skipComponent = (compressed & 0xC0000000) >> 30\n\t\n\t// Decompress the remaining components\n\tvar x = (compressed & 0x3FF00000) >> 20\n\tvar y = (compressed & 0x000FFC00) >> 10\n\tvar z = (compressed & 0x000003FF)\n\t\n\t// Compute the sum of squared magnitudes\n\tvar sum = x * x + y * y + z * z\n\t\n\t// Compute the skipped component\n\tvar w = Mathf.Sqrt(1.0f - sum)\n\t\n\t// Store the decompressed quaternion\n\tswitch (skipComponent) {\n\t\tcase 0:\n\t\t\tquaternion.x = x\n\t\t\tquaternion.y = y\n\t\t\tquaternion.z = z\n\t\t\tquaternion.w = w\n\t\t\tbreak\n\t\tcase 1:\n\t\t\tquaternion.x = x\n\t\t\tquaternion.y = y\n\t\t\tquaternion.z = w\n\t\t\tquaternion.w = z\n\t\t\tbreak\n\t\tcase 2:\n\t\t\tquaternion.x = x\n\t\t\tquaternion.y = w\n\t\t\tquaternion.z = y\n\t\t\tquaternion.w = z\n\t\t\tbreak\n\t\tcase 3:\n\t\t\tquaternion.x = w\n\t\t\tquaternion.y = x\n\t\t\tquaternion.z = y\n\t\t\tquaternion.w = z\n\t\t\tbreak\n\t}\n}", "CodeBleu_score": 22.941585203857212}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t\t// Determine which component to skip\n\tint componentIndex = (int)(compressed >> 30)\n\n\t// Decompress the remaining components\n\tfloat component1 = DecompressFloat((compressed & 0x3FFF0000) >> 16)\n\tfloat component2 = DecompressFloat((compressed & 0x0000FFF0) >> 4)\n\tfloat component3 = DecompressFloat((compressed & 0x0000000F) << 12)\n\n\t// Compute the sum of squared magnitudes\n\tfloat squaredMagnitude = component1 * component1 + component2 * component2 + component3 * component3\n\n\t// Compute the skipped component\n\tfloat component4 = Mathf.Sqrt(1.0f - squaredMagnitude)\n\n\t// Assign the decompressed components to the quaternion\n\tquaternion[componentIndex] = component4\n\tquaternion[(componentIndex + 1) % 4] = component1\n\tquaternion[(componentIndex + 2) % 4] = component2\n\tquaternion[(componentIndex + 3) % 4] = component3\n}", "CodeBleu_score": 19.18828625414202}]}
{"instance_id": "452b860a7dde", "generation_result": [{"code": "static void GenerateCLRBindingByAnalysis(){\n\t    // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684AppDomain\n    AppDomain appDomain = AppDomain.CreateDomain(\"ILRuntime\");\n\n    // \u4ece\u6307\u5b9a\u6587\u4ef6\u4e2d\u52a0\u8f7d\u7a0b\u5e8f\u96c6\n    Assembly assembly = appDomain.Load(File.ReadAllBytes(Application.dataPath + \"/HotFix_Project/HotFix_Project.dll.bytes\"));\n\n    // \u521d\u59cb\u5316ILRuntime\n    ILRuntime.Runtime.Enviorment.AppDomain __domain = new ILRuntime.Runtime.Enviorment.AppDomain();\n    __domain.LoadAssembly(assembly, assembly.ManifestModule.FullyQualifiedName, new ILRuntime.Mono.Cecil.Pdb.PdbReaderProvider());\n\n    // \u751f\u6210\u7ed1\u5b9a\u4ee3\u7801\n    string dllName = \"HotFix_Project.dll\";\n    using (FileStream fs = new FileStream(Application.dataPath + \"/HotFix_Project/HotFix_Project_Binding.cs\", FileMode.Create))\n    using (StreamWriter sw = new StreamWriter(fs)) {\n        var bindingFlags = System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Static;\n        var writer = new Mono.Cecil.Pdb.PdbWriterProvider().GetSymbolWriter(dllName, fs);\n        var bw = new ILRuntime.Runtime.Generated.CLRBindings.ILRuntimeBinding(appDomain, __domain, writer);\n        bw.Export(false);\n        bw.Export(true);\n        sw.Flush();\n    }\n\n    // \u5237\u65b0AssetDatabase\n    AssetDatabase.Refresh();\n}", "CodeBleu_score": 25.323169134001965}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t    // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684AppDomain\n    AppDomain appDomain = AppDomain.CreateDomain(\"ILRuntime\");\n\n    // \u521b\u5efaILRuntime\u7684\u5b9e\u4f8b\n    ILRuntime.Runtime.Enviorment.AppDomain __domain = new ILRuntime.Runtime.Enviorment.AppDomain();\n\n    // \u521b\u5efaILRuntime\u7684\u5206\u6790\u5668\n    ILRuntime.Runtime.Analyzers.UnuseMethodAnalyzer unuseMethodAnalyzer = new ILRuntime.Runtime.Analyzers.UnuseMethodAnalyzer();\n\n    // \u521b\u5efaILRuntime\u7684\u5206\u6790\u5668\n    ILRuntime.Runtime.Analyzers.DelegateBinderAnalyzer delegateBinderAnalyzer = new ILRuntime.Runtime.Analyzers.DelegateBinderAnalyzer();\n\n    // \u521b\u5efaILRuntime\u7684\u5206\u6790\u5668\n    ILRuntime.Runtime.Analyzers.TypeReferenceAnalyzer typeReferenceAnalyzer = new ILRuntime.Runtime.Analyzers.TypeReferenceAnalyzer();\n\n    // \u521b\u5efaILRuntime\u7684\u5206\u6790\u5668\n    ILRuntime.Runtime.Analyzers.NotSupportAnalyzer notSupportAnalyzer = new ILRuntime.Runtime.Analyzers.NotSupportAnalyzer();\n\n    // \u521b\u5efaILRuntime\u7684\u5206\u6790\u5668\n    ILRuntime.Runtime.Analyzers.FieldReferenceAnalyzer fieldReferenceAnalyzer = new ILRuntime.Runtime.Analyzers.FieldReferenceAnalyzer();\n\n    // \u521b\u5efaILRuntime\u7684\u5206\u6790\u5668\n    ILRuntime.Runtime.Analyzers.MethodReferenceAnalyzer methodReferenceAnalyzer = new ILRuntime.Runtime.Analyzers.MethodReferenceAnalyzer();\n\n    // \u521b\u5efaILRuntime\u7684\u5206\u6790\u5668\n    ILRuntime.Runtime.Analyzers.PropertyReferenceAnalyzer propertyReferenceAnalyzer = new ILRuntime.Runtime.Analyzers.PropertyReferenceAnalyzer();\n\n    // \u521b\u5efaILRuntime\u7684\u5206\u6790\u5668\n    ILRuntime.Runtime.Analyzers.InterfaceBinderAnalyzer interfaceBinderAnalyzer = new ILRuntime.Runtime.Analyzers.InterfaceBinderAnalyzer();\n\n    // \u521b\u5efaILRuntime", "CodeBleu_score": 11.806785699200864}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t    //\u521b\u5efa\u4e00\u4e2a\u65b0\u7684AppDomain, \u5e76\u8bbe\u7f6e\u4e3aILRuntime\u7684\u9ed8\u8ba4AppDomain\n    AppDomain appdomain = AppDomain.CreateDomain(\"ILRuntime\");\n    //\u8bbe\u7f6eappdomain\u4e3aILRuntime\u7684\u9ed8\u8ba4AppDomain\n    ILRuntime.Runtime.Enviorment.AppDomain __domain = new ILRuntime.Runtime.Enviorment.AppDomain();\n    __domain.ProxyFileDir = \"Assets/ILRuntime/Generated\";\n    // \u6ce8\u518cCLR\u7ed1\u5b9a\u7684\u91cd\u5b9a\u5411\u51fd\u6570\n    __domain.RegisterCLRRedirection(RedirectFunctions);\n    // \u6ce8\u518c\u503c\u7c7b\u578b\u7684\u62f7\u8d1d\u51fd\u6570\n    __domain.RegisterValueTypeBinder(CopyValueType);\n    // \u6ce8\u518c\u9002\u914d\u5668\u7684\u6ce8\u518c\u51fd\u6570\n    __domain.RegisterCrossBindingAdaptor(new ITypeAdapter());\n    __domain.RegisterCrossBindingAdaptor(new CoroutineAdapter());\n    // \u52a0\u8f7d\u7a0b\u5e8f\u96c6\n    __domain.LoadAssembly(\"Assets/ILRuntime/CLR/mscorlib.dll\");\n    __domain.LoadAssembly(\"Assets/ILRuntime/CLR/System.dll\");\n    __domain.LoadAssembly(\"Assets/ILRuntime/CLR/System.Core.dll\");\n    __domain.LoadAssembly(\"Assets/ILRuntime/CLR/UnityEngine.dll\");\n    __domain.LoadAssembly(\"Assets/ILRuntime/CLR/UnityEngine.UI.dll\");\n    __domain.LoadAssembly(\"Assets/ILRuntime/CLR/UnityEngine.Networking.dll\");\n    __domain.LoadAssembly(\"Assets/ILRuntime/CLR/protobuf-net.dll\");\n    __domain.LoadAssembly(\"Assets/ILRuntime/CLR/LitJson.dll\");\n    __domain.LoadAssembly(\"Assets/ILRuntime/CLR/ILRuntime.CLR.Managed.dll\");\n    __domain.LoadAssembly(\"Assets/ILRuntime/CLR/ILRuntime.CLR.Managed.Adapter.dll\");\n    __domain.LoadAssembly(\"Assets/ILRuntime/CLR/ILRuntime.CLR.Core.dll\");", "CodeBleu_score": 16.642848894755037}]}
{"instance_id": "b8990031b636", "generation_result": [{"code": "public override void OnInspectorGUI(){\n\t    base.OnInspectorGUI()\n\n    if (EditorApplication.isPlaying && PrefabUtility.GetPrefabType(target) == PrefabType.Prefab) {\n        EditorGUILayout.LabelField(\"Config Count\", this.serializedObject.FindProperty(\"m_ConfigCount\").intValue.ToString())\n        EditorGUILayout.LabelField(\"Cached Bytes Size\", this.serializedObject.FindProperty(\"m_CachedBytesSize\").intValue.ToString())\n        return\n    }\n\n    serializedObject.Update()\n    EditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_EnableLoadConfigUpdateEvent\"))\n    EditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_EnableLoadConfigDependencyAssetEvent\"))\n    EditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_InstanceRoot\"))\n    EditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_LoadType\"))\n    EditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_Priority\"))\n    serializedObject.ApplyModifiedProperties()\n}", "CodeBleu_score": 46.38185379044442}, {"code": "public override void OnInspectorGUI(){\n\t    base.OnInspectorGUI()\n\n    if (EditorApplication.isPlaying && PrefabUtility.GetPrefabType(target) == PrefabType.Prefab) {\n        EditorGUILayout.IntField(\"Config Count\", serializedObject.FindProperty(\"m_ConfigCount\").intValue)\n        EditorGUILayout.LongField(\"Cached Bytes Size\", serializedObject.FindProperty(\"m_CachedBytesSize\").longValue)\n        return\n    }\n\n    serializedObject.Update()\n    EditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_InstanceRoot\"))\n    EditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_LoadType\"))\n    EditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_Priority\"))\n    EditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_ConfigurationHelperCount\"))\n    EditorGUI.BeginDisabledGroup(EditorApplication.isPlayingOrWillChangePlaymode)\n    {\n        EditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_ConfigurationHelperInfos\"), true)\n    }\n    EditorGUI.EndDisabledGroup()\n    serializedObject.ApplyModifiedProperties()\n}", "CodeBleu_score": 48.8588933510324}, {"code": "public override void OnInspectorGUI(){\n\t    base.OnInspectorGUI();\n\n    serializedObject.Update();\n\n    EditorGUILayout.PropertyField(m_EnableLoadConfigUpdateEvent);\n    EditorGUILayout.PropertyField(m_EnableLoadConfigDependencyAssetEvent);\n\n    if (EditorApplication.isPlaying && PrefabUtility.GetPrefabType(target) == PrefabType.Prefab) {\n        EditorGUILayout.LabelField(\"Config Count\", serializedObject.FindProperty(\"m_ConfigCount\").intValue.ToString());\n        EditorGUILayout.LabelField(\"Cached Bytes Size\", serializedObject.FindProperty(\"m_CachedBytesSize\").intValue.ToString());\n    }\n\n    serializedObject.ApplyModifiedProperties();\n\n    Repaint();\n}", "CodeBleu_score": 54.61431501475889}]}
{"instance_id": "6453adc2daa8", "generation_result": [{"code": "public static void DefaultScenes(){\n\t    HashSet<string> sceneNames = new HashSet<string>();\n    sceneNames.Add(\"Assets/GameFramework/Scenes/MainMenu.unity\");\n    sceneNames.Add(\"Assets/GameFramework/Scenes/Main.unity\");\n    sceneNames.Add(\"Assets/GameFramework/Scenes/GameOver.unity\");\n    sceneNames.Add(\"Assets/GameFramework/Scenes/LevelSelect.unity\");\n    sceneNames.Add(\"Assets/GameFramework/Scenes/Level1.unity\");\n    sceneNames.Add(\"Assets/GameFramework/Scenes/Level2.unity\");\n    sceneNames.Add(\"Assets/GameFramework/Scenes/Level3.unity\");\n    sceneNames.Add(\"Assets/GameFramework/Scenes/Level4.unity\");\n    sceneNames.Add(\"Assets/GameFramework/Scenes/Level5.unity\");\n    sceneNames.Add(\"Assets/GameFramework/Scenes/Level6.unity\");\n    sceneNames.Add(\"Assets/GameFramework/Scenes/Level7.unity\");\n    sceneNames.Add(\"Assets/GameFramework/Scenes/Level8.unity\");\n    sceneNames.Add(\"Assets/GameFramework/Scenes/Level9.unity\");\n    sceneNames.Add(\"Assets/GameFramework/Scenes/Level10.unity\");\n    sceneNames.Add(\"Assets/GameFramework/Scenes/Level11.unity\");\n    sceneNames.Add(\"Assets/GameFramework/Scenes/Level12.unity\");\n    sceneNames.Add(\"Assets/GameFramework/Scenes/Level13.unity\");\n    sceneNames.Add(\"Assets/GameFramework/Scenes/Level14.unity\");\n    sceneNames.Add(\"Assets/GameFramework/Scenes/Level15.unity\");\n    sceneNames.Add(\"Assets/GameFramework/Scenes/Level16.unity\");\n    sceneNames.Add(\"Assets/GameFramework/Scenes/Level17.unity\");\n    sceneNames.Add(\"Assets/GameFramework/Scenes/Level18.unity\");\n    sceneNames.Add(\"Assets/GameFramework/Scenes/Level19.unity\");\n    sceneNames.", "CodeBleu_score": 23.56478770895052}, {"code": "public static void DefaultScenes(){\n\t    HashSet<string> sceneNames = new HashSet<string>() {\n        \"Assets/Scenes/MainMenu.unity\",\n        \"Assets/Scenes/MainGame.unity\",\n        \"Assets/Scenes/GameOver.unity\",\n        \"Assets/Scenes/Victory.unity\",\n        \"Assets/Scenes/Game.unity\"\n    };\n\n    List<EditorBuildSettingsScene> scenes = new List<EditorBuildSettingsScene>();\n\n    foreach (string scene in sceneNames) {\n        scenes.Add(new EditorBuildSettingsScene(scene, true));\n    }\n\n    EditorBuildSettings.scenes = scenes.ToArray();\n    Debug.Log(\"Scenes set to default\");\n}", "CodeBleu_score": 58.03008395917363}, {"code": "public static void DefaultScenes(){\n\t    HashSet<string> sceneNames = new HashSet<string>() {\n        \"Assets/GameFramework/Scenes/Main.unity\",\n        \"Assets/GameFramework/Scenes/Menu.unity\",\n        \"Assets/GameFramework/Scenes/Settings.unity\",\n        \"Assets/GameFramework/Scenes/GameOver.unity\",\n        \"Assets/GameFramework/Scenes/Credits.unity\",\n        \"Assets/GameFramework/Scenes/Pause.unity\"\n    };\n\n    List<EditorBuildSettingsScene> scenes = new List<EditorBuildSettingsScene>();\n\n    foreach (string sceneName in sceneNames) {\n        scenes.Add(new EditorBuildSettingsScene(sceneName, true));\n    }\n\n    EditorBuildSettings.scenes = scenes.ToArray();\n\n    Debug.Log(\"Scenes have been set to default.\");\n}", "CodeBleu_score": 58.666042214011206}]}
{"instance_id": "e199f1a42526", "generation_result": [{"code": "public void Draw(){\n\t    if (m_HelperTypeNames == null) {\n        m_HelperTypeNames = new List<string>();\n        m_HelperTypeNames.Add(\"<None>\");\n        m_HelperTypeNames.AddRange(GetHelperTypeNames());\n    }\n\n    int selectedIndex = 0;\n    if (m_SelectedHelperType != null) {\n        selectedIndex = m_HelperTypeNames.IndexOf(m_SelectedHelperType.FullName);\n        if (selectedIndex < 0) {\n            selectedIndex = 0;\n        }\n    }\n\n    int newSelectedIndex = EditorGUILayout.Popup(\"Helper Class\", selectedIndex, m_HelperTypeNames.ToArray());\n    if (newSelectedIndex != selectedIndex) {\n        m_SelectedHelperType = newSelectedIndex <= 0 ? null : GetHelperType(m_HelperTypeNames[newSelectedIndex]);\n        if (m_SelectedHelperType == null) {\n            m_CustomHelper = null;\n        }\n    }\n\n    if (m_SelectedHelperType == null) {\n        m_CustomHelper = (HelperBase)EditorGUILayout.ObjectField(\"Custom Helper\", m_CustomHelper, typeof(HelperBase), true);\n        if (m_CustomHelper == null) {\n            EditorGUILayout.HelpBox(\"Custom helper is not set.\", MessageType.Error);\n        }\n    }\n}", "CodeBleu_score": 38.55363501441387}, {"code": "public void Draw(){\n\t    EditorGUI.BeginChangeCheck();\n\n    // Get the current selected helper type.\n    int selectedHelperTypeIndex = EditorGUILayout.Popup(\"Helper Type\", _selectedHelperTypeIndex, _helperTypeNames);\n\n    // If the selected helper type has changed, update the selected index.\n    if (EditorGUI.EndChangeCheck()) {\n        _selectedHelperTypeIndex = selectedHelperTypeIndex;\n    }\n\n    // If a helper type is selected, display a field for the helper.\n    if (_selectedHelperTypeIndex > 0) {\n        // Get the selected helper type.\n        Type selectedHelperType = _helperTypes[_selectedHelperTypeIndex - 1];\n\n        // Get the current helper.\n        object currentHelper = _helperProperty.objectReferenceValue;\n\n        // If the current helper is not set or is not of the selected helper type, create a new helper.\n        if (currentHelper == null || currentHelper.GetType() != selectedHelperType) {\n            currentHelper = Activator.CreateInstance(selectedHelperType);\n        }\n\n        // Display a field for the helper.\n        EditorGUILayout.ObjectField(\"Helper\", currentHelper, selectedHelperType, false);\n\n        // If the helper has changed, update the helper property.\n        if (currentHelper != _helperProperty.objectReferenceValue) {\n            _helperProperty.objectReferenceValue = currentHelper;\n        }\n    }\n    // If no helper type is selected, display a field for a custom helper.\n    else {\n        // Display a field for the custom helper.\n        EditorGUILayout.PropertyField(_helperProperty);\n\n        // If the custom helper is not set, display an error message.\n        if (_helperProperty.objectReferenceValue == null) {\n            EditorGUILayout.HelpBox(\"Custom helper is not set.\", MessageType.Error);\n        }\n    }\n}", "CodeBleu_score": 37.586541728459935}, {"code": "public void Draw(){\n\t    EditorGUILayout.BeginHorizontal();\n\n    if (m_SelectedIndex < 0) {\n        m_SelectedIndex = 0;\n    }\n\n    if (m_SelectedIndex >= m_HelperTypes.Count) {\n        m_SelectedIndex = m_HelperTypes.Count - 1;\n    }\n\n    int selectedIndex = EditorGUILayout.Popup(m_SelectedIndex, m_HelperTypeNames.ToArray());\n\n    if (selectedIndex != m_SelectedIndex) {\n        m_SelectedIndex = selectedIndex;\n        m_SelectedHelperType = m_HelperTypes[m_SelectedIndex];\n        m_SelectedHelperTypeFullName = m_HelperTypeFullNames[m_SelectedIndex];\n        m_SelectedHelperTypeAssembly = m_HelperTypeAssemblies[m_SelectedIndex];\n        m_SelectedHelperTypeName = m_HelperTypeNames[m_SelectedIndex];\n    }\n\n    if (m_SelectedIndex <= 0) {\n        m_CustomHelper = (HelperBase)EditorGUILayout.ObjectField(m_CustomHelper, typeof(HelperBase), false);\n\n        if (m_CustomHelper == null) {\n            EditorGUILayout.HelpBox(\"A custom helper is required.\", MessageType.Error);\n        }\n    }\n\n    EditorGUILayout.EndHorizontal();\n}", "CodeBleu_score": 42.115389061054465}]}
{"instance_id": "957e0aaa6f72", "generation_result": [{"code": "public static void DisableAllLogs(){\n\t\tRemoveLoggingSymbols();\n\tRemoveSpecificLoggingSymbols();\n}", "CodeBleu_score": 3.1640567841979688}, {"code": "public static void DisableAllLogs(){\n\t\tRemoveLoggingSymbol(\"LOGGING\");\n\tRemoveLoggingSymbol(\"LOG_INFO\");\n\tRemoveLoggingSymbol(\"LOG_WARNING\");\n\tRemoveLoggingSymbol(\"LOG_ERROR\");\n}", "CodeBleu_score": 11.671755922995205}, {"code": "public static void DisableAllLogs(){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "CodeBleu_score": 2.9649991162360623}]}
{"instance_id": "8a544c3d9513", "generation_result": [{"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t    if (type == null) {\n        throw new GameFrameworkException(\"Type is invalid.\");\n    }\n\n    if (!type.IsSubclassOf(typeof(GameFrameworkComponent))) {\n        throw new GameFrameworkException(StringUtils.Format(\"Type '{}' is not a subclass of GameFrameworkComponent.\", type.FullName));\n    }\n\n    GameFrameworkComponent gameFrameworkComponent = s_GameFrameworkComponents.Find((c) => c.GetType() == type);\n    if (gameFrameworkComponent == null) {\n        throw new GameFrameworkException(StringUtils.Format(\"Game Framework component '{}' is not attached.\", type.FullName));\n    }\n\n    return gameFrameworkComponent;\n}", "CodeBleu_score": 30.553154731148773}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t    GameFrameworkComponent component = null\n    if (s_Components != null) {\n        for (int i = 0; i < s_Components.Count; i++) {\n            if (s_Components[i].GetType() == type) {\n                component = s_Components[i]\n                break\n            }\n        }\n    }\n    return component\n}", "CodeBleu_score": 36.401388327211066}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\treturn GameFrameworkComponent.GetComponent(type);\n}", "CodeBleu_score": 7.491926230549932}]}
{"instance_id": "ec304512c0e4", "generation_result": [{"code": "public static void Shutdown(ShutdownType shutdownType){\n\t    Log.Info(\"Shutdown Game Framework ({0})...\", shutdownType.ToString());\n\n    BaseComponent baseComponent = GameEntry.GetComponent<BaseComponent>();\n    if (baseComponent != null) {\n        baseComponent.Shutdown();\n    }\n\n    GameEntry.Shutdown();\n\n    if (shutdownType == ShutdownType.Restart) {\n        SceneManager.LoadScene(SceneManager.GetActiveScene().name);\n    } else if (shutdownType == ShutdownType.Quit) {\n        Application.Quit();\n    }\n}", "CodeBleu_score": 37.36559896011862}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t    Log.Info(\"Shutdown Game Framework ({0})...\", shutdownType.ToString());\n\n    BaseComponent baseComponent = GameEntry.GetComponent<BaseComponent>();\n    if (baseComponent != null) {\n        baseComponent.Shutdown();\n    }\n\n    GameEntry.Shutdown();\n\n    if (shutdownType == ShutdownType.Restart) {\n        SceneManager.LoadScene(SceneManager.GetActiveScene().name);\n    }\n    else if (shutdownType == ShutdownType.Quit) {\n        Application.Quit();\n    }\n}", "CodeBleu_score": 37.58849514146537}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t    Log.Info(\"Shutdown Game Framework ({0})...\", shutdownType.ToString());\n\n    BaseComponent baseComponent = GameEntry.GetComponent<BaseComponent>();\n    if (baseComponent != null) {\n        baseComponent.Shutdown();\n    }\n\n    Clear();\n\n    if (shutdownType == ShutdownType.Restart) {\n        SceneManager.LoadScene(SceneManager.GetActiveScene().name);\n    } else if (shutdownType == ShutdownType.Quit) {\n        Application.Quit();\n    }\n}", "CodeBleu_score": 34.38316229114437}]}
{"instance_id": "5c78a1d4f59d", "generation_result": [{"code": "protected override void Awake(){\n\t    base.Awake();\n\n    // Obtain the configuration manager from the GameFrameworkEntry module.\n    m_ConfigManager = GameFrameworkEntry.GetModule<IConfigManager>();\n    if (m_ConfigManager == null) {\n        Log.Fatal(\"Config manager is invalid.\");\n        return;\n    }\n\n    // Subscribe to events for reading data success and failure.\n    m_ConfigManager.ReadDataSuccess += OnReadDataSuccess;\n    m_ConfigManager.ReadDataFailure += OnReadDataFailure;\n\n    // Subscribe to events for updating and dependency asset events based on specific flags.\n    if ((m_Flags & ConfigFlags.UpdateConfig) != 0) {\n        m_ConfigManager.UpdateConfigSuccess += OnUpdateConfigSuccess;\n        m_ConfigManager.UpdateConfigFailure += OnUpdateConfigFailure;\n    }\n\n    if ((m_Flags & ConfigFlags.UpdateConfigDependencyAsset) != 0) {\n        m_ConfigManager.UpdateConfigDependencyAssetComplete += OnUpdateConfigDependencyAssetComplete;\n    }\n}", "CodeBleu_score": 74.25394132563515}, {"code": "protected override void Awake(){\n\t    base.Awake();\n\n    m_ConfigManager = GameFrameworkEntry.GetModule<IConfigManager>();\n    if (m_ConfigManager == null) {\n        Log.Fatal(\"Config manager is invalid.\");\n        return;\n    }\n\n    m_ConfigManager.ReadDataSuccess += OnReadDataSuccess;\n    m_ConfigManager.ReadDataFailure += OnReadDataFailure;\n    m_ConfigManager.ReadDataUpdateSuccess += OnReadDataUpdateSuccess;\n    m_ConfigManager.ReadDataUpdateFailure += OnReadDataUpdateFailure;\n    m_ConfigManager.ReadDataDependencyAsset += OnReadDataDependencyAsset;\n}", "CodeBleu_score": 81.57833753891795}, {"code": "protected override void Awake(){\n\t    base.Awake();\n\n    m_ConfigManager = GameFrameworkEntry.GetModule<IConfigManager>();\n    if (m_ConfigManager == null) {\n        Log.Fatal(\"Config manager is invalid.\");\n        return;\n    }\n\n    m_ConfigManager.ReadDataSuccess += OnReadDataSuccess;\n    m_ConfigManager.ReadDataFailure += OnReadDataFailure;\n    if ((m_LoadType & LoadType.Update) != 0) {\n        m_ConfigManager.UpdateDataSuccess += OnUpdateDataSuccess;\n        m_ConfigManager.UpdateDataFailure += OnUpdateDataFailure;\n    }\n\n    if ((m_LoadType & LoadType.DependencyAsset) != 0) {\n        m_ConfigManager.LoadAssetSuccess += OnLoadAssetSuccess;\n        m_ConfigManager.LoadAssetFailure += OnLoadAssetFailure;\n        m_ConfigManager.LoadAssetUpdateSuccess += OnLoadAssetUpdateSuccess;\n        m_ConfigManager.LoadAssetUpdateFailure += OnLoadAssetUpdateFailure;\n    }\n}", "CodeBleu_score": 69.81235498929063}]}
{"instance_id": "fbb36ff9d552", "generation_result": [{"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t    TextAsset configTextAsset = configAsset as TextAsset;\n    if (configTextAsset == null) {\n        Log.Warning(\"Config asset '{0}' is invalid.\", configAssetName);\n        return false;\n    }\n\n    bool retVal = false;\n    if (configAssetName.EndsWith(\".xml\", StringComparison.OrdinalIgnoreCase)) {\n        retVal = configManager.ParseXml(configTextAsset.text);\n    } else if (configAssetName.EndsWith(\".json\", StringComparison.OrdinalIgnoreCase)) {\n        retVal = configManager.ParseJson(configTextAsset.text);\n    } else {\n        Log.Warning(\"Config asset '{0}' is invalid.\", configAssetName);\n        return false;\n    }\n\n    return retVal;\n}", "CodeBleu_score": 65.55374193815508}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t    TextAsset configTextAsset = configAsset as TextAsset;\n    if (configTextAsset == null) {\n        Log.Warning(\"Config asset '{0}' is invalid.\", configAssetName);\n        return false;\n    }\n\n    string configText = configTextAsset.text;\n    if (string.IsNullOrEmpty(configText)) {\n        Log.Warning(\"Config asset '{0}' is invalid.\", configAssetName);\n        return false;\n    }\n\n    if (configAssetName.EndsWith(\".xml\", StringComparison.Ordinal)) {\n        return configManager.ParseXml(configAssetName, configText);\n    } else {\n        return configManager.ParseText(configAssetName, configText);\n    }\n}", "CodeBleu_score": 67.96543723616321}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t    TextAsset configTextAsset = configAsset as TextAsset;\n    if (configTextAsset == null) {\n        Log.Warning(\"Config asset '{0}' is invalid.\", configAssetName);\n        return false;\n    }\n\n    if (configAssetName.EndsWith(\".xml\", StringComparison.OrdinalIgnoreCase)) {\n        return configManager.ParseXml(configAssetName, configTextAsset.text);\n    } else if (configAssetName.EndsWith(\".json\", StringComparison.OrdinalIgnoreCase)) {\n        return configManager.ParseJson(configAssetName, configTextAsset.text);\n    } else {\n        Log.Warning(\"Config asset '{0}' is invalid.\", configAssetName);\n        return false;\n    }\n}", "CodeBleu_score": 67.17498747738979}]}
{"instance_id": "84d744c480ca", "generation_result": [{"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t    MemoryStream memoryStream = null;\n    BinaryReader binaryReader = null;\n    try {\n        memoryStream = new MemoryStream(configBytes, startIndex, length, false);\n        binaryReader = new BinaryReader(memoryStream, Encoding.UTF8);\n\n        while (binaryReader.BaseStream.Position < binaryReader.BaseStream.Length) {\n            string configName = binaryReader.ReadString();\n            string configValue = binaryReader.ReadString();\n\n            if (!configManager.AddConfig(configName, configValue)) {\n                Log.Warning(\"Config '{0}' is invalid or duplicate.\", configName);\n                return false;\n            }\n        }\n\n        return true;\n    } catch (Exception exception) {\n        Log.Warning(\"Can not parse config with exception '{0}'.\", exception.ToString());\n        return false;\n    } finally {\n        if (binaryReader != null) {\n            binaryReader.Dispose();\n            binaryReader = null;\n        }\n\n        if (memoryStream != null) {\n            memoryStream.Dispose();\n            memoryStream = null;\n        }\n    }\n}", "CodeBleu_score": 63.11142522828814}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t\tif (configManager == null) {\n\t\tLog.Warning (\"Config manager is invalid.\");\n\t\treturn false;\n\t}\n\n\tif (configBytes == null || configBytes.Length <= 0) {\n\t\tLog.Warning (\"Config bytes is invalid.\");\n\t\treturn false;\n\t}\n\n\tif (startIndex < 0 || startIndex >= configBytes.Length) {\n\t\tLog.Warning (\"Start index '{0}' is invalid.\", startIndex.ToString ());\n\t\treturn false;\n\t}\n\n\tif (length <= 0 || length > configBytes.Length - startIndex) {\n\t\tLog.Warning (\"Length '{0}' is invalid.\", length.ToString ());\n\t\treturn false;\n\t}\n\n\tMemoryStream memoryStream = null;\n\tBinaryReader binaryReader = null;\n\ttry {\n\t\tmemoryStream = new MemoryStream (configBytes, startIndex, length, false);\n\t\tbinaryReader = new BinaryReader (memoryStream, Encoding.UTF8);\n\t\twhile (binaryReader.BaseStream.Position < binaryReader.BaseStream.Length) {\n\t\t\tstring configName = binaryReader.ReadString ();\n\t\t\tstring configValue = binaryReader.ReadString ();\n\t\t\tif (!configManager.HasConfig (configName)) {\n\t\t\t\tconfigManager.AddConfig (configName, configValue);\n\t\t\t} else {\n\t\t\t\tLog.Warning (\"Config '{0}' is already exist.\", configName);\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t} catch (Exception exception) {\n\t\tLog.Warning (\"Can not parse config with exception '{0}'.\", exception.ToString ());\n\t\treturn false;\n\t} finally {\n\t\tif (binaryReader != null) {\n\t\t\tbinaryReader.Dispose ();\n\t\t\tbinaryReader = null;\n\t\t}\n\n\t\tif (memoryStream != null) {\n\t\t\tmemoryStream.Dispose ();\n\t\t\tmemoryStream = null;\n\t\t}\n\t}\n}", "CodeBleu_score": 54.68591507690945}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t    MemoryStream memoryStream = null;\n    BinaryReader binaryReader = null;\n    try {\n        memoryStream = new MemoryStream(configBytes, startIndex, length, false);\n        binaryReader = new BinaryReader(memoryStream, Encoding.UTF8);\n        string configName = binaryReader.ReadString();\n        int configValueCount = binaryReader.ReadInt32();\n        for (int i = 0; i < configValueCount; i++) {\n            string configValueName = binaryReader.ReadString();\n            Type configValueType = (Type) binaryReader.ReadInt32();\n            object configValueObject = null;\n            switch (configValueType) {\n                case typeof(bool):\n                    configValueObject = binaryReader.ReadBoolean();\n                    break;\n                case typeof(int):\n                    configValueObject = binaryReader.ReadInt32();\n                    break;\n                case typeof(float):\n                    configValueObject = binaryReader.ReadSingle();\n                    break;\n                case typeof(string):\n                    configValueObject = binaryReader.ReadString();\n                    break;\n                default:\n                    throw new GameFrameworkException(Utility.Text.Format(\"Config value type '{0}' is not supported.\", configValueType.FullName));\n            }\n            if (!configManager.HasConfig(configName)) {\n                configManager.AddConfig(configName);\n            }\n            IConfig config = configManager.GetConfig(configName);\n            if (config.HasValue(configValueName)) {\n                Log.Warning(\"Config '{0}' value '{1}' is already exist.\", configName, configValueName);\n                continue;\n            }\n            config.SetValue(configValueName, configValueObject);\n        }\n        return true;\n    } catch (Exception exception) {\n        Log.Warning(\"Parse config failure with exception '{0}'.\", exception.ToString());\n        return false;\n    } finally {\n        if (binaryReader != null) {\n            binaryReader.Dispose();\n            binaryReader = null;\n        }\n        if (memoryStream != null) {\n            memoryStream.Dispose();\n            memoryStream = null;\n        }\n    }\n}", "CodeBleu_score": 41.86227138922544}]}
{"instance_id": "298bb6fa19a4", "generation_result": [{"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t    ResourceComponent resourceComponent = GameEntry.GetComponent<ResourceComponent>();\n    if (resourceComponent == null) {\n        throw new GameFrameworkException(\"Resource component is invalid.\");\n    }\n\n    resourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 38.048643107485326}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t    ResourceComponent resourceComponent = GameEntry.GetComponent<ResourceComponent>();\n    if (resourceComponent == null) {\n        throw new GameFrameworkException(\"Resource component is invalid.\");\n    }\n\n    resourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 38.048643107485326}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t    if (configAsset == null) {\n        throw new GameFrameworkException(\"Config asset is invalid.\");\n    }\n\n    ResourceComponent resourceComponent = GameEntry.GetComponent<ResourceComponent>();\n    if (resourceComponent == null) {\n        throw new GameFrameworkException(\"Resource component is invalid.\");\n    }\n\n    resourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 49.159692911849454}]}
{"instance_id": "fa2003d95e36", "generation_result": [{"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t        GameFrameworkLog.Debug(\"Active scene changed from '{0}' to '{1}'.\", lastActiveScene.name, activeScene.name);\n        GameFrameworkLog.Debug(\"Active scene handle '{0}' to '{1}'.\", lastActiveScene.handle, activeScene.handle);\n        GameFrameworkLog.Debug(\"Active scene path '{0}' to '{1}'.\", lastActiveScene.path, activeScene.path);\n        GameFrameworkLog.Debug(\"Active scene build index '{0}' to '{1}'.\", lastActiveScene.buildIndex, activeScene.buildIndex);\n        GameFrameworkLog.Debug(\"Active scene is dirty '{0}' to '{1}'.\", lastActiveScene.isDirty, activeScene.isDirty);\n        GameFrameworkLog.Debug(\"Active scene is loaded '{0}' to '{1}'.\", lastActiveScene.isLoaded, activeScene.isLoaded);\n        GameFrameworkLog.Debug(\"Active scene root count '{0}' to '{1}'.\", lastActiveScene.rootCount, activeScene.rootCount);\n        GameFrameworkLog.Debug(\"Active scene is valid '{0}' to '{1}'.\", lastActiveScene.IsValid(), activeScene.IsValid());\n\n        ActiveSceneChangedEventArgs e = ReferencePool.Acquire<ActiveSceneChangedEventArgs>();\n        e.LastActiveScene = lastActiveScene;\n        e.ActiveScene = activeScene;\n        return e;\n    }", "CodeBleu_score": 45.40795260837187}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t    ActiveSceneChangedEventArgs e = ReferencePool.Acquire<ActiveSceneChangedEventArgs>();\n    e.LastActiveScene = lastActiveScene;\n    e.ActiveScene = activeScene;\n    return e;\n}", "CodeBleu_score": 49.69786515416073}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t        GameFrameworkLog.Debug(\"ActiveSceneChangedEventArgs Create\");\n        ActiveSceneChangedEventArgs e = ReferencePool.Acquire<ActiveSceneChangedEventArgs>();\n        e.lastActiveScene = lastActiveScene;\n        e.activeScene = activeScene;\n        return e;\n    }", "CodeBleu_score": 49.39594697030669}]}
{"instance_id": "aba13f34251c", "generation_result": [{"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t    if (string.IsNullOrEmpty(sceneAssetName)) {\n        Log.Error(\"Scene asset name is invalid.\");\n        return;\n    }\n\n    if (!sceneAssetName.StartsWith(\"Assets/\") || !sceneAssetName.EndsWith(\".unity\")) {\n        Log.Error(\"Scene asset name '{0}' is invalid.\", sceneAssetName);\n        return;\n    }\n\n    m_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 78.16360028182145}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t    if (string.IsNullOrEmpty(sceneAssetName)) {\n        Log.Error(\"Scene asset name is invalid.\");\n        return;\n    }\n\n    if (!sceneAssetName.StartsWith(\"Assets/\", StringComparison.Ordinal) || !sceneAssetName.EndsWith(\".unity\", StringComparison.Ordinal)) {\n        Log.Error(\"Scene asset name '{0}' is invalid.\", sceneAssetName);\n        return;\n    }\n\n    m_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 97.978570139059}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t    if (string.IsNullOrEmpty(sceneAssetName)) {\n        Log.Error(\"Scene asset name is invalid.\");\n        return;\n    }\n    if (!sceneAssetName.StartsWith(\"Assets/\", StringComparison.Ordinal)) {\n        Log.Error(\"Scene asset name '{0}' is invalid.\", sceneAssetName);\n        return;\n    }\n    if (!sceneAssetName.EndsWith(\".unity\", StringComparison.Ordinal)) {\n        Log.Error(\"Scene asset name '{0}' is invalid.\", sceneAssetName);\n        return;\n    }\n\n    SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 85.10315456701669}]}
{"instance_id": "3fe99fba3ce8", "generation_result": [{"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\t\n\t// Retrieve registered feature implementations\n\tfor (const auto& feature : IModularFeatures::Get().GetModularFeatureImplementations<IBinariesPatchFeature>(IBinariesPatchFeature::GetModularFeatureName())) {\n\t\t\n\t\t// Append feature implementation name to enumeration\n\t\tBinariesPatchFeature = feature.Key;\n\t\t\n\t}\n\t\n\t// Register callback for when modular features are registered\n\tIModularFeatures::Get().OnModularFeatureRegistered().AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n\t\n\t// Register callback for when modular features are unregistered\n\tIModularFeatures::Get().OnModularFeatureUnregistered().AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n\t\n}", "CodeBleu_score": 47.414843941550004}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\t// Register the binaries patch feature module as a modular feature\n\tIModularFeatures::Get().RegisterModularFeature(BINARIES_PATCH_FEATURE_NAME, this);\n\n\t// Register a callback for when a modular feature is registered\n\tFModularFeatures::Get().OnModularFeatureRegistered().AddLambda([this](const FName& ModularFeatureName, const FModularFeature& ModularFeature) {\n\t\t// If the modular feature that was registered is a binaries patch feature\n\t\tif (ModularFeatureName == BINARIES_PATCH_FEATURE_NAME) {\n\t\t\t// Register the binaries patch feature implementation\n\t\t\tRegisterBinariesPatchFeature(ModularFeature.GetFeatureImplementation<IBinariesPatchFeature>());\n\t\t}\n\t});\n\n\t// Register a callback for when a modular feature is unregistered\n\tFModularFeatures::Get().OnModularFeatureUnregistered().AddLambda([this](const FName& ModularFeatureName, const FModularFeature& ModularFeature) {\n\t\t// If the modular feature that was unregistered is a binaries patch feature\n\t\tif (ModularFeatureName == BINARIES_PATCH_FEATURE_NAME) {\n\t\t\t// Unregister the binaries patch feature implementation\n\t\t\tUnregisterBinariesPatchFeature(ModularFeature.GetFeatureImplementation<IBinariesPatchFeature>());\n\t\t}\n\t});\n}", "CodeBleu_score": 50.691244671944716}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\tIModularFeatures::Get().OnModularFeatureRegistered().AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n\tIModularFeatures::Get().OnModularFeatureUnregistered().AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n\n\tfor (const auto& feature : IModularFeatures::Get().GetModularFeatureImplementations<IBinariesPatchFeature>(IBinariesPatchFeature::GetModularFeatureName())) {\n\t\tRegisteredBinariesPatchFeatures.Add(feature->GetFeatureName());\n\t}\n}", "CodeBleu_score": 45.018381835046675}]}
{"instance_id": "c702cc0f74b5", "generation_result": [{"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> result;\n\tTMap<FString, FString> KeyValues = THotPatcherTemplateHelper::GetCommandLineParamsMap(Commandline);\n\tif (KeyValues.Contains(Token))\n\t{\n\t\tFString Value = *KeyValues.Find(Token);\n\t\tTArray<FString> Parsed;\n\t\tValue.ParseIntoArray(Parsed, TEXT(\",\"), true);\n\t\tresult = Parsed;\n\t}\n\treturn result;\n}", "CodeBleu_score": 77.38284547847634}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> result;\n\tTMap<FString, FString> KeyValues = THotPatcherTemplateHelper::GetCommandLineParamsMap(Commandline);\n\tif (KeyValues.Contains(Token))\n\t{\n\t\tFString Value = *KeyValues.Find(Token);\n\t\tValue.ParseIntoArray(result, TEXT(\",\"), true);\n\t}\n\treturn result;\n}", "CodeBleu_score": 79.71153495014408}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> result;\n\tTMap<FString, FString> KeyValues;\n\tTArray<FString> Switches;\n\tTMap<FString, FString> Parameters;\n\tUFlibPatchParserHelper::ParserCommandLine(Commandline, KeyValues, Switches, Parameters);\n\tif (KeyValues.Contains(Token))\n\t{\n\t\tFString Value = *KeyValues.Find(Token);\n\t\tValue.ParseIntoArray(result, TEXT(\",\"), true);\n\t}\n\treturn result;\n}", "CodeBleu_score": 67.41671694122205}]}
{"instance_id": "6a6382275b1d", "generation_result": [{"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\tbool bIsCookCommandlet = false;\n\tif (IsRunningCommandlet()) {\n\t\tFString CommandletName = GetCommandletName();\n\t\tif (!CommandletName.IsEmpty()) {\n\t\t\tif (CommandletName.Contains(\"cook\", ESearchCase::IgnoreCase)) {\n\t\t\t\tbIsCookCommandlet = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn bIsCookCommandlet;\n}", "CodeBleu_score": 43.76768802639827}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\tif (IsRunningCommandlet()) {\n\t\tFString CommandletName = GetCommandletName();\n\t\tif (CommandletName.Len() > 0) {\n\t\t\treturn CommandletName.Contains(\"cook\", ESearchCase::IgnoreCase);\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 21.434693341565204}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\tif (IsRunningCommandlet()) {\n\t\tFString CommandletName = GetCommandletName();\n\t\tif (!CommandletName.IsEmpty()) {\n\t\t\tif (CommandletName.Contains(\"cook\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 22.695940158323662}]}
{"instance_id": "6888ed47b6be", "generation_result": [{"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t\n\t// Extract the commandlet name from the command line\n\tFString CommandletName = GetCommandletInfoName();\n\n\t// Check if serverless counting is enabled in the settings\n\tif (GetDefault<UHotPatcherSettings>()->bEnableServerlessCounter) {\n\t\t// Initialize the counter with server request and project information\n\t\tFServerlessCounter Counter;\n\t\tCounter.Init(GetDefault<UHotPatcherSettings>()->ServerlessCounterServerRequest, GetDefault<UHotPatcherSettings>()->ServerlessCounterProjectInfo);\n\n\t\t// Modify the project name to include the commandlet name if applicable\n\t\tif (!CommandletName.IsEmpty()) {\n\t\t\tCounter.SetProjectName(Counter.GetProjectName() + \"_\" + CommandletName);\n\t\t}\n\n\t\t// Process the counter\n\t\tCounter.Process();\n\t}\n\n\t// Call the parent implementation\n\tUCommandlet::Update(Params);\n}", "CodeBleu_score": 35.65621124458549}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t\n\tFString CommandLine = Params;\n\t// \u83b7\u53d6\u547d\u4ee4\u884c\u53c2\u6570\n\tTArray<FString> Tokens;\n\tTArray<FString> Switches;\n\tTMap<FString, FString> ParamVals;\n\tUCommandlet::ParseCommandLine(*CommandLine, Tokens, Switches, ParamVals);\n\n\t// \u83b7\u53d6\u547d\u4ee4\u884c\u53c2\u6570\n\tTArray<FString> ParsedParams;\n\tUCommandlet::ParseParams(CommandLine, ParsedParams);\n\n\t// \u83b7\u53d6\u547d\u4ee4\u884c\u53c2\u6570\n\tTArray<FString> ParsedSwitches;\n\tUCommandlet::ParseSwitches(CommandLine, ParsedSwitches);\n\n\t// \u83b7\u53d6\u547d\u4ee4\u884c\u53c2\u6570\n\tTMap<FString, FString> ParsedParamVals;\n\tUCommandlet::ParseParamValues(CommandLine, ParsedParamVals);\n\n\t// \u83b7\u53d6\u547d\u4ee4\u884c\u53c2\u6570\n\tTArray<FString> ParsedTokens;\n\tUCommandlet::ParseTokens(CommandLine, ParsedTokens);\n\n\t// \u83b7\u53d6\u547d\u4ee4\u884c\u53c2\u6570\n\tTArray<FString> UnparsedTokens;\n\tUCommandlet::GetUnparsedTokens(CommandLine, UnparsedTokens);\n\n\t// \u83b7\u53d6\u547d\u4ee4\u884c\u53c2\u6570\n\tTArray<FString> UnparsedSwitches;\n\tUCommandlet::GetUnparsedSwitches(CommandLine, UnparsedSwitches);\n\n\t// \u83b7\u53d6\u547d\u4ee4\u884c\u53c2\u6570\n\tTMap<FString, FString> UnparsedParamVals;\n\tUCommandlet::GetUnparsedParamValues(CommandLine, UnparsedParamVals);\n\n\t// \u83b7\u53d6\u547d\u4ee4\u884c\u53c2\u6570\n\tTArray<FString> UnparsedParams;\n\tUCommandlet::GetUnparsedParams(CommandLine, UnparsedParams);\n\n\t// \u83b7\u53d6\u547d\u4ee4\u884c\u53c2\u6570\n\tFString ParsedCommandLine;\n\tUCommandlet::GetParsedCommandLine(CommandLine, ParsedCommandLine);\n\n\t// \u83b7\u53d6\u547d\u4ee4\u884c\u53c2\u6570\n\tF", "CodeBleu_score": 26.541609207550803}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t\n\t// This is the commandlet name, extracted from the command line.\n\tFString CommandletName = FString(__FUNCTION__);\n\n\t// This is the project name, extracted from the command line.\n\tFString ProjectName = FString(__FUNCTION__);\n\n\t// This is the project directory, extracted from the command line.\n\tFString ProjectDirectory = FString(__FUNCTION__);\n\n\t// This is the project directory, extracted from the command line.\n\tFString ProjectDirectory = FString(__FUNCTION__);\n\n\t// This is the project directory, extracted from the command line.\n\tFString ProjectDirectory = FString(__FUNCTION__);\n\n\t// This is the project directory, extracted from the command line.\n\tFString ProjectDirectory = FString(__FUNCTION__);\n\n\t// This is the project directory, extracted from the command line.\n\tFString ProjectDirectory = FString(__FUNCTION__);\n\n\t// This is the project directory, extracted from the command line.\n\tFString ProjectDirectory = FString(__FUNCTION__);\n\n\t// This is the project directory, extracted from the command line.\n\tFString ProjectDirectory = FString(__FUNCTION__);\n\n\t// This is the project directory, extracted from the command line.\n\tFString ProjectDirectory = FString(__FUNCTION__);\n\n\t// This is the project directory, extracted from the command line.\n\tFString ProjectDirectory = FString(__FUNCTION__);\n\n\t// This is the project directory, extracted from the command line.\n\tFString ProjectDirectory = FString(__FUNCTION__);\n\n\t// This is the project directory, extracted from the command line.\n\tFString ProjectDirectory = FString(__FUNCTION__);\n\n\t// This is the project directory, extracted from the command line.\n\tFString ProjectDirectory = FString(__FUNCTION__);\n\n\t// This is the project directory, extracted from the command line.\n\tFString ProjectDirectory = FString(__FUNCTION__);\n\n\t// This is the project directory, extracted from the command line.\n\tFString ProjectDirectory = FString(__FUNCTION__);\n\n\t// This is the project directory, extracted from the command line.\n\tFString ProjectDirectory = FString(__FUNCTION__);\n", "CodeBleu_score": 18.609533787059583}]}
{"instance_id": "c467af995f29", "generation_result": [{"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tbool bIsAppleMetalPlatform = false;\n\tif (TargetPlatform) {\n\t\tFString PlatformName = TargetPlatform->PlatformName();\n\t\tbIsAppleMetalPlatform = PlatformName.StartsWith(\"IOS\", ESearchCase::IgnoreCase) ||\n\t\t\tPlatformName.StartsWith(\"Mac\", ESearchCase::IgnoreCase) ||\n\t\t\tPlatformName.StartsWith(\"TVOS\", ESearchCase::IgnoreCase);\n\t}\n\treturn bIsAppleMetalPlatform;\n}", "CodeBleu_score": 38.686910368448814}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tbool bIsAppleMetalPlatform = false;\n\tif (TargetPlatform) {\n\t\tFString PlatformName = TargetPlatform->PlatformName();\n\t\tif (PlatformName.StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) ||\n\t\t\tPlatformName.StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) ||\n\t\t\tPlatformName.StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase)) {\n\t\t\tbIsAppleMetalPlatform = true;\n\t\t}\n\t}\n\treturn bIsAppleMetalPlatform;\n}", "CodeBleu_score": 49.013273450657124}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tbool bIsAppleMetalPlatform = false;\n\tif (TargetPlatform) {\n\t\tFString PlatformName = TargetPlatform->PlatformName();\n\t\tif (PlatformName.StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) ||\n\t\t\tPlatformName.StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) ||\n\t\t\tPlatformName.StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase)) {\n\t\t\tbIsAppleMetalPlatform = true;\n\t\t}\n\t}\n\treturn bIsAppleMetalPlatform;\n}", "CodeBleu_score": 49.013273450657124}]}
{"instance_id": "3df342b1c6f8", "generation_result": [{"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\tUObject* Package = Object->GetOutermost();\n\tif (Package) {\n\t\tif (CookerAssetsSet.Contains(Package)) {\n\t\t\treturn;\n\t\t}\n\t\tif (AllAssetsSet.Contains(Package)) {\n\t\t\tif (Package->HasAnyFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tPackageObjectsMap.FindOrAdd(Package).Add(Object);\n\t\t\tFreezeObjects.Add(Object);\n\t\t\tPackage->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n\t\t}\n\t}\n}", "CodeBleu_score": 43.12881487885753}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\tif (Object->IsA<UPackage>()) {\n\t\tUPackage* Package = const_cast<UPackage*>(Cast<const UPackage>(Object));\n\t\tif (Package->IsValidLowLevel()) {\n\t\t\tif (Package->HasAnyFlags(RF_NeedPostLoad)) {\n\t\t\t\tPackage->ClearFlags(RF_NeedPostLoad);\n\t\t\t}\n\t\t\tif (Package->HasAnyFlags(RF_NeedPostLoadSubobjects)) {\n\t\t\t\tPackage->ClearFlags(RF_NeedPostLoadSubobjects);\n\t\t\t}\n\t\t\tif (Package->HasAnyFlags(RF_WasLoaded)) {\n\t\t\t\tPackage->ClearFlags(RF_WasLoaded);\n\t\t\t}\n\t\t\tif (Package->HasAnyFlags(RF_WasFiltered)) {\n\t\t\t\tPackage->ClearFlags(RF_WasFiltered);\n\t\t\t}\n\t\t\tif (Package->HasAnyFlags(RF_WasLoaded)) {\n\t\t\t\tPackage->ClearFlags(RF_WasLoaded);\n\t\t\t}\n\t\t\tif (Package->HasAnyFlags(RF_WasFiltered)) {\n\t\t\t\tPackage->ClearFlags(RF_WasFiltered);\n\t\t\t}\n\t\t\tif (Package->HasAnyFlags(RF_WasLoaded)) {\n\t\t\t\tPackage->ClearFlags(RF_WasLoaded);\n\t\t\t}\n\t\t\tif (Package->HasAnyFlags(RF_WasFiltered)) {\n\t\t\t\tPackage->ClearFlags(RF_WasFiltered);\n\t\t\t}\n\t\t\tif (Package->HasAnyFlags(RF_WasLoaded)) {\n\t\t\t\tPackage->ClearFlags(RF_WasLoaded);\n\t\t\t}\n\t\t\tif (Package->HasAnyFlags(RF_WasFiltered)) {\n\t\t\t\tPackage->ClearFlags(RF_WasFiltered);\n\t\t\t}\n\t\t\tif (Package->HasAnyFlags(RF_WasLoaded)) {\n\t\t\t\t", "CodeBleu_score": 38.88553533962803}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\t// Ignore objects that are not in a package\n\tif (!Object->GetOutermost())\n\t{\n\t\treturn;\n\t}\n\n\t// If the package is not in CookerAssetsSet but is in AllAssetsSet and does not always require post-load processing,\n\t// add the object to the PackageObjectsMap and FreezeObjects list.\n\tif (!CookerAssetsSet.Contains(Object->GetOutermost()) && AllAssetsSet.Contains(Object->GetOutermost()) && !Object->GetOutermost()->HasAnyFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects))\n\t{\n\t\tPackageObjectsMap.FindOrAdd(Object->GetOutermost()).Add(Object);\n\t\tFreezeObjects.Add(Object);\n\n\t\t// Clear the RF_NeedPostLoad and RF_NeedPostLoadSubobjects flags from the object.\n\t\tObject->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n\t}\n}", "CodeBleu_score": 31.779549538020678}]}
{"instance_id": "fac8b2878c3c", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\tFRecord* BulkDataRecord = Record.GetBulkDataRecord();\n\tif (BulkDataRecord)\n\t{\n\t\tFRecord* ExportRecord = Record.GetExportRecord();\n\t\tif (ExportRecord)\n\t\t{\n\t\t\tFExportBulkDataHeader* ExportBulkDataHeader = (FExportBulkDataHeader*)BulkDataRecord->GetData();\n\t\t\tFExportHeader* ExportHeader = (FExportHeader*)ExportRecord->GetData();\n\n\t\t\tif (ExportBulkDataHeader->BulkDataFlags & BULKDATA_ForceInlinePayload)\n\t\t\t{\n\t\t\t\t// This bulk data is inline, so we don't need to do anything\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tFExportBulkDataHeader* ExportBulkDataHeader = (FExportBulkDataHeader*)BulkDataRecord->GetData();\n\t\t\tFExportHeader* ExportHeader = (FExportHeader*)ExportRecord->GetData();\n\n\t\t\tFExportBulkDataHeader& BulkDataHeader = *ExportBulkDataHeader;\n\n\t\t\t// This is the bulk data for an export, so we need to add it to the export's bulk data list\n\t\t\tFExportBulkData* BulkData = new FExportBulkData(BulkDataRecord->GetData(), BulkDataHeader.BulkDataFlags);\n\t\t\tBulkData->BulkDataOffset = BulkDataHeader.BulkDataOffsetInFile;\n\t\t\tBulkData->BulkDataSize = BulkDataHeader.BulkDataSizeOnDisk;\n\t\t\tBulkData->BulkDataSizeUncompressed = BulkDataHeader.BulkDataSizeUncompressed;\n\t\t\tBulkData->BulkDataSizeOnDisk = BulkDataHeader.BulkDataSizeOnDisk;\n\t\t\tBulkData->BulkDataOffsetInFile = BulkDataHeader.BulkDataOffsetInFile;\n\t\t\tBulkData->BulkDataOffsetInFileUncompressed = BulkDataHeader.BulkDataOffsetInFileUncompressed;\n\t\t\tBulkData->BulkData", "CodeBleu_score": 29.575326926730632}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\t\t// Iterate through each bulk data record in the record.\n\t\tfor (const FRecordBulkData& BulkData : Record.BulkData)\n\t\t{\n\t\t\t// Check the bulk data type.\n\t\t\tswitch (BulkData.Type)\n\t\t\t{\n\t\t\t\t// If the bulk data is appended to exports, add the export buffer to the corresponding export buffer list in the context.\n\t\t\tcase EBulkDataType::Export:\n\t\t\t{\n\t\t\t\tContext.ExportBuffers.Add(BulkData.ExportIndex, BulkData.BulkData);\n\t\t\t}\n\t\t\tbreak;\n\n\t\t\t\t// If the bulk data is a sidecar file, create an output file entry in the context's output files.\n\t\t\tcase EBulkDataType::Sidecar:\n\t\t\t{\n\t\t\t\t// Set the output file's properties.\n\t\t\t\tFOutputFile& OutputFile = Context.OutputFiles.Add(BulkData.BulkData->GetFilename());\n\t\t\t\tOutputFile.Buffer = BulkData.BulkData;\n\t\t\t\tOutputFile.Regions = BulkData.BulkData->GetBulkDataRegions();\n\t\t\t\tOutputFile.Flags = EOutputFileFlags::Sidecar;\n\t\t\t\tOutputFile.HashFlags = EOutputFileHashFlags::IncludeInHash;\n\t\t\t}\n\t\t\tbreak;\n\n\t\t\t\t// If the bulk data is a hash, create an output file entry in the context's output files.\n\t\t\tcase EBulkDataType::Hash:\n\t\t\t{\n\t\t\t\t// Set the output file's properties.\n\t\t\t\tFOutputFile& OutputFile = Context.OutputFiles.Add(BulkData.BulkData->GetFilename());\n\t\t\t\tOutputFile.Buffer = BulkData.BulkData;\n\t\t\t\tOutputFile.Regions = BulkData.BulkData->GetBulkDataRegions();\n\t\t\t\tOutputFile.Flags = EOutputFileFlags::None;\n\t\t\t\tOutputFile.HashFlags = EOutputFileHashFlags", "CodeBleu_score": 45.04160660315346}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\tfor (auto& BulkData : Record.BulkData)\n\t{\n\t\tif (BulkData.BulkDataFlags & BULKDATA_ForceInlinePayload)\n\t\t{\n\t\t\t// We don't need to do anything for inline bulk data.\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (BulkData.BulkDataFlags & BULKDATA_ForceStandalone)\n\t\t{\n\t\t\t// This bulk data should be saved as a standalone file.\n\t\t\tFOutputFile* OutputFile = new FOutputFile(BulkData.Filename, BulkData.BulkDataFlags);\n\t\t\tOutputFile->BulkData = BulkData.Data;\n\t\t\tOutputFile->BulkDataFlags = BulkData.BulkDataFlags;\n\t\t\tOutputFile->BulkDataSizeOnDisk = BulkData.BulkDataSizeOnDisk;\n\t\t\tOutputFile->BulkDataSizeOnDiskWithHeader = BulkData.BulkDataSizeOnDiskWithHeader;\n\t\t\tOutputFile->BulkDataSizeInFile = BulkData.BulkDataSizeInFile;\n\t\t\tOutputFile->BulkDataSizeInFileWithHeader = BulkData.BulkDataSizeInFileWithHeader;\n\t\t\tOutputFile->BulkDataOffsetInFile = BulkData.BulkDataOffsetInFile;\n\t\t\tOutputFile->BulkDataOffsetInFileWithHeader = BulkData.BulkDataOffsetInFileWithHeader;\n\t\t\tOutputFile->BulkDataHeaderSize = BulkData.BulkDataHeaderSize;\n\t\t\tOutputFile->BulkDataSize = BulkData.BulkDataSize;\n\t\t\tOutputFile->BulkDataSizeWithHeader = BulkData.BulkDataSizeWithHeader;\n\t\t\tOutputFile->BulkDataGuid = BulkData.BulkDataGuid;\n\t\t\tOutputFile->BulkDataHash = BulkData.BulkDataHash;\n\t\t\tOutputFile->BulkDataHashWithHeader = BulkData.BulkDataHashWithHeader;\n\t\t\tContext.OutputFiles.Add(OutputFile);\n\t", "CodeBleu_score": 33.79834774369476}]}
{"instance_id": "bf46051105c9", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tif (Context.bIsFooterWritten) {\n\t\treturn;\n\t}\n\tContext.bIsFooterWritten = true;\n\n\tFExportRecord& ExportRecord = Record.ExportRecord;\n\tFExportContext& ExportContext = ExportRecord.ExportContext;\n\n\t// 1. Create a footer buffer\n\tFBufferArchive FooterBuffer;\n\tFPackageFileTag Tag;\n\tTag.Set(ExportContext.Name, ExportContext.Guid, ExportContext.PackageFlags);\n\tTag.Write(FooterBuffer);\n\n\t// 2. Add the footer buffer to each package's export buffers\n\tfor (auto& ExportBuffer : ExportContext.ExportBuffers) {\n\t\tExportBuffer.AddBuffer(FooterBuffer);\n\t}\n}", "CodeBleu_score": 42.52678654284608}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tif (Context.bHasFooter) {\n\t\treturn;\n\t}\n\n\tfor (auto& Export : Record.Exports) {\n\t\tif (!Export.bHasFooter) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tContext.bHasFooter = true;\n\n\tFBufferArchive Archive;\n\tFExportBundleData BundleData;\n\tBundleData.BundleType = EExportBundleDataBundleType::Footer;\n\tBundleData.Serialize(Archive);\n\tContext.FooterBuffer = MoveTemp(Archive);\n\n\tfor (auto& Export : Record.Exports) {\n\t\tExport.ExportBuffers.Add(Context.FooterBuffer);\n\t}\n}", "CodeBleu_score": 44.45531276724856}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tif (Context.bIsFooterWritten) {\n\t\treturn;\n\t}\n\n\tContext.bIsFooterWritten = true;\n\n\t// create a footer buffer with the package file tag\n\tFBufferArchive Footer;\n\tFooter << FPackageFileTag::GetPackageFileTag();\n\n\t// add the footer buffer to each package's export buffers in the context\n\tfor (FPackageRecord& PackageRecord : Context.PackageRecords) {\n\t\tPackageRecord.ExportBuffers.Add(MoveTemp(Footer));\n\t}\n}", "CodeBleu_score": 35.88530165479958}]}
{"instance_id": "c0966eddf1ee", "generation_result": [{"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n\tUGDCharacterMovementComponent * const MMC = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\n\tif (MMC) {\n\t\tbSprinting = MMC->bSprinting;\n\t\tbAimingDownSights = MMC->bAimingDownSights;\n\t}\n}", "CodeBleu_score": 67.35472510194396}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\n\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n\tif (UGDCharacterMovementComponent* const GDCharacterMovement = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement())) {\n\t\tbWantsToSprint = GDCharacterMovement->bWantsToSprint;\n\t\tbWantsToAimDownSights = GDCharacterMovement->bWantsToAimDownSights;\n\t}\n\n}", "CodeBleu_score": 66.75538327106099}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n\tif (UGDCharacterMovementComponent * GDCharacterMovementComponent = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement())) {\n\t\tbSprinting = GDCharacterMovementComponent->bIsSprinting;\n\t\tbAimingDownSights = GDCharacterMovementComponent->bAimingDownSights;\n\t}\n}", "CodeBleu_score": 66.99097234735305}]}
{"instance_id": "f73106356e9d", "generation_result": [{"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\tUAsyncTaskAttributeChanged* ListenForAttributeChange = NewObject<UAsyncTaskAttributeChanged>();\n\tListenForAttributeChange->AbilitySystemComponent = AbilitySystemComponent;\n\tListenForAttributeChange->Attribute = Attribute;\n\tListenForAttributeChange->AttributeChangeDelegate.BindUFunction(ListenForAttributeChange, FName(\"OnAttributeChange\"));\n\tListenForAttributeChange->AttributeChangeDelegateHandle = AbilitySystemComponent->GetGameplayAttributeValueChangeDelegate(Attribute).AddUFunction(ListenForAttributeChange, FName(\"OnAttributeChange\"));\n\tif (ListenForAttributeChange->AttributeChangeDelegateHandle.IsValid()) {\n\t\treturn ListenForAttributeChange;\n\t} else {\n\t\tListenForAttributeChange->EndTask();\n\t\treturn nullptr;\n\t}\n}", "CodeBleu_score": 56.83428576651504}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\n\tif (!IsValid(AbilitySystemComponent)) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"UAsyncTaskAttributeChanged::ListenForAttributeChange: AbilitySystemComponent is null.\"));\n\t\treturn nullptr;\n\t}\n\n\tif (!Attribute.IsValid()) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"UAsyncTaskAttributeChanged::ListenForAttributeChange: Attribute is invalid.\"));\n\t\treturn nullptr;\n\t}\n\n\tUAsyncTaskAttributeChanged* AsyncTask = NewObject<UAsyncTaskAttributeChanged>();\n\tAsyncTask->RegisterWithGameInstance(AbilitySystemComponent->GetWorld());\n\tAsyncTask->Attribute = Attribute;\n\tAsyncTask->AbilitySystemComponent = AbilitySystemComponent;\n\tAsyncTask->AttributeChangeDelegateHandle = AbilitySystemComponent->GetGameplayAttributeValueChangeDelegate(Attribute).AddUObject(AsyncTask, &UAsyncTaskAttributeChanged::OnAttributeChange);\n\n\treturn AsyncTask;\n}", "CodeBleu_score": 55.48939293091133}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\n\tif (!AbilitySystemComponent) {\n\t\treturn nullptr;\n\t}\n\n\tif (!Attribute.IsValid()) {\n\t\treturn nullptr;\n\t}\n\n\tUAsyncTaskAttributeChanged* NewAsyncTask = NewObject<UAsyncTaskAttributeChanged>();\n\tNewAsyncTask->AbilitySystemComponent = AbilitySystemComponent;\n\tNewAsyncTask->Attribute = Attribute;\n\n\tNewAsyncTask->AttributeChangeDelegateHandle = AbilitySystemComponent->GetGameplayAttributeValueChangeDelegate(Attribute).AddUObject(NewAsyncTask, &UAsyncTaskAttributeChanged::OnAttributeChange);\n\n\treturn NewAsyncTask;\n}", "CodeBleu_score": 59.63002993551053}]}
{"instance_id": "a581424c2b31", "generation_result": [{"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (!ASC) return;\n\tASC->OnGameplayEffectAddedDelegate.RemoveDynamic(this, &UAsyncTaskCooldownChanged::OnGameplayEffectAdded);\n\tASC->OnGameplayEffectRemovedDelegate.RemoveDynamic(this, &UAsyncTaskCooldownChanged::OnGameplayEffectRemoved);\n\tASC->OnActiveGameplayEffectsTagCountChangedDelegate.RemoveDynamic(this, &UAsyncTaskCooldownChanged::OnActiveGameplayEffectsTagCountChanged);\n\tbReadyToDestroy = true;\n\tMarkPendingKill();\n}", "CodeBleu_score": 28.74380181793744}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (AbilitySystemComponent.IsValid()) {\n\t\tAbilitySystemComponent->OnGameplayEffectAddedDelegate.RemoveDynamic(this, &UAsyncTaskCooldownChanged::OnGameplayEffectAdded);\n\t\tAbilitySystemComponent->OnGameplayEffectRemovedDelegate.RemoveDynamic(this, &UAsyncTaskCooldownChanged::OnGameplayEffectRemoved);\n\t\tAbilitySystemComponent->OnCooldownTagChangeDelegate.RemoveDynamic(this, &UAsyncTaskCooldownChanged::OnCooldownTagChange);\n\t}\n\tSetReadyToDestroy();\n\tMarkPendingKill();\n}", "CodeBleu_score": 28.265265133447325}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (IsValid(ASC)) {\n\t\tASC->OnGameplayEffectAddedDelegate.Remove(GameplayEffectAddedDelegateHandle);\n\t\tASC->OnGameplayEffectRemovedDelegate.Remove(GameplayEffectRemovedDelegateHandle);\n\t\tASC->OnCooldownTagChangeDelegate.Remove(CooldownTagChangeDelegateHandle);\n\t}\n\tTaskState = EAsyncTaskState::ReadyForDestroy;\n\tbIsGarbage = true;\n}", "CodeBleu_score": 29.67673081433247}]}
{"instance_id": "5029df3a2033", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\n\tif(EffectRemoved.Spec.Def == nullptr) return;\n\n\tif(EffectRemoved.Spec.Def->AssetTags.HasTag(EffectGameplayTag)) {\n\t\tOnEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, -1);\n\t}\n\n\tif(EffectRemoved.Spec.Def->GrantedTags.HasTag(EffectGameplayTag)) {\n\t\tOnEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, -1);\n\t}\n\n}", "CodeBleu_score": 44.7799350554029}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tif (EffectRemoved.Spec.Def == nullptr) { return; }\n\n\tconst FGameplayTagContainer& AssetTags = EffectRemoved.Spec.Def->InheritableOwnedTagsContainer.CombinedTags;\n\tconst FGameplayTagContainer& GrantedTags = EffectRemoved.Spec.CapturedSourceTags.GetAggregatedTags();\n\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tFGameplayTagContainer InstanceTags;\n\t\tEffectRemoved.Spec.CapturedSourceTags.GetAggregatedTags().GetGameplayTagArray(InstanceTags);\n\t\tFGameplayEffectSpecHandle EffectHandle = EffectRemoved.Handle;\n\t\tFGameplayTagContainer SpecAssetTags = EffectRemoved.Spec.Def->InheritableOwnedTagsContainer.CombinedTags;\n\t\tFGameplayTagContainer SpecGrantedTags = EffectRemoved.Spec.CapturedSourceTags.GetAggregatedTags();\n\t\tFGameplayEffectSpec* Spec = EffectRemoved.Spec.Get();\n\t\tFGameplayEffectContextHandle Context = EffectRemoved.Spec->GetContext();\n\t\tFActiveGameplayEffectHandle ActiveHandle = EffectRemoved.Handle;\n\t\tFOnActiveGameplayEffectRemoved::Broadcast(EffectGameplayTag, EffectHandle, EffectRemoved.StackCountChange, InstanceTags, SpecAssetTags, SpecGrantedTags, Spec, Context, ActiveHandle);\n\t}\n}", "CodeBleu_score": 51.60527447948956}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\n\tFGameplayTagContainer AssetTags;\n\tFGameplayTagContainer GrantedTags;\n\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\tif (AssetTags.HasTag(EffectGameplayTag) || GrantedTags.HasTag(EffectGameplayTag)) {\n\n\t\tFEffectStackChangeDetails ChangeDetails;\n\n\t\tChangeDetails.StackChange = -1;\n\t\tChangeDetails.EffectHandle = EffectRemoved.Handle;\n\n\t\tEffectStackChangeEvent.Broadcast(EffectGameplayTag, ChangeDetails);\n\n\t}\n\n}", "CodeBleu_score": 63.76283227883277}]}
{"instance_id": "cb1d2823d203", "generation_result": [{"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\n\tUAsyncTaskEffectStackChanged * NewAsyncTaskEffectStackChanged = NewObject<UAsyncTaskEffectStackChanged>();\n\tNewAsyncTaskEffectStackChanged->EffectGameplayTag = InEffectGameplayTag;\n\tNewAsyncTaskEffectStackChanged->AbilitySystemComponent = AbilitySystemComponent;\n\n\tif (NewAsyncTaskEffectStackChanged->Validate()) {\n\n\t\tNewAsyncTaskEffectStackChanged->AbilitySystemComponent->OnActiveGameplayEffectAddedDelegate.AddUObject(NewAsyncTaskEffectStackChanged, &UAsyncTaskEffectStackChanged::OnActiveGameplayEffectAdded);\n\t\tNewAsyncTaskEffectStackChanged->AbilitySystemComponent->OnActiveGameplayEffectRemovedDelegate.AddUObject(NewAsyncTaskEffectStackChanged, &UAsyncTaskEffectStackChanged::OnActiveGameplayEffectRemoved);\n\n\t} else {\n\n\t\tNewAsyncTaskEffectStackChanged->EndTask();\n\t\treturn nullptr;\n\n\t}\n\n\treturn NewAsyncTaskEffectStackChanged;\n\n}", "CodeBleu_score": 51.65761049831114}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\n\tUAsyncTaskEffectStackChanged * Listener = NewObject<UAsyncTaskEffectStackChanged>();\n\tListener->AbilitySystemComponent = AbilitySystemComponent;\n\tListener->EffectGameplayTag = InEffectGameplayTag;\n\n\tif (!Listener->Validate()) {\n\t\tListener->EndTask();\n\t\treturn nullptr;\n\t}\n\n\tListener->RegisterCallbacks();\n\n\treturn Listener;\n}", "CodeBleu_score": 34.51975901479846}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tUAsyncTaskEffectStackChanged * EffectStackChangedTask = NewObject<UAsyncTaskEffectStackChanged>();\n\n\tif (AbilitySystemComponent) {\n\t\tEffectStackChangedTask->AbilitySystemComponent = AbilitySystemComponent;\n\t}\n\telse {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"AbilitySystemComponent is null.\"));\n\t\treturn nullptr;\n\t}\n\n\tif (InEffectGameplayTag.IsValid()) {\n\t\tEffectStackChangedTask->EffectGameplayTag = InEffectGameplayTag;\n\t}\n\telse {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"EffectGameplayTag is invalid.\"));\n\t\treturn nullptr;\n\t}\n\n\tEffectStackChangedTask->RegisterCallbacks();\n\n\treturn EffectStackChangedTask;\n}", "CodeBleu_score": 46.0997450699049}]}
{"instance_id": "6659c2592e93", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tif (EffectRemoved.Spec.Def->GetAssetTags().HasTag(EffectGameplayTag) || EffectRemoved.Spec.Def->GetGrantedTags().HasTag(EffectGameplayTag)) {\n\t\tFGameplayEffectSpecHandle EffectHandle = EffectRemoved.Handle;\n\t\tFGameplayTag EffectTag = EffectGameplayTag;\n\t\tFGameplayEffectStackChange StackChange = EffectRemoved.GetStackChange();\n\t\tOnStackChange.Broadcast(EffectTag, EffectHandle, StackChange);\n\t}\n}", "CodeBleu_score": 49.155389848718656}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\n\tif (EffectRemoved.Spec.Def->GetAssetTags().HasTag(EffectGameplayTag) || EffectRemoved.Spec.Def->GetGrantedTags().HasTag(EffectGameplayTag))\n\t{\n\t\tOnStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, FGameplayEffectModCallbackData::EModOp::Remove);\n\t}\n}", "CodeBleu_score": 39.827177508603725}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tif (EffectRemoved.Spec.Def) {\n\t\tTArray<FGameplayTag> AssetTags = EffectRemoved.Spec.Def->InheritableGameplayEffectTagsContainer.CombinedTags;\n\t\tTArray<FGameplayTag> GrantedTags = EffectRemoved.Spec.CapturedSourceTags.CombinedTags;\n\t\tif (AssetTags.Contains(EffectGameplayTag) || GrantedTags.Contains(EffectGameplayTag)) {\n\t\t\tFGameplayEffectStackChange StackChange;\n\t\t\tStackChange.EffectHandle = EffectRemoved.Handle;\n\t\t\tStackChange.StackCountChange = -1;\n\t\t\tStackChange.StackCount = 0;\n\t\t\tStackChange.bAdded = false;\n\t\t\tStackChange.bRemoved = true;\n\t\t\tOnEffectStackChange.Broadcast(EffectGameplayTag, StackChange);\n\t\t}\n\t}\n}", "CodeBleu_score": 49.41545649040147}]}
{"instance_id": "a8f7dcc3f1fa", "generation_result": [{"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\n\tSuper::OnAvatarSet(ActorInfo, Spec);\n\n\tif (ActivateAbilityOnGranted) {\n\t\tif (const UAbilitySystemComponent * AbilitySystem = ActorInfo->AbilitySystemComponent.Get()) {\n\t\t\tAbilitySystem->TryActivateAbility(Spec.Handle);\n\t\t}\n\t}\n}", "CodeBleu_score": 71.56035444923667}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t    Super::OnAvatarSet(ActorInfo, Spec);\n\n    if (ActivateAbilityOnGranted) {\n        if (ActorInfo->AbilitySystemComponent.IsValid()) {\n            ActorInfo->AbilitySystemComponent->TryActivateAbility(Spec.Handle);\n        }\n    }\n}", "CodeBleu_score": 72.19606972388075}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\n\tif (ActivateAbilityOnGranted) {\n\t\tActorInfo->AbilitySystemComponent->TryActivateAbility(Spec.Handle);\n\t}\n}", "CodeBleu_score": 78.03507864084543}]}
{"instance_id": "72a7ce4b848c", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tif (!bInterrupted && bBroadcastAnimationEvents) {\n\t\tAbility->BroadcastAbilityTaskDelegates(EAbilityGenericReplicatedEvent::GenericConfirm, FGameplayTag(), FGameplayEventData());\n\t}\n\n\tEndTask();\n}", "CodeBleu_score": 56.10497515538897}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t    if (!bInterrupted && bBroadcastEvent) {\n        AbilitySystemComponent->AbilityTaskDelegates.OnGameplayEventDelegate.Broadcast(EventTag, EventData);\n    }\n\n    EndTask();\n}", "CodeBleu_score": 56.60612271471198}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\n\tif (!bInterrupted && ShouldBroadcastAbilityTaskDelegates()) {\n\t\tOnCompleted.Broadcast(AbilitySystemComponent->GetCurrentGameplayAbility(), AbilitySystemComponent->GetCurrentGameplayAbilitySpecHandle(), GetAnimMontage(), GetEventTag(), GetTriggerEventData());\n\t}\n\n\tEndTask();\n}", "CodeBleu_score": 52.88636167559658}]}
{"instance_id": "cc1cdd579bd4", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\t// If the ability ended normally, stop the montage\n\tif (AbilityEnded && StopMontageOnAbilityEnd) {\n\t\tif (AbilitySystemComponent && AbilitySystemComponent->GetAnimInstance()) {\n\t\t\tAbilitySystemComponent->GetAnimInstance()->Montage_Stop(MontageToPlay, 1.f);\n\t\t}\n\t}\n\n\t// Remove the cancellation handler\n\tif (AbilitySystemComponent) {\n\t\tAbilitySystemComponent->GenericCancelledDelegate.RemoveDynamic(this, &UGDAT_PlayMontageAndWaitForEvent::OnAbilityCancelled);\n\t}\n\n\t// Remove the event tag container delegate\n\tif (AbilitySystemComponent && EventTagContainer.IsValid()) {\n\t\tAbilitySystemComponent->RemoveGameplayTagContainerDelegate(EventTagContainer, EGameplayTagEventType::NewOrRemoved, this, &UGDAT_PlayMontageAndWaitForEvent::OnEventTagChanged);\n\t}\n\n\t// Call the base class's OnDestroy method\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 51.01295157159013}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tif (AbilityEnded) {\n\t\tif (StopPlayingMontage) {\n\t\t\tif (AbilitySystemComponent) {\n\t\t\t\tAbilitySystemComponent->CurrentMontageStop(FOnMontageStop::CreateUObject(this, &UGDAT_PlayMontageAndWaitForEvent::OnMontageStop));\n\t\t\t}\n\t\t}\n\t}\n\n\tif (AbilitySystemComponent) {\n\t\tAbilitySystemComponent->ClearAnimatingAbility(Ability);\n\t}\n\n\tif (EventTagContainer.IsValid()) {\n\t\tEventTagContainer->OnContainerTagAdded.RemoveDynamic(this, &UGDAT_PlayMontageAndWaitForEvent::OnEventTagAdded);\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 50.52373657089693}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tif (AbilityEnded && StopWhenAbilityEnds) {\n\t\tif (AbilitySystemComponent) {\n\t\t\tAbilitySystemComponent->StopAnimMontage(MontageToPlay);\n\t\t}\n\t}\n\n\tif (EventTagContainerDelegate.IsBound()) {\n\t\tAbilitySystemComponent->AbilitySystemGlobals->GetAbilitySystemComponentFromActor(GetAvatarActor(), true)->RemoveGameplayTagContainerDelegate(EventTagContainerDelegate);\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 56.6130446878088}]}
{"instance_id": "5932070df16f", "generation_result": [{"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t    if (Ability) {\n        UGDAbilitySystemComponent* ASC = Ability->GetAbilitySystemComponent();\n        if (ASC) {\n            const FGameplayAbilityActorInfo* ActorInfo = Ability->GetCurrentActorInfo();\n            UAnimInstance* AnimInstance = ActorInfo->GetAnimInstance();\n            if (AnimInstance) {\n                if (MontageInstanceID != INDEX_NONE) {\n                    ASC->UnbindFromAnimationForAbility(Ability->GetCurrentAbilitySpecHandle(), MontageInstanceID);\n                    ASC->StopAnimMontage(MontageInstanceID);\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "CodeBleu_score": 50.62623304666576}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tif (AbilitySystemComponent && MontageToPlay) {\n\t\tif (AbilitySystemComponent->GetAnimInstance()) {\n\t\t\tAbilitySystemComponent->GetAnimInstance()->Montage_Stop(MontageToPlay->GetFName(), 1.0f);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 20.860442603428673}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t    // Retrieve the actor info and animation instance\n    UAbilitySystemComponent* ASC = Ability->GetCurrentActorInfo()->AbilitySystemComponent.Get();\n    UAnimInstance* AnimInstance = Ability->GetCurrentActorInfo()->AnimInstance.Get();\n\n    // If the ability system component is valid and the montage is playing, unbind the delegates for the montage instance and stop the current montage using the ability system component\n    if (ASC && MontageInstance.IsValid()) {\n        // Unbind the delegates for the montage instance\n        UnbindMontageDelegates();\n\n        // Stop the current montage using the ability system component\n        ASC->CurrentMontageStop(FOnMontageStop::CreateUObject(this, &UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded));\n\n        // Return true\n        return true;\n    }\n\n    // Return false\n    return false;\n}", "CodeBleu_score": 31.350848848991536}]}
{"instance_id": "7049be7f0c75", "generation_result": [{"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\tAAIController* AIController = OwnerComp.GetAIOwner();\n\tif (AIController == nullptr) return;\n\n\tAPawn* Pawn = AIController->GetPawn();\n\tif (Pawn == nullptr) return;\n\n\tAActor* Target = OwnerComp.GetBlackboardComponent()->GetValueAsObject(TargetKey.SelectedKeyName);\n\tif (Target == nullptr) return;\n\n\tfloat Distance = (Target->GetActorLocation() - Pawn->GetActorLocation()).Size();\n\tbool bInRange = Distance <= MaxDistance;\n\n\tif (bInRange) {\n\t\tFHitResult Hit;\n\t\tFCollisionQueryParams Params;\n\t\tParams.AddIgnoredActor(Pawn);\n\t\tParams.AddIgnoredActor(Target);\n\t\tParams.bTraceComplex = true;\n\t\tbInRange = !Pawn->GetWorld()->LineTraceSingleByChannel(Hit, Pawn->GetActorLocation(), Target->GetActorLocation(), ECollisionChannel::ECC_Visibility, Params);\n\t}\n\n\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(InRangeKey.SelectedKeyName, bInRange);\n}", "CodeBleu_score": 51.92540067312981}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\t// Get the AI controller.\n\tAAIController* AIController = OwnerComp.GetAIOwner();\n\n\t// Get the target actor.\n\tAActor* TargetActor = OwnerComp.GetBlackboardComponent()->GetValueAsObject(TEXT(\"TargetActor\"));\n\n\t// If the target actor is valid.\n\tif (TargetActor != nullptr) {\n\t\t// Get the target location.\n\t\tFVector TargetLocation = TargetActor->GetActorLocation();\n\n\t\t// Get the AI pawn.\n\t\tAPawn* AIPawn = AIController->GetPawn();\n\n\t\t// If the AI pawn is valid.\n\t\tif (AIPawn != nullptr) {\n\t\t\t// Get the AI pawn location.\n\t\t\tFVector AIPawnLocation = AIPawn->GetActorLocation();\n\n\t\t\t// Get the distance to the target.\n\t\t\tfloat Distance = FVector::Distance(TargetLocation, AIPawnLocation);\n\n\t\t\t// If the target is within range.\n\t\t\tif (Distance <= MaxAttackRange) {\n\t\t\t\t// Get the AI controller's line of sight to the target.\n\t\t\t\tbool bHasLineOfSight = AIController->LineOfSightTo(TargetActor, FVector::ZeroVector, true);\n\n\t\t\t\t// If the target is visible.\n\t\t\t\tif (bHasLineOfSight) {\n\t\t\t\t\t// Store the result in the blackboard.\n\t\t\t\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(TEXT(\"TargetInRangeAndVisible\"), true);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// Store the result in the blackboard.\n\t\t\t\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(TEXT(\"TargetInRangeAndVisible\"), false);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Store the result in the blackboard.\n\t\t\t\tOwnerComp.GetBlackboardComponent()->", "CodeBleu_score": 50.01444001433585}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\tAAIController* Controller = OwnerComp.GetAIOwner();\n\tif (Controller) {\n\t\tAPawn* Target = Cast<APawn>(OwnerComp.GetBlackboardComponent()->GetValueAsObject(TargetKey.SelectedKeyName));\n\t\tif (Target) {\n\t\t\tconst float Distance = (Controller->GetPawn()->GetActorLocation() - Target->GetActorLocation()).Size();\n\t\t\tconst bool bIsWithinRange = Distance <= MaxAttackRange;\n\t\t\tconst bool bHasLineOfSight = Controller->LineOfSightTo(Target);\n\t\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(InRangeAndVisibleKey.SelectedKeyName, bIsWithinRange && bHasLineOfSight);\n\t\t}\n\t}\n}", "CodeBleu_score": 52.13484142278306}]}
{"instance_id": "031bd0ec3e3c", "generation_result": [{"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\t\n\tAAIController* AIController = OwnerComp.GetAIOwner();\n\t\n\tif (AIController == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\t\n\tAPawn* AIPawn = AIController->GetPawn();\n\t\n\tif (AIPawn == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\t\n\tUSAttributeComponent* AIAttributeComponent = AIPawn->FindComponentByClass<USAttributeComponent>();\n\t\n\tif (AIAttributeComponent == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\t\n\tAIAttributeComponent->ApplyHealthChange(AIAttributeComponent->GetMaxHealth(), true);\n\t\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 47.648133023762625}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tAAIController* AIController = Cast<AAIController>(OwnerComp.GetAIOwner());\n\tif (AIController) {\n\t\tAPawn* AIPawn = AIController->GetPawn();\n\t\tif (AIPawn) {\n\t\t\tUSAttributeComponent* AttributeComponent = AIPawn->FindComponentByClass<USAttributeComponent>();\n\t\t\tif (AttributeComponent) {\n\t\t\t\tAttributeComponent->ApplyHealthChange(AttributeComponent->GetMaxHealth(), true);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 53.09291952455507}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\n\tAAIController* AIController = OwnerComp.GetAIOwner();\n\tif (AIController) {\n\t\tAPawn* Pawn = AIController->GetPawn();\n\t\tif (Pawn) {\n\t\t\tUSAttributeComponent* AttributeComponent = Pawn->FindComponentByClass<USAttributeComponent>();\n\t\t\tif (AttributeComponent) {\n\t\t\t\tAttributeComponent->ApplyHealthChange(AttributeComponent->GetMaxHealth());\n\t\t\t}\n\t\t}\n\t}\n\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 54.271935007395825}]}
{"instance_id": "6cd6e778e91b", "generation_result": [{"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tUSTickablesSubsystem* TickablesSubsystem = GetWorld()->GetSubsystem<USTickablesSubsystem>();\n\tif (TickablesSubsystem) {\n\t\tTickablesSubsystem->RegisterTickable(this, true);\n\t}\n}", "CodeBleu_score": 63.316113464979615}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tUSTickablesSubsystem* TickablesSubsystem = GetWorld()->GetSubsystem<USTickablesSubsystem>();\n\tif (TickablesSubsystem) {\n\t\tTickablesSubsystem->RegisterTickable(this, ETickableType::Primary);\n\t}\n}", "CodeBleu_score": 62.55719687932406}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\t// Register with the tickables subsystem\n\tUSTickablesSubsystem* TickablesSubsystem = GetWorld()->GetSubsystem<USTickablesSubsystem>();\n\tif (TickablesSubsystem) {\n\t\tTickablesSubsystem->RegisterTickable(this, ETickableType::ProjectileMovement);\n\t}\n}", "CodeBleu_score": 61.5689609656907}]}
{"instance_id": "e90ff27c7f16", "generation_result": [{"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\n\tif (const auto* TickablesSubsystem = STickablesSubsystem::Get(GetWorld())) {\n\t\tTickablesSubsystem->DeregisterTickable(this);\n\t}\n}", "CodeBleu_score": 55.517035884376995}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\n\tUSTickablesSubsystem* TickablesSubsystem = GetWorld()->GetSubsystem<USTickablesSubsystem>();\n\n\tif (TickablesSubsystem) {\n\t\tTickablesSubsystem->DeregisterTickable(this);\n\t}\n}", "CodeBleu_score": 64.7255010085032}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\n\tUSTickablesSubsystem* TickablesSubsystem = World->GetSubsystem<USTickablesSubsystem>();\n\n\tif (TickablesSubsystem) {\n\t\tTickablesSubsystem->DeregisterTickable(this);\n\t}\n}", "CodeBleu_score": 59.265922624151955}]}
{"instance_id": "be3e542c07ea", "generation_result": [{"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tif (bManageSignificance) {\n\t\tif (UObject* Owner = GetOwner()) {\n\t\t\tif (Owner->GetClass()->ImplementsInterface(USignificanceInterface::StaticClass())) {\n\t\t\t\tif (bWaitOneFrame) {\n\t\t\t\t\tFTimerHandle Handle;\n\t\t\t\t\tGetWorld()->GetTimerManager().SetTimer(Handle, this, &USSignificanceComponent::RegisterWithManager, 0.0f, false);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tRegisterWithManager();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tUE_LOG(LogActionRoguelike, Warning, TEXT(\"Significance component owner does not implement the significance interface.\"));\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tUE_LOG(LogActionRoguelike, Warning, TEXT(\"Significance component does not have an owner.\"));\n\t\t}\n\t}\n\n\tif (bManageParticleSignificance) {\n\t\tTArray<UActorComponent*> Components;\n\t\tGetOwner()->GetComponents(Components);\n\n\t\tfor (UActorComponent* Component : Components) {\n\t\t\tif (UParticleSystemComponent* ParticleSystemComponent = Cast<UParticleSystemComponent>(Component)) {\n\t\t\t\tif (ParticleSystemComponent->Template) {\n\t\t\t\t\tParticleSystemComponent->SetSignificanceManager(this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 57.393028368185284}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tif (bManageSignificance) {\n\t\tif (ISignificanceInterface* significanceInterface = Cast<ISignificanceInterface>(GetOwner())) {\n\t\t\tif (bWaitOneFrame) {\n\t\t\t\tGetWorld()->GetTimerManager().SetTimerForNextTick(this, &USSignificanceComponent::RegisterWithManager);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tRegisterWithManager();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tUE_LOG(LogActionRoguelike, Error, TEXT(\"Significance component on %s is managing significance, but the owner does not implement the significance interface.\"), *GetOwner()->GetName());\n\t\t}\n\t}\n\n\tif (bManageParticleSignificance) {\n\t\tif (UParticleSystemComponent* particleSystemComponent = GetOwner()->FindComponentByClass<UParticleSystemComponent>()) {\n\t\t\tif (bWaitOneFrame) {\n\t\t\t\tGetWorld()->GetTimerManager().SetTimerForNextTick(this, &USSignificanceComponent::ManageParticleSignificance);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tManageParticleSignificance();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 63.04398250016534}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tif (bManageSignificance) {\n\t\tif (const auto significanceInterface = Cast<ISSignificanceInterface>(GetOwner())) {\n\t\t\tsignificanceInterface->SetSignificanceComponent(this);\n\t\t}\n\t\telse {\n\t\t\tUE_LOG(LogActionRoguelike, Error, TEXT(\"Significance component owner does not implement the significance interface.\"));\n\t\t}\n\t}\n\n\tif (bWaitOneFrame) {\n\t\tGetWorld()->GetTimerManager().SetTimer(\n\t\t\tsignificanceTimerHandle,\n\t\t\tthis,\n\t\t\t&USSignificanceComponent::RegisterWithManager,\n\t\t\t1.0f,\n\t\t\tfalse\n\t\t);\n\t}\n\telse {\n\t\tRegisterWithManager();\n\t}\n\n\tif (bManageParticleSignificance) {\n\t\tTArray<UActorComponent*> components;\n\t\tGetOwner()->GetComponents(components);\n\n\t\tfor (const auto component : components) {\n\t\t\tif (component->IsA<UParticleSystemComponent>()) {\n\t\t\t\tconst auto particleSystemComponent = Cast<UParticleSystemComponent>(component);\n\t\t\t\tif (particleSystemComponent->Template) {\n\t\t\t\t\tif (particleSystemComponent->Template->bSignificanceParticle) {\n\t\t\t\t\t\tsignificantParticleSystems.Add(particleSystemComponent);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (component->IsA<UNiagaraComponent>()) {\n\t\t\t\tconst auto niagaraComponent = Cast<UNiagaraComponent>(component);\n\t\t\t\tif (niagaraComponent->GetAsset()) {\n\t\t\t\t\tif (niagaraComponent->GetAsset()->bSignificanceParticle) {\n\t\t\t\t\t\tsignificantNiagaraSystems.Add(niagaraComponent);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 55.79573221183958}]}
{"instance_id": "77824b6415d0", "generation_result": [{"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\t//Retrieve the significance manager from the world\n\tASignificanceManager* manager = GetWorld()->GetAuthGameMode<ASignificanceManager>();\n\tif (manager) {\n\t\t//Define the lambda functions for calculating significance and handling post-significance updates\n\t\tFCalculateSignificance calculateLambda = [this](const FSignificanceData& data) {\n\t\t\treturn this->CalculateSignificance(data);\n\t\t};\n\t\tFUpdatePostSignificance updateLambda = [this](const FSignificanceData& data) {\n\t\t\tthis->UpdatePostSignificance(data);\n\t\t};\n\t\t//Register the component with the manager\n\t\tmanager->RegisterComponent(this, GetOwner()->GetClass()->GetName(), calculateLambda, updateLambda);\n\t}\n}", "CodeBleu_score": 28.799478452913352}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\n\tif (IsRegistered) return;\n\n\tif (!IsValid(GetWorld())) return;\n\n\tif (!IsValid(GetOwner())) return;\n\n\tif (!IsValid(Manager)) return;\n\n\tManager->RegisterComponent(this);\n\n\tIsRegistered = true;\n\n}", "CodeBleu_score": 13.03972107262663}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\tif (IsRegistered()) {\n\t\tUE_LOG(LogActionRoguelike, Error, TEXT(\"USSignificanceComponent::RegisterWithManager: This component is already registered with the significance manager.\"))\n\t\treturn;\n\t}\n\n\tif (!GetOwner()) {\n\t\tUE_LOG(LogActionRoguelike, Error, TEXT(\"USSignificanceComponent::RegisterWithManager: The owner of this component is null.\"))\n\t\treturn;\n\t}\n\n\tif (!GetWorld()) {\n\t\tUE_LOG(LogActionRoguelike, Error, TEXT(\"USSignificanceComponent::RegisterWithManager: The world of this component is null.\"))\n\t\treturn;\n\t}\n\n\tif (!GetWorld()->GetGameInstance()) {\n\t\tUE_LOG(LogActionRoguelike, Error, TEXT(\"USSignificanceComponent::RegisterWithManager: The game instance of this component's world is null.\"))\n\t\treturn;\n\t}\n\n\tif (!GetWorld()->GetGameInstance()->GetSubsystem<USignificanceManager>()) {\n\t\tUE_LOG(LogActionRoguelike, Error, TEXT(\"USSignificanceComponent::RegisterWithManager: The significance manager of this component's world is null.\"))\n\t\treturn;\n\t}\n\n\tauto SignificanceManager = GetWorld()->GetGameInstance()->GetSubsystem<USignificanceManager>();\n\n\tif (SignificanceManager->IsRegistered(this)) {\n\t\tUE_LOG(LogActionRoguelike, Error, TEXT(\"USSignificanceComponent::RegisterWithManager: This component is already registered with the significance manager.\"))\n\t\treturn;\n\t}\n\n\tauto OwnerClass = GetOwner()->GetClass();\n\n\tif (!OwnerClass) {\n\t\tUE_LOG(LogActionRoguelike, Error, TEXT(\"USSignificanceComponent::RegisterWithManager: The owner's class of this component is null.\"))\n\t\treturn;\n\t}\n\n\tauto OwnerClassName = OwnerClass->GetName();\n\n\tif (OwnerClassName.IsEmpty()) {\n\t\tUE_LOG(LogActionRoguel", "CodeBleu_score": 37.0225538604374}]}
{"instance_id": "dca342410d64", "generation_result": [{"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tif (!Actor->GetClass()->ImplementsInterface(USActorPoolingInterface::StaticClass())) {\n\t\tUE_LOG(LogActionRoguelike, Warning, TEXT(\"Actor %s does not implement the SActorPoolingInterface interface. It will be destroyed.\"), *Actor->GetName());\n\t\tActor->Destroy();\n\t\treturn false;\n\t}\n\n\tif (!Actor->GetClass()->ImplementsInterface(USActorPoolingInterface::StaticClass())) {\n\t\tUE_LOG(LogActionRoguelike, Warning, TEXT(\"Actor %s does not implement the SActorPoolingInterface interface. It will be destroyed.\"), *Actor->GetName());\n\t\tActor->Destroy();\n\t\treturn false;\n\t}\n\n\tISActorPoolingInterface* PoolingInterface = Cast<ISActorPoolingInterface>(Actor);\n\n\tif (!PoolingInterface->IsPoolable()) {\n\t\tUE_LOG(LogActionRoguelike, Warning, TEXT(\"Actor %s is not poolable. It will be destroyed.\"), *Actor->GetName());\n\t\tActor->Destroy();\n\t\treturn false;\n\t}\n\n\tif (PoolingInterface->IsPooled()) {\n\t\tUE_LOG(LogActionRoguelike, Warning, TEXT(\"Actor %s is already pooled. It will be destroyed.\"), *Actor->GetName());\n\t\tActor->Destroy();\n\t\treturn false;\n\t}\n\n\tPoolingInterface->SetPooled(true);\n\n\tif (!Actor->GetWorld()) {\n\t\tUE_LOG(LogActionRoguelike, Warning, TEXT(\"Actor %s has no world. It will be destroyed.\"), *Actor->GetName());\n\t\tActor->Destroy();\n\t\treturn false;\n\t}\n\n\tif (!Actor->GetWorld()->GetSubsystem<USActorPoolingSubsystem>()) {\n\t\tUE_LOG(LogActionRoguelike, Warning, TEXT(\"Actor %s's world does not have a pooling subsystem. It will be destroyed.\"), *Actor->GetName());\n", "CodeBleu_score": 49.2362545963733}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tif (!Actor) {\n\t\tUE_LOG(LogActionRoguelike, Warning, TEXT(\"Actor is null.\"));\n\t\treturn false;\n\t}\n\n\tif (!Actor->GetClass()->ImplementsInterface(USActorPoolingInterface::StaticClass())) {\n\t\tUE_LOG(LogActionRoguelike, Warning, TEXT(\"Actor does not implement the SActorPoolingInterface.\"));\n\t\treturn false;\n\t}\n\n\tISActorPoolingInterface* PoolingInterface = Cast<ISActorPoolingInterface>(Actor);\n\tif (!PoolingInterface->IsPoolingEnabled()) {\n\t\tUE_LOG(LogActionRoguelike, Warning, TEXT(\"Pooling is not enabled for this actor.\"));\n\t\treturn false;\n\t}\n\n\tif (!PoolingInterface->IsPoolingAllowed()) {\n\t\tUE_LOG(LogActionRoguelike, Warning, TEXT(\"Pooling is not allowed for this actor.\"));\n\t\treturn false;\n\t}\n\n\tif (Actor->GetWorld()) {\n\t\tif (Actor->GetWorld()->GetSubsystem<USActorPoolingSubsystem>()) {\n\t\t\tif (Actor->GetWorld()->GetSubsystem<USActorPoolingSubsystem>()->Internal_ReleaseToPool(Actor)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\tUE_LOG(LogActionRoguelike, Warning, TEXT(\"Actor's world does not have a pooling subsystem.\"));\n\treturn false;\n}", "CodeBleu_score": 47.41192601789505}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tif (Actor->GetClass()->ImplementsInterface(USActorPoolingInterface::StaticClass())) {\n\t\tif (const auto* PoolingSubsystem = GetPoolingSubsystem(Actor)) {\n\t\t\tPoolingSubsystem->InternalReleaseToPool(Actor);\n\t\t\treturn true;\n\t\t}\n\t}\n\tActor->Destroy();\n\treturn false;\n}", "CodeBleu_score": 58.00912787102143}]}
{"instance_id": "5c285130f782", "generation_result": [{"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tUE_LOG(LogActionRoguelike, Log, TEXT(\"Priming actor pool of %s with %d actors\"), *ActorClass->GetName(), Amount);\n\tSCOPE_CYCLE_COUNTER(STAT_ActorPooling_PrimeActorPool);\n\t\n\tfor (int32 i = 0; i < Amount; i++) {\n\t\tAActor* Actor = GetWorld()->SpawnActor<AActor>(ActorClass, FVector::ZeroVector, FRotator::ZeroRotator);\n\t\tActor->ImmediateDestroy();\n\t}\n}", "CodeBleu_score": 45.72678638647912}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tUE_LOG(LogActionRoguelike, Log, TEXT(\"Priming actor pool for %s\"), *ActorClass->GetName());\n\t\n\tFScopeCycleCounter Scope(ActorClass->GetName());\n\t\n\tfor(int32 i = 0; i < Amount; i++) {\n\t\tAActor* Actor = GetWorld()->SpawnActor<AActor>(ActorClass);\n\t\t\n\t\tif(Actor) {\n\t\t\tActor->SetActorHiddenInGame(true);\n\t\t\tActor->SetActorEnableCollision(false);\n\t\t\tActor->SetActorTickEnabled(false);\n\t\t\t\n\t\t\tISActorPoolingInterface* PoolingInterface = Cast<ISActorPoolingInterface>(Actor);\n\t\t\tif(PoolingInterface) {\n\t\t\t\tPoolingInterface->OnPooling_Implementation();\n\t\t\t}\n\t\t\t\n\t\t\tActorPool.Add(Actor);\n\t\t}\n\t}\n}", "CodeBleu_score": 47.19170930907604}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tUE_LOG(LogActionRoguelike, Log, TEXT(\"Priming Actor Pool for %s\"), *ActorClass->GetName());\n\t\n\tFScopeCycleCounter Scope(ActorClass->GetName());\n\t\n\tfor (int32 i = 0; i < Amount; i++) {\n\t\tAActor* Actor = GetWorld()->SpawnActor<AActor>(ActorClass, FVector::ZeroVector, FRotator::ZeroRotator);\n\t\tActor->ImmediateBeginPlay();\n\t\tReleaseActor(Actor);\n\t}\n}", "CodeBleu_score": 45.79588815518317}]}
{"instance_id": "43c013653d6d", "generation_result": [{"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\n\t// Create a loading screen attributes object\n\tFLoadingScreenAttributes LoadingScreenAttributes;\n\n\t// Assign a new loading screen widget to the loading screen attributes object\n\tLoadingScreenAttributes.WidgetLoadingScreen = SNew(SLoadingScreen);\n\n\t// Set the loading screen using the movie player\n\tGetMoviePlayer()->SetupLoadingScreen(LoadingScreenAttributes);\n}", "CodeBleu_score": 64.53058870215767}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\n\t// Create a new loading screen attributes object.\n\tFLoadingScreenAttributes LoadingScreenAttributes;\n\n\t// Assign a new loading screen widget to the loading screen attributes object.\n\tLoadingScreenAttributes.WidgetLoadingScreen = SNew(SLoadingScreen);\n\n\t// Set the map name.\n\tLoadingScreenAttributes.MapNameToLoad = MapName;\n\n\t// Set the bShowWidget flag to true.\n\tLoadingScreenAttributes.bShowWidget = true;\n\n\t// Set the minimum loading screen display time.\n\tLoadingScreenAttributes.MinimumLoadingScreenDisplayTime = 2.0f;\n\n\t// Set the bAutoCompleteWhenLoadingCompletes flag to true.\n\tLoadingScreenAttributes.bAutoCompleteWhenLoadingCompletes = true;\n\n\t// Set the bMoviesAreSkippable flag to true.\n\tLoadingScreenAttributes.bMoviesAreSkippable = true;\n\n\t// Set the bWaitForManualStop flag to false.\n\tLoadingScreenAttributes.bWaitForManualStop = false;\n\n\t// Set the bAllowEngineTick to false.\n\tLoadingScreenAttributes.bAllowEngineTick = false;\n\n\t// Set the bAllowInEarlyStartup flag to true.\n\tLoadingScreenAttributes.bAllowInEarlyStartup = true;\n\n\t// Set the bForceContentPreload flag to false.\n\tLoadingScreenAttributes.bForceContentPreload = false;\n\n\t// Set the bAllowInEarlyStartup flag to true.\n\tLoadingScreenAttributes.bAllowInEarlyStartup = true;\n\n\t// Set the bShowUICursor flag to false.\n\tLoadingScreenAttributes.bShowUICursor = false;\n\n\t// Set the bEnableTutorialLoadingScreen flag to false.\n\tLoadingScreenAttributes.bEnableTutorialLoadingScreen = false;\n\n\t// Set the bEnableTutorialLoadingScreen flag to false.\n\tLoadingScreenAttributes.bEnableTutorialLoadingScreen = false;\n\n\t// Set the bAllowEngineTick to false.\n\tLoadingScreenAttributes.bAllowEngineTick = false;\n\n\t// Set the bAllowEngineTick to false.\n\tLoadingScreenAttributes.bAllowEngineTick = false", "CodeBleu_score": 33.554560027099775}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\n\t// Create the loading screen attributes object\n\tFLoadingScreenAttributes LoadingScreenAttributes;\n\n\t// Assign the loading screen widget to the loading screen attributes object\n\tLoadingScreenAttributes.WidgetLoadingScreen = SLoadingScreenWidget::CreateLoadingScreenWidget(MapName);\n\n\t// Set up the loading screen using the movie player\n\tGetMoviePlayer()->SetupLoadingScreen(LoadingScreenAttributes);\n}", "CodeBleu_score": 55.24418582192136}]}
{"instance_id": "a6979eb925a5", "generation_result": [{"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tif (Instigator == nullptr) {\n\t\tInstigator = GetOwningComponent()->GetOwner();\n\t}\n\tif (Instigator == nullptr) {\n\t\treturn;\n\t}\n\n\tif (GetOwningComponent()->GetOwnerRole() == ROLE_Authority) {\n\t\tStartTime = GetWorld()->GetTimeSeconds();\n\t}\n\n\tif (GetOwningComponent()->GetOwnerRole() == ROLE_Authority) {\n\t\tif (bReplicateStartTime) {\n\t\t\tStartTimeRep = StartTime;\n\t\t}\n\t}\n\n\tif (GetOwningComponent()->GetOwnerRole() == ROLE_Authority) {\n\t\tif (bReplicateDuration) {\n\t\t\tDurationRep = Duration;\n\t\t}\n\t}\n\n\tGetOwningComponent()->GetActiveGameplayTags().AppendTags(GrantedTags);\n\n\tGetOwningComponent()->OnActionStarted(this);\n}", "CodeBleu_score": 50.52512868507591}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tif (Instigator) {\n\t\tInstigators.AddUnique(Instigator);\n\t}\n\tif (ActionComponent) {\n\t\tActionComponent->LogActionStarted(this);\n\t\tActionComponent->AddActiveGameplayTags(GrantedTags);\n\t\tif (ActionComponent->GetOwnerRole() == ROLE_Authority) {\n\t\t\tStartTime = GetWorld()->GetTimeSeconds();\n\t\t}\n\t\tActionComponent->OnActionStarted.Broadcast(this);\n\t}\n}", "CodeBleu_score": 38.575251431330095}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\t// Log the start of the action.\n\tUE_LOG(LogActionRoguelike, Log, TEXT(\"Action %s started for %s.\"), *GetName(), *Instigator->GetName());\n\t// Add the action's granted tags to the owning component's active gameplay tags.\n\tActionComponent->AddActiveGameplayTags(GrantedTags);\n\t// Update the replication data.\n\tbIsActive = true;\n\tInstigatorActor = Instigator;\n\t// If the component's owner role is authoritative, record the start time.\n\tif (ActionComponent->GetOwnerRole() == ROLE_Authority) {\n\t\tStartTime = ActionComponent->GetWorld()->GetTimeSeconds();\n\t}\n\t// Broadcast an action started event from the owning component.\n\tActionComponent->OnActionStarted.Broadcast(this);\n}", "CodeBleu_score": 48.98654156390327}]}
{"instance_id": "bdec7bf3e2d7", "generation_result": [{"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tif (const auto gameState = GetWorld()->GetGameState()) {\n\t\treturn FMath::Max(0.0f, GetDuration() - (gameState->GetServerWorldTimeSeconds() - GetStartTime()));\n\t}\n\treturn GetDuration();\n}", "CodeBleu_score": 40.818935616953894}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t\n\tif (IsValid(GetWorld())) {\n\t\tif (IsValid(GetWorld()->GetGameState())) {\n\t\t\treturn (GetWorld()->GetGameState()->GetServerWorldTimeSeconds() - StartTime) / Duration;\n\t\t}\n\t}\n\n\treturn 1.f;\n}", "CodeBleu_score": 37.36015053714827}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tif (GetOwner()) {\n\t\tif (GetOwner()->GetWorld()) {\n\t\t\tif (GetOwner()->GetWorld()->GetGameState()) {\n\t\t\t\treturn FMath::Max(0.0f, GetDuration() - (GetOwner()->GetWorld()->GetGameState()->GetServerWorldTimeSeconds() - GetStartTime()));\n\t\t\t}\n\t\t}\n\t}\n\n\treturn GetDuration();\n}", "CodeBleu_score": 34.26521786544594}]}
{"instance_id": "db3a7508643b", "generation_result": [{"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (!InFocus) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"[%s] ServerInteract_Implementation: InFocus is null.\"), *GetOwner()->GetName());\n\t\treturn;\n\t}\n\n\tAPawn* OwningPawn = Cast<APawn>(GetOwner());\n\tif (!OwningPawn) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"[%s] ServerInteract_Implementation: OwningPawn is null.\"), *GetOwner()->GetName());\n\t\treturn;\n\t}\n\n\tInFocus->Interact(OwningPawn);\n}", "CodeBleu_score": 48.46899487414677}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\n\tif(InFocus == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"[SInteractionComponent] ServerInteract_Implementation: InFocus is nullptr\"));\n\t\treturn;\n\t}\n\n\tAPawn* OwningPawn = Cast<APawn>(GetOwner());\n\tif(OwningPawn == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"[SInteractionComponent] ServerInteract_Implementation: OwningPawn is nullptr\"));\n\t\treturn;\n\t}\n\n\tInFocus->Interact(OwningPawn);\n\n}", "CodeBleu_score": 51.24196087195445}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (InFocus == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"Interacting with a null actor!\"));\n\t\treturn;\n\t}\n\n\tAController* Controller = Cast<AController>(GetOwner());\n\tif (Controller == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"Interacting with an actor without an owner!\"));\n\t\treturn;\n\t}\n\n\tAPawn* Pawn = Controller->GetPawn();\n\tif (Pawn == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"Interacting with an actor without a pawn!\"));\n\t\treturn;\n\t}\n\n\tInFocus->Interact(Pawn);\n}", "CodeBleu_score": 54.92021761103793}]}
{"instance_id": "e6a5224079e6", "generation_result": [{"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\n\tif (TargetActor) {\n\n\t\tUSAttributeComponent* TargetAttributeComponent = TargetActor->FindComponentByClass<USAttributeComponent>();\n\n\t\tif (TargetAttributeComponent) {\n\n\t\t\tTargetAttributeComponent->ApplyHealthChange(-DamageAmount);\n\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 50.199889401498346}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\n\tUSAttributeComponent* TargetAttributeComponent = TargetActor->FindComponentByClass<USAttributeComponent>();\n\n\tif (TargetAttributeComponent) {\n\t\tTargetAttributeComponent->ApplyHealthChange(-DamageAmount);\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 51.702396375058214}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tif (TargetActor == nullptr) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"Target actor is nullptr.\"));\n\t\treturn false;\n\t}\n\tif (DamageCauser == nullptr) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"Damage causer is nullptr.\"));\n\t\treturn false;\n\t}\n\n\tUSAttributeComponent* TargetAttributeComponent = TargetActor->FindComponentByClass<USAttributeComponent>();\n\tif (TargetAttributeComponent == nullptr) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"Target actor has no attribute component.\"));\n\t\treturn false;\n\t}\n\n\tTargetAttributeComponent->ApplyAttributeChange(EAttributeType::Health, -DamageAmount);\n\n\treturn true;\n}", "CodeBleu_score": 47.10538229038427}]}
{"instance_id": "084a7501fc08", "generation_result": [{"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\tif (NewTime > PersonalRecord) {\n\t\tPersonalRecord = NewTime;\n\t\tOnPersonalRecordChange.Broadcast(PersonalRecord);\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 51.61903628764143}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\tif (NewTime > PersonalRecord) {\n\t\tPersonalRecord = NewTime;\n\t\tBroadcastPersonalRecord();\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 44.540738253709904}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\tif (NewTime > PersonalRecord) {\n\t\tPersonalRecord = NewTime;\n\t\tOnPersonalRecordUpdated.Broadcast(NewTime);\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 47.41471466896529}]}
{"instance_id": "8e0ccc856566", "generation_result": [{"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\n\tif (InstigatorPawn) {\n\n\t\tUSAttributeComponent* AttributeComponent = InstigatorPawn->FindComponentByClass<USAttributeComponent>();\n\n\t\tif (AttributeComponent) {\n\n\t\t\tASPlayerState* PlayerState = Cast<ASPlayerState>(InstigatorPawn->GetController()->PlayerState);\n\n\t\t\tif (PlayerState && PlayerState->CanRemoveCredits(CreditsCost)) {\n\n\t\t\t\tAttributeComponent->ApplyHealthChange(HealthChange);\n\n\t\t\t\tPlayerState->RemoveCredits(CreditsCost);\n\n\t\t\t\tTriggerCooldown();\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}", "CodeBleu_score": 55.05757454846905}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (InstigatorPawn) {\n\t\tUSAttributeComponent* AttributeComponent = InstigatorPawn->FindComponentByClass<USAttributeComponent>();\n\t\tif (AttributeComponent) {\n\t\t\tASPlayerState* PlayerState = Cast<ASPlayerState>(InstigatorPawn->GetController()->PlayerState);\n\t\t\tif (PlayerState) {\n\t\t\t\tif (PlayerState->RemoveCredits(Cost)) {\n\t\t\t\t\tAttributeComponent->ApplyHealthChange(HealthChange);\n\t\t\t\t\tStartCooldown();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 49.866165448285805}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\n\tif (InstigatorPawn == nullptr) return;\n\n\tUSAttributeComponent* AttributeComponent = InstigatorPawn->FindComponentByClass<USAttributeComponent>();\n\n\tif (AttributeComponent == nullptr) return;\n\n\tASPlayerState* PlayerState = Cast<ASPlayerState>(InstigatorPawn->GetController()->PlayerState);\n\n\tif (PlayerState == nullptr) return;\n\n\tif (PlayerState->CanRemoveCredits(CreditCost)) {\n\n\t\tAttributeComponent->ApplyHealthChange(HealthChange);\n\n\t\tPlayerState->RemoveCredits(CreditCost);\n\n\t\tTriggerCooldown();\n\n\t}\n\n}", "CodeBleu_score": 52.723930524815884}]}
{"instance_id": "39a680859a89", "generation_result": [{"code": "void ASProjectileBase::Explode_Implementation(){\n\t\n\t// Play the explosion sound\n\tUGameplayStatics::PlaySoundAtLocation(GetWorld(), ExplosionSound, GetActorLocation());\n\n\t// Trigger the camera shake\n\tGetWorld()->GetFirstPlayerController()->ClientStartCameraShake(ExplosionShake);\n\n\t// Spawn the impact visual effect\n\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ExplosionEffect, GetActorLocation());\n\n\t// Release the projectile back to the actor pool\n\tSActorPoolingSubsystem::GetPoolingSubsystem(GetWorld())->ReleaseActor(this);\n\n\t// Destroy the projectile\n\tDestroy();\n}", "CodeBleu_score": 49.48056641092321}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t\n\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ExplosionEffect, GetActorLocation());\n\n\tUGameplayStatics::PlaySoundAtLocation(this, ExplosionSound, GetActorLocation());\n\n\tGetWorld()->GetFirstPlayerController()->ClientPlayCameraShake(ExplosionShake);\n\n\tUSActorPoolingSubsystem* PoolingSubsystem = USActorPoolingSubsystem::Get(this);\n\n\tif (PoolingSubsystem) {\n\n\t\tPoolingSubsystem->ReleaseActor(this);\n\n\t}\n\n}", "CodeBleu_score": 52.6191869602632}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t\n\t// Play the impact sound\n\tUGameplayStatics::PlaySoundAtLocation(this, ImpactSound, GetActorLocation());\n\n\t// Spawn the impact visual effect\n\tUGameplayStatics::SpawnEmitterAtLocation(this, ImpactParticle, GetActorLocation());\n\n\t// Trigger the camera shake\n\tGetWorld()->GetFirstPlayerController()->ClientStartCameraShake(ExplosionShake, 1.0f);\n\n\t// Release the projectile back to the actor pool\n\tSActorPoolingSubsystem::Get(this)->ReleaseActor(this);\n}", "CodeBleu_score": 36.295454185458496}]}
{"instance_id": "a95c41c6d7b5", "generation_result": [{"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\treturn nullptr;\n\t}\n\telse if (PlayerState->GetUniqueId().IsValid()) {\n\t\treturn PlayerData.FindByKey(PlayerState->GetUniqueId());\n\t}\n\telse if (GEngine->IsPlayInEditor()) {\n\t\tUE_LOG(LogActionRoguelike, Warning, TEXT(\"PlayerState has no unique ID.  Using first saved player entry.\"));\n\t\treturn PlayerData.Num() > 0 ? &PlayerData[0] : nullptr;\n\t}\n\telse {\n\t\treturn nullptr;\n\t}\n}", "CodeBleu_score": 44.84049021136135}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\treturn nullptr;\n\t}\n\tif (PlayerState->GetUniqueId().IsValid()) {\n\t\treturn SavedPlayerData.FindByKey(PlayerState->GetUniqueId());\n\t}\n\telse {\n\t\tif (GIsEditor) {\n\t\t\tUE_LOG(LogActionRoguelike, Warning, TEXT(\"PlayerState %s does not have a valid unique ID. Using first player data entry.\"), *PlayerState->GetName());\n\t\t\tif (SavedPlayerData.Num() > 0) {\n\t\t\t\treturn &SavedPlayerData[0];\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn nullptr;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tUE_LOG(LogActionRoguelike, Error, TEXT(\"PlayerState %s does not have a valid unique ID.\"), *PlayerState->GetName());\n\t\t\treturn nullptr;\n\t\t}\n\t}\n}", "CodeBleu_score": 55.073339547192326}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\treturn nullptr;\n\t}\n\n\tif (PlayerState->GetWorld()->IsPlayInEditor()) {\n\t\tUE_LOG(LogActionRoguelike, Warning, TEXT(\"GetPlayerData called in PIE mode. Returning first player save data.\"));\n\t\tif (PlayerData.Num() > 0) {\n\t\t\treturn &PlayerData[0];\n\t\t}\n\t\telse {\n\t\t\treturn nullptr;\n\t\t}\n\t}\n\n\tfor (FPlayerSaveData& Player : PlayerData) {\n\t\tif (Player.PlayerStateID == PlayerState->UniqueId) {\n\t\t\treturn &Player;\n\t\t}\n\t}\n\n\treturn nullptr;\n}", "CodeBleu_score": 56.651317442925134}]}
{"instance_id": "58a03c087c47", "generation_result": [{"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\n\t// Get the player state\n\tASPlayerState* PlayerState = Cast<ASPlayerState>(NewPlayer->PlayerState);\n\n\t// Ensure the player state is valid\n\tif (IsValid(PlayerState)) {\n\n\t\t// Load the player's state from the current save game\n\t\tLoadPlayerState(PlayerState);\n\t}\n}", "CodeBleu_score": 53.03554475920465}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\t//Retrieve the player's state.\n\tUSPlayerState* PlayerState = Cast<USPlayerState>(NewPlayer->PlayerState);\n\n\t//Ensure the player's state is valid.\n\tif (PlayerState) {\n\t\t//Retrieve the player's state's ID.\n\t\tconst int32 PlayerStateID = PlayerState->GetPlayerId();\n\n\t\t//Ensure the player's state ID is valid.\n\t\tif (PlayerStateID != -1) {\n\t\t\t//Retrieve the current save game.\n\t\t\tconst USSaveGame* CurrentSaveGame = GetCurrentSaveGame();\n\n\t\t\t//Ensure the current save game is valid.\n\t\t\tif (CurrentSaveGame) {\n\t\t\t\t//Retrieve the player's state from the current save game.\n\t\t\t\tconst USPlayerState* CurrentPlayerState = CurrentSaveGame->GetPlayerState(PlayerStateID);\n\n\t\t\t\t//Ensure the player's state is valid.\n\t\t\t\tif (CurrentPlayerState) {\n\t\t\t\t\t//Load the player's state from the current save game.\n\t\t\t\t\tPlayerState->LoadPlayerState(CurrentPlayerState);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 46.11802626017134}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\n\tif (NewPlayer == nullptr) {\n\n\t\treturn;\n\t}\n\n\tUSGameplayStatics::GetPlayerState(NewPlayer, PlayerState);\n\n\tif (PlayerState == nullptr) {\n\n\t\treturn;\n\t}\n\n\tif (!PlayerState->IsA<USPlayerState>()) {\n\n\t\treturn;\n\t}\n\n\tif (PlayerState->PlayerName.IsEmpty()) {\n\n\t\treturn;\n\t}\n\n\tif (PlayerState->PlayerName.Equals(TEXT(\"DefaultPlayer\"), ESearchCase::IgnoreCase)) {\n\n\t\treturn;\n\t}\n\n\tif (PlayerState->PlayerName.Equals(TEXT(\"Spectator\"), ESearchCase::IgnoreCase)) {\n\n\t\treturn;\n\t}\n\n\tif (PlayerState->PlayerName.Equals(TEXT(\"RemotePlayer\"), ESearchCase::IgnoreCase)) {\n\n\t\treturn;\n\t}\n\n\tif (PlayerState->PlayerName.Equals(TEXT(\"Player\"), ESearchCase::IgnoreCase)) {\n\n\t\treturn;\n\t}\n\n\tif (PlayerState->PlayerName.Equals(TEXT(\"\"), ESearchCase::IgnoreCase)) {\n\n\t\treturn;\n\t}\n\n\tif (PlayerState->PlayerName.Equals(TEXT(\" \"), ESearchCase::IgnoreCase)) {\n\n\t\treturn;\n\t}\n\n\tif (PlayerState->PlayerName.Equals(TEXT(\"  \"), ESearchCase::IgnoreCase)) {\n\n\t\treturn;\n\t}\n\n\tif (PlayerState->PlayerName.Equals(TEXT(\"   \"), ESearchCase::IgnoreCase)) {\n\n\t\treturn;\n\t}\n\n\tif (PlayerState->PlayerName.Equals(TEXT(\"    \"), ESearchCase::IgnoreCase)) {\n\n\t\treturn;\n\t}\n\n\tif (PlayerState->PlayerName.Equals(TEXT(\"     \"), ESearchCase::IgnoreCase)) {\n\n\t\treturn;\n\t}\n\n\tif (PlayerState->PlayerName.Equals(TEXT(\"      \"), ESearchCase::IgnoreCase)) {\n\n\t\treturn;\n\t}\n\n\tif (PlayerState->PlayerName.Equals(TEXT(\"       \"), ESearch", "CodeBleu_score": 39.6360672336193}]}
{"instance_id": "c5bd4c059b71", "generation_result": [{"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\t// Clear existing player data\n\tCurrentSaveGame.PlayerData.Empty();\n\tCurrentSaveGame.ActorData.Empty();\n\n\t// Get game state\n\tAGameStateBase* GameState = UGameplayStatics::GetGameState(GetWorld());\n\n\t// Save player data\n\tfor (APlayerState* PlayerState : GameState->PlayerArray) {\n\t\tif (PlayerState) {\n\t\t\tif (PlayerState->IsA<ASPlayerState>()) {\n\t\t\t\tASPlayerState* Player = Cast<ASPlayerState>(PlayerState);\n\t\t\t\tCurrentSaveGame.PlayerData.Add(Player->SaveGameData);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Save actor data\n\tfor (TActorIterator<AActor> ActorIterator(GetWorld()); ActorIterator; ++ActorIterator) {\n\t\tAActor* Actor = *ActorIterator;\n\t\tif (Actor) {\n\t\t\tif (Actor->Implements<USGameplayInterface>()) {\n\t\t\t\tUSGameplayInterface* Interface = Actor->FindInterface<USGameplayInterface>();\n\t\t\t\tif (Interface) {\n\t\t\t\t\tFSSActorData ActorData;\n\t\t\t\t\tActorData.Name = Actor->GetName();\n\t\t\t\t\tActorData.Transform = Actor->GetTransform();\n\t\t\t\t\tActorData.SerializedData = Interface->SerializeGameplayAttributes();\n\t\t\t\t\tCurrentSaveGame.ActorData.Add(ActorData);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Write save game\n\tFSSSaveGameSettings Settings;\n\tSettings.bOverwriteExisting = true;\n\tWriteSaveGameToSlot(CurrentSaveGame, Settings);\n\n\t// Broadcast event\n\tOnSaveGameWritten.Broadcast(CurrentSaveGame);\n}", "CodeBleu_score": 53.21595918235694}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\n\tCurrentSaveGame = NewObject<USaveGame>(this);\n\n\tCurrentSaveGame->GameState = Cast<AGameStateBase>(UGameplayStatics::GetGameState(GetWorld()));\n\n\tCurrentSaveGame->PlayerData.Empty();\n\n\tfor (APlayerState* PlayerState : CurrentSaveGame->GameState->PlayerArray) {\n\n\t\tif (PlayerState) {\n\n\t\t\tUSPlayerData* PlayerData = NewObject<USPlayerData>(this);\n\n\t\t\tPlayerData->PlayerState = PlayerState;\n\n\t\t\tCurrentSaveGame->PlayerData.Add(PlayerData);\n\n\t\t}\n\n\t}\n\n\tCurrentSaveGame->ActorData.Empty();\n\n\tfor (TActorIterator<AActor> ActorItr(GetWorld()); ActorItr; ++ActorItr) {\n\n\t\tAActor* Actor = *ActorItr;\n\n\t\tif (Actor && Actor->Implements<USGameplayInterface>()) {\n\n\t\t\tUSActorData* ActorData = NewObject<USActorData>(this);\n\n\t\t\tActorData->Actor = Actor;\n\n\t\t\tActorData->Name = Actor->GetName();\n\n\t\t\tActorData->Transform = Actor->GetTransform();\n\n\t\t\tFObjectAndNameAsStringProxyArchive Archive;\n\n\t\t\tActor->Serialize(Archive);\n\n\t\t\tActorData->SerializedData = Archive.GetSerializedObjectAndNameAsString();\n\n\t\t\tCurrentSaveGame->ActorData.Add(ActorData);\n\n\t\t}\n\n\t}\n\n\tUGameplayStatics::SaveGameToSlot(CurrentSaveGame, SaveGameName, SaveGameIndex);\n\n\tOnSaveGameWritten.Broadcast();\n\n}", "CodeBleu_score": 55.17278085040185}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\tif (CurrentSaveGame) {\n\t\tCurrentSaveGame->ClearSaveData();\n\t\tCurrentSaveGame->SaveGameName = SaveGameName;\n\t\tCurrentSaveGame->SaveGameDescription = SaveGameDescription;\n\t\tCurrentSaveGame->SaveGameThumbnail = SaveGameThumbnail;\n\t\tCurrentSaveGame->SaveGameDateTime = FDateTime::Now();\n\n\t\tCurrentSaveGame->SaveGameVersion = SaveGameVersion;\n\n\t\tUWorld* World = GetWorld();\n\t\tif (World) {\n\t\t\tAGameStateBase* GameState = World->GetGameState();\n\t\t\tif (GameState) {\n\t\t\t\tfor (int32 i = 0; i < GameState->PlayerArray.Num(); ++i) {\n\t\t\t\t\tAPlayerState* PlayerState = GameState->PlayerArray[i];\n\t\t\t\t\tif (PlayerState) {\n\t\t\t\t\t\tCurrentSaveGame->SavePlayerState(PlayerState);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (TActorIterator<AActor> ActorIter(World); ActorIter; ++ActorIter) {\n\t\t\t\tAActor* Actor = *ActorIter;\n\t\t\t\tif (Actor) {\n\t\t\t\t\tISGameplayInterface* GameplayInterface = Cast<ISGameplayInterface>(Actor);\n\t\t\t\t\tif (GameplayInterface) {\n\t\t\t\t\t\tif (GameplayInterface->IsSaveable()) {\n\t\t\t\t\t\t\tCurrentSaveGame->SaveActor(Actor);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tCurrentSaveGame->WriteSaveGame();\n\t\t}\n\t}\n\n\tOnSaveGameComplete.Broadcast();\n}", "CodeBleu_score": 48.86115444843624}]}
{"instance_id": "0d7043a0bff0", "generation_result": [{"code": "void FrameworkConfig::draw_themes(){\n\t    if (ImGui::Begin(\"Theme\", &show_theme_window)) {\n        ImGui::Text(\"Theme\");\n        ImGui::Separator();\n        ImGui::RadioButton(\"Dark\", &theme, 0);\n        ImGui::RadioButton(\"Light\", &theme, 1);\n        ImGui::RadioButton(\"Classic\", &theme, 2);\n        ImGui::Separator();\n        ImGui::Text(\"Font Size\");\n        ImGui::SliderFloat(\"\", &font_size, 10, 30);\n        ImGui::Separator();\n        ImGui::Text(\"Font\");\n        ImGui::Text(\"Current: %s\", font.c_str());\n        ImGui::InputText(\"\", font_buffer, 100);\n        if (ImGui::Button(\"Set\")) {\n            font = font_buffer;\n        }\n        ImGui::SameLine();\n        if (ImGui::Button(\"Default\")) {\n            font = \"fonts/arial.ttf\";\n        }\n    }\n    ImGui::End();\n}", "CodeBleu_score": 41.38470100351782}, {"code": "void FrameworkConfig::draw_themes(){\n\t    ImGui::Begin(\"Themes\", nullptr, ImGuiWindowFlags_AlwaysAutoResize);\n    ImGui::Text(\"Theme:\");\n    ImGui::SameLine();\n    if (ImGui::Combo(\"##theme\", &this->theme_index, this->themes.data(), this->themes.size())) {\n        this->set_theme(this->theme_index);\n    }\n    ImGui::Text(\"Font size:\");\n    ImGui::SameLine();\n    if (ImGui::SliderFloat(\"##font_size\", &this->font_size, 8.0f, 48.0f)) {\n        this->update_font_size();\n    }\n    ImGui::End();\n}", "CodeBleu_score": 39.28404811418304}, {"code": "void FrameworkConfig::draw_themes(){\n\t    ImGui::Begin(\"Theme Settings\");\n    ImGui::Text(\"Theme\");\n    ImGui::SameLine();\n    ImGui::PushItemWidth(100);\n    if (ImGui::BeginCombo(\"##Theme\", theme_names[theme_index])) {\n        for (int i = 0; i < theme_count; i++) {\n            bool is_selected = (theme_index == i);\n            if (ImGui::Selectable(theme_names[i], is_selected))\n                theme_index = i;\n            if (is_selected)\n                ImGui::SetItemDefaultFocus();\n        }\n        ImGui::EndCombo();\n    }\n    ImGui::PopItemWidth();\n    ImGui::Text(\"Font Size\");\n    ImGui::SameLine();\n    ImGui::PushItemWidth(100);\n    if (ImGui::InputInt(\"##FontSize\", &font_size)) {\n        if (font_size < 10)\n            font_size = 10;\n        if (font_size > 20)\n            font_size = 20;\n        ImGui::GetIO().FontGlobalScale = (float)font_size / 10.0f;\n    }\n    ImGui::PopItemWidth();\n    ImGui::End();\n}", "CodeBleu_score": 36.78348109653772}]}
{"instance_id": "e7f81d1dee95", "generation_result": [{"code": "void FrameworkConfig::draw_main() {\n\t    ImGui::Text(\"Framework Settings\");\n    ImGui::Separator();\n    ImGui::Text(\"Menu Key: %s\", menu_key_name.c_str());\n    ImGui::Text(\"Show Cursor Key: %s\", show_cursor_key_name.c_str());\n    ImGui::Text(\"Remember Menu State: %s\", remember_menu_state ? \"true\" : \"false\");\n    ImGui::Text(\"L3 + R3 Toggle: %s\", l3_r3_toggle ? \"true\" : \"false\");\n    ImGui::Text(\"Always Show Cursor: %s\", always_show_cursor ? \"true\" : \"false\");\n    ImGui::Text(\"Log Level: %s\", log_level_name.c_str());\n}", "CodeBleu_score": 49.718024892119075}, {"code": "void FrameworkConfig::draw_main() {\n\t    ImGui::PushItemWidth(150);\n    ImGui::InputText(\"Menu Key\", &menu_key_str, ImGuiInputTextFlags_CharsUppercase | ImGuiInputTextFlags_CharsNoBlank);\n    ImGui::InputText(\"Show Cursor Key\", &show_cursor_key_str, ImGuiInputTextFlags_CharsUppercase | ImGuiInputTextFlags_CharsNoBlank);\n    ImGui::Checkbox(\"Remember Menu State\", &remember_menu_state);\n    ImGui::Checkbox(\"L3 + R3 Toggle\", &enable_l3_r3_toggle);\n    ImGui::Checkbox(\"Always Show Cursor\", &always_show_cursor);\n    ImGui::PopItemWidth();\n\n    ImGui::Text(\"Log Level\");\n    ImGui::SameLine();\n    ImGui::PushItemWidth(150);\n    ImGui::Combo(\"##Log Level\", &log_level_idx, log_level_strs, IM_ARRAYSIZE(log_level_strs));\n    ImGui::PopItemWidth();\n\n    if (log_level_idx != prev_log_level_idx) {\n        spdlog::set_level(static_cast<spdlog::level::level_enum>(log_level_idx));\n        prev_log_level_idx = log_level_idx;\n    }\n}", "CodeBleu_score": 34.949848590648955}, {"code": "void FrameworkConfig::draw_main() {\n\t    if (ImGui::Button(\"Save\")) {\n        this->save();\n    }\n    ImGui::SameLine();\n    if (ImGui::Button(\"Load\")) {\n        this->load();\n    }\n    ImGui::SameLine();\n    if (ImGui::Button(\"Reset\")) {\n        this->reset();\n    }\n    ImGui::Separator();\n    ImGui::Text(\"Menu key:\");\n    if (ImGui::Button(\"D-Pad Up\")) {\n        this->menu_key = MenuKey::D_PAD_UP;\n    }\n    ImGui::SameLine();\n    if (ImGui::Button(\"D-Pad Down\")) {\n        this->menu_key = MenuKey::D_PAD_DOWN;\n    }\n    ImGui::SameLine();\n    if (ImGui::Button(\"D-Pad Left\")) {\n        this->menu_key = MenuKey::D_PAD_LEFT;\n    }\n    ImGui::SameLine();\n    if (ImGui::Button(\"D-Pad Right\")) {\n        this->menu_key = MenuKey::D_PAD_RIGHT;\n    }\n    ImGui::SameLine();\n    if (ImGui::Button(\"L3\")) {\n        this->menu_key = MenuKey::L3;\n    }\n    ImGui::SameLine();\n    if (ImGui::Button(\"R3\")) {\n        this->menu_key = MenuKey::R3;\n    }\n    ImGui::SameLine();\n    if (ImGui::Button(\"Circle\")) {\n        this->menu_key = MenuKey::CIRCLE;\n    }\n    ImGui::SameLine();\n    if (ImGui::Button(\"Cross\")) {\n        this->menu_key = MenuKey::CROSS;\n    }\n    ImGui::SameLine();\n    if (ImGui::Button(\"Square\")) {\n        this->menu_key = MenuKey::SQUARE;\n    }\n    ImGui::SameLine();\n    if (ImGui::Button(\"Triangle\")) {\n        this->menu_key = MenuKey::TRIANGLE;\n   ", "CodeBleu_score": 39.58962201328385}]}
{"instance_id": "83fa7f401579", "generation_result": [{"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\n\t// Clear the file data.\n\tClear();\n\n\t// If the file path is actually a text buffer, set the OSM file path to the text buffer.\n\tif ( bIsFilePathActuallyTextBuffer ) {\n\n\t\tOSMFileTextBuffer = OSMFilePath;\n\t\tOSMFilePath = TEXT( \"Text Buffer\" );\n\n\t}\n\n\t// Create an FFastXml parser.\n\tFFastXml* Parser = new FFastXml();\n\n\t// Set the FFastXml parser's error handler.\n\tParser->SetErrorHandler( [ FeedbackContext, OSMFilePath ]( const FString& ErrorMessage ) {\n\n\t\t// Log an error message with the error details.\n\t\tif ( FeedbackContext ) {\n\n\t\t\tFeedbackContext->Logf( ELogVerbosity::Error, TEXT( \"Error parsing OpenStreetMap XML file \\\"%s\\\": %s\" ), *OSMFilePath, *ErrorMessage );\n\n\t\t}\n\n\t} );\n\n\t// Set the FFastXml parser's element handler.\n\tParser->SetElementHandler( [ this, FeedbackContext, OSMFilePath ]( const FString& ElementName, const FString& ElementData, const TCHAR* ElementDataStart, const TCHAR* ElementDataEnd ) {\n\n\t\t// If the element name is \"bounds\", process the bounds data.\n\t\tif ( ElementName == TEXT( \"bounds\" ) ) {\n\n\t\t\t// Process the bounds data.\n\t\t\tProcessBoundsData( ElementData );\n\n\t\t}\n\n\t\t// If the element name is \"node\", process the node data.\n\t\telse if ( ElementName == TEXT( \"node\" ) ) {\n\n\t\t\t// Process the node data.\n\t\t\tProcessNodeData( ElementData );\n\n\t\t}\n\n\t\t// If the element name is \"way\", process the way data.\n\t\telse if ( ElementName == TEXT( \"way\" ) ) {\n\n\t\t\t// Process the way data.\n\t\t\tProcessWayData( ElementData );\n\n\t\t}\n\n\t\t// If the element name is \"relation\", process the relation", "CodeBleu_score": 45.000182173119484}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\n\t// Check if the file path is valid\n\tif( OSMFilePath.IsEmpty() ) {\n\n\t\tif( FeedbackContext != nullptr ) {\n\n\t\t\tFeedbackContext->Logf( ELogVerbosity::Error, TEXT( \"FOSMFile::LoadOpenStreetMapFile: File path is empty.\" ) );\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t// Create the XML parser\n\tFFastXml* Parser = FFastXml::CreateInstance();\n\n\t// Create a new FOSMFile object\n\tFOSMFile* OSMFile = new FOSMFile();\n\n\t// Set the FOSMFile object as the parser's user data\n\tParser->SetUserData( OSMFile );\n\n\t// Set the element callbacks\n\tParser->SetElementCallback( \"node\", FOSMFile::StartNodeElement, FOSMFile::EndNodeElement );\n\tParser->SetElementCallback( \"way\", FOSMFile::StartWayElement, FOSMFile::EndWayElement );\n\tParser->SetElementCallback( \"tag\", FOSMFile::StartTagElement, FOSMFile::EndTagElement );\n\tParser->SetElementCallback( \"nd\", FOSMFile::StartNdElement, FOSMFile::EndNdElement );\n\n\t// Set the attribute callbacks\n\tParser->SetAttributeCallback( \"id\", FOSMFile::NodeIdAttribute, FOSMFile::WayIdAttribute, FOSMFile::NdRefAttribute );\n\tParser->SetAttributeCallback( \"lat\", FOSMFile::NodeLatAttribute, nullptr, nullptr );\n\tParser->SetAttributeCallback( \"lon\", FOSMFile::NodeLonAttribute, nullptr, nullptr );\n\tParser->SetAttributeCallback( \"k\", FOSMFile::TagKeyAttribute, nullptr, nullptr );\n\tParser->SetAttributeCallback( \"v\", FOSMFile::TagValueAttribute, nullptr, nullptr );\n\n\t// Set the character callback\n\tParser->SetCharacterCallback( FOSMFile::CharacterData );\n\n\t// Set the parse error callback\n\tParser->SetParseErrorCallback( FOSMFile::ParseError );", "CodeBleu_score": 35.49598253023654}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\n\t// Setup the XML parser.\n\tFFastXml* Parser = FFastXml::Create_Empty();\n\tParser->SetFeedbackContext( FeedbackContext );\n\n\t// Setup the file reader.\n\tTArray<uint8> FileData;\n\tIFileManager::Get().LoadFileToArray( FileData, *OSMFilePath );\n\tFFileAdapter FileReader( FileData );\n\n\t// Parse the XML file.\n\tParser->Parse( FileReader, bIsFilePathActuallyTextBuffer );\n\n\t// Check if the parse was successful.\n\tif ( Parser->GetLastError() != FParseError::eNoError ) {\n\n\t\t// Log an error message with the parse error details.\n\t\tUE_LOG( LogTemp, Error, TEXT( \"FOSMFile::LoadOpenStreetMapFile: Failed to parse OpenStreetMap file: %s\" ), *Parser->GetLastErrorDescription() );\n\n\t\t// Destroy the parser.\n\t\tParser->Destroy();\n\n\t\t// Return false.\n\t\treturn false;\n\n\t}\n\n\t// Get the root node.\n\tFFastXmlNode* RootNode = Parser->GetRootNode();\n\n\t// Check if the root node is valid.\n\tif ( RootNode == nullptr ) {\n\n\t\t// Log an error message.\n\t\tUE_LOG( LogTemp, Error, TEXT( \"FOSMFile::LoadOpenStreetMapFile: Failed to parse OpenStreetMap file: Root node is null.\" ) );\n\n\t\t// Destroy the parser.\n\t\tParser->Destroy();\n\n\t\t// Return false.\n\t\treturn false;\n\n\t}\n\n\t// Get the root node name.\n\tFString RootNodeName = RootNode->GetTag();\n\n\t// Check if the root node name is valid.\n\tif ( RootNodeName.IsEmpty() ) {\n\n\t\t// Log an error message.\n\t\tUE_LOG( LogTemp, Error, TEXT( \"FOSMFile::LoadOpenStreetMapFile: Failed to parse OpenStreetMap file: Root node name is empty.\" ) );\n\n\t\t// Destroy the parser.\n\t\tParser", "CodeBleu_score": 42.3707295739436}]}
{"instance_id": "7349d775edf6", "generation_result": [{"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tif (Asset != nullptr && NewActor != nullptr) {\n\t\tif (UStreetMap* StreetMap = Cast<UStreetMap>(Asset)) {\n\t\t\tAStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor);\n\t\t\tif (StreetMapActor != nullptr) {\n\t\t\t\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\t\t\t\tif (StreetMapComponent != nullptr) {\n\t\t\t\t\tStreetMapComponent->SetStreetMap(StreetMap);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 73.33856943714137}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tif (Asset != nullptr && NewActor != nullptr) {\n\t\tUStreetMap* StreetMap = Cast<UStreetMap>(Asset);\n\t\tif (StreetMap != nullptr) {\n\t\t\tAStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor);\n\t\t\tif (StreetMapActor != nullptr) {\n\t\t\t\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\t\t\t\tif (StreetMapComponent != nullptr) {\n\t\t\t\t\tStreetMapComponent->SetStreetMap(StreetMap);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 68.19081914323071}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tif (UStreetMap* StreetMap = Cast<UStreetMap>(Asset)) {\n\t\tif (AStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor)) {\n\t\t\tif (UStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent()) {\n\t\t\t\tStreetMapComponent->SetStreetMap(StreetMap);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 70.49186824808955}]}
{"instance_id": "f160ac6d0353", "generation_result": [{"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tif (StreetMapComponent.IsValid()) {\n\t\tStreetMapComponent->BuildMesh();\n\t\tDetailBuilder->ForceRefreshDetails();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 62.215118166641695}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\n\tTArray<TWeakObjectPtr<UObject>> SelectedObjects;\n\n\tIDetailsView* DetailsView = PropertyEditor->GetDetailsView();\n\n\tDetailsView->GetSelectedObjects(SelectedObjects);\n\n\tif (SelectedObjects.Num() > 0) {\n\n\t\tfor (int32 i = 0; i < SelectedObjects.Num(); i++) {\n\n\t\t\tUStreetMapComponent* StreetMapComponent = Cast<UStreetMapComponent>(SelectedObjects[i].Get());\n\n\t\t\tif (StreetMapComponent) {\n\n\t\t\t\tStreetMapComponent->BuildMesh();\n\n\t\t\t\tDetailsView->SetObject(StreetMapComponent);\n\n\t\t\t\treturn FReply::Handled();\n\t\t\t}\n\t\t}\n\t}\n\n\treturn FReply::Unhandled();\n}", "CodeBleu_score": 46.870843730492695}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tif (SelectedComponents.Num() == 1) {\n\t\tUStreetMapComponent* StreetMapComponent = Cast<UStreetMapComponent>(SelectedComponents[0].GetComponent());\n\t\tif (StreetMapComponent) {\n\t\t\tStreetMapComponent->BuildMesh();\n\t\t\tFPropertyEditorModule& PropertyModule = FModuleManager::GetModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\t\t\tPropertyModule.NotifyCustomizationModuleChanged();\n\t\t}\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 51.5483386694637}]}
{"instance_id": "b23f1f2b29fa", "generation_result": [{"code": "void FStreetMapImportingModule::StartupModule(){\n\t\n\t// Register the StreetMap asset type with the asset tools\n\tIAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n\tRegisterAssetTypeAction(AssetTools, MakeShareable(new FStreetMapAssetTypeActions(AssetTools.GetStyleSetName())));\n\n\t// Initialize the StreetMap style\n\tInitializeStreetMapStyle();\n\n\t// Register a custom class layout for the StreetMapComponent in the property editor module\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout(UStreetMapComponent::StaticClass()->GetFName(), FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n\n\t// Notify the property editor module that the customization module has changed\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 69.26378180602964}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t\n\t// Register asset types\n\tIAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n\n\tTSharedRef<IAssetTypeActions> StreetMapAssetTypeActions = MakeShareable(new FStreetMapAssetTypeActions);\n\tAssetTools.RegisterAssetTypeActions(StreetMapAssetTypeActions);\n\n\t// Register the custom class layout for the StreetMapComponent\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout(UStreetMapComponent::StaticClass()->GetFName(), FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n\n\t// Notify the property editor that the customization module has changed\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 67.29900657708663}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t\t// Register asset types\n\tIAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n\n\t// Register the StreetMap asset type\n\tRegisterAssetTypeAction(AssetTools, MakeShareable(new FStreetMapAssetTypeActions(EAssetTypeCategories::Misc)));\n}", "CodeBleu_score": 28.453677081955032}]}
{"instance_id": "1da549fe84e3", "generation_result": [{"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\t\n\t// If the component has a valid mesh, instantiate a new FStreetMapSceneProxy, initialize it with the component's vertices and indices, and return the proxy.\n\tif (Mesh) {\n\t\t\n\t\tFStreetMapSceneProxy* SceneProxy = new FStreetMapSceneProxy(this);\n\t\t\n\t\t// Initialize the scene proxy's vertices.\n\t\tTArray<FDynamicMeshVertex> Vertices;\n\t\tVertices.SetNum(Mesh->Vertices.Num());\n\t\tfor (int32 VertexIndex = 0; VertexIndex < Mesh->Vertices.Num(); VertexIndex++) {\n\t\t\t\n\t\t\t// Get the vertex.\n\t\t\tFStreetMapVertex Vertex = Mesh->Vertices[VertexIndex];\n\t\t\t\n\t\t\t// Set the vertex's position.\n\t\t\tVertices[VertexIndex].Position = FVector(Vertex.Position.X, Vertex.Position.Y, 0.0f);\n\t\t\t\n\t\t\t// Set the vertex's texture coordinate.\n\t\t\tVertices[VertexIndex].TextureCoordinate[0] = FVector2D(Vertex.TextureCoordinate.X, Vertex.TextureCoordinate.Y);\n\t\t\t\n\t\t\t// Set the vertex's color.\n\t\t\tVertices[VertexIndex].Color = FColor::White;\n\t\t\t\n\t\t}\n\t\t\n\t\t// Initialize the scene proxy's indices.\n\t\tTArray<uint32> Indices;\n\t\tIndices.SetNum(Mesh->Indices.Num());\n\t\tfor (int32 Index = 0; Index < Mesh->Indices.Num(); Index++) {\n\t\t\tIndices[Index] = Mesh->Indices[Index];\n\t\t}\n\t\t\n\t\t// Initialize the scene proxy's material.\n\t\tUMaterialInterface* Material = nullptr;\n\t\tif (MeshComponent) {\n\t\t\tMaterial = MeshComponent->GetMaterial(0);\n\t\t}\n\t\t\n\t\t// Initialize the scene proxy.\n\t\tSceneProxy->Init(Vertices, Indices, Material);\n\t", "CodeBleu_score": 41.783040699793474}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\n\tif (Mesh) {\n\n\t\tFStreetMapSceneProxy* StreetMapSceneProxy = new FStreetMapSceneProxy(this);\n\n\t\treturn StreetMapSceneProxy;\n\n\t}\n\n\treturn nullptr;\n\n}", "CodeBleu_score": 37.3222519786389}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\n\tif (Mesh) {\n\t\tFStreetMapSceneProxy* Proxy = new FStreetMapSceneProxy(this);\n\t\treturn Proxy;\n\t}\n\n\treturn nullptr;\n}", "CodeBleu_score": 29.08029792737048}]}
{"instance_id": "d0ee3b2e023e", "generation_result": [{"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\n\tTArray<FAFAbilityInputID> InputIDs;\n\tInputIDs.Add(FAFAbilityInputID::Ability01);\n\n\tAbilitySystemComponent->BindAbilityActivationToInputComponent(InputIDs, TestAbility01Handle);\n}", "CodeBleu_score": 55.87018144783866}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\tTArray<FAFAbilityInputID> AbilityInputIDs;\n\tAbilityInputIDs.Add(FAFAbilityInputID(EFAAbilityInputID::Ability01));\n\tAbilitySpecSystem->BindAbilityToInputIDs(Spec, AbilityInputIDs, ServerHandle);\n}", "CodeBleu_score": 57.20605014732602}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\tTArray<FAFAbilityInputID> Ability01InputIDs;\n\tAbility01InputIDs.Add(EFAAbilityInputID::Ability01);\n\tAbility01InputIDs.Add(EFAAbilityInputID::Ability01_Server);\n\tAbility01InputIDs.Add(EFAAbilityInputID::Ability01_Client);\n\tAbility01InputIDs.Add(EFAAbilityInputID::Ability01_Alt);\n\tAbility01InputIDs.Add(EFAAbilityInputID::Ability01_Alt_Server);\n\tAbility01InputIDs.Add(EFAAbilityInputID::Ability01_Alt_Client);\n\tAbility01InputIDs.Add(EFAAbilityInputID::Ability01_Alt2);\n\tAbility01InputIDs.Add(EFAAbilityInputID::Ability01_Alt2_Server);\n\tAbility01InputIDs.Add(EFAAbilityInputID::Ability01_Alt2_Client);\n\tAbility01InputIDs.Add(EFAAbilityInputID::Ability01_Alt3);\n\tAbility01InputIDs.Add(EFAAbilityInputID::Ability01_Alt3_Server);\n\tAbility01InputIDs.Add(EFAAbilityInputID::Ability01_Alt3_Client);\n\tAbility01InputIDs.Add(EFAAbilityInputID::Ability01_Alt4);\n\tAbility01InputIDs.Add(EFAAbilityInputID::Ability01_Alt4_Server);\n\tAbility01InputIDs.Add(EFAAbilityInputID::Ability01_Alt4_Client);\n\tAbility01InputIDs.Add(EFAAbilityInputID::Ability01_Alt5);\n\tAbility01InputIDs.Add(EFAAbilityInputID::Ability01_Alt5_Server);\n\tAbility01InputIDs.Add(", "CodeBleu_score": 45.30859538322077}]}
{"instance_id": "e62f1b2cd4bd", "generation_result": [{"code": "void AARCharacter::MoveForward(float Value){\n\t\tif (Controller != nullptr && Value != 0.0f) {\n\t\t// find out which way is forward\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// get forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 85.1273627571628}, {"code": "void AARCharacter::MoveForward(float Value){\n\t\n\tif (Controller != nullptr && Value != 0.0f) {\n\n\t\t// find out which way is forward\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// get forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\n\t}\n\n}", "CodeBleu_score": 85.1270921526908}, {"code": "void AARCharacter::MoveForward(float Value){\n\t\n\tif (Controller != nullptr && Value != 0.0f) {\n\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\n\t\tAddMovementInput(Direction, Value);\n\n\t}\n\n}", "CodeBleu_score": 85.1270921526908}]}
{"instance_id": "a77cdc67ee00", "generation_result": [{"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\n\tif (!MainWeapon) {\n\t\treturn GetMesh()->GetSocketLocation(Socket);\n\t}\n\telse {\n\t\treturn MainWeapon->GetMesh()->GetSocketLocation(Socket);\n\t}\n\n}", "CodeBleu_score": 46.535003170877914}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\n\tif (MainWeapon) {\n\t\tif (MainWeapon->GetMeshComponent()) {\n\t\t\treturn MainWeapon->GetMeshComponent()->GetSocketLocation(Socket);\n\t\t}\n\t}\n\n\treturn GetMesh()->GetSocketLocation(Socket);\n}", "CodeBleu_score": 52.95639932724424}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\t\n\tif (MainWeapon) {\n\t\t\n\t\tif (MainWeapon->GetMesh()) {\n\t\t\t\n\t\t\treturn MainWeapon->GetMesh()->GetSocketLocation(Socket);\n\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\treturn GetMesh()->GetSocketLocation(Socket);\n\t\n}", "CodeBleu_score": 50.818971383326364}]}
{"instance_id": "f021203f736a", "generation_result": [{"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tSpawnedEnemies.Remove(InEnemy);\n\tif (SpawnedEnemies.Num() < MinSpawnedEnemies) {\n\t\tSetCanSpawnEnemies(true);\n\t}\n}", "CodeBleu_score": 52.92138684355909}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\n\tif (InEnemy) {\n\n\t\tSpawnedEnemies.Remove(InEnemy);\n\n\t\tif (SpawnedEnemies.Num() < MinSpawnedEnemies) {\n\n\t\t\tbShouldSpawnEnemies = true;\n\t\t}\n\t}\n}", "CodeBleu_score": 53.88482282427305}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tif (InEnemy) {\n\t\tSpawnedEnemies.Remove(InEnemy);\n\t\tif (SpawnedEnemies.Num() < MinSpawnedEnemies) {\n\t\t\tSetUpSpawnTimer();\n\t\t}\n\t}\n}", "CodeBleu_score": 58.262410801172294}]}
{"instance_id": "dbab72cb539f", "generation_result": [{"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\n\tFString result = Super::ApproveLogin(Options);\n\n\tTArray<FString> Parsed;\n\tOptions.ParseIntoArray(Parsed, TEXT(\"&\"), true);\n\n\tfor (FString& str : Parsed) {\n\t\tif (str.StartsWith(TEXT(\"PlayerId=\"))) {\n\t\t\tstr.Split(TEXT(\"=\"), NULL, &PlayerId);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn result;\n}", "CodeBleu_score": 57.39662257191929}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\tFString result = Super::ApproveLogin(Options);\n\n\t// parse the options string into an array of parameters\n\tTArray<FString> parsed;\n\tOptions.ParseIntoArray(parsed, TEXT(\"&\"), true);\n\n\t// search for the \"PlayerId\" parameter\n\tfor (FString param : parsed) {\n\t\t// split the parameter into a key and value\n\t\tTArray<FString> split;\n\t\tparam.Split(TEXT(\"=\"), &split, ESearchCase::IgnoreCase, ESearchDir::FromStart);\n\n\t\tif (split.Num() == 2) {\n\t\t\t// if the key is PlayerId, store the value\n\t\t\tif (split[0] == TEXT(\"PlayerId\")) {\n\t\t\t\tplayerId = split[1];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n}", "CodeBleu_score": 54.1260419176826}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\n\tFString Result = Super::ApproveLogin(Options);\n\n\tTArray<FString> Parsed;\n\n\tOptions.ParseIntoArray(Parsed, TEXT(\"&\"), true);\n\n\tfor (FString& Param : Parsed) {\n\n\t\tTArray<FString> KeyValue;\n\n\t\tParam.ParseIntoArray(KeyValue, TEXT(\"=\"), true);\n\n\t\tif (KeyValue.Num() == 2) {\n\n\t\t\tif (KeyValue[0] == \"PlayerId\") {\n\n\t\t\t\tPlayerId = KeyValue[1];\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn Result;\n\n}", "CodeBleu_score": 53.52209448061771}]}
{"instance_id": "85ea02df92a5", "generation_result": [{"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tFString Username = UsernameInput->GetText().ToString();\n\tFString DisplayName = DisplayNameInput->GetText().ToString();\n\tFString Password = PasswordInput->GetText().ToString();\n\n\tif (Username.IsEmpty()) {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, TEXT(\"Username field cannot be empty.\"));\n\t\treturn;\n\t}\n\tif (DisplayName.IsEmpty()) {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, TEXT(\"Display name field cannot be empty.\"));\n\t\treturn;\n\t}\n\tif (Password.IsEmpty()) {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, TEXT(\"Password field cannot be empty.\"));\n\t\treturn;\n\t}\n\n\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\tARGameInstance* GameInstance = Cast<ARGameInstance>(GetWorld()->GetGameInstance());\n\tGameInstance->RegisterNewPlayer(Username, DisplayName, Password);\n}", "CodeBleu_score": 57.74441591418425}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t\n\t//Get the username and password from the input fields\n\tFString Username = UsernameInput->GetText().ToString();\n\tFString DisplayName = DisplayNameInput->GetText().ToString();\n\tFString Password = PasswordInput->GetText().ToString();\n\n\t//Check if any of the fields are empty\n\tif (Username.IsEmpty() || DisplayName.IsEmpty() || Password.IsEmpty()) {\n\n\t\t//Display a warning message\n\t\tOnWarningMessage(\"All fields must be filled in.\");\n\n\t\treturn;\n\t}\n\n\t//Hide the register button\n\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\n\t//Call the RegisterNewPlayer method from the game instance to register the new player\n\tCast<UARGameInstance>(GetWorld()->GetGameInstance())->RegisterNewPlayer(Username, DisplayName, Password);\n}", "CodeBleu_score": 42.631751164380645}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tFString username = UsernameField->GetText().ToString();\n\tFString displayName = DisplayNameField->GetText().ToString();\n\tFString password = PasswordField->GetText().ToString();\n\n\tif (username.IsEmpty()) {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, \"Username cannot be empty!\");\n\t\treturn;\n\t}\n\tif (displayName.IsEmpty()) {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, \"Display name cannot be empty!\");\n\t\treturn;\n\t}\n\tif (password.IsEmpty()) {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, \"Password cannot be empty!\");\n\t\treturn;\n\t}\n\n\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\tRegisterButton->SetIsEnabled(false);\n\n\tUARGameInstance* gameInstance = Cast<UARGameInstance>(GetGameInstance());\n\tgameInstance->RegisterNewPlayer(username, displayName, password);\n}", "CodeBleu_score": 54.62988316534339}]}
{"instance_id": "b33bb5886dd9", "generation_result": [{"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\n\tif (!InMod.Target.IsValid()) {\n\t\treturn;\n\t}\n\n\tconst FVector2D ScreenLocation = ProjectLocationToScreen(InMod.Target->GetActorLocation());\n\n\tif (ScreenLocation.IsZero()) {\n\t\treturn;\n\t}\n\n\tconst float Damage = InMod.NewValue;\n\n\tif (Damage <= 0.0f) {\n\t\treturn;\n\t}\n\n\tconst FString DamageString = FString::SanitizeFloat(Damage);\n\n\tARHUDFloatingCombatText* FloatingCombatText = ARHUDFloatingCombatText::CreateFloatingCombatText(this, FVector2D(ScreenLocation.X, ScreenLocation.Y), FText::FromString(DamageString), true);\n\n\tif (FloatingCombatText) {\n\t\tFloatingCombatText->SetTextColor(FLinearColor::Red);\n\t\tFloatingCombatText->SetTextSize(24.0f);\n\t}\n}", "CodeBleu_score": 35.17308097089592}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\n\tif (InMod.TargetActor.IsValid()) {\n\n\t\tFVector2D ScreenLocation;\n\n\t\tif (UGameplayStatics::ProjectWorldToScreen(GetOwningPlayerController(), InMod.TargetActor->GetActorLocation(), ScreenLocation)) {\n\n\t\t\tARHUDFloatingCombatText* FloatingCombatText = GetWorld()->SpawnActor<ARHUDFloatingCombatText>(ARHUDFloatingCombatText::StaticClass(), FVector::ZeroVector, FRotator::ZeroRotator);\n\n\t\t\tif (FloatingCombatText) {\n\n\t\t\t\tFloatingCombatText->SetDamageValue(InMod.NewValue);\n\t\t\t\tFloatingCombatText->SetScreenLocation(ScreenLocation);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 33.408547955666556}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\n\tif (InMod.TargetActor) {\n\n\t\tFVector2D ScreenLocation;\n\n\t\tif (ProjectWorldLocationToScreen(InMod.TargetActor->GetActorLocation(), ScreenLocation)) {\n\n\t\t\tARHUDFloatingCombatText* FloatingCombatText = GetWorld()->SpawnActor<ARHUDFloatingCombatText>(FloatingCombatTextClass);\n\n\t\t\tif (FloatingCombatText) {\n\n\t\t\t\tFloatingCombatText->SetDamage(InMod.NewValue);\n\n\t\t\t\tFloatingCombatText->SetScreenLocation(ScreenLocation);\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}", "CodeBleu_score": 33.953640282233124}]}
{"instance_id": "177d36e7e076", "generation_result": [{"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\n\tif (InMagazineUpgrade) {\n\n\t\tUARWeaponInventoryComponent* WeaponComponent = Cast<UARWeaponInventoryComponent>(GetInventoryComponent());\n\t\tif (WeaponComponent) {\n\t\t\tAARCharacter* Character = Cast<AARCharacter>(WeaponComponent->GetOwner());\n\t\t\tif (Character) {\n\t\t\t\tif (Character->HasAuthority()) {\n\t\t\t\t\tMagazineUpgrades.Add(InMagazineUpgrade);\n\t\t\t\t\tMagazineUpgrades.Last()->ApplyUpgrade(this);\n\t\t\t\t\tOnMagazineUpdateAdded(InMagazineUpgrade);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 46.805907688992484}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\n\tif (InMagazineUpgrade == nullptr) { return; }\n\n\tif (AbilityInstance == nullptr) { return; }\n\n\tif (WeaponComponent == nullptr) { return; }\n\n\tif (WeaponComponent->GetOwner() == nullptr) { return; }\n\n\tif (WeaponComponent->GetOwner()->IsA(AARCharacter::StaticClass())) {\n\n\t\tAARCharacter* Character = Cast<AARCharacter>(WeaponComponent->GetOwner());\n\n\t\tif (Character == nullptr) { return; }\n\n\t\tif (Character->IsLocallyControlled()) {\n\n\t\t\tif (Character->InventoryComponent == nullptr) { return; }\n\n\t\t\tif (!Character->InventoryComponent->RemoveItem(InMagazineUpgrade)) { return; }\n\n\t\t}\n\n\t}\n\n\tUARMagazineUpgradeItem* MagazineUpgrade = DuplicateObject<UARMagazineUpgradeItem>(InMagazineUpgrade, this);\n\n\tif (MagazineUpgrade == nullptr) { return; }\n\n\tMagazineUpgrades.Add(MagazineUpgrade);\n\n\tif (AbilityInstance->GetOwner() == nullptr) { return; }\n\n\tif (AbilityInstance->GetOwner()->IsA(AARCharacter::StaticClass())) {\n\n\t\tAARCharacter* Character = Cast<AARCharacter>(AbilityInstance->GetOwner());\n\n\t\tif (Character == nullptr) { return; }\n\n\t\tif (Character->IsLocallyControlled()) {\n\n\t\t\tif (Character->InventoryComponent == nullptr) { return; }\n\n\t\t\tif (!Character->InventoryComponent->RemoveItem(MagazineUpgrade)) { return; }\n\n\t\t}\n\n\t}\n\n\tif (AbilityInstance->GetOwner()->IsA(AARCharacter::StaticClass())) {\n\n\t\tAARCharacter* Character = Cast<AARCharacter>(AbilityInstance->GetOwner());\n\n\t\tif (Character == nullptr) { return; }\n\n\t\tif (Character->IsLocallyControlled()) {\n\n\t\t\tif (Character->InventoryComponent == null", "CodeBleu_score": 52.50402605491986}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\n\tif (!InMagazineUpgrade) { return; }\n\n\tUARWeaponAbilityBase* AbilityInstance = GetAbilityInstance();\n\n\tif (!AbilityInstance) { return; }\n\n\tUARWeaponInventoryComponent* WeaponComponent = GetWeaponComponent();\n\n\tif (!WeaponComponent) { return; }\n\n\tAARCharacter* Character = WeaponComponent->GetCharacter();\n\n\tif (!Character) { return; }\n\n\tif (Character->HasAuthority()) {\n\n\t\tCharacter->GetInventory()->AddItem(InMagazineUpgrade);\n\n\t\tFARMagazineUpgradeEffect* MagazineUpgradeEffect = InMagazineUpgrade->GetMagazineUpgradeEffect();\n\n\t\tif (MagazineUpgradeEffect) {\n\n\t\t\tAbilityInstance->AddMagazineUpgrade(MagazineUpgradeEffect);\n\t\t}\n\t}\n\n\tOnMagazineUpgradeAdded(InMagazineUpgrade);\n\n}", "CodeBleu_score": 56.3789872566565}]}
{"instance_id": "404276da398b", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\n\tAARCharacter* Owner = Cast<AARCharacter>(GetOwner());\n\n\tif (Owner) {\n\t\tAFAbilityComponent* AbilityComponent = Owner->GetAbilityComponent();\n\t\tif (AbilityComponent) {\n\t\t\tUARWeaponAbilityBase* Ability = Cast<UARWeaponAbilityBase>(AbilityComponent->GetAbilityByHandle(InAbilityTag, LocalIndex));\n\t\t\tif (Ability) {\n\t\t\t\tSetAbilityToItem(Ability, LocalIndex);\n\t\t\t}\n\t\t}\n\t}\n\n}", "CodeBleu_score": 53.43536813132294}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\t\n\tif (!GetOwner())\n\t\treturn;\n\n\tAARCharacter* Character = Cast<AARCharacter>(GetOwner());\n\tif (!Character)\n\t\treturn;\n\n\tAFAbilityComponent* AbilityComponent = Character->GetAbilityComponent();\n\tif (!AbilityComponent)\n\t\treturn;\n\n\tUARWeaponAbilityBase* Ability = AbilityComponent->GetAbilityByHandle(InAbilityTag, LocalIndex);\n\tif (!Ability)\n\t\treturn;\n\n\tSetAbilityToItem(Ability, LocalIndex);\n}", "CodeBleu_score": 58.08831409078415}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\n\tif (!AbilityComponent) {\n\t\tARLOG_WARNING(\"AbilityComponent is not set. Cannot equip weapon ability.\");\n\t\treturn;\n\t}\n\n\tif (!AbilityComponent->GetOwner()) {\n\t\tARLOG_WARNING(\"AbilityComponent does not have an owner. Cannot equip weapon ability.\");\n\t\treturn;\n\t}\n\n\tif (!AbilityComponent->GetOwner()->IsA(AARCharacter::StaticClass())) {\n\t\tARLOG_WARNING(\"AbilityComponent's owner is not an AARCharacter. Cannot equip weapon ability.\");\n\t\treturn;\n\t}\n\n\tif (LocalIndex < 0 || LocalIndex >= ServerWeaponAbilities.Num()) {\n\t\tARLOG_WARNING(\"LocalIndex is out of range. Cannot equip weapon ability.\");\n\t\treturn;\n\t}\n\n\tif (!ServerWeaponAbilities[LocalIndex]) {\n\t\tARLOG_WARNING(\"ServerWeaponAbilities[LocalIndex] is null. Cannot equip weapon ability.\");\n\t\treturn;\n\t}\n\n\tif (!ServerWeaponAbilities[LocalIndex]->IsA(UARWeaponAbilityBase::StaticClass())) {\n\t\tARLOG_WARNING(\"ServerWeaponAbilities[LocalIndex] is not an UARWeaponAbilityBase. Cannot equip weapon ability.\");\n\t\treturn;\n\t}\n\n\tUARWeaponAbilityBase* Ability = Cast<UARWeaponAbilityBase>(ServerWeaponAbilities[LocalIndex]);\n\n\tif (!Ability) {\n\t\tARLOG_WARNING(\"Failed to cast ServerWeaponAbilities[LocalIndex] to UARWeaponAbilityBase. Cannot equip weapon ability.\");\n\t\treturn;\n\t}\n\n\tif (!Ability->GetItem()) {\n\t\tARLOG_WARNING(\"Ability->GetItem() is null. Cannot equip weapon ability.\");\n\t\treturn;\n\t}\n\n\tif (!Ability->GetItem()->IsA(UARItemWeapon::StaticClass())) {\n\t\tARLOG_WARNING(\"Ability->GetItem() is not an UARItemWeapon. Cannot equip weapon ability.\");\n\t\treturn;", "CodeBleu_score": 44.37190709470617}]}
{"instance_id": "2e97aab98981", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\n\tif (LocalIndex == CurrentWeapon) {\n\n\t\tUARCharacter* Character = Cast<UARCharacter>(GetOwner());\n\n\t\tif (Character) {\n\n\t\t\tFARWeaponRPC WeaponRPC;\n\n\t\t\tWeaponRPC.WeaponData = FARWeaponData();\n\n\t\t\tCharacter->GetAbilityComponent()->ServerSetWeaponData(WeaponRPC);\n\n\t\t\tCharacter->GetAbilityComponent()->ServerSetCurrentWeapon(CurrentWeapon);\n\n\t\t}\n\n\t}\n\n}", "CodeBleu_score": 33.410888672456906}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tSuper::OnItemRemoved(LocalIndex);\n\n\tif (LocalIndex >= WeaponData.Num()) {\n\t\treturn;\n\t}\n\n\tAARCharacter* Owner = Cast<AARCharacter>(GetOwner());\n\n\tif (Owner) {\n\t\tFARWeaponRPC WeaponRPC;\n\t\tWeaponRPC.WeaponData = WeaponData[LocalIndex];\n\t\tWeaponRPC.WeaponData.Weapon = nullptr;\n\t\tWeaponRPC.LocalIndex = LocalIndex;\n\n\t\tOwner->GetAbilityComponent()->SetWeaponData(WeaponRPC);\n\n\t\tif (Owner->GetAbilityComponent()->GetCurrentWeapon() == WeaponData[LocalIndex].Weapon) {\n\t\t\tOwner->GetAbilityComponent()->UnequipWeapon();\n\t\t}\n\t}\n}", "CodeBleu_score": 41.24796936319374}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\n\tSuper::OnItemRemoved(LocalIndex);\n\n\tif (LocalIndex == CurrentWeaponIndex) {\n\t\tAARCharacter* Character = Cast<AARCharacter>(GetOwner());\n\t\tif (Character) {\n\t\t\tCharacter->UnequipWeapon();\n\t\t}\n\t}\n}", "CodeBleu_score": 36.250136435621734}]}
{"instance_id": "13cc35e5ecac", "generation_result": [{"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\n\tif (!GIsDedicatedServer) {\n\n\t\tif (UObjectInitialized()) {\n\n\t\t\tUAsyncLoadingScreenLibrary::RemoveOnMoviePlayerPreparationEvent(OnPrepareMoviePlayerHandler);\n\n\t\t\tUAsyncLoadingScreenLibrary::RemoveOnMoviePlayerCleanupEvent(OnCleanupMoviePlayerHandler);\n\n\t\t}\n\n\t}\n\n}", "CodeBleu_score": 18.194891627333632}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\n\tif (!IsRunningDedicatedServer()) {\n\n\t\tUMoviePlayer* MoviePlayer = UMoviePlayer::GetMoviePlayer();\n\n\t\tif (MoviePlayer != nullptr) {\n\n\t\t\tMoviePlayer->RemoveLoadingScreenHandler(LoadingScreenHandler);\n\n\t\t}\n\n\t}\n\n}", "CodeBleu_score": 33.0693627078643}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\n\tif (!IsRunningDedicatedServer()) {\n\n\t\tULoadingScreenSettings* Settings = GetMutableDefault<ULoadingScreenSettings>();\n\n\t\tif (Settings) {\n\n\t\t\tif (Settings->OnMoviePlaybackStarted.IsBoundToObject(this)) {\n\n\t\t\t\tSettings->OnMoviePlaybackStarted.RemoveDynamic(this, &FAsyncLoadingScreenModule::HandleMoviePlaybackStarted);\n\n\t\t\t}\n\n\t\t\tif (Settings->OnMovieClipFinishedPlaying.IsBoundToObject(this)) {\n\n\t\t\t\tSettings->OnMovieClipFinishedPlaying.RemoveDynamic(this, &FAsyncLoadingScreenModule::HandleMovieClipFinishedPlaying);\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}", "CodeBleu_score": 29.036269828161075}]}
{"instance_id": "2ee3ac60a8f3", "generation_result": [{"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"PreSetupLoadingScreen: Preparing the loading screen configuration...\"));\n\n\tif (ULoadingScreenSettings* Settings = GetMutableDefault<ULoadingScreenSettings>()) {\n\t\tif (Settings->bEnabled) {\n\t\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"PreSetupLoadingScreen: Loading screen is enabled.\"));\n\n\t\t\tbStartup = false;\n\t\t\tSetupLoadingScreen(Settings);\n\t\t}\n\t\telse {\n\t\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"PreSetupLoadingScreen: Loading screen is disabled.\"));\n\t\t}\n\t}\n}", "CodeBleu_score": 52.69744224048372}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\n\tUE_LOG(LogTemp, Log, TEXT(\"[LEET] PreSetupLoadingScreen\"));\n\n\tif (ULoadingScreenSettings::Get()->IsEnabled()) {\n\n\t\tUE_LOG(LogTemp, Log, TEXT(\"[LEET] PreSetupLoadingScreen - Loading Screen Enabled\"));\n\n\t\tULoadingScreenSettings::Get()->SetStartup(false);\n\n\t\tSetupLoadingScreen();\n\n\t}\n\n}", "CodeBleu_score": 46.490341892214374}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\n\tUE_LOG(LogTemp, Warning, TEXT(\"[USharp] PreSetupLoadingScreen\"));\n\n\tif (UAsyncLoadingScreenLibrary::GetLoadingScreenSettings().IsEnabled()) {\n\n\t\tUAsyncLoadingScreenLibrary::SetLoadingScreenStartup(false);\n\n\t\tSetupLoadingScreen(UAsyncLoadingScreenLibrary::GetLoadingScreenSettings());\n\n\t}\n\n}", "CodeBleu_score": 32.73320944814355}]}
{"instance_id": "c095588f550c", "generation_result": [{"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\n\t//Remove all existing background images\n\tBackgroundImages.Empty();\n\n\t//Retrieve the loading screen settings\n\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\t//Load and add images for both the startup and default loading screens to their respective lists\n\tfor (int32 i = 0; i < Settings->StartupBackgroundImages.Num(); i++) {\n\t\tUTexture2D* BackgroundTexture = Settings->StartupBackgroundImages[i];\n\t\tif (BackgroundTexture != nullptr) {\n\t\t\tBackgroundImages.Add(BackgroundTexture);\n\t\t}\n\t}\n\tfor (int32 i = 0; i < Settings->DefaultBackgroundImages.Num(); i++) {\n\t\tUTexture2D* BackgroundTexture = Settings->DefaultBackgroundImages[i];\n\t\tif (BackgroundTexture != nullptr) {\n\t\t\tBackgroundImages.Add(BackgroundTexture);\n\t\t}\n\t}\n\n}", "CodeBleu_score": 58.87684661181611}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\t// Remove all existing background images.\n\tBackgroundImages.Empty();\n\n\t// Get the loading screen settings.\n\tULoadingScreenSettings* LoadingScreenSettings = GetMutableDefault<ULoadingScreenSettings>();\n\n\t// Load and add startup background images.\n\tfor (FString ImagePath : LoadingScreenSettings->StartupBackgroundImagePaths) {\n\t\tUTexture2D* Image = LoadObject<UTexture2D>(nullptr, *ImagePath);\n\t\tif (Image != nullptr) {\n\t\t\tBackgroundImages.Add(Image);\n\t\t}\n\t}\n\n\t// Load and add default background images.\n\tfor (FString ImagePath : LoadingScreenSettings->DefaultBackgroundImagePaths) {\n\t\tUTexture2D* Image = LoadObject<UTexture2D>(nullptr, *ImagePath);\n\t\tif (Image != nullptr) {\n\t\t\tBackgroundImages.Add(Image);\n\t\t}\n\t}\n}", "CodeBleu_score": 51.1598487025005}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\n\t//Remove all existing background images.\n\tBackgroundImages.Empty();\n\n\t//Retrieve the loading screen settings.\n\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\t//Load and add images for both the startup and default loading screens to their respective lists.\n\tif (Settings->StartupLoadingScreen.bUseRandomBackground) {\n\n\t\tfor (TSoftObjectPtr<UTexture2D> Texture : Settings->StartupLoadingScreen.RandomBackgrounds) {\n\n\t\t\tUTexture2D* LoadedTexture = Texture.LoadSynchronous();\n\n\t\t\tif (LoadedTexture) {\n\n\t\t\t\tBackgroundImages.Add(LoadedTexture);\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\telse if (Settings->StartupLoadingScreen.Background.IsValid()) {\n\n\t\tUTexture2D* LoadedTexture = Settings->StartupLoadingScreen.Background.LoadSynchronous();\n\n\t\tif (LoadedTexture) {\n\n\t\t\tBackgroundImages.Add(LoadedTexture);\n\n\t\t}\n\n\t}\n\n\tif (Settings->DefaultLoadingScreen.bUseRandomBackground) {\n\n\t\tfor (TSoftObjectPtr<UTexture2D> Texture : Settings->DefaultLoadingScreen.RandomBackgrounds) {\n\n\t\t\tUTexture2D* LoadedTexture = Texture.LoadSynchronous();\n\n\t\t\tif (LoadedTexture) {\n\n\t\t\t\tBackgroundImages.Add(LoadedTexture);\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\telse if (Settings->DefaultLoadingScreen.Background.IsValid()) {\n\n\t\tUTexture2D* LoadedTexture = Settings->DefaultLoadingScreen.Background.LoadSynchronous();\n\n\t\tif (LoadedTexture) {\n\n\t\t\tBackgroundImages.Add(LoadedTexture);\n\n\t\t}\n\n\t}\n\n}", "CodeBleu_score": 51.82615033999382}]}
{"instance_id": "4ffd56e2a326", "generation_result": [{"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\t// Check if the text is currently visible.\n\tif (bIsTextVisible) {\n\t\t// Check if the text is currently fading out.\n\t\tif (bIsFadingOut) {\n\t\t\t// Check if the text has reached the minimum alpha value.\n\t\t\tif (TextBlock->GetColorAndOpacity().A <= MinAlpha) {\n\t\t\t\t// Set the text to be invisible.\n\t\t\t\tbIsTextVisible = false;\n\t\t\t\t// Set the text to be fading in.\n\t\t\t\tbIsFadingIn = true;\n\t\t\t\t// Set the text to be fading out.\n\t\t\t\tbIsFadingOut = false;\n\t\t\t\t// Set the text's alpha value to the minimum.\n\t\t\t\tTextBlock->SetColorAndOpacity(FLinearColor(1.0f, 1.0f, 1.0f, MinAlpha));\n\t\t\t\t// Stop the animation.\n\t\t\t\treturn EActiveTimerReturnType::Stop;\n\t\t\t}\n\t\t\t// Set the text's alpha value to the current value minus the delta.\n\t\t\tTextBlock->SetColorAndOpacity(FLinearColor(1.0f, 1.0f, 1.0f, TextBlock->GetColorAndOpacity().A - (InDeltaTime * FadeSpeed)));\n\t\t}\n\t\t// Check if the text is currently fading in.\n\t\telse if (bIsFadingIn) {\n\t\t\t// Check if the text has reached the maximum alpha value.\n\t\t\tif (TextBlock->GetColorAndOpacity().A >= MaxAlpha) {\n\t\t\t\t// Set the text to be visible.\n\t\t\t\tbIsTextVisible = true;\n\t\t\t\t// Set the text to be fading out.\n\t\t\t\tbIsFadingOut = true;\n\t\t\t\t// Set the text to be fading in.\n\t\t\t\tbIsFadingIn = false;\n\t\t\t\t// Set the text's alpha value to the maximum.\n\t\t\t\tTextBlock->SetColorAndOpacity(FLinearColor(1.0f, ", "CodeBleu_score": 41.489039477302605}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\t// Get the current alpha value\n\tfloat CurrentAlpha = Text->GetColorAndOpacity().A;\n\n\t// Get the current animation speed\n\tfloat AnimationSpeed = LoadingScreenSettings.GetLoadingCompleteTextAnimationSpeed();\n\n\t// Get the animation direction\n\tfloat Direction = LoadingScreenSettings.GetLoadingCompleteTextAnimationDirection();\n\n\t// Get the animation minimum and maximum alpha values\n\tfloat MinAlpha = LoadingScreenSettings.GetLoadingCompleteTextAnimationMinAlpha();\n\tfloat MaxAlpha = LoadingScreenSettings.GetLoadingCompleteTextAnimationMaxAlpha();\n\n\t// Get the animation duration\n\tfloat AnimationDuration = LoadingScreenSettings.GetLoadingCompleteTextAnimationDuration();\n\n\t// Get the elapsed time\n\tfloat ElapsedTime = (float)InCurrentTime - StartTime;\n\n\t// Calculate the new alpha value\n\tfloat NewAlpha = CurrentAlpha + (Direction * AnimationSpeed * InDeltaTime);\n\n\t// If the new alpha is less than the minimum or greater than the maximum, reverse the animation direction\n\tif (NewAlpha < MinAlpha || NewAlpha > MaxAlpha) {\n\t\tDirection = -Direction;\n\t}\n\n\t// Set the new alpha value\n\tText->SetColorAndOpacity(FLinearColor(1, 1, 1, NewAlpha));\n\n\t// If the elapsed time is greater than the animation duration, stop the animation\n\tif (ElapsedTime > AnimationDuration) {\n\t\treturn EActiveTimerReturnType::Stop;\n\t}\n\n\t// Continue the animation\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 36.93169997556919}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\n\t// Get the animation speed.\n\tfloat AnimationSpeed = Settings->AnimationSpeed;\n\n\t// Get the current animation time.\n\tfloat AnimationTime = InCurrentTime - StartTime;\n\n\t// Calculate the animation alpha.\n\tfloat AnimationAlpha = FMath::Clamp(FMath::Sin(AnimationTime * AnimationSpeed) * 0.5f + 0.5f, 0.0f, 1.0f);\n\n\t// Set the text's alpha.\n\tTextBlock->SetColorAndOpacity(FLinearColor(1.0f, 1.0f, 1.0f, AnimationAlpha));\n\n\t// Return the animation status.\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 25.676559277040344}]}
{"instance_id": "7420af124c78", "generation_result": [{"code": "bool FRaceAwaiter::await_ready(){\n\t\t//Lock the data\n\tDataLock.Lock();\n\t//Check if the index is not -1\n\tif (Index != -1) {\n\t\t//Unlock the data\n\t\tDataLock.Unlock();\n\t\t//Return true\n\t\treturn true;\n\t}\n\t//Unlock the data\n\tDataLock.Unlock();\n\t//Return false\n\treturn false;\n}", "CodeBleu_score": 50.64709407365622}, {"code": "bool FRaceAwaiter::await_ready(){\n\t\t// Locks the data\n\tFScopeLock Lock(&Data->Lock);\n\n\t// Checks if the index is not -1\n\tif (Data->Index != -1) {\n\t\t// Unlocks the data\n\t\tLock.Unlock();\n\n\t\t// Returns true\n\t\treturn true;\n\t}\n\n\t// Unlocks the data\n\tLock.Unlock();\n\n\t// Returns false\n\treturn false;\n}", "CodeBleu_score": 60.53801124739353}, {"code": "bool FRaceAwaiter::await_ready(){\n\t\tbool ready = false;\n\tdata.Lock();\n\tif (data.Index != -1) {\n\t\tready = true;\n\t}\n\tdata.Unlock();\n\treturn ready;\n}", "CodeBleu_score": 46.77393027929661}]}
{"instance_id": "fab9fe81573a", "generation_result": [{"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tif (bCleanup) {\n\t\tif (auto* StatePtr = static_cast<FAIAwaiterState_FindPath*>(State)) {\n\t\t\tif (StatePtr->QueryID.IsValid()) {\n\t\t\t\tStatePtr->QueryID.Request.Abort();\n\t\t\t\tStatePtr->QueryID.Request.Release();\n\t\t\t\tStatePtr->QueryID.Invalidate();\n\t\t\t}\n\t\t\tdelete StatePtr;\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 35.26229257753409}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tif (bCleanup) {\n\t\tif (auto* FindPathState = static_cast<FAIFindPathState*>(State); FindPathState->QueryID.IsValid()) {\n\t\t\tFindPathState->NavSys->AbortAsyncNavigation(FindPathState->QueryID);\n\t\t\tFindPathState->QueryID = FNavMeshQueryID();\n\t\t\tdelete FindPathState;\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 37.41531375843732}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tif (bCleanup) {\n\t\tif (auto* FindPathState = static_cast<FAIFindPathState*>(State); FindPathState->QueryID.IsValid()) {\n\t\t\tFindPathState->Controller->GetWorld()->GetNavigationSystem()->AbortAsyncNavigation(FindPathState->QueryID);\n\t\t\tFindPathState->QueryID = FAIRequestID::InvalidRequest;\n\t\t}\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 34.162640719080336}]}
{"instance_id": "0656af2cb3eb", "generation_result": [{"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE:\n\t\t\tif (!Engine::get_singleton()->is_editor_hint()) {\n\t\t\t\tif (!is_current()) {\n\t\t\t\t\tset_current(true);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase NOTIFICATION_EXIT_TREE:\n\t\t\tif (!Engine::get_singleton()->is_editor_hint()) {\n\t\t\t\tif (!is_current()) {\n\t\t\t\t\tset_current(false);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t}\n}", "CodeBleu_score": 52.55798735677261}, {"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE:\n\t\t\tif (Engine::get_singleton()->is_editor_hint() && !get_tree()->is_editor_hint()) {\n\t\t\t\tif (get_viewport()->get_audio_listener() != this) {\n\t\t\t\t\tset_current(true);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase NOTIFICATION_EXIT_TREE:\n\t\t\tif (Engine::get_singleton()->is_editor_hint() && !get_tree()->is_editor_hint()) {\n\t\t\t\tif (get_viewport()->get_audio_listener() == this) {\n\t\t\t\t\tset_current(false);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t}\n}", "CodeBleu_score": 48.036832828504984}, {"code": "void AudioListener2D::_notification(int p_what){\n\t\n\tswitch(p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\n\t\t\tif (!Engine::get_singleton()->is_editor_hint() && !get_tree()->is_editor_hint() && !get_tree()->is_edited_scene_root()) {\n\t\t\t\tif (!AudioServer::get_singleton()->is_listener_2d()) {\n\t\t\t\t\tAudioServer::get_singleton()->set_listener_2d(get_instance_id());\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\n\t\t\tif (!Engine::get_singleton()->is_editor_hint() && !get_tree()->is_editor_hint() && !get_tree()->is_edited_scene_root()) {\n\t\t\t\tif (AudioServer::get_singleton()->is_listener_2d() && AudioServer::get_singleton()->get_listener_2d() == get_instance_id()) {\n\t\t\t\t\tAudioServer::get_singleton()->set_listener_2d(0);\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 49.77905836109539}]}
{"instance_id": "9aadd2c91e67", "generation_result": [{"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\n\tif (!active)\n\t\treturn;\n\n\tint todo = p_frames;\n\n\twhile (todo) {\n\n\t\tint to_mix = MIN(todo, buffer_size - mix_offset);\n\t\tint32_t *src = &mix_buffer[mix_offset * 2];\n\t\tint32_t *dst = p_buffer;\n\n\t\tfor (int i = 0; i < to_mix; i++) {\n\n\t\t\tdst[0] += src[0];\n\t\t\tdst[1] += src[1];\n\t\t\tdst[2] += src[2];\n\t\t\tdst[3] += src[3];\n\t\t\tdst[4] += src[4];\n\t\t\tdst[5] += src[5];\n\n\t\t\tsrc += 6;\n\t\t\tdst += 6;\n\t\t}\n\n\t\tmix_offset += to_mix;\n\t\tif (mix_offset >= buffer_size)\n\t\t\tmix_offset = 0;\n\n\t\ttodo -= to_mix;\n\t}\n}", "CodeBleu_score": 44.77246390070605}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\n\tif (!active || !thread_exited)\n\t\treturn;\n\n\tint todo = p_frames;\n\n\twhile (todo) {\n\n\t\tint to_mix = MIN(todo, buffer_frames - mix_offset);\n\t\tAudioServer::get_singleton()->lock();\n\t\tAudioServer::get_singleton()->channel_mix(channel_count, buffer + mix_offset * channel_count, to_mix);\n\t\tAudioServer::get_singleton()->unlock();\n\t\t//mix(buffer+mix_offset*channel_count,to_mix);\n\t\tfor (int i = 0; i < to_mix; i++) {\n\t\t\tint32_t sample = buffer[(i + mix_offset) * channel_count];\n\t\t\t*p_buffer++ = sample;\n\t\t\tif (channel_count == 2) {\n\t\t\t\t*p_buffer++ = sample;\n\t\t\t}\n\t\t}\n\n\t\ttodo -= to_mix;\n\t\tmix_offset += to_mix;\n\t\tif (mix_offset >= buffer_frames)\n\t\t\tmix_offset = 0;\n\t}\n}", "CodeBleu_score": 47.315098591728436}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\n\tif (!active || thread_exited)\n\t\treturn;\n\n\tint todo = p_frames;\n\n\twhile (todo) {\n\n\t\tint to_mix = MIN(todo, buffer_frames - mix_offset);\n\n\t\tif (to_mix == 0) {\n\t\t\t//buffer is empty, so request more data\n\t\t\tif (OS::get_singleton()->get_ticks_msec() - last_mix_time > 1000) {\n\t\t\t\t//it's been a second and nothing was mixed.\n\t\t\t\t//this could be because the device was not initialized or does not have any valid configuration\n\t\t\t\t//in either case, warn the user\n\t\t\t\tERR_PRINTS(\"AudioDriverDummy: No audio data was mixed for over a second. The device may not be properly configured.\");\n\t\t\t\tlast_mix_time = OS::get_singleton()->get_ticks_msec();\n\t\t\t}\n\n\t\t\tlock();\n\t\t\tmix_offset = 0;\n\t\t\tint frames_left = buffer_frames;\n\t\t\twhile (frames_left) {\n\n\t\t\t\tint to_fill = MIN(frames_left, ring_buffer_frames - ring_buffer_offset);\n\t\t\t\tAudioDriverDummy::lock();\n\t\t\t\tAudioDriverDummy::AudioDriverManagerSW::lock();\n\t\t\t\tAudioDriverDummy::AudioDriverManagerSW::update(to_fill);\n\t\t\t\tAudioDriverDummy::AudioDriverManagerSW::unlock();\n\t\t\t\tAudioDriverDummy::unlock();\n\n\t\t\t\tframes_left -= to_fill;\n\t\t\t\tring_buffer_offset += to_fill;\n\t\t\t\tif (ring_buffer_offset == ring_buffer_frames)\n\t\t\t\t\tring_buffer_offset = 0;\n\t\t\t}\n\t\t\tunlock();\n\n\t\t\tcontinue;\n\t\t}\n\n\t\t//mix\n\t\tfor (int i = 0; i < to_mix; i++) {\n\n\t\t\tint32_t", "CodeBleu_score": 38.736800307573226}]}
{"instance_id": "56df08c77b69", "generation_result": [{"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tVector2 gravity = get_gravity_vector();\n\tif (get_gravity_is_point()) {\n\t\tVector2 point = get_gravity_point();\n\t\treal_t d = p_position.distance_to(point);\n\t\tif (d == 0) {\n\t\t\tr_gravity = Vector2(0, 0);\n\t\t} else {\n\t\t\treal_t s = get_gravity() / (d * d);\n\t\t\tr_gravity = gravity.normalized() * s;\n\t\t}\n\t} else {\n\t\tr_gravity = gravity;\n\t}\n}", "CodeBleu_score": 40.80876647902749}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tgodot_vector2 gravity;\n\tgodot_area_2d_compute_gravity(godot_area_2d_ptr, (godot_vector2*) &p_position, (godot_vector2*) &gravity);\n\tr_gravity = *(Vector2*) &gravity;\n}", "CodeBleu_score": 11.769501594572732}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tERR_FAIL_COND_MSG(p_position.is_nan(), \"The position is NaN.\");\n\n\tr_gravity = gravity_vec;\n\n\tif (gravity_is_point) {\n\t\tVector2 rel_vec = (p_position - gravity_vec).normalized();\n\t\tfloat d = p_position.distance_to(gravity_vec);\n\t\tfloat g = gravity;\n\t\tif (d > 0) {\n\t\t\tfloat factor = (g / d);\n\t\t\tr_gravity += rel_vec * factor;\n\t\t}\n\t}\n}", "CodeBleu_score": 32.291670118730174}]}
{"instance_id": "f8c60f8d0caa", "generation_result": [{"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tgodot::api->godot_method_bind_ptrcall(mb_wakeup_neighbours, inst);\n}", "CodeBleu_score": 1.624512180493619}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\t___godot_icall_void(___mb.mb_wakeup_neighbours, (const Object *) this);\n}", "CodeBleu_score": 5.383038477587531}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tgodot::api->godot_method_bind_ptrcall(godot::_RegisterState::language_index, godot::api->godot_method_bind_get_method(\"Body2D\", \"wakeup_neighbours\"), this);\n}", "CodeBleu_score": 7.894516061285592}]}
{"instance_id": "0c6f6c00da9a", "generation_result": [{"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (!space) {\n\t\treturn;\n\t}\n\tif (monitor_query_list.in_list()) {\n\t\treturn;\n\t}\n\tspace->add_area(this);\n}", "CodeBleu_score": 30.901290955594078}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t\n}", "CodeBleu_score": 3.7461864740024553}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t\t// TODO : Implement\n}", "CodeBleu_score": 3.7461864740024553}]}
{"instance_id": "efc39df0e3a3", "generation_result": [{"code": "void GodotBody3D::_update_transform_dependent(){\n\t\t// Recalculate the center of mass and principal inertia axes.\n\tthis->center_of_mass = this->transform.xform(this->body->get_center_of_mass());\n\tthis->principal_inertia_axes = this->transform.basis.xform(this->body->get_principal_inertia_axes());\n\n\t// Recalculate the inverse inertia tensor.\n\tthis->inverse_inertia_tensor = this->body->get_inverse_inertia_tensor();\n\tthis->inverse_inertia_tensor = this->principal_inertia_axes.xform(this->inverse_inertia_tensor).xform(this->principal_inertia_axes.transposed());\n}", "CodeBleu_score": 15.910141691186839}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t\tTransform t = get_transform();\n\tTransform t_inv = t.affine_inverse();\n\n\tVector3 scale = t.basis.get_scale();\n\tfloat mass = get_mass();\n\tVector3 local_com = get_center_of_mass();\n\tVector3 com = t.xform(local_com);\n\tBasis principal_inertia_axes_inv = t_inv.basis * get_principal_inertia_axes();\n\tBasis principal_inertia_axes = principal_inertia_axes_inv.inverse();\n\n\tPhysicsServer3D::get_singleton()->body_set_state(get_rid(), PhysicsServer3D::BODY_STATE_TRANSFORM, t);\n\tPhysicsServer3D::get_singleton()->body_set_space(get_rid(), get_space_override_mode() == SPACE_OVERRIDE_DISABLED ? get_space() : RID());\n\tPhysicsServer3D::get_singleton()->body_set_param(get_rid(), PhysicsServer3D::BODY_PARAM_BOUNCE, get_bounce());\n\tPhysicsServer3D::get_singleton()->body_set_param(get_rid(), PhysicsServer3D::BODY_PARAM_FRICTION, get_friction());\n\tPhysicsServer3D::get_singleton()->body_set_param(get_rid(), PhysicsServer3D::BODY_PARAM_MASS, mass);\n\tPhysicsServer3D::get_singleton()->body_set_param(get_rid(), PhysicsServer3D::BODY_PARAM_GRAVITY_SCALE, get_gravity_scale());\n\tPhysicsServer3D::get_singleton()->body_set_param(get_rid(), PhysicsServer3D::BODY_PARAM_LINEAR_DAMP, get_linear_damp());\n\tPhysicsServer3D::get_singleton()->body_set_param(get_rid(), PhysicsServer3D::BODY_PARAM_ANGULAR_DAMP, get_angular_damp());\n\tPhysics", "CodeBleu_score": 36.29848386660491}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t\t/*\n\t * Recalculate the center of mass and principal inertia axes using the body's current transform.\n\t */\n\t_body_update_inertia_tensor();\n}", "CodeBleu_score": 5.762794942181813}]}
{"instance_id": "aebafb4094a1", "generation_result": [{"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\n    if (!AudioServer::get_singleton())\n        return;\n\n    AudioServer *audio_server = AudioServer::get_singleton();\n\n    audio_server->lock();\n\n    if (p_update_mix_time) {\n        audio_server->set_mix_time(audio_server->get_mix_time() + audio_server->get_step() * p_frames);\n    }\n\n    audio_server->process(p_frames, p_buffer);\n\n    audio_server->unlock();\n}", "CodeBleu_score": 50.904837365749586}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\n\tif (p_update_mix_time) {\n\t\tAudioServer::get_singleton()->_update_mix_time(p_frames);\n\t}\n\n\tif (!AudioServer::get_singleton())\n\t\treturn;\n\n\tAudioServer::get_singleton()->_process(p_frames, p_buffer);\n}", "CodeBleu_score": 66.15383088589776}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\n    AudioServer *audio_server = AudioServer::get_singleton();\n    if (!audio_server) {\n        return;\n    }\n\n    if (p_update_mix_time) {\n        audio_server->update_mix_time(p_frames);\n    }\n\n    audio_server->process(p_frames, p_buffer);\n}", "CodeBleu_score": 56.29237715813166}]}
{"instance_id": "160bb23e8010", "generation_result": [{"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\tERR_FAIL_COND_MSG(p_feed == nullptr, \"The feed is null.\");\n\n\tfor (int i = 0; i < feeds.size(); i++) {\n\t\tif (feeds[i] == p_feed) {\n\t\t\tString msg = \"Removed feed: \" + p_feed->get_name() + \" (\" + p_feed->get_id() + \")\";\n\t\t\tprint_line(msg);\n\t\t\tfeeds.remove(i);\n\t\t\temit_signal(\"feed_removed\", p_feed->get_id());\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 60.76912243212721}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\tERR_FAIL_COND(!feeds.has(p_feed->get_id()));\n\n\tfeeds.erase(p_feed->get_id());\n\n\temit_signal(\"feed_removed\", p_feed->get_id());\n}", "CodeBleu_score": 21.3314467153845}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\tif (p_feed.is_null()) {\n\t\treturn;\n\t}\n\n\tString feed_name = p_feed->get_name();\n\tint feed_id = p_feed->get_id();\n\n\tfor (int i = 0; i < feeds.size(); i++) {\n\t\tif (feeds[i]->get_id() == feed_id) {\n\t\t\tfeeds.remove(i);\n\t\t\tprint_line(\"Removed feed \" + feed_name + \" from CameraServer.\");\n\t\t\temit_signal(\"feed_removed\", feed_id);\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 57.3102357352675}]}
{"instance_id": "bef3cf110c45", "generation_result": [{"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t    EaseRateAction *ret = new EaseRateAction();\n    if (ret && ret->initWithAction(action, rate)) {\n        ret->autorelease();\n        return ret;\n    }\n    CC_SAFE_DELETE(ret);\n    return nullptr;\n}", "CodeBleu_score": 52.22083381412692}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t    EaseRateAction *ret = new EaseRateAction();\n    if (ret) {\n        if (ret->initWithAction(action, rate)) {\n            ret->autorelease();\n        }\n        else {\n            CC_SAFE_RELEASE_NULL(ret);\n        }\n    }\n    \n    return ret;\n}", "CodeBleu_score": 47.778303718398206}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t    EaseRateAction *easeRateAction = new EaseRateAction();\n    if (easeRateAction) {\n        if (easeRateAction->initWithAction(action, rate)) {\n            easeRateAction->autorelease();\n            return easeRateAction;\n        }\n        else {\n            delete easeRateAction;\n        }\n    }\n    return nullptr;\n}", "CodeBleu_score": 63.06766320097233}]}
{"instance_id": "97fc6f86ad54", "generation_result": [{"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t    if (node->getName() == childName) {\n        return node;\n    }\n\n    for (const auto &child : node->getChildren()) {\n        Node* result = findChildByNameRecursively(child, childName);\n        if (result != nullptr) {\n            return result;\n        }\n    }\n\n    return nullptr;\n}", "CodeBleu_score": 55.22687640540925}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t    if (node == nullptr)\n    {\n        return nullptr;\n    }\n\n    if (node->getName() == childName)\n    {\n        return node;\n    }\n\n    for (auto child : node->getChildren())\n    {\n        auto target = findChildByNameRecursively(child, childName);\n        if (target != nullptr)\n        {\n            return target;\n        }\n    }\n\n    return nullptr;\n}", "CodeBleu_score": 54.7124794487605}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t    if (node->getName() == childName) {\n        return node;\n    }\n    for (auto child : node->getChildren()) {\n        auto foundChild = findChildByNameRecursively(child, childName);\n        if (foundChild) {\n            return foundChild;\n        }\n    }\n    return nullptr;\n}", "CodeBleu_score": 53.992828437359094}]}
{"instance_id": "5fcbe1fedcd2", "generation_result": [{"code": "void Animate3D::removeFromMap(){\n\t    auto target = _target;\n    if (target) {\n        auto map = target->getAnimationActions();\n        if (map) {\n            auto actions = map->getObjectForKey(this);\n            if (actions) {\n                actions->eraseObject(this);\n                if (actions->count() == 0) {\n                    map->removeObjectForKey(this);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 29.65446706658622}, {"code": "void Animate3D::removeFromMap(){\n\t    if (_target) {\n        auto map = _target->getAnimationMap();\n        if (map) {\n            map->erase(this);\n        }\n    }\n}", "CodeBleu_score": 17.87544252321373}, {"code": "void Animate3D::removeFromMap(){\n\t    auto& map = _target->getAnimationManager()->_animations;\n    auto iter = map.find(_animationName);\n    if (iter != map.end())\n    {\n        map.erase(iter);\n    }\n}", "CodeBleu_score": 25.84664727874793}]}
{"instance_id": "db8d394f7bc4", "generation_result": [{"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t    auto animation = new (std::nothrow) Animation3D();\n    if (animation && animation->initWithFile(fileName, animationName)) {\n        animation->autorelease();\n        return animation;\n    }\n    CC_SAFE_DELETE(animation);\n    return nullptr;\n}", "CodeBleu_score": 34.998272602254005}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t    Animation3D *ani = new Animation3D();\n    if (ani && ani->initWithFile(fileName, animationName)) {\n        ani->autorelease();\n        return ani;\n    }\n    CC_SAFE_DELETE(ani);\n    return nullptr;\n}", "CodeBleu_score": 26.279623804322927}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t    auto key = fileName + animationName;\n    auto animation = AnimationCache::getInstance()->getAnimation(key);\n    if (animation == nullptr) {\n        animation = new Animation3D();\n        if (animation && animation->initWithFile(fileName, animationName)) {\n            AnimationCache::getInstance()->addAnimation(animation, key);\n            animation->autorelease();\n        } else {\n            CC_SAFE_DELETE(animation);\n        }\n    }\n\n    return animation;\n}", "CodeBleu_score": 61.17304794118144}]}
{"instance_id": "cdf28d98d3ff", "generation_result": [{"code": "void Animation3DCache::removeUnusedAnimation(){\n\t    auto it = _animations.begin();\n    while (it != _animations.end()) {\n        auto animation = it->second;\n        if (animation->getReferenceCount() == 1) {\n            animation->release();\n            it = _animations.erase(it);\n        } else {\n            ++it;\n        }\n    }\n}", "CodeBleu_score": 58.50102774913285}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t    auto it = _animations.begin();\n    while(it != _animations.end()) {\n        if(it->second->getReferenceCount() == 1) {\n            it->second->release();\n            it = _animations.erase(it);\n        } else {\n            ++it;\n        }\n    }\n}", "CodeBleu_score": 67.52369453487454}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t    auto it = _animations.begin();\n    while (it != _animations.end()) {\n        auto anim = it->second;\n        if (anim->getReferenceCount() == 1) {\n            anim->release();\n            it = _animations.erase(it);\n        } else {\n            ++it;\n        }\n    }\n}", "CodeBleu_score": 59.45347352764205}]}
{"instance_id": "de7926871eb8", "generation_result": [{"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t    BillBoard *billboard = new BillBoard();\n    if (billboard && billboard->initWithTexture(texture, mode)) {\n        billboard->autorelease();\n        return billboard;\n    }\n    CC_SAFE_DELETE(billboard);\n    return nullptr;\n}", "CodeBleu_score": 72.67510380861259}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t    auto billboard = new (std::nothrow) BillBoard();\n    if (billboard && billboard->initWithTexture(texture, mode)) {\n        billboard->autorelease();\n        return billboard;\n    }\n    CC_SAFE_DELETE(billboard);\n    return nullptr;\n}", "CodeBleu_score": 74.60854150119386}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t    BillBoard *billboard = new (std::nothrow) BillBoard();\n    if (billboard && billboard->initWithTexture(texture, mode)) {\n        billboard->autorelease();\n        return billboard;\n    }\n    CC_SAFE_DELETE(billboard);\n    return nullptr;\n}", "CodeBleu_score": 80.24537907297173}]}
{"instance_id": "eef1c2206d68", "generation_result": [{"code": "bool Bundle3D::load(const std::string& path){\n\t    if (path.empty()) {\n        CCLOGERROR(\"Bundle3D::load() - invalid path: %s\", path.c_str());\n        return false;\n    }\n\n    if (path == _path) {\n        CCLOG(\"Bundle3D::load() - already loaded: %s\", path.c_str());\n        return true;\n    }\n\n    _path = path;\n\n    auto fileUtils = FileUtils::getInstance();\n\n    // Load file\n    Data data = fileUtils->getDataFromFile(path);\n    if (data.isNull()) {\n        CCLOGERROR(\"Bundle3D::load() - failed to load file: %s\", path.c_str());\n        _path.clear();\n        return false;\n    }\n\n    // Determine file type\n    const std::string ext = fileUtils->getFileExtension(path);\n    if (ext == \".c3t\") {\n        // JSON\n        return loadJson(data);\n    } else if (ext == \".c3b\") {\n        // Binary\n        return loadBinary(data);\n    } else {\n        // Invalid file type\n        CCLOGERROR(\"Bundle3D::load() - invalid file type: %s\", ext.c_str());\n        _path.clear();\n        return false;\n    }\n}", "CodeBleu_score": 57.01267695011014}, {"code": "bool Bundle3D::load(const std::string& path){\n\t    if (path.empty() || _path == path)\n        return false;\n\n    _path = path;\n\n    // Load file\n    auto fileUtils = FileUtils::getInstance();\n    auto ext = fileUtils->getFileExtension(_path);\n\n    if (ext == \".c3t\") {\n        auto data = fileUtils->getDataFromFile(_path);\n        if (data.isNull())\n            return false;\n\n        auto reader = BundleReader::createWithData(data);\n        if (!reader)\n            return false;\n\n        if (!reader->readBundle(_path, this)) {\n            _path.clear();\n            return false;\n        }\n    } else if (ext == \".c3b\") {\n        auto data = fileUtils->getDataFromFile(_path);\n        if (data.isNull())\n            return false;\n\n        auto reader = BundleReader::createWithData(data);\n        if (!reader)\n            return false;\n\n        if (!reader->readBinary(_path, this)) {\n            _path.clear();\n            return false;\n        }\n    } else {\n        CCLOG(\"Invalid 3D file format: %s\", _path.c_str());\n        _path.clear();\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 47.84718443146047}, {"code": "bool Bundle3D::load(const std::string& path){\n\t    if (path.empty()) {\n        CCLOG(\"Bundle3D::load(): path is empty\");\n        return false;\n    }\n    if (path == _path) {\n        CCLOG(\"Bundle3D::load(): path already loaded\");\n        return true;\n    }\n    \n    const auto ext = FileUtils::getInstance()->getFileExtension(path);\n    if (ext == \".c3t\") {\n        _data = FileUtils::getInstance()->getDataFromFile(path);\n        if (_data.isNull()) {\n            CCLOG(\"Bundle3D::load(): failed to load %s\", path.c_str());\n            return false;\n        }\n        _path = path;\n        return true;\n    }\n    if (ext == \".c3b\") {\n        _path = path;\n        return true;\n    }\n    CCLOG(\"Bundle3D::load(): invalid file extension %s\", ext.c_str());\n    return false;\n}", "CodeBleu_score": 56.06254471907719}]}
{"instance_id": "37b6acea681e", "generation_result": [{"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t    skindata->resetData();\n    return true;\n}", "CodeBleu_score": 27.013088758944516}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t    if (skindata == nullptr) {\n        return false;\n    }\n\n    // reset\n    skindata->resetData();\n\n    // load skin data\n    if (_isBinary) {\n        return loadSkinDataBinary(skindata);\n    }\n\n    return loadSkinDataJson(skindata);\n}", "CodeBleu_score": 79.30614043366961}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t    // Reset the SkinData object\n    skindata->resetData();\n\n    // Check if the data is in binary format\n    if (isBinaryFormat()) {\n        // Load the skin data in binary format\n        return loadSkinDataBinary(skindata);\n    } else {\n        // Load the skin data in JSON format\n        return loadSkinDataJson(skindata);\n    }\n}", "CodeBleu_score": 86.91467684789576}]}
{"instance_id": "97449825e4ef", "generation_result": [{"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t    size_t totalBytesRead = 0;\n    size_t bytesToRead = 0;\n    size_t bytesRemaining = 0;\n    size_t bytesRead = 0;\n    FILE* file = (FILE*)datasource;\n    size_t bytesRequested = size * nmemb;\n\n    bytesRemaining = fileSize - filePosition;\n\n    if (bytesRemaining > 0) {\n        if (bytesRemaining > bytesRequested) {\n            bytesToRead = bytesRequested;\n        } else {\n            bytesToRead = bytesRemaining;\n        }\n        bytesRead = fread(ptr, size, bytesToRead / size, file);\n        totalBytesRead = bytesRead * size;\n        filePosition += totalBytesRead;\n    }\n\n    return totalBytesRead;\n}", "CodeBleu_score": 39.10460432697618}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\n    AudioDecoder* decoder = (AudioDecoder*)datasource;\n\n    size_t numBytes = size * nmemb;\n\n    if (decoder->m_fileDataSize > 0) {\n        //If there is more data to read, then read it\n        if (numBytes > decoder->m_fileDataSize) {\n            numBytes = decoder->m_fileDataSize;\n        }\n\n        memcpy(ptr, decoder->m_fileDataPtr, numBytes);\n\n        decoder->m_fileDataPtr += numBytes;\n        decoder->m_fileDataSize -= numBytes;\n\n    } else {\n        //If there is no data to read, return 0\n        numBytes = 0;\n    }\n\n    return numBytes;\n}", "CodeBleu_score": 49.744462643288294}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t    size_t nRead = 0;\n    size_t nRequested = size * nmemb;\n    AudioDecoder* decoder = (AudioDecoder*)datasource;\n    if (decoder->m_currentFilePosition < decoder->m_fileSize) {\n        nRead = nRequested;\n        if (nRead > decoder->m_fileSize - decoder->m_currentFilePosition) {\n            nRead = decoder->m_fileSize - decoder->m_currentFilePosition;\n        }\n        memcpy(ptr, decoder->m_fileData + decoder->m_currentFilePosition, nRead);\n        decoder->m_currentFilePosition += nRead;\n    }\n    return nRead;\n}", "CodeBleu_score": 42.63365669524102}]}
{"instance_id": "0f4db164ba5d", "generation_result": [{"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t    _pcmBuffer = std::make_shared<std::vector<uint8_t>>();\n    _pcmBuffer->reserve(4096);\n}", "CodeBleu_score": 46.20981144348684}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t    _pcmBuffer = std::make_shared<std::vector<uint8_t>>();\n    _pcmBuffer->reserve(4096);\n}", "CodeBleu_score": 46.20981144348684}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t    _pcmBuffer = std::make_shared<std::vector<uint8_t>>(4096);\n}", "CodeBleu_score": 22.311702246615884}]}
{"instance_id": "0f88663615c6", "generation_result": [{"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t    static std::mutex s_DownloaderAndroidMutex;\n    static std::unordered_map<int, cocos2d::network::DownloaderAndroid*> s_DownloaderAndroidMap;\n\n    std::lock_guard<std::mutex> lock(s_DownloaderAndroidMutex);\n    auto it = s_DownloaderAndroidMap.find(id);\n    if (it != s_DownloaderAndroidMap.end()) {\n        return it->second;\n    }\n    return nullptr;\n}", "CodeBleu_score": 58.63872182858365}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t    static std::unordered_map<int, cocos2d::network::DownloaderAndroid*> s_downloaders;\n    static std::mutex s_downloadersMutex;\n\n    std::lock_guard<std::mutex> lock(s_downloadersMutex);\n    auto it = s_downloaders.find(id);\n    if (it == s_downloaders.end())\n        return nullptr;\n    return it->second;\n}", "CodeBleu_score": 57.70850987113839}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t    static std::mutex s_downloaderMutex;\n    std::lock_guard<std::mutex> lock(s_downloaderMutex);\n\n    static std::unordered_map<int, cocos2d::network::DownloaderAndroid*> s_downloaderMap;\n    auto it = s_downloaderMap.find(id);\n    if (it != s_downloaderMap.end()) {\n        return it->second;\n    }\n    return nullptr;\n}", "CodeBleu_score": 60.176548757341905}]}
{"instance_id": "a5aafaaa944c", "generation_result": [{"code": "function M.playMusic(filename, isLoop)\n\t  local loop = isLoop or false\n  audio.playMusic(filename, loop)", "CodeBleu_score": 32.26677261646999}, {"code": "function M.playMusic(filename, isLoop)\n\t  if isLoop == nil then\n    isLoop = false\n  end\n  SimpleAudioEngine:getInstance():playMusic(filename, isLoop)", "CodeBleu_score": 42.375329903322154}, {"code": "function M.playMusic(filename, isLoop)\n\t    if isLoop ~= nil then\n        audio.playMusic(filename, isLoop)\n    else\n        audio.playMusic(filename)\n    end", "CodeBleu_score": 39.13824954922041}]}
{"instance_id": "16f2ad4bb4e8", "generation_result": [{"code": "function ccs.TriggerObj:detect()\n\tend\n", "CodeBleu_score": 4.586004115149374}, {"code": "function ccs.TriggerObj:detect()\n\tend", "CodeBleu_score": 4.586004115149374}, {"code": "function ccs.TriggerObj:detect()\n\tend", "CodeBleu_score": 4.586004115149374}]}
{"instance_id": "e73b10418cb6", "generation_result": [{"code": "function ccs.TriggerObj:removeAll()\n\tend\n", "CodeBleu_score": 4.959221278886332}, {"code": "function ccs.TriggerObj:removeAll()\n\tend\n", "CodeBleu_score": 4.959221278886332}, {"code": "function ccs.TriggerObj:removeAll()\n\tend\n", "CodeBleu_score": 4.959221278886332}]}
{"instance_id": "d5a1333d794d", "generation_result": [{"code": "function BasicCollider:hurtEffect(target)\n\t    local hurtAnimation = self.hurtAnimation\n    local hurtBillboard = self.hurtBillboard\n    local hurtEffect = hurtBillboard:Clone()\n    hurtEffect.parent = target\n    hurtEffect:SetScale(target.scale)\n    hurtEffect:SetPosition(target.position)\n    hurtEffect:RunAction(hurtAnimation)\n    hurtEffect:RemoveFromParent()\n    hurtEffect.cameraMask = 1", "CodeBleu_score": 46.90046632111724}, {"code": "function BasicCollider:hurtEffect(target)\n\t    local hurtAnimation = self.hurtAnimation\n    local hurtBillboard = self.hurtBillboard\n    local hurtEffect = self.hurtEffect\n    hurtEffect.parent = target\n    hurtEffect.position = target.position\n    hurtEffect:SetScale(target.scale)\n    hurtEffect:SetSprite(hurtAnimation)\n    hurtEffect:Play()\n    hurtEffect:Remove()", "CodeBleu_score": 45.46989306664482}, {"code": "function BasicCollider:hurtEffect(target)\n\t    local hurtEffect = cc.BillBoard:create(\"Images/hurtEffect.png\")\n    hurtEffect:setScale(0.5)\n    hurtEffect:setPosition3D(cc.vec3(0, 0, 0))\n    hurtEffect:runAction(cc.Sequence:create(cc.Animate:create(cc.AnimationCache:getInstance():getAnimation(\"hurtAnimation\")), cc.RemoveSelf:create()))\n    target:addChild(hurtEffect, 1, 1)", "CodeBleu_score": 53.12681295400141}]}
{"instance_id": "f478d7e70ea6", "generation_result": [{"code": "function MageNormalAttack:onTimeOut()\n\t\n    -- Stop the particle systems\n    self.particleSystem1:stop()\n    self.particleSystem2:stop()\n\n    -- Create a sequence to remove the object after a delay\n    local delay = cc.DelayTime:create(2)\n    local remove = cc.RemoveSelf:create()\n    local sequence = cc.Sequence:create(delay, remove)\n    self:runAction(sequence)\n\n    -- Create and configure a new particle system\n    self.particleSystem1 = cc.ParticleSystemQuad:create(\"particles/mage_attack_1.plist\")\n    self.particleSystem1:setPosition(cc.p(0, 0))\n    self.particleSystem1:setScale(0.5)\n    self.particleSystem1:setAnchorPoint(cc.p(0.5, 0.5))\n    self.particleSystem1:setTag(1)\n    self:addChild(self.particleSystem1)\n\n    -- Create and configure a new particle system\n    self.particleSystem2 = cc.ParticleSystemQuad:create(\"particles/mage_attack_2.plist\")\n    self.particleSystem2:setPosition(cc.p(0, 0))\n    self.particleSystem2:setScale(0.5)\n    self.particleSystem2:setAnchorPoint(cc.p(0.5, 0.5))\n    self.particleSystem2:setTag(2)\n    self:addChild(self.particleSystem2)\n\n    -- Update the sprite texture\n    self.sprite:setTexture(\"Sprites/mage_attack_1.png\")\n\n    -- Run a fade-out action\n    local fadeOut = cc.FadeOut:create(0.5)\n    self.sprite:runAction(fadeOut)\n\n    -- Adjust the sprite scale\n    self.sprite:setScale(1.2)", "CodeBleu_score": 49.71636189955699}, {"code": "function MageNormalAttack:onTimeOut()\n\t  local sprite = self.sprite\n  local parent = sprite:getParent()\n\n  -- Stop the particle systems\n  parent:stopParticleSystems()\n\n  -- Create a sequence to remove the object after a delay\n  local delay = cc.DelayTime:create(1)\n  local remove = cc.RemoveSelf:create()\n  local sequence = cc.Sequence:create(delay, remove)\n  parent:runAction(sequence)\n\n  -- Create and configure a new particle system\n  local particleSystem = cc.ParticleSystemQuad:create(\"particle/mage_attack.plist\")\n  particleSystem:setPosition(cc.p(0, 0))\n  particleSystem:setScale(1)\n  particleSystem:setAnchorPoint(cc.p(0.5, 0.5))\n  particleSystem:setAngle(90)\n  particleSystem:setRotation(0)\n  particleSystem:setRotationIsDir(true)\n  particleSystem:setRadialAccel(0)\n  particleSystem:setTangentialAccel(0)\n  particleSystem:setSpeed(0)\n  particleSystem:setSpeedVar(0)\n  particleSystem:setGravity(cc.p(0, 0))\n  particleSystem:setEmissionRate(0)\n  particleSystem:setStartColor(cc.c4f(1, 1, 1, 1))\n  particleSystem:setStartColorVar(cc.c4f(0, 0, 0, 0))\n  particleSystem:setEndColor(cc.c4f(1, 1, 1, 1))\n  particleSystem:setEndColorVar(cc.c4f(0, 0, 0, 0))\n  particleSystem:setStartSize(1)\n  particleSystem:setStartSizeVar(0)\n  particleSystem:setEndSize(1)\n  particleSystem:setEndSizeVar(0)\n  particleSystem:setStartSpin(0)\n  particleSystem:setStartSpinVar(0)\n  particleSystem:setEndSpin(0)\n  particleSystem:setEndSpinVar(0)\n  particleSystem:setEmission", "CodeBleu_score": 42.432741325933264}, {"code": "function MageNormalAttack:onTimeOut()\n\t\t-- Stop the particle system\n\tself.particleSystem:stop()\n\tself.particleSystem2:stop()\n\t-- Remove the object after a delay\n\tlocal delay = cc.DelayTime:create(1)\n\tlocal remove = cc.RemoveSelf:create()\n\tlocal sequence = cc.Sequence:create(delay, remove)\n\tself:runAction(sequence)\n\t-- Create and configure the particle system\n\tlocal particleSystem = cc.ParticleSystemQuad:create(\"particles/fireball.plist\")\n\tparticleSystem:setPosition(cc.p(0, 0))\n\tparticleSystem:setScale(0.5)\n\tparticleSystem:setRotation(90)\n\t-- Add the particle system as a child\n\tself:addChild(particleSystem)\n\t-- Update the sprite texture\n\tself.sprite:setTexture(\"Sprites/mage_attack.png\")\n\t-- Run a fade-out action\n\tlocal fadeOut = cc.FadeOut:create(0.5)\n\tself.sprite:runAction(fadeOut)\n\t-- Adjust the sprite scale\n\tself.sprite:setScale(1)\n\t-- Set the particle system\n\tself.particleSystem = particleSystem", "CodeBleu_score": 48.5231217699918}]}
{"instance_id": "d735c4ea6358", "generation_result": [{"code": "function BattlefieldUI:heroDead(hero)\n\t    if hero.name == \"Knight\" then\n        self.knight.fill.effect = grayShader\n        self.knight.frame.effect = grayShader\n    elseif hero.name == \"Mage\" then\n        self.mage.fill.effect = grayShader\n        self.mage.frame.effect = grayShader\n    elseif hero.name == \"Archer\" then\n        self.archer.fill.effect = grayShader\n        self.archer.frame.effect = grayShader\n    end\n    if hero.name == \"Knight\" then\n        self.knight.angerFull.isVisible = false\n        self.knight.angerClone.isVisible = false\n    elseif hero.name == \"Mage\" then\n        self.mage.angerFull.isVisible = false\n        self.mage.angerClone.isVisible = false\n    elseif hero.name == \"Archer\" then\n        self.archer.angerFull.isVisible = false\n        self.archer.angerClone.isVisible = false\n    end", "CodeBleu_score": 42.2827259675853}, {"code": "function BattlefieldUI:heroDead(hero)\n\t    if hero.name == \"Knight\" then\n        self.knight.fill.effect = shaders.grayscale\n        self.knight.frame:setFillColor(128/255, 128/255, 128/255)\n    elseif hero.name == \"Mage\" then\n        self.mage.fill.effect = shaders.grayscale\n        self.mage.frame:setFillColor(128/255, 128/255, 128/255)\n    elseif hero.name == \"Archer\" then\n        self.archer.fill.effect = shaders.grayscale\n        self.archer.frame:setFillColor(128/255, 128/255, 128/255)\n    end\n    if hero.name == \"Knight\" then\n        self.knight.angerFull:setFillColor(128/255, 128/255, 128/255)\n        self.knight.angerFull.isVisible = false\n        self.knight.angerClone:setFillColor(128/255, 128/255, 128/255)\n        self.knight.angerClone.isVisible = false\n    elseif hero.name == \"Mage\" then\n        self.mage.angerFull:setFillColor(128/255, 128/255, 128/255)\n        self.mage.angerFull.isVisible = false\n        self.mage.angerClone:setFillColor(128/255, 128/255, 128/255)\n        self.mage.angerClone.isVisible = false\n    elseif hero.name == \"Archer\" then\n        self.archer.angerFull:setFillColor(128/255, 128/255, 128/255)\n        self.archer.angerFull", "CodeBleu_score": 36.07781432287708}, {"code": "function BattlefieldUI:heroDead(hero)\n\t    if hero.name == \"Knight\" then\n        self.knight.frame:setFillColor(1, 1, 1, 0.5)\n        self.knight.image:setFillColor(1, 1, 1, 0.5)\n    elseif hero.name == \"Mage\" then\n        self.mage.frame:setFillColor(1, 1, 1, 0.5)\n        self.mage.image:setFillColor(1, 1, 1, 0.5)\n    elseif hero.name == \"Archer\" then\n        self.archer.frame:setFillColor(1, 1, 1, 0.5)\n        self.archer.image:setFillColor(1, 1, 1, 0.5)\n    end\n    if hero.name == \"Knight\" then\n        self.knight.angerFull:setFillColor(1, 1, 1, 0)\n        self.knight.angerFull.alpha = 0\n        self.knight.angerClone:setFillColor(1, 1, 1, 0)\n        self.knight.angerClone.alpha = 0\n    elseif hero.name == \"Mage\" then\n        self.mage.angerFull:setFillColor(1, 1, 1, 0)\n        self.mage.angerFull.alpha = 0\n        self.mage.angerClone:setFillColor(1, 1, 1, 0)\n        self.mage.angerClone.alpha = 0\n    elseif hero.name == \"Archer\" then\n        self.archer.angerFull:setFillColor(1, 1, 1, 0)\n        self.archer.angerFull.alpha = 0\n        self.archer.angerClone:setFillColor(1, 1, 1, 0)\n        self.archer.angerClone.alpha = 0\n    end", "CodeBleu_score": 40.992061539066135}]}
{"instance_id": "009f167d3ab2", "generation_result": [{"code": "local function moveCamera(dt)\n\t    if GlobalVariables.IS_SPECIAL_CAMERA_ACTIVE then\n        local camera = cc.Camera:getDefaultCamera()\n        camera:setPosition3D(cc.Vec3(GlobalVariables.SPECIAL_CAMERA_POSITION_X, GlobalVariables.SPECIAL_CAMERA_POSITION_Y, GlobalVariables.SPECIAL_CAMERA_POSITION_Z))\n        camera:lookAt(cc.Vec3(GlobalVariables.SPECIAL_CAMERA_LOOKAT_X, GlobalVariables.SPECIAL_CAMERA_LOOKAT_Y, GlobalVariables.SPECIAL_CAMERA_LOOKAT_Z), cc.Vec3(0, 1, 0))\n    else\n        if #GlobalVariables.ACTIVE_HEROES > 0 then\n            local camera = cc.Camera:getDefaultCamera()\n            local cameraPos = camera:getPosition3D()\n            local focusPoint = GlobalVariables.ACTIVE_HEROES[1]:getFocusPoint()\n            local targetPos = cc.pLerp(cc.p(cameraPos.x, cameraPos.y), cc.p(focusPoint.x, focusPoint.y), GlobalVariables.CAMERA_MOVE_SPEED * dt)\n            camera:setPosition3D(cc.Vec3(targetPos.x, targetPos.y, GlobalVariables.CAMERA_POSITION_Z))\n            camera:lookAt(cc.Vec3(focusPoint.x, focusPoint.y, 0), cc.Vec3(0, 1, 0))\n        end\n    end", "CodeBleu_score": 39.84309284057953}, {"code": "local function moveCamera(dt)\n\t    -- If there is a special camera active, move the camera to the special target and look at the specified point.\n    if specialCamera.active then\n        camera.position = camera.position + (specialCamera.target - camera.position) * dt * specialCamera.speed\n        camera:lookAt(specialCamera.lookAt)\n        return\n    end\n\n    -- If there are active heroes, move the camera to the focus point of the heroes and look at the focus point.\n    if #heroManager.heroes > 0 then\n        local focusPoint = heroManager:getFocusPoint()\n        camera.position = camera.position + (focusPoint - camera.position) * dt * camera.speed\n        camera:lookAt(focusPoint)\n    end", "CodeBleu_score": 28.49859008206962}, {"code": "local function moveCamera(dt)\n\t    -- get the camera\n    local camera = cc.Director:getInstance():getRunningScene():getDefaultCamera()\n\n    -- get the camera position\n    local cameraPos = camera:getPosition3D()\n\n    -- get the camera target\n    local cameraTarget = camera:getTarget()\n\n    -- get the camera up vector\n    local cameraUp = camera:getUp()\n\n    -- get the camera orientation\n    local cameraOrientation = camera:getOrientation()\n\n    -- get the camera fov\n    local cameraFov = camera:getFieldOfView()\n\n    -- get the camera aspect ratio\n    local cameraAspectRatio = camera:getAspectRatio()\n\n    -- get the camera near plane\n    local cameraNearPlane = camera:getNearPlane()\n\n    -- get the camera far plane\n    local cameraFarPlane = camera:getFarPlane()\n\n    -- get the camera projection matrix\n    local cameraProjectionMatrix = camera:getProjectionMatrix()\n\n    -- get the camera view matrix\n    local cameraViewMatrix = camera:getViewMatrix()\n\n    -- get the camera view projection matrix\n    local cameraViewProjectionMatrix = camera:getViewProjectionMatrix()\n\n    -- get the camera depth\n    local cameraDepth = camera:getDepth()\n\n    -- get the camera depth\n    local cameraDepthInView = camera:getDepthInView(cameraPos)\n\n    -- get the camera frustum\n    local cameraFrustum = camera:getFrustum()\n\n    -- get the camera frustum in view\n    local cameraFrustumInView = camera:getFrustumInView()\n\n    -- get the camera orthographic size\n    local cameraOrthographicSize = camera:getOrthographicSize()\n\n    -- get the camera screen to world point\n    local cameraScreenToWorldPoint = camera:screenToWorldPoint(cc.p(0, 0))\n\n    -- get the camera world to screen point\n    local cameraWorldToScreenPoint = camera:worldToScreenPoint(cc.p(0, 0))\n\n    -- get the camera is visible in parent\n    local cameraIsVisibleInParent = camera:isVisibleInParent()\n\n   ", "CodeBleu_score": 20.77244928277219}]}
{"instance_id": "f7f5e7fe1dc2", "generation_result": [{"code": "local function updateParticlePos()\n\t\tfor i, hero in pairs(HeroManager:getHeroes()) do\n\t\tif hero.effectNode then\n\t\t\thero.effectNode:setPosition(hero:getPosition())\n\t\tend\n\tend", "CodeBleu_score": 22.76169989794962}, {"code": "local function updateParticlePos()\n\t\tfor i = 1, HeroManager.getMaxHeroCount() do\n\t\tlocal hero = HeroManager.getHero(i)\n\t\tif hero then\n\t\t\tlocal effectNode = hero.effectNode\n\t\t\tif effectNode then\n\t\t\t\teffectNode:setPosition(hero.sprite:getPosition())\n\t\t\tend\n\t\tend\n\tend", "CodeBleu_score": 44.11537827538986}, {"code": "local function updateParticlePos()\n\t\tfor i, hero in ipairs(HeroManager:getHeroes()) do\n\t\tif hero.effectNode then\n\t\t\tlocal pos = hero:getPosition()\n\t\t\thero.effectNode:setPosition(pos.x, pos.y)\n\t\tend\n\tend", "CodeBleu_score": 32.01764550559126}]}
{"instance_id": "77829ef7341e", "generation_result": [{"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t    local hero = self:getChildByTag(self.currentHeroTag)\n    if hero:getRace() == \"Knight\" then\n        audio.play(self.knightAudio)\n    elseif hero:getRace() == \"Archer\" then\n        audio.play(self.archerAudio)\n    elseif hero:getRace() == \"Mage\" then\n        audio.play(self.mageAudio)\n    end", "CodeBleu_score": 47.46601552994355}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\tlocal hero = self:getChildByTag(kTagHero)\n\tlocal race = hero.race\n\tif race == \"knight\" then\n\t\taudio.play(self.knightRotate)\n\telseif race == \"archer\" then\n\t\taudio.play(self.archerRotate)\n\telseif race == \"mage\" then\n\t\taudio.play(self.mageRotate)\n\tend", "CodeBleu_score": 37.67641981620461}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t    local hero = self:getChildByTag(1)\n    local heroRace = hero:getRace()\n    local audio\n    if heroRace == \"Knight\" then\n        audio = cc.SimpleAudioEngine:getInstance():playEffect(\"Knight.mp3\")\n    elseif heroRace == \"Archer\" then\n        audio = cc.SimpleAudioEngine:getInstance():playEffect(\"Archer.mp3\")\n    elseif heroRace == \"Mage\" then\n        audio = cc.SimpleAudioEngine:getInstance():playEffect(\"Mage.mp3\")\n    end", "CodeBleu_score": 51.501901391822045}]}
{"instance_id": "2b35fdb15a13", "generation_result": [{"code": "function GameMaster:AddHeros()\n\t    local hero1 = Knight:new(self.world, self.layers[\"HeroLayer\"], 100, 100)\n    hero1:SetIdleMode()\n    self.HeroManager:AddHero(hero1)\n\n    local hero2 = Mage:new(self.world, self.layers[\"HeroLayer\"], 150, 100)\n    hero2:SetIdleMode()\n    self.HeroManager:AddHero(hero2)\n\n    local hero3 = Archer:new(self.world, self.layers[\"HeroLayer\"], 200, 100)\n    hero3:SetIdleMode()\n    self.HeroManager:AddHero(hero3)", "CodeBleu_score": 40.257845099967604}, {"code": "function GameMaster:AddHeros()\n\t    local hero1 = Knight:new()\n    hero1:SetPosition(100, 100)\n    self.layer:AddChild(hero1)\n    hero1:SetIdleMode()\n    self.heroManager:AddHero(hero1)\n    \n    local hero2 = Mage:new()\n    hero2:SetPosition(100, 150)\n    self.layer:AddChild(hero2)\n    hero2:SetIdleMode()\n    self.heroManager:AddHero(hero2)\n    \n    local hero3 = Archer:new()\n    hero3:SetPosition(100, 200)\n    self.layer:AddChild(hero3)\n    hero3:SetIdleMode()\n    self.heroManager:AddHero(hero3)", "CodeBleu_score": 51.12689265839687}, {"code": "function GameMaster:AddHeros()\n\t    local knight = Knight:new()\n    knight:SetPosition(Vector(200, 200))\n    knight:AddToCurrentLayer()\n    knight:SetMode(\"Idle\")\n    self.heroManager:Add(knight)\n    \n    local mage = Mage:new()\n    mage:SetPosition(Vector(300, 200))\n    mage:AddToCurrentLayer()\n    mage:SetMode(\"Idle\")\n    self.heroManager:Add(mage)\n    \n    local archer = Archer:new()\n    archer:SetPosition(Vector(400, 200))\n    archer:AddToCurrentLayer()\n    archer:SetMode(\"Idle\")\n    self.heroManager:Add(archer)", "CodeBleu_score": 56.10525239641135}]}
{"instance_id": "cdfbc82ff3cd", "generation_result": [{"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat:new()\n\tboss.cameraMask = 1\n\tself.currentLayer:addChild(boss)\n\tboss.x = 1000\n\tboss.y = 1000\n\tboss.facingDirection = 2\n\tboss.AIEnabled = false\n\tboss:bounceOut()\n\tboss.AIEnabled = true\n\tself.monsterManager:addMonster(boss)", "CodeBleu_score": 29.479680447651436}, {"code": "function GameMaster:showBoss()\n\t    local boss = Rat:new()\n    boss.cameraMask = 1\n    boss.layer:insert(boss)\n    boss.x = 100\n    boss.y = 100\n    boss.facing = 1\n    boss.aiEnabled = false\n    boss:bounceOut(100, 100, 100, 100)\n    boss.aiEnabled = true\n    MonsterManager:addMonster(boss)", "CodeBleu_score": 31.32334505675416}, {"code": "function GameMaster:showBoss()\n\t    local boss = Rat(self.map.tileWidth * 12, self.map.tileHeight * 12, \"boss\", self.map, self.view)\n    boss.cameraMask = \"camera\"\n    self.layer:insert(boss)\n    boss.direction = \"left\"\n    boss.isAlive = true\n    boss.isActive = false\n    boss:bounceOut()\n    boss.isActive = true\n    self.monsterManager:addMonster(boss)", "CodeBleu_score": 35.6678536637531}]}
{"instance_id": "fa7b402853bb", "generation_result": [{"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation = Animation3D(file)\n\tlocal animate = Animate3D(animation, begin, finish)\n\tanimate:setSpeed(speed)\n\tanimate:retain()\n\treturn animate", "CodeBleu_score": 38.65454245381679}, {"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal anim = Animation3D(file)\n\tlocal anim3d = Animate3D(anim, begin, finish)\n\tanim3d.speed = speed\n\tanim3d.retain = true\n\treturn anim3d", "CodeBleu_score": 32.717485605375536}, {"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal anim = Animation3D(file)\n\tlocal anim3d = Animate3D(anim, begin, finish)\n\tanim3d:setSpeed(speed)\n\tanim3d:retain()\n\treturn anim3d", "CodeBleu_score": 36.41313876338147}]}
{"instance_id": "0725f2413b6b", "generation_result": [{"code": "function removeAll(table)\n\t  for i = #table, 1, -1 do \n    table[i] = nil\n  end", "CodeBleu_score": 34.75127183028599}, {"code": "function removeAll(table)\n\t\tfor i = 1, #table do\n\t\ttable[i] = nil\n\tend", "CodeBleu_score": 32.87132602391901}, {"code": "function removeAll(table)\n\t    for i = 1, #table do\n        table[i]:remove()\n    end", "CodeBleu_score": 31.256815266638633}]}
{"instance_id": "526d10bb37bb", "generation_result": [{"code": "function delayExecute(target, func, delay)\n\t\tlocal sequence = cc.Sequence:create(\n\t\tcc.DelayTime:create(delay),\n\t\tcc.CallFunc:create(func)\n\t\t)\n\ttarget:runAction(sequence)", "CodeBleu_score": 57.95377663644607}, {"code": "function delayExecute(target, func, delay)\n\t    local sequence = cc.Sequence:create(\n        cc.DelayTime:create(delay),\n        cc.CallFunc:create(func)\n    )\n    target:runAction(sequence)", "CodeBleu_score": 57.42994114490253}, {"code": "function delayExecute(target, func, delay)\n\t\tlocal sequence = cc.Sequence:create(cc.DelayTime:create(delay), cc.CallFunc:create(func))\n\ttarget:runAction(sequence)", "CodeBleu_score": 59.653571531857075}]}
{"instance_id": "3b277bd3d0d0", "generation_result": [{"code": "function LoadingScene:addLoadingText(layer)\n\t\n  -- create a table to store the labels\n  self._loading = {}\n\n  -- create and configure the labels\n  for i = 1, 3 do\n\n    -- create the label\n    local label = CCLabelTTF:create(\"loading\", \"Marker Felt.ttf\", 32)\n\n    -- position the label\n    label:setPosition(\n      display.contentCenterX,\n      display.contentCenterY - 40 * i)\n\n    -- add the label to the layer\n    layer:addChild(label)\n\n    -- add the label to the table\n    table.insert(self._loading, label)\n  end", "CodeBleu_score": 25.82257227269874}, {"code": "function LoadingScene:addLoadingText(layer)\n\t  local font = TTFont:new(\"fonts/Arial.ttf\", 20)\n  local loadingText = Text:new(\"Loading\", font, 100, 100)\n  loadingText:setColor(1, 1, 1, 1)\n  layer:addChild(loadingText)\n\n  local percentText = Text:new(\"0%\", font, 100, 150)\n  percentText:setColor(1, 1, 1, 1)\n  layer:addChild(percentText)\n\n  self._loading = {\n    loadingText = loadingText,\n    percentText = percentText\n  }", "CodeBleu_score": 32.85907001139769}, {"code": "function LoadingScene:addLoadingText(layer)\n\t    local fontSize = 24\n    local fontName = \"fonts/Marker Felt.ttf\"\n    local font = cc.Label:createWithTTF(fontName, \"Loading...\", fontSize)\n    local font = cc.Label:createWithTTF(fontName, \"Loading...\", fontSize)\n    font:setColor(cc.c3b(255, 255, 255))\n    font:setPosition(cc.p(self:getContentSize().width / 2, self:getContentSize().height / 2 + 100))\n    layer:addChild(font, 1)\n    self._loading = font", "CodeBleu_score": 38.6262295487984}]}
{"instance_id": "68250ae97644", "generation_result": [{"code": "function MainMenuScene.create()\n\t    local scene = cc.Scene:create()\n    local layer = MainMenuLayer.create()\n    scene:addChild(layer)\n    return scene", "CodeBleu_score": 64.62426729063505}, {"code": "function MainMenuScene.create()\n\t    local scene = cc.Scene:create()\n    local layer = MainMenuLayer.create()\n    scene:addChild(layer)\n    return scene", "CodeBleu_score": 64.62426729063505}, {"code": "function MainMenuScene.create()\n\t    local scene = cc.Scene:create()\n    local layer = MainMenuLayer.create()\n    scene:addChild(layer)\n    return scene", "CodeBleu_score": 64.62426729063505}]}
{"instance_id": "81470efbb6ff", "generation_result": [{"code": "local function collision(object)\n\n\t  -- Check for collisions with heroes\n  for hero in HeroManager:iterate() do\n    if hero:isAlive() then\n      if object:isCollision(hero) then\n        solveCollision(object, hero)\n      end\n    end\n  end\n  \n  -- Check for collisions with monsters\n  for monster in MonsterManager:iterate() do\n    if monster:isAlive() then\n      if object:isCollision(monster) then\n        solveCollision(object, monster)\n      end\n    end\n  end", "CodeBleu_score": 33.25091395756357}, {"code": "local function collision(object)\n\n\t  --[[\n  The function solveCollision(object1, object2) resolves a collision between two objects. The function assumes that the first object is the one that is moving.\n  ]]\n  local function solveCollision(object1, object2)\n    -- Calculate the distance between the two objects\n    local dx = object1.x - object2.x\n    local dy = object1.y - object2.y\n    local distance = math.sqrt(dx * dx + dy * dy)\n \n    -- Calculate the minimum distance between the two objects\n    local minDistance = object1.radius + object2.radius\n \n    -- Check if the distance between the two objects is smaller than the minimum distance\n    if distance < minDistance then\n \n      -- Calculate the amount of overlap between the two objects\n      local overlap = minDistance - distance\n \n      -- Move the first object back by the overlap amount\n      object1.x = object1.x - overlap * dx / distance\n      object1.y = object1.y - overlap * dy / distance\n    end\n  end\n \n  -- Check for collisions with monsters\n  for i = 1, #monsters do\n    local monster = monsters[i]\n    if monster.state == \"alive\" then\n      solveCollision(object, monster)\n    end\n  end\n \n  -- Check for collisions with heroes\n  for i = 1, #heroes do\n    local hero = heroes[i]\n    if hero.state == \"alive\" then\n      solveCollision(object, hero)\n    end\n  end", "CodeBleu_score": 45.57037594633404}, {"code": "local function collision(object)\n\n\t    local heroes = HeroManager.getAliveHeroes()\n    local monsters = MonsterManager.getAliveMonsters()\n\n    for i = 1, #heroes do\n        if object.collision(heroes[i]) then\n            solveCollision(object, heroes[i])\n        end\n    end\n\n    for i = 1, #monsters do\n        if object.collision(monsters[i]) then\n            solveCollision(object, monsters[i])\n        end\n    end\n", "CodeBleu_score": 34.340511037804376}]}
{"instance_id": "f8915bebdc0e", "generation_result": [{"code": "function collisionDetect(dt)\n\t  -- iterate through HeroManager list in reverse order\n  for i=#HeroManager, 1, -1 do\n    local hero = HeroManager[i]\n    if hero.isAlive then\n      -- check if hero is out of bounds\n      if hero.x < 0 or hero.x > WINDOW_WIDTH or hero.y < 0 or hero.y > WINDOW_HEIGHT then\n        hero.isAlive = false\n      else\n        -- iterate through MonsterManager list in reverse order\n        for j=#MonsterManager, 1, -1 do\n          local monster = MonsterManager[j]\n          if monster.isAlive then\n            -- check if hero and monster collided\n            if checkCollision(hero, monster) then\n              hero.isAlive = false\n              monster.isAlive = false\n            end\n          else\n            -- remove monster from MonsterManager list\n            table.remove(MonsterManager, j)\n          end\n        end\n      end\n    else\n      -- remove hero from HeroManager list\n      table.remove(HeroManager, i)\n    end\n  end", "CodeBleu_score": 46.476808300639064}, {"code": "function collisionDetect(dt)\n\t    for i=#HeroManager, 1, -1 do\n        local hero = HeroManager[i]\n        if hero.isAlive then\n            hero.currentFrame = hero.currentFrame + 1\n            if hero.currentFrame > hero.frames then\n                hero.currentFrame = 1\n            end\n            hero.x = hero.x + hero.speed * dt\n            hero.y = hero.y + hero.speed * dt\n            if hero.x > WINDOW_WIDTH then\n                hero.x = 0\n            end\n            if hero.x < 0 then\n                hero.x = WINDOW_WIDTH\n            end\n            if hero.y > WINDOW_HEIGHT then\n                hero.y = 0\n            end\n            if hero.y < 0 then\n                hero.y = WINDOW_HEIGHT\n            end\n            for j=#MonsterManager, 1, -1 do\n                local monster = MonsterManager[j]\n                if monster.isAlive then\n                    if hero.x > monster.x - hero.width/2 and hero.x < monster.x + monster.width/2 and hero.y > monster.y - hero.height/2 and hero.y < monster.y + monster.height/2 then\n                        hero.isAlive = false\n                        monster.isAlive = false\n                    end\n                else\n                    table.remove(MonsterManager, j)\n                end\n            end\n        else\n            table.remove(HeroManager, i)\n        end\n    end", "CodeBleu_score": 40.150739338180315}, {"code": "function collisionDetect(dt)\n\t\tlocal heroes = HeroManager:getAll()\n\tlocal monsters = MonsterManager:getAll()\n\tlocal bullets = BulletManager:getAll()\n\tlocal particles = ParticleManager:getAll()\n\tlocal explosions = ExplosionManager:getAll()\n\t\n\tfor i = #heroes, 1, -1 do\n\t\tlocal hero = heroes[i]\n\t\tif hero.alive then\n\t\t\t-- Check if hero is colliding with a monster\n\t\t\tfor j = #monsters, 1, -1 do\n\t\t\t\tlocal monster = monsters[j]\n\t\t\t\tif monster.alive then\n\t\t\t\t\tif hero:collidesWith(monster) then\n\t\t\t\t\t\thero:collideWithMonster(monster)\n\t\t\t\t\t\tmonster:collideWithHero(hero)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\t-- Check if hero is colliding with a bullet\n\t\t\tfor j = #bullets, 1, -1 do\n\t\t\t\tlocal bullet = bullets[j]\n\t\t\t\tif bullet.alive then\n\t\t\t\t\tif hero:collidesWith(bullet) then\n\t\t\t\t\t\thero:collideWithBullet(bullet)\n\t\t\t\t\t\tbullet:collideWithHero(hero)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\t-- Check if hero is colliding with a particle\n\t\t\tfor j = #particles, 1, -1 do\n\t\t\t\tlocal particle = particles[j]\n\t\t\t\tif particle.alive then\n\t\t\t\t\tif hero:collidesWith(particle) then\n\t\t\t\t\t\thero:collideWithParticle(particle)\n\t\t\t\t\t\tparticle:collideWithHero(hero)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\t-- Check if hero is colliding with an explos", "CodeBleu_score": 37.21866540904175}]}
{"instance_id": "fc081bb122f5", "generation_result": [{"code": "function Actor:specialAttack()\n\t    local attackProperties = self.attackProperties\n    local currentFacingDirection = self.currentFacingDirection\n    local x, y = self.body:getWorldCenter()\n    local attackCollider = world:newRectangleCollider(x, y, attackProperties.width, attackProperties.height)\n    attackCollider:setCollisionClass(\"Attack\")\n    attackCollider:setObject(self)\n    attackCollider:setFixedRotation(true)\n    attackCollider:setAngle(Helper.getFacingAngle(currentFacingDirection))\n    attackCollider:setLinearVelocity(attackProperties.speed * Helper.getFacingVector(currentFacingDirection))\n    attackCollider:applyAngularImpulse(attackProperties.angularVelocity)\n    attackCollider.attackProperties = attackProperties\n    attackCollider.damage = attackProperties.damage\n    attackCollider.isAttack = true\n    attackCollider.isSpecialAttack = true\n    attackCollider.isBullet = attackProperties.isBullet\n    attackCollider.isProjectile = attackProperties.isProjectile\n    attackCollider.isFromEnemy = self.isEnemy\n    attackCollider.isFromPlayer = self.isPlayer\n    attackCollider.isFromTank = self.isTank\n    attackCollider.isFromMelee = self.isMelee\n    attackCollider.isFromShooter = self.isShooter\n    attackCollider.isFromRanged = self.isRanged\n    attackCollider.isFromStationary = self.isStationary\n    attackCollider.isFromMobile = self.isMobile\n    attackCollider.isFromFlier = self.isFlier\n    attackCollider.isFromPlain = self.isPlain\n    attackCollider.isFromWater = self.isWater\n    attackCollider.isFromAir = self.isAir\n    attackCollider.isFromLand = self.isLand\n    attackCollider.isFromHover = self.isHover\n    attackCollider.isFromSwimmer = self.isSwimmer\n    attackCollider.isFromBoss = self", "CodeBleu_score": 40.254604389743676}, {"code": "function Actor:specialAttack()\n\t    local attack = AttackCommand:new(self.x, self.y, self.facing, self.specialAttack)\n    attack.onHit = function(self, target)\n        target:takeDamage(self.attack.damage)\n    end\n    self.world:addCommand(attack)\n    self.world:playSound(\"special_attack\")", "CodeBleu_score": 33.30109164116075}, {"code": "function Actor:specialAttack()\n\t    local attack = AttackCommand:new(self.position, self.facingDirection, self.specialAttackProperties)\n    attack.onCollision = function(attack, enemy)\n        enemy:takeDamage(attack.damage)\n    end\n    attack.onAnimationComplete = function(attack)\n        attack:destroy()\n    end\n    attack.onDestroy = function(attack)\n        attack.actor:specialAttackCoolDown()\n    end\n    attack.actor = self\n    self.world:addChild(attack)\n    self.world:addChild(SoundEffect(self.specialAttackSound))", "CodeBleu_score": 48.61491965446969}]}
{"instance_id": "bfc98809aacb", "generation_result": [{"code": "function Slime:angryFace(trueFalse)\n\t    if trueFalse ~= self.angry then\n        self.angry = trueFalse\n        if trueFalse then\n            self.sprite3D:setTexture(\"slimeAngry.png\")\n        else\n            self.sprite3D:setTexture(\"slimeNormal.png\")\n        end\n    end", "CodeBleu_score": 70.9040265992145}, {"code": "function Slime:angryFace(trueFalse)\n\t    if trueFalse then\n        if self.texture ~= self.angryTexture then\n            self.texture = self.angryTexture\n            self.sprite3D:setTexture(self.texture)\n        end\n    else\n        if self.texture ~= self.normalTexture then\n            self.texture = self.normalTexture\n            self.sprite3D:setTexture(self.texture)\n        end\n    end", "CodeBleu_score": 44.6683791519675}, {"code": "function Slime:angryFace(trueFalse)\n\t    if trueFalse then\n        if self.sprite.texture ~= self.textureAngry then\n            self.sprite.texture = self.textureAngry\n        end\n    else\n        if self.sprite.texture ~= self.textureNormal then\n            self.sprite.texture = self.textureNormal\n        end\n    end", "CodeBleu_score": 43.569190489754526}]}
{"instance_id": "546a0b8fb77b", "generation_result": [{"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t    val font = Fonts.getFont(char)\n    val paint = Paint()\n    paint.typeface = Typeface.create(font.fontFamily, font.fontStyle)\n    paint.textSize = font.fontSize.toFloat()\n    paint.color = font.fontColor\n    paint.isAntiAlias = true\n\n    val text = char.toString()\n    val bounds = Rect()\n    paint.getTextBounds(text, 0, text.length, bounds)\n\n    val width = ceil(bounds.width().toDouble()).toInt()\n    val height = ceil(bounds.height().toDouble()).toInt()\n\n    val bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\n    val canvas = Canvas(bitmap)\n    canvas.drawText(text, 0f, abs(bounds.top).toFloat(), paint)\n\n    val pixmap = Pixmap(width, height, Pixmap.Format.RGBA8888)\n    pixmap.drawPixmap(BitmapPixmap(bitmap), 0, 0)\n    return pixmap\n}", "CodeBleu_score": 50.076021967341}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t    val font = Fonts.getFont(char)\n\n    val fontImplementation = FontImplementation.getImplementation(font)\n    val fontMetrics = FontMetricsCommon.getMetrics(font)\n\n    val fontSize = font.size\n    val fontStyle = font.style\n\n    val text = char.toString()\n    val textWidth = fontMetrics.getWidth(text)\n    val textHeight = fontMetrics.getHeight(text)\n\n    val bitmap = Bitmap.createBitmap(textWidth, textHeight, Bitmap.Config.ARGB_8888)\n    val canvas = Canvas(bitmap)\n\n    val paint = Paint()\n    paint.color = -1\n    paint.textSize = fontSize\n    paint.typeface = Typeface.create(fontImplementation.fontFamily, fontStyle)\n    paint.isAntiAlias = true\n    paint.isSubpixelText = true\n    paint.isLinearText = true\n    paint.isFakeBoldText = font.isBold\n    paint.isItalic = font.isItalic\n    paint.isUnderlineText = font.isUnderline\n    paint.isStrikeThruText = font.isStrikeThrough\n\n    val xPos = 0f\n    val yPos = abs(fontMetrics.getAscent(text))\n\n    canvas.drawText(text, xPos, yPos, paint)\n\n    val pixmap = Pixmap(textWidth, textHeight, Pixmap.Format.RGBA8888)\n    val pixels = IntArray(textWidth * textHeight)\n    bitmap.getPixels(pixels, 0, textWidth, 0, 0, textWidth, textHeight)\n    pixmap.drawPixels(pixels, 0, textWidth, 0, 0, textWidth, textHeight)\n    bitmap.recycle()\n\n    return pixmap\n}", "CodeBleu_score": 47.39567083923697}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t    val font = Fonts.getFont(char)\n\n    val fontSize = font.size\n    val fontStyle = FontStyle.create(FontStyle.WEIGHT_REGULAR, FontStyle.SLANT_UPRIGHT)\n    val fontFamily = FontFamily.Builder(font.fontFamily, font.fontStyle).build()\n    val typeface = Typeface.create(fontFamily, fontStyle)\n\n    val paint = Paint()\n    paint.typeface = typeface\n    paint.textSize = fontSize\n    paint.color = -1\n    paint.isAntiAlias = true\n    paint.isLinearText = true\n    paint.isSubpixelText = true\n\n    val text = char.toString()\n    val textWidth = paint.measureText(text).toInt()\n    val textHeight = paint.fontMetrics.descent.toInt() - paint.fontMetrics.ascent.toInt()\n\n    val bitmap = Bitmap.createBitmap(textWidth, textHeight, Bitmap.Config.ARGB_8888)\n    val canvas = Canvas(bitmap)\n\n    canvas.drawText(text, 0f, paint.fontMetrics.descent - paint.fontMetrics.ascent, paint)\n\n    val pixmap = Pixmap(textWidth, textHeight, Pixmap.Format.RGBA8888)\n\n    for (x in 0 until textWidth) {\n        for (y in 0 until textHeight) {\n            val pixel = bitmap.getPixel(x, y)\n            val alpha = pixel.shr(24).and(0xff)\n            val red = pixel.shr(16).and(0xff)\n            val green = pixel.shr(8).and(0xff)\n            val blue = pixel.and(0xff)\n\n            pixmap.drawPixel(x, y, (alpha shl 24) or (blue shl 16) or (green shl 8) or red)\n        }\n    }\n\n    bitmap.recycle()\n\n    return pixmap\n}", "CodeBleu_score": 51.485180969525565}]}
{"instance_id": "9c1ce2567ce1", "generation_result": [{"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t        val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n            addCategory(Intent.CATEGORY_OPENABLE)\n            type = \"text/plain\"\n            putExtra(Intent.EXTRA_TITLE, suggestedLocation)\n        }\n        (context as Activity).startActivityForResult(intent, PlatformSaverLoader.SAVE_REQUEST_CODE) { resultCode, intent ->\n            if (resultCode != Activity.RESULT_OK) {\n                onError(Exception(\"Failed to save game\"))\n                return@startActivityForResult\n            }\n            val uri = intent?.data ?: return@startActivityForResult\n            val outputStream: OutputStream? = context.contentResolver.openOutputStream(uri)\n            outputStream?.use {\n                it.write(data.toByteArray())\n                it.close()\n            }\n            onSaved(uri.toString())\n        }\n    }", "CodeBleu_score": 45.78262559687819}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t        val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n            addCategory(Intent.CATEGORY_OPENABLE)\n            type = \"text/plain\"\n            putExtra(Intent.EXTRA_TITLE, suggestedLocation)\n        }\n        val activity = activity ?: return\n        activity.startActivityForResult(intent, PlatformSaverLoader.SAVE_REQUEST_CODE) {\n            if (it.resultCode == Activity.RESULT_OK) {\n                val uri = it.data?.data ?: return@startActivityForResult\n                val outputStream = activity.contentResolver.openOutputStream(uri) ?: return@startActivityForResult\n                outputStream.write(data.toByteArray())\n                outputStream.close()\n                onSaved(uri.toString())\n            }\n        }\n    }", "CodeBleu_score": 45.80391458502315}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t        val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n            addCategory(Intent.CATEGORY_OPENABLE)\n            type = \"text/plain\"\n            putExtra(Intent.EXTRA_TITLE, suggestedLocation)\n        }\n\n        val callback = object : ActivityResultCallback<Uri?> {\n            override fun onActivityResult(result: Uri?) {\n                if (result == null) {\n                    onError(Exception(\"Failed to save the game.\"))\n                    return\n                }\n                try {\n                    activity.contentResolver.openOutputStream(result).use { outputStream ->\n                        outputStream?.write(data.toByteArray())\n                    }\n                    onSaved(result.toString())\n                } catch (ex: Exception) {\n                    onError(ex)\n                }\n            }\n        }\n\n        activity.registerForActivityResult(ActivityResultContracts.StartActivityForResult(), callback).launch(intent)\n    }", "CodeBleu_score": 49.81210806293418}]}
{"instance_id": "ea556fe12030", "generation_result": [{"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t        val intent = Intent(Intent.ACTION_OPEN_DOCUMENT)\n        intent.addCategory(Intent.CATEGORY_OPENABLE)\n        intent.type = \"text/plain\"\n        intent.putExtra(Intent.EXTRA_LOCAL_ONLY, true)\n        intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, false)\n        val activity = PlatformSaverLoader.activity\n        activity.startActivityForResult(intent, PlatformSaverLoader.LOAD_REQUEST_CODE)\n        PlatformSaverLoader.loadCallback = {\n            onLoaded(it.first, it.second)\n        }\n        PlatformSaverLoader.errorCallback = {\n            onError(it)\n        }\n}", "CodeBleu_score": 46.7977130605275}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t    val intent = Intent(Intent.ACTION_OPEN_DOCUMENT)\n    intent.addCategory(Intent.CATEGORY_OPENABLE)\n    intent.type = \"*/*\"\n    (context as Activity).startActivityForResult(intent, LOAD_REQUEST_CODE)\n    onLoadCallback = onLoaded\n    onErrorCallback = onError\n}", "CodeBleu_score": 40.011820411427856}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t        val intent = Intent(Intent.ACTION_OPEN_DOCUMENT).apply {\n            addCategory(Intent.CATEGORY_OPENABLE)\n            type = \"text/plain\"\n        }\n        (context as Activity).startActivityForResult(intent, 42)\n        fileLoadCallback = { data, location -> onLoaded(data, location) }\n        fileLoadErrorCallback = onError\n}", "CodeBleu_score": 40.35070290959523}]}
{"instance_id": "813990d9bb4d", "generation_result": [{"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t    val intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\n    intent.addCategory(Intent.CATEGORY_OPENABLE)\n    intent.type = \"application/json\"\n    intent.putExtra(Intent.EXTRA_TITLE, fileName)\n    if (uri.scheme == \"content\") {\n        intent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n    }\n    (PlatformSaverLoader.activity as Activity).startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 82.95086717737958}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t    val intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\n    intent.addCategory(Intent.CATEGORY_OPENABLE)\n    intent.type = \"application/json\"\n    intent.putExtra(Intent.EXTRA_TITLE, fileName)\n    if (uri.scheme == \"content\") {\n        intent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n    }\n    activity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 86.34416979715816}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t    val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n        addCategory(Intent.CATEGORY_OPENABLE)\n        type = \"application/json\"\n        putExtra(Intent.EXTRA_TITLE, fileName)\n        if (uri.scheme == \"content\") {\n            putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n        }\n    }\n    (PlatformSaverLoader.activity as Activity).startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 67.03951063334154}]}
{"instance_id": "a423b39ba6fe", "generation_result": [{"code": "fun createNotificationChannelInfo(appContext: Context){\n\t    // Create the NotificationChannel, but only on API 26+ because\n    // the NotificationChannel class is new and not in the support library\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n        val name = \"Unciv\"\n        val descriptionText = \"Unciv\"\n        val importance = NotificationManager.IMPORTANCE_DEFAULT\n        val channel = NotificationChannel(CHANNEL_ID, name, importance).apply {\n            description = descriptionText\n            enableVibration(true)\n            vibrationPattern = longArrayOf(100, 200, 300, 400, 500, 400, 300, 200, 400)\n        }\n        // Register the channel with the system\n        val notificationManager: NotificationManager =\n            appContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n        notificationManager.createNotificationChannel(channel)\n    }\n}", "CodeBleu_score": 43.00099655907253}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\t    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n        val importance = NotificationManager.IMPORTANCE_DEFAULT\n        val channel = NotificationChannel(CHANNEL_ID, \"unciv\", importance)\n        channel.description = \"unciv\"\n        channel.enableLights(true)\n        channel.lightColor = Color.RED\n        channel.enableVibration(true)\n        channel.vibrationPattern = longArrayOf(100, 200, 300, 400, 500, 400, 300, 200, 400)\n        channel.setShowBadge(false)\n        val notificationManager = appContext.getSystemService(NotificationManager::class.java)\n        notificationManager.createNotificationChannel(channel)\n    }\n}", "CodeBleu_score": 38.70704928737989}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\t    // Create the NotificationChannel, but only on API 26+ because\n    // the NotificationChannel class is new and not in the support library\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n        val name = \"unciv-notifications\"\n        val descriptionText = \"unciv-notifications\"\n        val importance = NotificationManager.IMPORTANCE_DEFAULT\n        val channel = NotificationChannel(appContext.getString(R.string.default_notification_channel_id), name, importance).apply {\n            description = descriptionText\n        }\n        // Register the channel with the system\n        val notificationManager: NotificationManager =\n            appContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n        notificationManager.createNotificationChannel(channel)\n    }\n}", "CodeBleu_score": 43.3526898155671}]}
{"instance_id": "4f3e7f77a567", "generation_result": [{"code": "fun packImages(workingPath: String){\n\t    val mainAtlas = workingPath + File.separator + \"assets\"\n    val modsAtlas = workingPath + File.separator + \"mods\"\n\n    try {\n        packImages(mainAtlas)\n    } catch (e: Exception) {\n        println(\"An error occurred while packing the main images: ${e.message}\")\n    }\n\n    val mods = File(modsAtlas)\n    if (mods.exists()) {\n        val modList = mods.listFiles()\n        for (mod in modList) {\n            if (mod.isDirectory && !mod.isHidden) {\n                try {\n                    packImages(modsAtlas + File.separator + mod.name)\n                } catch (e: Exception) {\n                    println(\"An error occurred while packing the images for ${mod.name}: ${e.message}\")\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 45.49715227922887}, {"code": "fun packImages(workingPath: String){\n\t    val workingPathFile = File(workingPath)\n    val modsPath = File(workingPathFile, \"mods\")\n\n    try {\n        packImages(workingPathFile)\n        if (modsPath.exists()) {\n            for (mod in modsPath.listFiles()) {\n                if (mod.isHidden) continue\n                packImages(mod)\n            }\n        }\n    } catch (e: Exception) {\n        e.printStackTrace()\n    }\n}", "CodeBleu_score": 43.00270495706657}, {"code": "fun packImages(workingPath: String){\n\t    // Pack images for the main assets folder\n    try {\n        val packer = TexturePacker(workingPath, \"assets\", Texture.TextureFilter.Nearest, true)\n        packer.settings.maxWidth = 2048\n        packer.settings.maxHeight = 2048\n        packer.pack(\"images\", \".png\")\n        packer.pack(\"images\", \".jpg\")\n        packer.pack(\"images\", \".jpeg\")\n        packer.pack(\"images\", \".bmp\")\n        packer.pack(\"images\", \".tiff\")\n        packer.pack(\"images\", \".tif\")\n        packer.pack(\"images\", \".gif\")\n        packer.pack(\"images\", \".tga\")\n        packer.pack(\"images\", \".psd\")\n        packer.pack(\"images\", \".hdr\")\n        packer.pack(\"images\", \".pic\")\n        packer.pack(\"images\", \".pnm\")\n    } catch (e: Exception) {\n        e.printStackTrace()\n    }\n\n    // Pack images for each mod\n    val mods = File(workingPath + \"/mods\")\n    if (mods.exists()) {\n        for (file in mods.listFiles()) {\n            if (!file.isHidden) {\n                try {\n                    val packer = TexturePacker(workingPath + \"/mods/\" + file.name, \"assets\", Texture.TextureFilter.Nearest, true)\n                    packer.settings.maxWidth = 2048\n                    packer.settings.maxHeight = 2048\n                    packer.pack(\"images\", \".png\")\n                    packer.pack(\"images\", \".jpg\")\n                    packer.pack(\"images\", \".jpeg\")\n                    packer.pack(\"images\", \".bmp\")\n                    packer.pack(\"images\", \".tiff\")\n                    packer.pack(\"images\", \".tif\")\n                    packer.pack(\"images\", \".gif\")\n                    packer.pack(\"images\", \".tga\")\n                    packer.pack(\"images\", \".psd\")\n                    packer.pack(\"images\", \".hdr\")\n                ", "CodeBleu_score": 39.92772929894961}]}
{"instance_id": "206dbb3c21eb", "generation_result": [{"code": "suspend fun reloadWorldscreen(){\n\t    val worldScreen = WorldScreen.instance\n\n    if (worldScreen != null) {\n        val gameInfo = worldScreen.gameInfo\n        val playerType = worldScreen.playerType\n        val playerIndex = worldScreen.playerIndex\n        val playerName = worldScreen.playerName\n\n        val newWorldScreen = WorldScreen(gameInfo, playerType, playerIndex, playerName)\n        BaseScreen.instance.setScreen(newWorldScreen)\n    }\n}", "CodeBleu_score": 32.53956792141953}, {"code": "suspend fun reloadWorldscreen(){\n\t\tval worldscreen = WorldScreen.instance\n\n\tval newWorldScreen = WorldScreen()\n\n\tnewWorldScreen.setLanguage(worldscreen.language)\n\tnewWorldScreen.setGameInfo(worldscreen.gameInfo)\n\tnewWorldScreen.setPlayerType(worldscreen.playerType)\n\tnewWorldScreen.setPlayerId(worldscreen.playerId)\n\tnewWorldScreen.setAutoPlay(worldscreen.autoPlay)\n\n\tnewWorldScreen.setGameSettings(worldscreen.gameSettings)\n\tnewWorldScreen.setPlayerReadyScreen(worldscreen.playerReadyScreen)\n\tnewWorldScreen.setOnlineMultiplayer(worldscreen.onlineMultiplayer)\n\n\tnewWorldScreen.setRulesetCache(worldscreen.rulesetCache)\n\tnewWorldScreen.setSkinCache(worldscreen.skinCache)\n\tnewWorldScreen.setTileSetCache(worldscreen.tileSetCache)\n\n\tnewWorldScreen.setImageGetter(worldscreen.imageGetter)\n\tnewWorldScreen.setTranslations(worldscreen.translations)\n\tnewWorldScreen.setFonts(worldscreen.fonts)\n\n\tnewWorldScreen.setMusicController(worldscreen.musicController)\n\tnewWorldScreen.setSoundPlayer(worldscreen.soundPlayer)\n\n\tnewWorldScreen.setDebugUtils(worldscreen.debugUtils)\n\tnewWorldScreen.setDisplay(worldscreen.display)\n\tnewWorldScreen.setConcurrency(worldscreen.concurrency)\n\tnewWorldScreen.setPlatformSpecific(worldscreen.platformSpecific)\n\n\tnewWorldScreen.setUncivFiles(worldscreen.uncivFiles)\n\n\tworldscreen.stage.addActor(newWorldScreen)\n\n\tnewWorldScreen.setGameInfo(worldscreen.gameInfo)\n\tnewWorldScreen.setPlayerType(worldscreen.playerType)\n\tnewWorldScreen.setPlayerId(worldscreen.playerId)\n\tnewWorldScreen.setAutoPlay(worldscreen.autoPlay)\n\n\tnewWorldScreen.setGameSettings(worldscreen.gameSettings)\n\tnewWorldScreen.setPlayerReadyScreen(worldscreen.playerReadyScreen)\n\tnewWorldScreen.setOnlineMultiplayer(worldscreen.", "CodeBleu_score": 25.224131656942983}, {"code": "suspend fun reloadWorldscreen(){\n\t    // We are going to be changing the screen, so we need to wait for the current screen to finish rendering\n    // before we can switch to the new screen.\n    Display.waitForCurrentScreenToFinishRendering()\n\n    // We are going to be changing the screen, so we need to wait for the current screen to finish rendering\n    // before we can switch to the new screen.\n    Display.waitForCurrentScreenToFinishRendering()\n\n    // We are going to be changing the screen, so we need to wait for the current screen to finish rendering\n    // before we can switch to the new screen.\n    Display.waitForCurrentScreenToFinishRendering()\n\n    // We are going to be changing the screen, so we need to wait for the current screen to finish rendering\n    // before we can switch to the new screen.\n    Display.waitForCurrentScreenToFinishRendering()\n\n    // We are going to be changing the screen, so we need to wait for the current screen to finish rendering\n    // before we can switch to the new screen.\n    Display.waitForCurrentScreenToFinishRendering()\n\n    // We are going to be changing the screen, so we need to wait for the current screen to finish rendering\n    // before we can switch to the new screen.\n    Display.waitForCurrentScreenToFinishRendering()\n\n    // We are going to be changing the screen, so we need to wait for the current screen to finish rendering\n    // before we can switch to the new screen.\n    Display.waitForCurrentScreenToFinishRendering()\n\n    // We are going to be changing the screen, so we need to wait for the current screen to finish rendering\n    // before we can switch to the new screen.\n    Display.waitForCurrentScreenToFinishRendering()\n\n    // We are going to be changing the screen, so we need to wait for the current screen to finish rendering\n    // before we can switch to the new screen.\n    Display.waitForCurrentScreenToFinishRendering()\n\n    // We are going to be changing the screen, so we need to wait for the current screen to finish rendering\n    // before we can switch to the new screen.\n    Display.waitForCurrentScreenToFinishRendering()\n\n    //", "CodeBleu_score": 17.91443387640923}]}
{"instance_id": "2d8fdcb5ad6f", "generation_result": [{"code": "fun goToMainMenu(): MainMenuScreen{\n\t\treturn MainMenuScreen()\n}", "CodeBleu_score": 4.247728111670419}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\t\treturn MainMenuScreen()\n}", "CodeBleu_score": 4.247728111670419}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\t\tval mainMenuScreen = MainMenuScreen(\n\t\t\tGameSettings.currentSettings.ruleset,\n\t\t\tGameSettings.currentSettings.tileSet,\n\t\t\tGameSettings.currentSettings.skin,\n\t\t\tGameSettings.currentSettings.musicMood,\n\t\t\tGameSettings.currentSettings.musicTrackChooserFlags)\n\n\tmainMenuScreen.setLanguage(GameSettings.currentSettings.language)\n\n\treturn mainMenuScreen\n}", "CodeBleu_score": 42.73514633243273}]}
{"instance_id": "df60142d384c", "generation_result": [{"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t    val config = Lwjgl3ApplicationConfiguration()\n    val graphics = Gdx.graphics as Lwjgl3Graphics\n    val display = graphics.lwjgl3Display\n    val window = display.window\n    val monitor = display.monitor\n\n    val graphicsDevice = GraphicsEnvironment.getLocalGraphicsEnvironment().defaultScreenDevice\n    val graphicsConfig = graphicsDevice.defaultConfiguration\n    val screenBounds = graphicsConfig.bounds\n\n    val maxWidth = screenBounds.width\n    val maxHeight = screenBounds.height\n    val maxBounds = Monitor(maxWidth, maxHeight, monitor.x, monitor.y)\n\n    val width = (maxWidth * settings.windowedWidth).roundToInt()\n    val height = (maxHeight * settings.windowedHeight).roundToInt()\n    val x = (maxWidth * settings.windowedX).roundToInt()\n    val y = (maxHeight * settings.windowedY).roundToInt()\n\n    config.setWindowedMode(width, height)\n    config.setWindowPosition(x, y)\n    graphics.setDisplayMode(maxBounds, config)\n\n    return width == maxWidth && height == maxHeight\n}", "CodeBleu_score": 36.36701217633811}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t    val config = Lwjgl3ApplicationConfiguration()\n    val graphics = Gdx.graphics as Lwjgl3Graphics\n    val monitor: Monitor = graphics.monitor\n    val graphicsDevice: GraphicsDevice = monitor.graphicsDevice\n    val graphicsConfiguration: GraphicsConfiguration = graphicsDevice.defaultConfiguration\n    val screenSize = graphicsConfiguration.bounds\n    val screenBounds = PlatformDisplay.getScreenBounds(graphicsDevice)\n\n    val screenWidth = screenBounds.width.toFloat()\n    val screenHeight = screenBounds.height.toFloat()\n\n    val screenWidthRatio = screenWidth / screenBounds.width\n    val screenHeightRatio = screenHeight / screenBounds.height\n\n    val width = (settings.windowWidth * screenWidthRatio).roundToInt()\n    val height = (settings.windowHeight * screenHeightRatio).roundToInt()\n\n    config.setWindowedMode(width, height)\n\n    graphics.setDisplayMode(width, height, config.windowedMode)\n    graphics.setWindowedMode(width, height)\n\n    return width == screenWidth && height == screenHeight\n}", "CodeBleu_score": 42.646505432771676}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t    val graphics = Gdx.graphics as Lwjgl3Graphics\n    val config = graphics.config as Lwjgl3ApplicationConfiguration\n    val graphicsDevice = GraphicsEnvironment.getLocalGraphicsEnvironment().defaultScreenDevice\n    val graphicsConfiguration = graphicsDevice.defaultConfiguration\n\n    val screenWidth = graphicsConfiguration.bounds.width\n    val screenHeight = graphicsConfiguration.bounds.height\n\n    val maxWidth = screenWidth * settings.windowedMaxWidth\n    val maxHeight = screenHeight * settings.windowedMaxHeight\n\n    val width = if (settings.windowedWidth > maxWidth) maxWidth else settings.windowedWidth\n    val height = if (settings.windowedHeight > maxHeight) maxHeight else settings.windowedHeight\n\n    config.width = width.toInt()\n    config.height = height.toInt()\n\n    val window = graphics.window\n    window.setSize(width.toInt(), height.toInt())\n    window.setPosition(\n        (screenWidth / 2 - width / 2).roundToInt(),\n        (screenHeight / 2 - height / 2).roundToInt()\n    )\n\n    graphics.setDisplayMode(width.toInt(), height.toInt(), config.windowedMode)\n    graphics.setTitle(tr(settings.title))\n\n    return width == maxWidth && height == maxHeight\n}", "CodeBleu_score": 36.68394383341042}]}
{"instance_id": "a8b17234c4e5", "generation_result": [{"code": "private fun getLinuxDistro(): String{\n\t    val osReleaseFile = FileHandle(\"/etc/os-release\")\n    val osReleaseMap = mutableMapOf<String, String>()\n    val charset = Charset.defaultCharset()\n    osReleaseFile.readLines(charset).forEach { line ->\n        if (line.contains(\"=\")) {\n            val (key, value) = line.split(\"=\")\n            osReleaseMap[key] = value.replace(\"\\\"\", \"\")\n        }\n    }\n    if (osReleaseMap.containsKey(\"NAME\")) {\n        return if (osReleaseMap.containsKey(\"PRETTY_NAME\")) {\n            osReleaseMap[\"PRETTY_NAME\"]!!\n        } else {\n            \"${osReleaseMap[\"NAME\"]} ${osReleaseMap[\"VERSION\"]}\"\n        }\n    }\n    return \"\"\n}", "CodeBleu_score": 38.65483261058928}, {"code": "private fun getLinuxDistro(): String{\n\t    val osReleaseFile = FileHandle(\"os-release\")\n    val osRelease = osReleaseFile.readString(Charset.defaultCharset().name())\n    val osReleaseMap = osRelease.split(\"\n\").map {\n        val split = it.split(\"=\")\n        split[0] to split[1].replace(\"\\\"\", \"\")\n    }.toMap()\n    return if (osReleaseMap.containsKey(\"NAME\")) {\n        if (osReleaseMap.containsKey(\"PRETTY_NAME\")) {\n            osReleaseMap[\"PRETTY_NAME\"]!!\n        } else {\n            \"${osReleaseMap[\"NAME\"]} ${osReleaseMap[\"VERSION\"]}\"\n        }\n    } else {\n        \"\"\n    }\n}", "CodeBleu_score": 45.687022290279145}, {"code": "private fun getLinuxDistro(): String{\n\t    val osReleaseFile = FileHandle(\"/etc/os-release\")\n    val osReleaseMap = mutableMapOf<String, String>()\n    if (osReleaseFile.exists()) {\n        osReleaseFile.readString(Charset.defaultCharset()).split(\"\n\").forEach { line ->\n            if (line.contains(\"=\")) {\n                val key = line.substringBefore(\"=\")\n                val value = line.substringAfter(\"=\")\n                osReleaseMap[key] = value.replace(\"\\\"\", \"\")\n            }\n        }\n    }\n    return when {\n        osReleaseMap.containsKey(\"PRETTY_NAME\") -> osReleaseMap[\"PRETTY_NAME\"]!!\n        osReleaseMap.containsKey(\"NAME\") -> \"${osReleaseMap[\"NAME\"]} ${osReleaseMap[\"VERSION\"]}\"\n        else -> \"\"\n    }\n}", "CodeBleu_score": 39.96498379219393}]}
{"instance_id": "36a1d2e56540", "generation_result": [{"code": "private fun flashWindow(){\n\t    // First, we try to use the FLASHW_ALL flag to flash the window and taskbar button.\n    // This is the preferred method, as it's the most visible.\n    try {\n        val hWnd = GLFWNativeWin32.glfwGetWin32Window(Lwjgl3Window.getWindowHandle())\n        val hWndPtr = Pointer(Native.getComponentPointer(hWnd))\n        val uFlashWInfo = WinUser.FLASHWINFO(hWndPtr, WinUser.FLASHW_ALL, 3, 0)\n        User32.INSTANCE.FlashWindowEx(uFlashWInfo)\n    } catch (e: Exception) {\n        Log.error(\"FlashWindowEx failed\", e)\n    }\n\n    // If FlashWindowEx failed, we try to use the FLASHW_CAPTION flag to flash the window.\n    // This is the second-most visible method, as it doesn't flash the taskbar button.\n    if (!User32.INSTANCE.GetForegroundWindow().equals(GLFWNativeWin32.glfwGetWin32Window(Lwjgl3Window.getWindowHandle()))) {\n        try {\n            val hWnd = GLFWNativeWin32.glfwGetWin32Window(Lwjgl3Window.getWindowHandle())\n            val hWndPtr = Pointer(Native.getComponentPointer(hWnd))\n            val uFlashWInfo = WinUser.FLASHWINFO(hWndPtr, WinUser.FLASHW_CAPTION, 3, 0)\n            User32.INSTANCE.FlashWindowEx(uFlashWInfo)\n        } catch (e: Exception) {\n            Log.error(\"FlashWindowEx failed\", e)\n        }\n    }\n\n    // If FlashWindowEx failed, we try to use the FLASHW_TIMER flag to flash the window.\n    // This is the least visible method, as it only flashes the window border.\n    if (!User32.INSTANCE.GetForegroundWindow().equals(GLFWNativeWin32.glfwGetWin", "CodeBleu_score": 50.147661479366235}, {"code": "private fun flashWindow(){\n\t    try {\n        val window = Lwjgl3Window.getWindow()\n        val hwnd = GLFWNativeWin32.glfwGetWin32Window(window.windowHandle)\n        val hWnd = WinDef.HWND(hwnd)\n        val hInstance = User32.INSTANCE.GetWindowLong(hWnd, WinUser.GWL_HINSTANCE)\n        val flashWInfo = WinUser.FLASHWINFO()\n        flashWInfo.hWnd = hWnd\n        flashWInfo.dwFlags = WinUser.FLASHW_ALL\n        flashWInfo.uCount = 10\n        flashWInfo.dwTimeout = 0\n        User32.INSTANCE.FlashWindowEx(flashWInfo)\n    } catch (e: Exception) {\n        Log.e(\"Failed to flash window\", e)\n    }\n}", "CodeBleu_score": 51.212862056887644}, {"code": "private fun flashWindow(){\n\t    try {\n        val window = Lwjgl3Window.getWindowHandle()\n        val windowHandle = GLFWNativeWin32.glfwGetWin32Window(window)\n        val user32 = Native.load(\"user32\", User32::class.java)\n        val windowLong = user32.GetWindowLong(windowHandle, WinUser.GWL_EXSTYLE)\n        val windowLongWithFlashingFlag = windowLong or WinUser.WS_EX_DLGMODALFRAME\n        user32.SetWindowLong(windowHandle, WinUser.GWL_EXSTYLE, windowLongWithFlashingFlag)\n        user32.FlashWindow(windowHandle, WinUser.FLASHW_ALL or WinUser.FLASHW_TIMERNOFG or WinUser.FLASHW_TRAY)\n        user32.SetWindowLong(windowHandle, WinUser.GWL_EXSTYLE, windowLong)\n    } catch (e: Exception) {\n        Log.error(\"Failed to flash window: ${e.message}\")\n    }\n}", "CodeBleu_score": 38.36990113848343}]}
{"instance_id": "8e3c7096415a", "generation_result": [{"code": "public void onFullBackup(FullBackupDataOutput data){\n\t    try {\n        // Back up shared preferences file\n        String sharedPrefsFilename = getPackageName() + \"_preferences.xml\";\n        File sharedPrefsFile = new File(getFilesDir(), sharedPrefsFilename);\n        if (sharedPrefsFile.exists()) {\n            ParcelFileDescriptor descriptor =\n                    ParcelFileDescriptor.open(sharedPrefsFile, ParcelFileDescriptor.MODE_READ_ONLY);\n            data.writeEntityHeader(sharedPrefsFilename, descriptor.getStatSize());\n            FileInputStream input = new FileInputStream(descriptor.getFileDescriptor());\n            byte[] buffer = new byte[8192];\n            int bytesRead;\n            while ((bytesRead = input.read(buffer)) != -1) {\n                data.writeEntityData(buffer, 0, bytesRead);\n            }\n            input.close();\n            descriptor.close();\n        }\n\n        // Back up game data files\n        String filename;\n        File file;\n\n        // Back up rankings\n        filename = Rankings.FILENAME;\n        file = new File(getFilesDir(), filename);\n        if (file.exists()) {\n            ParcelFileDescriptor descriptor =\n                    ParcelFileDescriptor.open(file, ParcelFileDescriptor.MODE_READ_ONLY);\n            data.writeEntityHeader(filename, descriptor.getStatSize());\n            FileInputStream input = new FileInputStream(descriptor.getFileDescriptor());\n            byte[] buffer = new byte[8192];\n            int bytesRead;\n            while ((bytesRead = input.read(buffer)) != -1) {\n                data.writeEntityData(buffer, 0, bytesRead);\n            }\n            input.close();\n            descriptor.close();\n        }\n\n        // Back up badges\n        filename = Badges.FILENAME;\n        file = new File(getFilesDir(), filename);\n        if (file.exists()) {\n            ParcelFileDescriptor descriptor =\n                    ParcelFileDescriptor.open(file, ParcelFileDescriptor.MODE_READ_ONLY);\n            data.writeEntityHeader(filename, descriptor.getStatSize());\n            FileInputStream input = new FileInputStream(des", "CodeBleu_score": 18.02070052510498}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t\n    // Backup shared preferences\n    File sharedPrefs = new File(getFilesDir(), \"shared_prefs\");\n    File[] sharedPrefsFiles = sharedPrefs.listFiles();\n    if (sharedPrefsFiles != null) {\n        for (File sharedPrefsFile : sharedPrefsFiles) {\n            if (sharedPrefsFile.isFile()) {\n                String sharedPrefsFileName = sharedPrefsFile.getName();\n                if (sharedPrefsFileName.startsWith(\"com.shatteredpixel.shatteredpixeldungeon_preferences.xml\")) {\n                    try {\n                        data.writeEntityHeader(sharedPrefsFileName, sharedPrefsFile.length());\n                        ParcelFileDescriptor pfd = ParcelFileDescriptor.open(sharedPrefsFile, ParcelFileDescriptor.MODE_READ_ONLY);\n                        FileInputStream fis = new FileInputStream(pfd.getFileDescriptor());\n                        byte[] buffer = new byte[1024];\n                        int len;\n                        while ((len = fis.read(buffer)) > 0) {\n                            data.writeEntityData(buffer, 0, len);\n                        }\n                        pfd.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n\n    // Backup rankings\n    File rankings = new File(getFilesDir(), \"rankings\");\n    File[] rankingsFiles = rankings.listFiles();\n    if (rankingsFiles != null) {\n        for (File rankingsFile : rankingsFiles) {\n            if (rankingsFile.isFile()) {\n                String rankingsFileName = rankingsFile.getName();\n                if (rankingsFileName.startsWith(\"com.shatteredpixel.shatteredpixeldungeon_rankings.dat\")) {\n                    try {\n                        data.writeEntityHeader(rankingsFileName, rankingsFile.length());\n                        ParcelFileDescriptor pfd = ParcelFileDescriptor.open(rankingsFile, ParcelFileDescriptor.MODE_READ_ONLY);\n                        FileInputStream fis = new FileInputStream(pfd.getFileDescriptor());\n", "CodeBleu_score": 20.065020542012117}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t\t\n\t//Backup shared preferences\n\ttry {\n\t\tFile sharedPrefsFile = new File(this.getFilesDir(), \"shared_prefs/com.shatteredpixel.shatteredpixeldungeon_preferences.xml\");\n\t\tif (sharedPrefsFile.exists()) {\n\t\t\tParcelFileDescriptor prefsDescriptor = ParcelFileDescriptor.open(sharedPrefsFile, ParcelFileDescriptor.MODE_READ_ONLY);\n\t\t\tdata.writeEntityHeader(\"shared_prefs\", \"com.shatteredpixel.shatteredpixeldungeon_preferences.xml\", prefsDescriptor.getStatSize());\n\t\t\tdata.writeEntityData(prefsDescriptor.getFileDescriptor(), prefsDescriptor.getStatSize(), 0);\n\t\t\tprefsDescriptor.close();\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\t\n\t//Backup rankings\n\ttry {\n\t\tFile rankingsFile = new File(this.getFilesDir(), \"rankings.txt\");\n\t\tif (rankingsFile.exists()) {\n\t\t\tParcelFileDescriptor rankingsDescriptor = ParcelFileDescriptor.open(rankingsFile, ParcelFileDescriptor.MODE_READ_ONLY);\n\t\t\tdata.writeEntityHeader(\"rankings\", \"rankings.txt\", rankingsDescriptor.getStatSize());\n\t\t\tdata.writeEntityData(rankingsDescriptor.getFileDescriptor(), rankingsDescriptor.getStatSize(), 0);\n\t\t\trankingsDescriptor.close();\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\t\n\t//Backup badges\n\ttry {\n\t\tFile badgesFile = new File(this.getFilesDir(), \"badges.txt\");\n\t\tif (badgesFile.exists()) {\n\t\t\tParcelFileDescriptor badgesDescriptor = ParcelFileDescriptor.open(badgesFile, ParcelFileDescriptor.MODE_READ_ONLY);\n\t\t\tdata.writeEntityHeader(\"badges\", \"badges.txt\", badgesDescriptor.getStatSize());\n\t\t\tdata.writeEntityData(badgesDescriptor.", "CodeBleu_score": 21.496075805705775}]}
{"instance_id": "583999724a15", "generation_result": [{"code": "public boolean connectedToUnmeteredNetwork(){\n\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\t\treturn !((ConnectivityManager) Gdx.app.getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE)).isActiveNetworkMetered();\n\t} else {\n\t\tNetworkInfo activeNetwork = ((ConnectivityManager) Gdx.app.getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE)).getActiveNetworkInfo();\n\t\treturn activeNetwork != null && activeNetwork.getType() == ConnectivityManager.TYPE_WIFI;\n\t}\n}", "CodeBleu_score": 50.98564962444483}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\t\tConnectivityManager connManager = (ConnectivityManager) Gdx.app.getContext().getSystemService(Context.CONNECTIVITY_SERVICE);\n\t\tNetworkInfo networkInfo = connManager.getActiveNetworkInfo();\n\t\treturn networkInfo != null && !connManager.isActiveNetworkMetered();\n\t} else {\n\t\tConnectivityManager connManager = (ConnectivityManager) Gdx.app.getContext().getSystemService(Context.CONNECTIVITY_SERVICE);\n\t\tNetworkInfo networkInfo = connManager.getActiveNetworkInfo();\n\t\treturn networkInfo != null && (networkInfo.getType() == ConnectivityManager.TYPE_WIFI || networkInfo.getType() == ConnectivityManager.TYPE_WIMAX || networkInfo.getType() == ConnectivityManager.TYPE_BLUETOOTH || networkInfo.getType() == ConnectivityManager.TYPE_ETHERNET);\n\t}\n}", "CodeBleu_score": 54.323392596222156}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t\n\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\t\tConnectivityManager connectivityManager = (ConnectivityManager) Gdx.app.getContext().getSystemService(Context.CONNECTIVITY_SERVICE);\n\t\tNetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();\n\t\tif (networkInfo != null) {\n\t\t\treturn !connectivityManager.isActiveNetworkMetered();\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\tConnectivityManager connectivityManager = (ConnectivityManager) Gdx.app.getContext().getSystemService(Context.CONNECTIVITY_SERVICE);\n\t\tNetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();\n\t\tif (networkInfo != null) {\n\t\t\treturn networkInfo.getType() == ConnectivityManager.TYPE_WIFI || networkInfo.getType() == ConnectivityManager.TYPE_WIMAX || networkInfo.getType() == ConnectivityManager.TYPE_BLUETOOTH || networkInfo.getType() == ConnectivityManager.TYPE_ETHERNET;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n}", "CodeBleu_score": 50.29186576686268}]}
{"instance_id": "f8bd6cd4826b", "generation_result": [{"code": "protected boolean affectHero( Hero hero ){\n\t\t\n\tif (hero.isAlive()) {\n\t\t\n\t\t//plays a sound\n\t\tSample.INSTANCE.play( Assets.Sounds.DRINK );\n\t\t\n\t\t//cures any ailments\n\t\thero.cure();\n\t\t\n\t\t//removes curses from equipped items\n\t\tScrollOfRemoveCurse.cureEquippedItems( hero );\n\t\t\n\t\t//satisfies the hero's hunger\n\t\tif (hero.buff( Hunger.class ) != null) {\n\t\t\thero.buff( Hunger.class ).satisfy( hero.HT/2 );\n\t\t}\n\t\t\n\t\t//fully restores health\n\t\thero.HP = hero.HT;\n\t\t\n\t\t//displays visual effects\n\t\tCellEmitter.get( hero.pos ).start( ShadowParticle.FACTORY, 0.05f, 20 );\n\t\tCellEmitter.get( hero.pos ).start( ShaftParticle.UP, 0.05f, 15 );\n\t\tCellEmitter.get( hero.pos ).start( Speck.factory( Speck.LIGHT ), 0.05f, 10 );\n\t\t\n\t\t//logs a message\n\t\tGLog.i( Messages.get(this, \"restored\") );\n\t\t\n\t\treturn true;\n\t\t\n\t}\n\t\n\treturn false;\n\t\n}", "CodeBleu_score": 51.833370766558154}, {"code": "protected boolean affectHero( Hero hero ){\n\t\t\n\t//TODO\n\t\n\treturn false;\n}", "CodeBleu_score": 3.8510067166075217}, {"code": "protected boolean affectHero( Hero hero ){\n\t\t\n\tif (hero.isAlive()) {\n\t\t\n\t\t//plays the sound\n\t\tSample.INSTANCE.play(Assets.Sounds.DRINK);\n\t\t\n\t\t//cures any ailments\n\t\thero.cure();\n\t\t\n\t\t//removes curses from equipped items\n\t\tfor (int i=0; i < hero.belongings.weapon.length; i++) {\n\t\t\tScrollOfRemoveCurse.cure(hero.belongings.weapon[i]);\n\t\t}\n\t\tfor (int i=0; i < hero.belongings.armor.length; i++) {\n\t\t\tScrollOfRemoveCurse.cure(hero.belongings.armor[i]);\n\t\t}\n\t\tfor (int i=0; i < hero.belongings.rings.length; i++) {\n\t\t\tScrollOfRemoveCurse.cure(hero.belongings.rings[i]);\n\t\t}\n\t\tfor (int i=0; i < hero.belongings.artifacts.length; i++) {\n\t\t\tScrollOfRemoveCurse.cure(hero.belongings.artifacts[i]);\n\t\t}\n\t\t\n\t\t//satisfies the hero's hunger\n\t\thero.spend(TICK);\n\t\tif (hero.buff(Hunger.class) != null) {\n\t\t\thero.buff(Hunger.class).satisfy(TICK);\n\t\t}\n\t\t\n\t\t//fully restores health\n\t\thero.HP = hero.HT;\n\t\thero.sprite.emitter().start(ShaftParticle.factory(Speck.factory(Speck.HEALING), 0.05f, 0.2f), 0.2f, 10);\n\t\thero.sprite.parent.add(new CellEmitter.UpAndOut(hero.sprite.center(), Speck.factory(Speck.HEART), 10));\n\t\t\n\t\t//dis", "CodeBleu_score": 41.42454847566891}]}
{"instance_id": "3a94f2e84c83", "generation_result": [{"code": "protected Item affectItem( Item item, int pos ){\n\t\t\n\tif (item instanceof Waterskin){\n\t\tWaterskin waterskin = (Waterskin) item;\n\t\tif (waterskin.quantity < waterskin.capacity) {\n\t\t\tSample.INSTANCE.play( Assets.Sounds.DRINK );\n\t\t\tGLog.p( Messages.get(this, \"water\") );\n\t\t\tCellEmitter.center( pos ).start( ShaftParticle.WATER, 0.05f, 10 );\n\t\t\twaterskin.quantity = waterskin.capacity;\n\t\t\treturn waterskin;\n\t\t}\n\t} else if (item instanceof Ankh){\n\t\tAnkh ankh = (Ankh) item;\n\t\tif (!ankh.isCursed && !ankh.cursedKnown){\n\t\t\tSample.INSTANCE.play( Assets.Sounds.BONES );\n\t\t\tGLog.p( Messages.get(this, \"bless\") );\n\t\t\tBlobEmitter.center( pos ).start( ShadowParticle.UP, 0.05f, 10 );\n\t\t\tankh.isCursed = false;\n\t\t\tankh.cursedKnown = true;\n\t\t\treturn ankh;\n\t\t}\n\t} else if (item instanceof PotionOfHealing){\n\t\tPotionOfHealing potion = (PotionOfHealing) item;\n\t\tif (potion.quantity > 0){\n\t\t\tpotion.quantity--;\n\t\t\tGLog.p( Messages.get(this, \"heal\") );\n\t\t\tCellEmitter.center( pos ).start( ShaftParticle.HEALING, 0.05f, 10 );\n\t\t\treturn potion;\n\t\t}\n\t} else if (item instanceof ScrollOfRemoveCurse){\n\t\tScrollOfRemoveCurse scroll = (ScrollOfRemoveCurse) item;\n\t\tif (scroll.quantity > 0){\n\t\t\tscroll.quantity--;\n\t\t\tGLog.p( Messages.get(this, \"scroll\")", "CodeBleu_score": 42.48348190908297}, {"code": "protected Item affectItem( Item item, int pos ){\n\t\t\n\tif (item instanceof Waterskin && ((Waterskin)item).quantity < Waterskin.CAPACITY){\n\t\t((Waterskin)item).quantity = Waterskin.CAPACITY;\n\t\tCellEmitter.get(pos).start( ShaftParticle.FACTORY, 0.05f, 3 );\n\t\tSample.INSTANCE.play( Assets.Sounds.DRINK );\n\t\tGLog.i( Messages.get(this, \"water\") );\n\t\treturn item;\n\t} else if (item instanceof Ankh && !((Ankh)item).isCursed){\n\t\t((Ankh)item).isCursed = true;\n\t\tBlobEmitter.get(pos).start( ShadowParticle.UP, 0.05f, 3 );\n\t\tSample.INSTANCE.play( Assets.Sounds.CURSED );\n\t\tGLog.i( Messages.get(this, \"cursed\") );\n\t\treturn item;\n\t} else if (item instanceof ScrollOfRemoveCurse){\n\t\tif (item.doUnequip( Dungeon.hero, false, false )){\n\t\t\tCellEmitter.get(pos).start( Speck.factory( Speck.LIGHT ), 0.05f, 3 );\n\t\t\tSample.INSTANCE.play( Assets.Sounds.TELEPORT );\n\t\t\tGLog.i( Messages.get(this, \"uncursed\") );\n\t\t\treturn item;\n\t\t}\n\t} else if (item instanceof PotionOfHealing){\n\t\tif (item.doUnequip( Dungeon.hero, false, false )){\n\t\t\tCellEmitter.get(pos).start( Speck.factory( Speck.LIGHT ), 0.05f, 3 );\n\t\t\tSample.INSTANCE.play( Assets.Sounds.TELEPORT );\n\t\t\tGLog.i( Messages.get(this, \"healed\") );\n\t\t\treturn item;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 44.83910574068842}, {"code": "protected Item affectItem( Item item, int pos ){\n\t\n\tif (item instanceof Waterskin) {\n\n\t\tWaterskin waterskin = (Waterskin)item;\n\n\t\tif (waterskin.quantity < waterskin.capacity) {\n\n\t\t\t//fill waterskin\n\t\t\twaterskin.quantity = waterskin.capacity;\n\t\t\tGLog.p( Messages.get(this, \"waterskin_full\") );\n\n\t\t\t//visual effect\n\t\t\tCellEmitter.center(pos).start(ShaftParticle.FACTORY, 0.05f, 10);\n\t\t\tSample.INSTANCE.play( Assets.Sounds.DRINK );\n\n\t\t\treturn waterskin;\n\n\t\t} else {\n\n\t\t\t//waterskin is already full\n\t\t\tGLog.w( Messages.get(this, \"waterskin_full\") );\n\n\t\t\treturn null;\n\n\t\t}\n\n\t} else if (item instanceof Ankh) {\n\n\t\tAnkh ankh = (Ankh)item;\n\n\t\tif (!ankh.isBlessed()) {\n\n\t\t\t//bless ankh\n\t\t\tankh.bless();\n\t\t\tGLog.p( Messages.get(this, \"ankh_blessed\") );\n\n\t\t\t//visual effect\n\t\t\tCellEmitter.center(pos).start(ShadowParticle.UP, 0.05f, 10);\n\t\t\tSample.INSTANCE.play( Assets.Sounds.BLESS );\n\n\t\t\treturn ankh;\n\n\t\t} else {\n\n\t\t\t//ankh is already blessed\n\t\t\tGLog.w( Messages.get(this, \"ankh_blessed\") );\n\n\t\t\treturn null;\n\n\t\t}\n\n\t} else if (item instanceof PotionOfHealing) {\n\n\t\t//heal 10 HP\n\t\tHero hero = Dungeon.hero;\n\t\thero.HP = Math.min( hero.HT, hero.HP + 10 );\n\t\tGLog.p(", "CodeBleu_score": 43.58592642303401}]}
{"instance_id": "d322228d1a3e", "generation_result": [{"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t\t\n\t//Apply the buff\n\tenemy.buff(buffCls);\n\t\n\t//If the enemy is an enemy, roll for loot, update kill statistics, and process ascension challenges\n\tif (enemy.alignment == Char.Alignment.ENEMY) {\n\t\t\n\t\t//Roll for loot\n\t\tenemy.dropLoot();\n\t\t\n\t\t//Update kill statistics\n\t\tStatistics.enemiesKilled++;\n\t\t\n\t\t//Process ascension challenges\n\t\tif (Statistics.enemiesKilled == 1) {\n\t\t\tBadges.grant(Badges.FIRST_KILL);\n\t\t}\n\t\tif (Statistics.enemiesKilled == 10) {\n\t\t\tBadges.grant(Badges.TEN_KILLS);\n\t\t}\n\t\tif (Statistics.enemiesKilled == 100) {\n\t\t\tBadges.grant(Badges.HUNDRED_KILLS);\n\t\t}\n\t\tif (Statistics.enemiesKilled == 1000) {\n\t\t\tBadges.grant(Badges.THOUSAND_KILLS);\n\t\t}\n\t\tif (Statistics.enemiesKilled == 10000) {\n\t\t\tBadges.grant(Badges.TEN_THOUSAND_KILLS);\n\t\t}\n\t\tif (Statistics.enemiesKilled == 100000) {\n\t\t\tBadges.grant(Badges.HUNDRED_THOUSAND_KILLS);\n\t\t}\n\t\tif (Statistics.enemiesKilled == 1000000) {\n\t\t\tBadges.grant(Badges.MILLION_KILLS);\n\t\t}\n\t\t\n\t\t//Grant experience to the hero\n\t\tif (hero.subClass == HeroSubClass.MONK) {\n\t\t\thero.gainExp(enemy.exp(), true);\n\t\t\thero.buff(Ener", "CodeBleu_score": 28.450753798986344}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t\t\n\t//Applies the specified buff to the enemy\n\tenemy.buff(buffCls);\n\t\n\t//Checks if the enemy was aligned as an enemy\n\tif (enemy.alignment == Char.Alignment.ENEMY) {\n\t\t\n\t\t//Rolls for loot\n\t\tenemy.die(hero);\n\t\t\n\t\t//Updates kill statistics\n\t\tStatistics.killed++;\n\t\t\n\t\t//Processes ascension challenges\n\t\tif (enemy instanceof Mimic) {\n\t\t\tStatistics.killedMimics++;\n\t\t}\n\t\t\n\t\t//Grants experience to the hero based on level comparison\n\t\tif (enemy.level() > hero.lvl) {\n\t\t\thero.exp += enemy.exp();\n\t\t\tBadges.validateLevelUp();\n\t\t} else {\n\t\t\thero.exp += Math.max(1, enemy.exp()/2);\n\t\t}\n\t\t\n\t\t//Buffs the hero with additional energy if they are a Monk subclass\n\t\tif (hero.subClass == HeroSubClass.MONK) {\n\t\t\thero.energy += 2;\n\t\t\thero.energy = Math.min(hero.energy, hero.ENERGY);\n\t\t\tCharSprite.showEnergy(hero);\n\t\t}\n\t}\n}", "CodeBleu_score": 35.78572373953676}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t\n\tif (enemy.buff(buffCls) == null) {\n\t\tenemy.add(buffCls);\n\t}\n\n\tif (enemy.alignment != Char.Alignment.ALLY) {\n\n\t\t//roll for loot\n\t\tif (enemy.alignment == Char.Alignment.ENEMY) {\n\t\t\tenemy.dropLoot();\n\t\t}\n\n\t\t//update kill statistics\n\t\tif (enemy.alignment == Char.Alignment.ENEMY || enemy.alignment == Char.Alignment.NEUTRAL) {\n\n\t\t\t//update kill statistics\n\t\t\tStatistics.enemiesKilled++;\n\n\t\t\t//update challenge statistics\n\t\t\tif (enemy.alignment == Char.Alignment.ENEMY) {\n\t\t\t\tStatistics.enemiesSlain++;\n\t\t\t}\n\n\t\t\t//update challenge statistics\n\t\t\tif (enemy instanceof Mimic) {\n\t\t\t\tStatistics.mimicsSlain++;\n\t\t\t}\n\n\t\t\t//update challenge statistics\n\t\t\tif (enemy.alignment == Char.Alignment.NEUTRAL) {\n\t\t\t\tStatistics.neutralsSlain++;\n\t\t\t}\n\n\t\t\t//update challenge statistics\n\t\t\tif (enemy.alignment == Char.Alignment.ALLY) {\n\t\t\t\tStatistics.alliesSlain++;\n\t\t\t}\n\n\t\t\t//update challenge statistics\n\t\t\tif (enemy.alignment == Char.Alignment.FRIENDLY) {\n\t\t\t\tStatistics.friendsSlain++;\n\t\t\t}\n\n\t\t\t//update challenge statistics\n\t\t\tif (enemy.alignment == Char.Alignment.BOSS) {\n\t\t\t\tStatistics.bossesSlain++;\n\t\t\t}\n\n\t\t\t//update challenge statistics\n\t\t\tif (enemy.alignment == Char.Alignment.CHAMPION) {\n\t\t\t\tStatistics.championsSlain++;\n\t\t\t}\n\n\t\t\t//update challenge statistics\n\t\t\tif (enemy.", "CodeBleu_score": 28.60509430067627}]}
{"instance_id": "9ee21c0149f3", "generation_result": [{"code": "public static void processEnemyKill(Char enemy){\n\t\t\n\tif (Dungeon.hero.buff(AscensionChallenge.class) != null){\n\t\tif (enemy instanceof Ratmogrify.RatmogrifiedRat) {\n\t\t\tenemy = ((Ratmogrify.RatmogrifiedRat) enemy).original;\n\t\t}\n\t\tif (enemy instanceof Ratmogrify.RatmogrifiedSpinner) {\n\t\t\tenemy = ((Ratmogrify.RatmogrifiedSpinner) enemy).original;\n\t\t}\n\t\tif (enemy instanceof Ratmogrify.RatmogrifiedGolem) {\n\t\t\tenemy = ((Ratmogrify.RatmogrifiedGolem) enemy).original;\n\t\t}\n\t\tif (enemy instanceof Ratmogrify.RatmogrifiedElemental) {\n\t\t\tenemy = ((Ratmogrify.RatmogrifiedElemental) enemy).original;\n\t\t}\n\t\tif (enemy instanceof Ratmogrify.RatmogrifiedSuccubus) {\n\t\t\tenemy = ((Ratmogrify.RatmogrifiedSuccubus) enemy).original;\n\t\t}\n\t\tif (enemy instanceof Ratmogrify.RatmogrifiedWarlock) {\n\t\t\tenemy = ((Ratmogrify.RatmogrifiedWarlock) enemy).original;\n\t\t}\n\t\tif (enemy instanceof Ratmogrify.RatmogrifiedNecromancer) {\n\t\t\tenemy = ((Ratmogrify.RatmogrifiedNecromancer) enemy).original;\n\t\t}\n\t\tif (enemy instanceof Ratmogrify.RatmogrifiedShaman) {\n\t\t\tenemy = ((Ratmogrify.RatmogrifiedShaman) enemy).original;\n\t\t}\n\t\tif (enemy instanceof Ratmogrify.RatmogrifiedGhoul) {\n\t", "CodeBleu_score": 21.299410617412935}, {"code": "public static void processEnemyKill(Char enemy){\n\t\t\n\tif (AscensionChallenge.isAscending(Dungeon.hero)) {\n\t\tif (enemy instanceof Ratmogrify.RatmogrifiedRat) {\n\t\t\tenemy = ((Ratmogrify.RatmogrifiedRat) enemy).original;\n\t\t}\n\t\tif (enemy instanceof Mob) {\n\t\t\tif (((Mob) enemy).state != ((Mob) enemy).WANDERING) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (enemy instanceof DM100 || enemy instanceof DM200) {\n\t\t\treturn;\n\t\t}\n\t\tif (enemy instanceof Rat || enemy instanceof Bat || enemy instanceof Crab || enemy instanceof Snake || enemy instanceof Eye || enemy instanceof Ghoul || enemy instanceof Gnoll || enemy instanceof Guard || enemy instanceof Monk || enemy instanceof Necromancer || enemy instanceof Shaman || enemy instanceof Slime || enemy instanceof Snake || enemy instanceof Spinner || enemy instanceof Succubus || enemy instanceof Swarm || enemy instanceof Thief || enemy instanceof Warlock || enemy instanceof Elemental || enemy instanceof Scorpion || enemy instanceof Golem || enemy instanceof Brute || enemy instanceof RipperDemon || enemy instanceof Shopkeeper) {\n\t\t\tAscensionChallenge.stacks -= AscensionChallenge.getStacksFromEnemy(enemy);\n\t\t\tif (AscensionChallenge.stacks < 10) {\n\t\t\t\tGLog.w(Messages.get(AscensionChallenge.class, \"weakening\"));\n\t\t\t}\n\t\t\tif (Dungeon.hero.lvl >= Dungeon.hero.maxLvl) {\n\t\t\t\tDungeon.hero.exp += 100;\n\t\t\t}\n\t\t\tDungeon.hero.buff(AscensionChallenge.class);\n\t\t\tDungeon.hero.sprite.emitter().start(Speck.factory(Speck.STAR), 0.2f, 3);\n\t\t}\n\t}\n}", "CodeBleu_score": 28.363221630124336}, {"code": "public static void processEnemyKill(Char enemy){\n\t\t\n\tif (AscensionChallenge.ascensionChallengeActive()){\n\t\t\n\t\tif (enemy instanceof Rat && enemy.buff(Ratmogrify.class) != null){\n\t\t\tenemy.buff(Ratmogrify.class).detach();\n\t\t}\n\t\t\n\t\tif (enemy instanceof Ratmogrify){\n\t\t\tenemy.sprite.die();\n\t\t\tenemy.sprite.reset();\n\t\t\tenemy.sprite.revive();\n\t\t\tenemy.sprite.place(enemy.pos);\n\t\t}\n\t\t\n\t\tif (enemy instanceof Rat && !(enemy instanceof Ratmogrify)){\n\t\t\tAscensionChallenge.ascensionChallengeStacks--;\n\t\t\tif (AscensionChallenge.ascensionChallengeStacks < 30){\n\t\t\t\tGLog.w(Messages.get(AscensionChallenge.class, \"weakening\"));\n\t\t\t}\n\t\t\tif (AscensionChallenge.ascensionChallengeStacks == 0){\n\t\t\t\tAscensionChallenge.ascensionChallengeActive = false;\n\t\t\t\tAscensionChallenge.ascensionChallengeStacks = 0;\n\t\t\t\tGLog.i(Messages.get(AscensionChallenge.class, \"ended\"));\n\t\t\t\t((Hero)Dungeon.hero).belongings.add(new DriedRose());\n\t\t\t\tBadges.validateAscensionChallenge();\n\t\t\t}\n\t\t\tif (Dungeon.hero.level() == 20){\n\t\t\t\tStatistics.giveExperience(Dungeon.hero, 1000);\n\t\t\t\tGLog.i(Messages.get(AscensionChallenge.class, \"max_level\"));\n\t\t\t}\n\t\t\tBuffIndicator.refreshHero();\n\t\t}\n\t\t\n\t\tif (enemy instanceof Brute && !(enemy instanceof Ratmogrify)){\n\t\t\tAscensionChallenge.ascensionChallenge", "CodeBleu_score": 24.957261315563965}]}
{"instance_id": "4fc9c3c1fcce", "generation_result": [{"code": "public static int AscensionCorruptResist(Mob m){\n\t\tif (Dungeon.isChallenged(Challenges.ASCENSION)) {\n\t\tif (m.properties.containsKey(Char.Property.MOB_ASCENSION_RESIST)) {\n\t\t\treturn m.properties.get(Char.Property.MOB_ASCENSION_RESIST);\n\t\t} else {\n\t\t\tif (m instanceof Ratmogrify.RatmogrifiedRat) {\n\t\t\t\treturn AscensionCorruptResist(((Ratmogrify.RatmogrifiedRat) m).original);\n\t\t\t} else if (m instanceof Ratmogrify.RatmogrifiedCrab) {\n\t\t\t\treturn AscensionCorruptResist(((Ratmogrify.RatmogrifiedCrab) m).original);\n\t\t\t} else if (m instanceof Ratmogrify.RatmogrifiedSpinner) {\n\t\t\t\treturn AscensionCorruptResist(((Ratmogrify.RatmogrifiedSpinner) m).original);\n\t\t\t} else if (m instanceof Ratmogrify.RatmogrifiedSnake) {\n\t\t\t\treturn AscensionCorruptResist(((Ratmogrify.RatmogrifiedSnake) m).original);\n\t\t\t} else if (m instanceof Ratmogrify.RatmogrifiedBat) {\n\t\t\t\treturn AscensionCorruptResist(((Ratmogrify.RatmogrifiedBat) m).original);\n\t\t\t} else if (m instanceof Ratmogrify.RatmogrifiedThief) {\n\t\t\t\treturn AscensionCorruptResist(((Ratmogrify.RatmogrifiedThief) m).original);\n\t\t\t} else if (m instanceof Ratmogrify.RatmogrifiedSuccubus) {\n\t\t\t\treturn AscensionCorruptResist(((Ratmogrify.RatmogrifiedSuccubus) m).original);\n\t", "CodeBleu_score": 22.081466581429364}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t\tif (Ascension.isChallenged(Ascension.DEPTH)) {\n\t\tif (m instanceof Ratmogrify.RatmogrifiedMob) {\n\t\t\treturn AscensionCorruptResist(((Ratmogrify.RatmogrifiedMob) m).original);\n\t\t} else if (m instanceof RipperDemon) {\n\t\t\treturn 10;\n\t\t} else if (m instanceof Ghouls.Ghoul) {\n\t\t\treturn 7;\n\t\t} else if (m instanceof DM100) {\n\t\t\treturn Math.max(m.exp, 13);\n\t\t} else if (m instanceof DM200) {\n\t\t\treturn Math.max(m.exp, 13);\n\t\t} else if (m instanceof Necromancer) {\n\t\t\treturn Math.max(m.exp, 13);\n\t\t} else if (m instanceof Warlock) {\n\t\t\treturn Math.max(m.exp, 13);\n\t\t} else if (m instanceof Shaman) {\n\t\t\treturn Math.max(m.exp, 13);\n\t\t} else if (m instanceof Succubus) {\n\t\t\treturn Math.max(m.exp, 13);\n\t\t} else if (m instanceof Elemental) {\n\t\t\treturn Math.max(m.exp, 13);\n\t\t} else if (m instanceof Eye) {\n\t\t\treturn Math.max(m.exp, 13);\n\t\t} else if (m instanceof Shopkeeper) {\n\t\t\treturn Math.max(m.exp, 13);\n\t\t} else {\n\t\t\treturn m.exp;\n\t\t}\n\t} else {\n\t\treturn m.exp;\n\t}\n}", "CodeBleu_score": 26.841483204049787}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t\tif (Ascension.isChallenged(Ascension.CHALLENGE_ASCENSION)) {\n\t\tif (m instanceof Ratmogrify.RatmogrifiedMob) {\n\t\t\treturn AscensionCorruptResist(((Ratmogrify.RatmogrifiedMob) m).original);\n\t\t}\n\t\tif (m instanceof Ratmogrify.RatmogrifiedHero) {\n\t\t\treturn AscensionCorruptResist(((Ratmogrify.RatmogrifiedHero) m).original);\n\t\t}\n\t\tif (m instanceof DM100) {\n\t\t\treturn 10;\n\t\t}\n\t\tif (m instanceof DM200) {\n\t\t\treturn 10;\n\t\t}\n\t\tif (m instanceof Golem) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m instanceof Ghoul) {\n\t\t\treturn 7;\n\t\t}\n\t\tif (m instanceof RipperDemon) {\n\t\t\treturn 10;\n\t\t}\n\t\tif (m instanceof Shaman) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m instanceof Shopkeeper) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m instanceof Succubus) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m instanceof Warlock) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m instanceof Necromancer) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m instanceof Elemental) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m instanceof Eye) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m instanceof Scorpio) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m instanceof Snake) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m instanceof Spinner) {\n\t\t\t", "CodeBleu_score": 24.698798393013433}]}
{"instance_id": "bdc8df5952c7", "generation_result": [{"code": "public void hit( Char enemy ){\n\t\n\t//increments the combo count\n\tcombo++;\n\t\n\t//sets a combo timer\n\tcomboTimer = TICK;\n\t\n\t//extends the combo timer based on the player's talent points in Cleave\n\tif (enemy.HP == enemy.HT || enemy.buff(Corruption.class) != null){\n\t\tcomboTimer += comboTimer * (talentBonus(Talent.CLEAVE) + 1);\n\t}\n\t\n\t//updates the initial combo time\n\tif (combo == 1){\n\t\tcomboTimerInitial = comboTimer;\n\t}\n\t\n\t//triggers action indicators\n\tActionIndicator.add(this, enemy);\n\t\n\t//validates mastery combos\n\tvalidateMasteryCombos();\n\t\n\t//logs the combo count\n\tif (combo == 1) {\n\t\tGLog.i( Messages.get(this, \"combo\") );\n\t} else {\n\t\tGLog.i( Messages.get(this, \"combo\", combo) );\n\t}\n\t\n\t//refreshes the hero's buff indicator visually\n\tBuffIndicator.refreshHero();\n\t\n}", "CodeBleu_score": 42.46135601470248}, {"code": "public void hit( Char enemy ){\n\t\n\t//increments the combo count\n\tcombo++;\n\n\t//sets a combo timer\n\tif (comboTimer == 0) {\n\t\tcomboTimer = COMBOTIME;\n\t}\n\n\t//extends the combo timer based on the player's talent points in Cleave\n\tif (enemy.HP == enemy.HT || enemy.buff(Corruption.class) != null) {\n\t\tcomboTimer += COMBOTIME;\n\t}\n\n\t//updates the initial combo time\n\tif (combo == 1) {\n\t\tinitialComboTimer = comboTimer;\n\t}\n\n\t//triggers action indicators\n\tif (combo > 1) {\n\t\t//triggers action indicators\n\t\tif (combo < 4) {\n\t\t\tif (combo == 2) {\n\t\t\t\tActionIndicator.add(this, new AttackIndicator());\n\t\t\t} else if (combo == 3) {\n\t\t\t\tActionIndicator.add(this, new BuffIndicator());\n\t\t\t}\n\t\t} else {\n\t\t\tActionIndicator.add(this, new HeroIcon(this));\n\t\t}\n\t}\n\n\t//validates mastery combos\n\tif (combo > 3) {\n\t\tif (combo == 4) {\n\t\t\tif (talents.get(Talent.MASTERY) == 1) {\n\t\t\t\tif (BuffIndicator.lastBuff == null) {\n\t\t\t\t\tGLog.n( Messages.get(this, \"mastery_combo\") );\n\t\t\t\t\tBuff.affect(this, Frenzy.class).set(comboTimer);\n\t\t\t\t} else {\n\t\t\t\t\tBuffIndicator.lastBuff.detach();\n\t\t\t\t\tBuffIndicator.lastBuff = null;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (combo == 5) {\n\t\t\tif (talents.get(Talent.MASTERY) == 2) {\n\t\t\t\tif", "CodeBleu_score": 27.304153146357375}, {"code": "public void hit( Char enemy ){\n\t\t\n\tif (enemy.HP <= 0 || enemy.buff(Corruption.class) != null && enemy.HP == enemy.HT) {\n\t\tcombo++;\n\t\tif (combo > 1) {\n\t\t\tcomboTimer = Math.max(comboTimer, comboTime);\n\t\t}\n\t\tif (combo > 2) {\n\t\t\tcomboTimer += comboTime * (combo - 2);\n\t\t}\n\t}\n\t\n\tif (combo > 1) {\n\t\tActionIndicator.add(this, new AttackIndicator(this, enemy, combo));\n\t}\n\t\n\tif (combo > 2) {\n\t\tvalidateMasteryCombo();\n\t}\n\t\n\tif (combo > 0) {\n\t\tGLog.n( Messages.get(this, \"combo\") );\n\t}\n\t\n\tBuffIndicator.refreshHero();\n}", "CodeBleu_score": 38.308915337736835}]}
{"instance_id": "abf7c664b4dd", "generation_result": [{"code": "public int capacity(){\n\t\tint cap = baseCapacity;\n\tfor (Item item : items.toArray(new Item[0])) {\n\t\tif (item instanceof Bag) {\n\t\t\tcap += ((Bag)item).capacity;\n\t\t}\n\t}\n\tif (belongings.weapon != null && belongings.weapon.slot == KindOfWeapon.Kind.SECONDARY) {\n\t\tcap--;\n\t}\n\treturn cap;\n}", "CodeBleu_score": 40.80050045960843}, {"code": "public int capacity(){\n\t\tint cap = BASE_CAPACITY;\n\tfor (Item item : items) {\n\t\tif (item instanceof Bag) {\n\t\t\tcap += ((Bag)item).capacity;\n\t\t}\n\t}\n\tif (secondaryWeapon != null) {\n\t\tcap--;\n\t}\n\treturn cap;\n}", "CodeBleu_score": 35.300207050551954}, {"code": "public int capacity(){\n\t\t\n\tint cap = 10 + (this.level() / 2);\n\t\n\tfor (Item item : this.belongings.backpack.items) {\n\t\tif (item instanceof Bag) {\n\t\t\tcap += ((Bag) item).capacity;\n\t\t}\n\t}\n\t\n\tif (this.belongings.weapon() != null && this.belongings.weapon().levelKnown) {\n\t\tcap -= 1;\n\t}\n\t\n\treturn cap;\n}", "CodeBleu_score": 33.551449948275554}]}
{"instance_id": "b97e41e092d2", "generation_result": [{"code": "public void updateHT( boolean boostHP ){\n\t\n\t//base formula\n\tHT = 2 * LVL;\n\n\t//RingOfMight and ElixirOfMight\n\tHT += HT * RingOfMight.multiplier(this) * ElixirOfMight.multiplier(this);\n\n\t//boost HP to new max if requested\n\tif (boostHP) {\n\t\tHP = Math.min(HP, HT);\n\t}\n\n\t//ensure HP does not exceed new HT\n\tHP = Math.min(HP, HT);\n\n\t//update the status pane\n\tBadges.validateBossChallenges();\n\tStatusPane.refresh();\n}", "CodeBleu_score": 25.286187269826897}, {"code": "public void updateHT( boolean boostHP ){\n\t\n\t//base formula\n\tHT = 10 + level()*2;\n\n\t//RingOfMight\n\tif (buff( RingOfMight.class ) != null) {\n\t\tHT += 2;\n\t}\n\n\t//ElixirOfMight\n\tif (buff( ElixirOfMight.class ) != null) {\n\t\tHT += 10;\n\t}\n\n\t//apply multipliers\n\tHT *= HT_Multiplier;\n\n\t//boost HP if requested\n\tif (boostHP) {\n\t\tHP = Math.min( HP, HT );\n\t}\n\n\t//ensure HP does not exceed HT\n\tHP = Math.min( HP, HT );\n\n}", "CodeBleu_score": 21.163900500141292}, {"code": "public void updateHT( boolean boostHP ){\n\t\t\n\t//base formula\n\tHT = (int)Math.round( Math.pow( level(), 1.5 ) * 3 );\n\t\n\t//ring of might\n\tif (buff( RingOfMight.class ) != null){\n\t\tHT *= 1.25;\n\t}\n\t\n\t//elixir of might\n\tif (buff( ElixirOfMight.class ) != null){\n\t\tHT *= 1.25;\n\t}\n\t\n\t//boost HP to match new HT\n\tif (boostHP){\n\t\tHP = HT;\n\t}\n\t\n\t//ensure HP does not exceed HT\n\tHP = Math.min( HP, HT );\n}", "CodeBleu_score": 26.852782846189854}]}
{"instance_id": "b72bd91544e7", "generation_result": [{"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\t\n\tif (enemy.alignment == Char.Alignment.ALLY || (enemy instanceof Mimic && ((Mimic)enemy).alignment == Char.Alignment.ALLY)) {\n\t\treturn false;\n\t}\n\t\n\tboolean result = wep.attack( enemy );\n\t\n\tif (result && (hero.subClass == HeroSubClass.GLADIATOR || hero.subClass == HeroSubClass.DUELIST)) {\n\t\tBuff.affect(hero, Combo.class).addCombo();\n\t}\n\t\n\treturn result;\n}", "CodeBleu_score": 26.6081178013993}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\t\n\tif (enemy.alignment == Char.Alignment.ENEMY || (enemy instanceof Mimic && ((Mimic)enemy).realChar.alignment == Char.Alignment.ENEMY)) {\n\t\t\n\t\twep.thrown = true;\n\t\tboolean hit = attack( enemy );\n\t\twep.thrown = false;\n\t\tif (hit && (this instanceof Gladiator || this instanceof Duelist)) {\n\t\t\tBuff.prolong(this, Combo.class, Combo.DURATION);\n\t\t}\n\t\treturn hit;\n\t\t\n\t} else {\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 27.311234908905234}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\t\n\tif (enemy.alignment != Char.Alignment.ALLY && enemy.alignment != Char.Alignment.NEUTRAL_ENEMY) {\n\t\treturn false;\n\t}\n\t\n\tif (wep.isEquipped(this)) {\n\t\t\n\t\tif (wep.thrown) {\n\t\t\t\n\t\t\twep.thrown = false;\n\t\t\t\n\t\t\tif (attack( enemy )) {\n\t\t\t\t\n\t\t\t\twep.thrown = true;\n\t\t\t\t\n\t\t\t\tif (this instanceof Gladiator) {\n\t\t\t\t\tBuff.prolong(this, Combo.class, Combo.DURATION);\n\t\t\t\t} else if (this instanceof Duelist) {\n\t\t\t\t\tBuff.prolong(this, Combo.class, Combo.DURATION);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn true;\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\twep.thrown = true;\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t} else {\n\t\t\t\n\t\t\treturn false;\n\t\t\t\n\t\t}\n\t\t\n\t} else {\n\t\t\n\t\treturn false;\n\t\t\n\t}\n\t\n}", "CodeBleu_score": 19.619378319238894}]}
{"instance_id": "f265b39b6677", "generation_result": [{"code": "public int attackSkill( Char target ){\n\t\n\t//TODO: add a buff that increases accuracy at long range, and decreases it at short range\n\t\n\t//TODO: add a buff that increases accuracy at melee, and decreases it at long range\n\t\n\t//TODO: add a buff that increases accuracy at melee, and decreases it at long range\n\t\n\t//TODO: add a buff that increases accuracy at melee, and decreases it at long range\n\t\n\t//TODO: add a buff that increases accuracy at melee, and decreases it at long range\n\t\n\t//TODO: add a buff that increases accuracy at melee, and decreases it at long range\n\t\n\t//TODO: add a buff that increases accuracy at melee, and decreases it at long range\n\t\n\t//TODO: add a buff that increases accuracy at melee, and decreases it at long range\n\t\n\t//TODO: add a buff that increases accuracy at melee, and decreases it at long range\n\t\n\t//TODO: add a buff that increases accuracy at melee, and decreases it at long range\n\t\n\t//TODO: add a buff that increases accuracy at melee, and decreases it at long range\n\t\n\t//TODO: add a buff that increases accuracy at melee, and decreases it at long range\n\t\n\t//TODO: add a buff that increases accuracy at melee, and decreases it at long range\n\t\n\t//TODO: add a buff that increases accuracy at melee, and decreases it at long range\n\t\n\t//TODO: add a buff that increases accuracy at melee, and decreases it at long range\n\t\n\t//TODO: add a buff that increases accuracy at melee, and decreases it at long range\n\t\n\t//TODO: add a buff that increases accuracy at melee, and decreases it at long range\n\t\n\t//TODO: add a buff that increases accuracy at melee, and decreases it at long range\n\t\n\t//TODO: add a buff that increases accuracy at melee, and decreases it at long range\n\t\n\t//TODO: add a buff that increases accuracy at melee, and decreases it at long range\n\t\n\t//TODO: add a buff that increases accuracy", "CodeBleu_score": 3.5165489583528324}, {"code": "public int attackSkill( Char target ){\n\t\t\n\t//calculate the base attack skill\n\tint attackSkill = attackSkill( this );\n\t\n\t//calculate the accuracy multiplier\n\tfloat accuracyMultiplier = accuracyMultiplier( this, target );\n\t\n\t//apply the accuracy multiplier to the attack skill\n\tattackSkill = (int)(attackSkill * accuracyMultiplier);\n\t\n\t//apply buffs to the attack skill\n\tattackSkill = (int)(attackSkill * buffAttackMultiplier());\n\t\n\treturn attackSkill;\n}", "CodeBleu_score": 20.340769840937217}, {"code": "public int attackSkill( Char target ){\n\t\t\n\tint skill = attackSkill( this );\n\t\n\t//increase accuracy for melee attacks against enemies that are adjacent\n\tif (target.alignment == Alignment.ENEMY && this.distance( target ) <= 1){\n\t\tskill += 20;\n\t}\n\t\n\t//increase accuracy for ranged attacks against enemies that are adjacent\n\tif (target.alignment == Alignment.ENEMY && this.distance( target ) <= 1 && this.properties().contains(Char.Property.RANGED)){\n\t\tskill += 20;\n\t}\n\t\n\t//increase accuracy for ranged attacks against enemies that are adjacent\n\tif (target.alignment == Alignment.ENEMY && this.distance( target ) <= 1 && this.properties().contains(Char.Property.RANGED)){\n\t\tskill += 20;\n\t}\n\t\n\t//increase accuracy for ranged attacks against enemies that are adjacent\n\tif (target.alignment == Alignment.ENEMY && this.distance( target ) <= 1 && this.properties().contains(Char.Property.RANGED)){\n\t\tskill += 20;\n\t}\n\t\n\t//increase accuracy for ranged attacks against enemies that are adjacent\n\tif (target.alignment == Alignment.ENEMY && this.distance( target ) <= 1 && this.properties().contains(Char.Property.RANGED)){\n\t\tskill += 20;\n\t}\n\t\n\t//increase accuracy for ranged attacks against enemies that are adjacent\n\tif (target.alignment == Alignment.ENEMY && this.distance( target ) <= 1 && this.properties().contains(Char.Property.RANGED)){\n\t\tskill += 20;\n\t}\n\t\n\t//increase accuracy for ranged attacks against enemies that are adjacent\n\tif (target.alignment == Alignment.ENEMY && this.distance( target ) <= 1 && this.properties().contains(Char.Property.RANGED)){\n\t\tskill += 20;\n\t}\n\t\n\t//increase accuracy for ranged attacks against enemies that are", "CodeBleu_score": 17.426691748434404}]}
{"instance_id": "9e50c198348d", "generation_result": [{"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t  val counter = this\n  counter.start()\n  for (i in 0 until repeats) {\n    operation()\n    counter.stop()\n  }\n  counter.pause()\n  if (printResults) {\n    println(counter.toString())\n  }\n}", "CodeBleu_score": 57.144934681414924}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t  start()\n  repeat(repeats) { operation() }\n  stop()\n  if (printResults) print()\n}", "CodeBleu_score": 50.3444430091175}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t  start()\n  for (i in 0 until repeats) {\n    operation()\n  }\n  stop()\n  if (printResults) {\n    println(this)\n  }\n}", "CodeBleu_score": 55.84978815576276}]}
{"instance_id": "5f6e11998a1f", "generation_result": [{"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t  contract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }\n  return BehaviorTree<E>(rootTask, blackboard).apply(init)\n}", "CodeBleu_score": 60.711805172246834}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t  contract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }\n  return BehaviorTree<E>(rootTask, blackboard).apply(init)\n}", "CodeBleu_score": 60.711805172246834}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t  contract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }\n  return BehaviorTree<E>(rootTask, blackboard).apply(init)\n}", "CodeBleu_score": 60.711805172246834}]}
{"instance_id": "cdda12e45fb9", "generation_result": [{"code": "onPointerOver (){\n\t    let x = Math.floor(this.input.activePointer.worldX / this.tileSize);\n    let y = Math.floor(this.input.activePointer.worldY / this.tileSize);\n    this.selectedCellX = x;\n    this.selectedCellY = y;\n    this.highlightCells(x, y);\n    this.highlightHeightmap(x, y);\n}", "CodeBleu_score": 26.121871493131344}, {"code": "onPointerOver (){\n\t\n    // Update selected cell coordinates\n    this.selectedCell.x = this.pointer.x;\n    this.selectedCell.y = this.pointer.y;\n\n    // Update selected cell coordinates in the map\n    this.map.selectedCell.x = this.selectedCell.x;\n    this.map.selectedCell.y = this.selectedCell.y;\n\n    // Update selected cell coordinates in the cell highlight\n    this.cellHighlight.x = this.selectedCell.x;\n    this.cellHighlight.y = this.selectedCell.y;\n\n    // Highlight the selected cell\n    this.cellHighlight.highlight(this.selectedCell.x, this.selectedCell.y);\n\n    // Highlight the related cells\n    this.cellHighlight.highlightRelated(this.selectedCell.x, this.selectedCell.y);\n\n    // Adjust the transparency of the cell's heightmap polygons\n    this.cellHighlight.adjustHeightmapTransparency(this.selectedCell.x, this.selectedCell.y);\n\n    // Update the position of the cell highlight\n    this.cellHighlight.updatePosition();\n\n}", "CodeBleu_score": 17.73034976892234}, {"code": "onPointerOver (){\n\t    if (this.map.pointer.x >= 0 && this.map.pointer.x < this.map.width && this.map.pointer.y >= 0 && this.map.pointer.y < this.map.height) {\n        this.map.selected.x = this.map.pointer.x;\n        this.map.selected.y = this.map.pointer.y;\n        this.map.selected.cell = this.map.get(this.map.selected.x, this.map.selected.y);\n        this.map.selected.world.x = this.map.selected.cell.xw;\n        this.map.selected.world.y = this.map.selected.cell.yw;\n        this.map.selected.world.z = this.map.selected.cell.zw;\n\n        this.map.selected.surrounding.cells = this.map.selected.cell.getSurrounding();\n        this.map.selected.surrounding.tiles = this.map.selected.cell.getSurroundingTiles();\n        this.map.selected.surrounding.tiles.forEach((tile) => {\n            tile.setTint(0x808080);\n        });\n\n        this.map.selected.related.cells = this.map.selected.cell.getRelated();\n        this.map.selected.related.tiles = this.map.selected.cell.getRelatedTiles();\n        this.map.selected.related.tiles.forEach((tile) => {\n            tile.setTint(0x404040);\n        });\n\n        if (this.map.selected.cell.heightmap) {\n            this.map.selected.cell.heightmap.polygons.forEach((polygon) => {\n                polygon.setAlpha(0.2);\n            });\n        }\n\n        this.map.selected.cell.setTint(0xff0000);\n    }\n}", "CodeBleu_score": 39.72970093431969}]}
{"instance_id": "850931ce3401", "generation_result": [{"code": "getTrafficDensity (){\n\t    if (this.currentValue >= this.heavyThreshold) {\n        return 'heavy';\n    } else if (this.currentValue >= this.lightThreshold) {\n        return 'light';\n    } else {\n        return null;\n    }\n}", "CodeBleu_score": 36.79223871751517}, {"code": "getTrafficDensity (){\n\t  const lightThreshold = 0.5\n  const heavyThreshold = 0.7\n  if (this.currentValue >= heavyThreshold) {\n    return 'heavy'\n  } else if (this.currentValue >= lightThreshold) {\n    return 'light'\n  } else {\n    return null\n  }\n}", "CodeBleu_score": 30.769125638686788}, {"code": "getTrafficDensity (){\n\t  if (this.currentValue >= this.heavyThreshold) {\n    return 'heavy';\n  } else if (this.currentValue >= this.lightThreshold) {\n    return 'light';\n  } else {\n    return null;\n  }\n}", "CodeBleu_score": 36.51477836269611}]}
{"instance_id": "5958478bf873", "generation_result": [{"code": "restart: function (){\n\t    this.start = new Date();\n    this.interval = setInterval(function () {\n        var current = new Date();\n        var seconds = (current - this.start) / 1000;\n        var trafficDensity = this.getTrafficDensity(seconds);\n        if (trafficDensity) {\n            console.log(seconds + ' seconds have passed. Traffic density is ' + trafficDensity);\n        } else {\n            console.log(seconds + ' seconds have passed. Traffic density is below the light threshold.');\n        }\n        if (seconds > 10) {\n            clearInterval(this.interval);\n            console.log('Ten seconds have passed. Stopping the interval.');\n        }\n    }.bind(this), 1000);\n}", "CodeBleu_score": 40.190333187825075}, {"code": "restart: function (){\n\t    var currentValue = this.get('currentValue');\n    var lightThreshold = this.get('lightThreshold');\n    var heavyThreshold = this.get('heavyThreshold');\n    var trafficDensity = null;\n    if (currentValue > heavyThreshold) {\n        trafficDensity = 'heavy';\n    } else if (currentValue > lightThreshold) {\n        trafficDensity = 'light';\n    }\n    return trafficDensity;\n}", "CodeBleu_score": 26.786979147695106}, {"code": "restart: function (){\n\t    this.trafficDensity = null;\n    this.currentValue = this.getRandomInt(0, 100);\n    this.currentValue = this.getTrafficDensity(this.currentValue);\n    console.log(this.currentValue);\n    this.draw();\n}", "CodeBleu_score": 11.76737112207437}]}
{"instance_id": "d2441e586d58", "generation_result": [{"code": "flash: function (color, duration, force, alpha){\n\t\tif (this.flashEffect) {\n\t\tthis.flashEffect = this.flashEffect.destroy();\n\t}\n\tif (this.destroyed || !this.renderer) {\n\t\treturn false;\n\t}\n\n\tif (alpha === undefined) {\n\t\talpha = 0.25;\n\t}\n\tvar attribs = {\n\t\tfill: color || pInt(pick(this.color, this.options.color, '#ffffff'))\n\t},\n\t\thide = function () {\n\t\t\tthis.hide();\n\t\t};\n\n\tif (!force) { // Only do it if there is a color\n\t\tattribs.stroke = attribs.fill;\n\t\tattribs['stroke-width'] = 0;\n\t}\n\n\tthis.flashEffect = this.renderer.rect(\n\t\t\tthis.plotLeft,\n\t\t\tthis.plotTop,\n\t\t\tthis.width,\n\t\t\tthis.height,\n\t\t\t0\n\t\t)\n\t\t.attr(attribs)\n\t\t.add(this.markerGroup)\n\t\t.animate({\n\t\t\talpha: alpha\n\t\t}, {\n\t\t\tduration: duration || 500,\n\t\t\teasing: 'linear',\n\t\t\tcomplete: hide\n\t\t});\n\treturn true;\n}", "CodeBleu_score": 45.453298915923014}, {"code": "flash: function (color, duration, force, alpha){\n\t\tvar shower,\n\t\tseries = this,\n\t\tchart = series.chart;\n\n\t// if the series is not visible, don't run the animation\n\tif (!series.visible) {\n\t\treturn false;\n\t}\n\n\t// the series animation is set up by the chart\n\tif (chart.renderer.globalAnimation) {\n\t\tshower = chart.shower;\n\t}\n\n\t// define the default values\n\tcolor = color || null; // #fff\n\tduration = pick(duration, 500);\n\tforce = force || false;\n\talpha = alpha || 0.5;\n\n\n\n\t// add the flash effect\n\tif (series.flashAnim) { // destroy and rebuild\n\t\tseries.flashAnim = series.flashAnim.destroy();\n\t}\n\tseries.flashAnim = { // the flash effect\n\t\tobjects: [],\n\t\tduration: duration,\n\t\tforce: force\n\t};\n\n\teach(series.points, function (point) {\n\t\tvar graphic = point.graphic;\n\t\tif (graphic && graphic.width > 0) { // #4444\n\t\t\tshower.add(graphic);\n\n\t\t\tseries.flashAnim.objects.push(graphic);\n\n\t\t\tgraphic.attr({\n\t\t\t\tfill: color || point.color || series.color,\n\t\t\t\t// #1069, #1228\n\t\t\t\tstroke: pick(point.stroke, series.options.marker.lineColor, point.color || series.color),\n\t\t\t\t'stroke-width': pick(point.strokeWidth, series.options.marker.lineWidth, 0)\n\t\t\t});\n\n\t\t\t// If it's not a pie\n\t\t\tif (!series.pieChart) {\n\t\t\t\tgraphic.attr({\n\t\t\t\t\tx: point.plotX,\n\t\t\t\t\ty: point.plotY,\n\t\t\t\t\twidth: point.width,\n\t\t\t\t\theight: point.height\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (", "CodeBleu_score": 26.837246331588982}, {"code": "flash: function (color, duration, force, alpha){\n\t\tif (this.flashEffect) {\n\t\tthis.flashEffect = this.flashEffect.destroy();\n\t}\n\tif (!this.visible) {\n\t\treturn false;\n\t}\n\n\tvar flash = this.renderer.flash(color, duration, force, alpha),\n\t\tanim;\n\n\tthis.flashEffect = flash;\n\tanim = this.animate(flash);\n\tanim.on('afterAnimate', function () {\n\t\tthis.flashEffect = this.flashEffect.destroy();\n\t});\n\treturn anim;\n}", "CodeBleu_score": 35.799986715145224}]}
{"instance_id": "48b26381d975", "generation_result": [{"code": "createFluidLayer: function (children, addToWorld){\n\t    var layer = new FluidLayer(this.game, this);\n    layer.create(children);\n    if (addToWorld) {\n        this.game.world.add(layer);\n    }\n    this.layers.push(layer);\n    return layer;\n}", "CodeBleu_score": 41.35314566509408}, {"code": "createFluidLayer: function (children, addToWorld){\n\t    var layer = new FluidLayer(this);\n    layer.add(children);\n    if (addToWorld) {\n        this.layers.push(layer);\n    }\n    return layer;\n}", "CodeBleu_score": 27.589768103768908}, {"code": "createFluidLayer: function (children, addToWorld){\n\t    var layer = new FluidLayer(this.game, this, this.width, this.height);\n    this.layers.add(layer);\n    if (addToWorld) {\n        this.world.add(layer);\n    }\n    if (children) {\n        layer.add(children);\n    }\n    return layer;\n}", "CodeBleu_score": 46.29014543239219}]}
{"instance_id": "624c9e2eb19f", "generation_result": [{"code": "createFullLayer: function (children){\n\t    var layer = this.game.add.group();\n    layer.x = this.game.world.centerX;\n    layer.y = this.game.world.centerY;\n    layer.anchor.setTo(0.5, 0.5);\n    layer.scale.setTo(0.5, 0.5);\n    this.layers.push(layer);\n    if (children) {\n        children.forEach(function (child) {\n            layer.add(child);\n        });\n    }\n    return layer;\n}", "CodeBleu_score": 44.96366925006152}, {"code": "createFullLayer: function (children){\n\t    var layer = this.game.add.flexLayer();\n    layer.x = 0;\n    layer.y = 0;\n    layer.width = this.game.width;\n    layer.height = this.game.height;\n    layer.scale.set(1);\n    this.layers.push(layer);\n    if (children) {\n        layer.add(children);\n    }\n    return layer;\n}", "CodeBleu_score": 46.56149802432847}, {"code": "createFullLayer: function (children){\n\t    var layer = this.game.add.group();\n    layer.position.set(this.game.world.centerX, this.game.world.centerY);\n    layer.bounds = this.game.world.bounds;\n    layer.scale.set(this.game.scale.scaleFactor);\n    this.layers.push(layer);\n    if (children) {\n        layer.addMultiple(children);\n    }\n    return layer;\n}", "CodeBleu_score": 49.89753604051788}]}
{"instance_id": "1c7529bca3ce", "generation_result": [{"code": "crop: function (rect, copy){\n\t\n\tvar options = this.options,\n\t\tcropped = options.cropped;\n\n\tif (rect) {\n\t\trect = H.merge(cropped ? cropped : {}, rect);\n\n\t\t// If the crop rectangle is the same as the canvas, reset it (#880)\n\t\tif (\n\t\t\trect.width === this.width &&\n\t\t\trect.height === this.height &&\n\t\t\trect.x === 0 &&\n\t\t\trect.y === 0\n\t\t) {\n\t\t\tthis.resetCrop();\n\t\t} else {\n\t\t\t// If the crop rectangle is the same as the previous one, do nothing\n\t\t\tif (\n\t\t\t\t!cropped ||\n\t\t\t\trect.x !== cropped.x ||\n\t\t\t\trect.y !== cropped.y ||\n\t\t\t\trect.width !== cropped.width ||\n\t\t\t\trect.height !== cropped.height\n\t\t\t) {\n\t\t\t\t// If we're updating an existing crop rectangle, copy it from the\n\t\t\t\t// previous one\n\t\t\t\tif (copy) {\n\t\t\t\t\trect.x += cropped.x;\n\t\t\t\t\trect.y += cropped.y;\n\t\t\t\t}\n\t\t\t\tthis.updateCrop(rect);\n\t\t\t}\n\t\t}\n\t} else if (cropped) {\n\t\tthis.resetCrop();\n\t}\n}", "CodeBleu_score": 28.202812040852944}, {"code": "crop: function (rect, copy){\n\t    if (rect) {\n        if (copy) {\n            this.cropX = rect.x;\n            this.cropY = rect.y;\n            this.cropW = rect.width;\n            this.cropH = rect.height;\n        } else {\n            this.cropX += rect.x;\n            this.cropY += rect.y;\n            this.cropW = rect.width;\n            this.cropH = rect.height;\n        }\n        this.updateCrop();\n    } else {\n        this.resetCrop();\n    }\n}", "CodeBleu_score": 40.89323836161666}, {"code": "crop: function (rect, copy){\n\t\tvar obj = this,\n\t\toptions = obj.options,\n\t\torigCrop = obj.crop,\n\t\torigCropIsSet = obj.cropIsSet,\n\t\torigCropIsDirty = obj.cropIsDirty,\n\t\torigCropIsAnim = obj.cropIsAnim,\n\t\torigLocks = obj.locks,\n\t\torigLocksIsAnim = obj.locksIsAnim,\n\t\torigLocksIsDirty = obj.locksIsDirty,\n\t\torigLocksIsSet = obj.locksIsSet,\n\t\torigLocksCenter = obj.locksCenter,\n\t\torigLocksCenterIsSet = obj.locksCenterIsSet,\n\t\torigLocksCenterIsAnim = obj.locksCenterIsAnim,\n\t\torigLocksCenterIsDirty = obj.locksCenterIsDirty,\n\t\torigLocksAxis = obj.locksAxis,\n\t\torigLocksAxisIsSet = obj.locksAxisIsSet,\n\t\torigLocksAxisIsAnim = obj.locksAxisIsAnim,\n\t\torigLocksAxisIsDirty = obj.locksAxisIsDirty,\n\t\torigLocksRatio = obj.locksRatio,\n\t\torigLocksRatioIsSet = obj.locksRatioIsSet,\n\t\torigLocksRatioIsAnim = obj.locksRatioIsAnim,\n\t\torigLocksRatioIsDirty = obj.locksRatioIsDirty,\n\t\torigLocksMin = obj.locksMin,\n\t\torigLocksMinIsSet = obj.locksMinIsSet,\n\t\torigLocksMinIsAnim = obj.locksMinIsAnim,\n\t\torigLocksMinIsDirty = obj.locksMinIsDirty,\n\t\torigLocksMax = obj.locksMax,\n\t\torigLocksMaxIsSet = obj.locksMaxIsSet,\n\t\torigLocksMaxIsAnim = obj.locksMaxIsAnim,\n\t\torigLocksMaxIsDirty = obj.locksMaxIsDirty,\n\t\torigLocksRange = obj.locksRange,\n", "CodeBleu_score": 14.392897376024347}]}
{"instance_id": "d767b9ea9212", "generation_result": [{"code": "move: function (x, y, wrap){\n\t    var point = this.getTranslatedPoints(true, true);\n    wrap = pick(wrap, this.series.chart.options.chart.wrap);\n    if (x) {\n        this.moveH(point, wrap, x);\n    }\n    if (y) {\n        this.moveV(point, wrap, y);\n    }\n    this.setTranslatedPoints(point);\n    return this;\n}", "CodeBleu_score": 26.802746643995334}, {"code": "move: function (x, y, wrap){\n\t\tvar point = this,\n\t\tanimate = point.series && point.series.options.animation,\n\t\tseries = this.series,\n\t\tchart = series.chart;\n\n\t/*\n\t * If the point is mock, just record the move and leave the actual moving\n\t * to the end of animation.\n\t */\n\tif (point.isMock) {\n\t\tpoint.props.x += x;\n\t\tpoint.props.y += y;\n\n\t/*\n\t * Actually perform the move. Record it in the move array for\n\t * animatable series.\n\t */\n\t} else {\n\t\tvar plotX = point.plotX + x,\n\t\t\tplotY = point.plotY + y,\n\t\t\tseriesOptions = series.options;\n\n\t\tpoint.plotX = plotX;\n\t\tpoint.plotY = plotY;\n\n\t\t// Shift the data points for shared tooltip\n\t\tfor (var i = 0, dataLength = series.data.length, pointArrayMap = series.pointArrayMap; i < dataLength; i++) {\n\t\t\tif (pointArrayMap) {\n\t\t\t\tvar j = pointArrayMap.length;\n\t\t\t\twhile (j--) {\n\t\t\t\t\tseries.data[i]._distX += x;\n\t\t\t\t\tseries.data[i]._distY += y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// redraw point\n\t\tpoint.redraw();\n\n\t\t// record for animation\n\t\tif (seriesOptions.animation === true && !point.fixedRelation) {\n\t\t\tseries.movedPoints.push(point);\n\t\t}\n\n\t\t// update userspace positions\n\t\tif (series.getLabelConfig) {\n\t\t\tseries.moveLabels();\n\t\t}\n\n\t\t// fire the event\n\t\tif (seriesOptions.point.events.drag) {\n\t\t\tpoint.firePointEvent('drag', { x: plotX, y: plotY });\n\t\t}\n\t}\n\n\treturn point;\n}", "CodeBleu_score": 14.857880979558324}, {"code": "move: function (x, y, wrap){\n\t    var point = this.getTranslate();\n    wrap = pick(wrap, this.options.wrap, this.chart.options.chart.wrap, false);\n    x = Math.round(x);\n    y = Math.round(y);\n    if (x) {\n        this.moveH(point.x + x, wrap);\n    }\n    if (y) {\n        this.moveV(point.y + y, wrap);\n    }\n    return this;\n}", "CodeBleu_score": 33.1141435235599}]}
{"instance_id": "c7cf015114f3", "generation_result": [{"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t    if (this.freezeFrames) {\n        return false;\n    }\n\n    var frame = this.frame[state];\n\n    if (typeof frame === 'string' || typeof frame === 'number') {\n        this.frameName = frame;\n        return true;\n    }\n\n    return false;\n}", "CodeBleu_score": 45.890093053785165}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t    if (this.frames[state] && this.frames[state] !== this.frame) {\n        this.frame = this.frames[state];\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 12.9990016178441}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\n    if (this.freezeFrames) {\n        return false;\n    }\n\n    var frame = this.frame[state];\n\n    if (typeof frame === 'string' || typeof frame === 'number') {\n        this.frameName = frame;\n        return true;\n    }\n\n    return false;\n\n}", "CodeBleu_score": 45.92951077911161}]}
{"instance_id": "e0294cb83ca3", "generation_result": [{"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n    if (typeof quantity === 'object')\n    {\n        //  A single argument was sent, a WeaponConfig object\n        var config = quantity;\n\n        quantity = config.quantity;\n        key = config.key;\n        frame = config.frame;\n        group = config.group;\n        bulletClass = config.bulletClass;\n    }\n\n    if (quantity === undefined) { quantity = 1; }\n    if (group === undefined) { group = this.world; }\n\n    var weapon = this.game.plugins.add(Phaser.Weapon);\n\n    if (bulletClass)\n    {\n        weapon.bulletClass = bulletClass;\n    }\n\n    if (key === undefined)\n    {\n        weapon.createBullets(quantity, group);\n    }\n    else\n    {\n        weapon.createBullets(quantity, key, frame, group);\n    }\n\n    return weapon;\n\n}", "CodeBleu_score": 67.12351546890415}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n    if (group === undefined) { group = this.game.world; }\n\n    this._weapon = this.game.plugins.add(Phaser.Weapon);\n\n    if (bulletClass)\n    {\n        this._weapon.bulletClass = bulletClass;\n    }\n\n    this._weapon.createBullets(quantity, key, frame, group);\n\n    return this._weapon;\n\n}", "CodeBleu_score": 48.171027323008225}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n    if (bulletClass === undefined) { bulletClass = Phaser.Bullet; }\n\n    var manager = new Phaser.Weapon(this.game, bulletClass);\n\n    manager.add(quantity, key, frame, group);\n\n    return manager;\n\n}", "CodeBleu_score": 45.94574268878855}]}
{"instance_id": "2fca91787d6c", "generation_result": [{"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t    if (cull) {\n        var a = points[0];\n        var b = points[1];\n        var c = points[2];\n\n        var normal = Phaser.Geom.Triangle.Area(a.x, a.y, b.x, b.y, c.x, c.y);\n        var camera = this.game.camera;\n        var cameraX = camera.x + camera.width / 2;\n        var cameraY = camera.y + camera.height / 2;\n\n        var angle = Phaser.Math.angleBetween(cameraX, cameraY, a.x, a.y);\n        var dot = Phaser.Math.dot(normal, angle);\n\n        if (dot >= 0) {\n            this.moveTo(a.x, a.y);\n            this.lineTo(b.x, b.y);\n            this.lineTo(c.x, c.y);\n            this.lineTo(a.x, a.y);\n        }\n    } else {\n        this.moveTo(points[0].x, points[0].y);\n        this.lineTo(points[1].x, points[1].y);\n        this.lineTo(points[2].x, points[2].y);\n        this.lineTo(points[0].x, points[0].y);\n    }\n}", "CodeBleu_score": 36.713123433135145}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\n    if (cull) {\n        // get face normal\n        var n = Phaser.Geom.Triangle.Normal(points[0], points[1], points[2]);\n        // get camera direction\n        var cam = this.game.camera;\n        var camDir = new Phaser.Point(cam.x - cam.view.x, cam.y - cam.view.y);\n        // if the dot product is negative, the triangle is facing away from the camera\n        if (n.x * camDir.x + n.y * camDir.y < 0) {\n            return;\n        }\n    }\n\n    // draw the triangle\n    this.moveTo(points[0].x, points[0].y);\n    this.lineTo(points[1].x, points[1].y);\n    this.lineTo(points[2].x, points[2].y);\n    this.lineTo(points[0].x, points[0].y);\n\n}", "CodeBleu_score": 34.29636391557365}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t    if (cull) {\n        var v0 = points[0];\n        var v1 = points[1];\n        var v2 = points[2];\n\n        var normal = new THREE.Vector3(0, 0, 0);\n        normal.subVectors(v1, v0);\n        normal.cross(new THREE.Vector3().subVectors(v2, v0));\n        normal.normalize();\n\n        if (normal.z < 0) {\n            return;\n        }\n    }\n\n    this.beginPath();\n    this.moveTo(points[0].x, points[0].y);\n    this.lineTo(points[1].x, points[1].y);\n    this.lineTo(points[2].x, points[2].y);\n    this.closePath();\n    this.fill();\n}", "CodeBleu_score": 29.737818783509777}]}
{"instance_id": "5d227ea7f97b", "generation_result": [{"code": "checkVideoProgress: function (){\n\t\tvar video = this.video,\n\t\treadyState = video.readyState;\n\n\tif (readyState > 3) {\n\t\tclearTimeout(this.videoTimeout);\n\t\tthis.videoTimeout = undefined;\n\n\t\tif (!this.videoElement) {\n\t\t\tthis.videoElement = video;\n\t\t\tthis.setSource(video);\n\t\t}\n\t} else if (this.videoCount) {\n\t\tif (readyState < 3) {\n\t\t\tif (this.videoCount--) {\n\t\t\t\tthis.videoTimeout = setTimeout(\n\t\t\t\t\tthis.checkVideoProgress,\n\t\t\t\t\tthis.videoRetry\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\terror(20, false, this.src || this.currentSrc);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 19.12359582864963}, {"code": "checkVideoProgress: function (){\n\t    var video = this.video;\n\n    if (video.readyState >= 2) {\n        // If the video is ready, stop any pending source changes\n        clearTimeout(this.sourceTimeout);\n\n        // Update the texture\n        this.updateTexture();\n\n        // Stop checking progress\n        clearInterval(this.checkProgressInterval);\n    } else if (this.checkProgressRetries-- < 0) {\n        // If the video failed to start downloading within the allowed retries, warn and stop checking progress\n        console.warn('Video failed to start downloading within the allowed retries');\n        clearInterval(this.checkProgressInterval);\n    }\n}", "CodeBleu_score": 28.337537823283725}, {"code": "checkVideoProgress: function (){\n\t\n    var video = this.video;\n\n    // If the video is ready, stop any pending source changes and update the texture for playback\n    if (video.readyState >= 2) {\n\n        this.sourceChangePending = false;\n        this.updateTexture();\n\n    } else if (this.sourceChangePending && this.sourceChangeRetries > 0) {\n\n        // If the video is not ready and there are still retries left, check again in 100ms\n        this.sourceChangeRetries--;\n        this.sourceChangeTimeout = setTimeout(this.checkVideoProgress.bind(this), 100);\n\n    } else {\n\n        // If the video is not ready and there are no retries left, warn that the video failed to start downloading\n        console.warn('Unable to start downloading video.');\n\n    }\n\n}", "CodeBleu_score": 39.967291337881875}]}
{"instance_id": "e48c3c53f00a", "generation_result": [{"code": "start: function (event, value){\n\t    var state = this.state,\n        options = this.options,\n        chart = this.chart,\n        xAxis = this.xAxis,\n        xOrY = options.vertical ? 'y' : 'x',\n        box = event.target || event.srcElement;\n\n    // Ignore the mouse event if another mouse button is being used (#4426, #4210)\n    if (defined(event.buttons)) {\n        if (event.buttons !== 1) {\n            return;\n        }\n    }\n\n    // If the target is a path, use the parent responsive element\n    if (box.nodeName === 'path') {\n        box = box.parentNode;\n    }\n\n    // If the target is an SVGElementInstance, use the corresponding SVGGraphicsElement instead (#10394)\n    if (box.correspondingElement) {\n        box = box.correspondingElement;\n    }\n\n    // normalize\n    this.isTouchEvent = event.type === 'touchstart';\n    if (!this.isTouchEvent) {\n        event = chart.pointer.normalize(event);\n    }\n\n    // Store the start position\n    this.touches = [event];\n    this.startPosition = this.touches[0][xOrY];\n    this.startNormalizedEvent = event;\n\n    // Mark the chart as not ready to render\n    chart.isReadyToRender = false;\n\n    // Assign the \"down\" state\n    state = this.downState = [!chart.inverted ? event.chartX - chart.plotLeft : event.chartY - chart.plotTop, xAxis.horiz ? xAxis.min : xAxis.len];\n\n    // Mark the point\n    if (options.type === 'flags') {\n        this.pinchDown = chart.series[0].searchPoint(event, true);\n    }\n\n    // Init the search for points or items\n    if (options.searchByDistance) {\n        this.searchPoint = chart.searchPoint(event, options.searchByDistance, series);\n    }\n\n    // set the scale, used in pinch\n", "CodeBleu_score": 34.67840592233892}, {"code": "start: function (event, value){\n\t    var now = +new Date(),\n        point;\n\n    // Set the start timestamp if it is not set\n    if (!this.startTimestamp) {\n        this.startTimestamp = now;\n    }\n\n    // Mark as down\n    this.down = true;\n\n    // set touch-specific properties\n    if (this.isTouch) {\n        this.touches = event.touches;\n        this.pageX = event.touches[0].pageX;\n        this.pageY = event.touches[0].pageY;\n        point = this.chart.pointer.getPointNearestToContainer(this.chart.container, this.touches[0]);\n        this.chartX = point.chartX;\n        this.chartY = point.chartY;\n    }\n\n    // Run mouse down events (#768)\n    if (this.hasDrag) {\n        this.runPointActions(this.downActions);\n    }\n\n    // Initialize on the first touch/mouse down\n    if (this.count === 0) {\n\n        // Make sure to use the same button (#4544)\n        this.buttons = event.buttons || event.button;\n\n        this.trigger('start', event);\n\n        // A click should fire click and be reset immediately\n        if (this.isClick) {\n            this.reset();\n        }\n\n        // With line-type series, like spline or scatter, we need to identify\n        // which point is closest to the mouse cursor when we click or touch.\n        // This can be used in the tooltip and for navigator modules. (#6777)\n        if (this.followTouchMove && this.chart.series && this.chart.series.length && this.chart.series[0].nearestPointToCursor) {\n            this.chart.series[0].nearestPointToCursor(true, this.chartX - this.posX);\n        }\n    }\n\n    // Trigger after zoom\n    if (this.zoomX || this.zoomY) {\n        this.trigger(\n            'afterzoom',\n            event,\n            this.zoomX ? Math.", "CodeBleu_score": 34.69273290900459}, {"code": "start: function (event, value){\n\t    var button = this;\n    if (button.state !== 'down') {\n        button.state = 'down';\n        button.startTime = (new Date()).getTime();\n        button.repeatCount = 0;\n        button.repeatTimeout = void 0;\n        if (event) {\n            button.event = {\n                altKey: event.altKey,\n                shiftKey: event.shiftKey,\n                ctrlKey: event.ctrlKey,\n                metaKey: event.metaKey\n            };\n        }\n        if (value !== undefined) {\n            button.value = value;\n        }\n        if (button.onDown) {\n            button.onDown(button);\n        }\n    }\n    return button;\n}", "CodeBleu_score": 29.99684918190424}]}
{"instance_id": "a2cb3bdacb1e", "generation_result": [{"code": "onMouseDown: function (event){\n\t\t// issue #295, dragging not working in Firefox on Linux\n\t//event = dragStart(event);\n\n\t// issue #318\n\tif (event.type === 'mousedown' && event.button !== 0) {\n\t\treturn;\n\t}\n\n\tthis.mouseDownX = event.chartX;\n\tthis.mouseDownY = event.chartY;\n\n\tvar now = +new Date(),\n\t\t// Run mouse down events (#604)\n\t\trunMouseDown = function (series) {\n\t\t\tif (series.runPointActions) {\n\t\t\t\tseries.runPointActions(event);\n\t\t\t}\n\t\t};\n\n\t// If we're capturing on the container, we only need to check whether we're\n\t// hitting the container itself or any of its descendants. This saves us\n\t// having to check all the series.\n\tif (this.mouseDownX < this.plotLeft ||\n\t\t\tthis.mouseDownX > this.plotLeft + this.plotWidth ||\n\t\t\tthis.mouseDownY < this.plotTop ||\n\t\t\tthis.mouseDownY > this.plotTop + this.plotHeight\n\t\t) {\n\t\t// Hide the tooltip on first click/touch outside the plot area (#1503,\n\t\t// #5556, #5615)\n\t\tif (this.tracker.chartTooltip) {\n\t\t\tthis.tracker.chartTooltip.hide();\n\t\t}\n\n\t\t// If it is outside the plot area, run mouseOut (#1583, #5250)\n\t\tif (this.mouseOut) {\n\t\t\tthis.mouseOut();\n\t\t}\n\n\t\t// Pass undefined as the new hover point (#704)\n\t\tthis.runPointActions(undefined);\n\n\t} else {\n\n\t\t// In case of shared tooltip, record the nearest point\n\t\t// to be used once moved out from the plot area (#4645)\n\t\tif (this.tracker && this.tracker.tooltip && this.tracker.tooltip", "CodeBleu_score": 40.33344102550418}, {"code": "onMouseDown: function (event){\n\t\t// #22: http://jsfiddle.net/highcharts/FQm4E/\n\tif (event.which === 2) {\n\t\tevent.preventDefault();\n\t}\n\n\tthis.mouseDownX = event.chartX;\n\tthis.mouseDownY = event.chartY;\n\n\t// Run mouse down on all points (#78)\n\tif (this.isInsidePlot(this.mouseDownX - this.plotLeft, this.mouseDownY - this.plotTop)) {\n\t\teach(this.series, function (series) {\n\t\t\teach(series.points || [], function (point) {\n\t\t\t\tpoint.onMouseDown(event);\n\t\t\t});\n\t\t});\n\t}\n\n\t// If clicking outside a path, always allow the event (#149): http://jsfiddle.net/highcharts/zrr47/\n\tif (!this.inClass(event.target, PREFIX + 'tracker') &&\n\t\t\t!this.inClass(event.target, PREFIX + 'button')) {\n\t\tthis.allowClick = true;\n\t}\n\n\tif (this.selectionMarker) {\n\t\tthis.selectionMarker = this.selectionMarker.destroy();\n\t}\n\n\tthis.mouseDown = this.xAxis[0].toValue(event.chartX);\n\tthis.mouseDownY = event.chartY;\n\n\t// record the start position\n\tthis.isMouseDown = true;\n\tthis.selectionMarker = this.renderer.rect(\n\t\tthis.plotLeft,\n\t\tthis.plotTop,\n\t\tzoomHor ? 1 : this.plotWidth,\n\t\tzoomHor ? this.plotHeight : 1,\n\t\t0\n\t)\n\t.attr({\n\t\tfill: this.options.chart.selectionMarkerFill || 'rgba(69,114,167,0.25)',\n\t\tzIndex: 7\n\t})\n\t.add();\n\n\tif (!this.selectionMarker) {\n\t\tthis.allowClick = false;\n\t}\n\n\tthis.selectionMarker.addClass(PREFIX + 'selection-", "CodeBleu_score": 43.5819838294381}, {"code": "onMouseDown: function (event){\n\t\tthis.mouseDownX = event.pageX;\n\tthis.mouseDownY = event.pageY;\n\n\t// issue #295, dragging not working on iOS\n\tif (H.isTouchDevice) {\n\t\tthis.runPointActions(event);\n\t}\n\n\tif (this.chart.panKey && !this.chart[this.chart.panKey + 'Pressed']) {\n\t\tthis.chart[this.chart.panKey + 'Pressed'] = true;\n\t}\n\n\tif (this.chart.isInsidePlot(event.chartX - this.chart.plotLeft, event.chartY - this.chart.plotTop)) {\n\n\t\t// Prevent the click pseudo event from firing unless it is set in the options\n\t\tif (!this.followTouchMove && !this.runChartClick) {\n\t\t\tevent.preventDefault();\n\t\t}\n\n\t}\n\n\t// Record the start position of a dragoperation\n\tif (this.zoomHor) {\n\t\tthis.zoomStartX = event.pageX;\n\t}\n\tif (this.zoomVert) {\n\t\tthis.zoomStartY = event.pageY;\n\t}\n\t// Optionally move the tooltip on touch move\n\tif (this.followTouchMove && this.tooltip && this.tooltip.followTouchMove) {\n\t\tthis.tooltip.reflow(event);\n\t}\n\n\tthis.runPointActions(event);\n}", "CodeBleu_score": 32.264763730333776}]}
{"instance_id": "88538a5b66e8", "generation_result": [{"code": "onMouseUpGlobal: function (event){\n\t\tvar chart = this,\n\t\thoverSeries = chart.hoverSeries;\n\n\t// If the event is not handled, it's important that pointer.onDocumentMouseUp isn't called\n\t// with a fake event.\n\tif (chart.openMenu) {\n\t\tevent = {\n\t\t\t...event,\n\t\t\ttype: 'mousedown'\n\t\t};\n\t\tchart.pointer.onDocumentMouseUp(event);\n\t}\n\n\t// Clear the hover state for touching\n\tif (hoverSeries && hoverSeries.directTouch) {\n\t\thoverSeries.onMouseOut();\n\t}\n\n\t// Clear the hover state for touching if series has a delayed mouseOver event\n\tif (hoverSeries && hoverSeries.options.stickyTracking && hoverSeries.options.tooltip.followTouchMove) {\n\t\thoverSeries.onMouseOut();\n\t}\n\n\t// Reset the zoom level of the yAxes\n\tif (chart.resetZoomEnabled) {\n\t\tchart.mapZoom(\n\t\t\t0.5,\n\t\t\t0.5,\n\t\t\tchart.zoomOutButton.options.relativeTo || 'chart'\n\t\t);\n\t}\n\n\t// Run mouseUp on the tracker\n\tif (chart.tracker) {\n\t\tchart.tracker.onMouseUp(event);\n\t}\n\n\t// Fire the mouse up event (#249)\n\tfireEvent(chart, 'mouseUp', event);\n}", "CodeBleu_score": 25.45697341140787}, {"code": "onMouseUpGlobal: function (event){\n\t\tif (this.enabled) {\n\t\tthis.onMouseUp(event);\n\t}\n}", "CodeBleu_score": 20.092417122942223}, {"code": "onMouseUpGlobal: function (event){\n\t\tvar chart = this,\n\t\thoverSeries = chart.hoverSeries;\n\n\t// Ignore the event if it's not inside the chart or if we're in a drag operation.\n\tif (!chart.mouseIsDown || !chart.isInsidePlot(event.chartX - chart.plotLeft, event.chartY - chart.plotTop)) {\n\t\treturn;\n\t}\n\n\t// Reset the tracking pointer\n\tif (hoverSeries && hoverSeries.stickyTracking) {\n\t\thoverSeries.onMouseOut();\n\t}\n\n\t// Reset variables (#2500)\n\tchart.mouseIsDown = chart.cancelClick = false;\n\n\t// When clicking outside a tracker, fire the mouseUp event (#4076). Also, don't fire mouseUp if we're in a drag operation.\n\tif (hoverSeries) {\n\t\thoverSeries.onMouseUp(event);\n\t}\n\n\t// Fire the mouse up event (#2454). If the click/touch was outside the chart, fire it on the container, #12004.\n\tfireEvent(chart, 'mouseUp', event, function () {\n\t\tif (chart.container) { // When destroying a chart, it is in fact already destroyed (#2165)\n\t\t\tfireEvent(chart.container, 'mouseUp', event);\n\t\t}\n\t});\n\n\t// Process click or touch\n\tif (!defined(event.cancelBubble)) { // IE < 9. Support for IE < 9 was removed in #1100.\n\t\tchart.click(event);\n\t}\n}", "CodeBleu_score": 27.382233613472774}]}
{"instance_id": "bf8b43ab3487", "generation_result": [{"code": "onTouchEnter: function (event){\n\t    if (this.enabled && this.game.inputEnabled) {\n        this.touchEnterCallback(event);\n        this.game.preventDefault(event);\n    }\n}", "CodeBleu_score": 26.832547157332314}, {"code": "onTouchEnter: function (event){\n\t\tif (this.enabled && this.gameInputEnabled) {\n\t\tif (this.touchEnterCallback) {\n\t\t\tthis.touchEnterCallback(event);\n\t\t}\n\t\tif (this.preventDefaultTouchEnter) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n}", "CodeBleu_score": 36.54843527063308}, {"code": "onTouchEnter: function (event){\n\t\tif (this.enabled && this.gameInput.enabled) {\n\t\tthis.gameInput.touchEnterEvent = event;\n\t\tif (this.gameInput.touchEnterCallback) {\n\t\t\tthis.gameInput.touchEnterCallback.call(this.gameInput.callbackContext, event);\n\t\t}\n\t\tif (this.gameInput.preventDefault) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n}", "CodeBleu_score": 41.76993287115432}]}
