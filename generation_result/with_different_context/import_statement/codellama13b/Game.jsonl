{"instance_id": "47ee1dae200b", "generation_result": [{"code": "public static void PreloadDll(string dllName){\n\t    string dllDirectory = GetDllDirectory(dllName);\n    if (dllDirectory == null) {\n        return;\n    }\n    if (Platform.IsWindows()) {\n        Win32PreloadDll(dllDirectory, dllName);\n    } else {\n        PosixPreloadDll(dllDirectory, dllName);\n    }\n}", "CodeBleu_score": 51.18247997466866}, {"code": "public static void PreloadDll(string dllName){\n\t    string dllDirectory = GetDllDirectory();\n    if (dllDirectory == null) {\n        return;\n    }\n    if (IsWindows()) {\n        LoadDllWindows(dllName, dllDirectory);\n    }\n    else {\n        LoadDllPosix(dllName, dllDirectory);\n    }\n}", "CodeBleu_score": 26.774665331940128}, {"code": "public static void PreloadDll(string dllName){\n\t\tif (Platform.IsWindows) {\n\t\tWin32.LoadLibrary(dllName);\n\t} else {\n\t\tPosix.dlopen(dllName, Posix.RTLD_LAZY);\n\t}\n}", "CodeBleu_score": 29.452500531060394}]}
{"instance_id": "2073a8291d05", "generation_result": [{"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t\tif (reader == null) {\n\t\tthrow new ArgumentNullException(\"reader\");\n\t}\n\tif (reader.BaseStream == null) {\n\t\tthrow new ArgumentNullException(\"reader.BaseStream\");\n\t}\n\tif (reader.BaseStream.Length == 0) {\n\t\tthrow new ArgumentException(\"reader.BaseStream.Length == 0\");\n\t}\n\tif (string.IsNullOrEmpty(originalPath)) {\n\t\tthrow new ArgumentNullException(\"originalPath\");\n\t}\n\n\t// Check if the file is already loaded\n\tif (assetFileList.Any(x => x.originalPath == originalPath)) {\n\t\treturn;\n\t}\n\n\t// Create a SerializedFile instance\n\tSerializedFile serializedFile = new SerializedFile();\n\n\t// Set the version\n\tif (unityVersion == null) {\n\t\tserializedFile.version = reader.ReadUInt32();\n\t} else {\n\t\tserializedFile.version = (uint)AssetStudio.VersionUtilities.FindUnityVersionIndex(unityVersion);\n\t}\n\n\t// Set the endianess\n\tserializedFile.endianess = reader.ReadByte();\n\n\t// Set the file type\n\tserializedFile.fileType = reader.ReadByte();\n\n\t// Set the metadata size\n\tserializedFile.metadataSize = reader.ReadInt32();\n\n\t// Set the file ID\n\tserializedFile.fileID = reader.ReadUInt32();\n\n\t// Set the path ID\n\tserializedFile.pathID = reader.ReadUInt32();\n\n\t// Set the version\n\tserializedFile.version = reader.ReadUInt32();\n\n\t// Set the data offset\n\tserializedFile.dataOffset = reader.ReadUInt32();\n\n\t// Set the data length\n\tserializedFile.dataLength = reader.ReadUInt32();\n\n\t// Set the data length\n\tserializedFile.dataLength = reader.ReadUInt32();\n\n\t// Set the asset count\n\tserializedFile.assetCount = reader.ReadInt32();\n\n\t// Set the asset count\n\tserializedFile.assetCount = reader.", "CodeBleu_score": 34.089416847768554}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t\tvar filePath = reader.FullPath;\n\tvar fileName = Path.GetFileName(filePath);\n\tvar filePathId = filePath.ToUpperInvariant();\n\tvar filePathIdx = filePathId.LastIndexOf('\\\\');\n\tvar fileNameIdx = filePathId.LastIndexOf('.');\n\tvar fileNameId = filePathId.Substring(fileNameIdx + 1);\n\tvar fileNameIdUpper = fileNameId.ToUpperInvariant();\n\tvar fileParentPathId = filePathId.Substring(0, filePathIdx + 1);\n\tvar fileParentPath = filePath.Substring(0, filePathIdx + 1);\n\tvar fileSize = reader.Length;\n\tvar fileType = FileType.Unknown;\n\n\tif (fileNameIdUpper == \"RESOURCES\") {\n\t\tfileType = FileType.ResourcesFile;\n\t} else if (fileNameIdUpper == \"SCENE\") {\n\t\tfileType = FileType.SceneFile;\n\t} else if (fileNameIdUpper == \"EXTENSIONS\") {\n\t\tfileType = FileType.ExtensionInfo;\n\t} else if (fileNameIdUpper == \"ASSETBUNLDE\") {\n\t\tfileType = FileType.BundleFile;\n\t} else if (fileNameIdUpper == \"WEBPACK\") {\n\t\tfileType = FileType.WebFile;\n\t} else if (fileNameIdUpper == \"GUID\") {\n\t\tfileType = FileType.GuidFile;\n\t} else if (fileNameIdUpper == \"META\") {\n\t\tfileType = FileType.MetaFile;\n\t} else if (fileNameIdUpper == \"YAML\") {\n\t\tfileType = FileType.YAMLFile;\n\t} else if (fileNameIdUpper == \"YML\") {\n\t\tfileType = FileType.YMLFile;\n\t} else if (fileNameIdUpper == \"XML\") {\n\t\tfileType = FileType.XMLFile;\n\t} else if (fileNameIdUpper == \"FBX\") {\n\t\tfileType = FileType.FBXFile;\n\t} else if (fileNameIdUpper == \"OBJ\") {\n\t\tfileType = FileType.OBJFile", "CodeBleu_score": 26.563876383727823}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t\tstring path = reader.FullPath;\n\tif (path == null) {\n\t\treturn;\n\t}\n\tif (assetFileList.Any(t => t.fileName.Equals(path, System.StringComparison.OrdinalIgnoreCase))) {\n\t\tLogger.LogWarning(\"Skipping already loaded file: \" + path);\n\t\treturn;\n\t}\n\tif (path.EndsWith(\".unity3d\")) {\n\t\tLoadUnityFile(reader, path, unityVersion);\n\t} else if (path.EndsWith(\".resS\")) {\n\t\tLoadResourceFile(reader, path);\n\t} else if (path.EndsWith(\".resource\")) {\n\t\tLoadWebFile(reader, path);\n\t} else {\n\t\tLoadAssetsFile(reader, path);\n\t}\n}", "CodeBleu_score": 23.243552270682883}]}
{"instance_id": "5dacc6a26301", "generation_result": [{"code": "public ImportedFrame FindFrameByPath(string path){\n\t\tstring[] pathParts = path.Split(\"/\")\n\tstring name = pathParts[pathParts.Length - 1]\n\t\n\tImportedFrame foundFrame = null\n\t\n\tforeach (ImportedFrame childFrame in ChildFrames) {\n\t\tif (childFrame.Name == name) {\n\t\t\tif (childFrame.Path == path) {\n\t\t\t\tfoundFrame = childFrame\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfoundFrame = childFrame.FindFrameByPath(path)\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn foundFrame\n}", "CodeBleu_score": 14.605065978229353}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\t\tstring[] pathSplit = path.Split('/')\n\tstring name = pathSplit[pathSplit.Length - 1]\n\t\n\tImportedFrame frame = GetChild(name)\n\t\n\tif (frame == null) {\n\t\treturn null\n\t}\n\t\n\tif (frame.path == path) {\n\t\treturn frame\n\t}\n\t\n\tfor (int i = 0; i < frame.children.Count; i++) {\n\t\tImportedFrame child = frame.children[i].FindFrameByPath(path)\n\t\tif (child != null) {\n\t\t\treturn child\n\t\t}\n\t}\n\t\n\treturn null\n}", "CodeBleu_score": 41.14494773056947}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\t    // If the path is empty, return null.\n    if (path == \"\") {\n        return null\n    }\n\n    // If the path is the same as this frame's path, return this frame.\n    if (path == this.Path) {\n        return this\n    }\n\n    // If the path is not the same as this frame's path,\n    // search through this frame's children.\n    // If a match is found, return the child frame.\n    // If no match is found, return null.\n    foreach (ImportedFrame childFrame in this.ChildFrames) {\n        ImportedFrame foundFrame = childFrame.FindFrameByPath(path)\n        if (foundFrame != null) {\n            return foundFrame\n        }\n    }\n    return null\n}", "CodeBleu_score": 44.41014349908395}]}
{"instance_id": "c20b04c4ad37", "generation_result": [{"code": "public static FileReader DecompressGZip(FileReader reader){\n\t    var compressedData = reader.ReadAllBytes()\n    var decompressedData = new MemoryStream()\n    using (var compressedStream = new MemoryStream(compressedData)) {\n        using (var decompressionStream = new GZipStream(compressedStream, CompressionMode.Decompress)) {\n            decompressionStream.CopyTo(decompressedData)\n        }\n    }\n    return new FileReader(decompressedData.ToArray())\n}", "CodeBleu_score": 27.731515152420943}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\t\tvar stream = new MemoryStream()\n\tvar gzip = new GZipStream(reader, CompressionMode.Decompress, false)\n\tgzip.CopyTo(stream)\n\tgzip.Dispose()\n\tstream.Seek(0, SeekOrigin.Begin)\n\treturn FileReader(stream)\n}", "CodeBleu_score": 27.325010469794027}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\t    var ms = new MemoryStream()\n    using (var gz = new GZipStream(reader.Stream, CompressionMode.Decompress)) {\n        gz.CopyTo(ms)\n    }\n    ms.Position = 0\n    return new FileReader(ms)\n}", "CodeBleu_score": 33.202583346875336}]}
{"instance_id": "11ce5c7b009d", "generation_result": [{"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\tstring[] nonSwitchStrings = new string[0];\n\tforeach (string commandString in commandStrings) {\n\t\tif (commandString == \"--\") {\n\t\t\tbreak;\n\t\t}\n\t\tif (commandString.StartsWith(\"--\")) {\n\t\t\tbool found = false;\n\t\t\tforeach (SwitchForm switchForm in switchForms) {\n\t\t\t\tif (switchForm.Match(commandString)) {\n\t\t\t\t\tswitchForm.Process(commandString);\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) {\n\t\t\t\tthrow new Exception(\"Switch not found: \" + commandString);\n\t\t\t}\n\t\t} else {\n\t\t\tstring[] newNonSwitchStrings = new string[nonSwitchStrings.Length + 1];\n\t\t\tnonSwitchStrings.CopyTo(newNonSwitchStrings, 0);\n\t\t\tnewNonSwitchStrings[nonSwitchStrings.Length] = commandString;\n\t\t\tnonSwitchStrings = newNonSwitchStrings;\n\t\t}\n\t}\n\tthis.NonSwitchStrings = nonSwitchStrings;\n}", "CodeBleu_score": 38.67914736744018}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\t// Iterate through the command strings\n\tforeach (string commandString in commandStrings) {\n\t\t// Check if the current command string is a switch\n\t\tbool isSwitch = false;\n\t\tforeach (SwitchForm switchForm in switchForms) {\n\t\t\t// Check if the current command string is a switch\n\t\t\tif (switchForm.IsSwitch(commandString)) {\n\t\t\t\tisSwitch = true;\n\t\t\t\t// Parse the switch\n\t\t\t\tswitchForm.Parse(commandString);\n\t\t\t\t// Break out of the loop\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// If the current command string is not a switch\n\t\tif (!isSwitch) {\n\t\t\t// Add the current command string to the non-switch strings collection\n\t\t\tNonSwitchStrings.Add(commandString);\n\t\t}\n\t}\n}", "CodeBleu_score": 40.48843753027}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\t// Declare the collection of non-switch strings.\n\tArrayList nonSwitchStrings = new ArrayList();\n\n\t// Iterate through the command strings.\n\tforeach (string commandString in commandStrings) {\n\t\t// Declare a variable to hold the switch form.\n\t\tSwitchForm switchForm;\n\n\t\t// Determine if the command string is a switch.\n\t\tif (IsSwitch(commandString, switchForms, out switchForm)) {\n\t\t\t// Add the switch form to the collection of switch forms.\n\t\t\tswitchForms.Add(switchForm);\n\t\t}\n\t\telse {\n\t\t\t// Add the command string to the collection of non-switch strings.\n\t\t\tnonSwitchStrings.Add(commandString);\n\t\t}\n\t}\n}", "CodeBleu_score": 32.1175774887568}]}
{"instance_id": "b8da2d0a3f76", "generation_result": [{"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\tthis.m_Texture2D = m_Texture2D\n\tthis.m_Texture2DData = m_Texture2D.m_Texture2DData\n\tthis.m_Width = m_Texture2D.m_Width\n\tthis.m_Height = m_Texture2D.m_Height\n\tthis.m_TextureFormat = m_Texture2D.m_TextureFormat\n\tthis.m_Version = m_Texture2D.m_Version\n\tthis.m_Platform = m_Texture2D.m_Platform\n\tthis.m_OutputSize = m_Texture2D.m_OutputSize\n}", "CodeBleu_score": 28.554920365286197}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t    this.m_Texture2D = m_Texture2D\n    this.m_Texture2DData = m_Texture2D.GetRawTextureData()\n    this.m_Texture2DWidth = m_Texture2D.width\n    this.m_Texture2DHeight = m_Texture2D.height\n    this.m_Texture2DFormat = m_Texture2D.format\n    this.m_Texture2DVersion = m_Texture2D.version\n    this.m_Texture2DPlatform = m_Texture2D.platform\n    this.m_Texture2DOutputSize = m_Texture2D.GetRawTextureData().Length\n}", "CodeBleu_score": 26.13070502396183}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t    this.m_Texture2D = m_Texture2D\n    this.m_Texture2DData = m_Texture2D.GetData()\n    this.m_Texture2DWidth = m_Texture2D.Width\n    this.m_Texture2DHeight = m_Texture2D.Height\n    this.m_Texture2DFormat = m_Texture2D.Format\n    this.m_Texture2DVersion = m_Texture2D.Version\n    this.m_Texture2DPlatform = m_Texture2D.Platform\n    this.m_Texture2DOutputSize = m_Texture2D.OutputSize\n    this.m_Texture2Dm_TextureSettings = m_Texture2D.m_TextureSettings\n    this.m_Texture2Dm_StreamData = m_Texture2D.m_StreamData\n    this.m_Texture2Dm_StreamingMipmaps = m_Texture2D.m_StreamingMipmaps\n    this.m_Texture2Dm_StreamingMipmapsPriority = m_Texture2D.m_StreamingMipmapsPriority\n    this.m_Texture2Dm_ImageData = m_Texture2D.m_ImageData\n    this.m_Texture2Dm_TextureFormat = m_Texture2D.m_TextureFormat\n    this.m_Texture2Dm_ColorSpace = m_Texture2D.m_ColorSpace\n    this.m_Texture2Dm_FilterMode = m_Texture2D.m_FilterMode\n    this.m_Texture2Dm_Aniso = m_Texture2D.m_Aniso\n    this.m_Texture2Dm_MipBias = m_Texture2D.m_MipBias\n    this.m_Texture2Dm_WrapMode = m_Texture2D.m_WrapMode\n    this.m_Texture2Dm_LightmapFormat = m_Texture2D.m_LightmapFormat\n    this.m_Texture2Dm_GradientScale = m_Texture2D.m_GradientScale\n    this.m_Texture2Dm_TextureSettings_FilterMode = m_Texture2D.m_TextureSettings.FilterMode", "CodeBleu_score": 18.991498292122934}]}
{"instance_id": "4d1412b550a3", "generation_result": [{"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear()\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tvar child = sp.GetArrayElementAtIndex(i)\n\t\tif (child.boolValue) {\n\t\t\tresult.Add(child.stringValue)\n\t\t}\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\"\n\t}\n\tvar sb = new StringBuilder()\n\tfor (int i = 0; i < result.Count; i++) {\n\t\tsb.Append(result[i])\n\t\tif (i < result.Count - 1) {\n\t\t\tsb.Append(\", \")\n\t\t}\n\t}\n\treturn sb.ToString()\n}", "CodeBleu_score": 39.18048033598057}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear()\n\t\n\tif (sp.arraySize == 0) {\n\t\treturn \"Nothing\"\n\t}\n\t\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tif (sp.GetArrayElementAtIndex(i).objectReferenceValue != null) {\n\t\t\tresult.Add(sp.GetArrayElementAtIndex(i).objectReferenceValue.name)\n\t\t}\n\t}\n\t\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\"\n\t}\n\t\n\treturn string.Join(\", \", result.ToArray())\n}", "CodeBleu_score": 37.97069638456298}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear()\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tif (sp.GetArrayElementAtIndex(i).boolValue) {\n\t\t\tresult.Add(sp.GetArrayElementAtIndex(i).displayName)\n\t\t}\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\"\n\t}\n\treturn string.Join(\", \", result.ToArray())\n}", "CodeBleu_score": 31.101346804398233}]}
{"instance_id": "5014bde74f8b", "generation_result": [{"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t\tif (!prop.allowAdd || prop.active) {\n\t\treturn;\n\t}\n\t\n\tstring name = prop.name;\n\tstring type = prop.type;\n\t\n\tif (add) {\n\t\tmenu.AddItem(new GUIContent(name + \" (\" + type + \")\"), false, () => {\n\t\t\tSerializedProperty array = sp.FindPropertyRelative(\"m_SavedProperties\");\n\t\t\tarray.InsertArrayElementAtIndex(array.arraySize);\n\t\t\tSerializedProperty newProp = array.GetArrayElementAtIndex(array.arraySize - 1);\n\t\t\tnewProp.FindPropertyRelative(\"m_Name\").stringValue = name;\n\t\t\tnewProp.FindPropertyRelative(\"m_Type\").stringValue = type;\n\t\t\tnewProp.FindPropertyRelative(\"m_Value\").stringValue = prop.defaultValue;\n\t\t\tnewProp.FindPropertyRelative(\"m_RangeLimits\").stringValue = prop.rangeLimits;\n\t\t\tnewProp.FindPropertyRelative(\"m_Texture\").objectReferenceValue = prop.defaultTexture;\n\t\t\tnewProp.FindPropertyRelative(\"m_Tooltip\").stringValue = prop.tooltip;\n\t\t\tnewProp.FindPropertyRelative(\"m_Hidden\").boolValue = prop.hidden;\n\t\t\tnewProp.FindPropertyRelative(\"m_RequiresDepthTextureOption\").boolValue = prop.requiresDepthTextureOption;\n\t\t\tnewProp.FindPropertyRelative(\"m_RequiresDepthNormalsTextureOption\").boolValue = prop.requiresDepthNormalsTextureOption;\n\t\t\tnewProp.FindPropertyRelative(\"m_CustomRenderTexture\").objectReferenceValue = prop.customRenderTexture;\n\t\t\tnewProp.FindPropertyRelative(\"m_CustomRenderTextureHeight\").intValue = prop.customRenderTextureHeight;\n\t\t\tnewProp.FindPropertyRelative(\"m_CustomRenderTextureWidth\").intValue = prop.customRenderTextureWidth;\n\t\t\tnewProp.FindPropertyRelative(\"m_CustomRenderTextureUpdateEachFrame\").boolValue = prop.customRenderTextureUpdateEachFrame;\n\t\t\tnewProp.FindPropertyRelative(\"m_CustomRenderTextureUpdateBackground\").boolValue = prop.", "CodeBleu_score": 32.239684591294434}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t    if (add && !prop.name.IsActive(sp)) {\n        menu.AddItem(new GUIContent(prop.displayName + \" (\" + prop.type + \")\"), false, () => {\n            sp.arraySize++;\n            sp.GetArrayElementAtIndex(sp.arraySize - 1).stringValue = prop.name;\n            sp.serializedObject.ApplyModifiedProperties();\n        });\n    }\n    else if (!add && prop.name.IsActive(sp)) {\n        menu.AddItem(new GUIContent(prop.displayName + \" (\" + prop.type + \")\"), false, () => {\n            int index = prop.name.GetArrayIndex(sp);\n            sp.DeleteArrayElementAtIndex(index);\n            sp.DeleteArrayElementAtIndex(index);\n            sp.DeleteArrayElementAtIndex(index);\n            sp.DeleteArrayElementAtIndex(index);\n            sp.serializedObject.ApplyModifiedProperties();\n        });\n    }\n}", "CodeBleu_score": 36.67825422913949}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t    if (prop.name == \"RenderType\") {\n        return\n    }\n    if (prop.name == \"DisplacementLockObject\") {\n        return\n    }\n    if (prop.name == \"DisplacementLockScale\") {\n        return\n    }\n    if (prop.name == \"DisplacementLockPosition\") {\n        return\n    }\n    if (prop.name == \"DisplacementLockRotation\") {\n        return\n    }\n    if (prop.name == \"DisplacementLockUseLocalSpace\") {\n        return\n    }\n    if (prop.name == \"DisplacementLockUseWorldSpace\") {\n        return\n    }\n    if (prop.name == \"DisplacementLockUseObjectRotation\") {\n        return\n    }\n    if (prop.name == \"DisplacementLockUseObjectScale\") {\n        return\n    }\n    if (prop.name == \"DisplacementLockUseObjectPosition\") {\n        return\n    }\n    if (prop.name == \"DisplacementLockUseObject\") {\n        return\n    }\n    if (prop.name == \"DisplacementLockUseWorld\") {\n        return\n    }\n    if (prop.name == \"DisplacementLockUseLocal\") {\n        return\n    }\n    if (prop.name == \"DisplacementLockUsePosition\") {\n        return\n    }\n    if (prop.name == \"DisplacementLockUseRotation\") {\n        return\n    }\n    if (prop.name == \"DisplacementLockUseScale\") {\n        return\n    }\n    if (prop.name == \"DisplacementLockUse\") {\n        return\n    }\n    if (prop.name == \"DisplacementLock\") {\n        return\n    }\n    if (prop.name == \"DisplacementLockObjectPosition\") {\n        return\n    }\n    if (prop.name == \"DisplacementLockObjectRotation\") {\n        return\n    }\n    if (prop.name == \"DisplacementLockObjectScale\") {\n        return\n    }\n    if (prop.name == \"DisplacementLockObjectUseLocalSpace\") {\n        return\n    }\n    if (prop.name", "CodeBleu_score": 17.14427218888231}]}
{"instance_id": "20e390481814", "generation_result": [{"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t\tvar rect = EditorGUILayout.GetControlRect();\n\tvar label = EditorGUI.BeginProperty(rect, null, sp);\n\tvar indent = EditorGUI.indentLevel;\n\tEditorGUI.indentLevel = 0;\n\n\t// Draw toggle button\n\tvar toggleRect = new Rect(rect.x, rect.y, 16f, rect.height);\n\tvar toggleValue = EditorGUI.Toggle(toggleRect, showXyz);\n\tif (toggleValue != showXyz) {\n\t\tif (toggleValue) {\n\t\t\tsp.vector3Value = new Vector3(sp.floatValue, sp.floatValue, sp.floatValue);\n\t\t}\n\t\telse {\n\t\t\tsp.floatValue = sp.vector3Value.x;\n\t\t}\n\t}\n\n\t// Draw float or Vector3 field\n\tvar fieldRect = new Rect(rect.x + 18f, rect.y, rect.width - 18f, rect.height);\n\tif (showXyz) {\n\t\tEditorGUI.PropertyField(fieldRect, sp, label);\n\t}\n\telse {\n\t\tvar x = sp.vector3Value.x;\n\t\tvar y = sp.vector3Value.y;\n\t\tvar z = sp.vector3Value.z;\n\t\tif (x == y && x == z) {\n\t\t\tsp.floatValue = EditorGUI.FloatField(fieldRect, label, x);\n\t\t}\n\t\telse {\n\t\t\tEditorGUI.BeginChangeCheck();\n\t\t\tvar v = EditorGUI.Vector3Field(fieldRect, label, sp.vector3Value);\n\t\t\tif (EditorGUI.EndChangeCheck()) {\n\t\t\t\tsp.vector3Value = new Vector3(v.x, v.x, v.x);\n\t\t\t}\n\t\t}\n\t}\n\n\tEditorGUI.indentLevel = indent;\n\tEditorGUI.EndProperty();\n\treturn toggleValue;\n}", "CodeBleu_score": 38.11596944093418}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t\t// Get the x, y, and z values.\n\tvar x = sp.vector3Value.x\n\tvar y = sp.vector3Value.y\n\tvar z = sp.vector3Value.z\n\n\t// Check if the x, y, and z values are approximately equal or have multiple different values.\n\tvar isFloat = Mathf.Approximately(x, y) && Mathf.Approximately(x, z)\n\n\t// If the x, y, and z values are approximately equal or have multiple different values, display the property as a single float.\n\tif (isFloat) {\n\t\tEditorGUILayout.BeginHorizontal()\n\t\tEditorGUILayout.PropertyField(sp, new GUIContent(\"\"))\n\t\tshowXyz = GUILayout.Toggle(showXyz, new GUIContent(\"\", \"Toggle between single float and Vector3 display modes.\"), EditorStyles.miniButton, GUILayout.Width(18))\n\t\tEditorGUILayout.EndHorizontal()\n\t}\n\t// Otherwise, display the property as a Vector3.\n\telse {\n\t\tEditorGUILayout.BeginHorizontal()\n\t\tEditorGUILayout.PropertyField(sp, new GUIContent(\"\"))\n\t\tshowXyz = true\n\t\tEditorGUILayout.EndHorizontal()\n\t}\n\n\t// If the x, y, and z values are approximately equal or have multiple different values, display the property as a single float.\n\tif (isFloat) {\n\t\tif (showXyz) {\n\t\t\tsp.vector3Value = new Vector3(sp.floatValue, sp.floatValue, sp.floatValue)\n\t\t}\n\t}\n\t// Otherwise, display the property as a Vector3.\n\telse {\n\t\tif (showXyz) {\n\t\t\tsp.vector3Value = new Vector3(sp.vector3Value.x, sp.vector3Value.x, sp.vector3Value.x)\n\t\t}\n\t}\n\n\t// Return the showXyz value.\n\treturn showXyz\n}", "CodeBleu_score": 36.54308454656856}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t\tvar x = sp.FindPropertyRelative(\"x\");\n\tvar y = sp.FindPropertyRelative(\"y\");\n\tvar z = sp.FindPropertyRelative(\"z\");\n\tvar isVector3 = !Mathf.Approximately(x.floatValue, y.floatValue) || !Mathf.Approximately(x.floatValue, z.floatValue);\n\tif (showXyz) {\n\t\tEditorGUILayout.BeginHorizontal();\n\t\tEditorGUILayout.PropertyField(x, GUIContent.none, GUILayout.Width(60));\n\t\tEditorGUILayout.PropertyField(y, GUIContent.none, GUILayout.Width(60));\n\t\tEditorGUILayout.PropertyField(z, GUIContent.none, GUILayout.Width(60));\n\t\tEditorGUILayout.EndHorizontal();\n\t}\n\telse {\n\t\tEditorGUILayout.PropertyField(x, GUIContent.none);\n\t}\n\tif (GUILayout.Button(isVector3 ? \"Single\" : \"Vector3\", EditorStyles.miniButton, GUILayout.Width(60))) {\n\t\tisVector3 = !isVector3;\n\t\tif (!isVector3) {\n\t\t\ty.floatValue = x.floatValue;\n\t\t\tz.floatValue = x.floatValue;\n\t\t}\n\t}\n\treturn isVector3;\n}", "CodeBleu_score": 46.220387437773255}]}
{"instance_id": "c3587cbcda7e", "generation_result": [{"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t    for (int i = 0; i < list.Count; i++) {\n        if (list[i].baseMat == baseMat && list[i].texture == texture && list[i].id == id && list[i].props == props) {\n            list[i].count++;\n            return list[i].mat;\n        }\n    }\n\n    MaterialEntry entry = new MaterialEntry();\n    entry.baseMat = baseMat;\n    entry.texture = texture;\n    entry.id = id;\n    entry.props = props;\n    entry.mat = new Material(baseMat);\n    entry.mat.SetTexture(\"_MainTex\", texture);\n    entry.mat.SetFloat(\"_ID\", id);\n    entry.mat.SetFloat(\"_Props\", props);\n    entry.count = 1;\n    list.Add(entry);\n    return entry.mat;\n}", "CodeBleu_score": 34.81023442815666}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\t// Create a new entry if one doesn't already exist\n\tif (list.Count == 0 || list[list.Count - 1].mat == null) {\n\t\tlist.Add(new MaterialEntry());\n\t}\n\t\n\t// Search the list for an existing matching entry\n\tfor (int i = 0; i < list.Count; i++) {\n\t\tif (list[i].mat == baseMat && list[i].tex == texture && list[i].id == id && list[i].props == props) {\n\t\t\tlist[i].count++;\n\t\t\treturn list[i].mat;\n\t\t}\n\t}\n\t\n\t// If no matching entry was found, create a new one\n\tMaterialEntry entry = list[list.Count - 1];\n\tentry.mat = new Material(baseMat);\n\tentry.mat.SetTexture(\"_MainTex\", texture);\n\tentry.mat.SetInt(\"_ID\", id);\n\tentry.mat.SetInt(\"_Props\", props);\n\tentry.count = 1;\n\tentry.mat.name = \"Custom \" + baseMat.name + \" (\" + id + \")\";\n\tentry.tex = texture;\n\tentry.id = id;\n\tentry.props = props;\n\treturn entry.mat;\n}", "CodeBleu_score": 31.85218296898685}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t    Material mat;\n    int i;\n    for (i = 0; i < this.mats.Count; i++) {\n        if (this.mats[i].baseMat == baseMat && this.mats[i].texture == texture && this.mats[i].id == id && this.mats[i].props == props) {\n            this.mats[i].count++;\n            return this.mats[i].mat;\n        }\n    }\n    mat = new Material(baseMat);\n    mat.SetTexture(\"_MainTex\", texture);\n    mat.SetInt(\"_ID\", id);\n    mat.SetInt(\"_Props\", props);\n    this.mats.Add(new MaterialEntry(baseMat, texture, id, props, mat, 1));\n    return mat;\n}", "CodeBleu_score": 31.503749132772242}]}
{"instance_id": "a35149bc8b8b", "generation_result": [{"code": "public static void Remove(Material customMat){\n\t\tif (customMat == null) {\n\t\tDebug.LogError(\"Custom Material is null\");\n\t\treturn;\n\t}\n\n\tfor (int i = 0; i < customMaterials.Count; i++) {\n\t\tif (customMaterials[i].material == customMat) {\n\t\t\tcustomMaterials[i].count--;\n\t\t\tif (customMaterials[i].count <= 0) {\n\t\t\t\tcustomMaterials[i].material.Destroy();\n\t\t\t\tcustomMaterials[i].material = null;\n\t\t\t\tcustomMaterials[i].count = 0;\n\t\t\t\tcustomMaterials.RemoveAt(i);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\n\tDebug.LogError(\"Custom Material not found\");\n}", "CodeBleu_score": 33.01568880539256}, {"code": "public static void Remove(Material customMat){\n\t\tif (customMat == null) {\n\t\treturn;\n\t}\n\t\n\tforeach (var entry in this.entries) {\n\t\tif (entry.material == customMat) {\n\t\t\tentry.count -= 1;\n\t\t\tif (entry.count <= 0) {\n\t\t\t\tDestroy(entry.material);\n\t\t\t\tentry.material = null;\n\t\t\t\tthis.entries.Remove(entry);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n}", "CodeBleu_score": 28.55485007081763}, {"code": "public static void Remove(Material customMat){\n\t\tif (customMat == null) {\n\t\treturn;\n\t}\n\t\n\tfor (int i = 0; i < entries.Count; i++) {\n\t\tif (customMat == entries[i].material) {\n\t\t\tentries[i].count--;\n\t\t\t\n\t\t\tif (entries[i].count <= 0) {\n\t\t\t\tDestroyImmediate(entries[i].material);\n\t\t\t\tentries[i].material = null;\n\t\t\t\tentries[i].shader = null;\n\t\t\t\tentries[i].count = 0;\n\t\t\t\tentries.RemoveAt(i);\n\t\t\t}\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 31.362374620225765}]}
{"instance_id": "892bbee52ab9", "generation_result": [{"code": "private void RefreshParticles(GameObject root){\n\t\t// Get all particle systems\n\tParticleSystem[] particleSystems = root.GetComponentsInChildren<ParticleSystem>(true);\n\t// Remove particle systems that aren't associated with this UIParticle instance\n\tfor (int i = particleSystems.Length - 1; i >= 0; i--) {\n\t\tif (particleSystems[i].GetComponent<UIParticle>() != this) {\n\t\t\tparticleSystems[i].gameObject.SetActive(false);\n\t\t\tparticleSystems[i].Stop();\n\t\t\tparticleSystems[i].Clear();\n\t\t\tparticleSystems[i].gameObject.SetActive(true);\n\t\t}\n\t}\n\t// Remove particle systems that aren't associated with this UIParticle instance\n\tfor (int i = particleSystems.Length - 1; i >= 0; i--) {\n\t\tif (particleSystems[i].GetComponent<UIParticle>() != this) {\n\t\t\tparticleSystems[i].gameObject.SetActive(false);\n\t\t\tparticleSystems[i].Stop();\n\t\t\tparticleSystems[i].Clear();\n\t\t\tparticleSystems[i].gameObject.SetActive(true);\n\t\t}\n\t}\n\t// Adjust texture sheet animation settings if necessary\n\tfor (int i = 0; i < particleSystems.Length; i++) {\n\t\tif (particleSystems[i].main.simulationSpace == ParticleSystemSimulationSpace.World) {\n\t\t\tparticleSystems[i].main.simulationSpace = ParticleSystemSimulationSpace.Local;\n\t\t}\n\t\tif (particleSystems[i].main.playOnAwake) {\n\t\t\tparticleSystems[i].Stop();\n\t\t}\n\t\tif (particleSystems[i].main.loop) {\n\t\t\tparticleSystems[i].Stop();\n\t\t}\n\t\tif (particleSystems[i].main.maxParticles > 0) {\n\t\t\tparticleSystems[i].main.maxParticles = 0;\n\t\t}\n\t\t", "CodeBleu_score": 30.930660745103722}, {"code": "private void RefreshParticles(GameObject root){\n\t\tList<ParticleSystem> particles = new List<ParticleSystem>();\n\tParticleSystem[] systems = root.GetComponentsInChildren<ParticleSystem>(true);\n\tforeach (ParticleSystem system in systems) {\n\t\tif (system.main.simulationSpace == ParticleSystemSimulationSpace.World && system.main.playOnAwake) {\n\t\t\tsystem.Stop();\n\t\t}\n\t\tif (system.main.simulationSpace == ParticleSystemSimulationSpace.World && system.main.playOnAwake) {\n\t\t\tsystem.Stop();\n\t\t}\n\t\tif (system.main.simulationSpace == ParticleSystemSimulationSpace.World && system.main.playOnAwake) {\n\t\t\tsystem.Stop();\n\t\t}\n\t\tif (system.main.simulationSpace == ParticleSystemSimulationSpace.World && system.main.playOnAwake) {\n\t\t\tsystem.Stop();\n\t\t}\n\t\tif (system.main.simulationSpace == ParticleSystemSimulationSpace.World && system.main.playOnAwake) {\n\t\t\tsystem.Stop();\n\t\t}\n\t\tif (system.main.simulationSpace == ParticleSystemSimulationSpace.World && system.main.playOnAwake) {\n\t\t\tsystem.Stop();\n\t\t}\n\t\tif (system.main.simulationSpace == ParticleSystemSimulationSpace.World && system.main.playOnAwake) {\n\t\t\tsystem.Stop();\n\t\t}\n\t\tif (system.main.simulationSpace == ParticleSystemSimulationSpace.World && system.main.playOnAwake) {\n\t\t\tsystem.Stop();\n\t\t}\n\t\tif (system.main.simulationSpace == ParticleSystemSimulationSpace.World && system.main.playOnAwake) {\n\t\t\tsystem.Stop();\n\t\t}\n\t\tif (system.main.simulationSpace == ParticleSystemSimulationSpace.World && system.main.playOnAwake) {\n\t\t\tsystem.Stop();\n\t\t}\n\t\tif (system.main.simulationSpace ==", "CodeBleu_score": 22.95104612149985}, {"code": "private void RefreshParticles(GameObject root){\n\t\t// Get all child particle systems\n\tvar particleSystems = root.GetComponentsInChildren<ParticleSystem>();\n\t\n\t// Remove those not associated with the current UIParticle instance\n\tvar newParticleSystems = new List<ParticleSystem>();\n\tforeach (var particleSystem in particleSystems) {\n\t\tif (particleSystem.GetComponent<UIParticle>() == this) {\n\t\t\tnewParticleSystems.Add(particleSystem);\n\t\t}\n\t}\n\t\n\t// Adjust texture sheet animation settings if necessary\n\tforeach (var particleSystem in newParticleSystems) {\n\t\tvar main = particleSystem.main;\n\t\tif (main.maxParticles > 0) {\n\t\t\tvar sheet = main.textureSheetAnimation;\n\t\t\tif (sheet.enabled) {\n\t\t\t\tvar framesX = sheet.numTilesX;\n\t\t\t\tvar framesY = sheet.numTilesY;\n\t\t\t\tvar frameCount = framesX * framesY;\n\t\t\t\tif (frameCount > main.maxParticles) {\n\t\t\t\t\t// The number of frames exceeds the maximum number of particles\n\t\t\t\t\t// The number of particles is set to the number of frames\n\t\t\t\t\tmain.maxParticles = frameCount;\n\t\t\t\t\t// The number of particles is set to the number of frames\n\t\t\t\t\t// The number of particles is set to the number of frames\n\t\t\t\t\tparticleSystem.Emit(frameCount);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Call RefreshParticles on the updated list of particle systems\n\tRefreshParticles(newParticleSystems);\n}", "CodeBleu_score": 27.668087613554725}]}
{"instance_id": "d6b082e37770", "generation_result": [{"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t\tforeach (var type in GetTypesThatImplementInterface<IColorSwapManager>()) {\n\t\tcontainerBuilder.RegisterType(type).As<IColorSwapManager>().SingleInstance();\n\t}\n}", "CodeBleu_score": 42.78506764314688}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t    containerBuilder.RegisterAssemblyTypes(typeof(IColorSwapManager).Assembly)\n        .Where(t => t.GetInterfaces().Contains(typeof(IColorSwapManager)))\n        .As<IColorSwapManager>()\n        .SingleInstance();\n}", "CodeBleu_score": 44.18979750813442}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t    foreach (var colorSwapManager in GetTypesImplementing<IColorSwapManager>()) {\n        containerBuilder.RegisterType(colorSwapManager).As<IColorSwapManager>().SingleInstance();\n    }\n}", "CodeBleu_score": 43.932904634870695}]}
{"instance_id": "2359d72977a4", "generation_result": [{"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t    // Set the IP address and port\n    this.ipAddress = ipAddress\n    this.port = port\n    // Wait for the serializer to initialize\n    await this.serializer.InitializeAsync()\n    // Initiate a reservation negotiation\n    this.state.InitiateReservationNegotiation()\n}", "CodeBleu_score": 34.213377349888106}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t\tthis.ipAddress = ipAddress\n\tthis.port = port\n\tthis.serializer = new Serializer()\n\tawait this.serializer.InitializeAsync()\n\tthis.connectionState = new ReservationNegotiationState(this)\n\tthis.connectionState.Start()\n}", "CodeBleu_score": 32.560908851241344}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t    this.ipAddress = ipAddress\n    this.port = port\n    this.serializer = new Serializer()\n    await this.serializer.InitializeAsync()\n    this.state = new ReservationNegotiationState(this)\n    this.state.Enter()\n}", "CodeBleu_score": 34.228858425427646}]}
{"instance_id": "151a27d718b1", "generation_result": [{"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t\tif (sessionConnectionState == null) {\n\t\tthrow new ArgumentNullException(nameof(sessionConnectionState));\n\t}\n\n\tif (sessionConnectionState.IsValid(this.ConnectionState)) {\n\t\tif (sessionConnectionState.IsTransitioning(this.ConnectionState)) {\n\t\t\tLog.LogInformation(\"Connection state transition from {0} to {1}\", this.ConnectionState, sessionConnectionState);\n\t\t\tthis.ConnectionState = sessionConnectionState;\n\t\t\tthis.ConnectionStateChanged?.Invoke(this, new ConnectionStateChangedEventArgs(this.ConnectionState));\n\t\t} else {\n\t\t\tLog.LogWarning(\"Cannot transition from {0} to {1}\", this.ConnectionState, sessionConnectionState);\n\t\t}\n\t} else {\n\t\tLog.LogWarning(\"Cannot transition from {0} to {1}\", this.ConnectionState, sessionConnectionState);\n\t}\n}", "CodeBleu_score": 33.486997785120444}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t    if (sessionConnectionState == null) {\n        throw new System.ArgumentNullException(nameof(sessionConnectionState));\n    }\n\n    if (sessionConnectionState == this.sessionConnectionState) {\n        return;\n    }\n\n    if (!sessionConnectionState.IsValidTransition(this.sessionConnectionState)) {\n        throw new System.ArgumentException(\n            \"The new connection state is not a valid transition from the current connection state.\",\n            nameof(sessionConnectionState)\n        );\n    }\n\n    var previousConnectionState = this.sessionConnectionState;\n    this.sessionConnectionState = sessionConnectionState;\n\n    this.logger.LogInformation(\n        \"Connection state transitioned from {PreviousConnectionState} to {CurrentConnectionState}.\",\n        previousConnectionState,\n        this.sessionConnectionState\n    );\n\n    this.OnConnectionStateChanged?.Invoke(this, new MultiplayerSessionConnectionStateChangedEventArgs(previousConnectionState, this.sessionConnectionState));\n\n    if (this.sessionConnectionState == MultiplayerSessionConnectionState.SESSION_RESERVED) {\n        this.logger.LogInformation(\"Player name is {PlayerName}.\", this.playerName);\n    }\n}", "CodeBleu_score": 32.3284131737781}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t\tif (sessionConnectionState == null) {\n\t\tthrow new ArgumentNullException(\"sessionConnectionState\");\n\t}\n\tif (sessionConnectionState == this.ConnectionState) {\n\t\treturn;\n\t}\n\tif (this.ConnectionState != null) {\n\t\tthis.ConnectionState.LeaveState();\n\t}\n\tthis.ConnectionState = sessionConnectionState;\n\tthis.ConnectionState.EnterState();\n\tif (this.ConnectionState is SessionReserved) {\n\t\tthis.Log.Add(new LogEntry(LogEntryType.PlayerName, this.PlayerName));\n\t}\n\tthis.OnConnectionStateChanged();\n}", "CodeBleu_score": 29.92752726601417}]}
{"instance_id": "7f7717307d6a", "generation_result": [{"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t    if (this.client != null) {\n        this.client.Disconnect();\n        this.client.Stop();\n    }\n    this.client = new LiteNetLibClient();\n    this.client.Start();\n    this.client.Connect(ipAddress, serverPort);\n    if (await this.connectionEvent.WaitAsync(2000)) {\n        this.connectionEvent.Reset();\n    }\n}", "CodeBleu_score": 37.35047099459957}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t    this.client = new LiteNetLibClient();\n    this.client.Start();\n    this.client.Connect(ipAddress, serverPort);\n    await Task.Delay(2000);\n    this.client.Disconnect();\n}", "CodeBleu_score": 36.64446092282968}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t    // Initialize the LiteNetLibClient\n    client = new LiteNetLibClient(new LiteNetLibClientConfig {\n        // Set the maximum number of connections to 1\n        MaximumConnections = 1,\n        // Set the default connection timeout to 2000 milliseconds\n        DefaultConnectionTimeout = 2000,\n        // Set the default disconnect timeout to 2000 milliseconds\n        DefaultDisconnectTimeout = 2000\n    });\n\n    // Add a handler for the client's connection event\n    client.ConnectionRequestEvent += OnConnectionRequest;\n\n    // Start the LiteNetLibClient\n    client.Start();\n\n    // Attempt to connect to the server\n    await client.ConnectAsync(ipAddress, serverPort);\n\n    // Wait for the connection event for up to 2000 milliseconds\n    if (await client.WaitForConnectionAsync(2000)) {\n        // Reset the connection event\n        client.ResetConnectionEvent();\n\n        // Send a packet to the server to confirm the connection\n        await client.SendAsync(new NetDataWriter(new byte[0]));\n    } else {\n        // If the connection event was not raised, then the connection attempt failed\n        client.Stop();\n\n        // Display an error message\n        await ErrorModal.Show(\"Connection Failed\", \"Failed to connect to the server.\nPlease check your network connection and try again.\");\n    }\n}", "CodeBleu_score": 36.700122784816344}]}
{"instance_id": "eeb95434f1eb", "generation_result": [{"code": "public void StartFireSuppression(NitroxId id){\n\t    var cyclops = GetCyclops(id)\n    var button = cyclops.GetComponentInChildren<FireSuppressionButton>()\n    if (button == null) {\n        Debug.Log(\"Cyclops has no fire suppression button\")\n        return\n    }\n\n    if (button.isCooldown) {\n        Debug.Log(\"Cyclops is currently on cooldown\")\n        return\n    }\n\n    if (!button.isActive) {\n        Debug.Log(\"Cyclops fire suppression is not active\")\n        return\n    }\n\n    var cooldown = button.cooldown\n    var context = new PacketSuppressorContext(cooldown)\n    StartCoroutine(FireSuppression(button, context))\n}", "CodeBleu_score": 47.636938024311185}, {"code": "public void StartFireSuppression(NitroxId id){\n\t\tvar cyclops = GetCyclops(id)\n\tif (cyclops == null) {\n\t\tthrow new Exception(\"Cyclops not found\")\n\t}\n\tvar button = cyclops.GetComponent<FireSuppressionButton>()\n\tif (button == null) {\n\t\tthrow new Exception(\"Fire suppression button not found\")\n\t}\n\tbutton.StartSuppression()\n}", "CodeBleu_score": 27.845231238721908}, {"code": "public void StartFireSuppression(NitroxId id){\n\t\tvar cyclops = GetCyclops(id);\n\tif (cyclops == null) {\n\t\treturn;\n\t}\n\tvar button = cyclops.GetComponent<CyclopsFireSuppressionButton>();\n\tif (button == null) {\n\t\treturn;\n\t}\n\tbutton.StartFireSuppression();\n}", "CodeBleu_score": 18.734316771676735}]}
{"instance_id": "a23a043559c6", "generation_result": [{"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t\tif (subRoot.ID != this.subRootID) {\n\t\treturn\n\t}\n\tvar repairPacket = new CyclopsDamagePointRepairedPacket()\n\trepairPacket.SubRootID = subRoot.ID\n\trepairPacket.DamagePoint = damagePoint.ToString()\n\trepairPacket.RepairAmount = repairAmount\n\tthis.packetSender.SendPacket(repairPacket)\n}", "CodeBleu_score": 24.315043474359303}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t    if (subRoot.SubRootId != this.SubRootId) {\n        return;\n    }\n\n    var subRootPosition = subRoot.transform.position;\n    var damagePointPosition = damagePoint.transform.position;\n    var distance = Vector3.Distance(subRootPosition, damagePointPosition);\n    var direction = (damagePointPosition - subRootPosition).normalized;\n\n    var packet = new RepairCyclopsDamagePointPacket(this.SubRootId, damagePoint.DamagePointId, distance, direction, repairAmount);\n\n    this.PacketSender.SendPacket(packet);\n}", "CodeBleu_score": 29.25854821598883}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t    if (subRoot.id != this.subRootId) {\n        return\n    }\n\n    var repairPacket = new RepairPacket(\n        subRoot.id,\n        damagePoint.id,\n        repairAmount,\n        this.subRoot.GetCurrentHealth(damagePoint)\n    )\n\n    this.packetSender.SendPacket(repairPacket)\n}", "CodeBleu_score": 26.084422068249168}]}
{"instance_id": "dfb3586de856", "generation_result": [{"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t\tif (subRoot.GetInstanceID() == 0 || subRoot.health.GetHealth() <= 0) {\n\t\treturn\n\t}\n\tvar damageInfoData = new CyclopsDamageInfoData(subRoot.GetInstanceID(), subRoot.health.GetHealth(), info.GetValueOrDefault())\n\tvar activeDamagePoints = subRoot.damagePoints.GetActiveDamagePoints()\n\tvar fireData = subRoot.GetComponent<FireData>()\n\tvar fireDataList = new List<CyclopsFireData>()\n\tif (fireData != null) {\n\t\tfireDataList.Add(new CyclopsFireData(fireData.GetInstanceID(), fireData.GetFireIntensity(), fireData.GetFireSize()))\n\t}\n\tvar damagePacket = new CyclopsDamage(damageInfoData, activeDamagePoints, fireDataList)\n\tvar packet = new CyclopsPacket(damagePacket)\n\tthis.SendPacket(packet)\n}", "CodeBleu_score": 34.538182405214876}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t    if (subRoot.id != null && subRoot.health.currentHealth > 0) {\n        var damageInfo = info.map(x -> new CyclopsDamageInfoData(x.damage, x.damageType)).orElse(null);\n        var damagePoints = subRoot.GetComponentsInChildren<DamagePoint>();\n        var fireData = new List<CyclopsFireData>();\n\n        foreach (var damagePoint in damagePoints) {\n            var fire = damagePoint.GetComponentInChildren<Fire>();\n            if (fire != null) {\n                var fireDataObj = new CyclopsFireData(fire.burnStartTime, fire.burnEndTime, fire.burnStartTemperature, fire.burnEndTemperature, fire.burnStartHealth, fire.burnEndHealth, fire.burnStartOxygen, fire.burnEndOxygen, fire.burnStartWater, fire.burnEndWater);\n                fireData.Add(fireDataObj);\n            }\n        }\n\n        var packet = new CyclopsDamage(subRoot.id, damageInfo, fireData.ToArray());\n        this.SendPacket(packet);\n    }\n}", "CodeBleu_score": 28.092361851105395}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t\tif (subRoot.id == null || subRoot.health <= 0) {\n\t\treturn\n\t}\n\n\tvar damageInfoData = info.HasValue ? new CyclopsDamageInfoData(info.Value) : null\n\tvar damagePoints = subRoot.damagePoints.Where(dp => dp.active).ToList()\n\tvar fireData = subRoot.fireData.Where(fd => fd.active).ToList()\n\n\tvar packet = new CyclopsDamage(subRoot.id, subRoot.health, damageInfoData, damagePoints, fireData)\n\tNitroxClient.Instance.SendPacket(packet)\n}", "CodeBleu_score": 16.832095146102187}]}
{"instance_id": "03223c10109f", "generation_result": [{"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t\tforeach (Entity entity in dirtyEntities) {\n\t\tDestroyEntity(entity);\n\t}\n}", "CodeBleu_score": 30.408746658849207}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t\tfor (int i = 0; i < dirtyEntities.Count; i++) {\n\t\tEntity entity = dirtyEntities[i];\n\t\tif (entity == null) {\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\t// Remove the entity hierarchy\n\t\tEntityHierarchy.Remove(entity);\n\t\t\n\t\t// Attempt to get the associated GameObject\n\t\tGameObject gameObject = EntityHierarchy.GetGameObject(entity);\n\t\t\n\t\t// If the GameObject exists, destroy it\n\t\tif (gameObject != null) {\n\t\t\tGameObject.Destroy(gameObject);\n\t\t}\n\t}\n}", "CodeBleu_score": 32.78939913600695}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t\tforeach (Entity entity in dirtyEntities) {\n\t\tif (entity.Hierarchy != null) {\n\t\t\tforeach (Transform child in entity.Hierarchy) {\n\t\t\t\tGameObject.Destroy(child.gameObject);\n\t\t\t}\n\t\t}\n\t\t\n\t\tGameObject go = GameObject.Find(entity.Name);\n\t\tif (go != null) {\n\t\t\tGameObject.Destroy(go);\n\t\t}\n\t}\n}", "CodeBleu_score": 57.6522637706249}]}
{"instance_id": "990abe8e473e", "generation_result": [{"code": "private void AddPendingParentEntity(Entity entity){\n\t    if (!pendingParentEntities.ContainsKey(entity.ParentId)) {\n        pendingParentEntities.Add(entity.ParentId, new List<Entity>());\n    }\n\n    pendingParentEntities[entity.ParentId].Add(entity);\n}", "CodeBleu_score": 33.747096578029335}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t\tif (!pendingParentEntities.ContainsKey(entity.parentId)) {\n\t\tpendingParentEntities.Add(entity.parentId, new List<Entity>());\n\t}\n\tpendingParentEntities[entity.parentId].Add(entity);\n}", "CodeBleu_score": 30.73144245447245}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t    if (!pendingParentEntities.ContainsKey(entity.parentId)) {\n        pendingParentEntities.Add(entity.parentId, new List<Entity>());\n    }\n    pendingParentEntities[entity.parentId].Add(entity);\n}", "CodeBleu_score": 33.26011242882373}]}
{"instance_id": "a885fbb1f085", "generation_result": [{"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t    if (cooldown == clawArm.pickupCooldown) {\n        clawArm.action = START_USE_TOOL;\n    } else if (cooldown == clawArm.punchCooldown) {\n        clawArm.action = ALT_HIT;\n    } else {\n        Debug.LogError(\"ExosuitClawArm.BroadcastClawUse: cooldown doesn't match punch or pickup cooldowns\");\n    }\n    BroadcastArmAction(clawArm);\n}", "CodeBleu_score": 33.11399555955907}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t    if (clawArm == null) {\n        Debug.LogError(\"Claw arm is null\");\n        return;\n    }\n\n    ExosuitClawArm.ClawToolType toolType = clawArm.GetToolType();\n    if (toolType == ExosuitClawArm.ClawToolType.PICKUP) {\n        if (cooldown == clawArm.GetPickupCooldown()) {\n            BroadcastArmAction(clawArm, ArmAction.START_USE_TOOL);\n            return;\n        }\n    } else if (toolType == ExosuitClawArm.ClawToolType.PUNCH) {\n        if (cooldown == clawArm.GetPunchCooldown()) {\n            BroadcastArmAction(clawArm, ArmAction.ALT_HIT);\n            return;\n        }\n    } else {\n        Debug.LogError(\"Unknown tool type: \" + toolType);\n    }\n\n    Debug.LogError(\"Cooldown does not match pickup or punch cooldown\");\n}", "CodeBleu_score": 44.592047965314784}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t    if (cooldown == clawArm.pickupCooldown) {\n        clawArm.action = START_USE_TOOL;\n    } else if (cooldown == clawArm.punchCooldown) {\n        clawArm.action = ALT_HIT;\n    } else {\n        Debug.LogError(\"Claw arm cooldown didn't match any action.\");\n    }\n    BroadcastArmAction(clawArm);\n}", "CodeBleu_score": 31.45273621854119}]}
{"instance_id": "e390441c8dc2", "generation_result": [{"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t    if (gameObject == null) {\n        return;\n    }\n\n    // Get the IDs of the game object and its parent.\n    int gameObjectId = gameObject.GetComponent<Entity>().GetId();\n    int parentId = parent.GetComponent<Entity>().GetId();\n\n    // Extract metadata for the entity.\n    var entityMetadata = gameObject.GetComponent<EntityMetadata>();\n    if (entityMetadata == null) {\n        return;\n    }\n\n    // Create an InstalledBatteryEntity with the collected information.\n    var batteryEntity = new InstalledBatteryEntity(gameObjectId, parentId, techType, entityMetadata.GetEntityPosition(), entityMetadata.GetEntityRotation());\n\n    // Send an EntitySpawnedByClient packet.\n    var spawnedByClient = new EntitySpawnedByClient(batteryEntity);\n    NetworkManager.Instance.SendPacket(spawnedByClient);\n}", "CodeBleu_score": 39.16665960391336}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t    // Get the IDs of the game object and its parent.\n    int gameObjectID = gameObject.GetComponent<Entity>().entityID;\n    int parentID = parent.GetComponent<Entity>().entityID;\n\n    // Extract metadata for the entity.\n    var metadata = gameObject.GetComponent<Battery>().GetMetadata();\n\n    // Create an InstalledBatteryEntity with the collected information.\n    var entity = new InstalledBatteryEntity(gameObjectID, parentID, techType, metadata);\n\n    // Send an EntitySpawnedByClient packet.\n    var packet = new EntitySpawnedByClient(entity);\n    this.client.SendPacket(packet);\n}", "CodeBleu_score": 29.76042801733927}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t    // Get the IDs of the game object and its parent\n    int gameObjectID = gameObject.GetInstanceID();\n    int parentID = parent.GetInstanceID();\n\n    // Extract metadata for the entity\n    InstalledBatteryEntityMetadata metadata = new InstalledBatteryEntityMetadata(techType);\n\n    // Create an InstalledBatteryEntity with the collected information\n    InstalledBatteryEntity entity = new InstalledBatteryEntity(gameObjectID, parentID, metadata);\n\n    // Send an EntitySpawnedByClient packet\n    EntitySpawnedByClient packet = new EntitySpawnedByClient(entity);\n    Communication.Send(packet);\n}", "CodeBleu_score": 36.14261550914723}]}
{"instance_id": "a87b772a8e5a", "generation_result": [{"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t\t// Set the picking up object to the given game object\n\tPickingUpObject = gameObject;\n\t// Remove any remote control\n\tRemoteControl.RemoveRemoteControl(gameObject);\n\t// Check for a NitroxId\n\tNitroxId nitroxId = gameObject.GetComponent<NitroxId>();\n\tif (nitroxId == null) {\n\t\t// If the object lacks an ID, generate a new one\n\t\tnitroxId = gameObject.AddComponent<NitroxId>();\n\t\tnitroxId.Id = NitroxId.GenerateId();\n\t}\n\t// Stop entity position broadcasting\n\tEntityPositionBroadcaster entityPositionBroadcaster = gameObject.GetComponent<EntityPositionBroadcaster>();\n\tif (entityPositionBroadcaster != null) {\n\t\tentityPositionBroadcaster.enabled = false;\n\t}\n\t// Convert the object to an inventory item\n\tgameObject.GetComponent<Entity>().ConvertToInventoryItem();\n\t// Mark it as spawned\n\tgameObject.GetComponent<Entity>().Spawned = true;\n\t// Log the pickup event\n\tLogger.Log(LogType.Info, \"Picked up \" + techType.ToString() + \" with ID \" + nitroxId.Id.ToString());\n\t// Create a PickupItem packet\n\tPickupItem pickupItem = new PickupItem(nitroxId.Id, techType);\n\t// Send it\n\tSendPacket(pickupItem);\n\t// Reset PickingUpObject to null\n\tPickingUpObject = null;\n}", "CodeBleu_score": 42.659824024664935}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t    if (PickingUpObject == gameObject) {\n        PickingUpObject = null;\n        if (gameObject.GetComponent<RemoteControl>() != null) {\n            Destroy(gameObject.GetComponent<RemoteControl>());\n        }\n        if (gameObject.GetComponent<NitroxId>() == null) {\n            gameObject.AddComponent<NitroxId>();\n        }\n        if (gameObject.GetComponent<NitroxId>().NitroxId == 0) {\n            gameObject.GetComponent<NitroxId>().NitroxId = NitroxIdHelper.GenerateNitroxId();\n        }\n        gameObject.GetComponent<NitroxId>().Spawned = true;\n        NitroxLogHelper.Log(NitroxLogHelper.LogLevel.INFO, \"Picked up \" + gameObject.name + \" with ID \" + gameObject.GetComponent<NitroxId>().NitroxId);\n        var pickupItem = new PickupItem(gameObject.GetComponent<NitroxId>().NitroxId, techType);\n        Broadcasting.StopBroadcasting(gameObject.GetComponent<NitroxId>().NitroxId);\n        gameObject.GetComponent<NitroxId>().EntityType = EntityType.INVENTORY_ITEM;\n        gameObject.GetComponent<NitroxId>().TechType = techType;\n        var packet = new PickupItemPacket(pickupItem);\n        NitroxNetworkManager.SendPacket(packet);\n    }\n}", "CodeBleu_score": 41.83669425759983}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t    this.PickingUpObject = gameObject\n    this.RemoveRemoteControl(gameObject)\n    var nitroxId = gameObject.GetComponent<NitroxId>()\n    if (nitroxId == null) {\n        nitroxId = gameObject.AddComponent<NitroxId>()\n        nitroxId.Id = this.GenerateNitroxId()\n    }\n    var entity = this.Entities.FirstOrDefault(e => e.NitroxId == nitroxId.Id)\n    if (entity != null) {\n        entity.StopBroadcasting()\n        entity.IsSpawned = true\n    }\n    this.LogPickup(gameObject, techType)\n    var pickupItem = new PickupItem()\n    pickupItem.NitroxId = nitroxId.Id\n    pickupItem.TechType = techType\n    pickupItem.Position = gameObject.transform.position\n    pickupItem.Rotation = gameObject.transform.rotation\n    this.Send(pickupItem)\n    this.PickingUpObject = null\n}", "CodeBleu_score": 29.794620597965228}]}
{"instance_id": "b6d1e68114e1", "generation_result": [{"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t\tvar nitroxId = gameObject.GetOrGenerateNitroxId();\n\tvar classId = gameObject.GetClassId();\n\tvar techType = gameObject.GetTechType();\n\tvar metadata = entityMetadataManager.GetEntityMetadata(techType);\n\tvar childEntities = gameObject.GetChildEntities();\n\tvar playerId = GameObject.Find(\"Player\").GetOrGenerateNitroxId();\n\tvar inventoryItemEntity = new InventoryItemEntity(nitroxId, classId, techType, playerId, metadata, childEntities);\n\t\n\tif (techType == TechType.Battery) {\n\t\tinventoryItemEntity.Battery = gameObject.GetComponent<Battery>().charge;\n\t}\n\t\n\treturn inventoryItemEntity;\n}", "CodeBleu_score": 39.13344780663835}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t\tvar nitroxId = gameObject.GetNitroxId();\n\tvar classId = gameObject.GetClassId();\n\tvar techType = gameObject.GetTechType();\n\tvar metadata = entityMetadataManager.GetMetadata(techType);\n\tvar childEntities = gameObject.GetChildEntities(entityMetadataManager);\n\tvar playerId = gameObject.GetPlayerId();\n\tvar inventoryItemEntity = new InventoryItemEntity(nitroxId, classId, techType, metadata, childEntities, playerId);\n\treturn inventoryItemEntity;\n}", "CodeBleu_score": 26.88024662837194}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t\t// Generate or retrieve a NitroxId for the GameObject\n\tNitroxId nitroxId = gameObject.GetOrGenerateNitroxId()\n\t\n\t// Extract the class ID and TechType from the GameObject\n\tClassId classId = ClassId.FromGameObject(gameObject)\n\tTechType techType = TechType.FromGameObject(gameObject)\n\t\n\t// Gather the metadata and child entities from the GameObject\n\tEntityMetadata metadata = entityMetadataManager.GetMetadata(gameObject)\n\tList<Entity> childEntities = gameObject.GetChildEntities()\n\t\n\t// Retrieve the player's ID\n\tNitroxId playerId = Player.main.GetOrGenerateNitroxId()\n\t\n\t// Construct an InventoryItemEntity using this information\n\tInventoryItemEntity inventoryItemEntity = new InventoryItemEntity(nitroxId, playerId, classId, techType, metadata, childEntities)\n\t\n\t// If applicable, populate the entity with battery data\n\tif (techType == TechType.Battery) {\n\t\tBattery battery = gameObject.GetComponent<Battery>()\n\t\tinventoryItemEntity.battery = new BatteryData(battery.capacity, battery.charge, battery.chargeRate, battery.dischargeRate)\n\t}\n\t\n\treturn inventoryItemEntity\n}", "CodeBleu_score": 43.6873406895531}]}
{"instance_id": "e416d51a7af7", "generation_result": [{"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t    this.multiplayerSession = multiplayerSession;\n    this.packetSender = packetSender;\n    this.throttledPacketSender = throttledPacketSender;\n    this.permissions = new PlayerPermissions();\n    this.permissions.SetDefaultPermissions();\n}", "CodeBleu_score": 32.681860956323064}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t    this.multiplayerSession = multiplayerSession;\n    this.packetSender = packetSender;\n    this.throttledPacketSender = throttledPacketSender;\n    this.permissions = new PlayerPermissions();\n    this.permissions.SetDefaultPermissions();\n}", "CodeBleu_score": 32.681860956323064}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t    this.multiplayerSession = multiplayerSession;\n    this.packetSender = packetSender;\n    this.throttledPacketSender = throttledPacketSender;\n    this.playerPermissions = new PlayerPermissions();\n    this.playerPermissions.SetDefaultPermissions();\n}", "CodeBleu_score": 33.41643899183225}]}
{"instance_id": "def56af985df", "generation_result": [{"code": "private GameObject CreateBodyPrototype{\n\t    get {\n        GameObject head = Player.GetComponentInChildren<Head>()?.gameObject;\n        if (head == null) {\n            Debug.LogWarning(\"Could not find head for player \" + Player.name + \". Prototype will not be created.\");\n            return null;\n        }\n        head.GetComponent<MeshRenderer>().shadowCastingMode = ShadowCastingMode.On;\n        GameObject body = Object.Instantiate(Player.GetComponentInChildren<Body>().gameObject, Player.transform);\n        body.name = \"RemotePlayerPrototype\";\n        body.SetActive(false);\n        body.GetComponent<Body>().RemoveAllItemsFromHands();\n        return body;\n    }\n}", "CodeBleu_score": 32.23247409179385}, {"code": "private GameObject CreateBodyPrototype{\n\t    get {\n        // Ensure the player's head is visible.\n        Player.GetComponent<PlayerHead>().SetVisibility(true);\n        // Instantiate a clone of the body prototype.\n        GameObject clone = Object.Instantiate(Player.GetComponent<PlayerBody>().Prototype);\n        // Reset the head's shadow casting mode.\n        Player.GetComponent<PlayerHead>().SetCastShadow(true);\n        // Deactivate and rename the clone.\n        clone.SetActive(false);\n        clone.name = \"RemotePlayerPrototype\";\n        // Remove items held in hand from the clone.\n        clone.GetComponent<PlayerBody>().RemoveHeldItems();\n        // Return the clone.\n        return clone;\n    }\n}", "CodeBleu_score": 27.211018301608657}, {"code": "private GameObject CreateBodyPrototype{\n\t    get {\n        GameObject player = Player.GetComponent<PlayerModel>().playerHead.gameObject;\n        player.SetActive(true);\n        GameObject bodyPrototype = Object.Instantiate(player.transform.parent.gameObject);\n        bodyPrototype.name = \"RemotePlayerPrototype\";\n        bodyPrototype.SetActive(false);\n        bodyPrototype.transform.parent = null;\n        bodyPrototype.transform.position = player.transform.position;\n        bodyPrototype.transform.rotation = player.transform.rotation;\n        bodyPrototype.transform.localScale = player.transform.localScale;\n        bodyPrototype.transform.GetChild(0).GetComponent<MeshRenderer>().shadowCastingMode = ShadowCastingMode.Off;\n        bodyPrototype.transform.GetChild(0).GetComponent<MeshRenderer>().receiveShadows = false;\n        bodyPrototype.transform.GetChild(0).GetComponent<MeshRenderer>().reflectionProbeUsage = ReflectionProbeUsage.Off;\n        bodyPrototype.transform.GetChild(0).GetComponent<MeshRenderer>().motionVectorGenerationMode = MotionVectorGenerationMode.ForceNoMotion;\n        bodyPrototype.transform.GetChild(0).GetComponent<MeshRenderer>().lightProbeUsage = LightProbeUsage.Off;\n        bodyPrototype.transform.GetChild(0).GetComponent<MeshRenderer>().allowOcclusionWhenDynamic = false;\n        bodyPrototype.transform.GetChild(0).GetComponent<MeshRenderer>().useLightProbes = false;\n        bodyPrototype.transform.GetChild(0).GetComponent<MeshRenderer>().probeAnchor = null;\n        bodyPrototype.transform.GetChild(0).GetComponent<MeshRenderer>().shadowCastingMode = ShadowCastingMode.Off;\n        bodyPrototype.transform.GetChild(0).GetComponent<MeshRenderer>().receiveShadows = false;\n        bodyPrototype.transform.GetChild(0).GetComponent<MeshRenderer>().reflectionProbeUsage = ReflectionProbeUsage.Off;\n        bodyPrototype.transform.GetChild(0).Get", "CodeBleu_score": 25.49535149084469}]}
{"instance_id": "e9bd7f669aed", "generation_result": [{"code": "void ICacheable.Save(BinaryWriter bw){\n\t\tbw.Write(this.GetType().FullName)\n\tbw.Write(this.Location)\n\tbw.Write(this.Metadata)\n\tbw.Write(this.Processes)\n\tbw.Write(this.Dependencies.Count)\n\tforeach (var dep in this.Dependencies) {\n\t\tdep.Save(bw)\n\t}\n\tbw.Write(this.Incompatibilities.Count)\n\tforeach (var incompat in this.Incompatibilities) {\n\t\tincompat.Save(bw)\n\t}\n\tbw.Write(this.TargetVersion)\n}", "CodeBleu_score": 25.795544173236706}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\t\tbw.Write(this.GetType().FullName)\n\tbw.Write(this.Location)\n\tbw.Write(this.Metadata)\n\tbw.Write(this.Processes)\n\tbw.Write(this.Dependencies.Count)\n\tforeach (var dependency in this.Dependencies) {\n\t\tdependency.Save(bw)\n\t}\n\tbw.Write(this.Incompatibilities.Count)\n\tforeach (var incompatibility in this.Incompatibilities) {\n\t\tincompatibility.Save(bw)\n\t}\n\tbw.Write(this.TargetVersion)\n}", "CodeBleu_score": 26.827655322048116}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\t    bw.Write(this.GetType().FullName);\n    bw.Write(this.Location);\n    bw.Write(this.Metadata);\n    bw.Write(this.Processes.Count);\n    foreach (var process in this.Processes) {\n        process.Save(bw);\n    }\n    bw.Write(this.Dependencies.Count);\n    foreach (var dependency in this.Dependencies) {\n        dependency.Save(bw);\n    }\n    bw.Write(this.Incompatibilities.Count);\n    foreach (var incompatibility in this.Incompatibilities) {\n        incompatibility.Save(bw);\n    }\n    bw.Write(this.TargetVersion);\n}", "CodeBleu_score": 34.91870459128785}]}
{"instance_id": "a7e51620987d", "generation_result": [{"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t\tType pluginType = pluginAssembly.GetType(pluginInfo.TypeName);\n\tBasePlugin pluginInstance = (BasePlugin)Activator.CreateInstance(pluginType);\n\n\tpluginInstance.Info = pluginInfo;\n\tpluginInstance.Logger = new BepInPluginLogger(pluginInstance, LogLevel);\n\n\tif (pluginInstance is ILogSource logSource)\n\t\tLogSources.Add(logSource);\n\n\tpluginInstance.Load();\n\n\treturn pluginInstance;\n}", "CodeBleu_score": 52.921820829842936}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t\tvar pluginType = pluginAssembly.GetType(pluginInfo.Metadata.GUID + \".Plugin\");\n\tif (pluginType == null) {\n\t\tthrow new Exception(\"Plugin type not found\");\n\t}\n\n\tvar pluginInstance = (BasePlugin)Activator.CreateInstance(pluginType);\n\tpluginInstance.Info = pluginInfo;\n\tpluginInstance.Logger = Logger;\n\tpluginInstance.Config = Config;\n\n\tvar pluginLoadEvent = new PluginLoadEvent(pluginInstance);\n\tEventManager.FireEvent(pluginLoadEvent);\n\n\tif (pluginLoadEvent.PluginInstance == null) {\n\t\tthrow new Exception(\"PluginLoadEvent.PluginInstance is null\");\n\t}\n\n\tpluginInstance.Load();\n\n\treturn pluginLoadEvent.PluginInstance;\n}", "CodeBleu_score": 45.06892086580771}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t    Logger.LogMessage($\"Loading plugin {pluginInfo.Metadata.Name}\");\n\n    var pluginType = pluginAssembly.GetType(pluginInfo.Metadata.TypeName);\n\n    if (pluginType == null) {\n        Logger.LogError($\"Plugin {pluginInfo.Metadata.Name} has no type {pluginInfo.Metadata.TypeName}\");\n        return null;\n    }\n\n    var plugin = (BasePlugin)Activator.CreateInstance(pluginType);\n\n    PluginLoad?.Invoke(plugin);\n\n    plugin.Load();\n\n    return plugin;\n}", "CodeBleu_score": 51.26752074441634}]}
{"instance_id": "0925dc086c01", "generation_result": [{"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t    if (TrampolineMethod == null) {\n        Prepare(signature);\n        TrampolineMethod = CreateTrampoline(TrampolinePtr, signature);\n    }\n    return TrampolineMethod;\n}", "CodeBleu_score": 60.7971838827148}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t    if (TrampolineMethod == null) {\n        Prepare();\n        if (TrampolineMethod == null) {\n            if (signature == null)\n                signature = Method;\n            TrampolineMethod = GenerateTrampoline(signature, TrampolinePtr);\n        }\n    }\n    return TrampolineMethod;\n}", "CodeBleu_score": 57.86597766685782}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t\tif (TrampolineMethod != null)\n\t\treturn TrampolineMethod;\n\n\tPrepare();\n\n\tif (TrampolineMethod != null)\n\t\treturn TrampolineMethod;\n\n\t// Generate a native proxy\n\tTrampolineMethod = GenerateTrampoline(TrampolinePtr, signature);\n\n\treturn TrampolineMethod;\n}", "CodeBleu_score": 47.963923245317}]}
{"instance_id": "cfab5c23610e", "generation_result": [{"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t    string resourceName = $\"{typeof(Localization).Namespace}.{code}.json\";\n    using (Stream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(resourceName)) {\n        if (stream == null) {\n            throw new NullReferenceException($\"Language file {code}.json not found.\");\n        }\n        using (StreamReader reader = new StreamReader(stream)) {\n            string json = reader.ReadToEnd();\n            return JsonSerializer.Deserialize<Dictionary<string, string>>(json);\n        }\n    }\n}", "CodeBleu_score": 24.213397096761224}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t    var assembly = Assembly.GetExecutingAssembly();\n    var resourceName = $\"{assembly.GetName().Name}.Languages.{code}.json\";\n\n    using var stream = assembly.GetManifestResourceStream(resourceName);\n    if (stream is null) {\n        throw new NullReferenceException($\"Language file not found: {resourceName}\");\n    }\n\n    using var reader = new StreamReader(stream);\n    var json = reader.ReadToEnd();\n\n    try {\n        return JsonSerializer.Deserialize<Dictionary<string, string>>(json);\n    } catch (JsonException e) {\n        throw new JsonException($\"Error deserializing language file: {resourceName}\", e);\n    }\n}", "CodeBleu_score": 42.2224416040261}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t    var assembly = Assembly.GetExecutingAssembly();\n    var resourceName = $\"{assembly.GetName().Name}.Languages.{code}.json\";\n\n    using (Stream stream = assembly.GetManifestResourceStream(resourceName))\n    using (StreamReader reader = new StreamReader(stream))\n    {\n        string result = reader.ReadToEnd();\n        return JsonSerializer.Deserialize<Dictionary<string, string>>(result);\n    }\n}", "CodeBleu_score": 17.359221586269474}]}
{"instance_id": "9978bd31d199", "generation_result": [{"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t  int count = 0;\n  foreach (IParseTree node in nodes) {\n    if (node is ParserRuleContext) {\n      Visit(node);\n      count++;\n    }\n  }\n  return count;\n}", "CodeBleu_score": 35.00208265404449}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t    int expressionCount = 0;\n    foreach (IParseTree node in nodes) {\n        if (node is ParserRuleContext) {\n            GenerateCodeForExpressionsInFormattedText(node, ref expressionCount);\n        }\n    }\n    return expressionCount;\n}", "CodeBleu_score": 49.34440741068726}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t    int expressionCount = 0;\n    foreach (IParseTree node in nodes) {\n        if (node is ParserRuleContext) {\n            Visit(node);\n            expressionCount++;\n        }\n    }\n    return expressionCount;\n}", "CodeBleu_score": 46.7074188281185}]}
{"instance_id": "8f9bf9ee575a", "generation_result": [{"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t\n    // The line ID is the first token in the line\n    var lineID = context.STRING().GetText();\n\n    // If the line ID is empty, throw an exception\n    if (lineID == \"\")\n    {\n        throw new InvalidOperationException($\"Line {context.GetText()} has no line ID.\");\n    }\n\n    // Remove the quotes from the line ID\n    lineID = lineID.Substring(1, lineID.Length - 2);\n\n    // Emit a RunLine opcode, with the line ID and the number of expressions\n    // in the line\n    EmitOpcode(\"RunLine\", lineID, context.formatted_text().expression().Length);\n\n    // Visit the formatted text\n    Visit(context.formatted_text());\n\n    // Return success\n    return 0;\n}", "CodeBleu_score": 29.349970071599063}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t    // First, we'll check if the line statement has a line ID.\n    // If it does, we'll get the line ID from the context.\n    // If it doesn't, we'll use an empty string.\n    string lineID = context.lineID() == null ? \"\" : context.lineID().GetText();\n\n    // Next, we'll get the text of the line.\n    // We'll use the text of the line, not the text of the line ID, because\n    // the line ID can be empty.\n    string lineText = context.lineText().GetText();\n\n    // Next, we'll count the number of expressions in the line.\n    int expressionCount = context.expression().Length;\n\n    // Next, we'll emit a RunLine opcode with the line ID and the expression count.\n    // We'll use the line ID as the first operand, and the expression count as the second.\n    // We'll also use the line text as the third operand, because we need to store it\n    // in the compiled script.\n    EmitOpcode(\"RunLine\", lineID, expressionCount, lineText);\n\n    // Next, we'll process any expressions in the line.\n    // We'll use the VisitExpression method to do this.\n    for (int i = 0; i < expressionCount; i++)\n    {\n        Visit(context.expression(i));\n    }\n\n    // Finally, we'll return the number of expressions in the line.\n    // This is useful if the caller wants to know how many expressions are in the line.\n    return expressionCount;\n}", "CodeBleu_score": 44.429380371924225}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t\n\t// Check if this line statement has a line ID tag. If it does,\n\t// store it in a variable.\n\tstring lineID = null;\n\tif (context.lineID() != null) {\n\t\tlineID = context.lineID().GetText();\n\t}\n\n\t// We're going to need to know how many expressions there are in\n\t// this line statement.\n\tint expressionCount = 0;\n\n\t// Iterate over all of the expressions in the line statement.\n\tforeach (var expression in context.expression()) {\n\n\t\t// Increment the expression count.\n\t\texpressionCount++;\n\n\t\t// Emit code for the expression.\n\t\tVisit(expression);\n\n\t}\n\n\t// Emit code for the formatted text.\n\tVisit(context.formatted_text());\n\n\t// Emit a RunLine opcode, which will contain the line ID and\n\t// expression count.\n\tEmitOpcode(OpCode.RunLine, lineID, expressionCount);\n\n\treturn 0;\n}", "CodeBleu_score": 45.16470612405425}]}
{"instance_id": "b70d033fed9c", "generation_result": [{"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t    var commands = yarnFile.Commands.Select(command => command.Name);\n    var knownCommands = yarnFile.KnownCommands.Select(command => command.Name);\n    var unknownCommands = commands.Except(knownCommands);\n\n    foreach (var command in unknownCommands) {\n        var diagnostic = new Diagnostic {\n            Severity = DiagnosticSeverity.Warning,\n            Code = \"Yarn0001\",\n            Message = $\"Unknown command: {command}\",\n            Source = \"Yarn\",\n            Range = new Range {\n                Start = new Position {\n                    Line = yarnFile.Commands.First(command => command.Name == command).Line,\n                    Character = 0\n                },\n                End = new Position {\n                    Line = yarnFile.Commands.First(command => command.Name == command).Line,\n                    Character = 0\n                }\n            }\n        };\n\n        diagnostic.Data = new JObject {\n            { \"Command\", command }\n        };\n\n        yield return diagnostic;\n    }\n}", "CodeBleu_score": 27.0766375869541}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t\tvar commandNames = yarnFile.Commands.Select(c => c.Name);\n\n\tvar diagnostics = new List<Diagnostic>();\n\n\tforeach (var commandReference in yarnFile.CommandReferences) {\n\t\tif (commandNames.Contains(commandReference.CommandName)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tvar diagnostic = new Diagnostic {\n\t\t\tSeverity = DiagnosticSeverity.Warning,\n\t\t\tCode = \"UNKNOWN_COMMAND\",\n\t\t\tMessage = $\"Unknown command: {commandReference.CommandName}\",\n\t\t\tRange = new Range(\n\t\t\t\tnew Position(commandReference.Range.Start.Line, commandReference.Range.Start.Column),\n\t\t\t\tnew Position(commandReference.Range.End.Line, commandReference.Range.End.Column)\n\t\t\t),\n\t\t\tSource = \"Yarn\",\n\t\t\tData = new Dictionary<string, object> {\n\t\t\t\t[\"commandName\"] = commandReference.CommandName,\n\t\t\t},\n\t\t};\n\n\t\tdiagnostics.Add(diagnostic);\n\t}\n\n\treturn diagnostics;\n}", "CodeBleu_score": 30.80461546113358}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t\tvar commands = yarnFile.Nodes.SelectMany(node => node.Body.SelectMany(line => line.Commands)).Select(command => command.Text).Distinct();\n\tvar knownCommands = yarnFile.Commands.Select(command => command.Name).Distinct();\n\tvar unknownCommands = commands.Except(knownCommands);\n\n\tforeach (var command in unknownCommands) {\n\t\tvar range = yarnFile.Nodes.SelectMany(node => node.Body).SelectMany(line => line.Commands).Where(command => command.Text == command).Select(command => command.Range).First();\n\t\tvar diagnostic = new Diagnostic {\n\t\t\tMessage = $\"Unknown command: '{command}'\",\n\t\t\tRange = range,\n\t\t\tSeverity = DiagnosticSeverity.Warning,\n\t\t\tCode = new DiagnosticCode(\"yarn-error-unknown-command\"),\n\t\t\tSource = \"Yarn Spinner\",\n\t\t};\n\n\t\tyield return diagnostic;\n\t}\n}", "CodeBleu_score": 25.306084523862864}]}
{"instance_id": "9a072876f358", "generation_result": [{"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t    return new CodeActionRegistrationOptions {\n        DocumentSelector = YarnDocumentSelector,\n        ResolveProvider = false,\n        CodeActionKinds = new [] {\n            CodeActionKind.QuickFix\n        }\n    };\n}", "CodeBleu_score": 56.753863218477306}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t\treturn new CodeActionRegistrationOptions {\n\t\tResolveProvider = false,\n\t\tDocumentSelector = YarnDocumentSelector,\n\t\tCodeActionKinds = new Container<CodeActionKind>(CodeActionKind.QuickFix)\n\t};\n}", "CodeBleu_score": 58.51061213090802}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t  return new CodeActionRegistrationOptions {\n    DocumentSelector = YarnDocumentSelector,\n    ResolveProvider = false,\n    CodeActionKinds = new Container<CodeActionKind>(CodeActionKind.QuickFix),\n  };\n}", "CodeBleu_score": 72.95853100694055}]}
{"instance_id": "7b61df32aee3", "generation_result": [{"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t\tresult = default(T);\n\tif (this.ContainsKey(variableName)) {\n\t\tif (this[variableName] is T) {\n\t\t\tresult = (T)this[variableName];\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthrow new ArgumentException(\"Variable \" + variableName + \" is not of type \" + typeof(T).Name + \".\");\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 38.356175874971186}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t  if (this.ContainsKey(variableName)) {\n    if (this[variableName] is T) {\n      result = (T) this[variableName];\n      return true;\n    } else {\n      throw new ArgumentException(\n        \"The variable \\\"\" + variableName + \"\\\" is not of type \" + typeof(T).Name + \".\");\n    }\n  } else {\n    result = default(T);\n    return false;\n  }\n}", "CodeBleu_score": 46.548262368247414}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "CodeBleu_score": 6.712467208693234}]}
{"instance_id": "7201488347ef", "generation_result": [{"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t    library = new Yarn.Library();\n    virtualMachine = new Yarn.VirtualMachine(library);\n    virtualMachine.SetVariableStorage(variableStorage);\n    Yarn.StandardLibrary.Load(library);\n    virtualMachine.RegisterFunction(\"visit_node\", VisitNode);\n    virtualMachine.RegisterFunction(\"visit_line\", VisitLine);\n    lineParser = new Yarn.LineParser();\n    lineParser.RegisterMarkerProcessor(new Yarn.Pluraliser(lineParser));\n    lineParser.RegisterMarkerProcessor(new Yarn.Select(lineParser));\n    lineParser.RegisterMarkerProcessor(new Yarn.Ordinal(lineParser));\n}", "CodeBleu_score": 32.39674832101849}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t    this.variableStorage = variableStorage;\n\n    library = new Library();\n    virtualMachine = new VirtualMachine(variableStorage);\n\n    // Import the standard library\n    library.Import(new StandardLibrary());\n\n    // Register a function that tracks when a line is visited\n    library.RegisterFunction(\"lineVisited\", (Func<Value, Value>)HandleLineVisited);\n\n    // Register a function that tracks when a node is visited\n    library.RegisterFunction(\"nodeVisited\", (Func<Value, Value>)HandleNodeVisited);\n\n    // Register a function that tracks when a node is completed\n    library.RegisterFunction(\"nodeComplete\", (Func<Value, Value>)HandleNodeComplete);\n\n    // Register a function that tracks when a node is started\n    library.RegisterFunction(\"nodeStart\", (Func<Value, Value>)HandleNodeStart);\n\n    // Register a function that tracks when a node is stopped\n    library.RegisterFunction(\"nodeStop\", (Func<Value, Value>)HandleNodeStop);\n\n    // Register a function that tracks when a node is chosen\n    library.RegisterFunction(\"nodeChoose\", (Func<Value, Value>)HandleNodeChoose);\n\n    // Register a function that tracks when a node is un-chosen\n    library.RegisterFunction(\"nodeUnchoose\", (Func<Value, Value>)HandleNodeUnchoose);\n\n    // Register a function that tracks when a node is option selected\n    library.RegisterFunction(\"optionChosen\", (Func<Value, Value>)HandleOptionChosen);\n\n    // Register a function that tracks when a node is option un-selected\n    library.RegisterFunction(\"optionUnchosen\", (Func<Value, Value>)HandleOptionUnchosen);\n\n    // Register a function that tracks when a node is option selected\n    library.RegisterFunction(\"commandIssued\", (Func<Value, Value>)HandleCommandIssued);\n\n    // Register a function that tracks when a node is option un-selected\n    library.RegisterFunction(\"commandCancelled\", (Func<Value, Value>)HandleCommandCancelled);\n\n    // Register a function that tracks when a node is option selected\n    library.RegisterFunction(\"dialogueStart\", (Func<Value, Value>)HandleDialogueStart);\n\n    // Register a function that tracks when a", "CodeBleu_score": 27.365100869604458}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t\t\tthis.library = new Library();\n\t\tthis.virtualMachine = new VirtualMachine(variableStorage);\n\t\t\n\t\t// Import the standard library\n\t\tthis.library.Import(StandardLibrary.Library);\n\t\t\n\t\t// Register a function that tracks when a node is visited\n\t\tthis.virtualMachine.RegisterFunction(\"visit\", (Action<string>)this.VisitNode);\n\t\t\n\t\t// Create a line parser\n\t\tthis.lineParser = new LineParser();\n\t\t\n\t\t// Register marker processors for select, plural, and ordinal markers\n\t\tthis.lineParser.RegisterMarkerProcessor(new SelectMarkerProcessor());\n\t\tthis.lineParser.RegisterMarkerProcessor(new PluralMarkerProcessor());\n\t\tthis.lineParser.RegisterMarkerProcessor(new OrdinalMarkerProcessor());\n\t}", "CodeBleu_score": 28.3411221712909}]}
{"instance_id": "59b7b5a9c34a", "generation_result": [{"code": "public int FindUniqueID(string UniqueID){\n\t\tif (string.IsNullOrEmpty(UniqueID)) {\n\t\treturn -1;\n\t}\n\t\n\tfor (int i = 0; i < this.Count; i++) {\n\t\tif (this[i].UniqueID == UniqueID) {\n\t\t\treturn i;\n\t\t}\n\t}\n\t\n\treturn -1;\n}", "CodeBleu_score": 60.80241806661129}, {"code": "public int FindUniqueID(string UniqueID){\n\t\tif (UniqueID == null || UniqueID.Length == 0) {\n\t\treturn -1;\n\t}\n\tfor (int i = 0; i < this.LoopListBankData.Count; i++) {\n\t\tif (this.LoopListBankData[i].UniqueID == UniqueID) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}", "CodeBleu_score": 58.13259690797591}, {"code": "public int FindUniqueID(string UniqueID){\n\t\tint i = 0;\n\tfor (i = 0; i < LoopListBankData.Count; i++) {\n\t\tif (LoopListBankData[i].UniqueID == UniqueID) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}", "CodeBleu_score": 54.586925959590715}]}
{"instance_id": "2b85606238aa", "generation_result": [{"code": "public void AddContent(object newContent){\n\t    LoopListBankData newLoopListBankData = new LoopListBankData();\n    newLoopListBankData.content = newContent;\n    newLoopListBankData.id = GetNextID();\n    m_LoopListBankDataList.Add(newLoopListBankData);\n}", "CodeBleu_score": 39.788273728523755}, {"code": "public void AddContent(object newContent){\n\t\t// Create a new LoopListBankData object\n\tLoopListBankData newLoopListBankData = new LoopListBankData();\n\t// Assign the provided content to it\n\tnewLoopListBankData.content = newContent;\n\t// Generate a unique ID for it\n\tnewLoopListBankData.id = GetUniqueID();\n\t// Add it to the m_LoopListBankDataList\n\tm_LoopListBankDataList.Add(newLoopListBankData);\n}", "CodeBleu_score": 38.2134942317583}, {"code": "public void AddContent(object newContent){\n\t\t// Create a new LoopListBankData object.\n\tLoopListBankData newLoopListBankData = new LoopListBankData();\n\t// Assign the provided content to it.\n\tnewLoopListBankData.content = newContent;\n\t// Generate a unique ID for it.\n\tnewLoopListBankData.ID = GenerateUniqueID();\n\t// Add the new LoopListBankData to the m_LoopListBankDataList.\n\tm_LoopListBankDataList.Add(newLoopListBankData);\n}", "CodeBleu_score": 38.42074722971595}]}
{"instance_id": "34e593106991", "generation_result": [{"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t  // Assign the index and content to the cell\n  m_IndexID = idx;\n  m_Content = content;\n  // Update the GameObject's name to include the prefab name and index\n  if (m_IsUpdateGameObjectName) {\n    // Get the prefab name\n    string prefabName = this.name;\n    // Remove the (Clone) from the end of the prefab name\n    prefabName = prefabName.Replace(\"(Clone)\", \"\");\n    // Update the GameObject's name to include the prefab name and index\n    this.name = prefabName + \" \" + m_IndexID;\n  }\n  // If the cell has a ClickEvent, assign the unique ID and object to it\n  if (m_ClickEvent != null) {\n    m_ClickEvent.UniqueID = ClickUniqueID;\n    m_ClickEvent.Object = ClickObject;\n  }\n}", "CodeBleu_score": 54.8293160768045}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t\tm_IndexID = idx;\n\tm_Content = content;\n\tif (m_IsUpdateGameObjectName) {\n\t\tthis.gameObject.name = string.Format(\"{0}_{1}\", m_PrefabName, m_IndexID);\n\t}\n\tif (m_IsUpdateClickUniqueID) {\n\t\tm_ClickUniqueID = ClickUniqueID;\n\t}\n\tif (m_IsUpdateClickObject) {\n\t\tm_ClickObject = ClickObject;\n\t}\n}", "CodeBleu_score": 55.13458690477254}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t\tm_IndexID = idx;\n\tm_Content = content;\n\tm_ClickUniqueID = ClickUniqueID;\n\tm_ClickObject = ClickObject;\n\tif (m_IsUpdateGameObjectName) {\n\t\tgameObject.name = m_PrefabName + \" \" + idx;\n\t}\n}", "CodeBleu_score": 52.01300582534672}]}
{"instance_id": "6b6a6cc329cc", "generation_result": [{"code": "private void OnButtonAddDataClickk(){\n\t    // Get the input field text as a number\n    int count = int.Parse(inputField.text);\n\n    // Ensure at least one item is added\n    if (count < 1) {\n        count = 1;\n    }\n\n    // Add the new items to the list bank\n    for (int i = 0; i < count; i++) {\n        listBank.Add(Random.Range(0, 10));\n    }\n\n    // Update the total count of the scroll rect\n    scrollRect.SetTotalCount(listBank.Count);\n\n    // Refresh the displayed cells\n    scrollRect.RefreshCells();\n}", "CodeBleu_score": 31.695380971078375}, {"code": "private void OnButtonAddDataClickk(){\n\t    int numItemsToAdd = 0;\n    if (int.TryParse(this.InputFieldAddData.text, out numItemsToAdd)) {\n        if (numItemsToAdd < 1) {\n            numItemsToAdd = 1;\n        }\n        for (int i = 0; i < numItemsToAdd; i++) {\n            this.listBank.Add(UnityEngine.Random.Range(0, 10));\n        }\n        this.ScrollRect.content.SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical, this.listBank.Count * this.cellHeight);\n        this.ScrollRect.OnScroll(null);\n    }\n}", "CodeBleu_score": 36.58867025505905}, {"code": "private void OnButtonAddDataClickk(){\n\t    // Get the text from the input field and parse it to an integer\n    int itemsToAdd = int.Parse(InputField.text);\n\n    // Ensure at least one item is added\n    if (itemsToAdd < 1) {\n        itemsToAdd = 1;\n    }\n\n    // Add the items to the list bank\n    for (int i = 0; i < itemsToAdd; i++) {\n        listBank.Add(Random.Range(0, 11));\n    }\n\n    // Update the total count of the scroll rect\n    scrollRect.SetTotalCount(listBank.Count);\n\n    // Refresh the displayed cells\n    scrollRect.RefreshCells();\n}", "CodeBleu_score": 31.915496989727423}]}
{"instance_id": "209961c9eb8e", "generation_result": [{"code": "protected override void ClearTempPool(){\n\t    // If there are items marked for deletion at the start, return them to the prefab source and reset the start index.\n    if (m_StartIndex > 0) {\n        // Return the items to the prefab source.\n        for (int i = 0; i < m_StartIndex; i++) {\n            // Return the item to the prefab source.\n            m_Content.ReturnInstance(m_TempItemList[i]);\n        }\n        // Reset the start index.\n        m_StartIndex = 0;\n    }\n    // If there are items marked for deletion at the end, return them to the prefab source and reset the end index.\n    if (m_EndIndex < m_TempItemList.Count) {\n        // Return the items to the prefab source.\n        for (int i = m_EndIndex; i < m_TempItemList.Count; i++) {\n            // Return the item to the prefab source.\n            m_Content.ReturnInstance(m_TempItemList[i]);\n        }\n        // Reset the end index.\n        m_EndIndex = m_TempItemList.Count;\n    }\n    // Verify that the content has the expected number of child elements.\n    if (m_TempItemList.Count != m_Content.childCount) {\n        Debug.LogError(\"Content has an unexpected number of child elements.\");\n    }\n}", "CodeBleu_score": 49.70461248695538}, {"code": "protected override void ClearTempPool(){\n\t\t// If there are items marked for deletion at the start, return them to the prefab source and reset the start index.\n\tif (startIndex != 0) {\n\t\t// If there are items marked for deletion at the start, return them to the prefab source and reset the start index.\n\t\tfor (int i = 0; i < startIndex; i++) {\n\t\t\t// If there are items marked for deletion at the start, return them to the prefab source and reset the start index.\n\t\t\tTransform child = content.GetChild(i);\n\t\t\t// If there are items marked for deletion at the start, return them to the prefab source and reset the start index.\n\t\t\tif (child.gameObject.activeSelf) {\n\t\t\t\t// If there are items marked for deletion at the start, return them to the prefab source and reset the start index.\n\t\t\t\tchild.gameObject.SetActive(false);\n\t\t\t\t// If there are items marked for deletion at the start, return them to the prefab source and reset the start index.\n\t\t\t\tchild.SetParent(prefabSource, false);\n\t\t\t}\n\t\t}\n\t\t// If there are items marked for deletion at the start, return them to the prefab source and reset the start index.\n\t\tstartIndex = 0;\n\t}\n\t// If there are items marked for deletion at the end, return them to the prefab source and reset the end index.\n\tif (endIndex != items.Count) {\n\t\t// If there are items marked for deletion at the end, return them to the prefab source and reset the end index.\n\t\tfor (int i = content.childCount - 1; i >= endIndex; i--) {\n\t\t\t// If there are items marked for deletion at the end, return them to the prefab source and reset the end index.\n\t\t\tTransform child = content.GetChild(i);\n\t\t\t// If there are items marked for deletion at the end, return them to the prefab source and reset the end index.\n\t\t\tif (child.gameObject.activeSelf) {\n\t\t\t\t// If there are items", "CodeBleu_score": 42.047913711335774}, {"code": "protected override void ClearTempPool(){\n\t  // Verify that the content has the expected number of child elements.\n  if (content.childCount != expectedChildCount) {\n    Debug.LogError(\"Content has \" + content.childCount + \" child elements but expected \" + expectedChildCount + \".\");\n    return;\n  }\n\n  // If there are items marked for deletion at the start, return them to the prefab source and reset the start index.\n  if (startIndex > 0) {\n    for (int i = 0; i < startIndex; i++) {\n      // Return the item to the prefab source.\n      content.GetChild(i).gameObject.SetActive(false);\n\n      // Reset the start index.\n      startIndex = 0;\n    }\n  }\n\n  // If there are items marked for deletion at the end, return them to the prefab source and reset the end index.\n  if (endIndex < expectedChildCount) {\n    for (int i = content.childCount - 1; i >= endIndex; i--) {\n      // Return the item to the prefab source.\n      content.GetChild(i).gameObject.SetActive(false);\n\n      // Reset the end index.\n      endIndex = expectedChildCount;\n    }\n  }\n}", "CodeBleu_score": 44.1909232041815}]}
{"instance_id": "c6bb290de2b3", "generation_result": [{"code": "public void AnticipateScale(Vector3 newScale){\n\t\tif (network.isActive && network.isListening) {\n\t\tlocalScale = newScale;\n\t\tanticipatedScale = newScale;\n\t\tif (allowed) {\n\t\t\ttransform.localScale = newScale;\n\t\t}\n\t\tanticipatedTime = Time.time;\n\t\tanticipatedCount = 0;\n\t\tsmoothDuration = 0;\n\t\tsmoothTime = 0;\n\t}\n}", "CodeBleu_score": 26.229162961481816}, {"code": "public void AnticipateScale(Vector3 newScale){\n\t    if (Networking.NetworkManager.Singleton.IsListening) {\n        localScale = newScale;\n        anticipatedScale = newScale;\n        if (Networking.LocalPlayer.IsOwner(gameObject)) {\n            scale = newScale;\n        }\n        RecordAnticipatedTransform();\n        ResetSmoothTime();\n    }\n}", "CodeBleu_score": 26.290919161199106}, {"code": "public void AnticipateScale(Vector3 newScale){\n\t\tif (Networking.IsListening()) {\n\t\tlocalScale = newScale;\n\t\tanticipatedScale = newScale;\n\t\tif (allowAuthoritative) {\n\t\t\tauthoritativeScale = newScale;\n\t\t}\n\t\trecordedScale = newScale;\n\t\tanticipationCounter = 0;\n\t\tanticipationTime = 0f;\n\t\tsmoothTime = 0f;\n\t}\n}", "CodeBleu_score": 18.846333700946573}]}
{"instance_id": "d67d3c80dd00", "generation_result": [{"code": "private void FlushMessages(){\n\t\t//Debug.Log(\"FlushMessages\");\n\t// If there are any animation updates, send them through the network animator.\n\tif (m_AnimationUpdates.Count > 0) {\n\t\t//Debug.Log(\"FlushMessages: m_AnimationUpdates.Count > 0\");\n\t\t// Send the updates.\n\t\tm_NetworkAnimator.SendAnimations(m_AnimationUpdates);\n\t\t// Clear the list of updates.\n\t\tm_AnimationUpdates.Clear();\n\t}\n\n\t// If there are any parameter updates, send them through the network animator.\n\tif (m_ParameterUpdates.Count > 0) {\n\t\t//Debug.Log(\"FlushMessages: m_ParameterUpdates.Count > 0\");\n\t\t// Send the updates.\n\t\tm_NetworkAnimator.SendParameters(m_ParameterUpdates);\n\t\t// Clear the list of updates.\n\t\tm_ParameterUpdates.Clear();\n\t}\n\n\t// If there are any trigger updates, send them through the network animator.\n\tif (m_TriggerUpdates.Count > 0) {\n\t\t//Debug.Log(\"FlushMessages: m_TriggerUpdates.Count > 0\");\n\t\t// Send the updates.\n\t\tm_NetworkAnimator.SendTriggers(m_TriggerUpdates);\n\t\t// Clear the list of updates.\n\t\tm_TriggerUpdates.Clear();\n\t}\n}", "CodeBleu_score": 24.677753672930674}, {"code": "private void FlushMessages(){\n\t\n    // Send accumulated animation updates\n    for (int i = 0; i < animationUpdates.Count; i++) {\n        // Send animation update\n        if (animationUpdates[i].isClient) {\n            // Send to client\n            clientRpcSendAnimationUpdate(animationUpdates[i].stateNameHash, animationUpdates[i].normalizedTime, animationUpdates[i].normalizedSpeed);\n        } else {\n            // Send to server\n            serverRpcSendAnimationUpdate(animationUpdates[i].stateNameHash, animationUpdates[i].normalizedTime, animationUpdates[i].normalizedSpeed);\n        }\n    }\n    animationUpdates.Clear();\n\n    // Send accumulated parameter updates\n    for (int i = 0; i < parameterUpdates.Count; i++) {\n        // Send parameter update\n        if (parameterUpdates[i].isClient) {\n            // Send to client\n            clientRpcSendParameterUpdate(parameterUpdates[i].nameHash, parameterUpdates[i].value);\n        } else {\n            // Send to server\n            serverRpcSendParameterUpdate(parameterUpdates[i].nameHash, parameterUpdates[i].value);\n        }\n    }\n    parameterUpdates.Clear();\n\n    // Send accumulated trigger updates\n    for (int i = 0; i < triggerUpdates.Count; i++) {\n        // Send trigger update\n        if (triggerUpdates[i].isClient) {\n            // Send to client\n            clientRpcSendTriggerUpdate(triggerUpdates[i].nameHash);\n        } else {\n            // Send to server\n            serverRpcSendTriggerUpdate(triggerUpdates[i].nameHash);\n        }\n    }\n    triggerUpdates.Clear();\n}", "CodeBleu_score": 40.816411591099886}, {"code": "private void FlushMessages(){\n\t    // Iterate through the list of animation updates and send them\n    for (int i = 0; i < animationUpdates.Count; i++) {\n        if (isServer) {\n            SendAnimationUpdateToClients(animationUpdates[i]);\n        } else {\n            SendAnimationUpdateToServer(animationUpdates[i]);\n        }\n    }\n    // Iterate through the list of parameter updates and send them\n    for (int i = 0; i < parameterUpdates.Count; i++) {\n        if (isServer) {\n            SendParameterUpdateToClients(parameterUpdates[i]);\n        } else {\n            SendParameterUpdateToServer(parameterUpdates[i]);\n        }\n    }\n    // Iterate through the list of trigger updates and send them\n    for (int i = 0; i < triggerUpdates.Count; i++) {\n        if (isServer) {\n            SendTriggerUpdateToClients(triggerUpdates[i]);\n        } else {\n            SendTriggerUpdateToServer(triggerUpdates[i]);\n        }\n    }\n    // Clear the lists to prepare for the next set of updates\n    animationUpdates.Clear();\n    parameterUpdates.Clear();\n    triggerUpdates.Clear();\n}", "CodeBleu_score": 42.766191043336164}]}
{"instance_id": "0632b2f27d22", "generation_result": [{"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t\tif (updateStage == NetworkUpdateStage.PreUpdate) {\n\t\tif (isServer || isClient) {\n\t\t\tFlush();\n\t\t}\n\t}\n\telse if (updateStage == NetworkUpdateStage.PostLateUpdate) {\n\t\tif (isServer) {\n\t\t\tCheckForAnimatorChanges();\n\t\t}\n\t\telse if (isClient) {\n\t\t\tProcessParameterUpdates();\n\t\t}\n\t}\n}", "CodeBleu_score": 13.869588606787827}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t    // If this is not the local player, we have nothing to do here\n    if (!isLocalPlayer) {\n        return;\n    }\n\n    // We only want to receive these on the server or on the local player\n    if (!isServer && !isLocalPlayer) {\n        return;\n    }\n\n    // If we are the server, we only want to receive these on the server\n    if (isServer && !isLocalPlayer) {\n        return;\n    }\n\n    // If we are the local player, we want to receive these on the local player\n    if (isLocalPlayer) {\n        // If we are the server, we only want to receive these on the server\n        if (isServer && !isLocalPlayer) {\n            return;\n        }\n\n        // If we are the local player, we want to receive these on the local player\n        if (isLocalPlayer) {\n            // If we are the server, we only want to receive these on the server\n            if (isServer && !isLocalPlayer) {\n                return;\n            }\n\n            // If we are the local player, we want to receive these on the local player\n            if (isLocalPlayer) {\n                // If we are the server, we only want to receive these on the server\n                if (isServer && !isLocalPlayer) {\n                    return;\n                }\n\n                // If we are the local player, we want to receive these on the local player\n                if (isLocalPlayer) {\n                    // If we are the server, we only want to receive these on the server\n                    if (isServer && !isLocalPlayer) {\n                        return;\n                    }\n\n                    // If we are the local player, we want to receive these on the local player\n                    if (isLocalPlayer) {\n                        // If we are the server, we only want to receive these on the server\n                        if (isServer && !isLocalPlayer) {\n                            return;\n                        }\n\n                        // If we are the local player, we want to receive these on the local player\n                        if (isLocalPlayer) {\n                            // If we are the server, we only want to receive these on the server\n                            if (isServer", "CodeBleu_score": 25.797120017610315}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t    if (updateStage == NetworkUpdateStage.PreUpdate) {\n        if (isServer || isClient) {\n            FlushPendingMessages();\n        }\n    }\n    if (updateStage == NetworkUpdateStage.PostLateUpdate) {\n        if (isServer || isClient) {\n            ProcessParameterUpdates();\n            ProcessAnimatorChanges();\n        }\n    }\n}", "CodeBleu_score": 27.637890792933796}]}
{"instance_id": "d78874b65b32", "generation_result": [{"code": "private void UpdateOwnershipAuthority(){\n\t    if (Networking.IsOwner(gameObject)) {\n        // If we are the owner of this object, set the Rigidbody to kinematic and turn off interpolation.\n        GetComponent<Rigidbody>().isKinematic = true;\n        GetComponent<Rigidbody>().interpolation = RigidbodyInterpolation.None;\n        // Set the object's authority state to \"owned\"\n        AuthorityState = AuthorityState.Owned;\n    } else if (Networking.IsOwner(Networking.GetOwner(gameObject))) {\n        // If we are not the owner of this object but we are the owner of the object's owner, set the Rigidbody to non-kinematic and turn on interpolation.\n        GetComponent<Rigidbody>().isKinematic = false;\n        GetComponent<Rigidbody>().interpolation = RigidbodyInterpolation.Interpolate;\n        // Set the object's authority state to \"controlled\"\n        AuthorityState = AuthorityState.Controlled;\n    } else {\n        // If we are neither the owner of this object nor the owner of the object's owner, set the Rigidbody to kinematic and turn off interpolation.\n        GetComponent<Rigidbody>().isKinematic = true;\n        GetComponent<Rigidbody>().interpolation = RigidbodyInterpolation.None;\n        // Set the object's authority state to \"unowned\"\n        AuthorityState = AuthorityState.Unowned;\n    }\n}", "CodeBleu_score": 22.843916537343027}, {"code": "private void UpdateOwnershipAuthority(){\n\t    if (photonView.IsMine) {\n        if (rigidBody != null) {\n            rigidBody.isKinematic = false;\n            rigidBody.interpolation = RigidbodyInterpolation.Interpolate;\n        }\n    } else {\n        if (rigidBody != null) {\n            rigidBody.isKinematic = true;\n            rigidBody.interpolation = RigidbodyInterpolation.None;\n        }\n    }\n}", "CodeBleu_score": 26.176775618219466}, {"code": "private void UpdateOwnershipAuthority(){\n\t\tif (hasAuthority) {\n\t\tif (isOwned) {\n\t\t\townershipAuthority = OwnershipAuthority.Authoritative;\n\t\t} else {\n\t\t\townershipAuthority = OwnershipAuthority.NotAuthoritative;\n\t\t}\n\t} else {\n\t\tif (isOwned) {\n\t\t\townershipAuthority = OwnershipAuthority.NotAuthoritative;\n\t\t} else {\n\t\t\townershipAuthority = OwnershipAuthority.NotOwned;\n\t\t}\n\t}\n\n\tif (ownershipAuthority == OwnershipAuthority.Authoritative) {\n\t\tif (rigidbody != null) {\n\t\t\trigidbody.isKinematic = false;\n\t\t\trigidbody.interpolation = RigidbodyInterpolation.None;\n\t\t}\n\t} else {\n\t\tif (rigidbody != null) {\n\t\t\trigidbody.isKinematic = true;\n\t\t\trigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t}\n\t}\n}", "CodeBleu_score": 29.223134986997128}]}
{"instance_id": "304fe1278db9", "generation_result": [{"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t  // Extract the highest two bits.\n  int skipIndex = (int)(compressed >> 30);\n  // Decompress the remaining components.\n  float x = (float)((compressed >> 20) & 0x3FF) / 1023.0f - 1.0f;\n  float y = (float)((compressed >> 10) & 0x3FF) / 1023.0f - 1.0f;\n  float z = (float)(compressed & 0x3FF) / 1023.0f - 1.0f;\n  // Calculate the sum of the squared components.\n  float x2 = x * x;\n  float y2 = y * y;\n  float z2 = z * z;\n  // Determine the value of the skipped component.\n  float w2 = 1.0f - x2 - y2 - z2;\n  // Ensure the quaternion's unit length.\n  float length = Mathf.Sqrt(w2);\n  if (length > 0.0f) {\n    // Set the skipped component.\n    quaternion[skipIndex] = length;\n    // Set the other components.\n    quaternion.x = x;\n    quaternion.y = y;\n    quaternion.z = z;\n  } else {\n    // The quaternion is zero.\n    quaternion.x = 0.0f;\n    quaternion.y = 0.0f;\n    quaternion.z = 0.0f;\n    quaternion.w = 0.0f;\n  }\n}", "CodeBleu_score": 25.142891537173018}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t    var compressedX = (int)(compressed & 0x000000FF);\n    var compressedY = (int)(compressed & 0x0000FF00) >> 8;\n    var compressedZ = (int)(compressed & 0x00FF0000) >> 16;\n    var compressedW = (int)(compressed & 0xFF000000) >> 24;\n\n    var mask = 1 << 7;\n    var skipX = (compressed & mask) != 0;\n    var skipY = (compressed & (mask << 1)) != 0;\n    var skipZ = (compressed & (mask << 2)) != 0;\n    var skipW = (compressed & (mask << 3)) != 0;\n\n    var x = skipX ? 0.0f : (float)compressedX / 127.0f;\n    var y = skipY ? 0.0f : (float)compressedY / 127.0f;\n    var z = skipZ ? 0.0f : (float)compressedZ / 127.0f;\n    var w = skipW ? 0.0f : (float)compressedW / 127.0f;\n\n    var sum = x * x + y * y + z * z + w * w;\n    var magnitude = Mathf.Sqrt(1.0f - sum);\n    if (skipX) {\n        x = magnitude;\n    } else {\n        x *= magnitude;\n    }\n    if (skipY) {\n        y = magnitude;\n    } else {\n        y *= magnitude;\n    }\n    if (skipZ) {\n        z = magnitude;\n    } else {\n        z *= magnitude;\n    }\n    if (skipW) {\n        w = magnitude;\n    } else {\n        w *= magnitude;\n    }\n\n    quaternion.x = x;\n    quaternion.y = y;\n    quaternion.z = z;\n    quaternion.w = w;", "CodeBleu_score": 20.394361921367555}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t\tuint compressedX = compressed & 0x000000FF;\n\tuint compressedY = (compressed & 0x0000FF00) >> 8;\n\tuint compressedZ = (compressed & 0x00FF0000) >> 16;\n\tuint compressedW = (compressed & 0xFF000000) >> 24;\n\t\n\tswitch (compressed >> 30) {\n\t\tcase 0:\n\t\t\tquaternion.x = (float)compressedX * (1.0f / 255.0f);\n\t\t\tquaternion.y = (float)compressedY * (1.0f / 255.0f);\n\t\t\tquaternion.z = (float)compressedZ * (1.0f / 255.0f);\n\t\t\tquaternion.w = 1.0f - (float)(compressedX + compressedY + compressedZ) * (1.0f / 255.0f);\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tquaternion.x = (float)compressedX * (1.0f / 255.0f);\n\t\t\tquaternion.y = (float)compressedY * (1.0f / 255.0f);\n\t\t\tquaternion.z = 1.0f - (float)(compressedX + compressedY) * (1.0f / 255.0f);\n\t\t\tquaternion.w = (float)compressedZ * (1.0f / 255.0f);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tquaternion.x = (float)compressedX * (1.0f / 255.0f);\n\t\t\tquaternion.y = 1.0f - (float)(compressedX + compressedZ) * (1.0f / 255.0f);\n\t\t\tquaternion.z = (float)compressedY * (", "CodeBleu_score": 19.563622619459657}]}
{"instance_id": "452b860a7dde", "generation_result": [{"code": "static void GenerateCLRBindingByAnalysis(){\n\t\tstring path = EditorUtility.OpenFilePanel(\"Select the assembly to generate binding\", Application.dataPath, \"dll\");\n\tif (path.Length != 0) {\n\t\tstring pdbPath = path + \".pdb\";\n\t\tif (File.Exists(pdbPath)) {\n\t\t\tpath = pdbPath;\n\t\t}\n\t\tif (path.EndsWith(\".pdb\")) {\n\t\t\tpath = path.Substring(0, path.Length - 4);\n\t\t}\n\t\tif (File.Exists(path)) {\n\t\t\tpath = Path.GetFullPath(path);\n\t\t\tif (!path.StartsWith(Application.dataPath)) {\n\t\t\t\tEditorUtility.DisplayDialog(\"Error\", \"The assembly must be placed under the Assets folder\", \"OK\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (path.EndsWith(\".dll\")) {\n\t\t\t\tpath = path.Substring(0, path.Length - 4);\n\t\t\t}\n\t\t\tpath = path.Substring(Application.dataPath.Length - 6);\n\t\t\tpath = path.Replace('\\\\', '/');\n\t\t\tstring destPath = path + \".bytes\";\n\t\t\tif (File.Exists(destPath)) {\n\t\t\t\tFile.Delete(destPath);\n\t\t\t}\n\t\t\tbyte[] dllBytes = File.ReadAllBytes(path + \".dll\");\n\t\t\tFile.WriteAllBytes(destPath, dllBytes);\n\t\t\tAssetDatabase.ImportAsset(destPath);\n\t\t\tdestPath = path + \".pdb.bytes\";\n\t\t\tif (File.Exists(destPath)) {\n\t\t\t\tFile.Delete(destPath);\n\t\t\t}\n\t\t\tbyte[] pdbBytes = File.ReadAllBytes(path + \".pdb\");\n\t\t\tFile.WriteAllBytes(destPath, pdbBytes);\n\t\t\tAssetDatabase.ImportAsset(destPath);\n\t\t\tEditorUtility.DisplayProgressBar(\"Generating CLR Binding\", \"Initializing\", 0);\n\t\t\tAppDomain domain = AppDomain.CreateDomain(\"Gener", "CodeBleu_score": 15.278995329659242}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t    // Create a new AppDomain\n    AppDomain domain = AppDomain.CreateDomain(\"ILRuntime\");\n    // Load the assembly from the specified file\n    Assembly assembly = Assembly.LoadFile(Application.dataPath + \"/Plugins/ILRuntime.dll\");\n    // Initialize ILRuntime with the domain\n    ILRuntime.Runtime.Enviorment.AppDomain appdomain = new ILRuntime.Runtime.Enviorment.AppDomain(domain, null);\n    // Generate binding code\n    ILRuntime.Runtime.Generated.CLRBindings.Initialize(appdomain);\n    // Refresh the AssetDatabase\n    AssetDatabase.Refresh();\n}", "CodeBleu_score": 23.73802275424117}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t    // Create a new AppDomain to load the assembly\n    AppDomain domain = AppDomain.CreateDomain(\"TempDomain\");\n\n    // Load the assembly\n    Assembly assembly = domain.Load(AssemblyName.GetAssemblyName(Application.dataPath + \"/ILRuntime/Generated/CLRBinding.dll\"));\n\n    // Initialize ILRuntime\n    ILRuntime.Runtime.Enviorment.AppDomain appdomain = new ILRuntime.Runtime.Enviorment.AppDomain();\n\n    // Generate bindings\n    ILRuntime.Runtime.Generated.CLRBindings.Initialize(appdomain);\n\n    // Refresh the AssetDatabase\n    AssetDatabase.Refresh();\n}", "CodeBleu_score": 24.66728980133543}]}
{"instance_id": "b8990031b636", "generation_result": [{"code": "public override void OnInspectorGUI(){\n\t    base.OnInspectorGUI();\n\n    serializedObject.Update();\n\n    EditorGUI.BeginDisabledGroup(EditorApplication.isPlaying && PrefabUtility.GetPrefabType(target) == PrefabType.Prefab);\n    {\n        ConfigComponent t = (ConfigComponent)target;\n\n        EditorGUILayout.LabelField(\"Config Count\", t.ConfigCount.ToString());\n        EditorGUILayout.LabelField(\"Cached Bytes Size\", t.CachedBytesSize.ToString());\n    }\n    EditorGUI.EndDisabledGroup();\n\n    serializedObject.ApplyModifiedProperties();\n\n    Repaint();\n}", "CodeBleu_score": 55.1886943823921}, {"code": "public override void OnInspectorGUI(){\n\t    base.OnInspectorGUI();\n\n    serializedObject.Update();\n\n    EditorGUI.BeginDisabledGroup(EditorApplication.isPlaying && !EditorUtility.IsPersistent(target));\n    {\n        ConfigComponent t = (ConfigComponent)target;\n\n        EditorGUILayout.LabelField(\"Config Count\", t.Count.ToString());\n        EditorGUILayout.LabelField(\"Cached Bytes Size\", t.CachedBytesSize.ToString());\n    }\n    EditorGUI.EndDisabledGroup();\n\n    serializedObject.ApplyModifiedProperties();\n\n    Repaint();\n}", "CodeBleu_score": 57.13022076698093}, {"code": "public override void OnInspectorGUI(){\n\t    serializedObject.Update();\n\n    ConfigComponent t = target as ConfigComponent;\n\n    EditorGUI.BeginDisabledGroup(EditorApplication.isPlaying && PrefabUtility.GetPrefabType(t.gameObject) == PrefabType.Prefab);\n    {\n        EditorGUILayout.PropertyField(m_EnableLoadSceneConfig);\n        EditorGUILayout.PropertyField(m_EnableLoadAssetBundleConfig);\n        EditorGUILayout.PropertyField(m_EnableLoadAssetConfig);\n        EditorGUILayout.PropertyField(m_EnableLoadEntityConfig);\n        EditorGUILayout.PropertyField(m_EnableLoadComponentConfig);\n        EditorGUILayout.PropertyField(m_EnableLoadDataTableConfig);\n        EditorGUILayout.PropertyField(m_EnableLoadDictionaryConfig);\n        EditorGUILayout.PropertyField(m_EnableLoadFontConfig);\n        EditorGUILayout.PropertyField(m_EnableLoadSceneConfig);\n        EditorGUILayout.PropertyField(m_EnableLoadSoundConfig);\n        EditorGUILayout.PropertyField(m_EnableLoadUIFormConfig);\n        EditorGUILayout.PropertyField(m_EnableLoadUISoundConfig);\n        EditorGUILayout.PropertyField(m_EnableLoadUISpriteConfig);\n        EditorGUILayout.PropertyField(m_EnableLoadOtherConfig);\n        EditorGUILayout.PropertyField(m_EnableLoadConfigHelper);\n        EditorGUILayout.PropertyField(m_EnableLoadConfigManager);\n        EditorGUILayout.PropertyField(m_EnableLoadConfigReader);\n        EditorGUILayout.PropertyField(m_EnableLoadConfigUpdater);\n        EditorGUILayout.PropertyField(m_EnableLoadConfigData);\n        EditorGUILayout.PropertyField(m_EnableLoadConfigItem);\n        EditorGUILayout.PropertyField(m_EnableLoadConfigComponent);\n        EditorGUILayout.PropertyField(m_EnableLoadConfigAsset);\n        EditorGUILayout.PropertyField(m_EnableLoadConfigEntity);\n        EditorGUILayout.PropertyField(m_EnableLoadConfigScene);\n        EditorGUILayout.PropertyField(m_EnableLoadConfigSound);\n        EditorGUILayout.PropertyField(m_", "CodeBleu_score": 31.616866117716917}]}
{"instance_id": "6453adc2daa8", "generation_result": [{"code": "public static void DefaultScenes(){\n\t    HashSet<string> defaultSceneNames = new HashSet<string>();\n    defaultSceneNames.Add(\"Assets/Scenes/MainMenu.unity\");\n    defaultSceneNames.Add(\"Assets/Scenes/Gameplay.unity\");\n    defaultSceneNames.Add(\"Assets/Scenes/GameOver.unity\");\n    defaultSceneNames.Add(\"Assets/Scenes/Pause.unity\");\n    defaultSceneNames.Add(\"Assets/Scenes/Settings.unity\");\n    defaultSceneNames.Add(\"Assets/Scenes/Credits.unity\");\n    defaultSceneNames.Add(\"Assets/Scenes/LevelSelect.unity\");\n    defaultSceneNames.Add(\"Assets/Scenes/Level.unity\");\n    defaultSceneNames.Add(\"Assets/Scenes/LevelComplete.unity\");\n    defaultSceneNames.Add(\"Assets/Scenes/LevelFailed.unity\");\n    defaultSceneNames.Add(\"Assets/Scenes/LevelPause.unity\");\n    defaultSceneNames.Add(\"Assets/Scenes/LevelRestart.unity\");\n    defaultSceneNames.Add(\"Assets/Scenes/LevelStart.unity\");\n    defaultSceneNames.Add(\"Assets/Scenes/LevelTransition.unity\");\n    defaultSceneNames.Add(\"Assets/Scenes/Loading.unity\");\n    defaultSceneNames.Add(\"Assets/Scenes/Splash.unity\");\n    defaultSceneNames.Add(\"Assets/Scenes/Title.unity\");\n    defaultSceneNames.Add(\"Assets/Scenes/Win.unity\");\n    defaultSceneNames.Add(\"Assets/Scenes/WinTransition.unity\");\n\n    List<EditorBuildSettingsScene> defaultSceneList = new List<EditorBuildSettingsScene>();\n    foreach (string sceneName in defaultSceneNames) {\n        defaultSceneList.Add(new EditorBuildSettingsScene(sceneName, true));\n    }\n\n    EditorBuildSettings.scenes = defaultSceneList.ToArray();\n\n    Debug.Log(\"Scenes set to default.\");\n}", "CodeBleu_score": 52.43852565913325}, {"code": "public static void DefaultScenes(){\n\t    var defaultScenes = new HashSet<string>();\n    defaultScenes.Add(\"Assets/Scenes/Main.unity\");\n    defaultScenes.Add(\"Assets/Scenes/Splash.unity\");\n    defaultScenes.Add(\"Assets/Scenes/Login.unity\");\n    defaultScenes.Add(\"Assets/Scenes/Lobby.unity\");\n    defaultScenes.Add(\"Assets/Scenes/Game.unity\");\n    defaultScenes.Add(\"Assets/Scenes/GameOver.unity\");\n    defaultScenes.Add(\"Assets/Scenes/GameResult.unity\");\n    defaultScenes.Add(\"Assets/Scenes/GameSetting.unity\");\n    defaultScenes.Add(\"Assets/Scenes/GameStart.unity\");\n    defaultScenes.Add(\"Assets/Scenes/GameWaiting.unity\");\n    defaultScenes.Add(\"Assets/Scenes/GameOver.unity\");\n    defaultScenes.Add(\"Assets/Scenes/GameResult.unity\");\n    defaultScenes.Add(\"Assets/Scenes/GameSetting.unity\");\n    defaultScenes.Add(\"Assets/Scenes/GameStart.unity\");\n    defaultScenes.Add(\"Assets/Scenes/GameWaiting.unity\");\n    defaultScenes.Add(\"Assets/Scenes/GameOver.unity\");\n    defaultScenes.Add(\"Assets/Scenes/GameResult.unity\");\n    defaultScenes.Add(\"Assets/Scenes/GameSetting.unity\");\n    defaultScenes.Add(\"Assets/Scenes/GameStart.unity\");\n    defaultScenes.Add(\"Assets/Scenes/GameWaiting.unity\");\n    defaultScenes.Add(\"Assets/Scenes/GameOver.unity\");\n    defaultScenes.Add(\"Assets/Scenes/GameResult.unity\");\n    defaultScenes.Add(\"Assets/Scenes/GameSetting.unity\");\n    defaultScenes.Add(\"Assets/Scenes/GameStart.unity\");\n    defaultScenes.Add(\"Assets/Scenes/GameWaiting.unity\");\n    defaultScenes.Add(\"Assets/Scenes/GameOver.unity\");\n    default", "CodeBleu_score": 20.193720924689607}, {"code": "public static void DefaultScenes(){\n\t    var defaultScenes = new HashSet<string>() {\n        \"Assets/Game/Scenes/Game.unity\",\n        \"Assets/Game/Scenes/Menu.unity\",\n        \"Assets/Game/Scenes/Loading.unity\",\n        \"Assets/Game/Scenes/GameOver.unity\"\n    };\n\n    var scenes = new List<EditorBuildSettingsScene>();\n    foreach (var scene in EditorBuildSettings.scenes) {\n        if (defaultScenes.Contains(scene.path)) {\n            scenes.Add(scene);\n        }\n    }\n\n    EditorBuildSettings.scenes = scenes.ToArray();\n    Debug.Log(\"Scenes set to default\");\n}", "CodeBleu_score": 44.557846694509486}]}
{"instance_id": "e199f1a42526", "generation_result": [{"code": "public void Draw(){\n\t    EditorGUILayout.BeginHorizontal();\n    EditorGUILayout.LabelField(this.label, GUILayout.Width(EditorGUIUtility.labelWidth - 4));\n    int selectedIndex = this.selectedIndex;\n    selectedIndex = EditorGUILayout.Popup(selectedIndex, this.helperTypes);\n    if (selectedIndex != this.selectedIndex) {\n        this.selectedIndex = selectedIndex;\n        this.helperType = this.helperTypes[selectedIndex];\n        this.customHelper = null;\n    }\n    EditorGUILayout.EndHorizontal();\n    if (this.selectedIndex == 0) {\n        EditorGUILayout.BeginHorizontal();\n        EditorGUILayout.LabelField(this.customHelperLabel, GUILayout.Width(EditorGUIUtility.labelWidth - 4));\n        this.customHelper = EditorGUILayout.ObjectField(this.customHelper, typeof(MonoBehaviour), true) as MonoBehaviour;\n        EditorGUILayout.EndHorizontal();\n        if (this.customHelper == null) {\n            EditorGUILayout.HelpBox(\"Custom helper is not set.\", MessageType.Error);\n        }\n    }\n}", "CodeBleu_score": 39.98811383911221}, {"code": "public void Draw(){\n\t    // Display a popup menu for selecting a helper type.\n    int selectedIndex = EditorGUILayout.Popup(this.selectedIndex, this.helperTypeNames);\n\n    // If the selected index has changed, update the selected index and the custom helper.\n    if (selectedIndex != this.selectedIndex) {\n        this.selectedIndex = selectedIndex;\n        this.customHelper = null;\n\n        // If a helper type is selected, update the custom helper.\n        if (this.selectedIndex != 0) {\n            this.customHelper = null;\n            this.customHelperType = this.helperTypes[this.selectedIndex - 1];\n        }\n    }\n\n    // If no helper type is selected, display a field for a custom helper.\n    if (this.selectedIndex == 0) {\n        // Display a field for a custom helper.\n        EditorGUILayout.BeginHorizontal();\n        this.customHelper = EditorGUILayout.ObjectField(this.customHelper, this.customHelperType, true) as MonoBehaviour;\n\n        // If the custom helper is not set, display an error message.\n        if (this.customHelper == null) {\n            EditorGUILayout.HelpBox(\"Please select a custom helper.\", MessageType.Error);\n        }\n\n        EditorGUILayout.EndHorizontal();\n    }\n}", "CodeBleu_score": 35.373693813772604}, {"code": "public void Draw(){\n\t    var index = 0;\n    var selected = false;\n    var selectedType = typeof(object);\n    var selectedTypeName = \"\";\n    var selectedTypeNameIsValid = false;\n    var selectedTypeNameIsCustom = false;\n    var selectedTypeNameIsValidCustom = false;\n    var selectedTypeNameIsValidCustomError = \"\";\n    var selectedTypeNameIsValidCustomErrorMessage = \"\";\n    var selectedTypeNameIsValidCustomErrorMessageDetails = \"\";\n    var selectedTypeNameIsValidCustomErrorMessageDetailsDetails = \"\";\n    var selectedTypeNameIsValidCustomErrorMessageDetailsDetailsDetails = \"\";\n    var selectedTypeNameIsValidCustomErrorMessageDetailsDetailsDetailsDetails = \"\";\n\n    // Get the list of helper types\n    var helperTypeNames = new List<string>();\n    var helperTypes = new List<Type>();\n    foreach (var type in GameFrameworkEntry.GetTypesWithAttribute(typeof(HelperAttribute))) {\n        var helperAttribute = type.GetCustomAttribute<HelperAttribute>();\n        if (helperAttribute.Priority < 0) {\n            continue;\n        }\n\n        helperTypeNames.Add(type.FullName);\n        helperTypes.Add(type);\n    }\n\n    // Sort the list of helper types\n    helperTypeNames.Sort((a, b) => {\n        var helperAttributeA = helperTypes[helperTypeNames.IndexOf(a)].GetCustomAttribute<HelperAttribute>();\n        var helperAttributeB = helperTypes[helperTypeNames.IndexOf(b)].GetCustomAttribute<HelperAttribute>();\n        return helperAttributeA.Priority.CompareTo(helperAttributeB.Priority);\n    });\n\n    // Get the selected index\n    var selectedIndex = EditorPrefs.GetInt(EditorPrefsUtility.BuildIndexKey(this.GetType().FullName), -1);\n    if (selectedIndex >= 0 && selectedIndex < helperTypeNames.Count) {\n        selected = true;\n        selectedTypeName = helperTypeNames[selectedIndex];\n        selectedType = helperTypes[selectedIndex];\n        selectedTypeNameIsValid = true;\n    } else {\n        selectedTypeName = EditorPrefs.GetString(EditorPrefsUtility.BuildIndexKey(this.GetType().FullName), \"\");", "CodeBleu_score": 33.66813453524924}]}
{"instance_id": "957e0aaa6f72", "generation_result": [{"code": "public static void DisableAllLogs(){\n\t    #if UNITY_EDITOR\n    var defines = PlayerSettings.GetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup);\n    var definesArray = defines.Split(';');\n    var newDefinesArray = new List<string>(definesArray);\n\n    // Remove general logging symbol\n    if (newDefinesArray.Contains(\"LOGGING_ENABLED\")) {\n        newDefinesArray.Remove(\"LOGGING_ENABLED\");\n    }\n\n    // Remove specific logging symbols\n    if (newDefinesArray.Contains(\"LOG_GENERAL\")) {\n        newDefinesArray.Remove(\"LOG_GENERAL\");\n    }\n    if (newDefinesArray.Contains(\"LOG_ERROR\")) {\n        newDefinesArray.Remove(\"LOG_ERROR\");\n    }\n    if (newDefinesArray.Contains(\"LOG_WARNING\")) {\n        newDefinesArray.Remove(\"LOG_WARNING\");\n    }\n    if (newDefinesArray.Contains(\"LOG_INFO\")) {\n        newDefinesArray.Remove(\"LOG_INFO\");\n    }\n    if (newDefinesArray.Contains(\"LOG_DEBUG\")) {\n        newDefinesArray.Remove(\"LOG_DEBUG\");\n    }\n\n    // Remove logging above a certain level\n    if (newDefinesArray.Contains(\"LOG_LEVEL_ERROR\")) {\n        newDefinesArray.Remove(\"LOG_LEVEL_ERROR\");\n    }\n    if (newDefinesArray.Contains(\"LOG_LEVEL_WARNING\")) {\n        newDefinesArray.Remove(\"LOG_LEVEL_WARNING\");\n    }\n    if (newDefinesArray.Contains(\"LOG_LEVEL_INFO\")) {\n        newDefinesArray.Remove(\"LOG_LEVEL_INFO\");\n    }\n    if (newDefinesArray.Contains(\"LOG_LEVEL_DEBUG\")) {\n        newDefinesArray.Remove(\"LOG_LEVEL_DEBUG\");\n    }\n\n    // Update scripting define symbols\n    PlayerSettings.SetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup, string.Join(\";\", newDefinesArray.ToArray()));\n    #endif\n", "CodeBleu_score": 40.52254435740793}, {"code": "public static void DisableAllLogs(){\n\t    // Remove general logging symbol\n    RemoveScriptingDefineSymbol(\"LOGGING_ENABLED\");\n\n    // Remove symbols for specific logs\n    RemoveScriptingDefineSymbol(\"LOG_ERROR\");\n    RemoveScriptingDefineSymbol(\"LOG_WARNING\");\n    RemoveScriptingDefineSymbol(\"LOG_INFO\");\n    RemoveScriptingDefineSymbol(\"LOG_DEBUG\");\n\n    // Remove symbols for logs above a certain level\n    RemoveScriptingDefineSymbol(\"LOG_LEVEL_ERROR\");\n    RemoveScriptingDefineSymbol(\"LOG_LEVEL_WARNING\");\n    RemoveScriptingDefineSymbol(\"LOG_LEVEL_INFO\");\n    RemoveScriptingDefineSymbol(\"LOG_LEVEL_DEBUG\");\n}", "CodeBleu_score": 23.68068820918834}, {"code": "public static void DisableAllLogs(){\n\t    // Remove general logging symbol\n    string[] symbols = PlayerSettings.GetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup).Split(';');\n    List<string> newSymbols = new List<string>();\n    foreach (string symbol in symbols) {\n        if (symbol != \"LOG_ENABLED\") {\n            newSymbols.Add(symbol);\n        }\n    }\n    PlayerSettings.SetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup, string.Join(\";\", newSymbols.ToArray()));\n\n    // Remove symbols for specific logs\n    symbols = PlayerSettings.GetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup).Split(';');\n    newSymbols = new List<string>();\n    foreach (string symbol in symbols) {\n        if (symbol != \"LOG_ENABLED\" && symbol != \"LOG_ERROR\" && symbol != \"LOG_WARNING\" && symbol != \"LOG_INFO\" && symbol != \"LOG_VERBOSE\") {\n            newSymbols.Add(symbol);\n        }\n    }\n    PlayerSettings.SetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup, string.Join(\";\", newSymbols.ToArray()));\n}", "CodeBleu_score": 49.886730355336816}]}
{"instance_id": "8a544c3d9513", "generation_result": [{"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\tGameFrameworkComponent[] components = GameFrameworkEntry.GetComponents(type);\n\tif (components == null || components.Length == 0) {\n\t\treturn null;\n\t}\n\treturn components[0];\n}", "CodeBleu_score": 17.325539421397302}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\tvar current = this;\n\twhile (current != null) {\n\t\tif (current.GetType() == type) {\n\t\t\treturn current;\n\t\t}\n\t\tcurrent = current.Next;\n\t}\n\treturn null;\n}", "CodeBleu_score": 49.73174627422202}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t    for (var i = 0; i < m_Components.Count; i++) {\n        if (m_Components[i].GetType() == type) {\n            return m_Components[i];\n        }\n    }\n    return null;\n}", "CodeBleu_score": 31.129190028015362}]}
{"instance_id": "ec304512c0e4", "generation_result": [{"code": "public static void Shutdown(ShutdownType shutdownType){\n\t    Log.Info(\"Shutdown with type '{0}'.\", shutdownType.ToString());\n    switch (shutdownType) {\n        case ShutdownType.Restart:\n            SceneManager.LoadScene(GameEntry.GetGameSceneName());\n            break;\n        case ShutdownType.Quit:\n            Application.Quit();\n            break;\n        case ShutdownType.None:\n            break;\n    }\n    GameEntry.BaseComponent.Shutdown();\n    GameEntry.BaseComponent = null;\n    GameEntry.EventComponent.Shutdown();\n    GameEntry.EventComponent = null;\n    GameEntry.FsmComponent.Shutdown();\n    GameEntry.FsmComponent = null;\n    GameEntry.InputComponent.Shutdown();\n    GameEntry.InputComponent = null;\n    GameEntry.LocalizationComponent.Shutdown();\n    GameEntry.LocalizationComponent = null;\n    GameEntry.NetworkComponent.Shutdown();\n    GameEntry.NetworkComponent = null;\n    GameEntry.ObjectPoolComponent.Shutdown();\n    GameEntry.ObjectPoolComponent = null;\n    GameEntry.ProcedureComponent.Shutdown();\n    GameEntry.ProcedureComponent = null;\n    GameEntry.ResourceComponent.Shutdown();\n    GameEntry.ResourceComponent = null;\n    GameEntry.SceneComponent.Shutdown();\n    GameEntry.SceneComponent = null;\n    GameEntry.SoundComponent.Shutdown();\n    GameEntry.SoundComponent = null;\n    GameEntry.UIComponent.Shutdown();\n    GameEntry.UIComponent = null;\n    GameEntry.WebRequestComponent.Shutdown();\n    GameEntry.WebRequestComponent = null;\n    GameEntry.ConfigComponent = null;\n    GameEntry.DataTableComponent = null;\n    GameEntry.DataTableManager = null;\n    GameEntry.EntityComponent = null;\n    GameEntry.EntityGroupComponent = null;\n    GameEntry.EventComponent = null;\n    GameEntry.FsmComponent = null;\n    GameEntry.InputComponent = null;\n    GameEntry.LocalizationComponent = null;\n    GameEntry.NetworkComponent = null;\n    GameEntry.ObjectPoolComponent =", "CodeBleu_score": 24.50270021447257}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t    Log.Info(\"Shutdown with type '{0}'.\", shutdownType.ToString());\n    GameFrameworkLog.Shutdown();\n    switch (shutdownType) {\n        case ShutdownType.Restart:\n            SceneManager.LoadScene(SceneManager.GetActiveScene().name);\n            break;\n        case ShutdownType.Quit:\n            Application.Quit();\n            break;\n        case ShutdownType.None:\n            break;\n        default:\n            break;\n    }\n}", "CodeBleu_score": 24.780743420742674}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t    Log.Info(\"Shutdown Game Framework...\");\n    switch (shutdownType) {\n        case ShutdownType.Restart:\n            Log.Info(\"Shutdown Game Framework with restart.\");\n            Restart();\n            break;\n        case ShutdownType.Quit:\n            Log.Info(\"Shutdown Game Framework with quit.\");\n            Quit();\n            break;\n        case ShutdownType.None:\n            Log.Info(\"Shutdown Game Framework with none.\");\n            break;\n    }\n}", "CodeBleu_score": 26.506655740873576}]}
{"instance_id": "5c78a1d4f59d", "generation_result": [{"code": "protected override void Awake(){\n\t    base.Awake();\n\n    m_ConfigManager = GameFrameworkEntry.GetModule<IConfigManager>();\n    if (m_ConfigManager == null) {\n        Log.Fatal(\"Config manager is invalid.\");\n        return;\n    }\n\n    m_ConfigManager.ReadDataSuccess += OnReadDataSuccess;\n    m_ConfigManager.ReadDataFailure += OnReadDataFailure;\n\n    if (m_UpdateWhenReadDataSuccess) {\n        m_ConfigManager.UpdateDataSuccess += OnUpdateDataSuccess;\n    }\n\n    if (m_UpdateWhenReadDataFailure) {\n        m_ConfigManager.UpdateDataFailure += OnUpdateDataFailure;\n    }\n\n    if (m_UpdateWhenDependencyAssetLoaded) {\n        m_ConfigManager.DependencyAssetLoaded += OnDependencyAssetLoaded;\n    }\n}", "CodeBleu_score": 83.69421507614479}, {"code": "protected override void Awake(){\n\t    base.Awake();\n    m_ConfigManager = GameFrameworkEntry.GetModule<IConfigManager>();\n    if (m_ConfigManager == null) {\n        Log.Fatal(\"Config manager is invalid.\");\n        return;\n    }\n\n    m_ConfigManager.ReadDataSuccess += OnReadDataSuccess;\n    m_ConfigManager.ReadDataFailure += OnReadDataFailure;\n    if (m_UpdateWhenReadSuccess) {\n        m_ConfigManager.UpdateDataSuccess += OnUpdateDataSuccess;\n    }\n    if (m_UpdateWhenReadFailure) {\n        m_ConfigManager.UpdateDataFailure += OnUpdateDataFailure;\n    }\n    if (m_DependencyAssetWhenReadSuccess) {\n        m_ConfigManager.LoadDependencyAssetSuccess += OnLoadDependencyAssetSuccess;\n    }\n    if (m_DependencyAssetWhenReadFailure) {\n        m_ConfigManager.LoadDependencyAssetFailure += OnLoadDependencyAssetFailure;\n    }\n}", "CodeBleu_score": 80.66255401830648}, {"code": "protected override void Awake(){\n\t    base.Awake();\n\n    m_ConfigManager = GameFrameworkEntry.GetModule<IConfigManager>();\n    if (m_ConfigManager == null) {\n        Log.Fatal(\"Config manager is invalid.\");\n        return;\n    }\n\n    m_ConfigManager.ReadDataSuccess += OnReadDataSuccess;\n    m_ConfigManager.ReadDataFailure += OnReadDataFailure;\n    m_ConfigManager.ReadDataUpdate += OnReadDataUpdate;\n    m_ConfigManager.ReadDataDependencyAsset += OnReadDataDependencyAsset;\n}", "CodeBleu_score": 80.83369845017027}]}
{"instance_id": "fbb36ff9d552", "generation_result": [{"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t    if (!(configAsset is TextAsset)) {\n        Log.Warning(\"Config asset '{0}' is invalid.\", configAssetName);\n        return false;\n    }\n\n    TextAsset textAsset = configAsset as TextAsset;\n    if (string.IsNullOrEmpty(textAsset.text)) {\n        Log.Warning(\"Config asset '{0}' is invalid.\", configAssetName);\n        return false;\n    }\n\n    string configFileExtension = Path.GetExtension(configAssetName);\n    if (configFileExtension == \".bytes\") {\n        return configManager.ParseConfig(textAsset.bytes, userData);\n    } else {\n        return configManager.ParseConfig(textAsset.text, userData);\n    }\n}", "CodeBleu_score": 71.7011945724874}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t    if (!(configAsset is TextAsset)) {\n        Log.Warning(\"Config asset '{0}' is invalid.\", configAssetName);\n        return false;\n    }\n\n    TextAsset textAsset = (TextAsset)configAsset;\n    string configText = textAsset.text;\n    if (string.IsNullOrEmpty(configText)) {\n        Log.Warning(\"Config asset '{0}' is invalid.\", configAssetName);\n        return false;\n    }\n\n    string configFileExtension = Path.GetExtension(configAssetName);\n    if (configFileExtension == \".bytes\") {\n        byte[] configBytes = textAsset.bytes;\n        return configManager.ParseBytes(configBytes, userData);\n    }\n\n    return configManager.ParseString(configText, userData);\n}", "CodeBleu_score": 58.18945488673249}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t    if (!(configAsset is TextAsset)) {\n        Log.Warning(\"Config asset '{0}' is invalid.\", configAssetName);\n        return false;\n    }\n\n    TextAsset configTextAsset = (TextAsset)configAsset;\n    string configFileExtension = Path.GetExtension(configAssetName);\n    if (configFileExtension == \".bytes\" || configFileExtension == \".binary\") {\n        configManager.ParseBytes(configTextAsset.bytes, userData);\n    } else {\n        configManager.ParseString(configTextAsset.text, userData);\n    }\n\n    return true;\n}", "CodeBleu_score": 66.40163660455956}]}
{"instance_id": "84d744c480ca", "generation_result": [{"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t    if (configManager == null) {\n        Log.Warning(\"Config manager is invalid.\");\n        return false;\n    }\n\n    if (configBytes == null || configBytes.Length <= 0) {\n        Log.Warning(\"Config bytes is invalid.\");\n        return false;\n    }\n\n    if (startIndex < 0 || length < 0 || (startIndex + length) > configBytes.Length) {\n        Log.Warning(\"Config bytes is invalid.\");\n        return false;\n    }\n\n    try {\n        using (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length, false)) {\n            using (BinaryReader binaryReader = new BinaryReader(memoryStream, Encoding.UTF8)) {\n                while (binaryReader.BaseStream.Position < binaryReader.BaseStream.Length) {\n                    string configName = binaryReader.ReadString();\n                    if (string.IsNullOrEmpty(configName)) {\n                        Log.Warning(\"Config name is invalid.\");\n                        return false;\n                    }\n\n                    string configValue = binaryReader.ReadString();\n                    if (string.IsNullOrEmpty(configValue)) {\n                        Log.Warning(\"Config value is invalid.\");\n                        return false;\n                    }\n\n                    if (!configManager.AddConfig(configName, configValue)) {\n                        Log.Warning(\"Add config '{0}' with value '{1}' failure.\", configName, configValue);\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n    catch (Exception exception) {\n        Log.Warning(\"Parse config exception: {0}\", exception.ToString());\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 69.06380152847437}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t\ttry {\n\t\tusing (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length, false)) {\n\t\t\tusing (BinaryReader binaryReader = new BinaryReader(memoryStream, Encoding.UTF8)) {\n\t\t\t\twhile (binaryReader.BaseStream.Position < binaryReader.BaseStream.Length) {\n\t\t\t\t\tstring configName = binaryReader.ReadString();\n\t\t\t\t\tif (string.IsNullOrEmpty(configName)) {\n\t\t\t\t\t\tLog.Warning(\"Can not parse config which has empty name.\");\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tstring configValue = binaryReader.ReadString();\n\t\t\t\t\tif (string.IsNullOrEmpty(configValue)) {\n\t\t\t\t\t\tLog.Warning(\"Can not parse config which has empty value.\");\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!configManager.HasConfig(configName)) {\n\t\t\t\t\t\tconfigManager.AddConfig(configName, configValue);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tLog.Warning(\"Can not parse config which has duplicate name '{0}'.\", configName);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception exception) {\n\t\tLog.Warning(\"Can not parse config from byte array with exception '{0}'.\", exception.ToString());\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 71.76510314459628}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t\ttry {\n\t\tusing (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length, false)) {\n\t\t\tusing (BinaryReader binaryReader = new BinaryReader(memoryStream, Encoding.UTF8)) {\n\t\t\t\tstring configName = binaryReader.ReadString();\n\t\t\t\twhile (configName.Length > 0) {\n\t\t\t\t\tstring configValue = binaryReader.ReadString();\n\t\t\t\t\tif (!configManager.HasConfig(configName)) {\n\t\t\t\t\t\tconfigManager.AddConfig(configName, configValue);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tLog.Warning(\"Can not add config '{0}' which already exists.\", configName);\n\t\t\t\t\t}\n\t\t\t\t\tconfigName = binaryReader.ReadString();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t} catch (Exception exception) {\n\t\tLog.Warning(\"Parse config data exception: {0}\", exception.ToString());\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 66.70167424516941}]}
{"instance_id": "298bb6fa19a4", "generation_result": [{"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t    // ...\n}", "CodeBleu_score": 24.401589543369045}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t\tif (configAsset == null)\n\t\treturn;\n\tResourceComponent resourceComponent = GameEntry.GetComponent<ResourceComponent>();\n\tif (resourceComponent == null)\n\t\treturn;\n\tresourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 38.76658936592842}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t    // TODO: Implement this method\n    // \u91ca\u653e\u914d\u7f6e\u8d44\u6e90\n    // \u52a0\u8f7d\u914d\u7f6e\u8d44\u6e90\n    // \u5378\u8f7d\u914d\u7f6e\u8d44\u6e90\n    // \u5378\u8f7d\u914d\u7f6e\u8d44\u6e90\n    // \u91ca\u653e\u914d\u7f6e\u8d44\u6e90\n    // \u52a0\u8f7d\u914d\u7f6e\u8d44\u6e90\n    // \u5378\u8f7d\u914d\u7f6e\u8d44\u6e90\n    // \u5378\u8f7d\u914d\u7f6e\u8d44\u6e90\n    // \u91ca\u653e\u914d\u7f6e\u8d44\u6e90\n    // \u52a0\u8f7d\u914d\u7f6e\u8d44\u6e90\n    // \u5378\u8f7d\u914d\u7f6e\u8d44\u6e90\n    // \u5378\u8f7d\u914d\u7f6e\u8d44\u6e90\n    // \u91ca\u653e\u914d\u7f6e\u8d44\u6e90\n    // \u52a0\u8f7d\u914d\u7f6e\u8d44\u6e90\n    // \u5378\u8f7d\u914d\u7f6e\u8d44\u6e90\n    // \u5378\u8f7d\u914d\u7f6e\u8d44\u6e90\n    // \u91ca\u653e\u914d\u7f6e\u8d44\u6e90\n    // \u52a0\u8f7d\u914d\u7f6e\u8d44\u6e90\n    // \u5378\u8f7d\u914d\u7f6e\u8d44\u6e90\n    // \u5378\u8f7d\u914d\u7f6e\u8d44\u6e90\n    // \u91ca\u653e\u914d\u7f6e\u8d44\u6e90\n    // \u52a0\u8f7d\u914d\u7f6e\u8d44\u6e90\n    // \u5378\u8f7d\u914d\u7f6e\u8d44\u6e90\n    // \u5378\u8f7d\u914d\u7f6e\u8d44\u6e90\n    // \u91ca\u653e\u914d\u7f6e\u8d44\u6e90\n    // \u52a0\u8f7d\u914d\u7f6e\u8d44\u6e90\n    // \u5378\u8f7d\u914d\u7f6e\u8d44\u6e90\n    // \u5378\u8f7d\u914d\u7f6e\u8d44\u6e90\n    // \u91ca\u653e\u914d\u7f6e\u8d44\u6e90\n    // \u52a0\u8f7d\u914d\u7f6e\u8d44\u6e90\n    // \u5378\u8f7d\u914d\u7f6e\u8d44\u6e90\n    // \u5378\u8f7d\u914d\u7f6e\u8d44\u6e90\n    // \u91ca\u653e\u914d\u7f6e\u8d44\u6e90\n    // \u52a0\u8f7d\u914d\u7f6e\u8d44\u6e90\n    // \u5378\u8f7d\u914d\u7f6e\u8d44\u6e90\n    // \u5378\u8f7d\u914d\u7f6e\u8d44\u6e90\n    // \u91ca\u653e\u914d\u7f6e\u8d44\u6e90\n    // ", "CodeBleu_score": 22.46504966435571}]}
{"instance_id": "fa2003d95e36", "generation_result": [{"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t        ActiveSceneChangedEventArgs activeSceneChangedEventArgs = ReferencePool.Acquire<ActiveSceneChangedEventArgs>();\n        activeSceneChangedEventArgs.LastActiveScene = lastActiveScene;\n        activeSceneChangedEventArgs.ActiveScene = activeScene;\n        return activeSceneChangedEventArgs;\n    }", "CodeBleu_score": 81.50618869411362}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t        ActiveSceneChangedEventArgs e = ReferencePool.Acquire<ActiveSceneChangedEventArgs>();\n        e.LastActiveScene = lastActiveScene;\n        e.ActiveScene = activeScene;\n        return e;\n    }", "CodeBleu_score": 50.400798122061275}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t        ActiveSceneChangedEventArgs activeSceneChangedEventArgs = ReferencePool.Acquire<ActiveSceneChangedEventArgs>();\n        activeSceneChangedEventArgs.LastActiveScene = lastActiveScene;\n        activeSceneChangedEventArgs.ActiveScene = activeScene;\n        return activeSceneChangedEventArgs;\n    }", "CodeBleu_score": 81.50618869411362}]}
{"instance_id": "aba13f34251c", "generation_result": [{"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t    if (!IsValidSceneAssetName(sceneAssetName)) {\n        Log.Error(\"Scene asset name '{0}' is invalid.\", sceneAssetName);\n        return;\n    }\n\n    m_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 46.594787589572185}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t\tif (string.IsNullOrEmpty(sceneAssetName)) {\n\t\tLog.Error(\"Scene asset name is invalid.\");\n\t\treturn;\n\t}\n\n\tif (!sceneAssetName.StartsWith(\"Assets/\") || !sceneAssetName.EndsWith(\".unity\")) {\n\t\tLog.Error(\"Scene asset name is invalid. It should start with 'Assets/' and end with '.unity'.\", sceneAssetName);\n\t\treturn;\n\t}\n\n\tSceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 68.21237254037929}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t    if (string.IsNullOrEmpty(sceneAssetName)) {\n        Log.Error(\"Scene asset name is invalid.\");\n        return;\n    }\n\n    if (!sceneAssetName.StartsWith(\"Assets/\") || !sceneAssetName.EndsWith(\".unity\")) {\n        Log.Error(\"Scene asset name '{0}' is invalid.\", sceneAssetName);\n        return;\n    }\n\n    SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 75.71361134830848}]}
{"instance_id": "3fe99fba3ce8", "generation_result": [{"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\tif (!IsRunningCommandlet()) {\n\t\tIHotPatcherModule& HotPatcherModule = FModuleManager::GetModuleChecked<IHotPatcherModule>(\"HotPatcher\");\n\t\tHotPatcherModule.Get().RegisterFeature(this);\n\t}\n}", "CodeBleu_score": 18.610406596757723}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\t// Get the modular feature manager\n\tIModularFeatures& ModularFeatureManager = IModularFeatures::Get();\n\t// Register the callback for when modular features are registered\n\tModularFeatureManager.OnModularFeatureRegistered().AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n\t// Register the callback for when modular features are unregistered\n\tModularFeatureManager.OnModularFeatureUnregistered().AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n\t// Iterate over the registered modular features\n\tfor (const auto& RegisteredModularFeature : ModularFeatureManager.GetRegisteredModularFeatures()) {\n\t\t// Try to get the binaries patch feature from the registered modular feature\n\t\tIBinariesPatchFeature* BinariesPatchFeature = RegisteredModularFeature->GetFeature<IBinariesPatchFeature>();\n\t\t// If the binaries patch feature is valid\n\t\tif (BinariesPatchFeature != nullptr) {\n\t\t\t// Add the binaries patch feature name to the binaries patch feature enumerations\n\t\t\tBinariesPatchFeatureNames.Emplace(BinariesPatchFeature->GetName());\n\t\t\t// Add the binaries patch feature to the binaries patch feature map\n\t\t\tBinariesPatchFeatures.Emplace(BinariesPatchFeature->GetName(), BinariesPatchFeature);\n\t\t}\n\t}\n}", "CodeBleu_score": 44.85051357376902}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\tUE_LOG(LogHotPatcher,Display,TEXT(\"BinariesPatchFeature StartupModule\"));\n\t\n\t// Get the binaries patch feature interface\n\tIBinariesPatchFeature* BinariesPatchFeatureInterface = IModularFeatures::Get().GetModularFeature<IBinariesPatchFeature>(IBinariesPatchFeature::GetModularFeatureName());\n\tif (BinariesPatchFeatureInterface)\n\t{\n\t\tUE_LOG(LogHotPatcher,Display,TEXT(\"BinariesPatchFeature Interface Found\"));\n\t\t// Add the binaries patch feature implementation names to the enumerations\n\t\tBinariesPatchFeatureInterface->AppendFeatureValues(BinariesPatchFeatureValues);\n\t}\n\telse\n\t{\n\t\tUE_LOG(LogHotPatcher,Error,TEXT(\"BinariesPatchFeature Interface Not Found\"));\n\t}\n\n\t// Setup the callbacks for when modular features are registered or unregistered\n\tIModularFeatures::Get().OnModularFeatureRegistered().AddLambda([this](FName InterfaceName){\n\t\tif (InterfaceName == IBinariesPatchFeature::GetModularFeatureName())\n\t\t{\n\t\t\t// Get the binaries patch feature interface\n\t\t\tIBinariesPatchFeature* BinariesPatchFeatureInterface = IModularFeatures::Get().GetModularFeature<IBinariesPatchFeature>(InterfaceName);\n\t\t\tif (BinariesPatchFeatureInterface)\n\t\t\t{\n\t\t\t\tUE_LOG(LogHotPatcher,Display,TEXT(\"BinariesPatchFeature Interface Found\"));\n\t\t\t\t// Add the binaries patch feature implementation names to the enumerations\n\t\t\t\tBinariesPatchFeatureInterface->AppendFeatureValues(BinariesPatchFeatureValues);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tUE_LOG(LogHotPatcher,Error,TEXT(\"BinariesPatchFeature Interface Not Found\"));\n\t\t\t}\n\t\t}\n\t});\n\tIModularFeatures::Get().OnModularFeatureUnregistered().AddLambda([this](FName InterfaceName){\n\t\tif (InterfaceName ==", "CodeBleu_score": 45.228866400033}]}
{"instance_id": "c702cc0f74b5", "generation_result": [{"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> Result;\n\tif (Commandline.IsEmpty()) {\n\t\treturn Result;\n\t}\n\tTArray<FString> Tokens, Switches;\n\tTMap<FString, FString> Params;\n\tTArray<FString> ParamVals;\n\t// Parse command line\n\tUCommandlet::ParseCommandLine(*Commandline, Tokens, Switches, Params, ParamVals);\n\t// Find the token\n\tif (Params.Contains(Token)) {\n\t\t// Split the values by commas\n\t\tResult = Params[Token].ParseIntoArray(TEXT(\",\"), true);\n\t}\n\treturn Result;\n}", "CodeBleu_score": 52.25064083388471}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> Result;\n\tTMap<FString,FString> CommandlineMap;\n\tFString CommandlineString = Commandline;\n\t// \u53bb\u6389\u524d\u540e\u7684\u7a7a\u683c\n\tCommandlineString.TrimStartAndEndInline();\n\t// \u5206\u5272\u547d\u4ee4\u884c\n\tTArray<FString> CommandlineArray;\n\tCommandlineString.ParseIntoArray(CommandlineArray,TEXT(\" \"),true);\n\t// \u8f6c\u6362\u4e3amap\n\tfor (const auto& CommandlineItem:CommandlineArray) {\n\t\tTArray<FString> KeyValue;\n\t\tCommandlineItem.ParseIntoArray(KeyValue,TEXT(\"=\"),true);\n\t\tif (KeyValue.Num() == 2)\n\t\t{\n\t\t\tCommandlineMap.Add(KeyValue[0],KeyValue[1]);\n\t\t}\n\t}\n\t// \u5224\u65ad\u662f\u5426\u5b58\u5728\n\tif (CommandlineMap.Contains(Token))\n\t{\n\t\t// \u627e\u5230\u4e86\n\t\tCommandlineMap[Token].ParseIntoArray(Result,TEXT(\",\"),true);\n\t}\n\treturn Result;\n}", "CodeBleu_score": 49.560426110253196}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> Result;\n\n\tTMap<FString, FString> ParamsMap;\n\tif (FParse::Token(Commandline, 0, ParamsMap, true))\n\t{\n\t\tFString TokenValue;\n\t\tif (ParamsMap.Contains(Token))\n\t\t{\n\t\t\tTokenValue = ParamsMap.FindChecked(Token);\n\t\t}\n\t\tif (!TokenValue.IsEmpty())\n\t\t{\n\t\t\tTokenValue.ParseIntoArray(Result, TEXT(\",\"), true);\n\t\t}\n\t}\n\treturn Result;\n}", "CodeBleu_score": 55.38209646933545}]}
{"instance_id": "6a6382275b1d", "generation_result": [{"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\tFString CommandletName = FParse::Param(FCommandLine::Get(), TEXT(\"Commandlet\"));\n\treturn !CommandletName.IsEmpty() && FCString::Stricmp(*CommandletName, TEXT(\"cook\")) == 0;\n}", "CodeBleu_score": 26.32844049862732}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\tif (IsRunningCommandlet()) {\n\t\tFString CommandletName = GetCommandletName();\n\t\tif (!CommandletName.IsEmpty() && CommandletName.Compare(TEXT(\"cook\"), ESearchCase::IgnoreCase) == 0) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 27.160267083530375}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\tFString CommandletName;\n\tif (FApp::IsUnattended() && FParse::Value(FCommandLine::Get(), TEXT(\"-run=\"), CommandletName)) {\n\t\tif (CommandletName.Len() > 0) {\n\t\t\treturn CommandletName.ToLower().Contains(TEXT(\"cook\"));\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 30.277084171251694}]}
{"instance_id": "6888ed47b6be", "generation_result": [{"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t\tFCommandletHelper::Update(Params);\n}", "CodeBleu_score": 8.991975459972414}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t\tif (GEngine->IsServerless()) {\n\t\tFString ProjectName = FApp::GetProjectName();\n\t\tFString CommandletName = FApp::GetName();\n\t\tif (CommandletName.IsEmpty())\n\t\t{\n\t\t\tCommandletName = TEXT(\"Unknown\");\n\t\t}\n\t\tif (ProjectName.IsEmpty())\n\t\t{\n\t\t\tProjectName = TEXT(\"Unknown\");\n\t\t}\n\t\tProjectName = FString::Printf(TEXT(\"%s_%s\"), *ProjectName, *CommandletName);\n\t\tFCommandletHelper::InitializeServerlessCounter(ProjectName, TEXT(\"HotPatcher\"));\n\t}\n}", "CodeBleu_score": 31.154139729299292}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t\tif (FParse::Param(FCommandLine::Get(),TEXT(\"serverless\")))\n\t{\n\t\tFString CommandletName = GetType()->GetName();\n\t\tFString ProjectName = FApp::GetProjectName();\n\t\tif(CommandletName.Contains(TEXT(\"Commandlet\")))\n\t\t{\n\t\t\tProjectName = FString::Printf(TEXT(\"%s_%s\"),*ProjectName,*CommandletName);\n\t\t}\n\t\t\n\t\tFString ProjectVersion = FApp::GetProjectVersion();\n\t\tFString ServerlessCountingURL = FString::Printf(TEXT(\"%s?project=%s&version=%s\"),*FCommandLine::Get(),*ProjectName,*ProjectVersion);\n\t\tFString ServerlessResponse;\n\t\tif(FHttpModule::Get().IsHttpEnabled())\n\t\t{\n\t\t\tTSharedRef<IHttpRequest, ESPMode::ThreadSafe> HttpRequest = FHttpModule::Get().CreateRequest();\n\t\t\tHttpRequest->SetURL(ServerlessCountingURL);\n\t\t\tHttpRequest->SetVerb(TEXT(\"GET\"));\n\t\t\tHttpRequest->ProcessRequest();\n\t\t\tif(HttpRequest->GetResponse().IsValid())\n\t\t\t{\n\t\t\t\tServerlessResponse = HttpRequest->GetResponse()->GetContentAsString();\n\t\t\t}\n\t\t}\n\t\tUE_LOG(LogHotPatcher,Log,TEXT(\"Serverless Counting Response: %s\"),*ServerlessResponse);\n\t}\n}", "CodeBleu_score": 45.52843527105257}]}
{"instance_id": "c467af995f29", "generation_result": [{"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tFString PlatformName = TargetPlatform->PlatformName();\n\treturn PlatformName.Contains(TEXT(\"IOS\"), ESearchCase::IgnoreCase) || PlatformName.Contains(TEXT(\"Mac\"), ESearchCase::IgnoreCase) || PlatformName.Contains(TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 36.0072786304014}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tif (TargetPlatform) {\n\t\tFString PlatformName = TargetPlatform->PlatformName();\n\t\tif (PlatformName.StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) ||\n\t\t\tPlatformName.StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) ||\n\t\t\tPlatformName.StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 39.90092585730354}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tif (TargetPlatform) {\n\t\tFString PlatformName = TargetPlatform->PlatformName();\n\t\treturn PlatformName.StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n\t}\n\treturn false;\n}", "CodeBleu_score": 38.48199412208664}]}
{"instance_id": "3df342b1c6f8", "generation_result": [{"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\tconst UObject* ObjectCDO = Object->GetClass();\n\tif (ObjectCDO)\n\t{\n\t\tconst UObject* Outermost = ObjectCDO->GetOutermost();\n\t\tif (Outermost)\n\t\t{\n\t\t\t// if the outermost package is not in the cooker set, but is in the all set, and does not always require post-load processing,\n\t\t\t// add the object to the package objects map and freeze objects list\n\t\t\tUPackage* OutermostPackage = Outermost->GetOutermost();\n\t\t\tif (OutermostPackage)\n\t\t\t{\n\t\t\t\t// If the package is not in the cooker set, but is in the all set, and does not always require post-load processing,\n\t\t\t\t// add the object to the package objects map and freeze objects list\n\t\t\t\tif (!CookerAssetsSet.Contains(OutermostPackage) && AllAssetsSet.Contains(OutermostPackage) && !OutermostPackage->AlwaysNeedsPostLoad())\n\t\t\t\t{\n\t\t\t\t\tTArray<UObject*>& PackageObjects = PackageObjectsMap.FindOrAdd(OutermostPackage);\n\t\t\t\t\tPackageObjects.Add((UObject*)Object);\n\t\t\t\t\tFreezeObjects.Add((UObject*)Object);\n\t\t\t\t\t// clear the RF_NeedPostLoad and RF_NeedPostLoadSubobjects flags from the object\n\t\t\t\t\tObject->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 45.1668196868586}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\tcheck(Object);\n\tcheck(Object->GetOutermost());\n\n\tUPackage* Outermost = Object->GetOutermost();\n\n\tif (CookerAssetsSet.Contains(Outermost))\n\t{\n\t\treturn;\n\t}\n\n\tif (AllAssetsSet.Contains(Outermost) && !Outermost->HasAnyPackageFlags(PKG_AlwaysCook))\n\t{\n\t\tPackageObjectsMap.Add(Outermost, TArray<const UObjectBase*>());\n\t\tFreezeObjects.Add(Object);\n\t}\n\n\tObject->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n}", "CodeBleu_score": 36.4648917313636}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\tif (Object->HasAnyFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects))\n\t{\n\t\tconst UObject* Outer = Object->GetOuter();\n\t\tif (Outer)\n\t\t{\n\t\t\tconst UPackage* Package = Outer->GetOutermost();\n\t\t\tif (Package)\n\t\t\t{\n\t\t\t\tconst FName PackageName = Package->GetFName();\n\t\t\t\tif (CookerAssetsSet.Contains(PackageName))\n\t\t\t\t{\n\t\t\t\t\t// If the package is in CookerAssetsSet, it is safe to skip this object.\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (AllAssetsSet.Contains(PackageName) && !Package->AlwaysNeedsPostLoad())\n\t\t\t\t{\n\t\t\t\t\t// If the package is in AllAssetsSet and does not always require post-load processing,\n\t\t\t\t\t// add the object to the PackageObjectsMap and FreezeObjects list.\n\t\t\t\t\tPackageObjectsMap.Add(PackageName, Object);\n\t\t\t\t\tFreezeObjects.Add(Object);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Clear the RF_NeedPostLoad and RF_NeedPostLoadSubobjects flags from the object.\n\t\tObject->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n\t}\n}", "CodeBleu_score": 41.21596193085646}]}
{"instance_id": "fac8b2878c3c", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\t\tif (Record.GetType() == ERecordType::ExportBulkData)\n\t\t{\n\t\t\tFExportBulkDataRecord* ExportBulkDataRecord = Record.Cast<FExportBulkDataRecord>();\n\t\t\tFExportBulkData& ExportBulkData = ExportBulkDataRecord->GetBulkData();\n\t\t\tif (ExportBulkData.IsExported())\n\t\t\t{\n\t\t\t\tContext.ExportBuffers.Add(ExportBulkData.GetExportBuffer());\n\t\t\t}\n\t\t}\n\t\telse if (Record.GetType() == ERecordType::BulkData)\n\t\t{\n\t\t\tFBulkDataRecord* BulkDataRecord = Record.Cast<FBulkDataRecord>();\n\t\t\tFCompressedChunk* BulkData = BulkDataRecord->GetBulkData();\n\t\t\tif (BulkData)\n\t\t\t{\n\t\t\t\tFString Filename = BulkData->GetFilename();\n\t\t\t\tif (!Filename.IsEmpty())\n\t\t\t\t{\n\t\t\t\t\tFFileRecord* FileRecord = Context.Files.Find(Filename);\n\t\t\t\t\tif (!FileRecord)\n\t\t\t\t\t{\n\t\t\t\t\t\tFileRecord = &Context.Files.Add(Filename, FFileRecord());\n\t\t\t\t\t}\n\t\t\t\t\tFileRecord->Buffer = BulkData->GetBuffer();\n\t\t\t\t\tFileRecord->Regions = BulkData->GetRegions();\n\t\t\t\t\tFileRecord->Flags = BulkData->GetFlags();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 39.67684445775881}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\t\t// Iterate through bulk data records.\n\t\tfor (FRecord* BulkDataRecord : Record.BulkData)\n\t\t{\n\t\t\t// Get the bulk data type.\n\t\t\tconst EBulkDataType BulkDataType = BulkDataRecord->GetBulkDataType();\n\t\t\tswitch (BulkDataType)\n\t\t\t{\n\t\t\tcase EBulkDataType::Export:\n\t\t\t\t// Add the export buffer to the corresponding export buffer list in the context.\n\t\t\t\tContext.ExportBuffers.Add(BulkDataRecord->GetBulkData());\n\t\t\t\tbreak;\n\t\t\tcase EBulkDataType::Asset:\n\t\t\t\t// Create an output file entry in the context's output files, setting its properties such as filename, buffer, regions, and flags for sidecar status and hash contribution.\n\t\t\t\tContext.OutputFiles.Add(FOutputFile(BulkDataRecord->GetBulkData(), BulkDataRecord->GetBulkDataName(), BulkDataRecord->GetBulkDataFlags()));\n\t\t\t\tbreak;\n\t\t\tcase EBulkDataType::Package:\n\t\t\t\t// Create an output file entry in the context's output files, setting its properties such as filename, buffer, regions, and flags for sidecar status and hash contribution.\n\t\t\t\tContext.OutputFiles.Add(FOutputFile(BulkDataRecord->GetBulkData(), BulkDataRecord->GetBulkDataName(), BulkDataRecord->GetBulkDataFlags()));\n\t\t\t\tbreak;\n\t\t\tcase EBulkDataType::PackageRedirector:\n\t\t\t\t// Create an output file entry in the context's output files, setting its properties such as filename, buffer, regions, and flags for sidecar status and hash contribution.\n\t\t\t\tContext.OutputFiles.Add(FOutputFile(BulkDataRecord->GetBulkData(), BulkDataRecord->GetBulkDataName(), BulkDataRecord->GetBulkDataFlags()));\n\t\t\t\tbreak;\n\t\t\tcase EBulkDataType::PackageGuid:\n\t\t\t\t// Create an output file entry in the context's output files, setting its", "CodeBleu_score": 39.742095016437275}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\t\t// check if the record is a bulk data record\n\t\tif (Record.Type == ERecordType::BulkData)\n\t\t{\n\t\t\t// get the bulk data record\n\t\t\tFRecordBulkData& BulkDataRecord = static_cast<FRecordBulkData&>(Record);\n\n\t\t\t// get the bulk data\n\t\t\tFExportBulkData& BulkData = BulkDataRecord.BulkData;\n\n\t\t\t// check if the bulk data is appended to an export\n\t\t\tif (BulkData.ExportIndex != -1)\n\t\t\t{\n\t\t\t\t// get the export\n\t\t\t\tFExport& Export = Context.Exports[BulkData.ExportIndex];\n\n\t\t\t\t// check if the export is a bulk data export\n\t\t\t\tif (Export.Type == EExportType::BulkData)\n\t\t\t\t{\n\t\t\t\t\t// get the bulk data export\n\t\t\t\t\tFExportBulkData& BulkDataExport = static_cast<FExportBulkData&>(Export);\n\n\t\t\t\t\t// add the bulk data to the export's buffer list\n\t\t\t\t\tBulkDataExport.BulkDataBuffer.Add(BulkData);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// create an output file entry for the bulk data\n\t\t\t\t\tFOutputFile& OutputFile = Context.OutputFiles.AddDefault();\n\n\t\t\t\t\t// set the output file's properties\n\t\t\t\t\tOutputFile.Filename = BulkData.Filename;\n\t\t\t\t\tOutputFile.Buffer = BulkData.Buffer;\n\t\t\t\t\tOutputFile.Regions = BulkData.Regions;\n\t\t\t\t\tOutputFile.Flags = BulkData.Flags;\n\t\t\t\t\tOutputFile.Hash = BulkData.Hash;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 45.255619359790444}]}
{"instance_id": "bf46051105c9", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tif (Record.IsCompleted()) {\n\t\treturn;\n\t}\n\tif (Record.IsFooterAdded()) {\n\t\treturn;\n\t}\n\t\n\tRecord.AddFooter(Context.GetPackageFileTag());\n}", "CodeBleu_score": 22.87573497993786}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tif (Record.Type == ERecordType::Diff) {\n\t\tif (Record.Diff.IsCompleted) {\n\t\t\treturn;\n\t\t}\n\t}\n\telse {\n\t\tif (Record.Diff.IsCompleted) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tFString Footer;\n\tFooter.AppendChar(FHotPatcherCompressionUtils::PackageFileTag);\n\tFExportBuffer FooterBuffer;\n\tFooterBuffer.Buffer = TCHAR_TO_UTF8(*Footer);\n\tFooterBuffer.BufferSize = Footer.Len();\n\tFooterBuffer.BufferType = EBufferType::Footer;\n\tRecord.Diff.ExportBuffers.Add(FooterBuffer);\n}", "CodeBleu_score": 40.37885923970697}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tif (Record.ExportArchive.IsValid()) {\n\t\tif (Record.ExportArchive->IsCompleted()) {\n\t\t\treturn;\n\t\t}\n\t\tRecord.ExportArchive->AddFooter();\n\t\tRecord.ExportArchive->Close();\n\t}\n\n\tif (Record.ExportBuffers.Num() > 0) {\n\t\tFBufferArchive Footer;\n\t\tFooter << FPackageFileSummary::PackageFileTag;\n\t\tfor (int32 Index = 0; Index < Record.ExportBuffers.Num(); ++Index) {\n\t\t\tRecord.ExportBuffers[Index].Append(Footer);\n\t\t}\n\t}\n}", "CodeBleu_score": 36.706231767470356}]}
{"instance_id": "c0966eddf1ee", "generation_result": [{"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n\tif (UCharacterMovementComponent * CharMoveComp = Cast<UCharacterMovementComponent>(Character->GetCharacterMovement())) {\n\t\tUGDCharacterMovementComponent * GDCharMoveComp = Cast<UGDCharacterMovementComponent>(CharMoveComp);\n\n\t\tbSprinting = GDCharMoveComp->bWantsToSprint;\n\t\tbADS = GDCharMoveComp->bWantsToADS;\n\t}\n}", "CodeBleu_score": 64.2721148838529}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n\tif (Character) {\n\t\tUGDCharacterMovementComponent * MovementComponent = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\t\tif (MovementComponent) {\n\t\t\tbSprinting = MovementComponent->bSprinting;\n\t\t\tbADS = MovementComponent->bADS;\n\t\t}\n\t}\n}", "CodeBleu_score": 71.92357650456499}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n\tif (UGDCharacterMovementComponent * GDCharacterMovementComponent = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement())) {\n\t\tbSprinting = GDCharacterMovementComponent->bRequestedSprinting;\n\t\tbAimingDownSights = GDCharacterMovementComponent->bRequestedAimingDownSights;\n\t}\n}", "CodeBleu_score": 67.8544311802477}]}
{"instance_id": "f73106356e9d", "generation_result": [{"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t    // Validate the ability system component and attribute\n    if (!AbilitySystemComponent || !Attribute.IsValid()) {\n        // Remove the task from the root and return null\n        RemoveFromRoot();\n        return nullptr;\n    }\n\n    // Initialize the task\n    Initialize(AbilitySystemComponent, Attribute);\n\n    // Add a delegate to handle attribute value changes\n    AbilitySystemComponent->OnAttributeChangeCallback.AddUniqueDynamic(this, &UAsyncTaskAttributeChanged::HandleAttributeChange);\n\n    // Return this task\n    return this;\n}", "CodeBleu_score": 32.649022430866076}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t    if (AbilitySystemComponent == nullptr || Attribute.IsValid() == false) {\n        UE_LOG(LogTemp, Warning, TEXT(\"UAsyncTaskAttributeChanged::ListenForAttributeChange - AbilitySystemComponent or Attribute is invalid\"));\n        return nullptr;\n    }\n    \n    UAsyncTaskAttributeChanged* Task = NewObject<UAsyncTaskAttributeChanged>();\n    Task->AbilitySystemComponent = AbilitySystemComponent;\n    Task->Attribute = Attribute;\n    Task->Initialize();\n    return Task;\n}", "CodeBleu_score": 52.52123784721978}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\tif (AbilitySystemComponent == nullptr || Attribute.IsValid() == false) {\n\t\treturn nullptr;\n\t}\n\n\tUAsyncTaskAttributeChanged* NewTask = NewObject<UAsyncTaskAttributeChanged>(this);\n\tNewTask->AbilitySystemComponent = AbilitySystemComponent;\n\tNewTask->Attribute = Attribute;\n\tNewTask->AddToRoot();\n\n\tAbilitySystemComponent->OnGameplayAttributeValueChangeDelegate.AddUObject(NewTask, &UAsyncTaskAttributeChanged::OnGameplayAttributeValueChange);\n\n\treturn NewTask;\n}", "CodeBleu_score": 54.063261437376276}]}
{"instance_id": "a581424c2b31", "generation_result": [{"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (ASC) {\n\t\tASC->RemoveGameplayEffectAddedDelegate_Handle(HandleGameplayEffectAdded);\n\t\tASC->RemoveCooldownTagEventDelegate_Handle(HandleCooldownTagEvent);\n\t}\n\tMarkAsReadyToDestroy();\n\tSetReadyToDestroy();\n}", "CodeBleu_score": 27.239454685128994}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (ASC != nullptr) {\n\t\tASC->RemoveGameplayEffectAddedDelegate_Handle(GameplayEffectAddedHandle);\n\t\tASC->RemoveGameplayCueAddedDelegate_Handle(GameplayCueAddedHandle);\n\t\tASC->RemoveGameplayCueRemovedDelegate_Handle(GameplayCueRemovedHandle);\n\t\tASC->RemoveCooldownTagEventDelegate_Handle(CooldownTagEventHandle);\n\t}\n\tSetReadyToDestroy();\n\tMarkAs", "CodeBleu_score": 31.137640784775204}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t    if (ASC) {\n        ASC->OnGameplayEffectAddedDelegate.RemoveAll(this);\n        ASC->OnGameplayEffectRemovedDelegate.RemoveAll(this);\n        ASC->OnGameplayEffectTagCountChangeDelegate.RemoveAll(this);\n    }\n    MarkAsReadyToDestroy();\n}", "CodeBleu_score": 29.899451640669433}]}
{"instance_id": "5029df3a2033", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t}", "CodeBleu_score": 4.472107289483353}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t}", "CodeBleu_score": 4.472107289483353}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tif (EffectRemoved.Spec.GetLevel() > 0) {\n\t\tif (EffectRemoved.Spec.GetStackCount() > 0) {\n\t\t\tFGameplayTagContainer EffectTags;\n\t\t\tEffectRemoved.Spec.GetAllAssetAndGrantedTags(EffectTags);\n\t\t\tif (EffectTags.HasAny(EffectGameplayTag)) {\n\t\t\t\tFOnEffectStackChange OnEffectStackChange;\n\t\t\t\tOnEffectStackChange.EffectHandle = EffectRemoved.Handle;\n\t\t\t\tOnEffectStackChange.StackChange = -1;\n\t\t\t\tOnEffectStackChange.EffectCauser = EffectRemoved.EffectCauser.Get();\n\t\t\t\tOnEffectStackChange.EffectStackChangeTags = EffectTags;\n\t\t\t\tOnEffectStackChange.EffectSpec = EffectRemoved.Spec;\n\t\t\t\tOnEffectStackChange.EffectSource = EffectRemoved.EffectSource;\n\t\t\t\tOnEffectStackChange.EffectContext = EffectRemoved.EffectContext;\n\t\t\t\tOnEffectStackChange.ApplyFullSnapshot = false;\n\t\t\t\tOnEffectStackChange.EffectStackChangeReason = EffectRemoved.StackChangeReason;\n\t\t\t\tOnEffectStackChange.EffectStackChangeSource = EffectRemoved.StackChangeSource;\n\t\t\t\tOnEffectStackChange.EffectStackChangeTime = EffectRemoved.StackChangeTime;\n\t\t\t\tOnEffectStackChange.EffectStackChangeId = EffectRemoved.StackChangeId;\n\t\t\t\tOnEffectStackChange.EffectStackChangeData = EffectRemoved.StackChangeData;\n\t\t\t\tOnEffectStackChange.EffectStackChangeOriginalEffectContext = EffectRemoved.StackChangeOriginalEffectContext;\n\t\t\t\tOnEffectStackChange.EffectStackChangeOriginalEffectSpec = EffectRemoved.StackChangeOriginalEffectSpec;\n\t\t\t\tOnEffectStackChange.EffectStackChangeOriginalEffectSource = EffectRemoved.StackChangeOriginalEffectSource;\n\t\t\t\tOnEffectStackChange.EffectStackChangeOriginalEffectCauser = EffectRemoved.StackChangeOriginalEffectCauser;\n\t\t\t\tOnEffectStackChange.EffectStackChangeOriginalEffectContext = EffectRemoved.StackChangeOriginalEffect", "CodeBleu_score": 41.234176276448274}]}
{"instance_id": "cb1d2823d203", "generation_result": [{"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tif (AbilitySystemComponent == nullptr) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange: AbilitySystemComponent is nullptr.\"));\n\t\treturn nullptr;\n\t}\n\tif (!InEffectGameplayTag.IsValid()) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange: InEffectGameplayTag is invalid.\"));\n\t\treturn nullptr;\n\t}\n\n\tUAsyncTaskEffectStackChanged * Listener = NewObject<UAsyncTaskEffectStackChanged>();\n\tListener->AbilitySystemComponent = AbilitySystemComponent;\n\tListener->EffectGameplayTag = InEffectGameplayTag;\n\n\t// Register callbacks\n\tListener->OnGameplayEffectStackChangeDelegateHandle = AbilitySystemComponent->OnGameplayEffectStackChange.AddUObject(Listener, &UAsyncTaskEffectStackChanged::OnGameplayEffectStackChange);\n\tListener->OnGameplayEffectRemovedDelegateHandle = AbilitySystemComponent->OnGameplayEffectRemoved.AddUObject(Listener, &UAsyncTaskEffectStackChanged::OnGameplayEffectRemoved);\n\n\treturn Listener;\n}", "CodeBleu_score": 55.167358807085456}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tif (!AbilitySystemComponent) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange: AbilitySystemComponent is null\"));\n\t\treturn nullptr;\n\t}\n\tif (!InEffectGameplayTag.IsValid()) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange: InEffectGameplayTag is not valid\"));\n\t\treturn nullptr;\n\t}\n\n\tUAsyncTaskEffectStackChanged * NewTask = NewObject<UAsyncTaskEffectStackChanged>();\n\tNewTask->AbilitySystemComponent = AbilitySystemComponent;\n\tNewTask->EffectGameplayTag = InEffectGameplayTag;\n\n\tNewTask->OnGameplayEffectStackChangeDelegateHandle = AbilitySystemComponent->OnGameplayEffectStackChange.AddUObject(NewTask, &UAsyncTaskEffectStackChanged::OnGameplayEffectStackChange);\n\n\treturn NewTask;\n}", "CodeBleu_score": 53.97994172560791}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tUAsyncTaskEffectStackChanged * AsyncTaskEffectStackChanged = NewObject<UAsyncTaskEffectStackChanged>();\n\n\tif (AbilitySystemComponent && AbilitySystemComponent->IsValidLowLevel() && AbilitySystemComponent->GetOwner()) {\n\t\tAsyncTaskEffectStackChanged->AbilitySystemComponent = AbilitySystemComponent;\n\t\tAsyncTaskEffectStackChanged->EffectGameplayTag = InEffectGameplayTag;\n\t\tAsyncTaskEffectStackChanged->OnGameplayEffectStackChange = FOnGameplayEffectStackChange::CreateUObject(AsyncTaskEffectStackChanged, &UAsyncTaskEffectStackChanged::OnGameplayEffectStackChange);\n\t\tAsyncTaskEffectStackChanged->OnGameplayEffectStackChange.AddUObject(AsyncTaskEffectStackChanged, &UAsyncTaskEffectStackChanged::OnGameplayEffectStackChange);\n\t\tAsyncTaskEffectStackChanged->AbilitySystemComponent->RegisterGameplayTagEvent(InEffectGameplayTag, AsyncTaskEffectStackChanged->OnGameplayEffectStackChange);\n\t\tAsyncTaskEffectStackChanged->AbilitySystemComponent->RegisterGameplayTagEvent(InEffectGameplayTag, AsyncTaskEffectStackChanged->OnGameplayEffectStackChange);\n\t}\n\telse {\n\t\tAsyncTaskEffectStackChanged->EndTask();\n\t\treturn nullptr;\n\t}\n\n\treturn AsyncTaskEffectStackChanged;\n}", "CodeBleu_score": 57.85326980902536}]}
{"instance_id": "6659c2592e93", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tif (EffectRemoved.Spec.EffectStacking == EGameplayEffectStackingType::AggregateBySource) {\n\t\tUAbilitySystemComponent* Target = EffectRemoved.Target.Get();\n\t\tif (Target) {\n\t\t\tif (EffectRemoved.Spec.GetLevel() > 0) {\n\t\t\t\tFGameplayTagContainer SourceTags;\n\t\t\t\tEffectRemoved.Spec.GetAllAssetTags(SourceTags);\n\t\t\t\tif (SourceTags.HasAny(EffectGameplayTag)) {\n\t\t\t\t\tFStackChangeEvent Event;\n\t\t\t\t\tEvent.EffectHandle = EffectRemoved.Handle;\n\t\t\t\t\tEvent.StackChange = -1;\n\t\t\t\t\tEvent.StackChangeReason = EStackChangeReason::StackRemoved;\n\t\t\t\t\tEvent.StackChangeEffect = &EffectRemoved.Spec;\n\t\t\t\t\tTarget->BroadcastStackChange(EffectGameplayTag, Event);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 50.62562032424302}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t}", "CodeBleu_score": 4.472107289483353}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t}", "CodeBleu_score": 4.472107289483353}]}
{"instance_id": "a8f7dcc3f1fa", "generation_result": [{"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\tif (bActivateAbilityOnGranted) {\n\t\tif (ActorInfo->AbilitySystemComponent.IsValid()) {\n\t\t\tActorInfo->AbilitySystemComponent->TryActivateAbilityByClass(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 62.304231417134694}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\n\tif (ActivateAbilityOnGranted) {\n\t\tif (ActorInfo->AbilitySystemComponent.IsValid()) {\n\t\t\tActorInfo->AbilitySystemComponent->TryActivateAbility(Spec);\n\t\t}\n\t}\n}", "CodeBleu_score": 72.976713978359}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\n\tif (ActivateAbilityOnGranted) {\n\t\tif (ActorInfo->AbilitySystemComponent.IsValid()) {\n\t\t\tActorInfo->AbilitySystemComponent->TryActivateAbility(Spec);\n\t\t}\n\t}\n}", "CodeBleu_score": 72.976713978359}]}
{"instance_id": "72a7ce4b848c", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tif (!bInterrupted && bBroadcastAbilityTaskDelegates) {\n\t\tOnPlayMontageAndWaitForEventDelegate.Broadcast(AbilitySystemComponent, GameplayEventData);\n\t}\n\tEndTask();\n}", "CodeBleu_score": 55.974318703534145}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tif (bInterrupted) {\n\t\treturn;\n\t}\n\tif (ShouldBroadcastAbilityTaskDelegates()) {\n\t\tFGameplayAbilityTargetData_SingleTarget TargetData;\n\t\tTargetData.TargetObject = GetAvatarActor();\n\t\tOnTargetDataReady.Broadcast(TargetData);\n\t}\n\tEndTask();\n}", "CodeBleu_score": 53.860811547854624}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tif (!bInterrupted && ShouldBroadcastAbilityTaskDelegates()) {\n\t\tOnTargetAbilitySystemComponent.Broadcast(AbilitySystemComponent, this);\n\t\tOnTargetAbilitySystemComponentWithEventData.Broadcast(AbilitySystemComponent, this, FGameplayEventData());\n\t}\n\tEndTask();\n}", "CodeBleu_score": 52.58147979332374}]}
{"instance_id": "cc1cdd579bd4", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tif (AbilityEnded && StopWhenAbilityEnds) {\n\t\tif (IsValid(Ability)) {\n\t\t\tAbility->RemoveCancellationHandler(CancellationToken);\n\t\t}\n\t\tif (IsValid(AbilitySystemComponent)) {\n\t\t\tAbilitySystemComponent->RemoveEventTagContainerDelegate(Ability, EventTagContainerDelegateHandle);\n\t\t}\n\t}\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 57.3198167143715}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tif (AbilitySystemComponent) {\n\t\tif (AbilitySystemComponent->GetAnimInstance() == AnimInstance) {\n\t\t\tAbilitySystemComponent->SetAnimInstance(nullptr);\n\t\t}\n\n\t\tif (AbilityEnded && StopWhenAbilityEnds) {\n\t\t\tAbilitySystemComponent->CurrentMontageStop();\n\t\t}\n\n\t\tif (EventTagContainerDelegateHandle.IsValid()) {\n\t\t\tAbilitySystemComponent->ClearTagContainerDelegate(EventTagContainerDelegateHandle);\n\t\t}\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 54.09717944540684}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tif (AbilityEnded && StopWhenAbilityEnds) {\n\t\tif (AbilitySystemComponent != nullptr && AbilitySystemComponent->AnimInstance != nullptr && MontageToPlay != nullptr && AbilitySystemComponent->AnimInstance->Montage_IsPlaying(MontageToPlay)) {\n\t\t\tAbilitySystemComponent->AnimInstance->Montage_Stop(MontageToPlay->BlendOutTime);\n\t\t}\n\t}\n\n\tif (EventTagContainerDelegateHandle.IsValid()) {\n\t\tAbilitySystemComponent->ClearTagContainerDelegate(EventTagContainerDelegateHandle);\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 53.52550935948868}]}
{"instance_id": "5932070df16f", "generation_result": [{"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t    if (AbilitySystemComponent) {\n        if (AbilitySystemComponent->GetAnimInstance() && AbilitySystemComponent->GetAnimInstance()->Montage_IsPlaying(MontageToPlay)) {\n            FGameplayAbilityActorInfo* ActorInfo = AbilitySystemComponent->GetActorInfo();\n            if (ActorInfo) {\n                UAnimInstance* AnimInstance = AbilitySystemComponent->GetAnimInstance();\n                if (AnimInstance) {\n                    // Unbind delegates\n                    AnimInstance->Montage_OnMontageBlendingOutStarted.Remove(MontageBlendingOutStartedHandle);\n                    AnimInstance->Montage_OnMontageBlendingOutCompleted.Remove(MontageBlendingOutCompletedHandle);\n                    AnimInstance->Montage_OnMontageEnded.Remove(MontageEndedHandle);\n\n                    // Stop the montage\n                    AbilitySystemComponent->CurrentMontageStop(ActorInfo, MontageToPlay);\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}", "CodeBleu_score": 48.726005248567574}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tif (AbilitySystemComponent == nullptr) {\n\t\treturn false;\n\t}\n\tconst FGameplayAbilityActorInfo* ActorInfo = AbilitySystemComponent->GetActorInfo();\n\tif (ActorInfo == nullptr) {\n\t\treturn false;\n\t}\n\tUAnimInstance* AnimInstance = ActorInfo->GetAnimInstance();\n\tif (AnimInstance == nullptr) {\n\t\treturn false;\n\t}\n\tif (!AnimInstance->Montage_IsPlaying(MontageToPlay)) {\n\t\treturn false;\n\t}\n\tAnimInstance->Montage_Stop(MontageToPlay, AbilitySystemComponent);\n\tAnimInstance->OnMontageBlendingOut.Remove(MontageBlendingOutDelegateHandle);\n\tAnimInstance->OnMontageEnded.Remove(MontageEndedDelegateHandle);\n\treturn true;\n}", "CodeBleu_score": 55.91080780991522}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tif (AbilitySystemComponent == nullptr) {\n\t\treturn false;\n\t}\n\n\tFGameplayAbilityActorInfo* ActorInfo = AbilitySystemComponent->GetActorInfo();\n\tif (ActorInfo == nullptr) {\n\t\treturn false;\n\t}\n\n\tUAnimInstance* AnimInstance = ActorInfo->GetAnimInstance();\n\tif (AnimInstance == nullptr) {\n\t\treturn false;\n\t}\n\n\tif (AbilitySystemComponent->CurrentMontage != MontageToPlay) {\n\t\treturn false;\n\t}\n\n\tAnimInstance->Montage_Stop(MontageToPlay, 0.0f);\n\tAnimInstance->OnMontageBlendingOut.Unbind();\n\tAnimInstance->OnMontageEnded.Unbind();\n\n\treturn true;\n}", "CodeBleu_score": 54.47912612093295}]}
{"instance_id": "7049be7f0c75", "generation_result": [{"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSUPER::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\tif (OwnerComp.GetAIOwner() == nullptr) {\n\t\treturn;\n\t}\n\n\tconst APawn* AI = OwnerComp.GetAIOwner()->GetPawn();\n\tif (AI == nullptr) {\n\t\treturn;\n\t}\n\n\tAActor* Target = OwnerComp.GetBlackboardComponent()->GetValueAsObject(GetSelectedBlackboardKey());\n\tif (Target == nullptr) {\n\t\treturn;\n\t}\n\n\tconst float Distance = FVector::Dist(AI->GetActorLocation(), Target->GetActorLocation());\n\tconst bool bInRange = Distance <= MaxAttackRange;\n\n\tif (bInRange) {\n\t\tconst bool bCanSeeTarget = AI->LineOfSightTo(Target, nullptr, true, false, false, true, true, true);\n\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(GetSelectedBlackboardKey(), bCanSeeTarget);\n\t}\n\telse {\n\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(GetSelectedBlackboardKey(), false);\n\t}\n}", "CodeBleu_score": 47.66556561118054}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\tASBTService_CheckAttackRange* Node = Cast<ASBTService_CheckAttackRange>(this);\n\tif (Node) {\n\t\tNode->ExecuteTask(OwnerComp);\n\t}\n}", "CodeBleu_score": 21.704798308853846}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\t\n\tif (OwnerComp.GetAIOwner() == nullptr) {\n\t\treturn;\n\t}\n\n\tUObject* const Target = OwnerComp.GetBlackboardComponent()->GetValueAsObject(TargetKey.SelectedKeyName);\n\tif (Target == nullptr) {\n\t\treturn;\n\t}\n\n\tconst float Distance = FVector::Dist(OwnerComp.GetAIOwner()->GetPawn()->GetActorLocation(), Target->GetActorLocation());\n\tconst bool bInRange = Distance <= MaxAttackRange;\n\tconst bool bInFOV = OwnerComp.GetAIOwner()->LineOfSightTo(Target);\n\n\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(InRangeKey.SelectedKeyName, bInRange);\n\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(InFOVKey.SelectedKeyName, bInFOV);\n}", "CodeBleu_score": 46.45041414494047}]}
{"instance_id": "031bd0ec3e3c", "generation_result": [{"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\t\n\tif (OwnerComp.GetAIOwner() && OwnerComp.GetAIOwner()->GetPawn()) {\n\t\tASAttributeComponent* AttributeComponent = OwnerComp.GetAIOwner()->GetPawn()->FindComponentByClass<ASAttributeComponent>();\n\t\tif (AttributeComponent) {\n\t\t\tAttributeComponent->ApplyHealthChange(AttributeComponent->GetMaxHealth());\n\t\t}\n\t}\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 47.45365075353364}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tSuper::ExecuteTask(OwnerComp, NodeMemory);\n\n\tif (OwnerComp.GetOwner() == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\n\tAPawn* pawn = OwnerComp.GetOwner()->GetPawn();\n\tif (pawn == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\n\tUSAttributeComponent* attributeComponent = Cast<USAttributeComponent>(pawn->GetComponentByClass(USAttributeComponent::StaticClass()));\n\tif (attributeComponent == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\n\tattributeComponent->ApplyHealthChange(attributeComponent->GetMaxHealth() - attributeComponent->GetCurrentHealth());\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 46.15353234471872}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tSuper::ExecuteTask(OwnerComp, NodeMemory);\n\t\n\tif (OwnerComp.GetOwner() && OwnerComp.GetOwner()->GetPawn()) {\n\t\tif (UAttributeComponent* AttributeComponent = OwnerComp.GetOwner()->GetPawn()->FindComponentByClass<UAttributeComponent>()) {\n\t\t\tif (AttributeComponent) {\n\t\t\t\tAttributeComponent->ApplyHealthChange(AttributeComponent->GetMaxHealth());\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 50.90246645482331}]}
{"instance_id": "6cd6e778e91b", "generation_result": [{"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tif (GetWorld()) {\n\t\tGetWorld()->GetSubsystem<USTickablesSubsystem>()->RegisterTickable(this);\n\t}\n}", "CodeBleu_score": 53.645687720978216}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t    Super::BeginPlay();\n    USTickablesSubsystem* tickablesSubsystem = GetWorld()->GetSubsystem<USTickablesSubsystem>();\n    tickablesSubsystem->RegisterTickable(this);\n}", "CodeBleu_score": 65.77152028360909}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\tif (STickablesSubsystem* TickablesSubsystem = GetWorld()->GetSubsystem<USTickablesSubsystem>()) {\n\t\tTickablesSubsystem->RegisterTickable(this);\n\t}\n}", "CodeBleu_score": 60.649952733364884}]}
{"instance_id": "e90ff27c7f16", "generation_result": [{"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\n\tif (UWorld* World = GetWorld()) {\n\t\tif (USTickablesSubsystem* TickablesSubsystem = World->GetSubsystem<USTickablesSubsystem>()) {\n\t\t\tTickablesSubsystem->RemoveTickable(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 56.97421023929199}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t    Super::EndPlay(EndPlayReason);\n    if (EndPlayReason == EEndPlayReason::Destroyed) {\n        if (GetWorld()) {\n            if (USTickablesSubsystem* TickablesSubsystem = GetWorld()->GetSubsystem<USTickablesSubsystem>()) {\n                TickablesSubsystem->RemoveTickable(this);\n            }\n        }\n    }\n}", "CodeBleu_score": 54.79269586653815}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\tif (EndPlayReason != EEndPlayReason::Destroyed) {\n\t\tif (UWorld* World = GetWorld()) {\n\t\t\tif (USTickablesSubsystem* Subsystem = World->GetSubsystem<USTickablesSubsystem>()) {\n\t\t\t\tSubsystem->DeregisterPrimaryTickFunction(this);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 53.68497069662299}]}
{"instance_id": "be3e542c07ea", "generation_result": [{"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\tif (bManageSignificance) {\n\t\tif (SignificanceInterface != NULL) {\n\t\t\tSignificanceInterface->SetSignificanceComponent(this);\n\t\t\tif (bWaitOneFrame) {\n\t\t\t\tGetWorld()->GetTimerManager().SetTimer(SignificanceRegisterTimer, this, &USSignificanceComponent::RegisterSignificance, 0.01666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666", "CodeBleu_score": 30.50445690781246}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\t\n\tif (bManageSignificance) {\n\t\tif (GetOwner() != nullptr) {\n\t\t\tif (GetOwner()->GetClass()->ImplementsInterface(USignificanceInterface::StaticClass())) {\n\t\t\t\tSignificanceInterface = Cast<USignificanceInterface>(GetOwner());\n\t\t\t} else {\n\t\t\t\tUE_LOG(LogTemp, Error, TEXT(\"The significance component's owner does not implement the significance interface!\"));\n\t\t\t}\n\t\t} else {\n\t\t\tUE_LOG(LogTemp, Error, TEXT(\"The significance component's owner is null!\"));\n\t\t}\n\t}\n\t\n\tif (bWaitOneFrame) {\n\t\tGetWorld()->GetTimerManager().SetTimer(RegisterTimer, this, &USSignificanceComponent::RegisterComponent, 1.f, false);\n\t} else {\n\t\tRegisterComponent();\n\t}\n\t\n\tfor (auto& ParticleSystemComponent : GetOwner()->GetComponentsByClass(UParticleSystemComponent::StaticClass())) {\n\t\tif (ParticleSystemComponent != nullptr) {\n\t\t\tParticleHelper::SetSignificance(ParticleSystemComponent, bManageSignificance, Significance);\n\t\t}\n\t}\n}", "CodeBleu_score": 51.90287359135712}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t    Super::BeginPlay();\n    if (bManageSignificance) {\n        if (GetOwner() && GetOwner()->GetClass()->ImplementsInterface(USignificanceInterface::StaticClass())) {\n            bIsSignificant = true;\n        }\n        else {\n            bIsSignificant = false;\n        }\n        if (bWaitOneFrame) {\n            GetWorld()->GetTimerManager().SetTimer(TimerHandle, this, &USSignificanceComponent::RegisterWithManager, 1.0f, false);\n        }\n        else {\n            RegisterWithManager();\n        }\n        if (bManageParticleSignificance) {\n            TArray<USceneComponent*> Components;\n            GetOwner()->GetComponents(Components);\n            for (USceneComponent* Component : Components) {\n                if (UParticleSystemComponent* ParticleSystem = Cast<UParticleSystemComponent>(Component)) {\n                    ParticleSystem->SetTemplate(ParticleSystem->Template);\n                    ParticleSystem->SetBeamSourcePoint(0, FVector::ZeroVector, FVector::ZeroVector);\n                    ParticleSystem->SetBeamTargetPoint(0, FVector::ZeroVector, FVector::ZeroVector);\n                    ParticleSystem->SetBeamSourcePoint(1, FVector::ZeroVector, FVector::ZeroVector);\n                    ParticleSystem->SetBeamTargetPoint(1, FVector::ZeroVector, FVector::ZeroVector);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 56.634630607614646}]}
{"instance_id": "77824b6415d0", "generation_result": [{"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\tif (!SignificanceManager) {\n\t\tSignificanceManager = UActionRoguelike::GetSignificanceManager(GetWorld());\n\t}\n\tif (SignificanceManager) {\n\t\tSignificanceManager->RegisterComponent(this, FName(GetOwner()->GetName()), [this]() {\n\t\t\treturn GetSignificance();\n\t\t}, [this](float DeltaTime) {\n\t\t\tSignificanceUpdate(DeltaTime);\n\t\t});\n\t}\n}", "CodeBleu_score": 17.486462882527675}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\t// Retrieve the significance manager from the world\n\tUSSignificanceManager* Manager = USSignificanceManager::GetSignificanceManager(GetWorld());\n\tif (Manager) {\n\t\t// Define a lambda function to calculate significance\n\t\tauto CalcSignificance = [&](AActor* Actor) -> float {\n\t\t\t// Retrieve the significance interface from the actor\n\t\t\tauto SignificanceInterface = Cast<ISignificanceInterface>(Actor);\n\t\t\tif (SignificanceInterface) {\n\t\t\t\t// Calculate significance\n\t\t\t\treturn SignificanceInterface->GetSignificance(this);\n\t\t\t}\n\t\t\treturn 0.0f;\n\t\t};\n\t\t// Define a lambda function to handle post-significance updates\n\t\tauto PostSignificanceUpdate = [&](AActor* Actor) {\n\t\t\t// Retrieve the significance interface from the actor\n\t\t\tauto SignificanceInterface = Cast<ISignificanceInterface>(Actor);\n\t\t\tif (SignificanceInterface) {\n\t\t\t\t// Handle post-significance updates\n\t\t\t\tSignificanceInterface->PostSignificanceUpdate(this);\n\t\t\t}\n\t\t};\n\t\t// Register the component with the manager\n\t\tManager->RegisterComponent(this, Owner->GetClass()->GetName(), CalcSignificance, PostSignificanceUpdate);\n\t}\n}", "CodeBleu_score": 41.505109405720994}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\tif (bRegistered) return;\n\tif (GetWorld() == nullptr) return;\n\tif (GetWorld()->GetGameInstance() == nullptr) return;\n\tif (GetWorld()->GetGameInstance()->GetSubsystem<USignificanceManager>() == nullptr) return;\n\n\tSignificanceManager = GetWorld()->GetGameInstance()->GetSubsystem<USignificanceManager>();\n\tif (SignificanceManager == nullptr) return;\n\n\t// Define the lambda functions for calculating significance and handling post-significance updates\n\tauto CalculateSignificance = [&](float DeltaTime) {\n\t\tif (GetOwner() == nullptr) return 0.0f;\n\t\tif (GetOwner()->GetClass() == nullptr) return 0.0f;\n\t\tif (GetOwner()->GetClass()->ImplementsInterface(USignificanceInterface::StaticClass())) {\n\t\t\treturn IMPLEMENT_INTERFACE(GetOwner(), USignificanceInterface)->CalculateSignificance(DeltaTime);\n\t\t}\n\t\treturn 0.0f;\n\t};\n\n\tauto HandlePostSignificanceUpdate = [&](float DeltaTime) {\n\t\tif (GetOwner() == nullptr) return;\n\t\tif (GetOwner()->GetClass() == nullptr) return;\n\t\tif (GetOwner()->GetClass()->ImplementsInterface(USignificanceInterface::StaticClass())) {\n\t\t\tIMPLEMENT_INTERFACE(GetOwner(), USignificanceInterface)->HandlePostSignificanceUpdate(DeltaTime);\n\t\t}\n\t};\n\n\t// Register the component with the manager\n\tSignificanceManager->RegisterComponent(GetOwner()->GetClass()->GetName(), this, CalculateSignificance, HandlePostSignificanceUpdate);\n\n\tbRegistered = true;\n}", "CodeBleu_score": 41.41783948819465}]}
{"instance_id": "dca342410d64", "generation_result": [{"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\n\tif (Actor->Implements<USActorPoolingInterface>()) {\n\n\t\tUSActorPoolingSubsystem* PoolingSubsystem = Actor->GetWorld()->GetSubsystem<USActorPoolingSubsystem>();\n\n\t\tif (PoolingSubsystem) {\n\t\t\tPoolingSubsystem->ReleaseToPoolInternal(Actor);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tActor->Destroy();\n\treturn false;\n}", "CodeBleu_score": 71.11523958378048}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tif (Actor->IsActorPoolingEnabled()) {\n\t\tif (USActorPoolingSubsystem* PoolingSubsystem = GetPoolingSubsystem(Actor->GetWorld())) {\n\t\t\tPoolingSubsystem->ReleaseToPoolInternal(Actor);\n\t\t\treturn true;\n\t\t}\n\t}\n\tActor->Destroy();\n\treturn false;\n}", "CodeBleu_score": 59.496525970092875}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tif (!Actor) {\n\t\treturn false;\n\t}\n\n\tif (Actor->GetWorld() == nullptr) {\n\t\treturn false;\n\t}\n\n\tif (Actor->GetWorld()->IsGameWorld()) {\n\t\treturn false;\n\t}\n\n\tif (!Actor->GetWorld()->GetWorldSettings()->bEnableActorPooling) {\n\t\treturn false;\n\t}\n\n\tif (Actor->IsPendingKill()) {\n\t\treturn false;\n\t}\n\n\tif (Actor->IsPendingKillOrUnreachable()) {\n\t\treturn false;\n\t}\n\n\tif (Actor->GetWorld()->IsServer()) {\n\t\tif (Actor->GetWorld()->GetWorldSettings()->bEnableActorPooling) {\n\t\t\tif (Actor->GetWorld()->GetWorldSettings()->bEnableActorPooling) {\n\t\t\t\tif (Actor->GetWorld()->GetWorldSettings()->bEnableActorPooling) {\n\t\t\t\t\tif (Actor->GetWorld()->GetWorldSettings()->bEnableActorPooling) {\n\t\t\t\t\t\tif (Actor->GetWorld()->GetWorldSettings()->bEnableActorPooling) {\n\t\t\t\t\t\t\tif (Actor->GetWorld()->GetWorldSettings()->bEnableActorPooling) {\n\t\t\t\t\t\t\t\tif (Actor->GetWorld()->GetWorldSettings()->bEnableActorPooling) {\n\t\t\t\t\t\t\t\t\tif (Actor->GetWorld()->GetWorldSettings()->bEnableActorPooling) {\n\t\t\t\t\t\t\t\t\t\tif (Actor->GetWorld()->GetWorldSettings()->bEnableActorPooling) {\n\t\t\t\t\t\t\t\t\t\t\tif (Actor->GetWorld()->GetWorldSettings()->bEnableActorPooling) {\n\t\t\t\t\t\t\t\t\t\t\t\tif (Actor->GetWorld()->GetWorldSettings()->bEnableActorPooling) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (Actor->GetWorld()->GetWorldSettings()->bEnableActorPooling) {\n\t\t\t", "CodeBleu_score": 33.209544978969454}]}
{"instance_id": "5c285130f782", "generation_result": [{"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tUE_LOG(LogTemp, Log, TEXT(\"PrimeActorPool\"));\n\n\tFScopedNamedEvent ScopedNamedEvent(TEXT(\"PrimeActorPool\"));\n\n\tfor (int32 i = 0; i < Amount; i++) {\n\t\tFActorSpawnParameters SpawnParams;\n\t\tSpawnParams.bNoCollisionFail = true;\n\t\tSpawnParams.SpawnCollisionHandlingOverride = ESpawnActorCollisionHandlingMethod::AlwaysSpawn;\n\n\t\tAActor* Actor = GetWorld()->SpawnActor<AActor>(ActorClass, SpawnParams);\n\n\t\tReleaseActorToPool(Actor);\n\t}\n}", "CodeBleu_score": 58.08173990180941}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"PrimeActorPool: %s %d\"), *ActorClass->GetName(), Amount);\n\tFScopeLogActorPoolingEvent Event(ActorClass, EActorPoolingEventType::PrimeActorPool, Amount);\n\tfor (int32 i = 0; i < Amount; i++) {\n\t\tSpawnActor(ActorClass, FTransform::Identity, FActorSpawnParameters());\n\t}\n}", "CodeBleu_score": 41.83239242612892}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"PrimeActorPool\"));\n\n\tFScopedEventPrimeActorPool ScopedEvent(ActorClass, Amount);\n\n\tfor (int32 i = 0; i < Amount; i++) {\n\t\tAActor* Actor = GetWorld()->SpawnActor<AActor>(ActorClass, FTransform(), ESpawnActorCollisionHandlingMethod::AlwaysSpawn);\n\t\tActor->SetActorEnableCollision(false);\n\t\tActor->SetActorTickEnabled(false);\n\t\tReleaseActor(Actor);\n\t}\n}", "CodeBleu_score": 51.240211209312214}]}
{"instance_id": "43c013653d6d", "generation_result": [{"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\tFLoadingScreenAttributes LoadingScreenAttributes;\n\tLoadingScreenAttributes.bAutoCompleteWhenLoadingCompletes = false;\n\tLoadingScreenAttributes.WidgetLoadingScreen = CreateWidget<UWidgetLoadingScreen>(GetWorld(), UWidgetLoadingScreen::StaticClass());\n\tLoadingScreenAttributes.WidgetLoadingScreen->SetMapName(MapName);\n\tGetMoviePlayer()->SetupLoadingScreen(LoadingScreenAttributes);\n}", "CodeBleu_score": 48.44350714884706}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\t// Create a new loading screen attributes object and set the map name\n\tFLoadingScreenAttributes LoadingScreenAttributes;\n\tLoadingScreenAttributes.bAutoCompleteWhenLoadingCompletes = false;\n\tLoadingScreenAttributes.bMoviesAreSkippable = false;\n\tLoadingScreenAttributes.WidgetLoadingScreen = CreateWidget<ULoadingScreenWidget>(this, ULoadingScreenWidget::StaticClass());\n\tLoadingScreenAttributes.MoviePaths.Add(TEXT(\"LoadingScreens/LoadingScreen_\") + MapName);\n\n\t// Set up the loading screen using the movie player\n\tGetMoviePlayer()->SetupLoadingScreen(LoadingScreenAttributes);\n}", "CodeBleu_score": 46.86283883692841}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\tFLoadingScreenAttributes LoadingScreenAttributes;\n\n\t// Create a loading screen widget and assign it to the LoadingScreenAttributes object.\n\tULoadingScreenWidget* LoadingScreenWidget = CreateWidget<ULoadingScreenWidget>(GetWorld(), LoadingScreenWidgetClass);\n\tLoadingScreenAttributes.WidgetLoadingScreen = LoadingScreenWidget;\n\n\t// Set up the loading screen.\n\tGetMoviePlayer()->SetupLoadingScreen(LoadingScreenAttributes);\n\n\t// Set the map name.\n\tLoadingScreenWidget->SetMapName(MapName);\n}", "CodeBleu_score": 48.529924884839396}]}
{"instance_id": "a6979eb925a5", "generation_result": [{"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tif (Instigator) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"StartAction_Implementation: %s\"), *GetName());\n\t}\n\telse {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"StartAction_Implementation: %s\"), *GetName());\n\t}\n\tif (Instigator) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"StartAction_Implementation: %s\"), *Instigator->GetName());\n\t}\n\telse {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"StartAction_Implementation: %s\"), *GetName());\n\t}\n\tif (Instigator) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"StartAction_Implementation: %s\"), *Instigator->GetName());\n\t}\n\telse {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"StartAction_Implementation: %s\"), *GetName());\n\t}\n\tif (Instigator) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"StartAction_Implementation: %s\"), *Instigator->GetName());\n\t}\n\telse {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"StartAction_Implementation: %s\"), *GetName());\n\t}\n\tif (Instigator) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"StartAction_Implementation: %s\"), *Instigator->GetName());\n\t}\n\telse {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"StartAction_Implementation: %s\"), *GetName());\n\t}\n\tif (Instigator) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"StartAction_Implementation: %s\"), *Instigator->GetName());\n\t}\n\telse {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"StartAction_Implementation: %s\"), *GetName());\n\t}\n\tif (Instigator) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"StartAction_Implementation: %s\"), *Instigator->GetName());\n\t", "CodeBleu_score": 38.639317666712635}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USAction::StartAction_Implementation: %s\"), *GetName());\n\n\tif (Instigator) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USAction::StartAction_Implementation: Instigator: %s\"), *Instigator->GetName());\n\t}\n\n\tif (GetOwningComponent()) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USAction::StartAction_Implementation: OwningComponent: %s\"), *GetOwningComponent()->GetName());\n\t}\n\n\tif (GetOwningComponent()) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USAction::StartAction_Implementation: OwningComponent: %s\"), *GetOwningComponent()->GetName());\n\t}\n\n\tif (GetOwningComponent()) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USAction::StartAction_Implementation: OwningComponent: %s\"), *GetOwningComponent()->GetName());\n\t}\n\n\tif (GetOwningComponent()) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USAction::StartAction_Implementation: OwningComponent: %s\"), *GetOwningComponent()->GetName());\n\t}\n\n\tif (GetOwningComponent()) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USAction::StartAction_Implementation: OwningComponent: %s\"), *GetOwningComponent()->GetName());\n\t}\n\n\tif (GetOwningComponent()) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USAction::StartAction_Implementation: OwningComponent: %s\"), *GetOwningComponent()->GetName());\n\t}\n\n\tif (GetOwningComponent()) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USAction::StartAction_Implementation: OwningComponent: %s\"), *GetOwningComponent()->GetName());\n\t}\n\n\tif (GetOwningComponent()) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USAction::StartAction", "CodeBleu_score": 41.75822452232284}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\t\n}", "CodeBleu_score": 3.0164811217143837}]}
{"instance_id": "bdec7bf3e2d7", "generation_result": [{"code": "float USActionEffect::GetTimeRemaining() const{\n\t    return 0.0f;\n}", "CodeBleu_score": 3.774293285704405}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t    return 0.f;\n}", "CodeBleu_score": 3.7730857574482712}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t    return GetTimeRemaining(GetWorld());\n}", "CodeBleu_score": 16.09675270356102}]}
{"instance_id": "db3a7508643b", "generation_result": [{"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (InFocus == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"Actor is null\"));\n\t\treturn;\n\t}\n\t\n\tAPawn* Pawn = GetOwner()->GetPawn();\n\tif (Pawn == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"Pawn is null\"));\n\t\treturn;\n\t}\n\n\tInFocus->Interact(Pawn);\n}", "CodeBleu_score": 53.371114596519796}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (!InFocus) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"Interacted with null actor!\"));\n\t\treturn;\n\t}\n\n\tAPawn* OwningPawn = Cast<APawn>(GetOwner());\n\tif (!OwningPawn) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"Interacted with actor without a pawn!\"));\n\t\treturn;\n\t}\n\n\tInFocus->Interact(OwningPawn);\n}", "CodeBleu_score": 50.25873272453323}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (!InFocus) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"Interact target is null!\"));\n\t\treturn;\n\t}\n\n\tif (InFocus->GetClass()->ImplementsInterface(USGameplayInterface::StaticClass())) {\n\t\tAGameplayInterface* FocusInterface = Cast<AGameplayInterface>(InFocus);\n\n\t\tif (FocusInterface) {\n\t\t\tAGameplayInterface* OwningInterface = Cast<AGameplayInterface>(GetOwner());\n\n\t\t\tif (OwningInterface) {\n\t\t\t\tFocusInterface->Interact(OwningInterface);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 46.53176760699591}]}
{"instance_id": "e6a5224079e6", "generation_result": [{"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tif (TargetActor == nullptr || !TargetActor->IsValidLowLevel() || !TargetActor->IsActorReady()) {\n\t\treturn false;\n\t}\n\n\tUAttributeComponent* TargetAttributeComponent = TargetActor->FindComponentByClass<UAttributeComponent>();\n\tif (TargetAttributeComponent == nullptr) {\n\t\treturn false;\n\t}\n\n\tTargetAttributeComponent->ApplyDamage(DamageCauser, DamageAmount);\n\treturn true;\n}", "CodeBleu_score": 46.35452997984434}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tif (TargetActor == nullptr) {\n\t\treturn false;\n\t}\n\n\tif (DamageCauser == nullptr) {\n\t\treturn false;\n\t}\n\n\tif (DamageAmount <= 0.0f) {\n\t\treturn false;\n\t}\n\n\tUSAttributeComponent* TargetAttributeComponent = TargetActor->FindComponentByClass<USAttributeComponent>();\n\n\tif (TargetAttributeComponent == nullptr) {\n\t\treturn false;\n\t}\n\n\tTargetAttributeComponent->ApplyHealthChange(-DamageAmount);\n\n\treturn true;\n}", "CodeBleu_score": 50.180513366799204}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tif (TargetActor == nullptr) return false;\n\n\t// Get the target actor's attribute component\n\tUSAttributeComponent* TargetAttributeComponent = TargetActor->FindComponentByClass<USAttributeComponent>();\n\tif (TargetAttributeComponent == nullptr) return false;\n\n\t// Apply the damage\n\tTargetAttributeComponent->ApplyDamage(DamageCauser, DamageAmount);\n\n\treturn true;\n}", "CodeBleu_score": 47.88367591922016}]}
{"instance_id": "084a7501fc08", "generation_result": [{"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t    return false;\n}", "CodeBleu_score": 7.1531368795312025}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\treturn false;\n}", "CodeBleu_score": 7.151052641783151}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\tstatic auto fn = UObject::FindObject<UFunction>(\"Function SPlayerState.SPlayerState_C.UpdatePersonalRecord\");\n\n\tASPlayerState_UpdatePersonalRecord_Params params;\n\tparams.NewTime = NewTime;\n\n\tauto flags = fn->FunctionFlags;\n\tfn->FunctionFlags |= 0x00000400;\n\n\tUObject::ProcessEvent(fn, &params);\n\tfn->FunctionFlags = flags;\n\n\treturn params.ReturnValue;\n}", "CodeBleu_score": 37.16659819573762}]}
{"instance_id": "8e0ccc856566", "generation_result": [{"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (!InstigatorPawn) { return; }\n\n\tASAttributeComponent* AttributeComponent = InstigatorPawn->FindComponentByClass<ASAttributeComponent>();\n\tif (!AttributeComponent) { return; }\n\n\tif (AttributeComponent->GetHealth() >= AttributeComponent->GetMaxHealth()) { return; }\n\n\tASPlayerState* PlayerState = Cast<ASPlayerState>(InstigatorPawn->GetPlayerState());\n\tif (!PlayerState) { return; }\n\n\tif (!PlayerState->CanRemoveCredits(Credits)) { return; }\n\n\tAttributeComponent->ApplyHealthChange(HealthChange);\n\n\tPlayerState->RemoveCredits(Credits);\n\n\tCooldownTimer = Cooldown;\n}", "CodeBleu_score": 50.94963856481067}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (InstigatorPawn != nullptr) {\n\t\tASAttributeComponent* AttributeComponent = InstigatorPawn->FindComponentByClass<ASAttributeComponent>();\n\t\tif (AttributeComponent != nullptr) {\n\t\t\tif (AttributeComponent->GetCurrentHealth() < AttributeComponent->GetMaxHealth()) {\n\t\t\t\tASPlayerState* PlayerState = Cast<ASPlayerState>(InstigatorPawn->GetPlayerState());\n\t\t\t\tif (PlayerState != nullptr) {\n\t\t\t\t\tif (PlayerState->RemoveCredits(Credits)) {\n\t\t\t\t\t\tAttributeComponent->ApplyHealthChange(HealthChange);\n\t\t\t\t\t\tTriggerCooldown();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 47.15157132067765}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (InstigatorPawn && InstigatorPawn->GetController()) {\n\t\tASAttributeComponent* AttributeComponent = InstigatorPawn->FindComponentByClass<ASAttributeComponent>();\n\t\tif (AttributeComponent && AttributeComponent->GetCurrentHealth() < AttributeComponent->GetMaxHealth()) {\n\t\t\tASPlayerState* PlayerState = Cast<ASPlayerState>(InstigatorPawn->GetController()->PlayerState);\n\t\t\tif (PlayerState && PlayerState->GetCredits() >= HealthPotionCreditsCost) {\n\t\t\t\tPlayerState->RemoveCredits(HealthPotionCreditsCost);\n\t\t\t\tAttributeComponent->ApplyHealthChange(HealthPotionHealthChange);\n\t\t\t\tSetIsActive(false);\n\t\t\t\tif (HealthPotionCooldownDuration > 0) {\n\t\t\t\t\tGetWorld()->GetTimerManager().SetTimer(HealthPotionCooldownTimerHandle, this, &ASPowerup_HealthPotion::SetIsActive, HealthPotionCooldownDuration, false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 50.038476084858985}]}
{"instance_id": "39a680859a89", "generation_result": [{"code": "void ASProjectileBase::Explode_Implementation(){\n\t\t// Spawn an impact effect at the projectile's location\n\tUGameplayStatics::SpawnEmitterAtLocation(this, ImpactEffect, GetActorLocation());\n\t// Play an impact sound\n\tif (ImpactSound != nullptr) {\n\t\tUGameplayStatics::PlaySoundAtLocation(this, ImpactSound, GetActorLocation());\n\t}\n\t// Trigger a camera shake\n\tif (ImpactCameraShake != nullptr) {\n\t\tGetWorld()->GetFirstPlayerController()->ClientPlayCameraShake(ImpactCameraShake);\n\t}\n\t// Release the projectile back to the actor pool using the actor pooling subsystem\n\tif (ActorPoolingSubsystem != nullptr) {\n\t\tActorPoolingSubsystem->ReleaseActor(this);\n\t}\n}", "CodeBleu_score": 51.17578589524736}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t\tif (ImpactParticles) {\n\t\tUGameplayStatics::SpawnEmitterAtLocation(this, ImpactParticles, GetActorLocation(), GetActorRotation());\n\t}\n\n\tif (ImpactSound) {\n\t\tUGameplayStatics::PlaySoundAtLocation(this, ImpactSound, GetActorLocation());\n\t}\n\n\tif (ImpactCameraShake) {\n\t\tif (ImpactCameraShake) {\n\t\t\tFPostOnScreenMessageInfo Info;\n\t\t\tInfo.Category = \"Gameplay\";\n\t\t\tInfo.DisplayTime = 1.0f;\n\t\t\tInfo.Text = FText::FromString(\"Impact!\");\n\t\t\tInfo.bPersistThroughLevelTransition = true;\n\t\t\tInfo.bUseLargeFont = false;\n\t\t\tInfo.bUseSound = false;\n\t\t\tInfo.bUseSuccessFailSounds = false;\n\t\t\tInfo.bUseDuration = false;\n\t\t\tInfo.bUseTexture = false;\n\t\t\tInfo.bUseForceFeedback = false;\n\t\t\tInfo.bUseForceFeedbackDuration = false;\n\t\t\tInfo.bUseForceFeedbackChannel = false;\n\t\t\tInfo.bUseForceFeedbackDuration = false;\n\t\t\tInfo.bUseForceFeedbackChannel = false;\n\t\t\tInfo.bUseForceFeedbackDuration = false;\n\t\t\tInfo.bUseForceFeedbackChannel = false;\n\t\t\tInfo.bUseForceFeedbackDuration = false;\n\t\t\tInfo.bUseForceFeedbackChannel = false;\n\t\t\tInfo.bUseForceFeedbackDuration = false;\n\t\t\tInfo.bUseForceFeedbackChannel = false;\n\t\t\tInfo.bUseForceFeedbackDuration = false;\n\t\t\tInfo.bUseForceFeedbackChannel = false;\n\t\t\tInfo.bUseForceFeedbackDuration = false;\n\t\t\tInfo.bUseForceFeedbackChannel = false;\n\t\t\tInfo.bUseForceFeedbackDuration = false;\n\t\t\tInfo.bUse", "CodeBleu_score": 40.755025339043236}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t\tif (ExplosionEffect) {\n\t\tUGameplayStatics::SpawnEmitterAtLocation(this, ExplosionEffect, GetActorLocation(), GetActorRotation());\n\t}\n\tif (ExplosionSound) {\n\t\tUGameplayStatics::PlaySoundAtLocation(this, ExplosionSound, GetActorLocation());\n\t}\n\tif (ExplosionCameraShake) {\n\t\tUGameplayStatics::GetPlayerCameraManager(this, 0)->PlayCameraShake(ExplosionCameraShake);\n\t}\n\tif (GetWorld()->GetSubsystem<USActorPoolingSubsystem>()) {\n\t\tGetWorld()->GetSubsystem<USActorPoolingSubsystem>()->ReleaseActor(this);\n\t}\n}", "CodeBleu_score": 53.51434878106569}]}
{"instance_id": "a95c41c6d7b5", "generation_result": [{"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t    return NULL;\n}", "CodeBleu_score": 4.823838256198898}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t    FPlayerSaveData* Result = NULL;\n    if (PlayerState == NULL) {\n        return NULL;\n    }\n    if (PlayerState->IsPlayInEditor()) {\n        UE_LOG(LogTemp, Warning, TEXT(\"GetPlayerData: PIE mode is not supported.\"));\n        return NULL;\n    }\n    if (PlayerData.Num() == 0) {\n        UE_LOG(LogTemp, Warning, TEXT(\"GetPlayerData: No saved player data.\"));\n        return NULL;\n    }\n    for (int32 i = 0; i < PlayerData.Num(); i++) {\n        if (PlayerData[i].PlayerId == PlayerState->UniqueId) {\n            Result = &PlayerData[i];\n            break;\n        }\n    }\n    if (Result == NULL) {\n        UE_LOG(LogTemp, Warning, TEXT(\"GetPlayerData: No saved player data for this player.\"));\n    }\n    return Result;\n}", "CodeBleu_score": 45.805855909003476}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tFPlayerSaveData* Result = NULL;\n\tif (PlayerState != NULL) {\n\t\tif (PlayerState->IsPlayInEditor()) {\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(\"USSaveGame::GetPlayerData: Play-In-Editor mode detected. Returning first saved player entry.\"));\n\t\t\tif (PlayerData.Num() > 0) {\n\t\t\t\tResult = &PlayerData[0];\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tFString PlayerID = PlayerState->GetPlayerId();\n\t\t\tfor (int32 i = 0; i < PlayerData.Num(); i++) {\n\t\t\t\tif (PlayerData[i].PlayerID == PlayerID) {\n\t\t\t\t\tResult = &PlayerData[i];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn Result;\n}", "CodeBleu_score": 47.366944988012264}]}
{"instance_id": "58a03c087c47", "generation_result": [{"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\tif (NewPlayer == nullptr) {\n\t\treturn;\n\t}\n\tASPlayerState* PlayerState = Cast<ASPlayerState>(NewPlayer->PlayerState);\n\tif (PlayerState == nullptr) {\n\t\treturn;\n\t}\n\tif (PlayerState->GetPlayerData() == nullptr) {\n\t\treturn;\n\t}\n\tif (PlayerState->GetPlayerData()->GetPlayerController() == nullptr) {\n\t\treturn;\n\t}\n\tif (PlayerState->GetPlayerData()->GetPlayerController() != NewPlayer) {\n\t\treturn;\n\t}\n\tif (PlayerState->GetPlayerData()->GetPlayerController()->GetPawn() == nullptr) {\n\t\treturn;\n\t}\n\tif (PlayerState->GetPlayerData()->GetPlayerController()->GetPawn()->GetClass() != PlayerState->GetPlayerData()->GetPlayerPawnClass()) {\n\t\treturn;\n\t}\n\tif (PlayerState->GetPlayerData()->GetPlayerController()->GetPawn()->GetClass() == nullptr) {\n\t\treturn;\n\t}\n\tif (PlayerState->GetPlayerData()->GetPlayerController()->GetPawn()->GetClass()->GetDefaultObject() == nullptr) {\n\t\treturn;\n\t}\n\tif (PlayerState->GetPlayerData()->GetPlayerController()->GetPawn()->GetClass()->GetDefaultObject()->GetClass() == nullptr) {\n\t\treturn;\n\t}\n\tif (PlayerState->GetPlayerData()->GetPlayerController()->GetPawn()->GetClass()->GetDefaultObject()->GetClass()->GetDefaultObject() == nullptr) {\n\t\treturn;\n\t}\n\tif (PlayerState->GetPlayerData()->GetPlayerController()->GetPawn()->GetClass()->GetDefaultObject()->GetClass()->GetDefaultObject()->GetClass() == nullptr) {\n\t\treturn;\n\t}\n\tif (PlayerState->GetPlayerData()->GetPlayerController()->GetPawn()->GetClass()->GetDefaultObject()->GetClass()->GetDefaultObject()->GetClass()->GetDefaultObject() == nullptr) {\n\t\treturn;\n\t}\n\tif (PlayerState->GetPlayerData()->GetPlayerController()->GetPawn()->GetClass()->GetDefaultObject()->GetClass()->GetDefaultObject()->", "CodeBleu_score": 36.64030780259891}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//", "CodeBleu_score": 5.929662248513985}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\tif (NewPlayer == nullptr) {\n\t\treturn;\n\t}\n\n\t// Get the player state\n\tAPlayerState* PlayerState = NewPlayer->PlayerState;\n\n\t// If the player state is valid, load the player's state from the current save game\n\tif (PlayerState != nullptr) {\n\t\tLoadPlayerState(PlayerState);\n\t}\n}", "CodeBleu_score": 47.26989148951139}]}
{"instance_id": "c5bd4c059b71", "generation_result": [{"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t    if (CurrentSaveGame) {\n        CurrentSaveGame->ClearPlayerData();\n        CurrentSaveGame->ClearActorData();\n        \n        UGameplayStatics::GetGameState(this)->GetPlayerArray().ForEach([this](APlayerState* PlayerState) {\n            CurrentSaveGame->AddPlayerData(PlayerState);\n        });\n        \n        TArray<AActor*> AllActors;\n        UGameplayStatics::GetAllActorsOfClass(this, AActor::StaticClass(), AllActors);\n        \n        for (AActor* Actor : AllActors) {\n            if (Actor->Implements<USaveGameInterface>()) {\n                CurrentSaveGame->AddActorData(Actor);\n            }\n        }\n        \n        WriteSaveGameToSlot(CurrentSaveGame, CurrentSlot);\n        \n        OnSaveGameWritten.Broadcast(CurrentSaveGame);\n    }\n}", "CodeBleu_score": 30.64237789492632}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USSaveGameSubsystem::WriteSaveGame\"));\n\n\tif (CurrentSaveGame == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USSaveGameSubsystem::WriteSaveGame - CurrentSaveGame is nullptr\"));\n\t\treturn;\n\t}\n\n\tif (CurrentSaveGame->PlayerStates.Num() > 0) {\n\t\tCurrentSaveGame->PlayerStates.Empty();\n\t}\n\n\tif (CurrentSaveGame->Actors.Num() > 0) {\n\t\tCurrentSaveGame->Actors.Empty();\n\t}\n\n\tUGameStateBase* GameState = GetGameState();\n\n\tif (GameState == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USSaveGameSubsystem::WriteSaveGame - GameState is nullptr\"));\n\t\treturn;\n\t}\n\n\tfor (int32 i = 0; i < GameState->PlayerArray.Num(); i++) {\n\t\tif (GameState->PlayerArray[i] == nullptr) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tCurrentSaveGame->PlayerStates.Add(GameState->PlayerArray[i]->GetPlayerState());\n\t}\n\n\tfor (TActorIterator<AActor> ActorItr(GetWorld()); ActorItr; ++ActorItr) {\n\t\tAActor* Actor = *ActorItr;\n\n\t\tif (Actor == nullptr) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (Actor->Implements<USaveGameInterface>()) {\n\t\t\tCurrentSaveGame->Actors.Add(Actor);\n\t\t}\n\t}\n\n\tTArray<FString> PlayerNames;\n\n\tfor (int32 i = 0; i < CurrentSaveGame->PlayerStates.Num(); i++) {\n\t\tif (CurrentSaveGame->PlayerStates[i] == nullptr) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tPlayerNames.Add(CurrentSaveGame->PlayerStates[i]->GetPlayerName());\n\t}\n\n\tfor (int", "CodeBleu_score": 51.68879216076753}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\tif (CurrentSaveGame) {\n\t\tCurrentSaveGame->ClearData();\n\t\tif (UGameplayStatics::GetGameState(this)) {\n\t\t\tUGameplayStatics::GetGameState(this)->GetPlayerArray(CurrentSaveGame->Players);\n\t\t\tfor (int32 i = 0; i < CurrentSaveGame->Players.Num(); ++i) {\n\t\t\t\tCurrentSaveGame->PlayerData.Add(FSSaveGame::FPlayerData());\n\t\t\t\tCurrentSaveGame->PlayerData[i].Name = CurrentSaveGame->Players[i]->GetPlayerName();\n\t\t\t\tCurrentSaveGame->PlayerData[i].Transform = CurrentSaveGame->Players[i]->GetTransform();\n\t\t\t\tCurrentSaveGame->PlayerData[i].SerializedData = CurrentSaveGame->Players[i]->GetSerializedData();\n\t\t\t}\n\t\t}\n\t\tTArray<AActor*> AllActors;\n\t\tUGameplayStatics::GetAllActorsOfClass(this, AActor::StaticClass(), AllActors);\n\t\tfor (int32 i = 0; i < AllActors.Num(); ++i) {\n\t\t\tif (AllActors[i] && AllActors[i]->GetClass()->ImplementsInterface(USGameplayInterface::StaticClass())) {\n\t\t\t\tCurrentSaveGame->ActorData.Add(FSSaveGame::FActorData());\n\t\t\t\tCurrentSaveGame->ActorData[i].Name = AllActors[i]->GetName();\n\t\t\t\tCurrentSaveGame->ActorData[i].Transform = AllActors[i]->GetTransform();\n\t\t\t\tCurrentSaveGame->ActorData[i].SerializedData = IGameplayInterface::Execute_GetSerializedData(AllActors[i]);\n\t\t\t}\n\t\t}\n\t\tWriteSaveGameToSlot(CurrentSaveGame, CurrentSaveGameSlot);\n\t\tOnSaveGameComplete.Broadcast(CurrentSaveGameSlot);\n\t}\n}", "CodeBleu_score": 36.68395757654941}]}
{"instance_id": "0d7043a0bff0", "generation_result": [{"code": "void FrameworkConfig::draw_themes(){\n\t    ImGui::PushItemWidth(ImGui::GetWindowWidth() * 0.3f);\n    ImGui::Text(\"Theme\");\n    if (ImGui::BeginCombo(\"##theme\", m_theme_names[m_theme].c_str())) {\n        for (int i = 0; i < m_theme_names.size(); i++) {\n            bool is_selected = (m_theme == i);\n            if (ImGui::Selectable(m_theme_names[i].c_str(), is_selected)) {\n                m_theme = i;\n                m_font_size = m_theme_font_sizes[m_theme];\n            }\n            if (is_selected) {\n                ImGui::SetItemDefaultFocus();\n            }\n        }\n        ImGui::EndCombo();\n    }\n    ImGui::SameLine();\n    ImGui::PushItemWidth(ImGui::GetWindowWidth() * 0.7f);\n    ImGui::DragFloat(\"Font Size\", &m_font_size, 0.5f, 10, 50);\n    ImGui::PopItemWidth();\n    ImGui::PopItemWidth();\n    ImGui::Separator();\n    if (m_theme_font_sizes[m_theme] != m_font_size) {\n        m_theme_font_sizes[m_theme] = m_font_size;\n        m_framework->set_font_size(m_font_size);\n    }\n}", "CodeBleu_score": 41.4502032168923}, {"code": "void FrameworkConfig::draw_themes(){\n\t\tImGui::Begin(\"Themes\", &open_themes, ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoCollapse);\n\tImGui::Text(\"Theme:\");\n\tif (ImGui::Button(\"Dark\")) {\n\t\tImGui::StyleColorsDark();\n\t\tImGui::GetIO().ConfigFlags |= ImGuiConfigFlags_DockingEnable;\n\t}\n\tImGui::SameLine();\n\tif (ImGui::Button(\"Light\")) {\n\t\tImGui::StyleColorsLight();\n\t\tImGui::GetIO().ConfigFlags |= ImGuiConfigFlags_DockingEnable;\n\t}\n\tImGui::Text(\"Font size:\");\n\tif (ImGui::SliderInt(\"##fontsize\", &font_size, 10, 30)) {\n\t\tImGui::GetIO().FontGlobalScale = (float)font_size / 16.0f;\n\t}\n\tImGui::End();\n}", "CodeBleu_score": 36.769284103618816}, {"code": "void FrameworkConfig::draw_themes(){\n\t    ImGui::Text(\"Theme\");\n    ImGui::SameLine();\n    ImGui::RadioButton(\"Dark\", &this->theme, 0);\n    ImGui::SameLine();\n    ImGui::RadioButton(\"Light\", &this->theme, 1);\n    ImGui::SameLine();\n    ImGui::RadioButton(\"Classic\", &this->theme, 2);\n    ImGui::Separator();\n\n    ImGui::Text(\"Font size\");\n    ImGui::SameLine();\n    if (ImGui::SliderFloat(\"\", &this->font_size, 10, 50)) {\n        ImGui::GetIO().FontGlobalScale = this->font_size / 15.0f;\n    }\n}", "CodeBleu_score": 39.310231089692124}]}
{"instance_id": "e7f81d1dee95", "generation_result": [{"code": "void FrameworkConfig::draw_main() {\n\t    ImGui::Text(\"Menu key:\");\n    ImGui::SameLine();\n    ImGui::InputText(\"\", &menu_key, ImGuiInputTextFlags_ReadOnly);\n    ImGui::SameLine();\n    if (ImGui::Button(\"Change\")) {\n        ImGui::OpenPopup(\"Change Menu Key\");\n    }\n    if (ImGui::BeginPopup(\"Change Menu Key\")) {\n        ImGui::Text(\"Enter a new menu key.\");\n        ImGui::InputText(\"\", &menu_key, ImGuiInputTextFlags_CharsUppercase | ImGuiInputTextFlags_CharsNoBlank);\n        ImGui::SameLine();\n        if (ImGui::Button(\"Confirm\")) {\n            ImGui::CloseCurrentPopup();\n        }\n        ImGui::EndPopup();\n    }\n    ImGui::Separator();\n\n    ImGui::Text(\"Show cursor key:\");\n    ImGui::SameLine();\n    ImGui::InputText(\"\", &show_cursor_key, ImGuiInputTextFlags_ReadOnly);\n    ImGui::SameLine();\n    if (ImGui::Button(\"Change\")) {\n        ImGui::OpenPopup(\"Change Show Cursor Key\");\n    }\n    if (ImGui::BeginPopup(\"Change Show Cursor Key\")) {\n        ImGui::Text(\"Enter a new show cursor key.\");\n        ImGui::InputText(\"\", &show_cursor_key, ImGuiInputTextFlags_CharsUppercase | ImGuiInputTextFlags_CharsNoBlank);\n        ImGui::SameLine();\n        if (ImGui::Button(\"Confirm\")) {\n            ImGui::CloseCurrentPopup();\n        }\n        ImGui::EndPopup();\n    }\n    ImGui::Separator();\n\n    ImGui::Text(\"Remember menu state:\");\n    ImGui::SameLine();\n    ImGui::Checkbox(\"##Remember Menu State\", &remember_menu_state);\n    ImGui::Separator();\n\n    ImGui::Text(\"Enable L3 + R3 toggle:\");\n    ImGui::SameLine();\n    ImGui::Checkbox(\"##Enable L3 + R3 Toggle\", &enable_", "CodeBleu_score": 41.371655374066236}, {"code": "void FrameworkConfig::draw_main() {\n\t\n    // Display the menu key.\n    ImGui::Text(\"Menu key:\");\n    ImGui::SameLine();\n    ImGui::RadioButton(\"Left\", &menu_key, 0);\n    ImGui::SameLine();\n    ImGui::RadioButton(\"Right\", &menu_key, 1);\n    ImGui::SameLine();\n    ImGui::RadioButton(\"None\", &menu_key, 2);\n\n    // Display the show cursor key.\n    ImGui::Text(\"Show cursor key:\");\n    ImGui::SameLine();\n    ImGui::RadioButton(\"Left\", &show_cursor_key, 0);\n    ImGui::SameLine();\n    ImGui::RadioButton(\"Right\", &show_cursor_key, 1);\n    ImGui::SameLine();\n    ImGui::RadioButton(\"None\", &show_cursor_key, 2);\n\n    // Display the remember menu state option.\n    ImGui::Text(\"Remember menu state:\");\n    ImGui::SameLine();\n    ImGui::Checkbox(\"##RememberMenuState\", &remember_menu_state);\n\n    // Display the L3 + R3 toggle option.\n    ImGui::Text(\"L3 + R3 toggle:\");\n    ImGui::SameLine();\n    ImGui::Checkbox(\"##L3R3Toggle\", &l3_r3_toggle);\n\n    // Display the always show cursor option.\n    ImGui::Text(\"Always show cursor:\");\n    ImGui::SameLine();\n    ImGui::Checkbox(\"##AlwaysShowCursor\", &always_show_cursor);\n\n    // Display the log level.\n    ImGui::Text(\"Log level:\");\n    ImGui::SameLine();\n    ImGui::RadioButton(\"Trace\", &log_level, 0);\n    ImGui::SameLine();\n    ImGui::RadioButton(\"Debug\", &log_level, 1);\n    ImGui::SameLine();\n    ImGui::RadioButton(\"Info\", &log_level, 2);\n    ImGui::SameLine();\n    ImGui::RadioButton(\"Warn\", &log_level, 3);\n    Im", "CodeBleu_score": 41.81336843671396}, {"code": "void FrameworkConfig::draw_main() {\n\t    ImGui::Text(\"Main Settings\");\n    ImGui::Separator();\n    ImGui::Text(\"Menu Key: \");\n    ImGui::SameLine();\n    ImGui::InputText(\"##MenuKey\", &menu_key, ImGuiInputTextFlags_CharsUppercase);\n    ImGui::SameLine();\n    if (ImGui::Button(\"Reset\")) {\n        menu_key = \"L3\";\n    }\n    ImGui::Text(\"Show Cursor Key: \");\n    ImGui::SameLine();\n    ImGui::InputText(\"##ShowCursorKey\", &show_cursor_key, ImGuiInputTextFlags_CharsUppercase);\n    ImGui::SameLine();\n    if (ImGui::Button(\"Reset\")) {\n        show_cursor_key = \"R3\";\n    }\n    ImGui::Text(\"Remember Menu State: \");\n    ImGui::SameLine();\n    ImGui::Checkbox(\"##RememberMenuState\", &remember_menu_state);\n    ImGui::Text(\"L3 + R3 Toggle: \");\n    ImGui::SameLine();\n    ImGui::Checkbox(\"##L3R3Toggle\", &l3_r3_toggle);\n    ImGui::Text(\"Always Show Cursor: \");\n    ImGui::SameLine();\n    ImGui::Checkbox(\"##AlwaysShowCursor\", &always_show_cursor);\n    ImGui::Text(\"Log Level: \");\n    ImGui::SameLine();\n    ImGui::InputInt(\"##LogLevel\", &log_level);\n    if (log_level < 0) {\n        log_level = 0;\n    }\n    if (log_level > 5) {\n        log_level = 5;\n    }\n    if (ImGui::Button(\"Update\")) {\n        switch (log_level) {\n            case 0:\n                spdlog::set_level(spdlog::level::trace);\n                break;\n            case 1:\n                spdlog::set_level(spdlog::level::debug);\n                break;\n            case 2:\n                spdlog::set_level(spdlog::level::info);\n", "CodeBleu_score": 42.9527380445235}]}
{"instance_id": "83fa7f401579", "generation_result": [{"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\n\t// Create the XML parser.\n\tTSharedPtr< FXmlFile > XmlFile = MakeShareable( new FXmlFile( OSMFilePath, bIsFilePathActuallyTextBuffer ) );\n\n\t// Parse the XML file.\n\tif ( !XmlFile->Parse( FeedbackContext ) ) {\n\t\treturn false;\n\t}\n\n\t// Get the root node.\n\tTSharedPtr< FXmlNode > RootNode = XmlFile->GetRootNode();\n\n\t// If the root node is not valid, log an error and return.\n\tif ( !RootNode.IsValid() ) {\n\t\tUE_LOG( LogTemp, Error, TEXT( \"FOSMFile::LoadOpenStreetMapFile: The root node is not valid.\" ) );\n\t\treturn false;\n\t}\n\n\t// Get the child nodes.\n\tTArray< TSharedPtr< FXmlNode > > ChildNodes = RootNode->GetChildrenNodes();\n\n\t// If there are no child nodes, log an error and return.\n\tif ( ChildNodes.Num() == 0 ) {\n\t\tUE_LOG( LogTemp, Error, TEXT( \"FOSMFile::LoadOpenStreetMapFile: There are no child nodes.\" ) );\n\t\treturn false;\n\t}\n\n\t// Get the child nodes with the name \"node\".\n\tTArray< TSharedPtr< FXmlNode > > Nodes = RootNode->GetChildrenNodes( \"node\" );\n\n\t// If there are no nodes, log an error and return.\n\tif ( Nodes.Num() == 0 ) {\n\t\tUE_LOG( LogTemp, Error, TEXT( \"FOSMFile::LoadOpenStreetMapFile: There are no nodes.\" ) );\n\t\treturn false;\n\t}\n\n\t// Get the child nodes with the name \"way\".\n\tTArray< TSharedPtr< FXmlNode > > Ways = RootNode->GetChildrenNodes( \"way\" );\n\n\t// If there are no ways, log an error and return.\n\tif ( Ways.Num() == 0 ) {\n\t\tUE_LOG( LogTemp, Error, TEXT( \"FOSMFile::LoadOpenStreetMapFile:", "CodeBleu_score": 40.820007239486436}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\t// Clear out any previous data\n\tNodes.Empty();\n\tWays.Empty();\n\tRelations.Empty();\n\n\t// Set up the FFastXml parser\n\tFFastXml* FastXml = new FFastXml();\n\tFastXml->ProcessXmlFile( OSMFilePath, bIsFilePathActuallyTextBuffer, FeedbackContext );\n\n\t// If parsing was successful, process the data\n\tif ( FastXml->IsValid() ) {\n\t\tFastXml->GetRootNode()->IterateChildren( *this );\n\n\t\t// Calculate the average latitude and longitude from the node data\n\t\tdouble SumLatitude = 0.0;\n\t\tdouble SumLongitude = 0.0;\n\t\tfor ( auto Node : Nodes ) {\n\t\t\tSumLatitude += Node.Value.Latitude;\n\t\t\tSumLongitude += Node.Value.Longitude;\n\t\t}\n\t\tAverageLatitude = SumLatitude / Nodes.Num();\n\t\tAverageLongitude = SumLongitude / Nodes.Num();\n\n\t\t// Clean up\n\t\tdelete FastXml;\n\t\treturn true;\n\t}\n\n\t// If parsing failed, log an error message with the error details\n\telse {\n\t\tFString ErrorMessage = TEXT( \"Failed to parse OpenStreetMap XML file. Error: \" );\n\t\tErrorMessage += FastXml->GetErrorMessage();\n\t\tUE_LOG( LogTemp, Error, TEXT( \"%s\" ), *ErrorMessage );\n\n\t\t// Clean up\n\t\tdelete FastXml;\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 46.23905685145332}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\tbool bSuccess = false;\n\n\t// Create the parser\n\tFFastXml* Parser = new FFastXml();\n\n\t// Set the parser to use the provided feedback context\n\tif ( FeedbackContext ) {\n\t\tParser->SetFeedbackContext( FeedbackContext );\n\t}\n\n\t// Parse the file\n\tif ( Parser->ProcessXmlFile( OSMFilePath, bIsFilePathActuallyTextBuffer ) ) {\n\t\t// Get the root node\n\t\tFFastXmlNode* RootNode = Parser->GetRootNode();\n\n\t\t// Check the root node\n\t\tif ( RootNode ) {\n\t\t\t// Check the root node name\n\t\t\tif ( RootNode->GetTag() == \"osm\" ) {\n\t\t\t\t// Get the node list\n\t\t\t\tFFastXmlNode* NodeListNode = RootNode->FindChildNode( \"node\" );\n\n\t\t\t\t// Check the node list\n\t\t\t\tif ( NodeListNode ) {\n\t\t\t\t\t// Get the node list\n\t\t\t\t\tFFastXmlNode* NodeList = NodeListNode->GetNodeList();\n\n\t\t\t\t\t// Check the node list\n\t\t\t\t\tif ( NodeList ) {\n\t\t\t\t\t\t// Iterate over the node list\n\t\t\t\t\t\tfor ( int32 NodeIndex = 0; NodeIndex < NodeList->Num(); NodeIndex++ ) {\n\t\t\t\t\t\t\t// Get the current node\n\t\t\t\t\t\t\tFFastXmlNode* Node = NodeList->GetNode( NodeIndex );\n\n\t\t\t\t\t\t\t// Check the current node\n\t\t\t\t\t\t\tif ( Node ) {\n\t\t\t\t\t\t\t\t// Get the node attributes\n\t\t\t\t\t\t\t\tFFastXmlAttribute* NodeAttributes = Node->GetAttributes();\n\n\t\t\t\t\t\t\t\t// Check the node attributes\n\t\t\t\t\t\t\t\tif ( NodeAttributes ) {\n\t\t\t\t\t\t\t\t\t// Get the node ID\n\t\t\t\t\t\t\t\t\tFString NodeID = NodeAttributes->GetAttribute( \"id\" );\n\n\t\t\t\t", "CodeBleu_score": 40.376778479121256}]}
{"instance_id": "7349d775edf6", "generation_result": [{"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tif (UStreetMap* StreetMapAsset = Cast<UStreetMap>(Asset)) {\n\t\tAStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor);\n\n\t\tif (StreetMapActor) {\n\t\t\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\n\t\t\tif (StreetMapComponent) {\n\t\t\t\tStreetMapComponent->SetStreetMap(StreetMapAsset);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 81.18291554544268}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tif (Asset->IsA<UStreetMap>()) {\n\t\tAStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor);\n\t\tif (StreetMapActor) {\n\t\t\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\t\t\tif (StreetMapComponent) {\n\t\t\t\tStreetMapComponent->SetStreetMap(Cast<UStreetMap>(Asset));\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 72.16281526787482}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tif (Asset->IsA<UStreetMap>()) {\n\t\tAStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor);\n\t\tif (StreetMapActor) {\n\t\t\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\t\t\tif (StreetMapComponent) {\n\t\t\t\tStreetMapComponent->SetStreetMap(Cast<UStreetMap>(Asset));\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 72.16281526787482}]}
{"instance_id": "f160ac6d0353", "generation_result": [{"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tif (StreetMapComponent) {\n\t\tStreetMapComponent->BuildMesh();\n\t\t// Refresh the details view.\n\t\tif (DetailsView.IsValid()) {\n\t\t\tDetailsView->ForceRefresh();\n\t\t}\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 59.99328595036888}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tif (StreetMapComponent) {\n\t\tStreetMapComponent->BuildMesh();\n\t\t//Refresh the details view\n\t\tTSharedPtr<IDetailsView> DetailsView = PropertyCustomizationHelpers::GetDetailsView(CustomizationHelpers::GetProperty(GET_MEMBER_NAME_CHECKED(UStreetMapComponent, Mesh)));\n\t\tif (DetailsView.IsValid()) {\n\t\t\tDetailsView->ForceRefresh();\n\t\t}\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 52.79889389488276}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\n\t// Get the street map component\n\tUStreetMapComponent* StreetMapComponent = GetStreetMapComponent();\n\n\t// If the street map component is valid\n\tif (StreetMapComponent) {\n\n\t\t// Call the BuildMesh method on the street map component\n\t\tStreetMapComponent->BuildMesh();\n\n\t\t// Refresh the details view\n\t\tStreetMapComponentDetails->ForceRefreshDetails();\n\t}\n\n\t// Return a handled reply\n\treturn FReply::Handled();\n}", "CodeBleu_score": 58.32702746562832}]}
{"instance_id": "b23f1f2b29fa", "generation_result": [{"code": "void FStreetMapImportingModule::StartupModule(){\n\t\t// Register the StreetMap asset type\n\tIAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n\tRegisterAssetTypeAction(AssetTools, MakeShareable(new FStreetMapAssetTypeActions(AssetTools)));\n\n\t// Initialize the StreetMap style\n\tFSlateStyleRegistry::RegisterSlateStyle(*FS", "CodeBleu_score": 29.313054953812482}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t\t// Register the StreetMap asset type with the asset tools.\n\tIAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n\tAssetTools.RegisterAssetTypeActions(MakeShareable(new FStreetMapAssetTypeActions));\n\n\t// Initialize the StreetMap style.\n\tFSlateStyleRegistry::RegisterSlateStyle(*FS", "CodeBleu_score": 30.56088378730863}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t\t// Register the StreetMap asset type with the asset tools\n\tIAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n\tRegisterAssetTypeAction(AssetTools, MakeShareable(new FStreetMapAssetTypeActions(FStreetMapStyle::Get()->GetStyleName())));\n\n\t// Initialize the StreetMap style\n\tFStreetMapStyle::Get()->Initialize();\n\n\t// Register a custom class layout for the StreetMapComponent in the property editor module\n\tFPropertyEditorModule& PropertyEditorModule = FModuleManager::GetModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyEditorModule.RegisterCustomClassLayout(FStreetMapComponent::StaticClass()->GetFName(), FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n\n\t// Notify the property editor module that the customization module has changed\n\tPropertyEditorModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 67.42433593368418}]}
{"instance_id": "1da549fe84e3", "generation_result": [{"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\tif (Mesh) {\n\t\treturn new FStreetMapSceneProxy(this);\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 9.909059450547325}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\tif (Mesh != nullptr) {\n\t\treturn new FStreetMapSceneProxy(this);\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 10.650014674415303}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\tif (Mesh) {\n\t\tFStreetMapSceneProxy* Proxy = new FStreetMapSceneProxy();\n\t\tProxy->SetMesh(Mesh);\n\t\tProxy->SetVertices(Vertices);\n\t\tProxy->SetIndices(Indices);\n\t\treturn Proxy;\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 34.452396226556075}]}
{"instance_id": "d0ee3b2e023e", "generation_result": [{"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\tTArray<FKey> InputIDs;\n\tInputIDs.Add(FKey(TEXT(\"Ability01\")));\n\tBindAbilityToInputIDs(ServerHandle, InputIDs);\n}", "CodeBleu_score": 62.32497104007045}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\tTArray<FKey> InputIDs;\n\tInputIDs.Add(FKey(\"Ability01\"));\n\tGetCharacterMovement()->BindAbilityToInputIDs(ServerHandle, InputIDs);\n}", "CodeBleu_score": 63.06304653116367}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\tTArray<FKey> InputIDs;\n\tInputIDs.Add(EKeys::LeftMouseButton);\n\tInputIDs.Add(EKeys::RightMouseButton);\n\tInputIDs.Add(EKeys::MiddleMouseButton);\n\tInputIDs.Add(EKeys::LeftAlt);\n\tInputIDs.Add(EKeys::RightAlt);\n\tInputIDs.Add(EKeys::LeftControl);\n\tInputIDs.Add(EKeys::RightControl);\n\tInputIDs.Add(EKeys::LeftShift);\n\tInputIDs.Add(EKeys::RightShift);\n\tInputIDs.Add(EKeys::LeftCommand);\n\tInputIDs.Add(EKeys::RightCommand);\n\tInputIDs.Add(EKeys::LeftMouseButton);\n\tInputIDs.Add(EKeys::RightMouseButton);\n\tInputIDs.Add(EKeys::MiddleMouseButton);\n\tInputIDs.Add(EKeys::LeftAlt);\n\tInputIDs.Add(EKeys::RightAlt);\n\tInputIDs.Add(EKeys::LeftControl);\n\tInputIDs.Add(EKeys::RightControl);\n\tInputIDs.Add(EKeys::LeftShift);\n\tInputIDs.Add(EKeys::RightShift);\n\tInputIDs.Add(EKeys::LeftCommand);\n\tInputIDs.Add(EKeys::RightCommand);\n\tInputIDs.Add(EKeys::LeftMouseButton);\n\tInputIDs.Add(EKeys::RightMouseButton);\n\tInputIDs.Add(EKeys::MiddleMouseButton);\n\tInputIDs.Add(EKeys::LeftAlt);\n\tInputIDs.Add(EKeys::RightAlt);\n\tInputIDs.Add(EKeys::LeftControl);\n\tInputIDs.Add(EKeys::RightControl);\n\tInputIDs.Add(EKeys::LeftShift);\n\tInputIDs.Add(EKeys::RightShift);\n\tInputIDs.Add(EKeys::LeftCommand);\n\tInputIDs.Add(EKeys::RightCommand);\n\tInputIDs.Add(EKeys::LeftMouseButton);\n\tInput", "CodeBleu_score": 44.62233523236736}]}
{"instance_id": "e62f1b2cd4bd", "generation_result": [{"code": "void AARCharacter::MoveForward(float Value){\n\t\tif (Controller && Value != 0.0f) {\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 83.42973602512632}, {"code": "void AARCharacter::MoveForward(float Value){\n\t\tif (Controller != nullptr && Value != 0.0f) {\n\t\t// Find out which way is forward.\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// Get forward vector.\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 85.1273627571628}, {"code": "void AARCharacter::MoveForward(float Value){\n\t\tif (Controller && Value != 0.0f) {\n\t\t// find out which way is forward\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// get forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 83.42973602512632}]}
{"instance_id": "a77cdc67ee00", "generation_result": [{"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (MainWeaponMeshComponent) {\n\t\treturn MainWeaponMeshComponent->GetSocketLocation(Socket);\n\t}\n\treturn GetMesh()->GetSocketLocation(Socket);\n}", "CodeBleu_score": 48.79418501246502}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (MainWeaponMeshComponent != nullptr) {\n\t\treturn MainWeaponMeshComponent->GetSocketLocation(Socket);\n\t}\n\telse {\n\t\treturn GetMesh()->GetSocketLocation(Socket);\n\t}\n}", "CodeBleu_score": 49.5570303801468}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (MainWeaponMesh) {\n\t\treturn MainWeaponMesh->GetSocketLocation(Socket);\n\t}\n\treturn GetMesh()->GetSocketLocation(Socket);\n}", "CodeBleu_score": 45.75629000212732}]}
{"instance_id": "f021203f736a", "generation_result": [{"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tif (InEnemy == nullptr) {\n\t\treturn;\n\t}\n\t\n\tfor (int32 i = 0; i < SpawnedEnemies.Num(); i++) {\n\t\tif (SpawnedEnemies[i] == InEnemy) {\n\t\t\tSpawnedEnemies.RemoveAt(i);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (SpawnedEnemies.Num() <= MinimumEnemies) {\n\t\tGetWorldTimerManager().SetTimer(RespawnTimer, this, &AAREnemySpawner::SpawnEnemy, RespawnDelay, false);\n\t}\n}", "CodeBleu_score": 51.70371250181744}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tif (InEnemy) {\n\t\tif (SpawnedEnemies.Contains(InEnemy)) {\n\t\t\tSpawnedEnemies.Remove(InEnemy);\n\t\t\tif (SpawnedEnemies.Num() <= MinSpawnedEnemies) {\n\t\t\t\tGetWorld()->GetTimerManager().SetTimer(RespawnTimer, this, &AAREnemySpawner::SpawnEnemies, RespawnTime, false);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 51.79690729298787}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tif (InEnemy) {\n\t\t// Remove the enemy from the list of spawned enemies\n\t\tSpawnedEnemies.Remove(InEnemy);\n\n\t\t// If the number of spawned enemies falls below a minimum threshold, set up the spawner to respawn enemies\n\t\tif (SpawnedEnemies.Num() < MinSpawnedEnemies) {\n\t\t\tGetWorldTimerManager().SetTimer(RespawnTimer, this, &AAREnemySpawner::SpawnEnemies, RespawnTime, false);\n\t\t}\n\t}\n}", "CodeBleu_score": 50.262849026591326}]}
{"instance_id": "dbab72cb539f", "generation_result": [{"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\tFString Result = Super::ApproveLogin(Options);\n\t// Parse the command line to find the \"PlayerId\" option\n\tTArray<FString> Params;\n\tTArray<FString> Switches;\n\tTMap<FString, FString> OptionsMap;\n\tTMultiMap<FString, FString> MultiOptionsMap;\n\tParseCommandLine(Options, Params, Switches, OptionsMap, MultiOptionsMap);\n\n\t// Find the \"PlayerId\" option\n\tconst FString* PlayerIdValue = OptionsMap.Find(TEXT(\"PlayerId\"));\n\tif (PlayerIdValue != NULL) {\n\t\t// If present, convert the value to an integer and store it in PlayerId\n\t\tint32 IdValue;\n\t\tif (FDefaultValueHelper::ParseInt(*PlayerIdValue, IdValue)) {\n\t\t\tPlayerId = IdValue;\n\t\t}\n\t}\n\n\treturn Result;\n}", "CodeBleu_score": 51.861081875059156}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\tFString Result = Super::ApproveLogin(Options);\n\n\t// Parse the options string into an array of strings\n\tTArray<FString> Params;\n\tOptions.ParseIntoArray(Params, TEXT(\",\"), false);\n\n\t// Search for the \"PlayerId\" parameter\n\tconst FString* PlayerId = Params.FindByPredicate([](const FString& Element) {\n\t\treturn Element.StartsWith(TEXT(\"PlayerId=\"));\n\t});\n\n\tif (PlayerId != nullptr) {\n\t\t// Extract the player ID value\n\t\tPlayerId->Split(TEXT(\"=\"), &PlayerId, nullptr);\n\t\tPlayerId->TrimStartInline();\n\t\tPlayerId->TrimEndInline();\n\t\tPlayerIdValue = FCString::Atoi(*PlayerId);\n\t}\n\n\treturn Result;\n}", "CodeBleu_score": 52.75829745202648}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\tFString Result = Super::ApproveLogin(Options);\n\n\t// Parse the command line\n\tTArray<FString> Params;\n\tTArray<FString> Switches;\n\tTMap<FString, FString> ParamVals;\n\tTMultiMap<FString, FString> UniSwitches;\n\tParseCommandLine(Options, Params, Switches, ParamVals, UniSwitches);\n\n\t// Find the player ID\n\tconst FString* PlayerId = ParamVals.Find(TEXT(\"PlayerId\"));\n\tif (PlayerId) {\n\t\tPlayerIdStr = *PlayerId;\n\t}\n\n\treturn Result;\n}", "CodeBleu_score": 52.7721901054534}]}
{"instance_id": "85ea02df92a5", "generation_result": [{"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tif (Username.IsEmpty() || DisplayName.IsEmpty() || Password.IsEmpty()) {\n\t\tFString ErrorMessage = FString(\"Please fill in all fields.\");\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"%s\"), *ErrorMessage);\n\t\treturn;\n\t}\n\n\tif (Password.Len() < 6) {\n\t\tFString ErrorMessage = FString(\"Password must be at least 6 characters.\");\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"%s\"), *ErrorMessage);\n\t\treturn;\n\t}\n\n\tRegisterButton->SetVisibility(ESlateVisibility::Collapsed);\n\tRegisterButton->SetEnabled(false);\n\tFString UsernameStr = Username.ToString();\n\tFString DisplayNameStr = DisplayName.ToString();\n\tFString PasswordStr = Password.ToString();\n\tUARGameInstance* GameInstance = Cast<UARGameInstance>(GetWorld()->GetGameInstance());\n\tGameInstance->RegisterNewPlayer(UsernameStr, DisplayNameStr, PasswordStr);\n}", "CodeBleu_score": 53.40203126450852}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tFString username = UsernameInput->GetText().ToString();\n\tFString displayName = DisplayNameInput->GetText().ToString();\n\tFString password = PasswordInput->GetText().ToString();\n\n\tif (username.IsEmpty() || displayName.IsEmpty() || password.IsEmpty()) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"ARRegisterView::OnRegisterClicked: Some fields are empty.\"));\n\t\treturn;\n\t}\n\n\tRegisterButton->SetVisibility(ESlateVisibility::Collapsed);\n\tRegisterButton->SetEnabled(false);\n\n\tUARGameInstance* gameInstance = UARGameInstance::GetInstance();\n\tgameInstance->RegisterNewPlayer(username, displayName, password);\n}", "CodeBleu_score": 47.17333283694068}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tif (UsernameInput->GetText().IsEmpty() || DisplayNameInput->GetText().IsEmpty() || PasswordInput->GetText().IsEmpty()) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"One of the input fields is empty!\"));\n\t\treturn;\n\t}\n\tRegisterButton->SetVisibility(ESlateVisibility::Collapsed);\n\tUARGameInstance* GameInstance = Cast<UARGameInstance>(GetWorld()->GetGameInstance());\n\tGameInstance->RegisterNewPlayer(UsernameInput->GetText(), DisplayNameInput->GetText(), PasswordInput->GetText());\n}", "CodeBleu_score": 36.33913204416767}]}
{"instance_id": "b33bb5886dd9", "generation_result": [{"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\tif (InMod.TargetActor) {\n\t\tFVector2D ScreenLocation;\n\t\tif (UGameplayStatics::ProjectWorldToScreen(GetWorld(), InMod.TargetActor->GetActorLocation(), ScreenLocation)) {\n\t\t\tif (FloatingCombatText) {\n\t\t\t\tFloatingCombatText->SetCombatText(FText::FromString(FString::FromInt(InMod.Value)), ScreenLocation);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 33.5677280937947}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\tif (InMod.TargetActor.IsValid()) {\n\t\tFVector2D ScreenLocation;\n\t\tif (UGameplayStatics::ProjectWorldToScreen(GetWorld(), InMod.TargetActor->GetActorLocation(), ScreenLocation)) {\n\t\t\tFARHUDFloatingCombatText* FloatingCombatText = Cast<FARHUDFloatingCombatText>(CreateWidget(GetWorld(), ARHUDFloatingCombatText::StaticClass()));\n\t\t\tFloatingCombatText->SetText(FText::AsNumber(InMod.Value));\n\t\t\tFloatingCombatText->SetScreenLocation(ScreenLocation);\n\t\t\tFloatingCombatText->SetDuration(2.0f);\n\t\t\tFloatingCombatText->AddToViewport();\n\t\t}\n\t}\n}", "CodeBleu_score": 39.39213033641694}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\n\tif (InMod.TargetActor) {\n\n\t\tFVector2D ScreenLocation;\n\n\t\tif (UGameplayStatics::ProjectWorldToScreen(GetWorld(), InMod.TargetActor->GetActorLocation(), ScreenLocation)) {\n\n\t\t\tFARHUDFloatingCombatText* FloatingCombatText = GetWorld()->SpawnActor<FARHUDFloatingCombatText>(FloatingCombatTextClass, FVector::ZeroVector, FRotator::ZeroRotator);\n\n\t\t\tFloatingCombatText->SetText(FText::FromString(FString::FromInt(InMod.Value)));\n\n\t\t\tFloatingCombatText->SetLocation(ScreenLocation);\n\n\t\t}\n\n\t}\n\n}", "CodeBleu_score": 37.208200004919355}]}
{"instance_id": "177d36e7e076", "generation_result": [{"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (InMagazineUpgrade == nullptr) {\n\t\treturn;\n\t}\n\n\tif (InMagazineUpgrade->GetMagazineUpgradeAbility() == nullptr) {\n\t\treturn;\n\t}\n\n\tif (InMagazineUpgrade->GetMagazineUpgradeAbility()->GetAbilityLevel() == 0) {\n\t\treturn;\n\t}\n\n\tif (InMagazineUpgrade->GetMagazineUpgradeAbility()->GetAbilityLevel() > 1) {\n\t\treturn;\n\t}\n\n\tif (InMagazineUpgrade->GetMagazineUpgradeAbility()->GetAbilityLevel() > InMagazineUpgrade->GetMaxLevel()) {\n\t\treturn;\n\t}\n\n\tif (InMagazineUpgrade->GetMagazineUpgradeAbility()->GetAbilityLevel() > InMagazineUpgrade->GetMagazineUpgradeAbility()->GetMaxLevel()) {\n\t\treturn;\n\t}\n\n\tif (InMagazineUpgrade->GetMagazineUpgradeAbility()->GetAbilityLevel() > InMagazineUpgrade->GetMaxLevel()) {\n\t\treturn;\n\t}\n\n\tif (InMagazineUpgrade->GetMagazineUpgradeAbility()->GetAbilityLevel() > InMagazineUpgrade->GetMaxLevel()) {\n\t\treturn;\n\t}\n\n\tif (InMagazineUpgrade->GetMagazineUpgradeAbility()->GetAbilityLevel() > InMagazineUpgrade->GetMaxLevel()) {\n\t\treturn;\n\t}\n\n\tif (InMagazineUpgrade->GetMagazineUpgradeAbility()->GetAbilityLevel() > InMagazineUpgrade->GetMaxLevel()) {\n\t\treturn;\n\t}\n\n\tif (InMagazineUpgrade->GetMagazineUpgradeAbility()->GetAbilityLevel() > InMagazineUpgrade->GetMaxLevel()) {\n\t\treturn;\n\t}\n\n\tif (InMagazineUpgrade->GetMagazineUpgradeAbility()->GetAbilityLevel() > InMagazineUpgrade->GetMaxLevel()) {\n\t\treturn;\n\t}\n\n\tif (InMagazineUpgrade->GetMagazineUpgradeAbility()->GetAbilityLevel() >", "CodeBleu_score": 16.36376341436688}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (InMagazineUpgrade) {\n\t\tARWeaponAbilityBase* Ability = GetAbility();\n\t\tif (Ability) {\n\t\t\tARWeaponInventoryComponent* Weapon = Ability->GetWeapon();\n\t\t\tif (Weapon) {\n\t\t\t\tARCharacter* Character = Weapon->GetCharacter();\n\t\t\t\tif (Character) {\n\t\t\t\t\tif (Character->IsLocallyControlled() || Character->HasAuthority()) {\n\t\t\t\t\t\tUARMagazineUpgradeItem* MagazineUpgrade = DuplicateObject<UARMagazineUpgradeItem>(InMagazineUpgrade, this);\n\t\t\t\t\t\tif (MagazineUpgrade) {\n\t\t\t\t\t\t\tMagazineUpgrade->ApplyToAbility(Ability);\n\t\t\t\t\t\t\tOnMagazineUpgradeAdded(MagazineUpgrade);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 45.735082227192635}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (InMagazineUpgrade) {\n\t\tif (InMagazineUpgrade->Ability) {\n\t\t\tif (Ability) {\n\t\t\t\tARWeaponInventoryComponent* WeaponInventory = Ability->GetWeaponInventory();\n\t\t\t\tif (WeaponInventory) {\n\t\t\t\t\tARCharacter* Character = WeaponInventory->GetCharacter();\n\t\t\t\t\tif (Character) {\n\t\t\t\t\t\tif (Character->IsLocallyControlled()) {\n\t\t\t\t\t\t\tif (InMagazineUpgrade->Ability->GetWeaponInventory() == Ability->GetWeaponInventory()) {\n\t\t\t\t\t\t\t\tif (InMagazineUpgrade->Ability->GetWeaponInventory()->GetWeaponAbility() == Ability) {\n\t\t\t\t\t\t\t\t\tif (InMagazineUpgrade->MagazineUpgradeValue > 0) {\n\t\t\t\t\t\t\t\t\t\tif (InMagazineUpgrade->Ability->GetWeaponInventory()->GetWeaponAbility()->GetWeaponAttributes()->MagazineSize.GetValue() + InMagazineUpgrade->MagazineUpgradeValue > InMagazineUpgrade->Ability->GetWeaponInventory()->GetWeaponAbility()->GetWeaponAttributes()->MaxMagazineSize.GetValue()) {\n\t\t\t\t\t\t\t\t\t\t\tInMagazineUpgrade->MagazineUpgradeValue = InMagazineUpgrade->Ability->GetWeaponInventory()->GetWeaponAbility()->GetWeaponAttributes()->MaxMagazineSize.GetValue() - InMagazineUpgrade->Ability->GetWeaponInventory()->GetWeaponAbility()->GetWeaponAttributes()->MagazineSize.GetValue();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tInMagazineUpgrade->Ability->GetWeaponInventory()->GetWeaponAbility()->GetWeaponAttributes()->MagazineSize.SetValue(InMagazineUpgrade->Ability->GetWeaponInventory()->GetWeaponAbility()->", "CodeBleu_score": 28.41519175402804}]}
{"instance_id": "404276da398b", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tAARCharacter* OwnerCharacter = Cast<AARCharacter>(GetOwner());\n\tif (OwnerCharacter) {\n\t\tUAFAbilityComponent* AbilityComp = OwnerCharacter->GetAbilityComponent();\n\t\tif (AbilityComp) {\n\t\t\tUARWeaponAbilityBase* Ability = AbilityComp->GetAbilityByHandle(InAbilityTag, LocalIndex);\n\t\t\tif (Ability) {\n\t\t\t\tUGAAbilityBase* GAAbility = Cast<UGAAbilityBase>(Ability);\n\t\t\t\tif (GAAbility) {\n\t\t\t\t\tSetAbilityToItem(GAAbility);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 52.84388398612777}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tAARCharacter* OwnerCharacter = Cast<AARCharacter>(GetOwner());\n\tif (OwnerCharacter) {\n\t\tUAFAbilityComponent* AbilityComponent = OwnerCharacter->GetAbilityComponent();\n\t\tif (AbilityComponent) {\n\t\t\tUGAAbilityBase* Ability = AbilityComponent->GetAbilityByHandle(InAbilityTag, LocalIndex);\n\t\t\tif (Ability) {\n\t\t\t\tSetAbilityToItem(Ability);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 52.72820077541922}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t    // Cast the owner to an AARCharacter\n    AARCharacter* Character = Cast<AARCharacter>(GetOwner());\n    if (Character) {\n        // Get the ability component from the owner\n        UAFAbilityComponent* AbilityComponent = Cast<UAFAbilityComponent>(Character->GetAbilityComponent());\n        if (AbilityComponent) {\n            // Get the ability by its handle from the server weapon abilities using the provided local index\n            UGAAbilityBase* Ability = AbilityComponent->GetAbilityByHandle(InAbilityTag.GetHandle(LocalIndex));\n            if (Ability) {\n                // Cast the ability to UGAAbilityBase and set this ability to the corresponding item using SetAbilityToItem\n                SetAbilityToItem(Cast<UGAAbilityBase>(Ability));\n            }\n        }\n    }\n}", "CodeBleu_score": 52.63514197178396}]}
{"instance_id": "2e97aab98981", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tAARCharacter* Character = Cast<AARCharacter>(GetOwner());\n\tif (Character) {\n\t\tFARWeaponRPC WeaponData;\n\t\tWeaponData.WeaponIndex = LocalIndex;\n\t\tWeaponData.WeaponID = 0;\n\t\tWeaponData.WeaponData = 0;\n\t\tCharacter->SetWeaponData(WeaponData, LocalIndex);\n\n\t\tif (LocalIndex == Character->GetCurrentWeaponIndex()) {\n\t\t\tCharacter->UnequipWeapon();\n\t\t}\n\t}\n}", "CodeBleu_score": 47.355156717850086}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tAARCharacter* OwnerCharacter = Cast<AARCharacter>(GetOwner());\n\tif (OwnerCharacter) {\n\t\tFARWeaponRPC WeaponRPC;\n\t\tWeaponRPC.WeaponIndex = LocalIndex;\n\t\tWeaponRPC.WeaponData = FARWeaponData();\n\t\tWeaponRPC.WeaponData.WeaponIndex = LocalIndex;\n\t\tWeaponRPC.WeaponData.WeaponAsset = nullptr;\n\t\tWeaponRPC.WeaponData.WeaponAbility = nullptr;\n\t\tWeaponRPC.WeaponData.WeaponAbilityName = NAME_None;\n\t\tWeaponRPC.WeaponData.WeaponAbilityClass = nullptr;\n\t\tWeaponRPC.WeaponData.WeaponAbilityLevel = 0;\n\t\tWeaponRPC.WeaponData.WeaponAbilityMaxLevel = 0;\n\t\tWeaponRPC.WeaponData.WeaponAbilityXP = 0;\n\t\tWeaponRPC.WeaponData.WeaponAbilityXPMax = 0;\n\t\tWeaponRPC.WeaponData.WeaponAbilityXPRequired = 0;\n\t\tWeaponRPC.WeaponData.WeaponAbilityXPRequiredMax = 0;\n\t\tWeaponRPC.WeaponData.WeaponAbilityXPRequiredToLevelUp = 0;\n\t\tWeaponRPC.WeaponData.WeaponAbilityXPRequiredToLevelUpMax = 0;\n\t\tWeaponRPC.WeaponData.WeaponAbilityXPRequiredToLevelUpMax = 0;\n\t\tWeaponRPC.WeaponData.WeaponAbilityXPRequiredToLevelUpMax = 0;\n\t\tWeaponRPC.WeaponData.WeaponAbilityXPRequiredToLevelUpMax = 0;\n\t\tWeaponRPC.WeaponData.", "CodeBleu_score": 26.19039887831811}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tAARCharacter* OwnerCharacter = Cast<AARCharacter>(GetOwner());\n\tif (OwnerCharacter) {\n\t\tFARWeaponRPC RPC;\n\t\tRPC.LocalIndex = LocalIndex;\n\t\tRPC.WeaponData = FARWeaponData();\n\t\tOwnerCharacter->SetWeaponData(RPC);\n\t\tOwnerCharacter->UpdateWeaponComponent(RPC.LocalIndex);\n\n\t\tif (OwnerCharacter->GetCurrentWeapon() == LocalIndex) {\n\t\t\tOwnerCharacter->UnequipWeapon();\n\t\t}\n\t}\n}", "CodeBleu_score": 49.15388786758757}]}
{"instance_id": "13cc35e5ecac", "generation_result": [{"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\tif (!IsRunningDedicatedServer()) {\n\t\tFMoviePlayer::Get().RemoveLoadingScreenPreparationHandlers(this);\n\t}\n}", "CodeBleu_score": 43.009640937200984}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\tif (!IsRunningDedicatedServer()) {\n\t\tFMoviePlayer::Get().RemoveLoadingScreenPreparationHandlers(this);\n\t}\n}", "CodeBleu_score": 43.009640937200984}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\tif (!IsRunningDedicatedServer()) {\n\t\t// Remove all loading screen preparation handlers associated with this module from the movie player\n\t\tif (FModuleManager::Get().IsModuleLoaded(TEXT(\"MoviePlayer\"))) {\n\t\t\tIMoviePlayerModule& MoviePlayerModule = FModuleManager::LoadModuleChecked<IMoviePlayerModule>(TEXT(\"MoviePlayer\"));\n\t\t\tMoviePlayerModule.GetMoviePlayer()->RemoveLoadingScreenPreparationHandler(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 32.00895739282006}]}
{"instance_id": "2ee3ac60a8f3", "generation_result": [{"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"PreSetupLoadingScreen\"));\n\tif (bLoadingScreenEnabled) {\n\t\tDefaultLoadingScreenSettings = GetDefault<ULoadingScreenSettings>();\n\t\tbLoadingScreenStarted = false;\n\t\tSetupLoadingScreen(DefaultLoadingScreenSettings);\n\t}\n}", "CodeBleu_score": 44.56061530331584}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"PreSetupLoadingScreen\"));\n\tif (IsLoadingScreenEnabled()) {\n\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"Loading Screen is enabled\"));\n\t\tULoadingScreenSettings* LoadingScreenSettings = GetDefault<ULoadingScreenSettings>();\n\t\tbIsSetup = false;\n\t\tSetupLoadingScreen(LoadingScreenSettings);\n\t}\n}", "CodeBleu_score": 56.63022088213929}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"PreSetupLoadingScreen\"));\n\tif (IsLoadingScreenEnabled()) {\n\t\tULoadingScreenSettings* LoadingScreenSettings = GetDefault<ULoadingScreenSettings>();\n\t\tif (LoadingScreenSettings) {\n\t\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"LoadingScreenSettings found\"));\n\t\t\tSetLoadingScreenStartupFlag(false);\n\t\t\tSetupLoadingScreen(LoadingScreenSettings);\n\t\t}\n\t\telse {\n\t\t\tUE_LOG(LogAsyncLoadingScreen, Warning, TEXT(\"LoadingScreenSettings not found\"));\n\t\t}\n\t}\n}", "CodeBleu_score": 51.95233168762577}]}
{"instance_id": "c095588f550c", "generation_result": [{"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\tBackgroundImages.Empty();\n\tBackgroundImages.Add(LoadBackgroundImage(TEXT(\"LoadingScreen_Default\")));\n\tBackgroundImages.Add(LoadBackgroundImage(TEXT(\"LoadingScreen_Startup\")));\n}", "CodeBleu_score": 19.84077728531442}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\tBackgroundImages.Empty();\n\n\tconst ULoadingScreenSettings* LoadingScreenSettings = GetDefault<ULoadingScreenSettings>();\n\tif (LoadingScreenSettings) {\n\t\tfor (const FLoadingScreenDescription& LoadingScreenDescription : LoadingScreenSettings->LoadingScreens) {\n\t\t\tif (LoadingScreenDescription.Image) {\n\t\t\t\tBackgroundImages.Add(LoadingScreenDescription.Image);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 36.81409484539839}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\t// Remove all background images\n\tBackgroundImages.Empty();\n\t// Retrieve the loading screen settings\n\tULoadingScreenSettings* LoadingScreenSettings = UAsyncLoadingScreenLibrary::GetLoadingScreenSettings();\n\t// If the loading screen settings are valid\n\tif (LoadingScreenSettings) {\n\t\t// Load and add images for the startup loading screen\n\t\tfor (FLoadingScreenDescription& LoadingScreen : LoadingScreenSettings->StartupLoadingScreens) {\n\t\t\tif (LoadingScreen.Image.IsValid()) {\n\t\t\t\tBackgroundImages.Add(LoadingScreen.Image);\n\t\t\t}\n\t\t}\n\t\t// Load and add images for the default loading screen\n\t\tfor (FLoadingScreenDescription& LoadingScreen : LoadingScreenSettings->DefaultLoadingScreens) {\n\t\t\tif (LoadingScreen.Image.IsValid()) {\n\t\t\t\tBackgroundImages.Add(LoadingScreen.Image);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 44.20521431759521}]}
{"instance_id": "4ffd56e2a326", "generation_result": [{"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\n\t// Get the current alpha value of the loading complete text\n\tfloat CurrentAlpha = LoadingCompleteText->GetRenderOpacity();\n\n\t// Get the current alpha value of the loading complete text\n\tfloat TargetAlpha = LoadingCompleteText->GetRenderOpacity();\n\n\t// If the animation direction is forward\n\tif (bIsAnimatingForward) {\n\n\t\t// If the alpha value is greater than the maximum alpha value\n\t\tif (CurrentAlpha >= MaximumAlpha) {\n\n\t\t\t// Reverse the animation direction\n\t\t\tbIsAnimatingForward = false;\n\t\t}\n\t\t// Else if the alpha value is less than the minimum alpha value\n\t\telse if (CurrentAlpha <= MinimumAlpha) {\n\n\t\t\t// Reverse the animation direction\n\t\t\tbIsAnimatingForward = false;\n\t\t}\n\t\t// Else the animation direction is forward\n\t\telse {\n\n\t\t\t// Increase the alpha value\n\t\t\tTargetAlpha += AnimationSpeed * InDeltaTime;\n\t\t}\n\t}\n\t// Else the animation direction is backward\n\telse {\n\n\t\t// If the alpha value is less than the maximum alpha value\n\t\tif (CurrentAlpha <= MaximumAlpha) {\n\n\t\t\t// Reverse the animation direction\n\t\t\tbIsAnimatingForward = true;\n\t\t}\n\t\t// Else if the alpha value is greater than the minimum alpha value\n\t\telse if (CurrentAlpha >= MinimumAlpha) {\n\n\t\t\t// Reverse the animation direction\n\t\t\tbIsAnimatingForward = true;\n\t\t}\n\t\t// Else the animation direction is backward\n\t\telse {\n\n\t\t\t// Decrease the alpha value\n\t\t\tTargetAlpha -= AnimationSpeed * InDeltaTime;\n\t\t}\n\t}\n\n\t// Set the alpha value of the loading complete text\n\tLoadingCompleteText->SetRenderOpacity(TargetAlpha);\n\n\t// Return the status indicating the animation should continue\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 50.14614750289108}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\tif (bIsAnimating) {\n\t\tconst float CurrentAlpha = TextBlock->GetRenderOpacity();\n\t\tconst float TargetAlpha = bReverse ? MinAlpha : MaxAlpha;\n\t\tconst float Direction = bReverse ? -1.0f : 1.0f;\n\t\tconst float Speed = bReverse ? -AnimationSpeed : AnimationSpeed;\n\n\t\tconst float NewAlpha = FMath::Lerp(CurrentAlpha, TargetAlpha, Direction * InDeltaTime * Speed);\n\n\t\tif (FMath::IsNearlyEqual(NewAlpha, TargetAlpha)) {\n\t\t\tbReverse = !bReverse;\n\t\t}\n\n\t\tTextBlock->SetRenderOpacity(NewAlpha);\n\t}\n\n\treturn bIsAnimating ? EActiveTimerReturnType::Continue : EActiveTimerReturnType::Stop;\n}", "CodeBleu_score": 38.42769740981719}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\tif (MoviePlayer != nullptr) {\n\t\tif (MoviePlayer->IsMoviePlaying(MovieHandle)) {\n\t\t\treturn EActiveTimerReturnType::Stop;\n\t\t}\n\t}\n\n\tif (LoadingCompleteTextWidget.IsValid()) {\n\t\tif (InCurrentTime < 0.0) {\n\t\t\tInCurrentTime = 0.0;\n\t\t}\n\n\t\tif (InCurrentTime > 1.0) {\n\t\t\tInCurrentTime = 1.0;\n\t\t}\n\n\t\tfloat Alpha = FMath::Lerp(MinAlpha, MaxAlpha, InCurrentTime);\n\t\tLoadingCompleteTextWidget->SetOpacity(Alpha);\n\n\t\tif (Alpha == MinAlpha) {\n\t\t\tDirection = 1.0f;\n\t\t}\n\n\t\tif (Alpha == MaxAlpha) {\n\t\t\tDirection = -1.0f;\n\t\t}\n\n\t\tInCurrentTime += InDeltaTime * AnimationSpeed * Direction;\n\t\tGetWorld()->GetTimerManager().SetTimer(LoadingCompleteTextTimerHandle, this, &SLoadingCompleteText::AnimateText, InDeltaTime, false, InCurrentTime);\n\t}\n\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 36.51688375599394}]}
{"instance_id": "7420af124c78", "generation_result": [{"code": "bool FRaceAwaiter::await_ready(){\n\t\tbool bReady = false;\n\t{\n\t\tFScopeLock Lock(&Data->Lock);\n\t\tif (Data->Index != -1) {\n\t\t\tbReady = true;\n\t\t}\n\t}\n\treturn bReady;\n}", "CodeBleu_score": 50.83932819618353}, {"code": "bool FRaceAwaiter::await_ready(){\n\t\tbool bReady = false;\n\tif (Lock.TryLock()) {\n\t\tbReady = (Index != -1);\n\t\tLock.Unlock();\n\t}\n\treturn bReady;\n}", "CodeBleu_score": 41.92911334641546}, {"code": "bool FRaceAwaiter::await_ready(){\n\t\tLockData();\n\tbool bReady = (Index != -1);\n\tUnlockData();\n\treturn bReady;\n}", "CodeBleu_score": 27.09117329462179}]}
{"instance_id": "fab9fe81573a", "generation_result": [{"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tif (bCleanup) {\n\t\t// If we're cleaning up, we can't resume the pathfinding\n\t\tif (State) {\n\t\t\t// If the state is valid, we need to abort the async find path request\n\t\t\t// and delete the state\n\t\t\tauto PathFindingState = static_cast<FPathFindingState*>(State);\n\t\t\tPathFindingState->Abort();\n\t\t\tdelete PathFindingState;\n\t\t}\n\t\treturn false;\n\t}\n\n\t// If the state is valid, we can resume the pathfinding\n\treturn State != nullptr;\n}", "CodeBleu_score": 27.233262779800675}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tif (bCleanup) {\n\t\tUUE5CoroAICallbackTarget* Target = static_cast<UUE5CoroAICallbackTarget*>(State);\n\t\tif (Target->QueryID != 0) {\n\t\t\tUNavigationSystem::AbortPathFindingTask(*Target->Owner, Target->QueryID);\n\t\t\tTarget->QueryID = 0;\n\t\t}\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 30.593209270013922}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tif (bCleanup) {\n\t\tif (FNavigationQueryFilter* Filter = static_cast<FNavigationQueryFilter*>(State)) {\n\t\t\tif (Filter->IsValid()) {\n\t\t\t\tFilter->Abort();\n\t\t\t}\n\t\t}\n\t}\n\treturn !bCleanup;\n}", "CodeBleu_score": 24.27152759195943}]}
{"instance_id": "0656af2cb3eb", "generation_result": [{"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (get_tree()->get_edited_scene_root() != get_parent()) {\n\t\t\t\tif (AudioServer::get_singleton()->get_listener() == Object::cast_to<AudioListener2D>(this)) {\n\t\t\t\t\tAudioServer::get_singleton()->set_listener(nullptr);\n\t\t\t\t}\n\t\t\t\tif (AudioServer::get_singleton()->get_listener() == nullptr) {\n\t\t\t\t\tAudioServer::get_singleton()->set_listener(Object::cast_to<AudioListener2D>(this));\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (get_tree()->get_edited_scene_root() != get_parent()) {\n\t\t\t\tif (AudioServer::get_singleton()->get_listener() == Object::cast_to<AudioListener2D>(this)) {\n\t\t\t\t\tAudioServer::get_singleton()->set_listener(nullptr);\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 48.09614764419698}, {"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE:\n\t\t\tif (!get_tree()->get_edited_scene_root()->is_a_parent_of(this) && AudioServer::get_singleton()->get_listener() != this) {\n\t\t\t\tAudioServer::get_singleton()->set_listener(this);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase NOTIFICATION_EXIT_TREE:\n\t\t\tif (!get_tree()->get_edited_scene_root()->is_a_parent_of(this) && AudioServer::get_singleton()->get_listener() == this) {\n\t\t\t\tAudioServer::get_singleton()->set_listener(nullptr);\n\t\t\t}\n\t\t\tbreak;\n\t}\n}", "CodeBleu_score": 49.0206130787161}, {"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (!is_inside_tree() || !is_inside_scene()) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (AudioServer::get_singleton()->get_listener() != this) {\n\t\t\t\tif (AudioServer::get_singleton()->get_listener() != nullptr) {\n\t\t\t\t\tAudioServer::get_singleton()->set_listener(this);\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (!is_inside_tree() || !is_inside_scene()) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (AudioServer::get_singleton()->get_listener() == this) {\n\t\t\t\tif (AudioServer::get_singleton()->get_listener() != nullptr) {\n\t\t\t\t\tAudioServer::get_singleton()->set_listener(nullptr);\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\n\t\tdefault: break;\n\t}\n}", "CodeBleu_score": 48.801586838574366}]}
{"instance_id": "9aadd2c91e67", "generation_result": [{"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\n\tif (!active || using_threads)\n\t\treturn;\n\n\tint todo = p_frames;\n\n\twhile (todo) {\n\n\t\tint todo2 = todo;\n\n\t\tif (todo2 > mix_buffer.size())\n\t\t\ttodo2 = mix_buffer.size();\n\n\t\tlock();\n\n\t\tint todo3 = todo2;\n\n\t\tif (todo3 > audio_server_process_samples.size())\n\t\t\ttodo3 = audio_server_process_samples.size();\n\n\t\tif (todo3 == 0) {\n\t\t\tunlock();\n\t\t\tbreak;\n\t\t}\n\n\t\tfor (int i = 0; i < todo3; i++) {\n\n\t\t\tp_buffer[i] += mix_buffer[i];\n\t\t}\n\n\t\tfor (int i = 0; i < todo3; i++) {\n\n\t\t\tmix_buffer[i] = 0;\n\t\t}\n\n\t\tunlock();\n\n\t\ttodo -= todo3;\n\t}\n}", "CodeBleu_score": 51.503932633897406}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\n\tif (!active)\n\t\treturn;\n\n\tif (thread)\n\t\treturn;\n\n\tint todo = p_frames;\n\twhile (todo) {\n\n\t\tint todo_mix = todo;\n\t\tif (todo_mix > mix_buffer_size)\n\t\t\ttodo_mix = mix_buffer_size;\n\n\t\tlock();\n\n\t\tfor (int i = 0; i < todo_mix; i++) {\n\n\t\t\tint32_t sample = mix_buffer[i];\n\t\t\tp_buffer[i] = sample;\n\t\t}\n\n\t\tunlock();\n\n\t\tp_buffer += todo_mix;\n\t\ttodo -= todo_mix;\n\t}\n}", "CodeBleu_score": 44.578074088868156}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\tint todo = p_frames;\n\tint todo_frames = todo;\n\tint mixed = 0;\n\n\twhile (todo) {\n\t\tint todo_this_mix = MIN(todo, buffer_size);\n\n\t\tAudioDriverSw::Lock();\n\n\t\tif (active && !using_threads) {\n\t\t\tint todo_this_mix2 = MIN(todo_this_mix, buffer_size - mix_count);\n\t\t\t_mix_internal(todo_this_mix2, mix_buffer);\n\t\t\tmix_count += todo_this_mix2;\n\t\t\tif (mix_count >= buffer_size) {\n\t\t\t\t_write_output();\n\t\t\t\tmix_count = 0;\n\t\t\t}\n\t\t\tmixed += todo_this_mix2;\n\t\t\ttodo -= todo_this_mix2;\n\t\t} else {\n\t\t\t_write_output();\n\t\t\tmixed += todo_this_mix;\n\t\t\ttodo -= todo_this_mix;\n\t\t}\n\n\t\tAudioDriverSw::Unlock();\n\t}\n\n\tif (mixed < todo_frames) {\n\t\tfor (int i = 0; i < mixed; i++) {\n\t\t\tp_buffer[i] = 0;\n\t\t}\n\t}\n}", "CodeBleu_score": 47.27279109000567}]}
{"instance_id": "56df08c77b69", "generation_result": [{"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\t___godot_icall_void_Vector2_Vector2(___godot_icall_void_Vector2_Vector2, this, p_position, r_gravity);\n}", "CodeBleu_score": 9.732704311624618}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\t___godot_icall_void_Vector2_Vector2(___godot_icall_void_Vector2_Vector2, p_position, r_gravity);\n}", "CodeBleu_score": 9.699254659263822}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\t___godot_icall_void_Vector2_Vector2(___godot_icall_void_Vector2_Vector2, (const Object *) this, p_position, r_gravity);\n}", "CodeBleu_score": 9.875334181253965}]}
{"instance_id": "f8c60f8d0caa", "generation_result": [{"code": "void GodotBody2D::wakeup_neighbours(){\n\t\t___godot_icall_void(___mb.mb_wakeup_neighbours, (const Object *) this);\n}", "CodeBleu_score": 5.383038477587531}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\t___godot_icall_void(___mb.mb_wakeup_neighbours, (const Object *) this);\n}", "CodeBleu_score": 5.383038477587531}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\t___godot_icall_void(___mb.mb_wakeup_neighbours, (const Object *) this);\n}", "CodeBleu_score": 5.383038477587531}]}
{"instance_id": "0c6f6c00da9a", "generation_result": [{"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (space.is_valid()) {\n\t\tif (!space->monitor_query_list.has(this)) {\n\t\t\tspace->monitor_query_list.push_back(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 32.69262160131861}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (space == NULL) {\n\t\treturn;\n\t}\n\n\tif (space->monitor_query_list.find(this) == space->monitor_query_list.end()) {\n\t\tspace->monitor_query_list.push_back(this);\n\t}\n}", "CodeBleu_score": 33.042074315394665}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (space != NULL) {\n\t\tif (space->monitor_query_list.find(this) == -1) {\n\t\t\tspace->monitor_query_list.push_back(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 28.55343477795087}]}
{"instance_id": "efc39df0e3a3", "generation_result": [{"code": "void GodotBody3D::_update_transform_dependent(){\n\t\tgodot::Godot::print(\"GodotBody3D::_update_transform_dependent\");\n}", "CodeBleu_score": 2.536090462199372}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t\tgodot::api->godot_method_bind_ptrcall(godot::_RegisterState::singleton, &godot::gdnative_core_1_1_api->godot_gdnative_core_1_1_godot_method_bind_get_method(\"_GodotBody3D\", \"_update_transform_dependent\"), &_owner, nullptr, 0, nullptr);\n}", "CodeBleu_score": 8.987528914246223}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t\tgodot::api->godot_method_bind_ptrcall(godot::_RegisterState::singleton, this, \"set_center_of_mass\", &___mb.mb_set_center_of_mass, (const void **)__args, nullptr);\n}", "CodeBleu_score": 6.892576739456488}]}
{"instance_id": "aebafb4094a1", "generation_result": [{"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\n\tif (AudioServer::get_singleton()) {\n\t\tAudioServer::get_singleton()->_mix_internal(p_frames, p_buffer);\n\t}\n\n\tif (p_update_mix_time) {\n\t\tAudioServer::get_singleton()->_update_mix_time(p_frames);\n\t}\n}", "CodeBleu_score": 66.16953507794557}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\n\tif (AudioServer::get_singleton()) {\n\n\t\tAudioServer::get_singleton()->_process_audio(p_frames, p_buffer);\n\t}\n\n\tif (p_update_mix_time) {\n\n\t\tAudioDriverSW::add_mix_time(p_frames);\n\t}\n}", "CodeBleu_score": 68.15353957880642}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tif (p_update_mix_time) {\n\t\tAudioServer::get_singleton()->update_time();\n\t}\n\n\tAudioServer *audio_server = AudioServer::get_singleton();\n\n\tif (audio_server) {\n\t\taudio_server->process_capture(p_frames, p_buffer);\n\t\taudio_server->process_output(p_frames, p_buffer);\n\t}\n}", "CodeBleu_score": 59.3363078112473}]}
{"instance_id": "160bb23e8010", "generation_result": [{"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\tERR_FAIL_COND(!p_feed.is_valid());\n\n\tfor (int i = 0; i < feeds.size(); i++) {\n\t\tif (feeds[i] == p_feed) {\n\t\t\tfeeds.remove(i);\n\t\t\tp_feed->disconnect(\"updated\", this, \"update_feed\");\n\t\t\tp_feed->disconnect(\"settings_changed\", this, \"update_feed\");\n\t\t\tp_feed->disconnect(\"name_changed\", this, \"update_feed\");\n\t\t\tp_feed->disconnect(\"connection_changed\", this, \"update_feed\");\n\t\t\tp_feed->disconnect(\"connection_failed\", this, \"update_feed\");\n\t\t\tp_feed->disconnect(\"connection_succeeded\", this, \"update_feed\");\n\t\t\tp_feed->disconnect(\"connection_closed\", this, \"update_feed\");\n\t\t\tp_feed->disconnect(\"connection_error\", this, \"update_feed\");\n\t\t\tp_feed->disconnect(\"connection_established\", this, \"update_feed\");\n\t\t\tp_feed->disconnect(\"stream_created\", this, \"update_feed\");\n\t\t\tp_feed->disconnect(\"stream_destroyed\", this, \"update_feed\");\n\t\t\tp_feed->disconnect(\"stream_changed\", this, \"update_feed\");\n\t\t\tp_feed->disconnect(\"stream_error\", this, \"update_feed\");\n\t\t\tp_feed->disconnect(\"stream_info_changed\", this, \"update_feed\");\n\t\t\tp_feed->disconnect(\"stream_data_received\", this, \"update_feed\");\n\t\t\tp_feed->disconnect(\"stream_data_requested\", this, \"update_feed\");\n\t\t\tp_feed->disconnect(\"stream_data_sent\", this, \"update_feed\");\n\t\t\tp_feed->disconnect(\"stream_data_error\", this, \"update_feed\");\n\t\t\tp_feed->disconnect(\"stream_data_ended\", this, \"update_feed\");\n\t\t\tp_feed->disconnect(\"", "CodeBleu_score": 42.96224369781247}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\tERR_FAIL_COND(p_feed.is_null());\n\tERR_FAIL_COND(!feeds.has(p_feed));\n\n\tprint_line(\"Removing feed: \" + itos(p_feed->get_id()) + \" (\" + p_feed->get_name() + \")\");\n\n\tfeeds.erase(p_feed);\n\n\temit_signal(\"feed_removed\", p_feed->get_id());\n}", "CodeBleu_score": 34.004146170145546}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\tERR_FAIL_COND(p_feed.is_null());\n\n\tfor (int i = 0; i < feeds.size(); i++) {\n\t\tif (feeds[i] == p_feed) {\n\t\t\tERR_PRINT(\"Removing feed: \" + p_feed->get_name() + \" (\" + itos(p_feed->get_id()) + \")\");\n\t\t\tfeeds.remove(i);\n\t\t\temit_signal(\"feed_removed\", p_feed->get_id());\n\t\t\treturn;\n\t\t}\n\t}\n\n\tERR_PRINT(\"Could not remove feed: \" + p_feed->get_name() + \" (\" + itos(p_feed->get_id()) + \")\");\n}", "CodeBleu_score": 64.28268907992343}]}
{"instance_id": "bef3cf110c45", "generation_result": [{"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t    EaseRateAction* ret = new EaseRateAction();\n    if (ret && ret->initWithAction(action, rate)) {\n        ret->autorelease();\n        return ret;\n    }\n    CC_SAFE_DELETE(ret);\n    return nullptr;\n}", "CodeBleu_score": 52.11305525899165}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t    EaseRateAction* ret = new EaseRateAction();\n    if (ret->initWithAction(action, rate)) {\n        ret->autorelease();\n        return ret;\n    }\n    delete ret;\n    return nullptr;\n}", "CodeBleu_score": 44.48144112742518}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t\tEaseRateAction* ret = new EaseRateAction();\n\tif (ret && ret->initWithAction(action, rate)) {\n\t\tret->autorelease();\n\t\treturn ret;\n\t}\n\tCC_SAFE_DELETE(ret);\n\treturn nullptr;\n}", "CodeBleu_score": 48.70458256955082}]}
{"instance_id": "97fc6f86ad54", "generation_result": [{"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t    if (node->getName() == childName) {\n        return node;\n    }\n    for (auto& child : node->getChildren()) {\n        Node* foundNode = findChildByNameRecursively(child, childName);\n        if (foundNode) {\n            return foundNode;\n        }\n    }\n    return nullptr;\n}", "CodeBleu_score": 56.306856868541125}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t    if (node->getName() == childName) {\n        return node;\n    }\n    for (auto child : node->getChildren()) {\n        Node* foundNode = findChildByNameRecursively(child, childName);\n        if (foundNode) {\n            return foundNode;\n        }\n    }\n    return nullptr;\n}", "CodeBleu_score": 56.11314726419984}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t    if (node->getName() == childName) {\n        return node;\n    }\n\n    for (auto child : node->getChildren()) {\n        Node* foundNode = findChildByNameRecursively(child, childName);\n        if (foundNode) {\n            return foundNode;\n        }\n    }\n\n    return nullptr;\n}", "CodeBleu_score": 56.11314726419984}]}
{"instance_id": "5fcbe1fedcd2", "generation_result": [{"code": "void Animate3D::removeFromMap(){\n\t    auto target = this->getTarget();\n    if (target) {\n        auto& fadeInMap = target->getFadeInActions();\n        auto& fadeOutMap = target->getFadeOutActions();\n        auto& runningMap = target->getRunningActions();\n        auto iter = fadeInMap.find(this);\n        if (iter != fadeInMap.end()) {\n            fadeInMap.erase(iter);\n            return;\n        }\n        iter = fadeOutMap.find(this);\n        if (iter != fadeOutMap.end()) {\n            fadeOutMap.erase(iter);\n            return;\n        }\n        iter = runningMap.find(this);\n        if (iter != runningMap.end()) {\n            runningMap.erase(iter);\n            return;\n        }\n    }\n}", "CodeBleu_score": 45.72134454885993}, {"code": "void Animate3D::removeFromMap(){\n\t\tif (m_pTarget) {\n\t\tauto& fadeInMap = m_pTarget->getFadeInActions();\n\t\tauto& fadeOutMap = m_pTarget->getFadeOutActions();\n\t\tauto& runningMap = m_pTarget->getRunningActions();\n\n\t\tauto itr = fadeInMap.find(m_sName);\n\t\tif (itr != fadeInMap.end()) {\n\t\t\tfadeInMap.erase(itr);\n\t\t}\n\n\t\titr = fadeOutMap.find(m_sName);\n\t\tif (itr != fadeOutMap.end()) {\n\t\t\tfadeOutMap.erase(itr);\n\t\t}\n\n\t\titr = runningMap.find(m_sName);\n\t\tif (itr != runningMap.end()) {\n\t\t\trunningMap.erase(itr);\n\t\t}\n\t}\n}", "CodeBleu_score": 44.51934403422428}, {"code": "void Animate3D::removeFromMap(){\n\t    if (_target) {\n        auto& runningAnimations = _target->getRunningAnimations();\n        auto iter = runningAnimations.find(_animationName);\n        if (iter != runningAnimations.end()) {\n            auto& actions = iter->second;\n            for (auto& action : actions) {\n                if (action == this) {\n                    actions.erase(action);\n                    break;\n                }\n            }\n        }\n\n        auto& fadeInAnimations = _target->getFadeInAnimations();\n        auto iter2 = fadeInAnimations.find(_animationName);\n        if (iter2 != fadeInAnimations.end()) {\n            auto& actions = iter2->second;\n            for (auto& action : actions) {\n                if (action == this) {\n                    actions.erase(action);\n                    break;\n                }\n            }\n        }\n\n        auto& fadeOutAnimations = _target->getFadeOutAnimations();\n        auto iter3 = fadeOutAnimations.find(_animationName);\n        if (iter3 != fadeOutAnimations.end()) {\n            auto& actions = iter3->second;\n            for (auto& action : actions) {\n                if (action == this) {\n                    actions.erase(action);\n                    break;\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 43.56194165274976}]}
{"instance_id": "db8d394f7bc4", "generation_result": [{"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t    auto cache = Animation3DCache::getInstance();\n    std::string key = fileName + \"_\" + animationName;\n    auto animation = cache->getAnimation(key);\n    if (animation) {\n        return animation;\n    }\n    animation = new (std::nothrow) Animation3D();\n    if (animation && animation->initWithFile(fileName, animationName)) {\n        cache->addAnimation(animation, key);\n        return animation;\n    }\n    CC_SAFE_DELETE(animation);\n    return nullptr;\n}", "CodeBleu_score": 58.21385091515157}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t    Animation3D* animation = new Animation3D();\n    if (animation->initWithFile(fileName, animationName)) {\n        animation->autorelease();\n        return animation;\n    }\n    CC_SAFE_DELETE(animation);\n    return nullptr;\n}", "CodeBleu_score": 29.66428411379509}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t    std::string key = fileName + animationName;\n    Animation3D* animation = static_cast<Animation3D*>(Cache::getInstance()->getObject(key));\n    if (animation == nullptr) {\n        animation = new Animation3D();\n        if (animation->initWithFile(fileName, animationName)) {\n            Cache::getInstance()->addObject(animation, key);\n        } else {\n            delete animation;\n            animation = nullptr;\n        }\n    }\n    return animation;\n}", "CodeBleu_score": 52.66911431887122}]}
{"instance_id": "cdf28d98d3ff", "generation_result": [{"code": "void Animation3DCache::removeUnusedAnimation(){\n\t    auto it = _animations.begin();\n    while (it != _animations.end()) {\n        if (it->second->getReferenceCount() == 1) {\n            it->second->release();\n            it = _animations.erase(it);\n        } else {\n            it++;\n        }\n    }\n}", "CodeBleu_score": 67.81044973994497}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t    auto it = _animationCache.begin();\n    while (it != _animationCache.end()) {\n        if (it->second->getReferenceCount() == 1) {\n            it->second->release();\n            it = _animationCache.erase(it);\n        } else {\n            it++;\n        }\n    }\n}", "CodeBleu_score": 66.99675940349957}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t\tfor (auto it = _animationCache.begin(); it != _animationCache.end();) {\n\t\tif (it->second->getReferenceCount() == 1) {\n\t\t\tit->second->release();\n\t\t\tit = _animationCache.erase(it);\n\t\t} else {\n\t\t\t++it;\n\t\t}\n\t}\n}", "CodeBleu_score": 60.824976668756406}]}
{"instance_id": "de7926871eb8", "generation_result": [{"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t    auto ret = new (std::nothrow) BillBoard();\n    if (ret && ret->initWithTexture(texture, mode)) {\n        ret->autorelease();\n        return ret;\n    }\n    CC_SAFE_DELETE(ret);\n    return nullptr;\n}", "CodeBleu_score": 60.1218826041727}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t    auto billboard = new (std::nothrow) BillBoard();\n    if (billboard && billboard->initWithTexture(texture, mode)) {\n        billboard->autorelease();\n        return billboard;\n    }\n    CC_SAFE_DELETE(billboard);\n    return nullptr;\n}", "CodeBleu_score": 74.60854150119386}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t    auto ret = new (std::nothrow) BillBoard();\n    if (ret && ret->initWithTexture(texture, mode)) {\n        ret->autorelease();\n        return ret;\n    }\n    CC_SAFE_DELETE(ret);\n    return nullptr;\n}", "CodeBleu_score": 60.1218826041727}]}
{"instance_id": "eef1c2206d68", "generation_result": [{"code": "bool Bundle3D::load(const std::string& path){\n\t    if (path.empty() || path == _path) {\n        return true;\n    }\n\n    _path = path;\n\n    auto ext = FileUtils::getInstance()->getFileExtension(_path);\n    if (ext == \"c3t\") {\n        return loadJson(_path);\n    } else if (ext == \"c3b\") {\n        return loadBinary(_path);\n    }\n\n    CCLOG(\"Invalid file extension for 3D bundle file: %s\", _path.c_str());\n    _path.clear();\n    return false;\n}", "CodeBleu_score": 41.68666978490943}, {"code": "bool Bundle3D::load(const std::string& path){\n\t    if (path.empty() || path == _path) {\n        return false;\n    }\n\n    if (FileUtils::getInstance()->isFileExist(path)) {\n        _path = path;\n\n        std::string ext = FileUtils::getInstance()->getFileExtension(path);\n        if (ext == \".c3t\") {\n            return loadJSON(path);\n        }\n        else if (ext == \".c3b\") {\n            return loadBinary(path);\n        }\n        else {\n            CCLOG(\"cocos2d: WARNING: unknown file extension of 3d bundle file: %s\", path.c_str());\n        }\n    }\n    else {\n        CCLOG(\"cocos2d: WARNING: 3d bundle file not found: %s\", path.c_str());\n    }\n\n    return false;\n}", "CodeBleu_score": 59.449170502649054}, {"code": "bool Bundle3D::load(const std::string& path){\n\t    if (path.empty() || _path == path) {\n        return true;\n    }\n    _path = path;\n    _loaded = false;\n    _loaded = loadBinary();\n    if (!_loaded) {\n        _loaded = loadJSON();\n    }\n    return _loaded;\n}", "CodeBleu_score": 24.04582883841185}]}
{"instance_id": "37b6acea681e", "generation_result": [{"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t    //skindata->reset();\n    return true;\n}", "CodeBleu_score": 9.19600814985919}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t    if (!skindata) {\n        return false;\n    }\n    skindata->reset();\n\n    return true;\n}", "CodeBleu_score": 40.4498269031903}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t    skindata->reset();\n    return true;\n}", "CodeBleu_score": 26.092961182308382}]}
{"instance_id": "97449825e4ef", "generation_result": [{"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\tAudioDecoder* decoder = (AudioDecoder*)datasource;\n\n\tsize_t bytesToRead = size * nmemb;\n\n\tif (bytesToRead == 0) {\n\t\treturn 0;\n\t}\n\n\tif (bytesToRead > decoder->fileSize - decoder->filePosition) {\n\t\tbytesToRead = decoder->fileSize - decoder->filePosition;\n\t}\n\n\tif (bytesToRead == 0) {\n\t\treturn 0;\n\t}\n\n\tmemcpy(ptr, decoder->fileBuffer + decoder->filePosition, bytesToRead);\n\n\tdecoder->filePosition += bytesToRead;\n\n\treturn bytesToRead;\n}", "CodeBleu_score": 46.85846862824349}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t    AudioDecoder* decoder = static_cast<AudioDecoder*>(datasource);\n    if (decoder == nullptr) {\n        return 0;\n    }\n    size_t bytesToRead = size * nmemb;\n    if (bytesToRead == 0) {\n        return 0;\n    }\n    if (decoder->m_fileSize - decoder->m_filePosition < bytesToRead) {\n        bytesToRead = decoder->m_fileSize - decoder->m_filePosition;\n    }\n    if (bytesToRead == 0) {\n        return 0;\n    }\n    memcpy(ptr, decoder->m_fileData + decoder->m_filePosition, bytesToRead);\n    decoder->m_filePosition += bytesToRead;\n    return bytesToRead;\n}", "CodeBleu_score": 45.883966986360534}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\n    AudioDecoder* decoder = (AudioDecoder*)datasource;\n\n    size_t bytesToRead = size * nmemb;\n\n    if (bytesToRead > 0) {\n\n        if (bytesToRead > decoder->fileRemaining) {\n            bytesToRead = decoder->fileRemaining;\n        }\n\n        if (bytesToRead > 0) {\n            memcpy(ptr, decoder->fileBuffer + decoder->filePosition, bytesToRead);\n            decoder->filePosition += bytesToRead;\n            decoder->fileRemaining -= bytesToRead;\n        }\n    }\n\n    return bytesToRead;\n}", "CodeBleu_score": 50.46703759574053}]}
{"instance_id": "0f4db164ba5d", "generation_result": [{"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t    _pcmBuffer = std::make_shared<std::vector<short>>(4096);\n}", "CodeBleu_score": 15.700170267121683}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t    _pcmBuffer = std::make_shared<std::vector<short>>(4096);\n}", "CodeBleu_score": 15.700170267121683}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t    _pcmBuffer = std::make_shared<std::vector<int16_t>>();\n    _pcmBuffer->reserve(4096);\n}", "CodeBleu_score": 46.16837580792524}]}
{"instance_id": "0f88663615c6", "generation_result": [{"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t    static std::mutex mutex;\n    std::lock_guard<std::mutex> lock(mutex);\n    static std::unordered_map<int, cocos2d::network::DownloaderAndroid*> map;\n    auto it = map.find(id);\n    if (it != map.end()) {\n        return it->second;\n    }\n    return nullptr;\n}", "CodeBleu_score": 57.69910644510768}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t    std::lock_guard<std::mutex> lock(_mutex);\n    auto it = _downloaderMap.find(id);\n    if (it != _downloaderMap.end()) {\n        return it->second;\n    }\n    return nullptr;\n}", "CodeBleu_score": 64.28991139474508}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t    static std::mutex s_mutex;\n    std::lock_guard<std::mutex> lock(s_mutex);\n\n    static std::unordered_map<int, cocos2d::network::DownloaderAndroid*> s_downloaderMap;\n    auto it = s_downloaderMap.find(id);\n    if (it != s_downloaderMap.end()) {\n        return it->second;\n    }\n    return nullptr;\n}", "CodeBleu_score": 60.920590228469074}]}
{"instance_id": "a5aafaaa944c", "generation_result": [{"code": "function M.playMusic(filename, isLoop)\n\t\tif isLoop == nil then\n\t\tisLoop = true\n\tend\n\tif isLoop then\n\t\taudio.playMusic(filename, true)\n\telse\n\t\taudio.playMusic(filename, false)\n\tend", "CodeBleu_score": 38.8014424182223}, {"code": "function M.playMusic(filename, isLoop)\n\t    if isLoop == nil then\n        isLoop = true\n    end\n    local music = CCDirector:sharedDirector():getSimpleAudioEngine():playMusic(filename, isLoop)\n    return music", "CodeBleu_score": 46.27421494564612}, {"code": "function M.playMusic(filename, isLoop)\n\t\tlocal loop = isLoop or false\n\tif loop == true then\n\t\tSimpleAudioEngine:getInstance():playMusic(filename, true)\n\telse\n\t\tSimpleAudioEngine:getInstance():playMusic(filename, false)\n\tend", "CodeBleu_score": 40.78857787736595}]}
{"instance_id": "16f2ad4bb4e8", "generation_result": [{"code": "function ccs.TriggerObj:detect()\n\tend\n", "CodeBleu_score": 4.586004115149374}, {"code": "function ccs.TriggerObj:detect()\n\tend\n", "CodeBleu_score": 4.586004115149374}, {"code": "function ccs.TriggerObj:detect()\n\tend\n", "CodeBleu_score": 4.586004115149374}]}
{"instance_id": "e73b10418cb6", "generation_result": [{"code": "function ccs.TriggerObj:removeAll()\n\tend \n", "CodeBleu_score": 4.959221278886332}, {"code": "function ccs.TriggerObj:removeAll()\n\tend\n", "CodeBleu_score": 4.959221278886332}, {"code": "function ccs.TriggerObj:removeAll()\n\tend\n", "CodeBleu_score": 4.959221278886332}]}
{"instance_id": "d5a1333d794d", "generation_result": [{"code": "function BasicCollider:hurtEffect(target)\n\t\t-- Create the hurt effect\n\tlocal hurtEffect = display.newImageRect(self.hurtAnimation, self.hurtAnimation:getWidth(), self.hurtAnimation:getHeight())\n\thurtEffect.x = target.x\n\thurtEffect.y = target.y\n\thurtEffect:setFillColor(1, 0, 0)\n\thurtEffect.maskScaleX = target.maskScaleX\n\thurtEffect.maskScaleY = target.maskScaleY\n\thurtEffect.maskX = target.maskX\n\thurtEffect.maskY = target.maskY\n\thurtEffect.maskRotation = target.maskRotation\n\thurtEffect.maskXScale = target.maskXScale\n\thurtEffect.maskYScale = target.maskYScale\n\thurtEffect.maskAlpha = target.maskAlpha\n\thurtEffect.maskVisible = target.maskVisible\n\thurtEffect.mask = target.mask\n\thurtEffect.camera = target.camera\n\thurtEffect.rotation = target.rotation\n\thurtEffect.xScale = target.xScale\n\thurtEffect.yScale = target.yScale\n\thurtEffect.alpha = target.alpha\n\thurtEffect.visible = target.visible\n\thurtEffect.blendMode = target.blendMode\n\thurtEffect.xReferencePoint = target.xReferencePoint\n\thurtEffect.yReferencePoint = target.yReferencePoint\n\thurtEffect.xScaleReferencePoint = target.xScaleReferencePoint\n\thurtEffect.yScaleReferencePoint = target.yScaleReferencePoint\n\thurtEffect.isVisible = target.isVisible\n\thurtEffect.isHitTestable = target.isHitTestable\n\thurtEffect.isFocus = target.isFocus\n\thurtEffect.isEditable = target.isEditable\n\thurtEffect.isFont = target.isFont\n\thurtEffect.isImage = target.isImage\n\thurtEffect.isMask = target.isMask\n\thurtEffect.isTile = target.isTile\n\thurtEffect.isScrollable = target.isScrollable\n\thurtEffect.isScrollBar = target.", "CodeBleu_score": 36.52097941742281}, {"code": "function BasicCollider:hurtEffect(target)\n\t\n    local hurtAnimation = self.hurtAnimation\n    local hurtEffect = hurtAnimation:Clone()\n\n    hurtEffect.Parent = target\n    hurtEffect.CFrame = target.CFrame\n\n    hurtEffect.Scale = target.Size.x * 1.5\n\n    hurtEffect.BillboardGui.Adornee = hurtEffect\n\n    hurtEffect.BillboardGui.Enabled = true\n\n    hurtEffect.BillboardGui.Size = hurtEffect.BillboardGui.Size * hurtEffect.Scale\n\n    hurtEffect.BillboardGui.SizeOffset = hurtEffect.BillboardGui.SizeOffset * hurtEffect.Scale\n\n    hurtEffect.BillboardGui.StudsOffset = hurtEffect.BillboardGui.StudsOffset * hurtEffect.Scale\n\n    hurtEffect.BillboardGui.ExtentsOffsetWorldSpace = hurtEffect.BillboardGui.ExtentsOffsetWorldSpace * hurtEffect.Scale\n\n    hurtEffect.BillboardGui.ExtentsOffsetWorldSpace = hurtEffect.BillboardGui.ExtentsOffsetWorldSpace * hurtEffect.Scale\n\n    hurtEffect.BillboardGui.ExtentsOffsetWorldSpace = hurtEffect.BillboardGui.ExtentsOffsetWorldSpace * hurtEffect.Scale\n\n    hurtEffect.BillboardGui.ExtentsOffsetWorldSpace = hurtEffect.BillboardGui.ExtentsOffsetWorldSpace * hurtEffect.Scale\n\n    hurtEffect.BillboardGui.ExtentsOffsetWorldSpace = hurtEffect.BillboardGui.ExtentsOffsetWorldSpace * hurtEffect.Scale\n\n    hurtEffect.BillboardGui.ExtentsOffsetWorldSpace = hurtEffect.BillboardGui.ExtentsOffsetWorldSpace * hurtEffect.Scale\n\n    hurtEffect.BillboardGui.ExtentsOffsetWorldSpace = hurtEffect.BillboardGui.ExtentsOffsetWorldSpace * hurtEffect.Scale\n\n    hurtEffect.BillboardGui.ExtentsOffsetWorldSpace = hurtEffect.BillboardGui.ExtentsOffsetWorldSpace * hurtEffect.Scale\n\n    hurtEffect.BillboardGui.ExtentsOffsetWorldSpace = hurtEffect.BillboardGui.ExtentsOffsetWorldSpace * hurtEffect.Scale\n\n    hurtEffect.BillboardGui.ExtentsOffset", "CodeBleu_score": 34.487213194638436}, {"code": "function BasicCollider:hurtEffect(target)\n\t\tlocal hurtAnimation = self.manager:getCachedAnimation(\"hurtAnimation\")\n\tlocal hurtBillboard = self.manager:getCachedBillboard(\"hurtBillboard\")\n\tlocal hurtEffect = self.manager:getCachedEffect(\"hurtEffect\")\n\thurtEffect:setPosition(target:getPosition())\n\thurtEffect:setScale(target:getScale())\n\thurtEffect:setBillboard(hurtBillboard)\n\thurtEffect:setAnimation(hurtAnimation)\n\thurtEffect:setRemoveOnStop(true)\n\thurtEffect:start()\n\ttarget:addChild(hurtEffect)\n\thurtEffect:setCameraMask(Global.Camera.mask)", "CodeBleu_score": 47.74851345413814}]}
{"instance_id": "f478d7e70ea6", "generation_result": [{"code": "function MageNormalAttack:onTimeOut()\n\t\tself:stopParticleSystems()\n\tself:createParticleSystem()\n\tself:updateSpriteTexture()\n\tself:runFadeOutAction()\n\tself:adjustSpriteScale()", "CodeBleu_score": 8.905098639079576}, {"code": "function MageNormalAttack:onTimeOut()\n\t    -- Stop the particle systems\n    self.particleSystem1:stopSystem()\n    self.particleSystem2:stopSystem()\n    -- Create a sequence\n    local sequence = cc.Sequence:create(cc.DelayTime:create(0.25), cc.CallFunc:create(function()\n        -- Remove the object\n        self:removeFromParent()\n        self = nil\n    end))\n    -- Run the sequence\n    self:runAction(sequence)\n    -- Create a particle system\n    self.particleSystem3 = cc.ParticleSystemQuad:create(\"Particle/MageNormalAttack.plist\")\n    -- Add the particle system as a child\n    self:addChild(self.particleSystem3)\n    -- Set the particle system's position\n    self.particleSystem3:setPosition(self.sprite:getPosition())\n    -- Set the particle system's properties\n    self.particleSystem3:setStartColor(cc.c4b(255, 255, 255, 255))\n    self.particleSystem3:setEndColor(cc.c4b(255, 255, 255, 0))\n    self.particleSystem3:setStartSize(10)\n    self.particleSystem3:setEndSize(10)\n    self.particleSystem3:setLife(0.75)\n    self.particleSystem3:setSpeed(100)\n    self.particleSystem3:setAngle(90)\n    self.particleSystem3:setAngleVar(0)\n    self.particleSystem3:setEmissionRate(100)\n    self.particleSystem3:setTotalParticles(100)\n    self.particleSystem3:setTexture(cc.Director:getInstance():getTextureCache():addImage(\"Images/MageNormalAttack.png\"))\n    self.particleSystem3:setBlendFunc(cc.BlendFunc:create(cc.BLEND_SRC, cc.BLEND_DST))\n    -- Update the sprite texture\n    self.sprite:setTexture(\"Images/MageNormalAtt", "CodeBleu_score": 50.04409339885998}, {"code": "function MageNormalAttack:onTimeOut()\n\t\tself.particleSystem:stop()\n\tself.particleSystem2:stop()\n\n\tlocal sequence = cc.Sequence:create(cc.DelayTime:create(0.5), cc.CallFunc:create(function()\n\t\tself:removeFromParent()\n\tend))\n\n\tself:runAction(sequence)\n\n\tlocal particleSystem = cc.ParticleSystemQuad:create(\"particle/MageNormalAttack.plist\")\n\tparticleSystem:setPosition(self:getPosition())\n\tparticleSystem:setPositionType(cc.PARTICLE_TYPE_FREE)\n\tparticleSystem:setStartColor(cc.c4b(255, 255, 255, 255))\n\tparticleSystem:setEndColor(cc.c4b(255, 255, 255, 0))\n\tparticleSystem:setStartSize(30)\n\tparticleSystem:setEndSize(100)\n\tparticleSystem:setLife(0.5)\n\tparticleSystem:setLifeVar(0.5)\n\tparticleSystem:setEmissionRate(100)\n\tparticleSystem:setEndSpin(10)\n\tparticleSystem:setEndSpinVar(10)\n\tparticleSystem:setRotatePerSecond(10)\n\tparticleSystem:setRotatePerSecondVar(10)\n\tparticleSystem:setTangentialAccel(10)\n\tparticleSystem:setTangentialAccelVar(10)\n\tparticleSystem:setRadialAccel(10)\n\tparticleSystem:setRadialAccelVar(10)\n\tparticleSystem:setStartRadius(10)\n\tparticleSystem:setStartRadiusVar(10)\n\tparticleSystem:setEndRadius(100)\n\tparticleSystem:setEndRadiusVar(100)\n\tparticleSystem:setPositionType(cc.PARTICLE_TYPE_FREE)\n\tparticleSystem:setEmitterMode(cc.PARTICLE_MODE_GRAVITY)\n\tparticleSystem:setGravity", "CodeBleu_score": 39.983398744265955}]}
{"instance_id": "d735c4ea6358", "generation_result": [{"code": "function BattlefieldUI:heroDead(hero)\n\t\tif hero.name == \"Knight\" then\n\t\tself.knight.image:setFillColor(1, 1, 1, 0.5)\n\t\tself.knight.frame:setFillColor(1, 1, 1, 0.5)\n\t\tself.knight.angerFull:setVisible(false)\n\t\tself.knight.angerClone:setVisible(false)\n\telseif hero.name == \"Mage\" then\n\t\tself.mage.image:setFillColor(1, 1, 1, 0.5)\n\t\tself.mage.frame:setFillColor(1, 1, 1, 0.5)\n\t\tself.mage.angerFull:setVisible(false)\n\t\tself.mage.angerClone:setVisible(false)\n\telseif hero.name == \"Archer\" then\n\t\tself.archer.image:setFillColor(1, 1, 1, 0.5)\n\t\tself.archer.frame:setFillColor(1, 1, 1, 0.5)\n\t\tself.archer.angerFull:setVisible(false)\n\t\tself.archer.angerClone:setVisible(false)\n\tend", "CodeBleu_score": 39.48792773873671}, {"code": "function BattlefieldUI:heroDead(hero)\n\t    local heroName = hero:getName()\n    if heroName == \"Knight\" then\n        self.knightFrame:setColor(cc.c3b(128, 128, 128))\n        self.knightFrame:setVisible(true)\n        self.knight:setVisible(false)\n        self.knightAnger:setVisible(false)\n        self.knightAngerFull:setVisible(false)\n        self.knightAngerClone:setVisible(false)\n    elseif heroName == \"Mage\" then\n        self.mageFrame:setColor(cc.c3b(128, 128, 128))\n        self.mageFrame:setVisible(true)\n        self.mage:setVisible(false)\n        self.mageAnger:setVisible(false)\n        self.mageAngerFull:setVisible(false)\n        self.mageAngerClone:setVisible(false)\n    elseif heroName == \"Archer\" then\n        self.archerFrame:setColor(cc.c3b(128, 128, 128))\n        self.archerFrame:setVisible(true)\n        self.archer:setVisible(false)\n        self.archerAnger:setVisible(false)\n        self.archerAngerFull:setVisible(false)\n        self.archerAngerClone:setVisible(false)\n    end", "CodeBleu_score": 43.11638974162783}, {"code": "function BattlefieldUI:heroDead(hero)\n\t    local heroName = hero:getName()\n    local heroImage = self.heroImages[heroName]\n    local heroFrame = self.heroFrames[heroName]\n    local heroAngerFull = self.heroAngerFulls[heroName]\n    local heroAngerClone = self.heroAngerClones[heroName]\n\n    if heroName == \"Knight\" then\n        heroImage:setColor(cc.c3b(128, 128, 128))\n        heroFrame:setColor(cc.c3b(128, 128, 128))\n        heroAngerFull:setVisible(false)\n        heroAngerClone:setVisible(false)\n    elseif heroName == \"Mage\" then\n        heroImage:setColor(cc.c3b(128, 128, 128))\n        heroFrame:setColor(cc.c3b(128, 128, 128))\n        heroAngerFull:setVisible(false)\n        heroAngerClone:setVisible(false)\n    elseif heroName == \"Archer\" then\n        heroImage:setColor(cc.c3b(128, 128, 128))\n        heroFrame:setColor(cc.c3b(128, 128, 128))\n        heroAngerFull:setVisible(false)\n        heroAngerClone:setVisible(false)\n    end", "CodeBleu_score": 37.69817503101412}]}
{"instance_id": "009f167d3ab2", "generation_result": [{"code": "local function moveCamera(dt)\n\t\n    local camera = Global.Camera\n    local cameraPosition = camera.position\n    local cameraRotation = camera.rotation\n    local cameraFocus = camera.focus\n\n    if cameraFocus then\n        cameraPosition.x = cameraPosition.x + (cameraFocus.x - cameraPosition.x) * dt * 20\n        cameraPosition.y = cameraPosition.y + (cameraFocus.y - cameraPosition.y) * dt * 20\n        cameraPosition.z = cameraPosition.z + (cameraFocus.z - cameraPosition.z) * dt * 20\n    end\n\n    if cameraRotation then\n        cameraRotation.x = cameraRotation.x + (cameraRotation.target.x - cameraRotation.x) * dt * 10\n        cameraRotation.y = cameraRotation.y + (cameraRotation.target.y - cameraRotation.y) * dt * 10\n        cameraRotation.z = cameraRotation.z + (cameraRotation.target.z - cameraRotation.z) * dt * 10\n    end\n\n    camera.position = cameraPosition\n    camera.rotation = cameraRotation", "CodeBleu_score": 33.07180920135831}, {"code": "local function moveCamera(dt)\n\t\n\tlocal camera = Global.camera\n\tlocal cameraPosition = camera.position\n\tlocal cameraTarget = camera.target\n\tlocal cameraLookAt = camera.lookAt\n\tlocal cameraUp = camera.up\n\t\n\tlocal cameraPositionTarget = camera.positionTarget\n\tlocal cameraLookAtTarget = camera.lookAtTarget\n\tlocal cameraUpTarget = camera.upTarget\n\t\n\tlocal cameraPositionTargetTime = camera.positionTargetTime\n\tlocal cameraLookAtTargetTime = camera.lookAtTargetTime\n\tlocal cameraUpTargetTime = camera.upTargetTime\n\t\n\tlocal cameraPositionTargetTimeDelta = camera.positionTargetTimeDelta\n\tlocal cameraLookAtTargetTimeDelta = camera.lookAtTargetTimeDelta\n\tlocal cameraUpTargetTimeDelta = camera.upTargetTimeDelta\n\t\n\tlocal cameraPositionTargetDelta = camera.positionTargetDelta\n\tlocal cameraLookAtTargetDelta = camera.lookAtTargetDelta\n\tlocal cameraUpTargetDelta = camera.upTargetDelta\n\t\n\tlocal cameraPositionTargetDeltaTime = camera.positionTargetDeltaTime\n\tlocal cameraLookAtTargetDeltaTime = camera.lookAtTargetDeltaTime\n\tlocal cameraUpTargetDeltaTime = camera.upTargetDeltaTime\n\t\n\tlocal cameraPositionTargetDeltaTimeDelta = camera.positionTargetDeltaTimeDelta\n\tlocal cameraLookAtTargetDeltaTimeDelta = camera.lookAtTargetDeltaTimeDelta\n\tlocal cameraUpTargetDeltaTimeDelta = camera.upTargetDeltaTimeDelta\n\t\n\tlocal cameraPositionTargetDeltaTimeDeltaTime = camera.positionTargetDeltaTimeDeltaTime\n\tlocal cameraLookAtTargetDeltaTimeDeltaTime = camera.lookAtTargetDeltaTimeDeltaTime\n\tlocal cameraUpTargetDeltaTimeDeltaTime = camera.upTargetDeltaTimeDeltaTime\n\t\n\tlocal cameraPositionTargetDeltaTimeDeltaTimeDelta = camera.positionTargetDeltaTimeDeltaTimeDelta\n\tlocal cameraLookAtTargetDeltaTimeDeltaTimeDelta = camera.lookAtTargetDeltaTimeDeltaTimeDelta\n\tlocal cameraUpTargetDeltaTimeDeltaTimeDelta = camera.upTargetDeltaTimeDeltaTimeDelta\n\t\n\tlocal cameraPositionTargetDeltaTimeDeltaTimeDeltaTime = camera.positionTargetDeltaTimeDeltaTimeDeltaTime\n\tlocal cameraLookAtTargetDeltaTimeDeltaTimeDeltaTime = camera.lookAtTargetDeltaTimeDeltaTimeDeltaTime\n\tlocal cameraUpTargetDeltaTimeDeltaTimeDeltaTime", "CodeBleu_score": 12.13364104729724}, {"code": "local function moveCamera(dt)\n\t\tlocal camera = GlobalVariables.camera\n\tlocal cameraPosition = camera.position\n\tlocal cameraLookAt = camera.lookAt\n\tlocal cameraUp = camera.up\n\tlocal cameraFov = camera.fov\n\t\n\tlocal cameraPositionTarget = camera.positionTarget\n\tlocal cameraLookAtTarget = camera.lookAtTarget\n\tlocal cameraUpTarget = camera.upTarget\n\tlocal cameraFovTarget = camera.fovTarget\n\t\n\tlocal cameraPositionEpsilon = camera.positionEpsilon\n\tlocal cameraLookAtEpsilon = camera.lookAtEpsilon\n\tlocal cameraUpEpsilon = camera.upEpsilon\n\tlocal cameraFovEpsilon = camera.fovEpsilon\n\t\n\tlocal cameraPositionLerpSpeed = camera.positionLerpSpeed\n\tlocal cameraLookAtLerpSpeed = camera.lookAtLerpSpeed\n\tlocal cameraUpLerpSpeed = camera.upLerpSpeed\n\tlocal cameraFovLerpSpeed = camera.fovLerpSpeed\n\t\n\tlocal cameraPositionLerpSpeedMax = camera.positionLerpSpeedMax\n\tlocal cameraLookAtLerpSpeedMax = camera.lookAtLerpSpeedMax\n\tlocal cameraUpLerpSpeedMax = camera.upLerpSpeedMax\n\tlocal cameraFovLerpSpeedMax = camera.fovLerpSpeedMax\n\t\n\tlocal cameraPositionLerpSpeedMin = camera.positionLerpSpeedMin\n\tlocal cameraLookAtLerpSpeedMin = camera.lookAtLerpSpeedMin\n\tlocal cameraUpLerpSpeedMin = camera.upLerpSpeedMin\n\tlocal cameraFovLerpSpeedMin = camera.fovLerpSpeedMin\n\t\n\tlocal cameraPositionLerpSpeedIncrement = camera.positionLerpSpeedIncrement\n\tlocal cameraLookAtLerpSpeedIncrement = camera.lookAtLerpSpeedIncrement\n\tlocal cameraUpLerpSpeedIncrement = camera.upLerpSpeedIncrement\n\tlocal cameraFovLerpSpeedIncrement = camera.fovLerpSpeedIncrement\n\t\n\tlocal cameraPositionLerpSpeedDecrement = camera.positionLerpSpeedDecrement\n\t", "CodeBleu_score": 13.520046827597184}]}
{"instance_id": "f7f5e7fe1dc2", "generation_result": [{"code": "local function updateParticlePos()\n\t\tfor i, v in ipairs(GlobalVariables.HeroManager.heroes) do\n\t\tif v.effectNode then\n\t\t\tv.effectNode.position = v.node:getPosition()\n\t\tend\n\tend", "CodeBleu_score": 22.58208209358434}, {"code": "local function updateParticlePos()\n\t\tfor i=1, HeroManager:getHeroCount() do\n\t\tlocal hero = HeroManager:getHero(i)\n\t\tif hero:getEffectNode() then\n\t\t\thero:getEffectNode():setPosition(hero:getPosition())\n\t\tend\n\tend", "CodeBleu_score": 35.49784782108564}, {"code": "local function updateParticlePos()\n\t    local heroes = GlobalVariables.getHeroes()\n    for i = 1, #heroes do\n        local hero = heroes[i]\n        if hero.effectNode ~= nil then\n            hero.effectNode.position = hero.position\n        end\n    end", "CodeBleu_score": 50.219848575257444}]}
{"instance_id": "77829ef7341e", "generation_result": [{"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t    local hero = self.view:getChildByTag(TAG_HERO)\n    local heroRace = hero:getComponent(\"Role\"):getRace()\n    if heroRace == KNIGHT then\n        self.audio:playEffect(\"audio/knight_rotate.mp3\")\n    elseif heroRace == ARCHER then\n        self.audio:playEffect(\"audio/archer_rotate.mp3\")\n    elseif heroRace == MAGE then\n        self.audio:playEffect(\"audio/mage_rotate.mp3\")\n    end", "CodeBleu_score": 45.555315887121715}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t    local hero = self.view:getChildByTag(self.currentSelected)\n    local race = hero:getComponent(\"Role\"):getRace()\n    if race == \"Knight\" then\n        audio.playMusic(\"audio/Knight_Move.mp3\")\n    elseif race == \"Archer\" then\n        audio.playMusic(\"audio/Archer_Move.mp3\")\n    elseif race == \"Mage\" then\n        audio.playMusic(\"audio/Mage_Move.mp3\")\n    end", "CodeBleu_score": 45.91697901898543}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t    local hero = self.view:getChildByTag(1)\n    local raceType = hero.raceType\n    if raceType == \"Knight\" then\n        AudioEngine.playEffect(\"audio/sword.mp3\")\n    elseif raceType == \"Archer\" then\n        AudioEngine.playEffect(\"audio/bow.mp3\")\n    elseif raceType == \"Mage\" then\n        AudioEngine.playEffect(\"audio/magic.mp3\")\n    end", "CodeBleu_score": 42.69943431652584}]}
{"instance_id": "2b35fdb15a13", "generation_result": [{"code": "function GameMaster:AddHeros()\n\t\tlocal knight = Knight:new(300, 300, 100, 100, \"Knight\", \"Knight\")\n\tknight:setIdle()\n\ttable.insert(self.HeroManager, knight)\n\t\n\tlocal mage = Mage:new(500, 300, 100, 100, \"Mage\", \"Mage\")\n\tmage:setIdle()\n\ttable.insert(self.HeroManager, mage)\n\t\n\tlocal archer = Archer:new(700, 300, 100, 100, \"Archer\", \"Archer\")\n\tarcher:setIdle()\n\ttable.insert(self.HeroManager, archer)", "CodeBleu_score": 47.16763002247089}, {"code": "function GameMaster:AddHeros()\n\t\t--[[\n\tCreates a Knight object, sets it to idle mode, and pushes it to the HeroManager list.\n\t]]\n\tlocal Knight = Knight:new(0, 0)\n\tKnight:setMode(Knight.idle)\n\ttable.insert(HeroManager, Knight)\n\n\t--[[\n\tCreates a Mage object, sets it to idle mode, and pushes it to the HeroManager list.\n\t]]\n\tlocal Mage = Mage:new(0, 0)\n\tMage:setMode(Mage.idle)\n\ttable.insert(HeroManager, Mage)\n\n\t--[[\n\tCreates an Archer object, sets it to idle mode, and pushes it to the HeroManager list.\n\t]]\n\tlocal Archer = Archer:new(0, 0)\n\tArcher:setMode(Archer.idle)\n\ttable.insert(HeroManager, Archer)", "CodeBleu_score": 33.868077987847236}, {"code": "function GameMaster:AddHeros()\n\t    local knight = Knight.new()\n    knight.x = 100\n    knight.y = 100\n    knight:setCurrentLayer(self.currentLayer)\n    knight:setIdle()\n    table.insert(self.heroManager.heroes, knight)\n    self.currentLayer:insert(knight)\n\n    local mage = Mage.new()\n    mage.x = 100\n    mage.y = 200\n    mage:setCurrentLayer(self.currentLayer)\n    mage:setIdle()\n    table.insert(self.heroManager.heroes, mage)\n    self.currentLayer:insert(mage)\n\n    local archer = Archer.new()\n    archer.x = 100\n    archer.y = 300\n    archer:setCurrentLayer(self.currentLayer)\n    archer:setIdle()\n    table.insert(self.heroManager.heroes, archer)\n    self.currentLayer:insert(archer)", "CodeBleu_score": 49.94884480266465}]}
{"instance_id": "cdfbc82ff3cd", "generation_result": [{"code": "function GameMaster:showBoss()\n\t    local boss = Rat:new()\n    boss:setCameraMask(cc.CameraFlag.USER1)\n    boss:setPosition(cc.p(winSize.width * 0.5, winSize.height * 0.5))\n    boss:setFacingDirection(1)\n    boss:setAIEnabled(false)\n    boss:bounceOut()\n    boss:setAIEnabled(true)\n    self.MonsterManager:addMonster(boss)", "CodeBleu_score": 32.68066138185344}, {"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat.new()\n\tboss:setCameraMask(cc.CameraFlag.USER1)\n\tboss:setPosition(cc.p(self.screenSize.width/2, self.screenSize.height/2))\n\tboss:setFacingDirection(1)\n\tboss:setAIEnabled(false)\n\tboss:bounceOut()\n\tboss:setAIEnabled(true)\n\tboss:setName(\"Boss\")\n\tself.currentLayer:addChild(boss)\n\tself.monsterManager:addMonster(boss)", "CodeBleu_score": 36.37317994740267}, {"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat.new()\n\tboss:setCameraMask(cc.CameraFlag.USER2)\n\tboss:setPosition(cc.p(0,0))\n\tboss:setFacingDirection(KNIGHT_FACING_RIGHT)\n\tboss:setAIEnabled(false)\n\tboss:bounceOut(cc.p(0,0), cc.p(0,0), 0.3, 0.3, 0.2, 0.2)\n\tboss:setAIEnabled(true)\n\tboss:setName(\"Boss\")\n\tboss:setTag(BOSS_TAG)\n\tself.currentLayer:addChild(boss)\n\tself.monsterManager:addMonster(boss)", "CodeBleu_score": 38.30864334587617}]}
{"instance_id": "fa7b402853bb", "generation_result": [{"code": "function createAnimation(file, begin, finish, speed)\n\t  local animation = Animation3D.new(file)\n  local animate = Animate3D.new(animation, begin, finish)\n  animate.speed = speed\n  return animate", "CodeBleu_score": 37.60224889335393}, {"code": "function createAnimation(file, begin, finish, speed)\n\t    local animation3D = Animation3D.new(file)\n    local animate3D = Animate3D.new(animation3D, begin, finish)\n    animate3D.speed = speed\n    return animate3D", "CodeBleu_score": 39.77004435605108}, {"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation3D = Animation3D.new(file)\n\tlocal animate3D = Animate3D.new(animation3D, begin, finish)\n\tanimate3D:setSpeed(speed)\n\treturn animate3D", "CodeBleu_score": 40.54053143127478}]}
{"instance_id": "0725f2413b6b", "generation_result": [{"code": "function removeAll(table)\n\t\tfor i = #table, 1, -1 do \n\t\ttable.remove(table, i) \n\tend ", "CodeBleu_score": 26.304689299629104}, {"code": "function removeAll(table)\n\t    for k,v in pairs(table) do\n        table[k] = nil\n    end", "CodeBleu_score": 41.636138343077825}, {"code": "function removeAll(table)\n\t    for i = #table, 1, -1 do \n        table.remove(table, i) \n    end ", "CodeBleu_score": 30.263607429779903}]}
{"instance_id": "526d10bb37bb", "generation_result": [{"code": "function delayExecute(target, func, delay)\n\t\tlocal sequence = cc.Sequence:create(cc.DelayTime:create(delay), cc.CallFunc:create(func))\n\ttarget:runAction(sequence)", "CodeBleu_score": 59.653571531857075}, {"code": "function delayExecute(target, func, delay)\n\t\tlocal sequence = cc.Sequence:create(\n\t\tcc.DelayTime:create(delay),\n\t\tcc.CallFunc:create(func)\n\t)\n\ttarget:runAction(sequence)", "CodeBleu_score": 58.09526291584382}, {"code": "function delayExecute(target, func, delay)\n\t\tlocal sequence = cc.Sequence:create(cc.DelayTime:create(delay), cc.CallFunc:create(func))\n\ttarget:runAction(sequence)", "CodeBleu_score": 59.653571531857075}]}
{"instance_id": "3b277bd3d0d0", "generation_result": [{"code": "function LoadingScene:addLoadingText(layer)\n\t\tlocal font = \"Helvetica-Bold\"\n\tlocal fontSize = 24\n\tlocal x = 160\n\tlocal y = 100\n\tlocal text = \"Loading...\"\n\tlocal label = Label:createWithTTF(text, font, fontSize)\n\tlabel:setPosition(x, y)\n\tlayer:addChild(label)\n\tself._loading = label", "CodeBleu_score": 25.95041026489111}, {"code": "function LoadingScene:addLoadingText(layer)\n\t  local font = cc.Label:createWithTTF(\"Loading...\", \"fonts/Marker Felt.ttf\", 24)\n  font:setPosition(cc.p(240, 240))\n  layer:addChild(font)\n  self._loading = font", "CodeBleu_score": 15.512479481962348}, {"code": "function LoadingScene:addLoadingText(layer)\n\t    -- Create the label\n    local loadingLabel = cc.Label:createWithTTF(\"Loading...\", \"fonts/Marker Felt.ttf\", 24)\n    -- Position the label\n    loadingLabel:setPosition(cc.p(display.contentWidth / 2, display.contentHeight / 2))\n    -- Add the label to the layer\n    layer:addChild(loadingLabel)\n    -- Store the label in the object\n    self._loading = loadingLabel", "CodeBleu_score": 21.22254301987821}]}
{"instance_id": "68250ae97644", "generation_result": [{"code": "function MainMenuScene.create()\n\t    local scene = Scene.create()\n    local layer = MainMenuLayer.create()\n    scene:addChild(layer)\n    return scene", "CodeBleu_score": 64.23751500863219}, {"code": "function MainMenuScene.create()\n\t    local scene = Scene.create()\n    scene:getLayer():setTouchEnabled(true)\n    scene:getLayer():setKeypadEnabled(true)\n    scene:getLayer():setAccelerometerEnabled(true)\n    scene:getLayer():setCameraMask(cc.CameraFlag.USER1)\n\n    --[[\n    The following code creates a layer, adds it to the scene, and configures the layer.\n    ]]\n    local layer = MainMenuScene.Layer.create()\n    scene:addChild(layer)\n    layer:init()\n\n    return scene", "CodeBleu_score": 53.44851105438684}, {"code": "function MainMenuScene.create()\n\t    local scene = Scene.new()\n\n    -- add a layer to the scene\n    local layer = MainMenuScene.new()\n    scene:addChild(layer)\n\n    return scene", "CodeBleu_score": 64.4745679418151}]}
{"instance_id": "81470efbb6ff", "generation_result": [{"code": "local function collision(object)\n\n\t    --Check for collisions with monsters\n    local monsters = MonsterManager.getAliveMonsters()\n    for i, monster in ipairs(monsters) do\n        if Helper.collision(object, monster) then\n            solveCollision(object, monster)\n        end\n    end\n\n    --Check for collisions with heroes\n    local heroes = HeroManager.getAliveHeroes()\n    for i, hero in ipairs(heroes) do\n        if Helper.collision(object, hero) then\n            solveCollision(object, hero)\n        end\n    end", "CodeBleu_score": 40.78411442287268}, {"code": "local function collision(object)\n\n\t    -- Check for collision with all heroes\n    for i = 1, HeroManager:GetCount() do\n        local hero = HeroManager:GetHero(i)\n        if hero:IsAlive() and Helper.collision(object, hero) then\n            solveCollision(object, hero)\n        end\n    end\n\n    -- Check for collision with all monsters\n    for i = 1, MonsterManager:GetCount() do\n        local monster = MonsterManager:GetMonster(i)\n        if monster:IsAlive() and Helper.collision(object, monster) then\n            solveCollision(object, monster)\n        end\n    end", "CodeBleu_score": 45.4434852355402}, {"code": "local function collision(object)\n\n\t  -- Check for collision with heroes\n  for i, hero in ipairs(HeroManager:getAliveHeroes()) do\n    if Helper.collision(object, hero) then\n      solveCollision(object, hero)\n    end\n  end\n  \n  -- Check for collision with monsters\n  for i, monster in ipairs(MonsterManager:getAliveMonsters()) do\n    if Helper.collision(object, monster) then\n      solveCollision(object, monster)\n    end\n  end", "CodeBleu_score": 33.88582272470138}]}
{"instance_id": "f8915bebdc0e", "generation_result": [{"code": "function collisionDetect(dt)\n\t  -- Checks if HeroManager is empty\n  if (#HeroManager == 0) then\n    return\n  end\n\n  -- Checks if MonsterManager is empty\n  if (#MonsterManager == 0) then\n    return\n  end\n\n  -- Iterates through HeroManager in reverse order to check if each sprite is alive\n  for i = #HeroManager, 1, -1 do\n    local hero = HeroManager[i]\n    -- Checks if sprite is alive\n    if (hero.alive == true) then\n      -- Checks if sprite is touching any monster\n      for j = #MonsterManager, 1, -1 do\n        local monster = MonsterManager[j]\n        -- Checks if monster is alive\n        if (monster.alive == true) then\n          -- Checks if sprite is touching monster\n          if (Helper.isColliding(hero, monster)) then\n            -- Checks if monster is a power up\n            if (monster.type == \"powerup\") then\n              -- Checks if power up is a shield\n              if (monster.subtype == \"shield\") then\n                -- Adds shield to hero\n                hero.shield = hero.shield + 1\n              end\n              -- Removes monster from MonsterManager\n              table.remove(MonsterManager, j)\n            end\n            -- Checks if monster is a boss\n            if (monster.type == \"boss\") then\n              -- Checks if monster is a boss\n              if (monster.subtype == \"boss\") then\n                -- Removes monster from MonsterManager\n                table.remove(MonsterManager, j)\n              end\n            end\n            -- Checks if monster is a monster\n            if (monster.type == \"monster\") then\n              -- Checks if monster is a monster\n              if (monster.subtype == \"monster\") then\n                -- Removes monster from MonsterManager\n                table.remove(MonsterManager, j)\n              end\n            end\n            -- Checks if monster is a bullet\n            if (monster.type == \"bullet\")", "CodeBleu_score": 42.99814083765856}, {"code": "function collisionDetect(dt)\n\t    for i = #HeroManager, 1, -1 do\n        local hero = HeroManager[i]\n        if hero.alive then\n            local monsters = MonsterManager\n            for j = #monsters, 1, -1 do\n                local monster = monsters[j]\n                if monster.alive then\n                    if checkCollision(hero, monster) then\n                        hero.alive = false\n                        monster.alive = false\n                        hero.deathTime = 0\n                        monster.deathTime = 0\n                        hero.deathSound:play()\n                        monster.deathSound:play()\n                        HeroManager[i] = nil\n                        monsters[j] = nil\n                        break\n                    end\n                end\n            end\n            if hero.alive then\n                if hero.x < 0 or hero.x > WINDOW_WIDTH or hero.y < 0 or hero.y > WINDOW_HEIGHT then\n                    hero.alive = false\n                    hero.deathTime = 0\n                    hero.deathSound:play()\n                    HeroManager[i] = nil\n                end\n            end\n        end\n    end", "CodeBleu_score": 40.41836407497614}, {"code": "function collisionDetect(dt)\n\t    local i = #HeroManager\n    while i > 0 do\n        local hero = HeroManager[i]\n        if hero.alive then\n            local j = #MonsterManager\n            while j > 0 do\n                local monster = MonsterManager[j]\n                if monster.alive then\n                    if hero.sprite:collidesWith(monster.sprite) then\n                        monster.sprite:removeSelf()\n                        monster.alive = false\n                        monster.sprite = nil\n                        MonsterManager[j] = nil\n                        table.remove(MonsterManager, j)\n                        hero.sprite:removeSelf()\n                        hero.alive = false\n                        hero.sprite = nil\n                        HeroManager[i] = nil\n                        table.remove(HeroManager, i)\n                        return\n                    end\n                end\n                j = j - 1\n            end\n            -- Boundary check\n            if hero.sprite.x > display.contentWidth + 100 or hero.sprite.x < -100 or hero.sprite.y > display.contentHeight + 100 or hero.sprite.y < -100 then\n                hero.sprite:removeSelf()\n                hero.alive = false\n                hero.sprite = nil\n                HeroManager[i] = nil\n                table.remove(HeroManager, i)\n            end\n        end\n        i = i - 1\n    end", "CodeBleu_score": 44.96938925836799}]}
{"instance_id": "fc081bb122f5", "generation_result": [{"code": "function Actor:specialAttack()\n\t    local attack = self.specialAttackProperties\n    local collider = self.world:newCircleCollider(\n        self.position.x,\n        self.position.y,\n        attack.radius\n    )\n    collider:setCollisionClass(\"Attack\")\n    collider:setObject(self)\n    collider:setGroupIndex(self.groupIndex)\n    collider:setLayers(self.layer)\n    collider:setLinearVelocity(self.direction * attack.speed)\n    collider:applyAngularImpulse(attack.angularVelocity)\n    self.world:addCollider(collider)\n\n    self.world:playSound(attack.sound, self.position)", "CodeBleu_score": 40.50211725330182}, {"code": "function Actor:specialAttack()\n\t    local collider = self.world:newCircleCollider(self.x, self.y, self.attackRange)\n    collider:setCollisionClass(\"Attack\")\n    collider:setObject(self)\n    collider:setLinearVelocity(self.facingDirection.x * self.attackSpeed, self.facingDirection.y * self.attackSpeed)\n    collider:applyAngularImpulse(self.attackAngle)\n    collider:applyLinearImpulse(self.facingDirection.x * self.attackSpeed, self.facingDirection.y * self.attackSpeed)\n    collider:applyTorque(self.attackTorque)\n    collider:setGroupIndex(-1)\n    collider:setFriction(0)\n    collider:setLayers(self.attackLayer)\n\n    self.world:playSound(self.attackSound, self.x, self.y)", "CodeBleu_score": 41.71467115551194}, {"code": "function Actor:specialAttack()\n\t\tif self.specialAttackCollider == nil then\n\t\tself.specialAttackCollider = world:newRectangleCollider(self.x, self.y, self.width, self.height)\n\t\tself.specialAttackCollider:setCollisionClass(\"SpecialAttack\")\n\t\tself.specialAttackCollider:setFixedRotation(true)\n\t\tself.specialAttackCollider:setType(\"static\")\n\t\tself.specialAttackCollider:setLinearVelocity(self.direction * self.specialAttackSpeed, 0)\n\t\tself.specialAttackCollider:setFriction(0)\n\t\tself.specialAttackCollider:setRestitution(0)\n\t\tself.specialAttackCollider:setCollisionFilter(self.collisionFilter)\n\t\tself.specialAttackCollider:setGravityScale(0)\n\tend\n\t\n\tself.specialAttackCollider:setPosition(self.x, self.y)\n\tself.specialAttackCollider:setAngle(self.direction * 90)\n\t\n\tif self.specialAttackSound ~= nil then\n\t\tself.specialAttackSound:play()\n\tend\n\t\n\tself.specialAttackCollider:applyLinearImpulse(self.direction * self.specialAttackSpeed, 0)", "CodeBleu_score": 42.932902572498406}]}
{"instance_id": "bfc98809aacb", "generation_result": [{"code": "function Slime:angryFace(trueFalse)\n\t\tif trueFalse == true then\n\t\tif self.angry == false then\n\t\t\tself.angry = true\n\t\t\tself.sprite:setSprite(\"SlimeAngry\")\n\t\tend\n\telse\n\t\tif self.angry == true then\n\t\t\tself.angry = false\n\t\t\tself.sprite:setSprite(\"Slime\")\n\t\tend\n\tend", "CodeBleu_score": 42.03473731921185}, {"code": "function Slime:angryFace(trueFalse)\n\t\tif self.angry ~= trueFalse then\n\t\tself.angry = trueFalse\n\t\tif self.angry then\n\t\t\tself.sprite:setSprite3D(\"Slime/Slime_angry.png\")\n\t\telse\n\t\t\tself.sprite:setSprite3D(\"Slime/Slime_normal.png\")\n\t\tend\n\tend", "CodeBleu_score": 54.68343186459237}, {"code": "function Slime:angryFace(trueFalse)\n\t    if trueFalse == nil then trueFalse = true end\n    if self.angry ~= trueFalse then\n        self.angry = trueFalse\n        if trueFalse then\n            self.sprite:set_texture(self.angryTexture)\n        else\n            self.sprite:set_texture(self.normalTexture)\n        end\n    end", "CodeBleu_score": 61.54288974435917}]}
{"instance_id": "546a0b8fb77b", "generation_result": [{"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t    val font = getFont(Fonts.DEFAULT_FONT_FAMILY, Fonts.DEFAULT_FONT_SIZE)\n    val paint = Paint(Paint.ANTI_ALIAS_FLAG)\n    paint.typeface = font\n    paint.textSize = font.size.toFloat()\n    paint.textAlign = Paint.Align.LEFT\n\n    val text = char.toString()\n\n    val bounds = Rect()\n    paint.getTextBounds(text, 0, text.length, bounds)\n    val width = bounds.width()\n    val height = bounds.height()\n\n    val bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\n    val canvas = Canvas(bitmap)\n    canvas.drawText(text, 0f, -bounds.top.toFloat(), paint)\n\n    val pixmap = Pixmap(width, height, Pixmap.Format.RGBA8888)\n    for (x in 0 until width) {\n        for (y in 0 until height) {\n            val color = bitmap.getPixel(x, y)\n            val r = Color.red(color)\n            val g = Color.green(color)\n            val b = Color.blue(color)\n            val a = Color.alpha(color)\n            pixmap.drawPixel(x, y, r, g, b, a)\n        }\n    }\n    bitmap.recycle()\n    return pixmap\n}", "CodeBleu_score": 58.30230048064213}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t    val font = getFont(Fonts.DEFAULT_FONT)\n    val paint = Paint()\n    paint.typeface = font\n    paint.textSize = 100f\n    paint.textAlign = Paint.Align.LEFT\n    paint.isAntiAlias = true\n    paint.isSubpixelText = true\n    paint.isLinearText = true\n    paint.isFakeBoldText = false\n\n    val metrics = paint.fontMetrics\n    val width = ceil(paint.measureText(char.toString())).toInt()\n    val height = ceil(abs(metrics.ascent) + abs(metrics.descent)).toInt()\n    val bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\n    val canvas = Canvas(bitmap)\n    canvas.drawText(char.toString(), 0f, -metrics.ascent, paint)\n\n    val pixmap = Pixmap(width, height, Pixmap.Format.RGBA8888)\n    pixmap.setPixels(bitmap)\n    bitmap.recycle()\n\n    return pixmap\n}", "CodeBleu_score": 47.89015185795827}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t    val pixmap = Pixmap(1, 1, Pixmap.Format.RGBA8888)\n    val paint = Paint()\n    paint.typeface = typeface\n    paint.textSize = fontSize\n    paint.color = fontColor\n    paint.textAlign = Paint.Align.LEFT\n    paint.isAntiAlias = true\n\n    val bitmap = Bitmap.createBitmap(1, 1, Bitmap.Config.ARGB_8888)\n    val canvas = Canvas(bitmap)\n    canvas.drawText(char.toString(), 0f, 0f, paint)\n\n    val bitmapPixels = IntArray(bitmap.width * bitmap.height)\n    bitmap.getPixels(bitmapPixels, 0, bitmap.width, 0, 0, bitmap.width, bitmap.height)\n\n    pixmap.setPixels(bitmapPixels)\n\n    bitmap.recycle()\n\n    return pixmap\n}", "CodeBleu_score": 35.50354929607853}]}
{"instance_id": "9c1ce2567ce1", "generation_result": [{"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t        val suggestedFile = Uri.parse(suggestedLocation)\n\n        val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n            addCategory(Intent.CATEGORY_OPENABLE)\n            type = \"text/plain\"\n            putExtra(Intent.EXTRA_TITLE, suggestedFile.lastPathSegment)\n        }\n\n        activity.startActivityForResult(intent) { resultCode, data ->\n            if (resultCode == Activity.RESULT_OK) {\n                val uri = data?.data\n                if (uri != null) {\n                    try {\n                        val stream: OutputStream = activity.contentResolver.openOutputStream(uri)!!\n                        stream.write(data.toByteArray())\n                        stream.close()\n                        onSaved(uri.toString())\n                    } catch (ex: Exception) {\n                        onError(ex)\n                    }\n                }\n            }\n        }\n    }", "CodeBleu_score": 53.14011351451388}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t        val uri = Uri.parse(suggestedLocation)\n        val fileName = getFileName(uri)\n        val chooserIntent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n            addCategory(Intent.CATEGORY_OPENABLE)\n            type = \"text/plain\"\n            putExtra(Intent.EXTRA_TITLE, fileName)\n        }\n        val chooser = Intent.createChooser(chooserIntent, \"Save game\")\n        activity.startActivityForResult(chooser, SAVE_REQUEST_CODE) { resultCode, data ->\n            if (resultCode == Activity.RESULT_OK) {\n                val uri = data?.data ?: return@startActivityForResult\n                try {\n                    val stream = activity.contentResolver.openOutputStream(uri)\n                    stream?.write(data.toByteArray())\n                    stream?.close()\n                    onSaved(uri.toString())\n                } catch (ex: Exception) {\n                    onError(ex)\n                }\n            }\n        }\n    }", "CodeBleu_score": 60.26473132642472}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t        val suggestedUri = Uri.parse(suggestedLocation)\n        val suggestedPath = PlatformSaverLoader.getPathFromUri(this, suggestedUri)\n        val suggestedFilename = PlatformSaverLoader.getFilenameFromUri(this, suggestedUri)\n        val suggestedFilenameWithoutExtension = PlatformSaverLoader.getFilenameWithoutExtension(suggestedFilename)\n        val suggestedFilenameExtension = PlatformSaverLoader.getFilenameExtension(suggestedFilename)\n        val suggestedFilenameWithExtension = \"$suggestedFilenameWithoutExtension.$suggestedFilenameExtension\"\n        val suggestedFilenameWithExtensionAndPath = \"$suggestedPath$suggestedFilenameWithExtension\"\n        val suggestedFilenameWithoutExtensionAndPath = \"$suggestedPath$suggestedFilenameWithoutExtension\"\n\n        val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n            addCategory(Intent.CATEGORY_OPENABLE)\n            type = \"application/octet-stream\"\n            putExtra(Intent.EXTRA_TITLE, suggestedFilenameWithExtension)\n        }\n\n        startActivityForResult(intent, REQUEST_CODE_SAVE)\n\n        override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n            super.onActivityResult(requestCode, resultCode, data)\n\n            if (requestCode == REQUEST_CODE_SAVE && resultCode == Activity.RESULT_OK) {\n                val uri = data?.data\n                if (uri != null) {\n                    try {\n                        val stream: OutputStream? = contentResolver.openOutputStream(uri)\n                        if (stream != null) {\n                            stream.write(data.toByteArray())\n                            stream.close()\n                            onSaved(uri.toString())\n                        }\n                    } catch (ex: Exception) {\n                        onError(ex)\n                    }\n                }\n            }\n        }\n    }", "CodeBleu_score": 54.51376310474095}]}
{"instance_id": "ea556fe12030", "generation_result": [{"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t        val intent = Intent(Intent.ACTION_OPEN_DOCUMENT).apply {\n            addCategory(Intent.CATEGORY_OPENABLE)\n            type = \"*/*\"\n        }\n\n        activity.startActivityForResult(intent, 42)\n        activity.onActivityResult = { requestCode, resultCode, data ->\n            if (requestCode == 42 && resultCode == Activity.RESULT_OK) {\n                val uri = data?.data ?: return@onActivityResult\n                val inputStream = activity.contentResolver.openInputStream(uri)\n                val location = getFileLocation(uri)\n                val data = inputStream?.bufferedReader()?.readText()\n\n                if (data != null) {\n                    onLoaded(data, location)\n                } else {\n                    onError(Exception(\"Could not read file\"))\n                }\n            }\n        }\n    }", "CodeBleu_score": 49.22818313705103}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t    val intent = Intent(Intent.ACTION_OPEN_DOCUMENT)\n    intent.addCategory(Intent.CATEGORY_OPENABLE)\n    intent.type = \"*/*\"\n    startActivityForResult(intent, READ_REQUEST_CODE)\n    onActivityResult = { requestCode, resultCode, data ->\n        if (requestCode == READ_REQUEST_CODE && resultCode == Activity.RESULT_OK) {\n            if (data != null) {\n                val uri = data.data\n                val stream: InputStream? = activity.contentResolver.openInputStream(uri)\n                if (stream != null) {\n                    try {\n                        val content = stream.bufferedReader().use { it.readText() }\n                        onLoaded(content, uri.toString())\n                    } catch (ex: Exception) {\n                        onError(ex)\n                    }\n                } else {\n                    onError(Exception(\"Could not open file\"))\n                }\n            } else {\n                onError(Exception(\"No file selected\"))\n            }\n        }\n    }\n}", "CodeBleu_score": 59.72342632659505}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t        val intent = Intent(Intent.ACTION_GET_CONTENT)\n        intent.type = \"*/*\"\n        intent.addCategory(Intent.CATEGORY_OPENABLE)\n        activity.startActivityForResult(intent, PlatformSaverLoader.LOAD_FILE_REQUEST_CODE)\n        activity.loadGameCallback = { data, location ->\n            onLoaded(data, location)\n        }\n        activity.loadGameErrorCallback = { ex ->\n            onError(ex)\n        }\n    }", "CodeBleu_score": 47.85932332493664}]}
{"instance_id": "813990d9bb4d", "generation_result": [{"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t    val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n        addCategory(Intent.CATEGORY_OPENABLE)\n        type = \"application/json\"\n        putExtra(Intent.EXTRA_TITLE, fileName)\n        if (uri != null && uri.scheme == \"content\") {\n            putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n        }\n    }\n    (activity as? Activity)?.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 62.97417831270078}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t    val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n        addCategory(Intent.CATEGORY_OPENABLE)\n        type = \"application/json\"\n        putExtra(Intent.EXTRA_TITLE, fileName)\n        if (uri.scheme == \"content\") {\n            putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n        }\n    }\n    startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 68.50933862567315}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t    val intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\n    intent.addCategory(Intent.CATEGORY_OPENABLE)\n    intent.type = \"application/json\"\n    intent.putExtra(Intent.EXTRA_TITLE, fileName)\n    if (uri.scheme == \"content\") {\n        intent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n    }\n    startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 84.8412886901097}]}
{"instance_id": "a423b39ba6fe", "generation_result": [{"code": "fun createNotificationChannelInfo(appContext: Context){\n\t    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n        val name = appContext.getString(R.string.channel_name_info)\n        val descriptionText = appContext.getString(R.string.channel_description_info)\n        val importance = NotificationManager.IMPORTANCE_DEFAULT\n        val channel = NotificationChannel(CHANNEL_ID_INFO, name, importance).apply {\n            description = descriptionText\n        }\n        // Register the channel with the system\n        val notificationManager: NotificationManager =\n            appContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n        notificationManager.createNotificationChannel(channel)\n    }\n}", "CodeBleu_score": 55.480170520346896}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\t    // Create the NotificationChannel, but only on API 26+ because\n    // the NotificationChannel class is new and not in the support library\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n        val name = appContext.getString(R.string.channel_name)\n        val descriptionText = appContext.getString(R.string.channel_description)\n        val importance = NotificationManager.IMPORTANCE_DEFAULT\n        val channel = NotificationChannel(CHANNEL_ID, name, importance).apply {\n            description = descriptionText\n        }\n        // Register the channel with the system\n        val notificationManager: NotificationManager =\n            appContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n        notificationManager.createNotificationChannel(channel)\n    }\n}", "CodeBleu_score": 55.08603751220975}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\t    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n        val name = \"Unciv\"\n        val descriptionText = \"Unciv\"\n        val importance = NotificationManager.IMPORTANCE_DEFAULT\n        val channel = NotificationChannel(\"Unciv\", name, importance).apply {\n            description = descriptionText\n        }\n        val notificationManager: NotificationManager =\n            appContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n        notificationManager.createNotificationChannel(channel)\n    }\n}", "CodeBleu_score": 42.06221560611924}]}
{"instance_id": "4f3e7f77a567", "generation_result": [{"code": "fun packImages(workingPath: String){\n\t    val workingDir = File(workingPath)\n    val mainAssets = workingDir.resolve(\"assets\")\n    val mods = workingDir.resolve(\"mods\")\n\n    if (!mainAssets.exists()) {\n        println(\"Main assets directory does not exist!\")\n        return\n    }\n\n    if (!mods.exists()) {\n        println(\"Mods directory does not exist!\")\n        return\n    }\n\n    val mainPack = mainAssets.resolve(\"pack\")\n    if (!mainPack.exists()) {\n        mainPack.mkdirs()\n    }\n\n    val modPacks = mods.listFiles()\n            ?.filter { it.isDirectory }\n            ?.map { it.resolve(\"pack\") }\n            ?: arrayOf()\n\n    if (modPacks.isEmpty()) {\n        println(\"No mods found!\")\n        return\n    }\n\n    try {\n        // pack main assets\n        println(\"Packing main assets...\")\n        packImages(mainAssets, mainPack)\n\n        // pack mods\n        println(\"Packing mods...\")\n        modPacks.forEach { packImages(it, it) }\n    } catch (e: Exception) {\n        println(\"Error packing images: ${e.message}\")\n    }\n}", "CodeBleu_score": 43.47588764448518}, {"code": "fun packImages(workingPath: String){\n\t    try {\n        val mods = File(workingPath, \"mods\")\n        val modsList = mods.listFiles()\n        if (modsList != null) {\n            for (mod in modsList) {\n                if (!mod.isHidden) {\n                    val modImages = File(mod, \"images\")\n                    if (modImages.exists()) {\n                        packImages(modImages.absolutePath)\n                    }\n                }\n            }\n        }\n        val images = File(workingPath, \"images\")\n        if (images.exists()) {\n            packImages(images.absolutePath)\n        }\n    } catch (e: Exception) {\n        e.printStackTrace()\n    }\n}", "CodeBleu_score": 46.92222840260744}, {"code": "fun packImages(workingPath: String){\n\t    // pack images for the main assets folder\n    try {\n        val mainPacker = TexturePacker(File(workingPath))\n        mainPacker.pack(File(workingPath), \"packed\")\n    } catch (e: Exception) {\n        println(\"Error packing main assets: ${e.message}\")\n    }\n\n    // scan mods directory to pack images for each mod\n    val modsPath = workingPath + \"/mods\"\n    val mods = File(modsPath)\n    if (mods.exists() && mods.isDirectory) {\n        val modsDir = Files.newDirectoryStream(mods.toPath())\n        for (mod in modsDir) {\n            if (Files.isHidden(mod)) {\n                continue\n            }\n            val modPath = mod.toFile().absolutePath\n            try {\n                val modPacker = TexturePacker(File(modPath))\n                modPacker.pack(File(modPath), \"packed\")\n            } catch (e: Exception) {\n                println(\"Error packing mod $modPath: ${e.message}\")\n            }\n        }\n    }\n}", "CodeBleu_score": 49.64444471657015}]}
{"instance_id": "206dbb3c21eb", "generation_result": [{"code": "suspend fun reloadWorldscreen(){\n\t    Log.info(\"Reloading WorldScreen\")\n    val worldScreen = Game.screen as WorldScreen\n    val gameInfo = worldScreen.gameInfo\n    val playerType = gameInfo.playerType\n    val ruleset = gameInfo.ruleset\n    val tileSet = gameInfo.tileSet\n    val skin = gameInfo.skin\n    val translations = gameInfo.translations\n    val gameSettings = gameInfo.gameSettings\n    val world = gameInfo.world\n    val map = gameInfo.map\n    val players = gameInfo.players\n    val player = gameInfo.player\n    val playerName = gameInfo.playerName\n    val playerColor = gameInfo.playerColor\n    val playerId = gameInfo.playerId\n    val autoPlay = gameInfo.autoPlay\n    val onlineMultiplayer = gameInfo.onlineMultiplayer\n    val musicController = worldScreen.musicController\n    val soundPlayer = worldScreen.soundPlayer\n\n    Game.screen = PlayerReadyScreen(\n        playerType,\n        ruleset,\n        tileSet,\n        skin,\n        translations,\n        gameSettings,\n        world,\n        map,\n        players,\n        player,\n        playerName,\n        playerColor,\n        playerId,\n        autoPlay,\n        onlineMultiplayer,\n        musicController,\n        soundPlayer\n    )\n}", "CodeBleu_score": 23.894608887531678}, {"code": "suspend fun reloadWorldscreen(){\n\t    val worldScreen = Gdx.app.screen as WorldScreen\n    worldScreen.reload()\n}", "CodeBleu_score": 14.239303941515423}, {"code": "suspend fun reloadWorldscreen(){\n\t    //TODO: Add some way to reload the worldscreen\n}", "CodeBleu_score": 3.54716950179408}]}
{"instance_id": "2d8fdcb5ad6f", "generation_result": [{"code": "fun goToMainMenu(): MainMenuScreen{\n\t    return MainMenuScreen()\n}", "CodeBleu_score": 4.249700866388966}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\t    val mainMenuScreen = MainMenuScreen()\n    Gdx.input.inputProcessor = mainMenuScreen\n    Gdx.app.screen = mainMenuScreen\n    return mainMenuScreen\n}", "CodeBleu_score": 45.84766616842283}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\t    Gdx.app.exit()\n    return MainMenuScreen()\n}", "CodeBleu_score": 7.464143713386005}]}
{"instance_id": "df60142d384c", "generation_result": [{"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t    val graphics = Lwjgl3Graphics()\n    val config = Lwjgl3ApplicationConfiguration()\n    config.setWindowedMode(settings.windowWidth, settings.windowHeight)\n    graphics.setDisplayMode(config.width, config.height, config.fullscreen)\n    graphics.setWindowedMode(config.width, config.height)\n    val monitor = getMonitor(graphics)\n    val bounds = monitor.virtualBounds\n    val windowWidth = bounds.width\n    val windowHeight = bounds.height\n    val windowX = bounds.x\n    val windowY = bounds.y\n    val windowedMode = ScreenMode(windowWidth, windowHeight, windowX, windowY)\n    graphics.setWindowedMode(windowedMode)\n    config.width = windowWidth\n    config.height = windowHeight\n    config.x = windowX\n    config.y = windowY\n    config.fullscreen = false\n    val application = Lwjgl3Application(this, config)\n    application.graphics.setDisplayMode(config.width, config.height, config.fullscreen)\n    application.graphics.setWindowedMode(config.width, config.height)\n    return true\n}", "CodeBleu_score": 42.13155873537484}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t    val gd = GraphicsEnvironment.getLocalGraphicsEnvironment().defaultScreenDevice\n    val gc = gd.defaultConfiguration\n    val gcBounds = gc.bounds\n    val gcWidth = gcBounds.width\n    val gcHeight = gcBounds.height\n    val gcMaxWidth = gc.maximumWindowBounds.width\n    val gcMaxHeight = gc.maximumWindowBounds.height\n    val gcMaxWidthFactor = gcMaxWidth.toFloat() / gcWidth.toFloat()\n    val gcMaxHeightFactor = gcMaxHeight.toFloat() / gcHeight.toFloat()\n    val gcMaxFactor = if (gcMaxWidthFactor > gcMaxHeightFactor) gcMaxWidthFactor else gcMaxHeightFactor\n    val gcMaxWidthFactorRounded = gcMaxFactor.roundToInt()\n    val gcMaxHeightFactorRounded = gcMaxFactor.roundToInt()\n    val gcMaxWidthRounded = gcMaxWidthFactorRounded * gcWidth\n    val gcMaxHeightRounded = gcMaxHeightFactorRounded * gcHeight\n    val gcMaxWidthRoundedFactor = gcMaxWidthRounded.toFloat() / gcWidth.toFloat()\n    val gcMaxHeightRoundedFactor = gcMaxHeightRounded.toFloat() / gcHeight.toFloat()\n    val gcMaxRoundedFactor = if (gcMaxWidthRoundedFactor > gcMaxHeightRoundedFactor) gcMaxWidthRoundedFactor else gcMaxHeightRoundedFactor\n    val gcMaxRoundedFactorRounded = gcMaxRoundedFactor.roundToInt()\n    val gcMaxWidthRoundedRounded = gcMaxRoundedFactorRounded * gcWidth\n    val gcMaxHeightRoundedRounded = gcMaxRoundedFactorRounded * gcHeight\n    val gcMaxWidthRoundedRoundedFactor = gcMaxWidthRoundedRounded.toFloat() / gcWidth.toFloat()\n    val gcMaxHeightRoundedRoundedFactor = gcMaxHeightRoundedRounded.", "CodeBleu_score": 32.97997924400462}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t    val monitor: Monitor = Lwjgl3Graphics.getDefaultDisplayMode().monitor\n    val bounds = monitor.displayMode.bounds\n    val width = settings.windowWidth.toFloat()\n    val height = settings.windowHeight.toFloat()\n    val x = (bounds.width - width).toFloat() / 2\n    val y = (bounds.height - height).toFloat() / 2\n    val config = Lwjgl3ApplicationConfiguration()\n    config.setWindowedMode(width.toInt(), height.toInt())\n    config.setWindowPosition(x.toInt(), y.toInt())\n    config.setWindowIcon(PlatformDisplay.getIcons())\n    Lwjgl3Application(this, config)\n    return true\n}", "CodeBleu_score": 43.5113620258675}]}
{"instance_id": "a8b17234c4e5", "generation_result": [{"code": "private fun getLinuxDistro(): String{\n\t    val osReleaseFile = FileHandle(\"etc/os-release\")\n    val osReleaseLines = osReleaseFile.readString(Charset.defaultCharset()).split(\"\n\")\n    val osReleaseMap = mutableMapOf<String, String>()\n    osReleaseLines.forEach { osReleaseLine ->\n        val osReleaseKeyValue = osReleaseLine.split(\"=\")\n        if (osReleaseKeyValue.size == 2) {\n            osReleaseMap[osReleaseKeyValue[0]] = osReleaseKeyValue[1]\n        }\n    }\n    val osReleaseName = osReleaseMap[\"NAME\"] ?: \"\"\n    val osReleaseVersion = osReleaseMap[\"VERSION\"] ?: \"\"\n    val osReleasePrettyName = osReleaseMap[\"PRETTY_NAME\"] ?: \"\"\n    return if (osReleasePrettyName.isNotEmpty()) {\n        osReleasePrettyName\n    } else {\n        \"$osReleaseName $osReleaseVersion\"\n    }\n}", "CodeBleu_score": 32.377864048829274}, {"code": "private fun getLinuxDistro(): String{\n\t    val osReleaseFile = FileHandle(FileHandle.FILE_PROTOCOL + \"/etc/os-release\")\n    val osReleaseFileContent = osReleaseFile.readString(Charset.defaultCharset())\n    val osReleaseFileContentMap = osReleaseFileContent.split(\"\n\").map { it.split(\"=\") }.map { it[0] to it[1].replace(\"\\\"\", \"\") }.toMap()\n    val osReleaseFileContentMapName = osReleaseFileContentMap[\"NAME\"]\n    val osReleaseFileContentMapPrettyName = osReleaseFileContentMap[\"PRETTY_NAME\"]\n    val osReleaseFileContentMapVersion = osReleaseFileContentMap[\"VERSION\"]\n    return if (osReleaseFileContentMapName == null) {\n        \"\"\n    } else {\n        if (osReleaseFileContentMapPrettyName != null) {\n            osReleaseFileContentMapPrettyName\n        } else {\n            osReleaseFileContentMapName + \" \" + osReleaseFileContentMapVersion\n        }\n    }\n}", "CodeBleu_score": 36.553209866239186}, {"code": "private fun getLinuxDistro(): String{\n\t    val osRelease = FileHandle(FileHandle.externalRootLocal().child(\"etc/os-release\"))\n    val osReleaseMap = osRelease.readString(Charset.defaultCharset()).split(\"\n\").map { it.split(\"=\") }.map { it[0] to it[1] }.toMap()\n    return when {\n        osReleaseMap.containsKey(\"NAME\") -> {\n            when {\n                osReleaseMap.containsKey(\"PRETTY_NAME\") -> osReleaseMap[\"PRETTY_NAME\"]!!.replace(\"\\\"\", \"\")\n                osReleaseMap.containsKey(\"VERSION\") -> \"${osReleaseMap[\"NAME\"]!!} ${osReleaseMap[\"VERSION\"]!!.replace(\"\\\"\", \"\")}\"\n                else -> \"\"\n            }\n        }\n        else -> \"\"\n    }\n}", "CodeBleu_score": 46.476364734830014}]}
{"instance_id": "36a1d2e56540", "generation_result": [{"code": "private fun flashWindow(){\n\t    try {\n        // Try to use the native Windows API to flash the window\n        val hwnd = User32.INSTANCE.GetActiveWindow()\n        val flashInfo = WinUser.FLASHWINFO()\n        flashInfo.cbSize = WinUser.FLASHWINFO.size\n        flashInfo.hwnd = hwnd\n        flashInfo.dwFlags = WinUser.FLASHW_ALL or WinUser.FLASHW_TIMERNOFG\n        flashInfo.uCount = 0\n        flashInfo.dwTimeout = 0\n        User32.INSTANCE.FlashWindowEx(flashInfo)\n    } catch (e: Exception) {\n        Log.warn(\"Failed to flash window: ${e.message}\")\n    }\n}", "CodeBleu_score": 45.51161603367668}, {"code": "private fun flashWindow(){\n\t    // Attempt to flash the window\n    try {\n        // If the platform is Windows, use the Windows API to flash the window\n        if (System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n            // Get the window handle\n            val hwnd = User32.INSTANCE.GetForegroundWindow()\n\n            // Flash the window\n            User32.INSTANCE.FlashWindow(hwnd, true)\n        } else {\n            // Get the window handle\n            val hwnd = GLFWNativeWin32.glfwGetWin32Window(Lwjgl3Window.getHandle())\n\n            // Flash the window\n            User32.INSTANCE.FlashWindow(hwnd, true)\n        }\n    } catch (e: Exception) {\n        // If the window could not be flashed, log the error\n        Log.error(\"Could not flash window\", e)\n    }\n}", "CodeBleu_score": 52.62335428254741}, {"code": "private fun flashWindow(){\n\t    try {\n        val hwnd = User32.INSTANCE.GetForegroundWindow()\n        val hdc = User32.INSTANCE.GetDC(hwnd)\n        val hIcon = User32.INSTANCE.LoadIcon(null, WinUser.IDI_APPLICATION)\n        val hOldIcon = User32.INSTANCE.SelectObject(hdc, hIcon)\n        User32.INSTANCE.DrawIcon(hdc, 0, 0, hIcon)\n        User32.INSTANCE.SelectObject(hdc, hOldIcon)\n        User32.INSTANCE.ReleaseDC(hwnd, hdc)\n        User32.INSTANCE.DestroyIcon(hIcon)\n    } catch (e: Exception) {\n        Log.error(\"Failed to flash window\", e)\n    }\n}", "CodeBleu_score": 49.774530144769706}]}
{"instance_id": "8e3c7096415a", "generation_result": [{"code": "public void onFullBackup(FullBackupDataOutput data){\n\t    File sharedPreferencesFile = new File(getFilesDir(), \"shared_prefs/com.shatteredpixel.shatteredpixeldungeon_preferences.xml\");\n    if (sharedPreferencesFile.exists()) {\n        data.writeDataToOutput(sharedPreferencesFile.getAbsolutePath(), new FileInputStream(sharedPreferencesFile));\n    }\n\n    File rankingsFile = new File(getFilesDir(), \"rankings.dat\");\n    if (rankingsFile.exists()) {\n        data.writeDataToOutput(rankingsFile.getAbsolutePath(), new FileInputStream(rankingsFile));\n    }\n\n    File badgesFile = new File(getFilesDir(), \"badges.dat\");\n    if (badgesFile.exists()) {\n        data.writeDataToOutput(badgesFile.getAbsolutePath(), new FileInputStream(badgesFile));\n    }\n\n    File journalFile = new File(getFilesDir(), \"journal.dat\");\n    if (journalFile.exists()) {\n        data.writeDataToOutput(journalFile.getAbsolutePath(), new FileInputStream(journalFile));\n    }\n}", "CodeBleu_score": 23.163759080169704}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t    super.onFullBackup(data);\n    SharedPreferencesBackupHelper sharedPrefs = new SharedPreferencesBackupHelper(this, getString(R.string.preferences_file));\n    sharedPrefs.performFullBackup(data);\n    File file = new File(getFilesDir(), getString(R.string.rankings_file));\n    if (file.exists()) {\n        data.writeEntityHeader(getString(R.string.rankings_file), file.length());\n        FileBackupHelper.writeFileToBackup(file, data);\n    }\n    file = new File(getFilesDir(), getString(R.string.badges_file));\n    if (file.exists()) {\n        data.writeEntityHeader(getString(R.string.badges_file), file.length());\n        FileBackupHelper.writeFileToBackup(file, data);\n    }\n    file = new File(getFilesDir(), getString(R.string.journal_file));\n    if (file.exists()) {\n        data.writeEntityHeader(getString(R.string.journal_file), file.length());\n        FileBackupHelper.writeFileToBackup(file, data);\n    }\n}", "CodeBleu_score": 28.5673320485635}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t    // Backup shared preferences\n    SharedPreferencesBackupHelper helper = new SharedPreferencesBackupHelper(this, \"preferences\");\n    helper.performFullBackup(data);\n\n    // Backup rankings\n    if (Rankings.getRankingsFile().exists()) {\n        FileBackupHelper rankingsHelper = new FileBackupHelper(this, \"rankings\");\n        rankingsHelper.performFullBackup(data);\n    }\n\n    // Backup badges\n    if (Badges.getBadgesFile().exists()) {\n        FileBackupHelper badgesHelper = new FileBackupHelper(this, \"badges\");\n        badgesHelper.performFullBackup(data);\n    }\n\n    // Backup journal entries\n    if (Journal.getJournalFile().exists()) {\n        FileBackupHelper journalHelper = new FileBackupHelper(this, \"journal\");\n        journalHelper.performFullBackup(data);\n    }\n}", "CodeBleu_score": 18.014064039683547}]}
{"instance_id": "583999724a15", "generation_result": [{"code": "public boolean connectedToUnmeteredNetwork(){\n\t    ConnectivityManager connectivityManager = (ConnectivityManager) Gdx.app.getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        NetworkInfo activeNetwork = connectivityManager.getActiveNetworkInfo();\n        return activeNetwork != null && !connectivityManager.isActiveNetworkMetered();\n    } else {\n        NetworkInfo activeNetwork = connectivityManager.getActiveNetworkInfo();\n        return activeNetwork != null && activeNetwork.getType() == ConnectivityManager.TYPE_WIFI;\n    }\n}", "CodeBleu_score": 57.591432412166974}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t    ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n    if (Build.VERSION.SDK_INT >= 19) {\n        NetworkInfo activeNetwork = cm.getActiveNetworkInfo();\n        return activeNetwork != null && !activeNetwork.isMetered();\n    } else {\n        NetworkInfo activeNetwork = cm.getActiveNetworkInfo();\n        return activeNetwork != null && activeNetwork.isConnected() && (activeNetwork.getType() == ConnectivityManager.TYPE_WIFI || activeNetwork.getType() == ConnectivityManager.TYPE_WIMAX || activeNetwork.getType() == ConnectivityManager.TYPE_BLUETOOTH || activeNetwork.getType() == ConnectivityManager.TYPE_ETHERNET);\n    }\n}", "CodeBleu_score": 71.5315536177966}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        ConnectivityManager connectivityManager = (ConnectivityManager) Gdx.app.getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);\n        NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();\n        return networkInfo != null && !connectivityManager.isActiveNetworkMetered();\n    } else {\n        ConnectivityManager connectivityManager = (ConnectivityManager) Gdx.app.getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);\n        NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();\n        return networkInfo != null && networkInfo.isConnected() && (networkInfo.getType() == ConnectivityManager.TYPE_WIFI || networkInfo.getType() == ConnectivityManager.TYPE_WIMAX || networkInfo.getType() == ConnectivityManager.TYPE_BLUETOOTH || networkInfo.getType() == ConnectivityManager.TYPE_ETHERNET);\n    }\n}", "CodeBleu_score": 54.531899814683904}]}
{"instance_id": "f8bd6cd4826b", "generation_result": [{"code": "protected boolean affectHero( Hero hero ){\n\t\tif (hero.isAlive()) {\n\t\tSample.INSTANCE.play(Assets.Sounds.ANKH);\n\t\t\n\t\thero.cure();\n\t\thero.removeCurses();\n\t\thero.satisfyHunger();\n\t\thero.restoreHealth();\n\t\t\n\t\thero.interrupt();\n\t\t\n\t\tGLog.i(Messages.get(this, \"affect_hero\"));\n\t\t\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}", "CodeBleu_score": 22.345077148300653}, {"code": "protected boolean affectHero( Hero hero ){\n\t\tif (hero.isAlive()) {\n\t\thero.restoreHealth();\n\t\thero.cure();\n\t\thero.removeCurse();\n\t\thero.satisfyHunger();\n\t\thero.restoreEnergy();\n\t\thero.restoreMana();\n\t\t\n\t\thero.interrupt();\n\t\t\n\t\tif (hero.isAlive()) {\n\t\t\thero.sprite.emitter().burst(ShaftParticle.SHAFT, 10);\n\t\t\thero.sprite.emitter().burst(ShadowParticle.SHADOW, 10);\n\t\t\t\n\t\t\tSample.INSTANCE.play(Assets.Sounds.HEAL);\n\t\t\t\n\t\t\tGLog.i(Messages.get(this, \"healed\"));\n\t\t\t\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}", "CodeBleu_score": 33.427255351707075}, {"code": "protected boolean affectHero( Hero hero ){\n\t    if (hero.isAlive()) {\n        Sample.INSTANCE.play(Assets.Sounds.HEAL);\n        hero.cureAilments();\n        hero.removeCurses();\n        hero.satisfyHunger();\n        hero.heal(hero.maxHP);\n        hero.interrupt();\n        hero.sprite.emitter().burst( ShaftParticle.FACTORY, 10 );\n        hero.sprite.emitter().burst( ShadowParticle.FACTORY, 10 );\n        hero.sprite.emitter().burst( Speck.factory( Speck.STAR ), 10 );\n        hero.sprite.emitter().burst( FloatingText.factory( Messages.get(this, \"heal\") ), 10 );\n        Dungeon.level.drop( this, new ScrollOfRemoveCurse() );\n        Dungeon.level.drop( this, new PotionOfHealing() );\n        Dungeon.level.drop( this, new Waterskin() );\n        Dungeon.level.drop( this, new Ankh() );\n        hero.sprite.centerEmitter().burst( BlobEmitter.factory( CharSprite.WOUND ), 10 );\n        hero.sprite.centerEmitter().burst( CellEmitter.factory( CharSprite.WOUND ), 10 );\n        GLog.i( Messages.get(this, \"heal\") );\n        return true;\n    } else {\n        return false;\n    }\n}", "CodeBleu_score": 49.255490805050215}]}
{"instance_id": "3a94f2e84c83", "generation_result": [{"code": "protected Item affectItem( Item item, int pos ){\n\t\tif( item.isEquipped() ) {\n\t\treturn null;\n\t}\n\t\n\tif( item instanceof Waterskin ) {\n\t\tWaterskin waterskin = (Waterskin)item;\n\t\tif( !waterskin.isFull() ) {\n\t\t\twaterskin.fill();\n\t\t\t\n\t\t\tGLog.i( Messages.get(this, \"fill_waterskin\") );\n\t\t\t\n\t\t\tBlobEmitter.center( pos ).start( Speck.factory( Speck.WATER ), 0.2f, 10 );\n\t\t\t\n\t\t\tSample.INSTANCE.play( Assets.Sounds.DRINK );\n\t\t\t\n\t\t\treturn waterskin;\n\t\t}\n\t}\n\t\n\tif( item instanceof Ankh ) {\n\t\tAnkh ankh = (Ankh)item;\n\t\tif( !ankh.isBlessed() ) {\n\t\t\tankh.bless();\n\t\t\t\n\t\t\tGLog.i( Messages.get(this, \"bless_ankh\") );\n\t\t\t\n\t\t\tBlobEmitter.center( pos ).start( Speck.factory( Speck.WATER ), 0.2f, 10 );\n\t\t\t\n\t\t\tSample.INSTANCE.play( Assets.Sounds.BLESS );\n\t\t\t\n\t\t\treturn ankh;\n\t\t}\n\t}\n\t\n\tif( item instanceof PotionOfHealing ) {\n\t\tPotionOfHealing potion = (PotionOfHealing)item;\n\t\tif( !potion.isDrunk() ) {\n\t\t\tpotion.drink();\n\t\t\t\n\t\t\tGLog.i( Messages.get(this, \"drink_potion\") );\n\t\t\t\n\t\t\tBlobEmitter.center( pos ).start( Speck.factory( Speck.WATER ), 0.2f, 10 );\n\t\t\t\n\t\t\tSample.INSTANCE.play( Assets.Sounds.DRINK );\n\t\t", "CodeBleu_score": 46.18636154938943}, {"code": "protected Item affectItem( Item item, int pos ){\n\t\t\n\tif (item == null) {\n\t\treturn null;\n\t}\n\t\n\tif (item instanceof Waterskin) {\n\t\tif (((Waterskin)item).isFull()) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\t((Waterskin)item).fill();\n\t\t\n\t\tGLog.i(Messages.get(this, \"water_filled\"));\n\t\t\n\t\tSample.INSTANCE.play(Assets.Sounds.DRINK);\n\t\t\n\t\tCellEmitter.center(pos).burst(Speck.factory(Speck.LIQUID), 2);\n\t\t\n\t\treturn item;\n\t}\n\t\n\tif (item instanceof Ankh) {\n\t\tif (((Ankh)item).isBlessed()) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\t((Ankh)item).bless();\n\t\t\n\t\tGLog.i(Messages.get(this, \"blessed\"));\n\t\t\n\t\tSample.INSTANCE.play(Assets.Sounds.BLESS);\n\t\t\n\t\tCellEmitter.center(pos).burst(Speck.factory(Speck.LIQUID), 2);\n\t\t\n\t\treturn item;\n\t}\n\t\n\tif (item instanceof PotionOfHealing) {\n\t\tif (((PotionOfHealing)item).isCured()) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\t((PotionOfHealing)item).cure();\n\t\t\n\t\tGLog.i(Messages.get(this, \"cured\"));\n\t\t\n\t\tSample.INSTANCE.play(Assets.Sounds.HEAL);\n\t\t\n\t\tCellEmitter.center(pos).burst(Speck.factory(Speck.LIQUID), 2);\n\t\t\n\t\treturn item;\n\t}\n\t\n\tif (item instanceof ScrollOfRemoveCurse) {\n\t\tif (!((ScrollOfRemoveCurse)item).canRemoveCurse()) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\t((", "CodeBleu_score": 52.27335786793637}, {"code": "protected Item affectItem( Item item, int pos ){\n\t\tif (item == null) return null;\n\t\n\t// fill a waterskin\n\tif (item instanceof Waterskin && ((Waterskin)item).fill(pos)) {\n\t\tSample.INSTANCE.play(Assets.Sounds.DRINK);\n\t\treturn null;\n\t}\n\t\n\t// bless an ankh\n\tif (item instanceof Ankh && ((Ankh)item).bless(pos)) {\n\t\tSample.INSTANCE.play(Assets.Sounds.ANKH_BLESS);\n\t\treturn null;\n\t}\n\t\n\t// remove curses\n\tif (item.cursed() && item.removeCurse(pos)) {\n\t\tSample.INSTANCE.play(Assets.Sounds.REMOVE_CURSE);\n\t\treturn null;\n\t}\n\t\n\treturn null;\n}", "CodeBleu_score": 47.23334323957367}]}
{"instance_id": "d322228d1a3e", "generation_result": [{"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t\tif (enemy.alignment == Char.Alignment.ENEMY) {\n\t\thero.addBuff(buffCls);\n\t\t\n\t\tif (enemy instanceof Mimic) {\n\t\t\thero.addBuff(Mimic.class);\n\t\t}\n\t\t\n\t\tif (enemy.alignment == Char.Alignment.ENEMY) {\n\t\t\tint gold = enemy.gold;\n\t\t\t\n\t\t\tif (hero.subClass == HeroSubClass.MONK) {\n\t\t\t\thero.energy += enemy.energy;\n\t\t\t\tgold += enemy.energy;\n\t\t\t}\n\t\t\t\n\t\t\thero.gold += gold;\n\t\t\t\n\t\t\tif (hero.gold > hero.maxGold) {\n\t\t\t\thero.gold = hero.maxGold;\n\t\t\t}\n\t\t\t\n\t\t\tif (hero.gold > Statistics.maxGold) {\n\t\t\t\tStatistics.maxGold = hero.gold;\n\t\t\t}\n\t\t\t\n\t\t\tStatistics.totalGold += gold;\n\t\t\t\n\t\t\tStatistics.kills++;\n\t\t\t\n\t\t\tif (Statistics.kills > Statistics.highKills) {\n\t\t\t\tStatistics.highKills = Statistics.kills;\n\t\t\t}\n\t\t\t\n\t\t\tif (Statistics.kills % 10 == 0) {\n\t\t\t\tStatistics.kills10++;\n\t\t\t}\n\t\t\t\n\t\t\tif (Statistics.kills % 50 == 0) {\n\t\t\t\tStatistics.kills50++;\n\t\t\t}\n\t\t\t\n\t\t\tif (Statistics.kills % 100 == 0) {\n\t\t\t\tStatistics.kills100++;\n\t\t\t}\n\t\t\t\n\t\t\tif (Statistics.kills % 250 == 0) {\n\t\t\t\tStatistics.kills250++;\n\t\t\t", "CodeBleu_score": 29.886813692855796}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t\t//apply the buff to the enemy\n\tenemy.applyBuff(buffCls);\n\t\n\t//check if the enemy was aligned as an enemy\n\tif (enemy.alignment == Char.Alignment.ENEMY) {\n\t\t//roll for loot\n\t\tint gold = enemy.rollForGold();\n\t\t\n\t\t//update kill statistics\n\t\tStatistics.updateKills(enemy.getClass());\n\t\t\n\t\t//process ascension challenges\n\t\tBadges.processAscensionChallenges(enemy.getClass());\n\t\t\n\t\t//grant experience to the hero based on level comparison\n\t\thero.gainExperience(enemy.level);\n\t\t\n\t\t//buff the hero with additional energy if they are a Monk subclass\n\t\tif (hero.subClass == HeroSubClass.MONK) {\n\t\t\thero.energy += 5;\n\t\t}\n\t\t\n\t\t//add gold to the hero's gold count\n\t\thero.gold += gold;\n\t\t\n\t\t//add the gold count to the hero's gold text\n\t\thero.goldText.text = \"\" + hero.gold;\n\t\t\n\t\t//add gold text to the screen\n\t\thero.sprite.parent.add(hero.goldText);\n\t\t\n\t\t//add a floating text to the screen\n\t\tFloatingText.show(\"+\" + gold, hero.sprite.x + 16, hero.sprite.y + 16, CharSprite.FONT_COLOR);\n\t}\n}", "CodeBleu_score": 32.27734367070158}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t\t// Apply buff to enemy\n\tenemy.applyBuff(buffCls);\n\t\n\t// Check if enemy was aligned as an enemy\n\tif (enemy.alignment == Char.Alignment.ENEMY) {\n\t\t// Roll for loot\n\t\tint roll = Dungeon.roll(1, 100);\n\t\t\n\t\t// Update kill statistics\n\t\tif (hero.subClass == HeroSubClass.MONK) {\n\t\t\tStatistics.monkKills++;\n\t\t}\n\t\telse if (hero.subClass == HeroSubClass.MAGE) {\n\t\t\tStatistics.mageKills++;\n\t\t}\n\t\telse if (hero.subClass == HeroSubClass.ROGUE) {\n\t\t\tStatistics.rogueKills++;\n\t\t}\n\t\telse if (hero.subClass == HeroSubClass.WARRIOR) {\n\t\t\tStatistics.warriorKills++;\n\t\t}\n\t\t\n\t\t// Process ascension challenges\n\t\tif (hero.subClass == HeroSubClass.MONK) {\n\t\t\tif (Statistics.monkKills >= 10) {\n\t\t\t\tBadges.unlock(\"monk_10_kills\");\n\t\t\t}\n\t\t\tif (Statistics.monkKills >= 100) {\n\t\t\t\tBadges.unlock(\"monk_100_kills\");\n\t\t\t}\n\t\t\tif (Statistics.monkKills >= 1000) {\n\t\t\t\tBadges.unlock(\"monk_1000_kills\");\n\t\t\t}\n\t\t}\n\t\telse if (hero.subClass == HeroSubClass.MAGE) {\n\t\t\tif (Statistics.mageKills >= 10) {\n\t\t\t\tBadges.unlock(\"mage_10_kills\");\n\t\t\t}\n\t\t\tif (Statistics.mageKills >= 100) {\n\t\t\t\tBadges.unlock(\"mage_100_kills\");", "CodeBleu_score": 27.52128073145951}]}
{"instance_id": "9ee21c0149f3", "generation_result": [{"code": "public static void processEnemyKill(Char enemy){\n\t    if (AscensionChallenge.isActive()) {\n        if (enemy instanceof Mob) {\n            Mob mob = (Mob) enemy;\n            if (mob.isBoosted()) {\n                mob.setBoosted(false);\n                mob.revert();\n            }\n            if (mob.isValid()) {\n                int stacks = AscensionChallenge.getStacks();\n                if (stacks > 0) {\n                    if (stacks == 1) {\n                        GLog.w(Messages.get(AscensionChallenge.class, \"weakening\"));\n                    }\n                    AscensionChallenge.setStacks(stacks - 1);\n                }\n                if (Hero.instance.level() == Hero.MAX_LEVEL) {\n                    Hero.instance.gainExp(mob.exp());\n                }\n                Hero.instance.buffs.refreshBuffs();\n            }\n        }\n    }\n}", "CodeBleu_score": 21.073173346551222}, {"code": "public static void processEnemyKill(Char enemy){\n\t    if (Dungeon.hero.buff(AscensionChallenge.class) != null) {\n        if (enemy instanceof Rat) {\n            if (enemy.buff(Ratmogrify.class) != null) {\n                enemy.buff(Ratmogrify.class).detach();\n            }\n        } else if (enemy instanceof Eye) {\n            if (enemy.buff(Ratmogrify.class) != null) {\n                enemy.buff(Ratmogrify.class).detach();\n            }\n        } else if (enemy instanceof Slime) {\n            if (enemy.buff(Ratmogrify.class) != null) {\n                enemy.buff(Ratmogrify.class).detach();\n            }\n        } else if (enemy instanceof Snake) {\n            if (enemy.buff(Ratmogrify.class) != null) {\n                enemy.buff(Ratmogrify.class).detach();\n            }\n        } else if (enemy instanceof Spinner) {\n            if (enemy.buff(Ratmogrify.class) != null) {\n                enemy.buff(Ratmogrify.class).detach();\n            }\n        } else if (enemy instanceof Succubus) {\n            if (enemy.buff(Ratmogrify.class) != null) {\n                enemy.buff(Ratmogrify.class).detach();\n            }\n        } else if (enemy instanceof Swarm) {\n            if (enemy.buff(Ratmogrify.class) != null) {\n                enemy.buff(Ratmogrify.class).detach();\n            }\n        } else if (enemy instanceof Warlock) {\n            if (enemy.buff(Ratmogrify.class) != null) {\n                enemy.buff(Ratmogrify.class).detach();\n            }\n        } else if (enemy instanceof Shaman) {\n            if (enemy.buff(Ratmogrify.class) != null) {\n                enemy.buff(", "CodeBleu_score": 15.028558403384201}, {"code": "public static void processEnemyKill(Char enemy){\n\t\tif (Dungeon.hero.buff(AscensionChallenge.class) != null) {\n\t\tif (enemy instanceof Bat) {\n\t\t\tif (Dungeon.hero.buff(Ratmogrify.class) != null) {\n\t\t\t\tDungeon.hero.buff(Ratmogrify.class).detach();\n\t\t\t\tDungeon.hero.sprite.centerEmitter().burst(Ratmogrify.ratSprite, 5);\n\t\t\t\tDungeon.hero.sprite.centerEmitter().burst(Ratmogrify.ratSprite, 5);\n\t\t\t\tDungeon.hero.sprite.centerEmitter().burst(Ratmogrify.ratSprite, 5);\n\t\t\t\tDungeon.hero.sprite.centerEmitter().burst(Ratmogrify.ratSprite, 5);\n\t\t\t\tDungeon.hero.sprite.centerEmitter().burst(Ratmogrify.ratSprite, 5);\n\t\t\t\tDungeon.hero.sprite.centerEmitter().burst(Ratmogrify.ratSprite, 5);\n\t\t\t\tDungeon.hero.sprite.centerEmitter().burst(Ratmogrify.ratSprite, 5);\n\t\t\t\tDungeon.hero.sprite.centerEmitter().burst(Ratmogrify.ratSprite, 5);\n\t\t\t\tDungeon.hero.sprite.centerEmitter().burst(Ratmogrify.ratSprite, 5);\n\t\t\t\tDungeon.hero.sprite.centerEmitter().burst(Ratmogrify.ratSprite, 5);\n\t\t\t\tDungeon.hero.sprite.centerEmitter().burst(Ratmogrify.ratSprite, 5);\n\t\t\t\t", "CodeBleu_score": 16.161476811044235}]}
{"instance_id": "4fc9c3c1fcce", "generation_result": [{"code": "public static int AscensionCorruptResist(Mob m){\n\t    if (Dungeon.challenge == null) {\n        return m.exp;\n    }\n    if (m.buff(BuffIndicator.class) != null) {\n        return m.exp;\n    }\n    if (m instanceof RipperDemon) {\n        return 10;\n    }\n    if (m instanceof Ghoul) {\n        return 7;\n    }\n    if (m instanceof Slime) {\n        return Math.max(13, m.exp);\n    }\n    if (m instanceof DM100) {\n        return Math.max(13, m.exp);\n    }\n    if (m instanceof DM200) {\n        return Math.max(13, m.exp);\n    }\n    if (m instanceof Skeleton) {\n        return Math.max(13, m.exp);\n    }\n    if (m instanceof Scorpio) {\n        return Math.max(13, m.exp);\n    }\n    if (m instanceof Crab) {\n        return Math.max(13, m.exp);\n    }\n    if (m instanceof Bat) {\n        return Math.max(13, m.exp);\n    }\n    if (m instanceof Snake) {\n        return Math.max(13, m.exp);\n    }\n    if (m instanceof Eye) {\n        return Math.max(13, m.exp);\n    }\n    if (m instanceof Brute) {\n        return Math.max(13, m.exp);\n    }\n    if (m instanceof Guard) {\n        return Math.max(13, m.exp);\n    }\n    if (m instanceof Golem) {\n        return Math.max(13, m.exp);\n    }\n    if (m instanceof Gnoll) {\n        return Math.max(13, m.exp);\n    }\n    if (m instanceof Shaman) {\n        return Math.max(13, m.exp);\n    }\n    if (m instanceof Necromancer) {\n        return Math.max(13, m.exp);\n    }\n    if (m instanceof War", "CodeBleu_score": 33.61839958801533}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t\tif (Dungeon.challenge == null) {\n\t\treturn m.EXP;\n\t}\n\tif (m.buff(Ratmogrify.class) != null) {\n\t\treturn m.EXP;\n\t}\n\tif (m.type == Ratmogrify.RAT_TYPE) {\n\t\tm = m.originalMob;\n\t}\n\tif (m instanceof RipperDemon) {\n\t\treturn 10;\n\t}\n\tif (m instanceof Golem) {\n\t\treturn 13;\n\t}\n\tif (m instanceof Ghoul) {\n\t\treturn 7;\n\t}\n\tif (m instanceof Bat || m instanceof Brute || m instanceof Crab || m instanceof DM100 || m instanceof DM200 || m instanceof Eye || m instanceof Gnoll || m instanceof Guard || m instanceof Monk || m instanceof Necromancer || m instanceof RipperDemon || m instanceof Slime || m instanceof Snake || m instanceof Spinner || m instanceof Succubus || m instanceof Swarm || m instanceof Thief || m instanceof Warlock || m instanceof Shaman) {\n\t\treturn Math.max(m.EXP, 13);\n\t}\n\treturn m.EXP;\n}", "CodeBleu_score": 32.47164735109843}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t    if (Dungeon.challenge != null) {\n        if (m.buff(Ratmogrify.class) != null) {\n            m = m.buff(Ratmogrify.class).original;\n        }\n        if (m.buff(Shaman.class) != null) {\n            m = m.buff(Shaman.class).original;\n        }\n        if (m.buff(Monk.class) != null) {\n            m = m.buff(Monk.class).original;\n        }\n        if (m.buff(Elemental.class) != null) {\n            m = m.buff(Elemental.class).original;\n        }\n        if (m.buff(Succubus.class) != null) {\n            m = m.buff(Succubus.class).original;\n        }\n        if (m.buff(Bat.class) != null) {\n            m = m.buff(Bat.class).original;\n        }\n        if (m instanceof RipperDemon) {\n            return 10;\n        }\n        if (m instanceof Golem) {\n            return 13;\n        }\n        if (m instanceof Guard) {\n            return 13;\n        }\n        if (m instanceof Necromancer) {\n            return 13;\n        }\n        if (m instanceof Skeleton) {\n            return 13;\n        }\n        if (m instanceof Slime) {\n            return 13;\n        }\n        if (m instanceof Snake) {\n            return 13;\n        }\n        if (m instanceof Spinner) {\n            return 13;\n        }\n        if (m instanceof Gnoll) {\n            return 13;\n        }\n        if (m instanceof Brute) {\n            return 13;\n        }\n        if (m instanceof Crab) {\n            return 13;\n        }\n        if (m instanceof DM100) {\n            return 13;\n        }\n        if (m instanceof DM200) {\n            return 13;\n        }\n        if (m instanceof E", "CodeBleu_score": 31.39502994566255}]}
{"instance_id": "bdc8df5952c7", "generation_result": [{"code": "public void hit( Char enemy ){\n\t\n    if (enemy.isAlive() && !enemy.isImmune(this)) {\n        if (combo == 0) {\n            combo = 1;\n            comboTimer = 0;\n            comboTime = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n            comboTimeMax = 0;\n", "CodeBleu_score": 10.151197026723715}, {"code": "public void hit( Char enemy ){\n\t    //Increment combo count\n    comboCount++;\n    //Set combo timer\n    comboTimer = comboTime;\n    //Extend combo timer if enemy is dead or has Corruption buff with full health\n    if (enemy.isDead() || enemy.buff(Corruption.class) != null && enemy.HP() == enemy.HT()) {\n        comboTimer += comboTime * (talentPoints[Talent.CLEAVE.ordinal()] + 1);\n    }\n    //Update initial combo time\n    comboTime = comboTimer;\n    //Trigger action indicators\n    triggerActionIndicators();\n    //Validate mastery combos\n    validateMasteryCombos();\n    //Log combo count\n    logComboCount();\n    //Refresh buff indicator\n    refreshBuffIndicator();\n}", "CodeBleu_score": 39.388509504922276}, {"code": "public void hit( Char enemy ){\n\t    if (enemy.isAlive() && !enemy.isImmune(this)) {\n        if (enemy.isImmune(this)) {\n            return;\n        }\n\n        if (enemy.isImmune(this)) {\n            return;\n        }\n\n        if (enemy.isImmune(this)) {\n            return;\n        }\n\n        if (enemy.isImmune(this)) {\n            return;\n        }\n\n        if (enemy.isImmune(this)) {\n            return;\n        }\n\n        if (enemy.isImmune(this)) {\n            return;\n        }\n\n        if (enemy.isImmune(this)) {\n            return;\n        }\n\n        if (enemy.isImmune(this)) {\n            return;\n        }\n\n        if (enemy.isImmune(this)) {\n            return;\n        }\n\n        if (enemy.isImmune(this)) {\n            return;\n        }\n\n        if (enemy.isImmune(this)) {\n            return;\n        }\n\n        if (enemy.isImmune(this)) {\n            return;\n        }\n\n        if (enemy.isImmune(this)) {\n            return;\n        }\n\n        if (enemy.isImmune(this)) {\n            return;\n        }\n\n        if (enemy.isImmune(this)) {\n            return;\n        }\n\n        if (enemy.isImmune(this)) {\n            return;\n        }\n\n        if (enemy.isImmune(this)) {\n            return;\n        }\n\n        if (enemy.isImmune(this)) {\n            return;\n        }\n\n        if (enemy.isImmune(this)) {\n            return;\n        }\n\n        if (enemy.isImmune(this)) {\n            return;\n        }\n\n        if (enemy.isImmune(this)) {\n            return;\n        }\n\n        if (enemy", "CodeBleu_score": 8.157202842739578}]}
{"instance_id": "abf7c664b4dd", "generation_result": [{"code": "public int capacity(){\n\t    int capacity = BASE_CAPACITY;\n    for (Item item : this) {\n        if (item instanceof Bag) {\n            capacity += ((Bag) item).capacity;\n        }\n    }\n    if (equipped.weapon != null && equipped.weapon.kind == KindOfWeapon.SECONDARY) {\n        capacity--;\n    }\n    return capacity;\n}", "CodeBleu_score": 33.55100978073678}, {"code": "public int capacity(){\n\t    int cap = BAG_CAPACITY;\n    for (Item i : this) {\n        if (i instanceof Bag) {\n            cap += ((Bag) i).capacity();\n        }\n    }\n    if (equipment.weapon2 != null) {\n        cap -= equipment.weapon2.capacity();\n    }\n    return cap;\n}", "CodeBleu_score": 33.27952559338434}, {"code": "public int capacity(){\n\t    int cap = baseCapacity();\n\n    for (Item item : contents) {\n        if (item instanceof Bag) {\n            cap += ((Bag)item).capacity();\n        }\n    }\n\n    if (secondaryWeapon != null) {\n        cap--;\n    }\n\n    return cap;\n}", "CodeBleu_score": 41.70656030721833}]}
{"instance_id": "b97e41e092d2", "generation_result": [{"code": "public void updateHT( boolean boostHP ){\n\t    HT = (int)((level + 1) * 0.5f * (1.0f + (float)boost / 100.0f));\n    HT = HT * (1.0f + (float)boostHT / 100.0f);\n    HT = HT * (1.0f + (float)boostHTM / 100.0f);\n    HT = HT * (1.0f + (float)boostHTP / 100.0f);\n    HT = HT * (1.0f + (float)boostHTA / 100.0f);\n    HT = HT * (1.0f + (float)boostHTF / 100.0f);\n    HT = HT * (1.0f + (float)boostHTMF / 100.0f);\n    HT = HT * (1.0f + (float)boostHTPB / 100.0f);\n    HT = HT * (1.0f + (float)boostHTMFB / 100.0f);\n    HT = HT * (1.0f + (float)boostHTPBM / 100.0f);\n    HT = HT * (1.0f + (float)boostHTPBMF / 100.0f);\n    HT = HT * (1.0f + (float)boostHTPBMFG / 100.0f);\n    HT = HT * (1.0f + (float)boostHTPBMFGD / 100.0f);\n    HT = HT * (1.0f + (float)boostHTPBMFGDH / 100.0f);\n    HT = HT * (1.0f + (float)boostHTPBMFGDHB / 100.0f);\n    HT = HT * (1.0f + (float)boostHTPBMFGDHBB / 100.0f);\n    HT = HT * (1.0f + (float)boostHTPBMFGDHBBB / 100.0", "CodeBleu_score": 23.54993733395961}, {"code": "public void updateHT( boolean boostHP ){\n\t\tint baseHT = level.ht( level );\n\tint ht = baseHT;\n\n\t// Apply RingOfMight\n\tif( ringOfMight != null ) {\n\t\tht = (int) (ht * ringOfMight.htModifier);\n\t}\n\t\n\t// Apply ElixirOfMight\n\tif( elixirOfMight != null ) {\n\t\tht = (int) (ht * elixirOfMight.htModifier);\n\t}\n\t\n\t// Apply buffs\n\tfor( int i = 0; i < buffs.size(); i++ ) {\n\t\tBuff buff = buffs.get(i);\n\t\tif( buff.htModifier != 0 ) {\n\t\t\tht = (int) (ht * buff.htModifier);\n\t\t}\n\t}\n\t\n\t// Apply multipliers\n\tif( multiplier != 0 ) {\n\t\tht = (int) (ht * multiplier);\n\t}\n\t\n\t// Update HP\n\tif( boostHP ) {\n\t\thp = Math.min( hp, ht );\n\t}\n\t\n\t// Update HT\n\tthis.ht = ht;\n}", "CodeBleu_score": 26.88291348430869}, {"code": "public void updateHT( boolean boostHP ){\n\t    HT = (int)(((level + 1) * 10 + (int)(strength * 0.5)) * HT_MULTIPLIER);\n    HT += (int)(HT * RING_OF_MIGHT_HT_MULTIPLIER);\n    HT += (int)(HT * ELIXIR_OF_MIGHT_HT_MULTIPLIER);\n    HT += (int)(HT * BLESS_HT_MULTIPLIER);\n    HT += (int)(HT * BUFF_HT_MULTIPLIER);\n    HT += (int)(HT * BUFF_HT_MULTIPLIER);\n    HT += (int)(HT * BUFF_HT_MULTIPLIER);\n    HT += (int)(HT * BUFF_HT_MULTIPLIER);\n    HT += (int)(HT * BUFF_HT_MULTIPLIER);\n    HT += (int)(HT * BUFF_HT_MULTIPLIER);\n    HT += (int)(HT * BUFF_HT_MULTIPLIER);\n    HT += (int)(HT * BUFF_HT_MULTIPLIER);\n    HT += (int)(HT * BUFF_HT_MULTIPLIER);\n    HT += (int)(HT * BUFF_HT_MULTIPLIER);\n    HT += (int)(HT * BUFF_HT_MULTIPLIER);\n    HT += (int)(HT * BUFF_HT_MULTIPLIER);\n    HT += (int)(HT * BUFF_HT_MULTIPLIER);\n    HT += (int)(HT * BUFF_HT_MULTIPLIER);\n    HT += (int)(HT * BUFF_HT_MULTIPLIER);\n    HT += (int)(HT * BUFF_HT_MULTIPLIER);\n    HT += (int)(HT * BUFF_HT_MULTIPLIER);\n    HT += (int)(HT * BUFF_HT_MULTIPLIER);\n    HT += (int)(HT * BUFF_HT_MULTIPLIER);\n   ", "CodeBleu_score": 15.32102501511632}]}
{"instance_id": "b72bd91544e7", "generation_result": [{"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t    if (enemy.alignment == Char.Alignment.ENEMY || enemy.alignment == Char.Alignment.NEUTRAL_MIMIC) {\n        if (tryAttack(enemy, wep)) {\n            if (this.alignment == Char.Alignment.GLADIATOR || this.alignment == Char.Alignment.DUELIST) {\n                if (this.combo == 0) {\n                    this.combo = 1;\n                } else if (this.combo < 3) {\n                    this.combo++;\n                }\n            }\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 17.10966445219999}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\tif (enemy.alignment != Char.ENEMY && enemy.alignment != Char.NEUTRAL) return false;\n\t\n\tif (wep.owner != null) {\n\t\twep.owner.setWeapon( null );\n\t}\n\t\n\tif (weapon != null) {\n\t\tweapon.owner = null;\n\t}\n\t\n\tweapon = wep;\n\twep.owner = this;\n\t\n\tif (wep.attack( enemy )) {\n\t\tif (alignment == Char.GLADIATOR || alignment == Char.DUELIST) {\n\t\t\tif (wep.type == MissileWeapon.Type.ARROW) {\n\t\t\t\tif (buff(Combo.class) != null) {\n\t\t\t\t\tbuff(Combo.class).stacks++;\n\t\t\t\t} else {\n\t\t\t\t\tbuff(Combo.class, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}", "CodeBleu_score": 23.23032535093508}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\tif (enemy.alignment == Char.ENEMY || enemy.alignment == Char.NEUTRAL && enemy instanceof Mimic) {\n\t\tif (weapon != null) {\n\t\t\tweapon.clear();\n\t\t}\n\t\tweapon = wep;\n\t\tweapon.set(this);\n\t\tif (weapon.attack(enemy)) {\n\t\t\tif (weapon instanceof SpiritBow && (this instanceof Monk || this instanceof Duelist)) {\n\t\t\t\tif (this instanceof Monk) {\n\t\t\t\t\tif (((Monk)this).hasBuff(MonkEnergy.class)) {\n\t\t\t\t\t\t((Monk)this).removeBuff(MonkEnergy.class);\n\t\t\t\t\t}\n\t\t\t\t\taddBuff(new MonkEnergy(this, 1, 1));\n\t\t\t\t} else if (this instanceof Duelist) {\n\t\t\t\t\tif (((Duelist)this).hasBuff(Combo.class)) {\n\t\t\t\t\t\t((Duelist)this).removeBuff(Combo.class);\n\t\t\t\t\t}\n\t\t\t\t\taddBuff(new Combo(this, 1, 1));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 20.691521660439285}]}
{"instance_id": "f265b39b6677", "generation_result": [{"code": "public int attackSkill( Char target ){\n\t\tint skill = 0;\n\t\n\t// First, calculate the base attack skill.\n\tskill = (int)Math.floor((float)weapon.attackSkill() * (float)attackSkill() * (float)attackSkillMultiplier());\n\t\n\t// Then, adjust the attack skill based on the weapon type.\n\tswitch( weapon.kind() ) {\n\t\tcase MELEE:\n\t\t\t// Melee weapons have a 10% accuracy penalty for each tile the target is away.\n\t\t\tskill -= (target.pos.x - pos.x) + (target.pos.y - pos.y);\n\t\t\tbreak;\n\t\tcase RANGED:\n\t\t\t// Ranged weapons have a 10% accuracy penalty for each tile the target is away.\n\t\t\tskill -= (target.pos.x - pos.x) + (target.pos.y - pos.y);\n\t\t\tbreak;\n\t\tcase MAGIC:\n\t\t\t// Magic weapons have a 5% accuracy penalty for each tile the target is away.\n\t\t\tskill -= (target.pos.x - pos.x) + (target.pos.y - pos.y) * 2;\n\t\t\tbreak;\n\t}\n\t\n\t// Then, adjust the attack skill based on the active buffs.\n\tfor( Buff b : buffs ) {\n\t\tskill = b.attackSkill(skill);\n\t}\n\t\n\t// Finally, return the adjusted attack skill.\n\treturn skill;\n}", "CodeBleu_score": 28.468962092112566}, {"code": "public int attackSkill( Char target ){\n\t    // Get the base attack skill of the character's weapon.\n    int baseAttackSkill = weapon.attackSkill();\n\n    // If the character is a monk, apply the Monk Energy buff to the attack skill.\n    if (this instanceof Monk) {\n        baseAttackSkill += ((Monk) this).energy;\n    }\n\n    // If the character is a mage, apply the Magic Empower buff to the attack skill.\n    if (this instanceof Mage) {\n        baseAttackSkill += ((Mage) this).empower;\n    }\n\n    // If the character is a warrior, apply the Physical Empower buff to the attack skill.\n    if (this instanceof Warrior) {\n        baseAttackSkill += ((Warrior) this).empower;\n    }\n\n    // If the character is a thief, apply the Thief's Evasion buff to the attack skill.\n    if (this instanceof Thief) {\n        baseAttackSkill += ((Thief) this).evasion;\n    }\n\n    // If the character is a duelist, apply the Duelist's Evasion buff to the attack skill.\n    if (this instanceof Duelist) {\n        baseAttackSkill += ((Duelist) this).evasion;\n    }\n\n    // If the character is a huntress, apply the Huntress's Evasion buff to the attack skill.\n    if (this instanceof Huntress) {\n        baseAttackSkill += ((Huntress) this).evasion;\n    }\n\n    // If the character is a mage, apply the Mage's Magic Empower buff to the attack skill.\n    if (this instanceof Mage) {\n        baseAttackSkill += ((Mage) this).empower;\n    }\n\n    // If the character is a warrior, apply the Warrior's Physical Empower buff to the attack skill.\n    if (this instanceof Warrior) {\n        baseAttackSkill += ((Warrior) this).empower;\n    }\n\n    // If the character is a thief, apply the Thief's Evasion buff to", "CodeBleu_score": 27.165872228587894}, {"code": "public int attackSkill( Char target ){\n\t    int attackSkill = hero.weapon().attackSkill();\n\n    if (hero.weapon().type() == KindOfWeapon.RANGED) {\n        attackSkill *= 2;\n    }\n\n    if (hero.weapon().type() == KindOfWeapon.MELEE) {\n        attackSkill *= 4;\n    }\n\n    if (hero.weapon().type() == KindOfWeapon.MAGIC) {\n        attackSkill *= 8;\n    }\n\n    if (hero.weapon().type() == KindOfWeapon.SPELL) {\n        attackSkill *= 16;\n    }\n\n    if (hero.weapon().type() == KindOfWeapon.ARTIFACT) {\n        attackSkill *= 32;\n    }\n\n    if (hero.weapon().type() == KindOfWeapon.DUAL) {\n        attackSkill *= 64;\n    }\n\n    if (hero.weapon().type() == KindOfWeapon.HOLSTER) {\n        attackSkill *= 128;\n    }\n\n    if (hero.weapon().type() == KindOfWeapon.STAFF) {\n        attackSkill *= 256;\n    }\n\n    if (hero.weapon().type() == KindOfWeapon.SPELL) {\n        attackSkill *= 512;\n    }\n\n    if (hero.weapon().type() == KindOfWeapon.SPELL) {\n        attackSkill *= 1024;\n    }\n\n    if (hero.weapon().type() == KindOfWeapon.SPELL) {\n        attackSkill *= 2048;\n    }\n\n    if (hero.weapon().type() == KindOfWeapon.SPELL) {\n        attackSkill *= 4096;\n    }\n\n    if (hero.", "CodeBleu_score": 25.338296821426194}]}
{"instance_id": "9e50c198348d", "generation_result": [{"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t  reset()\n  for (i in 0 until repeats) {\n    start()\n    operation()\n    stop()\n  }\n  if (printResults) {\n    Gdx.app.log(\"PerformanceCounter\", toString())\n  }\n}", "CodeBleu_score": 58.44145450835166}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t  this.reset()\n  this.start()\n  for (i in 0 until repeats) {\n    operation()\n  }\n  this.stop()\n  if (printResults) {\n    Gdx.app.log(\"PerformanceCounter\", this.toString())\n  }\n}", "CodeBleu_score": 62.31287118977431}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t  val time = this\n  val start = System.nanoTime()\n  var i = 0\n  while (i < repeats) {\n    operation()\n    i++\n  }\n  val end = System.nanoTime()\n  val elapsed = end - start\n  val elapsedMillis = elapsed / 1_000_000.0\n  val elapsedSeconds = elapsedMillis / 1_000.0\n  val perSecond = repeats / elapsedSeconds\n  val perMillisecond = perSecond * 1_000.0\n  time.mean = elapsedMillis / repeats\n  time.min = elapsedMillis / repeats\n  time.max = elapsedMillis / repeats\n  time.count = repeats\n  time.sum = elapsedMillis\n  time.sumSquares = elapsedMillis * elapsedMillis\n  time.meanSquares = elapsedMillis * elapsedMillis / repeats\n  time.meanSquares = elapsedMillis * elapsedMillis / repeats\n  time.meanSquares = elapsedMillis * elapsedMillis / repeats\n  time.meanSquares = elapsedMillis * elapsedMillis / repeats\n  time.meanSquares = elapsedMillis * elapsedMillis / repeats\n  time.meanSquares = elapsedMillis * elapsedMillis / repeats\n  time.meanSquares = elapsedMillis * elapsedMillis / repeats\n  time.meanSquares = elapsedMillis * elapsedMillis / repeats\n  time.meanSquares = elapsedMillis * elapsedMillis / repeats\n  time.meanSquares = elapsedMillis * elapsedMillis / repeats\n  time.meanSquares = elapsedMillis * elapsedMillis / repeats\n  time.meanSquares = elapsedMillis * elapsedMillis / repeats\n  time.meanSquares = elapsedMillis * elapsedMillis / repeats\n  time.meanSquares = elapsedMillis * elapsedMillis / repeats\n  time.meanS", "CodeBleu_score": 42.783755601884046}]}
{"instance_id": "5f6e11998a1f", "generation_result": [{"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t  contract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }\n  val tree = BehaviorTree<E>(rootTask, blackboard)\n  tree.init()\n  return tree\n}", "CodeBleu_score": 77.87104371203068}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t  contract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }\n  val tree = BehaviorTree<E>(rootTask, blackboard)\n  tree.init()\n  return tree\n}", "CodeBleu_score": 77.87104371203068}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t  contract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }\n  return BehaviorTree<E>(rootTask, blackboard).apply(init)\n}", "CodeBleu_score": 60.711805172246834}]}
{"instance_id": "cdda12e45fb9", "generation_result": [{"code": "onPointerOver (){\n\t  const {\n    scene,\n    map,\n    selectedCell,\n    highlightedCell,\n    highlightedCellTint,\n    highlightedCellTransparency,\n    highlightedCellTransparencyHover,\n    highlightedCellTintHover,\n    highlightedCellTintHoverAlpha,\n    highlightedCellTintHoverAlphaFactor,\n    highlightedCellTransparencyHoverFactor,\n    highlightedCellTransparencyHoverFactorFactor,\n    highlightedCellTintHoverAlphaFactorFactor,\n    highlightedCellTransparencyHoverFactorFactorFactor,\n    highlightedCellTintHoverAlphaFactorFactorFactor,\n    highlightedCellTransparencyHoverFactorFactorFactorFactor,\n    highlightedCellTintHoverAlphaFactorFactorFactorFactor,\n    highlightedCellTransparencyHoverFactorFactorFactorFactorFactor,\n    highlightedCellTintHoverAlphaFactorFactorFactorFactorFactor,\n    highlightedCellTransparencyHoverFactorFactorFactorFactorFactorFactor,\n    highlightedCellTintHoverAlphaFactorFactorFactorFactorFactorFactor,\n    highlightedCellTransparencyHoverFactorFactorFactorFactorFactorFactorFactor,\n    highlightedCellTintHoverAlphaFactorFactorFactorFactorFactorFactorFactor,\n    highlightedCellTransparencyHoverFactorFactorFactorFactorFactorFactorFactorFactor,\n    highlightedCellTintHoverAlphaFactorFactorFactorFactorFactorFactorFactorFactor,\n    highlightedCellTransparencyHoverFactorFactorFactorFactorFactorFactorFactorFactorFactor,\n    highlightedCellTintHoverAlphaFactorFactorFactorFactorFactorFactorFactorFactorFactor,\n    highlightedCellTransparencyHoverFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor,\n    highlightedCellTintHoverAlphaFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor,\n", "CodeBleu_score": 11.352518050405813}, {"code": "onPointerOver (){\n\t  const {\n    map,\n    selectedCellCoordinates,\n    setSelectedCellCoordinates,\n    setCellHeightmapPolygonTransparency,\n  } = this\n  const {\n    cell,\n    cellCoordinates,\n    cellHeightmapPolygon,\n  } = this\n\n  if (cell) {\n    setSelectedCellCoordinates(cellCoordinates)\n\n    if (cellHeightmapPolygon) {\n      setCellHeightmapPolygonTransparency(cellHeightmapPolygon, 0.5)\n    }\n  }\n\n  const cellCoordinatesToHighlight = [\n    cellCoordinates,\n    ...related(cellCoordinates, map),\n  ]\n\n  for (const cellCoordinatesToHighlight of cellCoordinatesToHighlight) {\n    const cellToHighlight = map.get(cellCoordinatesToHighlight)\n\n    if (cellToHighlight) {\n      cellToHighlight.tint = 0xff0000\n    }\n  }\n}", "CodeBleu_score": 11.564773434901605}, {"code": "onPointerOver (){\n\t    let cell = this.getCellAt(this.pointer.x, this.pointer.y)\n    if (cell) {\n        this.map.selected.cell = cell\n        this.map.highlight.cell = cell\n        this.map.highlight.related = this.map.getRelatedCells(cell)\n        this.map.highlight.surrounding = this.map.getSurroundingCells(cell)\n        this.map.highlight.surrounding.forEach((cell) => {\n            cell.setTint(0xff0000)\n        })\n        this.map.highlight.related.forEach((cell) => {\n            cell.setTint(0x00ff00)\n        })\n        this.map.highlight.cell.setTint(0x0000ff)\n        if (cell.heightmap) {\n            cell.heightmap.alpha = 0.5\n        }\n    }\n}", "CodeBleu_score": 39.378237308191466}]}
{"instance_id": "850931ce3401", "generation_result": [{"code": "getTrafficDensity (){\n\t    let lightThreshold = 100;\n    let heavyThreshold = 500;\n\n    if (this.currentValue < lightThreshold) {\n        return null;\n    } else if (this.currentValue >= lightThreshold && this.currentValue < heavyThreshold) {\n        return 'light';\n    } else {\n        return 'heavy';\n    }\n}", "CodeBleu_score": 30.502410820437508}, {"code": "getTrafficDensity (){\n\t  if (currentValue > lightThreshold && currentValue < heavyThreshold) {\n    return 'light';\n  } else if (currentValue > heavyThreshold) {\n    return 'heavy';\n  } else {\n    return null;\n  }\n}", "CodeBleu_score": 23.570048849263458}, {"code": "getTrafficDensity (){\n\t  if (currentValue > heavyThreshold) {\n    return 'heavy';\n  } else if (currentValue > lightThreshold) {\n    return 'light';\n  } else {\n    return null;\n  }\n}", "CodeBleu_score": 20.578253094506422}]}
{"instance_id": "5958478bf873", "generation_result": [{"code": "restart: function (){\n\t    var trafficDensity = this.getTrafficDensity();\n    if (trafficDensity) {\n        this.setTrafficDensity(trafficDensity);\n    } else {\n        this.setTrafficDensity('light');\n    }\n    this.restartTimer();\n}", "CodeBleu_score": 23.141075047208577}, {"code": "restart: function (){\n\t  this.currentValue = this.initialValue;\n  this.currentTrafficDensity = this.getTrafficDensity();\n  this.currentTrafficDensity = this.currentTrafficDensity || 'light';\n  this.currentTrafficDensity = this.currentTrafficDensity || 'light';\n  this.currentTrafficDensity = this.currentTrafficDensity || 'light';\n  this.currentTrafficDensity = this.currentTrafficDensity || 'light';\n  this.currentTrafficDensity = this.currentTrafficDensity || 'light';\n  this.currentTrafficDensity = this.currentTrafficDensity || 'light';\n  this.currentTrafficDensity = this.currentTrafficDensity || 'light';\n  this.currentTrafficDensity = this.currentTrafficDensity || 'light';\n  this.currentTrafficDensity = this.currentTrafficDensity || 'light';\n  this.currentTrafficDensity = this.currentTrafficDensity || 'light';\n  this.currentTrafficDensity = this.currentTrafficDensity || 'light';\n  this.currentTrafficDensity = this.currentTrafficDensity || 'light';\n  this.currentTrafficDensity = this.currentTrafficDensity || 'light';\n  this.currentTrafficDensity = this.currentTrafficDensity || 'light';\n  this.currentTrafficDensity = this.currentTrafficDensity || 'light';\n  this.currentTrafficDensity = this.currentTrafficDensity || 'light';\n  this.currentTrafficDensity = this.currentTrafficDensity || 'light';\n  this.currentTrafficDensity = this.currentTrafficDensity || 'light';\n  this.currentTrafficDensity = this.currentTrafficDensity || 'light';\n  this.currentTrafficDensity = this.currentTrafficDensity || 'light';\n  this.currentTrafficDensity = this.currentTrafficDensity || '", "CodeBleu_score": 37.22876154033919}, {"code": "restart: function (){\n\t    var currentValue = this.getCurrentValue();\n    var trafficDensity = null;\n    if (currentValue <= this.lightThreshold) {\n        trafficDensity = 'light';\n    } else if (currentValue <= this.heavyThreshold) {\n        trafficDensity = 'heavy';\n    } else {\n        trafficDensity = 'heavy';\n    }\n    return trafficDensity;\n}", "CodeBleu_score": 26.00330983489681}]}
{"instance_id": "d2441e586d58", "generation_result": [{"code": "flash: function (color, duration, force, alpha){\n\t    if (this.effect && this.effect.type === 'flash' && !force) {\n        return false;\n    }\n    if (!this.effect) {\n        this.effect = {};\n    }\n    this.effect.type = 'flash';\n    this.effect.color = color || 'white';\n    this.effect.duration = duration || 1000;\n    this.effect.alpha = alpha || 1;\n    this.clearEffect();\n    this.drawRect(0, 0, this.width, this.height, color, alpha);\n    this.effect.timer = setTimeout(function () {\n        this.clearEffect();\n    }, this.effect.duration);\n    return true;\n}", "CodeBleu_score": 40.72495984483967}, {"code": "flash: function (color, duration, force, alpha){\n\t    if (!this.visible || !this.layer || this.effectsSuspended || (this.effect && this.effect.type == 'flash' && !force)) {\n        return false;\n    }\n\n    var _color = color || '#FFFFFF';\n    var _duration = duration || 200;\n    var _alpha = alpha || 1;\n\n    // clear any existing effect\n    this.clearEffect();\n\n    // draw the flash\n    this.layer.ctx.fillStyle = _color;\n    this.layer.ctx.globalAlpha = _alpha;\n    this.layer.ctx.fillRect(this.x, this.y, this.width, this.height);\n\n    // set the effect\n    this.effect = {\n        type: 'flash',\n        duration: _duration,\n        color: _color,\n        alpha: _alpha\n    };\n\n    // run the effect\n    this.runEffect();\n\n    return true;\n}", "CodeBleu_score": 34.2827048076408}, {"code": "flash: function (color, duration, force, alpha){\n\t    if (!this.flashData) {\n        this.flashData = {};\n    }\n    if (!this.flashData.color) {\n        this.flashData.color = new me.Color();\n    }\n    if (typeof color !== \"undefined\") {\n        this.flashData.color.copy(color);\n    }\n    if (typeof duration !== \"undefined\") {\n        this.flashData.duration = duration;\n    }\n    if (typeof force !== \"undefined\") {\n        this.flashData.force = force;\n    }\n    if (typeof alpha !== \"undefined\") {\n        this.flashData.alpha = alpha;\n    }\n    if (!this.flashData.duration || !this.flashData.color) {\n        return false;\n    }\n    if (!this.flashData.force && this.flashData.duration > this.flashData.duration) {\n        return false;\n    }\n    if (!this.flashData.alpha) {\n        this.flashData.alpha = 1.0;\n    }\n    this.clearEffects();\n    this.setOpacity(this.flashData.alpha);\n    this.setColor(this.flashData.color);\n    this.setOpacity(1.0);\n    this.flashData.duration -= me.timer.getDelta();\n    return true;\n}", "CodeBleu_score": 43.620243219123964}]}
{"instance_id": "48b26381d975", "generation_result": [{"code": "createFluidLayer: function (children, addToWorld){\n\t    var layer = new FluidLayer();\n    if (addToWorld) {\n        this.addLayer(layer);\n    }\n    if (children) {\n        layer.addChildren(children);\n    }\n    return layer;\n}", "CodeBleu_score": 29.564339283269923}, {"code": "createFluidLayer: function (children, addToWorld){\n\t    var layer = new FluidLayer();\n    layer.addChildren(children);\n    if (addToWorld) {\n        this.addChild(layer);\n    }\n    this.layers.push(layer);\n    return layer;\n}", "CodeBleu_score": 29.96232806523992}, {"code": "createFluidLayer: function (children, addToWorld){\n\t    var layer = new FlexLayer(this.game, this.game.physics.flexBox);\n    layer.addToWorld = addToWorld;\n    layer.fluid = true;\n    layer.setFluidProperties(this.fluidProperties);\n    this.layers.push(layer);\n    if (addToWorld) {\n        this.game.world.addChild(layer);\n    }\n    if (children) {\n        layer.add(children);\n    }\n    return layer;\n}", "CodeBleu_score": 53.9904033718268}]}
{"instance_id": "624c9e2eb19f", "generation_result": [{"code": "createFullLayer: function (children){\n\t\n    var layer = this.game.add.flexLayer(0, 0, this.game.world.width, this.game.world.height, 1);\n\n    layer.scale.set(this.game.width / layer.width);\n\n    layer.fixedToCamera = true;\n\n    this.layers.push(layer);\n\n    if (children)\n    {\n        layer.addMultiple(children);\n    }\n\n    return layer;\n\n}", "CodeBleu_score": 56.95855455594572}, {"code": "createFullLayer: function (children){\n\t\n    var layer = this.game.add.flexLayer(0, 0, this.game.width, this.game.height);\n\n    layer.scale.set(this.scale);\n    layer.fixedToCamera = true;\n\n    this.layers.push(layer);\n\n    if (children)\n    {\n        layer.addMultiple(children);\n    }\n\n    return layer;\n\n}", "CodeBleu_score": 56.28964072446026}, {"code": "createFullLayer: function (children){\n\t\n    var layer = this.game.add.flexLayer(this.game.world.centerX, this.game.world.centerY, this.game.world.width, this.game.world.height, 1, 1);\n\n    layer.anchor.set(0.5);\n    layer.scale.set(1);\n\n    this.layers.push(layer);\n\n    if (children)\n    {\n        layer.addMultiple(children);\n    }\n\n    return layer;\n\n}", "CodeBleu_score": 57.39937028581401}]}
{"instance_id": "1c7529bca3ce", "generation_result": [{"code": "crop: function (rect, copy){\n\t    var crop = this.crop,\n        target;\n\n    if (copy) {\n        if (crop && crop !== rect) {\n            crop = crop.clone();\n        }\n        if (rect) {\n            crop = rect.clone();\n        }\n    } else {\n        crop = rect;\n    }\n\n    this.crop = crop;\n\n    if (crop) {\n        target = this.target;\n        crop.x += target.x;\n        crop.y += target.y;\n        crop.width = Math.max(0, Math.min(crop.width, target.width));\n        crop.height = Math.max(0, Math.min(crop.height, target.height));\n        this.updateCrop();\n    } else {\n        this.resetFrame();\n    }\n}", "CodeBleu_score": 44.36847774127833}, {"code": "crop: function (rect, copy){\n\t    if (rect) {\n        if (copy) {\n            this.cropRect = rect.clone();\n        } else {\n            this.cropRect = rect;\n        }\n    } else {\n        this.cropRect = null;\n    }\n    if (this.cropRect) {\n        this.updateCrop();\n    } else {\n        this.resetFrame();\n    }\n}", "CodeBleu_score": 32.79658686364327}, {"code": "crop: function (rect, copy){\n\t    var crop = this.crop,\n        store = this['_' + this.type + 'Crop'],\n        reset,\n        ret;\n\n    // If the crop rectangle was not initialized yet, create it from the\n    // initial coordinates\n    if (!crop) {\n        this.crop = crop = {\n            x: this.x,\n            y: this.y,\n            width: this.width,\n            height: this.height\n        };\n        store = null;\n    }\n\n    // The crop rectangle is stored in order to prevent unnecessary processing\n    // when the crop rectangle is not modified.\n    if (store) {\n        reset =\n            crop.x === crop.width &&\n            crop.y === crop.height &&\n            crop.x === this.x &&\n            crop.y === this.y &&\n            crop.width === this.width &&\n            crop.height === this.height;\n    }\n\n    // If the crop rectangle is the same as the frame (1:1 ratio), reset the\n    // crop rectangle\n    if (reset) {\n        delete this.crop;\n        ret = this.resetFrame();\n\n    // If the crop rectangle differs from the frame, crop the image.\n    } else {\n        // If a new crop rectangle is provided, either update the current crop\n        // rectangle or create a new one.\n        if (rect) {\n            if (copy) {\n                crop = {\n                    x: crop.x,\n                    y: crop.y,\n                    width: crop.width,\n                    height: crop.height\n                };\n            }\n            crop.x = rect.x;\n            crop.y = rect.y;\n            crop.width = rect.width;\n            crop.height = rect.height;\n        }\n\n        // If the current crop rectangle differs from the stored one, update\n        // the image.\n        if (store &&\n            crop.x !== store.x ||\n            crop.y !== store.y ||\n            crop.width !== store.width ||\n", "CodeBleu_score": 30.354086559468524}]}
{"instance_id": "d767b9ea9212", "generation_result": [{"code": "move: function (x, y, wrap){\n\t    var o = this;\n    if (x) {\n        o.moveH(x, wrap);\n    }\n    if (y) {\n        o.moveV(y, wrap);\n    }\n    return o;\n}", "CodeBleu_score": 42.51118816262577}, {"code": "move: function (x, y, wrap){\n\t    var dx = x,\n        dy = y;\n    if (this.type === 'circle') {\n        if (dx !== 0) {\n            this.cx += dx;\n        }\n        if (dy !== 0) {\n            this.cy += dy;\n        }\n    } else if (this.type === 'rect') {\n        if (dx !== 0) {\n            this.x += dx;\n        }\n        if (dy !== 0) {\n            this.y += dy;\n        }\n    } else if (this.type === 'line') {\n        if (dx !== 0) {\n            this.x1 += dx;\n            this.x2 += dx;\n        }\n        if (dy !== 0) {\n            this.y1 += dy;\n            this.y2 += dy;\n        }\n    } else if (this.type === 'polyline') {\n        if (dx !== 0) {\n            this.points.forEach(function (p) {\n                p.x += dx;\n            });\n        }\n        if (dy !== 0) {\n            this.points.forEach(function (p) {\n                p.y += dy;\n            });\n        }\n    } else if (this.type === 'polygon') {\n        if (dx !== 0) {\n            this.points.forEach(function (p) {\n                p.x += dx;\n            });\n        }\n        if (dy !== 0) {\n            this.points.forEach(function (p) {\n                p.y += dy;\n            });\n        }\n    } else if (this.type === 'text') {\n        if (dx !== 0) {\n            this.x += dx;\n        }\n        if (dy !== 0) {\n            this.y += dy;\n        }\n    }\n    return this;\n}", "CodeBleu_score": 28.002858132750646}, {"code": "move: function (x, y, wrap){\n\t\tvar o = this,\n\t\t\tmoveH = o.moveH,\n\t\t\tmoveV = o.moveV;\n\tif (x) {\n\t\tif (wrap) {\n\t\t\tx = moveH.call(o, x, wrap);\n\t\t} else {\n\t\t\tmoveH.call(o, x);\n\t\t}\n\t}\n\tif (y) {\n\t\tif (wrap) {\n\t\t\ty = moveV.call(o, y, wrap);\n\t\t} else {\n\t\t\tmoveV.call(o, y);\n\t\t}\n\t}\n\treturn o;\n}", "CodeBleu_score": 21.15057522763186}]}
{"instance_id": "c7cf015114f3", "generation_result": [{"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\n    if (this.frames[state])\n    {\n        this.frame = this.frames[state];\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n\n}", "CodeBleu_score": 18.115757955535127}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\n    var key = this.key + state;\n\n    if (this.frames[key])\n    {\n        this.frame = this.frames[key];\n        return true;\n    }\n\n    return false;\n\n}", "CodeBleu_score": 16.55609584410154}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\n    if (this.frames[state])\n    {\n        this.frame = this.frames[state];\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n\n}", "CodeBleu_score": 18.115757955535127}]}
{"instance_id": "e0294cb83ca3", "generation_result": [{"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n    var weapon = this.game.plugins.add(Phaser.Plugin.Weapon);\n\n    if (bulletClass)\n    {\n        weapon.bulletClass = bulletClass;\n    }\n\n    if (group)\n    {\n        weapon.bullets = group;\n    }\n\n    for (var i = 0; i < quantity; i++)\n    {\n        weapon.addBullet(key, frame);\n    }\n\n    return weapon;\n\n}", "CodeBleu_score": 60.783644254604596}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n    if (typeof group === 'undefined') { group = this.world; }\n    if (typeof bulletClass === 'undefined') { bulletClass = Phaser.Bullet; }\n\n    var weapon = new Phaser.Weapon(this.game, key, frame, group, bulletClass);\n\n    if (typeof quantity === 'number')\n    {\n        weapon.setBullets(quantity);\n    }\n\n    return weapon;\n\n}", "CodeBleu_score": 38.25899565254925}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n    var weapon = this.game.plugins.add(Phaser.Weapon);\n\n    if (bulletClass)\n    {\n        weapon.bulletClass = bulletClass;\n    }\n\n    if (group)\n    {\n        weapon.trackSprite(group);\n    }\n\n    weapon.createBullets(quantity, key, frame);\n\n    return weapon;\n\n}", "CodeBleu_score": 74.36212638713451}]}
{"instance_id": "2fca91787d6c", "generation_result": [{"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\n    if (cull) {\n        // calculate the face normal\n        var v1 = points[1].subtract(points[0]);\n        var v2 = points[2].subtract(points[0]);\n        var normal = v1.cross(v2).normalize();\n\n        // calculate the angle between the face normal and the camera normal\n        var cameraNormal = new Phaser.Point3(0, 0, -1);\n        var angle = Math.abs(cameraNormal.dot(normal));\n\n        // if the angle is less than 0.1 radians (0.59 degrees), cull the face\n        if (angle < 0.1) {\n            return;\n        }\n    }\n\n    this.moveTo(points[0].x, points[0].y);\n    this.lineTo(points[1].x, points[1].y);\n    this.lineTo(points[2].x, points[2].y);\n    this.lineTo(points[0].x, points[0].y);\n}", "CodeBleu_score": 37.509284679007365}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\n    if (cull)\n    {\n        var a = new Phaser.Vec2(points[0].x, points[0].y);\n        var b = new Phaser.Vec2(points[1].x, points[1].y);\n        var c = new Phaser.Vec2(points[2].x, points[2].y);\n\n        var ab = b.sub(a);\n        var ac = c.sub(a);\n\n        var normal = ab.cross(ac);\n\n        if (normal.z > 0)\n        {\n            this.beginFill(0xff0000);\n            this.drawTriangle(points);\n            this.endFill();\n        }\n    }\n    else\n    {\n        this.beginFill(0xff0000);\n        this.drawTriangle(points);\n        this.endFill();\n    }\n\n}", "CodeBleu_score": 42.36670354648345}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\n    if (cull) {\n        // Calculate face normal\n        var a = points[1].subtract(points[0]);\n        var b = points[2].subtract(points[0]);\n        var normal = a.cross(b);\n\n        // Culling test\n        if (normal.dot(this.game.camera.forward) > 0) {\n            this.beginFill(0xff0000);\n            this.moveTo(points[0].x, points[0].y);\n            this.lineTo(points[1].x, points[1].y);\n            this.lineTo(points[2].x, points[2].y);\n            this.lineTo(points[0].x, points[0].y);\n            this.endFill();\n        }\n    }\n    else {\n        this.beginFill(0xff0000);\n        this.moveTo(points[0].x, points[0].y);\n        this.lineTo(points[1].x, points[1].y);\n        this.lineTo(points[2].x, points[2].y);\n        this.lineTo(points[0].x, points[0].y);\n        this.endFill();\n    }\n}", "CodeBleu_score": 33.07471502069541}]}
{"instance_id": "5d227ea7f97b", "generation_result": [{"code": "checkVideoProgress: function (){\n\t    var video = this.video;\n\n    if (video.readyState > 3) {\n        // Clear the timeout:\n        clearTimeout(this.videoCheckTimeout);\n        this.videoCheckTimeout = null;\n\n        // Clear the retry counter:\n        this.videoRetries = 0;\n\n        // Set the video texture:\n        this.setVideoTexture(video);\n\n        // Play the video if it was playing before:\n        if (this.videoPlaying) {\n            this.video.play();\n        }\n    } else {\n        // Decrement the retry counter:\n        this.videoRetries--;\n\n        // If we've run out of retries, warn:\n        if (this.videoRetries < 0) {\n            console.warn('Video failed to start downloading within ' + this.videoMaxRetries + ' retries.');\n        }\n\n        // If we haven't run out of retries, set another check:\n        if (this.videoRetries >= 0) {\n            this.videoCheckTimeout = setTimeout(this.checkVideoProgress, 100);\n        }\n    }\n}", "CodeBleu_score": 32.99330881090215}, {"code": "checkVideoProgress: function (){\n\t\n    var self = this;\n\n    if (self.video.readyState === self.video.HAVE_ENOUGH_DATA) {\n\n        if (self.video.paused) {\n\n            self.video.play();\n\n        }\n\n        self.video.removeEventListener('canplaythrough', self.checkVideoProgress, false);\n\n        self.videoTexture.needsUpdate = true;\n\n    } else {\n\n        if (self.video.networkState === self.video.NETWORK_NO_SOURCE) {\n\n            self.video.load();\n\n        }\n\n        if (self.videoRetry > 0) {\n\n            self.videoRetry -= 1;\n\n            setTimeout(function () {\n\n                self.checkVideoProgress();\n\n            }, 250);\n\n        } else {\n\n            console.warn('Video failed to load!');\n\n        }\n\n    }\n\n}", "CodeBleu_score": 17.68198419206263}, {"code": "checkVideoProgress: function (){\n\t    var video = this.video;\n    if (video.readyState > 0) {\n        if (this.video.readyState === this.video.HAVE_ENOUGH_DATA) {\n            this.video.pause();\n            this.video.currentTime = 0;\n            this.video.play();\n            this.videoTexture.needsUpdate = true;\n        } else {\n            if (this.video.readyState === this.video.HAVE_CURRENT_DATA) {\n                this.video.pause();\n                this.video.currentTime = 0;\n                this.video.play();\n            }\n        }\n    } else {\n        if (this.retryCount > 0) {\n            this.retryCount--;\n            console.warn('Video is taking a long time to load. Retries remaining: ' + this.retryCount);\n            setTimeout(this.checkVideoProgress.bind(this), 1000);\n        } else {\n            console.error('Video failed to load after 30 seconds.');\n        }\n    }\n}", "CodeBleu_score": 28.465093555260545}]}
{"instance_id": "e48c3c53f00a", "generation_result": [{"code": "start: function (event, value){\n\t  if (this.state !== \"down\") {\n    this.state = \"down\";\n    this.startTime = new Date().getTime();\n    this.startValue = value;\n    this.repeatCount = 0;\n    this.lastValue = value;\n    this.lastEvent = event;\n    this.dispatchEvent(\"down\", this.state, value);\n  }\n}", "CodeBleu_score": 34.219413775815674}, {"code": "start: function (event, value){\n\t  if (this.state !== \"down\") {\n    this.state = \"down\";\n    this.timing = this.timing || {};\n    this.repeat = this.repeat || {};\n    this.timing.start = this.timing.start || Date.now();\n    this.repeat.count = this.repeat.count || 0;\n    this.repeat.last = this.repeat.last || Date.now();\n    this.modifiers = this.modifiers || {};\n    this.modifiers.alt = event && event.altKey;\n    this.modifiers.shift = event && event.shiftKey;\n    this.modifiers.ctrl = event && event.ctrlKey;\n    this.modifiers.meta = event && event.metaKey;\n    this.value = value;\n    this.dispatchEvent(\"down\", this.state, this.value);\n  }\n}", "CodeBleu_score": 41.736967745233216}, {"code": "start: function (event, value){\n\t  if (this.state !== 'down') {\n    this.state = 'down';\n    this.startTime = new Date().getTime();\n    this.startValue = value;\n    this.lastValue = value;\n    this.lastTime = this.startTime;\n    this.repeatCount = 0;\n    this.event = event;\n    this.dispatchEvent(this.onDown, this.state, value);\n  }\n}", "CodeBleu_score": 39.345211128690714}]}
{"instance_id": "a2cb3bdacb1e", "generation_result": [{"code": "onMouseDown: function (event){\n\t  this.event = event;\n  this.event.preventDefault();\n  this.event.stopPropagation();\n  if (this.callbacks.onMouseDown) {\n    this.callbacks.onMouseDown(event);\n  }\n  if (this.inputEnabled) {\n    this.initMousePointer(event);\n  }\n}", "CodeBleu_score": 37.63524581353358}, {"code": "onMouseDown: function (event){\n\t\n  // Store the mouse down event\n  this.mouseDownEvent = event;\n\n  // Prevent default behavior\n  if (this.preventMouseDownDefault) {\n    event.preventDefault();\n  }\n\n  // Invoke callback\n  if (this.onMouseDownCallback) {\n    this.onMouseDownCallback(event);\n  }\n\n  // Initialize mouse pointer\n  if (this.enableInput) {\n    this.initMousePointer(event);\n  }\n}", "CodeBleu_score": 40.9857683303038}, {"code": "onMouseDown: function (event){\n\t  this.mouseDownEvent = event;\n\n  if (this.options.preventDefault) {\n    event.preventDefault();\n  }\n\n  if (this.options.stopPropagation) {\n    event.stopPropagation();\n  }\n\n  if (this.options.onMouseDown) {\n    this.options.onMouseDown.call(this, event);\n  }\n\n  if (this.options.inputEnabled) {\n    this.initMousePointer(event);\n  }\n}", "CodeBleu_score": 50.29691135954153}]}
{"instance_id": "88538a5b66e8", "generation_result": [{"code": "onMouseUpGlobal: function (event){\n\t    if (this.onMouseUp) {\n        this.onMouseUp(event);\n    }\n}", "CodeBleu_score": 20.93605475548557}, {"code": "onMouseUpGlobal: function (event){\n\t    if (this.isDragging) {\n        this.isDragging = false;\n        this.dragEnd(event);\n    }\n\n    if (this.isMouseDown) {\n        this.isMouseDown = false;\n        this.mouseUp(event);\n    }\n\n    this.isMouseOver = false;\n    this.mouseOut(event);\n}", "CodeBleu_score": 33.94383331468763}, {"code": "onMouseUpGlobal: function (event){\n\t    // If the mouse up event is not from the same target as the mouse down event,\n    // then the mouse up event is from a mouse up event outside of the target.\n    // In this case, we do not call the mouse up callback.\n    if (this.mouseDownEvent && this.mouseDownEvent.target !== event.target) {\n        return;\n    }\n\n    // Clear the mouse down event\n    this.mouseDownEvent = null;\n\n    // If the mouse up event is from a mouse down event outside of the target,\n    // then we do not call the mouse up callback.\n    if (this.mouseUpCallback && this.mouseUpCallback(event)) {\n        return;\n    }\n\n    // If input is enabled, then the mouse up event is from a mouse up event\n    // inside of the target. In this case, we call the mouse up callback.\n    if (this.mouseUpCallback) {\n        this.mouseUpCallback(event);\n    }\n\n    // If input is enabled, then the mouse up event is from a mouse up event\n    // inside of the target. In this case, we call the mouse up callback.\n    if (this.inputEnabled) {\n        // If the mouse up event is from a mouse up event outside of the target,\n        // then we do not call the mouse up callback.\n        if (this.mouseUpCallback && this.mouseUpCallback(event)) {\n            return;\n        }\n\n        // If the mouse up event is from a mouse up event inside of the target,\n        // then we call the mouse up callback.\n        if (this.mouseUpCallback) {\n            this.mouseUpCallback(event);\n        }\n\n        // If the mouse up event is from a mouse up event inside of the target,\n        // then we call the mouse up callback.\n        if (this.mouseUpCallback) {\n            this.mouseUpCallback(event);\n        }\n\n        // If the mouse up event is from a mouse up event inside of the target,\n        // then we call the mouse up callback.\n        if (this.mouseUpCallback) {\n            this.mouseUpCallback(event);\n        }\n\n        // If the mouse up event is from a mouse up event", "CodeBleu_score": 43.56370652067484}]}
{"instance_id": "bf8b43ab3487", "generation_result": [{"code": "onTouchEnter: function (event){\n\t    if (this.game.input.enabled && this.enabled) {\n        this.input.touchEvent = event;\n        this.input.touchX = event.x;\n        this.input.touchY = event.y;\n        this.input.touchPointID = event.identifier;\n        this.input.activePointer = this.game.input.activePointer;\n        this.input.resetSpeed(event.x, event.y);\n        this.input.dirty = true;\n        this.input.justTouched = true;\n        this.input.isMoved = false;\n        this.input.justReleased = false;\n        this.input.justPressed = false;\n        this.input.pointerOut = false;\n        this.input.pointerOver = true;\n        this.input.pointerDown = false;\n        this.input.pointerUp = false;\n        this.input.repeats = 0;\n        this.input.totalRepeats = 0;\n        this.input.timeDown = event.timeStamp;\n        this.input.duration = 0;\n        this.input.holdSent = false;\n        this.input.released = false;\n        this.input.pressed = false;\n        this.input.releasedOutside = false;\n        this.input.justPressed = true;\n        this.input.justReleased = false;\n        this.input.holdTime = 0;\n        this.input.holdMaxTime = 0;\n        this.input.holdRepeatRate = 0;\n        this.input.holdRepeatTime = 0;\n        this.input.holdRepeatCounter = 0;\n        this.input.holdRepeatEvent = null;\n        this.input.holdRepeatCallback = null;\n        this.input.holdRepeatContext = null;\n        this.input.isOver = true;\n        this.input.isOut = false;\n        this.input.isDown = false;\n        this.input.isUp = false;\n        this.input.allowRepeat = false;\n        this.input.pixelPerfect = false;\n        this.input.pixelPerfectAlpha", "CodeBleu_score": 36.67721322038751}, {"code": "onTouchEnter: function (event){\n\t    if (this.game.input.enabled && this.enabled) {\n        this.game.input.currentPointer.targetObject = this;\n        this.game.input.currentPointer.rawX = event.changedTouches[0].pageX;\n        this.game.input.currentPointer.rawY = event.changedTouches[0].pageY;\n        this.game.input.currentPointer.x = this.game.input.currentPointer.rawX - this.game.input.offset.x;\n        this.game.input.currentPointer.y = this.game.input.currentPointer.rawY - this.game.input.offset.y;\n        this.game.input.currentPointer.position.x = this.game.input.currentPointer.x;\n        this.game.input.currentPointer.position.y = this.game.input.currentPointer.y;\n        this.game.input.currentPointer.isDown = true;\n        this.game.input.currentPointer.isUp = false;\n        this.game.input.currentPointer.isMove = false;\n        this.game.input.currentPointer.withinGame = true;\n        this.events.onInputOver.dispatch(this.game.input.currentPointer, event);\n        if (this.touchEnterCallback) {\n            this.touchEnterCallback.call(this.callbackContext, this.game.input.currentPointer, event);\n        }\n        if (this.game.input.currentPointer.isDown) {\n            event.preventDefault();\n        }\n    }\n}", "CodeBleu_score": 47.99126074525323}, {"code": "onTouchEnter: function (event){\n\t    if (this.game.input.enabled && this.inputEnabled) {\n        this.events.onInputOver.dispatch(this, event);\n        this.events.onInputOverHandler.dispatch(this, event);\n        if (this.touchEnterCallback) {\n            this.touchEnterCallback.call(this.callbackContext, this, event);\n        }\n        if (this.input.preventDefault) {\n            event.preventDefault();\n        }\n    }\n}", "CodeBleu_score": 46.415246340249524}]}
