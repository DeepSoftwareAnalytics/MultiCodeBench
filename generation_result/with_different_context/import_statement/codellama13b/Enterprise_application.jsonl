{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    # Get the attachment IDs from the request arguments\n    attachment_ids = request.params.getlist('attachment_ids')\n    if not attachment_ids:\n        return http.HttpResponseForbidden(_(\"No attachment selected\"))\n\n    # Verify read access rights and rules for the attachments\n    attachments = request.env['ir.attachment'].browse(attachment_ids)\n    if not attachments.exists():\n        return http.HttpResponseForbidden(_(\"No attachment selected\"))\n    attachments = attachments.read(['name', 'datas', 'mimetype'])\n\n    # Build a zip file from the attachments' content\n    zip_content = io.BytesIO()\n    with zipfile.ZipFile(zip_content, 'w') as zip_file:\n        for attachment in attachments:\n            # Skip attachments without content\n            if not attachment['datas']:\n                continue\n\n            # Add the attachment to the zip file\n            zip_file.writestr(attachment['name'], attachment['datas'])\n\n    # Prepare HTTP headers for the zip file\n    response = http.HttpResponse(zip_content.getvalue(), content_type='application/zip')\n    response['Content-Disposition'] = content_disposition('attachment', filename='%s.zip' % request.params.get('filename'))\n    response['Content-Length'] = len(zip_content.getvalue())\n    return response\n\n", "CodeBleu_score": 37.66676763607857}, {"code": "def export_zip_documents(self, **args)\n\t\n    # Retrieve attachment IDs from HTTP request arguments\n    attachment_ids = request.params.getlist('attachment_ids')\n    # Verify read access rights and rules for the attachments\n    attachments = request.env['ir.attachment'].browse(attachment_ids)\n    attachments.check_access_rights('read')\n    # Build a zip file from the attachments' content\n    zip_file = attachments.zip_files()\n    # Prepare HTTP headers for the zip file\n    response = http.send_file(\n        filename=zip_file.name,\n        file_data=zip_file.read(),\n        mimetype='application/zip',\n        mtime=attachments.filtered(lambda attachment: attachment.mimetype == 'application/zip').mapped('create_date'),\n        content_disposition=content_disposition(attachments.name, 'attachment'),\n        nocache=True,\n    )\n    # Return the zip file as an HTTP response\n    return response\n\n", "CodeBleu_score": 44.443938116143386}, {"code": "def export_zip_documents(self, **args)\n\t\n    if not request.env.is_admin():\n        raise http.Forbidden()\n\n    zip_file = request.env[\"ir.attachment\"].zip_files(\n        [\n            (\n                attachment.datas,\n                attachment.datas_fname,\n                attachment.mimetype,\n                attachment.checksum,\n            )\n            for attachment in self\n        ],\n        force_zip=True,\n    )\n    headers = {\n        \"Content-Type\": \"application/zip\",\n        \"Content-Length\": len(zip_file),\n        \"Content-Disposition\": content_disposition(\"attachment\", filename=\"attachments.zip\"),\n    }\n    return request.make_response(zip_file, headers=headers)\n\n", "CodeBleu_score": 35.115358930967666}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(CustomerPortal, self)._prepare_home_portal_values(counters)\n\n    if self.env.user.has_group('account.group_account_invoice'):\n        invoices = self.env['account.move'].sudo().search([('type', '=', 'out_invoice'), ('partner_id', '=', self.env.user.partner_id.id), ('state', 'not in', ('draft', 'cancel')), ('company_id', '=', self.env.user.company_id.id)], count=True)\n        values['invoices'] = invoices\n\n    if self.env.user.has_group('account.group_account_bill'):\n        bills = self.env['account.move'].sudo().search([('type', '=', 'out_refund'), ('partner_id', '=', self.env.user.partner_id.id), ('state', 'not in', ('draft', 'cancel')), ('company_id', '=', self.env.user.company_id.id)], count=True)\n        values['bills'] = bills\n\n    return values\n\n", "CodeBleu_score": 40.19300349849946}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(CustomerPortal, self)._prepare_home_portal_values(counters)\n    values['invoice_count'] = 0\n    values['bill_count'] = 0\n    if self.env.user.has_group('account.group_account_invoice'):\n        domain = expression.AND([[('type', 'in', ['out_invoice', 'out_refund']), ('state', '!=', 'cancel')], [('id', 'in', self.env.user.invoice_ids.ids)]])\n        values['invoice_count'] = counters.get('account.move', domain)\n    if self.env.user.has_group('account.group_account_bill'):\n        domain = expression.AND([[('type', 'in', ['in_invoice', 'in_refund']), ('state', '!=', 'cancel')], [('id', 'in', self.env.user.invoice_ids.ids)]])\n        values['bill_count'] = counters.get('account.move', domain)\n    return values\n\n", "CodeBleu_score": 39.47209802890119}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(CustomerPortal, self)._prepare_home_portal_values(counters)\n\n    if self.env['account.move'].check_access_rights('read', raise_exception=False):\n        values['invoice_count'] = counters.get('invoice', 0)\n        values['bill_count'] = counters.get('bill', 0)\n\n    return values\n\n", "CodeBleu_score": 17.341013233000442}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    CustomerPortal = request.registry['portal.customer']\n    CustomerPortal.session_update()\n\n    # retrieve the invoices\n    invoices = self._get_invoices(page=page, date_begin=date_begin, date_end=date_end, sortby=sortby, filterby=filterby)\n\n    # update the session history with the latest invoice IDs\n    self.session_set_history(invoices.ids)\n\n    # render the invoices page with the prepared values\n    values = self._prepare_portal_layout_values()\n    values.update({\n        'invoices': invoices,\n        'date_begin': date_begin,\n        'date_end': date_end,\n        'sortby': sortby,\n        'filterby': filterby,\n        'pager': portal_pager(\n            url=\"/my/invoices\",\n            url_args={'date_begin': date_begin, 'date_end': date_end, 'sortby': sortby, 'filterby': filterby},\n            total=invoices.total,\n            page=page,\n            step=self._items_per_page\n        ),\n    })\n    return request.render(\"account.portal_my_invoices\", values)\n\n", "CodeBleu_score": 34.68405896589341}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    # retrieve the invoices\n    invoices = self._get_invoices(date_begin, date_end, sortby, filterby)\n    # update the session history with the latest invoice IDs\n    self._update_history(invoices)\n    # prepare the values for the invoices page\n    values = self._prepare_portal_layout_values()\n    values.update({\n        'invoices': invoices,\n        'date_begin': date_begin,\n        'date_end': date_end,\n        'sortby': sortby,\n        'filterby': filterby,\n        'page_name': 'portal_my_invoices',\n        'searchbar_sortings': self._get_searchbar_sortings(),\n        'searchbar_filters': self._get_searchbar_filters(),\n        'pager': portal_pager(\n            url=\"/my/invoices\",\n            url_args={'date_begin': date_begin, 'date_end': date_end, 'sortby': sortby, 'filterby': filterby},\n            total=len(invoices),\n            page=page,\n            step=self._items_per_page),\n        'display_type': 'invoices',\n    })\n    return request.render(\"account.portal_my_invoices\", values)\n\n", "CodeBleu_score": 34.00054305218123}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    # retrieve the current user\n    partner = request.env.user.partner_id\n    # retrieve the invoices\n    invoices = self._search_invoices(partner, date_begin, date_end, sortby, filterby)\n    # update the session history with the latest invoice IDs\n    self._update_session_history(invoices)\n    # render the invoices page with the prepared values\n    return self._render_invoices(invoices, partner, page, sortby, filterby)\n\n", "CodeBleu_score": 22.74773879143986}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    Invoice = request.env['account.invoice'].sudo().browse(invoice_id)\n\n    if not Invoice:\n        return request.redirect('/my')\n\n    if not request.env.user.has_group('account.group_account_invoice'):\n        return request.redirect('/my')\n\n    if not Invoice.exists():\n        return request.redirect('/my')\n\n    if not Invoice.access_my_invoices():\n        return request.redirect('/my')\n\n    if Invoice.state not in ('open', 'paid', 'cancel'):\n        return request.redirect('/my')\n\n    if download:\n        if report_type == 'pdf':\n            return self._get_pdf_attachments(Invoice, access_token)\n        elif report_type == 'html':\n            return self._get_html_attachments(Invoice, access_token)\n        elif report_type == 'text':\n            return self._get_text_attachments(Invoice, access_token)\n        else:\n            return request.not_found()\n\n    # Get the invoice line with the highest sequence number\n    # to display the invoice line details.\n    invoice_line = Invoice.invoice_line_ids.sorted(key=lambda x: x.sequence)\n    if invoice_line:\n        invoice_line = invoice_line[-1]\n\n    # Get the invoice's partner\n    partner = Invoice.partner_id\n    if partner:\n        # Get the partner's bank account\n        bank_account = partner.bank_ids.filtered(lambda x: x.company_id == Invoice.company_id)\n        if bank_account:\n            bank_account = bank_account[-1]\n\n    # Get the invoice's bank account\n    bank_account = Invoice.bank_account_id\n    if not bank_account:\n        bank_account = Invoice.company_id.bank_account_id\n\n    # Get the invoice's payment terms\n    payment_term = Invoice.payment_term_id\n    if not payment_term:\n        payment_term = Invoice.company_", "CodeBleu_score": 38.18548645521974}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice = request.env['account.move'].browse(invoice_id)\n    if not invoice.exists():\n        raise MissingError(_('Invoice not found.'))\n\n    if not invoice.access_url:\n        raise AccessError(_('You are not allowed to access this document'))\n\n    if invoice.state == 'draft':\n        raise AccessError(_('You are not allowed to access this document'))\n\n    if download:\n        if report_type == 'html':\n            raise AccessError(_('You are not allowed to download this document'))\n        # If the user has the right to download the invoice, we check if there are legal documents to attach to the invoice.\n        # If there are, we zip them and return the zip file.\n        # If there are no legal documents, we return the invoice PDF file.\n        legal_docs = request.env['account.move.line'].search([\n            ('move_id', '=', invoice.id),\n            ('account_id.internal_type', '=', 'receivable'),\n            ('account_id.reconcile', '=', False),\n            ('account_id.company_id', '=', invoice.company_id.id),\n            ('account_id.company_id.country_id.code', '=', request.env['res.company']._company_default_get('country_id').code),\n            ('account_id.company_id.country_id.code', '!=', 'BE'),\n            ('account_id.company_id.country_id.code', '!=', 'NL'),\n            ('account_id.company_id.country_id.code', '!=', 'CH'),\n            ('account_id.company_id.country_id.code', '!=', 'AT'),\n            ('account_id.company_id.country_id.code', '!=', 'DE'),\n            ('account_id.company_id.country_id.code', '!=', 'FR'),\n            ('account_id.company_id.country_id.code', '!=', 'ES'),\n            ('account_id.company_id.country_id.code', '!=', 'IT'),", "CodeBleu_score": 21.59634415674817}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice = request.env['account.move'].browse(invoice_id)\n    if invoice.type != 'out_invoice':\n        raise MissingError(_(\"Invoice not found\"))\n    if not invoice.can_access_from_portal():\n        raise AccessError(_(\"You are not allowed to access this document\"))\n\n    if download:\n        legal_documents = invoice.with_context(active_test=False).mapped('invoice_line_ids.account_analytic_line_ids.analytic_account_id.legal_documents')\n        if not legal_documents:\n            raise MissingError(_(\"No document found\"))\n        if len(legal_documents) == 1:\n            legal_document = legal_documents[0]\n        else:\n            legal_document = request.env['account.legal.document'].create({\n                'name': 'Invoice %s' % invoice.name,\n                'document_type': 'invoice',\n                'access_token': access_token,\n                'company_id': invoice.company_id.id,\n                'attachment_ids': [(6, 0, legal_documents.ids)],\n            })\n\n        if report_type == 'pdf':\n            return request.env['ir.actions.report']._get_report_from_name('account.report_invoice')\\\n                .get_pdf([invoice.id], {'report_type': 'pdf', 'report_name': 'account.report_invoice'})\n        elif report_type == 'text':\n            return request.env['ir.actions.report']._get_report_from_name('account.report_invoice')\\\n                .get_pdf([invoice.id], {'report_type': 'text', 'report_name': 'account.report_invoice'})\n        elif report_type == 'html':\n            return request.env['ir.actions.report']._get_report_from_name('account.report_invoice')\\\n                .get_pdf([invoice.id], {'report_type': 'html', 'report_name': 'account.report_invoice'})\n", "CodeBleu_score": 37.81526443134459}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    if company:\n        domain = [('company_id', '=', company.id)]\n    else:\n        domain = []\n    products = self.search(domain)\n    for product in products:\n        if product.company_id.account_sale_tax_id:\n            product.sale_tax_id = product.company_id.account_sale_tax_id.id\n        if product.company_id.account_purchase_tax_id:\n            product.purchase_tax_id = product.company_id.account_purchase_tax_id.id\n    return products\n\n", "CodeBleu_score": 28.074119356173473}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    if company:\n        domain = [('company_id', '=', company.id)]\n    else:\n        domain = [('company_id', '=', False)]\n    return self.search(domain)\n\n", "CodeBleu_score": 12.991550574154864}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    # This function is copied from the module web_website_sale\n    # because it is not possible to inherit the function\n    # _get_demo_data_products from web_website_sale.models.website\n    # because it is called in the module web_website_sale.models.website\n    # before the module web_website_sale is loaded.\n    # The function _get_demo_data_products is called in the module\n    # web_website_sale.models.website in the function _get_demo_data\n    # and this function is called in the module web_website_sale.models.website\n    # in the function _get_demo_data_products.\n    # This circular dependency is not possible to solve by using\n    # the function _get_demo_data_products from the module\n    # web_website_sale.models.website in the module\n    # web_website_sale_demo_data.models.website.\n    # The function _get_demo_data_products is called in the module\n    # web_website_sale.models.website in the function _get_demo_data\n    # and this function is called in the module web_website_sale.models.website\n    # in the function _get_demo_data_products.\n    # The function _get_demo_data_products is called in the module\n    # web_website_sale.models.website in the function _get_demo_data\n    # and this function is called in the module web_website_sale.models.website\n    # in the function _get_demo_data_products.\n    # This circular dependency is not possible to solve by using\n    # the function _get_demo_data_products from the module\n    # web_website_sale.models.website in the module\n    # web_website_sale_demo_data.models.website.\n    # The function _get_demo_data_products is called in the module\n    # web_website_sale.models.website in the function _get_demo_data\n    # and this function is called in the module web_website_sale.models.website\n    # in the function _get_demo_data", "CodeBleu_score": 1.105006105006105}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env.ref(xml_id, False, company.id)\n    if not account:\n        domain = [('company_id', '=', company.id), ('type', '=', account_type)]\n        account = self.env['account.account'].search(domain, limit=1)\n    return account\n\n", "CodeBleu_score": 35.31411079387936}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env['account.account'].search([('company_id', '=', company.id), ('id', '=', xml_id)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id', '=', account_type)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    return account\n\n", "CodeBleu_score": 45.475767435138486}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account_id = self.env.ref(xml_id, raise_if_not_found=False)\n    if not account_id:\n        # Search for an account matching the account_type within the company's domain\n        account_ids = self.env['account.account'].search([('company_id', '=', company.id), ('type', '=', account_type)])\n        if account_ids:\n            account_id = account_ids[0]\n    if not account_id:\n        # Return the first account within the company's domain\n        account_ids = self.env['account.account'].search([('company_id', '=', company.id)])\n        if account_ids:\n            account_id = account_ids[0]\n    return account_id\n\n", "CodeBleu_score": 39.991679819538376}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    current_year_earning_accounts = self.env['account.account'].search([\n        ('company_id', 'in', self.env.user.company_ids.ids),\n        ('user_type_id', '=', self.env.ref('account.data_account_type_current_year_earnings').id)\n    ])\n    if len(current_year_earning_accounts) > 1:\n        raise ValidationError(_('There can be only one account of type \"Current Year Earnings\" for each company.'))\n\n", "CodeBleu_score": 21.75814307245167}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    if self.env.context.get('check_account_type_unique_current_year_earning'):\n        current_year_earning_accounts = self.search([('type', '=', 'current_year_earnings')])\n        if len(current_year_earning_accounts) > 1:\n            raise ValidationError(\n                _('There can only be one account with the \"Current Year Earnings\" type for each company.')\n            )\n\n", "CodeBleu_score": 29.59693351728524}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    if self.env.context.get('check_account_type_unique_current_year_earning'):\n        return\n    self.env.context['check_account_type_unique_current_year_earning'] = True\n    current_year_earnings = self.env['account.account'].search([('company_id', 'in', self.env.user.company_ids.ids), ('user_type_id', '=', self.env.ref('account.data_account_type_current_year_earnings').id)])\n    if len(current_year_earnings) > 1:\n        raise ValidationError(_(\"There is more than one 'Current Year Earnings' account for the current company. Please remove the extra accounts.\"))\n\n", "CodeBleu_score": 29.178426136022605}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self._context.get('partner_id'):\n        # search for accounts ordered by frequency for a partner\n        return self._name_search_favorites(name, domain, operator, limit, order)\n    return super(Account, self)._name_search(name, domain, operator, limit, order)\n\n", "CodeBleu_score": 19.303017430074323}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if name and operator in ('=', 'ilike'):\n        name = name.strip()\n\n    if not name:\n        if self._context.get('favorite_only'):\n            return self._search_favorites(domain, order)\n        elif self._context.get('frequent_only'):\n            return self._search_frequents(domain, order)\n        elif self._context.get('recent_only'):\n            return self._search_recents(domain, order)\n        elif self._context.get('sale_order_only'):\n            return self._search_sale_orders(domain, order)\n        elif self._context.get('purchase_order_only'):\n            return self._search_purchase_orders(domain, order)\n        elif self._context.get('invoice_only'):\n            return self._search_invoices(domain, order)\n        elif self._context.get('payment_only'):\n            return self._search_payments(domain, order)\n        elif self._context.get('supplier_only'):\n            return self._search_suppliers(domain, order)\n        elif self._context.get('customer_only'):\n            return self._search_customers(domain, order)\n        elif self._context.get('product_only'):\n            return self._search_products(domain, order)\n        elif self._context.get('account_only'):\n            return self._search_accounts(domain, order)\n        elif self._context.get('account_type_only'):\n            return self._search_account_types(domain, order)\n        elif self._context.get('account_move_only'):\n            return self._search_account_moves(domain, order)\n        elif self._context.get('account_move_line_only'):\n            return self._search_account_move_lines(domain, order)\n        elif self._context.get('account_invoice_only'):\n            return self._search_account_invoices(domain, order)\n        elif self._context.get('account_invoice_line_only'):\n            return self._search_account_invoice_lines(domain, order)\n        elif self", "CodeBleu_score": 23.253145851695876}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        if self._context.get('partner_id') and self._context.get('account_type'):\n            return self._search_favorites(domain, order, limit)\n        else:\n            return super(Account, self)._name_search(name, domain, operator, limit, order)\n\n    domain = expression.AND([[('name', operator, name)], domain or []])\n    return self._search(domain, limit=limit, order=order)\n\n", "CodeBleu_score": 33.761826901686646}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    if not new:\n        return\n\n    if not self.env.context.get('_copy_translations'):\n        return\n\n    if not self.name:\n        return\n\n    if not new.name:\n        return\n\n    # Get the fields that need to be excluded\n    excluded_fields = self._get_excluded_fields(excluded)\n\n    # Get the fields that need to be translated\n    fields_to_translate = self._get_fields_to_translate()\n\n    # Get the new name pattern if it exists\n    new_name_pattern = self._get_new_name_pattern()\n\n    # Get the new name if it exists\n    new_name = self._get_new_name(new)\n\n    # Get the new name format if it exists\n    new_name_format = self._get_new_name_format()\n\n    # Get the new name fields if it exists\n    new_name_fields = self._get_new_name_fields()\n\n    # Get the new name fields if it exists\n    new_name_field_values = self._get_new_name_field_values()\n\n    # Get the new name field values if it exists\n    new_name_field_values_to_translate = self._get_new_name_field_values_to_translate()\n\n    # Get the new name field values if it exists\n    new_name_field_values_to_translate_by_lang = self._get_new_name_field_values_to_translate_by_lang()\n\n    # Get the new name field values if it exists\n    new_name_field_values_to_translate_by_lang_and_lang = self._get_new_name_field_values_to_translate_by_lang_and_lang()\n\n    # Get the new name field values if it exists\n    new_name_field_values_to_translate_by_lang_and_lang_and_lang = self._get_new_name_field_values_to_translate_by_lang_and_lang_and_lang()\n\n    # Get the new name field values if it exists\n    new_name_field_values_", "CodeBleu_score": 31.54167810887245}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    if not new:\n        return\n    if not self.env.context.get('lang'):\n        return\n    lang = self.env.context['lang']\n    if not lang:\n        return\n    if not self.env.context.get('inherit_translations'):\n        return\n    if not self.env.context.get('inherit_translations_from'):\n        return\n\n    # get the list of fields to exclude\n    excluded = list(excluded) + ['name']\n\n    # get the list of fields to copy\n    fields_to_copy = [f for f in self.fields_get() if f not in excluded]\n\n    # get the list of fields to copy for the new record\n    fields_to_copy_new = [f for f in new.fields_get() if f not in excluded]\n\n    # get the list of fields to copy for the current record\n    fields_to_copy_current = [f for f in self.fields_get() if f not in excluded]\n\n    # get the list of fields to copy for the current record and the new record\n    fields_to_copy_both = [f for f in fields_to_copy_current if f in fields_to_copy_new]\n\n    # get the list of fields to copy for the current record and not the new record\n    fields_to_copy_current_not_new = [f for f in fields_to_copy_current if f not in fields_to_copy_new]\n\n    # get the list of fields to copy for the new record and not the current record\n    fields_to_copy_new_not_current = [f for f in fields_to_copy_new if f not in fields_to_copy_current]\n\n    # get the list of fields to copy for the current record and the new record and that are not translated\n    fields_to_copy_both_not_translated = [f for f in fields_to_copy_both if f not in self._translated_fields]\n\n    # get the list of fields to copy for the current record and the new record and that are translated\n    fields_to_copy_both_translated = [f", "CodeBleu_score": 31.330767446889574}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    if self.env.context.get('lang'):\n        lang = self.env.context['lang']\n    else:\n        lang = self.env.user.lang\n    if self.env.context.get('translation_type'):\n        translation_type = self.env.context['translation_type']\n    else:\n        translation_type = 'field'\n    # get the translations for the current record\n    translations = self.env['ir.translation'].search([\n        ('name', '=', self.name),\n        ('lang', '=', lang),\n        ('type', '=', translation_type),\n        ('res_id', '=', self.id),\n    ]).read(['value'])\n    # get the new record's name\n    new_name = new.name\n    # get the new record's name pattern\n    new_name_pattern = new.env['ir.translation']._get_name_pattern(new_name)\n    # if the new record's name follows a specific pattern,\n    # update the translations for the name field in the cache\n    if new_name_pattern:\n        # get the translations for the new record's name\n        new_translations = self.env['ir.translation'].search([\n            ('name', '=', new_name),\n            ('lang', '=', lang),\n            ('type', '=', translation_type),\n            ('res_id', '=', new.id),\n        ]).read(['value'])\n        # update the translations for the name field in the cache\n        for translation in new_translations:\n            if translation['name'] == new_name:\n                translation['value'] = new_name_pattern.format(*translation['value'].split('", "CodeBleu_score": 30.516564950964625}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    action = self.env.ref('account.action_move_out_invoice').read()[0]\n    action['domain'] = [('type', '=', 'out_invoice'), ('sale_id', '=', self.id)]\n    action['context'] = {\n        'search_default_sale_id': self.id,\n        'default_sale_id': self.id,\n        'search_default_analytic_account_id': self.analytic_account_id.id,\n        'default_analytic_account_id': self.analytic_account_id.id,\n    }\n    return action\n\n", "CodeBleu_score": 22.561468033439862}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    action = self.env.ref('account.action_move_out_invoice').read()[0]\n    action['context'] = {\n        'default_type': 'out_invoice',\n        'default_journal_id': self.journal_id.id,\n        'default_partner_id': self.partner_id.id,\n        'default_date_invoice': self.date_order,\n        'default_invoice_payment_term_id': self.fiscal_position_id.invoice_payment_term_id.id,\n        'default_invoice_date_due': self.invoice_date_due,\n        'default_invoice_origin': self.name,\n        'default_invoice_payment_ref': self.invoice_payment_ref,\n        'default_invoice_partner_bank_id': self.partner_bank_id.id,\n        'default_invoice_partner_bank_account_id': self.partner_bank_id.bank_account_id.id,\n        'default_invoice_partner_bank_account_name': self.partner_bank_id.bank_account_id.name,\n        'default_invoice_partner_bank_account_number': self.partner_bank_id.bank_account_id.acc_number,\n        'default_invoice_partner_bank_account_iban': self.partner_bank_id.bank_account_id.iban,\n        'default_invoice_partner_bank_account_swift': self.partner_bank_id.bank_account_id.swift_code,\n        'default_invoice_partner_bank_account_bank_name': self.partner_bank_id.bank_account_id.bank_name,\n        'default_invoice_partner_bank_account_country': self.partner_bank_id.bank_account_id.country_id.name,\n        'default_invoice_partner_bank_account_country_code': self.partner_bank_id.bank_account_id.", "CodeBleu_score": 20.76937594386986}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    account_move_line_model = self.env['account.move.line']\n    invoice_ids = account_move_line_model._search_invoices_to_invoice(self.id)\n    if not invoice_ids:\n        raise UserError(_(\"There is no invoice to invoice.\"))\n    action = {\n        'name': _('Invoice'),\n        'domain': [('id', 'in', invoice_ids)],\n        'view_mode': 'tree,form',\n        'res_model': 'account.move',\n        'type': 'ir.actions.act_window',\n        'context': {\n            'search_default_invoice_ids': invoice_ids,\n            'default_invoice_ids': invoice_ids,\n        },\n    }\n    return action\n\n", "CodeBleu_score": 28.71607340141198}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    action = self.env.ref('account.action_move_in_invoice').read()[0]\n    action['domain'] = [('move_type', '=', 'in_invoice'), ('purchase_id', '=', self.id)]\n    action['context'] = {\n        'default_move_type': 'in_invoice',\n        'default_purchase_id': self.id,\n        'search_default_purchase_id': self.id,\n        'default_journal_id': self.journal_id.id,\n        'search_default_journal_id': self.journal_id.id,\n        'default_company_id': self.company_id.id,\n        'search_default_company_id': self.company_id.id,\n    }\n    action['name'] = _('Vendor Bill')\n    return action\n\n", "CodeBleu_score": 29.561762369218496}, {"code": "def action_view_vendor_bill(self)\n\t\n    action = {\n        \"name\": _(\"Vendor Bills\"),\n        \"type\": \"ir.actions.act_window\",\n        \"res_model\": \"account.move.line\",\n        \"view_mode\": \"tree,form\",\n        \"domain\": [(\"move_id.purchase_id\", \"=\", self.id)],\n        \"context\": {\"default_move_type\": \"in_invoice\", \"create\": False},\n    }\n    return action\n\n", "CodeBleu_score": 17.319618846096127}, {"code": "def action_view_vendor_bill(self)\n\t\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['domain'] = [('move_type', '=', 'in_invoice'), ('move_id.purchase_id', '=', self.id)]\n    action['context'] = {\n        'default_move_type': 'in_invoice',\n        'default_purchase_id': self.id,\n        'default_move_id': self.move_id.id,\n        'default_journal_id': self.move_id.journal_id.id,\n        'default_company_id': self.move_id.company_id.id,\n        'default_currency_id': self.move_id.currency_id.id,\n        'default_date_invoice': self.date_invoice,\n        'default_invoice_origin': self.move_id.name,\n        'default_invoice_date': self.date_invoice,\n        'default_invoice_payment_term_id': self.invoice_payment_term_id.id,\n        'default_invoice_partner_bank_account_id': self.invoice_partner_bank_account_id.id,\n        'default_invoice_partner_bank_id': self.invoice_partner_bank_id.id,\n        'default_invoice_partner_id': self.partner_id.id,\n        'default_invoice_reference': self.reference,\n        'default_tax_ids': [(6, 0, self.tax_id.ids)],\n        'default_analytic_account_id': self.analytic_account_id.id,\n        'default_invoice_payment_ref': self.payment_reference,\n        'default_invoice_payment_date': self.payment_date,\n        'default_invoice_payment_method_id': self.payment_method_id.id,\n        'default_invoice_payment_type': self.payment_type,\n        'default_invoice_payment_schedule': self.payment_schedule,\n       ", "CodeBleu_score": 24.725899034306146}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t\n    if self.env.context.get('attachment_ids'):\n        del values['attachment_ids']\n    with self.check_attachments(values):\n        return super(MailMessage, self).write(values)\n\n", "CodeBleu_score": 25.89122836930941}, {"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        self._remove_attachment_ids_from_values(values)\n\n    with self._check_attachments():\n        return super(MailMessage, self).write(values)\n\n", "CodeBleu_score": 30.619269338631515}, {"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        values.pop('attachment_ids')\n    with self.check_attachments():\n        return super(MailMessage, self).write(values)\n\n", "CodeBleu_score": 31.332073744960926}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    if self.env.context.get('skip_bank_account_creation'):\n        return self.env['res.partner.bank'].sudo()\n\n    if not self.env.context.get('force_company'):\n        raise UserError(_('Missing company ID in context'))\n\n    company_id = self.env.context.get('force_company')\n    partner_id = self.env.context.get('force_partner')\n    account_number = self.env.context.get('force_account_number')\n    account_type = self.env.context.get('force_account_type')\n    bank_id = self.env.context.get('force_bank_id')\n    currency_id = self.env.context.get('force_currency_id')\n    bank_account_id = self.env.context.get('force_bank_account_id')\n\n    if not account_number:\n        return self.env['res.partner.bank'].sudo()\n\n    account_number = sanitize_account_number(account_number)\n\n    if bank_account_id:\n        return self.env['res.partner.bank'].browse(bank_account_id)\n\n    bank_account = self.env['res.partner.bank'].search([\n        ('acc_number', '=', account_number),\n        ('partner_id', '=', partner_id),\n        ('company_id', '=', company_id),\n        ('bank_id', '=', bank_id),\n        ('currency_id', '=', currency_id),\n        ('acc_type', '=', account_type),\n    ], limit=1)\n\n    if bank_account:\n        return bank_account\n\n    return self.env['res.partner.bank'].create({\n        'acc_number': account_number,\n        'partner_id': partner_id,\n        'bank_id': bank_id,\n        'acc_type': account_type,\n        'currency_id': currency_id,\n        'company_id': company_id,\n    })\n\n", "CodeBleu_score": 40.005948516681116}, {"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    if self.env.context.get('skip_bank_account_creation', False):\n        return self.env['res.partner.bank']\n\n    return self.env['res.partner.bank'].search([\n        ('acc_number', '=', self.acc_number),\n        ('partner_id', '=', self.partner_id.id),\n    ], limit=1)\n\n", "CodeBleu_score": 21.33225994762498}, {"code": "def _find_or_create_bank_account(self)\n\t\n    # Check if the bank account creation should be skipped\n    if self.env.context.get('skip_bank_account_creation'):\n        return self.env['res.partner.bank']\n\n    # Find or create the bank account\n    bank_account = self.env['res.partner.bank']\n    if self.bank_account_id:\n        bank_account = self.bank_account_id\n    elif self.partner_id and self.bank_account_number:\n        bank_account = self.env['res.partner.bank'].search([('acc_number', '=', self.bank_account_number), ('partner_id', '=', self.partner_id.id)], limit=1)\n        if not bank_account:\n            bank_account = self.env['res.partner.bank'].create({\n                'partner_id': self.partner_id.id,\n                'acc_number': self.bank_account_number,\n                'acc_holder_name': self.partner_id.name,\n                'company_id': self.partner_id.company_id.id,\n            })\n    return bank_account.filtered(lambda b: b.company_id == self.company_id)\n\n", "CodeBleu_score": 55.31385372462434}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    with self.env.cr.savepoint():\n        # retrieve the company currency and the journal currency\n        company_currency = self.env.company.currency_id\n        journal_currency = self.env.context.get('journal_currency')\n\n        # retrieve the exchange rate between the company currency and the journal currency\n        journal_currency_rate = self.env['res.currency'].browse(journal_currency).rate\n        company_currency_rate = self.env['res.currency'].browse(company_currency).rate\n\n        # retrieve the exchange rate between the journal currency and the transaction currency\n        transaction_currency_rate = self.env['res.currency'].browse(currency).rate\n\n        # retrieve the exchange rate between the transaction currency and the company currency\n        company_currency_rate_transaction = transaction_currency_rate * journal_currency_rate\n\n        # compute the transaction amount and the journal amount\n        transaction_amount = amount_currency\n        journal_amount = transaction_amount * company_currency_rate_transaction\n\n        # compute the company amount\n        company_amount = journal_amount * company_currency_rate\n\n        # adjust the transaction amount and the balance if the transaction currency is not the company currency\n        if currency != company_currency:\n            if balance == 'debit':\n                transaction_amount = transaction_amount * -1\n            if balance == 'credit':\n                journal_amount = journal_amount * -1\n\n        return {\n            'transaction_amount': transaction_amount,\n            'journal_amount': journal_amount,\n            'company_amount': company_amount,\n        }\n\n", "CodeBleu_score": 29.133502378425536}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    # Ensure a single record context\n    self = self.with_context(active_test=False)\n    # Get relevant accounting amounts and currencies\n    journal_currency = self.journal_id.currency_id\n    company_currency = self.company_id.currency_id\n    # Compute transaction amount and journal amount\n    if currency == company_currency:\n        transaction_amount = amount_currency\n        journal_amount = amount_currency\n    elif currency == journal_currency:\n        transaction_amount = amount_currency\n        journal_amount = amount_currency\n    elif currency == self.company_id.currency_id:\n        transaction_amount = balance\n        journal_amount = balance\n    else:\n        transaction_amount = balance\n        journal_amount = balance\n    # Compute company amount\n    if currency == company_currency:\n        company_amount = journal_amount\n    elif currency == journal_currency:\n        company_amount = journal_amount\n    elif currency == self.company_id.currency_id:\n        company_amount = transaction_amount\n    else:\n        company_amount = transaction_amount\n    return {\n        \"transaction_amount\": transaction_amount,\n        \"journal_amount\": journal_amount,\n        \"company_amount\": company_amount,\n    }\n\n", "CodeBleu_score": 22.514177244812593}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    # Ensure a single record context\n    with self.env.cr.savepoint():\n        # Retrieve relevant accounting amounts and currencies\n        if self.type in ('in_invoice', 'in_refund'):\n            st_line_rate = self.invoice_line_ids.filtered(lambda x: x.account_id.internal_group == 'receivable').mapped('currency_id').mapped('rate')\n            st_line_rate = st_line_rate and st_line_rate[0] or 1.0\n            company_currency = self.company_id.currency_id\n            journal_currency = self.journal_id.currency_id\n            if currency == company_currency:\n                transaction_amount = amount_currency\n                journal_amount = amount_currency\n                company_amount = amount_currency\n            elif currency == journal_currency:\n                transaction_amount = amount_currency\n                journal_amount = amount_currency\n                company_amount = amount_currency * st_line_rate\n            elif currency == self.env.user.company_id.currency_id:\n                transaction_amount = amount_currency\n                journal_amount = amount_currency * st_line_rate\n                company_amount = amount_currency * st_line_rate\n            else:\n                transaction_amount = amount_currency * st_line_rate\n                journal_amount = amount_currency * st_line_rate\n                company_amount = amount_currency * st_line_rate * st_line_rate\n        else:\n            st_line_rate = self.invoice_line_ids.filtered(lambda x: x.account_id.internal_group == 'payable').mapped('currency_id').mapped('rate')\n            st_line_rate = st_line_rate and st_line_rate[0] or 1.0\n            company_currency = self.company_id.currency_id\n            journal_currency = self.journal_id.currency_id\n            if currency == company_currency:\n                transaction_amount = amount_currency\n                journal_amount = amount_currency\n                company_amount = amount_currency\n            elif currency == journal_currency:\n                transaction_", "CodeBleu_score": 30.309298576871985}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids = []\n        if journal.type in ['bank', 'cash']:\n            journal.outbound_payment_method_line_ids = self.env['account.payment.method'].search([('payment_type', '=', 'outbound')]).with_context(journal_id=journal.id)._compute_outbound_payment_method_line_ids()\n\n", "CodeBleu_score": 33.90305851145234}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        if journal.type in ('bank', 'cash'):\n            journal.outbound_payment_method_ids = []\n            for payment_method in journal.default_outbound_payment_method_ids:\n                journal.outbound_payment_method_ids.append((0, 0, payment_method.to_dict()))\n\n", "CodeBleu_score": 30.80173341953231}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        if journal.type in ['bank', 'cash']:\n            journal.clear_outbound_payment_method_line_ids()\n            journal.add_outbound_payment_method_line_ids()\n\n", "CodeBleu_score": 18.333497062373397}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t\n    for move in self:\n        if not move.date:\n            if move.invoice_date:\n                if not move.is_sale_document():\n                    move.date = move._get_accounting_date(move.invoice_date)\n            else:\n                move.date = fields.Date.today()\n\n", "CodeBleu_score": 23.680168017733024}, {"code": "def _compute_date(self)\n\t\n    if not self.invoice_date and not self.date:\n        self.date = fields.Datetime.now()\n    elif self.invoice_date:\n        if self.move_type not in (\"out_invoice\", \"in_invoice\"):\n            tax_report_date = self.company_id.tax_report_date\n            if tax_report_date == \"tax_excluded\":\n                self.date = self.invoice_date\n            elif tax_report_date == \"tax_included\":\n                self.date = self.invoice_date + relativedelta(days=1)\n            elif tax_report_date == \"tax_included_cash_basis\":\n                self.date = self.invoice_date + relativedelta(days=2)\n        else:\n            self.date = self.invoice_date\n\n", "CodeBleu_score": 26.84190007724854}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if move.invoice_date:\n            if not move.is_sale_document():\n                date_accounting = move.invoice_date + relativedelta(days=move.company_id.tax_calculation_rounding_method.rounding)\n                if move.date and move.date != date_accounting:\n                    move.date = date_accounting\n                    move.posted = False\n                    move._check_move_validity()\n        elif not move.date:\n            move.date = fields.Date.today()\n\n", "CodeBleu_score": 37.29352605338093}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.invoice_payment_term_id:\n            continue\n        if move.type in (\"in_invoice\", \"out_refund\"):\n            move.invoice_payment_term_id = move.partner_id.payment_term_id.id\n        elif move.type in (\"in_refund\", \"out_invoice\"):\n            move.invoice_payment_term_id = move.partner_id.supplier_payment_term_id.id\n\n", "CodeBleu_score": 30.6263845357937}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.type in (\"out_invoice\", \"out_refund\"):\n            if move.partner_id.property_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_payment_term_id.id\n            else:\n                move.invoice_payment_term_id = False\n        elif move.type in (\"in_invoice\", \"in_refund\"):\n            if move.partner_id.property_supplier_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id.id\n            else:\n                move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 41.80002528067226}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    if self.type in (\"out_invoice\", \"out_refund\"):\n        if self.partner_id.payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.payment_term_id.id\n        else:\n            self.invoice_payment_term_id = False\n    elif self.type in (\"in_invoice\", \"in_refund\"):\n        if self.partner_id.payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.payment_term_id.id\n        else:\n            self.invoice_payment_term_id = False\n    else:\n        self.invoice_payment_term_id = False\n\n", "CodeBleu_score": 32.7962981033207}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    tax_groups = self.env['account.tax.group'].search([('company_id', '=', self.env.company.id)])\n    tax_groups_by_country = defaultdict(list)\n    tax_groups_by_company = defaultdict(list)\n    for tax_group in tax_groups:\n        tax_groups_by_country[tax_group.country_id].append(tax_group)\n        tax_groups_by_company[tax_group.company_id].append(tax_group)\n\n    tax_groups_by_country_and_company = defaultdict(list)\n    for tax in self:\n        if tax.company_id:\n            tax_groups = tax_groups_by_country[tax.country_id]\n            for tax_group in tax_groups:\n                if tax_group.company_id == tax.company_id:\n                    tax_groups_by_country_and_company[tax.country_id].append(tax_group)\n        else:\n            tax_groups = tax_groups_by_company[tax.company_id]\n            for tax_group in tax_groups:\n                if tax_group.country_id == tax.country_id:\n                    tax_groups_by_country_and_company[tax.country_id].append(tax_group)\n\n    for tax in self:\n        tax_groups = tax_groups_by_country_and_company[tax.country_id]\n        if tax_groups:\n            tax.tax_group_id = tax_groups[0]\n        else:\n            tax.tax_group_id = tax_groups_by_country[tax.country_id][0]\n", "CodeBleu_score": 25.142574239674932}, {"code": " def _compute_tax_group_id(self)\n\t\n    tax_group_ids = self.env['account.tax.group'].search([])\n    tax_groups = {}\n    for tax_group in tax_group_ids:\n        key = (tax_group.country_id, tax_group.company_id)\n        tax_groups.setdefault(key, []).append(tax_group)\n    for tax in self:\n        key = (tax.country_id, tax.company_id)\n        tax_groups_for_tax = tax_groups.get(key, [])\n        if tax_groups_for_tax:\n            tax_group_id = tax_groups_for_tax[0]\n        else:\n            tax_group_id = tax_groups.get((None, tax.company_id), [])[0]\n        tax.tax_group_id = tax_group_id\n\n", "CodeBleu_score": 25.44269617716084}, {"code": " def _compute_tax_group_id(self)\n\t\n    # group taxes by country and company\n    taxes_by_country_company = defaultdict(list)\n    for tax in self:\n        taxes_by_country_company[(tax.country_id, tax.company_id)].append(tax)\n\n    # assign a tax group to each tax\n    for taxes in taxes_by_country_company.values():\n        for tax in taxes:\n            # search for a matching tax group\n            matching_tax_group = self.env['account.tax.group'].search([\n                ('company_id', '=', tax.company_id.id),\n                ('country_group_id.country_ids', 'in', [tax.country_id.id]),\n                ('country_group_id.company_ids', 'in', [tax.company_id.id]),\n            ], order='country_group_id desc', limit=1)\n            if matching_tax_group:\n                tax.tax_group_id = matching_tax_group.id\n            else:\n                # search for a tax group without a country\n                matching_tax_group = self.env['account.tax.group'].search([\n                    ('company_id', '=', tax.company_id.id),\n                    ('country_group_id', '=', False),\n                ], order='id desc', limit=1)\n                if matching_tax_group:\n                    tax.tax_group_id = matching_tax_group.id\n                else:\n                    # create a new tax group\n                    tax.tax_group_id = self.env['account.tax.group'].create({\n                        'name': _('Taxes for %s') % tax.country_id.name,\n                        'country_group_id': tax.country_id.country_group_id.id,\n                        'company_id': tax.company_id.id,\n                    }).id\n\n    # set the tax group of the taxes of the tax groups\n    for tax_group in self.env['account.tax.group'].search([]):\n        tax_group.tax_group_id = tax_group.id\n", "CodeBleu_score": 35.68658635117556}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n\n    # Set database in session\n    self.session.get(url + \"/\" + db)\n\n    # Prepare POST data\n    post_data = {\n        \"login\": login,\n        \"password\": password,\n        \"db\": db,\n        \"force\": force,\n    }\n\n    # Read module file\n    with open(module_file, \"rb\") as f:\n        module_data = f.read()\n\n    # Upload module file\n    response = self.session.post(\n        url + \"/base_import_module/login_upload\", data=post_data, files={\"file\": module_data}\n    )\n\n    # Check response\n    if response.status_code != 200:\n        raise Exception(\n            \"Error uploading module file. Response code: \"\n            + str(response.status_code)\n            + \" Response text: \"\n            + response.text\n        )\n\n    return response.text\n\n", "CodeBleu_score": 46.77036669678506}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set database in session\n    self.session.get(url + \"login\", auth=(login, password))\n    # Prepare POST data\n    data = {\n        \"db\": db,\n        \"force\": force,\n    }\n    # Read module file\n    with open(module_file, \"rb\") as f:\n        module_file = f.read()\n    # Upload module\n    r = self.session.post(url + \"base_import_module/login_upload\", data=data, files={\"module_file\": module_file})\n    if r.status_code != 200:\n        raise Exception(\"Upload failed: \" + r.text)\n    return r.text\n\n", "CodeBleu_score": 39.65197787909081}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session by accessing the login URL\n    self.set_database(url, login, password, db)\n\n    # Prepare the POST request data\n    data = {\n        \"login\": login,\n        \"password\": password,\n        \"db\": db,\n        \"force\": force,\n    }\n\n    # Read the module file\n    with open(module_file, \"rb\") as f:\n        module_file = f.read()\n\n    # Upload the module file to the server's 'base_import_module/login_upload' endpoint\n    response = requests.post(\n        url + \"/base_import_module/login_upload\", data=data, files={\"file\": module_file}\n    )\n\n    # If the server does not have the required module installed or is outdated, it raises an exception\n    if response.status_code == 400:\n        raise Exception(response.text)\n\n    return response.text\n\n", "CodeBleu_score": 39.9262171061008}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n\n    # Retrieve configuration settings\n    db_name = os.environ.get('DB_NAME')\n    overwrite = os.environ.get('OVERWRITE')\n    if not db_name:\n        raise ValueError(\"Database name must be provided.\")\n    if not overwrite:\n        raise ValueError(\"Overwrite must be provided.\")\n\n    # Create a new database registry\n    registry = odoo.registry(db_name)\n    with registry.cursor() as cr:\n        # Initialize a TranslationImporter\n        importer = TranslationImporter(cr, registry, overwrite)\n        # Load translation files\n        importer.load_translation_files()\n        # Save translations\n        importer.save_translations()\n\n", "CodeBleu_score": 42.42665218578725}, {"code": "def import_translation()\n\t\n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n    logging.info(\"Starting translation import.\")\n    # Retrieve configuration settings for the database name and whether to overwrite existing translations.\n    db_name = os.environ.get(\"ODOO_DB_NAME\")\n    overwrite = os.environ.get(\"ODOO_IMPORT_OVERWRITE\")\n    if overwrite is None:\n        overwrite = False\n    else:\n        overwrite = overwrite.lower() in [\"true\", \"1\"]\n\n    # Create a new database registry and use a cursor to initialize a TranslationImporter.\n    # The importer loads translation files based on the specified configuration and saves the translations, with the option to overwrite existing ones.\n    registry = odoo.registry(db_name)\n    with registry.cursor() as cr:\n        importer = odoo.tools.translation.TranslationImporter(cr, db_name)\n        importer.load_modules()\n        importer.load_translations(overwrite=overwrite)\n\n", "CodeBleu_score": 46.41735521439472}, {"code": "def import_translation()\n\t\n    # Retrieve configuration settings\n    db_name = os.environ.get('DB_NAME')\n    overwrite = os.environ.get('OVERWRITE')\n    if overwrite is None:\n        overwrite = False\n    else:\n        overwrite = bool(overwrite)\n\n    # Create a new database registry\n    db = odoo.registry(db_name)\n\n    # Use a cursor to initialize a TranslationImporter\n    with db.cursor() as cr:\n        importer = TranslationImporter(cr, overwrite)\n\n        # Load translation files\n        importer.load_csv_files()\n\n        # Save translations\n        importer.save_translations()\n\n", "CodeBleu_score": 37.906754955026855}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    # First, check if the child node already exists\n    for child in self.children:\n        if child.name == name:\n            return child\n\n    # If it doesn't, create a new node\n    child = Node(name, info)\n\n    # Set the depth\n    child.depth = self.depth + 1\n\n    # Inherit certain attributes from the parent\n    if self.module:\n        child.module = self.module\n    if self.model:\n        child.model = self.model\n    if self.record_id:\n        child.record_id = self.record_id\n\n    # Append the child to the parent's children\n    self.children.append(child)\n\n    # Sort the children by name\n    self.children.sort(key=lambda x: x.name)\n\n    return child\n\n", "CodeBleu_score": 44.11092309518704}, {"code": "def add_child(self, name, info)\n\t\n    # If the child already exists, return it.\n    for child in self.children:\n        if child.name == name:\n            return child\n\n    # Otherwise, create a new node and add it to the children list.\n    child = Node(name, info, self.depth + 1)\n    child.parent = self\n    self.children.append(child)\n\n    # Inherit certain attributes from the parent.\n    if self.has_content:\n        child.has_content = True\n    if self.has_children:\n        child.has_children = True\n    if self.has_siblings:\n        child.has_siblings = True\n\n    # Sort the children by name.\n    self.children.sort(key=lambda n: n.name)\n\n    return child\n\n", "CodeBleu_score": 34.45855011050437}, {"code": "def add_child(self, name, info)\n\t\n    if not name:\n        raise ValueError('name is required')\n\n    if not info:\n        raise ValueError('info is required')\n\n    # If the node already exists, return it.\n    for child in self.children:\n        if child.name == name:\n            return child\n\n    # Create the new node.\n    child = Node(name, info, self.depth + 1)\n\n    # Inherit attributes from the parent.\n    for attr in self.inherited_attributes:\n        if hasattr(self, attr):\n            setattr(child, attr, getattr(self, attr))\n\n    # Append the new node to the children list.\n    self.children.append(child)\n\n    # Sort the children by name.\n    self.children.sort(key=lambda child: child.name)\n\n    # Return the new node.\n    return child\n\n", "CodeBleu_score": 43.376522253912206}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"dates\": dates,\n        \"account\": account,\n        \"account_name\": account.account_name,\n        \"root_type\": account.root_type,\n        \"has_value\": False,\n        \"balances\": [0] * len(dates),\n        \"has_in_balance\": False,\n        \"in_balances\": [0] * len(dates),\n        \"has_out_balance\": False,\n        \"out_balances\": [0] * len(dates),\n    }\n\n    for entry in gl_entries:\n        date_index = dates.index(entry.posting_date)\n        if entry.is_opening == \"Yes\":\n            result[\"balances\"][date_index] = entry.debit - entry.credit\n            result[\"in_balances\"][date_index] = entry.debit\n            result[\"out_balances\"][date_index] = entry.credit\n        else:\n            result[\"balances\"][date_index] += entry.debit - entry.credit\n            result[\"in_balances\"][date_index] += entry.debit\n            result[\"out_balances\"][date_index] += entry.credit\n\n        if result[\"balances\"][date_index]:\n            result[\"has_value\"] = True\n        if result[\"in_balances\"][date_index]:\n            result[\"has_in_balance\"] = True\n        if result[\"out_balances\"][date_index]:\n            result[\"has_out_balance\"] = True\n\n    # Negate balances for \"Asset,\" \"Liability,\" and \"Equity\" accounts\n    if result[\"root_type\"] in [\"Asset\", \"Liability\", \"Equity\"]:\n        result[\"balances\"] = [balance * -1 for balance in result[\"balances\"]]\n        result[\"in_balances\"] = [\n            balance * -1 for balance in result[\"in_balances\"]\n        ]\n        result[\"out_balances\"] = [\n            balance * -1 for balance in result[\"out_balances\"]\n        ]\n\n    return result\n\n", "CodeBleu_score": 20.714884881701444}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"account\": account,\n        \"dates\": dates,\n        \"balances\": [0] * len(dates),\n        \"account_type\": frappe.db.get_value(\"Account\", account, \"account_type\"),\n    }\n\n    # If the account's root type is not \"Asset\" or \"Expense,\" negate the balances.\n    if result[\"account_type\"] not in (\"Asset\", \"Expense\"):\n        result[\"balances\"] = [-x for x in result[\"balances\"]]\n\n    # Iterate through the entries, updating the balance for each date.\n    for entry in gl_entries:\n        date_index = dates.index(entry.posting_date)\n        result[\"balances\"][date_index] += entry.credit - entry.debit\n\n    # If the account's root type is \"Asset,\" \"Liability,\" or \"Equity,\" accumulate the balance over time.\n    if result[\"account_type\"] in (\"Asset\", \"Liability\", \"Equity\"):\n        for i in range(1, len(result[\"balances\"])):\n            result[\"balances\"][i] += result[\"balances\"][i - 1]\n\n    return result\n\n", "CodeBleu_score": 32.126241541817414}, {"code": "def build_result(account, dates, gl_entries)\n\t\n\n    result = {\n        \"account\": account,\n        \"dates\": dates,\n        \"opening_balance\": 0,\n        \"closing_balance\": 0,\n        \"balances\": [0] * len(dates),\n        \"values\": [0] * len(dates),\n    }\n\n    # Determine root type\n    root_type = frappe.db.get_value(\n        \"Account\", account, \"root_type\", cache=True\n    ) or frappe.db.get_value(\"Account\", account, \"account_type\", cache=True)\n\n    # Initialize opening balance\n    result[\"opening_balance\"] = get_opening_balance(account, dates[0])\n\n    # Iterate through dates and entries to determine balances\n    for i, date in enumerate(dates):\n        for entry in gl_entries:\n            if entry.date == date:\n                if entry.account == account:\n                    result[\"balances\"][i] += entry.debit - entry.credit\n                elif entry.account in get_children(account):\n                    result[\"balances\"][i] += entry.credit - entry.debit\n\n        # If root type is not Asset or Expense, negate balances\n        if root_type not in [\"Asset\", \"Expense\"]:\n            result[\"balances\"][i] *= -1\n\n        # Accumulate balances for Asset, Liability, and Equity accounts\n        if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n            result[\"balances\"][i] += result[\"balances\"][i - 1]\n\n    # Set closing balance\n    result[\"closing_balance\"] = result[\"balances\"][-1]\n\n    return result\n\n", "CodeBleu_score": 30.080509400630117}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n\n    if self.is_root:\n        return\n\n    if self.account_type in [\"Receivable\", \"Payable\"]:\n        if self.is_group:\n            throw(_(\"Account Type {0} is not allowed for a Group Account\").format(self.account_type))\n        if self.parent_account and self.parent_account.is_group:\n            throw(_(\"Account Type {0} is not allowed for a child of a Group Account\").format(self.account_type))\n\n    if self.account_type in [\"Receivable\", \"Payable\"]:\n        if self.parent_account and self.parent_account.account_type not in [\"Receivable\", \"Payable\"]:\n            throw(_(\"Account Type {0} is not allowed for a child of a non-receivable/payable Account\").format(self.account_type))\n\n    if self.is_group:\n        return\n\n    if self.account_type in [\"Receivable\", \"Payable\"]:\n        if self.parent_account and self.parent_account.account_type not in [\"Receivable\", \"Payable\"]:\n            throw(_(\"Account Type {0} is not allowed for a child of a non-receivable/payable Account\").format(self.account_type))\n\n    if self.is_root:\n        return\n\n    if self.account_type in [\"Receivable\", \"Payable\"]:\n        if self.parent_account and self.parent_account.account_type not in [\"Receivable\", \"Payable\"]:\n            throw(_(\"Account Type {0} is not allowed for a child of a non-receivable/payable Account\").format(self.account_type))\n\n    if self.account_type in [\"Receivable\", \"Payable\"]:\n        if self.parent_account and self.parent_account.account_type not in [\"Receivable\", \"Payable\"]:\n            throw(_(\"Account Type {0} is not allowed for a child of a non-receivable/payable Account\").format(self.account_type))\n\n    if self.is_root:\n        return\n\n    if self.account_type in [\"Receiv", "CodeBleu_score": 22.706583584212687}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n\n    # Get the account type before the save operation\n    account_type_before_save = frappe.db.get_value(\n        \"Account\", self.name, \"account_type\"\n    )\n\n    # Get the account type after the save operation\n    account_type_after_save = frappe.db.get_value(\n        \"Account\", self.name, \"account_type\"\n    )\n\n    # Check if the account type has changed\n    if account_type_before_save != account_type_after_save:\n        # Check if the account type has changed from \"Receivable\" or \"Payable\" to a non-receivable/payable type\n        if (\n            (account_type_before_save in [\"Receivable\", \"Payable\"])\n            and (account_type_after_save not in [\"Receivable\", \"Payable\"])\n        ):\n            # Check if there are existing general ledger entries for the account\n            if frappe.db.get_value(\"GL Entry\", {\"account\": self.name}):\n                # Generate a warning message indicating potential issues in the \"Accounts\" report\n                frappe.msgprint(\n                    _(\n                        \"Warning: There are existing general ledger entries for {0}. Please review the account in the 'Accounts' report.\".format(\n                            self.name\n                        )\n                    ),\n                    alert=True,\n                )\n                # Add a comment to the account record indicating that there are existing general ledger entries for the account\n                frappe.db.set_value(\n                    \"Account\",\n                    self.name,\n                    \"comment\",\n                    _(\n                        \"Warning: There are existing general ledger entries for this account. Please review the account in the 'Accounts' report.\"\n                    ),\n                )\n\n", "CodeBleu_score": 24.730331089814207}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.is_new():\n        return\n    else:\n        account_type_before_save = frappe.db.get_value(\"Account\", self.name, \"account_type\")\n        if account_type_before_save in (\"Receivable\", \"Payable\") and self.account_type not in (\"Receivable\", \"Payable\"):\n            if frappe.db.count(\"GL Entry\", filters={\"account\": self.name}) > 0:\n                frappe.throw(_(\"Cannot change account type as there are existing general ledger entries for this account.\"))\n            else:\n                frappe.msgprint(_(\"Account type has been changed to {0}. Please verify the account details in the 'Accounts' report.\").format(self.account_type))\n\n", "CodeBleu_score": 34.06955962577399}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n    if not self.account_currency:\n        self.account_currency = frappe.db.get_value(\"Company\", self.company, \"default_currency\")\n\n    if not self.account_currency:\n        throw(_(\"Please specify an account currency\"))\n\n    if self.is_group:\n        return\n\n    if self.parent_account and not self.account_currency == frappe.db.get_value(\"Account\", self.parent_account, \"account_currency\"):\n        throw(_(\"Parent account {0} and child account {1} must have same currency\").format(self.parent_account, self.name))\n\n    if self.is_tree_root:\n        return\n\n    if self.company:\n        # check if currency is allowed for the company\n        if not frappe.db.get_value(\"Allowed Currency\", {\"currency\": self.account_currency, \"company\": self.company}):\n            throw(_(\"Currency {0} is not allowed for company {1}\").format(self.account_currency, self.company))\n\n        # check if any other account with the same currency exists\n        if frappe.db.get_value(\"Account\", {\"account_currency\": self.account_currency, \"name\": [\"!=\", self.name]}):\n            throw(_(\"Currency {0} already used in another account\").format(self.account_currency))\n\n    if self.account_currency != self.company_currency:\n        # check if there are any existing general ledger entries with this currency\n        if frappe.db.exists(\"GL Entry\", {\"account\": self.name, \"company\": self.company, \"account_currency\": self.account_currency}):\n            throw(_(\"Cannot change the currency of account {0} as there are general ledger entries with this currency\").format(self.name))\n\n", "CodeBleu_score": 36.22352095075265}, {"code": "def validate_account_currency(self)\n\t\n    if not self.account_currency:\n        self.account_currency = frappe.get_value(\n            \"Company\", self.company, \"default_currency\"\n        )\n        self.flags.set_on_submit = True\n\n    if not self.account_currency:\n        frappe.throw(_(\"Please specify Account Currency\"))\n\n    if self.is_group:\n        return\n\n    if not self.flags.ignore_account_currency_check:\n        if self.get(\"is_root\"):\n            return\n\n        if self.account_currency != frappe.get_value(\n            \"Company\", self.company, \"default_currency\"\n        ):\n            frappe.throw(\n                _(\n                    \"Account Currency should be same as Company Currency for non-group accounts\"\n                )\n            )\n\n        if self.account_currency != frappe.db.get_value(\n            \"Account\", self.parent_account, \"account_currency\"\n        ):\n            frappe.throw(\n                _(\n                    \"Account Currency should be same as Parent Account Currency for non-group accounts\"\n                )\n            )\n\n        if self.account_currency != frappe.db.get_value(\n            \"Account\", self.parent_account, \"account_currency\"\n        ):\n            frappe.throw(\n                _(\n                    \"Account Currency should be same as Parent Account Currency for non-group accounts\"\n                )\n            )\n\n        if frappe.db.get_value(\n            \"General Ledger Entry\",\n            {\"account\": self.name, \"company\": self.company},\n            \"name\",\n        ):\n            if frappe.db.get_value(\n                \"General Ledger Entry\",\n                {\"account\": self.name, \"company\": self.company},\n                \"account_currency\",\n            ) != self.account_currency:\n                frappe.throw(\n                    _(\n                        \"Account Currency cannot be changed as General Ledger Entries are already created with different currency\"\n                    )\n                )\n\n", "CodeBleu_score": 35.764828866257915}, {"code": "def validate_account_currency(self)\n\t\n    if self.account_type == \"Receivable\" or self.account_type == \"Payable\":\n        if self.account_currency == None:\n            self.account_currency = frappe.db.get_value(\n                \"Company\", self.company, \"default_currency\"\n            )\n\n        if self.account_currency != frappe.db.get_value(\n            \"Company\", self.company, \"default_currency\"\n        ):\n            self.flags.explicit_currency = True\n\n        if self.flags.explicit_currency:\n            if frappe.db.exists(\n                \"General Ledger Entry\",\n                {\n                    \"account\": self.name,\n                    \"company\": self.company,\n                    \"account_currency\": (\"!=\", self.account_currency),\n                },\n            ):\n                frappe.throw(\n                    _(\n                        \"Cannot change account currency as there are existing General Ledger Entries with a different currency\"\n                    )\n                )\n\n", "CodeBleu_score": 33.36405807504208}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n\n    aggregated_entries = {}\n    for entry in entries:\n        key = get_aggregate_key(entry, accounting_dimensions)\n        if key not in aggregated_entries:\n            aggregated_entries[key] = {\n                \"account\": entry.account,\n                \"debit\": 0,\n                \"credit\": 0,\n                \"debit_in_account_currency\": 0,\n                \"credit_in_account_currency\": 0,\n                \"debit_in_company_currency\": 0,\n                \"credit_in_company_currency\": 0,\n                \"balance\": 0,\n                \"account_currency\": entry.account_currency,\n                \"company_currency\": entry.company_currency,\n                \"account_type\": entry.account_type,\n                \"is_group\": entry.is_group,\n                \"account_name\": entry.account_name,\n                \"parent_account\": entry.parent_account,\n                \"indent\": entry.indent,\n                \"has_value\": entry.has_value,\n                \"account_number\": entry.account_number,\n                \"report_type\": entry.report_type,\n                \"has_balance\": entry.has_balance,\n                \"include_in_gross\": entry.include_in_gross,\n                \"is_root\": entry.is_root,\n                \"account_balance\": entry.account_balance,\n                \"account_balance_in_account_currency\": entry.account_balance_in_account_currency,\n                \"account_balance_in_company_currency\": entry.account_balance_in_company_currency,\n                \"account_balance_type\": entry.account_balance_type,\n                \"is_party\": entry.is_party,\n                \"is_frozen\": entry.is_frozen,\n                \"is_pl_frozen\": entry.is_pl_frozen,\n                \"is_opening\": entry.is_opening,\n                \"account_lft\": entry.account_lft,\n                \"account_rgt\": entry.account_rgt,\n               ", "CodeBleu_score": 27.549872600401628}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n\n    aggregated_entries = {}\n    for entry in entries:\n        key = generate_accounting_dimension_key(entry, accounting_dimensions)\n        if key in aggregated_entries:\n            aggregated_entries[key][\"debit\"] += entry[\"debit\"]\n            aggregated_entries[key][\"credit\"] += entry[\"credit\"]\n            aggregated_entries[key][\"debit_in_account_currency\"] += entry[\"debit_in_account_currency\"]\n            aggregated_entries[key][\"credit_in_account_currency\"] += entry[\"credit_in_account_currency\"]\n        else:\n            aggregated_entries[key] = {\n                \"debit\": entry[\"debit\"],\n                \"credit\": entry[\"credit\"],\n                \"debit_in_account_currency\": entry[\"debit_in_account_currency\"],\n                \"credit_in_account_currency\": entry[\"credit_in_account_currency\"],\n            }\n\n    return aggregated_entries\n\n", "CodeBleu_score": 34.780233537787176}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    aggregated_entries = {}\n    for entry in entries:\n        key = [\n            entry.get(dimension)\n            for dimension in accounting_dimensions\n            if entry.get(dimension)\n        ]\n        key = tuple(key)\n        if key not in aggregated_entries:\n            aggregated_entries[key] = {\n                \"debit\": 0.0,\n                \"credit\": 0.0,\n                \"debit_in_account_currency\": 0.0,\n                \"credit_in_account_currency\": 0.0,\n            }\n        aggregated_entries[key][\"debit\"] += entry.debit\n        aggregated_entries[key][\"credit\"] += entry.credit\n        aggregated_entries[key][\"debit_in_account_currency\"] += entry.debit_in_account_currency\n        aggregated_entries[key][\"credit_in_account_currency\"] += entry.credit_in_account_currency\n\n    return aggregated_entries\n\n", "CodeBleu_score": 33.21844635605801}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.supplier_type == \"Supplier\":\n        supplier = frappe.db.get_value(\n            \"Supplier\", self.supplier, [\"on_hold\", \"hold_type\"], as_dict=1\n        )\n        if supplier.on_hold and supplier.hold_type == \"Payment\":\n            if self.doctype == \"Payment Entry\":\n                if self.reference_date and getdate(self.reference_date) < getdate(\n                    supplier.release_date\n                ):\n                    frappe.throw(\n                        _(\n                            \"Supplier {0} is on hold. Please release the supplier before proceeding.\".format(\n                                frappe.bold(self.supplier)\n                            )\n                        )\n                    )\n\n", "CodeBleu_score": 29.128371705117562}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n\n    if self.doctype in [\"Purchase Invoice\", \"Purchase Order\"]:\n        supplier_field = \"supplier\"\n        hold_field = \"on_hold\"\n        hold_type_field = \"hold_type\"\n        hold_type_value = \"Supplier\"\n        release_date_field = \"release_date\"\n        hold_date_field = \"hold_date\"\n        hold_date_value = \"hold_date\"\n        blocked_message = _(\"Supplier {0} is blocked. Please unblock to proceed.\").format(\n            self.supplier\n        )\n    elif self.doctype in [\"Purchase Receipt\", \"Purchase Invoice\"]:\n        supplier_field = \"supplier\"\n        hold_field = \"on_hold\"\n        hold_type_field = \"hold_type\"\n        hold_type_value = \"Supplier\"\n        release_date_field = \"release_date\"\n        hold_date_field = \"hold_date\"\n        hold_date_value = \"hold_date\"\n        blocked_message = _(\"Supplier {0} is blocked. Please unblock to proceed.\").format(\n            self.supplier\n        )\n    else:\n        return\n\n    if self.get(hold_field):\n        supplier = frappe.get_doc(\"Supplier\", self.get(supplier_field))\n        if supplier.get(hold_type_field) == hold_type_value:\n            if supplier.get(hold_date_field) and supplier.get(hold_date_value):\n                if supplier.get(release_date_field) < getdate():\n                    frappe.throw(blocked_message)\n\n", "CodeBleu_score": 35.34596055600431}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype in (\"Purchase Invoice\", \"Purchase Receipt\", \"Purchase Order\"):\n        supplier_field = \"supplier\"\n        hold_type = \"Hold Supplier\"\n    elif self.doctype in (\"Payment Entry\", \"Journal Entry\"):\n        supplier_field = \"party_type\"\n        hold_type = \"Hold Supplier Payment\"\n    else:\n        return\n\n    supplier = frappe.db.get_value(\"Supplier\", self.supplier, [\"block_status\", \"hold_type\"])\n    if supplier and supplier[0] == \"Hold\" and supplier[1] == hold_type:\n        if getdate(self.posting_date) < getdate(supplier[2]):\n            frappe.throw(\n                _(\n                    \"Supplier {0} is blocked. You can not proceed with this transaction until {1}.\"\n                ).format(\n                    frappe.bold(self.supplier),\n                    formatdate(supplier[2]),\n                ),\n                title=_(\"Supplier Blocked\"),\n            )\n\n", "CodeBleu_score": 29.261673861267063}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = [\n        \"Stock Ledger Entry\",\n        \"GL Entry\",\n        \"Stock Reconciliation\",\n        \"Stock Ledger Entry Detail\",\n    ]\n\n    # Identify the relevant repost doctypes\n    repost_doctypes = [\n        frappe.get_doc(\"DocType\", doctype)\n        for doctype in repost_doctypes\n        if frappe.db.exists(\"DocType\", doctype)\n    ]\n\n    # Query for relevant rows\n    repost_rows = frappe.db.sql(\n        \"\"\"\n        SELECT\n            parent,\n            parenttype,\n            fieldname,\n            voucher_type,\n            voucher_no\n        FROM\n            `tabRepost Item`\n        WHERE\n            voucher_type = %(voucher_type)s AND\n            voucher_no = %(voucher_no)s\n        \"\"\",\n        values={\"voucher_type\": self.doctype, \"voucher_no\": self.name},\n        as_dict=1,\n    )\n\n    # Organize the rows by parent document type and parent\n    repost_rows_by_parent = defaultdict(list)\n    for row in repost_rows:\n        repost_rows_by_parent[(row.parenttype, row.parent)].append(row)\n\n    # For each parent document, remove the relevant rows from the vouchers or repost_vouchers field and save the document\n    for (parenttype, parent), rows in repost_rows_by_parent.items():\n        parent_doc = frappe.get_doc(parenttype, parent)\n        if parent_doc.doctype == \"Stock Reconciliation\":\n            parent_doc.set(\"repost_vouchers\", [])\n        else:\n            parent_doc.set(\"vouchers\", [])\n        for row in rows:\n            parent_doc.get(row.fieldname).remove(row.name)\n        parent_doc.flags.ignore_validate = True\n        parent_doc.flags.ignore_linked", "CodeBleu_score": 25.64807940992491}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n\n    # Identify the relevant repost doctypes\n    repost_doctypes = [\n        \"Stock Ledger Entry\",\n        \"GL Entry\",\n        \"Stock Reconciliation\",\n        \"Stock Ledger Entry Detail\",\n    ]\n\n    # Query for rows where the voucher type and number match the current document\n    rows = frappe.db.sql(\n        \"\"\"\n            SELECT\n                parent,\n                parenttype,\n                field,\n                name,\n                value\n            FROM `tabCustom Field`\n            WHERE\n                field in ('voucher_type', 'voucher_no')\n                AND parent in %(doctypes)s\n                AND value = %(voucher_no)s\n                AND docstatus < 2\n        \"\"\",\n        values={\n            \"doctypes\": repost_doctypes,\n            \"voucher_no\": self.name,\n        },\n        as_dict=1,\n    )\n\n    # Organize the rows into a map by parent document type and parent\n    rows_by_parent = defaultdict(list)\n    for row in rows:\n        rows_by_parent[(row[\"parenttype\"], row[\"parent\"])].append(row)\n\n    # Retrieve each parent document\n    parent_docs = frappe.get_all(\n        \"DocType\",\n        filters={\"name\": (\"in\", list(rows_by_parent))},\n        fields=[\"name\", \"module\"],\n    )\n\n    # Remove the relevant rows from either \"repost_vouchers\" or \"vouchers\" fields depending on the doctype\n    for parent_doc in parent_docs:\n        rows_to_remove = rows_by_parent[(parent_doc.name, parent_doc.module)]\n        if parent_doc.module == \"Stock\":\n            field = \"repost_vouchers\"\n        else:\n            field = \"vouchers\"\n\n        # Retrieve the parent document\n        parent = frappe.get_doc(parent_doc.name, parent_doc.module)\n\n        # Remove the rows from the parent document\n        for row in rows_to_remove:", "CodeBleu_score": 21.022878213977098}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    # get the doctypes that have a \"repost_vouchers\" or \"vouchers\" field\n    repost_doctypes = frappe.get_all(\n        \"DocField\",\n        fields=[\"parent\"],\n        filters={\n            \"fieldname\": [\"in\", [\"repost_vouchers\", \"vouchers\"]],\n            \"fieldtype\": \"Table\",\n        },\n    )\n    # get the doctypes that have a \"repost_vouchers\" or \"vouchers\" field\n    repost_doctypes = [\n        d.parent\n        for d in repost_doctypes\n        if d.parent not in [\"Sales Invoice\", \"Purchase Invoice\"]\n    ]\n\n    # get the rows from the \"repost_vouchers\" or \"vouchers\" fields\n    repost_rows = frappe.get_all(\n        \"Repost Item\",\n        fields=[\"parenttype\", \"parent\", \"voucher_type\", \"voucher_no\"],\n        filters={\n            \"voucher_type\": self.doctype,\n            \"voucher_no\": self.name,\n        },\n    )\n\n    # organize the rows by parent document type and parent\n    repost_rows = defaultdict(list)\n    for row in repost_rows:\n        repost_rows[row.parenttype].append(row)\n\n    # get the parent documents\n    parents = {}\n    for parenttype, rows in repost_rows.items():\n        parent_names = [row.parent for row in rows]\n        parents[parenttype] = frappe.get_all(\n            parenttype,\n            fields=[\"name\"],\n            filters={\n                \"name\": [\"in\", parent_names],\n            },\n        )\n\n    # remove the rows from the \"repost_vouchers\" or \"vouchers\" fields\n    for parenttype, rows in repost_rows.items():\n        for row in rows:\n            parent = [\n                p\n                for p in parents[parenttype]\n                if p.name == row.parent\n            ][0]\n            parent_doc = frappe.", "CodeBleu_score": 25.71908885213481}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    # Authenticate the client\n    client = get_plaid_client(self)\n\n    # Construct the query parameters\n    query_params = {\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n    }\n    if account_id:\n        query_params[\"account_ids\"] = [account_id]\n\n    # Fetch the transactions\n    try:\n        transactions = client.Transactions.get(self.plaid_access_token, **query_params)\n    except APIError as e:\n        raise e\n    except InvalidRequestError as e:\n        raise e\n    except Exception as e:\n        frappe.log_error(message=frappe.get_traceback(), title=\"Plaid Error\")\n        frappe.throw(_(\"An error occurred while fetching transactions\"))\n\n    # If the number of transactions retrieved is less than the total, continue fetching\n    while transactions.total_transactions > len(transactions.transactions):\n        try:\n            transactions = client.Transactions.get(\n                self.plaid_access_token,\n                offset=len(transactions.transactions),\n                **query_params\n            )\n        except APIError as e:\n            raise e\n        except InvalidRequestError as e:\n            raise e\n        except Exception as e:\n            frappe.log_error(message=frappe.get_traceback(), title=\"Plaid Error\")\n            frappe.throw(_(\"An error occurred while fetching transactions\"))\n\n    return transactions\n\n", "CodeBleu_score": 38.02788529969011}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    # Authenticate the client\n    client = get_plaid_client()\n\n    # Construct the query parameters\n    start_date = start_date.strftime(\"%Y-%m-%d\")\n    end_date = end_date.strftime(\"%Y-%m-%d\")\n    options = {\n        \"count\": 250,\n        \"offset\": 0,\n    }\n\n    # Fetch transactions\n    transactions = []\n    while True:\n        try:\n            response = client.Transactions.get(\n                self.plaid_access_token,\n                start_date,\n                end_date,\n                options=options,\n                account_ids=[account_id] if account_id else None,\n            )\n        except APIError as e:\n            if e.code == \"INVALID_REQUEST\":\n                raise InvalidRequestError(e.code, e.message)\n            elif e.code == \"INVALID_ACCOUNT\":\n                frappe.throw(_(\"Invalid account\"))\n            elif e.code == \"PRODUCT_NOT_ENABLED\":\n                frappe.throw(_(\"Product not enabled\"))\n            elif e.code == \"INVALID_FIELD\":\n                frappe.throw(_(\"Invalid field\"))\n            elif e.code == \"INVALID_INPUT\":\n                frappe.throw(_(\"Invalid input\"))\n            elif e.code == \"RATE_LIMIT_EXCEEDED\":\n                frappe.throw(_(\"Rate limit exceeded\"))\n            elif e.code == \"INVALID_SCOPES\":\n                frappe.throw(_(\"Invalid scopes\"))\n            elif e.code == \"INVALID_ACCESS_TOKEN\":\n                frappe.throw(_(\"Invalid access token\"))\n            elif e.code == \"ITEM_ERROR\":\n                raise ItemError(e.code, e.message)\n            elif e.code == \"INVALID_SANDBOX_TOKEN\":\n                frappe.throw(_(\"Invalid sandbox token\"))\n            elif e.code == \"INVALID_PRODUCT\":\n                frappe.throw(_(\"Invalid product\"))\n            elif e.code == \"OTHER\":\n                frappe.throw(_", "CodeBleu_score": 25.718440111515083}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n\n    # Authenticate the client.\n    try:\n        client = get_client(self)\n    except Exception as e:\n        frappe.log_error(e)\n        raise e\n\n    # Construct the query parameters.\n    try:\n        start_date = start_date.strftime(\"%Y-%m-%d\")\n        end_date = end_date.strftime(\"%Y-%m-%d\")\n        if account_id:\n            query_params = {\n                \"start_date\": start_date,\n                \"end_date\": end_date,\n                \"account_ids\": [account_id],\n            }\n        else:\n            query_params = {\n                \"start_date\": start_date,\n                \"end_date\": end_date,\n            }\n    except Exception as e:\n        frappe.log_error(e)\n        raise e\n\n    # Fetch the transactions.\n    try:\n        transactions = []\n        while True:\n            response = client.Transactions.get(**query_params)\n            transactions.extend(response[\"transactions\"])\n            if response[\"total_transactions\"] == len(transactions):\n                break\n            query_params[\"offset\"] = len(transactions)\n    except APIError as e:\n        frappe.log_error(e)\n        raise e\n    except InvalidRequestError as e:\n        frappe.log_error(e)\n        raise e\n    except ItemError as e:\n        frappe.log_error(e)\n        raise e\n    except Exception as e:\n        frappe.log_error(e)\n        raise e\n\n    return transactions\n\n", "CodeBleu_score": 40.090701352256374}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    try:\n        access_token = PlaidConnector.exchange_public_token(token)\n        bank_name = response[\"institution\"][\"name\"]\n        bank_id = response[\"institution\"][\"id\"]\n        bank_type = response[\"institution\"][\"type\"]\n        bank_logo = response[\"institution\"][\"logo\"]\n        bank_url = response[\"institution\"][\"url\"]\n        bank_mfa = response[\"institution\"][\"mfa\"]\n        bank_products = response[\"institution\"][\"products\"]\n        bank_country_codes = response[\"institution\"][\"country_codes\"]\n        bank_supports_transfer = response[\"institution\"][\"supports_transfer\"]\n        bank_supports_deposit_switch = response[\"institution\"][\"supports_deposit_switch\"]\n        bank_supports_account_identification = response[\"institution\"][\"supports_account_identification\"]\n        bank_supports_account_statement = response[\"institution\"][\"supports_account_statement\"]\n        bank_supports_account_verification = response[\"institution\"][\"supports_account_verification\"]\n        bank_supports_transaction_history = response[\"institution\"][\"supports_transaction_history\"]\n        bank_supports_transaction_detail = response[\"institution\"][\"supports_transaction_detail\"]\n        bank_supports_balance = response[\"institution\"][\"supports_balance\"]\n        bank_supports_auth = response[\"institution\"][\"supports_auth\"]\n        bank_supports_direct_deposit = response[\"institution\"][\"supports_direct_deposit\"]\n        bank_supports_direct_deposit_canadian = response[\"institution\"][\"supports_direct_deposit_canadian\"]\n        bank_supports_direct_deposit_belgian = response[\"institution\"][\"supports_direct_deposit_belgian\"]\n        bank_supports_direct_deposit_german = response[\"institution\"][\"supports_direct_deposit_german\"]\n        bank_supports_direct_deposit_spanish = response[\"institution\"]", "CodeBleu_score": 24.747620256156804}, {"code": "def add_institution(token, response)\n\t\n    institution_name = response[\"institution\"][\"name\"]\n    institution_id = response[\"institution\"][\"institution_id\"]\n    access_token = PlaidConnector.get_access_token(token)\n    bank = frappe.db.get_value(\"Bank\", {\"institution_id\": institution_id})\n    if bank:\n        bank_doc = frappe.get_doc(\"Bank\", bank)\n        bank_doc.access_token = access_token\n        bank_doc.save()\n        frappe.db.commit()\n        return bank_doc\n    else:\n        bank_doc = frappe.get_doc(\n            {\n                \"doctype\": \"Bank\",\n                \"institution_id\": institution_id,\n                \"access_token\": access_token,\n                \"institution_name\": institution_name,\n                \"is_active\": 1,\n            }\n        )\n        bank_doc.insert()\n        frappe.db.commit()\n        return bank_doc\n\n", "CodeBleu_score": 34.632707669615854}, {"code": "def add_institution(token, response)\n\t\n    try:\n        bank_name = response[\"institution\"][\"name\"]\n        bank_id = response[\"institution\"][\"id\"]\n        bank_logo = response[\"institution\"][\"logo\"]\n        bank_url = response[\"institution\"][\"url\"]\n        bank_mfa = response[\"institution\"][\"mfa\"]\n        bank_country_codes = response[\"institution\"][\"country_codes\"]\n        bank_primary_color = response[\"institution\"][\"primary_color\"]\n        bank_products = response[\"institution\"][\"products\"]\n        bank_routing_numbers = response[\"institution\"][\"routing_numbers\"]\n        bank_status = response[\"institution\"][\"status\"]\n        bank_supports_account_identification = response[\"institution\"][\"supports_account_identification\"]\n        bank_supports_account_statement = response[\"institution\"][\"supports_account_statement\"]\n        bank_supports_account_verification = response[\"institution\"][\"supports_account_verification\"]\n        bank_supports_transaction_history = response[\"institution\"][\"supports_transaction_history\"]\n        bank_supports_transaction_detail = response[\"institution\"][\"supports_transaction_detail\"]\n        bank_supports_transaction_filtering = response[\"institution\"][\"supports_transaction_filtering\"]\n        bank_supports_classification = response[\"institution\"][\"supports_classification\"]\n        bank_supports_direct_deposit = response[\"institution\"][\"supports_direct_deposit\"]\n        bank_supports_debit_payments = response[\"institution\"][\"supports_debit_payments\"]\n        bank_supports_credit_payments = response[\"institution\"][\"supports_credit_payments\"]\n        bank_supports_transfer_payments = response[\"institution\"][\"supports_transfer_payments\"]\n        bank_supports_payment_history = response[\"institution\"][\"supports_payment_history\"]\n        bank_supports_balance = response[\"institution\"][\"supports_balance\"]\n        bank_supports_identity = response[\"institution\"][\"supports_identity\"]\n       ", "CodeBleu_score": 19.084327567384896}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        # get the last integration date for this bank account\n        last_integration_date = bank_account.get(\"last_integration_date\")\n        # set the start date for the transaction retrieval\n        start_date = add_months(last_integration_date, -1) if last_integration_date else today()\n        # set the end date for the transaction retrieval\n        end_date = today()\n        # get the transactions from the bank\n        transactions = bank.get_transactions(start_date, end_date)\n        # process the transactions\n        new_transactions = process_transactions(bank, bank_account, transactions)\n        # update the last integration date\n        bank_account.set(\"last_integration_date\", end_date)\n        bank_account.save()\n        # log the number of new transactions added\n        frappe.log_error(\n            f\"{new_transactions} new transactions added for {bank_account.bank_name} - {bank_account.bank_account_name}\",\n            title=\"Plaid Integration\",\n        )\n    except ItemError as e:\n        frappe.log_error(\n            f\"{bank_account.bank_name} - {bank_account.bank_account_name} - {e}\",\n            title=\"Plaid Integration\",\n        )\n\n", "CodeBleu_score": 29.063094447842186}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    # Get start and end dates for transaction retrieval\n    start_date = get_start_date(bank_account.bank_account_integration_last_sync)\n    end_date = get_end_date(bank_account.bank_account_integration_last_sync)\n    # Fetch transactions\n    transactions = fetch_transactions(bank, bank_account, start_date, end_date)\n    # Process transactions\n    new_transactions = process_transactions(bank, bank_account, transactions)\n    # Update last integration date\n    bank_account.bank_account_integration_last_sync = today()\n    bank_account.save(ignore_permissions=True)\n    # Log sync results\n    frappe.log_error(\n        _(\"{0} new transactions added for bank account {1}\").format(new_transactions, bank_account.name),\n        title=_(\"Bank Account Transaction Sync\"),\n    )\n\n", "CodeBleu_score": 17.62146063167525}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    start_date = bank_account.last_integration_date\n    if not start_date:\n        start_date = today()\n    end_date = add_months(start_date, 1)\n\n    try:\n        transactions = bank.get_transactions(start_date, end_date)\n    except ItemError as e:\n        frappe.log_error(str(e), title=_(\"Error retrieving transactions\"))\n        return\n\n    bank_account.last_integration_date = end_date\n    bank_account.save()\n\n    new_transactions = []\n    for transaction in transactions:\n        if not frappe.db.exists(\"Bank Transaction\", {\"reference_number\": transaction[\"reference_number\"]}):\n            new_transactions.append(transaction)\n\n    if not new_transactions:\n        return\n\n    bank_account.append(\"bank_transactions\", {\n        \"doctype\": \"Bank Transaction\",\n        \"bank\": bank.name,\n        \"bank_account\": bank_account.name,\n        \"transactions\": json.dumps(new_transactions)\n    })\n    bank_account.save()\n\n    frappe.db.commit()\n\n", "CodeBleu_score": 31.964018274055345}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    # Set up the query URI\n    uri = self.base_uri + \"/query?query=select * from \" + entity\n    # Get the total number of entries\n    response = requests.get(uri, headers=self.headers)\n    # Handle errors\n    if response.status_code != 200:\n        # Log the error\n        frappe.log_error(\n            \"Could not get total number of \" + entity + \" entries for company \" + self.company,\n            title=\"QuickBooks API Error\",\n            data={\n                \"Status Code\": response.status_code,\n                \"Response Text\": response.text,\n            },\n        )\n        # Throw an exception\n        raise Exception(\n            _(\"Could not get total number of {0} entries for company {1}\").format(\n                entity, self.company\n            )\n        )\n    # Parse the response\n    data = json.loads(response.text)\n    # Get the total number of entries\n    total = data[\"QueryResponse\"][\"totalCount\"]\n    # Set up a counter for the number of entries processed\n    count = 0\n    # Set up a counter for the number of batches processed\n    batch_count = 0\n    # Loop through the batches of 1000\n    while count < total:\n        # Set up the query URI for the next batch of 1000 entries\n        uri = (\n            self.base_uri\n            + \"/query?query=select * from \"\n            + entity\n            + \" STARTPOSITION \"\n            + str(count)\n            + \" MAXRESULTS 1000\"\n        )\n        # Get the next batch of 1000 entries\n        response = requests.get(uri, headers=self.headers)\n        # Handle errors\n        if response.status_code != 200:\n            # Log the error\n            frappe.log_error(\n                \"Could not get batch \"\n                + str(batch_count)\n                + \" of \"\n                + entity\n                + \" entries for company \"\n                + self.company,\n                title=\"QuickBooks API Error\",\n                data={\n                    \"Status Code\":", "CodeBleu_score": 26.104173428492345}, {"code": "def _migrate_entries(self, entity)\n\t\n    entity_name = entity.get('entity_name')\n    entity_type = entity.get('entity_type')\n    entity_id = entity.get('entity_id')\n    entity_query = entity.get('entity_query')\n    entity_query_uri = entity.get('entity_query_uri')\n    entity_query_params = entity.get('entity_query_params')\n    entity_query_params['max_results_per_page'] = 1000\n    entity_query_params['page_num'] = 1\n    entity_query_params['entity_type'] = entity_type\n    entity_query_params['entity_name'] = entity_name\n    entity_query_params['entity_id'] = entity_id\n    entity_query_params['entity_query'] = entity_query\n    entity_query_params['page_num'] = 1\n    entity_query_params['page_size'] = 1000\n    entity_query_params['page_count'] = 1\n    entity_query_params['total_count'] = 0\n    entity_query_params['total_pages'] = 0\n    entity_query_params['entity_query_uri'] = entity_query_uri\n    entity_query_params['entity_query_params'] = entity_query_params\n    entity_query_params['entity_query_params_str'] = frappe.as_json(entity_query_params)\n    entity_query_params['entity_query_params_str_encoded'] = frappe.safe_encode(entity_query_params['entity_query_params_str'])\n\n    while True:\n        try:\n            entity_query_params['page_num'] += 1\n            entity_query_params['entity_query_uri'] = entity_query_uri.format(**entity_query_params)\n            entity_query_params['entity_query_params_str'] = frappe.as_json(entity_query_params)\n            entity_query_params['entity_query_params_str_encoded'] = frappe.safe_encode(entity_query_params['entity_query_params_str'])\n            entity_query_", "CodeBleu_score": 17.876191675267744}, {"code": "def _migrate_entries(self, entity)\n\t\n    # Construct the query URI\n    uri = f\"https://{self.realm_id}.{self.base_url}/v3/company/{self.company_id}/query\"\n    query = {\n        \"query\": f\"SELECT * FROM {entity}\",\n        \"startPosition\": \"1\",\n        \"maxResults\": \"1000\",\n    }\n    # Determine the total number of entries\n    response = requests.get(uri, headers=self.headers, params=query)\n    if response.status_code != 200:\n        self.log_error(\n            f\"Unable to retrieve total number of {entity} entries: {response.text}\"\n        )\n        return\n    total_entries = int(response.json()[\"QueryResponse\"][\"totalCount\"])\n    # Retrieve entries in batches of 1000\n    for start_position in range(1, total_entries + 1, 1000):\n        query[\"startPosition\"] = start_position\n        response = requests.get(uri, headers=self.headers, params=query)\n        if response.status_code != 200:\n            self.log_error(\n                f\"Unable to retrieve {entity} entries: {response.text}\"\n            )\n            return\n        entries = response.json()[\"QueryResponse\"][\"Entity\"]\n        if not entries:\n            break\n        # Preprocess and save the entries\n        self.log_info(\n            f\"Migrating {len(entries)} {entity} entries from QuickBooks\"\n        )\n        for entry in entries:\n            try:\n                self.preprocess_and_save_entry(entry, entity)\n            except Exception as e:\n                self.log_error(\n                    f\"Unable to preprocess and save {entity} entry: {traceback.format_exc()}\"\n                )\n\n", "CodeBleu_score": 34.101057600015785}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    if invoice[\"InvoiceType\"] == \"StatementCharge\":\n        self.save_statement_charge(invoice)\n    elif invoice[\"InvoiceType\"] == \"ReimburseCharge\":\n        self.save_reimburse_charge(invoice)\n    else:\n        self.save_sales_invoice(invoice)\n\n", "CodeBleu_score": 26.01648986777285}, {"code": "def _save_invoice(self, invoice)\n\t\n    if invoice.get(\"Type\") == \"StatementCharge\":\n        _save_statement_charge(self, invoice)\n    elif invoice.get(\"Type\") == \"ReimburseCharge\":\n        _save_reimburse_charge(self, invoice)\n    else:\n        _save_sales_invoice(self, invoice)\n\n", "CodeBleu_score": 23.887495913622832}, {"code": "def _save_invoice(self, invoice)\n\t\n    if invoice[\"InvoiceType\"] == \"StatementCharge\":\n        self.save_statement_charge_invoice(invoice)\n    elif invoice[\"InvoiceType\"] == \"ReimburseCharge\":\n        self.save_reimburse_charge_invoice(invoice)\n    else:\n        self.save_sales_invoice(invoice)\n\n", "CodeBleu_score": 26.494494512931432}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    if not start_date:\n        start_date = frappe.utils.getdate()\n\n    if not end_date:\n        end_date = add_days(start_date, 30)\n\n    if not no_of_visit:\n        no_of_visit = 1\n\n    if not sales_person:\n        sales_person = frappe.db.get_value(\"Employee\", {\"user_id\": frappe.session.user}, \"name\")\n\n    # Calculate the interval between visits\n    interval = date_diff(end_date, start_date) / no_of_visit\n\n    # Create a list of dates between the start and end date, and adjust the interval to account for holidays\n    schedule_list = []\n    current_date = start_date\n    for i in range(no_of_visit):\n        schedule_list.append(current_date)\n        current_date = add_days(current_date, interval)\n        while True:\n            holiday_list = get_holiday_list_for_employee(sales_person)\n            holiday_list = frappe.db.get_value(\"Holiday List\", holiday_list, \"holiday_list\")\n            if not frappe.db.get_value(\"Holiday\", {\"holiday_date\": current_date, \"parent\": holiday_list}):\n                break\n            current_date = add_days(current_date, 1)\n\n    return schedule_list\n\n", "CodeBleu_score": 36.869221305086754}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    # Get holidays for the salesperson\n    holiday_list = get_holiday_list_for_employee(sales_person)\n    holidays = frappe.db.sql(\n        \"\"\"\n            SELECT holiday_date FROM `tabHoliday` WHERE parent=%(holiday_list)s\n            AND holiday_date BETWEEN %(start_date)s AND %(end_date)s\n        \"\"\",\n        {\n            \"holiday_list\": holiday_list,\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n        },\n    )\n    holidays = [cstr(holiday[0]) for holiday in holidays]\n\n    # Calculate the interval between visits\n    interval = date_diff(end_date, start_date) / no_of_visit\n\n    # Create the schedule\n    schedule = []\n    for i in range(no_of_visit):\n        # Calculate the date of the visit\n        visit_date = add_days(start_date, interval * i)\n\n        # Adjust the date if it falls on a holiday\n        while visit_date in holidays:\n            visit_date = add_days(visit_date, 1)\n\n        # Add the visit to the schedule\n        schedule.append(visit_date)\n\n    return schedule\n\n", "CodeBleu_score": 31.264526634094103}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    holiday_list = get_holiday_list_for_employee(sales_person)\n    holidays = frappe.db.sql(\"\"\"select holiday_date from `tabHoliday` where parent=%s and holiday_date between %s and %s\"\"\", (holiday_list, start_date, end_date))\n    holidays = [cstr(holiday[0]) for holiday in holidays]\n\n    schedule = []\n    interval = date_diff(end_date, start_date) / (no_of_visit - 1)\n    for i in range(no_of_visit):\n        date = add_days(start_date, interval * i)\n        while date in holidays:\n            date = add_days(date, 1)\n        schedule.append(date)\n\n    return schedule\n\n", "CodeBleu_score": 28.564022294085547}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t        $method = $this->request->method();\n        $path = $this->request->path();\n        $handle = $this->request->handle();\n        $title = $this->request->title();\n        $bulk = $this->bulk($path, $handle);\n        $html = $this->html($view, $data);\n        $response = [\n            'success' => true,\n            'message' => $this->request->message(),\n            'data' => [\n                'title' => $title,\n                'path' => $path,\n                'handle' => $handle,\n                'html' => $html,\n                'bulk' => $bulk,\n            ],\n        ];\n        return response()->json($response);\n    }", "CodeBleu_score": 48.74123906097579}, {"code": "<?\n   public function response($view, $data = []){\n\t        $method = request()->method();\n        $data['bulk_actions'] = $this->bulkActions();\n        $data['modal_title'] = $this->getModalTitle($method);\n        $data['modal_path'] = $this->getModalPath($method);\n        $data['modal_handle'] = $this->getModalHandle($method);\n        $data['modal_html'] = view($view, $data)->render();\n        $data['success'] = true;\n        $data['message'] = $this->getModalMessage($method);\n        return response()->json($data);\n    }", "CodeBleu_score": 34.85031752675491}, {"code": "<?\n   public function response($view, $data = []){\n\t        $method = request()->method();\n        $data['bulk_actions'] = $this->bulkActions();\n        $data['path'] = $this->path;\n        $data['handle'] = $this->handle;\n\n        if ($method == 'POST') {\n            $data['title'] = trans('general.new');\n            $data['html'] = view($view, $data)->render();\n        } elseif ($method == 'GET') {\n            $data['title'] = trans('general.edit');\n            $data['html'] = view($view, $data)->render();\n        }\n\n        return response()->json([\n            'status' => 'success',\n            'message' => null,\n            'data' => $data\n        ]);\n    }", "CodeBleu_score": 39.717531595388486}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t    $contacts = $this->getSelectedContacts($request);\n\n    foreach ($contacts as $contact) {\n        try {\n            Bus::dispatch(new DeleteContact($contact));\n        } catch (Throwable $e) {\n            $this->error($e->getMessage());\n        }\n    }\n}", "CodeBleu_score": 56.92365707644518}, {"code": "<?\npublic function deleteContacts($request){\n\t    $contacts = $this->getSelectedContacts($request);\n\n    foreach ($contacts as $contact) {\n        try {\n            Bus::dispatch(new DeleteContact($contact));\n        } catch (Throwable $e) {\n            $this->showError($e);\n        }\n    }\n}", "CodeBleu_score": 52.487953884831114}, {"code": "<?\npublic function deleteContacts($request){\n\t\n    $contacts = $this->getContacts($request);\n\n    foreach ($contacts as $contact) {\n\n        try {\n\n            Bus::dispatchNow(new DeleteContact($contact));\n\n        } catch (Throwable $e) {\n\n            $this->error($e->getMessage());\n\n        }\n\n    }\n\n    return $this->success();\n\n}", "CodeBleu_score": 56.188552594183314}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getTransactions($request);\n\n    foreach ($transactions as $transaction) {\n        try {\n            Bus::dispatch(new DeleteTransaction($transaction));\n        } catch (Throwable $e) {\n            flash($e->getMessage())->error();\n        }\n    }\n\n    return $this;\n}", "CodeBleu_score": 57.64199156301593}, {"code": "<?\npublic function deleteTransactions($request){\n\t\t$transactions = $this->getTransactions($request);\n\t$count = $transactions->count();\n\t\n\tforeach ($transactions as $transaction) {\n\t\ttry {\n\t\t\tBus::dispatch(new DeleteTransaction($transaction));\n\t\t} catch (Throwable $e) {\n\t\t\tflash()->error(trans('misc.error_deleting_transaction'));\n\t\t\t\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tflash()->success(trans('misc.deleted_x_transactions', ['count' => $count]));\n\t\n\treturn true;\n}", "CodeBleu_score": 48.861684592670386}, {"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getTransactions($request);\n\n    if (empty($transactions)) {\n        $this->flashError(trans('messages.warning.deleted', ['name' => trans('transaction.transaction')]));\n\n        return redirect()->back();\n    }\n\n    foreach ($transactions as $transaction) {\n        try {\n            Bus::dispatch(new DeleteTransaction($transaction));\n        } catch (Throwable $e) {\n            $this->flashError(trans('messages.error.deleting', ['name' => trans('transaction.transaction')]));\n\n            return redirect()->back();\n        }\n    }\n\n    $this->flashSuccess(trans('messages.success.deleted', ['name' => trans('transaction.transaction')]));\n\n    return redirect()->back();\n}", "CodeBleu_score": 44.797124967407406}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t    $request = $this->getRequest();\n\n    if (!$request instanceof FormRequest) {\n        return;\n    }\n\n    $rules = $request->getRules();\n\n    $validator->each(function ($row, $index) use ($rules) {\n        $request = $this->getRequest();\n\n        $request->initialize($row, $this->getFiles(), $this->getSession(), $this->getValidator());\n\n        $request->setContainer($this->getContainer());\n\n        $request->setRedirector($this->getRedirector());\n\n        $request->setUserResolver($this->getUserResolver());\n\n        $request->setRouteResolver($this->getRouteResolver());\n\n        $request->setValidator($this->getValidator());\n\n        $rules = $request->getRules();\n\n        $messages = $request->getMessages();\n\n        $customAttributes = $request->getCustomAttributes();\n\n        try {\n            $request->validateResolved();\n        } catch (ValidationException $e) {\n            $failures = $e->validator->failed();\n\n            foreach ($failures as $field => $messages) {\n                $validator->errors()->add($field, $messages[0]);\n            }\n\n            throw $e;\n        }\n    });\n}", "CodeBleu_score": 44.31211824753425}, {"code": "<?\npublic function withValidator($validator){\n\t    $request = $this->getRequest();\n\n    if (!$request instanceof FormRequest) {\n        return;\n    }\n\n    $request->prepareForValidation();\n\n    $rules = $request->getValidatorRules();\n\n    $messages = $request->getValidatorMessages();\n\n    $attributes = $request->getValidatorAttributes();\n\n    $validator->setRules($rules);\n\n    $validator->setMessages($messages);\n\n    $validator->setAttributeNames($attributes);\n\n    $validator->validate();\n\n    $failures = $validator->getFailures();\n\n    if (count($failures) > 0) {\n        $validator->addFailures($failures);\n\n        throw new ValidationException($validator);\n    }\n}", "CodeBleu_score": 38.37799148979584}, {"code": "<?\npublic function withValidator($validator){\n\t    $requestClass = $this->getRequestClass();\n    if (!$requestClass || !is_a($requestClass, FormRequest::class, true)) {\n        return;\n    }\n\n    $this->each(function ($row, $index) use ($validator, $requestClass) {\n        $request = new $requestClass;\n        $request->setData($row);\n        $request->setIndex($index);\n        $request->setRules($this->getRules());\n        $request->setAttributes($this->getAttributes());\n        $request->setValidator($validator);\n        $request->validate();\n    });\n}", "CodeBleu_score": 27.651946010350887}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if (is_null($this->model) && $arguments[0] instanceof Model) {\n        $this->setModel($arguments[0]);\n    }\n\n    if (is_null($this->request) && $arguments[1] instanceof Request) {\n        $this->setRequest($arguments[1]);\n    }\n\n    if ($this instanceof ShouldUpdate) {\n        $this->update();\n    }\n}", "CodeBleu_score": 35.78027453921915}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if ($this instanceof ShouldUpdate) {\n        $this->setModel(\n            $arguments[0] instanceof Model ? $arguments[0] : $this->getModel()\n        );\n        $this->setRequest(\n            $arguments[1] instanceof Request ? $arguments[1] : $this->getRequest()\n        );\n        $this->update();\n    }\n}", "CodeBleu_score": 30.120203192843114}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if ($this instanceof ShouldUpdate) {\n        $this->setModel($arguments[0] ?? null);\n        $this->setRequest($arguments[1] ?? null);\n        $this->update();\n    }\n}", "CodeBleu_score": 22.719338789291328}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t     $sort = $sort ?: 'name';\n     $sort = $this->checkSort($sort);\n     $direction = 'asc';\n     $request = request();\n\n     if ($request->filled('sort')) {\n         $sort = $request->input('sort');\n     }\n\n     if ($request->filled('direction')) {\n         $direction = $request->input('direction');\n     }\n\n     $request->merge([\n         'sort' => $sort,\n         'direction' => $direction,\n     ]);\n\n     if ($request->has('search')) {\n         $query->searchString($request->get('search'));\n     }\n\n     $query->orderBy($sort, $direction);\n\n     if ($request->has('limit')) {\n         $query->limit($request->get('limit'));\n     }\n\n     if ($request->has('offset')) {\n         $query->skip($request->get('offset'));\n     }\n\n     if ($request->has('export')) {\n         return $query->get();\n     }\n\n     return $query->paginate();\n }", "CodeBleu_score": 43.97840143603876}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t     $request = request();\n\n     // Check if sorting is requested.\n     if ($request->has('sort')) {\n         // Retrieve the sort parameter from the request.\n         $sort = $request->input('sort');\n\n         // Check if the sort parameter is valid.\n         if (in_array($sort, $this->getSortable())) {\n             // Sort the query by the requested column.\n             $query->sortable($sort);\n         }\n     }\n\n     // Check if a search string is requested.\n     if ($request->has('search')) {\n         // Retrieve the search string from the request.\n         $search = $request->input('search');\n\n         // Check if the search string is valid.\n         if (strlen($search) >= config('search-string.min_length')) {\n             // Apply the search string to the query.\n             $query->searchString($search);\n         }\n     }\n\n     // Check if the request expects a JSON response and is not an API request.\n     if ($request->expectsJson() && !$request->is('api/*')) {\n         // Return all records.\n         return $query->get();\n     }\n\n     // Check if a limit is requested.\n     if ($request->has('limit')) {\n         // Retrieve the limit parameter from the request.\n         $limit = $request->input('limit');\n\n         // Check if the limit parameter is valid.\n         if (is_numeric($limit) && $limit > 0) {\n             // Limit the query to the requested number of records.\n             return $query->paginate($limit);\n         }\n     }\n\n     // Limit the query to the default number of records.\n     return $query->paginate();\n }", "CodeBleu_score": 46.877600229775375}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t \t$sort = $this->getSort($sort);\n\n \t$query->searchStringApplying()->searchStringApplied();\n\n \tif ($this->isJson() && !$this->isApi()) {\n \t\treturn $query->get();\n \t}\n\n \treturn $query->paginate($this->getLimit());\n }", "CodeBleu_score": 30.40555759452349}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $totals = [\n        'open' => 0,\n        'overdue' => 0,\n    ];\n\n    if ($model->status == 'paid') {\n        return $totals;\n    }\n\n    $totals['open'] = $model->getAmount();\n\n    if ($model->status == 'partial') {\n        $totals['open'] -= $model->getPaidAmount();\n    }\n\n    if ($model->due_at && $model->due_at->isPast()) {\n        $totals['overdue'] = $totals['open'];\n        $totals['open'] = 0;\n    }\n\n    return $totals;\n}", "CodeBleu_score": 40.06913310563984}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $paid = $model->status == 'paid';\n\n    $open = 0;\n    $overdue = 0;\n\n    if ($model->status == 'partial') {\n        $open = $model->payments()->sum('amount');\n    }\n\n    if (!$paid) {\n        $date = new Date($model->due_at);\n\n        if ($date->isPast()) {\n            $overdue = $model->amount - $open;\n        } else {\n            $open = $model->amount - $open;\n        }\n    }\n\n    return compact('open', 'overdue');\n}", "CodeBleu_score": 42.0040084847376}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\n    // Initialize the amounts\n    $amounts = ['open' => 0, 'overdue' => 0];\n\n    // Check if the document is paid, return zeroes if true\n    if ($model->status == 'paid') {\n        return $amounts;\n    }\n\n    // Sum the payments from transactions\n    $amounts['paid'] = $model->transactions()->sum('amount');\n\n    // Determine if the document is open or overdue\n    $due = Date::parse($model->due_at)->format('Y-m-d');\n    $now = Date::now()->format('Y-m-d');\n\n    // If the due date has passed, the document is overdue\n    if ($due < $now) {\n        $amounts['overdue'] = $amounts['paid'];\n        $amounts['open'] = 0;\n    } else {\n        $amounts['open'] = $amounts['paid'];\n        $amounts['overdue'] = 0;\n    }\n\n    return $amounts;\n}", "CodeBleu_score": 39.948943523385886}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $results = ($total = $this->toBase()->getCountForPagination())\n        ? $this->forPage($page, $perPage)->get($columns)\n        : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 94.45482028973187}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $results = ($total = $this->toBase()->getCountForPagination()) ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n    return new Paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 89.94855010685005}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $total = $this->getTotalCount();\n    $results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 82.91281829824722}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t    $reconciliations = $this->getReconciliations($request);\n\n    foreach ($reconciliations as $reconciliation) {\n        $this->reconcileReconciliation($reconciliation);\n    }\n\n    return $reconciliations;\n}", "CodeBleu_score": 25.48447692923121}, {"code": "<?\npublic function reconcile($request){\n\t    $reconciliations = $this->getReconciliations($request);\n\n    if ($reconciliations->count() == 0) {\n        return false;\n    }\n\n    foreach ($reconciliations as $reconciliation) {\n        $reconciliation->status = Reconciliation::STATUS_RECONCILED;\n        $reconciliation->save();\n\n        $this->reconcileTransactions($reconciliation);\n    }\n\n    return true;\n}", "CodeBleu_score": 37.90694464870017}, {"code": "<?\npublic function reconcile($request){\n\t    $reconciliations = Reconciliation::whereIn('id', $request->input('reconciliations'))->get();\n\n    foreach ($reconciliations as $reconciliation) {\n        $reconciliation->status = 'reconciled';\n        $reconciliation->save();\n\n        $transactions = Transaction::where('account_id', $reconciliation->account_id)\n            ->where('paid_at', '>=', $reconciliation->started_at)\n            ->where('paid_at', '<=', $reconciliation->ended_at)\n            ->get();\n\n        foreach ($transactions as $transaction) {\n            $transaction->status = 'reconciled';\n            $transaction->save();\n        }\n    }\n}", "CodeBleu_score": 42.39525200084011}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t    $this->transaction(function () {\n        $this->deleteExistingInvitations();\n        $this->createInvitation();\n        $this->dispatchNotification();\n    });\n\n    return $this->invitation;\n}", "CodeBleu_score": 10.708809499127334}, {"code": "<?\npublic function handle(): UserInvitation{\n\t    $this->beginTransaction();\n    $this->deleteExistingInvitations();\n    $invitation = $this->createNewInvitation();\n    $this->dispatchNotificationJob($invitation);\n    $this->commit();\n\n    return $invitation;\n}", "CodeBleu_score": 10.745898142045041}, {"code": "<?\npublic function handle(): UserInvitation{\n\t    $this->transaction(function () {\n        $this->deleteExistingInvitations();\n\n        $this->invitation = $this->createInvitation();\n\n        $this->dispatchNotification();\n    });\n\n    return $this->invitation;\n}", "CodeBleu_score": 13.532645182561476}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\t    if ($this->transaction->reconciled_at) {\n        throw new \\Exception('This transaction has already been reconciled.');\n    }\n\n    if ($this->transaction->type === Transaction::TYPE_TRANSFER) {\n        throw new \\Exception('This transaction is a transfer.');\n    }\n}", "CodeBleu_score": 32.57360754826089}, {"code": "<?\npublic function authorize(): void{\n\t    if ($this->transaction->is_reconciled) {\n        throw new \\Exception(__('app.error_transaction_already_reconciled'));\n    }\n\n    if ($this->transaction->is_transfer) {\n        throw new \\Exception(__('app.error_transaction_is_transfer'));\n    }\n}", "CodeBleu_score": 31.61878340142139}, {"code": "<?\npublic function authorize(): void{\n\t    if ($this->transaction->reconciled_at) {\n        throw new \\Exception(__('app.error.transaction_reconciled'));\n    }\n\n    if ($this->transaction->type == Transaction::TYPE_TRANSFER) {\n        throw new \\Exception(__('app.error.transaction_transfer'));\n    }\n}", "CodeBleu_score": 30.97446814752289}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t    Long tenantId = getTenantId();\n    if (tenantId == null) {\n        return false;\n    }\n    if (tenantId == 0L) {\n        return false;\n    }\n    if (\"user\".equalsIgnoreCase(tableName)) {\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 19.101871981393955}, {"code": "public boolean doTableFilter(String tableName){\n\t    if (tableName.equals(\"user\")) {\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 6.206317772771971}, {"code": "public boolean doTableFilter(String tableName){\n\t    if (tableName.equals(\"user\")) {\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 6.206317772771971}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.2955715722213}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.2955715722213}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.2955715722213}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    Map<String, Object> map = new HashMap<String, Object>();\n    try{\n        List<Account> accountList = accountService.findBySelect();\n        List<AccountVo4List> accountVo4List = accountService.findAccountVo4List(accountList);\n        String json = JSONArray.toJSONString(accountVo4List);\n        map.put(\"accountList\",json);\n        res.code = 200;\n        res.data = map;\n    } catch(Exception e){\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return returnJson(res, ErpInfo.OK.code, ErpInfo.OK.msg);\n}", "CodeBleu_score": 37.09205843150221}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    Map<String, Object> map = new HashMap<String, Object>();\n    try {\n        List<Account> accountList = accountService.getAccount();\n        StringBuffer json = new StringBuffer();\n        json.append(\"[\");\n        for (int i = 0; i < accountList.size(); i++) {\n            Account account = accountList.get(i);\n            if (i != accountList.size() - 1) {\n                json.append(\"{id:'\" + account.getId() + \"',text:'\" + account.getName() + \"',accountNumber:'\" + account.getAccountNumber() + \"',accountName:'\" + account.getAccountName() + \"',accountType:'\" + account.getAccountType() + \"',accountTypeName:'\" + account.getAccountTypeName() + \"',accountState:'\" + account.getAccountState() + \"',accountStateName:'\" + account.getAccountStateName() + \"',parentId:'\" + account.getParentId() + \"',parentName:'\" + account.getParentName() + \"',remark:'\" + account.getRemark() + \"',balance:'\" + account.getBalance() + \"',balanceName:'\" + account.getBalanceName() + \"'},\");\n            } else {\n                json.append(\"{id:'\" + account.getId() + \"',text:'\" + account.getName() + \"',accountNumber:'\" + account.getAccountNumber() + \"',accountName:'\" + account.getAccountName() + \"',accountType:'\" + account.getAccountType() + \"',accountTypeName:'\" + account.getAccountTypeName() + \"',accountState:'\" + account.getAccountState() + \"',accountStateName:'\" + account.getAccountStateName() + \"',parentId:'\" + account.getParentId() + \"',parentName:'\" + account.getParentName() + \"',remark:'\" + account.getRemark() + \"',balance:'\" + account.getBalance() + \"',balanceName:'\" + account.getBalanceName() + \"'}]\");\n            }\n        }\n        map.put(\"account\",", "CodeBleu_score": 27.866550079766867}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    Map<String, Object> map = new HashMap<String, Object>();\n    try {\n        List<AccountVo4List> depList = accountService.findBySelect();\n        if(depList != null && depList.size() > 0) {\n            res.code = 200;\n            res.data = depList;\n            res.setMsg(\"\u6570\u636e\u67e5\u8be2\u6210\u529f\uff01\");\n        } else {\n            res.code = 204;\n            res.setMsg(\"\u6ca1\u6709\u67e5\u5230\u6570\u636e\uff01\");\n        }\n    } catch(Exception e){\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u67e5\u8be2\u6570\u636e\u5931\u8d25\";\n    }\n    return returnJson(res, new ErpInfo().toString());\n}", "CodeBleu_score": 36.041528463539144}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            List<AccountVo4List> accountVo4Lists = accountService.getAccountVo4List(name, serialNo, currentPage, pageSize);\n            int count = accountService.getAccountVo4ListCount(name, serialNo);\n            res.code = 200;\n            res.data = accountVo4Lists;\n            res.count = count;\n        } catch (Exception e) {\n            e.printStackTrace();\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 47.39284620889181}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        Map<String, Object> map = new HashMap<String, Object>();\n        try {\n            List<AccountVo4List> list = accountService.getAccountVoList(name, serialNo, currentPage, pageSize);\n            Long count = accountService.getAccountCount(name, serialNo);\n            map.put(\"accountList\", list);\n            map.put(\"count\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            e.printStackTrace();\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 60.63255925900432}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        Map<String, Object> data = new HashMap<String, Object>();\n        try {\n            List<AccountVo4List> list = accountService.getAccountVo4List(name, serialNo, currentPage, pageSize);\n            Long count = accountService.getAccountCount(name, serialNo);\n            data.put(\"rows\", list);\n            data.put(\"total\", count);\n            res.code = 200;\n            res.data = data;\n        } catch(Exception e){\n            e.printStackTrace();\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 57.60128083292817}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<AccountVo4List> accountVo4List = accountService.getAccountVo4List(name, serialNo);\n        res.code = 200;\n        res.data = accountVo4List;\n    } catch (Exception e) {\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 58.288126950072105}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<AccountVo4List> list = accountService.getStatistics(name, serialNo);\n        res.code = 200;\n        res.data = list;\n    } catch (Exception e) {\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 58.63965947337575}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<Account> list = accountService.getStatistics(name, serialNo);\n        res.code = 200;\n        res.data = list;\n    } catch (Exception e) {\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 58.547069621116044}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            List<AccountHead> dataList = accountHeadService.getAccountHeadByNumber(billNo);\n            if(dataList.size()>0){\n                AccountHead accountHead = dataList.get(0);\n                res.code = 200;\n                res.data = accountHead;\n            }else{\n                res.code = 200;\n                res.data = \"No data\";\n            }\n        } catch(Exception e){\n            e.printStackTrace();\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 56.571737954888754}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            AccountHeadVo4Body accountHeadVo4Body = accountHeadService.getDetailByNumber(billNo);\n            if(accountHeadVo4Body != null){\n                res.code = 200;\n                res.data = accountHeadVo4Body;\n            }else{\n                res.code = 200;\n                res.data = new AccountHeadVo4Body();\n            }\n        } catch(Exception e){\n            e.printStackTrace();\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u5355\u636e\u8be6\u7ec6\u4fe1\u606f\u5f02\u5e38\";\n        }\n        return res;\n    }", "CodeBleu_score": 50.93099122881255}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            List<AccountHeadVo4Body> dataList = accountHeadService.getDetailByNumber(billNo);\n            if(dataList != null && dataList.size() > 0) {\n                res.code = 200;\n                res.data = dataList.get(0);\n            } else {\n                res.code = 200;\n                res.data = new AccountHeadVo4Body();\n            }\n        } catch(Exception e){\n            e.printStackTrace();\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 58.46803920529175}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<DepotEx> depotList = depotService.findDepotByCurrentUser(request);\n        res.code = 200;\n        res.data = depotList;\n    } catch(Exception e){\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 62.04233462915191}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    String userName = request.getParameter(\"userName\");\n    String token = request.getParameter(\"token\");\n    String depotIds = request.getParameter(\"depotIds\");\n    try {\n        List<DepotEx> depotList = depotService.findDepotByCurrentUser(userName, token, depotIds);\n        res.code = 200;\n        res.data = depotList;\n    } catch (Exception e) {\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 59.09694175704021}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<Depot> depotList = depotService.findDepotByCurrentUser(request);\n        res.code = 200;\n        res.data = depotList;\n    } catch (Exception e) {\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 64.25404443056902}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray jsonArray = new JSONArray();\n    JSONObject jsonObject = new JSONObject();\n    try {\n        List<Function> list = functionService.findRoleFunction(type, keyId);\n        if(list.size() > 0) {\n            if(type.equals(\"1\") && keyId.equals(\"1\")) {\n                // \u8d85\u7ea7\u7ba1\u7406\u5458\n                jsonObject.put(\"functions\", list);\n            } else {\n                // \u975e\u8d85\u7ea7\u7ba1\u7406\u5458\n                List<Function> functions = new ArrayList<Function>();\n                for(Function function : list) {\n                    if(!function.getName().equals(\"\u7cfb\u7edf\u7ba1\u7406\")) {\n                        functions.add(function);\n                    }\n                }\n                jsonObject.put(\"functions\", functions);\n            }\n        } else {\n            jsonObject.put(\"functions\", list);\n        }\n        jsonArray.add(jsonObject);\n    } catch(Exception e) {\n        e.printStackTrace();\n        logger.error(\">>>>>>>>>>>>>>>>>>>\u67e5\u8be2\u89d2\u8272\u529f\u80fd\u4fe1\u606f\u5f02\u5e38\", e);\n        throw new Exception(\"\u67e5\u8be2\u89d2\u8272\u529f\u80fd\u4fe1\u606f\u5f02\u5e38\");\n    }\n    return jsonArray;\n}", "CodeBleu_score": 39.20189344962806}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray ja = new JSONArray();\n    JSONObject jo = new JSONObject();\n    List<Function> functionList = null;\n    try {\n        functionList = functionService.findByTypeAndKeyId(type, keyId);\n        if(functionList.size()>0){\n            for (Function function : functionList) {\n                if(!\"\u7cfb\u7edf\u7ba1\u7406\".equals(function.getFunctionName())){\n                    jo.put(\"id\", function.getId());\n                    jo.put(\"functionName\", function.getFunctionName());\n                    jo.put(\"functionUrl\", function.getFunctionUrl());\n                    ja.add(jo);\n                }\n            }\n        }\n    } catch (DataAccessException e) {\n        logger.error(\">>>>>>>>>>>>>>>>>>>\u67e5\u8be2\u89d2\u8272\u529f\u80fd\u4fe1\u606f\u5f02\u5e38\", e);\n        throw new BusinessRunTimeException(ExceptionConstants.DATA_ACCESS_FAILURE);\n    }\n    return ja;\n}", "CodeBleu_score": 30.600098064371505}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray jsonArray = new JSONArray();\n    try {\n        // \u83b7\u53d6\u767b\u5f55\u7528\u6237\u4fe1\u606f\n        User user = (User) request.getSession().getAttribute(\"user\");\n        // \u83b7\u53d6\u767b\u5f55\u7528\u6237\u5bf9\u8c61\u4fe1\u606f\n        UserBusiness userBusiness = userBusinessService.getUserBusiness(user.getId(), type, keyId);\n        if(userBusiness == null){\n            // \u5982\u679c\u6ca1\u6709\u5bf9\u5e94\u7684\u7528\u6237\u5bf9\u8c61\u4fe1\u606f\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\n            userBusiness = new UserBusiness();\n            userBusiness.setUserId(user.getId());\n            userBusiness.setUbKeyId(keyId);\n            userBusiness.setUbType(type);\n            userBusiness.setUbName(keyId);\n            userBusinessService.insertUserBusiness(userBusiness);\n        }\n        // \u83b7\u53d6\u89d2\u8272\u4fe1\u606f\n        List<Function> functionList = functionService.getFunctionListByTypeAndKeyId(type, keyId);\n        // \u5982\u679c\u662f\u7ba1\u7406\u5458\uff0c\u5219\u83b7\u53d6\u6240\u6709\u7684\u529f\u80fd\n        if(user.getType() == 0){\n            functionList = functionService.getFunctionListByType(type);\n        }\n        JSONObject jsonObject = new JSONObject();\n        JSONArray jsonArray2 = new JSONArray();\n        for(Function function : functionList){\n            // \u8fc7\u6ee4\u6389\u7cfb\u7edf\u7ba1\u7406\n            if(function.getFName().equals(\"\u7cfb\u7edf\u7ba1\u7406\")){\n                continue;\n            }\n            // \u6dfb\u52a0\u529f\u80fd\n            jsonArray2.add(function);\n        }\n        // \u6dfb\u52a0\u529f\u80fd\u5217\u8868\n        jsonObject.put(\"functionList\", jsonArray2);\n        // \u6dfb\u52a0\u7528\u6237\u5bf9\u8c61\u4fe1\u606f\n        jsonObject.put(\"userBusiness\", userBusiness);\n        // \u6dfb\u52a0\u529f\u80fd\u5217\u8868\n        jsonArray.add(jsonObject);\n    } catch (DataAccessException e) {\n        logger.error(\">>>>>>>>>>>>>>>>>>>\u67e5\u8be2\u89d2\u8272\u529f\u80fd\u4fe1\u606f\u5f02\u5e38\", e);\n        throw new BusinessRunTimeException(", "CodeBleu_score": 41.52067680058382}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try{\n        PlatformConfig platformConfig = platformConfigService.getPlatformConfigByKey(platformKey);\n        if(platformConfig == null){\n            res.code = 404;\n            res.data = \"\u83b7\u53d6\u4fe1\u606f\u5931\u8d25\";\n        }else{\n            res.code = 200;\n            res.data = platformConfig;\n        }\n    }catch(Exception e){\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u4fe1\u606f\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 69.11730595963685}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try{\n        PlatformConfig platformConfig = platformConfigService.getPlatformConfigByKey(platformKey);\n        if(platformConfig == null){\n            res.code = 404;\n            res.data = \"Not Found\";\n            res.setMsg(\"\u672a\u627e\u5230\u8be5\u5e73\u53f0\u4fe1\u606f\");\n        }else{\n            res.code = 200;\n            res.data = platformConfig;\n        }\n    }catch (Exception e){\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"db error\";\n        res.setMsg(\"\u6570\u636e\u5e93\u5f02\u5e38\");\n    }\n    return res;\n}", "CodeBleu_score": 69.89466327092096}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    PlatformConfig platformConfig = null;\n    try{\n        platformConfig = platformConfigService.getPlatformConfigByKey(platformKey);\n        res.code = 200;\n        res.data = platformConfig;\n    } catch (Exception e) {\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 65.10768838978119}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList(null);\n        if(systemConfigList.size() > 0) {\n            res.code = 200;\n            res.data = systemConfigList.get(0);\n        } else {\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\";\n        }\n    } catch(Exception e) {\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 56.16011587081847}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<SystemConfig> systemConfigList = systemConfigService.getSystemConfig();\n        if (systemConfigList != null && systemConfigList.size() > 0) {\n            res.code = 200;\n            res.data = systemConfigList.get(0);\n        } else {\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\";\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\u5f02\u5e38\";\n    }\n    return res;\n}", "CodeBleu_score": 59.63386896012235}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<SystemConfig> list = systemConfigService.getSystemConfig();\n        if (null != list) {\n            res.code = 200;\n            res.data = list.get(0);\n        } else {\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 68.00251374977775}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    String filePath = null;\n    String fileName = null;\n    String fileType = null;\n    String fileUrl = null;\n    String fileRealName = null;\n    String fileBusinessType = null;\n    String fileBusinessId = null;\n    String fileBusinessUrl = null;\n    String fileBusinessKey = null;\n    String fileBusinessValue = null;\n    String fileBusinessKeyValue = null;\n    String fileBusinessValueValue = null;\n    String fileBusinessValueName = null;\n    String fileBusinessValueNameValue = null;\n    String fileBusinessValuePath = null;\n    String fileBusinessValuePathValue = null;\n    String fileBusinessValueUrl = null;\n    String fileBusinessValueUrlValue = null;\n    String fileBusinessValueThumb = null;\n    String fileBusinessValueThumbValue = null;\n    String fileBusinessValueThumbUrl = null;\n    String fileBusinessValueThumbUrlValue = null;\n    String fileBusinessValueThumbPath = null;\n    String fileBusinessValueThumbPathValue = null;\n    String fileBusinessValueThumbUrlPath = null;\n    String fileBusinessValueThumbUrlPathValue = null;\n    String fileBusinessValueThumbUrlName = null;\n    String fileBusinessValueThumbUrlNameValue = null;\n    String fileBusinessValueThumbUrlPathName = null;\n    String fileBusinessValueThumbUrlPathNameValue = null;\n    String fileBusinessValueThumbUrlPathNameValue2 = null;\n    String fileBusinessValueThumbUrlPathNameValue3 = null;\n    String fileBusinessValueThumbUrlPathNameValue4 = null;\n    String fileBusinessValueThumbUrlPathNameValue5 = null;\n    String fileBusinessValueThumbUrlPathNameValue6 = null;\n    String fileBusinessValueThumbUrlPathNameValue7 = null;\n    String fileBusinessValueThumbUrlPathNameValue8 = null;\n    String fileBusinessValueThumbUrlPathNameValue9 = null;\n    String fileBusinessValueThumbUrlPathNameValue10 = null;\n    String fileBusinessValueThumbUrl", "CodeBleu_score": 6.259288064966801}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    // \u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u8def\u5f84\n    String path = request.getParameter(\"path\");\n    // \u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u7c7b\u578b\n    String type = request.getParameter(\"type\");\n    // \u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\n    MultipartFile file = ((MultipartHttpServletRequest) request).getFile(\"file\");\n    // \u5224\u65ad\u6587\u4ef6\u4e0a\u4f20\u7c7b\u578b\n    if (type.equals(\"local\")) {\n        // \u672c\u5730\u6587\u4ef6\u4e0a\u4f20\n        return localUpload(path, file);\n    } else if (type.equals(\"oss\")) {\n        // \u963f\u91cc\u4e91oss\u6587\u4ef6\u4e0a\u4f20\n        return ossUpload(path, file);\n    } else {\n        // \u6587\u4ef6\u4e0a\u4f20\u7c7b\u578b\u9519\u8bef\n        return new BaseResponseInfo(false, \"\u6587\u4ef6\u4e0a\u4f20\u7c7b\u578b\u9519\u8bef\");\n    }\n}", "CodeBleu_score": 22.182640784053557}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    // \u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u7684\u8def\u5f84\n    String path = request.getParameter(\"path\");\n    // \u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\n    MultipartFile file = ((MultipartHttpServletRequest) request).getFile(\"file\");\n    // \u5224\u65ad\u4e0a\u4f20\u6587\u4ef6\u662f\u5426\u4e3a\u7a7a\n    if (file == null) {\n        return new BaseResponseInfo(400, \"\u4e0a\u4f20\u6587\u4ef6\u4e3a\u7a7a!\");\n    }\n    // \u83b7\u53d6\u6587\u4ef6\u540d\n    String fileName = file.getOriginalFilename();\n    // \u5224\u65ad\u6587\u4ef6\u662f\u5426\u4e3a\u7a7a\n    if (StringUtil.isEmpty(fileName)) {\n        return new BaseResponseInfo(400, \"\u4e0a\u4f20\u6587\u4ef6\u4e3a\u7a7a!\");\n    }\n    // \u83b7\u53d6\u6587\u4ef6\u540e\u7f00\n    String fileSuffix = fileName.substring(fileName.lastIndexOf(\".\"));\n    // \u5224\u65ad\u6587\u4ef6\u540e\u7f00\u662f\u5426\u4e3a\u7a7a\n    if (StringUtil.isEmpty(fileSuffix)) {\n        return new BaseResponseInfo(400, \"\u4e0a\u4f20\u6587\u4ef6\u540e\u7f00\u4e3a\u7a7a!\");\n    }\n    // \u5224\u65ad\u6587\u4ef6\u540e\u7f00\u662f\u5426\u7b26\u5408\u8981\u6c42\n    if (!fileSuffix.equals(\".jpg\") && !fileSuffix.equals(\".png\") && !fileSuffix.equals(\".jpeg\")) {\n        return new BaseResponseInfo(400, \"\u4e0a\u4f20\u6587\u4ef6\u540e\u7f00\u4e0d\u7b26\u5408\u8981\u6c42!\");\n    }\n    // \u83b7\u53d6\u6587\u4ef6\u7c7b\u578b\n    String fileType = file.getContentType();\n    // \u5224\u65ad\u6587\u4ef6\u7c7b\u578b\u662f\u5426\u4e3a\u7a7a\n    if (StringUtil.isEmpty(fileType)) {\n        return new BaseResponseInfo(400, \"\u4e0a\u4f20\u6587\u4ef6\u7c7b\u578b\u4e3a\u7a7a!\");\n    }\n    // \u5224\u65ad\u6587\u4ef6\u7c7b\u578b\u662f\u5426\u7b26\u5408\u8981\u6c42\n    if (!fileType.equals(\"image/jpeg\") && !fileType.equals(\"image/png\") && !fileType.equals(\"image/jpg\")) {\n        return new BaseResponseInfo(400, \"\u4e0a\u4f20\u6587\u4ef6\u7c7b\u578b\u4e0d\u7b26\u5408\u8981\u6c42!\");\n    }\n    // \u83b7\u53d6\u6587\u4ef6\u5927\u5c0f\n    long file", "CodeBleu_score": 27.421667769828105}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t\n        String fileName = \"\";\n        try {\n            fileName = jsonObject.getString(\"fileName\");\n        } catch (Exception e) {\n            fileName = \"\u5bfc\u51fa\u6587\u4ef6\";\n        }\n        fileName += \".xls\";\n        response.setContentType(\"application/octet-stream;charset=UTF-8\");\n        response.setHeader(\"Content-Disposition\", \"attachment;filename=\" + new String(fileName.getBytes(\"UTF-8\"), \"iso-8859-1\"));\n        response.setHeader(\"Pragma\", \"no-cache\");\n        response.setHeader(\"Cache-Control\", \"no-cache\");\n        response.setDateHeader(\"Expires\", 0);\n        try {\n            byte[] content = excelService.createExcelByParam(jsonObject);\n            OutputStream os = response.getOutputStream();\n            os.write(content);\n            os.flush();\n            os.close();\n        } catch (Exception e) {\n            logger.error(\"\u5bfc\u51faExcel\u6587\u4ef6\u5f02\u5e38\", e);\n        }\n    }", "CodeBleu_score": 34.60280758691809}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t        try {\n            // get the title, head, tip, and data list from the JSON object\n            String title = jsonObject.getString(\"title\");\n            String[] head = jsonObject.getJSONArray(\"head\").toArray(new String[0]);\n            String[] tip = jsonObject.getJSONArray(\"tip\").toArray(new String[0]);\n            List data = jsonObject.getJSONArray(\"data\").toJavaList(Object.class);\n            // call the service to perform the export\n            BaseResponseInfo res = systemConfigService.exportExcelByParam(title, head, tip, data);\n            // write the output to the HTTP response\n            FileUtils.writeFile(response, res.getData().toString());\n        } catch (Exception e) {\n            // log and send any exceptions that occur during the process\n            e.printStackTrace();\n            logger.error(\"exportExcelByParam error:\", e);\n            BaseResponseInfo.error(\"\u5bfc\u51fa\u6570\u636e\u5931\u8d25!\");\n        }\n    }", "CodeBleu_score": 49.637390223552316}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t        try {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            List<String> data = jsonObject.getJSONArray(\"data\").toJavaList(String.class);\n            String fileName = title + \".xls\";\n            response.setHeader(\"Content-Disposition\", \"attachment;filename=\" + fileName);\n            response.setContentType(\"application/vnd.ms-excel\");\n            // Write the head and tip to the output stream.\n            OutputStream outputStream = response.getOutputStream();\n            outputStream.write(head.getBytes(\"UTF-8\"));\n            outputStream.write(tip.getBytes(\"UTF-8\"));\n            // Write the data list to the output stream.\n            for (String row : data) {\n                outputStream.write(row.getBytes(\"UTF-8\"));\n            }\n            outputStream.close();\n        } catch (Exception e) {\n            logger.error(\"Export excel exception, error:{}\", e);\n        }\n    }", "CodeBleu_score": 51.93115200634102}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    Account account = new Account();\n    account.setAccountName(obj.getString(\"accountName\"));\n    account.setAccountCode(obj.getString(\"accountCode\"));\n    account.setAccountType(obj.getInteger(\"accountType\"));\n    account.setAccountNumber(obj.getString(\"accountNumber\"));\n    account.setAccountManager(obj.getString(\"accountManager\"));\n    account.setAccountManagerId(obj.getLong(\"accountManagerId\"));\n    account.setAccountManagerName(obj.getString(\"accountManagerName\"));\n    account.setAccountManagerPhone(obj.getString(\"accountManagerPhone\"));\n    account.setAccountManagerEmail(obj.getString(\"accountManagerEmail\"));\n    account.setAccountManagerAddress(obj.getString(\"accountManagerAddress\"));\n    account.setAccountManagerTaxNumber(obj.getString(\"accountManagerTaxNumber\"));\n    account.setAccountManagerBank(obj.getString(\"accountManagerBank\"));\n    account.setAccountManagerBankAccount(obj.getString(\"accountManagerBankAccount\"));\n    account.setAccountManagerBankAddress(obj.getString(\"accountManagerBankAddress\"));\n    account.setAccountRemark(obj.getString(\"accountRemark\"));\n    account.setAccountStatus(BusinessConstants.ACCOUNT_STATUS_NORMAL);\n    account.setIsDefault(obj.getInteger(\"isDefault\"));\n    account.setTenantId(obj.getLong(\"tenantId\"));\n    account.setDeleteFlag(0);\n    account.setEnabled(1);\n    account.setCreateTime(new Date());\n    account.setUpdateTime(new Date());\n    account.setCreateBy(obj.getLong(\"createBy\"));\n    account.setUpdateBy(obj.getLong(\"updateBy\"));\n    account.setTenantId(obj.getLong(\"tenantId\"));\n    account.setRemark(obj.getString(\"remark\"));\n    account.setAccountMoney(new BigDecimal(0));\n    account.setAccountMoneyCurrency(obj.getString(\"accountMoneyCurrency\"));\n    account.setAccountMoneyCurrencyName(obj.getString(\"accountMoneyCurrencyName\"));\n    account.setAccountMoneyCurrencyRate(new BigDecimal(1));\n    account.setAccount", "CodeBleu_score": 18.85702872110217}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    Account account = new Account();\n    account.setAccountName(obj.getString(\"accountName\"));\n    account.setAccountCode(obj.getString(\"accountCode\"));\n    account.setAccountType(obj.getInteger(\"accountType\"));\n    account.setAccountNumber(obj.getString(\"accountNumber\"));\n    account.setAccountMoney(BigDecimal.ZERO);\n    account.setAccountProfit(BigDecimal.ZERO);\n    account.setAccountLoss(BigDecimal.ZERO);\n    account.setParentId(obj.getLong(\"parentId\"));\n    account.setRemark(obj.getString(\"remark\"));\n    account.setIsDefault(obj.getBoolean(\"isDefault\"));\n    account.setIsEnable(true);\n    account.setIsLeaf(false);\n    account.setIsSystem(false);\n    account.setIsPosted(false);\n    account.setIsPosted2(false);\n    account.setIsPosted3(false);\n    account.setIsPosted4(false);\n    account.setIsPosted5(false);\n    account.setIsPosted6(false);\n    account.setIsPosted7(false);\n    account.setIsPosted8(false);\n    account.setIsPosted9(false);\n    account.setIsPosted10(false);\n    account.setIsPosted11(false);\n    account.setIsPosted12(false);\n    account.setIsPosted13(false);\n    account.setIsPosted14(false);\n    account.setIsPosted15(false);\n    account.setIsPosted16(false);\n    account.setIsPosted17(false);\n    account.setIsPosted18(false);\n    account.setIsPosted19(false);\n    account.setIsPosted20(false);\n    account.setIsPosted21(false);\n    account.setIsPosted22(false);\n    account.setIsPosted23(false);\n    account.setIsPosted24(false);\n    account.setIsPosted25(false);\n    account.", "CodeBleu_score": 22.534946036916264}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    Account account = new Account();\n    account.setAccountName(obj.getString(\"accountName\"));\n    account.setAccountCode(obj.getString(\"accountCode\"));\n    account.setAccountNumber(obj.getString(\"accountNumber\"));\n    account.setAccountType(obj.getString(\"accountType\"));\n    account.setAccountStatus(obj.getString(\"accountStatus\"));\n    account.setAccountCurrency(obj.getString(\"accountCurrency\"));\n    account.setAccountInitialAmount(obj.getString(\"accountInitialAmount\"));\n    account.setAccountRemark(obj.getString(\"accountRemark\"));\n    account.setAccountOrganization(obj.getString(\"accountOrganization\"));\n    account.setAccountContact(obj.getString(\"accountContact\"));\n    account.setAccountPhone(obj.getString(\"accountPhone\"));\n    account.setAccountEmail(obj.getString(\"accountEmail\"));\n    account.setAccountAddress(obj.getString(\"accountAddress\"));\n    account.setAccountBank(obj.getString(\"accountBank\"));\n    account.setAccountBankAccount(obj.getString(\"accountBankAccount\"));\n    account.setAccountBankAddress(obj.getString(\"accountBankAddress\"));\n    account.setAccountBankPhone(obj.getString(\"accountBankPhone\"));\n    account.setAccountBankRemark(obj.getString(\"accountBankRemark\"));\n    account.setAccountBankAccountName(obj.getString(\"accountBankAccountName\"));\n    account.setAccountBankAccountNumber(obj.getString(\"accountBankAccountNumber\"));\n    account.setAccountBankAccountBranch(obj.getString(\"accountBankAccountBranch\"));\n    account.setAccountBankAccountCurrency(obj.getString(\"accountBankAccountCurrency\"));\n    account.setAccountBankAccountSwiftCode(obj.getString(\"accountBankAccountSwiftCode\"));\n    account.setAccountBankAccountIban(obj.getString(\"accountBankAccountIban\"));\n    account.setAccountBankAccountBic(obj.getString(\"accountBankAccountBic\"));\n    account.setAccountBankAccountCountry(obj.getString(\"accountBankAccountCountry\"));\n    account.setAccountBankAccountProvince(obj.getString(\"accountBankAccountProvince\"));\n   ", "CodeBleu_score": 14.57317612759266}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    try {\n        return accountMapperEx.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        logger.error(\"Error in AccountServiceImpl.listWithBalanceCount: \", e);\n        return null;\n    }\n}", "CodeBleu_score": 31.4067545883547}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    try {\n        return accountMapperEx.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        logger.error(\"Error in AccountServiceImpl.listWithBalanceCount(): \", e);\n        return null;\n    }\n}", "CodeBleu_score": 31.2674466213151}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    Long count = 0L;\n    try {\n        count = accountMapperEx.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        logger.error(\"Error in listWithBalanceCount: \", e);\n    }\n    return count;\n}", "CodeBleu_score": 45.13360520722438}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    logger.info(\"deleteDepotItem, id:\" + id);\n    try{\n        return depotItemMapperEx.deleteById(id);\n    }catch(Exception e){\n        JshException.writeFail(logger, e);\n    }\n    return 0;\n}", "CodeBleu_score": 47.92051953454179}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    int res = 0;\n    try{\n        res = depotItemMapperEx.deleteById(id);\n        logService.insertLog(\"\u7269\u6599\u5e93\u5b58\",\n                new StringBuffer(BusinessConstants.LOG_OPERATION_TYPE_DELETE).append(id).toString(), request);\n    }catch(Exception e){\n        logger.error(\"\u5f02\u5e38\u7801[{}],\u5f02\u5e38\u63d0\u793a[{}],\u5f02\u5e38[{}]\",\n                ExceptionConstants.DEPOT_ITEM_DELETE_FAILED_CODE,ExceptionConstants.DEPOT_ITEM_DELETE_FAILED_MSG,e);\n        throw new BusinessRunTimeException(ExceptionConstants.DEPOT_ITEM_DELETE_FAILED_CODE,\n                ExceptionConstants.DEPOT_ITEM_DELETE_FAILED_MSG);\n    }\n    return res;\n}", "CodeBleu_score": 42.54358804126191}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    return 0;\n}", "CodeBleu_score": 10.58513275756444}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t    try {\n        CloseableHttpClient httpClient = HttpClients.createDefault();\n        HttpHost target = new HttpHost(\"localhost\", 8080, \"http\");\n        HttpGet httpGet = new HttpGet(\"/api/graph/\" + projectName + \"/\" + nodeType + \"/\" + nodeKey);\n        httpGet.setHeader(\"accept\", \"application/json\");\n        CloseableHttpResponse response = httpClient.execute(target, httpGet);\n        try {\n            HttpEntity entity = response.getEntity();\n            if (entity != null) {\n                EntityUtils.consume(entity);\n            }\n            return response.getStatusLine().getStatusCode() == 200;\n        } finally {\n            response.close();\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return false;\n}", "CodeBleu_score": 43.68142459397523}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t    try {\n        // Create an HTTP client\n        CloseableHttpClient httpClient = HttpClients.createDefault();\n\n        // Create the request URL\n        String url = \"http://localhost:8080/api/projects/\" + projectName + \"/nodes/\" + nodeType + \"/\" + nodeKey;\n\n        // Create the request object\n        HttpGet request = new HttpGet(url);\n\n        // Execute the request\n        CloseableHttpResponse response = httpClient.execute(request);\n\n        // Process the response\n        HttpEntity entity = response.getEntity();\n        String json = EntityUtils.toString(entity);\n        Map<String, Object> responseMap = new ObjectMapper().readValue(json, Map.class);\n        if (responseMap.containsKey(\"key\")) {\n            return true;\n        }\n        return false;\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return false;\n}", "CodeBleu_score": 47.88258775111737}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\n    // Create an HTTP client\n    CloseableHttpClient httpclient = HttpClients.createDefault();\n\n    // Create the request URL\n    String url = \"https://\" + projectName + \".skynet.im/graphql\";\n\n    // Create the request object\n    HttpGet request = new HttpGet(url);\n\n    // Add the required headers\n    request.addHeader(\"Content-Type\", \"application/json\");\n    request.addHeader(\"X-Skynet-API-Key\", \"<YOUR_API_KEY>\");\n\n    // Create the parameters\n    String params = \"{\\\"query\\\":\\\"mutation { createNode(node: { type: \\\\\\\"\" + nodeType + \"\\\\\\\", key: \\\\\\\"\" + nodeKey + \"\\\\\\\" }) { key } }\\\",\\\"variables\\\":null}\";\n\n    // Execute the request\n    try (CloseableHttpResponse response = httpclient.execute(request)) {\n        // Process the response\n        HttpEntity entity = response.getEntity();\n        String responseString = EntityUtils.toString(entity, \"UTF-8\");\n        ObjectMapper mapper = new ObjectMapper();\n        Map<String, Object> responseMap = mapper.readValue(responseString, Map.class);\n        Map<String, Object> dataMap = (Map<String, Object>) responseMap.get(\"data\");\n        Map<String, Object> createNodeMap = (Map<String, Object>) dataMap.get(\"createNode\");\n        return createNodeMap.containsKey(\"key\");\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        // Close the resources\n        try {\n            httpclient.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return false;\n}", "CodeBleu_score": 42.34563961109487}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\n    // Create a CloseableHttpClient to execute the request\n    CloseableHttpClient httpClient = HttpClients.createDefault();\n\n    // Create the endpoint URL by concatenating the base URL with the project name and edge type\n    String endpoint = baseUrl + \"/\" + projectName + \"/edges/\" + edgeType;\n\n    // Create a HttpGet object to execute the request\n    HttpGet getRequest = new HttpGet(endpoint);\n\n    // Create a map of parameters to include in the request\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"fromType\", fromType);\n    params.put(\"toType\", toType);\n    params.put(\"from\", from);\n    params.put(\"to\", to);\n\n    // Add the parameters to the request\n    getRequest.setParams(params);\n\n    // Execute the request and get the response\n    CloseableHttpResponse response = null;\n    try {\n        response = httpClient.execute(getRequest);\n    } catch (IOException e) {\n        System.out.println(\"Unable to execute request: \" + e.getMessage());\n    }\n\n    // Get the response body\n    String responseBody = null;\n    try {\n        HttpEntity entity = response.getEntity();\n        responseBody = EntityUtils.toString(entity);\n    } catch (IOException e) {\n        System.out.println(\"Unable to get response body: \" + e.getMessage());\n    }\n\n    // Check if the response contains a \"key\"\n    boolean success = false;\n    if (responseBody != null && responseBody.contains(\"key\")) {\n        success = true;\n    }\n\n    // Close the response and client\n    try {\n        response.close();\n        httpClient.close();\n    } catch (IOException e) {\n        System.out.println(\"Unable to close response or client: \" + e.getMessage());\n    }\n\n    // Return the success value\n    return success;\n}", "CodeBleu_score": 40.93393766290077}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\n    String endpoint = \"http://localhost:7474/db/data/schema/index/\";\n    String key = \"\";\n    String url = endpoint + projectName + \"/\" + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to;\n    try {\n        CloseableHttpClient client = HttpClients.createDefault();\n        HttpGet get = new HttpGet(url);\n        CloseableHttpResponse response = client.execute(get);\n        HttpEntity entity = response.getEntity();\n        String result = EntityUtils.toString(entity, Charset.forName(\"UTF-8\"));\n        Map<String, Object> map = new ObjectMapper().readValue(result, Map.class);\n        key = (String) map.get(\"key\");\n        client.close();\n        return !StringUtils.isEmpty(key);\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 52.9761569352586}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t    try {\n        // Create a CloseableHttpClient instance.\n        CloseableHttpClient httpclient = HttpClients.createDefault();\n\n        // Create a URI instance with the endpoint, resource, and query parameters.\n        URIBuilder builder = new URIBuilder(endpoint + \"/\" + projectName + \"/edges\");\n        builder.addParameter(\"type\", edgeType);\n        builder.addParameter(\"fromType\", fromType);\n        builder.addParameter(\"toType\", toType);\n        builder.addParameter(\"from\", from);\n        builder.addParameter(\"to\", to);\n\n        // Create a HttpGet instance with the URI instance.\n        HttpGet httpGet = new HttpGet(builder.build());\n\n        // Create a CloseableHttpResponse instance from the CloseableHttpClient instance and the HttpGet instance.\n        CloseableHttpResponse response = httpclient.execute(httpGet);\n\n        // Get the response entity from the CloseableHttpResponse instance.\n        HttpEntity entity = response.getEntity();\n\n        // Get the response body as a String.\n        String responseBody = EntityUtils.toString(entity);\n\n        // Close the CloseableHttpResponse instance.\n        response.close();\n\n        // Parse the response body as JSON.\n        JSONObject json = new JSONObject(responseBody);\n\n        // Return true if the \"key\" is present in the JSON.\n        return json.has(\"key\");\n    } catch (Exception e) {\n        // Handle exceptions.\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 43.047039370567354}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t    if (event == null || event.getMessage() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(testingLocation);\n    }\n    event.setEventTime(new Date());\n    try {\n        String json = mapper.writeValueAsString(event);\n        ProducerRecord<String, String> record = new ProducerRecord<>(\n            event.getTarget() != null ? event.getTarget() : \"test\", json);\n        producer.send(record);\n        producer.flush();\n    } catch (JsonProcessingException e) {\n        e.printStackTrace();\n    }\n}", "CodeBleu_score": 48.38351370444999}, {"code": "public void sendEvent(Event event){\n\t    if (event == null || event.getEvent() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(new Location());\n        event.getLocation().setLatitude(new Random().nextDouble() * 180 - 90);\n        event.getLocation().setLongitude(new Random().nextDouble() * 360 - 180);\n    }\n    event.setEventTime(new Date());\n    String json = null;\n    try {\n        json = objectMapper.writeValueAsString(event);\n    } catch (JsonProcessingException e) {\n        e.printStackTrace();\n    }\n    if (json == null) {\n        return;\n    }\n    String topic = event.getTarget() == null ? \"test\" : event.getTarget();\n    ProducerRecord<String, String> record = new ProducerRecord<>(topic, json);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 55.91912382488721}, {"code": "public void sendEvent(Event event){\n\t    if (event == null) {\n        throw new RuntimeException(\"Event is null\");\n    }\n    if (event.getEventMessage() == null) {\n        throw new RuntimeException(\"Event message is null\");\n    }\n    if (event.getEventTime() == null) {\n        event.setEventTime(new Date());\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(new Location(\"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing\", \"Testing", "CodeBleu_score": 21.96895237792389}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t    // 1. Initialize the OSS client.\n    OSSClient client = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\n    // 2. Upload the file content as an object with the specified name.\n    client.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n    // 3. Shut down the OSS client.\n    client.shutdown();\n\n    // 4. Return the URL of the uploaded object.\n    return \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 26.930947935423966}, {"code": "public String upload(String objName, byte[] content){\n\t    String endpoint = \"oss-cn-beijing.aliyuncs.com\";\n    String bucketName = \"bucket-name\";\n    String accessKeyId = \"access-key-id\";\n    String accessKeySecret = \"access-key-secret\";\n    String roleArn = \"acs:ram::1234567890:role/fc-role\";\n    String roleSessionName = \"fc-session\";\n    String policy = \"{\\\"Version\\\":\\\"1\\\",\\\"Statement\\\":[{\\\"Action\\\":\\\"oss:*\\\",\\\"Effect\\\":\\\"Allow\\\",\\\"Resource\\\":\\\"*\\\"}]}\";\n\n    // Initialize the OSS client.\n    OSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\n    // Create a bucket.\n    ossClient.createBucket(bucketName);\n\n    // Upload the file content as an object.\n    ossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n    // Shut down the OSS client.\n    ossClient.shutdown();\n\n    // Return the URL of the uploaded object.\n    return \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 43.54394313139001}, {"code": "public String upload(String objName, byte[] content){\n\t    // Initialize the OSS client.\n    OSSClient ossClient = new OSSClient(ossEndpoint, ossAccessKeyId, ossAccessKeySecret);\n\n    // Upload the file content as an object with the specified name.\n    ossClient.putObject(ossBucketName, objName, new ByteArrayInputStream(content));\n\n    // Shut down the OSS client.\n    ossClient.shutdown();\n\n    // Return the URL of the uploaded object.\n    return \"https://\" + ossBucketName + \".\" + ossEndpoint + \"/\" + objName;\n}", "CodeBleu_score": 31.753930778380628}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\treturn ipToLocation(ipAddress, null);\n}", "CodeBleu_score": 5.2602432043010445}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\tif (ipAddress == null || ipAddress.trim().isEmpty()) {\n\t\treturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\");\n\t}\n\tIpToLocationWorker worker = getIpToLocationWorker();\n\tif (worker == null) {\n\t\treturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\");\n\t}\n\treturn worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 31.532913998219403}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\tif (ipAddress == null) {\n\t\treturn new LocationInfo(null, null, null, null, null, null, null);\n\t}\n\t\n\tIpToLocationWorker worker = getIpToLocationWorker();\n\tif (worker == null) {\n\t\treturn new LocationInfo(null, null, null, null, null, null, null);\n\t}\n\t\n\tIPZone ipZone = worker.getIPZone(ipAddress);\n\tif (ipZone == null) {\n\t\treturn new LocationInfo(null, null, null, null, null, null, null);\n\t}\n\t\n\treturn new LocationInfo(ipZone.getCountry(), ipZone.getArea(), ipZone.getRegion(), ipZone.getCity(), ipZone.getISP(), ipZone.getCountryCode(), ipZone.getAreaCode());\n}", "CodeBleu_score": 39.909983976238486}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t  if (esClient == null || esClientHighLevel == null) {\n    synchronized (this) {\n      if (esClient == null || esClientHighLevel == null) {\n        String[] esHosts = getESHosts().split(\",\");\n        List<HttpHost> esHostsList = new ArrayList<HttpHost>();\n        for (String esHost : esHosts) {\n          String[] esHostPort = esHost.split(\":\");\n          esHostsList.add(new HttpHost(esHostPort[0], Integer.parseInt(esHostPort[1]), \"http\"));\n        }\n        esClient = RestClient.builder(esHostsList.toArray(new HttpHost[esHostsList.size()])).build();\n        esClientHighLevel = new RestHighLevelClient(esClient);\n      }\n    }\n  }\n}", "CodeBleu_score": 42.18073196135794}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t    if (esClient == null || esHighLevelClient == null) {\n        synchronized (this) {\n            if (esClient == null || esHighLevelClient == null) {\n                String[] clusterHosts = config.get(\"es.cluster.hosts\").split(\",\");\n                List<HttpHost> httpHosts = new ArrayList<>();\n                for (String clusterHost : clusterHosts) {\n                    String[] hostPort = clusterHost.split(\":\");\n                    httpHosts.add(new HttpHost(hostPort[0], Integer.parseInt(hostPort[1]), \"http\"));\n                }\n                esClient = RestClient.builder(httpHosts.toArray(new HttpHost[0])).build();\n                esHighLevelClient = new RestHighLevelClient(esClient);\n            }\n        }\n    }\n}", "CodeBleu_score": 45.11258901786562}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t    if (this.esClient == null) {\n        synchronized (this) {\n            if (this.esClient == null) {\n                // Get the Elasticsearch cluster hosts and ports\n                String clusterHosts = System.getenv(\"ELASTICSEARCH_HOSTS\");\n                if (clusterHosts == null) {\n                    throw new Exception(\"ELASTICSEARCH_HOSTS environment variable not set\");\n                }\n\n                // Build the low-level REST client\n                this.esClient = RestClient.builder(HttpHost.create(clusterHosts)).build();\n\n                // Build the high-level REST client\n                this.esHighLevelClient = new RestHighLevelClient(this.esClient);\n            }\n        }\n    }\n}", "CodeBleu_score": 36.416013197938156}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<>();\n    for (String host : clusterHostList.split(\",\")) {\n        host = host.trim();\n        if (host.contains(\":\")) {\n            String[] parts = host.split(\":\");\n            hosts.add(new HttpHost(parts[0], Integer.parseInt(parts[1]), \"http\"));\n        } else {\n            hosts.add(new HttpHost(host, clusterPort, \"http\"));\n        }\n    }\n    return hosts;\n}", "CodeBleu_score": 41.330255431581776}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t  List<HttpHost> hosts = new ArrayList<>();\n  if (clusterHostList != null) {\n    String[] hostList = clusterHostList.split(\",\");\n    for (String host : hostList) {\n      String[] hostPort = host.split(\":\");\n      if (hostPort.length == 2) {\n        hosts.add(new HttpHost(hostPort[0], Integer.parseInt(hostPort[1]), \"http\"));\n      } else {\n        hosts.add(new HttpHost(hostPort[0], clusterPort, \"http\"));\n      }\n    }\n  }\n  return hosts;\n}", "CodeBleu_score": 42.40084710604734}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    String[] hosts = clusterHostList.split(\",\");\n    List<HttpHost> httpHosts = new ArrayList<>();\n\n    for (String host : hosts) {\n        String[] hostPort = host.split(\":\");\n        if (hostPort.length == 2) {\n            httpHosts.add(new HttpHost(hostPort[0], Integer.parseInt(hostPort[1]), \"http\"));\n        } else {\n            httpHosts.add(new HttpHost(hostPort[0], clusterPort, \"http\"));\n        }\n    }\n\n    return httpHosts;\n}", "CodeBleu_score": 45.86091321794311}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\t    // Get the task from the queue\n    Task task = taskQueue.poll(30, TimeUnit.SECONDS);\n    if (task != null) {\n        // Process the task\n        if (task.getTaskType().equals(\"plain-text-message\")) {\n            // Extract the recipient number and message data\n            String recipient = task.getRecipient();\n            String message = task.getMessage();\n\n            // Validate the data\n            if (StringUtils.isBlank(recipient) || StringUtils.isBlank(message)) {\n                logger.error(\"Invalid data: \" + task.toString());\n                return;\n            }\n\n            // Send the message\n            sendMessage(recipient, message);\n        }\n    }\n}", "CodeBleu_score": 29.455777101176462}, {"code": "protected void pollingWork() throws InterruptedException{\n\t    CloseableHttpClient httpClient = HttpClients.createDefault();\n    while (!shutdown.get()) {\n        Task task = null;\n        try {\n            task = taskQueue.poll(30, TimeUnit.SECONDS);\n            if (task == null) {\n                continue;\n            }\n            if (task.getType().equals(\"plain\")) {\n                String recipient = task.getRecipient();\n                String message = task.getMessage();\n                String messageId = task.getMessageId();\n                if (StringUtils.isBlank(recipient) || StringUtils.isBlank(message) || StringUtils.isBlank(messageId)) {\n                    logger.error(\"Task data is invalid. Recipient: \" + recipient + \", message: \" + message + \", messageId: \" + messageId);\n                    continue;\n                }\n                sendMessage(httpClient, recipient, message, messageId);\n            } else {\n                logger.error(\"Task type is invalid. Type: \" + task.getType());\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception occurred while processing task.\", e);\n        }\n    }\n}", "CodeBleu_score": 31.56153503209166}, {"code": "protected void pollingWork() throws InterruptedException{\n\t\n    // Create a new thread to process tasks from the queue.\n    Thread pollingThread = new Thread(new Runnable() {\n\n        @Override\n        public void run() {\n\n            while (!Thread.currentThread().isInterrupted()) {\n\n                // Get the next task from the queue.\n                Task task = taskQueue.poll(30, TimeUnit.SECONDS);\n\n                // If a task was retrieved, check the task type.\n                if (task != null) {\n\n                    // If the task type is a plain text message, extract the recipient number and message data.\n                    if (task.getType().equals(\"TEXT\")) {\n\n                        // Extract the recipient number and message data.\n                        String recipient = task.getRecipient();\n                        String message = task.getMessage();\n\n                        // Validate the recipient number.\n                        if (StringUtils.isBlank(recipient) || !recipient.matches(\"\\\\+[0-9]{11}\")) {\n                            log.error(\"Invalid recipient number: \" + recipient);\n                            continue;\n                        }\n\n                        // Validate the message data.\n                        if (StringUtils.isBlank(message)) {\n                            log.error(\"Invalid message data: \" + message);\n                            continue;\n                        }\n\n                        // Send the message.\n                        sendMessage(recipient, message);\n\n                    }\n                }\n            }\n        }\n    });\n\n    // Start the thread.\n    pollingThread.start();\n}", "CodeBleu_score": 31.578059291282717}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    // Create the CloseableHttpClient\n    CloseableHttpClient httpClient = HttpClients.createDefault();\n\n    // Create the GET request\n    HttpGet httpGetRequest = new HttpGet(uri);\n\n    // Execute the request and get the response\n    CloseableHttpResponse response = httpClient.execute(httpGetRequest);\n\n    // Get the response entity\n    HttpEntity responseEntity = response.getEntity();\n\n    // If the response does not enclose an entity, there is no need\n    // to bother about connection release\n    if (responseEntity != null) {\n\n        // Convert the entity content to a String\n        String responseContent = EntityUtils.toString(responseEntity, StandardCharsets.UTF_8);\n\n        // Log the response content\n        log.info(responseContent);\n\n        // And return it\n        return responseContent;\n    }\n\n    // If the response entity is null, return null\n    return null;\n}", "CodeBleu_score": 52.95579028826427}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    CloseableHttpClient httpClient = HttpClients.createDefault();\n    HttpGet httpGet = new HttpGet(uri);\n    CloseableHttpResponse response = httpClient.execute(httpGet);\n    try {\n        HttpEntity entity = response.getEntity();\n        String responseString = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        log.info(responseString);\n        return responseString;\n    } finally {\n        response.close();\n    }\n}", "CodeBleu_score": 56.24887674373189}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    String responseContent = null;\n    CloseableHttpClient httpClient = HttpClients.createDefault();\n    try {\n        HttpGet httpGet = new HttpGet(uri);\n        CloseableHttpResponse response = httpClient.execute(httpGet);\n        try {\n            HttpEntity entity = response.getEntity();\n            if (entity != null) {\n                responseContent = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n                EntityUtils.consume(entity);\n            }\n        } finally {\n            response.close();\n        }\n    } finally {\n        httpClient.close();\n    }\n    return responseContent;\n}", "CodeBleu_score": 49.36072677143877}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    Map<String, Object> map = new HashMap<>();\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    Document doc = db.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n    NodeList nodeList = doc.getChildNodes();\n    if (nodeList.getLength() > 0) {\n        Node root = nodeList.item(0);\n        if (root != null) {\n            map.put(root.getNodeName(), decode(root, doTrim));\n        }\n    }\n    return map;\n}", "CodeBleu_score": 46.29846439395562}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    Map<String, Object> result = null;\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document document = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n    Node rootNode = document.getDocumentElement();\n    if (rootNode != null) {\n        result = decodeNode(rootNode, doTrim);\n    }\n    return result;\n}", "CodeBleu_score": 51.68917660146075}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    Map<String, Object> result = new HashMap<>();\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document document = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n    Node root = document.getDocumentElement();\n    result.put(root.getNodeName(), decodeToArray(root, doTrim));\n    return result;\n}", "CodeBleu_score": 50.907123134922514}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tif (!isEligibleForAutoProcessing(orderRecord)) {\n\t\treturn;\n\t}\n\n\tfinal ITrxManager trxManager = Services.get(ITrxManager.class);\n\ttrxManager.assertThreadInheritedTrxExists();\n\n\tfinal AsyncBatchId asyncBatchId = CompleteShipAndInvoiceEnqueuer.enqueue(orderRecord);\n\n\tLoggables.addLog(\"C_Order_ID={} enqueued for auto-processing; asyncBatchId={}\", orderRecord.getC_Order_ID(), asyncBatchId);\n}", "CodeBleu_score": 35.67418728963809}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tfinal boolean isAutoProcessingEnabled = Services.get(ISysConfigBL.class).getBooleanValue(SYSCONFIG_AUTO_PROCESSING_ENABLED, DEFAULT_AUTO_PROCESSING_ENABLED);\n\tif (!isAutoProcessingEnabled) {\n\t\tLoggables.withLogger(logger, Level.INFO).addLog(\"Auto-processing is disabled. Skipping enqueueing of tasks for order {}\", orderRecord);\n\t\treturn;\n\t}\n\n\tfinal boolean isEligible = isEligibleForAutoProcessing(orderRecord);\n\tif (!isEligible) {\n\t\tLoggables.withLogger(logger, Level.INFO).addLog(\"Order {} is not eligible for auto-processing. Skipping enqueueing of tasks.\", orderRecord);\n\t\treturn;\n\t}\n\n\tfinal OrderId orderId = OrderId.ofRepoId(orderRecord.getC_Order_ID());\n\tfinal String trxName = InterfaceWrapperHelper.getTrxName(orderRecord);\n\tfinal AsyncBatchId asyncBatchId = Services.get(IAsyncBatchBL.class).newAsyncBatch()\n\t\t\t.setContext(Env.getCtx())\n\t\t\t.setC_Async_Batch_Type(asyncBatchType)\n\t\t\t.setParentAsyncBatchId(AsyncBatchId.ofRepoIdOrNull(orderRecord.getC_Async_Batch_ID()))\n\t\t\t.setTrxName(trxName)\n\t\t\t.setDescription(trxName)\n\t\t\t.create();\n\n\tfinal CompleteShipAndInvoiceEnqueuer completeShipAndInvoiceEnqueuer = new CompleteShipAndInvoiceEnqueuer(orderId, asyncBatchId);\n\tcompleteShipAndInvoiceEnqueuer.enqueue();\n\n\tfinal CreateMissingShipmentSchedulesWorkpackageProcessor createMissingShipmentSchedulesWorkpackageProcessor = new CreateMissingShipmentSchedulesWorkpackageProcessor();\n\tcreateMissingShipmentSchedulesWorkpackageProcessor.enqueueForOrder(orderId);\n\n\tLoggables.withLogger(logger, Level.INFO).addLog(\"Enqueued tasks for order {}\",", "CodeBleu_score": 54.284162231414456}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tfinal ITrxManager trxManager = Services.get(ITrxManager.class);\n\tfinal ISysConfigBL sysConfigBL = Services.get(ISysConfigBL.class);\n\n\t//\n\t// Check if we shall enqueue the order for processing\n\tif (!isOrderEligibleForAutoProcessing(orderRecord)) {\n\t\tLoggables.addLog(\"Order not eligible for auto processing. Skip enqueuing\");\n\t\treturn;\n\t}\n\n\t//\n\t// Enqueue the order for processing\n\tfinal AsyncBatchId asyncBatchId = trxManager.createAsyncBatch(CompleteShipAndInvoiceEnqueuer.ASYNC_BATCH_NAME);\n\ttrxManager.getTrxListenerManagerOrAutoCommit()\n\t\t\t.newEventListener(TrxEventTiming.AFTER_COMMIT)\n\t\t\t.invokeMethodJustOnce(true) // invoke the handling method just once\n\t\t\t.registerHandlingMethod(innerTrx -> {\n\t\t\t\tLoggables.addLog(\"Enqueuing order for auto processing\");\n\n\t\t\t\tfinal OrderId orderId = OrderId.ofRepoId(orderRecord.getC_Order_ID());\n\t\t\t\tfinal DeliveryRule deliveryRule = DeliveryRule.ofCode(orderRecord.getDeliveryRule());\n\t\t\t\tfinal boolean completeShipAndInvoice = sysConfigBL.getBooleanValue(SYSCONFIG_CompleteShipAndInvoice, false);\n\t\t\t\tfinal boolean completeShipAndInvoiceIfNeeded = sysConfigBL.getBooleanValue(SYSCONFIG_CompleteShipAndInvoiceIfNeeded, false);\n\t\t\t\tfinal boolean completeShipAndInvoiceIfPossible = sysConfigBL.getBooleanValue(SYSCONFIG_CompleteShipAndInvoiceIfPossible, false);\n\t\t\t\tfinal boolean completeShipAndInvoiceIfComplete = sysConfigBL.getBooleanValue(SYSCONFIG_CompleteShipAndInvoiceIfComplete, false);\n\n\t\t\t\tfinal CompleteShipAndInvoiceEnqueuer enqueuer = new CompleteShipAndInvoiceEnqueuer();\n\t\t\t\tenqueuer.enqueue(orderId, deliveryRule", "CodeBleu_score": 39.95746806887725}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n\n    if (! $user || ! Hash::check($request->password, $user->password)) {\n        throw ValidationException::withMessages([\n            'email' => [trans('auth.failed')],\n        ]);\n    }\n\n    return $user;\n}", "CodeBleu_score": 42.19655996124075}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n\n    if (! $user || ! $user->isActive()) {\n        return null;\n    }\n\n    if (! $user->validatePassword($request->password)) {\n        return null;\n    }\n\n    return $user;\n}", "CodeBleu_score": 40.36634625577549}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n\n    if (! $user || ! Webauthn::validateCredentials($user, $request->password)) {\n        event(new Failed($request->email));\n\n        throw ValidationException::withMessages([\n            'email' => [trans('auth.failed')],\n        ]);\n    }\n\n    return $user;\n}", "CodeBleu_score": 48.95270459829298}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        $this->username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 73.23214040644866}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter()->increment($request);\n\n    throw ValidationException::withMessages([\n        $this->username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 68.667979454403}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter()->increment($request);\n\n    throw ValidationException::withMessages([\n        $this->username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 68.667979454403}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t    $user = User::find(session('login.id'));\n\n    if (!$user) {\n        return redirect()->route('login');\n    }\n\n    $assertion = Webauthn::getAssertion();\n\n    return Inertia::render('Auth/TwoFactorChallenge', [\n        'enabled' => $user->two_factor_enabled,\n        'remember' => $request->session()->get('login.remember'),\n        'publicKey' => $assertion->getPublicKeyCredentialRequestOptions(),\n    ]);\n}", "CodeBleu_score": 35.45832916705176}, {"code": "<?\npublic function toResponse($request){\n\t    $user = User::find($request->session()->get('login.id'));\n\n    if (! $user) {\n        abort(404);\n    }\n\n    $challenge = Webauthn::challenge();\n\n    $request->session()->put('login.webauthn', [\n        'id' => $user->id,\n        'remember' => (bool) $request->input('remember'),\n        'challenge' => $challenge,\n    ]);\n\n    return Inertia::render('TwoFactorChallenge', [\n        'enabled' => $user->two_factor_enabled,\n        'remember' => (bool) $request->input('remember'),\n        'publicKey' => Webauthn::credential()->getPublicKey(),\n    ]);\n}", "CodeBleu_score": 36.57274387353791}, {"code": "<?\npublic function toResponse($request){\n\t    $user = User::find(session('login.id'));\n    if ($user) {\n        $publicKey = Webauthn::getAssertionPublicKey(\n            $user,\n            session('login.remember')\n        );\n        return Inertia::render('TwoFactorChallenge', [\n            'enabled' => $user->two_factor_enabled,\n            'remember' => session('login.remember'),\n            'publicKey' => $publicKey,\n        ]);\n    }\n    return Inertia::render('TwoFactorChallenge', [\n        'enabled' => false,\n        'remember' => false,\n        'publicKey' => null,\n    ]);\n}", "CodeBleu_score": 34.13096548320706}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    $token = UserToken::where('driver', $driver)->where('token', $socialite->id)->first();\n\n    if ($token) {\n        $user = $token->user;\n\n        if (!$user) {\n            $user = User::create([\n                'name' => $socialite->name,\n                'email' => $socialite->email,\n                'email_verified_at' => now(),\n                'password' => Str::random(32),\n            ]);\n\n            $token->user()->associate($user);\n            $token->save();\n        }\n\n        return $user;\n    }\n\n    if (Auth::check()) {\n        $user = Auth::user();\n\n        $token = UserToken::where('user_id', $user->id)->where('driver', $driver)->first();\n\n        if (!$token) {\n            $token = UserToken::create([\n                'user_id' => $user->id,\n                'driver' => $driver,\n                'token' => $socialite->id,\n            ]);\n        }\n\n        return $user;\n    }\n\n    $user = User::where('email', $socialite->email)->first();\n\n    if (!$user) {\n        $user = User::create([\n            'name' => $socialite->name,\n            'email' => $socialite->email,\n            'email_verified_at' => now(),\n            'password' => Str::random(32),\n        ]);\n    }\n\n    $token = UserToken::create([\n        'user_id' => $user->id,\n        'driver' => $driver,\n        'token' => $socialite->id,\n    ]);\n\n    return $user;\n}", "CodeBleu_score": 44.137647918248376}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    $userToken = UserToken::where('driver', $driver)->where('token', $socialite->getId())->first();\n\n    if ($userToken) {\n        $user = $userToken->user;\n\n        if (!$user || !$user->exists) {\n            $userToken->delete();\n\n            throw ValidationException::withMessages([\n                'email' => [__('This :driver account is already associated with an existing user.', ['driver' => $driver])],\n            ]);\n        }\n    }\n\n    if (!$user) {\n        $user = User::where('email', $socialite->getEmail())->first();\n\n        if (!$user) {\n            $user = $this->createNewUser($request, [\n                'name' => $socialite->getName(),\n                'email' => $socialite->getEmail(),\n            ]);\n        }\n    }\n\n    $userToken = $user->tokens()->where('driver', $driver)->where('token', $socialite->getId())->first();\n\n    if (!$userToken) {\n        $userToken = $user->tokens()->create([\n            'driver' => $driver,\n            'token' => $socialite->getId(),\n        ]);\n    }\n\n    return $user;\n}", "CodeBleu_score": 47.316922040848475}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    $userToken = UserToken::where([\n        ['driver', '=', $driver],\n        ['token', '=', $socialite->getId()],\n    ])->first();\n\n    if ($userToken) {\n        $user = $userToken->user;\n\n        if (!$user) {\n            $user = User::create([\n                'name' => $socialite->getName(),\n                'email' => $socialite->getEmail(),\n                'email_verified_at' => now(),\n            ]);\n\n            $userToken->user()->associate($user);\n            $userToken->save();\n        }\n    } else {\n        $user = User::where('email', $socialite->getEmail())->first();\n\n        if (!$user) {\n            $user = User::create([\n                'name' => $socialite->getName(),\n                'email' => $socialite->getEmail(),\n                'email_verified_at' => now(),\n            ]);\n        }\n\n        $userToken = UserToken::create([\n            'user_id' => $user->id,\n            'driver' => $driver,\n            'token' => $socialite->getId(),\n        ]);\n    }\n\n    return $user;\n}", "CodeBleu_score": 47.594223631725}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $this->guard()->user();\n    if (!$user) {\n        return false;\n    }\n\n    $credentials = $this->getCredentials($request);\n    if (!$credentials) {\n        return false;\n    }\n\n    $valid = $this->webauthn()->validateAssertion($user, $credentials);\n    if (!$valid) {\n        event(new Failed($user, $credentials));\n\n        throw ValidationException::withMessages([\n            $this->username() => [trans('auth.failed')],\n        ]);\n    }\n\n    return true;\n}", "CodeBleu_score": 54.627751434072714}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    if (! $user = $this->guard()->user()) {\n        return false;\n    }\n\n    $assertion = $request->input('webauthn_assertion');\n\n    $credentials = WebauthnFacade::getAssertionCredentials($assertion);\n\n    if (! WebauthnFacade::validateAssertion($user, $assertion, $credentials)) {\n        event(new Failed($user, $request));\n\n        throw ValidationException::withMessages([\n            $this->username() => [trans('webauthn::errors.invalid_credential')],\n        ]);\n    }\n\n    return true;\n}", "CodeBleu_score": 51.76717853144267}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $this->guard()->user();\n\n    if (! $user) {\n        return false;\n    }\n\n    $credentials = $this->getCredentials($request);\n\n    try {\n        WebauthnFacade::validateAssertion($credentials, $user);\n    } catch (ValidationException $e) {\n        event(new Failed($user, $credentials));\n\n        throw ValidationException::withMessages([\n            'webauthn' => [trans('webauthn::errors.invalid_assertion')],\n        ]);\n    }\n\n    return true;\n}", "CodeBleu_score": 49.70966909384937}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\t    $user = null;\n    if (empty($this->email)) {\n        $this->error('Email is required.');\n    } else {\n        try {\n            $user = User::where('email', $this->email)->firstOrFail();\n        } catch (ModelNotFoundException $exception) {\n            $this->error(\"User with email {$this->email} not found.\");\n        }\n    }\n    return $user;\n}", "CodeBleu_score": 47.67957713695326}, {"code": "<?\nprivate function user(): ?User{\n\t    if (!$this->option('email')) {\n        $this->error('You must provide an email address.');\n\n        return null;\n    }\n\n    try {\n        return User::where('email', $this->option('email'))->firstOrFail();\n    } catch (ModelNotFoundException $exception) {\n        $this->error(\"Could not find a user with the email address {$this->option('email')}.\");\n\n        return null;\n    }\n}", "CodeBleu_score": 43.98511233890883}, {"code": "<?\nprivate function user(): ?User{\n\t    if (!$this->email) {\n        $this->error('No email provided.');\n        return null;\n    }\n    try {\n        $user = User::where('email', $this->email)->firstOrFail();\n        return $user;\n    } catch (ModelNotFoundException $e) {\n        $this->error('User not found.');\n        return null;\n    }\n}", "CodeBleu_score": 59.916513823701}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\t    if (!config('scout.driver') || !config('scout.flush')) {\n        return;\n    }\n\n    $settings = $this->getMeilisearchSettings();\n\n    foreach ($settings as $index => $settings) {\n        $table = $settings['primaryKey'] ?? null;\n\n        if (!$table) {\n            continue;\n        }\n\n        $this->call('scout:flush', [\n            'model' => $table,\n        ]);\n    }\n\n    $this->info('Scout indexes flushed.');\n}", "CodeBleu_score": 50.157887386672925}, {"code": "<?\nprotected function scoutFlush(): void{\n\t    if ($this->option('flush') && $this->laravel->config->get('scout.driver') === 'meilisearch') {\n        $this->line('Flushing Scout indexes...');\n        $indexes = $this->laravel->scout->getIndexConfigs();\n        foreach ($indexes as $index => $config) {\n            $table = $config['model']::tableName();\n            $this->call('scout:flush', ['model' => $config['model'], '--table' => $table]);\n        }\n        $this->info('Scout indexes flushed.');\n    }\n}", "CodeBleu_score": 48.812630780912954}, {"code": "<?\nprotected function scoutFlush(): void{\n\t    $this->scoutFlushConfigured();\n    $this->scoutFlushConfirmed();\n    $this->scoutFlushIndexes();\n}", "CodeBleu_score": 7.328524123882476}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    try {\n        $vCard = Reader::read($resource->getContent());\n        if (!$vCard->UID) {\n            $vCard->UID = $resource->getPath();\n        }\n    } catch (ParseException $e) {\n        $vCard = new VCard();\n        $vCard->UID = $resource->getPath();\n        $vCard->FN = $resource->getBasename();\n    }\n\n    $this->exportContact($resource, $vCard);\n    $this->exportGroup($resource, $vCard);\n    $this->exportAddress($resource, $vCard);\n    $this->exportPhoneNumber($resource, $vCard);\n    $this->exportEmail($resource, $vCard);\n    $this->exportPhoto($resource, $vCard);\n    $this->exportNote($resource, $vCard);\n    $this->exportOrganization($resource, $vCard);\n    $this->exportUrl($resource, $vCard);\n    $this->exportRelated($resource, $vCard);\n\n    return $vCard;\n}", "CodeBleu_score": 34.705342805265914}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    $vcard = null;\n    try {\n        $vcard = Reader::read($resource->getContent());\n    } catch (ParseException $e) {\n        $vcard = new VCard();\n    }\n\n    if (empty($vcard->UID)) {\n        $vcard->UID = $resource->getUid();\n    }\n\n    $vcard->VERSION = '4.0';\n    $vcard->FN = $resource->getFullName();\n    $vcard->N = $resource->getNames();\n    $vcard->EMAIL = $resource->getEmails();\n    $vcard->TEL = $resource->getPhoneNumbers();\n    $vcard->TITLE = $resource->getTitle();\n    $vcard->ORG = $resource->getOrganization();\n    $vcard->ADR = $resource->getAddresses();\n    $vcard->NOTE = $resource->getNotes();\n    $vcard->URL = $resource->getUrls();\n    $vcard->BDAY = $resource->getBirthday();\n\n    return $vcard;\n}", "CodeBleu_score": 40.371169266792286}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    $vcard = $resource->getVCard();\n\n    if ($vcard === null) {\n        $vcard = new VCard();\n\n        $vcard->UID = $resource->getUid();\n        $vcard->FN = $resource->getName();\n        $vcard->N = [\n            $resource->getLastName(),\n            $resource->getFirstName(),\n            $resource->getMiddleName(),\n            $resource->getPrefix(),\n            $resource->getSuffix(),\n        ];\n\n        if ($resource->getOrganization() !== null) {\n            $vcard->ORG = $resource->getOrganization();\n        }\n\n        if ($resource->getEmail() !== null) {\n            $vcard->EMAIL = $resource->getEmail();\n        }\n\n        if ($resource->getPhone() !== null) {\n            $vcard->TEL = $resource->getPhone();\n        }\n\n        if ($resource->getAddress() !== null) {\n            $vcard->ADR = $resource->getAddress();\n        }\n\n        if ($resource->getNote() !== null) {\n            $vcard->NOTE = $resource->getNote();\n        }\n    }\n\n    $this->applyExporters($resource, $vcard);\n\n    return $vcard;\n}", "CodeBleu_score": 37.39542882623642}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $object = $this->backend->getCard($addressBookId, $cardUri);\n\n    if ($object instanceof Contact) {\n        Bus::onQueue('high')->dispatch(new DestroyContact($object->id));\n        return true;\n    }\n\n    if ($object instanceof Group) {\n        Bus::onQueue('high')->dispatch(new DestroyGroup($object->id));\n        return true;\n    }\n\n    return false;\n}", "CodeBleu_score": 39.777940895668635}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $object = $this->getObjectByUri($addressBookId, $cardUri);\n\n    if ($object instanceof Contact) {\n        Bus::dispatch(new DestroyContact($object));\n\n        return true;\n    }\n\n    if ($object instanceof Group) {\n        Bus::dispatch(new DestroyGroup($object));\n\n        return true;\n    }\n\n    return false;\n}", "CodeBleu_score": 34.9123444939118}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $object = $this->getCard($addressBookId, $cardUri);\n    if (!$object) {\n        return false;\n    }\n    if ($object instanceof Contact) {\n        Bus::dispatch(new DestroyContact($object));\n        return true;\n    }\n    if ($object instanceof Group) {\n        Bus::dispatch(new DestroyGroup($object));\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 36.26377528454113}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\t    if (!request()->hasFile('file')) {\n        return;\n    }\n\n    $file = request()->file('file');\n\n    $data['path'] = $file->store('uploads/' . $data['type']);\n    $data['name'] = $file->getClientOriginalName();\n    $data['mime_type'] = $file->getMimeType();\n    $data['extension'] = $file->getClientOriginalExtension();\n    $data['size'] = $file->getSize();\n\n    $activity = $this->createActivity($data);\n\n    $data['lead_activity_id'] = $activity->id;\n\n    return $this->model->create($data);\n}", "CodeBleu_score": 47.376713501358445}, {"code": "<?\npublic function upload(array $data){\n\t    if (!request()->hasFile('file')) {\n        return;\n    }\n\n    $file = request()->file('file');\n\n    $data['name'] = $file->getClientOriginalName();\n    $data['path'] = $file->store('uploads');\n\n    $activity = $this->create([\n        'type' => 'upload',\n        'user_id' => auth()->guard('lead')->user()->id,\n        'lead_id' => $data['lead_id'],\n        'data' => json_encode($data),\n    ]);\n\n    return $this->model->create([\n        'activity_id' => $activity->id,\n        'name' => $file->getClientOriginalName(),\n        'path' => $file->store('uploads'),\n    ]);\n}", "CodeBleu_score": 53.73155372702296}, {"code": "<?\npublic function upload(array $data){\n\t\n    if (! request()->hasFile('file')) {\n        return;\n    }\n\n    $uploader = app(config('core.storage.uploader'));\n\n    $file = $uploader->upload(request()->file('file'), 'leads/' . $data['lead_id']);\n\n    $data['file_name'] = $file['name'];\n    $data['file_path'] = $file['path'];\n\n    $data['type'] = 'file';\n    $data['user_type'] = 'user';\n    $data['user_id'] = auth()->guard('user')->user()->id;\n\n    $activity = $this->model->create($data);\n\n    return $activity;\n}", "CodeBleu_score": 50.86303036413995}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if ($exception instanceof ModelNotFoundException) {\n        return response()->json([\n            'error' => 'Resource not found'\n        ], 404);\n    }\n\n    if ($exception instanceof PDOException) {\n        return response()->json([\n            'error' => 'Internal server error'\n        ], 500);\n    }\n\n    if ($exception instanceof ParseError) {\n        return response()->json([\n            'error' => 'Internal server error'\n        ], 500);\n    }\n\n    if ($exception instanceof AuthenticationException) {\n        return response()->json([\n            'error' => 'Unauthenticated'\n        ], 401);\n    }\n\n    if ($exception instanceof HttpException) {\n        return response()->json([\n            'error' => 'Internal server error'\n        ], $exception->getStatusCode());\n    }\n\n    return response()->json([\n        'error' => 'Internal server error'\n    ], 500);\n}", "CodeBleu_score": 33.60051194229324}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    $response = [];\n    $status = 500;\n    if ($exception instanceof AuthenticationException) {\n        $response = [\n            'message' => 'Unauthenticated.'\n        ];\n        $status = 401;\n    } else if ($exception instanceof HttpException) {\n        $status = $exception->getStatusCode();\n    } else if ($exception instanceof ModelNotFoundException) {\n        $response = [\n            'message' => 'Resource not found.'\n        ];\n        $status = 404;\n    } else if ($exception instanceof PDOException) {\n        $response = [\n            'message' => 'Database error.'\n        ];\n        $status = 500;\n    } else if ($exception instanceof ParseError) {\n        $response = [\n            'message' => 'Bad request.'\n        ];\n        $status = 400;\n    }\n    $route = request()->route();\n    if ($route && $route->getPrefix() == '/admin') {\n        return redirect()->route('admin.login');\n    }\n    return response()->json($response, $status);\n}", "CodeBleu_score": 44.703220284389275}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    $request = app('request');\n    $route = $request->route();\n    $routeName = $route ? $route->getName() : null;\n    $response = [];\n    $statusCode = 500;\n    if ($exception instanceof AuthenticationException) {\n        if ($request->is('admin/*')) {\n            return redirect()->route('admin.login');\n        } else {\n            return redirect()->route('login');\n        }\n    }\n    if ($exception instanceof HttpException) {\n        $statusCode = $exception->getStatusCode();\n    }\n    if ($exception instanceof ModelNotFoundException) {\n        $statusCode = 404;\n    }\n    if ($exception instanceof PDOException) {\n        $statusCode = 500;\n    }\n    if ($exception instanceof ParseError) {\n        $statusCode = 500;\n    }\n    $response['status'] = $statusCode;\n    $response['message'] = $exception->getMessage();\n    $response['exception'] = get_class($exception);\n    $response['file'] = $exception->getFile();\n    $response['line'] = $exception->getLine();\n    $response['trace'] = $exception->getTrace();\n    $response['request'] = [\n        'url' => $request->url(),\n        'method' => $request->method(),\n        'ip' => $request->ip(),\n        'input' => $request->all(),\n        'route' => $routeName,\n        'session' => $request->session()->all(),\n        'user' => $request->user()\n    ];\n    $response['code'] = $exception->getCode();\n    if ($request->ajax() || $request->wantsJson()) {\n        return response()->json($response, $statusCode);\n    } else {\n        return response()->view('errors.error', $response, $statusCode);\n    }\n}", "CodeBleu_score": 44.6885088125548}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json(['message' => $this->getMessage($statusCode)], $statusCode);\n    }\n    return response()->view($path, ['message' => $this->getMessage($statusCode)], $statusCode);\n}", "CodeBleu_score": 45.48086540555456}, {"code": "<?\nprivate function response($path, $statusCode){\n\t    if ($this->request->expectsJson()) {\n        return response()->json(['message' => $this->errorMessage], $statusCode);\n    }\n\n    return response()->view($path, ['message' => $this->errorMessage], $statusCode);\n}", "CodeBleu_score": 41.14852739224001}, {"code": "<?\nprivate function response($path, $statusCode){\n\t    if ($this->expectsJson()) {\n        return response()->json(['message' => $this->message], $statusCode);\n    }\n\n    return response()->view($path, ['message' => $this->message], $statusCode);\n}", "CodeBleu_score": 39.57437072135656}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t    $activityIds = request()->get('activityIds');\n\n    $activityIds = explode(',', $activityIds);\n\n    $activities = $this->activityRepository->findWhereIn('id', $activityIds);\n\n    $count = 0;\n\n    foreach ($activities as $activity) {\n        if ($activity->is_done != request()->get('is_done')) {\n            Event::dispatch('activity.update.before', $activity);\n\n            $activity->update(['is_done' => request()->get('is_done')]);\n\n            Event::dispatch('activity.update.after', $activity);\n\n            $count++;\n        }\n    }\n\n    if ($count) {\n        session()->flash('success', trans('admin::app.activities.mass-update-success'));\n    } else {\n        session()->flash('info', trans('admin::app.activities.mass-update-empty'));\n    }\n\n    return response()->json(['redirect-url' => route('admin.activities.index')]);\n}", "CodeBleu_score": 52.88177762240262}, {"code": "<?\npublic function massUpdate(){\n\t\n    $activities = request()->input('activities');\n    $count = 0;\n\n    foreach ($activities as $activityId) {\n\n        $activity = $this->activityRepository->findOrFail($activityId);\n\n        if ($activity->is_done != 1) {\n\n            Event::dispatch('activity.update.before', $activity);\n\n            $activity->update(['is_done' => 1]);\n\n            Event::dispatch('activity.update.after', $activity);\n\n            $count++;\n        }\n    }\n\n    if ($count) {\n\n        session()->flash('success', trans('admin::app.activities.mass-update-success'));\n    } else {\n\n        session()->flash('warning', trans('admin::app.activities.mass-update-empty'));\n    }\n\n    return redirect()->back();\n}", "CodeBleu_score": 48.81807728870064}, {"code": "<?\npublic function massUpdate(){\n\t    $data = request()->all();\n\n    $activities = $this->activityRepository->findWhereIn('id', $data['ids'], ['id', 'is_done']);\n\n    $count = $activities->count();\n\n    if ($count) {\n        foreach ($activities as $activity) {\n            Event::dispatch('activity.update.before', $activity);\n\n            $activity->update(['is_done' => $data['is_done']]);\n\n            Event::dispatch('activity.update.after', $activity);\n        }\n    }\n\n    return response()->json([\n        'status' => true,\n        'message' => trans('admin::app.activities.mass-update-success', ['count' => $count]),\n    ]);\n}", "CodeBleu_score": 49.115339674052386}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t    $this->activityRepository->massDestroy(request()->get('indexes'));\n\n    return response()->json(['message' => trans('admin::app.response.destroy-success', ['name' => 'Activities'])]);\n}", "CodeBleu_score": 21.485600202283038}, {"code": "<?\n public function massDestroy(){\n\t    $activities = $this->activityRepository->find(request()->input('indexes'));\n\n    foreach ($activities as $activity) {\n        Event::dispatch('activity.delete.before', $activity);\n\n        $this->activityRepository->delete($activity->id);\n\n        Event::dispatch('activity.delete.after', $activity);\n    }\n\n    return response()->json([\n        'message' => trans('admin::app.activities.mass-delete-success'),\n    ]);\n}", "CodeBleu_score": 42.55072194714216}, {"code": "<?\n public function massDestroy(){\n\t    $data = request()->all();\n\n    $activityIds = explode(',', $data['indexes']);\n\n    foreach ($activityIds as $activityId) {\n        $activity = $this->activityRepository->findOrFail($activityId);\n\n        Event::dispatch('activity.delete.before', $activity);\n\n        $this->activityRepository->delete($activityId);\n\n        Event::dispatch('activity.delete.after', $activity);\n    }\n\n    if (request()->ajax()) {\n        return response()->json([\n            'message' => 'Activities deleted successfully.',\n        ]);\n    }\n}", "CodeBleu_score": 36.11538143394871}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t    $cards = DashboardHelper::getCards();\n\n    foreach ($cards as $key => $card) {\n        if (request()->has($key)) {\n            $cards[$key]['selected'] = request()->input($key);\n        }\n    }\n\n    return response()->json($cards);\n}", "CodeBleu_score": 33.78519970983332}, {"code": "<?\n public function updateCards(){\n\t\n    $cards = DashboardHelper::getCards();\n\n    $requestData = request()->all();\n\n    foreach ($cards as $card) {\n        if (array_key_exists($card['key'], $requestData)) {\n            $card['selected'] = $requestData[$card['key']];\n        }\n    }\n\n    return response()->json($cards);\n}", "CodeBleu_score": 41.47597261271345}, {"code": "<?\n public function updateCards(){\n\t    $cards = DashboardHelper::getCards();\n\n    foreach ($cards as $key => $card) {\n        if (request()->has($key)) {\n            $cards[$key]['selected'] = true;\n        } else {\n            $cards[$key]['selected'] = false;\n        }\n    }\n\n    return response()->json($cards);\n}", "CodeBleu_score": 31.53855800028508}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t    Event::dispatch('core.configuration.save.before');\n\n    $configuration = $this->configurationRepository->create(request()->all());\n\n    Event::dispatch('core.configuration.save.after', $configuration);\n\n    session()->flash('success', trans('admin::app.configuration.save-message'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 55.67317916268394}, {"code": "<?\npublic function store(){\n\t    Event::dispatch('core.configuration.save.before');\n\n    $this->validate(request(), [\n        'channel_based' => 'required',\n        'locale_options' => 'required',\n        'default_locale_option' => 'required',\n        'admin_locale_options' => 'required',\n        'default_admin_locale_option' => 'required',\n        'timezone' => 'required',\n        'date_format' => 'required',\n        'time_format' => 'required',\n        'default_currency_option' => 'required',\n        'default_channel_option' => 'required',\n        'catalog_root_category' => 'required',\n        'catalog_mode' => 'required',\n        'catalog_single_product_image' => 'required',\n        'inventory_sources' => 'required',\n        'default_inventory_source' => 'required',\n        'show_wishlist_icon' => 'required',\n        'enable_realtime_notifications' => 'required',\n        'enable_stock_notification_admin' => 'required',\n        'enable_stock_notification_customer' => 'required',\n        'enable_order_confirmation_alert' => 'required',\n        'enable_new_product_alert' => 'required',\n        'enable_newsletter_subscription' => 'required',\n        'order_pdf_download' => 'required',\n        'order_pdf_email' => 'required',\n        'order_pdf_print' => 'required',\n        'order_pdf_shipment' => 'required',\n        'order_pdf_invoice' => 'required',\n        'order_pdf_refund' => 'required',\n        'order_pdf_creditmemo' => 'required',\n        'order_pdf_shipment_carrier' => 'required',\n        'order_pdf_shipment_track' => 'required',\n        'order_pdf_shipment_label' => 'required',\n        'order_pdf_shipment_invoice' => 'required',\n        'order_pdf_shipment_packaging' => 'required',\n        'order_pdf_shipment_return' => '", "CodeBleu_score": 18.401226796634155}, {"code": "<?\npublic function store(){\n\t    Event::dispatch('core.configuration.save.before');\n\n    $configurationRepository = app(ConfigurationRepository::class);\n\n    $configurationRepository->create(request()->all());\n\n    Event::dispatch('core.configuration.save.after');\n\n    session()->flash('success', trans('admin::app.configuration.save-message'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 55.23405158154049}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t    $file = request()->get('path');\n    $fileName = request()->get('name');\n\n    $config = $this->configurationRepository->getValueByKey('catalog_images_path');\n\n    $filePath = $config . '/' . $file;\n\n    if (Storage::has($filePath)) {\n        return Storage::download($filePath, $fileName);\n    }\n\n    return abort(404);\n}", "CodeBleu_score": 38.36196734819822}, {"code": "<?\npublic function download(){\n\t    $path = request()->get('path');\n    $fileName = request()->get('fileName');\n    $disk = request()->get('disk');\n\n    $configuration = $this->configurationRepository->findOneByField('key', 'catalog.products.images.path');\n\n    $filePath = $path . '/' . $fileName;\n\n    $filePath = str_replace('\\\\', '/', $filePath);\n\n    $filePath = $configuration->value . '/' . $filePath;\n\n    return Storage::disk($disk)->download($filePath);\n}", "CodeBleu_score": 39.260727591440094}, {"code": "<?\npublic function download(){\n\t    $path = request()->get('path');\n    $fileName = request()->get('fileName');\n    $disk = request()->get('disk');\n\n    $path = Storage::disk($disk)->url($path . $fileName);\n\n    return response()->download($path);\n}", "CodeBleu_score": 41.55881955695621}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> modelSorts = new ArrayList<>();\n    list.forEach(item -> {\n        AdminModelSort modelSort = new AdminModelSort();\n        modelSort.setUserId(UserUtil.getUserId());\n        modelSort.setModelId(item);\n        modelSort.setSort(modelSorts.size() + 1);\n        modelSorts.add(modelSort);\n    });\n    adminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()));\n    adminModelSortService.saveBatch(modelSorts);\n    return Result.success();\n}", "CodeBleu_score": 40.323797479432145}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    // Create a list of AdminModelSort objects, each with specified attributes\n    List<AdminModelSort> adminModelSorts = new ArrayList<>();\n    for (int i = 0; i < list.size(); i++) {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setUserId(UserUtil.getUserId());\n        adminModelSort.setModel(list.get(i));\n        adminModelSort.setSort(i);\n        adminModelSorts.add(adminModelSort);\n    }\n    // Remove existing sort settings for the user\n    adminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()));\n    // Save the new sort settings in batch\n    adminModelSortService.saveBatch(adminModelSorts);\n    return Result.success();\n}", "CodeBleu_score": 66.99549981498134}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> modelSortList = new ArrayList<>();\n    for (int i = 0; i < list.size(); i++) {\n        AdminModelSort modelSort = new AdminModelSort();\n        modelSort.setId(list.get(i));\n        modelSort.setSort(i);\n        modelSort.setUserId(UserUtil.getUserId());\n        modelSortList.add(modelSort);\n    }\n    adminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()));\n    adminModelSortService.saveBatch(modelSortList);\n    return Result.success();\n}", "CodeBleu_score": 66.07353369546048}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getId());\n    if (adminConfig.getModule().equals(AdminModuleEnum.CRM.getCode())) {\n        return Result.error(AdminCodeEnum.CRM_MODULE_SETTING_UPDATE_FAILED);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.updateById(adminConfig);\n    return Result.success();\n}", "CodeBleu_score": 64.8302148583483}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getId());\n    if (adminConfig.getModule().equals(AdminModuleEnum.CRM.getCode())) {\n        return Result.error(AdminCodeEnum.CRM_NOT_ALLOW_CHANGE_STATUS.getCode(), AdminCodeEnum.CRM_NOT_ALLOW_CHANGE_STATUS.getMsg());\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.updateById(adminConfig);\n    return Result.success();\n}", "CodeBleu_score": 59.50405840685894}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getId());\n    if (adminConfig == null) {\n        return Result.failure(AdminCodeEnum.ADMIN_CONFIG_NOT_EXISTS.getCode(), AdminCodeEnum.ADMIN_CONFIG_NOT_EXISTS.getMsg());\n    }\n    if (AdminModuleEnum.CRM.getCode().equals(adminConfig.getModule())) {\n        return Result.failure(AdminCodeEnum.CRM_SETTING_NOT_ALLOWED.getCode(), AdminCodeEnum.CRM_SETTING_NOT_ALLOWED.getMsg());\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.updateById(adminConfig);\n    return Result.success(adminConfig);\n}", "CodeBleu_score": 55.152007152236656}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t     // Get the user configuration based on the custom key\n     AdminUserConfig userConfig = adminUserConfigService.getOne(new LambdaQueryWrapper<AdminUserConfig>().eq(AdminUserConfig::getCustomKey, customKey));\n     if (userConfig == null) {\n         // If the user configuration does not exist, create a new user configuration\n         userConfig = new AdminUserConfig();\n         userConfig.setCustomKey(customKey);\n         userConfig.setCustomValue(json.toJSONString());\n         adminUserConfigService.save(userConfig);\n     } else {\n         // If the user configuration exists, update the value with the provided JSON\n         userConfig.setCustomValue(json.toJSONString());\n         adminUserConfigService.updateById(userConfig);\n     }\n     return Result.success();\n }", "CodeBleu_score": 60.498528498802905}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t        if (customKey.equals(AdminConst.CUSTOM_KEY_COMPANY)) {\n            return queryCompanySetting(json);\n        } else if (customKey.equals(AdminConst.CUSTOM_KEY_INIT_DATA)) {\n            return queryInitDataSetting(json);\n        } else if (customKey.equals(AdminConst.CUSTOM_KEY_LOG_WELCOME_SPEECH)) {\n            return queryLogWelcomeSpeechSetting(json);\n        } else if (customKey.equals(AdminConst.CUSTOM_KEY_MODULE_SETTING)) {\n            return queryModuleSetting(json);\n        } else {\n            return Result.fail(AdminCodeEnum.CUSTOM_KEY_NOT_EXIST);\n        }\n    }", "CodeBleu_score": 18.862211624526523}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t     AdminUserConfig userConfig = adminUserConfigService.getOne(new LambdaQueryWrapper<AdminUserConfig>().eq(AdminUserConfig::getUserId, UserUtil.getUserId()).eq(AdminUserConfig::getCustomKey, customKey));\n     if (userConfig != null) {\n         userConfig.setCustomValue(json.toJSONString());\n         adminUserConfigService.updateById(userConfig);\n     } else {\n         userConfig = new AdminUserConfig();\n         userConfig.setUserId(UserUtil.getUserId());\n         userConfig.setCustomKey(customKey);\n         userConfig.setCustomValue(json.toJSONString());\n         adminUserConfigService.save(userConfig);\n     }\n     return Result.success();\n }", "CodeBleu_score": 67.87078116588089}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    Result<AdminUser> result = new Result<>();\n    AdminUser user = adminUserService.getById(userId);\n    if (user != null) {\n        result.setData(user);\n        result.setCode(AdminCodeEnum.SUCCESS.getCode());\n        result.setMessage(AdminCodeEnum.SUCCESS.getMsg());\n    } else {\n        result.setCode(AdminCodeEnum.USER_NOT_EXIST.getCode());\n        result.setMessage(AdminCodeEnum.USER_NOT_EXIST.getMsg());\n    }\n    return result;\n}", "CodeBleu_score": 37.043570278519546}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser user = userService.queryById(userId);\n    user.setPassword(null);\n    user.setSalt(null);\n    user.setDepartmentName(departmentService.queryById(user.getDepartmentId()).getName());\n    return Result.success(user);\n}", "CodeBleu_score": 39.944837835793194}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser adminUser = adminUserService.getById(userId);\n    if (adminUser == null) {\n        return Result.fail(AdminCodeEnum.USER_NOT_EXISTS);\n    }\n    return Result.success(adminUser);\n}", "CodeBleu_score": 29.839189290710816}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t        // 1. Get the current user ID\n        String userId = UserUtil.getUserId();\n\n        // 2. Check if there are multiple \"readNotice\" entries for the user\n        List<ReadNotice> readNoticeList = readNoticeService.list(new LambdaQueryWrapper<ReadNotice>().eq(ReadNotice::getUserId, userId));\n        if (readNoticeList.size() > 1) {\n            // 3. If more than one entry exists, update the status to 1 for all matching entries\n            readNoticeService.update(new ReadNotice().setStatus(1), new LambdaQueryWrapper<ReadNotice>().eq(ReadNotice::getUserId, userId));\n        } else if (readNoticeList.size() == 1) {\n            // 4. If there is only one entry, update the status to 1\n            readNoticeService.update(new ReadNotice().setStatus(1), new LambdaQueryWrapper<ReadNotice>().eq(ReadNotice::getUserId, userId));\n        } else {\n            // 5. If there is no entry, create a new \"readNotice\" entry with status 1 and save it\n            ReadNotice readNotice = new ReadNotice();\n            readNotice.setUserId(userId);\n            readNotice.setStatus(1);\n            readNoticeService.save(readNotice);\n        }\n\n        return Result.success();\n    }", "CodeBleu_score": 42.720422382866}, {"code": " public Result readNotice() {\n\t    // Get the user ID\n    String userId = UserUtil.getUserId();\n    // Query the \"readNotice\" status of the current user\n    LambdaQueryWrapper<AdminUserConfig> queryWrapper = new LambdaQueryWrapper<AdminUserConfig>()\n            .eq(AdminUserConfig::getUserId, userId)\n            .eq(AdminUserConfig::getConfigKey, \"readNotice\");\n    List<AdminUserConfig> configList = adminUserConfigService.list(queryWrapper);\n    // If there is a \"readNotice\" entry, update the status to 1 for all matching entries\n    if (ObjectUtil.isNotEmpty(configList)) {\n        adminUserConfigService.update(new AdminUserConfig().setConfigValue(\"1\"), queryWrapper);\n        return Result.success();\n    }\n    // If there is no \"readNotice\" entry, create a new \"readNotice\" entry with status 1 and save it\n    AdminUserConfig config = new AdminUserConfig();\n    config.setUserId(userId);\n    config.setConfigKey(\"readNotice\");\n    config.setConfigValue(\"1\");\n    adminUserConfigService.save(config);\n    return Result.success();\n}", "CodeBleu_score": 48.46413040993149}, {"code": " public Result readNotice() {\n\t    // 1. Retrieve the user ID\n    String userId = UserUtil.getUserId();\n    // 2. Check if there are multiple \"readNotice\" entries for the user\n    LambdaQueryWrapper<AdminUserConfig> queryWrapper = new LambdaQueryWrapper<>();\n    queryWrapper.eq(AdminUserConfig::getUserId, userId);\n    queryWrapper.eq(AdminUserConfig::getKey, \"readNotice\");\n    List<AdminUserConfig> list = adminUserConfigService.list(queryWrapper);\n    // 3. If more than one entry exists, update the status to 1 for all matching entries\n    if (list.size() > 1) {\n        list.forEach(item -> {\n            item.setValue(\"1\");\n            adminUserConfigService.updateById(item);\n        });\n    }\n    // 4. If not, create a new \"readNotice\" entry with status 1 and save it\n    if (list.size() == 0) {\n        AdminUserConfig adminUserConfig = new AdminUserConfig();\n        adminUserConfig.setUserId(userId);\n        adminUserConfig.setKey(\"readNotice\");\n        adminUserConfig.setValue(\"1\");\n        adminUserConfigService.save(adminUserConfig);\n    }\n    return Result.success();\n}", "CodeBleu_score": 50.55910493845875}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    AdminConfig adminConfig = adminConfigMapper.selectOne(new QueryWrapper<AdminConfig>()\n            .eq(\"name\", \"companyInfo\")\n            .eq(\"module\", AdminModuleEnum.ADMIN.getCode())\n    );\n    if (Objects.isNull(adminConfig)) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(\"companyInfo\");\n        adminConfig.setModule(AdminModuleEnum.ADMIN.getCode());\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        adminConfigMapper.insert(adminConfig);\n    } else {\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        adminConfigMapper.updateById(adminConfig);\n    }\n}", "CodeBleu_score": 49.849528758770965}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    // 1.\u67e5\u8be2\u662f\u5426\u5b58\u5728\u914d\u7f6e\u4fe1\u606f\n    QueryWrapper<AdminConfig> queryWrapper = new QueryWrapper<>();\n    queryWrapper.eq(\"name\", \"companyInfo\");\n    AdminConfig adminConfig = adminConfigMapper.selectOne(queryWrapper);\n    // 2.\u4e0d\u5b58\u5728\u5219\u521b\u5efa\n    if (Objects.isNull(adminConfig)) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(\"companyInfo\");\n        adminConfig.setValue(\"{}\");\n        adminConfigMapper.insert(adminConfig);\n    }\n    // 3.\u66f4\u65b0\u914d\u7f6e\u4fe1\u606f\n    AdminConfig adminConfig1 = new AdminConfig();\n    adminConfig1.setId(adminConfig.getId());\n    adminConfig1.setValue(JSON.toJSONString(adminCompanyBO));\n    adminConfigMapper.updateById(adminConfig1);\n}", "CodeBleu_score": 42.516646400592265}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    AdminConfig adminConfig = adminConfigService.getOne(new QueryWrapper<AdminConfig>().eq(\"name\", \"companyInfo\"));\n    if (Objects.isNull(adminConfig)) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(\"companyInfo\");\n    }\n    adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n    adminConfigService.saveOrUpdate(adminConfig);\n}", "CodeBleu_score": 50.98793470813893}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\t    AdminConfig config = adminConfigMapper.selectOne(new QueryWrapper<AdminConfig>().eq(\"config_key\", AdminConst.ADMIN_CONFIG_KEY));\n    if (config == null) {\n        return new AdminCompanyBO();\n    }\n    return JSON.parseObject(config.getConfigValue(), AdminCompanyBO.class);\n}", "CodeBleu_score": 35.43236455459448}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t    String config = this.getConfig(AdminConst.ADMIN_CONFIG_KEY);\n    if (StrUtil.isBlank(config)) {\n        return new AdminCompanyBO();\n    }\n    return JSON.parseObject(config, AdminCompanyBO.class);\n}", "CodeBleu_score": 18.701395000646627}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t    // Get the admin configuration for the current company\n    AdminConfig config = adminConfigMapper.selectOne(new QueryWrapper<AdminConfig>().eq(\"key\", AdminConst.ADMIN_CONFIG_KEY));\n    // If no configuration is found, return a new AdminCompanyBO\n    if (config == null) {\n        return new AdminCompanyBO();\n    }\n    // Parse the configuration value into an AdminCompanyBO\n    return JSON.parseObject(config.getValue(), AdminCompanyBO.class);\n}", "CodeBleu_score": 35.24460854874369}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t     List<AdminConfig> configList = new ArrayList<>();\n     for (String s : stringList) {\n         AdminConfig config = new AdminConfig();\n         config.setName(AdminConst.LOG_WELCOME_SPEECH);\n         config.setValue(s);\n         configList.add(config);\n     }\n     adminConfigMapper.delete(new QueryWrapper<AdminConfig>().eq(\"name\", AdminConst.LOG_WELCOME_SPEECH));\n     adminConfigMapper.insertBatch(configList);\n }", "CodeBleu_score": 53.74159828960039}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t     List<AdminConfig> configList = stringList.stream().map(s -> {\n         AdminConfig config = new AdminConfig();\n         config.setConfigName(AdminConst.LOG_WELCOME_SPEECH);\n         config.setConfigValue(s);\n         return config;\n     }).collect(Collectors.toList());\n     // \u5220\u9664\u539f\u6709\u914d\u7f6e\n     adminConfigMapper.delete(new QueryWrapper<AdminConfig>().lambda().eq(AdminConfig::getConfigName, AdminConst.LOG_WELCOME_SPEECH));\n     // \u6279\u91cf\u63d2\u5165\u65b0\u914d\u7f6e\n     adminConfigMapper.insertBatch(configList);\n }", "CodeBleu_score": 45.0233487176469}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t     List<AdminConfig> configList = new ArrayList<>();\n     for (String s : stringList) {\n         AdminConfig config = new AdminConfig();\n         config.setConfigName(AdminConst.LOG_WELCOME_SPEECH);\n         config.setConfigValue(s);\n         configList.add(config);\n     }\n     adminConfigMapper.delete(new QueryWrapper<AdminConfig>().eq(\"config_name\", AdminConst.LOG_WELCOME_SPEECH));\n     adminConfigMapper.insertBatch(configList);\n }", "CodeBleu_score": 53.85751352332656}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    // \u83b7\u53d6\u5f53\u524d\u7528\u6237ID\n    String userId = UserUtil.getUserId();\n    // \u83b7\u53d6\u5f53\u524d\u7528\u6237\u8be6\u60c5\n    AdminUserVO userVO = adminUserService.getUserInfo(userId);\n    // \u6821\u9a8c\u5bc6\u7801\n    if (userVO == null || !AuthPasswordUtil.checkPassword(adminInitDataBO.getPassword(), userVO.getPassword(), userVO.getSalt())) {\n        throw new CrmException(AdminCodeEnum.USER_PASSWORD_ERROR);\n    }\n    // \u751f\u6210\u4e34\u65f6\u8bbf\u95ee\u7801\n    String accessCode = RandomUtil.randomString(64);\n    // \u5b58\u5165Redis, 10\u5206\u949f\u8fc7\u671f\n    redisService.set(AdminCacheKey.ACCESS_CODE + accessCode, userId, 600);\n    return accessCode;\n}", "CodeBleu_score": 37.967972191065925}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    // 1. \u83b7\u53d6\u5f53\u524d\u7528\u6237ID\n    Long userId = UserUtil.getUserId();\n    // 2. \u83b7\u53d6\u7528\u6237\u4fe1\u606f\uff0c\u5305\u62ec\u7528\u6237\u540d\n    AdminUserVO adminUserVO = adminUserService.getById(userId);\n    // 3. \u6821\u9a8c\u5bc6\u7801\n    if (StrUtil.isBlank(adminUserVO.getPassword())) {\n        throw new CrmException(SystemCodeEnum.USER_PASSWORD_EMPTY);\n    }\n    if (!AuthPasswordUtil.verifyPassword(adminInitDataBO.getPassword(), adminUserVO.getPassword())) {\n        throw new CrmException(SystemCodeEnum.USER_PASSWORD_ERROR);\n    }\n    // 4. \u751f\u6210\u4e34\u65f6\u8bbf\u95ee\u7801\n    String accessCode = RandomUtil.randomString(32);\n    // 5. \u5c06\u4e34\u65f6\u8bbf\u95ee\u7801\u5b58\u5165Redis\uff0c\u5e76\u8bbe\u7f6e10\u5206\u949f\u6709\u6548\u671f\n    redisTemplate.opsForValue().set(AdminCacheKey.ADMIN_ACCESS_CODE + accessCode, userId, 10, TimeUnit.MINUTES);\n    // 6. \u8fd4\u56de\u4e34\u65f6\u8bbf\u95ee\u7801\n    return accessCode;\n}", "CodeBleu_score": 36.36001751079678}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    String username = adminInitDataBO.getUsername();\n    String password = adminInitDataBO.getPassword();\n    String passwordSalt = adminInitDataBO.getPasswordSalt();\n    String passwordMd5 = AuthPasswordUtil.md5(password, passwordSalt);\n    AdminUser adminUser = adminUserService.getAdminUserByUsername(username);\n    if (adminUser == null) {\n        throw new CrmException(AdminCodeEnum.USER_NOT_EXISTS);\n    }\n    if (!Objects.equals(passwordMd5, adminUser.getPassword())) {\n        throw new CrmException(AdminCodeEnum.USER_PASSWORD_ERROR);\n    }\n    String accessToken = RandomUtil.simpleUUID();\n    redisUtil.set(AdminCacheKey.ADMIN_ACCESS_TOKEN + accessToken, adminUser.getId(), AdminConst.ADMIN_ACCESS_TOKEN_EXPIRE);\n    return accessToken;\n}", "CodeBleu_score": 39.425878024353786}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t    // \u83b7\u53d6\u5f53\u524d\u7528\u6237ID\n    String userId = UserUtil.getUserId();\n    // \u6784\u9020key\n    String key = AdminCacheKey.getInitAuthKey(userId);\n    // \u83b7\u53d6\u672a\u6388\u6743\u7684\u83dc\u5355URL\u96c6\u5408\n    List<String> urls = redisTemplate.opsForSet().members(key);\n    // \u5224\u65ad\u5f53\u524dURL\u662f\u5426\u5728\u672a\u6388\u6743\u7684\u83dc\u5355URL\u96c6\u5408\u4e2d\n    boolean result = urls.contains(request.getRequestURI());\n    if (result) {\n        // \u5982\u679c\u5f53\u524dURL\u5728\u672a\u6388\u6743\u7684\u83dc\u5355URL\u96c6\u5408\u4e2d\uff0c\u5219\u8fd4\u56detrue\uff0c\u8868\u793a\u5f53\u524d\u7528\u6237\u6ca1\u6709\u6743\u9650\u8bbf\u95ee\u5f53\u524dURL\n        return true;\n    } else {\n        // \u5982\u679c\u5f53\u524dURL\u4e0d\u5728\u672a\u6388\u6743\u7684\u83dc\u5355URL\u96c6\u5408\u4e2d\uff0c\u5219\u8fd4\u56defalse\uff0c\u8868\u793a\u5f53\u524d\u7528\u6237\u6709\u6743\u9650\u8bbf\u95ee\u5f53\u524dURL\n        return false;\n    }\n}", "CodeBleu_score": 46.26391426124284}, {"code": "private boolean verifyInitAuth(){\n\t    String userId = UserUtil.getUserId();\n    String key = AdminCacheKey.getInitAuthKey(userId);\n    String initAuth = redisTemplate.opsForValue().get(key);\n    if (StrUtil.isBlank(initAuth)) {\n        return true;\n    }\n    return !initAuth.contains(AdminConst.INIT_AUTH_URL);\n}", "CodeBleu_score": 50.32444212476255}, {"code": "private boolean verifyInitAuth(){\n\t    if (Objects.isNull(getUser())) {\n        return true;\n    }\n    String key = AdminCacheKey.ADMIN_INIT_AUTH + getUser().getId();\n    String initAuth = redisUtil.get(key);\n    return StrUtil.isNotBlank(initAuth);\n}", "CodeBleu_score": 29.298337891105973}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    // First, delete the existing role-menu association\n    removeByRoleId(roleId);\n\n    // Define the batch size\n    int batchSize = 50;\n\n    // Define the batch list\n    List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n\n    // Loop through the menu ID list\n    for (int i = 0; i < menuIdList.size(); i++) {\n        // Get the menu ID\n        Integer menuId = menuIdList.get(i);\n\n        // Create a new role-menu association\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n\n        // Add the role-menu association to the batch list\n        roleMenuList.add(roleMenu);\n\n        // If the batch list is full, save the batch list and clear it\n        if (i > 0 && i % batchSize == 0) {\n            saveBatch(roleMenuList);\n            roleMenuList.clear();\n        }\n    }\n\n    // If there are remaining role-menu associations in the batch list, save them\n    if (roleMenuList.size() > 0) {\n        saveBatch(roleMenuList);\n    }\n}", "CodeBleu_score": 45.61670325821892}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    // First delete the existing role-menu information corresponding to the role\n    adminRoleMenuMapper.deleteByRoleId(roleId);\n    // Define a list to store the role-menu association objects to be saved\n    List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    // Loop through the menu list and add the role-menu association object to the list\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    // In batches, save the role-menu association objects to the database\n    adminRoleMenuMapper.insertList(roleMenuList);\n}", "CodeBleu_score": 54.65821395077876}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    // First delete all the role-menu associations of the role\n    removeByRoleId(roleId);\n    // If the menuIdList is empty, then no need to add\n    if (menuIdList.isEmpty()) {\n        return;\n    }\n    // Create a list of AdminRoleMenu objects\n    List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    // Save the list of role-menu associations in batches\n    saveBatch(roleMenuList);\n}", "CodeBleu_score": 52.17591324082047}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\t    try {\n        String index = sysLog.getLogType().toLowerCase() + \"-\" + LocalDate.now().format(DateTimeFormatter.ofPattern(\"yyyy.MM.dd\"));\n        Map<String, Object> map = BeanUtil.beanToMap(sysLog);\n        map.put(\"createTime\", DateUtil.format(sysLog.getCreateTime(), \"yyyy-MM-dd HH:mm:ss\"));\n        map.remove(\"id\");\n        IndexRequest indexRequest = new IndexRequest(index).id(sysLog.getId().toString())\n                .source(map, XContentType.JSON);\n        IndexResponse indexResponse = this.restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n        log.info(\"SysLog save to es success, index: {}, id: {}\", indexResponse.getIndex(), indexResponse.getId());\n    } catch (Exception e) {\n        log.error(\"SysLog save to es error, \", e);\n    }\n}", "CodeBleu_score": 49.46965234691415}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t    try {\n        // Get the index name\n        String indexName = getIndexName();\n        // Get the index\n        GetIndexRequest request = new GetIndexRequest(indexName);\n        // If the index does not exist, create it\n        if (!restHighLevelClient.indices().exists(request, RequestOptions.DEFAULT)) {\n            CreateIndexRequest createIndexRequest = new CreateIndexRequest(indexName);\n            restHighLevelClient.indices().create(createIndexRequest, RequestOptions.DEFAULT);\n        }\n        // Convert the log object to a map\n        Map<String, Object> source = BeanUtil.beanToMap(sysLog);\n        // Format the creation time\n        source.put(\"createTime\", DateUtil.format(sysLog.getCreateTime(), \"yyyy-MM-dd HH:mm:ss\"));\n        // Remove the ID\n        source.remove(\"id\");\n        // Create an index request and submit it to the Elasticsearch client\n        IndexRequest indexRequest = new IndexRequest(indexName).source(source, XContentType.JSON);\n        IndexResponse indexResponse = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n        log.info(\"SysLog:{}\", indexResponse.toString());\n    } catch (IOException e) {\n        log.error(\"SysLog:{}\", e.getMessage());\n    }\n}", "CodeBleu_score": 56.109015198875355}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t    try {\n        String index = getIndex();\n        Map<String, Object> map = BeanUtil.beanToMap(sysLog);\n        map.put(\"createTime\", DateUtil.format(sysLog.getCreateTime(), \"yyyy-MM-dd HH:mm:ss\"));\n        map.remove(\"id\");\n        IndexRequest request = new IndexRequest(index).source(map, XContentType.JSON);\n        client.indexAsync(request, RequestOptions.DEFAULT, (IndexResponse response, Exception exception) -> {\n            if (exception != null) {\n                log.error(\"SysLog save error: \" + exception.getMessage());\n            }\n        });\n    } catch (Exception e) {\n        log.error(\"SysLog save error: \" + e.getMessage());\n    }\n}", "CodeBleu_score": 52.4351741894296}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t    // Initialize a search criteria builder\n    SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n    // Initialize a query builder\n    BoolQueryBuilder boolQueryBuilder = new BoolQueryBuilder();\n    // Initialize a range query builder\n    RangeQueryBuilder rangeQueryBuilder = new RangeQueryBuilder(\"createTime\");\n    // Set the time range of the query\n    rangeQueryBuilder.from(querySysLogBO.getStartTime());\n    rangeQueryBuilder.to(querySysLogBO.getEndTime());\n    // Add the time range query to the query builder\n    boolQueryBuilder.must(rangeQueryBuilder);\n    // Set the query criteria\n    if (StrUtil.isNotBlank(querySysLogBO.getUsername())) {\n        boolQueryBuilder.must(QueryBuilders.matchQuery(\"username\", querySysLogBO.getUsername()));\n    }\n    if (StrUtil.isNotBlank(querySysLogBO.getOperation())) {\n        boolQueryBuilder.must(QueryBuilders.matchQuery(\"operation\", querySysLogBO.getOperation()));\n    }\n    if (StrUtil.isNotBlank(querySysLogBO.getLocation())) {\n        boolQueryBuilder.must(QueryBuilders.matchQuery(\"location\", querySysLogBO.getLocation()));\n    }\n    if (StrUtil.isNotBlank(querySysLogBO.getIp())) {\n        boolQueryBuilder.must(QueryBuilders.matchQuery(\"ip\", querySysLogBO.getIp()));\n    }\n    // Add the query criteria to the search criteria builder\n    searchSourceBuilder.query(boolQueryBuilder);\n    // Sort the results by creation time in descending order\n    searchSourceBuilder.sort(\"createTime\", SortOrder.DESC);\n    // Exclude specific fields from the response\n    searchSourceBuilder.fetchSource(new String[]{\"username\", \"operation\", \"time\", \"method\", \"params\", \"location\", \"ip\", \"createTime\"}, null);\n    // Initialize a search request\n    SearchRequest searchRequest = new SearchRequest();\n    // Set the index name\n    searchRequest.indices(\"sys_log\");\n    // Set the search criteria\n    searchRequest.source(searchSourceBuilder);\n    // Exec", "CodeBleu_score": 33.32953759358879}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t    BasePage<SysLog> basePage = new BasePage<>();\n    try {\n        // Initialize the search criteria\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        // Sort results by creation time in descending order\n        searchSourceBuilder.sort(\"createTime\", SortOrder.DESC);\n        // Exclude specific fields from the response\n        searchSourceBuilder.fetchSource(new String[]{\"id\", \"username\", \"operation\", \"method\", \"params\", \"time\", \"ip\", \"createTime\"}, null);\n        // Initialize the search request\n        SearchRequest searchRequest = new SearchRequest(indexName);\n        searchRequest.source(searchSourceBuilder);\n        // Execute the search request using a REST client\n        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n        // Map the search results to SysLog objects\n        SearchHits searchHits = searchResponse.getHits();\n        List<SysLog> sysLogs = new ArrayList<>();\n        for (SearchHit hit : searchHits) {\n            SysLog sysLog = new SysLog();\n            Map<String, Object> sourceAsMap = hit.getSourceAsMap();\n            BeanUtil.copyProperties(sourceAsMap, sysLog);\n            sysLogs.add(sysLog);\n        }\n        // Populate a BasePage object with the results, including total hits and current page\n        basePage.setTotal(searchHits.getTotalHits());\n        basePage.setCurrent(querySysLogBO.getCurrent());\n        basePage.setPages(searchHits.getTotalHits() % querySysLogBO.getSize() == 0 ? searchHits.getTotalHits() / querySysLogBO.getSize() : searchHits.getTotalHits() / querySysLogBO.getSize() + 1);\n        basePage.setRecords(sysLogs);\n    } catch (IOException e) {\n        log.error(\"querySysLogPageList error\", e);\n    }\n    return basePage;\n}", "CodeBleu_score": 59.048366698276155}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t\n    // \u521d\u59cb\u5316\u67e5\u8be2\u6761\u4ef6\n    SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n\n    // \u8bbe\u7f6e\u67e5\u8be2\u6761\u4ef6\n    if (StrUtil.isNotBlank(querySysLogBO.getUsername())) {\n        boolQueryBuilder.must(QueryBuilders.matchQuery(\"username\", querySysLogBO.getUsername()));\n    }\n    if (StrUtil.isNotBlank(querySysLogBO.getOperation())) {\n        boolQueryBuilder.must(QueryBuilders.matchQuery(\"operation\", querySysLogBO.getOperation()));\n    }\n    if (StrUtil.isNotBlank(querySysLogBO.getTimeRange())) {\n        String[] timeRange = querySysLogBO.getTimeRange().split(\"~\");\n        boolQueryBuilder.must(QueryBuilders.rangeQuery(\"createTime\").gte(timeRange[0]).lte(timeRange[1]));\n    }\n\n    // \u8bbe\u7f6e\u6392\u5e8f\n    searchSourceBuilder.sort(\"createTime\", SortOrder.DESC);\n\n    // \u8bbe\u7f6e\u8fd4\u56de\u7ed3\u679c\n    searchSourceBuilder.fetchSource(new String[]{\"id\", \"username\", \"operation\", \"method\", \"params\", \"time\", \"ip\", \"createTime\"}, null);\n\n    // \u8bbe\u7f6e\u67e5\u8be2\u6761\u4ef6\n    searchSourceBuilder.query(boolQueryBuilder);\n\n    // \u6267\u884c\u641c\u7d22\n    SearchRequest searchRequest = new SearchRequest(INDEX_NAME);\n    searchRequest.source(searchSourceBuilder);\n    SearchResponse searchResponse = null;\n    try {\n        searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        log.error(\"\u641c\u7d22\u5f02\u5e38\", e);\n    }\n\n    // \u83b7\u53d6\u641c\u7d22\u7ed3\u679c\n    SearchHits hits = searchResponse.getHits();\n    SearchHit[] searchHits = hits.getHits();\n    List<SysLog> sysLogList = new ArrayList<>();\n    for (SearchHit searchHit", "CodeBleu_score": 48.10416048675095}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\t    const file = fs.createWriteStream(dest);\n    const response = await https.get(url, (response) => {\n        response.pipe(file);\n    });\n    return new Promise((resolve, reject) => {\n        file.on('finish', () => {\n            file.close();\n            resolve();\n        });\n        file.on('error', (err) => {\n            fs.unlink(dest);\n            reject(err);\n        });\n    });\n}", "CodeBleu_score": 58.929962293931325}, {"code": "async function downloadFile(url, dest){\n\t  return new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    const request = https.get(url, response => {\n      response.pipe(file);\n      file.on(\"finish\", () => {\n        file.close();\n        resolve();\n      });\n    });\n    request.on(\"error\", err => {\n      fs.unlink(dest);\n      reject(err);\n    });\n  });\n}", "CodeBleu_score": 63.22367052756779}, {"code": "async function downloadFile(url, dest){\n\t    return new Promise((resolve, reject) => {\n        const file = fs.createWriteStream(dest);\n        const request = https.get(url, response => {\n            response.pipe(file);\n            file.on('finish', () => {\n                file.close();\n                resolve();\n            });\n        });\n        request.on('error', err => {\n            fs.unlink(dest);\n            reject(err);\n        });\n    });\n}", "CodeBleu_score": 63.15651669417113}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t    return getDependentModulesFromDsl(module.getDsl())\n            .filter(moduleId -> !circularDependencyCheckSet.contains(moduleId))\n            .collectList()\n            .flatMapMany(dependentModuleIds -> {\n                circularDependencyCheckSet.addAll(dependentModuleIds);\n                return applicationRepository.findByIdIn(dependentModuleIds);\n            })\n            .onErrorContinue(\n                    (throwable, moduleId) -> {\n                        log.warn(\"Failed to retrieve dependent module {}\", moduleId, throwable);\n                    });\n}", "CodeBleu_score": 52.91152695114343}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t        if (circularDependencyCheckSet.contains(module.getId())) {\n            log.warn(\"Circular dependency detected for module {}\", module.getId());\n            return Flux.empty();\n        }\n\n        circularDependencyCheckSet.add(module.getId());\n        return getDependentModulesFromDsl(module.getDsl())\n                .filter(moduleId -> !circularDependencyCheckSet.contains(moduleId))\n                .flatMap(moduleId -> applicationRepository.findById(moduleId))\n                .onErrorResume(throwable -> {\n                    log.warn(\"Error while retrieving dependent module {}\", module.getId(), throwable);\n                    return Flux.empty();\n                });\n    }", "CodeBleu_score": 51.48203976626703}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t    return getDependentModulesFromDsl(module.getDsl()).map(moduleId -> {\n        if (circularDependencyCheckSet.contains(moduleId)) {\n            log.warn(\"Circular dependency found for module \" + moduleId + \" in application \" + module.getId());\n            return null;\n        }\n        circularDependencyCheckSet.add(moduleId);\n        return moduleRepository.findById(moduleId);\n    }).flatMap(Mono::justOrEmpty);\n}", "CodeBleu_score": 43.4602062599743}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t  if (map == null) {\n    return;\n  }\n  for (Map.Entry<?, ?> entry : map.entrySet()) {\n    Object value = entry.getValue();\n    if (value instanceof Map) {\n      doGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n    } else if (value instanceof List) {\n      doGetDependentModules((List<?>) value, dependentModuleIds);\n    }\n  }\n}", "CodeBleu_score": 18.746089254968776}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    if (map == null) {\n        return;\n    }\n\n    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        if (entry.getKey() instanceof String && entry.getValue() instanceof String) {\n            String key = (String) entry.getKey();\n            String value = (String) entry.getValue();\n\n            if (\"componentType\".equals(key) && \"module\".equals(value)) {\n                if (StringUtils.isNotBlank(map.get(\"appId\"))) {\n                    dependentModuleIds.add(map.get(\"appId\").toString());\n                }\n            }\n        }\n\n        if (entry.getValue() instanceof Map) {\n            doGetDependentModules((Map<?, ?>) entry.getValue(), dependentModuleIds);\n        } else if (entry.getValue() instanceof List) {\n            for (Object object : (List<?>) entry.getValue()) {\n                if (object instanceof Map) {\n                    doGetDependentModules((Map<?, ?>) object, dependentModuleIds);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 41.00599655187441}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        Object key = entry.getKey();\n        Object value = entry.getValue();\n        if (value instanceof Map) {\n            Map<?, ?> nestedMap = (Map<?, ?>) value;\n            if (nestedMap.containsKey(COMPONENT_TYPE_KEY) && nestedMap.get(COMPONENT_TYPE_KEY).equals(MODULE_COMPONENT_TYPE)) {\n                String moduleId = (String) nestedMap.get(APP_ID_KEY);\n                if (StringUtils.isNotBlank(moduleId)) {\n                    dependentModuleIds.add(moduleId);\n                }\n            }\n            doGetDependentModules(nestedMap, dependentModuleIds);\n        } else if (value instanceof List) {\n            List<?> nestedList = (List<?>) value;\n            for (Object nestedObj : nestedList) {\n                if (nestedObj instanceof Map) {\n                    Map<?, ?> nestedMap = (Map<?, ?>) nestedObj;\n                    if (nestedMap.containsKey(COMPONENT_TYPE_KEY) && nestedMap.get(COMPONENT_TYPE_KEY).equals(MODULE_COMPONENT_TYPE)) {\n                        String moduleId = (String) nestedMap.get(APP_ID_KEY);\n                        if (StringUtils.isNotBlank(moduleId)) {\n                            dependentModuleIds.add(moduleId);\n                        }\n                    }\n                    doGetDependentModules(nestedMap, dependentModuleIds);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 34.58473081782479}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t     Asset asset = new Asset();\n     asset.setContentType(srcContentType);\n     asset.setContent(dataBuffer);\n     if (createThumbnail) {\n         BufferedImage image = ImageIO.read(dataBuffer.asInputStream());\n         BufferedImage thumbnail = Scalr.resize(image, Scalr.Method.ULTRA_QUALITY, Scalr.Mode.FIT_TO_WIDTH, 100);\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ImageIO.write(thumbnail, \"jpg\", baos);\n         baos.flush();\n         asset.setContentType(MediaType.IMAGE_JPEG);\n         asset.setContent(DefaultDataBufferFactory.sharedInstance.wrap(baos.toByteArray()));\n     }\n     DataBufferUtils.release(dataBuffer);\n     return asset;\n }", "CodeBleu_score": 39.627846425054834}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t        Asset asset = new Asset();\n        asset.setContentType(srcContentType.getType());\n\n        // If creating a thumbnail, resize the image to 120px wide and retain the original aspect ratio\n        if (createThumbnail) {\n            BufferedImage img = ImageIO.read(dataBuffer.asInputStream());\n            BufferedImage resized = resize(img, 120, true);\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            ImageIO.write(resized, \"jpg\", baos);\n            asset.setContent(baos.toByteArray());\n        } else {\n            // If not creating a thumbnail, retain the original image data\n            asset.setContent(dataBuffer.asByteBuffer().array());\n        }\n\n        DataBufferUtils.release(dataBuffer);\n\n        return asset;\n    }", "CodeBleu_score": 40.14812170981476}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t    \n    // Read the image data\n    byte[] data = new byte[dataBuffer.readableByteCount()];\n    dataBuffer.read(data);\n\n    // Create a BufferedImage from the image data\n    BufferedImage image = ImageIO.read(new ByteArrayInputStream(data));\n\n    // Resize the image if requested\n    if (createThumbnail) {\n        image = resizeImage(image);\n    }\n\n    // Write the image data to a ByteArrayOutputStream\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    ImageIO.write(image, \"jpg\", baos);\n    baos.flush();\n    byte[] imageData = baos.toByteArray();\n\n    // Release the DataBuffer\n    DataBufferUtils.release(dataBuffer);\n\n    // Create a new Asset with the image data and content type\n    Asset asset = new Asset();\n    asset.setContentType(createThumbnail ? MediaType.IMAGE_JPEG : srcContentType);\n    asset.setData(imageData);\n    return asset;\n}", "CodeBleu_score": 46.76729339837611}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return assetRepository.findById(assetId)\n        .switchIfEmpty(Mono.error(new BizException(BizError.ASSET_NOT_FOUND, \"asset not found\")))\n        .flatMap(asset -> {\n            ServerHttpResponse response = exchange.getResponse();\n            response.setStatusCode(HttpStatus.OK);\n            if (asset.getContentType() != null) {\n                response.getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n            }\n            DataBuffer dataBuffer = new DefaultDataBufferFactory().wrap(asset.getData());\n            return response.writeWith(Flux.just(dataBuffer));\n        });\n}", "CodeBleu_score": 54.56158856751115}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return assetService.findAssetById(assetId)\n            .flatMap(asset -> {\n                ServerHttpResponse response = exchange.getResponse();\n                response.setStatusCode(HttpStatus.OK);\n                response.getHeaders().setContentType(MediaType.IMAGE_PNG);\n\n                DataBuffer buffer = exchange.getResponse().bufferFactory().wrap(asset.getData());\n                return response.writeWith(Flux.just(buffer));\n            });\n}", "CodeBleu_score": 53.953581244253826}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return assetService.getAsset(assetId)\n            .flatMap(asset -> {\n                ServerHttpResponse response = exchange.getResponse();\n                response.setStatusCode(HttpStatus.OK);\n                response.getHeaders().setContentType(MediaType.IMAGE_JPEG);\n\n                return response.writeWith(Flux.just(asset.getData()));\n            });\n}", "CodeBleu_score": 45.39488246809309}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    if (getWorkspaceMode() == WorkspaceMode.SAAS) {\n        return Flux.empty();\n    }\n\n    return getOrganizationService().findAllOrganizations()\n        .flatMap(organization -> Mono.justOrEmpty(organization.getAuthConfig()))\n        .filter(Objects::nonNull)\n        .map(authConfig -> {\n            FindAuthConfig findAuthConfig = new FindAuthConfig();\n            findAuthConfig.setAuthConfig(authConfig);\n            findAuthConfig.setOrganizationId(organization.getId());\n            findAuthConfig.setOrganizationName(organization.getName());\n            return findAuthConfig;\n        });\n}", "CodeBleu_score": 36.32586951502799}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    if (commonConfig.getWorkspaceMode() == WorkspaceMode.SAAS) {\n        return Flux.empty();\n    }\n\n    return organizationService.findAllOrganizations()\n            .flatMap(organization -> Mono.justOrEmpty(organization.getAuthConfig()))\n            .map(authConfig -> new FindAuthConfig(\n                    authConfig.getSource(),\n                    authConfig.getProperties(),\n                    authConfig.getDisplayName(),\n                    authConfig.getIconUrl()\n            ));\n}", "CodeBleu_score": 40.78975941953684}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    if (getWorkspaceMode() == WorkspaceMode.SAAS) {\n        return Flux.empty();\n    }\n    return getOrganizationService().getOrganizations()\n            .flatMap(organization -> {\n                return organization.getAuthConfig()\n                        .map(authConfig -> {\n                            return Mono.just(new FindAuthConfig(organization.getId(), authConfig));\n                        })\n                        .orElse(Mono.empty());\n            });\n}", "CodeBleu_score": 40.5476102513442}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    SpringDataMongoV3Driver driver = SpringDataMongoV3Driver.withDefaultLock(mongoTemplate);\n    driver.setReadConcern(ReadConcern.MAJORITY);\n    driver.setWriteConcern(WriteConcern.MAJORITY);\n    driver.setReadPreference(ReadPreference.primary());\n    MongockSpring5.MongockApplicationRunner mongockApplicationRunner = new MongockSpring5.MongockApplicationRunner(driver, springContext);\n    mongockApplicationRunner.setChangeLogsScanPackage(\"com.openblocks.migration\");\n    return mongockApplicationRunner;\n}", "CodeBleu_score": 51.75966151087559}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n            .setDriver(new SpringDataMongoV3Driver(mongoTemplate))\n            .addChangeLogsScanPackage(\"com.openblocks.mongock\")\n            .setSpringContext(springContext)\n            .buildApplicationRunner();\n}", "CodeBleu_score": 23.800763886053094}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t  return MongockSpring5.builder()\n    .setDriver(new SpringDataMongoV3Driver(mongoTemplate))\n    .addChangeLogsScanPackage(\"com.openblocks.migration\")\n    .setSpringContext(springContext)\n    .buildApplicationRunner();\n}", "CodeBleu_score": 21.6762587532278}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t    ReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n    template.setReadPreference(ReadPreference.secondaryPreferred());\n    return template;\n}", "CodeBleu_score": 78.21226741060563}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\n    ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n    reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n    reactiveMongoTemplate.setWriteConcern(WriteConcern.MAJORITY);\n    reactiveMongoTemplate.setReadConcern(ReadConcern.MAJORITY);\n    return reactiveMongoTemplate;\n}", "CodeBleu_score": 65.27136150909709}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t    ReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n    template.setReadPreference(ReadPreference.secondaryPreferred());\n    return template;\n}", "CodeBleu_score": 78.21226741060563}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return Mono.just(libraryQueryId)\n        .flatMap(id -> {\n            // First, try to get the latest record's DSL\n            return libraryQueryRecordRepository.findLatestRecordByLibraryQueryId(id)\n                .flatMap(record -> {\n                    if (record == null) {\n                        return deferredError(LIBRARY_QUERY_NOT_FOUND);\n                    }\n\n                    return Mono.just(record.getDsl());\n                });\n        })\n        .onErrorResume(LIBRARY_QUERY_NOT_FOUND, e -> {\n            // If the record is not found, get the DSL from the library query directly\n            return libraryQueryRepository.findById(libraryQueryId)\n                .flatMap(query -> {\n                    if (query == null) {\n                        return deferredError(LIBRARY_QUERY_NOT_FOUND);\n                    }\n\n                    return Mono.just(query.getDsl());\n                });\n        });\n}", "CodeBleu_score": 42.409727764595914}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return this.libraryQueryRepository.findById(libraryQueryId)\n        .switchIfEmpty(deferredError(LIBRARY_QUERY_NOT_FOUND))\n        .flatMap(libraryQuery -> {\n            return this.libraryQueryRepository.findLatestRecordByLibraryQueryId(libraryQueryId)\n                .switchIfEmpty(Mono.just(new LibraryQueryRecord(libraryQuery)));\n        })\n        .map(LibraryQueryRecord::getDsl);\n}", "CodeBleu_score": 53.734863636189665}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return Mono.zip(\n        getLatestLibraryQueryRecordDSL(libraryQueryId),\n        getLibraryQueryDSL(libraryQueryId)\n    ).map(tuple -> {\n        Map<String, Object> latestRecordDSL = tuple.getT1();\n        Map<String, Object> libraryQueryDSL = tuple.getT2();\n\n        if (latestRecordDSL != null) {\n            return latestRecordDSL;\n        } else {\n            return libraryQueryDSL;\n        }\n    });\n}", "CodeBleu_score": 38.990905101731485}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t\n        // This is the timeout duration for the query execution.\n        Duration timeout = QueryTimeoutUtils.parseTimeout(timeoutStr);\n\n        // This is the context for the query execution.\n        QueryExecutionContext executionContext = new QueryExecutionContext(queryConfig, requestParams, queryVisitorContext);\n\n        // This is the datasource connection holder for the datasource.\n        DatasourceConnectionHolder connectionHolder = datasourceConnectionPool.getConnection(datasource);\n\n        // This is the datasource plugin client for the datasource.\n        DatasourcePluginClient datasourcePluginClient = connectionHolder.getDatasourcePluginClient();\n\n        // This is the datasource meta info service for the datasource.\n        DatasourceMetaInfoService datasourceMetaInfoService = connectionHolder.getDatasourceMetaInfoService();\n\n        // This is the datasource type for the datasource.\n        String datasourceType = datasourceMetaInfoService.getDatasourceType();\n\n        // This is the query execution method for the datasource.\n        Mono<QueryExecutionResult> queryExecutionMethod = null;\n\n        // If the datasource type is Node.js, then we execute the query using Node.js.\n        if (datasourceType.equals(\"node\")) {\n            queryExecutionMethod = datasourcePluginClient.executeQuery(executionContext, timeout);\n        } else {\n            // If the datasource type is not Node.js, then we execute the query locally.\n            queryExecutionMethod = executeQueryLocally(datasource, executionContext, timeout);\n        }\n\n        // This is the final query execution method.\n        return queryExecutionMethod\n                .timeout(timeout)\n                .onErrorMap(ofException(TimeoutException.class, QUERY_EXECUTION_TIMEOUT))\n                .onErrorMap(ofException(PluginException.class, QUERY_EXECUTION_ERROR))\n                .onErrorMap(ofException(Exception.class, QUERY_EXECUTION_ERROR));\n    }", "CodeBleu_score": 38.81763110835851}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        return Mono.defer(() -> {\n            DatasourceMetaInfoService datasourceMetaInfoService = datasourcePluginClient.getDatasourceMetaInfoService(datasource.getType());\n            if (datasourceMetaInfoService == null) {\n                return Mono.error(new PluginException(datasource.getType(), \"Datasource type is not supported\"));\n            }\n\n            Duration timeout = QueryTimeoutUtils.parseTimeout(timeoutStr);\n            if (timeout == null) {\n                return Mono.error(new PluginException(datasource.getType(), \"Invalid timeout\"));\n            }\n\n            return Mono.just(datasourceMetaInfoService)\n                    .flatMap(datasourceMetaInfoService -> {\n                        if (datasourceMetaInfoService.isNodeJS()) {\n                            return executeQueryWithNodeJS(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n                        } else {\n                            return executeQueryLocally(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n                        }\n                    });\n        }).onErrorMap(ofException(TimeoutException.class, QUERY_EXECUTION_TIMEOUT));\n    }", "CodeBleu_score": 48.210517793519365}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        Duration timeout = QueryTimeoutUtils.parseTimeout(timeoutStr);\n        try {\n            DatasourcePluginClient client = datasourceMetaInfoService.getDatasourcePluginClient(datasource.getPluginId());\n            DatasourceConnectionHolder holder = connectionPool.getConnection(datasource);\n            return client.executeQuery(holder, queryConfig, requestParams, timeout, queryVisitorContext)\n                    .timeout(timeout)\n                    .onErrorMap(TimeoutException.class, ofException(QUERY_EXECUTION_TIMEOUT));\n        } catch (PluginException e) {\n            return Mono.error(e);\n        } catch (Exception e) {\n            log.error(\"Error executing query\", e);\n            return Mono.error(new BizException(QUERY_EXECUTION_ERROR, e.getMessage()));\n        }\n    }", "CodeBleu_score": 40.65395489789363}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\n        DatasourceConnectionHolder connectionHolder = datasourceConnectionPool.getConnection(datasource);\n\n        QueryExecutionContext queryExecutionContext = QueryExecutionContext.builder()\n                .queryConfig(queryConfig)\n                .requestParams(requestParams)\n                .queryVisitorContext(queryVisitorContext)\n                .build();\n\n        return Mono.fromCallable(() -> {\n            try {\n                return datasourcePluginClient.getQueryExecutor(datasource.getType()).execute(connectionHolder, queryExecutionContext);\n            } catch (Exception e) {\n                throw ofException(QUERY_EXECUTION_ERROR, e);\n            }\n        })\n                .timeout(QueryTimeoutUtils.getQueryTimeout(queryConfig))\n                .onErrorMap(TimeoutException.class, e -> ofException(QUERY_EXECUTION_TIMEOUT))\n                .onErrorMap(BizException.class, e -> ofException(QUERY_EXECUTION_ERROR, e))\n                .doFinally(signalType -> datasourceConnectionPool.releaseConnection(connectionHolder));\n}", "CodeBleu_score": 44.837314036355046}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t        log.debug(\"Executing query locally for datasource: {}\", datasource.getName());\n\n        DatasourcePluginClient pluginClient = datasourceMetaInfoService.getPluginClient(datasource.getType());\n        if (pluginClient == null) {\n            return Mono.error(ofException(QUERY_EXECUTION_ERROR, \"Unable to find plugin for datasource type: \" + datasource.getType()));\n        }\n\n        QueryExecutionContext queryExecutionContext = QueryExecutionContext.builder()\n                .pluginClient(pluginClient)\n                .datasource(datasource)\n                .queryConfig(queryConfig)\n                .requestParams(requestParams)\n                .queryVisitorContext(queryVisitorContext)\n                .build();\n\n        return Mono.just(queryExecutionContext)\n                .flatMap(this::acquireConnection)\n                .flatMap(this::executeQuery)\n                .onErrorResume(throwable -> Mono.error(ofException(QUERY_EXECUTION_ERROR, \"Unable to execute query\", throwable)));\n    }", "CodeBleu_score": 43.044304348393744}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t        DatasourceConnectionHolder connectionHolder = datasourceConnectionPool.getConnection(datasource);\n        QueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n        return queryExecutionContext.getQueryExecutor()\n                .execute(queryExecutionContext, connectionHolder)\n                .map(result -> {\n                    datasourceConnectionPool.releaseConnection(connectionHolder);\n                    return result;\n                })\n                .onErrorMap(throwable -> {\n                    datasourceConnectionPool.releaseConnection(connectionHolder);\n                    return throwable;\n                });\n    }", "CodeBleu_score": 46.86312772686443}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t    if (StringUtils.isBlank(timeoutStr)) {\n        return DEFAULT_QUERY_TIMEOUT_MS;\n    }\n\n    Pair<String, String> parsed = parseQueryTimeout(timeoutStr);\n    String value = parsed.getLeft();\n    String unit = parsed.getRight();\n\n    if (!NumberUtils.isCreatable(value)) {\n        throw new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid timeout value: \" + timeoutStr);\n    }\n\n    long timeoutMs = Long.parseLong(value);\n\n    if (unit.equalsIgnoreCase(\"s\")) {\n        timeoutMs *= 1000;\n    } else if (unit.equalsIgnoreCase(\"m\")) {\n        timeoutMs *= 60000;\n    } else if (unit.equalsIgnoreCase(\"h\")) {\n        timeoutMs *= 3600000;\n    } else if (unit.equalsIgnoreCase(\"d\")) {\n        timeoutMs *= 86400000;\n    }\n\n    if (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n        throw new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"Timeout value is too large: \" + timeoutStr);\n    }\n\n    return (int) timeoutMs;\n}", "CodeBleu_score": 43.98938316162587}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t    if (StringUtils.isBlank(timeoutStr)) {\n        return DEFAULT_QUERY_TIMEOUT_MS;\n    }\n    Pair<String, String> timeout = parseTimeout(timeoutStr);\n    int timeoutMs = convertTimeout(timeout.getLeft(), timeout.getRight());\n    if (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n        throw new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"Timeout value cannot exceed \" + MAX_QUERY_TIMEOUT_MS + \"ms\");\n    }\n    return timeoutMs;\n}", "CodeBleu_score": 28.329314908613757}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t    if (StringUtils.isBlank(timeoutStr)) {\n        return DEFAULT_QUERY_TIMEOUT_MS;\n    }\n\n    Pair<String, String> timeout = parseQueryTimeout(timeoutStr);\n    String value = timeout.getLeft();\n    String unit = timeout.getRight();\n\n    if (!NumberUtils.isCreatable(value)) {\n        throw new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid timeout value: \" + timeoutStr);\n    }\n\n    double timeoutMs = 0;\n    try {\n        timeoutMs = Double.parseDouble(value);\n    } catch (NumberFormatException e) {\n        throw new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid timeout value: \" + timeoutStr);\n    }\n\n    if (StringUtils.equalsIgnoreCase(unit, \"s\")) {\n        timeoutMs *= 1000;\n    } else if (StringUtils.equalsIgnoreCase(unit, \"m\")) {\n        timeoutMs *= 1000 * 60;\n    } else if (StringUtils.equalsIgnoreCase(unit, \"h\")) {\n        timeoutMs *= 1000 * 60 * 60;\n    }\n\n    if (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n        throw new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"Query timeout exceeds the maximum allowed timeout of \" + MAX_QUERY_TIMEOUT_MS + \"ms\");\n    }\n\n    return (int)timeoutMs;\n}", "CodeBleu_score": 42.21465965269382}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t    return getDatasourceIdsFromLiveQueries(application)\n            .flatMap(datasourceIds -> {\n                if (datasourceIds.isEmpty()) {\n                    return Mono.error(TEMPLATE_NOT_CORRECT.of(\"No datasource IDs found in live queries\"));\n                }\n\n                return Flux.fromIterable(datasourceIds)\n                        .flatMap(datasourceId -> {\n                            return copyDatasourceFromTemplateToCurrentOrganization(currentOrganizationId, application, datasourceId, visitorId);\n                        })\n                        .collectList();\n            });\n}", "CodeBleu_score": 35.8805663114439}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t    return Mono.justOrEmpty(application.getLiveQuery())\n            .flatMap(liveQuery -> Mono.justOrEmpty(liveQuery.getDatasourceIds()))\n            .switchIfEmpty(Mono.error(ofError(TEMPLATE_NOT_CORRECT, \"No datasource found in application\")))\n            .flatMapMany(Flux::fromIterable)\n            .flatMap(datasourceId -> datasourceService.findById(datasourceId)\n                    .switchIfEmpty(Mono.error(ofError(TEMPLATE_NOT_CORRECT, \"Datasource not found\")))\n                    .flatMap(datasource -> {\n                        Datasource datasourceCopy = datasource.toBuilder()\n                                .id(null)\n                                .creationSource(DatasourceCreationSource.COPY)\n                                .organizationId(currentOrganizationId)\n                                .build();\n                        return datasourceService.create(datasourceCopy, visitorId);\n                    }))\n            .collectList();\n}", "CodeBleu_score": 44.03092699304757}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t    return applicationService.getLiveQueries(application.getId(), visitorId)\n            .flatMap(liveQueries -> {\n                if (isNull(liveQueries) || liveQueries.isEmpty()) {\n                    return Mono.error(ofError(TEMPLATE_NOT_CORRECT, \"No queries found\"));\n                }\n                return Flux.fromIterable(liveQueries)\n                        .flatMap(query -> {\n                            if (isNull(query.getDatasourceId())) {\n                                return Mono.empty();\n                            }\n                            return datasourceService.copyDatasourceToOrganization(currentOrganizationId, query.getDatasourceId(),\n                                    DatasourceCreationSource.TEMPLATE, visitorId);\n                        })\n                        .collectList();\n            });\n}", "CodeBleu_score": 32.3215830045603}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return Mono.zip(\n            getDatasource(datasourceId),\n            getDatasource(visitorId)\n    ).map(TupleUtils.function((datasource, visitor) -> {\n        if (isNull(datasource)) {\n            throw ofError(TEMPLATE_NOT_EXIST, \"Datasource %s does not exist\", datasourceId);\n        }\n\n        if (isNull(visitor)) {\n            throw ofError(TEMPLATE_NOT_EXIST, \"Visitor %s does not exist\", visitorId);\n        }\n\n        if (datasource.getCreationSource() == DatasourceCreationSource.SYSTEM_STATIC) {\n            return datasourceId;\n        }\n\n        if (datasource.getCreationSource() == DatasourceCreationSource.OPENBLOCKS_API) {\n            return datasource.getId();\n        }\n\n        if (datasource.getCreationSource() == DatasourceCreationSource.LEGACY_QUICK_API) {\n            return datasource.getId();\n        }\n\n        Datasource newDatasource = new Datasource();\n        newDatasource.setOrganizationId(organizationId);\n        newDatasource.setVisitorId(visitorId);\n        newDatasource.setName(datasource.getName());\n        newDatasource.setDescription(datasource.getDescription());\n        newDatasource.setCreationSource(DatasourceCreationSource.USER_CREATED);\n        newDatasource.setContent(datasource.getContent());\n        return datasourceService.create(newDatasource).map(Datasource::getId);\n    }));\n}", "CodeBleu_score": 40.35498619906308}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.getDatasource(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.getCreationSource() == DatasourceCreationSource.SYSTEM_STATIC) {\n                    return Mono.just(datasource.getId());\n                } else if (datasource.getCreationSource() == DatasourceCreationSource.QUICK_REST_API || datasource.getCreationSource() == DatasourceCreationSource.LEGACY_OPENBLOCKS_API) {\n                    return Mono.just(datasource.getId());\n                } else {\n                    return datasourceService.createDatasource(organizationId, visitorId, datasource);\n                }\n            });\n}", "CodeBleu_score": 52.95331512919921}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.findById(datasourceId)\n        .flatMap(datasource -> {\n            if (datasource.isSystemStatic()) {\n                return Mono.just(datasourceId);\n            } else if (datasource.getCreationSource() == DatasourceCreationSource.QUICK_REST_API || datasource.getCreationSource() == DatasourceCreationSource.LEGACY_OPENBLOCKS_API) {\n                return Mono.just(datasourceId);\n            } else {\n                return datasourceService.create(organizationId, visitorId, datasource.getType(), datasource.getContent());\n            }\n        });\n}", "CodeBleu_score": 55.01110558737826}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t    return getAvatar(user)\n            .flatMap(oldAvatar -> deleteAvatar(oldAvatar))\n            .then(uploadAvatar(filePart, user))\n            .then(updateUser(user));\n}", "CodeBleu_score": 12.999089604868603}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t  return assetService.upload(filePart)\n    .flatMap(asset -> {\n      if (user.getAvatar() != null) {\n        return assetService.delete(user.getAvatar().getId());\n      } else {\n        return Mono.empty();\n      }\n    })\n    .then(assetService.getAsset(asset.getId()))\n    .map(asset -> {\n      user.setAvatar(asset);\n      return user;\n    })\n    .flatMap(userRepository::save)\n    .map(user -> true);\n}", "CodeBleu_score": 28.70595426078092}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t  return this.assetService.upload(filePart)\n    .flatMap(asset -> {\n      if (user.getAvatar() != null) {\n        return this.assetService.delete(user.getAvatar().getId())\n          .thenReturn(asset);\n      }\n      return Mono.just(asset);\n    })\n    .flatMap(asset -> {\n      user.setAvatar(asset);\n      return this.userRepository.save(user);\n    })\n    .map(user1 -> true);\n}", "CodeBleu_score": 26.3795953046354}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t  User user = new User();\n  user.setName(authUser.getName());\n  user.setState(UserState.NEW);\n  user.setEnabled(true);\n  user.setAvatar(authUser.getAvatar());\n  user.setConnections(authUser.getConnections());\n  user.setNew(true);\n  return userRepository.save(user);\n}", "CodeBleu_score": 26.684933968361978}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(UserState.NEW);\n    user.setEnabled(true);\n    user.setAvatarLink(authUser.getAvatarLink());\n    if (authUser.getSource() == AuthSourceConstants.EMAIL) {\n        String encryptedPassword = this.encryptionService.encryptPassword(authUser.getPassword());\n        user.setPassword(encryptedPassword);\n    }\n    user.setConnections(authUser.getConnections());\n    user.setNew(true);\n    return Mono.just(user);\n}", "CodeBleu_score": 45.042059127044986}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(UserState.NEW);\n    user.setEnabled(true);\n    user.setAvatar(authUser.getAvatar());\n    user.setConnections(authUser.getConnections());\n    return userRepository.insert(user);\n}", "CodeBleu_score": 26.5817983566422}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return this.authenticationService.bindEmail(user, email)\n            .map(user::addConnection)\n            .flatMap(this.userRepository::save)\n            .onErrorMap(DuplicateKeyException.class, e -> new BizException(BizError.EMAIL_ALREADY_EXISTS, \"Email already exists\"));\n}", "CodeBleu_score": 13.474951166508149}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t  return Mono.just(user)\n      .map(u -> {\n        Connection connection = new Connection();\n        connection.setSource(AuthSourceConstants.EMAIL);\n        connection.setSourceId(email);\n        connection.setUserId(u.getId());\n        return connection;\n      })\n      .flatMap(connection -> {\n        return authenticationService.addConnection(connection)\n            .flatMap(newConnection -> {\n              user.getConnections().add(newConnection);\n              return userRepository.save(user);\n            });\n      })\n      .onErrorMap(DuplicateKeyException.class, e -> BizException.of(BizError.EMAIL_ALREADY_IN_USE));\n}", "CodeBleu_score": 36.309096032325506}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return Mono.just(email)\n        .map(this::createConnection)\n        .map(connection -> {\n            user.getConnections().add(connection);\n            return user;\n        })\n        .flatMap(this::saveUser)\n        .onErrorResume(DuplicateKeyException.class, e -> Mono.error(ofError(BizError.EMAIL_ALREADY_BINDED)))\n        .onErrorMap(e -> ofException(e, BizError.BIND_EMAIL_FAILED));\n}", "CodeBleu_score": 28.190561789147473}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t  return Mono.fromCallable(() -> {\n    User user = userRepository.findById(userId).orElseThrow(() -> new BizException(BizError.USER_NOT_FOUND));\n    if (!encryptionService.isValidPassword(oldPassword, user.getPassword())) {\n      throw new BizException(BizError.INVALID_PASSWORD);\n    }\n    user.setPassword(encryptionService.encryptPassword(newPassword));\n    userRepository.save(user);\n    return true;\n  });\n}", "CodeBleu_score": 28.31100752359767}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return getUserById(userId)\n            .flatMap(user -> {\n                if (!encryptionService.checkPassword(oldPassword, user.getPassword())) {\n                    return Mono.error(BizException.of(BizError.INVALID_PASSWORD));\n                }\n                String encryptedPassword = encryptionService.encryptPassword(newPassword);\n                return updateUser(userId, user.setPassword(encryptedPassword));\n            });\n}", "CodeBleu_score": 27.959799600886882}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return userRepository.findById(userId)\n        .flatMap(user -> {\n            if (encryptionService.isValidPassword(oldPassword, user.getPassword())) {\n                String encryptedPassword = encryptionService.encryptPassword(newPassword);\n                user.setPassword(encryptedPassword);\n                return userRepository.save(user);\n            }\n            return Mono.error(BizException.of(BizError.INVALID_PASSWORD));\n        });\n}", "CodeBleu_score": 29.079421111926155}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t    return getGroups(orgMember, withoutDynamicGroups)\n            .map(groups -> groups.stream()\n                    .filter(group -> !group.getId().equals(Conf.get().getAllUsersGroupId()))\n                    .collect(Collectors.toList()))\n            .map(groups -> groups.stream()\n                    .map(group -> {\n                        Map<String, String> groupMap = new HashMap<>();\n                        groupMap.put(FieldName.ID, group.getId());\n                        groupMap.put(FieldName.NAME, LocaleUtils.getLocalizedString(group.getName(), locale));\n                        return groupMap;\n                    })\n                    .collect(Collectors.toList()));\n}", "CodeBleu_score": 31.15761344163717}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t    return getGroups(orgMember, withoutDynamicGroups).map(groups -> {\n        return groups.stream().filter(group -> !group.getId().equals(Conf.get().getDefaultGroupId()))\n                .map(group -> {\n                    Map<String, String> groupMap = Maps.newHashMap();\n                    groupMap.put(\"id\", group.getId());\n                    groupMap.put(\"name\", LocaleUtils.getLocalizedString(group.getName(), locale));\n                    return groupMap;\n                }).collect(Collectors.toList());\n    });\n}", "CodeBleu_score": 27.450603131887764}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t        if (orgMember.isAdmin()) {\n            return groupService.getAllGroups(orgMember.getOrgId())\n                    .filter(group -> !group.isDynamic())\n                    .map(group -> {\n                        Map<String, String> groupMap = new HashMap<>();\n                        groupMap.put(\"id\", group.getId());\n                        groupMap.put(\"name\", group.getLocalizedName(locale));\n                        return groupMap;\n                    })\n                    .collectList();\n        } else {\n            return groupService.getGroupsForUser(userId, orgMember.getOrgId(), withoutDynamicGroups)\n                    .filter(group -> !group.isDynamic())\n                    .map(group -> {\n                        Map<String, String> groupMap = new HashMap<>();\n                        groupMap.put(\"id\", group.getId());\n                        groupMap.put(\"name\", group.getLocalizedName(locale));\n                        return groupMap;\n                    })\n                    .collectList();\n        }\n    }", "CodeBleu_score": 30.91166523555219}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    UserStatus userStatus = new UserStatus();\n    userStatus.setUserId(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n\n    return mongoUpsertHelper.upsert(\n        userStatusRepository,\n        new Update().set(\"hasShowNewUserGuidance\", true),\n        userStatus\n    );\n}", "CodeBleu_score": 36.9261755945467}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t  UserStatus userStatus = new UserStatus();\n  userStatus.setUserId(userId);\n  userStatus.setHasShowNewUserGuidance(true);\n\n  Update update = new Update();\n  update.set(\"hasShowNewUserGuidance\", true);\n\n  return mongoUpsertHelper.upsert(userStatusRepository, userStatus, update, UserStatus.class, UserStatusType.USER_STATUS);\n}", "CodeBleu_score": 36.45476936175033}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    UserStatus userStatus = new UserStatus();\n    userStatus.setUserId(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n\n    return mongoUpsertHelper.upsert(\n        userStatusRepository,\n        userStatus,\n        UserStatus.class,\n        userStatus.getUserId(),\n        Update.update(\"hasShowNewUserGuidance\", true)\n    );\n}", "CodeBleu_score": 37.43541358610322}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\n\tif predicatePartition == nil {\n\t\t// Clear all partitions\n\t\tfor _, p := range c.partitions {\n\t\t\tc.ClearMatching(func(k string, p PartitionManager) bool { return true }, predicateValue)\n\t\t}\n\t\treturn\n\t}\n\n\tvar wg sync.WaitGroup\n\n\trg := rungroup.NewRunGroup(&wg)\n\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.Name(), p) {\n\t\t\trg.Add(1)\n\t\t\tgo func(p PartitionManager) {\n\t\t\t\tdefer rg.Done()\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t}(p)\n\t\t}\n\t}\n\n\trg.Wait()\n}", "CodeBleu_score": 45.16766597330289}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicateValue == nil {\n\t\tpanic(\"predicateValue is nil\")\n\t}\n\n\tif predicatePartition == nil {\n\t\tpredicatePartition = func(k string, p PartitionManager) bool {\n\t\t\treturn true\n\t\t}\n\t}\n\n\tvar wg sync.WaitGroup\n\tr := rungroup.NewRunGroup(&wg)\n\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.name, p) {\n\t\t\tr.Add(func() error {\n\t\t\t\tp.clearMatching(predicateValue)\n\t\t\t\treturn nil\n\t\t\t})\n\t\t}\n\t}\n\n\tr.Wait()\n}", "CodeBleu_score": 54.77196095070514}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition must not be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue must not be nil\")\n\t}\n\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\n\tif c.closed {\n\t\treturn\n\t}\n\n\t// We need to create a new map to avoid concurrent access to the\n\t// partitions map.\n\tpartitions := make(map[string]PartitionManager)\n\n\tfor k, v := range c.partitions {\n\t\tpartitions[k] = v\n\t}\n\n\trg := rungroup.NewRunGroup(context.Background())\n\n\tfor k, v := range partitions {\n\t\tif predicatePartition(k, v) {\n\t\t\trg.Add(func() error {\n\t\t\t\tv.ClearMatching(predicateValue)\n\t\t\t\treturn nil\n\t\t\t})\n\t\t}\n\t}\n\n\trg.Wait()\n}", "CodeBleu_score": 42.9627640627291}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif maxItemsTotal <= 0 || totalWeightQuantity <= 0 || numPartitions <= 0 {\n\t\treturn 0\n\t}\n\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\tmaxSizePerPartition := int(math.Ceil(float64(maxItemsTotal) * avgWeightPerPartition))\n\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 41.676392185091245}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\tavgWeightPerPartition := totalWeightQuantity / numPartitions\n\tmaxSizePerPartition := int(math.Ceil(float64(maxItemsTotal) / float64(avgWeightPerPartition)))\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 41.78498495328705}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif maxItemsTotal <= 0 || totalWeightQuantity <= 0 || numPartitions <= 0 {\n\t\treturn 0\n\t}\n\n\t// Calculate the average weight per partition\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\n\t// Calculate the maximum size per partition\n\tmaxSizePerPartition := int(math.Ceil(averageWeightPerPartition * float64(maxItemsTotal)))\n\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 41.21939973422603}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t    Map<String, Object> map = new HashMap<>();\n    map.put(\"database\", databaseMetadata());\n    return map;\n}", "CodeBleu_score": 20.08091277382308}, {"code": "public Map<String, Object> contributorMap(){\n\t    Map<String, Object> map = new HashMap<>();\n    if (connectionMetadata != null) {\n        map.put(\"databaseProductName\", connectionMetadata.getDatabaseProductName());\n        map.put(\"databaseProductVersion\", connectionMetadata.getDatabaseProductVersion());\n    }\n    return map;\n}", "CodeBleu_score": 41.45827103450696}, {"code": "public Map<String, Object> contributorMap(){\n\t    Map<String, Object> map = new HashMap<>();\n    try {\n        ConnectionFactory connectionFactory = ConnectionFactoryProvider.getConnectionFactory();\n        Mono<Connection> connection = connectionFactory.create();\n        Mono<ConnectionMetadata> metadata = connection.flatMap(Connection::getMetadata);\n        metadata.subscribe(connectionMetadata -> {\n            if (connectionMetadata != null) {\n                map.put(\"databaseProductName\", connectionMetadata.getDatabaseProductName());\n                map.put(\"databaseProductVersion\", connectionMetadata.getDatabaseProductVersion());\n            }\n        });\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return map;\n}", "CodeBleu_score": 41.140179436324445}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    User userSetting = configMap.get(User.class);\n    if (userSetting == null) {\n        info.setUserSetting(null);\n        info.setRegisterEnabled(false);\n        info.setEmailVerifyEnabled(false);\n        return;\n    }\n\n    info.setUserSetting(userSetting);\n    info.setRegisterEnabled(isTrue(userSetting.getEnableRegister()));\n    info.setEmailVerifyEnabled(isTrue(userSetting.getEnableEmailVerify()));\n}", "CodeBleu_score": 46.55870260800045}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    User userSetting = configMap.getUser();\n    if (userSetting == null) {\n        info.setEnableRegistration(false);\n        info.setEnableEmailVerify(false);\n        return;\n    }\n\n    info.setEnableRegistration(userSetting.isEnableRegistration());\n    info.setEnableEmailVerify(userSetting.isEnableEmailVerify());\n}", "CodeBleu_score": 42.121333950632526}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    User userSetting = configMap.get(SystemSetting.USER_SETTING_KEY);\n    if (userSetting == null) {\n        info.setRegistrationEnabled(false);\n        info.setEmailVerificationEnabled(false);\n    } else {\n        info.setRegistrationEnabled(isTrue(userSetting.getRegistrationEnabled()));\n        info.setEmailVerificationEnabled(isTrue(userSetting.getEmailVerificationEnabled()));\n    }\n}", "CodeBleu_score": 47.11563201615446}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t    // \u542f\u52a8\u65f6\u95f4\n    long startTime = System.currentTimeMillis();\n\n    // \u521b\u5efa\u65b0\u7684\u7ebf\u7a0b\u7ec4\n    ThreadGroup threadGroup = new ThreadGroup(\"halo-restart-group\");\n\n    // \u521b\u5efa\u65b0\u7684\u7ebf\u7a0b\n    Thread thread = new Thread(threadGroup, \"halo-restart-thread\") {\n        @Override\n        public void run() {\n            // \u5173\u95ed\u6240\u6709\u7684closeable\n            closeAllCloseable();\n\n            // \u91cd\u65b0\u542f\u52a8\n            SpringApplication.run(Application.class, new String[]{});\n        }\n    };\n\n    // \u8bbe\u7f6e\u7ebf\u7a0b\u4e3a\u975e\u5b88\u62a4\u7ebf\u7a0b\n    thread.setDaemon(false);\n\n    // \u8bbe\u7f6e\u7ebf\u7a0b\u7684\u4e0a\u4e0b\u6587\u7c7b\u52a0\u8f7d\u5668\n    thread.setContextClassLoader(Application.class.getClassLoader());\n\n    // \u542f\u52a8\u7ebf\u7a0b\n    thread.start();\n\n    // \u8fd4\u56de\u91cd\u542f\u6d88\u606f\n    return \"Restarting Halo, please wait...\";\n}", "CodeBleu_score": 48.67174558804337}, {"code": "public Object restart(){\n\t    ThreadGroup threadGroup = new ThreadGroup(\"restart\");\n    Thread thread = new Thread(threadGroup, () -> {\n        try {\n            log.info(\"Restarting application...\");\n            SpringApplication.run(Application.class, new String[]{});\n        } catch (Exception e) {\n            log.error(\"Failed to restart application\", e);\n        }\n    });\n    thread.setContextClassLoader(Application.class.getClassLoader());\n    thread.setDaemon(false);\n    thread.start();\n    return \"Restarting application...\";\n}", "CodeBleu_score": 53.09300962311797}, {"code": "public Object restart(){\n\t    ThreadGroup threadGroup = new ThreadGroup(\"restart\");\n    Thread thread = new Thread(threadGroup, \"restart\", () -> {\n        try {\n            // \u5173\u95ed\u6240\u6709\u7684\u5173\u95ed\u94a9\u5b50\n            closeAllHooks();\n            // \u5173\u95ed\u6240\u6709\u7684\u5173\u95ed\u94a9\u5b50\n            closeAllCloseables();\n            // \u5173\u95ed\u6240\u6709\u7684\u5173\u95ed\u94a9\u5b50\n            closeAllCloseables();\n            // \u5173\u95ed\u6240\u6709\u7684\u5173\u95ed\u94a9\u5b50\n            closeAllCloseables();\n            // \u5173\u95ed\u6240\u6709\u7684\u5173\u95ed\u94a9\u5b50\n            closeAllCloseables();\n            // \u5173\u95ed\u6240\u6709\u7684\u5173\u95ed\u94a9\u5b50\n            closeAllCloseables();\n            // \u5173\u95ed\u6240\u6709\u7684\u5173\u95ed\u94a9\u5b50\n            closeAllCloseables();\n            // \u5173\u95ed\u6240\u6709\u7684\u5173\u95ed\u94a9\u5b50\n            closeAllCloseables();\n            // \u5173\u95ed\u6240\u6709\u7684\u5173\u95ed\u94a9\u5b50\n            closeAllCloseables();\n            // \u5173\u95ed\u6240\u6709\u7684\u5173\u95ed\u94a9\u5b50\n            closeAllCloseables();\n            // \u5173\u95ed\u6240\u6709\u7684\u5173\u95ed\u94a9\u5b50\n            closeAllCloseables();\n            // \u5173\u95ed\u6240\u6709\u7684\u5173\u95ed\u94a9\u5b50\n            closeAllCloseables();\n            // \u5173\u95ed\u6240\u6709\u7684\u5173\u95ed\u94a9\u5b50\n            closeAllCloseables();\n            // \u5173\u95ed\u6240\u6709\u7684\u5173\u95ed\u94a9\u5b50\n            closeAllCloseables();\n            // \u5173\u95ed\u6240\u6709\u7684\u5173\u95ed\u94a9\u5b50\n            closeAllCloseables();\n            // \u5173\u95ed\u6240\u6709\u7684\u5173\u95ed\u94a9\u5b50\n            closeAllCloseables();\n            // \u5173\u95ed\u6240\u6709\u7684\u5173\u95ed\u94a9\u5b50\n            closeAllCloseables();\n            // \u5173\u95ed\u6240\u6709\u7684\u5173\u95ed\u94a9\u5b50\n            closeAllCloseables();\n            // \u5173\u95ed", "CodeBleu_score": 22.748728213705753}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t\n    // \u4f7f\u7528\u81ea\u5b9a\u4e49\u7684 ObjectMapper\n    ObjectMapper objectMapper = HaloObjectMapper.getInstance();\n\n    // \u914d\u7f6e jackson \u89e3\u7801\u5668\n    Jackson2JsonDecoder decoder = new Jackson2JsonDecoder(objectMapper);\n    configurer.customCodecs().registerWithDefaultConfig(decoder);\n\n    // \u914d\u7f6e jackson \u7f16\u7801\u5668\n    Jackson2JsonEncoder encoder = new Jackson2JsonEncoder(objectMapper);\n    configurer.customCodecs().registerWithDefaultConfig(encoder);\n}", "CodeBleu_score": 36.84911441824092}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t     configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n     configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n }", "CodeBleu_score": 71.35968156121783}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t    configurer.defaultCodecs().jackson2JsonEncoder(\n        new Jackson2JsonEncoder(haloProperties.getObjectMapper()));\n    configurer.defaultCodecs().jackson2JsonDecoder(\n        new Jackson2JsonDecoder(haloProperties.getObjectMapper()));\n}", "CodeBleu_score": 52.72351713388994}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return route(\n        path(HALO_CONSOLE_PATH,\n            method(HttpMethod.GET,\n                accept(MediaType.TEXT_HTML, MediaType.ALL),\n                WebSocketRequestPredicate.negate())\n                .and(path(HALO_CONSOLE_PATH + \"/**\")\n                    .negate())),\n        request -> ServerResponse.ok().contentType(MediaType.TEXT_HTML)\n            .body(BodyInserters.fromResource(new ClassPathResource(HALO_CONSOLE_INDEX_FILE)))\n    );\n}", "CodeBleu_score": 22.45390295426039}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return route(\n        path(CONSOLE_PATH_PREFIX + \"/**\")\n            .and(method(HttpMethod.GET))\n            .and(accept(MediaType.TEXT_HTML))\n            .and(WebSocketRequestPredicate.negate()),\n        request -> ServerResponse.temporaryRedirect(URI.create(CONSOLE_PATH_PREFIX))\n            .build());\n}", "CodeBleu_score": 25.960804194513713}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return route(\n        path(\"/console/**\")\n            .and(accept(MediaType.TEXT_HTML))\n            .and(method(HttpMethod.GET))\n            .and(WebSocketRequestPredicate.negate())\n            .and(ProxyFilter.negate()),\n        request -> ServerResponse.ok().body(BodyInserters.fromResource(new ClassPathResource(\"console/index.html\"))));\n}", "CodeBleu_score": 31.95801073233333}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    return route(\n        method(HttpMethod.GET)\n            .and(path(\"/uc/**\")\n                .negate()\n                .and(path(\"/uc/assets/**\")\n                    .negate()))\n            .and(accept(MediaType.TEXT_HTML))\n            .and(WebSocketRequestPredicate.negate()),\n        request -> ServerResponse.temporaryRedirect(URI.create(\"/uc/\"))\n            .build());\n}", "CodeBleu_score": 32.099702838047314}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    return route(\n        method(HttpMethod.GET)\n            .and(path(\"/uc/**\")\n                .negate()\n                .and(path(\"/uc/assets/**\").negate()))\n            .and(accept(MediaType.TEXT_HTML))\n            .and(WebSocketRequestPredicate.negate()),\n        request -> {\n            var indexHtml = new ClassPathResource(\"static/uc/index.html\");\n            return ServerResponse.ok()\n                .contentType(MediaType.TEXT_HTML)\n                .cacheControl(CacheControl.maxAge(30, TimeUnit.SECONDS))\n                .body(BodyInserters.fromResource(indexHtml));\n        });\n}", "CodeBleu_score": 31.04761440297913}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    return route(\n        path(\n            Predicates.and(\n                Predicates.not(path(\"/uc/assets/**\")),\n                Predicates.accept(MediaType.TEXT_HTML),\n                Predicates.not(WebSocketRequestPredicate.INSTANCE)\n            )\n        )\n            .and(method(HttpMethod.GET)),\n        request -> ServerResponse\n            .temporaryRedirect(URI.create(\"/uc/\"))\n            .build()\n    );\n}", "CodeBleu_score": 28.183107603036326}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    return new InMemoryReactiveIndexedSessionRepository(\n        new ConcurrentHashMap<>(),\n        sessionProperties.getTimeout()\n    );\n}", "CodeBleu_score": 14.15363562017572}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\n    // Create a concurrent hash map to hold the session data.\n    ConcurrentHashMap<String, MapSession> sessionMap = new ConcurrentHashMap<>();\n\n    // Create a new session repository using the concurrent hash map.\n    InMemoryReactiveIndexedSessionRepository sessionRepository =\n        new InMemoryReactiveIndexedSessionRepository(sessionMap);\n\n    // Set the default session timeout to the configured session timeout.\n    sessionRepository.setDefaultMaxInactiveInterval(\n        sessionProperties.getTimeout().toMillis());\n\n    // Return the configured repository.\n    return sessionRepository;\n}", "CodeBleu_score": 33.42951422978574}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    ConcurrentHashMap<String, MapSession> sessionMap = new ConcurrentHashMap<>();\n    return new InMemoryReactiveIndexedSessionRepository(sessionMap);\n}", "CodeBleu_score": 17.02038536422386}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    var userDetailService = new DefaultUserDetailService(userService, roleService);\n    userDetailService.setEnableTwoFactorAuthentication(\n            haloProperties.getSecurity().getTwoFactorAuthentication().isEnable());\n    return userDetailService;\n}", "CodeBleu_score": 52.84534363441627}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    var userDetailService = new DefaultUserDetailService(userService, roleService);\n    userDetailService.setEnableTwoFactorAuthentication(haloProperties.getSecurity()\n            .isEnableTwoFactorAuthentication());\n    return userDetailService;\n}", "CodeBleu_score": 50.95979994739624}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService userDetailService = new DefaultUserDetailService(userService,\n            roleService);\n    userDetailService.setTwoFactorAuthenticationEnabled(\n            haloProperties.getSecurity().isTwoFactorAuthenticationEnabled());\n    return userDetailService;\n}", "CodeBleu_score": 50.625113353428375}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Assert.notNull(this.getEmail(), \"Email must not be null\");\n    return new Comment.CommentOwner()\n        .setKind(\"email\")\n        .setEmail(StringUtils.trimToEmpty(this.getEmail()))\n        .setDisplayName(StringUtils.trimToEmpty(this.getDisplayName()))\n        .setWebsite(StringUtils.trimToEmpty(this.getWebsite()))\n        .setAvatar(StringUtils.trimToEmpty(this.getAvatar()));\n}", "CodeBleu_score": 14.335469430478865}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Assert.notNull(this.getEmail(), \"Email must not be null\");\n    return new Comment.CommentOwner(\n        this.getEmail(),\n        this.getDisplayName(),\n        this.getAvatar(),\n        this.getWebsite());\n}", "CodeBleu_score": 7.950495329741411}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Assert.notNull(this.getEmail(), \"Email must not be null\");\n    Comment.CommentOwner commentOwner = new Comment.CommentOwner();\n    commentOwner.setKind(\"email\");\n    commentOwner.setEmail(this.getEmail());\n    commentOwner.setDisplayName(this.getDisplayName());\n    commentOwner.setWebsite(this.getWebsite());\n    commentOwner.setAvatar(this.getAvatar());\n    return commentOwner;\n}", "CodeBleu_score": 31.542589301370715}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    if (commentOwner.getKind() == Comment.CommentOwnerKind.EMAIL) {\n        return Optional.ofNullable(post.getUser())\n            .map(User::getEmail).map(String::toLowerCase)\n            .map(email -> email.equalsIgnoreCase(commentOwner.getName()))\n            .orElse(false);\n    } else {\n        return Optional.ofNullable(post.getUser())\n            .map(User::getUsername).map(String::toLowerCase)\n            .map(username -> username.equalsIgnoreCase(commentOwner.getName()))\n            .orElse(false);\n    }\n}", "CodeBleu_score": 25.20190311029075}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    return post.getOwner().getKind() == commentOwner.getKind()\n        && (post.getOwner().getKind() == User.Kind.EMAIL\n        ? post.getOwner().getName().equals(commentOwner.getName())\n        : post.getOwner().getName().equals(commentOwner.getName()));\n}", "CodeBleu_score": 29.17478905291021}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    if (commentOwner == null) {\n        return false;\n    }\n\n    if (commentOwner.getKind() == null) {\n        return false;\n    }\n\n    if (commentOwner.getKind().equals(Comment.CommentOwner.Kind.EMAIL)) {\n        if (post.getAuthor() == null) {\n            return false;\n        }\n\n        return commentOwner.getName().equals(post.getAuthor().getEmail());\n    }\n\n    return commentOwner.getName().equals(post.getAuthor().getUsername());\n}", "CodeBleu_score": 34.04817728298696}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\t    return toListOptions(null, null, null);\n}", "CodeBleu_score": 1.2045604070744236}, {"code": "public ListOptions toListOptions(){\n\t    return labelAndFieldSelectorToListOptions(fieldSelector, keyword, ownerName);\n}", "CodeBleu_score": 1.2202331018544195}, {"code": "public ListOptions toListOptions(){\n\t    return QueryParamBuildUtil.toListOptions(this);\n}", "CodeBleu_score": 0.8997902289413553}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return counterService.getCounter(commentName, Comment.class)\n        .map(counter -> new CommentStats(counter.getCount()));\n}", "CodeBleu_score": 16.555758754978992}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return CounterService.getCounter(CounterService.getCommentCounterName(commentName))\n        .map(counter -> new CommentStats(commentName, counter.getCount()));\n}", "CodeBleu_score": 16.642318431998333}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return CounterService.getCounter(commentName)\n        .map(counter -> new CommentStats(counter.getCount()));\n}", "CodeBleu_score": 31.036644291335836}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t    Subscription subscription = Subscription.builder()\n        .subscriber(identity)\n        .interestReason(NotificationReasonConst.REPLY_TO_YOU)\n        .interestCondition(StringUtils.quote(identity.getUsername()))\n        .build();\n    NotificationCenter.subscribe(subscription);\n}", "CodeBleu_score": 38.537935033758195}, {"code": "void subscribeReply(UserIdentity identity){\n\t    Subscription subscriber = new Subscription(identity);\n    subscriber.addInterest(NotificationReasonConst.REPLY,\n        (Reply reply) -> reply.getOwner().equals(identity.getUsername()));\n    notificationCenter.subscribe(subscriber);\n}", "CodeBleu_score": 23.10838382767308}, {"code": "void subscribeReply(UserIdentity identity){\n\t    Subscription subscription = new Subscription(identity);\n    subscription.setReason(NotificationReasonConst.REPLY,\n        StringUtils.format(\"{0} {1}\", NotificationReasonConst.REPLY, identity.getUsername()));\n    notificationCenter.subscribe(subscription);\n}", "CodeBleu_score": 23.697999696320576}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return client.update(comment.getId(), comment.setApproved(true).setApprovedAt(Instant.now()))\n        .retryWhen(Retry.onlyIf(e -> e instanceof OptimisticLockingFailureException)\n            .withBackoff(Duration.ofMillis(100), Duration.ofSeconds(10), 3)\n            .withJitter(0.5)\n            .doBeforeRetry(e -> log.warn(\"Optimistic locking failure when approving comment {}\", comment.getId())));\n}", "CodeBleu_score": 27.997528196374326}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return client.update(comment.setApproved(true).setApprovedAt(Instant.now()))\n        .retryWhen(Retry.onlyIf(e -> e instanceof OptimisticLockingFailureException)\n            .withBackoff(Duration.ofMillis(100), Duration.ofSeconds(10))\n            .withJitter(0.5)\n            .withMaxAttempts(5));\n}", "CodeBleu_score": 21.289244427708613}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return client.update(comment.setApproved(true).setApprovedAt(Instant.now()))\n        .onErrorResume(OptimisticLockingFailureException.class, e -> {\n            return client.findById(comment.getId())\n                .flatMap(oldComment -> {\n                    return client.update(updateFunction.apply(oldComment, comment));\n                });\n        });\n}", "CodeBleu_score": 33.12170573426254}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->setLivewire($this);\n    }\n\n    if ($action instanceof HasRecord && $this instanceof HasRecord) {\n        $action->setRecord($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 60.83286416955309}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->mountUsing(fn () => $this);\n    }\n\n    if ($this instanceof HasRecord && $action instanceof HasRecord) {\n        $action->record($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 66.77236441542921}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->mountUsing(fn () => $this);\n    }\n\n    if ($this instanceof HasRecord && $action instanceof HasRecord) {\n        $action->record($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 66.77236441542921}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    if (filled($this->successRedirectUrl)) {\n        if (is_app_url($this->successRedirectUrl)) {\n            return $this->redirect($this->successRedirectUrl);\n        }\n\n        return $this->redirectToRoute($this->successRedirectUrl);\n    }\n\n    return $this;\n}", "CodeBleu_score": 30.12013571485245}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    if (filled($this->getSuccessRedirectUrl())) {\n        return $this->redirectTo($this->getSuccessRedirectUrl());\n    }\n\n    return $this;\n}", "CodeBleu_score": 32.56507271869695}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    if ($this->successRedirectTo) {\n        if (is_app_url($this->successRedirectTo)) {\n            return redirect($this->successRedirectTo);\n        }\n\n        return FilamentView::render($this->successRedirectTo);\n    }\n\n    return $this;\n}", "CodeBleu_score": 28.30721535090099}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if (!$record) {\n        return;\n    }\n\n    if (!method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagType = $state['tag_type'] ?? null;\n    $tagModel = $tagType ? Tag::getTagType($tagType)->getTagModel() : Tag::getTagModel();\n\n    $tagNames = $state['tags'] ?? [];\n\n    $tags = $tagModel::whereIn('name', $tagNames)->get();\n\n    if ($tags->count() < count($tagNames)) {\n        $tagNamesToCreate = array_diff($tagNames, $tags->pluck('name')->toArray());\n\n        $tagsToCreate = $tagModel::create(\n            array_map(\n                function (string $tagName) use ($tagType): array {\n                    return ['name' => $tagName, 'type' => $tagType];\n                },\n                $tagNamesToCreate\n            )\n        );\n\n        $tags = $tags->merge($tagsToCreate);\n    }\n\n    $record->tags()->sync($tags->pluck('id'));\n}", "CodeBleu_score": 43.127888613875875}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if ($record && method_exists($record, 'tags')) {\n        $tagModel = config('filament-spatie-laravel-tags-plugin.tag_model');\n        $tagType = $state['tag_type'] ?? null;\n\n        if ($tagType && $tagType !== 'all') {\n            $tagModel = app(AllTagTypes::class)->get($tagType);\n        }\n\n        $tags = $tagModel::whereIn('name', $state['tags'] ?? [])->get();\n        $record->tags()->sync($tags->pluck('id'));\n    }\n}", "CodeBleu_score": 36.90044836095667}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if ($record && method_exists($record, 'tags')) {\n        $tagModel = $this->getTagModel();\n\n        $tags = collect($state)\n            ->map(function (string $tagName) use ($tagModel) {\n                return $tagModel::findFromString($tagName);\n            })\n            ->filter()\n            ->all();\n\n        $record->tags()->sync($tags);\n    }\n}", "CodeBleu_score": 35.44160674928219}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path to obtain the space path and repository name\n\tspacePath, repoName, err := paths.DissectRepositoryPath(repoPath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to dissect repository path: %w\", err)\n\t}\n\t// Create a scope and resource for the pipeline\n\tpipelineScope := types.Scope{\n\t\tType: enum.PipelineScopeType,\n\t\tID:   spacePath,\n\t}\n\tpipelineResource := types.Resource{\n\t\tType: enum.PipelineResourceType,\n\t\tID:   repoName + \"/\" + pipelineIdentifier,\n\t}\n\t// Perform the permission check\n\tif err := authorizer.Check(ctx, session, pipelineScope, pipelineResource, permission); err != nil {\n\t\treturn fmt.Errorf(\"failed to check pipeline permission: %w\", err)\n\t}\n\treturn nil\n}", "CodeBleu_score": 62.6658964330958}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\n\tspacePath, repoName, err := paths.DissectRepoPath(repoPath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error dissecting repo path: %s\", err.Error())\n\t}\n\n\tscope := &types.Scope{\n\t\tSpacePath: spacePath,\n\t\tRepoName:  repoName,\n\t}\n\n\tresource := &types.Resource{\n\t\tType: enum.Pipeline,\n\t\tName: pipelineIdentifier,\n\t}\n\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err != nil {\n\t\treturn fmt.Errorf(\"error checking authorization: %s\", err.Error())\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 68.3426700106716}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := paths.DissectRepoPath(repoPath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to dissect repository path: %w\", err)\n\t}\n\n\tscope := types.Scope{\n\t\tType: types.ScopeTypeSpace,\n\t\tName: spacePath,\n\t}\n\n\tresource := types.Resource{\n\t\tType: types.ResourceTypePipeline,\n\t\tName: pipelineIdentifier,\n\t}\n\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err != nil {\n\t\treturn fmt.Errorf(\"failed to check authorization: %w\", err)\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 66.36725029567401}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tif session == nil {\n\t\treturn fmt.Errorf(\"session is nil\")\n\t}\n\n\tif space == nil {\n\t\treturn fmt.Errorf(\"space is nil\")\n\t}\n\n\tif permission == \"\" {\n\t\treturn fmt.Errorf(\"permission is empty\")\n\t}\n\n\tparentSpace, err := GetParentSpace(ctx, authorizer, session, space)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope := fmt.Sprintf(\"%s:%s\", parentSpace.Name, space.Name)\n\tresource := fmt.Sprintf(\"space/%s\", space.Name)\n\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 54.04005632256044}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\t// Get the parent space and name\n\tparentSpace, name := paths.GetParentSpaceAndName(space.Path)\n\t// Create a scope and resource based on the parent space and name\n\tscope := authz.NewScope(parentSpace, name)\n\tresource := authz.NewResource(scope, permission)\n\t// Check if the session has permission to the resource\n\treturn authorizer.Check(ctx, session, resource)\n}", "CodeBleu_score": 28.505307157737647}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tscope := &types.Scope{\n\t\tType: enum.SpaceScope,\n\t\tName: space.Parent,\n\t}\n\tresource := &types.Resource{\n\t\tType: enum.SpaceResource,\n\t\tName: space.Name,\n\t}\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 44.50941145500325}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tvar err error\n\t\tsource, err = json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tvar result map[string]any\n\tif err := json.Unmarshal(source, &result); err != nil {\n\t\treturn nil, err\n\t}\n\n\tsanitized, err := json.Marshal(result)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn bytes.TrimSuffix(sanitized, []byte(\"\n\")), nil\n}", "CodeBleu_score": 33.52159116162595}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, _ = json.Marshal(data)\n\t}\n\n\tvar rawMap map[string]any\n\tif err := json.Unmarshal(source, &rawMap); err != nil {\n\t\treturn nil, usererror.New(usererror.InvalidJSON, err.Error())\n\t}\n\n\tsanitized, err := json.Marshal(rawMap)\n\tif err != nil {\n\t\treturn nil, usererror.New(usererror.InvalidJSON, err.Error())\n\t}\n\n\treturn bytes.TrimRight(sanitized, \"\n\"), nil\n}", "CodeBleu_score": 36.641284694630606}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tvar err error\n\t\tsource, err = json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tvar result map[string]any\n\terr := json.Unmarshal(source, &result)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tsanitized, err := json.Marshal(result)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn bytes.TrimRight(sanitized, \"\n\"), nil\n}", "CodeBleu_score": 33.080798326553236}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference.\n\trepoID, err := c.validateRepoRef(repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch the repository.\n\trepo, err := c.store.GetRepository(ctx, repoID)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check access permissions.\n\tif err := c.checkRepoAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 49.14789339982233}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference.\n\tif err := git.ValidateRepositoryReference(repoRef); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch the repository.\n\trepo, err := c.store.GetRepository(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check access permissions for the session.\n\tif err := authz.CheckAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 47.18636524479195}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference.\n\trepoRef, err := c.validateRepoRef(repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch the repository.\n\trepo, err := c.getRepo(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the required permissions for the session on the repository.\n\tif err := c.checkRepoAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 47.48901370638391}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty:      sanitizeEmptyPayload,\n\t\tenum.CheckPayloadKindRaw:        sanitizeRawPayload,\n\t\tenum.CheckPayloadKindMarkdown:   sanitizeRawPayload,\n\t\tenum.CheckPayloadKindPipeline:   sanitizePipelinePayload,\n\t}\n}", "CodeBleu_score": 26.722724250621688}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindRaw: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindMarkdown: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindPipeline: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t}\n}", "CodeBleu_score": 24.85861142804076}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty:    sanitizeEmptyCheck,\n\t\tenum.CheckPayloadKindRaw:      sanitizeRawCheck,\n\t\tenum.CheckPayloadKindMarkdown: sanitizeRawCheck,\n\t\tenum.CheckPayloadKindPipeline: sanitizePipelineCheck,\n\t}\n}", "CodeBleu_score": 25.772393251072856}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t  self.state.on_render = on_render\n  if not self.state.attached then \n    self:attach()\n  end\n  return self", "CodeBleu_score": 41.6769538068362}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t  local buffer = self\n  local state = buffer.state\n  local renderer = buffer.renderer\n  local screen = renderer.screen\n  local screen_state = screen.state\n  local buffer_index = screen_state.buffer_index\n  local buffer_state = screen_state.buffer_states[buffer_index]\n\n  -- Set the on_render function in the buffer's state.\n  state.on_render = on_render\n\n  -- If the buffer is not already attached to the screen, attach it.\n  if not buffer_state then\n    -- Set the buffer's state.\n    buffer_state = {\n      buffer = buffer,\n      on_render = on_render,\n      offset = 0,\n      offset_x = 0,\n      offset_y = 0,\n      width = screen.width,\n      height = screen.height,\n      scroll_offset = 0,\n      scroll_offset_x = 0,\n      scroll_offset_y = 0,\n      scroll_width = screen.width,\n      scroll_height = screen.height,\n      scroll_region_offset = 0,\n      scroll_region_offset_x = 0,\n      scroll_region_offset_y = 0,\n      scroll_region_width = screen.width,\n      scroll_region_height = screen.height,\n      cursor_x = 0,\n      cursor_y = 0,\n      cursor_shape = 'block',\n      cursor_blink = false,\n      cursor_enabled = true,\n      cursor_row = 1,\n      cursor_col = 1,\n      cursor_row_offset = 0,\n      cursor_col_offset = 0,\n      cursor_row_offset_x = 0,\n      cursor_row_offset_y = 0,\n      cursor_col_offset_x = 0,\n      cursor_col_offset_y = 0,\n      scroll_region_top = 1,\n      scroll_region_bottom = screen.height,\n      scroll_region_left = 1,\n      scroll_region_right = screen.width,\n      scroll_region_top_offset = 0,\n     ", "CodeBleu_score": 48.036817374632705}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t  self.state.on_render = on_render\n  if not self.state.attached then\n    self.state.attached = true\n    self.renderer:attach(self)\n  end\n  return self", "CodeBleu_score": 57.71767275571618}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t  if self:isValid() and callback then\n    local filename = self:getFilename()\n    if filename then\n      local watcher = Watcher:new(filename)\n      watcher:watch(function()\n        if self:isValid() then\n          callback()\n        end\n      end)\n      watcher:onError(function(err)\n        self:logError(err)\n      end)\n      self.watcher = watcher\n    end\n  end", "CodeBleu_score": 48.20958193146598}, {"code": "function Buffer:watch(callback)\n\t  if self.valid and callback then\n    callback()\n  else\n    local watcher = Watcher(self.filename, function(err, filename)\n      if err then\n        console.error('Error watching file: ' .. err)\n      else\n        callback()\n      end\n    end)\n\n    self.watcher = watcher\n    self.watcher:start()\n  end", "CodeBleu_score": 51.967618239517336}, {"code": "function Buffer:watch(callback)\n\t  if self:isValid() then\n    local filename = self:getFilename()\n    if filename then\n      local watcher = Watcher:new(filename)\n      watcher:on('change', function(filename)\n        if callback then\n          callback(filename)\n        end\n      end)\n      watcher:on('error', function(err)\n        console.error(err)\n      end)\n      watcher:start()\n      self.watcher = watcher\n    end\n  end", "CodeBleu_score": 44.9590070039531}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t  if self.hex then\n    return self.hex\n  end\n\n  local spec = self.spec\n  local attr = self.attr\n\n  local hex = self.hex\n  if not hex then\n    local fg = vim.api.nvim_get_hl_by_name(spec, true)\n    if fg then\n      hex = fg[attr]\n    end\n  end\n\n  if not hex then\n    hex = self:_to_hex()\n  end\n\n  self.hex = hex\n  return hex", "CodeBleu_score": 52.80874046134175}, {"code": "function Color:to_hex()\n\t  if self.hex then\n    return self.hex\n  end\n\n  local attr = self.attr\n  local spec = self.spec\n  local color = self.color\n  local hex = nil\n\n  if spec.attr == 'fg' then\n    hex = vim.api.nvim_get_hl_by_name(color, true)['foreground']\n  elseif spec.attr == 'bg' then\n    hex = vim.api.nvim_get_hl_by_name(color, true)['background']\n  end\n\n  if hex then\n    hex = string.format('#%06x', bit.tohex(hex))\n  else\n    hex = string.format('#%06x', bit.tohex(spec.color))\n  end\n\n  self.hex = hex\n  return hex", "CodeBleu_score": 55.68395770259781}, {"code": "function Color:to_hex()\n\t  if self.hex then\n    return self.hex\n  end\n\n  local attribute = self.attribute\n  local spec = self.spec\n\n  local highlight = vim.fn.synIDattr(vim.fn.hlID(spec), attribute)\n  if highlight then\n    self.hex = vim.fn.synIDattr(vim.fn.synIDtrans(highlight), 'fg#')\n  else\n    self.hex = vim.fn.synIDattr(vim.fn.synIDtrans(spec), 'fg#')\n  end\n\n  return self.hex", "CodeBleu_score": 58.69961615655341}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  local lines = vim.api.nvim_buf_get_lines(buffer, 0, -1, true)\n  local namespace = vim.api.nvim_create_namespace('')\n\n  for i, line in ipairs(lines) do\n    local start_pos, end_pos = string.find(line, pattern)\n\n    if start_pos ~= nil then\n      vim.api.nvim_buf_add_highlight(buffer, namespace, hl, i - 1, start_pos - 1, end_pos)\n    end\n  end\n\n  return namespace", "CodeBleu_score": 45.57335639266464}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  local lines = vim.api.nvim_buf_get_lines(buffer, 0, -1, false)\n  local ns = vim.api.nvim_create_namespace('')\n\n  for i = 1, #lines do\n    local line = lines[i]\n    local start_pos, end_pos = line:find(pattern)\n\n    if start_pos then\n      vim.api.nvim_buf_add_highlight(buffer, ns, hl, i - 1, start_pos - 1, end_pos)\n    end\n  end\n\n  return ns", "CodeBleu_score": 57.790084678530704}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  vim.api.nvim_buf_clear_namespace(buffer, self.id, 0, -1)\n  local lines = vim.api.nvim_buf_get_lines(buffer, 0, -1, false)\n  local ns_id = self.id\n  for i, line in ipairs(lines) do\n    local matches = vim.fn.matchlist(line, pattern)\n    if #matches > 0 then\n      local line_num = i - 1\n      for _, match in ipairs(matches) do\n        vim.api.nvim_buf_add_highlight(buffer, ns_id, hl, line_num, match[1], match[2])\n      end\n    end\n  end\n  return self", "CodeBleu_score": 44.463424207686316}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t  local id = self:generate_unique_id(row, col)\n  vim.api.nvim_buf_set_extmark(buffer, self.id, row, col, {\n    id = id,\n    virt_text = { {text, hl} },\n    virt_text_pos = pos,\n    priority = priority\n  })\n  return id", "CodeBleu_score": 62.25511534077284}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t  local id = self:generate_id(buffer, row, col)\n  vim.api.nvim_buf_set_extmark(buffer, self.ns_id, row, col, {\n    id = id,\n    virt_text = { { text, hl } },\n    virt_text_pos = pos,\n    priority = priority\n  })\n  return id", "CodeBleu_score": 67.9040983342106}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t  local id = self:generate_id(row, col)\n  local extmark_opts = {\n    virt_text = { { text, hl } },\n    virt_text_pos = pos,\n    hl_mode = 'combine',\n    priority = priority\n  }\n  vim.api.nvim_buf_set_extmark(buffer, self.namespace, row, col, extmark_opts)\n  return id", "CodeBleu_score": 65.44072915864253}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t  local line = \"\"\n  for i = 1, #output do\n    local c = output:sub(i, i)\n    if c == \"", "CodeBleu_score": 19.900763616123303}, {"code": "function Spawn:parse_result(output, callback)\n\t  local line = ''\n  local function append_line(char)\n    line = line .. char\n  end\n  local function flush_line()\n    if line ~= '' then\n      callback(line)\n      line = ''\n    end\n  end\n  for i = 1, #output do\n    local char = output:sub(i, i)\n    if char == '", "CodeBleu_score": 45.53251211071475}, {"code": "function Spawn:parse_result(output, callback)\n\t  local line = ''\n  local char = ''\n  for i = 1, #output do\n    char = output:sub(i, i)\n    if char == '", "CodeBleu_score": 22.89350259159621}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t  local watcher = self.watchers[path]\n  if not watcher then\n    watcher = self.loop:new_fs_event()\n    watcher:start(path, {\n      recursive = true,\n      callback = handler\n    })\n    self.watchers[path] = watcher\n  end\n  return watcher", "CodeBleu_score": 46.336699812780815}, {"code": "function Watcher:watch_file(path, handler)\n\t  local watcher = self.watchers[path]\n  if watcher then\n    return watcher\n  end\n\n  watcher = vim.loop.new_fs_event()\n  watcher:start(path, {}, vim.schedule_wrap(handler))\n  self.watchers[path] = watcher\n  return watcher", "CodeBleu_score": 49.77906855922238}, {"code": "function Watcher:watch_file(path, handler)\n\t  local watcher = self.watchers[path]\n  if watcher then\n    return watcher\n  end\n  watcher = vim.loop.new_fs_event()\n  watcher:start(path, {}, vim.schedule_wrap(handler))\n  self.watchers[path] = watcher\n  return watcher", "CodeBleu_score": 49.77906855922238}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t  local lines = self:get_buffer_lines()\n  local hunks = self.git_object:get_hunks(lines)\n  if not hunks then\n    return nil, 'Failed to get hunks for buffer.'\n  end\n\n  local signs = {}\n  for _, hunk in ipairs(hunks) do\n    for _, line in ipairs(hunk.lines) do\n      table.insert(signs, {\n        id = self:get_sign_id(line),\n        lnum = line.number,\n        name = line.type,\n        priority = line.type == 'context' and 0 or 1,\n      })\n    end\n  end\n  self:set_signs(signs)\n\n  return hunks", "CodeBleu_score": 36.466862657969436}, {"code": "function GitBuffer:live_hunks()\n\t  local git_object = self:git_object()\n  local hunks, err = git_object:hunks()\n  if err then\n    return err\n  end\n  self.hunks = hunks\n  local signs = {}\n  for _, hunk in pairs(hunks) do\n    local hunk_signs = {}\n    for _, line in pairs(hunk.lines) do\n      local sign = self:line_sign(line)\n      if sign then\n        table.insert(hunk_signs, sign)\n      end\n    end\n    signs[#signs + 1] = hunk_signs\n  end\n  self:set_signs(signs)\n  return hunks", "CodeBleu_score": 37.7130137465466}, {"code": "function GitBuffer:live_hunks()\n\t  local lines = self.buffer:get_lines()\n  local hunks = self.git_object:hunks(lines)\n  if not hunks then\n    return false, self.git_object.error\n  end\n  local sign_map = {\n    [self.settings.signs.hunk_head] = {\n      hunk_head = 1\n    },\n    [self.settings.signs.addition] = {\n      addition = 1\n    },\n    [self.settings.signs.deletion] = {\n      deletion = 1\n    },\n    [self.settings.signs.change] = {\n      change = 1\n    }\n  }\n  local sign_group = self.settings.signs.group\n  local sign_priority = self.settings.signs.priority\n  for _, hunk in ipairs(hunks) do\n    local sign_id = self.buffer:set_sign(\n      sign_group,\n      hunk.start_line,\n      sign_map[self.settings.signs.hunk_head],\n      sign_priority\n    )\n    hunk.sign_id = sign_id\n    for i = hunk.start_line + 1, hunk.end_line do\n      local line_type = hunk.lines[i - hunk.start_line]\n      local sign_id = self.buffer:set_sign(\n        sign_group,\n        i,\n        sign_map[self.settings.signs[line_type]],\n        sign_priority\n      )\n      hunk.lines[i - hunk.start_line].sign_id = sign_id\n    end\n  end\n  self.buffer:update_signs()\n  return hunks", "CodeBleu_score": 43.30927257996312}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t  local hunk = patch.hunk\n  local file_name = patch.file_name\n  local file_path = self.path .. '/' .. file_name\n  local temp_file_path = self.path .. '/' .. file_name .. '.vgit'\n  local patch_content = hunk.content\n  local patch_index = patch.index\n  local git = Git:new()\n\n  -- Write the patch content to the temporary file\n  local file = io.open(temp_file_path, 'w')\n  file:write(patch_content)\n  file:close()\n\n  -- Stage the hunk using the temporary file\n  local result = git:add_patch_from_file(temp_file_path, patch_index, file_path)\n\n  -- Remove the temporary file\n  os.remove(temp_file_path)\n\n  return result", "CodeBleu_score": 43.075308976488714}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t  local hunk = patch:get_hunk()\n  local file = patch:get_file()\n  local patch_content = patch:get_content()\n  local temp_file_path = os.tmpname()\n  local git_command = self:get_git_command()\n  local git_command_arguments = {\n    'apply',\n    '--cached',\n    '--unidiff-zero',\n    '--whitespace=nowarn',\n    '--',\n    temp_file_path\n  }\n  local git_command_output = ''\n  local git_command_error = ''\n  local git_command_exit_code = 0\n  local git_command_result = nil\n  local file_content = nil\n  local file_content_error = nil\n  local file_content_exit_code = 0\n  local file_content_result = nil\n  local file_content_lines = nil\n  local file_content_lines_count = 0\n  local file_content_lines_count_before_hunk = 0\n  local file_content_lines_count_after_hunk = 0\n  local file_content_lines_before_hunk = nil\n  local file_content_lines_after_hunk = nil\n  local file_content_lines_after_hunk_count = 0\n  local file_content_lines_after_hunk_count_after_hunk = 0\n  local file_content_lines_after_hunk_count_before_hunk = 0\n  local file_content_lines_after_hunk_count_after_hunk_with_hunk = 0\n  local file_content_lines_after_hunk_count_before_hunk_with_hunk = 0\n  local file_content_lines_after_hunk_count_before_hunk_with_hunk_and_after_hunk = 0\n  local file_content_lines_after_hunk_count_before_hunk_with_hunk_and_after_hunk_and_after_hunk = 0\n  local file_content_lines_after_hunk_count_before_h", "CodeBleu_score": 22.954783944231757}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t  local hunk = patch.hunk\n  local file_path = self.file_path\n  local file_name = self.file_name\n  local temp_file_path = vim.fn.tempname()\n  local hunk_content = hunk.content\n  local hunk_start_line_number = hunk.start_line_number\n  local hunk_end_line_number = hunk.end_line_number\n  local hunk_start_line_number_plus_one = hunk_start_line_number + 1\n  local hunk_end_line_number_plus_one = hunk_end_line_number + 1\n  local hunk_start_line_number_minus_one = hunk_start_line_number - 1\n  local hunk_end_line_number_minus_one = hunk_end_line_number - 1\n  local hunk_range = string.format('%d,%d', hunk_start_line_number_minus_one, hunk_end_line_number_plus_one)\n  local hunk_range_plus_one = string.format('%d,%d', hunk_start_line_number_plus_one, hunk_end_line_number_plus_one)\n  local hunk_range_minus_one = string.format('%d,%d', hunk_start_line_number_minus_one, hunk_end_line_number_minus_one)\n  local hunk_range_plus_two = string.format('%d,%d', hunk_start_line_number_plus_one, hunk_end_line_number_plus_two)\n  local hunk_range_minus_two = string.format('%d,%d', hunk_start_line_number_minus_two, hunk_end_line_number_minus_two)\n  local hunk_range_plus_three = string.format('%d,%d', hunk_start_line_number_plus_one, hunk_end_line_number_plus_three)\n  local hunk_range_minus_three = string.format('%d,%d', hunk_", "CodeBleu_score": 32.5429806473476}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    OAuthRequest request = new OAuthRequest(Verb.POST, service.getAccessTokenEndpoint());\n    service.signRequest(requestToken, request);\n    request.addBodyParameter(OAuthConstants.CLIENT_ID, service.getApiKey());\n    request.addBodyParameter(OAuthConstants.CLIENT_SECRET, service.getApiSecret());\n    request.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n    request.addBodyParameter(OAuthConstants.REDIRECT_URI, service.getCallback());\n    request.addBodyParameter(OAuthConstants.GRANT_TYPE, OAuthConstants.AUTHORIZATION_CODE);\n    Response response = request.send();\n    return service.getApi().getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 54.56931153021187}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    OAuthRequest request = new OAuthRequest(Verb.POST, getAccessTokenEndpoint());\n    request.addBodyParameter(OAuthConstants.CLIENT_ID, getApiKey());\n    request.addBodyParameter(OAuthConstants.CLIENT_SECRET, getApiSecret());\n    request.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n    request.addBodyParameter(OAuthConstants.REDIRECT_URI, getCallback());\n    request.addBodyParameter(OAuthConstants.GRANT_TYPE, \"authorization_code\");\n    request.addHeader(OAuthConstants.CONTENT_TYPE, OAuthConstants.FORM_ENCODED_CONTENT_TYPE);\n    Response response = request.send();\n    return getApi().getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 51.79397419418665}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    OAuthRequest request = new OAuthRequest(Verb.POST, this.api.getAccessTokenEndpoint());\n    request.addBodyParameter(OAuthConstants.CLIENT_ID, this.apiKey);\n    request.addBodyParameter(OAuthConstants.CLIENT_SECRET, this.apiSecret);\n    request.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n    request.addBodyParameter(OAuthConstants.REDIRECT_URI, this.callback);\n    request.addBodyParameter(OAuthConstants.GRANT_TYPE, \"authorization_code\");\n    request.addHeader(OAuthConstants.HEADER, this.getAuthorizationHeader(requestToken));\n    Response response = request.send();\n    return this.api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 56.9812244617655}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    if (context == null) {\n        throw new IllegalArgumentException(\"The context cannot be null.\");\n    }\n    if (host == null) {\n        throw new IllegalArgumentException(\"The host cannot be null.\");\n    }\n    CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n    context.setCredentialsProvider(credentialsProvider);\n    context.setAuthCache(authCache);\n    context.setTargetHost(host);\n    log.log(Level.INFO, \"Added {0} to the auth cache.\", host);\n}", "CodeBleu_score": 69.85755816392572}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    // Get the credentials from the credentials store\n    StandardUsernameCredentials credentials = getCredentials(host);\n\n    if (credentials == null) {\n        LOGGER.log(Level.WARNING, \"No credentials found for host: \" + host.toURI());\n        return;\n    }\n\n    // Create a credentials provider\n    CredentialsProvider credsProvider = new BasicCredentialsProvider();\n\n    // Create a Basic authentication scheme\n    AuthScope scope = new AuthScope(host.getHostName(), host.getPort());\n\n    // Add the credentials to the provider\n    credsProvider.setCredentials(scope, new UsernamePasswordCredentials(credentials.getUsername(), credentials.getPassword().getPlainText()));\n\n    // Create an authentication cache\n    AuthCache authCache = new BasicAuthCache();\n\n    // Add the host to the authentication cache\n    authCache.put(host, new BasicScheme());\n\n    // Assign the authentication cache to the context\n    context.setCredentialsProvider(credsProvider);\n    context.setAuthCache(authCache);\n\n    LOGGER.log(Level.INFO, \"Added host: \" + host.toURI() + \" to the authentication cache\");\n}", "CodeBleu_score": 52.06912715656924}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t  StandardUsernamePasswordCredentials cred = getCredentials();\n  if (cred == null) {\n    return;\n  }\n\n  // Create credentials provider with specified credentials\n  CredentialsProvider credsProvider = new BasicCredentialsProvider();\n  credsProvider.setCredentials(\n    new AuthScope(host.getHostName(), host.getPort()),\n    new UsernamePasswordCredentials(cred.getUsername(), cred.getPassword().getPlainText())\n  );\n\n  // Create auth cache with Basic authentication scheme\n  AuthCache authCache = new BasicAuthCache();\n  BasicScheme basicAuth = new BasicScheme();\n  authCache.put(host, basicAuth);\n\n  // Assign credentials provider and auth cache to context\n  context.setCredentialsProvider(credsProvider);\n  context.setAuthCache(authCache);\n\n  // Log action\n  LOGGER.log(Level.INFO, \"Added host {0} to authentication cache\", host);\n}", "CodeBleu_score": 51.78032939581579}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins jenkins = Jenkins.get();\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache extension is null\");\n    }\n\n    String cacheKey = source.getCacheKey();\n    cache.seed(cacheKey, source);\n\n    String encodedKey;\n    try {\n        encodedKey = URLEncoder.encode(cacheKey, \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding is not supported\", e);\n    }\n\n    return jenkins.getRootUrl() + \"avatar/\" + encodedKey + \"/\" + size;\n}", "CodeBleu_score": 53.11655366515152}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins jenkins = Jenkins.get();\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"Unable to locate AvatarCache instance\");\n    }\n    String key = source.getCacheKey();\n    cache.seed(key, source);\n    String url = jenkins.getRootUrl() + \"avatar/\" + Util.rawEncode(key) + \"/\" + size;\n    try {\n        return URLEncoder.encode(url, StandardCharsets.UTF_8.name());\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding not supported\", e);\n    }\n}", "CodeBleu_score": 60.966521178150536}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins instance = Jenkins.get();\n    AvatarCache cache = instance.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"Could not find an instance of AvatarCache\");\n    }\n    String key = source.getKey();\n    cache.seed(key, source.getImage());\n    String rootUrl = instance.getRootUrl();\n    if (rootUrl == null) {\n        throw new IllegalStateException(\"Could not find the root URL for the Jenkins instance\");\n    }\n    try {\n        return rootUrl + \"avatar/\" + URLEncoder.encode(key, \"UTF-8\") + \"/\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding is not supported\", e);\n    }\n}", "CodeBleu_score": 51.983073153364}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.image = image;\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 41.02284056748207}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.image = image;\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 41.02284056748207}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.image = image;\n    this.lastModified = lastModified;\n}", "CodeBleu_score": 18.560894066711203}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    try {\n        if (future.isDone()) {\n            image = future.get();\n            future = null;\n            return false;\n        }\n    } catch (InterruptedException | ExecutionException e) {\n        // ignore\n    }\n    return true;\n}", "CodeBleu_score": 42.42931061387523}, {"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            image = future.get();\n            lastModified = System.currentTimeMillis();\n            future = null;\n        } catch (InterruptedException | ExecutionException e) {\n            // Ignore\n        }\n    }\n    return true;\n}", "CodeBleu_score": 47.02035430727718}, {"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            image = future.get();\n        } catch (InterruptedException | ExecutionException e) {\n            // ignore\n        }\n        future = null;\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 43.588045481002716}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t    if (node == null) {\n        return;\n    }\n\n    String size = req.getParameter(\"size\");\n    if (size == null) {\n        size = \"24\";\n    }\n\n    String color = req.getParameter(\"color\");\n    if (color == null) {\n        color = \"blue\";\n    }\n\n    String avatar = req.getParameter(\"avatar\");\n    if (avatar == null) {\n        avatar = \"48x48\";\n    }\n\n    String background = req.getParameter(\"background\");\n    if (background == null) {\n        background = \"white\";\n    }\n\n    String text = req.getParameter(\"text\");\n    if (text == null) {\n        text = node.toString();\n    }\n\n    String hash = getHash(node.toString(), size, color, avatar, background, text);\n\n    AvatarImage image = getImage(hash, node, size, color, avatar, background, text);\n\n    if (image == null) {\n        return;\n    }\n\n    rsp.setContentType(\"image/png\");\n    rsp.setHeader(\"Cache-Control\", \"max-age=31536000\");\n    rsp.setHeader(\"Expires\", \"Thu, 01 Jan 2038 00:00:00 GMT\");\n    rsp.setHeader(\"Last-Modified\", image.getLastModified());\n    rsp.setHeader(\"ETag\", image.getETag());\n\n    image.write(rsp.getOutputStream());\n}", "CodeBleu_score": 32.81333678336036}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t    // Get the image size from the request\n    int size = getSize(req);\n\n    // Get the image from the cache\n    AvatarImage image = getImage(node, size);\n\n    // Write the image to the response\n    writeImage(image, rsp);\n}", "CodeBleu_score": 20.538656926100774}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t    String key = getKey(node);\n    if (key == null) {\n        rsp.sendError(HttpServletResponse.SC_NOT_FOUND);\n        return;\n    }\n\n    AvatarImage avatar = getAvatar(key);\n    if (avatar == null) {\n        rsp.sendError(HttpServletResponse.SC_NOT_FOUND);\n        return;\n    }\n\n    if (avatar.getImage() == null) {\n        rsp.sendError(HttpServletResponse.SC_NOT_FOUND);\n        return;\n    }\n\n    rsp.setContentType(\"image/png\");\n    rsp.setHeader(\"Cache-Control\", \"max-age=3600\");\n    rsp.setHeader(\"Expires\", Util.toRFC822Date(System.currentTimeMillis() + 3600000L));\n    rsp.getOutputStream().write(avatar.getImage());\n}", "CodeBleu_score": 40.78665979165883}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        this.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n        this.httpClient = buildHttpClient();\n        this.httpClientContext = buildHttpClientContext();\n    }", "CodeBleu_score": 26.681131934846093}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        this.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n\n        // Set up the HTTP client\n        RequestConfig requestConfig = RequestConfig.custom()\n                .setConnectTimeout(60000)\n                .setSocketTimeout(60000)\n                .setConnectionRequestTimeout(60000)\n                .build();\n\n        SocketConfig socketConfig = SocketConfig.custom()\n                .setSoKeepAlive(true)\n                .setSoTimeout(60000)\n                .build();\n\n        PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();\n        connectionManager.setDefaultMaxPerRoute(20);\n        connectionManager.setMaxTotal(20);\n\n        // Set up the HTTP client\n        HttpClientBuilder clientBuilder = HttpClientBuilder.create()\n                .setConnectionManager(connectionManager)\n                .setDefaultRequestConfig(requestConfig)\n                .setDefaultSocketConfig(socketConfig)\n                .setRetryHandler(new StandardHttpRequestRetryHandler(3, false));\n\n        // If an authenticator is provided, configure the HTTP client and context for authentication\n        if (authenticator != null) {\n            HttpHost proxy = authenticator.getProxy();\n            if (proxy != null) {\n                clientBuilder.setProxy(proxy);\n            }\n\n            CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n            AuthCache authCache = new BasicAuthCache();\n            HttpClientContext context = HttpClientContext.create();\n\n            if (authenticator instanceof BitbucketUsernamePasswordAuthenticator) {\n                StandardUsernamePasswordCredentials credentials = ((BitbucketUsernamePasswordAuthenticator) authenticator).getCredentials();\n                if (credentials != null) {\n                    credentialsProvider.setCredentials(AuthScope.ANY,\n                            new UsernamePasswordCredentials(credentials.getUsername(), credentials.getPassword().getPlainText()));\n                    authCache.put(proxy, new BasicScheme());\n                   ", "CodeBleu_score": 48.35831730507933}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        this.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n        this.httpClient = createHttpClient();\n        this.httpClientContext = createHttpClientContext();\n    }", "CodeBleu_score": 26.40778805439707}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    // get the source branch\n    BitbucketRepository sourceRepo = getRepository(pullRequest.getSource().getRepository().getFullName());\n    if (sourceRepo != null) {\n        BitbucketCommit sourceCommit = sourceRepo.getCommit(pullRequest.getSource().getCommit().getHash(), null);\n        if (sourceCommit != null) {\n            sourceCommit.setClosure(new CommitClosure(sourceCommit));\n        }\n    }\n    // get the destination branch\n    BitbucketRepository destRepo = getRepository(pullRequest.getDestination().getRepository().getFullName());\n    if (destRepo != null) {\n        BitbucketCommit destCommit = destRepo.getCommit(pullRequest.getDestination().getCommit().getHash(), null);\n        if (destCommit != null) {\n            destCommit.setClosure(new CommitClosure(destCommit));\n        }\n    }\n}", "CodeBleu_score": 38.913811973307425}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    final String sourceBranchName = pullRequest.getSource().getBranch().getName();\n    final String destinationBranchName = pullRequest.getDestination().getBranch().getName();\n\n    final BitbucketSCMFile sourceBranch = getBranch(sourceBranchName);\n    if (sourceBranch != null) {\n        final BitbucketSCMFile sourceBranchNode = sourceBranch.getNode();\n        if (sourceBranchNode != null) {\n            final CommitClosure sourceBranchClosure = new CommitClosure(sourceBranchNode.getRawNode());\n            sourceBranchClosure.setBranchName(sourceBranchName);\n            sourceBranchClosure.setRepository(sourceBranch.getRepository());\n            sourceBranchClosure.setCommitMessage(sourceBranchNode.getCommitMessage());\n            sourceBranchClosure.setCommitterName(sourceBranchNode.getCommitterName());\n            sourceBranchClosure.setCommitterEmail(sourceBranchNode.getCommitterEmail());\n            sourceBranchClosure.setCommitTime(sourceBranchNode.getCommitTime());\n            sourceBranchClosure.setCommitterAvatar(sourceBranchNode.getCommitterAvatar());\n            sourceBranchClosure.setAuthorName(sourceBranchNode.getAuthorName());\n            sourceBranchClosure.setAuthorEmail(sourceBranchNode.getAuthorEmail());\n            sourceBranchClosure.setAuthorAvatar(sourceBranchNode.getAuthorAvatar());\n            sourceBranchClosure.setCommitterAvatar(sourceBranchNode.getCommitterAvatar());\n            sourceBranchClosure.setCommitterAvatar(sourceBranchNode.getCommitterAvatar());\n            sourceBranchClosure.setAuthorAvatar(sourceBranchNode.getAuthorAvatar());\n            sourceBranchClosure.setAuthorAvatar(sourceBranchNode.getAuthorAvatar());\n            sourceBranchClosure.setAuthorAvatar(sourceBranchNode.getAuthorAvat", "CodeBleu_score": 34.784516715703326}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    String sourceBranch = pullRequest.getSource().getBranch().getName();\n    String destinationBranch = pullRequest.getDestination().getBranch().getName();\n    BitbucketSCMFile sourceBranchFile = getSCMFile(sourceBranch);\n    if (sourceBranchFile != null) {\n        BitbucketCommit sourceCommit = getCommit(sourceBranchFile.getCommitId());\n        if (sourceCommit != null) {\n            sourceBranchFile.setCommit(sourceCommit);\n        }\n    }\n    BitbucketSCMFile destinationBranchFile = getSCMFile(destinationBranch);\n    if (destinationBranchFile != null) {\n        BitbucketCommit destinationCommit = getCommit(destinationBranchFile.getCommitId());\n        if (destinationCommit != null) {\n            destinationBranchFile.setCommit(destinationCommit);\n        }\n    }\n}", "CodeBleu_score": 37.856128385381474}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration jenkinsLocationConfiguration = JenkinsLocationConfiguration.get();\n    if (jenkinsLocationConfiguration == null) {\n        throw new IllegalStateException(\"Jenkins location configuration is null\");\n    }\n    String rootURL = jenkinsLocationConfiguration.getUrl();\n    if (rootURL == null) {\n        throw new IllegalStateException(\"Jenkins location configuration URL is null\");\n    }\n    return DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 56.49404121187781}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration jenkinsLocationConfiguration = JenkinsLocationConfiguration.get();\n    if (jenkinsLocationConfiguration == null) {\n        throw new IllegalStateException(\"Jenkins location configuration is null\");\n    }\n    String jenkinsRootURL = jenkinsLocationConfiguration.getUrl();\n    if (StringUtils.isBlank(jenkinsRootURL)) {\n        throw new IllegalStateException(\"Jenkins root URL is null or empty\");\n    }\n    DisplayURLProvider displayURLProvider = DisplayURLProvider.get();\n    if (displayURLProvider == null) {\n        throw new IllegalStateException(\"Display URL provider is null\");\n    }\n    return displayURLProvider.getRunURL(build);\n}", "CodeBleu_score": 49.58463839816801}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration jenkinsLocationConfiguration = JenkinsLocationConfiguration.get();\n    if (jenkinsLocationConfiguration == null) {\n        throw new IllegalStateException(\"Jenkins Location Configuration is null\");\n    }\n\n    String rootURL = jenkinsLocationConfiguration.getUrl();\n    if (rootURL == null) {\n        throw new IllegalStateException(\"Jenkins Location Configuration URL is null\");\n    }\n\n    return DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 56.43980501295742}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    try {\n        URL jenkinsURL = new URL(url);\n        if (jenkinsURL.getHost().equals(\"localhost\") || jenkinsURL.getHost().equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"Jenkins URL must be fully qualified and not use \\\"localhost\\\" or \\\"unconfigured-jenkins-location\\\" as the host.\");\n        }\n        if (bitbucket instanceof BitbucketCloudApiClient) {\n            if (jenkinsURL.getHost().contains(\".\")) {\n                throw new IllegalStateException(\"Jenkins URL must be fully qualified and not use \\\"localhost\\\" or \\\"unconfigured-jenkins-location\\\" as the host.\");\n            }\n        }\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"Jenkins URL is malformed.\");\n    }\n    return url;\n}", "CodeBleu_score": 68.34475649248944}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t  try {\n    URL jenkinsUrl = new URL(url);\n    String host = jenkinsUrl.getHost();\n    if (StringUtils.isBlank(host)) {\n      throw new IllegalStateException(\"Jenkins URL does not contain a host: \" + url);\n    }\n    if (host.equals(\"localhost\") || host.equals(\"unconfigured-jenkins-location\")) {\n      throw new IllegalStateException(\"Jenkins URL cannot be 'localhost' or 'unconfigured-jenkins-location': \" + url);\n    }\n    if (bitbucket instanceof BitbucketCloudApiClient) {\n      if (!host.contains(\".\")) {\n        throw new IllegalStateException(\"Jenkins URL must be fully qualified for Bitbucket Cloud API clients: \" + url);\n      }\n    }\n    return url;\n  } catch (MalformedURLException e) {\n    throw new IllegalStateException(\"Jenkins URL is malformed: \" + url);\n  }\n}", "CodeBleu_score": 56.845076727262544}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    try {\n        URL jenkinsURL = new URL(url);\n        if (jenkinsURL.getHost().equals(\"localhost\") || jenkinsURL.getHost().equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"The Jenkins URL must be fully qualified and not use 'localhost' or 'unconfigured-jenkins-location' as the host.\");\n        }\n        if (bitbucket instanceof BitbucketCloudApiClient) {\n            if (jenkinsURL.getHost().endsWith(\".bitbucket.io\")) {\n                throw new IllegalStateException(\"The Jenkins URL must be fully qualified and not use 'bitbucket.io' as the host.\");\n            }\n        }\n        return jenkinsURL.toExternalForm();\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"The Jenkins URL must be fully qualified and not use 'localhost' or 'unconfigured-jenkins-location' as the host.\");\n    }\n}", "CodeBleu_score": 64.82483457818941}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t        BitbucketSCM scm = getScm(build);\n        if (scm == null) {\n            listener.getLogger().println(\"No Bitbucket SCM found, skipping build notifications.\");\n            return;\n        }\n\n        if (isNotificationsDisabled(source, build, listener)) {\n            listener.getLogger().println(\"Notifications are disabled, skipping build notifications.\");\n            return;\n        }\n\n        SCMRevision revision = getRevision(build);\n        if (revision == null) {\n            listener.getLogger().println(\"No SCM revision found, skipping build notifications.\");\n            return;\n        }\n\n        String revisionSha1 = revision.getHash();\n        if (revisionSha1 == null) {\n            listener.getLogger().println(\"No SCM revision SHA-1 found, skipping build notifications.\");\n            return;\n        }\n\n        BitbucketSCMSourceContext context = scm.getContext();\n        if (context == null) {\n            listener.getLogger().println(\"No Bitbucket SCM context found, skipping build notifications.\");\n            return;\n        }\n\n        boolean isPr = context.isPr();\n        boolean isBuildKeyShared = context.isBuildKeyShared();\n        boolean isBuildKeySharedForPr = context.isBuildKeySharedForPr();\n\n        BitbucketBuildStatus buildStatus = getBuildStatus(build);\n        if (buildStatus == null) {\n            listener.getLogger().println(\"No build status found, skipping build notifications.\");\n            return;\n        }\n\n        String buildKey = getBuildKey(build, isPr, isBuildKeyShared, isBuildKeySharedForPr);\n        if (buildKey == null) {\n            listener.getLogger().println(\"No build key found, skipping build notifications.\");\n            return;\n        }\n\n        BitbucketApi bitbucket = getBitbucket(source, build, listener);\n        if (bitbucket == null) {\n            listener.getLogger().println(\"No Bitbucket client found, skipping build notifications.\");\n            return;\n        }\n\n        URL buildUrl = getBuildUrl(build);\n        if (buildUrl == null) {\n            listener.getLogger().println(\"No", "CodeBleu_score": 32.959738020638085}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\n        if (source.getTraits().get(BitbucketBuildStatusNotifierTrait.class) == null) {\n            return;\n        }\n\n        BitbucketBuildStatusNotifierTrait trait = source.getTraits().get(BitbucketBuildStatusNotifierTrait.class);\n        if (!trait.isEnabled()) {\n            listener.getLogger().println(\"Bitbucket notifications are disabled\");\n            return;\n        }\n\n        BitbucketBuildStatusAction action = build.getAction(BitbucketBuildStatusAction.class);\n        if (action == null) {\n            listener.getLogger().println(\"Bitbucket build status action is null\");\n            return;\n        }\n\n        BitbucketBuildStatus status = action.getBuildStatus();\n        if (status == null) {\n            listener.getLogger().println(\"Bitbucket build status is null\");\n            return;\n        }\n\n        BitbucketSCMRevision revision = getSCMRevision(build);\n        if (revision == null) {\n            listener.getLogger().println(\"Bitbucket SCM revision is null\");\n            return;\n        }\n\n        String buildKey = revision.getHash();\n        if (trait.isShareBuildKey()) {\n            buildKey = revision.getBranch();\n        }\n\n        listener.getLogger().println(\"Bitbucket build key: \" + buildKey);\n\n        BitbucketApi bitbucket = new BitbucketApi(source.getServerName(), source.getCredentialsId(),\n                source.getOwner(), source.getRepository());\n\n        String buildUrl = getBuildUrl(build);\n        listener.getLogger().println(\"Bitbucket build URL: \" + buildUrl);\n\n        bitbucket.buildStatus(buildKey, status, buildUrl);\n    }", "CodeBleu_score": 41.089146463566486}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\n        // Initialize Bitbucket context\n        BitbucketSCM scm = getSCM(build);\n        if (scm == null) {\n            listener.getLogger().println(\"No Bitbucket SCM found for build \" + build.getFullDisplayName());\n            return;\n        }\n\n        // Check if notifications are disabled\n        if (scm.isDisableStatus()) {\n            listener.getLogger().println(\"Notifications are disabled for \" + build.getFullDisplayName());\n            return;\n        }\n\n        // Get the SCM revision\n        SCMRevision revision = getRevision(build);\n        if (revision == null) {\n            listener.getLogger().println(\"No SCM revision found for build \" + build.getFullDisplayName());\n            return;\n        }\n\n        // Get the hash\n        String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"No hash found for build \" + build.getFullDisplayName());\n            return;\n        }\n\n        // Determine if we should share the build key between branch and PR\n        boolean shareKey = scm.isShareBuildKey();\n\n        // Log notification type\n        String type = shareKey ? \"Pull Request\" : \"Branch\";\n        listener.getLogger().println(\"Sending \" + type + \" build status for \" + build.getFullDisplayName());\n\n        // Construct build key\n        String buildKey = shareKey ? source.getRepoOwner() + \"/\" + source.getRepository() : revision.getHead().getName();\n\n        // Initialize Bitbucket client\n        BitbucketApi bitbucketClient = getBitbucketClient(source, listener);\n        if (bitbucketClient == null) {\n            listener.getLogger().println(\"Failed to initialize Bitbucket client for build \" + build.getFullDisplayName());\n            return;\n        }\n\n        // Create and send build status\n        BitbucketBuildStatus buildStatus = createBuildStatus(build, listener, bitbucketClient, hash, buildKey, shareKey);\n        if (buildStatus == null) {\n            listener.getLogger().println(\"Failed to create Bitbucket build status for build \" + build.getFullDisplayName());\n", "CodeBleu_score": 38.5433629574303}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String buildKey = null;\n    if (shareBuildKeyBetweenBranchAndPR) {\n        buildKey = build.getParent().getFullName() + \":\" + branch;\n    } else {\n        buildKey = build.getFullDisplayName();\n    }\n    return buildKey;\n}", "CodeBleu_score": 41.800766071242805}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    if (shareBuildKeyBetweenBranchAndPR) {\n        return String.format(\"%s/%s\", build.getParent().getFullName(), branch);\n    } else {\n        return build.getFullDisplayName();\n    }\n}", "CodeBleu_score": 32.4057573401218}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String buildKey;\n    if (shareBuildKeyBetweenBranchAndPR) {\n        String folderName = build.getParent().getFullName();\n        buildKey = folderName + \"/\" + branch;\n    } else {\n        buildKey = build.getFullDisplayName();\n    }\n    return buildKey;\n}", "CodeBleu_score": 52.95418346887855}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = BitbucketServerEndpoint.SERVER_URL;\n        LOGGER.log(Level.WARNING, \"BitbucketSCMNavigator {0} has a null serverUrl. This should not be possible. Setting serverUrl to default value {1}\", new Object[] {name, serverUrl});\n    }\n    if (traits == null) {\n        traits = new ArrayList<>();\n        if (credentialsId != null) {\n            traits.add(new CredentialsSCMNavigatorTrait(credentialsId));\n        }\n        if (serverUrl != null) {\n            traits.add(new ServerUrlSCMNavigatorTrait(serverUrl));\n        }\n        if (repoOwner != null) {\n            traits.add(new RepoOwnerSCMNavigatorTrait(repoOwner));\n        }\n        if (repoFilter != null) {\n            traits.add(new RegexSCMSourceFilterTrait(repoFilter));\n        }\n        if (forkedRepoFilter != null) {\n            traits.add(new ForkedRepoFilterTrait(forkedRepoFilter));\n        }\n        if (forkedRepoOwner != null) {\n            traits.add(new ForkedRepoOwnerTrait(forkedRepoOwner));\n        }\n        if (excludeForks != null) {\n            traits.add(new ExcludeForksTrait(excludeForks));\n        }\n        if (excludeUsers != null) {\n            traits.add(new ExcludeUsersTrait(excludeUsers));\n        }\n        if (excludeBranches != null) {\n            traits.add(new ExcludeBranchesTrait(excludeBranches));\n        }\n        if (excludeBranchRegex != null) {\n            traits.add(new ExcludeBranchRegexTrait(excludeBranchRegex));\n        }\n        if (excludeTags != null) {\n            traits.add(new ExcludeTagsTrait(excludeTags));\n        }\n        if (excludeTagRegex != null) {\n            traits.add", "CodeBleu_score": 35.90848249948906}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = BitbucketServerEndpoint.SERVER_URL;\n        LOGGER.log(Level.WARNING, \"Bitbucket server URL is null for navigator {0}.\", getName());\n    }\n    if (traits == null) {\n        traits = new ArrayList<>();\n        if (credentialsId != null) {\n            traits.add(new CredentialsSCMNavigatorTrait(credentialsId));\n        }\n        if (repoOwner != null) {\n            traits.add(new OwnerSCMNavigatorTrait(repoOwner));\n        }\n        if (forkMode != null) {\n            traits.add(new ForkSCMNavigatorTrait(forkMode));\n        }\n        if (checkoutCredentialsId != null) {\n            traits.add(new CheckoutCredentialsSCMNavigatorTrait(checkoutCredentialsId));\n        }\n        if (excludes != null) {\n            traits.add(new RegexSCMNavigatorTrait(excludes));\n        }\n        if (includes != null) {\n            traits.add(new RegexSCMNavigatorTrait(includes));\n        }\n    }\n    return this;\n}", "CodeBleu_score": 29.807440077493897}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = BitbucketServerEndpoint.SERVER_URL;\n        LOGGER.log(Level.WARNING, \"BitbucketSCMNavigator.readResolve: serverUrl was null, setting to {0}\", serverUrl);\n    }\n    if (traits == null) {\n        traits = new ArrayList<>();\n        LOGGER.log(Level.WARNING, \"BitbucketSCMNavigator.readResolve: traits was null, setting to {0}\", traits);\n    }\n    return this;\n}", "CodeBleu_score": 16.462134052562867}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t    if (isMatch) {\n        count++;\n        listener.getLogger().println(\"Proposed repository \" + name);\n    } else {\n        listener.getLogger().println(\"Ignoring repository \" + name);\n    }\n}", "CodeBleu_score": 34.393026168959715}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t    if (isMatch) {\n        count++;\n    }\n    logger.log(Level.FINE, \"{0} {1}\", new Object[] {name, isMatch ? \"matched\" : \"ignored\"});\n}", "CodeBleu_score": 19.468852370339917}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t    if (isMatch) {\n        proposedCount++;\n    } else {\n        ignoredCount++;\n    }\n    LOGGER.log(Level.FINE, \"BitbucketSCMNavigator.record({0}, {1})\", new Object[]{name, isMatch});\n}", "CodeBleu_score": 23.44056318966743}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t\n    // Get the list of refspecs that will be used to fetch from the remote repository\n    List<RefSpec> refSpecs = getRefSpecs(scm, rev);\n\n    if (refSpecs.isEmpty()) {\n        return rev;\n    }\n\n    // Fetch the missing commits from the remote repository\n    try {\n        FetchCommand fetch = git.fetch_();\n        for (RefSpec refSpec : refSpecs) {\n            fetch.from(new URIish(scm.getRepositoryByName(rev.getRemoteName()).getURIs().get(0)), refSpec);\n        }\n        fetch.execute();\n    } catch (GitException e) {\n        listener.getLogger().println(\"Failed to fetch missing commits from remote repository: \" + e.getMessage());\n        return rev;\n    }\n\n    // Return the given revision\n    return rev;\n}", "CodeBleu_score": 32.85629713076415}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t        List<RefSpec> refSpecs = scm.getRefSpecs().stream()\n            .filter(refSpec -> refSpec.getSource().matches(\"^.*\\\\/.*@.*$\"))\n            .collect(Collectors.toList());\n\n        if (refSpecs.size() > 0) {\n            try {\n                listener.getLogger().println(\"Fetching missing commits from remote repository\");\n                FetchCommand fetch = git.fetch_().from(new URIish(scm.getUserRemoteConfigs().get(0).getUrl()), refSpecs.toArray(new RefSpec[0]));\n                for (GitSCMExtension ext : scm.getExtensions()) {\n                    ext.decorateFetchCommand(build, git, fetch);\n                }\n                fetch.execute();\n            } catch (GitException | URISyntaxException e) {\n                listener.getLogger().println(\"Failed to fetch missing commits from remote repository\");\n                listener.getLogger().println(e.getMessage());\n                e.printStackTrace(listener.getLogger());\n            }\n        }\n\n        return rev;\n    }", "CodeBleu_score": 43.41821473202746}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t\n    List<RefSpec> refSpecs = scm.getRefSpecs().stream()\n        .filter(rs -> rs.getSource() != null)\n        .filter(rs -> rs.getSource().startsWith(\"refs/heads/\"))\n        .filter(rs -> rs.getSource().endsWith(\"^{commit}\"))\n        .filter(rs -> {\n            try {\n                return !git.hasGitObject(rs.getSource().replace(\"^{commit}\", \"\"));\n            } catch (GitException | InterruptedException e) {\n                listener.getLogger().println(\"Failed to check if the commit exists locally: \" + e);\n                return false;\n            }\n        })\n        .map(rs -> new RefSpec(rs.getSource() + \":\" + rs.getDestination()))\n        .collect(Collectors.toList());\n\n    if (refSpecs.isEmpty()) {\n        return rev;\n    }\n\n    FetchCommand fetch = git.fetch_().from(scm.getUserRemoteConfigs().get(0).getUrl(), refSpecs.toArray(new RefSpec[0]));\n    for (GitSCMExtension ext : scm.getExtensions()) {\n        ext.decorateFetchCommand(build, git, fetch);\n    }\n    fetch.execute();\n\n    return rev;\n}", "CodeBleu_score": 41.69647103042629}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t  if (links == null) {\n    return null;\n  }\n  Map<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n  for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n    if (entry.getValue() != null && entry.getValue().size() > 0) {\n      result.put(entry.getKey(), entry.getValue().get(0));\n    }\n  }\n  return result;\n}", "CodeBleu_score": 73.86346764728225}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> newLinks = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        if (entry.getValue() != null && !entry.getValue().isEmpty()) {\n            newLinks.put(entry.getKey(), entry.getValue().get(0));\n        }\n    }\n    return newLinks;\n}", "CodeBleu_score": 75.67455951583125}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        if (entry.getValue() != null && !entry.getValue().isEmpty()) {\n            result.put(entry.getKey(), entry.getValue().get(0));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 82.43625750841957}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t  if (resourceStates.length === 0) {\n    return;\n  }\n\n  const uris = resourceStates.map(r => r.resourceUri);\n  const repos = this.getRepositoriesByURIs(uris);\n  for (const repo of repos) {\n    const paths = this.getPathsFromURIs(repo, uris);\n    try {\n      await repo.add(paths);\n    } catch (e) {\n      this.logger.error(e);\n      window.showErrorMessage(`Unable to add files to ${repo.rootUri}`);\n    }\n  }\n}", "CodeBleu_score": 53.29572577439736}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t    const resources = await this.getSelectedResourceStates(resourceStates);\n    if (!resources) {\n        return;\n    }\n    const repositoryMap = this.groupResourcesByRepository(resources);\n    for (const repository of repositoryMap.keys()) {\n        const files = this.convertResourcesToFilePaths(repositoryMap.get(repository));\n        await this.addFiles(repository, files);\n    }\n}", "CodeBleu_score": 42.07214437309783}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t  // If no resources are selected, do nothing.\n  if (resourceStates.length === 0) {\n    return;\n  }\n\n  // Get the repository associated with each resource.\n  const repositories = await this.getRepositories(resourceStates);\n\n  // If no repositories are selected, do nothing.\n  if (repositories.length === 0) {\n    return;\n  }\n\n  // Map the resource states to their URIs.\n  const uris = resourceStates.map((resourceState) => resourceState.resourceUri);\n\n  // Process each repository.\n  for (const repository of repositories) {\n    // Convert the URIs to file paths.\n    const filePaths = uris.map((uri) => uri.fsPath);\n\n    // Attempt to add the files to the repository.\n    try {\n      await repository.add(filePaths);\n    } catch (error) {\n      // Log the error.\n      console.error(error);\n\n      // Show an error message.\n      window.showErrorMessage(`Unable to add files to repository: ${error}`);\n    }\n  }\n}", "CodeBleu_score": 57.67891146911852}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t  const resourceStates = await this.getResourceStatesCore(\n    resourceStates,\n    token\n  );\n  return resourceStates.filter(\n    (resourceState: SourceControlResourceState) =>\n      resourceState instanceof Resource\n  ) as Resource[];\n}", "CodeBleu_score": 28.305502432990217}, {"code": "protected async getResourceStates{\n\t  const resourceStates = await this.getScmResourceStates();\n  if (resourceStates.length === 0 || !(resourceStates[0].resourceUri instanceof Uri)) {\n    const resource = await this.getSingleSourceControlResource();\n    if (resource) {\n      resourceStates.push(resource);\n    }\n  }\n  return resourceStates.filter((resourceState) => resourceState instanceof Resource);\n}", "CodeBleu_score": 52.34959254299595}, {"code": "protected async getResourceStates{\n\t  if (\n    !resourceStates ||\n    resourceStates.length === 0 ||\n    !(resourceStates[0].resourceUri instanceof Uri)\n  ) {\n    const resource = await this.getSingleResource();\n    if (resource) {\n      resourceStates = [\n        {\n          resourceUri: resource.uri,\n          command: {\n            command: \"svn.openResource\",\n            arguments: [resource],\n            title: \"Open\"\n          }\n        }\n      ];\n    }\n  }\n  return resourceStates.filter(\n    resourceState => resourceState.resourceUri instanceof Uri\n  ) as Resource[];\n}", "CodeBleu_score": 50.099919771182975}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (!uri) {\n      uri = window.activeTextEditor?.document.uri;\n    }\n\n    if (!uri) {\n      return undefined;\n    }\n\n    if (uri.scheme === \"svn\") {\n      uri = toSvnUri(uri);\n    }\n\n    if (uri.scheme !== \"file\") {\n      return undefined;\n    }\n\n    const scm = this.getSCM(uri);\n    if (!scm) {\n      return undefined;\n    }\n\n    const repository = scm.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n\n    return repository.getResource(uri);\n  }", "CodeBleu_score": 49.9639238493687}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    uri = uri || window.activeTextEditor?.document.uri;\n    if (uri) {\n      if (uri.scheme === \"svn\") {\n        uri = uri.with({ scheme: \"file\" });\n      }\n      if (uri.scheme === \"file\") {\n        const scmManager = await this.getSCMManager(uri);\n        if (scmManager) {\n          const repository = scmManager.getRepository(uri);\n          if (repository) {\n            return repository.getResource(uri);\n          }\n        }\n      }\n    }\n  }", "CodeBleu_score": 40.82381969404978}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    uri = uri || window.activeTextEditor?.document.uri;\n\n    if (!uri) {\n      return undefined;\n    }\n\n    if (uri.scheme === \"svn\") {\n      uri = uri.with({ scheme: \"file\" });\n    }\n\n    const scm = this.sourceControlManager.getSCM();\n\n    if (!scm) {\n      return undefined;\n    }\n\n    const repository = scm.getRepository(uri);\n\n    if (!repository) {\n      return undefined;\n    }\n\n    return repository.getResource(uri);\n  }", "CodeBleu_score": 47.808245589037256}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\t    const manager = this.manager;\n    const repo = await manager.getRepository(element.uri);\n    if (!repo) {\n      return;\n    }\n    if (element.status === Status.MODIFIED) {\n      await openDiff(element, repo);\n    } else if (element.status === Status.ADDED) {\n      await openFileRemote(element, repo);\n    }\n  }", "CodeBleu_score": 46.77318948617756}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t  if (!element) {\n    return;\n  }\n\n  const remoteUri = await this.sourceControlManager.getRemoteUri(\n    element.uri.fsPath\n  );\n  if (!remoteUri) {\n    return;\n  }\n\n  if (element.status === Status.Modified) {\n    await openDiff(\n      element.uri.fsPath,\n      remoteUri.fsPath,\n      element.oldRevision,\n      element.revision\n    );\n  } else if (element.status === Status.Added) {\n    await openFileRemote(remoteUri.fsPath, element.revision);\n  }\n}", "CodeBleu_score": 45.40193172123037}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t    const scm = SourceControlManager.getInstance();\n    const repo = await scm.getRepository(element.repoPath);\n    if (!repo) {\n      return;\n    }\n\n    if (element.status === Status.modified) {\n      openDiff(element, repo);\n    } else if (element.status === Status.added) {\n      openFileRemote(element, repo);\n    }\n  }", "CodeBleu_score": 44.21866174980876}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t  if (item.commit) {\n    if (await commands.executeCommand(\"clipboard.copy\", what)) {\n      window.showInformationMessage(`Copied ${what} to clipboard.`);\n    } else {\n      window.showErrorMessage(`Cannot copy ${what} to clipboard.`);\n    }\n  }\n}", "CodeBleu_score": 24.070681705361547}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t  if (!(await env.clipboard.writeText)) {\n    window.showErrorMessage(\n      \"The clipboard is not supported. Please install the 'clipboardy' package to use this command.\"\n    );\n    return;\n  }\n  if (item.type === \"commit\") {\n    if (what === \"message\") {\n      await env.clipboard.writeText(item.commitMessage);\n    } else {\n      await env.clipboard.writeText(item.revision);\n    }\n  }\n}", "CodeBleu_score": 33.78851291920989}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t  if (!navigator.clipboard) {\n    window.showErrorMessage(\n      \"Copying to the clipboard is not supported in this browser.\"\n    );\n    return;\n  }\n  if (what === \"commit\") {\n    await navigator.clipboard.writeText(item.commitMessage);\n  } else if (what === \"revision\") {\n    await navigator.clipboard.writeText(item.revision);\n  }\n}", "CodeBleu_score": 33.92762012281278}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    for (GiteaConnectionFactory factory : ServiceLoader.load(GiteaConnectionFactory.class)) {\n        if (factory.canOpen(this)) {\n            return factory.open(this);\n        }\n    }\n    throw new IOException(\"No suitable GiteaConnectionFactory found\");\n}", "CodeBleu_score": 20.26693522226452}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    for (GiteaConnectionFactory factory : ServiceLoader.load(GiteaConnectionFactory.class)) {\n        if (factory.canOpen(this)) {\n            return factory.open(this);\n        }\n    }\n    throw new IOException(\"No suitable GiteaConnectionFactory found.\");\n}", "CodeBleu_score": 20.304514585114976}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    final ServiceLoader<GiteaConnectionFactory> factories = ServiceLoader.load(GiteaConnectionFactory.class);\n    for (GiteaConnectionFactory factory : factories) {\n        if (factory.canOpen(this)) {\n            return factory.open(this);\n        }\n    }\n    throw new IOException(\"No GiteaConnectionFactory found to open a connection\");\n}", "CodeBleu_score": 26.951196634021656}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t    Jenkins jenkins = Jenkins.getInstance();\n    if (jenkins != null) {\n        ClassLoader classLoader = jenkins.getPluginManager().uberClassLoader;\n        return Gitea.setClassLoader(classLoader);\n    }\n    return Gitea.setClassLoader(Gitea.class.getClassLoader());\n}", "CodeBleu_score": 41.027605285088065}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t  Jenkins jenkins = Jenkins.getInstanceOrNull();\n  ClassLoader classLoader = jenkins != null ? jenkins.getPluginManager().uberClassLoader : Gitea.class.getClassLoader();\n  return new Gitea(classLoader);\n}", "CodeBleu_score": 52.730032143071114}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t    Jenkins jenkins = Jenkins.getInstance();\n    if (jenkins != null) {\n        GiteaConnectionFactory.setClassLoader(jenkins.getPluginManager().uberClassLoader);\n    } else {\n        GiteaConnectionFactory.setClassLoader(Gitea.class.getClassLoader());\n    }\n    return this;\n}", "CodeBleu_score": 36.368613212910766}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = Util.fixEmptyAndTrim(displayName);\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    this.credentialsId = manageHooks ? credentialsId : null;\n    this.aliasUrl = Util.fixEmptyAndTrim(aliasUrl);\n}", "CodeBleu_score": 44.80965703188799}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = StringUtils.trimToEmpty(displayName);\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    this.credentialsId = manageHooks ? StringUtils.trimToEmpty(credentialsId) : null;\n    this.aliasUrl = normalizeAliasUrl(aliasUrl);\n}", "CodeBleu_score": 42.35369316590321}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = StringUtils.isBlank(displayName) ? normalizeServerUrl(serverUrl) : displayName;\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    this.credentialsId = manageHooks ? credentialsId : null;\n    this.aliasUrl = StringUtils.isBlank(aliasUrl) ? null : normalizeAliasUrl(aliasUrl);\n}", "CodeBleu_score": 52.690147871757254}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    if (Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        try {\n            return new StandardListBoxModel()\n                    .withEmptySelection()\n                    .withMatching(\n                            CredentialsMatchers.anyOf(\n                                    CredentialsMatchers.instanceOf(StandardUsernamePasswordCredentials.class),\n                                    CredentialsMatchers.instanceOf(GiteaAuth.class)),\n                            CredentialsProvider.lookupCredentials(\n                                    StandardCredentials.class,\n                                    Jenkins.get(),\n                                    ACL.SYSTEM,\n                                    URIRequirementBuilder.fromUri(normalizeServerUrl(serverUrl)).build()\n                            )\n                    );\n        } catch (IOException e) {\n            return new StandardListBoxModel().withEmptySelection();\n        }\n    } else {\n        return new StandardListBoxModel().withEmptySelection();\n    }\n}", "CodeBleu_score": 34.12298955791493}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    if (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        return new StandardListBoxModel();\n    }\n    serverUrl = normalizeServerUrl(serverUrl);\n    return new StandardListBoxModel()\n            .includeEmptyValue()\n            .includeMatchingAs(\n                    ACL.SYSTEM,\n                    Jenkins.get(),\n                    StandardUsernamePasswordCredentials.class,\n                    URIRequirementBuilder.fromUri(serverUrl).build(),\n                    CredentialsMatchers.instanceOf(StandardUsernamePasswordCredentials.class)\n            )\n            .includeMatchingAs(\n                    ACL.SYSTEM,\n                    Jenkins.get(),\n                    StandardUsernamePasswordCredentials.class,\n                    AuthenticationTokens.matcher(GiteaAuth.class, serverUrl),\n                    CredentialsMatchers.instanceOf(StandardUsernamePasswordCredentials.class)\n            );\n}", "CodeBleu_score": 46.079468493561684}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    StandardListBoxModel result = new StandardListBoxModel();\n    if (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        return result;\n    }\n    try {\n        serverUrl = normalizeServerUrl(serverUrl);\n    } catch (URISyntaxException e) {\n        return result;\n    }\n    if (StringUtils.isBlank(serverUrl)) {\n        return result;\n    }\n    result.includeMatchingAs(ACL.SYSTEM, Jenkins.get(), StandardUsernamePasswordCredentials.class,\n        URIRequirementBuilder.fromUri(serverUrl).build(), CredentialsMatchers.always());\n    return result;\n}", "CodeBleu_score": 51.80452556949506}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        if (scheme == null) {\n            scheme = \"http\";\n        }\n        String host = uri.getHost();\n        if (host == null) {\n            host = uri.getSchemeSpecificPart();\n        }\n        int port = uri.getPort();\n        if (port == -1) {\n            if (scheme.equals(\"http\")) {\n                port = 80;\n            } else if (scheme.equals(\"https\")) {\n                port = 443;\n            }\n        }\n        String path = uri.getPath();\n        if (path == null) {\n            path = \"\";\n        }\n        if (path.endsWith(\"/\")) {\n            path = path.substring(0, path.length() - 1);\n        }\n        return scheme + \"://\" + host + \":\" + port + path;\n    } catch (URISyntaxException e) {\n        // ignore\n        return null;\n    }\n}", "CodeBleu_score": 44.888400134532866}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (StringUtils.isBlank(serverUrl)) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme().toLowerCase(Locale.ENGLISH);\n        String host = uri.getHost().toLowerCase(Locale.ENGLISH);\n        int port = uri.getPort();\n        if (port == -1) {\n            if (scheme.equals(\"http\")) {\n                port = 80;\n            } else if (scheme.equals(\"https\")) {\n                port = 443;\n            }\n        }\n        return new URI(scheme, null, host, port, uri.getPath(), uri.getQuery(), uri.getFragment()).toString();\n    } catch (URISyntaxException e) {\n        return null;\n    }\n}", "CodeBleu_score": 39.54861188648709}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        if (scheme == null) {\n            scheme = \"http\";\n        }\n        int port = uri.getPort();\n        if (port == -1) {\n            if (scheme.equals(\"http\")) {\n                port = 80;\n            } else if (scheme.equals(\"https\")) {\n                port = 443;\n            }\n        }\n        String host = uri.getHost();\n        if (host == null) {\n            host = \"\";\n        }\n        String path = uri.getPath();\n        if (path == null) {\n            path = \"\";\n        }\n        return scheme + \"://\" + host + (port != -1 && (port != 80 || scheme.equals(\"http\")) && port != 443 && scheme.equals(\"https\") ? \":\" + port : \"\") + path;\n    } catch (URISyntaxException e) {\n        return serverUrl;\n    }\n}", "CodeBleu_score": 43.198408689086385}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : GiteaServers.get().getServers()) {\n        String displayName = server.getDisplayName();\n        if (StringUtils.isBlank(displayName)) {\n            displayName = server.getServerUrl();\n        }\n        items.add(displayName, server.getServerUrl());\n    }\n    return items;\n}", "CodeBleu_score": 50.79546145386742}, {"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel m = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (StringUtils.isNotBlank(displayName)) {\n            m.add(displayName, server.getServerUrl());\n        } else {\n            m.add(server.getServerUrl());\n        }\n    }\n    return m;\n}", "CodeBleu_score": 55.13214639164596}, {"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel items = new ListBoxModel();\n    for (GiteaServersConfig config : GiteaServersConfig.all()) {\n        String displayName = config.getDisplayName();\n        if (StringUtils.isBlank(displayName)) {\n            displayName = config.getServerUrl();\n        }\n        items.add(displayName, config.getServerUrl());\n    }\n    return items;\n}", "CodeBleu_score": 48.35517553139693}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    if (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        throw new AccessDeniedException(\"Must have admin permissions\");\n    }\n    List<GiteaServer> newServers = new ArrayList<>();\n    Set<String> serverUrls = new HashSet<>();\n    for (GiteaServer server : servers) {\n        if (StringUtils.isBlank(server.getServerUrl())) {\n            continue;\n        }\n        if (serverUrls.contains(server.getServerUrl())) {\n            continue;\n        }\n        serverUrls.add(server.getServerUrl());\n        newServers.add(server);\n    }\n    this.servers = newServers;\n    save();\n}", "CodeBleu_score": 44.69151234640017}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    List<GiteaServer> newServers = new ArrayList<>(servers.size());\n    Set<String> serverUrls = new HashSet<>();\n    for (GiteaServer server : servers) {\n        String serverUrl = server.getServerUrl();\n        if (StringUtils.isNotBlank(serverUrl) && !serverUrls.contains(serverUrl)) {\n            newServers.add(server);\n            serverUrls.add(serverUrl);\n        }\n    }\n    Collections.sort(newServers);\n    this.servers = newServers;\n    save();\n}", "CodeBleu_score": 48.0487584911523}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    if (Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        List<GiteaServer> newServers = new ArrayList<>(servers);\n        for (Iterator<GiteaServer> it = newServers.iterator(); it.hasNext(); ) {\n            GiteaServer server = it.next();\n            if (StringUtils.isBlank(server.getServerUrl())) {\n                it.remove();\n            }\n        }\n        newServers.removeAll(this.servers);\n        this.servers.removeAll(newServers);\n        this.servers.addAll(newServers);\n        save();\n    }\n}", "CodeBleu_score": 42.47827785079081}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return false;\n    }\n\n    serverUrl = normalizeServerUrl(serverUrl);\n    if (serverUrl == null) {\n        return false;\n    }\n\n    Iterator<GiteaServer> it = getServers().iterator();\n    while (it.hasNext()) {\n        GiteaServer server = it.next();\n        if (server.getServerUrl().equals(serverUrl)) {\n            it.remove();\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 41.88228905020393}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return false;\n    }\n    serverUrl = normalizeServerUrl(serverUrl);\n    List<GiteaServer> servers = getServers();\n    ListIterator<GiteaServer> it = servers.listIterator();\n    while (it.hasNext()) {\n        if (it.next().getServerUrl().equals(serverUrl)) {\n            it.remove();\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 38.63384698419786}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (StringUtils.isBlank(serverUrl)) {\n        return false;\n    }\n\n    // normalize server URL\n    serverUrl = Util.fixEmptyAndTrim(serverUrl);\n    if (serverUrl == null) {\n        return false;\n    }\n\n    // remove matching server\n    boolean removed = false;\n    Iterator<GiteaServer> it = servers.iterator();\n    while (it.hasNext()) {\n        GiteaServer server = it.next();\n        if (server.getServerUrl().equals(serverUrl)) {\n            it.remove();\n            removed = true;\n        }\n    }\n\n    // update server list\n    save();\n\n    return removed;\n}", "CodeBleu_score": 43.16123640606816}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n        if (element.getKind() == ElementKind.CLASS) {\n            String type = ((TypeElement) element).getQualifiedName().toString();\n            for (AnnotationMirror annotationMirror : element.getAnnotationMirrors()) {\n                if (annotationMirror.getAnnotationType().toString().equals(annotation.toString())) {\n                    Map<String, Object> attributes = Maps.newHashMap();\n                    for (Map.Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : annotationMirror.getElementValues().entrySet()) {\n                        String key = entry.getKey().getSimpleName().toString();\n                        Object value = entry.getValue().getValue();\n                        attributes.put(key, value);\n                    }\n                    descriptorElements.add(new DescriptorElement(type, attributes));\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 40.70583286309643}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n        if (element.getKind() == ElementKind.CLASS) {\n            String className = ((TypeElement) element).getQualifiedName().toString();\n            if (isPluginAnnotation(element)) {\n                className = className.substring(0, className.lastIndexOf('.'));\n            }\n            for (ExecutableElement method : methodsIn(element.getEnclosedElements())) {\n                if (method.getKind() == ElementKind.METHOD) {\n                    AnnotationMirror annotationMirror = getAnnotationMirror(method, annotation);\n                    if (annotationMirror != null) {\n                        String name = getAnnotationValue(annotationMirror, \"name\");\n                        String description = getAnnotationValue(annotationMirror, \"description\");\n                        String type = getAnnotationValue(annotationMirror, \"type\");\n                        String defaultValue = getAnnotationValue(annotationMirror, \"defaultValue\");\n                        String label = getAnnotationValue(annotationMirror, \"label\");\n                        String category = getAnnotationValue(annotationMirror, \"category\");\n                        String group = getAnnotationValue(annotationMirror, \"group\");\n                        String advanced = getAnnotationValue(annotationMirror, \"advanced\");\n                        String displayOrder = getAnnotationValue(annotationMirror, \"displayOrder\");\n                        String options = getAnnotationValue(annotationMirror, \"options\");\n                        String secret = getAnnotationValue(annotationMirror, \"secret\");\n                        String validationExpression = getAnnotationValue(annotationMirror, \"validationExpression\");\n                        String validationMessage = getAnnotationValue(annotationMirror, \"validationMessage\");\n                        String visible = getAnnotationValue(annotationMirror, \"visible\");\n                        String customData = getAnnotationValue(annotationMirror, \"customData\");\n\n                        if (name == null || name.isEmpty()) {\n                            name = method.getSimpleName().toString();\n                        }\n                        if (type == null || type.isEmpty()) {\n                            type = \"string\";\n                        }\n                        if (description == null || description.isEmpty()) {", "CodeBleu_score": 32.831587586147506}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n        if (element.getKind() == ElementKind.CLASS) {\n            TypeElement classElement = (TypeElement) element;\n            Map<String, Object> attributes = Maps.newHashMap();\n            for (ExecutableElement method : methodsIn(classElement.getEnclosedElements())) {\n                AnnotationMirror annotationMirror = getAnnotationMirror(method, annotation);\n                if (annotationMirror != null) {\n                    for (Map.Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : annotationMirror.getElementValues().entrySet()) {\n                        String key = entry.getKey().getSimpleName().toString();\n                        Object value = entry.getValue().getValue();\n                        attributes.put(key, value);\n                    }\n                }\n            }\n            String type = classElement.getQualifiedName().toString();\n            descriptorElements.add(new DescriptorElement(type, attributes));\n        }\n    }\n}", "CodeBleu_score": 40.008575041370214}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t  for (TypeElement annotation : annotations) {\n    if (annotation.getQualifiedName().contentEquals(annotationClass.getName().replace('$', '.'))) {\n      return annotation;\n    }\n  }\n  return null;\n}", "CodeBleu_score": 44.995838395574836}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    String annotationClassName = annotationClass.getName().replace('$', '.');\n    for (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().contentEquals(annotationClassName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 40.113946970496094}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    for (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().toString().replace(\"$\", \".\").equals(annotationClass.getName())) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 51.65126547731247}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n    }\n\n    if for_approval:\n        filters[\"status\"] = \"Open\"\n\n        if approver_id:\n            filters[\"approver_id\"] = approver_id\n            filters[\"approver_name\"] = frappe.db.get_value(\n                \"Employee\", approver_id, \"user_id\"\n            )\n        else:\n            filters[\"approver_name\"] = frappe.db.get_value(\n                \"Employee\", employee, \"user_id\"\n            )\n\n        filters[\"or_filters\"] = {\n            \"status\": [\"in\", [\"Approved\", \"Rejected\"]],\n            \"approver_name\": frappe.db.get_value(\"Employee\", employee, \"user_id\"),\n        }\n\n    else:\n        filters[\"status\"] = \"Open\"\n        filters[\"name\"] = (\"!=\", employee)\n\n    return filters\n\n", "CodeBleu_score": 32.20223761708272}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n        \"status\": \"Open\",\n    }\n\n    if for_approval:\n        filters[\"status\"] = \"Open\"\n        filters[\"owner\"] = approver_id\n        filters[\"employee\"] = (\"!=\", employee)\n        filters[\"status\"] = (\"!=\", \"Cancelled\")\n    else:\n        filters[\"status\"] = (\"!=\", \"Cancelled\")\n\n    return filters\n\n", "CodeBleu_score": 26.96673367266084}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n\n    filters = {\n        \"status\": \"Open\",\n        \"docstatus\": 1,\n        \"employee\": employee,\n    }\n\n    if for_approval:\n        filters[\"status\"] = \"Open\"\n        filters[\"approval_status\"] = \"Pending Approval\"\n        filters[\"approver_id\"] = approver_id\n        filters[\"employee\"] = [\"!=\", employee]\n    else:\n        filters[\"status\"] = [\"!=\", \"Cancelled\"]\n\n    return filters\n\n", "CodeBleu_score": 26.538879509192515}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    from frappe.utils import getdate\n\n    leave_balance_map = {}\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n\n    for leave_type in leave_details:\n        leave_balance_map[leave_type.name] = {\n            \"allocated\": leave_type.leaves_allocated,\n            \"balance\": leave_type.leave_balance,\n        }\n\n    return leave_balance_map\n\n", "CodeBleu_score": 40.55962631201658}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    from frappe.utils import getdate\n    from frappe.query_builder import Order\n    from frappe.query_builder.functions import Coalesce\n\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n    leave_balance_map = {}\n    for leave_detail in leave_details:\n        leave_type = leave_detail.leave_type\n        leave_balance_map[leave_type] = {\n            \"leaves_allocated\": leave_detail.leaves_allocated,\n            \"leaves_taken\": leave_detail.leaves_taken,\n            \"leaves_balance\": leave_detail.leaves_balance,\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 38.59244001974617}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    from frappe.utils import getdate\n    from frappe.utils.data import add_to_date\n\n    current_date = getdate()\n    leave_balance_map = {}\n    leave_details = get_leave_details(employee, current_date)\n\n    for leave_detail in leave_details:\n        leave_type = leave_detail.leave_type\n        if leave_type not in leave_balance_map:\n            leave_balance_map[leave_type] = {}\n\n        leave_balance_map[leave_type][\"allocated\"] = leave_detail.leave_allocation\n        leave_balance_map[leave_type][\"balance\"] = leave_detail.total_leaves_allocated - leave_detail.total_leaves_consumed\n\n    return leave_balance_map\n\n", "CodeBleu_score": 40.437729056601405}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n\n    holiday_list = frappe.db.get_value(\"Employee\", employee, \"holiday_list\")\n\n    if not holiday_list:\n        return []\n\n    holidays = frappe.db.sql(\n        \"\"\"\n            SELECT\n                name,\n                description,\n                from_date,\n                to_date\n            FROM `tabHoliday`\n            WHERE\n                holiday_list = %(holiday_list)s\n                AND weekly_off = 0\n            ORDER BY\n                from_date\n        \"\"\",\n        values={\"holiday_list\": holiday_list},\n        as_dict=1,\n    )\n\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n\n    return holidays\n\n", "CodeBleu_score": 34.67579585991729}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n\n    holidays = frappe.get_all(\n        \"Holiday\",\n        fields=[\"name\", \"holiday_date\", \"description\"],\n        filters={\"parent\": holiday_list, \"repeat_this_holiday_every_year\": 0},\n        order_by=\"holiday_date\",\n    )\n\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n\n    return holidays\n\n", "CodeBleu_score": 35.07014314265413}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.db.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n\n    holidays = frappe.get_all(\n        \"Holiday\",\n        fields=[\"name\", \"holiday_date\", \"description\"],\n        filters={\"holiday_list\": holiday_list, \"repeat_this_holiday_every_year\": 0},\n        order_by=Order(\"holiday_date\"),\n    )\n\n    return [\n        {\n            \"name\": holiday.name,\n            \"holiday_date\": holiday.holiday_date,\n            \"description\": strip_html(holiday.description),\n        }\n        for holiday in holidays\n    ]\n\n", "CodeBleu_score": 35.14850796182781}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n\n    if not frappe.db.get_single_value(\"HR Settings\", \"send_holiday_reminders\"):\n        return\n    if frappe.db.get_single_value(\"HR Settings\", \"holiday_reminder_frequency\") != \"Weekly\":\n        return\n\n    # Get the holiday reminder settings\n    holiday_reminder_days = frappe.db.get_single_value(\"HR Settings\", \"holiday_reminder_days\")\n    holiday_reminder_days_in_advance = frappe.db.get_single_value(\"HR Settings\", \"holiday_reminder_days_in_advance\")\n    holiday_reminder_subject = frappe.db.get_single_value(\"HR Settings\", \"holiday_reminder_subject\")\n    holiday_reminder_message = frappe.db.get_single_value(\"HR Settings\", \"holiday_reminder_message\")\n\n    # Get all employees who have a holiday in the next week\n    holidays_in_advance = get_holidays_in_advance(holiday_reminder_days_in_advance)\n    if not holidays_in_advance:\n        return\n\n    # Get all employees who have a holiday in the next week\n    holidays_in_advance = get_holidays_in_advance(holiday_reminder_days_in_advance)\n    if not holidays_in_advance:\n        return\n\n    # Get all employees who have a holiday in the next week\n    holidays_in_advance = get_holidays_in_advance(holiday_reminder_days_in_advance)\n    if not holidays_in_advance:\n        return\n\n    # Get all employees who have a holiday in the next week\n    holidays_in_advance = get_holidays_in_advance(holiday_reminder_days_in_advance)\n    if not holidays_in_advance:\n        return\n\n    # Get all employees who have a holiday in the next week\n    holidays_in", "CodeBleu_score": 36.046725052230244}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    holiday_reminder_settings = frappe.get_doc(\"Holiday Reminder Settings\")\n    if (\n        holiday_reminder_settings.send_reminders\n        and holiday_reminder_settings.frequency == \"Weekly\"\n    ):\n        send_reminders_in_advance(\n            add_days(today(), holiday_reminder_settings.advance_days),\n            holiday_reminder_settings.advance_days,\n        )\n\n", "CodeBleu_score": 13.888111694637573}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    holiday_reminder_settings = frappe.get_single(\"Holiday Reminder Settings\")\n    if (\n        holiday_reminder_settings.send_reminders\n        and holiday_reminder_settings.frequency == \"Weekly\"\n    ):\n        send_weekly_holiday_reminders()\n\n", "CodeBleu_score": 13.159389586702511}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n\n    self.self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self.self_appraisal_score += (\n            self_rating.rating * self_rating.percentage_weightage\n        ) * 5\n    self.self_appraisal_score = round(self.self_appraisal_score, 2)\n\n", "CodeBleu_score": 21.883097883143733}, {"code": "def calculate_self_appraisal_score(self)\n\t\n\n    self.self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self.self_appraisal_score += self_rating.rating * 5 * self_rating.percentage_weightage\n    self.self_appraisal_score = round(self.self_appraisal_score, 2)\n\n", "CodeBleu_score": 23.497053900217214}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self.self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self.self_appraisal_score += flt(self_rating.rating) * flt(self_rating.percentage_weightage) * 5\n    self.self_appraisal_score = round(self.self_appraisal_score, 2)\n\n", "CodeBleu_score": 28.101149191144103}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.final_score_formula:\n        try:\n            # Get the total score, average feedback score, and self-appraisal score.\n            total_score = self.get_total_score()\n            average_feedback_score = self.get_average_feedback_score()\n            self_appraisal_score = self.get_self_appraisal_score()\n            # Sanitize the formula.\n            formula = sanitize_expression(appraisal_cycle.final_score_formula)\n            # Evaluate the formula.\n            final_score = eval(formula)\n        except Exception as e:\n            frappe.throw(\n                _(\"Error: {0}\").format(e), title=_(\"Error\"), exc=1\n            )\n    else:\n        # Calculate the final score as the average of the total score, average feedback score, and self-appraisal score.\n        final_score = (\n            self.get_total_score()\n            + self.get_average_feedback_score()\n            + self.get_self_appraisal_score()\n        ) / 3\n    # Set the final score with the appropriate precision.\n    self.db_set(\"final_score\", round(final_score, appraisal_cycle.precision))\n\n", "CodeBleu_score": 31.630369235348972}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.final_score_calculation == \"Formula\":\n        self.final_score = self.calculate_final_score_from_formula(appraisal_cycle)\n    else:\n        self.final_score = self.calculate_final_score_from_average()\n    self.final_score = round(self.final_score, appraisal_cycle.final_score_precision)\n\n", "CodeBleu_score": 17.3507188023969}, {"code": "def calculate_final_score(self)\n\t\n    if not self.appraisal_cycle:\n        return\n\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.use_formula:\n        final_score = self.calculate_final_score_from_formula(appraisal_cycle)\n    else:\n        final_score = self.calculate_final_score_from_averages()\n\n    self.final_score = final_score\n\n", "CodeBleu_score": 18.690585410078096}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > nowdate() and self.status != \"On Leave\":\n        frappe.throw(\n            _(\n                \"Attendance cannot be marked for future dates unless the status is 'On Leave' and there is no leave application.\"\n            )\n        )\n    elif self.attendance_date < self.employee:\n        frappe.throw(\n            _(\"Attendance cannot be marked for dates earlier than the employee's date of joining.\")\n        )\n\n", "CodeBleu_score": 24.201865156044594}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > nowdate():\n        if self.status != \"On Leave\" or self.leave_application:\n            frappe.throw(_(\"Attendance cannot be marked for future dates unless the status is 'On Leave' and there is no leave application.\"))\n\n    if self.employee:\n        employee = frappe.get_doc(\"Employee\", self.employee)\n        if self.attendance_date < employee.date_of_joining:\n            frappe.throw(_(\"Attendance cannot be marked for dates earlier than the employee's date of joining.\"))\n\n", "CodeBleu_score": 32.55507998151279}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > getdate(nowdate()):\n        if self.status != \"On Leave\":\n            frappe.throw(\n                _(\n                    \"Attendance cannot be marked for future dates unless the status is 'On Leave' and there is no leave application.\"\n                )\n            )\n\n    if self.attendance_date < self.employee_joining_date:\n        frappe.throw(\n            _(\n                \"Attendance cannot be marked for dates earlier than the employee's date of joining.\"\n            )\n        )\n\n", "CodeBleu_score": 25.502283727702178}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t\n    if not self.employee:\n        return\n    attendance_list = frappe.get_all(\n        \"Attendance\",\n        filters={\n            \"employee\": self.employee,\n            \"attendance_date\": self.attendance_date,\n            \"docstatus\": 1,\n        },\n        fields=[\"name\"],\n    )\n    if attendance_list:\n        attendance_link = get_link_to_form(\n            \"Attendance\", attendance_list[0].name, label=attendance_list[0].name\n        )\n        frappe.throw(\n            _(\n                \"Duplicate attendance record found for employee {0} on {1}. Please check {2}.\".format(\n                    self.employee, self.attendance_date, attendance_link\n                )\n            )\n        )\n\n", "CodeBleu_score": 31.183640351399767}, {"code": "def validate_duplicate_record(self)\n\t\n    if self.employee and self.attendance_date:\n        attendance_list = frappe.db.sql(\n            \"\"\"\n            SELECT\n                name\n            FROM `tabAttendance`\n            WHERE\n                employee = %(employee)s\n                AND attendance_date = %(attendance_date)s\n                AND docstatus < 2\n            \"\"\",\n            values={\"employee\": self.employee, \"attendance_date\": self.attendance_date},\n            as_dict=1,\n        )\n        if attendance_list:\n            attendance_name = attendance_list[0].name\n            frappe.throw(\n                _(\n                    \"Attendance record for employee {0} on {1} already exists. Please edit {2} instead of creating a new record.\".format(\n                        self.employee,\n                        format_date(self.attendance_date, \"dd-MM-yyyy\"),\n                        get_link_to_form(\"Attendance\", attendance_name),\n                    )\n                )\n            )\n\n", "CodeBleu_score": 30.55384376436947}, {"code": "def validate_duplicate_record(self)\n\t\n    if self.employee:\n        attendance_records = frappe.db.sql(\n            \"\"\"\n                SELECT name\n                FROM `tabAttendance`\n                WHERE employee = %(employee)s\n                AND attendance_date = %(attendance_date)s\n                AND docstatus < 2\n                AND name != %(name)s\n            \"\"\",\n            values={\n                \"employee\": self.employee,\n                \"attendance_date\": self.attendance_date,\n                \"name\": self.name,\n            },\n            as_dict=1,\n        )\n        if attendance_records:\n            raise frappe.exceptions.ValidationError(\n                _(\n                    \"Duplicate attendance record found for employee {0} on {1}.<br><br><b>Existing record:</b> {2}\".format(\n                        get_link_to_form(\"Employee\", self.employee),\n                        format_date(self.attendance_date),\n                        get_link_to_form(\"Attendance\", attendance_records[0].name),\n                    )\n                )\n            )\n\n", "CodeBleu_score": 30.775585375332877}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n    # Get the email addresses of users in the specified group\n    email_addresses = []\n    for user in frappe.get_list(\"User\", filters={\"user_type\": \"System User\", \"email\": [\"!=\", \"\"]}, fields=[\"email\"]):\n        email_addresses.append(user.email)\n\n    # Get message details\n    message_details = frappe.get_list(\"Message\", filters={\"status\": \"Open\"}, fields=[\"subject\", \"message\", \"name\"])\n\n    # Send email\n    for email_address in email_addresses:\n        email_content = \"\"\n        for message in message_details:\n            email_content += f\"\"\"\n            <div style=\"border: 1px solid #dadce0; border-radius: 4px; padding: 16px; margin-bottom: 24px;\">\n                <h2 style=\"margin-bottom: 8px; font-size: 16px; font-weight: 600;\">{message.subject}</h2>\n                <p style=\"margin-bottom: 16px; font-size: 14px;\">{message.message}</p>\n                <p style=\"margin-bottom: 8px; font-size: 14px;\"><strong>Message ID:</strong> {message.name}</p>\n            </div>\n            \"\"\"\n        frappe.sendmail(recipients=email_address, subject=\"Daily Summary\", message=email_content, template=\"daily_summary\")\n\n    # Update status\n    for message in message_details:\n        frappe.db.set_value(\"Message\", message.name, \"status\", \"Sent\")\n\n", "CodeBleu_score": 32.15858681571622}, {"code": "def send_summary(self)\n\t\n    if self.message_summary_type == \"Daily\":\n        if self.message_summary_status == \"Scheduled\":\n            self.message_summary_status = \"Sent\"\n            self.save()\n            message_list = frappe.db.sql(\n                \"\"\"\n                SELECT\n                    message_id,\n                    message_summary_id,\n                    message_summary_type,\n                    message_summary_status,\n                    message_summary_group,\n                    message_summary_date,\n                    message_summary_subject,\n                    message_summary_message,\n                    message_summary_attachment\n                FROM `tabMessage Summary`\n                WHERE message_summary_type = %(message_summary_type)s\n                AND message_summary_status = %(message_summary_status)s\n                AND message_summary_group = %(message_summary_group)s\n                AND message_summary_date = %(message_summary_date)s\n                \"\"\",\n                {\n                    \"message_summary_type\": self.message_summary_type,\n                    \"message_summary_status\": self.message_summary_status,\n                    \"message_summary_group\": self.message_summary_group,\n                    \"message_summary_date\": self.message_summary_date,\n                },\n                as_dict=1,\n            )\n            if message_list:\n                message_list = frappe.db.sql(\n                    \"\"\"\n                    SELECT\n                        message_id,\n                        message_summary_id,\n                        message_summary_type,\n                        message_summary_status,\n                        message_summary_group,\n                        message_summary_date,\n                        message_summary_subject,\n                        message_summary_message,\n                        message_summary_attachment\n                    FROM `tabMessage Summary`\n                    WHERE message_summary_type = %(message_summary_type)s\n                    AND message_summary_status = %(message_summary_status)s\n                    AND message_summary_group = %(message_summary_group)s\n                    AND message_summary_date = %(message_summary_", "CodeBleu_score": 30.68134116459739}, {"code": "def send_summary(self)\n\t\n    if self.status == \"Sent\":\n        frappe.throw(_(\"This summary has already been sent.\"))\n    if self.status == \"Draft\":\n        frappe.throw(_(\"This summary has not been saved yet.\"))\n    if self.status == \"Scheduled\":\n        frappe.throw(_(\"This summary is scheduled to be sent in the future.\"))\n    if self.status == \"Error\":\n        frappe.throw(_(\"This summary has encountered an error.\"))\n    if self.status == \"Cancelled\":\n        frappe.throw(_(\"This summary has been cancelled.\"))\n    if self.status == \"Queued\":\n        frappe.throw(_(\"This summary is in the queue.\"))\n\n    # Get the email addresses of the users in the specified group\n    users = frappe.get_all(\"User\", filters={\"email\": [\"!=\", \"\"]}, fields=[\"email\"])\n    emails = [user.email for user in users]\n\n    # Get the message details\n    message_details = frappe.get_all(\"Message\", filters={\"summary\": self.name}, fields=[\"message\", \"sender\", \"date\", \"subject\", \"status\"])\n\n    # Send the email\n    frappe.sendmail(\n        recipients=emails,\n        sender=self.sender,\n        subject=self.subject,\n        template=\"daily_summary\",\n        args={\n            \"message_details\": message_details,\n            \"date\": global_date_format(self.date),\n        },\n    )\n\n    # Update the status\n    self.db_set(\"status\", \"Sent\")\n\n", "CodeBleu_score": 42.47455942541196}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    if self.applicant:\n        interview_round = frappe.get_value(\n            \"Interview Round\", self.interview_round, [\"name\", \"round_number\"]\n        )\n        if interview_round:\n            interview_round_name, interview_round_number = interview_round\n            existing_interview = frappe.db.exists(\n                \"Interview\",\n                {\n                    \"applicant\": self.applicant,\n                    \"interview_round\": interview_round_name,\n                    \"name\": (\"!=\", self.name),\n                },\n            )\n            if existing_interview:\n                existing_interview = frappe.get_doc(\"Interview\", existing_interview)\n                frappe.throw(\n                    _(\n                        \"Job Applicant {0} is already scheduled for Interview Round {1} ({2}) on {3}. Please visit {4} for more details.\"\n                    ).format(\n                        self.applicant_name,\n                        interview_round_number,\n                        interview_round_name,\n                        existing_interview.interview_date,\n                        get_link_to_form(\"Interview\", existing_interview.name),\n                    )\n                )\n\n", "CodeBleu_score": 38.07603607747849}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.job_applicant and self.interview_round:\n        existing_interviews = frappe.db.get_all(\n            \"Interview\",\n            filters={\n                \"job_applicant\": self.job_applicant,\n                \"interview_round\": self.interview_round,\n            },\n        )\n        if len(existing_interviews) > 0:\n            existing_interview = existing_interviews[0]\n            frappe.throw(\n                _(\n                    \"Job applicant {0} has already been scheduled for interview in round {1}. Please remove the existing interview record {2} before scheduling a new interview for the same round.\".format(\n                        get_link_to_form(\"Job Applicant\", self.job_applicant),\n                        get_link_to_form(\n                            \"Interview Round\", self.interview_round, value=self.interview_round\n                        ),\n                        get_link_to_form(\"Interview\", existing_interview.name),\n                    )\n                )\n            )\n\n", "CodeBleu_score": 40.21087658807654}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.job_applicant and self.interview_round:\n        interview_count = frappe.db.count(\n            \"Interview\",\n            filters={\n                \"job_applicant\": self.job_applicant,\n                \"interview_round\": self.interview_round,\n            },\n        )\n        if interview_count > 1:\n            existing_interview = frappe.db.get_value(\n                \"Interview\",\n                filters={\n                    \"job_applicant\": self.job_applicant,\n                    \"interview_round\": self.interview_round,\n                },\n                fieldname=\"name\",\n            )\n            job_applicant = frappe.db.get_value(\n                \"Job Applicant\", self.job_applicant, \"one_fm_candidate_name\"\n            )\n            frappe.throw(\n                _(\n                    \"Job Applicant {0} is already scheduled for this interview round. Please visit <a href='{1}'>{1}</a> to view the existing interview record.\".format(\n                        job_applicant, existing_interview\n                    )\n                )\n            )\n\n", "CodeBleu_score": 40.98736913943758}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n    if self.skill_assessments:\n        total_rating = 0\n        for assessment in self.skill_assessments:\n            if assessment.rating:\n                total_rating += assessment.rating\n        self.average_rating = total_rating / len(self.skill_assessments)\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 41.43781028768259}, {"code": "def calculate_average_rating(self)\n\t\n    if self.skill_assessments:\n        total_rating = 0\n        for assessment in self.skill_assessments:\n            if assessment.rating:\n                total_rating += assessment.rating\n        self.average_rating = total_rating / len(self.skill_assessments)\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 41.43781028768259}, {"code": "def calculate_average_rating(self)\n\t\n    # Get all skill assessments for this skill\n    skill_assessments = frappe.get_all(\n        \"Skill Assessment\",\n        filters={\"skill\": self.name},\n        fields=[\"name\", \"rating\"],\n        order_by=\"creation desc\",\n    )\n    # Sum the ratings of all assessments that have a rating\n    sum_of_ratings = sum(\n        [\n            float(assessment.rating)\n            for assessment in skill_assessments\n            if assessment.rating\n        ]\n    )\n    # If there are no assessments, set average rating to 0\n    if not sum_of_ratings:\n        self.average_rating = 0\n    # Otherwise, calculate the average rating\n    else:\n        self.average_rating = sum_of_ratings / len(skill_assessments)\n\n", "CodeBleu_score": 25.22966501268601}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.interviewers:\n        interview.interviewers = doc.interviewers\n    interview.save()\n    return interview\n", "CodeBleu_score": 39.05533969723171}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    interview.interviewers = doc.interviewers\n    interview.save()\n    return interview\n", "CodeBleu_score": 34.904133372471115}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.get_doc({\n        \"doctype\": \"Interview\",\n        \"interview_round\": doc.interview_round,\n        \"designation\": doc.designation,\n        \"interviewers\": doc.interviewers\n    })\n    interview.insert()\n    return interview\n\n", "CodeBleu_score": 28.611256085022962}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offer_list = frappe.db.sql(\"\"\"\n        SELECT name\n        FROM `tabJob Offer`\n        WHERE designation = %(designation)s\n        AND company = %(company)s\n        AND docstatus = 1\n        AND creation >= %(from_date)s\n        AND creation <= %(to_date)s\n        \"\"\",\n        values={\n            \"designation\": self.designation,\n            \"company\": self.company,\n            \"from_date\": from_date,\n            \"to_date\": to_date\n        },\n        as_dict=1)\n    return [job_offer.name for job_offer in job_offer_list]\n\n", "CodeBleu_score": 47.42599180755067}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = frappe.db.sql(\n        \"\"\"\n            SELECT\n                name\n            FROM `tabJob Offer`\n            WHERE\n                designation = %(designation)s\n                AND company = %(company)s\n                AND status = 1\n                AND docstatus = 1\n                AND date_of_joining BETWEEN %(from_date)s AND %(to_date)s\n        \"\"\",\n        values={\n            \"designation\": self.designation,\n            \"company\": self.company,\n            \"from_date\": from_date,\n            \"to_date\": to_date,\n        },\n        as_dict=1,\n    )\n    return [job_offer.get(\"name\") for job_offer in job_offers]\n\n", "CodeBleu_score": 46.71788787726784}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    return frappe.db.sql(\n        \"\"\"\n            SELECT name FROM `tabJob Offer`\n            WHERE designation = %(designation)s AND company = %(company)s AND status = 1 AND creation BETWEEN %(from_date)s AND %(to_date)s\n            ORDER BY creation DESC\n        \"\"\",\n        {\n            \"designation\": self.designation,\n            \"company\": self.company,\n            \"from_date\": from_date,\n            \"to_date\": to_date,\n        },\n        as_list=1,\n    )\n\n", "CodeBleu_score": 47.97657795071659}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if not company and not department:\n        return frappe._dict(\n            value=0,\n            fieldtype=\"Percent\",\n            indicator=None,\n            fieldname=None,\n            options=None,\n            doctype=None,\n        )\n\n    filters = [[\"Job Offer\", \"docstatus\", \"=\", 1]]\n    if company:\n        filters.append([\"Job Offer\", \"company\", \"=\", company])\n    if department:\n        filters.append([\"Job Offer\", \"department\", \"=\", department])\n\n    total_job_offers = frappe.db.count(\"Job Offer\", filters=filters)\n    accepted_job_offers = frappe.db.count(\n        \"Job Offer\", filters=filters + [[\"Job Offer\", \"accepted\", \"=\", 1]]\n    )\n\n    if not total_job_offers:\n        return frappe._dict(\n            value=0,\n            fieldtype=\"Percent\",\n            indicator=None,\n            fieldname=None,\n            options=None,\n            doctype=None,\n        )\n\n    acceptance_rate = accepted_job_offers / total_job_offers * 100\n\n    return frappe._dict(\n        value=acceptance_rate,\n        fieldtype=\"Percent\",\n        indicator=None,\n        fieldname=None,\n        options=None,\n        doctype=None,\n    )\n\n", "CodeBleu_score": 33.21659571535623}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if not company and not department:\n        return 0\n    total_offers = frappe.db.count(\"Job Offer\", {\n        \"docstatus\": 1,\n        \"company\": company,\n        \"department\": department\n    })\n    accepted_offers = frappe.db.count(\"Job Offer\", {\n        \"docstatus\": 1,\n        \"status\": \"Accepted\",\n        \"company\": company,\n        \"department\": department\n    })\n    if total_offers == 0:\n        return 0\n    return {\n        \"fieldtype\": \"Percent\",\n        \"value\": accepted_offers / total_offers * 100\n    }\n\n", "CodeBleu_score": 35.00908526234855}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if not company:\n        company = frappe.db.get_single_value(\"HR Settings\", \"default_company\")\n    if not department:\n        department = frappe.db.get_single_value(\"HR Settings\", \"default_department\")\n    total = frappe.db.count(\"Job Offer\", {\"docstatus\": 1, \"company\": company, \"department\": department})\n    accepted = frappe.db.count(\"Job Offer\", {\"docstatus\": 1, \"status\": \"Accepted\", \"company\": company, \"department\": department})\n    if total == 0:\n        return 0\n    return {\"value\": accepted / total, \"fieldtype\": \"Percent\"}\n\n", "CodeBleu_score": 36.387272514532796}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    final var result = this.employerService.register(employerForRegisterDto);\n    if (result.isSuccess()) {\n        return new ResponseEntity<>(result, HttpStatus.OK);\n    }\n    return new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n}", "CodeBleu_score": 60.016147473257156}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    final DataResult<Employer> result = this.employerService.register(employerForRegisterDto);\n    if (!result.isSuccess()) {\n        return new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n    }\n    return new ResponseEntity<>(result, HttpStatus.OK);\n}", "CodeBleu_score": 61.36115020556691}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    final var result = this.employerService.register(employerForRegisterDto);\n    if (result.isSuccess()) {\n        return new ResponseEntity<>(result, HttpStatus.OK);\n    } else {\n        return new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n    }\n}", "CodeBleu_score": 58.79758961705949}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\t\t\n\t\tvar companyStaff = this.getById(companyStaffForUpdateDto.getId());\n\t\t\n\t\tif (companyStaff == null) {\n\t\t\treturn new ErrorResult(Messages.notFound(CompanyStaff.class));\n\t\t}\n\t\t\n\t\tif (!BusinessRules.checkPassword(companyStaffForUpdateDto.getPassword(), companyStaff.getPassword())) {\n\t\t\treturn new ErrorResult(Messages.passwordError());\n\t\t}\n\t\t\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\t\n\t\tthis.update(companyStaff);\n\t\t\n\t\treturn new SuccessResult(Messages.updated(CompanyStaff.class));\n\t}", "CodeBleu_score": 38.490615537700315}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\t\tfinal var companyStaff = this.getById(companyStaffForUpdateDto.getId());\n\t\tif (companyStaff == null) {\n\t\t\treturn new ErrorResult(Messages.notFound(CompanyStaff.class));\n\t\t}\n\n\t\tfinal var businessRules = BusinessRules.run(\n\t\t\t() -> companyStaffForUpdateDto.getPassword().equals(companyStaff.getPassword()),\n\t\t\t() -> companyStaffForUpdateDto.getPassword().length() > 0,\n\t\t\t() -> companyStaffForUpdateDto.getPassword().length() < 255,\n\t\t\t() -> companyStaffForUpdateDto.getFirstName().length() > 0,\n\t\t\t() -> companyStaffForUpdateDto.getFirstName().length() < 255,\n\t\t\t() -> companyStaffForUpdateDto.getLastName().length() > 0,\n\t\t\t() -> companyStaffForUpdateDto.getLastName().length() < 255\n\t\t);\n\n\t\tif (businessRules.failed()) {\n\t\t\treturn new ErrorResult(businessRules.getMessage());\n\t\t}\n\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tcompanyStaff.setPassword(companyStaffForUpdateDto.getPassword());\n\t\tcompanyStaff.setRole(companyStaffForUpdateDto.getRole());\n\n\t\tthis.update(companyStaff);\n\t\treturn new SuccessResult(Messages.updated(CompanyStaff.class));\n\t}", "CodeBleu_score": 43.802911634631016}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\tfinal var result = BusinessRules.run(checkIfCompanyStaffExistsById(companyStaffForUpdateDto.getId()));\n\t\n\tif (result != null)  {\n\t\treturn result;\n\t}\n\t\n\tfinal var companyStaff = this.getById(companyStaffForUpdateDto.getId()).getData();\n\t\n\tif (!companyStaff.getPassword().equals(companyStaffForUpdateDto.getPassword()))  {\n\t\treturn new ErrorResult(Messages.passwordNotMatch);\n\t}\n\t\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\n\tthis.update(companyStaff);\n\t\n\treturn new SuccessResult(Messages.companyStaffUpdated);\n}", "CodeBleu_score": 44.30466097101042}]}
