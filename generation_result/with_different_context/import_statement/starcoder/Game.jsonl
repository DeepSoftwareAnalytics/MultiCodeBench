{"instance_id": "47ee1dae200b", "generation_result": [{"code": "public static void PreloadDll(string dllName){\n\t\tstring dllPath = GetDllPath(dllName)\n\tif (dllPath == null) {\n\t\treturn\n\t}\n\tif (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n\t\tWin32LoadLibrary(dllPath)\n\t} else {\n\t\tPosixLoadLibrary(dllPath)\n\t}\n}", "CodeBleu_score": 38.163444585372744}, {"code": "public static void PreloadDll(string dllName){\n\t\tif (Environment.OSVersion.Platform == PlatformID.Win32NT) {\n\t\tWin32LoadDll(dllName);\n\t}\n\telse {\n\t\tPosixLoadDll(dllName);\n\t}\n}", "CodeBleu_score": 17.80555029598856}, {"code": "public static void PreloadDll(string dllName){\n\t\tstring dllDir = GetDllDirectory()\n\tif (dllDir == null) {\n\t\tdllDir = Environment.CurrentDirectory\n\t}\n\tif (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n\t\tWin32LoadDll(dllDir, dllName)\n\t} else {\n\t\tPosixLoadDll(dllDir, dllName)\n\t}\n}", "CodeBleu_score": 58.28013172673532}]}
{"instance_id": "2073a8291d05", "generation_result": [{"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t\tif (reader.Length == 0) {\n\t\treturn\n\t}\n\tvar serializedFile = new SerializedFile()\n\tif (serializedFile.Load(reader, originalPath, unityVersion)) {\n\t\tif (!m_SerializedFiles.Contains(serializedFile)) {\n\t\t\tm_SerializedFiles.Add(serializedFile)\n\t\t}\n\t} else {\n\t\tm_SkippedFiles.Add(originalPath)\n\t}\n}", "CodeBleu_score": 21.55272864416511}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t\tif (reader == null) {\n\t\treturn\n\t}\n\tif (reader.Length == 0) {\n\t\treturn\n\t}\n\tvar serializedFile = new SerializedFile(reader, originalPath, unityVersion)\n\tif (serializedFile.version < 0) {\n\t\treturn\n\t}\n\tif (serializedFile.version > SerializedFile.kFileVersion) {\n\t\tLogFormat(\"Error: SerializedFile {0} has unknown version ({1})\", originalPath, serializedFile.version)\n\t\treturn\n\t}\n\tif (serializedFile.version < SerializedFile.kFileVersion) {\n\t\tLogFormat(\"Warning: SerializedFile {0} has unknown version ({1})\", originalPath, serializedFile.version)\n\t}\n\tif (serializedFile.version >= 14) {\n\t\tserializedFile.GenerateTypeTree()\n\t}\n\tif (serializedFile.version >= 12) {\n\t\tserializedFile.GenerateObjectInfos()\n\t}\n\tif (serializedFile.version >= 7) {\n\t\tserializedFile.GenerateStringCache()\n\t}\n\tif (serializedFile.version >= 5) {\n\t\tserializedFile.GenerateMetadataSize()\n\t}\n\tif (serializedFile.version >= 4) {\n\t\tserializedFile.GenerateMetadata()\n\t}\n\tif (serializedFile.version >= 3) {\n\t\tserializedFile.GenerateObjects()\n\t}\n\tif (serializedFile.version >= 2) {\n\t\tserializedFile.GenerateAssets()\n\t}\n\tif (serializedFile.version >= 1) {\n\t\tserializedFile.GenerateAssetBundleNameAndVariant()\n\t}\n\tif (serializedFile.version >= 0) {\n\t\tserializedFile.GenerateSize()\n\t}\n\tif (serializedFile.version >= 16) {\n\t\tserializedFile.GenerateTypeTrees()\n\t}\n\tif (serializedFile.version >= 15) {\n\t\tserializedFile.GenerateTypeTreeHashes()\n\t}\n\tif (serializedFile.version >= 13) {\n\t\tserializedFile.GenerateObjectInfoSizes()\n\t}\n\tif (serializedFile.version >= 8) {\n\t\tserializedFile.GenerateObjects()\n\t}\n\tif (serializedFile.version >= 6) {\n\t\tserializedFile", "CodeBleu_score": 29.42820394401531}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t\tif (reader == null) {\n\t\treturn\n\t}\n\n\tif (reader.Length < 12) {\n\t\treturn\n\t}\n\n\tvar serializedFile = SerializedFile.ReadSerializedFile(reader, originalPath, unityVersion)\n\tif (serializedFile == null) {\n\t\treturn\n\t}\n\n\tif (serializedFile.version < 0) {\n\t\treturn\n\t}\n\n\tif (serializedFile.version > SerializedFile.kVersion) {\n\t\tLogFormat(\"Error: SerializedFile {0} has unsupported version ({1})\", serializedFile.name, serializedFile.version)\n\t\treturn\n\t}\n\n\tif (serializedFile.version >= 7) {\n\t\tif (serializedFile.version < 14) {\n\t\t\tserializedFile.buildType = serializedFile.buildType & 0x7F\n\t\t}\n\t\tserializedFile.buildType = serializedFile.buildType & 0x3F\n\t}\n\n\tif (serializedFile.version >= 12) {\n\t\tserializedFile.dataOffset = reader.ReadInt()\n\t}\n\n\tif (serializedFile.version >= 13) {\n\t\tserializedFile.fileSize = reader.ReadInt()\n\t}\n\n\tif (serializedFile.version >= 14) {\n\t\tserializedFile.dataFileSize = reader.ReadInt()\n\t}\n\n\tif (serializedFile.version >= 16) {\n\t\tserializedFile.preloadInfoSize = reader.ReadInt()\n\t}\n\n\tif (serializedFile.version >= 17) {\n\t\tserializedFile.preloadInfoOffset = reader.ReadInt()\n\t}\n\n\tif (serializedFile.version >= 18) {\n\t\tserializedFile.containerSize = reader.ReadInt()\n\t}\n\n\tif (serializedFile.version >= 20) {\n\t\tserializedFile.containerOffset = reader.ReadInt()\n\t}\n\n\tif (serializedFile.version >= 22) {\n\t\tserializedFile.typeTreeFileSize = reader.ReadInt()\n\t}\n\n\tif (serializedFile.version >= 24) {\n\t\tserializedFile.typeTreeOffset = reader.ReadInt()\n\t}\n\n\tif (serializedFile.version >= 26) {\n\t\tserializedFile.metadataSize = reader.ReadInt()\n\t}\n\n\tif (serializedFile.", "CodeBleu_score": 26.71741063247368}]}
{"instance_id": "5dacc6a26301", "generation_result": [{"code": "public ImportedFrame FindFrameByPath(string path){\n\t\tstring name = Path.GetFileNameWithoutExtension(path)\n\tforeach (ImportedFrame frame in frames) {\n\t\tif (frame.name == name) {\n\t\t\treturn frame\n\t\t}\n\t}\n\treturn null\n}", "CodeBleu_score": 41.073064726888134}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\t\tif (path == null) {\n\t\treturn null\n\t}\n\tstring name = Path.GetFileNameWithoutExtension(path)\n\tforeach (ImportedFrame frame in frames) {\n\t\tif (frame.name == name) {\n\t\t\tif (frame.path == path) {\n\t\t\t\treturn frame\n\t\t\t}\n\t\t}\n\t}\n\treturn null\n}", "CodeBleu_score": 42.89508942999295}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\t\tstring name = Path.GetFileNameWithoutExtension(path)\n\tforeach (ImportedFrame frame in this.Children) {\n\t\tif (frame.Name == name) {\n\t\t\tif (frame.Path == path) {\n\t\t\t\treturn frame\n\t\t\t}\n\t\t}\n\t}\n\treturn null\n}", "CodeBleu_score": 42.81133886997257}]}
{"instance_id": "c20b04c4ad37", "generation_result": [{"code": "public static FileReader DecompressGZip(FileReader reader){\n\t\tMemoryStream ms = new MemoryStream()\n\tusing (GZipStream gzip = new GZipStream(ms, CompressionMode.Decompress)) {\n\t\tgzip.Write(reader.ReadBytes())\n\t}\n\treturn new FileReader(ms.ToArray())\n}", "CodeBleu_score": 20.216999706938665}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\t\tMemoryStream ms = new MemoryStream()\n\tusing (GZipStream gzip = new GZipStream(reader.Stream, CompressionMode.Decompress)) {\n\t\tgzip.CopyTo(ms)\n\t}\n\treturn new FileReader(ms)\n}", "CodeBleu_score": 30.44021615744453}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\t\tMemoryStream ms = new MemoryStream()\n\tusing (GZipStream gzip = new GZipStream(ms, CompressionMode.Decompress)) {\n\t\treader.CopyTo(gzip)\n\t}\n\treturn new FileReader(ms)\n}", "CodeBleu_score": 20.742780360613605}]}
{"instance_id": "11ce5c7b009d", "generation_result": [{"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\t// Create a collection of non-switch strings.\n\tArrayList nonSwitchStrings = new ArrayList()\n\t\n\t// Iterate through the command strings.\n\tforeach string commandString in commandStrings {\n\t\t// Set the index to 0.\n\t\tint index = 0\n\t\t\n\t\t// Iterate through the switch forms.\n\t\tforeach SwitchForm switchForm in switchForms {\n\t\t\t// Check if the command string matches the switch form.\n\t\t\tif switchForm.Matches(commandString) {\n\t\t\t\t// If the switch form is a switch, add it to the collection of switches.\n\t\t\t\tif switchForm.IsSwitch {\n\t\t\t\t\tswitches.Add(switchForm.Switch)\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// If the switch form is a switch group, add it to the collection of switch groups.\n\t\t\t\tif switchForm.IsSwitchGroup {\n\t\t\t\t\tswitchGroups.Add(switchForm.SwitchGroup)\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// If the switch form is a switch group, add it to the collection of switch groups.\n\t\t\t\tif switchForm.IsNonSwitchString {\n\t\t\t\t\tnonSwitchStrings.Add(switchForm.NonSwitchString)\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Break out of the loop.\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t\n\t\t\t// Increment the index.\n\t\t\tindex++\n\t\t}\n\t\t\n\t\t// If the index is less than the length of the command string, add the rest of the string to the collection of non-switch strings.\n\t\tif index < commandString.Length {\n\t\t\tnonSwitchStrings.Add(commandString.Substring(index))\n\t\t}\n\t}\n\t\n\t// If there are any non-switch strings, add them to the collection of non-switch strings.\n\tif nonSwitchStrings.Count > 0 {\n\t\tnonSwitchStrings.TrimToSize()\n\t\tnonSwitchStringCollections.Add(nonSwitchStrings)\n\t}\n}", "CodeBleu_score": 19.937965792661867}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\t// Initialize the non-switch strings collection.\n\tnonSwitchStrings = new ArrayList()\n\t\n\t// Initialize the switch collections.\n\tswitchFormsDictionary = new Hashtable()\n\tswitchFormsDictionary.Clear()\n\tswitchFormsArray = new SwitchForm[switchForms.Length]\n\tswitchFormsArray = switchForms\n\tfor (int i = 0; i < switchFormsArray.Length; i++) {\n\t\tswitchFormsDictionary.Add(switchFormsArray[i].switchString, switchFormsArray[i])\n\t}\n\t\n\t// Initialize the switch string and the switch string length.\n\tswitchString = \"\"\n\tswitchStringLength = 0\n\t\n\t// Initialize the command string and the command string length.\n\tcommandString = \"\"\n\tcommandStringLength = 0\n\t\n\t// Initialize the switch found flag.\n\tswitchFound = false\n\t\n\t// Initialize the stop parsing flag.\n\tstopParsing = false\n\t\n\t// Iterate through the command strings.\n\tfor (int i = 0; i < commandStrings.Length; i++) {\n\t\t// Get the command string.\n\t\tcommandString = commandStrings[i]\n\t\t\n\t\t// Get the command string length.\n\t\tcommandStringLength = commandString.Length\n\t\t\n\t\t// Initialize the switch string length.\n\t\tswitchStringLength = 0\n\t\t\n\t\t// Initialize the switch found flag.\n\t\tswitchFound = false\n\t\t\n\t\t// Iterate through the switch forms.\n\t\tfor (int j = 0; j < switchFormsArray.Length; j++) {\n\t\t\t// Get the switch form.\n\t\t\tswitchForm = switchFormsArray[j]\n\t\t\t\n\t\t\t// Get the switch form switch string.\n\t\t\tswitchString = switchForm.switchString\n\t\t\t\n\t\t\t// Get the switch string length.\n\t\t\tswitchStringLength = switchString.Length\n\t\t\t\n\t\t\t// Check if the command string starts with the switch string.\n\t\t\tif (commandString.StartsWith(switchString)) {\n\t\t\t\t// Check if the switch string is the same length as the command string.\n\t\t\t\tif (switchStringLength == commandStringLength) {\n\t\t\t\t\t// Add the switch form to the switch forms dictionary.\n\t\t\t\t\tswitchFormsDictionary.Add(switchString, switchForm)\n\t\t\t\t\t\n\t\t\t\t\t// Set the switch found flag.\n\t\t\t\t\tswitchFound = true\n\t\t\t\t} else {\n\t\t\t\t\t// Check if the switch string is longer than the command string.\n\t\t\t\t\tif (switchStringLength > command", "CodeBleu_score": 30.86425096239519}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\t// Initialize variables\n\tArrayList nonSwitchStrings = new ArrayList()\n\tstring[] switchTokens = new string[switchForms.Length]\n\tfor (int i = 0; i < switchForms.Length; i++) {\n\t\tswitchTokens[i] = switchForms[i].Switch\n\t}\n\t// Iterate through the command strings\n\tfor (int i = 0; i < commandStrings.Length; i++) {\n\t\t// If the current string is a switch, process it\n\t\tif (Array.IndexOf(switchTokens, commandStrings[i]) >= 0) {\n\t\t\t// If the current switch is a stop token, stop parsing switches\n\t\t\tif (commandStrings[i] == switchForms[0].StopToken) {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t// If the current switch is a required switch, throw an exception\n\t\t\tif (switchForms[Array.IndexOf(switchTokens, commandStrings[i])].Required) {\n\t\t\t\tthrow new ArgumentException(\"Required switch not found: \" + commandStrings[i])\n\t\t\t}\n\t\t\t// If the current switch is a switch with a value, add the switch and value to the dictionary\n\t\t\tif (switchForms[Array.IndexOf(switchTokens, commandStrings[i])].HasValue) {\n\t\t\t\t// If the next string is a switch, throw an exception\n\t\t\t\tif (Array.IndexOf(switchTokens, commandStrings[i + 1]) >= 0) {\n\t\t\t\t\tthrow new ArgumentException(\"Switch \" + commandStrings[i] + \" must be followed by a value.\")\n\t\t\t\t}\n\t\t\t\t// If the next string is a stop token, throw an exception\n\t\t\t\tif (commandStrings[i + 1] == switchForms[0].StopToken) {\n\t\t\t\t\tthrow new ArgumentException(\"Switch \" + commandStrings[i] + \" must be followed by a value.\")\n\t\t\t\t}\n\t\t\t\t// Add the switch and value to the dictionary\n\t\t\t\tswitchForms[Array.IndexOf(switchTokens, commandStrings[i])].Values.Add(commandStrings[i + 1])\n\t\t\t\ti += 1\n\t\t\t}\n\t\t\t// If the current switch is a switch without a value, add the switch to the dictionary\n\t\t\telse {\n\t\t\t\tswitchForms[Array.IndexOf(switchTokens, commandStrings[i])].Values.Add(true)\n\t\t\t}\n\t\t}\n\t\t// If the current string is", "CodeBleu_score": 36.094248088547204}]}
{"instance_id": "b8da2d0a3f76", "generation_result": [{"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\tthis.m_Texture2D = m_Texture2D\n\tthis.m_TextureFormat = m_Texture2D.format\n\tthis.m_Width = m_Texture2D.width\n\tthis.m_Height = m_Texture2D.height\n\tthis.m_Platform = SystemInfo.operatingSystemFamily\n\tthis.m_Version = SystemInfo.operatingSystem\n\tthis.m_OutputSize = m_Texture2D.width * m_Texture2D.height * 4\n\tthis.m_ImageData = m_Texture2D.GetRawTextureData()\n}", "CodeBleu_score": 30.950151274651983}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\tm_Texture2D = m_Texture2D\n\tm_TextureFormat = m_Texture2D.format\n\tm_Width = m_Texture2D.width\n\tm_Height = m_Texture2D.height\n\tm_Version = m_Texture2D.version\n\tm_Platform = m_Texture2D.platform\n\tm_OutputSize = m_Texture2D.outputSize\n\tm_IsReadable = m_Texture2D.isReadable\n\tm_MipMapCount = m_Texture2D.mipmapCount\n\tm_IsCubemap = m_Texture2D.isCubemap\n\tm_IsVolume = m_Texture2D.isVolume\n\tm_IsPreProcessed = m_Texture2D.isPreProcessed\n\tm_StreamingMipmaps = m_Texture2D.streamingMipmaps\n\tm_StreamingMipmapsPriority = m_Texture2D.streamingMipmapsPriority\n\tm_RequestedMipmapLevel = m_Texture2D.requestedMipmapLevel\n\tm_ImageCount = m_Texture2D.imageCount\n\tm_Texture2D.GetPixelData()\n\tm_PixelData = m_Texture2D.GetRawTextureData()\n}", "CodeBleu_score": 22.029100782660244}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\tif (m_Texture2D == null) {\n\t\tthrow new System.Exception(\"m_Texture2D is null.\")\n\t}\n\n\tm_Width = m_Texture2D.width\n\tm_Height = m_Texture2D.height\n\tm_TextureFormat = m_Texture2D.format\n\tm_Texture2D.GetRawTextureData().CopyTo(m_TextureData)\n\tm_Version = m_Texture2D.version\n\tm_Platform = m_Texture2D.GetPlatform()\n\tm_OutputSize = m_Texture2D.GetTextureSize()\n}", "CodeBleu_score": 24.242121300142347}]}
{"instance_id": "4d1412b550a3", "generation_result": [{"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear()\n\tif (sp.arraySize == 0) {\n\t\treturn \"Nothing\"\n\t}\n\tfor (int i = 0 i < sp.arraySize i++) {\n\t\tSerializedProperty element = sp.GetArrayElementAtIndex(i)\n\t\tstring name = element.FindPropertyRelative(\"name\").stringValue\n\t\tresult.Add(name)\n\t}\n\treturn string.Join(\", \", result.ToArray())\n}", "CodeBleu_score": 20.95773139883778}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear()\n\tif (sp.arraySize == 0) {\n\t\treturn \"Nothing\"\n\t}\n\tfor (int i = 0 i < sp.arraySize i++) {\n\t\tstring name = sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"name\").stringValue\n\t\tresult.Add(name)\n\t}\n\treturn string.Join(\", \", result.ToArray())\n}", "CodeBleu_score": 19.864551518744737}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear()\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tSerializedProperty element = sp.GetArrayElementAtIndex(i)\n\t\tif (element.boolValue) {\n\t\t\tresult.Add(element.FindPropertyRelative(\"name\").stringValue)\n\t\t}\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\"\n\t}\n\tstring resultString = \"\"\n\tfor (int i = 0; i < result.Count; i++) {\n\t\tif (i == 0) {\n\t\t\tresultString = result[i]\n\t\t} else {\n\t\t\tresultString = resultString + \", \" + result[i]\n\t\t}\n\t}\n\treturn resultString\n}", "CodeBleu_score": 40.25103219231021}]}
{"instance_id": "5014bde74f8b", "generation_result": [{"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t\tif (sp.arraySize > 0) {\n\t\tvar sp_name = sp.GetArrayElementAtIndex(0).FindPropertyRelative(\"name\")\n\t\tif (sp_name.stringValue == prop.name) {\n\t\t\tmenu.AddItem(new GUIContent(add ? \"Remove \" + prop.name : \"Add \" + prop.name), false, () => {\n\t\t\t\tif (add) {\n\t\t\t\t\tsp.DeleteArrayElementAtIndex(0)\n\t\t\t\t} else {\n\t\t\t\t\tsp.DeleteArrayElementAtIndex(sp.arraySize - 1)\n\t\t\t\t}\n\t\t\t\tsp.serializedObject.ApplyModifiedProperties()\n\t\t\t})\n\t\t} else {\n\t\t\tmenu.AddItem(new GUIContent(add ? \"Add \" + prop.name : \"Remove \" + prop.name), false, () => {\n\t\t\t\tif (add) {\n\t\t\t\t\tvar sp_new = sp.InsertArrayElementAtIndex(sp.arraySize)\n\t\t\t\t\tsp_new.FindPropertyRelative(\"name\").stringValue = prop.name\n\t\t\t\t\tsp_new.FindPropertyRelative(\"type\").stringValue = prop.type\n\t\t\t\t\tsp_new.FindPropertyRelative(\"default\").stringValue = prop.default\n\t\t\t\t\tsp_new.FindPropertyRelative(\"range\").vector2Value = prop.range\n\t\t\t\t\tsp_new.FindPropertyRelative(\"label\").stringValue = prop.label\n\t\t\t\t\tsp_new.FindPropertyRelative(\"description\").stringValue = prop.description\n\t\t\t\t\tsp_new.FindPropertyRelative(\"options\").stringValue = prop.options\n\t\t\t\t\tsp_new.FindPropertyRelative(\"min\").floatValue = prop.min\n\t\t\t\t\tsp_new.FindPropertyRelative(\"max\").floatValue = prop.max\n\t\t\t\t\tsp_new.FindPropertyRelative(\"precision\").floatValue = prop.precision\n\t\t\t\t\tsp_new.FindPropertyRelative(\"unit\").stringValue = prop.unit\n\t\t\t\t\tsp_new.FindPropertyRelative(\"unitLocked\").boolValue = prop.unitLocked\n\t\t\t\t\tsp_new.FindPropertyRelative(\"hideRange\").boolValue = prop.hideRange\n\t\t\t\t\tsp_new.FindPropertyRelative(\"hideMin\").boolValue = prop.hideMin\n\t\t\t\t\tsp_new.FindPropertyRelative(\"hideMax\").boolValue = prop.hideMax\n\t\t\t\t\tsp_new.FindPropertyRelative(\"hidePrecision\").boolValue = prop.hidePrecision\n\t\t\t\t\tsp_new.FindPropertyRelative(\"hideUnit\").boolValue = prop", "CodeBleu_score": 32.787812031417204}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t\tif (prop.type == ShaderProperty.Type.Texture) {\n\t\tmenu.AddItem(new GUIContent(prop.name), sp.arraySize > 0 && sp.GetArrayElementAtIndex(0).FindPropertyRelative(\"name\").stringValue == prop.name, () => {\n\t\t\tif (add) {\n\t\t\t\tsp.arraySize++;\n\t\t\t\tsp.GetArrayElementAtIndex(sp.arraySize - 1).FindPropertyRelative(\"name\").stringValue = prop.name;\n\t\t\t\tsp.GetArrayElementAtIndex(sp.arraySize - 1).FindPropertyRelative(\"type\").intValue = (int)prop.type;\n\t\t\t} else {\n\t\t\t\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\t\t\t\tif (sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"name\").stringValue == prop.name) {\n\t\t\t\t\t\tsp.DeleteArrayElementAtIndex(i);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t} else {\n\t\tmenu.AddItem(new GUIContent(prop.name), sp.arraySize > 0 && sp.GetArrayElementAtIndex(0).FindPropertyRelative(\"name\").stringValue == prop.name, () => {\n\t\t\tif (add) {\n\t\t\t\tsp.arraySize++;\n\t\t\t\tsp.GetArrayElementAtIndex(sp.arraySize - 1).FindPropertyRelative(\"name\").stringValue = prop.name;\n\t\t\t\tsp.GetArrayElementAtIndex(sp.arraySize - 1).FindPropertyRelative(\"type\").intValue = (int)prop.type;\n\t\t\t\tsp.GetArrayElementAtIndex(sp.arraySize - 1).FindPropertyRelative(\"value\").vector4Value = prop.defaultValue;\n\t\t\t} else {\n\t\t\t\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\t\t\t\tif (sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"name\").stringValue == prop.name) {\n\t\t\t\t\t\tsp.DeleteArrayElementAtIndex(i);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}", "CodeBleu_score": 33.0541756189637}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t\tif (add) {\n\t\tif (sp.FindPropertyRelative(prop.name) == null) {\n\t\t\tmenu.AddItem(new GUIContent(prop.name + \" (\" + prop.type + \")\"), false, () => {\n\t\t\t\tSerializedProperty newProp = sp.FindPropertyRelative(prop.name);\n\t\t\t\tif (newProp == null) {\n\t\t\t\t\tnewProp = sp.FindPropertyRelative(prop.name);\n\t\t\t\t}\n\t\t\t\tnewProp.type = prop.type;\n\t\t\t\tsp.serializedObject.ApplyModifiedProperties();\n\t\t\t});\n\t\t}\n\t} else {\n\t\tif (sp.FindPropertyRelative(prop.name) != null) {\n\t\t\tmenu.AddItem(new GUIContent(prop.name + \" (\" + prop.type + \")\"), false, () => {\n\t\t\t\tSerializedProperty newProp = sp.FindPropertyRelative(prop.name);\n\t\t\t\tif (newProp != null) {\n\t\t\t\t\tsp.DeleteArrayElementAtIndex(sp.FindPropertyRelative(prop.name).arrayIndex);\n\t\t\t\t\tsp.serializedObject.ApplyModifiedProperties();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}", "CodeBleu_score": 35.933690263571464}]}
{"instance_id": "20e390481814", "generation_result": [{"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t\tvar x = sp.FindPropertyRelative(\"x\")\n\tvar y = sp.FindPropertyRelative(\"y\")\n\tvar z = sp.FindPropertyRelative(\"z\")\n\n\tvar isVector3 = (\n\t\tMathf.Approximately(x.floatValue, y.floatValue) &&\n\t\tMathf.Approximately(x.floatValue, z.floatValue) &&\n\t\tMathf.Approximately(y.floatValue, z.floatValue)\n\t)\n\n\tvar isSingle = (\n\t\tMathf.Approximately(x.floatValue, y.floatValue) &&\n\t\tMathf.Approximately(x.floatValue, z.floatValue)\n\t)\n\n\tvar isMultiple = (\n\t\t!Mathf.Approximately(x.floatValue, y.floatValue) ||\n\t\t!Mathf.Approximately(x.floatValue, z.floatValue)\n\t)\n\n\tvar isDefault = (\n\t\tMathf.Approximately(x.floatValue, 0f) &&\n\t\tMathf.Approximately(y.floatValue, 0f) &&\n\t\tMathf.Approximately(z.floatValue, 0f)\n\t)\n\n\tvar isZero = (\n\t\tMathf.Approximately(x.floatValue, 0f) &&\n\t\tMathf.Approximately(y.floatValue, 0f) &&\n\t\tMathf.Approximately(z.floatValue, 0f)\n\t)\n\n\tvar isNonZero = (\n\t\t!Mathf.Approximately(x.floatValue, 0f) ||\n\t\t!Mathf.Approximately(y.floatValue, 0f) ||\n\t\t!Mathf.Approximately(z.floatValue, 0f)\n\t)\n\n\tvar isDefaultVector3 = (\n\t\tMathf.Approximately(x.floatValue, 0f) &&\n\t\tMathf.Approximately(y.floatValue, 0f) &&\n\t\tMathf.Approximately(z.floatValue, 0f)\n\t)\n\n\tvar isZeroVector3 = (\n\t\tMathf.Approximately(x.floatValue, 0f) &&\n\t\tMathf.Approximately(y.floatValue, 0f) &&\n\t\tMathf.Approximately(", "CodeBleu_score": 24.413784206782918}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t\tvar value = sp.vector3Value\n\tvar x = value.x\n\tvar y = value.y\n\tvar z = value.z\n\tvar isVector = x != y || x != z\n\tvar isApproximately = Math.Abs(x - y) < 0.001f && Math.Abs(x - z) < 0.001f\n\tvar isDifferent = x != y || x != z || y != z\n\tvar showVector = showXyz && (isVector || isDifferent)\n\tvar showFloat = !showXyz\n\tvar showToggle = showFloat && isApproximately && isVector\n\tvar showFloatField = showFloat && (isVector || isDifferent)\n\tvar showVectorField = showVector && (isVector || isDifferent)\n\n\tusing (new EditorGUI.DisabledScope(\"m_AxesArray.arraySize > 1\")) {\n\t\tif (showToggle) {\n\t\t\tif (EditorGUILayout.Toggle(sp.displayName, showVector)) {\n\t\t\t\tsp.vector3Value = value\n\t\t\t} else {\n\t\t\t\tsp.floatValue = x\n\t\t\t}\n\t\t} else {\n\t\t\tif (showFloatField) {\n\t\t\t\tEditorGUI.BeginChangeCheck()\n\t\t\t\tvar newValue = EditorGUI.FloatField(sp.displayName, x)\n\t\t\t\tif (EditorGUI.EndChangeCheck()) {\n\t\t\t\t\tsp.floatValue = newValue\n\t\t\t\t\tsp.serializedObject.ApplyModifiedProperties()\n\t\t\t\t}\n\t\t\t} else if (showVectorField) {\n\t\t\t\tEditorGUI.BeginChangeCheck()\n\t\t\t\tvar newValue = EditorGUI.Vector3Field(sp.displayName, value)\n\t\t\t\tif (EditorGUI.EndChangeCheck()) {\n\t\t\t\t\tsp.vector3Value = newValue\n\t\t\t\t\tsp.serializedObject.ApplyModifiedProperties()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn showFloatField || showVectorField\n}", "CodeBleu_score": 24.66835019287894}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t\tif (showXyz) {\n\t\tvar xyz = sp.vector3Value\n\t\tvar isApproximatelyEqual = float.IsPositiveInfinity(xyz.x) || float.IsNegativeInfinity(xyz.x) || float.IsNaN(xyz.x) ||\n\t\t\tfloat.IsPositiveInfinity(xyz.y) || float.IsNegativeInfinity(xyz.y) || float.IsNaN(xyz.y) ||\n\t\t\tfloat.IsPositiveInfinity(xyz.z) || float.IsNegativeInfinity(xyz.z) || float.IsNaN(xyz.z) ||\n\t\t\tMathf.Approximately(xyz.x, xyz.y) && Mathf.Approximately(xyz.x, xyz.z)\n\t\tvar hasMultipleDifferentValues = xyz.x != xyz.y || xyz.x != xyz.z || xyz.y != xyz.z\n\t\tif (isApproximatelyEqual || hasMultipleDifferentValues) {\n\t\t\tvar rect = sp.GetRect()\n\t\t\tvar label = EditorGUI.BeginProperty(rect, GUIContent.none, sp)\n\t\t\tvar buttonRect = new Rect(rect)\n\t\t\tbuttonRect.width = 16\n\t\t\tbuttonRect.height = 16\n\t\t\tbuttonRect.x += 16\n\t\t\tbuttonRect.y += 1\n\t\t\tvar button = GUI.Toggle(buttonRect, GUIContent.none, sp.isExpanded)\n\t\t\tif (button != sp.isExpanded) {\n\t\t\t\tsp.isExpanded = button\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tEditorGUI.BeginChangeCheck()\n\t\t\tvar newValue = EditorGUI.Vector3Field(rect, label, xyz)\n\t\t\tif (EditorGUI.EndChangeCheck()) {\n\t\t\t\tsp.vector3Value = newValue\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tEditorGUI.EndProperty()\n\t\t\treturn false\n\t\t} else {\n\t\t\tvar rect = sp.GetRect()\n\t\t\tvar label = EditorGUI.BeginProperty(rect, GUIContent.none, sp)\n\t\t\tvar buttonRect = new Rect(rect)\n\t\t\tbuttonRect.width = 16\n\t\t\tbuttonRect.height = 16\n\t\t\tbuttonRect.x += 16\n\t\t\tbuttonRect.y += 1\n\t\t\tvar button = GUI.Toggle(buttonRect, GUIContent.none, sp.isExpanded)\n\t\t\tif (button != sp", "CodeBleu_score": 36.67602732591103}]}
{"instance_id": "c3587cbcda7e", "generation_result": [{"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\tif (baseMat == null)\n\t\treturn null\n\tif (texture == null)\n\t\treturn null\n\tif (id < 0)\n\t\treturn null\n\tif (props < 0)\n\t\treturn null\n\t\n\tMaterial mat = null\n\t\n\tforeach (MaterialEntry entry in materialList) {\n\t\tif (entry.baseMat == baseMat && entry.texture == texture && entry.id == id && entry.props == props) {\n\t\t\tentry.count += 1\n\t\t\tmat = entry.mat\n\t\t\tbreak\n\t\t}\n\t}\n\t\n\tif (mat == null) {\n\t\tmat = new Material(baseMat)\n\t\tmat.mainTexture = texture\n\t\tmat.name = baseMat.name + \" (Instance \" + materialList.Count + \")\"\n\t\tmat.SetInt(\"_Id\", id)\n\t\tmat.SetInt(\"_Props\", props)\n\t\tmaterialList.Add(new MaterialEntry(baseMat, texture, id, props, mat))\n\t}\n\t\n\treturn mat\n}", "CodeBleu_score": 32.26146157478802}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\treturn baseMat;\n}", "CodeBleu_score": 4.765890422068315}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\treturn Add(baseMat, texture, id, props, true)\n}", "CodeBleu_score": 7.869409250213197}]}
{"instance_id": "a35149bc8b8b", "generation_result": [{"code": "public static void Remove(Material customMat){\n\t\tif (customMat == null) {\n\t\tDebug.LogWarning(\"Custom material is null.\")\n\t\treturn\n\t}\n\n\tif (!customMat.HasProperty(\"_CustomMaterialID\")) {\n\t\tDebug.LogWarning(\"Custom material has no _CustomMaterialID property.\")\n\t\treturn\n\t}\n\n\tint customMatID = customMat.GetFloat(\"_CustomMaterialID\")\n\n\tif (customMatID == 0) {\n\t\tDebug.LogWarning(\"Custom material has no ID.\")\n\t\treturn\n\t}\n\n\tif (customMatID > customMatCount) {\n\t\tDebug.LogWarning(\"Custom material ID exceeds the number of custom materials.\")\n\t\treturn\n\t}\n\n\tif (customMatID == customMatCount) {\n\t\tcustomMatCount -= 1\n\t}\n\n\tfor (int i = 0; i < customMatCount; i++) {\n\t\tif (customMatID == customMatList[i].id) {\n\t\t\tcustomMatList[i].count -= 1\n\n\t\t\tif (customMatList[i].count == 0) {\n\t\t\t\tcustomMatList.RemoveAt(i)\n\t\t\t\tcustomMatList.TrimExcess()\n\t\t\t\tDestroy(customMat)\n\t\t\t\tcustomMat = null\n\t\t\t}\n\n\t\t\treturn\n\t\t}\n\t}\n}", "CodeBleu_score": 26.720947384946335}, {"code": "public static void Remove(Material customMat){\n\t\tif (customMat == null) {\n\t\tDebug.LogWarning(\"Custom material is null.\", customMat);\n\t\treturn;\n\t}\n\tif (!customMat.HasProperty(\"_CustomMaterialID\")) {\n\t\tDebug.LogWarning(\"Custom material has no _CustomMaterialID property.\", customMat);\n\t\treturn;\n\t}\n\tint customMatID = customMat.GetFloat(\"_CustomMaterialID\");\n\tif (customMatID == 0) {\n\t\tDebug.LogWarning(\"Custom material ID is 0.\", customMat);\n\t\treturn;\n\t}\n\tif (!customMat.HasProperty(\"_CustomMaterialCount\")) {\n\t\tDebug.LogWarning(\"Custom material has no _CustomMaterialCount property.\", customMat);\n\t\treturn;\n\t}\n\tint customMatCount = customMat.GetFloat(\"_CustomMaterialCount\");\n\tif (customMatCount == 0) {\n\t\tDebug.LogWarning(\"Custom material count is 0.\", customMat);\n\t\treturn;\n\t}\n\tif (!customMat.HasProperty(\"_CustomMaterialName\")) {\n\t\tDebug.LogWarning(\"Custom material has no _CustomMaterialName property.\", customMat);\n\t\treturn;\n\t}\n\tstring customMatName = customMat.GetFloat(\"_CustomMaterialName\");\n\tif (customMatName == \"\") {\n\t\tDebug.LogWarning(\"Custom material name is empty.\", customMat);\n\t\treturn;\n\t}\n\tif (!customMat.HasProperty(\"_CustomMaterialType\")) {\n\t\tDebug.LogWarning(\"Custom material has no _CustomMaterialType property.\", customMat);\n\t\treturn;\n\t}\n\tstring customMatType = customMat.GetFloat(\"_CustomMaterialType\");\n\tif (customMatType == \"\") {\n\t\tDebug.LogWarning(\"Custom material type is empty.\", customMat);\n\t\treturn;\n\t}\n\tif (!customMat.HasProperty(\"_CustomMaterialProperties\")) {\n\t\tDebug.LogWarning(\"Custom material has no _CustomMaterialProperties property.\", customMat);\n\t\treturn;\n\t}\n\tstring customMatProperties = customMat.GetFloat(\"_CustomMaterialProperties\");\n\tif (customMatProperties == \"\") {\n\t\tDebug.LogWarning(\"Custom material properties are empty.\", customMat);\n\t\treturn;\n\t}\n\tif (!customMat.HasProperty(\"_CustomMaterialShader\")) {", "CodeBleu_score": 23.107508649161602}, {"code": "public static void Remove(Material customMat){\n\t\tif (customMat == null) {\n\t\treturn\n\t}\n\tif (customMat.name.Contains(\"Custom/\")) {\n\t\tstring matName = customMat.name.Remove(0, 7)\n\t\tint count = 0\n\t\tfor (int i = 0; i < customMatList.Count; i++) {\n\t\t\tif (customMatList[i].name == matName) {\n\t\t\t\tcount = customMatList[i].count - 1\n\t\t\t\tif (count == 0) {\n\t\t\t\t\tcustomMatList.RemoveAt(i)\n\t\t\t\t\tcustomMat.shader = Shader.Find(\"Diffuse\")\n\t\t\t\t\tcustomMat.color = Color.white\n\t\t\t\t\tcustomMat.mainTexture = null\n\t\t\t\t\tcustomMat.SetFloat(\"_RimPower\", 0f)\n\t\t\t\t\tcustomMat.SetFloat(\"_RimIntensity\", 0f)\n\t\t\t\t\tcustomMat.SetFloat(\"_RimThreshold\", 0f)\n\t\t\t\t\tcustomMat.SetFloat(\"_OutlineWidth\", 0f)\n\t\t\t\t\tcustomMat.SetFloat(\"_OutlineIntensity\", 0f)\n\t\t\t\t\tcustomMat.SetFloat(\"_OutlineThreshold\", 0f)\n\t\t\t\t\tcustomMat.SetFloat(\"_OutlineColorPower\", 0f)\n\t\t\t\t\tcustomMat.SetFloat(\"_OutlineColorIntensity\", 0f)\n\t\t\t\t\tcustomMat.SetFloat(\"_OutlineColorThreshold\", 0f)\n\t\t\t\t\tcustomMat.SetFloat(\"_OutlineColorSaturation\", 0f)\n\t\t\t\t\tcustomMat.SetFloat(\"_OutlineColorValue\", 0f)\n\t\t\t\t\tcustomMat.SetFloat(\"_OutlineColorHue\", 0f)\n\t\t\t\t\tcustomMat.SetFloat(\"_OutlineColorAlpha\", 0f)\n\t\t\t\t\tcustomMat.SetFloat(\"_OutlineColorRed\", 0f)\n\t\t\t\t\tcustomMat.SetFloat(\"_OutlineColorGreen\", 0f)\n\t\t\t\t\tcustomMat.SetFloat(\"_OutlineColorBlue\", 0f)\n\t\t\t\t\tcustomMat.SetFloat(\"_OutlineTexPower\", 0f)\n\t\t\t\t\tcustomMat.SetFloat(\"_OutlineTexIntensity\", 0f)\n\t\t\t\t\tcustomMat.SetFloat(\"_OutlineTexThreshold\", 0f)\n\t\t\t\t\tcustomMat.SetFloat(\"_OutlineTexSaturation\", 0f)\n\t\t\t\t\tcustomMat.SetFloat(\"_OutlineTexValue\", 0f)\n\t\t\t\t\tcustomMat.SetFloat(\"_OutlineTexHue\", 0f)\n\t\t\t\t\tcustom", "CodeBleu_score": 21.592636717855683}]}
{"instance_id": "892bbee52ab9", "generation_result": [{"code": "private void RefreshParticles(GameObject root){\n\t\tif (root == null)\n\t\treturn\n\tvar particleSystems = root.GetComponentsInChildren<ParticleSystem>(true)\n\tvar particleSystemList = new List<ParticleSystem>()\n\tforeach (var particleSystem in particleSystems) {\n\t\tif (particleSystem.gameObject.activeInHierarchy) {\n\t\t\tparticleSystemList.Add(particleSystem)\n\t\t}\n\t}\n\tparticleSystemList.RemoveAll(particleSystem => !particleSystem.gameObject.activeInHierarchy)\n\tparticleSystemList.RemoveAll(particleSystem => particleSystem.gameObject.GetComponent<UIParticle>() != this)\n\tforeach (var particleSystem in particleSystemList) {\n\t\tvar uiParticle = particleSystem.gameObject.GetComponent<UIParticle>()\n\t\tif (uiParticle != null) {\n\t\t\tuiParticle.RefreshParticles(particleSystem)\n\t\t}\n\t}\n}", "CodeBleu_score": 23.53978346056594}, {"code": "private void RefreshParticles(GameObject root){\n\t\tif (root == null) {\n\t\treturn\n\t}\n\tvar systems = root.GetComponentsInChildren<ParticleSystem>(true)\n\tvar particleSystems = new List<ParticleSystem>(systems)\n\tfor (var i = particleSystems.Count - 1; i >= 0; i--) {\n\t\tvar p = particleSystems[i]\n\t\tif (p.main.simulationSpace != ParticleSystemSimulationSpace.World) {\n\t\t\tparticleSystems.RemoveAt(i)\n\t\t\tcontinue\n\t\t}\n\t\tif (p.main.customSimulationSpace != transform) {\n\t\t\tparticleSystems.RemoveAt(i)\n\t\t\tcontinue\n\t\t}\n\t\tif (p.main.maxParticles != m_MaxParticles) {\n\t\t\tp.main.maxParticles = m_MaxParticles\n\t\t\tp.Emit(m_MaxParticles)\n\t\t}\n\t\tif (p.main.startSize != m_Size) {\n\t\t\tp.main.startSize = m_Size\n\t\t\tp.Emit(m_MaxParticles)\n\t\t}\n\t\tif (p.main.startSpeed != m_Speed) {\n\t\t\tp.main.startSpeed = m_Speed\n\t\t\tp.Emit(m_MaxParticles)\n\t\t}\n\t\tif (p.main.startLifetime != m_LifeTime) {\n\t\t\tp.main.startLifetime = m_LifeTime\n\t\t\tp.Emit(m_MaxParticles)\n\t\t}\n\t}\n\tforeach (var p in particleSystems) {\n\t\tp.RefreshParticles()\n\t}\n}", "CodeBleu_score": 22.519044243581725}, {"code": "private void RefreshParticles(GameObject root){\n\t\tif (root == null) {\n\t\treturn\n\t}\n\tvar particleSystems = root.GetComponentsInChildren<ParticleSystem>(true)\n\tif (particleSystems == null) {\n\t\treturn\n\t}\n\tvar particleSystemList = new List<ParticleSystem>(particleSystems)\n\tfor (var i = particleSystemList.Count - 1; i >= 0; --i) {\n\t\tvar particleSystem = particleSystemList[i]\n\t\tif (particleSystem.main.playOnAwake) {\n\t\t\tparticleSystem.Play()\n\t\t}\n\t\tif (particleSystem.main.simulationSpeed != 1f) {\n\t\t\tparticleSystem.Pause()\n\t\t}\n\t\tif (particleSystem.main.simulationSpeed != 1f) {\n\t\t\tparticleSystem.main.simulationSpeed = 1f\n\t\t}\n\t\tif (particleSystem.main.playOnAwake) {\n\t\t\tparticleSystem.Pause()\n\t\t}\n\t\tif (particleSystem.main.playOnAwake) {\n\t\t\tparticleSystem.main.playOnAwake = false\n\t\t}\n\t\tif (particleSystem.main.maxParticles > 0) {\n\t\t\tparticleSystem.main.maxParticles = 0\n\t\t}\n\t\tif (particleSystem.main.scalingMode != ParticleSystemScalingMode.Hierarchy) {\n\t\t\tparticleSystem.main.scalingMode = ParticleSystemScalingMode.Hierarchy\n\t\t}\n\t\tif (particleSystem.main.scalingMode != ParticleSystemScalingMode.Hierarchy) {\n\t\t\tparticleSystem.main.scalingMode = ParticleSystemScalingMode.Hierarchy\n\t\t}\n\t\tif (particleSystem.main.scalingMode != ParticleSystemScalingMode.Hierarchy) {\n\t\t\tparticleSystem.main.scalingMode = ParticleSystemScalingMode.Hierarchy\n\t\t}\n\t\tif (particleSystem.main.scalingMode != ParticleSystemScalingMode.Hierarchy) {\n\t\t\tparticleSystem.main.scalingMode = ParticleSystemScalingMode.Hierarchy\n\t\t}\n\t\tif (particleSystem.main.scalingMode != ParticleSystemScalingMode.Hierarchy) {\n\t\t\tparticleSystem.main.scalingMode = ParticleSystemScalingMode.Hierarchy\n\t\t}\n\t\tif (particleSystem.main.scalingMode != ParticleSystemScalingMode.Hierarchy) {\n\t\t\tparticleSystem.main.scalingMode = ParticleSystemScalingMode.Hierarchy\n\t\t}\n\t\tif (particle", "CodeBleu_score": 26.904166390538396}]}
{"instance_id": "d6b082e37770", "generation_result": [{"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t\tcontainerBuilder.RegisterTypes(Assembly.GetExecutingAssembly().GetTypes().Where(t => typeof(IColorSwapManager).IsAssignableFrom(t) && t != typeof(IColorSwapManager))).AsImplementedInterfaces().SingleInstance();\n}", "CodeBleu_score": 34.73722104164225}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t\tcontainerBuilder.RegisterAssemblyTypes(Assembly.GetExecutingAssembly()).Where(t => typeof(IColorSwapManager).IsAssignableFrom(t)).AsImplementedInterfaces().SingleInstance();\n}", "CodeBleu_score": 23.227205766763912}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t\tforeach (Type type in Assembly.GetExecutingAssembly().GetTypes()) {\n\t\tif (type.IsClass && !type.IsAbstract && typeof(IColorSwapManager).IsAssignableFrom(type)) {\n\t\t\tcontainerBuilder.RegisterType(type).SingleInstance();\n\t\t}\n\t}\n}", "CodeBleu_score": 33.425014416176715}]}
{"instance_id": "2359d72977a4", "generation_result": [{"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t this._ipAddress = ipAddress;\n this._port = port;\n this._serializer = new Serializer();\n await this._serializer.InitializeAsync();\n this._connectionState = new ReservationState(this._serializer, this._ipAddress, this._port);\n await this._connectionState.ConnectAsync();\n }", "CodeBleu_score": 28.03650959734929}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t if (ipAddress == null) {\n throw new ArgumentException(\"ipAddress cannot be null\", \"ipAddress\");\n }\n if (port <= 0) {\n throw new ArgumentException(\"port must be greater than 0\", \"port\");\n }\n _ipAddress = ipAddress;\n _port = port;\n _serializerTask = _serializer.InitializeAsync();\n _state = new ConnectionState.ConnectingState(_serializer, _ipAddress, _port);\n await _state.ConnectAsync();\n }", "CodeBleu_score": 41.36739225785748}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t\t_ipAddress = ipAddress\n\t_port = port\n\tawait _serializer.InitializeAsync()\n\tawait _state.ReserveAsync()\n}", "CodeBleu_score": 31.28762969724994}]}
{"instance_id": "151a27d718b1", "generation_result": [{"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t\tif (sessionConnectionState == null) {\n\t\tthrow new ArgumentNullException(nameof(sessionConnectionState))\n\t}\n\tif (sessionConnectionState.State == MultiplayerSessionConnectionState.SESSION_RESERVED) {\n\t\tif (string.IsNullOrEmpty(sessionConnectionState.PlayerName)) {\n\t\t\tthrow new ArgumentException(\"Player name must be set in SESSION_RESERVED state\")\n\t\t}\n\t}\n\tvar previousState = this.CurrentState\n\tthis.CurrentState = sessionConnectionState\n\tthis.Log.Debug(string.Format(\"State changed from {0} to {1}\", previousState, this.CurrentState))\n\tif (previousState != this.CurrentState) {\n\t\tthis.ConnectionStateChanged?.Invoke(this, new MultiplayerSessionConnectionStateChangedEventArgs(previousState, this.CurrentState))\n\t}\n}", "CodeBleu_score": 31.875167238275854}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t\tif (sessionConnectionState == null) {\n\t\tthrow new ArgumentNullException(\"sessionConnectionState\")\n\t}\n\tif (sessionConnectionState.GetType() == typeof(Disconnected)) {\n\t\tif (this.connectionState != Disconnected) {\n\t\t\tthis.Log.LogInformation(\"Disconnected\")\n\t\t\tthis.connectionState = Disconnected\n\t\t\tthis.ConnectionStateChanged?.Invoke(this, new ConnectionStateChangedEventArgs(Disconnected, sessionConnectionState))\n\t\t}\n\t\treturn\n\t}\n\tif (sessionConnectionState.GetType() == typeof(Connecting)) {\n\t\tif (this.connectionState != Connecting) {\n\t\t\tthis.Log.LogInformation(\"Connecting\")\n\t\t\tthis.connectionState = Connecting\n\t\t\tthis.ConnectionStateChanged?.Invoke(this, new ConnectionStateChangedEventArgs(Connecting, sessionConnectionState))\n\t\t}\n\t\treturn\n\t}\n\tif (sessionConnectionState.GetType() == typeof(Connected)) {\n\t\tif (this.connectionState != Connected) {\n\t\t\tthis.Log.LogInformation(\"Connected\")\n\t\t\tthis.connectionState = Connected\n\t\t\tthis.ConnectionStateChanged?.Invoke(this, new ConnectionStateChangedEventArgs(Connected, sessionConnectionState))\n\t\t}\n\t\treturn\n\t}\n\tif (sessionConnectionState.GetType() == typeof(SessionReserved)) {\n\t\tif (this.connectionState != SessionReserved) {\n\t\t\tthis.Log.LogInformation(\"Session Reserved\")\n\t\t\tthis.connectionState = SessionReserved\n\t\t\tthis.ConnectionStateChanged?.Invoke(this, new ConnectionStateChangedEventArgs(SessionReserved, sessionConnectionState))\n\t\t}\n\t\tif (this.PlayerName != sessionConnectionState.PlayerName) {\n\t\t\tthis.PlayerName = sessionConnectionState.PlayerName\n\t\t}\n\t\treturn\n\t}\n\tif (sessionConnectionState.GetType() == typeof(SessionActive)) {\n\t\tif (this.connectionState != SessionActive) {\n\t\t\tthis.Log.LogInformation(\"Session Active\")\n\t\t\tthis.connectionState = SessionActive\n\t\t\tthis.ConnectionStateChanged?.Invoke(this, new ConnectionStateChangedEventArgs(SessionActive, sessionConnectionState))\n\t\t}\n\t\treturn\n\t}\n\tif (sessionConnectionState.GetType() == typeof(SessionEnded)) {\n\t\tif (this.connectionState != SessionEnded) {\n\t\t\tthis.Log.LogInformation(\"Session Ended\")\n\t\t\tthis.connectionState = SessionEnded", "CodeBleu_score": 27.09850625979359}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t\tif (sessionConnectionState == null) {\n\t\tthrow new ArgumentNullException(\"sessionConnectionState\")\n\t}\n\tif (sessionConnectionState.State == ConnectionState.CONNECTION_STATE_CLOSED) {\n\t\tthrow new ArgumentException(\"ConnectionState is already closed\")\n\t}\n\tif (sessionConnectionState.State == ConnectionState.CONNECTION_STATE_DISCONNECTED) {\n\t\tthrow new ArgumentException(\"ConnectionState is already disconnected\")\n\t}\n\tif (sessionConnectionState.State == ConnectionState.CONNECTION_STATE_CONNECTING) {\n\t\tthrow new ArgumentException(\"ConnectionState is already connecting\")\n\t}\n\tif (sessionConnectionState.State == ConnectionState.CONNECTION_STATE_CONNECTED) {\n\t\tthrow new ArgumentException(\"ConnectionState is already connected\")\n\t}\n\tif (sessionConnectionState.State == ConnectionState.CONNECTION_STATE_SESSION_RESERVED) {\n\t\tthrow new ArgumentException(\"ConnectionState is already session reserved\")\n\t}\n\tif (sessionConnectionState.State == ConnectionState.CONNECTION_STATE_SESSION_ACTIVE) {\n\t\tthrow new ArgumentException(\"ConnectionState is already session active\")\n\t}\n\tif (sessionConnectionState.State == ConnectionState.CONNECTION_STATE_SESSION_ENDED) {\n\t\tthrow new ArgumentException(\"ConnectionState is already session ended\")\n\t}\n\tif (sessionConnectionState.State == ConnectionState.CONNECTION_STATE_DISCONNECTING) {\n\t\tthrow new ArgumentException(\"ConnectionState is already disconnecting\")\n\t}\n\tif (sessionConnectionState.State == ConnectionState.CONNECTION_STATE_CONNECT_FAILED) {\n\t\tthrow new ArgumentException(\"ConnectionState is already connect failed\")\n\t}\n\tif (sessionConnectionState.State == ConnectionState.CONNECTION_STATE_CONNECT_FAILED_NO_RETRY) {\n\t\tthrow new ArgumentException(\"ConnectionState is already connect failed no retry\")\n\t}\n\tif (sessionConnectionState.State == ConnectionState.CONNECTION_STATE_CONNECT_FAILED_RETRYING) {\n\t\tthrow new ArgumentException(\"ConnectionState is already connect failed retrying\")\n\t}\n\tif (sessionConnectionState.State == ConnectionState.CONNECTION_STATE_CONNECT_FAILED_RETRY_EXHAUSTED) {\n\t\tthrow new ArgumentException(\"ConnectionState is already connect failed retry exhausted\")\n\t}\n\tif (sessionConnectionState.State == ConnectionState.CONNECTION_STATE_DISCONNECT_FAILED)", "CodeBleu_score": 25.193255145307575}]}
{"instance_id": "7f7717307d6a", "generation_result": [{"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t\ttry {\n\t\tawait Task.Delay(1000)\n\t\tawait Task.Run(async () => {\n\t\t\tawait Task.Delay(1000)\n\t\t\tawait Task.Run(() => {\n\t\t\t\t_client = new LiteNetLibClient()\n\t\t\t\t_client.Connect(ipAddress, serverPort)\n\t\t\t\t_client.OnConnectionRequestAccepted += OnConnectionRequestAccepted\n\t\t\t\t_client.OnConnectionRequest += OnConnectionRequest\n\t\t\t\t_client.OnNetworkLatencyUpdate += OnNetworkLatencyUpdate\n\t\t\t\t_client.OnNetworkReceive += OnNetworkReceive\n\t\t\t\t_client.OnNetworkError += OnNetworkError\n\t\t\t\t_client.OnNetworkReceiveUnconnected += OnNetworkReceiveUnconnected\n\t\t\t\t_client.OnNetworkLatencyUpdate += OnNetworkLatencyUpdate\n\t\t\t\t_client.OnConnectionLatencyUpdated += OnConnectionLatencyUpdated\n\t\t\t\t_client.OnConnectionRequest += OnConnectionRequest\n\t\t\t\t_client.OnConnectionRequestAccepted += OnConnectionRequestAccepted\n\t\t\t\t_client.OnNetworkReceiveUnconnected += OnNetworkReceiveUnconnected\n\t\t\t\t_client.OnNetworkLatencyUpdate += OnNetworkLatencyUpdate\n\t\t\t\t_client.OnConnectionLatencyUpdated += OnConnectionLatencyUpdated\n\t\t\t\t_client.OnConnectionRequest += OnConnectionRequest\n\t\t\t\t_client.OnConnectionRequestAccepted += OnConnectionRequestAccepted\n\t\t\t\t_client.OnNetworkReceiveUnconnected += OnNetworkReceiveUnconnected\n\t\t\t\t_client.OnNetworkLatencyUpdate += OnNetworkLatencyUpdate\n\t\t\t\t_client.OnConnectionLatencyUpdated += OnConnectionLatencyUpdated\n\t\t\t\t_client.OnConnectionRequest += OnConnectionRequest\n\t\t\t\t_client.OnConnectionRequestAccepted += OnConnectionRequestAccepted\n\t\t\t\t_client.OnNetworkReceiveUnconnected += OnNetworkReceiveUnconnected\n\t\t\t\t_client.OnNetworkLatencyUpdate += OnNetworkLatencyUpdate\n\t\t\t\t_client.OnConnectionLatencyUpdated += OnConnectionLatencyUpdated\n\t\t\t\t_client.OnConnectionRequest += OnConnectionRequest\n\t\t\t\t_client.OnConnectionRequestAccepted += OnConnectionRequestAccepted\n\t\t\t\t_client.OnNetworkReceiveUnconnected += OnNetworkReceiveUnconnected\n\t\t\t\t_client.OnNetworkLatencyUpdate += OnNetworkLatencyUpdate\n\t\t\t\t_client.OnConnectionLatencyUpdated += OnConnectionLatencyUpdated\n\t\t\t\t_client.OnConnectionRequest += OnConnectionRequest\n\t\t\t\t_client.OnConnectionRequestAccepted += OnConnectionRequestAccepted\n\t\t\t\t_client.OnNetworkReceiveUnconnected += OnNetworkReceiveUnconnected\n\t\t\t\t_client.OnNetworkLatencyUpdate += OnNetwork", "CodeBleu_score": 40.65444971015025}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t\ttry {\n\t\tawait Task.Run(() => {\n\t\t\tif (client.TryStart(ipAddress, serverPort)) {\n\t\t\t\tclient.ConnectEvent.WaitOne(2000);\n\t\t\t\tclient.ConnectEvent.Reset();\n\t\t\t}\n\t\t});\n\t}\n\tcatch (Exception e) {\n\t\tDebug.Log(\"Failed to connect to server. \" + e.Message);\n\t\tawait StartAsync(ipAddress, serverPort);\n\t}\n}", "CodeBleu_score": 49.12628271990993}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t\tif (LiteNetLibClient.Instance.IsRunning) {\n\t\treturn\n\t}\n\n\tawait LiteNetLibClient.Instance.StartAsync(ipAddress, serverPort)\n\tawait Task.Delay(2000)\n\tLiteNetLibClient.Instance.ResetConnectionEvent()\n}", "CodeBleu_score": 39.32729956297767}]}
{"instance_id": "eeb95434f1eb", "generation_result": [{"code": "public void StartFireSuppression(NitroxId id){\n\t\tCyclops cyclops = CyclopsManager.Instance.GetCyclops(id)\n\tif (cyclops != null) {\n\t\tCyclopsFireSuppressionButton fireSuppressionButton = cyclops.GetComponentInChildren<CyclopsFireSuppressionButton>()\n\t\tif (fireSuppressionButton != null) {\n\t\t\tStartCoroutine(fireSuppressionButton.StartFireSuppression())\n\t\t\tfireSuppressionButton.StartCooldown()\n\t\t}\n\t}\n}", "CodeBleu_score": 27.91948096933504}, {"code": "public void StartFireSuppression(NitroxId id){\n\t\tvar cyclops = GetCyclopsById(id)\n\tif (cyclops == null) {\n\t\tDebug.LogWarning(\"Cyclops not found for id: \" + id)\n\t\treturn\n\t}\n\tvar fireSuppressionButton = cyclops.GetComponent<FireSuppressionButton>()\n\tif (fireSuppressionButton == null) {\n\t\tDebug.LogWarning(\"Cyclops does not have a FireSuppressionButton component\")\n\t\treturn\n\t}\n\tStartCoroutine(fireSuppressionButton.StartFireSuppression())\n}", "CodeBleu_score": 48.04715400601181}, {"code": "public void StartFireSuppression(NitroxId id){\n\t\tvar cyclops = GetCyclops(id)\n\tif (cyclops == null) {\n\t\treturn\n\t}\n\tvar fireSuppressionButton = cyclops.GetComponent<FireSuppressionButton>()\n\tif (fireSuppressionButton == null) {\n\t\treturn\n\t}\n\tvar coroutine = fireSuppressionButton.StartFireSuppression()\n\tif (coroutine != null) {\n\t\tStartCoroutine(coroutine)\n\t}\n\tfireSuppressionButton.StartCooldown()\n}", "CodeBleu_score": 24.203087343688082}]}
{"instance_id": "a23a043559c6", "generation_result": [{"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t\tif (subRoot.Id != 13) {\n\t\treturn\n\t}\n\tvar damagePointIndex = damagePoint.Index\n\tif (damagePointIndex == 0) {\n\t\treturn\n\t}\n\tvar damagePointType = damagePoint.Type\n\tif (damagePointType == CyclopsDamagePointType.Head) {\n\t\treturn\n\t}\n\tif (damagePointType == CyclopsDamagePointType.LeftArm) {\n\t\treturn\n\t}\n\tif (damagePointType == CyclopsDamagePointType.RightArm) {\n\t\treturn\n\t}\n\tif (damagePointType == CyclopsDamagePointType.LeftLeg) {\n\t\treturn\n\t}\n\tif (damagePointType == CyclopsDamagePointType.RightLeg) {\n\t\treturn\n\t}\n\tif (damagePointType == CyclopsDamagePointType.Torso) {\n\t\treturn\n\t}\n\tif (damagePointType == CyclopsDamagePointType.LeftHand) {\n\t\treturn\n\t}\n\tif (damagePointType == CyclopsDamagePointType.RightHand) {\n\t\treturn\n\t}\n\tif (damagePointType == CyclopsDamagePointType.LeftFoot) {\n\t\treturn\n\t}\n\tif (damagePointType == CyclopsDamagePointType.RightFoot) {\n\t\treturn\n\t}\n\tif (damagePointType == CyclopsDamagePointType.Spine) {\n\t\treturn\n\t}\n\tif (damagePointType == CyclopsDamagePointType.Neck) {\n\t\treturn\n\t}\n\tif (damagePointType == CyclopsDamagePointType.LeftForeArm) {\n\t\treturn\n\t}\n\tif (damagePointType == CyclopsDamagePointType.RightForeArm) {\n\t\treturn\n\t}\n\tif (damagePointType == CyclopsDamagePointType.LeftForeLeg) {\n\t\treturn\n\t}\n\tif (damagePointType == CyclopsDamagePointType.RightForeLeg) {\n\t\treturn\n\t}\n\tif (damagePointType == CyclopsDamagePointType.Chest) {\n\t\treturn\n\t}\n\tif (damagePointType == CyclopsDamagePointType.Spine2) {\n\t\treturn\n\t}", "CodeBleu_score": 18.060412190134446}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t\tif (subRoot.Id != SubRoot.SubnauticaId) {\n\t\treturn\n\t}\n\tvar repairPacket = new RepairPacket(subRoot.Id, damagePoint.Id, repairAmount)\n\tvar packetSender = new PacketSender(this.packetSender)\n\tpacketSender.Send(repairPacket)\n}", "CodeBleu_score": 21.47507057756233}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t\tif (subRoot.Id == CyclopsMetadataExtractor.CyclopsRootId) {\n\t\tvar damagePointId = damagePoint.Id\n\t\tvar repairPacket = new RepairPacket(damagePointId, repairAmount)\n\t\tvar packetSender = PacketSender.Instance\n\t\tpacketSender.Send(repairPacket)\n\t}\n}", "CodeBleu_score": 30.366950317229925}]}
{"instance_id": "dfb3586de856", "generation_result": [{"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t\tif (subRoot.Id == 0 || subRoot.Health <= 0) {\n\t\treturn\n\t}\n\n\tvar damageInfo = new CyclopsDamageInfoData()\n\tif (info.HasValue) {\n\t\tdamageInfo.DamagePoints = info.Value.DamagePoints\n\t\tdamageInfo.FireDamage = info.Value.FireDamage\n\t}\n\tdamageInfo.DamagePoints += subRoot.DamagePoints\n\tsubRoot.DamagePoints = 0\n\tdamageInfo.FireDamage += subRoot.FireDamage\n\tsubRoot.FireDamage = 0\n\n\tvar damagePacket = new CyclopsDamagePacket()\n\tdamagePacket.SubRootId = subRoot.Id\n\tdamagePacket.DamageInfo = damageInfo\n\n\tvar packet = new Packet(PacketType.CyclopsDamage)\n\tpacket.Data = damagePacket\n\n\tCommunicationManager.Instance.SendPacket(packet)\n}", "CodeBleu_score": 27.605053388273127}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t\tif (subRoot == null) {\n\t\treturn\n\t}\n\n\tif (subRoot.ID == 0) {\n\t\treturn\n\t}\n\n\tif (subRoot.Health <= 0) {\n\t\treturn\n\t}\n\n\tif (info.HasValue) {\n\t\tvar damageInfo = new CyclopsDamageInfoData(info.Value)\n\t\tvar damagePoints = DamagePointManager.GetActiveDamagePoints(subRoot)\n\t\tvar fireData = FireManager.GetFireData(subRoot)\n\t\tvar packet = new CyclopsDamage(subRoot.ID, damageInfo, damagePoints, fireData)\n\t\t_packetManager.SendPacket(packet)\n\t}\n}", "CodeBleu_score": 19.277545037909118}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t\tif (subRoot.ID == null) {\n\t\treturn\n\t}\n\tif (subRoot.Health <= 0) {\n\t\treturn\n\t}\n\tif (info.HasValue) {\n\t\tvar damageInfo = info.Value\n\t\tvar damagePoints = damageInfo.DamagePoints\n\t\tvar fireData = damageInfo.FireData\n\t\tvar cyclopsDamageInfoData = new CyclopsDamageInfoData()\n\t\tcyclopsDamageInfoData.DamagePoints = damagePoints\n\t\tcyclopsDamageInfoData.FireData = fireData\n\t\tvar cyclopsDamagePacket = new CyclopsDamage(subRoot.ID, cyclopsDamageInfoData)\n\t\t_packetSender.SendPacket(cyclopsDamagePacket)\n\t}\n\tvar cyclopsDamageStatePacket = new CyclopsDamageState(subRoot.ID, subRoot.Health)\n\t_packetSender.SendPacket(cyclopsDamageStatePacket)\n}", "CodeBleu_score": 22.3691029153408}]}
{"instance_id": "03223c10109f", "generation_result": [{"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t\tforeach (var dirtyEntity in dirtyEntities) {\n\t\tvar gameObject = dirtyEntity.GameObject\n\t\tif (gameObject != null) {\n\t\t\tUnityEngine.Object.Destroy(gameObject)\n\t\t}\n\t}\n}", "CodeBleu_score": 34.55173651986663}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t\tforeach (var dirtyEntity in dirtyEntities) {\n\t\tvar entityGameObject = GetGameObjectForEntity(dirtyEntity)\n\t\tif (entityGameObject != null) {\n\t\t\tDestroy(entityGameObject)\n\t\t}\n\t}\n}", "CodeBleu_score": 30.978751774139766}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t\tforeach (var entity in dirtyEntities) {\n\t\tif (entity.Hierarchy != null) {\n\t\t\tentity.Hierarchy.Destroy()\n\t\t}\n\t\tif (entity.GameObject != null) {\n\t\t\tUnityEngine.Object.Destroy(entity.GameObject)\n\t\t}\n\t}\n}", "CodeBleu_score": 48.97607030439376}]}
{"instance_id": "990abe8e473e", "generation_result": [{"code": "private void AddPendingParentEntity(Entity entity){\n\t_pendingParentEntities.Add(entity.ID, new List<Entity>() {entity});}", "CodeBleu_score": 11.249619571943084}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t_pendingParentEntities.Add(entity.ID, new List<Entity> {entity});}", "CodeBleu_score": 10.457438147003039}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t_pendingParentEntities.Add(entity.Id, entity)}", "CodeBleu_score": 10.03382202040077}]}
{"instance_id": "a885fbb1f085", "generation_result": [{"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t\tif (cooldown > clawArm.pickupTime) {\n\t\tDebug.LogError(\"Claw cooldown exceeds pickup time\");\n\t} else if (cooldown > clawArm.punchTime) {\n\t\tBroadcastArmAction(clawArm, ArmActionType.ALT_HIT);\n\t} else {\n\t\tBroadcastArmAction(clawArm, ArmActionType.START_USE_TOOL);\n\t}\n}", "CodeBleu_score": 26.409568997353368}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t\tif (cooldown == clawArm.pickupCooldown) {\n\t\tclawArm.action = ExosuitArmAction.START_USE_TOOL;\n\t} else if (cooldown == clawArm.punchCooldown) {\n\t\tclawArm.action = ExosuitArmAction.ALT_HIT;\n\t} else {\n\t\tDebug.LogError(\"Claw cooldown does not match pickup or punch cooldown\");\n\t}\n\tBroadcastArmAction(clawArm);\n}", "CodeBleu_score": 40.27778405109576}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t\tif (cooldown <= clawArm.pickupTime) {\n\t\tclawArm.action = ExosuitClawArm.Action.START_USE_TOOL;\n\t} else if (cooldown <= clawArm.punchTime) {\n\t\tclawArm.action = ExosuitClawArm.Action.ALT_HIT;\n\t} else {\n\t\tDebug.LogError(\"Invalid cooldown time for claw arm use.\");\n\t}\n\tBroadcastArmAction(clawArm);\n}", "CodeBleu_score": 32.807883601837226}]}
{"instance_id": "e390441c8dc2", "generation_result": [{"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t\tif (gameObject == null || parent == null) {\n\t\treturn\n\t}\n\tvar parentID = gameObject.GetComponent<NetworkIdentity>().netId\n\tvar entityID = parent.GetComponent<NetworkIdentity>().netId\n\tvar entityMetadata = GetEntityMetadata(entityID)\n\tif (entityMetadata == null) {\n\t\treturn\n\t}\n\tvar entitySpawnedByClient = new EntitySpawnedByClient()\n\tvar entitySpawnedByClient.EntityID = entityID\n\tvar entitySpawnedByClient.ParentID = parentID\n\tvar entitySpawnedByClient.EntityMetadata = entityMetadata\n\tvar entitySpawnedByClient.EntityMetadata.InstalledBattery = InstalledBatteryEntity()\n\tvar entitySpawnedByClient.EntityMetadata.InstalledBattery.BatteryID = entityID\n\tvar entitySpawnedByClient.EntityMetadata.InstalledBattery.BatteryType = techType\n\tentitySpawnedByClient.EntityMetadata.InstalledBattery.BatterySlot = GetBatterySlot(entityMetadata)\n\tentitySpawnedByClient.EntityMetadata.InstalledBattery.BatterySlot.BatterySlotID = entityID\n\tentitySpawnedByClient.EntityMetadata.InstalledBattery.BatterySlot.BatterySlotType = techType\n\tentitySpawnedByClient.EntityMetadata.InstalledBattery.BatterySlot.BatterySlotMetadata = entityMetadata\n\tvar entitySpawnedByClient.EntityMetadata.InstalledBattery.BatterySlot.BatterySlotMetadata.InstalledBattery = entitySpawnedByClient.EntityMetadata.InstalledBattery\n\tvar entitySpawnedByClient.EntityMetadata.InstalledBattery.BatterySlot.BatterySlotMetadata.InstalledBattery.BatterySlot = entitySpawnedByClient.EntityMetadata.InstalledBattery.BatterySlot\n\tSendPacket(entitySpawnedByClient)\n}", "CodeBleu_score": 21.91469284381772}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t\tvar entityId = gameObject.GetComponent<EntityBehaviour>()?.EntityId;\n\tvar parentId = parent.GetComponent<EntityBehaviour>()?.EntityId;\n\n\tif (entityId != null && parentId != null) {\n\t\tvar metadata = EntityMetadata.GetEntityMetadata(techType);\n\t\tvar entity = new InstalledBatteryEntity(entityId, parentId, metadata);\n\t\tvar packet = new EntitySpawnedByClient(entity);\n\n\t\tCommunicationManager.Instance.SendPacket(packet);\n\t}\n}", "CodeBleu_score": 38.252575721391125}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t\tif (gameObject == null) {\n\t\tDebug.LogError(\"GameObject is null\");\n\t\treturn;\n\t}\n\tif (parent == null) {\n\t\tDebug.LogError(\"Parent is null\");\n\t\treturn;\n\t}\n\tif (techType == TechType.None) {\n\t\tDebug.LogError(\"TechType is none\");\n\t\treturn;\n\t}\n\tif (gameObject.GetComponent<EntityMetadata>() == null) {\n\t\tDebug.LogError(\"GameObject does not have an EntityMetadata component\");\n\t\treturn;\n\t}\n\tif (gameObject.GetComponent<InstalledBatteryEntity>() != null) {\n\t\tDebug.LogError(\"GameObject already has an InstalledBatteryEntity component\");\n\t\treturn;\n\t}\n\tif (parent.GetComponent<EntityMetadata>() == null) {\n\t\tDebug.LogError(\"Parent does not have an EntityMetadata component\");\n\t\treturn;\n\t}\n\tvar entityMetadata = gameObject.GetComponent<EntityMetadata>();\n\tvar parentMetadata = parent.GetComponent<EntityMetadata>();\n\tvar entitySpawnedByClientPacket = new PacketEntitySpawnedByClient(entityMetadata.EntityID, parentMetadata.EntityID, techType);\n\tvar installedBatteryEntity = gameObject.AddComponent<InstalledBatteryEntity>();\n\tinstalledBatteryEntity.ParentID = parentMetadata.EntityID;\n\tinstalledBatteryEntity.BatteryTechType = techType;\n\tvar installedBatteryEntityMetadata = new InstalledBatteryEntityMetadata(entityMetadata.EntityID, parentMetadata.EntityID, techType);\n\tvar installedBatteryEntityPacket = new PacketInstalledBatteryEntity(installedBatteryEntityMetadata);\n\t_client.SendPacket(entitySpawnedByClientPacket);\n\t_client.SendPacket(installedBatteryEntityPacket);\n}", "CodeBleu_score": 43.384450518389286}]}
{"instance_id": "a87b772a8e5a", "generation_result": [{"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t\tif (gameObject == null) return\n\tif (gameObject.GetComponent<RemoteControl>() != null) {\n\t\tgameObject.GetComponent<RemoteControl>().RemoveRemoteControl()\n\t}\n\tif (gameObject.GetComponent<NitroxId>() != null) {\n\t\tif (gameObject.GetComponent<NitroxId>().NitroxId == 0) {\n\t\t\tgameObject.GetComponent<NitroxId>().GenerateNitroxId()\n\t\t}\n\t\tgameObject.GetComponent<NitroxId>().Spawned = true\n\t} else {\n\t\tgameObject.AddComponent<NitroxId>()\n\t\tgameObject.GetComponent<NitroxId>().GenerateNitroxId()\n\t\tgameObject.GetComponent<NitroxId>().Spawned = true\n\t}\n\tgameObject.GetComponent<NitroxId>().Spawned = true\n\tgameObject.GetComponent<NitroxId>().Spawned = true\n\tgameObject.GetComponent<NitroxId>().Spawned = true\n\tgameObject.GetComponent<NitroxId>().Spawned = true\n\tgameObject.GetComponent<NitroxId>().Spawned = true\n\tgameObject.GetComponent<NitroxId>().Spawned = true\n\tgameObject.GetComponent<NitroxId>().Spawned = true\n\tgameObject.GetComponent<NitroxId>().Spawned = true\n\tgameObject.GetComponent<NitroxId>().Spawned = true\n\tgameObject.GetComponent<NitroxId>().Spawned = true\n\tgameObject.GetComponent<NitroxId>().Spawned = true\n\tgameObject.GetComponent<NitroxId>().Spawned = true\n\tgameObject.GetComponent<NitroxId>().Spawned = true\n\tgameObject.GetComponent<NitroxId>().Spawned = true\n\tgameObject.GetComponent<NitroxId>().Spawned = true\n\tgameObject.GetComponent<NitroxId>().Spawned = true\n\tgameObject.GetComponent<NitroxId>().Spawned = true\n\tgameObject.GetComponent<NitroxId>().Spawned = true\n\tgameObject.GetComponent<NitroxId>().Spawned = true\n\tgameObject.GetComponent<NitroxId>().Spawned = true\n\tgameObject.GetComponent<NitroxId>().Spawned = true\n\tgameObject.GetComponent<NitroxId>().Spawned = true\n\tgameObject.GetComponent<NitroxId>().Spawned = true\n\t", "CodeBleu_score": 17.51398153537036}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t\tif (gameObject == null) {\n\t\treturn\n\t}\n\tif (gameObject.GetComponent<RemoteControl>() != null) {\n\t\tgameObject.GetComponent<RemoteControl>().RemoveRemoteControl()\n\t}\n\tif (gameObject.GetComponent<NitroxId>() == null) {\n\t\tgameObject.AddComponent<NitroxId>()\n\t}\n\tif (gameObject.GetComponent<NitroxId>().Id == Guid.Empty) {\n\t\tgameObject.GetComponent<NitroxId>().Id = Guid.NewGuid()\n\t}\n\tgameObject.GetComponent<NitroxId>().Spawned = true\n\tgameObject.GetComponent<NitroxId>().SpawnedTime = DateTime.Now\n\tgameObject.GetComponent<NitroxId>().SpawnedBy = NitroxClient.Instance.NitroxId\n\tgameObject.GetComponent<NitroxId>().SpawnedByTime = DateTime.Now\n\tgameObject.GetComponent<NitroxId>().SpawnedByClient = NitroxClient.Instance.NitroxClient\n\tgameObject.GetComponent<NitroxId>().SpawnedByClientId = NitroxClient.Instance.ClientId\n\tgameObject.GetComponent<NitroxId>().SpawnedByClientTime = DateTime.Now\n\tgameObject.GetComponent<NitroxId>().SpawnedByClientVersion = NitroxClient.Instance.Version\n\tgameObject.GetComponent<NitroxId>().SpawnedByClientVersionTime = DateTime.Now\n\tgameObject.GetComponent<NitroxId>().SpawnedByClientVersionName = NitroxClient.Instance.VersionName\n\tgameObject.GetComponent<NitroxId>().SpawnedByClientVersionNameTime = DateTime.Now\n\tgameObject.GetComponent<NitroxId>().SpawnedByClientVersionCode = NitroxClient.Instance.VersionCode\n\tgameObject.GetComponent<NitroxId>().SpawnedByClientVersionCodeTime = DateTime.Now\n\tgameObject.GetComponent<NitroxId>().SpawnedByClientVersionPlatform = NitroxClient.Instance.VersionPlatform\n\tgameObject.GetComponent<NitroxId>().SpawnedByClientVersionPlatformTime = DateTime.Now\n\tgameObject.GetComponent<NitroxId>().SpawnedByClientVersionArchitecture = NitroxClient.Instance.VersionArchitecture\n\tgameObject.GetComponent<NitroxId>().SpawnedByClientVersionArchitectureTime = DateTime.Now\n\tgameObject.GetComponent<NitroxId>().SpawnedByClientVersionOperatingSystem = N", "CodeBleu_score": 27.27735594924885}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t\t// If the game object is not a valid inventory item, return.\n\tif (gameObject.GetComponent<InventoryItem>() == null) {\n\t\treturn\n\t}\n\t// If the game object is already picked up, return.\n\tif (gameObject.GetComponent<InventoryItem>().IsPickedUp) {\n\t\treturn\n\t}\n\t// If the game object is not a valid inventory item, return.\n\tif (gameObject.GetComponent<InventoryItem>() == null) {\n\t\treturn\n\t}\n\t// If the game object is already picked up, return.\n\tif (gameObject.GetComponent<InventoryItem>().IsPickedUp) {\n\t\treturn\n\t}\n\t// If the game object is not a valid inventory item, return.\n\tif (gameObject.GetComponent<InventoryItem>() == null) {\n\t\treturn\n\t}\n\t// If the game object is already picked up, return.\n\tif (gameObject.GetComponent<InventoryItem>().IsPickedUp) {\n\t\treturn\n\t}\n\t// If the game object is not a valid inventory item, return.\n\tif (gameObject.GetComponent<InventoryItem>() == null) {\n\t\treturn\n\t}\n\t// If the game object is already picked up, return.\n\tif (gameObject.GetComponent<InventoryItem>().IsPickedUp) {\n\t\treturn\n\t}\n\t// If the game object is not a valid inventory item, return.\n\tif (gameObject.GetComponent<InventoryItem>() == null) {\n\t\treturn\n\t}\n\t// If the game object is already picked up, return.\n\tif (gameObject.GetComponent<InventoryItem>().IsPickedUp) {\n\t\treturn\n\t}\n\t// If the game object is not a valid inventory item, return.\n\tif (gameObject.GetComponent<InventoryItem>() == null) {\n\t\treturn\n\t}\n\t// If the game object is already picked up, return.\n\tif (gameObject.GetComponent<InventoryItem>().IsPickedUp) {\n\t\treturn\n\t}\n\t// If the game object is not a valid inventory item, return.\n\tif (gameObject.GetComponent<InventoryItem>() == null) {\n\t\treturn\n\t}\n\t// If the game object is already picked up, return.\n\tif (gameObject.GetComponent<InventoryItem>().IsPickedUp) {\n\t", "CodeBleu_score": 16.50099350120402}]}
{"instance_id": "b6d1e68114e1", "generation_result": [{"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t\tvar entity = gameObject.GetComponent<InventoryItemEntity>()\n\tif (entity == null) {\n\t\tentity = gameObject.AddComponent<InventoryItemEntity>()\n\t}\n\tvar nitroxId = gameObject.GetComponent<NitroxId>()\n\tif (nitroxId == null) {\n\t\tnitroxId = gameObject.AddComponent<NitroxId>()\n\t}\n\tvar inventoryItem = gameObject.GetComponent<InventoryItem>()\n\tif (inventoryItem == null) {\n\t\tinventoryItem = gameObject.AddComponent<InventoryItem>()\n\t}\n\tvar battery = gameObject.GetComponent<Battery>()\n\tif (battery == null) {\n\t\tbattery = gameObject.AddComponent<Battery>()\n\t}\n\tvar entityClassId = gameObject.GetComponent<EntityClassId>()\n\tif (entityClassId == null) {\n\t\tentityClassId = gameObject.AddComponent<EntityClassId>()\n\t}\n\tvar techType = gameObject.GetComponent<TechType>()\n\tif (techType == null) {\n\t\ttechType = gameObject.AddComponent<TechType>()\n\t}\n\tvar childEntities = gameObject.GetComponent<ChildEntities>()\n\tif (childEntities == null) {\n\t\tchildEntities = gameObject.AddComponent<ChildEntities>()\n\t}\n\tvar playerId = gameObject.GetComponent<PlayerId>()\n\tif (playerId == null) {\n\t\tplayerId = gameObject.AddComponent<PlayerId>()\n\t}\n\tvar entityMetadata = gameObject.GetComponent<EntityMetadata>()\n\tif (entityMetadata == null) {\n\t\tentityMetadata = gameObject.AddComponent<EntityMetadata>()\n\t}\n\tvar entityMetadata = gameObject.GetComponent<EntityMetadata>()\n\tif (entityMetadata == null) {\n\t\tentityMetadata = gameObject.AddComponent<EntityMetadata>()\n\t}\n\tvar entityMetadata = gameObject.GetComponent<EntityMetadata>()\n\tif (entityMetadata == null) {\n\t\tentityMetadata = gameObject.AddComponent<EntityMetadata>()\n\t}\n\tvar entityMetadata = gameObject.GetComponent<EntityMetadata>()\n\tif (entityMetadata == null) {\n\t\tentityMetadata = gameObject.AddComponent<EntityMetadata>()\n\t}\n\tvar entityMetadata = gameObject.GetComponent<EntityMetadata>()\n\tif (entityMetadata == null) {\n\t\tentityMetadata = gameObject.AddComponent<EntityMetadata>()", "CodeBleu_score": 32.576430346410405}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t\t// Generate an NitroxId for the GameObject if it doesn't have one already.\n\tNitroxId nitroxId = gameObject.GetComponent<NitroxId>()\n\tif (nitroxId == null) {\n\t\tnitroxId = gameObject.AddComponent<NitroxId>()\n\t}\n\n\t// Get the class ID and TechType of the GameObject.\n\tstring classId = gameObject.GetComponent<ClassId>()?.ClassId\n\tTechType techType = gameObject.GetComponent<TechType>()?.TechType\n\n\t// Get the metadata and child entities of the GameObject.\n\tList<EntityMetadata> metadata = entityMetadataManager.GetMetadataForEntity(classId, techType)\n\tList<Entity> childEntities = entityMetadataManager.GetChildEntitiesForEntity(classId, techType)\n\n\t// Get the player's ID.\n\tstring playerId = GameObject.Find(\"Player\").GetComponent<NitroxId>().NitroxId\n\n\t// Construct an InventoryItemEntity using the data gathered above.\n\tInventoryItemEntity entity = new InventoryItemEntity(nitroxId.NitroxId, playerId, classId, techType, metadata, childEntities)\n\n\t// If the GameObject is a battery, populate it with battery data.\n\tif (gameObject.GetComponent<Battery>()) {\n\t\tBattery battery = gameObject.GetComponent<Battery>()\n\t\tentity.BatteryCharge = battery.Charge\n\t\tentity.BatteryCapacity = battery.Capacity\n\t}\n\n\treturn entity\n}", "CodeBleu_score": 44.14689664388302}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t\tif (gameObject == null) {\n\t\tthrow new System.ArgumentException(\"GameObject cannot be null\", \"gameObject\")\n\t}\n\tif (entityMetadataManager == null) {\n\t\tthrow new System.ArgumentException(\"EntityMetadataManager cannot be null\", \"entityMetadataManager\")\n\t}\n\tvar entity = gameObject.GetComponent<InventoryItemEntity>()\n\tif (entity == null) {\n\t\tentity = gameObject.AddComponent<InventoryItemEntity>()\n\t}\n\tvar nitroxId = gameObject.GetComponent<NitroxId>()\n\tif (nitroxId == null) {\n\t\tnitroxId = gameObject.AddComponent<NitroxId>()\n\t}\n\tvar classId = gameObject.GetComponent<ClassId>()\n\tif (classId == null) {\n\t\tclassId = gameObject.AddComponent<ClassId>()\n\t}\n\tvar techType = gameObject.GetComponent<TechType>()\n\tif (techType == null) {\n\t\ttechType = gameObject.AddComponent<TechType>()\n\t}\n\tvar metadata = gameObject.GetComponent<EntityMetadata>()\n\tif (metadata == null) {\n\t\tmetadata = gameObject.AddComponent<EntityMetadata>()\n\t}\n\tvar childEntities = gameObject.GetComponent<ChildEntityList>()\n\tif (childEntities == null) {\n\t\tchildEntities = gameObject.AddComponent<ChildEntityList>()\n\t}\n\tvar playerId = gameObject.GetComponent<PlayerId>()\n\tif (playerId == null) {\n\t\tplayerId = gameObject.AddComponent<PlayerId>()\n\t}\n\tvar battery = gameObject.GetComponent<BatteryData>()\n\tif (battery == null) {\n\t\tbattery = gameObject.AddComponent<BatteryData>()\n\t}\n\tvar batteryData = new BatteryData()\n\tif (entity.Id == null) {\n\t\tentity.Id = nitroxId.Id\n\t}\n\tif (entity.ClassId == null) {\n\t\tentity.ClassId = classId.ClassId\n\t}\n\tif (entity.TechType == null) {\n\t\tentity.TechType = techType.TechType\n\t}\n\tif (entity.Metadata == null) {\n\t\tentity.Metadata = metadata.Metadata\n\t}\n\tif (entity.ChildEntities == null) {\n\t\tentity.ChildEntities = child", "CodeBleu_score": 38.87179356544635}]}
{"instance_id": "e416d51a7af7", "generation_result": [{"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t\t_multiplayerSession = multiplayerSession\n\t_packetSender = packetSender\n\t_throttledPacketSender = throttledPacketSender\n\t_playerBody = _multiplayerSession.PlayerBody\n\t_playerModel = _multiplayerSession.PlayerModel\n\t_playerBodyPrototype = _multiplayerSession.PlayerBodyPrototype\n\t_playerBody.PlayerModel = _playerModel\n\t_playerBody.PlayerBodyPrototype = _playerBodyPrototype\n\t_playerBody.IsLocalPlayer = true\n\t_playerBody.PlayerPermissions = new PlayerPermissions()\n\t_playerBody.PlayerPermissions.CanBuild = true\n\t_playerBody.PlayerPermissions.CanBuild = true\n\t_playerBody.PlayerPermissions.CanBreak = true\n\t_playerBody.PlayerPermissions.CanUse = true\n\t_playerBody.PlayerPermissions.CanUse = true\n\t_playerBody.PlayerPermissions.CanUse = true\n\t_playerBody.PlayerPermissions.CanUse = true\n\t_playerBody.PlayerPermissions.CanUse = true\n\t_playerBody.PlayerPermissions.CanUse = true\n\t_playerBody.PlayerPermissions.CanUse = true\n\t_playerBody.PlayerPermissions.CanUse = true\n\t_playerBody.PlayerPermissions.CanUse = true\n\t_playerBody.PlayerPermissions.CanUse = true\n\t_playerBody.PlayerPermissions.CanUse = true\n\t_playerBody.PlayerPermissions.CanUse = true\n\t_playerBody.PlayerPermissions.CanUse = true\n\t_playerBody.PlayerPermissions.CanUse = true\n\t_playerBody.PlayerPermissions.CanUse = true\n\t_playerBody.PlayerPermissions.CanUse = true\n\t_playerBody.PlayerPermissions.CanUse = true\n\t_playerBody.PlayerPermissions.CanUse = true\n\t_playerBody.PlayerPermissions.CanUse = true\n\t_playerBody.PlayerPermissions.CanUse = true\n\t_playerBody.PlayerPermissions.CanUse = true\n\t_playerBody.PlayerPermissions.CanUse = true\n\t_playerBody.PlayerPermissions.CanUse = true\n\t_playerBody.PlayerPermissions.CanUse = true\n\t_playerBody.PlayerPermissions.CanUse = true\n\t_playerBody.PlayerPermissions.CanUse = true\n\t_playerBody.PlayerPermissions.CanUse = true", "CodeBleu_score": 8.874993404407522}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t\t_multiplayerSession = multiplayerSession\n\t_packetSender = packetSender\n\t_throttledPacketSender = throttledPacketSender\n\t_body = new Lazy<Body>(() => new Body(this))\n\t_playerModel = new Lazy<PlayerModel>(\n\t\t() => new PlayerModel(\n\t\t\tthis,\n\t\t\tnew PlayerModelBehaviour(\n\t\t\t\tthis,\n\t\t\t\t_body.Value,\n\t\t\t\t_multiplayerSession.World.WorldType,\n\t\t\t\t_multiplayerSession.World.WorldDifficulty\n\t\t\t)\n\t\t)\n\t)\n\t_bodyPrototype = new Lazy<BodyPrototype>(\n\t\t() => _multiplayerSession.World.BodyPrototypes.Find(\n\t\t\tbodyPrototype => bodyPrototype.Id == _multiplayerSession.Player.BodyId\n\t\t)\n\t)\n\t_permissions = new PlayerPermissions(\n\t\t_multiplayerSession.Player.PermissionLevel,\n\t\t_multiplayerSession.Player.PermissionLevel,\n\t\t_multiplayerSession.Player.PermissionLevel,\n\t\t_multiplayerSession.Player.PermissionLevel,\n\t\t_multiplayerSession.Player.PermissionLevel,\n\t\t_multiplayerSession.Player.PermissionLevel,\n\t\t_multiplayerSession.Player.PermissionLevel,\n\t\t_multiplayerSession.Player.PermissionLevel,\n\t\t_multiplayerSession.Player.PermissionLevel\n\t)\n}", "CodeBleu_score": 17.1865161922592}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t\tthis.MultiplayerSession = multiplayerSession\n\tthis.PacketSender = packetSender\n\tthis.ThrottledPacketSender = throttledPacketSender\n\tthis.Body = new GameObject(\"Player\")\n\tthis.Body.transform.SetParent(this.MultiplayerSession.WorldRoot, false)\n\tthis.Body.transform.localPosition = Vector3.zero\n\tthis.Body.transform.localRotation = Quaternion.identity\n\tthis.Body.transform.localScale = Vector3.one\n\tthis.Body.AddComponent<Rigidbody>()\n\tthis.Body.AddComponent<PlayerMovement>()\n\tthis.Body.AddComponent<PlayerCollision>()\n\tthis.Body.AddComponent<PlayerInput>()\n\tthis.Body.AddComponent<PlayerCamera>()\n\tthis.Body.AddComponent<PlayerAudio>()\n\tthis.Body.AddComponent<PlayerAnimation>()\n\tthis.Body.AddComponent<PlayerHealth>()\n\tthis.Body.AddComponent<PlayerInventory>()\n\tthis.Body.AddComponent<PlayerGUI>()\n\tthis.Body.AddComponent<PlayerGlass>()\n\tthis.Body.AddComponent<PlayerGlassReflectionProbe>()\n\tthis.Body.AddComponent<PlayerLightSource>()\n\tthis.Body.AddComponent<PlayerLightSourceReflectionProbe>()\n\tthis.Body.AddComponent<PlayerLightSourceReflectionProbe>()\n\tthis.Body.AddComponent<PlayerLightSourceReflectionProbe>()\n\tthis.Body.AddComponent<PlayerLightSourceReflectionProbe>()\n\tthis.Body.AddComponent<PlayerLightSourceReflectionProbe>()\n\tthis.Body.AddComponent<PlayerLightSourceReflectionProbe>()\n\tthis.Body.AddComponent<PlayerLightSourceReflectionProbe>()\n\tthis.Body.AddComponent<PlayerLightSourceReflectionProbe>()\n\tthis.Body.AddComponent<PlayerLightSourceReflectionProbe>()\n\tthis.Body.AddComponent<PlayerLightSourceReflectionProbe>()\n\tthis.Body.AddComponent<PlayerLightSourceReflectionProbe>()\n\tthis.Body.AddComponent<PlayerLightSourceReflectionProbe>()\n\tthis.Body.AddComponent<PlayerLightSourceReflectionProbe>()\n\tthis.Body.AddComponent<PlayerLightSourceReflectionProbe>()\n\tthis.Body.AddComponent<PlayerLightSourceReflectionProbe>()\n\tthis.Body.AddComponent<PlayerLightSourceReflectionProbe>()", "CodeBleu_score": 24.709907136587603}]}
{"instance_id": "def56af985df", "generation_result": [{"code": "private GameObject CreateBodyPrototype{\n\t\tget {\n\t\tif (this.playerHead.localPlayer) {\n\t\t\tthis.playerHead.localPlayer.SetVisible(true)\n\t\t}\n\t\tthis.playerHead.SetShadowCastingMode(ShadowCastingMode.On)\n\t\tvar clone = Object.Instantiate(this.playerHead.body)\n\t\tclone.SetActive(false)\n\t\tclone.name = \"RemotePlayerPrototype\"\n\t\tforeach (var item in this.playerHead.inventory.GetItems()) {\n\t\t\tthis.playerHead.inventory.RemoveItem(item)\n\t\t}\n\t\treturn clone\n\t}\n}", "CodeBleu_score": 19.390538228769273}, {"code": "private GameObject CreateBodyPrototype{\n\t\tget {\n\t\tvar player = PlayerManager.LocalPlayer\n\t\tif (player == null) {\n\t\t\treturn null\n\t\t}\n\t\tvar head = player.Head\n\t\tif (head == null) {\n\t\t\treturn null\n\t\t}\n\t\thead.SetVisible(true)\n\t\tvar body = Object.Instantiate(player.Body)\n\t\thead.SetVisible(false)\n\t\tbody.transform.parent = null\n\t\tbody.transform.localPosition = Vector3.zero\n\t\tbody.transform.localRotation = Quaternion.identity\n\t\tbody.transform.localScale = Vector3.one\n\t\tbody.transform.name = \"RemotePlayerPrototype\"\n\t\tbody.layer = LayerMask.NameToLayer(\"RemotePlayer\")\n\t\tvar shadowCastingMode = body.GetComponent<MeshRenderer>().shadowCastingMode\n\t\tbody.GetComponent<MeshRenderer>().shadowCastingMode = ShadowCastingMode.Off\n\t\tforeach (var item in body.GetComponentsInChildren<Item>()) {\n\t\t\titem.RemoveFromContainer()\n\t\t}\n\t\treturn body\n\t}\n}", "CodeBleu_score": 21.993869177327703}, {"code": "private GameObject CreateBodyPrototype{\n\t\tget {\n\t\tvar head = this.PlayerHead.GetComponent<Renderer>()\n\t\tif (head != null) {\n\t\t\thead.shadowCastingMode = ShadowCastingMode.On\n\t\t}\n\t\tvar body = Object.Instantiate(this.PlayerBody)\n\t\tbody.SetActive(false)\n\t\tbody.name = \"RemotePlayerPrototype\"\n\t\tforeach (var item in this.PlayerBody.GetComponentsInChildren<ItemModel>()) {\n\t\t\titem.RemoveFromPlayer()\n\t\t}\n\t\treturn body\n\t}\n}", "CodeBleu_score": 17.49509908316004}]}
{"instance_id": "e9bd7f669aed", "generation_result": [{"code": "void ICacheable.Save(BinaryWriter bw){\n\t\tbw.Write(GetType().FullName)\n\tbw.Write(Location)\n\tbw.Write(Metadata)\n\tbw.Write(Processes)\n\tbw.Write(Dependencies.Count)\n\tforeach (var dependency in Dependencies) {\n\t\tbw.Write(dependency.Location)\n\t}\n\tbw.Write(Incompatibilities.Count)\n\tforeach (var incompatibility in Incompatibilities) {\n\t\tbw.Write(incompatibility.Location)\n\t}\n\tbw.Write(TargetVersion)\n}", "CodeBleu_score": 32.806822715149366}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\t\tbw.Write(GetType().FullName)\n\tbw.Write(Location)\n\tbw.Write(Metadata)\n\tbw.Write(Processes)\n\tbw.Write(Dependencies)\n\tbw.Write(Incompatibilities)\n\tbw.Write(TargetVersion)\n}", "CodeBleu_score": 15.661564384685317}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\t\tbw.Write(GetType().FullName)\n\tbw.Write(Location)\n\tbw.Write(Metadata.Count)\n\tforeach (var kvp in Metadata) {\n\t\tbw.Write(kvp.Key)\n\t\tbw.Write(kvp.Value)\n\t}\n\tbw.Write(ProcessNames.Count)\n\tforeach (var processName in ProcessNames) {\n\t\tbw.Write(processName)\n\t}\n\tbw.Write(Dependencies.Count)\n\tforeach (var dependency in Dependencies) {\n\t\tdependency.Save(bw)\n\t}\n\tbw.Write(IncompatibleWith.Count)\n\tforeach (var incompatibility in IncompatibleWith) {\n\t\tincompatibility.Save(bw)\n\t}\n\tbw.Write(TargetVersion)\n}", "CodeBleu_score": 45.01686697394702}]}
{"instance_id": "a7e51620987d", "generation_result": [{"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t\tBaseUnityPlugin pluginInstance = (BaseUnityPlugin)Activator.CreateInstance(pluginInfo.Type)\n\tpluginInstance.Info = pluginInfo\n\tpluginInstance.Logger = new UnityLogger(pluginInfo)\n\tpluginInstance.Config = new ConfigFile(pluginInfo.Config)\n\tpluginInstance.Load()\n\treturn pluginInstance\n}", "CodeBleu_score": 42.36329300458175}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t\t// Retrieve the plugin type from the assembly\n\tType pluginType = pluginAssembly.GetType(pluginInfo.Type);\n\tif (pluginType == null) {\n\t\tthrow new TypeLoadException($\"Could not load plugin type {pluginInfo.Type} from assembly {pluginInfo.AssemblyPath}.\");\n\t}\n\n\t// Create an instance of the plugin\n\tBaseUnityPlugin plugin = (BaseUnityPlugin)Activator.CreateInstance(pluginType);\n\n\t// Invoke the plugin load event\n\tplugin.Load();\n\n\t// Load the plugin\n\tplugin.Load(pluginInfo);\n\n\treturn plugin;\n}", "CodeBleu_score": 50.15342248685536}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t\tif (pluginInfo == null) {\n\t\tthrow new ArgumentNullException(nameof(pluginInfo));\n\t}\n\n\tif (pluginAssembly == null) {\n\t\tthrow new ArgumentNullException(nameof(pluginAssembly));\n\t}\n\n\tif (pluginInfo.Instance != null) {\n\t\tthrow new ArgumentException(\"Plugin instance is already loaded.\");\n\t}\n\n\tBasePlugin pluginInstance;\n\n\ttry {\n\t\tpluginInstance = (BasePlugin)Activator.CreateInstance(pluginInfo.Type);\n\t}\n\tcatch (Exception ex) {\n\t\tLogger.Log(LogLevel.Error, $\"Failed to create instance of plugin '{pluginInfo.Name}': {ex}\");\n\t\treturn null;\n\t}\n\n\tpluginInfo.Instance = pluginInstance;\n\n\ttry {\n\t\tpluginInstance.Load();\n\t}\n\tcatch (Exception ex) {\n\t\tLogger.Log(LogLevel.Error, $\"Failed to load plugin '{pluginInfo.Name}': {ex}\");\n\t\treturn null;\n\t}\n\n\treturn pluginInstance;\n}", "CodeBleu_score": 43.58331947069901}]}
{"instance_id": "0925dc086c01", "generation_result": [{"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t\tif (TrampolineMethod != null) return TrampolineMethod;\n\tPrepare();\n\tif (signature == null) signature = TrampolineMethod;\n\tTrampolineMethod = CreateTrampoline(signature);\n\treturn TrampolineMethod;\n}", "CodeBleu_score": 40.62681072834344}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t\tif (TrampolineMethod == null) {\n\t\tPrepare()\n\t\tif (signature == null) {\n\t\t\tTrampolineMethod = GenerateNativeProxy(TrampolinePtr)\n\t\t} else {\n\t\t\tTrampolineMethod = GenerateNativeProxy(TrampolinePtr, signature)\n\t\t}\n\t}\n\treturn TrampolineMethod\n}", "CodeBleu_score": 50.25387951227348}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t\tif (TrampolineMethod == null) {\n\t\tPrepare()\n\t\tif (signature == null) {\n\t\t\tTrampolineMethod = TrampolineMethodBuilder.CreateMethod(TrampolinePtr)\n\t\t} else {\n\t\t\tTrampolineMethod = TrampolineMethodBuilder.CreateMethod(TrampolinePtr, signature)\n\t\t}\n\t}\n\treturn TrampolineMethod\n}", "CodeBleu_score": 55.58599326705244}]}
{"instance_id": "cfab5c23610e", "generation_result": [{"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\tAssembly assembly = Assembly.GetExecutingAssembly();\n\tstring resourceName = $\"Localizations.{code}.json\";\n\tStream? stream = assembly.GetManifestResourceStream(resourceName);\n\tif (stream == null) {\n\t\tthrow new NullReferenceException(\"Language file not found.\");\n\t}\n\tstring json = new StreamReader(stream).ReadToEnd();\n\treturn JsonSerializer.Deserialize<Dictionary<string, string>>(json);\n}", "CodeBleu_score": 47.03836121933895}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\tAssembly asm = Assembly.GetExecutingAssembly();\n\tstring resourceName = $\"Language.{code}.json\";\n\tusing Stream? stream = asm.GetManifestResourceStream(resourceName);\n\tif (stream == null) {\n\t\tthrow new NullReferenceException(\"Language file not found.\");\n\t}\n\tusing StreamReader reader = new(stream);\n\tstring json = reader.ReadToEnd();\n\tDictionary<string, string> result = JsonSerializer.Deserialize<Dictionary<string, string>>(json);\n\tif (result == null) {\n\t\tthrow new JsonException(\"Language file could not be deserialized.\");\n\t}\n\treturn result;\n}", "CodeBleu_score": 45.41374206094495}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\tAssembly assembly = Assembly.GetExecutingAssembly();\n\tstring resourceName = $\"Language.{code}.json\";\n\tusing Stream? stream = assembly.GetManifestResourceStream(resourceName);\n\tif (stream == null) {\n\t\tthrow new NullReferenceException(\n\t\t\t$\"Language file {resourceName} not found in assembly {assembly.FullName}.\"\n\t\t);\n\t}\n\ttry {\n\t\treturn JsonSerializer.Deserialize<Dictionary<string, string>>(stream);\n\t} catch (JsonException e) {\n\t\tthrow new JsonException(\n\t\t\t$\"Failed to deserialize language file {resourceName} in assembly {assembly.FullName}.\",\n\t\t\te\n\t\t);\n\t}\n}", "CodeBleu_score": 44.036315494117176}]}
{"instance_id": "9978bd31d199", "generation_result": [{"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t\tint expressionCount = 0;\n\tforeach (var node in nodes) {\n\t\tif (node is ParserRuleContext) {\n\t\t\tVisit(node);\n\t\t\texpressionCount++;\n\t\t}\n\t}\n\treturn expressionCount;\n}", "CodeBleu_score": 41.88240758678795}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t\tint expressionCount = 0;\n\tforeach (var node in nodes) {\n\t\tif (node is ParserRuleContext) {\n\t\t\tVisit(node);\n\t\t\texpressionCount++;\n\t\t}\n\t}\n\treturn expressionCount;\n}", "CodeBleu_score": 41.88240758678795}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t\tint expressionCount = 0;\n\tforeach (IParseTree node in nodes) {\n\t\tif (node is ParserRuleContext) {\n\t\t\tVisit(node);\n\t\t\texpressionCount++;\n\t\t}\n\t}\n\treturn expressionCount;\n}", "CodeBleu_score": 40.35058300554098}]}
{"instance_id": "8f9bf9ee575a", "generation_result": [{"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t\tvar formatString = context.text.text.ToString();\n\tvar expressions = VisitAllChildren(context.expression());\n\n\t// Get the line ID, if it exists\n\tvar lineID = \"\";\n\tvar tags = context.tag();\n\tif (tags.Length > 0) {\n\t\tlineID = tags[0].text.text.ToString();\n\t}\n\n\tvar expressionCount = expressions.Count;\n\n\t// Generate code for the expressions in the string\n\tfor (int i = 0; i < expressionCount; i++) {\n\t\tformatString = formatString.Replace(\"{\" + i + \"}\", expressions[i]);\n\t}\n\n\t// Emit the RunLine opcode\n\tvar lineIDString = StringToYarn(lineID);\n\toutput.Add(Opcode.RunLine);\n\toutput.Add(lineIDString);\n\toutput.Add(expressionCount);\n\n\treturn 0;\n}", "CodeBleu_score": 35.56659165098564}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t\tstring lineID = \"\";\n\tint expressionCount = 0;\n\n\t// Get the line ID\n\tif (context.line_content().hashtag() != null) {\n\t\tlineID = context.line_content().hashtag().HASH_TAG_LINE_ID().GetText();\n\t} else {\n\t\tthrow new InvalidOperationException($\"Line statement on line {context.start.Line}:{context.start.Column} does not have a line ID\");\n\t}\n\n\t// Get the expressions\n\tif (context.line_content().format_function() != null) {\n\t\texpressionCount = context.line_content().format_function().expression().Length;\n\t}\n\n\t// Generate code for the expressions\n\tif (expressionCount > 0) {\n\t\tVisitFormat_function(context.line_content().format_function());\n\t}\n\n\t// Emit the RunLine opcode\n\toutputStream.WriteOpcode(Opcode.RunLine);\n\toutputStream.WriteString(lineID);\n\toutputStream.WriteInt(expressionCount);\n\n\treturn 0;\n}", "CodeBleu_score": 45.250826689113254}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t\tif (!context.header.line_id().text.Equals(\"\")) {\n\t\tstring lineID = context.header.line_id().text;\n\t\tvar expressionCount = context.text.Count(c => c.value is YarnSpinnerParser.ExpressionContext);\n\t\tif (expressionCount > 0) {\n\t\t\tvar expressions = new List<Expression>();\n\t\t\tforeach (var expression in context.text) {\n\t\t\t\tif (expression.value is YarnSpinnerParser.ExpressionContext) {\n\t\t\t\t\texpressions.Add(VisitExpression(expression.value as YarnSpinnerParser.ExpressionContext));\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.currentNode.AddLine(lineID, expressions);\n\t\t} else {\n\t\t\tthis.currentNode.AddLine(lineID);\n\t\t}\n\t} else {\n\t\tthrow new InvalidOperationException(\"Line statement must have a line ID\");\n\t}\n\n\treturn 0;\n}", "CodeBleu_score": 47.73877138897484}]}
{"instance_id": "b70d033fed9c", "generation_result": [{"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t\tvar commands = yarnFile.Commands\n\tvar allCommandNames = commands.Keys.ToList()\n\tvar allCommandNamesString = string.Join(\", \", allCommandNames)\n\tvar diagnostics = new List<Diagnostic>()\n\tforeach (var command in commands.Values) {\n\t\tvar commandName = command.Name\n\t\tvar commandNameString = $\"\\\"{commandName}\\\"\"\n\t\tif (allCommandNames.Contains(commandName)) {\n\t\t\t// The command is defined\n\t\t\tcontinue\n\t\t}\n\t\t// The command is not defined\n\t\tvar diagnostic = new Diagnostic() {\n\t\t\tSeverity = DiagnosticSeverity.Warning,\n\t\t\tMessage = $\"Command {commandNameString} is not defined in the project's commands list ({allCommandNamesString})\",\n\t\t\tRange = Range(command.Node.Start, command.Node.End),\n\t\t\tCode = \"YRN0001\",\n\t\t\tSource = \"YarnSpinner\"\n\t\t}\n\t\tdiagnostics.Add(diagnostic)\n\t}\n\treturn diagnostics\n}", "CodeBleu_score": 22.63455828624556}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t\t// Get the commands that are defined in the project's known commands\n\tvar knownCommands = yarnFile.GetKnownCommands()\n\t// Get the commands that are referenced in the file\n\tvar referencedCommands = yarnFile.GetReferencedCommands()\n\t// Get the commands that are not defined in the project's known commands\n\tvar unknownCommands = referencedCommands.Except(knownCommands)\n\t// For each unknown command, create a Diagnostic object with a warning message, severity level, code, and additional data about the command\n\tforeach (var command in unknownCommands) {\n\t\tvar diagnostic = new Diagnostic(\n\t\t\tnew Range(\n\t\t\t\tnew Position(command.Line - 1, command.Column - 1),\n\t\t\t\tnew Position(command.Line - 1, command.Column - 1)\n\t\t\t),\n\t\t\t\"Command is not defined\",\n\t\t\tDiagnosticSeverity.Warning,\n\t\t\tCOMMAND_IS_NOT_DEFINED\n\t\t)\n\t\tdiagnostic.Data = JToken.FromObject(new {\n\t\t\tCommand = command.Text\n\t\t})\n\t\tyield return diagnostic\n\t}\n}", "CodeBleu_score": 23.925750744571832}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t\tvar allCommandNames = yarnFile.AllCommands.Select(cmd => cmd.Name).ToList();\n\tvar diagnostics = new List<Diagnostic>();\n\tforeach (var command in yarnFile.AllCommands) {\n\t\tif (command.Name == \"cutscene\") {\n\t\t\tcontinue;\n\t\t}\n\t\tvar name = command.Name;\n\t\tvar text = command.Text;\n\t\tvar range = command.Range;\n\t\tif (name.StartsWith(\"<<\")) {\n\t\t\tvar start = name.IndexOf(\"<<\");\n\t\t\tvar end = name.IndexOf(\">>\", start + 2);\n\t\t\tif (end > 0) {\n\t\t\t\tname = name.Substring(start + 2, end - start - 2);\n\t\t\t}\n\t\t}\n\t\tif (name.StartsWith(\"::\")) {\n\t\t\tname = name.Substring(2);\n\t\t}\n\t\tif (name.StartsWith(\":\")) {\n\t\t\tname = name.Substring(1);\n\t\t}\n\t\tif (name.StartsWith(\"~\")) {\n\t\t\tname = name.Substring(1);\n\t\t}\n\t\tif (name.StartsWith(\"!\")) {\n\t\t\tname = name.Substring(1);\n\t\t}\n\t\tif (name.StartsWith(\"=\")) {\n\t\t\tname = name.Substring(1);\n\t\t}\n\t\tif (name.StartsWith(\"!\")) {\n\t\t\tname = name.Substring(1);\n\t\t}\n\t\tif (name.StartsWith(\"~\")) {\n\t\t\tname = name.Substring(1);\n\t\t}\n\t\tif (name.StartsWith(\"=\")) {\n\t\t\tname = name.Substring(1);\n\t\t}\n\t\tif (name.StartsWith(\"~\")) {\n\t\t\tname = name.Substring(1);\n\t\t}\n\t\tif (name.StartsWith(\"=\")) {\n\t\t\tname = name.Substring(1);\n\t\t}\n\t\tif (name.StartsWith(\"~\")) {\n\t\t\tname = name.Substring(1);\n\t\t}\n\t\tif (name.StartsWith(\"=\")) {\n\t\t\tname = name.Substring(1);\n\t\t}\n\t\tif (name.StartsWith(\"~\")) {\n\t\t\tname = name.Substring(1);\n\t\t}\n\t\tif (name.StartsWith(\"=\")) {\n\t\t\tname = name.Substring(1);\n\t\t}\n\t\tif (name.StartsWith(\"~\"))", "CodeBleu_score": 21.174850078030676}]}
{"instance_id": "9a072876f358", "generation_result": [{"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t\tvar options = new CodeActionRegistrationOptions()\n\toptions.DocumentSelector = DocumentSelectorFactory.Create()\n\toptions.CodeActionKinds = new Container<CodeActionKind>(CodeActionKind.QuickFix)\n\toptions.ResolveProvider = false\n\treturn options\n}", "CodeBleu_score": 28.33696468769536}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t\tvar options = new CodeActionRegistrationOptions() {\n\t\tDocumentSelector = DocumentSelectorFactory.Create(),\n\t\tCodeActionKinds = new Container<CodeActionKind>(CodeActionKind.QuickFix)\n\t};\n\n\tif (capability != null && capability.DynamicRegistration != null) {\n\t\toptions.DynamicRegistration = capability.DynamicRegistration;\n\t}\n\n\t// This is not part of the LSP standard, but it is used by YarnSpinner.\n\t// It is used to tell the server that it should return a response even if there are no diagnostics.\n\t// This is useful when the server is called on a line that doesn't contain any diagnostics,\n\t// because the server can't return a response in that case.\n\tif (clientCapabilities.HasProperty(\"textDocument\") && clientCapabilities.TextDocument.HasProperty(\"publishDiagnostics\")) {\n\t\toptions.ResolveProvider = false;\n\t}\n\n\treturn options;\n}", "CodeBleu_score": 35.51182961876358}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t\tvar options = new CodeActionRegistrationOptions() {\n\t\tDocumentSelector = DocumentSelector.ForLanguage(Constants.LANGUAGE_ID),\n\t\tCodeActionKinds = new Container<CodeActionKind>(CodeActionKind.QuickFix)\n\t};\n\toptions.ResolveProvider = false;\n\treturn options;\n}", "CodeBleu_score": 38.83403362663142}]}
{"instance_id": "7b61df32aee3", "generation_result": [{"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t\tif (variableName == null) {\n\t\tthrow new ArgumentNullException(\"variableName\");\n\t}\n\tif (!variableName.StartsWith(VariablePrefix)) {\n\t\tvariableName = VariablePrefix + variableName;\n\t}\n\tif (!variables.ContainsKey(variableName)) {\n\t\tresult = default(T);\n\t\treturn false;\n\t}\n\tresult = (T)variables[variableName];\n\treturn true;\n}", "CodeBleu_score": 29.866860204064604}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t\tif (variableName == null) throw new ArgumentNullException(\"variableName\");\n\tif (variableName.Length == 0) throw new ArgumentException(\"variableName cannot be empty.\", \"variableName\");\n\tif (!variables.ContainsKey(variableName)) {\n\t\tresult = default(T);\n\t\treturn false;\n\t}\n\tresult = (T)variables[variableName];\n\treturn true;\n}", "CodeBleu_score": 33.68337868961906}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t\tif (variableName == null) throw new ArgumentNullException(\"variableName\");\n\tif (variableName.Length == 0) throw new ArgumentException(\"The variable name cannot be empty.\", \"variableName\");\n\tif (variableName.IndexOf(' ') != -1) throw new ArgumentException(\"The variable name cannot contain spaces.\", \"variableName\");\n\n\tif (this.variables.ContainsKey(variableName)) {\n\t\tif (this.variables[variableName] is T) {\n\t\t\tresult = (T) this.variables[variableName];\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\tthrow new ArgumentException(\"The type of the variable \\\"\" + variableName + \"\\\" is not compatible with the specified type T.\");\n\t\t}\n\t}\n\telse {\n\t\tresult = default(T);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 40.32268309893517}]}
{"instance_id": "7201488347ef", "generation_result": [{"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t\tthis.variableStorage = variableStorage;\n\tthis.library = new Yarn.Library();\n\tthis.vm = new Yarn.VirtualMachine(library);\n\tthis.library.ImportLibrary(new Yarn.StandardLibrary());\n\n\t// Register functions for node visit tracking\n\tlibrary.RegisterFunction(\"visit\", (string nodeName) => {\n\t\tif (currentNode == null) {\n\t\t\tcurrentNode = nodeName;\n\t\t}\n\t});\n\tlibrary.RegisterFunction(\"visit_next\", (string nodeName) => {\n\t\tif (currentNode == null) {\n\t\t\tcurrentNode = nodeName;\n\t\t} else {\n\t\t\tnextNode = nodeName;\n\t\t}\n\t});\n\n\t// Create a LineParser and register marker processors\n\tlineParser = new Yarn.LineParser();\n\tlineParser.AddMarkerProcessor(\"select\", new SelectMarkerProcessor());\n\tlineParser.AddMarkerProcessor(\"plural\", new PluralMarkerProcessor());\n\tlineParser.AddMarkerProcessor(\"ordinal\", new OrdinalMarkerProcessor());\n}", "CodeBleu_score": 39.17052849863114}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t\tthis.variableStorage = variableStorage;\n\tlibrary = new Yarn.Library();\n\tvirtualMachine = new Yarn.VirtualMachine(library);\n\tstandardLibrary = new Yarn.StandardLibrary();\n\tvirtualMachine.RegisterFunction(\"visited\", this.visited);\n\tvirtualMachine.RegisterFunction(\"set_visited\", this.set_visited);\n\tvirtualMachine.RegisterFunction(\"visited_count\", this.visited_count);\n\tvirtualMachine.RegisterFunction(\"set_visited_count\", this.set_visited_count);\n\tvirtualMachine.RegisterFunction(\"get_string_table\", this.get_string_table);\n\tvirtualMachine.RegisterFunction(\"set_string_table\", this.set_string_table);\n\tvirtualMachine.RegisterFunction(\"get_string_table_item\", this.get_string_table_item);\n\tvirtualMachine.RegisterFunction(\"set_string_table_item\", this.set_string_table_item);\n\tvirtualMachine.RegisterFunction(\"get_string_table_count\", this.get_string_table_count);\n\tvirtualMachine.RegisterFunction(\"set_string_table_count\", this.set_string_table_count);\n\tvirtualMachine.RegisterFunction(\"get_string_table_item_key\", this.get_string_table_item_key);\n\tvirtualMachine.RegisterFunction(\"set_string_table_item_key\", this.set_string_table_item_key);\n\tvirtualMachine.RegisterFunction(\"get_string_table_item_value\", this.get_string_table_item_value);\n\tvirtualMachine.RegisterFunction(\"set_string_table_item_value\", this.set_string_table_item_value);\n\tvirtualMachine.RegisterFunction(\"get_string_table_item_key_and_value\", this.get_string_table_item_key_and_value);\n\tvirtualMachine.RegisterFunction(\"set_string_table_item_key_and_value\", this.set_string_table_item_key_and_value);\n\tvirtualMachine.RegisterFunction(\"get_string_table_item_at\", this.get_string_table_item_at);\n\tvirtualMachine.RegisterFunction(\"set_string_table_item_at\", this.set_", "CodeBleu_score": 21.156727834251093}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t\tthis.variableStorage = variableStorage;\n\tthis.library = new Yarn.Library();\n\tthis.virtualMachine = new Yarn.VirtualMachine(library);\n\tthis.library.ImportLibrary(new Yarn.StandardLibrary());\n\tthis.nodeVisitedHandler = new Yarn.NodeVisitedHandler();\n\tthis.nodeVisitedHandler.NodeVisited += (s, e) => {\n\t\tif (onNodeVisited != null) {\n\t\t\tonNodeVisited(e);\n\t\t}\n\t};\n\tthis.lineParser = new Yarn.LineParser();\n\tthis.lineParser.AddMarkerProcessor(\"select\", new Yarn.Unity.DialogueUI.SelectMarkerProcessor());\n\tthis.lineParser.AddMarkerProcessor(\"plural\", new Yarn.Unity.DialogueUI.PluralMarkerProcessor());\n\tthis.lineParser.AddMarkerProcessor(\"ordinal\", new Yarn.Unity.DialogueUI.OrdinalMarkerProcessor());\n}", "CodeBleu_score": 34.44602410989789}]}
{"instance_id": "59b7b5a9c34a", "generation_result": [{"code": "public int FindUniqueID(string UniqueID){\n\t\tif (UniqueID == null || UniqueID.Length == 0) {\n\t\treturn -1\n\t}\n\tfor (int i = 0; i < _LoopLists.Count; i++) {\n\t\tif (_LoopLists[i].UniqueID == UniqueID) {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}", "CodeBleu_score": 48.13816486467438}, {"code": "public int FindUniqueID(string UniqueID){\n\t\tif (UniqueID == null || UniqueID.Length == 0) {\n\t\treturn -1\n\t}\n\tfor (int i = 0; i < this.Count; i++) {\n\t\tif (this[i].UniqueID == UniqueID) {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}", "CodeBleu_score": 43.52454820043153}, {"code": "public int FindUniqueID(string UniqueID){\n\t\tif(UniqueID == null || UniqueID.Length == 0) {\n\t\treturn -1\n\t}\n\tfor(int i = 0; i < _LoopListBankData.Count; i++) {\n\t\tif(_LoopListBankData[i].UniqueID == UniqueID) {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}", "CodeBleu_score": 45.0605834335863}]}
{"instance_id": "2b85606238aa", "generation_result": [{"code": "public void AddContent(object newContent){\n\t\tLoopListBankData newBankData = new LoopListBankData(newContent)\n\tnewBankData.m_LoopListBankDataID = m_LoopListBankDataList.Count\n\tm_LoopListBankDataList.Add(newBankData)\n}", "CodeBleu_score": 19.02877548919516}, {"code": "public void AddContent(object newContent){\n\t\tLoopListBankData newBankData = new LoopListBankData()\n\tnewBankData.m_Content = newContent\n\tnewBankData.m_ID = System.Guid.NewGuid().ToString()\n\tm_LoopListBankDataList.Add(newBankData)\n}", "CodeBleu_score": 30.962671300948376}, {"code": "public void AddContent(object newContent){\n\t\tLoopListBankData newBankData = new LoopListBankData()\n\tnewBankData.m_Content = newContent\n\tnewBankData.m_UniqueID = GenerateUniqueID()\n\tm_LoopListBankDataList.Add(newBankData)\n}", "CodeBleu_score": 21.535191067587174}]}
{"instance_id": "34e593106991", "generation_result": [{"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t\tm_IndexID = idx\n\tm_Content = content\n\tif m_IsUpdateGameObjectName {\n\t\tm_GameObject.name = m_Content.ToString() + \" \" + m_IndexID.ToString()\n\t}\n\tif m_IsClickable {\n\t\tif ClickUniqueID != \"\" {\n\t\t\tm_ClickUniqueID = ClickUniqueID\n\t\t}\n\t\tif ClickObject != null {\n\t\t\tm_ClickObject = ClickObject\n\t\t}\n\t}\n}", "CodeBleu_score": 31.012897252957238}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t\tm_IndexID = idx\n\tm_Content = content\n\tif (m_IsUpdateGameObjectName) {\n\t\tstring prefabName = m_Content.ToString().Replace(\" \", \"\").Replace(\"(Clone)\", \"\")\n\t\tgameObject.name = prefabName + \" \" + idx.ToString()\n\t}\n\tif (ClickObject != null) {\n\t\tClickObject.onClick.RemoveAllListeners()\n\t\tClickObject.onClick.AddListener(delegate {\n\t\t\tif (ClickUniqueID != \"\") {\n\t\t\t\tm_ScrollCellClick.Invoke(ClickUniqueID)\n\t\t\t} else {\n\t\t\t\tm_ScrollCellClick.Invoke(idx)\n\t\t\t}\n\t\t})\n\t}\n}", "CodeBleu_score": 31.62264952581592}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t\tm_IndexID = idx\n\tm_Content = content\n\tm_ClickUniqueID = ClickUniqueID\n\tm_ClickObject = ClickObject\n\tif (m_IsUpdateGameObjectName) {\n\t\tgameObject.name = m_Content.ToString() + \" (\" + m_IndexID.ToString() + \")\"\n\t}\n}", "CodeBleu_score": 41.9392232240483}]}
{"instance_id": "6b6a6cc329cc", "generation_result": [{"code": "private void OnButtonAddDataClickk(){\n\t\t// Parse the input field text to determine the number of items to add, ensuring at least one item is added.\n\tint numToAdd = 1\n\tif (InputFieldAddData.text != \"\") {\n\t\tnumToAdd = int.Parse(InputFieldAddData.text)\n\t}\n\tif (numToAdd < 1) {\n\t\tnumToAdd = 1\n\t}\n\n\t// Add random integers between 0 and 10 to the list bank, update the total count of the scroll rect, and refresh the displayed cells.\n\tfor (int i = 0; i < numToAdd; i++) {\n\t\tint randomNumber = Random.Range(0, 10)\n\t\tListBank.Add(randomNumber)\n\t\tScrollRect.content.GetComponent<RectTransform>().sizeDelta = new Vector2(ScrollRect.content.GetComponent<RectTransform>().sizeDelta.x, ScrollRect.content.GetComponent<RectTransform>().sizeDelta.y + 20)\n\t\tRefreshCells()\n\t}\n}", "CodeBleu_score": 39.837668070760344}, {"code": "private void OnButtonAddDataClickk(){\n\t\tint count = 0\n\ttry {\n\t\tcount = int.Parse(this.inputField.text)\n\t} catch (System.Exception) {\n\t\tcount = 1\n\t}\n\tif (count < 1) {\n\t\tcount = 1\n\t}\n\tfor (int i = 0; i < count; i++) {\n\t\tthis.bank.Add(UnityEngine.Random.Range(0, 10))\n\t}\n\tthis.totalCount += count\n\tthis.scrollRect.content.sizeDelta = new Vector2(this.scrollRect.content.sizeDelta.x, (float) (this.totalCount * this.cellHeight))\n\tthis.RefreshCells()\n}", "CodeBleu_score": 23.77299905765592}, {"code": "private void OnButtonAddDataClickk(){\n\t\tint dataToAdd = 0\n\tif (!string.IsNullOrEmpty(inputField.text)) {\n\t\tdataToAdd = int.Parse(inputField.text)\n\t}\n\tif (dataToAdd < 1) {\n\t\tdataToAdd = 1\n\t}\n\tfor (int i = 0; i < dataToAdd; i++) {\n\t\tbank.Add(Random.Range(0, 10))\n\t}\n\ttotalCount += dataToAdd\n\tscrollRect.verticalNormalizedPosition = 0f\n\tRefreshCells()\n}", "CodeBleu_score": 34.3096651861762}]}
{"instance_id": "209961c9eb8e", "generation_result": [{"code": "protected override void ClearTempPool(){\n\t\tif (content.childCount != poolSize) {\n\t\tthrow new System.Exception(\"Content has incorrect number of children. Expected \" + poolSize + \", found \" + content.childCount)\n\t}\n\tif (startDeleteIndex > 0) {\n\t\tfor (int i = startDeleteIndex - 1; i >= 0; i--) {\n\t\t\tGameObject item = content.GetChild(i)\n\t\t\titem.transform.SetParent(prefabSource)\n\t\t\titem.SetActive(true)\n\t\t\titem.transform.localPosition = Vector3.zero\n\t\t\titem.transform.localRotation = Quaternion.identity\n\t\t\titem.transform.localScale = Vector3.one\n\t\t\titem.transform.SetAsLastSibling()\n\t\t\tstartDeleteIndex = 0\n\t\t}\n\t}\n\tif (endDeleteIndex < content.childCount) {\n\t\tfor (int i = content.childCount - 1; i >= endDeleteIndex; i--) {\n\t\t\tGameObject item = content.GetChild(i)\n\t\t\titem.transform.SetParent(prefabSource)\n\t\t\titem.SetActive(true)\n\t\t\titem.transform.localPosition = Vector3.zero\n\t\t\titem.transform.localRotation = Quaternion.identity\n\t\t\titem.transform.localScale = Vector3.one\n\t\t\titem.transform.SetAsLastSibling()\n\t\t\tendDeleteIndex = content.childCount\n\t\t}\n\t}\n}", "CodeBleu_score": 37.2706793034194}, {"code": "protected override void ClearTempPool(){\n\t\tif (content.childCount != tempPoolSize) {\n\t\tDebug.LogError(\"Content pool has incorrect number of children. Expected \" + tempPoolSize + \" but found \" + content.childCount)\n\t}\n\tif (startIndex != 0) {\n\t\tfor (int i = startIndex - 1; i >= 0; i--) {\n\t\t\tcontent.GetChild(i).SetParent(prefabSource)\n\t\t}\n\t\tstartIndex = 0\n\t}\n\tif (endIndex != content.childCount) {\n\t\tfor (int i = content.childCount - 1; i > endIndex - 1; i--) {\n\t\t\tcontent.GetChild(i).SetParent(prefabSource)\n\t\t}\n\t\tendIndex = content.childCount\n\t}\n}", "CodeBleu_score": 41.0539645592871}, {"code": "protected override void ClearTempPool(){\n\t\tif (m_TempContent.childCount != m_Content.childCount) {\n\t\tDebug.LogError(\"The number of children in the temporary content pool does not match the number of children in the content pool.  This is likely due to the number of items in the pool being changed at runtime.  Please use the function ResizePool to adjust the size of the pool at runtime.\");\n\t\treturn;\n\t}\n\n\t//If there are items marked for deletion at the start, return them to the prefab source and reset the start index\n\tif (m_StartIndex > 0) {\n\t\tfor (int i = 0; i < m_StartIndex; i++) {\n\t\t\tTransform child = m_TempContent.GetChild(i);\n\t\t\tchild.SetParent(m_Content);\n\t\t\tchild.localPosition = Vector3.zero;\n\t\t\tchild.localRotation = Quaternion.identity;\n\t\t\tchild.localScale = Vector3.one;\n\t\t\tm_TempContent.SetChild(i, child);\n\t\t}\n\t\tm_StartIndex = 0;\n\t}\n\n\t//If there are items marked for deletion at the end, return them to the prefab source and reset the end index\n\tif (m_EndIndex < m_Content.childCount) {\n\t\tfor (int i = m_EndIndex; i < m_Content.childCount; i++) {\n\t\t\tTransform child = m_TempContent.GetChild(i);\n\t\t\tchild.SetParent(m_Content);\n\t\t\tchild.localPosition = Vector3.zero;\n\t\t\tchild.localRotation = Quaternion.identity;\n\t\t\tchild.localScale = Vector3.one;\n\t\t\tm_TempContent.SetChild(i, child);\n\t\t}\n\t\tm_EndIndex = m_Content.childCount;\n\t}\n}", "CodeBleu_score": 33.80365099348322}]}
{"instance_id": "c6bb290de2b3", "generation_result": [{"code": "public void AnticipateScale(Vector3 newScale){\n\t\tif (NetworkManager.singleton.IsListening) {\n\t\tif (NetworkManager.singleton.IsServer) {\n\t\t\tif (NetworkManager.singleton.IsClient) {\n\t\t\t\tif (NetworkManager.singleton.IsServer) {\n\t\t\t\t\tif (NetworkManager.singleton.IsClient) {\n\t\t\t\t\t\tif (NetworkManager.singleton.IsServer) {\n\t\t\t\t\t\t\tif (NetworkManager.singleton.IsClient) {\n\t\t\t\t\t\t\t\tif (NetworkManager.singleton.IsServer) {\n\t\t\t\t\t\t\t\t\tif (NetworkManager.singleton.IsClient) {\n\t\t\t\t\t\t\t\t\t\tif (NetworkManager.singleton.IsServer) {\n\t\t\t\t\t\t\t\t\t\t\tif (NetworkManager.singleton.IsClient) {\n\t\t\t\t\t\t\t\t\t\t\t\tif (NetworkManager.singleton.IsServer) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (NetworkManager.singleton.IsClient) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (NetworkManager.singleton.IsServer) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (NetworkManager.singleton.IsClient) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (NetworkManager.singleton.IsServer) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (NetworkManager.singleton.IsClient) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (NetworkManager.singleton.IsServer) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (NetworkManager.singleton.IsClient) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (NetworkManager.singleton.IsServer) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (NetworkManager.singleton.IsClient) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (NetworkManager.singleton.IsServer) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (NetworkManager.singleton.IsClient) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (NetworkManager.singleton.IsServer) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (NetworkManager.singleton.IsClient) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (NetworkManager.singleton.IsServer) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (NetworkManager.singleton.IsClient) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (NetworkManager.singleton.IsServer) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (NetworkManager.singleton.IsClient) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (NetworkManager.singleton.IsServer) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (NetworkManager.singleton.IsClient) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (NetworkManager.singleton.IsServer) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (NetworkManager.singleton.IsClient) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (NetworkManager.singleton.IsServer) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (NetworkManager.singleton.IsClient) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (NetworkManager.singleton.IsServer) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (NetworkManager.singleton.IsClient) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (NetworkManager.", "CodeBleu_score": 14.990848779465631}, {"code": "public void AnticipateScale(Vector3 newScale){\n\t\tif (!isNetworkActive) {\n\t\ttransform.localScale = newScale;\n\t\treturn;\n\t}\n\n\tif (!isListening) {\n\t\ttransform.localScale = newScale;\n\t\treturn;\n\t}\n\n\ttransform.localScale = newScale;\n\tauthoritativeScale = newScale;\n\n\tanticipatedTransform = new TransformState(transform);\n\tanticipationCounter = 0;\n\tanticipationTime = Time.time;\n\tsmoothTransitionDuration = 0;\n\tcurrentSmoothTime = 0;\n}", "CodeBleu_score": 34.00517144086589}, {"code": "public void AnticipateScale(Vector3 newScale){\n\t\tif (NetworkManager.singleton.IsListening) {\n\t\tif (NetworkManager.singleton.IsServer) {\n\t\t\ttransform.localScale = newScale;\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(newScale);\n\t\t\tnetworkIdentity.SetLocalScale(", "CodeBleu_score": 17.403662585895447}]}
{"instance_id": "d67d3c80dd00", "generation_result": [{"code": "private void FlushMessages(){\n\t\tif (NetworkServer.active) {\n\t\t// Server\n\t\tif (animUpdates.Count > 0) {\n\t\t\tRpcSendAnimUpdates(animUpdates.ToArray());\n\t\t\tanimUpdates.Clear();\n\t\t}\n\t\tif (paramUpdates.Count > 0) {\n\t\t\tRpcSendParamUpdates(paramUpdates.ToArray());\n\t\t\tparamUpdates.Clear();\n\t\t}\n\t\tif (triggerUpdates.Count > 0) {\n\t\t\tRpcSendTriggerUpdates(triggerUpdates.ToArray());\n\t\t\ttriggerUpdates.Clear();\n\t\t}\n\t} else {\n\t\t// Client\n\t\tif (animUpdates.Count > 0) {\n\t\t\tRpcReceiveAnimUpdates(animUpdates.ToArray());\n\t\t\tanimUpdates.Clear();\n\t\t}\n\t\tif (paramUpdates.Count > 0) {\n\t\t\tRpcReceiveParamUpdates(paramUpdates.ToArray());\n\t\t\tparamUpdates.Clear();\n\t\t}\n\t\tif (triggerUpdates.Count > 0) {\n\t\t\tRpcReceiveTriggerUpdates(triggerUpdates.ToArray());\n\t\t\ttriggerUpdates.Clear();\n\t\t}\n\t}\n}", "CodeBleu_score": 36.24924206235139}, {"code": "private void FlushMessages(){\n\t\t// Send animation updates.\n\tforeach (var entry in AnimationUpdates) {\n\t\tvar message = new AnimationMessage();\n\t\tmessage.AnimationId = entry.AnimationId;\n\t\tmessage.FrameTime = entry.FrameTime;\n\t\tmessage.Value = entry.Value;\n\t\tmessage.Send(entry.NetworkConnection);\n\t}\n\tAnimationUpdates.Clear();\n\n\t// Send parameter updates.\n\tforeach (var entry in ParameterUpdates) {\n\t\tvar message = new ParameterMessage();\n\t\tmessage.ParameterId = entry.ParameterId;\n\t\tmessage.Value = entry.Value;\n\t\tmessage.Send(entry.NetworkConnection);\n\t}\n\tParameterUpdates.Clear();\n\n\t// Send trigger updates.\n\tforeach (var entry in TriggerUpdates) {\n\t\tvar message = new TriggerMessage();\n\t\tmessage.TriggerId = entry.TriggerId;\n\t\tmessage.Value = entry.Value;\n\t\tmessage.Send(entry.NetworkConnection);\n\t}\n\tTriggerUpdates.Clear();\n}", "CodeBleu_score": 39.42418264157938}, {"code": "private void FlushMessages(){\n\t\t// Send animation updates\n\tfor (int i = 0; i < animationUpdates.Count; i++) {\n\t\tif (isServer) {\n\t\t\tRpcSendAnimationUpdate(animationUpdates[i].playerId, animationUpdates[i].animatorId, animationUpdates[i].animatorControllerId, animationUpdates[i].animatorControllerParameterId, animationUpdates[i].animatorControllerParameterName, animationUpdates[i].value);\n\t\t} else {\n\t\t\tRpcReceiveAnimationUpdate(animationUpdates[i].playerId, animationUpdates[i].animatorId, animationUpdates[i].animatorControllerId, animationUpdates[i].animatorControllerParameterId, animationUpdates[i].animatorControllerParameterName, animationUpdates[i].value);\n\t\t}\n\t}\n\tanimationUpdates.Clear();\n\n\t// Send parameter updates\n\tfor (int i = 0; i < parameterUpdates.Count; i++) {\n\t\tif (isServer) {\n\t\t\tRpcSendParameterUpdate(parameterUpdates[i].playerId, parameterUpdates[i].animatorId, parameterUpdates[i].parameterId, parameterUpdates[i].value);\n\t\t} else {\n\t\t\tRpcReceiveParameterUpdate(parameterUpdates[i].playerId, parameterUpdates[i].animatorId, parameterUpdates[i].parameterId, parameterUpdates[i].value);\n\t\t}\n\t}\n\tparameterUpdates.Clear();\n\n\t// Send trigger updates\n\tfor (int i = 0; i < triggerUpdates.Count; i++) {\n\t\tif (isServer) {\n\t\t\tRpcSendTriggerUpdate(triggerUpdates[i].playerId, triggerUpdates[i].animatorId, triggerUpdates[i].triggerId, triggerUpdates[i].value);\n\t\t} else {\n\t\t\tRpcReceiveTriggerUpdate(triggerUpdates[i].playerId, triggerUpdates[i].animatorId, triggerUpdates[i].triggerId, triggerUpdates[i].value);\n\t\t}\n\t}\n\ttriggerUpdates.Clear();\n}", "CodeBleu_score": 35.32323551957627}]}
{"instance_id": "0632b2f27d22", "generation_result": [{"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t\tif (updateStage == NetworkUpdateStage.PreUpdate) {\n\t\tif (isServer) {\n\t\t\tFlushPendingMessages();\n\t\t}\n\t\tProcessAnimationParameters();\n\t\tCheckForAnimatorChange();\n\t}\n\tif (updateStage == NetworkUpdateStage.PostLateUpdate) {\n\t\tif (isServer) {\n\t\t\tSendAnimationParameters();\n\t\t}\n\t\tProcessAnimationParameters();\n\t}\n}", "CodeBleu_score": 25.926059335878794}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t\tif (updateStage == NetworkUpdateStage.PreUpdate) {\n\t\tif (isServer) {\n\t\t\tFlushBufferedReliableCommands();\n\t\t} else if (isClient) {\n\t\t\tFlushBufferedCommands();\n\t\t}\n\t}\n\n\tif (updateStage == NetworkUpdateStage.PreUpdate) {\n\t\tif (isServer) {\n\t\t\tif (hasAuthority) {\n\t\t\t\t// Send buffered messages\n\t\t\t\tSendBufferedMessages();\n\t\t\t}\n\t\t} else if (isClient) {\n\t\t\t// Send buffered messages\n\t\t\tSendBufferedMessages();\n\t\t}\n\t}\n\n\tif (updateStage == NetworkUpdateStage.PostLateUpdate) {\n\t\tif (isServer) {\n\t\t\tif (hasAuthority) {\n\t\t\t\t// Send buffered messages\n\t\t\t\tSendBufferedMessages();\n\t\t\t}\n\t\t} else if (isClient) {\n\t\t\t// Send buffered messages\n\t\t\tSendBufferedMessages();\n\t\t}\n\t}\n\n\tif (updateStage == NetworkUpdateStage.Update) {\n\t\tif (isServer) {\n\t\t\t// Send buffered messages\n\t\t\tSendBufferedMessages();\n\t\t} else if (isClient) {\n\t\t\t// Send buffered messages\n\t\t\tSendBufferedMessages();\n\t\t}\n\t}\n}", "CodeBleu_score": 36.39394167496294}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t\tif (updateStage == NetworkUpdateStage.PreUpdate) {\n\t\tif (isServer) {\n\t\t\tFlushPendingMessages(true);\n\t\t}\n\t\telse {\n\t\t\tFlushPendingMessages(false);\n\t\t}\n\t\tProcessAnimationParameters();\n\t\tif (isServer) {\n\t\t\tif (hasAuthority) {\n\t\t\t\tProcessAnimator();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (hasAuthority) {\n\t\t\t\tProcessAnimator();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 14.489697601291097}]}
{"instance_id": "d78874b65b32", "generation_result": [{"code": "private void UpdateOwnershipAuthority(){\n\t\tif (NetworkServer.active) {\n\t\tif (isServerOwned) {\n\t\t\tif (isServerAuthoritative) {\n\t\t\t\t// If the object is server owned and server authoritative, set it to kinematic and interpolation = none\n\t\t\t\trigidbody.isKinematic = true;\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.None;\n\t\t\t} else {\n\t\t\t\t// If the object is server owned but not server authoritative, set it to kinematic and interpolation = none\n\t\t\t\trigidbody.isKinematic = true;\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.None;\n\t\t\t}\n\t\t} else {\n\t\t\tif (isServerAuthoritative) {\n\t\t\t\t// If the object is not server owned but is server authoritative, set it to kinematic and interpolation = none\n\t\t\t\trigidbody.isKinematic = true;\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.None;\n\t\t\t} else {\n\t\t\t\t// If the object is not server owned and not server authoritative, set it to kinematic and interpolation = none\n\t\t\t\trigidbody.isKinematic = true;\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.None;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif (isServerOwned) {\n\t\t\tif (isServerAuthoritative) {\n\t\t\t\t// If the object is server owned and server authoritative, set it to kinematic and interpolation = none\n\t\t\t\trigidbody.isKinematic = true;\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.None;\n\t\t\t} else {\n\t\t\t\t// If the object is server owned but not server authoritative, set it to kinematic and interpolation = none\n\t\t\t\trigidbody.isKinematic = true;\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.None;\n\t\t\t}\n\t\t} else {\n\t\t\tif (isServerAuthoritative) {\n\t\t\t\t// If the object is not server owned but is server authoritative, set it to kinematic and interpolation = none\n\t\t\t\trigidbody.isKinematic = true;\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.None;\n\t\t\t} else {\n\t\t\t\t// If the object is not server owned and not server authoritative, set it to kinematic and interpolation = none\n\t\t\t\trigidbody.isKinematic = true;\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.None;\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 17.341592849400083}, {"code": "private void UpdateOwnershipAuthority(){\n\t\tif (IsServer) {\n\t\tif (IsMine) {\n\t\t\t// If we're the owner, we can just set the Rigidbody's kinematic state to false and interpolation to true.\n\t\t\tif (OwnershipState == OwnershipState.Owner) {\n\t\t\t\trigidbody.isKinematic = false;\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t\t}\n\t\t\t// If we're not the owner, we need to set the Rigidbody's kinematic state to true and interpolation to false.\n\t\t\telse {\n\t\t\t\trigidbody.isKinematic = true;\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.None;\n\t\t\t}\n\t\t}\n\t\t// If we're not the server, we need to set the Rigidbody's kinematic state to true and interpolation to false.\n\t\telse {\n\t\t\trigidbody.isKinematic = true;\n\t\t\trigidbody.interpolation = RigidbodyInterpolation.None;\n\t\t}\n\t}\n}", "CodeBleu_score": 22.606025468992257}, {"code": "private void UpdateOwnershipAuthority(){\n\t\tif (IsServer) {\n\t\tif (OwnershipStatus == OwnershipStatus.ServerAuthoritative) {\n\t\t\t// Set the Rigidbody's kinematic property to false\n\t\t\tif (rigidbody != null) {\n\t\t\t\trigidbody.isKinematic = false;\n\t\t\t}\n\n\t\t\t// Set the Rigidbody's interpolation property to Interpolate\n\t\t\tif (rigidbody != null) {\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t\t}\n\n\t\t\t// Set the Rigidbody's interpolation property to Interpolate\n\t\t\tif (rigidbody != null) {\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t\t}\n\n\t\t\t// Set the Rigidbody's interpolation property to Interpolate\n\t\t\tif (rigidbody != null) {\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t\t}\n\n\t\t\t// Set the Rigidbody's interpolation property to Interpolate\n\t\t\tif (rigidbody != null) {\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t\t}\n\n\t\t\t// Set the Rigidbody's interpolation property to Interpolate\n\t\t\tif (rigidbody != null) {\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t\t}\n\n\t\t\t// Set the Rigidbody's interpolation property to Interpolate\n\t\t\tif (rigidbody != null) {\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t\t}\n\n\t\t\t// Set the Rigidbody's interpolation property to Interpolate\n\t\t\tif (rigidbody != null) {\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t\t}\n\n\t\t\t// Set the Rigidbody's interpolation property to Interpolate\n\t\t\tif (rigidbody != null) {\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t\t}\n\n\t\t\t// Set the Rigidbody's interpolation property to Interpolate\n\t\t\tif (rigidbody != null) {\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t\t}\n\n\t\t\t// Set the Rigidbody's interpolation property to Interpolate\n\t\t\tif (rigidbody != null) {\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t\t}\n\n\t\t\t// Set the Rigidbody's interpolation property to Interpolate\n\t\t\tif (rigidbody != null) {\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t\t}\n\n\t\t\t// Set the Rigidbody's interpolation property to Interpol", "CodeBleu_score": 15.145790741750552}]}
{"instance_id": "304fe1278db9", "generation_result": [{"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t\tfloat x, y, z, w;\n\tfloat sqrmag;\n\n\t// Check the sign bit\n\tif ((compressed & 0x80000000) != 0) {\n\t\t// Negative w component\n\t\tcompressed ^= 0x80000000;\n\t\tx = (float) (compressed >> 16) / 32767.0f;\n\t\ty = (float) (compressed >> 32) / 32767.0f;\n\t\tz = (float) (compressed >> 48) / 32767.0f;\n\t\tsqrmag = 1.0f - x * x - y * y - z * z;\n\t\tw = (sqrmag < 0.0f) ? 0.0f : -Mathf.Sqrt(sqrmag);\n\t} else {\n\t\t// Positive w component\n\t\tx = (float) (compressed >> 16) / 32767.0f;\n\t\ty = (float) (compressed >> 32) / 32767.0f;\n\t\tz = (float) (compressed >> 48) / 32767.0f;\n\t\tsqrmag = 1.0f - x * x - y * y - z * z;\n\t\tw = (sqrmag < 0.0f) ? 0.0f : Mathf.Sqrt(sqrmag);\n\t}\n\n\tquaternion = new Quaternion(x, y, z, w);\n}", "CodeBleu_score": 27.217342967810907}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t\t// Determine which component to skip\n\tint skipIndex = (compressed & 0xC0000000) >> 30;\n\tfloat sqrMagnitude = 0f;\n\tfloat maxValue = 0f;\n\tfloat x = 0f;\n\tfloat y = 0f;\n\tfloat z = 0f;\n\tfloat w = 0f;\n\tfloat sqrMagnitudes = 0f;\n\tfloat scale = 0f;\n\tfloat maxValue2 = 0f;\n\tfloat x2 = 0f;\n\tfloat y2 = 0f;\n\tfloat z2 = 0f;\n\tfloat w2 = 0f;\n\tfloat sqrMagnitudes2 = 0f;\n\tfloat scale2 = 0f;\n\tfloat maxValue3 = 0f;\n\tfloat x3 = 0f;\n\tfloat y3 = 0f;\n\tfloat z3 = 0f;\n\tfloat w3 = 0f;\n\tfloat sqrMagnitudes3 = 0f;\n\tfloat scale3 = 0f;\n\tfloat maxValue4 = 0f;\n\tfloat x4 = 0f;\n\tfloat y4 = 0f;\n\tfloat z4 = 0f;\n\tfloat w4 = 0f;\n\tfloat sqrMagnitudes4 = 0f;\n\tfloat scale4 = 0f;\n\tfloat maxValue5 = 0f;\n\tfloat x5 = 0f;\n\tfloat y5 = 0f;\n\tfloat z5 = 0f;\n\tfloat w5 = 0f;\n\tfloat sqrMagnitudes5 = 0f;\n\tfloat scale5 = 0f;\n\tfloat maxValue6 = 0f;\n\tfloat x6 = 0f;\n\tfloat y6 = 0f;\n\tfloat z6 = 0f;\n\tfloat w6 = 0f;\n\tfloat sqrMagnitudes6 = 0f;\n\tfloat scale6 = 0f;\n\tfloat maxValue7 = 0f;\n\tfloat x7 = 0f;\n\tfloat y7 = 0f;\n\tfloat z7 = 0", "CodeBleu_score": 8.195242710152941}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t\t// The first two bits of the compressed value determine which component of the Quaternion to skip.\n\tuint skip = compressed >> 30;\n\tif (skip == 0) {\n\t\t// If the first two bits are 00, the quaternion's w component is 1.\n\t\tquaternion.w = 1.0f;\n\t\tquaternion.x = DecompressComponent(compressed);\n\t\tquaternion.y = DecompressComponent(compressed);\n\t\tquaternion.z = DecompressComponent(compressed);\n\t}\n\telse if (skip == 1) {\n\t\t// If the first two bits are 01, the quaternion's x component is 1.\n\t\tquaternion.x = 1.0f;\n\t\tquaternion.w = DecompressComponent(compressed);\n\t\tquaternion.y = DecompressComponent(compressed);\n\t\tquaternion.z = DecompressComponent(compressed);\n\t}\n\telse if (skip == 2) {\n\t\t// If the first two bits are 10, the quaternion's y component is 1.\n\t\tquaternion.y = 1.0f;\n\t\tquaternion.w = DecompressComponent(compressed);\n\t\tquaternion.x = DecompressComponent(compressed);\n\t\tquaternion.z = DecompressComponent(compressed);\n\t}\n\telse {\n\t\t// If the first two bits are 11, the quaternion's z component is 1.\n\t\tquaternion.z = 1.0f;\n\t\tquaternion.w = DecompressComponent(compressed);\n\t\tquaternion.x = DecompressComponent(compressed);\n\t\tquaternion.y = DecompressComponent(compressed);\n\t}\n\n\t// Compute the squared magnitudes of the remaining components.\n\tfloat xMagnitudeSquared = quaternion.x * quaternion.x;\n\tfloat yMagnitudeSquared = quaternion.y * quaternion.y;\n\tfloat zMagnitudeSquared = quaternion.z * quaternion.z;\n\n\t// If the sum of squared magnitudes is greater than zero, recalculate the skipped component to ensure the quaternion's unit length.\n\tif (xMagnitudeSquared + yMagnitudeSquared + zMagnitudeSquared > 0.0f) {\n\t\t// Recalculate the skipped component.\n\t\tfloat skipMagnitude = 1.0f / Mathf.Sqrt(xMagnitudeSquared +", "CodeBleu_score": 15.774228788438998}]}
{"instance_id": "452b860a7dde", "generation_result": [{"code": "static void GenerateCLRBindingByAnalysis(){\n\t\tif (EditorApplication.isPlaying) {\n\t\tDebug.LogError(\"Please stop the Unity editor first.\");\n\t\treturn;\n\t}\n\n\tif (EditorApplication.isCompiling) {\n\t\tDebug.LogError(\"Please wait for the compilation to finish.\");\n\t\treturn;\n\t}\n\n\tstring clrBindingFolder = \"Assets/Scripts/CLRBindings\";\n\tif (!Directory.Exists(clrBindingFolder)) {\n\t\tDirectory.CreateDirectory(clrBindingFolder);\n\t}\n\n\tstring clrBindingByAnalysisFolder = clrBindingFolder + \"/GeneratedByAnalysis\";\n\tif (Directory.Exists(clrBindingByAnalysisFolder)) {\n\t\tDirectory.Delete(clrBindingByAnalysisFolder, true);\n\t}\n\n\tDirectory.CreateDirectory(clrBindingByAnalysisFolder);\n\n\tstring il2cppOutputPath = clrBindingByAnalysisFolder + \"/il2cppOutput\";\n\tif (Directory.Exists(il2cppOutputPath)) {\n\t\tDirectory.Delete(il2cppOutputPath, true);\n\t}\n\n\tDirectory.CreateDirectory(il2cppOutputPath);\n\n\tstring il2cppOutputExePath = il2cppOutputPath + \"/Assembly-CSharp.exe\";\n\n\tstring tempFolder = clrBindingByAnalysisFolder + \"/temp\";\n\tif (Directory.Exists(tempFolder)) {\n\t\tDirectory.Delete(tempFolder, true);\n\t}\n\n\tDirectory.CreateDirectory(tempFolder);\n\n\tAssembly assembly = Assembly.LoadFile(Application.dataPath + \"/../Library/ScriptAssemblies/Assembly-CSharp.dll\");\n\tType il2cppCompilerType = assembly.GetType(\"UnityEditor.Scripting.IL2CPP.MonoAssemblyConverter\");\n\tMethodInfo il2cppCompilerMethod = il2cppCompilerType.GetMethod(\"Convert\", new Type[] { typeof(string), typeof(string), typeof(string), typeof(string) });\n\til2cppCompilerMethod.Invoke(null, new object[] { Application.dataPath + \"/../Library/ScriptAssemblies/Assembly-CSharp.dll\", il2cppOutputExePath, tempFolder, \"Debug\" });\n\n\tAssembly assembly2 = Assembly.LoadFile(il2cppOutputExePath);\n\tType il2cppHelperType = assembly2.GetType(\"ILRuntime.Runtime.Enviorment.AppDomain\");\n\tMethodInfo il2cppHelperMethod = il", "CodeBleu_score": 12.232382351053618}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t\tif (!AssetDatabase.IsValidFolder(\"Assets/ILRuntime/Generated\"))\n\t\tAssetDatabase.CreateFolder(\"Assets/ILRuntime/Generated\", \"ILRuntime\");\n\n\tvar genTypes = new List<Type>();\n\tforeach (var type in AppDomain.CurrentDomain.GetAssemblies().SelectMany(x => x.GetTypes())) {\n\t\tif (type.Namespace == \"System\" || type.Namespace.StartsWith(\"System.\"))\n\t\t\tcontinue;\n\t\tgenTypes.Add(type);\n\t}\n\n\tvar genCodes = new List<string>();\n\tforeach (var type in genTypes) {\n\t\tgenCodes.Add(GenerateCLRBindingByAnalysis(type));\n\t}\n\n\tvar genCodesStr = string.Join(\"\n\", genCodes.ToArray());\n\tvar genCodesPath = \"Assets/ILRuntime/Generated/CLRBindings.cs\";\n\tFile.WriteAllText(genCodesPath, genCodesStr);\n\tAssetDatabase.Refresh();\n\tDebug.Log(\"Generate CLR Binding Code Success, path: \" + genCodesPath);\n}", "CodeBleu_score": 19.320990575773646}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t#if ENABLE_IL2CPP\n    if (UnityEditorInternal.InternalEditorUtility.inBatchMode) {\n        Debug.LogError(\"Generate CLR Binding is not supported in batch mode\");\n        return;\n    }\n\n    string domainName = \"AnalysisDomain\";\n    string assemblyPath = \"Assets/ILRuntime/Generated\";\n    string bindingPath = \"Assets/ILRuntime/Binding\";\n    string outputPath = \"Assets/HotFix/Binding/Analysis\";\n\n    if (!System.IO.Directory.Exists(assemblyPath))\n        System.IO.Directory.CreateDirectory(assemblyPath);\n\n    if (!System.IO.Directory.Exists(bindingPath))\n        System.IO.Directory.CreateDirectory(bindingPath);\n\n    if (!System.IO.Directory.Exists(outputPath))\n        System.IO.Directory.CreateDirectory(outputPath);\n\n    AppDomain domain = null;\n    try {\n        domain = AppDomain.CreateDomain(domainName);\n\n        Assembly assembly = Assembly.LoadFrom(assemblyPath + \"/Assembly-CSharp.dll\");\n        domain.LoadAssembly(assembly);\n\n        ILRuntime.Runtime.Enviorment.AppDomain appdomain = new ILRuntime.Runtime.Enviorment.AppDomain(domain);\n\n        ILRuntime.Runtime.CLRBinding.BindingCodeGenerator.GenerateBindingCode(appdomain, assembly, \"Assets/ILRuntime/Binding/Analysis\");\n\n        AssetDatabase.Refresh();\n        Debug.Log(\"Generate CLR Binding code success\");\n    }\n    catch (Exception e) {\n        Debug.LogError(\"Generate CLR Binding code error, error message: \" + e.Message);\n    }\n    finally {\n        if (domain != null)\n            AppDomain.Unload(domain);\n    }\n#endif\n}", "CodeBleu_score": 19.060113504640807}]}
{"instance_id": "b8990031b636", "generation_result": [{"code": "public override void OnInspectorGUI(){\n\t\tserializedObject.Update();\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_Enabled\"), new GUIContent(\"Enabled\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_EditorOnly\"), new GUIContent(\"Editor Only\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_Name\"), new GUIContent(\"Name\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_Description\"), new GUIContent(\"Description\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_Version\"), new GUIContent(\"Version\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_ConfigId\"), new GUIContent(\"Config Id\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_ConfigType\"), new GUIContent(\"Config Type\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_ConfigData\"), new GUIContent(\"Config Data\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_CustomData\"), new GUIContent(\"Custom Data\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_CreateTime\"), new GUIContent(\"Create Time\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_LastUpdateTime\"), new GUIContent(\"Last Update Time\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_CachedBytes\"), new GUIContent(\"Cached Bytes\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_CachedSize\"), new GUIContent(\"Cached Size\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_CachedCRC\"), new GUIContent(\"Cached CRC\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_CachedHash\"), new GUIContent(\"Cached Hash\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_CachedBytesString\"), new GUIContent(\"Cached Bytes String\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_CachedSizeString\"), new GUIContent(\"Cached Size String\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_CachedCRCString\"), new GUIContent(\"Cached CRC String\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_CachedHashString\"), new GUIContent(\"Cached Hash String\"));\n\tEditorGUILayout.PropertyField(serializedObject.Find", "CodeBleu_score": 33.36114670231375}, {"code": "public override void OnInspectorGUI(){\n\t\tserializedObject.Update();\n\n\tEditorGUILayout.Space();\n\n\tEditorGUILayout.LabelField(\"Config Count:\");\n\tEditorGUILayout.LabelField(string.Format(\"{0}\", ConfigComponent.Instance.ConfigCount));\n\tEditorGUILayout.LabelField(\"Cached Bytes Size:\");\n\tEditorGUILayout.LabelField(string.Format(\"{0} KB\", ConfigComponent.Instance.CachedBytesSize / 1024));\n\n\tEditorGUILayout.Space();\n\n\tEditorGUILayout.BeginVertical(\"Box\");\n\tEditorGUILayout.LabelField(\"Config List:\");\n\tEditorGUILayout.LabelField(\"Name\");\n\tEditorGUILayout.LabelField(\"Bytes Size\");\n\tforeach (KeyValuePair<string, byte[]> config in ConfigComponent.Instance.ConfigList) {\n\t\tEditorGUILayout.BeginHorizontal();\n\t\tEditorGUILayout.LabelField(config.Key);\n\t\tEditorGUILayout.LabelField(string.Format(\"{0} KB\", config.Value.Length / 1024));\n\t\tEditorGUILayout.EndHorizontal();\n\t}\n\tEditorGUILayout.EndVertical();\n\n\tEditorGUILayout.Space();\n\n\tEditorGUILayout.BeginVertical(\"Box\");\n\tEditorGUILayout.LabelField(\"Config Bytes:\");\n\tEditorGUILayout.LabelField(\"Name\");\n\tEditorGUILayout.LabelField(\"Bytes Size\");\n\tforeach (KeyValuePair<string, byte[]> config in ConfigComponent.Instance.ConfigBytes) {\n\t\tEditorGUILayout.BeginHorizontal();\n\t\tEditorGUILayout.LabelField(config.Key);\n\t\tEditorGUILayout.LabelField(string.Format(\"{0} KB\", config.Value.Length / 1024));\n\t\tEditorGUILayout.EndHorizontal();\n\t}\n\tEditorGUILayout.EndVertical();\n\n\tEditorGUILayout.Space();\n\n\tEditorGUILayout.BeginVertical(\"Box\");\n\tEditorGUILayout.LabelField(\"Config String:\");\n\tEditorGUILayout.LabelField(\"Name\");\n\tEditorGUILayout.LabelField(\"String Size\");\n\tforeach (KeyValuePair<string, string> config in ConfigComponent.Instance.ConfigString) {\n\t\tEditorGUILayout.BeginHorizontal();\n\t\tEditorGUILayout.LabelField(config.Key);\n\t\tEditorGUILayout.LabelField(string.Format(\"{0}\", config.Value.Length));\n\t\tEditorGUILayout.EndHorizontal();\n\t}\n\tEditorGUILayout.EndVertical();\n\n\tEditorGUILayout.Space();\n\n\tEditorGUILayout.BeginVertical(\"Box\");\n\tEditor", "CodeBleu_score": 43.79918656568442}, {"code": "public override void OnInspectorGUI(){\n\t\tserializedObject.Update();\n\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_Enable\"), true);\n\n\tEditorGUILayout.Space();\n\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_Name\"), true);\n\n\tEditorGUILayout.Space();\n\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_Description\"), true);\n\n\tEditorGUILayout.Space();\n\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_Int\"), true);\n\n\tEditorGUILayout.Space();\n\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_Float\"), true);\n\n\tEditorGUILayout.Space();\n\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_String\"), true);\n\n\tEditorGUILayout.Space();\n\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_Bool\"), true);\n\n\tEditorGUILayout.Space();\n\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_Vector2\"), true);\n\n\tEditorGUILayout.Space();\n\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_Vector3\"), true);\n\n\tEditorGUILayout.Space();\n\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_Vector4\"), true);\n\n\tEditorGUILayout.Space();\n\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_Color\"), true);\n\n\tEditorGUILayout.Space();\n\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_Quaternion\"), true);\n\n\tEditorGUILayout.Space();\n\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_Rect\"), true);\n\n\tEditorGUILayout.Space();\n\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_Bounds\"), true);\n\n\tEditorGUILayout.Space();\n\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_AnimationCurve\"), true);\n\n\tEditorGUILayout.Space();\n\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_Array\"), true);\n\n\tEditorGUILayout.Space();\n\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_List\"), true);\n\n\tEditorGUILayout.Space();\n\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_Dictionary\"), true);\n\n\tEditorGUILayout.Space();\n\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_", "CodeBleu_score": 32.72631706871254}]}
{"instance_id": "6453adc2daa8", "generation_result": [{"code": "public static void DefaultScenes(){\n\t\tList<EditorBuildSettingsScene> scenes = new List<EditorBuildSettingsScene>();\n\tHashSet<string> defaultScenes = new HashSet<string> { \"Assets/Scenes/MainMenu.unity\", \"Assets/Scenes/Game.unity\" };\n\tforeach (string scene in defaultScenes) {\n\t\tscenes.Add(new EditorBuildSettingsScene(scene, true));\n\t}\n\tEditorBuildSettings.scenes = scenes.ToArray();\n\tDebug.Log(\"Scenes set to default.\");\n}", "CodeBleu_score": 51.62803882732848}, {"code": "public static void DefaultScenes(){\n\t\tvar defaultScenes = new HashSet<string> {\n\t\t\"Assets/Scenes/MainMenu.unity\",\n\t\t\"Assets/Scenes/Gameplay.unity\",\n\t\t\"Assets/Scenes/Credits.unity\",\n\t\t\"Assets/Scenes/Win.unity\",\n\t\t\"Assets/Scenes/Lose.unity\"\n\t}\n\n\tvar buildSettingsScenes = new List<EditorBuildSettingsScene>(defaultScenes.Count)\n\tforeach (var scene in defaultScenes) {\n\t\tbuildSettingsScenes.Add(new EditorBuildSettingsScene(scene, true))\n\t}\n\n\tEditorBuildSettings.scenes = buildSettingsScenes\n\tDebug.Log(\"Default scenes set.\")\n}", "CodeBleu_score": 25.54714399023354}, {"code": "public static void DefaultScenes(){\n\t\tHashSet<string> defaultScenes = new HashSet<string> {\n\t\t\"Assets/Scenes/Main.unity\"\n\t};\n\tList<EditorBuildSettingsScene> buildSettingsScenes = new List<EditorBuildSettingsScene>();\n\tforeach (string sceneName in defaultScenes) {\n\t\tEditorBuildSettingsScene editorBuildSettingsScene = new EditorBuildSettingsScene(sceneName, true);\n\t\tbuildSettingsScenes.Add(editorBuildSettingsScene);\n\t}\n\tEditorBuildSettings.scenes = buildSettingsScenes.ToArray();\n\tDebug.Log(\"Set scenes to default.\");\n}", "CodeBleu_score": 51.665358483464175}]}
{"instance_id": "e199f1a42526", "generation_result": [{"code": "public void Draw(){\n\t\tif (m_HelperTypeNames == null) {\n\t\tm_HelperTypeNames = new List<string>()\n\t\tforeach (var helperTypeName in Helper.GetAllHelperTypeNames()) {\n\t\t\tm_HelperTypeNames.Add(helperTypeName)\n\t\t}\n\t}\n\n\tEditorGUILayout.BeginHorizontal()\n\t{\n\t\tEditorGUILayout.PrefixLabel(\"Helper Type\")\n\t\tm_SelectedIndex = EditorGUILayout.Popup(m_SelectedIndex, m_HelperTypeNames.ToArray())\n\t}\n\tEditorGUILayout.EndHorizontal()\n\n\tif (m_SelectedIndex < 0) {\n\t\tEditorGUILayout.BeginHorizontal()\n\t\t{\n\t\t\tEditorGUILayout.PrefixLabel(\"Custom Helper Type\")\n\t\t\tm_CustomHelperType = EditorGUILayout.TextField(m_CustomHelperType)\n\t\t}\n\t\tEditorGUILayout.EndHorizontal()\n\n\t\tif (string.IsNullOrEmpty(m_CustomHelperType)) {\n\t\t\tEditorGUILayout.HelpBox(\"No helper type is selected or the custom helper type is empty.\", MessageType.Error)\n\t\t}\n\t}\n\n\tif (m_SelectedIndex >= 0) {\n\t\tm_SelectedHelperTypeName = m_HelperTypeNames[m_SelectedIndex]\n\t}\n}", "CodeBleu_score": 32.74195713876246}, {"code": "public void Draw(){\n\t\tif (m_HelperTypeNames == null) {\n\t\tm_HelperTypeNames = new List<string>(typeof(T).Assembly.GetTypes().Where(t => typeof(T).IsAssignableFrom(t) && t != typeof(T) && t.IsClass).Select(t => t.Name))\n\t\tm_HelperTypeNames.Sort()\n\t}\n\n\tm_HelperTypeName = EditorPrefs.GetString(m_HelperTypeNameKey, m_HelperTypeNames[0])\n\n\tvar selectedIndex = m_HelperTypeNames.IndexOf(m_HelperTypeName)\n\tselectedIndex = EditorGUI.Popup(m_Rect, selectedIndex, m_HelperTypeNames.ToArray())\n\tm_HelperTypeName = m_HelperTypeNames[selectedIndex]\n\n\tEditorPrefs.SetString(m_HelperTypeNameKey, m_HelperTypeName)\n\n\tif (selectedIndex == 0) {\n\t\tm_HelperTypeName = EditorGUI.TextField(m_Rect, m_HelperTypeName)\n\t}\n\n\tvar helperType = typeof(T)\n\tif (m_HelperTypeName != typeof(T).Name) {\n\t\thelperType = typeof(T).Assembly.GetType(typeof(T).Namespace + \".\" + m_HelperTypeName, false)\n\t\tif (helperType == null) {\n\t\t\tDebug.LogWarning(\"Could not find helper type '\" + m_HelperTypeName + \"' in namespace '\" + typeof(T).Namespace + \"'.\")\n\t\t}\n\t}\n\n\tif (helperType != null) {\n\t\tif (m_Helper == null) {\n\t\t\tm_Helper = helperType.GetConstructor(Type.EmptyTypes).Invoke(null) as T\n\t\t}\n\t} else {\n\t\tm_Helper = null\n\t\tm_HelperTypeName = typeof(T).Name\n\t}\n\n\tif (m_Helper == null) {\n\t\tEditorGUI.HelpBox(m_Rect, \"No \" + typeof(T).Name + \" selected.\", MessageType.Error)\n\t}\n}", "CodeBleu_score": 32.549347813678324}, {"code": "public void Draw(){\n\t\tif (m_HelperTypeNames == null) {\n\t\tm_HelperTypeNames = new List<string>();\n\t}\n\tif (m_HelperTypes == null) {\n\t\tm_HelperTypes = new List<Type>();\n\t}\n\tif (m_HelperTypeNames.Count == 0) {\n\t\tm_HelperTypes.Clear();\n\t\tm_HelperTypeNames.Clear();\n\t\tm_HelperTypes.Add(typeof(DefaultHelper));\n\t\tm_HelperTypeNames.Add(\"Default\");\n\t\tm_HelperTypes.Add(typeof(DefaultHelper));\n\t\tm_HelperTypeNames.Add(\"Default\");\n\t\tm_HelperTypes.Add(typeof(DefaultHelper));\n\t\tm_HelperTypeNames.Add(\"Default\");\n\t\tm_HelperTypes.Add(typeof(DefaultHelper));\n\t\tm_HelperTypeNames.Add(\"Default\");\n\t\tm_HelperTypes.Add(typeof(DefaultHelper));\n\t\tm_HelperTypeNames.Add(\"Default\");\n\t\tm_HelperTypes.Add(typeof(DefaultHelper));\n\t\tm_HelperTypeNames.Add(\"Default\");\n\t\tm_HelperTypes.Add(typeof(DefaultHelper));\n\t\tm_HelperTypeNames.Add(\"Default\");\n\t\tm_HelperTypes.Add(typeof(DefaultHelper));\n\t\tm_HelperTypeNames.Add(\"Default\");\n\t\tm_HelperTypes.Add(typeof(DefaultHelper));\n\t\tm_HelperTypeNames.Add(\"Default\");\n\t\tm_HelperTypes.Add(typeof(DefaultHelper));\n\t\tm_HelperTypeNames.Add(\"Default\");\n\t\tm_HelperTypes.Add(typeof(DefaultHelper));\n\t\tm_HelperTypeNames.Add(\"Default\");\n\t\tm_HelperTypes.Add(typeof(DefaultHelper));\n\t\tm_HelperTypeNames.Add(\"Default\");\n\t\tm_HelperTypes.Add(typeof(DefaultHelper));\n\t\tm_HelperTypeNames.Add(\"Default\");\n\t\tm_HelperTypes.Add(typeof(DefaultHelper));\n\t\tm_HelperTypeNames.Add(\"Default\");\n\t\tm_HelperTypes.Add(typeof(DefaultHelper));\n\t\tm_HelperTypeNames.Add(\"Default\");\n\t\tm_HelperTypes.Add(typeof(DefaultHelper));\n\t\tm_HelperTypeNames.Add(\"Default\");\n\t\tm_HelperTypes", "CodeBleu_score": 22.238460009076764}]}
{"instance_id": "957e0aaa6f72", "generation_result": [{"code": "public static void DisableAllLogs(){\n\t\tDebug.Log(\"Disabling all logs...\");\n\n\t// Remove the general logging symbol\n\tstring[] defines = PlayerSettings.GetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup).Split(';');\n\tdefines = Array.FindAll(defines, (string s) => s != \"LOG_ALL\");\n\tPlayerSettings.SetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup, string.Join(\";\", defines));\n\n\t// Remove all other logging symbols\n\tdefines = PlayerSettings.GetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup).Split(';');\n\tforeach (string s in defines) {\n\t\tif (s.StartsWith(\"LOG_\")) {\n\t\t\tPlayerSettings.SetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup, string.Join(\";\", Array.FindAll(defines, (string t) => t != s)));\n\t\t}\n\t}\n\n\tDebug.Log(\"All logs disabled.\");\n}", "CodeBleu_score": 31.16964956439119}, {"code": "public static void DisableAllLogs(){\n\t\tstring[] defines = PlayerSettings.GetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup).Split(';');\n\tList<string> definesList = new List<string>(defines);\n\n\t// Remove the general logging symbol\n\tdefinesList.Remove(\"LOG_ALL\");\n\n\t// Remove the symbols for each log level\n\tforeach (LogType logType in (LogType[])Enum.GetValues(typeof(LogType))) {\n\t\tstring symbol = \"LOG_\" + logType.ToString();\n\t\tif (definesList.Contains(symbol)) {\n\t\t\tdefinesList.Remove(symbol);\n\t\t}\n\t}\n\n\t// Convert the list back to a string and apply it\n\tstring definesString = string.Join(\";\", definesList.ToArray());\n\tPlayerSettings.SetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup, definesString);\n}", "CodeBleu_score": 47.35011632089633}, {"code": "public static void DisableAllLogs(){\n\t\tstring[] defines = PlayerSettings.GetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup).Split(';');\n\tList<string> defineList = new List<string>(defines);\n\tdefineList.Remove(\"ENABLE_LOGS\");\n\tforeach (LogType logType in Enum.GetValues(typeof(LogType))) {\n\t\tdefineList.Remove(logType.ToString());\n\t}\n\tstring newDefines = string.Join(\";\", defineList.ToArray());\n\tPlayerSettings.SetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup, newDefines);\n}", "CodeBleu_score": 29.475560431650173}]}
{"instance_id": "8a544c3d9513", "generation_result": [{"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\tif (type == null) {\n\t\tthrow new NullReferenceException(\"type is null\");\n\t}\n\tif (type == typeof(GameFrameworkComponent)) {\n\t\tthrow new ArgumentException(\"type is not a subclass of GameFrameworkComponent\");\n\t}\n\tfor (GameFrameworkComponent current = GameFrameworkComponent.s_Components; current != null; current = current.m_NextComponent) {\n\t\tif (current.GetType() == type) {\n\t\t\treturn current;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 37.89455834828692}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\treturn GetComponent(type, false);\n}", "CodeBleu_score": 6.971144137987794}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\tGameFrameworkComponent component = null\n\tfor (int i = 0; i < GameFrameworkComponent.m_GameFrameworkComponents.Count; i++) {\n\t\tGameFrameworkComponent gameFrameworkComponent = GameFrameworkComponent.m_GameFrameworkComponents[i]\n\t\tif (gameFrameworkComponent.GetType() == type) {\n\t\t\tcomponent = gameFrameworkComponent\n\t\t\tbreak\n\t\t}\n\t}\n\treturn component\n}", "CodeBleu_score": 30.85115500944471}]}
{"instance_id": "ec304512c0e4", "generation_result": [{"code": "public static void Shutdown(ShutdownType shutdownType){\n\t\tif (shutdownType == ShutdownType.Restart) {\n\t\tLog.Info(\"Restarting game scene...\")\n\t\tSceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex)\n\t} else if (shutdownType == ShutdownType.Quit) {\n\t\tLog.Info(\"Quitting application...\")\n\t\tApplication.Quit()\n\t} else if (shutdownType == ShutdownType.None) {\n\t\tLog.Info(\"Shutdown type is none. Ignoring...\")\n\t} else {\n\t\tLog.Error(\"Invalid shutdown type: \" + shutdownType)\n\t}\n}", "CodeBleu_score": 38.63156131029012}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t\tif (shutdownType == ShutdownType.Restart) {\n\t\tDebug.Log(\"Restarting game...\")\n\t\tSceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex)\n\t}\n\telse if (shutdownType == ShutdownType.Quit) {\n\t\tDebug.Log(\"Quitting game...\")\n\t\tApplication.Quit()\n\t}\n\telse if (shutdownType == ShutdownType.None) {\n\t\tDebug.Log(\"No shutdown action taken...\")\n\t}\n\telse {\n\t\tDebug.LogError(\"Invalid shutdown type!\")\n\t}\n}", "CodeBleu_score": 31.99699442562704}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t\tif (shutdownType == ShutdownType.Restart) {\n\t\tLog.Info(\"Restarting game scene...\")\n\t\tSceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex)\n\t} else if (shutdownType == ShutdownType.Quit) {\n\t\tLog.Info(\"Quitting game...\")\n\t\tApplication.Quit()\n\t}\n\tif (BaseComponent.Instance != null) {\n\t\tBaseComponent.Instance.Shutdown()\n\t}\n\tGameManager.Instance.Shutdown()\n\tGameSettings.Instance.Shutdown()\n\tGameConfiguration.Instance.Shutdown()\n\tGameData.Instance.Shutdown()\n\tGameInput.Instance.Shutdown()\n\tGameManager.Instance.Clear()\n\tGameSettings.Instance.Clear()\n\tGameConfiguration.Instance.Clear()\n\tGameData.Instance.Clear()\n\tGameInput.Instance.Clear()\n\tGameManager.Instance = null\n\tGameSettings.Instance = null\n\tGameConfiguration.Instance = null\n\tGameData.Instance = null\n\tGameInput.Instance = null\n}", "CodeBleu_score": 36.59965185202771}]}
{"instance_id": "5c78a1d4f59d", "generation_result": [{"code": "protected override void Awake(){\n\t\tbase.Awake();\n\tm_ConfigManager = GameEntry.Config as IConfigManager;\n\tif (m_ConfigManager == null) {\n\t\tLog.Fatal(\"ConfigManager is invalid.\");\n\t\treturn;\n\t}\n\n\tm_ConfigManager.ReadDataSuccess += OnReadDataSuccess;\n\tm_ConfigManager.ReadDataFailure += OnReadDataFailure;\n\tif (m_IsAutoReadData) {\n\t\tm_ConfigManager.ReadData();\n\t}\n\n\tif (m_IsAutoReadDataInfo) {\n\t\tm_ConfigManager.ReadDataInfo();\n\t}\n\n\tif (m_IsAutoReadDataVersion) {\n\t\tm_ConfigManager.ReadDataVersion();\n\t}\n\n\tif (m_IsAutoReadDataDependencyAsset) {\n\t\tm_ConfigManager.ReadDataDependencyAsset();\n\t}\n}", "CodeBleu_score": 49.17762509925582}, {"code": "protected override void Awake(){\n\t\tbase.Awake();\n\tm_ConfigManager = GameFrameworkEntry.GetModule<IConfigManager>();\n\tif (m_ConfigManager == null) {\n\t\tLog.Fatal(\"ConfigManager is invalid.\");\n\t\treturn;\n\t}\n\n\tm_ConfigManager.ReadDataSuccess += OnReadDataSuccess;\n\tm_ConfigManager.ReadDataFailure += OnReadDataFailure;\n\tif (m_ReadDataUpdateEventEnabled) {\n\t\tm_ConfigManager.UpdateData += OnUpdateData;\n\t}\n\tif (m_ReadDataDependencyAssetEventEnabled) {\n\t\tm_ConfigManager.DependencyAsset += OnDependencyAsset;\n\t}\n}", "CodeBleu_score": 81.83765614499016}, {"code": "protected override void Awake(){\n\t\tbase.Awake();\n\tm_ConfigManager = GameFrameworkEntry.GetModule<IConfigManager>();\n\tif (m_ConfigManager == null) {\n\t\tLog.Fatal(\"ConfigManager is invalid.\");\n\t\treturn;\n\t}\n\tm_ConfigManager.ReadDataSuccess += OnReadDataSuccess;\n\tm_ConfigManager.ReadDataFailure += OnReadDataFailure;\n\tif (m_ReadDataSuccessEvent != null) {\n\t\tm_ConfigManager.ReadDataSuccess += m_ReadDataSuccessEvent;\n\t}\n\tif (m_ReadDataFailureEvent != null) {\n\t\tm_ConfigManager.ReadDataFailure += m_ReadDataFailureEvent;\n\t}\n\tif (m_UpdateEvent != null) {\n\t\tm_ConfigManager.Update += m_UpdateEvent;\n\t}\n\tif (m_DependencyAssetEvent != null) {\n\t\tm_ConfigManager.DependencyAsset += m_DependencyAssetEvent;\n\t}\n}", "CodeBleu_score": 70.55795054822069}]}
{"instance_id": "fbb36ff9d552", "generation_result": [{"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t\tif (configAsset == null) {\n\t\tLog.Warning(\"Config asset is invalid.\");\n\t\treturn false;\n\t}\n\n\tif (!(configAsset is TextAsset)) {\n\t\tLog.Warning(\"Config asset is not a TextAsset.\");\n\t\treturn false;\n\t}\n\n\tTextAsset textAsset = (TextAsset)configAsset;\n\tstring text = textAsset.text;\n\tstring extension = Path.GetExtension(textAsset.name);\n\tif (extension == \".bytes\") {\n\t\tbyte[] bytes = Convert.FromBase64String(text);\n\t\treturn configManager.ParseBytes(configAssetName, bytes, userData);\n\t}\n\n\treturn configManager.ParseText(configAssetName, text, userData);\n}", "CodeBleu_score": 50.70914427965262}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t\tif (configAsset == null) {\n\t\treturn false\n\t}\n\tTextAsset textAsset = configAsset as TextAsset\n\tif (textAsset == null) {\n\t\treturn false\n\t}\n\tstring extension = Path.GetExtension(textAsset.name)\n\tif (extension == \".bytes\") {\n\t\treturn configManager.ReadBytesData(configAssetName, textAsset.bytes, userData)\n\t}\n\tif (extension == \".xml\") {\n\t\treturn configManager.ReadXmlData(configAssetName, textAsset.text, userData)\n\t}\n\tif (extension == \".json\") {\n\t\treturn configManager.ReadJsonData(configAssetName, textAsset.text, userData)\n\t}\n\tif (extension == \".txt\") {\n\t\treturn configManager.ReadTextData(configAssetName, textAsset.text, userData)\n\t}\n\tLog.Warning(\"Config asset '{0}' is not of a supported type.\", configAssetName)\n\treturn false\n}", "CodeBleu_score": 54.22631491234391}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t\tif (configAsset == null) {\n\t\tDebug.LogWarning(string.Format(\"Config asset '{0}' is invalid.\", configAssetName));\n\t\treturn false;\n\t}\n\tTextAsset textAsset = configAsset as TextAsset;\n\tif (textAsset == null) {\n\t\tDebug.LogWarning(string.Format(\"Config asset '{0}' is not a TextAsset.\", configAssetName));\n\t\treturn false;\n\t}\n\tstring text = textAsset.text;\n\tstring extension = Path.GetExtension(configAssetName);\n\tif (extension == \".bytes\") {\n\t\tbyte[] bytes = Encoding.UTF8.GetBytes(text);\n\t\treturn configManager.ParseBytes(bytes, userData);\n\t}\n\treturn configManager.ParseString(text, userData);\n}", "CodeBleu_score": 56.16357757035215}]}
{"instance_id": "84d744c480ca", "generation_result": [{"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t\tif (configManager == null) {\n\t\tthrow new GameFrameworkException(\"Config manager is invalid.\");\n\t}\n\n\tif (configBytes == null || configBytes.Length <= 0) {\n\t\tthrow new GameFrameworkException(\"Config data is invalid.\");\n\t}\n\n\tif (startIndex < 0 || startIndex >= configBytes.Length) {\n\t\tthrow new GameFrameworkException(\"Start index is invalid.\");\n\t}\n\n\tif (length <= 0 || startIndex + length > configBytes.Length) {\n\t\tthrow new GameFrameworkException(\"Length is invalid.\");\n\t}\n\n\ttry {\n\t\tMemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length, false);\n\t\tBinaryReader binaryReader = new BinaryReader(memoryStream);\n\t\tstring configName = null;\n\t\tstring configValue = null;\n\t\twhile (binaryReader.BaseStream.Position < binaryReader.BaseStream.Length) {\n\t\t\tconfigName = binaryReader.ReadEncryptedString();\n\t\t\tconfigValue = binaryReader.ReadEncryptedString();\n\t\t\tif (!configManager.AddConfig(configName, configValue)) {\n\t\t\t\tLog.Warning(\"Config '{0}' is invalid or duplicate.\", configName);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t} catch (Exception exception) {\n\t\tLog.Warning(\"Parse config data exception, exception is {0}.\", exception.ToString());\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 56.661944852086386}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t\ttry {\n\t\tMemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length);\n\t\tBinaryReader binaryReader = new BinaryReader(memoryStream);\n\t\tint count = binaryReader.ReadInt32();\n\t\tfor (int i = 0; i < count; i++) {\n\t\t\tstring name = binaryReader.ReadEncryptedString();\n\t\t\tstring value = binaryReader.ReadEncryptedString();\n\t\t\tstring desc = binaryReader.ReadEncryptedString();\n\t\t\tstring[] array = desc.Split(new char[]\n\t\t\t{\n\t\t\t\t'|'\n\t\t\t});\n\t\t\tstring configType = array[0];\n\t\t\tstring configFormat = array[1];\n\t\t\tstring configValue = array[2];\n\t\t\tif (!configManager.AddConfig(name, configType, configFormat, configValue)) {\n\t\t\t\tDebug.LogWarning(\"Add config failure. Name: \" + name + \" Value: \" + value + \" Desc: \" + desc);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tcatch (Exception exception) {\n\t\tDebug.LogError(exception.ToString());\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 47.326486440540926}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t\tif (configBytes == null) {\n\t\tLog.Warning(\"Config data bytes is invalid.\");\n\t\treturn false;\n\t}\n\n\tif (configManager == null) {\n\t\tLog.Warning(\"Config manager is invalid.\");\n\t\treturn false;\n\t}\n\n\tif (startIndex < 0 || startIndex >= configBytes.Length) {\n\t\tLog.Warning(\"Start index is invalid.\");\n\t\treturn false;\n\t}\n\n\tif (length < 0 || length > configBytes.Length - startIndex) {\n\t\tLog.Warning(\"Length is invalid.\");\n\t\treturn false;\n\t}\n\n\ttry {\n\t\tusing (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length, false)) {\n\t\t\tusing (BinaryReader binaryReader = new BinaryReader(memoryStream)) {\n\t\t\t\twhile (binaryReader.BaseStream.Position < binaryReader.BaseStream.Length) {\n\t\t\t\t\tstring configName = binaryReader.ReadString();\n\t\t\t\t\tstring configValue = binaryReader.ReadString();\n\t\t\t\t\tif (configManager.AddConfig(configName, configValue)) {\n\t\t\t\t\t\tLog.Info(\"Add config '{0}' ok.\", configName);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tLog.Warning(\"Add config '{0}' fail.\", configName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception ex) {\n\t\tLog.Warning(\"Parse config from byte array exception, exception type = {0}, message = {1}.\", ex.GetType().FullName, ex.Message);\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 64.90367773910948}]}
{"instance_id": "298bb6fa19a4", "generation_result": [{"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t\tif (configManager == null) {\n\t\tthrow new GameFrameworkException(\"Config manager is invalid.\");\n\t}\n\n\tif (configAsset == null) {\n\t\tthrow new GameFrameworkException(\"Config asset is invalid.\");\n\t}\n\n\tstring configAssetName = configAsset.name;\n\tstring configAssetVariant = configAsset.variant;\n\tstring configAssetFullName = configAssetName;\n\tif (!string.IsNullOrEmpty(configAssetVariant)) {\n\t\tconfigAssetFullName = configAssetFullName + \".\" + configAssetVariant;\n\t}\n\n\tif (m_ResourceComponent == null) {\n\t\tthrow new GameFrameworkException(\"You must set resource component first.\");\n\t}\n\n\tm_ResourceComponent.UnloadAsset(configAssetFullName, typeof(TextAsset));\n}", "CodeBleu_score": 44.04842818003998}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t\tif (configManager == null) {\n\t\tthrow new GameFrameworkException(\"Config manager is invalid.\");\n\t}\n\n\tif (configAsset == null) {\n\t\tthrow new GameFrameworkException(\"Config asset is invalid.\");\n\t}\n\n\tconfigManager.GetResourceComponent().UnloadAsset(configAsset);\n}", "CodeBleu_score": 46.49975375524114}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t\tif (configManager == null) {\n\t\tthrow new GameFrameworkException(\"Config manager is invalid.\");\n\t}\n\n\tif (configAsset == null) {\n\t\tthrow new GameFrameworkException(\"Config asset is invalid.\");\n\t}\n\n\tstring configAssetName = configAsset.name;\n\tstring configAssetPath = AssetDatabase.GetAssetPath(configAsset);\n\tif (string.IsNullOrEmpty(configAssetPath)) {\n\t\tthrow new GameFrameworkException(StringUtils.Format(\"Can not get config asset path with name '{}'.\", configAssetName));\n\t}\n\n\tstring configAssetUri = AssetDatabase.AssetPathToGUID(configAssetPath);\n\tif (string.IsNullOrEmpty(configAssetUri)) {\n\t\tthrow new GameFrameworkException(StringUtils.Format(\"Can not get config asset uri with name '{}'.\", configAssetName));\n\t}\n\n\tconfigManager.UnloadAsset(configAssetUri);\n}", "CodeBleu_score": 46.91625556773229}]}
{"instance_id": "fa2003d95e36", "generation_result": [{"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t\treturn new ActiveSceneChangedEventArgs(lastActiveScene, activeScene);\n}", "CodeBleu_score": 12.5399560902824}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t\treturn new ActiveSceneChangedEventArgs(lastActiveScene, activeScene)\n}", "CodeBleu_score": 12.470202243282614}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t ActiveSceneChangedEventArgs activeSceneChangedEventArgs = new ActiveSceneChangedEventArgs();\n activeSceneChangedEventArgs.m_LastActiveScene = lastActiveScene;\n activeSceneChangedEventArgs.m_ActiveScene = activeScene;\n return activeSceneChangedEventArgs;\n }", "CodeBleu_score": 55.17714482588858}]}
{"instance_id": "aba13f34251c", "generation_result": [{"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t\tif (string.IsNullOrEmpty(sceneAssetName)) {\n\t\tLog.Error(\"Scene asset name is invalid.\");\n\t\treturn;\n\t}\n\n\tif (!sceneAssetName.StartsWith(\"Assets/\")) {\n\t\tLog.Error(\"Scene asset name is invalid. Name must start with 'Assets/'.\");\n\t\treturn;\n\t}\n\n\tif (!sceneAssetName.EndsWith(\".unity\")) {\n\t\tLog.Error(\"Scene asset name is invalid. Name must end with '.unity'.\");\n\t\treturn;\n\t}\n\n\tSceneManager.LoadScene(sceneAssetName, LoadSceneMode.Single, priority, userData);\n}", "CodeBleu_score": 64.50452799550277}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t\tif (string.IsNullOrEmpty(sceneAssetName)) {\n\t\tLog.Error(\"Scene asset name is invalid.\");\n\t\treturn;\n\t}\n\n\tif (!sceneAssetName.StartsWith(\"Assets/\")) {\n\t\tLog.Error(\"Scene asset name must start with 'Assets/'.\");\n\t\treturn;\n\t}\n\n\tif (!sceneAssetName.EndsWith(\".unity\")) {\n\t\tLog.Error(\"Scene asset name must end with '.unity'.\");\n\t\treturn;\n\t}\n\n\tSceneManager.LoadScene(sceneAssetName, LoadSceneMode.Single, priority, userData);\n}", "CodeBleu_score": 64.12163155302616}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t\tif (string.IsNullOrEmpty(sceneAssetName)) {\n\t\tLog.Error(\"Scene asset name is invalid.\");\n\t\treturn;\n\t}\n\n\tif (!sceneAssetName.StartsWith(\"Assets/\") || !sceneAssetName.EndsWith(\".unity\")) {\n\t\tLog.Error(\"Scene asset name is invalid. It must start with \\\"Assets/\\\" and end with \\\".unity\\\".\");\n\t\treturn;\n\t}\n\n\tSceneManager.LoadScene(sceneAssetName, LoadSceneMode.Single, priority, userData);\n}", "CodeBleu_score": 65.04357153048556}]}
{"instance_id": "3fe99fba3ce8", "generation_result": [{"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\t// Retrieve the feature registry module\n\tFBinariesPatchFeatureModule& BinariesPatchFeatureModule = FModuleManager::LoadModuleChecked<FBinariesPatchFeatureModule>(\"BinariesPatchFeature\");\n\t// Retrieve the feature registry\n\tFBinariesPatchFeatureRegistry& BinariesPatchFeatureRegistry = BinariesPatchFeatureModule.Get();\n\t// Retrieve the feature registry's feature enumerations\n\tFBinariesPatchFeature::EBinariesPatchFeature BinariesPatchFeature = BinariesPatchFeatureRegistry.GetBinariesPatchFeature();\n\t// Retrieve the feature registry's feature names\n\tTArray<FName> BinariesPatchFeatureNames = BinariesPatchFeatureRegistry.GetBinariesPatchFeatureNames();\n\t// Retrieve the feature registry's feature descriptions\n\tTArray<FText> BinariesPatchFeatureDescriptions = BinariesPatchFeatureRegistry.GetBinariesPatchFeatureDescriptions();\n\t// Retrieve the feature registry's feature tags\n\tTArray<FName> BinariesPatchFeatureTags = BinariesPatchFeatureRegistry.GetBinariesPatchFeatureTags();\n\t// Retrieve the feature registry's feature dependencies\n\tTArray<FName> BinariesPatchFeatureDependencies = BinariesPatchFeatureRegistry.GetBinariesPatchFeatureDependencies();\n\t// Retrieve the feature registry's feature exclusions\n\tTArray<FName> BinariesPatchFeatureExclusions = BinariesPatchFeatureRegistry.GetBinariesPatchFeatureExclusions();\n\t// Retrieve the feature registry's feature exclusion tags\n\tTArray<FName> BinariesPatchFeatureExclusionTags = BinariesPatchFeatureRegistry.GetBinariesPatchFeatureExclusionTags();\n\n\t// Retrieve the feature registry's feature enumerations\n\tFBinariesPatchFeature::EBinariesPatchFeature BinariesPatchFeatureExclusion = BinariesPatchFeatureRegistry.GetBinariesPatchFeatureExclusion();\n\t// Retrieve the feature registry's feature names\n\tTArray<FName> BinariesPatchFeatureExclusionNames = BinariesPatchFeatureRegistry.GetBinariesPatchFeatureExclusionNames();\n\t// Retrieve the feature registry's feature descriptions\n\tTArray<FText> BinariesPatchFeatureExclusionDescriptions = BinariesPatchFeatureRegistry.GetBinariesPatchFeatureExclusionDescriptions();\n\t// Retrieve the feature registry's feature tags\n\tTArray<FName> BinariesPatchFeatureExclusionTags = BinariesPatchFeatureRegistry.GetBinariesPatchFeatureExclusion", "CodeBleu_score": 39.27496080279818}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\t// register the binaries patch feature\n\tIModularFeatures::Get().RegisterModularFeature(TEXT(\"BinariesPatch\"), this);\n\n\t// register callbacks for when modular features are registered or unregistered\n\tFCoreDelegates::OnModularFeatureRegistered.AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n\tFCoreDelegates::OnModularFeatureUnregistered.AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n\n\t// retrieve all registered feature implementations\n\tfor (const FModuleManager::FModuleInfo& ModuleInfo : FModuleManager::Get().GetModules()) {\n\t\tfor (const TSharedRef<IHotPatcherPlugin>& Plugin : ModuleInfo.LoadedPlugins) {\n\t\t\tif (Plugin->GetBinariesPatchFeatureName().IsEmpty()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// add the feature implementation's name to the binaries patch feature enumerations\n\t\t\tif (!IsBinariesPatchFeatureNameValid(Plugin->GetBinariesPatchFeatureName())) {\n\t\t\t\tUE_LOG(LogHotPatcher, Error, TEXT(\"The binaries patch feature name '%s' is not valid.\"), *Plugin->GetBinariesPatchFeatureName());\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (EBinariesPatchFeature::IsBinariesPatchFeatureNameRegistered(Plugin->GetBinariesPatchFeatureName())) {\n\t\t\t\tUE_LOG(LogHotPatcher, Error, TEXT(\"The binaries patch feature name '%s' is already registered.\"), *Plugin->GetBinariesPatchFeatureName());\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tEBinariesPatchFeature::RegisterBinariesPatchFeatureName(Plugin->GetBinariesPatchFeatureName());\n\t\t}\n\t}\n}", "CodeBleu_score": 44.945151138174154}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\tFBinariesPatchFeature::Get().Initialize();\n\n\t// Register our delegate for when a feature is registered\n\tIModularFeatures::Get().OnModularFeatureRegistered().AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n\n\t// Register our delegate for when a feature is unregistered\n\tIModularFeatures::Get().OnModularFeatureUnregistered().AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n}", "CodeBleu_score": 24.854584776764536}]}
{"instance_id": "c702cc0f74b5", "generation_result": [{"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> Configs;\n\tFString TokenName = FString::Printf(TEXT(\"%s=\"), *Token);\n\tint32 StartIndex = Commandline.Find(TokenName);\n\tif (StartIndex != -1) {\n\t\tStartIndex += TokenName.Len();\n\t\tFString ConfigsStr = Commandline.Mid(StartIndex, Commandline.Len() - StartIndex);\n\t\tConfigs = ConfigsStr.ParseIntoArray(TEXT(\",\"), true);\n\t}\n\treturn Configs;\n}", "CodeBleu_score": 48.99495087294128}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> Result;\n\tFString CmdLine = Commandline;\n\tFString CmdLineToken = FString::Printf(TEXT(\"%s=\"),*Token);\n\tif (CmdLine.Contains(CmdLineToken)) {\n\t\tFString TokenValue = CmdLine.RightChop(CmdLineToken.Len());\n\t\tResult = TokenValue.ParseIntoArray(TEXT(\",\"), true);\n\t}\n\treturn Result;\n}", "CodeBleu_score": 52.13071136284583}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> OutValues;\n\tFString TokenName = FString::Printf(TEXT(\"%s=\"), *Token);\n\tFString TokenValue;\n\tif (Commandline.Contains(TokenName)) {\n\t\tint32 StartIndex = Commandline.Find(TokenName) + TokenName.Len();\n\t\tint32 EndIndex = Commandline.Find(TEXT(\" \"), StartIndex);\n\t\tif (EndIndex == -1) {\n\t\t\tTokenValue = Commandline.RightChop(StartIndex);\n\t\t}\n\t\telse {\n\t\t\tTokenValue = Commandline.Mid(StartIndex, EndIndex - StartIndex);\n\t\t}\n\t\tOutValues = TokenValue.ParseIntoArray(TEXT(\",\"), true);\n\t}\n\treturn OutValues;\n}", "CodeBleu_score": 47.72475119546618}]}
{"instance_id": "6a6382275b1d", "generation_result": [{"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\tFString CommandletName = FApp::GetGameName();\n\treturn CommandletName.ToLower().Contains(TEXT(\"cook\"));\n}", "CodeBleu_score": 15.686693106163036}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\t// Retrieve the name of the currently running commandlet\n\tFString CommandletName = FApp::GetProcName();\n\t\n\t// Check if the commandlet name is empty\n\tif (CommandletName.IsEmpty()) {\n\t\t// The commandlet name is empty, so return false\n\t\treturn false;\n\t}\n\t\n\t// The commandlet name is not empty, so check if it matches \"cook\" (case-insensitive)\n\treturn CommandletName.Equals(\"cook\", ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 18.691280728498445}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\tFString CommandletName = FApp::GetCommandletName();\n\treturn !CommandletName.IsEmpty() && CommandletName.Equals(TEXT(\"Cook\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 22.722780045739704}]}
{"instance_id": "6888ed47b6be", "generation_result": [{"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t\tUE_LOG(LogHotPatcher, Log, TEXT(\"UHotPatcherCommandletBase::Update\"));\n\tif (!GIsClient) {\n\t\tUE_LOG(LogHotPatcher, Log, TEXT(\"UHotPatcherCommandletBase::Update Serverless Counting\"));\n\t\tTArray<FString> Params;\n\t\tTArray<FString> Tokens;\n\t\tTMap<FString, FString> ParamVals;\n\t\tTArray<FString> Switches;\n\t\tUCommandlet::ParseCommandLine(*Params, Tokens, Switches, ParamVals);\n\t\tif (Tokens.Num() > 0) {\n\t\t\tFString CommandletName = Tokens[0];\n\t\t\tUE_LOG(LogHotPatcher, Log, TEXT(\"UHotPatcherCommandletBase::Update CommandletName %s\"), *CommandletName);\n\t\t\tif (GConfig->GetString(TEXT(\"Commandlet\"), TEXT(\"EnableServerlessCounting\"), GEngineIni, ServerlessCountingConfig)) {\n\t\t\t\tUE_LOG(LogHotPatcher, Log, TEXT(\"UHotPatcherCommandletBase::Update EnableServerlessCounting\"));\n\t\t\t\tFString ServerlessCountingUrl = GConfig->GetString(TEXT(\"Commandlet\"), TEXT(\"ServerlessCountingUrl\"), GEngineIni, ServerlessCountingUrl);\n\t\t\t\tUE_LOG(LogHotPatcher, Log, TEXT(\"UHotPatcherCommandletBase::Update ServerlessCountingUrl %s\"), *ServerlessCountingUrl);\n\t\t\t\tif (ServerlessCountingUrl.IsEmpty()) {\n\t\t\t\t\tUE_LOG(LogHotPatcher, Log, TEXT(\"UHotPatcherCommandletBase::Update ServerlessCountingUrl is empty\"));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tFString ServerlessCountingToken = GConfig->GetString(TEXT(\"Commandlet\"), TEXT(\"ServerlessCountingToken\"), GEngineIni, ServerlessCountingToken);\n\t\t\t\tUE_LOG(LogHotPatcher, Log, TEXT(\"UHotPatcherCommandletBase::Update ServerlessCountingToken %s\"), *ServerlessCountingToken);\n\t\t\t\tif (ServerlessCountingToken.IsEmpty()) {\n\t\t\t\t\tUE_LOG(LogHotPatcher, Log, TEXT(\"UHotPatcherCommandletBase::Update ServerlessCountingToken is empty\"));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tFString ProjectName", "CodeBleu_score": 40.086357642086526}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t\tUE_LOG(LogHotPatcher, Log, TEXT(\"UHotPatcherCommandletBase::Update\"));\n\tFString CommandletName;\n\tFParse::Value(*Params, TEXT(\"CommandletName=\"), CommandletName);\n\tif (CommandletName.IsEmpty())\n\t{\n\t\tUE_LOG(LogHotPatcher, Error, TEXT(\"CommandletName is empty\"));\n\t\treturn;\n\t}\n\tFString ProjectName;\n\tFParse::Value(*Params, TEXT(\"ProjectName=\"), ProjectName);\n\tif (ProjectName.IsEmpty())\n\t{\n\t\tUE_LOG(LogHotPatcher, Error, TEXT(\"ProjectName is empty\"));\n\t\treturn;\n\t}\n\tFString ProjectConfig;\n\tFParse::Value(*Params, TEXT(\"ProjectConfig=\"), ProjectConfig);\n\tif (ProjectConfig.IsEmpty())\n\t{\n\t\tUE_LOG(LogHotPatcher, Error, TEXT(\"ProjectConfig is empty\"));\n\t\treturn;\n\t}\n\tFString ProjectTargetPlatform;\n\tFParse::Value(*Params, TEXT(\"ProjectTargetPlatform=\"), ProjectTargetPlatform);\n\tif (ProjectTargetPlatform.IsEmpty())\n\t{\n\t\tUE_LOG(LogHotPatcher, Error, TEXT(\"ProjectTargetPlatform is empty\"));\n\t\treturn;\n\t}\n\n\tFString ProjectSavePath;\n\tFParse::Value(*Params, TEXT(\"ProjectSavePath=\"), ProjectSavePath);\n\tif (ProjectSavePath.IsEmpty())\n\t{\n\t\tUE_LOG(LogHotPatcher, Error, TEXT(\"ProjectSavePath is empty\"));\n\t\treturn;\n\t}\n\n\tFString CommandletOptions;\n\tFParse::Value(*Params, TEXT(\"CommandletOptions=\"), CommandletOptions);\n\n\tFString CommandletDesc;\n\tFParse::Value(*Params, TEXT(\"CommandletDesc=\"), CommandletDesc);\n\n\tFString CommandletTargetPlatform;\n\tFParse::Value(*Params, TEXT(\"CommandletTargetPlatform=\"), CommandletTargetPlatform);\n\n\tFString CommandletSavePath;\n\tFParse::Value(*Params, TEXT(\"CommandletSavePath=\"), CommandletSavePath);\n\n\tFString CommandletSaveName;\n\tFParse::Value(*Params, TEXT(\"CommandletSaveName=\"), CommandletSaveName);\n\n\tFString CommandletSave", "CodeBleu_score": 40.665683373260656}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t\tFString CommandletName;\n\tFParse::Value(*Params, TEXT(\"CommandletName=\"), CommandletName);\n\n\tif (CommandletName.IsEmpty()) {\n\t\tUE_LOG(LogHotPatcher, Error, TEXT(\"CommandletName is empty\"));\n\t\treturn;\n\t}\n\n\tauto& Settings = GetMutableDefault<UHotPatcherSettings>();\n\n\tif (!Settings.bEnableServerless) {\n\t\tUE_LOG(LogHotPatcher, Log, TEXT(\"Serverless counting is disabled\"));\n\t\treturn;\n\t}\n\n\tUE_LOG(LogHotPatcher, Log, TEXT(\"Serverless counting is enabled\"));\n\n\tFString ProjectName = FApp::GetProjectName();\n\n\tif (!Settings.bEnableCommandletCount) {\n\t\tUE_LOG(LogHotPatcher, Log, TEXT(\"Commandlet counting is disabled\"));\n\t} else {\n\t\tUE_LOG(LogHotPatcher, Log, TEXT(\"Commandlet counting is enabled\"));\n\t\tFString CommandletCountName = FPaths::GetBaseFilename(CommandletName);\n\t\tFString CommandletCountProjectName = ProjectName;\n\n\t\tif (CommandletCountName.IsEmpty()) {\n\t\t\tUE_LOG(LogHotPatcher, Error, TEXT(\"CommandletCountName is empty\"));\n\t\t\treturn;\n\t\t}\n\n\t\tif (CommandletCountProjectName.IsEmpty()) {\n\t\t\tUE_LOG(LogHotPatcher, Error, TEXT(\"CommandletCountProjectName is empty\"));\n\t\t\treturn;\n\t\t}\n\n\t\tif (CommandletCountName != ProjectName) {\n\t\t\tCommandletCountProjectName = CommandletCountProjectName + TEXT(\"_\") + CommandletCountName;\n\t\t}\n\n\t\tUE_LOG(LogHotPatcher, Log, TEXT(\"CommandletCountName: %s\"), *CommandletCountName);\n\t\tUE_LOG(LogHotPatcher, Log, TEXT(\"CommandletCountProjectName: %s\"), *CommandletCountProjectName);\n\n\t\tFString ServerUrl = Settings.ServerUrl;\n\t\tif (ServerUrl.IsEmpty()) {\n\t\t\tUE_LOG(LogHotPatcher, Error, TEXT(\"ServerUrl is empty\"));\n\t\t\treturn;\n\t\t}\n\n\t\tFString ServerSecret = Settings.ServerSecret;\n\t\tif (ServerSecret.IsEmpty()) {\n\t\t\tUE_LOG(LogHotPatcher, Error, TEXT(\"Server", "CodeBleu_score": 44.626520990233466}]}
{"instance_id": "c467af995f29", "generation_result": [{"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tFString PlatformName = TargetPlatform->PlatformName();\n\treturn PlatformName.StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 36.68564258733266}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tFString PlatformName = TargetPlatform->PlatformName();\n\treturn (PlatformName.StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase));\n}", "CodeBleu_score": 36.85150481911076}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\treturn TargetPlatform->PlatformName().StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) || TargetPlatform->PlatformName().StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) || TargetPlatform->PlatformName().StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 33.32830979487472}]}
{"instance_id": "3df342b1c6f8", "generation_result": [{"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\tif (!Object) {\n\t\treturn;\n\t}\n\n\tif (Object->IsA(UPackage::StaticClass())) {\n\t\tUPackage* Package = const_cast<UPackage*>(CastChecked<UPackage>(Object));\n\t\tif (Package->HasAnyPackageFlags(PKG_PlayInEditor) || Package->HasAnyPackageFlags(PKG_ContainsMap)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (Package->HasAnyPackageFlags(PKG_FilterEditorOnly)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (Package->HasAnyPackageFlags(PKG_CompiledIn) || Package->HasAnyPackageFlags(PKG_ContainsScript)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (Package->HasAnyPackageFlags(PKG_FilterEditorOnly)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (Package->HasAnyPackageFlags(PKG_FilterEditorOnly)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (Package->HasAnyPackageFlags(PKG_FilterEditorOnly)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (Package->HasAnyPackageFlags(PKG_FilterEditorOnly)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (Package->HasAnyPackageFlags(PKG_FilterEditorOnly)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (Package->HasAnyPackageFlags(PKG_FilterEditorOnly)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (Package->HasAnyPackageFlags(PKG_FilterEditorOnly)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (Package->HasAnyPackageFlags(PKG_FilterEditorOnly)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (Package->HasAnyPackageFlags(PKG_FilterEditorOnly)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (Package->HasAnyPackageFlags(PKG_FilterEditorOnly)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (Package->HasAnyPackageFlags(PKG_FilterEditorOnly)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (Package->HasAnyPackageFlags(PKG_FilterEditorOnly)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (Package->HasAnyPackageFlags(PKG_FilterEditorOnly)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (Package->HasAnyPackageFlags(PKG_FilterEditorOnly)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (Package->HasAnyPackageFlags(", "CodeBleu_score": 35.26048887864489}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\tSCOPE_CYCLE_COUNTER(STAT_HotPatcher_FreezePackageTracker_NotifyUObjectCreated);\n\tif (Object->IsA<UPackage>() && Object->GetOutermost() != nullptr) {\n\t\tconst UPackage* Package = CastChecked<UPackage>(Object);\n\t\tconst bool bIsCooked = Package->HasAnyPackageFlags(PKG_PlayInEditor) || Package->HasAnyPackageFlags(PKG_ContainsMap) || Package->HasAnyPackageFlags(PKG_CompiledIn) || Package->HasAnyPackageFlags(PKG_FilterEditorOnly) || Package->HasAnyPackageFlags(PKG_FilterEditorOnly | PKG_ContainsMap);\n\t\tconst bool bIsAlwaysCooked = Package->HasAnyPackageFlags(PKG_AlwaysCooked);\n\t\tconst bool bIsEditorOnly = Package->HasAnyPackageFlags(PKG_FilterEditorOnly);\n\t\tconst bool bIsLocalizedPackage = Package->HasAnyPackageFlags(PKG_Localized);\n\t\tconst bool bIsLocalizedPackageAlwaysCooked = bIsLocalizedPackage && bIsAlwaysCooked;\n\t\tconst bool bIsLocalizedPackageEditorOnly = bIsLocalizedPackage && bIsEditorOnly;\n\t\tconst bool bIsLocalizedPackageCooked = bIsLocalizedPackage && bIsCooked;\n\n\t\tconst bool bIsCookedPackage = bIsCooked || bIsLocalizedPackageCooked;\n\t\tconst bool bIsAlwaysCookedPackage = bIsAlwaysCooked || bIsLocalizedPackageAlwaysCooked;\n\t\tconst bool bIsEditorOnlyPackage = bIsEditorOnly || bIsLocalizedPackageEditorOnly;\n\n\t\tconst bool bIsCookedAsset = Package->HasAnyPackageFlags(PKG_PlayInEditor) || Package->HasAnyPackageFlags(PKG_ContainsMap) || Package->HasAnyPackageFlags(PKG_CompiledIn) || Package->HasAnyPackageFlags(PKG_FilterEditorOnly) || Package->HasAnyPackageFlags(PKG_FilterEditorOnly | PKG_ContainsMap);\n\t\tconst bool bIsAlwaysCookedAsset = Package->HasAnyPackageFlags(PKG_AlwaysCooked);\n\t\tconst bool bIsEditorOnlyAsset = Package->HasAnyPackageFlags(PKG_FilterEditorOnly);\n\t\tconst bool bIsLocalizedAsset = Package->HasAnyPackageFlags(PKG_Localized);\n\t\tconst bool bIsLocalizedAssetAlwaysCooked = bIsLocalizedAsset && bIs", "CodeBleu_score": 36.29922966216}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\tSCOPE_CYCLE_COUNTER(STAT_HotPatcher_FreezePackageTracker_NotifyUObjectCreated);\n\tif (!Object) {\n\t\treturn;\n\t}\n\tUObject* ObjectOuter = Object->GetOuter();\n\tif (ObjectOuter) {\n\t\tUObject* ObjectPackage = ObjectOuter->GetOutermost();\n\t\tif (ObjectPackage) {\n\t\t\t// check if the package is in the set of assets that must be cooked\n\t\t\tif (CookerAssetsSet.Contains(ObjectPackage)) {\n\t\t\t\t// check if the package is in the set of all assets\n\t\t\t\tif (AllAssetsSet.Contains(ObjectPackage)) {\n\t\t\t\t\t// check if the package always requires post load\n\t\t\t\t\tif (AlwaysRequiresPostLoadSet.Contains(ObjectPackage)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// check if the package is not already in the map\n\t\t\t\t\tif (!PackageObjectsMap.Contains(ObjectPackage)) {\n\t\t\t\t\t\t// add the object to the map\n\t\t\t\t\t\tPackageObjectsMap.Add(ObjectPackage, TArray<UObject*>());\n\t\t\t\t\t}\n\t\t\t\t\tPackageObjectsMap[ObjectPackage].Add(const_cast<UObject*>(Object));\n\t\t\t\t\t// clear the RF_NeedPostLoad and RF_NeedPostLoadSubobjects flags from the object\n\t\t\t\t\tObject->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 42.99366490091454}]}
{"instance_id": "fac8b2878c3c", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\t// Iterate through each bulk data record\n\tfor (int32 BulkDataIndex = 0; BulkDataIndex < Record.BulkData.Num(); ++BulkDataIndex)\n\t{\n\t\tconst FBulkData& BulkData = Record.BulkData[BulkDataIndex];\n\t\t// If the bulk data is appended to exports, add it to the corresponding export buffer list in the context\n\t\tif (BulkData.Type == EBulkDataType::Export)\n\t\t{\n\t\t\tContext.ExportBuffers[BulkData.ExportIndex].BulkData.Add(BulkData.BulkData);\n\t\t}\n\t\t// Otherwise, create an output file entry in the context's output files, setting its properties such as filename, buffer, regions, and flags for sidecar status and hash contribution\n\t\telse\n\t\t{\n\t\t\tContext.OutputFiles.Add(FOutputFile(BulkData.BulkData, FName(FString::Printf(TEXT(\"BulkData%d\"), BulkDataIndex)), EFileFlag::NoFlags, EFileFlag::NoFlags, EFileFlag::NoFlags));\n\t\t}\n\t}\n}", "CodeBleu_score": 37.37907494942779}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\tfor (const FRecord::FChunk& Chunk : Record.Chunks)\n\t{\n\t\tif (Chunk.Type == EChunkType::ExportData)\n\t\t{\n\t\t\tif (Chunk.Flags & EChunkFlags::AppendData)\n\t\t\t{\n\t\t\t\tContext.AppendExportData.Add(Chunk.Buffer);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tFExportFileEntry* FileEntry = Context.ExportFiles.Add(Chunk.Buffer);\n\t\t\t\tFileEntry->Flags |= EExportFileFlags::HasBulkData;\n\t\t\t\tFileEntry->BulkDataFlags = Chunk.Flags;\n\t\t\t\tFileEntry->BulkDataHash = Chunk.Hash;\n\t\t\t\tFileEntry->BulkDataHashType = Chunk.HashType;\n\t\t\t\tFileEntry->BulkDataOffset = Chunk.Offset;\n\t\t\t\tFileEntry->BulkDataUncompressedSize = Chunk.UncompressedSize;\n\t\t\t\tFileEntry->BulkDataCompressedSize = Chunk.CompressedSize;\n\t\t\t}\n\t\t}\n\t\telse if (Chunk.Type == EChunkType::ImportData)\n\t\t{\n\t\t\tContext.ImportFiles.Add(Chunk.Buffer);\n\t\t}\n\t\telse if (Chunk.Type == EChunkType::ImportReexportData)\n\t\t{\n\t\t\tContext.ImportReexportFiles.Add(Chunk.Buffer);\n\t\t}\n\t\telse if (Chunk.Type == EChunkType::ImportDeltaData)\n\t\t{\n\t\t\tContext.ImportDeltaFiles.Add(Chunk.Buffer);\n\t\t}\n\t\telse if (Chunk.Type == EChunkType::ImportReexportDeltaData)\n\t\t{\n\t\t\tContext.ImportReexportDeltaFiles.Add(Chunk.Buffer);\n\t\t}\n\t\telse if (Chunk.Type == EChunkType::ImportAssets)\n\t\t{\n\t\t\tContext.ImportAssetsFiles.Add(Chunk.Buffer);\n\t\t}\n\t\telse if (Chunk.Type == EChunkType::ImportAssetsDeltaData)\n\t\t{\n\t\t\tContext.ImportAssetsDeltaFiles.Add(Chunk.Buffer);\n\t\t}\n\t\telse if (Chunk.Type == EChunkType::Metadata)\n\t\t{\n\t\t\tContext.MetadataFiles.Add(Chunk.Buffer);\n\t\t}\n\t\telse if (Chunk.Type == EChunkType::ChunkData)\n\t\t{\n\t\t\tContext.ChunkDataFiles.Add(Chunk.Buffer);\n\t\t}\n\t\telse if (Chunk.Type", "CodeBleu_score": 34.3876970364204}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\tfor (auto& BulkData : Record.BulkData)\n\t{\n\t\tif (BulkData.Type == EBulkDataType::BDT_AppendExportData)\n\t\t{\n\t\t\tContext.AppendExportData.Add(BulkData.BulkData);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tContext.OutputFiles.Add(MakeShared<FExportFileEntry>(Record.Name, Record.Type, Record.Version, Record.Guid, Record.Flags, BulkData.BulkData));\n\t\t}\n\t}\n}", "CodeBleu_score": 30.585963257672656}]}
{"instance_id": "bf46051105c9", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tif (Context.bDiff)\n\t{\n\t\tif (Context.bDiffCompleted)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tFChunkInfo ChunkInfo;\n\t\t\tChunkInfo.Name = FName(TEXT(\"FOOTER\"));\n\t\t\tChunkInfo.Type = EChunkType::FOOTER;\n\t\t\tChunkInfo.Size = 0;\n\t\t\tChunkInfo.Data.Empty();\n\t\t\tContext.ExportDiffBuffers.Add(ChunkInfo);\n\t\t\tContext.bDiffCompleted = true;\n\t\t\treturn;\n\t\t}\n\t}\n\telse\n\t{\n\t\tFChunkInfo ChunkInfo;\n\t\tChunkInfo.Name = FName(TEXT(\"FOOTER\"));\n\t\tChunkInfo.Type = EChunkType::FOOTER;\n\t\tChunkInfo.Size = 0;\n\t\tChunkInfo.Data.Empty();\n\t\tContext.ExportBuffers.Add(ChunkInfo);\n\t\treturn;\n\t}\n}", "CodeBleu_score": 38.555507758013164}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tif (Context.IsDiff()) {\n\t\tif (Context.GetDiffPakIndex() == 0) {\n\t\t\tContext.AddExportBuffer(FExportBundleHeader(EExportCommandType::ExportCommandType_SavePackage, Record.GetPackageFileTag()));\n\t\t}\n\t\telse {\n\t\t\tFExportBundleHeader* Header = Context.GetExportBundleHeader(Context.GetDiffPakIndex() - 1);\n\t\t\tif (Header && Header->CommandType == EExportCommandType::ExportCommandType_SavePackage) {\n\t\t\t\tContext.AddExportBuffer(FExportBundleHeader(EExportCommandType::ExportCommandType_SavePackage, Record.GetPackageFileTag()));\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 39.384261991014505}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tif (Context.bIsCooked) {\n\t\treturn;\n\t}\n\n\t// get the export map from the record\n\tTMap<FString, FExportInfo>& ExportMap = Record.GetExportMap();\n\n\t// get the export map from the context\n\tTMap<FString, FExportInfo>& ContextExportMap = Context.GetExportMap();\n\n\t// get the export map from the context\n\tTMap<FString, FExportInfo>& ContextDiffExportMap = Context.GetDiffExportMap();\n\n\t// check if the export map is empty\n\tif (ExportMap.Num() == 0) {\n\t\treturn;\n\t}\n\n\t// check if the export map is empty\n\tif (ContextExportMap.Num() == 0) {\n\t\treturn;\n\t}\n\n\t// check if the export map is empty\n\tif (ContextDiffExportMap.Num() == 0) {\n\t\treturn;\n\t}\n\n\t// create a footer buffer with the package file tag\n\tFBufferWriter FooterBufferWriter(FMemory::Malloc(sizeof(FHotPatcherPackageFileTag)), sizeof(FHotPatcherPackageFileTag));\n\tFHotPatcherPackageFileTag& FooterFileTag = *(FHotPatcherPackageFileTag*)FooterBufferWriter.GetBuffer();\n\tFooterFileTag = FHotPatcherPackageFileTag(FHotPatcherPackageFileTag::PACKAGE_FILE_TAG_FOOTER);\n\tFooterBufferWriter.Seek(0);\n\n\t// check if the export map is empty\n\tif (ContextExportMap.Num() == 0) {\n\t\treturn;\n\t}\n\n\t// check if the export map is empty\n\tif (ContextDiffExportMap.Num() == 0) {\n\t\treturn;\n\t}\n\n\t// iterate over the export map\n\tfor (auto ExportIt = ContextExportMap.CreateIterator(); ExportIt; ++ExportIt)\n\t{\n\t\t// get the export name\n\t\tFString ExportName = ExportIt.Key();\n\n\t\t// get the export info\n\t\tFExportInfo& ExportInfo = ExportIt.Value();\n\n\t\t// check if the export info is valid\n\t\tif (!ExportInfo.bValid) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// get the export file name\n\t\tFString ExportFileName = ExportInfo.", "CodeBleu_score": 37.32818738574174}]}
{"instance_id": "c0966eddf1ee", "generation_result": [{"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\t\n\tUGDCharacterMovementComponent * MovementComp = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\t\n\tif (MovementComp) {\n\t\tbIsSprinting = MovementComp->bIsSprinting;\n\t\tbIsAimingDownSights = MovementComp->bIsAimingDownSights;\n\t}\n}", "CodeBleu_score": 72.51779589948498}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n\tUGDCharacterMovementComponent * CharacterMovement = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\n\tif (CharacterMovement) {\n\t\tbIsSprinting = CharacterMovement->bIsSprinting;\n\t\tbIsAimingDownSights = CharacterMovement->bIsAimingDownSights;\n\t}\n}", "CodeBleu_score": 80.17391607166532}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n\tauto* MyGDCharacter = Cast<AGDCharacterBase>(Character);\n\n\tif (MyGDCharacter) {\n\t\tif (MyGDCharacter->AbilitySystemComponent) {\n\t\t\tauto* GDAbility = MyGDCharacter->AbilitySystemComponent->GetAbilityByClass(UGDAbility_Sprint::StaticClass());\n\n\t\t\tif (GDAbility) {\n\t\t\t\tbRequestedSprint = GDAbility->GetCurrentActivatableGameplayEffectLevel(GDAbility->GetActivationGameplayEffect()) > 0;\n\t\t\t}\n\t\t}\n\n\t\tauto* GDMovement = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\n\t\tif (GDMovement) {\n\t\t\tbRequestedAimDownSights = GDMovement->bRequestAimDownSights;\n\t\t}\n\t}\n}", "CodeBleu_score": 63.78095739891816}]}
{"instance_id": "f73106356e9d", "generation_result": [{"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\tif (!AbilitySystemComponent) {\n\t\tABILITY_LOG(Error, TEXT(\"UAsyncTaskAttributeChanged::ListenForAttributeChange called with invalid AbilitySystemComponent!\"));\n\t\treturn nullptr;\n\t}\n\tif (!Attribute.IsValid()) {\n\t\tABILITY_LOG(Error, TEXT(\"UAsyncTaskAttributeChanged::ListenForAttributeChange called with invalid Attribute!\"));\n\t\treturn nullptr;\n\t}\n\tUAsyncTaskAttributeChanged* AttributeChangedAsyncTask = NewObject<UAsyncTaskAttributeChanged>();\n\tAttributeChangedAsyncTask->AttributeToWatch = Attribute;\n\tAttributeChangedAsyncTask->AttributeChangedDelegate.BindUObject(AttributeChangedAsyncTask, &UAsyncTaskAttributeChanged::OnAttributeChanged);\n\tAttributeChangedAsyncTask->OnCancelled.BindUObject(AttributeChangedAsyncTask, &UAsyncTaskAttributeChanged::OnCancelled);\n\tAttributeChangedAsyncTask->OnCompleted.BindUObject(AttributeChangedAsyncTask, &UAsyncTaskAttributeChanged::OnCompleted);\n\tif (!AbilitySystemComponent->AsyncAttributeChangeHandler.Add(AttributeChangedAsyncTask->AttributeChangedDelegate)) {\n\t\tABILITY_LOG(Error, TEXT(\"UAsyncTaskAttributeChanged::ListenForAttributeChange failed to add delegate to AsyncAttributeChangeHandler!\"));\n\t\treturn nullptr;\n\t}\n\treturn AttributeChangedAsyncTask;\n}", "CodeBleu_score": 45.27382192629171}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\tif (AbilitySystemComponent == nullptr) {\n\t\tABILITY_LOG(Error, TEXT(\"UAsyncTaskAttributeChanged::ListenForAttributeChange: AbilitySystemComponent is nullptr\"));\n\t\treturn nullptr;\n\t}\n\tif (Attribute == nullptr) {\n\t\tABILITY_LOG(Error, TEXT(\"UAsyncTaskAttributeChanged::ListenForAttributeChange: Attribute is nullptr\"));\n\t\treturn nullptr;\n\t}\n\tif (!AbilitySystemComponent->HasAttribute(Attribute)) {\n\t\tABILITY_LOG(Error, TEXT(\"UAsyncTaskAttributeChanged::ListenForAttributeChange: AbilitySystemComponent does not have Attribute\"));\n\t\treturn nullptr;\n\t}\n\tUAsyncTaskAttributeChanged* Task = NewObject<UAsyncTaskAttributeChanged>();\n\tTask->Attribute = Attribute;\n\tTask->AbilitySystemComponent = AbilitySystemComponent;\n\tTask->OnAttributeChange.AddDynamic(Task, &UAsyncTaskAttributeChanged::OnAttributeChangeDelegate);\n\tTask->OnCancelled.AddDynamic(Task, &UAsyncTaskAttributeChanged::OnCancelledDelegate);\n\treturn Task;\n}", "CodeBleu_score": 51.036052656012224}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\tif (!AbilitySystemComponent) {\n\t\tABILITY_LOG(Warning, TEXT(\"UAsyncTaskAttributeChanged::ListenForAttributeChange: Invalid AbilitySystemComponent!\"));\n\t\treturn nullptr;\n\t}\n\tif (!Attribute.IsValid()) {\n\t\tABILITY_LOG(Warning, TEXT(\"UAsyncTaskAttributeChanged::ListenForAttributeChange: Invalid Attribute!\"));\n\t\treturn nullptr;\n\t}\n\tUAsyncTaskAttributeChanged* Task = NewObject<UAsyncTaskAttributeChanged>();\n\tTask->Attribute = Attribute;\n\tTask->AbilitySystemComponent = AbilitySystemComponent;\n\tTask->OnAttributeChangeDelegate.AddDynamic(Task, &UAsyncTaskAttributeChanged::OnAttributeChange);\n\tTask->OnDestroyDelegate.AddDynamic(Task, &UAsyncTaskAttributeChanged::OnDestroy);\n\tTask->AddToRoot();\n\treturn Task;\n}", "CodeBleu_score": 53.18292153075612}]}
{"instance_id": "a581424c2b31", "generation_result": [{"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (ASC) {\n\t\tASC->AbilitySystemComponent::OnGameplayEffectAddedDelegate.RemoveDynamic(this, &UAsyncTaskCooldownChanged::OnGameplayEffectAdded);\n\t\tASC->AbilitySystemComponent::OnGameplayEffectRemovedDelegate.RemoveDynamic(this, &UAsyncTaskCooldownChanged::OnGameplayEffectRemoved);\n\t\tASC->AbilitySystemComponent::OnGameplayEffectCooldownChangeDelegate.RemoveDynamic(this, &UAsyncTaskCooldownChanged::OnGameplayEffectCooldownChange);\n\t}\n\tMarkAsReady(true);\n\tMarkAsGarbage();\n}", "CodeBleu_score": 25.798155533340218}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (ASC) {\n\t\tASC->AbilitySystemComponent::OnActiveGameplayEffectAddedDelegate.RemoveAll(this);\n\t\tASC->AbilitySystemComponent::OnGameplayEffectRemovedDelegate.RemoveAll(this);\n\t\tASC->AbilitySystemComponent::OnGameplayEffectCooldownElapsedDelegate.RemoveAll(this);\n\t\tASC->AbilitySystemComponent::OnGameplayEffectDurationChangedDelegate.RemoveAll(this);\n\t}\n\tReadyForCompletion = true;\n\tIsReadyForCompletion = true;\n\tMarkAsGarbage();\n}", "CodeBleu_score": 27.215810563526578}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (ASC) {\n\t\t// Remove delegates related to gameplay effect additions and cooldown tag events.\n\t\tASC->AbilitySystemComponent::OnGameplayEffectAddedDelegate.RemoveAll(this);\n\t\tASC->AbilitySystemComponent::OnGameplayEffectRemovedDelegate.RemoveAll(this);\n\t\tASC->AbilitySystemComponent::OnActiveGameplayEffectAddedDelegate.RemoveAll(this);\n\t\tASC->AbilitySystemComponent::OnActiveGameplayEffectRemovedDelegate.RemoveAll(this);\n\t\tASC->AbilitySystemComponent::OnAnyGameplayEffectAddedDelegate.RemoveAll(this);\n\t\tASC->AbilitySystemComponent::OnAnyGameplayEffectRemovedDelegate.RemoveAll(this);\n\t\tASC->AbilitySystemComponent::OnGameplayEffectCooldownChangedDelegate.RemoveAll(this);\n\t\tASC->AbilitySystemComponent::OnGameplayEffectDurationChangedDelegate.RemoveAll(this);\n\t\tASC->AbilitySystemComponent::OnGameplayEffectExecutionCalculationPostExecuteDelegate.RemoveAll(this);\n\t\tASC->AbilitySystemComponent::OnGameplayEffectExecutionCalculationPreExecuteDelegate.RemoveAll(this);\n\t\tASC->AbilitySystemComponent::OnGameplayEffectExecutionCalculationCompleteDelegate.RemoveAll(this);\n\t\tASC->AbilitySystemComponent::OnGameplayEffectExecutionPostExecuteDelegate.RemoveAll(this);\n\t\tASC->AbilitySystemComponent::OnGameplayEffectExecutionPreExecuteDelegate.RemoveAll(this);\n\t\tASC->AbilitySystemComponent::OnGameplayEffectStackCountChangedDelegate.RemoveAll(this);\n\t\tASC->AbilitySystemComponent::OnGameplayEffectTagCountChangedDelegate.RemoveAll(this);\n\t\tASC->AbilitySystemComponent::OnActiveGameplayEffectStackCountChangedDelegate.RemoveAll(this);\n\t\tASC->AbilitySystemComponent::OnActiveGameplayEffectTagCountChangedDelegate.RemoveAll(this);\n\t\tASC->AbilitySystemComponent::OnAnyGameplayEffectStackCountChangedDelegate.RemoveAll(this);\n\t\tASC->AbilitySystemComponent::OnAnyGameplayEffectTagCountChangedDelegate.RemoveAll(this);\n\t}\n\t\n\t// Mark the task as ready to be destroyed and designate it as garbage.\n\tAsyncTask(ENamedThreads::GameThread, [this]() {\n\t\tMarkAsReady(true);\n\t\tMarkAsGarbage();\n\t});\n}", "CodeBleu_score": 20.126180681231386}]}
{"instance_id": "5029df3a2033", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tif (EffectRemoved.SourceObject == nullptr) {\n\t\treturn;\n\t}\n\n\tconst FGameplayEffectSpec & Spec = EffectRemoved.Spec;\n\tconst FGameplayTagContainer & SourceTags = Spec.CapturedSourceTags;\n\tconst FGameplayTagContainer & GrantedTags = Spec.CapturedGrantedTags;\n\n\tif (SourceTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tAsyncTask(ENamedThreads::GameThread, BroadcastEffectStackChange, EffectRemoved.Handle, EffectRemoved.StackCount, EffectRemoved.StackingType);\n\t}\n}", "CodeBleu_score": 50.66428089417735}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\t// If this effect is the one we care about, broadcast the event\n\tif (EffectRemoved.Handle == EffectHandle) {\n\t\t// Get the tags and asset tags from the effect\n\t\tconst FGameplayTagContainer EffectAssetTags = EffectRemoved.Spec.GetAssetTags();\n\t\tconst FGameplayTagContainer EffectGrantedTags = EffectRemoved.Spec.GetGrantedTags();\n\n\t\t// If either of the tag containers contains the specified tag, broadcast the event\n\t\tif (EffectAssetTags.HasTag(Tag) || EffectGrantedTags.HasTag(Tag)) {\n\t\t\tAsyncTask(ENamedThreads::GameThread, [this, EffectRemoved]() {\n\t\t\t\t// Broadcast the event\n\t\t\t\tOnEffectStackChanged.Broadcast(Tag, EffectRemoved.Handle, EffectRemoved.GetStackCount(), EffectRemoved.GetStackCount() - StackChangeDetails);\n\t\t\t});\n\t\t}\n\t}\n}", "CodeBleu_score": 50.039475833913606}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAssetTags(AssetTags);\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tAsyncTaskEffectStackChangedDetails Details;\n\t\tDetails.Handle = EffectRemoved.Handle;\n\t\tDetails.StackCount = EffectRemoved.GetStackCount();\n\t\tDetails.StackChange = -Details.StackCount;\n\t\tDetails.Reason = EGameplayEffectStackingReason::Removed;\n\t\tAsyncTaskEffectStackChanged.Broadcast(EffectGameplayTag, Details);\n\t}\n}", "CodeBleu_score": 71.16573163190701}]}
{"instance_id": "cb1d2823d203", "generation_result": [{"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tUAsyncTaskEffectStackChanged * ListenForGameplayEffectStackChange = NewObject<UAsyncTaskEffectStackChanged>();\n\tListenForGameplayEffectStackChange->AbilitySystemComponent = AbilitySystemComponent;\n\tListenForGameplayEffectStackChange->EffectGameplayTag = InEffectGameplayTag;\n\tListenForGameplayEffectStackChange->OnGameplayEffectAdded.AddDynamic(ListenForGameplayEffectStackChange, &UAsyncTaskEffectStackChanged::OnGameplayEffectAddedCallback);\n\tListenForGameplayEffectStackChange->OnGameplayEffectRemoved.AddDynamic(ListenForGameplayEffectStackChange, &UAsyncTaskEffectStackChanged::OnGameplayEffectRemovedCallback);\n\tif (ListenForGameplayEffectStackChange->AbilitySystemComponent && ListenForGameplayEffectStackChange->EffectGameplayTag.IsValid()) {\n\t\tListenForGameplayEffectStackChange->AbilitySystemComponent->OnGameplayEffectAddedDelegateToSelf.AddDynamic(ListenForGameplayEffectStackChange, &UAsyncTaskEffectStackChanged::OnGameplayEffectAddedCallback);\n\t\tListenForGameplayEffectStackChange->AbilitySystemComponent->OnGameplayEffectRemovedDelegateToSelf.AddDynamic(ListenForGameplayEffectStackChange, &UAsyncTaskEffectStackChanged::OnGameplayEffectRemovedCallback);\n\t\treturn ListenForGameplayEffectStackChange;\n\t}\n\telse {\n\t\tListenForGameplayEffectStackChange->EndTask();\n\t\treturn nullptr;\n\t}\n}", "CodeBleu_score": 66.10044538762342}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tUAsyncTaskEffectStackChanged * MyAsyncTaskEffectStackChanged = NewObject<UAsyncTaskEffectStackChanged>();\n\tif (AbilitySystemComponent && InEffectGameplayTag.IsValid()) {\n\t\tMyAsyncTaskEffectStackChanged->AbilitySystemComponent = AbilitySystemComponent;\n\t\tMyAsyncTaskEffectStackChanged->EffectGameplayTag = InEffectGameplayTag;\n\t\tMyAsyncTaskEffectStackChanged->OnGameplayEffectStackChangeDelegate.AddUObject(MyAsyncTaskEffectStackChanged, &UAsyncTaskEffectStackChanged::OnGameplayEffectStackChange);\n\t\tMyAsyncTaskEffectStackChanged->OnGameplayEffectRemovedDelegate.AddUObject(MyAsyncTaskEffectStackChanged, &UAsyncTaskEffectStackChanged::OnGameplayEffectRemoved);\n\t\tMyAsyncTaskEffectStackChanged->OnGameplayEffectAddedDelegate.AddUObject(MyAsyncTaskEffectStackChanged, &UAsyncTaskEffectStackChanged::OnGameplayEffectAdded);\n\t\tMyAsyncTaskEffectStackChanged->RegisterCallbacks();\n\t\treturn MyAsyncTaskEffectStackChanged;\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 50.01399512755964}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tUAsyncTaskEffectStackChanged * MyAsyncTaskEffectStackChanged = UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(AbilitySystemComponent, InEffectGameplayTag);\n\treturn MyAsyncTaskEffectStackChanged;\n}", "CodeBleu_score": 17.591278882496304}]}
{"instance_id": "6659c2592e93", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tif (EffectRemoved.SourceObject == nullptr) {\n\t\treturn;\n\t}\n\n\tconst FGameplayTagContainer & SourceTags = EffectRemoved.SourceObject->GetGameplayTags();\n\tconst FGameplayTagContainer & GrantedTags = EffectRemoved.GrantedTags;\n\n\tif (SourceTags.HasTag(EffectGameplayTag) || GrantedTags.HasTag(EffectGameplayTag)) {\n\t\tAsyncTask(ENamedThreads::GameThread, [=]() {\n\t\t\tFGameplayEffectContextHandle EffectContext = UAbilitySystemBlueprintLibrary::GetEffectContext(EffectRemoved.Handle);\n\t\t\tFGameplayTagContainer SourceTags = EffectContext.GetSourceTags();\n\t\t\tFGameplayTagContainer GrantedTags = EffectContext.GetGrantedTags();\n\n\t\t\tFGameplayTagContainer Tags;\n\t\t\tif (SourceTags.HasTag(EffectGameplayTag)) {\n\t\t\t\tTags = SourceTags;\n\t\t\t}\n\t\t\telse if (GrantedTags.HasTag(EffectGameplayTag)) {\n\t\t\t\tTags = GrantedTags;\n\t\t\t}\n\n\t\t\tFGameplayEventData Payload;\n\t\t\tPayload.Add(FGameplayTagContainer(EffectGameplayTag), EGameplayEventDataPayloadTypes::EffectEvent);\n\t\t\tPayload.Add(EffectRemoved.Handle, EGameplayEventDataPayloadTypes::EffectContext);\n\t\t\tPayload.Add(Tags, EGameplayEventDataPayloadTypes::TagContainer);\n\t\t\tUAbilitySystemBlueprintLibrary::SendGameplayEventToActor(EffectRemoved.SourceObject, Payload);\n\t\t});\n\t}\n}", "CodeBleu_score": 48.18951670891515}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tFGameplayTagContainer AssetTags;\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.GetModifierInfo().GetAssetTags(AssetTags);\n\tEffectRemoved.GetModifierInfo().GetGrantedTags(GrantedTags);\n\tif (AssetTags.HasTag(EffectGameplayTag) || GrantedTags.HasTag(EffectGameplayTag)) {\n\t\tAsyncTask(ENamedThreads::GameThread, BroadcastStackChange, EffectRemoved.Handle, EffectRemoved.GetStackCount(), EffectRemoved.GetMagnitude());\n\t}\n}", "CodeBleu_score": 57.25636923101831}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tUAbilitySystemComponent* ASC = EffectRemoved.GetInstigatorAbilitySystemComponent();\n\tif (ASC == nullptr) {\n\t\treturn;\n\t}\n\n\tconst FGameplayTagContainer* AssetTags = EffectRemoved.GetAssetTags();\n\tconst FGameplayTagContainer* GrantedTags = EffectRemoved.GetGrantedTags();\n\tfor (FGameplayTag AssetTag : *AssetTags) {\n\t\tif (AssetTag == EffectGameplayTag) {\n\t\t\tfor (FGameplayTag GrantedTag : *GrantedTags) {\n\t\t\t\tif (GrantedTag == EffectGameplayTag) {\n\t\t\t\t\tAsyncTask(ENamedThreads::GameThread, [ASC, EffectRemoved]() {\n\t\t\t\t\t\tFAsyncTaskEffectStackChangedParams Params;\n\t\t\t\t\t\tParams.EffectHandle = EffectRemoved.Handle;\n\t\t\t\t\t\tParams.StackCount = EffectRemoved.GetStackCount();\n\t\t\t\t\t\tASC->OnAsyncTaskEffectStackChange.Broadcast(EffectGameplayTag, Params);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 42.2143294488409}]}
{"instance_id": "a8f7dcc3f1fa", "generation_result": [{"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\tif (AbilitySystemComponent != nullptr) {\n\t\tif (bActivateAbilityOnGranted) {\n\t\t\tAbilitySystemComponent->TryActivateAbility(SpecHandle);\n\t\t}\n\t}\n}", "CodeBleu_score": 59.64046180540337}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\tif (AbilitySystemComponent != nullptr) {\n\t\tif (ActivateAbilityOnGranted) {\n\t\t\tAbilitySystemComponent->TryActivateAbility(Spec.Handle);\n\t\t}\n\t}\n}", "CodeBleu_score": 65.33979303883545}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\n\tif (AbilitySystemComponent != nullptr && AbilitySystemComponent->IsAbilitySystemComponentActive()) {\n\t\tif (ActivateAbilityOnGranted) {\n\t\t\tAbilitySystemComponent->ActivateAbility(Spec.Handle);\n\t\t}\n\t}\n}", "CodeBleu_score": 61.16041137377689}]}
{"instance_id": "72a7ce4b848c", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tSuper::OnMontageEnded(Montage, bInterrupted);\n\t\n\tif (ShouldBroadcastAbilityTaskDelegates()) {\n\t\tUGameplayAbility* OwningAbility = GetOwningAbility();\n\t\tif (OwningAbility) {\n\t\t\tFGameplayTag EventTag = GetEventToWaitFor();\n\t\t\tFGameplayEventData Payload;\n\t\t\tOwningAbility->BroadcastAbilityTaskDelegates(EventTag, Payload);\n\t\t}\n\t}\n\t\n\tEndTask();\n}", "CodeBleu_score": 55.8406664723331}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tSuper::OnMontageEnded(Montage, bInterrupted);\n\n\tif (bInterrupted == false) {\n\t\tif (Completed.IsBound()) {\n\t\t\tFGameplayTag EventTag = FGameplayTag::RequestGameplayTag(FName(\"Ability.Event.Completed\"));\n\t\t\tFGameplayEventData EventData;\n\t\t\tCompleted.Broadcast(EventTag, EventData);\n\t\t}\n\t}\n\n\tEndTask();\n}", "CodeBleu_score": 53.56345720836887}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tSuper::OnMontageEnded(Montage, bInterrupted);\n\tif (!bInterrupted && ShouldBroadcastDelegate()) {\n\t\tBroadcastDelegate(GetAbilitySystemComponent(), EGameplayAbilityTaskDelegate::OnCompleted, GetActivationPredictionKey());\n\t}\n\tEndTask();\n}", "CodeBleu_score": 51.50121200248897}]}
{"instance_id": "cc1cdd579bd4", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tSuper::OnDestroy(AbilityEnded);\n\n\tif (AbilityEnded) {\n\t\tif (ShouldStopMontageOnAbilityEnd()) {\n\t\t\tStopMontage();\n\t\t}\n\t}\n}", "CodeBleu_score": 28.231753553725557}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tSuper::OnDestroy(AbilityEnded);\n\tif (AbilityEnded && ShouldStopMontageOnDestroy()) {\n\t\tStopMontage();\n\t}\n\tif (AbilitySystemComponent != nullptr) {\n\t\tAbilitySystemComponent->RemoveEventTagContainerDelegate(EventTag, OnEventTagAddedDelegateHandle);\n\t}\n}", "CodeBleu_score": 48.532962472048624}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tSuper::OnDestroy(AbilityEnded);\n\tif (AbilityEnded && GetShouldStopMontageOnDestroy()) {\n\t\tStopMontage();\n\t}\n\tif (AbilitySystemComponent) {\n\t\tAbilitySystemComponent->RemoveEventTagContainerDelegate(EventTag, EventTagDelegateHandle);\n\t}\n}", "CodeBleu_score": 48.8705592847557}]}
{"instance_id": "5932070df16f", "generation_result": [{"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tif (AbilitySystemComponent.IsValid() && AbilitySystemComponent.Get()->GetCurrentMontage() != nullptr) {\n\t\tAbilitySystemComponent.Get()->GetCurrentMontage()->OnMontageEnded.RemoveDynamic(this, &UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded);\n\t\tAbilitySystemComponent.Get()->GetCurrentMontage()->OnMontageInterrupted.RemoveDynamic(this, &UGDAT_PlayMontageAndWaitForEvent::OnMontageInterrupted);\n\t\tAbilitySystemComponent.Get()->GetCurrentMontage()->OnBlendOut.RemoveDynamic(this, &UGDAT_PlayMontageAndWaitForEvent::OnMontageBlendOut);\n\t\tAbilitySystemComponent.Get()->StopCurrentMontage(false);\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 27.729790381104607}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tif (AbilitySystemComponent == nullptr) {\n\t\treturn false;\n\t}\n\tif (!AbilitySystemComponent->GetCurrentMontage()) {\n\t\treturn false;\n\t}\n\tAbilitySystemComponent->GetCurrentMontage()->OnMontageBlendingOut.RemoveAll(this);\n\tAbilitySystemComponent->GetCurrentMontage()->OnMontageEnded.RemoveAll(this);\n\tAbilitySystemComponent->StopCurrentMontage(false);\n\treturn true;\n}", "CodeBleu_score": 27.166522344244655}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tif (AbilitySystemComponent == nullptr) {\n\t\treturn false;\n\t}\n\tif (AbilitySystemComponent->GetCurrentMontage() == nullptr) {\n\t\treturn false;\n\t}\n\tAbilitySystemComponent->GetCurrentMontage()->OnMontageBlendingOut.RemoveDynamic(this, &UGDAT_PlayMontageAndWaitForEvent::OnMontageBlendingOut);\n\tAbilitySystemComponent->GetCurrentMontage()->OnMontageEnded.RemoveDynamic(this, &UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded);\n\tif (AbilitySystemComponent->GetCurrentMontage()->bLooping) {\n\t\tAbilitySystemComponent->GetCurrentMontage()->SetLooping(false);\n\t}\n\tif (AbilitySystemComponent->GetCurrentMontage()->bPlaying) {\n\t\tAbilitySystemComponent->GetCurrentMontage()->Stop();\n\t}\n\treturn true;\n}", "CodeBleu_score": 33.719580786070146}]}
{"instance_id": "7049be7f0c75", "generation_result": [{"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\tAActor* TargetActor = Cast<AActor>(OwnerComp.GetBlackboardComponent()->GetValueAsObject(BlackboardKey.GetSelectedKeyID()));\n\tif (TargetActor == nullptr) {\n\t\treturn;\n\t}\n\n\tAController* AIController = Cast<AController>(OwnerComp.GetAIOwner());\n\tif (AIController == nullptr) {\n\t\treturn;\n\t}\n\n\tAActor* AIActor = AIController->GetPawn();\n\tif (AIActor == nullptr) {\n\t\treturn;\n\t}\n\n\tFVector AIToTarget = TargetActor->GetActorLocation() - AIActor->GetActorLocation();\n\tfloat DistanceToTarget = AIToTarget.Size();\n\tbool bTargetInRange = DistanceToTarget <= MaxAttackRange;\n\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(InRangeBlackboardKey.GetSelectedKeyID(), bTargetInRange);\n\n\tif (!bTargetInRange) {\n\t\treturn;\n\t}\n\n\tFVector AIToTargetDirection = AIToTarget.GetSafeNormal();\n\tFVector AIToTargetLocation = AIActor->GetActorLocation() + AIToTargetDirection * 100.0f;\n\tFHitResult HitResult;\n\tFCollisionQueryParams CollisionQueryParams;\n\tCollisionQueryParams.AddIgnoredActor(AIActor);\n\tif (GetWorld()->LineTraceSingleByChannel(HitResult, AIActor->GetActorLocation(), AIToTargetLocation, ECollisionChannel::ECC_Visibility, CollisionQueryParams)) {\n\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(VisibleBlackboardKey.GetSelectedKeyID(), false);\n\t}\n\telse {\n\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(VisibleBlackboardKey.GetSelectedKeyID(), true);\n\t}\n}", "CodeBleu_score": 49.210787400063225}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\tAActor* TargetActor = Cast<AActor>(OwnerComp.GetBlackboardComponent()->GetValueAsObject(BlackboardKey.SelectedTarget));\n\tif (TargetActor == nullptr) {\n\t\treturn;\n\t}\n\n\tAActor* AIControllerActor = OwnerComp.GetAIOwner();\n\tif (AIControllerActor == nullptr) {\n\t\treturn;\n\t}\n\n\tFVector AIControllerLocation = AIControllerActor->GetActorLocation();\n\tFVector TargetLocation = TargetActor->GetActorLocation();\n\n\tfloat Distance = FVector::Dist(AIControllerLocation, TargetLocation);\n\n\tUBlackboardComponent* BlackboardComp = OwnerComp.GetBlackboardComponent();\n\tif (BlackboardComp == nullptr) {\n\t\treturn;\n\t}\n\n\tBlackboardComp->SetValueAsBool(BlackboardKey.InRange, Distance <= MaxAttackRange);\n\tBlackboardComp->SetValueAsBool(BlackboardKey.InLOS, Distance <= MaxAttackRange && TargetActor->LineOfSightTo(AIControllerActor));\n}", "CodeBleu_score": 55.98157668075717}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\tif (OwnerComp.GetAIOwner() == nullptr) {\n\t\treturn;\n\t}\n\n\tAActor* TargetActor = Cast<AActor>(OwnerComp.GetBlackboardComponent()->GetValueAsObject(BlackboardKey.SelectedTarget));\n\tif (TargetActor == nullptr) {\n\t\treturn;\n\t}\n\n\tif (OwnerComp.GetBlackboardComponent()->GetValueAsBool(BlackboardKey.IsAttacking) == false) {\n\t\treturn;\n\t}\n\n\tif (OwnerComp.GetBlackboardComponent()->GetValueAsBool(BlackboardKey.IsTargetVisible) == false) {\n\t\treturn;\n\t}\n\n\tif (OwnerComp.GetBlackboardComponent()->GetValueAsFloat(BlackboardKey.DistanceToTarget) <= MaxAttackRange) {\n\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(BlackboardKey.IsTargetInAttackRange, true);\n\t}\n\telse {\n\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(BlackboardKey.IsTargetInAttackRange, false);\n\t}\n}", "CodeBleu_score": 36.97641007243447}]}
{"instance_id": "031bd0ec3e3c", "generation_result": [{"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tSuper::ExecuteTask(OwnerComp, NodeMemory);\n\n\tAActor* OwnerActor = OwnerComp.GetAIOwner()->GetPawn();\n\tif (OwnerActor == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\n\tUSAttributeComponent* AttributeComponent = Cast<USAttributeComponent>(OwnerActor->GetComponentByClass(USAttributeComponent::StaticClass()));\n\tif (AttributeComponent == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\n\tAttributeComponent->ApplyHealthChange(AttributeComponent->GetMaxHealth());\n\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 48.2802204470443}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tSuper::ExecuteTask(OwnerComp, NodeMemory);\n\tif (OwnerComp.GetAIOwner() == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\tAPawn* pawn = Cast<APawn>(OwnerComp.GetAIOwner()->GetPawn());\n\tif (pawn == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\tUSAttributeComponent* attributeComponent = Cast<USAttributeComponent>(OwnerComp.GetAIOwner()->GetPawn()->FindComponentByClass(USAttributeComponent::StaticClass()));\n\tif (attributeComponent == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\tattributeComponent->ApplyHealthChange(pawn->GetMaxHealth(), false);\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 44.90569845288414}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tSuper::ExecuteTask(OwnerComp, NodeMemory);\n\n\tAAIController* AIController = Cast<AAIController>(OwnerComp.GetAIOwner());\n\tif (AIController != nullptr) {\n\t\tAPawn* Pawn = AIController->GetPawn();\n\t\tif (Pawn != nullptr) {\n\t\t\tUSAttributeComponent* AttributeComponent = Cast<USAttributeComponent>(Pawn->FindComponentByClass(USAttributeComponent::StaticClass()));\n\t\t\tif (AttributeComponent != nullptr) {\n\t\t\t\tAttributeComponent->ChangeHealth(AttributeComponent->GetMaxHealth());\n\t\t\t}\n\t\t}\n\t}\n\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 47.77394853639112}]}
{"instance_id": "6cd6e778e91b", "generation_result": [{"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\t// Register this component with the USTickablesSubsystem in the world.\n\tif (World && GetOwner()) {\n\t\tUSTickablesSubsystem::Get(World).RegisterComponent(GetOwner(), this);\n\t}\n}", "CodeBleu_score": 46.457685836103636}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\tif (GEngine) {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, TEXT(\"USProjectileMovementComponent::BeginPlay\"));\n\t}\n\tif (GWorld) {\n\t\tGWorld->GetSubsystem<USTickablesSubsystem>()->RegisterPrimaryTick(this, ETickingGroup::TG_PostUpdate);\n\t}\n}", "CodeBleu_score": 48.37521735311881}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\tif (GEngine) {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 5.0f, FColor::Red, TEXT(\"BeginPlay\"));\n\t}\n\tif (GetWorld()) {\n\t\tGetWorld()->GetSubsystem<USTickablesSubsystem>()->RegisterPrimaryTick(this, GetPrimaryTickFunction());\n\t}\n}", "CodeBleu_score": 51.97648084795723}]}
{"instance_id": "e90ff27c7f16", "generation_result": [{"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\n\t/*\n\t * If the world is still valid, retrieve the USTickablesSubsystem and deregister the component's primary tick function from the tickables subsystem.\n\t */\n\tif (GEngine) {\n\t\tUSTickablesSubsystem* TickablesSubsystem = Cast<USTickablesSubsystem>(GEngine->GetEngineSubsystem(USTickablesSubsystem::StaticClass()));\n\t\tif (TickablesSubsystem) {\n\t\t\tTickablesSubsystem->UnregisterPrimaryTickableComponent(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 51.928738415033436}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\n\t// Get the tickables subsystem\n\tauto Tickables = GetWorld()->GetSubsystem<USTickablesSubsystem>();\n\tif (Tickables) {\n\t\t// Deregister this component's primary tick function from the tickables subsystem\n\t\tTickables->DeregisterPrimaryTickFunction(this);\n\t}\n}", "CodeBleu_score": 64.05772460571917}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\n\t// Get the tickables subsystem from the world.\n\tauto TickablesSubsystem = USTickablesSubsystem::Get(GetWorld());\n\n\t// If the tickables subsystem was found, then deregister the component's primary tick function from the tickables subsystem.\n\tif (TickablesSubsystem) {\n\t\tTickablesSubsystem->DeregisterPrimaryTickFunction(this);\n\t}\n}", "CodeBleu_score": 54.9707074571101}]}
{"instance_id": "be3e542c07ea", "generation_result": [{"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\tif (bManageSignificance) {\n\t\tif (USSignificanceInterface::ImplementsISignificanceInterface(GetOwner())) {\n\t\t\tISignificanceInterface::Execute_RegisterSignificanceComponent(GetOwner(), this);\n\t\t\tif (bWaitOneFrame) {\n\t\t\t\tRegisterSignificanceComponent();\n\t\t\t}\n\t\t}\n\t}\n\tfor (UParticleSystemComponent* ParticleSystemComponent : TInlineComponentArray<UParticleSystemComponent>(GetOwner()->GetComponentsByClass(UParticleSystemComponent::StaticClass()))) {\n\t\tParticleSystemComponent->OnSystemFinishedPlaying().AddDynamic(this, &USSignificanceComponent::OnParticleSystemFinishedPlaying);\n\t}\n}", "CodeBleu_score": 45.549697854838605}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\t// If we're managing significance, check if we're the owner of the significance interface.\n\tif (bManageSignificance) {\n\t\tif (ISignificanceInterface::Execute_IsSignificanceOwner(GetOwner())) {\n\t\t\t// If we are, register ourself with the significance manager.\n\t\t\tISignificanceManager::Execute_RegisterSignificanceComponent(GetWorld(), this);\n\t\t}\n\t\telse {\n\t\t\tUE_LOG(LogActionRoguelike, Warning, TEXT(\"Owner of SignificanceComponent %s does not implement the significance interface.\"), *(GetOwner()->GetName()));\n\t\t}\n\t}\n\n\t// If we're managing particle significance, check for any particle systems we own.\n\tif (bManageParticleSignificance) {\n\t\tfor (UParticleSystemComponent* ParticleSystemComponent : GetOwner()->GetComponentsByClass(UParticleSystemComponent::StaticClass())) {\n\t\t\tif (ParticleSystemComponent->IsSignificanceManaged()) {\n\t\t\t\t// If we're managing particle significance, register ourself with the significance manager.\n\t\t\t\tISignificanceManager::Execute_RegisterSignificanceComponent(GetWorld(), ParticleSystemComponent);\n\t\t\t}\n\t\t}\n\t}\n\n\t// If we're not waiting one frame, register ourself with the significance manager.\n\tif (!bWaitOneFrame) {\n\t\tISignificanceManager::Execute_RegisterSignificanceComponent(GetWorld(), this);\n\t}\n}", "CodeBleu_score": 51.48906572616286}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\tif (bManageSignificance) {\n\t\tif (Owner->GetClass()->ImplementsInterface(USSignificanceInterface::StaticClass())) {\n\t\t\tISignificanceInterface::Execute_RegisterSignificanceComponent(Owner, this);\n\t\t}\n\t\telse {\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(\"Owner %s does not implement the SignificanceInterface.\"), *(Owner->GetName()));\n\t\t}\n\t}\n\tif (bManageParticleSignificance) {\n\t\tfor (UParticleSystemComponent* ParticleSystem : GetComponentsByClass(UParticleSystemComponent::StaticClass())) {\n\t\t\tif (ParticleSystem->bAutoActivate) {\n\t\t\t\tParticleSystem->DeactivateSystem();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tParticleSystem->SetComponentTickEnabled(false);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 47.136758031628666}]}
{"instance_id": "77824b6415d0", "generation_result": [{"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\t// Retrieve the significance manager\n\tASignificanceManager* manager = GetWorld()->GetAuthGameMode<ASignificanceManager>();\n\tif (manager == nullptr) {\n\t\treturn;\n\t}\n\n\t// Define the significance calculation lambda function\n\tauto calculateSignificance = [this](ASignificanceManager* manager, ASignificanceActor* actor) {\n\t\treturn this->CalculateSignificance(manager, actor);\n\t};\n\n\t// Define the post-significance update lambda function\n\tauto updatePostSignificance = [this](ASignificanceManager* manager, ASignificanceActor* actor) {\n\t\treturn this->UpdatePostSignificance(manager, actor);\n\t};\n\n\t// Register the component with the manager\n\tmanager->RegisterComponent(this, this->GetOwner()->GetClass()->GetName(), calculateSignificance, updatePostSignificance);\n}", "CodeBleu_score": 30.603879318527945}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\tASignificanceManager* Manager = GetWorld()->GetFirstPlayerController()->GetPawn()->FindComponentByClass<ASignificanceManager>();\n\tif (Manager) {\n\t\tManager->RegisterComponent(this, [this](ASignificanceManager* Manager) { return this->CalculateSignificance(Manager); }, [this](ASignificanceManager* Manager) { this->HandlePostSignificanceUpdate(Manager); });\n\t}\n}", "CodeBleu_score": 15.616531412087117}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\tASignificanceManager* Manager = GetWorld()->GetFirstPlayerController()->GetSignificanceManager();\n\tif (Manager) {\n\t\tManager->RegisterComponent(\n\t\t\tFName(TEXT(\"SSignificanceComponent\")),\n\t\t\t[this](const FVector& Location, const FVector& Direction, float Distance) {\n\t\t\t\treturn GetSignificance(Location, Direction, Distance);\n\t\t\t},\n\t\t\t[this](const FVector& Location, const FVector& Direction, float Distance) {\n\t\t\t\treturn HandlePostSignificanceUpdate(Location, Direction, Distance);\n\t\t\t}\n\t\t);\n\t}\n}", "CodeBleu_score": 29.65869868369949}]}
{"instance_id": "dca342410d64", "generation_result": [{"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tif (Actor == nullptr) {\n\t\treturn false;\n\t}\n\n\tif (!Actor->GetClass()->ImplementsInterface(USActorPoolingInterface::StaticClass())) {\n\t\treturn false;\n\t}\n\n\tUSActorPoolingInterface::Execute_ReleaseToPool(Actor);\n\n\treturn true;\n}", "CodeBleu_score": 36.97333003161718}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tif (Actor == nullptr) {\n\t\treturn false;\n\t}\n\n\tif (Actor->IsA(AActor::StaticClass())) {\n\t\tUWorld* World = Actor->GetWorld();\n\t\tif (World == nullptr) {\n\t\t\treturn false;\n\t\t}\n\n\t\tISActorPoolingInterface* PoolingInterface = Cast<ISActorPoolingInterface>(World);\n\t\tif (PoolingInterface == nullptr) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn PoolingInterface->ReleaseToPool(Actor);\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 40.61971534435507}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tif (Actor->GetWorld()->GetGameInstance()->GetSubsystem<USActorPoolingSubsystem>() == nullptr) {\n\t\treturn false;\n\t}\n\n\treturn Actor->GetWorld()->GetGameInstance()->GetSubsystem<USActorPoolingSubsystem>()->ReleaseToPoolInternal(Actor);\n}", "CodeBleu_score": 43.34838672895856}]}
{"instance_id": "5c285130f782", "generation_result": [{"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tSCOPE_CYCLE_COUNTER(STAT_SActorPoolingSubsystem_PrimeActorPool);\n\tUE_LOG(LogTemp, Log, TEXT(\"SActorPoolingSubsystem::PrimeActorPool: %s, %d\"), *ActorClass->GetName(), Amount);\n\n\tFActorSpawnParameters SpawnParameters;\n\tSpawnParameters.SpawnCollisionHandlingOverride = ESpawnActorCollisionHandlingMethod::AlwaysSpawn;\n\tSpawnParameters.Owner = this;\n\tSpawnParameters.Instigator = nullptr;\n\tSpawnParameters.ObjectFlags |= RF_Transient;\n\n\tfor (int32 i = 0; i < Amount; ++i) {\n\t\tAActor* Actor = GetWorld()->SpawnActor<AActor>(ActorClass, SpawnParameters);\n\t\tReleaseActorToPool(Actor);\n\t}\n}", "CodeBleu_score": 56.47993537219067}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tSCOPE_CYCLE_COUNTER(STAT_SActorPoolingSubsystem_PrimeActorPool);\n\n\tFStructuredLogMessage Message = FStructuredLogMessage(TEXT(\"PrimeActorPool\"));\n\tMessage.AddCategory(FName(TEXT(\"SActorPoolingSubsystem\")));\n\tMessage.AddMessage(FText::Format(NSLOCTEXT(\"SActorPoolingSubsystem\", \"PrimeActorPool_LogMessage\", \"Priming actor pool of type {0} with {1} instances.\"), FText::FromString(ActorClass->GetName()), FText::AsNumber(Amount)));\n\n\tUE_LOG(LogSActorPoolingSubsystem, Log, TEXT(\"%s\"), *Message.ToString());\n\n\tFScopedEvent ScopedEvent(FColor::Green, TEXT(\"PrimeActorPool\"), Message);\n\n\tfor (int32 i = 0; i < Amount; ++i) {\n\t\tAActor* Actor = GetWorld()->SpawnActor<AActor>(ActorClass);\n\t\tActor->ReleaseActorToPool();\n\t}\n}", "CodeBleu_score": 54.00788957087508}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tSCOPE_CYCLE_COUNTER(STAT_SActorPoolingSubsystem_PrimeActorPool);\n\tif (Amount <= 0) {\n\t\treturn;\n\t}\n\tUE_LOG(LogTemp, Log, TEXT(\"Priming actor pool of class %s with %d entries\"), *ActorClass->GetName(), Amount);\n\tFScopedEvent ScopedEvent(FString::Printf(TEXT(\"ActorPool_PrimingActorPool_%s\"), *ActorClass->GetName()));\n\tfor (int32 i = 0; i < Amount; i++) {\n\t\tAActor* Actor = GetWorld()->SpawnActor(ActorClass);\n\t\tReleaseActor(Actor);\n\t}\n}", "CodeBleu_score": 48.70859527325608}]}
{"instance_id": "43c013653d6d", "generation_result": [{"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\t// Create a new loading screen attribute object.\n\tFLoadingScreenAttributes LoadingScreenAttributes;\n\t// Set the widget to be the loading screen widget.\n\tLoadingScreenAttributes.WidgetLoadingScreen = LoadingScreenWidget;\n\t// Set the movie to be the loading screen movie.\n\tLoadingScreenAttributes.MovieLoadingScreen = LoadingScreenMovie;\n\t// Set the loading screen's display time to be 5 seconds.\n\tLoadingScreenAttributes.DisplayTime = 5.0f;\n\t// Set the loading screen's fade in/out times to be 0.5 seconds.\n\tLoadingScreenAttributes.FadeInDuration = 0.5f;\n\tLoadingScreenAttributes.FadeOutDuration = 0.5f;\n\t// Set the loading screen's background color to be black.\n\tLoadingScreenAttributes.BackgroundColor = FColor::Black;\n\t// Set the loading screen's padding to be 10 pixels.\n\tLoadingScreenAttributes.PaddingToCenter = 10.0f;\n\t// Set the loading screen's margin to be 10 pixels.\n\tLoadingScreenAttributes.Margin = 10.0f;\n\t// Set the loading screen's movie player to be the movie player.\n\tLoadingScreenAttributes.MoviePlayer = &MoviePlayer;\n\t// Set the loading screen's loading screen texture to be the loading screen texture.\n\tLoadingScreenAttributes.LoadingScreenTexture = LoadingScreenTexture;\n\t// Set the loading screen's loading screen texture to be the loading screen texture.\n\tLoadingScreenAttributes.LoadingScreenMovie = LoadingScreenMovie;\n\t// Set the loading screen's loading screen texture to be the loading screen texture.\n\tLoadingScreenAttributes.MoviePlayer = &MoviePlayer;\n\t// Set the loading screen's loading screen texture to be the loading screen texture.\n\tLoadingScreenAttributes.MoviePlayer = &MoviePlayer;\n\t// Set the loading screen's loading screen texture to be the loading screen texture.\n\tLoadingScreenAttributes.MoviePlayer = &MoviePlayer;\n\t// Set the loading screen's loading screen texture to be the loading screen texture.\n\tLoadingScreenAttributes.MoviePlayer = &MoviePlayer;\n\t// Set the loading screen's loading screen texture to be the loading screen texture.\n\tLoadingScreenAttributes.MoviePlayer = &MoviePlayer;\n\t// Set the loading screen's loading screen texture to be the loading", "CodeBleu_score": 40.61885016496092}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\t// Create a new loading screen widget\n\tTSharedPtr<SLoadingScreen> LoadingScreenWidget = SNew(SLoadingScreen);\n\n\t// Create a loading screen attributes object\n\tFLoadingScreenAttributes LoadingScreenAttributes;\n\n\t// Set the loading screen widget\n\tLoadingScreenAttributes.LoadingScreenWidget = LoadingScreenWidget;\n\n\t// Set the loading screen description\n\tLoadingScreenAttributes.BackgroundColor = FColor::Black;\n\tLoadingScreenAttributes.MoviePlayer = FMoviePlayer::CreateMoviePlayer(TEXT(\"LoadingMovie\"));\n\tLoadingScreenAttributes.MoviePaths.Add(FString(TEXT(\"/Game/LoadingMovies/Maps/\")) + MapName + TEXT(\"_LoadingScreen.LoadingMovie\"));\n\n\t// Set the loading screen attributes\n\tFSlateApplication::Get().SetLoadingScreenAttributes(LoadingScreenAttributes);\n}", "CodeBleu_score": 39.56726431886}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\t// Create the loading screen attributes object\n\tFLoadingScreenAttributes LoadingScreenAttributes;\n\n\t// Set the loading screen widget\n\tLoadingScreenAttributes.LoadingScreenWidgetClass = UUserWidget::StaticClass();\n\n\t// Set the movie to play\n\tLoadingScreenAttributes.MoviePaths.Add(FString(\"LoadingScreen/LoadingScreen.LoadingScreen_C\"));\n\n\t// Set the loading screen description\n\tLoadingScreenAttributes.LoadingText = LOADING_SCREEN_TEXT;\n\n\t// Set the loading screen description\n\tLoadingScreenAttributes.MoviePlayer = CreateMoviePlayer(LoadingScreenAttributes);\n\n\t// Set the loading screen description\n\tLoadingScreenAttributes.BackgroundColor = FColor::Black;\n\n\t// Set the loading screen description\n\tLoadingScreenAttributes.BackgroundColorOpacity = 0.8f;\n\n\t// Set the loading screen description\n\tLoadingScreenAttributes.MinimumLoadingScreenDisplayTime = 2.0f;\n\n\t// Set the loading screen description\n\tLoadingScreenAttributes.bMoviesAreSkippable = true;\n\n\t// Set the loading screen description\n\tLoadingScreenAttributes.bShowMouseCursor = true;\n\n\t// Show the loading screen\n\tFSlateApplication::Get().PushLoadingScreen(LoadingScreenAttributes);\n}", "CodeBleu_score": 49.183082156247174}]}
{"instance_id": "a6979eb925a5", "generation_result": [{"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tif (Instigator == nullptr) {\n\t\treturn;\n\t}\n\n\tif (Instigator->HasAuthority()) {\n\t\tif (bIsInstant) {\n\t\t\tFinishAction_Implementation();\n\t\t}\n\t\telse {\n\t\t\tif (OwnerRole == ENetRole::ROLE_Authority) {\n\t\t\t\tStartTime = FDateTime::Now();\n\t\t\t}\n\n\t\t\tOwnerComponent->ActiveGameplayTags.AppendTags(GrantedGameplayTags);\n\t\t\tOwnerComponent->UpdateReplicatedData();\n\t\t}\n\t}\n\n\tOwnerComponent->OnActionStarted.Broadcast(Instigator);\n}", "CodeBleu_score": 35.79210944716092}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\t// Log the start of the action\n\tUE_LOG(LogAction, Log, TEXT(\"Starting action '%s' for %s\"), *GetFName().ToString(), *Instigator->GetName());\n\n\t// Append granted tags to the owning component's active gameplay tags\n\tUGameplayTagsComponent* GameplayTagsComponent = Instigator->FindComponentByClass<UGameplayTagsComponent>();\n\tif (GameplayTagsComponent) {\n\t\tGameplayTagsComponent->AddGameplayTag(GrantedTags, false);\n\t}\n\n\t// Update replication data\n\tif (Role == ENetRole::ROLE_Authority) {\n\t\tStartTime = GetWorld()->GetTimeSeconds();\n\t}\n\n\t// Broadcast an action started event from the owning component\n\tOnActionStarted.Broadcast(Instigator);\n}", "CodeBleu_score": 38.21615990900919}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tif (Instigator == nullptr) return;\n\n\tif (Role == ENetRole::ROLE_Authority) {\n\t\tStartTime = GetWorld()->GetTimeSeconds();\n\t}\n\n\tAddGameplayTags(Instigator);\n\n\tif (Role == ENetRole::ROLE_Authority) {\n\t\tOnActionStarted.Broadcast();\n\t}\n}", "CodeBleu_score": 35.23351007527271}]}
{"instance_id": "bdec7bf3e2d7", "generation_result": [{"code": "float USActionEffect::GetTimeRemaining() const{\n\t\n\tif (GetOuterUObject() != nullptr && GetOuterUObject()->HasAnyFlags(RF_ClassDefaultObject)) {\n\t\treturn Duration;\n\t}\n\n\tconst UGameInstance* GameInstance = GetWorld()->GetGameInstance();\n\tif (GameInstance != nullptr) {\n\t\tconst UGameStateBase* GameState = GameInstance->GetGameState();\n\t\tif (GameState != nullptr) {\n\t\t\treturn Duration - (GetWorld()->GetTimeSeconds() - GameState->GetWorldTimeSeconds());\n\t\t}\n\t}\n\n\treturn Duration;\n}", "CodeBleu_score": 46.9412101410091}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t\n\tif (const auto GameState = GetWorld()->GetGameState()) {\n\t\treturn Duration - (GetWorld()->GetTimeSeconds() - GameState->GetWorldTimeSeconds());\n\t}\n\treturn Duration;\n}", "CodeBleu_score": 52.61385147587043}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t     return (GameState ? GameState->GetWorld()->GetTimeSeconds() - TimeStarted : Duration); }", "CodeBleu_score": 23.515331308098457}]}
{"instance_id": "db3a7508643b", "generation_result": [{"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (InFocus == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"Null actor passed to Interact\"));\n\t\treturn;\n\t}\n\n\tAPawn* MyPawn = Cast<APawn>(GetOwner());\n\tif (MyPawn == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"MyPawn is null\"));\n\t\treturn;\n\t}\n\n\tInFocus->Interact(MyPawn);\n}", "CodeBleu_score": 62.52205268702067}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (InFocus == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"InFocus is null\"));\n\t} else {\n\t\tAPawn* MyPawn = GetOwner();\n\t\tif (MyPawn == nullptr) {\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(\"MyPawn is null\"));\n\t\t} else {\n\t\t\tInFocus->Interact(MyPawn);\n\t\t}\n\t}\n}", "CodeBleu_score": 52.43084628882446}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (InFocus == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"InFocus is null!\"));\n\t\treturn;\n\t}\n\n\tAPawn* PawnOwner = Cast<APawn>(GetOwner());\n\n\tif (PawnOwner == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"PawnOwner is null!\"));\n\t\treturn;\n\t}\n\n\tInFocus->Interact(PawnOwner);\n}", "CodeBleu_score": 58.36862380107046}]}
{"instance_id": "e6a5224079e6", "generation_result": [{"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\treturn false;\n}", "CodeBleu_score": 12.574816984288956}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tif (DamageCauser == nullptr) {\n\t\treturn false;\n\t}\n\n\tif (TargetActor == nullptr) {\n\t\treturn false;\n\t}\n\n\tif (DamageAmount <= 0.0f) {\n\t\treturn false;\n\t}\n\n\tUSAttributeComponent* AttributeComponent = TargetActor->FindComponentByClass<USAttributeComponent>();\n\tif (AttributeComponent == nullptr) {\n\t\treturn false;\n\t}\n\n\tfloat CurrentHealth = AttributeComponent->GetHealth();\n\tfloat NewHealth = CurrentHealth - DamageAmount;\n\n\tif (NewHealth <= 0.0f) {\n\t\tAttributeComponent->SetHealth(0.0f);\n\t\treturn true;\n\t}\n\n\tAttributeComponent->SetHealth(NewHealth);\n\treturn true;\n}", "CodeBleu_score": 47.14953953521614}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tif (DamageCauser == nullptr) {\n\t\treturn false;\n\t}\n\tif (TargetActor == nullptr) {\n\t\treturn false;\n\t}\n\tUAttributeComponent* TargetActorAttributeComponent = TargetActor->FindComponentByClass<UAttributeComponent>();\n\tif (TargetActorAttributeComponent == nullptr) {\n\t\treturn false;\n\t}\n\tTargetActorAttributeComponent->ModifyAttribute(FGameplayAttribute::Health, -DamageAmount);\n\treturn true;\n}", "CodeBleu_score": 49.96520965329299}]}
{"instance_id": "084a7501fc08", "generation_result": [{"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\tif (NewTime > GetPersonalRecord()) {\n\t\tSetPersonalRecord(NewTime);\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 30.0633945671412}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\tif (NewTime > GetPersonalRecord()) {\n\t\tSetPersonalRecord(NewTime);\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 30.0633945671412}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\t// If the new time is greater than the current personal record, update the record and broadcast the change.\n\tif (NewTime > PersonalRecord) {\n\t\tPersonalRecord = NewTime;\n\t\t// Broadcast the change.\n\t\t// This is a good place to call the function that saves the game.\n\t\t// Call the function that saves the game.\n\t\tSaveGame();\n\t\treturn true;\n\t}\n\t// Otherwise, return false.\n\treturn false;\n}", "CodeBleu_score": 41.92682858318891}]}
{"instance_id": "8e0ccc856566", "generation_result": [{"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (InstigatorPawn != nullptr) {\n\t\tUAttributeComponent* AttributeComponent = Cast<UAttributeComponent>(InstigatorPawn->FindComponentByClass(UAttributeComponent::StaticClass()));\n\t\tif (AttributeComponent != nullptr) {\n\t\t\tif (AttributeComponent->GetHealth() < AttributeComponent->GetMaxHealth()) {\n\t\t\t\tAPlayerState* PlayerState = Cast<APlayerState>(GetWorld()->GetGameState());\n\t\t\t\tif (PlayerState != nullptr) {\n\t\t\t\t\tif (PlayerState->RemoveCredits(RequiredCredits)) {\n\t\t\t\t\t\tAttributeComponent->ApplyHealthChange(HealingAmount);\n\t\t\t\t\t\tOnPowerupUsed.Broadcast();\n\t\t\t\t\t\tGetWorldTimerManager().SetTimer(CooldownTimerHandle, this, &ASPowerup_HealthPotion::EndInteract, CooldownTime, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 42.314363478377075}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (InstigatorPawn != nullptr) {\n\t\tUSAttributeComponent* AttributeComponent = Cast<USAttributeComponent>(InstigatorPawn->FindComponentByClass(USAttributeComponent::StaticClass()));\n\t\tif (AttributeComponent != nullptr) {\n\t\t\tif (AttributeComponent->GetCurrentHealth() != AttributeComponent->GetMaxHealth()) {\n\t\t\t\tASPlayerState* PlayerState = Cast<ASPlayerState>(GetWorld()->GetAuthGameMode()->FindPlayerStateFromController(InstigatorPawn->GetController()));\n\t\t\t\tif (PlayerState != nullptr) {\n\t\t\t\t\tif (PlayerState->RemoveCredits(CreditCost)) {\n\t\t\t\t\t\tAttributeComponent->ApplyHealthChange(HealthChange);\n\t\t\t\t\t\tGetWorld()->GetAuthGameMode()->PowerupCooldown(this, CooldownDuration);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 45.07735806618024}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tSuper::Interact_Implementation(InstigatorPawn);\n\n\tif (IsValid(InstigatorPawn)) {\n\t\tUAttributeComponent* AttributeComponent = InstigatorPawn->FindComponentByClass<UAttributeComponent>();\n\t\tif (IsValid(AttributeComponent)) {\n\t\t\tif (AttributeComponent->GetCurrentHealth() < AttributeComponent->GetMaximumHealth()) {\n\t\t\t\tAPlayerState* PlayerState = UGameplayStatics::GetPlayerState(GetWorld(), 0);\n\t\t\t\tif (IsValid(PlayerState)) {\n\t\t\t\t\tif (PlayerState->RemoveCredits(GetCost())) {\n\t\t\t\t\t\tAttributeComponent->ApplyHealthChange(GetHealingAmount());\n\t\t\t\t\t\tSetCoolDownTimer(GetCoolDownDuration());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 45.721472809682226}]}
{"instance_id": "39a680859a89", "generation_result": [{"code": "void ASProjectileBase::Explode_Implementation(){\n\t\tif (ImpactParticles) {\n\t\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ImpactParticles, GetActorLocation(), FRotator::ZeroRotator, FVector(1.0f), true);\n\t}\n\tif (ImpactSound) {\n\t\tUGameplayStatics::PlaySoundAtLocation(GetWorld(), ImpactSound, GetActorLocation());\n\t}\n\tif (CameraShake) {\n\t\tUGameplayStatics::SpawnCameraShake(GetWorld(), CameraShake, GetActorLocation());\n\t}\n\tif (NiagaraComponent) {\n\t\tNiagaraComponent->ExecuteNiagaraMethod(NiagaraComponentPoolMethodEnum::EMethod::Play);\n\t}\n\tif (AudioComponent) {\n\t\tAudioComponent->Play();\n\t}\n\tif (ProjectileMovementComponent) {\n\t\tProjectileMovementComponent->Stop();\n\t}\n\tif (SphereComponent) {\n\t\tSphereComponent->SetCollisionEnabled(ECollisionEnabled::NoCollision);\n\t}\n\tif (SActorPoolingSubsystem::GetActorPool()) {\n\t\tSActorPoolingSubsystem::GetActorPool()->ReleaseActor(this);\n\t}\n}", "CodeBleu_score": 44.08036390563191}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t\tif (ImpactParticles) {\n\t\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ImpactParticles, GetActorLocation(), FRotator::ZeroRotator, FVector(1.0f), true);\n\t}\n\n\tif (ImpactSound) {\n\t\tUGameplayStatics::PlaySoundAtLocation(GetWorld(), ImpactSound, GetActorLocation());\n\t}\n\n\tif (CameraShake) {\n\t\tUGameplayStatics::SpawnCameraShake(GetWorld(), CameraShake, GetActorLocation());\n\t}\n\n\tif (NiagaraComponent) {\n\t\tNiagaraComponent->ActivateSystem();\n\t}\n\n\tif (AudioComponent) {\n\t\tAudioComponent->Play();\n\t}\n\n\tif (GetActorPool()) {\n\t\tGetActorPool()->ReleaseActor(this);\n\t}\n}", "CodeBleu_score": 47.33278152439526}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t\tif (ImpactParticles != nullptr) {\n\t\tUGameplayStatics::SpawnEmitterAtLocation(this, ImpactParticles, GetActorLocation(), FRotator::ZeroRotator, FVector(1.0f), false);\n\t}\n\n\tif (ImpactSound != nullptr) {\n\t\tUGameplayStatics::PlaySoundAtLocation(this, ImpactSound, GetActorLocation());\n\t}\n\n\tif (CameraShake != nullptr) {\n\t\tUGameplayStatics::SpawnCameraShake(this, CameraShake, GetActorLocation());\n\t}\n\n\tif (NiagaraComponent != nullptr) {\n\t\tNiagaraComponent->ExecuteNiagaraMethod(NiagaraComponentPoolMethodEnum::EComponentMethod::EMM_SpawnParticles);\n\t}\n\n\tif (AudioComponent != nullptr) {\n\t\tAudioComponent->Play();\n\t}\n\n\tif (ProjectileMovementComponent != nullptr) {\n\t\tProjectileMovementComponent->Stop();\n\t}\n\n\tif (ProjectileActorPoolingSubsystem != nullptr) {\n\t\tProjectileActorPoolingSubsystem->ReleaseActor(this);\n\t}\n}", "CodeBleu_score": 47.72415835188562}]}
{"instance_id": "a95c41c6d7b5", "generation_result": [{"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\tUE_LOG(LogSaveGame, Warning, TEXT(\"PlayerState is null!\"));\n\t\treturn nullptr;\n\t}\n\n\tif (GIsEditor && GIsPlayInEditorWorld) {\n\t\tUE_LOG(LogSaveGame, Log, TEXT(\"GetPlayerData: PIE mode, using first player entry\"));\n\t\treturn SaveGameInstance->PlayerData[0];\n\t}\n\n\tfor (FPlayerSaveData* PlayerData : SaveGameInstance->PlayerData) {\n\t\tif (PlayerData->PlayerID == PlayerState->PlayerID) {\n\t\t\treturn PlayerData;\n\t\t}\n\t}\n\n\tUE_LOG(LogSaveGame, Warning, TEXT(\"GetPlayerData: Could not find player data for player %s\"), *PlayerState->GetPlayerName());\n\treturn nullptr;\n}", "CodeBleu_score": 51.72350254914505}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USSaveGame::GetPlayerData: PlayerState is null!\"))\n\t\treturn nullptr\n\t}\n\n\tif (GIsEditor) {\n\t\tif (GEngine->bIsPlayingInEditorWorld) {\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(\"USSaveGame::GetPlayerData: PIE mode detected!\"))\n\n\t\t\t// If we're in PIE mode, use the first saved player entry if available\n\t\t\tfor (FPlayerSaveData* PlayerData : SaveData.PlayerData) {\n\t\t\t\tif (PlayerData != nullptr) {\n\t\t\t\t\treturn PlayerData\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USSaveGame::GetPlayerData: Couldn't find saved player data!\"))\n\t\treturn nullptr\n\t}\n\n\t// Otherwise, use the player's unique ID to find and return the corresponding saved player data\n\tfor (FPlayerSaveData* PlayerData : SaveData.PlayerData) {\n\t\tif (PlayerData != nullptr && PlayerData->PlayerID == PlayerState->UniqueId.ToString()) {\n\t\t\treturn PlayerData\n\t\t}\n\t}\n\n\tUE_LOG(LogTemp, Warning, TEXT(\"USSaveGame::GetPlayerData: Couldn't find saved player data!\"))\n\treturn nullptr\n}", "CodeBleu_score": 43.32204649545803}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USSaveGame::GetPlayerData: PlayerState is null!\"));\n\t\treturn nullptr;\n\t}\n\tif (GIsEditor) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USSaveGame::GetPlayerData: Running in PIE mode!\"));\n\t\treturn GetPlayerSaveData(0);\n\t}\n\telse {\n\t\tFString PlayerID = PlayerState->GetUniqueID().ToString();\n\t\treturn GetPlayerSaveData(PlayerID);\n\t}\n}", "CodeBleu_score": 45.7677882717515}]}
{"instance_id": "58a03c087c47", "generation_result": [{"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\tif (NewPlayer == nullptr) {\n\t\treturn;\n\t}\n\n\tAPlayerState* PlayerState = NewPlayer->PlayerState;\n\tif (PlayerState == nullptr) {\n\t\treturn;\n\t}\n\n\tif (PlayerState->PlayerId == 0) {\n\t\treturn;\n\t}\n\n\tif (PlayerState->PlayerId != NewPlayer->GetLocalPlayer()->GetCachedUniqueNetId().GetUniqueNetId()) {\n\t\treturn;\n\t}\n\n\tif (PlayerState->PlayerId == 0) {\n\t\treturn;\n\t}\n\n\tif (PlayerState->PlayerId != NewPlayer->GetLocalPlayer()->GetCachedUniqueNetId().GetUniqueNetId()) {\n\t\treturn;\n\t}\n\n\tif (PlayerState->PlayerId == 0) {\n\t\treturn;\n\t}\n\n\tif (PlayerState->PlayerId != NewPlayer->GetLocalPlayer()->GetCachedUniqueNetId().GetUniqueNetId()) {\n\t\treturn;\n\t}\n\n\tif (PlayerState->PlayerId == 0) {\n\t\treturn;\n\t}\n\n\tif (PlayerState->PlayerId != NewPlayer->GetLocalPlayer()->GetCachedUniqueNetId().GetUniqueNetId()) {\n\t\treturn;\n\t}\n\n\tif (PlayerState->PlayerId == 0) {\n\t\treturn;\n\t}\n\n\tif (PlayerState->PlayerId != NewPlayer->GetLocalPlayer()->GetCachedUniqueNetId().GetUniqueNetId()) {\n\t\treturn;\n\t}\n\n\tif (PlayerState->PlayerId == 0) {\n\t\treturn;\n\t}\n\n\tif (PlayerState->PlayerId != NewPlayer->GetLocalPlayer()->GetCachedUniqueNetId().GetUniqueNetId()) {\n\t\treturn;\n\t}\n\n\tif (PlayerState->PlayerId == 0) {\n\t\treturn;\n\t}\n\n\tif (PlayerState->PlayerId != NewPlayer->GetLocalPlayer()->GetCachedUniqueNetId().GetUniqueNetId()) {\n\t\treturn;\n\t}\n\n\tif (PlayerState->PlayerId == 0) {\n\t\treturn;\n\t}\n\n\tif (PlayerState->PlayerId != NewPlayer->GetLocalPlayer()->GetCachedUniqueNetId().GetUniqueNetId()) {\n\t\treturn;\n\t}\n\n\tif (PlayerState->Player", "CodeBleu_score": 34.70475850969083}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\tcheck(NewPlayer);\n\n\tif (!NewPlayer->PlayerState) {\n\t\treturn;\n\t}\n\n\tAPlayerState* PlayerState = Cast<APlayerState>(NewPlayer->PlayerState);\n\n\tif (!PlayerState) {\n\t\treturn;\n\t}\n\n\tif (PlayerState->bIsSpectator) {\n\t\treturn;\n\t}\n\n\tUWorld* World = NewPlayer->GetWorld();\n\n\tif (!World) {\n\t\treturn;\n\t}\n\n\tUGameInstance* GameInstance = World->GetGameInstance();\n\n\tif (!GameInstance) {\n\t\treturn;\n\t}\n\n\tUSSaveGameSubsystem* SaveGameSubsystem = GameInstance->GetSubsystem<USSaveGameSubsystem>();\n\n\tif (!SaveGameSubsystem) {\n\t\treturn;\n\t}\n\n\tUSSaveGame* SaveGame = SaveGameSubsystem->GetSaveGame();\n\n\tif (!SaveGame) {\n\t\treturn;\n\t}\n\n\tif (SaveGame->IsValidSaveGame()) {\n\t\tSaveGameSubsystem->LoadPlayerStateFromSaveGame(PlayerState);\n\t}\n}", "CodeBleu_score": 49.829824351236326}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\t// Get the player's state.\n\tAPlayerState* PlayerState = NewPlayer->PlayerState;\n\tif (!PlayerState) {\n\t\treturn;\n\t}\n\n\t// Ensure the player's state is valid.\n\tif (!PlayerState->IsA(APlayerStateRoguelike::StaticClass())) {\n\t\treturn;\n\t}\n\n\t// Get the player's gameplay interface.\n\tUGameplayStatics::GetPlayerController(GetWorld(), 0)->GetGameInstance()->GetSubsystem<USaveGameSubsystem>()->HandleStartingNewPlayer(PlayerState);\n}", "CodeBleu_score": 39.87155248836451}]}
{"instance_id": "c5bd4c059b71", "generation_result": [{"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\t// Get the current save game.\n\tauto CurrentSaveGame = GetSaveGame();\n\n\t// Clear the save game.\n\tCurrentSaveGame->ClearSaveGame();\n\n\t// Get the game state.\n\tauto GameState = GetWorld()->GetGameState();\n\n\t// Get the player states from the game state.\n\tauto PlayerStates = GameState->GetPlayerArray();\n\n\t// Iterate through the player states.\n\tfor (auto PlayerState : PlayerStates) {\n\t\t// Get the player ID.\n\t\tauto PlayerID = PlayerState->GetUniqueID();\n\n\t\t// Get the player state.\n\t\tauto PlayerStateObject = Cast<UPlayerState>(PlayerState);\n\n\t\t// Create a save game for the player state.\n\t\tauto PlayerSaveGame = MakeShareable(new FSSaveGame(PlayerID));\n\n\t\t// Serialize the player state.\n\t\tTArray<uint8> PlayerStateData;\n\t\tFObjectAndNameAsStringProxyArchive Ar(PlayerStateData);\n\t\tPlayerStateObject->Serialize(Ar);\n\n\t\t// Save the player state data to the save game.\n\t\tPlayerSaveGame->PlayerStateData = PlayerStateData;\n\n\t\t// Add the player save game to the current save game.\n\t\tCurrentSaveGame->PlayerSaveGames.Add(PlayerSaveGame);\n\t}\n\n\t// Iterate through all actors in the world.\n\tfor (auto Actor : TActorRange<AActor>(GetWorld())) {\n\t\t// Get the actor ID.\n\t\tauto ActorID = Actor->GetUniqueID();\n\n\t\t// Get the actor interface.\n\t\tauto ActorInterface = Cast<IActionRoguelikeInterface>(Actor);\n\n\t\t// Check if the actor implements the interface.\n\t\tif (ActorInterface) {\n\t\t\t// Create a save game for the actor.\n\t\t\tauto ActorSaveGame = MakeShareable(new FSSaveGame(ActorID));\n\n\t\t\t// Serialize the actor data.\n\t\t\tTArray<uint8> ActorData;\n\t\t\tFObjectAndNameAsStringProxyArchive Ar(ActorData);\n\t\t\tActor->Serialize(Ar);\n\n\t\t\t// Save the actor data to the save game.\n\t\t\tActorSaveGame->ActorData = ActorData;\n\n\t\t\t// Save the actor name to the save game.\n\t\t\tActorSaveGame->ActorName = Actor->GetName();\n\n\t\t\t// Save the actor transform to the save game.\n\t\t\t", "CodeBleu_score": 38.81492703447864}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\t// Get the game state and the player states\n\tconst auto GameState = GetWorld()->GetGameState<AActionRoguelikeGameState>();\n\tconst auto PlayerStates = GameState->PlayerArray;\n\n\t// Clear the current save game\n\tCurrentSaveGame.Clear();\n\n\t// Iterate through the player states and save player data\n\tfor (const auto PlayerState : PlayerStates) {\n\t\t// Get the player id\n\t\tconst auto PlayerId = PlayerState->PlayerId;\n\n\t\t// Get the player data for the current player\n\t\tconst auto PlayerData = GetPlayerData(PlayerId);\n\n\t\t// Add the player data to the save game\n\t\tCurrentSaveGame.PlayerData.Add(PlayerId, PlayerData);\n\t}\n\n\t// Iterate through all actors in the world\n\tfor (const auto Actor : TActorRange<AActor>(GetWorld())) {\n\t\t// Check if the actor implements the ISaveGameData interface\n\t\tif (Actor->GetClass()->ImplementsInterface(USaveGameData::StaticClass())) {\n\t\t\t// Get the save game data from the actor\n\t\t\tconst auto SaveGameData = Cast<USaveGameData>(Actor);\n\n\t\t\t// Get the actor data\n\t\t\tconst auto ActorData = SaveGameData->GetSaveData();\n\n\t\t\t// Add the actor data to the save game\n\t\t\tCurrentSaveGame.ActorData.Add(Actor->GetPathName(), ActorData);\n\t\t}\n\t}\n\n\t// Write the save game to a slot\n\tWriteSaveGameToSlot(CurrentSaveGame);\n\n\t// Broadcast an event to signal the save is complete\n\tOnSaveComplete.Broadcast();\n}", "CodeBleu_score": 36.16735086339766}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\tUE_LOG(LogTemp, Log, TEXT(\"Writing save game\"));\n\n\t// Get the game state\n\tUWorld* World = GetWorld();\n\tif (World == nullptr) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"WriteSaveGame: World is nullptr\"));\n\t\treturn;\n\t}\n\n\tAGameStateBase* GameState = World->GetGameState();\n\tif (GameState == nullptr) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"WriteSaveGame: GameState is nullptr\"));\n\t\treturn;\n\t}\n\n\t// Get the save game\n\tUSaveGame* SaveGame = GetSaveGame();\n\tif (SaveGame == nullptr) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"WriteSaveGame: SaveGame is nullptr\"));\n\t\treturn;\n\t}\n\n\t// Clear the save game\n\tSaveGame->ClearSaveGame();\n\n\t// Save the game state\n\tSaveGame->SaveGameState(GameState);\n\n\t// Save the player data\n\tfor (APlayerState* PlayerState : GameState->PlayerArray) {\n\t\tSaveGame->SavePlayerState(PlayerState);\n\t}\n\n\t// Save the actor data\n\tfor (AActor* Actor : TActorRange<AActor>(World)) {\n\t\tSaveGame->SaveActorData(Actor);\n\t}\n\n\t// Write the save game to a slot\n\tSaveGame->WriteSaveGameToSlot();\n\n\t// Broadcast an event to signal the save is complete\n\tFSaveGameSubsystemEvents::Get().OnSaveGameComplete.Broadcast();\n}", "CodeBleu_score": 41.44196691938382}]}
{"instance_id": "0d7043a0bff0", "generation_result": [{"code": "void FrameworkConfig::draw_themes(){\n\t\tstatic int theme_index = 0;\n\tstatic int font_size = 12;\n\tstatic bool font_size_changed = false;\n\n\tif (ImGui::BeginCombo(\"Theme\", FrameworkConfig::theme_names[theme_index])) {\n\t\tfor (int i = 0; i < IM_ARRAYSIZE(FrameworkConfig::theme_names); i++) {\n\t\t\tconst bool is_selected = (theme_index == i);\n\t\t\tif (ImGui::MenuItem(FrameworkConfig::theme_names[i], NULL, is_selected)) {\n\t\t\t\ttheme_index = i;\n\t\t\t\tFrameworkConfig::theme_index = theme_index;\n\t\t\t\tFrameworkConfig::font_size = font_size;\n\t\t\t\tFrameworkConfig::font_size_changed = font_size_changed;\n\t\t\t\tImGui::GetIO().Fonts->Clear();\n\t\t\t\tImGui::GetIO().Fonts->AddFontFromFileTTF(FrameworkConfig::theme_paths[theme_index], font_size);\n\t\t\t\tImGui::GetIO().Fonts->Build();\n\t\t\t}\n\t\t\tif (is_selected)\n\t\t\t\tImGui::SetItemDefaultFocus();\n\t\t}\n\t\tImGui::EndCombo();\n\t}\n\n\tImGui::SameLine();\n\tImGui::Text(\"Font Size\");\n\tImGui::SameLine();\n\tImGui::PushItemWidth(100);\n\tImGui::SliderInt(\"##font_size\", &font_size, 8, 20);\n\tImGui::PopItemWidth();\n\tif (font_size != FrameworkConfig::font_size) {\n\t\tfont_size_changed = true;\n\t\tFrameworkConfig::font_size = font_size;\n\t}\n}", "CodeBleu_score": 36.48785145297633}, {"code": "void FrameworkConfig::draw_themes(){\n\t\t// Draw the theme selection UI\n\tImGui::Begin(\"Theme Selector\", &show_theme_selector);\n\tImGui::Text(\"Theme:\");\n\tImGui::RadioButton(\"Light\", &current_theme, 0);\n\tImGui::SameLine();\n\tImGui::RadioButton(\"Dark\", &current_theme, 1);\n\tImGui::Separator();\n\tImGui::Text(\"Font Size:\");\n\tImGui::SliderInt(\"##font_size\", &font_size, 8, 32);\n\tImGui::End();\n\n\t// If the font size has been modified, update the font size in the framework\n\tif (font_size != Framework::get_font_size()) {\n\t\tFramework::set_font_size(font_size);\n\t}\n}", "CodeBleu_score": 39.68471328977834}, {"code": "void FrameworkConfig::draw_themes(){\n\t\tif (ImGui::BeginCombo(\"Theme\", \"Dark\")) {\n\t\tif (ImGui::MenuItem(\"Dark\")) {\n\t\t\tImGui::GetIO().ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;\n\t\t\tImGui::GetIO().ConfigFlags |= ImGuiConfigFlags_DockingEnable;\n\t\t\tImGui::GetIO().ConfigFlags |= ImGuiConfigFlags_ViewportsEnable;\n\t\t\tImGui::GetIO().ConfigFlags |= ImGuiConfigFlags_ViewportsNoTaskBarIcons;\n\t\t\tImGui::GetIO().ConfigFlags |= ImGuiConfigFlags_ViewportsNoMerge;\n\t\t\tImGui::GetIO().ConfigFlags |= ImGuiConfigFlags_ViewportsNoAutoMerge;\n\t\t\tImGui::GetIO().ConfigFlags |= ImGuiConfigFlags_ViewportsNoDecoration;\n\t\t\tImGui::GetIO().ConfigFlags |= ImGuiConfigFlags_ViewportsNoDefaultParent;\n\t\t\tImGui::GetIO().ConfigFlags |= ImGuiConfigFlags_ViewportsNoVieportMenuButton;\n\t\t\tImGui::GetIO().ConfigFlags |= ImGuiConfigFlags_ViewportsNoSavedSettings;\n\t\t\tImGui::GetIO().ConfigFlags |= ImGuiConfigFlags_DockingEnable;\n\t\t\tImGui::GetIO().ConfigFlags |= ImGuiConfigFlags_ViewportsEnable;\n\t\t\tImGui::GetIO().ConfigFlags |= ImGuiConfigFlags_ViewportsNoTaskBarIcons;\n\t\t\tImGui::GetIO().ConfigFlags |= ImGuiConfigFlags_ViewportsNoMerge;\n\t\t\tImGui::GetIO().ConfigFlags |= ImGuiConfigFlags_ViewportsNoAutoMerge;\n\t\t\tImGui::GetIO().ConfigFlags |= ImGuiConfigFlags_ViewportsNoDecoration;\n\t\t\tImGui::GetIO().ConfigFlags |= ImGuiConfigFlags_ViewportsNoDefaultParent;\n\t\t\tImGui::GetIO().ConfigFlags |= ImGuiConfigFlags_ViewportsNoVieportMenuButton;\n\t\t\tImGui::GetIO().ConfigFlags |= ImGuiConfigFlags_ViewportsNoSavedSettings;\n\t\t\tImGui::GetIO().ConfigFlags |= ImGuiConfigFlags_DockingEnable;\n\t\t\tImGui::GetIO().ConfigFlags |= ImGuiConfigFlags_ViewportsEnable;\n\t\t\tImGui::GetIO().ConfigFlags |= ImGuiConfigFlags_ViewportsNoTaskBarIcons;\n\t\t\tImGui::GetIO().ConfigFlags |= ImGuiConfigFlags_ViewportsNoMerge;\n\t\t\tImGui::GetIO().ConfigFlags |= ImGuiConfigFlags_ViewportsNoAutoMerge;\n\t\t\tImGui::GetIO().ConfigFlags |= ImGuiConfigFlags_ViewportsNo", "CodeBleu_score": 34.39408120363082}]}
{"instance_id": "e7f81d1dee95", "generation_result": [{"code": "void FrameworkConfig::draw_main() {\n\t\tImGui::SetNextWindowSize(ImVec2(400, 300), ImGuiCond_FirstUseEver);\n\tImGui::Begin(\"Main Configuration\");\n\n\tImGui::Text(\"Menu Key\");\n\tImGui::SameLine();\n\tImGui::PushItemWidth(-1);\n\tImGui::InputInt(\"##menu_key\", &menu_key, 0, 0, ImGuiInputTextFlags_CharsHexadecimal);\n\tImGui::PopItemWidth();\n\n\tImGui::Text(\"Show Cursor Key\");\n\tImGui::SameLine();\n\tImGui::PushItemWidth(-1);\n\tImGui::InputInt(\"##show_cursor_key\", &show_cursor_key, 0, 0, ImGuiInputTextFlags_CharsHexadecimal);\n\tImGui::PopItemWidth();\n\n\tImGui::Text(\"Remember Menu State\");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##remember_menu_state\", &remember_menu_state);\n\n\tImGui::Text(\"Enable L3 + R3 Toggle\");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##enable_l3_r3_toggle\", &enable_l3_r3_toggle);\n\n\tImGui::Text(\"Always Show Cursor\");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##always_show_cursor\", &always_show_cursor);\n\n\tImGui::Text(\"Log Level\");\n\tImGui::SameLine();\n\tImGui::PushItemWidth(-1);\n\tImGui::Combo(\"##log_level\", &log_level, \"Trace\\0Debug\\0Info\\0Warn\\0Error\\0Critical\\0Off\\0\");\n\tImGui::PopItemWidth();\n\n\tif (log_level >= 0 && log_level <= 6) {\n\t\tspdlog::set_level(spdlog::level::level_enum(log_level));\n\t}\n\n\tImGui::End();\n}", "CodeBleu_score": 46.3334192027416}, {"code": "void FrameworkConfig::draw_main() {\n\t\tImGui::Begin(\"Main\");\n\tImGui::Text(\"Menu Key\");\n\tImGui::SameLine();\n\tImGui::PushItemWidth(100);\n\tImGui::InputInt(\"##menu_key\", &menu_key);\n\tImGui::PopItemWidth();\n\tImGui::Text(\"Show Cursor Key\");\n\tImGui::SameLine();\n\tImGui::PushItemWidth(100);\n\tImGui::InputInt(\"##show_cursor_key\", &show_cursor_key);\n\tImGui::PopItemWidth();\n\tImGui::Text(\"Remember Menu State\");\n\tImGui::SameLine();\n\tImGui::PushItemWidth(100);\n\tImGui::Checkbox(\"##remember_menu_state\", &remember_menu_state);\n\tImGui::PopItemWidth();\n\tImGui::Text(\"Enable L3 + R3 Toggle\");\n\tImGui::SameLine();\n\tImGui::PushItemWidth(100);\n\tImGui::Checkbox(\"##enable_l3_r3_toggle\", &enable_l3_r3_toggle);\n\tImGui::PopItemWidth();\n\tImGui::Text(\"Always Show Cursor\");\n\tImGui::SameLine();\n\tImGui::PushItemWidth(100);\n\tImGui::Checkbox(\"##always_show_cursor\", &always_show_cursor);\n\tImGui::PopItemWidth();\n\tImGui::Text(\"Log Level\");\n\tImGui::SameLine();\n\tImGui::PushItemWidth(100);\n\tImGui::Combo(\"##log_level\", &log_level, \"Trace\\0Debug\\0Info\\0Warn\\0Error\\0Critical\\0Off\\0\");\n\tImGui::PopItemWidth();\n\tif (log_level >= 0 && log_level <= 5) {\n\t\tspdlog::set_level(static_cast<spdlog::level::level_enum>(log_level));\n\t}\n\tImGui::End();\n}", "CodeBleu_score": 46.797659644547494}, {"code": "void FrameworkConfig::draw_main() {\n\t\tImGui::SetNextWindowSize(ImVec2(300, 200), ImGuiCond_FirstUseEver);\n\tif (!ImGui::Begin(\"Main Configuration\", &FrameworkConfig::config.menu.show_main_config, ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoResize)) {\n\t\tImGui::End();\n\t\treturn;\n\t}\n\tImGui::Text(\"Menu Key\");\n\tImGui::SameLine();\n\tImGui::PushItemWidth(-1);\n\tImGui::InputInt(\"##menu_key\", &FrameworkConfig::config.menu.menu_key, 0, 0, ImGuiInputTextFlags_CharsHexadecimal);\n\tImGui::PopItemWidth();\n\tImGui::Text(\"Show Cursor Key\");\n\tImGui::SameLine();\n\tImGui::PushItemWidth(-1);\n\tImGui::InputInt(\"##show_cursor_key\", &FrameworkConfig::config.menu.show_cursor_key, 0, 0, ImGuiInputTextFlags_CharsHexadecimal);\n\tImGui::PopItemWidth();\n\tImGui::Text(\"Remember Menu State\");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##remember_menu_state\", &FrameworkConfig::config.menu.remember_menu_state);\n\tImGui::Text(\"Enable L3 + R3 Toggle\");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##enable_l3_r3_toggle\", &FrameworkConfig::config.menu.enable_l3_r3_toggle);\n\tImGui::Text(\"Always Show Cursor\");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##always_show_cursor\", &FrameworkConfig::config.menu.always_show_cursor);\n\tImGui::Text(\"Log Level\");\n\tImGui::SameLine();\n\tImGui::PushItemWidth(-1);\n\tImGui::Combo(\"##log_level\", &FrameworkConfig::config.log.log_level, \"Trace\\0Debug\\0Info\\0Warn\\0Error\\0Critical\\0Off\\0\");\n\tImGui::PopItemWidth();\n\tif (FrameworkConfig::config.log.log_level >= 0 && FrameworkConfig::config.log.log_level <= 6) {\n\t\tspdlog::set_level(static_cast<spdlog::level::level_enum>(", "CodeBleu_score": 45.4498906062771}]}
{"instance_id": "83fa7f401579", "generation_result": [{"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\tbool bSuccess = false;\n\n\tif ( FeedbackContext ) {\n\t\tFeedbackContext->BeginSlowTask( LOCTEXT( \"LoadOSMFile\", \"Loading OSM File\" ), 1 );\n\t}\n\n\t// Create the XML tree from the file or text buffer\n\tTSharedRef< FXmlFile > XmlFile = FXmlFile::Create();\n\n\tif ( bIsFilePathActuallyTextBuffer ) {\n\t\tif ( XmlFile->LoadTextFile( OSMFilePath ) ) {\n\t\t\tbSuccess = true;\n\t\t} else {\n\t\t\tif ( FeedbackContext ) {\n\t\t\t\tFeedbackContext->Log( LOCTEXT( \"LoadOSMFileFailed\", \"Failed to load OSM file.\" ) );\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif ( XmlFile->LoadFile( *OSMFilePath ) ) {\n\t\t\tbSuccess = true;\n\t\t} else {\n\t\t\tif ( FeedbackContext ) {\n\t\t\t\tFeedbackContext->Log( LOCTEXT( \"LoadOSMFileFailed\", \"Failed to load OSM file.\" ) );\n\t\t\t}\n\t\t}\n\t}\n\n\t// If parsing the XML file was successful, parse the data\n\tif ( bSuccess ) {\n\t\tif ( FeedbackContext ) {\n\t\t\tFeedbackContext->UpdateProgress( 1.0f );\n\t\t\tFeedbackContext->BeginSlowTask( LOCTEXT( \"ParseOSMFile\", \"Parsing OSM File\" ), 1 );\n\t\t}\n\n\t\t// Create the XML tree from the file or text buffer\n\t\tTSharedRef< FXmlNode > XmlRootNode = XmlFile->GetRootNode();\n\n\t\t// Parse the XML tree\n\t\tif ( ParseOSMFile( XmlRootNode, FeedbackContext ) ) {\n\t\t\tif ( FeedbackContext ) {\n\t\t\t\tFeedbackContext->UpdateProgress( 1.0f );\n\t\t\t\tFeedbackContext->BeginSlowTask( LOCTEXT( \"CalculateAveragePosition\", \"Calculating Average Position\" ), 1 );\n\t\t\t}\n\n\t\t\t// Calculate the average position\n\t\t\tCalculateAveragePosition();\n\n\t\t\tif ( FeedbackContext ) {\n\t\t\t\tFeedbackContext->UpdateProgress( 1.0f );\n\t\t\t\tFeedbackContext->BeginSlowTask( LOCTEXT( \"CalculateAveragePosition\", \"Calculating Average Position\" ), 1 );\n\t\t\t}\n\n\t\t\tbSuccess = true;\n\t\t} else {\n\t\t\tbSuccess =", "CodeBleu_score": 39.36929912315033}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\tif ( !OSMFilePath.Len() ) {\n\t\treturn false;\n\t}\n\n\tif ( bIsFilePathActuallyTextBuffer ) {\n\t\treturn LoadOpenStreetMapTextBuffer( OSMFilePath, FeedbackContext );\n\t}\n\n\tFString OSMFileText;\n\tif ( !FFileHelper::LoadFileToString( OSMFileText, *OSMFilePath ) ) {\n\t\treturn false;\n\t}\n\n\treturn LoadOpenStreetMapTextBuffer( OSMFileText, FeedbackContext );\n}", "CodeBleu_score": 29.342000787607002}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\tFXmlFile XmlFile;\n\tif ( bIsFilePathActuallyTextBuffer ) {\n\t\tif ( !XmlFile.LoadText( *OSMFilePath ) ) {\n\t\t\tif ( FeedbackContext ) {\n\t\t\t\tFeedbackContext->Log( ELogVerbosity::Error, TEXT( \"Failed to load OSM file.\" ) );\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\tif ( !XmlFile.LoadFile( *OSMFilePath ) ) {\n\t\t\tif ( FeedbackContext ) {\n\t\t\t\tFeedbackContext->Log( ELogVerbosity::Error, TEXT( \"Failed to load OSM file.\" ) );\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn LoadOpenStreetMapFile( XmlFile, FeedbackContext );\n}", "CodeBleu_score": 35.58362561274322}]}
{"instance_id": "7349d775edf6", "generation_result": [{"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tif (UStreetMap* StreetMap = Cast<UStreetMap>(Asset)) {\n\t\tAStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor);\n\t\tif (StreetMapActor != nullptr) {\n\t\t\tStreetMapActor->GetStreetMapComponent()->SetStreetMap(StreetMap);\n\t\t}\n\t}\n}", "CodeBleu_score": 71.14819745493992}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tif (UStreetMap* StreetMap = Cast<UStreetMap>(Asset)) {\n\t\tAStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor);\n\t\tif (StreetMapActor) {\n\t\t\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\t\t\tif (StreetMapComponent) {\n\t\t\t\tStreetMapComponent->SetStreetMap(StreetMap);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 77.45479001547034}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tUStreetMap* StreetMap = Cast<UStreetMap>(Asset);\n\tif (StreetMap) {\n\t\tAStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor);\n\t\tif (StreetMapActor) {\n\t\t\tStreetMapActor->GetStreetMapComponent()->SetStreetMap(StreetMap);\n\t\t}\n\t}\n}", "CodeBleu_score": 64.70609446507277}]}
{"instance_id": "f160ac6d0353", "generation_result": [{"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\t// Get the selected street map component\n\tTArray<TWeakObjectPtr<UObject>> SelectedObjects = GetSelectedObjects();\n\tif (SelectedObjects.Num() != 1) {\n\t\t// If there is not exactly one selected object, return a handled reply\n\t\treturn FReply::Handled();\n\t}\n\tUStreetMapComponent* StreetMapComponent = Cast<UStreetMapComponent>(SelectedObjects[0].Get());\n\tif (StreetMapComponent == nullptr) {\n\t\t// If the selected object is not a street map component, return a handled reply\n\t\treturn FReply::Handled();\n\t}\n\t// Call the BuildMesh method on the selected street map component\n\tStreetMapComponent->BuildMesh();\n\t// Refresh the details view\n\tFDetailsView* DetailsView = FModuleManager::GetModuleChecked<FPropertyEditorModule>(\"PropertyEditor\").GetDetailView();\n\tDetailsView->Refresh();\n\t// Return a handled reply\n\treturn FReply::Handled();\n}", "CodeBleu_score": 52.369115492748584}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\t// Check if a street map component is selected.\n\tif (StreetMapComponent.IsValid()) {\n\t\t// Call the BuildMesh method on the selected component.\n\t\tStreetMapComponent->BuildMesh();\n\t\t// Refresh the details view.\n\t\tIDetailLayoutBuilder::ForceRefreshDetails(StreetMapComponent.ToSharedRef());\n\t\t// Return a handled reply.\n\t\treturn FReply::Handled();\n\t}\n\t// Return an unhandled reply.\n\treturn FReply::Unhandled();\n}", "CodeBleu_score": 53.57269337292306}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tTArray<TWeakObjectPtr<UStreetMapComponent>> StreetMapComponents;\n\tGetSelectedStreetMapComponents(StreetMapComponents);\n\tfor (auto StreetMapComponent : StreetMapComponents) {\n\t\tif (StreetMapComponent.IsValid()) {\n\t\t\tStreetMapComponent->BuildMesh();\n\t\t\tRefreshDetailsView();\n\t\t}\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 57.513381651699724}]}
{"instance_id": "b23f1f2b29fa", "generation_result": [{"code": "void FStreetMapImportingModule::StartupModule(){\n\t\t// Register the StreetMap asset type with the editor\n\tIAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n\tAssetTools.RegisterAssetTypeActions(MakeShareable(new FStreetMapAssetTypeActions));\n\n\t// Initialize the StreetMap style\n\tFStreetMapStyle::Initialize();\n\n\t// Register a custom class layout for the StreetMapComponent in the property editor\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout(\"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n\n\t// Notify the property editor module that the customization has changed\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 72.79660610556498}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t\t// Register the StreetMap asset type with the editor\n\tIAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n\tAssetTools.RegisterAssetTypeActions(MakeShareable(new FStreetMapAssetTypeActions()));\n\n\t// Initialize the StreetMap style\n\tFSlateStyleRegistry::RegisterSlateStyle(FStreetMapStyle::GetStyleSetName(), FStreetMapStyle::Get());\n\n\t// Register a custom class layout for the StreetMapComponent\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout(\"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n\n\t// Notify the property editor module that the customization has changed\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 73.01461670440015}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t\tIAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n\tAssetTools.RegisterAssetTypeActions(MakeShareable(new FStreetMapAssetTypeActions()));\n\tFStreetMapStyle::Initialize();\n\tFStreetMapStyle::ReloadTextures();\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout(\"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 73.70785855927609}]}
{"instance_id": "1da549fe84e3", "generation_result": [{"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\tif (StreetMapMesh != nullptr) {\n\t\tFStreetMapSceneProxy* Proxy = new FStreetMapSceneProxy(this);\n\t\tProxy->Build();\n\t\treturn Proxy;\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 40.636367759168955}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\tif (StreetMapMesh != nullptr) {\n\t\tFStreetMapSceneProxy* StreetMapSceneProxy = new FStreetMapSceneProxy(this);\n\t\tStreetMapSceneProxy->Initialize(StreetMapMesh, StreetMapMesh->GetResource());\n\t\treturn StreetMapSceneProxy;\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 50.63847841665839}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\tif (Mesh != nullptr) {\n\t\tFStreetMapSceneProxy* Proxy = new FStreetMapSceneProxy(this);\n\n\t\tProxy->Init(Mesh->Vertices, Mesh->WedgeIndices, Mesh->TextureCoordinates, Mesh->Materials);\n\n\t\treturn Proxy;\n\t}\n\n\treturn nullptr;\n}", "CodeBleu_score": 48.79487376810798}]}
{"instance_id": "d0ee3b2e023e", "generation_result": [{"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tif (ServerHandle.IsValid()) {\n\t\tTestAbility01Handle = ServerHandle;\n\t\tTArray<FInputChord> Chords;\n\t\tChords.Add(FInputChord(EKeys::LeftMouseButton));\n\t\tGetCharacterMovement()->BindAbilityActivationToInputComponent(TestAbility01Handle, Chords);\n\t}\n}", "CodeBleu_score": 55.16260976939811}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\n\tTArray<FName> InputNames;\n\n\tInputNames.Add(TEXT(\"Ability01\"));\n\n\tServerHandle.BindAbility(InputNames, this);\n}", "CodeBleu_score": 59.067446715015805}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\tTArray<FInputActionMapping> InputMappings;\n\tInputMappings.Add(FInputActionMapping(\"Ability01\"));\n\tServerHandle.BindToInputComponent(InputMappings);\n}", "CodeBleu_score": 59.721144788721936}]}
{"instance_id": "e62f1b2cd4bd", "generation_result": [{"code": "void AARCharacter::MoveForward(float Value){\n\t\tif ((Controller != nullptr) && (Value != 0.0f)) {\n\t\t// Find the rotation from the controller's rotation\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// Get the forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 95.11437147958813}, {"code": "void AARCharacter::MoveForward(float Value){\n\t\tif ((Controller != nullptr) && (Value != 0.0f)) {\n\t\t// find out which way is forward\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// get forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 95.11437147958813}, {"code": "void AARCharacter::MoveForward(float Value){\n\t\t//If the controller is valid and the input value is non-zero, it calculates the forward direction based on the controller's yaw rotation.\n\tif (GetController() && Value) {\n\t\t//Get the controller's forward vector\n\t\tconst FVector PlayerForward = GetController()->GetControlRotation().Vector();\n\t\t//Calculate the movement direction based on the forward vector and the input value\n\t\tconst FVector MovementDir = PlayerForward * Value;\n\t\t//Add movement input in that direction with the given value\n\t\tAddMovementInput(MovementDir);\n\t}\n}", "CodeBleu_score": 37.363592235257904}]}
{"instance_id": "a77cdc67ee00", "generation_result": [{"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (GetMesh()) {\n\t\tif (GetMainWeaponMesh()) {\n\t\t\treturn GetMainWeaponMesh()->GetSocketLocation(Socket);\n\t\t} else {\n\t\t\treturn GetMesh()->GetSocketLocation(Socket);\n\t\t}\n\t}\n\treturn FVector::ZeroVector;\n}", "CodeBleu_score": 44.460584597122924}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (GetMesh() && GetMesh()->GetSkeletalMeshComponent()) {\n\t\treturn GetMesh()->GetSocketLocation(Socket);\n\t}\n\telse {\n\t\treturn GetMesh()->GetSocketLocation(TEXT(\"headSocket\"));\n\t}\n}", "CodeBleu_score": 58.31813073048308}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (GetMesh()) {\n\t\tif (GetMainWeaponMesh()) {\n\t\t\treturn GetMainWeaponMesh()->GetSocketLocation(Socket);\n\t\t}\n\t\telse {\n\t\t\treturn GetMesh()->GetSocketLocation(Socket);\n\t\t}\n\t}\n\treturn FVector::ZeroVector;\n}", "CodeBleu_score": 44.30878147581429}]}
{"instance_id": "f021203f736a", "generation_result": [{"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tif (InEnemy != nullptr) {\n\t\tSpawnedEnemies.Remove(InEnemy);\n\t\tif (SpawnedEnemies.Num() < MinNumEnemies) {\n\t\t\tRespawnEnemies();\n\t\t}\n\t}\n}", "CodeBleu_score": 57.11772108657858}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tif (InEnemy) {\n\t\tif (SpawnedEnemies.Contains(InEnemy)) {\n\t\t\tSpawnedEnemies.Remove(InEnemy);\n\t\t}\n\t\tif (SpawnedEnemies.Num() < MinEnemiesToSpawn) {\n\t\t\tSpawnEnemy();\n\t\t}\n\t}\n}", "CodeBleu_score": 68.36526013512739}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tif (InEnemy) {\n\t\tif (InEnemy->EnemyClass == EnemyClass) {\n\t\t\tSpawnedEnemies.Remove(InEnemy);\n\t\t\tif (SpawnedEnemies.Num() < MinNumOfEnemies) {\n\t\t\t\tSpawn();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 54.022750937312104}]}
{"instance_id": "dbab72cb539f", "generation_result": [{"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"AARGameSession::ApproveLogin\"));\n\tFString Result = Super::ApproveLogin(Options);\n\tTArray<FString> Params;\n\tTArray<FString> Tokens;\n\tTArray<FString> OptionsArray;\n\tTArray<FString> PlayerId;\n\tTArray<FString> PlayerName;\n\tTArray<FString> PlayerState;\n\tTArray<FString> PlayerTeam;\n\tTArray<FString> PlayerRole;\n\tTArray<FString> PlayerTeamId;\n\tTArray<FString> PlayerTeamName;\n\tTArray<FString> PlayerTeamRole;\n\tTArray<FString> PlayerTeamMemberCount;\n\tTArray<FString> PlayerTeamMemberMaxCount;\n\tTArray<FString> PlayerTeamMemberCountT;\n\tTArray<FString> PlayerTeamMemberMaxCountT;\n\tTArray<FString> PlayerTeamMemberCountCT;\n\tTArray<FString> PlayerTeamMemberMaxCountCT;\n\tTArray<FString> PlayerTeamMemberCountTR;\n\tTArray<FString> PlayerTeamMemberMaxCountTR;\n\tTArray<FString> PlayerTeamMemberCountCTF;\n\tTArray<FString> PlayerTeamMemberMaxCountCTF;\n\tTArray<FString> PlayerTeamMemberCountTRF;\n\tTArray<FString> PlayerTeamMemberMaxCountTRF;\n\tTArray<FString> PlayerTeamMemberCountAR;\n\tTArray<FString> PlayerTeamMemberMaxCountAR;\n\tTArray<FString> PlayerTeamMemberCountSC;\n\tTArray<FString> PlayerTeamMemberMaxCountSC;\n\tTArray<FString> PlayerTeamMemberCountSQ;\n\tTArray<FString> PlayerTeamMemberMaxCountSQ;\n\tTArray<FString> PlayerTeamMemberCountNS;\n\tTArray<FString> PlayerTeamMemberMaxCountNS;\n\tTArray<FString> PlayerTeamMemberCountEW;\n\tTArray<FString> PlayerTeamMemberMaxCountEW;\n\tTArray<FString> PlayerTeamMemberCountRP;\n\tTArray<FString> PlayerTeamMemberMaxCountRP;\n\tTArray<FString", "CodeBleu_score": 23.09758781054488}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\tFString OutResult = Super::ApproveLogin(Options);\n\tTArray<FString> Parameters;\n\tFString(Options).ParseIntoArray(Parameters, TEXT(\" \"), true);\n\tfor (auto Parameter : Parameters) {\n\t\tif (Parameter.StartsWith(TEXT(\"PlayerId=\"))) {\n\t\t\tPlayerId = Parameter.RightChop(9);\n\t\t}\n\t}\n\treturn OutResult;\n}", "CodeBleu_score": 51.23089711651573}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\tFString PlayerId;\n\tTArray<FString> Parameters;\n\tOptions.ParseIntoArray(Parameters, TEXT(\" \"), true);\n\tfor (FString Parameter : Parameters) {\n\t\tif (Parameter.StartsWith(TEXT(\"PlayerId=\"))) {\n\t\t\tPlayerId = Parameter.RightChop(Parameter.Len() - 9);\n\t\t}\n\t}\n\treturn Super::ApproveLogin(Options);\n}", "CodeBleu_score": 50.57871603525301}]}
{"instance_id": "85ea02df92a5", "generation_result": [{"code": "void UARRegisterView::OnRegisterClicked(){\n\t\t// Get the username, display name, and password from the input fields\n\tFString Username = UsernameInput->GetText().ToString();\n\tFString DisplayName = DisplayNameInput->GetText().ToString();\n\tFString Password = PasswordInput->GetText().ToString();\n\n\t// Check if any of the fields are empty\n\tif (Username.IsEmpty() || DisplayName.IsEmpty() || Password.IsEmpty()) {\n\t\t// Display a warning message\n\t\tFText WarningMessage = LOCTEXT(\"RegisterWarning\", \"Please fill in all fields\");\n\t\tFText WarningTitle = LOCTEXT(\"RegisterWarningTitle\", \"Registration failed\");\n\t\tFMessageDialog::Open(EAppMsgType::Ok, WarningMessage, &WarningTitle);\n\t} else {\n\t\t// Hide the register button and show the loading screen\n\t\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\t\tLoadingScreen->SetVisibility(ESlateVisibility::Visible);\n\n\t\t// Register the new player\n\t\tUARGameInstance::Get(this)->RegisterNewPlayer(Username, DisplayName, Password);\n\t}\n}", "CodeBleu_score": 51.4382371519728}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t\t// Retrieve the username, display name, and password from the input fields\n\tFString Username = UsernameInput->GetText().ToString();\n\tFString DisplayName = DisplayNameInput->GetText().ToString();\n\tFString Password = PasswordInput->GetText().ToString();\n\n\t// Check if any of the fields are empty and display a warning message if so\n\tif (Username.IsEmpty() || DisplayName.IsEmpty() || Password.IsEmpty()) {\n\t\tFMessageDialog::Open(EAppMsgType::Ok, FText::FromString(\"Please fill in all the fields!\"));\n\t\treturn;\n\t}\n\n\t// Hide the register button\n\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\n\t// Call the RegisterNewPlayer method from the game instance to register the new player\n\tUARGameInstance::Get(this)->RegisterNewPlayer(Username, DisplayName, Password);\n}", "CodeBleu_score": 41.36531317842389}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tFString Username = UsernameInput->GetText().ToString();\n\tFString DisplayName = DisplayNameInput->GetText().ToString();\n\tFString Password = PasswordInput->GetText().ToString();\n\n\tif (Username.IsEmpty() || DisplayName.IsEmpty() || Password.IsEmpty()) {\n\t\tFMessageDialog::Open(EAppMsgType::Ok, FText::FromString(\"Please fill out all fields!\"));\n\t\treturn;\n\t}\n\n\tUARGameInstance::Get(this)->RegisterNewPlayer(Username, DisplayName, Password);\n}", "CodeBleu_score": 38.38503188403434}]}
{"instance_id": "b33bb5886dd9", "generation_result": [{"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\tif (InMod.TargetActor == nullptr) { return; }\n\tif (InMod.Attribute == nullptr) { return; }\n\n\tif (InMod.Attribute->GetName() == \"Health\") {\n\t\tif (InMod.TargetActor->GetClass()->ImplementsInterface(UAFAbilityInterface::StaticClass())) {\n\t\t\tIAFAbilityInterface::Execute_OnEnemyHealthChanged(InMod.TargetActor, InMod.NewValue);\n\t\t}\n\n\t\tif (InMod.NewValue <= 0.0f) {\n\t\t\tif (InMod.TargetActor->GetClass()->ImplementsInterface(UAFAbilityInterface::StaticClass())) {\n\t\t\t\tIAFAbilityInterface::Execute_OnEnemyDeath(InMod.TargetActor);\n\t\t\t}\n\n\t\t\tif (InMod.TargetActor == UGameplayStatics::GetPlayerCharacter(GetWorld(), 0)) {\n\t\t\t\tif (InMod.TargetActor->GetClass()->ImplementsInterface(UAFAbilityInterface::StaticClass())) {\n\t\t\t\t\tIAFAbilityInterface::Execute_OnPlayerDeath(InMod.TargetActor);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 22.476013984179854}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\tif (InMod.Target.IsValid()) {\n\t\tif (InMod.Target->GetClass()->ImplementsInterface(UAFAbilityInterface::StaticClass())) {\n\t\t\tIAFAbilityInterface::Execute_GetAbilityAttribute(InMod.Target.Get(), EARAbilityAttributeType::Damage, InMod.NewValue);\n\t\t\tif (InMod.NewValue > 0.0f) {\n\t\t\t\tFVector2D DamageLocation = FVector2D(InMod.Target->GetActorLocation().X, InMod.Target->GetActorLocation().Y);\n\t\t\t\tDamageLocation = UGameplayStatics::ProjectWorldToScreen(GetWorld(), DamageLocation);\n\t\t\t\tif (DamageLocation.X != 0.0f && DamageLocation.Y != 0.0f) {\n\t\t\t\t\tif (InMod.Target->GetClass()->ImplementsInterface(UAFAbilityInterface::StaticClass())) {\n\t\t\t\t\t\tIAFAbilityInterface::Execute_GetAbilityAttribute(InMod.Target.Get(), EARAbilityAttributeType::Damage, InMod.NewValue);\n\t\t\t\t\t\tif (InMod.NewValue > 0.0f) {\n\t\t\t\t\t\t\tFString DamageText = FString::SanitizeFloat(InMod.NewValue);\n\t\t\t\t\t\t\tUARHUDFloatingCombatText::Show(DamageLocation, DamageText);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 33.994825726793714}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\tif (InMod.Target.IsValid() && InMod.Target->GetClass()->IsChildOf(AActor::StaticClass())) {\n\t\tconst FVector Location = InMod.Target->GetActorLocation();\n\t\tconst FVector2D ScreenLocation = UGameplayStatics::ProjectWorldToScreen(GetWorld(), Location);\n\t\tif (ScreenLocation.X != 0.0f && ScreenLocation.Y != 0.0f) {\n\t\t\tconst FText DamageText = FText::AsNumber(InMod.NewValue);\n\t\t\tFloatingCombatText->SetText(DamageText);\n\t\t\tFloatingCombatText->SetVisibility(true);\n\t\t\tFloatingCombatText->SetLocation(ScreenLocation);\n\t\t}\n\t}\n}", "CodeBleu_score": 36.53490901663854}]}
{"instance_id": "177d36e7e076", "generation_result": [{"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (InMagazineUpgrade != nullptr && InMagazineUpgrade->GetAbilityClass() != nullptr) {\n\t\tUARWeaponInventoryComponent* WeaponInventoryComponent = GetInventoryComponent();\n\t\tif (WeaponInventoryComponent != nullptr) {\n\t\t\tUARCharacter* Character = Cast<UARCharacter>(WeaponInventoryComponent->GetOwner());\n\t\t\tif (Character != nullptr && Character->GetLocalRole() == ROLE_Authority) {\n\t\t\t\tUARWeaponAbilityBase* AbilityInstance = WeaponInventoryComponent->GetWeaponAbilityInstance(InMagazineUpgrade->GetAbilityClass());\n\t\t\t\tif (AbilityInstance != nullptr) {\n\t\t\t\t\tInMagazineUpgrade = Cast<UARMagazineUpgradeItem>(InMagazineUpgrade->Duplicate());\n\t\t\t\t\tif (InMagazineUpgrade != nullptr) {\n\t\t\t\t\t\tInMagazineUpgrade->SetWeaponItem(this);\n\t\t\t\t\t\tInMagazineUpgrade->SetWeaponAbilityInstance(AbilityInstance);\n\t\t\t\t\t\tInMagazineUpgrade->SetWeaponInventoryComponent(WeaponInventoryComponent);\n\t\t\t\t\t\tWeaponInventoryComponent->SetMagazineUpgrade(InMagazineUpgrade);\n\t\t\t\t\t\tOnMagazineUpdateAdded(InMagazineUpgrade);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 39.76757399136941}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (!InMagazineUpgrade) { return; }\n\n\tif (!InMagazineUpgrade->Ability) { return; }\n\n\tif (!GetWeaponComponent()) { return; }\n\n\tif (!GetWeaponComponent()->GetOwner()) { return; }\n\n\tif (!GetWeaponComponent()->GetOwner()->GetLocalRole() == ROLE_Authority) { return; }\n\n\t// Duplicate the magazine upgrade\n\tUARMagazineUpgradeItem* MagazineUpgrade = DuplicateObject<UARMagazineUpgradeItem>(InMagazineUpgrade, GetWeaponComponent()->GetOwner());\n\n\tif (!MagazineUpgrade) { return; }\n\n\t// Add the magazine upgrade value\n\tGetWeaponComponent()->GetMagazineUpgradeValue() += MagazineUpgrade->Value;\n\n\t// Apply the upgrade effect\n\tGetWeaponComponent()->ApplyMagazineUpgradeEffect(MagazineUpgrade->Effect);\n\n\t// Call the OnMagazineUpdateAdded function\n\tOnMagazineUpdateAdded(MagazineUpgrade);\n}", "CodeBleu_score": 41.40803274523008}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (InMagazineUpgrade == nullptr) { return; }\n\tif (!InMagazineUpgrade->IsValid()) { return; }\n\tif (InMagazineUpgrade->GetWeaponItem() != this) { return; }\n\tif (!InMagazineUpgrade->GetAbilityInstance()) { return; }\n\n\tARWeaponInventoryComponent* WeaponInventory = GetWeaponInventory();\n\tif (!WeaponInventory) { return; }\n\tARCharacter* Character = Cast<ARCharacter>(WeaponInventory->GetOwner());\n\tif (!Character) { return; }\n\n\tFString UpgradeName = InMagazineUpgrade->GetUpgradeName();\n\tif (UpgradeName.IsEmpty()) { return; }\n\n\tFString UpgradeDesc = InMagazineUpgrade->GetUpgradeDescription();\n\tif (UpgradeDesc.IsEmpty()) { return; }\n\n\tFString UpgradeIcon = InMagazineUpgrade->GetUpgradeIcon();\n\tif (UpgradeIcon.IsEmpty()) { return; }\n\n\tFString UpgradeType = InMagazineUpgrade->GetUpgradeType();\n\tif (UpgradeType.IsEmpty()) { return; }\n\n\tFString AbilityName = InMagazineUpgrade->GetAbilityName();\n\tif (AbilityName.IsEmpty()) { return; }\n\n\tFString AbilityDesc = InMagazineUpgrade->GetAbilityDescription();\n\tif (AbilityDesc.IsEmpty()) { return; }\n\n\tFString AbilityIcon = InMagazineUpgrade->GetAbilityIcon();\n\tif (AbilityIcon.IsEmpty()) { return; }\n\n\tFString AbilityType = InMagazineUpgrade->GetAbilityType();\n\tif (AbilityType.IsEmpty()) { return; }\n\n\tFString AbilityCooldown = InMagazineUpgrade->GetAbilityCooldown();\n\tif (AbilityCooldown.IsEmpty()) { return; }\n\n\tFString AbilityManaCost = InMagazineUpgrade->GetAbilityManaCost();\n\tif (AbilityManaCost.IsEmpty()) { return; }\n\n\tFString AbilityManaCostPercent = InMagazineUpgrade->GetAbilityManaCostPercent();\n\tif (AbilityManaCostPercent.IsEmpty()) { return; }\n\n\tFString AbilityManaCostType = InMagazineUpgrade->GetAbilityManaCostType();\n\tif (AbilityManaCostType.IsEmpty()) { return; }\n\n\tFString AbilityManaCostIsPercent = InMagazineUpgrade->GetAbilityManaCost", "CodeBleu_score": 43.101384920707424}]}
{"instance_id": "404276da398b", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tAARCharacter* MyCharacter = Cast<AARCharacter>(GetOwner());\n\tif (MyCharacter) {\n\t\tUARPlayerController* MyPC = Cast<UARPlayerController>(GetOwner()->GetController());\n\t\tif (MyPC) {\n\t\t\tUARWeaponAbilityBase* MyAbility = MyPC->GetWeaponAbility(InAbilityTag, LocalIndex);\n\t\t\tif (MyAbility) {\n\t\t\t\tSetAbilityToItem(LocalIndex, MyAbility);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 49.43910877335751}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tif (Owner == nullptr) { return; }\n\n\tAARCharacter* MyCharacter = Cast<AARCharacter>(Owner);\n\tif (MyCharacter == nullptr) { return; }\n\n\tUARPlayerController* MyController = Cast<UARPlayerController>(GetWorld()->GetAuthGameMode()->GetGameSession()->GetPlayerController(0));\n\tif (MyController == nullptr) { return; }\n\n\tUARWeaponAbilityBase* MyAbility = Cast<UARWeaponAbilityBase>(MyController->GetWeaponAbilityByLocalIndex(LocalIndex));\n\tif (MyAbility == nullptr) { return; }\n\n\tSetAbilityToItem(InAbilityTag, MyAbility);\n}", "CodeBleu_score": 46.78435890691255}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tif (Owner != nullptr) {\n\t\tAARCharacter* Character = Cast<AARCharacter>(Owner);\n\t\tif (Character != nullptr) {\n\t\t\tUARPlayerController* PC = Character->GetPlayerController();\n\t\t\tif (PC != nullptr) {\n\t\t\t\tUARWeaponAbilityBase* Ability = PC->GetWeaponAbility(InAbilityTag);\n\t\t\t\tif (Ability != nullptr) {\n\t\t\t\t\tSetAbilityToItem(LocalIndex, Ability);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 55.62289978524508}]}
{"instance_id": "2e97aab98981", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tAARCharacter* CharacterOwner = Cast<AARCharacter>(GetOwner());\n\tif (CharacterOwner == nullptr) {\n\t\treturn;\n\t}\n\n\tFARWeaponRPC WeaponRPC;\n\tWeaponRPC.WeaponData = CharacterOwner->WeaponData;\n\tWeaponRPC.WeaponData.Weapon = CharacterOwner->WeaponData.Weapon;\n\n\tif (LocalIndex == CharacterOwner->WeaponData.WeaponLocalIndex) {\n\t\tWeaponRPC.WeaponData.WeaponLocalIndex = 0;\n\t\tWeaponRPC.WeaponData.Weapon = nullptr;\n\t\tWeaponRPC.WeaponData.WeaponSlot = EWeaponSlot::None;\n\n\t\tCharacterOwner->WeaponData.Weapon = nullptr;\n\t\tCharacterOwner->WeaponData.WeaponLocalIndex = 0;\n\t\tCharacterOwner->WeaponData.WeaponSlot = EWeaponSlot::None;\n\n\t\tCharacterOwner->WeaponData.WeaponAbilities.Empty();\n\n\t\tCharacterOwner->ServerWeaponUnequip(WeaponRPC);\n\t}\n\telse {\n\t\tWeaponRPC.WeaponData.WeaponLocalIndex = LocalIndex;\n\t\tCharacterOwner->WeaponData.WeaponLocalIndex = LocalIndex;\n\n\t\tCharacterOwner->ServerWeaponEquip(WeaponRPC);\n\t}\n}", "CodeBleu_score": 41.67097429699731}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tif (AARCharacter* OwnerCharacter = Cast<AARCharacter>(GetOwner())) {\n\t\tFARWeaponRPC WeaponRPC;\n\t\tWeaponRPC.WeaponData.WeaponName = OwnerCharacter->GetCurrentWeaponName();\n\t\tWeaponRPC.WeaponData.WeaponIndex = OwnerCharacter->GetCurrentWeaponIndex();\n\t\tWeaponRPC.WeaponData.WeaponAmmo = OwnerCharacter->GetCurrentWeaponAmmo();\n\t\tWeaponRPC.WeaponData.WeaponFireMode = OwnerCharacter->GetCurrentWeaponFireMode();\n\t\tWeaponRPC.WeaponData.WeaponFireModeIndex = OwnerCharacter->GetCurrentWeaponFireModeIndex();\n\t\tWeaponRPC.WeaponData.WeaponFireModeAmmo = OwnerCharacter->GetCurrentWeaponFireModeAmmo();\n\t\tWeaponRPC.WeaponData.WeaponFireModeAmmoIndex = OwnerCharacter->GetCurrentWeaponFireModeAmmoIndex();\n\t\tWeaponRPC.WeaponData.WeaponFireModeAmmoCount = OwnerCharacter->GetCurrentWeaponFireModeAmmoCount();\n\t\tWeaponRPC.WeaponData.WeaponFireModeAmmoMax = OwnerCharacter->GetCurrentWeaponFireModeAmmoMax();\n\t\tWeaponRPC.WeaponData.WeaponFireModeAmmoType = OwnerCharacter->GetCurrentWeaponFireModeAmmoType();\n\t\tWeaponRPC.WeaponData.WeaponFireModeAmmoTypeIndex = OwnerCharacter->GetCurrentWeaponFireModeAmmoTypeIndex();\n\t\tWeaponRPC.WeaponData.WeaponFireModeAmmoTypeCount = OwnerCharacter->GetCurrentWeaponFireModeAmmoTypeCount();\n\t\tWeaponRPC.WeaponData.WeaponFireModeAmmoTypeMax = OwnerCharacter->GetCurrentWeaponFireModeAmmoTypeMax();\n\t\tWeaponRPC.WeaponData.WeaponFireModeAmmoTypeCurrent = OwnerCharacter->GetCurrentWeaponFireModeAmmoTypeCurrent();\n\t\tWeaponRPC.WeaponData.WeaponFireModeAmmoTypeMaxCurrent = OwnerCharacter->GetCurrentWeaponFireModeAmmoTypeMaxCurrent();\n\t\tWeaponRPC.WeaponData.WeaponFireModeAmmoTypeReloading = OwnerCharacter->GetCurrentWeaponFireModeAmmoTypeReloading();\n\t\tWeaponRPC.WeaponData.WeaponFireModeAmmoTypeReloadingIndex = OwnerCharacter->GetCurrentWeaponFireModeAmmoTypeReloadingIndex();\n\t\tWeaponRPC.WeaponData.WeaponFireModeAmmoTypeReloadingCount = OwnerCharacter->GetCurrentWeaponFireModeAmmoTypeReloadingCount();\n\t\tWeaponRPC.WeaponData.WeaponFireModeAmmoTypeReloadingMax = OwnerCharacter->GetCurrentWeaponFireModeAmmoTypeReloadingMax();\n\t\tWeaponRPC.WeaponData.WeaponFireModeAmmoTypeReloadingCurrent = OwnerCharacter->", "CodeBleu_score": 37.526892774743544}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tif (LocalIndex >= WeaponInventory.Num()) {\n\t\treturn;\n\t}\n\n\tAARCharacter* OwnerCharacter = Cast<AARCharacter>(GetOwner());\n\tif (OwnerCharacter) {\n\t\tFARWeaponRPC WeaponRPC;\n\t\tWeaponRPC.WeaponData = WeaponInventory[LocalIndex];\n\t\tWeaponRPC.WeaponData.Ammo = 0;\n\t\tOwnerCharacter->Server_WeaponUnequip(WeaponRPC);\n\t\tWeaponInventory[LocalIndex] = FWeaponData();\n\t\tif (LocalIndex == CurrentWeaponIndex) {\n\t\t\tOwnerCharacter->Server_WeaponEquip(WeaponRPC);\n\t\t}\n\t\tUpdateComponentFromInventory();\n\t}\n}", "CodeBleu_score": 46.63859569923016}]}
{"instance_id": "13cc35e5ecac", "generation_result": [{"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\tif (!IsRunningDedicatedServer()) {\n\t\tFMoviePlayer::Get().OnPreLoadingScreen().RemoveAll(this);\n\t\tFMoviePlayer::Get().OnPostLoadingScreen().RemoveAll(this);\n\t}\n}", "CodeBleu_score": 38.252713792911344}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\tif (FModuleManager::Get().IsModuleLoaded(\"MoviePlayer\")) {\n\t\tFMoviePlayer* MoviePlayer = IMoviePlayerModule::Get().GetMoviePlayer();\n\t\tif (MoviePlayer) {\n\t\t\tMoviePlayer->OnPreLoadingScreen().RemoveAll(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 18.554887787549323}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\tif (FModuleManager::Get().IsModuleLoaded(\"MoviePlayer\")) {\n\t\tFMoviePlayer* MoviePlayer = FModuleManager::GetModulePtr<FMoviePlayer>(\"MoviePlayer\");\n\t\tif (MoviePlayer != nullptr) {\n\t\t\tMoviePlayer->OnPreLoadMap.RemoveAll(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 16.561413160410904}]}
{"instance_id": "2ee3ac60a8f3", "generation_result": [{"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"Preparing loading screen...\"));\n\tif (bEnableLoadingScreen) {\n\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"Loading screen is enabled. Setting up loading screen...\"));\n\t\tLoadingScreenSettings = GetDefault<ULoadingScreenSettings>();\n\t\tLoadingScreenSettings->bStartupLoadingScreen = false;\n\t\tSetupLoadingScreen(LoadingScreenSettings);\n\t}\n}", "CodeBleu_score": 54.95545582075152}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\t//Log the start of the setup process\n\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"Preparing to setup the loading screen...\"));\n\n\t//Check if the loading screen is enabled\n\tif (IsLoadingScreenEnabled()) {\n\t\t//Retrieve the default loading screen settings\n\t\tLoadingScreenSettings = GetDefault<ULoadingScreenSettings>();\n\n\t\t//Set the startup flag to false\n\t\tLoadingScreenSettings->bStartupLoadingScreen = false;\n\n\t\t//Setup the loading screen\n\t\tSetupLoadingScreen();\n\t}\n}", "CodeBleu_score": 34.70246171907057}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"Async Loading Screen: Preparing loading screen\"));\n\t\n\tif (GConfig->GetBool(TEXT(\"AsyncLoadingScreen\"), TEXT(\"Enabled\"), GEngineIni)) {\n\t\tGConfig->SetBool(TEXT(\"AsyncLoadingScreen\"), TEXT(\"Enabled\"), false, GEngineIni);\n\t\t\n\t\tGConfig->Flush(false, GEngineIni);\n\t\t\n\t\tGConfig->LoadGlobalIniFile(false, GEngineIni);\n\t\t\n\t\tGConfig->GetBool(TEXT(\"AsyncLoadingScreen\"), TEXT(\"Enabled\"), GEngineIni);\n\t\t\n\t\tGConfig->SetBool(TEXT(\"AsyncLoadingScreen\"), TEXT(\"Enabled\"), true, GEngineIni);\n\t\t\n\t\tGConfig->Flush(false, GEngineIni);\n\t\t\n\t\tGConfig->LoadGlobalIniFile(false, GEngineIni);\n\t\t\n\t\tGConfig->GetBool(TEXT(\"AsyncLoadingScreen\"), TEXT(\"Enabled\"), GEngineIni);\n\t\t\n\t\tFLoadingScreenAttributes LoadingScreenAttributes;\n\t\t\n\t\tLoadingScreenAttributes.MoviePaths = GetMoviePaths();\n\t\t\n\t\tLoadingScreenAttributes.MoviePlayer = GetMoviePlayer();\n\t\t\n\t\tLoadingScreenAttributes.BackgroundColor = GetBackgroundColor();\n\t\t\n\t\tLoadingScreenAttributes.LoadingText = GetLoadingText();\n\t\t\n\t\tLoadingScreenAttributes.MovieWidth = GetMovieWidth();\n\t\t\n\t\tLoadingScreenAttributes.MovieHeight = GetMovieHeight();\n\t\t\n\t\tLoadingScreenAttributes.MovieStretch = GetMovieStretch();\n\t\t\n\t\tLoadingScreenAttributes.MinimumLoadingScreenPercentage = GetMinimumLoadingScreenPercentage();\n\t\t\n\t\tLoadingScreenAttributes.AllowFadingIn = GetAllowFadingIn();\n\t\t\n\t\tLoadingScreenAttributes.AllowFadingOut = GetAllowFadingOut();\n\t\t\n\t\tLoadingScreenAttributes.MinimumSplashScreenPercentage = GetMinimumSplashScreenPercentage();\n\t\t\n\t\tLoadingScreenAttributes.bMoviesAreLooping = GetMoviesAreLooping();\n\t\t\n\t\tLoadingScreenAttributes.bMoviesAreSkippable = GetMoviesAreSkippable();\n\t\t\n\t\tLoadingScreenAttributes.bShowMouseCursor = GetShowMouseCursor();\n\t\t\n\t\tLoadingScreenAttributes.MoviePlayerVolume = GetMoviePlayerVolume();\n\t\t\n\t\tLoadingScreenAttributes.MoviePlayerSynchronizationMode = GetMoviePlayerSynchronizationMode();\n\t\t\n\t\tLoadingScreenAttributes.MovieStreamingMode = GetMovieStreamingMode();\n\t\t\n\t\tLoadingScreenAttributes.MovieSoundtrack = GetMovieSoundtrack();\n\t\t\n\t\tLoadingScreenAttributes.MovieBackgroundColor = GetMovieBackgroundColor();\n\t\t\n\t\tLoadingScreenAttributes.MoviePlaybackLocations = GetMoviePlaybackLocations();\n\t\t\n\t\tLoading", "CodeBleu_score": 36.93540689282302}]}
{"instance_id": "c095588f550c", "generation_result": [{"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\t// Remove all existing background images\n\tfor (TObjectIterator<UTexture2D> It; It; ++It) {\n\t\tUTexture2D* Texture = *It;\n\t\tif (Texture->GetFName().ToString().Contains(\"AsyncLoadingScreen\")) {\n\t\t\tTexture->RemoveFromRoot();\n\t\t}\n\t}\n\n\t// Retrieve the loading screen settings\n\tFLoadingScreenSettings* Settings = GetMutableDefault<ULoadingScreenSettings>()->GetLoadingScreenSettings();\n\n\t// Load and add images for the startup loading screen\n\tif (Settings->bUseStartupLoadingScreen) {\n\t\t// Startup loading screen image\n\t\tUTexture2D* Image = LoadObject<UTexture2D>(NULL, *Settings->StartupLoadingScreenImage.ToString(), nullptr, LOAD_None, nullptr);\n\t\tif (Image) {\n\t\t\tImage->AddToRoot();\n\t\t\tStartupBackgroundImages.Add(Image);\n\t\t}\n\n\t\t// Startup loading screen movie\n\t\tif (Settings->bUseStartupLoadingScreenMovie) {\n\t\t\tUMoviePlayer* MoviePlayer = UMoviePlayer::CreateMoviePlayer(GetTransientPackage(), \"StartupLoadingScreenMovie\");\n\t\t\tif (MoviePlayer) {\n\t\t\t\tMoviePlayer->OnMovieScenePlaybackCompleted().AddLambda([](FMovieScenePlayer& Player) {\n\t\t\t\t\tPlayer.Stop();\n\t\t\t\t});\n\t\t\t\tMoviePlayer->OnMovieScenePlaybackInterrupted().AddLambda([](FMovieScenePlayer& Player) {\n\t\t\t\t\tPlayer.Stop();\n\t\t\t\t});\n\t\t\t\tMoviePlayer->OnMovieScenePlaybackResumed().AddLambda([](FMovieScenePlayer& Player) {\n\t\t\t\t\tPlayer.Stop();\n\t\t\t\t});\n\t\t\t\tMoviePlayer->OnMovieScenePlaybackStarted().AddLambda([](FMovieScenePlayer& Player) {\n\t\t\t\t\tPlayer.Stop();\n\t\t\t\t});\n\t\t\t\tMoviePlayer->OnMovieSceneSequenceChanged().AddLambda([](FMovieScenePlayer& Player) {\n\t\t\t\t\tPlayer.Stop();\n\t\t\t\t});\n\t\t\t\tMoviePlayer->OnMovieSceneShotChanged().AddLambda([](FMovieScenePlayer& Player) {\n\t\t\t\t\tPlayer.Stop();\n\t\t\t\t});\n\t\t\t\tMoviePlayer->OnMovieSceneBindingsChanged().AddLambda([](FMovieScenePlayer& Player) {\n\t\t\t\t\tPlayer.Stop();\n\t\t\t\t});\n\t\t\t\tMoviePlayer->OnMovieSceneCameraCut().AddLambda([](FMovieScenePlayer& Player) {\n\t\t\t\t\tPlayer.Stop", "CodeBleu_score": 40.41863853169831}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\t// Remove existing background images\n\tfor (int32 i = 0; i < BackgroundImages.Num(); i++) {\n\t\tBackgroundImages[i].RemoveFromRoot();\n\t}\n\tBackgroundImages.Empty();\n\n\t// Retrieve loading screen settings\n\tULoadingScreenSettings* LoadingScreenSettings = GetMutableDefault<ULoadingScreenSettings>();\n\n\t// Load and add startup background images\n\tif (LoadingScreenSettings->bShowStartupBackgroundImage) {\n\t\tFString StartupBackgroundImageName = LoadingScreenSettings->StartupBackgroundImageName;\n\t\tif (StartupBackgroundImageName.Len() > 0) {\n\t\t\tFString StartupBackgroundImagePath = FPaths::Combine(FPaths::ProjectContentDir(), TEXT(\"LoadingScreen\"), TEXT(\"BackgroundImages\"), StartupBackgroundImageName);\n\t\t\tUTexture2D* StartupBackgroundImage = LoadObject<UTexture2D>(NULL, *StartupBackgroundImagePath, NULL, LOAD_None, NULL);\n\t\t\tif (StartupBackgroundImage != NULL) {\n\t\t\t\tUImage* StartupBackgroundImageWidget = SNew(UImage).Image(StartupBackgroundImage);\n\t\t\t\tBackgroundImages.Add(StartupBackgroundImageWidget);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Load and add default background images\n\tif (LoadingScreenSettings->bShowDefaultBackgroundImage) {\n\t\tFString DefaultBackgroundImageName = LoadingScreenSettings->DefaultBackgroundImageName;\n\t\tif (DefaultBackgroundImageName.Len() > 0) {\n\t\t\tFString DefaultBackgroundImagePath = FPaths::Combine(FPaths::ProjectContentDir(), TEXT(\"LoadingScreen\"), TEXT(\"BackgroundImages\"), DefaultBackgroundImageName);\n\t\t\tUTexture2D* DefaultBackgroundImage = LoadObject<UTexture2D>(NULL, *DefaultBackgroundImagePath, NULL, LOAD_None, NULL);\n\t\t\tif (DefaultBackgroundImage != NULL) {\n\t\t\t\tUImage* DefaultBackgroundImageWidget = SNew(UImage).Image(DefaultBackgroundImage);\n\t\t\t\tBackgroundImages.Add(DefaultBackgroundImageWidget);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 43.44475285077386}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\tFLoadingScreenSettings& LoadingScreenSettings = FLoadingScreenSettings::Get();\n\n\t// Remove all existing background images\n\tfor (int32 i = 0; i < BackgroundImageTextures.Num(); i++) {\n\t\tif (BackgroundImageTextures[i] != nullptr) {\n\t\t\tBackgroundImageTextures[i]->RemoveFromRoot();\n\t\t\tBackgroundImageTextures[i] = nullptr;\n\t\t}\n\t}\n\n\tBackgroundImageTextures.Empty();\n\n\t// Retrieve the loading screen settings\n\tUTexture2D* StartupImageTexture = nullptr;\n\tUTexture2D* LoadingImageTexture = nullptr;\n\tif (LoadingScreenSettings.IsValid()) {\n\t\tStartupImageTexture = LoadingScreenSettings.GetBackgroundImageTexture();\n\t\tLoadingImageTexture = LoadingScreenSettings.GetLoadingImageTexture();\n\t}\n\n\t// Load and add images for the startup screen\n\tif (StartupImageTexture != nullptr) {\n\t\tUTexture2D* StartupImageTextureCopy = Cast<UTexture2D>(StaticDuplicateObject(StartupImageTexture, GetTransientPackage(), *FString(\"StartupImageTexture\")));\n\t\tStartupImageTextureCopy->AddToRoot();\n\t\tBackgroundImageTextures.Add(StartupImageTextureCopy);\n\t}\n\n\t// Load and add images for the loading screen\n\tif (LoadingImageTexture != nullptr) {\n\t\tUTexture2D* LoadingImageTextureCopy = Cast<UTexture2D>(StaticDuplicateObject(LoadingImageTexture, GetTransientPackage(), *FString(\"LoadingImageTexture\")));\n\t\tLoadingImageTextureCopy->AddToRoot();\n\t\tBackgroundImageTextures.Add(LoadingImageTextureCopy);\n\t}\n}", "CodeBleu_score": 46.43990677633103}]}
{"instance_id": "4ffd56e2a326", "generation_result": [{"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\tif (InCurrentTime >= 0.0) {\n\t\tif (InCurrentTime < this->FadeInDuration) {\n\t\t\tthis->TextOpacity = FMath::Lerp(this->FadeInMinAlpha, this->FadeInMaxAlpha, InCurrentTime / this->FadeInDuration);\n\t\t}\n\t\telse if (InCurrentTime < this->FadeInDuration + this->FadeOutDuration) {\n\t\t\tthis->TextOpacity = FMath::Lerp(this->FadeOutMaxAlpha, this->FadeInMinAlpha, (InCurrentTime - this->FadeInDuration) / this->FadeOutDuration);\n\t\t}\n\t\telse {\n\t\t\treturn EActiveTimerReturnType::Stop;\n\t\t}\n\t}\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 18.058233160605397}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\tif (InCurrentTime - LastAnimationTime >= TextFadeAnimationSpeed) {\n\t\tLastAnimationTime = InCurrentTime;\n\t\tif (TextAlphaValue < TextAlphaMax) {\n\t\t\tTextAlphaValue += TextAlphaIncrease;\n\t\t}\n\t\telse if (TextAlphaValue > TextAlphaMin) {\n\t\t\tTextAlphaValue -= TextAlphaIncrease;\n\t\t}\n\t}\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 27.79885243856804}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\t// If the animation is complete\n\tif (CurrentAlpha <= MinAlpha || CurrentAlpha >= MaxAlpha) {\n\t\t// Reverse the animation direction\n\t\tbReverse = !bReverse;\n\t}\n\t// If the animation is reversing\n\tif (bReverse) {\n\t\t// Decrease the alpha value\n\t\tCurrentAlpha -= AnimationSpeed * InDeltaTime;\n\t}\n\t// Otherwise\n\telse {\n\t\t// Increase the alpha value\n\t\tCurrentAlpha += AnimationSpeed * InDeltaTime;\n\t}\n\t// Set the text's alpha value\n\tLoadingCompleteText->SetOpacity(CurrentAlpha);\n\t// Return that the animation should continue\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 32.59702602796293}]}
{"instance_id": "7420af124c78", "generation_result": [{"code": "bool FRaceAwaiter::await_ready(){\n\t\tstd::unique_lock<std::mutex> Lock(DataMutex);\n\treturn Index != -1;\n}", "CodeBleu_score": 7.351072590694775}, {"code": "bool FRaceAwaiter::await_ready(){\n\t\t// Lock the data\n\tFScopeLock ScopeLock(&Data->CriticalSection);\n\n\t// Check if the index is not -1\n\tif (Data->Index != -1) {\n\t\t// Unlock the data\n\t\tScopeLock.Unlock();\n\n\t\t// Return true\n\t\treturn true;\n\t}\n\n\t// Return false\n\treturn false;\n}", "CodeBleu_score": 51.40479051517768}, {"code": "bool FRaceAwaiter::await_ready(){\n\t\tstd::unique_lock<std::mutex> lock(DataLock);\n\treturn Index != -1;\n}", "CodeBleu_score": 7.548450945983126}]}
{"instance_id": "fab9fe81573a", "generation_result": [{"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tif (!State) {\n\t\treturn true;\n\t}\n\n\tauto* StateStruct = static_cast<FAIAsyncTaskBlueprintProxy*>(State);\n\n\tif (bCleanup) {\n\t\tif (StateStruct->QueryID.IsValid()) {\n\t\t\tUPathFollowingComponent::AbortFindPath(StateStruct->QueryID);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 28.89215376420357}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tif (bCleanup) {\n\t\tif (State) {\n\t\t\tFAIAsyncTaskBlueprintProxy* Proxy = (FAIAsyncTaskBlueprintProxy*)State;\n\t\t\tProxy->AbortTask();\n\t\t\tdelete State;\n\t\t}\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 20.431233538140585}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tif (bCleanup && State != nullptr) {\n\t\tFPathFindingQueryState* QueryState = static_cast<FPathFindingQueryState*>(State);\n\t\tif (QueryState->QueryID.IsValid()) {\n\t\t\tUPathFollowingComponent::AbortPathQuery(QueryState->QueryID);\n\t\t\tQueryState->QueryID.Invalidate();\n\t\t}\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 29.409903797693453}]}
{"instance_id": "0656af2cb3eb", "generation_result": [{"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (Engine::get_singleton()->is_editor_hint() && !get_tree()->is_current()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (Engine::get_singleton()->is_editor_hint() && get_tree()->is_current()) {\n\t\t\t\tAudioServer::get_singleton()->listener_make_current(listener);\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (Engine::get_singleton()->is_editor_hint() && !get_tree()->is_current()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (Engine::get_singleton()->is_editor_hint() && get_tree()->is_current()) {\n\t\t\t\tAudioServer::get_singleton()->listener_clear_current();\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 53.09246237925993}, {"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (!Engine::get_singleton()->is_editor_hint() && !is_inside_tree()) {\n\t\t\t\tif (AudioServer::get_singleton()->listener_is_current(get_instance())) {\n\t\t\t\t\tAudioServer::get_singleton()->listener_make_current(NULL);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (Engine::get_singleton()->is_editor_hint() && !is_inside_tree()) {\n\t\t\t\t\tif (AudioServer::get_singleton()->listener_is_current(get_instance())) {\n\t\t\t\t\t\tAudioServer::get_singleton()->listener_make_current(NULL);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (!Engine::get_singleton()->is_editor_hint() && is_inside_tree()) {\n\t\t\t\tif (AudioServer::get_singleton()->listener_is_current(get_instance())) {\n\t\t\t\t\tAudioServer::get_singleton()->listener_make_current(NULL);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (Engine::get_singleton()->is_editor_hint() && is_inside_tree()) {\n\t\t\t\t\tif (AudioServer::get_singleton()->listener_is_current(get_instance())) {\n\t\t\t\t\t\tAudioServer::get_singleton()->listener_make_current(NULL);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 52.45300655198019}, {"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (Engine::get_singleton()->is_editor_hint()) {\n\t\t\t\tif (!Engine::get_singleton()->is_in_physics_frame()) {\n\t\t\t\t\t// Make the listener current if it is not part of the edited scene and there is an existing current listener\n\t\t\t\t\tif (get_tree()->get_edited_scene_root() != get_parent() && AudioServer::get_singleton()->listener_is_current(get_instance())) {\n\t\t\t\t\t\tAudioServer::get_singleton()->listener_make_current(get_instance());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (Engine::get_singleton()->is_editor_hint()) {\n\t\t\t\tif (!Engine::get_singleton()->is_in_physics_frame()) {\n\t\t\t\t\t// Clear the current listener status if it is not part of the edited scene, preserving the current status if it was previously current\n\t\t\t\t\tif (get_tree()->get_edited_scene_root() != get_parent()) {\n\t\t\t\t\t\tif (AudioServer::get_singleton()->listener_is_current(get_instance())) {\n\t\t\t\t\t\t\tAudioServer::get_singleton()->listener_make_current(0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 48.620748849423514}]}
{"instance_id": "9aadd2c91e67", "generation_result": [{"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\tif (AudioDriverManager::get_singleton() && AudioDriverManager::get_singleton()->is_audio_active()) {\n\t\treturn;\n\t}\n\n\tint32_t *dst = p_buffer;\n\tint todo = p_frames;\n\n\twhile (todo) {\n\t\tint tomix = MIN(todo, AudioDriverManager::get_singleton()->get_audio_frames());\n\n\t\tfor (int i = 0; i < tomix; i++) {\n\t\t\t*dst = 0;\n\t\t\tdst++;\n\t\t}\n\n\t\ttodo -= tomix;\n\t}\n}", "CodeBleu_score": 39.89059281061619}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\n}", "CodeBleu_score": 2.7387813606147358}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\tif (!active) {\n\t\treturn;\n\t}\n\n\tif (audio_driver_dummy_use_threads) {\n\t\treturn;\n\t}\n\n\tif (audio_driver_dummy_mix_chunk_size == 0) {\n\t\taudio_driver_dummy_mix_chunk_size = p_frames;\n\t}\n\n\tint todo = p_frames;\n\tint offset = 0;\n\n\twhile (todo > 0) {\n\t\tint tomix = MIN(todo, audio_driver_dummy_mix_chunk_size);\n\n\t\t{\n\t\t\tMutexLock lock(audio_driver_dummy_mutex);\n\n\t\t\tfor (int i = 0; i < tomix; i++) {\n\t\t\t\tp_buffer[i + offset] = audio_driver_dummy_buffer[i];\n\t\t\t}\n\t\t}\n\n\t\ttodo -= tomix;\n\t\toffset += tomix;\n\t}\n}", "CodeBleu_score": 43.359003536305}]}
{"instance_id": "56df08c77b69", "generation_result": [{"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tr_gravity = gravity;\n\n\tif (gravity_point != Vector2()) {\n\t\tr_gravity += -1.0 * gravity * gravity_point.distance_squared_to(p_position);\n\t}\n}", "CodeBleu_score": 20.921110867838916}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tif (gravity_point.x != 0.0 || gravity_point.y != 0.0) {\n\t\tr_gravity = gravity_vec;\n\t\tr_gravity *= 1.0 / (p_position - gravity_point).length_squared();\n\t} else {\n\t\tr_gravity = gravity_vec;\n\t}\n}", "CodeBleu_score": 23.2802873375443}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tif (gravity_is_point) {\n\t\tfloat distance_squared = p_position.distance_squared_to(gravity_point);\n\t\tif (distance_squared > 0) {\n\t\t\tr_gravity = gravity_vector * (1.0 / distance_squared);\n\t\t} else {\n\t\t\tr_gravity = gravity_vector;\n\t\t}\n\t} else {\n\t\tr_gravity = gravity_vector;\n\t}\n}", "CodeBleu_score": 27.0134830646364}]}
{"instance_id": "f8c60f8d0caa", "generation_result": [{"code": "void GodotBody2D::wakeup_neighbours(){\n\t\n}", "CodeBleu_score": 1.5759908941150158}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\n}", "CodeBleu_score": 1.5759908941150158}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\t// TODO\n}", "CodeBleu_score": 1.5759908941150158}]}
{"instance_id": "0c6f6c00da9a", "generation_result": [{"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (space)  {\n\t\tif (space->area_monitor_list.find(this) == -1)  {\n\t\t\tspace->area_monitor_list.push_back(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 26.42793970726247}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (space != NULL && space->is_valid() && space->get_area_monitor_list().find(this) == -1) {\n\t\tspace->get_area_monitor_list().push_back(this);\n\t}\n}", "CodeBleu_score": 31.563662212080974}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (space != NULL && space->is_valid() && space->get_monitor_query_list().find(this) == NULL) {\n\t\tspace->get_monitor_query_list().push_back(this);\n\t}\n}", "CodeBleu_score": 33.25479613852049}]}
{"instance_id": "efc39df0e3a3", "generation_result": [{"code": "void GodotBody3D::_update_transform_dependent(){\n\t\n}", "CodeBleu_score": 2.283015242142766}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t\n}", "CodeBleu_score": 2.283015242142766}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t\n}", "CodeBleu_score": 2.283015242142766}]}
{"instance_id": "aebafb4094a1", "generation_result": [{"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tif (AudioServer::get_singleton() && AudioServer::get_singleton()->is_audio_driver_processing()) {\n\t\tAudioServer::get_singleton()->audio_server_process(p_frames, p_buffer, p_update_mix_time);\n\t}\n}", "CodeBleu_score": 50.95560044404668}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tif (AudioDriverManager::get_singleton() && AudioDriverManager::get_singleton()->audio_driver) {\n\t\tAudioDriverManager::get_singleton()->audio_driver->audio_server_process(p_frames, p_buffer, p_update_mix_time);\n\t}\n}", "CodeBleu_score": 48.55936697141246}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tERR_FAIL_COND(AudioServer::get_singleton() == nullptr);\n\tAudioServer::get_singleton()->process(p_frames, p_buffer, p_update_mix_time);\n}", "CodeBleu_score": 49.70584693829601}]}
{"instance_id": "160bb23e8010", "generation_result": [{"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\n}", "CodeBleu_score": 3.4490430967074563}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\n}", "CodeBleu_score": 3.4490430967074563}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\tERR_FAIL_COND(p_feed.is_null());\n\tCameraFeed *feed = p_feed.ptr();\n\n\t// remove from feeds\n\tfor (int i = 0; i < feeds.size(); i++) {\n\t\tif (feeds[i].get() == feed) {\n\t\t\tfeeds.remove(i);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// remove from feed_map\n\tfor (int i = 0; i < feed_map.size(); i++) {\n\t\tif (feed_map[i].get() == feed) {\n\t\t\tfeed_map.remove(i);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// remove from feed_id_map\n\tfor (int i = 0; i < feed_id_map.size(); i++) {\n\t\tif (feed_id_map[i] == feed->get_id()) {\n\t\t\tfeed_id_map.remove(i);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\temit_signal(\"feed_removed\", feed->get_id());\n}", "CodeBleu_score": 52.45836596564934}]}
{"instance_id": "bef3cf110c45", "generation_result": [{"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t\tassert(action != nullptr);\n\n\tEaseRateAction* ret = new EaseRateAction();\n\tif (ret->initWithAction(action, rate)) {\n\t\tret->autorelease();\n\t} else {\n\t\tCC_SAFE_DELETE(ret);\n\t}\n\n\treturn ret;\n}", "CodeBleu_score": 46.10537314789837}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t\tassert(action != nullptr);\n\tauto ret = new (std::nothrow) EaseRateAction();\n\tif (ret->initWithAction(action, rate)) {\n\t\tret->autorelease();\n\t\treturn ret;\n\t}\n\tCC_SAFE_DELETE(ret);\n\treturn nullptr;\n}", "CodeBleu_score": 54.47850098568458}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t\tassert(action != NULL);\n\tEaseRateAction *ret = new EaseRateAction();\n\tif (ret->initWithAction(action, rate)) {\n\t\tret->autorelease();\n\t\treturn ret;\n\t}\n\tCC_SAFE_DELETE(ret);\n\treturn NULL;\n}", "CodeBleu_score": 47.24914052134768}]}
{"instance_id": "97fc6f86ad54", "generation_result": [{"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t\tif (node->getName() == childName) {\n\t\treturn node;\n\t}\n\n\tconst Vector<Node*>& children = node->getChildren();\n\tfor (Node* child : children) {\n\t\tNode* foundNode = findChildByNameRecursively(child, childName);\n\t\tif (foundNode) {\n\t\t\treturn foundNode;\n\t\t}\n\t}\n\n\treturn nullptr;\n}", "CodeBleu_score": 64.83303340279788}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t\tif (node->getName() == childName)\n\t\treturn node;\n\n\tfor (Node* child : node->getChildren()) {\n\t\tNode* foundNode = findChildByNameRecursively(child, childName);\n\t\tif (foundNode)\n\t\t\treturn foundNode;\n\t}\n\n\treturn nullptr;\n}", "CodeBleu_score": 51.81993400892294}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t\tif (node->getName() == childName) {\n\t\treturn node;\n\t}\n\telse {\n\t\tfor (Node* child : *(node->getChildren())) {\n\t\t\tNode* foundNode = findChildByNameRecursively(child, childName);\n\t\t\tif (foundNode) {\n\t\t\t\treturn foundNode;\n\t\t\t}\n\t\t}\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 50.38178767685848}]}
{"instance_id": "5fcbe1fedcd2", "generation_result": [{"code": "void Animate3D::removeFromMap(){\n\t\n}", "CodeBleu_score": 1.2877098086580057}, {"code": "void Animate3D::removeFromMap(){\n\t\n}", "CodeBleu_score": 1.2877098086580057}, {"code": "void Animate3D::removeFromMap(){\n\t\n}", "CodeBleu_score": 1.2877098086580057}]}
{"instance_id": "db8d394f7bc4", "generation_result": [{"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t\tAnimation3D* animation = Animation3DCache::getInstance()->getAnimation(fileName, animationName);\n\tif (!animation) {\n\t\tanimation = new (std::nothrow) Animation3D();\n\t\tif (animation && !animation->initWithFile(fileName, animationName)) {\n\t\t\tCC_SAFE_DELETE(animation);\n\t\t\tanimation = nullptr;\n\t\t}\n\t\telse {\n\t\t\tAnimation3DCache::getInstance()->addAnimation(animation);\n\t\t}\n\t}\n\treturn animation;\n}", "CodeBleu_score": 47.92619028491835}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t\tAnimation3D* ret = nullptr;\n\n\tdo {\n\t\tret = Animation3DCache::getInstance()->getAnimation(fileName, animationName);\n\t\tif (ret)\n\t\t\tbreak;\n\n\t\tret = new Animation3D();\n\t\tret->initWithFile(fileName, animationName);\n\t\tif (ret->init()) {\n\t\t\tAnimation3DCache::getInstance()->addAnimation(ret, fileName, animationName);\n\t\t}\n\t\telse {\n\t\t\tCC_SAFE_DELETE(ret);\n\t\t\tbreak;\n\t\t}\n\t} while (0);\n\n\treturn ret;\n}", "CodeBleu_score": 39.035128539738864}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t\tAnimation3D* ret = Animation3D::createWithFile(fileName, animationName);\n\tif (!ret) {\n\t\tCCLOG(\"cocos2d: Animation3D: animation not found: %s\", fileName.c_str());\n\t}\n\treturn ret;\n}", "CodeBleu_score": 22.235669898755113}]}
{"instance_id": "cdf28d98d3ff", "generation_result": [{"code": "void Animation3DCache::removeUnusedAnimation(){\n\t}", "CodeBleu_score": 2.1272773458620904}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t}", "CodeBleu_score": 2.1272773458620904}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t\tfor (auto iter = _animationCache.begin(); iter != _animationCache.end(); ) {\n\t\tAnimation3D* animation = iter->second;\n\t\tif (animation->getReferenceCount() == 1) {\n\t\t\tanimation->release();\n\t\t\t_animationCache.erase(iter++);\n\t\t} else {\n\t\t\t++iter;\n\t\t}\n\t}\n}", "CodeBleu_score": 48.14346256953642}]}
{"instance_id": "de7926871eb8", "generation_result": [{"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t\tBillBoard *ret = new BillBoard();\n\tif (ret->initWithTexture(texture, mode))\n\t{\n\t\tret->autorelease();\n\t\treturn ret;\n\t}\n\tCC_SAFE_DELETE(ret);\n\treturn nullptr;\n}", "CodeBleu_score": 46.763342656142804}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t\tBillBoard *ret = new BillBoard();\n\tif (ret->initWithTexture(texture, mode)) {\n\t\tret->autorelease();\n\t\treturn ret;\n\t}\n\tCC_SAFE_DELETE(ret);\n\treturn nullptr;\n}", "CodeBleu_score": 46.719453345084716}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\tBillBoard *ret = new BillBoard();\nif (ret->initWithTexture(texture, mode))\n{\nret->autorelease();\n}\nelse\n{\nCC_SAFE_DELETE(ret);\n}\nreturn ret;\n}", "CodeBleu_score": 42.770012356826825}]}
{"instance_id": "eef1c2206d68", "generation_result": [{"code": "bool Bundle3D::load(const std::string& path){\n\t\t// Check if the path is empty or already loaded\n\tif (path.empty() || _path == path) {\n\t\treturn true;\n\t}\n\n\t// Clear the current bundle\n\tclear();\n\n\t// Set the path\n\t_path = path;\n\n\t// Get the file extension\n\tstd::string ext = FileUtils::getInstance()->getFileExtension(_path);\n\n\t// Load the bundle\n\tif (ext == \"c3t\") {\n\t\t// Load as JSON\n\t\tif (!loadAsJson(path)) {\n\t\t\t// Clear the path\n\t\t\t_path.clear();\n\n\t\t\t// Return failure\n\t\t\treturn false;\n\t\t}\n\t} else if (ext == \"c3b\") {\n\t\t// Load as binary\n\t\tif (!loadAsBinary(path)) {\n\t\t\t// Clear the path\n\t\t\t_path.clear();\n\n\t\t\t// Return failure\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\t// Invalid format\n\t\tCCLOGWARN(\"Bundle3D: Invalid bundle format: %s\", _path.c_str());\n\n\t\t// Clear the path\n\t\t_path.clear();\n\n\t\t// Return failure\n\t\treturn false;\n\t}\n\n\t// Return success\n\treturn true;\n}", "CodeBleu_score": 48.58402672820777}, {"code": "bool Bundle3D::load(const std::string& path){\n\t\t// check if the path is empty or already loaded\n\tif (path.empty() || _path == path) {\n\t\treturn true;\n\t}\n\n\t// clear the current bundle\n\tclear();\n\n\t// set the path\n\t_path = path;\n\n\t// get the extension\n\tstd::string ext = FileUtils::getInstance()->getFileExtension(path);\n\n\t// load as JSON\n\tif (ext == \".c3t\") {\n\t\treturn loadJSON();\n\t}\n\t// load as binary\n\telse if (ext == \".c3b\") {\n\t\treturn loadBinary();\n\t}\n\t// unknown format\n\telse {\n\t\tCCLOGWARN(\"Bundle3D: Unknown format for file '%s'\", path.c_str());\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 42.436736165682134}, {"code": "bool Bundle3D::load(const std::string& path){\n\t\t// check if the path is empty or already loaded\n\tif (path.empty() || _path == path) {\n\t\treturn true;\n\t}\n\n\t// clear the current data\n\tclear();\n\n\t// set the path\n\t_path = path;\n\n\t// determine the file extension\n\tconst std::string ext = FileUtils::getInstance()->getFileExtension(_path);\n\n\t// load as JSON\n\tif (ext == \".c3t\") {\n\t\treturn loadJSON();\n\t}\n\t// load as binary\n\telse if (ext == \".c3b\") {\n\t\treturn loadBinary();\n\t}\n\t// invalid format\n\telse {\n\t\tCCLOGWARN(\"Bundle3D: Invalid format: %s\", _path.c_str());\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 39.501113122309526}]}
{"instance_id": "37b6acea681e", "generation_result": [{"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t\tCCLOG(\"Bundle3D::loadSkinData: id is %s\", id.c_str());\n\tCCAssert(skindata != nullptr, \"SkinData is null\");\n\tif (id.empty()) {\n\t\treturn false;\n\t}\n\tif (id.find(\".skn\") != std::string::npos) {\n\t\treturn loadSkinDataBinary(id, skindata);\n\t}\n\telse if (id.find(\".json\") != std::string::npos) {\n\t\treturn loadSkinDataJson(id, skindata);\n\t}\n\telse {\n\t\tCCLOG(\"Bundle3D::loadSkinData: unknown format\");\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 45.192611475720675}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t\tskindata->reset();\n\n\t// load skin data\n\tstd::string fullpath = _path + id + \".skin\";\n\n\tif (FileUtils::getInstance()->isFileExist(fullpath)) {\n\t\t// load skin data from binary\n\t\tif (FileUtils::getInstance()->getFileExtension(fullpath) == \".bin\") {\n\t\t\treturn loadSkinDataBinary(fullpath, skindata);\n\t\t}\n\t\t// load skin data from json\n\t\telse {\n\t\t\treturn loadSkinDataJson(fullpath, skindata);\n\t\t}\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 53.06529032299202}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t\t// reset the skin data\n\tskindata->reset();\n\n\t// check if the skin data is in binary format or not\n\tif (FileUtils::getInstance()->isFileExist(id + \".skn\")) {\n\t\t// load the skin data in binary format\n\t\treturn loadSkinDataBinary(id, skindata);\n\t}\n\telse if (FileUtils::getInstance()->isFileExist(id + \".json\")) {\n\t\t// load the skin data in JSON format\n\t\treturn loadSkinDataJson(id, skindata);\n\t}\n\telse {\n\t\t// skin data not found\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 53.08482615364074}]}
{"instance_id": "97449825e4ef", "generation_result": [{"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\tAudioDecoder* decoder = (AudioDecoder*) datasource;\n\tsize_t bytesToRead = size * nmemb;\n\tif (bytesToRead > decoder->remainingDataSize) {\n\t\tbytesToRead = decoder->remainingDataSize;\n\t}\n\tif (bytesToRead > 0) {\n\t\tmemcpy(ptr, decoder->data + decoder->dataPosition, bytesToRead);\n\t\tdecoder->dataPosition += bytesToRead;\n\t\tdecoder->remainingDataSize -= bytesToRead;\n\t}\n\treturn bytesToRead;\n}", "CodeBleu_score": 49.50744120022386}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\tAudioDecoder* decoder = (AudioDecoder*) datasource;\n\tsize_t bytesToRead = size * nmemb;\n\tsize_t bytesRead = 0;\n\n\tif (decoder->bytesRemaining > 0) {\n\t\tif (decoder->bytesRemaining < bytesToRead) {\n\t\t\tbytesToRead = decoder->bytesRemaining;\n\t\t}\n\n\t\tmemcpy(ptr, decoder->file + decoder->filePos, bytesToRead);\n\t\tdecoder->filePos += bytesToRead;\n\t\tdecoder->bytesRemaining -= bytesToRead;\n\t\tbytesRead = bytesToRead;\n\t}\n\n\treturn bytesRead;\n}", "CodeBleu_score": 46.412952275125754}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\tAudioDecoder* decoder = (AudioDecoder*)datasource;\n\tsize_t bytesRead = 0;\n\tsize_t bytesToRead = 0;\n\tsize_t bytesRemaining = 0;\n\tsize_t bytesToCopy = 0;\n\tsize_t bytesCopied = 0;\n\tchar* buffer = (char*)ptr;\n\tif (decoder != NULL) {\n\t\tbytesRead = fread(buffer, 1, size * nmemb, decoder->m_file);\n\t\tbytesRemaining = decoder->m_fileSize - decoder->m_filePos;\n\t\tif (bytesRead > 0) {\n\t\t\tbytesToRead = size * nmemb;\n\t\t\tif (bytesToRead > bytesRemaining) {\n\t\t\t\tbytesToRead = bytesRemaining;\n\t\t\t}\n\t\t\tbytesToCopy = bytesToRead;\n\t\t\tif (bytesToCopy > bytesRead) {\n\t\t\t\tbytesToCopy = bytesRead;\n\t\t\t}\n\t\t\tmemcpy(buffer, decoder->m_filePos, bytesToCopy);\n\t\t\tdecoder->m_filePos += bytesToCopy;\n\t\t}\n\t}\n\treturn bytesRead;\n}", "CodeBleu_score": 45.04415693766909}]}
{"instance_id": "0f4db164ba5d", "generation_result": [{"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t\n}", "CodeBleu_score": 7.8349078318894465}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t\n}", "CodeBleu_score": 7.8349078318894465}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t\n//    std::cout << \"AudioDecoder::AudioDecoder\" << std::endl;\n\n    _pcmBuffer = std::make_shared<std::vector<uint8_t>>();\n\n    _pcmBuffer->reserve(4096);\n\n}", "CodeBleu_score": 46.397527952733455}]}
{"instance_id": "0f88663615c6", "generation_result": [{"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t\tstatic std::mutex downloaderMapMutex;\n\tstd::lock_guard<std::mutex> guard(downloaderMapMutex);\n\tauto it = _downloaderMap.find(id);\n\treturn it == _downloaderMap.end() ? nullptr : it->second;\n}", "CodeBleu_score": 57.838874178597344}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t\tstatic std::mutex downloaderMutex;\n\tstatic std::map<int, cocos2d::network::DownloaderAndroid*> downloaderMap;\n\n\tstd::lock_guard<std::mutex> lock(downloaderMutex);\n\n\tauto it = downloaderMap.find(id);\n\tif (it != downloaderMap.end()) {\n\t\treturn it->second;\n\t}\n\n\treturn nullptr;\n}", "CodeBleu_score": 58.67916025052777}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t\tstatic std::mutex mapMutex;\n\tstatic std::map<int, cocos2d::network::DownloaderAndroid*> map;\n\tstd::lock_guard<std::mutex> lock(mapMutex);\n\tauto it = map.find(id);\n\treturn it != map.end() ? it->second : nullptr;\n}", "CodeBleu_score": 55.32756907306589}]}
{"instance_id": "a5aafaaa944c", "generation_result": [{"code": "function M.playMusic(filename, isLoop)\n\t\tif isLoop == nil then \n\t\tisLoop = false \n\tend \n\tcc.SimpleAudioEngine:getInstance():playMusic(filename, isLoop) ", "CodeBleu_score": 45.772203717465544}, {"code": "function M.playMusic(filename, isLoop)\n\t\tif isLoop == nil then\n\t\tisLoop = false\n\tend\n\tSimpleAudioEngine.playMusic(filename, isLoop)", "CodeBleu_score": 36.20597770634882}, {"code": "function M.playMusic(filename, isLoop)\n\t\tif isLoop == nil then \n\t\tisLoop = false \n\tend \n\taudioEngine:playMusic(filename, isLoop) ", "CodeBleu_score": 35.22519027734958}]}
{"instance_id": "16f2ad4bb4e8", "generation_result": [{"code": "function ccs.TriggerObj:detect()\n\t\treturn self.detect", "CodeBleu_score": 6.655686801442134}, {"code": "function ccs.TriggerObj:detect()\n\t\treturn self.detect", "CodeBleu_score": 6.655686801442134}, {"code": "function ccs.TriggerObj:detect()\n\t\treturn self.detect", "CodeBleu_score": 6.655686801442134}]}
{"instance_id": "e73b10418cb6", "generation_result": [{"code": "function ccs.TriggerObj:removeAll()\n\t\tlocal i = 1\n\twhile i <= #self.conditions do\n\t\tself.conditions[i]:removeAll()\n\t\ti = i + 1\n\tend\n\ti = 1\n\twhile i <= #self.actions do\n\t\tself.actions[i]:removeAll()\n\t\ti = i + 1\n\tend\n\tself.conditions = {}\n\tself.actions = {}", "CodeBleu_score": 33.18518378105561}, {"code": "function ccs.TriggerObj:removeAll()\n\t\tlocal len = #self.m_pActions\n\tfor i = 0, len - 1 do\n\t\tlocal action = self.m_pActions[i]\n\t\tif action ~= nil then\n\t\t\taction:removeAll()\n\t\tend\n\tend\n\tself.m_pActions = {}\n\tlocal len = #self.m_pConditions\n\tfor i = 0, len - 1 do\n\t\tlocal condition = self.m_pConditions[i]\n\t\tif condition ~= nil then\n\t\t\tcondition:removeAll()\n\t\tend\n\tend\n\tself.m_pConditions = {}", "CodeBleu_score": 46.327569279183464}, {"code": "function ccs.TriggerObj:removeAll()\n\t\tfor i,v in ipairs(self.conditions) do\n\t\tif v.removeAll then\n\t\t\tv:removeAll()\n\t\tend\n\tend\n\tfor i,v in ipairs(self.actions) do\n\t\tif v.removeAll then\n\t\t\tv:removeAll()\n\t\tend\n\tend\n\tself.conditions = {}\n\tself.actions = {}", "CodeBleu_score": 34.08068533008473}]}
{"instance_id": "d5a1333d794d", "generation_result": [{"code": "function BasicCollider:hurtEffect(target)\n\t\tlocal hurtAnimation = self.hurtAnimation\n\tlocal hurtEffect = display.newSprite(hurtAnimation, 0, 0)\n\thurtEffect.xScale = target.xScale\n\thurtEffect.yScale = target.yScale\n\thurtEffect.x = target.x\n\thurtEffect.y = target.y\n\thurtEffect.anchorX = 0\n\thurtEffect.anchorY = 0\n\thurtEffect.mask = MASK_HURT\n\thurtEffect.runAnimation()\n\thurtEffect.removeSelf = function()\n\t\thurtEffect:removeSelf()\n\tend\n\ttarget:addChild(hurtEffect)", "CodeBleu_score": 42.08853288248597}, {"code": "function BasicCollider:hurtEffect(target)\n\t\tlocal hurtAnimation = GlobalVariables.hurtAnimation\n\tlocal hurtBillboard = GlobalVariables.hurtBillboard\n\tlocal hurtEffect = GlobalVariables.hurtEffect\n\tlocal cameraMask = GlobalVariables.cameraMask\n\tlocal effectScale = GlobalVariables.effectScale\n\tlocal effectOffset = GlobalVariables.effectOffset\n\t\n\thurtBillboard.position = target.position + effectOffset\n\thurtBillboard.scale = effectScale\n\thurtBillboard.animation = hurtAnimation\n\thurtBillboard.play()\n\thurtBillboard.cameraMask = cameraMask\n\thurtBillboard.parent = target\n\thurtBillboard.removeSelf()", "CodeBleu_score": 37.975183984566975}, {"code": "function BasicCollider:hurtEffect(target)\n\t\tlocal hurtAnimation = self.hurtAnimation\n\tlocal effect = hurtAnimation:clone()\n\teffect.position = target.position\n\teffect.scale = target.scale * 1.5\n\teffect.billboardMode = BILLBOARDMODE_ALL\n\teffect.animation:play()\n\teffect.cameraMask = MASK_INVISIBLE\n\teffect.parent = target\n\teffect.visible = true\n\teffect.z = -10\n\teffect.collision = false\n\teffect.script.destroy.delay = 1", "CodeBleu_score": 35.64439804153533}]}
{"instance_id": "f478d7e70ea6", "generation_result": [{"code": "function MageNormalAttack:onTimeOut()\n\t\tself.mageNormalAttackParticles:stop()\n\tself.mageNormalAttackParticles2:stop()\n\tself.removeSequence = Sequence {\n\t\trun = function()\n\t\t\tself.mageNormalAttackParticles:removeSelf()\n\t\t\tself.mageNormalAttackParticles2:removeSelf()\n\t\tend\n\t}\n\tself.removeSequence:delay(0.5)\n\tself.removeSequence:start()\n\tself.mageNormalAttackParticles = display.newEmitter(0, 0, self.mageNormalAttackParticlesTexture)\n\tself.mageNormalAttackParticles.xScale = 0.01\n\tself.mageNormalAttackParticles.yScale = 0.01\n\tself.mageNormalAttackParticles.z = 0\n\tself.mageNormalAttackParticles.rotation = 0\n\tself.mageNormalAttackParticles.rotationSpeed = 0\n\tself.mageNormalAttackParticles.emitterType = EMITTER_TYPE_RADIAL\n\tself.mageNormalAttackParticles.x = self.x\n\tself.mageNormalAttackParticles.y = self.y\n\tself.mageNormalAttackParticles.z = self.z\n\tself.mageNormalAttackParticles.texture = self.mageNormalAttackParticlesTexture\n\tself.mageNormalAttackParticles.blendMode = BLEND_MODE_ADD\n\tself.mageNormalAttackParticles.particleLifeSpan = 2.5\n\tself.mageNormalAttackParticles.emissionRate = 20\n\tself.mageNormalAttackParticles.xVariance = 0\n\tself.mageNormalAttackParticles.yVariance = 0\n\tself.mageNormalAttackParticles.zVariance = 0\n\tself.mageNormalAttackParticles.speed = 10\n\tself.mageNormalAttackParticles.speedVariance = 0\n\tself.mageNormalAttackParticles.particleLifespan = 2.5\n\tself.mageNormalAttackParticles.rotationStart = 0\n\tself.mageNormalAttackParticles.rotationEnd = 360\n\tself.mageNormalAttackParticles.rotationRate = 0\n\tself.mageNormalAttackParticles.rotationRateVariance = 0\n\tself.mageNormalAttackParticles.tangentialAcceleration = 0\n\tself.mageNormalAttackParticles.tangentialAccelerationVariance = 0\n\tself.mageNormalAttackParticles.radialAcceleration", "CodeBleu_score": 34.05467778341074}, {"code": "function MageNormalAttack:onTimeOut()\n\t\tself.mage.mageNormalAttackEffect:stop()\n\tself.mage.mageNormalAttackEffect2:stop()\n\tlocal removeSequence = Sequence {\n\t\tFunc(self.mage.removeFromScene),\n\t\tWait(0.5),\n\t}\n\tremoveSequence:start()\n\n\tlocal particle = ParticleSystem(self.mage.resMan:getParticle(\"MageNormalAttack\"))\n\tparticle:setLooping(false)\n\tparticle:setPos(self.mage.x, self.mage.y)\n\tparticle:setDepthTest(false)\n\tparticle:setDepthWrite(false)\n\tparticle:setEmissionRate(1000)\n\tparticle:setEmitterAngle(0, 360)\n\tparticle:setEmitterSize(0.1, 0.1)\n\tparticle:setEmitterRadius(0.2)\n\tparticle:setParticleLife(0.8)\n\tparticle:setParticleLifeVariation(0.2)\n\tparticle:setParticleAngle(0, 360)\n\tparticle:setParticleAngleVariation(10)\n\tparticle:setParticleSpeed(20)\n\tparticle:setParticleSpeedVariation(5)\n\tparticle:setParticleGravity(0, 200)\n\tparticle:setParticleRadialAcceleration(0, 100)\n\tparticle:setParticleRadialAccelVariation(0)\n\tparticle:setParticleTangentialAcceleration(0, 100)\n\tparticle:setParticleTangentialAccelVariation(0)\n\tparticle:setTexture(self.mage.resMan:getTexture(\"MageNormalAttack\"))\n\tparticle:setBlendMode(\"add\")\n\tparticle:setStartColor(0.2, 0.2, 0.2, 0.5)\n\tparticle:setEndColor(0.2, 0.2, 0.2, 0)\n\tparticle:setStartSize(0.2)\n\tparticle:setEndSize(0.5)\n\tparticle:setEmissionEnabled(true)\n\tparticle:setTextureBlendMode(\"add\")\n\tparticle:setFinishColor(0.2, 0.2, 0.2, 0)\n\tparticle:setFinishSize(0.5)\n\t", "CodeBleu_score": 30.083336629262103}, {"code": "function MageNormalAttack:onTimeOut()\n\t\tself.mage.mageNormalAttack:stop()\n\tself.mage.mageNormalAttack2:stop()\n\tlocal sequence = cc.Sequence:create(cc.DelayTime:create(0.5), cc.CallFunc:create(self.removeFromParent), nil)\n\tself:runAction(sequence)\n\tlocal particle = cc.ParticleSun:create()\n\tparticle:setTexture(cc.TextureCache:getInstance():addImage(\"MageAttackFire.png\"))\n\tparticle:setPosition(cc.p(self.mage.x, self.mage.y))\n\tparticle:setLife(0.75)\n\tparticle:setStartSizeVar(1.0)\n\tparticle:setEndSizeVar(0.0)\n\tparticle:setTangentialAccelVar(0.0)\n\tparticle:setGravity(cc.p(0.0, 0.0))\n\tparticle:setSpeed(100.0)\n\tparticle:setAngle(90.0)\n\tparticle:setStartColor(cc.c3b(255, 255, 255))\n\tparticle:setEndColor(cc.c3b(255, 255, 255))\n\tparticle:setBlendAdditive(true)\n\tparticle:setEmissionRate(300)\n\tself.mage.addChild(particle)\n\tparticle:setPosition(cc.p(self.mage.x, self.mage.y))\n\tparticle:resetSystem()\n\tself.mage.mageNormalAttack2:setTexture(cc.TextureCache:getInstance():addImage(\"MageAttackFire.png\"))\n\tself.mage.mageNormalAttack2:setPosition(cc.p(self.mage.x, self.mage.y))\n\tself.mage.mageNormalAttack2:setLifeVar(0.75)\n\tself.mage.mageNormalAttack2:setStartSizeVar(1.0)\n\tself.mage.mageNormalAttack2:setEndSizeVar(0.0)\n\tself.mage.mageNormalAttack2:setTangentialAccelVar(0.0)\n\tself.mage.mageNormalAttack2:setGravity(cc.p(0.0, 0.0))", "CodeBleu_score": 48.19710549198093}]}
{"instance_id": "d735c4ea6358", "generation_result": [{"code": "function BattlefieldUI:heroDead(hero)\n\t\tif hero.name == \"Knight\" then\n\t\thero.image.shader = \"hero_knight_dead_shader\"\n\t\thero.frame.visible = false\n\telseif hero.name == \"Archer\" then\n\t\thero.image.shader = \"hero_archer_dead_shader\"\n\t\thero.frame.visible = false\n\telseif hero.name == \"Mage\" then\n\t\thero.image.shader = \"hero_mage_dead_shader\"\n\t\thero.frame.visible = false\n\tend\n\thero.angerFull.visible = false\n\thero.angerClone.visible = false", "CodeBleu_score": 27.036912143582676}, {"code": "function BattlefieldUI:heroDead(hero)\n\t\tif hero.name == \"Knight\" then\n\t\thero.image.shader = Shader.Find(\"Unlit/Texture\")\n\t\thero.image.color = Color.grey\n\t\thero.frame.color = Color.grey\n\t\thero.angerFullSignal.enabled = false\n\t\thero.angerClone.enabled = false\n\telseif hero.name == \"Mage\" then\n\t\thero.image.shader = Shader.Find(\"Unlit/Texture\")\n\t\thero.image.color = Color.grey\n\t\thero.frame.color = Color.grey\n\t\thero.angerFullSignal.enabled = false\n\t\thero.angerClone.enabled = false\n\telseif hero.name == \"Archer\" then\n\t\thero.image.shader = Shader.Find(\"Unlit/Texture\")\n\t\thero.image.color = Color.grey\n\t\thero.frame.color = Color.grey\n\t\thero.angerFullSignal.enabled = false\n\t\thero.angerClone.enabled = false\n\tend", "CodeBleu_score": 33.74227334110292}, {"code": "function BattlefieldUI:heroDead(hero)\n\t\tif hero.name == \"Knight\" then\n\t\thero.image:setShader(self.knightShader)\n\t\thero.frame:setShader(self.knightShader)\n\telseif hero.name == \"Mage\" then\n\t\thero.image:setShader(self.mageShader)\n\t\thero.frame:setShader(self.mageShader)\n\telseif hero.name == \"Archer\" then\n\t\thero.image:setShader(self.archerShader)\n\t\thero.frame:setShader(self.archerShader)\n\tend\n\thero.angerFull:setVisible(false)\n\thero.angerClone:setVisible(false)", "CodeBleu_score": 45.08715446070133}]}
{"instance_id": "009f167d3ab2", "generation_result": [{"code": "local function moveCamera(dt)\n\t\tif (GlobalVariables.cameraMode == GlobalVariables.CameraMode.FollowHeroes) then\n\t\tif (GameMaster.getNumberOfHeroes() > 0) then\n\t\t\tlocal focusPoint = GameMaster.getFocusPoint()\n\t\t\tlocal cameraPosition = Vector3(focusPoint.x, focusPoint.y, Camera.main.transform.position.z)\n\t\t\tlocal cameraRotation = Quaternion.Euler(0, 0, focusPoint.rotation)\n\t\t\tCamera.main.transform.position = Vector3.Lerp(Camera.main.transform.position, cameraPosition, dt * GlobalVariables.cameraSpeed)\n\t\t\tCamera.main.transform.rotation = Quaternion.Slerp(Camera.main.transform.rotation, cameraRotation, dt * GlobalVariables.cameraSpeed)\n\t\tend\n\telseif (GlobalVariables.cameraMode == GlobalVariables.CameraMode.FollowUnit) then\n\t\tif (GlobalVariables.cameraFocusUnit ~= nil) then\n\t\t\tlocal cameraPosition = Vector3(GlobalVariables.cameraFocusUnit.transform.position.x, GlobalVariables.cameraFocusUnit.transform.position.y, Camera.main.transform.position.z)\n\t\t\tlocal cameraRotation = Quaternion.Euler(0, 0, GlobalVariables.cameraFocusUnit.transform.rotation.eulerAngles.z)\n\t\t\tCamera.main.transform.position = Vector3.Lerp(Camera.main.transform.position, cameraPosition, dt * GlobalVariables.cameraSpeed)\n\t\t\tCamera.main.transform.rotation = Quaternion.Slerp(Camera.main.transform.rotation, cameraRotation, dt * GlobalVariables.cameraSpeed)\n\t\tend\n\telseif (GlobalVariables.cameraMode == GlobalVariables.CameraMode.FollowUnitAndHeroes) then\n\t\tif (GlobalVariables.cameraFocusUnit ~= nil) then\n\t\t\tlocal focusPoint = GlobalVariables.cameraFocusUnit.getFocusPoint()\n\t\t\tlocal cameraPosition = Vector3(focusPoint.x, focusPoint.y, Camera.main.transform.position.z)\n\t\t\tlocal cameraRotation = Quaternion.Euler(0, 0, focusPoint.rotation)\n\t\t\tCamera.main.transform.position = Vector3.Lerp(Camera.main.transform.position, cameraPosition, dt * GlobalVariables.cameraSpeed)\n\t\t\tCamera.main.transform.rotation = Quaternion.Slerp(Camera.main.transform.rotation, cameraRotation", "CodeBleu_score": 34.707358207472495}, {"code": "local function moveCamera(dt)\n\t\tlocal camera = nil\n\tlocal heroes = nil\n\tlocal camera_focus = nil\n\tlocal camera_target = nil\n\tlocal camera_offset = nil\n\tlocal camera_target_offset = nil\n\tlocal camera_position = nil\n\tlocal camera_orientation = nil\n\tlocal camera_focus_position = nil\n\tlocal camera_focus_orientation = nil\n\tlocal camera_target_position = nil\n\tlocal camera_target_orientation = nil\n\tlocal camera_focus_offset = nil\n\tlocal camera_target_offset = nil\n\tlocal camera_focus_offset_distance = nil\n\tlocal camera_target_offset_distance = nil\n\tlocal camera_focus_offset_position = nil\n\tlocal camera_target_offset_position = nil\n\tlocal camera_focus_offset_orientation = nil\n\tlocal camera_target_offset_orientation = nil\n\tlocal camera_focus_offset_position_x = nil\n\tlocal camera_focus_offset_position_y = nil\n\tlocal camera_focus_offset_position_z = nil\n\tlocal camera_target_offset_position_x = nil\n\tlocal camera_target_offset_position_y = nil\n\tlocal camera_target_offset_position_z = nil\n\tlocal camera_focus_offset_orientation_x = nil\n\tlocal camera_focus_offset_orientation_y = nil\n\tlocal camera_focus_offset_orientation_z = nil\n\tlocal camera_target_offset_orientation_x = nil\n\tlocal camera_target_offset_orientation_y = nil\n\tlocal camera_target_offset_orientation_z = nil\n\tlocal camera_focus_offset_distance_x = nil\n\tlocal camera_focus_offset_distance_y = nil\n\tlocal camera_focus_offset_distance_z = nil\n\tlocal camera_target_offset_distance_x = nil\n\tlocal camera_target_offset_distance_y = nil\n\tlocal camera_target_offset_distance_z = nil\n\tlocal camera_focus_offset_position_x = nil\n\tlocal camera_focus_offset_position_y = nil\n\tlocal camera_focus_offset_position_z = nil\n\tlocal camera_target_offset_position_x = nil\n\tlocal camera_target_offset_position", "CodeBleu_score": 9.639990484180395}, {"code": "local function moveCamera(dt)\n\t\tlocal camera = nil\n\tlocal cameraTarget = nil\n\tlocal cameraFocus = nil\n\tlocal cameraFocusPoint = nil\n\tlocal cameraFocusOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil\n\tlocal cameraFocusPointOffset = nil", "CodeBleu_score": 5.253093553199448}]}
{"instance_id": "f7f5e7fe1dc2", "generation_result": [{"code": "local function updateParticlePos()\n\t\tfor i, hero in pairs(HeroManager.GetHeroes()) do\n\t\tif hero:HasModifier(\"modifier_illusion_manager_illusion\") then\n\t\t\tlocal illusion = hero:FindModifierByName(\"modifier_illusion_manager_illusion\")\n\t\t\tif illusion:GetAbilityName() == \"special_bonus_unique_illusion_manager_1\" then\n\t\t\t\tillusion:SetStackCount(1)\n\t\t\tend\n\t\t\tif illusion:GetAbilityName() == \"special_bonus_unique_illusion_manager_2\" then\n\t\t\t\tillusion:SetStackCount(2)\n\t\t\tend\n\t\t\tif illusion:GetAbilityName() == \"special_bonus_unique_illusion_manager_3\" then\n\t\t\t\tillusion:SetStackCount(3)\n\t\t\tend\n\t\t\tif illusion:GetAbilityName() == \"special_bonus_unique_illusion_manager_4\" then\n\t\t\t\tillusion:SetStackCount(4)\n\t\t\tend\n\t\t\tif illusion:GetAbilityName() == \"special_bonus_unique_illusion_manager_5\" then\n\t\t\t\tillusion:SetStackCount(5)\n\t\t\tend\n\t\t\tif illusion:GetAbilityName() == \"special_bonus_unique_illusion_manager_6\" then\n\t\t\t\tillusion:SetStackCount(6)\n\t\t\tend\n\t\t\tif illusion:GetAbilityName() == \"special_bonus_unique_illusion_manager_7\" then\n\t\t\t\tillusion:SetStackCount(7)\n\t\t\tend\n\t\t\tif illusion:GetAbilityName() == \"special_bonus_unique_illusion_manager_8\" then\n\t\t\t\tillusion:SetStackCount(8)\n\t\t\tend\n\t\t\tif illusion:GetAbilityName() == \"special_bonus_unique_illusion_manager_9\" then\n\t\t\t\tillusion:SetStackCount(9)\n\t\t\tend\n\t\t\tif illusion:GetAbilityName() == \"special_bonus_unique_illusion_manager_10\" then\n\t\t\t\tillusion:SetStackCount(10)\n\t\t\tend\n\t\t\tif illusion:GetAbilityName() == \"special_bonus_unique_illusion_manager_11\" then\n\t\t\t\tillusion:SetStackCount(11)\n\t\t\tend\n\t\t\tif illusion:GetAbilityName() ==", "CodeBleu_score": 32.81724604744251}, {"code": "local function updateParticlePos()\n\t\tfor _, hero in pairs(HeroManager.getAliveHeroes()) do\n\t\tif hero.effectNode then\n\t\t\thero.effectNode.setPosition(hero.getPosition())\n\t\tend\n\tend", "CodeBleu_score": 21.764218548674723}, {"code": "local function updateParticlePos()\n\t\tfor i, hero in pairs(HeroManager.GetHeroes()) do\n\t\tlocal particle = hero:FindModifierByName(\"modifier_particle_dummy\")\n\t\tif particle then\n\t\t\tparticle:SetAbsOrigin(hero:GetAbsOrigin())\n\t\tend\n\tend", "CodeBleu_score": 23.814009519373254}]}
{"instance_id": "77829ef7341e", "generation_result": [{"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\tlocal hero = nil\n\tlocal race = nil\n\tlocal audio = nil\n\thero = self.sceneManager.game:getActorByTag(\"hero\")\n\trace = hero.race\n\tif race == \"Knight\" then\n\t\taudio = self.knightAudio\n\telseif race == \"Archer\" then\n\t\taudio = self.archerAudio\n\telseif race == \"Mage\" then\n\t\taudio = self.mageAudio\n\tend\n\taudio:play()", "CodeBleu_score": 40.067354324843144}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\tlocal hero = self.currentHero\n\tlocal race = hero:getRace()\n\tlocal audio = nil\n\tif race == \"Knight\" then\n\t\taudio = self.knightAudio\n\telseif race == \"Archer\" then\n\t\taudio = self.archerAudio\n\telseif race == \"Mage\" then\n\t\taudio = self.mageAudio\n\tend\n\taudio:play()", "CodeBleu_score": 37.4651383829468}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\tlocal hero = self.game.actors[self.game.currentHeroTag]\n\tlocal race = hero.race\n\tlocal audio = self.game.audio\n\tif race == \"knight\" then\n\t\taudio:playSFX(\"knight_rotate\")\n\telseif race == \"archer\" then\n\t\taudio:playSFX(\"archer_rotate\")\n\telseif race == \"mage\" then\n\t\taudio:playSFX(\"mage_rotate\")\n\tend", "CodeBleu_score": 38.23551152007716}]}
{"instance_id": "2b35fdb15a13", "generation_result": [{"code": "function GameMaster:AddHeros()\n\t\tlocal knight = Knight:new(100, 200)\n\tlocal mage = Mage:new(100, 200)\n\tlocal archer = Archer:new(100, 200)\n\tknight:SetPosition(Vector2D(100, 200))\n\tmage:SetPosition(Vector2D(200, 200))\n\tarcher:SetPosition(Vector2D(300, 200))\n\tknight:SetLayer(self.current_layer)\n\tmage:SetLayer(self.current_layer)\n\tarcher:SetLayer(self.current_layer)\n\tknight:SetMode(knight.IDLE)\n\tmage:SetMode(mage.IDLE)\n\tarcher:SetMode(archer.IDLE)\n\tself.hero_manager:Add(knight)\n\tself.hero_manager:Add(mage)\n\tself.hero_manager:Add(archer)", "CodeBleu_score": 44.854567736434205}, {"code": "function GameMaster:AddHeros()\n\t\tlocal hero1 = Knight:new(self.game, 1, 1, 1)\n\thero1.layer = self.game.map.layers[1]\n\thero1.x = 100\n\thero1.y = 100\n\thero1.state = \"idle\"\n\thero1.push(self.heroManager)\n\tself.game.map.layers[1].push(hero1)\n\t\n\tlocal hero2 = Mage:new(self.game, 1, 1, 1)\n\thero2.layer = self.game.map.layers[1]\n\thero2.x = 100\n\thero2.y = 200\n\thero2.state = \"idle\"\n\thero2.push(self.heroManager)\n\tself.game.map.layers[1].push(hero2)\n\t\n\tlocal hero3 = Archer:new(self.game, 1, 1, 1)\n\thero3.layer = self.game.map.layers[1]\n\thero3.x = 200\n\thero3.y = 100\n\thero3.state = \"idle\"\n\thero3.push(self.heroManager)\n\tself.game.map.layers[1].push(hero3)", "CodeBleu_score": 38.48189016390746}, {"code": "function GameMaster:AddHeros()\n\t\tself.knight = Knight(self.knight_image, 300, 300)\n\tself.mage = Mage(self.mage_image, 500, 300)\n\tself.archer = Archer(self.archer_image, 700, 300)\n\tself.knight.layer = self.layer\n\tself.mage.layer = self.layer\n\tself.archer.layer = self.layer\n\tself.knight.mode = \"Idle\"\n\tself.mage.mode = \"Idle\"\n\tself.archer.mode = \"Idle\"\n\tself.hero_manager:Add(self.knight)\n\tself.hero_manager:Add(self.mage)\n\tself.hero_manager:Add(self.archer)", "CodeBleu_score": 29.018763889195455}]}
{"instance_id": "cdfbc82ff3cd", "generation_result": [{"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat(self.gameWidth/2, self.gameHeight/2)\n\tboss.cameraMask = 1\n\tboss.layer = self.currentLayer\n\tboss.x = self.gameWidth/2\n\tboss.y = self.gameHeight/2\n\tboss.faceDirection = 1\n\tboss.AIEnabled = false\n\tboss:bounceOut()\n\tboss.AIEnabled = true\n\tself.monsterManager:add(boss)", "CodeBleu_score": 34.32863991629432}, {"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat(self.bossX, self.bossY, 1, 1, 1, 1)\n\tboss:setCameraMask(1)\n\tself.currentLayer:add(boss)\n\tboss.x = self.bossX\n\tboss.y = self.bossY\n\tboss.faceDirection = 1\n\tboss.AIEnabled = false\n\tboss:bounceOut()\n\tself.monsterManager:add(boss)", "CodeBleu_score": 33.530384992439096}, {"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat()\n\tboss:setCameraMask(1)\n\tboss:setPosition(CCPoint(400, 300))\n\tboss:setFacingDirection(1)\n\tboss:setAIEnabled(false)\n\tboss:doBounceOutMove(CCPoint(400, 400), 0.5)\n\tboss:setAIEnabled(true)\n\tself.monsterManager:addMonster(boss)", "CodeBleu_score": 26.676252474910093}]}
{"instance_id": "fa7b402853bb", "generation_result": [{"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation = Animation3D(file)\n\tlocal animate = Animate3D(animation, begin, finish)\n\tanimate.speed = speed\n\treturn animate", "CodeBleu_score": 33.17100108991521}, {"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation = Animation3D(file)\n\tanimation.setBegin(begin)\n\tanimation.setFinish(finish)\n\tanimation.setSpeed(speed)\n\treturn animation", "CodeBleu_score": 30.255015039617493}, {"code": "function createAnimation(file, begin, finish, speed)\n\t\tif not speed then speed = 1 end\n\tlocal animation = Animation3D(file, begin, finish)\n\tlocal animate = Animate3D(animation, speed)\n\treturn animate", "CodeBleu_score": 30.599911273866386}]}
{"instance_id": "0725f2413b6b", "generation_result": [{"code": "function removeAll(table)\n\t\tfor i,v in pairs(table) do \n\t\ttable[i] = nil \n\tend ", "CodeBleu_score": 34.82747867180886}, {"code": "function removeAll(table)\n\t\ttable.clear()", "CodeBleu_score": 9.666717314442764}, {"code": "function removeAll(table)\n\t\tfor i,v in ipairs(table) do \n\t\ttable.remove(table, i) \n\tend ", "CodeBleu_score": 27.83313332580517}]}
{"instance_id": "526d10bb37bb", "generation_result": [{"code": "function delayExecute(target, func, delay)\n\t\tlocal action = CCDelayTime:actionWithDuration(delay)\n\tlocal sequence = CCSequence:actions(action, func)\n\ttarget:runAction(sequence)", "CodeBleu_score": 34.819625313712734}, {"code": "function delayExecute(target, func, delay)\n\t\tlocal action = cc.DelayTime:create(delay)\n\tlocal callFunc = cc.CallFunc:create(func)\n\tlocal seq = cc.Sequence:create(action, callFunc, nil)\n\ttarget:runAction(seq)", "CodeBleu_score": 58.7978088488005}, {"code": "function delayExecute(target, func, delay)\n\t\tlocal delayAction = cc.DelayTime:create(delay)\n\tlocal callFunc = cc.CallFunc:create(func)\n\tlocal seq = cc.Sequence:create(delayAction, callFunc, nil)\n\ttarget:runAction(seq)", "CodeBleu_score": 57.994909540332884}]}
{"instance_id": "3b277bd3d0d0", "generation_result": [{"code": "function LoadingScene:addLoadingText(layer)\n\t\tself._loading = {}\n\tself._loading.font = love.graphics.newFont(\"fonts/Roboto-Black.ttf\", 32)\n\tself._loading.text = love.graphics.newText(self._loading.font)\n\tself._loading.text:add(\"Loading...\")\n\tself._loading.text:setPos(100, 100)\n\tself._loading.text:setColor(0, 0, 0)\n\tlayer:add(self._loading.text)", "CodeBleu_score": 31.863161151483986}, {"code": "function LoadingScene:addLoadingText(layer)\n\t\tlocal font = Font.new(\"resources/fonts/CaviarDreams.ttf\", 32)\n\tlocal loading = {\n\t\tlayer:newText(\"Loading...\", font, 20, 20, 255, 255, 255, 255),\n\t\tlayer:newText(\"Loading..\", font, 20, 20, 255, 255, 255, 255),\n\t\tlayer:newText(\"Loading...\", font, 20, 20, 255, 255, 255, 255),\n\t\tlayer:newText(\"Loading..\", font, 20, 20, 255, 255, 255, 255),\n\t\tlayer:newText(\"Loading...\", font, 20, 20, 255, 255, 255, 255),\n\t\tlayer:newText(\"Loading..\", font, 20, 20, 255, 255, 255, 255),\n\t\tlayer:newText(\"Loading...\", font, 20, 20, 255, 255, 255, 255),\n\t\tlayer:newText(\"Loading..\", font, 20, 20, 255, 255, 255, 255),\n\t\tlayer:newText(\"Loading...\", font, 20, 20, 255, 255, 255, 255),\n\t\tlayer:newText(\"Loading..\", font, 20, 20, 255, 255, 255, 255),\n\t\tlayer:newText(\"Loading...\", font, 20, 20, 255, 255, 255, 255),\n\t\tlayer:newText(\"Loading..\", font, 20, 20, 255, 255, 255, 255),\n\t\tlayer:newText(\"", "CodeBleu_score": 18.27519979089129}, {"code": "function LoadingScene:addLoadingText(layer)\n\t\tself._loading = {}\n\tself._loading.label = display.newText(\"Loading...\", 0, 0, native.systemFont, 24)\n\tself._loading.label.anchorX = 0\n\tself._loading.label.anchorY = 0\n\tself._loading.label.x = display.contentCenterX\n\tself._loading.label.y = display.contentCenterY\n\tself._loading.label.alpha = 0\n\tlayer:insert(self._loading.label)", "CodeBleu_score": 28.963099078078503}]}
{"instance_id": "68250ae97644", "generation_result": [{"code": "function MainMenuScene.create()\n\t\tlocal scene = display.newScene()\n\tlocal layer = display.newLayer()\n\tscene:addChild(layer)\n\tMainMenuScene.addBackground(layer)\n\tMainMenuScene.addTitle(layer)\n\tMainMenuScene.addOptions(layer)\n\tMainMenuScene.addCredits(layer)\n\treturn scene", "CodeBleu_score": 52.5557344108007}, {"code": "function MainMenuScene.create()\n\t\tlocal scene = cc.Scene:create()\n\tlocal layer = MainMenuScene.createLayer()\n\tscene:addChild(layer)\n\treturn scene", "CodeBleu_score": 58.83760795393551}, {"code": "function MainMenuScene.create()\n\t\tlocal scene = cc.Scene:create()\n\tlocal layer = MainMenuScene.createLayer()\n\tscene:addChild(layer)\n\treturn scene", "CodeBleu_score": 58.83760795393551}]}
{"instance_id": "81470efbb6ff", "generation_result": [{"code": "local function collision(object)\n\n\t\t--If the object is a hero\n\tif object.type == \"hero\" then\n\t\n\t\t--For each hero\n\t\tfor i, hero in pairs(HeroManager.alive) do\n\t\t\n\t\t\t--If the hero is not the object\n\t\t\tif hero.id ~= object.id then\n\t\t\t\n\t\t\t\t--If there is a collision\n\t\t\t\tif Helper.collision(object, hero) then\n\t\t\t\t\n\t\t\t\t\t--Solve the collision\n\t\t\t\t\tsolveCollision(object, hero)\n\t\t\t\t\n\t\t\t\tend\n\t\t\t\n\t\t\tend\n\t\t\n\t\tend\n\t\n\t--If the object is a monster\n\telseif object.type == \"monster\" then\n\t\n\t\t--For each monster\n\t\tfor i, monster in pairs(MonsterManager.alive) do\n\t\t\n\t\t\t--If the monster is not the object\n\t\t\tif monster.id ~= object.id then\n\t\t\t\n\t\t\t\t--If there is a collision\n\t\t\t\tif Helper.collision(object, monster) then\n\t\t\t\t\n\t\t\t\t\t--Solve the collision\n\t\t\t\t\tsolveCollision(object, monster)\n\t\t\t\t\n\t\t\t\tend\n\t\t\t\n\t\t\tend\n\t\t\n\t\tend\n\t\n\tend\n", "CodeBleu_score": 34.88140001092184}, {"code": "local function collision(object)\n\n\t\tfor i, hero in HeroManager.heroes:ipairs() do\n\t\tif hero.alive then\n\t\t\tif Helper.checkCollision(object, hero) then\n\t\t\t\tsolveCollision(object, hero)\n\t\t\tend\n\t\tend\n\tend\n\n\tfor i, monster in MonsterManager.monsters:ipairs() do\n\t\tif monster.alive then\n\t\t\tif Helper.checkCollision(object, monster) then\n\t\t\t\tsolveCollision(object, monster)\n\t\t\tend\n\t\tend\n\tend", "CodeBleu_score": 35.63687212872867}, {"code": "local function collision(object)\n\n\t\t-- If the object is a hero, check for collisions with monsters.\n\tif object.type == \"hero\" then\n\t\tfor _, monster in pairs(monsterManager.monsters) do\n\t\t\tif Helper.distance(object.x, object.y, monster.x, monster.y) < 16 then\n\t\t\t\tsolveCollision(object, monster)\n\t\t\tend\n\t\tend\n \n\t-- If the object is a monster, check for collisions with heroes.\n\telseif object.type == \"monster\" then\n\t\tfor _, hero in pairs(heroManager.heroes) do\n\t\t\tif Helper.distance(object.x, object.y, hero.x, hero.y) < 16 then\n\t\t\t\tsolveCollision(object, hero)\n\t\t\tend\n\t\tend\n\tend", "CodeBleu_score": 34.89031535312199}]}
{"instance_id": "f8915bebdc0e", "generation_result": [{"code": "function collisionDetect(dt)\n\t\tfor i=#HeroManager,1,-1 do\n\t\tif HeroManager[i].alive == true then\n\t\t\tif HeroManager[i].x < 0 then\n\t\t\t\tHeroManager[i].x = 0\n\t\t\telseif HeroManager[i].x > display.contentWidth - 100 then\n\t\t\t\tHeroManager[i].x = display.contentWidth - 100\n\t\t\tend\n\t\t\tif HeroManager[i].y < 0 then\n\t\t\t\tHeroManager[i].y = 0\n\t\t\telseif HeroManager[i].y > display.contentHeight - 100 then\n\t\t\t\tHeroManager[i].y = display.contentHeight - 100\n\t\t\tend\n\t\t\tfor j=#MonsterManager,1,-1 do\n\t\t\t\tif HeroManager[i].collidesWith(MonsterManager[j]) == true then\n\t\t\t\t\tHeroManager[i].alive = false\n\t\t\t\t\tHeroManager[i].x = display.contentWidth / 2\n\t\t\t\t\tHeroManager[i].y = display.contentHeight / 2\n\t\t\t\t\tHeroManager[i].currentAnimation = \"dead\"\n\t\t\t\t\tHeroManager[i].currentFrame = 1\n\t\t\t\t\tHeroManager[i].totalFrames = 4\n\t\t\t\t\tHeroManager[i].width = 100\n\t\t\t\t\tHeroManager[i].height = 100\n\t\t\t\t\tHeroManager[i].speed = 0\n\t\t\t\t\tHeroManager[i].isMoving = false\n\t\t\t\t\tHeroManager[i].direction = \"stop\"\n\t\t\t\t\tHeroManager[i].isAttacking = false\n\t\t\t\t\tHeroManager[i].attackTimer = 0\n\t\t\t\t\tHeroManager[i].attackTimerMax = 2\n\t\t\t\t\tHeroManager[i].attackDamage = 10\n\t\t\t\t\tHeroManager[i].attackRadius = 100\n\t\t\t\t\tHeroManager[i].attackAnimation = \"attack\"\n\t\t\t\t\tHeroManager[i].attackFrame = 1\n\t\t\t\t\tHeroManager[i].attackTotalFrames = 4\n\t\t\t\t\tHeroManager[i].attackSpeed = 100\n\t\t\t\t\tHeroManager[i].attackIsCasting = false\n\t\t\t\t\tHeroManager[i].attackIsReady = false\n\t\t\t\t\tHeroManager[i].attackDirection = \"stop\"\n\t\t\t\t\tHeroManager[i].attackIsHit = false\n\t\t\t\t\tHeroManager[i].attackHitTimer = 0\n\t\t\t\t\tHeroManager[i].attackHit", "CodeBleu_score": 31.046786337590216}, {"code": "function collisionDetect(dt)\n\t\tfor i=#HeroManager,1,-1 do\n\t\tif HeroManager[i].alive then\n\t\t\tfor j=#MonsterManager,1,-1 do\n\t\t\t\tif MonsterManager[j].alive then\n\t\t\t\t\tif HeroManager[i].collidesWith(MonsterManager[j]) then\n\t\t\t\t\t\tHeroManager[i]:collide(MonsterManager[j])\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\tMonsterManager[j]:remove()\n\t\t\t\tend\n\t\t\tend\n\t\t\tHeroManager[i]:boundaryCheck(dt)\n\t\t\tHeroManager[i]:update(dt)\n\t\telse\n\t\t\tHeroManager[i]:remove()\n\t\tend\n\tend", "CodeBleu_score": 23.995776881898145}, {"code": "function collisionDetect(dt)\n\t\tfor i=#HeroManager, 1, -1 do\n\t\tif HeroManager[i].alive then\n\t\t\tfor j=#MonsterManager, 1, -1 do\n\t\t\t\tif MonsterManager[j].alive then\n\t\t\t\t\tif HeroManager[i].collidesWith(MonsterManager[j]) then\n\t\t\t\t\t\tHeroManager[i].collide(MonsterManager[j])\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\ttable.remove(MonsterManager, j)\n\t\t\t\tend\n\t\t\tend\n\t\t\tif HeroManager[i].x < 0 then\n\t\t\t\tHeroManager[i].x = 0\n\t\t\telseif HeroManager[i].x > display.contentWidth - 100 then\n\t\t\t\tHeroManager[i].x = display.contentWidth - 100\n\t\t\tend\n\t\t\tif HeroManager[i].y < 0 then\n\t\t\t\tHeroManager[i].y = 0\n\t\t\telseif HeroManager[i].y > display.contentHeight - 100 then\n\t\t\t\tHeroManager[i].y = display.contentHeight - 100\n\t\t\tend\n\t\telse\n\t\t\ttable.remove(HeroManager, i)\n\t\tend\n\tend", "CodeBleu_score": 40.05665215157258}]}
{"instance_id": "fc081bb122f5", "generation_result": [{"code": "function Actor:specialAttack()\n\t\t-- create a collider at the actor's current position and facing direction\n\tself.collider = self.world:newCollider(self.x, self.y, self.width, self.height, self.facing)\n\tself.collider.collisionClass = \"special\"\n\tself.collider.collisionData = {type = self.type, hp = self.hp}\n\t\n\t-- play the associated sound effects for the special attack\n\tif self.type == \"slime\" then\n\t\tself.world.audio:playSFX(\"slime_attack\")\n\telseif self.type == \"bat\" then\n\t\tself.world.audio:playSFX(\"bat_attack\")\n\tend", "CodeBleu_score": 42.972327805982744}, {"code": "function Actor:specialAttack()\n\t\tlocal attackCollider = nil\n\tlocal attackSound = nil\n\t\n\tif self.specialAttackType == SpecialAttackType.Fireball then\n\t\tattackCollider = self.game.physicsWorld:createCircleCollider(self.x, self.y, 10, {collision_type = \"Attack\", actor = self, attackType = self.specialAttackType})\n\t\tattackSound = self.game.audio:loadSFX(\"Fireball.wav\")\n\tend\n\t\n\tif self.specialAttackType == SpecialAttackType.IceBolt then\n\t\tattackCollider = self.game.physicsWorld:createCircleCollider(self.x, self.y, 10, {collision_type = \"Attack\", actor = self, attackType = self.specialAttackType})\n\t\tattackSound = self.game.audio:loadSFX(\"IceBolt.wav\")\n\tend\n\t\n\tif self.specialAttackType == SpecialAttackType.Fireball then\n\t\tattackCollider = self.game.physicsWorld:createCircleCollider(self.x, self.y, 10, {collision_type = \"Attack\", actor = self, attackType = self.specialAttackType})\n\t\tattackSound = self.game.audio:loadSFX(\"Fireball.wav\")\n\tend\n\t\n\tif self.specialAttackType == SpecialAttackType.Blizzard then\n\t\tattackCollider = self.game.physicsWorld:createCircleCollider(self.x, self.y, 10, {collision_type = \"Attack\", actor = self, attackType = self.specialAttackType})\n\t\tattackSound = self.game.audio:loadSFX(\"Blizzard.wav\")\n\tend\n\t\n\tif self.specialAttackType == SpecialAttackType.Thunderbolt then\n\t\tattackCollider = self.game.physicsWorld:createCircleCollider(self.x, self.y, 10, {collision_type = \"Attack\", actor = self, attackType = self.specialAttackType})\n\t\tattackSound = self.game.audio:loadSFX(\"Thunderbolt.wav\")\n\tend\n\t\n\tif self.specialAttackType == SpecialAttackType.Hail then\n\t\tattackCollider = self.game.physicsWorld:createCircleCollider(self.x, self.y, 10, {collision_type = \"Attack", "CodeBleu_score": 40.261575339670394}, {"code": "function Actor:specialAttack()\n\t\t-- Play special attack sound\n\taudio.play(self.specialAttackSound, {channel = 1, loops = 0, fadein = 250, fadeout = 250})\n\t\n\t-- Create a collider at the actor's current position and facing direction with specified attack properties\n\tlocal attackCollider = display.newRect(self.x, self.y, self.width, self.height)\n\tattackCollider.anchorX = 0.5\n\tattackCollider.anchorY = 0.5\n\tattackCollider.alpha = 0\n\tattackCollider.isHittable = true\n\tattackCollider.type = \"attack\"\n\tattackCollider.attackDamage = self.specialAttackDamage\n\tattackCollider.attackSpeed = self.specialAttackSpeed\n\tattackCollider.attackRadius = self.specialAttackRadius\n\tattackCollider.attackKnockback = self.specialAttackKnockback\n\tattackCollider.attackCooldown = self.specialAttackCooldown\n\tattackCollider.attackSound = self.specialAttackSound\n\tattackCollider.attackAnimation = self.specialAttackAnimation\n\tattackCollider.attackAnimationSpeed = self.specialAttackAnimationSpeed\n\tattackCollider.attackAnimationLoopCount = self.specialAttackAnimationLoopCount\n\tattackCollider.attackAnimationLoopDelay = self.specialAttackAnimationLoopDelay\n\tattackCollider.attackAnimationLoopMode = self.specialAttackAnimationLoopMode\n\tattackCollider.attackAnimationLoopMode = self.specialAttackAnimationLoopMode\n\tattackCollider.attackAnimationLoopMode = self.specialAttackAnimationLoopMode\n\tattackCollider.attackAnimationLoopMode = self.specialAttackAnimationLoopMode\n\tattackCollider.attackAnimationLoopMode = self.specialAttackAnimationLoopMode\n\tattackCollider.attackAnimationLoopMode = self.specialAttackAnimationLoopMode\n\tattackCollider.attackAnimationLoopMode = self.specialAttackAnimationLoopMode\n\tattackCollider.attackAnimationLoopMode = self.specialAttackAnimationLoopMode\n\tattackCollider.attackAnimationLoopMode = self.specialAttackAnimationLoopMode\n\tattackCollider.attackAnimationLoopMode = self.specialAttackAnimationLoopMode\n\tattackCollider.attackAnimationLoopMode = self.specialAttackAnimationLoopMode\n\tattackCollider.attackAnimationLoopMode = self.specialAttackAnimationLoopMode\n\tattackCollider.attackAnimationLoopMode = self.specialAttackAnimationLoopMode\n\t", "CodeBleu_score": 38.30992028784163}]}
{"instance_id": "bfc98809aacb", "generation_result": [{"code": "function Slime:angryFace(trueFalse)\n\t\tif trueFalse == true then\n\t\tif self.angry == false then\n\t\t\tself.angry = true\n\t\t\tself.sprite.texture = self.angryTexture\n\t\tend\n\telseif trueFalse == false then\n\t\tif self.angry == true then\n\t\t\tself.angry = false\n\t\t\tself.sprite.texture = self.normalTexture\n\t\tend\n\tend", "CodeBleu_score": 40.57239932175779}, {"code": "function Slime:angryFace(trueFalse)\n\t\tif trueFalse ~= self.angry then\n\t\tself.angry = trueFalse\n\t\tif self.angry then\n\t\t\tself.sprite:setTexture(\"res/graphics/slime_angry.png\")\n\t\telse\n\t\t\tself.sprite:setTexture(\"res/graphics/slime_normal.png\")\n\t\tend\n\tend", "CodeBleu_score": 54.81252843251332}, {"code": "function Slime:angryFace(trueFalse)\n\t\tif trueFalse == true then\n\t\tif self.angry == false then\n\t\t\tself.angry = true\n\t\t\tself.sprite:setTexture(self.angryTexture)\n\t\tend\n\telse\n\t\tif self.angry == true then\n\t\t\tself.angry = false\n\t\t\tself.sprite:setTexture(self.normalTexture)\n\t\tend\n\tend", "CodeBleu_score": 40.95850102072725}]}
{"instance_id": "546a0b8fb77b", "generation_result": [{"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t\tval fontMetrics = getFontMetrics(char)\n\tval bitmap = Bitmap.createBitmap(fontMetrics.width, fontMetrics.height, Bitmap.Config.ARGB_8888)\n\tval canvas = Canvas(bitmap)\n\tval paint = Paint()\n\tpaint.typeface = fontMetrics.typeface\n\tpaint.textSize = fontMetrics.size\n\tpaint.color = -0x1\n\tcanvas.drawText(char.toString(), 0.0f, fontMetrics.ascent, paint)\n\tval pixmap = Pixmap(bitmap.width, bitmap.height, Pixmap.Format.RGBA8888)\n\tpixmap.setBlending(Pixmap.Blending.None)\n\tpixmap.drawPixmap(bitmap, 0, 0)\n\tbitmap.recycle()\n\treturn pixmap\n}", "CodeBleu_score": 35.29291652488791}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t\n}", "CodeBleu_score": 0.9724385895435943}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t\tval fontMetrics = FontMetricsCommon()\n\tval font = fontData.font\n\tval paint = Paint()\n\tpaint.typeface = font\n\tpaint.textSize = fontSize.toFloat()\n\tpaint.getTextBounds(char.toString(), 0, 1, fontMetrics)\n\tval bitmap = Bitmap.createBitmap(fontMetrics.width, fontMetrics.height, Bitmap.Config.ARGB_8888)\n\tval canvas = Canvas(bitmap)\n\tcanvas.drawText(char.toString(), 0.0f, fontMetrics.ascent.toFloat(), paint)\n\tval pixmap = Pixmap(fontMetrics.width, fontMetrics.height, Pixmap.Format.RGBA8888)\n\tpixmap.setBlending(Pixmap.Blending.None)\n\tpixmap.drawPixmap(bitmap, 0, 0)\n\tbitmap.recycle()\n\treturn pixmap\n}", "CodeBleu_score": 40.98181961128441}]}
{"instance_id": "9c1ce2567ce1", "generation_result": [{"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t//        val uri = Uri.parse(suggestedLocation)\n//        Log.i(TAG, \"uri: \" + uri.toString())\n//        if (uri.scheme == \"content\") {\n//            val contentResolver = activity.contentResolver\n//            val cursor = contentResolver.query(uri, null, null, null, null)\n//            cursor?.moveToFirst()\n//            val displayName = cursor?.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME))\n//            val size = cursor?.getString(cursor.getColumnIndex(OpenableColumns.SIZE))\n//            Log.i(TAG, \"displayName: \" + displayName)\n//            Log.i(TAG, \"size: \" + size)\n//            cursor?.close()\n//            val fileName = displayName\n//            val outputStream: OutputStream?\n//            try {\n//                outputStream = contentResolver.openOutputStream(uri)\n//                outputStream?.write(data.encodeToByteArray())\n//                outputStream?.close()\n//                onSaved(uri.toString())\n//            } catch (e: Exception) {\n//                onError(e)\n//            }\n//        } else {\n//            val intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\n//            intent.addCategory(Intent.CATEGORY_OPENABLE)\n//            intent.type = \"text/plain\"\n//            intent.putExtra(Intent.EXTRA_TITLE, \"game.json\")\n//            activity.startActivityForResult(intent, REQUEST_CODE_SAVE_FILE)\n//        }\n    }", "CodeBleu_score": 13.991633962012584}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n//        Log.d(\"saveGame\", \"saveGame\")\n\n        val uri = Uri.parse(suggestedLocation)\n        val fileName = getFileName(uri)\n\n        val file = File(fileName)\n        val outputStream: OutputStream? = try {\n            file.outputStream()\n        } catch (ex: Exception) {\n            onError(ex)\n            return\n        }\n\n        outputStream?.use {\n            outputStream.write(data.encodeToByteArray())\n        }\n\n        onSaved(fileName)\n    }", "CodeBleu_score": 48.88390570275733}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t//        Log.d(\"saveGame\")\n        val uri = Uri.parse(suggestedLocation)\n        val resolver = activity.contentResolver\n        var stream: OutputStream? = null\n        try {\n            val filename = getFilename(uri, resolver)\n            val location = PlatformSaverLoader.saveGame(filename, data)\n            onSaved(location)\n        } catch (ex: Exception) {\n            onError(ex)\n        } finally {\n            stream?.close()\n        }\n    }", "CodeBleu_score": 55.38663709202842}]}
{"instance_id": "ea556fe12030", "generation_result": [{"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t//    val intent = Intent(Intent.ACTION_OPEN_DOCUMENT)\n//    intent.addCategory(Intent.CATEGORY_OPENABLE)\n//    intent.type = \"text/plain\"\n//    intent.flags = Intent.FLAG_GRANT_READ_URI_PERMISSION\n//    val activity = activity as Activity\n//    activity.startActivityForResult(intent, READ_REQUEST_CODE)\n//    activity.registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->\n//        if (result.resultCode == Activity.RESULT_OK) {\n//            val uri = result.data?.data\n//            if (uri != null) {\n//                val contentResolver = activity.contentResolver\n//                val inputStream = contentResolver.openInputStream(uri)\n//                val file = inputStream?.bufferedReader().use { it?.readText() }\n//                inputStream?.close()\n//                onLoaded(file!!, uri.toString())\n//            }\n//        }\n//    }\n}", "CodeBleu_score": 19.45536830701614}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n//    val intent = Intent(Intent.ACTION_GET_CONTENT)", "CodeBleu_score": 19.371400902165885}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n//    val intent = Intent(Intent.ACTION_OPEN_DOCUMENT)\n//    intent.addCategory(Intent.CATEGORY_OPENABLE)\n//    intent.type = \"*/*\"\n//    intent.flags = Intent.FLAG_GRANT_READ_URI_PERMISSION\n//    val activity = activity as Activity\n//    activity.startActivityForResult(intent, READ_REQUEST_CODE)\n//    activity.registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->\n//        if (result.resultCode == Activity.RESULT_OK) {\n//            val uri = result.data?.data\n//            if (uri != null) {\n//                try {\n//                    val contentResolver = activity.contentResolver\n//                    val cursor = contentResolver.query(uri, null, null, null, null)\n//                    cursor?.moveToFirst()\n//                    val fileName = cursor?.getString(\n//                        cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)\n//                    )\n//                    cursor?.close()\n//                    val inputStream: InputStream? = contentResolver.openInputStream(uri)\n//                    val outputStream: OutputStream? = PlatformSaverLoader.getOutputStream(fileName)\n//                    val buffer = ByteArray(1024)\n//                    var read: Int\n//                    while (inputStream?.read(buffer).also { read = it } != -1) {\n//                        outputStream?.write(buffer, 0, read)\n//                    }\n//                    inputStream?.close()\n//                    outputStream?.flush()\n//                    outputStream?.close()\n//                    onLoaded(PlatformSaverLoader.load(), fileName)\n//                } catch (ex: Exception) {\n//                    Log.e(ex)\n//                    onError(ex)\n//                }\n//            }\n//        }\n//    }\n}", "CodeBleu_score": 19.45536830701614}]}
{"instance_id": "813990d9bb4d", "generation_result": [{"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n\t\taddCategory(Intent.CATEGORY_OPENABLE)\n\t\ttype = \"application/json\"\n\t\tputExtra(Intent.EXTRA_TITLE, fileName)\n\t\tif (uri.scheme == \"content\") {\n\t\t\tputExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n\t\t}\n\t}\n\tactivity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 70.3898838488957}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\n\tintent.addCategory(Intent.CATEGORY_OPENABLE)\n\tintent.type = \"application/json\"\n\tintent.putExtra(Intent.EXTRA_TITLE, fileName)\n\tif (uri.scheme == \"content\") {\n\t\tintent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n\t}\n\tactivity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 85.26731696040432}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n\t\taddCategory(Intent.CATEGORY_OPENABLE)\n\t\ttype = \"application/json\"\n\t\tputExtra(Intent.EXTRA_TITLE, fileName)\n\t\tif (uri.scheme == \"content\") {\n\t\t\tputExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n\t\t}\n\t}\n\tactivity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 70.3898838488957}]}
{"instance_id": "a423b39ba6fe", "generation_result": [{"code": "fun createNotificationChannelInfo(appContext: Context){\n\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n\t\tval name = appContext.getString(R.string.app_name)\n\t\tval description = appContext.getString(R.string.app_name)\n\t\tval importance = NotificationManager.IMPORTANCE_DEFAULT\n\t\tval channel = NotificationChannel(CHANNEL_ID, name, importance)\n\t\tchannel.description = description\n\t\tchannel.enableLights(true)\n\t\tchannel.lightColor = Color.BLUE\n\t\tchannel.enableVibration(true)\n\t\tchannel.vibrationPattern = longArrayOf(100, 200, 300, 400, 500, 400, 300, 200, 400)\n\t\tval notificationManager = appContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n\t\tnotificationManager.createNotificationChannel(channel)\n\t}\n}", "CodeBleu_score": 65.95831774508876}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n\t\tval name = \"Unciv\"\n\t\tval descriptionText = \"Unciv\"\n\t\tval importance = NotificationManager.IMPORTANCE_DEFAULT\n\t\tval channel = NotificationChannel(CHANNEL_ID, name, importance).apply {\n\t\t\tdescription = descriptionText\n\t\t}\n\t\tval notificationManager: NotificationManager = appContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n\t\tnotificationManager.createNotificationChannel(channel)\n\t}\n}", "CodeBleu_score": 38.38919386283487}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n\t\tval channel = NotificationChannel(\n\t\t\tNOTIFICATION_CHANNEL_ID,\n\t\t\tNOTIFICATION_CHANNEL_NAME,\n\t\t\tNotificationManager.IMPORTANCE_DEFAULT\n\t\t)\n\t\tchannel.description = NOTIFICATION_CHANNEL_DESCRIPTION\n\t\tchannel.enableLights(true)\n\t\tchannel.lightColor = Color.BLUE\n\t\tchannel.enableVibration(true)\n\t\tchannel.vibrationPattern = longArrayOf(100, 200, 300, 400, 500, 400, 300, 200, 400)\n\t\tval notificationManager = appContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n\t\tnotificationManager.createNotificationChannel(channel)\n\t}\n}", "CodeBleu_score": 43.60418385127702}]}
{"instance_id": "4f3e7f77a567", "generation_result": [{"code": "fun packImages(workingPath: String){\n\t\tval workingPath = File(workingPath)\n\tval mainAssetsPath = File(workingPath, \"assets\")\n\tval modsPath = File(workingPath, \"mods\")\n\tval imagePacker = AndroidImagePacker(workingPath)\n\n\tif (mainAssetsPath.exists()) {\n\t\tval mainAssetsImagesPath = File(mainAssetsPath, \"images\")\n\t\tif (mainAssetsImagesPath.exists()) {\n\t\t\tval mainAssetsImagesAtlasesPath = File(mainAssetsImagesPath, \"atlases\")\n\t\t\tif (!mainAssetsImagesAtlasesPath.exists()) {\n\t\t\t\tmainAssetsImagesAtlasesPath.mkdirs()\n\t\t\t}\n\t\t\timagePacker.packImages(mainAssetsImagesPath, mainAssetsImagesAtlasesPath)\n\t\t}\n\t}\n\n\tif (modsPath.exists()) {\n\t\tfor (modFile in modsPath.listFiles()) {\n\t\t\tif (modFile.isDirectory) {\n\t\t\t\tval modImagesPath = File(modFile, \"images\")\n\t\t\t\tif (modImagesPath.exists()) {\n\t\t\t\t\tval modImagesAtlasesPath = File(modImagesPath, \"atlases\")\n\t\t\t\t\tif (!modImagesAtlasesPath.exists()) {\n\t\t\t\t\t\tmodImagesAtlasesPath.mkdirs()\n\t\t\t\t\t}\n\t\t\t\t\timagePacker.packImages(modImagesPath, modImagesAtlasesPath)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 40.120151042731436}, {"code": "fun packImages(workingPath: String){\n\t\tval packer = TexturePacker(workingPath, File(workingPath, \"pack.atlas\"), File(workingPath, \"pack.png\"), \"atlas\")\n\tpacker.maxHeight = 1024\n\tpacker.maxWidth = 1024\n\tpacker.paddingX = 2\n\tpacker.paddingY = 2\n\tpacker.duplicatePadding = true\n\tpacker.debug = false\n\tpacker.pack()\n\tval json = Json()\n\tval modsDir = File(workingPath, \"mods\")\n\tif (modsDir.exists() && modsDir.isDirectory) {\n\t\tfor (modDir in modsDir.listFiles()) {\n\t\t\tif (modDir.isDirectory && !modDir.name.startsWith(\".\")) {\n\t\t\t\tval modAssetsDir = File(modDir, \"assets\")\n\t\t\t\tif (modAssetsDir.exists() && modAssetsDir.isDirectory) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpacker.pack(modAssetsDir, File(workingPath, \"pack.atlas\"), File(workingPath, \"pack.png\"), \"atlas\")\n\t\t\t\t\t} catch (e: Exception) {\n\t\t\t\t\t\tprintln(\"Error packing images for mod ${modDir.name}: ${e.message}\")\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 46.86097302284317}, {"code": "fun packImages(workingPath: String){\n\t\tval workingPath = File(workingPath)\n\tval outputPath = File(workingPath, \"android/assets\")\n\tval outputPath = outputPath.absolutePath\n\n\tval packer = TexturePacker(workingPath.absolutePath, outputPath, \"atlas\", 1024, 1024, 1024, 1024, 1024, 1024, 1024)\n\n\tval json = Json()\n\tval jsonFile = File(workingPath, \"android/assets/pack.atlas\")\n\tval pack = json.fromJson(Pack::class.java, jsonFile)\n\n\tif (pack != null) {\n\t\tpack.workingPath = workingPath.absolutePath\n\t\tpack.outputPath = outputPath\n\t\tpack.packer = packer\n\t}\n\n\tval mainAssetsPath = File(workingPath, \"android/assets/main\")\n\tif (mainAssetsPath.exists()) {\n\t\tpackImages(workingPath, mainAssetsPath, pack)\n\t}\n\n\tval modsPath = File(workingPath, \"android/assets/mods\")\n\tif (modsPath.exists()) {\n\t\tfor (modFile in modsPath.listFiles()) {\n\t\t\tif (modFile.name.startsWith(\".\")) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tpackImages(workingPath, modFile, pack)\n\t\t}\n\t}\n}", "CodeBleu_score": 44.82623842985861}]}
{"instance_id": "206dbb3c21eb", "generation_result": [{"code": "suspend fun reloadWorldscreen(){\n\t\n}", "CodeBleu_score": 3.54716950179408}, {"code": "suspend fun reloadWorldscreen(){\n\t//    Log.debug(\"reloadWorldscreen\")\n    withThreadPoolContext {\n        withGLContext {\n            with(Gdx.app) {\n                val game = Gdx.app.applicationListener as Game\n                val gameInfo = game.gameInfo\n                val worldScreen = game.worldScreen\n                val gameSettings = gameInfo.gameSettings\n                val playerType = gameInfo.playerType\n                val onlineMultiplayer = gameInfo.onlineMultiplayer\n                val rulesetCache = gameInfo.rulesetCache\n                val tileSetCache = gameInfo.tileSetCache\n                val skinCache = gameInfo.skinCache\n                val translations = gameInfo.translations\n                val gameInfoSerialization = gameInfo.gameInfoSerialization\n                val isDebug = gameSettings.isDebug\n                val isDebugMode = gameSettings.isDebugMode\n                val isDebugModeEnabled = gameSettings.isDebugModeEnabled\n                val isDebugModeEnabledBySettings = gameSettings.isDebugModeEnabledBySettings\n                val isDebugModeEnabledBySettingsAndDebug = gameSettings.isDebugModeEnabledBySettingsAndDebug\n                val isDebugModeEnabledBySettingsAndDebugAndPlayerType = gameSettings.isDebugModeEnabledBySettingsAndDebugAndPlayerType\n                val isDebugModeEnabledBySettingsAndDebugAndPlayerTypeAndOnlineMultiplayer = gameSettings.isDebugModeEnabledBySettingsAndDebugAndPlayerTypeAndOnlineMultiplayer\n                val isDebugModeEnabledBySettingsAndDebugAndPlayerTypeAndOnlineMultiplayerAndGameInfoSerialization = gameSettings.isDebugModeEnabledBySettingsAndDebugAndPlayerTypeAndOnlineMultiplayerAndGameInfoSerialization\n                val isDebugModeEnabledBySettingsAndDebugAndPlayerTypeAndOnlineMultiplayerAndGameInfoSerializationAndGameInfo = gameSettings.isDebugModeEnabledBySettingsAndDebugAndPlayerTypeAndOnlineMultiplayerAndGameInfoSerializationAndGameInfo\n                val isDebugModeEnabledBySettingsAndDebugAndPlayerTypeAndOnlineMultiplayerAndGameInfoSerializationAndGameInfoAndGameInfoSerialization = gameSettings.isDebugModeEnabledBySettingsAndDebugAndPlayerTypeAndOnlineMultiplayerAndGameInfoSerializationAndGameInfoAndGameInfoSerialization\n                val isDebugModeEnabledBySettingsAndDebugAndPlayerTypeAndOnlineMultiplayerAndGameInfoSerializationAndGameInfoAndGameInfoSerializationAndGameInfoSerialization = gameSettings.isDebugModeEnabledBySettingsAndDebugAndPlayerTypeAndOnlineMultiplayerAndGameInfoSerializationAndGameInfoAndGameInfoSerializationAndGameInfoSerialization\n                val isDebugModeEnabledBySettingsAndDebugAndPlayerTypeAndOnlineMultiplayerAndGame", "CodeBleu_score": 21.758717067417138}, {"code": "suspend fun reloadWorldscreen(){\n\t\n}", "CodeBleu_score": 3.54716950179408}]}
{"instance_id": "2d8fdcb5ad6f", "generation_result": [{"code": "fun goToMainMenu(): MainMenuScreen{\n\t//    val game = Unciv()\n//    game.setScreen(MainMenuScreen(game))\n    return MainMenuScreen(Unciv())\n}", "CodeBleu_score": 4.235825605313674}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\t//    packImages(PlatformSpecific.workingPath)\n    return MainMenuScreen()\n}", "CodeBleu_score": 4.249070420822478}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\t\tval mainMenuScreen = MainMenuScreen()\n\tmainMenuScreen.setMainMenu()\n\treturn mainMenuScreen\n}", "CodeBleu_score": 42.60481105104409}]}
{"instance_id": "df60142d384c", "generation_result": [{"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t//     val screenSize = Toolkit.getDefaultToolkit().screenSize", "CodeBleu_score": 2.090363635329149}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t val displayMode = Lwjgl3ApplicationConfiguration()\n displayMode.useGL30 = true\n displayMode.vSyncEnabled = true\n displayMode.foregroundFPS = 0\n displayMode.backgroundFPS = 0\n displayMode.width = settings.width\n displayMode.height = settings.height\n displayMode.title = tr.get(\"gameTitle\")\n val graphicsEnvironment = GraphicsEnvironment.getLocalGraphicsEnvironment()\n val graphicsDevice = graphicsEnvironment.defaultScreenDevice\n val graphicsConfiguration = graphicsDevice.bestConfiguration\n val bounds = graphicsDevice.displayMode\n val maxBounds = graphicsConfiguration.displayMode\n val adjustedWidth = min(maxBounds.width, max(bounds.width, settings.width))\n val adjustedHeight = min(maxBounds.height, max(bounds.height, settings.height))\n displayMode.width = adjustedWidth\n displayMode.height = adjustedHeight\n if (displayMode.width == maxBounds.width && displayMode.height == maxBounds.height) {\n return true\n }\n val monitors = graphicsDevice.displayModes\n val monitor = getMonitor(monitors, displayMode.width, displayMode.height)\n if (monitor != null) {\n displayMode.fullscreenWindow = false\n displayMode.fullscreen = false\n displayMode.width = monitor.width\n displayMode.height = monitor.height\n }\n val application = Lwjgl3Application(Gdx.app, displayMode)\n val graphics = application.context.graphics\n graphics.window.setLocationRelativeTo(null)\n return displayMode.width == maxBounds.width && displayMode.height == maxBounds.height\n }", "CodeBleu_score": 38.47403747215945}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t//    val monitor: Monitor = Lwjgl3Graphics.getMonitor()", "CodeBleu_score": 2.090363635329149}]}
{"instance_id": "a8b17234c4e5", "generation_result": [{"code": "private fun getLinuxDistro(): String{\n\t\tval distroMap = HashMap<String, String>()\n\tval osReleaseFile = FileHandle(\"/etc/os-release\")\n\tif (osReleaseFile.exists()) {\n\t\tval lines = osReleaseFile.readString(Charset.forName(\"UTF-8\")).split(\"\n\")\n\t\tfor (line in lines) {\n\t\t\tval keyValue = line.split(\"=\")\n\t\t\tif (keyValue.size == 2) {\n\t\t\t\tdistroMap[keyValue[0].trim()] = keyValue[1].trim()\n\t\t\t}\n\t\t}\n\t}\n\tval distroName = distroMap[\"NAME\"]\n\tval distroVersion = distroMap[\"VERSION\"]\n\treturn if (distroVersion != null) {\n\t\t\"$distroName $distroVersion\"\n\t} else {\n\t\tdistroName ?: \"\"\n\t}\n}", "CodeBleu_score": 36.49304026586277}, {"code": "private fun getLinuxDistro(): String{\n\t\tval osRelease = FileHandle(\"/etc/os-release\")\n\tif (osRelease.exists()) {\n\t\tval osReleaseText = osRelease.readString(Charset.forName(\"UTF-8\"))\n\t\tval osReleaseMap = HashMap<String, String>()\n\t\tval lines = osReleaseText.split(\"\n\")\n\t\tfor (line in lines) {\n\t\t\tval keyValue = line.split(\"=\")\n\t\t\tif (keyValue.size == 2) {\n\t\t\t\tosReleaseMap[keyValue[0].trim()] = keyValue[1].trim().replace(\"\\\"\", \"\")\n\t\t\t}\n\t\t}\n\t\tval prettyName = osReleaseMap[\"PRETTY_NAME\"]\n\t\tif (prettyName != null) {\n\t\t\treturn prettyName\n\t\t}\n\t\tval name = osReleaseMap[\"NAME\"]\n\t\tval version = osReleaseMap[\"VERSION\"]\n\t\tif (name != null && version != null) {\n\t\t\treturn \"$name $version\"\n\t\t}\n\t}\n\treturn \"\"\n}", "CodeBleu_score": 37.94591044656853}, {"code": "private fun getLinuxDistro(): String{\n\t\tval osReleaseFile = FileHandle(\"/etc/os-release\")\n\tval osReleaseMap = HashMap<String, String>()\n\tosReleaseFile.reader(Charset.forName(\"UTF-8\")).forEachLine { line ->\n\t\tval keyValue = line.split(\"=\")\n\t\tosReleaseMap[keyValue[0]] = keyValue[1].removeSurrounding(\"\\\"\")\n\t}\n\treturn if (osReleaseMap.containsKey(\"NAME\")) {\n\t\tval name = osReleaseMap[\"NAME\"]\n\t\tif (osReleaseMap.containsKey(\"VERSION\")) {\n\t\t\t\"$name ${osReleaseMap[\"VERSION\"]}\"\n\t\t} else {\n\t\t\tname\n\t\t}\n\t} else {\n\t\t\"\"\n\t}\n}", "CodeBleu_score": 35.277100966864936}]}
{"instance_id": "36a1d2e56540", "generation_result": [{"code": "private fun flashWindow(){\n\t\ttry {\n\t\tval window = Gdx.graphics.window\n\t\tval windowHandle = window.windowHandle\n\t\tif (windowHandle != 0L) {\n\t\t\tif (Platform.get() == Platform.WINDOWS) {\n\t\t\t\tval user32 = User32.INSTANCE\n\t\t\t\tval hWnd = Pointer.createConstant(windowHandle)\n\t\t\t\tval FLASHW_ALL = 3\n\t\t\t\tval FLASHW_TIMERNOFG = 12\n\t\t\t\tval result = user32.FlashWindowEx(hWnd, FLASHW_ALL, 0, 0, 0, WinDef.HWND(0), WinDef.BOOL(0))\n\t\t\t\tif (result == 0) {\n\t\t\t\t\tLog.error(\"Failed to flash window: ${user32.GetLastError()}\")\n\t\t\t\t}\n\t\t\t} else if (Platform.get() == Platform.MACOSX) {\n\t\t\t\tval carbon = Native.load(\"Carbon\", Carbon::class.java)\n\t\t\t\tval kCGSDisableUpdateWindows = 16L\n\t\t\t\tval kCGSDefaultConnection = 0L\n\t\t\t\tval result = carbon.CGSessionCopyCurrentDictionary()\n\t\t\t\tif (result.value == 0L) {\n\t\t\t\t\tLog.error(\"Failed to get CGSessionCopyCurrentDictionary\")\n\t\t\t\t} else {\n\t\t\t\t\tval options = carbon.CFDictionaryGetValue(result, carbon.kCGSessionOptionsKey)\n\t\t\t\t\tif (options == null) {\n\t\t\t\t\t\tLog.error(\"Failed to get kCGSessionOptionsKey\")\n\t\t\t\t\t} else {\n\t\t\t\t\t\tval value = carbon.CFDictionaryGetValue(options, carbon.kCGDisableUpdateWindowsKey)\n\t\t\t\t\t\tif (value == null) {\n\t\t\t\t\t\t\tLog.error(\"Failed to get kCGDisableUpdateWindowsKey\")\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcarbon.CFDictionarySetValue(options, carbon.kCGDisableUpdateWindowsKey, carbon.kCFBooleanTrue)\n\t\t\t\t\t\t\tcarbon.CGSessionSetOptions(options)\n\t\t\t\t\t\t\tcarbon.CGSessionUpdateWindows(kCGSDefaultConnection)\n\t\t\t\t\t\t\tcarbon.CGSessionSetOptions(options)\n\t\t\t\t\t\t\tcarbon.CGSessionUpdateWindows(kCGSDefaultConnection)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcarbon.CFRelease(result)\n\t\t\t\t}\n\t\t\t} else if (Platform.get() == Platform.LINUX) {\n\t\t\t\tval glfw = Native.load(\"org.lwjgl.", "CodeBleu_score": 42.76270017080259}, {"code": "private fun flashWindow(){\n\t\ttry {\n\t\tval window: Long = GLFWNativeWin32.glfwGetWin32Window(Gdx.graphics.window.windowHandle)\n\t\tval user32: User32 = User32.INSTANCE\n\t\tval hWnd: WinNT.HANDLE = WinNT.HANDLE(Pointer.nativeValue(window))\n\t\tval FLASHW_ALL = WinUser.FLASHW_ALL\n\t\tval FLASHW_TIMERNOFG = WinUser.FLASHW_TIMERNOFG\n\t\tval FLASHW_CAPTION = WinUser.FLASHW_CAPTION\n\t\tval FLASHW_TRAY = WinUser.FLASHW_TRAY\n\t\tval FLASHW_STOP = WinUser.FLASHW_STOP\n\t\tval FLASHW_TIMER = WinUser.FLASHW_TIMER\n\t\tval FLASHW_TIMERNOFG = WinUser.FLASHW_TIMERNOFG\n\t\tval FLASHW_ALL = WinUser.FLASHW_ALL\n\t\tval FLASHW_TIMER = WinUser.FLASHW_TIMER\n\t\tval FLASHW_TIMERNOFG = WinUser.FLASHW_TIMERNOFG\n\t\tval FLASHW_TIMER = WinUser.FLASHW_TIMER\n\t\tval FLASHW_TIMERNOFG = WinUser.FLASHW_TIMERNOFG\n\t\tval FLASHW_TIMER = WinUser.FLASHW_TIMER\n\t\tval FLASHW_TIMER = WinUser.FLASHW_TIMER\n\t\tval FLASHW_TIMER = WinUser.FLASHW_TIMER\n\t\tval FLASHW_TIMER = WinUser.FLASHW_TIMER\n\t\tval FLASHW_TIMER = WinUser.FLASHW_TIMER\n\t\tval FLASHW_TIMER = WinUser.FLASHW_TIMER\n\t\tval FLASHW_TIMER = WinUser.FLASHW_TIMER\n\t\tval FLASHW_TIMER = WinUser.FLASHW_TIMER\n\t\tval FLASHW_TIMER = WinUser.FLASHW_TIMER\n\t\tval FLASHW_TIMER = WinUser.FLASHW_TIMER\n\t\tval FLASHW_TIMER = WinUser.FLASHW_TIMER\n\t\tval FLASHW_TIMER = WinUser.FLASHW_TIMER\n\t\tval FLASHW_TIMER = WinUser.FLASHW_TIMER\n\t\tval FLASHW_TIMER = Win", "CodeBleu_score": 36.926708022121566}, {"code": "private fun flashWindow(){\n\t\ttry {\n\t\t// First, attempt to use the Win32 API.\n\t\tval user32 = User32.INSTANCE\n\t\tval hwnd = user32.GetForegroundWindow()\n\t\tval threadId = user32.GetWindowThreadProcessId(hwnd, Pointer(0))\n\t\tval thread = Thread.currentThread()\n\t\tval threadId2 = Pointer(Native.getThreadID(thread))\n\t\tif (threadId != threadId2) {\n\t\t\tuser32.AttachThreadInput(threadId, threadId2, true)\n\t\t\tuser32.BringWindowToTop(hwnd)\n\t\t\tuser32.SetForegroundWindow(hwnd)\n\t\t\tuser32.AttachThreadInput(threadId, threadId2, false)\n\t\t} else {\n\t\t\tuser32.BringWindowToTop(hwnd)\n\t\t\tuser32.SetForegroundWindow(hwnd)\n\t\t}\n\t\tuser32.FlashWindow(hwnd, true)\n\t\tuser32.FlashWindow(hwnd, false)\n\t} catch (e: Exception) {\n\t\t// If the Win32 API fails, attempt to use the GLFW API.\n\t\ttry {\n\t\t\tval glfw = GLFWNativeWin32()\n\t\t\tval window = glfw.glfwGetCurrentContext()\n\t\t\tglfw.glfwSetWindowShouldFlash(window, true)\n\t\t\tglfw.glfwSetWindowShouldFlash(window, false)\n\t\t} catch (e: Exception) {\n\t\t\t// If the GLFW API fails, attempt to use the LWJGL3 API.\n\t\t\ttry {\n\t\t\t\tval window = Lwjgl3Application.getPrimaryWindow()\n\t\t\t\twindow.requestAttention()\n\t\t\t} catch (e: Exception) {\n\t\t\t\t// If the LWJGL3 API fails, log the error without interrupting execution.\n\t\t\t\tLog.error(\"Failed to flash window\", e)\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 47.120845138351484}]}
{"instance_id": "8e3c7096415a", "generation_result": [{"code": "public void onFullBackup(FullBackupDataOutput data){\n\t\tFile prefsFile = getSharedPreferencesFile(getPackageName());\n\tif (prefsFile != null) {\n\t\tdata.writeEntityHeader(BackupAgent.SHARED_PREFERENCES_KEY, prefsFile.lastModified(), prefsFile.length());\n\t\tParcelFileDescriptor fd = data.getDataFile(BackupAgent.SHARED_PREFERENCES_KEY);\n\t\ttry {\n\t\t\tFileInputStream in = new FileInputStream(prefsFile);\n\t\t\tFileChannel src = in.getChannel();\n\t\t\tFileChannel dst = fd.getChannel();\n\t\t\tdst.transferFrom(src, 0, src.size());\n\t\t\tsrc.close();\n\t\t\tdst.close();\n\t\t\tin.close();\n\t\t} catch (IOException e) {\n\t\t\tLog.e(\"BackupAgent\", \"Unable to backup preferences\");\n\t\t}\n\t}\n\n\tFile rankingsFile = Rankings.getFile();\n\tif (rankingsFile != null && rankingsFile.exists()) {\n\t\tdata.writeEntityHeader(Rankings.FILENAME, rankingsFile.lastModified(), rankingsFile.length());\n\t\tParcelFileDescriptor fd = data.getDataFile(Rankings.FILENAME);\n\t\ttry {\n\t\t\tFileInputStream in = new FileInputStream(rankingsFile);\n\t\t\tFileChannel src = in.getChannel();\n\t\t\tFileChannel dst = fd.getChannel();\n\t\t\tdst.transferFrom(src, 0, src.size());\n\t\t\tsrc.close();\n\t\t\tdst.close();\n\t\t\tin.close();\n\t\t} catch (IOException e) {\n\t\t\tLog.e(\"BackupAgent\", \"Unable to backup rankings\");\n\t\t}\n\t}\n\n\tFile badgesFile = Badges.getFile();\n\tif (badgesFile != null && badgesFile.exists()) {\n\t\tdata.writeEntityHeader(Badges.FILENAME, badgesFile.lastModified(), badgesFile.length());\n\t\tParcelFileDescriptor fd = data.getDataFile(Badges.FILENAME);\n\t\ttry {\n\t\t\tFileInputStream in = new FileInputStream(badgesFile);\n\t\t\tFileChannel src = in.getChannel();\n\t\t\tFileChannel dst = fd.getChannel();\n\t\t\tdst.transferFrom(src, 0, src.size());\n\t\t\tsrc.close();\n\t\t\tdst.close();\n\t\t\tin.close();\n\t\t} catch (IOException e) {\n\t\t\tLog.e(\"BackupAgent\", \"Unable to backup badges\");\n\t\t}\n\t}\n\n\t", "CodeBleu_score": 22.701851519442602}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t\tFile prefsFile = getApplicationContext().getFilesDir().getParentFile();\n\tFile[] prefsFiles = prefsFile.listFiles();\n\tfor (File prefs : prefsFiles) {\n\t\tif (prefs.getName().endsWith(\".xml\")) {\n\t\t\tdata.writeEntityHeader(BackupAgent.SHARED_PREFS_KEY, prefs.getName());\n\t\t\tParcelFileDescriptor fd = ParcelFileDescriptor.open(prefs, 0);\n\t\t\ttry {\n\t\t\t\tBackupDataInput in = new BackupDataInput(fd);\n\t\t\t\ttry {\n\t\t\t\t\twhile (in.readNextHeader()) {\n\t\t\t\t\t\tdata.writeEntityData(in, in.getDataSize());\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tin.close();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tfd.close();\n\t\t\t}\n\t\t}\n\t}\n\tFile rankingsDir = new File(Rankings.FILE_DIR);\n\tFile[] rankingsFiles = rankingsDir.listFiles();\n\tfor (File rankings : rankingsFiles) {\n\t\tif (rankings.getName().endsWith(\".dat\")) {\n\t\t\tdata.writeEntityHeader(Rankings.FILE_DIR, rankings.getName());\n\t\t\tParcelFileDescriptor fd = ParcelFileDescriptor.open(rankings, 0);\n\t\t\ttry {\n\t\t\t\tBackupDataInput in = new BackupDataInput(fd);\n\t\t\t\ttry {\n\t\t\t\t\twhile (in.readNextHeader()) {\n\t\t\t\t\t\tdata.writeEntityData(in, in.getDataSize());\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tin.close();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tfd.close();\n\t\t\t}\n\t\t}\n\t}\n\tFile badgesDir = new File(Badges.FILE_DIR);\n\tFile[] badgesFiles = badgesDir.listFiles();\n\tfor (File badges : badgesFiles) {\n\t\tif (badges.getName().endsWith(\".dat\")) {\n\t\t\tdata.writeEntityHeader(Badges.FILE_DIR, badges.getName());\n\t\t\tParcelFileDescriptor fd = ParcelFileDescriptor.open(badges, 0);\n\t\t\ttry {\n\t\t\t\tBackupDataInput in = new BackupDataInput(fd);\n\t\t\t\ttry {\n\t\t\t\t\twhile (in.readNextHeader()) {\n\t\t\t\t\t\tdata.writeEntityData(in, in.getDataSize());\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tin.close();", "CodeBleu_score": 17.375214551775812}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t\tFile prefsFile = new File(getFilesDir(), \"shared_prefs/com.shatteredpixel.shatteredpixeldungeon_preferences.xml\");\n\tif (prefsFile.exists()) {\n\t\tdata.writeEntityHeader(BackupAgent.SHARED_PREFS_KEY, prefsFile.lastModified());\n\t\tParcelFileDescriptor fd = null;\n\t\ttry {\n\t\t\tfd = ParcelFileDescriptor.open(prefsFile, ParcelFileDescriptor.MODE_READ_ONLY);\n\t\t\tBackupDataInput in = new BackupDataInput(fd);\n\t\t\twhile (in.readNextHeader()) {\n\t\t\t\tdata.writeEntityHeader(in.getKey(), in.getDataSize());\n\t\t\t\tdata.writeEntityData(in, in.getDataSize());\n\t\t\t}\n\t\t} finally {\n\t\t\tif (fd != null) {\n\t\t\t\tfd.close();\n\t\t\t}\n\t\t}\n\t}\n\n\tFile rankingsFile = new File(getFilesDir(), \"rankings.dat\");\n\tif (rankingsFile.exists()) {\n\t\tdata.writeEntityHeader(BackupAgent.PREFS_KEY_RANKINGS, rankingsFile.lastModified());\n\t\tParcelFileDescriptor fd = null;\n\t\ttry {\n\t\t\tfd = ParcelFileDescriptor.open(rankingsFile, ParcelFileDescriptor.MODE_READ_ONLY);\n\t\t\tBackupDataInput in = new BackupDataInput(fd);\n\t\t\twhile (in.readNextHeader()) {\n\t\t\t\tdata.writeEntityHeader(in.getKey(), in.getDataSize());\n\t\t\t\tdata.writeEntityData(in, in.getDataSize());\n\t\t\t}\n\t\t} finally {\n\t\t\tif (fd != null) {\n\t\t\t\tfd.close();\n\t\t\t}\n\t\t}\n\t}\n\n\tFile badgesFile = new File(getFilesDir(), \"badges.dat\");\n\tif (badgesFile.exists()) {\n\t\tdata.writeEntityHeader(BackupAgent.PREFS_KEY_BADGES, badgesFile.lastModified());\n\t\tParcelFileDescriptor fd = null;\n\t\ttry {\n\t\t\tfd = ParcelFileDescriptor.open(badgesFile, ParcelFileDescriptor.MODE_READ_ONLY);\n\t\t\tBackupDataInput in = new BackupDataInput(fd);\n\t\t\twhile (in.readNextHeader()) {\n\t\t\t\tdata.writeEntityHeader(in.getKey(), in.getDataSize());\n\t\t\t\tdata.writeEntityData(in, in.getData", "CodeBleu_score": 25.596363656428135}]}
{"instance_id": "583999724a15", "generation_result": [{"code": "public boolean connectedToUnmeteredNetwork(){\n\t\tConnectivityManager cm = (ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);\n\tNetworkInfo activeNetwork = cm.getActiveNetworkInfo();\n\treturn (activeNetwork != null && activeNetwork.isConnected() && (activeNetwork.getType() == ConnectivityManager.TYPE_WIFI || activeNetwork.getType() == ConnectivityManager.TYPE_WIMAX || activeNetwork.getType() == ConnectivityManager.TYPE_BLUETOOTH || activeNetwork.getType() == ConnectivityManager.TYPE_ETHERNET));\n}", "CodeBleu_score": 58.84062432264323}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t\tConnectivityManager connectivityManager = (ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);\n\tNetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();\n\tif (activeNetworkInfo != null && activeNetworkInfo.isConnected()) {\n\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\t\t\treturn !activeNetworkInfo.isActiveNetworkMetered();\n\t\t} else {\n\t\t\tint type = activeNetworkInfo.getType();\n\t\t\treturn type == ConnectivityManager.TYPE_WIFI || type == ConnectivityManager.TYPE_WIMAX || type == ConnectivityManager.TYPE_BLUETOOTH || type == ConnectivityManager.TYPE_ETHERNET;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 55.59684680085644}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t\tConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n\tNetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();\n\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\t\treturn !connectivityManager.isActiveNetworkMetered();\n\t} else {\n\t\treturn networkInfo != null && networkInfo.isConnected() && (networkInfo.getType() == ConnectivityManager.TYPE_WIFI || networkInfo.getType() == ConnectivityManager.TYPE_WIMAX || networkInfo.getType() == ConnectivityManager.TYPE_BLUETOOTH || networkInfo.getType() == ConnectivityManager.TYPE_ETHERNET);\n\t}\n}", "CodeBleu_score": 61.23251821228004}]}
{"instance_id": "f8bd6cd4826b", "generation_result": [{"code": "protected boolean affectHero( Hero hero ){\n\t\tif (hero.isAlive()) {\n\t\thero.interrupt();\n\t\thero.sprite.operate( hero );\n\t\thero.spendAndNext( TIME_TO_PROCESS );\n\n\t\tif (hero.isAlive()) {\n\t\t\tif (hero.isParalyzed()) {\n\t\t\t\thero.paralyse(false);\n\t\t\t\tGLog.w(Messages.get(this, \"paralysis_cured\"));\n\t\t\t}\n\n\t\t\tif (hero.isAsleep()) {\n\t\t\t\thero.wakeUp();\n\t\t\t\tGLog.w(Messages.get(this, \"asleep_cured\"));\n\t\t\t}\n\n\t\t\tif (hero.isPoisoned()) {\n\t\t\t\thero.curePoison();\n\t\t\t\tGLog.w(Messages.get(this, \"poison_cured\"));\n\t\t\t}\n\n\t\t\tif (hero.isCharmed()) {\n\t\t\t\thero.breakCharm();\n\t\t\t\tGLog.w(Messages.get(this, \"charm_cured\"));\n\t\t\t}\n\n\t\t\tif (hero.isBlinded()) {\n\t\t\t\thero.heal(10);\n\t\t\t\tGLog.w(Messages.get(this, \"blindness_cured\"));\n\t\t\t}\n\n\t\t\tif (hero.isDeaf()) {\n\t\t\t\thero.heal(10);\n\t\t\t\tGLog.w(Messages.get(this, \"deafness_cured\"));\n\t\t\t}\n\n\t\t\tif (hero.isParalyzed()) {\n\t\t\t\thero.paralyse(false);\n\t\t\t\tGLog.w(Messages.get(this, \"paralysis_cured\"));\n\t\t\t}\n\n\t\t\tif (hero.isOnFire()) {\n\t\t\t\thero.extinguish();\n\t\t\t\tGLog.w(Messages.get(this, \"fire_cured\"));\n\t\t\t}\n\n\t\t\tif (hero.isInsane()) {\n\t\t\t\thero.insanity = 0;\n\t\t\t\tGLog.w(Messages.get(this, \"insanity_cured\"));\n\t\t\t}\n\n\t\t\tif (hero.isInvulnerable()) {\n\t\t\t\thero.invulnerable = false;\n\t\t\t\tGLog.w(Messages.get(this, \"invulnerable_cured\"));\n\t\t\t}\n\n\t\t\tif (hero.isSlowed()) {\n\t\t\t\thero.slowed = false;\n\t\t\t\t", "CodeBleu_score": 37.340781289922}, {"code": "protected boolean affectHero( Hero hero ){\n\t\tif (hero.isAlive()) {\n\t\thero.paralysed = false;\n\t\thero.sleeping = false;\n\t\thero.interrupt();\n\t\thero.sprite.showStatus(CharSprite.POSITIVE, Messages.get(this, \"success\"));\n\n\t\tif (Dungeon.level.map[hero.pos] == Terrain.WATER) {\n\t\t\thero.sprite.operate(hero.pos);\n\t\t\thero.sprite.placeWater(hero.pos);\n\t\t}\n\n\t\tif (Dungeon.level.map[hero.pos] == Terrain.GRASS) {\n\t\t\thero.sprite.operate(hero.pos);\n\t\t\thero.sprite.placeGrass(hero.pos);\n\t\t}\n\n\t\tif (Dungeon.level.map[hero.pos] == Terrain.HUNT_GRASS) {\n\t\t\thero.sprite.operate(hero.pos);\n\t\t\thero.sprite.placeHuntGrass(hero.pos);\n\t\t}\n\n\t\tif (Dungeon.level.map[hero.pos] == Terrain.EMPTY_SP) {\n\t\t\thero.sprite.operate(hero.pos);\n\t\t\thero.sprite.placeWater(hero.pos);\n\t\t}\n\n\t\tif (Dungeon.level.map[hero.pos] == Terrain.EMPTY_DECO) {\n\t\t\thero.sprite.operate(hero.pos);\n\t\t\thero.sprite.placeWater(hero.pos);\n\t\t}\n\n\t\tif (Dungeon.level.map[hero.pos] == Terrain.EMPTY_WELL) {\n\t\t\thero.sprite.operate(hero.pos);\n\t\t\thero.sprite.placeWater(hero.pos);\n\t\t}\n\n\t\tif (Dungeon.level.map[hero.pos] == Terrain.EMPTY_ALTAR) {\n\t\t\thero.sprite.operate(hero.pos);\n\t\t\thero.sprite.placeWater(hero.pos);\n\t\t}\n\n\t\tif (Dungeon.level.map[hero.pos] == Terrain.EMPTY_WELL) {\n\t\t\thero.sprite.operate(hero.pos);\n\t\t\thero.sprite.placeWater(hero.pos);\n\t\t}\n\n\t\tif (Dungeon.level.map[hero.pos] == Terrain.EMPTY_SP) {\n\t\t\thero.sprite.operate(", "CodeBleu_score": 27.30988715797671}, {"code": "protected boolean affectHero( Hero hero ){\n\t\tif (hero.isAlive()) {\n\t\thero.sprite.showStatus( CharSprite.POSITIVE );\n\t\tif (hero.isParalyzed()) {\n\t\t\thero.paralyse(false);\n\t\t}\n\t\tif (hero.isPoisoned()) {\n\t\t\thero.curePoison();\n\t\t}\n\t\tif (hero.isBurning()) {\n\t\t\thero.cureBurning();\n\t\t}\n\t\tif (hero.isAsleep()) {\n\t\t\thero.wakeUp();\n\t\t}\n\t\tif (hero.isFrostbitten()) {\n\t\t\thero.cureFrostbite();\n\t\t}\n\t\tif (hero.isOnSurface()) {\n\t\t\thero.satisfyHunger(true);\n\t\t}\n\t\tif (hero.isDeadlyPoisoned()) {\n\t\t\thero.cureDeadlyPoison();\n\t\t}\n\t\tif (hero.isImmune()) {\n\t\t\thero.cureAllStatuses();\n\t\t}\n\t\thero.heal( hero.maxHP / 10 );\n\t\thero.spendAndNext( 0 );\n\n\t\tif (hero.isAlive()) {\n\t\t\tif (hero.hasTalent(Talent.CURED_ANGRY_HUNGER)) {\n\t\t\t\thero.healHunger(hero.maxHunger / 10);\n\t\t\t}\n\n\t\t\tif (hero.hasTalent(Talent.CURED_HUNGRY_TOUCH)) {\n\t\t\t\thero.healHunger(hero.maxHunger / 10);\n\t\t\t}\n\n\t\t\tif (hero.hasTalent(Talent.CURED_HUNGRY_TOUCH)) {\n\t\t\t\thero.healHunger(hero.maxHunger / 10);\n\t\t\t}\n\n\t\t\tif (hero.hasTalent(Talent.CURED_HUNGRY_TOUCH)) {\n\t\t\t\thero.healHunger(hero.maxHunger / 10);\n\t\t\t}\n\n\t\t\tif (hero.hasTalent(Talent.CURED_HUNGRY_TOUCH)) {\n\t\t\t\thero.healHunger(hero.maxHunger / 10);\n\t\t\t}\n\n\t\t\tif (", "CodeBleu_score": 28.446603889564727}]}
{"instance_id": "3a94f2e84c83", "generation_result": [{"code": "protected Item affectItem( Item item, int pos ){\n\t\tif (item.isEmpty()) {\n\t\treturn null;\n\t}\n\n\t//handle waterskins\n\tif (item instanceof Waterskin) {\n\t\tWaterskin waterskin = (Waterskin) item;\n\t\tif (waterskin.full()) {\n\t\t\tGLog.w(Messages.get(this, \"full_waterskin\"));\n\t\t\treturn null;\n\t\t}\n\t\twaterskin.fill();\n\t\tCellEmitter.get(pos).burst(Speck.factory(Speck.WATER), 3);\n\t\tGLog.i(Messages.get(this, \"filled_waterskin\"));\n\t\tSample.INSTANCE.play(Assets.Sounds.DRINK);\n\t\treturn null;\n\t}\n\n\t//handle ankhs\n\tif (item instanceof Ankh) {\n\t\tAnkh ankh = (Ankh) item;\n\t\tif (ankh.isBlessed()) {\n\t\t\tGLog.w(Messages.get(this, \"blessed_ankh\"));\n\t\t\treturn null;\n\t\t}\n\t\tankh.setBlessed(true);\n\t\tCellEmitter.get(pos).burst(Speck.factory(Speck.HEALING), 3);\n\t\tGLog.i(Messages.get(this, \"blessed_ankh\"));\n\t\tSample.INSTANCE.play(Assets.Sounds.SCROLL);\n\t\treturn null;\n\t}\n\n\t//handle potion of healing\n\tif (item instanceof PotionOfHealing) {\n\t\tPotionOfHealing potion = (PotionOfHealing) item;\n\t\tif (potion.healing <= 0) {\n\t\t\tGLog.w(Messages.get(this, \"no_healing\"));\n\t\t\treturn null;\n\t\t}\n\t\tHero.hero.heal(potion.healing);\n\t\tpotion.heal(-potion.healing);\n\t\tCellEmitter.get(pos).burst(Speck.factory(Speck.HEALING), 3);\n\t\tGLog.i(Messages.get(this, \"healed\", potion.healing));\n\t\tSample.INSTANCE.play(Assets.Sounds.POTION);\n\t\treturn null;\n\t}\n\n\t//handle scroll of remove curse\n\tif", "CodeBleu_score": 40.84307825895831}, {"code": "protected Item affectItem( Item item, int pos ){\n\t\tif (item == null) {\n\t\treturn null;\n\t}\n\n\tif (item instanceof Waterskin) {\n\t\tif (Dungeon.hero.belongings.getItem(Waterskin.class).isFull()) {\n\t\t\treturn null;\n\t\t}\n\n\t\tDungeon.hero.belongings.getItem(Waterskin.class).fill(item);\n\t\tDungeon.hero.sprite.emitter().burst(Speck.factory(Speck.WATER), 4);\n\t\tDungeon.hero.sprite.showStatus(CharSprite.POSITIVE, Messages.get(this, \"fill\"));\n\n\t\treturn null;\n\t}\n\n\tif (item instanceof Ankh) {\n\t\tif (Dungeon.hero.belongings.getItem(Ankh.class).blessed) {\n\t\t\treturn null;\n\t\t}\n\n\t\tDungeon.hero.belongings.getItem(Ankh.class).blessed = true;\n\t\tDungeon.hero.sprite.emitter().burst(Speck.factory(Speck.HEALING), 4);\n\t\tDungeon.hero.sprite.showStatus(CharSprite.POSITIVE, Messages.get(this, \"blessed\"));\n\n\t\treturn null;\n\t}\n\n\tif (item.cursed) {\n\t\tif (item.cursedKnown) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (item.cursedBy(ScrollOfRemoveCurse.class)) {\n\t\t\treturn null;\n\t\t}\n\n\t\titem.cursed = false;\n\t\titem.cursedKnown = true;\n\t\titem.cursedBy(this);\n\n\t\tif (item instanceof PotionOfHealing) {\n\t\t\tPotionOfHealing potion = (PotionOfHealing) item;\n\t\t\tif (potion.healing > 0) {\n\t\t\t\tDungeon.hero.heal(potion.healing);\n\t\t\t\tGLog.w(Messages.get(this, \"heal\", potion.healing));\n\t\t\t}\n\t\t}\n\n\t\tDungeon.hero.sprite.emitter().burst(Speck.factory(Speck.HEALING), 4);\n\t\tDungeon.hero.sprite.showStatus(CharSprite.POSITIVE, Messages.get(this, \"remove_curse\"));\n\n\t\treturn null;\n\t}", "CodeBleu_score": 39.04988362985095}, {"code": "protected Item affectItem( Item item, int pos ){\n\t\tif (item instanceof Waterskin) {\n\t\tif (item.cursed) {\n\t\t\tGLog.w(Messages.get(this, \"item_cursed\"));\n\t\t\treturn null;\n\t\t}\n\t\tif (item.quantity >= Waterskin.CAPACITY) {\n\t\t\tGLog.w(Messages.get(this, \"item_full\"));\n\t\t\treturn null;\n\t\t}\n\t\titem.quantity++;\n\t\tGLog.i(Messages.get(this, \"item_filled\"));\n\t\tSample.INSTANCE.play(Assets.Sounds.WATER);\n\t\treturn item;\n\t} else if (item instanceof Ankh) {\n\t\tif (item.cursed) {\n\t\t\tGLog.w(Messages.get(this, \"item_cursed\"));\n\t\t\treturn null;\n\t\t}\n\t\tif (item.quantity >= Ankh.CAPACITY) {\n\t\t\tGLog.w(Messages.get(this, \"item_full\"));\n\t\t\treturn null;\n\t\t}\n\t\titem.quantity++;\n\t\tGLog.i(Messages.get(this, \"item_filled\"));\n\t\tSample.INSTANCE.play(Assets.Sounds.WATER);\n\t\treturn item;\n\t} else if (item instanceof PotionOfHealing) {\n\t\tif (item.cursed) {\n\t\t\tGLog.w(Messages.get(this, \"item_cursed\"));\n\t\t\treturn null;\n\t\t}\n\t\tif (item.quantity >= PotionOfHealing.CAPACITY) {\n\t\t\tGLog.w(Messages.get(this, \"item_full\"));\n\t\t\treturn null;\n\t\t}\n\t\titem.quantity++;\n\t\tGLog.i(Messages.get(this, \"item_filled\"));\n\t\tSample.INSTANCE.play(Assets.Sounds.WATER);\n\t\treturn item;\n\t} else if (item.cursed) {\n\t\tif (item.cursedKnown) {\n\t\t\tGLog.w(Messages.get(this, \"item_cursed\"));\n\t\t\treturn null;\n\t\t}\n\t\tif (item instanceof ScrollOfRemoveCurse) {\n\t\t\tGLog.i(Messages.get(this, \"item_uncursed\"));\n\t\t\titem.cursed = false;\n\t\t\titem.cursedKnown = true;\n\t\t\tSample.INSTANCE.", "CodeBleu_score": 43.06668598766195}]}
{"instance_id": "d322228d1a3e", "generation_result": [{"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t\tif (enemy.alignment == Char.Alignment.ENEMY) {\n\t\tif (buffCls != null) {\n\t\t\tenemy.buff(buffCls);\n\t\t}\n\t\tint levelDiff = hero.level - enemy.level;\n\t\tif (levelDiff > 0) {\n\t\t\tif (levelDiff >= 5) {\n\t\t\t\thero.heal(levelDiff * 10);\n\t\t\t} else {\n\t\t\t\thero.heal(levelDiff * 5);\n\t\t\t}\n\t\t} else if (levelDiff < 0) {\n\t\t\thero.damage(-levelDiff);\n\t\t}\n\t\tif (hero.subClass == HeroSubClass.MONK) {\n\t\t\thero.energy += 1;\n\t\t}\n\t\tStatistics.kills++;\n\t\tif (enemy.alignment == Char.Alignment.ENEMY) {\n\t\t\tStatistics.killsEnemies++;\n\t\t}\n\t\tif (enemy.alignment == Char.Alignment.FRIEND) {\n\t\t\tStatistics.killsAllies++;\n\t\t}\n\t\tif (enemy instanceof Mimic) {\n\t\t\tStatistics.killsMimics++;\n\t\t}\n\t\tif (hero.subClass == HeroSubClass.WARRIOR && enemy.alignment == Char.Alignment.ENEMY) {\n\t\t\tStatistics.killsWarriorEnemies++;\n\t\t}\n\t\tif (hero.subClass == HeroSubClass.WARRIOR && enemy.alignment == Char.Alignment.FRIEND) {\n\t\t\tStatistics.killsWarriorAllies++;\n\t\t}\n\t\tif (hero.subClass == HeroSubClass.MAGE && enemy.alignment == Char.Alignment.ENEMY) {\n\t\t\tStatistics.killsMageEnemies++;\n\t\t}\n\t\tif (hero.subClass == HeroSubClass.MAGE && enemy.alignment == Char.Alignment.FRIEND) {\n\t\t\tStatistics.killsMageAllies++;\n\t\t}\n\t\tif (hero.subClass == HeroSubClass.ROGUE && enemy.alignment == Char.Alignment.ENEMY) {\n\t\t\tStatistics.killsRogueEnemies++;\n\t\t}\n\t\tif (hero.subClass == HeroSubClass.ROGUE && enemy.alignment == Char.Alignment.FRIEND) {\n\t\t\tStatistics.killsRogueAllies++;", "CodeBleu_score": 29.75705522428441}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//TODO: this is a mess, needs to be rewritten\n\t//", "CodeBleu_score": 4.537406718231222}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t\t//if the mob was aligned as an enemy, apply the buff\n\tif (enemy.alignment == Char.Alignment.ENEMY) {\n\t\tenemy.add(buffCls.getConstructor().newInstance());\n\t}\n\n\t//check for loot\n\tif (enemy.alignment == Char.Alignment.ENEMY) {\n\t\t//roll for loot\n\t\tint roll = Dice.d(10);\n\t\tif (roll <= 3) {\n\t\t\t//loot\n\t\t\tint gold = Dice.d(2, 6);\n\t\t\thero.gold += gold;\n\t\t\tStatistics.goldCollected += gold;\n\t\t\thero.sprite.emitter().burst( Speck.factory( Speck.GOLD ), 3 );\n\t\t\thero.sprite.showStatus(CharSprite.POSITIVE, \"Gold!\", gold);\n\t\t\thero.spendAndNext(Actor.TICK);\n\t\t} else if (roll <= 5) {\n\t\t\t//no loot\n\t\t\thero.sprite.showStatus(CharSprite.NEGATIVE, \"No loot\");\n\t\t\thero.spendAndNext(Actor.TICK);\n\t\t} else if (roll <= 7) {\n\t\t\t//extra loot\n\t\t\tint gold = Dice.d(2, 12);\n\t\t\thero.gold += gold;\n\t\t\tStatistics.goldCollected += gold;\n\t\t\thero.sprite.emitter().burst( Speck.factory( Speck.GOLD ), 3 );\n\t\t\thero.sprite.showStatus(CharSprite.POSITIVE, \"Gold!\", gold);\n\t\t\thero.spendAndNext(Actor.TICK);\n\t\t} else if (roll <= 9) {\n\t\t\t//extra extra loot\n\t\t\tint gold = Dice.d(2, 20);\n\t\t\thero.gold += gold;\n\t\t\tStatistics.goldCollected += gold;\n\t\t\thero.sprite.emitter().burst( Speck.factory( Speck.GOLD ), 3 );\n\t\t\thero.sprite.showStatus(CharSprite.POSITIVE, \"Gold!\", gold);\n\t\t\thero.spendAndNext(Actor.TICK);\n\t\t} else {\n\t\t\t//extra extra extra loot\n\t\t\tint gold = Dice.d(2, 30);\n\t\t\thero.gold += gold;\n\t\t\tStatistics.goldCollected += gold;\n\t\t\thero.sprite.emitter", "CodeBleu_score": 27.792535094978753}]}
{"instance_id": "9ee21c0149f3", "generation_result": [{"code": "public static void processEnemyKill(Char enemy){\n\t\tif (Dungeon.hero.hasTalent(AscensionChallenge.ASCENSION_CHALLENGE) && Dungeon.hero.buff(AscensionChallenge.ASCENSION_CHALLENGE) != null) {\n\t\tif (enemy instanceof Monk && Dungeon.hero.hasTalent(AscensionChallenge.ASCENSION_CHALLENGE_2)) {\n\t\t\t// Monks are not boosted by the challenge, so they are not affected\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if the enemy is a transformed enemy\n\t\tif (enemy.alignment == Char.Alignment.NEUTRAL) {\n\t\t\tif (enemy instanceof Ghoul) {\n\t\t\t\t// Ghouls are not boosted by the challenge, so they are not affected\n\t\t\t\treturn;\n\t\t\t} else if (enemy instanceof Skeleton) {\n\t\t\t\t// Skeletons are not boosted by the challenge, so they are not affected\n\t\t\t\treturn;\n\t\t\t} else if (enemy instanceof Slime) {\n\t\t\t\t// Slimes are not boosted by the challenge, so they are not affected\n\t\t\t\treturn;\n\t\t\t} else if (enemy instanceof Snake) {\n\t\t\t\t// Snakes are not boosted by the challenge, so they are not affected\n\t\t\t\treturn;\n\t\t\t} else if (enemy instanceof Rat) {\n\t\t\t\t// Rats are not boosted by the challenge, so they are not affected\n\t\t\t\treturn;\n\t\t\t} else if (enemy instanceof Brute) {\n\t\t\t\t// Brutes are not boosted by the challenge, so they are not affected\n\t\t\t\treturn;\n\t\t\t} else if (enemy instanceof Crab) {\n\t\t\t\t// Crabs are not boosted by the challenge, so they are not affected\n\t\t\t\treturn;\n\t\t\t} else if (enemy instanceof Spinner) {\n\t\t\t\t// Spiders are not boosted by the challenge, so they are not affected\n\t\t\t\treturn;\n\t\t\t} else if (enemy instanceof Eye) {\n\t\t\t\t// Eyes are not boosted by the challenge, so they are not affected\n\t\t\t\treturn;\n\t\t\t} else if (enemy instanceof DM100) {\n\t\t\t\t// DM100s are not boosted by the challenge, so they are not affected\n\t\t\t\treturn;\n\t\t\t} else if (enemy instanceof DM200) {\n\t\t\t\t// DM200s are not boosted by the challenge", "CodeBleu_score": 16.49422327694222}, {"code": "public static void processEnemyKill(Char enemy){\n\t\tif (Dungeon.hero.hasTalent(AscensionTalent.ASCENSION_CHALLENGE) && Dungeon.hero.buff(AscensionChallenge.ChallengeBuff.class) != null) {\n\t\tif (AscensionChallenge.isBoostedEnemy(enemy)) {\n\t\t\tAscensionChallenge.revertBoostedEnemy(enemy);\n\t\t} else {\n\t\t\tAscensionChallenge.decrementChallenge(enemy);\n\t\t}\n\t}\n\tif (Dungeon.hero.hasTalent(AscensionTalent.ASCENSION_CHALLENGE) && Dungeon.hero.buff(AscensionChallenge.ChallengeBuff.class) != null) {\n\t\tif (Dungeon.hero.ascensionChallengeStacks() <= AscensionChallenge.MIN_STACKS_FOR_WARNING) {\n\t\t\tGLog.w(Messages.get(AscensionChallenge.class, \"weak_warning\"));\n\t\t}\n\t\tif (Dungeon.hero.lvl >= Hero.MAX_LEVEL && Dungeon.hero.ascensionChallengeStacks() <= 0) {\n\t\t\tDungeon.hero.ascend();\n\t\t\tGLog.w(Messages.get(AscensionChallenge.class, \"max_level_warning\"));\n\t\t}\n\t\tDungeon.hero.updateBuffIndicator();\n\t}\n}", "CodeBleu_score": 21.40007095455956}, {"code": "public static void processEnemyKill(Char enemy){\n\t\tif (Dungeon.hero.hasTalent(AscensionChallenge.ASCENSION_CHALLENGE) && Dungeon.hero.buff(AscensionChallenge.ASCENSION_CHALLENGE) != null) {\n\t\tif (enemy instanceof Elemental) {\n\t\t\tElemental elemental = (Elemental) enemy;\n\t\t\tif (elemental.element == Dungeon.hero.element()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telemental.restore();\n\t\t\tGLog.w(Messages.get(AscensionChallenge.class, \"weak_message\", enemy.name()));\n\t\t} else if (enemy instanceof Rat) {\n\t\t\tRat rat = (Rat) enemy;\n\t\t\tif (rat.element == Dungeon.hero.element()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\trat.restore();\n\t\t\tGLog.w(Messages.get(AscensionChallenge.class, \"weak_message\", enemy.name()));\n\t\t} else if (enemy instanceof Skeleton) {\n\t\t\tSkeleton skeleton = (Skeleton) enemy;\n\t\t\tif (skeleton.element == Dungeon.hero.element()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tskeleton.restore();\n\t\t\tGLog.w(Messages.get(AscensionChallenge.class, \"weak_message\", enemy.name()));\n\t\t} else if (enemy instanceof Slime) {\n\t\t\tSlime slime = (Slime) enemy;\n\t\t\tif (slime.element == Dungeon.hero.element()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tslime.restore();\n\t\t\tGLog.w(Messages.get(AscensionChallenge.class, \"weak_message\", enemy.name()));\n\t\t} else if (enemy instanceof Snake) {\n\t\t\tSnake snake = (Snake) enemy;\n\t\t\tif (snake.element == Dungeon.hero.element()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsnake.restore();\n\t\t\tGLog.w(Messages.get(AscensionChallenge.class, \"weak_message\", enemy.name()));\n\t\t} else if (enemy instanceof Ghoul) {\n\t\t\tGhoul ghoul = (Ghoul) enemy;\n\t\t\tif (ghoul.element == Dungeon.hero.element()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tghoul.restore();\n\t\t\tGLog.w(Messages.get(AscensionChallenge", "CodeBleu_score": 24.37010100042346}]}
{"instance_id": "4fc9c3c1fcce", "generation_result": [{"code": "public static int AscensionCorruptResist(Mob m){\n\t\tif (m == null) {\n\t\treturn 0;\n\t}\n\tif (m.isAlive() && m.alignment == Char.Alignment.EVIL && Dungeon.challenges.isActive(Challenges.ASCENSION)) {\n\t\tint resist = m.resistances.get(Char.Property.CORRUPTION);\n\t\tif (resist != 0) {\n\t\t\treturn resist;\n\t\t}\n\t\tif (m instanceof RipperDemon) {\n\t\t\treturn 10;\n\t\t}\n\t\tif (m instanceof Ghoul) {\n\t\t\treturn 7;\n\t\t}\n\t\tif (m instanceof Skeleton) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m instanceof Brute) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m instanceof DM100) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m instanceof DM200) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m instanceof Golem) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m instanceof Thief) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m instanceof Spinner) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m instanceof Snake) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m instanceof Slime) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m instanceof Bat) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m instanceof Guard) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m instanceof Succubus) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m instanceof Swarm) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m instanceof Scorpio) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m instanceof Necromancer) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m instanceof Shaman) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m instanceof Monk) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m instanceof Crab) {\n\t\t\treturn 13;\n\t\t}\n\t\tif (m instanceof Eye", "CodeBleu_score": 26.01475568520589}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t\tif (m == null) {\n\t\treturn 0;\n\t}\n\n\tif (m.buff(AscensionBuff.class) != null) {\n\t\treturn m.exp;\n\t}\n\n\tif (m.buff(AscensionDread.class) != null) {\n\t\treturn 10;\n\t}\n\n\tif (m.buff(AscensionFury.class) != null) {\n\t\treturn 15;\n\t}\n\n\tif (m.buff(AscensionWrath.class) != null) {\n\t\treturn 20;\n\t}\n\n\tif (m.buff(AscensionDespair.class) != null) {\n\t\treturn 25;\n\t}\n\n\tif (m.buff(AscensionDesire.class) != null) {\n\t\treturn 30;\n\t}\n\n\tif (m.buff(AscensionDespair.class) != null) {\n\t\treturn 35;\n\t}\n\n\tif (m.buff(AscensionDesire.class) != null) {\n\t\treturn 40;\n\t}\n\n\tif (m.buff(AscensionWrath.class) != null) {\n\t\treturn 45;\n\t}\n\n\tif (m.buff(AscensionFury.class) != null) {\n\t\treturn 50;\n\t}\n\n\tif (m.buff(AscensionDread.class) != null) {\n\t\treturn 55;\n\t}\n\n\tif (m.buff(AscensionDread.class) != null) {\n\t\treturn 60;\n\t}\n\n\tif (m.buff(AscensionDespair.class) != null) {\n\t\treturn 65;\n\t}\n\n\tif (m.buff(AscensionDesire.class) != null) {\n\t\treturn 70;\n\t}\n\n\tif (m.buff(AscensionWrath.class) != null) {\n\t\treturn 75;\n\t}\n\n\tif (m.buff(AscensionFury.class) != null) {\n\t\treturn 80;\n\t}\n\n\tif (m.buff(AscensionDread.class) != null) {\n\t\treturn 85;\n\t}\n\n\tif", "CodeBleu_score": 19.35212745678355}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t\tif (m == null) {\n\t\treturn 0;\n\t}\n\tif (m.isBuffed(Buff.CURSE_OF_AGONY)) {\n\t\treturn m.EXP();\n\t}\n\tif (m.isBuffed(Buff.CURSE_OF_ELEMENTAL_ARMOR)) {\n\t\treturn m.EXP();\n\t}\n\tif (m.isBuffed(Buff.CURSE_OF_CORRUPTION)) {\n\t\treturn m.EXP();\n\t}\n\tif (m.isBuffed(Buff.CURSE_OF_GUTS)) {\n\t\treturn m.EXP();\n\t}\n\tif (m.isBuffed(Buff.CURSE_OF_LIQUID_POISON)) {\n\t\treturn m.EXP();\n\t}\n\tif (m.isBuffed(Buff.CURSE_OF_PARALYSIS)) {\n\t\treturn m.EXP();\n\t}\n\tif (m.isBuffed(Buff.CURSE_OF_STUPIDITY)) {\n\t\treturn m.EXP();\n\t}\n\tif (m.isBuffed(Buff.CURSE_OF_VAMPIRISM)) {\n\t\treturn m.EXP();\n\t}\n\tif (m.isBuffed(Buff.CURSE_OF_WEAKNESS)) {\n\t\treturn m.EXP();\n\t}\n\tif (m.isBuffed(Buff.CURSE_OF_EXHAUSTION)) {\n\t\treturn m.EXP();\n\t}\n\tif (m.isBuffed(Buff.CURSE_OF_STRANGULATION)) {\n\t\treturn m.EXP();\n\t}\n\tif (m.isBuffed(Buff.CURSE_OF_BLINDNESS)) {\n\t\treturn m.EXP();\n\t}\n\tif (m.isBuffed(Buff.CURSE_OF_INCAPACITATION)) {\n\t\treturn m.EXP();\n\t}\n\tif (m.isBuffed(Buff.CURSE_OF_DECAY)) {\n\t\treturn m.EXP();\n\t}\n\tif (m.isBuffed(Buff.CURSE_OF_DECAY)) {\n\t\treturn m.EXP();\n\t}\n\tif", "CodeBleu_score": 21.2271512373131}]}
{"instance_id": "bdc8df5952c7", "generation_result": [{"code": "public void hit( Char enemy ){\n\t\t//if the enemy is dead or has a corruption buff with full health, the combo timer is extended\n\tif (enemy.isAlive() && enemy.buff(Corruption.class) != null && enemy.buff(Corruption.class).timeLeft() == enemy.buff(Corruption.class).maxTime()) {\n\t\textendCombo(Talent.CLEAVE.comboTime());\n\t}\n\t//if the enemy is dead, the combo timer is reset\n\telse if (!enemy.isAlive()) {\n\t\tresetCombo();\n\t}\n\n\t//increment the combo count\n\tcombo++;\n\n\t//if the enemy is dead, the combo count is reset\n\tif (!enemy.isAlive()) {\n\t\tcombo = 0;\n\t}\n\n\t//if the enemy has a mastery buff, the combo count is reset\n\tif (enemy.buff(Mastery.class) != null) {\n\t\tcombo = 0;\n\t}\n\n\t//if the enemy is a boss, the combo count is reset\n\tif (enemy.boss) {\n\t\tcombo = 0;\n\t}\n\n\t//if the enemy is a boss, the combo count is reset\n\tif (enemy.boss) {\n\t\tcombo = 0;\n\t}\n\n\t//if the enemy is a boss, the combo count is reset\n\tif (enemy.boss) {\n\t\tcombo = 0;\n\t}\n\n\t//if the enemy is a boss, the combo count is reset\n\tif (enemy.boss) {\n\t\tcombo = 0;\n\t}\n\n\t//if the enemy is a boss, the combo count is reset\n\tif (enemy.boss) {\n\t\tcombo = 0;\n\t}\n\n\t//if the enemy is a boss, the combo count is reset\n\tif (enemy.boss) {\n\t\tcombo = 0;\n\t}\n\n\t//if the enemy is a boss, the combo count is reset\n\tif (enemy.boss) {\n\t\tcombo = 0;\n\t}\n\n\t//if the enemy is a boss, the combo count is reset\n\tif (enemy.boss) {\n\t\tcombo = 0;\n\t}\n\n\t//if the enemy is a boss, the combo count is reset\n\tif (enemy.boss) {\n\t\tcombo = ", "CodeBleu_score": 21.10595996214422}, {"code": "public void hit( Char enemy ){\n\t\tif (Dungeon.hero.isAlive() && enemy.isAlive() && enemy != Dungeon.hero) {\n\t\tif (Dungeon.hero.hasTalent(Talent.CLEAVE) && enemy.buff(Corruption.class) != null && enemy.buff(Corruption.class).curHP == enemy.buff(Corruption.class).maxHP) {\n\t\t\tint cleave = Dungeon.hero.getTalent(Talent.CLEAVE);\n\t\t\tfloat time = Math.min(Dungeon.hero.cooldown(), cleave * 0.2f);\n\t\t\tif (Dungeon.hero.buff(Mistweaver.class) != null) {\n\t\t\t\ttime *= 1 + Dungeon.hero.buff(Mistweaver.class).level();\n\t\t\t}\n\t\t\tDungeon.hero.cooldown( time );\n\t\t}\n\t\tDungeon.hero.combo++;\n\t\tDungeon.hero.interrupt();\n\n\t\tif (Dungeon.hero.buff(Mastery.class) != null) {\n\t\t\tDungeon.hero.buff(Mastery.class).onHit(Dungeon.hero, enemy);\n\t\t}\n\n\t\tif (Dungeon.hero.buff(Haste.class) != null) {\n\t\t\tDungeon.hero.buff(Haste.class).onHit(Dungeon.hero, enemy);\n\t\t}\n\n\t\tif (Dungeon.hero.buff(Sniper.class) != null) {\n\t\t\tDungeon.hero.buff(Sniper.class).onHit(Dungeon.hero, enemy);\n\t\t}\n\n\t\tif (Dungeon.hero.buff(Berserk.class) != null) {\n\t\t\tDungeon.hero.buff(Berserk.class).onHit(Dungeon.hero, enemy);\n\t\t}\n\n\t\tif (Dungeon.hero.buff(Tengu.class) != null) {\n\t\t\tDungeon.hero.buff(Tengu.class).onHit(Dungeon.hero, enemy);\n\t\t}\n\n\t\tif (Dungeon.hero.buff(Warrior.class) != null) {\n\t\t\tDungeon.hero.buff(Warrior.class).onHit(Dungeon.hero, enemy);\n\t\t}\n\n\t\tif (Dungeon.hero", "CodeBleu_score": 31.545754269768388}, {"code": "public void hit( Char enemy ){\n\t\tif (enemy == null) return;\n\tif (enemy.isAlive() && !enemy.hasTalent(Talent.CLEAVE)) {\n\t\t//only increment combo if the enemy is alive and the enemy doesn't have cleave\n\t\tcombo++;\n\t\tif (combo > 1) {\n\t\t\t//if the enemy is still alive and the enemy doesn't have cleave, increment the combo count\n\t\t\tcomboTime += (combo - 1) * 0.5f;\n\t\t\tif (enemy.buff(Corruption.class) != null) {\n\t\t\t\t//if the enemy has a corruption buff, increase the combo time by 0.5s per combo point\n\t\t\t\tcomboTime += enemy.buff(Corruption.class).level() * 0.5f;\n\t\t\t}\n\t\t}\n\t}\n\tif (combo > 0) {\n\t\t//if the combo is greater than 0, set the combo timer\n\t\tcomboTimer = 0.5f;\n\t\tif (enemy.isAlive()) {\n\t\t\t//if the enemy is still alive, play the hit sound\n\t\t\tSample.INSTANCE.play(Assets.Sounds.HIT);\n\t\t}\n\t}\n\tif (combo > 1) {\n\t\t//if the combo is greater than 1, trigger the action indicator\n\t\tActionIndicator.show( enemy, ActionIndicator.HIT );\n\t}\n\tif (combo > 2) {\n\t\t//if the combo is greater than 2, trigger the attack indicator\n\t\tAttackIndicator.show( enemy, AttackIndicator.HIT );\n\t}\n\tif (combo > 3) {\n\t\t//if the combo is greater than 3, trigger the buff indicator\n\t\tBuffIndicator.show( enemy, BuffIndicator.HIT );\n\t}\n\tvalidateMasteryCombo();\n\tif (combo > 0) {\n\t\t//if the combo is greater than 0, log the combo count\n\t\tGLog.i( Messages.get(this, \"combo_count\", combo) );\n\t}\n\tif (hero != null) {\n\t\t//if the hero is not null, refresh the hero's buff indicator visually\n\t\thero.sprite.updateBuffs();\n\t}\n}", "CodeBleu_score": 38.35676720046578}]}
{"instance_id": "abf7c664b4dd", "generation_result": [{"code": "public int capacity(){\n\t\tint cap = baseCapacity;\n\tfor (Item item : inventory.items) {\n\t\tif (item instanceof Bag) {\n\t\t\tcap += ((Bag) item).capacityBonus();\n\t\t}\n\t}\n\tif (belongings.weapon != null && belongings.weapon.twoHanded()) {\n\t\tcap -= 1;\n\t}\n\treturn cap;\n}", "CodeBleu_score": 37.44918836810081}, {"code": "public int capacity(){\n\t\tint cap = baseCapacity;\n\tfor (Item item : inventory) {\n\t\tif (item instanceof Bag) {\n\t\t\tcap += ((Bag) item).capacityBonus;\n\t\t}\n\t}\n\tif (cursed) {\n\t\tcap = (int) Math.ceil(cap * 0.5f);\n\t}\n\treturn cap;\n}", "CodeBleu_score": 29.5823987431691}, {"code": "public int capacity(){\n\t\tint cap = baseCapacity;\n\tfor (Item item : inventory) {\n\t\tif (item instanceof Bag) {\n\t\t\tcap += ((Bag)item).capacity();\n\t\t}\n\t}\n\tif (belongings.weapon2 != null) {\n\t\tcap -= belongings.weapon2.capacity();\n\t}\n\treturn cap;\n}", "CodeBleu_score": 32.28276089888897}]}
{"instance_id": "b97e41e092d2", "generation_result": [{"code": "public void updateHT( boolean boostHP ){\n\t\tint newHT = HT.BASE + HT.MOD * level;\n\tfor (Buff buff : buffs) {\n\t\tif (buff instanceof RingOfMight) {\n\t\t\tnewHT += HT.MOD * ((RingOfMight)buff).bonus;\n\t\t}\n\t\tif (buff instanceof ElixirOfMight) {\n\t\t\tnewHT += HT.MOD * ((ElixirOfMight)buff).bonus;\n\t\t}\n\t}\n\tHT.set(newHT);\n\tif (boostHP) {\n\t\tHP += 1;\n\t}\n\tHP = Math.min(HP, HT.get());\n}", "CodeBleu_score": 25.69424952684439}, {"code": "public void updateHT( boolean boostHP ){\n\t\tint ht = HT.BASE;\n\tif (HT.BOOST != 0) {\n\t\tht += HT.BOOST;\n\t}\n\tif (HT.MULTIPLIER != 0) {\n\t\tht *= HT.MULTIPLIER;\n\t}\n\tif (HT.BONUS != 0) {\n\t\tht += HT.BONUS;\n\t}\n\tif (HT.BONUS_MULT != 0) {\n\t\tht *= HT.BONUS_MULT;\n\t}\n\tif (HT.BONUS_MULT_MULT != 0) {\n\t\tht *= HT.BONUS_MULT_MULT;\n\t}\n\n\tif (HT.BONUS_MULT_MULT != 0) {\n\t\tht *= HT.BONUS_MULT_MULT;\n\t}\n\n\tif (HT.BONUS_MULT_MULT != 0) {\n\t\tht *= HT.BONUS_MULT_MULT;\n\t}\n\n\tif (HT.BONUS_MULT_MULT != 0) {\n\t\tht *= HT.BONUS_MULT_MULT;\n\t}\n\n\tif (HT.BONUS_MULT_MULT != 0) {\n\t\tht *= HT.BONUS_MULT_MULT;\n\t}\n\n\tif (HT.BONUS_MULT_MULT != 0) {\n\t\tht *= HT.BONUS_MULT_MULT;\n\t}\n\n\tif (HT.BONUS_MULT_MULT != 0) {\n\t\tht *= HT.BONUS_MULT_MULT;\n\t}\n\n\tif (HT.BONUS_MULT_MULT != 0) {\n\t\tht *= HT.BONUS_MULT_MULT;\n\t}\n\n\tif (HT.BONUS_MULT_MULT != 0) {\n\t\tht *= HT.BONUS_MULT_MULT;\n\t}\n\n\tif (HT.BONUS_MULT_MULT != 0) {\n\t\tht *= HT.BONUS_MULT_MULT;\n\t}\n\n\tif (HT.BONUS_MULT_MULT != 0) {\n\t\tht *= HT.BONUS_MULT_MULT;\n\t}\n\n\tif (HT.BONUS_MULT_MULT", "CodeBleu_score": 9.925237861677271}, {"code": "public void updateHT( boolean boostHP ){\n\t\tHT = (int)Math.round( 10 + 0.1 * level() + 0.05 * level() * level() + 0.05 * level() * level() * level() + 0.05 * level() * level() * level() * level() + 0.05 * level() * level() * level() * level() * level() + 0.1 * level() * level() * level() * level() * level() * level() + 0.1 * level() * level() * level() * level() * level() * level() * level() + 0.05 * level() * level() * level() * level() * level() * level() * level() * level() + 0.05 * level() * level() * level() * level() * level() * level() * level() * level() * level() + 0.05 * level() * level() * level() * level() * level() * level() * level() * level() * level() * level() + 0.05 * level() * level() * level() * level() * level() * level() * level() * level() * level() * level() * level() + 0.05 * level() * level() * level() * level() * level() * level() * level() * level() * level() * level() * level() * level() + 0.05 * level() * level() * level() * level() * level() * level() * level() * level() * level() * level() * level() * level() * level() + 0.05 * level() * level() * level() * level() * level() * level() * level() * level() * level() * level() * level() * level() * level() * level() + 0.05 * level() * level() * level() * level() * level() * level() * level() * level() * level() * level() * level() * level() * level() * level() * level() + 0.05 * level() * level() * level() * level() * level() * level() * level() * level() * level() * level() * level() * level() * level() * level() * level() *", "CodeBleu_score": 4.685024705981515}]}
{"instance_id": "b72bd91544e7", "generation_result": [{"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\tif (enemy == null || wep == null || enemy.isDead() || enemy.alignment == Char.Alignment.ALLY) {\n\t\treturn false;\n\t}\n\n\tif (enemy.alignment == Char.Alignment.ENEMY) {\n\t\tif (wep.level() > 1) {\n\t\t\tGLog.w(Messages.get(this, \"range_warning\"));\n\t\t}\n\t\tif (wep.level() == 1 && enemy.state == Char.State.SLEEPING) {\n\t\t\tGLog.w(Messages.get(this, \"sleep_warning\"));\n\t\t}\n\t}\n\n\tboolean hit = false;\n\tboolean crit = false;\n\tif (enemy.alignment == Char.Alignment.ENEMY) {\n\t\thit = wep.hit(enemy);\n\t\tcrit = wep.crit(enemy);\n\t} else {\n\t\thit = wep.hit(enemy, false);\n\t\tcrit = wep.crit(enemy, false);\n\t}\n\n\tif (hit) {\n\t\twep.thrown(true);\n\t\tif (crit) {\n\t\t\tGLog.w(Messages.get(this, \"crit_success\", enemy.name()));\n\t\t} else {\n\t\t\tGLog.w(Messages.get(this, \"hit_success\", enemy.name()));\n\t\t}\n\t\tif (enemy.alignment == Char.Alignment.ENEMY) {\n\t\t\tBuffIndicator.show(enemy, BuffIndicator.POSITIVE, Messages.get(this, \"hit_success\", enemy.name()));\n\t\t} else {\n\t\t\tBuffIndicator.show(enemy, BuffIndicator.POSITIVE, Messages.get(this, \"hit_success_mimic\", enemy.name()));\n\t\t}\n\t\tif (enemy.alignment == Char.Alignment.ENEMY) {\n\t\t\tenemy.damage( wep.damageRoll() );\n\t\t} else {\n\t\t\tenemy.damage( wep.damageRoll(), false );\n\t\t}\n\t\tif (enemy.isDead()) {\n\t\t\twep.onHit(enemy, true);\n\t\t\twep.hit(enemy, true);\n\t\t\twep.onCrit(enemy, true);\n\t\t\twep.crit(enemy, true);\n\t\t\twep.onKill(enemy);\n\t\t\twep.", "CodeBleu_score": 26.760491939970315}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\tif (enemy == null || enemy.isDead() || enemy.alignment == Char.Alignment.ALLY) {\n\t\treturn false;\n\t}\n\n\tboolean hit = false;\n\tboolean critical = false;\n\tfloat damage = 0;\n\n\t//check if the enemy is a mimic\n\tif (enemy instanceof Mimic) {\n\t\tMimic mimic = (Mimic) enemy;\n\t\t//if the mimic is a boss, check if the character is a duelist or gladiator\n\t\tif (mimic.boss) {\n\t\t\tif (ShatteredPixelDungeon.player.heroClass == HeroClass.DUELIST) {\n\t\t\t\thit = true;\n\t\t\t\tcritical = true;\n\t\t\t\tdamage = (wep.damage(ShatteredPixelDungeon.hero) + 1) * 2;\n\t\t\t}\n\t\t\telse if (ShatteredPixelDungeon.player.heroClass == HeroClass.GLADIATOR) {\n\t\t\t\thit = true;\n\t\t\t\tcritical = true;\n\t\t\t\tdamage = (wep.damage(ShatteredPixelDungeon.hero) + 1) * 3;\n\t\t\t}\n\t\t}\n\t\t//if the mimic is not a boss, check if the character is a warrior\n\t\telse if (ShatteredPixelDungeon.player.heroClass == HeroClass.WARRIOR) {\n\t\t\thit = true;\n\t\t\tcritical = true;\n\t\t\tdamage = wep.damage(ShatteredPixelDungeon.hero);\n\t\t}\n\t}\n\t//if the enemy is not a mimic, check if the character is a gladiator or duelist\n\telse if (ShatteredPixelDungeon.player.heroClass == HeroClass.GLADIATOR || ShatteredPixelDungeon.player.heroClass == HeroClass.DUELIST) {\n\t\thit = true;\n\t\tcritical = true;\n\t\tdamage = wep.damage(ShatteredPixelDungeon.hero);\n\t}\n\n\t//if the attack hits, apply the damage\n\tif (hit) {\n\t\tenemy.damage(damage, wep.element());\n\t\tif (critical) {\n\t\t\tShatteredPixelDungeon.scene().add(new FloatingText(damage, enemy.x, enemy.y, 0xFFFFFF));\n\t\t", "CodeBleu_score": 28.186467650100045}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\tif (enemy == null) {\n\t\treturn false;\n\t}\n\tif (enemy.alignment == Char.Alignment.ENEMY) {\n\t\tif (enemy.alignment != wep.alignment) {\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\tif (enemy.alignment != Char.Alignment.NEUTRAL) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (enemy.invisible) {\n\t\treturn false;\n\t}\n\tif (enemy.paralyzed) {\n\t\treturn false;\n\t}\n\tif (enemy.frostburn) {\n\t\treturn false;\n\t}\n\tif (enemy.isDead()) {\n\t\treturn false;\n\t}\n\tif (enemy.isInvulnerable()) {\n\t\treturn false;\n\t}\n\tif (enemy.isSummoned()) {\n\t\treturn false;\n\t}\n\tif (enemy.isSummoned() && enemy.alignment == Char.Alignment.ENEMY) {\n\t\treturn false;\n\t}\n\tif (wep.ammo <= 0) {\n\t\treturn false;\n\t}\n\n\t//check if the enemy is a mimic\n\tif (enemy.alignment == Char.Alignment.NEUTRAL) {\n\t\tif (enemy.isMimic()) {\n\t\t\t//if the mimic is a summoned one, it will be handled by the summoner\n\t\t\tif (!enemy.isSummoned()) {\n\t\t\t\t//if the mimic is a friendly mimic, it will be handled by the summoner\n\t\t\t\tif (enemy.mimic.alignment == Char.Alignment.FRIENDLY) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t//if the mimic is a boss, it will be handled by the summoner\n\t\t\t\tif (enemy.mimic.boss) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t//if the mimic is a boss, it will be handled by the summoner\n\t\t\t\tif (enemy.mimic.alignment == Char.Alignment.ENEMY) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t//if the mimic is a boss, it will be handled by the summoner\n\t\t\t\tif (enemy.mimic.alignment == Char.Alignment.NEUTRAL) {", "CodeBleu_score": 17.16988696670299}]}
{"instance_id": "f265b39b6677", "generation_result": [{"code": "public int attackSkill( Char target ){\n\t\tfloat skill = this.skills.get( Skill.ATTACK ).level();\n\n\t//Weapon\n\tif (weapon != null) {\n\t\tskill += weapon.attackSkill();\n\t}\n\n\t//Accuracy\n\tfloat accuracy = 1f;\n\tif (target != null) {\n\t\tfloat dist = (float)Math.sqrt( Math.pow(this.pos.x - target.pos.x, 2) + Math.pow(this.pos.y - target.pos.y, 2) );\n\t\taccuracy = (1f - dist/GameMath.dst(this.pos, target.pos));\n\t}\n\tskill *= accuracy;\n\n\t//Buffs\n\tif (buff( Berserk.class ) != null) {\n\t\tskill *= 1.5f;\n\t}\n\tif (buff( Momentum.class ) != null) {\n\t\tskill *= 1.5f;\n\t}\n\tif (buff( Regeneration.class ) != null) {\n\t\tskill *= 1.5f;\n\t}\n\tif (buff( HoldFast.class ) != null) {\n\t\tskill *= 1.5f;\n\t}\n\tif (buff( Barkskin.class ) != null) {\n\t\tskill *= 1.5f;\n\t}\n\tif (buff( Bless.class ) != null) {\n\t\tskill *= 1.5f;\n\t}\n\tif (buff( Barrier.class ) != null) {\n\t\tskill *= 1.5f;\n\t}\n\tif (buff( SnipersMark.class ) != null) {\n\t\tskill *= 1.5f;\n\t}\n\tif (buff( Charm.class ) != null) {\n\t\tskill *= 1.5f;\n\t}\n\tif (buff( Recharging.class ) != null) {\n\t\tskill *= 1.5f;\n\t}\n\tif (buff( Invisibility.class ) != null) {\n\t\tskill *= 1.5f;\n\t}\n\tif (buff( Vertigo.class ) != null) {\n\t\tskill *= 1.5f;\n\t}\n\tif (buff( Drowsy.class ) != null) {\n\t\t", "CodeBleu_score": 30.328845490946854}, {"code": "public int attackSkill( Char target ){\n\t\tint skill = 0;\n\n\tif( target.buff( Berserk.class ) != null ) {\n\t\tskill += 15;\n\t}\n\n\tif( target.buff( Momentum.class ) != null ) {\n\t\tskill += 10;\n\t}\n\n\tif( target.buff( Regeneration.class ) != null ) {\n\t\tskill += 5;\n\t}\n\n\tif( target.buff( Recharging.class ) != null ) {\n\t\tskill += 10;\n\t}\n\n\tif( target.buff( Vertigo.class ) != null ) {\n\t\tskill += 10;\n\t}\n\n\tif( target.buff( Barkskin.class ) != null ) {\n\t\tskill += 5;\n\t}\n\n\tif( target.buff( Charm.class ) != null ) {\n\t\tskill += 5;\n\t}\n\n\tif( target.buff( Hunger.class ) != null ) {\n\t\tskill += 10;\n\t}\n\n\tif( target.buff( SnipersMark.class ) != null ) {\n\t\tskill += 10;\n\t}\n\n\tif( target.buff( AdrenalineSurge.class ) != null ) {\n\t\tskill += 10;\n\t}\n\n\tif( target.buff( Barrier.class ) != null ) {\n\t\tskill += 10;\n\t}\n\n\tif( target.buff( MonkEnergy.class ) != null ) {\n\t\tskill += 10;\n\t}\n\n\tif( target.buff( Drowsy.class ) != null ) {\n\t\tskill += 10;\n\t}\n\n\tif( target.buff( Invisibility.class ) != null ) {\n\t\tskill += 10;\n\t}\n\n\tif( target.buff( LostInventory.class ) != null ) {\n\t\tskill += 10;\n\t}\n\n\tif( target.buff( MindVision.class ) != null ) {\n\t\tskill += 10;\n\t}\n\n\tif( target.buff( Awareness.class ) != null ) {\n\t\tskill += 10;\n\t}\n\n\tif( target.buff( Levitation.class ) != null )", "CodeBleu_score": 9.67076416203933}, {"code": "public int attackSkill( Char target ){\n\t\tint skill = 0;\n\t//Weapon\n\tif (belongings.weapon != null) {\n\t\tskill += belongings.weapon.attackSkill(this);\n\t}\n\t//Buffs\n\tfor (Buff buff : buffs) {\n\t\tif (buff.attackSkill != 0) {\n\t\t\tskill += buff.attackSkill;\n\t\t}\n\t}\n\t//Accuracy\n\tskill += accuracy();\n\t//Proximity\n\tif (target.alignment == Alignment.ENEMY) {\n\t\tskill += 2;\n\t} else if (target.alignment == Alignment.FRIEND) {\n\t\tskill -= 2;\n\t}\n\treturn skill;\n}", "CodeBleu_score": 20.91455993573894}]}
{"instance_id": "9e50c198348d", "generation_result": [{"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t\tval start = System.nanoTime()\n\trepeat(repeats) { operation() }\n\tval end = System.nanoTime()\n\tval duration = end - start\n\ttime.add(duration)\n\tif (printResults) println(\"Profiling: $operation took ${duration / 1000000} ms\")\n}", "CodeBleu_score": 49.931966322604644}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t\tval timer = Gdx.graphics.rawDeltaTime\n\tval startTime = System.nanoTime()\n\trepeat(repeats) { operation() }\n\tval endTime = System.nanoTime()\n\tval elapsedTime = (endTime - startTime) / 1e9\n\ttime.put(timer, elapsedTime / repeats)\n\tif (printResults) println(\"Profiling results: $time\")\n}", "CodeBleu_score": 48.57702514284846}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t//  val counter = PerformanceCounter()\n  val start = System.nanoTime()\n  repeat(repeats) {\n    operation()\n  }\n  val end = System.nanoTime()\n  val duration = end - start\n  val mean = duration / repeats\n  val fps = 1_000_000_000.0 / mean\n  time.mean.addValue(mean)\n  time.fps.addValue(fps)\n  if (printResults) {\n    println(\"Profile results for $operation:\")\n    println(\"  Duration: ${duration / 1_000_000}ms\")\n    println(\"  Mean: ${mean / 1_000_000}ms\")\n    println(\"  FPS: $fps\")\n  }\n}", "CodeBleu_score": 49.61369756089709}]}
{"instance_id": "5f6e11998a1f", "generation_result": [{"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t\tcontract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }\n\tval tree = BehaviorTree(rootTask, blackboard)\n\ttree.init()\n\treturn tree\n}", "CodeBleu_score": 80.78939363993626}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t\tcontract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }\n\tval tree = BehaviorTree(rootTask, blackboard)\n\ttree.init()\n\treturn tree\n}", "CodeBleu_score": 80.78939363993626}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t\tcontract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }\n\tval tree = BehaviorTree(rootTask, blackboard)\n\ttree.init()\n\treturn tree\n}", "CodeBleu_score": 80.78939363993626}]}
{"instance_id": "cdda12e45fb9", "generation_result": [{"code": "onPointerOver (){\n\t\t// Update the selected cell coordinates in the map\n\tselectedCell.x = Math.floor(this.x / cellSize);\n\tselectedCell.y = Math.floor(this.y / cellSize);\n\t// Highlight the current cell and its related cells by changing their tint color\n\tif (selectedCell.x > 0 && selectedCell.y > 0 && selectedCell.x < cellsX && selectedCell.y < cellsY) {\n\t\t// Highlight the current cell\n\t\tcurrentCell.tint = 0xffffff;\n\t\t// Highlight the current cell's heightmap polygons\n\t\tif (currentCell.heightmap) {\n\t\t\tfor (var i = 0; i < currentCell.heightmap.length; i++) {\n\t\t\t\tcurrentCell.heightmap[i].alpha = 0.5;\n\t\t\t}\n\t\t}\n\t\t// Highlight the current cell's related cells\n\t\tif (currentCell.related) {\n\t\t\tfor (var i = 0; i < currentCell.related.length; i++) {\n\t\t\t\tcurrentCell.related[i].tint = 0xffffff;\n\t\t\t}\n\t\t}\n\t\t// Highlight the current cell's surrounding cells\n\t\tif (currentCell.surrounding) {\n\t\t\tfor (var i = 0; i < currentCell.surrounding.length; i++) {\n\t\t\t\tcurrentCell.surrounding[i].tint = 0xffffff;\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 40.08963279590674}, {"code": "onPointerOver (){\n\t\t// Update the selected cell coordinates in the map\n\tselectedCell = this.position;\n\t// Highlight the current cell and its related cells by changing their tint color\n\tthis.tint = 0xffffff;\n\t// Adjust the transparency of the cell's heightmap polygons if they exist\n\tif (this.heightmap) {\n\t\tthis.heightmap.alpha = 0.5;\n\t}\n\t// Adjust the transparency of the cell's water polygon if it exists\n\tif (this.water) {\n\t\tthis.water.alpha = 0.5;\n\t}\n\t// Adjust the transparency of the cell's water polygon if it exists\n\tif (this.road) {\n\t\tthis.road.alpha = 0.5;\n\t}\n\t// Adjust the transparency of the cell's building polygon if it exists\n\tif (this.building) {\n\t\tthis.building.alpha = 0.5;\n\t}\n\t// Adjust the transparency of the cell's building polygon if it exists\n\tif (this.unit) {\n\t\tthis.unit.alpha = 0.5;\n\t}\n\t// Adjust the transparency of the cell's building polygon if it exists\n\tif (this.unit2) {\n\t\tthis.unit2.alpha = 0.5;\n\t}\n\t// Adjust the transparency of the cell's building polygon if it exists\n\tif (this.unit3) {\n\t\tthis.unit3.alpha = 0.5;\n\t}\n\t// Adjust the transparency of the cell's building polygon if it exists\n\tif (this.unit4) {\n\t\tthis.unit4.alpha = 0.5;\n\t}\n\t// Adjust the transparency of the cell's building polygon if it exists\n\tif (this.unit5) {\n\t\tthis.unit5.alpha = 0.5;\n\t}\n\t// Adjust the transparency of the cell's building polygon if it exists\n\tif (this.unit6) {\n\t\tthis.unit6.alpha = 0.5;\n\t}\n\t// Adjust the transparency of the cell's building polygon if it exists\n\tif (this.unit7) {\n\t\tthis.unit7.alpha = 0.5;\n\t}\n\t// Adjust the transparency of the cell's", "CodeBleu_score": 16.72574225205559}, {"code": "onPointerOver (){\n\t\t// If the cell is not already selected, update the selected cell coordinates and highlight the current cell.\n\tif (selectedCell != this.cell) {\n\t\tselectedCell = this.cell;\n\t\tcurrentCell.tint = 0xffffff;\n\t\tthis.tint = 0x00ff00;\n\n\t\t// If the cell's heightmap polygons exist, adjust their transparency.\n\t\tif (this.cell.heightmap) {\n\t\t\tfor (var i = 0; i < this.cell.heightmap.length; i++) {\n\t\t\t\tthis.cell.heightmap[i].alpha = 1;\n\t\t\t}\n\t\t}\n\n\t\t// If the cell's related cells exist, highlight them.\n\t\tif (this.cell.related) {\n\t\t\tfor (var i = 0; i < this.cell.related.length; i++) {\n\t\t\t\tthis.cell.related[i].tint = 0x00ff00;\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 25.63296671553025}]}
{"instance_id": "850931ce3401", "generation_result": [{"code": "getTrafficDensity (){\n\t\tvar density = null;\n\tvar lightThreshold = 0.1;\n\tvar heavyThreshold = 0.2;\n\tvar currentTraffic = this.getTraffic();\n\tif (currentTraffic > heavyThreshold) {\n\t\tdensity = 'heavy';\n\t} else if (currentTraffic > lightThreshold) {\n\t\tdensity = 'light';\n\t}\n\treturn density;\n}", "CodeBleu_score": 23.202056536588465}, {"code": "getTrafficDensity (){\n\t\tlet density = null;\n\n\tif (this.trafficDensity === 'light' || this.trafficDensity === 'heavy') {\n\t\treturn density;\n\t}\n\n\tif (this.trafficDensity === 'moderate') {\n\t\tif (this.trafficDensityValue >= this.trafficDensityThresholds.heavy) {\n\t\t\tdensity = 'heavy';\n\t\t} else if (this.trafficDensityValue >= this.trafficDensityThresholds.light) {\n\t\t\tdensity = 'light';\n\t\t}\n\t} else if (this.trafficDensity === 'severe') {\n\t\tif (this.trafficDensityValue >= this.trafficDensityThresholds.severe) {\n\t\t\tdensity = 'severe';\n\t\t} else if (this.trafficDensityValue >= this.trafficDensityThresholds.moderate) {\n\t\t\tdensity = 'moderate';\n\t\t} else if (this.trafficDensityValue >= this.trafficDensityThresholds.light) {\n\t\t\tdensity = 'light';\n\t\t}\n\t}\n\n\treturn density;\n}", "CodeBleu_score": 17.1797759735184}, {"code": "getTrafficDensity (){\n\t\tconst light = 100;\n\tconst heavy = 200;\n\tconst current = this.trafficDensity;\n\tif (current > heavy) {\n\t\treturn 'heavy';\n\t} else if (current > light) {\n\t\treturn 'light';\n\t} else {\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 26.185036637787075}]}
{"instance_id": "5958478bf873", "generation_result": [{"code": "restart: function (){\n\t\tvar currentValue = this.getCurrentValue();\n\tif (currentValue < this.lightThreshold) {\n\t\treturn null;\n\t} else if (currentValue < this.heavyThreshold) {\n\t\treturn 'light';\n\t} else {\n\t\treturn 'heavy';\n\t}\n}", "CodeBleu_score": 22.388548447581975}, {"code": "restart: function (){\n\t\tvar currentValue = this.get('currentValue');\n\tif (currentValue < this.get('lightThreshold')) {\n\t\treturn null;\n\t} else if (currentValue < this.get('heavyThreshold')) {\n\t\treturn 'light';\n\t} else {\n\t\treturn 'heavy';\n\t}\n}", "CodeBleu_score": 22.617885962185053}, {"code": "restart: function (){\n\t\tvar currentValue = this.getCurrentValue();\n\tif (currentValue < this.getLightThreshold()) {\n\t\treturn null;\n\t} else if (currentValue < this.getHeavyThreshold()) {\n\t\treturn 'light';\n\t} else {\n\t\treturn 'heavy';\n\t}\n}", "CodeBleu_score": 22.524448367047007}]}
{"instance_id": "d2441e586d58", "generation_result": [{"code": "flash: function (color, duration, force, alpha){\n\t\tif (this.is('flashing')) {\n\t\tif (force)\n\t\t\tthis.clear('flashing');\n\t\telse\n\t\t\treturn false;\n\t}\n\tif (!color)\n\t\tcolor = 'black';\n\tif (!duration)\n\t\tduration = 1000;\n\tif (!alpha)\n\t\talpha = 1;\n\tthis.set('flashing', {\n\t\tcolor: color,\n\t\tduration: duration,\n\t\talpha: alpha\n\t});\n\tthis.draw('rect', {\n\t\tfill: color,\n\t\talpha: alpha\n\t});\n\treturn true;\n}", "CodeBleu_score": 36.50306562263663}, {"code": "flash: function (color, duration, force, alpha){\n\t\t// check for required parameters\n\tif (typeof color === 'undefined') {\n\t\treturn false;\n\t}\n\t// set default values for optional parameters\n\tduration = typeof duration !== 'undefined' ? duration : 1000;\n\tforce = typeof force !== 'undefined' ? force : false;\n\talpha = typeof alpha !== 'undefined' ? alpha : 0.5;\n\t// clear any existing effect\n\tthis.clearEffects();\n\t// draw the flash effect\n\tthis.drawRect(color, 0, 0, this.width, this.height, alpha);\n\t// set the effect duration\n\tthis.setDuration(duration, force);\n\t// return success\n\treturn true;\n}", "CodeBleu_score": 43.634133499153094}, {"code": "flash: function (color, duration, force, alpha){\n\t\tif (!color) {\n\t\treturn false;\n\t}\n\tif (typeof color === \"string\") {\n\t\tcolor = this.parseColor(color);\n\t}\n\tif (!duration) {\n\t\tduration = 100;\n\t}\n\tif (!force && this.effect) {\n\t\treturn false;\n\t}\n\tthis.effect = {\n\t\tcolor: color,\n\t\tduration: duration,\n\t\tstart: this.now(),\n\t\talpha: alpha\n\t};\n\tthis.draw();\n\treturn true;\n}", "CodeBleu_score": 34.14596823341316}]}
{"instance_id": "48b26381d975", "generation_result": [{"code": "createFluidLayer: function (children, addToWorld){\n\t\tvar layer = new game.FlexLayer();\n\tlayer.fluid = true;\n\tthis.layers.push(layer);\n\tif (addToWorld) {\n\t\tthis.world.add(layer);\n\t}\n\tif (children) {\n\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\tlayer.add(children[i]);\n\t\t}\n\t}\n\treturn layer;\n}", "CodeBleu_score": 35.14100763102814}, {"code": "createFluidLayer: function (children, addToWorld){\n\t\tvar layer = new Box2D.Dynamics.b2FluidLayer();\n\tlayer.SetVelocity(new Box2D.Common.Math.b2Vec2(0, 0));\n\tlayer.SetDensity(0);\n\tlayer.SetDiffusion(0);\n\tlayer.SetViscosity(0);\n\tlayer.SetVorticity(0);\n\tlayer.SetEmissive(0);\n\tlayer.SetTemperature(0);\n\tlayer.SetDamping(0);\n\tlayer.SetGravityScale(1);\n\tlayer.SetSubmerged(false);\n\tlayer.SetForceOnVelocityChange(0);\n\tlayer.SetParticleRadius(0.2);\n\tlayer.SetParticleDiameter(0.2);\n\tlayer.SetParticleDensity(0.2);\n\tlayer.SetParticleMaxCount(1000);\n\tlayer.SetParticleMaxDistance(0.1);\n\tlayer.SetParticleMaxRadius(0.1);\n\tlayer.SetParticleGravityScale(1);\n\tlayer.SetParticleSpeedLimit(0);\n\tlayer.SetParticleColor(new Box2D.Common.b2Color(1, 1, 1, 1));\n\tlayer.SetParticleFlags(0);\n\tlayer.SetParticleUserData(null);\n\tlayer.SetParticleDestroyCallback(null);\n\tlayer.SetParticleQueryCallback(null);\n\tlayer.SetParticleQueryCallbackUserData(null);\n\tlayer.SetParticleCreateCallback(null);\n\tlayer.SetParticleCreateCallbackUserData(null);\n\tlayer.SetParticleUpdateCallback(null);\n\tlayer.SetParticleUpdateCallbackUserData(null);\n\tlayer.SetParticleDestroyCallback(null);\n\tlayer.SetParticleDestroyCallbackUserData(null);\n\tlayer.SetParticlePairCallback(null);\n\tlayer.SetParticlePairCallbackUserData(null);\n\tlayer.SetParticlePairCallback(null);\n\tlayer.SetParticlePairCallbackUserData(null);\n\tlayer.SetParticlePairCallback(null);\n\tlayer.SetParticlePairCallbackUserData(null);\n\tlayer.SetParticlePairCallback(null);\n\tlayer.SetParticlePairCallbackUserData(null);\n\tlayer.SetParticlePairCallback(null);\n\tlayer.SetParticlePairCallbackUserData(null);", "CodeBleu_score": 13.078928267238071}, {"code": "createFluidLayer: function (children, addToWorld){\n\t\tvar layer = new Box2D.Dynamics.b2FluidLayer();\n\tlayer.SetVelocity(this.velocity);\n\tlayer.SetDensity(this.density);\n\tlayer.SetViscosity(this.viscosity);\n\tlayer.SetSurfaceTension(this.surfaceTension);\n\tlayer.SetDiffusion(this.diffusion);\n\tlayer.SetForceOnVelocity(this.forceOnVelocity);\n\tlayer.SetForceOnDensity(this.forceOnDensity);\n\tlayer.SetGravity(this.gravity);\n\tlayer.SetViscousDrag(this.viscousDrag);\n\tlayer.SetVorticity(this.vorticity);\n\tlayer.SetDiffuseThreshold(this.diffuseThreshold);\n\tlayer.SetDiffuseMultiplier(this.diffuseMultiplier);\n\tlayer.SetParticleLifetime(this.particleLifetime);\n\tlayer.SetParticleDistance(this.particleDistance);\n\tlayer.SetDestructionByAge(this.destructionByAge);\n\tlayer.SetMaxParticleCount(this.maxParticleCount);\n\tlayer.SetDestructionByLifetime(this.destructionByLifetime);\n\tlayer.SetLifetimeGranularity(this.lifetimeGranularity);\n\tlayer.SetDestructionByDistance(this.destructionByDistance);\n\tlayer.SetParticleDiameter(this.particleDiameter);\n\tlayer.SetParticleDensity(this.particleDensity);\n\tlayer.SetParticleMaxCount(this.particleMaxCount);\n\tlayer.SetParticleMaxRadius(this.particleMaxRadius);\n\tlayer.SetParticleMinRadius(this.particleMinRadius);\n\tlayer.SetParticleColor(this.particleColor);\n\tlayer.SetParticleFlags(this.particleFlags);\n\tlayer.SetParticleGroupFlags(this.particleGroupFlags);\n\tlayer.SetParticleGroupIndex(this.particleGroupIndex);\n\tlayer.SetParticleGroupUserData(this.particleGroupUserData);\n\tlayer.SetParticleChildRadius(this.particleChildRadius);\n\tlayer.SetParticleChildDensity(this.particleChildDensity);\n\tlayer.SetParticleChildColor(this.particleChildColor);\n\tlayer.SetParticleChildFlags(this.particleChildFlags);\n\tlayer.SetParticleChildGroupFlags(this.particleChildGroupFlags);\n", "CodeBleu_score": 16.586177769006177}]}
{"instance_id": "624c9e2eb19f", "generation_result": [{"code": "createFullLayer: function (children){\n\t\tvar layer = new Phaser.FlexLayer(this, this.world.width, this.world.height, this.world.bounds, this.world.scale);\n\tthis.world.add(layer);\n\tthis.layers.push(layer);\n\tif (children) {\n\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\tlayer.add(children[i]);\n\t\t}\n\t}\n\treturn layer;\n}", "CodeBleu_score": 52.54040590045568}, {"code": "createFullLayer: function (children){\n\t\tvar layer = new Phaser.FlexLayer(this, this.game.world, this.worldBounds, this.worldScale);\n\tthis.layers.push(layer);\n\tif (children) {\n\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\tlayer.addChild(children[i]);\n\t\t}\n\t}\n\treturn layer;\n}", "CodeBleu_score": 52.5306399420945}, {"code": "createFullLayer: function (children){\n\t\tvar layer = new Phaser.FlexLayer(this.game, this.game.world, this.game.stage.bounds, this.scale);\n\tthis.game.world.add(layer);\n\tthis.layers.push(layer);\n\n\tif (children) {\n\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\tlayer.add(children[i]);\n\t\t}\n\t}\n\n\treturn layer;\n}", "CodeBleu_score": 55.646027452099304}]}
{"instance_id": "1c7529bca3ce", "generation_result": [{"code": "crop: function (rect, copy){\n\t\tif (rect === undefined) {\n\t\tthis.cropRect = null;\n\t\tthis.resetFrame();\n\t} else {\n\t\tif (this.cropRect === null) {\n\t\t\tthis.cropRect = new fabric.Rect({\n\t\t\t\twidth: rect.width,\n\t\t\t\theight: rect.height,\n\t\t\t\tleft: rect.left,\n\t\t\t\ttop: rect.top,\n\t\t\t\tfill: this.fill,\n\t\t\t\topacity: this.opacity,\n\t\t\t\tstroke: this.stroke,\n\t\t\t\tstrokeWidth: this.strokeWidth,\n\t\t\t\tstrokeDashArray: this.strokeDashArray,\n\t\t\t\tstrokeLineCap: this.strokeLineCap,\n\t\t\t\tstrokeDashOffset: this.strokeDashOffset,\n\t\t\t\tstrokeLineJoin: this.strokeLineJoin,\n\t\t\t\tstrokeMiterLimit: this.strokeMiterLimit,\n\t\t\t\toriginX: 'left',\n\t\t\t\toriginY: 'top'\n\t\t\t});\n\t\t\tthis.canvas.add(this.cropRect);\n\t\t} else {\n\t\t\tthis.cropRect.set({\n\t\t\t\twidth: rect.width,\n\t\t\t\theight: rect.height,\n\t\t\t\tleft: rect.left,\n\t\t\t\ttop: rect.top\n\t\t\t});\n\t\t}\n\t\tif (copy) {\n\t\t\tthis.updateCrop();\n\t\t} else {\n\t\t\tthis.resetFrame();\n\t\t}\n\t}\n}", "CodeBleu_score": 33.19112425071903}, {"code": "crop: function (rect, copy){\n\t\tif (rect) {\n\t\tthis.cropRect = rect;\n\t\tthis.cropCopy = copy;\n\t\tthis.updateCrop();\n\t} else {\n\t\tthis.cropRect = undefined;\n\t\tthis.cropCopy = undefined;\n\t\tthis.resetFrame();\n\t}\n}", "CodeBleu_score": 18.000315702428203}, {"code": "crop: function (rect, copy){\n\t\tif (rect) {\n\t\tif (copy) {\n\t\t\tthis.cropRect = new fabric.util.Object.extend(rect);\n\t\t}\n\t\telse {\n\t\t\tthis.cropRect = rect;\n\t\t}\n\t\tthis.updateCrop();\n\t}\n\telse {\n\t\tthis.resetCrop();\n\t}\n}", "CodeBleu_score": 27.599878734355134}]}
{"instance_id": "d767b9ea9212", "generation_result": [{"code": "move: function (x, y, wrap){\n\t\tif (wrap) {\n\t\tthis.moveH(x, wrap);\n\t\tthis.moveV(y, wrap);\n\t} else {\n\t\tthis.moveH(x);\n\t\tthis.moveV(y);\n\t}\n\treturn this;\n}", "CodeBleu_score": 41.34023019273545}, {"code": "move: function (x, y, wrap){\n\t\tif (x) {\n\t\tthis.moveH(x, wrap);\n\t}\n\tif (y) {\n\t\tthis.moveV(y, wrap);\n\t}\n\treturn this;\n}", "CodeBleu_score": 51.684474181262274}, {"code": "move: function (x, y, wrap){\n\t\tif (x) {\n\t\tthis.moveH(x, wrap);\n\t}\n\tif (y) {\n\t\tthis.moveV(y, wrap);\n\t}\n\treturn this;\n}", "CodeBleu_score": 51.684474181262274}]}
{"instance_id": "c7cf015114f3", "generation_result": [{"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\n}", "CodeBleu_score": 2.220777169396903}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\n}", "CodeBleu_score": 2.220777169396903}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\n}", "CodeBleu_score": 2.220777169396903}]}
{"instance_id": "e0294cb83ca3", "generation_result": [{"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n}", "CodeBleu_score": 5.476186467129299}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n}", "CodeBleu_score": 5.476186467129299}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n}", "CodeBleu_score": 5.476186467129299}]}
{"instance_id": "2fca91787d6c", "generation_result": [{"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\tif (cull === undefined) { cull = true; }\n\n\tvar context = this.context;\n\n\tif (cull) {\n\t\t//  Check if the face is facing away from the camera before drawing it\n\t\tvar v1 = new Phaser.Point(points[0], points[1]);\n\t\tvar v2 = new Phaser.Point(points[2], points[3]);\n\t\tvar v3 = new Phaser.Point(points[4], points[5]);\n\n\t\tvar normal = this.normal(v1, v2, v3);\n\n\t\tif (normal.dot(this.camera.worldView.z) > 0) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tcontext.beginPath();\n\tcontext.moveTo(points[0], points[1]);\n\tcontext.lineTo(points[2], points[3]);\n\tcontext.lineTo(points[4], points[5]);\n\tcontext.lineTo(points[0], points[1]);\n\tcontext.closePath();\n\n\tthis.dirty = true;\n\n}", "CodeBleu_score": 35.85938000628921}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\tif (cull) {\n\t\tvar normal = this.calculateTriangleNormal(points);\n\t\tvar cameraNormal = this.game.camera.getNormal();\n\t\tvar dot = normal.dot(cameraNormal);\n\t\tif (dot < 0) {\n\t\t\treturn;\n\t\t}\n\t}\n\tthis.drawPolygon(points);\n}", "CodeBleu_score": 16.899264966427115}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\tif (cull) {\n\t\tvar normal = new Phaser.Vec2(0, 0);\n\t\tnormal.setTo(points[1].x - points[0].x, points[1].y - points[0].y);\n\t\tnormal.normalize();\n\t\tvar cameraNormal = new Phaser.Vec2(0, 0);\n\t\tcameraNormal.setTo(this.game.camera.x - points[0].x, this.game.camera.y - points[0].y);\n\t\tcameraNormal.normalize();\n\t\tvar dot = cameraNormal.dot(normal);\n\t\tif (dot < 0) {\n\t\t\treturn;\n\t\t}\n\t}\n\tthis.drawPolygon(points);\n}", "CodeBleu_score": 34.53614761710506}]}
{"instance_id": "5d227ea7f97b", "generation_result": [{"code": "checkVideoProgress: function (){\n\t\tif (this.video.readyState === this.video.HAVE_ENOUGH_DATA) {\n\t\tthis.video.pause();\n\t\tthis.video.currentTime = 0;\n\t\tthis.video.play();\n\t\tthis.video.onseeked = null;\n\t\tthis.video.onended = null;\n\t\tthis.video.onplaying = null;\n\t\tthis.video.onpause = null;\n\t\tthis.video.ontimeupdate = null;\n\t\tthis.video.onwaiting = null;\n\t\tthis.video.onloadedmetadata = null;\n\t\tthis.video.onprogress = null;\n\t\tthis.video.oncanplay = null;\n\t\tthis.video.oncanplaythrough = null;\n\t\tthis.video.onloadeddata = null;\n\t\tthis.video.onloadedmetadata = null;\n\t\tthis.video.oncanplay = null;\n\t\tthis.video.oncanplaythrough = null;\n\t\tthis.video.onloadeddata = null;\n\t\tthis.video.onloadedmetadata = null;\n\t\tthis.video.oncanplay = null;\n\t\tthis.video.oncanplaythrough = null;\n\t\tthis.video.onloadeddata = null;\n\t\tthis.video.onloadedmetadata = null;\n\t\tthis.video.oncanplay = null;\n\t\tthis.video.oncanplaythrough = null;\n\t\tthis.video.onloadeddata = null;\n\t\tthis.video.onloadedmetadata = null;\n\t\tthis.video.oncanplay = null;\n\t\tthis.video.oncanplaythrough = null;\n\t\tthis.video.onloadeddata = null;\n\t\tthis.video.onloadedmetadata = null;\n\t\tthis.video.oncanplay = null;\n\t\tthis.video.oncanplaythrough = null;\n\t\tthis.video.onloadeddata = null;\n\t\tthis.video.onloadedmetadata = null;\n\t\tthis.video.oncanplay = null;\n\t\tthis.video.oncanplaythrough = null;\n\t\tthis.video.onloadeddata = null;\n\t\tthis.video.onloadedmetadata = null;\n\t\tthis.video.oncanplay = null;\n\t\tthis", "CodeBleu_score": 16.012223280987108}, {"code": "checkVideoProgress: function (){\n\t\tif (this.video.readyState === this.video.HAVE_ENOUGH_DATA) {\n\t\tthis.video.pause();\n\t\tthis.video.currentTime = 0;\n\t\tthis.video.play();\n\t\tthis.texture = new THREE.Texture(this.video);\n\t\tthis.texture.minFilter = THREE.LinearFilter;\n\t\tthis.texture.magFilter = THREE.LinearFilter;\n\t\tthis.texture.format = THREE.RGBFormat;\n\t\tthis.texture.needsUpdate = true;\n\t\tthis.material.map = this.texture;\n\t\tthis.material.needsUpdate = true;\n\t\tif (this.autoplay) {\n\t\t\tthis.play();\n\t\t}\n\t\tif (this.onLoadCallback) {\n\t\t\tthis.onLoadCallback();\n\t\t}\n\t} else if (this.video.readyState === this.video.HAVE_NOTHING) {\n\t\tthis.retryCount++;\n\t\tif (this.retryCount > this.maxRetries) {\n\t\t\tconsole.warn('WebGLRenderer: Video texture failed to load');\n\t\t\tthis.retryCount = 0;\n\t\t\tthis.state = THREE.VideoTexture.Error;\n\t\t\treturn;\n\t\t}\n\t\tsetTimeout(this.checkVideoProgress, 1000);\n\t}\n}", "CodeBleu_score": 41.74322830646305}, {"code": "checkVideoProgress: function (){\n\t\tif (this.video.readyState === this.video.HAVE_ENOUGH_DATA) {\n\t\tthis.video.pause();\n\t\tthis.video.currentTime = this.videoStartTime;\n\t\tthis.video.play();\n\t\tthis.video.addEventListener('ended', this.videoEnded, false);\n\t\tthis.video.addEventListener('timeupdate', this.videoTimeUpdate, false);\n\t\tthis.video.addEventListener('error', this.videoError, false);\n\t\tthis.video.addEventListener('play', this.videoPlay, false);\n\t\tthis.video.addEventListener('pause', this.videoPause, false);\n\t\tthis.video.addEventListener('seeking', this.videoSeeking, false);\n\t\tthis.video.addEventListener('seeked', this.videoSeeked, false);\n\t\tthis.video.addEventListener('ratechange', this.videoRateChange, false);\n\t\tthis.video.addEventListener('volumechange', this.videoVolumeChange, false);\n\t\tthis.video.addEventListener('loadedmetadata', this.videoLoadedMetadata, false);\n\t\tthis.video.addEventListener('loadeddata', this.videoLoadedData, false);\n\t\tthis.video.addEventListener('canplay', this.videoCanPlay, false);\n\t\tthis.video.addEventListener('canplaythrough', this.videoCanPlayThrough, false);\n\t\tthis.video.addEventListener('playing', this.videoPlaying, false);\n\t\tthis.video.addEventListener('waiting', this.videoWaiting, false);\n\t\tthis.video.addEventListener('emptied', this.videoEmptied, false);\n\t\tthis.video.addEventListener('stalled', this.videoStalled, false);\n\t\tthis.video.addEventListener('suspend', this.videoSuspend, false);\n\t\tthis.video.addEventListener('abort', this.videoAbort, false);\n\t\tthis.video.addEventListener('durationchange', this.videoDurationChange, false);\n\t\tthis.video.addEventListener('loadedmetadata', this.videoLoadedMetadata, false);\n\t\tthis.video.addEventListener('loadeddata', this.videoLoadedData, false);\n\t\tthis.video.addEventListener('canplay', this.videoCanPlay, false);\n\t\tthis.video.addEventListener('canplaythrough', this.videoCanPlayThrough, false);\n\t\tthis.video.addEventListener('playing', this.", "CodeBleu_score": 16.160479571644576}]}
{"instance_id": "e48c3c53f00a", "generation_result": [{"code": "start: function (event, value){\n\t\tif (!this.isDown) {\n\t\tthis.isDown = true;\n\t\tthis.value = value;\n\t\tthis.event = event;\n\t\tthis.timeDown = this.timeUp = this.time;\n\t\tthis.countDown = this.countUp = 0;\n\t\tthis.count = 1;\n\t\tthis.isFirst = true;\n\t\tthis.isFinal = false;\n\t\tthis.isAlternate = false;\n\t\tthis.isRepeat = false;\n\t\tthis.isHold = false;\n\t\tthis.isTap = false;\n\t\tthis.isDoubleTap = false;\n\t\tthis.isTripleTap = false;\n\t\tthis.isQuadTap = false;\n\t\tthis.isQuintTap = false;\n\t\tthis.isMultiTap = false;\n\t\tthis.isMultiTapHold = false;\n\t\tthis.isMultiTapHoldRepeat = false;\n\t\tthis.isMultiTapHoldRepeatDelay = false;\n\t\tthis.isMultiTapHoldRepeatRate = false;\n\t\tthis.isMultiTapHoldRepeatRateDelay = false;\n\t\tthis.isMultiTapHoldRepeatRateDelayRepeat = false;\n\t\tthis.isMultiTapHoldRepeatRateDelayRepeatDelay = false;\n\t\tthis.isMultiTapHoldRepeatRateDelayRepeatDelayRepeat = false;\n\t\tthis.isMultiTapHoldRepeatRateDelayRepeatDelayRepeatDelay = false;\n\t\tthis.isMultiTapHoldRepeatRateDelayRepeatDelayRepeatDelayRepeat = false;\n\t\tthis.isMultiTapHoldRepeatRateDelayRepeatDelayRepeatDelayRepeatDelay = false;\n\t\tthis.isMultiTapHoldRepeatRateDelayRepeatDelayRepeatDelayRepeatDelayRepeat = false;\n\t\tthis.isMultiTapHoldRepeatRateDelayRepeatDelayRepeatDelayRepeatDelayRepeatDelay = false;\n\t\tthis.isMultiTapHoldRepeatRateDelayRepeatDelayRepeatDelayRepeatDelayRepeatDelayRepeat = false;\n\t\tthis.isMultiTapHoldRepeatRateDelayRepeatDelayRepeatDelayRepeatDelayRepeatDelayRepeatDelay = false;\n\t\tthis.isMultiTapHoldRepeatRateDelayRepeatDelayRepeatDelayRepeatDelayRepeatDelayRepeatDelayRepeat = false;\n\t\tthis.isMultiTapHoldRepeatRateDelayRepeatDelayRepeatDelayRepeatDelayRepeatDelayRepeatDelayRepeatDelay = false;\n\t\tthis.isMultiTapHoldRepeatRateDelayRepeatDelayRepeatDelayRepeatDelayRepeatDelayRepeatDelayRepeatDelayRepeat", "CodeBleu_score": 28.205685999552394}, {"code": "start: function (event, value){\n\t\tif (!this.isDown) {\n\t\tthis.isDown = true;\n\t\tthis.timeDown = this.time;\n\t\tthis.timeUp = -1;\n\t\tthis.timeDownEvent = event;\n\t\tthis.timeUpEvent = null;\n\t\tthis.valueDown = value;\n\t\tthis.valueUp = null;\n\t\tthis.altKey = event.altKey;\n\t\tthis.ctrlKey = event.ctrlKey;\n\t\tthis.shiftKey = event.shiftKey;\n\t\tthis.key = event.keyCode;\n\t\tthis.dispatch('onDown', this.isDown, this.valueDown);\n\t}\n}", "CodeBleu_score": 43.17576568995488}, {"code": "start: function (event, value){\n\t\tif (this.state !== 'down') {\n\t\tthis.state = 'down';\n\t\tthis.time = new Date();\n\t\tthis.count = 0;\n\t\tthis.value = value;\n\t\tthis.event = event;\n\t\tthis.alt = event.altKey;\n\t\tthis.shift = event.shiftKey;\n\t\tthis.ctrl = event.ctrlKey;\n\t\tthis.meta = event.metaKey;\n\t\tthis.dispatch('onDown', this.event, this.value);\n\t}\n}", "CodeBleu_score": 39.86898491354584}]}
{"instance_id": "a2cb3bdacb1e", "generation_result": [{"code": "onMouseDown: function (event){\n\t\tif (this.inputEnabled && !this.dragging) {\n\t\tthis.dragging = true;\n\t\tthis.dragStart(event);\n\t\tif (this.preventSelectionOnDrag) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n\n\tif (this.onMouseDownCallback) {\n\t\tthis.onMouseDownCallback(event);\n\t}\n}", "CodeBleu_score": 28.074398717345485}, {"code": "onMouseDown: function (event){\n\t\tif (this.enabled) {\n\t\tif (this.inputEnabled) {\n\t\t\tthis.mouse.start(event);\n\t\t}\n\t\tif (this.mouse.isDown) {\n\t\t\tevent.preventDefault();\n\t\t\tif (this.onMouseDownCallback) {\n\t\t\t\tthis.onMouseDownCallback(event);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 27.201754355801196}, {"code": "onMouseDown: function (event){\n\t\tif (this.enabled) {\n\t\tthis.mouseDown = true;\n\t\tthis.mouseDownEvent = event;\n\t\tif (this.preventDefault) event.preventDefault();\n\t\tif (this.onMouseDownCallback) this.onMouseDownCallback(event);\n\t}\n}", "CodeBleu_score": 32.553430859205626}]}
{"instance_id": "88538a5b66e8", "generation_result": [{"code": "onMouseUpGlobal: function (event){\n\t\tif (this.mouseEnabled) {\n\t\tif (this.mouseInput) {\n\t\t\t// Store the mouse position and identifier\n\t\t\tthis.mousePos = [event.clientX, event.clientY];\n\t\t\tthis.mouseIdentifier = event.identifier;\n\n\t\t\t// If the mouse down callback exists, invoke it\n\t\t\tif (this.mouseDownCallback) {\n\t\t\t\tthis.mouseDownCallback(event);\n\t\t\t}\n\n\t\t\t// If the mouse input is enabled, start the pointer input process\n\t\t\tif (this.mouseInput) {\n\t\t\t\tthis.startPointerInput();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 43.63850550402712}, {"code": "onMouseUpGlobal: function (event){\n\t\tif (this.enabled) {\n\t\tevent.identifier = this.identifier;\n\t\tthis.onMouseUp(event);\n\t\tthis.onMouseUpGlobal(event);\n\t}\n}", "CodeBleu_score": 25.571384896734152}, {"code": "onMouseUpGlobal: function (event){\n\t\tif (this.inputEnabled && this.input.mouse) {\n\t\tthis.input.mouse.onMouseUp(event);\n\t}\n}", "CodeBleu_score": 27.122767339312404}]}
{"instance_id": "bf8b43ab3487", "generation_result": [{"code": "onTouchEnter: function (event){\n\t\tif (this.enabled && this.game.input.enabled) {\n\t\tthis.touchEnterCallback.call(this.callbackContext, event);\n\t\tif (this.preventDefault) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n}", "CodeBleu_score": 31.54291576749724}, {"code": "onTouchEnter: function (event){\n\t\tif (this.game.input.enabled && this.inputEnabled) {\n\t\tthis.touchEnterCallback(event);\n\t\tevent.preventDefault();\n\t}\n}", "CodeBleu_score": 27.81326102278395}, {"code": "onTouchEnter: function (event){\n\t\tif (this.enabled && this.game.input.enabled) {\n\t\tthis.touchEnterCallback(event);\n\t\tevent.preventDefault();\n\t}\n}", "CodeBleu_score": 27.58553506097367}]}
